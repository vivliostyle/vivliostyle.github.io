/**
 * @vivliostyle/viewer v2.5.0
 * Vivliostyle Viewer - HTML+CSS typesetting and rich paged viewing with EPUB/Web publications support
 *
 * @author Vivliostyle Foundation
 * @license AGPL-3.0
 * @preserve
 */
!function(t){"function"==typeof define&&define.amd?define(t):t()}((function(){"use strict";function t(t,e,n){return t(n={path:e,exports:{},require:function(t,e){return function(){throw new Error("Dynamic requires are not currently supported by @rollup/plugin-commonjs")}(null==e&&n.path)}},n.exports),n.exports}var e=t((function(t,e){
/*!
	   * Knockout JavaScript library v3.5.1
	   * (c) The Knockout.js team - http://knockoutjs.com/
	   * License: MIT (http://www.opensource.org/licenses/mit-license.php)
	   */
!function(n){var i=this||(0,eval)("this"),r=i.document,o=i.navigator,a=i.jQuery,s=i.JSON;a||"undefined"==typeof jQuery||(a=jQuery),function(n){n(t.exports||e)}((function(t,e){function u(t,e){return(null===t||typeof t in y)&&t===e}function l(t,e){var i;return function(){i||(i=C.a.setTimeout((function(){i=n,t()}),e))}}function c(t,e){var n;return function(){clearTimeout(n),n=C.a.setTimeout(t,e)}}function h(t,e){e&&"change"!==e?"beforeChange"===e?this.pc(t):this.gb(t,e):this.qc(t)}function f(t,e){null!==e&&e.s&&e.s()}function d(t,e){var n=this.qd,i=n[T];i.ra||(this.Qb&&this.mb[e]?(n.uc(e,t,this.mb[e]),this.mb[e]=null,--this.Qb):i.I[e]||n.uc(e,t,i.J?{da:t}:n.$c(t)),t.Ja&&t.gd())}var p,g,m,v,E,b,C=void 0!==t?t:{};C.b=function(t,e){for(var n=t.split("."),i=C,r=0;r<n.length-1;r++)i=i[n[r]];i[n[n.length-1]]=e},C.L=function(t,e,n){t[e]=n},C.version="3.5.1",C.b("version",C.version),C.options={deferUpdates:!1,useOnlyNativeEvents:!1,foreachHidesDestroyed:!1},C.a=function(){function t(t,e){for(var n in t)c.call(t,n)&&e(n,t[n])}function e(t,e){if(e)for(var n in e)c.call(e,n)&&(t[n]=e[n]);return t}function u(t,e){return t.__proto__=e,t}function l(t,e,n,i){var r=t[e].match(E)||[];C.a.D(n.match(E),(function(t){C.a.Na(r,t,i)})),t[e]=r.join(" ")}var c=Object.prototype.hasOwnProperty,h={__proto__:[]}instanceof Array,f="function"==typeof Symbol,d={},p={};d[o&&/Firefox\/2/i.test(o.userAgent)?"KeyboardEvent":"UIEvents"]=["keyup","keydown","keypress"],d.MouseEvents="click dblclick mousedown mouseup mousemove mouseover mouseout mouseenter mouseleave".split(" "),t(d,(function(t,e){if(e.length)for(var n=0,i=e.length;n<i;n++)p[e[n]]=t}));var g,m={propertychange:!0},v=r&&function(){for(var t=3,e=r.createElement("div"),i=e.getElementsByTagName("i");e.innerHTML="\x3c!--[if gt IE "+ ++t+"]><i></i><![endif]--\x3e",i[0];);return 4<t?t:n}(),E=/\S+/g;return{Jc:["authenticity_token",/^__RequestVerificationToken(_.*)?$/],D:function(t,e,n){for(var i=0,r=t.length;i<r;i++)e.call(n,t[i],i,t)},A:"function"==typeof Array.prototype.indexOf?function(t,e){return Array.prototype.indexOf.call(t,e)}:function(t,e){for(var n=0,i=t.length;n<i;n++)if(t[n]===e)return n;return-1},Lb:function(t,e,i){for(var r=0,o=t.length;r<o;r++)if(e.call(i,t[r],r,t))return t[r];return n},Pa:function(t,e){var n=C.a.A(t,e);0<n?t.splice(n,1):0===n&&t.shift()},wc:function(t){var e=[];return t&&C.a.D(t,(function(t){0>C.a.A(e,t)&&e.push(t)})),e},Mb:function(t,e,n){var i=[];if(t)for(var r=0,o=t.length;r<o;r++)i.push(e.call(n,t[r],r));return i},jb:function(t,e,n){var i=[];if(t)for(var r=0,o=t.length;r<o;r++)e.call(n,t[r],r)&&i.push(t[r]);return i},Nb:function(t,e){if(e instanceof Array)t.push.apply(t,e);else for(var n=0,i=e.length;n<i;n++)t.push(e[n]);return t},Na:function(t,e,n){var i=C.a.A(C.a.bc(t),e);0>i?n&&t.push(e):n||t.splice(i,1)},Ba:h,extend:e,setPrototypeOf:u,Ab:h?u:e,P:t,Ga:function(t,e,n){if(!t)return t;var i,r={};for(i in t)c.call(t,i)&&(r[i]=e.call(n,t[i],i,t));return r},Tb:function(t){for(;t.firstChild;)C.removeNode(t.firstChild)},Yb:function(t){for(var e=((t=C.a.la(t))[0]&&t[0].ownerDocument||r).createElement("div"),n=0,i=t.length;n<i;n++)e.appendChild(C.oa(t[n]));return e},Ca:function(t,e){for(var n=0,i=t.length,r=[];n<i;n++){var o=t[n].cloneNode(!0);r.push(e?C.oa(o):o)}return r},va:function(t,e){if(C.a.Tb(t),e)for(var n=0,i=e.length;n<i;n++)t.appendChild(e[n])},Xc:function(t,e){var n=t.nodeType?[t]:t;if(0<n.length){for(var i=n[0],r=i.parentNode,o=0,a=e.length;o<a;o++)r.insertBefore(e[o],i);for(o=0,a=n.length;o<a;o++)C.removeNode(n[o])}},Ua:function(t,e){if(t.length){for(e=8===e.nodeType&&e.parentNode||e;t.length&&t[0].parentNode!==e;)t.splice(0,1);for(;1<t.length&&t[t.length-1].parentNode!==e;)t.length--;if(1<t.length){var n=t[0],i=t[t.length-1];for(t.length=0;n!==i;)t.push(n),n=n.nextSibling;t.push(i)}}return t},Zc:function(t,e){7>v?t.setAttribute("selected",e):t.selected=e},Db:function(t){return null===t||t===n?"":t.trim?t.trim():t.toString().replace(/^[\s\xa0]+|[\s\xa0]+$/g,"")},Ud:function(t,e){return t=t||"",!(e.length>t.length)&&t.substring(0,e.length)===e},vd:function(t,e){if(t===e)return!0;if(11===t.nodeType)return!1;if(e.contains)return e.contains(1!==t.nodeType?t.parentNode:t);if(e.compareDocumentPosition)return 16==(16&e.compareDocumentPosition(t));for(;t&&t!=e;)t=t.parentNode;return!!t},Sb:function(t){return C.a.vd(t,t.ownerDocument.documentElement)},kd:function(t){return!!C.a.Lb(t,C.a.Sb)},R:function(t){return t&&t.tagName&&t.tagName.toLowerCase()},Ac:function(t){return C.onError?function(){try{return t.apply(this,arguments)}catch(t){throw C.onError&&C.onError(t),t}}:t},setTimeout:function(t,e){return setTimeout(C.a.Ac(t),e)},Gc:function(t){setTimeout((function(){throw C.onError&&C.onError(t),t}),0)},B:function(t,e,n){var i=C.a.Ac(n);if(n=m[e],C.options.useOnlyNativeEvents||n||!a)if(n||"function"!=typeof t.addEventListener){if(void 0===t.attachEvent)throw Error("Browser doesn't support addEventListener or attachEvent");var r=function(e){i.call(t,e)},o="on"+e;t.attachEvent(o,r),C.a.K.za(t,(function(){t.detachEvent(o,r)}))}else t.addEventListener(e,i,!1);else g||(g="function"==typeof a(t).on?"on":"bind"),a(t)[g](e,i)},Fb:function(t,e){if(!t||!t.nodeType)throw Error("element must be a DOM node when calling triggerEvent");var n;if(n=!("input"!==C.a.R(t)||!t.type||"click"!=e.toLowerCase())&&("checkbox"==(n=t.type)||"radio"==n),C.options.useOnlyNativeEvents||!a||n)if("function"==typeof r.createEvent){if("function"!=typeof t.dispatchEvent)throw Error("The supplied element doesn't support dispatchEvent");(n=r.createEvent(p[e]||"HTMLEvents")).initEvent(e,!0,!0,i,0,0,0,0,0,!1,!1,!1,!1,0,t),t.dispatchEvent(n)}else if(n&&t.click)t.click();else{if(void 0===t.fireEvent)throw Error("Browser doesn't support triggering events");t.fireEvent("on"+e)}else a(t).trigger(e)},f:function(t){return C.O(t)?t():t},bc:function(t){return C.O(t)?t.v():t},Eb:function(t,e,n){var i;e&&("object"==typeof t.classList?(i=t.classList[n?"add":"remove"],C.a.D(e.match(E),(function(e){i.call(t.classList,e)}))):"string"==typeof t.className.baseVal?l(t.className,"baseVal",e,n):l(t,"className",e,n))},Bb:function(t,e){var i=C.a.f(e);null!==i&&i!==n||(i="");var r=C.h.firstChild(t);!r||3!=r.nodeType||C.h.nextSibling(r)?C.h.va(t,[t.ownerDocument.createTextNode(i)]):r.data=i,C.a.Ad(t)},Yc:function(t,e){if(t.name=e,7>=v)try{var n=t.name.replace(/[&<>'"]/g,(function(t){return"&#"+t.charCodeAt(0)+";"}));t.mergeAttributes(r.createElement("<input name='"+n+"'/>"),!1)}catch(t){}},Ad:function(t){9<=v&&(t=1==t.nodeType?t:t.parentNode).style&&(t.style.zoom=t.style.zoom)},wd:function(t){if(v){var e=t.style.width;t.style.width=0,t.style.width=e}},Pd:function(t,e){t=C.a.f(t),e=C.a.f(e);for(var n=[],i=t;i<=e;i++)n.push(i);return n},la:function(t){for(var e=[],n=0,i=t.length;n<i;n++)e.push(t[n]);return e},Da:function(t){return f?Symbol(t):t},Zd:6===v,$d:7===v,W:v,Lc:function(t,e){for(var n=C.a.la(t.getElementsByTagName("input")).concat(C.a.la(t.getElementsByTagName("textarea"))),i="string"==typeof e?function(t){return t.name===e}:function(t){return e.test(t.name)},r=[],o=n.length-1;0<=o;o--)i(n[o])&&r.push(n[o]);return r},Nd:function(t){return"string"==typeof t&&(t=C.a.Db(t))?s&&s.parse?s.parse(t):new Function("return "+t)():null},hc:function(t,e,n){if(!s||!s.stringify)throw Error("Cannot find JSON.stringify(). Some browsers (e.g., IE < 8) don't support it natively, but you can overcome this by adding a script reference to json2.js, downloadable from http://www.json.org/json2.js");return s.stringify(C.a.f(t),e,n)},Od:function(e,n,i){var o=(i=i||{}).params||{},a=i.includeFields||this.Jc,s=e;if("object"==typeof e&&"form"===C.a.R(e)){s=e.action;for(var u=a.length-1;0<=u;u--)for(var l=C.a.Lc(e,a[u]),c=l.length-1;0<=c;c--)o[l[c].name]=l[c].value}n=C.a.f(n);var h=r.createElement("form");for(var f in h.style.display="none",h.action=s,h.method="post",n)(e=r.createElement("input")).type="hidden",e.name=f,e.value=C.a.hc(C.a.f(n[f])),h.appendChild(e);t(o,(function(t,e){var n=r.createElement("input");n.type="hidden",n.name=t,n.value=e,h.appendChild(n)})),r.body.appendChild(h),i.submitter?i.submitter(h):h.submit(),setTimeout((function(){h.parentNode.removeChild(h)}),0)}}}(),C.b("utils",C.a),C.b("utils.arrayForEach",C.a.D),C.b("utils.arrayFirst",C.a.Lb),C.b("utils.arrayFilter",C.a.jb),C.b("utils.arrayGetDistinctValues",C.a.wc),C.b("utils.arrayIndexOf",C.a.A),C.b("utils.arrayMap",C.a.Mb),C.b("utils.arrayPushAll",C.a.Nb),C.b("utils.arrayRemoveItem",C.a.Pa),C.b("utils.cloneNodes",C.a.Ca),C.b("utils.createSymbolOrString",C.a.Da),C.b("utils.extend",C.a.extend),C.b("utils.fieldsIncludedWithJsonPost",C.a.Jc),C.b("utils.getFormFields",C.a.Lc),C.b("utils.objectMap",C.a.Ga),C.b("utils.peekObservable",C.a.bc),C.b("utils.postJson",C.a.Od),C.b("utils.parseJson",C.a.Nd),C.b("utils.registerEventHandler",C.a.B),C.b("utils.stringifyJson",C.a.hc),C.b("utils.range",C.a.Pd),C.b("utils.toggleDomNodeCssClass",C.a.Eb),C.b("utils.triggerEvent",C.a.Fb),C.b("utils.unwrapObservable",C.a.f),C.b("utils.objectForEach",C.a.P),C.b("utils.addOrRemoveItem",C.a.Na),C.b("utils.setTextContent",C.a.Bb),C.b("unwrap",C.a.f),Function.prototype.bind||(Function.prototype.bind=function(t){var e=this;if(1===arguments.length)return function(){return e.apply(t,arguments)};var n=Array.prototype.slice.call(arguments,1);return function(){var i=n.slice(0);return i.push.apply(i,arguments),e.apply(t,i)}}),C.a.g=new function(){var t,e,i=0,r="__ko__"+(new Date).getTime(),o={};return C.a.W?(t=function(t,e){var a=t[r];if(!a||"null"===a||!o[a]){if(!e)return n;a=t[r]="ko"+i++,o[a]={}}return o[a]},e=function(t){var e=t[r];return!!e&&(delete o[e],t[r]=null,!0)}):(t=function(t,e){var n=t[r];return!n&&e&&(n=t[r]={}),n},e=function(t){return!!t[r]&&(delete t[r],!0)}),{get:function(e,n){var i=t(e,!1);return i&&i[n]},set:function(e,i,r){(e=t(e,r!==n))&&(e[i]=r)},Ub:function(e,n,i){return(e=t(e,!0))[n]||(e[n]=i)},clear:e,Z:function(){return i+++r}}},C.b("utils.domData",C.a.g),C.b("utils.domData.clear",C.a.g.clear),C.a.K=new function(){function t(t,e){var i=C.a.g.get(t,r);return i===n&&e&&(i=[],C.a.g.set(t,r,i)),i}function e(e){if(n=t(e,!1))for(var n=n.slice(0),r=0;r<n.length;r++)n[r](e);C.a.g.clear(e),C.a.K.cleanExternalData(e),s[e.nodeType]&&i(e.childNodes,!0)}function i(t,n){for(var i,r=[],o=0;o<t.length;o++)if((!n||8===t[o].nodeType)&&(e(r[r.length]=i=t[o]),t[o]!==i))for(;o--&&-1==C.a.A(r,t[o]););}var r=C.a.g.Z(),o={1:!0,8:!0,9:!0},s={1:!0,9:!0};return{za:function(e,n){if("function"!=typeof n)throw Error("Callback must be a function");t(e,!0).push(n)},yb:function(e,i){var o=t(e,!1);o&&(C.a.Pa(o,i),0==o.length&&C.a.g.set(e,r,n))},oa:function(t){return C.u.G((function(){o[t.nodeType]&&(e(t),s[t.nodeType]&&i(t.getElementsByTagName("*")))})),t},removeNode:function(t){C.oa(t),t.parentNode&&t.parentNode.removeChild(t)},cleanExternalData:function(t){a&&"function"==typeof a.cleanData&&a.cleanData([t])}}},C.oa=C.a.K.oa,C.removeNode=C.a.K.removeNode,C.b("cleanNode",C.oa),C.b("removeNode",C.removeNode),C.b("utils.domNodeDisposal",C.a.K),C.b("utils.domNodeDisposal.addDisposeCallback",C.a.K.za),C.b("utils.domNodeDisposal.removeDisposeCallback",C.a.K.yb),p=[0,"",""],E={thead:g=[1,"<table>","</table>"],tbody:g,tfoot:g,tr:[2,"<table><tbody>","</tbody></table>"],td:m=[3,"<table><tbody><tr>","</tr></tbody></table>"],th:m,option:v=[1,"<select multiple='multiple'>","</select>"],optgroup:v},b=8>=C.a.W,C.a.ua=function(t,e){var n;if(a){if(a.parseHTML)n=a.parseHTML(t,e)||[];else if((n=a.clean([t],e))&&n[0]){for(var o=n[0];o.parentNode&&11!==o.parentNode.nodeType;)o=o.parentNode;o.parentNode&&o.parentNode.removeChild(o)}}else{(n=e)||(n=r),o=n.parentWindow||n.defaultView||i;var s,u=C.a.Db(t).toLowerCase(),l=n.createElement("div");for(s=(u=u.match(/^(?:\x3c!--.*?--\x3e\s*?)*?<([a-z]+)[\s>]/))&&E[u[1]]||p,u=s[0],s="ignored<div>"+s[1]+t+s[2]+"</div>","function"==typeof o.innerShiv?l.appendChild(o.innerShiv(s)):(b&&n.body.appendChild(l),l.innerHTML=s,b&&l.parentNode.removeChild(l));u--;)l=l.lastChild;n=C.a.la(l.lastChild.childNodes)}return n},C.a.Md=function(t,e){var n=C.a.ua(t,e);return n.length&&n[0].parentElement||C.a.Yb(n)},C.a.fc=function(t,e){if(C.a.Tb(t),null!==(e=C.a.f(e))&&e!==n)if("string"!=typeof e&&(e=e.toString()),a)a(t).html(e);else for(var i=C.a.ua(e,t.ownerDocument),r=0;r<i.length;r++)t.appendChild(i[r])},C.b("utils.parseHtmlFragment",C.a.ua),C.b("utils.setHtml",C.a.fc),C.aa=function(){function t(e,n){if(e)if(8==e.nodeType)null!=(i=C.aa.Uc(e.nodeValue))&&n.push({ud:e,Kd:i});else if(1==e.nodeType)for(var i=0,r=e.childNodes,o=r.length;i<o;i++)t(r[i],n)}var e={};return{Xb:function(t){if("function"!=typeof t)throw Error("You can only pass a function to ko.memoization.memoize()");var n=(4294967296*(1+Math.random())|0).toString(16).substring(1)+(4294967296*(1+Math.random())|0).toString(16).substring(1);return e[n]=t,"\x3c!--[ko_memo:"+n+"]--\x3e"},bd:function(t,i){var r=e[t];if(r===n)throw Error("Couldn't find any memo with ID "+t+". Perhaps it's already been unmemoized.");try{return r.apply(null,i||[]),!0}finally{delete e[t]}},cd:function(e,n){var i=[];t(e,i);for(var r=0,o=i.length;r<o;r++){var a=i[r].ud,s=[a];n&&C.a.Nb(s,n),C.aa.bd(i[r].Kd,s),a.nodeValue="",a.parentNode&&a.parentNode.removeChild(a)}},Uc:function(t){return(t=t.match(/^\[ko_memo\:(.*?)\]$/))?t[1]:null}}}(),C.b("memoization",C.aa),C.b("memoization.memoize",C.aa.Xb),C.b("memoization.unmemoize",C.aa.bd),C.b("memoization.parseMemoText",C.aa.Uc),C.b("memoization.unmemoizeDomNodeAndDescendants",C.aa.cd),C.na=function(){function t(){if(o)for(var t,e=o,i=0;s<o;)if(t=n[s++]){if(s>e){if(5e3<=++i){s=o,C.a.Gc(Error("'Too much recursion' after processing "+i+" task groups."));break}e=o}try{t()}catch(t){C.a.Gc(t)}}}function e(){t(),s=o=n.length=0}var n=[],o=0,a=1,s=0;return{scheduler:i.MutationObserver?function(t){var e=r.createElement("div");return new MutationObserver(t).observe(e,{attributes:!0}),function(){e.classList.toggle("foo")}}(e):r&&"onreadystatechange"in r.createElement("script")?function(t){var e=r.createElement("script");e.onreadystatechange=function(){e.onreadystatechange=null,r.documentElement.removeChild(e),e=null,t()},r.documentElement.appendChild(e)}:function(t){setTimeout(t,0)},zb:function(t){return o||C.na.scheduler(e),n[o++]=t,a++},cancel:function(t){(t-=a-o)>=s&&t<o&&(n[t]=null)},resetForTesting:function(){var t=o-s;return s=o=n.length=0,t},Sd:t}}(),C.b("tasks",C.na),C.b("tasks.schedule",C.na.zb),C.b("tasks.runEarly",C.na.Sd),C.Ta={throttle:function(t,e){t.throttleEvaluation=e;var n=null;return C.$({read:t,write:function(i){clearTimeout(n),n=C.a.setTimeout((function(){t(i)}),e)}})},rateLimit:function(t,e){var n,i,r;"number"==typeof e?n=e:(n=e.timeout,i=e.method),t.Hb=!1,r="function"==typeof i?i:"notifyWhenChangesStop"==i?c:l,t.ub((function(t){return r(t,n,e)}))},deferred:function(t,e){if(!0!==e)throw Error("The 'deferred' extender only accepts the value 'true', because it is not supported to turn deferral off once enabled.");t.Hb||(t.Hb=!0,t.ub((function(e){var i,r=!1;return function(){if(!r){C.na.cancel(i),i=C.na.zb(e);try{r=!0,t.notifySubscribers(n,"dirty")}finally{r=!1}}}})))},notify:function(t,e){t.equalityComparer="always"==e?null:u}};var y={undefined:1,boolean:1,number:1,string:1};C.b("extenders",C.Ta),C.ic=function(t,e,n){this.da=t,this.lc=e,this.mc=n,this.Ib=!1,this.fb=this.Jb=null,C.L(this,"dispose",this.s),C.L(this,"disposeWhenNodeIsRemoved",this.l)},C.ic.prototype.s=function(){this.Ib||(this.fb&&C.a.K.yb(this.Jb,this.fb),this.Ib=!0,this.mc(),this.da=this.lc=this.mc=this.Jb=this.fb=null)},C.ic.prototype.l=function(t){this.Jb=t,C.a.K.za(t,this.fb=this.s.bind(this))},C.T=function(){C.a.Ab(this,w),w.qb(this)};var w={qb:function(t){t.U={change:[]},t.sc=1},subscribe:function(t,e,n){var i=this;n=n||"change";var r=new C.ic(i,e?t.bind(e):t,(function(){C.a.Pa(i.U[n],r),i.hb&&i.hb(n)}));return i.Qa&&i.Qa(n),i.U[n]||(i.U[n]=[]),i.U[n].push(r),r},notifySubscribers:function(t,e){if("change"===(e=e||"change")&&this.Gb(),this.Wa(e)){var n="change"===e&&this.ed||this.U[e].slice(0);try{C.u.xc();for(var i,r=0;i=n[r];++r)i.Ib||i.lc(t)}finally{C.u.end()}}},ob:function(){return this.sc},Dd:function(t){return this.ob()!==t},Gb:function(){++this.sc},ub:function(t){var e,n,i,r,o,a=this,s=C.O(a);a.gb||(a.gb=a.notifySubscribers,a.notifySubscribers=h);var u=t((function(){a.Ja=!1,s&&r===a&&(r=a.nc?a.nc():a());var t=n||o&&a.sb(i,r);o=n=e=!1,t&&a.gb(i=r)}));a.qc=function(t,n){n&&a.Ja||(o=!n),a.ed=a.U.change.slice(0),a.Ja=e=!0,r=t,u()},a.pc=function(t){e||(i=t,a.gb(t,"beforeChange"))},a.rc=function(){o=!0},a.gd=function(){a.sb(i,a.v(!0))&&(n=!0)}},Wa:function(t){return this.U[t]&&this.U[t].length},Bd:function(t){if(t)return this.U[t]&&this.U[t].length||0;var e=0;return C.a.P(this.U,(function(t,n){"dirty"!==t&&(e+=n.length)})),e},sb:function(t,e){return!this.equalityComparer||!this.equalityComparer(t,e)},toString:function(){return"[object Object]"},extend:function(t){var e=this;return t&&C.a.P(t,(function(t,n){var i=C.Ta[t];"function"==typeof i&&(e=i(e,n)||e)})),e}};C.L(w,"init",w.qb),C.L(w,"subscribe",w.subscribe),C.L(w,"extend",w.extend),C.L(w,"getSubscriptionsCount",w.Bd),C.a.Ba&&C.a.setPrototypeOf(w,Function.prototype),C.T.fn=w,C.Qc=function(t){return null!=t&&"function"==typeof t.subscribe&&"function"==typeof t.notifySubscribers},C.b("subscribable",C.T),C.b("isSubscribable",C.Qc),C.S=C.u=function(){function t(t){i.push(n),n=t}function e(){n=i.pop()}var n,i=[],r=0;return{xc:t,end:e,cc:function(t){if(n){if(!C.Qc(t))throw Error("Only subscribable things can act as dependencies");n.od.call(n.pd,t,t.fd||(t.fd=++r))}},G:function(n,i,r){try{return t(),n.apply(i,r||[])}finally{e()}},qa:function(){if(n)return n.o.qa()},Va:function(){if(n)return n.o.Va()},Ya:function(){if(n)return n.Ya},o:function(){if(n)return n.o}}}(),C.b("computedContext",C.S),C.b("computedContext.getDependenciesCount",C.S.qa),C.b("computedContext.getDependencies",C.S.Va),C.b("computedContext.isInitial",C.S.Ya),C.b("computedContext.registerDependency",C.S.cc),C.b("ignoreDependencies",C.Yd=C.u.G);var D=C.a.Da("_latestValue");C.ta=function(t){function e(){return 0<arguments.length?(e.sb(e[D],arguments[0])&&(e.ya(),e[D]=arguments[0],e.xa()),this):(C.u.cc(e),e[D])}return e[D]=t,C.a.Ba||C.a.extend(e,C.T.fn),C.T.fn.qb(e),C.a.Ab(e,S),C.options.deferUpdates&&C.Ta.deferred(e,!0),e};var S={equalityComparer:u,v:function(){return this[D]},xa:function(){this.notifySubscribers(this[D],"spectate"),this.notifySubscribers(this[D])},ya:function(){this.notifySubscribers(this[D],"beforeChange")}};C.a.Ba&&C.a.setPrototypeOf(S,C.T.fn);var N=C.ta.Ma="__ko_proto__";S[N]=C.ta,C.O=function(t){if((t="function"==typeof t&&t[N])&&t!==S[N]&&t!==C.o.fn[N])throw Error("Invalid object that looks like an observable; possibly from another Knockout instance");return!!t},C.Za=function(t){return"function"==typeof t&&(t[N]===S[N]||t[N]===C.o.fn[N]&&t.Nc)},C.b("observable",C.ta),C.b("isObservable",C.O),C.b("isWriteableObservable",C.Za),C.b("isWritableObservable",C.Za),C.b("observable.fn",S),C.L(S,"peek",S.v),C.L(S,"valueHasMutated",S.xa),C.L(S,"valueWillMutate",S.ya),C.Ha=function(t){if("object"!=typeof(t=t||[])||!("length"in t))throw Error("The argument passed when initializing an observable array must be an array, or null, or undefined.");return t=C.ta(t),C.a.Ab(t,C.Ha.fn),t.extend({trackArrayChanges:!0})},C.Ha.fn={remove:function(t){for(var e=this.v(),n=[],i="function"!=typeof t||C.O(t)?function(e){return e===t}:t,r=0;r<e.length;r++){var o=e[r];if(i(o)){if(0===n.length&&this.ya(),e[r]!==o)throw Error("Array modified during remove; cannot remove item");n.push(o),e.splice(r,1),r--}}return n.length&&this.xa(),n},removeAll:function(t){if(t===n){var e=this.v(),i=e.slice(0);return this.ya(),e.splice(0,e.length),this.xa(),i}return t?this.remove((function(e){return 0<=C.a.A(t,e)})):[]},destroy:function(t){var e=this.v(),n="function"!=typeof t||C.O(t)?function(e){return e===t}:t;this.ya();for(var i=e.length-1;0<=i;i--){var r=e[i];n(r)&&(r._destroy=!0)}this.xa()},destroyAll:function(t){return t===n?this.destroy((function(){return!0})):t?this.destroy((function(e){return 0<=C.a.A(t,e)})):[]},indexOf:function(t){var e=this();return C.a.A(e,t)},replace:function(t,e){var n=this.indexOf(t);0<=n&&(this.ya(),this.v()[n]=e,this.xa())},sorted:function(t){var e=this().slice(0);return t?e.sort(t):e.sort()},reversed:function(){return this().slice(0).reverse()}},C.a.Ba&&C.a.setPrototypeOf(C.Ha.fn,C.ta.fn),C.a.D("pop push reverse shift sort splice unshift".split(" "),(function(t){C.Ha.fn[t]=function(){var e=this.v();this.ya(),this.zc(e,t,arguments);var n=e[t].apply(e,arguments);return this.xa(),n===e?this:n}})),C.a.D(["slice"],(function(t){C.Ha.fn[t]=function(){var e=this();return e[t].apply(e,arguments)}})),C.Pc=function(t){return C.O(t)&&"function"==typeof t.remove&&"function"==typeof t.push},C.b("observableArray",C.Ha),C.b("isObservableArray",C.Pc),C.Ta.trackArrayChanges=function(t,e){function i(){function e(){if(l){var e,n=[].concat(t.v()||[]);t.Wa("arrayChange")&&((!u||1<l)&&(u=C.a.Pb(a,n,t.Ob)),e=u),a=n,u=null,l=0,e&&e.length&&t.notifySubscribers(e,"arrayChange")}}s?e():(s=!0,o=t.subscribe((function(){++l}),null,"spectate"),a=[].concat(t.v()||[]),u=null,r=t.subscribe(e))}if(t.Ob={},e&&"object"==typeof e&&C.a.extend(t.Ob,e),t.Ob.sparse=!0,!t.zc){var r,o,a,s=!1,u=null,l=0,c=t.Qa,h=t.hb;t.Qa=function(e){c&&c.call(t,e),"arrayChange"===e&&i()},t.hb=function(e){h&&h.call(t,e),"arrayChange"!==e||t.Wa("arrayChange")||(r&&r.s(),o&&o.s(),o=r=null,s=!1,a=n)},t.zc=function(t,e,n){function i(t,e,n){return r[r.length]={status:t,value:e,index:n}}if(s&&!l){var r=[],o=t.length,a=n.length,c=0;switch(e){case"push":c=o;case"unshift":for(e=0;e<a;e++)i("added",n[e],c+e);break;case"pop":c=o-1;case"shift":o&&i("deleted",t[c],c);break;case"splice":e=Math.min(Math.max(0,0>n[0]?o+n[0]:n[0]),o),o=1===a?o:Math.min(e+(n[1]||0),o),a=e+a-2,c=Math.max(o,a);for(var h=[],f=[],d=2;e<c;++e,++d)e<o&&f.push(i("deleted",t[e],e)),e<a&&h.push(i("added",n[d],e));C.a.Kc(f,h);break;default:return}u=r}}}};var T=C.a.Da("_state");C.o=C.$=function(t,e,i){function r(){if(0<arguments.length){if("function"!=typeof o)throw Error("Cannot write a value to a ko.computed unless you specify a 'write' option. If you wish to read the current value, don't pass any parameters.");return o.apply(a.nb,arguments),this}return a.ra||C.u.cc(r),(a.ka||a.J&&r.Xa())&&r.ha(),a.X}if("object"==typeof t?i=t:(i=i||{},t&&(i.read=t)),"function"!=typeof i.read)throw Error("Pass a function that returns the value of the ko.computed");var o=i.write,a={X:n,sa:!0,ka:!0,rb:!1,jc:!1,ra:!1,wb:!1,J:!1,Wc:i.read,nb:e||i.owner,l:i.disposeWhenNodeIsRemoved||i.l||null,Sa:i.disposeWhen||i.Sa,Rb:null,I:{},V:0,Ic:null};return r[T]=a,r.Nc="function"==typeof o,C.a.Ba||C.a.extend(r,C.T.fn),C.T.fn.qb(r),C.a.Ab(r,A),i.pure?(a.wb=!0,a.J=!0,C.a.extend(r,x)):i.deferEvaluation&&C.a.extend(r,I),C.options.deferUpdates&&C.Ta.deferred(r,!0),a.l&&(a.jc=!0,a.l.nodeType||(a.l=null)),a.J||i.deferEvaluation||r.ha(),a.l&&r.ja()&&C.a.K.za(a.l,a.Rb=function(){r.s()}),r};var A={equalityComparer:u,qa:function(){return this[T].V},Va:function(){var t=[];return C.a.P(this[T].I,(function(e,n){t[n.Ka]=n.da})),t},Vb:function(t){if(!this[T].V)return!1;var e=this.Va();return-1!==C.a.A(e,t)||!!C.a.Lb(e,(function(e){return e.Vb&&e.Vb(t)}))},uc:function(t,e,n){if(this[T].wb&&e===this)throw Error("A 'pure' computed must not be called recursively");this[T].I[t]=n,n.Ka=this[T].V++,n.La=e.ob()},Xa:function(){var t,e,n=this[T].I;for(t in n)if(Object.prototype.hasOwnProperty.call(n,t)&&(e=n[t],this.Ia&&e.da.Ja||e.da.Dd(e.La)))return!0},Jd:function(){this.Ia&&!this[T].rb&&this.Ia(!1)},ja:function(){var t=this[T];return t.ka||0<t.V},Rd:function(){this.Ja?this[T].ka&&(this[T].sa=!0):this.Hc()},$c:function(t){if(t.Hb){var e=t.subscribe(this.Jd,this,"dirty"),n=t.subscribe(this.Rd,this);return{da:t,s:function(){e.s(),n.s()}}}return t.subscribe(this.Hc,this)},Hc:function(){var t=this,e=t.throttleEvaluation;e&&0<=e?(clearTimeout(this[T].Ic),this[T].Ic=C.a.setTimeout((function(){t.ha(!0)}),e)):t.Ia?t.Ia(!0):t.ha(!0)},ha:function(t){var e=this[T],n=e.Sa,i=!1;if(!e.rb&&!e.ra){if(e.l&&!C.a.Sb(e.l)||n&&n()){if(!e.jc)return void this.s()}else e.jc=!1;e.rb=!0;try{i=this.zd(t)}finally{e.rb=!1}return i}},zd:function(t){var e=this[T],i=!1,r=e.wb?n:!e.V;i={qd:this,mb:e.I,Qb:e.V},C.u.xc({pd:i,od:d,o:this,Ya:r}),e.I={},e.V=0;var o=this.yd(e,i);return e.V?i=this.sb(e.X,o):(this.s(),i=!0),i&&(e.J?this.Gb():this.notifySubscribers(e.X,"beforeChange"),e.X=o,this.notifySubscribers(e.X,"spectate"),!e.J&&t&&this.notifySubscribers(e.X),this.rc&&this.rc()),r&&this.notifySubscribers(e.X,"awake"),i},yd:function(t,e){try{var n=t.Wc;return t.nb?n.call(t.nb):n()}finally{C.u.end(),e.Qb&&!t.J&&C.a.P(e.mb,f),t.sa=t.ka=!1}},v:function(t){var e=this[T];return(e.ka&&(t||!e.V)||e.J&&this.Xa())&&this.ha(),e.X},ub:function(t){C.T.fn.ub.call(this,t),this.nc=function(){return this[T].J||(this[T].sa?this.ha():this[T].ka=!1),this[T].X},this.Ia=function(t){this.pc(this[T].X),this[T].ka=!0,t&&(this[T].sa=!0),this.qc(this,!t)}},s:function(){var t=this[T];!t.J&&t.I&&C.a.P(t.I,(function(t,e){e.s&&e.s()})),t.l&&t.Rb&&C.a.K.yb(t.l,t.Rb),t.I=n,t.V=0,t.ra=!0,t.sa=!1,t.ka=!1,t.J=!1,t.l=n,t.Sa=n,t.Wc=n,this.Nc||(t.nb=n)}},x={Qa:function(t){var e=this,n=e[T];if(!n.ra&&n.J&&"change"==t){if(n.J=!1,n.sa||e.Xa())n.I=null,n.V=0,e.ha()&&e.Gb();else{var i=[];C.a.P(n.I,(function(t,e){i[e.Ka]=t})),C.a.D(i,(function(t,i){var r=n.I[t],o=e.$c(r.da);o.Ka=i,o.La=r.La,n.I[t]=o})),e.Xa()&&e.ha()&&e.Gb()}n.ra||e.notifySubscribers(n.X,"awake")}},hb:function(t){var e=this[T];e.ra||"change"!=t||this.Wa("change")||(C.a.P(e.I,(function(t,n){n.s&&(e.I[t]={da:n.da,Ka:n.Ka,La:n.La},n.s())})),e.J=!0,this.notifySubscribers(n,"asleep"))},ob:function(){var t=this[T];return t.J&&(t.sa||this.Xa())&&this.ha(),C.T.fn.ob.call(this)}},I={Qa:function(t){"change"!=t&&"beforeChange"!=t||this.v()}};C.a.Ba&&C.a.setPrototypeOf(A,C.T.fn);var F=C.ta.Ma;A[F]=C.o,C.Oc=function(t){return"function"==typeof t&&t[F]===A[F]},C.Fd=function(t){return C.Oc(t)&&t[T]&&t[T].wb},C.b("computed",C.o),C.b("dependentObservable",C.o),C.b("isComputed",C.Oc),C.b("isPureComputed",C.Fd),C.b("computed.fn",A),C.L(A,"peek",A.v),C.L(A,"dispose",A.s),C.L(A,"isActive",A.ja),C.L(A,"getDependenciesCount",A.qa),C.L(A,"getDependencies",A.Va),C.xb=function(t,e){return"function"==typeof t?C.o(t,e,{pure:!0}):((t=C.a.extend({},t)).pure=!0,C.o(t,e))},C.b("pureComputed",C.xb),function(){function t(i,r,o){if(o=o||new e,"object"!=typeof(i=r(i))||null===i||i===n||i instanceof RegExp||i instanceof Date||i instanceof String||i instanceof Number||i instanceof Boolean)return i;var a=i instanceof Array?[]:{};return o.save(i,a),function(t,e){if(t instanceof Array){for(var n=0;n<t.length;n++)e(n);"function"==typeof t.toJSON&&e("toJSON")}else for(n in t)e(n)}(i,(function(e){var s=r(i[e]);switch(typeof s){case"boolean":case"number":case"string":case"function":a[e]=s;break;case"object":case"undefined":var u=o.get(s);a[e]=u!==n?u:t(s,r,o)}})),a}function e(){this.keys=[],this.values=[]}C.ad=function(e){if(0==arguments.length)throw Error("When calling ko.toJS, pass the object you want to convert.");return t(e,(function(t){for(var e=0;C.O(t)&&10>e;e++)t=t();return t}))},C.toJSON=function(t,e,n){return t=C.ad(t),C.a.hc(t,e,n)},e.prototype={constructor:e,save:function(t,e){var n=C.a.A(this.keys,t);0<=n?this.values[n]=e:(this.keys.push(t),this.values.push(e))},get:function(t){return 0<=(t=C.a.A(this.keys,t))?this.values[t]:n}}}(),C.b("toJS",C.ad),C.b("toJSON",C.toJSON),C.Wd=function(t,e,n){function i(e){var i=C.xb(t,n).extend({ma:"always"}),r=i.subscribe((function(t){t&&(r.s(),e(t))}));return i.notifySubscribers(i.v()),r}return"function"!=typeof Promise||e?i(e.bind(n)):new Promise(i)},C.b("when",C.Wd),C.w={M:function(t){switch(C.a.R(t)){case"option":return!0===t.__ko__hasDomDataOptionValue__?C.a.g.get(t,C.c.options.$b):7>=C.a.W?t.getAttributeNode("value")&&t.getAttributeNode("value").specified?t.value:t.text:t.value;case"select":return 0<=t.selectedIndex?C.w.M(t.options[t.selectedIndex]):n;default:return t.value}},cb:function(t,e,i){switch(C.a.R(t)){case"option":"string"==typeof e?(C.a.g.set(t,C.c.options.$b,n),"__ko__hasDomDataOptionValue__"in t&&delete t.__ko__hasDomDataOptionValue__,t.value=e):(C.a.g.set(t,C.c.options.$b,e),t.__ko__hasDomDataOptionValue__=!0,t.value="number"==typeof e?e:"");break;case"select":""!==e&&null!==e||(e=n);for(var r,o=-1,a=0,s=t.options.length;a<s;++a)if((r=C.w.M(t.options[a]))==e||""===r&&e===n){o=a;break}(i||0<=o||e===n&&1<t.size)&&(t.selectedIndex=o,6===C.a.W&&C.a.setTimeout((function(){t.selectedIndex=o}),0));break;default:null!==e&&e!==n||(e=""),t.value=e}}},C.b("selectExtensions",C.w),C.b("selectExtensions.readValue",C.w.M),C.b("selectExtensions.writeValue",C.w.cb),C.m=function(){function t(t){123===(t=C.a.Db(t)).charCodeAt(0)&&(t=t.slice(1,-1));var e,n=[],a=(t+="\n,").match(i),s=[],u=0;if(1<a.length){for(var l,c=0;l=a[c];++c){var h=l.charCodeAt(0);if(44===h){if(0>=u){n.push(e&&s.length?{key:e,value:s.join("")}:{unknown:e||s.join("")}),e=u=0,s=[];continue}}else if(58===h){if(!u&&!e&&1===s.length){e=s.pop();continue}}else{if(47===h&&1<l.length&&(47===l.charCodeAt(1)||42===l.charCodeAt(1)))continue;47===h&&c&&1<l.length?(h=a[c-1].match(r))&&!o[h[0]]&&(a=(t=t.substr(t.indexOf(l)+1)).match(i),c=-1,l="/"):40===h||123===h||91===h?++u:41===h||125===h||93===h?--u:e||s.length||34!==h&&39!==h||(l=l.slice(1,-1))}s.push(l)}if(0<u)throw Error("Unbalanced parentheses, braces, or brackets")}return n}var e=["true","false","null","undefined"],n=/^(?:[$_a-z][$\w]*|(.+)(\.\s*[$_a-z][$\w]*|\[.+\]))$/i,i=RegExp("\"(?:\\\\.|[^\"])*\"|'(?:\\\\.|[^'])*'|`(?:\\\\.|[^`])*`|/\\*(?:[^*]|\\*+[^*/])*\\*+/|//.*\n|/(?:\\\\.|[^/])+/w*|[^\\s:,/][^,\"'`{}()/:[\\]]*[^\\s,\"'`{}()/:[\\]]|[^\\s]","g"),r=/[\])"'A-Za-z0-9_$]+$/,o={in:1,return:1,typeof:1},a={};return{Ra:[],wa:a,ac:t,vb:function(i,r){function o(t,i){var r;if(!c){var h=C.getBindingHandler(t);if(h&&h.preprocess&&!(i=h.preprocess(i,t,o)))return;(h=a[t])&&(r=i,0<=C.a.A(e,r)?r=!1:(h=r.match(n),r=null!==h&&(h[1]?"Object("+h[1]+")"+h[2]:r)),h=r),h&&u.push("'"+("string"==typeof a[t]?a[t]:t)+"':function(_z){"+r+"=_z}")}l&&(i="function(){return "+i+" }"),s.push("'"+t+"':"+i)}var s=[],u=[],l=(r=r||{}).valueAccessors,c=r.bindingParams,h="string"==typeof i?t(i):i;return C.a.D(h,(function(t){o(t.key||t.unknown,t.value)})),u.length&&o("_ko_property_writers","{"+u.join(",")+" }"),s.join(",")},Id:function(t,e){for(var n=0;n<t.length;n++)if(t[n].key==e)return!0;return!1},eb:function(t,e,n,i,r){t&&C.O(t)?!C.Za(t)||r&&t.v()===i||t(i):(t=e.get("_ko_property_writers"))&&t[n]&&t[n](i)}}}(),C.b("expressionRewriting",C.m),C.b("expressionRewriting.bindingRewriteValidators",C.m.Ra),C.b("expressionRewriting.parseObjectLiteral",C.m.ac),C.b("expressionRewriting.preProcessBindings",C.m.vb),C.b("expressionRewriting._twoWayBindings",C.m.wa),C.b("jsonExpressionRewriting",C.m),C.b("jsonExpressionRewriting.insertPropertyAccessorsIntoJson",C.m.vb),function(){function t(t){return 8==t.nodeType&&a.test(o?t.text:t.nodeValue)}function e(t){return 8==t.nodeType&&s.test(o?t.text:t.nodeValue)}function n(n,i){for(var r=n,o=1,a=[];r=r.nextSibling;){if(e(r)&&(C.a.g.set(r,l,!0),0==--o))return a;a.push(r),t(r)&&o++}if(!i)throw Error("Cannot find closing comment tag to match: "+n.nodeValue);return null}function i(t,e){var i=n(t,e);return i?0<i.length?i[i.length-1].nextSibling:t.nextSibling:null}var o=r&&"\x3c!--test--\x3e"===r.createComment("test").text,a=o?/^\x3c!--\s*ko(?:\s+([\s\S]+))?\s*--\x3e$/:/^\s*ko(?:\s+([\s\S]+))?\s*$/,s=o?/^\x3c!--\s*\/ko\s*--\x3e$/:/^\s*\/ko\s*$/,u={ul:!0,ol:!0},l="__ko_matchedEndComment__";C.h={ea:{},childNodes:function(e){return t(e)?n(e):e.childNodes},Ea:function(e){if(t(e))for(var n=0,i=(e=C.h.childNodes(e)).length;n<i;n++)C.removeNode(e[n]);else C.a.Tb(e)},va:function(e,n){if(t(e)){C.h.Ea(e);for(var i=e.nextSibling,r=0,o=n.length;r<o;r++)i.parentNode.insertBefore(n[r],i)}else C.a.va(e,n)},Vc:function(e,n){var i;t(e)?(i=e.nextSibling,e=e.parentNode):i=e.firstChild,i?n!==i&&e.insertBefore(n,i):e.appendChild(n)},Wb:function(e,n,i){i?(i=i.nextSibling,t(e)&&(e=e.parentNode),i?n!==i&&e.insertBefore(n,i):e.appendChild(n)):C.h.Vc(e,n)},firstChild:function(n){if(t(n))return!n.nextSibling||e(n.nextSibling)?null:n.nextSibling;if(n.firstChild&&e(n.firstChild))throw Error("Found invalid end comment, as the first child of "+n);return n.firstChild},nextSibling:function(n){if(t(n)&&(n=i(n)),n.nextSibling&&e(n.nextSibling)){var r=n.nextSibling;if(e(r)&&!C.a.g.get(r,l))throw Error("Found end comment without a matching opening comment, as child of "+n);return null}return n.nextSibling},Cd:t,Vd:function(t){return(t=(o?t.text:t.nodeValue).match(a))?t[1]:null},Sc:function(n){if(u[C.a.R(n)]){var r=n.firstChild;if(r)do{if(1===r.nodeType){var o,a=null;if(o=r.firstChild)do{if(a)a.push(o);else if(t(o)){var s=i(o,!0);s?o=s:a=[o]}else e(o)&&(a=[o])}while(o=o.nextSibling);if(o=a)for(a=r.nextSibling,s=0;s<o.length;s++)a?n.insertBefore(o[s],a):n.appendChild(o[s])}}while(r=r.nextSibling)}}}}(),C.b("virtualElements",C.h),C.b("virtualElements.allowedBindings",C.h.ea),C.b("virtualElements.emptyNode",C.h.Ea),C.b("virtualElements.insertAfter",C.h.Wb),C.b("virtualElements.prepend",C.h.Vc),C.b("virtualElements.setDomNodeChildren",C.h.va),C.ga=function(){this.nd={}},C.a.extend(C.ga.prototype,{nodeHasBindings:function(t){switch(t.nodeType){case 1:return null!=t.getAttribute("data-bind")||C.j.getComponentNameForNode(t);case 8:return C.h.Cd(t);default:return!1}},getBindings:function(t,e){var n=(n=this.getBindingsString(t,e))?this.parseBindingsString(n,e,t):null;return C.j.tc(n,t,e,!1)},getBindingAccessors:function(t,e){var n=(n=this.getBindingsString(t,e))?this.parseBindingsString(n,e,t,{valueAccessors:!0}):null;return C.j.tc(n,t,e,!0)},getBindingsString:function(t){switch(t.nodeType){case 1:return t.getAttribute("data-bind");case 8:return C.h.Vd(t);default:return null}},parseBindingsString:function(t,e,n,i){try{var r,o=this.nd,a=t+(i&&i.valueAccessors||"");if(!(r=o[a])){var s,u="with($context){with($data||{}){return{"+C.m.vb(t,i)+"}}}";s=new Function("$context","$element",u),r=o[a]=s}return r(e,n)}catch(e){throw e.message="Unable to parse bindings.\nBindings value: "+t+"\nMessage: "+e.message,e}}}),C.ga.instance=new C.ga,C.b("bindingProvider",C.ga),function(){function t(t){var e=(t=C.a.g.get(t,y))&&t.N;e&&(t.N=null,e.Tc())}function e(e,n,i){this.node=e,this.yc=n,this.kb=[],this.H=!1,n.N||C.a.K.za(e,t),i&&i.N&&(i.N.kb.push(e),this.Kb=i)}function o(t){return function(){return t}}function s(t){return t()}function u(t){return C.a.Ga(C.u.G(t),(function(e,n){return function(){return t()[n]}}))}function l(t,e,n){return"function"==typeof t?u(t.bind(null,e,n)):C.a.Ga(t,o)}function c(t,e){return u(this.getBindings.bind(this,t,e))}function h(t,e){var n=C.h.firstChild(e);if(n){var i,r=C.ga.instance,o=r.preprocessNode;if(o){for(;i=n;)n=C.h.nextSibling(i),o.call(r,i);n=C.h.firstChild(e)}for(;i=n;)n=C.h.nextSibling(i),f(t,i)}C.i.ma(e,C.i.H)}function f(t,e){var n=t,i=1===e.nodeType;i&&C.h.Sc(e),(i||C.ga.instance.nodeHasBindings(e))&&(n=d(e,null,t).bindingContextForDescendants),n&&!E[C.a.R(e)]&&h(n,e)}function d(t,e,i){var r,o=C.a.g.Ub(t,y,{}),a=o.hd;if(!e){if(a)throw Error("You cannot apply bindings multiple times to the same element.");o.hd=!0}if(a||(o.context=i),o.Zb||(o.Zb={}),e&&"function"!=typeof e)r=e;else{var u=C.ga.instance,l=u.getBindingAccessors||c,h=C.$((function(){return(r=e?e(i,t):l.call(u,t,i))&&(i[g]&&i[g](),i[v]&&i[v]()),r}),null,{l:t});r&&h.ja()||(h=null)}var f,d=i;if(r){var p=function(){return C.a.Ga(h?h():r,s)},m=h?function(t){return function(){return s(h()[t])}}:function(t){return r[t]};p.get=function(t){return r[t]&&s(m(t))},p.has=function(t){return t in r},C.i.H in r&&C.i.subscribe(t,C.i.H,(function(){var e=(0,r[C.i.H])();if(e){var n=C.h.childNodes(t);n.length&&e(n,C.Ec(n[0]))}})),C.i.pa in r&&(d=C.i.Cb(t,i),C.i.subscribe(t,C.i.pa,(function(){var e=(0,r[C.i.pa])();e&&C.h.firstChild(t)&&e(t)}))),o=function(t){var e=[],n={},i=[];return C.a.P(t,(function r(o){if(!n[o]){var a=C.getBindingHandler(o);a&&(a.after&&(i.push(o),C.a.D(a.after,(function(e){if(t[e]){if(-1!==C.a.A(i,e))throw Error("Cannot combine the following bindings, because they have a cyclic dependency: "+i.join(", "));r(e)}})),i.length--),e.push({key:o,Mc:a})),n[o]=!0}})),e}(r),C.a.D(o,(function(e){var i=e.Mc.init,o=e.Mc.update,a=e.key;if(8===t.nodeType&&!C.h.ea[a])throw Error("The binding '"+a+"' cannot be used with virtual elements");try{"function"==typeof i&&C.u.G((function(){var e=i(t,m(a),p,d.$data,d);if(e&&e.controlsDescendantBindings){if(f!==n)throw Error("Multiple bindings ("+f+" and "+a+") are trying to control descendant bindings of the same element. You cannot use these bindings together on the same element.");f=a}})),"function"==typeof o&&C.$((function(){o(t,m(a),p,d.$data,d)}),null,{l:t})}catch(t){throw t.message='Unable to process binding "'+a+": "+r[a]+'"\nMessage: '+t.message,t}}))}return{shouldBindDescendants:o=f===n,bindingContextForDescendants:o&&d}}function p(t,e){return t&&t instanceof C.fa?t:new C.fa(t,n,n,e)}var g=C.a.Da("_subscribable"),m=C.a.Da("_ancestorBindingInfo"),v=C.a.Da("_dataDependency");C.c={};var E={script:!0,textarea:!0,template:!0};C.getBindingHandler=function(t){return C.c[t]};var b={};C.fa=function(t,e,i,r,o){function a(){var t=h?c():c,n=C.a.f(t);return e?(C.a.extend(u,e),m in e&&(u[m]=e[m])):(u.$parents=[],u.$root=n,u.ko=C),u[g]=s,l?n=u.$data:(u.$rawData=t,u.$data=n),i&&(u[i]=n),r&&r(u,e,n),e&&e[g]&&!C.S.o().Vb(e[g])&&e[g](),f&&(u[v]=f),u.$data}var s,u=this,l=t===b,c=l?n:t,h="function"==typeof c&&!C.O(c),f=o&&o.dataDependency;o&&o.exportDependencies?a():((s=C.xb(a)).v(),s.ja()?s.equalityComparer=null:u[g]=n)},C.fa.prototype.createChildContext=function(t,e,n,i){if(!i&&e&&"object"==typeof e&&(e=(i=e).as,n=i.extend),e&&i&&i.noChildContext){var r="function"==typeof t&&!C.O(t);return new C.fa(b,this,null,(function(i){n&&n(i),i[e]=r?t():t}),i)}return new C.fa(t,this,e,(function(t,e){t.$parentContext=e,t.$parent=e.$data,t.$parents=(e.$parents||[]).slice(0),t.$parents.unshift(t.$parent),n&&n(t)}),i)},C.fa.prototype.extend=function(t,e){return new C.fa(b,this,null,(function(e){C.a.extend(e,"function"==typeof t?t(e):t)}),e)};var y=C.a.g.Z();e.prototype.Tc=function(){this.Kb&&this.Kb.N&&this.Kb.N.sd(this.node)},e.prototype.sd=function(t){C.a.Pa(this.kb,t),!this.kb.length&&this.H&&this.Cc()},e.prototype.Cc=function(){this.H=!0,this.yc.N&&!this.kb.length&&(this.yc.N=null,C.a.K.yb(this.node,t),C.i.ma(this.node,C.i.pa),this.Tc())},C.i={H:"childrenComplete",pa:"descendantsComplete",subscribe:function(t,e,n,i,r){var o=C.a.g.Ub(t,y,{});return o.Fa||(o.Fa=new C.T),r&&r.notifyImmediately&&o.Zb[e]&&C.u.G(n,i,[t]),o.Fa.subscribe(n,i,e)},ma:function(t,e){var i=C.a.g.get(t,y);if(i&&(i.Zb[e]=!0,i.Fa&&i.Fa.notifySubscribers(t,e),e==C.i.H))if(i.N)i.N.Cc();else if(i.N===n&&i.Fa&&i.Fa.Wa(C.i.pa))throw Error("descendantsComplete event not supported for bindings on this node")},Cb:function(t,n){var i=C.a.g.Ub(t,y,{});return i.N||(i.N=new e(t,i,n[m])),n[m]==i?n:n.extend((function(t){t[m]=i}))}},C.Td=function(t){return(t=C.a.g.get(t,y))&&t.context},C.ib=function(t,e,n){return 1===t.nodeType&&C.h.Sc(t),d(t,e,p(n))},C.ld=function(t,e,n){return n=p(n),C.ib(t,l(e,n,t),n)},C.Oa=function(t,e){1!==e.nodeType&&8!==e.nodeType||h(p(t),e)},C.vc=function(t,e,n){if(!a&&i.jQuery&&(a=i.jQuery),2>arguments.length){if(!(e=r.body))throw Error("ko.applyBindings: could not find document.body; has the document been loaded?")}else if(!e||1!==e.nodeType&&8!==e.nodeType)throw Error("ko.applyBindings: first parameter should be your view model; second parameter should be a DOM node");f(p(t,n),e)},C.Dc=function(t){return!t||1!==t.nodeType&&8!==t.nodeType?n:C.Td(t)},C.Ec=function(t){return(t=C.Dc(t))?t.$data:n},C.b("bindingHandlers",C.c),C.b("bindingEvent",C.i),C.b("bindingEvent.subscribe",C.i.subscribe),C.b("bindingEvent.startPossiblyAsyncContentBinding",C.i.Cb),C.b("applyBindings",C.vc),C.b("applyBindingsToDescendants",C.Oa),C.b("applyBindingAccessorsToNode",C.ib),C.b("applyBindingsToNode",C.ld),C.b("contextFor",C.Dc),C.b("dataFor",C.Ec)}(),function(t){function e(e,i){var a,s=Object.prototype.hasOwnProperty.call(r,e)?r[e]:t;s?s.subscribe(i):((s=r[e]=new C.T).subscribe(i),n(e,(function(t,n){var i=!(!n||!n.synchronous);o[e]={definition:t,Gd:i},delete r[e],a||i?s.notifySubscribers(t):C.na.zb((function(){s.notifySubscribers(t)}))})),a=!0)}function n(t,e){i("getConfig",[t],(function(n){n?i("loadComponent",[t,n],(function(t){e(t,n)})):e(null,null)}))}function i(e,n,r,o){o||(o=C.j.loaders.slice(0));var a=o.shift();if(a){var s=a[e];if(s){var u=!1;if(s.apply(a,n.concat((function(t){u?r(null):null!==t?r(t):i(e,n,r,o)})))!==t&&(u=!0,!a.suppressLoaderExceptions))throw Error("Component loaders must supply values by invoking the callback, not by returning values synchronously.")}else i(e,n,r,o)}else r(null)}var r={},o={};C.j={get:function(n,i){var r=Object.prototype.hasOwnProperty.call(o,n)?o[n]:t;r?r.Gd?C.u.G((function(){i(r.definition)})):C.na.zb((function(){i(r.definition)})):e(n,i)},Bc:function(t){delete o[t]},oc:i},C.j.loaders=[],C.b("components",C.j),C.b("components.get",C.j.get),C.b("components.clearCachedDefinition",C.j.Bc)}(),function(){function t(t,e,n,i){function r(){0==--a&&i(o)}var o={},a=2,u=n.template;n=n.viewModel,u?s(e,u,(function(e){C.j.oc("loadTemplate",[t,e],(function(t){o.template=t,r()}))})):r(),n?s(e,n,(function(e){C.j.oc("loadViewModel",[t,e],(function(t){o[c]=t,r()}))})):r()}function n(t,e,i){if("function"==typeof e)i((function(t){return new e(t)}));else if("function"==typeof e[c])i(e[c]);else if("instance"in e){var r=e.instance;i((function(){return r}))}else"viewModel"in e?n(t,e.viewModel,i):t("Unknown viewModel value: "+e)}function o(t){switch(C.a.R(t)){case"script":return C.a.ua(t.text);case"textarea":return C.a.ua(t.value);case"template":if(a(t.content))return C.a.Ca(t.content.childNodes)}return C.a.Ca(t.childNodes)}function a(t){return i.DocumentFragment?t instanceof DocumentFragment:t&&11===t.nodeType}function s(t,n,r){"string"==typeof n.require?e||i.require?(e||i.require)([n.require],(function(t){t&&"object"==typeof t&&t.Xd&&t.default&&(t=t.default),r(t)})):t("Uses require, but no AMD loader is present"):r(n)}function u(t){return function(e){throw Error("Component '"+t+"': "+e)}}var l={};C.j.register=function(t,e){if(!e)throw Error("Invalid configuration for "+t);if(C.j.tb(t))throw Error("Component "+t+" is already registered");l[t]=e},C.j.tb=function(t){return Object.prototype.hasOwnProperty.call(l,t)},C.j.unregister=function(t){delete l[t],C.j.Bc(t)},C.j.Fc={getConfig:function(t,e){e(C.j.tb(t)?l[t]:null)},loadComponent:function(e,n,i){var r=u(e);s(r,n,(function(n){t(e,r,n,i)}))},loadTemplate:function(t,e,n){if(t=u(t),"string"==typeof e)n(C.a.ua(e));else if(e instanceof Array)n(e);else if(a(e))n(C.a.la(e.childNodes));else if(e.element)if(e=e.element,i.HTMLElement?e instanceof HTMLElement:e&&e.tagName&&1===e.nodeType)n(o(e));else if("string"==typeof e){var s=r.getElementById(e);s?n(o(s)):t("Cannot find element with ID "+e)}else t("Unknown element type: "+e);else t("Unknown template value: "+e)},loadViewModel:function(t,e,i){n(u(t),e,i)}};var c="createViewModel";C.b("components.register",C.j.register),C.b("components.isRegistered",C.j.tb),C.b("components.unregister",C.j.unregister),C.b("components.defaultLoader",C.j.Fc),C.j.loaders.push(C.j.Fc),C.j.dd=l}(),function(){function t(t,n){if(i=t.getAttribute("params")){var i=e.parseBindingsString(i,n,t,{valueAccessors:!0,bindingParams:!0}),r=(i=C.a.Ga(i,(function(e){return C.o(e,null,{l:t})})),C.a.Ga(i,(function(e){var n=e.v();return e.ja()?C.o({read:function(){return C.a.f(e())},write:C.Za(n)&&function(t){e()(t)},l:t}):n})));return Object.prototype.hasOwnProperty.call(r,"$raw")||(r.$raw=i),r}return{$raw:{}}}C.j.getComponentNameForNode=function(t){var e=C.a.R(t);if(C.j.tb(e)&&(-1!=e.indexOf("-")||"[object HTMLUnknownElement]"==""+t||8>=C.a.W&&t.tagName===e))return e},C.j.tc=function(e,n,i,r){if(1===n.nodeType){var o=C.j.getComponentNameForNode(n);if(o){if((e=e||{}).component)throw Error('Cannot use the "component" binding on a custom element matching a component');var a={name:o,params:t(n,i)};e.component=r?function(){return a}:a}}return e};var e=new C.ga;9>C.a.W&&(C.j.register=function(t){return function(e){return t.apply(this,arguments)}}(C.j.register),r.createDocumentFragment=function(t){return function(){var e=t();return C.j.dd,e}}(r.createDocumentFragment))}(),function(){var t=0;C.c.component={init:function(e,n,i,r,o){function a(){var t=s&&s.dispose;"function"==typeof t&&t.call(s),l&&l.s(),u=s=l=null}var s,u,l,c=C.a.la(C.h.childNodes(e));return C.h.Ea(e),C.a.K.za(e,a),C.o((function(){var i,r,h=C.a.f(n());if("string"==typeof h?i=h:(i=C.a.f(h.name),r=C.a.f(h.params)),!i)throw Error("No component name specified");var f=C.i.Cb(e,o),d=u=++t;C.j.get(i,(function(t){if(u===d){if(a(),!t)throw Error("Unknown component '"+i+"'");!function(t,e,n){if(!(e=e.template))throw Error("Component '"+t+"' has no template");t=C.a.Ca(e),C.h.va(n,t)}(i,t,e);var n=function(t,e,n){var i=t.createViewModel;return i?i.call(t,e,n):e}(t,r,{element:e,templateNodes:c});t=f.createChildContext(n,{extend:function(t){t.$component=n,t.$componentTemplateNodes=c}}),n&&n.koDescendantsComplete&&(l=C.i.subscribe(e,C.i.pa,n.koDescendantsComplete,n)),s=n,C.Oa(t,e)}}))}),null,{l:e}),{controlsDescendantBindings:!0}}},C.h.ea.component=!0}();var P={class:"className",for:"htmlFor"};C.c.attr={update:function(t,e){var i=C.a.f(e())||{};C.a.P(i,(function(e,i){i=C.a.f(i);var r=e.indexOf(":"),o=(r="lookupNamespaceURI"in t&&0<r&&t.lookupNamespaceURI(e.substr(0,r)),!1===i||null===i||i===n);o?r?t.removeAttributeNS(r,e):t.removeAttribute(e):i=i.toString(),8>=C.a.W&&e in P?(e=P[e],o?t.removeAttribute(e):t[e]=i):o||(r?t.setAttributeNS(r,e,i):t.setAttribute(e,i)),"name"===e&&C.a.Yc(t,o?"":i)}))}},C.c.checked={after:["value","attr"],init:function(t,e,i){function r(){var r=t.checked,u=o();if(!C.S.Ya()&&(r||!s&&!C.S.qa())){var h=C.u.G(e);if(l){var d=c?h.v():h,p=f;f=u,p!==u?r&&(C.a.Na(d,u,!0),C.a.Na(d,p,!1)):C.a.Na(d,u,r),c&&C.Za(h)&&h(d)}else a&&(u===n?u=r:r||(u=n)),C.m.eb(h,i,"checked",u,!0)}}var o=C.xb((function(){return i.has("checkedValue")?C.a.f(i.get("checkedValue")):h?i.has("value")?C.a.f(i.get("value")):t.value:void 0})),a="checkbox"==t.type,s="radio"==t.type;if(a||s){var u=e(),l=a&&C.a.f(u)instanceof Array,c=!(l&&u.push&&u.splice),h=s||l,f=l?o():n;s&&!t.name&&C.c.uniqueName.init(t,(function(){return!0})),C.o(r,null,{l:t}),C.a.B(t,"click",r),C.o((function(){var i=C.a.f(e()),r=o();l?(t.checked=0<=C.a.A(i,r),f=r):t.checked=a&&r===n?!!i:o()===i}),null,{l:t}),u=n}}},C.m.wa.checked=!0,C.c.checkedValue={update:function(t,e){t.value=C.a.f(e())}},C.c.class={update:function(t,e){var n=C.a.Db(C.a.f(e()));C.a.Eb(t,t.__ko__cssValue,!1),t.__ko__cssValue=n,C.a.Eb(t,n,!0)}},C.c.css={update:function(t,e){var n=C.a.f(e());null!==n&&"object"==typeof n?C.a.P(n,(function(e,n){n=C.a.f(n),C.a.Eb(t,e,n)})):C.c.class.update(t,e)}},C.c.enable={update:function(t,e){var n=C.a.f(e());n&&t.disabled?t.removeAttribute("disabled"):n||t.disabled||(t.disabled=!0)}},C.c.disable={update:function(t,e){C.c.enable.update(t,(function(){return!C.a.f(e())}))}},C.c.event={init:function(t,e,n,i,r){var o=e()||{};C.a.P(o,(function(o){"string"==typeof o&&C.a.B(t,o,(function(t){var a,s=e()[o];if(s){try{var u=C.a.la(arguments);i=r.$data,u.unshift(i),a=s.apply(i,u)}finally{!0!==a&&(t.preventDefault?t.preventDefault():t.returnValue=!1)}!1===n.get(o+"Bubble")&&(t.cancelBubble=!0,t.stopPropagation&&t.stopPropagation())}}))}))}},C.c.foreach={Rc:function(t){return function(){var e=t(),n=C.a.bc(e);return n&&"number"!=typeof n.length?(C.a.f(e),{foreach:n.data,as:n.as,noChildContext:n.noChildContext,includeDestroyed:n.includeDestroyed,afterAdd:n.afterAdd,beforeRemove:n.beforeRemove,afterRender:n.afterRender,beforeMove:n.beforeMove,afterMove:n.afterMove,templateEngine:C.ba.Ma}):{foreach:e,templateEngine:C.ba.Ma}}},init:function(t,e){return C.c.template.init(t,C.c.foreach.Rc(e))},update:function(t,e,n,i,r){return C.c.template.update(t,C.c.foreach.Rc(e),n,i,r)}},C.m.Ra.foreach=!1,C.h.ea.foreach=!0,C.c.hasfocus={init:function(t,e,n){function i(i){t.__ko_hasfocusUpdating=!0;var r=t.ownerDocument;if("activeElement"in r){var o;try{o=r.activeElement}catch(t){o=r.body}i=o===t}r=e(),C.m.eb(r,n,"hasfocus",i,!0),t.__ko_hasfocusLastValue=i,t.__ko_hasfocusUpdating=!1}var r=i.bind(null,!0),o=i.bind(null,!1);C.a.B(t,"focus",r),C.a.B(t,"focusin",r),C.a.B(t,"blur",o),C.a.B(t,"focusout",o),t.__ko_hasfocusLastValue=!1},update:function(t,e){var n=!!C.a.f(e());t.__ko_hasfocusUpdating||t.__ko_hasfocusLastValue===n||(n?t.focus():t.blur(),!n&&t.__ko_hasfocusLastValue&&t.ownerDocument.body.focus(),C.u.G(C.a.Fb,null,[t,n?"focusin":"focusout"]))}},C.m.wa.hasfocus=!0,C.c.hasFocus=C.c.hasfocus,C.m.wa.hasFocus="hasfocus",C.c.html={init:function(){return{controlsDescendantBindings:!0}},update:function(t,e){C.a.fc(t,e())}},function(){function t(t,e,n){C.c[t]={init:function(t,i,r,o,a){var s,u,l,c,h,f={};if(e){o=r.get("as");var d=r.get("noChildContext");f={as:o,noChildContext:d,exportDependencies:h=!(o&&d)}}return c=(l="render"==r.get("completeOn"))||r.has(C.i.pa),C.o((function(){var r,o=C.a.f(i()),d=!n!=!o,p=!u;(h||d!==s)&&(c&&(a=C.i.Cb(t,a)),d&&(e&&!h||(f.dataDependency=C.S.o()),r=e?a.createChildContext("function"==typeof o?o:i,f):C.S.qa()?a.extend(null,f):a),p&&C.S.qa()&&(u=C.a.Ca(C.h.childNodes(t),!0)),d?(p||C.h.va(t,C.a.Ca(u)),C.Oa(r,t)):(C.h.Ea(t),l||C.i.ma(t,C.i.H)),s=d)}),null,{l:t}),{controlsDescendantBindings:!0}}},C.m.Ra[t]=!1,C.h.ea[t]=!0}t("if"),t("ifnot",!1,!0),t("with",!0)}(),C.c.let={init:function(t,e,n,i,r){return e=r.extend(e),C.Oa(e,t),{controlsDescendantBindings:!0}}},C.h.ea.let=!0;var O={};C.c.options={init:function(t){if("select"!==C.a.R(t))throw Error("options binding applies only to SELECT elements");for(;0<t.length;)t.remove(0);return{controlsDescendantBindings:!0}},update:function(t,e,i){function r(){return C.a.jb(t.options,(function(t){return t.selected}))}function o(t,e,n){var i=typeof e;return"function"==i?e(t):"string"==i?t[e]:n}function a(e,n){if(p&&c)C.i.ma(t,C.i.H);else if(d.length){var i=0<=C.a.A(d,C.w.M(n[0]));C.a.Zc(n[0],i),p&&!i&&C.u.G(C.a.Fb,null,[t,"change"])}}var s=t.multiple,u=0!=t.length&&s?t.scrollTop:null,l=C.a.f(e()),c=i.get("valueAllowUnset")&&i.has("value"),h=i.get("optionsIncludeDestroyed");e={};var f,d=[];c||(s?d=C.a.Mb(r(),C.w.M):0<=t.selectedIndex&&d.push(C.w.M(t.options[t.selectedIndex]))),l&&(void 0===l.length&&(l=[l]),f=C.a.jb(l,(function(t){return h||t===n||null===t||!C.a.f(t._destroy)})),i.has("optionsCaption")&&null!==(l=C.a.f(i.get("optionsCaption")))&&l!==n&&f.unshift(O));var p=!1;e.beforeRemove=function(e){t.removeChild(e)},l=a,i.has("optionsAfterRender")&&"function"==typeof i.get("optionsAfterRender")&&(l=function(t,e){a(0,e),C.u.G(i.get("optionsAfterRender"),null,[e[0],t!==O?t:n])}),C.a.ec(t,f,(function(e,r,a){return a.length&&(d=!c&&a[0].selected?[C.w.M(a[0])]:[],p=!0),r=t.ownerDocument.createElement("option"),e===O?(C.a.Bb(r,i.get("optionsCaption")),C.w.cb(r,n)):(a=o(e,i.get("optionsValue"),e),C.w.cb(r,C.a.f(a)),e=o(e,i.get("optionsText"),a),C.a.Bb(r,e)),[r]}),e,l),c||(s?d.length&&r().length<d.length:d.length&&0<=t.selectedIndex?C.w.M(t.options[t.selectedIndex])!==d[0]:d.length||0<=t.selectedIndex)&&C.u.G(C.a.Fb,null,[t,"change"]),(c||C.S.Ya())&&C.i.ma(t,C.i.H),C.a.wd(t),u&&20<Math.abs(u-t.scrollTop)&&(t.scrollTop=u)}},C.c.options.$b=C.a.g.Z(),C.c.selectedOptions={init:function(t,e,n){function i(){var i=e(),r=[];C.a.D(t.getElementsByTagName("option"),(function(t){t.selected&&r.push(C.w.M(t))})),C.m.eb(i,n,"selectedOptions",r)}function r(){var n=C.a.f(e()),i=t.scrollTop;n&&"number"==typeof n.length&&C.a.D(t.getElementsByTagName("option"),(function(t){var e=0<=C.a.A(n,C.w.M(t));t.selected!=e&&C.a.Zc(t,e)})),t.scrollTop=i}if("select"!=C.a.R(t))throw Error("selectedOptions binding applies only to SELECT elements");var o;C.i.subscribe(t,C.i.H,(function(){o?i():(C.a.B(t,"change",i),o=C.o(r,null,{l:t}))}),null,{notifyImmediately:!0})},update:function(){}},C.m.wa.selectedOptions=!0,C.c.style={update:function(t,e){var i=C.a.f(e()||{});C.a.P(i,(function(e,i){if(null!==(i=C.a.f(i))&&i!==n&&!1!==i||(i=""),a)a(t).css(e,i);else if(/^--/.test(e))t.style.setProperty(e,i);else{e=e.replace(/-(\w)/g,(function(t,e){return e.toUpperCase()}));var r=t.style[e];t.style[e]=i,i===r||t.style[e]!=r||isNaN(i)||(t.style[e]=i+"px")}}))}},C.c.submit={init:function(t,e,n,i,r){if("function"!=typeof e())throw Error("The value for a submit binding must be a function");C.a.B(t,"submit",(function(n){var i,o=e();try{i=o.call(r.$data,t)}finally{!0!==i&&(n.preventDefault?n.preventDefault():n.returnValue=!1)}}))}},C.c.text={init:function(){return{controlsDescendantBindings:!0}},update:function(t,e){C.a.Bb(t,e())}},C.h.ea.text=!0,function(){if(i&&i.navigator){var t,e,r,o,a,s=function(t){if(t)return parseFloat(t[1])},u=i.navigator.userAgent;(t=i.opera&&i.opera.version&&parseInt(i.opera.version()))||(a=s(u.match(/Edge\/([^ ]+)$/)))||s(u.match(/Chrome\/([^ ]+)/))||(e=s(u.match(/Version\/([^ ]+) Safari/)))||(r=s(u.match(/Firefox\/([^ ]+)/)))||(o=C.a.W||s(u.match(/MSIE ([^ ]+)/)))||(o=s(u.match(/rv:([^ )]+)/)))}if(8<=o&&10>o)var l=C.a.g.Z(),c=C.a.g.Z(),h=function(t){var e=this.activeElement;(e=e&&C.a.g.get(e,c))&&e(t)},f=function(t,e){var n=t.ownerDocument;C.a.g.get(n,l)||(C.a.g.set(n,l,!0),C.a.B(n,"selectionchange",h)),C.a.g.set(t,c,e)};C.c.textInput={init:function(i,s,u){function l(t,e){C.a.B(i,t,e)}function c(){d||(p=i.value,d=C.a.setTimeout(h,4))}function h(){clearTimeout(d),p=d=n;var t=i.value;g!==t&&(g=t,C.m.eb(s(),u,"textInput",t))}var d,p,g=i.value,m=9==C.a.W?c:h,v=!1;o&&l("keypress",h),11>o&&l("propertychange",(function(t){v||"value"!==t.propertyName||m()})),8==o&&(l("keyup",h),l("keydown",h)),f&&(f(i,m),l("dragend",c)),(!o||9<=o)&&l("input",m),5>e&&"textarea"===C.a.R(i)?(l("keydown",c),l("paste",c),l("cut",c)):11>t?l("keydown",c):4>r?(l("DOMAutoComplete",h),l("dragdrop",h),l("drop",h)):a&&"number"===i.type&&l("keydown",c),l("change",h),l("blur",h),C.o((function t(){var e=C.a.f(s());null!==e&&e!==n||(e=""),p!==n&&e===p?C.a.setTimeout(t,4):i.value!==e&&(v=!0,i.value=e,v=!1,g=i.value)}),null,{l:i})}},C.m.wa.textInput=!0,C.c.textinput={preprocess:function(t,e,n){n("textInput",t)}}}(),C.c.uniqueName={init:function(t,e){if(e()){var n="ko_unique_"+ ++C.c.uniqueName.rd;C.a.Yc(t,n)}}},C.c.uniqueName.rd=0,C.c.using={init:function(t,e,n,i,r){var o;return n.has("as")&&(o={as:n.get("as"),noChildContext:n.get("noChildContext")}),e=r.createChildContext(e,o),C.Oa(e,t),{controlsDescendantBindings:!0}}},C.h.ea.using=!0,C.c.value={init:function(t,e,i){var r=C.a.R(t),o="input"==r;if(!o||"checkbox"!=t.type&&"radio"!=t.type){var a=[],s=i.get("valueUpdate"),u=!1,l=null;s&&(a="string"==typeof s?[s]:C.a.wc(s),C.a.Pa(a,"change"));var c,h,f=function(){l=null,u=!1;var n=e(),r=C.w.M(t);C.m.eb(n,i,"value",r)};!C.a.W||!o||"text"!=t.type||"off"==t.autocomplete||t.form&&"off"==t.form.autocomplete||-1!=C.a.A(a,"propertychange")||(C.a.B(t,"propertychange",(function(){u=!0})),C.a.B(t,"focus",(function(){u=!1})),C.a.B(t,"blur",(function(){u&&f()}))),C.a.D(a,(function(e){var n=f;C.a.Ud(e,"after")&&(n=function(){l=C.w.M(t),C.a.setTimeout(f,0)},e=e.substring(5)),C.a.B(t,e,n)})),c=o&&"file"==t.type?function(){var i=C.a.f(e());null===i||i===n||""===i?t.value="":C.u.G(f)}:function(){var o=C.a.f(e()),a=C.w.M(t);null!==l&&o===l?C.a.setTimeout(c,0):o===a&&a!==n||("select"===r?(a=i.get("valueAllowUnset"),C.w.cb(t,o,a),a||o===C.w.M(t)||C.u.G(f)):C.w.cb(t,o))},"select"===r?C.i.subscribe(t,C.i.H,(function(){h?i.get("valueAllowUnset")?c():f():(C.a.B(t,"change",f),h=C.o(c,null,{l:t}))}),null,{notifyImmediately:!0}):(C.a.B(t,"change",f),C.o(c,null,{l:t}))}else C.ib(t,{checkedValue:e})},update:function(){}},C.m.wa.value=!0,C.c.visible={update:function(t,e){var n=C.a.f(e()),i="none"!=t.style.display;n&&!i?t.style.display="":!n&&i&&(t.style.display="none")}},C.c.hidden={update:function(t,e){C.c.visible.update(t,(function(){return!C.a.f(e())}))}},function(t){C.c[t]={init:function(e,n,i,r,o){return C.c.event.init.call(this,e,(function(){var e={};return e[t]=n(),e}),i,r,o)}}}("click"),C.ca=function(){},C.ca.prototype.renderTemplateSource=function(){throw Error("Override renderTemplateSource")},C.ca.prototype.createJavaScriptEvaluatorBlock=function(){throw Error("Override createJavaScriptEvaluatorBlock")},C.ca.prototype.makeTemplateSource=function(t,e){if("string"==typeof t){var n=(e=e||r).getElementById(t);if(!n)throw Error("Cannot find template with ID "+t);return new C.C.F(n)}if(1==t.nodeType||8==t.nodeType)return new C.C.ia(t);throw Error("Unknown template type: "+t)},C.ca.prototype.renderTemplate=function(t,e,n,i){return t=this.makeTemplateSource(t,i),this.renderTemplateSource(t,e,n,i)},C.ca.prototype.isTemplateRewritten=function(t,e){return!1===this.allowTemplateRewriting||this.makeTemplateSource(t,e).data("isRewritten")},C.ca.prototype.rewriteTemplate=function(t,e,n){e=e((t=this.makeTemplateSource(t,n)).text()),t.text(e),t.data("isRewritten",!0)},C.b("templateEngine",C.ca),C.kc=function(){function t(t,e,n,i){t=C.m.ac(t);for(var r=C.m.Ra,o=0;o<t.length;o++){var a=t[o].key;if(Object.prototype.hasOwnProperty.call(r,a)){var s=r[a];if("function"==typeof s){if(a=s(t[o].value))throw Error(a)}else if(!s)throw Error("This template engine does not support the '"+a+"' binding within its templates")}}return n="ko.__tr_ambtns(function($context,$element){return(function(){return{ "+C.m.vb(t,{valueAccessors:!0})+" } })()},'"+n.toLowerCase()+"')",i.createJavaScriptEvaluatorBlock(n)+e}var e=/(<([a-z]+\d*)(?:\s+(?!data-bind\s*=\s*)[a-z0-9\-]+(?:=(?:\"[^\"]*\"|\'[^\']*\'|[^>]*))?)*\s+)data-bind\s*=\s*(["'])([\s\S]*?)\3/gi,n=/\x3c!--\s*ko\b\s*([\s\S]*?)\s*--\x3e/g;return{xd:function(t,e,n){e.isTemplateRewritten(t,n)||e.rewriteTemplate(t,(function(t){return C.kc.Ld(t,e)}),n)},Ld:function(i,r){return i.replace(e,(function(e,n,i,o,a){return t(a,n,i,r)})).replace(n,(function(e,n){return t(n,"\x3c!-- ko --\x3e","#comment",r)}))},md:function(t,e){return C.aa.Xb((function(n,i){var r=n.nextSibling;r&&r.nodeName.toLowerCase()===e&&C.ib(r,t,i)}))}}}(),C.b("__tr_ambtns",C.kc.md),function(){C.C={},C.C.F=function(t){if(this.F=t){var e=C.a.R(t);this.ab="script"===e?1:"textarea"===e?2:"template"==e&&t.content&&11===t.content.nodeType?3:4}},C.C.F.prototype.text=function(){var t=1===this.ab?"text":2===this.ab?"value":"innerHTML";if(0==arguments.length)return this.F[t];var e=arguments[0];"innerHTML"===t?C.a.fc(this.F,e):this.F[t]=e};var t=C.a.g.Z()+"_";C.C.F.prototype.data=function(e){if(1===arguments.length)return C.a.g.get(this.F,t+e);C.a.g.set(this.F,t+e,arguments[1])};var e=C.a.g.Z();C.C.F.prototype.nodes=function(){var t=this.F;if(0==arguments.length){var i=C.a.g.get(t,e)||{},r=i.lb||(3===this.ab?t.content:4===this.ab?t:n);if(!r||i.jd){var o=this.text();o&&o!==i.bb&&(r=C.a.Md(o,t.ownerDocument),C.a.g.set(t,e,{lb:r,bb:o,jd:!0}))}return r}i=arguments[0],this.ab!==n&&this.text(""),C.a.g.set(t,e,{lb:i})},C.C.ia=function(t){this.F=t},C.C.ia.prototype=new C.C.F,C.C.ia.prototype.constructor=C.C.ia,C.C.ia.prototype.text=function(){if(0==arguments.length){var t=C.a.g.get(this.F,e)||{};return t.bb===n&&t.lb&&(t.bb=t.lb.innerHTML),t.bb}C.a.g.set(this.F,e,{bb:arguments[0]})},C.b("templateSources",C.C),C.b("templateSources.domElement",C.C.F),C.b("templateSources.anonymousTemplate",C.C.ia)}(),function(){function t(t,e,n){var i;for(e=C.h.nextSibling(e);t&&(i=t)!==e;)n(i,t=C.h.nextSibling(i))}function e(e,n){if(e.length){var i=e[0],r=e[e.length-1],o=i.parentNode,a=C.ga.instance,s=a.preprocessNode;if(s){if(t(i,r,(function(t,e){var n=t.previousSibling,o=s.call(a,t);o&&(t===i&&(i=o[0]||e),t===r&&(r=o[o.length-1]||n))})),e.length=0,!i)return;i===r?e.push(i):(e.push(i,r),C.a.Ua(e,o))}t(i,r,(function(t){1!==t.nodeType&&8!==t.nodeType||C.vc(n,t)})),t(i,r,(function(t){1!==t.nodeType&&8!==t.nodeType||C.aa.cd(t,[n])})),C.a.Ua(e,o)}}function i(t){return t.nodeType?t:0<t.length?t[0]:null}function r(t,n,r,o,s){s=s||{};var u=(t&&i(t)||r||{}).ownerDocument,l=s.templateEngine||a;if(C.kc.xd(r,l,u),"number"!=typeof(r=l.renderTemplate(r,o,s,u)).length||0<r.length&&"number"!=typeof r[0].nodeType)throw Error("Template engine must return an array of DOM nodes");switch(u=!1,n){case"replaceChildren":C.h.va(t,r),u=!0;break;case"replaceNode":C.a.Xc(t,r),u=!0;break;case"ignoreTargetNode":break;default:throw Error("Unknown renderMode: "+n)}return u&&(e(r,o),s.afterRender&&C.u.G(s.afterRender,null,[r,o[s.as||"$data"]]),"replaceChildren"==n&&C.i.ma(t,C.i.H)),r}function o(t,e,n){return C.O(t)?t():"function"==typeof t?t(e,n):t}var a;C.gc=function(t){if(t!=n&&!(t instanceof C.ca))throw Error("templateEngine must inherit from ko.templateEngine");a=t},C.dc=function(t,e,s,u,l){if(((s=s||{}).templateEngine||a)==n)throw Error("Set a template engine before calling renderTemplate");if(l=l||"replaceChildren",u){var c=i(u);return C.$((function(){var n=e&&e instanceof C.fa?e:new C.fa(e,null,null,null,{exportDependencies:!0}),a=o(t,n.$data,n);n=r(u,l,a,n,s),"replaceNode"==l&&(c=i(u=n))}),null,{Sa:function(){return!c||!C.a.Sb(c)},l:c&&"replaceNode"==l?c.parentNode:c})}return C.aa.Xb((function(n){C.dc(t,e,s,n,"replaceNode")}))},C.Qd=function(t,i,a,s,u){function l(t,e){C.u.G(C.a.ec,null,[s,t,h,a,c,e]),C.i.ma(s,C.i.H)}function c(t,n){e(n,f),a.afterRender&&a.afterRender(n,t),f=null}function h(e,n){f=u.createChildContext(e,{as:d,noChildContext:a.noChildContext,extend:function(t){t.$index=n,d&&(t[d+"Index"]=n)}});var i=o(t,e,f);return r(s,"ignoreTargetNode",i,f,a)}var f,d=a.as,p=!1===a.includeDestroyed||C.options.foreachHidesDestroyed&&!a.includeDestroyed;if(p||a.beforeRemove||!C.Pc(i))return C.$((function(){var t=C.a.f(i)||[];void 0===t.length&&(t=[t]),p&&(t=C.a.jb(t,(function(t){return t===n||null===t||!C.a.f(t._destroy)}))),l(t)}),null,{l:s});l(i.v());var g=i.subscribe((function(t){l(i(),t)}),null,"arrayChange");return g.l(s),g};var s=C.a.g.Z(),u=C.a.g.Z();C.c.template={init:function(t,e){var n=C.a.f(e());if("string"==typeof n||"name"in n)C.h.Ea(t);else if("nodes"in n){if(n=n.nodes||[],C.O(n))throw Error('The "nodes" option must be a plain, non-observable array.');var i=n[0]&&n[0].parentNode;i&&C.a.g.get(i,u)||(i=C.a.Yb(n),C.a.g.set(i,u,!0)),new C.C.ia(t).nodes(i)}else{if(!(0<(n=C.h.childNodes(t)).length))throw Error("Anonymous template defined, but no template content was provided");i=C.a.Yb(n),new C.C.ia(t).nodes(i)}return{controlsDescendantBindings:!0}},update:function(t,e,i,r,o){var a=e();i=!0,r=null,"string"==typeof(e=C.a.f(a))?e={}:(a="name"in e?e.name:t,"if"in e&&(i=C.a.f(e.if)),i&&"ifnot"in e&&(i=!C.a.f(e.ifnot)),i&&!a&&(i=!1)),"foreach"in e?r=C.Qd(a,i&&e.foreach||[],e,t,o):i?(i=o,"data"in e&&(i=o.createChildContext(e.data,{as:e.as,noChildContext:e.noChildContext,exportDependencies:!0})),r=C.dc(a,i,e,t)):C.h.Ea(t),o=r,(e=C.a.g.get(t,s))&&"function"==typeof e.s&&e.s(),C.a.g.set(t,s,!o||o.ja&&!o.ja()?n:o)}},C.m.Ra.template=function(t){return 1==(t=C.m.ac(t)).length&&t[0].unknown||C.m.Id(t,"name")?null:"This template engine does not support anonymous templates nested within its templates"},C.h.ea.template=!0}(),C.b("setTemplateEngine",C.gc),C.b("renderTemplate",C.dc),C.a.Kc=function(t,e,n){var i,r,o,a,s;if(t.length&&e.length)for(i=r=0;(!n||i<n)&&(a=t[r]);++r){for(o=0;s=e[o];++o)if(a.value===s.value){a.moved=s.index,s.moved=a.index,e.splice(o,1),i=o=0;break}i+=o}},C.a.Pb=function(){function t(t,e,n,i,r){var o,a,s,u,l,c=Math.min,h=Math.max,f=[],d=t.length,p=e.length,g=p-d||1,m=d+p+1;for(o=0;o<=d;o++)for(u=s,f.push(s=[]),l=c(p,o+g),a=h(0,o-1);a<=l;a++)s[a]=a?o?t[o-1]===e[a-1]?u[a-1]:c(u[a]||m,s[a-1]||m)+1:a+1:o+1;for(c=[],h=[],g=[],o=d,a=p;o||a;)p=f[o][a]-1,a&&p===f[o][a-1]?h.push(c[c.length]={status:n,value:e[--a],index:a}):o&&p===f[o-1][a]?g.push(c[c.length]={status:i,value:t[--o],index:o}):(--a,--o,r.sparse||c.push({status:"retained",value:e[a]}));return C.a.Kc(g,h,!r.dontLimitMoves&&10*d),c.reverse()}return function(e,n,i){return i="boolean"==typeof i?{dontLimitMoves:i}:i||{},n=n||[],(e=e||[]).length<n.length?t(e,n,"added","deleted",i):t(n,e,"deleted","added",i)}}(),C.b("utils.compareArrays",C.a.Pb),function(){function t(t,e,i,r,o){var a=[],s=C.$((function(){var n=e(i,o,C.a.Ua(a,t))||[];0<a.length&&(C.a.Xc(a,n),r&&C.u.G(r,null,[i,n,o])),a.length=0,C.a.Nb(a,n)}),null,{l:t,Sa:function(){return!C.a.kd(a)}});return{Y:a,$:s.ja()?s:n}}var e=C.a.g.Z(),i=C.a.g.Z();C.a.ec=function(r,o,a,s,u,l){function c(t){d={Aa:t,pb:C.ta(w++)},b.push(d),E||A.push(d)}function h(t){d=v[t],w!==d.pb.v()&&T.push(d),d.pb(w++),C.a.Ua(d.Y,r),b.push(d)}function f(t,e){if(t)for(var n=0,i=e.length;n<i;n++)C.a.D(e[n].Y,(function(i){t(i,n,e[n].Aa)}))}void 0===(o=o||[]).length&&(o=[o]),s=s||{};var d,p,g,m,v=C.a.g.get(r,e),E=!v,b=[],y=0,w=0,D=[],S=[],N=[],T=[],A=[],x=0;if(E)C.a.D(o,c);else{if(!l||v&&v._countWaitingForRemove){var I=C.a.Mb(v,(function(t){return t.Aa}));l=C.a.Pb(I,o,{dontLimitMoves:s.dontLimitMoves,sparse:!0})}var F,P,O;for(I=0;F=l[I];I++)switch(P=F.moved,O=F.index,F.status){case"deleted":for(;y<O;)h(y++);P===n&&((d=v[y]).$&&(d.$.s(),d.$=n),C.a.Ua(d.Y,r).length&&(s.beforeRemove&&(b.push(d),x++,d.Aa===i?d=null:N.push(d)),d&&D.push.apply(D,d.Y))),y++;break;case"added":for(;w<O;)h(y++);P!==n?(S.push(b.length),h(P)):c(F.value)}for(;w<o.length;)h(y++);b._countWaitingForRemove=x}C.a.g.set(r,e,b),f(s.beforeMove,T),C.a.D(D,s.beforeRemove?C.oa:C.removeNode);try{m=r.ownerDocument.activeElement}catch(t){}if(S.length)for(;(I=S.shift())!=n;){for(d=b[I],p=n;I;)if((g=b[--I].Y)&&g.length){p=g[g.length-1];break}for(o=0;y=d.Y[o];p=y,o++)C.h.Wb(r,y,p)}for(I=0;d=b[I];I++){for(d.Y||C.a.extend(d,t(r,a,d.Aa,u,d.pb)),o=0;y=d.Y[o];p=y,o++)C.h.Wb(r,y,p);!d.Ed&&u&&(u(d.Aa,d.Y,d.pb),d.Ed=!0,p=d.Y[d.Y.length-1])}for(m&&r.ownerDocument.activeElement!=m&&m.focus(),f(s.beforeRemove,N),I=0;I<N.length;++I)N[I].Aa=i;f(s.afterMove,T),f(s.afterAdd,A)}}(),C.b("utils.setDomNodeChildrenFromArrayMapping",C.a.ec),C.ba=function(){this.allowTemplateRewriting=!1},C.ba.prototype=new C.ca,C.ba.prototype.constructor=C.ba,C.ba.prototype.renderTemplateSource=function(t,e,n,i){return(e=9>C.a.W||!t.nodes?null:t.nodes())?C.a.la(e.cloneNode(!0).childNodes):(t=t.text(),C.a.ua(t,i))},C.ba.Ma=new C.ba,C.gc(C.ba.Ma),C.b("nativeTemplateEngine",C.ba),function(){C.$a=function(){var t=this.Hd=function(){if(!a||!a.tmpl)return 0;try{if(0<=a.tmpl.tag.tmpl.open.toString().indexOf("__"))return 2}catch(t){}return 1}();this.renderTemplateSource=function(e,n,i,o){if(o=o||r,i=i||{},2>t)throw Error("Your version of jQuery.tmpl is too old. Please upgrade to jQuery.tmpl 1.0.0pre or later.");var s=e.data("precompiled");return s||(s=e.text()||"",s=a.template(null,"{{ko_with $item.koBindingContext}}"+s+"{{/ko_with}}"),e.data("precompiled",s)),e=[n.$data],n=a.extend({koBindingContext:n},i.templateOptions),(n=a.tmpl(s,e,n)).appendTo(o.createElement("div")),a.fragments={},n},this.createJavaScriptEvaluatorBlock=function(t){return"{{ko_code ((function() { return "+t+" })()) }}"},this.addTemplate=function(t,e){r.write("<script type='text/html' id='"+t+"'>"+e+"<\/script>")},0<t&&(a.tmpl.tag.ko_code={open:"__.push($1 || '');"},a.tmpl.tag.ko_with={open:"with($1) {",close:"} "})},C.$a.prototype=new C.ca,C.$a.prototype.constructor=C.$a;var t=new C.$a;0<t.Hd&&C.gc(t),C.b("jqueryTmplTemplateEngine",C.$a)}()}))}()})),n=-1;function i(t,e,u,l){if(t===e)return t?[[0,t]]:[];if(null!=u){var c=function(t,e,n){var i="number"==typeof n?{index:n,length:0}:n.oldRange,r="number"==typeof n?null:n.newRange,o=t.length,a=e.length;if(0===i.length&&(null===r||0===r.length)){var s=i.index,u=t.slice(0,s),l=t.slice(s),c=r?r.index:null,h=s+a-o;if((null===c||c===h)&&!(h<0||h>a)){var d=e.slice(0,h);if((m=e.slice(h))===l){var p=Math.min(s,h);if((E=u.slice(0,p))===(C=d.slice(0,p)))return f(E,u.slice(p),d.slice(p),l)}}if(null===c||c===s){var g=s,m=(d=e.slice(0,g),e.slice(g));if(d===u){var v=Math.min(o-g,a-g);if((b=l.slice(l.length-v))===(y=m.slice(m.length-v)))return f(u,l.slice(0,l.length-v),m.slice(0,m.length-v),b)}}}if(i.length>0&&r&&0===r.length){var E=t.slice(0,i.index),b=t.slice(i.index+i.length);if(!(a<(p=E.length)+(v=b.length))){var C=e.slice(0,p),y=e.slice(a-v);if(E===C&&b===y)return f(E,t.slice(p,o-v),e.slice(p,a-v),b)}}return null}(t,e,u);if(c)return c}var h=o(t,e),d=t.substring(0,h);h=a(t=t.substring(h),e=e.substring(h));var p=t.substring(t.length-h),g=function(t,e){var s;if(!t)return[[1,e]];if(!e)return[[n,t]];var u=t.length>e.length?t:e,l=t.length>e.length?e:t,c=u.indexOf(l);if(-1!==c)return s=[[1,u.substring(0,c)],[0,l],[1,u.substring(c+l.length)]],t.length>e.length&&(s[0][0]=s[2][0]=n),s;if(1===l.length)return[[n,t],[1,e]];var h=function(t,e){var n=t.length>e.length?t:e,i=t.length>e.length?e:t;if(n.length<4||2*i.length<n.length)return null;function r(t,e,n){for(var i,r,s,u,l=t.substring(n,n+Math.floor(t.length/4)),c=-1,h="";-1!==(c=e.indexOf(l,c+1));){var f=o(t.substring(n),e.substring(c)),d=a(t.substring(0,n),e.substring(0,c));h.length<d+f&&(h=e.substring(c-d,c)+e.substring(c,c+f),i=t.substring(0,n-d),r=t.substring(n+f),s=e.substring(0,c-d),u=e.substring(c+f))}return 2*h.length>=t.length?[i,r,s,u,h]:null}var s,u,l,c,h,f=r(n,i,Math.ceil(n.length/4)),d=r(n,i,Math.ceil(n.length/2));if(!f&&!d)return null;s=d?f&&f[4].length>d[4].length?f:d:f;t.length>e.length?(u=s[0],l=s[1],c=s[2],h=s[3]):(c=s[0],h=s[1],u=s[2],l=s[3]);var p=s[4];return[u,l,c,h,p]}(t,e);if(h){var f=h[0],d=h[1],p=h[2],g=h[3],m=h[4],v=i(f,p),E=i(d,g);return v.concat([[0,m]],E)}return function(t,e){for(var i=t.length,o=e.length,a=Math.ceil((i+o)/2),s=a,u=2*a,l=new Array(u),c=new Array(u),h=0;h<u;h++)l[h]=-1,c[h]=-1;l[s+1]=0,c[s+1]=0;for(var f=i-o,d=f%2!=0,p=0,g=0,m=0,v=0,E=0;E<a;E++){for(var b=-E+p;b<=E-g;b+=2){for(var C=s+b,y=(T=b===-E||b!==E&&l[C-1]<l[C+1]?l[C+1]:l[C-1]+1)-b;T<i&&y<o&&t.charAt(T)===e.charAt(y);)T++,y++;if(l[C]=T,T>i)g+=2;else if(y>o)p+=2;else if(d){if((S=s+f-b)>=0&&S<u&&-1!==c[S])if(T>=(D=i-c[S]))return r(t,e,T,y)}}for(var w=-E+m;w<=E-v;w+=2){for(var D,S=s+w,N=(D=w===-E||w!==E&&c[S-1]<c[S+1]?c[S+1]:c[S-1]+1)-w;D<i&&N<o&&t.charAt(i-D-1)===e.charAt(o-N-1);)D++,N++;if(c[S]=D,D>i)v+=2;else if(N>o)m+=2;else if(!d){if((C=s+f-w)>=0&&C<u&&-1!==l[C]){var T;y=s+(T=l[C])-C;if(T>=(D=i-D))return r(t,e,T,y)}}}}return[[n,t],[1,e]]}(t,e)}(t=t.substring(0,t.length-h),e=e.substring(0,e.length-h));return d&&g.unshift([0,d]),p&&g.push([0,p]),s(g,l),g}function r(t,e,n,r){var o=t.substring(0,n),a=e.substring(0,r),s=t.substring(n),u=e.substring(r),l=i(o,a),c=i(s,u);return l.concat(c)}function o(t,e){if(!t||!e||t.charAt(0)!==e.charAt(0))return 0;for(var n=0,i=Math.min(t.length,e.length),r=i,o=0;n<r;)t.substring(o,r)==e.substring(o,r)?o=n=r:i=r,r=Math.floor((i-n)/2+n);return u(t.charCodeAt(r-1))&&r--,r}function a(t,e){if(!t||!e||t.slice(-1)!==e.slice(-1))return 0;for(var n=0,i=Math.min(t.length,e.length),r=i,o=0;n<r;)t.substring(t.length-r,t.length-o)==e.substring(e.length-r,e.length-o)?o=n=r:i=r,r=Math.floor((i-n)/2+n);return l(t.charCodeAt(t.length-r))&&r--,r}function s(t,e){t.push([0,""]);for(var i,r=0,u=0,l=0,f="",d="";r<t.length;)if(r<t.length-1&&!t[r][1])t.splice(r,1);else switch(t[r][0]){case 1:l++,d+=t[r][1],r++;break;case n:u++,f+=t[r][1],r++;break;case 0:var p=r-l-u-1;if(e){if(p>=0&&h(t[p][1])){var g=t[p][1].slice(-1);if(t[p][1]=t[p][1].slice(0,-1),f=g+f,d=g+d,!t[p][1]){t.splice(p,1),r--;var m=p-1;t[m]&&1===t[m][0]&&(l++,d=t[m][1]+d,m--),t[m]&&t[m][0]===n&&(u++,f=t[m][1]+f,m--),p=m}}if(c(t[r][1])){g=t[r][1].charAt(0);t[r][1]=t[r][1].slice(1),f+=g,d+=g}}if(r<t.length-1&&!t[r][1]){t.splice(r,1);break}if(f.length>0||d.length>0){f.length>0&&d.length>0&&(0!==(i=o(d,f))&&(p>=0?t[p][1]+=d.substring(0,i):(t.splice(0,0,[0,d.substring(0,i)]),r++),d=d.substring(i),f=f.substring(i)),0!==(i=a(d,f))&&(t[r][1]=d.substring(d.length-i)+t[r][1],d=d.substring(0,d.length-i),f=f.substring(0,f.length-i)));var v=l+u;0===f.length&&0===d.length?(t.splice(r-v,v),r-=v):0===f.length?(t.splice(r-v,v,[1,d]),r=r-v+1):0===d.length?(t.splice(r-v,v,[n,f]),r=r-v+1):(t.splice(r-v,v,[n,f],[1,d]),r=r-v+2)}0!==r&&0===t[r-1][0]?(t[r-1][1]+=t[r][1],t.splice(r,1)):r++,l=0,u=0,f="",d=""}""===t[t.length-1][1]&&t.pop();var E=!1;for(r=1;r<t.length-1;)0===t[r-1][0]&&0===t[r+1][0]&&(t[r][1].substring(t[r][1].length-t[r-1][1].length)===t[r-1][1]?(t[r][1]=t[r-1][1]+t[r][1].substring(0,t[r][1].length-t[r-1][1].length),t[r+1][1]=t[r-1][1]+t[r+1][1],t.splice(r-1,1),E=!0):t[r][1].substring(0,t[r+1][1].length)==t[r+1][1]&&(t[r-1][1]+=t[r+1][1],t[r][1]=t[r][1].substring(t[r+1][1].length)+t[r+1][1],t.splice(r+1,1),E=!0)),r++;E&&s(t,e)}function u(t){return t>=55296&&t<=56319}function l(t){return t>=56320&&t<=57343}function c(t){return l(t.charCodeAt(0))}function h(t){return u(t.charCodeAt(t.length-1))}function f(t,e,i,r){return h(t)||c(r)?null:function(t){for(var e=[],n=0;n<t.length;n++)t[n][1].length>0&&e.push(t[n]);return e}([[0,t],[n,e],[1,i],[0,r]])}function d(t,e,n){return i(t,e,n,!0)}d.INSERT=1,d.DELETE=n,d.EQUAL=0;var p,g=d,m=t((function(t,e){var n,i,r,o,a=(n=g)&&"object"==typeof n&&"default"in n?n.default:n;function s(t){e.isDebug=t}function u(t){switch(t){case"ltr":return e.PageProgression.LTR;case"rtl":return e.PageProgression.RTL;default:throw new Error("unknown PageProgression: "+t)}}function l(t){var e=Array.from(t),n=null;return e[0]instanceof Error&&(n=e.shift()),{error:n,messages:e}}function c(t){var e=t.error,n=e&&(e.frameTrace||e.stack),i=[].concat(t.messages);return e&&(i.length>0&&(i=i.concat(["\n"])),i=i.concat([e.toString()]),n&&(i=i.concat(["\n"]).concat(n))),i}e.isDebug=!1,function(t){t.LTR="ltr",t.RTL="rtl"}(e.PageProgression||(e.PageProgression={})),(i=e.PageSide||(e.PageSide={})).LEFT="left",i.RIGHT="right",(r=e.ReadyState||(e.ReadyState={})).LOADING="loading",r.INTERACTIVE="interactive",r.COMPLETE="complete",function(t){t[t.DEBUG=1]="DEBUG",t[t.INFO=2]="INFO",t[t.WARN=3]="WARN",t[t.ERROR=4]="ERROR"}(o||(o={}));var h,f=new(function(){function t(t){this.opt_console=t,this.listeners={}}var e=t.prototype;return e.consoleDebug=function(t){var e,n,i;this.opt_console?this.opt_console.debug?(e=this.opt_console).debug.apply(e,t):(n=this.opt_console).log.apply(n,t):(i=console).debug.apply(i,t)},e.consoleInfo=function(t){var e,n,i;this.opt_console?this.opt_console.info?(e=this.opt_console).info.apply(e,t):(n=this.opt_console).log.apply(n,t):(i=console).info.apply(i,t)},e.consoleWarn=function(t){var e,n,i;this.opt_console?this.opt_console.warn?(e=this.opt_console).warn.apply(e,t):(n=this.opt_console).log.apply(n,t):(i=console).warn.apply(i,t)},e.consoleError=function(t){var e,n,i;this.opt_console?this.opt_console.error?(e=this.opt_console).error.apply(e,t):(n=this.opt_console).log.apply(n,t):(i=console).error.apply(i,t)},e.triggerListeners=function(t,e){var n=this.listeners[t];n&&n.forEach((function(t){t(e)}))},e.addListener=function(t,e){var n=this.listeners[t];n||(n=this.listeners[t]=[]),n.push(e)},e.debug=function(){var t=l(arguments);this.consoleDebug(c(t)),this.triggerListeners(o.DEBUG,t)},e.info=function(){var t=l(arguments);this.consoleInfo(c(t)),this.triggerListeners(o.INFO,t)},e.warn=function(){var t=l(arguments);this.consoleWarn(c(t)),this.triggerListeners(o.WARN,t)},e.error=function(){var t=l(arguments);this.consoleError(c(t)),this.triggerListeners(o.ERROR,t)},t}());(h=e.HOOKS||(e.HOOKS={})).SIMPLE_PROPERTY="SIMPLE_PROPERTY",h.PREPROCESS_SINGLE_DOCUMENT="PREPROCESS_SINGLE_DOCUMENT",h.PREPROCESS_TEXT_CONTENT="PREPROCESS_TEXT_CONTENT",h.PREPROCESS_ELEMENT_STYLE="PREPROCESS_ELEMENT_STYLE",h.POLYFILLED_INHERITED_PROPS="POLYFILLED_INHERITED_PROPS",h.CONFIGURATION="CONFIGURATION",h.RESOLVE_TEXT_NODE_BREAKER="RESOLVE_TEXT_NODE_BREAKER",h.RESOLVE_FORMATTING_CONTEXT="RESOLVE_FORMATTING_CONTEXT",h.RESOLVE_LAYOUT_PROCESSOR="RESOLVE_LAYOUT_PROCESSOR",h.POST_LAYOUT_BLOCK="POST_LAYOUT_BLOCK";var d={};function p(t,n){if(e.HOOKS[t]){var i=d[t];i||(i=d[t]=[]),i.push(n)}else f.warn(new Error("Skipping unknown plugin hook '"+t+"'."))}function m(t,n){if(e.HOOKS[t]){var i=d[t];if(i){var r=i.indexOf(n);r>=0&&i.splice(r,1)}}else f.warn(new Error("Ignoring unknown plugin hook '"+t+"'."))}function v(t){return d[t]||[]}var E={registerHook:p,removeHook:m},b=function(){function t(t){this.performanceInstance=t,this.timestamps={},this.registerTiming=C,this.registerStartTiming=this.registerStartTiming=C,this.registerEndTiming=this.registerEndTiming=C}var e=t.prototype;return e.forceRegisterStartTiming=function(t,e){y.call(this,t,"start",e)},e.forceRegisterEndTiming=function(t,e){y.call(this,t,"end",e)},e.printTimings=function(){var t=this.timestamps,e="";Object.keys(t).forEach((function(n){for(var i=t[n],r=i.length,o=0;o<r;o++){var a=i[o];e+=n,r>1&&(e+="("+o+")"),e+=" => start: "+a.start+", end: "+a.end+", duration: "+(a.end-a.start)+"\n"}})),f.info(e)},e.disable=function(){this.registerTiming=C,this.registerStartTiming=this.registerStartTiming=C,this.registerEndTiming=this.registerEndTiming=C},e.enable=function(){this.registerTiming=y,this.registerStartTiming=this.registerStartTiming=w,this.registerEndTiming=this.registerEndTiming=D},e.isEnabled=function(){return this.registerStartTiming===w},t}();function C(){}function y(t,e,n){n||(n=this.performanceInstance.now());var i,r=this.timestamps[t];r||(r=this.timestamps[t]=[]);for(var o=r.length-1;o>=0&&(!(i=r[o])||i[e]);o--)i=null;i||r.push(i={}),i[e]=n}function w(t,e){this.registerTiming(t,"start",e)}function D(t,e){this.registerTiming(t,"end",e)}var S={now:Date.now},N=new b(window&&window.performance||S);N.forceRegisterStartTiming("load_vivliostyle");var T={profiler:{registerStartTiming:N.registerStartTiming,registerEndTiming:N.registerEndTiming,printTimings:N.printTimings,disable:N.disable,enable:N.enable}};function A(t,e){for(var n=0;n<e.length;n++){var i=e[n];i.enumerable=i.enumerable||!1,i.configurable=!0,"value"in i&&(i.writable=!0),Object.defineProperty(t,i.key,i)}}function x(t,e,n){return e&&A(t.prototype,e),n&&A(t,n),t}function I(t,e){t.prototype=Object.create(e.prototype),t.prototype.constructor=t,P(t,e)}function F(t){return(F=Object.setPrototypeOf?Object.getPrototypeOf:function(t){return t.__proto__||Object.getPrototypeOf(t)})(t)}function P(t,e){return(P=Object.setPrototypeOf||function(t,e){return t.__proto__=e,t})(t,e)}function O(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(t){return!1}}function R(t,e,n){return(R=O()?Reflect.construct:function(t,e,n){var i=[null];i.push.apply(i,e);var r=new(Function.bind.apply(t,i));return n&&P(r,n.prototype),r}).apply(null,arguments)}function k(t){var e="function"==typeof Map?new Map:void 0;return(k=function(t){if(null===t||-1===Function.toString.call(t).indexOf("[native code]"))return t;if("function"!=typeof t)throw new TypeError("Super expression must either be null or a function");if(void 0!==e){if(e.has(t))return e.get(t);e.set(t,n)}function n(){return R(t,arguments,F(this).constructor)}return n.prototype=Object.create(t.prototype,{constructor:{value:n,enumerable:!1,writable:!0,configurable:!0}}),P(n,t)})(t)}function L(t){if(void 0===t)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return t}function B(t,e){(null==e||e>t.length)&&(e=t.length);for(var n=0,i=new Array(e);n<e;n++)i[n]=t[n];return i}function _(t,e){var n;if("undefined"==typeof Symbol||null==t[Symbol.iterator]){if(Array.isArray(t)||(n=function(t,e){if(t){if("string"==typeof t)return B(t,void 0);var n=Object.prototype.toString.call(t).slice(8,-1);return"Object"===n&&t.constructor&&(n=t.constructor.name),"Map"===n||"Set"===n?Array.from(t):"Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)?B(t,void 0):void 0}}(t))||e&&t&&"number"==typeof t.length){n&&(t=n);var i=0;return function(){return i>=t.length?{done:!0}:{done:!1,value:t[i++]}}}throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}return(n=t[Symbol.iterator]()).next.bind(n)}var M=/^(?:[ -#%-\*,-\/:;\?@\[-\]_\{\}\xA0\xA1\xA7\xAB\xB6\xB7\xBB\xBF\u0300-\u036F\u037E\u0387\u0483-\u0487\u055A-\u055F\u0589\u058A\u0591-\u05C7\u05F3\u05F4\u0609\u060A\u060C\u060D\u0610-\u061B\u061E\u061F\u064B-\u065F\u066A-\u066D\u0670\u06D4\u06D6-\u06DC\u06DF-\u06E4\u06E7\u06E8\u06EA-\u06ED\u0700-\u070D\u0711\u0730-\u074A\u07A6-\u07B0\u07EB-\u07F3\u07F7-\u07F9\u07FD\u0816-\u0819\u081B-\u0823\u0825-\u0827\u0829-\u082D\u0830-\u083E\u0859-\u085B\u085E\u08D3-\u08E1\u08E3-\u0902\u093A\u093C\u0941-\u0948\u094D\u0951-\u0957\u0962-\u0965\u0970\u0981\u09BC\u09C1-\u09C4\u09CD\u09E2\u09E3\u09FD\u09FE\u0A01\u0A02\u0A3C\u0A41\u0A42\u0A47\u0A48\u0A4B-\u0A4D\u0A51\u0A70\u0A71\u0A75\u0A76\u0A81\u0A82\u0ABC\u0AC1-\u0AC5\u0AC7\u0AC8\u0ACD\u0AE2\u0AE3\u0AF0\u0AFA-\u0AFF\u0B01\u0B3C\u0B3F\u0B41-\u0B44\u0B4D\u0B55\u0B56\u0B62\u0B63\u0B82\u0BC0\u0BCD\u0C00\u0C04\u0C3E-\u0C40\u0C46-\u0C48\u0C4A-\u0C4D\u0C55\u0C56\u0C62\u0C63\u0C77\u0C81\u0C84\u0CBC\u0CBF\u0CC6\u0CCC\u0CCD\u0CE2\u0CE3\u0D00\u0D01\u0D3B\u0D3C\u0D41-\u0D44\u0D4D\u0D62\u0D63\u0D81\u0DCA\u0DD2-\u0DD4\u0DD6\u0DF4\u0E31\u0E34-\u0E3A\u0E47-\u0E4F\u0E5A\u0E5B\u0EB1\u0EB4-\u0EBC\u0EC8-\u0ECD\u0F04-\u0F12\u0F14\u0F18\u0F19\u0F35\u0F37\u0F39-\u0F3D\u0F71-\u0F7E\u0F80-\u0F87\u0F8D-\u0F97\u0F99-\u0FBC\u0FC6\u0FD0-\u0FD4\u0FD9\u0FDA\u102D-\u1030\u1032-\u1037\u1039\u103A\u103D\u103E\u104A-\u104F\u1058\u1059\u105E-\u1060\u1071-\u1074\u1082\u1085\u1086\u108D\u109D\u10FB\u135D-\u1368\u1400\u166E\u1680\u169B\u169C\u16EB-\u16ED\u1712-\u1714\u1732-\u1736\u1752\u1753\u1772\u1773\u17B4\u17B5\u17B7-\u17BD\u17C6\u17C9-\u17D6\u17D8-\u17DA\u17DD\u1800-\u180D\u1885\u1886\u18A9\u1920-\u1922\u1927\u1928\u1932\u1939-\u193B\u1944\u1945\u1A17\u1A18\u1A1B\u1A1E\u1A1F\u1A56\u1A58-\u1A5E\u1A60\u1A62\u1A65-\u1A6C\u1A73-\u1A7C\u1A7F\u1AA0-\u1AA6\u1AA8-\u1AAD\u1AB0-\u1ABD\u1ABF\u1AC0\u1B00-\u1B03\u1B34\u1B36-\u1B3A\u1B3C\u1B42\u1B5A-\u1B60\u1B6B-\u1B73\u1B80\u1B81\u1BA2-\u1BA5\u1BA8\u1BA9\u1BAB-\u1BAD\u1BE6\u1BE8\u1BE9\u1BED\u1BEF-\u1BF1\u1BFC-\u1BFF\u1C2C-\u1C33\u1C36\u1C37\u1C3B-\u1C3F\u1C7E\u1C7F\u1CC0-\u1CC7\u1CD0-\u1CE0\u1CE2-\u1CE8\u1CED\u1CF4\u1CF8\u1CF9\u1DC0-\u1DF9\u1DFB-\u1DFF\u2000-\u200A\u2010-\u2027\u202F-\u2043\u2045-\u2051\u2053-\u205F\u207D\u207E\u208D\u208E\u20D0-\u20DC\u20E1\u20E5-\u20F0\u2308-\u230B\u2329\u232A\u2768-\u2775\u27C5\u27C6\u27E6-\u27EF\u2983-\u2998\u29D8-\u29DB\u29FC\u29FD\u2CEF-\u2CF1\u2CF9-\u2CFC\u2CFE\u2CFF\u2D70\u2D7F\u2DE0-\u2E2E\u2E30-\u2E4F\u2E52\u3000-\u3003\u3008-\u3011\u3014-\u301F\u302A-\u302D\u3030\u303D\u3099\u309A\u30A0\u30FB\uA4FE\uA4FF\uA60D-\uA60F\uA66F\uA673-\uA67E\uA69E\uA69F\uA6F0-\uA6F7\uA802\uA806\uA80B\uA825\uA826\uA82C\uA874-\uA877\uA8C4\uA8C5\uA8CE\uA8CF\uA8E0-\uA8F1\uA8F8-\uA8FA\uA8FC\uA8FF\uA926-\uA92F\uA947-\uA951\uA95F\uA980-\uA982\uA9B3\uA9B6-\uA9B9\uA9BC\uA9BD\uA9C1-\uA9CD\uA9DE\uA9DF\uA9E5\uAA29-\uAA2E\uAA31\uAA32\uAA35\uAA36\uAA43\uAA4C\uAA5C-\uAA5F\uAA7C\uAAB0\uAAB2-\uAAB4\uAAB7\uAAB8\uAABE\uAABF\uAAC1\uAADE\uAADF\uAAEC\uAAED\uAAF0\uAAF1\uAAF6\uABE5\uABE8\uABEB\uABED\uFB1E\uFD3E\uFD3F\uFE00-\uFE19\uFE20-\uFE52\uFE54-\uFE61\uFE63\uFE68\uFE6A\uFE6B\uFF01-\uFF03\uFF05-\uFF0A\uFF0C-\uFF0F\uFF1A\uFF1B\uFF1F\uFF20\uFF3B-\uFF3D\uFF3F\uFF5B\uFF5D\uFF5F-\uFF65]|\uD800[\uDD00-\uDD02\uDDFD\uDEE0\uDF76-\uDF7A\uDF9F\uDFD0]|\uD801\uDD6F|\uD802[\uDC57\uDD1F\uDD3F\uDE01-\uDE03\uDE05\uDE06\uDE0C-\uDE0F\uDE38-\uDE3A\uDE3F\uDE50-\uDE58\uDE7F\uDEE5\uDEE6\uDEF0-\uDEF6\uDF39-\uDF3F\uDF99-\uDF9C]|\uD803[\uDD24-\uDD27\uDEAB-\uDEAD\uDF46-\uDF50\uDF55-\uDF59]|\uD804[\uDC01\uDC38-\uDC4D\uDC7F-\uDC81\uDCB3-\uDCB6\uDCB9-\uDCBC\uDCBE-\uDCC1\uDD00-\uDD02\uDD27-\uDD2B\uDD2D-\uDD34\uDD40-\uDD43\uDD73-\uDD75\uDD80\uDD81\uDDB6-\uDDBE\uDDC5-\uDDCD\uDDCF\uDDDB\uDDDD-\uDDDF\uDE2F-\uDE31\uDE34\uDE36-\uDE3E\uDEA9\uDEDF\uDEE3-\uDEEA\uDF00\uDF01\uDF3B\uDF3C\uDF40\uDF66-\uDF6C\uDF70-\uDF74]|\uD805[\uDC38-\uDC3F\uDC42-\uDC44\uDC46\uDC4B-\uDC4F\uDC5A\uDC5B\uDC5D\uDC5E\uDCB3-\uDCB8\uDCBA\uDCBF\uDCC0\uDCC2\uDCC3\uDCC6\uDDB2-\uDDB5\uDDBC\uDDBD\uDDBF-\uDDD7\uDDDC\uDDDD\uDE33-\uDE3A\uDE3D\uDE3F-\uDE43\uDE60-\uDE6C\uDEAB\uDEAD\uDEB0-\uDEB5\uDEB7\uDF1D-\uDF1F\uDF22-\uDF25\uDF27-\uDF2B\uDF3C-\uDF3E]|\uD806[\uDC2F-\uDC37\uDC39-\uDC3B\uDD3B\uDD3C\uDD3E\uDD43-\uDD46\uDDD4-\uDDD7\uDDDA\uDDDB\uDDE0\uDDE2\uDE01-\uDE0A\uDE33-\uDE38\uDE3B-\uDE47\uDE51-\uDE56\uDE59-\uDE5B\uDE8A-\uDE96\uDE98-\uDE9C\uDE9E-\uDEA2]|\uD807[\uDC30-\uDC36\uDC38-\uDC3D\uDC3F\uDC41-\uDC45\uDC70\uDC71\uDC92-\uDCA7\uDCAA-\uDCB0\uDCB2\uDCB3\uDCB5\uDCB6\uDD31-\uDD36\uDD3A\uDD3C\uDD3D\uDD3F-\uDD45\uDD47\uDD90\uDD91\uDD95\uDD97\uDEF3\uDEF4\uDEF7\uDEF8\uDFFF]|\uD809[\uDC70-\uDC74]|\uD81A[\uDE6E\uDE6F\uDEF0-\uDEF5\uDF30-\uDF3B\uDF44]|\uD81B[\uDE97-\uDE9A\uDF4F\uDF8F-\uDF92\uDFE2\uDFE4]|\uD82F[\uDC9D-\uDC9F]|\uD834[\uDD67-\uDD69\uDD7B-\uDD82\uDD85-\uDD8B\uDDAA-\uDDAD\uDE42-\uDE44]|\uD836[\uDE00-\uDE36\uDE3B-\uDE6C\uDE75\uDE84\uDE87-\uDE8B\uDE9B-\uDE9F\uDEA1-\uDEAF]|\uD838[\uDC00-\uDC06\uDC08-\uDC18\uDC1B-\uDC21\uDC23\uDC24\uDC26-\uDC2A\uDD30-\uDD36\uDEEC-\uDEEF]|\uD83A[\uDCD0-\uDCD6\uDD44-\uDD4A\uDD5E\uDD5F]|\uDB40[\uDD00-\uDDEF])*(?:[0-9A-Za-z\xAA\xB2\xB3\xB5\xB9\xBA\xBC-\xBE\xC0-\xD6\xD8-\xF6\xF8-\u02C1\u02C6-\u02D1\u02E0-\u02E4\u02EC\u02EE\u0370-\u0374\u0376\u0377\u037A-\u037D\u037F\u0386\u0388-\u038A\u038C\u038E-\u03A1\u03A3-\u03F5\u03F7-\u0481\u048A-\u052F\u0531-\u0556\u0559\u0560-\u0588\u05D0-\u05EA\u05EF-\u05F2\u0620-\u064A\u0660-\u0669\u066E\u066F\u0671-\u06D3\u06D5\u06E5\u06E6\u06EE-\u06FC\u06FF\u0710\u0712-\u072F\u074D-\u07A5\u07B1\u07C0-\u07EA\u07F4\u07F5\u07FA\u0800-\u0815\u081A\u0824\u0828\u0840-\u0858\u0860-\u086A\u08A0-\u08B4\u08B6-\u08C7\u0904-\u0939\u093D\u0950\u0958-\u0961\u0966-\u096F\u0971-\u0980\u0985-\u098C\u098F\u0990\u0993-\u09A8\u09AA-\u09B0\u09B2\u09B6-\u09B9\u09BD\u09CE\u09DC\u09DD\u09DF-\u09E1\u09E6-\u09F1\u09F4-\u09F9\u09FC\u0A05-\u0A0A\u0A0F\u0A10\u0A13-\u0A28\u0A2A-\u0A30\u0A32\u0A33\u0A35\u0A36\u0A38\u0A39\u0A59-\u0A5C\u0A5E\u0A66-\u0A6F\u0A72-\u0A74\u0A85-\u0A8D\u0A8F-\u0A91\u0A93-\u0AA8\u0AAA-\u0AB0\u0AB2\u0AB3\u0AB5-\u0AB9\u0ABD\u0AD0\u0AE0\u0AE1\u0AE6-\u0AEF\u0AF9\u0B05-\u0B0C\u0B0F\u0B10\u0B13-\u0B28\u0B2A-\u0B30\u0B32\u0B33\u0B35-\u0B39\u0B3D\u0B5C\u0B5D\u0B5F-\u0B61\u0B66-\u0B6F\u0B71-\u0B77\u0B83\u0B85-\u0B8A\u0B8E-\u0B90\u0B92-\u0B95\u0B99\u0B9A\u0B9C\u0B9E\u0B9F\u0BA3\u0BA4\u0BA8-\u0BAA\u0BAE-\u0BB9\u0BD0\u0BE6-\u0BF2\u0C05-\u0C0C\u0C0E-\u0C10\u0C12-\u0C28\u0C2A-\u0C39\u0C3D\u0C58-\u0C5A\u0C60\u0C61\u0C66-\u0C6F\u0C78-\u0C7E\u0C80\u0C85-\u0C8C\u0C8E-\u0C90\u0C92-\u0CA8\u0CAA-\u0CB3\u0CB5-\u0CB9\u0CBD\u0CDE\u0CE0\u0CE1\u0CE6-\u0CEF\u0CF1\u0CF2\u0D04-\u0D0C\u0D0E-\u0D10\u0D12-\u0D3A\u0D3D\u0D4E\u0D54-\u0D56\u0D58-\u0D61\u0D66-\u0D78\u0D7A-\u0D7F\u0D85-\u0D96\u0D9A-\u0DB1\u0DB3-\u0DBB\u0DBD\u0DC0-\u0DC6\u0DE6-\u0DEF\u0E01-\u0E30\u0E32\u0E33\u0E40-\u0E46\u0E50-\u0E59\u0E81\u0E82\u0E84\u0E86-\u0E8A\u0E8C-\u0EA3\u0EA5\u0EA7-\u0EB0\u0EB2\u0EB3\u0EBD\u0EC0-\u0EC4\u0EC6\u0ED0-\u0ED9\u0EDC-\u0EDF\u0F00\u0F20-\u0F33\u0F40-\u0F47\u0F49-\u0F6C\u0F88-\u0F8C\u1000-\u102A\u103F-\u1049\u1050-\u1055\u105A-\u105D\u1061\u1065\u1066\u106E-\u1070\u1075-\u1081\u108E\u1090-\u1099\u10A0-\u10C5\u10C7\u10CD\u10D0-\u10FA\u10FC-\u1248\u124A-\u124D\u1250-\u1256\u1258\u125A-\u125D\u1260-\u1288\u128A-\u128D\u1290-\u12B0\u12B2-\u12B5\u12B8-\u12BE\u12C0\u12C2-\u12C5\u12C8-\u12D6\u12D8-\u1310\u1312-\u1315\u1318-\u135A\u1369-\u137C\u1380-\u138F\u13A0-\u13F5\u13F8-\u13FD\u1401-\u166C\u166F-\u167F\u1681-\u169A\u16A0-\u16EA\u16EE-\u16F8\u1700-\u170C\u170E-\u1711\u1720-\u1731\u1740-\u1751\u1760-\u176C\u176E-\u1770\u1780-\u17B3\u17D7\u17DC\u17E0-\u17E9\u17F0-\u17F9\u1810-\u1819\u1820-\u1878\u1880-\u1884\u1887-\u18A8\u18AA\u18B0-\u18F5\u1900-\u191E\u1946-\u196D\u1970-\u1974\u1980-\u19AB\u19B0-\u19C9\u19D0-\u19DA\u1A00-\u1A16\u1A20-\u1A54\u1A80-\u1A89\u1A90-\u1A99\u1AA7\u1B05-\u1B33\u1B45-\u1B4B\u1B50-\u1B59\u1B83-\u1BA0\u1BAE-\u1BE5\u1C00-\u1C23\u1C40-\u1C49\u1C4D-\u1C7D\u1C80-\u1C88\u1C90-\u1CBA\u1CBD-\u1CBF\u1CE9-\u1CEC\u1CEE-\u1CF3\u1CF5\u1CF6\u1CFA\u1D00-\u1DBF\u1E00-\u1F15\u1F18-\u1F1D\u1F20-\u1F45\u1F48-\u1F4D\u1F50-\u1F57\u1F59\u1F5B\u1F5D\u1F5F-\u1F7D\u1F80-\u1FB4\u1FB6-\u1FBC\u1FBE\u1FC2-\u1FC4\u1FC6-\u1FCC\u1FD0-\u1FD3\u1FD6-\u1FDB\u1FE0-\u1FEC\u1FF2-\u1FF4\u1FF6-\u1FFC\u2070\u2071\u2074-\u2079\u207F-\u2089\u2090-\u209C\u2102\u2107\u210A-\u2113\u2115\u2119-\u211D\u2124\u2126\u2128\u212A-\u212D\u212F-\u2139\u213C-\u213F\u2145-\u2149\u214E\u2150-\u2189\u2460-\u249B\u24EA-\u24FF\u2776-\u2793\u2C00-\u2C2E\u2C30-\u2C5E\u2C60-\u2CE4\u2CEB-\u2CEE\u2CF2\u2CF3\u2CFD\u2D00-\u2D25\u2D27\u2D2D\u2D30-\u2D67\u2D6F\u2D80-\u2D96\u2DA0-\u2DA6\u2DA8-\u2DAE\u2DB0-\u2DB6\u2DB8-\u2DBE\u2DC0-\u2DC6\u2DC8-\u2DCE\u2DD0-\u2DD6\u2DD8-\u2DDE\u2E2F\u3005-\u3007\u3021-\u3029\u3031-\u3035\u3038-\u303C\u3041-\u3096\u309D-\u309F\u30A1-\u30FA\u30FC-\u30FF\u3105-\u312F\u3131-\u318E\u3192-\u3195\u31A0-\u31BF\u31F0-\u31FF\u3220-\u3229\u3248-\u324F\u3251-\u325F\u3280-\u3289\u32B1-\u32BF\u3400-\u4DBF\u4E00-\u9FFC\uA000-\uA48C\uA4D0-\uA4FD\uA500-\uA60C\uA610-\uA62B\uA640-\uA66E\uA67F-\uA69D\uA6A0-\uA6EF\uA717-\uA71F\uA722-\uA788\uA78B-\uA7BF\uA7C2-\uA7CA\uA7F5-\uA801\uA803-\uA805\uA807-\uA80A\uA80C-\uA822\uA830-\uA835\uA840-\uA873\uA882-\uA8B3\uA8D0-\uA8D9\uA8F2-\uA8F7\uA8FB\uA8FD\uA8FE\uA900-\uA925\uA930-\uA946\uA960-\uA97C\uA984-\uA9B2\uA9CF-\uA9D9\uA9E0-\uA9E4\uA9E6-\uA9FE\uAA00-\uAA28\uAA40-\uAA42\uAA44-\uAA4B\uAA50-\uAA59\uAA60-\uAA76\uAA7A\uAA7E-\uAAAF\uAAB1\uAAB5\uAAB6\uAAB9-\uAABD\uAAC0\uAAC2\uAADB-\uAADD\uAAE0-\uAAEA\uAAF2-\uAAF4\uAB01-\uAB06\uAB09-\uAB0E\uAB11-\uAB16\uAB20-\uAB26\uAB28-\uAB2E\uAB30-\uAB5A\uAB5C-\uAB69\uAB70-\uABE2\uABF0-\uABF9\uAC00-\uD7A3\uD7B0-\uD7C6\uD7CB-\uD7FB\uF900-\uFA6D\uFA70-\uFAD9\uFB00-\uFB06\uFB13-\uFB17\uFB1D\uFB1F-\uFB28\uFB2A-\uFB36\uFB38-\uFB3C\uFB3E\uFB40\uFB41\uFB43\uFB44\uFB46-\uFBB1\uFBD3-\uFD3D\uFD50-\uFD8F\uFD92-\uFDC7\uFDF0-\uFDFB\uFE70-\uFE74\uFE76-\uFEFC\uFF10-\uFF19\uFF21-\uFF3A\uFF41-\uFF5A\uFF66-\uFFBE\uFFC2-\uFFC7\uFFCA-\uFFCF\uFFD2-\uFFD7\uFFDA-\uFFDC]|\uD800[\uDC00-\uDC0B\uDC0D-\uDC26\uDC28-\uDC3A\uDC3C\uDC3D\uDC3F-\uDC4D\uDC50-\uDC5D\uDC80-\uDCFA\uDD07-\uDD33\uDD40-\uDD78\uDD8A\uDD8B\uDE80-\uDE9C\uDEA0-\uDED0\uDEE1-\uDEFB\uDF00-\uDF23\uDF2D-\uDF4A\uDF50-\uDF75\uDF80-\uDF9D\uDFA0-\uDFC3\uDFC8-\uDFCF\uDFD1-\uDFD5]|\uD801[\uDC00-\uDC9D\uDCA0-\uDCA9\uDCB0-\uDCD3\uDCD8-\uDCFB\uDD00-\uDD27\uDD30-\uDD63\uDE00-\uDF36\uDF40-\uDF55\uDF60-\uDF67]|\uD802[\uDC00-\uDC05\uDC08\uDC0A-\uDC35\uDC37\uDC38\uDC3C\uDC3F-\uDC55\uDC58-\uDC76\uDC79-\uDC9E\uDCA7-\uDCAF\uDCE0-\uDCF2\uDCF4\uDCF5\uDCFB-\uDD1B\uDD20-\uDD39\uDD80-\uDDB7\uDDBC-\uDDCF\uDDD2-\uDE00\uDE10-\uDE13\uDE15-\uDE17\uDE19-\uDE35\uDE40-\uDE48\uDE60-\uDE7E\uDE80-\uDE9F\uDEC0-\uDEC7\uDEC9-\uDEE4\uDEEB-\uDEEF\uDF00-\uDF35\uDF40-\uDF55\uDF58-\uDF72\uDF78-\uDF91\uDFA9-\uDFAF]|\uD803[\uDC00-\uDC48\uDC80-\uDCB2\uDCC0-\uDCF2\uDCFA-\uDD23\uDD30-\uDD39\uDE60-\uDE7E\uDE80-\uDEA9\uDEB0\uDEB1\uDF00-\uDF27\uDF30-\uDF45\uDF51-\uDF54\uDFB0-\uDFCB\uDFE0-\uDFF6]|\uD804[\uDC03-\uDC37\uDC52-\uDC6F\uDC83-\uDCAF\uDCD0-\uDCE8\uDCF0-\uDCF9\uDD03-\uDD26\uDD36-\uDD3F\uDD44\uDD47\uDD50-\uDD72\uDD76\uDD83-\uDDB2\uDDC1-\uDDC4\uDDD0-\uDDDA\uDDDC\uDDE1-\uDDF4\uDE00-\uDE11\uDE13-\uDE2B\uDE80-\uDE86\uDE88\uDE8A-\uDE8D\uDE8F-\uDE9D\uDE9F-\uDEA8\uDEB0-\uDEDE\uDEF0-\uDEF9\uDF05-\uDF0C\uDF0F\uDF10\uDF13-\uDF28\uDF2A-\uDF30\uDF32\uDF33\uDF35-\uDF39\uDF3D\uDF50\uDF5D-\uDF61]|\uD805[\uDC00-\uDC34\uDC47-\uDC4A\uDC50-\uDC59\uDC5F-\uDC61\uDC80-\uDCAF\uDCC4\uDCC5\uDCC7\uDCD0-\uDCD9\uDD80-\uDDAE\uDDD8-\uDDDB\uDE00-\uDE2F\uDE44\uDE50-\uDE59\uDE80-\uDEAA\uDEB8\uDEC0-\uDEC9\uDF00-\uDF1A\uDF30-\uDF3B]|\uD806[\uDC00-\uDC2B\uDCA0-\uDCF2\uDCFF-\uDD06\uDD09\uDD0C-\uDD13\uDD15\uDD16\uDD18-\uDD2F\uDD3F\uDD41\uDD50-\uDD59\uDDA0-\uDDA7\uDDAA-\uDDD0\uDDE1\uDDE3\uDE00\uDE0B-\uDE32\uDE3A\uDE50\uDE5C-\uDE89\uDE9D\uDEC0-\uDEF8]|\uD807[\uDC00-\uDC08\uDC0A-\uDC2E\uDC40\uDC50-\uDC6C\uDC72-\uDC8F\uDD00-\uDD06\uDD08\uDD09\uDD0B-\uDD30\uDD46\uDD50-\uDD59\uDD60-\uDD65\uDD67\uDD68\uDD6A-\uDD89\uDD98\uDDA0-\uDDA9\uDEE0-\uDEF2\uDFB0\uDFC0-\uDFD4]|\uD808[\uDC00-\uDF99]|\uD809[\uDC00-\uDC6E\uDC80-\uDD43]|[\uD80C\uD81C-\uD820\uD822\uD840-\uD868\uD86A-\uD86C\uD86F-\uD872\uD874-\uD879\uD880-\uD883][\uDC00-\uDFFF]|\uD80D[\uDC00-\uDC2E]|\uD811[\uDC00-\uDE46]|\uD81A[\uDC00-\uDE38\uDE40-\uDE5E\uDE60-\uDE69\uDED0-\uDEED\uDF00-\uDF2F\uDF40-\uDF43\uDF50-\uDF59\uDF5B-\uDF61\uDF63-\uDF77\uDF7D-\uDF8F]|\uD81B[\uDE40-\uDE96\uDF00-\uDF4A\uDF50\uDF93-\uDF9F\uDFE0\uDFE1\uDFE3]|\uD821[\uDC00-\uDFF7]|\uD823[\uDC00-\uDCD5\uDD00-\uDD08]|\uD82C[\uDC00-\uDD1E\uDD50-\uDD52\uDD64-\uDD67\uDD70-\uDEFB]|\uD82F[\uDC00-\uDC6A\uDC70-\uDC7C\uDC80-\uDC88\uDC90-\uDC99]|\uD834[\uDEE0-\uDEF3\uDF60-\uDF78]|\uD835[\uDC00-\uDC54\uDC56-\uDC9C\uDC9E\uDC9F\uDCA2\uDCA5\uDCA6\uDCA9-\uDCAC\uDCAE-\uDCB9\uDCBB\uDCBD-\uDCC3\uDCC5-\uDD05\uDD07-\uDD0A\uDD0D-\uDD14\uDD16-\uDD1C\uDD1E-\uDD39\uDD3B-\uDD3E\uDD40-\uDD44\uDD46\uDD4A-\uDD50\uDD52-\uDEA5\uDEA8-\uDEC0\uDEC2-\uDEDA\uDEDC-\uDEFA\uDEFC-\uDF14\uDF16-\uDF34\uDF36-\uDF4E\uDF50-\uDF6E\uDF70-\uDF88\uDF8A-\uDFA8\uDFAA-\uDFC2\uDFC4-\uDFCB\uDFCE-\uDFFF]|\uD838[\uDD00-\uDD2C\uDD37-\uDD3D\uDD40-\uDD49\uDD4E\uDEC0-\uDEEB\uDEF0-\uDEF9]|\uD83A[\uDC00-\uDCC4\uDCC7-\uDCCF\uDD00-\uDD43\uDD4B\uDD50-\uDD59]|\uD83B[\uDC71-\uDCAB\uDCAD-\uDCAF\uDCB1-\uDCB4\uDD01-\uDD2D\uDD2F-\uDD3D\uDE00-\uDE03\uDE05-\uDE1F\uDE21\uDE22\uDE24\uDE27\uDE29-\uDE32\uDE34-\uDE37\uDE39\uDE3B\uDE42\uDE47\uDE49\uDE4B\uDE4D-\uDE4F\uDE51\uDE52\uDE54\uDE57\uDE59\uDE5B\uDE5D\uDE5F\uDE61\uDE62\uDE64\uDE67-\uDE6A\uDE6C-\uDE72\uDE74-\uDE77\uDE79-\uDE7C\uDE7E\uDE80-\uDE89\uDE8B-\uDE9B\uDEA1-\uDEA3\uDEA5-\uDEA9\uDEAB-\uDEBB]|\uD83C[\uDD00-\uDD0C]|\uD83E[\uDFF0-\uDFF9]|\uD869[\uDC00-\uDEDD\uDF00-\uDFFF]|\uD86D[\uDC00-\uDF34\uDF40-\uDFFF]|\uD86E[\uDC00-\uDC1D\uDC20-\uDFFF]|\uD873[\uDC00-\uDEA1\uDEB0-\uDFFF]|\uD87A[\uDC00-\uDFE0]|\uD87E[\uDC00-\uDE1D]|\uD884[\uDC00-\uDF4A])(?:[\u0300-\u036F\u0483-\u0487\u0591-\u05BD\u05BF\u05C1\u05C2\u05C4\u05C5\u05C7\u0610-\u061A\u064B-\u065F\u0670\u06D6-\u06DC\u06DF-\u06E4\u06E7\u06E8\u06EA-\u06ED\u0711\u0730-\u074A\u07A6-\u07B0\u07EB-\u07F3\u07FD\u0816-\u0819\u081B-\u0823\u0825-\u0827\u0829-\u082D\u0859-\u085B\u08D3-\u08E1\u08E3-\u0902\u093A\u093C\u0941-\u0948\u094D\u0951-\u0957\u0962\u0963\u0981\u09BC\u09C1-\u09C4\u09CD\u09E2\u09E3\u09FE\u0A01\u0A02\u0A3C\u0A41\u0A42\u0A47\u0A48\u0A4B-\u0A4D\u0A51\u0A70\u0A71\u0A75\u0A81\u0A82\u0ABC\u0AC1-\u0AC5\u0AC7\u0AC8\u0ACD\u0AE2\u0AE3\u0AFA-\u0AFF\u0B01\u0B3C\u0B3F\u0B41-\u0B44\u0B4D\u0B55\u0B56\u0B62\u0B63\u0B82\u0BC0\u0BCD\u0C00\u0C04\u0C3E-\u0C40\u0C46-\u0C48\u0C4A-\u0C4D\u0C55\u0C56\u0C62\u0C63\u0C81\u0CBC\u0CBF\u0CC6\u0CCC\u0CCD\u0CE2\u0CE3\u0D00\u0D01\u0D3B\u0D3C\u0D41-\u0D44\u0D4D\u0D62\u0D63\u0D81\u0DCA\u0DD2-\u0DD4\u0DD6\u0E31\u0E34-\u0E3A\u0E47-\u0E4E\u0EB1\u0EB4-\u0EBC\u0EC8-\u0ECD\u0F18\u0F19\u0F35\u0F37\u0F39\u0F71-\u0F7E\u0F80-\u0F84\u0F86\u0F87\u0F8D-\u0F97\u0F99-\u0FBC\u0FC6\u102D-\u1030\u1032-\u1037\u1039\u103A\u103D\u103E\u1058\u1059\u105E-\u1060\u1071-\u1074\u1082\u1085\u1086\u108D\u109D\u135D-\u135F\u1712-\u1714\u1732-\u1734\u1752\u1753\u1772\u1773\u17B4\u17B5\u17B7-\u17BD\u17C6\u17C9-\u17D3\u17DD\u180B-\u180D\u1885\u1886\u18A9\u1920-\u1922\u1927\u1928\u1932\u1939-\u193B\u1A17\u1A18\u1A1B\u1A56\u1A58-\u1A5E\u1A60\u1A62\u1A65-\u1A6C\u1A73-\u1A7C\u1A7F\u1AB0-\u1ABD\u1ABF\u1AC0\u1B00-\u1B03\u1B34\u1B36-\u1B3A\u1B3C\u1B42\u1B6B-\u1B73\u1B80\u1B81\u1BA2-\u1BA5\u1BA8\u1BA9\u1BAB-\u1BAD\u1BE6\u1BE8\u1BE9\u1BED\u1BEF-\u1BF1\u1C2C-\u1C33\u1C36\u1C37\u1CD0-\u1CD2\u1CD4-\u1CE0\u1CE2-\u1CE8\u1CED\u1CF4\u1CF8\u1CF9\u1DC0-\u1DF9\u1DFB-\u1DFF\u20D0-\u20DC\u20E1\u20E5-\u20F0\u2CEF-\u2CF1\u2D7F\u2DE0-\u2DFF\u302A-\u302D\u3099\u309A\uA66F\uA674-\uA67D\uA69E\uA69F\uA6F0\uA6F1\uA802\uA806\uA80B\uA825\uA826\uA82C\uA8C4\uA8C5\uA8E0-\uA8F1\uA8FF\uA926-\uA92D\uA947-\uA951\uA980-\uA982\uA9B3\uA9B6-\uA9B9\uA9BC\uA9BD\uA9E5\uAA29-\uAA2E\uAA31\uAA32\uAA35\uAA36\uAA43\uAA4C\uAA7C\uAAB0\uAAB2-\uAAB4\uAAB7\uAAB8\uAABE\uAABF\uAAC1\uAAEC\uAAED\uAAF6\uABE5\uABE8\uABED\uFB1E\uFE00-\uFE0F\uFE20-\uFE2F]|\uD800[\uDDFD\uDEE0\uDF76-\uDF7A]|\uD802[\uDE01-\uDE03\uDE05\uDE06\uDE0C-\uDE0F\uDE38-\uDE3A\uDE3F\uDEE5\uDEE6]|\uD803[\uDD24-\uDD27\uDEAB\uDEAC\uDF46-\uDF50]|\uD804[\uDC01\uDC38-\uDC46\uDC7F-\uDC81\uDCB3-\uDCB6\uDCB9\uDCBA\uDD00-\uDD02\uDD27-\uDD2B\uDD2D-\uDD34\uDD73\uDD80\uDD81\uDDB6-\uDDBE\uDDC9-\uDDCC\uDDCF\uDE2F-\uDE31\uDE34\uDE36\uDE37\uDE3E\uDEDF\uDEE3-\uDEEA\uDF00\uDF01\uDF3B\uDF3C\uDF40\uDF66-\uDF6C\uDF70-\uDF74]|\uD805[\uDC38-\uDC3F\uDC42-\uDC44\uDC46\uDC5E\uDCB3-\uDCB8\uDCBA\uDCBF\uDCC0\uDCC2\uDCC3\uDDB2-\uDDB5\uDDBC\uDDBD\uDDBF\uDDC0\uDDDC\uDDDD\uDE33-\uDE3A\uDE3D\uDE3F\uDE40\uDEAB\uDEAD\uDEB0-\uDEB5\uDEB7\uDF1D-\uDF1F\uDF22-\uDF25\uDF27-\uDF2B]|\uD806[\uDC2F-\uDC37\uDC39\uDC3A\uDD3B\uDD3C\uDD3E\uDD43\uDDD4-\uDDD7\uDDDA\uDDDB\uDDE0\uDE01-\uDE0A\uDE33-\uDE38\uDE3B-\uDE3E\uDE47\uDE51-\uDE56\uDE59-\uDE5B\uDE8A-\uDE96\uDE98\uDE99]|\uD807[\uDC30-\uDC36\uDC38-\uDC3D\uDC3F\uDC92-\uDCA7\uDCAA-\uDCB0\uDCB2\uDCB3\uDCB5\uDCB6\uDD31-\uDD36\uDD3A\uDD3C\uDD3D\uDD3F-\uDD45\uDD47\uDD90\uDD91\uDD95\uDD97\uDEF3\uDEF4]|\uD81A[\uDEF0-\uDEF4\uDF30-\uDF36]|\uD81B[\uDF4F\uDF8F-\uDF92\uDFE4]|\uD82F[\uDC9D\uDC9E]|\uD834[\uDD67-\uDD69\uDD7B-\uDD82\uDD85-\uDD8B\uDDAA-\uDDAD\uDE42-\uDE44]|\uD836[\uDE00-\uDE36\uDE3B-\uDE6C\uDE75\uDE84\uDE9B-\uDE9F\uDEA1-\uDEAF]|\uD838[\uDC00-\uDC06\uDC08-\uDC18\uDC1B-\uDC21\uDC23\uDC24\uDC26-\uDC2A\uDD30-\uDD36\uDEEC-\uDEEF]|\uD83A[\uDCD0-\uDCD6\uDD44-\uDD4A]|\uDB40[\uDD00-\uDDEF])*(?:[ \xA0\u1680\u2000-\u200A\u202F\u205F\u3000]*(?:[!-#%-\*,-\/:;\?@\[-\]_\{\}\xA1\xA7\xAB\xB6\xB7\xBB\xBF\u037E\u0387\u055A-\u055F\u0589\u058A\u05BE\u05C0\u05C3\u05C6\u05F3\u05F4\u0609\u060A\u060C\u060D\u061B\u061E\u061F\u066A-\u066D\u06D4\u0700-\u070D\u07F7-\u07F9\u0830-\u083E\u085E\u0964\u0965\u0970\u09FD\u0A76\u0AF0\u0C77\u0C84\u0DF4\u0E4F\u0E5A\u0E5B\u0F04-\u0F12\u0F14\u0F3A-\u0F3D\u0F85\u0FD0-\u0FD4\u0FD9\u0FDA\u104A-\u104F\u10FB\u1360-\u1368\u1400\u166E\u169B\u169C\u16EB-\u16ED\u1735\u1736\u17D4-\u17D6\u17D8-\u17DA\u1800-\u180A\u1944\u1945\u1A1E\u1A1F\u1AA0-\u1AA6\u1AA8-\u1AAD\u1B5A-\u1B60\u1BFC-\u1BFF\u1C3B-\u1C3F\u1C7E\u1C7F\u1CC0-\u1CC7\u1CD3\u2010-\u2027\u2030-\u2043\u2045-\u2051\u2053-\u205E\u207D\u207E\u208D\u208E\u2308-\u230B\u2329\u232A\u2768-\u2775\u27C5\u27C6\u27E6-\u27EF\u2983-\u2998\u29D8-\u29DB\u29FC\u29FD\u2CF9-\u2CFC\u2CFE\u2CFF\u2D70\u2E00-\u2E2E\u2E30-\u2E4F\u2E52\u3001-\u3003\u3008-\u3011\u3014-\u301F\u3030\u303D\u30A0\u30FB\uA4FE\uA4FF\uA60D-\uA60F\uA673\uA67E\uA6F2-\uA6F7\uA874-\uA877\uA8CE\uA8CF\uA8F8-\uA8FA\uA8FC\uA92E\uA92F\uA95F\uA9C1-\uA9CD\uA9DE\uA9DF\uAA5C-\uAA5F\uAADE\uAADF\uAAF0\uAAF1\uABEB\uFD3E\uFD3F\uFE10-\uFE19\uFE30-\uFE52\uFE54-\uFE61\uFE63\uFE68\uFE6A\uFE6B\uFF01-\uFF03\uFF05-\uFF0A\uFF0C-\uFF0F\uFF1A\uFF1B\uFF1F\uFF20\uFF3B-\uFF3D\uFF3F\uFF5B\uFF5D\uFF5F-\uFF65]|\uD800[\uDD00-\uDD02\uDF9F\uDFD0]|\uD801\uDD6F|\uD802[\uDC57\uDD1F\uDD3F\uDE50-\uDE58\uDE7F\uDEF0-\uDEF6\uDF39-\uDF3F\uDF99-\uDF9C]|\uD803[\uDEAD\uDF55-\uDF59]|\uD804[\uDC47-\uDC4D\uDCBB\uDCBC\uDCBE-\uDCC1\uDD40-\uDD43\uDD74\uDD75\uDDC5-\uDDC8\uDDCD\uDDDB\uDDDD-\uDDDF\uDE38-\uDE3D\uDEA9]|\uD805[\uDC4B-\uDC4F\uDC5A\uDC5B\uDC5D\uDCC6\uDDC1-\uDDD7\uDE41-\uDE43\uDE60-\uDE6C\uDF3C-\uDF3E]|\uD806[\uDC3B\uDD44-\uDD46\uDDE2\uDE3F-\uDE46\uDE9A-\uDE9C\uDE9E-\uDEA2]|\uD807[\uDC41-\uDC45\uDC70\uDC71\uDEF7\uDEF8\uDFFF]|\uD809[\uDC70-\uDC74]|\uD81A[\uDE6E\uDE6F\uDEF5\uDF37-\uDF3B\uDF44]|\uD81B[\uDE97-\uDE9A\uDFE2]|\uD82F\uDC9F|\uD836[\uDE87-\uDE8B]|\uD83A[\uDD5E\uDD5F])(?:[\u0300-\u036F\u0483-\u0487\u0591-\u05BD\u05BF\u05C1\u05C2\u05C4\u05C5\u05C7\u0610-\u061A\u064B-\u065F\u0670\u06D6-\u06DC\u06DF-\u06E4\u06E7\u06E8\u06EA-\u06ED\u0711\u0730-\u074A\u07A6-\u07B0\u07EB-\u07F3\u07FD\u0816-\u0819\u081B-\u0823\u0825-\u0827\u0829-\u082D\u0859-\u085B\u08D3-\u08E1\u08E3-\u0902\u093A\u093C\u0941-\u0948\u094D\u0951-\u0957\u0962\u0963\u0981\u09BC\u09C1-\u09C4\u09CD\u09E2\u09E3\u09FE\u0A01\u0A02\u0A3C\u0A41\u0A42\u0A47\u0A48\u0A4B-\u0A4D\u0A51\u0A70\u0A71\u0A75\u0A81\u0A82\u0ABC\u0AC1-\u0AC5\u0AC7\u0AC8\u0ACD\u0AE2\u0AE3\u0AFA-\u0AFF\u0B01\u0B3C\u0B3F\u0B41-\u0B44\u0B4D\u0B55\u0B56\u0B62\u0B63\u0B82\u0BC0\u0BCD\u0C00\u0C04\u0C3E-\u0C40\u0C46-\u0C48\u0C4A-\u0C4D\u0C55\u0C56\u0C62\u0C63\u0C81\u0CBC\u0CBF\u0CC6\u0CCC\u0CCD\u0CE2\u0CE3\u0D00\u0D01\u0D3B\u0D3C\u0D41-\u0D44\u0D4D\u0D62\u0D63\u0D81\u0DCA\u0DD2-\u0DD4\u0DD6\u0E31\u0E34-\u0E3A\u0E47-\u0E4E\u0EB1\u0EB4-\u0EBC\u0EC8-\u0ECD\u0F18\u0F19\u0F35\u0F37\u0F39\u0F71-\u0F7E\u0F80-\u0F84\u0F86\u0F87\u0F8D-\u0F97\u0F99-\u0FBC\u0FC6\u102D-\u1030\u1032-\u1037\u1039\u103A\u103D\u103E\u1058\u1059\u105E-\u1060\u1071-\u1074\u1082\u1085\u1086\u108D\u109D\u135D-\u135F\u1712-\u1714\u1732-\u1734\u1752\u1753\u1772\u1773\u17B4\u17B5\u17B7-\u17BD\u17C6\u17C9-\u17D3\u17DD\u180B-\u180D\u1885\u1886\u18A9\u1920-\u1922\u1927\u1928\u1932\u1939-\u193B\u1A17\u1A18\u1A1B\u1A56\u1A58-\u1A5E\u1A60\u1A62\u1A65-\u1A6C\u1A73-\u1A7C\u1A7F\u1AB0-\u1ABD\u1ABF\u1AC0\u1B00-\u1B03\u1B34\u1B36-\u1B3A\u1B3C\u1B42\u1B6B-\u1B73\u1B80\u1B81\u1BA2-\u1BA5\u1BA8\u1BA9\u1BAB-\u1BAD\u1BE6\u1BE8\u1BE9\u1BED\u1BEF-\u1BF1\u1C2C-\u1C33\u1C36\u1C37\u1CD0-\u1CD2\u1CD4-\u1CE0\u1CE2-\u1CE8\u1CED\u1CF4\u1CF8\u1CF9\u1DC0-\u1DF9\u1DFB-\u1DFF\u20D0-\u20DC\u20E1\u20E5-\u20F0\u2CEF-\u2CF1\u2D7F\u2DE0-\u2DFF\u302A-\u302D\u3099\u309A\uA66F\uA674-\uA67D\uA69E\uA69F\uA6F0\uA6F1\uA802\uA806\uA80B\uA825\uA826\uA82C\uA8C4\uA8C5\uA8E0-\uA8F1\uA8FF\uA926-\uA92D\uA947-\uA951\uA980-\uA982\uA9B3\uA9B6-\uA9B9\uA9BC\uA9BD\uA9E5\uAA29-\uAA2E\uAA31\uAA32\uAA35\uAA36\uAA43\uAA4C\uAA7C\uAAB0\uAAB2-\uAAB4\uAAB7\uAAB8\uAABE\uAABF\uAAC1\uAAEC\uAAED\uAAF6\uABE5\uABE8\uABED\uFB1E\uFE00-\uFE0F\uFE20-\uFE2F]|\uD800[\uDDFD\uDEE0\uDF76-\uDF7A]|\uD802[\uDE01-\uDE03\uDE05\uDE06\uDE0C-\uDE0F\uDE38-\uDE3A\uDE3F\uDEE5\uDEE6]|\uD803[\uDD24-\uDD27\uDEAB\uDEAC\uDF46-\uDF50]|\uD804[\uDC01\uDC38-\uDC46\uDC7F-\uDC81\uDCB3-\uDCB6\uDCB9\uDCBA\uDD00-\uDD02\uDD27-\uDD2B\uDD2D-\uDD34\uDD73\uDD80\uDD81\uDDB6-\uDDBE\uDDC9-\uDDCC\uDDCF\uDE2F-\uDE31\uDE34\uDE36\uDE37\uDE3E\uDEDF\uDEE3-\uDEEA\uDF00\uDF01\uDF3B\uDF3C\uDF40\uDF66-\uDF6C\uDF70-\uDF74]|\uD805[\uDC38-\uDC3F\uDC42-\uDC44\uDC46\uDC5E\uDCB3-\uDCB8\uDCBA\uDCBF\uDCC0\uDCC2\uDCC3\uDDB2-\uDDB5\uDDBC\uDDBD\uDDBF\uDDC0\uDDDC\uDDDD\uDE33-\uDE3A\uDE3D\uDE3F\uDE40\uDEAB\uDEAD\uDEB0-\uDEB5\uDEB7\uDF1D-\uDF1F\uDF22-\uDF25\uDF27-\uDF2B]|\uD806[\uDC2F-\uDC37\uDC39\uDC3A\uDD3B\uDD3C\uDD3E\uDD43\uDDD4-\uDDD7\uDDDA\uDDDB\uDDE0\uDE01-\uDE0A\uDE33-\uDE38\uDE3B-\uDE3E\uDE47\uDE51-\uDE56\uDE59-\uDE5B\uDE8A-\uDE96\uDE98\uDE99]|\uD807[\uDC30-\uDC36\uDC38-\uDC3D\uDC3F\uDC92-\uDCA7\uDCAA-\uDCB0\uDCB2\uDCB3\uDCB5\uDCB6\uDD31-\uDD36\uDD3A\uDD3C\uDD3D\uDD3F-\uDD45\uDD47\uDD90\uDD91\uDD95\uDD97\uDEF3\uDEF4]|\uD81A[\uDEF0-\uDEF4\uDF30-\uDF36]|\uD81B[\uDF4F\uDF8F-\uDF92\uDFE4]|\uD82F[\uDC9D\uDC9E]|\uD834[\uDD67-\uDD69\uDD7B-\uDD82\uDD85-\uDD8B\uDDAA-\uDDAD\uDE42-\uDE44]|\uD836[\uDE00-\uDE36\uDE3B-\uDE6C\uDE75\uDE84\uDE9B-\uDE9F\uDEA1-\uDEAF]|\uD838[\uDC00-\uDC06\uDC08-\uDC18\uDC1B-\uDC21\uDC23\uDC24\uDC26-\uDC2A\uDD30-\uDD36\uDEEC-\uDEEF]|\uD83A[\uDCD0-\uDCD6\uDD44-\uDD4A]|\uDB40[\uDD00-\uDDEF])*)*/,U={};function V(t){return JSON.parse(t)}function z(t){var e=t.match(/^([^#]*)/);return e?e[1]:t}var H=window.location.href;function G(t){H=t}var W,X=window.location.href;function j(t){X=t}function K(t,e){if(/^data:/i.test(e))return t||e;if(!e||t.match(/^\w{2,}:/))return t.toLowerCase().match("^javascript:")?"#":(t.match(/^\w{2,}:\/\/[^\/]+$/)&&(t+="/"),t);var n;if(e.match(/^\w{2,}:\/\/[^\/]+$/)&&(e+="/"),t.match(/^\/\//))return(n=e.match(/^(\w{2,}:)\/\//))?n[1]+t:t;if(t.match(/^\//))return(n=e.match(/^(\w{2,}:\/\/[^\/]+)\//))?n[1]+t:t;if(t.match(/^\.(\/|$)/)&&(t=t.substr(2)),e=function(t){var e=t.match(/^([^#?]*)/);return e?e[1]:t}(e),t.match(/^#/))return e+t;var i=e.lastIndexOf("/");if(i<0)return t;if(i<e.length-1&&e.lastIndexOf(".")<i){if(""==t)return e;i=(e+="/").length-1}var r=e.substr(0,i+1)+t,o="";for((n=r.match(/^([^?#]*)([?#].*)$/))&&(r=n[1],o=n[2]);!((i=r.indexOf("/../"))<=0);){var a=r.lastIndexOf("/",i-1);if(a<=0)break;r=r.substr(0,a)+r.substr(i+3)}return r.replace(/\/(\.\/)+/g,"/")+o}function $(t){var e;return(e=/^(https?:)\/\/github\.com\/([^/]+\/[^/]+)\/(blob\/|tree\/|raw\/)?(.*)$/.exec(t))?t=e[1]+"//raw.githubusercontent.com/"+e[2]+"/"+(e[3]?"":"master/")+e[4]:(e=/^(https?:)\/\/www\.aozora\.gr\.jp\/(cards\/[^/]+\/files\/[^/.]+\.html)$/.exec(t))?t=e[1]+"//raw.githubusercontent.com/aozorabunko/aozorabunko/master/"+e[2]:(e=/^(https?:)\/\/gist\.github\.com\/([^/]+\/\w+)(\/|$)(raw(\/|$))?(.*)$/.exec(t))?t=e[1]+"//gist.githubusercontent.com/"+e[2]+"/raw/"+e[6]:(e=/^(https?:)\/\/(?:[^/.]+\.)?jsbin\.com\/(?!(?:blog|help)\b)(\w+)((\/\d+)?).*$/.exec(t))&&(t=e[1]+"//output.jsbin.com/"+e[2]+e[3]+"/"),t}function q(t){return null==t?t:t.toString()}!function(t){t.epub="http://www.idpf.org/2007/ops",t.EV="http://www.w3.org/2001/xml-events",t.MATHML="http://www.w3.org/1998/Math/MathML",t.XML="http://www.w3.org/XML/1998/namespace",t.XHTML="http://www.w3.org/1999/xhtml",t.XLINK="http://www.w3.org/1999/xlink",t.SHADOW="http://www.pyroxy.com/ns/shadow",t.SVG="http://www.w3.org/2000/svg",t.DC="http://purl.org/dc/elements/1.1/",t.NCX="http://www.daisy.org/z3986/2005/ncx/"}(W||(W={}));var Y=function(){function t(){this.queue=[null]}var e=t.prototype;return e.length=function(){return this.queue.length-1},e.add=function(t){for(var e=this.queue.length;e>1;){var n=Math.floor(e/2),i=this.queue[n];if(i.compare(t)>0)return void(this.queue[e]=t);this.queue[e]=i,e=n}this.queue[1]=t},e.peek=function(){return this.queue[1]},e.remove=function(){var t=this.queue[1],e=this.queue.pop(),n=this.queue.length;if(n>1){for(var i=1;;){var r=2*i;if(r>=n)break;if(this.queue[r].compare(e)>0)r+1<n&&this.queue[r+1].compare(this.queue[r])>0&&r++;else{if(!(r+1<n&&this.queue[r+1].compare(e)>0))break;r++}this.queue[i]=this.queue[r],i=r}this.queue[i]=e}return t},t}(),Z=["","-webkit-","-moz-","-ms-","-o-","-epub-"],Q={};function J(t,e){if("writing-mode"===e){var n=document.createElement("span");return"-ms-"===t?(n.style.setProperty(t+e,"tb-rl"),"tb-rl"===n.style["writing-mode"]):(n.style.setProperty(t+e,"vertical-rl"),"vertical-rl"===n.style[t+e])}return"string"==typeof document.documentElement.style[function(t,e){return t&&(e="-"+e,"moz"===(t=t.replace(/-/g,""))&&(t="Moz")),t+e.replace(/-[a-z]/g,(function(t){return t.substr(1).toUpperCase()}))}(t,e)]}function tt(t){var e=Q[t];if(e||null===e)return e;switch(t){case"text-combine-upright":if(J("-webkit-","text-combine")&&!J("","text-combine-upright"))return Q[t]=["-webkit-text-combine"],["-webkit-text-combine"];break;case"writing-mode":if(J("-ms-","writing-mode"))return Q[t]=["-ms-writing-mode"],["-ms-writing-mode"];break;case"filter":if(J("-webkit-","filter"))return Q[t]=["-webkit-filter"],["-webkit-filter"];break;case"clip-path":if(J("-webkit-","clip-path"))return Q[t]=["-webkit-clip-path","clip-path"];break;case"margin-inline-start":if(J("-webkit-","margin-start"))return Q[t]=["-webkit-margin-start"],["-webkit-margin-start"];break;case"margin-inline-end":if(J("-webkit-","margin-end"))return Q[t]=["-webkit-margin-end"],["-webkit-margin-end"];break;case"padding-inline-start":if(J("-webkit-","padding-start"))return Q[t]=["-webkit-padding-start"],["-webkit-padding-start"];break;case"padding-inline-end":if(J("-webkit-","padding-end"))return Q[t]=["-webkit-padding-end"],["-webkit-padding-end"]}for(var n,i=_(Z);!(n=i()).done;){var r=n.value;if(J(r,t))return Q[t]=[e=r+t],[e]}return f.warn("Property not supported by the browser: ",t),Q[t]=null,null}function et(t,e,n){try{var i=tt(e);if(!i)return;i.forEach((function(e){if("-ms-writing-mode"===e)switch(n){case"horizontal-tb":n="lr-tb";break;case"vertical-rl":n="tb-rl";break;case"vertical-lr":n="tb-lr"}else if("-webkit-text-combine"===e)switch(n){case"all":n="horizontal"}t&&t.style&&t.style.setProperty(e,n)}))}catch(t){f.warn(t)}}function nt(t,e,n){try{var i=Q[e];return t.style.getPropertyValue(i?i[0]:e)}catch(t){}return n||""}function it(t){var e=t.getAttributeNS(W.XML,"lang");return e||t.namespaceURI!=W.XHTML||(e=t.getAttribute("lang")),e}var rt=function(){function t(){this.list=[]}var e=t.prototype;return e.append=function(t){return this.list.push(t),this},e.clear=function(){this.list=[]},e.toString=function(){var t=this.list.join("");return this.list=[t],t},t}();function ot(t){return"\\"+t.charCodeAt(0).toString(16)+" "}function at(t){return t.replace(/[^-_a-zA-Z0-9\u0080-\uFFFF]/g,ot)}function st(t){return t.replace(/[\u0000-\u001F"\\]/g,ot)}function ut(t){return t.replace(/[\s+&?=#\u007F-\uFFFF]+/g,encodeURIComponent)}function lt(t){return!!t.match(/^[a-zA-Z\u009E\u009F\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u024F\u037B-\u037D\u0386\u0388-\u0482\u048A-\u0527]$/)}function ct(t,e){return t.replace(/[^-a-zA-Z0-9_]/g,(function(t){return function(t,e){return(e="string"==typeof e?e:"\\u")+(65536|t.charCodeAt(0)).toString(16).substr(1)}(t,e)}))}function ht(t){return ct(t)}function ft(t,e){for(var n=0,i=t;;){if(0==n||e(n-1),i==t||e(i),n==i)return n;var r=n+i>>1;e(r)?i=r:n=r+1}}function dt(t,e){return t-e}function pt(t,e){for(var n,i={},r=_(t);!(n=r()).done;){var o=n.value,a=e(o);a&&!i[a]&&(i[a]=o)}return i}function gt(t,e){for(var n,i={},r=_(t);!(n=r()).done;){var o=n.value,a=e(o);a&&(i[a]?i[a].push(o):i[a]=[o])}return i}var mt=function(){function t(){this.listeners={}}var e=t.prototype;return e.dispatchEvent=function(t){var e=this.listeners[t.type];if(e){t.target=this,t.currentTarget=this;for(var n=0;n<e.length;n++)e[n](t)}},e.addEventListener=function(t,e,n){if(!n){var i=this.listeners[t];i?i.push(e):this.listeners[t]=[e]}},e.removeEventListener=function(t,e,n){if(!n){var i=this.listeners[t];if(i){var r=i.indexOf(e);r>=0&&i.splice(r,1)}}},t}(),vt=null,Et=null,bt=null,Ct=null;function yt(t){if(1==t.nodeType){var e=t.getAttribute("id");if(e)return e}return null}function wt(t){return"^"+t}function Dt(t){return t.replace(/[\[\]\(\),=;^]/g,wt)}function St(t){return t.substr(1)}function Nt(t){return t?t.replace(/\^[\[\]\(\),=;^]/g,St):t}function Tt(t){var e=[];do{var n=t.match(/^(\^,|[^,])*/),i=Nt(n[0]);if(!(t=t.substr(n[0].length+1))&&!e.length)return i;e.push(i)}while(t);return e}function At(t){for(var e={};t;){var n=t.match(/^;([^;=]+)=(([^;]|\^;)*)/);if(!n)return e;e[n[1]]=Tt(n[2]),t=t.substr(n[0].length)}return e}var xt=function(){function t(){}var e=t.prototype;return e.appendTo=function(t){t.append("!")},e.applyTo=function(t){return!1},t}(),It=function(){function t(t,e,n){this.index=t,this.id=e,this.sideBias=n}var e=t.prototype;return e.appendTo=function(t){t.append("/"),t.append(this.index.toString()),(this.id||this.sideBias)&&(t.append("["),this.id&&t.append(this.id),this.sideBias&&(t.append(";s="),t.append(this.sideBias)),t.append("]"))},e.applyTo=function(t){if(1!=t.node.nodeType)throw new Error("E_CFI_NOT_ELEMENT");var e,n=t.node,i=n.children,r=i.length,o=Math.floor(this.index/2)-1;if(o<0||0==r)t.node=(e=n.firstChild)||n;else{if(e=i[Math.min(o,r-1)],1&this.index){var a=e.nextSibling;a&&1!=a.nodeType?e=a:t.after=!0}t.node=e}if(this.id&&(t.after||this.id!=yt(t.node)))throw new Error("E_CFI_ID_MISMATCH");return t.sideBias=this.sideBias,!0},t}(),Ft=function(){function t(t,e,n,i){this.offset=t,this.textBefore=e,this.textAfter=n,this.sideBias=i}var e=t.prototype;return e.applyTo=function(t){if(this.offset>0&&!t.after){for(var e=this.offset,n=t.node;;){var i=n.nodeType;if(1==i)break;var r=n.nextSibling;if(3<=i&&i<=5){var o=n.textContent.length;if(e<=o)break;if(!r){e=o;break}e-=o}if(!r){e=0;break}n=r}t.node=n,t.offset=e}return t.sideBias=this.sideBias,!0},e.appendTo=function(t){t.append(":"),t.append(this.offset.toString()),(this.textBefore||this.textAfter||this.sideBias)&&(t.append("["),(this.textBefore||this.textAfter)&&(this.textBefore&&t.append(Dt(this.textBefore)),t.append(","),this.textAfter&&t.append(Dt(this.textAfter))),this.sideBias&&(t.append(";s="),t.append(this.sideBias)),t.append("]"))},t}(),Pt=function(){function t(){this.steps=null}var e=t.prototype;return e.fromString=function(t){var e=t.match(/^#?epubcfi\((.*)\)$/);if(!e)throw new Error("E_CFI_NOT_CFI");for(var n=decodeURIComponent(e[1]),i=0,r=[];;){var o=void 0;switch(n.charAt(i)){case"/":if(i++,!(e=n.substr(i).match(/^(0|[1-9][0-9]*)(\[(.*?)(;([^\]]|\^\])*)?\])?/)))throw new Error("E_CFI_NUMBER_EXPECTED");i+=e[0].length;var a=parseInt(e[1],10),s=e[3];o=At(e[4]),r.push(new It(a,s,q(o.s)));break;case":":if(i++,!(e=n.substr(i).match(/^(0|[1-9][0-9]*)(\[((([^\];,]|\^[\];,])*)(,(([^\];,]|\^[\];,])*))?)(;([^]]|\^\])*)?\])?/)))throw new Error("E_CFI_NUMBER_EXPECTED");i+=e[0].length;var u=parseInt(e[1],10),l=e[4];l&&(l=Nt(l));var c=e[7];c&&(c=Nt(c)),o=At(e[10]),r.push(new Ft(u,l,c,q(o.s)));break;case"!":i++,r.push(new xt);break;case"~":case"@":case"":return void(this.steps=r);default:throw new Error("E_CFI_PARSE_ERROR")}}},e.navigate=function(e){for(var n={node:e.documentElement,offset:0,after:!1,sideBias:null,ref:null},i=0;i<this.steps.length;i++)if(!this.steps[i].applyTo(n)){n.ref=new t,n.ref.steps=this.steps.slice(i+1);break}return n},e.trim=function(t,e){return t.replace(/\s+/g," ").match(e?/^[ -\uD7FF\uE000-\uFFFF]{0,8}/:/[ -\uD7FF\uE000-\uFFFF]{0,8}$/)[0].replace(/^\s/,"").replace(/\s$/,"")},e.prependPathFromNode=function(t,e,n,i){for(var r=[],o=t.parentNode,a="",s="";t;){switch(t.nodeType){case 3:case 4:case 5:var u=t.textContent,l=u.length;n?(e+=l,a||(a=u)):(e>l&&(e=l),n=!0,a=u.substr(0,e),s=u.substr(e)),t=t.previousSibling;continue;case 8:t=t.previousSibling;continue}break}for((e>0||a||s)&&(a=this.trim(a,!1),s=this.trim(s,!0),r.push(new Ft(e,a,s,i)),i=null);o&&o&&9!=o.nodeType;){for(var c=n?null:yt(t),h=n?1:0;t;)1==t.nodeType&&(h+=2),t=t.previousSibling;r.push(new It(h,c,i)),i=null,t=o,o=o.parentNode,n=!1}r.reverse(),this.steps?(r.push(new xt),this.steps=r.concat(this.steps)):this.steps=r},e.toString=function(){if(!this.steps)return"";var t=new rt;t.append("epubcfi(");for(var e=0;e<this.steps.length;e++)this.steps[e].appendTo(t);return t.append(")"),t.toString().replace(/%/g,"%25")},t}();function Ot(t){return{fontFamily:t.fontFamily,lineHeight:t.lineHeight,margin:t.margin,hyphenate:t.hyphenate,columnWidth:t.columnWidth,horizontal:t.horizontal,nightMode:t.nightMode,spreadView:t.spreadView,pageBorder:t.pageBorder,enabledMediaTypes:Object.assign({},t.enabledMediaTypes),defaultPaperSize:t.defaultPaperSize?Object.assign({},t.defaultPaperSize):void 0}}var Rt={fontFamily:"serif",lineHeight:1.25,margin:8,hyphenate:!1,columnWidth:25,horizontal:!1,nightMode:!1,spreadView:!1,pageBorder:1,enabledMediaTypes:{vivliostyle:!0,print:!0},defaultPaperSize:void 0},kt={};function Lt(t,e,n,i){var r=Math.min((t-0)/n,(e-0)/i);return"matrix("+r+",0,0,"+r+",0,0)"}function Bt(t){return'"'+st(""+t)+'"'}function _t(t){return at(""+t)}function Mt(t,e){return t?at(t)+"."+at(e):at(e)}var Ut=0,Vt=function(){function t(t,e){if(this.parent=t,this.resolver=e,this.children=[],this.values={},this.funcs={},this.builtIns={},this.scopeKey="S"+Ut++,this.zero=new ye(this,0),this.one=new ye(this,1),this._true=new ye(this,!0),this._false=new ye(this,!1),t&&t.children.push(this),!t){var n=this.builtIns;n.floor=Math.floor,n.ceil=Math.ceil,n.round=Math.round,n.sqrt=Math.sqrt,n.min=Math.min,n.max=Math.max,n.letterbox=Lt,n["css-string"]=Bt,n["css-name"]=_t,n.typeof=function(t){return typeof t},this.defineBuiltInName("page-width",(function(){return this.pageWidth()})),this.defineBuiltInName("page-height",(function(){return this.pageHeight()})),this.defineBuiltInName("pref-font-family",(function(){return this.pref.fontFamily})),this.defineBuiltInName("pref-night-mode",(function(){return this.pref.nightMode})),this.defineBuiltInName("pref-hyphenate",(function(){return this.pref.hyphenate})),this.defineBuiltInName("pref-margin",(function(){return this.pref.margin})),this.defineBuiltInName("pref-line-height",(function(){return this.pref.lineHeight})),this.defineBuiltInName("pref-column-width",(function(){return this.pref.columnWidth*this.fontSize})),this.defineBuiltInName("pref-horizontal",(function(){return this.pref.horizontal})),this.defineBuiltInName("pref-spread-view",(function(){return this.pref.spreadView})),this.defineBuiltInName("pub-title",(function(){return Bt(this.pubTitle?this.pubTitle:"")})),this.defineBuiltInName("doc-title",(function(){return Bt(this.docTitle?this.docTitle:"")}))}}var e=t.prototype;return e.defineBuiltInName=function(t,e){this.values[t]=new Ee(this,e,t)},e.defineName=function(t,e){this.values[t]=e},e.defineFunc=function(t,e){this.funcs[t]=e},e.defineBuiltIn=function(t,e){this.builtIns[t]=e},t}();function zt(t){switch(t.toLowerCase()){case"vw":case"vh":case"vi":case"vb":case"vmin":case"vmax":case"pvw":case"pvh":case"pvi":case"pvb":case"pvmin":case"pvmax":return!0;default:return!1}}var Ht={px:1,in:96,pt:4/3,pc:16,cm:96/2.54,mm:96/25.4,q:96/2.54/40,em:16,rem:16,ex:8,dppx:1,dpi:1/96,dpcm:2.54/96};function Gt(t){switch(t){case"q":case"rem":return!0;default:return!1}}var Wt=function(){function t(t,e,n,i){this.rootScope=t,this.viewportWidth=e,this.viewportHeight=n,this.actualPageWidth=null,this.actualPageHeight=null,this.rootFontSize=null,this.scopes={},this.pageAreaWidth=null,this.pageAreaHeight=null,this.pageVertical=null,this.pubTitle=null,this.docTitle=null,this.pageWidth=function(){return this.actualPageWidth?this.actualPageWidth:this.pref.spreadView?Math.floor(e/2)-this.pref.pageBorder:e},this.pageHeight=function(){return this.actualPageHeight?this.actualPageHeight:n},this.initialFontSize=i,this.fontSize=function(){return this.rootFontSize?this.rootFontSize:i},this.pref=Rt}var e=t.prototype;return e.getScopeContext=function(t){var e=this.scopes[t.scopeKey];return e||(this.scopes[t.scopeKey]=e={}),e},e.clearScope=function(t){this.scopes[t.scopeKey]={};for(var e=0;e<t.children.length;e++)this.clearScope(t.children[e])},e.queryUnitSize=function(t,e){if(zt(t)){var n=this.pageWidth()/100,i=this.pageHeight()/100,r=null!=this.pageAreaWidth?this.pageAreaWidth/100:n,o=null!=this.pageAreaHeight?this.pageAreaHeight/100:i;switch(t){case"vw":return r;case"vh":return o;case"vi":return this.pageVertical?o:r;case"vb":return this.pageVertical?r:o;case"vmin":return r<o?r:o;case"vmax":return r>o?r:o;case"pvw":return n;case"pvh":return i;case"pvi":return this.pageVertical?i:n;case"pvb":return this.pageVertical?n:i;case"pvmin":return n<i?n:i;case"pvmax":return n>i?n:i}}return"em"==t||"rem"==t?e?this.initialFontSize:this.fontSize():"ex"==t?Ht.ex*(e?this.initialFontSize:this.fontSize())/Ht.em:Ht[t]},e.evalName=function(t,e){do{var n=t.values[e];if(n)return n;if(t.resolver&&(n=t.resolver.call(this,e,!1)))return n;t=t.parent}while(t);throw new Error("Name '"+e+"' is undefined")},e.evalCall=function(t,e,n,i){do{var r=t.funcs[e];if(r)return r;if(t.resolver&&(r=t.resolver.call(this,e,!0)))return r;var o=t.builtIns[e];if(o){if(i)return t.zero;for(var a=Array(n.length),s=0;s<n.length;s++)a[s]=n[s].evaluate(this);return new ye(t,o.apply(this,a))}t=t.parent}while(t);throw new Error("Function '"+e+"' is undefined")},e.evalMediaName=function(t,e){var n="all"===t||!!this.pref.enabledMediaTypes[t];return e?!n:n},e.evalMediaTest=function(t,e){var n="",i=t.match(/^(min|max)-(.*)$/);i&&(n=i[1],t=i[2]);var r=null,o=null;switch(t){case"width":case"height":case"device-width":case"device-height":case"color":e&&(r=e.evaluate(this))}switch(t){case"width":o=this.pageWidth();break;case"height":o=this.pageHeight();break;case"device-width":o=window.screen.availWidth;break;case"device-height":o=window.screen.availHeight;break;case"color":o=window.screen.pixelDepth}if(null!=o&&null!=r)switch(n){case"min":return o>=r;case"max":return o<=r;default:return o==r}else if(null!=o&&null==e)return 0!==o;return!1},e.queryVal=function(t,e){var n=this.scopes[t.scopeKey];return n?n[e]:void 0},e.storeVal=function(t,e,n){this.getScopeContext(t)[e]=n},t}(),Xt=function(){function t(t){this.scope=t,this.scope=t,this.key="_"+Ut++}var e=t.prototype;return e.toString=function(){var t=new rt;return this.appendTo(t,0),t.toString()},e.appendTo=function(t,e){throw new Error("F_ABSTRACT")},e.evaluateCore=function(t){throw new Error("F_ABSTRACT")},e.expand=function(t,e){return this},e.dependCore=function(t,e,n){return t===this},e.dependOuter=function(t,e,n){var i=n[this.key];if(null!=i)return i!==kt&&i;n[this.key]=kt;var r=this.dependCore(t,e,n);return n[this.key]=r,r},e.depend=function(t,e){return this.dependOuter(t,e,{})},e.evaluate=function(t){var e=t.queryVal(this.scope,this.key);return void 0!==e||(e=this.evaluateCore(t),t.storeVal(this.scope,this.key,e)),e},e.isMediaName=function(){return!1},t}(),jt=function(t){function e(e,n){var i;return(i=t.call(this,e)||this).val=n,i}I(e,t);var n=e.prototype;return n.getOp=function(){throw new Error("F_ABSTRACT")},n.evalPrefix=function(t){throw new Error("F_ABSTRACT")},n.evaluateCore=function(t){var e=this.val.evaluate(t);return this.evalPrefix(e)},n.dependCore=function(t,e,n){return t===this||this.val.dependOuter(t,e,n)},n.appendTo=function(t,e){10<e&&t.append("("),t.append(this.getOp()),this.val.appendTo(t,10),10<e&&t.append(")")},n.expand=function(t,e){var n=this.val.expand(t,e);return n===this.val?this:new this.constructor(this.scope,n)},e}(Xt),Kt=function(t){function e(e,n,i){var r;return(r=t.call(this,e)||this).lhs=n,r.rhs=i,r}I(e,t);var n=e.prototype;return n.getPriority=function(){throw new Error("F_ABSTRACT")},n.getOp=function(){throw new Error("F_ABSTRACT")},n.evalInfix=function(t,e){throw new Error("F_ABSTRACT")},n.evaluateCore=function(t){var e=this.lhs.evaluate(t),n=this.rhs.evaluate(t);return this.evalInfix(e,n)},n.dependCore=function(t,e,n){return t===this||this.lhs.dependOuter(t,e,n)||this.rhs.dependOuter(t,e,n)},n.appendTo=function(t,e){var n=this.getPriority();n<=e&&t.append("("),this.lhs.appendTo(t,n),t.append(this.getOp()),this.rhs.appendTo(t,n),n<=e&&t.append(")")},n.expand=function(t,e){var n=this.lhs.expand(t,e),i=this.rhs.expand(t,e);return n===this.lhs&&i===this.rhs?this:new this.constructor(this.scope,n,i)},e}(Xt),$t=function(t){function e(e,n,i){return t.call(this,e,n,i)||this}return I(e,t),e.prototype.getPriority=function(){return 1},e}(Kt),qt=function(t){function e(e,n,i){return t.call(this,e,n,i)||this}return I(e,t),e.prototype.getPriority=function(){return 2},e}(Kt),Yt=function(t){function e(e,n,i){return t.call(this,e,n,i)||this}return I(e,t),e.prototype.getPriority=function(){return 3},e}(Kt),Zt=function(t){function e(e,n,i){return t.call(this,e,n,i)||this}return I(e,t),e.prototype.getPriority=function(){return 4},e}(Kt),Qt=function(t){function e(e,n){return t.call(this,e,n)||this}I(e,t);var n=e.prototype;return n.getOp=function(){return"!"},n.evalPrefix=function(t){return!t},e}(jt),Jt=function(t){function e(e,n){return t.call(this,e,n)||this}I(e,t);var n=e.prototype;return n.getOp=function(){return"-"},n.evalPrefix=function(t){return-t},e}(jt),te=function(t){function e(e,n,i){return t.call(this,e,n,i)||this}I(e,t);var n=e.prototype;return n.getOp=function(){return"&&"},n.evaluateCore=function(t){return this.lhs.evaluate(t)&&this.rhs.evaluate(t)},e}($t),ee=function(t){function e(e,n,i){return t.call(this,e,n,i)||this}return I(e,t),e.prototype.getOp=function(){return" and "},e}(te),ne=function(t){function e(e,n,i){return t.call(this,e,n,i)||this}I(e,t);var n=e.prototype;return n.getOp=function(){return"||"},n.evaluateCore=function(t){return this.lhs.evaluate(t)||this.rhs.evaluate(t)},e}($t),ie=function(t){function e(e,n,i){return t.call(this,e,n,i)||this}return I(e,t),e.prototype.getOp=function(){return", "},e}(ne),re=function(t){function e(e,n,i){return t.call(this,e,n,i)||this}I(e,t);var n=e.prototype;return n.getOp=function(){return"<"},n.evalInfix=function(t,e){return t<e},e}(qt),oe=function(t){function e(e,n,i){return t.call(this,e,n,i)||this}I(e,t);var n=e.prototype;return n.getOp=function(){return"<="},n.evalInfix=function(t,e){return t<=e},e}(qt),ae=function(t){function e(e,n,i){return t.call(this,e,n,i)||this}I(e,t);var n=e.prototype;return n.getOp=function(){return">"},n.evalInfix=function(t,e){return t>e},e}(qt),se=function(t){function e(e,n,i){return t.call(this,e,n,i)||this}I(e,t);var n=e.prototype;return n.getOp=function(){return">="},n.evalInfix=function(t,e){return t>=e},e}(qt),ue=function(t){function e(e,n,i){return t.call(this,e,n,i)||this}I(e,t);var n=e.prototype;return n.getOp=function(){return"=="},n.evalInfix=function(t,e){return t==e},e}(qt),le=function(t){function e(e,n,i){return t.call(this,e,n,i)||this}I(e,t);var n=e.prototype;return n.getOp=function(){return"!="},n.evalInfix=function(t,e){return t!=e},e}(qt),ce=function(t){function e(e,n,i){return t.call(this,e,n,i)||this}I(e,t);var n=e.prototype;return n.getOp=function(){return"+"},n.evalInfix=function(t,e){return t+e},e}(Yt),he=function(t){function e(e,n,i){return t.call(this,e,n,i)||this}I(e,t);var n=e.prototype;return n.getOp=function(){return" - "},n.evalInfix=function(t,e){return t-e},e}(Yt),fe=function(t){function e(e,n,i){return t.call(this,e,n,i)||this}I(e,t);var n=e.prototype;return n.getOp=function(){return"*"},n.evalInfix=function(t,e){return t*e},e}(Zt),de=function(t){function e(e,n,i){return t.call(this,e,n,i)||this}I(e,t);var n=e.prototype;return n.getOp=function(){return"/"},n.evalInfix=function(t,e){return t/e},e}(Zt),pe=function(t){function e(e,n,i){return t.call(this,e,n,i)||this}I(e,t);var n=e.prototype;return n.getOp=function(){return"%"},n.evalInfix=function(t,e){return t%e},e}(Zt),ge=function(t){function e(e,n,i){var r;return(r=t.call(this,e)||this).num=n,r.unit=i.toLowerCase(),r}I(e,t);var n=e.prototype;return n.appendTo=function(t,e){t.append(this.num.toString()),t.append(at(this.unit))},n.evaluateCore=function(t){return this.num*t.queryUnitSize(this.unit,!1)},e}(Xt),me=function(t){function e(e,n){var i;return(i=t.call(this,e)||this).qualifiedName=n,i}I(e,t);var n=e.prototype;return n.appendTo=function(t,e){t.append(this.qualifiedName)},n.evaluateCore=function(t){return t.evalName(this.scope,this.qualifiedName).evaluate(t)},n.dependCore=function(t,e,n){return t===this||e.evalName(this.scope,this.qualifiedName).dependOuter(t,e,n)},e}(Xt),ve=function(t){function e(e,n,i){var r;return(r=t.call(this,e)||this).not=n,r.name=i,r}I(e,t);var n=e.prototype;return n.appendTo=function(t,e){this.not&&t.append("not "),t.append(at(this.name))},n.evaluateCore=function(t){return t.evalMediaName(this.name,this.not)},n.dependCore=function(t,e,n){return t===this||this.value.dependOuter(t,e,n)},n.isMediaName=function(){return!0},e}(Xt),Ee=function(t){function e(e,n,i){var r;return(r=t.call(this,e)||this).fn=n,r.str=i,r}I(e,t);var n=e.prototype;return n.appendTo=function(t,e){t.append(this.str)},n.evaluateCore=function(t){return this.fn.call(t)},e}(Xt),be=function(t){function e(e,n,i){var r;return(r=t.call(this,e)||this).qualifiedName=n,r.params=i,r}I(e,t);var n=e.prototype;return n.appendTo=function(t,e){t.append(this.qualifiedName),function(t,e){t.append("(");for(var n=0;n<e.length;n++)n&&t.append(","),e[n].appendTo(t,0);t.append(")")}(t,this.params)},n.evaluateCore=function(t){return t.evalCall(this.scope,this.qualifiedName,this.params,!1).expand(t,this.params).evaluate(t)},n.dependCore=function(t,e,n){if(t===this)return!0;for(var i=0;i<this.params.length;i++)if(this.params[i].dependOuter(t,e,n))return!0;return e.evalCall(this.scope,this.qualifiedName,this.params,!0).dependOuter(t,e,n)},n.expand=function(t,n){var i=function(t,e,n){for(var i=e,r=0;r<e.length;r++){var o=e[r].expand(t,n);if(e!==i)i[r]=o;else if(o!==e[r]){i=Array(e.length);for(var a=0;a<r;a++)i[a]=e[a];i[r]=o}}return i}(t,this.params,n);return i===this.params?this:new e(this.scope,this.qualifiedName,i)},e}(Xt),Ce=function(t){function e(e,n,i,r){var o;return(o=t.call(this,e)||this).cond=n,o.ifTrue=i,o.ifFalse=r,o}I(e,t);var n=e.prototype;return n.appendTo=function(t,e){e>0&&t.append("("),this.cond.appendTo(t,0),t.append("?"),this.ifTrue.appendTo(t,0),t.append(":"),this.ifFalse.appendTo(t,0),e>0&&t.append(")")},n.evaluateCore=function(t){return this.cond.evaluate(t)?this.ifTrue.evaluate(t):this.ifFalse.evaluate(t)},n.dependCore=function(t,e,n){return t===this||this.cond.dependOuter(t,e,n)||this.ifTrue.dependOuter(t,e,n)||this.ifFalse.dependOuter(t,e,n)},n.expand=function(t,n){var i=this.cond.expand(t,n),r=this.ifTrue.expand(t,n),o=this.ifFalse.expand(t,n);return i===this.cond&&r===this.ifTrue&&o===this.ifFalse?this:new e(this.scope,i,r,o)},e}(Xt),ye=function(t){function e(e,n){var i;return(i=t.call(this,e)||this).val=n,i}I(e,t);var n=e.prototype;return n.appendTo=function(t,e){switch(typeof this.val){case"number":case"boolean":t.append(this.val.toString());break;case"string":t.append('"'),t.append(st(this.val)),t.append('"');break;default:throw new Error("F_UNEXPECTED_STATE")}},n.evaluateCore=function(t){return this.val},e}(Xt),we=function(t){function e(e,n,i){var r;return(r=t.call(this,e)||this).name=n,r.value=i,r}I(e,t);var n=e.prototype;return n.appendTo=function(t,e){t.append("("),t.append(st(this.name.name)),t.append(":"),this.value.appendTo(t,0),t.append(")")},n.evaluateCore=function(t){return t.evalMediaTest(this.name.name,this.value)},n.dependCore=function(t,e,n){return t===this||this.value.dependOuter(t,e,n)},n.expand=function(t,n){var i=this.value.expand(t,n);return i===this.value?this:new e(this.scope,this.name,i)},e}(Xt),De=function(t){function e(e,n){var i;return(i=t.call(this,e)||this).index=n,i}I(e,t);var n=e.prototype;return n.appendTo=function(t,e){t.append("$"),t.append(this.index.toString())},n.expand=function(t,e){var n=e[this.index];if(!n)throw new Error("Parameter missing: "+this.index);return n},e}(Xt);function Se(t,e,n){return e===t._false||e===t.zero||n==t._false||n==t.zero?t._false:e===t._true||e===t.one?n:n===t._true||n===t.one?e:new te(t,e,n)}function Ne(t,e,n){return e===t.zero?n:n===t.zero?e:new ce(t,e,n)}function Te(t,e,n){return e===t.zero?new Jt(t,n):n===t.zero?e:new he(t,e,n)}function Ae(t,e,n){return e===t.zero||n===t.zero?t.zero:e===t.one?n:n===t.one?e:new fe(t,e,n)}function xe(t,e,n){return e===t.zero?t.zero:n===t.one?e:new de(t,e,n)}var Ie=function(){function t(){}var e=t.prototype;return e.visitValues=function(t){for(var e=0;e<t.length;e++)t[e].visit(this)},e.visitEmpty=function(t){throw new Error("E_CSS_EMPTY_NOT_ALLOWED")},e.visitSlash=function(t){throw new Error("E_CSS_SLASH_NOT_ALLOWED")},e.visitStr=function(t){throw new Error("E_CSS_STR_NOT_ALLOWED")},e.visitIdent=function(t){throw new Error("E_CSS_IDENT_NOT_ALLOWED")},e.visitNumeric=function(t){throw new Error("E_CSS_NUMERIC_NOT_ALLOWED")},e.visitNum=function(t){throw new Error("E_CSS_NUM_NOT_ALLOWED")},e.visitInt=function(t){return this.visitNum(t)},e.visitColor=function(t){throw new Error("E_CSS_COLOR_NOT_ALLOWED")},e.visitURL=function(t){throw new Error("E_CSS_URL_NOT_ALLOWED")},e.visitSpaceList=function(t){throw new Error("E_CSS_LIST_NOT_ALLOWED")},e.visitCommaList=function(t){throw new Error("E_CSS_COMMA_NOT_ALLOWED")},e.visitFunc=function(t){throw new Error("E_CSS_FUNC_NOT_ALLOWED")},e.visitExpr=function(t){throw new Error("E_CSS_EXPR_NOT_ALLOWED")},t}(),Fe=function(t){function e(){return t.call(this)||this}I(e,t);var n=e.prototype;return n.visitValues=function(t){for(var e=null,n=0;n<t.length;n++){var i=t[n],r=i.visit(this);if(e)e[n]=r;else if(i!==r){e=new Array(t.length);for(var o=0;o<n;o++)e[o]=t[o];e[n]=r}}return e||t},n.visitStr=function(t){return t},n.visitIdent=function(t){return t},n.visitSlash=function(t){return t},n.visitNumeric=function(t){return t},n.visitNum=function(t){return t},n.visitInt=function(t){return t},n.visitColor=function(t){return t},n.visitURL=function(t){return t},n.visitSpaceList=function(t){var e=this.visitValues(t.values);return e===t.values?t:new We(e)},n.visitCommaList=function(t){var e=this.visitValues(t.values);return e===t.values?t:new Xe(e)},n.visitFunc=function(t){var e=this.visitValues(t.values);return e===t.values?t:new je(t.name,e)},n.visitExpr=function(t){return t},e}(Ie),Pe=function(){function t(){}var e=t.prototype;return e.toString=function(){var t=new rt;return this.appendTo(t,!0),t.toString()},e.stringValue=function(){var t=new rt;return this.appendTo(t,!1),t.toString()},e.toExpr=function(t,e){throw new Error("F_ABSTRACT")},e.appendTo=function(t,e){t.append("[error]")},e.isExpr=function(){return!1},e.isNumeric=function(){return!1},e.isNum=function(){return!1},e.isIdent=function(){return!1},e.isSpaceList=function(){return!1},e.visit=function(t){throw new Error("F_ABSTRACT")},t}(),Oe=function(t){function e(){return t.call(this)||this}I(e,t);var n=e.prototype;return n.toExpr=function(t,e){return new ye(t,"")},n.appendTo=function(t,e){},n.visit=function(t){return t.visitEmpty(this)},x(e,null,[{key:"instance",get:function(){return this.empty||(this.empty=new e),this.empty}}]),e}(Pe).instance,Re=function(t){function e(){return t.call(this)||this}I(e,t);var n=e.prototype;return n.toExpr=function(t,e){return new ye(t,"/")},n.appendTo=function(t,e){t.append("/")},n.visit=function(t){return t.visitSlash(this)},x(e,null,[{key:"instance",get:function(){return this.slash||(this.slash=new e),this.slash}}]),e}(Pe).instance,ke=function(t){function e(e){var n;return(n=t.call(this)||this).str=e,n}I(e,t);var n=e.prototype;return n.toExpr=function(t,e){return new ye(t,this.str)},n.appendTo=function(t,e){e?(t.append('"'),t.append(st(this.str)),t.append('"')):t.append(this.str)},n.visit=function(t){return t.visitStr(this)},e}(Pe),Le={},Be=function(t){function e(e){var n;if((n=t.call(this)||this).name=e,Le[e])throw new Error("E_INVALID_CALL");return Le[e]=L(n),n}I(e,t);var n=e.prototype;return n.toExpr=function(t,e){return new ye(t,this.name)},n.appendTo=function(t,e){t.append(e?at(this.name):this.name)},n.visit=function(t){return t.visitIdent(this)},n.isIdent=function(){return!0},e}(Pe);function _e(t){var e=Le[t];return e||(e=new Be(t)),e}var Me=function(t){function e(e,n){var i;return(i=t.call(this)||this).num=e,i.unit=n.toLowerCase(),i}I(e,t);var n=e.prototype;return n.toExpr=function(t,e){return 0==this.num?t.zero:e&&"%"==this.unit?100==this.num?e:new fe(t,e,new ye(t,this.num/100)):new ge(t,this.num,this.unit)},n.appendTo=function(t,e){t.append(this.num.toString()),t.append(this.unit)},n.visit=function(t){return t.visitNumeric(this)},n.isNumeric=function(){return!0},e}(Pe),Ue=function(t){function e(e){var n;return(n=t.call(this)||this).num=e,n}I(e,t);var n=e.prototype;return n.toExpr=function(t,e){return 0==this.num?t.zero:1==this.num?t.one:new ye(t,this.num)},n.appendTo=function(t,e){t.append(this.num.toString())},n.visit=function(t){return t.visitNum(this)},n.isNum=function(){return!0},e}(Pe),Ve=function(t){function e(e){return t.call(this,e)||this}return I(e,t),e.prototype.visit=function(t){return t.visitInt(this)},e}(Ue),ze=function(t){function e(e){var n;return(n=t.call(this)||this).rgb=e,n}I(e,t);var n=e.prototype;return n.appendTo=function(t,e){t.append("#");var n=this.rgb.toString(16);t.append("000000".substr(n.length)),t.append(n)},n.visit=function(t){return t.visitColor(this)},e}(Pe),He=function(t){function e(e){var n;return(n=t.call(this)||this).url=e,n}I(e,t);var n=e.prototype;return n.appendTo=function(t,e){t.append('url("'),t.append(st(this.url)),t.append('")')},n.visit=function(t){return t.visitURL(this)},e}(Pe);function Ge(t,e,n,i){var r=e.length;if(r>0){e[0].appendTo(t,i);for(var o=1;o<r;o++)t.append(n),e[o].appendTo(t,i)}}var We=function(t){function e(e){var n;return(n=t.call(this)||this).values=e,n}I(e,t);var n=e.prototype;return n.appendTo=function(t,e){Ge(t,this.values," ",e)},n.visit=function(t){return t.visitSpaceList(this)},n.isSpaceList=function(){return!0},e}(Pe),Xe=function(t){function e(e){var n;return(n=t.call(this)||this).values=e,n}I(e,t);var n=e.prototype;return n.appendTo=function(t,e){Ge(t,this.values,",",e)},n.visit=function(t){return t.visitCommaList(this)},e}(Pe),je=function(t){function e(e,n){var i;return(i=t.call(this)||this).name=e,i.values=n,i}I(e,t);var n=e.prototype;return n.appendTo=function(t,e){t.append(at(this.name)),t.append("("),Ge(t,this.values,",",e),t.append(")")},n.visit=function(t){return t.visitFunc(this)},e}(Pe),Ke=function(t){function e(e){var n;return(n=t.call(this)||this).expr=e,n}I(e,t);var n=e.prototype;return n.toExpr=function(){return this.expr},n.appendTo=function(t,e){t.append("-epubx-expr("),this.expr.appendTo(t,0),t.append(")")},n.visit=function(t){return t.visitExpr(this)},n.isExpr=function(){return!0},e}(Pe);function $e(t,e){if(t){if(t.isNumeric()){var n=t;return e.queryUnitSize(n.unit,!1)*n.num}if(t.isNum())return t.num}return 0}function qe(t,e){return new Me($e(t,e),"px")}var Ye={absolute:_e("absolute"),all:_e("all"),always:_e("always"),auto:_e("auto"),avoid:_e("avoid"),balance:_e("balance"),balance_all:_e("balance-all"),block:_e("block"),block_end:_e("block-end"),block_start:_e("block-start"),both:_e("both"),bottom:_e("bottom"),border_box:_e("border-box"),break_all:_e("break-all"),break_word:_e("break-word"),crop:_e("crop"),cross:_e("cross"),column:_e("column"),exclusive:_e("exclusive"),_false:_e("false"),fixed:_e("fixed"),flex:_e("flex"),footnote:_e("footnote"),footer:_e("footer"),header:_e("header"),hidden:_e("hidden"),horizontal_tb:_e("horizontal-tb"),inherit:_e("inherit"),inline:_e("inline"),inline_block:_e("inline-block"),inline_end:_e("inline-end"),inline_start:_e("inline-start"),landscape:_e("landscape"),left:_e("left"),line:_e("line"),list_item:_e("list-item"),ltr:_e("ltr"),manual:_e("manual"),none:_e("none"),normal:_e("normal"),oeb_page_foot:_e("oeb-page-foot"),oeb_page_head:_e("oeb-page-head"),page:_e("page"),relative:_e("relative"),right:_e("right"),same:_e("same"),scale:_e("scale"),snap_block:_e("snap-block"),spread:_e("spread"),_static:_e("static"),rtl:_e("rtl"),table:_e("table"),table_caption:_e("table-caption"),table_cell:_e("table-cell"),table_footer_group:_e("table-footer-group"),table_header_group:_e("table-header-group"),table_row:_e("table-row"),top:_e("top"),transparent:_e("transparent"),vertical_lr:_e("vertical-lr"),vertical_rl:_e("vertical-rl"),visible:_e("visible"),_true:_e("true")},Ze=new Me(100,"%"),Qe=new Me(100,"pvw"),Je=new Me(100,"pvh"),tn=new Me(0,"px"),en={"font-size":1,color:2};function nn(t,e){return(en[t]||Number.MAX_VALUE)-(en[e]||Number.MAX_VALUE)}var rn=function(t,e,n,i){this.x1=t,this.y1=e,this.x2=n,this.y2=i},on=function(t,e){this.x=t,this.y=e},an=function(t,e,n,i){this.left=t,this.top=e,this.right=n,this.bottom=i},sn=function(t,e,n,i){this.low=t,this.high=e,this.winding=n,this.shapeId=i},un=function(t,e,n,i){this.y1=t,this.y2=e,this.x1=n,this.x2=i,this.left=null,this.right=null};function ln(t,e){return t.low.y-e.low.y||t.low.x-e.low.x}var cn=function(){function t(t){this.points=t}var e=t.prototype;return e.addSegments=function(t,e){for(var n=this.points,i=n.length,r=n[i-1],o=0;o<i;o++){var a,s=n[o];a=r.y<s.y?new sn(r,s,1,e):new sn(s,r,-1,e),t.push(a),r=s}},e.withOffset=function(e,n){for(var i,r=[],o=_(this.points);!(i=o()).done;){var a=i.value;r.push(new on(a.x+e,a.y+n))}return new t(r)},t}();function hn(t,e,n,i){for(var r=[],o=0;o<20;o++){var a=2*o*Math.PI/20;r.push(new on(t+n*Math.sin(a),e+i*Math.cos(a)))}return new cn(r)}function fn(t,e,n,i){return new cn([new on(t,e),new on(n,e),new on(n,i),new on(t,i)])}var dn=function(t,e,n,i){this.x=t,this.winding=e,this.shapeId=n,this.lowOrHigh=i};function pn(t,e){var n=t.low.x+(t.high.x-t.low.x)*(e-t.low.y)/(t.high.y-t.low.y);if(isNaN(n))throw new Error("Bad intersection");return n}function gn(t,e,n,i){var r,o,a,s;e.high.y<n&&f.warn("Error: inconsistent segment (1)"),e.low.y<=n?(r=pn(e,n),o=e.winding):(r=e.low.x,o=0),e.high.y>=i?(a=pn(e,i),s=e.winding):(a=e.high.x,s=0),r<a?(t.push(new dn(r,o,e.shapeId,-1)),t.push(new dn(a,s,e.shapeId,1))):(t.push(new dn(a,s,e.shapeId,-1)),t.push(new dn(r,o,e.shapeId,1)))}function mn(t,e,n){var i,r=e+n,o=Array(r),a=Array(r);for(i=0;i<=r;i++)o[i]=0,a[i]=0;for(var s=[],u=!1,l=t.length,c=0;c<l;c++){var h=t[c];o[h.shapeId]+=h.winding,a[h.shapeId]+=h.lowOrHigh;var f=!1;for(i=0;i<e;i++)if(o[i]&&!a[i]){f=!0;break}if(f)for(i=e;i<=r;i++)if(o[i]||a[i]){f=!1;break}u!=f&&(s.push(h.x),u=f)}return s}function vn(t,e){return e?Math.floor(t/e)*e:t}function En(t){return new rn(t.y1,-t.x2,t.y2,-t.x1)}function bn(t){return new rn(-t.y2,t.x1,-t.y1,t.x2)}function Cn(t){return new cn(t.points.map((function(t){return function(t){return new on(t.y,-t.x)}(t)})))}function yn(t,e){for(var n=e.length-1,i=new un(t.y2,t.y2,t.x1,t.x2);n>=0;){var r=i;((i=e[n]).y2-i.y1<1||i.x1==r.x1&&i.x2==r.x2)&&(r.y1=i.y1,e.splice(n,1),i=r),n--}}function wn(t,e){for(var n=0,i=t.length;n<i;){var r=Math.floor((n+i)/2);e>=t[r].y2?n=r+1:i=r}return n}function Dn(t,e){if(!t.length)return e;var n,i,r=e.y1;for(i=0;i<t.length&&!((n=t[i]).y2>e.y1&&n.x1-.1<=e.x1&&n.x2+.1>=e.x2);i++)r=Math.max(r,n.y2);for(var o=r;i<t.length&&!((n=t[i]).y1>=e.y2||n.x1-.1>e.x1||n.x2+.1<e.x2);i++)o=n.y2;return(o=i===t.length?e.y2:Math.min(o,e.y2))<=r?null:new rn(e.x1,r,e.x2,o)}function Sn(t,e){if(!t.length)return e;var n,i,r=e.y2;for(i=t.length-1;i>=0&&(n=t[i],!(i===t.length-1&&n.y2<e.y2))&&!(n.y1<e.y2&&n.x1-.1<=e.x1&&n.x2+.1>=e.x2);i--)r=Math.min(r,n.y1);for(var o=Math.min(r,n.y2);i>=0&&!((n=t[i]).y2<=e.y1||n.x1-.1>e.x1||n.x2+.1<e.x2);i--)o=n.y1;return r<=(o=Math.max(o,e.y1))?null:new rn(e.x1,o,e.x2,r)}var Nn=function(t){function e(){var e;return(e=t.call(this)||this).propSet={},e}I(e,t);var n=e.prototype;return n.visitIdent=function(t){return this.propSet[t.name]=!0,t},n.visitSpaceList=function(t){return this.visitValues(t.values),t},e}(Ie),Tn=function(t){function e(e){var n;return(n=t.call(this)||this).value=e,n}return I(e,t),e.prototype.visitInt=function(t){return this.value=t.num,t},e}(Ie);function An(t,e){if(t){var n=new Tn(e);try{return t.visit(n),n.value}catch(t){f.warn(t,"toInt: ")}}return e}var xn=function(t){function e(){var e;return(e=t.call(this)||this).collect=!1,e.coords=[],e.name=null,e}I(e,t);var n=e.prototype;return n.visitNumeric=function(t){return this.collect&&this.coords.push(t),null},n.visitNum=function(t){return this.collect&&0==t.num&&this.coords.push(new Me(0,"px")),null},n.visitSpaceList=function(t){return this.visitValues(t.values),null},n.visitFunc=function(t){return this.collect||(this.collect=!0,this.visitValues(t.values),this.collect=!1,this.name=t.name.toLowerCase()),null},n.getShape=function(t,e,n,i,r){var o=this;if(this.coords.length>0){var a=[];switch(this.coords.forEach((function(t,e){if("%"==t.unit){var s=e%2==0?n:i;3==e&&"circle"==o.name&&(s=Math.sqrt((n*n+i*i)/2)),a.push(t.num*s/100)}else a.push(t.num*r.queryUnitSize(t.unit,!1))})),this.name){case"polygon":if(a.length%2==0){for(var s=[],u=0;u<a.length;u+=2)s.push(new on(t+a[u],e+a[u+1]));return new cn(s)}break;case"rectangle":if(4==a.length)return fn(t+a[0],e+a[1],t+a[0]+a[2],e+a[1]+a[3]);break;case"ellipse":if(4==a.length)return hn(t+a[0],e+a[1],a[2],a[3]);break;case"circle":if(3==a.length)return hn(t+a[0],e+a[1],a[2],a[2])}}return null},e}(Ie);function In(t,e,n,i,r,o){if(t){var a=new xn;try{return t.visit(a),a.getShape(e,n,i,r,o)}catch(t){f.warn(t,"toShape:")}}return fn(e,n,e+i,n+r)}var Fn=function(t){function e(e){var n;return(n=t.call(this)||this).reset=e,n.counters={},n.name=null,n}I(e,t);var n=e.prototype;return n.visitIdent=function(t){return this.name=t.toString(),this.counters[this.name]=this.reset?0:(this.counters[this.name]||0)+1,t},n.visitInt=function(t){return this.name&&(this.counters[this.name]+=t.num-(this.reset?0:1)),t},n.visitSpaceList=function(t){return this.visitValues(t.values),t},e}(Ie);function Pn(t,e){var n=new Fn(e);try{t.visit(n)}catch(t){f.warn(t,"toCounters:")}return n.counters}var On=function(t){function e(e,n){var i;return(i=t.call(this)||this).baseUrl=e,i.transformer=n,i}return I(e,t),e.prototype.visitURL=function(t){return new He(this.transformer.transformURL(t.url,this.baseUrl))},e}(Fe);function Rn(t){var e={};return Object.keys(t).forEach((function(n){e[n]=Array.from(t[n])})),e}var kn,Ln=function(){function t(t,e){this.targetId=t,this.resolved=e,this.pageCounters=null,this.spineIndex=-1,this.pageIndex=-1}var e=t.prototype;return e.equals=function(t){return this===t||!!t&&this.targetId===t.targetId&&this.resolved===t.resolved&&this.spineIndex===t.spineIndex&&this.pageIndex===t.pageIndex},e.isResolved=function(){return this.resolved},e.resolve=function(){this.resolved=!0},e.unresolve=function(){this.resolved=!1},t}(),Bn=function(){function t(t,e){this.counterStore=t,this.baseURL=e}var e=t.prototype;return e.countersOfId=function(t,e){t=this.counterStore.documentURLTransformer.transformFragment(t,this.baseURL),this.counterStore.countersById[t]=e},e.getExprContentListener=function(){return this.counterStore.getExprContentListener()},t}(),_n=function(){function t(t,e,n,i){this.counterStore=t,this.baseURL=e,this.rootScope=n,this.pageScope=i,this.styler=null,this.namedStringValues={}}var e=t.prototype;return e.setStyler=function(t){this.styler=t},e.getFragment=function(t){var e=t.match(/^[^#]*#(.*)$/);return e?e[1]:null},e.getTransformedId=function(t){var e=this.counterStore.documentURLTransformer.transformURL(K(t,this.baseURL),this.baseURL);return"#"===e.charAt(0)&&(e=e.substring(1)),e},e.getPageCounterVal=function(t,e){var n=this,i=new Ee(this.pageScope,(function(){return e(function(){var e=n.counterStore.currentPageCounters[t];return e&&e.length?e[e.length-1]:null}())}),"page-counter-"+t);return this.counterStore.registerPageCounterExpr(t,(function(t){return e(t[0])}),i),i},e.getPageCountersVal=function(t,e){var n=this,i=new Ee(this.pageScope,(function(){return e(n.counterStore.currentPageCounters[t]||[])}),"page-counters-"+t);return this.counterStore.registerPageCounterExpr(t,e,i),i},e.getTargetCounters=function(t,e,n){var i=this.counterStore.countersById[e];return!i&&n&&t&&(this.styler.styleUntilIdIsReached(t),i=this.counterStore.countersById[e]),i||null},e.getTargetPageCounters=function(t){return this.counterStore.currentPage.elementsById[t]?this.counterStore.currentPageCounters:this.counterStore.pageCountersById[t]||null},e.getTargetCounterVal=function(t,e,n){var i=this,r=this.getFragment(t),o=this.getTransformedId(t),a=this.getTargetCounters(r,o,!1);if(a&&a[e]){var s=a[e];return new ye(this.rootScope,n(s[s.length-1]||null))}return new Ee(this.pageScope,(function(){if(a=i.getTargetCounters(r,o,!0)){if(a[e]){var t=a[e];return n(t[t.length-1]||null)}var s=i.getTargetPageCounters(o);if(s){if(i.counterStore.resolveReference(o),s[e]){var u=s[e];return n(u[u.length-1]||null)}return n(0)}return i.counterStore.saveReferenceOfCurrentPage(o,!1),"??"}return i.counterStore.saveReferenceOfCurrentPage(o,!1),"??"}),"target-counter-"+e+"-of-"+t)},e.getTargetCountersVal=function(t,e,n){var i=this,r=this.getFragment(t),o=this.getTransformedId(t);return new Ee(this.pageScope,(function(){var t=i.getTargetPageCounters(o);if(t){i.counterStore.resolveReference(o);var a=t[e]||[],s=i.getTargetCounters(r,o,!0);return n(a.concat(s[e]||[]))}return i.counterStore.saveReferenceOfCurrentPage(o,!1),"??"}),"target-counters-"+e+"-of-"+t)},e.getNamedStringVal=function(t,e){var n=this;return new Ee(this.pageScope,(function(){var i=n.namedStringValues[t];if(!i)return"";for(var r=Object.keys(i).map((function(t){return parseInt(t,10)})).sort(dt),o=n.counterStore.currentPage,a=o.offset,s=Math.max.apply(Math,[a].concat(Array.from(o.container.querySelectorAll("[data-adapt-eloff]")).map((function(t){return parseInt(t.getAttribute("data-adapt-eloff"),10)})))),u=-1,l=-1,c=-1,h=-1,f=0;f<r.length;f++){var d=r[f],p=f>0?r[f-1]:-1,g=f<r.length-1?r[f+1]:-1;if(d>s)break;if(d>=a){if(u<0&&(u=d,h=-1),l<0)if(d===a)l=d;else{p<u&&(l=p);var m=o.container.querySelector('[data-adapt-eloff="'+d+'"]');if(m){var v=o.container.querySelector('[data-adapt-eloff="'+a+'"]');if(v||(v=o.container.querySelector('[data-adapt-eloff="0"]')),v)for(var E=v;E;E=E.firstElementChild)if(E===m){l=d;break}}else l<0&&(l=d)}c=d}else(g>s||g<0)&&(u=l=c=h=d)}return i[{first:u,start:l,last:c,"first-except":h}[e]]||""}),"named-string-"+e+"-"+t)},e.setNamedString=function(t,e,n){(this.namedStringValues[t]||(this.namedStringValues[t]={}))[n.currentElementOffset]=e},t}(),Mn=function(){function t(t){this.documentURLTransformer=t,this.countersById={},this.pageCountersById={},this.currentPageCounters={},this.previousPageCounters={},this.currentPageCountersStack=[],this.pageIndicesById={},this.currentPage=null,this.newReferencesOfCurrentPage=[],this.referencesToSolve=[],this.referencesToSolveStack=[],this.unresolvedReferences={},this.resolvedReferences={},this.pagesCounterExprs=[],this.currentPageCounters.page=[0]}var e=t.prototype;return e.createCounterListener=function(t){return new Bn(this,t)},e.createCounterResolver=function(t,e,n){return new _n(this,t,e,n)},e.setCurrentPage=function(t){this.currentPage=t},e.definePageCounter=function(t,e){this.currentPageCounters[t]?this.currentPageCounters[t].push(e):this.currentPageCounters[t]=[e]},e.forceSetPageCounter=function(t){var e=this.currentPageCounters.page;e&&e.length?e[e.length-1]=t:this.currentPageCounters.page=[t]},e.updatePageCounters=function(t,e){var n;this.previousPageCounters=Rn(this.currentPageCounters);var i,r=t["counter-reset"];if(r){var o=r.evaluate(e);o&&(n=Pn(o,!0))}if(n)for(var a in n)this.definePageCounter(a,n[a]);var s=t["counter-increment"];if(s){var u=s.evaluate(e);u&&(i=Pn(u,!1))}for(var l in i?"page"in i||(i.page=1):(i={}).page=1,i){this.currentPageCounters[l]||this.definePageCounter(l,0);var c=this.currentPageCounters[l];c[c.length-1]+=i[l]}},e.pushPageCounters=function(t){this.currentPageCountersStack.push(this.currentPageCounters),this.currentPageCounters=Rn(t)},e.popPageCounters=function(){this.currentPageCounters=this.currentPageCountersStack.pop()},e.resolveReference=function(t){var e=this.unresolvedReferences[t],n=this.resolvedReferences[t];n||(n=this.resolvedReferences[t]=[]);for(var i=!1,r=0;r<this.referencesToSolve.length;){var o=this.referencesToSolve[r];if(o.targetId===t){if(o.resolve(),this.referencesToSolve.splice(r,1),e){var a=e.indexOf(o);a>=0&&e.splice(a,1)}n.push(o),i=!0}else r++}i||this.saveReferenceOfCurrentPage(t,!0)},e.saveReferenceOfCurrentPage=function(t,e){if(!this.newReferencesOfCurrentPage.some((function(e){return e.targetId===t}))){var n=new Ln(t,e);this.newReferencesOfCurrentPage.push(n)}},e.finishPage=function(t,e){var n=this,i=Object.keys(this.currentPage.elementsById);if(i.length>0){var r=Rn(this.currentPageCounters);i.forEach((function(i){n.pageCountersById[i]=r;var o=n.pageIndicesById[i];if(o&&o.pageIndex<e){var a=n.resolvedReferences[i];if(a){var s,u=n.unresolvedReferences[i];for(u||(u=n.unresolvedReferences[i]=[]);s=a.shift();)s.unresolve(),u.push(s)}}n.pageIndicesById[i]={spineIndex:t,pageIndex:e}}))}for(var o,a=this.previousPageCounters;o=this.newReferencesOfCurrentPage.shift();){o.pageCounters=a,o.spineIndex=t,o.pageIndex=e;var s=void 0;o.isResolved()?(s=this.resolvedReferences[o.targetId])||(s=this.resolvedReferences[o.targetId]=[]):(s=this.unresolvedReferences[o.targetId])||(s=this.unresolvedReferences[o.targetId]=[]),s.every((function(t){return!o.equals(t)}))&&s.push(o)}this.currentPage=null},e.getUnresolvedRefsToPage=function(t){var e=this,n=[];Object.keys(t.elementsById).forEach((function(t){var i=e.unresolvedReferences[t];i&&(n=n.concat(i))})),n.sort((function(t,e){return t.spineIndex-e.spineIndex||t.pageIndex-e.pageIndex}));var i=[],r=null;return n.forEach((function(t){r&&r.spineIndex===t.spineIndex&&r.pageIndex===t.pageIndex?r.refs.push(t):i.push(r={spineIndex:t.spineIndex,pageIndex:t.pageIndex,pageCounters:t.pageCounters,refs:[t]})})),i},e.pushReferencesToSolve=function(t){this.referencesToSolveStack.push(this.referencesToSolve),this.referencesToSolve=t},e.popReferencesToSolve=function(){this.referencesToSolve=this.referencesToSolveStack.pop()},e.registerPageCounterExpr=function(t,e,n){"pages"===t&&this.pagesCounterExprs.push({expr:n,format:e})},e.getExprContentListener=function(){return this.exprContentListener.bind(this)},e.exprContentListener=function(t,e,n){if(this.pagesCounterExprs.findIndex((function(e){return e.expr===t}))>=0){var i=n.createElement("span");return i.textContent=e,i.setAttribute(Un,t.key),i}return null},e.finishLastPage=function(t){for(var e,n=this,i=t.root.querySelectorAll("["+Un+"]"),r=this.currentPageCounters.page[0],o=function(){var t=e.value,i=t.getAttribute(Un),o=n.pagesCounterExprs.findIndex((function(t){return t.expr.key===i}));t.textContent=n.pagesCounterExprs[o].format([r])},a=_(i);!(e=a()).done;)o()},e.createLayoutConstraint=function(t){return new Vn(this,t)},t}(),Un="data-vivliostyle-pages-counter",Vn=function(){function t(t,e){this.counterStore=t,this.pageIndex=e}return t.prototype.allowLayout=function(t){if(!t||t.after)return!0;var e=t.viewNode;if(!e||1!==e.nodeType)return!0;var n=e.getAttribute("id")||e.getAttribute("name");if(!n)return!0;if(!this.counterStore.resolvedReferences[n]&&!this.counterStore.unresolvedReferences[n])return!0;var i=this.counterStore.pageIndicesById[n];return!i||this.pageIndex>=i.pageIndex},t}();function zn(t){if((t=t.substr(1)).match(/^[^0-9a-fA-F\n\r]$/))return t;var e=parseInt(t,16);return isNaN(e)?"":e<=65535?String.fromCharCode(e):e<=1114111?String.fromCharCode(55296|e>>10&1023,56320|1023&e):"�"}function Hn(t){return t.replace(/\\([0-9a-fA-F]{0,6}(\r\n|[ \n\r\t\f])?|[^0-9a-fA-F\n\r])/g,zn)}!function(t){t[t.EOF=0]="EOF",t[t.IDENT=1]="IDENT",t[t.STR=2]="STR",t[t.NUMERIC=3]="NUMERIC",t[t.NUM=4]="NUM",t[t.INT=5]="INT",t[t.FUNC=6]="FUNC",t[t.HASH=7]="HASH",t[t.URL=8]="URL",t[t.CLASS=9]="CLASS",t[t.O_PAR=10]="O_PAR",t[t.C_PAR=11]="C_PAR",t[t.O_BRC=12]="O_BRC",t[t.C_BRC=13]="C_BRC",t[t.O_BRK=14]="O_BRK",t[t.C_BRK=15]="C_BRK",t[t.COMMA=16]="COMMA",t[t.SEMICOL=17]="SEMICOL",t[t.COLON=18]="COLON",t[t.SLASH=19]="SLASH",t[t.AT=20]="AT",t[t.PERCENT=21]="PERCENT",t[t.QMARK=22]="QMARK",t[t.PLUS=23]="PLUS",t[t.MINUS=24]="MINUS",t[t.BAR_BAR=25]="BAR_BAR",t[t.AMP_AMP=26]="AMP_AMP",t[t.BANG=31]="BANG",t[t.DOLLAR=32]="DOLLAR",t[t.HAT=33]="HAT",t[t.BAR=34]="BAR",t[t.TILDE=35]="TILDE",t[t.STAR=36]="STAR",t[t.GT=37]="GT",t[t.LT=38]="LT",t[t.EQ=39]="EQ",t[t.BANG_EQ=41]="BANG_EQ",t[t.DOLLAR_EQ=42]="DOLLAR_EQ",t[t.HAT_EQ=43]="HAT_EQ",t[t.BAR_EQ=44]="BAR_EQ",t[t.TILDE_EQ=45]="TILDE_EQ",t[t.STAR_EQ=46]="STAR_EQ",t[t.GT_EQ=47]="GT_EQ",t[t.LT_EQ=48]="LT_EQ",t[t.EQ_EQ=49]="EQ_EQ",t[t.COL_COL=50]="COL_COL",t[t.INVALID=51]="INVALID",t[t.LAST=51]="LAST"}(kn||(kn={}));var Gn,Wn=function(){this.precededBySpace=!1,this.num=0,this.text="",this.position=0,this.type=kn.EOF};function Xn(t,e){var n,i=Array(128);for(n=0;n<128;n++)i[n]=t;for(i.NaN=t==Gn.END?Gn.END:Gn.INVALID,n=0;n<e.length;n+=2)i[e[n]]=e[n+1];return i}!function(t){t[t.SPACE=1]="SPACE",t[t.INT=2]="INT",t[t.IDENT=3]="IDENT",t[t.BANG=4]="BANG",t[t.HASH=6]="HASH",t[t.DOLLAR=7]="DOLLAR",t[t.PERCENT=8]="PERCENT",t[t.AMP=9]="AMP",t[t.O_PAR=10]="O_PAR",t[t.C_PAR=11]="C_PAR",t[t.STAR=12]="STAR",t[t.PLUS=13]="PLUS",t[t.COMMA=14]="COMMA",t[t.MINUS=15]="MINUS",t[t.DOT=16]="DOT",t[t.SLASH=17]="SLASH",t[t.COLON=18]="COLON",t[t.SEMICOL=19]="SEMICOL",t[t.LT=20]="LT",t[t.EQ=21]="EQ",t[t.GT=22]="GT",t[t.QMARK=23]="QMARK",t[t.AT=24]="AT",t[t.O_BRK=25]="O_BRK",t[t.C_BRK=26]="C_BRK",t[t.O_BRC=27]="O_BRC",t[t.C_BRC=28]="C_BRC",t[t.BSLASH=29]="BSLASH",t[t.HAT=30]="HAT",t[t.BAR=31]="BAR",t[t.TILDE=32]="TILDE",t[t.STR1=33]="STR1",t[t.STR2=34]="STR2",t[t.END=35]="END",t[t.EQTAIL=36]="EQTAIL",t[t.ENDINT=37]="ENDINT",t[t.ENDNUM=38]="ENDNUM",t[t.CONT=39]="CONT",t[t.UNIT=40]="UNIT",t[t.PCUNIT=41]="PCUNIT",t[t.NUMBER=42]="NUMBER",t[t.ENDIDNT=43]="ENDIDNT",t[t.IDNTESC=44]="IDNTESC",t[t.ENDIDES=45]="ENDIDES",t[t.ENDSTR=46]="ENDSTR",t[t.ENDESTR=47]="ENDESTR",t[t.STR1ESC=48]="STR1ESC",t[t.STR2ESC=49]="STR2ESC",t[t.BAR_BAR=50]="BAR_BAR",t[t.AMP_AMP=51]="AMP_AMP",t[t.FUNC=52]="FUNC",t[t.FUNCES=53]="FUNCES",t[t.COMMENT=54]="COMMENT",t[t.COMMST=55]="COMMST",t[t.ENDNOTK=56]="ENDNOTK",t[t.MINMIN=57]="MINMIN",t[t.TOINT=58]="TOINT",t[t.TONUM=59]="TONUM",t[t.TOIDENT=60]="TOIDENT",t[t.TOIDES=61]="TOIDES",t[t.KILL1=62]="KILL1",t[t.KILL2=63]="KILL2",t[t.URL=64]="URL",t[t.URL1=65]="URL1",t[t.URL2=66]="URL2",t[t.ENDURL=67]="ENDURL",t[t.TERMURL=68]="TERMURL",t[t.FINURL=69]="FINURL",t[t.LT_BG=70]="LT_BG",t[t.LT_BG_M=71]="LT_BG_M",t[t.INVALID=72]="INVALID",t[t.CHKPOSS=73]="CHKPOSS",t[t.CHKPOSN=74]="CHKPOSN",t[t.URLESC=75]="URLESC",t[t.IDESCH=76]="IDESCH",t[t.COL_COL=77]="COL_COL",t[t.TOCLASS=78]="TOCLASS",t[t.CHKSP=79]="CHKSP",t[t.EOF=80]="EOF"}(Gn||(Gn={}));var jn=[Gn.INVALID,Gn.INVALID,Gn.INVALID,Gn.INVALID,Gn.INVALID,Gn.INVALID,Gn.INVALID,Gn.INVALID,Gn.INVALID,Gn.SPACE,Gn.SPACE,Gn.INVALID,Gn.SPACE,Gn.SPACE,Gn.INVALID,Gn.INVALID,Gn.INVALID,Gn.INVALID,Gn.INVALID,Gn.INVALID,Gn.INVALID,Gn.INVALID,Gn.INVALID,Gn.INVALID,Gn.INVALID,Gn.INVALID,Gn.INVALID,Gn.INVALID,Gn.INVALID,Gn.INVALID,Gn.INVALID,Gn.INVALID,Gn.SPACE,Gn.BANG,Gn.STR2,Gn.HASH,Gn.DOLLAR,Gn.PERCENT,Gn.AMP,Gn.STR1,Gn.O_PAR,Gn.C_PAR,Gn.STAR,Gn.PLUS,Gn.COMMA,Gn.MINUS,Gn.DOT,Gn.SLASH,Gn.INT,Gn.INT,Gn.INT,Gn.INT,Gn.INT,Gn.INT,Gn.INT,Gn.INT,Gn.INT,Gn.INT,Gn.COLON,Gn.SEMICOL,Gn.LT,Gn.EQ,Gn.GT,Gn.QMARK,Gn.AT,Gn.IDENT,Gn.IDENT,Gn.IDENT,Gn.IDENT,Gn.IDENT,Gn.IDENT,Gn.IDENT,Gn.IDENT,Gn.IDENT,Gn.IDENT,Gn.IDENT,Gn.IDENT,Gn.IDENT,Gn.IDENT,Gn.IDENT,Gn.IDENT,Gn.IDENT,Gn.IDENT,Gn.IDENT,Gn.IDENT,Gn.IDENT,Gn.IDENT,Gn.IDENT,Gn.IDENT,Gn.IDENT,Gn.IDENT,Gn.O_BRK,Gn.BSLASH,Gn.C_BRK,Gn.HAT,Gn.IDENT,Gn.INVALID,Gn.IDENT,Gn.IDENT,Gn.IDENT,Gn.IDENT,Gn.IDENT,Gn.IDENT,Gn.IDENT,Gn.IDENT,Gn.IDENT,Gn.IDENT,Gn.IDENT,Gn.IDENT,Gn.IDENT,Gn.IDENT,Gn.IDENT,Gn.IDENT,Gn.IDENT,Gn.IDENT,Gn.IDENT,Gn.IDENT,Gn.IDENT,Gn.IDENT,Gn.IDENT,Gn.IDENT,Gn.IDENT,Gn.IDENT,Gn.O_BRC,Gn.BAR,Gn.C_BRC,Gn.TILDE,Gn.INVALID];jn.NaN=Gn.EOF;var Kn=[Gn.ENDIDNT,Gn.ENDIDNT,Gn.ENDIDNT,Gn.ENDIDNT,Gn.ENDIDNT,Gn.ENDIDNT,Gn.ENDIDNT,Gn.ENDIDNT,Gn.ENDIDNT,Gn.ENDIDNT,Gn.ENDIDNT,Gn.ENDIDNT,Gn.ENDIDNT,Gn.ENDIDNT,Gn.ENDIDNT,Gn.ENDIDNT,Gn.ENDIDNT,Gn.ENDIDNT,Gn.ENDIDNT,Gn.ENDIDNT,Gn.ENDIDNT,Gn.ENDIDNT,Gn.ENDIDNT,Gn.ENDIDNT,Gn.ENDIDNT,Gn.ENDIDNT,Gn.ENDIDNT,Gn.ENDIDNT,Gn.ENDIDNT,Gn.ENDIDNT,Gn.ENDIDNT,Gn.ENDIDNT,Gn.ENDIDNT,Gn.ENDIDNT,Gn.ENDIDNT,Gn.ENDIDNT,Gn.ENDIDNT,Gn.ENDIDNT,Gn.ENDIDNT,Gn.ENDIDNT,Gn.FUNC,Gn.ENDIDNT,Gn.ENDIDNT,Gn.ENDIDNT,Gn.ENDIDNT,Gn.CONT,Gn.ENDIDNT,Gn.ENDIDNT,Gn.CONT,Gn.CONT,Gn.CONT,Gn.CONT,Gn.CONT,Gn.CONT,Gn.CONT,Gn.CONT,Gn.CONT,Gn.CONT,Gn.ENDIDNT,Gn.ENDIDNT,Gn.ENDIDNT,Gn.ENDIDNT,Gn.ENDIDNT,Gn.ENDIDNT,Gn.ENDIDNT,Gn.CONT,Gn.CONT,Gn.CONT,Gn.CONT,Gn.CONT,Gn.CONT,Gn.CONT,Gn.CONT,Gn.CONT,Gn.CONT,Gn.CONT,Gn.CONT,Gn.CONT,Gn.CONT,Gn.CONT,Gn.CONT,Gn.CONT,Gn.CONT,Gn.CONT,Gn.CONT,Gn.CONT,Gn.CONT,Gn.CONT,Gn.CONT,Gn.CONT,Gn.CONT,Gn.ENDIDNT,Gn.IDNTESC,Gn.ENDIDNT,Gn.ENDIDNT,Gn.CONT,Gn.ENDIDNT,Gn.CONT,Gn.CONT,Gn.CONT,Gn.CONT,Gn.CONT,Gn.CONT,Gn.CONT,Gn.CONT,Gn.CONT,Gn.CONT,Gn.CONT,Gn.CONT,Gn.CONT,Gn.CONT,Gn.CONT,Gn.CONT,Gn.CONT,Gn.CONT,Gn.CONT,Gn.CONT,Gn.CONT,Gn.CONT,Gn.CONT,Gn.CONT,Gn.CONT,Gn.CONT,Gn.ENDIDNT,Gn.ENDIDNT,Gn.ENDIDNT,Gn.ENDIDNT,Gn.ENDIDNT];Kn.NaN=Gn.ENDIDNT;var $n=[Gn.INVALID,Gn.INVALID,Gn.INVALID,Gn.INVALID,Gn.INVALID,Gn.INVALID,Gn.INVALID,Gn.INVALID,Gn.INVALID,Gn.INVALID,Gn.INVALID,Gn.INVALID,Gn.INVALID,Gn.INVALID,Gn.INVALID,Gn.INVALID,Gn.INVALID,Gn.INVALID,Gn.INVALID,Gn.INVALID,Gn.INVALID,Gn.INVALID,Gn.INVALID,Gn.INVALID,Gn.INVALID,Gn.INVALID,Gn.INVALID,Gn.INVALID,Gn.INVALID,Gn.INVALID,Gn.INVALID,Gn.INVALID,Gn.INVALID,Gn.INVALID,Gn.INVALID,Gn.INVALID,Gn.INVALID,Gn.INVALID,Gn.INVALID,Gn.INVALID,Gn.INVALID,Gn.INVALID,Gn.INVALID,Gn.INVALID,Gn.INVALID,Gn.TOCLASS,Gn.TONUM,Gn.INVALID,Gn.TONUM,Gn.TONUM,Gn.TONUM,Gn.TONUM,Gn.TONUM,Gn.TONUM,Gn.TONUM,Gn.TONUM,Gn.TONUM,Gn.TONUM,Gn.INVALID,Gn.INVALID,Gn.INVALID,Gn.INVALID,Gn.INVALID,Gn.INVALID,Gn.INVALID,Gn.TOCLASS,Gn.TOCLASS,Gn.TOCLASS,Gn.TOCLASS,Gn.TOCLASS,Gn.TOCLASS,Gn.TOCLASS,Gn.TOCLASS,Gn.TOCLASS,Gn.TOCLASS,Gn.TOCLASS,Gn.TOCLASS,Gn.TOCLASS,Gn.TOCLASS,Gn.TOCLASS,Gn.TOCLASS,Gn.TOCLASS,Gn.TOCLASS,Gn.TOCLASS,Gn.TOCLASS,Gn.TOCLASS,Gn.TOCLASS,Gn.TOCLASS,Gn.TOCLASS,Gn.TOCLASS,Gn.TOCLASS,Gn.INVALID,Gn.TOIDES,Gn.INVALID,Gn.INVALID,Gn.TOCLASS,Gn.INVALID,Gn.TOCLASS,Gn.TOCLASS,Gn.TOCLASS,Gn.TOCLASS,Gn.TOCLASS,Gn.TOCLASS,Gn.TOCLASS,Gn.TOCLASS,Gn.TOCLASS,Gn.TOCLASS,Gn.TOCLASS,Gn.TOCLASS,Gn.TOCLASS,Gn.TOCLASS,Gn.TOCLASS,Gn.TOCLASS,Gn.TOCLASS,Gn.TOCLASS,Gn.TOCLASS,Gn.TOCLASS,Gn.TOCLASS,Gn.TOCLASS,Gn.TOCLASS,Gn.TOCLASS,Gn.TOCLASS,Gn.TOCLASS,Gn.INVALID,Gn.INVALID,Gn.INVALID,Gn.INVALID,Gn.INVALID];Kn.NaN=Gn.ENDIDNT;var qn=[Gn.END,Gn.END,Gn.END,Gn.END,Gn.END,Gn.END,Gn.END,Gn.END,Gn.END,Gn.END,Gn.END,Gn.END,Gn.END,Gn.END,Gn.END,Gn.END,Gn.END,Gn.END,Gn.END,Gn.END,Gn.END,Gn.END,Gn.END,Gn.END,Gn.END,Gn.END,Gn.END,Gn.END,Gn.END,Gn.END,Gn.END,Gn.END,Gn.END,Gn.END,Gn.END,Gn.END,Gn.END,Gn.END,Gn.END,Gn.END,Gn.END,Gn.END,Gn.END,Gn.END,Gn.END,Gn.MINMIN,Gn.TONUM,Gn.END,Gn.TOINT,Gn.TOINT,Gn.TOINT,Gn.TOINT,Gn.TOINT,Gn.TOINT,Gn.TOINT,Gn.TOINT,Gn.TOINT,Gn.TOINT,Gn.END,Gn.END,Gn.END,Gn.END,Gn.END,Gn.END,Gn.END,Gn.TOIDENT,Gn.TOIDENT,Gn.TOIDENT,Gn.TOIDENT,Gn.TOIDENT,Gn.TOIDENT,Gn.TOIDENT,Gn.TOIDENT,Gn.TOIDENT,Gn.TOIDENT,Gn.TOIDENT,Gn.TOIDENT,Gn.TOIDENT,Gn.TOIDENT,Gn.TOIDENT,Gn.TOIDENT,Gn.TOIDENT,Gn.TOIDENT,Gn.TOIDENT,Gn.TOIDENT,Gn.TOIDENT,Gn.TOIDENT,Gn.TOIDENT,Gn.TOIDENT,Gn.TOIDENT,Gn.TOIDENT,Gn.END,Gn.TOIDES,Gn.END,Gn.END,Gn.TOIDENT,Gn.END,Gn.TOIDENT,Gn.TOIDENT,Gn.TOIDENT,Gn.TOIDENT,Gn.TOIDENT,Gn.TOIDENT,Gn.TOIDENT,Gn.TOIDENT,Gn.TOIDENT,Gn.TOIDENT,Gn.TOIDENT,Gn.TOIDENT,Gn.TOIDENT,Gn.TOIDENT,Gn.TOIDENT,Gn.TOIDENT,Gn.TOIDENT,Gn.TOIDENT,Gn.TOIDENT,Gn.TOIDENT,Gn.TOIDENT,Gn.TOIDENT,Gn.TOIDENT,Gn.TOIDENT,Gn.TOIDENT,Gn.TOIDENT,Gn.END,Gn.END,Gn.END,Gn.END,Gn.END];qn.NaN=Gn.END;var Yn=[Gn.ENDIDES,Gn.ENDIDES,Gn.ENDIDES,Gn.ENDIDES,Gn.ENDIDES,Gn.ENDIDES,Gn.ENDIDES,Gn.ENDIDES,Gn.ENDIDES,Gn.CHKPOSS,Gn.ENDIDES,Gn.ENDIDES,Gn.ENDIDES,Gn.ENDIDES,Gn.ENDIDES,Gn.ENDIDES,Gn.ENDIDES,Gn.ENDIDES,Gn.ENDIDES,Gn.ENDIDES,Gn.ENDIDES,Gn.ENDIDES,Gn.ENDIDES,Gn.ENDIDES,Gn.ENDIDES,Gn.ENDIDES,Gn.ENDIDES,Gn.ENDIDES,Gn.ENDIDES,Gn.ENDIDES,Gn.ENDIDES,Gn.ENDIDES,Gn.CHKPOSS,Gn.ENDIDES,Gn.ENDIDES,Gn.ENDIDES,Gn.ENDIDES,Gn.ENDIDES,Gn.ENDIDES,Gn.ENDIDES,Gn.FUNCES,Gn.ENDIDES,Gn.ENDIDES,Gn.ENDIDES,Gn.ENDIDES,Gn.ENDIDES,Gn.ENDIDES,Gn.ENDIDES,Gn.CONT,Gn.CONT,Gn.CONT,Gn.CONT,Gn.CONT,Gn.CONT,Gn.CONT,Gn.CONT,Gn.CONT,Gn.CONT,Gn.ENDIDES,Gn.ENDIDES,Gn.ENDIDES,Gn.ENDIDES,Gn.ENDIDES,Gn.ENDIDES,Gn.ENDIDES,Gn.CONT,Gn.CONT,Gn.CONT,Gn.CONT,Gn.CONT,Gn.CONT,Gn.CONT,Gn.CONT,Gn.CONT,Gn.CONT,Gn.CONT,Gn.CONT,Gn.CONT,Gn.CONT,Gn.CONT,Gn.CONT,Gn.CONT,Gn.CONT,Gn.CONT,Gn.CONT,Gn.CONT,Gn.CONT,Gn.CONT,Gn.CONT,Gn.CONT,Gn.CONT,Gn.ENDIDES,Gn.IDNTESC,Gn.ENDIDES,Gn.ENDIDES,Gn.CONT,Gn.ENDIDES,Gn.CONT,Gn.CONT,Gn.CONT,Gn.CONT,Gn.CONT,Gn.CONT,Gn.CONT,Gn.CONT,Gn.CONT,Gn.CONT,Gn.CONT,Gn.CONT,Gn.CONT,Gn.CONT,Gn.CONT,Gn.CONT,Gn.CONT,Gn.CONT,Gn.CONT,Gn.CONT,Gn.CONT,Gn.CONT,Gn.CONT,Gn.CONT,Gn.CONT,Gn.CONT,Gn.ENDIDES,Gn.ENDIDES,Gn.ENDIDES,Gn.ENDIDES,Gn.ENDIDES];Yn.NaN=Gn.ENDIDES;var Zn=[Gn.ENDINT,Gn.ENDINT,Gn.ENDINT,Gn.ENDINT,Gn.ENDINT,Gn.ENDINT,Gn.ENDINT,Gn.ENDINT,Gn.ENDINT,Gn.ENDINT,Gn.ENDINT,Gn.ENDINT,Gn.ENDINT,Gn.ENDINT,Gn.ENDINT,Gn.ENDINT,Gn.ENDINT,Gn.ENDINT,Gn.ENDINT,Gn.ENDINT,Gn.ENDINT,Gn.ENDINT,Gn.ENDINT,Gn.ENDINT,Gn.ENDINT,Gn.ENDINT,Gn.ENDINT,Gn.ENDINT,Gn.ENDINT,Gn.ENDINT,Gn.ENDINT,Gn.ENDINT,Gn.ENDINT,Gn.ENDINT,Gn.ENDINT,Gn.ENDINT,Gn.ENDINT,Gn.PCUNIT,Gn.ENDINT,Gn.ENDINT,Gn.ENDINT,Gn.ENDINT,Gn.ENDINT,Gn.ENDINT,Gn.ENDINT,Gn.ENDINT,Gn.NUMBER,Gn.ENDINT,Gn.CONT,Gn.CONT,Gn.CONT,Gn.CONT,Gn.CONT,Gn.CONT,Gn.CONT,Gn.CONT,Gn.CONT,Gn.CONT,Gn.ENDINT,Gn.ENDINT,Gn.ENDINT,Gn.ENDINT,Gn.ENDINT,Gn.ENDINT,Gn.ENDINT,Gn.UNIT,Gn.UNIT,Gn.UNIT,Gn.UNIT,Gn.UNIT,Gn.UNIT,Gn.UNIT,Gn.UNIT,Gn.UNIT,Gn.UNIT,Gn.UNIT,Gn.UNIT,Gn.UNIT,Gn.UNIT,Gn.UNIT,Gn.UNIT,Gn.UNIT,Gn.UNIT,Gn.UNIT,Gn.UNIT,Gn.UNIT,Gn.UNIT,Gn.UNIT,Gn.UNIT,Gn.UNIT,Gn.UNIT,Gn.ENDINT,Gn.ENDINT,Gn.ENDINT,Gn.ENDINT,Gn.UNIT,Gn.ENDINT,Gn.UNIT,Gn.UNIT,Gn.UNIT,Gn.UNIT,Gn.UNIT,Gn.UNIT,Gn.UNIT,Gn.UNIT,Gn.UNIT,Gn.UNIT,Gn.UNIT,Gn.UNIT,Gn.UNIT,Gn.UNIT,Gn.UNIT,Gn.UNIT,Gn.UNIT,Gn.UNIT,Gn.UNIT,Gn.UNIT,Gn.UNIT,Gn.UNIT,Gn.UNIT,Gn.UNIT,Gn.UNIT,Gn.UNIT,Gn.ENDINT,Gn.ENDINT,Gn.ENDINT,Gn.ENDINT,Gn.ENDINT];Zn.NaN=Gn.ENDINT;var Qn=[Gn.ENDNUM,Gn.ENDNUM,Gn.ENDNUM,Gn.ENDNUM,Gn.ENDNUM,Gn.ENDNUM,Gn.ENDNUM,Gn.ENDNUM,Gn.ENDNUM,Gn.ENDNUM,Gn.ENDNUM,Gn.ENDNUM,Gn.ENDNUM,Gn.ENDNUM,Gn.ENDNUM,Gn.ENDNUM,Gn.ENDNUM,Gn.ENDNUM,Gn.ENDNUM,Gn.ENDNUM,Gn.ENDNUM,Gn.ENDNUM,Gn.ENDNUM,Gn.ENDNUM,Gn.ENDNUM,Gn.ENDNUM,Gn.ENDNUM,Gn.ENDNUM,Gn.ENDNUM,Gn.ENDNUM,Gn.ENDNUM,Gn.ENDNUM,Gn.ENDNUM,Gn.ENDNUM,Gn.ENDNUM,Gn.ENDNUM,Gn.ENDNUM,Gn.PCUNIT,Gn.ENDNUM,Gn.ENDNUM,Gn.ENDNUM,Gn.ENDNUM,Gn.ENDNUM,Gn.ENDNUM,Gn.ENDNUM,Gn.ENDNUM,Gn.ENDNUM,Gn.ENDNUM,Gn.CONT,Gn.CONT,Gn.CONT,Gn.CONT,Gn.CONT,Gn.CONT,Gn.CONT,Gn.CONT,Gn.CONT,Gn.CONT,Gn.ENDNUM,Gn.ENDNUM,Gn.ENDNUM,Gn.ENDNUM,Gn.ENDNUM,Gn.ENDNUM,Gn.ENDNUM,Gn.UNIT,Gn.UNIT,Gn.UNIT,Gn.UNIT,Gn.UNIT,Gn.UNIT,Gn.UNIT,Gn.UNIT,Gn.UNIT,Gn.UNIT,Gn.UNIT,Gn.UNIT,Gn.UNIT,Gn.UNIT,Gn.UNIT,Gn.UNIT,Gn.UNIT,Gn.UNIT,Gn.UNIT,Gn.UNIT,Gn.UNIT,Gn.UNIT,Gn.UNIT,Gn.UNIT,Gn.UNIT,Gn.UNIT,Gn.ENDNUM,Gn.ENDNUM,Gn.ENDNUM,Gn.ENDNUM,Gn.UNIT,Gn.ENDNUM,Gn.UNIT,Gn.UNIT,Gn.UNIT,Gn.UNIT,Gn.UNIT,Gn.UNIT,Gn.UNIT,Gn.UNIT,Gn.UNIT,Gn.UNIT,Gn.UNIT,Gn.UNIT,Gn.UNIT,Gn.UNIT,Gn.UNIT,Gn.UNIT,Gn.UNIT,Gn.UNIT,Gn.UNIT,Gn.UNIT,Gn.UNIT,Gn.UNIT,Gn.UNIT,Gn.UNIT,Gn.UNIT,Gn.UNIT,Gn.ENDNUM,Gn.ENDNUM,Gn.ENDNUM,Gn.ENDNUM,Gn.ENDNUM];Qn.NaN=Gn.ENDNUM;var Jn,ti=Xn(Gn.END,[61,Gn.EQTAIL]),ei=Xn(Gn.END,[58,Gn.COL_COL]),ni=Xn(Gn.END,[61,Gn.EQTAIL,124,Gn.BAR_BAR]),ii=Xn(Gn.END,[38,Gn.AMP_AMP]),ri=Xn(Gn.END,[42,Gn.COMMENT]),oi=Xn(Gn.CONT,[42,Gn.COMMST]),ai=Xn(Gn.COMMENT,[42,Gn.COMMST,47,Gn.ENDNOTK]),si=Xn(Gn.KILL1,[62,Gn.ENDNOTK]),ui=Xn(Gn.END,[61,Gn.EQTAIL,33,Gn.LT_BG]),li=Xn(Gn.KILL1,[45,Gn.LT_BG_M]),ci=Xn(Gn.KILL2,[45,Gn.ENDNOTK]),hi=Xn(Gn.IDESCH,[9,Gn.INVALID,10,Gn.INVALID,13,Gn.INVALID,32,Gn.INVALID]),fi=Xn(Gn.CONT,[39,Gn.ENDSTR,10,Gn.INVALID,13,Gn.INVALID,92,Gn.STR1ESC]),di=Xn(Gn.CONT,[34,Gn.ENDSTR,10,Gn.INVALID,13,Gn.INVALID,92,Gn.STR2ESC]),pi=Xn(Gn.CONT,[39,Gn.ENDESTR,10,Gn.CHKPOSN,13,Gn.CHKPOSN,92,Gn.STR1ESC]),gi=Xn(Gn.CONT,[34,Gn.ENDESTR,10,Gn.CHKPOSN,13,Gn.CHKPOSN,92,Gn.STR2ESC]),mi=Xn(Gn.URL,[9,Gn.CONT,32,Gn.CONT,34,Gn.URL2,39,Gn.URL1,41,Gn.INVALID,10,Gn.CONT,13,Gn.CONT]),vi=Xn(Gn.CONT,[41,Gn.ENDURL,9,Gn.CHKSP,10,Gn.CHKSP,13,Gn.CHKSP,32,Gn.CHKSP,92,Gn.URLESC,40,Gn.INVALID,91,Gn.INVALID,93,Gn.INVALID,123,Gn.INVALID,125,Gn.INVALID,NaN,Gn.ENDURL]),Ei=Xn(Gn.CONT,[39,Gn.TERMURL,10,Gn.CHKPOSN,13,Gn.CHKPOSN,92,Gn.URLESC,NaN,Gn.ENDURL]),bi=Xn(Gn.CONT,[34,Gn.TERMURL,10,Gn.CHKPOSN,13,Gn.CHKPOSN,92,Gn.URLESC,NaN,Gn.ENDURL]),Ci=Xn(Gn.INVALID,[9,Gn.CONT,10,Gn.CONT,13,Gn.CONT,32,Gn.CONT,41,Gn.FINURL]),yi=function(){function t(t,e){this.input=t,this.handler=e,this.head=-1,this.tail=0,this.curr=0,this.position=0,this.indexMask=15,this.buffer=Array(this.indexMask+1);for(var n=0;n<=this.indexMask;n++)this.buffer[n]=new Wn}var e=t.prototype;return e.token=function(){return this.tail==this.curr&&this.fillBuffer(),this.buffer[this.curr]},e.nthToken=function(t){return(this.tail-this.curr&this.indexMask)<=t&&this.fillBuffer(),this.buffer[this.curr+t&this.indexMask]},e.consume=function(){this.curr=this.curr+1&this.indexMask},e.mark=function(){if(this.head>=0)throw new Error("F_CSSTOK_BAD_CALL mark");this.head=this.curr},e.reset=function(){if(this.head<0)throw new Error("F_CSSTOK_BAD_CALL reset");this.curr=this.head,this.head=-1},e.unmark=function(){this.head=-1},e.hasMark=function(){return this.head>=0},e.reallocate=function(){for(var t=2*(this.indexMask+1)-1,e=Array(t+1),n=this.head,i=0;n!=this.tail;)e[i]=this.buffer[n],n==this.curr&&(this.curr=i),n=n+1&this.indexMask,i++;for(this.head=0,this.tail=i,this.indexMask=t,this.buffer=e;i<=t;)e[i++]=new Wn},e.error=function(t,e,n){this.handler&&this.handler.error(n,e)},e.fillBuffer=function(){var t=this.tail,e=this.head>=0?this.head:this.curr,n=this.indexMask;if(t>=e?e+=n:e--,e==t){if(this.head<0)throw new Error("F_CSSTOK_INTERNAL");this.reallocate(),t=this.tail,e=n=this.indexMask}for(var i=jn,r=this.input,o=this.position,a=this.buffer,s=kn.EOF,u=0,l="",c=0,h=!1,f=a[t],d=-9;;){var p=r.charCodeAt(o);switch(i[p]||i[65]){case Gn.INVALID:s=kn.INVALID,l=isNaN(p)?"E_CSS_UNEXPECTED_EOF":"E_CSS_UNEXPECTED_CHAR",i=jn,o++;break;case Gn.SPACE:o++,h=!0;continue;case Gn.INT:u=o++,i=Zn;continue;case Gn.IDENT:s=kn.IDENT,u=o++,i=Kn;continue;case Gn.BANG:u=o++,s=kn.BANG,i=ti;continue;case Gn.STR1:s=kn.STR,u=++o,i=fi;continue;case Gn.STR2:s=kn.STR,u=++o,i=di;continue;case Gn.HASH:u=++o,s=kn.HASH,i=Kn;continue;case Gn.DOLLAR:u=o++,s=kn.DOLLAR,i=ti;continue;case Gn.PERCENT:u=o++,s=kn.PERCENT;break;case Gn.AMP:u=o++,s=kn.DOLLAR,i=ii;continue;case Gn.O_PAR:u=o++,s=kn.O_PAR;break;case Gn.C_PAR:u=o++,s=kn.C_PAR;break;case Gn.STAR:u=o++,s=kn.STAR,i=ti;continue;case Gn.PLUS:u=o++,s=kn.PLUS;break;case Gn.COMMA:u=o++,s=kn.COMMA;break;case Gn.MINUS:s=kn.MINUS,u=o++,i=qn;continue;case Gn.DOT:u=o++,i=$n;continue;case Gn.TOCLASS:u=o++,s=kn.CLASS,i=Kn;continue;case Gn.SLASH:u=o++,s=kn.SLASH,i=ri;continue;case Gn.COLON:u=o++,s=kn.COLON,i=ei;continue;case Gn.COL_COL:o++,s=kn.COL_COL;break;case Gn.SEMICOL:u=o++,s=kn.SEMICOL;break;case Gn.LT:u=o++,s=kn.LT,i=ui;continue;case Gn.EQ:u=o++,s=kn.EQ,i=ti;continue;case Gn.GT:u=o++,s=kn.GT,i=ti;continue;case Gn.QMARK:u=o++,s=kn.QMARK;break;case Gn.AT:u=++o,s=kn.AT,i=Kn;continue;case Gn.O_BRK:u=o++,s=kn.O_BRK;break;case Gn.C_BRK:u=o++,s=kn.C_BRK;break;case Gn.O_BRC:u=o++,s=kn.O_BRC;break;case Gn.C_BRC:u=o++,s=kn.C_BRC;break;case Gn.BSLASH:d=u=o++,s=kn.IDENT,i=hi;continue;case Gn.HAT:u=o++,s=kn.HAT,i=ti;continue;case Gn.BAR:u=o++,s=kn.BAR,i=ni;continue;case Gn.TILDE:u=o++,s=kn.TILDE,i=ti;continue;case Gn.END:break;case Gn.EQTAIL:o++,s=s+kn.BANG_EQ-kn.BANG;break;case Gn.ENDINT:s=kn.INT,c=parseInt(r.substring(u,o),10);break;case Gn.ENDNUM:s=kn.NUM,c=parseFloat(r.substring(u,o));break;case Gn.CONT:o++;continue;case Gn.UNIT:s=kn.NUMERIC,c=parseFloat(r.substring(u,o)),u=o++,i=Kn;continue;case Gn.PCUNIT:s=kn.NUMERIC,c=parseFloat(r.substring(u,o)),l="%",u=o++;break;case Gn.NUMBER:o++,i=Qn;continue;case Gn.ENDIDNT:l=r.substring(u,o);break;case Gn.IDNTESC:d=o++,i=hi;continue;case Gn.ENDIDES:l=Hn(r.substring(u,o));break;case Gn.ENDSTR:l=r.substring(u,o),o++;break;case Gn.ENDESTR:l=Hn(r.substring(u,o)),o++;break;case Gn.STR1ESC:d=o,o+=2,i=pi;continue;case Gn.STR2ESC:d=o,o+=2,i=gi;continue;case Gn.BAR_BAR:o++,s=kn.BAR_BAR;break;case Gn.AMP_AMP:o++,s=kn.AMP_AMP;break;case Gn.FUNC:if(l=r.substring(u,o),s==kn.IDENT){if(o++,"url"==l.toLowerCase()){i=mi;continue}s=kn.FUNC}break;case Gn.FUNCES:if(l=Hn(r.substring(u,o)),s==kn.IDENT){if(o++,"url"==l.toLowerCase()){i=mi;continue}s=kn.FUNC}break;case Gn.COMMENT:i=oi,o++;continue;case Gn.COMMST:i=ai,o++;continue;case Gn.ENDNOTK:i=jn,o++;continue;case Gn.MINMIN:i=si,o++;continue;case Gn.TOINT:s=kn.INT,i=Zn,o++;continue;case Gn.TONUM:s=kn.NUM,i=Qn,o++;continue;case Gn.TOIDENT:s=kn.IDENT,i=Kn,o++;continue;case Gn.TOIDES:s=kn.IDENT,i=hi,d=o++;continue;case Gn.KILL1:o--;break;case Gn.KILL2:o-=2;break;case Gn.URL:u=o++,i=vi;continue;case Gn.URL1:u=++o,i=Ei;continue;case Gn.URL2:u=++o,i=bi;continue;case Gn.ENDURL:s=kn.URL,l=Hn(r.substring(u,o)),o++;break;case Gn.FINURL:o++;break;case Gn.LT_BG:i=li,o++;continue;case Gn.LT_BG_M:i=ci,o++;continue;case Gn.CHKSP:if(o-d<8&&r.substring(d+1,o+1).match(/^[0-9a-fA-F]{0,6}(\r\n|[\n\r])|[ \t]$/)){o++;continue}case Gn.TERMURL:s=kn.URL,l=Hn(r.substring(u,o)),o++,i=Ci;continue;case Gn.CHKPOSN:if(++o-d<9&&r.substring(d+1,o).match(/^[0-9a-fA-F]{0,6}(\r\n|[\n\r])$/))continue;s=kn.INVALID,l="E_CSS_UNEXPECTED_NEWLINE",i=jn;break;case Gn.CHKPOSS:if(o-d<9&&r.substring(d+1,o+1).match(/^[0-9a-fA-F]{0,6}[ \t]$/)){o++;continue}l=Hn(r.substring(u,o));break;case Gn.URLESC:d=o++;continue;case Gn.IDESCH:o++,i=Yn;continue;default:if(i!==jn){s=kn.INVALID,l="E_CSS_UNEXPECTED_STATE";break}u=o,s=kn.EOF}if(f.type=s,f.precededBySpace=h,f.num=c,f.text=l,f.position=u,++t>=e)break;i=jn,h=!1,f=a[t&n]}this.position=o,this.tail=t&n},t}(),wi=null,Di=null;function Si(){return wi}function Ni(t){if(!wi)throw new Error("E_TASK_NO_CONTEXT");wi.name||(wi.name=t);var e=wi,n=new ki(e,e.top,t);return e.top=n,n.state=Jn.ACTIVE,n}function Ti(t){return new Oi(t)}function Ai(t,e,n){var i=Ni(t);i.handler=n;try{e(i)}catch(t){i.task.raise(t,i)}return i.result()}!function(t){t[t.INIT=0]="INIT",t[t.ACTIVE=1]="ACTIVE",t[t.FINISHED=2]="FINISHED",t[t.DEAD=3]="DEAD"}(Jn||(Jn={}));var xi=function(){function t(){}var e=t.prototype;return e.currentTime=function(){return(new Date).valueOf()},e.setTimeout=function(t){function e(e,n){return t.apply(this,arguments)}return e.toString=function(){return t.toString()},e}((function(t,e){return setTimeout(t,e)})),e.clearTimeout=function(t){function e(e){return t.apply(this,arguments)}return e.toString=function(){return t.toString()},e}((function(t){clearTimeout(t)})),t}(),Ii=function(){function t(t){this.timer=t,this.timeout=1,this.slice=25,this.sliceOverTime=0,this.wakeupTime=null,this.timeoutToken=null,this.inTimeSlice=!1,this.order=0,this.queue=new Y,Di||(Di=this)}var e=t.prototype;return e.setSlice=function(t){this.slice=t},e.setTimeout=function(t){this.timeout=t},e.isTimeSliceOver=function(){return this.timer.currentTime()>=this.sliceOverTime},e.arm=function(){var t=this;if(!this.inTimeSlice){var e=this.queue.peek().scheduledTime,n=this.timer.currentTime();if(null!=this.timeoutToken){if(n+this.timeout>this.wakeupTime)return;this.timer.clearTimeout(this.timeoutToken)}var i=e-n;i<=this.timeout&&(i=this.timeout),this.wakeupTime=n+i,this.timeoutToken=this.timer.setTimeout((function(){t.timeoutToken=null,t.doTimeSlice()}),i)}},e.schedule=function(t,e){var n=t,i=this.timer.currentTime();n.order=this.order++,n.scheduledTime=i+(e||0),this.queue.add(n),this.arm()},e.doTimeSlice=function(){null!=this.timeoutToken&&(this.timer.clearTimeout(this.timeoutToken),this.timeoutToken=null),this.inTimeSlice=!0;try{var t=this.timer.currentTime();for(this.sliceOverTime=t+this.slice;this.queue.length();){var e=this.queue.peek();if(e.scheduledTime>t)break;if(this.queue.remove(),e.canceled||e.resumeInternal(),(t=this.timer.currentTime())>=this.sliceOverTime)break}}catch(t){f.error(t)}this.inTimeSlice=!1,this.queue.length()&&this.arm()},e.run=function(t,e){var n=new Pi(this,e||"");n.top=new ki(n,null,"bootstrap"),n.top.state=Jn.ACTIVE,n.top.then((function(){var e=function(){n.running=!1;for(var t,e=_(n.callbacks);!(t=e()).done;){var i=t.value;try{i()}catch(t){f.error(t)}}};try{t().then((function(t){n.result=t,e()}))}catch(t){n.raise(t),e()}}));var i=wi;return wi=n,this.schedule(n.top.suspend("bootstrap")),wi=i,n},t}(),Fi=function(){function t(t){this.task=t,this.scheduledTime=0,this.order=0,this.result=null,this.canceled=!1}var e=t.prototype;return e.compare=function(t){return t.scheduledTime-this.scheduledTime||t.order-this.order},e.getTask=function(){return this.task},e.schedule=function(t,e){this.result=t,this.task.scheduler.schedule(this,e)},e.resumeInternal=function(){var t=this.task;if(this.task=null,t&&t.continuation==this){t.continuation=null;var e=wi;return wi=t,t.top.finish(this.result),wi=e,!0}return!1},e.cancel=function(){this.canceled=!0},t}(),Pi=function(){function t(t,e){this.scheduler=t,this.name=e,this.callbacks=[],this.exception=null,this.running=!0,this.result=null,this.waitTarget=null,this.top=null,this.continuation=null}var e=t.prototype;return e.getName=function(){return this.name},e.interrupt=function(t){if(this.raise(t||new Error("E_TASK_INTERRUPT")),this!==wi&&this.continuation){this.continuation.cancel();var e=new Fi(this);this.waitTarget="interrupt",this.continuation=e,this.scheduler.schedule(e)}},e.getScheduler=function(){return this.scheduler},e.isRunning=function(){return this.running},e.whenDone=function(t){this.callbacks.push(t)},e.join=function(){var t=this,e=Ni("Task.join");if(this.running){var n=e.suspend(this);this.whenDone((function(){n.schedule(t.result)}))}else e.finish(this.result);return e.result()},e.unwind=function(){for(;this.top&&!this.top.handler;)this.top=this.top.parent;if(this.top&&this.top.handler&&this.exception){var t=this.exception;this.exception=null,this.top.handler(this.top,t)}else this.exception&&f.error(this.exception,"Unhandled exception in task",this.name)},e.raise=function(t,e){if(this.fillStack(t),e){for(var n=this.top;n&&n!=e;)n=n.parent;n==e&&(this.top=n)}this.exception=t,this.unwind()},e.fillStack=function(t){var e=t.frameTrace;if(!e){e=t.stack?t.stack+"\n\t---- async ---\n":"";for(var n=this.top;n;n=n.parent)e+="\t",e+=n.getName(),e+="\n";t.frameTrace=e}},t}(),Oi=function(){function t(t){this.value=t}var e=t.prototype;return e.then=function(t){t(this.value)},e.thenAsync=function(t){return t(this.value)},e.thenReturn=function(e){return new t(e)},e.thenFinish=function(t){t.finish(this.value)},e.isPending=function(){return!1},e.get=function(){return this.value},t}(),Ri=function(){function t(t){this.frame=t}var e=t.prototype;return e.then=function(t){this.frame.then(t)},e.thenAsync=function(t){if(this.isPending()){var e=new ki(this.frame.task,this.frame.parent,"AsyncResult.thenAsync");return e.state=Jn.ACTIVE,this.frame.parent=e,this.frame.then((function(n){t(n).then((function(t){e.finish(t)}))})),e.result()}return t(this.frame.res)},e.thenReturn=function(t){return this.isPending()?this.thenAsync((function(){return new Oi(t)})):new Oi(t)},e.thenFinish=function(t){this.isPending()?this.then((function(e){t.finish(e)})):t.finish(this.frame.res)},e.isPending=function(){return this.frame.state==Jn.ACTIVE},e.get=function(){if(this.isPending())throw new Error("Result is pending");return this.frame.res},t}(),ki=function(){function t(t,e,n){this.task=t,this.parent=e,this.name=n,this.res=null,this.callback=null,this.handler=null,this.state=Jn.INIT}var e=t.prototype;return e.checkEnvironment=function(){if(!wi)throw new Error("F_TASK_NO_CONTEXT");if(this!==wi.top)throw new Error("F_TASK_NOT_TOP_FRAME")},e.result=function(){return new Ri(this)},e.finish=function(t){this.checkEnvironment(),wi&&!wi.exception&&(this.res=t),this.state=Jn.FINISHED;var e=this.parent;if(wi&&(wi.top=e),this.callback){try{this.callback(t)}catch(t){this.task.raise(t,e)}this.state=Jn.DEAD}},e.getTask=function(){return this.task},e.getName=function(){return this.name},e.getScheduler=function(){return this.task.scheduler},e.then=function(t){switch(this.state){case Jn.ACTIVE:if(this.callback)throw new Error("F_TASK_FRAME_ALREADY_HAS_CALLBACK");this.callback=t;break;case Jn.FINISHED:var e=this.task,n=this.parent;try{t(this.res),this.state=Jn.DEAD}catch(t){this.state=Jn.DEAD,e.raise(t,n)}break;case Jn.DEAD:throw new Error("F_TASK_DEAD_FRAME");default:throw new Error("F_TASK_UNEXPECTED_FRAME_STATE "+this.state)}},e.timeSlice=function(){var t=Ni("Frame.timeSlice");return t.getScheduler().isTimeSliceOver()?(f.debug("-- time slice --"),t.suspend().schedule(!0)):t.finish(!0),t.result()},e.sleep=function(t){var e=Ni("Frame.sleep");return e.suspend().schedule(!0,t),e.result()},e.loop=function(t){var e=Ni("Frame.loop");return function n(i){try{for(;i;){var r=t();if(r.isPending())return void r.then(n);r.then((function(t){i=t}))}e.finish(!0)}catch(t){e.task.raise(t,e)}}(!0),e.result()},e.loopWithFrame=function(t){var e=wi;if(!e)throw new Error("E_TASK_NO_CONTEXT");return this.loop((function(){var n;do{var i=new Li(e,e.top);e.top=i,i.state=Jn.ACTIVE,t(i),n=i.result()}while(!n.isPending()&&n.get());return n}))},e.suspend=function(t){if(this.checkEnvironment(),this.task.continuation)throw new Error("E_TASK_ALREADY_SUSPENDED");var e=new Fi(this.task);return this.task.continuation=e,wi=null,this.task.waitTarget=t||null,e},t}(),Li=function(t){function e(e,n){return t.call(this,e,n,"loop")||this}I(e,t);var n=e.prototype;return n.continueLoop=function(){this.finish(!0)},n.breakLoop=function(){this.finish(!1)},e}(ki),Bi=function(){function t(t,e){this.fetch=t,this.arrived=!1,this.resource=null,this.task=null,this.piggybacks=[],this.name=e}var e=t.prototype;return e.start=function(){var t=this;this.task||(this.task=Si().getScheduler().run((function(){var e=Ni("Fetcher.run");return t.fetch().then((function(n){var i=t.piggybacks;if(t.arrived=!0,t.resource=n,t.task=null,t.piggybacks=[],i)for(var r=0;r<i.length;r++)try{i[r](n)}catch(t){f.error(t,"Error:")}e.finish(n)})),e.result()}),this.name))},e.piggyback=function(t){this.arrived?t(this.resource):this.piggybacks.push(t)},e.get=function(){return this.arrived?Ti(this.resource):(this.start(),this.task.join())},e.hasArrived=function(){return this.arrived},t}(),_i=function(t){if(0==t.length)return Ti(!0);if(1==t.length)return t[0].get().thenReturn(!0);var e=Ni("waitForFetches"),n=0;return e.loop((function(){for(;n<t.length;){var e=t[n++];if(!e.hasArrived())return e.get().thenReturn(!0)}return Ti(!1)})).then((function(){e.finish(!0)})),e.result()};function Mi(t,e){var n=null,i=null;"img"==t.localName&&(n=t.getAttribute("width"),i=t.getAttribute("height"));var r=new Bi((function(){var r=Ni("loadImage"),o=r.suspend(t),a=!1,s=function(e){a||(a=!0,"img"==t.localName&&(n||t.removeAttribute("width"),i||t.removeAttribute("height")),o.schedule(e?e.type:"timeout"))};return t.addEventListener("load",s,!1),t.addEventListener("error",s,!1),t.addEventListener("abort",s,!1),t.namespaceURI==W.SVG?(t.setAttributeNS(W.XLINK,"xlink:href",e),setTimeout(s,300)):t.src=e,r.result()}),"loadElement "+e);return r.start(),r}var Ui,Vi='\n@media screen {\n  [data-vivliostyle-viewer-viewport] {\n    background: #aaaaaa;\n  }\n\n  [data-vivliostyle-page-container] {\n    background: white;\n    z-index: 0;\n  }\n\n  [data-vivliostyle-viewer-viewport] {\n    display: -webkit-flex;\n    display: flex;\n    overflow: auto;\n    position: relative;\n  }\n\n  [data-vivliostyle-outer-zoom-box] {\n    margin: auto;\n    overflow: hidden;\n    -webkit-flex: none;\n    flex: none;\n  }\n\n  [data-vivliostyle-viewer-viewport] [data-vivliostyle-spread-container] {\n    display: -webkit-flex;\n    display: flex;\n    -webkit-flex: none;\n    flex: none;\n    -webkit-justify-content: center;\n    justify-content: center;\n    -moz-transform-origin: left top;\n    -ms-transform-origin: left top;\n    -webkit-transform-origin: left top;\n    transform-origin: left top;\n  }\n\n  [data-vivliostyle-viewer-viewport][data-vivliostyle-page-progression="ltr"]\n    [data-vivliostyle-spread-container] {\n    -webkit-flex-direction: row;\n    flex-direction: row;\n  }\n\n  [data-vivliostyle-viewer-viewport][data-vivliostyle-page-progression="rtl"]\n    [data-vivliostyle-spread-container] {\n    -webkit-flex-direction: row-reverse;\n    flex-direction: row-reverse;\n  }\n\n  [data-vivliostyle-viewer-viewport] [data-vivliostyle-page-container] {\n    margin: 0 auto;\n    -webkit-flex: none;\n    flex: none;\n    transform-origin: center top;\n  }\n\n  [data-vivliostyle-viewer-viewport][data-vivliostyle-spread-view="true"]\n    [data-vivliostyle-page-container][data-vivliostyle-page-side="left"] {\n    margin-right: 1px;\n    transform-origin: right top;\n  }\n\n  [data-vivliostyle-viewer-viewport][data-vivliostyle-spread-view="true"]\n    [data-vivliostyle-page-container][data-vivliostyle-page-side="right"] {\n    margin-left: 1px;\n    transform-origin: left top;\n  }\n\n  [data-vivliostyle-viewer-viewport][data-vivliostyle-spread-view="true"]\n    [data-vivliostyle-page-container][data-vivliostyle-unpaired-page="true"] {\n    margin-left: auto;\n    margin-right: auto;\n    transform-origin: center top;\n  }\n}\n',zi="\n[data-vivliostyle-layout-box] {\n  position: absolute;\n  left: 0;\n  top: 0;\n  right: 0;\n  bottom: 0;\n  overflow: hidden;\n  z-index: -1;\n}\n\n[data-vivliostyle-debug] [data-vivliostyle-layout-box] {\n  right: auto;\n  bottom: auto;\n  overflow: visible;\n  z-index: auto;\n}\n\n[data-vivliostyle-page-container] {\n  position: relative;\n  overflow: hidden;\n}\n\n[data-vivliostyle-bleed-box] {\n  position: absolute;\n  overflow: hidden;\n  max-width: 100%;\n  max-height: 100%;\n  box-sizing: border-box;\n}\n\n[data-vivliostyle-page-box] ~ [data-vivliostyle-page-box] {\n  display: none;\n}\n\n[data-vivliostyle-toc-box] {\n  position: absolute;\n  left: 3px;\n  top: 3px;\n  overflow: scroll;\n  overflow-x: hidden;\n  background: rgba(248, 248, 248, 0.9);\n  border-radius: 2px;\n  box-shadow: 1px 1px 2px rgba(0, 0, 0, 0.4);\n}\n\n@media print {\n  [data-vivliostyle-toc-box] {\n    display: none;\n  }\n\n  [data-vivliostyle-outer-zoom-box],\n  [data-vivliostyle-spread-container] {\n    width: 100% !important;\n    height: 100% !important;\n  }\n\n  [data-vivliostyle-spread-container],\n  [data-vivliostyle-page-container] {\n    -moz-transform: none !important;\n    -ms-transform: none !important;\n    -webkit-transform: none !important;\n    transform: none !important;\n  }\n\n  [data-vivliostyle-page-container] {\n    display: block !important;\n    max-width: 100%;\n    height: 100% !important;\n    max-height: 100%;\n  }\n\n  /* Workaround for Chrome printing problem */\n  /* [data-vivliostyle-page-box] {\n        padding-bottom: 0 !important;\n        overflow: visible !important;\n    } */\n  [data-vivliostyle-bleed-box] > div > div::before {\n    display: block;\n    content: \"\";\n    padding-top: 0.015625px;\n    margin-bottom: -0.015625px;\n  }\n\n  /* Gecko-only hack, see https://bugzilla.mozilla.org/show_bug.cgi?id=267029#c17 */\n  @-moz-document regexp('.*') {\n    [data-vivliostyle-page-container]:nth-last-child(n + 2) {\n      top: -1px;\n      margin-top: 1px;\n      margin-bottom: -1px;\n    }\n  }\n}\n",Hi="\n/*\n * Copyright 2013 Google, Inc.\n * Copyright 2015 Trim-marks Inc.\n * Copyright 2019 Vivliostyle Foundation\n *\n * CSS property validation.\n */\nNUM = POS_NUM | ZERO | NEGATIVE;\nNNEG_NUM = POS_NUM | ZERO;\nINT = POS_INT | ZERO | NEGATIVE;\nNNEG_INT = POS_INT | ZERO;\nPERCENTAGE = POS_PERCENTAGE | ZERO | NEGATIVE;\nSTRICT_PERCENTAGE = POS_PERCENTAGE | ZERO_PERCENTAGE | NEGATIVE;\nNNEG_PERCENTAGE = POS_PERCENTAGE | ZERO;\nLENGTH = POS_LENGTH | ZERO | NEGATIVE;\nNNEG_LENGTH = POS_LENGTH | ZERO | NEGATIVE;\nPLENGTH = LENGTH | PERCENTAGE;\nPPLENGTH = POS_LENGTH | ZERO | POS_PERCENTAGE;\nALENGTH = LENGTH | auto;\nAPLENGTH = PLENGTH | auto;\nPAPLENGTH = PPLENGTH | auto;\nANGLE = POS_ANGLE | ZERO | NEGATIVE;\nLENGTH_OR_NUM = LENGTH | NUM;\nANGLE_OR_NUM = ANGLE | NUM;\nSCOLOR = HASHCOLOR | aliceblue: #F0F8FF | antiquewhite: #FAEBD7 | aqua: #00FFFF | aquamarine: #7FFFD4 | azure: #F0FFFF |\n    beige: #F5F5DC | bisque: #FFE4C4 | black: #000000 | blanchedalmond: #FFEBCD | blue: #0000FF | blueviolet: #8A2BE2 | brown: #A52A2A |\n    burlywood: #DEB887 | cadetblue: #5F9EA0 | chartreuse: #7FFF00 | chocolate: #D2691E | coral: #FF7F50 | cornflowerblue: #6495ED |\n    cornsilk: #FFF8DC | crimson: #DC143C | cyan: #00FFFF | darkblue: #00008B | darkcyan: #008B8B | darkgoldenrod: #B8860B |\n    darkgray: #A9A9A9 | darkgreen: #006400 | darkgrey: #A9A9A9 | darkkhaki: #BDB76B | darkmagenta: #8B008B | darkolivegreen: #556B2F |\n    darkorange: #FF8C00 | darkorchid: #9932CC | darkred: #8B0000 | darksalmon: #E9967A | darkseagreen: #8FBC8F | darkslateblue: #483D8B |\n    darkslategray: #2F4F4F | darkslategrey: #2F4F4F | darkturquoise: #00CED1 | darkviolet: #9400D3 | deeppink: #FF1493 |\n    deepskyblue: #00BFFF | dimgray: #696969 | dimgrey: #696969 | dodgerblue: #1E90FF | firebrick: #B22222 | floralwhite: #FFFAF0 |\n    forestgreen: #228B22 | fuchsia: #FF00FF | gainsboro: #DCDCDC | ghostwhite: #F8F8FF | gold: #FFD700 | goldenrod: #DAA520 |\n    gray: #808080 | green: #008000 | greenyellow: #ADFF2F | grey: #808080 | honeydew: #F0FFF0 | hotpink: #FF69B4 | indianred: #CD5C5C |\n    indigo: #4B0082 | ivory: #FFFFF0 | khaki: #F0E68C | lavender: #E6E6FA | lavenderblush: #FFF0F5 | lawngreen: #7CFC00 |\n    lemonchiffon: #FFFACD | lightblue: #ADD8E6 | lightcoral: #F08080 | lightcyan: #E0FFFF | lightgoldenrodyellow: #FAFAD2 |\n    lightgray: #D3D3D3 | lightgreen: #90EE90 | lightgrey: #D3D3D3 | lightpink: #FFB6C1 | lightsalmon: #FFA07A | lightseagreen: #20B2AA |\n    lightskyblue: #87CEFA | lightslategray: #778899 | lightslategrey: #778899 | lightsteelblue: #B0C4DE | lightyellow: #FFFFE0 |\n    lime: #00FF00 | limegreen: #32CD32 | linen: #FAF0E6 | magenta: #FF00FF | maroon: #800000 | mediumaquamarine: #66CDAA |\n    mediumblue: #0000CD | mediumorchid: #BA55D3 | mediumpurple: #9370DB | mediumseagreen: #3CB371 | mediumslateblue: #7B68EE |\n    mediumspringgreen: #00FA9A | mediumturquoise: #48D1CC | mediumvioletred: #C71585 | midnightblue: #191970 | mintcream: #F5FFFA |\n    mistyrose: #FFE4E1 | moccasin: #FFE4B5 | navajowhite: #FFDEAD | navy: #000080 | oldlace: #FDF5E6 | olive: #808000 |\n    olivedrab: #6B8E23 | orange: #FFA500 | orangered: #FF4500 | orchid: #DA70D6 | palegoldenrod: #EEE8AA | palegreen: #98FB98 |\n    paleturquoise: #AFEEEE | palevioletred: #DB7093 | papayawhip: #FFEFD5 | peachpuff: #FFDAB9 | peru: #CD853F | pink: #FFC0CB |\n    plum: #DDA0DD | powderblue: #B0E0E6 | purple: #800080 | rebeccapurple: #663399 | red: #FF0000 | rosybrown: #BC8F8F | royalblue: #4169E1 |\n    saddlebrown: #8B4513 | salmon: #FA8072 | sandybrown: #F4A460 | seagreen: #2E8B57 | seashell: #FFF5EE | sienna: #A0522D |\n    silver: #C0C0C0 | skyblue: #87CEEB | slateblue: #6A5ACD | slategray: #708090 | slategrey: #708090 | snow: #FFFAFA |\n    springgreen: #00FF7F | steelblue: #4682B4 | tan: #D2B48C | teal: #008080 | thistle: #D8BFD8 | tomato: #FF6347 |\n    turquoise: #40E0D0 | violet: #EE82EE | wheat: #F5DEB3 | white: #FFFFFF | whitesmoke: #F5F5F5 | yellow: #FFFF00 |\n    yellowgreen: #9ACD32 | transparent | currentcolor;\nRGBCOLOR = rgb(INT{3}) | rgb(STRICT_PERCENTAGE{3});\nRGBACOLOR = rgba(NUM{4}) | rgba(STRICT_PERCENTAGE{3} NUM);\nHSLCOLOR = hsl(NUM PERCENTAGE{2});\nHSLACOLOR = hsl(NUM PERCENTAGE{2} NUM);\nCOLOR = SCOLOR | RGBCOLOR | RGBACOLOR | HSLCOLOR | HSLACOLOR;\nBG_POSITION_TERM = PLENGTH | left | center | right | top | bottom;\nSIDE_OR_CORNER =  [left | right] || [top | bottom];\nCOLOR_STOP = SPACE(COLOR [PERCENTAGE | LENGTH]?);\nLINEAR_GRADIENT = linear-gradient([ANGLE | SPACE(to SIDE_OR_CORNER)]? COLOR_STOP+) |\n                  repeating-linear-gradient([ANGLE | SPACE(to SIDE_OR_CORNER)]? COLOR_STOP+) |;\nGRADIENT_EXTENT = closest-corner | closest-side | farthest-corner | farthest-side;\nGRADIENT_POSITION = at BG_POSITION_TERM{1,4};\nGRADIENT_SHAPE = SPACE(circle LENGTH? GRADIENT_POSITION?) | SPACE(ellipse PLENGTH{2}? GRADIENT_POSITION?)| SPACE([circle | ellipse] GRADIENT_EXTENT? GRADIENT_POSITION?);\nRADIAL_GRADIENT = radial-gradient([GRADIENT_SHAPE | SPACE(GRADIENT_POSITION)]? COLOR_STOP+) |\n                  repeating-radial-gradient([GRADIENT_SHAPE | SPACE(GRADIENT_POSITION)]? COLOR_STOP+);\nURI_OR_NONE = URI | none;\nIMAGE =  URI | LINEAR_GRADIENT | RADIAL_GRADIENT | none;\nazimuth = ANGLE | [[ left-side | far-left | left | center-left | center | center-right | right | far-right | right-side ] || behind ] | leftwards | rightwards;\nbackground-attachment = COMMA( [scroll | fixed | local]+ );\nbackground-color = COLOR;\nbackground-image = COMMA( IMAGE+ );\nbackground-position = COMMA( SPACE(BG_POSITION_TERM{1,4})+ ); /* relaxed */\nbackground-repeat = COMMA( [repeat | repeat-x | repeat-y | no-repeat]+ );\nborder-collapse = collapse | separate;\nBORDER_SIDE_COLOR = COLOR;\nBORDER_SIDE_STYLE = none | hidden | dotted | dashed | solid | double | groove | ridge | inset | outset;\nBORDER_SIDE_WIDTH = thin: 1px | medium: 3px | thick: 5px | NNEG_LENGTH;\nborder-spacing = LENGTH LENGTH?;\nborder-top-color = BORDER_SIDE_COLOR;\nborder-right-color = BORDER_SIDE_COLOR;\nborder-bottom-color = BORDER_SIDE_COLOR;\nborder-left-color = BORDER_SIDE_COLOR;\nborder-top-style = BORDER_SIDE_STYLE;\nborder-right-style = BORDER_SIDE_STYLE;\nborder-bottom-style = BORDER_SIDE_STYLE;\nborder-left-style = BORDER_SIDE_STYLE;\nborder-top-width = BORDER_SIDE_WIDTH;\nborder-right-width = BORDER_SIDE_WIDTH;\nborder-bottom-width = BORDER_SIDE_WIDTH;\nborder-left-width = BORDER_SIDE_WIDTH;\nBORDER_RADIUS = PLENGTH{1,2};\nborder-top-left-radius = BORDER_RADIUS;\nborder-top-right-radius = BORDER_RADIUS;\nborder-bottom-right-radius = BORDER_RADIUS;\nborder-bottom-left-radius = BORDER_RADIUS;\nborder-image-source = IMAGE;\nborder-image-slice = [NUM | PERCENTAGE]{1,4} || fill; /* relaxed */\nborder-image-width = [NUM | PLENGTH | auto]{1,4};\nborder-image-outset = [NUM | LENGTH]{1,4};\nborder-image-repeat = [ stretch | repeat | round | space ]{1,2};\nbottom = APLENGTH;\ncaption-side = top | bottom;\nclear = none | left | right | top | bottom | both | all | same;\nclip = rect(ALENGTH{4}) | rect(SPACE(ALENGTH{4})) | auto;\ncolor = COLOR;\nLIST_STYLE_TYPE = disc | circle | square | decimal | decimal-leading-zero | lower-roman |\n    upper-roman | lower-greek | lower-latin | upper-latin | armenian | georgian | lower-alpha |\n    upper-alpha | russian | upper-russian | lower-russian | cjk-ideographic | trad-chinese-informal |\n    hebrew | none;\nTYPE_OR_UNIT_IN_ATTR = string | color | url | integer | number | length | angle | time | frequency;\nATTR = attr(SPACE(IDENT TYPE_OR_UNIT_IN_ATTR?) [ STRING | IDENT | COLOR | INT | NUM | PLENGTH | ANGLE | POS_TIME | FREQUENCY]?);\nCONTENT_LIST = [ STRING | URI | counter(IDENT LIST_STYLE_TYPE?) |\n    counters(IDENT STRING LIST_STYLE_TYPE?) | ATTR |\n    target-counter([ STRING | URI ] IDENT LIST_STYLE_TYPE?) |\n    target-counter(ATTR IDENT LIST_STYLE_TYPE?) |\n    target-counters([ STRING | URI ] IDENT STRING LIST_STYLE_TYPE?) |\n    target-counters(ATTR IDENT STRING LIST_STYLE_TYPE?) |\n    open-quote | close-quote | no-open-quote | no-close-quote |\n    content([ text | before | after | first-letter ]?) |\n    string(IDENT [first | start | last | first-except]?) ]+;\nCONTENT = normal | none | CONTENT_LIST;\ncontent = CONTENT;\nCOUNTER = [ IDENT INT? ]+ | none;\ncounter-increment = COUNTER;\ncounter-reset = COUNTER;\ncounter-set = COUNTER;\ncue-after = URI_OR_NONE;\ncue-before = URI_OR_NONE;\ncursor = COMMA(URI* [ auto | crosshair | default | pointer | move | e-resize | ne-resize | nw-resize |\n    n-resize | se-resize | sw-resize | s-resize | w-resize | text | wait | help | progress ]);\ndirection = ltr | rtl;\ndisplay = inline | block | list-item | inline-block | table | inline-table | table-row-group |\n    table-header-group | table-footer-group | table-row | table-column-group | table-column |\n    table-cell | table-caption | none | oeb-page-head | oeb-page-foot | flex | inline-flex |\n    ruby | ruby-base | ruby-text | ruby-base-container | ruby-text-container | run-in | compact | marker;\nelevation = ANGLE | below | level | above | higher | lower;\nempty-cells = show | hide;\nFAMILY = SPACE(IDENT+) | STRING;\nFAMILY_LIST = COMMA( FAMILY+ );\nfont-family = FAMILY_LIST;\nfont-size = xx-small | x-small | small | medium | large | x-large | xx-large | larger | smaller | PPLENGTH | POS_NUM;\nfont-style = normal | italic | oblique;\nfont-variant = normal | small-caps;\nfont-weight = normal | bold | bolder | lighter | 100 | 200 | 300 | 400 | 500 | 600 | 700 | 800 | 900;\nheight = PAPLENGTH | POS_NUM ;\nleft = APLENGTH;\nletter-spacing = normal | LENGTH_OR_NUM;\nline-height = normal | POS_NUM | PPLENGTH;\nlist-style-image = IMAGE;\nlist-style-position = inside | outside;\nlist-style-type = LIST_STYLE_TYPE;\nmargin-right = APLENGTH;\nmargin-left = APLENGTH;\nmargin-top = APLENGTH;\nmargin-bottom = APLENGTH;\nNPLENGTH = none | PLENGTH;\nmax-height = NPLENGTH;\nmax-width = NPLENGTH;\nmin-height = auto | PLENGTH;\nmin-width = auto | PLENGTH;\norphans = POS_INT;\noutline-offset = LENGTH;\noutline-color = COLOR | invert;\noutline-style = BORDER_SIDE_STYLE;\noutline-width = BORDER_SIDE_WIDTH;\noverflow = visible | hidden | scroll | auto;\npadding-right = PPLENGTH;\npadding-left = PPLENGTH;\npadding-top = PPLENGTH;\npadding-bottom = PPLENGTH;\nPAGE_BREAK = auto | always | avoid | left | right | recto | verso;\npage-break-after = PAGE_BREAK;\npage-break-before = PAGE_BREAK;\npage-break-inside = avoid | auto;\nPAUSE = POS_TIME | ZERO | POS_PERCENTAGE;\npause-after = PAUSE;\npause-before = PAUSE;\npitch-range = NUM;\npitch = FREQUENCY | x-low | low | medium | high | x-high;\nplay-during = [URI [ mix || repeat ]?] | auto | none;\nposition = static | relative | absolute | fixed;\nquotes = [STRING STRING]+ | none;\nrichness = NUM;\nright = APLENGTH;\nspeak-header = once | always;\nspeak-numeral = digits | continuous;\nspeak-punctuation = code | none;\nspeech-rate = NUM | x-slow | slow | medium | fast | x-fast | faster | slower;\nstress = NUM;\ntable-layout = auto | fixed;\ntext-align = left | right | center | justify | start | end;\ntext-decoration = none | [ underline || overline || line-through || blink ];\ntext-indent = PLENGTH;\ntext-transform = capitalize | uppercase | lowercase | none;\ntop = APLENGTH;\nvertical-align = baseline | sub | super | top | text-top | middle | bottom | text-bottom | PLENGTH;\nvisibility = visible | hidden | collapse;\nvoice-family = FAMILY_LIST;\nvolume = NUM | PERCENTAGE | silent | x-soft | soft | medium | loud | x-loud;\nwhite-space = normal | pre | nowrap | pre-wrap | pre-line;\nwidows = POS_INT;\nwidth = PAPLENGTH | POS_NUM ;\nword-spacing = normal | LENGTH_OR_NUM;\nz-index = auto | INT;\n\n[epub,moz,ms,webkit]hyphens = auto | manual | none;\n[webkit]hyphenate-character = auto | STRING;\n\n/* css-logical */\nmargin-block-start = APLENGTH;\nmargin-block-end = APLENGTH;\nmargin-inline-start = APLENGTH;\nmargin-inline-end = APLENGTH;\npadding-block-start = APLENGTH;\npadding-block-end = APLENGTH;\npadding-inline-start = APLENGTH;\npadding-inline-end = APLENGTH;\nborder-block-start-color = BORDER_SIDE_COLOR;\nborder-block-end-color = BORDER_SIDE_COLOR;\nborder-inline-start-color = BORDER_SIDE_COLOR;\nborder-inline-end-color = BORDER_SIDE_COLOR;\nborder-block-start-style = BORDER_SIDE_STYLE;\nborder-block-end-style = BORDER_SIDE_STYLE;\nborder-inline-start-style = BORDER_SIDE_STYLE;\nborder-inline-end-style = BORDER_SIDE_STYLE;\nborder-block-start-width = BORDER_SIDE_WIDTH;\nborder-block-end-width = BORDER_SIDE_WIDTH;\nborder-inline-start-width = BORDER_SIDE_WIDTH;\nborder-inline-end-width = BORDER_SIDE_WIDTH;\nblock-start = APLENGTH;\nblock-end = APLENGTH;\ninline-start = APLENGTH;\ninline-end = APLENGTH;\nblock-size = PAPLENGTH | POS_NUM;\ninline-size = PAPLENGTH | POS_NUM;\nmax-block-size = NPLENGTH;\nmax-inline-size = NPLENGTH;\nmin-block-size = auto | PLENGTH;\nmin-inline-size = auto | PLENGTH;\n\nSHAPE = auto | rectangle( PLENGTH{4} ) |  ellipse( PLENGTH{4} ) |  circle( PLENGTH{3} ) |\n    polygon( SPACE(PLENGTH+)+ );\n[epubx]shape-inside = SHAPE;\n[epubx,webkit]shape-outside = SHAPE;\n[epubx,ms]wrap-flow = auto | both | start | end | maximum | clear | around /* epub al */;\n\nTRANSFORM_FUNCTION = matrix(NUM{6}) | translate(PLENGTH{1,2}) | translateX(PLENGTH) | translateY(PLENGTH) |\n scale(NUM{1,2}) | scaleX(NUM) | scaleY(NUM) | rotate(ANGLE) | skewX(ANGLE) | skewY(ANGLE);\n[epub,ms]transform = none | TRANSFORM_FUNCTION+;\n[epub,ms]transform-origin = [[[ top | bottom | left | right] PLENGTH?] | center | PLENGTH]{1,2}; /* relaxed */\n\nBOX = border-box | padding-box | content-box;\nSHADOW = SPACE(inset || LENGTH{2,4} || COLOR); /* relaxed */\n[webkit]background-size = COMMA( SPACE( [PLENGTH | auto ]{1,2} | cover | contain)+ );\n[webkit]background-origin = COMMA( BOX+ );\n[webkit]background-clip = COMMA( BOX+ );\n[webkit]box-shadow = none | COMMA( SHADOW+ );\ntext-shadow = none |  COMMA( SHADOW+ );\n[webkit]box-decoration-break = slice | clone;\nFILTER_FUNCTION = blur(LENGTH) | brightness(NUM | PERCENTAGE) | contrast(NUM | PERCENTAGE) | drop-shadow(SPACE(LENGTH{2,3} COLOR?))\n                | grayscale(NUM | PERCENTAGE) | hue-rotate(ANGLE) | invert(NUM | PERCENTAGE) | opacity(NUM | PERCENTAGE)\n                | saturate(NUM | PERCENTAGE) | sepia(NUM | PERCENTAGE);\nFILTER_FUNCTION_LIST = FILTER_FUNCTION+;\n[webkit]filter = none | FILTER_FUNCTION_LIST;\n\nopacity = NUM;\n\n[moz,webkit]column-width = LENGTH | auto;\n[moz,webkit]column-count = INT | auto;\n[moz,webkit]column-gap = LENGTH | normal;\n[moz,webkit]column-rule-color = COLOR;\n[moz,webkit]column-rule-style = BORDER_SIDE_STYLE;\n[moz,webkit]column-rule-width = BORDER_SIDE_WIDTH;\nBREAK = auto | avoid | avoid-page | page | left | right | recto | verso | avoid-column | column | avoid-region | region;\nbreak-before = BREAK;\nbreak-after = BREAK;\nbreak-inside = auto | avoid | avoid-page | avoid-column | avoid-region;\n[webkit]column-span = none | auto | all;\n[moz]column-fill = auto | balance | balance-all;\n\nsrc = COMMA([SPACE(URI format(STRING+)?) | local(FAMILY)]+); /* for font-face */\n\n[epubx,webkit]flow-from = IDENT;\n[epubx,webkit]flow-into = IDENT;\n[epubx]flow-linger = INT | none;\n[epubx]flow-priority = INT;\n[epubx]flow-options = none | [ exclusive || last || static ];\n[epubx]page = INT | auto;\n[epubx]min-page-width = LENGTH;\n[epubx]min-page-height = LENGTH;\n[epubx]required = true | false;\n[epubx]enabled = true | false;\n[epubx]conflicting-partitions = COMMA(IDENT+);\n[epubx]required-partitions = COMMA(IDENT+);\n[epubx]snap-height = LENGTH | none;\n[epubx]snap-width = LENGTH | none;\n[epubx]flow-consume = all | some;\n[epubx]utilization = NUM;\n[epubx]text-zoom = font-size | scale;\n\n[adapt]template = URI_OR_NONE;\n[adapt]behavior = IDENT;\n\n/* CSS Fonts */\nfont-size-adjust = none | NNEG_NUM;\n[webkit]font-kerning = auto | normal | none;\nfont-variant-east-asian = normal | [[ jis78 | jis83 | jis90 | jis04 | simplified | traditional ] || [ full-width | proportional-width ] || ruby];\nfont-feature-settings = COMMA( normal | SPACE( STRING [ on | off | INT ]? )+ );\nfont-stretch = normal | wider | narrower | ultra-condensed | extra-condensed | condensed | semi-condensed | semi-expanded | expanded | extra-expanded | ultra-expanded;\n\n/* CSS Images */\nimage-resolution = RESOLUTION;\nobject-fit = fill | contain | cover | none | scale-down;\nobject-position = COMMA( SPACE(BG_POSITION_TERM{1,4})+ ); /* relaxed */\n\n/* CSS Paged Media */\nPAGE_SIZE = a5 | a4 | a3 | b5 | b4 | jis-b5 | jis-b4 | letter | legal | ledger;\nbleed = auto | LENGTH;\nmarks = none | [ crop || cross ];\nsize = POS_LENGTH{1,2} | auto | [ PAGE_SIZE || [ portrait | landscape ] ];\n\n/* CSS Page Floats */\nfloat-reference = inline | column | region | page;\nfloat = block-start | block-end | inline-start | inline-end | snap-block | snap-inline | left | right | top | bottom | none | footnote;\nfloat-min-wrap-block = PPLENGTH;\n\n/* CSS Ruby */\nruby-align = start | center | space-between | space-around;\nruby-position = over | under | inter-character;\n\n/* CSS Size Adjust */\n[moz,ms]text-size-adjust = auto | none | POS_PERCENTAGE;\n\n/* CSS Text */\n[ms,webkit]line-break = auto | loose | normal | strict;\noverflow-wrap = normal | break-word;\n[moz]tab-size = NNEG_INT | NNEG_LENGTH;\n[moz,ms]text-align-last = auto | start | end | left | right | center | justify;\n[ms]text-justify = auto | none | inter-word | inter-character | inter-ideograph /* specified in UA stylesheet for IE */;\n[ms]word-break = normal | keep-all | break-all | break-word;\n[ms]word-wrap = normal | break-word;\n\n/* CSS Text Decoration */\n[webkit]text-decoration-color = COLOR;\n[webkit]text-decoration-line = none | [ underline || overline || line-through || blink ];\n[webkit]text-decoration-skip = none | [ objects || spaces || ink || edges || box-decoration ];\n[webkit]text-decoration-style = solid | double | dotted | dashed | wavy;\n[epub,webkit]text-emphasis-color = COLOR;\n[webkit]text-emphasis-position = [ over | under ] [ right | left ];\n[epub,webkit]text-emphasis-style = none | [[ filled | open ] || [ dot | circle | double-circle | triangle | sesame ]] | STRING;\n[ms,webkit]text-underline-position = auto | [ under || [ left | right ]];\n\n/* CSS Transforms */\n[ms,webkit]backface-visibility = visible | hidden;\n\n/* CSS UI */\nbox-sizing = content-box | padding-box | border-box;\n[ms]text-overflow = [clip | ellipsis | STRING]{1,2};\n\n/* CSS Writing Modes */\n[webkit]text-combine = none | horizontal;\n[epub,ms]text-combine-horizontal = none | all | [ digits POS_INT? ]; /* relaxed */\ntext-combine-upright = none | all | [ digits POS_INT? ]; /* relaxed */\n[epub,webkit]text-orientation = mixed | upright | sideways-right | sideways-left | sideways | use-glyph-orientation /* the following values are kept for backward-compatibility */ | vertical-right | rotate-right | rotate-left | rotate-normal | auto;\nunicode-bidi = normal | embed | isolate | bidi-override | isolate-override | plaintext;\n[epub,webkit]writing-mode = horizontal-tb | vertical-rl | lr-tb | rl-tb | tb-rl | lr | rl | tb;\n\n/* CSS Flex box */\nFLEX_BASIS = content | PAPLENGTH;\nflex-direction = row | row-reverse | column | column-reverse;\nflex-wrap = nowrap | wrap | wrap-reverse;\norder = INT;\nflex-grow = NNEG_NUM;\nflex-shrink = NNEG_NUM;\nflex-basis = FLEX_BASIS;\nflex = none | [ [ NNEG_NUM NNEG_NUM? ] || FLEX_BASIS ];\njustify-content = flex-start | flex-end | center | space-between | space-around;\nalign-items = flex-start | flex-end | center | baseline | stretch;\nalign-self = auto | flex-start | flex-end | center | baseline | stretch;\nalign-content = flex-start | flex-end | center | space-between | space-around | stretch;\n\n/* Pointer Events */\n[ms]touch-action = auto | none | [ pan-x || pan-y ] | manipulation;\n\n/* SVG 2 */\nOPACITY_VALUE = NUM | PERCENTAGE;\nDASH_ARRAY = COMMA( SPACE( [ LENGTH | PERCENTAGE | NUM ]+ )+ );\nPAINT = none | child | child(INT) | COLOR | SPACE( URI [none | COLOR]? ) | context-fill | context-stroke;\ncolor-interpolation = auto | sRGB | linearRGB;\ncolor-rendering = auto | optimizeSpeed | optimizeQuality;\nfill = PAINT;\nfill-opacity = OPACITY_VALUE;\nfill-rule = nonzero | evenodd;\nglyph-orientation-vertical = auto | NUM | ANGLE;\nimage-rendering = auto | optimizeSpeed | optimizeQuality | crisp-edges | pixelated;\nmarker-start = none | URI;\nmarker-mid = none | URI;\nmarker-end = none | URI;\npointer-events = bounding-box | visiblePainted | visibleFill | visibleStroke | visible | painted | fill | stroke | all | none;\npaint-order = normal | [ fill || stroke || markers ];\nshape-rendering = auto | optimizeSpeed | crispEdges | geometricPrecision;\nstop-color = COLOR;\nstop-opacity = OPACITY_VALUE;\nstroke = PAINT;\nstroke-dasharray = none | DASH_ARRAY;\nstroke-dashoffset = PERCENTAGE | LENGTH_OR_NUM;\nstroke-linecap = butt | round | square;\nstroke-linejoin = miter | round | bevel;\nstroke-miterlimit = NUM;\nstroke-opacity = OPACITY_VALUE;\nstroke-width = PERCENTAGE | LENGTH_OR_NUM;\ntext-anchor = start | middle | end;\ntext-rendering = auto | optimizeSpeed | optimizeLegibility | geometricPrecision;\nvector-effect = none | SPACE( [ non-scaling-stroke | non-scaling-size | non-rotation | fixed-position ]+ [ viewport | screen ]? );\n\n/* SVG 1.1 */\nalignment-baseline = auto | baseline | before-edge | text-before-edge | middle | central | after-edge | text-after-edge | ideographic | alphabetic | hanging | mathematical;\nbaseline-shift = baseline | sub | super | PERCENTAGE | LENGTH_OR_NUM;\ndominant-baseline = auto | use-script | no-change | reset-size | ideographic | alphabetic | hanging | mathematical | central | middle | text-after-edge | text-before-edge;\nmask = none | URI;\n\n/* css-masking-1 */\nSHAPE_RADIUS = PLENGTH | closest-side | farthest-side;\nFILL_RULE = nonzero | evenodd;\nSHAPE_BOX = BOX | margin-box;\nGEOMETRY_BOX = SHAPE_BOX | fill-box | stroke-box | view-box;\nBASIC_SHAPE =\n    inset( SPACE( PLENGTH{1,4} [ round PLENGTH{1,4} [ SLASH PLENGTH{1,4} ]? ]? ) )\n  | circle(  SPACE( [SHAPE_RADIUS]?    [at BG_POSITION_TERM{1,4}]? ) )\n  | ellipse( SPACE( SHAPE_RADIUS{2}? [at BG_POSITION_TERM{1,4}]? ) )\n  | polygon( FILL_RULE? COMMA( SPACE( PLENGTH{2} )+ )+ );\n[webkit]clip-path = none | URI | [ BASIC_SHAPE || GEOMETRY_BOX ];\nclip-rule = nonzero | evenodd;\n\n/* filters */\nflood-color = COLOR;\nflood-opacity = OPACITY_VALUE;\nlighting-color = COLOR;\n\n/* compositing-1 */\nBLEND_MODE = normal | multiply | screen | overlay | darken | lighten | color-dodge | color-burn | hard-light | soft-light | difference | exclusion | hue | saturation | color | luminosity;\nmix-blend-mode = BLEND_MODE;\nisolation = auto | isolate;\nbackground-blend-mode = COMMA( BLEND_MODE+ );\n\n/* CSS GCPM */\nstring-set = COMMA( SPACE( IDENT CONTENT_LIST )+ | none );\nfootnote-policy = auto | line;\n\n/* CSS Repeated Headers and Footers */\n[viv]repeat-on-break = auto | none | header | footer;\n\nDEFAULTS\n\nbackground-attachment: scroll;\nbackground-color: transparent;\nbackground-image: none;\nbackground-repeat: repeat;\nbackground-position: 0% 0%;\nbackground-clip: border-box;\nbackground-origin: padding-box;\nbackground-size: auto;\nborder-top-color: currentColor;\nborder-right-color: currentColor;\nborder-bottom-color: currentColor;\nborder-left-color: currentColor;\nborder-top-style: none;\nborder-right-style: none;\nborder-bottom-style: none;\nborder-left-style: none;\nborder-top-width: 3px;\nborder-right-width: 3px;\nborder-bottom-width: 3px;\nborder-left-width: 3px;\nborder-top-left-radius: 0;\nborder-top-right-radius: 0;\nborder-bottom-right-radius: 0;\nborder-bottom-left-radius: 0;\nborder-image-source: none;\nborder-image-slice: 100%;\nborder-image-width: 1;\nborder-image-outset: 0;\nborder-image-repeat: stretch;\ncolumn-count: auto;\ncolumn-gap: normal;\ncolumn-width: auto;\ncolumn-rule-color: currentColor;\ncolumn-rule-style: none;\ncolumn-rule-width: 3px;\ncolumn-fill: balance;\noutline-color: currentColor;\noutline-style: none;\noutline-width: 3px;\nflex-direction: row;\nflex-wrap: nowrap;\nfont-family: serif;\nfont-style: normal;\nfont-size: medium;\nfont-variant: normal;\nfont-weight: normal;\nfont-stretch: normal;\nline-height: normal;\nlist-style-image: none;\nlist-style-position: outside;\nlist-style-type: disc;\nmargin-bottom: auto;\nmargin-left: auto;\nmargin-right: auto;\nmargin-top: auto;\npadding-bottom: auto;\npadding-left: auto;\npadding-right: auto;\npadding-top: auto;\ntext-emphasis-color: currentColor;\ntext-emphasis-style: none;\nmarker-start: none;\nmarker-mid: none;\nmarker-end: none;\n\n/* css-logical */\nborder-block-start-color: currentColor;\nborder-block-end-color: currentColor;\nborder-inline-start-color: currentColor;\nborder-inline-end-color: currentColor;\nborder-block-start-style: none;\nborder-block-end-style: none;\nborder-inline-start-style: none;\nborder-inline-end-style: none;\nborder-block-start-width: 3px;\nborder-block-end-width: 3px;\nborder-inline-start-width: 3px;\nborder-inline-end-width: 3px;\n\nSHORTHANDS\n\nbackground = COMMA background-image [background-position [ / background-size ]] background-repeat\n     background-attachment [background-origin background-clip] background-color; /* background-color is a special case, see the code */\nborder-top = border-top-width border-top-style border-top-color;\nborder-right = border-right-width border-right-style border-right-color;\nborder-bottom = border-bottom-width border-bottom-style border-bottom-color;\nborder-left = border-left-width border-left-style border-left-color;\nborder-width = INSETS border-top-width border-right-width border-bottom-width border-left-width;\nborder-style = INSETS border-top-style border-right-style border-bottom-style border-left-style;\nborder-color = INSETS border-top-color border-right-color border-bottom-color border-left-color;\nborder = border-width border-style border-color;\nborder-image = border-image-source border-image-slice [ / border-image-width [ / border-image-outset ] ]\n     border-image-repeat;\nborder-radius = INSETS_SLASH border-top-left-radius border-top-right-radius\n     border-bottom-right-radius border-bottom-left-radius;\n[moz,webkit]columns = column-width column-count;\n[moz,webkit]column-rule = column-rule-width column-rule-style column-rule-color;\nflex-flow = flex-direction flex-wrap;\noeb-column-number = column-count;\noutline = outline-width outline-style outline-color;\nlist-style = list-style-type list-style-position list-style-image;\nmargin = INSETS margin-top margin-right margin-bottom margin-left;\npadding = INSETS padding-top padding-right padding-bottom padding-left;\npause = INSETS pause-before pause-after;\nfont = FONT font-style font-variant font-weight font-stretch /* font-size line-height font-family are special-cased */;\n[epub,webkit]text-emphasis = text-emphasis-style text-emphasis-color;\nmarker = INSETS marker-start marker-mid marker-end;\n\n/* css-logical */\nmargin-block = INSETS margin-block-start margin-block-end;\nmargin-inline = INSETS margin-inline-start margin-inline-end;\npadding-block = INSETS padding-block-start padding-block-end;\npadding-inline = INSETS padding-inline-start padding-inline-end;\nborder-block-width = INSETS border-block-start-width border-block-end-width;\nborder-block-style = INSETS border-block-start-style border-block-end-style;\nborder-block-color = INSETS border-block-start-color border-block-end-color;\nborder-inline-width = INSETS border-inline-start-width border-inline-end-width;\nborder-inline-style = INSETS border-inline-start-style border-inline-end-style;\nborder-inline-color = INSETS border-inline-start-color border-inline-end-color;\nborder-block = border-block-width border-block-style border-block-color;\nborder-inline = border-inline-width border-inline-style border-inline-color;\nborder-block-start = border-block-start-width border-block-start-style border-block-start-color;\nborder-block-end = border-block-end-width border-block-end-style border-block-end-color;\nborder-inline-start = border-inline-start-width border-inline-start-style border-inline-start-color;\nborder-inline-end = border-inline-end-width border-inline-end-style border-inline-end-color;\ninset-block-start = block-start;\ninset-block-end = block-end;\ninset-inline-start = inline-start;\ninset-inline-end = inline-end;\ninset-block = INSETS block-start block-end;\ninset-inline = INSETS inline-start inline-end;\n\n/* old names  */\n[adapt,webkit]margin-before = margin-block-start;\n[adapt,webkit]margin-after = margin-block-end;\n[adapt,webkit]margin-start = margin-inline-start;\n[adapt,webkit]margin-end = margin-inline-end;\n[adapt,webkit]padding-before = padding-block-start;\n[adapt,webkit]padding-after = padding-block-end;\n[adapt,webkit]padding-start = padding-inline-start;\n[adapt,webkit]padding-end = padding-inline-end;\n[adapt,webkit]border-before-color = border-block-start-color;\n[adapt,webkit]border-after-color = border-block-end-color;\n[adapt,webkit]border-start-color = border-inline-start-color;\n[adapt,webkit]border-end-color = border-inline-end-color;\n[adapt,webkit]border-before-style = border-block-start-style;\n[adapt,webkit]border-after-style = border-block-end-style;\n[adapt,webkit]border-start-style = border-inline-start-style;\n[adapt,webkit]border-end-style = border-inline-end-style;\n[adapt,webkit]border-before-width = border-block-start-width;\n[adapt,webkit]border-after-width = border-block-end-width;\n[adapt,webkit]border-start-width = border-inline-start-width;\n[adapt,webkit]border-end-width = border-inline-end-width;\n[adapt,webkit]before = block-start;\n[adapt,webkit]after = block-end;\n[adapt,webkit]start = inline-start;\n[adapt,webkit]end = inline-end;\n\n",Gi='\n<!DOCTYPE html>\n<html xmlns="http://www.w3.org/1999/xhtml" xmlns:s="http://www.pyroxy.com/ns/shadow">\n<head>\n<style><![CDATA[\n\n.footnote-content {\n  float: footnote;\n}\n\n.table-cell-container {\n  display: block;\n}\n\n]]></style>\n</head>\n<body>\n\n<s:template id="footnote"><s:content/><s:include class="footnote-content"/></s:template>\n\n<s:template id="table-cell"><div data-vivliostyle-flow-root="true" class="table-cell-container"><s:content/></div></s:template>\n\n</body>\n</html>',Wi='\n@namespace html "http://www.w3.org/1999/xhtml";\n\n:root {\n  hyphens: -epubx-expr(pref-hyphenate? "auto": "manual");\n}\n:root[data-vivliostyle-epub-spine-properties~="page-spread-left"] {\n  break-before: left;\n}\n:root[data-vivliostyle-epub-spine-properties~="page-spread-right"] {\n  break-before: right;\n}\n\n@-adapt-footnote-area {\n  display: block;\n  margin-block-start: 0.5em;\n  margin-block-end: 0.5em;\n}\n\n@-adapt-footnote-area ::before {\n  display: block;\n  border-block-start-width: 1px;\n  border-block-start-style: solid;\n  border-block-start-color: black;\n  margin-block-end: 0.4em;\n  margin-inline-start: 0;\n  margin-inline-end: 60%;\n}\n\n/* default page master */\n@-epubx-page-master :background-host {\n  @-epubx-partition :layout-host {\n    -epubx-flow-from: body;\n    top: -epubx-expr(header.margin-bottom-edge);\n    bottom: -epubx-expr(page-height - footer.margin-top-edge);\n    left: 0px;\n    right: 0px;\n    column-width: 25em;\n  }\n  @-epubx-partition footer :oeb-page-foot {\n    writing-mode: horizontal-tb;\n    -epubx-flow-from: oeb-page-foot;\n    bottom: 0px;\n    left: 0px;\n    right: 0px;\n  }\n  @-epubx-partition header :oeb-page-head {\n    writing-mode: horizontal-tb;\n    -epubx-flow-from: oeb-page-head;\n    top: 0px;\n    left: 0px;\n    right: 0px;\n  }\n}\n\n@page {\n  @top-left-corner {\n    text-align: right;\n    vertical-align: middle;\n  }\n  @top-left {\n    text-align: left;\n    vertical-align: middle;\n  }\n  @top-center {\n    text-align: center;\n    vertical-align: middle;\n  }\n  @top-right {\n    text-align: right;\n    vertical-align: middle;\n  }\n  @top-right-corner {\n    text-align: left;\n    vertical-align: middle;\n  }\n  @left-top {\n    text-align: center;\n    vertical-align: top;\n  }\n  @left-middle {\n    text-align: center;\n    vertical-align: middle;\n  }\n  @left-bottom {\n    text-align: center;\n    vertical-align: bottom;\n  }\n  @right-top {\n    text-align: center;\n    vertical-align: top;\n  }\n  @right-middle {\n    text-align: center;\n    vertical-align: middle;\n  }\n  @right-bottom {\n    text-align: center;\n    vertical-align: bottom;\n  }\n  @bottom-left-corner {\n    text-align: right;\n    vertical-align: middle;\n  }\n  @bottom-left {\n    text-align: left;\n    vertical-align: middle;\n  }\n  @bottom-center {\n    text-align: center;\n    vertical-align: middle;\n  }\n  @bottom-right {\n    text-align: right;\n    vertical-align: middle;\n  }\n  @bottom-right-corner {\n    text-align: left;\n    vertical-align: middle;\n  }\n}\n\n@media print {\n  @page {\n    margin: 10%;\n  }\n}\n',Xi='\n@namespace html "http://www.w3.org/1999/xhtml";\n\nhtml|html,\nhtml|address,\nhtml|blockquote,\nhtml|body,\nhtml|dd,\nhtml|div,\nhtml|dl,\nhtml|dt,\nhtml|fieldset,\nhtml|form,\nhtml|frame,\nhtml|frameset,\nhtml|h1,\nhtml|h2,\nhtml|h3,\nhtml|h4,\nhtml|h5,\nhtml|h6,\nhtml|noframes,\nhtml|ol,\nhtml|p,\nhtml|ul,\nhtml|center,\nhtml|dir,\nhtml|hr,\nhtml|menu,\nhtml|pre,\nhtml|article,\nhtml|section,\nhtml|nav,\nhtml|aside,\nhtml|hgroup,\nhtml|footer,\nhtml|header,\nhtml|figure,\nhtml|figcaption,\nhtml|main {\n  display: block;\n  unicode-bidi: normal;\n}\nhtml|li {\n  display: list-item;\n}\nhtml|head {\n  display: none !important;\n}\nhtml|table {\n  display: table;\n}\nhtml|tr {\n  display: table-row;\n}\nhtml|thead {\n  display: table-header-group;\n  break-after: avoid;\n}\nhtml|tbody {\n  display: table-row-group;\n}\nhtml|tfoot {\n  display: table-footer-group;\n  break-before: avoid;\n}\nhtml|col {\n  display: table-column;\n}\nhtml|colgroup {\n  display: table-column-group;\n}\nhtml|td,\nhtml|th {\n  display: table-cell;\n}\nhtml|caption {\n  display: table-caption;\n  text-align: center;\n}\nhtml|th {\n  font-weight: bolder;\n  text-align: center;\n}\nhtml|*[hidden],\nhtml|link,\nhtml|style,\nhtml|script {\n  display: none;\n}\nhtml|body {\n  margin: 8px;\n}\nhtml|h1 {\n  font-size: 2em;\n  margin-block-start: 0.67em;\n  margin-block-end: 0.67em;\n  margin-inline-start: 0em;\n  margin-inline-end: 0em;\n}\nhtml|h2 {\n  font-size: 1.5em;\n  margin-block-start: 0.75em;\n  margin-block-end: 0.75em;\n  margin-inline-start: 0em;\n  margin-inline-end: 0em;\n}\nhtml|h3 {\n  font-size: 1.17em;\n  margin-block-start: 0.83em;\n  margin-block-end: 0.83em;\n  margin-inline-start: 0em;\n  margin-inline-end: 0em;\n}\nhtml|h4,\nhtml|p,\nhtml|blockquote,\nhtml|ul,\nhtml|fieldset,\nhtml|form,\nhtml|ol,\nhtml|dl,\nhtml|dir,\nhtml|menu,\nhtml|h5,\nhtml|h6 {\n  margin-block-start: 1em;\n  margin-block-end: 1em;\n  margin-inline-start: 0em;\n  margin-inline-end: 0em;\n}\nhtml|h5 {\n  font-size: 0.83em;\n}\nhtml|h6 {\n  font-size: 0.75em;\n}\nhtml|h1,\nhtml|h2,\nhtml|h3,\nhtml|h4,\nhtml|h5,\nhtml|h6,\nhtml|b,\nhtml|strong {\n  font-weight: bolder;\n}\nhtml|h1,\nhtml|h2,\nhtml|h3,\nhtml|h4,\nhtml|h5,\nhtml|h6 {\n  break-after: avoid;\n}\nhtml|blockquote {\n  margin-block-start: 0px;\n  margin-block-end: 0px;\n  margin-inline-start: 40px;\n  margin-inline-end: 40px;\n}\nhtml|i,\nhtml|cite,\nhtml|em,\nhtml|var,\nhtml|address {\n  font-style: italic;\n}\nhtml|pre,\nhtml|tt,\nhtml|code,\nhtml|kbd,\nhtml|samp {\n  font-family: monospace;\n}\nhtml|pre {\n  white-space: pre;\n}\nhtml|button,\nhtml|textarea,\nhtml|input,\nhtml|select {\n  display: inline-block;\n}\nhtml|big {\n  font-size: 1.17em;\n}\nhtml|small,\nhtml|sub,\nhtml|sup {\n  font-size: 0.83em;\n}\nhtml|sub {\n  vertical-align: sub;\n}\nhtml|sup {\n  vertical-align: super;\n}\nhtml|table {\n  border-spacing: 2px;\n}\nhtml|thead,\nhtml|tbody,\nhtml|tfoot {\n  vertical-align: middle;\n}\n/* for XHTML tables without tbody */\nhtml|table > html|tr {\n  vertical-align: middle;\n}\nhtml|td,\nhtml|th {\n  vertical-align: inherit;\n}\nhtml|s,\nhtml|strike,\nhtml|del {\n  text-decoration: line-through;\n}\nhtml|hr {\n  border: 1px inset;\n}\nhtml|ol,\nhtml|ul,\nhtml|dir,\nhtml|menu,\nhtml|dd {\n  margin: 0px;\n  margin-inline-start: 40px;\n}\nhtml|ol html|ul,\nhtml|ul html|ol,\nhtml|ul html|ul,\nhtml|ol html|ol {\n  margin-block-start: 0;\n  margin-block-end: 0;\n}\nhtml|u,\nhtml|ins {\n  text-decoration: underline;\n}\nhtml|center {\n  text-align: center;\n}\nhtml|q:before {\n  content: open-quote;\n}\nhtml|q:after {\n  content: close-quote;\n}\n\nhtml|audio,\nhtml|video {\n  break-inside: avoid;\n}\n\nhtml|ruby {\n  display: ruby;\n}\nhtml|rp {\n  display: none;\n}\nhtml|rbc {\n  display: ruby-base-container;\n}\nhtml|rtc {\n  display: ruby-text-container;\n}\nhtml|rb {\n  display: ruby-base;\n  white-space: nowrap;\n}\nhtml|rt {\n  display: ruby-text;\n}\nhtml|ruby,\nhtml|rb,\nhtml|rt,\nhtml|rbc,\nhtml|rtc {\n  unicode-bidi: isolate;\n}\n\nhtml|rtc,\nhtml|rt {\n  font-variant-east-asian: ruby;\n  text-emphasis: none;\n  white-space: nowrap;\n  line-height: 1;\n}\n\nhtml|rtc:lang(zh),\nhtml|rt:lang(zh) {\n  ruby-align: center;\n}\n\nhtml|rtc,\nhtml|rt {\n  font-size: 50%;\n}\n\nhtml|rtc:lang(zh-TW),\nhtml|rt:lang(zh-TW) {\n  font-size: 30%;\n}\n\nhtml|rtc > html|rt,\nhtml|rtc > html|rt:lang(zh-TW) {\n  font-size: 100%;\n}\n\n/* Bidi settings */\nhtml|bdo[dir="ltr"] {\n  direction: ltr;\n  unicode-bidi: bidi-override;\n}\nhtml|bdo[dir="rtl"] {\n  direction: rtl;\n  unicode-bidi: bidi-override;\n}\nhtml|*[dir="ltr"] {\n  direction: ltr;\n  unicode-bidi: embed;\n}\nhtml|*[dir="rtl"] {\n  direction: rtl;\n  unicode-bidi: embed;\n}\n\n/*------------------ epub-specific ---------------------*/\n\n@namespace epub "http://www.idpf.org/2007/ops";\n\nhtml|a[epub|type="noteref"] {\n  font-size: 0.75em;\n  vertical-align: super;\n  line-height: 0.01;\n}\n\nhtml|a[epub|type="noteref"]:href-epub-type(footnote) {\n  -adapt-template: url(user-agent.xml#footnote);\n  text-decoration: none;\n}\n\nhtml|aside[epub|type="footnote"] {\n  display: none;\n}\n\nhtml|aside[epub|type="footnote"]:footnote-content {\n  display: block;\n  margin: 0.25em;\n  font-size: 1.2em;\n  line-height: 1.2;\n}\n\nepub|trigger {\n  display: none;\n}\n\nepub|switch {\n  display: inline;\n}\n\nepub|default {\n  display: inline;\n}\n\nepub|case {\n  display: none;\n}\n\nepub|case[required-namespace::supported] {\n  display: inline;\n}\n\nepub|case[required-namespace::supported] ~ epub|case {\n  display: none;\n}\n\nepub|case[required-namespace::supported] ~ epub|default {\n  display: none;\n}\n\n/*--------------- ncx and toc ----------------------*/\n\n@namespace ncx "http://www.daisy.org/z3986/2005/ncx/";\n\nncx|ncx {\n  display: block;\n  padding-top: 10px;\n  padding-bottom: 10px;\n}\n\nncx|content {\n  display: none;\n}\n\nbody > * {\n  -adapt-behavior: body-child;\n}\n\n[role="doc-toc"],\n[role="directory"],\nnav,\n.toc,\n#toc,\n#table-of-contents,\n#contents {\n  -adapt-behavior: toc-root;\n}\n\n[role="doc-toc"] a,\n[role="directory"] a,\nnav a,\n.toc a,\n#toc a,\nncx|navLabel {\n  -adapt-behavior: toc-node-anchor;\n}\n\n[role="doc-toc"] li,\n[role="directory"] li,\nnav li,\n.toc li,\n#toc li,\nncx|navPoint {\n  -adapt-behavior: toc-node;\n}\n\n[role="doc-toc"] li > *:first-child,\n[role="directory"] li > *:first-child,\nnav li > *:first-child,\n.toc li > *:first-child,\n#toc li > *:first-child {\n  -adapt-behavior: toc-node-first-child;\n}\n\n[role="doc-toc"] ol,\n[role="directory"] ol,\nnav ol,\n.toc ol,\n#toc ol,\n[role="doc-toc"] ul,\n[role="directory"] ul,\nnav ul,\n.toc ul,\n#toc ul,\nol[role="doc-toc"],\nol[role="directory"],\nol.toc,\nol#toc,\nul[role="doc-toc"],\nul[role="directory"],\nul.toc,\nul#toc {\n  -adapt-behavior: toc-container;\n}\n';function ji(t,e,n,i,r){var o=Ni("ajax"),a=new XMLHttpRequest,s=o.suspend(a),u={status:0,statusText:"",url:t,contentType:null,responseText:null,responseXML:null,responseBlob:null};a.open(n||"GET",t,!0),e&&(a.responseType=e),a.onreadystatechange=function(){if(4===a.readyState){if(u.status=a.status,u.statusText=a.statusText||404==a.status&&"Not Found"||"",200==u.status||0==u.status)if(e&&e!==Ui.DOCUMENT||!a.responseXML||"parsererror"==a.responseXML.documentElement.localName)if((!e||e===Ui.DOCUMENT)&&a.response instanceof HTMLDocument)u.responseXML=a.response,u.contentType=a.response.contentType;else{var n=a.response;e&&e!==Ui.TEXT||"string"!=typeof n?n?u.responseBlob="string"==typeof n?Ki([n]):n:f.warn("Unexpected empty success response for",t):u.responseText=n;var i=a.getResponseHeader("Content-Type");i&&(u.contentType=i.replace(/(.*);.*$/,"$1"))}else u.responseXML=a.responseXML,u.contentType=a.responseXML.contentType;s.schedule(u)}};try{i?(a.setRequestHeader("Content-Type",r||"text/plain; charset=UTF-8"),a.send(i)):(/^file:|^https?:\/\/[^/]+\.githubusercontent\.com|\.(xhtml|xht|opf)$/i.test(t)?/\/aozorabunko\/[^/]+\/cards\/[^/]+\/files\/[^/.]+\.html$/.test(t)?a.overrideMimeType("text/html; charset=Shift_JIS"):/\.(html|htm)$/i.test(t)?a.overrideMimeType("text/html; charset=UTF-8"):/\.(xhtml|xht|xml|opf)$/i.test(t)?a.overrideMimeType("application/xml; charset=UTF-8"):/\.(txt|css)$/i.test(t)?a.overrideMimeType("text/plain; charset=UTF-8"):a.overrideMimeType("text/html; charset=UTF-8"):/^data:,(<|%3c)/i.test(t)?a.overrideMimeType("text/html; charset=UTF-8"):/^data:,/i.test(t)&&a.overrideMimeType("text/plain; charset=UTF-8"),a.send(null))}catch(e){f.warn(e,"Error fetching "+t),s.schedule(u)}return o.result()}function Ki(t,e){var n=e||"application/octet-stream",i=window.WebKitBlobBuilder||window.MSBlobBuilder;if(i){for(var r=new i,o=0;o<t.length;o++)r.append(t[o]);return r.getBlob(n)}return new Blob(t,{type:n})}!function(t){t.DEFAULT="",t.ARRAYBUFFER="arraybuffer",t.BLOB="blob",t.DOCUMENT="document",t.JSON="json",t.TEXT="text"}(Ui||(Ui={}));var $i,qi=function(){function t(t,e){this.parser=t,this.type=e,this.resources={},this.fetchers={}}var e=t.prototype;return e.load=function(t,e,n){t=z(t);var i=this.resources[t];return void 0!==i?Ti(i):this.fetch(t,e,n).get()},e.fetchInner=function(t,e,n){var i=this,r=Ni("fetch"),o=t.endsWith("?viv-toc-box");o&&(t=t.replace("?viv-toc-box",""));var a=K("user-agent.xml",X),s=!o&&t===a;return s&&(t="data:application/xml,"+encodeURIComponent(Gi)),ji(t,this.type).then((function(u){if(u.status>=400&&e)throw new Error((n||"Failed to fetch required resource: "+t)+" ("+u.status+(u.statusText?" "+u.statusText:"")+")");o?(t+="?viv-toc-box",u.url+="?viv-toc-box"):s&&(u.url=t=a),i.parser(u,i).then((function(e){delete i.fetchers[t],i.resources[t]=e,r.finish(e)}))})),r.result()},e.fetch=function(t,e,n){var i=this;if(t=z(t),this.resources[t])return null;var r=this.fetchers[t];return r||(r=new Bi((function(){return i.fetchInner(t,e,n)}),"Fetch "+t),this.fetchers[t]=r,r.start()),r},e.get=function(t){return this.resources[z(t)]},e.delete=function(t){delete this.resources[z(t)]},t}();function Yi(t,e){var n=t.responseText;return Ti(n?V(n):null)}function Zi(t){var e=parseInt(t,16);if(isNaN(e))throw new Error("E_CSS_COLOR");if(6==t.length)return new ze(e);if(3==t.length)return new ze(e=15&e|(15&e)<<4|(240&e)<<4|(240&e)<<8|(3840&e)<<8|(3840&e)<<12);throw new Error("E_CSS_COLOR")}!function(t){t.USER_AGENT="UA",t.USER="User",t.AUTHOR="Author"}($i||($i={}));var Qi,Ji=function(){function t(t){this.scope=t,this.flavor=$i.AUTHOR}var e=t.prototype;return e.getCurrentToken=function(){return null},e.getScope=function(){return this.scope},e.error=function(t,e){},e.startStylesheet=function(t){this.flavor=t},e.tagSelector=function(t,e){},e.classSelector=function(t){},e.pseudoclassSelector=function(t,e){},e.pseudoelementSelector=function(t,e){},e.idSelector=function(t){},e.attributeSelector=function(t,e,n,i){},e.descendantSelector=function(){},e.childSelector=function(){},e.adjacentSiblingSelector=function(){},e.followingSiblingSelector=function(){},e.nextSelector=function(){},e.startSelectorRule=function(){},e.startFontFaceRule=function(){},e.startFootnoteRule=function(t){},e.startViewportRule=function(){},e.startDefineRule=function(){},e.startRegionRule=function(){},e.startPageRule=function(){},e.startPageMarginBoxRule=function(t){},e.startWhenRule=function(t){},e.startMediaRule=function(t){this.startWhenRule(t)},e.startFlowRule=function(t){},e.startPageTemplateRule=function(){},e.startPageMasterRule=function(t,e,n){},e.startPartitionRule=function(t,e,n){},e.startPartitionGroupRule=function(t,e,n){},e.startRuleBody=function(){},e.property=function(t,e,n){},e.endRule=function(){},e.startFuncWithSelector=function(t){},e.endFuncWithSelector=function(){},e.getImportantSpecificity=function(){switch(this.flavor){case $i.USER_AGENT:return 0;case $i.USER:return 100663296;default:return 83886080}},e.getBaseSpecificity=function(){switch(this.flavor){case $i.USER_AGENT:return 0;case $i.USER:return 16777216;default:return 33554432}},t}(),tr=function(t){function e(){var e;return(e=t.call(this,null)||this).stack=[],e.tokenizer=null,e.slave=null,e}I(e,t);var n=e.prototype;return n.pushHandler=function(t){this.stack.push(this.slave),this.slave=t},n.popHandler=function(){this.slave=this.stack.pop()},n.getCurrentToken=function(){return this.tokenizer?this.tokenizer.token():null},n.getScope=function(){return this.slave.getScope()},n.error=function(t,e){this.slave.error(t,e)},n.errorMsg=function(t,e){f.warn(t)},n.startStylesheet=function(e){t.prototype.startStylesheet.call(this,e),this.stack.length>0&&(this.slave=this.stack[0],this.stack=[]),this.slave.startStylesheet(e)},n.tagSelector=function(t,e){this.slave.tagSelector(t,e)},n.classSelector=function(t){this.slave.classSelector(t)},n.pseudoclassSelector=function(t,e){this.slave.pseudoclassSelector(t,e)},n.pseudoelementSelector=function(t,e){this.slave.pseudoelementSelector(t,e)},n.idSelector=function(t){this.slave.idSelector(t)},n.attributeSelector=function(t,e,n,i){this.slave.attributeSelector(t,e,n,i)},n.descendantSelector=function(){this.slave.descendantSelector()},n.childSelector=function(){this.slave.childSelector()},n.adjacentSiblingSelector=function(){this.slave.adjacentSiblingSelector()},n.followingSiblingSelector=function(){this.slave.followingSiblingSelector()},n.nextSelector=function(){this.slave.nextSelector()},n.startSelectorRule=function(){this.slave.startSelectorRule()},n.startFontFaceRule=function(){this.slave.startFontFaceRule()},n.startFootnoteRule=function(t){this.slave.startFootnoteRule(t)},n.startViewportRule=function(){this.slave.startViewportRule()},n.startDefineRule=function(){this.slave.startDefineRule()},n.startRegionRule=function(){this.slave.startRegionRule()},n.startPageRule=function(){this.slave.startPageRule()},n.startPageMarginBoxRule=function(t){this.slave.startPageMarginBoxRule(t)},n.startWhenRule=function(t){this.slave.startWhenRule(t)},n.startFlowRule=function(t){this.slave.startFlowRule(t)},n.startPageTemplateRule=function(){this.slave.startPageTemplateRule()},n.startPageMasterRule=function(t,e,n){this.slave.startPageMasterRule(t,e,n)},n.startPartitionRule=function(t,e,n){this.slave.startPartitionRule(t,e,n)},n.startPartitionGroupRule=function(t,e,n){this.slave.startPartitionGroupRule(t,e,n)},n.startRuleBody=function(){this.slave.startRuleBody()},n.property=function(t,e,n){this.slave.property(t,e,n)},n.endRule=function(){this.slave.endRule()},n.startFuncWithSelector=function(t){this.slave.startFuncWithSelector(t)},n.endFuncWithSelector=function(){this.slave.endFuncWithSelector()},e}(Ji),er=function(t){function e(e,n,i){var r;return(r=t.call(this,e)||this).owner=n,r.topLevel=i,r.depth=0,n&&(r.flavor=n.flavor),r}I(e,t);var n=e.prototype;return n.getCurrentToken=function(){return this.owner.getCurrentToken()},n.error=function(t,e){this.owner.errorMsg(t,e)},n.startRuleBody=function(){this.depth++},n.endRule=function(){0!=--this.depth||this.topLevel||this.owner.popHandler()},e}(Ji),nr=function(t){function e(e,n,i){return t.call(this,e,n,i)||this}I(e,t);var n=e.prototype;return n.report=function(t){this.error(t,this.getCurrentToken())},n.reportAndSkip=function(t){this.report(t),this.owner.pushHandler(new er(this.scope,this.owner,!1))},n.startSelectorRule=function(){this.reportAndSkip("E_CSS_UNEXPECTED_SELECTOR")},n.startFontFaceRule=function(){this.reportAndSkip("E_CSS_UNEXPECTED_FONT_FACE")},n.startFootnoteRule=function(t){this.reportAndSkip("E_CSS_UNEXPECTED_FOOTNOTE")},n.startViewportRule=function(){this.reportAndSkip("E_CSS_UNEXPECTED_VIEWPORT")},n.startDefineRule=function(){this.reportAndSkip("E_CSS_UNEXPECTED_DEFINE")},n.startRegionRule=function(){this.reportAndSkip("E_CSS_UNEXPECTED_REGION")},n.startPageRule=function(){this.reportAndSkip("E_CSS_UNEXPECTED_PAGE")},n.startWhenRule=function(t){this.reportAndSkip("E_CSS_UNEXPECTED_WHEN")},n.startFlowRule=function(t){this.reportAndSkip("E_CSS_UNEXPECTED_FLOW")},n.startPageTemplateRule=function(){this.reportAndSkip("E_CSS_UNEXPECTED_PAGE_TEMPLATE")},n.startPageMasterRule=function(t,e,n){this.reportAndSkip("E_CSS_UNEXPECTED_PAGE_MASTER")},n.startPartitionRule=function(t,e,n){this.reportAndSkip("E_CSS_UNEXPECTED_PARTITION")},n.startPartitionGroupRule=function(t,e,n){this.reportAndSkip("E_CSS_UNEXPECTED_PARTITION_GROUP")},n.startFuncWithSelector=function(t){this.reportAndSkip("E_CSS_UNEXPECTED_SELECTOR_FUNC")},n.endFuncWithSelector=function(){this.reportAndSkip("E_CSS_UNEXPECTED_END_SELECTOR_FUNC")},n.property=function(t,e,n){this.error("E_CSS_UNEXPECTED_PROPERTY",this.getCurrentToken())},e}(er),ir=[],rr=[],or=[],ar=[],sr=[],ur=[],lr=[],cr=[],hr=[],fr=[],dr=[],pr=[],gr=[];!function(t){t[t.SELECTOR_NAME_1=1]="SELECTOR_NAME_1",t[t.SELECTOR_NAME=2]="SELECTOR_NAME",t[t.SELECTOR_ANY_1=3]="SELECTOR_ANY_1",t[t.SELECTOR_ANY=4]="SELECTOR_ANY",t[t.SELECTOR_ID_1=5]="SELECTOR_ID_1",t[t.SELECTOR_ID=6]="SELECTOR_ID",t[t.SELECTOR_CLASS_1=7]="SELECTOR_CLASS_1",t[t.SELECTOR_CLASS=8]="SELECTOR_CLASS",t[t.SELECTOR_ATTR_1=9]="SELECTOR_ATTR_1",t[t.SELECTOR_ATTR=10]="SELECTOR_ATTR",t[t.SELECTOR_CHILD=11]="SELECTOR_CHILD",t[t.SELECTOR_SIBLING=12]="SELECTOR_SIBLING",t[t.SELECTOR_BODY=13]="SELECTOR_BODY",t[t.SELECTOR_PSEUDOCLASS=14]="SELECTOR_PSEUDOCLASS",t[t.VAL_IDENT=15]="VAL_IDENT",t[t.VAL_HASH=16]="VAL_HASH",t[t.VAL_NUM=17]="VAL_NUM",t[t.VAL_INT=18]="VAL_INT",t[t.VAL_NUMERIC=19]="VAL_NUMERIC",t[t.VAL_STR=20]="VAL_STR",t[t.VAL_URL=21]="VAL_URL",t[t.VAL_COMMA=22]="VAL_COMMA",t[t.VAL_SLASH=23]="VAL_SLASH",t[t.VAL_FUNC=24]="VAL_FUNC",t[t.VAL_C_PAR=25]="VAL_C_PAR",t[t.VAL_END=26]="VAL_END",t[t.RULE_END=27]="RULE_END",t[t.IDENT=28]="IDENT",t[t.SELECTOR_START=29]="SELECTOR_START",t[t.AT=30]="AT",t[t.EXPR_IDENT=31]="EXPR_IDENT",t[t.EXPR_NUM=32]="EXPR_NUM",t[t.EXPR_NUMERIC=33]="EXPR_NUMERIC",t[t.EXPR_STR=34]="EXPR_STR",t[t.EXPR_PARAM=35]="EXPR_PARAM",t[t.EXPR_PREFIX=36]="EXPR_PREFIX",t[t.EXPR_INFIX=37]="EXPR_INFIX",t[t.EXPR_FUNC=38]="EXPR_FUNC",t[t.EXPR_C_PAR=39]="EXPR_C_PAR",t[t.EXPR_O_PAR=40]="EXPR_O_PAR",t[t.SELECTOR_NEXT=41]="SELECTOR_NEXT",t[t.SELECTOR_PSEUDOELEM=42]="SELECTOR_PSEUDOELEM",t[t.EXPR_O_BRC=43]="EXPR_O_BRC",t[t.VAL_FINISH=44]="VAL_FINISH",t[t.EXPR_INFIX_NAME=45]="EXPR_INFIX_NAME",t[t.PROP=46]="PROP",t[t.VAL_BANG=47]="VAL_BANG",t[t.VAL_BRC=48]="VAL_BRC",t[t.EXPR_SEMICOL=49]="EXPR_SEMICOL",t[t.ERROR_PUSH=50]="ERROR_PUSH",t[t.ERROR_POP=51]="ERROR_POP",t[t.ERROR_POP_DECL=52]="ERROR_POP_DECL",t[t.ERROR_SEMICOL=53]="ERROR_SEMICOL",t[t.VAL_PLUS=54]="VAL_PLUS",t[t.SELECTOR_PSEUDOCLASS_1=55]="SELECTOR_PSEUDOCLASS_1",t[t.SELECTOR_FOLLOWING_SIBLING=56]="SELECTOR_FOLLOWING_SIBLING",t[t.DONE=200]="DONE"}(Qi||(Qi={}));var mr,vr=kn.LAST+1;ir[kn.IDENT]=Qi.IDENT,ir[kn.STAR]=Qi.SELECTOR_START,ir[kn.HASH]=Qi.SELECTOR_START,ir[kn.CLASS]=Qi.SELECTOR_START,ir[kn.O_BRK]=Qi.SELECTOR_START,ir[kn.COLON]=Qi.SELECTOR_START,ir[kn.AT]=Qi.AT,ir[kn.C_BRC]=Qi.RULE_END,ir[kn.EOF]=Qi.DONE,rr[kn.IDENT]=Qi.PROP,rr[kn.EOF]=Qi.DONE,ur[kn.IDENT]=Qi.SELECTOR_NAME,ur[kn.STAR]=Qi.SELECTOR_ANY,ur[kn.HASH]=Qi.SELECTOR_ID,ur[kn.CLASS]=Qi.SELECTOR_CLASS,ur[kn.O_BRK]=Qi.SELECTOR_ATTR,ur[kn.COLON]=Qi.SELECTOR_PSEUDOCLASS,or[kn.GT]=Qi.SELECTOR_CHILD,or[kn.PLUS]=Qi.SELECTOR_SIBLING,or[kn.TILDE]=Qi.SELECTOR_FOLLOWING_SIBLING,or[kn.IDENT]=Qi.SELECTOR_NAME_1,or[kn.STAR]=Qi.SELECTOR_ANY_1,or[kn.HASH]=Qi.SELECTOR_ID_1,or[kn.CLASS]=Qi.SELECTOR_CLASS_1,or[kn.O_BRK]=Qi.SELECTOR_ATTR_1,or[kn.O_BRC]=Qi.SELECTOR_BODY,or[kn.COLON]=Qi.SELECTOR_PSEUDOCLASS_1,or[kn.COL_COL]=Qi.SELECTOR_PSEUDOELEM,or[kn.COMMA]=Qi.SELECTOR_NEXT,ar[kn.IDENT]=Qi.SELECTOR_NAME_1,ar[kn.STAR]=Qi.SELECTOR_ANY_1,ar[kn.HASH]=Qi.SELECTOR_ID_1,ar[kn.CLASS]=Qi.SELECTOR_CLASS_1,ar[kn.O_BRK]=Qi.SELECTOR_ATTR_1,ar[kn.C_PAR]=Qi.DONE,ar[kn.COLON]=Qi.SELECTOR_PSEUDOCLASS_1,sr[kn.IDENT]=Qi.SELECTOR_NAME,sr[kn.STAR]=Qi.SELECTOR_ANY,sr[kn.HASH]=Qi.SELECTOR_ID,sr[kn.CLASS]=Qi.SELECTOR_CLASS,sr[kn.COLON]=Qi.SELECTOR_PSEUDOCLASS,sr[kn.COL_COL]=Qi.SELECTOR_PSEUDOELEM,sr[kn.O_BRK]=Qi.SELECTOR_ATTR,sr[kn.O_BRC]=Qi.SELECTOR_BODY,lr[kn.IDENT]=Qi.VAL_IDENT,lr[kn.HASH]=Qi.VAL_HASH,lr[kn.NUM]=Qi.VAL_NUM,lr[kn.INT]=Qi.VAL_INT,lr[kn.NUMERIC]=Qi.VAL_NUMERIC,lr[kn.STR]=Qi.VAL_STR,lr[kn.URL]=Qi.VAL_URL,lr[kn.COMMA]=Qi.VAL_COMMA,lr[kn.SLASH]=Qi.VAL_SLASH,lr[kn.FUNC]=Qi.VAL_FUNC,lr[kn.C_PAR]=Qi.VAL_C_PAR,lr[kn.SEMICOL]=Qi.VAL_END,lr[kn.C_BRC]=Qi.VAL_BRC,lr[kn.BANG]=Qi.VAL_BANG,lr[kn.PLUS]=Qi.VAL_PLUS,lr[kn.EOF]=Qi.VAL_FINISH,cr[kn.IDENT]=Qi.EXPR_IDENT,cr[kn.NUM]=Qi.EXPR_NUM,cr[kn.INT]=Qi.EXPR_NUM,cr[kn.NUMERIC]=Qi.EXPR_NUMERIC,cr[kn.STR]=Qi.EXPR_STR,cr[kn.O_PAR]=Qi.EXPR_O_PAR,cr[kn.FUNC]=Qi.EXPR_FUNC,cr[kn.BANG]=Qi.EXPR_PREFIX,cr[kn.MINUS]=Qi.EXPR_PREFIX,cr[kn.DOLLAR]=Qi.EXPR_PARAM,hr[kn.IDENT]=Qi.EXPR_INFIX_NAME,hr[kn.COMMA]=Qi.EXPR_INFIX,hr[kn.GT]=Qi.EXPR_INFIX,hr[kn.LT]=Qi.EXPR_INFIX,hr[kn.GT_EQ]=Qi.EXPR_INFIX,hr[kn.LT_EQ]=Qi.EXPR_INFIX,hr[kn.EQ]=Qi.EXPR_INFIX,hr[kn.EQ_EQ]=Qi.EXPR_INFIX,hr[kn.BANG_EQ]=Qi.EXPR_INFIX,hr[kn.AMP_AMP]=Qi.EXPR_INFIX,hr[kn.BAR_BAR]=Qi.EXPR_INFIX,hr[kn.PLUS]=Qi.EXPR_INFIX,hr[kn.MINUS]=Qi.EXPR_INFIX,hr[kn.SLASH]=Qi.EXPR_INFIX,hr[kn.PERCENT]=Qi.EXPR_INFIX,hr[kn.STAR]=Qi.EXPR_INFIX,hr[kn.COLON]=Qi.EXPR_INFIX,hr[kn.QMARK]=Qi.EXPR_INFIX,hr[kn.C_PAR]=Qi.EXPR_C_PAR,hr[kn.O_BRC]=Qi.EXPR_O_BRC,hr[kn.SEMICOL]=Qi.EXPR_SEMICOL,fr[kn.EOF]=Qi.DONE,fr[kn.O_BRC]=Qi.ERROR_PUSH,fr[kn.C_BRC]=Qi.ERROR_POP,fr[kn.O_BRK]=Qi.ERROR_PUSH,fr[kn.C_BRK]=Qi.ERROR_POP,fr[kn.O_PAR]=Qi.ERROR_PUSH,fr[kn.C_PAR]=Qi.ERROR_POP,fr[kn.SEMICOL]=Qi.ERROR_SEMICOL,dr[kn.EOF]=Qi.DONE,dr[kn.O_BRC]=Qi.ERROR_PUSH,dr[kn.C_BRC]=Qi.ERROR_POP_DECL,dr[kn.O_BRK]=Qi.ERROR_PUSH,dr[kn.C_BRK]=Qi.ERROR_POP,dr[kn.O_PAR]=Qi.ERROR_PUSH,dr[kn.C_PAR]=Qi.ERROR_POP,dr[kn.SEMICOL]=Qi.ERROR_SEMICOL,pr[kn.EOF]=Qi.DONE,pr[kn.O_BRC]=Qi.ERROR_PUSH,pr[kn.C_BRC]=Qi.ERROR_POP,pr[kn.O_BRK]=Qi.ERROR_PUSH,pr[kn.C_BRK]=Qi.ERROR_POP,pr[kn.O_PAR]=Qi.ERROR_PUSH,pr[kn.C_PAR]=Qi.ERROR_POP,gr[kn.C_PAR]=0,gr[kn.COMMA]=0,gr[kn.QMARK]=1,gr[kn.COLON]=1,gr[kn.AMP_AMP]=2,gr[kn.BAR_BAR]=2,gr[kn.LT]=3,gr[kn.GT]=3,gr[kn.LT_EQ]=3,gr[kn.GT_EQ]=3,gr[kn.EQ]=3,gr[kn.EQ_EQ]=3,gr[kn.BANG_EQ]=3,gr[kn.PLUS]=4,gr[kn.MINUS]=4,gr[kn.STAR]=5,gr[kn.SLASH]=5,gr[kn.PERCENT]=5,gr[kn.EOF]=6,gr[vr]=2,function(t){t[t.PROP=0]="PROP",t[t.WHEN=1]="WHEN",t[t.MEDIA=2]="MEDIA",t[t.IMPORT=3]="IMPORT"}(mr||(mr={}));var Er=function(){function t(t,e,n,i){this.actions=t,this.tokenizer=e,this.handler=n,this.baseURL=i,this.valStack=[],this.namespacePrefixToURI={},this.defaultNamespaceURI=null,this.propName=null,this.propImportant=!1,this.result=null,this.importReady=!1,this.importURL=null,this.importCondition=null,this.errorBrackets=[],this.ruleStack=[],this.regionRule=!1,this.pageRule=!1,this.exprContext=mr.MEDIA}var e=t.prototype;return e.extractVals=function(t,e){for(var n=[],i=this.valStack;e<i.length&&(n.push(i[e++]),e!=i.length);)if(i[e++]!=t)throw new Error("Unexpected state");return n},e.valStackReduce=function(t,e){var n,i=this.valStack,r=i.length;do{n=i[--r]}while(void 0!==n&&"string"!=typeof n);var o=i.length-(r+1);if(o>1&&i.splice(r+1,o,new We(i.slice(r+1,i.length))),","==t)return null;r++;do{n=i[--r]}while(void 0!==n&&("string"!=typeof n||","==n));if(o=i.length-(r+1),"("==n){if(")"!=t)return this.handler.error("E_CSS_MISMATCHED_C_PAR",e),this.actions=dr,null;var a=new je(i[r-1],this.extractVals(",",r+1));return i.splice(r-1,o+2,a),null}return";"!=t||r>=0?(this.handler.error("E_CSS_UNEXPECTED_VAL_END",e),this.actions=dr,null):o>1?new Xe(this.extractVals(",",r+1)):i[0]},e.exprError=function(t,e){this.actions=this.propName?dr:fr,this.handler.error(t,e)},e.exprStackReduce=function(t,e){for(var n,i=this.valStack,r=this.handler,o=i.pop();;){var a=i.pop();if(t==kn.C_PAR){for(var s=[o];a==kn.COMMA;)s.unshift(i.pop()),a=i.pop();if("string"==typeof a){if("{"==a){for(;s.length>=2;){var u=s.shift(),l=s.shift(),c=new ie(r.getScope(),u,l);s.unshift(c)}return i.push(new Ke(s[0])),!0}if("("==a){var h=i.pop(),f=i.pop();o=new be(r.getScope(),Mt(f,h),s),t=kn.EOF;continue}}if(a==kn.O_PAR){o.isMediaName()&&(o=new we(r.getScope(),o,null)),t=kn.EOF;continue}}else if("string"==typeof a){i.push(a);break}if(a<0)if(a==-kn.BANG)o=new Qt(r.getScope(),o);else{if(a!=-kn.MINUS)return this.exprError("F_UNEXPECTED_STATE",e),!1;o=new Jt(r.getScope(),o)}else{if(gr[t]>gr[a]){i.push(a);break}switch(n=i.pop(),a){case kn.AMP_AMP:o=new te(r.getScope(),n,o);break;case vr:o=new ee(r.getScope(),n,o);break;case kn.BAR_BAR:o=new ne(r.getScope(),n,o);break;case kn.LT:o=new re(r.getScope(),n,o);break;case kn.GT:o=new ae(r.getScope(),n,o);break;case kn.LT_EQ:o=new oe(r.getScope(),n,o);break;case kn.GT_EQ:o=new se(r.getScope(),n,o);break;case kn.EQ:case kn.EQ_EQ:o=new ue(r.getScope(),n,o);break;case kn.BANG_EQ:o=new le(r.getScope(),n,o);break;case kn.PLUS:o=new ce(r.getScope(),n,o);break;case kn.MINUS:o=new he(r.getScope(),n,o);break;case kn.STAR:o=new fe(r.getScope(),n,o);break;case kn.SLASH:o=new de(r.getScope(),n,o);break;case kn.PERCENT:o=new pe(r.getScope(),n,o);break;case kn.COLON:if(!(i.length>1))return this.exprError("E_CSS_EXPR_COND",e),!1;switch(i[i.length-1]){case kn.QMARK:i.pop(),o=new Ce(r.getScope(),i.pop(),n,o);break;case kn.O_PAR:if(!n.isMediaName())return this.exprError("E_CSS_MEDIA_TEST",e),!1;o=new we(r.getScope(),n,o)}break;case kn.QMARK:if(t!=kn.COLON)return this.exprError("E_CSS_EXPR_COND",e),!1;case kn.O_PAR:return i.push(n),i.push(a),i.push(o),!1;default:return this.exprError("F_UNEXPECTED_STATE",e),!1}}}return i.push(o),!1},e.readPseudoParams=function(){for(var t=[];;){var e=this.tokenizer.token();switch(e.type){case kn.IDENT:t.push(e.text);break;case kn.PLUS:t.push("+");break;case kn.NUM:case kn.INT:t.push(e.num);break;default:return t}this.tokenizer.consume()}},e.readNthPseudoParams=function(){var t=!1,e=this.tokenizer.token();if(e.type===kn.PLUS)t=!0,this.tokenizer.consume(),e=this.tokenizer.token();else if(e.type===kn.IDENT&&("even"===e.text||"odd"===e.text))return this.tokenizer.consume(),[2,"odd"===e.text?1:0];switch(e.type){case kn.NUMERIC:if(t&&e.num<0)return null;case kn.IDENT:if(t&&"-"===e.text.charAt(0))return null;if("n"===e.text||"-n"===e.text){if(t&&e.precededBySpace)return null;var n="-n"===e.text?-1:1;e.type===kn.NUMERIC&&(n=e.num);var i=0;this.tokenizer.consume();var r=(e=this.tokenizer.token()).type===kn.MINUS,o=e.type===kn.PLUS||r;if(o&&(this.tokenizer.consume(),e=this.tokenizer.token()),e.type===kn.INT){if(1/(i=e.num)==-1/0){if(i=0,o)return null}else if(i<0){if(o)return null}else if(i>=0&&!o)return null;this.tokenizer.consume()}else if(o)return null;return[n,r&&i>0?-i:i]}if("n-"===e.text||"-n-"===e.text){if(t&&e.precededBySpace)return null;var a="-n-"===e.text?-1:1;if(e.type===kn.NUMERIC&&(a=e.num),this.tokenizer.consume(),(e=this.tokenizer.token()).type===kn.INT)return e.num<0||1/e.num==-1/0?null:(this.tokenizer.consume(),[a,e.num])}else{var s=e.text.match(/^n(-[0-9]+)$/);if(s)return t&&e.precededBySpace?null:(this.tokenizer.consume(),[e.type===kn.NUMERIC?e.num:1,parseInt(s[1],10)]);if(s=e.text.match(/^-n(-[0-9]+)$/))return this.tokenizer.consume(),[-1,parseInt(s[1],10)]}return null;case kn.INT:return t&&(e.precededBySpace||e.num<0)?null:(this.tokenizer.consume(),[0,e.num])}return null},e.makeCondition=function(t,e){var n=this.handler.getScope();if(!n)return null;if(e=e||n._true,t)for(var i,r=_(t.split(/\s+/));!(i=r()).done;)switch(i.value){case"vertical":e=Se(n,e,new Qt(n,new me(n,"pref-horizontal")));break;case"horizontal":e=Se(n,e,new me(n,"pref-horizontal"));break;case"day":e=Se(n,e,new Qt(n,new me(n,"pref-night-mode")));break;case"night":e=Se(n,e,new me(n,"pref-night-mode"));break;default:e=n._false}return e===n._true?null:new Ke(e)},e.isInsidePropertyOnlyRule=function(){switch(this.ruleStack[this.ruleStack.length-1]){case"[selector]":case"font-face":case"-epubx-flow":case"-epubx-viewport":case"-epubx-define":case"-adapt-footnote-area":return!0}return!1},e.runParser=function(t,e,n,i,r){var o,a,s,u,l,c,h,f=this.handler,d=this.tokenizer,p=this.valStack;i&&(this.exprContext=mr.MEDIA,this.valStack.push("{"));t:for(;t>0;--t)switch(o=d.token(),this.actions[o.type]){case Qi.IDENT:if(d.nthToken(1).type!=kn.COLON){this.isInsidePropertyOnlyRule()?(f.error("E_CSS_COLON_EXPECTED",d.nthToken(1)),this.actions=dr):(this.actions=ur,f.startSelectorRule());continue}(a=d.nthToken(2)).precededBySpace||a.type!=kn.IDENT&&a.type!=kn.FUNC||d.mark(),this.propName=o.text,this.propImportant=!1,d.consume(),d.consume(),this.actions=lr,p.splice(0,p.length);continue;case Qi.PROP:if(d.nthToken(1).type!=kn.COLON){this.actions=dr,f.error("E_CSS_COLON_EXPECTED",d.nthToken(1));continue}this.propName=o.text,this.propImportant=!1,d.consume(),d.consume(),this.actions=lr,p.splice(0,p.length);continue;case Qi.SELECTOR_START:this.actions=ur,f.startSelectorRule();continue;case Qi.SELECTOR_NAME_1:if(!o.precededBySpace){this.actions=pr,f.error("E_CSS_SPACE_EXPECTED",o);continue}f.descendantSelector();case Qi.SELECTOR_NAME:if(d.nthToken(1).type==kn.BAR)if(d.consume(),d.consume(),null!=(s=this.namespacePrefixToURI[o.text]))switch((o=d.token()).type){case kn.IDENT:f.tagSelector(s,o.text),this.actions=r?ar:or,d.consume();break;case kn.STAR:f.tagSelector(s,null),this.actions=r?ar:or,d.consume();break;default:this.actions=fr,f.error("E_CSS_NAMESPACE",o)}else this.actions=fr,f.error("E_CSS_UNDECLARED_PREFIX",o);else f.tagSelector(this.defaultNamespaceURI,o.text),this.actions=r?ar:or,d.consume();continue;case Qi.SELECTOR_ANY_1:if(!o.precededBySpace){this.actions=pr,f.error("E_CSS_SPACE_EXPECTED",o);continue}f.descendantSelector();case Qi.SELECTOR_ANY:if(d.nthToken(1).type==kn.BAR)switch(d.consume(),d.consume(),(o=d.token()).type){case kn.IDENT:f.tagSelector(null,o.text),this.actions=r?ar:or,d.consume();break;case kn.STAR:f.tagSelector(null,null),this.actions=r?ar:or,d.consume();break;default:this.actions=fr,f.error("E_CSS_NAMESPACE",o)}else f.tagSelector(this.defaultNamespaceURI,null),this.actions=r?ar:or,d.consume();continue;case Qi.SELECTOR_ID_1:o.precededBySpace&&f.descendantSelector();case Qi.SELECTOR_ID:f.idSelector(o.text),this.actions=r?ar:or,d.consume();continue;case Qi.SELECTOR_CLASS_1:o.precededBySpace&&f.descendantSelector();case Qi.SELECTOR_CLASS:f.classSelector(o.text),this.actions=r?ar:or,d.consume();continue;case Qi.SELECTOR_PSEUDOCLASS_1:o.precededBySpace&&f.descendantSelector();case Qi.SELECTOR_PSEUDOCLASS:d.consume();e:switch((o=d.token()).type){case kn.IDENT:f.pseudoclassSelector(o.text,null),d.consume(),this.actions=r?ar:or;continue;case kn.FUNC:switch(u=o.text,d.consume(),u){case"not":this.actions=ur,f.startFuncWithSelector("not"),this.actions=this.runParser(Number.POSITIVE_INFINITY,!1,!1,!1,!0)?or:pr;break t;case"lang":case"href-epub-type":if((o=d.token()).type===kn.IDENT){h=[o.text],d.consume();break}break e;case"nth-child":case"nth-of-type":case"nth-last-child":case"nth-last-of-type":case"nth":if(h=this.readNthPseudoParams())break;break e;default:h=this.readPseudoParams()}if((o=d.token()).type==kn.C_PAR){f.pseudoclassSelector(u,h),d.consume(),this.actions=r?ar:or;continue}}f.error("E_CSS_PSEUDOCLASS_SYNTAX",o),this.actions=fr;continue;case Qi.SELECTOR_PSEUDOELEM:switch(d.consume(),(o=d.token()).type){case kn.IDENT:f.pseudoelementSelector(o.text,null),this.actions=r?ar:or,d.consume();continue;case kn.FUNC:if(u=o.text,d.consume(),"nth-fragment"==u){if(null===(h=this.readNthPseudoParams()))break}else h=this.readPseudoParams();if((o=d.token()).type==kn.C_PAR){f.pseudoelementSelector(u,h),this.actions=r?ar:or,d.consume();continue}}f.error("E_CSS_PSEUDOELEM_SYNTAX",o),this.actions=fr;continue;case Qi.SELECTOR_ATTR_1:o.precededBySpace&&f.descendantSelector();case Qi.SELECTOR_ATTR:if(d.consume(),(o=d.token()).type==kn.IDENT)u=o.text,d.consume();else if(o.type==kn.STAR)u=null,d.consume();else{if(o.type!=kn.BAR){this.actions=pr,f.error("E_CSS_ATTR",o),d.consume();continue}u=""}if((o=d.token()).type==kn.BAR){if(null==(s=u?this.namespacePrefixToURI[u]:u)){this.actions=pr,f.error("E_CSS_UNDECLARED_PREFIX",o),d.consume();continue}if(d.consume(),(o=d.token()).type!=kn.IDENT){this.actions=pr,f.error("E_CSS_ATTR_NAME_EXPECTED",o);continue}u=o.text,d.consume(),o=d.token()}else s="";switch(o.type){case kn.EQ:case kn.TILDE_EQ:case kn.BAR_EQ:case kn.HAT_EQ:case kn.DOLLAR_EQ:case kn.STAR_EQ:case kn.COL_COL:l=o.type,d.consume(),o=d.token();break;case kn.C_BRK:f.attributeSelector(s,u,kn.EOF,null),this.actions=r?ar:or,d.consume();continue;default:this.actions=pr,f.error("E_CSS_ATTR_OP_EXPECTED",o);continue}switch(o.type){case kn.IDENT:case kn.STR:f.attributeSelector(s,u,l,o.text),d.consume(),o=d.token();break;default:this.actions=pr,f.error("E_CSS_ATTR_VAL_EXPECTED",o);continue}if(o.type!=kn.C_BRK){this.actions=pr,f.error("E_CSS_ATTR",o);continue}this.actions=r?ar:or,d.consume();continue;case Qi.SELECTOR_CHILD:f.childSelector(),this.actions=sr,d.consume();continue;case Qi.SELECTOR_SIBLING:f.adjacentSiblingSelector(),this.actions=sr,d.consume();continue;case Qi.SELECTOR_FOLLOWING_SIBLING:f.followingSiblingSelector(),this.actions=sr,d.consume();continue;case Qi.SELECTOR_BODY:this.regionRule?(this.ruleStack.push("-epubx-region"),this.regionRule=!1):this.pageRule?(this.ruleStack.push("page"),this.pageRule=!1):this.ruleStack.push("[selector]"),f.startRuleBody(),this.actions=ir,d.consume();continue;case Qi.SELECTOR_NEXT:f.nextSelector(),this.actions=ur,d.consume();continue;case Qi.VAL_IDENT:p.push(_e(o.text)),d.consume();continue;case Qi.VAL_HASH:l=parseInt(o.text,16);try{p.push(Zi(o.text))}catch(t){f.error("E_CSS_COLOR",o),this.actions=fr}d.consume();continue;case Qi.VAL_NUM:p.push(new Ue(o.num)),d.consume();continue;case Qi.VAL_INT:p.push(new Ve(o.num)),d.consume();continue;case Qi.VAL_NUMERIC:zt(o.text)?p.push(new Ke(new ge(f.getScope(),o.num,o.text))):p.push(new Me(o.num,o.text)),d.consume();continue;case Qi.VAL_STR:p.push(new ke(o.text)),d.consume();continue;case Qi.VAL_URL:p.push(new He(K(o.text,this.baseURL))),d.consume();continue;case Qi.VAL_COMMA:this.valStackReduce(",",o),p.push(","),d.consume();continue;case Qi.VAL_SLASH:p.push(Re),d.consume();continue;case Qi.VAL_FUNC:"-epubx-expr"==(u=o.text.toLowerCase())||"calc"==u||"env"==u?(this.actions=cr,this.exprContext=mr.PROP,p.push("{")):(p.push(u),p.push("(")),d.consume();continue;case Qi.VAL_C_PAR:this.valStackReduce(")",o),d.consume();continue;case Qi.VAL_BANG:if(d.consume(),o=d.token(),a=d.nthToken(1),o.type==kn.IDENT&&"important"==o.text.toLowerCase()&&(a.type==kn.SEMICOL||a.type==kn.EOF||a.type==kn.C_BRC)){d.consume(),this.propImportant=!0;continue}this.exprError("E_CSS_SYNTAX",o);continue;case Qi.VAL_PLUS:switch((a=d.nthToken(1)).type){case kn.NUM:case kn.NUMERIC:case kn.INT:if(!a.precededBySpace){d.consume();continue}}if(this.actions===lr&&d.hasMark()){d.reset(),this.actions=ur,f.startSelectorRule();continue}this.exprError("E_CSS_UNEXPECTED_PLUS",o);continue;case Qi.VAL_END:d.consume();case Qi.VAL_BRC:d.unmark(),(c=this.valStackReduce(";",o))&&this.propName&&f.property(this.propName,c,this.propImportant),this.actions=n?rr:ir;continue;case Qi.VAL_FINISH:if(d.consume(),d.unmark(),c=this.valStackReduce(";",o),e)return this.result=c,!0;if(this.propName&&c&&f.property(this.propName,c,this.propImportant),n)return!0;this.exprError("E_CSS_SYNTAX",o);continue;case Qi.EXPR_IDENT:(a=d.nthToken(1)).type==kn.CLASS?(d.nthToken(2).type!=kn.O_PAR||d.nthToken(2).precededBySpace?(p.push(new me(f.getScope(),Mt(o.text,a.text))),this.actions=hr):(p.push(o.text,a.text,"("),d.consume()),d.consume()):(this.exprContext==mr.MEDIA||this.exprContext==mr.IMPORT?"not"==o.text.toLowerCase()?(d.consume(),p.push(new ve(f.getScope(),!0,a.text))):("only"==o.text.toLowerCase()&&(d.consume(),o=a),p.push(new ve(f.getScope(),!1,o.text))):p.push(new me(f.getScope(),o.text)),this.actions=hr),d.consume();continue;case Qi.EXPR_FUNC:p.push(null,o.text,"("),d.consume();continue;case Qi.EXPR_NUM:p.push(new ye(f.getScope(),o.num)),d.consume(),this.actions=hr;continue;case Qi.EXPR_NUMERIC:"%"==(u=o.text)&&(u=this.propName&&this.propName.match(/height|^(top|bottom)$/)?"vh":"vw"),p.push(new ge(f.getScope(),o.num,u)),d.consume(),this.actions=hr;continue;case Qi.EXPR_STR:p.push(new ye(f.getScope(),o.text)),d.consume(),this.actions=hr;continue;case Qi.EXPR_PARAM:d.consume(),(o=d.token()).type!=kn.INT||o.precededBySpace?this.exprError("E_CSS_SYNTAX",o):(p.push(new De(f.getScope(),o.num)),d.consume(),this.actions=hr);continue;case Qi.EXPR_PREFIX:p.push(-o.type),d.consume();continue;case Qi.EXPR_INFIX:this.actions=cr,this.exprStackReduce(o.type,o),p.push(o.type),d.consume();continue;case Qi.EXPR_INFIX_NAME:"and"==o.text.toLowerCase()?(this.actions=cr,this.exprStackReduce(vr,o),p.push(vr),d.consume()):this.exprError("E_CSS_SYNTAX",o);continue;case Qi.EXPR_C_PAR:this.exprStackReduce(o.type,o)&&(this.propName?this.actions=lr:this.exprError("E_CSS_UNBALANCED_PAR",o)),d.consume();continue;case Qi.EXPR_O_BRC:this.exprStackReduce(kn.C_PAR,o)&&(this.propName||this.exprContext==mr.IMPORT?this.exprError("E_CSS_UNEXPECTED_BRC",o):(this.exprContext==mr.WHEN?f.startWhenRule(p.pop()):f.startMediaRule(p.pop()),this.ruleStack.push("media"),f.startRuleBody(),this.actions=ir)),d.consume();continue;case Qi.EXPR_SEMICOL:if(this.exprStackReduce(kn.C_PAR,o)){if(!this.propName&&this.exprContext==mr.IMPORT)return this.importCondition=p.pop(),this.importReady=!0,this.actions=ir,d.consume(),!1;this.exprError("E_CSS_UNEXPECTED_SEMICOL",o)}d.consume();continue;case Qi.EXPR_O_PAR:p.push(o.type),d.consume();continue;case Qi.RULE_END:this.actions=ir,d.consume(),f.endRule(),this.ruleStack.length&&this.ruleStack.pop();continue;case Qi.AT:switch(u=o.text.toLowerCase()){case"import":if(d.consume(),(o=d.token()).type==kn.STR||o.type==kn.URL){if(this.importURL=o.text,d.consume(),(o=d.token()).type==kn.SEMICOL||o.type==kn.EOF)return this.importReady=!0,d.consume(),!1;this.propName=null,this.exprContext=mr.IMPORT,this.actions=cr,p.push("{");continue}f.error("E_CSS_IMPORT_SYNTAX",o),this.actions=fr;continue;case"namespace":switch(d.consume(),(o=d.token()).type){case kn.IDENT:if(u=o.text,d.consume(),((o=d.token()).type==kn.STR||o.type==kn.URL)&&d.nthToken(1).type==kn.SEMICOL){this.namespacePrefixToURI[u]=o.text,d.consume(),d.consume();continue}break;case kn.STR:case kn.URL:if(d.nthToken(1).type==kn.SEMICOL){this.defaultNamespaceURI=o.text,d.consume(),d.consume();continue}}f.error("E_CSS_NAMESPACE_SYNTAX",o),this.actions=fr;continue;case"charset":if(d.consume(),(o=d.token()).type==kn.STR&&d.nthToken(1).type==kn.SEMICOL){"utf-8"!=(u=o.text.toLowerCase())&&"utf-16"!=u&&f.error("E_CSS_UNEXPECTED_CHARSET "+u,o),d.consume(),d.consume();continue}f.error("E_CSS_CHARSET_SYNTAX",o),this.actions=fr;continue;case"font-face":case"-epubx-page-template":case"-epubx-define":case"-epubx-viewport":if(d.nthToken(1).type==kn.O_BRC){switch(d.consume(),d.consume(),u){case"font-face":f.startFontFaceRule();break;case"-epubx-page-template":f.startPageTemplateRule();break;case"-epubx-define":f.startDefineRule();break;case"-epubx-viewport":f.startViewportRule()}this.ruleStack.push(u),f.startRuleBody();continue}break;case"-adapt-footnote-area":switch(d.consume(),(o=d.token()).type){case kn.O_BRC:d.consume(),f.startFootnoteRule(null),this.ruleStack.push(u),f.startRuleBody();continue;case kn.COL_COL:if(d.consume(),(o=d.token()).type==kn.IDENT&&d.nthToken(1).type==kn.O_BRC){u=o.text,d.consume(),d.consume(),f.startFootnoteRule(u),this.ruleStack.push("-adapt-footnote-area"),f.startRuleBody();continue}}break;case"-epubx-region":d.consume(),f.startRegionRule(),this.regionRule=!0,this.actions=ur;continue;case"page":d.consume(),f.startPageRule(),this.pageRule=!0,this.actions=sr;continue;case"top-left-corner":case"top-left":case"top-center":case"top-right":case"top-right-corner":case"right-top":case"right-middle":case"right-bottom":case"bottom-right-corner":case"bottom-right":case"bottom-center":case"bottom-left":case"bottom-left-corner":case"left-bottom":case"left-middle":case"left-top":if(d.consume(),(o=d.token()).type==kn.O_BRC){d.consume(),f.startPageMarginBoxRule(u),this.ruleStack.push(u),f.startRuleBody();continue}break;case"-epubx-when":d.consume(),this.propName=null,this.exprContext=mr.WHEN,this.actions=cr,p.push("{");continue;case"media":d.consume(),this.propName=null,this.exprContext=mr.MEDIA,this.actions=cr,p.push("{");continue;case"-epubx-flow":if(d.nthToken(1).type==kn.IDENT&&d.nthToken(2).type==kn.O_BRC){f.startFlowRule(d.nthToken(1).text),d.consume(),d.consume(),d.consume(),this.ruleStack.push(u),f.startRuleBody();continue}break;case"-epubx-page-master":case"-epubx-partition":case"-epubx-partition-group":d.consume();var g=null,m=null,v=[];for((o=d.token()).type==kn.IDENT&&(g=o.text,d.consume(),o=d.token()),o.type==kn.COLON&&d.nthToken(1).type==kn.IDENT&&(m=d.nthToken(1).text,d.consume(),d.consume(),o=d.token());o.type==kn.FUNC&&"class"==o.text.toLowerCase()&&d.nthToken(1).type==kn.IDENT&&d.nthToken(2).type==kn.C_PAR;)v.push(d.nthToken(1).text),d.consume(),d.consume(),d.consume(),o=d.token();if(o.type==kn.O_BRC){switch(d.consume(),u){case"-epubx-page-master":f.startPageMasterRule(g,m,v);break;case"-epubx-partition":f.startPartitionRule(g,m,v);break;case"-epubx-partition-group":f.startPartitionGroupRule(g,m,v)}this.ruleStack.push(u),f.startRuleBody();continue}break;case"":f.error("E_CSS_UNEXPECTED_AT"+u,o),this.actions=pr;continue;default:f.error("E_CSS_AT_UNKNOWN "+u,o),this.actions=fr;continue}f.error("E_CSS_AT_SYNTAX "+u,o),this.actions=fr;continue;case Qi.ERROR_PUSH:if(e||n)return!0;this.errorBrackets.push(o.type+1),d.consume();continue;case Qi.ERROR_POP_DECL:if(e||n)return!0;if(0==this.errorBrackets.length){this.actions=ir;continue}case Qi.ERROR_POP:this.errorBrackets.length>0&&this.errorBrackets[this.errorBrackets.length-1]==o.type&&this.errorBrackets.pop(),0==this.errorBrackets.length&&o.type==kn.C_BRC&&(this.actions=ir),d.consume();continue;case Qi.ERROR_SEMICOL:if(e||n)return!0;0==this.errorBrackets.length&&(this.actions=ir),d.consume();continue;case Qi.DONE:return r&&(d.consume(),f.endFuncWithSelector()),!0;default:if(e||n)return!0;if(i)return!!this.exprStackReduce(kn.C_PAR,o)&&(this.result=p.pop(),!0);if(r)return f.error(o.type==kn.INVALID?o.text:"E_CSS_SYNTAX",o),!1;if(this.actions===lr&&d.hasMark()){d.reset(),this.actions=ur,f.startSelectorRule();continue}if(this.actions!==fr&&this.actions!==pr&&this.actions!==dr){f.error(o.type==kn.INVALID?o.text:"E_CSS_SYNTAX",o),this.actions=this.isInsidePropertyOnlyRule()?dr:pr;continue}d.consume();continue}return!1},t}(),br=function(t){function e(e){var n;return(n=t.call(this,null)||this).scope=e,n}I(e,t);var n=e.prototype;return n.error=function(t,e){throw new Error(t)},n.getScope=function(){return this.scope},e}(Ji);function Cr(t,e,n,i,r){return Ai("parseStylesheetFromText",(function(o){(function(t,e,n,i,r){var o=Ni("parseStylesheet"),a=new Er(ir,t,e,n),s=null;return r&&(s=function(t,e,n){var i=new Er(cr,t,e,n);return i.runParser(Number.POSITIVE_INFINITY,!1,!1,!0,!1),i.result}(new yi(r,e),e,n)),(s=a.makeCondition(i,s&&s.toExpr()))&&(e.startMediaRule(s),e.startRuleBody()),o.loop((function(){for(;!a.runParser(100,!1,!1,!1,!1);){if(a.importReady){var t=function(){var t=K(a.importURL,n);a.importCondition&&(e.startMediaRule(a.importCondition),e.startRuleBody());var i=Ni("parseStylesheet.import");return yr(t,e,null,null).then((function(){a.importCondition&&e.endRule(),a.importReady=!1,a.importURL=null,a.importCondition=null,i.finish(!0)})),{v:i.result()}}();if("object"==typeof t)return t.v}var i=o.timeSlice();if(i.isPending)return i}return Ti(!1)})).then((function(){s&&e.endRule(),o.finish(!0)})),o.result()})(new yi(t,e),e,n,i,r).thenFinish(o)}),(function(e,n){f.warn(n,"Failed to parse stylesheet text: "+t),e.finish(!1)}))}function yr(t,e,n,i){return Ai("parseStylesheetFromURL",(function(r){ji(t).then((function(o){o.responseText?Cr(o.responseText,e,t,n,i).then((function(e){e||f.warn("Failed to parse stylesheet from "+t),r.finish(!0)})):r.finish(!0)}))}),(function(e,n){f.warn(n,"Exception while fetching and parsing:",t),e.finish(!0)}))}function wr(t,e,n){var i=new Er(lr,e,new br(t),n);return i.runParser(Number.POSITIVE_INFINITY,!0,!1,!1,!1),i.result}var Dr={"z-index":!0,"column-count":!0,"flow-linger":!0,opacity:!0,page:!0,"flow-priority":!0,utilization:!0};function Sr(t,e,n){return e.isExpr()?function(t,e,n){var i=e.evaluate(t);switch(typeof i){case"number":return function(t){return!!Dr[t]}(n)?i==Math.round(i)?new Ve(i):new Ue(i):new Me(i,"px");case"string":return i?wr(e.scope,new yi(i,null),""):Oe;case"boolean":return i?Ye._true:Ye._false;case"undefined":return Oe}throw new Error("E_UNEXPECTED")}(t,e.expr,n):e}function Nr(t,e,n){return t-=n,0===e?0===t:t%e==0&&t/e>=0}var Tr=function(){function t(t){this.matchers=t}return t.prototype.matches=function(){return this.matchers.some((function(t){return t.matches()}))},t}(),Ar=function(){function t(t){this.matchers=t}return t.prototype.matches=function(){return this.matchers.every((function(t){return t.matches()}))},t}(),xr=function(){function t(t,e,n){this.elementOffset=t,this.a=e,this.b=n}return t.registerFragmentIndex=function(e,n,i){var r=t.fragmentIndices;(!r[e]||r[e].priority<=i)&&(r[e]={fragmentIndex:n,priority:i})},t.clearFragmentIndices=function(){t.fragmentIndices={}},t.prototype.matches=function(){var e=t.fragmentIndices[this.elementOffset];return null!=e&&null!=e.fragmentIndex&&Nr(e.fragmentIndex,this.a,this.b)},t}();xr.fragmentIndices={};var Ir,Fr,Pr,Or,Rr,kr,Lr=function(){function t(){}return t.buildViewConditionMatcher=function(t,e){var n=e.split("_");return"NFS"==n[0]?new xr(t,parseInt(n[1],10),parseInt(n[2],10)):null},t.buildAllMatcher=function(t){return new Ar(t)},t.buildAnyMatcher=function(t){return new Tr(t)},t}();function Br(t){return t.reduce((function(t,e){return e[0]===a.DELETE?t:t+e[1]}),"")}function _r(t,e,n){var i=0,r=0;return t.some((function(t){for(var o=0;o<t[1].length;o++){switch(t[0]*n){case a.INSERT:i++;break;case a.DELETE:i--,r++;break;case a.EQUAL:r++}if(r>e)return!0}return!1})),Math.max(Math.min(e,r-1)+i,0)}!function(t){t.isInstanceOfBlockFormattingContext=function(t){return t&&"Block"===t.formattingContextType}}(Ir||(Ir={})),function(t){!function(t){t.INLINE="inline",t.COLUMN="column",t.REGION="region",t.PAGE="page"}(t.FloatReference||(t.FloatReference={}))}(Fr||(Fr={})),function(t){t.isInstanceOfAfterIfContinuesLayoutConstraint=function(t){return t&&"AfterIfContinue"==t.flagmentLayoutConstraintType}}(Pr||(Pr={})),function(t){t.isInstanceOfRepetitiveElementsOwnerFormattingContext=function(t){return!!t&&("RepetitiveElementsOwner"===t.formattingContextType||Rr.isInstanceOfTableFormattingContext(t))},t.isInstanceOfRepetitiveElementsOwnerLayoutConstraint=function(t){return!!t&&("RepetitiveElementsOwner"===t.flagmentLayoutConstraintType||Rr.isInstanceOfTableRowLayoutConstraint(t))}}(Or||(Or={})),function(t){t.isInstanceOfTableFormattingContext=function(t){return t&&"Table"===t.formattingContextType},t.isInstanceOfTableRowLayoutConstraint=function(t){return t&&"TableRow"===t.flagmentLayoutConstraintType}}(Rr||(Rr={})),function(t){!function(t){t[t.IGNORE=0]="IGNORE",t[t.NEWLINE=1]="NEWLINE",t[t.PRESERVE=2]="PRESERVE"}(t.Whitespace||(t.Whitespace={})),function(t){t[t.NONE=0]="NONE",t[t.CONTENT=1]="CONTENT",t[t.ROOTLESS=2]="ROOTLESS",t[t.ROOTED=3]="ROOTED"}(t.ShadowType||(t.ShadowType={}))}(kr||(kr={}));var Mr={transform:!0,"transform-origin":!0},Ur={top:!0,bottom:!0,left:!0,right:!0},Vr=function(t,e,n){this.target=t,this.name=e,this.value=n},zr={show:function(t){t.style.visibility="visible"},hide:function(t){t.style.visibility="hidden"},play:function(t){t.currentTime=0,t.play()},pause:function(t){t.pause()},resume:function(t){t.play()},mute:function(t){t.muted=!0},unmute:function(t){t.muted=!1}};function Hr(t,e){var n=zr[e];return n?function(){for(var e=0;e<t.length;e++)try{n(t[e])}catch(t){}}:null}var Gr=function(t){function e(e,n){var i;return(i=t.call(this)||this).container=e,i.bleedBox=n,i.pageAreaElement=null,i.delayedItems=[],i.elementsById={},i.dimensions={width:0,height:0},i.isFirstPage=!1,i.isLastPage=!1,i.isAutoPageWidth=!0,i.isAutoPageHeight=!0,i.spineIndex=0,i.position=null,i.offset=-1,i.side=null,i.fetchers=[],i.marginBoxes={top:{},bottom:{},left:{},right:{}},i.hrefHandler=function(t){var e=t.currentTarget,n=e.getAttribute("href")||e.getAttributeNS(W.XLINK,"href");n&&i.dispatchEvent({type:"hyperlink",target:null,currentTarget:null,anchorElement:e,href:n,preventDefault:function(){t.preventDefault()}})},i}I(e,t);var n=e.prototype;return n.setAutoPageWidth=function(t){this.isAutoPageWidth=t,t?this.container.setAttribute(e.AUTO_PAGE_WIDTH_ATTRIBUTE,"true"):this.container.removeAttribute(e.AUTO_PAGE_WIDTH_ATTRIBUTE)},n.setAutoPageHeight=function(t){this.isAutoPageHeight=t,t?this.container.setAttribute(e.AUTO_PAGE_HEIGHT_ATTRIBUTE,"true"):this.container.removeAttribute(e.AUTO_PAGE_HEIGHT_ATTRIBUTE)},n.registerElementWithId=function(t,e){var n=this.elementsById[e];n?n.push(t):this.elementsById[e]=[t]},n.finish=function(t,e){var n=this;Object.keys(this.elementsById).forEach((function(t){for(var e=n.elementsById[t],i=0;i<e.length;)n.container.contains(e[i])?i++:e.splice(i,1);0===e.length&&delete n.elementsById[t]}));for(var i=this.delayedItems,r=0;r<i.length;r++){var o=i[r];(o.target!==this.container||"transform"!==o.name||this.isAutoPageWidth||this.isAutoPageHeight)&&et(o.target,o.name,o.value.toString())}var a=e.getElementClientRect(this.container);this.dimensions.width=a.width,this.dimensions.height=a.height;for(var s=0;s<t.length;s++){var u=t[s],l=this.elementsById[u.ref],c=this.elementsById[u.observer];if(l&&c){var h=Hr(l,u.action);if(h)for(var f=0;f<c.length;f++)c[f].addEventListener(u.event,h,!1)}}},n.zoom=function(t){et(this.container,"transform","scale("+t+")")},n.getPageAreaElement=function(){return this.pageAreaElement||this.container},e}(mt);Gr.AUTO_PAGE_WIDTH_ATTRIBUTE="data-vivliostyle-auto-page-width",Gr.AUTO_PAGE_HEIGHT_ATTRIBUTE="data-vivliostyle-auto-page-height";var Wr=kr.Whitespace;function Xr(t){switch(t){case"normal":case"nowrap":return Wr.IGNORE;case"pre-line":return Wr.NEWLINE;case"pre":case"pre-wrap":return Wr.PRESERVE;default:return null}}function jr(t,e){if(1==t.nodeType)return!1;var n=t.textContent;switch(e){case Wr.IGNORE:return!!n.match(/^\s*$/);case Wr.NEWLINE:return!!n.match(/^[ \t\f]*$/);case Wr.PRESERVE:return 0==n.length}throw new Error("Unexpected whitespace: "+e)}var Kr=function(t,e){this.flowName=t,this.parentFlowName=e,this.forcedBreakOffsets=[],this.formattingContext=null},$r=function(){function t(t,e,n,i,r,o,a,s,u){this.flowName=t,this.element=e,this.startOffset=n,this.priority=i,this.linger=r,this.exclusive=o,this.repeated=a,this.last=s,this.breakBefore=u,this.startPage=-1}return t.prototype.isBetter=function(t){return!!this.exclusive&&(!t.exclusive||this.priority>t.priority||this.last)},t}();function qr(t,e){return t.top-e.top}function Yr(t,e){return e.right-t.right}function Zr(t,e){return t===e||!(!t||!e)&&t.node===e.node&&t.shadowType===e.shadowType&&io(t.shadowContext,e.shadowContext)&&io(t.nodeShadow,e.nodeShadow)&&Zr(t.shadowSibling,e.shadowSibling)}function Qr(t,e){if(t===e)return!0;if(!t||!e)return!1;if(t.offsetInNode!==e.offsetInNode||t.after!==e.after||t.steps.length!==e.steps.length)return!1;for(var n=0;n<t.steps.length;n++)if(!Zr(t.steps[n],e.steps[n]))return!1;return!0}function Jr(t,e){return{steps:[{node:t.sourceNode,shadowType:eo.NONE,shadowContext:t.shadowContext,nodeShadow:null,shadowSibling:null,formattingContext:null,fragmentIndex:null!=e?e:t.fragmentIndex}],offsetInNode:0,after:!1,preprocessedTextContent:t.preprocessedTextContent}}function to(t,e){var n=new oo(t.node,e,0);return n.shadowType=t.shadowType,n.shadowContext=t.shadowContext,n.nodeShadow=t.nodeShadow,n.shadowSibling=t.shadowSibling?to(t.shadowSibling,e.copy()):null,n.formattingContext=t.formattingContext,n.fragmentIndex=t.fragmentIndex+1,n}var eo=kr.ShadowType,no=function(){function t(t,e,n,i,r,o,a){this.owner=t,this.root=e,this.xmldoc=n,this.parentShadow=i,this.type=o,this.styler=a,this.subShadow=null,r&&(r.subShadow=this)}return t.prototype.equals=function(t){return!!t&&this.owner===t.owner&&this.xmldoc===t.xmldoc&&this.type===t.type&&io(this.parentShadow,t.parentShadow)},t}();function io(t,e){return t===e||!!t&&!!e&&t.equals(e)}var ro=function(t,e){this.outer=t,this.count=e},oo=function(){function t(t,e,n){this.sourceNode=t,this.parent=e,this.boxOffset=n,this.offsetInNode=0,this.after=!1,this.nodeShadow=null,this.shadowSibling=null,this.shared=!1,this.inline=!0,this.overflow=!1,this.display=null,this.floatSide=null,this.clearSide=null,this.floatMinWrapBlock=null,this.columnSpan=null,this.verticalAlign="baseline",this.captionSide="top",this.inlineBorderSpacing=0,this.blockBorderSpacing=0,this.flexContainer=!1,this.establishesBFC=!1,this.containingBlockForAbsolute=!1,this.breakBefore=null,this.breakAfter=null,this.viewNode=null,this.clearSpacer=null,this.lang=null,this.preprocessedTextContent=null,this.repeatOnBreak=null,this.pluginProps={},this.fragmentIndex=1,this.afterIfContinues=null,this.footnotePolicy=null,this.shadowType=eo.NONE,this.shadowContext=e?e.shadowContext:null,this.breakPenalty=e?e.breakPenalty:0,this.floatReference=Fr.FloatReference.INLINE,this.whitespace=e?e.whitespace:Wr.IGNORE,this.hyphenateCharacter=e?e.hyphenateCharacter:null,this.breakWord=!!e&&e.breakWord,this.inheritedProps=e?e.inheritedProps:{},this.vertical=!!e&&e.vertical,this.direction=e?e.direction:"ltr",this.firstPseudo=e?e.firstPseudo:null,this.formattingContext=e?e.formattingContext:null}var e=t.prototype;return e.resetView=function(){this.inline=!0,this.breakPenalty=this.parent?this.parent.breakPenalty:0,this.viewNode=null,this.clearSpacer=null,this.offsetInNode=0,this.after=!1,this.display=null,this.floatReference=Fr.FloatReference.INLINE,this.floatSide=null,this.clearSide=null,this.floatMinWrapBlock=null,this.columnSpan=null,this.verticalAlign="baseline",this.flexContainer=!1,this.whitespace=this.parent?this.parent.whitespace:Wr.IGNORE,this.hyphenateCharacter=this.parent?this.parent.hyphenateCharacter:null,this.breakWord=!!this.parent&&this.parent.breakWord,this.breakBefore=null,this.breakAfter=null,this.nodeShadow=null,this.establishesBFC=!1,this.containingBlockForAbsolute=!1,this.vertical=!!this.parent&&this.parent.vertical,this.nodeShadow=null,this.preprocessedTextContent=null,this.formattingContext=this.parent?this.parent.formattingContext:null,this.repeatOnBreak=null,this.pluginProps={},this.fragmentIndex=1,this.afterIfContinues=null,this.footnotePolicy=null},e.cloneItem=function(){var e=new t(this.sourceNode,this.parent,this.boxOffset);return e.offsetInNode=this.offsetInNode,e.after=this.after,e.nodeShadow=this.nodeShadow,e.shadowType=this.shadowType,e.shadowContext=this.shadowContext,e.shadowSibling=this.shadowSibling,e.inline=this.inline,e.breakPenalty=this.breakPenalty,e.display=this.display,e.floatReference=this.floatReference,e.floatSide=this.floatSide,e.clearSide=this.clearSide,e.floatMinWrapBlock=this.floatMinWrapBlock,e.columnSpan=this.columnSpan,e.verticalAlign=this.verticalAlign,e.captionSide=this.captionSide,e.inlineBorderSpacing=this.inlineBorderSpacing,e.blockBorderSpacing=this.blockBorderSpacing,e.establishesBFC=this.establishesBFC,e.containingBlockForAbsolute=this.containingBlockForAbsolute,e.flexContainer=this.flexContainer,e.whitespace=this.whitespace,e.hyphenateCharacter=this.hyphenateCharacter,e.breakWord=this.breakWord,e.breakBefore=this.breakBefore,e.breakAfter=this.breakAfter,e.viewNode=this.viewNode,e.clearSpacer=this.clearSpacer,e.firstPseudo=this.firstPseudo,e.vertical=this.vertical,e.overflow=this.overflow,e.preprocessedTextContent=this.preprocessedTextContent,e.formattingContext=this.formattingContext,e.repeatOnBreak=this.repeatOnBreak,e.pluginProps=Object.create(this.pluginProps),e.fragmentIndex=this.fragmentIndex,e.afterIfContinues=this.afterIfContinues,e.footnotePolicy=this.footnotePolicy,e},e.modify=function(){return this.shared?this.cloneItem():this},e.copy=function(){var t=this;do{if(t.shared)break;t.shared=!0,t=t.parent}while(t);return this},e.clone=function(){for(var t,e=this.cloneItem(),n=e;null!=(t=n.parent);)t=t.cloneItem(),n.parent=t,n=t;return e},e.toNodePositionStep=function(){return{node:this.sourceNode,shadowType:this.shadowType,shadowContext:this.shadowContext,nodeShadow:this.nodeShadow,shadowSibling:this.shadowSibling?this.shadowSibling.toNodePositionStep():null,formattingContext:this.formattingContext,fragmentIndex:this.fragmentIndex}},e.toNodePosition=function(){var t=this,e=[];do{t.firstPseudo&&t.parent&&t.parent.firstPseudo!==t.firstPseudo||e.push(t.toNodePositionStep()),t=t.parent}while(t);return{steps:e,offsetInNode:this.preprocessedTextContent?_r(this.preprocessedTextContent,this.offsetInNode,-1):this.offsetInNode,after:this.after,preprocessedTextContent:this.preprocessedTextContent}},e.isInsideBFC=function(){for(var t=this.parent;t;){if(t.establishesBFC)return!0;t=t.parent}return!1},e.getContainingBlockForAbsolute=function(){for(var t=this.parent;t;){if(t.containingBlockForAbsolute)return t;t=t.parent}return null},e.walkUpBlocks=function(t){for(var e=this;e;)e.inline||t(e),e=e.parent},e.belongsTo=function(t){return this.formattingContext===t&&!!this.parent&&this.parent.formattingContext===t},t}(),ao=function(){function t(t){this.primary=t,this.floats=null}var e=t.prototype;return e.clone=function(){var e=new t(this.primary);if(this.floats){e.floats=[];for(var n=0;n<this.floats.length;++n)e.floats[n]=this.floats[n]}return e},e.isSamePosition=function(t){if(!t)return!1;if(this===t)return!0;if(!Qr(this.primary,t.primary))return!1;if(this.floats){if(!t.floats||this.floats.length!==t.floats.length)return!1;for(var e=0;e<this.floats.length;e++)if(!Qr(this.floats[e],t.floats[e]))return!1}else if(t.floats)return!1;return!0},t}(),so=function(){function t(t,e){this.chunkPosition=t,this.flowChunk=e}var e=t.prototype;return e.clone=function(){return new t(this.chunkPosition.clone(),this.flowChunk)},e.isSamePosition=function(t){return!!t&&(this===t||this.chunkPosition.isSamePosition(t.chunkPosition))},t}(),uo=function(){function t(){this.positions=[],this.startSide="any",this.breakAfter=null}var e=t.prototype;return e.clone=function(){for(var e=new t,n=this.positions,i=e.positions,r=0;r<n.length;r++)i[r]=n[r].clone();return e.startSide=this.startSide,e.breakAfter=this.breakAfter,e},e.isSamePosition=function(t){if(this===t)return!0;if(!t||this.positions.length!==t.positions.length)return!1;for(var e=0;e<this.positions.length;e++)if(!this.positions[e].isSamePosition(t.positions[e]))return!1;return!0},e.hasContent=function(t){return this.positions.length>0&&this.positions[0].flowChunk.startOffset<=t},t}(),lo=function(){function t(){this.page=0,this.flows={},this.flowPositions={},this.highestSeenOffset=0}var e=t.prototype;return e.clone=function(){var e=new t;for(var n in e.page=this.page,e.highestSeenNode=this.highestSeenNode,e.highestSeenOffset=this.highestSeenOffset,e.lookupPositionOffset=this.lookupPositionOffset,e.flows=this.flows,this.flowPositions)e.flowPositions[n]=this.flowPositions[n].clone();return e},e.isSamePosition=function(t){if(this===t)return!0;if(!t||this.page!==t.page||this.highestSeenOffset!==t.highestSeenOffset)return!1;var e=Object.keys(this.flowPositions),n=Object.keys(t.flowPositions);if(e.length!==n.length)return!1;for(var i=0,r=e;i<r.length;i++){var o=r[i];if(!this.flowPositions[o].isSamePosition(t.flowPositions[o]))return!1}return!0},e.hasContent=function(t,e){var n=this.flowPositions[t];return!!n&&n.hasContent(e)},e.startSideOfFlow=function(t){var e=this.flowPositions[t];return e?e.startSide:"any"},e.firstFlowChunkOfFlow=function(t){var e=this.flowPositions[t];if(!e)return null;var n=e.positions[0];return n?n.flowChunk:null},t}(),co=function(){function t(t){this.element=t,this.left=0,this.top=0,this.marginLeft=0,this.marginRight=0,this.marginTop=0,this.marginBottom=0,this.borderLeft=0,this.borderRight=0,this.borderTop=0,this.borderBottom=0,this.paddingLeft=0,this.paddingRight=0,this.paddingTop=0,this.paddingBottom=0,this.width=0,this.height=0,this.originX=0,this.originY=0,this.exclusions=null,this.innerShape=null,this.computedBlockSize=0,this.snapWidth=0,this.snapHeight=0,this.snapOffsetX=0,this.snapOffsetY=0,this.vertical=!1}var e=t.prototype;return e.getInsetTop=function(){return this.marginTop+this.borderTop+this.paddingTop},e.getInsetBottom=function(){return this.marginBottom+this.borderBottom+this.paddingBottom},e.getInsetLeft=function(){return this.marginLeft+this.borderLeft+this.paddingLeft},e.getInsetRight=function(){return this.marginRight+this.borderRight+this.paddingRight},e.getInsetBefore=function(){return this.vertical?this.getInsetRight():this.getInsetTop()},e.getInsetAfter=function(){return this.vertical?this.getInsetLeft():this.getInsetBottom()},e.getInsetStart=function(){return this.vertical?this.getInsetTop():this.getInsetLeft()},e.getInsetEnd=function(){return this.vertical?this.getInsetBottom():this.getInsetRight()},e.getBeforeEdge=function(t){return this.vertical?t.right:t.top},e.getAfterEdge=function(t){return this.vertical?t.left:t.bottom},e.getStartEdge=function(t){return this.vertical?t.top:t.left},e.getEndEdge=function(t){return this.vertical?t.bottom:t.right},e.getInlineSize=function(t){return this.vertical?t.bottom-t.top:t.right-t.left},e.getBoxSize=function(t){return this.vertical?t.right-t.left:t.bottom-t.top},e.getBoxDir=function(){return this.vertical?-1:1},e.getInlineDir=function(){return 1},e.copyFrom=function(t){this.element=t.element,this.left=t.left,this.top=t.top,this.marginLeft=t.marginLeft,this.marginRight=t.marginRight,this.marginTop=t.marginTop,this.marginBottom=t.marginBottom,this.borderLeft=t.borderLeft,this.borderRight=t.borderRight,this.borderTop=t.borderTop,this.borderBottom=t.borderBottom,this.paddingLeft=t.paddingLeft,this.paddingRight=t.paddingRight,this.paddingTop=t.paddingTop,this.paddingBottom=t.paddingBottom,this.width=t.width,this.height=t.height,this.originX=t.originX,this.originY=t.originY,this.innerShape=t.innerShape,this.exclusions=t.exclusions,this.computedBlockSize=t.computedBlockSize,this.snapWidth=t.snapWidth,this.snapHeight=t.snapHeight,this.vertical=t.vertical},e.setVerticalPosition=function(t,e){this.top=t,this.height=e,et(this.element,"top",t+"px"),et(this.element,"height",e+"px")},e.setHorizontalPosition=function(t,e){this.left=t,this.width=e,et(this.element,"left",t+"px"),et(this.element,"width",e+"px")},e.setBlockPosition=function(t,e){this.vertical?this.setHorizontalPosition(t+e*this.getBoxDir(),e):this.setVerticalPosition(t,e)},e.setInlinePosition=function(t,e){this.vertical?this.setVerticalPosition(t,e):this.setHorizontalPosition(t,e)},e.clear=function(){for(var t,e=this.element;t=e.lastChild;)e.removeChild(t)},e.getInnerShape=function(){var t=this.getInnerRect();return this.innerShape?this.innerShape.withOffset(t.x1,t.y1):fn(t.x1,t.y1,t.x2,t.y2)},e.getInnerRect=function(){var t=this.originX+this.left+this.getInsetLeft(),e=this.originY+this.top+this.getInsetTop();return new rn(t,e,t+this.width,e+this.height)},e.getPaddingRect=function(){var t=this.originX+this.left+this.marginLeft+this.borderLeft,e=this.originY+this.top+this.marginTop+this.borderTop;return new rn(t,e,t+(this.paddingLeft+this.width+this.paddingRight),e+(this.paddingTop+this.height+this.paddingBottom))},e.getOuterShape=function(t,e){var n=this.getOuterRect();return In(t,n.x1,n.y1,n.x2-n.x1,n.y2-n.y1,e)},e.getOuterRect=function(){var t=this.originX+this.left,e=this.originY+this.top,n=this.getInsetLeft()+this.width+this.getInsetRight(),i=this.getInsetTop()+this.height+this.getInsetBottom();return new rn(t,e,t+n,e+i)},t}(),ho=function(t){function e(e,n,i,r){var o;return(o=t.call(this)||this).elem=e,o.context=n,o.rootContentValue=i,o.exprContentListener=r,o}I(e,t);var n=e.prototype;return n.visitStrInner=function(t,e){e||(e=this.elem.ownerDocument.createTextNode(t)),this.elem.appendChild(e)},n.visitStr=function(t){return this.visitStrInner(t.str),null},n.visitURL=function(t){if(this.rootContentValue.url)this.elem.setAttribute("src",t.url);else{var e=this.elem.ownerDocument.createElementNS(W.XHTML,"img");e.setAttribute("src",t.url),this.elem.appendChild(e)}return null},n.visitSpaceList=function(t){return this.visitValues(t.values),null},n.visitExpr=function(t){var e=t.toExpr(),n=e.evaluate(this.context);if("string"==typeof n){e instanceof me&&(n=wr(e.scope,new yi(n,null),"").stringValue());var i=this.exprContentListener(e,n,this.elem.ownerDocument);this.visitStrInner(n,i)}return null},e}(Ie);function fo(t){return null!=t&&t!==Ye.normal&&t!==Ye.none&&t!==Ye.inherit}var po={azimuth:!0,"border-collapse":!0,"border-spacing":!0,"caption-side":!0,"clip-rule":!0,color:!0,"color-interpolation":!0,"color-rendering":!0,cursor:!0,direction:!0,elevation:!0,"empty-cells":!0,fill:!0,"fill-opacity":!0,"fill-rule":!0,"font-kerning":!0,"font-size":!0,"font-size-adjust":!0,"font-family":!0,"font-feature-settings":!0,"font-style":!0,"font-stretch":!0,"font-variant":!0,"font-weight":!0,"glyph-orientation-vertical":!0,hyphens:!0,"hyphenate-character":!0,"hyphenate-limit-chars":!0,"hyphenate-limit-last":!0,"image-rendering":!0,"image-resolution":!0,"letter-spacing":!0,"line-break":!0,"line-height":!0,"list-style-image":!0,"list-style-position":!0,"list-style-type":!0,marker:!0,"marker-end":!0,"marker-mid":!0,"marker-start":!0,orphans:!0,"overflow-wrap":!0,"paint-order":!0,"pointer-events":!0,"pitch-range":!0,quotes:!0,richness:!0,"ruby-align":!0,"ruby-position":!0,"speak-header":!0,"speak-numeral":!0,"speak-punctuation":!0,"speech-rate":!0,"shape-rendering":!0,stress:!0,stroke:!0,"stroke-dasharray":!0,"stroke-dashoffset":!0,"stroke-linecap":!0,"stroke-linejoin":!0,"stroke-miterlimit":!0,"stroke-opacity":!0,"stroke-width":!0,"tab-size":!0,"text-align":!0,"text-align-last":!0,"text-anchor":!0,"text-decoration-skip":!0,"text-emphasis-color":!0,"text-emphasis-position":!0,"text-emphasis-style":!0,"text-combine-upright":!0,"text-indent":!0,"text-justify":!0,"text-rendering":!0,"text-size-adjust":!0,"text-transform":!0,"text-underline-position":!0,visibility:!0,"voice-family":!0,volume:!0,"white-space":!0,widows:!0,"word-break":!0,"word-spacing":!0,"word-wrap":!0,"writing-mode":!0},go=["box-decoration-break","image-resolution","orphans","widows"];var mo={"http://www.idpf.org/2007/ops":!0,"http://www.w3.org/1999/xhtml":!0,"http://www.w3.org/2000/svg":!0},vo=["margin-%","padding-%","border-%-width","border-%-style","border-%-color","%"],Eo=["max-%","min-%","%"],bo=function(){for(var t=["left","right","top","bottom"],e={width:!0,height:!0,"max-width":!0,"max-height":!0,"min-width":!0,"min-height":!0},n=0;n<vo.length;n++)for(var i=0;i<t.length;i++)e[vo[n].replace("%",t[i])]=!0;return e}();function Co(t,e){for(var n,i={},r=_(vo);!(n=r()).done;){var o=n.value;for(var a in t){var s=o.replace("%",a),u=o.replace("%",t[a]);i[s]=u,i[u]=s}}for(var l,c=_(Eo);!(l=c()).done;){var h=l.value;for(var f in e){var d=h.replace("%",f),p=h.replace("%",e[f]);i[d]=p,i[p]=d}}return i}var yo=Co({"block-start":"right","block-end":"left","inline-start":"top","inline-end":"bottom"},{"block-size":"width","inline-size":"height"}),wo=Co({"block-start":"top","block-end":"bottom","inline-start":"left","inline-end":"right"},{"block-size":"height","inline-size":"width"}),Do=Co({"block-start":"right","block-end":"left","inline-start":"bottom","inline-end":"top"},{"block-size":"width","inline-size":"height"}),So=Co({"block-start":"top","block-end":"bottom","inline-start":"right","inline-end":"left"},{"block-size":"height","inline-size":"width"}),No=function(){function t(t,e){this.value=t,this.priority=e}var e=t.prototype;return e.getBaseValue=function(){return this},e.filterValue=function(e){var n=this.value.visit(e);return n===this.value?this:new t(n,this.priority)},e.increaseSpecificity=function(e){return 0==e?this:new t(this.value,this.priority+e)},e.evaluate=function(t,e){return Sr(t,this.value,e)},e.isEnabled=function(t){return!0},t}(),To=function(t){function e(e,n,i){var r;return(r=t.call(this,e,n)||this).condition=i,r}I(e,t);var n=e.prototype;return n.getBaseValue=function(){return new No(this.value,this.priority)},n.filterValue=function(t){var n=this.value.visit(t);return n===this.value?this:new e(n,this.priority,this.condition)},n.increaseSpecificity=function(t){return 0==t?this:new e(this.value,this.priority+t,this.condition)},n.isEnabled=function(t){return!!this.condition.evaluate(t)},e}(No);function Ao(t,e,n){return(null==e||n.priority>e.priority)&&n.isEnabled(t)?n.getBaseValue():e}var xo={"region-id":!0,"fragment-selector-id":!0};function Io(t){return!!xo[t]}function Fo(t){return"_"!=t.charAt(0)&&!xo[t]}function Po(t){return!!po[t]}function Oo(t,e){return t[e]}function Ro(t,e,n){n?t[e]=n:delete t[e]}function ko(t,e){return t[e]}function Lo(t,e){var n=t[e];return n||(t[e]=n={}),n}var Bo=function(t){var e=t._viewConditionalStyles;return e||(t._viewConditionalStyles=e=[]),e};function _o(t,e){return t[e]}function Mo(t,e){var n=t[e];return n||(t[e]=n=[]),n}function Uo(t,e,n,i,r,o,a){for(var s in[{id:r,styleKey:"_pseudos"},{id:o,styleKey:"_regions"}].forEach((function(t){if(t.id){var n=Lo(e,t.styleKey);(e=n[t.id])||(n[t.id]=e={})}})),a&&Bo(e).push({styles:e={},matcher:a}),n)if("_"!=s.charAt(0))if(Io(s)){var u=_o(n,s),l=Mo(e,s);Array.prototype.push.apply(l,u)}else{var c=Oo(n,s).increaseSpecificity(i),h=Oo(e,s);Ro(e,s,Ao(t,h,c))}}function Vo(t,e){if(t.length>0){t.sort((function(t,e){return e.getPriority()-t.getPriority()}));for(var n=null,i=t.length-1;i>=0;i--)(n=t[i]).chained=e,e=n;return n}return e}var zo=function(t){function e(e,n){var i;return(i=t.call(this)||this).props=e,i.context=n,i.propName="",i}I(e,t);var n=e.prototype;return n.setPropName=function(t){this.propName=t},n.getFontSize=function(){var t=Oo(this.props,"font-size").value;if(!function(t){switch(t.toLowerCase()){case"px":case"in":case"pt":case"pc":case"cm":case"mm":case"q":return!0;default:return!1}}(t.unit))throw new Error("Unexpected state");return t.num*Ht[t.unit]},n.visitNumeric=function(t){if("font-size"===this.propName)return function(t,e,n){var i=(t=Ho(t,e,n)).unit,r=t.num;return"px"===i?t:new Me("%"===i?r/100*e:r*n.queryUnitSize(i,!1),"px")}(t,this.getFontSize(),this.context);if("em"==t.unit||"ex"==t.unit||"rem"==t.unit)return Ho(t,this.getFontSize(),this.context);if("%"==t.unit){if("line-height"===this.propName)return t;var e=this.propName.match(/height|^(top|bottom)$/)?"vh":"vw";return new Me(t.num,e)}return t},n.visitExpr=function(t){return"font-size"==this.propName?Sr(this.context,t,this.propName).visit(this):t},e}(Fe);function Ho(t,e,n){var i=t.unit,r=t.num;return"em"===i||"ex"===i?new Me(r*(Ht[i]/Ht.em)*e,"px"):"rem"===i?new Me(r*n.fontSize(),"px"):t}var Go=function(){function t(){}var e=t.prototype;return e.apply=function(t){},e.mergeWith=function(t){return new Xo([this,t])},e.clone=function(){return this},t}(),Wo=function(t){function e(e){var n;return(n=t.call(this)||this).conditionItem=e,n}return I(e,t),e.prototype.apply=function(t){t.pushConditionItem(this.conditionItem.fresh(t))},e}(Go),Xo=function(t){function e(e){var n;return(n=t.call(this)||this).list=e,n}I(e,t);var n=e.prototype;return n.apply=function(t){for(var e=0;e<this.list.length;e++)this.list[e].apply(t)},n.mergeWith=function(t){return this.list.push(t),this},n.clone=function(){return new e([].concat(this.list))},e}(Go),jo=function(t){function e(e,n,i,r,o){var a;return(a=t.call(this)||this).style=e,a.specificity=n,a.pseudoelement=i,a.regionId=r,a.viewConditionId=o,a}return I(e,t),e.prototype.apply=function(t){Uo(t.context,t.currentStyle,this.style,this.specificity,this.pseudoelement,this.regionId,t.buildViewConditionMatcher(this.viewConditionId))},e}(Go),Ko=function(t){function e(){var e;return(e=t.call(this)||this).chained=null,e}I(e,t);var n=e.prototype;return n.apply=function(t){this.chained.apply(t)},n.getPriority=function(){return 0},n.makePrimary=function(t){return!1},e}(Go),$o=function(t){function e(e){var n;return(n=t.call(this)||this).className=e,n}I(e,t);var n=e.prototype;return n.apply=function(t){t.currentClassNames.includes(this.className)&&this.chained.apply(t)},n.getPriority=function(){return 10},n.makePrimary=function(t){return this.chained&&t.insertInTable(t.classes,this.className,this.chained),!0},e}(Ko),qo=function(t){function e(e){var n;return(n=t.call(this)||this).id=e,n}I(e,t);var n=e.prototype;return n.apply=function(t){t.currentId!=this.id&&t.currentXmlId!=this.id||this.chained.apply(t)},n.getPriority=function(){return 11},n.makePrimary=function(t){return this.chained&&t.insertInTable(t.ids,this.id,this.chained),!0},e}(Ko),Yo=function(t){function e(e){var n;return(n=t.call(this)||this).localName=e,n}I(e,t);var n=e.prototype;return n.apply=function(t){t.currentLocalName==this.localName&&this.chained.apply(t)},n.getPriority=function(){return 8},n.makePrimary=function(t){return this.chained&&t.insertInTable(t.tags,this.localName,this.chained),!0},e}(Ko),Zo=function(t){function e(e,n){var i;return(i=t.call(this)||this).ns=e,i.localName=n,i}I(e,t);var n=e.prototype;return n.apply=function(t){t.currentLocalName==this.localName&&t.currentNamespace==this.ns&&this.chained.apply(t)},n.getPriority=function(){return 8},n.makePrimary=function(t){if(this.chained){var e=t.nsPrefix[this.ns];e||(e="ns"+t.nsCount+++":",t.nsPrefix[this.ns]=e),t.insertInTable(t.nstags,e+this.localName,this.chained)}return!0},e}(Ko),Qo=function(t){function e(e){var n;return(n=t.call(this)||this).epubTypePatt=e,n}return I(e,t),e.prototype.apply=function(t){var e=t.currentElement;if(e&&"a"==t.currentLocalName){var n=e.getAttribute("href");if(n&&n.match(/^#/)){var i=n.substring(1),r=e.ownerDocument.getElementById(i);if(r){var o=r.getAttributeNS(W.epub,"type");o&&o.match(this.epubTypePatt)&&this.chained.apply(t)}}}},e}(Ko),Jo=function(t){function e(e){var n;return(n=t.call(this)||this).ns=e,n}return I(e,t),e.prototype.apply=function(t){t.currentNamespace==this.ns&&this.chained.apply(t)},e}(Ko),ta=function(t){function e(e,n){var i;return(i=t.call(this)||this).ns=e,i.name=n,i}return I(e,t),e.prototype.apply=function(t){t.currentElement&&t.currentElement.hasAttributeNS(this.ns,this.name)&&this.chained.apply(t)},e}(Ko),ea=function(t){function e(e,n,i){var r;return(r=t.call(this)||this).ns=e,r.name=n,r.value=i,r}I(e,t);var n=e.prototype;return n.apply=function(t){t.currentElement&&t.currentElement.getAttributeNS(this.ns,this.name)==this.value&&this.chained.apply(t)},n.getPriority=function(){return"type"==this.name&&this.ns==W.epub?9:0},n.makePrimary=function(t){return"type"==this.name&&this.ns==W.epub&&(this.chained&&t.insertInTable(t.epubtypes,this.value,this.chained),!0)},e}(Ko),na=function(t){function e(e,n){var i;return(i=t.call(this)||this).ns=e,i.name=n,i}I(e,t);var n=e.prototype;return n.apply=function(t){if(t.currentElement){var e=t.currentElement.getAttributeNS(this.ns,this.name);e&&mo[e]&&this.chained.apply(t)}},n.getPriority=function(){return 0},n.makePrimary=function(t){return!1},e}(Ko),ia=function(t){function e(e,n,i){var r;return(r=t.call(this)||this).ns=e,r.name=n,r.regexp=i,r}return I(e,t),e.prototype.apply=function(t){if(t.currentElement){var e=t.currentElement.getAttributeNS(this.ns,this.name);e&&e.match(this.regexp)&&this.chained.apply(t)}},e}(Ko),ra=function(t){function e(e){var n;return(n=t.call(this)||this).langRegExp=e,n}return I(e,t),e.prototype.apply=function(t){t.lang.match(this.langRegExp)&&this.chained.apply(t)},e}(Ko),oa=function(t){function e(){return t.call(this)||this}I(e,t);var n=e.prototype;return n.apply=function(t){t.isFirst&&this.chained.apply(t)},n.getPriority=function(){return 6},e}(Ko),aa=function(t){function e(){return t.call(this)||this}I(e,t);var n=e.prototype;return n.apply=function(t){t.isRoot&&this.chained.apply(t)},n.getPriority=function(){return 12},e}(Ko),sa=function(t){function e(e,n){var i;return(i=t.call(this)||this).a=e,i.b=n,i}return I(e,t),e.prototype.matchANPlusB=function(t){return Nr(t,this.a,this.b)},e}(Ko),ua=function(t){function e(e,n){return t.call(this,e,n)||this}I(e,t);var n=e.prototype;return n.apply=function(t){this.matchANPlusB(t.currentSiblingOrder)&&this.chained.apply(t)},n.getPriority=function(){return 5},e}(sa),la=function(t){function e(e,n){return t.call(this,e,n)||this}I(e,t);var n=e.prototype;return n.apply=function(t){this.matchANPlusB(t.currentSiblingTypeCounts[t.currentNamespace][t.currentLocalName])&&this.chained.apply(t)},n.getPriority=function(){return 5},e}(sa),ca=function(t){function e(e,n){return t.call(this,e,n)||this}I(e,t);var n=e.prototype;return n.apply=function(t){var e=t.currentFollowingSiblingOrder;null===e&&(e=t.currentFollowingSiblingOrder=t.currentElement.parentNode.childElementCount-t.currentSiblingOrder+1),this.matchANPlusB(e)&&this.chained.apply(t)},n.getPriority=function(){return 4},e}(sa),ha=function(t){function e(e,n){return t.call(this,e,n)||this}I(e,t);var n=e.prototype;return n.apply=function(t){var e=t.currentFollowingSiblingTypeCounts;if(!e[t.currentNamespace]){var n=t.currentElement;do{var i=n.namespaceURI,r=n.localName,o=e[i];o||(o=e[i]={}),o[r]=(o[r]||0)+1}while(n=n.nextElementSibling)}this.matchANPlusB(e[t.currentNamespace][t.currentLocalName])&&this.chained.apply(t)},n.getPriority=function(){return 4},e}(sa),fa=function(t){function e(){return t.call(this)||this}I(e,t);var n=e.prototype;return n.apply=function(t){for(var e=t.currentElement.firstChild;e;){switch(e.nodeType){case Node.ELEMENT_NODE:return;case Node.TEXT_NODE:if(e.length>0)return}e=e.nextSibling}this.chained.apply(t)},n.getPriority=function(){return 4},e}(Ko),da=function(t){function e(){return t.call(this)||this}I(e,t);var n=e.prototype;return n.apply=function(t){!1===t.currentElement.disabled&&this.chained.apply(t)},n.getPriority=function(){return 5},e}(Ko),pa=function(t){function e(){return t.call(this)||this}I(e,t);var n=e.prototype;return n.apply=function(t){!0===t.currentElement.disabled&&this.chained.apply(t)},n.getPriority=function(){return 5},e}(Ko),ga=function(t){function e(){return t.call(this)||this}I(e,t);var n=e.prototype;return n.apply=function(t){var e=t.currentElement;!0!==e.selected&&!0!==e.checked||this.chained.apply(t)},n.getPriority=function(){return 5},e}(Ko),ma=function(t){function e(e){var n;return(n=t.call(this)||this).condition=e,n}I(e,t);var n=e.prototype;return n.apply=function(t){if(t.conditions[this.condition])try{t.dependentConditions.push(this.condition),this.chained.apply(t)}finally{t.dependentConditions.pop()}},n.getPriority=function(){return 5},e}(Ko),va=function(t){function e(){var e;return(e=t.call(this)||this).applied=!1,e}I(e,t);var n=e.prototype;return n.apply=function(t){this.applied=!0},n.clone=function(){var t=new e;return t.applied=this.applied,t},e}(Go),Ea=function(t){function e(e){var n;return(n=t.call(this)||this).checkAppliedAction=new va,n.firstAction=Vo(e,n.checkAppliedAction),n}I(e,t);var n=e.prototype;return n.apply=function(t){this.firstAction.apply(t),this.checkAppliedAction.applied||this.chained.apply(t),this.checkAppliedAction.applied=!1},n.getPriority=function(){return this.firstAction.getPriority()},e}(Ko),ba=function(){function t(t,e,n){this.condition=t,this.viewConditionId=e,this.viewCondition=n}var e=t.prototype;return e.increment=function(t){t.increment(this.condition,this.viewCondition)},e.decrement=function(t){t.decrement(this.condition,this.viewCondition)},e.buildViewConditionMatcher=function(t){return t.buildViewConditionMatcher(this.viewConditionId)},t}(),Ca=function(t){function e(e,n,i){return t.call(this,e,n,i)||this}I(e,t);var n=e.prototype;return n.fresh=function(t){return new e(this.condition,this.viewConditionId,this.buildViewConditionMatcher(t))},n.push=function(t,e){return 0==e&&this.increment(t),!1},n.pop=function(t,e){return 0==e&&(this.decrement(t),!0)},e}(ba),ya=function(t){function e(e,n,i){return t.call(this,e,n,i)||this}I(e,t);var n=e.prototype;return n.fresh=function(t){return new e(this.condition,this.viewConditionId,this.buildViewConditionMatcher(t))},n.push=function(t,e){return 0==e?this.increment(t):1==e&&this.decrement(t),!1},n.pop=function(t,e){return 0==e?(this.decrement(t),!0):(1==e&&this.increment(t),!1)},e}(ba),wa=function(t){function e(e,n,i){var r;return(r=t.call(this,e,n,i)||this).fired=!1,r}I(e,t);var n=e.prototype;return n.fresh=function(t){return new e(this.condition,this.viewConditionId,this.buildViewConditionMatcher(t))},n.push=function(t,e){return!!this.fired&&(this.decrement(t),!0)},n.pop=function(t,e){return this.fired?(this.decrement(t),!0):(0==e&&(this.fired=!0,this.increment(t)),!1)},e}(ba),Da=function(t){function e(e,n,i){var r;return(r=t.call(this,e,n,i)||this).fired=!1,r}I(e,t);var n=e.prototype;return n.fresh=function(t){return new e(this.condition,this.viewConditionId,this.buildViewConditionMatcher(t))},n.push=function(t,e){return this.fired&&(-1==e?this.increment(t):0==e&&this.decrement(t)),!1},n.pop=function(t,e){if(this.fired){if(-1==e)return this.decrement(t),!0;0==e&&this.increment(t)}else 0==e&&(this.fired=!0,this.increment(t));return!1},e}(ba),Sa=function(){function t(t,e){this.afterprop=t,this.element=e}var e=t.prototype;return e.fresh=function(t){return this},e.push=function(t,e){return!1},e.pop=function(t,e){return 0==e&&(t.processPseudoelementProps(this.afterprop,this.element),!0)},t}(),Na=function(){function t(t){this.lang=t}var e=t.prototype;return e.fresh=function(t){return this},e.push=function(t,e){return!1},e.pop=function(t,e){return 0==e&&(t.lang=this.lang,!0)},t}(),Ta=function(){function t(t){this.oldQuotes=t}var e=t.prototype;return e.fresh=function(t){return this},e.push=function(t,e){return!1},e.pop=function(t,e){return 0==e&&(t.quotes=this.oldQuotes,!0)},t}(),Aa=function(t){function e(e){var n;return(n=t.call(this)||this).element=e,n}I(e,t);var n=e.prototype;return n.createValueFromString=function(t,e){switch(e){case"url":return new He(t||"about:invalid");case"string":default:return new ke(t||"")}},n.visitFunc=function(e){if("attr"!==e.name)return t.prototype.visitFunc.call(this,e);var n,i="string",r=null;if(e.values[0]instanceof We){var o=e.values[0].values;o.length>=2&&(i=o[1].stringValue()),r=o[0].stringValue()}else r=e.values[0].stringValue();return n=this.createValueFromString(e.values.length>1?e.values[1].stringValue():null,i),this.element&&this.element.hasAttribute(r)?this.createValueFromString(this.element.getAttribute(r),i):n},e}(Fe);function xa(t){if(fo(t)){if(t instanceof ke)return t.stringValue();if(t instanceof We)return t.values.map((function(t){return xa(t)})).join("")}return""}var Ia=function(t){function e(e,n,i){var r;return(r=t.call(this)||this).cascade=e,r.element=n,r.counterResolver=i,r}I(e,t);var n=e.prototype;return n.visitIdent=function(t){var e=this.cascade,n=e.quotes,i=Math.floor(n.length/2)-1;switch(t.name){case"open-quote":var r=n[2*Math.min(i,e.quoteDepth)];return e.quoteDepth++,r;case"close-quote":return e.quoteDepth>0&&e.quoteDepth--,n[2*Math.min(i,e.quoteDepth)+1];case"no-open-quote":return e.quoteDepth++,new ke("");case"no-close-quote":return e.quoteDepth>0&&e.quoteDepth--,new ke("")}return t},n.format=function(t,e){var n,i=!1,r=!1;null!=(n=e.match(/^upper-(.*)/))?(i=!0,e=n[1]):null!=(n=e.match(/^lower-(.*)/))&&(r=!0,e=n[1]);var o="";return Fa[e]?o=function(t,e){if(e>t[0]||e<=0||e!=Math.round(e))return"";for(var n="",i=1;i<t.length;i+=2){var r=t[i],o=Math.floor(e/r);if(o>20)return"";for(e-=o*r;o>0;)n+=t[i+1],o--}return n}(Fa[e],t):Pa[e]?o=function(t,e){if(e<=0||e!=Math.round(e))return"";var n=function(t){for(var e=[],n=0;n<t.length;)if("-"==t.substr(n+1,1)){var i=t.charCodeAt(n),r=t.charCodeAt(n+2);n+=3;for(var o=i;o<=r;o++)e.push(String.fromCharCode(o))}else e.push(t.substr(n++,1));return e}(t),i="";do{var r=--e%n.length;i=n[r]+i,e=(e-r)/n.length}while(e>0);return i}(Pa[e],t):null!=Oa[e]?o=Oa[e]:"decimal-leading-zero"==e?1==(o=""+t).length&&(o="0"+o):o="cjk-ideographic"==e||"trad-chinese-informal"==e?function(t,e){if(t>9999||t<-9999)return""+t;if(0==t)return e.digits.charAt(0);var n=new rt;if(t<0&&(n.append(e.negative),t=-t),t<10)n.append(e.digits.charAt(t));else if(!e.formal&&t<=19)n.append(e.markers.charAt(0)),0!=t&&n.append(e.digits.charAt(t-10));else{var i=Math.floor(t/1e3);i&&(n.append(e.digits.charAt(i)),n.append(e.markers.charAt(2)));var r=Math.floor(t/100)%10;r&&(n.append(e.digits.charAt(r)),n.append(e.markers.charAt(1)));var o=Math.floor(t/10)%10;o&&(n.append(e.digits.charAt(o)),n.append(e.markers.charAt(0)));var a=t%10;a&&n.append(e.digits.charAt(a))}return n.toString()}(t,Ra):""+t,i?o.toUpperCase():r?o.toLowerCase():o},n.visitFuncCounter=function(t){var e=this,n=t[0].toString(),i=t.length>1?t[1].stringValue():"decimal",r=this.cascade.counters[n];if(r&&r.length)return new ke(this.format(r&&r.length&&r[r.length-1]||0,i));var o=new Ke(this.counterResolver.getPageCounterVal(n,(function(t){return e.format(t||0,i)})));return new We([o])},n.visitFuncCounters=function(t){var e=this,n=t[0].toString(),i=t[1].stringValue(),r=t.length>2?t[2].stringValue():"decimal",o=this.cascade.counters[n],a=new rt;if(o&&o.length)for(var s=0;s<o.length;s++)s>0&&a.append(i),a.append(this.format(o[s],r));var u=new Ke(this.counterResolver.getPageCountersVal(n,(function(t){var n=[];if(t.length)for(var o=0;o<t.length;o++)n.push(e.format(t[o],r));var s=a.toString();return s.length&&n.push(s),n.length?n.join(i):e.format(0,r)})));return new We([u])},n.visitFuncTargetCounter=function(t){var e,n=this,i=t[0];e=i instanceof He?i.url:i.stringValue();var r=t[1].toString(),o=t.length>2?t[2].stringValue():"decimal",a=new Ke(this.counterResolver.getTargetCounterVal(e,r,(function(t){return n.format(t||0,o)})));return new We([a])},n.visitFuncTargetCounters=function(t){var e,n=this,i=t[0];e=i instanceof He?i.url:i.stringValue();var r=t[1].toString(),o=t[2].stringValue(),a=t.length>3?t[3].stringValue():"decimal",s=new Ke(this.counterResolver.getTargetCountersVal(e,r,(function(t){var e=t.map((function(t){return n.format(t,a)}));return e.length?e.join(o):n.format(0,a)})));return new We([s])},n.visitFuncString=function(t){var e=t.length>0?t[0].stringValue():"",n=t.length>1?t[1].stringValue():"first",i=new Ke(this.counterResolver.getNamedStringVal(e,n));return new We([i])},n.visitFuncContent=function(t){var e=t.length>0?t[0].stringValue():"text",n="";switch(e){case"text":case"first-letter":if(n=this.element.textContent.trim().replace(/\s+/g," "),"first-letter"===e){var i=n.match(M);n=i?i[0]:""}break;case"before":case"after":var r,o,a=ko(this.cascade.currentStyle,"_pseudos");n=xa(null==a||null==(r=a[e])||null==(o=r.content)?void 0:o.value)}return new ke(n)},n.visitFunc=function(t){switch(t.name){case"counter":if(t.values.length<=2)return this.visitFuncCounter(t.values);break;case"counters":if(t.values.length<=3)return this.visitFuncCounters(t.values);break;case"target-counter":if(t.values.length<=3)return this.visitFuncTargetCounter(t.values);break;case"target-counters":if(t.values.length<=4)return this.visitFuncTargetCounters(t.values);break;case"string":if(t.values.length<=2)return this.visitFuncString(t.values);break;case"content":if(t.values.length<=1)return this.visitFuncContent(t.values)}return f.warn("E_CSS_CONTENT_PROP:",t.toString()),new ke("")},e}(Fe),Fa={roman:[4999,1e3,"M",900,"CM",500,"D",400,"CD",100,"C",90,"XC",50,"L",40,"XL",10,"X",9,"IX",5,"V",4,"IV",1,"I"],armenian:[9999,9e3,"ք",8e3,"փ",7e3,"ւ",6e3,"ց",5e3,"ր",4e3,"տ",3e3,"վ",2e3,"ս",1e3,"ռ",900,"ջ",800,"պ",700,"չ",600,"ո",500,"շ",400,"ն",300,"յ",200,"մ",100,"ճ",90,"ղ",80,"ձ",70,"հ",60,"կ",50,"ծ",40,"խ",30,"լ",20,"ի",10,"ժ",9,"թ",8,"ը",7,"է",6,"զ",5,"ե",4,"դ",3,"գ",2,"բ",1,"ա"],georgian:[19999,1e4,"ჵ",9e3,"ჰ",8e3,"ჯ",7e3,"ჴ",6e3,"ხ",5e3,"ჭ",4e3,"წ",3e3,"ძ",2e3,"ც",1e3,"ჩ",900,"შ",800,"ყ",700,"ღ",600,"ქ",500,"ფ",400,"ჳ",300,"ტ",200,"ს",100,"რ",90,"ჟ",80,"პ",70,"ო",60,"ჲ",50,"ნ",40,"მ",30,"ლ",20,"კ",10,"ი",9,"თ",8,"ჱ",7,"ზ",6,"ვ",5,"ე",4,"დ",3,"გ",2,"ბ",1,"ა"],hebrew:[999,400,"ת",300,"ש",200,"ר",100,"ק",90,"צ",80,"פ",70,"ע",60,"ס",50,"נ",40,"מ",30,"ל",20,"כ",19,"יט",18,"יח",17,"יז",16,"טז",15,"טו",10,"י",9,"ט",8,"ח",7,"ז",6,"ו",5,"ה",4,"ד",3,"ג",2,"ב",1,"א"]},Pa={latin:"a-z",alpha:"a-z",greek:"α-ρσ-ω",russian:"а-ик-щэ-я"},Oa={square:"■",disc:"•",circle:"◦",none:""},Ra={formal:!1,digits:"零一二三四五六七八九",markers:"十百千",negative:"負"};function ka(t,e){for(var n in t)e[n]=t[n].clone()}var La,Ba=function(){function t(){this.nsCount=0,this.nsPrefix={},this.tags={},this.nstags={},this.epubtypes={},this.classes={},this.ids={},this.pagetypes={},this.order=0}var e=t.prototype;return e.clone=function(){var e=new t;for(var n in e.nsCount=this.nsCount,this.nsPrefix)e.nsPrefix[n]=this.nsPrefix[n];return ka(this.tags,e.tags),ka(this.nstags,e.nstags),ka(this.epubtypes,e.epubtypes),ka(this.classes,e.classes),ka(this.ids,e.ids),ka(this.pagetypes,e.pagetypes),e.order=this.order,e},e.insertInTable=function(t,e,n){var i=t[e];i&&(n=i.mergeWith(n)),t[e]=n},e.createInstance=function(t,e,n,i){return new _a(this,t,e,n,i)},e.nextOrder=function(){return this.order+=1/1048576},t}(),_a=function(){function t(t,e,n,i,r){this.context=e,this.counterListener=n,this.counterResolver=i,this.stack=[[],[]],this.conditions={},this.currentElement=null,this.currentElementOffset=null,this.currentStyle=null,this.currentClassNames=null,this.currentLocalName="",this.currentNamespace="",this.currentId="",this.currentXmlId="",this.currentNSTag="",this.currentEpubTypes=null,this.currentPageType=null,this.isFirst=!0,this.isRoot=!0,this.counters={},this.counterScoping=[{}],this.quoteDepth=0,this.lang="",this.siblingOrderStack=[0],this.currentSiblingOrder=0,this.siblingTypeCountsStack=[{}],this.currentFollowingSiblingOrder=null,this.followingSiblingTypeCountsStack=[{}],this.viewConditions={},this.dependentConditions=[],this.code=t,this.quotes=[new ke("“"),new ke("”"),new ke("‘"),new ke("’")],this.currentSiblingTypeCounts=this.siblingTypeCountsStack[0],this.followingSiblingOrderStack=[this.currentFollowingSiblingOrder],this.currentFollowingSiblingTypeCounts=this.siblingTypeCountsStack[0]}var e=t.prototype;return e.pushConditionItem=function(t){this.stack[this.stack.length-1].push(t)},e.increment=function(t,e){this.conditions[t]=(this.conditions[t]||0)+1,e&&(this.viewConditions[t]?this.viewConditions[t].push(e):this.viewConditions[t]=[e])},e.decrement=function(t,e){this.conditions[t]--,this.viewConditions[t]&&(this.viewConditions[t]=this.viewConditions[t].filter((function(t){return t!==e})),0===this.viewConditions[t].length&&delete this.viewConditions[t])},e.buildViewConditionMatcher=function(t){var e=this,n=null;t&&(n=Lr.buildViewConditionMatcher(this.currentElementOffset,t));var i=this.dependentConditions.map((function(t){var n=e.viewConditions[t];return n&&n.length>0?1===n.length?n[0]:Lr.buildAnyMatcher([].concat(n)):null})).filter((function(t){return t}));return i.length<=0?n:null===n?1===i.length?i[0]:Lr.buildAllMatcher(i):Lr.buildAllMatcher([n].concat(i))},e.applyAction=function(t,e){var n=t[e];n&&n.apply(this)},e.pushRule=function(t,e,n){this.currentElement=null,this.currentElementOffset=null,this.currentStyle=n,this.currentNamespace="",this.currentLocalName="",this.currentId="",this.currentXmlId="",this.currentClassNames=t,this.currentNSTag="",this.currentEpubTypes=Ma,this.currentPageType=e,this.applyActions()},e.defineCounter=function(t,e){this.counters[t]?this.counters[t].push(e):this.counters[t]=[e];var n=this.counterScoping[this.counterScoping.length-1];n||(this.counterScoping[this.counterScoping.length-1]=n={}),n[t]=!0},e.pushCounters=function(t){var e=Ye.inline,n=t.display;n&&(e=n.evaluate(this.context));var i=null,r=null,o=null,a=t["counter-reset"];if(a){var s=a.evaluate(this.context);s&&(i=Pn(s,!0))}var u=t["counter-set"];if(u){var l=u.evaluate(this.context);l&&(o=Pn(l,!1))}var c,h,f,d,p=t["counter-increment"];if(p){var g=p.evaluate(this.context);g&&(r=Pn(g,!1))}if("ol"!=this.currentLocalName&&"ul"!=this.currentLocalName||this.currentNamespace!=W.XHTML||(i||(i={}),i["ua-list-item"]=(null!=(c=null==(h=this.currentElement)?void 0:h.start)?c:1)-1),e===Ye.list_item&&(r||(r={}),r["ua-list-item"]=1,/^\s*[-+]?\d/.test(null!=(f=null==(d=this.currentElement)?void 0:d.getAttribute("value"))?f:"")&&(i||(i={}),i["ua-list-item"]=this.currentElement.value-1)),i)for(var m in i)this.defineCounter(m,i[m]);if(o)for(var v in o)if(this.counters[v]){var E=this.counters[v];E[E.length-1]=o[v]}else this.defineCounter(v,o[v]);if(r)for(var b in r){this.counters[b]||this.defineCounter(b,0);var C=this.counters[b];C[C.length-1]+=r[b]}if(e===Ye.list_item){var y=this.counters["ua-list-item"];t["ua-list-item-count"]=new No(new Ue(y[y.length-1]),0)}this.counterScoping.push(null)},e.popCounters=function(){var t=this.counterScoping.pop();if(t)for(var e in t){var n=this.counters[e];n&&(1==n.length?delete this.counters[e]:n.pop())}},e.setNamedStrings=function(t){var e=t["string-set"];if(e){for(var n,i=_((e=e.filterValue(new Ia(this,this.currentElement,this.counterResolver))).value instanceof Xe?e.value.values:[e.value]);!(n=i()).done;){var r=n.value;if(r instanceof We){var o=r.values[0].stringValue(),a=r.values.slice(1).map((function(t){return xa(t)})).join("");this.counterResolver.setNamedString(o,a,this)}}delete t["string-set"]}},e.processPseudoelementProps=function(t,e){this.pushCounters(t),t.content&&(t.content=t.content.filterValue(new Ia(this,e,this.counterResolver))),this.popCounters()},e.pushElement=function(t,e,n){var i=this;this.currentPageType=null,this.currentElement=t,this.currentElementOffset=n,this.currentStyle=e,this.currentNamespace=t.namespaceURI,this.currentLocalName=t.localName;var r=this.code.nsPrefix[this.currentNamespace];this.currentNSTag=r?r+this.currentLocalName:"",this.currentId=t.getAttribute("id"),this.currentXmlId=t.getAttributeNS(W.XML,"id");var o=t.getAttribute("class");this.currentClassNames=o?o.split(/\s+/):Ma;var a=t.getAttributeNS(W.epub,"type");this.currentEpubTypes=a?a.split(/\s+/):Ma;var s=it(t);s&&(this.stack[this.stack.length-1].push(new Na(this.lang)),this.lang=s.toLowerCase());var u=this.isRoot,l=this.siblingOrderStack;this.currentSiblingOrder=++l[l.length-1],l.push(0);var c=this.siblingTypeCountsStack,h=this.currentSiblingTypeCounts=c[c.length-1],f=h[this.currentNamespace];f||(f=h[this.currentNamespace]={}),f[this.currentLocalName]=(f[this.currentLocalName]||0)+1,c.push({});var d=this.followingSiblingOrderStack;this.currentFollowingSiblingOrder=null!==d[d.length-1]?--d[d.length-1]:null,d.push(null);var p=this.followingSiblingTypeCountsStack,g=this.currentFollowingSiblingTypeCounts=p[p.length-1];g&&g[this.currentNamespace]&&g[this.currentNamespace][this.currentLocalName]--,p.push({}),this.applyActions(),this.applyAttrFilter(t);var m=e.quotes,v=null;if(m){var E=m.evaluate(this.context);E&&(v=new Ta(this.quotes),E===Ye.none?this.quotes=[new ke(""),new ke("")]:E instanceof We&&(this.quotes=E.values))}this.pushCounters(this.currentStyle);var b=this.currentId||this.currentXmlId||t.getAttribute("name")||"";if(u||b){var C={};Object.keys(this.counters).forEach((function(t){C[t]=Array.from(i.counters[t])})),this.counterListener.countersOfId(b,C)}var y=ko(this.currentStyle,"_pseudos");if(y)for(var w,D=!0,S=_(Ua);!(w=S()).done;){var N=w.value;N||(D=!1);var T=y[N];T&&(D?this.processPseudoelementProps(T,t):this.stack[this.stack.length-2].push(new Sa(T,t)))}this.setNamedStrings(this.currentStyle),v&&this.stack[this.stack.length-2].push(v)},e.applyAttrFilterInner=function(t,e){for(var n in e)Fo(n)&&(e[n]=e[n].filterValue(t))},e.applyAttrFilter=function(t){var e=new Aa(t),n=this.currentStyle,i=ko(n,"_pseudos");for(var r in i)this.applyAttrFilterInner(e,i[r]);this.applyAttrFilterInner(e,n)},e.applyActions=function(){var t;for(t=0;t<this.currentClassNames.length;t++)this.applyAction(this.code.classes,this.currentClassNames[t]);for(t=0;t<this.currentEpubTypes.length;t++)this.applyAction(this.code.epubtypes,this.currentEpubTypes[t]);this.applyAction(this.code.ids,this.currentId),this.applyAction(this.code.tags,this.currentLocalName),""!=this.currentLocalName&&this.applyAction(this.code.tags,"*"),this.applyAction(this.code.nstags,this.currentNSTag),null!==this.currentPageType&&(this.applyAction(this.code.pagetypes,this.currentPageType),this.applyAction(this.code.pagetypes,"*")),this.stack.push([]);for(var e=1;e>=-1;--e){var n=this.stack[this.stack.length-e-2];for(t=0;t<n.length;)n[t].push(this,e)?n.splice(t,1):t++}this.isFirst=!0,this.isRoot=!1},e.pop=function(){for(var t=1;t>=-1;--t)for(var e=this.stack[this.stack.length-t-2],n=0;n<e.length;)e[n].pop(this,t)?e.splice(n,1):n++;this.stack.pop(),this.isFirst=!1},e.popRule=function(){this.pop()},e.popElement=function(t){this.siblingOrderStack.pop(),this.siblingTypeCountsStack.pop(),this.followingSiblingOrderStack.pop(),this.followingSiblingTypeCountsStack.pop(),this.pop(),this.popCounters()},t}(),Ma=[],Ua=["before","transclusion-before","footnote-call","footnote-marker","inner","first-letter","first-line","","transclusion-after","after"];!function(t){t[t.TOP=0]="TOP",t[t.SELECTOR=1]="SELECTOR",t[t.RULE=2]="RULE"}(La||(La={}));var Va=null,za=function(t){function e(e,n,i,r,o,a,s){var u;return(u=t.call(this,e,n,s)||this).condition=i,u.regionId=o,u.validatorSet=a,u.chain=null,u.specificity=0,u.elementStyle=null,u.conditionCount=0,u.pseudoelement=null,u.footnoteContent=!1,u.viewConditionId=null,u.cascade=r?r.cascade:Va?Va.clone():new Ba,u.state=La.TOP,u}I(e,t);var n=e.prototype;return n.insertNonPrimary=function(t){this.cascade.insertInTable(this.cascade.tags,"*",t)},n.processChain=function(t){var e=Vo(this.chain,t);e!==t&&e.makePrimary(this.cascade)||this.insertNonPrimary(e)},n.isInsideSelectorRule=function(t){return this.state!=La.TOP&&(this.reportAndSkip(t),!0)},n.tagSelector=function(t,e){(e||t)&&(this.specificity+=1,this.chain.push(e&&t?new Zo(t,e.toLowerCase()):e?new Yo(e.toLowerCase()):new Jo(t)))},n.classSelector=function(t){if(this.pseudoelement)return f.warn("::"+this.pseudoelement,"followed by ."+t),void this.chain.push(new ma(""));this.specificity+=256,this.chain.push(new $o(t))},n.pseudoclassSelector=function(t,e){if(this.pseudoelement)return f.warn("::"+this.pseudoelement,"followed by :"+t),void this.chain.push(new ma(""));switch(t.toLowerCase()){case"enabled":this.chain.push(new da);break;case"disabled":this.chain.push(new pa);break;case"checked":this.chain.push(new ga);break;case"root":this.chain.push(new aa);break;case"link":this.chain.push(new Yo("a")),this.chain.push(new ta("","href"));break;case"-adapt-href-epub-type":case"href-epub-type":if(e&&1==e.length&&"string"==typeof e[0]){var n=new RegExp("(^|s)"+ht(e[0])+"($|s)");this.chain.push(new Qo(n))}else this.chain.push(new ma(""));break;case"-adapt-footnote-content":case"footnote-content":this.footnoteContent=!0;break;case"visited":case"active":case"hover":case"focus":this.chain.push(new ma(""));break;case"lang":this.chain.push(e&&1==e.length&&"string"==typeof e[0]?new ra(new RegExp("^"+ht(e[0].toLowerCase())+"($|-)")):new ma(""));break;case"nth-child":case"nth-last-child":case"nth-of-type":case"nth-last-of-type":var i=Ha[t.toLowerCase()];this.chain.push(e&&2==e.length?new i(e[0],e[1]):new ma(""));break;case"first-child":this.chain.push(new oa);break;case"last-child":this.chain.push(new ca(0,1));break;case"first-of-type":this.chain.push(new la(0,1));break;case"last-of-type":this.chain.push(new ha(0,1));break;case"only-child":this.chain.push(new oa),this.chain.push(new ca(0,1));break;case"only-of-type":this.chain.push(new la(0,1)),this.chain.push(new ha(0,1));break;case"empty":this.chain.push(new fa);break;case"before":case"after":case"first-line":case"first-letter":return void this.pseudoelementSelector(t,e);default:f.warn("unknown pseudo-class selector: "+t),this.chain.push(new ma(""))}this.specificity+=256},n.pseudoelementSelector=function(t,e){switch(t){case"before":case"after":case"first-line":case"first-letter":case"footnote-call":case"footnote-marker":case"inner":case"after-if-continues":this.pseudoelement?(f.warn("Double pseudoelement ::"+this.pseudoelement+"::"+t),this.chain.push(new ma(""))):this.pseudoelement=t;break;case"first-n-lines":if(e&&1==e.length&&"number"==typeof e[0]){var n=Math.round(e[0]);if(n>0&&n==e[0]){this.pseudoelement?(f.warn("Double pseudoelement ::"+this.pseudoelement+"::"+t),this.chain.push(new ma(""))):this.pseudoelement="first-"+n+"-lines";break}}this.chain.push(new ma(""));break;case"nth-fragment":e&&2==e.length?this.viewConditionId="NFS_"+e[0]+"_"+e[1]:this.chain.push(new ma(""));break;default:f.warn("Unrecognized pseudoelement: ::"+t),this.chain.push(new ma(""))}this.specificity+=1},n.idSelector=function(t){this.specificity+=65536,this.chain.push(new qo(t))},n.attributeSelector=function(t,e,n,i){var r;switch(this.specificity+=256,e=e.toLowerCase(),i=i||"",n){case kn.EOF:r=new ta(t,e);break;case kn.EQ:r=new ea(t,e,i);break;case kn.TILDE_EQ:r=!i||i.match(/\s/)?new ma(""):new ia(t,e,new RegExp("(^|\\s)"+ht(i)+"($|\\s)"));break;case kn.BAR_EQ:r=new ia(t,e,new RegExp("^"+ht(i)+"($|-)"));break;case kn.HAT_EQ:r=i?new ia(t,e,new RegExp("^"+ht(i))):new ma("");break;case kn.DOLLAR_EQ:r=i?new ia(t,e,new RegExp(ht(i)+"$")):new ma("");break;case kn.STAR_EQ:r=i?new ia(t,e,new RegExp(ht(i))):new ma("");break;case kn.COL_COL:"supported"==i?r=new na(t,e):(f.warn("Unsupported :: attr selector op:",i),r=new ma(""));break;default:f.warn("Unsupported attr selector:",n),r=new ma("")}this.chain.push(r)},n.descendantSelector=function(){var t="d"+Ga++;this.processChain(new Wo(new Ca(t,this.viewConditionId,null))),this.chain=[new ma(t)],this.viewConditionId=null},n.childSelector=function(){var t="c"+Ga++;this.processChain(new Wo(new ya(t,this.viewConditionId,null))),this.chain=[new ma(t)],this.viewConditionId=null},n.adjacentSiblingSelector=function(){var t="a"+Ga++;this.processChain(new Wo(new wa(t,this.viewConditionId,null))),this.chain=[new ma(t)],this.viewConditionId=null},n.followingSiblingSelector=function(){var t="f"+Ga++;this.processChain(new Wo(new Da(t,this.viewConditionId,null))),this.chain=[new ma(t)],this.viewConditionId=null},n.nextSelector=function(){this.finishChain(),this.pseudoelement=null,this.footnoteContent=!1,this.specificity=0,this.chain=[]},n.startSelectorRule=function(){this.isInsideSelectorRule("E_CSS_UNEXPECTED_SELECTOR")||(this.state=La.SELECTOR,this.elementStyle={},this.pseudoelement=null,this.specificity=0,this.footnoteContent=!1,this.chain=[])},n.error=function(e,n){t.prototype.error.call(this,e,n),this.state==La.SELECTOR&&(this.state=La.TOP)},n.startStylesheet=function(e){t.prototype.startStylesheet.call(this,e),this.state=La.TOP},n.startRuleBody=function(){this.finishChain(),t.prototype.startRuleBody.call(this),this.state==La.SELECTOR&&(this.state=La.TOP)},n.endRule=function(){t.prototype.endRule.call(this),this.insideSelectorRule=La.TOP},n.finishChain=function(){if(this.chain){var t=this.specificity+this.cascade.nextOrder();this.processChain(this.makeApplyRuleAction(t)),this.chain=null,this.pseudoelement=null,this.viewConditionId=null,this.footnoteContent=!1,this.specificity=0}},n.makeApplyRuleAction=function(t){var e=this.regionId;return this.footnoteContent&&(e=e?"xxx-bogus-xxx":"footnote"),new jo(this.elementStyle,t,this.pseudoelement,e,this.viewConditionId)},n.special=function(t,e){var n;n=this.condition?new To(e,0,this.condition):new No(e,0),Mo(this.elementStyle,t).push(n)},n.property=function(t,e,n){this.validatorSet.validatePropertyAndHandleShorthand(t,e,n,this)},n.invalidPropertyValue=function(t,e){this.report("E_INVALID_PROPERTY_VALUE "+t+": "+e.toString())},n.unknownProperty=function(t,e){this.report("E_INVALID_PROPERTY "+t+": "+e.toString())},n.simpleProperty=function(t,e,n){"display"!=t||e!==Ye.oeb_page_head&&e!==Ye.oeb_page_foot||(this.simpleProperty("flow-options",new We([Ye.exclusive,Ye._static]),n),this.simpleProperty("flow-into",e,n),e=Ye.block),v("SIMPLE_PROPERTY").forEach((function(i){var r=i({name:t,value:e,important:n});t=r.name,e=r.value,n=r.important}));var i=n?this.getImportantSpecificity():this.getBaseSpecificity(),r=this.condition?new To(e,i,this.condition):new No(e,i);Ro(this.elementStyle,t,r)},n.finish=function(){return this.cascade},n.startFuncWithSelector=function(t){switch(t){case"not":var e=new Wa(this);e.startSelectorRule(),this.owner.pushHandler(e)}},e}(nr),Ha={"nth-child":ua,"nth-of-type":la,"nth-last-child":ca,"nth-last-of-type":ha},Ga=0,Wa=function(t){function e(e){var n;return(n=t.call(this,e.scope,e.owner,e.condition,e,e.regionId,e.validatorSet,!1)||this).parent=e,n.parentChain=e.chain,n}I(e,t);var n=e.prototype;return n.startFuncWithSelector=function(t){"not"==t&&this.reportAndSkip("E_CSS_UNEXPECTED_NOT")},n.startRuleBody=function(){this.reportAndSkip("E_CSS_UNEXPECTED_RULE_BODY")},n.nextSelector=function(){this.reportAndSkip("E_CSS_UNEXPECTED_NEXT_SELECTOR")},n.endFuncWithSelector=function(){this.chain&&this.chain.length>0&&this.parentChain.push(new Ea(this.chain)),this.parent.specificity+=this.specificity,this.owner.popHandler()},n.error=function(e,n){t.prototype.error.call(this,e,n),this.owner.popHandler()},e}(za),Xa=function(t){function e(e,n){return t.call(this,e,n,!1)||this}return I(e,t),e.prototype.property=function(t,e,n){if(this.scope.values[t])this.error("E_CSS_NAME_REDEFINED "+t,this.getCurrentToken());else{var i=t.match(/height|^(top|bottom)$/)?"vh":"vw",r=new ge(this.scope,100,i);this.scope.defineName(t,e.toExpr(this.scope,r))}},e}(nr),ja=function(t){function e(e,n,i,r,o){var a;return(a=t.call(this,e,n,!1)||this).condition=i,a.elementStyle=r,a.validatorSet=o,a.order=0,a}I(e,t);var n=e.prototype;return n.property=function(t,e,n){n?f.warn("E_IMPORTANT_NOT_ALLOWED"):this.validatorSet.validatePropertyAndHandleShorthand(t,e,n,this)},n.invalidPropertyValue=function(t,e){f.warn("E_INVALID_PROPERTY_VALUE",t+":",e.toString())},n.unknownProperty=function(t,e){f.warn("E_INVALID_PROPERTY",t+":",e.toString())},n.simpleProperty=function(t,e,n){var i=n?this.getImportantSpecificity():this.getBaseSpecificity();i+=this.order,this.order+=1/1048576;var r=this.condition?new To(e,i,this.condition):new No(e,i);Ro(this.elementStyle,t,r)},e}(nr),Ka=function(t){function e(e,n){var i;return(i=t.call(this,e)||this).validatorSet=n,i.elementStyle={},i.order=0,i}I(e,t);var n=e.prototype;return n.property=function(t,e,n){this.validatorSet.validatePropertyAndHandleShorthand(t,e,n,this)},n.invalidPropertyValue=function(t,e){f.warn("E_INVALID_PROPERTY_VALUE",t+":",e.toString())},n.unknownProperty=function(t,e){f.warn("E_INVALID_PROPERTY",t+":",e.toString())},n.simpleProperty=function(t,e,n){var i=n?67108864:50331648;i+=this.order,this.order+=1/1048576;var r=new No(e,i);Ro(this.elementStyle,t,r)},e}(br);function $a(t,e){var n=Bo(t);n&&n.forEach((function(t){t.matcher.matches()&&e(t.styles)}))}function qa(t,e,n){$a(n,(function(n){ts(t,n,e)}))}function Ya(t,e,n){var i=t["writing-mode"];if(i){var r=i.evaluate(e,"writing-mode");if(r&&r!==Ye.inherit)return r===Ye.vertical_rl}return n}function Za(t,e,n){var i=t.direction;if(i){var r=i.evaluate(e,"direction");if(r&&r!==Ye.inherit)return r===Ye.rtl}return n}function Qa(t,e,n,i,r){var o={};for(var a in t)Fo(a)&&(o[a]=Oo(t,a));return qa(o,e,t),Ja(t,n,i,(function(t,n){ts(o,n,e),qa(o,e,n)})),o}function Ja(t,e,n,i){var r=ko(t,"_regions");if((e||n)&&r){if(n){var o=["footnote"];e=e?e.concat(o):o}for(var a,s=_(e);!(a=s()).done;){var u=a.value,l=r[u];l&&i(u,l)}}}function ts(t,e,n){for(var i in e)if(Fo(i)){var r=Oo(e,i);t[i]=Ao(n,t[i],r)}}var es=function(t,e,n,i,r){var o=n?i?Do:yo:i?So:wo;for(var a in t)if(t.hasOwnProperty(a)){var s=t[a];if(!s)continue;var u=o[a],l=void 0;if(u){var c=t[u];if(c&&c.priority>s.priority)continue;l=bo[u]?u:a}else l=a;e[l]=r(a,s)}};function ns(t,e){var n={};return Object.keys(t).forEach((function(i){var r=n[i]={},o=t[i];Object.keys(o).forEach((function(t){r[t]=o[t].map((function(t){var n=e?t.physical:t.logical;return{regexp:new RegExp("(-?)"+(e?t.logical:t.physical)+"(-?)"),to:"$1"+n+"$2"}}))}))})),n}function is(t,e,n,i){var r=i[e];if(!r)throw new Error("unknown writing-mode: "+e);var o=r[n||"ltr"];if(!o)throw new Error("unknown direction: "+n);for(var a,s=_(o);!(a=s()).done;){var u=a.value,l=t.replace(u.regexp,u.to);if(l!==t)return l}return t}var rs,os={"horizontal-tb":{ltr:[{logical:"inline-start",physical:"left"},{logical:"inline-end",physical:"right"},{logical:"block-start",physical:"top"},{logical:"block-end",physical:"bottom"},{logical:"inline-size",physical:"width"},{logical:"block-size",physical:"height"}],rtl:[{logical:"inline-start",physical:"right"},{logical:"inline-end",physical:"left"},{logical:"block-start",physical:"top"},{logical:"block-end",physical:"bottom"},{logical:"inline-size",physical:"width"},{logical:"block-size",physical:"height"}]},"vertical-rl":{ltr:[{logical:"inline-start",physical:"top"},{logical:"inline-end",physical:"bottom"},{logical:"block-start",physical:"right"},{logical:"block-end",physical:"left"},{logical:"inline-size",physical:"height"},{logical:"block-size",physical:"width"}],rtl:[{logical:"inline-start",physical:"bottom"},{logical:"inline-end",physical:"top"},{logical:"block-start",physical:"right"},{logical:"block-end",physical:"left"},{logical:"inline-size",physical:"height"},{logical:"block-size",physical:"width"}]},"vertical-lr":{ltr:[{logical:"inline-start",physical:"top"},{logical:"inline-end",physical:"bottom"},{logical:"block-start",physical:"left"},{logical:"block-end",physical:"right"},{logical:"inline-size",physical:"height"},{logical:"block-size",physical:"width"}],rtl:[{logical:"inline-start",physical:"bottom"},{logical:"inline-end",physical:"top"},{logical:"block-start",physical:"left"},{logical:"block-end",physical:"right"},{logical:"inline-size",physical:"height"},{logical:"block-size",physical:"width"}]}},as=ns(os,!0),ss=ns(os,!1);function us(t,e,n){var i={display:e.style.display,position:e.style.position,width:e.style.width,maxWidth:e.style.maxWidth,minWidth:e.style.minWidth,height:e.style.height,maxHeight:e.style.maxHeight,minHeight:e.style.minHeight},r=e.parentNode,o=e.ownerDocument.createElement("div");function a(n){return t.getElementComputedStyle(e).getPropertyValue(n)}et(o,"position",i.position),r.insertBefore(o,e),o.appendChild(e),et(e,"width","auto"),et(e,"max-width","none"),et(e,"min-width","0"),et(e,"height","auto"),et(e,"max-height","none"),et(e,"min-height","0");var s=tt("writing-mode"),u=(s?a(s[0]):null)||a("writing-mode"),l="vertical-rl"===u||"tb-rl"===u||"vertical-lr"===u||"tb-lr"===u,c=l?"height":"width",h=l?"width":"height";function f(){return et(e,"display","block"),et(e,"position","static"),a(c)}function d(){et(e,"display","inline-block"),et(o,c,"99999999px");var t=a(c);return et(o,c,""),t}function p(){et(e,"display","inline-block"),et(o,c,"0");var t=a(c);return et(o,c,""),t}function g(){var t=f(),e=p(),n=parseFloat(t);if(n<=parseFloat(e))return e;var i=d();return n<=parseFloat(i)?t:i}function m(){return a(h)}function v(){throw new Error("Getting fill-available block size is not implemented")}var E={};return n.forEach((function(t){var n;switch(t){case rs.FILL_AVAILABLE_INLINE_SIZE:n=f();break;case rs.MAX_CONTENT_INLINE_SIZE:n=d();break;case rs.MIN_CONTENT_INLINE_SIZE:n=p();break;case rs.FIT_CONTENT_INLINE_SIZE:n=g();break;case rs.FILL_AVAILABLE_BLOCK_SIZE:n=v();break;case rs.MAX_CONTENT_BLOCK_SIZE:case rs.MIN_CONTENT_BLOCK_SIZE:case rs.FIT_CONTENT_BLOCK_SIZE:n=m();break;case rs.FILL_AVAILABLE_WIDTH:n=l?v():f();break;case rs.FILL_AVAILABLE_HEIGHT:n=l?f():v();break;case rs.MAX_CONTENT_WIDTH:n=l?m():d();break;case rs.MAX_CONTENT_HEIGHT:n=l?d():m();break;case rs.MIN_CONTENT_WIDTH:n=l?m():p();break;case rs.MIN_CONTENT_HEIGHT:n=l?p():m();break;case rs.FIT_CONTENT_WIDTH:n=l?m():g();break;case rs.FIT_CONTENT_HEIGHT:n=l?g():m()}E[t]=parseFloat(n),et(e,"position",i.position),et(e,"display",i.display)})),et(e,"width",i.width),et(e,"max-width",i.maxWidth),et(e,"min-width",i.minWidth),et(e,"height",i.height),et(e,"max-height",i.maxHeight),et(e,"min-height",i.minHeight),r.insertBefore(e,o),r.removeChild(o),E}!function(t){t.FILL_AVAILABLE_INLINE_SIZE="fill-available inline size",t.FILL_AVAILABLE_BLOCK_SIZE="fill-available block size",t.FILL_AVAILABLE_WIDTH="fill-available width",t.FILL_AVAILABLE_HEIGHT="fill-available height",t.MAX_CONTENT_INLINE_SIZE="max-content inline size",t.MAX_CONTENT_BLOCK_SIZE="max-content block size",t.MAX_CONTENT_WIDTH="max-content width",t.MAX_CONTENT_HEIGHT="max-content height",t.MIN_CONTENT_INLINE_SIZE="min-content inline size",t.MIN_CONTENT_BLOCK_SIZE="min-content block size",t.MIN_CONTENT_WIDTH="min-content width",t.MIN_CONTENT_HEIGHT="min-content height",t.FIT_CONTENT_INLINE_SIZE="fit-content inline size",t.FIT_CONTENT_BLOCK_SIZE="fit-content block size",t.FIT_CONTENT_WIDTH="fit-content width",t.FIT_CONTENT_HEIGHT="fit-content height"}(rs||(rs={}));var ls=Fr.FloatReference;function cs(t){switch(t){case ls.INLINE:return!1;case ls.COLUMN:case ls.REGION:case ls.PAGE:return!0;default:throw new Error("Unknown float-reference: "+t)}}var hs=function(){function t(t,e,n,i,r,o){this.nodePosition=t,this.floatReference=e,this.floatSide=n,this.clearSide=i,this.flowName=r,this.floatMinWrapBlock=o,this.order=null,this.id=null}var e=t.prototype;return e.getOrder=function(){if(null===this.order)throw new Error("The page float is not yet added");return this.order},e.getId=function(){if(!this.id)throw new Error("The page float is not yet added");return this.id},e.isAllowedOnContext=function(t){return t.isAnchorAlreadyAppeared(this.getId())},e.isAllowedToPrecede=function(t){return!1},t}(),fs=function(){function t(){this.floats=[],this.nextPageFloatIndex=0}var e=t.prototype;return e.nextOrder=function(){return this.nextPageFloatIndex++},e.createPageFloatId=function(t){return"pf"+t},e.addPageFloat=function(t){if(this.floats.findIndex((function(e){return Qr(e.nodePosition,t.nodePosition)}))>=0)throw new Error("A page float with the same source node is already registered");var e=t.order=this.nextOrder();t.id=this.createPageFloatId(e),this.floats.push(t)},e.findPageFloatByNodePosition=function(t){var e=this.floats.findIndex((function(e){return Qr(e.nodePosition,t)}));return e>=0?this.floats[e]:null},e.findPageFloatById=function(t){var e=this.floats.findIndex((function(e){return e.id===t}));return e>=0?this.floats[e]:null},t}(),ds=function(){function t(t,e,n,i,r){this.floatReference=t,this.floatSide=e,this.continuations=n,this.area=i,this.continues=r}var e=t.prototype;return e.hasFloat=function(t){return this.continuations.some((function(e){return e.float===t}))},e.findNotAllowedFloat=function(t){for(var e=this.continuations.length-1;e>=0;e--){var n=this.continuations[e].float;if(!n.isAllowedOnContext(t))return n}return null},e.getOuterShape=function(){return this.area.getOuterShape(null,null)},e.getOuterRect=function(){return this.area.getOuterRect()},e.getOrder=function(){var t=this.continuations.map((function(t){return t.float}));return Math.min.apply(null,t.map((function(t){return t.getOrder()})))},e.shouldBeStashedBefore=function(t){return this.getOrder()<t.getOrder()},e.addContinuations=function(t){var e=this;t.forEach((function(t){e.continuations.push(t)}))},e.getFlowName=function(){var t=this.continuations[0].float.flowName;return this.continuations.every((function(e){return e.float.flowName===t})),t},t}(),ps=function(){function t(t,e){this.float=t,this.nodePosition=e}return t.prototype.equals=function(t){return!!t&&(this===t||this.float===t.float&&Qr(this.nodePosition,t.nodePosition))},t}(),gs=function(){function t(t,e,n,i,r,o,a){this.parent=t,this.floatReference=e,this.container=n,this.flowName=i,this.generatingNodePosition=r,this.children=[],this.invalidated=!1,this.forbiddenFloats=[],this.floatFragments=[],this.stashedFloatFragments=[],this.floatAnchors={},this.floatsDeferredToNext=[],this.layoutConstraints=[],this.locked=!1,t&&t.children.push(this),this.writingMode=o||t&&t.writingMode||Ye.horizontal_tb,this.direction=a||t&&t.direction||Ye.ltr,this.floatStore=t?t.floatStore:new fs;var s=this.getPreviousSibling();this.floatsDeferredFromPrevious=s?[].concat(s.floatsDeferredToNext):[]}var e=t.prototype;return e.getParent=function(t){if(!this.parent)throw new Error("No PageFloatLayoutContext for "+t);return this.parent},e.getPreviousSiblingOf=function(t,e,n,i){var r=this.children.indexOf(t);r<0&&(r=this.children.length);for(var o=r-1;o>=0;o--){var a=this.children[o];if(a.floatReference===e&&a.flowName===n&&Qr(a.generatingNodePosition,i))return a;if(a=a.getPreviousSiblingOf(null,e,n,i))return a}return null},e.getPreviousSibling=function(){for(var t,e=this,n=this.parent;n;){if(t=n.getPreviousSiblingOf(e,this.floatReference,this.flowName,this.generatingNodePosition))return t;e=n,n=n.parent}return null},e.getContainer=function(t){return t&&t!==this.floatReference?this.getParent(t).getContainer(t):this.container},e.setContainer=function(t){this.container=t,this.reattachFloatFragments()},e.addPageFloat=function(t){this.floatStore.addPageFloat(t)},e.getPageFloatLayoutContext=function(t){return t===this.floatReference?this:this.getParent(t).getPageFloatLayoutContext(t)},e.findPageFloatByNodePosition=function(t){return this.floatStore.findPageFloatByNodePosition(t)},e.forbid=function(t){var e=t.getId(),n=t.floatReference;n===this.floatReference?this.forbiddenFloats.includes(e)||(this.forbiddenFloats.push(e),(new vs).findByFloat(t).forbid(t,this)):this.getParent(n).forbid(t)},e.isForbidden=function(t){var e=t.getId(),n=t.floatReference;return n===this.floatReference?this.forbiddenFloats.includes(e):this.getParent(n).isForbidden(t)},e.addPageFloatFragment=function(t,e){var n=t.floatReference;n!==this.floatReference?this.getParent(n).addPageFloatFragment(t,e):this.floatFragments.includes(t)||(this.floatFragments.push(t),this.floatFragments.sort((function(t,e){return t.getOrder()-e.getOrder()}))),e||this.invalidate()},e.removePageFloatFragment=function(t,e){var n=t.floatReference;if(n!==this.floatReference)this.getParent(n).removePageFloatFragment(t,e);else{var i=this.floatFragments.indexOf(t);if(i>=0){var r=this.floatFragments.splice(i,1)[0],o=r.area&&r.area.element;o&&o.parentNode&&o.parentNode.removeChild(o),e||this.invalidate()}}},e.findPageFloatFragment=function(t){if(t.floatReference!==this.floatReference)return this.getParent(t.floatReference).findPageFloatFragment(t);var e=this.floatFragments.findIndex((function(e){return e.hasFloat(t)}));return e>=0?this.floatFragments[e]:null},e.hasFloatFragments=function(t){return!(!(this.floatFragments.length>0)||t&&!this.floatFragments.some(t))||!!this.parent&&this.parent.hasFloatFragments(t)},e.hasContinuingFloatFragmentsInFlow=function(t){return this.hasFloatFragments((function(e){return e.continues&&e.getFlowName()===t}))},e.registerPageFloatAnchor=function(t,e){this.floatAnchors[t.getId()]=e},e.collectPageFloatAnchors=function(){var t=Object.assign({},this.floatAnchors);return this.children.reduce((function(t,e){return Object.assign(t,e.collectPageFloatAnchors())}),t)},e.isAnchorAlreadyAppeared=function(t){if(this.getDeferredPageFloatContinuations().some((function(e){return e.float.getId()===t})))return!0;var e=this.collectPageFloatAnchors()[t];return!!e&&!(!this.container||!this.container.element)&&this.container.element.contains(e)},e.deferPageFloat=function(t){var e=t.float;if(e.floatReference===this.floatReference){var n=this.floatsDeferredToNext.findIndex((function(t){return t.float===e}));n>=0?this.floatsDeferredToNext.splice(n,1,t):this.floatsDeferredToNext.push(t)}else this.getParent(e.floatReference).deferPageFloat(t)},e.hasPrecedingFloatsDeferredToNext=function(t,e){if(!e&&t.floatReference!==this.floatReference)return this.getParent(t.floatReference).hasPrecedingFloatsDeferredToNext(t,!1);var n=t.getOrder();return!!this.floatsDeferredToNext.some((function(e){return e.float.getOrder()<n&&!t.isAllowedToPrecede(e.float)}))||!!this.parent&&this.parent.hasPrecedingFloatsDeferredToNext(t,!0)},e.getLastFollowingFloatInFragments=function(t){var e=t.getOrder(),n=null;if(this.floatFragments.forEach((function(t){t.continuations.forEach((function(t){var i=t.float,r=i.getOrder();r>e&&(!n||r>n.getOrder())&&(n=i)}))})),this.parent){var i=this.parent.getLastFollowingFloatInFragments(t);i&&(!n||i.getOrder()>n.getOrder())&&(n=i)}return n},e.getDeferredPageFloatContinuations=function(t){t=t||this.flowName;var e=this.floatsDeferredFromPrevious.filter((function(e){return!t||e.float.flowName===t}));return this.parent&&(e=this.parent.getDeferredPageFloatContinuations(t).concat(e)),e.sort((function(t,e){return t.float.getOrder()-e.float.getOrder()}))},e.getPageFloatContinuationsDeferredToNext=function(t){t=t||this.flowName;var e=this.floatsDeferredToNext.filter((function(e){return!t||e.float.flowName===t}));return this.parent?this.parent.getPageFloatContinuationsDeferredToNext(t).concat(e):e},e.getFloatsDeferredToNextInChildContexts=function(){for(var t=[],e=[],n=this.children.length-1;n>=0;n--){var i=this.children[n];e.includes(i.flowName)||(e.push(i.flowName),t=(t=t.concat(i.floatsDeferredToNext.map((function(t){return t.float})))).concat(i.getFloatsDeferredToNextInChildContexts()))}return t},e.checkAndForbidNotAllowedFloat=function(){if(this.checkAndForbidFloatFollowingDeferredFloat())return!0;for(var t=this.floatFragments.length-1;t>=0;t--){var e=this.floatFragments[t],n=e.findNotAllowedFloat(this);if(n)return this.locked?this.invalidate():(this.removePageFloatFragment(e),this.forbid(n),this.removeEndFloatFragments(e.floatSide)),!0}return!(this.floatReference!==ls.REGION||!this.parent.locked)&&this.parent.checkAndForbidNotAllowedFloat()},e.checkAndForbidFloatFollowingDeferredFloat=function(){var t=this,e=this.getFloatsDeferredToNextInChildContexts(),n=this.floatFragments.reduce((function(t,e){return t.concat(e.continuations.map((function(t){return t.float})))}),[]);n.sort((function(t,e){return e.getOrder()-t.getOrder()}));for(var i,r=function(){var n=i.value,r=n.getOrder();if(e.some((function(t){return!n.isAllowedToPrecede(t)&&r>t.getOrder()}))){if(t.locked)t.invalidate();else{t.forbid(n);var o=t.findPageFloatFragment(n);t.removePageFloatFragment(o)}return{v:!0}}},o=_(n);!(i=o()).done;){var a=r();if("object"==typeof a)return a.v}return!1},e.finish=function(){var t=this;if(!this.checkAndForbidNotAllowedFloat()){for(var e=this.floatsDeferredToNext.length-1;e>=0;e--)if(!this.floatsDeferredToNext[e].float.isAllowedOnContext(this)){if(this.locked)return void this.invalidate();this.floatsDeferredToNext.splice(e,1)}this.floatsDeferredFromPrevious.forEach((function(e){t.floatsDeferredToNext.findIndex((function(t){return e.equals(t)}))>=0||t.floatFragments.some((function(t){return t.hasFloat(e.float)}))||t.floatsDeferredToNext.push(e)}))}},e.hasSameContainerAs=function(t){return!!this.container&&!!t.container&&this.container.element===t.container.element},e.invalidate=function(){var t=this;this.invalidated=!0,this.locked||(this.container&&(this.children.forEach((function(e){t.hasSameContainerAs(e)&&e.floatFragments.forEach((function(t){var e=t.area.element;e&&e.parentNode&&e.parentNode.removeChild(e)}))})),this.container.clear()),this.children.forEach((function(t){t.layoutConstraints.splice(0)})),this.children.splice(0),Object.keys(this.floatAnchors).forEach((function(e){delete t.floatAnchors[e]})))},e.detachChildren=function(){var t=this.children.splice(0);return t.forEach((function(t){t.floatFragments.forEach((function(t){var e=t.area.element;e&&e.parentNode&&e.parentNode.removeChild(e)}))})),t},e.attachChildren=function(t){var e=this;t.forEach((function(t){e.children.push(t),t.reattachFloatFragments()}))},e.isInvalidated=function(){return this.invalidated||!!this.parent&&this.parent.isInvalidated()},e.validate=function(){this.invalidated=!1},e.toLogical=function(t){return is(t,this.writingMode.toString(),this.direction.toString()||null,ss)},e.toPhysical=function(t){return is(t,this.writingMode.toString(),this.direction.toString()||null,as)},e.removeEndFloatFragments=function(t){var e=this.toLogical(t);if("block-end"===e||"inline-end"===e)for(var n=0;n<this.floatFragments.length;){var i=this.floatFragments[n];this.toLogical(i.floatSide)===e?this.removePageFloatFragment(i):n++}},e.stashEndFloatFragments=function(t){var e=t.floatReference;if(e===this.floatReference){var n=this.toLogical(t.floatSide);if("block-end"===n||"snap-block"===n||"inline-end"===n)for(var i=0;i<this.floatFragments.length;){var r=this.floatFragments[i],o=this.toLogical(r.floatSide);(o===n||"snap-block"===n&&"block-end"===o)&&r.shouldBeStashedBefore(t)?(this.stashedFloatFragments.push(r),this.floatFragments.splice(i,1)):i++}}else this.getParent(e).stashEndFloatFragments(t)},e.restoreStashedFragments=function(t){var e=this;t===this.floatReference?(this.stashedFloatFragments.forEach((function(t){e.addPageFloatFragment(t,!0)})),this.stashedFloatFragments.splice(0)):this.getParent(t).restoreStashedFragments(t)},e.discardStashedFragments=function(t){t===this.floatReference?this.stashedFloatFragments.splice(0):this.getParent(t).discardStashedFragments(t)},e.getStashedFloatFragments=function(t){return t===this.floatReference?this.stashedFloatFragments.concat().sort((function(t,e){return e.getOrder()-t.getOrder()})):this.getParent(t).getStashedFloatFragments(t)},e.getLimitValue=function(t,e,n,i){var r=this.toLogical(t),o=this.toPhysical(t),a=this.getLimitValueInner(r,e,n,i);if(this.parent&&this.parent.container){var s=this.parent.getLimitValue(o,e,n,i);switch(o){case"top":case"left":return Math.max(a,s);case"bottom":case"right":return Math.min(a,s)}}return a},e.getLimitValueInner=function(t,e,n,i){var r=this.getLimitValuesInner(e,n,i);switch(t){case"block-start":return this.container.vertical?r.right:r.top;case"block-end":return this.container.vertical?r.left:r.bottom;case"inline-start":return this.container.vertical?r.top:r.left;case"inline-end":return this.container.vertical?r.bottom:r.right;default:throw new Error("Unknown logical side: "+t)}},e.getLimitValuesInner=function(t,e,n){var i=this,r=this.container.originX,o=this.container.originY,a=this.container.getPaddingRect(),s={top:a.y1-o,left:a.x1-r,bottom:a.y2-o,right:a.x2-r,floatMinWrapBlockStart:0,floatMinWrapBlockEnd:0};function u(n,i,r){return"%"===n.unit?r*n.num/100:t.convertLengthToPx(n,i,e)}var l=this.floatFragments;return l.length>0&&(s=l.reduce((function(t,e){if(n&&!n(e,i))return t;var r=i.toLogical(e.floatSide),o=e.area,s=e.continuations[0].float.floatMinWrapBlock,l=t.top,c=t.left,h=t.bottom,f=t.right,d=t.floatMinWrapBlockStart,p=t.floatMinWrapBlockEnd;switch(r){case"inline-start":o.vertical?l=Math.max(l,o.top+o.height):c=Math.max(c,o.left+o.width);break;case"block-start":o.vertical?(s&&o.left<f&&(d=u(s,o.rootViewNodes[0],a.x2-a.x1)),f=Math.min(f,o.left)):(s&&o.top+o.height>l&&(d=u(s,o.rootViewNodes[0],a.y2-a.y1)),l=Math.max(l,o.top+o.height));break;case"inline-end":o.vertical?h=Math.min(h,o.top):f=Math.min(f,o.left);break;case"block-end":o.vertical?(s&&o.left+o.width>c&&(p=u(s,o.rootViewNodes[0],a.x2-a.x1)),c=Math.max(c,o.left+o.width)):(s&&o.top<h&&(p=u(s,o.rootViewNodes[0],a.y2-a.y1)),h=Math.min(h,o.top));break;default:throw new Error("Unknown logical float side: "+r)}return{top:l,left:c,bottom:h,right:f,floatMinWrapBlockStart:d,floatMinWrapBlockEnd:p}}),s)),s.left+=r,s.right+=r,s.top+=o,s.bottom+=o,s},e.setFloatAreaDimensions=function(t,e,n,i,r,o,a){if(e!==this.floatReference)return this.getParent(e).setFloatAreaDimensions(t,e,n,i,r,o,a);var s=this.toLogical(n);if("snap-block"===s){if(!a["block-start"]&&!a["block-end"])return null}else if(!a[s])return null;var u,l,c,h,f=this.getLimitValue("block-start",t.layoutContext,t.clientLayout),d=this.getLimitValue("block-end",t.layoutContext,t.clientLayout),p=this.getLimitValue("inline-start",t.layoutContext,t.clientLayout),g=this.getLimitValue("inline-end",t.layoutContext,t.clientLayout),m=t.vertical?t.originX:t.originY,v=t.vertical?t.originY:t.originX;function E(e,n){var i=e(t.bands,n);return i?(t.vertical&&(i=bn(i)),f=t.vertical?Math.min(f,i.x2):Math.max(f,i.y1),d=t.vertical?Math.max(d,i.x1):Math.min(d,i.y2),!0):o}if(f=t.vertical?Math.min(f,t.left+t.getInsetLeft()+t.width+t.getInsetRight()+m):Math.max(f,t.top+m),d=t.vertical?Math.max(d,t.left+m):Math.min(d,t.top+t.getInsetTop()+t.height+t.getInsetBottom()+m),r){var b=t.vertical?En(new rn(d,p,f,g)):new rn(p,f,g,d);if(("block-start"===s||"snap-block"===s||"inline-start"===s)&&!E(Dn,b))return null;if(("block-end"===s||"snap-block"===s||"inline-end"===s)&&!E(Sn,b))return null;if(u=(c=(d-f)*t.getBoxDir())-t.getInsetBefore()-t.getInsetAfter(),l=(h=g-p)-t.getInsetStart()-t.getInsetEnd(),!o&&(u<=0||l<=0))return null}else{c=(u=t.computedBlockSize)+t.getInsetBefore()+t.getInsetAfter();var C=(d-f)*t.getBoxDir();if("snap-block"===s){if(null===i)s="block-start";else{var y=this.container.getPaddingRect();s=this.container.getBoxDir()*(i-(this.container.vertical?y.x2:y.y1))<=this.container.getBoxDir()*((this.container.vertical?y.x1:y.y2)-i-c)?"block-start":"block-end"}if(!a[s]){if(!a["block-end"])return null;s="block-end"}}if(!o&&C<c)return null;if(h=(l="inline-start"===s||"inline-end"===s?us(t.clientLayout,t.element,[rs.FIT_CONTENT_INLINE_SIZE])[rs.FIT_CONTENT_INLINE_SIZE]:t.adjustContentRelativeSize?t.getContentInlineSize():t.vertical?t.height:t.width)+t.getInsetStart()+t.getInsetEnd(),!o&&g-p<h)return null}switch(f-=m,d-=m,p-=v,g-=v,s){case"inline-start":case"block-start":case"snap-block":t.setInlinePosition(p,l),t.setBlockPosition(f,u);break;case"inline-end":case"block-end":t.setInlinePosition(g-h,l),t.setBlockPosition(d-c*t.getBoxDir(),u);break;default:throw new Error("unknown float direction: "+n)}return s},e.getFloatFragmentExclusions=function(){var t=this.floatFragments.map((function(t){return t.getOuterShape()}));return this.parent?this.parent.getFloatFragmentExclusions().concat(t):t},e.reattachFloatFragments=function(){var t=this.container.element&&this.container.element.parentNode;t&&this.floatFragments.forEach((function(e){t.appendChild(e.area.element)}))},e.getMaxReachedAfterEdge=function(){var t=this.getContainer().vertical;return this.floatFragments.reduce((function(e,n){var i=n.getOuterRect();return t?Math.min(e,i.x1):Math.max(e,i.y2)}),t?1/0:0)},e.getBlockStartEdgeOfBlockEndFloats=function(){var t=this.getContainer().vertical;return this.floatFragments.filter((function(t){return"block-end"===t.floatSide})).reduce((function(e,n){var i=n.getOuterRect();return t?Math.max(e,i.x2):Math.min(e,i.y1)}),t?0:1/0)},e.getPageFloatClearEdge=function(t,e){function n(t){return function(e){return t.isAnchorAlreadyAppeared(e.float.getId())}}function i(t,e){return t.continuations.some(n(e))}for(var r=e.getPaddingRect(),o=e.vertical?r.x1:r.y2,a=this;a;){if(a.floatsDeferredToNext.some(n(a)))return o;a=a.parent}var s=this.getLimitValue("block-start",e.layoutContext,e.clientLayout,i);return this.getLimitValue("block-end",e.layoutContext,e.clientLayout,i)*e.getBoxDir()<o*e.getBoxDir()?o:s},e.getPageFloatPlacementCondition=function(t,e,n){var i=this;if(t.floatReference!==this.floatReference)return this.getParent(t.floatReference).getPageFloatPlacementCondition(t,e,n);var r={"block-start":!0,"block-end":!0,"inline-start":!0,"inline-end":!0};if(!n)return r;var o,a=this.toLogical(e),s=this.toLogical(n);o="all"===s?["block-start","block-end","inline-start","inline-end"]:"both"===s?["inline-start","inline-end"]:"same"===s?"snap-block"===a?["block-start","block-end"]:[a]:[s];var u=t.getOrder();function l(t){return function(e){return e.floatSide===t&&e.getOrder()<u}}return o.forEach((function(t){switch(t){case"block-start":case"inline-start":r[t]=!function t(e,n){return e.children.some((function(e){return e.floatFragments.some(l(n))||t(e,n)}))}(i,t);break;case"block-end":case"inline-end":r[t]=!function t(e,n){var i=e.parent;return!!i&&(i.floatFragments.some(l(n))||t(i,n))}(i,t);break;default:throw new Error("Unexpected side: "+t)}})),r},e.getLayoutConstraints=function(){return(this.parent?this.parent.getLayoutConstraints():[]).concat(this.layoutConstraints)},e.addLayoutConstraint=function(t,e){e===this.floatReference?this.layoutConstraints.push(t):this.getParent(e).addLayoutConstraint(t,e)},e.isColumnFullWithPageFloats=function(t){for(var e=t.layoutContext,n=t.clientLayout,i=this,r=null;i&&i.container;){var o=i.getLimitValuesInner(e,n);r?t.vertical?(o.right<r.right&&(r.right=o.right,r.floatMinWrapBlockStart=o.floatMinWrapBlockStart),o.left>r.left&&(r.left=o.left,r.floatMinWrapBlockEnd=o.floatMinWrapBlockEnd)):(o.top>r.top&&(r.top=o.top,r.floatMinWrapBlockStart=o.floatMinWrapBlockStart),o.bottom<r.bottom&&(r.bottom=o.bottom,r.floatMinWrapBlockEnd=o.floatMinWrapBlockEnd)):r=o,i=i.parent}var a=Math.max(r.floatMinWrapBlockStart,r.floatMinWrapBlockEnd);return(t.vertical?r.right-r.left:r.bottom-r.top)<=a},e.getMaxBlockSizeOfPageFloats=function(){var t=this.getContainer().vertical;return this.floatFragments.length?Math.max.apply(null,this.floatFragments.map((function(e){var n=e.area;return t?n.width:n.height}))):0},e.lock=function(){this.locked=!0},e.unlock=function(){this.locked=!1},e.isLocked=function(){return this.locked},t}(),ms=[],vs=function(){function t(){}t.register=function(t){ms.push(t)};var e=t.prototype;return e.findByNodeContext=function(t){for(var e=ms.length-1;e>=0;e--){var n=ms[e];if(n.appliesToNodeContext(t))return n}throw new Error("No PageFloatLayoutStrategy found for "+t)},e.findByFloat=function(t){for(var e=ms.length-1;e>=0;e--){var n=ms[e];if(n.appliesToFloat(t))return n}throw new Error("No PageFloatLayoutStrategy found for "+t)},t}();vs.register(new(function(){function t(){}var e=t.prototype;return e.appliesToNodeContext=function(t){return cs(t.floatReference)},e.appliesToFloat=function(t){return!0},e.createPageFloat=function(t,e,n){var i=t.floatReference,r=t.floatSide,o=t.toNodePosition();return n.resolveFloatReferenceFromColumnSpan(i,t.columnSpan,t).thenAsync((function(n){var a=new hs(o,i=n,r,t.clearSide,e.flowName,t.floatMinWrapBlock);return e.addPageFloat(a),Ti(a)}))},e.createPageFloatFragment=function(t,e,n,i){return new ds(t[0].float.floatReference,e,t,n,i)},e.findPageFloatFragment=function(t,e){return e.findPageFloatFragment(t)},e.adjustPageFloatArea=function(t,e,n){},e.forbid=function(t,e){},t}()));var Es=ds,bs=function(t){function e(e,n,i,r,o){var a;return(a=t.call(this,e,n,"block-end",null,i,o)||this).footnotePolicy=r,a}return I(e,t),e.prototype.isAllowedToPrecede=function(t){return!(t instanceof e)},e}(hs),Cs=function(t){function e(e,n,i,r){return t.call(this,e,"block-end",n,i,r)||this}I(e,t);var n=e.prototype;return n.getOrder=function(){return 1/0},n.shouldBeStashedBefore=function(t){return t instanceof bs||this.getOrder()<t.getOrder()},e}(Es),ys=function(){function t(t){this.footnote=t}return t.prototype.allowLayout=function(t){return!Qr(t.toNodePosition(),this.footnote.nodePosition)},t}();vs.register(new(function(){function t(){}var e=t.prototype;return e.appliesToNodeContext=function(t){return"footnote"===t.floatSide},e.appliesToFloat=function(t){return t instanceof bs},e.createPageFloat=function(t,e,n){var i=ls.REGION,r=e.getPageFloatLayoutContext(i);e.getPageFloatLayoutContext(ls.PAGE).hasSameContainerAs(r)&&(i=ls.PAGE);var o=t.toNodePosition(),a=new bs(o,i,e.flowName,t.footnotePolicy,t.floatMinWrapBlock);return e.addPageFloat(a),Ti(a)},e.createPageFloatFragment=function(t,e,n,i){return new Cs(t[0].float.floatReference,t,n,i)},e.findPageFloatFragment=function(t,e){return e.getPageFloatLayoutContext(t.floatReference).floatFragments.filter((function(t){return t instanceof Cs}))[0]||null},e.adjustPageFloatArea=function(t,e,n){t.isFootnote=!0,t.adjustContentRelativeSize=!1;var i=t.element;t.vertical=n.layoutContext.applyFootnoteStyle(e.vertical,n.layoutContext.nodeContext&&"rtl"===n.layoutContext.nodeContext.direction,i),t.convertPercentageSizesToPx(i),n.setComputedInsets(i,t),n.setComputedWidthAndHeight(i,t)},e.forbid=function(t,e){var n=t;switch(n.footnotePolicy){case Ye.line:var i=new ys(n);e.addLayoutConstraint(i,n.floatReference)}},t}()));var ws={page:!0,left:!0,right:!0,recto:!0,verso:!0,column:!0,region:!0};function Ds(t){return!!ws[t]}var Ss={left:!0,right:!0,recto:!0,verso:!0};function Ns(t){return!!Ss[t]}var Ts={avoid:!0,"avoid-page":!0,"avoid-column":!0,"avoid-region":!0};function As(t){return!!Ts[t]}function xs(t,e){if(!t)return e;if(!e)return t;if(Ns(e))return e;if(Ns(t))return t;var n=Ds(t),i=Ds(e);if(!n||!i)return i?e:n?t:As(e)?e:As(t)?t:e;switch(e){case"column":return t;case"region":return"column"===t?e:t;default:return e}}function Is(t){switch(t){case"left":case"right":case"recto":case"verso":return t;default:return"any"}}function Fs(t){switch(t){case"left":case"right":case"recto":case"verso":return t;default:return null}}function Ps(t,e,n,i){var r=t.viewNode;if(!r)return NaN;if(1==r.nodeType){if(t.after||!t.inline){var o=e.getElementClientRect(r);if(o.right>=o.left&&o.bottom>=o.top)return t.after?i?o.left:o.bottom:i?o.right:o.top}return NaN}var a=NaN,s=r.ownerDocument.createRange(),u=r.textContent.length;if(!u)return NaN;t.after&&(n+=u),n>=u&&(n=u-1),s.setStart(r,n),s.setEnd(r,n+1);var l=e.getRangeClientRects(s);i&&function(t){if(null==vt){var e=t.ownerDocument,n=e.createElement("div");n.style.position="absolute",n.style.top="0px",n.style.left="0px",n.style.width="100px",n.style.height="100px",n.style.overflow="hidden",n.style.lineHeight="16px",n.style.fontSize="16px",et(n,"writing-mode","vertical-rl"),t.appendChild(n);var i=e.createTextNode("a a a a a a a a a a a a a a a a");n.appendChild(i);var r=e.createRange();r.setStart(i,0),r.setEnd(i,1);var o=r.getBoundingClientRect();vt=o.right-o.left<10,t.removeChild(n)}return vt}(document.body)&&(l=function(t,e,n){var i=n.ownerDocument.createRange();i.setStart(n,0),i.setEnd(n,n.textContent.length);for(var r,o=t.getRangeClientRects(i),a=[],s=_(e);!(r=s()).done;){var u=r.value,l=void 0;for(l=0;l<o.length;l++){var c=o[l];if(u.top>=c.top&&u.bottom<=c.bottom&&Math.abs(u.left-c.left)<1){a.push({top:u.top,left:c.left,bottom:u.bottom,right:c.right});break}}l==o.length&&(f.warn("Could not fix character box"),a.push(u))}return a}(e,l,r));for(var c,h=0,d=_(l);!(c=d()).done;){var p=c.value,g=i?p.bottom-p.top:p.right-p.left;p.right>p.left&&p.bottom>p.top&&(isNaN(a)||g>h)&&(a=i?p.left:p.bottom,h=g)}return a}function Os(t,e,n){var i=e.clientLayout.getElementClientRect(t),r=e.getComputedMargin(t);return n?i.width+r.left+r.right:i.height+r.top+r.bottom}function Rs(t){for(;t;){if(t.parentNode===t.ownerDocument)return!1;t=t.parentNode}return!0}function ks(t,e){if(t)for(var n;(n=t.lastChild)!=e;)t.removeChild(n)}function Ls(t){return!!t.getAttribute("data-adapt-spec")}function Bs(t){if(!t)return!1;var e=t.viewNode;return!(!e||1!==e.nodeType)&&Ls(e)}p("SIMPLE_PROPERTY",(function(t){var e=t.name,n=t.value;switch(e){case"page-break-before":case"page-break-after":case"page-break-inside":return{name:e.replace(/^page-/,""),value:n===Ye.always?Ye.page:n,important:t.important};default:return t}}));var _s=function(){function t(){}var e=t.prototype;return e.calculateOffset=function(t){return Ms(this.getNodeContext(),t.collectElementsOffset())},e.breakPositionChosen=function(t){},e.getNodeContext=function(){return null},t}();function Ms(t,e){return{current:e.reduce((function(e,n){return e+n.calculateOffset(t)}),0),minimum:e.reduce((function(e,n){return e+n.calculateMinimumOffset(t)}),0)}}var Us=function(t){function e(e,n,i,r){var o;return(o=t.call(this)||this).position=e,o.breakOnEdge=n,o.overflows=i,o.computedBlockSize=r,o.isEdgeUpdated=!1,o.edge=0,o.overflowIfRepetitiveElementsDropped=i,o}I(e,t);var n=e.prototype;return n.findAcceptableBreak=function(t,e){return this.updateOverflows(t),e<this.getMinBreakPenalty()?null:t.findEdgeBreakPosition(this)},n.getMinBreakPenalty=function(){if(!this.isEdgeUpdated)throw new Error("EdgeBreakPosition.prototype.updateEdge not called");var t=this.isFirstContentOfRepetitiveElementsOwner()&&!this.overflowIfRepetitiveElementsDropped;return(As(this.breakOnEdge)?1:0)+(this.overflows&&!t?3:0)+(this.position.parent?this.position.parent.breakPenalty:0)},n.updateEdge=function(t){var e=t.calculateClonedPaddingBorder(this.position);this.edge=Ps(this.position,t.clientLayout,0,t.vertical)+e,this.isEdgeUpdated=!0},n.updateOverflows=function(t){this.isEdgeUpdated||this.updateEdge(t);var e=this.edge,n=this.calculateOffset(t);this.overflowIfRepetitiveElementsDropped=t.isOverflown(e+(t.vertical?-1:1)*n.minimum),this.overflows=this.position.overflow=t.isOverflown(e+(t.vertical?-1:1)*n.current)},n.getNodeContext=function(){return this.position},n.isFirstContentOfRepetitiveElementsOwner=function(){var t=this.getNodeContext();if(!t||!t.parent)return!1;var e=t.parent.formattingContext;if(!Or.isInstanceOfRepetitiveElementsOwnerFormattingContext(e))return!1;var n=e.getRepetitiveElements();return!!n&&n.isFirstContentNode(t)},e}(_s);function Vs(t){var e,n=t.toString();switch(n){case"inline-flex":e="flex";break;case"inline-grid":e="grid";break;case"inline-table":e="table";break;case"inline":case"table-row-group":case"table-column":case"table-column-group":case"table-header-group":case"table-footer-group":case"table-row":case"table-cell":case"table-caption":case"inline-block":e="block";break;default:e=n}return _e(e)}function zs(t){return t===Ye.absolute||t===Ye.fixed}function Hs(t,e,n,i){return t===Ye.none||(zs(e)?(n=Ye.none,t=Vs(t)):(n&&n!==Ye.none||i)&&(t=Vs(t))),{display:t,position:e,float:n}}function Gs(t,e,n,i){return Hs(t,e,n,i).display===Ye.block}function Ws(t){switch(t.toString()){case"inline":case"inline-block":case"inline-list-item":case"inline-flex":case"inline-grid":case"ruby":case"inline-table":return!0;default:return!1}}var Xs=function(){function t(){}return t.prototype.find=function(t){for(var n=v(e.HOOKS.RESOLVE_LAYOUT_PROCESSOR),i=0;i<n.length;i++){var r=n[i](t);if(r)return r}throw new Error("No processor found for a formatting context: "+t.getName())},t}(),js=function(){function t(){}var e=t.prototype;return e.layout=function(t,e,n){return e.isFloatNodeContext(t)?e.layoutFloatOrFootnote(t):e.isBreakable(t)?e.layoutBreakableBlock(t):e.layoutUnbreakable(t)},e.createEdgeBreakPosition=function(t,e,n,i){return new Us(t.copy(),e,n,i)},e.startNonInlineElementNode=function(t){return!1},e.afterNonInlineElementNode=function(t,e){return!1},e.clearOverflownViewNodes=function(t,e,n,i){if(n.viewNode&&n.viewNode.parentNode){var r=n.viewNode.parentNode;ks(r,n.viewNode),i&&r.removeChild(n.viewNode)}},e.finishBreak=function(t,e,n,i){var r=n||null!=e.viewNode&&1==e.viewNode.nodeType&&!e.after;return t.clearOverflownViewNodes(e,r),i&&(t.fixJustificationIfNeeded(e,!0),t.layoutContext.processFragmentedBlockEdge(r?e:e.parent)),Ti(!0)},t}(),Ks=function(){function t(t){this.parent=t,this.formattingContextType="Block"}var e=t.prototype;return e.getName=function(){return"Block formatting context (BlockFormattingContext)"},e.isFirstTime=function(t,e){return e},e.getParent=function(){return this.parent},e.saveState=function(){},e.restoreState=function(t){},t}(),$s=new js,qs=Ir.isInstanceOfBlockFormattingContext;p(e.HOOKS.RESOLVE_FORMATTING_CONTEXT,(function(t,e,n,i,r,o){var a=t.parent;return!a&&t.formattingContext||a&&t.formattingContext!==a.formattingContext?null:t.establishesBFC||!t.formattingContext&&Gs(n,i,r,o)?new Ks(a?a.formattingContext:null):null})),p(e.HOOKS.RESOLVE_LAYOUT_PROCESSOR,(function(t){return t instanceof Ks?$s:null}));var Ys=function(){function t(){this.initialBreakPositions=null,this.initialStateOfFormattingContext=null}var e=t.prototype;return e.layout=function(t,e){return this.prepareLayout(t,e),this.tryLayout(t,e)},e.tryLayout=function(t,e){var n=this,i=Ni("AbstractLayoutRetryer.tryLayout");this.saveState(t,e);var r=this.resolveLayoutMode(t);return r.doLayout(t,e).then((function(o){var a=r.accept(o,e);(a=r.postLayout(o,n.initialPosition,e,a))?i.finish(o):(n.clearNodes(n.initialPosition),n.restoreState(t,e),n.tryLayout(n.initialPosition,e).thenFinish(i))})),i.result()},e.prepareLayout=function(t,e){},e.clearNodes=function(t){for(var e,n,i=t.viewNode||t.parent.viewNode;e=i.lastChild;)i.removeChild(e);for(;n=i.nextSibling;)n.parentNode.removeChild(n)},e.saveState=function(t,e){this.initialPosition=t.copy(),this.initialBreakPositions=[].concat(e.breakPositions),this.initialFragmentLayoutConstraints=[].concat(e.fragmentLayoutConstraints),t.formattingContext&&(this.initialStateOfFormattingContext=t.formattingContext.saveState())},e.restoreState=function(t,e){e.breakPositions=this.initialBreakPositions,e.fragmentLayoutConstraints=this.initialFragmentLayoutConstraints,t.formattingContext&&t.formattingContext.restoreState(this.initialStateOfFormattingContext)},t}(),Zs=function(){function t(){}var e=t.prototype;return e.initialState=function(t){return{nodeContext:t,atUnforcedBreak:!1,break:!1}},e.startNonDisplayableNode=function(t){},e.afterNonDisplayableNode=function(t){},e.startIgnoredTextNode=function(t){},e.afterIgnoredTextNode=function(t){},e.startNonElementNode=function(t){},e.afterNonElementNode=function(t){},e.startInlineElementNode=function(t){},e.afterInlineElementNode=function(t){},e.startNonInlineElementNode=function(t){},e.afterNonInlineElementNode=function(t){},e.finish=function(t){},t}(),Qs=function(){function t(t,e){this.strategy=t,this.layoutContext=e}return t.prototype.iterate=function(t){var e=this,n=this.strategy,i=n.initialState(t),r=Ni("LayoutIterator");return r.loopWithFrame((function(t){for(var r;i.nodeContext;){var o=((r=i.nodeContext.viewNode?1!==i.nodeContext.viewNode.nodeType?jr(i.nodeContext.viewNode,i.nodeContext.whitespace)?i.nodeContext.after?n.afterIgnoredTextNode(i):n.startIgnoredTextNode(i):i.nodeContext.after?n.afterNonElementNode(i):n.startNonElementNode(i):i.nodeContext.inline?i.nodeContext.after?n.afterInlineElementNode(i):n.startInlineElementNode(i):i.nodeContext.after?n.afterNonInlineElementNode(i):n.startNonInlineElementNode(i):i.nodeContext.after?n.afterNonDisplayableNode(i):n.startNonDisplayableNode(i))&&r.isPending()?r:Ti(!0)).thenAsync((function(){return i.break?Ti(null):e.layoutContext.nextInTree(i.nodeContext,i.atUnforcedBreak)}));if(o.isPending())return void o.then((function(e){i.break?t.breakLoop():(i.nodeContext=e,t.continueLoop())}));if(i.break)return void t.breakLoop();i.nodeContext=o.get()}n.finish(i),t.breakLoop()})).then((function(){r.finish(i.nodeContext)})),r.result()},t}(),Js=function(t){function e(e){var n;return(n=t.call(this)||this).leadingEdge=e,n}I(e,t);var n=e.prototype;return n.startNonInlineBox=function(t){},n.endEmptyNonInlineBox=function(t){},n.endNonInlineBox=function(t){},n.initialState=function(t){return{nodeContext:t,atUnforcedBreak:!!this.leadingEdge&&t.after,break:!1,leadingEdge:this.leadingEdge,breakAtTheEdge:null,onStartEdges:!1,leadingEdgeContexts:[],lastAfterNodeContext:null}},n.processForcedBreak=function(t,e){var n=!t.leadingEdge&&Ds(t.breakAtTheEdge);if(n){var i=t.nodeContext=t.leadingEdgeContexts[0]||t.nodeContext;i.viewNode.parentNode.removeChild(i.viewNode),e.pageBreakType=t.breakAtTheEdge}return n},n.saveEdgeAndProcessOverflow=function(t,e){var n=e.checkOverflowAndSaveEdgeAndBreakPosition(t.lastAfterNodeContext,null,!0,t.breakAtTheEdge);return n&&(t.nodeContext=(t.lastAfterNodeContext||t.nodeContext).modify(),t.nodeContext.overflow=!0),n},n.processLayoutConstraint=function(t,e,n){var i=t.nodeContext,r=!e.allowLayout(i);return r&&(n.checkOverflowAndSaveEdgeAndBreakPosition(t.lastAfterNodeContext,null,!1,t.breakAtTheEdge),(i=t.nodeContext=i.modify()).overflow=!0),r},n.startNonElementNode=function(t){t.onStartEdges=!1},n.startNonInlineElementNode=function(t){return t.leadingEdgeContexts.push(t.nodeContext.copy()),t.breakAtTheEdge=xs(t.breakAtTheEdge,t.nodeContext.breakBefore),t.onStartEdges=!0,this.startNonInlineBox(t)},n.afterNonInlineElementNode=function(t){var e;return(t.onStartEdges?((e=this.endEmptyNonInlineBox(t))&&e.isPending()?e:Ti(!0)).thenAsync((function(){return t.break||(t.leadingEdgeContexts=[],t.leadingEdge=!1,t.atUnforcedBreak=!1,t.breakAtTheEdge=null),Ti(!0)})):(e=this.endNonInlineBox(t))&&e.isPending()?e:Ti(!0)).thenAsync((function(){return t.break||(t.onStartEdges=!1,t.lastAfterNodeContext=t.nodeContext.copy(),t.breakAtTheEdge=xs(t.breakAtTheEdge,t.nodeContext.breakAfter)),Ti(!0)}))},e}(Zs),tu=[],eu=(new DOMParser).parseFromString('<root xmlns="'+W.SHADOW+'"/>',"text/xml"),nu=["footnote-marker","first-5-lines","first-4-lines","first-3-lines","first-2-lines","first-line","first-letter","before","","after"];function iu(t){return t.getAttribute("data-adapt-pseudo")||""}function ru(t,e){t.setAttribute("data-adapt-pseudo",e)}var ou=function(){function t(t,e,n,i,r){this.element=t,this.style=e,this.styler=n,this.context=i,this.exprContentListener=r,this.contentProcessed={}}var e=t.prototype;return e.getStyle=function(t,e){var n=iu(t);this.styler&&n&&n.match(/after$/)&&(this.style=this.styler.getStyle(this.element,!0),this.styler=null);var i=ko(this.style,"_pseudos")[n]||{};if(n.match(/^first-/)&&!i["x-first-pseudo"]){var r,o=1;"first-letter"==n?o=0:null!=(r=n.match(/^first-([0-9]+)-lines$/))&&(o=r[1]-0),i["x-first-pseudo"]=new No(new Ve(o),0)}return i},e.processContent=function(t,e){var n=iu(t);if(!this.contentProcessed[n]){this.contentProcessed[n]=!0;var i=e.content;i&&fo(i)&&i.visit(new ho(t,this.context,i,this.exprContentListener))}},t}(),au=xr.registerFragmentIndex,su=function(){function t(t,e){this.sourceNode=t,this.styler=e}var e=t.prototype;return e.createElement=function(t,e){var n=this,i=e.viewNode.ownerDocument.createElement("div"),r=new vu(t,i,e),o=r.getColumn().pageBreakType;return r.getColumn().pageBreakType=null,r.layout(this.createNodePositionForPseudoElement(),!0).thenAsync((function(){n.styler.contentProcessed["after-if-continues"]=!1,r.getColumn().pageBreakType=o;var t=i.firstChild;return et(t,"display","block"),Ti(t)}))},e.createNodePositionForPseudoElement=function(){var t=eu.createElementNS(W.XHTML,"div");ru(t,"after-if-continues");var e=this.createShadowContext(t);return new ao({steps:[{node:t,shadowType:e.type,shadowContext:e,nodeShadow:null,shadowSibling:null}],offsetInNode:0,after:!1,preprocessedTextContent:null})},e.createShadowContext=function(t){return new no(this.sourceNode,t,null,null,null,kr.ShadowType.ROOTED,this.styler)},t}(),uu=function(){function t(t,e,n){this.nodeContext=t,this.afterIfContinues=e,this.pseudoElementHeight=n,this.flagmentLayoutConstraintType="AfterIfContinue"}var e=t.prototype;return e.allowLayout=function(t,e,n){return!(e&&!t||t&&t.overflow)},e.nextCandidate=function(t){return!1},e.postLayout=function(t,e,n,i){},e.finishBreak=function(t,e){var n=this;return this.getRepetitiveElements().affectTo(t)?this.afterIfContinues.createElement(e,this.nodeContext).thenAsync((function(t){return n.nodeContext.viewNode.appendChild(t),Ti(!0)})):Ti(!0)},e.getRepetitiveElements=function(){return new lu(this.nodeContext,this.pseudoElementHeight)},e.equalsTo=function(e){return e instanceof t&&this.afterIfContinues==e.afterIfContinues},e.getPriorityOfFinishBreak=function(){return 9},t}(),lu=function(){function t(t,e){this.nodeContext=t,this.pseudoElementHeight=e}var e=t.prototype;return e.calculateOffset=function(t){return this.affectTo(t)?this.pseudoElementHeight:0},e.calculateMinimumOffset=function(t){return this.calculateOffset(t)},e.affectTo=function(t){if(!t)return!1;var e=t.shadowContext?t.shadowContext.owner:t.sourceNode;if(e===this.nodeContext.sourceNode)return!!t.after;for(var n=e.parentNode;n;n=n.parentNode)if(n===this.nodeContext.sourceNode)return!0;return!1},t}();function cu(t,e){if(!t||!t.afterIfContinues||t.after||e.isFloatNodeContext(t))return Ti(t);var n=t.afterIfContinues;return n.createElement(e,t).thenAsync((function(i){var r=function(t,e,n){var i=t.viewNode;i.appendChild(n);var r=Os(n,e,t.vertical);return i.removeChild(n),r}(t,e,i);return e.fragmentLayoutConstraints.push(new uu(t,n,r)),Ti(t)}))}function hu(t,e){return t.thenAsync((function(t){return cu(t,e)}))}var fu={img:!0,svg:!0,audio:!0,video:!0},du=function(){function t(t){this.constraints=t}return t.prototype.allowLayout=function(t){return this.constraints.every((function(e){return e.allowLayout(t)}))},t}(),pu=function(t){function e(e,n){var i;return(i=t.call(this)||this).checkPoints=e,i.penalty=n,i.alreadyEvaluated=!1,i.breakNodeContext=null,i}I(e,t);var n=e.prototype;return n.findAcceptableBreak=function(t,e){return e<this.getMinBreakPenalty()?null:(this.alreadyEvaluated||(this.breakNodeContext=t.findBoxBreakPosition(this,e>0),this.alreadyEvaluated=!0),this.breakNodeContext)},n.getMinBreakPenalty=function(){return this.penalty},n.getNodeContext=function(){return this.alreadyEvaluated?this.breakNodeContext:this.checkPoints[this.checkPoints.length-1]},e}(_s);function gu(t){switch(t){case"ruby":case"inline-block":case"inline-flex":case"inline-grid":case"inline-list-item":case"inline-table":return!0}return!1}var mu=function(t){function n(e,n,i,r,o){var a;return(a=t.call(this,e)||this).layoutContext=n,a.clientLayout=i,a.layoutConstraint=r,a.pageFloatLayoutContext=o,a.flowRootFormattingContext=null,a.isFloat=!1,a.isFootnote=!1,a.startEdge=0,a.endEdge=0,a.beforeEdge=0,a.afterEdge=0,a.footnoteEdge=0,a.box=null,a.chunkPositions=null,a.bands=null,a.overflown=!1,a.breakPositions=null,a.pageBreakType=null,a.forceNonfitting=!0,a.leftFloatEdge=0,a.rightFloatEdge=0,a.bottommostFloatTop=0,a.stopAtOverflow=!0,a.lastAfterPosition=null,a.fragmentLayoutConstraints=[],a.pseudoParent=null,a.nodeContextOverflowingDueToRepetitiveElements=null,a.blockDistanceToBlockEndFloats=NaN,a.last=e.lastChild,a.viewDocument=e.ownerDocument,o.setContainer(L(a)),a}I(n,t);var i=n.prototype;return i.getTopEdge=function(){return this.vertical?this.startEdge:this.beforeEdge},i.getBottomEdge=function(){return this.vertical?this.endEdge:this.afterEdge},i.getLeftEdge=function(){return this.vertical?this.afterEdge:this.startEdge},i.getRightEdge=function(){return this.vertical?this.beforeEdge:this.endEdge},i.isFloatNodeContext=function(t){return!(!t.floatSide||this.isFloat&&!t.parent)},i.stopByOverflow=function(t){return this.stopAtOverflow&&!!t&&t.overflow},i.isOverflown=function(t){return this.vertical?t<this.footnoteEdge:t>this.footnoteEdge},i.getExclusions=function(){var t=this.pageFloatLayoutContext.getFloatFragmentExclusions();return this.exclusions.concat(t)},i.openAllViews=function(t){var e=this,n=Ni("openAllViews"),i=t.steps;this.layoutContext.setViewRoot(this.element,this.isFootnote);var r=i.length-1,o=null;return n.loop((function(){for(;r>=0&&(o=to(i[r],o),r!==i.length-1||o.formattingContext||(o.formattingContext=e.flowRootFormattingContext),0!=r||(o.offsetInNode=e.calculateOffsetInNodeForNodeContext(t),o.after=t.after,o.preprocessedTextContent=t.preprocessedTextContent,!o.after));){var n=e.layoutContext.setCurrent(o,0==r&&0==o.offsetInNode);if(r--,n.isPending())return n}return Ti(!1)})).then((function(){n.finish(o)})),n.result()},i.calculateOffsetInNodeForNodeContext=function(t){return t.preprocessedTextContent?_r(t.preprocessedTextContent,t.offsetInNode,1):t.offsetInNode},i.maybePeelOff=function(t,e){if(t.firstPseudo&&t.inline&&!t.after&&0==t.firstPseudo.count&&1!=t.viewNode.nodeType){var n=t.viewNode.textContent.match(M);return this.layoutContext.peelOff(t,n?n[0].length:0)}return Ti(t)},i.buildViewToNextBlockEdge=function(t,e){var n=this,i=!1,r=Ni("buildViewToNextBlockEdge");return r.loopWithFrame((function(r){t.viewNode&&!Bs(t)&&e.push(t.copy()),n.maybePeelOff(t,0).then((function(o){o!==t&&(Bs(t=o)||e.push(t.copy())),n.nextInTree(t).then((function(e){(t=e)?(!i&&n.layoutConstraint.allowLayout(t)||(i=!0,(t=t.modify()).overflow=!0),n.isFloatNodeContext(t)&&!n.vertical?n.layoutFloatOrFootnote(t).then((function(e){t=e,n.pageFloatLayoutContext.isInvalidated()&&(t=null),t?r.continueLoop():r.breakLoop()})):t.inline?r.continueLoop():r.breakLoop()):r.breakLoop()}))}))})).then((function(){r.finish(t)})),r.result()},i.nextInTree=function(t,e){return hu(this.layoutContext.nextInTree(t,e),this)},i.buildDeepElementView=function(t){var e=this;if(!t.viewNode)return Ti(t);var n=[],i=t.sourceNode,r=Ni("buildDeepElementView");return r.loopWithFrame((function(r){t.viewNode&&t.inline&&!Bs(t)?n.push(t.copy()):(n.length>0&&e.postLayoutBlock(t,n),n=[]),e.maybePeelOff(t,0).then((function(o){var a=o;if(a!==t){for(var s=a;s&&s.sourceNode!=i;)s=s.parent;if(null==s)return t=a,void r.breakLoop();Bs(a)||n.push(a.copy())}e.nextInTree(a).then((function(n){(t=n)&&t.sourceNode!=i?e.layoutConstraint.allowLayout(t)?r.continueLoop():((t=t.modify()).overflow=!0,e.stopAtOverflow?r.breakLoop():r.continueLoop()):r.breakLoop()}))}))})).then((function(){n.length>0&&e.postLayoutBlock(t,n),r.finish(t)})),r.result()},i.createFloat=function(t,e,n,i){var r=this.viewDocument.createElement("div");return this.vertical?(i>=this.height&&(i-=.1),et(r,"height",n+"px"),et(r,"width",i+"px")):(n>=this.width&&(n-=.1),et(r,"width",n+"px"),et(r,"height",i+"px")),et(r,"float",e),et(r,"clear",e),this.element.insertBefore(r,t),r},i.killFloats=function(){for(var t=this.element.firstChild;t;){var e=t.nextSibling;if(1==t.nodeType){var n=t,i=n.style.cssFloat;if("left"!=i&&"right"!=i)break;this.element.removeChild(n)}t=e}},i.createFloats=function(){for(var t,e=this.element.firstChild,n=this.bands,i=this.vertical?this.getTopEdge():this.getLeftEdge(),r=this.vertical?this.getBottomEdge():this.getRightEdge(),o=_(n);!(t=o()).done;){var a=t.value,s=a.y2-a.y1;a.left=this.createFloat(e,"left",a.x1-i,s),a.right=this.createFloat(e,"right",r-a.x2,s)}},i.calculateEdge=function(t,e,n,i){var r;if(t&&Rs(t.viewNode))return NaN;if(t&&t.after&&!t.inline&&(r=Ps(t,this.clientLayout,0,this.vertical),!isNaN(r)))return r;for(var o=i-(t=e[n]).boxOffset;;){if(r=Ps(t,this.clientLayout,o,this.vertical),!isNaN(r))return r;if(o>0)o--;else{if(--n<0)return this.beforeEdge;1!=(t=e[n]).viewNode.nodeType&&(o=t.viewNode.textContent.length)}}},i.parseComputedLength=function(t){if("number"==typeof t)return t;var e=t.match(/^(-?[0-9]*(\.[0-9]*)?)px$/);return e?parseFloat(e[0]):0},i.getComputedMargin=function(t){var e=this.clientLayout.getElementComputedStyle(t),n=new an(0,0,0,0);return e&&(n.left=this.parseComputedLength(e.marginLeft),n.top=this.parseComputedLength(e.marginTop),n.right=this.parseComputedLength(e.marginRight),n.bottom=this.parseComputedLength(e.marginBottom)),n},i.getComputedPaddingBorder=function(t){var e=this.clientLayout.getElementComputedStyle(t),n=new an(0,0,0,0);return e&&(n.left=this.parseComputedLength(e.borderLeftWidth)+this.parseComputedLength(e.paddingLeft),n.top=this.parseComputedLength(e.borderTopWidth)+this.parseComputedLength(e.paddingTop),n.right=this.parseComputedLength(e.borderRightWidth)+this.parseComputedLength(e.paddingRight),n.bottom=this.parseComputedLength(e.borderBottomWidth)+this.parseComputedLength(e.paddingBottom)),n},i.getComputedInsets=function(t){var e=this.clientLayout.getElementComputedStyle(t),n=new an(0,0,0,0);if(e){if("border-box"==e.boxSizing)return this.getComputedMargin(t);n.left=this.parseComputedLength(e.marginLeft)+this.parseComputedLength(e.borderLeftWidth)+this.parseComputedLength(e.paddingLeft),n.top=this.parseComputedLength(e.marginTop)+this.parseComputedLength(e.borderTopWidth)+this.parseComputedLength(e.paddingTop),n.right=this.parseComputedLength(e.marginRight)+this.parseComputedLength(e.borderRightWidth)+this.parseComputedLength(e.paddingRight),n.bottom=this.parseComputedLength(e.marginBottom)+this.parseComputedLength(e.borderBottomWidth)+this.parseComputedLength(e.paddingBottom)}return n},i.setComputedInsets=function(t,e){var n=this.clientLayout.getElementComputedStyle(t);n&&(e.marginLeft=this.parseComputedLength(n.marginLeft),e.borderLeft=this.parseComputedLength(n.borderLeftWidth),e.paddingLeft=this.parseComputedLength(n.paddingLeft),e.marginTop=this.parseComputedLength(n.marginTop),e.borderTop=this.parseComputedLength(n.borderTopWidth),e.paddingTop=this.parseComputedLength(n.paddingTop),e.marginRight=this.parseComputedLength(n.marginRight),e.borderRight=this.parseComputedLength(n.borderRightWidth),e.paddingRight=this.parseComputedLength(n.paddingRight),e.marginBottom=this.parseComputedLength(n.marginBottom),e.borderBottom=this.parseComputedLength(n.borderBottomWidth),e.paddingBottom=this.parseComputedLength(n.paddingBottom))},i.setComputedWidthAndHeight=function(t,e){var n=this.clientLayout.getElementComputedStyle(t);n&&(e.width=this.parseComputedLength(n.width),e.height=this.parseComputedLength(n.height))},i.layoutUnbreakable=function(t){return this.buildDeepElementView(t)},i.layoutFloat=function(t){var e=this,n=Ni("layoutFloat"),i=t.viewNode,r=t.floatSide;return et(i,"float","none"),et(i,"display","inline-block"),et(i,"vertical-align","top"),this.buildDeepElementView(t).then((function(o){for(var a=e.clientLayout.getElementClientRect(i),s=e.getComputedMargin(i),u=new rn(a.left-s.left,a.top-s.top,a.right+s.right,a.bottom+s.bottom),l=e.startEdge,c=e.endEdge,h=t.parent;h&&h.inline;)h=h.parent;if(h){var f=h.viewNode.ownerDocument.createElement("div");f.style.left="0px",f.style.top="0px",e.vertical?(f.style.bottom="0px",f.style.width="1px"):(f.style.right="0px",f.style.height="1px"),h.viewNode.appendChild(f);var d=e.clientLayout.getElementClientRect(f);l=Math.max(e.getStartEdge(d),l),c=Math.min(e.getEndEdge(d),c),h.viewNode.removeChild(f);var p=e.vertical?u.y2-u.y1:u.x2-u.x1;"left"==r?c=Math.max(c,l+p):l=Math.min(l,c-p),h.viewNode.appendChild(t.viewNode)}var g=new rn(l,e.getBoxDir()*e.beforeEdge,c,e.getBoxDir()*e.afterEdge),m=u;e.vertical&&(m=En(u));var v=e.getBoxDir();if(m.y1<e.bottommostFloatTop*v){var E=m.y2-m.y1;m.y1=e.bottommostFloatTop*v,m.y2=m.y1+E}!function(t,e,n,i){for(var r=n.y1,o=n.x2-n.x1,a=n.y2-n.y1,s=wn(e,r);;){var u=r+a;if(u>t.y2)return!1;for(var l=t.x1,c=t.x2,h=s;h<e.length&&e[h].y1<u;h++){var f=e[h];f.x1>l&&(l=f.x1),f.x2<c&&(c=f.x2)}if(l+o<=c||s>=e.length)return"left"==i?(n.x1=l,n.x2=l+o):(n.x1=c-o,n.x2=c),n.y2+=r-n.y1,n.y1=r,!0;r=e[s].y2,s++}}(g,e.bands,m,r),e.vertical&&(u=bn(m));var b,C=e.getComputedInsets(i);et(i,"width",u.x2-u.x1-C.left-C.right+"px"),et(i,"height",u.y2-u.y1-C.top-C.bottom+"px"),et(i,"position","absolute"),et(i,"display",t.display);var y=null;if(h&&(y=h.containingBlockForAbsolute?h:h.getContainingBlockForAbsolute()),y){var w=y.viewNode.ownerDocument.createElement("div");w.style.position="absolute",y.vertical?w.style.right="0":w.style.left="0",w.style.top="0",y.viewNode.appendChild(w),b=e.clientLayout.getElementClientRect(w),y.viewNode.removeChild(w)}else b={left:e.getLeftEdge()-e.paddingLeft,right:e.getRightEdge()+e.paddingRight,top:e.getTopEdge()-e.paddingTop};(y?y.vertical:e.vertical)?et(i,"right",b.right-u.x2+"px"):et(i,"left",u.x1-b.left+"px"),et(i,"top",u.y1-b.top+"px"),t.clearSpacer&&(t.clearSpacer.parentNode.removeChild(t.clearSpacer),t.clearSpacer=null);var D=e.vertical?u.x1:u.y2,S=e.vertical?u.x2:u.y1;e.isOverflown(D)&&0!=e.breakPositions.length?((t=t.modify()).overflow=!0,n.finish(t)):(e.killFloats(),g=new rn(e.getLeftEdge(),e.getTopEdge(),e.getRightEdge(),e.getBottomEdge()),e.vertical&&(g=En(g)),function(t,e,n,i,r){for(i||(i=[new un(n.y1,n.y2,n.x1,n.x2)]);i.length>0&&i[0].y2<=t.y1;)i.shift();if(0!=i.length){var o;i[0].y1<t.y1&&(i[0].y1=t.y1);var a=0==e.length?t.y1:e[e.length-1].y2;a<t.y2&&e.push(new un(a,t.y2,t.x1,t.x2));for(var s,u=wn(e,i[0].y1),l=_(i);!(s=l()).done;){var c=s.value;if(u==e.length)break;for(e[u].y1<c.y1&&(o=e[u],u++,e.splice(u,0,new un(c.y1,o.y2,o.x1,o.x2)),o.y2=c.y1);u<e.length&&((o=e[u++]).y2>c.y2&&(e.splice(u,0,new un(c.y2,o.y2,o.x1,o.x2)),o.y2=c.y2),c.x1!=c.x2&&("left"==r?o.x1=Math.min(c.x2,t.x2):o.x2=Math.max(c.x1,t.x1)),o.y2!=c.y2););}yn(t,e)}}(g,e.bands,m,null,r),e.createFloats(),"left"==r?e.leftFloatEdge=D:e.rightFloatEdge=D,e.bottommostFloatTop=S,e.updateMaxReachedAfterEdge(D),n.finish(o))})),n.result()},i.setupFloatArea=function(t,e,n,i,r,o){var a=this.pageFloatLayoutContext,s=a.getContainer(e),u=t.element;s.element.parentNode.appendChild(u),t.isFloat=!0,t.originX=s.originX,t.originY=s.originY,t.vertical=s.vertical,t.marginLeft=t.marginRight=t.marginTop=t.marginBottom=0,t.borderLeft=t.borderRight=t.borderTop=t.borderBottom=0,t.paddingLeft=t.paddingRight=t.paddingTop=t.paddingBottom=0,t.exclusions=(s.exclusions||[]).concat(),t.forceNonfitting=!a.hasFloatFragments(),t.innerShape=null;var l=s.getPaddingRect();t.setHorizontalPosition(l.x1-s.originX,l.x2-l.x1),t.setVerticalPosition(l.y1-s.originY,l.y2-l.y1),r.adjustPageFloatArea(t,s,this),t.init();var c=!!a.setFloatAreaDimensions(t,e,n,i,!0,!a.hasFloatFragments(),o);return c?(t.killFloats(),t.init()):s.element.parentNode.removeChild(u),c},i.createPageFloatArea=function(t,e,n,i,r){var o=this.element.ownerDocument.createElement("div");et(o,"position","absolute");var a=this.pageFloatLayoutContext.getPageFloatLayoutContext(t.floatReference),s=new gs(null,ls.COLUMN,null,this.pageFloatLayoutContext.flowName,t.nodePosition,null,null),u=a.getContainer(),l=new wu(e,o,this.layoutContext.clone(),this.clientLayout,this.layoutConstraint,s,u);return s.setContainer(l),this.setupFloatArea(l,t.floatReference,e,n,i,r)?l:null},i.layoutSinglePageFloatFragment=function(t,e,n,i,r,o,a){var s=this.pageFloatLayoutContext,u=(t=(a?a.continuations:[]).concat(t))[0].float,l=s.getPageFloatPlacementCondition(u,e,n),c=this.createPageFloatArea(u,e,o,r,l),h={floatArea:c,pageFloatFragment:null,newPosition:null};if(!c)return Ti(h);var f=Ni("layoutSinglePageFloatFragment"),d=!1,p=0;return f.loopWithFrame((function(e){if(p>=t.length)e.breakLoop();else{var n=new ao(t[p].nodePosition);c.layout(n,!0).then((function(t){h.newPosition=t,!t||i?(p++,e.continueLoop()):(d=!0,e.breakLoop())}))}})).then((function(){if(!d){var n=s.setFloatAreaDimensions(c,u.floatReference,e,o,!1,i,l);if(n){var a=r.createPageFloatFragment(t,n,c,!!h.newPosition);s.addPageFloatFragment(a,!0),h.pageFloatFragment=a}else d=!0}f.finish(h)})),f.result()},i.layoutPageFloatInner=function(t,e,n,i){var r=this,o=this.pageFloatLayoutContext,a=t.float;function s(e,n){n?o.removePageFloatFragment(n,!0):e&&e.element.parentNode.removeChild(e.element),o.restoreStashedFragments(a.floatReference),o.deferPageFloat(t)}o.stashEndFloatFragments(a);var u=Ni("layoutPageFloatInner");return this.layoutSinglePageFloatFragment([t],a.floatSide,a.clearSide,!o.hasFloatFragments(),e,n,i).then((function(t){var e=t.floatArea,n=t.pageFloatFragment,l=t.newPosition;n?r.layoutStashedPageFloats(a.floatReference,[i]).then((function(t){if(t){if(o.addPageFloatFragment(n),o.discardStashedFragments(a.floatReference),l){var i=new ps(a,l.primary);o.deferPageFloat(i)}u.finish(!0)}else s(e,n),u.finish(!1)})):(s(e,n),u.finish(!1))})),u.result()},i.layoutStashedPageFloats=function(t,e){var n=this,i=this.pageFloatLayoutContext,r=i.getStashedFloatFragments(t),o=[],a=[],s=!1,u=Ni("layoutStashedPageFloats"),l=0;return u.loopWithFrame((function(t){if(l>=r.length)t.breakLoop();else{var i=r[l];if(e.includes(i))return l++,void t.continueLoop();var u=(new vs).findByFloat(i.continuations[0].float);n.layoutSinglePageFloatFragment(i.continuations,i.floatSide,null,!1,u,null).then((function(e){var n=e.floatArea;n&&o.push(n);var i=e.pageFloatFragment;i?(a.push(i),l++,t.continueLoop()):(s=!0,t.breakLoop())}))}})).then((function(){s?(a.forEach((function(t){i.removePageFloatFragment(t,!0)})),o.forEach((function(t){var e=t.element;e&&e.parentNode&&e.parentNode.removeChild(e)}))):r.forEach((function(t){var e=t.area.element;e&&e.parentNode&&e.parentNode.removeChild(e)})),u.finish(!s)})),u.result()},i.setFloatAnchorViewNode=function(t){var e=t.viewNode.parentNode,n=e.ownerDocument.createElement("span");n.setAttribute("data-adapt-spec","1"),"footnote"===t.floatSide&&this.layoutContext.applyPseudoelementStyle(t,"footnote-call",n),e.appendChild(n),e.removeChild(t.viewNode);var i=t.modify();return i.after=!0,i.viewNode=n,i},i.resolveFloatReferenceFromColumnSpan=function(t,e,n){var i=this,r=Ni("resolveFloatReferenceFromColumnSpan"),o=this.pageFloatLayoutContext,a=o.getPageFloatLayoutContext(ls.REGION);return o.getContainer().width<a.getContainer().width&&t===ls.COLUMN?e===Ye.auto?this.buildDeepElementView(n.copy()).then((function(e){var n=e.viewNode,o=us(i.clientLayout,n,[rs.MIN_CONTENT_INLINE_SIZE])[rs.MIN_CONTENT_INLINE_SIZE],a=i.getComputedMargin(n);r.finish((o+=i.vertical?a.top+a.bottom:a.left+a.right)>i.width?ls.REGION:t)})):r.finish(e===Ye.all?ls.REGION:t):r.finish(t),r.result()},i.layoutPageFloat=function(t){var e=this,n=this.pageFloatLayoutContext,i=(new vs).findByNodeContext(t),r=n.findPageFloatByNodePosition(t.toNodePosition());return(r?Ti(r):i.createPageFloat(t,n,this)).thenAsync((function(r){var o=Jr(t,0),a=e.setFloatAnchorViewNode(t),s=i.findPageFloatFragment(r,n),u=new ps(r,o);if(s&&s.hasFloat(r))return n.registerPageFloatAnchor(r,a.viewNode),Ti(a);if(n.isForbidden(r)||n.hasPrecedingFloatsDeferredToNext(r))return n.deferPageFloat(u),n.registerPageFloatAnchor(r,a.viewNode),Ti(a);if(e.nodeContextOverflowingDueToRepetitiveElements)return Ti(null);var l=Ps(a,e.clientLayout,0,e.vertical);return e.isOverflown(l)?Ti(a):e.layoutPageFloatInner(u,i,l,s).thenAsync((function(t){return t?Ti(null):(n.registerPageFloatAnchor(r,a.viewNode),Ti(a))}))}))},i.createJustificationAdjustmentElement=function(t,e,n,i){var r=e.createElement("span");r.style.visibility="hidden",r.style.verticalAlign="top",r.setAttribute("data-adapt-spec","1");var o=e.createElement("span");o.style.fontSize="0",o.style.lineHeight="0",o.textContent=" #",r.appendChild(o),r.style.display="block",r.style.textIndent="0",r.style.textAlign="left",n.insertBefore(r,t);var a=this.clientLayout.getElementClientRect(o);r.style.textAlign="right";var s=this.clientLayout.getElementClientRect(o);r.style.textAlign="",r.style.display=function(t){if(null===Et){var e=t.ownerDocument,n=e.createElement("div");n.style.position="absolute",n.style.top="0px",n.style.left="0px",n.style.width="30px",n.style.height="100px",n.style.lineHeight="16px",n.style.fontSize="16px",n.style.textAlign="justify",t.appendChild(n);var i=e.createTextNode("a | ");n.appendChild(i);var r=e.createElement("span");r.style.display="inline-block",r.style.width="30px",n.appendChild(r);var o=e.createRange();o.setStart(i,0),o.setEnd(i,3);var a=o.getBoundingClientRect();Et=a.right<27,t.removeChild(n)}return Et}(document.body)?"inline":"inline-block";var u=i?s.top-a.top:s.left-a.left,l=u>=1?u-1+"px":"100%";return i?r.style.paddingTop=l:r.style.paddingLeft=l,r},i.addAndAdjustJustificationElement=function(t,e,n,i,r,o){return function(t,e,n,i){if(function(t){if(null===bt){var e=t.ownerDocument,n=e.createElement("div");n.style.position="absolute",n.style.top="0px",n.style.left="0px",n.style.width="40px",n.style.height="100px",n.style.lineHeight="16px",n.style.fontSize="16px",n.style.textAlign="justify",t.appendChild(n);var i=e.createTextNode("a a-");n.appendChild(i);var r=e.createElement("span");r.style.display="inline-block",r.style.width="40px",n.appendChild(r);var o=e.createRange();o.setStart(i,2),o.setEnd(i,4);var a=o.getBoundingClientRect();bt=a.right<37,t.removeChild(n)}return bt}(document.body)){var r=bu(t),o=e?n:n.previousSibling,a=o?o.textContent:"";if(a.charAt(a.length-1)===r){var s=n.ownerDocument,u=n.parentNode;!function(t){if(null===Ct){var e=t.ownerDocument,n=e.createElement("div");n.style.position="absolute",n.style.top="0px",n.style.left="0px",n.style.width="40px",n.style.height="100px",n.style.lineHeight="16px",n.style.fontSize="16px",n.style.textAlign="justify",t.appendChild(n);var i=e.createTextNode("a a-");n.appendChild(i),n.appendChild(e.createElement("wbr"));var r=e.createElement("span");r.style.display="inline-block",r.style.width="40px",n.appendChild(r);var o=e.createRange();o.setStart(i,2),o.setEnd(i,4);var a=o.getBoundingClientRect();Ct=a.right<37,t.removeChild(n)}return Ct}(document.body)?u.insertBefore(s.createElement("wbr"),i):u.insertBefore(s.createTextNode(" "),i)}}}(t,e,n,i),this.createJustificationAdjustmentElement(i,r,o,t.vertical)},i.compensateJustificationLineHeight=function(t,e,n){var i=this.clientLayout.getElementClientRect(t),r=this.clientLayout.getElementClientRect(e);n.vertical?(e.style.marginRight=r.right-i.right+"px",e.style.width="0px"):(e.style.marginTop=i.top-r.top+"px",e.style.height="0px"),e.setAttribute("data-adapt-spec","1")},i.fixJustificationIfNeeded=function(t,e){if(!t.after||t.inline){if(e){for(var n="",i=t.parent;i&&!n;i=i.parent)!i.inline&&i.viewNode&&(n=i.viewNode.style.textAlign);if("justify"!==n)return}var r=t.viewNode,o=r.ownerDocument,a=e&&(t.after||1!=r.nodeType),s=a?r.nextSibling:r;s&&!s.parentNode&&(s=null);var u=r.parentNode||t.parent&&t.parent.viewNode;if(u){var l=this.addAndAdjustJustificationElement(t,a,r,s,o,u);if(!e){var c=o.createElement("div");u.insertBefore(c,s),this.compensateJustificationLineHeight(l,c,t)}}}},i.processLineStyling=function(t,e,n){var i=this,r=Ni("processLineStyling"),o=n.concat([]);n.splice(0,n.length);var a=0,s=t.firstPseudo;return 0==s.count&&(s=s.outer),r.loopWithFrame((function(n){if(s){var r=i.findLinePositions(o),u=s.count-a;if(r.length<=u)n.breakLoop();else{var l=i.findAcceptableBreakInside(o,r[u-1],!0);null!=l?i.finishBreak(l,!1,!1).then((function(){a+=u,i.layoutContext.peelOff(l,0).then((function(r){i.fixJustificationIfNeeded(t=r,!1),s=t.firstPseudo,i.buildViewToNextBlockEdge(t,o=[]).then((function(t){e=t,n.continueLoop()}))}))})):n.breakLoop()}}else n.breakLoop()})).then((function(){Array.prototype.push.apply(n,o),r.finish(e)})),r.result()},i.isLoneImage=function(t){return!(2!=t.length&&this.breakPositions.length>0)&&t[0].sourceNode==t[1].sourceNode&&fu[t[0].sourceNode.localName]},i.getTrailingMarginEdgeAdjustment=function(t){for(var e=0,n=0,i=t.length-1;i>=0;i--){var r=t[i];if(!r.after||!r.viewNode||1!=r.viewNode.nodeType)break;var o=this.getComputedMargin(r.viewNode),a=this.vertical?-o.left:o.bottom;a>0?e=Math.max(e,a):n=Math.min(n,a)}return e-n},i.layoutBreakableBlock=function(t){var e=this,n=Ni("layoutBreakableBlock"),i=[];return this.buildViewToNextBlockEdge(t,i).then((function(r){var o=i.length-1;if(o<0)n.finish(r);else{var a=e.calculateEdge(r,i,o,i[o].boxOffset),s=!1;if(!r||!Rs(r.viewNode)){var u=Ms(r,e.collectElementsOffset());s=e.isOverflown(a+(e.vertical?-1:1)*u.minimum),e.isOverflown(a+(e.vertical?-1:1)*u.current)&&!e.nodeContextOverflowingDueToRepetitiveElements&&(e.nodeContextOverflowingDueToRepetitiveElements=r)}null==r&&(a+=e.getTrailingMarginEdgeAdjustment(i)),e.updateMaxReachedAfterEdge(a),(t.firstPseudo?e.processLineStyling(t,r,i):Ti(r)).then((function(t){e.postLayoutBlock(t,i),i.length>0&&(e.saveBoxBreakPosition(i),s&&!e.isLoneImage(i)&&t&&((t=t.modify()).overflow=!0)),n.finish(t)}))}})),n.result()},i.postLayoutBlock=function(t,n){var i=this;v(e.HOOKS.POST_LAYOUT_BLOCK).forEach((function(e){e(t,n,i)}))},i.findEndOfLine=function(t,e,n){for(var i,r=this.vertical?t-1:t+1,o=0,a=e[0].boxOffset,s=o,u=e.length-1,l=e[u].boxOffset;a<l;){i=a+Math.ceil((l-a)/2),s=o;for(var c=u;s<c;){var h=s+Math.ceil((c-s)/2);e[h].boxOffset>i?c=h-1:s=h}var f=this.calculateEdge(null,e,s,i);if(this.vertical?f<=r:f>=r){for(l=i-1;e[s].boxOffset==i;)s--;u=s}else n&&this.updateMaxReachedAfterEdge(f),a=i,o=s}return{nodeContext:e[s],index:a,checkPointIndex:s}},i.findAcceptableBreakInside=function(t,e,n){var i=this.findEndOfLine(e,t,!0),r=i.nodeContext,o=r.viewNode;if(1!=o.nodeType){var a=o;r=this.resolveTextNodeBreaker(r).breakTextNode(a,r,i.index,t,i.checkPointIndex,n)}return this.clearOverflownViewNodes(r,!1),r},i.resolveTextNodeBreaker=function(t){return v(e.HOOKS.RESOLVE_TEXT_NODE_BREAKER).reduce((function(e,n){return n(t)||e}),Eu.instance)},i.getRangeBoxes=function(t,e){for(var n=[],i=t.ownerDocument.createRange(),r=!1,o=t,a=null,s=!1,u=!0;u;){var l=!0;do{var c=null;o==e&&(u=1===e.nodeType&&!(!e.firstChild||r)),1!=o.nodeType?(s||(i.setStartBefore(o),s=!0),a=o):r?r=!1:Ls(o)?l=!s:"ruby"==o.localName||gu(this.clientLayout.getElementComputedStyle(o).display)?((l=!s)&&(i.setStartBefore(o),s=!0,a=o),o.contains(e)&&(u=!1)):c=o.firstChild,c||(c=o.nextSibling)||(r=!0,c=o.parentNode),o=c}while(l&&u);if(s){i.setEndAfter(a);for(var h=this.clientLayout.getRangeClientRects(i),f=0;f<h.length;f++)n.push(h[f]);s=!1}}return n},i.findLinePositions=function(t){var e=[],n=this.getRangeBoxes(t[0].viewNode,t[t.length-1].viewNode);n.sort(this.vertical?Yr:qr);for(var i=0,r=0,o=0,a=0,s=0,u=this.getBoxDir();;){if(s<n.length){var l=n[s],c=1;if(a>0){var h=Math.max(this.getBoxSize(l),1);c=u*this.getBeforeEdge(l)<u*i?u*(this.getAfterEdge(l)-i)/h:u*this.getAfterEdge(l)>u*r?u*(r-this.getBeforeEdge(l))/h:1}if(0==a||c>=.6||c>=.2&&this.getStartEdge(l)>=o-1){o=this.getEndEdge(l),this.vertical?(i=0==a?l.right:Math.max(i,l.right),r=0==a?l.left:Math.min(r,l.left)):(i=0==a?l.top:Math.min(i,l.top),r=0==a?l.bottom:Math.max(r,l.bottom)),a++,s++;continue}}if(a>0&&(e.push(r),a=0),s>=n.length)break}return e.sort(dt),this.vertical&&e.reverse(),e},i.calculateClonedPaddingBorder=function(t){var e=this,n=0;return t.walkUpBlocks((function(t){if("clone"===t.inheritedProps["box-decoration-break"]){var i=e.getComputedPaddingBorder(t.viewNode);n+=t.vertical?-i.left:i.bottom,"table"===t.display&&(n+=t.blockBorderSpacing)}})),n},i.getOffsetByRepetitiveElements=function(t){return(t?t.calculateOffset(this):Ms(null,this.collectElementsOffset())).current},i.findBoxBreakPosition=function(t,e){for(var n,i,r=this,o=t.checkPoints,a=o[0];a.parent&&a.inline;)a=a.parent;e?(n=1,i=1):(n=Math.max((a.inheritedProps.widows||2)-0,1),i=Math.max((a.inheritedProps.orphans||2)-0,1));var s=this.calculateClonedPaddingBorder(a),u=this.findLinePositions(o),l=this.footnoteEdge-s,c=this.getBoxDir(),h=this.getOffsetByRepetitiveElements(t);l-=c*h;var f=this.findFirstOverflowingEdgeAndCheckPoint(o);isNaN(f.edge)&&(f.edge=1/0*c);var d,p=ft(u.length,(function(t){var e=u[t];return r.vertical?e<l||e<=f.edge:e>l||e>=f.edge})),g=p<=0;if(g&&(p=ft(u.length,(function(t){return r.vertical?u[t]<l:u[t]>l}))),(p=Math.min(u.length-n,p))<i)return null;if(l=u[p-1],d=g?f.checkPoint:this.findAcceptableBreakInside(t.checkPoints,l,e)){var m=this.getAfterEdgeOfBlockContainer(d);!isNaN(m)&&m<l&&(l=m),this.computedBlockSize=c*(l-this.beforeEdge)+h}return d},i.getAfterEdgeOfBlockContainer=function(t){var e=t;do{e=e.parent}while(e&&e.inline);return e?((e=e.copy().modify()).after=!0,Ps(e,this.clientLayout,0,this.vertical)):NaN},i.findFirstOverflowingEdgeAndCheckPoint=function(t){var e=t.findIndex((function(t){return t.overflow}));if(e<0)return{edge:NaN,checkPoint:null};var n=t[e];return{edge:this.calculateEdge(null,t,e,n.boxOffset),checkPoint:n}},i.findEdgeBreakPosition=function(t){return this.computedBlockSize=t.computedBlockSize+this.getOffsetByRepetitiveElements(t),t.position},i.finishBreak=function(t,e,n){var i=(new Xs).find(t.formattingContext).finishBreak(this,t,e,n);return i||(i=$s.finishBreak(this,t,e,n)),i},i.findAcceptableBreakPosition=function(){var t=null,e=null,n=0,i=0;do{n=i,i=Number.MAX_VALUE;for(var r=this.breakPositions.length-1;r>=0&&!e;--r){e=(t=this.breakPositions[r]).findAcceptableBreak(this,n);var o=t.getMinBreakPenalty();o>n&&(i=Math.min(i,o))}}while(i>n&&!e&&this.forceNonfitting);return{breakPosition:e?t:null,nodeContext:e}},i.doFinishBreak=function(t,e,n,i){var r=this;if(this.pageFloatLayoutContext.isInvalidated()||this.pageBreakType||!e)return Ti(t);var o=Ni("doFinishBreak"),a=!1;if(!t){if(this.forceNonfitting)return f.warn("Could not find any page breaks?!!"),this.skipTailEdges(e).then((function(t){t?((t=t.modify()).overflow=!1,r.finishBreak(t,a,!0).then((function(){o.finish(t)}))):o.finish(t)})),o.result();t=n,a=!0,this.computedBlockSize=i}return this.finishBreak(t,a,!0).then((function(){o.finish(t)})),o.result()},i.isBreakable=function(t){if(t.after)return!0;switch(t.sourceNode.namespaceURI){case W.SVG:return!1}return!t.flexContainer},i.zeroIndent=function(t){var e=t.toString();return""==e||"auto"==e||!!e.match(/^0+(.0*)?[^0-9]/)},i.checkOverflowAndSaveEdge=function(t,e){if(!t)return!1;if(Rs(t.viewNode))return!1;var n=Ps(t,this.clientLayout,0,this.vertical),i=Ms(t,this.collectElementsOffset()),r=this.isOverflown(n+(this.vertical?-1:1)*i.minimum);if(this.isOverflown(n+(this.vertical?-1:1)*i.current)&&!this.nodeContextOverflowingDueToRepetitiveElements)this.nodeContextOverflowingDueToRepetitiveElements=t;else if(e){var o=n+this.getTrailingMarginEdgeAdjustment(e),a=this.footnoteEdge-this.getBoxDir()*i.current;n=this.vertical?Math.min(n,Math.max(o,a)):Math.max(n,Math.min(o,a))}return this.updateMaxReachedAfterEdge(n),r},i.checkOverflowAndSaveEdgeAndBreakPosition=function(t,e,n,i){if(!t)return!1;if(Rs(t.viewNode))return!1;var r=this.checkOverflowAndSaveEdge(t,e);return!n&&r||this.saveEdgeBreakPosition(t,i,r),r},i.applyClearance=function(t){if(!t.viewNode.parentNode)return!1;var e=this.getComputedMargin(t.viewNode),n=t.viewNode.ownerDocument.createElement("div");this.vertical?(n.style.bottom="0px",n.style.width="1px",n.style.marginRight=e.right+"px"):(n.style.right="0px",n.style.height="1px",n.style.marginTop=e.top+"px"),t.viewNode.parentNode.insertBefore(n,t.viewNode);var i=this.clientLayout.getElementClientRect(n),r=this.getBeforeEdge(i),o=this.getBoxDir(),a=t.clearSide,s=1/0*-this.getBoxDir();switch("all"===a&&(s=this.pageFloatLayoutContext.getPageFloatClearEdge(a,this)),a){case"left":s=o*Math.max(s*o,this.leftFloatEdge*o);break;case"right":s=o*Math.max(s*o,this.rightFloatEdge*o);break;default:s=o*Math.max(s*o,Math.max(this.rightFloatEdge*o,this.leftFloatEdge*o))}if(r*o>=s*o)return t.viewNode.parentNode.removeChild(n),!1;var u=Math.max(1,(s-r)*o);this.vertical?n.style.width=u+"px":n.style.height=u+"px",i=this.clientLayout.getElementClientRect(n);var l=this.getAfterEdge(i);if(this.vertical){var c=l+e.right-s;c>0==e.right>=0&&(c+=e.right),n.style.marginLeft=c+"px"}else{var h=s-(l+e.top);h>0==e.top>=0&&(h+=e.top),n.style.marginBottom=h+"px"}return t.clearSpacer=n,!0},i.isBFC=function(t){return!!qs(t)||!!Or.isInstanceOfRepetitiveElementsOwnerFormattingContext(t)},i.skipEdges=function(t,e,n){var i=this,r=t.after?t.parent&&t.parent.formattingContext:t.formattingContext;if(r&&!this.isBFC(r))return Ti(t);var o=Ni("skipEdges"),a=!n&&e&&t&&t.after,s=n,u=null,l=[],c=[],h=!1;function f(){return!!n||!e&&Ds(s)}var d=function(){(t=l[0]||t).viewNode.parentNode.removeChild(t.viewNode),i.pageBreakType=s};return o.loopWithFrame((function(n){for(;t;){var r=(new Xs).find(t.formattingContext);do{if(!t.viewNode)break;if(t.inline&&1!=t.viewNode.nodeType){if(jr(t.viewNode,t.whitespace))break;if(!t.after)return f()?d():i.checkOverflowAndSaveEdgeAndBreakPosition(u,null,!0,s)?(t=(i.stopAtOverflow&&u||t).modify()).overflow=!0:(t=t.modify()).breakBefore=s,void n.breakLoop()}if(!t.after){if(r&&r.startNonInlineElementNode(t))break;if(t.clearSide&&i.applyClearance(t)&&e&&0===i.breakPositions.length&&i.saveEdgeBreakPosition(t.copy(),s,!1),!i.isBFC(t.formattingContext)||Or.isInstanceOfRepetitiveElementsOwnerFormattingContext(t.formattingContext)||i.isFloatNodeContext(t)||t.flexContainer)return l.push(t.copy()),s=xs(s,t.breakBefore),f()?d():!i.checkOverflowAndSaveEdgeAndBreakPosition(u,null,!0,s)&&i.layoutConstraint.allowLayout(t)||((t=(i.stopAtOverflow&&u||t).modify()).overflow=!0),void n.breakLoop()}if(1!=t.viewNode.nodeType)break;var o=t.viewNode.style;if(t.after){if(t.inline)break;if(r&&r.afterNonInlineElementNode(t,i.stopAtOverflow))break;if(h){if(f())return d(),void n.breakLoop();l=[],e=!1,a=!1,s=null}h=!1,u=t.copy(),c.push(u),s=xs(s,t.breakAfter),!o||i.zeroIndent(o.paddingBottom)&&i.zeroIndent(o.borderBottomWidth)||(c=[u])}else{if(l.push(t.copy()),s=xs(s,t.breakBefore),!i.layoutConstraint.allowLayout(t)&&(i.checkOverflowAndSaveEdgeAndBreakPosition(u,null,!i.stopAtOverflow,s),(t=t.modify()).overflow=!0,i.stopAtOverflow))return void n.breakLoop();if(fu[t.viewNode.localName])return f()?d():i.checkOverflowAndSaveEdgeAndBreakPosition(u,null,!0,s)&&((t=(i.stopAtOverflow&&u||t).modify()).overflow=!0),void n.breakLoop();!o||i.zeroIndent(o.paddingTop)&&i.zeroIndent(o.borderTopWidth)||(a=!1,c=[]),h=!0}}while(0);var p=i.nextInTree(t,a);if(p.isPending())return void p.then((function(e){t=e,n.continueLoop()}));t=p.get()}i.checkOverflowAndSaveEdgeAndBreakPosition(u,c,!i.stopAtOverflow,s)?u&&i.stopAtOverflow&&((t=u.modify()).overflow=!0):Ds(s)&&(i.pageBreakType=s),n.breakLoop()})).then((function(){u&&(i.lastAfterPosition=u.toNodePosition()),o.finish(t)})),o.result()},i.skipTailEdges=function(t){var e=this,n=t.copy(),i=Ni("skipEdges"),r=null,o=!1;return i.loopWithFrame((function(i){for(;t;){do{if(!t.viewNode)break;if(t.inline&&1!=t.viewNode.nodeType){if(jr(t.viewNode,t.whitespace))break;if(!t.after)return Ds(r)&&(e.pageBreakType=r),void i.breakLoop()}if(!t.after&&(e.isFloatNodeContext(t)||t.flexContainer))return Ds(r=xs(r,t.breakBefore))&&(e.pageBreakType=r),void i.breakLoop();if(1!=t.viewNode.nodeType)break;var a=t.viewNode.style;if(t.after){if(o){if(Ds(r))return e.pageBreakType=r,void i.breakLoop();r=null}o=!1,r=xs(r,t.breakAfter)}else{if(r=xs(r,t.breakBefore),fu[t.viewNode.localName])return Ds(r)&&(e.pageBreakType=r),void i.breakLoop();if(a&&(!e.zeroIndent(a.paddingTop)||!e.zeroIndent(a.borderTopWidth)))return void i.breakLoop()}o=!0}while(0);var s=e.layoutContext.nextInTree(t);if(s.isPending())return void s.then((function(e){t=e,i.continueLoop()}));t=s.get()}n=null,i.breakLoop()})).then((function(){i.finish(n)})),i.result()},i.layoutFloatOrFootnote=function(t){return cs(t.floatReference)||"footnote"===t.floatSide?this.layoutPageFloat(t):this.layoutFloat(t)},i.layoutNext=function(t,e,n){var i=this,r=Ni("layoutNext");return this.skipEdges(t,e,n||null).then((function(n){if(!(t=n)||i.pageBreakType||i.stopByOverflow(t))r.finish(t);else{var o=t.formattingContext;(new Xs).find(o).layout(t,i,e).thenFinish(r)}})),r.result()},i.clearOverflownViewNodes=function(t,e){if(t)for(var n=t.parent;t;t=n,n=n?n.parent:null){var i=(n||t).formattingContext;(new Xs).find(i).clearOverflownViewNodes(this,n,t,e),e=!1}},i.initGeom=function(){var t=this.element.ownerDocument.createElement("div");t.style.position="absolute",t.style.top=this.paddingTop+"px",t.style.right=this.paddingRight+"px",t.style.bottom=this.paddingBottom+"px",t.style.left=this.paddingLeft+"px",this.element.appendChild(t);var e=this.clientLayout.getElementClientRect(t);this.element.removeChild(t);var n=this.originX+this.left+this.getInsetLeft(),i=this.originY+this.top+this.getInsetTop();this.box=new rn(n,i,n+this.width,i+this.height),this.startEdge=e?this.vertical?e.top:e.left:0,this.endEdge=e?this.vertical?e.bottom:e.right:0,this.beforeEdge=e?this.vertical?e.right:e.top:0,this.afterEdge=e?this.vertical?e.left:e.bottom:0,this.leftFloatEdge=this.beforeEdge,this.rightFloatEdge=this.beforeEdge,this.bottommostFloatTop=this.beforeEdge,this.footnoteEdge=this.afterEdge,this.bands=function(t,e,n,i,r,o){o&&(t=En(t),e=e.map((function(t){return Cn(t)})),n=n.map((function(t){return Cn(t)})));var a,s,u,l=e.length,c=n?n.length:0,h=[],f=[];for(a=0;a<l;a++)e[a].addSegments(f,a);for(a=0;a<c;a++)n[a].addSegments(f,a+l);var d=f.length;f.sort(ln);for(var p=0;f[p].shapeId>=l;)p++;var g=f[p].low.y;g>t.y1&&h.push(new un(t.y1,g,t.x2,t.x2));for(var m,v,E=0,b=[];E<d&&(u=f[E]).low.y<g;)u.high.y>g&&b.push(u),E++;for(;E<d||b.length>0;){var C=t.y2,y=Math.min((m=Math.ceil(g+8),(v=r)?Math.ceil(m/v)*v:m),t.y2);for(s=0;s<b.length&&C>y;s++)(u=b[s]).low.x==u.high.x?u.high.y<C&&(C=Math.max(vn(u.high.y,r),y)):u.low.x!=u.high.x&&(C=y);for(C>t.y2&&(C=t.y2);E<d&&(u=f[E]).low.y<C;)if(u.high.y<g)E++;else{if(!(u.low.y<y)){var w=vn(u.low.y,r);w<C&&(C=w);break}u.low.y==u.high.y&&u.low.y==g||(b.push(u),C=y),E++}var D=[];for(s=0;s<b.length;s++)gn(D,b[s],g,C);D.sort((function(t,e){return t.x-e.x||t.lowOrHigh-e.lowOrHigh}));var S=mn(D,l,c);if(0==S.length)h.push(new un(g,C,t.x2,t.x2));else{var N=0,T=t.x1;for(s=0;s<S.length;s+=2){var A=Math.max(t.x1,S[s]),x=Math.min(t.x2,S[s+1])-A;x>N&&(N=x,T=A)}h.push(0==N?new un(g,C,t.x2,t.x2):new un(g,C,Math.max(T,t.x1),Math.min(T+N,t.x2)))}if(C==t.y2)break;for(g=C,s=b.length-1;s>=0;s--)b[s].high.y<=C&&b.splice(s,1)}return yn(t,h),h}(this.box,[this.getInnerShape()],this.getExclusions(),0,this.snapHeight,this.vertical),this.createFloats()},i.init=function(){this.chunkPositions=[],et(this.element,"width",this.width+"px"),et(this.element,"height",this.height+"px"),this.initGeom(),this.computedBlockSize=0,this.overflown=!1,this.pageBreakType=null,this.lastAfterPosition=null},i.saveEdgeBreakPosition=function(t,e,n){var i=t.copy(),r=(new Xs).find(t.formattingContext),o=this.calculateClonedPaddingBorder(i),a=r.createEdgeBreakPosition(i,e,n,this.computedBlockSize+o);this.breakPositions.push(a)},i.saveBoxBreakPosition=function(t){var e=new pu(t,t[0].breakPenalty);this.breakPositions.push(e)},i.updateMaxReachedAfterEdge=function(t){if(!isNaN(t)){var e=this.getBoxDir()*(t-this.beforeEdge);this.computedBlockSize=Math.max(e,this.computedBlockSize)}},i.layout=function(t,e,n){var i=this;if(this.chunkPositions.push(t),t.primary.after&&(this.lastAfterPosition=t.primary),this.stopAtOverflow&&this.overflown)return Ti(t);if(this.isFullWithPageFloats())return Ti(t.primary.after&&1===t.primary.steps.length?null:t);var r=Ni("layout");return this.openAllViews(t.primary).then((function(t){var o=null;t.viewNode?o=t.copy():i.layoutContext.addEventListener("nextInTree",(function t(e){e.nodeContext.viewNode&&(o=e.nodeContext,i.layoutContext.removeEventListener("nextInTree",t))}));var a=new Cu(e,n);a.layout(t,i).then((function(t){i.doFinishBreak(t,a.context.overflownNodeContext,o,a.initialComputedBlockSize).then((function(t){(i.pseudoParent?Ti(null):i.doFinishBreakOfFragmentLayoutConstraints(t)).then((function(){if(i.pageFloatLayoutContext.isInvalidated())r.finish(null);else if(t){i.overflown=!0;var e=new ao(t.toNodePosition());r.finish(e)}else r.finish(null)}))}))}))})),r.result()},i.isFullWithPageFloats=function(){return this.pageFloatLayoutContext.isColumnFullWithPageFloats(this)},i.getMaxBlockSizeOfPageFloats=function(){return this.pageFloatLayoutContext.getMaxBlockSizeOfPageFloats()},i.doFinishBreakOfFragmentLayoutConstraints=function(t){var e=this,n=Ni("doFinishBreakOfFragmentLayoutConstraints"),i=[].concat(this.fragmentLayoutConstraints);i.sort((function(t,e){return t.getPriorityOfFinishBreak()-e.getPriorityOfFinishBreak()}));var r=0;return n.loop((function(){return r<i.length?i[r++].finishBreak(t,e).thenReturn(!0):Ti(!1)})).then((function(){n.finish(!0)})),n.result()},i.doLayout=function(t,e,n){var i=this,r=Ni("doLayout"),o=null;return this.breakPositions=[],this.nodeContextOverflowingDueToRepetitiveElements=null,r.loopWithFrame((function(r){for(var a=function(){var a=!0;if(i.layoutNext(t,e,n||null).then((function(s){if(e=!1,n=null,i.nodeContextOverflowingDueToRepetitiveElements&&i.stopAtOverflow?(i.pageBreakType=null,(t=i.nodeContextOverflowingDueToRepetitiveElements).overflow=!0):t=s,i.pageFloatLayoutContext.isInvalidated())r.breakLoop();else if(i.pageBreakType)r.breakLoop();else if(t&&i.stopByOverflow(t)){o=t;var u=i.findAcceptableBreakPosition();t=u.nodeContext,u.breakPosition&&u.breakPosition.breakPositionChosen(i),r.breakLoop()}else a?a=!1:r.continueLoop()})),a)return a=!1,{v:void 0}};t;){var s=a();if("object"==typeof s)return s.v}i.computedBlockSize+=i.getOffsetByRepetitiveElements(),r.breakLoop()})).then((function(){r.finish({nodeContext:t,overflownNodeContext:o})})),r.result()},i.redoLayout=function(){for(var t=this,e=this.chunkPositions,n=this.element.lastChild;n!=this.last;){var i=n.previousSibling;this.element===n.parentNode&&this.layoutContext.isPseudoelement(n)||this.element.removeChild(n),n=i}this.killFloats(),this.init();var r=Ni("redoLayout"),o=0,a=null,s=!0;return r.loopWithFrame((function(n){if(o<e.length){var i=e[o++];t.layout(i,s).then((function(t){s=!1,t?(a=t,n.breakLoop()):n.continueLoop()}))}else n.breakLoop()})).then((function(){r.finish(a)})),r.result()},i.saveDistanceToBlockEndFloats=function(){var t=this.pageFloatLayoutContext.getBlockStartEdgeOfBlockEndFloats();t>0&&isFinite(t)&&(this.blockDistanceToBlockEndFloats=this.getBoxDir()*(t-this.beforeEdge-this.computedBlockSize))},i.collectElementsOffset=function(){for(var t=this,e=[],n=this;n;n=n.pseudoParent)n.fragmentLayoutConstraints.forEach((function(n){if(Or.isInstanceOfRepetitiveElementsOwnerLayoutConstraint(n)){var i=n.getRepetitiveElements();e.push(i)}if(Pr.isInstanceOfAfterIfContinuesLayoutConstraint(n)){var r=n.getRepetitiveElements();e.push(r)}Rr.isInstanceOfTableRowLayoutConstraint(n)&&n.getElementsOffsetsForTableCell(t).forEach((function(t){e.push(t)}))}));return e},n}(co),vu=function(){function t(t,e,n){this.startNodeContexts=[],this.column=Object.create(t),this.column.element=e,this.column.layoutContext=t.layoutContext.clone(),this.column.stopAtOverflow=!1,this.column.flowRootFormattingContext=n.formattingContext,this.column.pseudoParent=t;var i=this.column.calculateClonedPaddingBorder(n);this.column.footnoteEdge=this.column.footnoteEdge-i;var r=this;this.column.openAllViews=function(t){return mu.prototype.openAllViews.call(this,t).thenAsync((function(t){return r.startNodeContexts.push(t.copy()),Ti(t)}))}}var e=t.prototype;return e.layout=function(t,e){return this.column.layout(t,e)},e.findAcceptableBreakPosition=function(t){var e=this.column.findAcceptableBreakPosition();if(t){var n=this.startNodeContexts[0].copy(),i=new Us(n,null,n.overflow,0);if(i.findAcceptableBreak(this.column,0),!e.nodeContext)return{breakPosition:i,nodeContext:n}}return e},e.finishBreak=function(t,e,n){return this.column.finishBreak(t,e,n)},e.doFinishBreakOfFragmentLayoutConstraints=function(t){this.column.doFinishBreakOfFragmentLayoutConstraints(t)},e.isStartNodeContext=function(t){var e=this.startNodeContexts[0];return e.viewNode===t.viewNode&&e.after===t.after&&e.offsetInNode===t.offsetInNode},e.isLastAfterNodeContext=function(t){return Qr(t.toNodePosition(),this.column.lastAfterPosition)},e.getColumnElement=function(){return this.column.element},e.getColumn=function(){return this.column},t}(),Eu=function(){function t(){}var e=t.prototype;return e.breakTextNode=function(t,e,n,i,r,o){if(e.after)e.offsetInNode=t.length;else{var a=n-e.boxOffset,s=t.data;(a=173==s.charCodeAt(a)?this.breakAfterSoftHyphen(t,s,a,e):this.breakAfterOtherCharacter(t,s,a,e))>0&&(e=this.updateNodeContext(e,a,t))}return e},e.breakAfterSoftHyphen=function(t,e,n,i){return t.replaceData(n,e.length-n,i.breakWord?"":bu(i)),n+1},e.breakAfterOtherCharacter=function(t,e,n,i){var r=e.charAt(n);n++;var o=e.charAt(n);return t.replaceData(n,e.length-n,!i.breakWord&&lt(r)&&lt(o)?bu(i):""),n},e.updateNodeContext=function(t,e,n){return(t=t.modify()).offsetInNode+=e,t.breakBefore=null,t},t}();function bu(t){return t.hyphenateCharacter||t.parent&&t.parent.hyphenateCharacter||"-"}Eu.instance=new Eu;var Cu=function(t){function e(e,n){var i;return(i=t.call(this)||this).leadingEdge=e,i.initialPageBreakType=null,i.initialComputedBlockSize=0,i.initialOverflown=!1,i.context={overflownNodeContext:null},i.breakAfter=n||null,i}I(e,t);var n=e.prototype;return n.resolveLayoutMode=function(t){return new yu(this.leadingEdge,this.breakAfter,this.context)},n.prepareLayout=function(t,e){e.fragmentLayoutConstraints=[],e.pseudoParent||(tu=[])},n.clearNodes=function(e){t.prototype.clearNodes.call(this,e);for(var n=e;n;){var i=n.viewNode;i&&ks(i.parentNode,i),n=n.parent}},n.saveState=function(e,n){t.prototype.saveState.call(this,e,n),this.initialPageBreakType=n.pageBreakType,this.initialComputedBlockSize=n.computedBlockSize,this.initialOverflown=n.overflown},n.restoreState=function(e,n){t.prototype.restoreState.call(this,e,n),n.pageBreakType=this.initialPageBreakType,n.computedBlockSize=this.initialComputedBlockSize,n.overflown=this.initialOverflown},e}(Ys),yu=function(){function t(t,e,n){this.leadingEdge=t,this.breakAfter=e,this.context=n}var e=t.prototype;return e.doLayout=function(t,e){var n=this,i=Ni("DefaultLayoutMode.doLayout");return function(t,e){var n=Ni("processAfterIfContinuesOfAncestors"),i=t;return n.loop((function(){if(null!==i){var t=cu(i,e);return i=i.parent,t.thenReturn(!0)}return Ti(!1)})).then((function(){n.finish(!0)})),n.result()}(t,e).then((function(){e.doLayout(t,n.leadingEdge,n.breakAfter).then((function(t){n.context.overflownNodeContext=t.overflownNodeContext,i.finish(t.nodeContext)}))})),i.result()},e.accept=function(t,e){var n=this;return!(!e.pageFloatLayoutContext.isInvalidated()&&!e.pageBreakType)||e.fragmentLayoutConstraints.length<=0||e.fragmentLayoutConstraints.every((function(i){return i.allowLayout(t,n.context.overflownNodeContext,e)}))},e.postLayout=function(t,e,n,i){if(!i){var r=n.fragmentLayoutConstraints.some((function(e){return e.nextCandidate(t)}));i=!r}return n.fragmentLayoutConstraints.forEach((function(r){r.postLayout(i,t,e,n)})),i},t}(),wu=function(t){function e(e,n,i,r,o,a,s){var u;return(u=t.call(this,n,i,r,o,a)||this).floatSide=e,u.parentContainer=s,u.rootViewNodes=[],u.floatMargins=[],u.adjustContentRelativeSize=!0,u}I(e,t);var n=e.prototype;return n.openAllViews=function(e){var n=this;return t.prototype.openAllViews.call(this,e).thenAsync((function(t){return t&&n.fixFloatSizeAndPosition(t),Ti(t)}))},n.convertPercentageSizesToPx=function(t){var e=this.parentContainer.getPaddingRect(),n=e.x2-e.x1,i=e.y2-e.y1;function r(e,n){e.forEach((function(e){var i=nt(t,e);if(i&&"%"===i.charAt(i.length-1)){var r=parseFloat(i);et(t,e,n*r/100+"px")}}))}r(["width","max-width","min-width"],n),r(["height","max-height","min-height"],i),r(["margin-top","margin-right","margin-bottom","margin-left","padding-top","padding-right","padding-bottom","padding-left"],this.vertical?i:n),["margin-top","margin-right","margin-bottom","margin-left"].forEach((function(e){"auto"===nt(t,e)&&et(t,e,"0")}))},n.fixFloatSizeAndPosition=function(t){for(;t.parent;)t=t.parent;var e=t.viewNode;if(this.rootViewNodes.push(e),this.adjustContentRelativeSize&&this.convertPercentageSizesToPx(e),this.floatMargins.push(this.getComputedMargin(e)),this.adjustContentRelativeSize){var n=this.floatSide;if(this.parentContainer.vertical){if("block-end"===n||"left"===n){var i=nt(e,"height");""!==i&&"auto"!==i&&et(e,"margin-top","auto")}}else if("block-end"===n||"bottom"===n){var r=nt(e,"width");""!==r&&"auto"!==r&&et(e,"margin-left","auto")}}},n.getContentInlineSize=function(){var t=this;return Math.max.apply(null,this.rootViewNodes.map((function(e,n){var i=t.clientLayout.getElementClientRect(e),r=t.floatMargins[n];return t.vertical?r.top+i.height+r.bottom:r.left+i.width+r.right})))},e}(mu),Du=function(){function t(t,e){this.parent=t,this.rootSourceNode=e,this.formattingContextType="RepetitiveElementsOwner",this.isRoot=!1,this.repetitiveElements=null}var e=t.prototype;return e.getName=function(){return"Repetitive elements owner formatting context (RepetitiveElementsOwnerFormattingContext)"},e.isFirstTime=function(t,e){return e},e.getParent=function(){return this.parent},e.getRepetitiveElements=function(){return this.repetitiveElements},e.getRootViewNode=function(t){var e=this.getRootNodeContext(t);return e?e.viewNode:null},e.getRootNodeContext=function(t){do{if(!t.belongsTo(this)&&t.sourceNode===this.rootSourceNode)return t}while(t=t.parent);return null},e.initializeRepetitiveElements=function(t){var e=this;this.repetitiveElements||tu.some((function(t){return t.root===e.rootSourceNode&&(e.repetitiveElements=t.elements,!0)}))||(this.repetitiveElements=new Su(t,this.rootSourceNode),tu.push({root:this.rootSourceNode,elements:this.repetitiveElements}))},e.saveState=function(){},e.restoreState=function(t){},t}(),Su=function(){function t(t,e){this.vertical=t,this.ownerSourceNode=e,this.headerSourceNode=null,this.footerSourceNode=null,this.headerViewNode=null,this.footerViewNode=null,this.headerNodePosition=null,this.footerNodePosition=null,this.headerHeight=0,this.footerHeight=0,this.isSkipHeader=!1,this.isSkipFooter=!1,this.enableSkippingFooter=!0,this.enableSkippingHeader=!0,this.doneInitialLayout=!1,this.firstContentSourceNode=null,this.lastContentSourceNode=null,this.affectedNodeCache=[],this.afterLastContentNodeCache=[],this.allowInsert=!1}var e=t.prototype;return e.setHeaderNodeContext=function(t){this.headerNodePosition||(this.headerNodePosition=Jr(t,0),this.headerSourceNode=t.sourceNode,this.headerViewNode=t.viewNode)},e.setFooterNodeContext=function(t){this.footerNodePosition||(this.footerNodePosition=Jr(t,0),this.footerSourceNode=t.sourceNode,this.footerViewNode=t.viewNode)},e.updateHeight=function(t){this.headerViewNode&&(this.headerHeight=Os(this.headerViewNode,t,this.vertical),this.headerViewNode=null),this.footerViewNode&&(this.footerHeight=Os(this.footerViewNode,t,this.vertical),this.footerViewNode=null)},e.prepareLayoutFragment=function(){this.isSkipHeader=this.isSkipFooter=!1,this.enableSkippingFooter=!0,this.enableSkippingHeader=!0},e.appendHeaderToFragment=function(t,e,n){return!this.headerNodePosition||this.isSkipHeader?Ti(!0):this.appendElementToFragment(this.headerNodePosition,t,e,n)},e.appendFooterToFragment=function(t,e,n){return!this.footerNodePosition||this.isSkipFooter?Ti(!0):this.appendElementToFragment(this.footerNodePosition,t,e,n)},e.appendElementToFragment=function(t,e,n,i){var r=this,o=e.viewNode,a=e.viewNode.ownerDocument.createElement("div");o.appendChild(a);var s=new vu(i,a,e),u=s.getColumn().pageBreakType;return s.getColumn().pageBreakType=null,this.allowInsertRepeatitiveElements=!0,s.layout(new ao(t),!0).thenAsync((function(){return r.allowInsertRepeatitiveElements=!1,o.removeChild(a),r.moveChildren(a,o,n),s.getColumn().pageBreakType=u,Ti(!0)}))},e.moveChildren=function(t,e,n){if(e)for(;t.firstChild;){var i=t.firstChild;t.removeChild(i),i.setAttribute("data-adapt-spec","1"),n?e.insertBefore(i,n):e.appendChild(i)}},e.calculateOffset=function(t){var e=0;return t&&!this.affectTo(t)||((!this.isSkipFooter||t&&this.isAfterLastContent(t))&&(e+=this.footerHeight),this.isSkipHeader||(e+=this.headerHeight)),e},e.calculateMinimumOffset=function(t){var e=0;return t&&!this.affectTo(t)||(t&&this.isAfterLastContent(t)&&(e+=this.footerHeight),this.enableSkippingHeader||(e+=this.headerHeight)),e},e.isAfterLastContent=function(t){var e=this;return this.findResultFromCache(t,this.afterLastContentNodeCache,(function(n){return e.isAfterNodeContextOf(e.lastContentSourceNode,t,!1)}))},e.affectTo=function(t){var e=this;return this.findResultFromCache(t,this.affectedNodeCache,(function(n){return e.isAfterNodeContextOf(e.ownerSourceNode,t,!0)}))},e.findResultFromCache=function(t,e,n){var i=e.filter((function(e){return e.nodeContext.sourceNode===t.sourceNode&&e.nodeContext.after===t.after}));if(i.length>0)return i[0].result;var r=n(t);return e.push({nodeContext:t,result:r}),r},e.isAfterNodeContextOf=function(t,e,n){for(var i=[],r=t;r;r=r.parentNode){if(e.sourceNode===r)return e.after;i.push(r)}for(var o=e.sourceNode;o;o=o.parentNode){var a=i.indexOf(o);if(a>=0)return!!n&&0===a;for(var s=o;s;s=s.previousElementSibling)if(i.includes(s))return!0}return e.after},e.isFirstContentNode=function(t){return t&&this.firstContentSourceNode===t.sourceNode},e.isEnableToUpdateState=function(){return!!(!this.isSkipFooter&&this.enableSkippingFooter&&this.footerNodePosition||!this.isSkipHeader&&this.enableSkippingHeader&&this.headerNodePosition)},e.updateState=function(){!this.isSkipFooter&&this.enableSkippingFooter&&this.footerNodePosition?this.isSkipFooter=!0:!this.isSkipHeader&&this.enableSkippingHeader&&this.headerNodePosition&&(this.isSkipHeader=!0)},e.preventSkippingHeader=function(){this.isSkipHeader=!1,this.enableSkippingHeader=!1},e.preventSkippingFooter=function(){this.isSkipFooter=!1,this.enableSkippingFooter=!1},e.isHeaderRegistered=function(){return!!this.headerNodePosition},e.isFooterRegistered=function(){return!!this.footerNodePosition},e.isHeaderSourceNode=function(t){return this.headerSourceNode===t},e.isFooterSourceNode=function(t){return this.footerSourceNode===t},t}(),Nu=function(){function t(t){this.formattingContext=t}var e=t.prototype;return e.accept=function(t,e){return!!t},e.postLayout=function(t,e,n,i){var r=this.formattingContext.getRepetitiveElements();return r&&(r.doneInitialLayout||(r.updateHeight(n),r.doneInitialLayout=!0)),i},t}(),Tu=function(){function t(t){this.formattingContext=t}var e=t.prototype;return e.accept=function(t,e){return!0},e.postLayout=function(t,e,n,i){return i},t}(),Au=function(t){function e(e,n){var i;return(i=t.call(this,e)||this).processor=n,i}I(e,t);var n=e.prototype;return n.doLayout=function(t,e){return this.processor.doInitialLayout(t,e)},n.accept=function(t,e){return!1},e}(Nu),xu=function(t){function e(e,n){var i;return(i=t.call(this,e)||this).processor=n,i}return I(e,t),e.prototype.doLayout=function(t,e){return t.belongsTo(this.formattingContext)||t.after||e.fragmentLayoutConstraints.unshift(new Iu(t)),this.processor.doLayout(t,e)},e}(Tu),Iu=function(){function t(t){this.flagmentLayoutConstraintType="RepetitiveElementsOwner",this.nodeContext=t.formattingContext.getRootNodeContext(t)}var e=t.prototype;return e.allowLayout=function(t,e,n){var i=this.getRepetitiveElements();return!(i&&!Rs(this.nodeContext.viewNode)&&i.isEnableToUpdateState()&&(e&&!t||t&&t.overflow))},e.nextCandidate=function(t){var e=this.getRepetitiveElements();return!!e&&!!e.isEnableToUpdateState()&&(e.updateState(),!0)},e.postLayout=function(t,e,n,i){var r=this.getRepetitiveElements();r&&t&&i.stopAtOverflow&&(null==e||r.isAfterLastContent(e))&&r.preventSkippingFooter()},e.finishBreak=function(t,e){var n=this.nodeContext.formattingContext,i=this.getRepetitiveElements();if(!i)return Ti(!0);var r=this.nodeContext;return function(t,e,n){var i=t.getRepetitiveElements();if(i){var r=t.getRootNodeContext(e);if(r.viewNode)return i.appendHeaderToFragment(r,r.viewNode.firstChild,n)}return Ti(!0)}(n,r,e).thenAsync((function(){return function(t,e,n){var i=t.getRepetitiveElements();if(i&&!i.isSkipFooter){var r=t.getRootNodeContext(e);if(r.viewNode)return i.appendFooterToFragment(r,null,n)}return Ti(!0)}(n,r,e).thenAsync((function(){return i.prepareLayoutFragment(),Ti(!0)}))}))},e.getRepetitiveElements=function(){return this.nodeContext.formattingContext.getRepetitiveElements()},e.equalsTo=function(e){return e instanceof t&&this.nodeContext.formattingContext===e.nodeContext.formattingContext},e.getPriorityOfFinishBreak=function(){return 10},t}(),Fu=function(t){function e(e,n){var i;return(i=t.call(this)||this).formattingContext=e,i.processor=n,i}return I(e,t),e.prototype.resolveLayoutMode=function(t){var e=this.formattingContext.getRepetitiveElements();return t.belongsTo(this.formattingContext)||e.doneInitialLayout?(t.belongsTo(this.formattingContext)||t.after||e&&e.preventSkippingHeader(),new xu(this.formattingContext,this.processor)):new Au(this.formattingContext,this.processor)},e}(Ys),Pu=function(t){function e(e,n){var i;return(i=t.call(this)||this).formattingContext=e,i.column=n,i}I(e,t);var n=e.prototype;return n.startNonInlineElementNode=function(t){var e=this.formattingContext,n=t.nodeContext,i=e.getRepetitiveElements();if(n.parent&&e.rootSourceNode===n.parent.sourceNode){switch(n.repeatOnBreak){case"header":if(!i.isHeaderRegistered())return i.setHeaderNodeContext(n),Ti(!0);n.repeatOnBreak="none";break;case"footer":if(!i.isFooterRegistered())return i.setFooterNodeContext(n),Ti(!0);n.repeatOnBreak="none"}i.firstContentSourceNode||(i.firstContentSourceNode=n.sourceNode)}return Js.prototype.startNonInlineElementNode.call(this,t)},n.afterNonInlineElementNode=function(t){var e=this.formattingContext,n=t.nodeContext;return n.sourceNode===e.rootSourceNode&&(e.getRepetitiveElements().lastContentSourceNode=t.lastAfterNodeContext&&t.lastAfterNodeContext.sourceNode,t.break=!0),"header"===n.repeatOnBreak||"footer"===n.repeatOnBreak?Ti(!0):Js.prototype.afterNonInlineElementNode.call(this,t)},e}(Js);function Ou(t,e){t&&function(t,e){for(var n=t;n;n=n.parent){var i=n.formattingContext;i&&i instanceof Du&&!n.belongsTo(i)&&e(i,n)}}(t.after?t.parent:t,(function(t,n){Rr.isInstanceOfTableFormattingContext(t)||e.fragmentLayoutConstraints.push(new Iu(n))}))}var Ru=new(function(t){function e(){return t.apply(this,arguments)||this}I(e,t);var n=e.prototype;return n.layout=function(t,e,n){if(e.isFloatNodeContext(t))return e.layoutFloatOrFootnote(t);var i=t.formattingContext;return i.getRootViewNode(t)?(n&&Ou(t.parent,e),t.belongsTo(i)?js.prototype.layout.call(this,t,e,n):new Fu(i,this).layout(t,e)):e.buildDeepElementView(t)},n.startNonInlineElementNode=function(t){var e=function(t){var e=t.formattingContext;return e&&e instanceof Du?e:null}(t).getRepetitiveElements();return!!e&&(e.allowInsertRepeatitiveElements||!e.isHeaderSourceNode(t.sourceNode)&&!e.isFooterSourceNode(t.sourceNode)||t.viewNode.parentNode.removeChild(t.viewNode),!1)},n.doInitialLayout=function(t,e){var n=Ni("BlockLayoutProcessor.doInitialLayout");return this.layoutEntireBlock(t,e).thenFinish(n),n.result()},n.layoutEntireBlock=function(t,e){var n=new Pu(t.formattingContext,e);return new Qs(n,e.layoutContext).iterate(t)},n.doLayout=function(t,e){var n=t.formattingContext,i=Ni("doLayout");return hu(e.layoutContext.nextInTree(t,!1),e).then((function(t){var r=t;i.loopWithFrame((function(t){for(var i=function(){var i=!0;if(e.layoutNext(r,!1).then((function(o){r=o,e.pageFloatLayoutContext.isInvalidated()||e.pageBreakType||r&&e.stopByOverflow(r)||r&&r.after&&r.sourceNode==n.rootSourceNode?t.breakLoop():i?i=!1:t.continueLoop()})),i)return i=!1,{v:void 0}};r;){var o=i();if("object"==typeof o)return o.v}t.breakLoop()})).then((function(){i.finish(r)}))})),i.result()},n.finishBreak=function(t,e,n,i){return js.prototype.finishBreak.call(this,t,e,n,i)},n.clearOverflownViewNodes=function(t,e,n,i){js.prototype.clearOverflownViewNodes(t,e,n,i)},e}(js));p(e.HOOKS.RESOLVE_LAYOUT_PROCESSOR,(function(t){return t instanceof Du&&!Rr.isInstanceOfTableFormattingContext(t)?Ru:null}));var ku=function(){function t(t,e){this.rowIndex=t,this.sourceNode=e,this.cells=[]}var e=t.prototype;return e.addCell=function(t){this.cells.push(t)},e.getMinimumHeight=function(){return Math.min.apply(null,this.cells.map((function(t){return t.height})))},t}(),Lu=function(){function t(t,e,n){this.rowIndex=t,this.columnIndex=e,this.height=0,this.anchorSlot=null,this.viewElement=n,this.colSpan=n.colSpan||1,this.rowSpan=n.rowSpan||1}var e=t.prototype;return e.setHeight=function(t){this.height=t},e.setAnchorSlot=function(t){this.anchorSlot=t},t}(),Bu=function(t,e,n){this.rowIndex=t,this.columnIndex=e,this.cell=n},_u=function(){function t(t,e,n){this.column=t,this.cellNodeContext=n,this.empty=!1,this.pseudoColumn=new vu(t,e,n)}return t.prototype.findAcceptableBreakPosition=function(){var t=this.cellNodeContext.viewNode,e=this.cellNodeContext.verticalAlign;"middle"!==e&&"bottom"!==e||et(t,"vertical-align","top");var n=this.pseudoColumn.findAcceptableBreakPosition(!0);return et(t,"vertical-align",e),n},t}(),Mu=function(t,e){this.viewNode=t,this.side=e},Uu=function(t){function e(e,n,i,r){var o;return(o=t.call(this,e,n,i,r)||this).acceptableCellBreakPositions=null,o.rowIndex=null,o.formattingContext=e.formattingContext,o}I(e,t);var n=e.prototype;return n.findAcceptableBreak=function(e,n){var i=t.prototype.findAcceptableBreak.call(this,e,n);return n<this.getMinBreakPenalty()?null:this.getAcceptableCellBreakPositions().every((function(t){return!!t.nodeContext}))?i:null},n.getMinBreakPenalty=function(){var e=t.prototype.getMinBreakPenalty.call(this);return this.getAcceptableCellBreakPositions().forEach((function(t){e+=t.breakPosition.getMinBreakPenalty()})),e},n.getAcceptableCellBreakPositions=function(){if(!this.acceptableCellBreakPositions){var t=this.getCellFragments();this.acceptableCellBreakPositions=t.map((function(t){return t.findAcceptableBreakPosition()}))}return this.acceptableCellBreakPositions},n.getRowIndex=function(){return null!=this.rowIndex?this.rowIndex:this.rowIndex=this.formattingContext.findRowIndexBySourceNode(this.position.sourceNode)},n.getCellFragments=function(){return this.formattingContext.getRowSpanningCellsOverflowingTheRow(this.getRowIndex()).map(this.formattingContext.getCellFragmentOfCell,this.formattingContext)},e}(Us),Vu=function(t){function e(e,n,i){var r;return(r=t.call(this)||this).rowIndex=e,r.beforeNodeContext=n,r.formattingContext=i,r.acceptableCellBreakPositions=null,r}I(e,t);var n=e.prototype;return n.findAcceptableBreak=function(t,e){if(e<this.getMinBreakPenalty())return null;var n=this.getCellFragments(),i=this.getAcceptableCellBreakPositions(),r=i.every((function(t){return!!t.nodeContext}))&&i.some((function(t,e){var i=n[e].pseudoColumn,r=t.nodeContext;return!i.isStartNodeContext(r)&&!i.isLastAfterNodeContext(r)}));return this.beforeNodeContext.overflow=i.some((function(t){return t.nodeContext&&t.nodeContext.overflow})),r?this.beforeNodeContext:null},n.getMinBreakPenalty=function(){var t=this.formattingContext,e=t.getRowByIndex(this.rowIndex),n=0;return t.isFreelyFragmentableRow(e)||(n+=10),this.getAcceptableCellBreakPositions().forEach((function(t){n+=t.breakPosition.getMinBreakPenalty()})),n},n.getAcceptableCellBreakPositions=function(){if(!this.acceptableCellBreakPositions){var t=this.getCellFragments();this.acceptableCellBreakPositions=t.map((function(t){return t.findAcceptableBreakPosition()}))}return this.acceptableCellBreakPositions},n.getCellFragments=function(){return this.formattingContext.getCellsFallingOnRow(this.rowIndex).map(this.formattingContext.getCellFragmentOfCell,this.formattingContext)},e}(_s),zu=function(t){function e(e,n){var i;return(i=t.call(this,e,n)||this).tableSourceNode=n,i.formattingContextType="Table",i.vertical=!1,i.columnCount=-1,i.tableWidth=0,i.captions=[],i.colGroups=null,i.colWidths=null,i.inlineBorderSpacing=0,i.rows=[],i.slots=[],i.cellFragments=[],i.lastRowViewNode=null,i.cellBreakPositions=[],i.repetitiveElements=null,i}I(e,t);var n=e.prototype;return n.getName=function(){return"Table formatting context (Table.TableFormattingContext)"},n.isFirstTime=function(t,e){if(!e)return e;switch(t.display){case"table-row":return 0===this.cellBreakPositions.length;case"table-cell":return!this.cellBreakPositions.some((function(e){return e.cellNodePosition.steps[0].node===t.sourceNode}));default:return e}},n.getParent=function(){return this.parent},n.finishFragment=function(){this.cellFragments=[]},n.addRow=function(t,e){this.rows[t]=e},n.getRowSlots=function(t){var e=this.slots[t];return e||(e=this.slots[t]=[]),e},n.addCell=function(t,e){var n=this.rows[t];n||(this.addRow(t,new ku(t,null)),n=this.rows[t]),n.addCell(e);for(var i=t+e.rowSpan,r=this.getRowSlots(t),o=0;r[o];)o++;for(;t<i;t++){r=this.getRowSlots(t);for(var a=o;a<o+e.colSpan;a++){var s=r[a]=new Bu(t,a,e);e.anchorSlot||e.setAnchorSlot(s)}}},n.getRowByIndex=function(t){return this.rows[t]},n.findRowIndexBySourceNode=function(t){return this.rows.findIndex((function(e){return t===e.sourceNode}))},n.addCellFragment=function(t,e,n){var i=this.cellFragments[t];i||(i=this.cellFragments[t]=[]),i[e]=n},n.getCellsFallingOnRow=function(t){return this.getRowSlots(t).reduce((function(t,e){return e.cell!==t[t.length-1]?t.concat(e.cell):t}),[])},n.getRowSpanningCellsOverflowingTheRow=function(t){return this.getCellsFallingOnRow(t).filter((function(e){return e.rowIndex+e.rowSpan-1>t}))},n.getCellFragmentOfCell=function(t){return this.cellFragments[t.rowIndex]&&this.cellFragments[t.rowIndex][t.columnIndex]},n.isFreelyFragmentableRow=function(t){return t.getMinimumHeight()>this.tableWidth/2},n.getColumnCount=function(){return this.columnCount<0&&(this.columnCount=Math.max.apply(null,this.rows.map((function(t){return t.cells.reduce((function(t,e){return t+e.colSpan}),0)})))),this.columnCount},n.updateCellSizes=function(t){var e=this;this.rows.forEach((function(n){n.cells.forEach((function(n){var i=t.getElementClientRect(n.viewElement);n.viewElement=null,n.setHeight(e.vertical?i.width:i.height)}))}))},n.findCellFromColumn=function(t){if(!t)return null;var e=null,n=0,i=0;t:for(n=0;n<this.cellFragments.length;n++)if(this.cellFragments[n])for(i=0;i<this.cellFragments[n].length;i++)if(this.cellFragments[n][i]&&t===this.cellFragments[n][i].pseudoColumn.getColumn()){e=this.rows[n].cells[i];break t}if(!e)return null;for(;n<this.slots.length;n++)for(;i<this.slots[n].length;i++){var r=this.slots[n][i];if(r.cell===e)return{rowIndex:r.rowIndex,columnIndex:r.columnIndex}}return null},n.collectElementsOffsetOfUpperCells=function(t){var e=this,n=[];return this.slots.reduce((function(i,r,o){if(o>=t.rowIndex)return i;var a=r[t.columnIndex]&&e.getCellFragmentOfCell(r[t.columnIndex].cell);return!a||n.includes(a)||(e.collectElementsOffsetFromColumn(a.pseudoColumn.getColumn(),i),n.push(a)),i}),[])},n.collectElementsOffsetOfHighestColumn=function(){var t=this,e=[];return this.rows.forEach((function(n){n.cells.forEach((function(n,i){e[i]||(e[i]={collected:[],elements:[]});var r=e[i],o=t.getCellFragmentOfCell(n);o&&!r.collected.includes(o)&&(t.collectElementsOffsetFromColumn(o.pseudoColumn.getColumn(),r.elements),r.collected.push(o))}))})),[new Hu(e.map((function(t){return t.elements})))]},n.collectElementsOffsetFromColumn=function(t,e){t.fragmentLayoutConstraints.forEach((function(t){if(Or.isInstanceOfRepetitiveElementsOwnerLayoutConstraint(t)){var n=t.getRepetitiveElements();e.push(n)}Rr.isInstanceOfTableRowLayoutConstraint(t)&&t.getElementsOffsetsForTableCell(null).forEach((function(t){e.push(t)}))}))},n.saveState=function(){return[].concat(this.cellBreakPositions)},n.restoreState=function(t){this.cellBreakPositions=t},e}(Du),Hu=function(){function t(t){this.repeatitiveElementsInColumns=t}var e=t.prototype;return e.calculateOffset=function(t){return this.calculateMaxOffsetOfColumn(t,(function(t){return t.current}))},e.calculateMinimumOffset=function(t){return this.calculateMaxOffsetOfColumn(t,(function(t){return t.minimum}))},e.calculateMaxOffsetOfColumn=function(t,e){var n=0;return this.repeatitiveElementsInColumns.forEach((function(i){var r=Ms(t,i);n=Math.max(n,e(r))})),n},t}();function Gu(t){return function(t){return"table-row-group"===t||"table-header-group"===t||"table-footer-group"===t}(t)||function(t){return"table"===t||"inline-table"===t}(t)}function Wu(t,e,n){var i=t.nodeContext,r=i.display,o=i.parent?i.parent.display:null,a=!1;if("inline-table"===o&&!(i.formattingContext instanceof zu))for(var s=i.parent;s;s=s.parent)if(s.formattingContext instanceof zu){a=s.formattingContext===e;break}return a||"table-row"===r&&!Gu(o)||"table-cell"===r&&"table-row"!==o&&!Gu(o)||i.formattingContext instanceof zu&&i.formattingContext!==e?n.buildDeepElementView(i).thenAsync((function(e){return t.nodeContext=e,Ti(!0)})):null}var Xu=function(t){function e(e,n){var i;return(i=t.call(this)||this).formattingContext=e,i.column=n,i.rowIndex=-1,i.columnIndex=0,i.inRow=!1,i.checkPoints=[],i.inHeaderOrFooter=!1,i}I(e,t);var n=e.prototype;return n.startNonInlineElementNode=function(e){var n=this.formattingContext,i=Wu(e,n,this.column);if(i)return i;this.postLayoutBlockContents(e);var r=e.nodeContext,o=r.display,a=n.getRepetitiveElements();switch(o){case"table":n.inlineBorderSpacing=r.inlineBorderSpacing;break;case"table-caption":var s=new Mu(r.viewNode,r.captionSide);n.captions.push(s);break;case"table-header-group":return a.isHeaderRegistered()||(this.inHeaderOrFooter=!0,a.setHeaderNodeContext(r)),Ti(!0);case"table-footer-group":return a.isFooterRegistered()||(this.inHeaderOrFooter=!0,a.setFooterNodeContext(r)),Ti(!0);case"table-row":this.inHeaderOrFooter||(this.inRow=!0,this.rowIndex++,this.columnIndex=0,n.addRow(this.rowIndex,new ku(this.rowIndex,r.sourceNode)),a.firstContentSourceNode||(a.firstContentSourceNode=r.sourceNode))}return t.prototype.startNonInlineElementNode.call(this,e)},n.afterNonInlineElementNode=function(e){var n=this.formattingContext,i=e.nodeContext,r=i.display,o=this.column.clientLayout;if(this.postLayoutBlockContents(e),i.sourceNode===n.tableSourceNode){var a=o.getElementComputedStyle(n.getRootViewNode(i));n.tableWidth=parseFloat(a[n.vertical?"height":"width"]),n.getRepetitiveElements().lastContentSourceNode=e.lastAfterNodeContext&&e.lastAfterNodeContext.sourceNode,e.break=!0}else switch(r){case"table-header-group":case"table-footer-group":if(this.inHeaderOrFooter)return this.inHeaderOrFooter=!1,Ti(!0);break;case"table-row":this.inHeaderOrFooter||(n.lastRowViewNode=i.viewNode,this.inRow=!1);break;case"table-cell":this.inHeaderOrFooter||(this.inRow||(this.rowIndex++,this.columnIndex=0,this.inRow=!0),n.addCell(this.rowIndex,new Lu(this.rowIndex,this.columnIndex,i.viewNode)),this.columnIndex++)}return t.prototype.afterNonInlineElementNode.call(this,e)},n.startNonElementNode=function(t){this.registerCheckPoint(t)},n.afterNonElementNode=function(t){this.registerCheckPoint(t)},n.startInlineElementNode=function(t){this.registerCheckPoint(t)},n.afterInlineElementNode=function(t){this.registerCheckPoint(t)},n.registerCheckPoint=function(t){var e=t.nodeContext;e&&e.viewNode&&!Bs(e)&&this.checkPoints.push(e.clone())},n.postLayoutBlockContents=function(t){this.checkPoints.length>0&&this.column.postLayoutBlock(t.nodeContext,this.checkPoints),this.checkPoints=[]},e}(Js),ju=function(t){function e(e,n){var i;return(i=t.call(this,!0)||this).formattingContext=e,i.column=n,i.inRow=!1,i.currentRowIndex=-1,i.currentColumnIndex=0,i.originalStopAtOverflow=n.stopAtOverflow,n.stopAtOverflow=!1,i}I(e,t);var n=e.prototype;return n.resetColumn=function(){this.column.stopAtOverflow=this.originalStopAtOverflow},n.getColSpanningCellWidth=function(t){for(var e=this.formattingContext.colWidths,n=0,i=0;i<t.colSpan;i++)n+=e[t.anchorSlot.columnIndex+i];return n+this.formattingContext.inlineBorderSpacing*(t.colSpan-1)},n.layoutCell=function(t,e,n){var i=t.rowIndex,r=t.columnIndex,o=e.viewNode;t.colSpan>1&&(et(o,"box-sizing","border-box"),et(o,this.formattingContext.vertical?"height":"width",this.getColSpanningCellWidth(t)+"px"));var a=o.ownerDocument.createElement("div");o.appendChild(a);var s=new _u(this.column,a,e);return this.formattingContext.addCellFragment(i,r,s),1===n.primary.steps.length&&n.primary.after&&(s.empty=!0),s.pseudoColumn.layout(n,!0).thenReturn(!0)},n.hasBrokenCellAtSlot=function(t){var e=this.formattingContext.cellBreakPositions[0];return!!e&&e.cell.anchorSlot.columnIndex===t},n.extractRowSpanningCellBreakPositions=function(){var t=this.formattingContext.cellBreakPositions;if(0===t.length)return[];var e=[],n=0;do{var i=t[n],r=i.cell.rowIndex;if(r<this.currentRowIndex){var o=e[r];o||(o=e[r]=[]),o.push(i),t.splice(n,1)}else n++}while(n<t.length);return e},n.layoutRowSpanningCellsFromPreviousFragment=function(t){var e=this,n=this.formattingContext,i=this.extractRowSpanningCellBreakPositions(),r=i.reduce((function(t){return t+1}),0);if(0===r)return Ti(!0);var o=this.column.layoutContext,a=t.nodeContext;a.viewNode.parentNode.removeChild(a.viewNode);var s=Ni("layoutRowSpanningCellsFromPreviousFragment"),u=Ti(!0),l=0,c=[];return i.forEach((function(t){u=u.thenAsync((function(){var i=to(t[0].cellNodePosition.steps[1],a.parent);return o.setCurrent(i,!1).thenAsync((function(){var a=Ti(!0),s=0;function u(t){for(;s<t;){if(!c.includes(s)){var e=i.viewNode.ownerDocument.createElement("td");et(e,"padding","0"),i.viewNode.appendChild(e)}s++}}return t.forEach((function(t){a=a.thenAsync((function(){var n=t.cell;u(n.anchorSlot.columnIndex);var a=t.cellNodePosition,h=to(a.steps[0],i);return h.offsetInNode=a.offsetInNode,h.after=a.after,h.fragmentIndex=a.steps[0].fragmentIndex+1,o.setCurrent(h,!1).thenAsync((function(){for(var i=t.breakChunkPosition,o=0;o<n.colSpan;o++)c.push(s+o);return s+=n.colSpan,e.layoutCell(n,h,i).thenAsync((function(){return h.viewNode.rowSpan=n.rowIndex+n.rowSpan-e.currentRowIndex+r-l,Ti(!0)}))}))}))})),a.thenAsync((function(){return u(n.getColumnCount()),l++,Ti(!0)}))}))}))})),u.then((function(){o.setCurrent(a,!0,t.atUnforcedBreak).then((function(){s.finish(!0)}))})),s.result()},n.startTableRow=function(t){var e=this;if(this.inHeader||this.inFooter)return Ti(!0);var n=t.nodeContext,i=this.formattingContext;return this.currentRowIndex<0?this.currentRowIndex=i.findRowIndexBySourceNode(n.sourceNode):this.currentRowIndex++,this.currentColumnIndex=0,this.inRow=!0,this.layoutRowSpanningCellsFromPreviousFragment(t).thenAsync((function(){return e.registerCellFragmentIndex(),e.column.checkOverflowAndSaveEdgeAndBreakPosition(t.lastAfterNodeContext,null,!0,t.breakAtTheEdge)&&0===i.getRowSpanningCellsOverflowingTheRow(e.currentRowIndex-1).length&&(e.resetColumn(),n.overflow=!0,t.break=!0),Ti(!0)}))},n.registerCellFragmentIndex=function(){var t=this;this.formattingContext.getRowByIndex(this.currentRowIndex).cells.forEach((function(e){var n=t.formattingContext.cellBreakPositions[e.columnIndex];if(n&&n.cell.anchorSlot.columnIndex==e.anchorSlot.columnIndex){var i=n.cellNodePosition.steps[0],r=t.column.layoutContext.xmldoc.getElementOffset(i.node);au(r,i.fragmentIndex+1,1)}}))},n.startTableCell=function(t){var e=this;if(this.inHeader||this.inFooter)return Ti(!0);var n=t.nodeContext;this.inRow||(this.currentRowIndex<0?this.currentRowIndex=0:this.currentRowIndex++,this.currentColumnIndex=0,this.inRow=!0);var i=this.formattingContext.getRowByIndex(this.currentRowIndex).cells[this.currentColumnIndex],r=n.copy().modify();r.after=!0,t.nodeContext=r;var o,a=Ni("startTableCell");if(this.hasBrokenCellAtSlot(i.anchorSlot.columnIndex)){var s=this.formattingContext.cellBreakPositions.shift();n.fragmentIndex=s.cellNodePosition.steps[0].fragmentIndex+1,o=Ti(s.breakChunkPosition)}else o=this.column.nextInTree(n,t.atUnforcedBreak).thenAsync((function(t){t.viewNode&&n.viewNode.removeChild(t.viewNode);var e=Jr(t,0);return Ti(new ao(e))}));return o.then((function(r){e.layoutCell(i,n,r).then((function(){e.afterNonInlineElementNode(t),e.currentColumnIndex++,a.finish(!0)}))})),a.result()},n.startNonInlineBox=function(t){var e=Wu(t,this.formattingContext,this.column);if(e)return e;var n=t.nodeContext,i=this.formattingContext.getRepetitiveElements(),r=n.display;return"table-header-group"===r&&i&&i.isHeaderSourceNode(n.sourceNode)?(this.inHeader=!0,Ti(!0)):"table-footer-group"===r&&i&&i.isFooterSourceNode(n.sourceNode)?(this.inFooter=!0,Ti(!0)):"table-row"===r?this.startTableRow(t):"table-cell"===r?this.startTableCell(t):Ti(!0)},n.endNonInlineBox=function(t){var e=t.nodeContext;if("table-row"===e.display&&(this.inRow=!1,!this.inHeader&&!this.inFooter)){var n=e.copy().modify();n.after=!1;var i=new Vu(this.currentRowIndex,n,this.formattingContext);this.column.breakPositions.push(i)}return Ti(!0)},n.afterNonInlineElementNode=function(n){var i=n.nodeContext,r=this.formattingContext.getRepetitiveElements(),o=i.display;if("table-header-group"===o?r&&!r.allowInsertRepeatitiveElements&&r.isHeaderSourceNode(i.sourceNode)?(this.inHeader=!1,i.viewNode.parentNode.removeChild(i.viewNode)):et(i.viewNode,"display","table-row-group"):"table-footer-group"===o&&(r&&!r.allowInsertRepeatitiveElements&&r.isFooterSourceNode(i.sourceNode)?(this.inFooter=!1,i.viewNode.parentNode.removeChild(i.viewNode)):et(i.viewNode,"display","table-row-group")),o&&e.ignoreList[o])i.viewNode.parentNode.removeChild(i.viewNode);else{if(i.sourceNode!==this.formattingContext.tableSourceNode)return t.prototype.afterNonInlineElementNode.call(this,n);i.overflow=this.column.checkOverflowAndSaveEdge(i,null),this.resetColumn(),n.break=!0}return Ti(!0)},e}(Js);ju.ignoreList={"table-caption":!0,"table-column-group":!0,"table-column":!0};var Ku=[],$u=function(){function t(){}var e=t.prototype;return e.layoutEntireTable=function(t,e){var n=new Xu(t.formattingContext,e);return new Qs(n,e.layoutContext).iterate(t)},e.getColumnWidths=function(t,e,n,i){for(var r=t.ownerDocument,o=r.createElement("tr"),a=[],s=0;s<e;s++){var u=r.createElement("td");o.appendChild(u),a.push(u)}t.parentNode.insertBefore(o,t.nextSibling);var l=a.map((function(t){var e=i.getElementClientRect(t);return n?e.height:e.width}));return t.parentNode.removeChild(o),l},e.getColGroupElements=function(t){for(var e=[],n=t.firstElementChild;n;)"colgroup"===n.localName&&e.push(n),n=n.nextElementSibling;return e},e.normalizeAndGetColElements=function(t){var e=[];return t.forEach((function(t){var n=t.span;t.removeAttribute("span");for(var i=t.firstElementChild;i;){if("col"===i.localName){var r=i.span;for(i.removeAttribute("span"),n-=r;r-- >1;){var o=i.cloneNode(!0);t.insertBefore(o,i),e.push(o)}e.push(i)}i=i.nextElementSibling}for(;n-- >0;)i=t.ownerDocument.createElement("col"),t.appendChild(i),e.push(i)})),e},e.addMissingColElements=function(t,e,n,i){if(t.length<n){var r=i.ownerDocument.createElement("colgroup");e.push(r);for(var o=t.length;o<n;o++){var a=i.ownerDocument.createElement("col");r.appendChild(a),t.push(a)}}},e.normalizeColGroups=function(t,e,n){var i=t.vertical,r=t.lastRowViewNode;if(r){t.lastRowViewNode=null;var o=r.ownerDocument.createDocumentFragment(),a=t.getColumnCount();if(a>0){var s=t.colWidths=this.getColumnWidths(r,a,i,n.clientLayout),u=this.getColGroupElements(e),l=this.normalizeAndGetColElements(u);this.addMissingColElements(l,u,a,e),l.forEach((function(t,e){et(t,i?"height":"width",s[e]+"px")})),u.forEach((function(t){o.appendChild(t.cloneNode(!0))})),t.colGroups=o}else t.colGroups=o}},e.doInitialLayout=function(t,e){var n=this,i=t.formattingContext;i.vertical=t.vertical,i.initializeRepetitiveElements(t.vertical);var r,o,a,s=(r=t.sourceNode,o=Ku.findIndex((function(t){return t.root===r})),(a=Ku[o])?a.tableLayoutOption:null);!function(t){var e=Ku.findIndex((function(e){return e.root===t}));e>=0&&Ku.splice(e,1)}(t.sourceNode);var u=Ni("TableLayoutProcessor.doInitialLayout"),l=t.copy();return this.layoutEntireTable(t,e).then((function(r){var o=r.viewNode,a=e.clientLayout.getElementClientRect(o),c=e.vertical?a.left:a.bottom;if(c+=(e.vertical?-1:1)*Ms(t,e.collectElementsOffset()).current,!(e.isOverflown(c)||s&&s.calculateBreakPositionsInside))return e.breakPositions.push(new Zu(l)),void u.finish(r);n.normalizeColGroups(i,o,e),i.updateCellSizes(e.clientLayout),u.finish(null)})),u.result()},e.addCaptions=function(t,e,n){var i=t.captions;i.forEach((function(t,r){t&&(e.insertBefore(t.viewNode,n),"top"===t.side&&(i[r]=null))}))},e.addColGroups=function(t,e,n){t.colGroups&&0===this.getColGroupElements(e).length&&e.insertBefore(t.colGroups.cloneNode(!0),n)},e.removeColGroups=function(t,e){if(t.colGroups&&e){var n=this.getColGroupElements(e);n&&n.forEach((function(t){e.removeChild(t)}))}},e.doLayout=function(t,e){var n=t.formattingContext,i=n.getRootViewNode(t),r=i.firstChild;this.addCaptions(n,i,r),this.addColGroups(n,i,r);var o=new ju(n,e),a=new Qs(o,e.layoutContext),s=Ni("TableFormattingContext.doLayout");return a.iterate(t).thenFinish(s),s.result()},e.layout=function(t,e,n){var i=t.formattingContext;return i.getRootViewNode(t)?(n&&Ou(t.parent,e),new qu(i,this).layout(t,e)):e.buildDeepElementView(t)},e.createEdgeBreakPosition=function(t,e,n,i){return new Uu(t,e,n,i)},e.startNonInlineElementNode=function(t){return!1},e.afterNonInlineElementNode=function(t,e){return!1},e.finishBreak=function(t,e,n,i){var r=e.formattingContext;if("table-row"===e.display){var o,a=r.findRowIndexBySourceNode(e.sourceNode);if(r.cellBreakPositions=[],(o=e.after?r.getRowSpanningCellsOverflowingTheRow(a):r.getCellsFallingOnRow(a)).length){var s=Ni("TableLayoutProcessor.finishBreak"),u=0;return s.loopWithFrame((function(t){if(u!==o.length){var e=o[u++],n=r.getCellFragmentOfCell(e),i=n.findAcceptableBreakPosition().nodeContext,s=n.cellNodeContext,l=s.toNodePosition(),c=new ao(i.toNodePosition());r.cellBreakPositions.push({cellNodePosition:l,breakChunkPosition:c,cell:e});var h=s.viewNode;n.column.layoutContext.processFragmentedBlockEdge(n.cellNodeContext),a<e.rowIndex+e.rowSpan-1&&(h.rowSpan=a-e.rowIndex+1),n.empty?t.continueLoop():n.pseudoColumn.finishBreak(i,!1,!0).then((function(){!function(t,e,n){var i=e.getRepetitiveElements();if(i){var r=e.vertical,o=t.column,a=t.pseudoColumn.getColumnElement(),s=t.cellNodeContext.viewNode,u=o.clientLayout.getElementClientRect(s),l=o.getComputedPaddingBorder(s);r?et(a,"max-width",u.right-o.footnoteEdge-i.calculateOffset(n)-l.right+"px"):et(a,"max-height",o.footnoteEdge-i.calculateOffset(n)-u.top-l.top+"px"),et(a,"overflow","hidden")}}(n,r,i),t.continueLoop()}))}else t.breakLoop()})).then((function(){t.clearOverflownViewNodes(e,!1),t.layoutContext.processFragmentedBlockEdge(e),r.finishFragment(),s.finish(!0)})),s.result()}}return r.finishFragment(),$s.finishBreak(t,e,n,i)},e.clearOverflownViewNodes=function(t,e,n,i){js.prototype.clearOverflownViewNodes(t,e,n,i)},t}(),qu=function(t){function e(e,n){var i;return(i=t.call(this)||this).tableFormattingContext=e,i.processor=n,i}I(e,t);var n=e.prototype;return n.resolveLayoutMode=function(t){var e=this.tableFormattingContext.getRepetitiveElements();return e&&e.doneInitialLayout?(t.sourceNode!==this.tableFormattingContext.tableSourceNode||t.after||e&&e.preventSkippingHeader(),new Ju(this.tableFormattingContext,this.processor)):new Yu(this.tableFormattingContext,this.processor)},n.clearNodes=function(e){t.prototype.clearNodes.call(this,e);var n=this.tableFormattingContext.getRootViewNode(e);this.processor.removeColGroups(this.tableFormattingContext,n)},n.restoreState=function(e,n){t.prototype.restoreState.call(this,e,n),this.tableFormattingContext.finishFragment()},e}(Ys),Yu=function(t){function e(e,n){var i;return(i=t.call(this,e)||this).processor=n,i}return I(e,t),e.prototype.doLayout=function(t,e){return this.processor.doInitialLayout(t,e)},e}(Nu),Zu=function(t){function e(e){return t.call(this,e,null,e.overflow,0)||this}I(e,t);var n=e.prototype;return n.getMinBreakPenalty=function(){if(!this.isEdgeUpdated)throw new Error("EdgeBreakPosition.prototype.updateEdge not called");return(this.overflows?3:0)+(this.position.parent?this.position.parent.breakPenalty:0)},n.breakPositionChosen=function(t){t.fragmentLayoutConstraints.push(new Qu(this.position.sourceNode))},e}(Us),Qu=function(){function t(t){this.tableRootNode=t,this.flagmentLayoutConstraintType="EntireTable"}var e=t.prototype;return e.allowLayout=function(t,e,n){return!1},e.nextCandidate=function(t){return!0},e.postLayout=function(t,e,n,i){Ku.push({root:e.sourceNode,tableLayoutOption:{calculateBreakPositionsInside:!0}})},e.finishBreak=function(t,e){return Ti(!0)},e.equalsTo=function(e){return e instanceof t&&e.tableRootNode===this.tableRootNode},e.getPriorityOfFinishBreak=function(){return 0},t}(),Ju=function(t){function e(e,n){var i;return(i=t.call(this,e)||this).processor=n,i}return I(e,t),e.prototype.doLayout=function(t,e){var n=this.formattingContext.getRepetitiveElements();if(n&&!n.isAfterLastContent(t)){var i=new tl(t);e.fragmentLayoutConstraints.some((function(t){return i.equalsTo(t)}))||e.fragmentLayoutConstraints.unshift(i)}return this.processor.doLayout(t,e)},e}(Tu),tl=function(t){function e(e){var n;return(n=t.call(this,e)||this).flagmentLayoutConstraintType="TableRow",n.cellFragmentLayoutConstraints=[],n}I(e,t);var n=e.prototype;return n.allowLayout=function(t,e,n){var i=this.getRepetitiveElements();return!(i&&!n.pseudoParent&&!Rs(this.nodeContext.viewNode)&&i.isEnableToUpdateState()&&(e&&!t||t&&t.overflow))},n.nextCandidate=function(e){return!!this.collectCellFragmentLayoutConstraints(e,this.nodeContext.formattingContext).some((function(t){return t.constraints.some((function(t){return t.nextCandidate(e)}))}))||t.prototype.nextCandidate.call(this,e)},n.postLayout=function(e,n,i,r){var o=this.nodeContext.formattingContext;if(this.cellFragmentLayoutConstraints=this.collectCellFragmentLayoutConstraints(n,o),this.cellFragmentLayoutConstraints.forEach((function(t){t.constraints.forEach((function(n){n.postLayout(e,t.breakPosition,i,r)}))})),!e){var a=o.getRootViewNode(this.nodeContext);(new $u).removeColGroups(o,a),this.removeDummyRowNodes(i)}t.prototype.postLayout.call(this,e,n,i,r)},n.finishBreak=function(e,n){var i=this,r=Ni("finishBreak"),o=this.cellFragmentLayoutConstraints.reduce((function(t,e){return t.concat(e.constraints.map((function(t){return{constraint:t,breakPosition:e.breakPosition}})))}),[]),a=0;return r.loop((function(){if(a<o.length){var t=o[a++];return t.constraint.finishBreak(t.breakPosition,n).thenReturn(!0)}return Ti(!1)})).then((function(){r.finish(!0)})),r.result().thenAsync((function(){return t.prototype.finishBreak.call(i,e,n)}))},n.removeDummyRowNodes=function(t){if(t&&"table-row"===t.display&&t.viewNode)for(;t.viewNode.previousElementSibling;){var e=t.viewNode.previousElementSibling;e.parentNode&&e.parentNode.removeChild(e)}},n.collectCellFragmentLayoutConstraints=function(t,e){return this.getCellFragemnts(t,e).map((function(t){return{constraints:t.fragment.pseudoColumn.getColumn().fragmentLayoutConstraints,breakPosition:t.breakPosition}}))},n.getCellFragemnts=function(t,e){var n=Number.MAX_VALUE;t&&"table-row"===t.display&&(n=e.findRowIndexBySourceNode(t.sourceNode)+1),n=Math.min(e.cellFragments.length,n);for(var i=[],r=0;r<n;r++)e.cellFragments[r]&&e.cellFragments[r].forEach((function(t){t&&i.push({fragment:t,breakPosition:t.findAcceptableBreakPosition().nodeContext})}));return i},n.getElementsOffsetsForTableCell=function(t){var e=this.nodeContext.formattingContext,n=e.findCellFromColumn(t);return n?e.collectElementsOffsetOfUpperCells(n):e.collectElementsOffsetOfHighestColumn()},n.equalsTo=function(t){return t instanceof e&&this.nodeContext.formattingContext===t.nodeContext.formattingContext},e}(Iu),el=new $u;function nl(t){return t.reduce((function(t,e){return t+e}),0)/t.length}p(e.HOOKS.RESOLVE_FORMATTING_CONTEXT,(function(t,e,n,i,r,o){if(!e)return null;if(n===Ye.table){var a=t.parent;return new zu(a?a.formattingContext:null,t.sourceNode)}return null})),p(e.HOOKS.RESOLVE_LAYOUT_PROCESSOR,(function(t){return t instanceof zu?el:null}));var il=function(t,e){this.layoutResult=t,this.penalty=e};function rl(t){return t.vertical?t.width:t.height}function ol(t,e){t.vertical?t.width=e:t.height=e}var al=function(){function t(t,e,n){this.layoutContainer=t,this.columnGenerator=e,this.regionPageFloatLayoutContext=n,this.originalContainerBlockSize=rl(t)}var e=t.prototype;return e.balanceColumns=function(t){var e=this,n=Ni("ColumnBalancer#balanceColumns");this.preBalance(t),this.savePageFloatLayoutContexts(t),this.layoutContainer.clear();var i=[this.createTrialResult(t)];return n.loopWithFrame((function(t){e.hasNextCandidate(i)?(e.updateCondition(i),e.columnGenerator().then((function(n){e.savePageFloatLayoutContexts(n),e.layoutContainer.clear(),n?(i.push(e.createTrialResult(n)),t.continueLoop()):t.breakLoop()}))):t.breakLoop()})).then((function(){var t=i.reduce((function(t,e){return e.penalty<t.penalty?e:t}),i[0]);e.restoreContents(t.layoutResult),e.postBalance(),n.finish(t.layoutResult)})),n.result()},e.createTrialResult=function(t){var e=this.calculatePenalty(t);return new il(t,e)},e.preBalance=function(t){},e.postBalance=function(){ol(this.layoutContainer,this.originalContainerBlockSize)},e.savePageFloatLayoutContexts=function(t){var e=this.regionPageFloatLayoutContext.detachChildren();t&&(t.columnPageFloatLayoutContexts=e)},e.restoreContents=function(t){var e=this.layoutContainer.element;t.columns.forEach((function(t){e.appendChild(t.element)})),this.regionPageFloatLayoutContext.attachChildren(t.columnPageFloatLayoutContexts)},t}();function sl(t){var e=t[t.length-1];if(0===e.penalty)return!1;var n=t[t.length-2];if(n&&e.penalty>=n.penalty)return!1;var i=e.layoutResult.columns;return Math.max.apply(null,i.map((function(t){return t.computedBlockSize})))>Math.max.apply(null,i.map((function(t){return t.getMaxBlockSizeOfPageFloats()})))+1}function ul(t,e){var n=Math.max.apply(null,t[t.length-1].layoutResult.columns.map((function(t){return isNaN(t.blockDistanceToBlockEndFloats)?t.computedBlockSize:t.computedBlockSize-t.blockDistanceToBlockEndFloats+1})))-1;n<rl(e)?ol(e,n):ol(e,rl(e)-1)}var ll=function(t){function e(e,n,i,r){var o;return(o=t.call(this,i,e,n)||this).columnCount=r,o.originalPosition=null,o.foundUpperBound=!1,o}I(e,t);var n=e.prototype;return n.preBalance=function(t){var e=t.columns.reduce((function(t,e){return t+e.computedBlockSize}),0);ol(this.layoutContainer,e/this.columnCount),this.originalPosition=t.position},n.checkPosition=function(t){return this.originalPosition?this.originalPosition.isSamePosition(t):null===t},n.calculatePenalty=function(t){if(!this.checkPosition(t.position))return 1/0;var e=t.columns;return cl(e)?1/0:Math.max.apply(null,e.map((function(t){return t.computedBlockSize})))},n.hasNextCandidate=function(t){if(1===t.length)return!0;if(this.foundUpperBound)return sl(t);var e=t[t.length-1];return this.checkPosition(e.layoutResult.position)&&!cl(e.layoutResult.columns)?(this.foundUpperBound=!0,!0):rl(this.layoutContainer)<this.originalContainerBlockSize},n.updateCondition=function(t){if(this.foundUpperBound)ul(t,this.layoutContainer);else{var e=Math.min(this.originalContainerBlockSize,rl(this.layoutContainer)+.1*this.originalContainerBlockSize);ol(this.layoutContainer,e)}},e}(al);function cl(t){if(t.length<=1)return!1;var e=t[t.length-1].computedBlockSize;return t.slice(0,t.length-1).every((function(t){return e>t.computedBlockSize}))}var hl,fl=function(t){function e(e,n,i){return t.call(this,i,e,n)||this}I(e,t);var n=e.prototype;return n.calculatePenalty=function(t){if(t.columns.every((function(t){return 0===t.computedBlockSize})))return 1/0;var e,n,i=t.columns.filter((function(t){return!t.pageBreakType})).map((function(t){return t.computedBlockSize}));return n=nl(e=i),nl(e.map((function(t){var e=t-n;return e*e})))},n.hasNextCandidate=function(t){return sl(t)},n.updateCondition=function(t){ul(t,this.layoutContainer)},e}(al),dl=function(t,e,n){this.endStuckFixed=t,this.endFixed=e,this.endSlipped=n},pl=function(){function t(){this.map=[]}var e=t.prototype;return e.getMaxFixed=function(){return 0==this.map.length?0:this.map[this.map.length-1].endFixed},e.getMaxSlipped=function(){return 0==this.map.length?0:this.map[this.map.length-1].endSlipped},e.addStuckRange=function(t){if(0==this.map.length)this.map.push(new dl(t,t,t));else{var e=this.map[this.map.length-1],n=e.endSlipped+t-e.endFixed;e.endFixed==e.endStuckFixed?(e.endFixed=t,e.endStuckFixed=t,e.endSlipped=n):this.map.push(new dl(t,t,n))}},e.addSlippedRange=function(t){0==this.map.length?this.map.push(new dl(t,0,0)):this.map[this.map.length-1].endFixed=t},e.slippedByFixed=function(t){var e=this,n=ft(this.map.length,(function(n){return t<=e.map[n].endFixed})),i=this.map[n];return i.endSlipped-Math.max(0,i.endStuckFixed-t)},e.fixedBySlipped=function(t){var e=this,n=ft(this.map.length,(function(n){return t<=e.map[n].endSlipped})),i=this.map[n];return i.endStuckFixed-(i.endSlipped-t)},t}(),gl=function(){function t(e,n,i,r,o,a,s,u){if(this.context=e,this.style=n,this.offset=i,this.isRoot=r,this.flowChunk=o,this.atBlockStart=a,this.atFlowStart=s,this.isParentBoxDisplayed=u,this.isBlockValue=null,this.hasBoxValue=null,this.styleValues={},this.beforeBox=null,this.afterBox=null,this.breakBefore=null,this.flowName=o.flowName,this.hasBox()){var l=n._pseudos;if(l&&l.before){var c=new t(e,l.before,i,!1,o,this.isBlock(),s,!0);fo(c.styleValue("content"))&&(this.beforeBox=c,this.breakBefore=c.breakBefore)}}this.breakBefore=xs(this.getBreakValue("before"),this.breakBefore),this.atFlowStart&&Ds(this.breakBefore)&&(o.breakBefore=xs(o.breakBefore,this.breakBefore))}var e=t.prototype;return e.buildAfterPseudoElementBox=function(e,n,i){if(this.hasBox()){var r=this.style._pseudos;if(r&&r.after){var o=new t(this.context,r.after,e,!1,this.flowChunk,n,i,!0);fo(o.styleValue("content"))&&(this.afterBox=o)}}},e.styleValue=function(t,e){if(!(t in this.styleValues)){var n=this.style[t];this.styleValues[t]=n?n.evaluate(this.context,t):e||null}return this.styleValues[t]},e.displayValue=function(){return this.styleValue("display",Ye.inline)},e.isBlock=function(){if(null===this.isBlockValue){var t=this.displayValue(),e=this.styleValue("position"),n=this.styleValue("float");this.isBlockValue=Gs(t,e,n,this.isRoot)}return this.isBlockValue},e.hasBox=function(){return null===this.hasBoxValue&&(this.hasBoxValue=this.isParentBoxDisplayed&&this.displayValue()!==Ye.none),this.hasBoxValue},e.getBreakValue=function(t){var e=null;if(this.isBlock()){var n=this.styleValue("break-"+t);n&&(e=n.toString())}return e},t}(),ml=function(){function t(t){this.context=t,this.stack=[],this.atBlockStart=!0,this.atFlowStart=!0,this.atStartStack=[]}var e=t.prototype;return e.empty=function(){return 0===this.stack.length},e.lastBox=function(){return this.stack[this.stack.length-1]},e.lastFlowName=function(){var t=this.lastBox();return t?t.flowChunk.flowName:null},e.isCurrentBoxDisplayed=function(){return this.stack.every((function(t){return t.displayValue()!==Ye.none}))},e.push=function(t,e,n,i){var r=this.lastBox();i&&r&&i.flowName!==r.flowName&&this.atStartStack.push({atBlockStart:this.atBlockStart,atFlowStart:this.atFlowStart});var o=i||r.flowChunk,a=this.atFlowStart||!!i,s=this.isCurrentBoxDisplayed(),u=new gl(this.context,t,e,n,o,a||this.atBlockStart,a,s);return this.stack.push(u),this.atBlockStart=u.hasBox()?!u.beforeBox&&u.isBlock():this.atBlockStart,this.atFlowStart=u.hasBox()?!u.beforeBox&&a:this.atFlowStart,u},e.encounteredTextNode=function(t){var e=this.lastBox();(this.atBlockStart||this.atFlowStart)&&e.hasBox()&&(jr(t,Xr(e.styleValue("white-space",Ye.normal).toString()))||(this.atBlockStart=!1,this.atFlowStart=!1))},e.pop=function(t){var e=this.stack.pop();if(e.buildAfterPseudoElementBox(t,this.atBlockStart,this.atFlowStart),this.atFlowStart&&e.afterBox){var n=e.afterBox.getBreakValue("before");e.flowChunk.breakBefore=xs(e.flowChunk.breakBefore,n)}var i=this.lastBox();if(i)if(i.flowName===e.flowName)e.hasBox()&&(this.atBlockStart=this.atFlowStart=!1);else{var r=this.atStartStack.pop();this.atBlockStart=r.atBlockStart,this.atFlowStart=r.atFlowStart}return e},e.nearestBlockStartOffset=function(t){if(!t.atBlockStart)return t.offset;var e=this.stack.length-1,n=this.stack[e];for(n===t&&(e--,n=this.stack[e]);e>=0;){if(n.flowName!==t.flowName)return t.offset;if(!n.atBlockStart)return n.offset;if(n.isRoot)return n.offset;t=n,n=this.stack[--e]}throw new Error("No block start offset found!")},t}(),vl=function(){function t(t,e,n,i,r,o,a,s){this.xmldoc=t,this.scope=n,this.context=i,this.primaryFlows=r,this.validatorSet=o,this.counterListener=a,this.rootStyle={},this.styleMap={},this.flows={},this.flowChunks=[],this.flowListener=null,this.flowToReach=null,this.idToReach=null,this.primary=!0,this.primaryStack=[],this.rootBackgroundAssigned=!1,this.rootLayoutAssigned=!1,this.breakBeforeValues={},this.bodyReached=!0,this.root=t.root,this.cascadeHolder=e,this.last=this.root,this.cascade=e.createInstance(i,a,s,t.lang),this.offsetMap=new pl;var u=t.getElementOffset(this.root);this.lastOffset=u,this.boxStack=new ml(i),this.offsetMap.addStuckRange(u);var l=this.getAttrStyle(this.root);switch(this.cascade.pushElement(this.root,l,u),this.postprocessTopStyle(l,!1),this.root.namespaceURI){case W.XHTML:this.bodyReached=!1}this.primaryStack.push(!0),this.styleMap={},this.styleMap["e"+u]=l,this.lastOffset++,this.replayFlowElementsFromOffset(-1)}var e=t.prototype;return e.hasProp=function(t,e,n){var i=t[n];return i&&i.evaluate(this.context)!==e[n]},e.transferPropsToRoot=function(t,e){for(var n in e){var i=t[n];if(i)this.rootStyle[n]=i,delete t[n];else{var r=e[n];r&&(this.rootStyle[n]=new No(r,33554432))}}},e.postprocessTopStyle=function(t,e){var n=this;if(["writing-mode","direction"].forEach((function(i){!t[i]||e&&n.rootStyle[i]||(n.rootStyle[i]=t[i])})),!this.rootBackgroundAssigned){var i=this.hasProp(t,this.validatorSet.backgroundProps,"background-color")?t["background-color"].evaluate(this.context):null,r=this.hasProp(t,this.validatorSet.backgroundProps,"background-image")?t["background-image"].evaluate(this.context):null;(i&&i!==Ye.inherit||r&&r!==Ye.inherit)&&(this.transferPropsToRoot(t,this.validatorSet.backgroundProps),this.rootBackgroundAssigned=!0)}if(!this.rootLayoutAssigned)for(var o=0;o<El.length;o++)if(this.hasProp(t,this.validatorSet.layoutProps,El[o])){this.transferPropsToRoot(t,this.validatorSet.layoutProps),this.rootLayoutAssigned=!0;break}if(!e){var a=t["font-size"];if(a){var s=a.evaluate(this.context),u=s.num;switch(s.unit){case"em":case"rem":u*=this.context.initialFontSize;break;case"ex":u*=this.context.initialFontSize*Ht.ex/Ht.em;break;case"%":u*=this.context.initialFontSize/100;break;default:var l=Ht[s.unit];l&&(u*=l)}this.context.rootFontSize=u}}},e.getTopContainerStyle=function(){for(var t=0;!this.bodyReached&&this.styleUntil(t+=5e3,0)!=Number.POSITIVE_INFINITY;);return this.rootStyle},e.getAttrStyle=function(t){if(t.style instanceof CSSStyleDeclaration){var e=t.getAttribute("style");if(e)return function(t,e,n,i){var r=new Ka(t,e),o=new yi(i,r);try{!function(t,e,n){new Er(rr,t,e,n).runParser(Number.POSITIVE_INFINITY,!1,!0,!1,!1)}(o,r,n)}catch(t){f.warn(t,"Style attribute parse error:")}return r.elementStyle}(this.scope,this.validatorSet,this.xmldoc.url,e)}return{}},e.getReachedOffset=function(){return this.lastOffset},e.replayFlowElementsFromOffset=function(t){if(!(t>=this.lastOffset)){var e=this.context,n=this.xmldoc.getElementOffset(this.root);if(t<n){var i=this.getStyle(this.root,!1),r=Oo(i,"flow-into"),o=r?r.evaluate(e,"flow-into").toString():"body",a=this.encounteredFlowElement(o,i,this.root,n);this.boxStack.empty()&&this.boxStack.push(i,n,!0,a)}var s=this.xmldoc.getNodeByOffset(t),u=this.xmldoc.getNodeOffset(s,0,!1);if(!(u>=this.lastOffset))for(;;){if(1!=s.nodeType)u+=s.textContent.length;else{var l=s,c=this.getStyle(l,!1),h=c["flow-into"];if(h){var f=h.evaluate(e,"flow-into").toString();this.encounteredFlowElement(f,c,l,u)}u++}if(u>=this.lastOffset)break;var d=s.firstChild;if(null==d)for(;!(d=s.nextSibling);)if((s=s.parentNode)===this.root)return;s=d}}},e.resetFlowChunkStream=function(t){this.flowListener=t;for(var e=0;e<this.flowChunks.length;e++)this.flowListener.encounteredFlowChunk(this.flowChunks[e],this.flows[this.flowChunks[e].flowName])},e.styleUntilFlowIsReached=function(t){this.flowToReach=t;for(var e=0;null!=this.flowToReach&&this.styleUntil(e+=5e3,0)!=Number.POSITIVE_INFINITY;);},e.styleUntilIdIsReached=function(t){if(t){this.idToReach=t;for(var e=0;this.idToReach&&this.styleUntil(e+=5e3,0)!==Number.POSITIVE_INFINITY;);this.idToReach=null}},e.encounteredFlowElement=function(t,e,n,i){var r=0,o=Number.POSITIVE_INFINITY,a=!1,s=!1,u=!1,l=e["flow-options"];if(l){var c=function(t){if(t){var e=new Nn;try{return t.visit(e),e.propSet}catch(t){f.warn(t,"toSet:")}}return{}}(l.evaluate(this.context,"flow-options"));a=!!c.exclusive,s=!!c.static,u=!!c.last}var h=e["flow-linger"];h&&(o=An(h.evaluate(this.context,"flow-linger"),Number.POSITIVE_INFINITY));var d=e["flow-priority"];d&&(r=An(d.evaluate(this.context,"flow-priority"),0));var p=this.breakBeforeValues[i]||null,g=this.flows[t];if(!g){var m=this.boxStack.lastFlowName();g=this.flows[t]=new Kr(t,m)}var v=new $r(t,n,i,r,o,a,s,u,p);return this.flowChunks.push(v),this.flowToReach==t&&(this.flowToReach=null),this.flowListener&&this.flowListener.encounteredFlowChunk(v,g),v},e.registerForcedBreakOffset=function(t,e,n){if(Ds(t)){var i=this.flows[n].forcedBreakOffsets;(0===i.length||i[i.length-1]<e)&&i.push(e)}this.breakBeforeValues[e]=xs(this.breakBeforeValues[e],t)},e.styleUntil=function(t,e){var n=-1;if(t<=this.lastOffset&&(n=this.offsetMap.slippedByFixed(t)+e)<this.offsetMap.getMaxSlipped())return this.offsetMap.fixedBySlipped(n);if(null==this.last)return Number.POSITIVE_INFINITY;for(var i=this.context;;){var r=this.last.firstChild;if(null==r)for(;;){if(1==this.last.nodeType){this.cascade.popElement(this.last),this.primary=this.primaryStack.pop();var o=this.boxStack.pop(this.lastOffset),a=null;if(o.afterBox){var s=o.afterBox.getBreakValue("before");this.registerForcedBreakOffset(s,o.afterBox.atBlockStart?this.boxStack.nearestBlockStartOffset(o):o.afterBox.offset,o.flowName),a=o.afterBox.getBreakValue("after")}a=xs(a,o.getBreakValue("after")),this.registerForcedBreakOffset(a,this.lastOffset,o.flowName)}if(r=this.last.nextSibling)break;if(this.last=this.last.parentNode,this.last===this.root)return this.last=null,t<this.lastOffset&&(n<0&&(n=this.offsetMap.slippedByFixed(t)+e),n<=this.offsetMap.getMaxSlipped())?this.offsetMap.fixedBySlipped(n):Number.POSITIVE_INFINITY}if(this.last=r,1!=this.last.nodeType)this.lastOffset+=this.last.textContent.length,this.boxStack.encounteredTextNode(this.last),this.primary?this.offsetMap.addStuckRange(this.lastOffset):this.offsetMap.addSlippedRange(this.lastOffset);else{var u=this.last,l=this.getAttrStyle(u);this.primaryStack.push(this.primary),this.cascade.pushElement(u,l,this.lastOffset);var c=u.getAttribute("id")||u.getAttributeNS(W.XML,"id");c&&c===this.idToReach&&(this.idToReach=null),this.bodyReached||"body"!=u.localName||u.parentNode!=this.root||(this.postprocessTopStyle(l,!0),this.bodyReached=!0);var h=void 0,f=l["flow-into"];if(f){var d=f.evaluate(i,"flow-into").toString(),p=this.encounteredFlowElement(d,l,u,this.lastOffset);this.primary=!!this.primaryFlows[d],h=this.boxStack.push(l,this.lastOffset,u===this.root,p)}else h=this.boxStack.push(l,this.lastOffset,u===this.root),u===this.xmldoc.body&&(h.breakBefore=xs(h.flowChunk.breakBefore,h.breakBefore));var g=this.boxStack.nearestBlockStartOffset(h);if(this.registerForcedBreakOffset(h.breakBefore,g,h.flowName),h.beforeBox){var m=h.beforeBox.getBreakValue("after");this.registerForcedBreakOffset(m,h.beforeBox.atBlockStart?g:h.offset,h.flowName)}if(this.primary&&h.displayValue()===Ye.none&&(this.primary=!1),this.styleMap["e"+this.lastOffset]=l,this.lastOffset++,this.primary?this.offsetMap.addStuckRange(this.lastOffset):this.offsetMap.addSlippedRange(this.lastOffset),t<this.lastOffset&&(n<0&&(n=this.offsetMap.slippedByFixed(t)+e),n<=this.offsetMap.getMaxSlipped()))return this.offsetMap.fixedBySlipped(n)}}},e.getStyle=function(t,e){var n=this.xmldoc.getElementOffset(t),i="e"+n;return e&&(n=this.xmldoc.getNodeOffset(t,0,!0)),this.lastOffset<=n&&this.styleUntil(n,0),this.styleMap[i]},e.processContent=function(t,e){},t}(),El=["column-count","column-width","column-fill"],bl=function(){function t(t){this.validator=t,this.success=null,this.failure=null,this.code=0}var e=t.prototype;return e.isSpecial=function(){return 0!=this.code},e.markAsStartGroup=function(){this.code=-1},e.isStartGroup=function(){return-1==this.code},e.markAsEndGroup=function(){this.code=-2},e.isEndGroup=function(){return-2==this.code},e.markAsStartAlternate=function(t){this.code=2*t+1},e.isStartAlternate=function(){return this.code>0&&this.code%2!=0},e.markAsEndAlternate=function(t){this.code=2*t+2},e.isEndAlternate=function(){return this.code>0&&this.code%2==0},e.getAlternate=function(){return Math.floor((this.code-1)/2)},t}(),Cl=function(t,e){this.where=t,this.success=e,this.what=-1};!function(t){t[t.FOLLOW=1]="FOLLOW",t[t.OPTIONAL=2]="OPTIONAL",t[t.REPEATED=3]="REPEATED",t[t.ALTERNATE=4]="ALTERNATE"}(hl||(hl={}));var yl=function(){function t(){this.nodes=[],this.connections=[],this.match=[],this.nomatch=[],this.error=[],this.emptyHead=!0}var e=t.prototype;return e.connect=function(t,e){for(var n=0;n<t.length;n++)this.connections[t[n]].what=e;t.splice(0,t.length)},e.clone=function(){for(var e,n,i,r=new t,o=0;o<this.nodes.length;o++){var a=this.nodes[o],s=new bl(a.validator);s.code=a.code,r.nodes.push(s)}for(var u=0;u<this.connections.length;u++){var l=this.connections[u],c=new Cl(l.where,l.success);c.what=l.what,r.connections.push(c)}return(e=r.match).push.apply(e,this.match),(n=r.nomatch).push.apply(n,this.nomatch),(i=r.error).push.apply(i,this.error),r},e.addSpecialToArr=function(t,e,n){var i=this.nodes.length,r=new bl(Nl);n>=0?e?r.markAsStartAlternate(n):r.markAsEndAlternate(n):e?r.markAsStartGroup():r.markAsEndGroup(),this.nodes.push(r),this.connect(t,i);var o=new Cl(i,!0),a=new Cl(i,!1);t.push(this.connections.length),this.connections.push(a),t.push(this.connections.length),this.connections.push(o)},e.endSpecialGroup=function(){for(var t=[this.match,this.nomatch,this.error],e=0;e<t.length;e++)this.addSpecialToArr(t[e],!1,-1)},e.startSpecialGroup=function(){if(this.nodes.length)throw new Error("invalid call");this.addSpecialToArr(this.match,!0,-1)},e.endClause=function(t){this.addSpecialToArr(this.match,!1,t)},e.startClause=function(t){if(this.nodes.length)throw new Error("invalid call");var e=new bl(Nl);e.markAsStartAlternate(t),this.nodes.push(e);var n=new Cl(0,!0),i=new Cl(0,!1);this.nomatch.push(this.connections.length),this.connections.push(i),this.match.push(this.connections.length),this.connections.push(n)},e.addPrimitive=function(t){var e=this.nodes.length;this.nodes.push(new bl(t));var n=new Cl(e,!0),i=new Cl(e,!1);this.connect(this.match,e),this.emptyHead?(this.nomatch.push(this.connections.length),this.emptyHead=!1):this.error.push(this.connections.length),this.connections.push(i),this.match.push(this.connections.length),this.connections.push(n)},e.isSimple=function(){return 1==this.nodes.length&&!this.nodes[0].isSpecial()},e.isPrimitive=function(){return this.isSimple()&&this.nodes[0].validator instanceof Dl},e.addGroup=function(t,e){if(0!=t.nodes.length){var n=this.nodes.length;if(e==hl.ALTERNATE&&1==n&&t.isPrimitive()&&this.isPrimitive())this.nodes[0].validator=this.nodes[0].validator.combine(t.nodes[0].validator);else{for(var i=0;i<t.nodes.length;i++)this.nodes.push(t.nodes[i]);e==hl.ALTERNATE?(this.emptyHead=!0,this.connect(this.nomatch,n)):this.connect(this.match,n);for(var r=this.connections.length,o=0;o<t.connections.length;o++){var a=t.connections[o];a.where+=n,a.what>=0&&(a.what+=n),this.connections.push(a)}for(var s=0;s<t.match.length;s++)this.match.push(t.match[s]+r);if(e==hl.REPEATED&&this.connect(this.match,n),e==hl.OPTIONAL||e==hl.REPEATED)for(var u=0;u<t.nomatch.length;u++)this.match.push(t.nomatch[u]+r);else if(this.emptyHead){for(var l=0;l<t.nomatch.length;l++)this.nomatch.push(t.nomatch[l]+r);this.emptyHead=t.emptyHead}else for(var c=0;c<t.nomatch.length;c++)this.error.push(t.nomatch[c]+r);for(var h=0;h<t.error.length;h++)this.error.push(t.error[h]+r);t.nodes=null,t.connections=null}}},e.finish=function(t,e){var n=this.nodes.length;this.nodes.push(t),this.nodes.push(e),this.connect(this.match,n),this.connect(this.nomatch,n+1),this.connect(this.error,n+1);for(var i,r=_(this.connections);!(i=r()).done;){var o=i.value;o.success?this.nodes[o.where].success=this.nodes[o.what]:this.nodes[o.where].failure=this.nodes[o.what]}for(var a=0;a<n;a++)if(null==this.nodes[a].failure||null==this.nodes[a].success)throw new Error("Invalid validator state");return this.nodes[0]},t}(),wl=function(t){function e(){return t.call(this)||this}return I(e,t),e.prototype.validateForShorthand=function(t,e){var n=t[e].visit(this);return n?[n]:null},e}(Ie),Dl=function(t){function e(e,n,i){var r;return(r=t.call(this)||this).allowed=e,r.idents=n,r.units=i,r}I(e,t);var n=e.prototype;return n.visitEmpty=function(t){return 1&this.allowed?t:null},n.visitSlash=function(t){return 2048&this.allowed?t:null},n.visitStr=function(t){return 2&this.allowed?t:null},n.visitIdent=function(t){return this.idents[t.name.toLowerCase()]||(4&this.allowed?t:null)},n.visitNumeric=function(t){return 0!=t.num||512&this.allowed?t.num<0&&!(256&this.allowed)?null:this.units[t.unit]?t:null:"%"==t.unit&&1024&this.allowed?t:null},n.visitNum=function(t){return 0==t.num?512&this.allowed?t:null:t.num<=0&&!(256&this.allowed)?null:16&this.allowed?t:null},n.visitInt=function(t){return 0==t.num?512&this.allowed?t:null:t.num<=0&&!(256&this.allowed)?null:48&this.allowed?t:this.idents[""+t.num]||null},n.visitColor=function(t){return 64&this.allowed?t:null},n.visitURL=function(t){return 128&this.allowed?t:null},n.visitSpaceList=function(t){return null},n.visitCommaList=function(t){return null},n.visitFunc=function(t){return null},n.visitExpr=function(t){return 2046&this.allowed?t:null},n.combine=function(t){var n={},i={};for(var r in this.idents)n[r]=this.idents[r];for(var o in t.idents)n[o]=t.idents[o];for(var a in this.units)i[a]=this.units[a];for(var s in t.units)i[s]=t.units[s];return new e(this.allowed|t.allowed,n,i)},e}(wl),Sl={},Nl=new Dl(0,Sl,Sl),Tl=function(t){function e(e){var n;return(n=t.call(this)||this).successTerminal=new bl(null),n.failureTerminal=new bl(null),n.first=e.finish(n.successTerminal,n.failureTerminal),n}I(e,t);var n=e.prototype;return n.validateList=function(t,e,n){for(var i=e?[]:t,r=this.first,o=n,a=null,s=null;r!==this.successTerminal&&r!==this.failureTerminal;)if(o>=t.length)r=r.failure;else{var u=t[o],l=u;if(r.isSpecial()){var c=!0;r.isStartGroup()?(a?a.push(s):a=[s],s=[]):r.isEndGroup()?s=a.length>0?a.pop():null:r.isEndAlternate()?s[r.getAlternate()]="taken":c=null==s[r.getAlternate()],r=c?r.success:r.failure}else{if(0==o&&!e&&r.validator instanceof Al&&this instanceof Al){if(l=new We(t).visit(r.validator)){o=t.length,r=r.success;continue}}else if(0==o&&!e&&r.validator instanceof xl&&this instanceof Al){if(l=new Xe(t).visit(r.validator)){o=t.length,r=r.success;continue}}else l=u.visit(r.validator);if(!l){r=r.failure;continue}if(l!==u&&t===i){i=[];for(var h=0;h<o;h++)i[h]=t[h]}t!==i&&(i[o-n]=l),o++,r=r.success}}return r===this.successTerminal&&(e?i.length>0:o==t.length)?i:null},n.validateSingle=function(t){for(var e=null,n=this.first;n!==this.successTerminal&&n!==this.failureTerminal;)t?n.isSpecial()?n=n.success:(e=t.visit(n.validator))?(t=null,n=n.success):n=n.failure:n=n.failure;return n===this.successTerminal?e:null},n.visitEmpty=function(t){return this.validateSingle(t)},n.visitSlash=function(t){return this.validateSingle(t)},n.visitStr=function(t){return this.validateSingle(t)},n.visitIdent=function(t){return this.validateSingle(t)},n.visitNumeric=function(t){return this.validateSingle(t)},n.visitNum=function(t){return this.validateSingle(t)},n.visitInt=function(t){return this.validateSingle(t)},n.visitColor=function(t){return this.validateSingle(t)},n.visitURL=function(t){return this.validateSingle(t)},n.visitSpaceList=function(t){return null},n.visitCommaList=function(t){return null},n.visitFunc=function(t){return this.validateSingle(t)},n.visitExpr=function(t){return null},e}(wl),Al=function(t){function e(e){return t.call(this,e)||this}I(e,t);var n=e.prototype;return n.visitSpaceList=function(t){var e=this.validateList(t.values,!1,0);return e===t.values?t:e?new We(e):null},n.visitCommaList=function(t){for(var e=this.first,n=!1;e;){if(e.validator instanceof xl){n=!0;break}e=e.failure}if(n){var i=this.validateList(t.values,!1,0);return i===t.values?t:i?new Xe(i):null}return null},n.validateForShorthand=function(t,e){return this.validateList(t,!0,e)},e}(Tl),xl=function(t){function e(e){return t.call(this,e)||this}I(e,t);var n=e.prototype;return n.visitSpaceList=function(t){return this.validateSingle(t)},n.visitCommaList=function(t){var e=this.validateList(t.values,!1,0);return e===t.values?t:e?new Xe(e):null},n.validateForShorthand=function(t,e){for(var n,i=this.first;i!==this.failureTerminal;){if(n=i.validator.validateForShorthand(t,e))return n;i=i.failure}return null},e}(Tl),Il=function(t){function e(e,n){var i;return(i=t.call(this,n)||this).name=e,i}I(e,t);var n=e.prototype;return n.validateSingle=function(t){return null},n.visitFunc=function(t){if(t.name.toLowerCase()!=this.name)return null;var e=this.validateList(t.values,!1,0);return e===t.values?t:e?new je(t.name,e):null},e}(Tl),Fl=function(){function t(){}var e=t.prototype;return e.tryParse=function(t,e,n){return e},e.success=function(t,e){},t}(),Pl=function(t){function e(e,n){var i;return(i=t.call(this)||this).name=n,i.validator=e.validators[i.name],i}I(e,t);var n=e.prototype;return n.tryParse=function(t,e,n){if(n.values[this.name])return e;var i=this.validator.validateForShorthand(t,e);if(i){var r=i.length,o=r>1?new We(i):i[0];return this.success(o,n),e+r}return e},n.success=function(t,e){e.values[this.name]=t},e}(Fl),Ol=function(t){function e(e,n){var i;return(i=t.call(this,e,n[0])||this).names=n,i}return I(e,t),e.prototype.success=function(t,e){for(var n=0;n<this.names.length;n++)e.values[this.names[n]]=t},e}(Pl),Rl=function(t){function e(e,n){var i;return(i=t.call(this)||this).nodes=e,i.slash=n,i}return I(e,t),e.prototype.tryParse=function(t,e,n){var i=e;if(this.slash){if(t[e]!=Re)return i;if(++e==t.length)return i}var r=this.nodes[0].tryParse(t,e,n);if(r==e)return i;e=r;for(var o=1;o<this.nodes.length&&e<t.length&&(r=this.nodes[o].tryParse(t,e,n))!=e;o++)e=r;return e},e}(Fl),kl=function(t){function e(){var e;return(e=t.apply(this,arguments)||this).syntax=null,e.propList=null,e.error=!1,e.values={},e.validatorSet=null,e}I(e,t);var n=e.prototype;return n.setOwner=function(t){this.validatorSet=t},n.syntaxNodeForProperty=function(t){return new Pl(this.validatorSet,t)},n.clone=function(){var t=new this.constructor;return t.syntax=this.syntax,t.propList=this.propList,t.validatorSet=this.validatorSet,t},n.init=function(t,e){this.syntax=t,this.propList=e},n.finish=function(t,e){if(!this.error){for(var n,i=_(this.propList);!(n=i()).done;){var r=n.value;e.simpleProperty(r,this.values[r]||this.validatorSet.defaultValues[r],t)}return!0}return!1},n.propagateInherit=function(t,e){for(var n,i=_(this.propList);!(n=i()).done;)e.simpleProperty(n.value,Ye.inherit,t)},n.validateList=function(t){return this.error=!0,0},n.validateSingle=function(t){return this.validateList([t]),null},n.visitEmpty=function(t){return this.validateSingle(t)},n.visitStr=function(t){return this.validateSingle(t)},n.visitIdent=function(t){return this.validateSingle(t)},n.visitNumeric=function(t){return this.validateSingle(t)},n.visitNum=function(t){return this.validateSingle(t)},n.visitInt=function(t){return this.validateSingle(t)},n.visitColor=function(t){return this.validateSingle(t)},n.visitURL=function(t){return this.validateSingle(t)},n.visitSpaceList=function(t){return this.validateList(t.values),null},n.visitCommaList=function(t){return this.error=!0,null},n.visitFunc=function(t){return this.validateSingle(t)},n.visitExpr=function(t){return this.error=!0,null},e}(Ie),Ll=function(t){function e(){return t.call(this)||this}return I(e,t),e.prototype.validateList=function(t){for(var e=0,n=0;e<t.length;){var i=this.syntax[n].tryParse(t,e,this);if(i>e)e=i,n=0;else if(++n==this.syntax.length){this.error=!0;break}}return e},e}(kl),Bl=function(t){function e(){return t.call(this)||this}I(e,t);var n=e.prototype;return n.validateList=function(t){if(t.length>this.syntax.length||0==t.length)return this.error=!0,0;for(var e=0;e<this.syntax.length;e++){for(var n=e;n>=t.length;)n=1==n?0:n-2;if(this.syntax[e].tryParse(t,n,this)!=n+1)return this.error=!0,0}return t.length},n.createSyntaxNode=function(){return new Ol(this.validatorSet,this.propList)},e}(kl),_l={SIMPLE:Ll,INSETS:Bl,INSETS_SLASH:function(t){function e(){return t.call(this)||this}return I(e,t),e.prototype.validateList=function(t){for(var e=t.length,n=0;n<t.length;n++)if(t[n]===Re){e=n;break}if(e>this.syntax.length||0==t.length)return this.error=!0,0;for(var i=0;i<this.syntax.length;i++){for(var r=i;r>=e;)r=1==r?0:r-2;var o=void 0;if(e+1<t.length)for(o=e+i+1;o>=t.length;)o-=o==e+2?1:2;else o=r;if(2!=this.syntax[i].tryParse([t[r],t[o]],0,this))return this.error=!0,0}return t.length},e}(kl),COMMA:function(t){function e(){return t.call(this)||this}I(e,t);var n=e.prototype;return n.mergeIn=function(t,e){for(var n,i=_(this.propList);!(n=i()).done;){var r=n.value,o=e[r]||this.validatorSet.defaultValues[r],a=t[r];a||(t[r]=a=[]),a.push(o)}},n.visitCommaList=function(t){for(var e={},n=0;n<t.values.length;n++)if(this.values={},t.values[n]instanceof Xe?this.error=!0:(t.values[n].visit(this),this.mergeIn(e,this.values),this.values["background-color"]&&n!=t.values.length-1&&(this.error=!0)),this.error)return null;for(var i in this.values={},e)this.values[i]="background-color"==i?e[i].pop():new Xe(e[i]);return null},e}(Ll),FONT:function(t){function e(){return t.call(this)||this}I(e,t);var n=e.prototype;return n.init=function(e,n){t.prototype.init.call(this,e,n),this.propList.push("font-family","line-height","font-size")},n.validateList=function(e){var n=t.prototype.validateList.call(this,e);if(n+2>e.length)return this.error=!0,n;this.error=!1;var i=this.validatorSet.validators;if(!e[n].visit(i["font-size"]))return this.error=!0,n;if(this.values["font-size"]=e[n++],e[n]===Re){if(2+ ++n>e.length)return this.error=!0,n;if(!e[n].visit(i["line-height"]))return this.error=!0,n;this.values["line-height"]=e[n++]}var r=n==e.length-1?e[n]:new We(e.slice(n,e.length));return r.visit(i["font-family"])?(this.values["font-family"]=r,e.length):(this.error=!0,n)},n.visitCommaList=function(t){if(t.values[0].visit(this),this.error)return null;for(var e=[this.values["font-family"]],n=1;n<t.values.length;n++)e.push(t.values[n]);var i=new Xe(e);return i.visit(this.validatorSet.validators["font-family"])?this.values["font-family"]=i:this.error=!0,null},n.visitIdent=function(t){var e=this.validatorSet.systemFonts[t.name];if(e)for(var n in e)this.values[n]=e[n];else this.error=!0;return null},e}(Ll)},Ml=function(){function t(){this.validators={},this.prefixes={},this.defaultValues={},this.namedValidators={},this.systemFonts={},this.shorthands={},this.layoutProps={},this.backgroundProps={}}var e=t.prototype;return e.addReplacement=function(t,e){var n;if(e.type==kn.NUMERIC)n=new Me(e.num,e.text);else if(e.type==kn.HASH)n=Zi(e.text);else{if(e.type!=kn.IDENT)throw new Error("unexpected replacement");n=_e(e.text)}if(t.isPrimitive()){var i=t.nodes[0].validator.idents;for(var r in i)i[r]=n;return t}throw new Error("unexpected replacement")},e.newGroup=function(t,e){var n,i=new yl;if("||"==t){for(var r=0;r<e.length;r++){var o=new yl;o.startClause(r),o.addGroup(e[r],hl.FOLLOW),o.endClause(r),i.addGroup(o,0==r?hl.FOLLOW:hl.ALTERNATE)}var a=new yl;return a.startSpecialGroup(),a.addGroup(i,hl.REPEATED),a.endSpecialGroup(),a}switch(t){case" ":n=hl.FOLLOW;break;case"|":case"||":n=hl.ALTERNATE;break;default:throw new Error("unexpected op")}for(var s=0;s<e.length;s++)i.addGroup(e[s],0==s?hl.FOLLOW:n);return i},e.addCounts=function(t,e,n){for(var i=new yl,r=0;r<e;r++)i.addGroup(t.clone(),hl.FOLLOW);if(n==Number.POSITIVE_INFINITY)i.addGroup(t,hl.REPEATED);else for(var o=e;o<n;o++)i.addGroup(t.clone(),hl.OPTIONAL);return i},e.primitive=function(t){var e=new yl;return e.addPrimitive(t),e},e.newFunc=function(t,e){var n;switch(t){case"COMMA":n=new xl(e);break;case"SPACE":n=new Al(e);break;default:n=new Il(t.toLowerCase(),e)}return this.primitive(n)},e.initBuiltInValidators=function(){this.namedValidators.HASHCOLOR=this.primitive(new Dl(64,Sl,Sl)),this.namedValidators.POS_INT=this.primitive(new Dl(32,Sl,Sl)),this.namedValidators.POS_NUM=this.primitive(new Dl(16,Sl,Sl)),this.namedValidators.POS_PERCENTAGE=this.primitive(new Dl(8,Sl,{"%":Oe})),this.namedValidators.NEGATIVE=this.primitive(new Dl(256,Sl,Sl)),this.namedValidators.ZERO=this.primitive(new Dl(512,Sl,Sl)),this.namedValidators.ZERO_PERCENTAGE=this.primitive(new Dl(1024,Sl,Sl)),this.namedValidators.POS_LENGTH=this.primitive(new Dl(8,Sl,{em:Oe,ex:Oe,ch:Oe,rem:Oe,vw:Oe,vh:Oe,vi:Oe,vb:Oe,vmin:Oe,vmax:Oe,pvw:Oe,pvh:Oe,pvi:Oe,pvb:Oe,pvmin:Oe,pvmax:Oe,cm:Oe,mm:Oe,in:Oe,px:Oe,pt:Oe,pc:Oe,q:Oe})),this.namedValidators.POS_ANGLE=this.primitive(new Dl(8,Sl,{deg:Oe,grad:Oe,rad:Oe,turn:Oe})),this.namedValidators.POS_TIME=this.primitive(new Dl(8,Sl,{s:Oe,ms:Oe})),this.namedValidators.FREQUENCY=this.primitive(new Dl(8,Sl,{Hz:Oe,kHz:Oe})),this.namedValidators.RESOLUTION=this.primitive(new Dl(8,Sl,{dpi:Oe,dpcm:Oe,dppx:Oe})),this.namedValidators.URI=this.primitive(new Dl(128,Sl,Sl)),this.namedValidators.IDENT=this.primitive(new Dl(4,Sl,Sl)),this.namedValidators.STRING=this.primitive(new Dl(2,Sl,Sl)),this.namedValidators.SLASH=this.primitive(new Dl(2048,Sl,Sl));var t={"font-family":_e("sans-serif")};this.systemFonts.caption=t,this.systemFonts.icon=t,this.systemFonts.menu=t,this.systemFonts["message-box"]=t,this.systemFonts["small-caption"]=t,this.systemFonts["status-bar"]=t},e.isBuiltIn=function(t){return!!t.match(/^[A-Z_0-9]+$/)},e.readNameAndPrefixes=function(t,e){var n=t.token();if(n.type==kn.EOF)return null;var i={"":!0};if(n.type==kn.O_BRK){do{if(t.consume(),(n=t.token()).type!=kn.IDENT)throw new Error("Prefix name expected");i[n.text]=!0,t.consume(),n=t.token()}while(n.type==kn.COMMA);if(n.type!=kn.C_BRK)throw new Error("']' expected");t.consume(),n=t.token()}if(n.type!=kn.IDENT)throw new Error("Property name expected");if(2==e?"SHORTHANDS"==n.text:"DEFAULTS"==n.text)return t.consume(),null;var r=n.text;if(t.consume(),2!=e){if(t.token().type!=kn.EQ)throw new Error("'=' expected");this.isBuiltIn(r)||(this.prefixes[r]=i)}else if(t.token().type!=kn.COLON)throw new Error("':' expected");return r},e.parseValidators=function(t){for(var e=this,n=function(){var n=e.readNameAndPrefixes(t,1);if(!n)return{v:void 0};for(var i=[],r=[],o="",a=void 0,s=!0,u=function(){if(0==i.length)throw new Error("No values");return 1==i.length?i[0]:e.newGroup(o,i)},l=function(t){if(s)throw new Error("'"+t+"': unexpected");if(o&&o!=t)throw new Error("mixed operators: '"+t+"' and '"+o+"'");o=t,s=!0},c=null;!c;){t.consume();var h=t.token();switch(h.type){case kn.IDENT:if(s||l(" "),e.isBuiltIn(h.text)){var f=e.namedValidators[h.text];if(!f)throw new Error("'"+h.text+"' unexpected");i.push(f.clone())}else{var d={};d[h.text.toLowerCase()]=_e(h.text),i.push(e.primitive(new Dl(0,d,Sl)))}s=!1;break;case kn.INT:var p={};p[""+h.num]=new Ve(h.num),i.push(e.primitive(new Dl(0,p,Sl))),s=!1;break;case kn.BAR:l("|");break;case kn.BAR_BAR:l("||");break;case kn.O_BRK:s||l(" "),r.push({vals:i,op:o,b:"["}),o="",i=[],s=!0;break;case kn.FUNC:s||l(" "),r.push({vals:i,op:o,b:"(",fn:h.text}),o="",i=[],s=!0;break;case kn.C_BRK:a=u();var g=r.pop();if("["!=g.b)throw new Error("']' unexpected");(i=g.vals).push(a),o=g.op,s=!1;break;case kn.C_PAR:a=u();var m=r.pop();if("("!=m.b)throw new Error("')' unexpected");(i=m.vals).push(e.newFunc(m.fn,a)),o=m.op,s=!1;break;case kn.COLON:if(s)throw new Error("':' unexpected");t.consume(),i.push(e.addReplacement(i.pop(),t.token()));break;case kn.QMARK:if(s)throw new Error("'?' unexpected");i.push(e.addCounts(i.pop(),0,1));break;case kn.STAR:if(s)throw new Error("'*' unexpected");i.push(e.addCounts(i.pop(),0,Number.POSITIVE_INFINITY));break;case kn.PLUS:if(s)throw new Error("'+' unexpected");i.push(e.addCounts(i.pop(),1,Number.POSITIVE_INFINITY));break;case kn.O_BRC:if(t.consume(),(h=t.token()).type!=kn.INT)throw new Error("<int> expected");var v=h.num,E=v;if(t.consume(),(h=t.token()).type==kn.COMMA){if(t.consume(),(h=t.token()).type!=kn.INT)throw new Error("<int> expected");E=h.num,t.consume(),h=t.token()}if(h.type!=kn.C_BRC)throw new Error("'}' expected");i.push(e.addCounts(i.pop(),v,E));break;case kn.SEMICOL:if(c=u(),r.length>0)throw new Error("unclosed '"+r.pop().b+"'");break;default:throw new Error("unexpected token")}}t.consume(),e.isBuiltIn(n)?e.namedValidators[n]=c:e.validators[n]=c.isSimple()?c.nodes[0].validator:new Al(c)};;){var i=n();if("object"==typeof i)return i.v}},e.parseDefaults=function(t){for(;;){var e=this.readNameAndPrefixes(t,2);if(!e)return;for(var n=[];;){t.consume();var i=t.token();if(i.type==kn.SEMICOL){t.consume();break}switch(i.type){case kn.IDENT:n.push(_e(i.text));break;case kn.NUM:n.push(new Ue(i.num));break;case kn.INT:n.push(new Ve(i.num));break;case kn.NUMERIC:n.push(new Me(i.num,i.text));break;default:throw new Error("unexpected token")}}this.defaultValues[e]=n.length>1?new We(n):n[0]}},e.parseShorthands=function(t){for(;;){var e=this.readNameAndPrefixes(t,3);if(!e)return;var n=t.nthToken(1),i=void 0;n.type==kn.IDENT&&_l[n.text]?(i=new _l[n.text],t.consume()):i=new Ll,i.setOwner(this);for(var r=!1,o=[],a=!1,s=[],u=[];!r;)switch(t.consume(),(n=t.token()).type){case kn.IDENT:if(this.validators[n.text])o.push(i.syntaxNodeForProperty(n.text)),u.push(n.text);else{if(!(this.shorthands[n.text]instanceof Bl))throw new Error("'"+n.text+"' is neither a simple property nor an inset shorthand");var l=this.shorthands[n.text];o.push(l.createSyntaxNode()),u.push.apply(u,l.propList)}break;case kn.SLASH:if(o.length>0||a)throw new Error("unexpected slash");a=!0;break;case kn.O_BRK:s.push({slash:a,syntax:o}),o=[],a=!1;break;case kn.C_BRK:var c=new Rl(o,a),h=s.pop();a=h.slash,(o=h.syntax).push(c);break;case kn.SEMICOL:r=!0,t.consume();break;default:throw new Error("unexpected token")}i.init(o,u),this.shorthands[e]=i}},e.parse=function(t){var e=new yi(t,null);this.parseValidators(e),this.parseDefaults(e),this.parseShorthands(e),this.backgroundProps=this.makePropSet(["background"]),this.layoutProps=this.makePropSet(["margin","border","padding","columns","column-gap","column-rule","column-fill"])},e.makePropSet=function(t){for(var e,n={},i=_(t);!(e=i()).done;)for(var r,o=e.value,a=this.shorthands[o],s=_(a?a.propList:[o]);!(r=s()).done;){var u=r.value,l=this.defaultValues[u];l?n[u]=l:f.warn("Unknown property in makePropSet:",u)}return n},e.validatePropertyAndHandleShorthand=function(t,e,n,i){var r="",o=t,a=(t=t.toLowerCase()).match(/^-([a-z]+)-([-a-z0-9]+)$/);a&&(r=a[1],t=a[2]);var s=this.prefixes[t];if(s&&s[r]){var u=this.validators[t];if(u){var l=e===Ye.inherit||e.isExpr()?e:e.visit(u);l?i.simpleProperty(t,l,n):i.invalidPropertyValue(o,e)}else{var c=this.shorthands[t].clone();e===Ye.inherit?c.propagateInherit(n,i):(e.visit(c),c.finish(n,i)||i.invalidPropertyValue(o,e))}}else i.unknownProperty(o,e)},t}();function Ul(){var t=new Ml;return t.initBuiltInValidators(),t.parse(Hi),t}var Vl={"font-style":Ye.normal,"font-variant":Ye.normal,"font-weight":Ye.normal},zl="OTTO"+(new Date).valueOf(),Hl=1;function Gl(t,e){var n={};for(var i in t)n[i]=Oo(t,i).evaluate(e,i);return function(t){for(var e in Vl)t[e]||(t[e]=Vl[e])}(n),n}var Wl=function(){function t(t){this.properties=t,this.blobURLs=[],this.blobs=[],this.fontTraitKey=function(t){var e=new rt;for(var n in Vl)e.append(" "),e.append(t[n].toString());return e.toString()}(this.properties),this.src=this.properties.src?this.properties.src.toString():null;var e=this.properties["font-family"];this.family=e?e.stringValue():null}var e=t.prototype;return e.traitsEqual=function(t){return this.fontTraitKey==t.fontTraitKey},e.makeAtRule=function(t,e){var n=new rt;for(var i in n.append("@font-face {\n  font-family: "),n.append(this.family),n.append(";\n  "),Vl)n.append(i),n.append(": "),this.properties[i].appendTo(n,!0),n.append(";\n  ");if(e){n.append('src: url("');var r=(window.URL||window.webkitURL).createObjectURL(e);n.append(r),this.blobURLs.push(r),this.blobs.push(e),n.append('")')}else n.append("src: "),n.append(t);return n.append(";\n}\n"),n.toString()},t}(),Xl=function(){function t(t){this.deobfuscator=t,this.familyMap={}}var e=t.prototype;return e.registerFamily=function(t,e){var n=t.family,i=this.familyMap[n],r=e.family;if(i){if(i!=r)throw new Error("E_FONT_FAMILY_INCONSISTENT "+t.family)}else this.familyMap[n]=r},e.filterFontFamily=function(t){if(t instanceof Xe){for(var e,n=[],i=_(t.values);!(e=i()).done;){var r=e.value,o=this.familyMap[r.stringValue()];o&&n.push(_e(o)),n.push(r)}return new Xe(n)}var a=this.familyMap[t.stringValue()];return a?new Xe([_e(a),t]):t},t}(),jl=function(){function t(t,e,n){this.head=t,this.body=e,this.srcURLMap={},this.familyCounter=0,this.familyPrefix=n||"Fnt_"}var e=t.prototype;return e.getViewFontFamily=function(t,e){var n=t.family,i=e.familyMap[n];return i||(i=this.familyPrefix+ ++this.familyCounter,e.familyMap[n]=i,i)},e.initFont=function(t,e,n){var i=this,r=Ni("initFont"),o=t.src,a={};for(var s in Vl)a[s]=t.properties[s];var u=this.getViewFontFamily(t,n);a["font-family"]=_e(u);var l=new Wl(a),c=this.body.ownerDocument.createElement("span");c.textContent="M";var h=(new Date).valueOf()+1e3,d=this.head.ownerDocument.createElement("style"),p=zl+Hl++;d.textContent=l.makeAtRule("",Ki([p])),this.head.appendChild(d);var g=this.body.ownerDocument.createElement("span");for(var m in g.style.width="0",g.style.height="0",g.style.overflow="hidden",g.appendChild(c),this.body.appendChild(g),c.style.visibility="hidden",c.style.fontFamily=u,Vl)et(c,m,a[m].toString());var v=c.getBoundingClientRect(),E=v.right-v.left,b=v.bottom-v.top;d.textContent=l.makeAtRule(o,e),f.info("Starting to load font:",o);var C=!1;return r.loop((function(){var t=c.getBoundingClientRect();return E!=t.right-t.left||b!=t.bottom-t.top?(C=!0,Ti(!1)):(new Date).valueOf()>h?Ti(!1):r.sleep(10)})).then((function(){C?f.info("Loaded font:",o):f.warn("Failed to load font:",o),i.body.removeChild(g),r.finish(l)})),r.result()},e.loadFont=function(t,e){var n=this,i=t.src,r=this.srcURLMap[i];return r?r.piggyback((function(n){var r=n;r.traitsEqual(t)?(e.registerFamily(t,r),f.warn("Found already-loaded font:",i)):f.warn("E_FONT_FACE_INCOMPATIBLE",t.src)})):(r=new Bi((function(){var r=Ni("loadFont"),o=e.deobfuscator?e.deobfuscator(i):null;return o?ji(i,Ui.BLOB).then((function(i){i.responseBlob?o(i.responseBlob).then((function(i){n.initFont(t,i,e).thenFinish(r)})):r.finish(null)})):n.initFont(t,null,e).thenFinish(r),r.result()}),"loadFont "+i),this.srcURLMap[i]=r,r.start()),r},e.findOrLoadFonts=function(t,e){for(var n,i=[],r=_(t);!(n=r()).done;){var o=n.value;o.src&&o.family?i.push(this.loadFont(o,e)):f.warn("E_FONT_FACE_INVALID")}return _i(i)},t}(),Kl=1,$l=function(){function t(t,e,n,i,r){this.name=e,this.pseudoName=n,this.classes=i,this.parent=r,this.specified={},this.children=[],this.pageMaster=null,this.index=0,this._scope=t,this.key="p"+Kl++,r&&(this.index=r.children.length,r.children.push(this))}var e=t.prototype;return e.createInstance=function(t){throw new Error("E_UNEXPECTED_CALL")},e.clone=function(t){throw new Error("E_UNEXPECTED_CALL")},e.copySpecified=function(t){var e=this.specified,n=t.specified;for(var i in e)Object.prototype.hasOwnProperty.call(e,i)&&(n[i]=e[i])},e.cloneChildren=function(t){for(var e=0;e<this.children.length;e++)this.children[e].clone({parent:t})},x(t,[{key:"scope",get:function(){return this._scope}}]),t}(),ql=function(t){function e(e){var n;return(n=t.call(this,e,null,null,[],null)||this).specified.width=new No(Qe,0),n.specified.height=new No(Je,0),n}return I(e,t),e}($l),Yl=function(t){function e(e,n){var i;(i=t.call(this,e,(function(t,e){var n=t.match(/^([^.]+)\.([^.]+)$/);if(n){var i=r.pageMaster.keyMap[n[1]];if(i){var o=this.lookupInstance(i);if(o)return e?o.resolveFunc(n[2]):o.resolveName(n[2])}}return null}))||this).pageMaster=n;var r=L(i);return i}return I(e,t),e}(Vt),Zl=function(t){function e(e,n,i,r,o,a,s){var u;return(u=t.call(this,e,n,i,r,o)||this).condition=a,u.specificity=s,u.keyMap={},e instanceof Yl||(u._scope=new Yl(e,L(u))),u.pageMaster=L(u),u.specified.width=new No(Qe,0),u.specified.height=new No(Je,0),u.specified["wrap-flow"]=new No(Ye.auto,0),u.specified.position=new No(Ye.relative,0),u.specified.overflow=new No(Ye.visible,0),u}I(e,t);var n=e.prototype;return n.createInstance=function(t){return new dc(t,this)},n.clone=function(t){var n=new e(this.scope,this.name,t.pseudoName||this.pseudoName,this.classes,this.parent,this.condition,this.specificity);return this.copySpecified(n),this.cloneChildren(n),n},n.resetScope=function(){this.scope.pageMaster=this},e}($l),Ql=function(t){function e(e,n,i,r,o){var a;return(a=t.call(this,e,n,i,r,o)||this).pageMaster=o.pageMaster,n&&(a.pageMaster.keyMap[n]=a.key),a.specified["wrap-flow"]=new No(Ye.auto,0),a}I(e,t);var n=e.prototype;return n.createInstance=function(t){return new pc(t,this)},n.clone=function(t){var n=new e(t.parent.scope,this.name,this.pseudoName,this.classes,t.parent);return this.copySpecified(n),this.cloneChildren(n),n},e}($l),Jl=function(t){function e(e,n,i,r,o){var a;return(a=t.call(this,e,n,i,r,o)||this).pageMaster=o.pageMaster,n&&(a.pageMaster.keyMap[n]=a.key),a}I(e,t);var n=e.prototype;return n.createInstance=function(t){return new gc(t,this)},n.clone=function(t){var n=new e(t.parent.scope,this.name,this.pseudoName,this.classes,t.parent);return this.copySpecified(n),this.cloneChildren(n),n},e}($l);function tc(t,e,n){return e&&e!==Ye.auto?e.toExpr(t,n):null}function ec(t,e,n){return e&&e!==Ye.auto?e.toExpr(t,n):t.zero}function nc(t,e,n){return e?e===Ye.auto?null:e.toExpr(t,n):t.zero}function ic(t,e,n,i){return e&&n!==Ye.none?e.toExpr(t,i):t.zero}function rc(t,e,n){return e?e===Ye._true?t._true:e===Ye._false?t._false:e.toExpr(t,t.zero):n}var oc=function(){function t(t,e){this.parentInstance=t,this.pageBox=e,this.cascaded={},this.style={},this.autoWidth=null,this.autoHeight=null,this.children=[],this.isAutoWidth=!1,this.isAutoHeight=!1,this.isTopDependentOnAutoHeight=!1,this.isRightDependentOnAutoWidth=!1,this.calculatedWidth=0,this.calculatedHeight=0,this.pageMasterInstance=null,this.namedValues={},this.namedFuncs={},this.vertical=!1,this.rtl=!1,this.suppressEmptyBoxGeneration=!1,t&&t.children.push(this)}var e=t.prototype;return e.reset=function(){this.calculatedWidth=0,this.calculatedHeight=0},e.addNamedValues=function(t,e){var n=this.resolveName(t),i=this.resolveName(e);if(!n||!i)throw new Error("E_INTERNAL");return Ne(this.pageBox.scope,n,i)},e.resolveName=function(t){var e=this.namedValues[t];if(e)return e;var n=this.style[t];switch(n&&(e=n.toExpr(this.pageBox.scope,this.pageBox.scope.zero)),t){case"margin-left-edge":e=this.resolveName("left");break;case"margin-top-edge":e=this.resolveName("top");break;case"margin-right-edge":e=this.addNamedValues("border-right-edge","margin-right");break;case"margin-bottom-edge":e=this.addNamedValues("border-bottom-edge","margin-bottom");break;case"border-left-edge":e=this.addNamedValues("margin-left-edge","margin-left");break;case"border-top-edge":e=this.addNamedValues("margin-top-edge","margin-top");break;case"border-right-edge":e=this.addNamedValues("padding-right-edge","border-right-width");break;case"border-bottom-edge":e=this.addNamedValues("padding-bottom-edge","border-bottom-width");break;case"padding-left-edge":e=this.addNamedValues("border-left-edge","border-left-width");break;case"padding-top-edge":e=this.addNamedValues("border-top-edge","border-top-width");break;case"padding-right-edge":e=this.addNamedValues("right-edge","padding-right");break;case"padding-bottom-edge":e=this.addNamedValues("bottom-edge","padding-bottom");break;case"left-edge":e=this.addNamedValues("padding-left-edge","padding-left");break;case"top-edge":e=this.addNamedValues("padding-top-edge","padding-top");break;case"right-edge":e=this.addNamedValues("left-edge","width");break;case"bottom-edge":e=this.addNamedValues("top-edge","height")}if(!e){var i;if("extent"==t)i=this.vertical?"width":"height";else if("measure"==t)i=this.vertical?"height":"width";else{var r=this.vertical?yo:wo;for(var o in i=t,r)i=i.replace(o,r[o])}i!=t&&(e=this.resolveName(i))}return e&&(this.namedValues[t]=e),e},e.resolveFunc=function(t){var e=this.namedFuncs[t];if(e)return e;switch(t){case"columns":var n=this.pageBox.scope,i=new De(n,0),r=this.resolveName("column-count"),o=this.resolveName("column-width"),a=this.resolveName("column-gap");e=Te(n,Ae(n,new be(n,"min",[i,r]),Ne(n,o,a)),a)}return e&&(this.namedFuncs[t]=e),e},e.initEnabled=function(){var t=this.pageBox.scope,e=this.style,n=rc(t,e.enabled,t._true),i=tc(t,e.page,t.zero);if(i){var r=new me(t,"page-number");n=Se(t,n,new ue(t,i,r))}var o=tc(t,e["min-page-width"],t.zero);o&&(n=Se(t,n,new se(t,new me(t,"page-width"),o)));var a=tc(t,e["min-page-height"],t.zero);a&&(n=Se(t,n,new se(t,new me(t,"page-height"),a))),n=this.boxSpecificEnabled(n),e.enabled=new Ke(n)},e.boxSpecificEnabled=function(t){return t},e.initHorizontal=function(){var t=this.pageBox.scope,e=this.style,n=this.parentInstance?this.parentInstance.style.width.toExpr(t,null):null,i=tc(t,e.left,n),r=tc(t,e["margin-left"],n),o=ic(t,e["border-left-width"],e["border-left-style"],n),a=ec(t,e["padding-left"],n),s=tc(t,e.width,n),u=tc(t,e["max-width"],n),l=ec(t,e["padding-right"],n),c=ic(t,e["border-right-width"],e["border-right-style"],n),h=tc(t,e["margin-right"],n),f=tc(t,e.right,n),d=Ne(t,o,a),p=Ne(t,o,l);if(i&&f&&s){var g=Te(t,n,Ne(t,s,Ne(t,Ne(t,i,d),p)));r?h?f=Te(t,g,h):h=Te(t,g,Ne(t,f,r)):(g=Te(t,g,f),h?r=Te(t,g,h):h=r=Ae(t,g,new ye(t,.5)))}else{r||(r=t.zero),h||(h=t.zero),i||f||s||(i=t.zero),i||s?i||f?s||f||(s=this.autoWidth,this.isAutoWidth=!0):i=t.zero:(s=this.autoWidth,this.isAutoWidth=!0);var m=Te(t,n,Ne(t,Ne(t,r,d),Ne(t,h,p)));this.isAutoWidth&&(u||(u=Te(t,m,i||f)),this.vertical||!tc(t,e["column-width"],null)&&!tc(t,e["column-count"],null)||(s=u,this.isAutoWidth=!1)),i?s?f||(f=Te(t,m,Ne(t,i,s))):s=Te(t,m,Ne(t,i,f)):i=Te(t,m,Ne(t,f,s))}var v=ec(t,e["snap-width"]||(this.parentInstance?this.parentInstance.style["snap-width"]:null),n);e.left=new Ke(i),e["margin-left"]=new Ke(r),e["border-left-width"]=new Ke(o),e["padding-left"]=new Ke(a),e.width=new Ke(s),e["max-width"]=new Ke(u||s),e["padding-right"]=new Ke(l),e["border-right-width"]=new Ke(c),e["margin-right"]=new Ke(h),e.right=new Ke(f),e["snap-width"]=new Ke(v)},e.initVertical=function(){var t=this.pageBox.scope,e=this.style,n=this.parentInstance?this.parentInstance.style.width.toExpr(t,null):null,i=this.parentInstance?this.parentInstance.style.height.toExpr(t,null):null,r=tc(t,e.top,i),o=tc(t,e["margin-top"],n),a=ic(t,e["border-top-width"],e["border-top-style"],n),s=ec(t,e["padding-top"],n),u=tc(t,e.height,i),l=tc(t,e["max-height"],i),c=ec(t,e["padding-bottom"],n),h=ic(t,e["border-bottom-width"],e["border-bottom-style"],n),f=tc(t,e["margin-bottom"],n),d=tc(t,e.bottom,i),p=Ne(t,a,s),g=Ne(t,h,c);if(r&&d&&u){var m=Te(t,i,Ne(t,u,Ne(t,Ne(t,r,p),g)));o?f?d=Te(t,m,o):f=Te(t,m,Ne(t,d,o)):(m=Te(t,m,d),f?o=Te(t,m,f):f=o=Ae(t,m,new ye(t,.5)))}else{o||(o=t.zero),f||(f=t.zero),r||d||u||(r=t.zero),r||u?r||d?u||d||(u=this.autoHeight,this.isAutoHeight=!0):r=t.zero:(u=this.autoHeight,this.isAutoHeight=!0);var v=Te(t,i,Ne(t,Ne(t,o,p),Ne(t,f,g)));this.isAutoHeight&&(l||(l=Te(t,v,r||d)),this.vertical&&(tc(t,e["column-width"],null)||tc(t,e["column-count"],null))&&(u=l,this.isAutoHeight=!1)),r?u?d||(d=Te(t,v,Ne(t,r,u))):u=Te(t,v,Ne(t,d,r)):r=Te(t,v,Ne(t,d,u))}var E=ec(t,e["snap-height"]||(this.parentInstance?this.parentInstance.style["snap-height"]:null),n);e.top=new Ke(r),e["margin-top"]=new Ke(o),e["border-top-width"]=new Ke(a),e["padding-top"]=new Ke(s),e.height=new Ke(u),e["max-height"]=new Ke(l||u),e["padding-bottom"]=new Ke(c),e["border-bottom-width"]=new Ke(h),e["margin-bottom"]=new Ke(f),e.bottom=new Ke(d),e["snap-height"]=new Ke(E)},e.initColumns=function(){var t=this.pageBox.scope,e=this.style,n=tc(t,e[this.vertical?"height":"width"],null),i=tc(t,e["column-width"],n),r=tc(t,e["column-count"],null),o=function(t,e,n){return e&&e!==Ye.normal?e.toExpr(t,null):null}(t,e["column-gap"]);o||(o=new ge(t,1,"em")),i&&!r&&(r=new be(t,"floor",[xe(t,Ne(t,n,o),Ne(t,i,o))]),r=new be(t,"max",[t.one,r])),r||(r=t.one),i=Te(t,xe(t,Ne(t,n,o),r),o),e["column-width"]=new Ke(i),e["column-count"]=new Ke(r),e["column-gap"]=new Ke(o)},e.depends=function(t,e,n){return this.style[t].toExpr(this.pageBox.scope,null).depend(e,n)},e.init=function(t){var e=this;t.registerInstance(this.pageBox.key,this);var n=this.pageBox.scope,i=this.style,r=this.parentInstance?this.parentInstance.getActiveRegions(t):null,o=Qa(this.cascaded,t,r,!1);this.vertical=Ya(o,t,!!this.parentInstance&&this.parentInstance.vertical),this.rtl=Za(o,t,!!this.parentInstance&&this.parentInstance.rtl),es(o,i,this.vertical,this.rtl,(function(t,e){return e.value})),this.autoWidth=new Ee(n,(function(){return e.calculatedWidth}),"autoWidth"),this.autoHeight=new Ee(n,(function(){return e.calculatedHeight}),"autoHeight"),this.initHorizontal(),this.initVertical(),this.initColumns(),this.initEnabled()},e.getProp=function(t,e){var n=this.style[e];return n&&(n=Sr(t,n,e)),n},e.getPropAsNumber=function(t,e){var n=this.style[e];return n&&(n=Sr(t,n,e)),$e(n,t)},e.getSpecial=function(t,e){var n=_o(this.cascaded,e);if(n){for(var i=[],r=0;r<n.length;r++){var o=n[r].evaluate(t,"");o&&o!==Oe&&i.push(o)}if(i.length)return i}return null},e.getActiveRegions=function(t){var e=this.getSpecial(t,"region-id");if(e){for(var n=[],i=0;i<e.length;i++)n[i]=e[i].toString();return n}return null},e.propagateProperty=function(t,e,n,i){this.propagatePropertyToElement(t,e.element,n,i)},e.propagatePropertyToElement=function(t,e,n,i){var r=this.getProp(t,n);r&&(r.isNumeric()&&Gt(r.unit)&&(r=qe(r,t)),"font-family"===n&&(r=i.filterFontFamily(r)),et(e,n,r.toString()))},e.propagateDelayedProperty=function(t,e,n,i){var r=this.getProp(t,n);r&&i.push(new Vr(e.element,n,r))},e.assignLeftPosition=function(t,e){var n=this.getPropAsNumber(t,"left"),i=this.getPropAsNumber(t,"margin-left"),r=this.getPropAsNumber(t,"padding-left"),o=this.getPropAsNumber(t,"border-left-width"),a=this.getPropAsNumber(t,"width");e.setHorizontalPosition(n,a),et(e.element,"margin-left",i+"px"),et(e.element,"padding-left",r+"px"),et(e.element,"border-left-width",o+"px"),e.marginLeft=i,e.borderLeft=o,e.paddingLeft=r},e.assignRightPosition=function(t,e){var n=this.getPropAsNumber(t,"right"),i=this.getPropAsNumber(t,"snap-height"),r=this.getPropAsNumber(t,"margin-right"),o=this.getPropAsNumber(t,"padding-right"),a=this.getPropAsNumber(t,"border-right-width");if(et(e.element,"margin-right",r+"px"),et(e.element,"padding-right",o+"px"),et(e.element,"border-right-width",a+"px"),e.marginRight=r,e.borderRight=a,this.vertical&&i>0){var s=n+e.getInsetRight(),u=s-Math.floor(s/i)*i;u>0&&(e.snapOffsetX=i-u,o+=e.snapOffsetX)}e.paddingRight=o,e.snapWidth=i},e.assignTopPosition=function(t,e){var n=this.getPropAsNumber(t,"snap-height"),i=this.getPropAsNumber(t,"top"),r=this.getPropAsNumber(t,"margin-top"),o=this.getPropAsNumber(t,"padding-top"),a=this.getPropAsNumber(t,"border-top-width");if(e.top=i,e.marginTop=r,e.borderTop=a,e.snapHeight=n,!this.vertical&&n>0){var s=i+e.getInsetTop(),u=s-Math.floor(s/n)*n;u>0&&(e.snapOffsetY=n-u,o+=e.snapOffsetY)}e.paddingTop=o,et(e.element,"top",i+"px"),et(e.element,"margin-top",r+"px"),et(e.element,"padding-top",o+"px"),et(e.element,"border-top-width",a+"px")},e.assignBottomPosition=function(t,e){var n=this.getPropAsNumber(t,"margin-bottom"),i=this.getPropAsNumber(t,"padding-bottom"),r=this.getPropAsNumber(t,"border-bottom-width"),o=this.getPropAsNumber(t,"height")-e.snapOffsetY;et(e.element,"height",o+"px"),et(e.element,"margin-bottom",n+"px"),et(e.element,"padding-bottom",i+"px"),et(e.element,"border-bottom-width",r+"px"),e.height=o-e.snapOffsetY,e.marginBottom=n,e.borderBottom=r,e.paddingBottom=i},e.assignBeforePosition=function(t,e){this.vertical?this.assignRightPosition(t,e):this.assignTopPosition(t,e)},e.assignAfterPosition=function(t,e){this.vertical?this.assignLeftPosition(t,e):this.assignBottomPosition(t,e)},e.assignStartEndPosition=function(t,e){this.vertical?(this.assignTopPosition(t,e),this.assignBottomPosition(t,e)):(this.assignRightPosition(t,e),this.assignLeftPosition(t,e))},e.sizeWithMaxHeight=function(t,e){et(e.element,"border-top-width","0px");var n=this.getPropAsNumber(t,"max-height");this.isTopDependentOnAutoHeight?e.setVerticalPosition(0,n):(this.assignTopPosition(t,e),e.height=n-=e.snapOffsetY,et(e.element,"height",n+"px"))},e.sizeWithMaxWidth=function(t,e){et(e.element,"border-left-width","0px");var n=this.getPropAsNumber(t,"max-width");if(this.isRightDependentOnAutoWidth)e.setHorizontalPosition(0,n);else{this.assignRightPosition(t,e),e.width=n-=e.snapOffsetX;var i=this.getPropAsNumber(t,"right");et(e.element,"right",i+"px"),et(e.element,"width",n+"px")}},e.prepareContainer=function(t,e,n,i,r){this.parentInstance&&this.vertical==this.parentInstance.vertical||et(e.element,"writing-mode",this.vertical?"vertical-rl":"horizontal-tb"),(this.vertical?this.isAutoWidth:this.isAutoHeight)?this.vertical?this.sizeWithMaxWidth(t,e):this.sizeWithMaxHeight(t,e):(this.assignBeforePosition(t,e),this.assignAfterPosition(t,e)),(this.vertical?this.isAutoHeight:this.isAutoWidth)?this.vertical?this.sizeWithMaxHeight(t,e):this.sizeWithMaxWidth(t,e):this.assignStartEndPosition(t,e);for(var o=0;o<ac.length;o++)this.propagateProperty(t,e,ac[o],i)},e.transferContentProps=function(t,e,n,i){for(var r=0;r<uc.length;r++)this.propagateProperty(t,e,uc[r],i)},e.transferSinglUriContentProps=function(t,e,n){for(var i=0;i<lc.length;i++)this.propagatePropertyToElement(t,e,lc[i],n)},e.finishContainer=function(t,e,n,i,r,o,a){this.vertical?this.calculatedWidth=e.computedBlockSize+e.snapOffsetX:this.calculatedHeight=e.computedBlockSize+e.snapOffsetY;var s=(this.vertical||!i)&&this.isAutoHeight,u=(!this.vertical||!i)&&this.isAutoWidth,l=null;if((u||s)&&(u&&et(e.element,"width","auto"),s&&et(e.element,"height","auto"),l=o.getElementClientRect(i?i.element:e.element),u&&(this.calculatedWidth=Math.ceil(l.right-l.left-e.paddingLeft-e.borderLeft-e.paddingRight-e.borderRight),this.vertical&&(this.calculatedWidth+=e.snapOffsetX)),s&&(this.calculatedHeight=l.bottom-l.top-e.paddingTop-e.borderTop-e.paddingBottom-e.borderBottom,this.vertical||(this.calculatedHeight+=e.snapOffsetY))),(this.vertical?this.isAutoHeight:this.isAutoWidth)&&this.assignStartEndPosition(t,e),(this.vertical?this.isAutoWidth:this.isAutoHeight)&&((this.vertical?this.isRightDependentOnAutoWidth:this.isTopDependentOnAutoHeight)&&this.assignBeforePosition(t,e),this.assignAfterPosition(t,e)),r>1){var c=this.getPropAsNumber(t,"column-rule-width"),h=this.getProp(t,"column-rule-style"),f=this.getProp(t,"column-rule-color");if(c>0&&h&&h!=Ye.none&&f!=Ye.transparent)for(var d=this.getPropAsNumber(t,"column-gap"),p=this.vertical?e.height:e.width,g=this.vertical?"border-top":"border-left",m=1;m<r;m++){var v=(p+d)*m/r-d/2+e.paddingLeft-c/2,E=e.height+e.paddingTop+e.paddingBottom,b=e.element.ownerDocument.createElement("div");et(b,"position","absolute"),et(b,this.vertical?"left":"top","0px"),et(b,this.vertical?"top":"left",v+"px"),et(b,this.vertical?"height":"width","0px"),et(b,this.vertical?"width":"height",E+"px"),et(b,g,c+"px "+h.toString()+(f?" "+f.toString():"")),e.element.insertBefore(b,e.element.firstChild)}}for(var C=0;C<sc.length;C++)this.propagateProperty(t,e,sc[C],a);for(var y=0;y<cc.length;y++)this.propagateDelayedProperty(t,e,cc[y],n.delayedItems)},e.applyCascadeAndInit=function(t,e){var n=this.cascaded,i=this.pageBox.specified;for(var r in i)Fo(r)&&Ro(n,r,Oo(i,r));if(this.pageBox.pseudoName==hc)for(var o in e)(o.match(/^background-/)||"writing-mode"==o)&&(n[o]=e[o]);if("layout-host"==this.pageBox.pseudoName)for(var a in e)a.match(/^background-/)||"writing-mode"==a||(n[a]=e[a]);t.pushRule(this.pageBox.classes,null,n),n.content&&(n.content=n.content.filterValue(new Ia(t,null,t.counterResolver))),this.init(t.context);for(var s,u=_(this.pageBox.children);!(s=u()).done;)s.value.createInstance(this).applyCascadeAndInit(t,e);t.popRule()},e.resolveAutoSizing=function(t){this.isAutoWidth&&(this.isRightDependentOnAutoWidth=this.depends("right",this.autoWidth,t)||this.depends("margin-right",this.autoWidth,t)||this.depends("border-right-width",this.autoWidth,t)||this.depends("padding-right",this.autoWidth,t)),this.isAutoHeight&&(this.isTopDependentOnAutoHeight=this.depends("top",this.autoHeight,t)||this.depends("margin-top",this.autoHeight,t)||this.depends("border-top-width",this.autoHeight,t)||this.depends("padding-top",this.autoHeight,t));for(var e,n=_(this.children);!(e=n()).done;)e.value.resolveAutoSizing(t)},t}(),ac=["border-left-style","border-right-style","border-top-style","border-bottom-style","border-left-color","border-right-color","border-top-color","border-bottom-color","outline-style","outline-color","outline-width","overflow","visibility"],sc=["border-top-left-radius","border-top-right-radius","border-bottom-right-radius","border-bottom-left-radius","border-image-source","border-image-slice","border-image-width","border-image-outset","border-image-repeat","background-attachment","background-color","background-image","background-repeat","background-position","background-clip","background-origin","background-size","opacity","z-index","background-blend-mode","isolation","mix-blend-mode","filter"],uc=["color","font-family","font-size","font-style","font-weight","font-variant","line-height","letter-spacing","text-align","text-decoration","text-indent","text-transform","white-space","word-spacing","font-feature-settings","font-kerning","font-size-adjust","font-variant-east-asian","font-stretch","text-decoration-color","text-decoration-line","text-decoration-skip","text-decoration-style","text-emphasis","text-emphasis-color","text-emphasis-position","text-emphasis-style","text-shadow","text-underline-position"],lc=["width","height","image-resolution","object-fit","object-position"],cc=["transform","transform-origin"],hc="background-host",fc=function(t){function e(e){return t.call(this,null,e)||this}return I(e,t),e.prototype.applyCascadeAndInit=function(e,n){t.prototype.applyCascadeAndInit.call(this,e,n),this.children.sort((function(t,e){return e.pageBox.specificity-t.pageBox.specificity||t.pageBox.index-e.pageBox.index}))},e}(oc),dc=function(t){function e(e,n){var i;return(i=t.call(this,e,n)||this).pageMasterInstance=L(i),i}I(e,t);var n=e.prototype;return n.boxSpecificEnabled=function(t){var e=this.pageBox.pageMaster;return e.condition&&(t=Se(e.scope,t,e.condition)),t},n.adjustPageLayout=function(t,e,n){},e}(oc),pc=function(t){function e(e,n){var i;return(i=t.call(this,e,n)||this).pageMasterInstance=e.pageMasterInstance,i}return I(e,t),e}(oc),gc=function(t){function e(e,n){var i;return(i=t.call(this,e,n)||this).pageMasterInstance=e.pageMasterInstance,i}I(e,t);var n=e.prototype;return n.processPartitionList=function(t,e,n){var i=null;if(e instanceof Be&&(i=[e]),e instanceof Xe&&(i=e.values),i)for(var r=this.pageBox.scope,o=0;o<i.length;o++)if(i[o]instanceof Be){var a=Mt(i[o].name,"enabled"),s=new me(r,a);n&&(s=new Qt(r,s)),t=Se(r,t,s)}return t},n.boxSpecificEnabled=function(t){var e=this.pageBox.scope,n=this.style,i=rc(e,n.required,e._false)!==e._false;if(i||this.isAutoHeight){var r=function(t,e,n){return e?e.toExpr(t,t.zero):new ye(t,"body")}(e,n["flow-from"]);t=Se(e,t,new be(e,"has-content",[r]))}if(t=this.processPartitionList(t,n["required-partitions"],!1),t=this.processPartitionList(t,n["conflicting-partitions"],!0),i){var o=this.pageMasterInstance.style.enabled,a=o?o.toExpr(e,null):e._true;a=Se(e,a,t),this.pageMasterInstance.style.enabled=new Ke(a)}return t},n.prepareContainer=function(e,n,i,r,o){et(n.element,"overflow","hidden"),t.prototype.prepareContainer.call(this,e,n,i,r,o)},e}(oc),mc=function(t){function e(e,n,i,r){var o;return(o=t.call(this,e,n,!1)||this).target=i,o.validatorSet=r,o}I(e,t);var n=e.prototype;return n.property=function(t,e,n){this.validatorSet.validatePropertyAndHandleShorthand(t,e,n,this)},n.unknownProperty=function(t,e){this.report("E_INVALID_PROPERTY "+t+": "+e.toString())},n.invalidPropertyValue=function(t,e){this.report("E_INVALID_PROPERTY_VALUE "+t+": "+e.toString())},n.simpleProperty=function(t,e,n){this.target.specified[t]=new No(e,n?50331648:67108864)},e}(nr),vc=function(t){function e(e,n,i,r){return t.call(this,e,n,i,r)||this}return I(e,t),e}(mc),Ec=function(t){function e(e,n,i,r){var o;return o=t.call(this,e,n,i,r)||this,i.specified.width=new No(Ze,0),i.specified.height=new No(Ze,0),o}I(e,t);var n=e.prototype;return n.startPartitionRule=function(t,e,n){var i=new Jl(this.scope,t,e,n,this.target),r=new vc(this.scope,this.owner,i,this.validatorSet);this.owner.pushHandler(r)},n.startPartitionGroupRule=function(t,n,i){var r=new Ql(this.scope,t,n,i,this.target),o=new e(this.scope,this.owner,r,this.validatorSet);this.owner.pushHandler(o)},e}(mc),bc=function(t){function e(e,n,i,r){return t.call(this,e,n,i,r)||this}I(e,t);var n=e.prototype;return n.startPartitionRule=function(t,e,n){var i=new Jl(this.scope,t,e,n,this.target),r=new vc(this.scope,this.owner,i,this.validatorSet);this.owner.pushHandler(r)},n.startPartitionGroupRule=function(t,e,n){var i=new Ql(this.scope,t,e,n,this.target),r=new Ec(this.scope,this.owner,i,this.validatorSet);this.owner.pushHandler(r)},e}(mc);function Cc(t){var n=t["writing-mode"],i=t.direction;return i=i&&i.value,(n=n&&n.value)===Ye.vertical_lr||n!==Ye.vertical_rl&&i!==Ye.rtl?e.PageProgression.LTR:e.PageProgression.RTL}var yc,wc,Dc={a5:{width:new Me(148,"mm"),height:new Me(210,"mm")},a4:{width:new Me(210,"mm"),height:new Me(297,"mm")},a3:{width:new Me(297,"mm"),height:new Me(420,"mm")},b5:{width:new Me(176,"mm"),height:new Me(250,"mm")},b4:{width:new Me(250,"mm"),height:new Me(353,"mm")},"jis-b5":{width:new Me(182,"mm"),height:new Me(257,"mm")},"jis-b4":{width:new Me(257,"mm"),height:new Me(364,"mm")},letter:{width:new Me(8.5,"in"),height:new Me(11,"in")},legal:{width:new Me(8.5,"in"),height:new Me(14,"in")},ledger:{width:new Me(11,"in"),height:new Me(17,"in")}},Sc=new Me(.24,"pt"),Nc=new Me(3,"mm"),Tc=new Me(10,"mm"),Ac=new Me(13,"mm");function xc(t){var e={width:Qe,height:Je,bleed:tn,bleedOffset:tn},n=t.size;if(n&&n.value!==Ye.auto){var i,r,o=n.value;if(o.isSpaceList()?(i=o.values[0],r=o.values[1]):(i=o,r=null),i.isNumeric())e.width=i,e.height=r||i;else{var a=i.name&&Dc[i.name.toLowerCase()];a&&(r&&r===Ye.landscape?(e.width=a.height,e.height=a.width):(e.width=a.width,e.height=a.height))}}var s=t.marks;s&&s.value!==Ye.none&&(e.bleedOffset=Ac);var u=t.bleed;return u&&u.value!==Ye.auto?u.value&&u.value.isNumeric()&&(e.bleed=u.value):s&&(s.value.isSpaceList()?s.value.values.some((function(t){return t===Ye.crop})):s.value===Ye.crop)&&(e.bleed=new Me(6,"pt")),e}function Ic(t,e){var n={},i=t.bleed.num*e.queryUnitSize(t.bleed.unit,!1),r=t.bleedOffset.num*e.queryUnitSize(t.bleedOffset.unit,!1),o=i+r,a=t.width;n.pageWidth=a===Qe?e.pref.defaultPaperSize?e.pref.defaultPaperSize.width*e.queryUnitSize("px",!1):(e.pref.spreadView?Math.floor(e.viewportWidth/2)-e.pref.pageBorder:e.viewportWidth)-2*o:a.num*e.queryUnitSize(a.unit,!1);var s=t.height;return n.pageHeight=s===Je?e.pref.defaultPaperSize?e.pref.defaultPaperSize.height*e.queryUnitSize("px",!1):e.viewportHeight-2*o:s.num*e.queryUnitSize(s.unit,!1),n.bleed=i,n.bleedOffset=r,n.cropOffset=o,n}function Fc(t,e,n){var i=t.createElementNS(W.SVG,"svg");return i.setAttribute("width",e),i.setAttribute("height",n),i.style.position="absolute",i}function Pc(t,e,n){var i=t.createElementNS(W.SVG,n=n||"polyline");return i.setAttribute("stroke","black"),i.setAttribute("stroke-width",e),i.setAttribute("fill","none"),i}!function(t){t.TOP_LEFT="top left",t.TOP_RIGHT="top right",t.BOTTOM_LEFT="bottom left",t.BOTTOM_RIGHT="bottom right"}(yc||(yc={})),function(t){t.TOP="top",t.BOTTOM="bottom",t.LEFT="left",t.RIGHT="right"}(wc||(wc={}));var Oc,Rc,kc=(Oc={width:!0,height:!0,"block-size":!0,"inline-size":!0,margin:!0,padding:!0,border:!0,outline:!0,"outline-width":!0,"outline-style":!0,"outline-color":!0},["left","right","top","bottom","before","after","start","end","block-start","block-end","inline-start","inline-end"].forEach((function(t){Oc["margin-"+t]=!0,Oc["padding-"+t]=!0,Oc["border-"+t+"-width"]=!0,Oc["border-"+t+"-style"]=!0,Oc["border-"+t+"-color"]=!0})),Oc);!function(t){t.START="start",t.CENTER="center",t.END="end"}(Rc||(Rc={}));var Lc,Bc={"top-left-corner":{order:1,isInTopRow:!0,isInBottomRow:!1,isInLeftColumn:!0,isInRightColumn:!0,positionAlongVariableDimension:null},"top-left":{order:2,isInTopRow:!0,isInBottomRow:!1,isInLeftColumn:!1,isInRightColumn:!1,positionAlongVariableDimension:Rc.START},"top-center":{order:3,isInTopRow:!0,isInBottomRow:!1,isInLeftColumn:!1,isInRightColumn:!1,positionAlongVariableDimension:Rc.CENTER},"top-right":{order:4,isInTopRow:!0,isInBottomRow:!1,isInLeftColumn:!1,isInRightColumn:!1,positionAlongVariableDimension:Rc.END},"top-right-corner":{order:5,isInTopRow:!0,isInBottomRow:!1,isInLeftColumn:!1,isInRightColumn:!0,positionAlongVariableDimension:null},"right-top":{order:6,isInTopRow:!1,isInBottomRow:!1,isInLeftColumn:!1,isInRightColumn:!0,positionAlongVariableDimension:Rc.START},"right-middle":{order:7,isInTopRow:!1,isInBottomRow:!1,isInLeftColumn:!1,isInRightColumn:!0,positionAlongVariableDimension:Rc.CENTER},"right-bottom":{order:8,isInTopRow:!1,isInBottomRow:!1,isInLeftColumn:!1,isInRightColumn:!0,positionAlongVariableDimension:Rc.END},"bottom-right-corner":{order:9,isInTopRow:!1,isInBottomRow:!0,isInLeftColumn:!1,isInRightColumn:!0,positionAlongVariableDimension:null},"bottom-right":{order:10,isInTopRow:!1,isInBottomRow:!0,isInLeftColumn:!1,isInRightColumn:!1,positionAlongVariableDimension:Rc.END},"bottom-center":{order:11,isInTopRow:!1,isInBottomRow:!0,isInLeftColumn:!1,isInRightColumn:!1,positionAlongVariableDimension:Rc.CENTER},"bottom-left":{order:12,isInTopRow:!1,isInBottomRow:!0,isInLeftColumn:!1,isInRightColumn:!1,positionAlongVariableDimension:Rc.START},"bottom-left-corner":{order:13,isInTopRow:!1,isInBottomRow:!0,isInLeftColumn:!0,isInRightColumn:!1,positionAlongVariableDimension:null},"left-bottom":{order:14,isInTopRow:!1,isInBottomRow:!1,isInLeftColumn:!0,isInRightColumn:!1,positionAlongVariableDimension:Rc.END},"left-middle":{order:15,isInTopRow:!1,isInBottomRow:!1,isInLeftColumn:!0,isInRightColumn:!1,positionAlongVariableDimension:Rc.CENTER},"left-top":{order:16,isInTopRow:!1,isInBottomRow:!1,isInLeftColumn:!0,isInRightColumn:!1,positionAlongVariableDimension:Rc.START}},_c=(Lc=Bc,Object.keys(Lc).sort((function(t,e){return Lc[t].order-Lc[e].order}))),Mc=function(t){function e(e,n,i){var r;(r=t.call(this,e,null,"vivliostyle-page-rule-master",[],n,null,0)||this).pageMarginBoxes={};var o=xc(i),a=new Uc(r.scope,L(r),i,o);return r.bodyPartitionKey=a.key,r.createPageMarginBoxes(i),r.applySpecified(i,o),r}I(e,t);var n=e.prototype;return n.createPageMarginBoxes=function(t){var e=this,n=t._marginBoxes;n&&_c.forEach((function(i){n[i]&&(e.pageMarginBoxes[i]=new Vc(e.scope,e,i,t))}))},n.applySpecified=function(t,e){for(var n in this.specified.position=new No(Ye.relative,0),this.specified.width=new No(e.width,0),this.specified.height=new No(e.height,0),t)kc[n]||"background-clip"===n||(this.specified[n]=t[n])},n.createInstance=function(t){return new zc(t,this)},e}(Zl),Uc=function(t){function e(e,n,i,r){var o;return(o=t.call(this,e,null,null,[],n)||this).pageSize=r,o.specified["z-index"]=new No(new Ve(0),0),o.applySpecified(i),o}I(e,t);var n=e.prototype;return n.applySpecified=function(t){for(var e in this.specified["flow-from"]=new No(_e("body"),0),this.specified.position=new No(Ye.absolute,0),this.specified.overflow=new No(Ye.visible,0),kc)kc.hasOwnProperty(e)&&(this.specified[e]=t[e])},n.createInstance=function(t){return new Xc(t,this)},e}(Jl),Vc=function(t){function e(e,n,i,r){var o;return(o=t.call(this,e,null,null,[],n)||this).marginBoxName=i,o.applySpecified(r),o}I(e,t);var n=e.prototype;return n.applySpecified=function(t){var e=t._marginBoxes[this.marginBoxName];for(var n in t){var i=e[n];(po[n]||i&&i.value===Ye.inherit)&&(this.specified[n]=t[n])}for(var r in e)if(Object.prototype.hasOwnProperty.call(e,r)){var o=e[r];o&&o.value!==Ye.inherit&&(this.specified[r]=o)}},n.createInstance=function(t){return new jc(t,this)},e}(Jl),zc=function(t){function e(e,n){var i;return(i=t.call(this,e,n)||this).pageAreaDimension=null,i.pageMarginBoxInstances={},i}I(e,t);var n=e.prototype;return n.applyCascadeAndInit=function(e,n){var i=this.cascaded;for(var r in n)if(Object.prototype.hasOwnProperty.call(n,r))switch(r){case"writing-mode":case"direction":i[r]=n[r]}t.prototype.applyCascadeAndInit.call(this,e,n)},n.initHorizontal=function(){var t=this.style;t.left=tn,t["margin-left"]=tn,t["border-left-width"]=tn,t["padding-left"]=tn,t["padding-right"]=tn,t["border-right-width"]=tn,t["margin-right"]=tn,t.right=tn},n.initVertical=function(){var t=this.style;t.top=tn,t["margin-top"]=tn,t["border-top-width"]=tn,t["padding-top"]=tn,t["padding-bottom"]=tn,t["border-bottom-width"]=tn,t["margin-bottom"]=tn,t.bottom=tn},n.setPageAreaDimension=function(t){this.pageAreaDimension=t;var e=this.style;e.width=new Ke(t.borderBoxWidth),e.height=new Ke(t.borderBoxHeight),e["padding-left"]=new Ke(t.marginLeft),e["padding-right"]=new Ke(t.marginRight),e["padding-top"]=new Ke(t.marginTop),e["padding-bottom"]=new Ke(t.marginBottom)},n.adjustPageLayout=function(t,e,n){var i=e.marginBoxes,r={start:this.pageAreaDimension.marginLeft,end:this.pageAreaDimension.marginRight,extent:this.pageAreaDimension.borderBoxWidth},o={start:this.pageAreaDimension.marginTop,end:this.pageAreaDimension.marginBottom,extent:this.pageAreaDimension.borderBoxHeight};this.sizeMarginBoxesAlongVariableDimension(i.top,!0,r,t,n),this.sizeMarginBoxesAlongVariableDimension(i.bottom,!0,r,t,n),this.sizeMarginBoxesAlongVariableDimension(i.left,!1,o,t,n),this.sizeMarginBoxesAlongVariableDimension(i.right,!1,o,t,n)},n.sizeMarginBoxesAlongVariableDimension=function(t,e,n,i,r){var o=Rc.START,a=Rc.CENTER,s=Rc.END,u=this.pageBox.scope,l={},c={},h={};for(var f in t){var d=Bc[f];if(d){var p=t[f],g=this.pageMarginBoxInstances[f],m=new Hc(p,g.style,e,u,r);l[d.positionAlongVariableDimension]=p,c[d.positionAlongVariableDimension]=g,h[d.positionAlongVariableDimension]=m}}var v={start:n.start.evaluate(i),end:n.end.evaluate(i),extent:n.extent.evaluate(i)},E=this.getSizesOfMarginBoxesAlongVariableDimension(h,v.extent),b=!1,C={};Object.keys(l).forEach((function(t){var o=t,a=tc(u,c[o].style[e?"max-width":"max-height"],n.extent);if(a){var s=a.evaluate(i);if(E[o]>s){var f=h[o]=new Wc(l[o],c[o].style,e,u,r,s);C[o]=f.getOuterSize(),b=!0}}})),b&&(E=this.getSizesOfMarginBoxesAlongVariableDimension(h,v.extent),b=!1,[o,a,s].forEach((function(t){E[t]=C[t]||E[t]})));var y={};Object.keys(l).forEach((function(t){var o=t,a=tc(u,c[o].style[e?"min-width":"min-height"],n.extent);if(a){var s=a.evaluate(i);if(E[o]<s){var f=h[o]=new Wc(l[o],c[o].style,e,u,r,s);y[o]=f.getOuterSize(),b=!0}}})),b&&(E=this.getSizesOfMarginBoxesAlongVariableDimension(h,v.extent),[o,a,s].forEach((function(t){E[t]=y[t]||E[t]})));var w=v.start+v.extent,D=v.start+(v.start+v.extent);[o,a,s].forEach((function(t){var n=E[t];if(n){var i=l[t],r=0;switch(t){case o:r=e?i.left:i.top;break;case a:r=(D-n)/2;break;case s:r=w-n}e?i.setHorizontalPosition(r,n-i.getInsetLeft()-i.getInsetRight()):i.setVerticalPosition(r,n-i.getInsetTop()-i.getInsetBottom())}}))},n.getSizesOfMarginBoxesAlongVariableDimension=function(t,e){var n=t[Rc.START],i=t[Rc.CENTER],r=t[Rc.END],o={};if(i){var a=[n,r].filter((function(t){return t})),s=a.length?new Gc(a):null,u=this.distributeAutoMarginBoxSizes(i,s,e);u.xSize&&(o[Rc.CENTER]=u.xSize);var l=(e-(u.xSize||i.getOuterSize()))/2;n&&n.hasAutoSize()&&(o[Rc.START]=l),r&&r.hasAutoSize()&&(o[Rc.END]=l)}else{var c=this.distributeAutoMarginBoxSizes(n,r,e);c.xSize&&(o[Rc.START]=c.xSize),c.ySize&&(o[Rc.END]=c.ySize)}return o},n.distributeAutoMarginBoxSizes=function(t,e,n){var i={xSize:null,ySize:null};if(t&&e)if(t.hasAutoSize()&&e.hasAutoSize()){var r=t.getOuterMaxContentSize(),o=e.getOuterMaxContentSize();if(r>0&&o>0){var a=r+o;if(a<n)i.xSize=n*r/a;else{var s=t.getOuterMinContentSize(),u=s+e.getOuterMinContentSize();u<n?i.xSize=s+(n-u)*(r-s)/(a-u):u>0&&(i.xSize=n*s/u)}i.xSize>0&&(i.ySize=n-i.xSize)}else r>0?i.xSize=n:o>0&&(i.ySize=n)}else t.hasAutoSize()?i.xSize=Math.max(n-e.getOuterSize(),0):e.hasAutoSize()&&(i.ySize=Math.max(n-t.getOuterSize(),0));else t?t.hasAutoSize()&&(i.xSize=n):e&&e.hasAutoSize()&&(i.ySize=n);return i},n.prepareContainer=function(e,n,i,r,o){t.prototype.prepareContainer.call(this,e,n,i,r,o),n.element.setAttribute("data-vivliostyle-page-box",!0)},e}(dc),Hc=function(){function t(t,e,n,i,r){this.container=t,this.isHorizontal=n,this.clientLayout=r,this.size=null,this.hasAutoSize_=!tc(i,e[n?"width":"height"],new ge(i,0,"px"))}var e=t.prototype;return e.hasAutoSize=function(){return this.hasAutoSize_},e.getSize=function(){return this.size||(this.size=us(this.clientLayout,this.container.element,this.isHorizontal?[rs.MAX_CONTENT_WIDTH,rs.MIN_CONTENT_WIDTH]:[rs.MAX_CONTENT_HEIGHT,rs.MIN_CONTENT_HEIGHT])),this.size},e.getOuterMaxContentSize=function(){var t=this.getSize();return this.isHorizontal?this.container.getInsetLeft()+t[rs.MAX_CONTENT_WIDTH]+this.container.getInsetRight():this.container.getInsetTop()+t[rs.MAX_CONTENT_HEIGHT]+this.container.getInsetBottom()},e.getOuterMinContentSize=function(){var t=this.getSize();return this.isHorizontal?this.container.getInsetLeft()+t[rs.MIN_CONTENT_WIDTH]+this.container.getInsetRight():this.container.getInsetTop()+t[rs.MIN_CONTENT_HEIGHT]+this.container.getInsetBottom()},e.getOuterSize=function(){return this.isHorizontal?this.container.getInsetLeft()+this.container.width+this.container.getInsetRight():this.container.getInsetTop()+this.container.height+this.container.getInsetBottom()},t}(),Gc=function(){function t(t){this.params=t}var e=t.prototype;return e.hasAutoSize=function(){return this.params.some((function(t){return t.hasAutoSize()}))},e.getOuterMaxContentSize=function(){var t=this.params.map((function(t){return t.getOuterMaxContentSize()}));return Math.max.apply(null,t)*t.length},e.getOuterMinContentSize=function(){var t=this.params.map((function(t){return t.getOuterMinContentSize()}));return Math.max.apply(null,t)*t.length},e.getOuterSize=function(){var t=this.params.map((function(t){return t.getOuterSize()}));return Math.max.apply(null,t)*t.length},t}(),Wc=function(t){function e(e,n,i,r,o,a){var s;return(s=t.call(this,e,n,i,r,o)||this).fixedSize=a,s}I(e,t);var n=e.prototype;return n.hasAutoSize=function(){return!1},n.getOuterMaxContentSize=function(){return this.getOuterSize()},n.getOuterMinContentSize=function(){return this.getOuterSize()},n.getOuterSize=function(){return this.isHorizontal?this.container.getInsetLeft()+this.fixedSize+this.container.getInsetRight():this.container.getInsetTop()+this.fixedSize+this.container.getInsetBottom()},e}(Hc),Xc=function(t){function e(e,n){var i;return(i=t.call(this,e,n)||this).borderBoxWidth=null,i.borderBoxHeight=null,i.marginTop=null,i.marginRight=null,i.marginBottom=null,i.marginLeft=null,i}I(e,t);var n=e.prototype;return n.applyCascadeAndInit=function(e,n){var i=this.cascaded;for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(r.match(/^column.*$/)||r.match(/^background-/))&&(i[r]=n[r]);t.prototype.applyCascadeAndInit.call(this,e,n),this.parentInstance.setPageAreaDimension({borderBoxWidth:this.borderBoxWidth,borderBoxHeight:this.borderBoxHeight,marginTop:this.marginTop,marginRight:this.marginRight,marginBottom:this.marginBottom,marginLeft:this.marginLeft})},n.initHorizontal=function(){var t=this.resolvePageBoxDimensions({start:"left",end:"right",extent:"width"});this.borderBoxWidth=t.borderBoxExtent,this.marginLeft=t.marginStart,this.marginRight=t.marginEnd},n.initVertical=function(){var t=this.resolvePageBoxDimensions({start:"top",end:"bottom",extent:"height"});this.borderBoxHeight=t.borderBoxExtent,this.marginTop=t.marginStart,this.marginBottom=t.marginEnd},n.resolvePageBoxDimensions=function(t){var e=this.style,n=this.pageBox.scope,i=t.start,r=t.end,o=t.extent,a=this.pageBox.pageSize[o].toExpr(n,null),s=tc(n,e[o],a),u=tc(n,e["margin-"+i],a),l=tc(n,e["margin-"+r],a),c=ec(n,e["padding-"+i],a),h=ec(n,e["padding-"+r],a),f=ic(n,e["border-"+i+"-width"],e["border-"+i+"-style"],a),d=ic(n,e["border-"+r+"-width"],e["border-"+r+"-style"],a),p=Te(n,a,Ne(n,Ne(n,f,c),Ne(n,d,h)));return s?(p=Te(n,p,s),u||l?u?l=Te(n,p,u):u=Te(n,p,l):l=u=Ae(n,p,new ye(n,.5))):(u||(u=n.zero),l||(l=n.zero),s=Te(n,p,Ne(n,u,l))),e[i]=new Ke(u),e[r]=new Ke(l),e["margin-"+i]=tn,e["margin-"+r]=tn,e["padding-"+i]=new Ke(c),e["padding-"+r]=new Ke(h),e["border-"+i+"-width"]=new Ke(f),e["border-"+r+"-width"]=new Ke(d),e[o]=new Ke(s),e["max-"+o]=new Ke(s),{borderBoxExtent:Te(n,a,Ne(n,u,l)),marginStart:u,marginEnd:l}},n.prepareContainer=function(e,n,i,r,o){t.prototype.prepareContainer.call(this,e,n,i,r,o),i.pageAreaElement=n.element,e.pageAreaWidth=parseFloat(i.pageAreaElement.style.width),e.pageAreaHeight=parseFloat(i.pageAreaElement.style.height)},e}(gc),jc=function(t){function e(e,n){var i;(i=t.call(this,e,n)||this).suppressEmptyBoxGeneration=!0;var r=n.marginBoxName;return i.boxInfo=Bc[r],e.pageMarginBoxInstances[r]=L(i),i}I(e,t);var n=e.prototype;return n.prepareContainer=function(e,n,i,r,o){this.applyVerticalAlign(e,n.element),t.prototype.prepareContainer.call(this,e,n,i,r,o)},n.applyVerticalAlign=function(t,e){et(e,"display","flex");var n=this.getProp(t,"vertical-align"),i=null;n===_e("middle")?i="center":n===_e("top")?i="flex-start":n===_e("bottom")&&(i="flex-end"),i&&(et(e,"flex-flow",this.vertical?"row":"column"),et(e,"justify-content",i))},n.positionAlongVariableDimension=function(t,e){var n=this.style,i=this.pageBox.scope,r=t.start,o=t.end,a="left"===r,s=a?e.borderBoxWidth:e.borderBoxHeight,u=tc(i,n[t.extent],s),l=a?e.marginLeft:e.marginTop;if(this.boxInfo.positionAlongVariableDimension===Rc.START)n[r]=new Ke(l);else if(u){var c=ec(i,n["margin-"+r],s),h=ec(i,n["margin-"+o],s),f=ec(i,n["padding-"+r],s),d=ec(i,n["padding-"+o],s),p=ic(i,n["border-"+r+"-width"],n["border-"+r+"-style"],s),g=ic(i,n["border-"+o+"-width"],n["border-"+o+"-style"],s),m=Ne(i,u,Ne(i,Ne(i,f,d),Ne(i,Ne(i,p,g),Ne(i,c,h))));switch(this.boxInfo.positionAlongVariableDimension){case Rc.CENTER:n[r]=new Ke(Ne(i,l,xe(i,Te(i,s,m),new ye(i,2))));break;case Rc.END:n[r]=new Ke(Te(i,Ne(i,l,s),m))}}},n.positionAndSizeAlongFixedDimension=function(t,e){var n=this.style,i=this.pageBox.scope,r=t.inside,o=t.outside,a=t.extent,s=e["margin"+o.charAt(0).toUpperCase()+o.substring(1)],u=nc(i,n["margin-"+r],s),l=nc(i,n["margin-"+o],s),c=ec(i,n["padding-"+r],s),h=ec(i,n["padding-"+o],s),f=ic(i,n["border-"+r+"-width"],n["border-"+r+"-style"],s),d=ic(i,n["border-"+o+"-width"],n["border-"+o+"-style"],s),p=tc(i,n[a],s),g=null;function m(t){if(g)return g;g={extent:p?p.evaluate(t):null,marginInside:u?u.evaluate(t):null,marginOutside:l?l.evaluate(t):null};var e=s.evaluate(t),n=0;return[f,c,h,d].forEach((function(e){e&&(n+=e.evaluate(t))})),(null===g.marginInside||null===g.marginOutside)&&n+g.extent+g.marginInside+g.marginOutside>e&&(null===g.marginInside&&(g.marginInside=0),null===g.marginOutside&&(g.marginOutside=0)),null!==g.extent&&null!==g.marginInside&&null!==g.marginOutside&&(g.marginOutside=null),null===g.extent&&null!==g.marginInside&&null!==g.marginOutside?g.extent=e-n-g.marginInside-g.marginOutside:null!==g.extent&&null===g.marginInside&&null!==g.marginOutside?g.marginInside=e-n-g.extent-g.marginOutside:null!==g.extent&&null!==g.marginInside&&null===g.marginOutside?g.marginOutside=e-n-g.extent-g.marginInside:null===g.extent?(g.marginInside=g.marginOutside=0,g.extent=e-n):g.marginInside=g.marginOutside=(e-n-g.extent)/2,g}n[a]=new Ke(new Ee(i,(function(){var t=m(this).extent;return null===t?0:t}),a)),n["margin-"+r]=new Ke(new Ee(i,(function(){var t=m(this).marginInside;return null===t?0:t}),"margin-"+r)),n["margin-"+o]=new Ke(new Ee(i,(function(){var t=m(this).marginOutside;return null===t?0:t}),"margin-"+o)),"left"===r?n.left=new Ke(Ne(i,e.marginLeft,e.borderBoxWidth)):"top"===r&&(n.top=new Ke(Ne(i,e.marginTop,e.borderBoxHeight)))},n.initHorizontal=function(){var t=this.parentInstance.pageAreaDimension;this.boxInfo.isInLeftColumn?this.positionAndSizeAlongFixedDimension({inside:"right",outside:"left",extent:"width"},t):this.boxInfo.isInRightColumn?this.positionAndSizeAlongFixedDimension({inside:"left",outside:"right",extent:"width"},t):this.positionAlongVariableDimension({start:"left",end:"right",extent:"width"},t)},n.initVertical=function(){var t=this.parentInstance.pageAreaDimension;this.boxInfo.isInTopRow?this.positionAndSizeAlongFixedDimension({inside:"bottom",outside:"top",extent:"height"},t):this.boxInfo.isInBottomRow?this.positionAndSizeAlongFixedDimension({inside:"top",outside:"bottom",extent:"height"},t):this.positionAlongVariableDimension({start:"top",end:"bottom",extent:"height"},t)},n.finishContainer=function(e,n,i,r,o,a,s){t.prototype.finishContainer.call(this,e,n,i,r,o,a,s);var u=i.marginBoxes,l=this.pageBox.marginBoxName,c=this.boxInfo;c.isInLeftColumn||c.isInRightColumn?c.isInTopRow||c.isInBottomRow||(c.isInLeftColumn?u.left[l]=n:c.isInRightColumn&&(u.right[l]=n)):c.isInTopRow?u.top[l]=n:c.isInBottomRow&&(u.bottom[l]=n)},e}(gc),Kc=function(){function t(t,e,n,i,r){this.cascadeInstance=t,this.pageScope=e,this.rootPageBoxInstance=n,this.context=i,this.docElementStyle=r,this.pageMasterCache={},this.definePageProgression()}var n=t.prototype;return n.definePageProgression=function(){var t=this.pageScope,n=this.context,i=n.isVersoFirstPage,r=new me(t,"page-number"),o=new ue(t,new pe(t,r,new ye(t,2)),i?t.one:t.zero);t.defineName("recto-page",new Qt(t,o)),t.defineName("verso-page",o),(n.pageProgression||Cc(this.docElementStyle))===e.PageProgression.LTR?(t.defineName("left-page",o),t.defineName("right-page",new Qt(t,o))):(t.defineName("left-page",new Qt(t,o)),t.defineName("right-page",o))},n.getCascadedPageStyle=function(){var t={};return this.cascadeInstance.pushRule([],"",t),this.cascadeInstance.popRule(),t},n.getPageRulePageMaster=function(t,e){var n=t.pageBox;if(0===Object.keys(e).length)return n.resetScope(),t;var i=this.makeCacheKey(e,n),r=this.pageMasterCache[i];return r||(r=n.pseudoName===hc?this.generatePageRuleMaster(e):this.generateCascadedPageMaster(e,n),this.pageMasterCache[i]=r),r.pageBox.resetScope(),r},n.makeCacheKey=function(t,e){var n=this.makeCascadeValueObjectKey(t);return e.key+"^"+n},n.makeCascadeValueObjectKey=function(t){var e=[];for(var n in t)if(Object.prototype.hasOwnProperty.call(t,n)){var i,r=t[n];i=r instanceof No?""+r.value:this.makeCascadeValueObjectKey(r),e.push(n+i+(r.priority||""))}return e.sort().join("^")},n.generatePageRuleMaster=function(t){var e=new Mc(this.pageScope,this.rootPageBoxInstance.pageBox,t).createInstance(this.rootPageBoxInstance);return e.applyCascadeAndInit(this.cascadeInstance,this.docElementStyle),e.resolveAutoSizing(this.context),e},n.generateCascadedPageMaster=function(t,e){var n=e.clone({pseudoName:"vivliostyle-page-rule-master"}),i=n.specified,r=t.size;if(r){var o=xc(t),a=r.priority;i.width=Ao(this.context,i.width,new No(o.width,a)),i.height=Ao(this.context,i.height,new No(o.height,a))}["counter-reset","counter-increment"].forEach((function(e){i[e]&&(t[e]=i[e])}));var s=n.createInstance(this.rootPageBoxInstance);return s.applyCascadeAndInit(this.cascadeInstance,this.docElementStyle),s.resolveAutoSizing(this.context),s},t}(),$c=function(t){function e(e){var n;return(n=t.call(this)||this).pageType=e,n}I(e,t);var n=e.prototype;return n.apply=function(t){t.currentPageType===this.pageType&&this.chained.apply(t)},n.getPriority=function(){return 3},n.makePrimary=function(t){return this.chained&&t.insertInTable(t.pagetypes,this.pageType,this.chained),!0},e}(Ko),qc=function(t){function e(e){var n;return(n=t.call(this)||this).scope=e,n}I(e,t);var n=e.prototype;return n.apply=function(t){1===new me(this.scope,"page-number").evaluate(t.context)&&this.chained.apply(t)},n.getPriority=function(){return 2},e}(Ko),Yc=function(t){function e(e){var n;return(n=t.call(this)||this).scope=e,n}I(e,t);var n=e.prototype;return n.apply=function(t){new me(this.scope,"left-page").evaluate(t.context)&&this.chained.apply(t)},n.getPriority=function(){return 1},e}(Ko),Zc=function(t){function e(e){var n;return(n=t.call(this)||this).scope=e,n}I(e,t);var n=e.prototype;return n.apply=function(t){new me(this.scope,"right-page").evaluate(t.context)&&this.chained.apply(t)},n.getPriority=function(){return 1},e}(Ko),Qc=function(t){function e(e){var n;return(n=t.call(this)||this).scope=e,n}I(e,t);var n=e.prototype;return n.apply=function(t){new me(this.scope,"recto-page").evaluate(t.context)&&this.chained.apply(t)},n.getPriority=function(){return 1},e}(Ko),Jc=function(t){function e(e){var n;return(n=t.call(this)||this).scope=e,n}I(e,t);var n=e.prototype;return n.apply=function(t){new me(this.scope,"verso-page").evaluate(t.context)&&this.chained.apply(t)},n.getPriority=function(){return 1},e}(Ko),th=function(t){function e(e,n,i){var r;return(r=t.call(this,n,i)||this).scope=e,r.a=n,r.b=i,r}I(e,t);var n=e.prototype;return n.apply=function(t){var e=t.context,n=e.layoutPositionAtPageStart.page;e.blankPageAtStart&&n--,n&&this.matchANPlusB(n)&&this.chained.apply(t)},n.getPriority=function(){return 2},e}(sa),eh=function(t){function e(e,n){return t.call(this,e,n,null,null,null)||this}return I(e,t),e.prototype.apply=function(t){!function(t,e,n,i,r){Uo(t,e,n,i,null,null,null);var o=n._marginBoxes;if(o){var a=Lo(e,"_marginBoxes");for(var s in o)if(o.hasOwnProperty(s)){var u=a[s];u||(a[s]=u={}),Uo(t,u,o[s],i,null,null,null)}}}(t.context,t.currentStyle,this.style,this.specificity)},e}(jo),nh=function(t){function e(e,n,i,r,o){var a;return(a=t.call(this,e,n,null,i,null,r,!1)||this).pageProps=o,a.currentPageSelectors=[],a.currentNamedPageSelector="",a.currentPseudoPageClassSelectors=[],a}I(e,t);var n=e.prototype;return n.startPageRule=function(){this.startSelectorRule()},n.tagSelector=function(t,e){this.currentNamedPageSelector=e,e&&(this.chain.push(new $c(e)),this.specificity+=65536)},n.pseudoclassSelector=function(t,e){if(t=t.toLowerCase(),e)switch(t){case"nth":var n=e[0],i=e[1];this.currentPseudoPageClassSelectors.push(":"+t+"("+n+"n"+(i<0?i:"+"+i)+")"),this.chain.push(new th(this.scope,n,i)),this.specificity+=256;break;default:this.reportAndSkip("E_INVALID_PAGE_SELECTOR :"+t+"("+e.join("")+")")}else switch(this.currentPseudoPageClassSelectors.push(":"+t),t){case"first":this.chain.push(new qc(this.scope)),this.specificity+=256;break;case"left":this.chain.push(new Yc(this.scope)),this.specificity+=1;break;case"right":this.chain.push(new Zc(this.scope)),this.specificity+=1;break;case"recto":this.chain.push(new Qc(this.scope)),this.specificity+=1;break;case"verso":this.chain.push(new Jc(this.scope)),this.specificity+=1;break;default:this.reportAndSkip("E_INVALID_PAGE_SELECTOR :"+t)}},n.finishSelector=function(){var t;t=this.currentNamedPageSelector||this.currentPseudoPageClassSelectors.length?[this.currentNamedPageSelector].concat(this.currentPseudoPageClassSelectors.sort()):null,this.currentPageSelectors.push({selectors:t,specificity:this.specificity}),this.currentNamedPageSelector="",this.currentPseudoPageClassSelectors=[]},n.nextSelector=function(){this.finishSelector(),t.prototype.nextSelector.call(this)},n.startRuleBody=function(){this.finishSelector(),t.prototype.startRuleBody.call(this)},n.simpleProperty=function(e,n,i){if("bleed"!==e&&"marks"!==e||this.currentPageSelectors.some((function(t){return null===t.selectors}))){t.prototype.simpleProperty.call(this,e,n,i);var r=Oo(this.elementStyle,e),o=this.pageProps;if("bleed"===e||"marks"===e)o[""]||(o[""]={}),Object.keys(o).forEach((function(t){Ro(o[t],e,r)}));else if("size"===e){var a=o[""];this.currentPageSelectors.forEach((function(t){var n=new No(r.value,r.priority+t.specificity),i=t.selectors?t.selectors.join(""):"",s=o[i];if(s){var u=Oo(s,e);n=u?Ao(null,n,u):n,Ro(s,e,n)}else Ro(s=o[i]={},e,n),a&&["bleed","marks"].forEach((function(t){a[t]&&Ro(s,t,a[t])}))}))}}},n.insertNonPrimary=function(t){this.cascade.insertInTable(this.cascade.pagetypes,"*",t)},n.makeApplyRuleAction=function(t){return new eh(this.elementStyle,t)},n.startPageMarginBoxRule=function(t){var e=Lo(this.elementStyle,"_marginBoxes"),n=e[t];n||(e[t]=n={});var i=new ih(this.scope,this.owner,this.validatorSet,n);this.owner.pushHandler(i)},e}(za),ih=function(t){function e(e,n,i,r){var o;return(o=t.call(this,e,n,!1)||this).validatorSet=i,o.boxStyle=r,o}I(e,t);var n=e.prototype;return n.property=function(t,e,n){this.validatorSet.validatePropertyAndHandleShorthand(t,e,n,this)},n.invalidPropertyValue=function(t,e){this.report("E_INVALID_PROPERTY_VALUE "+t+": "+e.toString())},n.unknownProperty=function(t,e){this.report("E_INVALID_PROPERTY "+t+": "+e.toString())},n.simpleProperty=function(t,e,n){var i=n?this.getImportantSpecificity():this.getBaseSpecificity(),r=new No(e,i);Ro(this.boxStyle,t,r)},e}(nr),rh=function(t,e,n){return t.replace(/[uU][rR][lL]\(\s*"((\\([^0-9a-fA-F]+|[0-9a-fA-F]+\s*)|[^"\r\n])+)"/gm,(function(t,i){return'url("'+n.transformURL(i,e)+'"'})).replace(/[uU][rR][lL]\(\s*'((\\([^0-9a-fA-F]+|[0-9a-fA-F]+\s*)|[^'\r\n])+)'/gm,(function(t,i){return"url('"+n.transformURL(i,e)+"'"})).replace(/[uU][rR][lL]\(\s*((\\([^0-9a-fA-F]+|[0-9a-fA-F]+\s*)|[^"'\r\n\)\s])+)/gm,(function(t,i){return"url("+n.transformURL(i,e)}))},oh={},ah={"text-indent":"0px","margin-top":"0px","padding-top":"0px","border-top-width":"0px","border-top-style":"none","border-top-color":"transparent","border-top-left-radius":"0px","border-top-right-radius":"0px"},sh={"text-indent":"0px","margin-right":"0px","padding-right":"0px","border-right-width":"0px","border-right-style":"none","border-right-color":"transparent","border-top-right-radius":"0px","border-bottom-right-radius":"0px"},uh={"margin-top":"0px"},lh={"margin-right":"0px"},ch=function(t){function n(e,n,i,r,o,a,s,u,l,c,h,f,d){var p;return(p=t.call(this)||this).flowName=e,p.context=n,p.viewport=i,p.styler=r,p.regionIds=o,p.xmldoc=a,p.docFaces=s,p.footnoteStyle=u,p.stylerProducer=l,p.page=c,p.customRenderer=h,p.fallbackMap=f,p.documentURLTransformer=d,p.nodeContext=null,p.viewRoot=null,p.isFootnote=!1,p.sourceNode=null,p.offsetInNode=0,p.viewNode=null,p.document=i.document,p.exprContentListener=r.counterListener.getExprContentListener(),p}I(n,t);var i=n.prototype;return i.clone=function(){return new n(this.flowName,this.context,this.viewport,this.styler,this.regionIds,this.xmldoc,this.docFaces,this.footnoteStyle,this.stylerProducer,this.page,this.customRenderer,this.fallbackMap,this.documentURLTransformer)},i.createPseudoelementShadow=function(t,e,n,i,r,o,a,s){var u=this.getPseudoMap(n,this.regionIds,this.isFootnote,this.nodeContext,o);if(!u)return s;for(var l,c=[],h=eu.createElementNS(W.SHADOW,"root"),f=h,d=_(nu);!(l=d()).done;){var p=l.value,g=void 0;if(p){if(!u[p])continue;if(!("footnote-marker"!=p||e&&this.isFootnote))continue;if(p.match(/^first-/)){var m=i.display;if(!m||m===Ye.inline)continue}if("before"===p||"after"===p){var v=u[p].content;if(!v||v===Ye.normal||v===Ye.none)continue}c.push(p),ru(g=eu.createElementNS(W.XHTML,"span"),p)}else g=eu.createElementNS(W.SHADOW,"content");f.appendChild(g),p.match(/^first-/)&&(f=g)}if(!c.length)return s;var E=new ou(t,n,r,o,this.exprContentListener);return new no(t,h,null,a,s,eo.ROOTLESS,E)},i.getPseudoMap=function(t,e,n,i,r){var o=ko(t,"_pseudos");if(!o)return null;var a={},s=function(t){var i=a[t]={};ts(i,o[t],r),qa(i,r,o[t]),Ja(o[t],e,n,(function(t,e){ts(i,e,r),$a(e,(function(t){ts(i,t,r)}))}))};for(var u in o)s(u);return a},i.createRefShadow=function(t,e,n,i,r){var o=this,a=Ni("createRefShadow");return this.xmldoc.store.load(t).then((function(s){var u=s;if(u){var l=u.getElement(t);if(l){var c=o.stylerProducer.getStylerForDoc(u);r=new no(n,l,u,i,r,e,c)}}a.finish(r)})),a.result()},i.createShadows=function(t,e,n,i,r,o,a){var s=this,u=Ni("createShadows"),l=i.template;return(l instanceof He?this.createRefShadow(l.url,eo.ROOTLESS,t,a,null):Ti(null)).then((function(l){var c=null;if(t.namespaceURI==W.SHADOW&&"include"==t.localName){var h=t.getAttribute("href"),f=null;h?f=a?a.xmldoc:s.xmldoc:a&&(h=a.owner.namespaceURI==W.XHTML?a.owner.getAttribute("href"):a.owner.getAttributeNS(W.XLINK,"href"),f=a.parentShadow?a.parentShadow.xmldoc:s.xmldoc),h&&(h=K(h,f.url),c=s.createRefShadow(h,eo.ROOTED,t,a,l))}null==c&&(c=Ti(l));var d=null;c.then((function(e){if(i.display===Ye.table_cell){var n=K("user-agent.xml#table-cell",X);d=s.createRefShadow(n,eo.ROOTLESS,t,a,e)}else d=Ti(e)})),d.then((function(l){l=s.createPseudoelementShadow(t,e,n,i,r,o,a,l),u.finish(l)}))})),u.result()},i.setViewRoot=function(t,e){this.viewRoot=t,this.isFootnote=e},i.computeStyle=function(t,e,n,i){var r=this,o=this.context,a=Qa(n,o,this.regionIds,this.isFootnote);t=Ya(a,o,t),e=Za(a,o,e),es(a,i,t,e,(function(t,e){var n=e.evaluate(o,t);return"font-family"==t&&(n=r.docFaces.filterFontFamily(n)),n}));var s=Hs(i.display||Ye.inline,i.position,i.float,this.sourceNode===this.xmldoc.root);return["display","position","float"].forEach((function(t){s[t]&&(i[t]=s[t])})),t},i.inheritFromSourceParent=function(t){for(var e=this.nodeContext.sourceNode,n=[],i=null,r=this.nodeContext.shadowContext,o=-1;e&&1==e.nodeType;){var a=r&&r.root==e;if(!a||r.type==eo.ROOTLESS){var s=(r?r.styler:this.styler).getStyle(e,!1);n.push(s),i=i||it(e)}a?(e=r.owner,r=r.parentShadow):(e=e.parentNode,o++)}for(var u=this.context.queryUnitSize("em",0===o),l={"font-size":new No(new Me(u,"px"),0)},c=new zo(l,this.context),h=n.length-1;h>=0;--h){var f=n[h],d=[];for(var p in f)Po(p)&&d.push(p);d.sort(nn);for(var g=0,m=d;g<m.length;g++){var v=m[g];c.setPropName(v);var E=Oo(f,v);E.value!==Ye.inherit&&(l[v]=E.filterValue(c))}}for(var b in t)Po(b)||(l[b]=t[b]);return{lang:i,elementStyle:l}},i.resolveURL=function(t){return t=K(t,this.xmldoc.url),this.fallbackMap[t]||t},i.inheritLangAttribute=function(){this.nodeContext.lang=it(this.nodeContext.sourceNode)||this.nodeContext.parent&&this.nodeContext.parent.lang||this.nodeContext.lang},i.transferPolyfilledInheritedProps=function(t){var n=v(e.HOOKS.POLYFILLED_INHERITED_PROPS).reduce((function(t,e){return t.concat(e())}),[].concat(go)).filter((function(e){return t[e]}));if(n.length){var i=this.nodeContext.inheritedProps;if(this.nodeContext.parent)for(var r in i=this.nodeContext.inheritedProps={},this.nodeContext.parent.inheritedProps)i[r]=this.nodeContext.parent.inheritedProps[r];n.forEach((function(e){var n=t[e];if(n){if(n instanceof Ve)i[e]=n.num;else if(n instanceof Be)i[e]=n.name;else if(n instanceof Me){var r=n;switch(r.unit){case"dpi":case"dpcm":case"dppx":i[e]=r.num*Ht[r.unit]}}else i[e]=n;delete t[e]}}))}},i.resolveFormattingContext=function(t,n,i,r,o,a){for(var s=v(e.HOOKS.RESOLVE_FORMATTING_CONTEXT),u=0;u<s.length;u++){var l=s[u](t,n,i,r,o,a);if(l)return void(t.formattingContext=l)}},i.createElementView=function(t,e){var n=this,i=!0,r=Ni("createElementView"),o=this.sourceNode,a=this.nodeContext.shadowContext?this.nodeContext.shadowContext.styler:this.styler,s=a.getStyle(o,!1);if(!this.nodeContext.shadowContext){var u=this.xmldoc.getElementOffset(o);xr.registerFragmentIndex(u,this.nodeContext.fragmentIndex,0)}var l={};if(!this.nodeContext.parent){var c=this.inheritFromSourceParent(s);s=c.elementStyle,this.nodeContext.lang=c.lang}var h=s["float-reference"]&&function(t){switch(t){case"inline":return ls.INLINE;case"column":return ls.COLUMN;case"region":return ls.REGION;case"page":return ls.PAGE;default:throw new Error("Unknown float-reference: "+t)}}(s["float-reference"].value.toString());if(this.nodeContext.parent&&h&&cs(h)){var f=this.inheritFromSourceParent(s);s=f.elementStyle,this.nodeContext.lang=f.lang}this.nodeContext.vertical=this.computeStyle(this.nodeContext.vertical,"rtl"===this.nodeContext.direction,s,l),a.processContent(o,l),this.transferPolyfilledInheritedProps(l),this.inheritLangAttribute(),l.direction&&(this.nodeContext.direction=l.direction.toString());var d=l["flow-into"];if(d&&d.toString()!=this.flowName)return r.finish(!1),r.result();var p=l.display;if(p===Ye.none)return r.finish(!1),r.result();var g=null==this.nodeContext.parent;return this.nodeContext.flexContainer=p===Ye.flex,this.createShadows(o,g,s,l,a,this.context,this.nodeContext.shadowContext).then((function(u){n.nodeContext.nodeShadow=u;var c=l.position,f=l.float,d=l.clear,m=n.nodeContext.vertical?Ye.vertical_rl:Ye.horizontal_tb,v=n.nodeContext.parent?n.nodeContext.parent.vertical?Ye.vertical_rl:Ye.horizontal_tb:m,E=function(t){return"true"===t.getAttribute("data-vivliostyle-flow-root")}(o);n.nodeContext.establishesBFC=function(t,e,n,i,r,o,a){return r=r||o||Ye.horizontal_tb,!!a||!!n&&n!==Ye.none||zs(e)||t===Ye.inline_block||t===Ye.table_cell||t===Ye.table_caption||t==Ye.flex||(t===Ye.block||t===Ye.list_item)&&!!i&&i!==Ye.visible||!!o&&r!==o}(p,c,f,l.overflow,m,v,E),n.nodeContext.containingBlockForAbsolute=function(t){return t===Ye.relative||t===Ye.absolute||t===Ye.fixed}(c),!n.nodeContext.isInsideBFC()||f===Ye.footnote||h&&cs(h)||(f=null,d=null);var b=f===Ye.left||f===Ye.right||f===Ye.top||f===Ye.bottom||f===Ye.inline_start||f===Ye.inline_end||f===Ye.block_start||f===Ye.block_end||f===Ye.snap_block||f===Ye.footnote;f&&(delete l.float,f===Ye.footnote&&(n.isFootnote?(b=!1,l.display=Ye.block):l.display=Ye.inline)),d&&(d===Ye.inherit&&n.nodeContext.parent&&n.nodeContext.parent.clearSide&&(d=_e(n.nodeContext.parent.clearSide)),d!==Ye.left&&d!==Ye.right&&d!==Ye.top&&d!==Ye.bottom&&d!==Ye.both&&d!==Ye.all&&d!==Ye.same||(delete l.clear,l.display&&l.display!=Ye.inline&&(n.nodeContext.clearSide=d.toString())));var C=p===Ye.list_item&&l["ua-list-item-count"];if((b||l["break-inside"]&&l["break-inside"]!==Ye.auto)&&n.nodeContext.breakPenalty++,p&&p!==Ye.inline&&Ws(p)&&n.nodeContext.breakPenalty++,n.nodeContext.inline=!b&&!p||Ws(p)||function(t){switch(t.toString()){case"ruby-base":case"ruby-text":case"ruby-base-container":case"ruby-text-container":return!0;default:return!1}}(p),n.nodeContext.display=p?p.toString():"inline",n.nodeContext.floatSide=b?f.toString():null,n.nodeContext.floatReference=h||ls.INLINE,n.nodeContext.floatMinWrapBlock=l["float-min-wrap-block"]||null,n.nodeContext.columnSpan=l["column-span"],!n.nodeContext.inline){var y=l["break-after"];y&&(n.nodeContext.breakAfter=y.toString());var w=l["break-before"];w&&(n.nodeContext.breakBefore=w.toString())}n.nodeContext.verticalAlign=l["vertical-align"]&&l["vertical-align"].toString()||"baseline",n.nodeContext.captionSide=l["caption-side"]&&l["caption-side"].toString()||"top";var D=l["border-collapse"];if(!D||D===_e("separate")){var S,N,T=l["border-spacing"];T&&(T.isSpaceList()?(S=T.values[0],N=T.values[1]):S=N=T,S.isNumeric()&&(n.nodeContext.inlineBorderSpacing=$e(S,n.context)),N.isNumeric()&&(n.nodeContext.blockBorderSpacing=$e(N,n.context)))}n.nodeContext.footnotePolicy=l["footnote-policy"];var A=l["x-first-pseudo"];A&&(n.nodeContext.firstPseudo=new ro(n.nodeContext.parent?n.nodeContext.parent.firstPseudo:null,A.num)),n.nodeContext.inline||n.processAfterIfcontinues(o,s,a,n.context);var x=l["white-space"];if(x){var I=Xr(x.toString());null!==I&&(n.nodeContext.whitespace=I)}var F=l["hyphenate-character"];F&&F!==Ye.auto&&(n.nodeContext.hyphenateCharacter=F.str),n.nodeContext.breakWord=l["word-break"]===Ye.break_all||(l["overflow-wrap"]||["word-wrap"])===Ye.break_word,n.resolveFormattingContext(n.nodeContext,t,p,c,f,g),n.nodeContext.parent&&n.nodeContext.parent.formattingContext&&(t=n.nodeContext.parent.formattingContext.isFirstTime(n.nodeContext,t)),n.nodeContext.inline||(n.nodeContext.repeatOnBreak=n.processRepeatOnBreak(l),n.findAndProcessRepeatingElements(o,a));var P=!1,O=[],R=o.namespaceURI,k=o.localName;if(R==W.XHTML)"html"==k||"body"==k||"script"==k||"link"==k||"meta"==k?k="div":"vide_"==k?k="video":"audi_"==k?k="audio":"object"==k&&(P=!!n.customRenderer),o.getAttribute("data-adapt-pseudo")&&s.content&&s.content.value&&s.content.value.url&&(k="img");else if(R==W.epub)k="span",R=W.XHTML;else if(R==W.NCX)if(R=W.XHTML,"ncx"==k||"navPoint"==k)k="div";else if("navLabel"==k){k="span";var L=o.parentNode;if(L){for(var B=null,_=L.firstChild;_;_=_.nextSibling)if(1==_.nodeType&&_.namespaceURI==W.NCX&&"content"==_.localName){B=_.getAttribute("src");break}B&&(k="a",(o=o.ownerDocument.createElementNS(R,"a")).setAttribute("href",B))}}else k="span";else R==W.SHADOW?(R=W.XHTML,k=n.nodeContext.inline?"span":"div"):P=!!n.customRenderer;if(C)t?k="li":(k="div",l.display=p=Ye.block);else if("body"==k||"li"==k)k="div";else if("q"==k)k="span";else if("a"==k){var M=l["hyperlink-processing"];M&&"normal"!=M.toString()&&(k="span")}l.behavior&&"none"!=l.behavior.toString()&&n.customRenderer&&(P=!0),o.dataset&&"true"===o.getAttribute("data-math-typeset")&&(P=!0),(P?n.customRenderer(o,n.nodeContext.parent?n.nodeContext.parent.viewNode:null,l):Ti(null)).then((function(a){var s;a?P&&(i="true"==a.getAttribute("data-adapt-process-children")):a=n.createElement(R,k),"a"==k&&a.addEventListener("click",n.page.hrefHandler,!1),"iframe"==a.localName&&a.namespaceURI==W.XHTML&&(s=a).addEventListener("load",(function(){s.contentWindow.navigator.epubReadingSystem={name:"adapt",version:"0.1",layoutStyle:"paginated",hasFeature:function(t,e){switch(t){case"mouse-events":return!0}return!1}}}),!1);for(var u=n.nodeContext.inheritedProps["image-resolution"],c=[],h=l.width,f=l.height,d=o.getAttribute("width"),p=o.getAttribute("height"),g=h===Ye.auto||!h&&!d,m=f===Ye.auto||!f&&!p,v=o.attributes,E=v.length,b=null,y=0;y<E;y++){var w=v[y],D=w.namespaceURI,S=w.localName,N=w.nodeValue;if(D){if("http://www.w3.org/2000/xmlns/"==D)continue;D==W.XLINK&&"href"==S&&(N=n.resolveURL(N))}else{if(S.match(/^on/))continue;if("style"==S)continue;if(("id"==S||"name"==S)&&t){N=n.documentURLTransformer.transformFragment(N,n.xmldoc.url),a.setAttribute(S,N),n.page.registerElementWithId(a,N);continue}if("src"==S||"href"==S||"poster"==S?(N=n.resolveURL(N),"href"===S&&(N=n.documentURLTransformer.transformURL(N,n.xmldoc.url))):"srcset"==S&&(N=N.split(",").map((function(t){return n.resolveURL(t.trim())})).join(",")),"poster"===S&&"video"===k&&R===W.XHTML&&g&&m){var T=new Image,A=Mi(T,N);O.push(A),c.push({image:T,element:a,fetcher:A})}}if(R==W.SVG&&/^[A-Z\-]+$/.test(S)&&(S=S.toLowerCase()),n.isSVGUrlAttribute(S)&&(N=rh(N,n.xmldoc.url,n.documentURLTransformer)),D){var x=oh[D];x&&(S=x+":"+S)}"src"!=S||D||"img"!=k&&"input"!=k||R!=W.XHTML?"href"==S&&"image"==k&&R==W.SVG&&D==W.XLINK?n.page.fetchers.push(Mi(a,N)):D?a.setAttributeNS(D,S,N):a.setAttribute(S,N):b=N}if(b){var I="input"===k?new Image:a,F=Mi(I,b);I!==a&&(a.src=b),g||m?(g&&m&&u&&1!==u&&c.push({image:I,element:a,fetcher:F}),O.push(F)):n.page.fetchers.push(F)}delete l.content;var L=l["list-style-image"];if(L&&L instanceof He){var B=L.url;O.push(Mi(new Image,B))}if(n.preprocessElementStyle(l),n.applyComputedStyles(a,l),!n.nodeContext.inline){var _=null;if(t?e&&!n.isAtForcedBreak()&&(_=n.nodeContext.vertical?lh:uh):_="clone"!==n.nodeContext.inheritedProps["box-decoration-break"]?n.nodeContext.vertical?sh:ah:n.nodeContext.vertical?lh:uh,_)for(var M in _)et(a,M,_[M])}C&&a.setAttribute("value",l["ua-list-item-count"].stringValue()),n.viewNode=a,O.length?_i(O).then((function(){u>0&&n.modifyElemDimensionWithImageResolution(c,u,l,n.nodeContext.vertical),r.finish(i)})):r.timeSlice().then((function(){r.finish(i)}))}))})),r.result()},i.isAtForcedBreak=function(){for(var t=this.nodeContext;t&&!t.after;t=t.parent){if(Ds(t.breakBefore))return!0;if(t.parent&&t.parent.sourceNode.firstElementChild!==t.sourceNode)break}return!1},i.processAfterIfcontinues=function(t,e,n,i){var r=this.getPseudoMap(e,this.regionIds,this.isFootnote,this.nodeContext,i);if(r&&r["after-if-continues"]&&r["after-if-continues"].content){var o=new ou(t,e,n,i,this.exprContentListener);this.nodeContext.afterIfContinues=new su(t,o)}},i.isSVGUrlAttribute=function(t){return n.SVG_URL_ATTRIBUTES.includes(t.toLowerCase())},i.modifyElemDimensionWithImageResolution=function(t,e,n,i){var r=this;t.forEach((function(t){if("load"===t.fetcher.get().get()){var o=t.image,a=o.width/e,s=o.height/e,u=t.element;if(a>0&&s>0)if(n["box-sizing"]===Ye.border_box&&(n["border-left-style"]!==Ye.none&&(a+=$e(n["border-left-width"],r.context)),n["border-right-style"]!==Ye.none&&(a+=$e(n["border-right-width"],r.context)),n["border-top-style"]!==Ye.none&&(s+=$e(n["border-top-width"],r.context)),n["border-bottom-style"]!==Ye.none&&(s+=$e(n["border-bottom-width"],r.context))),e>1){var l=n["max-width"]||Ye.none,c=n["max-height"]||Ye.none;if(l===Ye.none&&c===Ye.none)et(u,"max-width",a+"px");else if(l!==Ye.none&&c===Ye.none)et(u,"width",a+"px");else if(l===Ye.none&&c!==Ye.none)et(u,"height",s+"px");else{l.isNumeric(),c.isNumeric();var h=c;"%"!==l.unit?et(u,"max-width",Math.min(a,$e(l,r.context))+"px"):"%"!==h.unit?et(u,"max-height",Math.min(s,$e(h,r.context))+"px"):i?et(u,"height",s+"px"):et(u,"width",a+"px")}}else if(e<1){var f=n["min-width"]||tn,d=n["min-height"]||tn;f.isNumeric(),f.isNumeric();var p=f,g=d;0===p.num&&0===g.num?et(u,"min-width",a+"px"):0!==p.num&&0===g.num?et(u,"width",a+"px"):0===p.num&&0!==g.num?et(u,"height",s+"px"):"%"!==p.unit?et(u,"min-width",Math.max(a,$e(p,r.context))+"px"):"%"!==g.unit?et(u,"min-height",Math.max(s,$e(g,r.context))+"px"):i?et(u,"height",s+"px"):et(u,"width",a+"px")}}}))},i.preprocessElementStyle=function(t){var n=this;v(e.HOOKS.PREPROCESS_ELEMENT_STYLE).forEach((function(e){e(n.nodeContext,t)}))},i.findAndProcessRepeatingElements=function(t,e){for(var n=t.firstChild;n;n=n.nextSibling)if(1===n.nodeType){var i={},r=e.getStyle(n,!1);if(this.computeStyle(this.nodeContext.vertical,"rtl"===this.nodeContext.direction,r,i),this.processRepeatOnBreak(i)){if(this.nodeContext.formattingContext instanceof Du&&!this.nodeContext.belongsTo(this.nodeContext.formattingContext))return;var o=this.nodeContext.parent;return this.nodeContext.formattingContext=new Du(o&&o.formattingContext,this.nodeContext.sourceNode),void this.nodeContext.formattingContext.initializeRepetitiveElements(this.nodeContext.vertical)}}},i.processRepeatOnBreak=function(t){var e=t["repeat-on-break"];return e!==Ye.none&&(e===Ye.auto&&(e=t.display===Ye.table_header_group?Ye.header:t.display===Ye.table_footer_group?Ye.footer:Ye.none),e&&e!==Ye.none)?e.toString():null},i.createTextNodeView=function(){var t=this,e=Ni("createTextNodeView");return this.preprocessTextContent().then((function(){var n=t.offsetInNode||0,i=Br(t.nodeContext.preprocessedTextContent).substr(n);t.viewNode=document.createTextNode(i),e.finish(!0)})),e.result()},i.preprocessTextContent=function(){var t,n=this;if(null!=this.nodeContext.preprocessedTextContent)return Ti(!0);var i=t=this.sourceNode.textContent,r=Ni("preprocessTextContent"),o=v(e.HOOKS.PREPROCESS_TEXT_CONTENT),s=0;return r.loop((function(){return s>=o.length?Ti(!1):o[s++](n.nodeContext,i).thenAsync((function(t){return i=t,Ti(!0)}))})).then((function(){n.nodeContext.preprocessedTextContent=a(t,i,0),r.finish(!0)})),r.result()},i.createNodeView=function(t,e){var n,i=this,r=Ni("createNodeView"),o=!0;return 1==this.sourceNode.nodeType?n=this.createElementView(t,e):8==this.sourceNode.nodeType?(this.viewNode=null,n=Ti(!0)):n=this.createTextNodeView(),n.then((function(t){if(o=t,i.nodeContext.viewNode=i.viewNode,i.viewNode){var e=i.nodeContext.parent?i.nodeContext.parent.viewNode:i.viewRoot;e&&e.appendChild(i.viewNode)}r.finish(o)})),r.result()},i.setCurrent=function(t,e,n){return this.nodeContext=t,t?(this.sourceNode=t.sourceNode,this.offsetInNode=t.offsetInNode):(this.sourceNode=null,this.offsetInNode=-1),this.viewNode=null,this.nodeContext?this.createNodeView(e,!!n):Ti(!0)},i.processShadowContent=function(t){if(null==t.shadowContext||"content"!=t.sourceNode.localName||t.sourceNode.namespaceURI!=W.SHADOW)return t;var e,n,i,r=t.boxOffset,o=t.shadowContext,a=t.parent;o.subShadow?(i=o.subShadow,e=o.root,(n=o.type)==eo.ROOTLESS&&(e=e.firstChild)):(i=o.parentShadow,e=o.owner.firstChild,n=eo.ROOTLESS);var s=t.sourceNode.nextSibling;if(s?(t.sourceNode=s,t.resetView()):t.shadowSibling?t=t.shadowSibling:e?t=null:(t=t.parent.modify()).after=!0,e){var u=new oo(e,a,r);return u.shadowContext=i,u.shadowType=n,u.shadowSibling=t,u}return t.boxOffset=r,t},i.nextPositionInTree=function(t){var e=t.boxOffset+1;if(t.after){if(!t.parent)return null;if(t.shadowType!=eo.ROOTED){var n=t.sourceNode.nextSibling;if(n)return(t=t.modify()).boxOffset=e,t.sourceNode=n,t.resetView(),this.processShadowContent(t)}return t.shadowSibling?((t=t.shadowSibling.modify()).boxOffset=e,t):((t=t.parent.modify()).boxOffset=e,t.after=!0,t)}if(t.nodeShadow){var i=t.nodeShadow.root;if(t.nodeShadow.type==eo.ROOTLESS&&(i=i.firstChild),i){var r=new oo(i,t,e);return r.shadowContext=t.nodeShadow,r.shadowType=t.nodeShadow.type,this.processShadowContent(r)}}var o=t.sourceNode.firstChild;return o?this.processShadowContent(new oo(o,t,e)):(1!=t.sourceNode.nodeType&&(e+=Br(t.preprocessedTextContent).length-1-t.offsetInNode),(t=t.modify()).boxOffset=e,t.after=!0,t)},i.isTransclusion=function(t,e,n){var i=Oo(e,"hyperlink-processing");if(!i)return!1;var r=i.evaluate(this.context,"hyperlink-processing");return!!r&&r.toString()==n},i.nextInTree=function(t,e){var n=this,i=this.nextPositionInTree(t);if(!i||i.after)return Ti(i);var r=Ni("nextInTree");return this.setCurrent(i,!0,e).then((function(t){i.viewNode&&t||((i=i.modify()).after=!0,i.viewNode||(i.inline=!0)),n.dispatchEvent({type:"nextInTree",nodeContext:i}),r.finish(i)})),r.result()},i.addImageFetchers=function(t){if(t instanceof Xe)for(var e=t.values,n=0;n<e.length;n++)this.addImageFetchers(e[n]);else if(t instanceof He){var i=t.url;this.page.fetchers.push(Mi(new Image,i))}},i.applyComputedStyles=function(t,e){var n=e["background-image"];n&&this.addImageFetchers(n);var i=e.position===Ye.relative;for(var r in e)if(!fh[r]){var o=e[r];(o=o.visit(new On(this.xmldoc.url,this.documentURLTransformer))).isNumeric()&&Gt(o.unit)&&(o=qe(o,this.context)),Mr[r]||i&&Ur[r]?this.page.delayedItems.push(new Vr(t,r,o)):et(t,r,o.toString())}},i.applyPseudoelementStyle=function(t,e,n){if(!t.after){var i=(t.shadowContext?t.shadowContext.styler:this.styler).getStyle(this.sourceNode,!1),r=ko(i,"_pseudos");if(r&&(i=r[e])){var o={};t.vertical=this.computeStyle(t.vertical,"rtl"===t.direction,i,o);var a=o.content;fo(a)&&(a.visit(new ho(n,this.context,a,this.exprContentListener)),delete o.content),this.applyComputedStyles(n,o)}}},i.peelOff=function(t,e){var n=this,i=Ni("peelOff"),r=t.firstPseudo,o=t.offsetInNode,a=t.after;if(e>0)t.viewNode.textContent=t.viewNode.textContent.substr(0,e),o+=e;else if(!a&&t.viewNode&&0==o){var s=t.viewNode.parentNode;s&&s.removeChild(t.viewNode)}for(var u=t.boxOffset+e,l=[];t.firstPseudo===r;)l.push(t),t=t.parent;var c=l.pop(),h=c.shadowSibling;return i.loop((function(){for(;l.length>0;){c=l.pop(),t=new oo(c.sourceNode,t,u),0==l.length&&(t.offsetInNode=o,t.after=a),t.shadowType=c.shadowType,t.shadowContext=c.shadowContext,t.nodeShadow=c.nodeShadow,t.shadowSibling=c.shadowSibling?c.shadowSibling:h,h=null;var e=n.setCurrent(t,!1);if(e.isPending())return e}return Ti(!1)})).then((function(){i.finish(t)})),i.result()},i.createElement=function(t,e){return t==W.XHTML?this.document.createElement(e):this.document.createElementNS(t,e)},i.applyFootnoteStyle=function(t,e,n){var i={},r=ko(this.footnoteStyle,"_pseudos");if(t=this.computeStyle(t,e,this.footnoteStyle,i),r&&r.before){var o={},a=this.createElement(W.XHTML,"span");ru(a,"before"),n.appendChild(a),this.computeStyle(t,e,r.before,o),delete o.content,this.applyComputedStyles(a,o)}return delete i.content,this.applyComputedStyles(n,i),t},i.processFragmentedBlockEdge=function(t){t&&t.walkUpBlocks((function(t){var e=t.inheritedProps["box-decoration-break"];if(!e||"slice"===e){var n=t.viewNode;t.vertical?(et(n,"padding-left","0"),et(n,"border-left","none"),et(n,"border-top-left-radius","0"),et(n,"border-bottom-left-radius","0")):(et(n,"padding-bottom","0"),et(n,"border-bottom","none"),et(n,"border-bottom-left-radius","0"),et(n,"border-bottom-right-radius","0"))}}))},i.convertLengthToPx=function(t,e,n){var i=t.num,r=t.unit;if(function(t){switch(t.toLowerCase()){case"em":case"ex":case"rem":return!0;default:return!1}}(r)){for(var o=e;o&&1!==o.nodeType;)o=o.parentNode;return Ho(t,parseFloat(n.getElementComputedStyle(o)["font-size"]),this.context).num}var a=this.context.queryUnitSize(r,!1);return a?i*a:t},i.isSameNodePositionStep=function(t,e){if(t.shadowContext){if(!e.shadowContext)return!1;var n=1===e.node.nodeType?e.node:e.node.parentElement;return t.shadowContext.owner===e.shadowContext.owner&&iu(1===t.node.nodeType?t.node:t.node.parentElement)===iu(n)}return t.node===e.node},i.isSameNodePosition=function(t,e){var n=this;return t.offsetInNode===e.offsetInNode&&t.after==e.after&&t.steps.length===e.steps.length&&t.steps.every((function(t,i){return n.isSameNodePositionStep(t,e.steps[i])}))},i.isPseudoelement=function(t){return!!iu(t)},n}(mt);ch.SVG_URL_ATTRIBUTES=["color-profile","clip-path","cursor","filter","marker","marker-start","marker-end","marker-mid","fill","stroke","mask"];var hh,fh={"box-decoration-break":!0,"float-min-wrap-block":!0,"float-reference":!0,"flow-into":!0,"flow-linger":!0,"flow-options":!0,"flow-priority":!0,"footnote-policy":!0,page:!0},dh=function(){function t(t){this.layoutBox=t.layoutBox,this.window=t.window}var e=t.prototype;return e.subtractOffsets=function(t,e){var n=e.left,i=e.top;return{left:t.left-n,top:t.top-i,right:t.right-n,bottom:t.bottom-i,width:t.width,height:t.height}},e.getRangeClientRects=function(t){var e=this,n=t.getClientRects(),i=this.layoutBox.getBoundingClientRect();return Array.from(n).map((function(t){return e.subtractOffsets(t,i)}))},e.getElementClientRect=function(t){var e=t.getBoundingClientRect(),n=this.layoutBox.getBoundingClientRect();return this.subtractOffsets(e,n)},e.getElementComputedStyle=function(t){return this.window.getComputedStyle(t,null)},t}(),ph=function(){function t(t,e,n,i,r){this.window=t,this.fontSize=e,this.document=t.document,this.root=n||this.document.body;var o=this.root.firstElementChild;o||((o=this.document.createElement("div")).setAttribute("data-vivliostyle-outer-zoom-box","true"),this.root.appendChild(o));var a=o.firstElementChild;a||((a=this.document.createElement("div")).setAttribute("data-vivliostyle-spread-container","true"),o.appendChild(a));var s=o.nextElementSibling;s||((s=this.document.createElement("div")).setAttribute("data-vivliostyle-layout-box","true"),this.root.appendChild(s)),this.outerZoomBox=o,this.contentContainer=a,this.layoutBox=s;var u=new dh(this).getElementComputedStyle(this.root);this.width=i||parseFloat(u.width)||t.innerWidth,this.height=r||parseFloat(u.height)||t.innerHeight}var e=t.prototype;return e.resetZoom=function(){et(this.outerZoomBox,"width",""),et(this.outerZoomBox,"height",""),et(this.contentContainer,"width",""),et(this.contentContainer,"height",""),et(this.contentContainer,"transform","")},e.zoom=function(t,e,n){et(this.outerZoomBox,"width",t*n+"px"),et(this.outerZoomBox,"height",e*n+"px"),et(this.contentContainer,"width",t+"px"),et(this.contentContainer,"height",e+"px"),et(this.contentContainer,"transform","scale("+n+")")},e.clear=function(){for(var t=this.root;t.lastChild;)t.removeChild(t.lastChild)},t}(),gh=function(){function t(t,e,n){this.store=t,this.url=e,this.document=n,this.lang=null,this.totalOffset=-1,this.lastOffset=1,this.root=n.documentElement;var i=null,r=null;if(this.root.namespaceURI==W.XHTML){for(var o=this.root.firstChild;o;o=o.nextSibling)if(1==o.nodeType){var a=o;if(a.namespaceURI==W.XHTML)switch(a.localName){case"head":r=a;break;case"body":i=a}}this.lang=this.root.getAttribute("lang")}this.body=i,this.head=r,this.last=this.root,this.last.setAttribute("data-adapt-eloff","0")}var e=t.prototype;return e.doc=function(){return new bh([this.document])},e.getElementOffset=function(t){var e=t.getAttribute("data-adapt-eloff");if(e)return parseInt(e,10);for(var n=this.lastOffset,i=this.last;i!=t;){var r=i.firstChild;if(!r)for(;!(r=i.nextSibling);)if(null==(i=i.parentNode))throw new Error("Internal error");i=r,1==r.nodeType?(r.setAttribute("data-adapt-eloff",n.toString()),++n):n+=r.textContent.length}return this.lastOffset=n,this.last=t,n-1},e.getNodeOffset=function(t,e,n){var i=0,r=t,o=null;if(1==r.nodeType){if(!n)return this.getElementOffset(r)}else{if(i=e,!(o=r.previousSibling))return i+=1,this.getElementOffset(r=r.parentNode)+i;r=o}for(;;){for(;r.lastChild;)r=r.lastChild;if(1==r.nodeType)break;if(i+=r.textContent.length,!(o=r.previousSibling)){r=r.parentNode;break}r=o}return i+=1,this.getElementOffset(r)+i},e.getTotalOffset=function(){return this.totalOffset<0&&(this.totalOffset=this.getNodeOffset(this.root,0,!0)),this.totalOffset},e.getNodeByOffset=function(t){for(var e,n=this,i=this.root,r=function(){if((e=n.getElementOffset(i))>=t)return{v:i};var r=i.children;if(!r)return"break";var o=ft(r.length,(function(e){return n.getElementOffset(r[e])>t}));if(0==o)return"break";i=r[o-1]};;){var o=r();if("break"===o)break;if("object"==typeof o)return o.v}for(var a=e+1,s=i,u=s.firstChild||s.nextSibling,l=null;;){if(u){if(1==u.nodeType)break;if(l=s=u,(a+=u.textContent.length)>t&&!/^\s*$/.test(u.textContent))break}else if(!(s=s.parentNode))break;u=s.nextSibling}return u&&l&&/^\s*$/.test(l.textContent)&&(l=u),l||i},e.buildIdMap=function(t){var e=t.getAttribute("id");e&&!this.idMap[e]&&(this.idMap[e]=t);var n=t.getAttributeNS(W.XML,"id");n&&!this.idMap[n]&&(this.idMap[n]=t);for(var i=t.firstElementChild;i;i=i.nextElementSibling)this.buildIdMap(i)},e.getElement=function(t){var e=t.match(/([^#]*)#(.+)$/);if(!e||e[1]&&e[1]!=this.url)return null;var n=e[2],i=this.document.getElementById(n);return!i&&this.document.getElementsByName&&(i=this.document.getElementsByName(n)[0]),i||(this.idMap||(this.idMap={},this.buildIdMap(this.document.documentElement)),i=this.idMap[n]),i},t}();function mh(t,e,n){var i,r=n||new DOMParser;try{i=r.parseFromString(t,e)}catch(t){}if(!i)return null;var o=i.documentElement;if("parsererror"===o.localName)return null;for(var a=o.firstElementChild;a;a=a.nextElementSibling)if("parsererror"===a.localName)return null;return i}function vh(t,e){var n=t.responseXML;if(!n){var i=new DOMParser,r=t.responseText;if(r){var o=function(t){var e=t.contentType;if(e){for(var n=Object.keys(hh),i=0;i<n.length;i++)if(hh[n[i]]===e)return e;if(e.match(/\+xml$/))return hh.APPLICATION_XML}var r=t.url.match(/\.([^./]+)$/);if(r)switch(r[1]){case"html":case"htm":return hh.TEXT_HTML;case"xhtml":case"xht":return hh.APPLICATION_XHTML_XML;case"svg":case"svgz":return hh.IMAGE_SVG_XML;case"opf":case"xml":return hh.APPLICATION_XML}return null}(t);if((n=mh(r,o||hh.APPLICATION_XML,i))&&!o){var a=n.documentElement;"html"!==a.localName.toLowerCase()||a.namespaceURI?"svg"===a.localName.toLowerCase()&&n.contentType!==hh.IMAGE_SVG_XML&&(n=mh(r,hh.IMAGE_SVG_XML,i)):n=mh(r,hh.TEXT_HTML,i)}n||(n=mh(r,hh.TEXT_HTML,i))}}return Ti(n?new gh(e,t.url,n):null)}!function(t){t.TEXT_HTML="text/html",t.TEXT_XML="text/xml",t.APPLICATION_XML="application/xml",t.APPLICATION_XHTML_XML="application/xhtml+xml",t.IMAGE_SVG_XML="image/svg+xml"}(hh||(hh={}));var Eh=new(function(){function t(t){this.fn=t}var e=t.prototype;return e.check=function(t){return this.fn(t)},e.withAttribute=function(e,n){var i=this;return new t((function(t){return i.check(t)&&1==t.nodeType&&t.getAttribute(e)==n}))},e.withChild=function(e,n){var i=this;return new t((function(t){if(!i.check(t))return!1;var r=new bh([t]);return r=r.child(e),n&&(r=r.predicate(n)),r.size()>0}))},t}())((function(t){return!0})),bh=function(){function t(t){this.nodes=t}var e=t.prototype;return e.asArray=function(){return this.nodes},e.size=function(){return this.nodes.length},e.predicate=function(e){for(var n,i=[],r=_(this.nodes);!(n=r()).done;){var o=n.value;e.check(o)&&i.push(o)}return new t(i)},e.forEachNode=function(e){for(var n=[],i=function(t){n.push(t)},r=0;r<this.nodes.length;r++)e(this.nodes[r],i);return new t(n)},e.forEach=function(t){for(var e=[],n=0;n<this.nodes.length;n++)e.push(t(this.nodes[n]));return e},e.forEachNonNull=function(t){for(var e=[],n=0;n<this.nodes.length;n++){var i=t(this.nodes[n]);null!=i&&e.push(i)}return e},e.child=function(t){return this.forEachNode((function(e,n){for(var i=e.firstChild;i;i=i.nextSibling)1==i.nodeType&&i.localName==t&&n(i)}))},e.childElements=function(){return this.forEachNode((function(t,e){for(var n=t.firstChild;n;n=n.nextSibling)1==n.nodeType&&e(n)}))},e.attribute=function(t){return this.forEachNonNull((function(e){return 1==e.nodeType?e.getAttribute(t):null}))},e.textContent=function(){return this.forEach((function(t){return t.textContent}))},t}(),Ch=new Bi((function(){var t=Ni("uaStylesheetBase"),e=Ul(),n=K("user-agent-base.css",X),i=new za(null,null,null,null,null,e,!0);return i.startStylesheet($i.USER_AGENT),Va=i.cascade,Cr(Xi,i,n,null,null).thenFinish(t),t.result()}),"uaStylesheetBaseFetcher"),yh=function(){function t(t,e,n,i,r,o,a,s,u,l){this.store=t,this.rootScope=e,this.pageScope=n,this.cascade=i,this.rootBox=r,this.fontFaces=o,this.footnoteProps=a,this.flowProps=s,this.viewportProps=u,this.pageProps=l,this.fontDeobfuscator=t.fontDeobfuscator,this.validatorSet=t.validatorSet,this.pageScope.defineBuiltIn("has-content",(function(t){var e=this.currentLayoutPosition,n=e.firstFlowChunkOfFlow(t=t);return this.matchPageSide(e.startSideOfFlow(t))&&e.hasContent(t,this.lookupOffset)&&!!n&&!this.flowChunkIsAfterParentFlowForcedBreak(n)})),this.pageScope.defineName("page-number",new Ee(this.pageScope,(function(){return this.pageNumberOffset+this.currentLayoutPosition.page}),"page-number"))}return t.prototype.sizeViewport=function(t,e,n,i){if(this.viewportProps.length){var r=new Wt(this.rootScope,t,e,n),o=function(t,e){for(var n={},i=0;i<e.length;i++)Uo(t,n,e[i],0,null,null,null);return n}(r,this.viewportProps),a=o.width,s=o.height,u=o["text-zoom"],l=1;if(a&&s||u){var c=Ht.em;if((u?u.evaluate(r,"text-zoom"):null)===Ye.scale&&(l=c/n,n=c,t*=l,e*=l),a&&s){var h=$e(a.evaluate(r,"width"),r),f=$e(s.evaluate(r,"height"),r);if(h>0&&f>0)return{width:i&&i.spreadView?2*(h+i.pageBorder):h,height:f,fontSize:n}}}}return{width:t,height:e,fontSize:n}},t}(),wh=function(t){function n(e,n,i,r,o,a,s,u,l,c,h,f,d){var p;for(var g in(p=t.call(this,e.rootScope,r.width,r.height,r.fontSize)||this).style=e,p.xmldoc=n,p.viewport=r,p.clientLayout=o,p.fontMapper=a,p.customRenderer=s,p.fallbackMap=u,p.pageNumberOffset=l,p.documentURLTransformer=c,p.counterStore=h,p.primaryFlows={body:!0},p.rootPageBoxInstance=null,p.styler=null,p.stylerMap=null,p.currentLayoutPosition=null,p.layoutPositionAtPageStart=null,p.lookupOffset=0,p.pageBoxInstances={},p.pageManager=null,p.pageBreaks={},p.pageProgression=null,p.isVersoFirstPage=!1,p.blankPageAtStart=!1,p.pageSheetSize={},p.pageSheetHeight=0,p.pageSheetWidth=0,p.lang=n.lang||i,p.faces=new Xl(p.style.fontDeobfuscator),p.rootPageFloatLayoutContext=new gs(null,null,null,null,null,null,null),p.pageProgression=f||null,p.isVersoFirstPage=!!d,e.flowProps){var m=Oo(e.flowProps[g],"flow-consume");m&&(m.evaluate(L(p),"flow-consume")==Ye.all?p.primaryFlows[g]=!0:delete p.primaryFlows[g])}return p}I(n,t);var i=n.prototype;return i.init=function(){var t=this,e=Ni("StyleInstance.init"),n=this.counterStore.createCounterListener(this.xmldoc.url),i=this.counterStore.createCounterResolver(this.xmldoc.url,this.style.rootScope,this.style.pageScope);this.styler=new vl(this.xmldoc,this.style.cascade,this.style.rootScope,this,this.primaryFlows,this.style.validatorSet,n,i),i.setStyler(this.styler),this.styler.resetFlowChunkStream(this),this.stylerMap={},this.stylerMap[this.xmldoc.url]=this.styler;var r=this.styler.getTopContainerStyle();this.pageProgression||(this.pageProgression=Cc(r)),this.matchStartPageSide(this.styler.breakBeforeValues[0])||(0===this.pageNumberOffset?this.isVersoFirstPage=!0:this.blankPageAtStart=!0),this.rootPageBoxInstance=new fc(this.style.rootBox);var o=this.style.cascade.createInstance(this,n,i,this.lang);this.rootPageBoxInstance.applyCascadeAndInit(o,r),this.rootPageBoxInstance.resolveAutoSizing(this),this.pageManager=new Kc(o,this.style.pageScope,this.rootPageBoxInstance,this,r);for(var a,s=[],u=_(this.style.fontFaces);!(a=u()).done;){var l=a.value;if(!l.condition||l.condition.evaluate(this)){var c=Gl(l.properties,this),h=new Wl(c);s.push(h)}}this.fontMapper.findOrLoadFonts(s,this.faces).thenFinish(e);var f=this.style.pageProps;return Object.keys(f).forEach((function(e){var n=Ic(xc(f[e]),t);t.pageSheetSize[e]={width:n.pageWidth+2*n.cropOffset,height:n.pageHeight+2*n.cropOffset}})),e.result()},i.matchStartPageSide=function(t){var n=this.pageNumberOffset%2==(this.isVersoFirstPage?1:0),i=this.pageProgression==e.PageProgression.LTR;switch(t){case"left":return n!==i;case"right":return n===i;case"recto":return n;case"verso":return!n;default:return!0}},i.getStylerForDoc=function(t){var e=this.stylerMap[t.url];if(!e){var n=this.style.store.getStyleForDoc(t),i=new Wt(n.rootScope,this.pageWidth(),this.pageHeight(),this.initialFontSize),r=this.counterStore.createCounterListener(t.url),o=this.counterStore.createCounterResolver(t.url,n.rootScope,n.pageScope);e=new vl(t,n.cascade,n.rootScope,i,this.primaryFlows,n.validatorSet,r,o),this.stylerMap[t.url]=e}return e},i.registerInstance=function(t,e){this.pageBoxInstances[t]=e},i.lookupInstance=function(t){return this.pageBoxInstances[t]},i.encounteredFlowChunk=function(t,e){var n=this.currentLayoutPosition;if(n){n.flows[t.flowName]?e=n.flows[t.flowName]:n.flows[t.flowName]=e;var i=n.flowPositions[t.flowName];i||(i=new uo,n.flowPositions[t.flowName]=i);var r=new ao({steps:[{node:t.element,shadowType:eo.NONE,shadowContext:null,nodeShadow:null,shadowSibling:null,formattingContext:null,fragmentIndex:0}],offsetInNode:0,after:!1,preprocessedTextContent:null}),o=new so(r,t);i.positions.push(o)}},i.getConsumedOffset=function(t){for(var e=Number.POSITIVE_INFINITY,n=0;n<t.positions.length;n++){for(var i=t.positions[n].chunkPosition.primary,r=i.steps[0].node,o=i.offsetInNode,a=i.after,s=0;r.ownerDocument!=this.xmldoc.document;)s++,r=i.steps[s].node,a=!1,o=0;var u=this.xmldoc.getNodeOffset(r,o,a);u<e&&(e=u)}return e},i.getPosition=function(t,e){if(!t)return 0;var n=Number.POSITIVE_INFINITY;for(var i in this.primaryFlows){var r=t.flowPositions[i];if(e||r&&0!=r.positions.length||!this.currentLayoutPosition||(this.styler.styleUntilFlowIsReached(i),r=this.currentLayoutPosition.flowPositions[i],t!=this.currentLayoutPosition&&r&&(r=r.clone(),t.flowPositions[i]=r)),r){var o=this.getConsumedOffset(r);o<n&&(n=o)}}return n},i.dumpLocation=function(t){for(var e in f.debug("Location - page",this.currentLayoutPosition.page),f.debug("  current:",t),f.debug("  lookup:",this.lookupOffset),this.currentLayoutPosition.flowPositions)for(var n,i=_(this.currentLayoutPosition.flowPositions[e].positions);!(n=i()).done;)f.debug("  Chunk",e+":",n.value.flowChunk.startOffset)},i.matchPageSide=function(t){switch(t){case"left":case"right":case"recto":case"verso":return new me(this.style.pageScope,t+"-page").evaluate(this);default:return!0}},i.updateStartSide=function(t){for(var e in t.flowPositions){var n=t.flowPositions[e];if(n&&n.positions.length>0){var i=n.positions[0].flowChunk;if(this.getConsumedOffset(n)===i.startOffset){var r=n.positions[0].flowChunk.breakBefore,o=Fs(n.startSide);n.startSide=Is(xs(o,r))}}}},i.selectPageMaster=function(t){var e=this.currentLayoutPosition,n=this.getPosition(e);if(n==Number.POSITIVE_INFINITY)return null;for(var i,r=this.rootPageBoxInstance.children,o=0;o<r.length;o++)if("vivliostyle-page-rule-master"!==(i=r[o]).pageBox.pseudoName){var a=1,s=i.getProp(this,"utilization");s&&s.isNum()&&(a=s.num);var u=this.queryUnitSize("em",!1),l=this.pageWidth()*this.pageHeight(),c=Math.ceil(a*l/(u*u));this.lookupOffset=this.styler.styleUntil(n,c),this.updateStartSide(e),this.layoutPositionAtPageStart=e.clone(),this.initLingering(),this.clearScope(this.style.pageScope);var h=i.getProp(this,"enabled");if(!h||h===Ye._true)return 1===e.page&&this.blankPageAtStart&&(i.style={},t={}),this.pageManager.getPageRulePageMaster(i,t)}throw new Error("No enabled page masters")},i.flowChunkIsAfterParentFlowForcedBreak=function(t){var e=this.layoutPositionAtPageStart.flows,n=e[t.flowName].parentFlowName;if(n){var i=t.startOffset,r=e[n].forcedBreakOffsets;if(!r.length||i<r[0])return!1;var o=ft(r.length,(function(t){return r[t]>i}))-1,a=r[o],s=this.layoutPositionAtPageStart.flowPositions[n],u=this.getConsumedOffset(s);return!(a<u)&&(u<a||!this.matchPageSide(s.startSide))}return!1},i.setFormattingContextToColumn=function(t,e){var n=this.currentLayoutPosition.flows[e];n.formattingContext||(n.formattingContext=new Ks(null)),t.flowRootFormattingContext=n.formattingContext},i.layoutDeferredPageFloats=function(t){var e=t.pageFloatLayoutContext,n=e.getDeferredPageFloatContinuations();if(n.length&&"page"===n[0].float.floatReference){var i=n[0].nodePosition.steps[0].node,r=i&&this.xmldoc.getNodeOffset(i,0,!1),o=this.layoutPositionAtPageStart.flowPositions.body,a=o&&this.getConsumedOffset(o);if(null!=r&&null!=a&&r>a)return Ti(!0)}var s=Ni("layoutDeferredPageFloats"),u=!1,l=0;return s.loopWithFrame((function(i){if(l!==n.length){var r=n[l++],o=r.float,a=(new vs).findByFloat(o),s=a.findPageFloatFragment(o,e);if(!s||!s.hasFloat(o))return e.isForbidden(o)||e.hasPrecedingFloatsDeferredToNext(o)?(e.deferPageFloat(r),void i.breakLoop()):void t.layoutPageFloatInner(r,a,null,s).then((function(t){if(t){var n=e.parent.isInvalidated();n?i.breakLoop():(e.isInvalidated()&&!n&&(u=!0,e.validate()),i.continueLoop())}else i.breakLoop()}));i.continueLoop()}else i.breakLoop()})).then((function(){u&&e.invalidate(),s.finish(!0)})),s.result()},i.getLastAfterPositionIfDeferredFloatsExists=function(t,e){var n;return t.pageFloatLayoutContext.getPageFloatContinuationsDeferredToNext().length>0&&t.lastAfterPosition?(e?(n=e.clone()).primary=t.lastAfterPosition:n=new ao(t.lastAfterPosition),n):null},i.layoutColumn=function(t,e){var n=this,i=this.currentLayoutPosition.flowPositions[e];if(!i||!this.matchPageSide(i.startSide))return Ti(!0);i.startSide="any",this.setFormattingContextToColumn(t,e),t.init(),this.primaryFlows[e]&&t.bands.length>0&&(t.forceNonfitting=!1);var r=Ni("layoutColumn");return this.layoutDeferredPageFloats(t).then((function(){if(t.pageFloatLayoutContext.isInvalidated())r.finish(!0);else{var o=[],a=[],s=!0;r.loopWithFrame((function(r){if(t.pageFloatLayoutContext.hasContinuingFloatFragmentsInFlow(e))r.breakLoop();else{for(var u=function(){for(var e=0;a.includes(e);)e++;var u=i.positions[e];if(u.flowChunk.startOffset>n.lookupOffset||n.flowChunkIsAfterParentFlowForcedBreak(u.flowChunk))return"break";for(var l=e+1;l<i.positions.length;l++)if(!a.includes(l)){var c=i.positions[l];if(c.flowChunk.startOffset>n.lookupOffset||n.flowChunkIsAfterParentFlowForcedBreak(c.flowChunk))break;c.flowChunk.isBetter(u.flowChunk)&&(u=c,e=l)}var h=u.flowChunk,f=!0;return t.layout(u.chunkPosition,s,i.breakAfter).then((function(l){if(t.pageFloatLayoutContext.isInvalidated())r.breakLoop();else{if(s=!1,u.flowChunk.repeated&&(null===l||h.exclusive)&&o.push(e),h.exclusive)return a.push(e),void r.breakLoop();var c=!!l||!!t.pageBreakType,d=n.getLastAfterPositionIfDeferredFloatsExists(t,l);t.pageBreakType&&d?(u.chunkPosition=d,i.breakAfter=t.pageBreakType,t.pageBreakType=null):(a.push(e),(l||d)&&(u.chunkPosition=l||d,o.push(e)),t.pageBreakType&&(i.startSide=Is(t.pageBreakType))),c?r.breakLoop():(t.forceNonfitting=!1,f?f=!1:r.continueLoop())}})),f?(f=!1,{v:void 0}):void 0};i.positions.length-a.length>0;){var l=u();if("break"===l)break;if("object"==typeof l)return l.v}r.breakLoop()}})).then((function(){if(!t.pageFloatLayoutContext.isInvalidated()){i.positions=i.positions.filter((function(t,e){return o.includes(e)||!a.includes(e)})),"column"===i.breakAfter&&(i.breakAfter=null),t.saveDistanceToBlockEndFloats();var e=t.pageFloatLayoutContext.getMaxReachedAfterEdge();t.updateMaxReachedAfterEdge(e)}r.finish(!0)}))}})),r.result()},i.createLayoutConstraint=function(t){var e=this.counterStore.createLayoutConstraint(this.currentLayoutPosition.page-1);return new du([e].concat(t.getLayoutConstraints()))},i.createAndLayoutColumn=function(t,e,n,i,r,o,a,s,u,l,c,h,f,d){var p,g=this,m=t.vertical?t.isAutoWidth&&t.isRightDependentOnAutoWidth:t.isAutoHeight&&t.isTopDependentOnAutoHeight,v=r.element,E=new gs(s,ls.COLUMN,null,a,null,null,null),b=this.currentLayoutPosition.clone(),C=Ni("createAndLayoutColumn");return C.loopWithFrame((function(t){var C=g.createLayoutConstraint(E);if(u>1){var y=g.viewport.document.createElement("div");if(et(y,"position","absolute"),v.appendChild(y),(p=new mu(y,f,g.clientLayout,C,E)).forceNonfitting=d,p.vertical=r.vertical,p.snapHeight=r.snapHeight,p.snapWidth=r.snapWidth,r.vertical){var w=o*(c+l)+r.paddingTop;p.setHorizontalPosition(r.paddingLeft,r.width),p.setVerticalPosition(w,c)}else{var D=o*(c+l)+r.paddingLeft;p.setVerticalPosition(r.paddingTop,r.height),p.setHorizontalPosition(D,c)}p.originX=e,p.originY=n}else(p=new mu(v,f,g.clientLayout,C,E)).copyFrom(r);p.exclusions=m?[]:i.concat(),p.innerShape=h,E.setContainer(p),p.width>=0?g.layoutColumn(p,a).then((function(){E.isInvalidated()||E.finish(),p.pageFloatLayoutContext.isInvalidated()&&!s.isInvalidated()?(p.pageFloatLayoutContext.validate(),g.currentLayoutPosition=b.clone(),p.element!==v&&v.removeChild(p.element),t.continueLoop()):t.breakLoop()})):(E.finish(),t.breakLoop())})).then((function(){C.finish(p)})),C.result()},i.setPagePageFloatLayoutContextContainer=function(t,e,n){(e instanceof Xc||e instanceof dc&&!(e instanceof zc))&&t.setContainer(n)},i.getRegionPageFloatLayoutContext=function(t,e,n,i){var r=e.getProp(this,"writing-mode")||null,o=e.getProp(this,"direction")||null;return new gs(t,ls.REGION,n,i,null,r,o)},i.layoutFlowColumnsWithBalancing=function(t,e,n,i,r,o,a,s,u){var l=this,c=this.currentLayoutPosition.clone(),h=this.getRegionPageFloatLayoutContext(o,e,a,s),f=!0,d=function(){return l.currentLayoutPosition=c.clone(),l.layoutFlowColumns(t,e,n,i,r,o,h,a,s,u,f).thenAsync((function(t){return Ti(t?{columns:t,position:l.currentLayoutPosition}:null)}))};return d().thenAsync((function(t){if(!t)return Ti(null);if(u<=1)return Ti(t.columns);var n=e.getProp(l,"column-fill")||Ye.balance,i=function(t,e,n,i,r,o,a){if(e===Ye.auto)return null;var s=o[o.length-1];return 0===a.positions.length||s&&s.pageBreakType?new ll(n,i,r,t):e===Ye.balance_all?new fl(n,i,r):null}(u,n,d,h,a,t.columns,l.currentLayoutPosition.flowPositions[s]);return i?(f=!1,o.lock(),h.lock(),i.balanceColumns(t).thenAsync((function(t){return o.unlock(),o.validate(),h.unlock(),l.currentLayoutPosition=t.position,Ti(t.columns)}))):Ti(t.columns)}))},i.layoutFlowColumns=function(t,e,n,i,r,o,a,s,u,l,c){var h=this,f=Ni("layoutFlowColumns"),d=this.currentLayoutPosition.clone(),p=e.getPropAsNumber(this,"column-gap"),g=l>1?e.getPropAsNumber(this,"column-width"):s.width,m=e.getActiveRegions(this),v=In(e.getProp(this,"shape-inside"),0,0,s.width,s.height,this),E=new ch(u,this,this.viewport,this.styler,m,this.xmldoc,this.faces,this.style.footnoteProps,this,t,this.customRenderer,this.fallbackMap,this.documentURLTransformer),b=0,C=null,y=[];return f.loopWithFrame((function(t){h.createAndLayoutColumn(e,n,i,r,s,b++,u,a,l,p,g,v,E,c).then((function(e){return o.isInvalidated()?(y=null,void t.breakLoop()):(!(e.pageBreakType&&"column"!==e.pageBreakType)&&b!==l||a.isInvalidated()||a.finish(),a.isInvalidated()?(b=0,h.currentLayoutPosition=d.clone(),a.validate(),void(a.isLocked()?(y=null,t.breakLoop()):t.continueLoop())):(y[b-1]=C=e,C.pageBreakType&&"column"!=C.pageBreakType&&(b=l,"region"!=C.pageBreakType&&(h.pageBreaks[u]=!0)),void(b<l?t.continueLoop():t.breakLoop())))}))})).then((function(){f.finish(y)})),f.result()},i.layoutContainer=function(t,e,n,i,r,o,a){var s=this;e.reset();var u=e.getProp(this,"enabled");if(u&&u!==Ye._true)return Ti(!0);var l=Ni("layoutContainer"),c=e.getProp(this,"wrap-flow")===Ye.auto,h=e.getProp(this,"flow-from"),f=this.viewport.document.createElement("div"),d=e.getProp(this,"position");et(f,"position",d?d.name:"absolute");var p=e instanceof zc;e instanceof gc?n.appendChild(f):n.insertBefore(f,n.firstChild);var g,m=new co(f);m.vertical=e.vertical,m.exclusions=o,e.prepareContainer(this,m,t,this.faces,this.clientLayout),m.originX=i,m.originY=r,i+=m.left+m.marginLeft+m.borderLeft,r+=m.top+m.marginTop+m.borderTop,this.setPagePageFloatLayoutContextContainer(a,e,m);var v=!1;if(h&&h.isIdent())if(this.pageBreaks[h.toString()])a.isInvalidated()||e.finishContainer(this,m,t,null,1,this.clientLayout,this.faces),g=Ti(!0);else{var E=Ni("layoutContainer.inner"),b=h.toString(),C=e.getPropAsNumber(this,"column-count");this.layoutFlowColumnsWithBalancing(t,e,i,r,o,a,m,b,C).then((function(n){if(!a.isInvalidated()){var i=n[0];i.element===f&&(m=i),m.computedBlockSize=Math.max.apply(null,n.map((function(t){return t.computedBlockSize}))),e.finishContainer(s,m,t,i,C,s.clientLayout,s.faces);var r=s.currentLayoutPosition.flowPositions[b];r&&"region"===r.breakAfter&&(r.breakAfter=null)}E.finish(!0)})),g=E.result()}else{var y=e.getProp(this,"content");if(y&&fo(y)){var w="span";y.url&&(w="img");var D=this.viewport.document.createElement(w);y.visit(new ho(D,this,y,this.counterStore.getExprContentListener())),f.appendChild(D),"img"==w&&e.transferSinglUriContentProps(this,D,this.faces),e.transferContentProps(this,m,t,this.faces)}else e.suppressEmptyBoxGeneration&&(n.removeChild(f),v=!0);v||e.finishContainer(this,m,t,null,1,this.clientLayout,this.faces),g=Ti(!0)}return g.then((function(){if(a.isInvalidated())l.finish(!0);else{if(!e.isAutoHeight||Math.floor(m.computedBlockSize)>0){if(!v&&!c){var u=e.getProp(s,"shape-outside"),h=m.getOuterShape(u,s);o.push(h)}}else if(0==e.children.length)return n.removeChild(f),void l.finish(!0);var d=p?0:e.children.length-1;l.loop((function(){for(;d>=0&&d<e.children.length;){var n=e.children[p?d++:d--],u=s.layoutContainer(t,n,f,i,r,o,a);if(u.isPending())return u.thenAsync((function(){return Ti(!a.isInvalidated())}));if(a.isInvalidated())break}return Ti(!1)})).then((function(){l.finish(!0)}))}})),l.result()},i.processLinger=function(){var t=this.currentLayoutPosition.page;for(var e in this.currentLayoutPosition.flowPositions)for(var n=this.currentLayoutPosition.flowPositions[e],i=n.positions.length-1;i>=0;i--){var r=n.positions[i];r.flowChunk.startPage>=0&&r.flowChunk.startPage+r.flowChunk.linger-1<=t&&n.positions.splice(i,1)}},i.initLingering=function(){var t=this.currentLayoutPosition.page;for(var e in this.currentLayoutPosition.flowPositions)for(var n=this.currentLayoutPosition.flowPositions[e],i=n.positions.length-1;i>=0;i--){var r=n.positions[i];r.flowChunk.startPage<0&&r.flowChunk.startOffset<this.lookupOffset&&(r.flowChunk.startPage=t)}},i.noMorePrimaryFlows=function(t){for(var e in this.primaryFlows){var n=t.flowPositions[e];if(n&&n.positions.length>0)return!1}return!0},i.layoutNextPage=function(t,n){var i=this,r=t.container===t.bleedBox;this.pageBreaks={},n?(this.currentLayoutPosition=n.clone(),this.styler.replayFlowElementsFromOffset(n.highestSeenOffset)):(this.currentLayoutPosition=new lo,this.styler.replayFlowElementsFromOffset(-1)),this.lang&&t.bleedBox.setAttribute("lang",this.lang),(n=this.currentLayoutPosition).page++,this.clearScope(this.style.pageScope),this.layoutPositionAtPageStart=n.clone();var o=r?{}:this.pageManager.getCascadedPageStyle(),a=this.selectPageMaster(o);if(!a)return Ti(null);var s=0;if(!r){t.setAutoPageWidth(a.pageBox.specified.width.value===Qe),t.setAutoPageHeight(a.pageBox.specified.height.value===Je),this.counterStore.setCurrentPage(t),this.counterStore.updatePageCounters(o,this);var u=Ic(xc(o),this);this.setPageSizeAndBleed(u,t),function(t,e,n,i){var r=!1,o=!1,a=t.marks;if(a){var s=a.value;s.isSpaceList()?s.values.forEach((function(t){t===Ye.crop?r=!0:t===Ye.cross&&(o=!0)})):s===Ye.crop?r=!0:s===Ye.cross&&(o=!0)}if(r||o){var u=n.container,l=u.ownerDocument,c=e.bleed,h=$e(Sc,i),f=$e(Nc,i),d=$e(Tc,i);if(c){var p=t["background-color"];p&&p.value&&(n.bleedBox.style.backgroundColor=p.value.stringValue())}r&&Object.keys(yc).forEach((function(t){var e=function(t,e,n,i,r,o){var a=i;a<=r+2*Ht.mm&&(a=r+i/2);var s=Math.max(i,a),u=r+s+n/2,l=Fc(t,u,u),c=[[0,r+i],[i,r+i],[i,r+i-a]],h=c.map((function(t){return[t[1],t[0]]}));e!==yc.TOP_RIGHT&&e!==yc.BOTTOM_RIGHT||(c=c.map((function(t){return[r+s-t[0],t[1]]})),h=h.map((function(t){return[r+s-t[0],t[1]]}))),e!==yc.BOTTOM_LEFT&&e!==yc.BOTTOM_RIGHT||(c=c.map((function(t){return[t[0],r+s-t[1]]})),h=h.map((function(t){return[t[0],r+s-t[1]]})));var f=Pc(t,n);f.setAttribute("points",c.map((function(t){return t.join(",")})).join(" ")),l.appendChild(f);var d=Pc(t,n);return d.setAttribute("points",h.map((function(t){return t.join(",")})).join(" ")),l.appendChild(d),e.split(" ").forEach((function(t){l.style[t]=o+"px"})),l}(l,yc[t],h,d,c,f);u.appendChild(e)})),o&&Object.keys(wc).forEach((function(t){var e=function(t,e,n,i,r){var o,a,s=2*i;e===wc.TOP||e===wc.BOTTOM?(o=s,a=i):(o=i,a=s);var u=Fc(t,o,a),l=Pc(t,n);l.setAttribute("points","0,"+a/2+" "+o+","+a/2),u.appendChild(l);var c=Pc(t,n);c.setAttribute("points",o/2+",0 "+o/2+","+a),u.appendChild(c);var h,f=Pc(t,n,"circle");switch(f.setAttribute("cx",o/2),f.setAttribute("cy",a/2),f.setAttribute("r",i/4),u.appendChild(f),e){case wc.TOP:h=wc.BOTTOM;break;case wc.BOTTOM:h=wc.TOP;break;case wc.LEFT:h=wc.RIGHT;break;case wc.RIGHT:h=wc.LEFT}return Object.keys(wc).forEach((function(t){var n=wc[t];n===e?u.style[n]=r+"px":n!==h&&(u.style[n]="0",u.style["margin-"+n]="auto")})),u}(l,wc[t],h,d,f);u.appendChild(e)}))}}(o,u,t,this),s=u.bleedOffset+u.bleed}var l=!r&&a.getProp(this,"writing-mode")||Ye.horizontal_tb;this.pageVertical=l!=Ye.horizontal_tb;var c=a.getProp(this,"direction")||Ye.ltr,h=new gs(this.rootPageFloatLayoutContext,ls.PAGE,null,null,null,l,c),f=Ni("layoutNextPage");return f.loopWithFrame((function(e){i.layoutContainer(t,a,t.bleedBox,s,s,[],h).then((function(){h.isInvalidated()||h.finish(),h.isInvalidated()?(i.currentLayoutPosition=i.layoutPositionAtPageStart.clone(),h.validate(),e.continueLoop()):e.breakLoop()}))})).then((function(){if(a.adjustPageLayout(i,t,i.clientLayout),!r){var o=new me(a.pageBox.scope,"left-page");t.side=o.evaluate(i)?e.PageSide.LEFT:e.PageSide.RIGHT,i.processLinger(),n=i.currentLayoutPosition,Object.keys(n.flowPositions).forEach((function(t){var e=n.flowPositions[t],r=e.breakAfter;!r||"page"!==r&&i.matchPageSide(r)||(e.breakAfter=null)}))}i.currentLayoutPosition=i.layoutPositionAtPageStart=null,n.highestSeenOffset=i.styler.getReachedOffset();var s=i.style.store.getTriggersForDoc(i.xmldoc);t.finish(s,i.clientLayout),i.noMorePrimaryFlows(n)&&(n=null),f.finish(n)})),f.result()},i.setPageSizeAndBleed=function(t,e){this.actualPageWidth=t.pageWidth,this.actualPageHeight=t.pageHeight,this.pageSheetWidth=t.pageWidth+2*t.cropOffset,this.pageSheetHeight=t.pageHeight+2*t.cropOffset,e.container.style.width=this.pageSheetWidth+"px",e.container.style.height=this.pageSheetHeight+"px",e.bleedBox.style.left=t.bleedOffset+"px",e.bleedBox.style.right=t.bleedOffset+"px",e.bleedBox.style.top=t.bleedOffset+"px",e.bleedBox.style.bottom=t.bleedOffset+"px",e.bleedBox.style.padding=t.bleed+"px",e.bleedBox.style.paddingTop=t.bleed+.01+"px"},n}(Wt),Dh=function(t){function e(e,n,i,r){var o;return(o=t.call(this,e.rootScope,e,n,i,r,e.validatorSet,!i)||this).masterHandler=e,o.insideRegion=!1,o}I(e,t);var n=e.prototype;return n.startPageTemplateRule=function(){},n.startPageMasterRule=function(t,e,n){var i=new Zl(this.masterHandler.pageScope,t,e,n,this.masterHandler.rootBox,this.condition,this.owner.getBaseSpecificity());this.masterHandler.pushHandler(new bc(i.scope,this.masterHandler,i,this.validatorSet))},n.startWhenRule=function(t){var n=t.expr;null!=this.condition&&(n=Se(this.scope,this.condition,n)),this.masterHandler.pushHandler(new e(this.masterHandler,n,this,this.regionId))},n.startDefineRule=function(){this.masterHandler.pushHandler(new Xa(this.scope,this.owner))},n.startFontFaceRule=function(){var t={};this.masterHandler.fontFaces.push({properties:t,condition:this.condition}),this.masterHandler.pushHandler(new ja(this.scope,this.owner,null,t,this.masterHandler.validatorSet))},n.startFlowRule=function(t){var e=this.masterHandler.flowProps[t];e||(this.masterHandler.flowProps[t]=e={}),this.masterHandler.pushHandler(new ja(this.scope,this.owner,null,e,this.masterHandler.validatorSet))},n.startViewportRule=function(){var t={};this.masterHandler.viewportProps.push(t),this.masterHandler.pushHandler(new ja(this.scope,this.owner,this.condition,t,this.masterHandler.validatorSet))},n.startFootnoteRule=function(t){var e=this.masterHandler.footnoteProps;if(t){var n=Lo(e,"_pseudos");(e=n[t])||(n[t]=e={})}this.masterHandler.pushHandler(new ja(this.scope,this.owner,null,e,this.masterHandler.validatorSet))},n.startRegionRule=function(){this.insideRegion=!0,this.startSelectorRule()},n.startPageRule=function(){var t=new nh(this.masterHandler.pageScope,this.masterHandler,this,this.validatorSet,this.masterHandler.pageProps);this.masterHandler.pushHandler(t),t.startPageRule()},n.startRuleBody=function(){if(za.prototype.startRuleBody.call(this),this.insideRegion){this.insideRegion=!1;var t="R"+this.masterHandler.regionCount++;this.special("region-id",_e(t)),this.endRule();var n=new e(this.masterHandler,this.condition,this,t);this.masterHandler.pushHandler(n),n.startRuleBody()}},e}(za);function Sh(t){var e=t.getAttribute("content");if(!e)return"";for(var n,i={};null!=(n=e.match(/^,?\s*([-A-Za-z_.][-A-Za-z_0-9.]*)\s*=\s*([-+A-Za-z_0-9.]*)\s*/));)e=e.substr(n[0].length),i[n[1]]=n[2];var r=i.width-0,o=i.height-0;return r&&o?"@-epubx-viewport{width:"+r+"px;height:"+o+"px;}":""}var Nh=function(t){function e(e){var n;return(n=t.call(this)||this).validatorSet=e,n.regionCount=0,n.fontFaces=[],n.footnoteProps={},n.flowProps={},n.viewportProps=[],n.pageProps={},n.rootScope=new Vt(null),n.pageScope=new Vt(n.rootScope),n.rootBox=new ql(n.rootScope),n.cascadeParserHandler=new Dh(L(n),null,null,null),n.slave=n.cascadeParserHandler,n}return I(e,t),e.prototype.error=function(t,e){f.warn("CSS parser:",t)},e}(tr);function Th(t,e){return e.parseOPSResource(t)}var Ah=function(t){function n(e){var n;return(n=t.call(this,Th,Ui.DOCUMENT)||this).fontDeobfuscator=e,n.styleByKey={},n.styleFetcherByKey={},n.styleByDocURL={},n.triggersByDocURL={},n.validatorSet=null,n.styleSheets=[],n.triggerSingleDocumentPreprocessing=!1,n}I(n,t);var i=n.prototype;return i.init=function(t,e){var n=this;this.setStyleSheets(t,e);var i=K("user-agent.xml",X),r=Ni("OPSDocStore.init");return this.validatorSet=Ul(),Ch.get().then((function(){n.load(i).then((function(){n.triggerSingleDocumentPreprocessing=!0,r.finish(!0)}))})),r.result()},i.getStyleForDoc=function(t){return this.styleByDocURL[t.url]},i.getTriggersForDoc=function(t){return this.triggersByDocURL[t.url]},i.setStyleSheets=function(t,e){this.clearStyleSheets(),t&&t.forEach(this.addAuthorStyleSheet,this),e&&e.forEach(this.addUserStyleSheet,this)},i.clearStyleSheets=function(){this.styleSheets.splice(0)},i.addAuthorStyleSheet=function(t){var e=t.url;e&&(e=K($(e),H)),this.styleSheets.push({url:e,text:t.text,flavor:$i.AUTHOR,classes:null,media:null})},i.addUserStyleSheet=function(t){var e=t.url;e&&(e=K($(e),H)),this.styleSheets.push({url:e,text:t.text,flavor:$i.USER,classes:null,media:null})},i.parseOPSResource=function(t){var n=this,i=Ni("OPSDocStore.load"),r=t.url,o=r.endsWith("?viv-toc-box");return vh(t,this).then((function(t){if(t){if(n.triggerSingleDocumentPreprocessing)for(var a=v(e.HOOKS.PREPROCESS_SINGLE_DOCUMENT),s=0;s<a.length;s++)try{a[s](t.document)}catch(t){f.warn("Error during single document preprocessing:",t)}for(var u=[],l=t.document.getElementsByTagNameNS(W.epub,"trigger"),c=0;c<l.length;c++){var h=l[c],d=h.getAttributeNS(W.EV,"observer"),p=h.getAttributeNS(W.EV,"event"),g=h.getAttribute("action"),m=h.getAttribute("ref");d&&p&&g&&m&&u.push({observer:d,event:p,action:g,ref:m})}n.triggersByDocURL[r]=u;var E=[],b=K("user-agent-page.css",X);if(E.push({url:b,text:Wi,flavor:$i.USER_AGENT,classes:null,media:null}),!o){for(var C,y=_(t.document.querySelectorAll("style, link, meta"));!(C=y()).done;){var w=C.value,D=w.localName;if(w.namespaceURI==W.XHTML)if("style"==D){var S=w.getAttribute("class"),N=w.getAttribute("media"),T=w.getAttribute("title");E.push({url:r,text:w.textContent,flavor:$i.AUTHOR,classes:T?S:null,media:N})}else if("link"==D){var A=w.getAttribute("rel"),x=w.getAttribute("class"),I=w.getAttribute("media");if("stylesheet"==A||"alternate stylesheet"==A&&x){var F=w.getAttribute("href");F=K(F,r);var P=w.getAttribute("title");E.push({url:F,text:null,classes:P?x:null,media:I,flavor:$i.AUTHOR})}}else"meta"==D&&"viewport"==w.getAttribute("name")&&E.push({url:r,text:Sh(w),flavor:$i.AUTHOR,classes:null,media:null})}for(var O=0;O<n.styleSheets.length;O++)E.push(n.styleSheets[O])}for(var R="",k=0;k<E.length;k++)R+=E[k].url,R+="^",E[k].text&&(R+=E[k].text),R+="^";var L=n.styleByKey[R];if(L)return n.styleByDocURL[r]=L,void i.finish(t);var B=n.styleFetcherByKey[R];B||(B=new Bi((function(){var t=Ni("fetchStylesheet"),e=0,i=new Nh(n.validatorSet);return t.loop((function(){if(e<E.length){var t=E[e++];return i.startStylesheet(t.flavor),null!==t.text?Cr(t.text,i,t.url,t.classes,t.media).thenReturn(!0):yr(t.url,i,t.classes,t.media)}return Ti(!1)})).then((function(){var e=i.cascadeParserHandler.finish();L=new yh(n,i.rootScope,i.pageScope,e,i.rootBox,i.fontFaces,i.footnoteProps,i.flowProps,i.viewportProps,i.pageProps),n.styleByKey[R]=L,delete n.styleFetcherByKey[R],t.finish(L)})),t.result()}),"FetchStylesheet "+r),n.styleFetcherByKey[R]=B,B.start()),B.get().then((function(e){n.styleByDocURL[r]=e,i.finish(t)}))}else i.finish(null)})),i.result()},n}(qi);function xh(t){return String.fromCharCode(t>>>24&255,t>>>16&255,t>>>8&255,255&t)}function Ih(t){return(255&t.charCodeAt(0))<<24|(255&t.charCodeAt(1))<<16|(255&t.charCodeAt(2))<<8|255&t.charCodeAt(3)}function Fh(t){var e=new rt;e.append(t);var n=55-t.length&63;for(e.append("");n>0;)n--,e.append("\0");e.append("\0\0\0\0"),e.append(xh(8*t.length)),t=e.toString();for(var i,r=[1732584193,4023233417,2562383102,271733878,3285377520],o=[],a=0;a<t.length;a+=64){for(i=0;i<16;i++)o[i]=Ih(t.substr(a+4*i,4));for(;i<80;i++){var s=o[i-3]^o[i-8]^o[i-14]^o[i-16];o[i]=s<<1|s>>>31}var u=r[0],l=r[1],c=r[2],h=r[3],f=r[4],d=void 0;for(i=0;i<80;i++)d=i<20?1518500249+(l&c|~l&h):i<40?1859775393+(l^c^h):i<60?2400959708+(l&c|l&h|c&h):3395469782+(l^c^h),d+=(u<<5|u>>>27)+f+o[i],f=h,h=c,c=l<<30|l>>>2,l=u,u=d;r[0]=r[0]+u|0,r[1]=r[1]+l|0,r[2]=r[2]+c|0,r[3]=r[3]+h|0,r[4]=r[4]+f|0}return r}var Ph=function(){function t(t,e,n,i,r,o,a,s,u,l){this.store=t,this.url=e,this.lang=n,this.clientLayout=i,this.fontMapper=r,this.rendererFactory=a,this.fallbackMap=s,this.documentURLTransformer=u,this.counterStore=l,this.page=null,this.instance=null,this.pref=Ot(o),this.pref.spreadView=!1}var e=t.prototype;return e.setAutoHeight=function(t,e){if(0!=e--)for(var n=t.firstChild;n;n=n.nextSibling)if(1==n.nodeType){var i=n;"auto"!=nt(i,"height","auto")&&(et(i,"height","auto"),this.setAutoHeight(i,e)),"absolute"==nt(i,"position","static")&&(et(i,"position","relative"),this.setAutoHeight(i,e))}},e.makeCustomRenderer=function(t){var e=this.rendererFactory.makeCustomRenderer(t);return function(t,n,i){var r=i.behavior;if(r)switch(r.toString()){case"body-child":t.parentElement.getAttribute("data-vivliostyle-primary-entry")&&(t.querySelector("[role=doc-toc], [role=directory], nav li a, .toc, #toc")||(i.display=Ye.none));break;case"toc-node-anchor":i.color=Ye.inherit,i["text-decoration"]=Ye.none;break;case"toc-node":i.display=Ye.block,i.margin=tn,i.padding=tn,i["padding-inline-start"]=new Me(1.25,"em");break;case"toc-node-first-child":i.display=Ye.inline_block,i.margin=new Me(.2,"em"),i["vertical-align"]=Ye.top,i.color=Ye.inherit,i["text-decoration"]=Ye.none}if(!r||"toc-node"!=r.toString()&&"toc-container"!=r.toString())return e(t,n,i);var o=t.firstChild;o&&1!==o.nodeType&&""===o.textContent.trim()&&t.replaceChild(t.ownerDocument.createComment(o.textContent),o);var a=n.getAttribute("data-adapt-class");if("toc-node"==a){var s=n.firstChild;"▸"!=s.textContent&&(s.textContent="▸",et(s,"cursor","pointer"),s.addEventListener("click",Oh,!1),s.setAttribute("role","button"),s.setAttribute("aria-expanded","false"),n.setAttribute("aria-expanded","false"),"0px"!==n.style.height&&(s.tabIndex=0))}var u=n.ownerDocument.createElement("div");if(u.setAttribute("data-adapt-process-children","true"),"toc-node"==r.toString()){var l=n.ownerDocument.createElement("div");if(l.textContent="▹",et(l,"margin","0.2em 0 0 -1em"),et(l,"margin-inline-start","-1em"),et(l,"margin-inline-end","0"),et(l,"display","inline-block"),et(l,"width","1em"),et(l,"text-align","center"),et(l,"vertical-align","top"),et(l,"cursor","default"),et(l,"font-family","Menlo,sans-serif"),u.appendChild(l),et(u,"overflow","hidden"),u.setAttribute("data-adapt-class","toc-node"),u.setAttribute("role","treeitem"),"toc-node"==a||"toc-container"==a){et(u,"height","0px");var c=t.firstElementChild;c&&"a"===c.localName&&(c.tabIndex=-1)}else n.setAttribute("role","tree")}else"toc-node"==a&&(u.setAttribute("data-adapt-class","toc-container"),u.setAttribute("role","group"),u.setAttribute("aria-hidden","true"));return Ti(u)}},e.showTOC=function(t,e,n,i,r){var o=this;if(this.page)return Ti(this.page);var a=Ni("showTOC"),s=new Gr(t,t);return this.page=s,this.store.load(this.url+"?viv-toc-box").then((function(i){var u=o.store.resources[o.url];u&&u.body&&u.body.getAttribute("data-vivliostyle-primary-entry")&&i.body.setAttribute("data-vivliostyle-primary-entry",!0);for(var l,c=_(i.document.querySelectorAll("[role=doc-toc], [role=directory], nav, .toc, #toc"));!(l=c()).done;){var h=l.value;h.hasAttribute("hidden")&&h.removeAttribute("hidden")}var f=o.store.getStyleForDoc(i),d=f.sizeViewport(n,1e5,r);e=new ph(e.window,d.fontSize,e.root,d.width,d.height);var p=o.makeCustomRenderer(i),g=new wh(f,i,o.lang,e,o.clientLayout,o.fontMapper,p,o.fallbackMap,0,o.documentURLTransformer,o.counterStore);o.instance=g,g.pref=o.pref,g.init().then((function(){g.layoutNextPage(s,null).then((function(){Array.from(s.container.querySelectorAll("[data-vivliostyle-toc-box]>*>*>*>*>*[style*='display: none']")).forEach((function(t){t.setAttribute("aria-hidden","true"),t.setAttribute("hidden","hidden")})),o.setAutoHeight(t,2),a.finish(s)}))}))})),a.result()},e.hideTOC=function(){this.page&&(this.page.container.style.visibility="hidden",this.page.container.setAttribute("aria-hidden","true"))},e.isTOCVisible=function(){return!!this.page&&"visible"===this.page.container.style.visibility},e.getTOC=function(){if(!this.page)return[];function t(t){if(!t)return[];var n=t.querySelectorAll(":scope > [role=treeitem] > a[href]");return Array.from(n).map(e)}function e(e){return{id:new URL(e.href).hash.match(/^#(.*)$/)[1],title:e.innerText,children:t(e.parentElement.querySelector("[role=group]"))}}return t(this.page.container.querySelector("[role=tree]"))},t}();function Oh(t){var e=t.target,n="▸"==e.textContent;e.textContent=n?"▾":"▸";var i=e.parentNode;e.setAttribute("aria-expanded",n?"true":"false"),i.setAttribute("aria-expanded",n?"true":"false");for(var r=i.firstChild;r;){if(1===r.nodeType){var o=r,a=o.getAttribute("data-adapt-class");if("toc-container"===a){if(o.setAttribute("aria-hidden",n?"false":"true"),o.firstChild){r=o.firstChild;continue}}else if("toc-node"===a&&(o.style.height=n?"auto":"0px",o.children.length>=2&&(o.children[1].tabIndex=n?0:-1),o.children.length>=3&&(o.children[0].tabIndex=n?0:-1,!n))){var s=o.children[0];if("▾"==s.textContent){s.textContent="▸",s.setAttribute("aria-expanded","false"),o.setAttribute("aria-expanded","false"),r=o.children[2];continue}}}for(;!r.nextSibling&&r.parentNode!==i;)r=r.parentNode;r=r.nextSibling}t.stopPropagation()}var Rh=function(t){function e(){var e;return(e=t.call(this,null)||this).opfByURL={},e.primaryOPFByEPubURL={},e.deobfuscators={},e.documents={},e.fontDeobfuscator=e.makeDeobfuscatorFactory(),e.plainXMLStore=new qi(vh,Ui.DOCUMENT),e.jsonStore=new qi(Yi,Ui.TEXT),e}I(e,t);var n=e.prototype;return n.makeDeobfuscatorFactory=function(){var t=this;return function(e){return t.deobfuscators[e]}},n.loadAsPlainXML=function(t,e,n){return this.plainXMLStore.load(t,e,n)},n.startLoadingAsPlainXML=function(t){this.plainXMLStore.fetch(t)},n.loadAsJSON=function(t,e,n){return this.jsonStore.load(t,e,n)},n.startLoadingAsJSON=function(t){this.jsonStore.fetch(t)},n.loadPubDoc=function(t,e){var n=this,i=Ni("loadPubDoc");return ji(t,null,"HEAD").then((function(r){if(r.status>=400)n.loadEPUBDoc(t,e).then((function(e){e?i.finish(e):(f.error("Failed to fetch a source document from "+t+" ("+r.status+(r.statusText?" "+r.statusText:"")+")"),i.finish(null))}));else if(r.status||r.responseXML||r.responseText||r.responseBlob||r.contentType||/\/[^/.]+(?:[#?]|$)/.test(t)&&(t=t.replace(/([#?]|$)/,"/$1")),"application/oebps-package+xml"==r.contentType||/\.opf(?:[#?]|$)/.test(t)){var o=t.match(/^((?:.*\/)?)([^/]*)$/);n.loadOPF(o[1],o[2],e).thenFinish(i)}else"application/ld+json"==r.contentType||"application/webpub+json"==r.contentType||"application/audiobook+json"==r.contentType||"application/json"==r.contentType||/\.json(?:ld)?(?:[#?]|$)/.test(t)?n.loadAsJSON(t,!0).then((function(e){if(!e)return n.reportLoadError(t),void i.finish(null);var r=new Gh(n,t);r.initWithWebPubManifest(e,void 0,t).then((function(){i.finish(r)}))})):n.loadWebPub(t).then((function(r){r?i.finish(r):n.loadEPUBDoc(t,e).then((function(e){e?i.finish(e):(f.error("Failed to load "+t+"."),i.finish(null))}))}))})),i.result()},n.loadEPUBDoc=function(t,e){var n=this,i=Ni("loadEPUBDoc");return t.endsWith("/")||(t+="/"),e&&this.startLoadingAsJSON(t+"?r=list"),this.startLoadingAsPlainXML(t+"META-INF/encryption.xml"),this.loadAsPlainXML(t+"META-INF/container.xml").then((function(r){if(r)for(var o,a=_(r.doc().child("container").child("rootfiles").child("rootfile").attribute("full-path"));!(o=a()).done;){var s=o.value;if(s)return void n.loadOPF(t,s,e).thenFinish(i)}i.finish(null)})),i.result()},n.loadOPF=function(t,e,n){var i=this,r=t+e,o=this.opfByURL[r];if(o)return Ti(o);var a=Ni("loadOPF");return this.loadAsPlainXML(r,!0,"Failed to fetch EPUB OPF "+r).then((function(e){e?i.loadAsPlainXML(t+"META-INF/encryption.xml").then((function(s){(n?i.loadAsJSON(t+"?r=list"):Ti(null)).then((function(n){(o=new Gh(i,t)).initWithXMLDoc(e,s,n,t+"?r=manifest").then((function(){i.opfByURL[r]=o,i.primaryOPFByEPubURL[t]=o,a.finish(o)}))}))})):i.reportLoadError(r)})),a.result()},n.loadWebPub=function(t){var e=this,n=Ni("loadWebPub");return this.load(t).then((function(i){if(i)if(i.document.querySelector("a[href='META-INF/'],a[href$='/META-INF/']"))n.finish(null);else{var r=i.document,o=new Gh(e,t);r.body&&r.body.setAttribute("data-vivliostyle-primary-entry",!0);var a=r.querySelector("link[rel='publication'],link[rel='manifest'][type='application/webpub+json']");if(a){var s=a.getAttribute("href");if(/^#/.test(s)){var u=V(r.getElementById(s.substr(1)).textContent);o.initWithWebPubManifest(u,r).then((function(){n.finish(o)}))}else{var l=K(a.getAttribute("href"),t);e.loadAsJSON(l).then((function(t){o.initWithWebPubManifest(t,r,l).then((function(){n.finish(o)}))}))}}else o.initWithWebPubManifest({},r).then((function(){o.xhtmlToc&&o.xhtmlToc.src===i.url&&(r.querySelector("[role=doc-toc], [role=directory], nav, .toc, #toc")||(o.xhtmlToc=null)),n.finish(o)}))}else e.reportLoadError(t)})),n.result()},n.addDocument=function(t,e){var n=Ni("EPUBDocStore.load"),i=z(t);return(this.documents[i]=this.parseOPSResource({status:200,statusText:"",url:i,contentType:e.contentType,responseText:null,responseXML:e,responseBlob:null})).thenFinish(n),n.result()},n.reportLoadError=function(t){var e,n=this,i=function(t){return t.replace(/([^:/?#]|^)[/?#].*/,"$1")};t.startsWith("data:")?f.error("Failed to load "+t+". Invalid data."):t.startsWith("http:")&&H.startsWith("https:")?f.error("Failed to load "+t+'. Mixed Content ("http:" content on "https:" context) is not allowed.'):(e=i(t))===i(H)||Object.keys(n.resources).find((function(t){return n.resources[t]&&i(t)===e}))||/\.(xhtml|xht|xml|opf)$/i.test(t)?f.error("Failed to load "+t+". The target resource is invalid."):f.error("Failed to load "+t+". This may be caused by the server not allowing cross-origin resource sharing (CORS).")},n.load=function(e){var n=this,i=z(e),r=this.documents[i];if(r)return r.isPending()?r:Ti(r.get());var o=Ni("EPUBDocStore.load");return(r=t.prototype.load.call(this,i,!0,"Failed to fetch a source document from "+i)).then((function(t){t?o.finish(t):n.reportLoadError(i)})),o.result()},e}(Ah),kh=function(){function t(){this.id=null,this.src="",this.mediaType=null,this.title=null,this.itemRefElement=null,this.spineIndex=-1,this.compressedSize=0,this.compressed=null,this.epage=0,this.epageCount=0,this.startPage=null,this.skipPagesBefore=null,this.itemProperties=U}var e=t.prototype;return e.initWithElement=function(t,e){this.id=t.getAttribute("id"),this.src=K(t.getAttribute("href"),e),this.mediaType=t.getAttribute("media-type");var n=t.getAttribute("properties");n&&(this.itemProperties=function(t){for(var e={},n=0;n<t.length;n++)e[t[n]]=!0;return e}(n.split(/\s+/)))},e.initWithParam=function(t){this.spineIndex=t.index,this.id="item"+(t.index+1),this.src=t.url,this.startPage=t.startPage,this.skipPagesBefore=t.skipPagesBefore},t}();function Lh(t){return t.id}var Bh={dcterms:"http://purl.org/dc/terms/",marc:"http://id.loc.gov/vocabulary/",media:"http://www.idpf.org/epub/vocab/overlays/#",rendition:"http://www.idpf.org/vocab/rendition/#",onix:"http://www.editeur.org/ONIX/book/codelists/current.html#",xsd:"http://www.w3.org/2001/XMLSchema#",opf:"http://www.idpf.org/2007/opf"},_h="http://idpf.org/epub/vocab/package/meta/#",Mh={language:Bh.dcterms+"language",title:Bh.dcterms+"title",creator:Bh.dcterms+"creator",layout:Bh.rendition+"layout",titleType:_h+"title-type",displaySeq:_h+"display-seq",alternateScript:_h+"alternate-script",role:_h+"role"};function Uh(t,e){var n={};return function(i,r){var o,a,s,u,l,c=i.r||n,h=r.r||n;if(t==Mh.title&&(s="main"==(null==(u=c[Mh.titleType])?void 0:u[0].v))!=("main"==(null==(l=h[Mh.titleType])?void 0:l[0].v)))return s?-1:1;var f=parseInt(null==(o=c[Mh.displaySeq])?void 0:o[0].v,10);isNaN(f)&&(f=Number.MAX_VALUE);var d,p,g=parseInt(null==(a=h[Mh.displaySeq])?void 0:a[0].v,10);return isNaN(g)&&(g=Number.MAX_VALUE),f!=g?f-g:t!=Mh.language&&e&&(s=(null==(d=c[Mh.language]||c[Mh.alternateScript])?void 0:d[0].v)==e)!=((null==(p=h[Mh.language]||h[Mh.alternateScript])?void 0:p[0].v)==e)?s?-1:1:i.o-r.o}}function Vh(){var t=window.MathJax;return t?t.Hub:null}var zh,Hh={"application/xhtml+xml":!0,"image/jpeg":!0,"image/png":!0,"image/svg+xml":!0,"image/gif":!0,"audio/mp3":!0},Gh=function(){function t(t,e){this.store=t,this.pubURL=e,this.opfXML=null,this.encXML=null,this.items=null,this.spine=null,this.itemMap=null,this.itemMapByPath=null,this.uid=null,this.bindings={},this.lang=null,this.epageCount=0,this.prePaginated=!1,this.epageIsRenderedPage=!0,this.epageCountCallback=null,this.metadata={},this.ncxToc=null,this.xhtmlToc=null,this.cover=null,this.fallbackMap={},this.pageProgression=null,this.documentURLTransformer=this.createDocumentURLTransformer(),Vh()&&(mo[W.MATHML]=!0)}var e=t.prototype;return e.createDocumentURLTransformer=function(){var t=this;return new(function(){function e(){}var n=e.prototype;return n.transformFragment=function(t,e){return"viv-id-"+ct(e+(t?"#"+t:""),":")},n.transformURL=function(e,n){var i=e.match(/^([^#]*)#?(.*)$/);if(i){var r=i[1]||n,o=decodeURIComponent(i[2]);if(r&&t.items.some((function(t){return t.src===r})))return"#"+this.transformFragment(o,r)}return e},n.restoreURL=function(t){"#"===t.charAt(0)&&(t=t.substring(1)),0===t.indexOf("viv-id-")&&(t=t.substring("viv-id-".length));var e=function(t,e){e="string"==typeof e?e:"\\u";var n=new RegExp(ht(e)+"[0-9a-fA-F]{4}","g");return t.replace(n,(function(t){return function(t,e){return 0===t.indexOf(e="string"==typeof e?e:"\\u")?String.fromCharCode(parseInt(t.substring(e.length),16)):t}(t,e)}))}(t,":").match(/^([^#]*)#?(.*)$/);return e?[e[1],e[2]]:[]},e}())},e.getMetadata=function(){return this.metadata},e.getPathFromURL=function(t){if(t.startsWith("data:"))return t===this.pubURL?"":t;if(this.pubURL){var e=K("",this.pubURL);return t===e||t+"/"===e?"":("/"!=e.charAt(e.length-1)&&(e+="/"),t.substr(0,e.length)==e?decodeURI(t.substr(e.length)):null)}return t},e.initWithXMLDoc=function(t,e,n,i){var r=this;this.opfXML=t,this.encXML=e;var o=t.doc().child("package"),a=o.attribute("unique-identifier")[0];if(a){var s=t.getElement(t.url+"#"+a);s&&(this.uid=s.textContent.replace(/[ \n\r\t]/g,""))}var l={};for(var c in this.items=o.child("manifest").child("item").asArray().map((function(e){var n=new kh,i=e;n.initWithElement(i,t.url);var o=i.getAttribute("fallback");return o&&!Hh[n.mediaType]&&(l[n.src]=o),!r.xhtmlToc&&n.itemProperties.nav&&(r.xhtmlToc=n),!r.cover&&n.itemProperties["cover-image"]&&(r.cover=n),n})),this.itemMap=pt(this.items,Lh),this.itemMapByPath=pt(this.items,(function(t){return r.getPathFromURL(t.src)})),l)for(var h=c;;){var f=this.itemMap[l[h]];if(!f)break;if(Hh[f.mediaType]){this.fallbackMap[c]=f.src;break}h=f.src}this.spine=o.child("spine").child("itemref").asArray().map((function(t,e){var n=t,i=n.getAttribute("idref"),o=r.itemMap[i];return o&&(o.itemRefElement=n,o.spineIndex=e),o}));var d=o.child("spine").attribute("toc")[0];d&&(this.ncxToc=this.itemMap[d]);var p=o.child("spine").attribute("page-progression-direction")[0];p&&(this.pageProgression=u(p));for(var g=e?e.doc().child("encryption").child("EncryptedData").predicate(Eh.withChild("EncryptionMethod",Eh.withAttribute("Algorithm","http://www.idpf.org/2008/embedding"))).child("CipherData").child("CipherReference").attribute("URI"):[],m=o.child("bindings").child("mediaType").asArray(),v=0;v<m.length;v++){var E=m[v].getAttribute("handler"),b=m[v].getAttribute("media-type");b&&E&&this.itemMap[E]&&(this.bindings[b]=this.itemMap[E].src)}if(this.metadata=function(t,e){var n;if(e){for(var i in n={},Bh)n[i]=Bh[i];for(var r;null!=(r=e.match(/^\s*([A-Z_a-z\u007F-\uFFFF][-.A-Z_a-z0-9\u007F-\uFFFF]*):\s*(\S+)/));)e=e.substr(r[0].length),n[r[1]]=r[2]}else n=Bh;var o=function(t){if(t){var e=t.match(/^\s*(([^:]*):)?(\S+)\s*$/);if(e){var i=e[2]?n[e[2]]:_h;if(i)return i+e[3]}}return null},a=1,s=t.childElements().forEachNonNull((function(t){if("meta"==t.localName){var e=o(t.getAttribute("property"));if(e)return{name:e,value:t.textContent,id:t.getAttribute("id"),order:a++,refines:t.getAttribute("refines"),lang:null,scheme:o(t.getAttribute("scheme")),role:null}}else if(t.namespaceURI==W.DC)return{name:Bh.dcterms+t.localName,order:a++,lang:t.getAttribute("xml:lang"),value:t.textContent,id:t.getAttribute("id"),refines:null,scheme:null,role:t.getAttribute("role")||t.getAttribute("opf:role")};return null})),u=gt(s,(function(t){return t.refines})),l=function t(e){return function(e,n){var i={};for(var r in e)i[r]=e[r].map((function(e){var n={v:e.value,o:e.order};e.scheme&&(n.s=e.scheme);var i=u["#"+e.id]||[];if(i.length||e.lang||e.role){e.lang&&i.push({name:Mh.language,value:e.lang,lang:null,id:null,refines:e.id,scheme:null,order:e.order,role:null}),e.role&&i.push({name:Mh.role,value:e.role,lang:null,id:null,refines:e.id,scheme:null,order:e.order,role:null});var r=gt(i,(function(t){return t.name}));n.r=t(r)}return n}));return i}(e)}(gt(s,(function(t){return t.refines?null:t.name}))),c=null;return l[Mh.language]&&(c=l[Mh.language][0].v),function t(e){for(var n in e){var i=e[n];i.sort(Uh(n,c));for(var r=0;r<i.length;r++){var o=i[r].r;o&&t(o)}}}(l),l}(o.child("metadata"),o.attribute("prefix")[0]),this.metadata[Mh.language]&&(this.lang=this.metadata[Mh.language][0].v),this.metadata[Mh.layout]&&(this.prePaginated="pre-paginated"===this.metadata[Mh.layout][0].v),!n){if(g.length>0&&this.uid)for(var C=function(t){var e=function(t){for(var e,n=[],i=_(Fh(t));!(e=i()).done;){var r=e.value;n.push(r>>>24&255,r>>>16&255,r>>>8&255,255&r)}return n}(t);return function(t){var n,i,r=Ni("deobfuscator");return t.slice?(n=t.slice(0,1040),i=t.slice(1040,t.size)):(n=t.webkitSlice(0,1040),i=t.webkitSlice(1040,t.size-1040)),function(t){var e=Ni("readBlob"),n=new FileReader,i=e.suspend(n);return n.addEventListener("load",(function(){i.schedule(n.result)}),!1),n.readAsArrayBuffer(t),e.result()}(n).then((function(t){for(var n=new DataView(t),o=0;o<n.byteLength;o++){var a=n.getUint8(o);n.setUint8(o,a^=e[o%20])}r.finish(Ki([n,i]))})),r.result()}}(this.uid),y=0;y<g.length;y++)this.store.deobfuscators[this.pubURL+g[y]]=C;return this.prePaginated&&this.assignAutoPages(),Ti(!0)}var w=new rt,D={};if(g.length>0&&this.uid)for(var S="1040:"+function(t){for(var e=function(t){for(var e=Fh(t),n=new rt,i=0;i<e.length;i++)n.append(xh(e[i]));return n.toString()}(t),n=new rt,i=0;i<e.length;i++)n.append((256|e.charCodeAt(i)).toString(16).substr(1));return n.toString()}(this.uid),N=0;N<g.length;N++)D[g[N]]=S;for(var T=0;T<n.length;T++){var A=n[T],x=A.n;if(x){var I=decodeURI(x),F=this.itemMapByPath[I],P=null;F&&(F.compressed=0!=A.m,F.compressedSize=A.c,F.mediaType&&(P=F.mediaType.replace(/\s+/g,"")));var O=D[I];(P||O)&&(w.append(x),w.append(" "),w.append(P||"application/octet-stream"),O&&(w.append(" "),w.append(O)),w.append("\n"))}}return this.assignAutoPages(),ji(i,Ui.DEFAULT,"POST",w.toString(),"text/plain")},e.assignAutoPages=function(){for(var t,e=0,n=_(this.spine);!(t=n()).done;){var i=t.value,r=this.prePaginated?1:Math.ceil(i.compressedSize/1024);i.epage=e,i.epageCount=r,e+=r}this.epageCount=e,this.epageCountCallback&&this.epageCountCallback(this.epageCount)},e.setEPageCountMode=function(t){this.epageIsRenderedPage=t||this.prePaginated},e.countEPages=function(t){var e=this;if(this.epageCountCallback=t,this.epageIsRenderedPage)return this.prePaginated&&0==this.epageCount&&this.assignAutoPages(),Ti(!0);var n=0,i=0,r=Ni("countEPages");return r.loopWithFrame((function(t){if(i!==e.spine.length){var r=e.spine[i++];r.epage=n,e.store.load(r.src).then((function(i){var o=1800,a=i.lang||e.lang;a&&a.match(/^(ja|ko|zh)/)&&(o/=3),r.epageCount=Math.ceil(i.getTotalOffset()/o),e.epageCount=n+=r.epageCount,e.epageCountCallback&&e.epageCountCallback(e.epageCount),t.continueLoop()}))}else t.breakLoop()})).thenFinish(r),r.result()},e.initWithChapters=function(t,e){var n=this;this.itemMap={},this.itemMapByPath={},this.items=[],this.spine=this.items;var i=this.opfXML=new gh(null,"",(new DOMParser).parseFromString("<spine></spine>","text/xml"));return t.forEach((function(t){var e=new kh;e.initWithParam(t);var r=i.document.createElement("itemref");r.setAttribute("idref",e.id),i.root.appendChild(r),e.itemRefElement=r,n.itemMap[e.id]=e;var o=n.getPathFromURL(t.url);null==o&&(o=t.url),n.itemMapByPath[o]=e,n.items.push(e)})),e?this.store.addDocument(t[0].url,e):Ti(null)},e.initWithWebPubManifest=function(t,e,n){var i=this;t.readingProgression&&(this.pageProgression=t.readingProgression),void 0===this.metadata&&(this.metadata={});var r=e&&e.title||t.name||t.metadata&&t.metadata.title;r&&(this.metadata[Mh.title]=[{v:r}]);var o=this.getPathFromURL(this.pubURL);if(!t.readingOrder&&e&&null!==o){t.readingOrder=[encodeURI(o)];for(var a,s=_(e.querySelectorAll("[role=doc-toc] a[href],[role=directory] a[href],nav li a[href],.toc a[href],#toc a[href]"));!(a=s()).done;){var u=a.value.getAttribute("href");if(!/^(https?:)?\/\//.test(u)){var l=z(K(u,this.pubURL)),c=this.getPathFromURL(l),h=null!==c?encodeURI(c):l;-1==t.readingOrder.indexOf(h)&&t.readingOrder.push(h)}}}var f=[],d=0,p=-1;[t.readingOrder,t.resources].forEach((function(e){e instanceof Array&&e.forEach((function(e){var r=t.readingOrder.includes(e),o="string"==typeof e?e:e.url||e.href,a="string"==typeof e?"":e.encodingFormat||e.href&&e.type||"";if(r||"text/html"===a||"application/xhtml+xml"===a||/(^|\/)([^/]+\.(x?html|htm|xht)|[^/.]*)([#?]|$)/.test(o)){var s={url:K($(o),n||i.pubURL),index:d++,startPage:null,skipPagesBefore:null};"contents"===e.rel&&-1===p&&(p=s.index),f.push(s)}}))}));var g=Ni("initWithWebPubManifest");return this.initWithChapters(f).then((function(){var t;-1!==p&&(i.xhtmlToc=i.items[p]),i.xhtmlToc||(i.xhtmlToc=n?null==(t=i.items)?void 0:t[0]:i.itemMapByPath[o]),g.finish(!0)})),g.result()},e.getCFI=function(t,e){var n=this.spine[t],i=Ni("getCFI");return this.store.load(n.src).then((function(t){var r=t.getNodeByOffset(e),o=null;if(r){var a=t.getNodeOffset(r,0,!1),s=e-a,u=new Pt;u.prependPathFromNode(r,s,!1,null),n.itemRefElement&&u.prependPathFromNode(n.itemRefElement,0,!1,null),o=u.toString()}i.finish(o)})),i.result()},e.resolveFragment=function(t){var e=this;return Ai("resolveFragment",(function(n){if(t){var i,r=new Pt;if(r.fromString(t),e.opfXML){var o=r.navigate(e.opfXML.document);if(1!=o.node.nodeType||o.after||!o.ref)return void n.finish(null);var a=o.node,s=a.getAttribute("idref");if("itemref"!=a.localName||!s||!e.itemMap[s])return void n.finish(null);i=e.itemMap[s],r=o.ref}else i=e.spine[0];e.store.load(i.src).then((function(t){var e=r.navigate(t.document),o=t.getNodeOffset(e.node,e.offset,e.after);n.finish({spineIndex:i.spineIndex,offsetInItem:o,pageIndex:-1})}))}else n.finish(null)}),(function(e,n){f.warn(n,"Cannot resolve fragment:",t),e.finish(null)}))},e.resolveEPage=function(t){var e=this;return Ai("resolveEPage",(function(n){if(t<=0)n.finish({spineIndex:0,offsetInItem:0,pageIndex:-1});else if(e.epageIsRenderedPage){var i=e.spine.findIndex((function(e){return 0==e.epage&&0==e.epageCount||e.epage<=t&&e.epage+e.epageCount>t}));-1==i&&(i=e.spine.length-1);var r=e.spine[i];r&&0!=r.epageCount||(r=e.spine[--i]);var o=Math.floor(t-r.epage);n.finish({spineIndex:i,offsetInItem:-1,pageIndex:o})}else{var a=ft(e.spine.length,(function(n){var i=e.spine[n];return i.epage+i.epageCount>t}));a==e.spine.length&&a--;var s=e.spine[a];e.store.load(s.src).then((function(e){(t-=s.epage)>s.epageCount&&(t=s.epageCount);var i=0;if(t>0){var r=e.getTotalOffset();(i=Math.round(r*t/s.epageCount))==r&&i--}n.finish({spineIndex:a,offsetInItem:i,pageIndex:-1})}))}}),(function(e,n){f.warn(n,"Cannot resolve epage:",t),e.finish(null)}))},e.getEPageFromPosition=function(t){var e=this.spine[t.spineIndex];if(this.epageIsRenderedPage)return Ti(e.epage+t.pageIndex);if(t.offsetInItem<=0)return Ti(e.epage);var n=Ni("getEPage");return this.store.load(e.src).then((function(i){var r=i.getTotalOffset(),o=Math.min(r,t.offsetInItem);n.finish(e.epage+o*e.epageCount/r)})),n.result()},t}(),Wh=function(t,e){return{page:t,position:{spineIndex:t.spineIndex,pageIndex:e,offsetInItem:t.offset}}},Xh=function(){function t(t,e,n,i,r){this.opf=t,this.viewport=e,this.fontMapper=n,this.pageSheetSizeReporter=r,this.spineItems=[],this.spineItemLoadingContinuations=[],this.tocAutohide=!1,this.pref=Ot(i),this.clientLayout=new dh(e),this.counterStore=new Mn(t.documentURLTransformer)}var n=t.prototype;return n.getPage=function(t){var e=this.spineItems[t.spineIndex];return e?e.pages[t.pageIndex]:null},n.getCurrentPageProgression=function(t){if(this.opf.pageProgression)return this.opf.pageProgression;var e=this.spineItems[t?t.spineIndex:0];return e?e.instance.pageProgression:null},n.finishPageContainer=function(t,e,n){e.container.style.display="none",e.container.style.visibility="visible",e.container.style.position="",e.container.style.top="",e.container.style.left="",e.container.setAttribute("data-vivliostyle-page-side",e.side);var i=t.pages[n];if(e.isFirstPage=0==t.item.spineIndex&&0==n,t.pages[n]=e,this.opf.epageIsRenderedPage){if(0==n&&t.item.spineIndex>0){var r=this.opf.spine[t.item.spineIndex-1];t.item.epage=r.epage+r.epageCount}t.item.epageCount=t.pages.length,this.opf.epageCount=this.opf.spine.reduce((function(t,e){return t+e.epageCount}),0),this.opf.epageCountCallback&&this.opf.epageCountCallback(this.opf.epageCount)}if(i)t.instance.viewport.contentContainer.replaceChild(e.container,i.container),i.dispatchEvent({type:"replaced",target:null,currentTarget:null,preventDefault:null,newPage:e});else{var o=null;if(n>0)o=t.pages[n-1].container.nextElementSibling;else for(var a=t.item.spineIndex+1;a<this.spineItems.length;a++){var s=this.spineItems[a];if(s&&s.pages[0]){o=s.pages[0].container;break}}t.instance.viewport.contentContainer.insertBefore(e.container,o)}this.pageSheetSizeReporter({width:t.instance.pageSheetWidth,height:t.instance.pageSheetHeight},t.instance.pageSheetSize,t.item.spineIndex,t.instance.pageNumberOffset+n)},n.renderSinglePage=function(t,e){var n=this,i=Ni("renderSinglePage"),r=this.makePage(t,e);return t.instance.layoutNextPage(r,e).then((function(o){var a=(e=o)?e.page-1:t.layoutPositions.length-1;n.finishPageContainer(t,r,a),n.counterStore.finishPage(r.spineIndex,a);var s=null;if(e){var u=t.layoutPositions[e.page];t.layoutPositions[e.page]=e,u&&t.pages[e.page]&&(e.isSamePosition(u)||(s=n.renderSinglePage(t,e)))}s||(s=Ti(!0)),s.then((function(){var o=n.counterStore.getUnresolvedRefsToPage(r),s=0;i.loopWithFrame((function(t){if(++s>o.length)t.breakLoop();else{var e=o[s-1];e.refs=e.refs.filter((function(t){return!t.isResolved()})),0!==e.refs.length?n.getPageViewItem(e.spineIndex).then((function(i){i?(n.counterStore.pushPageCounters(e.pageCounters),n.counterStore.pushReferencesToSolve(e.refs),n.renderSinglePage(i,i.layoutPositions[e.pageIndex]).then((function(e){n.counterStore.popPageCounters(),n.counterStore.popReferencesToSolve();var i=e.pageAndPosition.position;i.spineIndex===r.spineIndex&&i.pageIndex===a&&(r=e.pageAndPosition.page),t.continueLoop()}))):t.continueLoop()})):t.continueLoop()}})).then((function(){r.container.parentElement||(r=t.pages[a]),r.isLastPage=!e&&t.item.spineIndex===n.opf.spine.length-1,r.isLastPage&&n.counterStore.finishLastPage(n.viewport),i.finish({pageAndPosition:Wh(r,a),nextLayoutPosition:e})}))}))})),i.result()},n.normalizeSeekPosition=function(t,e){var n=t.pageIndex,i=-1;if(n<0){i=t.offsetInItem;var r=ft(e.layoutPositions.length,(function(t){return e.instance.getPosition(e.layoutPositions[t],!0)>i}));n=r===e.layoutPositions.length?e.complete?e.layoutPositions.length-1:Number.POSITIVE_INFINITY:r-1}else n===Number.POSITIVE_INFINITY&&-1!==t.offsetInItem&&(i=t.offsetInItem);return{spineIndex:t.spineIndex,pageIndex:n,offsetInItem:i}},n.findPage=function(t,e){var n=this,i=Ni("findPage");return this.getPageViewItem(t.spineIndex).then((function(r){if(r){var o,a=null;i.loopWithFrame((function(s){var u=n.normalizeSeekPosition(t,r);(a=r.pages[o=u.pageIndex])?s.breakLoop():r.complete?(a=r.pages[o=r.layoutPositions.length-1],s.breakLoop()):e?n.renderPage(u).then((function(t){t&&(a=t.page,o=t.position.pageIndex),s.breakLoop()})):i.sleep(100).then((function(){s.continueLoop()}))})).then((function(){i.finish(Wh(a,o))}))}else i.finish(null)})),i.result()},n.renderPage=function(t){var e=this,n=Ni("renderPage");return this.getPageViewItem(t.spineIndex).then((function(i){if(i){var r=e.normalizeSeekPosition(t,i),o=r.pageIndex,a=r.offsetInItem,s=i.pages[o];s?n.finish(Wh(s,o)):n.loopWithFrame((function(t){if(o<i.layoutPositions.length)t.breakLoop();else{if(i.complete)return o=i.layoutPositions.length-1,void t.breakLoop();var n=i.layoutPositions[i.layoutPositions.length-1];e.renderSinglePage(i,n).then((function(e){var r=e.pageAndPosition.page;if(n=e.nextLayoutPosition){if(a>=0&&i.instance.getPosition(n)>a)return s=r,o=i.layoutPositions.length-2,void t.breakLoop();t.continueLoop()}else s=r,o=e.pageAndPosition.position.pageIndex,i.complete=!0,t.breakLoop()}))}})).then((function(){var t=i.layoutPositions[o];(s=s||i.pages[o])?n.finish(Wh(s,o)):e.renderSinglePage(i,t).then((function(t){t.nextLayoutPosition||(i.complete=!0),n.finish(t.pageAndPosition)}))}))}else n.finish(null)})),n.result()},n.renderAllPages=function(){return this.renderPagesUpto({spineIndex:this.opf.spine.length-1,pageIndex:Number.POSITIVE_INFINITY,offsetInItem:-1},!1)},n.renderPagesUpto=function(t,e){var n=this,i=Ni("renderPagesUpto");t||(t={spineIndex:0,pageIndex:0,offsetInItem:0});var r,o=t.spineIndex,a=t.pageIndex,s=0;return e&&(s=o),i.loopWithFrame((function(e){n.renderPage({spineIndex:s,pageIndex:s===o?a:Number.POSITIVE_INFINITY,offsetInItem:s===o?t.offsetInItem:-1}).then((function(t){r=t,++s>o?e.breakLoop():e.continueLoop()}))})).then((function(){i.finish(r)})),i.result()},n.firstPage=function(t,e){return this.findPage({spineIndex:0,pageIndex:0,offsetInItem:-1},e)},n.lastPage=function(t,e){return this.findPage({spineIndex:this.opf.spine.length-1,pageIndex:Number.POSITIVE_INFINITY,offsetInItem:-1},e)},n.nextPage=function(t,e){var n=this,i=t.spineIndex,r=t.pageIndex,o=Ni("nextPage");return this.getPageViewItem(i).then((function(t){if(t){if(t.complete&&r==t.layoutPositions.length-1){if(i>=n.opf.spine.length-1)return void o.finish(null);i++,r=0;var a=n.spineItems[i],s=a&&a.pages[0],u=t.pages[t.pages.length-1];s&&u&&s.side==u.side&&(a.pages.forEach((function(t){t.container&&t.container.remove()})),n.spineItems[i]=null,n.spineItemLoadingContinuations[i]=null)}else r++;n.findPage({spineIndex:i,pageIndex:r,offsetInItem:-1},e).thenFinish(o)}else o.finish(null)})),o.result()},n.previousPage=function(t,e){var n=t.spineIndex,i=t.pageIndex;if(0==i){if(0==n)return Ti(null);n--,i=Number.POSITIVE_INFINITY}else i--;return this.findPage({spineIndex:n,pageIndex:i,offsetInItem:-1},e)},n.isRectoPage=function(t,n){var i=t.side===e.PageSide.LEFT,r=this.getCurrentPageProgression(n)===e.PageProgression.LTR;return!i&&r||i&&!r},n.getSpread=function(t,n){var i=this,r=Ni("getCurrentSpread"),o=this.getPage(t);if(!o)return Ti({left:null,right:null});var a=o.side===e.PageSide.LEFT;return(this.isRectoPage(o,t)?this.previousPage(t,n):this.nextPage(t,n)).then((function(e){var n=i.getPage(t),o=e&&e.page;o&&o.side===n.side&&(o=null),r.finish(a?{left:n,right:o}:{left:o,right:n})})),r.result()},n.nextSpread=function(t,e){var n=this,i=this.getPage(t);if(!i)return Ti(null);var r=this.isRectoPage(i,t),o=this.nextPage(t,e);return r?o:o.thenAsync((function(t){if(t){if(t.page.side===i.side)return o;var r=n.nextPage(t.position,e);return r.thenAsync((function(t){return t?r:o}))}return Ti(null)}))},n.previousSpread=function(t,e){var n=this,i=this.getPage(t);if(!i)return Ti(null);var r=this.isRectoPage(i,t),o=this.previousPage(t,e),a=i.container.previousElementSibling;return r?o.thenAsync((function(t){return t?t.page.side===i.side||t.page.container!==a?o:n.previousPage(t.position,e):Ti(null)})):o},n.navigateToEPage=function(t,e,n){var i=this,r=Ni("navigateToEPage");return this.opf.resolveEPage(t).then((function(t){t?i.findPage(t,n).thenFinish(r):r.finish(null)})),r.result()},n.navigateToFragment=function(t,e,n){var i=this,r=Ni("navigateToCFI");return this.opf.resolveFragment(t).then((function(t){t?i.findPage(t,n).thenFinish(r):r.finish(null)})),r.result()},n.navigateTo=function(t,e,n){var i=this;f.debug("Navigate to",t);var r=this.opf.getPathFromURL(z(t));if(!r){if(this.opf.opfXML&&t.match(/^#epubcfi\(/))r=this.opf.getPathFromURL(this.opf.opfXML.url);else if("#"===t.charAt(0)){var o=this.opf.documentURLTransformer.restoreURL(t);this.opf.opfXML?null==(r=this.opf.getPathFromURL(o[0]))&&(r=o[0]):r=o[0],t=o[0]+(o[1]?"#"+o[1]:"")}if(null==r)return Ti(null)}var a=this.opf.itemMapByPath[r];if(!a){if(this.opf.opfXML&&r==this.opf.getPathFromURL(this.opf.opfXML.url)){var s=t.indexOf("#");if(s>=0)return this.navigateToFragment(t.substr(s+1),e,n)}return Ti(null)}var u=Ni("navigateTo");return this.getPageViewItem(a.spineIndex).then((function(r){if(r){var o=r.xmldoc.getElement(t);o?i.findPage({spineIndex:a.spineIndex,pageIndex:-1,offsetInItem:r.xmldoc.getElementOffset(o)},n).thenFinish(u):e.spineIndex!==a.spineIndex?i.findPage({spineIndex:a.spineIndex,pageIndex:0,offsetInItem:-1},n).thenFinish(u):u.finish(null)}else u.finish(null)})),u.result()},n.makePage=function(t,n){var i=t.instance.viewport,r=i.document.createElement("div");r.setAttribute("data-vivliostyle-page-container","true"),r.setAttribute("role","region"),r.style.position="absolute",r.style.top="0",r.style.left="0",e.isDebug||(r.style.visibility="hidden",r.setAttribute("aria-hidden","true")),i.layoutBox.appendChild(r);var o=i.document.createElement("div");o.setAttribute("data-vivliostyle-bleed-box","true"),r.appendChild(o);var a=new Gr(r,o);if(a.spineIndex=t.item.spineIndex,a.position=n,a.offset=t.instance.getPosition(n),0===a.offset){var s=this.opf.documentURLTransformer.transformFragment("",t.item.src);o.setAttribute("id",s),a.registerElementWithId(o,s)}if(i!==this.viewport){var u=Lt(this.viewport.width,this.viewport.height,i.width,i.height),l=wr(null,new yi(u,null),"");a.delayedItems.push(new Vr(r,"transform",l))}return a},n.makeObjectView=function(t,e,n,i){var r=e.getAttribute("data"),o=null;if(r){r=K(r,t.url);var a=e.getAttribute("media-type");if(!a){var s=this.opf.getPathFromURL(r);if(s){var u=this.opf.itemMapByPath[s];u&&(a=u.mediaType)}}if(a){var l=this.opf.bindings[a];if(l){(o=this.viewport.document.createElement("iframe")).style.border="none";var c=ut(r),h=ut(a),f=new rt;f.append(l),f.append("?src="),f.append(c),f.append("&type="),f.append(h);for(var d=e.firstChild;d;d=d.nextSibling)if(1==d.nodeType){var p=d;if("param"==p.localName&&p.namespaceURI==W.XHTML){var g=p.getAttribute("name"),m=p.getAttribute("value");g&&m&&(f.append("&"),f.append(encodeURIComponent(g)),f.append("="),f.append(encodeURIComponent(m)))}}o.setAttribute("src",f.toString());var v=e.getAttribute("width");v&&o.setAttribute("width",v);var E=e.getAttribute("height");E&&o.setAttribute("height",E)}}}return o||(o=this.viewport.document.createElement("span")).setAttribute("data-adapt-process-children","true"),Ti(o)},n.makeMathJaxView=function(t,e,n,i){var r=Vh();if(r){var o=n.ownerDocument,a=o.createElement("span");n.appendChild(a);var s=o.importNode(e,!0);this.resolveURLsInMathML(s,t),a.appendChild(s);var u=r.queue;u.Push(["Typeset",r,a]);var l=Ni("makeMathJaxView"),c=l.suspend();return u.Push((function(){c.schedule(a)})),l.result()}return Ti(null)},n.resolveURLsInMathML=function(t,e){if(null!=t){if(1===t.nodeType&&"mglyph"===t.tagName)for(var n=0,i=Array.from(t.attributes);n<i.length;n++){var r=i[n];if("src"===r.name){var o=K(r.nodeValue,e.url);r.namespaceURI?t.setAttributeNS(r.namespaceURI,r.name,o):t.setAttribute(r.name,o)}}t.firstChild&&this.resolveURLsInMathML(t.firstChild,e),t.nextSibling&&this.resolveURLsInMathML(t.nextSibling,e)}},n.makeCustomRenderer=function(t){var e=this;return function(n,i,r){return"object"==n.localName&&n.namespaceURI==W.XHTML?e.makeObjectView(t,n,i,r):n.namespaceURI==W.MATHML||n.dataset&&"true"==n.dataset.mathTypeset?e.makeMathJaxView(t,n,i,r):Ti(null)}},n.getPageViewItem=function(t){var e=this;if(-1===t||t>=this.opf.spine.length)return Ti(null);var n=this.spineItems[t];if(n)return Ti(n);var i=Ni("getPageViewItem"),r=this.spineItemLoadingContinuations[t];if(r){var o=i.suspend();return r.push(o),i.result()}r=this.spineItemLoadingContinuations[t]=[];var a=this.opf.spine[t],s=this.opf.store;return s.load(a.src).then((function(o){var u,l=a.itemRefElement.getAttribute("properties");l&&o.root.setAttribute("data-vivliostyle-epub-spine-properties",l),a.title=o.document.title;var c=s.getStyleForDoc(o),h=e.makeCustomRenderer(o),f=e.viewport,d=c.sizeViewport(f.width,f.height,f.fontSize,e.pref);d.width==f.width&&d.height==f.height&&d.fontSize==f.fontSize||(f=new ph(f.window,d.fontSize,f.root,d.width,d.height));var p,g=null==(u=e.spineItems[0])?void 0:u.instance.isVersoFirstPage,m=e.spineItems[t-1];null!==a.startPage?p=a.startPage-1:(!(t>0)||m&&m.complete?p=m?m.instance.pageNumberOffset+m.pages.length:0:(p=a.epage||t,e.opf.prePaginated||p%2!=(g?1:0)||p++),null!==a.skipPagesBefore&&(p+=a.skipPagesBefore)),e.counterStore.forceSetPageCounter(p);var v=new wh(c,o,e.opf.lang,f,e.clientLayout,e.fontMapper,h,e.opf.fallbackMap,p,e.opf.documentURLTransformer,e.counterStore,e.opf.pageProgression,g);v.pref=e.pref;var E=e.opf.metadata&&e.opf.metadata[Mh.title];v.pubTitle=E&&E[0]&&E[0].v||"",v.docTitle=a.title||"",v.init().then((function(){e.spineItems[t]=n={item:a,xmldoc:o,instance:v,layoutPositions:[null],pages:[],complete:!1},i.finish(n),r.forEach((function(t){t.schedule(n)}))}))})),i.result()},n.removeRenderedPages=function(){for(var t,e=_(this.spineItems);!(t=e()).done;){var n=t.value;n&&n.pages.splice(0)}this.viewport.clear()},n.hasAutoSizedPages=function(){for(var t,e=_(this.spineItems);!(t=e()).done;){var n=t.value;if(n)for(var i,r=_(n.pages);!(i=r()).done;){var o=i.value;if(o.isAutoPageWidth&&o.isAutoPageHeight)return!0}}return!1},n.hasPages=function(){return this.spineItems.some((function(t){return t&&t.pages.length>0}))},n.showTOC=function(t){var e=this.opf,n=e.xhtmlToc||e.ncxToc;if(this.tocAutohide=t,!n)return Ti(null);if(this.tocView&&this.tocView.page)return this.tocView.page.container.style.visibility="visible",this.tocView.page.container.setAttribute("aria-hidden","false"),Ti(this.tocView.page);var i=Ni("showTOC");this.tocView||(this.tocView=new Ph(e.store,n.src,e.lang,this.clientLayout,this.fontMapper,this.pref,this,e.fallbackMap,e.documentURLTransformer,this.counterStore));var r=this.viewport,o=Math.min(350,Math.round(.67*r.width)-16),a=r.height-6,s=r.document.createElement("div");return r.root.appendChild(s),s.style.visibility="hidden",s.style.width=o+10+"px",s.style.maxHeight=a+"px",s.setAttribute("data-vivliostyle-toc-box","true"),s.setAttribute("role","navigation"),this.tocView.showTOC(s,r,o,a,this.viewport.fontSize).then((function(t){s.style.visibility="visible",s.setAttribute("aria-hidden","false"),i.finish(t)})),i.result()},n.hideTOC=function(){this.tocView&&this.tocView.hideTOC()},n.isTOCVisible=function(){return!!this.tocView&&this.tocView.isTOCVisible()},t}();!function(t){t.SINGLE_PAGE="singlePage",t.SPREAD="spread",t.AUTO_SPREAD="autoSpread"}(zh||(zh={}));var jh,Kh=function(){function t(t,n,i,r){var o=this;this.window=t,this.viewportElement=n,this.instanceId=i,this.callbackFn=r,this.pageSheetSizeAlreadySet=!1,this.renderTask=null,n.setAttribute("data-vivliostyle-viewer-viewport",!0),e.isDebug&&n.setAttribute("data-vivliostyle-debug",!0),n.setAttribute("data-vivliostyle-viewer-status","loading");var a=t.document;this.fontMapper=new jl(a.head,n),this.init(),this.kick=function(){},this.sendCommand=function(){},this.resizeListener=function(){o.needResize=!0,o.kick()},this.pageReplacedListener=this.pageReplacedListener.bind(this),this.hyperlinkListener=function(t){},this.pageRuleStyleElement=a.getElementById("vivliostyle-page-rules"),this.actions={loadPublication:this.loadPublication,loadXML:this.loadXML,configure:this.configure,moveTo:this.moveTo,toc:this.showTOC},this.addLogListeners()}var n=t.prototype;return n.init=function(){this.readyState=e.ReadyState.LOADING,this.packageURL=[],this.opf=null,this.haveZipMetadata=!1,this.touchActive=!1,this.touchX=0,this.touchY=0,this.needResize=!1,this.needRefresh=!1,this.viewportSize=null,this.currentPage=null,this.currentSpread=null,this.pagePosition=null,this.fontSize=16,this.zoom=1,this.fitToScreen=!1,this.pageViewMode=zh.SINGLE_PAGE,this.waitForLoading=!1,this.renderAllPages=!0,this.pref={fontFamily:"serif",lineHeight:1.25,margin:8,hyphenate:!1,columnWidth:25,horizontal:!1,nightMode:!1,spreadView:!1,pageBorder:1,enabledMediaTypes:{vivliostyle:!0,print:!0},defaultPaperSize:void 0},this.pageSizes=[]},n.addLogListeners=function(){var t=this,e=o;f.addListener(e.DEBUG,(function(e){t.callback({t:"debug",content:e})})),f.addListener(e.INFO,(function(e){t.callback({t:"info",content:e})})),f.addListener(e.WARN,(function(e){t.callback({t:"warn",content:e})})),f.addListener(e.ERROR,(function(e){t.callback({t:"error",content:e})}))},n.callback=function(t){t.i=this.instanceId,this.callbackFn(t)},n.setReadyState=function(t){this.readyState!==t&&(this.readyState=t,this.viewportElement.setAttribute("data-vivliostyle-viewer-status",t),this.callback({t:"readystatechange"}))},n.loadPublication=function(t){var n=this;N.registerStartTiming("beforeRender"),this.setReadyState(e.ReadyState.LOADING);var i=t.url,r=t.fragment,o=!!t.zipmeta,a=t.authorStyleSheet,s=t.userStyleSheet;this.viewport=null;var u=Ni("loadPublication");return this.configure(t).then((function(){var t=new Rh;t.init(a,s).then((function(){var e=K($(i),n.window.location.href);n.packageURL=[e],t.loadPubDoc(e,o).then((function(t){t?(n.opf=t,n.render(r).then((function(){u.finish(!0)}))):u.finish(!1)}))}))})),u.result()},n.loadXML=function(t){var n=this;N.registerStartTiming("beforeRender"),this.setReadyState(e.ReadyState.LOADING);var i=t.url,r=t.document,o=t.fragment,a=t.authorStyleSheet,s=t.userStyleSheet;this.viewport=null;var u=Ni("loadXML");return this.configure(t).then((function(){var t=new Rh;t.init(a,s).then((function(){var e=i.map((function(t,e){return{url:K($(t.url),n.window.location.href),index:e,startPage:t.startPage,skipPagesBefore:t.skipPagesBefore}}));n.packageURL=e.map((function(t){return t.url})),n.opf=new Gh(t,""),n.opf.initWithChapters(e,r).then((function(){n.render(o).then((function(){u.finish(!0)}))}))}))})),u.result()},n.render=function(t){var e=this;return this.cancelRenderingTask(),(t?this.opf.resolveFragment(t).thenAsync((function(t){return e.pagePosition=t,Ti(!0)})):Ti(!0)).thenAsync((function(){return N.registerEndTiming("beforeRender"),e.resize()}))},n.resolveLength=function(t){var e,n=parseFloat(t);if("string"==typeof t&&(e=t.match(/[a-z]+$/))){var i=e[0];if("em"===i||"rem"===i)return n*this.fontSize;if("ex"===i)return n*Ht.ex*this.fontSize/Ht.em;var r=Ht[i];if(r)return n*r}return n},n.configure=function(t){if("boolean"==typeof t.autoresize&&(t.autoresize?(this.viewportSize=null,this.window.addEventListener("resize",this.resizeListener,!1),this.needResize=!0):this.window.removeEventListener("resize",this.resizeListener,!1)),"number"==typeof t.fontSize){var e=t.fontSize;e>=5&&e<=72&&this.fontSize!=e&&(this.fontSize=e,this.needResize=!0)}if("object"==typeof t.viewport&&t.viewport){var n=t.viewport,i={marginLeft:this.resolveLength(n["margin-left"])||0,marginRight:this.resolveLength(n["margin-right"])||0,marginTop:this.resolveLength(n["margin-top"])||0,marginBottom:this.resolveLength(n["margin-bottom"])||0,width:this.resolveLength(n.width)||0,height:this.resolveLength(n.height)||0};(i.width>=200||i.height>=200)&&(this.window.removeEventListener("resize",this.resizeListener,!1),this.viewportSize=i,this.needResize=!0)}return"boolean"==typeof t.hyphenate&&(this.pref.hyphenate=t.hyphenate,this.needResize=!0),"boolean"==typeof t.horizontal&&(this.pref.horizontal=t.horizontal,this.needResize=!0),"boolean"==typeof t.nightMode&&(this.pref.nightMode=t.nightMode,this.needResize=!0),"number"==typeof t.lineHeight&&(this.pref.lineHeight=t.lineHeight,this.needResize=!0),"number"==typeof t.columnWidth&&(this.pref.columnWidth=t.columnWidth,this.needResize=!0),"string"==typeof t.fontFamily&&(this.pref.fontFamily=t.fontFamily,this.needResize=!0),"boolean"==typeof t.load&&(this.waitForLoading=t.load),"boolean"==typeof t.renderAllPages&&(this.renderAllPages=t.renderAllPages),"string"==typeof t.userAgentRootURL&&(G(t.userAgentRootURL.replace(/resources\/?$/,"")),j(t.userAgentRootURL)),"string"==typeof t.rootURL&&(G(t.rootURL),j(H+"resources/")),"string"==typeof t.pageViewMode&&t.pageViewMode!==this.pageViewMode&&(this.pageViewMode=t.pageViewMode,this.needResize=!0),"number"==typeof t.pageBorder&&t.pageBorder!==this.pref.pageBorder&&(this.viewport=null,this.pref.pageBorder=t.pageBorder,this.needResize=!0),"number"==typeof t.zoom&&t.zoom!==this.zoom&&(this.zoom=t.zoom,this.needRefresh=!0),"boolean"==typeof t.fitToScreen&&t.fitToScreen!==this.fitToScreen&&(this.fitToScreen=t.fitToScreen,this.needRefresh=!0),"object"==typeof t.defaultPaperSize&&"number"==typeof t.defaultPaperSize.width&&"number"==typeof t.defaultPaperSize.height&&(this.viewport=null,this.pref.defaultPaperSize=t.defaultPaperSize,this.needResize=!0),this.configurePlugins(t),Ti(!0)},n.configurePlugins=function(t){var n=this;v(e.HOOKS.CONFIGURATION).forEach((function(e){var i=e(t);n.needResize=i.needResize||n.needResize,n.needRefresh=i.needRefresh||n.needRefresh}))},n.pageReplacedListener=function(t){var e=this.currentPage,n=this.currentSpread,i=t.target;n?n.left!==i&&n.right!==i||this.showCurrent(t.newPage):e===t.target&&this.showCurrent(t.newPage)},n.forCurrentPages=function(t){var e=[];this.currentPage&&e.push(this.currentPage),this.currentSpread&&(e.push(this.currentSpread.left),e.push(this.currentSpread.right)),e.forEach((function(e){e&&t(e)}))},n.removePageListeners=function(){var t=this;this.forCurrentPages((function(e){e.removeEventListener("hyperlink",t.hyperlinkListener,!1),e.removeEventListener("replaced",t.pageReplacedListener,!1)}))},n.hidePages=function(){this.removePageListeners(),this.forCurrentPages((function(t){et(t.container,"display","none"),t.container.setAttribute("aria-hidden","true")})),this.currentPage=null,this.currentSpread=null},n.showSinglePage=function(t){t.addEventListener("hyperlink",this.hyperlinkListener,!1),t.addEventListener("replaced",this.pageReplacedListener,!1),et(t.container,"visibility","visible"),et(t.container,"display","block"),t.container.setAttribute("aria-hidden","false")},n.showPage=function(t){this.hidePages(),this.currentPage=t,t.container.style.marginLeft="",t.container.style.marginRight="",this.showSinglePage(t)},n.showSpread=function(t){if(this.hidePages(),this.currentSpread=t,t.left&&t.right){var e=parseFloat(t.left.container.style.width),n=parseFloat(t.right.container.style.width);e&&n&&e!==n&&(e<n?t.left.container.style.marginLeft=n-e+"px":t.right.container.style.marginRight=e-n+"px")}t.left&&(this.showSinglePage(t.left),t.right?t.left.container.removeAttribute("data-vivliostyle-unpaired-page"):t.left.container.setAttribute("data-vivliostyle-unpaired-page",!0)),t.right&&(this.showSinglePage(t.right),t.left?t.right.container.removeAttribute("data-vivliostyle-unpaired-page"):t.right.container.setAttribute("data-vivliostyle-unpaired-page",!0))},n.reportPosition=function(){var t=this,e=Ni("reportPosition");return this.opf.getCFI(this.pagePosition.spineIndex,this.pagePosition.offsetInItem).then((function(n){var i=t.currentPage;(t.waitForLoading&&i.fetchers.length>0?_i(i.fetchers):Ti(!0)).then((function(){t.sendLocationNotification(i,n).thenFinish(e)}))})),e.result()},n.createViewport=function(){var t=this.viewportElement;if(this.viewportSize){var e=this.viewportSize;return t.style.marginLeft=e.marginLeft+"px",t.style.marginRight=e.marginRight+"px",t.style.marginTop=e.marginTop+"px",t.style.marginBottom=e.marginBottom+"px",new ph(this.window,this.fontSize,t,e.width,e.height)}return new ph(this.window,this.fontSize,t)},n.resolveSpreadView=function(t){switch(this.pageViewMode){case zh.SINGLE_PAGE:return!1;case zh.SPREAD:return!0;case zh.AUTO_SPREAD:default:return t.width/t.height>=1.45&&t.width>800}},n.updateSpreadView=function(t){this.pref.spreadView=t,this.viewportElement.setAttribute("data-vivliostyle-spread-view",t.toString())},n.sizeIsGood=function(){var t=this.createViewport(),e=this.resolveSpreadView(t),n=this.pref.spreadView!==e;return this.updateSpreadView(e),!(this.viewportSize||!this.viewport||this.viewport.fontSize!=this.fontSize||(n||t.width!=this.viewport.width||t.height!=this.viewport.height)&&(n||t.width!=this.viewport.width||t.height==this.viewport.height||!/Android|iPhone|iPad|iPod/.test(navigator.userAgent))&&(!this.opfView||!this.opfView.hasPages()||this.opfView.hasAutoSizedPages()||(this.viewport.width=t.width,this.viewport.height=t.height,this.needRefresh=!0,0)))},n.setPageSize=function(t,e,n,i){this.pageSizes[i]=t,this.setPageSizePageRules(e,n,i)},n.setPageSizePageRules=function(t,e,n){if(!this.pageSheetSizeAlreadySet&&this.pageRuleStyleElement){var i="";Object.keys(t).forEach((function(e){i+="@page "+e+"{margin:0;size:";var n=t[e];i+=n.width+"px "+n.height+"px;}"})),this.pageRuleStyleElement.textContent=i,this.pageSheetSizeAlreadySet=!0}},n.removePageSizePageRules=function(){this.pageRuleStyleElement&&(this.pageRuleStyleElement.textContent="",this.pageSheetSizeAlreadySet=!1)},n.reset=function(){var t=!1,e=!1;this.opfView&&(t=this.opfView.isTOCVisible(),e=this.opfView.tocAutohide,this.opfView.hideTOC(),this.opfView.removeRenderedPages()),this.removePageSizePageRules(),this.viewport=this.createViewport(),this.viewport.resetZoom(),this.opfView=new Xh(this.opf,this.viewport,this.fontMapper,this.pref,this.setPageSize.bind(this)),t&&this.sendCommand({a:"toc",v:"show",autohide:e})},n.showCurrent=function(t,e){var n=this;return this.needRefresh=!1,this.removePageListeners(),this.pref.spreadView?this.opfView.getSpread(this.pagePosition,e).thenAsync((function(e){return n.showSpread(e),n.setSpreadZoom(e),n.currentPage=t,Ti(null)})):(this.showPage(t),this.setPageZoom(t),this.currentPage=t,Ti(null))},n.setPageZoom=function(t){var e=this.getAdjustedZoomFactor(t.dimensions);this.viewport.zoom(t.dimensions.width,t.dimensions.height,e)},n.setSpreadZoom=function(t){var e=this.getSpreadDimensions(t);this.viewport.zoom(e.width,e.height,this.getAdjustedZoomFactor(e))},n.getAdjustedZoomFactor=function(t){return this.fitToScreen?this.calculateZoomFactorToFitInsideViewPort(t):this.zoom},n.getSpreadDimensions=function(t){var e=0,n=0;return t.left&&(e+=t.left.dimensions.width,n=t.left.dimensions.height),t.right&&(e+=t.right.dimensions.width,n=Math.max(n,t.right.dimensions.height)),t.left&&t.right&&(e+=2*this.pref.pageBorder,e+=Math.abs(t.left.dimensions.width-t.right.dimensions.width)),{width:e,height:n}},n.queryZoomFactor=function(t){if(!this.currentPage)throw new Error("no page exists.");switch(t){case jh.FIT_INSIDE_VIEWPORT:var e;return e=this.pref.spreadView?this.getSpreadDimensions(this.currentSpread):this.currentPage.dimensions,this.calculateZoomFactorToFitInsideViewPort(e);default:throw new Error("unknown zoom type: "+t)}},n.calculateZoomFactorToFitInsideViewPort=function(t){return Math.min(this.viewport.width/t.width,this.viewport.height/t.height)},n.cancelRenderingTask=function(){this.renderTask&&this.renderTask.interrupt(new $h),this.renderTask=null},n.resize=function(){var t=this;if(this.needResize=!1,this.needRefresh=!1,this.sizeIsGood())return Ti(!0);this.setReadyState(e.ReadyState.LOADING),this.cancelRenderingTask();var n=Si().getScheduler().run((function(){return Ai("resize",(function(i){t.opf?(t.renderTask=n,N.registerStartTiming("render (resize)"),t.reset(),t.pagePosition&&(0==t.pagePosition.pageIndex&&0==t.pagePosition.offsetInItem||(t.pagePosition.pageIndex=-1)),t.opf.setEPageCountMode(t.renderAllPages),t.opfView.renderPagesUpto(t.pagePosition,!t.renderAllPages).then((function(r){r?(t.pagePosition=r.position,t.showCurrent(r.page,!0).then((function(){t.setReadyState(e.ReadyState.INTERACTIVE),t.opf.countEPages((function(e){var n={t:"nav",epageCount:e,first:t.currentPage.isFirstPage,last:t.currentPage.isLastPage,metadata:t.opf.metadata,docTitle:t.opf.spine[t.pagePosition.spineIndex].title};(t.currentPage.isFirstPage||0==t.pagePosition.pageIndex&&t.opf.spine[t.pagePosition.spineIndex].epage)&&(n.epage=t.opf.spine[t.pagePosition.spineIndex].epage),t.callback(n)})).then((function(){t.reportPosition().then((function(r){(t.renderAllPages?t.opfView.renderAllPages():Ti(null)).then((function(){t.renderTask===n&&(t.renderTask=null),N.registerEndTiming("render (resize)"),t.renderAllPages&&t.setReadyState(e.ReadyState.COMPLETE),t.callback({t:"loaded"}),i.finish(r)}))}))}))}))):i.finish(!1)}))):i.finish(!1)}),(function(t,e){if(!(e instanceof $h))throw e;N.registerEndTiming("render (resize)"),f.debug(e.message)}))}));return Ti(!0)},n.sendLocationNotification=function(t,e){var n=this,i=Ni("sendLocationNotification"),r={t:"nav",first:t.isFirstPage,last:t.isLastPage,metadata:this.opf.metadata,docTitle:this.opf.spine[t.spineIndex].title};return this.opf.getEPageFromPosition(this.pagePosition).then((function(t){r.epage=t,r.epageCount=n.opf.epageCount,e&&(r.cfi=e),n.callback(r),i.finish(!0)})),i.result()},n.getCurrentPageProgression=function(){return this.opfView?this.opfView.getCurrentPageProgression(this.pagePosition):null},n.moveTo=function(t){var n,i=this;if(this.readyState!==e.ReadyState.COMPLETE&&"next"!==t.where&&this.setReadyState(e.ReadyState.LOADING),"string"==typeof t.where){var r;switch(t.where){case"next":r=this.pref.spreadView?this.opfView.nextSpread:this.opfView.nextPage;break;case"previous":r=this.pref.spreadView?this.opfView.previousSpread:this.opfView.previousPage;break;case"last":r=this.opfView.lastPage;break;case"first":r=this.opfView.firstPage;break;default:return Ti(!0)}r&&(n=function(){return r.call(i.opfView,i.pagePosition,!i.renderAllPages)})}else if("number"==typeof t.epage){var o=t.epage;n=function(){return i.opfView.navigateToEPage(o,i.pagePosition,!i.renderAllPages)}}else{if("string"!=typeof t.url)return Ti(!0);var a=t.url;n=function(){return i.opfView.navigateTo(a,i.pagePosition,!i.renderAllPages)}}var s=Ni("moveTo");return n.call(this.opfView).then((function(t){var n;if(t){i.pagePosition=t.position;var r=Ni("moveTo.showCurrent");n=r.result(),i.showCurrent(t.page,!i.renderAllPages).then((function(){i.reportPosition().thenFinish(r)}))}else n=Ti(!0);n.then((function(t){i.readyState===e.ReadyState.LOADING&&i.setReadyState(e.ReadyState.INTERACTIVE),s.finish(t)}))})),s.result()},n.showTOC=function(t){var e=this,n=!!t.autohide,i=t.v,r=this.opfView.isTOCVisible(),o=n!=this.opfView.tocAutohide&&"hide"!=i;if(r){if("show"==i&&!o)return Ti(!0)}else if("hide"==i)return Ti(!0);if(r&&"show"!=i)return this.opfView.hideTOC(),Ti(!0);var a=Ni("showTOC");return this.opfView.showTOC(n).then((function(t){t&&(o&&(t.listeners={}),n&&t.addEventListener("hyperlink",(function(){e.opfView.hideTOC()}),!1),t.addEventListener("hyperlink",e.hyperlinkListener,!1)),a.finish(!0)})),a.result()},n.runCommand=function(t){var e=this,n=t.a||"";return Ai("runCommand",(function(i){var r=e.actions[n];r?r.call(e,t).then((function(){e.callback({t:"done",a:n}),i.finish(!0)})):(f.error("No such action:",n),i.finish(!0))}),(function(t,e){f.error(e,"Error during action:",n),t.finish(!0)}))},n.initEmbed=function(t){var e,n=this,i=qh(t),r=null,o=this;e=function(){var t=Ni("commandLoop"),e=Si().getScheduler();return o.hyperlinkListener=function(t){var n=t,i="#"===n.href.charAt(0)||o.packageURL.some((function(t){return n.href.substr(0,t.length)==t}));if(i){t.preventDefault();var r={t:"hyperlink",href:n.href,internal:i};e.run((function(){return o.callback(r),Ti(!0)}))}},t.loopWithFrame((function(t){if(o.needResize)o.resize().then((function(){t.continueLoop()}));else if(o.needRefresh)o.currentPage&&o.showCurrent(o.currentPage).then((function(){t.continueLoop()}));else if(i){var e=i;i=null,o.runCommand(e).then((function(){t.continueLoop()}))}else{var a=Ni("waitForCommand");r=a.suspend(n),a.result().then((function(){t.continueLoop()}))}})).thenFinish(t),t.result()},(wi?wi.getScheduler():Di||new Ii(new xi)).run(e,void 0),o.kick=function(){var t=r;t&&(r=null,t.schedule(!0))},o.sendCommand=function(t){return!i&&(i=qh(t),o.kick(),!0)},this.window.adapt_command=o.sendCommand},t}();!function(t){t.FIT_INSIDE_VIEWPORT="fit inside viewport"}(jh||(jh={}));var $h=function(t){function e(){var n;return(n=t.call(this)||this).name="RenderingCanceledError",n.message="Page rendering has been canceled",Object.setPrototypeOf(L(n),e.prototype),n.stack=(new Error).stack,n}return I(e,t),e}(k(Error));function qh(t){return"string"==typeof t?V(t):t}var Yh=e.PageProgression;function Zh(t){var e={};return Object.keys(t).forEach((function(n){var i=t[n];switch(n){case"autoResize":e.autoresize=i;break;case"pageBorderWidth":e.pageBorder=i;break;default:e[n]=i}})),e}var Qh,Jh=function(){function t(t,e){this.settings=t,this.initialized=!1,s(t.debug),this.adaptViewer_=new Kh(t.window||window,t.viewportElement,"main",this.dispatcher.bind(this)),this.options={autoResize:!0,fontSize:16,pageBorderWidth:1,renderAllPages:!0,pageViewMode:zh.AUTO_SPREAD,zoom:1,fitToScreen:!1,defaultPaperSize:void 0},e&&this.setOptions(e),this.eventTarget=new mt,Object.defineProperty(this,"readyState",{get:function(){return this.adaptViewer_.readyState}})}var n=t.prototype;return n.setOptions=function(t){var e=Object.assign({a:"configure"},Zh(t));this.adaptViewer_.sendCommand(e),Object.assign(this.options,t)},n.dispatcher=function(t){var e={type:t.t},n=t;Object.keys(n).forEach((function(t){"t"!==t&&(e[t]=n[t])})),this.eventTarget.dispatchEvent(e)},n.addListener=function(t,e){this.eventTarget.addEventListener(t,e,!1)},n.removeListener=function(t,e){this.eventTarget.removeEventListener(t,e,!1)},n.loadDocument=function(t,e,n){t||this.eventTarget.dispatchEvent({type:"error",content:"No URL specified"}),this.loadDocumentOrPublication(t,null,e,n)},n.loadPublication=function(t,e,n){t||this.eventTarget.dispatchEvent({type:"error",content:"No URL specified"}),this.loadDocumentOrPublication(null,t,e,n)},n.loadDocumentOrPublication=function(t,e,n,i){var r=n||{};function o(t){return t?t.map((function(t){return{url:t.url||null,text:t.text||null}})):void 0}var a=o(r.authorStyleSheet),s=o(r.userStyleSheet);i&&Object.assign(this.options,i);var u=Object.assign({a:t?"loadXML":"loadPublication",userAgentRootURL:this.settings.userAgentRootURL,url:tf(t)||e,document:r.documentObject,fragment:r.fragment,authorStyleSheet:a,userStyleSheet:s},Zh(this.options));this.initialized?this.adaptViewer_.sendCommand(u):(this.initialized=!0,this.adaptViewer_.initEmbed(u))},n.getCurrentPageProgression=function(){return this.adaptViewer_.getCurrentPageProgression()},n.resolveNavigation=function(t){switch(t){case e.Navigation.LEFT:return this.getCurrentPageProgression()===Yh.LTR?e.Navigation.PREVIOUS:e.Navigation.NEXT;case e.Navigation.RIGHT:return this.getCurrentPageProgression()===Yh.LTR?e.Navigation.NEXT:e.Navigation.PREVIOUS;default:return t}},n.navigateToPage=function(t,n){t===e.Navigation.EPAGE?this.adaptViewer_.sendCommand({a:"moveTo",epage:n}):this.adaptViewer_.sendCommand({a:"moveTo",where:this.resolveNavigation(t)})},n.navigateToInternalUrl=function(t){this.adaptViewer_.sendCommand({a:"moveTo",url:t})},n.isTOCVisible=function(){return this.adaptViewer_.opfView&&this.adaptViewer_.opfView.opf&&(this.adaptViewer_.opfView.opf.xhtmlToc||this.adaptViewer_.opfView.opf.ncxToc)?!!this.adaptViewer_.opfView.isTOCVisible():null},n.showTOC=function(t,e){this.adaptViewer_.sendCommand({a:"toc",v:null==t?"toggle":t?"show":"hide",autohide:e})},n.queryZoomFactor=function(t){return this.adaptViewer_.queryZoomFactor(t)},n.getPageSizes=function(){return this.adaptViewer_.pageSizes},n.getTOC=function(){var t,e;return null==(t=this.adaptViewer_.opfView)||null==(e=t.tocView)?void 0:e.getTOC()},n.getMetadata=function(){return this.adaptViewer_.opf.getMetadata()},n.getCover=function(){return this.adaptViewer_.opf.cover},t}();function tf(t){function e(t){return"number"==typeof t?t:null}function n(t){return"string"==typeof t?{url:t,startPage:null,skipPagesBefore:null}:{url:t.url,startPage:e(t.startPage),skipPagesBefore:e(t.skipPagesBefore)}}return Array.isArray(t)?t.map(n):t?[n(t)]:null}(Qh=e.Navigation||(e.Navigation={})).PREVIOUS="previous",Qh.NEXT="next",Qh.LEFT="left",Qh.RIGHT="right",Qh.FIRST="first",Qh.LAST="last",Qh.EPAGE="epage";var ef=jh,nf=zh;N.forceRegisterEndTiming("load_vivliostyle");var rf=function(){function t(t,e){var n=e.title,i=void 0===n?"":n,r=e.printCallback,o=void 0===r?function(t){return t.print()}:r,a=e.hideIframe,s=void 0===a||a,u=e.removeIframe,l=void 0===u||u;this.htmlDoc=t,this.title=i,this.printCallback=o,this.hideIframe=s,this.removeIframe=l}var e=t.prototype;return e.init=function(){this.iframe=document.createElement("iframe"),this.hideIframe&&(this.iframe.style.width="0",this.iframe.style.height="0",this.iframe.style.borderWidth="0"),this.window=window,this.window.printInstance=this,this.iframe.srcdoc="\n      <!DOCTYPE html>\n      <html data-vivliostyle-paginated=\"true\">\n        <head>\n          <meta charset='utf-8'/>\n          <meta name='viewport' content='width=device-width, initial-scale=1.0'/>\n          <title>"+this.title+"</title>\n          <style>"+zi+"</style>\n          <style>"+Vi+"</style>\n          <style>\n            html[data-vivliostyle-paginated] {\n              width: 100%;\n              height: 100%;\n            }\n            html[data-vivliostyle-paginated] body,\n            html[data-vivliostyle-paginated] [data-vivliostyle-viewer-viewport] {\n              width: 100% !important;\n              height: 100% !important;\n            }\n            html[data-vivliostyle-paginated],\n            html[data-vivliostyle-paginated] body {\n              margin: 0;\n              padding: 0;\n            }\n          </style>\n          <style id='vivliostyle-page-rules'></style>\n        </head>\n        <body onload='parent.printInstance.runInIframe(window)'>\n          <div id=\"vivliostyle-viewer-viewport\"></div>\n        </body>\n      </html>",document.body.appendChild(this.iframe)},e.runInIframe=function(t){var e=this;return this.iframeWin=t,this.preparePrint().then((function(){return e.browserPrint()})).then((function(){return e.cleanUp()}))},e.preparePrint=function(){this.iframeWin.document.title=this.title;var t=new Blob([this.htmlDoc],{type:"text/html"}),e=URL.createObjectURL(t),n=new Jh({viewportElement:this.iframeWin.document.body.firstElementChild,window:this.iframeWin,debug:!0},{defaultPaperSize:{width:794,height:1122}});return new Promise((function(t){n.addListener("readystatechange",(function(){"complete"===n.readyState&&t()})),n.loadDocument({url:e})}))},e.browserPrint=function(){this.printCallback(this.iframeWin)},e.cleanUp=function(){delete this.window.printInstance,this.removeIframe&&this.iframe.parentElement.removeChild(this.iframe)},t}();e.CoreViewer=Jh,e.PageViewMode=nf,e.Profiler=b,e.UserAgentBaseCss=Xi,e.UserAgentPageCss=Wi,e.UserAgentXml=Gi,e.ValidationTxt=Hi,e.VivliostyleViewportCss=zi,e.VivliostyleViewportScreenCss=Vi,e.ZoomType=ef,e.getHooksForName=v,e.pageProgressionOf=u,e.plugin=E,e.printHTML=function(t,e){new rf(t,e).init()},e.profile=T,e.profiler=N,e.registerHook=p,e.removeHook=m,e.setDebug=s})),v=Object.freeze(Object.assign(Object.create(null),m,{default:m}));!function(t){t.Default="",t.Auto="auto",t.Preset="preset",t.Custom="custom",t.Zero="0"}(p||(p={}));const E=[{name:"A5",description:"A5"},{name:"A4",description:"A4"},{name:"A3",description:"A3"},{name:"B5",description:"B5 (ISO)"},{name:"B4",description:"B4 (ISO)"},{name:"JIS-B5",description:"B5 (JIS)"},{name:"JIS-B4",description:"B4 (JIS)"},{name:"letter",description:"letter"},{name:"legal",description:"legal"},{name:"ledger",description:"ledger"}],b={customWidth:"210mm",customHeight:"297mm",customMargin:"10%",baseFontSize:"12pt",baseLineHeight:"1.2",baseFontFamily:"serif",viewerFontSize:16};class C{constructor(t){this.PresetSize=C.PresetSize,this.pageSizeMode=e.observable(p.Default),this.presetSize=e.observable(E[1]),this.isLandscape=e.observable(!1),this.customWidth=e.observable(b.customWidth),this.customHeight=e.observable(b.customHeight),this.pageSizeImportant=e.observable(!1),this.pageMarginMode=e.observable(p.Default),this.customMargin=e.observable(b.customMargin),this.pageMarginImportant=e.observable(!1),this.firstPageMarginZero=e.observable(!1),this.firstPageMarginZeroImportant=e.observable(!1),this.forceHtmlBodyMarginZero=e.observable(!1),this.widowsOrphans=e.observable(""),this.widowsOrphansImportant=e.observable(!1),this.imageMaxSizeToFitPage=e.observable(!1),this.imageMaxSizeToFitPageImportant=e.observable(!1),this.imageKeepAspectRatio=e.observable(!1),this.imageKeepAspectRatioImportant=e.observable(!1),this.baseFontSize=e.observable(b.baseFontSize),this.baseFontSizeSpecified=e.observable(!1),this.baseFontSizeImportant=e.observable(!1),this.baseLineHeight=e.observable(b.baseLineHeight),this.baseLineHeightSpecified=e.observable(!1),this.baseLineHeightImportant=e.observable(!1),this.baseFontFamily=e.observable(b.baseFontFamily),this.baseFontFamilySpecified=e.observable(!1),this.baseFontFamilyImportant=e.observable(!1),this.allImportant=e.observable(!1),this.pageOtherStyle=e.observable(""),this.firstPageOtherStyle=e.observable(""),this.rootOtherStyle=e.observable(""),this.beforeOtherStyle=e.observable(""),this.afterOtherStyle=e.observable(""),this.viewerFontSize=null,this.setViewerFontSizeObservable=t=>{this.viewerFontSize=t;const e=document.getElementsByName("vivliostyle-settings_viewer-font-size")[0];e&&(e.value=this.fontSizePxToPercent(Number(t()),100,5).toString())},this.viewerFontSizePercent=e.pureComputed({read(){if(!this.viewerFontSize)return 100;return this.fontSizePxToPercent(Number(this.viewerFontSize()),100,5)},write(t){if(!this.viewerFontSize)return;const e=parseFloat(String(t));let n=e&&this.fontSizePercentToPx(e);if(!n||n<5||n>72){const t=document.getElementsByName("vivliostyle-settings_viewer-font-size")[0];t&&(t.value="100"),n=b.viewerFontSize}this.viewerFontSize(Number(n))},owner:this}),this.cssText=e.pureComputed({read:this.toCSSText,write:this.fromCSSText,owner:this}),this.allImportant.subscribe((t=>{this.pageSizeImportant(t),this.pageMarginImportant(t),this.firstPageMarginZeroImportant(t),this.widowsOrphansImportant(t),this.imageMaxSizeToFitPageImportant(t),this.imageKeepAspectRatioImportant(t),this.baseFontSizeImportant(t),this.baseLineHeightImportant(t),this.baseFontFamilyImportant(t)})),this.pageStyleRegExp=new RegExp("^((?:\\n|.)*?)\\/\\*<viewer>\\*\\/\\s*(?:@page\\s*\\{\\s*(?:size:\\s*([^\\s!;{}]+)(?:\\s+([^\\s!;{}]+))?\\s*(!important)?(?:;|(?=[\\s{}]))\\s*)?(?:margin:\\s*([^\\s!;{}]+(?:\\s+[^\\s!;{}]+)?(?:\\s+[^\\s!;{}]+)?(?:\\s+[^\\s!;{}]+)?)\\s*(!important)?(?:;|(?=[\\s{}]))\\s*)?((?:[^{}]+|\\{[^{}]*\\})*)\\}\\s*)?(?:@page\\s*:first\\s*\\{\\s*(margin:\\s*0(?:\\w+|%)?\\s*(!important)?(?:;|(?=[\\s{}]))\\s*)?((?:[^{}]+|\\{[^{}]*\\})*)\\}\\s*)?((?:html|:root),\\s*body\\s*\\{\\s*margin:\\s*0(?:\\w+|%)?\\s*!important(?:;|(?=[\\s{}]))\\s*\\}\\s*)?(?:(?:html|:root)\\s*\\{\\s*(?:font-size:\\s*(calc\\([^()]+\\)|[^\\s!;{}]+)\\s*(!important)?(?:;|(?=[\\s{}]))\\s*)?(?:line-height:\\s*([^\\s!;{}]+)\\s*(!important)?(?:;|(?=[\\s{}]))\\s*)?(?:font-family:\\s*([^!;{}]+)\\s*(!important)?(?:;|(?=[\\s{}]))\\s*)?([^{}]*)\\}\\s*)?(?:body\\s*\\{\\s*(?:[-\\w]+:\\s*inherit\\s*!important(?:;|(?=[\\s{}]))\\s*)+\\}\\s*)?(?:\\*\\s*\\{\\s*widows:\\s*(1|999)\\s*(!important)?(?:;|(?=[\\s{}]))\\s*orphans:\\s*\\19\\s*\\20(?:;|(?=[\\s{}]))\\s*\\}\\s*)?(?:img,\\s*svg\\s*\\{\\s*(max-inline-size:\\s*100%\\s*(!important)?(?:;|(?=[\\s{}]))\\s*max-block-size:\\s*100vb\\s*\\22(?:;|(?=[\\s{}]))\\s*)?(object-fit:\\s*contain\\s*(!important)?(?:;|(?=[\\s{}]))\\s*)?\\}\\s*)?((?:\\n|.)*)$"),t&&this.copyFrom(t)}fontSizePxToPercent(t,e,n){let i=t/b.viewerFontSize*(e||100);return n&&(i=i.toPrecision(n).replace(/(?:\.0*|(\.\d*?)0+)$/,"$1")),i}fontSizePercentToPx(t,e,n){let i=t/(e||100)*b.viewerFontSize;return n&&(i=i.toPrecision(n).replace(/(?:\.0*|(\.\d*?)0+)$/,"$1")),i}fromCSSText(t){const e=this.pageStyleRegExp.exec(t);if(e){const[,t,n,i,r,o,a,s,u,l,c,h,f,d,g,m,v,b,C,y,w,D,S,N,T,A]=e;let x=A,I=v,F=f,P=c,O=s,R=C,k=n,L=i,B=0,_=0;if(this.beforeOtherStyle(t),"landscape"==k||"portrait"==k?(this.isLandscape("landscape"==k),k=L,L=null):"landscape"!=L&&"portrait"!=L||(this.isLandscape("landscape"==L),L=null),null!=k){if(null==L)if("auto"==k)this.pageSizeMode(p.Auto);else{const t=E.find((t=>t.name.toLowerCase()==k.toLowerCase()));t?(this.pageSizeMode(p.Preset),this.presetSize(t)):(this.pageSizeMode(p.Custom),this.customWidth(k),this.customHeight(k))}else this.pageSizeMode(p.Custom),this.customWidth(k),this.customHeight(L);this.pageSizeImportant(!!r),r?B++:_++}else this.pageSizeMode(p.Default);null!=o?(this.pageMarginMode("0"==o?p.Zero:p.Custom),"0"==o?this.pageMarginMode(p.Zero):(this.pageMarginMode(p.Custom),this.customMargin(o)),this.pageMarginImportant(!!a),a?B++:_++):this.pageMarginMode(p.Default),O=O||"",this.pageOtherStyle(O),u?(this.firstPageMarginZero(!0),this.firstPageMarginZeroImportant(!!l),l?B++:_++):this.firstPageMarginZero(!1),P=P||"",this.firstPageOtherStyle(P),h?this.forceHtmlBodyMarginZero(!0):this.forceHtmlBodyMarginZero(!1),null!=F?(F=F.replace(/^\s*calc\([.\d]+\s*\*\s*([.\d]+\w+)\)\s*$/,"$1"),this.baseFontSizeSpecified(!0),this.baseFontSize(F),this.baseFontSizeImportant(!!d),d?B++:_++):this.baseFontSizeSpecified(!1),null!=g?(this.baseLineHeightSpecified(!0),this.baseLineHeight(g),this.baseLineHeightImportant(!!m),m?B++:_++):this.baseLineHeightSpecified(!1),null!=I?(I=I.trim(),this.baseFontFamilySpecified(!0),this.baseFontFamily(I),this.baseFontFamilyImportant(!!b),b?B++:_++):this.baseFontFamilySpecified(!1),R=R||"",this.rootOtherStyle(R),null!=y?(this.widowsOrphans(y),this.widowsOrphansImportant(!!w),w?B++:_++):this.widowsOrphans(p.Default),D?(this.imageMaxSizeToFitPage(!0),this.imageMaxSizeToFitPageImportant(!!S),S?B++:_++):this.imageMaxSizeToFitPage(!1),N?(this.imageKeepAspectRatio(!0),this.imageKeepAspectRatioImportant(!!T),T?B++:_++):this.imageKeepAspectRatio(!1),x=x.replace(/\/\*<\/?viewer>\*\/\n?/g,"")||"",this.afterOtherStyle(x),this.allImportant(B>0&&0==_)}else{const e=t.replace(/\/\*<\/?viewer>\*\/\n?/g,"")||"";this.afterOtherStyle(e)}}toCSSText(){function t(t){return t?" !important":""}let e=this.beforeOtherStyle();if(e+="/*<viewer>*/\n",this.pageSizeMode()!=p.Default||this.pageMarginMode()!=p.Default||this.pageOtherStyle()){if(e+="@page { ",this.pageSizeMode()!=p.Default){switch(e+="size: ",this.pageSizeMode()){case p.Auto:e+="auto";break;case p.Preset:e+=this.presetSize().name,this.isLandscape()&&(e+=" landscape");break;case p.Custom:e+=`${this.customWidth()} ${this.customHeight()}`;break;default:throw new Error(`Unknown pageSizeMode ${this.pageSizeMode()}`)}e+=`${t(this.pageSizeImportant())}; `}if(this.pageMarginMode()!=p.Default){switch(e+="margin: ",this.pageMarginMode()){case p.Auto:e+="auto";break;case p.Zero:e+="0";break;case p.Custom:e+=`${this.customMargin()}`;break;default:throw new Error(`Unknown pageMarginMode ${this.pageMarginMode()}`)}e+=`${t(this.pageMarginImportant())}; `}e+=this.pageOtherStyle(),e+="}\n"}if((this.firstPageMarginZero()||this.firstPageOtherStyle())&&(e+="@page :first { ",this.firstPageMarginZero()&&(e+=`margin: 0${t(this.firstPageMarginZeroImportant())}; `),e+=this.firstPageOtherStyle(),e+="}\n"),this.forceHtmlBodyMarginZero()&&(e+=":root, body { margin: 0 !important; }\n"),this.baseFontSizeSpecified()||this.baseLineHeightSpecified()||this.baseFontFamilySpecified()||this.rootOtherStyle()){e+=":root { ";const n=this.baseFontSize();if(this.baseFontSizeSpecified())if(this.viewerFontSize&&this.viewerFontSize()!=b.viewerFontSize&&!n.endsWith("%")){e+=`font-size: calc(${this.fontSizePxToPercent(Number(this.viewerFontSize()),1,5)} * ${n})${t(this.baseFontSizeImportant())}; `}else e+=`font-size: ${this.baseFontSize()}${t(this.baseFontSizeImportant())}; `;this.baseLineHeightSpecified()&&(e+=`line-height: ${this.baseLineHeight()}${t(this.baseLineHeightImportant())}; `),this.baseFontFamilySpecified()&&(e+=`font-family: ${this.baseFontFamily()}${t(this.baseFontFamilyImportant())}; `),e+=this.rootOtherStyle(),e+="}\n"}return(this.baseFontSizeSpecified()&&this.baseFontSizeImportant()||this.baseLineHeightSpecified()&&this.baseLineHeightImportant()||this.baseFontFamilySpecified()&&this.baseFontFamilyImportant())&&(e+="body { ",this.baseFontSizeSpecified()&&this.baseFontSizeImportant()&&(e+="font-size: inherit !important; "),this.baseLineHeightSpecified()&&this.baseLineHeightImportant()&&(e+="line-height: inherit !important; "),this.baseFontFamilySpecified()&&this.baseFontFamilyImportant()&&(e+="font-family: inherit !important; "),e+="}\n"),this.widowsOrphans()&&(e+="* { ",e+=`widows: ${this.widowsOrphans()}${t(this.widowsOrphansImportant())}; `,e+=`orphans: ${this.widowsOrphans()}${t(this.widowsOrphansImportant())}; `,e+="}\n"),(this.imageMaxSizeToFitPage()||this.imageKeepAspectRatio())&&(e+="img, svg { ",this.imageMaxSizeToFitPage()&&(e+=`max-inline-size: 100%${t(this.imageMaxSizeToFitPageImportant())}; `,e+=`max-block-size: 100vb${t(this.imageMaxSizeToFitPageImportant())}; `),this.imageKeepAspectRatio()&&(e+=`object-fit: contain${t(this.imageKeepAspectRatioImportant())}; `),e+="}\n"),e+="/*</viewer>*/\n",e+=this.afterOtherStyle(),e}copyFrom(t){this.pageSizeMode(t.pageSizeMode()),this.presetSize(t.presetSize()),this.isLandscape(t.isLandscape()),this.customWidth(t.customWidth()),this.customHeight(t.customHeight()),this.pageSizeImportant(t.pageSizeImportant()),this.pageMarginMode(t.pageMarginMode()),this.customMargin(t.customMargin()),this.pageMarginImportant(t.pageMarginImportant()),this.firstPageMarginZero(t.firstPageMarginZero()),this.firstPageMarginZeroImportant(t.firstPageMarginZeroImportant()),this.forceHtmlBodyMarginZero(t.forceHtmlBodyMarginZero()),this.widowsOrphans(t.widowsOrphans()),this.widowsOrphansImportant(t.widowsOrphansImportant()),this.imageMaxSizeToFitPage(t.imageMaxSizeToFitPage()),this.imageMaxSizeToFitPageImportant(t.imageMaxSizeToFitPageImportant()),this.imageKeepAspectRatio(t.imageKeepAspectRatio()),this.imageKeepAspectRatioImportant(t.imageKeepAspectRatioImportant()),this.baseFontSize(t.baseFontSize()),this.baseFontSizeSpecified(t.baseFontSizeSpecified()),this.baseFontSizeImportant(t.baseFontSizeImportant()),this.baseLineHeight(t.baseLineHeight()),this.baseLineHeightSpecified(t.baseLineHeightSpecified()),this.baseLineHeightImportant(t.baseLineHeightImportant()),this.baseFontFamily(t.baseFontFamily()),this.baseFontFamilySpecified(t.baseFontFamilySpecified()),this.baseFontFamilyImportant(t.baseFontFamilyImportant()),this.allImportant(t.allImportant()),this.pageOtherStyle(t.pageOtherStyle()),this.firstPageOtherStyle(t.firstPageOtherStyle()),this.rootOtherStyle(t.rootOtherStyle()),this.beforeOtherStyle(t.beforeOtherStyle()),this.afterOtherStyle(t.afterOtherStyle()),this.viewerFontSize&&t.viewerFontSize&&this.viewerFontSize(t.viewerFontSize())}equivalentTo(t){return this.pageSizeMode()===t.pageSizeMode()&&((this.pageSizeMode()!==p.Preset||this.presetSize()===t.presetSize())&&((this.pageSizeMode()!==p.Preset||this.isLandscape()===t.isLandscape())&&((this.pageSizeMode()!==p.Custom||this.customWidth()===t.customWidth())&&((this.pageSizeMode()!==p.Custom||this.customHeight()===t.customHeight())&&(this.pageSizeImportant()===t.pageSizeImportant()&&(this.pageMarginMode()===t.pageMarginMode()&&((this.pageMarginMode()!==p.Custom||this.customMargin()===t.customMargin())&&(this.pageMarginImportant()===t.pageMarginImportant()&&(this.firstPageMarginZero()===t.firstPageMarginZero()&&(this.firstPageMarginZeroImportant()===t.firstPageMarginZeroImportant()&&(this.forceHtmlBodyMarginZero()===t.forceHtmlBodyMarginZero()&&(this.widowsOrphans()===t.widowsOrphans()&&(this.widowsOrphansImportant()===t.widowsOrphansImportant()&&(this.imageMaxSizeToFitPage()===t.imageMaxSizeToFitPage()&&(this.imageMaxSizeToFitPageImportant()===t.imageMaxSizeToFitPageImportant()&&(this.imageKeepAspectRatio()===t.imageKeepAspectRatio()&&(this.imageKeepAspectRatioImportant()===t.imageKeepAspectRatioImportant()&&(this.baseFontSizeSpecified()===t.baseFontSizeSpecified()&&((!this.baseFontSizeSpecified()||this.baseFontSize()===t.baseFontSize())&&(this.baseFontSizeImportant()===t.baseFontSizeImportant()&&(this.baseLineHeightSpecified()===t.baseLineHeightSpecified()&&((!this.baseLineHeightSpecified()||this.baseLineHeight()===t.baseLineHeight())&&(this.baseLineHeightImportant()===t.baseLineHeightImportant()&&(this.baseFontFamilySpecified()===t.baseFontFamilySpecified()&&((!this.baseFontFamilySpecified()||this.baseFontFamily()===t.baseFontFamily())&&(this.baseFontFamilyImportant()===t.baseFontFamilyImportant()&&(this.allImportant()===t.allImportant()&&(this.pageOtherStyle()===t.pageOtherStyle()&&(this.firstPageOtherStyle()===t.firstPageOtherStyle()&&(this.rootOtherStyle()===t.rootOtherStyle()&&(this.beforeOtherStyle()===t.beforeOtherStyle()&&(this.afterOtherStyle()===t.afterOtherStyle()&&!(!this.viewerFontSize!=!t.viewerFontSize||this.viewerFontSize&&this.viewerFontSize()!==t.viewerFontSize())))))))))))))))))))))))))))))))))}}C.Mode=p,C.Constants=b,C.PresetSize=E;var y={escapeUnicodeChar:t=>`\\u${(65536|t.charCodeAt(0)).toString(16).substring(1)}`,escapeUnicodeString(t){return t.replace(/[^-a-zA-Z0-9_]/g,this.escapeUnicodeChar)},percentEncodeAmpersandAndUnencodedPercent:t=>t.replace(/%(?![0-9A-Fa-f]{2})/g,"%25").replace(/&/g,"%26"),percentEncodeAmpersandAndPercent:t=>t.replace(/%/g,"%25").replace(/&/g,"%26"),percentDecodeAmpersandAndPercent:t=>t.replace(/%26/g,"&").replace(/%25/g,"%"),percentEncodeForDataURI:t=>encodeURI(t).replace(/#/g,"%23").replace(/&/g,"%26")};function w(t){return new RegExp(`[#&]${y.escapeUnicodeString(t)}=([^&]*)`,"g")}const D=new class{constructor(){this.history=window?window.history:null,this.location=window?window.location:{href:""},this.storedUrl=this.location.href}getBaseURL(){let t=this.location.href;return t=t.replace(/#.*$/,""),t.replace(/\/[^/]*$/,"/")}hasParameter(t){const e=this.location.href;return w(t).test(e)}getParameter(t){const e=this.location.href,n=w(t),i=[];let r;for(;r=n.exec(e);)i.push(r[1]);return i}setParameter(t,e,n){const i=this.location.href;let r;const o=w(t);let a=o.exec(i);if(a&&n)for(;n-- >=1;)a=o.exec(i);if(a){const t=a[1].length,n=a.index+a[0].length-t;r=i.substring(0,n)+e+i.substring(n+t)}else r=`${i+(i.match(/[#&]$/)?"":i.match(/#/)?"&":"#")+t}=${e}`,"src"===t&&(r=r.replace(/#(?!src)(.*?)&(src=[^&]*)/,"#$2&$1"));null!==this.history&&this.history.replaceState?this.history.replaceState(null,"",r):this.location.href=r,this.storedUrl=r}removeParameter(t,e){const n=this.location.href;let i;const r=w(t);let o=r.exec(n);if(o&&e&&(o=r.exec(n)),o){for(i=n;o;o=r.exec(i)){const t=o.index+o[0].length;i="#"==o[0].charAt(0)?i.substring(0,o.index+1)+i.substring(t+1):i.substring(0,o.index)+i.substring(t),r.lastIndex-=o[0].length}i=i.replace(/^(.*?)[#&]$/,"$1"),null!==this.history&&this.history.replaceState?this.history.replaceState(null,"",i):this.location.href=i}this.storedUrl=i}};class S{constructor(t){var n;const i=function(){const t=D.getParameter("src"),e=D.getParameter("b"),n=D.getParameter("x"),i=D.getParameter("bookMode")[0],r=D.getParameter("f")[0],o=D.getParameter("style"),a=D.getParameter("userStyle");return{srcUrls:t.length?t:e.length?e:n.length?n:null,bookMode:"true"===i||"false"!==i&&(!!e.length||null),fragment:r||null,authorStyleSheet:o.length?o:[],userStyleSheet:a.length?a:[]}}();this.srcUrls=e.observable(i.srcUrls||null),this.bookMode=e.observable(null!==(n=i.bookMode)&&void 0!==n?n:t),this.fragment=e.observable(i.fragment||""),this.authorStyleSheet=e.observable(i.authorStyleSheet),this.userStyleSheet=e.observable(i.userStyleSheet),this.pageStyle=new C,this.dataUserStyleIndex=-1,this.bookMode.subscribe((e=>{e===t?D.removeParameter("bookMode"):D.setParameter("bookMode",e.toString())})),this.fragment.subscribe((t=>{if(/^epubcfi\(\/([246]\/)?2!\)/.test(t))D.removeParameter("f");else{const e=t.replace(/[\s+&?=#\u007F-\uFFFF]+/g,encodeURIComponent);D.setParameter("f",e)}})),i.userStyleSheet.find(((t,e)=>{if(/^data:,.*?\/\*(?:<|%3C)viewer(?:>|%3E)\*\//.test(t)){this.dataUserStyleIndex=e;const n=t.replace(/^data:,/,"").replace(/%(?![0-9A-Fa-f]{2})/g,"%25"),i=decodeURIComponent(n);return this.pageStyle.cssText(i),!0}return!1})),this.pageStyle.cssText.subscribe((t=>{this.updateUserStyleSheetFromCSSText(t)}))}toObject(){function t(t){return t.map((t=>({url:t})))}const e=t(this.userStyleSheet());return this.pageStyle.pageSizeMode()==C.Mode.Default&&e.unshift({text:"@page{size:auto}"}),{fragment:this.fragment(),authorStyleSheet:t(this.authorStyleSheet()),userStyleSheet:e}}updateUserStyleSheetFromCSSText(t){null==t&&(t=this.pageStyle.toCSSText());const e=this.userStyleSheet();if((!t||/^\s*(\/\*.*?\*\/\s*)*$/.test(t))&&e.length<=(-1==this.dataUserStyleIndex?0:1))return e.pop(),this.dataUserStyleIndex=-1,this.userStyleSheet(e),void D.removeParameter("userStyle");const n="data:,"+y.percentEncodeForDataURI(t.trim());-1==this.dataUserStyleIndex?(e.push(n),this.dataUserStyleIndex=e.length-1):e[this.dataUserStyleIndex]=n,this.userStyleSheet(e),D.setParameter("userStyle",n,this.dataUserStyleIndex)}}class N{toSpreadViewString(){switch(this){case T.SPREAD:return"true";case T.SINGLE_PAGE:return"false";case T.AUTO_SPREAD:return"auto";default:throw new Error("Invalid PageViewMode")}}toString(){switch(this){case T.SPREAD:return"spread";case T.SINGLE_PAGE:return"singlePage";case T.AUTO_SPREAD:return"autoSpread";default:throw new Error("Invalid PageViewMode")}}}const T={AUTO_SPREAD:new N,SINGLE_PAGE:new N,SPREAD:new N,defaultMode(){return this.AUTO_SPREAD},fromSpreadViewString(t){switch(t){case"true":return this.SPREAD;case"false":return this.SINGLE_PAGE;case"auto":default:return this.AUTO_SPREAD}},of(t){switch(t){case m.PageViewMode.SPREAD:return this.SPREAD;case m.PageViewMode.SINGLE_PAGE:return this.SINGLE_PAGE;case m.PageViewMode.AUTO_SPREAD:return this.AUTO_SPREAD;default:throw new Error(`Invalid PageViewMode name: ${t}`)}}};class A{constructor(t){this.zoom=t}get fitToScreen(){return null}getCurrentZoomFactor(t){return 1}toggleFitToScreen(){return new A(1)}zoomIn(t){return new I(1.25*this.getCurrentZoomFactor(t))}zoomOut(t){return new I(.8*this.getCurrentZoomFactor(t))}zoomToActualSize(){return new I(1)}static createDefaultOptions(){return new x}static createFromZoomFactor(t){return new I(t)}}class x extends A{constructor(){super(1)}get fitToScreen(){return!0}toggleFitToScreen(){return new I(1)}getCurrentZoomFactor(t){return t.queryZoomFactor(m.ZoomType.FIT_INSIDE_VIEWPORT)}}class I extends A{get fitToScreen(){return!1}toggleFitToScreen(){return new x}getCurrentZoomFactor(){return this.zoom}}function F(){return{renderAllPages:!0,fontSize:16,profile:!1,pageViewMode:T.defaultMode(),zoom:A.createDefaultOptions()}}class P{constructor(t){var n;const i="boolean"==typeof t?t:void 0,r="object"==typeof t?t:void 0;if(this.renderAllPages=e.observable(),this.fontSize=e.observable(),this.profile=e.observable(),this.pageViewMode=e.observable(),this.zoom=e.observable(),r)this.copyFrom(r);else{const t=F(),e=function(){const t=D.getParameter("renderAllPages")[0],e=D.getParameter("fontSize")[0],n=/^([\d.]+)(?:(%25|%)|\/([\d.]+))?$/.exec(e);let i=null;if(n){const[,t,e,r]=n;i=parseFloat(t),(e||r)&&(i=16*i/(e?100:parseFloat(r))),i<5&&(i=5),i>72&&(i=72)}return{renderAllPages:"true"===t||"false"!==t&&!D.hasParameter("b")&&null,fontSize:i,profile:"true"===D.getParameter("profile")[0],pageViewMode:T.fromSpreadViewString(D.getParameter("spread")[0]),zoom:void 0}}();this.renderAllPages(null!==(n=e.renderAllPages)&&void 0!==n?n:i),this.fontSize(e.fontSize||t.fontSize),this.profile(e.profile||t.profile),this.pageViewMode(e.pageViewMode||t.pageViewMode),this.zoom(t.zoom),this.pageViewMode.subscribe((e=>{e===t.pageViewMode?D.removeParameter("spread"):D.setParameter("spread",e.toSpreadViewString())})),this.renderAllPages.subscribe((t=>{t===i?D.removeParameter("renderAllPages"):D.setParameter("renderAllPages",t.toString())})),this.fontSize.subscribe((e=>{"number"==typeof e&&(e=e.toPrecision(10).replace(/(?:\.0*|(\.\d*?)0+)$/,"$1")),Number(e)==t.fontSize?D.removeParameter("fontSize"):D.setParameter("fontSize",`${e}/${t.fontSize}`)}))}}copyFrom(t){this.renderAllPages(t.renderAllPages()),this.fontSize(t.fontSize()),this.profile(t.profile()),this.pageViewMode(t.pageViewMode()),this.zoom(t.zoom())}toObject(){return{renderAllPages:this.renderAllPages(),fontSize:Number(this.fontSize()),pageViewMode:this.pageViewMode().toString(),fitToScreen:this.zoom().fitToScreen,zoom:this.zoom().zoom}}}P.getDefaultValues=F;var O,R=e.observableArray();!function(t){t.Debug="debug",t.Info="info",t.Warn="warn",t.Error="error"}(O||(O={}));class k{constructor(){this.logLevel=O.Error}static getLogger(){return new k}setLogLevel(t){this.logLevel=t}debug(t){this.logLevel===O.Debug&&R.push({type:"debug",content:t})}info(t){this.logLevel!==O.Debug&&this.logLevel!==O.Info||R.push({type:"info",content:t})}warn(t){this.logLevel!==O.Debug&&this.logLevel!==O.Info&&this.logLevel!==O.Warn||R.push({type:"warn",content:t})}error(t){var e,n;if(this.logLevel===O.Debug||this.logLevel===O.Info||this.logLevel===O.Warn||this.logLevel===O.Error){if(null===(n=null===(e=t)||void 0===e?void 0:e.error)||void 0===n?void 0:n.toString().includes("history.replaceState()"))return;R.push({type:"error",content:t})}}}const L={readonlyObservable(t){const n=e.observable(t);return{getter:e.pureComputed((()=>n())),value:n}}};class B{constructor(t,n){this.viewerOptions_=n,this.documentOptions_=null,this.coreViewer_=new m.CoreViewer(t,n.toObject());const i=this.state_={status:L.readonlyObservable(m.ReadyState.LOADING),pageProgression:L.readonlyObservable(m.PageProgression.LTR)};this.state={status:i.status.getter.extend({rateLimit:{timeout:100,method:"notifyWhenChangesStop"},notify:"always"}),navigatable:e.pureComputed((()=>i.status.value()&&i.status.value()!==m.ReadyState.LOADING)),pageProgression:i.pageProgression.getter},this.epage=e.observable(),this.epageCount=e.observable(),this.firstPage=e.observable(),this.lastPage=e.observable(),this.tocVisible=e.observable(),this.tocPinned=e.observable(),this.inputUrl=e.observable(""),this.setupViewerEventHandler(),this.setupViewerOptionSubscriptions()}setupViewerEventHandler(){const t=k.getLogger();this.coreViewer_.addListener("debug",(e=>{t.debug(e.content)})),this.coreViewer_.addListener("info",(e=>{t.info(e.content)})),this.coreViewer_.addListener("warn",(e=>{t.warn(e.content)})),this.coreViewer_.addListener("error",(e=>{t.error(e.content)})),this.coreViewer_.addListener("readystatechange",(()=>{const t=this.coreViewer_.readyState;t!==m.ReadyState.INTERACTIVE&&t!==m.ReadyState.COMPLETE||this.state_.pageProgression.value(this.coreViewer_.getCurrentPageProgression()),this.state_.status.value(t)})),this.coreViewer_.addListener("loaded",(()=>{this.viewerOptions_.profile()&&m.profiler.printTimings()})),this.coreViewer_.addListener("nav",(t=>{const{cfi:e,first:n,last:i,epage:r,epageCount:o,metadata:a,docTitle:s}=t;if(e&&this.documentOptions_.fragment(e),void 0!==r&&this.epage(r),void 0!==o&&this.epageCount(o),void 0!==n&&this.firstPage(n),void 0!==i&&this.lastPage(i),a||s){const t=a&&a["http://purl.org/dc/terms/title"],e=t&&t[0]&&t[0].v;e?!s||s===e||this.firstPage()||/\.xhtml$/.test(s)?document.title=e:document.title=`${s} | ${e}`:document.title=s||"Vivliostyle Viewer"}const u=this.tocVisible(),l=this.coreViewer_.isTOCVisible();u&&!l||this.tocVisible(l)})),this.coreViewer_.addListener("hyperlink",(t=>{t.internal?(this.navigateToInternalUrl(t.href),this.tocVisible()&&this.tocVisible(!1),document.getElementById("vivliostyle-viewer-viewport").focus()):window.location.href=t.href}))}setupViewerOptionSubscriptions(){e.computed((function(){const t=this.viewerOptions_.toObject();this.coreViewer_.setOptions(t)}),this).extend({rateLimit:0})}loadDocument(t,e){this.state_.status.value(m.ReadyState.LOADING),e&&this.viewerOptions_.copyFrom(e),this.documentOptions_=t,t.srcUrls()?t.bookMode()?this.coreViewer_.loadPublication(t.srcUrls()[0],t.toObject(),this.viewerOptions_.toObject()):this.coreViewer_.loadDocument(t.srcUrls(),t.toObject(),this.viewerOptions_.toObject()):this.state_.status.value("")}navigateToPrevious(){this.coreViewer_.navigateToPage(m.Navigation.PREVIOUS)}navigateToNext(){this.coreViewer_.navigateToPage(m.Navigation.NEXT)}navigateToLeft(){this.coreViewer_.navigateToPage(m.Navigation.LEFT)}navigateToRight(){this.coreViewer_.navigateToPage(m.Navigation.RIGHT)}navigateToFirst(){this.coreViewer_.navigateToPage(m.Navigation.FIRST)}navigateToLast(){this.coreViewer_.navigateToPage(m.Navigation.LAST)}navigateToEPage(t){this.coreViewer_.navigateToPage(m.Navigation.EPAGE,t)}navigateToInternalUrl(t){this.coreViewer_.navigateToInternalUrl(t)}queryZoomFactor(t){return this.coreViewer_.queryZoomFactor(t)}epageToPageNumber(t){if(!t&&0!=t)return;return Math.round(t+1)}epageFromPageNumber(t){if(!t&&0!=t)return;return t-1}showTOC(t,e){if(null==this.coreViewer_.isTOCVisible())return;const n=null==t?!this.tocVisible():t;this.tocVisible(n),this.tocPinned(!!n&&!e),this.coreViewer_.showTOC(n,e)}}const _={Unidentified:"Unidentified",ArrowDown:"ArrowDown",ArrowLeft:"ArrowLeft",ArrowRight:"ArrowRight",ArrowUp:"ArrowUp",Home:"Home",End:"End",PageDown:"PageDown",PageUp:"PageUp",Escape:"Escape",Enter:"Enter",Space:" "};var M={Keys:_,identifyKeyFromEvent:function(t){const e=t.key,n=t.keyIdentifier,i=t.location;return e===_.ArrowDown||"Down"===e||"Down"===n?t.metaKey?_.End:_.ArrowDown:e===_.ArrowLeft||"Left"===e||"Left"===n?_.ArrowLeft:e===_.ArrowRight||"Right"===e||"Right"===n?_.ArrowRight:e===_.ArrowUp||"Up"===e||"Up"===n?t.metaKey?_.Home:_.ArrowUp:e===_.Escape||"Esc"===e||"U+001B"===n?_.Escape:e===_.Enter||"Enter"===n?_.Enter:e===_.Space||"U+0020"===n?_.Space:"0"===e||"U+0030"===n?"0":"+"===e||"Add"===e||"U+002B"===n||"U+00BB"===n||"U+004B"===n&&i===KeyboardEvent.DOM_KEY_LOCATION_NUMPAD?"+":"-"===e||"Subtract"===e||"U+002D"===n||"U+00BD"===n||"U+004D"===n&&i===KeyboardEvent.DOM_KEY_LOCATION_NUMPAD?"-":e||n||_.Unidentified}};const{Keys:U}=M;class V{constructor(t,n,i,r){this.viewerOptions_=t,this.viewer_=n,this.settingsPanel_=i,this.justClicked=!1,this.isDisabled=e.pureComputed((()=>this.settingsPanel_.opened()&&!this.settingsPanel_.pinned()||!this.viewer_.state.navigatable()));const o=e.pureComputed((()=>r.disablePageNavigation||this.isDisabled()));o.subscribe((t=>{const e=document.getElementById("vivliostyle-page-number");e&&(e.disabled=t)})),this.isPageNumberDisabled=e.pureComputed((()=>o())),this.isPageSliderDisabled=e.pureComputed((()=>!(!r.disablePageSlider&&!o())||this.totalPages()<=1)),this.isNavigateToPreviousDisabled=e.pureComputed((()=>!!o()||void 0!==this.viewer_.state.status&&this.viewer_.firstPage())),this.isNavigateToNextDisabled=e.pureComputed((()=>!!o()||void 0!==this.viewer_.state.status&&((!this.viewerOptions_.renderAllPages()||this.viewer_.state.status()==m.ReadyState.COMPLETE)&&this.viewer_.lastPage()))),this.isNavigateToLeftDisabled=e.pureComputed((()=>!!o()||void 0!==this.viewer_.state.pageProgression&&(this.viewer_.state.pageProgression()===m.PageProgression.LTR?this.isNavigateToPreviousDisabled():this.isNavigateToNextDisabled()))),this.isNavigateToRightDisabled=e.pureComputed((()=>!!o()||void 0!==this.viewer_.state.pageProgression&&(this.viewer_.state.pageProgression()===m.PageProgression.LTR?this.isNavigateToNextDisabled():this.isNavigateToPreviousDisabled()))),this.isNavigateToFirstDisabled=this.isNavigateToPreviousDisabled,this.isNavigateToLastDisabled=e.pureComputed((()=>!!o()||void 0!==this.viewer_.state.status&&(!(!this.viewerOptions_.renderAllPages()||this.viewer_.state.status()==m.ReadyState.COMPLETE)||this.viewer_.lastPage()))),this.hidePageNavigation=!!r.disablePageNavigation;const a=e.pureComputed((()=>r.disableZoom||this.isDisabled()));this.isZoomOutDisabled=a,this.isZoomInDisabled=a,this.isZoomToActualSizeDisabled=a,this.isToggleFitToScreenDisabled=a,this.hideZoom=!!r.disableZoom,this.fitToScreen=e.pureComputed((()=>t.zoom().fitToScreen));const s=e.pureComputed((()=>r.disableFontSizeChange||this.isDisabled()));this.isIncreaseFontSizeDisabled=e.pureComputed((()=>!!s()||this.viewerOptions_.fontSize()>=72)),this.isDecreaseFontSizeDisabled=e.pureComputed((()=>!!s()||this.viewerOptions_.fontSize()<=5)),this.isDefaultFontSizeDisabled=s,this.hideFontSizeChange=!!r.disableFontSizeChange,this.isTOCToggleDisabled=e.pureComputed((()=>r.disableTOCNavigation||this.isDisabled()||null==this.viewer_.tocVisible())),this.hideTOCNavigation=!!r.disableTOCNavigation,this.hidePageSlider=!!r.disablePageSlider,this.pageNumber=e.pureComputed({read(){return this.viewer_.epageToPageNumber(this.viewer_.epage())},write(t){const e=this.viewer_.epage(),n=this.viewer_.epageToPageNumber(e);let i=parseFloat(t.toString().replace(/[０-９]/g,(t=>String.fromCharCode(t.charCodeAt(0)-65248))))||0;if(/^[-+]/.test(t.toString())&&(i=n+i),i<1)i=1;else{const t=this.viewer_.epageCount();this.viewerOptions_.renderAllPages()?i>t&&(i=t):i>t+1&&(i=t+1)}const r=this.viewer_.epageFromPageNumber(i),o=document.getElementById("vivliostyle-page-number");o.value=i.toString(),this.viewer_.navigateToEPage(r),setTimeout((()=>{this.viewer_.state.status()!=m.ReadyState.LOADING&&this.viewer_.epage()===e&&(o.value=n.toString()),document.getElementById("vivliostyle-viewer-viewport").focus()}),10)},owner:this}),this.totalPages=e.pureComputed((()=>{let t=this.viewer_.epageCount();if(!t)return t;const e=Number(this.pageNumber());return this.viewer_.lastPage()?t=e:e>=t&&t++,t})),this.pageSlider=e.pureComputed({read(){return this.pageNumber()},write(t){if(this.viewerOptions_.renderAllPages()){const e=Number(t),n=this.viewer_.epageFromPageNumber(e);this.viewer_.navigateToEPage(n)}else{document.getElementById("vivliostyle-page-number").value=String(t)}},owner:this}),this.pageSliderMax=this.totalPages,["navigateToPrevious","navigateToNext","navigateToLeft","navigateToRight","navigateToFirst","navigateToLast","zoomIn","zoomOut","zoomToActualSize","toggleFitToScreen","increaseFontSize","decreaseFontSize","defaultFontSize","onfocusPageNumber","onmouseupPageSlider","onwheelPageSlider","onwheelViewport","onclickViewport","toggleTOC"].forEach((t=>{this[t]=this[t].bind(this)}))}static PREVIOUS(t){throw new Error("Method not implemented.")}static NEXT(t){throw new Error("Method not implemented.")}static LEFT(t){throw new Error("Method not implemented.")}static RIGHT(t){throw new Error("Method not implemented.")}static FIRST(t){throw new Error("Method not implemented.")}static LAST(t){throw new Error("Method not implemented.")}static EPAGE(t,e){throw new Error("Method not implemented.")}navigateToPrevious(){return!this.isNavigateToPreviousDisabled()&&(this.viewer_.navigateToPrevious(),!0)}navigateToNext(){return!this.isNavigateToNextDisabled()&&(this.viewer_.navigateToNext(),!0)}navigateToLeft(){return!this.isNavigateToLeftDisabled()&&(this.viewer_.navigateToLeft(),!0)}navigateToRight(){return!this.isNavigateToRightDisabled()&&(this.viewer_.navigateToRight(),!0)}navigateToFirst(){return!this.isNavigateToFirstDisabled()&&(this.viewer_.navigateToFirst(),!0)}navigateToLast(){return!this.isNavigateToLastDisabled()&&(this.viewer_.navigateToLast(),!0)}zoomIn(){if(this.isZoomInDisabled())return!1;{const t=this.viewerOptions_.zoom();return this.viewerOptions_.zoom(t.zoomIn(this.viewer_)),!0}}zoomOut(){if(this.isZoomOutDisabled())return!1;{const t=this.viewerOptions_.zoom();return this.viewerOptions_.zoom(t.zoomOut(this.viewer_)),!0}}zoomToActualSize(){if(this.isZoomToActualSizeDisabled())return!1;{const t=this.viewerOptions_.zoom();return this.viewerOptions_.zoom(t.zoomToActualSize()),!0}}toggleFitToScreen(){if(this.isToggleFitToScreenDisabled())return!1;{const t=this.viewerOptions_.zoom();return this.viewerOptions_.zoom(t.toggleFitToScreen()),!0}}increaseFontSize(){if(this.isIncreaseFontSizeDisabled())return!1;{let t=Number(this.viewerOptions_.fontSize());return t=t<10?Math.floor(t)+1:t<20?2*(Math.floor(t/2)+1):t<40?4*(Math.floor(t/4)+1):t<72?8*(Math.floor(t/8)+1):72,this.viewerOptions_.fontSize(t),this.updateFontSizeSettings(),!0}}decreaseFontSize(){if(this.isDecreaseFontSizeDisabled())return!1;{let t=Number(this.viewerOptions_.fontSize());return t=t>40?8*(Math.ceil(t/8)-1):t>20?4*(Math.ceil(t/4)-1):t>10?2*(Math.ceil(t/2)-1):t>5?Math.ceil(t)-1:5,this.viewerOptions_.fontSize(t),this.updateFontSizeSettings(),!0}}defaultFontSize(){if(this.isDefaultFontSizeDisabled())return!1;{const t=P.getDefaultValues().fontSize;return this.viewerOptions_.fontSize(t),this.updateFontSizeSettings(),!0}}updateFontSizeSettings(){this.settingsPanel_.state.viewerOptions.fontSize(this.viewerOptions_.fontSize()),this.viewer_.documentOptions_.pageStyle.baseFontSizeSpecified()&&(this.viewer_.documentOptions_.updateUserStyleSheetFromCSSText(),this.viewer_.loadDocument(this.viewer_.documentOptions_,this.viewerOptions_))}onfocusPageNumber(t,e){const n=e.currentTarget;return setTimeout((()=>{n.setSelectionRange(0,n.value.length)}),0),!0}onmouseupPageSlider(t,e){if(this.viewerOptions_.renderAllPages())return!0;const n=document.getElementById("vivliostyle-page-number"),i=Number(n.value),r=this.viewer_.epageFromPageNumber(i);return this.viewer_.navigateToEPage(r),!0}onwheelPageSlider(t,e){return e.preventDefault(),0===e.deltaMode&&Math.abs(e.deltaX)<2&&Math.abs(e.deltaY)<2||(Math.abs(e.deltaX)>=Math.abs(e.deltaY)?e.deltaX<0?this.navigateToLeft():this.navigateToRight():e.deltaY<0?this.navigateToPrevious():this.navigateToNext()),!0}onwheelViewport(t,e){const n=document.getElementById("vivliostyle-viewer-viewport");return!!(this.viewer_.tocVisible()&&n!=document.activeElement||n.scrollWidth>n.clientWidth||n.scrollHeight>n.clientHeight)||this.onwheelPageSlider(t,e)}onclickViewport(t,e){if(this.pageNumber(),this.settingsPanel_.justClicked)return!0;if(this.viewer_.tocVisible()&&!this.viewer_.tocPinned()){const t=document.querySelector("[data-vivliostyle-toc-box]");t&&!t.contains(document.activeElement)&&this.toggleTOC()}return this.settingsPanel_.opened()&&!this.settingsPanel_.pinned()&&this.settingsPanel_.close(),!0}toggleTOC(){if(this.isTOCToggleDisabled())return!1;{let t=null;return this.viewer_.tocVisible()?this.justClicked?(this.viewer_.showTOC(!0,!1),this.justClicked=!1):(null!==t&&(clearInterval(t),t=null),this.viewer_.showTOC(!1),this.justClicked=!0,setTimeout((()=>{this.justClicked&&(document.getElementById("vivliostyle-viewer-viewport").focus(),this.justClicked=!1)}),300)):(this.justClicked?(this.viewer_.showTOC(!0,!1),this.justClicked=!1):(this.viewer_.showTOC(!0,!0),this.justClicked=!0),t=setInterval((()=>{const e=document.querySelector("[data-vivliostyle-toc-box]");e&&"visible"===e.style.visibility&&(e.tabIndex=0,e.focus(),clearInterval(t),t=null),this.justClicked=!1}),300)),!0}}navigateTOC(t){const e=Array.from(document.querySelectorAll("[data-vivliostyle-toc-box]>*>*>*>*>*:not([hidden]) [tabindex='0'],[data-vivliostyle-toc-box]>*>*>*>*>*:not([hidden]) a[href]:not([tabindex='-1'])"));let n=e.indexOf(document.activeElement);const i=t=>e[t]&&"button"===e[t].getAttribute("role"),r=t=>e[t]&&"true"===e[t].getAttribute("aria-expanded");switch(t){case U.ArrowLeft:if(-1==n){n=e.length-1;break}if(!i(n)&&i(n-1)&&n--,i(n)&&r(n))e[n].click();else for(let t=n-1;t>=0;t--)if(i(t)&&e[t].parentElement.contains(e[n])){n=t;break}break;case U.ArrowRight:if(-1==n){n=0;break}!i(n)&&i(n-1)&&n--,i(n)&&(r(n)?n+=2:e[n].click());break;case U.ArrowDown:n++;break;case U.ArrowUp:if(-1==n){n=e.length-1;break}n>0&&i(--n)&&n--;break;case U.Home:n=0;break;case U.End:n=e.length-1;break;case U.Space:!i(n)&&i(n-1)&&n--,i(n)&&e[n].click()}return i(n)&&n++,e[n]&&e[n].focus(),!0}handleKey(t){if(this.settingsPanel_.opened()&&this.settingsPanel_.settingsToggle.contains(document.activeElement))return!0;const e=document.getElementById("vivliostyle-page-number"),n=document.getElementById("vivliostyle-viewer-viewport"),i=n.scrollWidth>n.clientWidth,r=n.scrollHeight>n.clientHeight,o=e===document.activeElement,a=this.viewer_.tocVisible()&&!o&&n!=document.activeElement;switch(t){case"+":return o||!this.increaseFontSize();case"-":return o||!this.decreaseFontSize();case"0":return o||!this.defaultFontSize();case"1":return o||!this.zoomToActualSize();case U.ArrowLeft:return a?!this.navigateTOC(t):o||i||!this.navigateToLeft();case U.ArrowRight:return a?!this.navigateTOC(t):o||i||!this.navigateToRight();case U.ArrowDown:return a?!this.navigateTOC(t):(n.focus(),r||!this.navigateToNext());case U.ArrowUp:return a?!this.navigateTOC(t):(n.focus(),r||!this.navigateToPrevious());case U.PageDown:return!!a||(n.focus(),!this.navigateToNext());case U.PageUp:return!!a||(n.focus(),!this.navigateToPrevious());case U.Home:return a?!this.navigateTOC(t):(n.focus(),!this.navigateToFirst());case U.End:return a?!this.navigateTOC(t):(n.focus(),!this.navigateToLast());case"o":case"O":return n.focus(),!this.zoomOut();case"i":case"I":return n.focus(),!this.zoomIn();case"f":case"F":return n.focus(),!this.toggleFitToScreen();case"g":case"G":return e.focus(),!1;case"t":case"T":return n.focus(),!this.toggleTOC();case U.Escape:return this.viewer_.tocVisible()?!this.toggleTOC():(n.focus(),!0);case U.Space:return a?!this.navigateTOC(t):"button"!==document.activeElement.getAttribute("role")||(document.activeElement.click(),!1);default:return!0}}}const{Keys:z}=M;class H{constructor(t,n,i,r,o){this.viewerOptions_=t,this.documentOptions_=n,this.viewer_=i,this.isPageStyleChangeDisabled=!!o.disablePageStyleChange,this.isOverrideDocumentStyleSheetDisabled=this.isPageStyleChangeDisabled,this.isPageViewModeChangeDisabled=!!o.disablePageViewModeChange,this.isBookModeChangeDisabled=!!o.disableBookModeChange,this.isRenderAllPagesChangeDisabled=!!o.disableRenderAllPagesChange,this.justClicked=!1,this.settingsToggle=document.getElementById("vivliostyle-menu-item_settings-toggle"),this.opened=e.observable(!1),this.pinned=e.observable(!1),this.state={viewerOptions:new P(t),pageStyle:new C(n.pageStyle),pageViewMode:e.pureComputed({read:()=>this.state.viewerOptions.pageViewMode().toString(),write:t=>{this.state.viewerOptions.pageViewMode(T.of(t))}}),bookMode:e.observable(n.bookMode()),renderAllPages:e.pureComputed({read:()=>this.state.viewerOptions.renderAllPages(),write:t=>{this.state.viewerOptions.renderAllPages(t)}})},this.state.pageStyle.setViewerFontSizeObservable(this.state.viewerOptions.fontSize),this.defaultPageStyle=new C,["close","toggle","apply","cancel","resetUserStyle"].forEach((function(t){this[t]=this[t].bind(this)}),this),r.visible.subscribe((function(t){t&&this.close()}),this),this.state.bookMode.subscribe((t=>{n.bookMode(t)})),this.state.renderAllPages.subscribe((e=>{t.renderAllPages(e)}))}close(){this.opened(!1),this.pinned(!1);const t=document.getElementById("vivliostyle-viewer-viewport");return t&&t.focus(),!0}toggle(){this.opened()?this.justClicked?(this.justClicked=!1,this.pinned(!0)):(this.close(),this.justClicked=!0,setTimeout((()=>{this.justClicked=!1}),300)):(this.viewer_.tocPinned()||this.viewer_.showTOC(!1),this.opened(!0),this.justClicked?(this.justClicked=!1,this.pinned(!0)):(this.pinned(!1),this.justClicked=!0,this.focusToFirstItem(),setTimeout((()=>{this.justClicked=!1}),300)))}apply(){this.documentOptions_.pageStyle.copyFrom(this.state.pageStyle),this.documentOptions_.pageStyle.baseFontSizeSpecified()&&this.documentOptions_.updateUserStyleSheetFromCSSText(),this.viewer_.loadDocument(this.documentOptions_,this.state.viewerOptions),this.pinned()?this.focusToFirstItem():this.close()}cancel(){this.state.viewerOptions.copyFrom(this.viewerOptions_),this.state.pageStyle.copyFrom(this.documentOptions_.pageStyle),this.close()}resetUserStyle(){return this.state.pageStyle.copyFrom(this.defaultPageStyle),this.state.viewerOptions.fontSize(P.getDefaultValues().fontSize),setTimeout((()=>{document.getElementsByName("vivliostyle-settings_reset-user-style")[0].checked=!1}),200),!0}focusToFirstItem(t){const e=t||this.settingsToggle,n=["input","textarea","summary"].includes(e.localName)?e:Array.from(e.getElementsByTagName("input")).find((t=>!t.disabled&&("radio"!=t.type||t.checked)));if(n){for(let t=n.parentElement;t&&t!=this.settingsToggle;t=t.parentElement)"details"==t.localName&&(t.open=!0);n.focus()}}handleKey(t){const e=this.opened()&&this.settingsToggle.contains(document.activeElement),n=e&&("text"==document.activeElement.type||"select"==document.activeElement.localName),i=e&&"textarea"==document.activeElement.localName,r=e&&!n&&!i;switch(t){case z.Escape:return this.opened()&&(this.cancel(),this.close()),!0;case"s":case"S":return!(!this.opened()||r||!e)||(this.toggle(),!1);case"p":case"P":return!r||(this.focusToFirstItem(document.getElementById("vivliostyle-settings_page-view-and-rendering").firstElementChild),!1);case"v":case"V":return!r||(this.focusToFirstItem(document.getElementById("vivliostyle-settings_page-view-mode")),!1);case"b":case"B":return!r||(this.focusToFirstItem(document.getElementsByName("vivliostyle-settings_book-mode")[0]),!1);case"a":case"A":return!r||(this.focusToFirstItem(document.getElementsByName("vivliostyle-settings_render-all-pages")[0]),!1);case"u":case"U":return!r||(this.focusToFirstItem(document.getElementById("vivliostyle-settings_user-style").firstElementChild),!1);case"z":case"Z":return!r||(this.focusToFirstItem(document.getElementById("vivliostyle-settings_page-size")),!1);case"m":case"M":return!r||(this.focusToFirstItem(document.getElementById("vivliostyle-settings_page-margin")),!1);case"k":case"K":return!r||(this.focusToFirstItem(document.getElementById("vivliostyle-settings_page-breaks")),!1);case"i":case"I":return!r||(this.focusToFirstItem(document.getElementById("vivliostyle-settings_images")),!1);case"t":case"T":return!r||(this.focusToFirstItem(document.getElementById("vivliostyle-settings_text")),!1);case"o":case"O":return!r||(this.focusToFirstItem(document.getElementsByName("vivliostyle-settings_override-document-stylesheets")[0]),!1);case"c":case"C":return!r||(this.focusToFirstItem(document.getElementsByName("vivliostyle-settings_css-details")[0]),!1);case"r":case"R":return!r||(this.focusToFirstItem(document.getElementsByName("vivliostyle-settings_reset-user-style")[0]),!1);case z.Enter:return!(n||r&&"vivliostyle-menu-button_apply"!==document.activeElement.id&&"vivliostyle-menu-button_reset"!==document.activeElement.id)||(document.getElementById("vivliostyle-menu-button_apply").focus(),!1);default:return!0}}}class G{constructor(t){this.list=t,this.visible=e.pureComputed((()=>t().length>0))}getDisplayMessage(t){const e=t.error;let n=e&&(e.toString()||e.frameTrace||e.stack);return n&&(n=n.split("\n",1)[0]),n||(n=t.messages.join("\n")),n}}class W{constructor(){var t;const e=[].concat(null!==(t=document.documentElement.getAttribute("data-vivliostyle-viewer-flags"))&&void 0!==t?t:[],D.getParameter("flags")).join(),n=e.includes("S"),i={disablePageStyleChange:n||e.includes("P"),disablePageViewModeChange:n||e.includes("V"),disableBookModeChange:n||e.includes("B"),disableRenderAllPagesChange:n||e.includes("A")},r={disableTOCNavigation:e.includes("T"),disablePageNavigation:e.includes("N"),disableZoom:e.includes("Z"),disableFontSizeChange:e.includes("F"),disablePageSlider:e.includes("s")},o=e.includes("c"),a=e.includes("p"),s=e.includes("b"),u=!e.includes("a");if(n){const t=document.getElementById("vivliostyle-welcome");t&&t.remove();const e=document.querySelector(".vivliostyle-menu-detail"),n=document.querySelector(".vivliostyle-menu-detail-main");e&&n&&(n.style.visibility="hidden",e.style.height="auto")}if(o&&(document.oncontextmenu=()=>!1),a){const t=document.createElement("style");t.setAttribute("media","print"),t.textContent="*{display:none}",document.head.appendChild(t)}this.documentOptions=new S(s),this.viewerOptions=new P(u),this.documentOptions.pageStyle.setViewerFontSizeObservable(this.viewerOptions.fontSize),this.viewerOptions.profile()&&v.profiler.enable(),this.isDebug="true"===D.getParameter("debug")[0],this.viewerSettings={userAgentRootURL:`${D.getBaseURL()}resources/`,viewportElement:document.getElementById("vivliostyle-viewer-viewport"),debug:this.isDebug};const l=D.getParameter("src"),c=D.getParameter("b"),h=D.getParameter("x");l.length||(c.length?(D.setParameter("src",c[0]),D.setParameter("bookMode","true"),D.hasParameter("renderAllPages")||D.setParameter("renderAllPages","false")):h.length&&h.forEach(((t,e)=>{D.setParameter("src",t,e)}))),D.removeParameter("b"),D.removeParameter("x"),D.removeParameter("f",!0),D.removeParameter("spread",!0),D.removeParameter("bookMode",!0),D.removeParameter("renderAllPages",!0),D.removeParameter("fontSize",!0),D.removeParameter("profile",!0),D.removeParameter("debug",!0),this.viewer=new B(this.viewerSettings,this.viewerOptions),this.viewer.inputUrl.subscribe((t=>{""!=t?(D.hasParameter("src")||D.history.pushState&&D.history.pushState(null,""),t=t.startsWith("<")?"data:,"+y.percentEncodeForDataURI(t):y.percentEncodeAmpersandAndUnencodedPercent(t),D.setParameter("src",t),this.documentOptions.srcUrls(D.getParameter("src"))):D.removeParameter("src")})),this.messageDialog=new G(R),this.settingsPanel=new H(this.viewerOptions,this.documentOptions,this.viewer,this.messageDialog,i),this.navigation=new V(this.viewerOptions,this.viewer,this.settingsPanel,r),this.viewer.loadDocument(this.documentOptions),window.onhashchange=()=>{window.location.href!=D.storedUrl&&window.location.reload()}}handleKey(t,e){const n=M.identifyKeyFromEvent(e);if("vivliostyle-input-url"===document.activeElement.id)return"Enter"!==n||13!==e.keyCode||(this.viewer.loadDocument(this.documentOptions),!1);if("Home"!==n&&"End"!==n&&(e.ctrlKey||e.metaKey)||e.altKey||e.shiftKey)return!0;let i=this.settingsPanel.handleKey(n);return i&&(i=this.navigation.handleKey(n)),i}}const X="ontouchstart"in window;e.bindingHandlers.menuButton={init(t,n){e.unwrap(n())&&(X?(t.addEventListener("touchstart",(()=>{e.utils.toggleDomNodeCssClass(t,"hover active",!0)})),t.addEventListener("touchend",(()=>{e.utils.toggleDomNodeCssClass(t,"hover active",!1)}))):(t.addEventListener("mouseover",(()=>{e.utils.toggleDomNodeCssClass(t,"hover",!0)})),t.addEventListener("mousedown",(()=>{e.utils.toggleDomNodeCssClass(t,"active",!0)})),t.addEventListener("mouseup",(()=>{e.utils.toggleDomNodeCssClass(t,"active",!1)})),t.addEventListener("mouseout",(()=>{e.utils.toggleDomNodeCssClass(t,"hover",!1),e.utils.toggleDomNodeCssClass(t,"active",!1),window.getSelection().removeAllRanges()}))))}};const j="ontouchstart"in window;let K=null,$=null,q=null;e.bindingHandlers.swipePages={init(t,n){j&&e.unwrap(n())&&(t.addEventListener("touchstart",(t=>{if(t.touches.length>1)return;if(window.visualViewport&&window.visualViewport.scale>1)return;const e=document.getElementById("vivliostyle-viewer-viewport");e&&e.scrollWidth>e.clientWidth||(K=t.touches[0].clientX,$=t.touches[0].clientY)})),t.addEventListener("touchmove",(t=>{if(!(t.touches.length>1)&&null!==K&&null!==$){const n=t.touches[0].clientX-K,i=t.touches[0].clientY-$;Math.abs(n)>Math.abs(i)&&(q=n<0?document.getElementById("vivliostyle-page-navigation-right"):document.getElementById("vivliostyle-page-navigation-left")),Math.abs(n)+Math.abs(i)>=16&&(q&&(q.click(),e.utils.toggleDomNodeCssClass(q,"active",!0)),K=null,$=null)}})),t.addEventListener("touchend",(()=>{q&&e.utils.toggleDomNodeCssClass(q,"active",!1),q=null,K=null,$=null})))}},{start(){function t(){e.applyBindings(new W)}window.__loaded?t():window.onload=t}}.start()}));
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
