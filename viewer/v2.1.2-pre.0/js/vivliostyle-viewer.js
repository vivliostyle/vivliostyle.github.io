/**
 * @vivliostyle/viewer v2.1.2-pre.0
 * Vivliostyle Viewer - HTML+CSS typesetting and rich paged viewing with EPUB/Web publications support
 *
 * @author Vivliostyle Foundation
 * @license AGPL-3.0
 * @preserve
 */
!function(t){"function"==typeof define&&define.amd?define(t):t()}((function(){"use strict";function t(t,e,n){return t(n={path:e,exports:{},require:function(t,e){return function(){throw new Error("Dynamic requires are not currently supported by @rollup/plugin-commonjs")}(null==e&&n.path)}},n.exports),n.exports}var e=t((function(t,e){
/*!
	   * Knockout JavaScript library v3.5.1
	   * (c) The Knockout.js team - http://knockoutjs.com/
	   * License: MIT (http://www.opensource.org/licenses/mit-license.php)
	   */
!function(n){var i=this||(0,eval)("this"),r=i.document,o=i.navigator,a=i.jQuery,s=i.JSON;a||"undefined"==typeof jQuery||(a=jQuery),function(n){n(t.exports||e)}((function(t,e){function l(t,e){return(null===t||typeof t in E)&&t===e}function u(t,e){var i;return function(){i||(i=w.a.setTimeout((function(){i=n,t()}),e))}}function c(t,e){var n;return function(){clearTimeout(n),n=w.a.setTimeout(t,e)}}function h(t,e){e&&"change"!==e?"beforeChange"===e?this.pc(t):this.gb(t,e):this.qc(t)}function f(t,e){null!==e&&e.s&&e.s()}function d(t,e){var n=this.qd,i=n[x];i.ra||(this.Qb&&this.mb[e]?(n.uc(e,t,this.mb[e]),this.mb[e]=null,--this.Qb):i.I[e]||n.uc(e,t,i.J?{da:t}:n.$c(t)),t.Ja&&t.gd())}var p,g,m,v,b,y,w=void 0!==t?t:{};w.b=function(t,e){for(var n=t.split("."),i=w,r=0;r<n.length-1;r++)i=i[n[r]];i[n[n.length-1]]=e},w.L=function(t,e,n){t[e]=n},w.version="3.5.1",w.b("version",w.version),w.options={deferUpdates:!1,useOnlyNativeEvents:!1,foreachHidesDestroyed:!1},w.a=function(){function t(t,e){for(var n in t)c.call(t,n)&&e(n,t[n])}function e(t,e){if(e)for(var n in e)c.call(e,n)&&(t[n]=e[n]);return t}function l(t,e){return t.__proto__=e,t}function u(t,e,n,i){var r=t[e].match(b)||[];w.a.D(n.match(b),(function(t){w.a.Na(r,t,i)})),t[e]=r.join(" ")}var c=Object.prototype.hasOwnProperty,h={__proto__:[]}instanceof Array,f="function"==typeof Symbol,d={},p={};d[o&&/Firefox\/2/i.test(o.userAgent)?"KeyboardEvent":"UIEvents"]=["keyup","keydown","keypress"],d.MouseEvents="click dblclick mousedown mouseup mousemove mouseover mouseout mouseenter mouseleave".split(" "),t(d,(function(t,e){if(e.length)for(var n=0,i=e.length;n<i;n++)p[e[n]]=t}));var g,m={propertychange:!0},v=r&&function(){for(var t=3,e=r.createElement("div"),i=e.getElementsByTagName("i");e.innerHTML="\x3c!--[if gt IE "+ ++t+"]><i></i><![endif]--\x3e",i[0];);return 4<t?t:n}(),b=/\S+/g;return{Jc:["authenticity_token",/^__RequestVerificationToken(_.*)?$/],D:function(t,e,n){for(var i=0,r=t.length;i<r;i++)e.call(n,t[i],i,t)},A:"function"==typeof Array.prototype.indexOf?function(t,e){return Array.prototype.indexOf.call(t,e)}:function(t,e){for(var n=0,i=t.length;n<i;n++)if(t[n]===e)return n;return-1},Lb:function(t,e,i){for(var r=0,o=t.length;r<o;r++)if(e.call(i,t[r],r,t))return t[r];return n},Pa:function(t,e){var n=w.a.A(t,e);0<n?t.splice(n,1):0===n&&t.shift()},wc:function(t){var e=[];return t&&w.a.D(t,(function(t){0>w.a.A(e,t)&&e.push(t)})),e},Mb:function(t,e,n){var i=[];if(t)for(var r=0,o=t.length;r<o;r++)i.push(e.call(n,t[r],r));return i},jb:function(t,e,n){var i=[];if(t)for(var r=0,o=t.length;r<o;r++)e.call(n,t[r],r)&&i.push(t[r]);return i},Nb:function(t,e){if(e instanceof Array)t.push.apply(t,e);else for(var n=0,i=e.length;n<i;n++)t.push(e[n]);return t},Na:function(t,e,n){var i=w.a.A(w.a.bc(t),e);0>i?n&&t.push(e):n||t.splice(i,1)},Ba:h,extend:e,setPrototypeOf:l,Ab:h?l:e,P:t,Ga:function(t,e,n){if(!t)return t;var i,r={};for(i in t)c.call(t,i)&&(r[i]=e.call(n,t[i],i,t));return r},Tb:function(t){for(;t.firstChild;)w.removeNode(t.firstChild)},Yb:function(t){for(var e=((t=w.a.la(t))[0]&&t[0].ownerDocument||r).createElement("div"),n=0,i=t.length;n<i;n++)e.appendChild(w.oa(t[n]));return e},Ca:function(t,e){for(var n=0,i=t.length,r=[];n<i;n++){var o=t[n].cloneNode(!0);r.push(e?w.oa(o):o)}return r},va:function(t,e){if(w.a.Tb(t),e)for(var n=0,i=e.length;n<i;n++)t.appendChild(e[n])},Xc:function(t,e){var n=t.nodeType?[t]:t;if(0<n.length){for(var i=n[0],r=i.parentNode,o=0,a=e.length;o<a;o++)r.insertBefore(e[o],i);for(o=0,a=n.length;o<a;o++)w.removeNode(n[o])}},Ua:function(t,e){if(t.length){for(e=8===e.nodeType&&e.parentNode||e;t.length&&t[0].parentNode!==e;)t.splice(0,1);for(;1<t.length&&t[t.length-1].parentNode!==e;)t.length--;if(1<t.length){var n=t[0],i=t[t.length-1];for(t.length=0;n!==i;)t.push(n),n=n.nextSibling;t.push(i)}}return t},Zc:function(t,e){7>v?t.setAttribute("selected",e):t.selected=e},Db:function(t){return null===t||t===n?"":t.trim?t.trim():t.toString().replace(/^[\s\xa0]+|[\s\xa0]+$/g,"")},Ud:function(t,e){return t=t||"",!(e.length>t.length)&&t.substring(0,e.length)===e},vd:function(t,e){if(t===e)return!0;if(11===t.nodeType)return!1;if(e.contains)return e.contains(1!==t.nodeType?t.parentNode:t);if(e.compareDocumentPosition)return 16==(16&e.compareDocumentPosition(t));for(;t&&t!=e;)t=t.parentNode;return!!t},Sb:function(t){return w.a.vd(t,t.ownerDocument.documentElement)},kd:function(t){return!!w.a.Lb(t,w.a.Sb)},R:function(t){return t&&t.tagName&&t.tagName.toLowerCase()},Ac:function(t){return w.onError?function(){try{return t.apply(this,arguments)}catch(t){throw w.onError&&w.onError(t),t}}:t},setTimeout:function(t,e){return setTimeout(w.a.Ac(t),e)},Gc:function(t){setTimeout((function(){throw w.onError&&w.onError(t),t}),0)},B:function(t,e,n){var i=w.a.Ac(n);if(n=m[e],w.options.useOnlyNativeEvents||n||!a)if(n||"function"!=typeof t.addEventListener){if(void 0===t.attachEvent)throw Error("Browser doesn't support addEventListener or attachEvent");var r=function(e){i.call(t,e)},o="on"+e;t.attachEvent(o,r),w.a.K.za(t,(function(){t.detachEvent(o,r)}))}else t.addEventListener(e,i,!1);else g||(g="function"==typeof a(t).on?"on":"bind"),a(t)[g](e,i)},Fb:function(t,e){if(!t||!t.nodeType)throw Error("element must be a DOM node when calling triggerEvent");var n;if(n=!("input"!==w.a.R(t)||!t.type||"click"!=e.toLowerCase())&&("checkbox"==(n=t.type)||"radio"==n),w.options.useOnlyNativeEvents||!a||n)if("function"==typeof r.createEvent){if("function"!=typeof t.dispatchEvent)throw Error("The supplied element doesn't support dispatchEvent");(n=r.createEvent(p[e]||"HTMLEvents")).initEvent(e,!0,!0,i,0,0,0,0,0,!1,!1,!1,!1,0,t),t.dispatchEvent(n)}else if(n&&t.click)t.click();else{if(void 0===t.fireEvent)throw Error("Browser doesn't support triggering events");t.fireEvent("on"+e)}else a(t).trigger(e)},f:function(t){return w.O(t)?t():t},bc:function(t){return w.O(t)?t.v():t},Eb:function(t,e,n){var i;e&&("object"==typeof t.classList?(i=t.classList[n?"add":"remove"],w.a.D(e.match(b),(function(e){i.call(t.classList,e)}))):"string"==typeof t.className.baseVal?u(t.className,"baseVal",e,n):u(t,"className",e,n))},Bb:function(t,e){var i=w.a.f(e);null!==i&&i!==n||(i="");var r=w.h.firstChild(t);!r||3!=r.nodeType||w.h.nextSibling(r)?w.h.va(t,[t.ownerDocument.createTextNode(i)]):r.data=i,w.a.Ad(t)},Yc:function(t,e){if(t.name=e,7>=v)try{var n=t.name.replace(/[&<>'"]/g,(function(t){return"&#"+t.charCodeAt(0)+";"}));t.mergeAttributes(r.createElement("<input name='"+n+"'/>"),!1)}catch(t){}},Ad:function(t){9<=v&&(t=1==t.nodeType?t:t.parentNode).style&&(t.style.zoom=t.style.zoom)},wd:function(t){if(v){var e=t.style.width;t.style.width=0,t.style.width=e}},Pd:function(t,e){t=w.a.f(t),e=w.a.f(e);for(var n=[],i=t;i<=e;i++)n.push(i);return n},la:function(t){for(var e=[],n=0,i=t.length;n<i;n++)e.push(t[n]);return e},Da:function(t){return f?Symbol(t):t},Zd:6===v,$d:7===v,W:v,Lc:function(t,e){for(var n=w.a.la(t.getElementsByTagName("input")).concat(w.a.la(t.getElementsByTagName("textarea"))),i="string"==typeof e?function(t){return t.name===e}:function(t){return e.test(t.name)},r=[],o=n.length-1;0<=o;o--)i(n[o])&&r.push(n[o]);return r},Nd:function(t){return"string"==typeof t&&(t=w.a.Db(t))?s&&s.parse?s.parse(t):new Function("return "+t)():null},hc:function(t,e,n){if(!s||!s.stringify)throw Error("Cannot find JSON.stringify(). Some browsers (e.g., IE < 8) don't support it natively, but you can overcome this by adding a script reference to json2.js, downloadable from http://www.json.org/json2.js");return s.stringify(w.a.f(t),e,n)},Od:function(e,n,i){var o=(i=i||{}).params||{},a=i.includeFields||this.Jc,s=e;if("object"==typeof e&&"form"===w.a.R(e)){s=e.action;for(var l=a.length-1;0<=l;l--)for(var u=w.a.Lc(e,a[l]),c=u.length-1;0<=c;c--)o[u[c].name]=u[c].value}n=w.a.f(n);var h=r.createElement("form");for(var f in h.style.display="none",h.action=s,h.method="post",n)(e=r.createElement("input")).type="hidden",e.name=f,e.value=w.a.hc(w.a.f(n[f])),h.appendChild(e);t(o,(function(t,e){var n=r.createElement("input");n.type="hidden",n.name=t,n.value=e,h.appendChild(n)})),r.body.appendChild(h),i.submitter?i.submitter(h):h.submit(),setTimeout((function(){h.parentNode.removeChild(h)}),0)}}}(),w.b("utils",w.a),w.b("utils.arrayForEach",w.a.D),w.b("utils.arrayFirst",w.a.Lb),w.b("utils.arrayFilter",w.a.jb),w.b("utils.arrayGetDistinctValues",w.a.wc),w.b("utils.arrayIndexOf",w.a.A),w.b("utils.arrayMap",w.a.Mb),w.b("utils.arrayPushAll",w.a.Nb),w.b("utils.arrayRemoveItem",w.a.Pa),w.b("utils.cloneNodes",w.a.Ca),w.b("utils.createSymbolOrString",w.a.Da),w.b("utils.extend",w.a.extend),w.b("utils.fieldsIncludedWithJsonPost",w.a.Jc),w.b("utils.getFormFields",w.a.Lc),w.b("utils.objectMap",w.a.Ga),w.b("utils.peekObservable",w.a.bc),w.b("utils.postJson",w.a.Od),w.b("utils.parseJson",w.a.Nd),w.b("utils.registerEventHandler",w.a.B),w.b("utils.stringifyJson",w.a.hc),w.b("utils.range",w.a.Pd),w.b("utils.toggleDomNodeCssClass",w.a.Eb),w.b("utils.triggerEvent",w.a.Fb),w.b("utils.unwrapObservable",w.a.f),w.b("utils.objectForEach",w.a.P),w.b("utils.addOrRemoveItem",w.a.Na),w.b("utils.setTextContent",w.a.Bb),w.b("unwrap",w.a.f),Function.prototype.bind||(Function.prototype.bind=function(t){var e=this;if(1===arguments.length)return function(){return e.apply(t,arguments)};var n=Array.prototype.slice.call(arguments,1);return function(){var i=n.slice(0);return i.push.apply(i,arguments),e.apply(t,i)}}),w.a.g=new function(){var t,e,i=0,r="__ko__"+(new Date).getTime(),o={};return w.a.W?(t=function(t,e){var a=t[r];if(!a||"null"===a||!o[a]){if(!e)return n;a=t[r]="ko"+i++,o[a]={}}return o[a]},e=function(t){var e=t[r];return!!e&&(delete o[e],t[r]=null,!0)}):(t=function(t,e){var n=t[r];return!n&&e&&(n=t[r]={}),n},e=function(t){return!!t[r]&&(delete t[r],!0)}),{get:function(e,n){var i=t(e,!1);return i&&i[n]},set:function(e,i,r){(e=t(e,r!==n))&&(e[i]=r)},Ub:function(e,n,i){return(e=t(e,!0))[n]||(e[n]=i)},clear:e,Z:function(){return i+++r}}},w.b("utils.domData",w.a.g),w.b("utils.domData.clear",w.a.g.clear),w.a.K=new function(){function t(t,e){var i=w.a.g.get(t,r);return i===n&&e&&(i=[],w.a.g.set(t,r,i)),i}function e(e){if(n=t(e,!1))for(var n=n.slice(0),r=0;r<n.length;r++)n[r](e);w.a.g.clear(e),w.a.K.cleanExternalData(e),s[e.nodeType]&&i(e.childNodes,!0)}function i(t,n){for(var i,r=[],o=0;o<t.length;o++)if((!n||8===t[o].nodeType)&&(e(r[r.length]=i=t[o]),t[o]!==i))for(;o--&&-1==w.a.A(r,t[o]););}var r=w.a.g.Z(),o={1:!0,8:!0,9:!0},s={1:!0,9:!0};return{za:function(e,n){if("function"!=typeof n)throw Error("Callback must be a function");t(e,!0).push(n)},yb:function(e,i){var o=t(e,!1);o&&(w.a.Pa(o,i),0==o.length&&w.a.g.set(e,r,n))},oa:function(t){return w.u.G((function(){o[t.nodeType]&&(e(t),s[t.nodeType]&&i(t.getElementsByTagName("*")))})),t},removeNode:function(t){w.oa(t),t.parentNode&&t.parentNode.removeChild(t)},cleanExternalData:function(t){a&&"function"==typeof a.cleanData&&a.cleanData([t])}}},w.oa=w.a.K.oa,w.removeNode=w.a.K.removeNode,w.b("cleanNode",w.oa),w.b("removeNode",w.removeNode),w.b("utils.domNodeDisposal",w.a.K),w.b("utils.domNodeDisposal.addDisposeCallback",w.a.K.za),w.b("utils.domNodeDisposal.removeDisposeCallback",w.a.K.yb),p=[0,"",""],b={thead:g=[1,"<table>","</table>"],tbody:g,tfoot:g,tr:[2,"<table><tbody>","</tbody></table>"],td:m=[3,"<table><tbody><tr>","</tr></tbody></table>"],th:m,option:v=[1,"<select multiple='multiple'>","</select>"],optgroup:v},y=8>=w.a.W,w.a.ua=function(t,e){var n;if(a){if(a.parseHTML)n=a.parseHTML(t,e)||[];else if((n=a.clean([t],e))&&n[0]){for(var o=n[0];o.parentNode&&11!==o.parentNode.nodeType;)o=o.parentNode;o.parentNode&&o.parentNode.removeChild(o)}}else{(n=e)||(n=r),o=n.parentWindow||n.defaultView||i;var s,l=w.a.Db(t).toLowerCase(),u=n.createElement("div");for(s=(l=l.match(/^(?:\x3c!--.*?--\x3e\s*?)*?<([a-z]+)[\s>]/))&&b[l[1]]||p,l=s[0],s="ignored<div>"+s[1]+t+s[2]+"</div>","function"==typeof o.innerShiv?u.appendChild(o.innerShiv(s)):(y&&n.body.appendChild(u),u.innerHTML=s,y&&u.parentNode.removeChild(u));l--;)u=u.lastChild;n=w.a.la(u.lastChild.childNodes)}return n},w.a.Md=function(t,e){var n=w.a.ua(t,e);return n.length&&n[0].parentElement||w.a.Yb(n)},w.a.fc=function(t,e){if(w.a.Tb(t),null!==(e=w.a.f(e))&&e!==n)if("string"!=typeof e&&(e=e.toString()),a)a(t).html(e);else for(var i=w.a.ua(e,t.ownerDocument),r=0;r<i.length;r++)t.appendChild(i[r])},w.b("utils.parseHtmlFragment",w.a.ua),w.b("utils.setHtml",w.a.fc),w.aa=function(){var t={};return{Xb:function(e){if("function"!=typeof e)throw Error("You can only pass a function to ko.memoization.memoize()");var n=(4294967296*(1+Math.random())|0).toString(16).substring(1)+(4294967296*(1+Math.random())|0).toString(16).substring(1);return t[n]=e,"\x3c!--[ko_memo:"+n+"]--\x3e"},bd:function(e,i){var r=t[e];if(r===n)throw Error("Couldn't find any memo with ID "+e+". Perhaps it's already been unmemoized.");try{return r.apply(null,i||[]),!0}finally{delete t[e]}},cd:function(t,e){var n=[];!function t(e,n){if(e)if(8==e.nodeType)null!=(i=w.aa.Uc(e.nodeValue))&&n.push({ud:e,Kd:i});else if(1==e.nodeType)for(var i=0,r=e.childNodes,o=r.length;i<o;i++)t(r[i],n)}(t,n);for(var i=0,r=n.length;i<r;i++){var o=n[i].ud,a=[o];e&&w.a.Nb(a,e),w.aa.bd(n[i].Kd,a),o.nodeValue="",o.parentNode&&o.parentNode.removeChild(o)}},Uc:function(t){return(t=t.match(/^\[ko_memo\:(.*?)\]$/))?t[1]:null}}}(),w.b("memoization",w.aa),w.b("memoization.memoize",w.aa.Xb),w.b("memoization.unmemoize",w.aa.bd),w.b("memoization.parseMemoText",w.aa.Uc),w.b("memoization.unmemoizeDomNodeAndDescendants",w.aa.cd),w.na=function(){function t(){if(o)for(var t,e=o,i=0;s<o;)if(t=n[s++]){if(s>e){if(5e3<=++i){s=o,w.a.Gc(Error("'Too much recursion' after processing "+i+" task groups."));break}e=o}try{t()}catch(t){w.a.Gc(t)}}}function e(){t(),s=o=n.length=0}var n=[],o=0,a=1,s=0;return{scheduler:i.MutationObserver?function(t){var e=r.createElement("div");return new MutationObserver(t).observe(e,{attributes:!0}),function(){e.classList.toggle("foo")}}(e):r&&"onreadystatechange"in r.createElement("script")?function(t){var e=r.createElement("script");e.onreadystatechange=function(){e.onreadystatechange=null,r.documentElement.removeChild(e),e=null,t()},r.documentElement.appendChild(e)}:function(t){setTimeout(t,0)},zb:function(t){return o||w.na.scheduler(e),n[o++]=t,a++},cancel:function(t){(t-=a-o)>=s&&t<o&&(n[t]=null)},resetForTesting:function(){var t=o-s;return s=o=n.length=0,t},Sd:t}}(),w.b("tasks",w.na),w.b("tasks.schedule",w.na.zb),w.b("tasks.runEarly",w.na.Sd),w.Ta={throttle:function(t,e){t.throttleEvaluation=e;var n=null;return w.$({read:t,write:function(i){clearTimeout(n),n=w.a.setTimeout((function(){t(i)}),e)}})},rateLimit:function(t,e){var n,i,r;"number"==typeof e?n=e:(n=e.timeout,i=e.method),t.Hb=!1,r="function"==typeof i?i:"notifyWhenChangesStop"==i?c:u,t.ub((function(t){return r(t,n,e)}))},deferred:function(t,e){if(!0!==e)throw Error("The 'deferred' extender only accepts the value 'true', because it is not supported to turn deferral off once enabled.");t.Hb||(t.Hb=!0,t.ub((function(e){var i,r=!1;return function(){if(!r){w.na.cancel(i),i=w.na.zb(e);try{r=!0,t.notifySubscribers(n,"dirty")}finally{r=!1}}}})))},notify:function(t,e){t.equalityComparer="always"==e?null:l}};var E={undefined:1,boolean:1,number:1,string:1};w.b("extenders",w.Ta),w.ic=function(t,e,n){this.da=t,this.lc=e,this.mc=n,this.Ib=!1,this.fb=this.Jb=null,w.L(this,"dispose",this.s),w.L(this,"disposeWhenNodeIsRemoved",this.l)},w.ic.prototype.s=function(){this.Ib||(this.fb&&w.a.K.yb(this.Jb,this.fb),this.Ib=!0,this.mc(),this.da=this.lc=this.mc=this.Jb=this.fb=null)},w.ic.prototype.l=function(t){this.Jb=t,w.a.K.za(t,this.fb=this.s.bind(this))},w.T=function(){w.a.Ab(this,S),S.qb(this)};var S={qb:function(t){t.U={change:[]},t.sc=1},subscribe:function(t,e,n){var i=this;n=n||"change";var r=new w.ic(i,e?t.bind(e):t,(function(){w.a.Pa(i.U[n],r),i.hb&&i.hb(n)}));return i.Qa&&i.Qa(n),i.U[n]||(i.U[n]=[]),i.U[n].push(r),r},notifySubscribers:function(t,e){if("change"===(e=e||"change")&&this.Gb(),this.Wa(e)){var n="change"===e&&this.ed||this.U[e].slice(0);try{w.u.xc();for(var i,r=0;i=n[r];++r)i.Ib||i.lc(t)}finally{w.u.end()}}},ob:function(){return this.sc},Dd:function(t){return this.ob()!==t},Gb:function(){++this.sc},ub:function(t){var e,n,i,r,o,a=this,s=w.O(a);a.gb||(a.gb=a.notifySubscribers,a.notifySubscribers=h);var l=t((function(){a.Ja=!1,s&&r===a&&(r=a.nc?a.nc():a());var t=n||o&&a.sb(i,r);o=n=e=!1,t&&a.gb(i=r)}));a.qc=function(t,n){n&&a.Ja||(o=!n),a.ed=a.U.change.slice(0),a.Ja=e=!0,r=t,l()},a.pc=function(t){e||(i=t,a.gb(t,"beforeChange"))},a.rc=function(){o=!0},a.gd=function(){a.sb(i,a.v(!0))&&(n=!0)}},Wa:function(t){return this.U[t]&&this.U[t].length},Bd:function(t){if(t)return this.U[t]&&this.U[t].length||0;var e=0;return w.a.P(this.U,(function(t,n){"dirty"!==t&&(e+=n.length)})),e},sb:function(t,e){return!this.equalityComparer||!this.equalityComparer(t,e)},toString:function(){return"[object Object]"},extend:function(t){var e=this;return t&&w.a.P(t,(function(t,n){var i=w.Ta[t];"function"==typeof i&&(e=i(e,n)||e)})),e}};w.L(S,"init",S.qb),w.L(S,"subscribe",S.subscribe),w.L(S,"extend",S.extend),w.L(S,"getSubscriptionsCount",S.Bd),w.a.Ba&&w.a.setPrototypeOf(S,Function.prototype),w.T.fn=S,w.Qc=function(t){return null!=t&&"function"==typeof t.subscribe&&"function"==typeof t.notifySubscribers},w.b("subscribable",w.T),w.b("isSubscribable",w.Qc),w.S=w.u=function(){function t(t){i.push(n),n=t}function e(){n=i.pop()}var n,i=[],r=0;return{xc:t,end:e,cc:function(t){if(n){if(!w.Qc(t))throw Error("Only subscribable things can act as dependencies");n.od.call(n.pd,t,t.fd||(t.fd=++r))}},G:function(n,i,r){try{return t(),n.apply(i,r||[])}finally{e()}},qa:function(){if(n)return n.o.qa()},Va:function(){if(n)return n.o.Va()},Ya:function(){if(n)return n.Ya},o:function(){if(n)return n.o}}}(),w.b("computedContext",w.S),w.b("computedContext.getDependenciesCount",w.S.qa),w.b("computedContext.getDependencies",w.S.Va),w.b("computedContext.isInitial",w.S.Ya),w.b("computedContext.registerDependency",w.S.cc),w.b("ignoreDependencies",w.Yd=w.u.G);var N=w.a.Da("_latestValue");w.ta=function(t){function e(){return 0<arguments.length?(e.sb(e[N],arguments[0])&&(e.ya(),e[N]=arguments[0],e.xa()),this):(w.u.cc(e),e[N])}return e[N]=t,w.a.Ba||w.a.extend(e,w.T.fn),w.T.fn.qb(e),w.a.Ab(e,C),w.options.deferUpdates&&w.Ta.deferred(e,!0),e};var C={equalityComparer:l,v:function(){return this[N]},xa:function(){this.notifySubscribers(this[N],"spectate"),this.notifySubscribers(this[N])},ya:function(){this.notifySubscribers(this[N],"beforeChange")}};w.a.Ba&&w.a.setPrototypeOf(C,w.T.fn);var T=w.ta.Ma="__ko_proto__";C[T]=w.ta,w.O=function(t){if((t="function"==typeof t&&t[T])&&t!==C[T]&&t!==w.o.fn[T])throw Error("Invalid object that looks like an observable; possibly from another Knockout instance");return!!t},w.Za=function(t){return"function"==typeof t&&(t[T]===C[T]||t[T]===w.o.fn[T]&&t.Nc)},w.b("observable",w.ta),w.b("isObservable",w.O),w.b("isWriteableObservable",w.Za),w.b("isWritableObservable",w.Za),w.b("observable.fn",C),w.L(C,"peek",C.v),w.L(C,"valueHasMutated",C.xa),w.L(C,"valueWillMutate",C.ya),w.Ha=function(t){if("object"!=typeof(t=t||[])||!("length"in t))throw Error("The argument passed when initializing an observable array must be an array, or null, or undefined.");return t=w.ta(t),w.a.Ab(t,w.Ha.fn),t.extend({trackArrayChanges:!0})},w.Ha.fn={remove:function(t){for(var e=this.v(),n=[],i="function"!=typeof t||w.O(t)?function(e){return e===t}:t,r=0;r<e.length;r++){var o=e[r];if(i(o)){if(0===n.length&&this.ya(),e[r]!==o)throw Error("Array modified during remove; cannot remove item");n.push(o),e.splice(r,1),r--}}return n.length&&this.xa(),n},removeAll:function(t){if(t===n){var e=this.v(),i=e.slice(0);return this.ya(),e.splice(0,e.length),this.xa(),i}return t?this.remove((function(e){return 0<=w.a.A(t,e)})):[]},destroy:function(t){var e=this.v(),n="function"!=typeof t||w.O(t)?function(e){return e===t}:t;this.ya();for(var i=e.length-1;0<=i;i--){var r=e[i];n(r)&&(r._destroy=!0)}this.xa()},destroyAll:function(t){return t===n?this.destroy((function(){return!0})):t?this.destroy((function(e){return 0<=w.a.A(t,e)})):[]},indexOf:function(t){var e=this();return w.a.A(e,t)},replace:function(t,e){var n=this.indexOf(t);0<=n&&(this.ya(),this.v()[n]=e,this.xa())},sorted:function(t){var e=this().slice(0);return t?e.sort(t):e.sort()},reversed:function(){return this().slice(0).reverse()}},w.a.Ba&&w.a.setPrototypeOf(w.Ha.fn,w.ta.fn),w.a.D("pop push reverse shift sort splice unshift".split(" "),(function(t){w.Ha.fn[t]=function(){var e=this.v();this.ya(),this.zc(e,t,arguments);var n=e[t].apply(e,arguments);return this.xa(),n===e?this:n}})),w.a.D(["slice"],(function(t){w.Ha.fn[t]=function(){var e=this();return e[t].apply(e,arguments)}})),w.Pc=function(t){return w.O(t)&&"function"==typeof t.remove&&"function"==typeof t.push},w.b("observableArray",w.Ha),w.b("isObservableArray",w.Pc),w.Ta.trackArrayChanges=function(t,e){function i(){function e(){if(u){var e,n=[].concat(t.v()||[]);t.Wa("arrayChange")&&((!l||1<u)&&(l=w.a.Pb(a,n,t.Ob)),e=l),a=n,l=null,u=0,e&&e.length&&t.notifySubscribers(e,"arrayChange")}}s?e():(s=!0,o=t.subscribe((function(){++u}),null,"spectate"),a=[].concat(t.v()||[]),l=null,r=t.subscribe(e))}if(t.Ob={},e&&"object"==typeof e&&w.a.extend(t.Ob,e),t.Ob.sparse=!0,!t.zc){var r,o,a,s=!1,l=null,u=0,c=t.Qa,h=t.hb;t.Qa=function(e){c&&c.call(t,e),"arrayChange"===e&&i()},t.hb=function(e){h&&h.call(t,e),"arrayChange"!==e||t.Wa("arrayChange")||(r&&r.s(),o&&o.s(),o=r=null,s=!1,a=n)},t.zc=function(t,e,n){function i(t,e,n){return r[r.length]={status:t,value:e,index:n}}if(s&&!u){var r=[],o=t.length,a=n.length,c=0;switch(e){case"push":c=o;case"unshift":for(e=0;e<a;e++)i("added",n[e],c+e);break;case"pop":c=o-1;case"shift":o&&i("deleted",t[c],c);break;case"splice":e=Math.min(Math.max(0,0>n[0]?o+n[0]:n[0]),o),o=1===a?o:Math.min(e+(n[1]||0),o),a=e+a-2,c=Math.max(o,a);for(var h=[],f=[],d=2;e<c;++e,++d)e<o&&f.push(i("deleted",t[e],e)),e<a&&h.push(i("added",n[d],e));w.a.Kc(f,h);break;default:return}l=r}}}};var x=w.a.Da("_state");w.o=w.$=function(t,e,i){function r(){if(0<arguments.length){if("function"!=typeof o)throw Error("Cannot write a value to a ko.computed unless you specify a 'write' option. If you wish to read the current value, don't pass any parameters.");return o.apply(a.nb,arguments),this}return a.ra||w.u.cc(r),(a.ka||a.J&&r.Xa())&&r.ha(),a.X}if("object"==typeof t?i=t:(i=i||{},t&&(i.read=t)),"function"!=typeof i.read)throw Error("Pass a function that returns the value of the ko.computed");var o=i.write,a={X:n,sa:!0,ka:!0,rb:!1,jc:!1,ra:!1,wb:!1,J:!1,Wc:i.read,nb:e||i.owner,l:i.disposeWhenNodeIsRemoved||i.l||null,Sa:i.disposeWhen||i.Sa,Rb:null,I:{},V:0,Ic:null};return r[x]=a,r.Nc="function"==typeof o,w.a.Ba||w.a.extend(r,w.T.fn),w.T.fn.qb(r),w.a.Ab(r,I),i.pure?(a.wb=!0,a.J=!0,w.a.extend(r,P)):i.deferEvaluation&&w.a.extend(r,A),w.options.deferUpdates&&w.Ta.deferred(r,!0),a.l&&(a.jc=!0,a.l.nodeType||(a.l=null)),a.J||i.deferEvaluation||r.ha(),a.l&&r.ja()&&w.a.K.za(a.l,a.Rb=function(){r.s()}),r};var I={equalityComparer:l,qa:function(){return this[x].V},Va:function(){var t=[];return w.a.P(this[x].I,(function(e,n){t[n.Ka]=n.da})),t},Vb:function(t){if(!this[x].V)return!1;var e=this.Va();return-1!==w.a.A(e,t)||!!w.a.Lb(e,(function(e){return e.Vb&&e.Vb(t)}))},uc:function(t,e,n){if(this[x].wb&&e===this)throw Error("A 'pure' computed must not be called recursively");this[x].I[t]=n,n.Ka=this[x].V++,n.La=e.ob()},Xa:function(){var t,e,n=this[x].I;for(t in n)if(Object.prototype.hasOwnProperty.call(n,t)&&(e=n[t],this.Ia&&e.da.Ja||e.da.Dd(e.La)))return!0},Jd:function(){this.Ia&&!this[x].rb&&this.Ia(!1)},ja:function(){var t=this[x];return t.ka||0<t.V},Rd:function(){this.Ja?this[x].ka&&(this[x].sa=!0):this.Hc()},$c:function(t){if(t.Hb){var e=t.subscribe(this.Jd,this,"dirty"),n=t.subscribe(this.Rd,this);return{da:t,s:function(){e.s(),n.s()}}}return t.subscribe(this.Hc,this)},Hc:function(){var t=this,e=t.throttleEvaluation;e&&0<=e?(clearTimeout(this[x].Ic),this[x].Ic=w.a.setTimeout((function(){t.ha(!0)}),e)):t.Ia?t.Ia(!0):t.ha(!0)},ha:function(t){var e=this[x],n=e.Sa,i=!1;if(!e.rb&&!e.ra){if(e.l&&!w.a.Sb(e.l)||n&&n()){if(!e.jc)return void this.s()}else e.jc=!1;e.rb=!0;try{i=this.zd(t)}finally{e.rb=!1}return i}},zd:function(t){var e=this[x],i=!1,r=e.wb?n:!e.V;i={qd:this,mb:e.I,Qb:e.V},w.u.xc({pd:i,od:d,o:this,Ya:r}),e.I={},e.V=0;var o=this.yd(e,i);return e.V?i=this.sb(e.X,o):(this.s(),i=!0),i&&(e.J?this.Gb():this.notifySubscribers(e.X,"beforeChange"),e.X=o,this.notifySubscribers(e.X,"spectate"),!e.J&&t&&this.notifySubscribers(e.X),this.rc&&this.rc()),r&&this.notifySubscribers(e.X,"awake"),i},yd:function(t,e){try{var n=t.Wc;return t.nb?n.call(t.nb):n()}finally{w.u.end(),e.Qb&&!t.J&&w.a.P(e.mb,f),t.sa=t.ka=!1}},v:function(t){var e=this[x];return(e.ka&&(t||!e.V)||e.J&&this.Xa())&&this.ha(),e.X},ub:function(t){w.T.fn.ub.call(this,t),this.nc=function(){return this[x].J||(this[x].sa?this.ha():this[x].ka=!1),this[x].X},this.Ia=function(t){this.pc(this[x].X),this[x].ka=!0,t&&(this[x].sa=!0),this.qc(this,!t)}},s:function(){var t=this[x];!t.J&&t.I&&w.a.P(t.I,(function(t,e){e.s&&e.s()})),t.l&&t.Rb&&w.a.K.yb(t.l,t.Rb),t.I=n,t.V=0,t.ra=!0,t.sa=!1,t.ka=!1,t.J=!1,t.l=n,t.Sa=n,t.Wc=n,this.Nc||(t.nb=n)}},P={Qa:function(t){var e=this,n=e[x];if(!n.ra&&n.J&&"change"==t){if(n.J=!1,n.sa||e.Xa())n.I=null,n.V=0,e.ha()&&e.Gb();else{var i=[];w.a.P(n.I,(function(t,e){i[e.Ka]=t})),w.a.D(i,(function(t,i){var r=n.I[t],o=e.$c(r.da);o.Ka=i,o.La=r.La,n.I[t]=o})),e.Xa()&&e.ha()&&e.Gb()}n.ra||e.notifySubscribers(n.X,"awake")}},hb:function(t){var e=this[x];e.ra||"change"!=t||this.Wa("change")||(w.a.P(e.I,(function(t,n){n.s&&(e.I[t]={da:n.da,Ka:n.Ka,La:n.La},n.s())})),e.J=!0,this.notifySubscribers(n,"asleep"))},ob:function(){var t=this[x];return t.J&&(t.sa||this.Xa())&&this.ha(),w.T.fn.ob.call(this)}},A={Qa:function(t){"change"!=t&&"beforeChange"!=t||this.v()}};w.a.Ba&&w.a.setPrototypeOf(I,w.T.fn);var O=w.ta.Ma;I[O]=w.o,w.Oc=function(t){return"function"==typeof t&&t[O]===I[O]},w.Fd=function(t){return w.Oc(t)&&t[x]&&t[x].wb},w.b("computed",w.o),w.b("dependentObservable",w.o),w.b("isComputed",w.Oc),w.b("isPureComputed",w.Fd),w.b("computed.fn",I),w.L(I,"peek",I.v),w.L(I,"dispose",I.s),w.L(I,"isActive",I.ja),w.L(I,"getDependenciesCount",I.qa),w.L(I,"getDependencies",I.Va),w.xb=function(t,e){return"function"==typeof t?w.o(t,e,{pure:!0}):((t=w.a.extend({},t)).pure=!0,w.o(t,e))},w.b("pureComputed",w.xb),function(){function t(i,r,o){if(o=o||new e,"object"!=typeof(i=r(i))||null===i||i===n||i instanceof RegExp||i instanceof Date||i instanceof String||i instanceof Number||i instanceof Boolean)return i;var a=i instanceof Array?[]:{};return o.save(i,a),function(t,e){if(t instanceof Array){for(var n=0;n<t.length;n++)e(n);"function"==typeof t.toJSON&&e("toJSON")}else for(n in t)e(n)}(i,(function(e){var s=r(i[e]);switch(typeof s){case"boolean":case"number":case"string":case"function":a[e]=s;break;case"object":case"undefined":var l=o.get(s);a[e]=l!==n?l:t(s,r,o)}})),a}function e(){this.keys=[],this.values=[]}w.ad=function(e){if(0==arguments.length)throw Error("When calling ko.toJS, pass the object you want to convert.");return t(e,(function(t){for(var e=0;w.O(t)&&10>e;e++)t=t();return t}))},w.toJSON=function(t,e,n){return t=w.ad(t),w.a.hc(t,e,n)},e.prototype={constructor:e,save:function(t,e){var n=w.a.A(this.keys,t);0<=n?this.values[n]=e:(this.keys.push(t),this.values.push(e))},get:function(t){return 0<=(t=w.a.A(this.keys,t))?this.values[t]:n}}}(),w.b("toJS",w.ad),w.b("toJSON",w.toJSON),w.Wd=function(t,e,n){function i(e){var i=w.xb(t,n).extend({ma:"always"}),r=i.subscribe((function(t){t&&(r.s(),e(t))}));return i.notifySubscribers(i.v()),r}return"function"!=typeof Promise||e?i(e.bind(n)):new Promise(i)},w.b("when",w.Wd),w.w={M:function(t){switch(w.a.R(t)){case"option":return!0===t.__ko__hasDomDataOptionValue__?w.a.g.get(t,w.c.options.$b):7>=w.a.W?t.getAttributeNode("value")&&t.getAttributeNode("value").specified?t.value:t.text:t.value;case"select":return 0<=t.selectedIndex?w.w.M(t.options[t.selectedIndex]):n;default:return t.value}},cb:function(t,e,i){switch(w.a.R(t)){case"option":"string"==typeof e?(w.a.g.set(t,w.c.options.$b,n),"__ko__hasDomDataOptionValue__"in t&&delete t.__ko__hasDomDataOptionValue__,t.value=e):(w.a.g.set(t,w.c.options.$b,e),t.__ko__hasDomDataOptionValue__=!0,t.value="number"==typeof e?e:"");break;case"select":""!==e&&null!==e||(e=n);for(var r,o=-1,a=0,s=t.options.length;a<s;++a)if((r=w.w.M(t.options[a]))==e||""===r&&e===n){o=a;break}(i||0<=o||e===n&&1<t.size)&&(t.selectedIndex=o,6===w.a.W&&w.a.setTimeout((function(){t.selectedIndex=o}),0));break;default:null!==e&&e!==n||(e=""),t.value=e}}},w.b("selectExtensions",w.w),w.b("selectExtensions.readValue",w.w.M),w.b("selectExtensions.writeValue",w.w.cb),w.m=function(){function t(t){123===(t=w.a.Db(t)).charCodeAt(0)&&(t=t.slice(1,-1));var e,n=[],a=(t+="\n,").match(i),s=[],l=0;if(1<a.length){for(var u,c=0;u=a[c];++c){var h=u.charCodeAt(0);if(44===h){if(0>=l){n.push(e&&s.length?{key:e,value:s.join("")}:{unknown:e||s.join("")}),e=l=0,s=[];continue}}else if(58===h){if(!l&&!e&&1===s.length){e=s.pop();continue}}else{if(47===h&&1<u.length&&(47===u.charCodeAt(1)||42===u.charCodeAt(1)))continue;47===h&&c&&1<u.length?(h=a[c-1].match(r))&&!o[h[0]]&&(a=(t=t.substr(t.indexOf(u)+1)).match(i),c=-1,u="/"):40===h||123===h||91===h?++l:41===h||125===h||93===h?--l:e||s.length||34!==h&&39!==h||(u=u.slice(1,-1))}s.push(u)}if(0<l)throw Error("Unbalanced parentheses, braces, or brackets")}return n}var e=["true","false","null","undefined"],n=/^(?:[$_a-z][$\w]*|(.+)(\.\s*[$_a-z][$\w]*|\[.+\]))$/i,i=RegExp("\"(?:\\\\.|[^\"])*\"|'(?:\\\\.|[^'])*'|`(?:\\\\.|[^`])*`|/\\*(?:[^*]|\\*+[^*/])*\\*+/|//.*\n|/(?:\\\\.|[^/])+/w*|[^\\s:,/][^,\"'`{}()/:[\\]]*[^\\s,\"'`{}()/:[\\]]|[^\\s]","g"),r=/[\])"'A-Za-z0-9_$]+$/,o={in:1,return:1,typeof:1},a={};return{Ra:[],wa:a,ac:t,vb:function(i,r){function o(t,i){var r;if(!c){var h=w.getBindingHandler(t);if(h&&h.preprocess&&!(i=h.preprocess(i,t,o)))return;(h=a[t])&&(r=i,0<=w.a.A(e,r)?r=!1:(h=r.match(n),r=null!==h&&(h[1]?"Object("+h[1]+")"+h[2]:r)),h=r),h&&l.push("'"+("string"==typeof a[t]?a[t]:t)+"':function(_z){"+r+"=_z}")}u&&(i="function(){return "+i+" }"),s.push("'"+t+"':"+i)}var s=[],l=[],u=(r=r||{}).valueAccessors,c=r.bindingParams,h="string"==typeof i?t(i):i;return w.a.D(h,(function(t){o(t.key||t.unknown,t.value)})),l.length&&o("_ko_property_writers","{"+l.join(",")+" }"),s.join(",")},Id:function(t,e){for(var n=0;n<t.length;n++)if(t[n].key==e)return!0;return!1},eb:function(t,e,n,i,r){t&&w.O(t)?!w.Za(t)||r&&t.v()===i||t(i):(t=e.get("_ko_property_writers"))&&t[n]&&t[n](i)}}}(),w.b("expressionRewriting",w.m),w.b("expressionRewriting.bindingRewriteValidators",w.m.Ra),w.b("expressionRewriting.parseObjectLiteral",w.m.ac),w.b("expressionRewriting.preProcessBindings",w.m.vb),w.b("expressionRewriting._twoWayBindings",w.m.wa),w.b("jsonExpressionRewriting",w.m),w.b("jsonExpressionRewriting.insertPropertyAccessorsIntoJson",w.m.vb),function(){function t(t){return 8==t.nodeType&&a.test(o?t.text:t.nodeValue)}function e(t){return 8==t.nodeType&&s.test(o?t.text:t.nodeValue)}function n(n,i){for(var r=n,o=1,a=[];r=r.nextSibling;){if(e(r)&&(w.a.g.set(r,u,!0),0==--o))return a;a.push(r),t(r)&&o++}if(!i)throw Error("Cannot find closing comment tag to match: "+n.nodeValue);return null}function i(t,e){var i=n(t,e);return i?0<i.length?i[i.length-1].nextSibling:t.nextSibling:null}var o=r&&"\x3c!--test--\x3e"===r.createComment("test").text,a=o?/^\x3c!--\s*ko(?:\s+([\s\S]+))?\s*--\x3e$/:/^\s*ko(?:\s+([\s\S]+))?\s*$/,s=o?/^\x3c!--\s*\/ko\s*--\x3e$/:/^\s*\/ko\s*$/,l={ul:!0,ol:!0},u="__ko_matchedEndComment__";w.h={ea:{},childNodes:function(e){return t(e)?n(e):e.childNodes},Ea:function(e){if(t(e))for(var n=0,i=(e=w.h.childNodes(e)).length;n<i;n++)w.removeNode(e[n]);else w.a.Tb(e)},va:function(e,n){if(t(e)){w.h.Ea(e);for(var i=e.nextSibling,r=0,o=n.length;r<o;r++)i.parentNode.insertBefore(n[r],i)}else w.a.va(e,n)},Vc:function(e,n){var i;t(e)?(i=e.nextSibling,e=e.parentNode):i=e.firstChild,i?n!==i&&e.insertBefore(n,i):e.appendChild(n)},Wb:function(e,n,i){i?(i=i.nextSibling,t(e)&&(e=e.parentNode),i?n!==i&&e.insertBefore(n,i):e.appendChild(n)):w.h.Vc(e,n)},firstChild:function(n){if(t(n))return!n.nextSibling||e(n.nextSibling)?null:n.nextSibling;if(n.firstChild&&e(n.firstChild))throw Error("Found invalid end comment, as the first child of "+n);return n.firstChild},nextSibling:function(n){if(t(n)&&(n=i(n)),n.nextSibling&&e(n.nextSibling)){var r=n.nextSibling;if(e(r)&&!w.a.g.get(r,u))throw Error("Found end comment without a matching opening comment, as child of "+n);return null}return n.nextSibling},Cd:t,Vd:function(t){return(t=(o?t.text:t.nodeValue).match(a))?t[1]:null},Sc:function(n){if(l[w.a.R(n)]){var r=n.firstChild;if(r)do{if(1===r.nodeType){var o,a=null;if(o=r.firstChild)do{if(a)a.push(o);else if(t(o)){var s=i(o,!0);s?o=s:a=[o]}else e(o)&&(a=[o])}while(o=o.nextSibling);if(o=a)for(a=r.nextSibling,s=0;s<o.length;s++)a?n.insertBefore(o[s],a):n.appendChild(o[s])}}while(r=r.nextSibling)}}}}(),w.b("virtualElements",w.h),w.b("virtualElements.allowedBindings",w.h.ea),w.b("virtualElements.emptyNode",w.h.Ea),w.b("virtualElements.insertAfter",w.h.Wb),w.b("virtualElements.prepend",w.h.Vc),w.b("virtualElements.setDomNodeChildren",w.h.va),w.ga=function(){this.nd={}},w.a.extend(w.ga.prototype,{nodeHasBindings:function(t){switch(t.nodeType){case 1:return null!=t.getAttribute("data-bind")||w.j.getComponentNameForNode(t);case 8:return w.h.Cd(t);default:return!1}},getBindings:function(t,e){var n=(n=this.getBindingsString(t,e))?this.parseBindingsString(n,e,t):null;return w.j.tc(n,t,e,!1)},getBindingAccessors:function(t,e){var n=(n=this.getBindingsString(t,e))?this.parseBindingsString(n,e,t,{valueAccessors:!0}):null;return w.j.tc(n,t,e,!0)},getBindingsString:function(t){switch(t.nodeType){case 1:return t.getAttribute("data-bind");case 8:return w.h.Vd(t);default:return null}},parseBindingsString:function(t,e,n,i){try{var r,o=this.nd,a=t+(i&&i.valueAccessors||"");if(!(r=o[a])){var s,l="with($context){with($data||{}){return{"+w.m.vb(t,i)+"}}}";s=new Function("$context","$element",l),r=o[a]=s}return r(e,n)}catch(e){throw e.message="Unable to parse bindings.\nBindings value: "+t+"\nMessage: "+e.message,e}}}),w.ga.instance=new w.ga,w.b("bindingProvider",w.ga),function(){function t(t){var e=(t=w.a.g.get(t,E))&&t.N;e&&(t.N=null,e.Tc())}function e(e,n,i){this.node=e,this.yc=n,this.kb=[],this.H=!1,n.N||w.a.K.za(e,t),i&&i.N&&(i.N.kb.push(e),this.Kb=i)}function o(t){return function(){return t}}function s(t){return t()}function l(t){return w.a.Ga(w.u.G(t),(function(e,n){return function(){return t()[n]}}))}function u(t,e,n){return"function"==typeof t?l(t.bind(null,e,n)):w.a.Ga(t,o)}function c(t,e){return l(this.getBindings.bind(this,t,e))}function h(t,e){var n=w.h.firstChild(e);if(n){var i,r=w.ga.instance,o=r.preprocessNode;if(o){for(;i=n;)n=w.h.nextSibling(i),o.call(r,i);n=w.h.firstChild(e)}for(;i=n;)n=w.h.nextSibling(i),f(t,i)}w.i.ma(e,w.i.H)}function f(t,e){var n=t,i=1===e.nodeType;i&&w.h.Sc(e),(i||w.ga.instance.nodeHasBindings(e))&&(n=d(e,null,t).bindingContextForDescendants),n&&!b[w.a.R(e)]&&h(n,e)}function d(t,e,i){var r,o=w.a.g.Ub(t,E,{}),a=o.hd;if(!e){if(a)throw Error("You cannot apply bindings multiple times to the same element.");o.hd=!0}if(a||(o.context=i),o.Zb||(o.Zb={}),e&&"function"!=typeof e)r=e;else{var l=w.ga.instance,u=l.getBindingAccessors||c,h=w.$((function(){return(r=e?e(i,t):u.call(l,t,i))&&(i[g]&&i[g](),i[v]&&i[v]()),r}),null,{l:t});r&&h.ja()||(h=null)}var f,d=i;if(r){var p=function(){return w.a.Ga(h?h():r,s)},m=h?function(t){return function(){return s(h()[t])}}:function(t){return r[t]};p.get=function(t){return r[t]&&s(m(t))},p.has=function(t){return t in r},w.i.H in r&&w.i.subscribe(t,w.i.H,(function(){var e=(0,r[w.i.H])();if(e){var n=w.h.childNodes(t);n.length&&e(n,w.Ec(n[0]))}})),w.i.pa in r&&(d=w.i.Cb(t,i),w.i.subscribe(t,w.i.pa,(function(){var e=(0,r[w.i.pa])();e&&w.h.firstChild(t)&&e(t)}))),o=function(t){var e=[],n={},i=[];return w.a.P(t,(function r(o){if(!n[o]){var a=w.getBindingHandler(o);a&&(a.after&&(i.push(o),w.a.D(a.after,(function(e){if(t[e]){if(-1!==w.a.A(i,e))throw Error("Cannot combine the following bindings, because they have a cyclic dependency: "+i.join(", "));r(e)}})),i.length--),e.push({key:o,Mc:a})),n[o]=!0}})),e}(r),w.a.D(o,(function(e){var i=e.Mc.init,o=e.Mc.update,a=e.key;if(8===t.nodeType&&!w.h.ea[a])throw Error("The binding '"+a+"' cannot be used with virtual elements");try{"function"==typeof i&&w.u.G((function(){var e=i(t,m(a),p,d.$data,d);if(e&&e.controlsDescendantBindings){if(f!==n)throw Error("Multiple bindings ("+f+" and "+a+") are trying to control descendant bindings of the same element. You cannot use these bindings together on the same element.");f=a}})),"function"==typeof o&&w.$((function(){o(t,m(a),p,d.$data,d)}),null,{l:t})}catch(t){throw t.message='Unable to process binding "'+a+": "+r[a]+'"\nMessage: '+t.message,t}}))}return{shouldBindDescendants:o=f===n,bindingContextForDescendants:o&&d}}function p(t,e){return t&&t instanceof w.fa?t:new w.fa(t,n,n,e)}var g=w.a.Da("_subscribable"),m=w.a.Da("_ancestorBindingInfo"),v=w.a.Da("_dataDependency");w.c={};var b={script:!0,textarea:!0,template:!0};w.getBindingHandler=function(t){return w.c[t]};var y={};w.fa=function(t,e,i,r,o){function a(){var t=h?c():c,n=w.a.f(t);return e?(w.a.extend(l,e),m in e&&(l[m]=e[m])):(l.$parents=[],l.$root=n,l.ko=w),l[g]=s,u?n=l.$data:(l.$rawData=t,l.$data=n),i&&(l[i]=n),r&&r(l,e,n),e&&e[g]&&!w.S.o().Vb(e[g])&&e[g](),f&&(l[v]=f),l.$data}var s,l=this,u=t===y,c=u?n:t,h="function"==typeof c&&!w.O(c),f=o&&o.dataDependency;o&&o.exportDependencies?a():((s=w.xb(a)).v(),s.ja()?s.equalityComparer=null:l[g]=n)},w.fa.prototype.createChildContext=function(t,e,n,i){if(!i&&e&&"object"==typeof e&&(e=(i=e).as,n=i.extend),e&&i&&i.noChildContext){var r="function"==typeof t&&!w.O(t);return new w.fa(y,this,null,(function(i){n&&n(i),i[e]=r?t():t}),i)}return new w.fa(t,this,e,(function(t,e){t.$parentContext=e,t.$parent=e.$data,t.$parents=(e.$parents||[]).slice(0),t.$parents.unshift(t.$parent),n&&n(t)}),i)},w.fa.prototype.extend=function(t,e){return new w.fa(y,this,null,(function(e){w.a.extend(e,"function"==typeof t?t(e):t)}),e)};var E=w.a.g.Z();e.prototype.Tc=function(){this.Kb&&this.Kb.N&&this.Kb.N.sd(this.node)},e.prototype.sd=function(t){w.a.Pa(this.kb,t),!this.kb.length&&this.H&&this.Cc()},e.prototype.Cc=function(){this.H=!0,this.yc.N&&!this.kb.length&&(this.yc.N=null,w.a.K.yb(this.node,t),w.i.ma(this.node,w.i.pa),this.Tc())},w.i={H:"childrenComplete",pa:"descendantsComplete",subscribe:function(t,e,n,i,r){var o=w.a.g.Ub(t,E,{});return o.Fa||(o.Fa=new w.T),r&&r.notifyImmediately&&o.Zb[e]&&w.u.G(n,i,[t]),o.Fa.subscribe(n,i,e)},ma:function(t,e){var i=w.a.g.get(t,E);if(i&&(i.Zb[e]=!0,i.Fa&&i.Fa.notifySubscribers(t,e),e==w.i.H))if(i.N)i.N.Cc();else if(i.N===n&&i.Fa&&i.Fa.Wa(w.i.pa))throw Error("descendantsComplete event not supported for bindings on this node")},Cb:function(t,n){var i=w.a.g.Ub(t,E,{});return i.N||(i.N=new e(t,i,n[m])),n[m]==i?n:n.extend((function(t){t[m]=i}))}},w.Td=function(t){return(t=w.a.g.get(t,E))&&t.context},w.ib=function(t,e,n){return 1===t.nodeType&&w.h.Sc(t),d(t,e,p(n))},w.ld=function(t,e,n){return n=p(n),w.ib(t,u(e,n,t),n)},w.Oa=function(t,e){1!==e.nodeType&&8!==e.nodeType||h(p(t),e)},w.vc=function(t,e,n){if(!a&&i.jQuery&&(a=i.jQuery),2>arguments.length){if(!(e=r.body))throw Error("ko.applyBindings: could not find document.body; has the document been loaded?")}else if(!e||1!==e.nodeType&&8!==e.nodeType)throw Error("ko.applyBindings: first parameter should be your view model; second parameter should be a DOM node");f(p(t,n),e)},w.Dc=function(t){return!t||1!==t.nodeType&&8!==t.nodeType?n:w.Td(t)},w.Ec=function(t){return(t=w.Dc(t))?t.$data:n},w.b("bindingHandlers",w.c),w.b("bindingEvent",w.i),w.b("bindingEvent.subscribe",w.i.subscribe),w.b("bindingEvent.startPossiblyAsyncContentBinding",w.i.Cb),w.b("applyBindings",w.vc),w.b("applyBindingsToDescendants",w.Oa),w.b("applyBindingAccessorsToNode",w.ib),w.b("applyBindingsToNode",w.ld),w.b("contextFor",w.Dc),w.b("dataFor",w.Ec)}(),function(t){function e(e,i){var a,s=Object.prototype.hasOwnProperty.call(r,e)?r[e]:t;s?s.subscribe(i):((s=r[e]=new w.T).subscribe(i),n(e,(function(t,n){var i=!(!n||!n.synchronous);o[e]={definition:t,Gd:i},delete r[e],a||i?s.notifySubscribers(t):w.na.zb((function(){s.notifySubscribers(t)}))})),a=!0)}function n(t,e){i("getConfig",[t],(function(n){n?i("loadComponent",[t,n],(function(t){e(t,n)})):e(null,null)}))}function i(e,n,r,o){o||(o=w.j.loaders.slice(0));var a=o.shift();if(a){var s=a[e];if(s){var l=!1;if(s.apply(a,n.concat((function(t){l?r(null):null!==t?r(t):i(e,n,r,o)})))!==t&&(l=!0,!a.suppressLoaderExceptions))throw Error("Component loaders must supply values by invoking the callback, not by returning values synchronously.")}else i(e,n,r,o)}else r(null)}var r={},o={};w.j={get:function(n,i){var r=Object.prototype.hasOwnProperty.call(o,n)?o[n]:t;r?r.Gd?w.u.G((function(){i(r.definition)})):w.na.zb((function(){i(r.definition)})):e(n,i)},Bc:function(t){delete o[t]},oc:i},w.j.loaders=[],w.b("components",w.j),w.b("components.get",w.j.get),w.b("components.clearCachedDefinition",w.j.Bc)}(),function(){function t(t,e,n,i){function r(){0==--s&&i(o)}var o={},s=2,l=n.template;n=n.viewModel,l?a(e,l,(function(e){w.j.oc("loadTemplate",[t,e],(function(t){o.template=t,r()}))})):r(),n?a(e,n,(function(e){w.j.oc("loadViewModel",[t,e],(function(t){o[u]=t,r()}))})):r()}function n(t){switch(w.a.R(t)){case"script":return w.a.ua(t.text);case"textarea":return w.a.ua(t.value);case"template":if(o(t.content))return w.a.Ca(t.content.childNodes)}return w.a.Ca(t.childNodes)}function o(t){return i.DocumentFragment?t instanceof DocumentFragment:t&&11===t.nodeType}function a(t,n,r){"string"==typeof n.require?e||i.require?(e||i.require)([n.require],(function(t){t&&"object"==typeof t&&t.Xd&&t.default&&(t=t.default),r(t)})):t("Uses require, but no AMD loader is present"):r(n)}function s(t){return function(e){throw Error("Component '"+t+"': "+e)}}var l={};w.j.register=function(t,e){if(!e)throw Error("Invalid configuration for "+t);if(w.j.tb(t))throw Error("Component "+t+" is already registered");l[t]=e},w.j.tb=function(t){return Object.prototype.hasOwnProperty.call(l,t)},w.j.unregister=function(t){delete l[t],w.j.Bc(t)},w.j.Fc={getConfig:function(t,e){e(w.j.tb(t)?l[t]:null)},loadComponent:function(e,n,i){var r=s(e);a(r,n,(function(n){t(e,r,n,i)}))},loadTemplate:function(t,e,a){if(t=s(t),"string"==typeof e)a(w.a.ua(e));else if(e instanceof Array)a(e);else if(o(e))a(w.a.la(e.childNodes));else if(e.element)if(e=e.element,i.HTMLElement?e instanceof HTMLElement:e&&e.tagName&&1===e.nodeType)a(n(e));else if("string"==typeof e){var l=r.getElementById(e);l?a(n(l)):t("Cannot find element with ID "+e)}else t("Unknown element type: "+e);else t("Unknown template value: "+e)},loadViewModel:function(t,e,n){!function t(e,n,i){if("function"==typeof n)i((function(t){return new n(t)}));else if("function"==typeof n[u])i(n[u]);else if("instance"in n){var r=n.instance;i((function(){return r}))}else"viewModel"in n?t(e,n.viewModel,i):e("Unknown viewModel value: "+n)}(s(t),e,n)}};var u="createViewModel";w.b("components.register",w.j.register),w.b("components.isRegistered",w.j.tb),w.b("components.unregister",w.j.unregister),w.b("components.defaultLoader",w.j.Fc),w.j.loaders.push(w.j.Fc),w.j.dd=l}(),function(){function t(t,n){if(i=t.getAttribute("params")){var i=e.parseBindingsString(i,n,t,{valueAccessors:!0,bindingParams:!0}),r=(i=w.a.Ga(i,(function(e){return w.o(e,null,{l:t})})),w.a.Ga(i,(function(e){var n=e.v();return e.ja()?w.o({read:function(){return w.a.f(e())},write:w.Za(n)&&function(t){e()(t)},l:t}):n})));return Object.prototype.hasOwnProperty.call(r,"$raw")||(r.$raw=i),r}return{$raw:{}}}w.j.getComponentNameForNode=function(t){var e=w.a.R(t);if(w.j.tb(e)&&(-1!=e.indexOf("-")||"[object HTMLUnknownElement]"==""+t||8>=w.a.W&&t.tagName===e))return e},w.j.tc=function(e,n,i,r){if(1===n.nodeType){var o=w.j.getComponentNameForNode(n);if(o){if((e=e||{}).component)throw Error('Cannot use the "component" binding on a custom element matching a component');var a={name:o,params:t(n,i)};e.component=r?function(){return a}:a}}return e};var e=new w.ga;9>w.a.W&&(w.j.register=function(t){return function(e){return t.apply(this,arguments)}}(w.j.register),r.createDocumentFragment=function(t){return function(){var e=t();return w.j.dd,e}}(r.createDocumentFragment))}(),function(){var t=0;w.c.component={init:function(e,n,i,r,o){function a(){var t=s&&s.dispose;"function"==typeof t&&t.call(s),u&&u.s(),l=s=u=null}var s,l,u,c=w.a.la(w.h.childNodes(e));return w.h.Ea(e),w.a.K.za(e,a),w.o((function(){var i,r,h=w.a.f(n());if("string"==typeof h?i=h:(i=w.a.f(h.name),r=w.a.f(h.params)),!i)throw Error("No component name specified");var f=w.i.Cb(e,o),d=l=++t;w.j.get(i,(function(t){if(l===d){if(a(),!t)throw Error("Unknown component '"+i+"'");!function(t,e,n){if(!(e=e.template))throw Error("Component '"+t+"' has no template");t=w.a.Ca(e),w.h.va(n,t)}(i,t,e);var n=function(t,e,n){var i=t.createViewModel;return i?i.call(t,e,n):e}(t,r,{element:e,templateNodes:c});t=f.createChildContext(n,{extend:function(t){t.$component=n,t.$componentTemplateNodes=c}}),n&&n.koDescendantsComplete&&(u=w.i.subscribe(e,w.i.pa,n.koDescendantsComplete,n)),s=n,w.Oa(t,e)}}))}),null,{l:e}),{controlsDescendantBindings:!0}}},w.h.ea.component=!0}();var R={class:"className",for:"htmlFor"};w.c.attr={update:function(t,e){var i=w.a.f(e())||{};w.a.P(i,(function(e,i){i=w.a.f(i);var r=e.indexOf(":"),o=(r="lookupNamespaceURI"in t&&0<r&&t.lookupNamespaceURI(e.substr(0,r)),!1===i||null===i||i===n);o?r?t.removeAttributeNS(r,e):t.removeAttribute(e):i=i.toString(),8>=w.a.W&&e in R?(e=R[e],o?t.removeAttribute(e):t[e]=i):o||(r?t.setAttributeNS(r,e,i):t.setAttribute(e,i)),"name"===e&&w.a.Yc(t,o?"":i)}))}},w.c.checked={after:["value","attr"],init:function(t,e,i){function r(){var r=t.checked,l=o();if(!w.S.Ya()&&(r||!s&&!w.S.qa())){var h=w.u.G(e);if(u){var d=c?h.v():h,p=f;f=l,p!==l?r&&(w.a.Na(d,l,!0),w.a.Na(d,p,!1)):w.a.Na(d,l,r),c&&w.Za(h)&&h(d)}else a&&(l===n?l=r:r||(l=n)),w.m.eb(h,i,"checked",l,!0)}}var o=w.xb((function(){return i.has("checkedValue")?w.a.f(i.get("checkedValue")):h?i.has("value")?w.a.f(i.get("value")):t.value:void 0})),a="checkbox"==t.type,s="radio"==t.type;if(a||s){var l=e(),u=a&&w.a.f(l)instanceof Array,c=!(u&&l.push&&l.splice),h=s||u,f=u?o():n;s&&!t.name&&w.c.uniqueName.init(t,(function(){return!0})),w.o(r,null,{l:t}),w.a.B(t,"click",r),w.o((function(){var i=w.a.f(e()),r=o();u?(t.checked=0<=w.a.A(i,r),f=r):t.checked=a&&r===n?!!i:o()===i}),null,{l:t}),l=n}}},w.m.wa.checked=!0,w.c.checkedValue={update:function(t,e){t.value=w.a.f(e())}},w.c.class={update:function(t,e){var n=w.a.Db(w.a.f(e()));w.a.Eb(t,t.__ko__cssValue,!1),t.__ko__cssValue=n,w.a.Eb(t,n,!0)}},w.c.css={update:function(t,e){var n=w.a.f(e());null!==n&&"object"==typeof n?w.a.P(n,(function(e,n){n=w.a.f(n),w.a.Eb(t,e,n)})):w.c.class.update(t,e)}},w.c.enable={update:function(t,e){var n=w.a.f(e());n&&t.disabled?t.removeAttribute("disabled"):n||t.disabled||(t.disabled=!0)}},w.c.disable={update:function(t,e){w.c.enable.update(t,(function(){return!w.a.f(e())}))}},w.c.event={init:function(t,e,n,i,r){var o=e()||{};w.a.P(o,(function(o){"string"==typeof o&&w.a.B(t,o,(function(t){var a,s=e()[o];if(s){try{var l=w.a.la(arguments);i=r.$data,l.unshift(i),a=s.apply(i,l)}finally{!0!==a&&(t.preventDefault?t.preventDefault():t.returnValue=!1)}!1===n.get(o+"Bubble")&&(t.cancelBubble=!0,t.stopPropagation&&t.stopPropagation())}}))}))}},w.c.foreach={Rc:function(t){return function(){var e=t(),n=w.a.bc(e);return n&&"number"!=typeof n.length?(w.a.f(e),{foreach:n.data,as:n.as,noChildContext:n.noChildContext,includeDestroyed:n.includeDestroyed,afterAdd:n.afterAdd,beforeRemove:n.beforeRemove,afterRender:n.afterRender,beforeMove:n.beforeMove,afterMove:n.afterMove,templateEngine:w.ba.Ma}):{foreach:e,templateEngine:w.ba.Ma}}},init:function(t,e){return w.c.template.init(t,w.c.foreach.Rc(e))},update:function(t,e,n,i,r){return w.c.template.update(t,w.c.foreach.Rc(e),n,i,r)}},w.m.Ra.foreach=!1,w.h.ea.foreach=!0,w.c.hasfocus={init:function(t,e,n){function i(i){t.__ko_hasfocusUpdating=!0;var r=t.ownerDocument;if("activeElement"in r){var o;try{o=r.activeElement}catch(t){o=r.body}i=o===t}r=e(),w.m.eb(r,n,"hasfocus",i,!0),t.__ko_hasfocusLastValue=i,t.__ko_hasfocusUpdating=!1}var r=i.bind(null,!0),o=i.bind(null,!1);w.a.B(t,"focus",r),w.a.B(t,"focusin",r),w.a.B(t,"blur",o),w.a.B(t,"focusout",o),t.__ko_hasfocusLastValue=!1},update:function(t,e){var n=!!w.a.f(e());t.__ko_hasfocusUpdating||t.__ko_hasfocusLastValue===n||(n?t.focus():t.blur(),!n&&t.__ko_hasfocusLastValue&&t.ownerDocument.body.focus(),w.u.G(w.a.Fb,null,[t,n?"focusin":"focusout"]))}},w.m.wa.hasfocus=!0,w.c.hasFocus=w.c.hasfocus,w.m.wa.hasFocus="hasfocus",w.c.html={init:function(){return{controlsDescendantBindings:!0}},update:function(t,e){w.a.fc(t,e())}},function(){function t(t,e,n){w.c[t]={init:function(t,i,r,o,a){var s,l,u,c,h,f={};if(e){o=r.get("as");var d=r.get("noChildContext");f={as:o,noChildContext:d,exportDependencies:h=!(o&&d)}}return c=(u="render"==r.get("completeOn"))||r.has(w.i.pa),w.o((function(){var r,o=w.a.f(i()),d=!n!=!o,p=!l;(h||d!==s)&&(c&&(a=w.i.Cb(t,a)),d&&(e&&!h||(f.dataDependency=w.S.o()),r=e?a.createChildContext("function"==typeof o?o:i,f):w.S.qa()?a.extend(null,f):a),p&&w.S.qa()&&(l=w.a.Ca(w.h.childNodes(t),!0)),d?(p||w.h.va(t,w.a.Ca(l)),w.Oa(r,t)):(w.h.Ea(t),u||w.i.ma(t,w.i.H)),s=d)}),null,{l:t}),{controlsDescendantBindings:!0}}},w.m.Ra[t]=!1,w.h.ea[t]=!0}t("if"),t("ifnot",!1,!0),t("with",!0)}(),w.c.let={init:function(t,e,n,i,r){return e=r.extend(e),w.Oa(e,t),{controlsDescendantBindings:!0}}},w.h.ea.let=!0;var k={};w.c.options={init:function(t){if("select"!==w.a.R(t))throw Error("options binding applies only to SELECT elements");for(;0<t.length;)t.remove(0);return{controlsDescendantBindings:!0}},update:function(t,e,i){function r(){return w.a.jb(t.options,(function(t){return t.selected}))}function o(t,e,n){var i=typeof e;return"function"==i?e(t):"string"==i?t[e]:n}function a(e,n){if(p&&c)w.i.ma(t,w.i.H);else if(d.length){var i=0<=w.a.A(d,w.w.M(n[0]));w.a.Zc(n[0],i),p&&!i&&w.u.G(w.a.Fb,null,[t,"change"])}}var s=t.multiple,l=0!=t.length&&s?t.scrollTop:null,u=w.a.f(e()),c=i.get("valueAllowUnset")&&i.has("value"),h=i.get("optionsIncludeDestroyed");e={};var f,d=[];c||(s?d=w.a.Mb(r(),w.w.M):0<=t.selectedIndex&&d.push(w.w.M(t.options[t.selectedIndex]))),u&&(void 0===u.length&&(u=[u]),f=w.a.jb(u,(function(t){return h||t===n||null===t||!w.a.f(t._destroy)})),i.has("optionsCaption")&&null!==(u=w.a.f(i.get("optionsCaption")))&&u!==n&&f.unshift(k));var p=!1;e.beforeRemove=function(e){t.removeChild(e)},u=a,i.has("optionsAfterRender")&&"function"==typeof i.get("optionsAfterRender")&&(u=function(t,e){a(0,e),w.u.G(i.get("optionsAfterRender"),null,[e[0],t!==k?t:n])}),w.a.ec(t,f,(function(e,r,a){return a.length&&(d=!c&&a[0].selected?[w.w.M(a[0])]:[],p=!0),r=t.ownerDocument.createElement("option"),e===k?(w.a.Bb(r,i.get("optionsCaption")),w.w.cb(r,n)):(a=o(e,i.get("optionsValue"),e),w.w.cb(r,w.a.f(a)),e=o(e,i.get("optionsText"),a),w.a.Bb(r,e)),[r]}),e,u),c||(s?d.length&&r().length<d.length:d.length&&0<=t.selectedIndex?w.w.M(t.options[t.selectedIndex])!==d[0]:d.length||0<=t.selectedIndex)&&w.u.G(w.a.Fb,null,[t,"change"]),(c||w.S.Ya())&&w.i.ma(t,w.i.H),w.a.wd(t),l&&20<Math.abs(l-t.scrollTop)&&(t.scrollTop=l)}},w.c.options.$b=w.a.g.Z(),w.c.selectedOptions={init:function(t,e,n){function i(){var i=e(),r=[];w.a.D(t.getElementsByTagName("option"),(function(t){t.selected&&r.push(w.w.M(t))})),w.m.eb(i,n,"selectedOptions",r)}function r(){var n=w.a.f(e()),i=t.scrollTop;n&&"number"==typeof n.length&&w.a.D(t.getElementsByTagName("option"),(function(t){var e=0<=w.a.A(n,w.w.M(t));t.selected!=e&&w.a.Zc(t,e)})),t.scrollTop=i}if("select"!=w.a.R(t))throw Error("selectedOptions binding applies only to SELECT elements");var o;w.i.subscribe(t,w.i.H,(function(){o?i():(w.a.B(t,"change",i),o=w.o(r,null,{l:t}))}),null,{notifyImmediately:!0})},update:function(){}},w.m.wa.selectedOptions=!0,w.c.style={update:function(t,e){var i=w.a.f(e()||{});w.a.P(i,(function(e,i){if(null!==(i=w.a.f(i))&&i!==n&&!1!==i||(i=""),a)a(t).css(e,i);else if(/^--/.test(e))t.style.setProperty(e,i);else{e=e.replace(/-(\w)/g,(function(t,e){return e.toUpperCase()}));var r=t.style[e];t.style[e]=i,i===r||t.style[e]!=r||isNaN(i)||(t.style[e]=i+"px")}}))}},w.c.submit={init:function(t,e,n,i,r){if("function"!=typeof e())throw Error("The value for a submit binding must be a function");w.a.B(t,"submit",(function(n){var i,o=e();try{i=o.call(r.$data,t)}finally{!0!==i&&(n.preventDefault?n.preventDefault():n.returnValue=!1)}}))}},w.c.text={init:function(){return{controlsDescendantBindings:!0}},update:function(t,e){w.a.Bb(t,e())}},w.h.ea.text=!0,function(){if(i&&i.navigator){var t,e,r,o,a,s=function(t){if(t)return parseFloat(t[1])},l=i.navigator.userAgent;(t=i.opera&&i.opera.version&&parseInt(i.opera.version()))||(a=s(l.match(/Edge\/([^ ]+)$/)))||s(l.match(/Chrome\/([^ ]+)/))||(e=s(l.match(/Version\/([^ ]+) Safari/)))||(r=s(l.match(/Firefox\/([^ ]+)/)))||(o=w.a.W||s(l.match(/MSIE ([^ ]+)/)))||(o=s(l.match(/rv:([^ )]+)/)))}if(8<=o&&10>o)var u=w.a.g.Z(),c=w.a.g.Z(),h=function(t){var e=this.activeElement;(e=e&&w.a.g.get(e,c))&&e(t)},f=function(t,e){var n=t.ownerDocument;w.a.g.get(n,u)||(w.a.g.set(n,u,!0),w.a.B(n,"selectionchange",h)),w.a.g.set(t,c,e)};w.c.textInput={init:function(i,s,l){function u(t,e){w.a.B(i,t,e)}function c(){d||(p=i.value,d=w.a.setTimeout(h,4))}function h(){clearTimeout(d),p=d=n;var t=i.value;g!==t&&(g=t,w.m.eb(s(),l,"textInput",t))}var d,p,g=i.value,m=9==w.a.W?c:h,v=!1;o&&u("keypress",h),11>o&&u("propertychange",(function(t){v||"value"!==t.propertyName||m(t)})),8==o&&(u("keyup",h),u("keydown",h)),f&&(f(i,m),u("dragend",c)),(!o||9<=o)&&u("input",m),5>e&&"textarea"===w.a.R(i)?(u("keydown",c),u("paste",c),u("cut",c)):11>t?u("keydown",c):4>r?(u("DOMAutoComplete",h),u("dragdrop",h),u("drop",h)):a&&"number"===i.type&&u("keydown",c),u("change",h),u("blur",h),w.o((function t(){var e=w.a.f(s());null!==e&&e!==n||(e=""),p!==n&&e===p?w.a.setTimeout(t,4):i.value!==e&&(v=!0,i.value=e,v=!1,g=i.value)}),null,{l:i})}},w.m.wa.textInput=!0,w.c.textinput={preprocess:function(t,e,n){n("textInput",t)}}}(),w.c.uniqueName={init:function(t,e){if(e()){var n="ko_unique_"+ ++w.c.uniqueName.rd;w.a.Yc(t,n)}}},w.c.uniqueName.rd=0,w.c.using={init:function(t,e,n,i,r){var o;return n.has("as")&&(o={as:n.get("as"),noChildContext:n.get("noChildContext")}),e=r.createChildContext(e,o),w.Oa(e,t),{controlsDescendantBindings:!0}}},w.h.ea.using=!0,w.c.value={init:function(t,e,i){var r=w.a.R(t),o="input"==r;if(!o||"checkbox"!=t.type&&"radio"!=t.type){var a=[],s=i.get("valueUpdate"),l=!1,u=null;s&&(a="string"==typeof s?[s]:w.a.wc(s),w.a.Pa(a,"change"));var c,h,f=function(){u=null,l=!1;var n=e(),r=w.w.M(t);w.m.eb(n,i,"value",r)};!w.a.W||!o||"text"!=t.type||"off"==t.autocomplete||t.form&&"off"==t.form.autocomplete||-1!=w.a.A(a,"propertychange")||(w.a.B(t,"propertychange",(function(){l=!0})),w.a.B(t,"focus",(function(){l=!1})),w.a.B(t,"blur",(function(){l&&f()}))),w.a.D(a,(function(e){var n=f;w.a.Ud(e,"after")&&(n=function(){u=w.w.M(t),w.a.setTimeout(f,0)},e=e.substring(5)),w.a.B(t,e,n)})),c=o&&"file"==t.type?function(){var i=w.a.f(e());null===i||i===n||""===i?t.value="":w.u.G(f)}:function(){var o=w.a.f(e()),a=w.w.M(t);null!==u&&o===u?w.a.setTimeout(c,0):o===a&&a!==n||("select"===r?(a=i.get("valueAllowUnset"),w.w.cb(t,o,a),a||o===w.w.M(t)||w.u.G(f)):w.w.cb(t,o))},"select"===r?w.i.subscribe(t,w.i.H,(function(){h?i.get("valueAllowUnset")?c():f():(w.a.B(t,"change",f),h=w.o(c,null,{l:t}))}),null,{notifyImmediately:!0}):(w.a.B(t,"change",f),w.o(c,null,{l:t}))}else w.ib(t,{checkedValue:e})},update:function(){}},w.m.wa.value=!0,w.c.visible={update:function(t,e){var n=w.a.f(e()),i="none"!=t.style.display;n&&!i?t.style.display="":!n&&i&&(t.style.display="none")}},w.c.hidden={update:function(t,e){w.c.visible.update(t,(function(){return!w.a.f(e())}))}},function(t){w.c[t]={init:function(e,n,i,r,o){return w.c.event.init.call(this,e,(function(){var e={};return e[t]=n(),e}),i,r,o)}}}("click"),w.ca=function(){},w.ca.prototype.renderTemplateSource=function(){throw Error("Override renderTemplateSource")},w.ca.prototype.createJavaScriptEvaluatorBlock=function(){throw Error("Override createJavaScriptEvaluatorBlock")},w.ca.prototype.makeTemplateSource=function(t,e){if("string"==typeof t){var n=(e=e||r).getElementById(t);if(!n)throw Error("Cannot find template with ID "+t);return new w.C.F(n)}if(1==t.nodeType||8==t.nodeType)return new w.C.ia(t);throw Error("Unknown template type: "+t)},w.ca.prototype.renderTemplate=function(t,e,n,i){return t=this.makeTemplateSource(t,i),this.renderTemplateSource(t,e,n,i)},w.ca.prototype.isTemplateRewritten=function(t,e){return!1===this.allowTemplateRewriting||this.makeTemplateSource(t,e).data("isRewritten")},w.ca.prototype.rewriteTemplate=function(t,e,n){e=e((t=this.makeTemplateSource(t,n)).text()),t.text(e),t.data("isRewritten",!0)},w.b("templateEngine",w.ca),w.kc=function(){function t(t,e,n,i){t=w.m.ac(t);for(var r=w.m.Ra,o=0;o<t.length;o++){var a=t[o].key;if(Object.prototype.hasOwnProperty.call(r,a)){var s=r[a];if("function"==typeof s){if(a=s(t[o].value))throw Error(a)}else if(!s)throw Error("This template engine does not support the '"+a+"' binding within its templates")}}return n="ko.__tr_ambtns(function($context,$element){return(function(){return{ "+w.m.vb(t,{valueAccessors:!0})+" } })()},'"+n.toLowerCase()+"')",i.createJavaScriptEvaluatorBlock(n)+e}var e=/(<([a-z]+\d*)(?:\s+(?!data-bind\s*=\s*)[a-z0-9\-]+(?:=(?:\"[^\"]*\"|\'[^\']*\'|[^>]*))?)*\s+)data-bind\s*=\s*(["'])([\s\S]*?)\3/gi,n=/\x3c!--\s*ko\b\s*([\s\S]*?)\s*--\x3e/g;return{xd:function(t,e,n){e.isTemplateRewritten(t,n)||e.rewriteTemplate(t,(function(t){return w.kc.Ld(t,e)}),n)},Ld:function(i,r){return i.replace(e,(function(e,n,i,o,a){return t(a,n,i,r)})).replace(n,(function(e,n){return t(n,"\x3c!-- ko --\x3e","#comment",r)}))},md:function(t,e){return w.aa.Xb((function(n,i){var r=n.nextSibling;r&&r.nodeName.toLowerCase()===e&&w.ib(r,t,i)}))}}}(),w.b("__tr_ambtns",w.kc.md),function(){w.C={},w.C.F=function(t){if(this.F=t){var e=w.a.R(t);this.ab="script"===e?1:"textarea"===e?2:"template"==e&&t.content&&11===t.content.nodeType?3:4}},w.C.F.prototype.text=function(){var t=1===this.ab?"text":2===this.ab?"value":"innerHTML";if(0==arguments.length)return this.F[t];var e=arguments[0];"innerHTML"===t?w.a.fc(this.F,e):this.F[t]=e};var t=w.a.g.Z()+"_";w.C.F.prototype.data=function(e){if(1===arguments.length)return w.a.g.get(this.F,t+e);w.a.g.set(this.F,t+e,arguments[1])};var e=w.a.g.Z();w.C.F.prototype.nodes=function(){var t=this.F;if(0==arguments.length){var i=w.a.g.get(t,e)||{},r=i.lb||(3===this.ab?t.content:4===this.ab?t:n);if(!r||i.jd){var o=this.text();o&&o!==i.bb&&(r=w.a.Md(o,t.ownerDocument),w.a.g.set(t,e,{lb:r,bb:o,jd:!0}))}return r}i=arguments[0],this.ab!==n&&this.text(""),w.a.g.set(t,e,{lb:i})},w.C.ia=function(t){this.F=t},w.C.ia.prototype=new w.C.F,w.C.ia.prototype.constructor=w.C.ia,w.C.ia.prototype.text=function(){if(0==arguments.length){var t=w.a.g.get(this.F,e)||{};return t.bb===n&&t.lb&&(t.bb=t.lb.innerHTML),t.bb}w.a.g.set(this.F,e,{bb:arguments[0]})},w.b("templateSources",w.C),w.b("templateSources.domElement",w.C.F),w.b("templateSources.anonymousTemplate",w.C.ia)}(),function(){function t(t,e,n){var i;for(e=w.h.nextSibling(e);t&&(i=t)!==e;)n(i,t=w.h.nextSibling(i))}function e(e,n){if(e.length){var i=e[0],r=e[e.length-1],o=i.parentNode,a=w.ga.instance,s=a.preprocessNode;if(s){if(t(i,r,(function(t,e){var n=t.previousSibling,o=s.call(a,t);o&&(t===i&&(i=o[0]||e),t===r&&(r=o[o.length-1]||n))})),e.length=0,!i)return;i===r?e.push(i):(e.push(i,r),w.a.Ua(e,o))}t(i,r,(function(t){1!==t.nodeType&&8!==t.nodeType||w.vc(n,t)})),t(i,r,(function(t){1!==t.nodeType&&8!==t.nodeType||w.aa.cd(t,[n])})),w.a.Ua(e,o)}}function i(t){return t.nodeType?t:0<t.length?t[0]:null}function r(t,n,r,o,s){s=s||{};var l=(t&&i(t)||r||{}).ownerDocument,u=s.templateEngine||a;if(w.kc.xd(r,u,l),"number"!=typeof(r=u.renderTemplate(r,o,s,l)).length||0<r.length&&"number"!=typeof r[0].nodeType)throw Error("Template engine must return an array of DOM nodes");switch(l=!1,n){case"replaceChildren":w.h.va(t,r),l=!0;break;case"replaceNode":w.a.Xc(t,r),l=!0;break;case"ignoreTargetNode":break;default:throw Error("Unknown renderMode: "+n)}return l&&(e(r,o),s.afterRender&&w.u.G(s.afterRender,null,[r,o[s.as||"$data"]]),"replaceChildren"==n&&w.i.ma(t,w.i.H)),r}function o(t,e,n){return w.O(t)?t():"function"==typeof t?t(e,n):t}var a;w.gc=function(t){if(t!=n&&!(t instanceof w.ca))throw Error("templateEngine must inherit from ko.templateEngine");a=t},w.dc=function(t,e,s,l,u){if(((s=s||{}).templateEngine||a)==n)throw Error("Set a template engine before calling renderTemplate");if(u=u||"replaceChildren",l){var c=i(l);return w.$((function(){var n=e&&e instanceof w.fa?e:new w.fa(e,null,null,null,{exportDependencies:!0}),a=o(t,n.$data,n);n=r(l,u,a,n,s),"replaceNode"==u&&(c=i(l=n))}),null,{Sa:function(){return!c||!w.a.Sb(c)},l:c&&"replaceNode"==u?c.parentNode:c})}return w.aa.Xb((function(n){w.dc(t,e,s,n,"replaceNode")}))},w.Qd=function(t,i,a,s,l){function u(t,e){w.u.G(w.a.ec,null,[s,t,h,a,c,e]),w.i.ma(s,w.i.H)}function c(t,n){e(n,f),a.afterRender&&a.afterRender(n,t),f=null}function h(e,n){f=l.createChildContext(e,{as:d,noChildContext:a.noChildContext,extend:function(t){t.$index=n,d&&(t[d+"Index"]=n)}});var i=o(t,e,f);return r(s,"ignoreTargetNode",i,f,a)}var f,d=a.as,p=!1===a.includeDestroyed||w.options.foreachHidesDestroyed&&!a.includeDestroyed;if(p||a.beforeRemove||!w.Pc(i))return w.$((function(){var t=w.a.f(i)||[];void 0===t.length&&(t=[t]),p&&(t=w.a.jb(t,(function(t){return t===n||null===t||!w.a.f(t._destroy)}))),u(t)}),null,{l:s});u(i.v());var g=i.subscribe((function(t){u(i(),t)}),null,"arrayChange");return g.l(s),g};var s=w.a.g.Z(),l=w.a.g.Z();w.c.template={init:function(t,e){var n=w.a.f(e());if("string"==typeof n||"name"in n)w.h.Ea(t);else if("nodes"in n){if(n=n.nodes||[],w.O(n))throw Error('The "nodes" option must be a plain, non-observable array.');var i=n[0]&&n[0].parentNode;i&&w.a.g.get(i,l)||(i=w.a.Yb(n),w.a.g.set(i,l,!0)),new w.C.ia(t).nodes(i)}else{if(!(0<(n=w.h.childNodes(t)).length))throw Error("Anonymous template defined, but no template content was provided");i=w.a.Yb(n),new w.C.ia(t).nodes(i)}return{controlsDescendantBindings:!0}},update:function(t,e,i,r,o){var a=e();i=!0,r=null,"string"==typeof(e=w.a.f(a))?e={}:(a="name"in e?e.name:t,"if"in e&&(i=w.a.f(e.if)),i&&"ifnot"in e&&(i=!w.a.f(e.ifnot)),i&&!a&&(i=!1)),"foreach"in e?r=w.Qd(a,i&&e.foreach||[],e,t,o):i?(i=o,"data"in e&&(i=o.createChildContext(e.data,{as:e.as,noChildContext:e.noChildContext,exportDependencies:!0})),r=w.dc(a,i,e,t)):w.h.Ea(t),o=r,(e=w.a.g.get(t,s))&&"function"==typeof e.s&&e.s(),w.a.g.set(t,s,!o||o.ja&&!o.ja()?n:o)}},w.m.Ra.template=function(t){return 1==(t=w.m.ac(t)).length&&t[0].unknown||w.m.Id(t,"name")?null:"This template engine does not support anonymous templates nested within its templates"},w.h.ea.template=!0}(),w.b("setTemplateEngine",w.gc),w.b("renderTemplate",w.dc),w.a.Kc=function(t,e,n){var i,r,o,a,s;if(t.length&&e.length)for(i=r=0;(!n||i<n)&&(a=t[r]);++r){for(o=0;s=e[o];++o)if(a.value===s.value){a.moved=s.index,s.moved=a.index,e.splice(o,1),i=o=0;break}i+=o}},w.a.Pb=function(){function t(t,e,n,i,r){var o,a,s,l,u,c=Math.min,h=Math.max,f=[],d=t.length,p=e.length,g=p-d||1,m=d+p+1;for(o=0;o<=d;o++)for(l=s,f.push(s=[]),u=c(p,o+g),a=h(0,o-1);a<=u;a++)s[a]=a?o?t[o-1]===e[a-1]?l[a-1]:c(l[a]||m,s[a-1]||m)+1:a+1:o+1;for(c=[],h=[],g=[],o=d,a=p;o||a;)p=f[o][a]-1,a&&p===f[o][a-1]?h.push(c[c.length]={status:n,value:e[--a],index:a}):o&&p===f[o-1][a]?g.push(c[c.length]={status:i,value:t[--o],index:o}):(--a,--o,r.sparse||c.push({status:"retained",value:e[a]}));return w.a.Kc(g,h,!r.dontLimitMoves&&10*d),c.reverse()}return function(e,n,i){return i="boolean"==typeof i?{dontLimitMoves:i}:i||{},n=n||[],(e=e||[]).length<n.length?t(e,n,"added","deleted",i):t(n,e,"deleted","added",i)}}(),w.b("utils.compareArrays",w.a.Pb),function(){function t(t,e,i,r,o){var a=[],s=w.$((function(){var n=e(i,o,w.a.Ua(a,t))||[];0<a.length&&(w.a.Xc(a,n),r&&w.u.G(r,null,[i,n,o])),a.length=0,w.a.Nb(a,n)}),null,{l:t,Sa:function(){return!w.a.kd(a)}});return{Y:a,$:s.ja()?s:n}}var e=w.a.g.Z(),i=w.a.g.Z();w.a.ec=function(r,o,a,s,l,u){function c(t){d={Aa:t,pb:w.ta(S++)},y.push(d),b||I.push(d)}function h(t){d=v[t],S!==d.pb.v()&&x.push(d),d.pb(S++),w.a.Ua(d.Y,r),y.push(d)}function f(t,e){if(t)for(var n=0,i=e.length;n<i;n++)w.a.D(e[n].Y,(function(i){t(i,n,e[n].Aa)}))}void 0===(o=o||[]).length&&(o=[o]),s=s||{};var d,p,g,m,v=w.a.g.get(r,e),b=!v,y=[],E=0,S=0,N=[],C=[],T=[],x=[],I=[],P=0;if(b)w.a.D(o,c);else{if(!u||v&&v._countWaitingForRemove){var A=w.a.Mb(v,(function(t){return t.Aa}));u=w.a.Pb(A,o,{dontLimitMoves:s.dontLimitMoves,sparse:!0})}var O,R,k;for(A=0;O=u[A];A++)switch(R=O.moved,k=O.index,O.status){case"deleted":for(;E<k;)h(E++);R===n&&((d=v[E]).$&&(d.$.s(),d.$=n),w.a.Ua(d.Y,r).length&&(s.beforeRemove&&(y.push(d),P++,d.Aa===i?d=null:T.push(d)),d&&N.push.apply(N,d.Y))),E++;break;case"added":for(;S<k;)h(E++);R!==n?(C.push(y.length),h(R)):c(O.value)}for(;S<o.length;)h(E++);y._countWaitingForRemove=P}w.a.g.set(r,e,y),f(s.beforeMove,x),w.a.D(N,s.beforeRemove?w.oa:w.removeNode);try{m=r.ownerDocument.activeElement}catch(t){}if(C.length)for(;(A=C.shift())!=n;){for(d=y[A],p=n;A;)if((g=y[--A].Y)&&g.length){p=g[g.length-1];break}for(o=0;E=d.Y[o];p=E,o++)w.h.Wb(r,E,p)}for(A=0;d=y[A];A++){for(d.Y||w.a.extend(d,t(r,a,d.Aa,l,d.pb)),o=0;E=d.Y[o];p=E,o++)w.h.Wb(r,E,p);!d.Ed&&l&&(l(d.Aa,d.Y,d.pb),d.Ed=!0,p=d.Y[d.Y.length-1])}for(m&&r.ownerDocument.activeElement!=m&&m.focus(),f(s.beforeRemove,T),A=0;A<T.length;++A)T[A].Aa=i;f(s.afterMove,x),f(s.afterAdd,I)}}(),w.b("utils.setDomNodeChildrenFromArrayMapping",w.a.ec),w.ba=function(){this.allowTemplateRewriting=!1},w.ba.prototype=new w.ca,w.ba.prototype.constructor=w.ba,w.ba.prototype.renderTemplateSource=function(t,e,n,i){return(e=9>w.a.W||!t.nodes?null:t.nodes())?w.a.la(e.cloneNode(!0).childNodes):(t=t.text(),w.a.ua(t,i))},w.ba.Ma=new w.ba,w.gc(w.ba.Ma),w.b("nativeTemplateEngine",w.ba),function(){w.$a=function(){var t=this.Hd=function(){if(!a||!a.tmpl)return 0;try{if(0<=a.tmpl.tag.tmpl.open.toString().indexOf("__"))return 2}catch(t){}return 1}();this.renderTemplateSource=function(e,n,i,o){if(o=o||r,i=i||{},2>t)throw Error("Your version of jQuery.tmpl is too old. Please upgrade to jQuery.tmpl 1.0.0pre or later.");var s=e.data("precompiled");return s||(s=e.text()||"",s=a.template(null,"{{ko_with $item.koBindingContext}}"+s+"{{/ko_with}}"),e.data("precompiled",s)),e=[n.$data],n=a.extend({koBindingContext:n},i.templateOptions),(n=a.tmpl(s,e,n)).appendTo(o.createElement("div")),a.fragments={},n},this.createJavaScriptEvaluatorBlock=function(t){return"{{ko_code ((function() { return "+t+" })()) }}"},this.addTemplate=function(t,e){r.write("<script type='text/html' id='"+t+"'>"+e+"<\/script>")},0<t&&(a.tmpl.tag.ko_code={open:"__.push($1 || '');"},a.tmpl.tag.ko_with={open:"with($1) {",close:"} "})},w.$a.prototype=new w.ca,w.$a.prototype.constructor=w.$a;var t=new w.$a;0<t.Hd&&w.gc(t),w.b("jqueryTmplTemplateEngine",w.$a)}()}))}()}));function n(t,e,a,s){if(t===e)return t?[[0,t]]:[];if(null!=a){var h=function(t,e,n){var i="number"==typeof n?{index:n,length:0}:n.oldRange,r="number"==typeof n?null:n.newRange,o=t.length,a=e.length;if(0===i.length&&(null===r||0===r.length)){var s=i.index,l=t.slice(0,s),u=t.slice(s),h=r?r.index:null,f=s+a-o;if((null===h||h===f)&&!(f<0||f>a)){var d=e.slice(0,f);if((w=e.slice(f))===u){var p=Math.min(s,f),g=l.slice(0,p),m=d.slice(0,p);if(g===m){var v=l.slice(p),b=d.slice(p);return c(g,v,b,u)}}}if(null===h||h===s){var y=s,w=(d=e.slice(0,y),e.slice(y));if(d===l){var E=Math.min(o-y,a-y),S=u.slice(u.length-E),N=w.slice(w.length-E);if(S===N){v=u.slice(0,u.length-E),b=w.slice(0,w.length-E);return c(l,v,b,S)}}}}if(i.length>0&&r&&0===r.length){g=t.slice(0,i.index),S=t.slice(i.index+i.length),p=g.length,E=S.length;if(!(a<p+E)){m=e.slice(0,p),N=e.slice(a-E);if(g===m&&S===N){v=t.slice(p,o-E),b=e.slice(p,a-E);return c(g,v,b,S)}}}return null}(t,e,a);if(h)return h}var f=r(t,e),d=t.substring(0,f);f=o(t=t.substring(f),e=e.substring(f));var p=t.substring(t.length-f),g=function(t,e){var a;if(!t)return[[1,e]];if(!e)return[[-1,t]];var s=t.length>e.length?t:e,l=t.length>e.length?e:t,u=s.indexOf(l);if(-1!==u)return a=[[1,s.substring(0,u)],[0,l],[1,s.substring(u+l.length)]],t.length>e.length&&(a[0][0]=a[2][0]=-1),a;if(1===l.length)return[[-1,t],[1,e]];var c=function(t,e){var n=t.length>e.length?t:e,i=t.length>e.length?e:t;if(n.length<4||2*i.length<n.length)return null;function a(t,e,n){for(var i,a,s,l,u=t.substring(n,n+Math.floor(t.length/4)),c=-1,h="";-1!==(c=e.indexOf(u,c+1));){var f=r(t.substring(n),e.substring(c)),d=o(t.substring(0,n),e.substring(0,c));h.length<d+f&&(h=e.substring(c-d,c)+e.substring(c,c+f),i=t.substring(0,n-d),a=t.substring(n+f),s=e.substring(0,c-d),l=e.substring(c+f))}return 2*h.length>=t.length?[i,a,s,l,h]:null}var s,l,u,c,h,f=a(n,i,Math.ceil(n.length/4)),d=a(n,i,Math.ceil(n.length/2));if(!f&&!d)return null;s=d?f&&f[4].length>d[4].length?f:d:f;t.length>e.length?(l=s[0],u=s[1],c=s[2],h=s[3]):(c=s[0],h=s[1],l=s[2],u=s[3]);var p=s[4];return[l,u,c,h,p]}(t,e);if(c){var h=c[0],f=c[1],d=c[2],p=c[3],g=c[4],m=n(h,d),v=n(f,p);return m.concat([[0,g]],v)}return function(t,e){for(var n=t.length,r=e.length,o=Math.ceil((n+r)/2),a=o,s=2*o,l=new Array(s),u=new Array(s),c=0;c<s;c++)l[c]=-1,u[c]=-1;l[a+1]=0,u[a+1]=0;for(var h=n-r,f=h%2!=0,d=0,p=0,g=0,m=0,v=0;v<o;v++){for(var b=-v+d;b<=v-p;b+=2){for(var y=a+b,w=(T=b===-v||b!==v&&l[y-1]<l[y+1]?l[y+1]:l[y-1]+1)-b;T<n&&w<r&&t.charAt(T)===e.charAt(w);)T++,w++;if(l[y]=T,T>n)p+=2;else if(w>r)d+=2;else if(f){if((N=a+h-b)>=0&&N<s&&-1!==u[N]){var E=n-u[N];if(T>=E)return i(t,e,T,w)}}}for(var S=-v+g;S<=v-m;S+=2){for(var N=a+S,C=(E=S===-v||S!==v&&u[N-1]<u[N+1]?u[N+1]:u[N-1]+1)-S;E<n&&C<r&&t.charAt(n-E-1)===e.charAt(r-C-1);)E++,C++;if(u[N]=E,E>n)m+=2;else if(C>r)g+=2;else if(!f){if((y=a+h-S)>=0&&y<s&&-1!==l[y]){var T=l[y];w=a+T-y;if(T>=(E=n-E))return i(t,e,T,w)}}}}return[[-1,t],[1,e]]}(t,e)}(t=t.substring(0,t.length-f),e=e.substring(0,e.length-f));return d&&g.unshift([0,d]),p&&g.push([0,p]),function t(e,n){e.push([0,""]);var i,a=0,s=0,c=0,h="",f="";for(;a<e.length;)if(a<e.length-1&&!e[a][1])e.splice(a,1);else switch(e[a][0]){case 1:c++,f+=e[a][1],a++;break;case-1:s++,h+=e[a][1],a++;break;case 0:var d=a-c-s-1;if(n){if(d>=0&&u(e[d][1])){var p=e[d][1].slice(-1);if(e[d][1]=e[d][1].slice(0,-1),h=p+h,f=p+f,!e[d][1]){e.splice(d,1),a--;var g=d-1;e[g]&&1===e[g][0]&&(c++,f=e[g][1]+f,g--),e[g]&&-1===e[g][0]&&(s++,h=e[g][1]+h,g--),d=g}}if(l(e[a][1])){p=e[a][1].charAt(0);e[a][1]=e[a][1].slice(1),h+=p,f+=p}}if(a<e.length-1&&!e[a][1]){e.splice(a,1);break}if(h.length>0||f.length>0){h.length>0&&f.length>0&&(0!==(i=r(f,h))&&(d>=0?e[d][1]+=f.substring(0,i):(e.splice(0,0,[0,f.substring(0,i)]),a++),f=f.substring(i),h=h.substring(i)),0!==(i=o(f,h))&&(e[a][1]=f.substring(f.length-i)+e[a][1],f=f.substring(0,f.length-i),h=h.substring(0,h.length-i)));var m=c+s;0===h.length&&0===f.length?(e.splice(a-m,m),a-=m):0===h.length?(e.splice(a-m,m,[1,f]),a=a-m+1):0===f.length?(e.splice(a-m,m,[-1,h]),a=a-m+1):(e.splice(a-m,m,[-1,h],[1,f]),a=a-m+2)}0!==a&&0===e[a-1][0]?(e[a-1][1]+=e[a][1],e.splice(a,1)):a++,c=0,s=0,h="",f=""}""===e[e.length-1][1]&&e.pop();var v=!1;a=1;for(;a<e.length-1;)0===e[a-1][0]&&0===e[a+1][0]&&(e[a][1].substring(e[a][1].length-e[a-1][1].length)===e[a-1][1]?(e[a][1]=e[a-1][1]+e[a][1].substring(0,e[a][1].length-e[a-1][1].length),e[a+1][1]=e[a-1][1]+e[a+1][1],e.splice(a-1,1),v=!0):e[a][1].substring(0,e[a+1][1].length)==e[a+1][1]&&(e[a-1][1]+=e[a+1][1],e[a][1]=e[a][1].substring(e[a+1][1].length)+e[a+1][1],e.splice(a+1,1),v=!0)),a++;v&&t(e,n)}(g,s),g}function i(t,e,i,r){var o=t.substring(0,i),a=e.substring(0,r),s=t.substring(i),l=e.substring(r),u=n(o,a),c=n(s,l);return u.concat(c)}function r(t,e){if(!t||!e||t.charAt(0)!==e.charAt(0))return 0;for(var n=0,i=Math.min(t.length,e.length),r=i,o=0;n<r;)t.substring(o,r)==e.substring(o,r)?o=n=r:i=r,r=Math.floor((i-n)/2+n);return a(t.charCodeAt(r-1))&&r--,r}function o(t,e){if(!t||!e||t.slice(-1)!==e.slice(-1))return 0;for(var n=0,i=Math.min(t.length,e.length),r=i,o=0;n<r;)t.substring(t.length-r,t.length-o)==e.substring(e.length-r,e.length-o)?o=n=r:i=r,r=Math.floor((i-n)/2+n);return s(t.charCodeAt(t.length-r))&&r--,r}function a(t){return t>=55296&&t<=56319}function s(t){return t>=56320&&t<=57343}function l(t){return s(t.charCodeAt(0))}function u(t){return a(t.charCodeAt(t.length-1))}function c(t,e,n,i){return u(t)||l(i)?null:function(t){for(var e=[],n=0;n<t.length;n++)t[n][1].length>0&&e.push(t[n]);return e}([[0,t],[-1,e],[1,n],[0,i]])}function h(t,e,i){return n(t,e,i,!0)}h.INSERT=1,h.DELETE=-1,h.EQUAL=0;var f,d=h,p=t((function(t,e){var n,i,r,o,a=(n=d)&&"object"==typeof n&&"default"in n?n.default:n;function s(t){e.isDebug=t}function l(t){switch(t){case"ltr":return e.PageProgression.LTR;case"rtl":return e.PageProgression.RTL;default:throw new Error("unknown PageProgression: "+t)}}function u(t){var e=Array.from(t),n=null;return e[0]instanceof Error&&(n=e.shift()),{error:n,messages:e}}function c(t){var e=t.error,n=e&&(e.frameTrace||e.stack),i=[].concat(t.messages);return e&&(i.length>0&&(i=i.concat(["\n"])),i=i.concat([e.toString()]),n&&(i=i.concat(["\n"]).concat(n))),i}e.isDebug=!1,function(t){t.LTR="ltr",t.RTL="rtl"}(e.PageProgression||(e.PageProgression={})),(i=e.PageSide||(e.PageSide={})).LEFT="left",i.RIGHT="right",(r=e.ReadyState||(e.ReadyState={})).LOADING="loading",r.INTERACTIVE="interactive",r.COMPLETE="complete",function(t){t[t.DEBUG=1]="DEBUG",t[t.INFO=2]="INFO",t[t.WARN=3]="WARN",t[t.ERROR=4]="ERROR"}(o||(o={}));var h,f=new(function(){function t(t){this.opt_console=t,this.listeners={}}var e=t.prototype;return e.consoleDebug=function(t){var e,n,i;this.opt_console?this.opt_console.debug?(e=this.opt_console).debug.apply(e,t):(n=this.opt_console).log.apply(n,t):(i=console).debug.apply(i,t)},e.consoleInfo=function(t){var e,n,i;this.opt_console?this.opt_console.info?(e=this.opt_console).info.apply(e,t):(n=this.opt_console).log.apply(n,t):(i=console).info.apply(i,t)},e.consoleWarn=function(t){var e,n,i;this.opt_console?this.opt_console.warn?(e=this.opt_console).warn.apply(e,t):(n=this.opt_console).log.apply(n,t):(i=console).warn.apply(i,t)},e.consoleError=function(t){var e,n,i;this.opt_console?this.opt_console.error?(e=this.opt_console).error.apply(e,t):(n=this.opt_console).log.apply(n,t):(i=console).error.apply(i,t)},e.triggerListeners=function(t,e){var n=this.listeners[t];n&&n.forEach((function(t){t(e)}))},e.addListener=function(t,e){var n=this.listeners[t];n||(n=this.listeners[t]=[]),n.push(e)},e.debug=function(){var t=u(arguments);this.consoleDebug(c(t)),this.triggerListeners(o.DEBUG,t)},e.info=function(){var t=u(arguments);this.consoleInfo(c(t)),this.triggerListeners(o.INFO,t)},e.warn=function(){var t=u(arguments);this.consoleWarn(c(t)),this.triggerListeners(o.WARN,t)},e.error=function(){var t=u(arguments);this.consoleError(c(t)),this.triggerListeners(o.ERROR,t)},t}());(h=e.HOOKS||(e.HOOKS={})).SIMPLE_PROPERTY="SIMPLE_PROPERTY",h.PREPROCESS_SINGLE_DOCUMENT="PREPROCESS_SINGLE_DOCUMENT",h.PREPROCESS_TEXT_CONTENT="PREPROCESS_TEXT_CONTENT",h.PREPROCESS_ELEMENT_STYLE="PREPROCESS_ELEMENT_STYLE",h.POLYFILLED_INHERITED_PROPS="POLYFILLED_INHERITED_PROPS",h.CONFIGURATION="CONFIGURATION",h.RESOLVE_TEXT_NODE_BREAKER="RESOLVE_TEXT_NODE_BREAKER",h.RESOLVE_FORMATTING_CONTEXT="RESOLVE_FORMATTING_CONTEXT",h.RESOLVE_LAYOUT_PROCESSOR="RESOLVE_LAYOUT_PROCESSOR",h.POST_LAYOUT_BLOCK="POST_LAYOUT_BLOCK";var p={};function g(t,n){if(e.HOOKS[t]){var i=p[t];i||(i=p[t]=[]),i.push(n)}else f.warn(new Error("Skipping unknown plugin hook '"+t+"'."))}function m(t,n){if(e.HOOKS[t]){var i=p[t];if(i){var r=i.indexOf(n);r>=0&&i.splice(r,1)}}else f.warn(new Error("Ignoring unknown plugin hook '"+t+"'."))}function v(t){return p[t]||[]}var b={registerHook:g,removeHook:m},y=function(){function t(t){this.performanceInstance=t,this.timestamps={},this.registerTiming=w,this.registerStartTiming=this.registerStartTiming=w,this.registerEndTiming=this.registerEndTiming=w}var e=t.prototype;return e.forceRegisterStartTiming=function(t,e){E.call(this,t,"start",e)},e.forceRegisterEndTiming=function(t,e){E.call(this,t,"end",e)},e.printTimings=function(){var t=this.timestamps,e="";Object.keys(t).forEach((function(n){for(var i=t[n],r=i.length,o=0;o<r;o++){var a=i[o];e+=n,r>1&&(e+="("+o+")"),e+=" => start: "+a.start+", end: "+a.end+", duration: "+(a.end-a.start)+"\n"}})),f.info(e)},e.disable=function(){this.registerTiming=w,this.registerStartTiming=this.registerStartTiming=w,this.registerEndTiming=this.registerEndTiming=w},e.enable=function(){this.registerTiming=E,this.registerStartTiming=this.registerStartTiming=S,this.registerEndTiming=this.registerEndTiming=N},e.isEnabled=function(){return this.registerStartTiming===S},t}();function w(){}function E(t,e,n){n||(n=this.performanceInstance.now());var i,r=this.timestamps[t];r||(r=this.timestamps[t]=[]);for(var o=r.length-1;o>=0&&(!(i=r[o])||i[e]);o--)i=null;i||r.push(i={}),i[e]=n}function S(t,e){this.registerTiming(t,"start",e)}function N(t,e){this.registerTiming(t,"end",e)}var C={now:Date.now},T=new y(window&&window.performance||C);T.forceRegisterStartTiming("load_vivliostyle");var x={profiler:{registerStartTiming:T.registerStartTiming,registerEndTiming:T.registerEndTiming,printTimings:T.printTimings,disable:T.disable,enable:T.enable}};function I(t,e){for(var n=0;n<e.length;n++){var i=e[n];i.enumerable=i.enumerable||!1,i.configurable=!0,"value"in i&&(i.writable=!0),Object.defineProperty(t,i.key,i)}}function P(t,e,n){return e&&I(t.prototype,e),n&&I(t,n),t}function A(t,e){t.prototype=Object.create(e.prototype),t.prototype.constructor=t,t.__proto__=e}function O(t){return(O=Object.setPrototypeOf?Object.getPrototypeOf:function(t){return t.__proto__||Object.getPrototypeOf(t)})(t)}function R(t,e){return(R=Object.setPrototypeOf||function(t,e){return t.__proto__=e,t})(t,e)}function k(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Date.prototype.toString.call(Reflect.construct(Date,[],(function(){}))),!0}catch(t){return!1}}function L(t,e,n){return(L=k()?Reflect.construct:function(t,e,n){var i=[null];i.push.apply(i,e);var r=new(Function.bind.apply(t,i));return n&&R(r,n.prototype),r}).apply(null,arguments)}function F(t){var e="function"==typeof Map?new Map:void 0;return(F=function(t){if(null===t||-1===Function.toString.call(t).indexOf("[native code]"))return t;if("function"!=typeof t)throw new TypeError("Super expression must either be null or a function");if(void 0!==e){if(e.has(t))return e.get(t);e.set(t,n)}function n(){return L(t,arguments,O(this).constructor)}return n.prototype=Object.create(t.prototype,{constructor:{value:n,enumerable:!1,writable:!0,configurable:!0}}),R(n,t)})(t)}function _(t){if(void 0===t)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return t}function D(t,e){(null==e||e>t.length)&&(e=t.length);for(var n=0,i=new Array(e);n<e;n++)i[n]=t[n];return i}function B(t,e){var n;if("undefined"==typeof Symbol||null==t[Symbol.iterator]){if(Array.isArray(t)||(n=function(t,e){if(t){if("string"==typeof t)return D(t,void 0);var n=Object.prototype.toString.call(t).slice(8,-1);return"Object"===n&&t.constructor&&(n=t.constructor.name),"Map"===n||"Set"===n?Array.from(t):"Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)?D(t,void 0):void 0}}(t))||e&&t&&"number"==typeof t.length){n&&(t=n);var i=0;return function(){return i>=t.length?{done:!0}:{done:!1,value:t[i++]}}}throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}return(n=t[Symbol.iterator]()).next.bind(n)}var M={};function U(t){return JSON.parse(t)}function z(t){var e=t.match(/^([^#]*)/);return e?e[1]:t}var V=window.location.href;function H(t){V=t}var G,W=window.location.href;function X(t){W=t}function j(t,e){if(/^data:/i.test(e))return t||e;if(!e||t.match(/^\w{2,}:/))return t.toLowerCase().match("^javascript:")?"#":(t.match(/^\w{2,}:\/\/[^\/]+$/)&&(t+="/"),t);var n;if(e.match(/^\w{2,}:\/\/[^\/]+$/)&&(e+="/"),t.match(/^\/\//))return(n=e.match(/^(\w{2,}:)\/\//))?n[1]+t:t;if(t.match(/^\//))return(n=e.match(/^(\w{2,}:\/\/[^\/]+)\//))?n[1]+t:t;if(t.match(/^\.(\/|$)/)&&(t=t.substr(2)),e=function(t){var e=t.match(/^([^#?]*)/);return e?e[1]:t}(e),t.match(/^#/))return e+t;var i=e.lastIndexOf("/");if(i<0)return t;if(i<e.length-1&&e.lastIndexOf(".")<i){if(""==t)return e;i=(e+="/").length-1}var r=e.substr(0,i+1)+t,o="";for((n=r.match(/^([^?#]*)([?#].*)$/))&&(r=n[1],o=n[2]);!((i=r.indexOf("/../"))<=0);){var a=r.lastIndexOf("/",i-1);if(a<=0)break;r=r.substr(0,a)+r.substr(i+3)}return r.replace(/\/(\.\/)+/g,"/")+o}function K(t){var e;return(e=/^(https?:)\/\/github\.com\/([^/]+\/[^/]+)\/(blob\/|tree\/|raw\/)?(.*)$/.exec(t))?t=e[1]+"//raw.githubusercontent.com/"+e[2]+"/"+(e[3]?"":"master/")+e[4]:(e=/^(https?:)\/\/www\.aozora\.gr\.jp\/(cards\/[^/]+\/files\/[^/.]+\.html)$/.exec(t))?t=e[1]+"//raw.githubusercontent.com/aozorabunko/aozorabunko/master/"+e[2]:(e=/^(https?:)\/\/gist\.github\.com\/([^/]+\/\w+)(\/|$)(raw(\/|$))?(.*)$/.exec(t))?t=e[1]+"//gist.githubusercontent.com/"+e[2]+"/raw/"+e[6]:(e=/^(https?:)\/\/(?:[^/.]+\.)?jsbin\.com\/(?!(?:blog|help)\b)(\w+)((\/\d+)?).*$/.exec(t))&&(t=e[1]+"//output.jsbin.com/"+e[2]+e[3]+"/"),t}function Y(t){return null==t?t:t.toString()}!function(t){t.FB2="http://www.gribuser.ru/xml/fictionbook/2.0",t.epub="http://www.idpf.org/2007/ops",t.EV="http://www.w3.org/2001/xml-events",t.MATHML="http://www.w3.org/1998/Math/MathML",t.XML="http://www.w3.org/XML/1998/namespace",t.XHTML="http://www.w3.org/1999/xhtml",t.XLINK="http://www.w3.org/1999/xlink",t.SHADOW="http://www.pyroxy.com/ns/shadow",t.SVG="http://www.w3.org/2000/svg",t.DC="http://purl.org/dc/elements/1.1/",t.NCX="http://www.daisy.org/z3986/2005/ncx/",t.SSE="http://example.com/sse"}(G||(G={}));var q=function(){function t(){this.queue=[null]}var e=t.prototype;return e.length=function(){return this.queue.length-1},e.add=function(t){for(var e=this.queue.length;e>1;){var n=Math.floor(e/2),i=this.queue[n];if(i.compare(t)>0)return void(this.queue[e]=t);this.queue[e]=i,e=n}this.queue[1]=t},e.peek=function(){return this.queue[1]},e.remove=function(){var t=this.queue[1],e=this.queue.pop(),n=this.queue.length;if(n>1){for(var i=1;;){var r=2*i;if(r>=n)break;if(this.queue[r].compare(e)>0)r+1<n&&this.queue[r+1].compare(this.queue[r])>0&&r++;else{if(!(r+1<n&&this.queue[r+1].compare(e)>0))break;r++}this.queue[i]=this.queue[r],i=r}this.queue[i]=e}return t},t}(),$=["","-webkit-","-moz-","-ms-","-o-","-epub-"],Z={};function Q(t,e){if("writing-mode"===e){var n=document.createElement("span");return"-ms-"===t?(n.style.setProperty(t+e,"tb-rl"),"tb-rl"===n.style["writing-mode"]):(n.style.setProperty(t+e,"vertical-rl"),"vertical-rl"===n.style[t+e])}return"string"==typeof document.documentElement.style[function(t,e){return t&&(e="-"+e,"moz"===(t=t.replace(/-/g,""))&&(t="Moz")),t+e.replace(/-[a-z]/g,(function(t){return t.substr(1).toUpperCase()}))}(t,e)]}function J(t){var e=Z[t];if(e||null===e)return e;switch(t){case"text-combine-upright":if(Q("-webkit-","text-combine")&&!Q("","text-combine-upright"))return Z[t]=["-webkit-text-combine"],["-webkit-text-combine"];break;case"writing-mode":if(Q("-ms-","writing-mode"))return Z[t]=["-ms-writing-mode"],["-ms-writing-mode"];break;case"filter":if(Q("-webkit-","filter"))return Z[t]=["-webkit-filter"],["-webkit-filter"];break;case"clip-path":if(Q("-webkit-","clip-path"))return Z[t]=["-webkit-clip-path","clip-path"];break;case"margin-inline-start":if(Q("-webkit-","margin-start"))return Z[t]=["-webkit-margin-start"],["-webkit-margin-start"];break;case"margin-inline-end":if(Q("-webkit-","margin-end"))return Z[t]=["-webkit-margin-end"],["-webkit-margin-end"];break;case"padding-inline-start":if(Q("-webkit-","padding-start"))return Z[t]=["-webkit-padding-start"],["-webkit-padding-start"];break;case"padding-inline-end":if(Q("-webkit-","padding-end"))return Z[t]=["-webkit-padding-end"],["-webkit-padding-end"]}for(var n,i=B($);!(n=i()).done;){var r=n.value;if(Q(r,t))return Z[t]=[e=r+t],[e]}return f.warn("Property not supported by the browser: ",t),Z[t]=null,null}function tt(t,e,n){try{var i=J(e);if(!i)return;i.forEach((function(e){if("-ms-writing-mode"===e)switch(n){case"horizontal-tb":n="lr-tb";break;case"vertical-rl":n="tb-rl";break;case"vertical-lr":n="tb-lr"}else if("-webkit-text-combine"===e)switch(n){case"all":n="horizontal"}t&&t.style&&t.style.setProperty(e,n)}))}catch(t){f.warn(t)}}function et(t,e,n){try{var i=Z[e];return t.style.getPropertyValue(i?i[0]:e)}catch(t){}return n||""}function nt(t){var e=t.getAttributeNS(G.XML,"lang");return e||t.namespaceURI!=G.XHTML||(e=t.getAttribute("lang")),e}var it=function(){function t(){this.list=[]}var e=t.prototype;return e.append=function(t){return this.list.push(t),this},e.clear=function(){this.list=[]},e.toString=function(){var t=this.list.join("");return this.list=[t],t},t}();function rt(t){return"\\"+t.charCodeAt(0).toString(16)+" "}function ot(t){return t.replace(/[^-_a-zA-Z0-9\u0080-\uFFFF]/g,rt)}function at(t){return t.replace(/[\u0000-\u001F"\\]/g,rt)}function st(t){return t.replace(/[\s+&?=#\u007F-\uFFFF]+/g,encodeURIComponent)}function lt(t){return!!t.match(/^[a-zA-Z\u009E\u009F\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u024F\u037B-\u037D\u0386\u0388-\u0482\u048A-\u0527]$/)}function ut(t,e){return t.replace(/[^-a-zA-Z0-9_]/g,(function(t){return function(t,e){return(e="string"==typeof e?e:"\\u")+(65536|t.charCodeAt(0)).toString(16).substr(1)}(t,e)}))}function ct(t){return ut(t)}function ht(t,e){for(var n=0,i=t;;){if(0==n||e(n-1),i==t||e(i),n==i)return n;var r=n+i>>1;e(r)?i=r:n=r+1}}function ft(t,e){return t-e}function dt(t,e){for(var n,i={},r=B(t);!(n=r()).done;){var o=n.value,a=e(o);a&&!i[a]&&(i[a]=o)}return i}function pt(t,e){for(var n,i={},r=B(t);!(n=r()).done;){var o=n.value,a=e(o);a&&(i[a]?i[a].push(o):i[a]=[o])}return i}var gt=function(){function t(){this.listeners={}}var e=t.prototype;return e.dispatchEvent=function(t){var e=this.listeners[t.type];if(e){t.target=this,t.currentTarget=this;for(var n=0;n<e.length;n++)e[n](t)}},e.addEventListener=function(t,e,n){if(!n){var i=this.listeners[t];i?i.push(e):this.listeners[t]=[e]}},e.removeEventListener=function(t,e,n){if(!n){var i=this.listeners[t];if(i){var r=i.indexOf(e);r>=0&&i.splice(r,1)}}},t}(),mt=null,vt=null,bt=null,yt=null;function wt(t){if(1==t.nodeType){var e=t.getAttribute("id");if(e)return e}return null}function Et(t){return"^"+t}function St(t){return t.replace(/[\[\]\(\),=;^]/g,Et)}function Nt(t){return t.substr(1)}function Ct(t){return t?t.replace(/\^[\[\]\(\),=;^]/g,Nt):t}function Tt(t){var e=[];do{var n=t.match(/^(\^,|[^,])*/),i=Ct(n[0]);if(!(t=t.substr(n[0].length+1))&&!e.length)return i;e.push(i)}while(t);return e}function xt(t){for(var e={};t;){var n=t.match(/^;([^;=]+)=(([^;]|\^;)*)/);if(!n)return e;e[n[1]]=Tt(n[2]),t=t.substr(n[0].length)}return e}var It=function(){function t(){}var e=t.prototype;return e.appendTo=function(t){t.append("!")},e.applyTo=function(t){return!1},t}(),Pt=function(){function t(t,e,n){this.index=t,this.id=e,this.sideBias=n}var e=t.prototype;return e.appendTo=function(t){t.append("/"),t.append(this.index.toString()),(this.id||this.sideBias)&&(t.append("["),this.id&&t.append(this.id),this.sideBias&&(t.append(";s="),t.append(this.sideBias)),t.append("]"))},e.applyTo=function(t){if(1!=t.node.nodeType)throw new Error("E_CFI_NOT_ELEMENT");var e,n=t.node,i=n.children,r=i.length,o=Math.floor(this.index/2)-1;if(o<0||0==r)t.node=(e=n.firstChild)||n;else{if(e=i[Math.min(o,r-1)],1&this.index){var a=e.nextSibling;a&&1!=a.nodeType?e=a:t.after=!0}t.node=e}if(this.id&&(t.after||this.id!=wt(t.node)))throw new Error("E_CFI_ID_MISMATCH");return t.sideBias=this.sideBias,!0},t}(),At=function(){function t(t,e,n,i){this.offset=t,this.textBefore=e,this.textAfter=n,this.sideBias=i}var e=t.prototype;return e.applyTo=function(t){if(this.offset>0&&!t.after){for(var e=this.offset,n=t.node;;){var i=n.nodeType;if(1==i)break;var r=n.nextSibling;if(3<=i&&i<=5){var o=n.textContent.length;if(e<=o)break;if(!r){e=o;break}e-=o}if(!r){e=0;break}n=r}t.node=n,t.offset=e}return t.sideBias=this.sideBias,!0},e.appendTo=function(t){t.append(":"),t.append(this.offset.toString()),(this.textBefore||this.textAfter||this.sideBias)&&(t.append("["),(this.textBefore||this.textAfter)&&(this.textBefore&&t.append(St(this.textBefore)),t.append(","),this.textAfter&&t.append(St(this.textAfter))),this.sideBias&&(t.append(";s="),t.append(this.sideBias)),t.append("]"))},t}(),Ot=function(){function t(){this.steps=null}var e=t.prototype;return e.fromString=function(t){var e=t.match(/^#?epubcfi\((.*)\)$/);if(!e)throw new Error("E_CFI_NOT_CFI");for(var n=decodeURIComponent(e[1]),i=0,r=[];;){var o=void 0;switch(n.charAt(i)){case"/":if(i++,!(e=n.substr(i).match(/^(0|[1-9][0-9]*)(\[(.*?)(;([^\]]|\^\])*)?\])?/)))throw new Error("E_CFI_NUMBER_EXPECTED");i+=e[0].length;var a=parseInt(e[1],10),s=e[3];o=xt(e[4]),r.push(new Pt(a,s,Y(o.s)));break;case":":if(i++,!(e=n.substr(i).match(/^(0|[1-9][0-9]*)(\[((([^\];,]|\^[\];,])*)(,(([^\];,]|\^[\];,])*))?)(;([^]]|\^\])*)?\])?/)))throw new Error("E_CFI_NUMBER_EXPECTED");i+=e[0].length;var l=parseInt(e[1],10),u=e[4];u&&(u=Ct(u));var c=e[7];c&&(c=Ct(c)),o=xt(e[10]),r.push(new At(l,u,c,Y(o.s)));break;case"!":i++,r.push(new It);break;case"~":case"@":case"":return void(this.steps=r);default:throw new Error("E_CFI_PARSE_ERROR")}}},e.navigate=function(e){for(var n={node:e.documentElement,offset:0,after:!1,sideBias:null,ref:null},i=0;i<this.steps.length;i++)if(!this.steps[i].applyTo(n)){n.ref=new t,n.ref.steps=this.steps.slice(i+1);break}return n},e.trim=function(t,e){return t.replace(/\s+/g," ").match(e?/^[ -\uD7FF\uE000-\uFFFF]{0,8}/:/[ -\uD7FF\uE000-\uFFFF]{0,8}$/)[0].replace(/^\s/,"").replace(/\s$/,"")},e.prependPathFromNode=function(t,e,n,i){for(var r=[],o=t.parentNode,a="",s="";t;){switch(t.nodeType){case 3:case 4:case 5:var l=t.textContent,u=l.length;n?(e+=u,a||(a=l)):(e>u&&(e=u),n=!0,a=l.substr(0,e),s=l.substr(e)),t=t.previousSibling;continue;case 8:t=t.previousSibling;continue}break}for((e>0||a||s)&&(a=this.trim(a,!1),s=this.trim(s,!0),r.push(new At(e,a,s,i)),i=null);o&&o&&9!=o.nodeType;){for(var c=n?null:wt(t),h=n?1:0;t;)1==t.nodeType&&(h+=2),t=t.previousSibling;r.push(new Pt(h,c,i)),i=null,t=o,o=o.parentNode,n=!1}r.reverse(),this.steps?(r.push(new It),this.steps=r.concat(this.steps)):this.steps=r},e.toString=function(){if(!this.steps)return"";var t=new it;t.append("epubcfi(");for(var e=0;e<this.steps.length;e++)this.steps[e].appendTo(t);return t.append(")"),t.toString().replace(/%/g,"%25")},t}();function Rt(t){return{fontFamily:t.fontFamily,lineHeight:t.lineHeight,margin:t.margin,hyphenate:t.hyphenate,columnWidth:t.columnWidth,horizontal:t.horizontal,nightMode:t.nightMode,spreadView:t.spreadView,pageBorder:t.pageBorder,enabledMediaTypes:Object.assign({},t.enabledMediaTypes),defaultPaperSize:t.defaultPaperSize?Object.assign({},t.defaultPaperSize):void 0}}var kt={fontFamily:"serif",lineHeight:1.25,margin:8,hyphenate:!1,columnWidth:25,horizontal:!1,nightMode:!1,spreadView:!1,pageBorder:1,enabledMediaTypes:{vivliostyle:!0,print:!0},defaultPaperSize:void 0},Lt={};function Ft(t,e,n,i){var r=Math.min((t-0)/n,(e-0)/i);return"matrix("+r+",0,0,"+r+",0,0)"}function _t(t){return'"'+at(""+t)+'"'}function Dt(t){return ot(""+t)}function Bt(t,e){return t?ot(t)+"."+ot(e):ot(e)}var Mt=0,Ut=function(){function t(t,e){if(this.parent=t,this.resolver=e,this.children=[],this.values={},this.funcs={},this.builtIns={},this.scopeKey="S"+Mt++,this.zero=new we(this,0),this.one=new we(this,1),this._true=new we(this,!0),this._false=new we(this,!1),t&&t.children.push(this),!t){var n=this.builtIns;n.floor=Math.floor,n.ceil=Math.ceil,n.round=Math.round,n.sqrt=Math.sqrt,n.min=Math.min,n.max=Math.max,n.letterbox=Ft,n["css-string"]=_t,n["css-name"]=Dt,n.typeof=function(t){return typeof t},this.defineBuiltInName("page-width",(function(){return this.pageWidth()})),this.defineBuiltInName("page-height",(function(){return this.pageHeight()})),this.defineBuiltInName("pref-font-family",(function(){return this.pref.fontFamily})),this.defineBuiltInName("pref-night-mode",(function(){return this.pref.nightMode})),this.defineBuiltInName("pref-hyphenate",(function(){return this.pref.hyphenate})),this.defineBuiltInName("pref-margin",(function(){return this.pref.margin})),this.defineBuiltInName("pref-line-height",(function(){return this.pref.lineHeight})),this.defineBuiltInName("pref-column-width",(function(){return this.pref.columnWidth*this.fontSize})),this.defineBuiltInName("pref-horizontal",(function(){return this.pref.horizontal})),this.defineBuiltInName("pref-spread-view",(function(){return this.pref.spreadView})),this.defineBuiltInName("pub-title",(function(){return _t(this.pubTitle?this.pubTitle:"")})),this.defineBuiltInName("doc-title",(function(){return _t(this.docTitle?this.docTitle:"")}))}}var e=t.prototype;return e.defineBuiltInName=function(t,e){this.values[t]=new ve(this,e,t)},e.defineName=function(t,e){this.values[t]=e},e.defineFunc=function(t,e){this.funcs[t]=e},e.defineBuiltIn=function(t,e){this.builtIns[t]=e},t}();function zt(t){switch(t.toLowerCase()){case"vw":case"vh":case"vi":case"vb":case"vmin":case"vmax":case"pvw":case"pvh":case"pvi":case"pvb":case"pvmin":case"pvmax":return!0;default:return!1}}var Vt={px:1,in:96,pt:4/3,pc:16,cm:96/2.54,mm:96/25.4,q:96/2.54/40,em:16,rem:16,ex:8,dppx:1,dpi:1/96,dpcm:2.54/96};function Ht(t){switch(t){case"q":case"rem":return!0;default:return!1}}var Gt=function(){function t(t,e,n,i){this.rootScope=t,this.viewportWidth=e,this.viewportHeight=n,this.actualPageWidth=null,this.actualPageHeight=null,this.rootFontSize=null,this.scopes={},this.pageAreaWidth=null,this.pageAreaHeight=null,this.pageVertical=null,this.pubTitle=null,this.docTitle=null,this.pageWidth=function(){return this.actualPageWidth?this.actualPageWidth:this.pref.spreadView?Math.floor(e/2)-this.pref.pageBorder:e},this.pageHeight=function(){return this.actualPageHeight?this.actualPageHeight:n},this.initialFontSize=i,this.fontSize=function(){return this.rootFontSize?this.rootFontSize:i},this.pref=kt}var e=t.prototype;return e.getScopeContext=function(t){var e=this.scopes[t.scopeKey];return e||(this.scopes[t.scopeKey]=e={}),e},e.clearScope=function(t){this.scopes[t.scopeKey]={};for(var e=0;e<t.children.length;e++)this.clearScope(t.children[e])},e.queryUnitSize=function(t,e){if(zt(t)){var n=this.pageWidth()/100,i=this.pageHeight()/100,r=null!=this.pageAreaWidth?this.pageAreaWidth/100:n,o=null!=this.pageAreaHeight?this.pageAreaHeight/100:i;switch(t){case"vw":return r;case"vh":return o;case"vi":return this.pageVertical?o:r;case"vb":return this.pageVertical?r:o;case"vmin":return r<o?r:o;case"vmax":return r>o?r:o;case"pvw":return n;case"pvh":return i;case"pvi":return this.pageVertical?i:n;case"pvb":return this.pageVertical?n:i;case"pvmin":return n<i?n:i;case"pvmax":return n>i?n:i}}return"em"==t||"rem"==t?e?this.initialFontSize:this.fontSize():"ex"==t?Vt.ex*(e?this.initialFontSize:this.fontSize())/Vt.em:Vt[t]},e.evalName=function(t,e){do{var n=t.values[e];if(n)return n;if(t.resolver&&(n=t.resolver.call(this,e,!1)))return n;t=t.parent}while(t);throw new Error("Name '"+e+"' is undefined")},e.evalCall=function(t,e,n,i){do{var r=t.funcs[e];if(r)return r;if(t.resolver&&(r=t.resolver.call(this,e,!0)))return r;var o=t.builtIns[e];if(o){if(i)return t.zero;for(var a=Array(n.length),s=0;s<n.length;s++)a[s]=n[s].evaluate(this);return new we(t,o.apply(this,a))}t=t.parent}while(t);throw new Error("Function '"+e+"' is undefined")},e.evalMediaName=function(t,e){var n="all"===t||!!this.pref.enabledMediaTypes[t];return e?!n:n},e.evalMediaTest=function(t,e){var n="",i=t.match(/^(min|max)-(.*)$/);i&&(n=i[1],t=i[2]);var r=null,o=null;switch(t){case"width":case"height":case"device-width":case"device-height":case"color":e&&(r=e.evaluate(this))}switch(t){case"width":o=this.pageWidth();break;case"height":o=this.pageHeight();break;case"device-width":o=window.screen.availWidth;break;case"device-height":o=window.screen.availHeight;break;case"color":o=window.screen.pixelDepth}if(null!=o&&null!=r)switch(n){case"min":return o>=r;case"max":return o<=r;default:return o==r}else if(null!=o&&null==e)return 0!==o;return!1},e.queryVal=function(t,e){var n=this.scopes[t.scopeKey];return n?n[e]:void 0},e.storeVal=function(t,e,n){this.getScopeContext(t)[e]=n},t}(),Wt=function(){function t(t){this.scope=t,this.scope=t,this.key="_"+Mt++}var e=t.prototype;return e.toString=function(){var t=new it;return this.appendTo(t,0),t.toString()},e.appendTo=function(t,e){throw new Error("F_ABSTRACT")},e.evaluateCore=function(t){throw new Error("F_ABSTRACT")},e.expand=function(t,e){return this},e.dependCore=function(t,e,n){return t===this},e.dependOuter=function(t,e,n){var i=n[this.key];if(null!=i)return i!==Lt&&i;n[this.key]=Lt;var r=this.dependCore(t,e,n);return n[this.key]=r,r},e.depend=function(t,e){return this.dependOuter(t,e,{})},e.evaluate=function(t){var e=t.queryVal(this.scope,this.key);return void 0!==e||(e=this.evaluateCore(t),t.storeVal(this.scope,this.key,e)),e},e.isMediaName=function(){return!1},t}(),Xt=function(t){function e(e,n){var i;return(i=t.call(this,e)||this).val=n,i}A(e,t);var n=e.prototype;return n.getOp=function(){throw new Error("F_ABSTRACT")},n.evalPrefix=function(t){throw new Error("F_ABSTRACT")},n.evaluateCore=function(t){var e=this.val.evaluate(t);return this.evalPrefix(e)},n.dependCore=function(t,e,n){return t===this||this.val.dependOuter(t,e,n)},n.appendTo=function(t,e){10<e&&t.append("("),t.append(this.getOp()),this.val.appendTo(t,10),10<e&&t.append(")")},n.expand=function(t,e){var n=this.val.expand(t,e);return n===this.val?this:new this.constructor(this.scope,n)},e}(Wt),jt=function(t){function e(e,n,i){var r;return(r=t.call(this,e)||this).lhs=n,r.rhs=i,r}A(e,t);var n=e.prototype;return n.getPriority=function(){throw new Error("F_ABSTRACT")},n.getOp=function(){throw new Error("F_ABSTRACT")},n.evalInfix=function(t,e){throw new Error("F_ABSTRACT")},n.evaluateCore=function(t){var e=this.lhs.evaluate(t),n=this.rhs.evaluate(t);return this.evalInfix(e,n)},n.dependCore=function(t,e,n){return t===this||this.lhs.dependOuter(t,e,n)||this.rhs.dependOuter(t,e,n)},n.appendTo=function(t,e){var n=this.getPriority();n<=e&&t.append("("),this.lhs.appendTo(t,n),t.append(this.getOp()),this.rhs.appendTo(t,n),n<=e&&t.append(")")},n.expand=function(t,e){var n=this.lhs.expand(t,e),i=this.rhs.expand(t,e);return n===this.lhs&&i===this.rhs?this:new this.constructor(this.scope,n,i)},e}(Wt),Kt=function(t){function e(e,n,i){return t.call(this,e,n,i)||this}return A(e,t),e.prototype.getPriority=function(){return 1},e}(jt),Yt=function(t){function e(e,n,i){return t.call(this,e,n,i)||this}return A(e,t),e.prototype.getPriority=function(){return 2},e}(jt),qt=function(t){function e(e,n,i){return t.call(this,e,n,i)||this}return A(e,t),e.prototype.getPriority=function(){return 3},e}(jt),$t=function(t){function e(e,n,i){return t.call(this,e,n,i)||this}return A(e,t),e.prototype.getPriority=function(){return 4},e}(jt),Zt=function(t){function e(e,n){return t.call(this,e,n)||this}A(e,t);var n=e.prototype;return n.getOp=function(){return"!"},n.evalPrefix=function(t){return!t},e}(Xt),Qt=function(t){function e(e,n){return t.call(this,e,n)||this}A(e,t);var n=e.prototype;return n.getOp=function(){return"-"},n.evalPrefix=function(t){return-t},e}(Xt),Jt=function(t){function e(e,n,i){return t.call(this,e,n,i)||this}A(e,t);var n=e.prototype;return n.getOp=function(){return"&&"},n.evaluateCore=function(t){return this.lhs.evaluate(t)&&this.rhs.evaluate(t)},e}(Kt),te=function(t){function e(e,n,i){return t.call(this,e,n,i)||this}return A(e,t),e.prototype.getOp=function(){return" and "},e}(Jt),ee=function(t){function e(e,n,i){return t.call(this,e,n,i)||this}A(e,t);var n=e.prototype;return n.getOp=function(){return"||"},n.evaluateCore=function(t){return this.lhs.evaluate(t)||this.rhs.evaluate(t)},e}(Kt),ne=function(t){function e(e,n,i){return t.call(this,e,n,i)||this}return A(e,t),e.prototype.getOp=function(){return", "},e}(ee),ie=function(t){function e(e,n,i){return t.call(this,e,n,i)||this}A(e,t);var n=e.prototype;return n.getOp=function(){return"<"},n.evalInfix=function(t,e){return t<e},e}(Yt),re=function(t){function e(e,n,i){return t.call(this,e,n,i)||this}A(e,t);var n=e.prototype;return n.getOp=function(){return"<="},n.evalInfix=function(t,e){return t<=e},e}(Yt),oe=function(t){function e(e,n,i){return t.call(this,e,n,i)||this}A(e,t);var n=e.prototype;return n.getOp=function(){return">"},n.evalInfix=function(t,e){return t>e},e}(Yt),ae=function(t){function e(e,n,i){return t.call(this,e,n,i)||this}A(e,t);var n=e.prototype;return n.getOp=function(){return">="},n.evalInfix=function(t,e){return t>=e},e}(Yt),se=function(t){function e(e,n,i){return t.call(this,e,n,i)||this}A(e,t);var n=e.prototype;return n.getOp=function(){return"=="},n.evalInfix=function(t,e){return t==e},e}(Yt),le=function(t){function e(e,n,i){return t.call(this,e,n,i)||this}A(e,t);var n=e.prototype;return n.getOp=function(){return"!="},n.evalInfix=function(t,e){return t!=e},e}(Yt),ue=function(t){function e(e,n,i){return t.call(this,e,n,i)||this}A(e,t);var n=e.prototype;return n.getOp=function(){return"+"},n.evalInfix=function(t,e){return t+e},e}(qt),ce=function(t){function e(e,n,i){return t.call(this,e,n,i)||this}A(e,t);var n=e.prototype;return n.getOp=function(){return" - "},n.evalInfix=function(t,e){return t-e},e}(qt),he=function(t){function e(e,n,i){return t.call(this,e,n,i)||this}A(e,t);var n=e.prototype;return n.getOp=function(){return"*"},n.evalInfix=function(t,e){return t*e},e}($t),fe=function(t){function e(e,n,i){return t.call(this,e,n,i)||this}A(e,t);var n=e.prototype;return n.getOp=function(){return"/"},n.evalInfix=function(t,e){return t/e},e}($t),de=function(t){function e(e,n,i){return t.call(this,e,n,i)||this}A(e,t);var n=e.prototype;return n.getOp=function(){return"%"},n.evalInfix=function(t,e){return t%e},e}($t),pe=function(t){function e(e,n,i){var r;return(r=t.call(this,e)||this).num=n,r.unit=i.toLowerCase(),r}A(e,t);var n=e.prototype;return n.appendTo=function(t,e){t.append(this.num.toString()),t.append(ot(this.unit))},n.evaluateCore=function(t){return this.num*t.queryUnitSize(this.unit,!1)},e}(Wt),ge=function(t){function e(e,n){var i;return(i=t.call(this,e)||this).qualifiedName=n,i}A(e,t);var n=e.prototype;return n.appendTo=function(t,e){t.append(this.qualifiedName)},n.evaluateCore=function(t){return t.evalName(this.scope,this.qualifiedName).evaluate(t)},n.dependCore=function(t,e,n){return t===this||e.evalName(this.scope,this.qualifiedName).dependOuter(t,e,n)},e}(Wt),me=function(t){function e(e,n,i){var r;return(r=t.call(this,e)||this).not=n,r.name=i,r}A(e,t);var n=e.prototype;return n.appendTo=function(t,e){this.not&&t.append("not "),t.append(ot(this.name))},n.evaluateCore=function(t){return t.evalMediaName(this.name,this.not)},n.dependCore=function(t,e,n){return t===this||this.value.dependOuter(t,e,n)},n.isMediaName=function(){return!0},e}(Wt),ve=function(t){function e(e,n,i){var r;return(r=t.call(this,e)||this).fn=n,r.str=i,r}A(e,t);var n=e.prototype;return n.appendTo=function(t,e){t.append(this.str)},n.evaluateCore=function(t){return this.fn.call(t)},e}(Wt),be=function(t){function e(e,n,i){var r;return(r=t.call(this,e)||this).qualifiedName=n,r.params=i,r}A(e,t);var n=e.prototype;return n.appendTo=function(t,e){t.append(this.qualifiedName),function(t,e){t.append("(");for(var n=0;n<e.length;n++)n&&t.append(","),e[n].appendTo(t,0);t.append(")")}(t,this.params)},n.evaluateCore=function(t){return t.evalCall(this.scope,this.qualifiedName,this.params,!1).expand(t,this.params).evaluate(t)},n.dependCore=function(t,e,n){if(t===this)return!0;for(var i=0;i<this.params.length;i++)if(this.params[i].dependOuter(t,e,n))return!0;return e.evalCall(this.scope,this.qualifiedName,this.params,!0).dependOuter(t,e,n)},n.expand=function(t,n){var i=function(t,e,n){for(var i=e,r=0;r<e.length;r++){var o=e[r].expand(t,n);if(e!==i)i[r]=o;else if(o!==e[r]){i=Array(e.length);for(var a=0;a<r;a++)i[a]=e[a];i[r]=o}}return i}(t,this.params,n);return i===this.params?this:new e(this.scope,this.qualifiedName,i)},e}(Wt),ye=function(t){function e(e,n,i,r){var o;return(o=t.call(this,e)||this).cond=n,o.ifTrue=i,o.ifFalse=r,o}A(e,t);var n=e.prototype;return n.appendTo=function(t,e){e>0&&t.append("("),this.cond.appendTo(t,0),t.append("?"),this.ifTrue.appendTo(t,0),t.append(":"),this.ifFalse.appendTo(t,0),e>0&&t.append(")")},n.evaluateCore=function(t){return this.cond.evaluate(t)?this.ifTrue.evaluate(t):this.ifFalse.evaluate(t)},n.dependCore=function(t,e,n){return t===this||this.cond.dependOuter(t,e,n)||this.ifTrue.dependOuter(t,e,n)||this.ifFalse.dependOuter(t,e,n)},n.expand=function(t,n){var i=this.cond.expand(t,n),r=this.ifTrue.expand(t,n),o=this.ifFalse.expand(t,n);return i===this.cond&&r===this.ifTrue&&o===this.ifFalse?this:new e(this.scope,i,r,o)},e}(Wt),we=function(t){function e(e,n){var i;return(i=t.call(this,e)||this).val=n,i}A(e,t);var n=e.prototype;return n.appendTo=function(t,e){switch(typeof this.val){case"number":case"boolean":t.append(this.val.toString());break;case"string":t.append('"'),t.append(at(this.val)),t.append('"');break;default:throw new Error("F_UNEXPECTED_STATE")}},n.evaluateCore=function(t){return this.val},e}(Wt),Ee=function(t){function e(e,n,i){var r;return(r=t.call(this,e)||this).name=n,r.value=i,r}A(e,t);var n=e.prototype;return n.appendTo=function(t,e){t.append("("),t.append(at(this.name.name)),t.append(":"),this.value.appendTo(t,0),t.append(")")},n.evaluateCore=function(t){return t.evalMediaTest(this.name.name,this.value)},n.dependCore=function(t,e,n){return t===this||this.value.dependOuter(t,e,n)},n.expand=function(t,n){var i=this.value.expand(t,n);return i===this.value?this:new e(this.scope,this.name,i)},e}(Wt),Se=function(t){function e(e,n){var i;return(i=t.call(this,e)||this).index=n,i}A(e,t);var n=e.prototype;return n.appendTo=function(t,e){t.append("$"),t.append(this.index.toString())},n.expand=function(t,e){var n=e[this.index];if(!n)throw new Error("Parameter missing: "+this.index);return n},e}(Wt);function Ne(t,e,n){return e===t._false||e===t.zero||n==t._false||n==t.zero?t._false:e===t._true||e===t.one?n:n===t._true||n===t.one?e:new Jt(t,e,n)}function Ce(t,e,n){return e===t.zero?n:n===t.zero?e:new ue(t,e,n)}function Te(t,e,n){return e===t.zero?new Qt(t,n):n===t.zero?e:new ce(t,e,n)}function xe(t,e,n){return e===t.zero||n===t.zero?t.zero:e===t.one?n:n===t.one?e:new he(t,e,n)}function Ie(t,e,n){return e===t.zero?t.zero:n===t.one?e:new fe(t,e,n)}var Pe=function(){function t(){}var e=t.prototype;return e.visitValues=function(t){for(var e=0;e<t.length;e++)t[e].visit(this)},e.visitEmpty=function(t){throw new Error("E_CSS_EMPTY_NOT_ALLOWED")},e.visitSlash=function(t){throw new Error("E_CSS_SLASH_NOT_ALLOWED")},e.visitStr=function(t){throw new Error("E_CSS_STR_NOT_ALLOWED")},e.visitIdent=function(t){throw new Error("E_CSS_IDENT_NOT_ALLOWED")},e.visitNumeric=function(t){throw new Error("E_CSS_NUMERIC_NOT_ALLOWED")},e.visitNum=function(t){throw new Error("E_CSS_NUM_NOT_ALLOWED")},e.visitInt=function(t){return this.visitNum(t)},e.visitColor=function(t){throw new Error("E_CSS_COLOR_NOT_ALLOWED")},e.visitURL=function(t){throw new Error("E_CSS_URL_NOT_ALLOWED")},e.visitSpaceList=function(t){throw new Error("E_CSS_LIST_NOT_ALLOWED")},e.visitCommaList=function(t){throw new Error("E_CSS_COMMA_NOT_ALLOWED")},e.visitFunc=function(t){throw new Error("E_CSS_FUNC_NOT_ALLOWED")},e.visitExpr=function(t){throw new Error("E_CSS_EXPR_NOT_ALLOWED")},t}(),Ae=function(t){function e(){return t.call(this)||this}A(e,t);var n=e.prototype;return n.visitValues=function(t){for(var e=null,n=0;n<t.length;n++){var i=t[n],r=i.visit(this);if(e)e[n]=r;else if(i!==r){e=new Array(t.length);for(var o=0;o<n;o++)e[o]=t[o];e[n]=r}}return e||t},n.visitStr=function(t){return t},n.visitIdent=function(t){return t},n.visitSlash=function(t){return t},n.visitNumeric=function(t){return t},n.visitNum=function(t){return t},n.visitInt=function(t){return t},n.visitColor=function(t){return t},n.visitURL=function(t){return t},n.visitSpaceList=function(t){var e=this.visitValues(t.values);return e===t.values?t:new Ge(e)},n.visitCommaList=function(t){var e=this.visitValues(t.values);return e===t.values?t:new We(e)},n.visitFunc=function(t){var e=this.visitValues(t.values);return e===t.values?t:new Xe(t.name,e)},n.visitExpr=function(t){return t},e}(Pe),Oe=function(){function t(){}var e=t.prototype;return e.toString=function(){var t=new it;return this.appendTo(t,!0),t.toString()},e.stringValue=function(){var t=new it;return this.appendTo(t,!1),t.toString()},e.toExpr=function(t,e){throw new Error("F_ABSTRACT")},e.appendTo=function(t,e){t.append("[error]")},e.isExpr=function(){return!1},e.isNumeric=function(){return!1},e.isNum=function(){return!1},e.isIdent=function(){return!1},e.isSpaceList=function(){return!1},e.visit=function(t){throw new Error("F_ABSTRACT")},t}(),Re=function(t){function e(){return t.call(this)||this}A(e,t);var n=e.prototype;return n.toExpr=function(t,e){return new we(t,"")},n.appendTo=function(t,e){},n.visit=function(t){return t.visitEmpty(this)},P(e,null,[{key:"instance",get:function(){return this.empty||(this.empty=new e),this.empty}}]),e}(Oe).instance,ke=function(t){function e(){return t.call(this)||this}A(e,t);var n=e.prototype;return n.toExpr=function(t,e){return new we(t,"/")},n.appendTo=function(t,e){t.append("/")},n.visit=function(t){return t.visitSlash(this)},P(e,null,[{key:"instance",get:function(){return this.slash||(this.slash=new e),this.slash}}]),e}(Oe).instance,Le=function(t){function e(e){var n;return(n=t.call(this)||this).str=e,n}A(e,t);var n=e.prototype;return n.toExpr=function(t,e){return new we(t,this.str)},n.appendTo=function(t,e){e?(t.append('"'),t.append(at(this.str)),t.append('"')):t.append(this.str)},n.visit=function(t){return t.visitStr(this)},e}(Oe),Fe={},_e=function(t){function e(e){var n;if((n=t.call(this)||this).name=e,Fe[e])throw new Error("E_INVALID_CALL");return Fe[e]=_(n),n}A(e,t);var n=e.prototype;return n.toExpr=function(t,e){return new we(t,this.name)},n.appendTo=function(t,e){t.append(e?ot(this.name):this.name)},n.visit=function(t){return t.visitIdent(this)},n.isIdent=function(){return!0},e}(Oe);function De(t){var e=Fe[t];return e||(e=new _e(t)),e}var Be=function(t){function e(e,n){var i;return(i=t.call(this)||this).num=e,i.unit=n.toLowerCase(),i}A(e,t);var n=e.prototype;return n.toExpr=function(t,e){return 0==this.num?t.zero:e&&"%"==this.unit?100==this.num?e:new he(t,e,new we(t,this.num/100)):new pe(t,this.num,this.unit)},n.appendTo=function(t,e){t.append(this.num.toString()),t.append(this.unit)},n.visit=function(t){return t.visitNumeric(this)},n.isNumeric=function(){return!0},e}(Oe),Me=function(t){function e(e){var n;return(n=t.call(this)||this).num=e,n}A(e,t);var n=e.prototype;return n.toExpr=function(t,e){return 0==this.num?t.zero:1==this.num?t.one:new we(t,this.num)},n.appendTo=function(t,e){t.append(this.num.toString())},n.visit=function(t){return t.visitNum(this)},n.isNum=function(){return!0},e}(Oe),Ue=function(t){function e(e){return t.call(this,e)||this}return A(e,t),e.prototype.visit=function(t){return t.visitInt(this)},e}(Me),ze=function(t){function e(e){var n;return(n=t.call(this)||this).rgb=e,n}A(e,t);var n=e.prototype;return n.appendTo=function(t,e){t.append("#");var n=this.rgb.toString(16);t.append("000000".substr(n.length)),t.append(n)},n.visit=function(t){return t.visitColor(this)},e}(Oe),Ve=function(t){function e(e){var n;return(n=t.call(this)||this).url=e,n}A(e,t);var n=e.prototype;return n.appendTo=function(t,e){t.append('url("'),t.append(at(this.url)),t.append('")')},n.visit=function(t){return t.visitURL(this)},e}(Oe);function He(t,e,n,i){var r=e.length;e[0].appendTo(t,i);for(var o=1;o<r;o++)t.append(n),e[o].appendTo(t,i)}var Ge=function(t){function e(e){var n;return(n=t.call(this)||this).values=e,n}A(e,t);var n=e.prototype;return n.appendTo=function(t,e){He(t,this.values," ",e)},n.visit=function(t){return t.visitSpaceList(this)},n.isSpaceList=function(){return!0},e}(Oe),We=function(t){function e(e){var n;return(n=t.call(this)||this).values=e,n}A(e,t);var n=e.prototype;return n.appendTo=function(t,e){He(t,this.values,",",e)},n.visit=function(t){return t.visitCommaList(this)},e}(Oe),Xe=function(t){function e(e,n){var i;return(i=t.call(this)||this).name=e,i.values=n,i}A(e,t);var n=e.prototype;return n.appendTo=function(t,e){t.append(ot(this.name)),t.append("("),He(t,this.values,",",e),t.append(")")},n.visit=function(t){return t.visitFunc(this)},e}(Oe),je=function(t){function e(e){var n;return(n=t.call(this)||this).expr=e,n}A(e,t);var n=e.prototype;return n.toExpr=function(){return this.expr},n.appendTo=function(t,e){t.append("-epubx-expr("),this.expr.appendTo(t,0),t.append(")")},n.visit=function(t){return t.visitExpr(this)},n.isExpr=function(){return!0},e}(Oe);function Ke(t,e){if(t){if(t.isNumeric()){var n=t;return e.queryUnitSize(n.unit,!1)*n.num}if(t.isNum())return t.num}return 0}function Ye(t,e){return new Be(Ke(t,e),"px")}var qe={absolute:De("absolute"),all:De("all"),always:De("always"),auto:De("auto"),avoid:De("avoid"),balance:De("balance"),balance_all:De("balance-all"),block:De("block"),block_end:De("block-end"),block_start:De("block-start"),both:De("both"),bottom:De("bottom"),border_box:De("border-box"),break_all:De("break-all"),break_word:De("break-word"),crop:De("crop"),cross:De("cross"),column:De("column"),exclusive:De("exclusive"),_false:De("false"),fixed:De("fixed"),flex:De("flex"),footnote:De("footnote"),footer:De("footer"),header:De("header"),hidden:De("hidden"),horizontal_tb:De("horizontal-tb"),inherit:De("inherit"),inline:De("inline"),inline_block:De("inline-block"),inline_end:De("inline-end"),inline_start:De("inline-start"),landscape:De("landscape"),left:De("left"),line:De("line"),list_item:De("list-item"),ltr:De("ltr"),manual:De("manual"),none:De("none"),normal:De("normal"),oeb_page_foot:De("oeb-page-foot"),oeb_page_head:De("oeb-page-head"),page:De("page"),relative:De("relative"),right:De("right"),same:De("same"),scale:De("scale"),snap_block:De("snap-block"),spread:De("spread"),_static:De("static"),rtl:De("rtl"),table:De("table"),table_caption:De("table-caption"),table_cell:De("table-cell"),table_footer_group:De("table-footer-group"),table_header_group:De("table-header-group"),table_row:De("table-row"),top:De("top"),transparent:De("transparent"),vertical_lr:De("vertical-lr"),vertical_rl:De("vertical-rl"),visible:De("visible"),_true:De("true")},$e=new Be(100,"%"),Ze=new Be(100,"pvw"),Qe=new Be(100,"pvh"),Je=new Be(0,"px"),tn={"font-size":1,color:2};function en(t,e){return(tn[t]||Number.MAX_VALUE)-(tn[e]||Number.MAX_VALUE)}var nn=function(t,e,n,i){this.x1=t,this.y1=e,this.x2=n,this.y2=i},rn=function(t,e){this.x=t,this.y=e},on=function(t,e,n,i){this.left=t,this.top=e,this.right=n,this.bottom=i},an=function(t,e,n,i){this.low=t,this.high=e,this.winding=n,this.shapeId=i},sn=function(t,e,n,i){this.y1=t,this.y2=e,this.x1=n,this.x2=i,this.left=null,this.right=null};function ln(t,e){return t.low.y-e.low.y||t.low.x-e.low.x}var un=function(){function t(t){this.points=t}var e=t.prototype;return e.addSegments=function(t,e){for(var n=this.points,i=n.length,r=n[i-1],o=0;o<i;o++){var a,s=n[o];a=r.y<s.y?new an(r,s,1,e):new an(s,r,-1,e),t.push(a),r=s}},e.withOffset=function(e,n){for(var i,r=[],o=B(this.points);!(i=o()).done;){var a=i.value;r.push(new rn(a.x+e,a.y+n))}return new t(r)},t}();function cn(t,e,n,i){for(var r=[],o=0;o<20;o++){var a=2*o*Math.PI/20;r.push(new rn(t+n*Math.sin(a),e+i*Math.cos(a)))}return new un(r)}function hn(t,e,n,i){return new un([new rn(t,e),new rn(n,e),new rn(n,i),new rn(t,i)])}var fn=function(t,e,n,i){this.x=t,this.winding=e,this.shapeId=n,this.lowOrHigh=i};function dn(t,e){var n=t.low.x+(t.high.x-t.low.x)*(e-t.low.y)/(t.high.y-t.low.y);if(isNaN(n))throw new Error("Bad intersection");return n}function pn(t,e,n,i){var r,o,a,s;e.high.y<n&&f.warn("Error: inconsistent segment (1)"),e.low.y<=n?(r=dn(e,n),o=e.winding):(r=e.low.x,o=0),e.high.y>=i?(a=dn(e,i),s=e.winding):(a=e.high.x,s=0),r<a?(t.push(new fn(r,o,e.shapeId,-1)),t.push(new fn(a,s,e.shapeId,1))):(t.push(new fn(a,s,e.shapeId,-1)),t.push(new fn(r,o,e.shapeId,1)))}function gn(t,e,n){var i,r=e+n,o=Array(r),a=Array(r);for(i=0;i<=r;i++)o[i]=0,a[i]=0;for(var s=[],l=!1,u=t.length,c=0;c<u;c++){var h=t[c];o[h.shapeId]+=h.winding,a[h.shapeId]+=h.lowOrHigh;var f=!1;for(i=0;i<e;i++)if(o[i]&&!a[i]){f=!0;break}if(f)for(i=e;i<=r;i++)if(o[i]||a[i]){f=!1;break}l!=f&&(s.push(h.x),l=f)}return s}function mn(t,e){return e?Math.floor(t/e)*e:t}function vn(t){return new nn(t.y1,-t.x2,t.y2,-t.x1)}function bn(t){return new nn(-t.y2,t.x1,-t.y1,t.x2)}function yn(t){return new un(t.points.map((function(t){return function(t){return new rn(t.y,-t.x)}(t)})))}function wn(t,e){for(var n=e.length-1,i=new sn(t.y2,t.y2,t.x1,t.x2);n>=0;){var r=i;((i=e[n]).y2-i.y1<1||i.x1==r.x1&&i.x2==r.x2)&&(r.y1=i.y1,e.splice(n,1),i=r),n--}}function En(t,e){for(var n=0,i=t.length;n<i;){var r=Math.floor((n+i)/2);e>=t[r].y2?n=r+1:i=r}return n}function Sn(t,e){if(!t.length)return e;var n,i,r=e.y1;for(i=0;i<t.length&&!((n=t[i]).y2>e.y1&&n.x1-.1<=e.x1&&n.x2+.1>=e.x2);i++)r=Math.max(r,n.y2);for(var o=r;i<t.length&&!((n=t[i]).y1>=e.y2||n.x1-.1>e.x1||n.x2+.1<e.x2);i++)o=n.y2;return(o=i===t.length?e.y2:Math.min(o,e.y2))<=r?null:new nn(e.x1,r,e.x2,o)}function Nn(t,e){if(!t.length)return e;var n,i,r=e.y2;for(i=t.length-1;i>=0&&(n=t[i],!(i===t.length-1&&n.y2<e.y2))&&!(n.y1<e.y2&&n.x1-.1<=e.x1&&n.x2+.1>=e.x2);i--)r=Math.min(r,n.y1);for(var o=Math.min(r,n.y2);i>=0&&!((n=t[i]).y2<=e.y1||n.x1-.1>e.x1||n.x2+.1<e.x2);i--)o=n.y1;return r<=(o=Math.max(o,e.y1))?null:new nn(e.x1,o,e.x2,r)}var Cn=function(t){function e(){var e;return(e=t.call(this)||this).propSet={},e}A(e,t);var n=e.prototype;return n.visitIdent=function(t){return this.propSet[t.name]=!0,t},n.visitSpaceList=function(t){return this.visitValues(t.values),t},e}(Pe),Tn=function(t){function e(e){var n;return(n=t.call(this)||this).value=e,n}return A(e,t),e.prototype.visitInt=function(t){return this.value=t.num,t},e}(Pe);function xn(t,e){if(t){var n=new Tn(e);try{return t.visit(n),n.value}catch(t){f.warn(t,"toInt: ")}}return e}var In=function(t){function e(){var e;return(e=t.call(this)||this).collect=!1,e.coords=[],e.name=null,e}A(e,t);var n=e.prototype;return n.visitNumeric=function(t){return this.collect&&this.coords.push(t),null},n.visitNum=function(t){return this.collect&&0==t.num&&this.coords.push(new Be(0,"px")),null},n.visitSpaceList=function(t){return this.visitValues(t.values),null},n.visitFunc=function(t){return this.collect||(this.collect=!0,this.visitValues(t.values),this.collect=!1,this.name=t.name.toLowerCase()),null},n.getShape=function(t,e,n,i,r){var o=this;if(this.coords.length>0){var a=[];switch(this.coords.forEach((function(t,e){if("%"==t.unit){var s=e%2==0?n:i;3==e&&"circle"==o.name&&(s=Math.sqrt((n*n+i*i)/2)),a.push(t.num*s/100)}else a.push(t.num*r.queryUnitSize(t.unit,!1))})),this.name){case"polygon":if(a.length%2==0){for(var s=[],l=0;l<a.length;l+=2)s.push(new rn(t+a[l],e+a[l+1]));return new un(s)}break;case"rectangle":if(4==a.length)return hn(t+a[0],e+a[1],t+a[0]+a[2],e+a[1]+a[3]);break;case"ellipse":if(4==a.length)return cn(t+a[0],e+a[1],a[2],a[3]);break;case"circle":if(3==a.length)return cn(t+a[0],e+a[1],a[2],a[2])}}return null},e}(Pe);function Pn(t,e,n,i,r,o){if(t){var a=new In;try{return t.visit(a),a.getShape(e,n,i,r,o)}catch(t){f.warn(t,"toShape:")}}return hn(e,n,e+i,n+r)}var An=function(t){function e(e){var n;return(n=t.call(this)||this).reset=e,n.counters={},n.name=null,n}A(e,t);var n=e.prototype;return n.visitIdent=function(t){return this.name=t.toString(),this.counters[this.name]=this.reset?0:(this.counters[this.name]||0)+1,t},n.visitInt=function(t){return this.name&&(this.counters[this.name]+=t.num-(this.reset?0:1)),t},n.visitSpaceList=function(t){return this.visitValues(t.values),t},e}(Pe);function On(t,e){var n=new An(e);try{t.visit(n)}catch(t){f.warn(t,"toCounters:")}return n.counters}var Rn=function(t){function e(e,n){var i;return(i=t.call(this)||this).baseUrl=e,i.transformer=n,i}return A(e,t),e.prototype.visitURL=function(t){return new Ve(this.transformer.transformURL(t.url,this.baseUrl))},e}(Ae);function kn(t){var e={};return Object.keys(t).forEach((function(n){e[n]=Array.from(t[n])})),e}var Ln,Fn=function(){function t(t,e){this.targetId=t,this.resolved=e,this.pageCounters=null,this.spineIndex=-1,this.pageIndex=-1}var e=t.prototype;return e.equals=function(t){return this===t||!!t&&this.targetId===t.targetId&&this.resolved===t.resolved&&this.spineIndex===t.spineIndex&&this.pageIndex===t.pageIndex},e.isResolved=function(){return this.resolved},e.resolve=function(){this.resolved=!0},e.unresolve=function(){this.resolved=!1},t}(),_n=function(){function t(t,e){this.counterStore=t,this.baseURL=e}var e=t.prototype;return e.countersOfId=function(t,e){t=this.counterStore.documentURLTransformer.transformFragment(encodeURIComponent(t),this.baseURL),this.counterStore.countersById[t]=e},e.getExprContentListener=function(){return this.counterStore.getExprContentListener()},t}(),Dn=function(){function t(t,e,n,i){this.counterStore=t,this.baseURL=e,this.rootScope=n,this.pageScope=i,this.styler=null}var e=t.prototype;return e.setStyler=function(t){this.styler=t},e.getFragment=function(t){var e=t.match(/^[^#]*#(.*)$/);return e?e[1]:null},e.getTransformedId=function(t){var e=this.counterStore.documentURLTransformer.transformURL(j(t,this.baseURL),this.baseURL);return"#"===e.charAt(0)&&(e=e.substring(1)),e},e.getPageCounterVal=function(t,e){var n=this,i=new ve(this.pageScope,(function(){return e(function(){var e=n.counterStore.currentPageCounters[t];return e&&e.length?e[e.length-1]:null}())}),"page-counter-"+t);return this.counterStore.registerPageCounterExpr(t,(function(t){return e(t[0])}),i),i},e.getPageCountersVal=function(t,e){var n=this,i=new ve(this.pageScope,(function(){return e(n.counterStore.currentPageCounters[t]||[])}),"page-counters-"+t);return this.counterStore.registerPageCounterExpr(t,e,i),i},e.getTargetCounters=function(t,e,n){var i=this.counterStore.countersById[e];return!i&&n&&t&&(this.styler.styleUntilIdIsReached(t),i=this.counterStore.countersById[e]),i||null},e.getTargetPageCounters=function(t){return this.counterStore.currentPage.elementsById[t]?this.counterStore.currentPageCounters:this.counterStore.pageCountersById[t]||null},e.getTargetCounterVal=function(t,e,n){var i=this.getFragment(t),r=this.getTransformedId(t),o=this.getTargetCounters(i,r,!1);if(o&&o[e]){var a=o[e];return new we(this.rootScope,n(a[a.length-1]||null))}var s=this;return new ve(this.pageScope,(function(){if(o=s.getTargetCounters(i,r,!0)){if(o[e]){var t=o[e];return n(t[t.length-1]||null)}var a=s.getTargetPageCounters(r);if(a){if(s.counterStore.resolveReference(r),a[e]){var l=a[e];return n(l[l.length-1]||null)}return n(0)}return s.counterStore.saveReferenceOfCurrentPage(r,!1),"??"}return s.counterStore.saveReferenceOfCurrentPage(r,!1),"??"}),"target-counter-"+e+"-of-"+t)},e.getTargetCountersVal=function(t,e,n){var i=this.getFragment(t),r=this.getTransformedId(t),o=this;return new ve(this.pageScope,(function(){var t=o.getTargetPageCounters(r);if(t){o.counterStore.resolveReference(r);var a=t[e]||[],s=o.getTargetCounters(i,r,!0);return n(a.concat(s[e]||[]))}return o.counterStore.saveReferenceOfCurrentPage(r,!1),"??"}),"target-counters-"+e+"-of-"+t)},t}(),Bn=function(){function t(t){this.documentURLTransformer=t,this.countersById={},this.pageCountersById={},this.currentPageCounters={},this.previousPageCounters={},this.currentPageCountersStack=[],this.pageIndicesById={},this.currentPage=null,this.newReferencesOfCurrentPage=[],this.referencesToSolve=[],this.referencesToSolveStack=[],this.unresolvedReferences={},this.resolvedReferences={},this.pagesCounterExprs=[],this.currentPageCounters.page=[0]}var e=t.prototype;return e.createCounterListener=function(t){return new _n(this,t)},e.createCounterResolver=function(t,e,n){return new Dn(this,t,e,n)},e.setCurrentPage=function(t){this.currentPage=t},e.definePageCounter=function(t,e){this.currentPageCounters[t]?this.currentPageCounters[t].push(e):this.currentPageCounters[t]=[e]},e.forceSetPageCounter=function(t){var e=this.currentPageCounters.page;e&&e.length?e[e.length-1]=t:this.currentPageCounters.page=[t]},e.updatePageCounters=function(t,e){var n;this.previousPageCounters=kn(this.currentPageCounters);var i,r=t["counter-reset"];if(r){var o=r.evaluate(e);o&&(n=On(o,!0))}if(n)for(var a in n)this.definePageCounter(a,n[a]);var s=t["counter-increment"];if(s){var l=s.evaluate(e);l&&(i=On(l,!1))}for(var u in i?"page"in i||(i.page=1):(i={}).page=1,i){this.currentPageCounters[u]||this.definePageCounter(u,0);var c=this.currentPageCounters[u];c[c.length-1]+=i[u]}},e.pushPageCounters=function(t){this.currentPageCountersStack.push(this.currentPageCounters),this.currentPageCounters=kn(t)},e.popPageCounters=function(){this.currentPageCounters=this.currentPageCountersStack.pop()},e.resolveReference=function(t){var e=this.unresolvedReferences[t],n=this.resolvedReferences[t];n||(n=this.resolvedReferences[t]=[]);for(var i=!1,r=0;r<this.referencesToSolve.length;){var o=this.referencesToSolve[r];if(o.targetId===t){if(o.resolve(),this.referencesToSolve.splice(r,1),e){var a=e.indexOf(o);a>=0&&e.splice(a,1)}n.push(o),i=!0}else r++}i||this.saveReferenceOfCurrentPage(t,!0)},e.saveReferenceOfCurrentPage=function(t,e){if(!this.newReferencesOfCurrentPage.some((function(e){return e.targetId===t}))){var n=new Fn(t,e);this.newReferencesOfCurrentPage.push(n)}},e.finishPage=function(t,e){var n=this,i=Object.keys(this.currentPage.elementsById);if(i.length>0){var r=kn(this.currentPageCounters);i.forEach((function(i){n.pageCountersById[i]=r;var o=n.pageIndicesById[i];if(o&&o.pageIndex<e){var a=n.resolvedReferences[i];if(a){var s,l=n.unresolvedReferences[i];for(l||(l=n.unresolvedReferences[i]=[]);s=a.shift();)s.unresolve(),l.push(s)}}n.pageIndicesById[i]={spineIndex:t,pageIndex:e}}))}for(var o,a=this.previousPageCounters;o=this.newReferencesOfCurrentPage.shift();){o.pageCounters=a,o.spineIndex=t,o.pageIndex=e;var s=void 0;o.isResolved()?(s=this.resolvedReferences[o.targetId])||(s=this.resolvedReferences[o.targetId]=[]):(s=this.unresolvedReferences[o.targetId])||(s=this.unresolvedReferences[o.targetId]=[]),s.every((function(t){return!o.equals(t)}))&&s.push(o)}this.currentPage=null},e.getUnresolvedRefsToPage=function(t){var e=this,n=[];Object.keys(t.elementsById).forEach((function(t){var i=e.unresolvedReferences[t];i&&(n=n.concat(i))})),n.sort((function(t,e){return t.spineIndex-e.spineIndex||t.pageIndex-e.pageIndex}));var i=[],r=null;return n.forEach((function(t){r&&r.spineIndex===t.spineIndex&&r.pageIndex===t.pageIndex?r.refs.push(t):i.push(r={spineIndex:t.spineIndex,pageIndex:t.pageIndex,pageCounters:t.pageCounters,refs:[t]})})),i},e.pushReferencesToSolve=function(t){this.referencesToSolveStack.push(this.referencesToSolve),this.referencesToSolve=t},e.popReferencesToSolve=function(){this.referencesToSolve=this.referencesToSolveStack.pop()},e.registerPageCounterExpr=function(t,e,n){"pages"===t&&this.pagesCounterExprs.push({expr:n,format:e})},e.getExprContentListener=function(){return this.exprContentListener.bind(this)},e.exprContentListener=function(t,e,n){if(this.pagesCounterExprs.findIndex((function(e){return e.expr===t}))>=0){var i=n.createElement("span");return i.textContent=e,i.setAttribute(Mn,t.key),i}return null},e.finishLastPage=function(t){var e=this,n=t.root.querySelectorAll("["+Mn+"]"),i=this.currentPageCounters.page[0];Array.from(n).forEach((function(t){var n=t.getAttribute(Mn),r=e.pagesCounterExprs.findIndex((function(t){return t.expr.key===n}));t.textContent=e.pagesCounterExprs[r].format([i])}))},e.createLayoutConstraint=function(t){return new Un(this,t)},t}(),Mn="data-vivliostyle-pages-counter",Un=function(){function t(t,e){this.counterStore=t,this.pageIndex=e}return t.prototype.allowLayout=function(t){if(!t||t.after)return!0;var e=t.viewNode;if(!e||1!==e.nodeType)return!0;var n=e.getAttribute("id")||e.getAttribute("name");if(!n)return!0;if(!this.counterStore.resolvedReferences[n]&&!this.counterStore.unresolvedReferences[n])return!0;var i=this.counterStore.pageIndicesById[n];return!i||this.pageIndex>=i.pageIndex},t}();function zn(t){if((t=t.substr(1)).match(/^[^0-9a-fA-F\n\r]$/))return t;var e=parseInt(t,16);return isNaN(e)?"":e<=65535?String.fromCharCode(e):e<=1114111?String.fromCharCode(55296|e>>10&1023,56320|1023&e):"�"}function Vn(t){return t.replace(/\\([0-9a-fA-F]{0,6}(\r\n|[ \n\r\t\f])?|[^0-9a-fA-F\n\r])/g,zn)}!function(t){t[t.EOF=0]="EOF",t[t.IDENT=1]="IDENT",t[t.STR=2]="STR",t[t.NUMERIC=3]="NUMERIC",t[t.NUM=4]="NUM",t[t.INT=5]="INT",t[t.FUNC=6]="FUNC",t[t.HASH=7]="HASH",t[t.URL=8]="URL",t[t.CLASS=9]="CLASS",t[t.O_PAR=10]="O_PAR",t[t.C_PAR=11]="C_PAR",t[t.O_BRC=12]="O_BRC",t[t.C_BRC=13]="C_BRC",t[t.O_BRK=14]="O_BRK",t[t.C_BRK=15]="C_BRK",t[t.COMMA=16]="COMMA",t[t.SEMICOL=17]="SEMICOL",t[t.COLON=18]="COLON",t[t.SLASH=19]="SLASH",t[t.AT=20]="AT",t[t.PERCENT=21]="PERCENT",t[t.QMARK=22]="QMARK",t[t.PLUS=23]="PLUS",t[t.MINUS=24]="MINUS",t[t.BAR_BAR=25]="BAR_BAR",t[t.AMP_AMP=26]="AMP_AMP",t[t.BANG=31]="BANG",t[t.DOLLAR=32]="DOLLAR",t[t.HAT=33]="HAT",t[t.BAR=34]="BAR",t[t.TILDE=35]="TILDE",t[t.STAR=36]="STAR",t[t.GT=37]="GT",t[t.LT=38]="LT",t[t.EQ=39]="EQ",t[t.BANG_EQ=41]="BANG_EQ",t[t.DOLLAR_EQ=42]="DOLLAR_EQ",t[t.HAT_EQ=43]="HAT_EQ",t[t.BAR_EQ=44]="BAR_EQ",t[t.TILDE_EQ=45]="TILDE_EQ",t[t.STAR_EQ=46]="STAR_EQ",t[t.GT_EQ=47]="GT_EQ",t[t.LT_EQ=48]="LT_EQ",t[t.EQ_EQ=49]="EQ_EQ",t[t.COL_COL=50]="COL_COL",t[t.INVALID=51]="INVALID",t[t.LAST=51]="LAST"}(Ln||(Ln={}));var Hn,Gn=function(){this.precededBySpace=!1,this.num=0,this.text="",this.position=0,this.type=Ln.EOF};function Wn(t,e){var n,i=Array(128);for(n=0;n<128;n++)i[n]=t;for(i.NaN=t==Hn.END?Hn.END:Hn.INVALID,n=0;n<e.length;n+=2)i[e[n]]=e[n+1];return i}!function(t){t[t.SPACE=1]="SPACE",t[t.INT=2]="INT",t[t.IDENT=3]="IDENT",t[t.BANG=4]="BANG",t[t.HASH=6]="HASH",t[t.DOLLAR=7]="DOLLAR",t[t.PERCENT=8]="PERCENT",t[t.AMP=9]="AMP",t[t.O_PAR=10]="O_PAR",t[t.C_PAR=11]="C_PAR",t[t.STAR=12]="STAR",t[t.PLUS=13]="PLUS",t[t.COMMA=14]="COMMA",t[t.MINUS=15]="MINUS",t[t.DOT=16]="DOT",t[t.SLASH=17]="SLASH",t[t.COLON=18]="COLON",t[t.SEMICOL=19]="SEMICOL",t[t.LT=20]="LT",t[t.EQ=21]="EQ",t[t.GT=22]="GT",t[t.QMARK=23]="QMARK",t[t.AT=24]="AT",t[t.O_BRK=25]="O_BRK",t[t.C_BRK=26]="C_BRK",t[t.O_BRC=27]="O_BRC",t[t.C_BRC=28]="C_BRC",t[t.BSLASH=29]="BSLASH",t[t.HAT=30]="HAT",t[t.BAR=31]="BAR",t[t.TILDE=32]="TILDE",t[t.STR1=33]="STR1",t[t.STR2=34]="STR2",t[t.END=35]="END",t[t.EQTAIL=36]="EQTAIL",t[t.ENDINT=37]="ENDINT",t[t.ENDNUM=38]="ENDNUM",t[t.CONT=39]="CONT",t[t.UNIT=40]="UNIT",t[t.PCUNIT=41]="PCUNIT",t[t.NUMBER=42]="NUMBER",t[t.ENDIDNT=43]="ENDIDNT",t[t.IDNTESC=44]="IDNTESC",t[t.ENDIDES=45]="ENDIDES",t[t.ENDSTR=46]="ENDSTR",t[t.ENDESTR=47]="ENDESTR",t[t.STR1ESC=48]="STR1ESC",t[t.STR2ESC=49]="STR2ESC",t[t.BAR_BAR=50]="BAR_BAR",t[t.AMP_AMP=51]="AMP_AMP",t[t.FUNC=52]="FUNC",t[t.FUNCES=53]="FUNCES",t[t.COMMENT=54]="COMMENT",t[t.COMMST=55]="COMMST",t[t.ENDNOTK=56]="ENDNOTK",t[t.MINMIN=57]="MINMIN",t[t.TOINT=58]="TOINT",t[t.TONUM=59]="TONUM",t[t.TOIDENT=60]="TOIDENT",t[t.TOIDES=61]="TOIDES",t[t.KILL1=62]="KILL1",t[t.KILL2=63]="KILL2",t[t.URL=64]="URL",t[t.URL1=65]="URL1",t[t.URL2=66]="URL2",t[t.ENDURL=67]="ENDURL",t[t.TERMURL=68]="TERMURL",t[t.FINURL=69]="FINURL",t[t.LT_BG=70]="LT_BG",t[t.LT_BG_M=71]="LT_BG_M",t[t.INVALID=72]="INVALID",t[t.CHKPOSS=73]="CHKPOSS",t[t.CHKPOSN=74]="CHKPOSN",t[t.URLESC=75]="URLESC",t[t.IDESCH=76]="IDESCH",t[t.COL_COL=77]="COL_COL",t[t.TOCLASS=78]="TOCLASS",t[t.CHKSP=79]="CHKSP",t[t.EOF=80]="EOF"}(Hn||(Hn={}));var Xn=[Hn.INVALID,Hn.INVALID,Hn.INVALID,Hn.INVALID,Hn.INVALID,Hn.INVALID,Hn.INVALID,Hn.INVALID,Hn.INVALID,Hn.SPACE,Hn.SPACE,Hn.INVALID,Hn.SPACE,Hn.SPACE,Hn.INVALID,Hn.INVALID,Hn.INVALID,Hn.INVALID,Hn.INVALID,Hn.INVALID,Hn.INVALID,Hn.INVALID,Hn.INVALID,Hn.INVALID,Hn.INVALID,Hn.INVALID,Hn.INVALID,Hn.INVALID,Hn.INVALID,Hn.INVALID,Hn.INVALID,Hn.INVALID,Hn.SPACE,Hn.BANG,Hn.STR2,Hn.HASH,Hn.DOLLAR,Hn.PERCENT,Hn.AMP,Hn.STR1,Hn.O_PAR,Hn.C_PAR,Hn.STAR,Hn.PLUS,Hn.COMMA,Hn.MINUS,Hn.DOT,Hn.SLASH,Hn.INT,Hn.INT,Hn.INT,Hn.INT,Hn.INT,Hn.INT,Hn.INT,Hn.INT,Hn.INT,Hn.INT,Hn.COLON,Hn.SEMICOL,Hn.LT,Hn.EQ,Hn.GT,Hn.QMARK,Hn.AT,Hn.IDENT,Hn.IDENT,Hn.IDENT,Hn.IDENT,Hn.IDENT,Hn.IDENT,Hn.IDENT,Hn.IDENT,Hn.IDENT,Hn.IDENT,Hn.IDENT,Hn.IDENT,Hn.IDENT,Hn.IDENT,Hn.IDENT,Hn.IDENT,Hn.IDENT,Hn.IDENT,Hn.IDENT,Hn.IDENT,Hn.IDENT,Hn.IDENT,Hn.IDENT,Hn.IDENT,Hn.IDENT,Hn.IDENT,Hn.O_BRK,Hn.BSLASH,Hn.C_BRK,Hn.HAT,Hn.IDENT,Hn.INVALID,Hn.IDENT,Hn.IDENT,Hn.IDENT,Hn.IDENT,Hn.IDENT,Hn.IDENT,Hn.IDENT,Hn.IDENT,Hn.IDENT,Hn.IDENT,Hn.IDENT,Hn.IDENT,Hn.IDENT,Hn.IDENT,Hn.IDENT,Hn.IDENT,Hn.IDENT,Hn.IDENT,Hn.IDENT,Hn.IDENT,Hn.IDENT,Hn.IDENT,Hn.IDENT,Hn.IDENT,Hn.IDENT,Hn.IDENT,Hn.O_BRC,Hn.BAR,Hn.C_BRC,Hn.TILDE,Hn.INVALID];Xn.NaN=Hn.EOF;var jn=[Hn.ENDIDNT,Hn.ENDIDNT,Hn.ENDIDNT,Hn.ENDIDNT,Hn.ENDIDNT,Hn.ENDIDNT,Hn.ENDIDNT,Hn.ENDIDNT,Hn.ENDIDNT,Hn.ENDIDNT,Hn.ENDIDNT,Hn.ENDIDNT,Hn.ENDIDNT,Hn.ENDIDNT,Hn.ENDIDNT,Hn.ENDIDNT,Hn.ENDIDNT,Hn.ENDIDNT,Hn.ENDIDNT,Hn.ENDIDNT,Hn.ENDIDNT,Hn.ENDIDNT,Hn.ENDIDNT,Hn.ENDIDNT,Hn.ENDIDNT,Hn.ENDIDNT,Hn.ENDIDNT,Hn.ENDIDNT,Hn.ENDIDNT,Hn.ENDIDNT,Hn.ENDIDNT,Hn.ENDIDNT,Hn.ENDIDNT,Hn.ENDIDNT,Hn.ENDIDNT,Hn.ENDIDNT,Hn.ENDIDNT,Hn.ENDIDNT,Hn.ENDIDNT,Hn.ENDIDNT,Hn.FUNC,Hn.ENDIDNT,Hn.ENDIDNT,Hn.ENDIDNT,Hn.ENDIDNT,Hn.CONT,Hn.ENDIDNT,Hn.ENDIDNT,Hn.CONT,Hn.CONT,Hn.CONT,Hn.CONT,Hn.CONT,Hn.CONT,Hn.CONT,Hn.CONT,Hn.CONT,Hn.CONT,Hn.ENDIDNT,Hn.ENDIDNT,Hn.ENDIDNT,Hn.ENDIDNT,Hn.ENDIDNT,Hn.ENDIDNT,Hn.ENDIDNT,Hn.CONT,Hn.CONT,Hn.CONT,Hn.CONT,Hn.CONT,Hn.CONT,Hn.CONT,Hn.CONT,Hn.CONT,Hn.CONT,Hn.CONT,Hn.CONT,Hn.CONT,Hn.CONT,Hn.CONT,Hn.CONT,Hn.CONT,Hn.CONT,Hn.CONT,Hn.CONT,Hn.CONT,Hn.CONT,Hn.CONT,Hn.CONT,Hn.CONT,Hn.CONT,Hn.ENDIDNT,Hn.IDNTESC,Hn.ENDIDNT,Hn.ENDIDNT,Hn.CONT,Hn.ENDIDNT,Hn.CONT,Hn.CONT,Hn.CONT,Hn.CONT,Hn.CONT,Hn.CONT,Hn.CONT,Hn.CONT,Hn.CONT,Hn.CONT,Hn.CONT,Hn.CONT,Hn.CONT,Hn.CONT,Hn.CONT,Hn.CONT,Hn.CONT,Hn.CONT,Hn.CONT,Hn.CONT,Hn.CONT,Hn.CONT,Hn.CONT,Hn.CONT,Hn.CONT,Hn.CONT,Hn.ENDIDNT,Hn.ENDIDNT,Hn.ENDIDNT,Hn.ENDIDNT,Hn.ENDIDNT];jn.NaN=Hn.ENDIDNT;var Kn=[Hn.INVALID,Hn.INVALID,Hn.INVALID,Hn.INVALID,Hn.INVALID,Hn.INVALID,Hn.INVALID,Hn.INVALID,Hn.INVALID,Hn.INVALID,Hn.INVALID,Hn.INVALID,Hn.INVALID,Hn.INVALID,Hn.INVALID,Hn.INVALID,Hn.INVALID,Hn.INVALID,Hn.INVALID,Hn.INVALID,Hn.INVALID,Hn.INVALID,Hn.INVALID,Hn.INVALID,Hn.INVALID,Hn.INVALID,Hn.INVALID,Hn.INVALID,Hn.INVALID,Hn.INVALID,Hn.INVALID,Hn.INVALID,Hn.INVALID,Hn.INVALID,Hn.INVALID,Hn.INVALID,Hn.INVALID,Hn.INVALID,Hn.INVALID,Hn.INVALID,Hn.INVALID,Hn.INVALID,Hn.INVALID,Hn.INVALID,Hn.INVALID,Hn.TOCLASS,Hn.TONUM,Hn.INVALID,Hn.TONUM,Hn.TONUM,Hn.TONUM,Hn.TONUM,Hn.TONUM,Hn.TONUM,Hn.TONUM,Hn.TONUM,Hn.TONUM,Hn.TONUM,Hn.INVALID,Hn.INVALID,Hn.INVALID,Hn.INVALID,Hn.INVALID,Hn.INVALID,Hn.INVALID,Hn.TOCLASS,Hn.TOCLASS,Hn.TOCLASS,Hn.TOCLASS,Hn.TOCLASS,Hn.TOCLASS,Hn.TOCLASS,Hn.TOCLASS,Hn.TOCLASS,Hn.TOCLASS,Hn.TOCLASS,Hn.TOCLASS,Hn.TOCLASS,Hn.TOCLASS,Hn.TOCLASS,Hn.TOCLASS,Hn.TOCLASS,Hn.TOCLASS,Hn.TOCLASS,Hn.TOCLASS,Hn.TOCLASS,Hn.TOCLASS,Hn.TOCLASS,Hn.TOCLASS,Hn.TOCLASS,Hn.TOCLASS,Hn.INVALID,Hn.TOIDES,Hn.INVALID,Hn.INVALID,Hn.TOCLASS,Hn.INVALID,Hn.TOCLASS,Hn.TOCLASS,Hn.TOCLASS,Hn.TOCLASS,Hn.TOCLASS,Hn.TOCLASS,Hn.TOCLASS,Hn.TOCLASS,Hn.TOCLASS,Hn.TOCLASS,Hn.TOCLASS,Hn.TOCLASS,Hn.TOCLASS,Hn.TOCLASS,Hn.TOCLASS,Hn.TOCLASS,Hn.TOCLASS,Hn.TOCLASS,Hn.TOCLASS,Hn.TOCLASS,Hn.TOCLASS,Hn.TOCLASS,Hn.TOCLASS,Hn.TOCLASS,Hn.TOCLASS,Hn.TOCLASS,Hn.INVALID,Hn.INVALID,Hn.INVALID,Hn.INVALID,Hn.INVALID];jn.NaN=Hn.ENDIDNT;var Yn=[Hn.END,Hn.END,Hn.END,Hn.END,Hn.END,Hn.END,Hn.END,Hn.END,Hn.END,Hn.END,Hn.END,Hn.END,Hn.END,Hn.END,Hn.END,Hn.END,Hn.END,Hn.END,Hn.END,Hn.END,Hn.END,Hn.END,Hn.END,Hn.END,Hn.END,Hn.END,Hn.END,Hn.END,Hn.END,Hn.END,Hn.END,Hn.END,Hn.END,Hn.END,Hn.END,Hn.END,Hn.END,Hn.END,Hn.END,Hn.END,Hn.END,Hn.END,Hn.END,Hn.END,Hn.END,Hn.MINMIN,Hn.TONUM,Hn.END,Hn.TOINT,Hn.TOINT,Hn.TOINT,Hn.TOINT,Hn.TOINT,Hn.TOINT,Hn.TOINT,Hn.TOINT,Hn.TOINT,Hn.TOINT,Hn.END,Hn.END,Hn.END,Hn.END,Hn.END,Hn.END,Hn.END,Hn.TOIDENT,Hn.TOIDENT,Hn.TOIDENT,Hn.TOIDENT,Hn.TOIDENT,Hn.TOIDENT,Hn.TOIDENT,Hn.TOIDENT,Hn.TOIDENT,Hn.TOIDENT,Hn.TOIDENT,Hn.TOIDENT,Hn.TOIDENT,Hn.TOIDENT,Hn.TOIDENT,Hn.TOIDENT,Hn.TOIDENT,Hn.TOIDENT,Hn.TOIDENT,Hn.TOIDENT,Hn.TOIDENT,Hn.TOIDENT,Hn.TOIDENT,Hn.TOIDENT,Hn.TOIDENT,Hn.TOIDENT,Hn.END,Hn.TOIDES,Hn.END,Hn.END,Hn.TOIDENT,Hn.END,Hn.TOIDENT,Hn.TOIDENT,Hn.TOIDENT,Hn.TOIDENT,Hn.TOIDENT,Hn.TOIDENT,Hn.TOIDENT,Hn.TOIDENT,Hn.TOIDENT,Hn.TOIDENT,Hn.TOIDENT,Hn.TOIDENT,Hn.TOIDENT,Hn.TOIDENT,Hn.TOIDENT,Hn.TOIDENT,Hn.TOIDENT,Hn.TOIDENT,Hn.TOIDENT,Hn.TOIDENT,Hn.TOIDENT,Hn.TOIDENT,Hn.TOIDENT,Hn.TOIDENT,Hn.TOIDENT,Hn.TOIDENT,Hn.END,Hn.END,Hn.END,Hn.END,Hn.END];Yn.NaN=Hn.END;var qn=[Hn.ENDIDES,Hn.ENDIDES,Hn.ENDIDES,Hn.ENDIDES,Hn.ENDIDES,Hn.ENDIDES,Hn.ENDIDES,Hn.ENDIDES,Hn.ENDIDES,Hn.CHKPOSS,Hn.ENDIDES,Hn.ENDIDES,Hn.ENDIDES,Hn.ENDIDES,Hn.ENDIDES,Hn.ENDIDES,Hn.ENDIDES,Hn.ENDIDES,Hn.ENDIDES,Hn.ENDIDES,Hn.ENDIDES,Hn.ENDIDES,Hn.ENDIDES,Hn.ENDIDES,Hn.ENDIDES,Hn.ENDIDES,Hn.ENDIDES,Hn.ENDIDES,Hn.ENDIDES,Hn.ENDIDES,Hn.ENDIDES,Hn.ENDIDES,Hn.CHKPOSS,Hn.ENDIDES,Hn.ENDIDES,Hn.ENDIDES,Hn.ENDIDES,Hn.ENDIDES,Hn.ENDIDES,Hn.ENDIDES,Hn.FUNCES,Hn.ENDIDES,Hn.ENDIDES,Hn.ENDIDES,Hn.ENDIDES,Hn.ENDIDES,Hn.ENDIDES,Hn.ENDIDES,Hn.CONT,Hn.CONT,Hn.CONT,Hn.CONT,Hn.CONT,Hn.CONT,Hn.CONT,Hn.CONT,Hn.CONT,Hn.CONT,Hn.ENDIDES,Hn.ENDIDES,Hn.ENDIDES,Hn.ENDIDES,Hn.ENDIDES,Hn.ENDIDES,Hn.ENDIDES,Hn.CONT,Hn.CONT,Hn.CONT,Hn.CONT,Hn.CONT,Hn.CONT,Hn.CONT,Hn.CONT,Hn.CONT,Hn.CONT,Hn.CONT,Hn.CONT,Hn.CONT,Hn.CONT,Hn.CONT,Hn.CONT,Hn.CONT,Hn.CONT,Hn.CONT,Hn.CONT,Hn.CONT,Hn.CONT,Hn.CONT,Hn.CONT,Hn.CONT,Hn.CONT,Hn.ENDIDES,Hn.IDNTESC,Hn.ENDIDES,Hn.ENDIDES,Hn.CONT,Hn.ENDIDES,Hn.CONT,Hn.CONT,Hn.CONT,Hn.CONT,Hn.CONT,Hn.CONT,Hn.CONT,Hn.CONT,Hn.CONT,Hn.CONT,Hn.CONT,Hn.CONT,Hn.CONT,Hn.CONT,Hn.CONT,Hn.CONT,Hn.CONT,Hn.CONT,Hn.CONT,Hn.CONT,Hn.CONT,Hn.CONT,Hn.CONT,Hn.CONT,Hn.CONT,Hn.CONT,Hn.ENDIDES,Hn.ENDIDES,Hn.ENDIDES,Hn.ENDIDES,Hn.ENDIDES];qn.NaN=Hn.ENDIDES;var $n=[Hn.ENDINT,Hn.ENDINT,Hn.ENDINT,Hn.ENDINT,Hn.ENDINT,Hn.ENDINT,Hn.ENDINT,Hn.ENDINT,Hn.ENDINT,Hn.ENDINT,Hn.ENDINT,Hn.ENDINT,Hn.ENDINT,Hn.ENDINT,Hn.ENDINT,Hn.ENDINT,Hn.ENDINT,Hn.ENDINT,Hn.ENDINT,Hn.ENDINT,Hn.ENDINT,Hn.ENDINT,Hn.ENDINT,Hn.ENDINT,Hn.ENDINT,Hn.ENDINT,Hn.ENDINT,Hn.ENDINT,Hn.ENDINT,Hn.ENDINT,Hn.ENDINT,Hn.ENDINT,Hn.ENDINT,Hn.ENDINT,Hn.ENDINT,Hn.ENDINT,Hn.ENDINT,Hn.PCUNIT,Hn.ENDINT,Hn.ENDINT,Hn.ENDINT,Hn.ENDINT,Hn.ENDINT,Hn.ENDINT,Hn.ENDINT,Hn.ENDINT,Hn.NUMBER,Hn.ENDINT,Hn.CONT,Hn.CONT,Hn.CONT,Hn.CONT,Hn.CONT,Hn.CONT,Hn.CONT,Hn.CONT,Hn.CONT,Hn.CONT,Hn.ENDINT,Hn.ENDINT,Hn.ENDINT,Hn.ENDINT,Hn.ENDINT,Hn.ENDINT,Hn.ENDINT,Hn.UNIT,Hn.UNIT,Hn.UNIT,Hn.UNIT,Hn.UNIT,Hn.UNIT,Hn.UNIT,Hn.UNIT,Hn.UNIT,Hn.UNIT,Hn.UNIT,Hn.UNIT,Hn.UNIT,Hn.UNIT,Hn.UNIT,Hn.UNIT,Hn.UNIT,Hn.UNIT,Hn.UNIT,Hn.UNIT,Hn.UNIT,Hn.UNIT,Hn.UNIT,Hn.UNIT,Hn.UNIT,Hn.UNIT,Hn.ENDINT,Hn.ENDINT,Hn.ENDINT,Hn.ENDINT,Hn.UNIT,Hn.ENDINT,Hn.UNIT,Hn.UNIT,Hn.UNIT,Hn.UNIT,Hn.UNIT,Hn.UNIT,Hn.UNIT,Hn.UNIT,Hn.UNIT,Hn.UNIT,Hn.UNIT,Hn.UNIT,Hn.UNIT,Hn.UNIT,Hn.UNIT,Hn.UNIT,Hn.UNIT,Hn.UNIT,Hn.UNIT,Hn.UNIT,Hn.UNIT,Hn.UNIT,Hn.UNIT,Hn.UNIT,Hn.UNIT,Hn.UNIT,Hn.ENDINT,Hn.ENDINT,Hn.ENDINT,Hn.ENDINT,Hn.ENDINT];$n.NaN=Hn.ENDINT;var Zn=[Hn.ENDNUM,Hn.ENDNUM,Hn.ENDNUM,Hn.ENDNUM,Hn.ENDNUM,Hn.ENDNUM,Hn.ENDNUM,Hn.ENDNUM,Hn.ENDNUM,Hn.ENDNUM,Hn.ENDNUM,Hn.ENDNUM,Hn.ENDNUM,Hn.ENDNUM,Hn.ENDNUM,Hn.ENDNUM,Hn.ENDNUM,Hn.ENDNUM,Hn.ENDNUM,Hn.ENDNUM,Hn.ENDNUM,Hn.ENDNUM,Hn.ENDNUM,Hn.ENDNUM,Hn.ENDNUM,Hn.ENDNUM,Hn.ENDNUM,Hn.ENDNUM,Hn.ENDNUM,Hn.ENDNUM,Hn.ENDNUM,Hn.ENDNUM,Hn.ENDNUM,Hn.ENDNUM,Hn.ENDNUM,Hn.ENDNUM,Hn.ENDNUM,Hn.PCUNIT,Hn.ENDNUM,Hn.ENDNUM,Hn.ENDNUM,Hn.ENDNUM,Hn.ENDNUM,Hn.ENDNUM,Hn.ENDNUM,Hn.ENDNUM,Hn.ENDNUM,Hn.ENDNUM,Hn.CONT,Hn.CONT,Hn.CONT,Hn.CONT,Hn.CONT,Hn.CONT,Hn.CONT,Hn.CONT,Hn.CONT,Hn.CONT,Hn.ENDNUM,Hn.ENDNUM,Hn.ENDNUM,Hn.ENDNUM,Hn.ENDNUM,Hn.ENDNUM,Hn.ENDNUM,Hn.UNIT,Hn.UNIT,Hn.UNIT,Hn.UNIT,Hn.UNIT,Hn.UNIT,Hn.UNIT,Hn.UNIT,Hn.UNIT,Hn.UNIT,Hn.UNIT,Hn.UNIT,Hn.UNIT,Hn.UNIT,Hn.UNIT,Hn.UNIT,Hn.UNIT,Hn.UNIT,Hn.UNIT,Hn.UNIT,Hn.UNIT,Hn.UNIT,Hn.UNIT,Hn.UNIT,Hn.UNIT,Hn.UNIT,Hn.ENDNUM,Hn.ENDNUM,Hn.ENDNUM,Hn.ENDNUM,Hn.UNIT,Hn.ENDNUM,Hn.UNIT,Hn.UNIT,Hn.UNIT,Hn.UNIT,Hn.UNIT,Hn.UNIT,Hn.UNIT,Hn.UNIT,Hn.UNIT,Hn.UNIT,Hn.UNIT,Hn.UNIT,Hn.UNIT,Hn.UNIT,Hn.UNIT,Hn.UNIT,Hn.UNIT,Hn.UNIT,Hn.UNIT,Hn.UNIT,Hn.UNIT,Hn.UNIT,Hn.UNIT,Hn.UNIT,Hn.UNIT,Hn.UNIT,Hn.ENDNUM,Hn.ENDNUM,Hn.ENDNUM,Hn.ENDNUM,Hn.ENDNUM];Zn.NaN=Hn.ENDNUM;var Qn,Jn=Wn(Hn.END,[61,Hn.EQTAIL]),ti=Wn(Hn.END,[58,Hn.COL_COL]),ei=Wn(Hn.END,[61,Hn.EQTAIL,124,Hn.BAR_BAR]),ni=Wn(Hn.END,[38,Hn.AMP_AMP]),ii=Wn(Hn.END,[42,Hn.COMMENT]),ri=Wn(Hn.CONT,[42,Hn.COMMST]),oi=Wn(Hn.COMMENT,[42,Hn.COMMST,47,Hn.ENDNOTK]),ai=Wn(Hn.KILL1,[62,Hn.ENDNOTK]),si=Wn(Hn.END,[61,Hn.EQTAIL,33,Hn.LT_BG]),li=Wn(Hn.KILL1,[45,Hn.LT_BG_M]),ui=Wn(Hn.KILL2,[45,Hn.ENDNOTK]),ci=Wn(Hn.IDESCH,[9,Hn.INVALID,10,Hn.INVALID,13,Hn.INVALID,32,Hn.INVALID]),hi=Wn(Hn.CONT,[39,Hn.ENDSTR,10,Hn.INVALID,13,Hn.INVALID,92,Hn.STR1ESC]),fi=Wn(Hn.CONT,[34,Hn.ENDSTR,10,Hn.INVALID,13,Hn.INVALID,92,Hn.STR2ESC]),di=Wn(Hn.CONT,[39,Hn.ENDESTR,10,Hn.CHKPOSN,13,Hn.CHKPOSN,92,Hn.STR1ESC]),pi=Wn(Hn.CONT,[34,Hn.ENDESTR,10,Hn.CHKPOSN,13,Hn.CHKPOSN,92,Hn.STR2ESC]),gi=Wn(Hn.URL,[9,Hn.CONT,32,Hn.CONT,34,Hn.URL2,39,Hn.URL1,41,Hn.INVALID,10,Hn.CONT,13,Hn.CONT]),mi=Wn(Hn.CONT,[41,Hn.ENDURL,9,Hn.CHKSP,10,Hn.CHKSP,13,Hn.CHKSP,32,Hn.CHKSP,92,Hn.URLESC,40,Hn.INVALID,91,Hn.INVALID,93,Hn.INVALID,123,Hn.INVALID,125,Hn.INVALID,NaN,Hn.ENDURL]),vi=Wn(Hn.CONT,[39,Hn.TERMURL,10,Hn.CHKPOSN,13,Hn.CHKPOSN,92,Hn.URLESC,NaN,Hn.ENDURL]),bi=Wn(Hn.CONT,[34,Hn.TERMURL,10,Hn.CHKPOSN,13,Hn.CHKPOSN,92,Hn.URLESC,NaN,Hn.ENDURL]),yi=Wn(Hn.INVALID,[9,Hn.CONT,10,Hn.CONT,13,Hn.CONT,32,Hn.CONT,41,Hn.FINURL]),wi=function(){function t(t,e){this.input=t,this.handler=e,this.head=-1,this.tail=0,this.curr=0,this.position=0,this.indexMask=15,this.buffer=Array(this.indexMask+1);for(var n=0;n<=this.indexMask;n++)this.buffer[n]=new Gn}var e=t.prototype;return e.token=function(){return this.tail==this.curr&&this.fillBuffer(),this.buffer[this.curr]},e.nthToken=function(t){return(this.tail-this.curr&this.indexMask)<=t&&this.fillBuffer(),this.buffer[this.curr+t&this.indexMask]},e.consume=function(){this.curr=this.curr+1&this.indexMask},e.mark=function(){if(this.head>=0)throw new Error("F_CSSTOK_BAD_CALL mark");this.head=this.curr},e.reset=function(){if(this.head<0)throw new Error("F_CSSTOK_BAD_CALL reset");this.curr=this.head,this.head=-1},e.unmark=function(){this.head=-1},e.hasMark=function(){return this.head>=0},e.reallocate=function(){for(var t=2*(this.indexMask+1)-1,e=Array(t+1),n=this.head,i=0;n!=this.tail;)e[i]=this.buffer[n],n==this.curr&&(this.curr=i),n=n+1&this.indexMask,i++;for(this.head=0,this.tail=i,this.indexMask=t,this.buffer=e;i<=t;)e[i++]=new Gn},e.error=function(t,e,n){this.handler&&this.handler.error(n,e)},e.fillBuffer=function(){var t=this.tail,e=this.head>=0?this.head:this.curr,n=this.indexMask;if(t>=e?e+=n:e--,e==t){if(this.head<0)throw new Error("F_CSSTOK_INTERNAL");this.reallocate(),t=this.tail,e=n=this.indexMask}for(var i=Xn,r=this.input,o=this.position,a=this.buffer,s=Ln.EOF,l=0,u="",c=0,h=!1,f=a[t],d=-9;;){var p=r.charCodeAt(o);switch(i[p]||i[65]){case Hn.INVALID:s=Ln.INVALID,u=isNaN(p)?"E_CSS_UNEXPECTED_EOF":"E_CSS_UNEXPECTED_CHAR",i=Xn,o++;break;case Hn.SPACE:o++,h=!0;continue;case Hn.INT:l=o++,i=$n;continue;case Hn.IDENT:s=Ln.IDENT,l=o++,i=jn;continue;case Hn.BANG:l=o++,s=Ln.BANG,i=Jn;continue;case Hn.STR1:s=Ln.STR,l=++o,i=hi;continue;case Hn.STR2:s=Ln.STR,l=++o,i=fi;continue;case Hn.HASH:l=++o,s=Ln.HASH,i=jn;continue;case Hn.DOLLAR:l=o++,s=Ln.DOLLAR,i=Jn;continue;case Hn.PERCENT:l=o++,s=Ln.PERCENT;break;case Hn.AMP:l=o++,s=Ln.DOLLAR,i=ni;continue;case Hn.O_PAR:l=o++,s=Ln.O_PAR;break;case Hn.C_PAR:l=o++,s=Ln.C_PAR;break;case Hn.STAR:l=o++,s=Ln.STAR,i=Jn;continue;case Hn.PLUS:l=o++,s=Ln.PLUS;break;case Hn.COMMA:l=o++,s=Ln.COMMA;break;case Hn.MINUS:s=Ln.MINUS,l=o++,i=Yn;continue;case Hn.DOT:l=o++,i=Kn;continue;case Hn.TOCLASS:l=o++,s=Ln.CLASS,i=jn;continue;case Hn.SLASH:l=o++,s=Ln.SLASH,i=ii;continue;case Hn.COLON:l=o++,s=Ln.COLON,i=ti;continue;case Hn.COL_COL:o++,s=Ln.COL_COL;break;case Hn.SEMICOL:l=o++,s=Ln.SEMICOL;break;case Hn.LT:l=o++,s=Ln.LT,i=si;continue;case Hn.EQ:l=o++,s=Ln.EQ,i=Jn;continue;case Hn.GT:l=o++,s=Ln.GT,i=Jn;continue;case Hn.QMARK:l=o++,s=Ln.QMARK;break;case Hn.AT:l=++o,s=Ln.AT,i=jn;continue;case Hn.O_BRK:l=o++,s=Ln.O_BRK;break;case Hn.C_BRK:l=o++,s=Ln.C_BRK;break;case Hn.O_BRC:l=o++,s=Ln.O_BRC;break;case Hn.C_BRC:l=o++,s=Ln.C_BRC;break;case Hn.BSLASH:d=l=o++,s=Ln.IDENT,i=ci;continue;case Hn.HAT:l=o++,s=Ln.HAT,i=Jn;continue;case Hn.BAR:l=o++,s=Ln.BAR,i=ei;continue;case Hn.TILDE:l=o++,s=Ln.TILDE,i=Jn;continue;case Hn.END:break;case Hn.EQTAIL:o++,s=s+Ln.BANG_EQ-Ln.BANG;break;case Hn.ENDINT:s=Ln.INT,c=parseInt(r.substring(l,o),10);break;case Hn.ENDNUM:s=Ln.NUM,c=parseFloat(r.substring(l,o));break;case Hn.CONT:o++;continue;case Hn.UNIT:s=Ln.NUMERIC,c=parseFloat(r.substring(l,o)),l=o++,i=jn;continue;case Hn.PCUNIT:s=Ln.NUMERIC,c=parseFloat(r.substring(l,o)),u="%",l=o++;break;case Hn.NUMBER:o++,i=Zn;continue;case Hn.ENDIDNT:u=r.substring(l,o);break;case Hn.IDNTESC:d=o++,i=ci;continue;case Hn.ENDIDES:u=Vn(r.substring(l,o));break;case Hn.ENDSTR:u=r.substring(l,o),o++;break;case Hn.ENDESTR:u=Vn(r.substring(l,o)),o++;break;case Hn.STR1ESC:d=o,o+=2,i=di;continue;case Hn.STR2ESC:d=o,o+=2,i=pi;continue;case Hn.BAR_BAR:o++,s=Ln.BAR_BAR;break;case Hn.AMP_AMP:o++,s=Ln.AMP_AMP;break;case Hn.FUNC:if(u=r.substring(l,o),s==Ln.IDENT){if(o++,"url"==u.toLowerCase()){i=gi;continue}s=Ln.FUNC}break;case Hn.FUNCES:if(u=Vn(r.substring(l,o)),s==Ln.IDENT){if(o++,"url"==u.toLowerCase()){i=gi;continue}s=Ln.FUNC}break;case Hn.COMMENT:i=ri,o++;continue;case Hn.COMMST:i=oi,o++;continue;case Hn.ENDNOTK:i=Xn,o++;continue;case Hn.MINMIN:i=ai,o++;continue;case Hn.TOINT:s=Ln.INT,i=$n,o++;continue;case Hn.TONUM:s=Ln.NUM,i=Zn,o++;continue;case Hn.TOIDENT:s=Ln.IDENT,i=jn,o++;continue;case Hn.TOIDES:s=Ln.IDENT,i=ci,d=o++;continue;case Hn.KILL1:o--;break;case Hn.KILL2:o-=2;break;case Hn.URL:l=o++,i=mi;continue;case Hn.URL1:l=++o,i=vi;continue;case Hn.URL2:l=++o,i=bi;continue;case Hn.ENDURL:s=Ln.URL,u=Vn(r.substring(l,o)),o++;break;case Hn.FINURL:o++;break;case Hn.LT_BG:i=li,o++;continue;case Hn.LT_BG_M:i=ui,o++;continue;case Hn.CHKSP:if(o-d<8&&r.substring(d+1,o+1).match(/^[0-9a-fA-F]{0,6}(\r\n|[\n\r])|[ \t]$/)){o++;continue}case Hn.TERMURL:s=Ln.URL,u=Vn(r.substring(l,o)),o++,i=yi;continue;case Hn.CHKPOSN:if(++o-d<9&&r.substring(d+1,o).match(/^[0-9a-fA-F]{0,6}(\r\n|[\n\r])$/))continue;s=Ln.INVALID,u="E_CSS_UNEXPECTED_NEWLINE",i=Xn;break;case Hn.CHKPOSS:if(o-d<9&&r.substring(d+1,o+1).match(/^[0-9a-fA-F]{0,6}[ \t]$/)){o++;continue}u=Vn(r.substring(l,o));break;case Hn.URLESC:d=o++;continue;case Hn.IDESCH:o++,i=qn;continue;default:if(i!==Xn){s=Ln.INVALID,u="E_CSS_UNEXPECTED_STATE";break}l=o,s=Ln.EOF}if(f.type=s,f.precededBySpace=h,f.num=c,f.text=u,f.position=l,++t>=e)break;i=Xn,h=!1,f=a[t&n]}this.position=o,this.tail=t&n},t}(),Ei=null,Si=null;function Ni(){return Ei}function Ci(t){if(!Ei)throw new Error("E_TASK_NO_CONTEXT");Ei.name||(Ei.name=t);var e=Ei,n=new Li(e,e.top,t);return e.top=n,n.state=Qn.ACTIVE,n}function Ti(t){return new Ri(t)}function xi(t,e,n){var i=Ci(t);i.handler=n;try{e(i)}catch(t){i.task.raise(t,i)}return i.result()}!function(t){t[t.INIT=0]="INIT",t[t.ACTIVE=1]="ACTIVE",t[t.FINISHED=2]="FINISHED",t[t.DEAD=3]="DEAD"}(Qn||(Qn={}));var Ii=function(){function t(){}var e=t.prototype;return e.currentTime=function(){return(new Date).valueOf()},e.setTimeout=function(t){function e(e,n){return t.apply(this,arguments)}return e.toString=function(){return t.toString()},e}((function(t,e){return setTimeout(t,e)})),e.clearTimeout=function(t){function e(e){return t.apply(this,arguments)}return e.toString=function(){return t.toString()},e}((function(t){clearTimeout(t)})),t}(),Pi=function(){function t(t){this.timer=t,this.timeout=1,this.slice=25,this.sliceOverTime=0,this.wakeupTime=null,this.timeoutToken=null,this.inTimeSlice=!1,this.order=0,this.queue=new q,Si||(Si=this)}var e=t.prototype;return e.setSlice=function(t){this.slice=t},e.setTimeout=function(t){this.timeout=t},e.isTimeSliceOver=function(){return this.timer.currentTime()>=this.sliceOverTime},e.arm=function(){if(!this.inTimeSlice){var t=this.queue.peek().scheduledTime,e=this.timer.currentTime();if(null!=this.timeoutToken){if(e+this.timeout>this.wakeupTime)return;this.timer.clearTimeout(this.timeoutToken)}var n=t-e;n<=this.timeout&&(n=this.timeout),this.wakeupTime=e+n;var i=this;this.timeoutToken=this.timer.setTimeout((function(){i.timeoutToken=null,i.doTimeSlice()}),n)}},e.schedule=function(t,e){var n=t,i=this.timer.currentTime();n.order=this.order++,n.scheduledTime=i+(e||0),this.queue.add(n),this.arm()},e.doTimeSlice=function(){null!=this.timeoutToken&&(this.timer.clearTimeout(this.timeoutToken),this.timeoutToken=null),this.inTimeSlice=!0;try{var t=this.timer.currentTime();for(this.sliceOverTime=t+this.slice;this.queue.length();){var e=this.queue.peek();if(e.scheduledTime>t)break;if(this.queue.remove(),e.canceled||e.resumeInternal(),(t=this.timer.currentTime())>=this.sliceOverTime)break}}catch(t){f.error(t)}this.inTimeSlice=!1,this.queue.length()&&this.arm()},e.run=function(t,e){var n=new Oi(this,e||"");n.top=new Li(n,null,"bootstrap"),n.top.state=Qn.ACTIVE,n.top.then((function(){var e=function(){n.running=!1;for(var t,e=B(n.callbacks);!(t=e()).done;){var i=t.value;try{i()}catch(t){f.error(t)}}};try{t().then((function(t){n.result=t,e()}))}catch(t){n.raise(t),e()}}));var i=Ei;return Ei=n,this.schedule(n.top.suspend("bootstrap")),Ei=i,n},t}(),Ai=function(){function t(t){this.task=t,this.scheduledTime=0,this.order=0,this.result=null,this.canceled=!1}var e=t.prototype;return e.compare=function(t){return t.scheduledTime-this.scheduledTime||t.order-this.order},e.getTask=function(){return this.task},e.schedule=function(t,e){this.result=t,this.task.scheduler.schedule(this,e)},e.resumeInternal=function(){var t=this.task;if(this.task=null,t&&t.continuation==this){t.continuation=null;var e=Ei;return Ei=t,t.top.finish(this.result),Ei=e,!0}return!1},e.cancel=function(){this.canceled=!0},t}(),Oi=function(){function t(t,e){this.scheduler=t,this.name=e,this.callbacks=[],this.exception=null,this.running=!0,this.result=null,this.waitTarget=null,this.top=null,this.continuation=null}var e=t.prototype;return e.getName=function(){return this.name},e.interrupt=function(t){if(this.raise(t||new Error("E_TASK_INTERRUPT")),this!==Ei&&this.continuation){this.continuation.cancel();var e=new Ai(this);this.waitTarget="interrupt",this.continuation=e,this.scheduler.schedule(e)}},e.getScheduler=function(){return this.scheduler},e.isRunning=function(){return this.running},e.whenDone=function(t){this.callbacks.push(t)},e.join=function(){var t=Ci("Task.join");if(this.running){var e=t.suspend(this),n=this;this.whenDone((function(){e.schedule(n.result)}))}else t.finish(this.result);return t.result()},e.unwind=function(){for(;this.top&&!this.top.handler;)this.top=this.top.parent;if(this.top&&this.top.handler&&this.exception){var t=this.exception;this.exception=null,this.top.handler(this.top,t)}else this.exception&&f.error(this.exception,"Unhandled exception in task",this.name)},e.raise=function(t,e){if(this.fillStack(t),e){for(var n=this.top;n&&n!=e;)n=n.parent;n==e&&(this.top=n)}this.exception=t,this.unwind()},e.fillStack=function(t){var e=t.frameTrace;if(!e){e=t.stack?t.stack+"\n\t---- async ---\n":"";for(var n=this.top;n;n=n.parent)e+="\t",e+=n.getName(),e+="\n";t.frameTrace=e}},t}(),Ri=function(){function t(t){this.value=t}var e=t.prototype;return e.then=function(t){t(this.value)},e.thenAsync=function(t){return t(this.value)},e.thenReturn=function(e){return new t(e)},e.thenFinish=function(t){t.finish(this.value)},e.isPending=function(){return!1},e.get=function(){return this.value},t}(),ki=function(){function t(t){this.frame=t}var e=t.prototype;return e.then=function(t){this.frame.then(t)},e.thenAsync=function(t){if(this.isPending()){var e=new Li(this.frame.task,this.frame.parent,"AsyncResult.thenAsync");return e.state=Qn.ACTIVE,this.frame.parent=e,this.frame.then((function(n){t(n).then((function(t){e.finish(t)}))})),e.result()}return t(this.frame.res)},e.thenReturn=function(t){return this.isPending()?this.thenAsync((function(){return new Ri(t)})):new Ri(t)},e.thenFinish=function(t){this.isPending()?this.then((function(e){t.finish(e)})):t.finish(this.frame.res)},e.isPending=function(){return this.frame.state==Qn.ACTIVE},e.get=function(){if(this.isPending())throw new Error("Result is pending");return this.frame.res},t}(),Li=function(){function t(t,e,n){this.task=t,this.parent=e,this.name=n,this.res=null,this.callback=null,this.handler=null,this.state=Qn.INIT}var e=t.prototype;return e.checkEnvironment=function(){if(!Ei)throw new Error("F_TASK_NO_CONTEXT");if(this!==Ei.top)throw new Error("F_TASK_NOT_TOP_FRAME")},e.result=function(){return new ki(this)},e.finish=function(t){this.checkEnvironment(),Ei&&!Ei.exception&&(this.res=t),this.state=Qn.FINISHED;var e=this.parent;if(Ei&&(Ei.top=e),this.callback){try{this.callback(t)}catch(t){this.task.raise(t,e)}this.state=Qn.DEAD}},e.getTask=function(){return this.task},e.getName=function(){return this.name},e.getScheduler=function(){return this.task.scheduler},e.then=function(t){switch(this.state){case Qn.ACTIVE:if(this.callback)throw new Error("F_TASK_FRAME_ALREADY_HAS_CALLBACK");this.callback=t;break;case Qn.FINISHED:var e=this.task,n=this.parent;try{t(this.res),this.state=Qn.DEAD}catch(t){this.state=Qn.DEAD,e.raise(t,n)}break;case Qn.DEAD:throw new Error("F_TASK_DEAD_FRAME");default:throw new Error("F_TASK_UNEXPECTED_FRAME_STATE "+this.state)}},e.timeSlice=function(){var t=Ci("Frame.timeSlice");return t.getScheduler().isTimeSliceOver()?(f.debug("-- time slice --"),t.suspend().schedule(!0)):t.finish(!0),t.result()},e.sleep=function(t){var e=Ci("Frame.sleep");return e.suspend().schedule(!0,t),e.result()},e.loop=function(t){var e=Ci("Frame.loop");return function n(i){try{for(;i;){var r=t();if(r.isPending())return void r.then(n);r.then((function(t){i=t}))}e.finish(!0)}catch(t){e.task.raise(t,e)}}(!0),e.result()},e.loopWithFrame=function(t){var e=Ei;if(!e)throw new Error("E_TASK_NO_CONTEXT");return this.loop((function(){var n;do{var i=new Fi(e,e.top);e.top=i,i.state=Qn.ACTIVE,t(i),n=i.result()}while(!n.isPending()&&n.get());return n}))},e.suspend=function(t){if(this.checkEnvironment(),this.task.continuation)throw new Error("E_TASK_ALREADY_SUSPENDED");var e=new Ai(this.task);return this.task.continuation=e,Ei=null,this.task.waitTarget=t||null,e},t}(),Fi=function(t){function e(e,n){return t.call(this,e,n,"loop")||this}A(e,t);var n=e.prototype;return n.continueLoop=function(){this.finish(!0)},n.breakLoop=function(){this.finish(!1)},e}(Li),_i=function(){function t(t,e){this.fetch=t,this.arrived=!1,this.resource=null,this.task=null,this.piggybacks=[],this.name=e}var e=t.prototype;return e.start=function(){if(!this.task){var t=this;this.task=Ni().getScheduler().run((function(){var e=Ci("Fetcher.run");return t.fetch().then((function(n){var i=t.piggybacks;if(t.arrived=!0,t.resource=n,t.task=null,t.piggybacks=[],i)for(var r=0;r<i.length;r++)try{i[r](n)}catch(t){f.error(t,"Error:")}e.finish(n)})),e.result()}),this.name)}},e.piggyback=function(t){this.arrived?t(this.resource):this.piggybacks.push(t)},e.get=function(){return this.arrived?Ti(this.resource):(this.start(),this.task.join())},e.hasArrived=function(){return this.arrived},t}(),Di=function(t){if(0==t.length)return Ti(!0);if(1==t.length)return t[0].get().thenReturn(!0);var e=Ci("waitForFetches"),n=0;return e.loop((function(){for(;n<t.length;){var e=t[n++];if(!e.hasArrived())return e.get().thenReturn(!0)}return Ti(!1)})).then((function(){e.finish(!0)})),e.result()};function Bi(t,e){var n=null,i=null;"img"==t.localName&&(n=t.getAttribute("width"),i=t.getAttribute("height"));var r=new _i((function(){var r=Ci("loadImage"),o=r.suspend(t),a=!1,s=function(e){a||(a=!0,"img"==t.localName&&(n||t.removeAttribute("width"),i||t.removeAttribute("height")),o.schedule(e?e.type:"timeout"))};return t.addEventListener("load",s,!1),t.addEventListener("error",s,!1),t.addEventListener("abort",s,!1),t.namespaceURI==G.SVG?(t.setAttributeNS(G.XLINK,"xlink:href",e),setTimeout(s,300)):t.src=e,r.result()}),"loadElement "+e);return r.start(),r}var Mi,Ui="\n/*\n * Copyright 2017 Trim-marks Inc.\n *\n * Vivliostyle.js is free software: you can redistribute it and/or modify\n * it under the terms of the GNU Affero General Public License as published by\n * the Free Software Foundation, either version 3 of the License, or\n * (at your option) any later version.\n *\n * Vivliostyle.js is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU Affero General Public License for more details.\n *\n * You should have received a copy of the GNU Affero General Public License\n * along with Vivliostyle.js.  If not, see <http://www.gnu.org/licenses/>.\n *\n */\n\n@media screen {\n\n    [data-vivliostyle-viewer-viewport] {\n        background: #AAAAAA;\n    }\n\n    [data-vivliostyle-page-container] {\n        background: white;\n    }\n\n    [data-vivliostyle-viewer-viewport] {\n        display: -webkit-flex;\n        display: flex;\n        overflow: auto;\n        position: relative;\n    }\n\n    [data-vivliostyle-outer-zoom-box] {\n        margin: auto;\n        overflow: hidden;\n        -webkit-flex: none;\n        flex: none;\n    }\n\n    [data-vivliostyle-viewer-viewport] [data-vivliostyle-spread-container] {\n        display: -webkit-flex;\n        display: flex;\n        -webkit-flex: none;\n        flex: none;\n        -webkit-justify-content: center;\n        justify-content: center;\n        -moz-transform-origin: left top;\n        -ms-transform-origin: left top;\n        -webkit-transform-origin: left top;\n        transform-origin: left top;\n    }\n\n    [data-vivliostyle-viewer-viewport][data-vivliostyle-page-progression=ltr] [data-vivliostyle-spread-container] {\n        -webkit-flex-direction: row;\n        flex-direction: row;\n    }\n\n    [data-vivliostyle-viewer-viewport][data-vivliostyle-page-progression=rtl] [data-vivliostyle-spread-container] {\n        -webkit-flex-direction: row-reverse;\n        flex-direction: row-reverse;\n    }\n\n    [data-vivliostyle-viewer-viewport] [data-vivliostyle-page-container] {\n        margin: 0 auto;\n        -webkit-flex: none;\n        flex: none;\n        transform-origin: center top;\n    }\n\n    [data-vivliostyle-viewer-viewport][data-vivliostyle-spread-view=true] [data-vivliostyle-page-container][data-vivliostyle-page-side=left] {\n        margin-right: 1px;\n        transform-origin: right top;\n    }\n\n    [data-vivliostyle-viewer-viewport][data-vivliostyle-spread-view=true] [data-vivliostyle-page-container][data-vivliostyle-page-side=right] {\n        margin-left: 1px;\n        transform-origin: left top;\n    }\n\n    [data-vivliostyle-viewer-viewport][data-vivliostyle-spread-view=true] [data-vivliostyle-page-container][data-vivliostyle-unpaired-page=true] {\n        margin-left: auto;\n        margin-right: auto;\n        transform-origin: center top;\n    }\n\n}\n",zi="\n/*\n * Copyright 2015 Trim-marks Inc.\n * Copyright 2019 Vivliostyle Foundation\n *\n * Vivliostyle.js is free software: you can redistribute it and/or modify\n * it under the terms of the GNU Affero General Public License as published by\n * the Free Software Foundation, either version 3 of the License, or\n * (at your option) any later version.\n *\n * Vivliostyle.js is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU Affero General Public License for more details.\n *\n * You should have received a copy of the GNU Affero General Public License\n * along with Vivliostyle.js.  If not, see <http://www.gnu.org/licenses/>.\n *\n */\n\n[data-vivliostyle-layout-box] {\n    position: absolute;\n    left: 0;\n    top: 0;\n    right: 0;\n    bottom: 0;\n    overflow: hidden;\n    z-index: -1;\n}\n\n[data-vivliostyle-debug] [data-vivliostyle-layout-box] {\n    right: auto;\n    bottom: auto;\n    overflow: visible;\n    z-index: auto;\n}\n\n[data-vivliostyle-page-container] {\n    position: relative;\n    overflow: hidden;\n}\n\n[data-vivliostyle-bleed-box] {\n    position: absolute;\n    overflow: hidden;\n    max-width: 100%;\n    max-height: 100%;\n    box-sizing: border-box;\n}\n\n[data-vivliostyle-page-box] ~ [data-vivliostyle-page-box] {\n    display: none;\n}\n\n[data-vivliostyle-toc-box] {\n    position: absolute;\n    left: 3px;\n    top: 3px;\n    overflow: scroll;\n    overflow-x: hidden;\n    background: rgba(248,248,248,0.9);\n    border-radius: 2px;\n    box-shadow: 1px 1px 2px rgba(0,0,0,0.4);\n}\n\n@media print {\n    [data-vivliostyle-toc-box] {\n        display: none;\n    }\n\n    [data-vivliostyle-outer-zoom-box], [data-vivliostyle-spread-container] {\n        width: 100% !important;\n        height: 100% !important;\n    }\n\n    [data-vivliostyle-spread-container], [data-vivliostyle-page-container] {\n        -moz-transform: none !important;\n        -ms-transform: none !important;\n        -webkit-transform: none !important;\n        transform: none !important;\n    }\n\n    [data-vivliostyle-page-container] {\n        display: block !important;\n        max-width: 100%;\n        height: 100% !important;\n        max-height: 100%;\n    }\n\n    /* Workaround for Chrome printing problem */\n    /* [data-vivliostyle-page-box] {\n        padding-bottom: 0 !important;\n        overflow: visible !important;\n    } */\n    [data-vivliostyle-bleed-box] > div > div::before {\n        display: block;\n        content: \"\";\n        padding-top: 0.015625px;\n        margin-bottom: -0.015625px;\n    }\n\n    /* Gecko-only hack, see https://bugzilla.mozilla.org/show_bug.cgi?id=267029#c17 */\n    @-moz-document regexp('.*') {\n        [data-vivliostyle-page-container]:nth-last-child(n+2) {\n            top: -1px;\n            margin-top: 1px;\n            margin-bottom: -1px;\n        }\n    }\n}\n",Vi="\n/*\n * Copyright 2013 Google, Inc.\n * Copyright 2015 Trim-marks Inc.\n * Copyright 2019 Vivliostyle Foundation\n *\n * CSS property validation.\n */\nNUM = POS_NUM | ZERO | NEGATIVE;\nNNEG_NUM = POS_NUM | ZERO;\nINT = POS_INT | ZERO | NEGATIVE;\nNNEG_INT = POS_INT | ZERO;\nPERCENTAGE = POS_PERCENTAGE | ZERO | NEGATIVE;\nSTRICT_PERCENTAGE = POS_PERCENTAGE | ZERO_PERCENTAGE | NEGATIVE;\nNNEG_PERCENTAGE = POS_PERCENTAGE | ZERO;\nLENGTH = POS_LENGTH | ZERO | NEGATIVE;\nNNEG_LENGTH = POS_LENGTH | ZERO | NEGATIVE;\nPLENGTH = LENGTH | PERCENTAGE;\nPPLENGTH = POS_LENGTH | ZERO | POS_PERCENTAGE;\nALENGTH = LENGTH | auto;\nAPLENGTH = PLENGTH | auto;\nPAPLENGTH = PPLENGTH | auto;\nANGLE = POS_ANGLE | ZERO | NEGATIVE;\nLENGTH_OR_NUM = LENGTH | NUM;\nANGLE_OR_NUM = ANGLE | NUM;\nSCOLOR = HASHCOLOR | aliceblue: #F0F8FF | antiquewhite: #FAEBD7 | aqua: #00FFFF | aquamarine: #7FFFD4 | azure: #F0FFFF |\n    beige: #F5F5DC | bisque: #FFE4C4 | black: #000000 | blanchedalmond: #FFEBCD | blue: #0000FF | blueviolet: #8A2BE2 | brown: #A52A2A |\n    burlywood: #DEB887 | cadetblue: #5F9EA0 | chartreuse: #7FFF00 | chocolate: #D2691E | coral: #FF7F50 | cornflowerblue: #6495ED |\n    cornsilk: #FFF8DC | crimson: #DC143C | cyan: #00FFFF | darkblue: #00008B | darkcyan: #008B8B | darkgoldenrod: #B8860B |\n    darkgray: #A9A9A9 | darkgreen: #006400 | darkgrey: #A9A9A9 | darkkhaki: #BDB76B | darkmagenta: #8B008B | darkolivegreen: #556B2F |\n    darkorange: #FF8C00 | darkorchid: #9932CC | darkred: #8B0000 | darksalmon: #E9967A | darkseagreen: #8FBC8F | darkslateblue: #483D8B |\n    darkslategray: #2F4F4F | darkslategrey: #2F4F4F | darkturquoise: #00CED1 | darkviolet: #9400D3 | deeppink: #FF1493 |\n    deepskyblue: #00BFFF | dimgray: #696969 | dimgrey: #696969 | dodgerblue: #1E90FF | firebrick: #B22222 | floralwhite: #FFFAF0 |\n    forestgreen: #228B22 | fuchsia: #FF00FF | gainsboro: #DCDCDC | ghostwhite: #F8F8FF | gold: #FFD700 | goldenrod: #DAA520 |\n    gray: #808080 | green: #008000 | greenyellow: #ADFF2F | grey: #808080 | honeydew: #F0FFF0 | hotpink: #FF69B4 | indianred: #CD5C5C |\n    indigo: #4B0082 | ivory: #FFFFF0 | khaki: #F0E68C | lavender: #E6E6FA | lavenderblush: #FFF0F5 | lawngreen: #7CFC00 |\n    lemonchiffon: #FFFACD | lightblue: #ADD8E6 | lightcoral: #F08080 | lightcyan: #E0FFFF | lightgoldenrodyellow: #FAFAD2 |\n    lightgray: #D3D3D3 | lightgreen: #90EE90 | lightgrey: #D3D3D3 | lightpink: #FFB6C1 | lightsalmon: #FFA07A | lightseagreen: #20B2AA |\n    lightskyblue: #87CEFA | lightslategray: #778899 | lightslategrey: #778899 | lightsteelblue: #B0C4DE | lightyellow: #FFFFE0 |\n    lime: #00FF00 | limegreen: #32CD32 | linen: #FAF0E6 | magenta: #FF00FF | maroon: #800000 | mediumaquamarine: #66CDAA |\n    mediumblue: #0000CD | mediumorchid: #BA55D3 | mediumpurple: #9370DB | mediumseagreen: #3CB371 | mediumslateblue: #7B68EE |\n    mediumspringgreen: #00FA9A | mediumturquoise: #48D1CC | mediumvioletred: #C71585 | midnightblue: #191970 | mintcream: #F5FFFA |\n    mistyrose: #FFE4E1 | moccasin: #FFE4B5 | navajowhite: #FFDEAD | navy: #000080 | oldlace: #FDF5E6 | olive: #808000 |\n    olivedrab: #6B8E23 | orange: #FFA500 | orangered: #FF4500 | orchid: #DA70D6 | palegoldenrod: #EEE8AA | palegreen: #98FB98 |\n    paleturquoise: #AFEEEE | palevioletred: #DB7093 | papayawhip: #FFEFD5 | peachpuff: #FFDAB9 | peru: #CD853F | pink: #FFC0CB |\n    plum: #DDA0DD | powderblue: #B0E0E6 | purple: #800080 | rebeccapurple: #663399 | red: #FF0000 | rosybrown: #BC8F8F | royalblue: #4169E1 |\n    saddlebrown: #8B4513 | salmon: #FA8072 | sandybrown: #F4A460 | seagreen: #2E8B57 | seashell: #FFF5EE | sienna: #A0522D |\n    silver: #C0C0C0 | skyblue: #87CEEB | slateblue: #6A5ACD | slategray: #708090 | slategrey: #708090 | snow: #FFFAFA |\n    springgreen: #00FF7F | steelblue: #4682B4 | tan: #D2B48C | teal: #008080 | thistle: #D8BFD8 | tomato: #FF6347 |\n    turquoise: #40E0D0 | violet: #EE82EE | wheat: #F5DEB3 | white: #FFFFFF | whitesmoke: #F5F5F5 | yellow: #FFFF00 |\n    yellowgreen: #9ACD32 | transparent | currentcolor;\nRGBCOLOR = rgb(INT{3}) | rgb(STRICT_PERCENTAGE{3});\nRGBACOLOR = rgba(NUM{4}) | rgba(STRICT_PERCENTAGE{3} NUM);\nHSLCOLOR = hsl(NUM PERCENTAGE{2});\nHSLACOLOR = hsl(NUM PERCENTAGE{2} NUM);\nCOLOR = SCOLOR | RGBCOLOR | RGBACOLOR | HSLCOLOR | HSLACOLOR;\nBG_POSITION_TERM = PLENGTH | left | center | right | top | bottom;\nSIDE_OR_CORNER =  [left | right] || [top | bottom];\nCOLOR_STOP = SPACE(COLOR [PERCENTAGE | LENGTH]?);\nLINEAR_GRADIENT = linear-gradient([ANGLE | SPACE(to SIDE_OR_CORNER)]? COLOR_STOP+) |\n                  repeating-linear-gradient([ANGLE | SPACE(to SIDE_OR_CORNER)]? COLOR_STOP+) |;\nGRADIENT_EXTENT = closest-corner | closest-side | farthest-corner | farthest-side;\nGRADIENT_POSITION = at BG_POSITION_TERM{1,4};\nGRADIENT_SHAPE = SPACE(circle LENGTH? GRADIENT_POSITION?) | SPACE(ellipse PLENGTH{2}? GRADIENT_POSITION?)| SPACE([circle | ellipse] GRADIENT_EXTENT? GRADIENT_POSITION?);\nRADIAL_GRADIENT = radial-gradient([GRADIENT_SHAPE | SPACE(GRADIENT_POSITION)]? COLOR_STOP+) |\n                  repeating-radial-gradient([GRADIENT_SHAPE | SPACE(GRADIENT_POSITION)]? COLOR_STOP+);\nURI_OR_NONE = URI | none;\nIMAGE =  URI | LINEAR_GRADIENT | RADIAL_GRADIENT | none;\nazimuth = ANGLE | [[ left-side | far-left | left | center-left | center | center-right | right | far-right | right-side ] || behind ] | leftwards | rightwards;\nbackground-attachment = COMMA( [scroll | fixed | local]+ );\nbackground-color = COLOR;\nbackground-image = COMMA( IMAGE+ );\nbackground-position = COMMA( SPACE(BG_POSITION_TERM{1,4})+ ); /* relaxed */\nbackground-repeat = COMMA( [repeat | repeat-x | repeat-y | no-repeat]+ );\nborder-collapse = collapse | separate;\nBORDER_SIDE_COLOR = COLOR;\nBORDER_SIDE_STYLE = none | hidden | dotted | dashed | solid | double | groove | ridge | inset | outset;\nBORDER_SIDE_WIDTH = thin: 1px | medium: 3px | thick: 5px | NNEG_LENGTH;\nborder-spacing = LENGTH LENGTH?;\nborder-top-color = BORDER_SIDE_COLOR;\nborder-right-color = BORDER_SIDE_COLOR;\nborder-bottom-color = BORDER_SIDE_COLOR;\nborder-left-color = BORDER_SIDE_COLOR;\nborder-top-style = BORDER_SIDE_STYLE;\nborder-right-style = BORDER_SIDE_STYLE;\nborder-bottom-style = BORDER_SIDE_STYLE;\nborder-left-style = BORDER_SIDE_STYLE;\nborder-top-width = BORDER_SIDE_WIDTH;\nborder-right-width = BORDER_SIDE_WIDTH;\nborder-bottom-width = BORDER_SIDE_WIDTH;\nborder-left-width = BORDER_SIDE_WIDTH;\nBORDER_RADIUS = PLENGTH{1,2};\nborder-top-left-radius = BORDER_RADIUS;\nborder-top-right-radius = BORDER_RADIUS;\nborder-bottom-right-radius = BORDER_RADIUS;\nborder-bottom-left-radius = BORDER_RADIUS;\nborder-image-source = IMAGE;\nborder-image-slice = [NUM | PERCENTAGE]{1,4} || fill; /* relaxed */\nborder-image-width = [NUM | PLENGTH | auto]{1,4};\nborder-image-outset = [NUM | LENGTH]{1,4};\nborder-image-repeat = [ stretch | repeat | round | space ]{1,2};\nbottom = APLENGTH;\ncaption-side = top | bottom;\nclear = none | left | right | top | bottom | both | all | same;\nclip = rect(ALENGTH{4}) | rect(SPACE(ALENGTH{4})) | auto;\ncolor = COLOR;\nLIST_STYLE_TYPE = disc | circle | square | decimal | decimal-leading-zero | lower-roman |\n    upper-roman | lower-greek | lower-latin | upper-latin | armenian | georgian | lower-alpha |\n    upper-alpha | russian | upper-russian | lower-russian | cjk-ideographic | trad-chinese-informal |\n    hebrew | none;\nTYPE_OR_UNIT_IN_ATTR = string | color | url | integer | number | length | angle | time | frequency;\nATTR = attr(SPACE(IDENT TYPE_OR_UNIT_IN_ATTR?) [ STRING | IDENT | COLOR | INT | NUM | PLENGTH | ANGLE | POS_TIME | FREQUENCY]?);\nCONTENT = normal | none |\n    [ STRING | URI | counter(IDENT LIST_STYLE_TYPE?) |\n    counters(IDENT STRING LIST_STYLE_TYPE?) | ATTR |\n    target-counter([ STRING | URI ] IDENT LIST_STYLE_TYPE?) |\n    target-counter(ATTR IDENT LIST_STYLE_TYPE?) |\n    target-counters([ STRING | URI ] IDENT STRING LIST_STYLE_TYPE?) |\n    target-counters(ATTR IDENT STRING LIST_STYLE_TYPE?) |\n    open-quote | close-quote | no-open-quote | no-close-quote ]+;\ncontent = CONTENT;\nCOUNTER = [ IDENT INT? ]+ | none;\ncounter-increment = COUNTER;\ncounter-reset = COUNTER;\ncounter-set = COUNTER;\ncue-after = URI_OR_NONE;\ncue-before = URI_OR_NONE;\ncursor = COMMA(URI* [ auto | crosshair | default | pointer | move | e-resize | ne-resize | nw-resize |\n    n-resize | se-resize | sw-resize | s-resize | w-resize | text | wait | help | progress ]);\ndirection = ltr | rtl;\ndisplay = inline | block | list-item | inline-block | table | inline-table | table-row-group |\n    table-header-group | table-footer-group | table-row | table-column-group | table-column |\n    table-cell | table-caption | none | oeb-page-head | oeb-page-foot | flex | inline-flex |\n    ruby | ruby-base | ruby-text | ruby-base-container | ruby-text-container | run-in | compact | marker;\nelevation = ANGLE | below | level | above | higher | lower;\nempty-cells = show | hide;\nFAMILY = SPACE(IDENT+) | STRING;\nFAMILY_LIST = COMMA( FAMILY+ );\nfont-family = FAMILY_LIST;\nfont-size = xx-small | x-small | small | medium | large | x-large | xx-large | larger | smaller | PPLENGTH | POS_NUM;\nfont-style = normal | italic | oblique;\nfont-variant = normal | small-caps;\nfont-weight = normal | bold | bolder | lighter | 100 | 200 | 300 | 400 | 500 | 600 | 700 | 800 | 900;\nheight = PAPLENGTH | POS_NUM ;\nleft = APLENGTH;\nletter-spacing = normal | LENGTH_OR_NUM;\nline-height = normal | POS_NUM | PPLENGTH;\nlist-style-image = IMAGE;\nlist-style-position = inside | outside;\nlist-style-type = LIST_STYLE_TYPE;\nmargin-right = APLENGTH;\nmargin-left = APLENGTH;\nmargin-top = APLENGTH;\nmargin-bottom = APLENGTH;\nNPLENGTH = none | PLENGTH;\nmax-height = NPLENGTH;\nmax-width = NPLENGTH;\nmin-height = auto | PLENGTH;\nmin-width = auto | PLENGTH;\norphans = POS_INT;\noutline-offset = LENGTH;\noutline-color = COLOR | invert;\noutline-style = BORDER_SIDE_STYLE;\noutline-width = BORDER_SIDE_WIDTH;\noverflow = visible | hidden | scroll | auto;\npadding-right = PPLENGTH;\npadding-left = PPLENGTH;\npadding-top = PPLENGTH;\npadding-bottom = PPLENGTH;\nPAGE_BREAK = auto | always | avoid | left | right | recto | verso;\npage-break-after = PAGE_BREAK;\npage-break-before = PAGE_BREAK;\npage-break-inside = avoid | auto;\nPAUSE = POS_TIME | ZERO | POS_PERCENTAGE;\npause-after = PAUSE;\npause-before = PAUSE;\npitch-range = NUM;\npitch = FREQUENCY | x-low | low | medium | high | x-high;\nplay-during = [URI [ mix || repeat ]?] | auto | none;\nposition = static | relative | absolute | fixed;\nquotes = [STRING STRING]+ | none;\nrichness = NUM;\nright = APLENGTH;\nspeak-header = once | always;\nspeak-numeral = digits | continuous;\nspeak-punctuation = code | none;\nspeech-rate = NUM | x-slow | slow | medium | fast | x-fast | faster | slower;\nstress = NUM;\ntable-layout = auto | fixed;\ntext-align = left | right | center | justify | start | end;\ntext-decoration = none | [ underline || overline || line-through || blink ];\ntext-indent = PLENGTH;\ntext-transform = capitalize | uppercase | lowercase | none;\ntop = APLENGTH;\nvertical-align = baseline | sub | super | top | text-top | middle | bottom | text-bottom | PLENGTH;\nvisibility = visible | hidden | collapse;\nvoice-family = FAMILY_LIST;\nvolume = NUM | PERCENTAGE | silent | x-soft | soft | medium | loud | x-loud;\nwhite-space = normal | pre | nowrap | pre-wrap | pre-line;\nwidows = POS_INT;\nwidth = PAPLENGTH | POS_NUM ;\nword-spacing = normal | LENGTH_OR_NUM;\nz-index = auto | INT;\n\n[epub,moz,ms,webkit]hyphens = auto | manual | none;\n[webkit]hyphenate-character = auto | STRING;\n\n/* css-logical */\nmargin-block-start = APLENGTH;\nmargin-block-end = APLENGTH;\nmargin-inline-start = APLENGTH;\nmargin-inline-end = APLENGTH;\npadding-block-start = APLENGTH;\npadding-block-end = APLENGTH;\npadding-inline-start = APLENGTH;\npadding-inline-end = APLENGTH;\nborder-block-start-color = BORDER_SIDE_COLOR;\nborder-block-end-color = BORDER_SIDE_COLOR;\nborder-inline-start-color = BORDER_SIDE_COLOR;\nborder-inline-end-color = BORDER_SIDE_COLOR;\nborder-block-start-style = BORDER_SIDE_STYLE;\nborder-block-end-style = BORDER_SIDE_STYLE;\nborder-inline-start-style = BORDER_SIDE_STYLE;\nborder-inline-end-style = BORDER_SIDE_STYLE;\nborder-block-start-width = BORDER_SIDE_WIDTH;\nborder-block-end-width = BORDER_SIDE_WIDTH;\nborder-inline-start-width = BORDER_SIDE_WIDTH;\nborder-inline-end-width = BORDER_SIDE_WIDTH;\nblock-start = APLENGTH;\nblock-end = APLENGTH;\ninline-start = APLENGTH;\ninline-end = APLENGTH;\nblock-size = PAPLENGTH | POS_NUM;\ninline-size = PAPLENGTH | POS_NUM;\nmax-block-size = NPLENGTH;\nmax-inline-size = NPLENGTH;\nmin-block-size = auto | PLENGTH;\nmin-inline-size = auto | PLENGTH;\n\nSHAPE = auto | rectangle( PLENGTH{4} ) |  ellipse( PLENGTH{4} ) |  circle( PLENGTH{3} ) |\n    polygon( SPACE(PLENGTH+)+ );\n[epubx]shape-inside = SHAPE;\n[epubx,webkit]shape-outside = SHAPE;\n[epubx,ms]wrap-flow = auto | both | start | end | maximum | clear | around /* epub al */;\n\nTRANSFORM_FUNCTION = matrix(NUM{6}) | translate(PLENGTH{1,2}) | translateX(PLENGTH) | translateY(PLENGTH) |\n scale(NUM{1,2}) | scaleX(NUM) | scaleY(NUM) | rotate(ANGLE) | skewX(ANGLE) | skewY(ANGLE);\n[epub,ms]transform = none | TRANSFORM_FUNCTION+;\n[epub,ms]transform-origin = [[[ top | bottom | left | right] PLENGTH?] | center | PLENGTH]{1,2}; /* relaxed */\n\nBOX = border-box | padding-box | content-box;\nSHADOW = SPACE(inset || LENGTH{2,4} || COLOR); /* relaxed */\n[webkit]background-size = COMMA( SPACE( [PLENGTH | auto ]{1,2} | cover | contain)+ );\n[webkit]background-origin = COMMA( BOX+ );\n[webkit]background-clip = COMMA( BOX+ );\n[webkit]box-shadow = none | COMMA( SHADOW+ );\ntext-shadow = none |  COMMA( SHADOW+ );\n[webkit]box-decoration-break = slice | clone;\nFILTER_FUNCTION = blur(LENGTH) | brightness(NUM | PERCENTAGE) | contrast(NUM | PERCENTAGE) | drop-shadow(SPACE(LENGTH{2,3} COLOR?))\n                | grayscale(NUM | PERCENTAGE) | hue-rotate(ANGLE) | invert(NUM | PERCENTAGE) | opacity(NUM | PERCENTAGE)\n                | saturate(NUM | PERCENTAGE) | sepia(NUM | PERCENTAGE);\nFILTER_FUNCTION_LIST = FILTER_FUNCTION+;\n[webkit]filter = none | FILTER_FUNCTION_LIST;\n\nopacity = NUM;\n\n[moz,webkit]column-width = LENGTH | auto;\n[moz,webkit]column-count = INT | auto;\n[moz,webkit]column-gap = LENGTH | normal;\n[moz,webkit]column-rule-color = COLOR;\n[moz,webkit]column-rule-style = BORDER_SIDE_STYLE;\n[moz,webkit]column-rule-width = BORDER_SIDE_WIDTH;\nBREAK = auto | avoid | avoid-page | page | left | right | recto | verso | avoid-column | column | avoid-region | region;\nbreak-before = BREAK;\nbreak-after = BREAK;\nbreak-inside = auto | avoid | avoid-page | avoid-column | avoid-region;\n[webkit]column-span = none | auto | all;\n[moz]column-fill = auto | balance | balance-all;\n\nsrc = COMMA([SPACE(URI format(STRING+)?) | local(FAMILY)]+); /* for font-face */\n\n[epubx,webkit]flow-from = IDENT;\n[epubx,webkit]flow-into = IDENT;\n[epubx]flow-linger = INT | none;\n[epubx]flow-priority = INT;\n[epubx]flow-options = none | [ exclusive || last || static ];\n[epubx]page = INT | auto;\n[epubx]min-page-width = LENGTH;\n[epubx]min-page-height = LENGTH;\n[epubx]required = true | false;\n[epubx]enabled = true | false;\n[epubx]conflicting-partitions = COMMA(IDENT+);\n[epubx]required-partitions = COMMA(IDENT+);\n[epubx]snap-height = LENGTH | none;\n[epubx]snap-width = LENGTH | none;\n[epubx]flow-consume = all | some;\n[epubx]utilization = NUM;\n[epubx]text-zoom = font-size | scale;\n\n[adapt]template = URI_OR_NONE;\n[adapt]behavior = IDENT;\n\n/* CSS Fonts */\nfont-size-adjust = none | NNEG_NUM;\n[webkit]font-kerning = auto | normal | none;\nfont-variant-east-asian = normal | [[ jis78 | jis83 | jis90 | jis04 | simplified | traditional ] || [ full-width | proportional-width ] || ruby];\nfont-feature-settings = COMMA( SPACE( STRING [ on | off | INT ]? )+ );\nfont-stretch = normal | wider | narrower | ultra-condensed | extra-condensed | condensed | semi-condensed | semi-expanded | expanded | extra-expanded | ultra-expanded;\n\n/* CSS Images */\nimage-resolution = RESOLUTION;\nobject-fit = fill | contain | cover | none | scale-down;\nobject-position = COMMA( SPACE(BG_POSITION_TERM{1,4})+ ); /* relaxed */\n\n/* CSS Paged Media */\nPAGE_SIZE = a5 | a4 | a3 | b5 | b4 | jis-b5 | jis-b4 | letter | legal | ledger;\nbleed = auto | LENGTH;\nmarks = none | [ crop || cross ];\nsize = POS_LENGTH{1,2} | auto | [ PAGE_SIZE || [ portrait | landscape ] ];\n\n/* CSS Page Floats */\nfloat-reference = inline | column | region | page;\nfloat = block-start | block-end | inline-start | inline-end | snap-block | snap-inline | left | right | top | bottom | none | footnote;\nfloat-min-wrap-block = PPLENGTH;\n\n/* CSS Ruby */\nruby-align = start | center | space-between | space-around;\nruby-position = over | under | inter-character;\n\n/* CSS Size Adjust */\n[moz,ms]text-size-adjust = auto | none | POS_PERCENTAGE;\n\n/* CSS Text */\n[ms,webkit]line-break = auto | loose | normal | strict;\noverflow-wrap = normal | break-word;\n[moz]tab-size = NNEG_INT | NNEG_LENGTH;\n[moz,ms]text-align-last = auto | start | end | left | right | center | justify;\n[ms]text-justify = auto | none | inter-word | inter-character | inter-ideograph /* specified in UA stylesheet for IE */;\n[ms]word-break = normal | keep-all | break-all | break-word;\n[ms]word-wrap = normal | break-word;\n\n/* CSS Text Decoration */\n[webkit]text-decoration-color = COLOR;\n[webkit]text-decoration-line = none | [ underline || overline || line-through || blink ];\n[webkit]text-decoration-skip = none | [ objects || spaces || ink || edges || box-decoration ];\n[webkit]text-decoration-style = solid | double | dotted | dashed | wavy;\n[epub,webkit]text-emphasis-color = COLOR;\n[webkit]text-emphasis-position = [ over | under ] [ right | left ];\n[epub,webkit]text-emphasis-style = none | [[ filled | open ] || [ dot | circle | double-circle | triangle | sesame ]] | STRING;\n[ms,webkit]text-underline-position = auto | [ under || [ left | right ]];\n\n/* CSS Transforms */\n[ms,webkit]backface-visibility = visible | hidden;\n\n/* CSS UI */\nbox-sizing = content-box | padding-box | border-box;\n[ms]text-overflow = [clip | ellipsis | STRING]{1,2};\n\n/* CSS Writing Modes */\n[webkit]text-combine = none | horizontal;\n[epub,ms]text-combine-horizontal = none | all | [ digits POS_INT? ]; /* relaxed */\ntext-combine-upright = none | all | [ digits POS_INT? ]; /* relaxed */\n[epub,webkit]text-orientation = mixed | upright | sideways-right | sideways-left | sideways | use-glyph-orientation /* the following values are kept for backward-compatibility */ | vertical-right | rotate-right | rotate-left | rotate-normal | auto;\nunicode-bidi = normal | embed | isolate | bidi-override | isolate-override | plaintext;\n[epub,webkit]writing-mode = horizontal-tb | vertical-rl | lr-tb | rl-tb | tb-rl | lr | rl | tb;\n\n/* CSS Flex box */\nFLEX_BASIS = content | PAPLENGTH;\nflex-direction = row | row-reverse | column | column-reverse;\nflex-wrap = nowrap | wrap | wrap-reverse;\norder = INT;\nflex-grow = NNEG_NUM;\nflex-shrink = NNEG_NUM;\nflex-basis = FLEX_BASIS;\nflex = none | [ [ NNEG_NUM NNEG_NUM? ] || FLEX_BASIS ];\njustify-content = flex-start | flex-end | center | space-between | space-around;\nalign-items = flex-start | flex-end | center | baseline | stretch;\nalign-self = auto | flex-start | flex-end | center | baseline | stretch;\nalign-content = flex-start | flex-end | center | space-between | space-around | stretch;\n\n/* Pointer Events */\n[ms]touch-action = auto | none | [ pan-x || pan-y ] | manipulation;\n\n/* SVG 2 */\nOPACITY_VALUE = NUM | PERCENTAGE;\nDASH_ARRAY = COMMA( SPACE( [ LENGTH | PERCENTAGE | NUM ]+ )+ );\nPAINT = none | child | child(INT) | COLOR | SPACE( URI [none | COLOR]? ) | context-fill | context-stroke;\ncolor-interpolation = auto | sRGB | linearRGB;\ncolor-rendering = auto | optimizeSpeed | optimizeQuality;\nfill = PAINT;\nfill-opacity = OPACITY_VALUE;\nfill-rule = nonzero | evenodd;\nglyph-orientation-vertical = auto | NUM | ANGLE;\nimage-rendering = auto | optimizeSpeed | optimizeQuality | crisp-edges | pixelated;\nmarker-start = none | URI;\nmarker-mid = none | URI;\nmarker-end = none | URI;\npointer-events = bounding-box | visiblePainted | visibleFill | visibleStroke | visible | painted | fill | stroke | all | none;\npaint-order = normal | [ fill || stroke || markers ];\nshape-rendering = auto | optimizeSpeed | crispEdges | geometricPrecision;\nstop-color = COLOR;\nstop-opacity = OPACITY_VALUE;\nstroke = PAINT;\nstroke-dasharray = none | DASH_ARRAY;\nstroke-dashoffset = PERCENTAGE | LENGTH_OR_NUM;\nstroke-linecap = butt | round | square;\nstroke-linejoin = miter | round | bevel;\nstroke-miterlimit = NUM;\nstroke-opacity = OPACITY_VALUE;\nstroke-width = PERCENTAGE | LENGTH_OR_NUM;\ntext-anchor = start | middle | end;\ntext-rendering = auto | optimizeSpeed | optimizeLegibility | geometricPrecision;\nvector-effect = none | SPACE( [ non-scaling-stroke | non-scaling-size | non-rotation | fixed-position ]+ [ viewport | screen ]? );\n\n/* SVG 1.1 */\nalignment-baseline = auto | baseline | before-edge | text-before-edge | middle | central | after-edge | text-after-edge | ideographic | alphabetic | hanging | mathematical;\nbaseline-shift = baseline | sub | super | PERCENTAGE | LENGTH_OR_NUM;\ndominant-baseline = auto | use-script | no-change | reset-size | ideographic | alphabetic | hanging | mathematical | central | middle | text-after-edge | text-before-edge;\nmask = none | URI;\n\n/* css-masking-1 */\nSHAPE_RADIUS = PLENGTH | closest-side | farthest-side;\nFILL_RULE = nonzero | evenodd;\nSHAPE_BOX = BOX | margin-box;\nGEOMETRY_BOX = SHAPE_BOX | fill-box | stroke-box | view-box;\nBASIC_SHAPE =\n    inset( SPACE( PLENGTH{1,4} [ round PLENGTH{1,4} [ SLASH PLENGTH{1,4} ]? ]? ) )\n  | circle(  SPACE( [SHAPE_RADIUS]?    [at BG_POSITION_TERM{1,4}]? ) )\n  | ellipse( SPACE( SHAPE_RADIUS{2}? [at BG_POSITION_TERM{1,4}]? ) )\n  | polygon( FILL_RULE? COMMA( SPACE( PLENGTH{2} )+ )+ );\n[webkit]clip-path = none | URI | [ BASIC_SHAPE || GEOMETRY_BOX ];\nclip-rule = nonzero | evenodd;\n\n/* filters */\nflood-color = COLOR;\nflood-opacity = OPACITY_VALUE;\nlighting-color = COLOR;\n\n/* compositing-1 */\nBLEND_MODE = normal | multiply | screen | overlay | darken | lighten | color-dodge | color-burn | hard-light | soft-light | difference | exclusion | hue | saturation | color | luminosity;\nmix-blend-mode = BLEND_MODE;\nisolation = auto | isolate;\nbackground-blend-mode = COMMA( BLEND_MODE+ );\n\n/* CSS GCPM */\nfootnote-policy = auto | line;\n\n[viv]repeat-on-break = auto | none | header | footer;\n\nDEFAULTS\n\nbackground-attachment: scroll;\nbackground-color: transparent;\nbackground-image: none;\nbackground-repeat: repeat;\nbackground-position: 0% 0%;\nbackground-clip: border-box;\nbackground-origin: padding-box;\nbackground-size: auto;\nborder-top-color: currentColor;\nborder-right-color: currentColor;\nborder-bottom-color: currentColor;\nborder-left-color: currentColor;\nborder-top-style: none;\nborder-right-style: none;\nborder-bottom-style: none;\nborder-left-style: none;\nborder-top-width: 3px;\nborder-right-width: 3px;\nborder-bottom-width: 3px;\nborder-left-width: 3px;\nborder-top-left-radius: 0;\nborder-top-right-radius: 0;\nborder-bottom-right-radius: 0;\nborder-bottom-left-radius: 0;\nborder-image-source: none;\nborder-image-slice: 100%;\nborder-image-width: 1;\nborder-image-outset: 0;\nborder-image-repeat: stretch;\ncolumn-count: auto;\ncolumn-gap: normal;\ncolumn-width: auto;\ncolumn-rule-color: currentColor;\ncolumn-rule-style: none;\ncolumn-rule-width: 3px;\ncolumn-fill: balance;\noutline-color: currentColor;\noutline-style: none;\noutline-width: 3px;\nflex-direction: row;\nflex-wrap: nowrap;\nfont-family: serif;\nfont-style: normal;\nfont-size: medium;\nfont-variant: normal;\nfont-weight: normal;\nfont-stretch: normal;\nline-height: normal;\nlist-style-image: none;\nlist-style-position: outside;\nlist-style-type: disc;\nmargin-bottom: auto;\nmargin-left: auto;\nmargin-right: auto;\nmargin-top: auto;\npadding-bottom: auto;\npadding-left: auto;\npadding-right: auto;\npadding-top: auto;\ntext-emphasis-color: currentColor;\ntext-emphasis-style: none;\nmarker-start: none;\nmarker-mid: none;\nmarker-end: none;\n\n/* css-logical */\nborder-block-start-color: currentColor;\nborder-block-end-color: currentColor;\nborder-inline-start-color: currentColor;\nborder-inline-end-color: currentColor;\nborder-block-start-style: none;\nborder-block-end-style: none;\nborder-inline-start-style: none;\nborder-inline-end-style: none;\nborder-block-start-width: 3px;\nborder-block-end-width: 3px;\nborder-inline-start-width: 3px;\nborder-inline-end-width: 3px;\n\nSHORTHANDS\n\nbackground = COMMA background-image [background-position [ / background-size ]] background-repeat\n     background-attachment [background-origin background-clip] background-color; /* background-color is a special case, see the code */\nborder-top = border-top-width border-top-style border-top-color;\nborder-right = border-right-width border-right-style border-right-color;\nborder-bottom = border-bottom-width border-bottom-style border-bottom-color;\nborder-left = border-left-width border-left-style border-left-color;\nborder-width = INSETS border-top-width border-right-width border-bottom-width border-left-width;\nborder-style = INSETS border-top-style border-right-style border-bottom-style border-left-style;\nborder-color = INSETS border-top-color border-right-color border-bottom-color border-left-color;\nborder = border-width border-style border-color;\nborder-image = border-image-source border-image-slice [ / border-image-width [ / border-image-outset ] ]\n     border-image-repeat;\nborder-radius = INSETS_SLASH border-top-left-radius border-top-right-radius\n     border-bottom-right-radius border-bottom-left-radius;\n[moz,webkit]columns = column-width column-count;\n[moz,webkit]column-rule = column-rule-width column-rule-style column-rule-color;\nflex-flow = flex-direction flex-wrap;\noeb-column-number = column-count;\noutline = outline-width outline-style outline-color;\nlist-style = list-style-type list-style-position list-style-image;\nmargin = INSETS margin-top margin-right margin-bottom margin-left;\npadding = INSETS padding-top padding-right padding-bottom padding-left;\npause = INSETS pause-before pause-after;\nfont = FONT font-style font-variant font-weight font-stretch /* font-size line-height font-family are special-cased */;\n[epub,webkit]text-emphasis = text-emphasis-style text-emphasis-color;\nmarker = INSETS marker-start marker-mid marker-end;\n\n/* css-logical */\nmargin-block = INSETS margin-block-start margin-block-end;\nmargin-inline = INSETS margin-inline-start margin-inline-end;\npadding-block = INSETS padding-block-start padding-block-end;\npadding-inline = INSETS padding-inline-start padding-inline-end;\nborder-block-width = INSETS border-block-start-width border-block-end-width;\nborder-block-style = INSETS border-block-start-style border-block-end-style;\nborder-block-color = INSETS border-block-start-color border-block-end-color;\nborder-inline-width = INSETS border-inline-start-width border-inline-end-width;\nborder-inline-style = INSETS border-inline-start-style border-inline-end-style;\nborder-inline-color = INSETS border-inline-start-color border-inline-end-color;\nborder-block = border-block-width border-block-style border-block-color;\nborder-inline = border-inline-width border-inline-style border-inline-color;\nborder-block-start = border-block-start-width border-block-start-style border-block-start-color;\nborder-block-end = border-block-end-width border-block-end-style border-block-end-color;\nborder-inline-start = border-inline-start-width border-inline-start-style border-inline-start-color;\nborder-inline-end = border-inline-end-width border-inline-end-style border-inline-end-color;\ninset-block-start = block-start;\ninset-block-end = block-end;\ninset-inline-start = inline-start;\ninset-inline-end = inline-end;\ninset-block = INSETS block-start block-end;\ninset-inline = INSETS inline-start inline-end;\n\n/* old names  */\n[adapt,webkit]margin-before = margin-block-start;\n[adapt,webkit]margin-after = margin-block-end;\n[adapt,webkit]margin-start = margin-inline-start;\n[adapt,webkit]margin-end = margin-inline-end;\n[adapt,webkit]padding-before = padding-block-start;\n[adapt,webkit]padding-after = padding-block-end;\n[adapt,webkit]padding-start = padding-inline-start;\n[adapt,webkit]padding-end = padding-inline-end;\n[adapt,webkit]border-before-color = border-block-start-color;\n[adapt,webkit]border-after-color = border-block-end-color;\n[adapt,webkit]border-start-color = border-inline-start-color;\n[adapt,webkit]border-end-color = border-inline-end-color;\n[adapt,webkit]border-before-style = border-block-start-style;\n[adapt,webkit]border-after-style = border-block-end-style;\n[adapt,webkit]border-start-style = border-inline-start-style;\n[adapt,webkit]border-end-style = border-inline-end-style;\n[adapt,webkit]border-before-width = border-block-start-width;\n[adapt,webkit]border-after-width = border-block-end-width;\n[adapt,webkit]border-start-width = border-inline-start-width;\n[adapt,webkit]border-end-width = border-inline-end-width;\n[adapt,webkit]before = block-start;\n[adapt,webkit]after = block-end;\n[adapt,webkit]start = inline-start;\n[adapt,webkit]end = inline-end;\n\n",Hi='\n<!DOCTYPE html>\n<html xmlns="http://www.w3.org/1999/xhtml" xmlns:s="http://www.pyroxy.com/ns/shadow">\n<head>\n<style><![CDATA[\n\n.footnote-content {\n  float: footnote;\n}\n\n.table-cell-container {\n  display: block;\n}\n\n]]></style>\n</head>\n<body>\n\n<s:template id="footnote"><s:content/><s:include class="footnote-content"/></s:template>\n\n<s:template id="table-cell"><div data-vivliostyle-flow-root="true" class="table-cell-container"><s:content/></div></s:template>\n\n</body>\n</html>',Gi='\n@namespace html "http://www.w3.org/1999/xhtml";\n@namespace fb2 "http://www.gribuser.ru/xml/fictionbook/2.0";\n\nhtml|body,\nfb2|body {\n  hyphens: -epubx-expr(pref-hyphenate? "auto": "manual");\n}\n\n@-adapt-footnote-area {\n  display: block;\n  margin-block-start: 0.5em;\n  margin-block-end: 0.5em;\n}\n\n@-adapt-footnote-area ::before {\n  display: block;\n  border-block-start-width: 1px;\n  border-block-start-style: solid;\n  border-block-start-color: black;\n  margin-block-end: 0.4em;\n  margin-inline-start: 0;\n  margin-inline-end: 60%;\n}\n\n/* default page master */\n@-epubx-page-master :background-host {\n  @-epubx-partition :layout-host {\n    -epubx-flow-from: body;\n    top: -epubx-expr(header.margin-bottom-edge);\n    bottom: -epubx-expr(page-height - footer.margin-top-edge);\n    left: 0px;\n    right: 0px;\n    column-width: 25em;\n  }\n  @-epubx-partition footer :oeb-page-foot {\n    writing-mode: horizontal-tb;\n    -epubx-flow-from: oeb-page-foot;\n    bottom: 0px;\n    left: 0px;\n    right: 0px;\n  }\n  @-epubx-partition header :oeb-page-head {\n    writing-mode: horizontal-tb;\n    -epubx-flow-from: oeb-page-head;\n    top: 0px;\n    left: 0px;\n    right: 0px;\n  }\n}\n\n@page {\n  @top-left-corner {\n    text-align: right;\n    vertical-align: middle;\n  }\n  @top-left {\n    text-align: left;\n    vertical-align: middle;\n  }\n  @top-center {\n    text-align: center;\n    vertical-align: middle;\n  }\n  @top-right {\n    text-align: right;\n    vertical-align: middle;\n  }\n  @top-right-corner {\n    text-align: left;\n    vertical-align: middle;\n  }\n  @left-top {\n    text-align: center;\n    vertical-align: top;\n  }\n  @left-middle {\n    text-align: center;\n    vertical-align: middle;\n  }\n  @left-bottom {\n    text-align: center;\n    vertical-align: bottom;\n  }\n  @right-top {\n    text-align: center;\n    vertical-align: top;\n  }\n  @right-middle {\n    text-align: center;\n    vertical-align: middle;\n  }\n  @right-bottom {\n    text-align: center;\n    vertical-align: bottom;\n  }\n  @bottom-left-corner {\n    text-align: right;\n    vertical-align: middle;\n  }\n  @bottom-left {\n    text-align: left;\n    vertical-align: middle;\n  }\n  @bottom-center {\n    text-align: center;\n    vertical-align: middle;\n  }\n  @bottom-right {\n    text-align: right;\n    vertical-align: middle;\n  }\n  @bottom-right-corner {\n    text-align: left;\n    vertical-align: middle;\n  }\n}\n\n@media print {\n  @page {\n    margin: 10%;\n  }\n}\n',Wi='\n@namespace html "http://www.w3.org/1999/xhtml";\n\nhtml|html,\nhtml|address,\nhtml|blockquote,\nhtml|body,\nhtml|dd,\nhtml|div,\nhtml|dl,\nhtml|dt,\nhtml|fieldset,\nhtml|form,\nhtml|frame,\nhtml|frameset,\nhtml|h1,\nhtml|h2,\nhtml|h3,\nhtml|h4,\nhtml|h5,\nhtml|h6,\nhtml|noframes,\nhtml|ol,\nhtml|p,\nhtml|ul,\nhtml|center,\nhtml|dir,\nhtml|hr,\nhtml|menu,\nhtml|pre,\nhtml|article,\nhtml|section,\nhtml|nav,\nhtml|aside,\nhtml|hgroup,\nhtml|footer,\nhtml|header,\nhtml|figure,\nhtml|figcaption,\nhtml|main {\n  display: block;\n  unicode-bidi: normal;\n}\nhtml|li {\n  display: list-item;\n}\nhtml|head {\n  display: none !important;\n}\nhtml|table {\n  display: table;\n}\nhtml|tr {\n  display: table-row;\n}\nhtml|thead {\n  display: table-header-group;\n  break-after: avoid;\n}\nhtml|tbody {\n  display: table-row-group;\n}\nhtml|tfoot {\n  display: table-footer-group;\n  break-before: avoid;\n}\nhtml|col {\n  display: table-column;\n}\nhtml|colgroup {\n  display: table-column-group;\n}\nhtml|td,\nhtml|th {\n  display: table-cell;\n}\nhtml|caption {\n  display: table-caption;\n  text-align: center;\n}\nhtml|th {\n  font-weight: bolder;\n  text-align: center;\n}\nhtml|script {\n  display: none;\n}\nhtml|body {\n  margin: 8px;\n}\nhtml|h1 {\n  font-size: 2em;\n  margin-block-start: 0.67em;\n  margin-block-end: 0.67em;\n  margin-inline-start: 0em;\n  margin-inline-end: 0em;\n}\nhtml|h2 {\n  font-size: 1.5em;\n  margin-block-start: 0.75em;\n  margin-block-end: 0.75em;\n  margin-inline-start: 0em;\n  margin-inline-end: 0em;\n}\nhtml|h3 {\n  font-size: 1.17em;\n  margin-block-start: 0.83em;\n  margin-block-end: 0.83em;\n  margin-inline-start: 0em;\n  margin-inline-end: 0em;\n}\nhtml|h4,\nhtml|p,\nhtml|blockquote,\nhtml|ul,\nhtml|fieldset,\nhtml|form,\nhtml|ol,\nhtml|dl,\nhtml|dir,\nhtml|menu,\nhtml|h5,\nhtml|h6 {\n  margin-block-start: 1em;\n  margin-block-end: 1em;\n  margin-inline-start: 0em;\n  margin-inline-end: 0em;\n}\nhtml|h5 {\n  font-size: 0.83em;\n}\nhtml|h6 {\n  font-size: 0.75em;\n}\nhtml|h1,\nhtml|h2,\nhtml|h3,\nhtml|h4,\nhtml|h5,\nhtml|h6,\nhtml|b,\nhtml|strong {\n  font-weight: bolder;\n}\nhtml|h1,\nhtml|h2,\nhtml|h3,\nhtml|h4,\nhtml|h5,\nhtml|h6 {\n  break-after: avoid;\n}\nhtml|blockquote {\n  margin-block-start: 0px;\n  margin-block-end: 0px;\n  margin-inline-start: 40px;\n  margin-inline-end: 40px;\n}\nhtml|i,\nhtml|cite,\nhtml|em,\nhtml|var,\nhtml|address {\n  font-style: italic;\n}\nhtml|pre,\nhtml|tt,\nhtml|code,\nhtml|kbd,\nhtml|samp {\n  font-family: monospace;\n}\nhtml|pre {\n  white-space: pre;\n}\nhtml|button,\nhtml|textarea,\nhtml|input,\nhtml|select {\n  display: inline-block;\n}\nhtml|big {\n  font-size: 1.17em;\n}\nhtml|small,\nhtml|sub,\nhtml|sup {\n  font-size: 0.83em;\n}\nhtml|sub {\n  vertical-align: sub;\n}\nhtml|sup {\n  vertical-align: super;\n}\nhtml|table {\n  border-spacing: 2px;\n}\nhtml|thead,\nhtml|tbody,\nhtml|tfoot {\n  vertical-align: middle;\n}\n/* for XHTML tables without tbody */\nhtml|table > html|tr {\n  vertical-align: middle;\n}\nhtml|td,\nhtml|th {\n  vertical-align: inherit;\n}\nhtml|s,\nhtml|strike,\nhtml|del {\n  text-decoration: line-through;\n}\nhtml|hr {\n  border: 1px inset;\n}\nhtml|ol,\nhtml|ul,\nhtml|dir,\nhtml|menu,\nhtml|dd {\n  margin: 0px;\n  margin-inline-start: 40px;\n}\nhtml|ol {\n  list-style-type: decimal;\n}\nhtml|ol html|ul,\nhtml|ul html|ol,\nhtml|ul html|ul,\nhtml|ol html|ol {\n  margin-top: 0;\n  margin-bottom: 0;\n}\nhtml|u,\nhtml|ins {\n  text-decoration: underline;\n}\nhtml|center {\n  text-align: center;\n}\nhtml|q:before {\n  content: open-quote;\n}\nhtml|q:after {\n  content: close-quote;\n}\n\nhtml|audio,\nhtml|video {\n  break-inside: avoid;\n}\n\nhtml|ruby {\n  display: ruby;\n}\nhtml|rp {\n  display: none;\n}\nhtml|rbc {\n  display: ruby-base-container;\n}\nhtml|rtc {\n  display: ruby-text-container;\n}\nhtml|rb {\n  display: ruby-base;\n  white-space: nowrap;\n}\nhtml|rt {\n  display: ruby-text;\n}\nhtml|ruby,\nhtml|rb,\nhtml|rt,\nhtml|rbc,\nhtml|rtc {\n  unicode-bidi: isolate;\n}\n\nhtml|rtc,\nhtml|rt {\n  font-variant-east-asian: ruby;\n  text-emphasis: none;\n  white-space: nowrap;\n  line-height: 1;\n}\n\nhtml|rtc:lang(zh),\nhtml|rt:lang(zh) {\n  ruby-align: center;\n}\n\nhtml|rtc,\nhtml|rt {\n  font-size: 50%;\n}\n\nhtml|rtc:lang(zh-TW),\nhtml|rt:lang(zh-TW) {\n  font-size: 30%;\n}\n\nhtml|rtc > html|rt,\nhtml|rtc > html|rt:lang(zh-TW) {\n  font-size: 100%;\n}\n\n/* Bidi settings */\nhtml|bdo[dir="ltr"] {\n  direction: ltr;\n  unicode-bidi: bidi-override;\n}\nhtml|bdo[dir="rtl"] {\n  direction: rtl;\n  unicode-bidi: bidi-override;\n}\nhtml|*[dir="ltr"] {\n  direction: ltr;\n  unicode-bidi: embed;\n}\nhtml|*[dir="rtl"] {\n  direction: rtl;\n  unicode-bidi: embed;\n}\n\n/*------------------ epub-specific ---------------------*/\n\n@namespace epub "http://www.idpf.org/2007/ops";\n\nhtml|a[epub|type="noteref"] {\n  font-size: 0.75em;\n  vertical-align: super;\n  line-height: 0.01;\n}\n\nhtml|a[epub|type="noteref"]:href-epub-type(footnote) {\n  -adapt-template: url(user-agent.xml#footnote);\n  text-decoration: none;\n}\n\nhtml|aside[epub|type="footnote"] {\n  display: none;\n}\n\nhtml|aside[epub|type="footnote"]:footnote-content {\n  display: block;\n  margin: 0.25em;\n  font-size: 1.2em;\n  line-height: 1.2;\n}\n\nepub|trigger {\n  display: none;\n}\n\nepub|switch {\n  display: inline;\n}\n\nepub|default {\n  display: inline;\n}\n\nepub|case {\n  display: none;\n}\n\nepub|case[required-namespace::supported] {\n  display: inline;\n}\n\nepub|case[required-namespace::supported] ~ epub|case {\n  display: none;\n}\n\nepub|case[required-namespace::supported] ~ epub|default {\n  display: none;\n}\n\n/*--------------- ncx and toc ----------------------*/\n\n@namespace ncx "http://www.daisy.org/z3986/2005/ncx/";\n\nncx|ncx {\n  display: block;\n  padding-top: 10px;\n  padding-bottom: 10px;\n}\n\nncx|content {\n  display: none;\n}\n\nbody > * {\n  -adapt-behavior: body-child;\n}\n\n[role="doc-toc"],\n[role="directory"],\nnav,\n.toc,\n#toc,\n#table-of-contents,\n#contents {\n  -adapt-behavior: toc-root;\n}\n\n[role="doc-toc"] a,\n[role="directory"] a,\nnav a,\n.toc a,\n#toc a,\nncx|navLabel {\n  -adapt-behavior: toc-node-anchor;\n}\n\n[role="doc-toc"] li,\n[role="directory"] li,\nnav li,\n.toc li,\n#toc li,\nncx|navPoint {\n  -adapt-behavior: toc-node;\n}\n\n[role="doc-toc"] li > *:first-child,\n[role="directory"] li > *:first-child,\nnav li > *:first-child,\n.toc li > *:first-child,\n#toc li > *:first-child {\n  -adapt-behavior: toc-node-first-child;\n}\n\n[role="doc-toc"] ol,\n[role="directory"] ol,\nnav ol,\n.toc ol,\n#toc ol,\n[role="doc-toc"] ul,\n[role="directory"] ul,\nnav ul,\n.toc ul,\n#toc ul,\nol[role="doc-toc"],\nol[role="directory"],\nol.toc,\nol#toc,\nul[role="doc-toc"],\nul[role="directory"],\nul.toc,\nul#toc {\n  -adapt-behavior: toc-container;\n}\n\n/*---------------- fb2 ---------------------*/\n\n@namespace fb2 "http://www.gribuser.ru/xml/fictionbook/2.0";\n\nfb2|FictionBook {\n  display: block;\n}\n\nfb2|body {\n  font-family: serif;\n  margin: 8px;\n  column-width: 25em;\n}\n\nfb2|a {\n  line-height: 0.1;\n  vertical-align: super;\n  font-size: 0.7em;\n}\n\nfb2|sub {\n  line-height: 0.1;\n  font-size: 0.7em;\n}\n\nfb2|sup {\n  line-height: 0.1;\n  font-size: 0.7em;\n}\n\nfb2|table {\n  display: table;\n  font-size: 0.8em;\n  font-family: sans-serif;\n  margin: 0.5em;\n  border-collapse: collapse;\n  border: 1px solid black;\n}\n\nfb2|td {\n  border: 1px solid black;\n  padding: 0.3em;\n}\n\nfb2|th {\n  font-weight: bold;\n  text-align: center;\n  border: 1px solid black;\n  background-color: #cee;\n  padding: 0.3em;\n}\n\nfb2|code {\n  font-family: monospace;\n}\n\nfb2|p {\n  display: block;\n  margin: 0px;\n  text-indent: 1.5em;\n  text-align: justify;\n}\n\nfb2|title fb2|p {\n  margin: 0px 0px 0.5em 0px;\n  text-indent: 0px;\n  text-align: inherit;\n}\n\nfb2|title {\n  font-size: 2.2em;\n  font-weight: bold;\n  break-inside: avoid;\n  break-after: avoid;\n  text-align: center;\n  margin: 1em 0px 0.5em 0px;\n  display: block;\n}\n\nfb2|section {\n  display: block;\n}\n\nfb2|section fb2|title {\n  font-size: 1.8em;\n  text-align: center;\n  margin: 1em 0px 0.5em 0px;\n}\n\nfb2|section fb2|section fb2|title {\n  font-size: 1.5em;\n  text-align: left;\n  margin: 1em 0px 0.5em 1.5625em;\n}\n\nfb2|section fb2|section fb2|section fb2|title {\n  font-size: 1.3em;\n  text-align: left;\n  margin: 1em 0px 0.5em 1.923em;\n}\n\nfb2|section fb2|section fb2|section fb2|section fb2|title {\n  font-size: 1.2em;\n  text-align: left;\n  margin: 1em 0px 0.5em 2.083em;\n}\n\nfb2|section fb2|section fb2|section fb2|section fb2|section fb2|title {\n  font-size: 1.1em;\n  text-align: left;\n  margin: 1em 0px 0.5em 2.272em;\n}\n\nfb2|section\n  fb2|section\n  fb2|section\n  fb2|section\n  fb2|section\n  fb2|section\n  fb2|title {\n  text-align: left;\n  margin: 1em 0px 0.5em 2.5em;\n}\n\nfb2|epigraph {\n  text-align: left;\n  font-style: italic;\n  margin: 1em 1em 2em 30%;\n  display: block;\n}\n\nfb2|image {\n  text-align: center;\n  padding: 3px;\n}\n\nfb2|image::inner {\n  max-width: 95%;\n}\n\nfb2|image::after {\n  display: block;\n  content: attr(title);\n}\n\nfb2|v {\n  text-indent: -1em;\n  padding-left: 1em;\n  margin: 0px;\n  display: block;\n}\nfb2|poem {\n  margin: 0.5em 0px 0.5em 2em;\n  display: block;\n}\nfb2|date {\n  margin: 0.5em 0px 0.5em 50%;\n  font-style: italic;\n  display: block;\n}\nfb2|stanza {\n  margin: 0.5em 0px;\n  break-inside: avoid;\n  display: block;\n}\nfb2|empty-line {\n  height: 1em;\n  margin: 0px;\n  display: block;\n}\nfb2|cite {\n  margin: 0.5em 0px 0.5em 1em;\n  font-size: 0.95em;\n  display: block;\n}\nfb2|subtitle {\n  text-indent: 0px;\n  text-align: center;\n  font-style: italic;\n  font-weight: bold;\n  margin: 0.5em 2em;\n  break-inside: avoid;\n  break-after: avoid;\n  display: block;\n}\nfb2|annotation {\n  margin: 1em 0px 1em 2em;\n  text-indent: 0px;\n  font-style: italic;\n  display: block;\n}\nfb2|text-author {\n  text-indent: 0px;\n  margin: 0.2em 0px 0px 3em;\n  display: block;\n}\nfb2|emphasis {\n  font-style: italic;\n}\nfb2|strong {\n  font-weight: bold;\n}\nfb2|strikethrough {\n  text-decoration: line-through;\n}\nfb2|*.italic {\n  font-style: italic;\n}\nfb2|*.bold {\n  font-weight: bold;\n}\n\nfb2|binary,\nfb2|description,\nfb2|stylesheet {\n  display: none;\n}\n\nfb2|a[type="note"] {\n  font-size: 0.75em;\n  vertical-align: super;\n  line-height: 0.01;\n  text-decoration: none;\n  -adapt-template: url(user-agent.xml#footnote);\n}\n\nfb2|body[name="notes"] {\n  display: none;\n}\n\nfb2|body[name="notes"] fb2|title {\n  display: inline;\n  vertical-align: super;\n  line-height: 0.01;\n  text-align: left;\n  font-size: 0.75em;\n  font-weight: bold;\n  margin: 0px;\n}\n\nfb2|body[name="notes"] fb2|p {\n  text-indent: 0px;\n  display: inline; /* for now */\n}\n\nfb2|body[name="notes"] fb2|p + fb2|p {\n  display: block;\n}\n\nfb2|body[name="notes"] fb2|section {\n  text-indent: 0px;\n  line-height: 1.2;\n  font-size: 1.2em;\n}\n';function Xi(t,e,n,i,r){var o=Ci("ajax"),a=new XMLHttpRequest,s=o.suspend(a),l={status:0,statusText:"",url:t,contentType:null,responseText:null,responseXML:null,responseBlob:null};a.open(n||"GET",t,!0),e&&(a.responseType=e),a.onreadystatechange=function(){if(4===a.readyState){if(l.status=a.status,l.statusText=a.statusText||404==a.status&&"Not Found"||"",200==l.status||0==l.status)if(e&&e!==Mi.DOCUMENT||!a.responseXML||"parsererror"==a.responseXML.documentElement.localName)if((!e||e===Mi.DOCUMENT)&&a.response instanceof HTMLDocument)l.responseXML=a.response,l.contentType=a.response.contentType;else{var n=a.response;e&&e!==Mi.TEXT||"string"!=typeof n?n?l.responseBlob="string"==typeof n?ji([n]):n:f.warn("Unexpected empty success response for",t):l.responseText=n;var i=a.getResponseHeader("Content-Type");i&&(l.contentType=i.replace(/(.*);.*$/,"$1"))}else l.responseXML=a.responseXML,l.contentType=a.responseXML.contentType;s.schedule(l)}};try{i?(a.setRequestHeader("Content-Type",r||"text/plain; charset=UTF-8"),a.send(i)):(/^file:|^https?:\/\/[^/]+\.githubusercontent\.com|\.(xhtml|xht|opf)$/i.test(t)?/\/aozorabunko\/[^/]+\/cards\/[^/]+\/files\/[^/.]+\.html$/.test(t)?a.overrideMimeType("text/html; charset=Shift_JIS"):/\.(html|htm)$/i.test(t)?a.overrideMimeType("text/html; charset=UTF-8"):/\.(xhtml|xht|xml|opf)$/i.test(t)?a.overrideMimeType("application/xml; charset=UTF-8"):/\.(txt|css)$/i.test(t)?a.overrideMimeType("text/plain; charset=UTF-8"):a.overrideMimeType("text/html; charset=UTF-8"):/^data:,(<|%3c)/i.test(t)?a.overrideMimeType("text/html; charset=UTF-8"):/^data:,/i.test(t)&&a.overrideMimeType("text/plain; charset=UTF-8"),a.send(null))}catch(e){f.warn(e,"Error fetching "+t),s.schedule(l)}return o.result()}function ji(t,e){var n=e||"application/octet-stream",i=window.WebKitBlobBuilder||window.MSBlobBuilder;if(i){for(var r=new i,o=0;o<t.length;o++)r.append(t[o]);return r.getBlob(n)}return new Blob(t,{type:n})}!function(t){t.DEFAULT="",t.ARRAYBUFFER="arraybuffer",t.BLOB="blob",t.DOCUMENT="document",t.JSON="json",t.TEXT="text"}(Mi||(Mi={}));var Ki,Yi=function(){function t(t,e){this.parser=t,this.type=e,this.resources={},this.fetchers={}}var e=t.prototype;return e.load=function(t,e,n){t=z(t);var i=this.resources[t];return void 0!==i?Ti(i):this.fetch(t,e,n).get()},e.fetchInner=function(t,e,n){var i=this,r=Ci("fetch"),o=t.endsWith("?viv-toc-box");o&&(t=t.replace("?viv-toc-box",""));var a=j("user-agent.xml",W),s=!o&&t===a;return s&&(t="data:application/xml,"+encodeURIComponent(Hi)),Xi(t,i.type).then((function(l){if(l.status>=400&&e)throw new Error((n||"Failed to fetch required resource: "+t)+" ("+l.status+(l.statusText?" "+l.statusText:"")+")");o?(t+="?viv-toc-box",l.url+="?viv-toc-box"):s&&(l.url=t=a),i.parser(l,i).then((function(e){delete i.fetchers[t],i.resources[t]=e,r.finish(e)}))})),r.result()},e.fetch=function(t,e,n){if(t=z(t),this.resources[t])return null;var i=this.fetchers[t];if(!i){var r=this;i=new _i((function(){return r.fetchInner(t,e,n)}),"Fetch "+t),r.fetchers[t]=i,i.start()}return i},e.get=function(t){return this.resources[z(t)]},e.delete=function(t){delete this.resources[z(t)]},t}();function qi(t,e){var n=t.responseText;return Ti(n?U(n):null)}function $i(t){var e=parseInt(t,16);if(isNaN(e))throw new Error("E_CSS_COLOR");if(6==t.length)return new ze(e);if(3==t.length)return new ze(e=15&e|(15&e)<<4|(240&e)<<4|(240&e)<<8|(3840&e)<<8|(3840&e)<<12);throw new Error("E_CSS_COLOR")}!function(t){t.USER_AGENT="UA",t.USER="User",t.AUTHOR="Author"}(Ki||(Ki={}));var Zi,Qi=function(){function t(t){this.scope=t,this.flavor=Ki.AUTHOR}var e=t.prototype;return e.getCurrentToken=function(){return null},e.getScope=function(){return this.scope},e.error=function(t,e){},e.startStylesheet=function(t){this.flavor=t},e.tagSelector=function(t,e){},e.classSelector=function(t){},e.pseudoclassSelector=function(t,e){},e.pseudoelementSelector=function(t,e){},e.idSelector=function(t){},e.attributeSelector=function(t,e,n,i){},e.descendantSelector=function(){},e.childSelector=function(){},e.adjacentSiblingSelector=function(){},e.followingSiblingSelector=function(){},e.nextSelector=function(){},e.startSelectorRule=function(){},e.startFontFaceRule=function(){},e.startFootnoteRule=function(t){},e.startViewportRule=function(){},e.startDefineRule=function(){},e.startRegionRule=function(){},e.startPageRule=function(){},e.startPageMarginBoxRule=function(t){},e.startWhenRule=function(t){},e.startMediaRule=function(t){this.startWhenRule(t)},e.startFlowRule=function(t){},e.startPageTemplateRule=function(){},e.startPageMasterRule=function(t,e,n){},e.startPartitionRule=function(t,e,n){},e.startPartitionGroupRule=function(t,e,n){},e.startRuleBody=function(){},e.property=function(t,e,n){},e.endRule=function(){},e.startFuncWithSelector=function(t){},e.endFuncWithSelector=function(){},e.getImportantSpecificity=function(){switch(this.flavor){case Ki.USER_AGENT:return 0;case Ki.USER:return 100663296;default:return 83886080}},e.getBaseSpecificity=function(){switch(this.flavor){case Ki.USER_AGENT:return 0;case Ki.USER:return 16777216;default:return 33554432}},t}(),Ji=function(t){function e(){var e;return(e=t.call(this,null)||this).stack=[],e.tokenizer=null,e.slave=null,e}A(e,t);var n=e.prototype;return n.pushHandler=function(t){this.stack.push(this.slave),this.slave=t},n.popHandler=function(){this.slave=this.stack.pop()},n.getCurrentToken=function(){return this.tokenizer?this.tokenizer.token():null},n.getScope=function(){return this.slave.getScope()},n.error=function(t,e){this.slave.error(t,e)},n.errorMsg=function(t,e){f.warn(t)},n.startStylesheet=function(e){t.prototype.startStylesheet.call(this,e),this.stack.length>0&&(this.slave=this.stack[0],this.stack=[]),this.slave.startStylesheet(e)},n.tagSelector=function(t,e){this.slave.tagSelector(t,e)},n.classSelector=function(t){this.slave.classSelector(t)},n.pseudoclassSelector=function(t,e){this.slave.pseudoclassSelector(t,e)},n.pseudoelementSelector=function(t,e){this.slave.pseudoelementSelector(t,e)},n.idSelector=function(t){this.slave.idSelector(t)},n.attributeSelector=function(t,e,n,i){this.slave.attributeSelector(t,e,n,i)},n.descendantSelector=function(){this.slave.descendantSelector()},n.childSelector=function(){this.slave.childSelector()},n.adjacentSiblingSelector=function(){this.slave.adjacentSiblingSelector()},n.followingSiblingSelector=function(){this.slave.followingSiblingSelector()},n.nextSelector=function(){this.slave.nextSelector()},n.startSelectorRule=function(){this.slave.startSelectorRule()},n.startFontFaceRule=function(){this.slave.startFontFaceRule()},n.startFootnoteRule=function(t){this.slave.startFootnoteRule(t)},n.startViewportRule=function(){this.slave.startViewportRule()},n.startDefineRule=function(){this.slave.startDefineRule()},n.startRegionRule=function(){this.slave.startRegionRule()},n.startPageRule=function(){this.slave.startPageRule()},n.startPageMarginBoxRule=function(t){this.slave.startPageMarginBoxRule(t)},n.startWhenRule=function(t){this.slave.startWhenRule(t)},n.startFlowRule=function(t){this.slave.startFlowRule(t)},n.startPageTemplateRule=function(){this.slave.startPageTemplateRule()},n.startPageMasterRule=function(t,e,n){this.slave.startPageMasterRule(t,e,n)},n.startPartitionRule=function(t,e,n){this.slave.startPartitionRule(t,e,n)},n.startPartitionGroupRule=function(t,e,n){this.slave.startPartitionGroupRule(t,e,n)},n.startRuleBody=function(){this.slave.startRuleBody()},n.property=function(t,e,n){this.slave.property(t,e,n)},n.endRule=function(){this.slave.endRule()},n.startFuncWithSelector=function(t){this.slave.startFuncWithSelector(t)},n.endFuncWithSelector=function(){this.slave.endFuncWithSelector()},e}(Qi),tr=function(t){function e(e,n,i){var r;return(r=t.call(this,e)||this).owner=n,r.topLevel=i,r.depth=0,n&&(r.flavor=n.flavor),r}A(e,t);var n=e.prototype;return n.getCurrentToken=function(){return this.owner.getCurrentToken()},n.error=function(t,e){this.owner.errorMsg(t,e)},n.startRuleBody=function(){this.depth++},n.endRule=function(){0!=--this.depth||this.topLevel||this.owner.popHandler()},e}(Qi),er=function(t){function e(e,n,i){return t.call(this,e,n,i)||this}A(e,t);var n=e.prototype;return n.report=function(t){this.error(t,this.getCurrentToken())},n.reportAndSkip=function(t){this.report(t),this.owner.pushHandler(new tr(this.scope,this.owner,!1))},n.startSelectorRule=function(){this.reportAndSkip("E_CSS_UNEXPECTED_SELECTOR")},n.startFontFaceRule=function(){this.reportAndSkip("E_CSS_UNEXPECTED_FONT_FACE")},n.startFootnoteRule=function(t){this.reportAndSkip("E_CSS_UNEXPECTED_FOOTNOTE")},n.startViewportRule=function(){this.reportAndSkip("E_CSS_UNEXPECTED_VIEWPORT")},n.startDefineRule=function(){this.reportAndSkip("E_CSS_UNEXPECTED_DEFINE")},n.startRegionRule=function(){this.reportAndSkip("E_CSS_UNEXPECTED_REGION")},n.startPageRule=function(){this.reportAndSkip("E_CSS_UNEXPECTED_PAGE")},n.startWhenRule=function(t){this.reportAndSkip("E_CSS_UNEXPECTED_WHEN")},n.startFlowRule=function(t){this.reportAndSkip("E_CSS_UNEXPECTED_FLOW")},n.startPageTemplateRule=function(){this.reportAndSkip("E_CSS_UNEXPECTED_PAGE_TEMPLATE")},n.startPageMasterRule=function(t,e,n){this.reportAndSkip("E_CSS_UNEXPECTED_PAGE_MASTER")},n.startPartitionRule=function(t,e,n){this.reportAndSkip("E_CSS_UNEXPECTED_PARTITION")},n.startPartitionGroupRule=function(t,e,n){this.reportAndSkip("E_CSS_UNEXPECTED_PARTITION_GROUP")},n.startFuncWithSelector=function(t){this.reportAndSkip("E_CSS_UNEXPECTED_SELECTOR_FUNC")},n.endFuncWithSelector=function(){this.reportAndSkip("E_CSS_UNEXPECTED_END_SELECTOR_FUNC")},n.property=function(t,e,n){this.error("E_CSS_UNEXPECTED_PROPERTY",this.getCurrentToken())},e}(tr),nr=[],ir=[],rr=[],or=[],ar=[],sr=[],lr=[],ur=[],cr=[],hr=[],fr=[],dr=[],pr=[];!function(t){t[t.SELECTOR_NAME_1=1]="SELECTOR_NAME_1",t[t.SELECTOR_NAME=2]="SELECTOR_NAME",t[t.SELECTOR_ANY_1=3]="SELECTOR_ANY_1",t[t.SELECTOR_ANY=4]="SELECTOR_ANY",t[t.SELECTOR_ID_1=5]="SELECTOR_ID_1",t[t.SELECTOR_ID=6]="SELECTOR_ID",t[t.SELECTOR_CLASS_1=7]="SELECTOR_CLASS_1",t[t.SELECTOR_CLASS=8]="SELECTOR_CLASS",t[t.SELECTOR_ATTR_1=9]="SELECTOR_ATTR_1",t[t.SELECTOR_ATTR=10]="SELECTOR_ATTR",t[t.SELECTOR_CHILD=11]="SELECTOR_CHILD",t[t.SELECTOR_SIBLING=12]="SELECTOR_SIBLING",t[t.SELECTOR_BODY=13]="SELECTOR_BODY",t[t.SELECTOR_PSEUDOCLASS=14]="SELECTOR_PSEUDOCLASS",t[t.VAL_IDENT=15]="VAL_IDENT",t[t.VAL_HASH=16]="VAL_HASH",t[t.VAL_NUM=17]="VAL_NUM",t[t.VAL_INT=18]="VAL_INT",t[t.VAL_NUMERIC=19]="VAL_NUMERIC",t[t.VAL_STR=20]="VAL_STR",t[t.VAL_URL=21]="VAL_URL",t[t.VAL_COMMA=22]="VAL_COMMA",t[t.VAL_SLASH=23]="VAL_SLASH",t[t.VAL_FUNC=24]="VAL_FUNC",t[t.VAL_C_PAR=25]="VAL_C_PAR",t[t.VAL_END=26]="VAL_END",t[t.RULE_END=27]="RULE_END",t[t.IDENT=28]="IDENT",t[t.SELECTOR_START=29]="SELECTOR_START",t[t.AT=30]="AT",t[t.EXPR_IDENT=31]="EXPR_IDENT",t[t.EXPR_NUM=32]="EXPR_NUM",t[t.EXPR_NUMERIC=33]="EXPR_NUMERIC",t[t.EXPR_STR=34]="EXPR_STR",t[t.EXPR_PARAM=35]="EXPR_PARAM",t[t.EXPR_PREFIX=36]="EXPR_PREFIX",t[t.EXPR_INFIX=37]="EXPR_INFIX",t[t.EXPR_FUNC=38]="EXPR_FUNC",t[t.EXPR_C_PAR=39]="EXPR_C_PAR",t[t.EXPR_O_PAR=40]="EXPR_O_PAR",t[t.SELECTOR_NEXT=41]="SELECTOR_NEXT",t[t.SELECTOR_PSEUDOELEM=42]="SELECTOR_PSEUDOELEM",t[t.EXPR_O_BRC=43]="EXPR_O_BRC",t[t.VAL_FINISH=44]="VAL_FINISH",t[t.EXPR_INFIX_NAME=45]="EXPR_INFIX_NAME",t[t.PROP=46]="PROP",t[t.VAL_BANG=47]="VAL_BANG",t[t.VAL_BRC=48]="VAL_BRC",t[t.EXPR_SEMICOL=49]="EXPR_SEMICOL",t[t.ERROR_PUSH=50]="ERROR_PUSH",t[t.ERROR_POP=51]="ERROR_POP",t[t.ERROR_POP_DECL=52]="ERROR_POP_DECL",t[t.ERROR_SEMICOL=53]="ERROR_SEMICOL",t[t.VAL_PLUS=54]="VAL_PLUS",t[t.SELECTOR_PSEUDOCLASS_1=55]="SELECTOR_PSEUDOCLASS_1",t[t.SELECTOR_FOLLOWING_SIBLING=56]="SELECTOR_FOLLOWING_SIBLING",t[t.DONE=200]="DONE"}(Zi||(Zi={}));var gr,mr=Ln.LAST+1;nr[Ln.IDENT]=Zi.IDENT,nr[Ln.STAR]=Zi.SELECTOR_START,nr[Ln.HASH]=Zi.SELECTOR_START,nr[Ln.CLASS]=Zi.SELECTOR_START,nr[Ln.O_BRK]=Zi.SELECTOR_START,nr[Ln.COLON]=Zi.SELECTOR_START,nr[Ln.AT]=Zi.AT,nr[Ln.C_BRC]=Zi.RULE_END,nr[Ln.EOF]=Zi.DONE,ir[Ln.IDENT]=Zi.PROP,ir[Ln.EOF]=Zi.DONE,sr[Ln.IDENT]=Zi.SELECTOR_NAME,sr[Ln.STAR]=Zi.SELECTOR_ANY,sr[Ln.HASH]=Zi.SELECTOR_ID,sr[Ln.CLASS]=Zi.SELECTOR_CLASS,sr[Ln.O_BRK]=Zi.SELECTOR_ATTR,sr[Ln.COLON]=Zi.SELECTOR_PSEUDOCLASS,rr[Ln.GT]=Zi.SELECTOR_CHILD,rr[Ln.PLUS]=Zi.SELECTOR_SIBLING,rr[Ln.TILDE]=Zi.SELECTOR_FOLLOWING_SIBLING,rr[Ln.IDENT]=Zi.SELECTOR_NAME_1,rr[Ln.STAR]=Zi.SELECTOR_ANY_1,rr[Ln.HASH]=Zi.SELECTOR_ID_1,rr[Ln.CLASS]=Zi.SELECTOR_CLASS_1,rr[Ln.O_BRK]=Zi.SELECTOR_ATTR_1,rr[Ln.O_BRC]=Zi.SELECTOR_BODY,rr[Ln.COLON]=Zi.SELECTOR_PSEUDOCLASS_1,rr[Ln.COL_COL]=Zi.SELECTOR_PSEUDOELEM,rr[Ln.COMMA]=Zi.SELECTOR_NEXT,or[Ln.IDENT]=Zi.SELECTOR_NAME_1,or[Ln.STAR]=Zi.SELECTOR_ANY_1,or[Ln.HASH]=Zi.SELECTOR_ID_1,or[Ln.CLASS]=Zi.SELECTOR_CLASS_1,or[Ln.O_BRK]=Zi.SELECTOR_ATTR_1,or[Ln.C_PAR]=Zi.DONE,or[Ln.COLON]=Zi.SELECTOR_PSEUDOCLASS_1,ar[Ln.IDENT]=Zi.SELECTOR_NAME,ar[Ln.STAR]=Zi.SELECTOR_ANY,ar[Ln.HASH]=Zi.SELECTOR_ID,ar[Ln.CLASS]=Zi.SELECTOR_CLASS,ar[Ln.COLON]=Zi.SELECTOR_PSEUDOCLASS,ar[Ln.COL_COL]=Zi.SELECTOR_PSEUDOELEM,ar[Ln.O_BRK]=Zi.SELECTOR_ATTR,ar[Ln.O_BRC]=Zi.SELECTOR_BODY,lr[Ln.IDENT]=Zi.VAL_IDENT,lr[Ln.HASH]=Zi.VAL_HASH,lr[Ln.NUM]=Zi.VAL_NUM,lr[Ln.INT]=Zi.VAL_INT,lr[Ln.NUMERIC]=Zi.VAL_NUMERIC,lr[Ln.STR]=Zi.VAL_STR,lr[Ln.URL]=Zi.VAL_URL,lr[Ln.COMMA]=Zi.VAL_COMMA,lr[Ln.SLASH]=Zi.VAL_SLASH,lr[Ln.FUNC]=Zi.VAL_FUNC,lr[Ln.C_PAR]=Zi.VAL_C_PAR,lr[Ln.SEMICOL]=Zi.VAL_END,lr[Ln.C_BRC]=Zi.VAL_BRC,lr[Ln.BANG]=Zi.VAL_BANG,lr[Ln.PLUS]=Zi.VAL_PLUS,lr[Ln.EOF]=Zi.VAL_FINISH,ur[Ln.IDENT]=Zi.EXPR_IDENT,ur[Ln.NUM]=Zi.EXPR_NUM,ur[Ln.INT]=Zi.EXPR_NUM,ur[Ln.NUMERIC]=Zi.EXPR_NUMERIC,ur[Ln.STR]=Zi.EXPR_STR,ur[Ln.O_PAR]=Zi.EXPR_O_PAR,ur[Ln.FUNC]=Zi.EXPR_FUNC,ur[Ln.BANG]=Zi.EXPR_PREFIX,ur[Ln.MINUS]=Zi.EXPR_PREFIX,ur[Ln.DOLLAR]=Zi.EXPR_PARAM,cr[Ln.IDENT]=Zi.EXPR_INFIX_NAME,cr[Ln.COMMA]=Zi.EXPR_INFIX,cr[Ln.GT]=Zi.EXPR_INFIX,cr[Ln.LT]=Zi.EXPR_INFIX,cr[Ln.GT_EQ]=Zi.EXPR_INFIX,cr[Ln.LT_EQ]=Zi.EXPR_INFIX,cr[Ln.EQ]=Zi.EXPR_INFIX,cr[Ln.EQ_EQ]=Zi.EXPR_INFIX,cr[Ln.BANG_EQ]=Zi.EXPR_INFIX,cr[Ln.AMP_AMP]=Zi.EXPR_INFIX,cr[Ln.BAR_BAR]=Zi.EXPR_INFIX,cr[Ln.PLUS]=Zi.EXPR_INFIX,cr[Ln.MINUS]=Zi.EXPR_INFIX,cr[Ln.SLASH]=Zi.EXPR_INFIX,cr[Ln.PERCENT]=Zi.EXPR_INFIX,cr[Ln.STAR]=Zi.EXPR_INFIX,cr[Ln.COLON]=Zi.EXPR_INFIX,cr[Ln.QMARK]=Zi.EXPR_INFIX,cr[Ln.C_PAR]=Zi.EXPR_C_PAR,cr[Ln.O_BRC]=Zi.EXPR_O_BRC,cr[Ln.SEMICOL]=Zi.EXPR_SEMICOL,hr[Ln.EOF]=Zi.DONE,hr[Ln.O_BRC]=Zi.ERROR_PUSH,hr[Ln.C_BRC]=Zi.ERROR_POP,hr[Ln.O_BRK]=Zi.ERROR_PUSH,hr[Ln.C_BRK]=Zi.ERROR_POP,hr[Ln.O_PAR]=Zi.ERROR_PUSH,hr[Ln.C_PAR]=Zi.ERROR_POP,hr[Ln.SEMICOL]=Zi.ERROR_SEMICOL,fr[Ln.EOF]=Zi.DONE,fr[Ln.O_BRC]=Zi.ERROR_PUSH,fr[Ln.C_BRC]=Zi.ERROR_POP_DECL,fr[Ln.O_BRK]=Zi.ERROR_PUSH,fr[Ln.C_BRK]=Zi.ERROR_POP,fr[Ln.O_PAR]=Zi.ERROR_PUSH,fr[Ln.C_PAR]=Zi.ERROR_POP,fr[Ln.SEMICOL]=Zi.ERROR_SEMICOL,dr[Ln.EOF]=Zi.DONE,dr[Ln.O_BRC]=Zi.ERROR_PUSH,dr[Ln.C_BRC]=Zi.ERROR_POP,dr[Ln.O_BRK]=Zi.ERROR_PUSH,dr[Ln.C_BRK]=Zi.ERROR_POP,dr[Ln.O_PAR]=Zi.ERROR_PUSH,dr[Ln.C_PAR]=Zi.ERROR_POP,pr[Ln.C_PAR]=0,pr[Ln.COMMA]=0,pr[Ln.QMARK]=1,pr[Ln.COLON]=1,pr[Ln.AMP_AMP]=2,pr[Ln.BAR_BAR]=2,pr[Ln.LT]=3,pr[Ln.GT]=3,pr[Ln.LT_EQ]=3,pr[Ln.GT_EQ]=3,pr[Ln.EQ]=3,pr[Ln.EQ_EQ]=3,pr[Ln.BANG_EQ]=3,pr[Ln.PLUS]=4,pr[Ln.MINUS]=4,pr[Ln.STAR]=5,pr[Ln.SLASH]=5,pr[Ln.PERCENT]=5,pr[Ln.EOF]=6,pr[mr]=2,function(t){t[t.PROP=0]="PROP",t[t.WHEN=1]="WHEN",t[t.MEDIA=2]="MEDIA",t[t.IMPORT=3]="IMPORT"}(gr||(gr={}));var vr=function(){function t(t,e,n,i){this.actions=t,this.tokenizer=e,this.handler=n,this.baseURL=i,this.valStack=[],this.namespacePrefixToURI={},this.defaultNamespaceURI=null,this.propName=null,this.propImportant=!1,this.result=null,this.importReady=!1,this.importURL=null,this.importCondition=null,this.errorBrackets=[],this.ruleStack=[],this.regionRule=!1,this.pageRule=!1,this.exprContext=gr.MEDIA}var e=t.prototype;return e.extractVals=function(t,e){for(var n=[],i=this.valStack;n.push(i[e++]),e!=i.length;)if(i[e++]!=t)throw new Error("Unexpected state");return n},e.valStackReduce=function(t,e){var n,i=this.valStack,r=i.length;do{n=i[--r]}while(void 0!==n&&"string"!=typeof n);var o=i.length-(r+1);if(o>1&&i.splice(r+1,o,new Ge(i.slice(r+1,i.length))),","==t)return null;r++;do{n=i[--r]}while(void 0!==n&&("string"!=typeof n||","==n));if(o=i.length-(r+1),"("==n){if(")"!=t)return this.handler.error("E_CSS_MISMATCHED_C_PAR",e),this.actions=fr,null;var a=new Xe(i[r-1],this.extractVals(",",r+1));return i.splice(r-1,o+2,a),null}return";"!=t||r>=0?(this.handler.error("E_CSS_UNEXPECTED_VAL_END",e),this.actions=fr,null):o>1?new We(this.extractVals(",",r+1)):i[0]},e.exprError=function(t,e){this.actions=this.propName?fr:hr,this.handler.error(t,e)},e.exprStackReduce=function(t,e){for(var n,i=this.valStack,r=this.handler,o=i.pop();;){var a=i.pop();if(t==Ln.C_PAR){for(var s=[o];a==Ln.COMMA;)s.unshift(i.pop()),a=i.pop();if("string"==typeof a){if("{"==a){for(;s.length>=2;){var l=s.shift(),u=s.shift(),c=new ne(r.getScope(),l,u);s.unshift(c)}return i.push(new je(s[0])),!0}if("("==a){var h=i.pop(),f=i.pop();o=new be(r.getScope(),Bt(f,h),s),t=Ln.EOF;continue}}if(a==Ln.O_PAR){o.isMediaName()&&(o=new Ee(r.getScope(),o,null)),t=Ln.EOF;continue}}else if("string"==typeof a){i.push(a);break}if(a<0)if(a==-Ln.BANG)o=new Zt(r.getScope(),o);else{if(a!=-Ln.MINUS)return this.exprError("F_UNEXPECTED_STATE",e),!1;o=new Qt(r.getScope(),o)}else{if(pr[t]>pr[a]){i.push(a);break}switch(n=i.pop(),a){case Ln.AMP_AMP:o=new Jt(r.getScope(),n,o);break;case mr:o=new te(r.getScope(),n,o);break;case Ln.BAR_BAR:o=new ee(r.getScope(),n,o);break;case Ln.LT:o=new ie(r.getScope(),n,o);break;case Ln.GT:o=new oe(r.getScope(),n,o);break;case Ln.LT_EQ:o=new re(r.getScope(),n,o);break;case Ln.GT_EQ:o=new ae(r.getScope(),n,o);break;case Ln.EQ:case Ln.EQ_EQ:o=new se(r.getScope(),n,o);break;case Ln.BANG_EQ:o=new le(r.getScope(),n,o);break;case Ln.PLUS:o=new ue(r.getScope(),n,o);break;case Ln.MINUS:o=new ce(r.getScope(),n,o);break;case Ln.STAR:o=new he(r.getScope(),n,o);break;case Ln.SLASH:o=new fe(r.getScope(),n,o);break;case Ln.PERCENT:o=new de(r.getScope(),n,o);break;case Ln.COLON:if(!(i.length>1))return this.exprError("E_CSS_EXPR_COND",e),!1;switch(i[i.length-1]){case Ln.QMARK:i.pop(),o=new ye(r.getScope(),i.pop(),n,o);break;case Ln.O_PAR:if(!n.isMediaName())return this.exprError("E_CSS_MEDIA_TEST",e),!1;o=new Ee(r.getScope(),n,o)}break;case Ln.QMARK:if(t!=Ln.COLON)return this.exprError("E_CSS_EXPR_COND",e),!1;case Ln.O_PAR:return i.push(n),i.push(a),i.push(o),!1;default:return this.exprError("F_UNEXPECTED_STATE",e),!1}}}return i.push(o),!1},e.readPseudoParams=function(){for(var t=[];;){var e=this.tokenizer.token();switch(e.type){case Ln.IDENT:t.push(e.text);break;case Ln.PLUS:t.push("+");break;case Ln.NUM:case Ln.INT:t.push(e.num);break;default:return t}this.tokenizer.consume()}},e.readNthPseudoParams=function(){var t=!1,e=this.tokenizer.token();if(e.type===Ln.PLUS)t=!0,this.tokenizer.consume(),e=this.tokenizer.token();else if(e.type===Ln.IDENT&&("even"===e.text||"odd"===e.text))return this.tokenizer.consume(),[2,"odd"===e.text?1:0];switch(e.type){case Ln.NUMERIC:if(t&&e.num<0)return null;case Ln.IDENT:if(t&&"-"===e.text.charAt(0))return null;if("n"===e.text||"-n"===e.text){if(t&&e.precededBySpace)return null;var n="-n"===e.text?-1:1;e.type===Ln.NUMERIC&&(n=e.num);var i=0;this.tokenizer.consume();var r=(e=this.tokenizer.token()).type===Ln.MINUS,o=e.type===Ln.PLUS||r;if(o&&(this.tokenizer.consume(),e=this.tokenizer.token()),e.type===Ln.INT){if(1/(i=e.num)==-1/0){if(i=0,o)return null}else if(i<0){if(o)return null}else if(i>=0&&!o)return null;this.tokenizer.consume()}else if(o)return null;return[n,r&&i>0?-i:i]}if("n-"===e.text||"-n-"===e.text){if(t&&e.precededBySpace)return null;var a="-n-"===e.text?-1:1;if(e.type===Ln.NUMERIC&&(a=e.num),this.tokenizer.consume(),(e=this.tokenizer.token()).type===Ln.INT)return e.num<0||1/e.num==-1/0?null:(this.tokenizer.consume(),[a,e.num])}else{var s=e.text.match(/^n(-[0-9]+)$/);if(s)return t&&e.precededBySpace?null:(this.tokenizer.consume(),[e.type===Ln.NUMERIC?e.num:1,parseInt(s[1],10)]);if(s=e.text.match(/^-n(-[0-9]+)$/))return this.tokenizer.consume(),[-1,parseInt(s[1],10)]}return null;case Ln.INT:return t&&(e.precededBySpace||e.num<0)?null:(this.tokenizer.consume(),[0,e.num])}return null},e.makeCondition=function(t,e){var n=this.handler.getScope();if(!n)return null;if(e=e||n._true,t)for(var i,r=B(t.split(/\s+/));!(i=r()).done;)switch(i.value){case"vertical":e=Ne(n,e,new Zt(n,new ge(n,"pref-horizontal")));break;case"horizontal":e=Ne(n,e,new ge(n,"pref-horizontal"));break;case"day":e=Ne(n,e,new Zt(n,new ge(n,"pref-night-mode")));break;case"night":e=Ne(n,e,new ge(n,"pref-night-mode"));break;default:e=n._false}return e===n._true?null:new je(e)},e.isInsidePropertyOnlyRule=function(){switch(this.ruleStack[this.ruleStack.length-1]){case"[selector]":case"font-face":case"-epubx-flow":case"-epubx-viewport":case"-epubx-define":case"-adapt-footnote-area":return!0}return!1},e.runParser=function(t,e,n,i,r){var o,a,s,l,u,c,h,f=this.handler,d=this.tokenizer,p=this.valStack;i&&(this.exprContext=gr.MEDIA,this.valStack.push("{"));t:for(;t>0;--t)switch(o=d.token(),this.actions[o.type]){case Zi.IDENT:if(d.nthToken(1).type!=Ln.COLON){this.isInsidePropertyOnlyRule()?(f.error("E_CSS_COLON_EXPECTED",d.nthToken(1)),this.actions=fr):(this.actions=sr,f.startSelectorRule());continue}(a=d.nthToken(2)).precededBySpace||a.type!=Ln.IDENT&&a.type!=Ln.FUNC||d.mark(),this.propName=o.text,this.propImportant=!1,d.consume(),d.consume(),this.actions=lr,p.splice(0,p.length);continue;case Zi.PROP:if(d.nthToken(1).type!=Ln.COLON){this.actions=fr,f.error("E_CSS_COLON_EXPECTED",d.nthToken(1));continue}this.propName=o.text,this.propImportant=!1,d.consume(),d.consume(),this.actions=lr,p.splice(0,p.length);continue;case Zi.SELECTOR_START:this.actions=sr,f.startSelectorRule();continue;case Zi.SELECTOR_NAME_1:if(!o.precededBySpace){this.actions=dr,f.error("E_CSS_SPACE_EXPECTED",o);continue}f.descendantSelector();case Zi.SELECTOR_NAME:if(d.nthToken(1).type==Ln.BAR)if(d.consume(),d.consume(),null!=(s=this.namespacePrefixToURI[o.text]))switch((o=d.token()).type){case Ln.IDENT:f.tagSelector(s,o.text),this.actions=r?or:rr,d.consume();break;case Ln.STAR:f.tagSelector(s,null),this.actions=r?or:rr,d.consume();break;default:this.actions=hr,f.error("E_CSS_NAMESPACE",o)}else this.actions=hr,f.error("E_CSS_UNDECLARED_PREFIX",o);else f.tagSelector(this.defaultNamespaceURI,o.text),this.actions=r?or:rr,d.consume();continue;case Zi.SELECTOR_ANY_1:if(!o.precededBySpace){this.actions=dr,f.error("E_CSS_SPACE_EXPECTED",o);continue}f.descendantSelector();case Zi.SELECTOR_ANY:if(d.nthToken(1).type==Ln.BAR)switch(d.consume(),d.consume(),(o=d.token()).type){case Ln.IDENT:f.tagSelector(null,o.text),this.actions=r?or:rr,d.consume();break;case Ln.STAR:f.tagSelector(null,null),this.actions=r?or:rr,d.consume();break;default:this.actions=hr,f.error("E_CSS_NAMESPACE",o)}else f.tagSelector(this.defaultNamespaceURI,null),this.actions=r?or:rr,d.consume();continue;case Zi.SELECTOR_ID_1:o.precededBySpace&&f.descendantSelector();case Zi.SELECTOR_ID:f.idSelector(o.text),this.actions=r?or:rr,d.consume();continue;case Zi.SELECTOR_CLASS_1:o.precededBySpace&&f.descendantSelector();case Zi.SELECTOR_CLASS:f.classSelector(o.text),this.actions=r?or:rr,d.consume();continue;case Zi.SELECTOR_PSEUDOCLASS_1:o.precededBySpace&&f.descendantSelector();case Zi.SELECTOR_PSEUDOCLASS:d.consume();e:switch((o=d.token()).type){case Ln.IDENT:f.pseudoclassSelector(o.text,null),d.consume(),this.actions=r?or:rr;continue;case Ln.FUNC:switch(l=o.text,d.consume(),l){case"not":this.actions=sr,f.startFuncWithSelector("not"),this.actions=this.runParser(Number.POSITIVE_INFINITY,!1,!1,!1,!0)?rr:dr;break t;case"lang":case"href-epub-type":if((o=d.token()).type===Ln.IDENT){h=[o.text],d.consume();break}break e;case"nth-child":case"nth-of-type":case"nth-last-child":case"nth-last-of-type":if(h=this.readNthPseudoParams())break;break e;default:h=this.readPseudoParams()}if((o=d.token()).type==Ln.C_PAR){f.pseudoclassSelector(l,h),d.consume(),this.actions=r?or:rr;continue}}f.error("E_CSS_PSEUDOCLASS_SYNTAX",o),this.actions=hr;continue;case Zi.SELECTOR_PSEUDOELEM:switch(d.consume(),(o=d.token()).type){case Ln.IDENT:f.pseudoelementSelector(o.text,null),this.actions=r?or:rr,d.consume();continue;case Ln.FUNC:if(l=o.text,d.consume(),"nth-fragment"==l){if(null===(h=this.readNthPseudoParams()))break}else h=this.readPseudoParams();if((o=d.token()).type==Ln.C_PAR){f.pseudoelementSelector(l,h),this.actions=r?or:rr,d.consume();continue}}f.error("E_CSS_PSEUDOELEM_SYNTAX",o),this.actions=hr;continue;case Zi.SELECTOR_ATTR_1:o.precededBySpace&&f.descendantSelector();case Zi.SELECTOR_ATTR:if(d.consume(),(o=d.token()).type==Ln.IDENT)l=o.text,d.consume();else if(o.type==Ln.STAR)l=null,d.consume();else{if(o.type!=Ln.BAR){this.actions=dr,f.error("E_CSS_ATTR",o),d.consume();continue}l=""}if((o=d.token()).type==Ln.BAR){if(null==(s=l?this.namespacePrefixToURI[l]:l)){this.actions=dr,f.error("E_CSS_UNDECLARED_PREFIX",o),d.consume();continue}if(d.consume(),(o=d.token()).type!=Ln.IDENT){this.actions=dr,f.error("E_CSS_ATTR_NAME_EXPECTED",o);continue}l=o.text,d.consume(),o=d.token()}else s="";switch(o.type){case Ln.EQ:case Ln.TILDE_EQ:case Ln.BAR_EQ:case Ln.HAT_EQ:case Ln.DOLLAR_EQ:case Ln.STAR_EQ:case Ln.COL_COL:u=o.type,d.consume(),o=d.token();break;case Ln.C_BRK:f.attributeSelector(s,l,Ln.EOF,null),this.actions=r?or:rr,d.consume();continue;default:this.actions=dr,f.error("E_CSS_ATTR_OP_EXPECTED",o);continue}switch(o.type){case Ln.IDENT:case Ln.STR:f.attributeSelector(s,l,u,o.text),d.consume(),o=d.token();break;default:this.actions=dr,f.error("E_CSS_ATTR_VAL_EXPECTED",o);continue}if(o.type!=Ln.C_BRK){this.actions=dr,f.error("E_CSS_ATTR",o);continue}this.actions=r?or:rr,d.consume();continue;case Zi.SELECTOR_CHILD:f.childSelector(),this.actions=ar,d.consume();continue;case Zi.SELECTOR_SIBLING:f.adjacentSiblingSelector(),this.actions=ar,d.consume();continue;case Zi.SELECTOR_FOLLOWING_SIBLING:f.followingSiblingSelector(),this.actions=ar,d.consume();continue;case Zi.SELECTOR_BODY:this.regionRule?(this.ruleStack.push("-epubx-region"),this.regionRule=!1):this.pageRule?(this.ruleStack.push("page"),this.pageRule=!1):this.ruleStack.push("[selector]"),f.startRuleBody(),this.actions=nr,d.consume();continue;case Zi.SELECTOR_NEXT:f.nextSelector(),this.actions=sr,d.consume();continue;case Zi.VAL_IDENT:p.push(De(o.text)),d.consume();continue;case Zi.VAL_HASH:u=parseInt(o.text,16);try{p.push($i(o.text))}catch(t){f.error("E_CSS_COLOR",o),this.actions=hr}d.consume();continue;case Zi.VAL_NUM:p.push(new Me(o.num)),d.consume();continue;case Zi.VAL_INT:p.push(new Ue(o.num)),d.consume();continue;case Zi.VAL_NUMERIC:zt(o.text)?p.push(new je(new pe(f.getScope(),o.num,o.text))):p.push(new Be(o.num,o.text)),d.consume();continue;case Zi.VAL_STR:p.push(new Le(o.text)),d.consume();continue;case Zi.VAL_URL:p.push(new Ve(j(o.text,this.baseURL))),d.consume();continue;case Zi.VAL_COMMA:this.valStackReduce(",",o),p.push(","),d.consume();continue;case Zi.VAL_SLASH:p.push(ke),d.consume();continue;case Zi.VAL_FUNC:"-epubx-expr"==(l=o.text.toLowerCase())||"calc"==l||"env"==l?(this.actions=ur,this.exprContext=gr.PROP,p.push("{")):(p.push(l),p.push("(")),d.consume();continue;case Zi.VAL_C_PAR:this.valStackReduce(")",o),d.consume();continue;case Zi.VAL_BANG:if(d.consume(),o=d.token(),a=d.nthToken(1),o.type==Ln.IDENT&&"important"==o.text.toLowerCase()&&(a.type==Ln.SEMICOL||a.type==Ln.EOF||a.type==Ln.C_BRC)){d.consume(),this.propImportant=!0;continue}this.exprError("E_CSS_SYNTAX",o);continue;case Zi.VAL_PLUS:switch((a=d.nthToken(1)).type){case Ln.NUM:case Ln.NUMERIC:case Ln.INT:if(!a.precededBySpace){d.consume();continue}}if(this.actions===lr&&d.hasMark()){d.reset(),this.actions=sr,f.startSelectorRule();continue}this.exprError("E_CSS_UNEXPECTED_PLUS",o);continue;case Zi.VAL_END:d.consume();case Zi.VAL_BRC:d.unmark(),(c=this.valStackReduce(";",o))&&this.propName&&f.property(this.propName,c,this.propImportant),this.actions=n?ir:nr;continue;case Zi.VAL_FINISH:if(d.consume(),d.unmark(),c=this.valStackReduce(";",o),e)return this.result=c,!0;if(this.propName&&c&&f.property(this.propName,c,this.propImportant),n)return!0;this.exprError("E_CSS_SYNTAX",o);continue;case Zi.EXPR_IDENT:(a=d.nthToken(1)).type==Ln.CLASS?(d.nthToken(2).type!=Ln.O_PAR||d.nthToken(2).precededBySpace?(p.push(new ge(f.getScope(),Bt(o.text,a.text))),this.actions=cr):(p.push(o.text,a.text,"("),d.consume()),d.consume()):(this.exprContext==gr.MEDIA||this.exprContext==gr.IMPORT?"not"==o.text.toLowerCase()?(d.consume(),p.push(new me(f.getScope(),!0,a.text))):("only"==o.text.toLowerCase()&&(d.consume(),o=a),p.push(new me(f.getScope(),!1,o.text))):p.push(new ge(f.getScope(),o.text)),this.actions=cr),d.consume();continue;case Zi.EXPR_FUNC:p.push(null,o.text,"("),d.consume();continue;case Zi.EXPR_NUM:p.push(new we(f.getScope(),o.num)),d.consume(),this.actions=cr;continue;case Zi.EXPR_NUMERIC:"%"==(l=o.text)&&(l=this.propName&&this.propName.match(/height|^(top|bottom)$/)?"vh":"vw"),p.push(new pe(f.getScope(),o.num,l)),d.consume(),this.actions=cr;continue;case Zi.EXPR_STR:p.push(new we(f.getScope(),o.text)),d.consume(),this.actions=cr;continue;case Zi.EXPR_PARAM:d.consume(),(o=d.token()).type!=Ln.INT||o.precededBySpace?this.exprError("E_CSS_SYNTAX",o):(p.push(new Se(f.getScope(),o.num)),d.consume(),this.actions=cr);continue;case Zi.EXPR_PREFIX:p.push(-o.type),d.consume();continue;case Zi.EXPR_INFIX:this.actions=ur,this.exprStackReduce(o.type,o),p.push(o.type),d.consume();continue;case Zi.EXPR_INFIX_NAME:"and"==o.text.toLowerCase()?(this.actions=ur,this.exprStackReduce(mr,o),p.push(mr),d.consume()):this.exprError("E_CSS_SYNTAX",o);continue;case Zi.EXPR_C_PAR:this.exprStackReduce(o.type,o)&&(this.propName?this.actions=lr:this.exprError("E_CSS_UNBALANCED_PAR",o)),d.consume();continue;case Zi.EXPR_O_BRC:this.exprStackReduce(Ln.C_PAR,o)&&(this.propName||this.exprContext==gr.IMPORT?this.exprError("E_CSS_UNEXPECTED_BRC",o):(this.exprContext==gr.WHEN?f.startWhenRule(p.pop()):f.startMediaRule(p.pop()),this.ruleStack.push("media"),f.startRuleBody(),this.actions=nr)),d.consume();continue;case Zi.EXPR_SEMICOL:if(this.exprStackReduce(Ln.C_PAR,o)){if(!this.propName&&this.exprContext==gr.IMPORT)return this.importCondition=p.pop(),this.importReady=!0,this.actions=nr,d.consume(),!1;this.exprError("E_CSS_UNEXPECTED_SEMICOL",o)}d.consume();continue;case Zi.EXPR_O_PAR:p.push(o.type),d.consume();continue;case Zi.RULE_END:this.actions=nr,d.consume(),f.endRule(),this.ruleStack.length&&this.ruleStack.pop();continue;case Zi.AT:switch(l=o.text.toLowerCase()){case"import":if(d.consume(),(o=d.token()).type==Ln.STR||o.type==Ln.URL){if(this.importURL=o.text,d.consume(),(o=d.token()).type==Ln.SEMICOL||o.type==Ln.EOF)return this.importReady=!0,d.consume(),!1;this.propName=null,this.exprContext=gr.IMPORT,this.actions=ur,p.push("{");continue}f.error("E_CSS_IMPORT_SYNTAX",o),this.actions=hr;continue;case"namespace":switch(d.consume(),(o=d.token()).type){case Ln.IDENT:if(l=o.text,d.consume(),((o=d.token()).type==Ln.STR||o.type==Ln.URL)&&d.nthToken(1).type==Ln.SEMICOL){this.namespacePrefixToURI[l]=o.text,d.consume(),d.consume();continue}break;case Ln.STR:case Ln.URL:if(d.nthToken(1).type==Ln.SEMICOL){this.defaultNamespaceURI=o.text,d.consume(),d.consume();continue}}f.error("E_CSS_NAMESPACE_SYNTAX",o),this.actions=hr;continue;case"charset":if(d.consume(),(o=d.token()).type==Ln.STR&&d.nthToken(1).type==Ln.SEMICOL){"utf-8"!=(l=o.text.toLowerCase())&&"utf-16"!=l&&f.error("E_CSS_UNEXPECTED_CHARSET "+l,o),d.consume(),d.consume();continue}f.error("E_CSS_CHARSET_SYNTAX",o),this.actions=hr;continue;case"font-face":case"-epubx-page-template":case"-epubx-define":case"-epubx-viewport":if(d.nthToken(1).type==Ln.O_BRC){switch(d.consume(),d.consume(),l){case"font-face":f.startFontFaceRule();break;case"-epubx-page-template":f.startPageTemplateRule();break;case"-epubx-define":f.startDefineRule();break;case"-epubx-viewport":f.startViewportRule()}this.ruleStack.push(l),f.startRuleBody();continue}break;case"-adapt-footnote-area":switch(d.consume(),(o=d.token()).type){case Ln.O_BRC:d.consume(),f.startFootnoteRule(null),this.ruleStack.push(l),f.startRuleBody();continue;case Ln.COL_COL:if(d.consume(),(o=d.token()).type==Ln.IDENT&&d.nthToken(1).type==Ln.O_BRC){l=o.text,d.consume(),d.consume(),f.startFootnoteRule(l),this.ruleStack.push("-adapt-footnote-area"),f.startRuleBody();continue}}break;case"-epubx-region":d.consume(),f.startRegionRule(),this.regionRule=!0,this.actions=sr;continue;case"page":d.consume(),f.startPageRule(),this.pageRule=!0,this.actions=ar;continue;case"top-left-corner":case"top-left":case"top-center":case"top-right":case"top-right-corner":case"right-top":case"right-middle":case"right-bottom":case"bottom-right-corner":case"bottom-right":case"bottom-center":case"bottom-left":case"bottom-left-corner":case"left-bottom":case"left-middle":case"left-top":if(d.consume(),(o=d.token()).type==Ln.O_BRC){d.consume(),f.startPageMarginBoxRule(l),this.ruleStack.push(l),f.startRuleBody();continue}break;case"-epubx-when":d.consume(),this.propName=null,this.exprContext=gr.WHEN,this.actions=ur,p.push("{");continue;case"media":d.consume(),this.propName=null,this.exprContext=gr.MEDIA,this.actions=ur,p.push("{");continue;case"-epubx-flow":if(d.nthToken(1).type==Ln.IDENT&&d.nthToken(2).type==Ln.O_BRC){f.startFlowRule(d.nthToken(1).text),d.consume(),d.consume(),d.consume(),this.ruleStack.push(l),f.startRuleBody();continue}break;case"-epubx-page-master":case"-epubx-partition":case"-epubx-partition-group":d.consume();var g=null,m=null,v=[];for((o=d.token()).type==Ln.IDENT&&(g=o.text,d.consume(),o=d.token()),o.type==Ln.COLON&&d.nthToken(1).type==Ln.IDENT&&(m=d.nthToken(1).text,d.consume(),d.consume(),o=d.token());o.type==Ln.FUNC&&"class"==o.text.toLowerCase()&&d.nthToken(1).type==Ln.IDENT&&d.nthToken(2).type==Ln.C_PAR;)v.push(d.nthToken(1).text),d.consume(),d.consume(),d.consume(),o=d.token();if(o.type==Ln.O_BRC){switch(d.consume(),l){case"-epubx-page-master":f.startPageMasterRule(g,m,v);break;case"-epubx-partition":f.startPartitionRule(g,m,v);break;case"-epubx-partition-group":f.startPartitionGroupRule(g,m,v)}this.ruleStack.push(l),f.startRuleBody();continue}break;case"":f.error("E_CSS_UNEXPECTED_AT"+l,o),this.actions=dr;continue;default:f.error("E_CSS_AT_UNKNOWN "+l,o),this.actions=hr;continue}f.error("E_CSS_AT_SYNTAX "+l,o),this.actions=hr;continue;case Zi.ERROR_PUSH:if(e||n)return!0;this.errorBrackets.push(o.type+1),d.consume();continue;case Zi.ERROR_POP_DECL:if(e||n)return!0;if(0==this.errorBrackets.length){this.actions=nr;continue}case Zi.ERROR_POP:this.errorBrackets.length>0&&this.errorBrackets[this.errorBrackets.length-1]==o.type&&this.errorBrackets.pop(),0==this.errorBrackets.length&&o.type==Ln.C_BRC&&(this.actions=nr),d.consume();continue;case Zi.ERROR_SEMICOL:if(e||n)return!0;0==this.errorBrackets.length&&(this.actions=nr),d.consume();continue;case Zi.DONE:return r&&(d.consume(),f.endFuncWithSelector()),!0;default:if(e||n)return!0;if(i)return!!this.exprStackReduce(Ln.C_PAR,o)&&(this.result=p.pop(),!0);if(r)return f.error(o.type==Ln.INVALID?o.text:"E_CSS_SYNTAX",o),!1;if(this.actions===lr&&d.hasMark()){d.reset(),this.actions=sr,f.startSelectorRule();continue}if(this.actions!==hr&&this.actions!==dr&&this.actions!==fr){f.error(o.type==Ln.INVALID?o.text:"E_CSS_SYNTAX",o),this.actions=this.isInsidePropertyOnlyRule()?fr:dr;continue}d.consume();continue}return!1},t}(),br=function(t){function e(e){var n;return(n=t.call(this,null)||this).scope=e,n}A(e,t);var n=e.prototype;return n.error=function(t,e){throw new Error(t)},n.getScope=function(){return this.scope},e}(Qi);function yr(t,e,n,i,r){return xi("parseStylesheetFromText",(function(o){(function(t,e,n,i,r){var o=Ci("parseStylesheet"),a=new vr(nr,t,e,n),s=null;return r&&(s=function(t,e,n){var i=new vr(ur,t,e,n);return i.runParser(Number.POSITIVE_INFINITY,!1,!1,!0,!1),i.result}(new wi(r,e),e,n)),(s=a.makeCondition(i,s&&s.toExpr()))&&(e.startMediaRule(s),e.startRuleBody()),o.loop((function(){for(;!a.runParser(100,!1,!1,!1,!1);){if(a.importReady){var t=function(){var t=j(a.importURL,n);a.importCondition&&(e.startMediaRule(a.importCondition),e.startRuleBody());var i=Ci("parseStylesheet.import");return wr(t,e,null,null).then((function(){a.importCondition&&e.endRule(),a.importReady=!1,a.importURL=null,a.importCondition=null,i.finish(!0)})),{v:i.result()}}();if("object"==typeof t)return t.v}var i=o.timeSlice();if(i.isPending)return i}return Ti(!1)})).then((function(){s&&e.endRule(),o.finish(!0)})),o.result()})(new wi(t,e),e,n,i,r).thenFinish(o)}),(function(e,n){f.warn(n,"Failed to parse stylesheet text: "+t),e.finish(!1)}))}function wr(t,e,n,i){return xi("parseStylesheetFromURL",(function(r){Xi(t).then((function(o){o.responseText?yr(o.responseText,e,t,n,i).then((function(e){e||f.warn("Failed to parse stylesheet from "+t),r.finish(!0)})):r.finish(!0)}))}),(function(e,n){f.warn(n,"Exception while fetching and parsing:",t),e.finish(!0)}))}function Er(t,e,n){var i=new vr(lr,e,new br(t),n);return i.runParser(Number.POSITIVE_INFINITY,!0,!1,!1,!1),i.result}var Sr={"z-index":!0,"column-count":!0,"flow-linger":!0,opacity:!0,page:!0,"flow-priority":!0,utilization:!0};function Nr(t,e,n){return e.isExpr()?function(t,e,n){var i=e.evaluate(t);switch(typeof i){case"number":return function(t){return!!Sr[t]}(n)?i==Math.round(i)?new Ue(i):new Me(i):new Be(i,"px");case"string":return i?Er(e.scope,new wi(i,null),""):Re;case"boolean":return i?qe._true:qe._false;case"undefined":return Re}throw new Error("E_UNEXPECTED")}(t,e.expr,n):e}function Cr(t,e,n){return t-=n,0===e?0===t:t%e==0&&t/e>=0}var Tr=function(){function t(t){this.matchers=t}return t.prototype.matches=function(){return this.matchers.some((function(t){return t.matches()}))},t}(),xr=function(){function t(t){this.matchers=t}return t.prototype.matches=function(){return this.matchers.every((function(t){return t.matches()}))},t}(),Ir=function(){function t(t,e,n){this.elementOffset=t,this.a=e,this.b=n}return t.registerFragmentIndex=function(e,n,i){var r=t.fragmentIndices;(!r[e]||r[e].priority<=i)&&(r[e]={fragmentIndex:n,priority:i})},t.clearFragmentIndices=function(){t.fragmentIndices={}},t.prototype.matches=function(){var e=t.fragmentIndices[this.elementOffset];return null!=e&&null!=e.fragmentIndex&&Cr(e.fragmentIndex,this.a,this.b)},t}();Ir.fragmentIndices={};var Pr=function(){function t(){}return t.buildViewConditionMatcher=function(t,e){var n=e.split("_");return"NFS"==n[0]?new Ir(t,parseInt(n[1],10),parseInt(n[2],10)):null},t.buildAllMatcher=function(t){return new xr(t)},t.buildAnyMatcher=function(t){return new Tr(t)},t}(),Ar={azimuth:!0,"border-collapse":!0,"border-spacing":!0,"caption-side":!0,"clip-rule":!0,color:!0,"color-interpolation":!0,"color-rendering":!0,cursor:!0,direction:!0,elevation:!0,"empty-cells":!0,fill:!0,"fill-opacity":!0,"fill-rule":!0,"font-kerning":!0,"font-size":!0,"font-size-adjust":!0,"font-family":!0,"font-feature-settings":!0,"font-style":!0,"font-stretch":!0,"font-variant":!0,"font-weight":!0,"glyph-orientation-vertical":!0,hyphens:!0,"hyphenate-character":!0,"hyphenate-limit-chars":!0,"hyphenate-limit-last":!0,"image-rendering":!0,"image-resolution":!0,"letter-spacing":!0,"line-break":!0,"line-height":!0,"list-style-image":!0,"list-style-position":!0,"list-style-type":!0,marker:!0,"marker-end":!0,"marker-mid":!0,"marker-start":!0,orphans:!0,"overflow-wrap":!0,"paint-order":!0,"pointer-events":!0,"pitch-range":!0,quotes:!0,richness:!0,"ruby-align":!0,"ruby-position":!0,"speak-header":!0,"speak-numeral":!0,"speak-punctuation":!0,"speech-rate":!0,"shape-rendering":!0,stress:!0,stroke:!0,"stroke-dasharray":!0,"stroke-dashoffset":!0,"stroke-linecap":!0,"stroke-linejoin":!0,"stroke-miterlimit":!0,"stroke-opacity":!0,"stroke-width":!0,"tab-size":!0,"text-align":!0,"text-align-last":!0,"text-anchor":!0,"text-decoration-skip":!0,"text-emphasis-color":!0,"text-emphasis-position":!0,"text-emphasis-style":!0,"text-combine-upright":!0,"text-indent":!0,"text-justify":!0,"text-rendering":!0,"text-size-adjust":!0,"text-transform":!0,"text-underline-position":!0,visibility:!0,"voice-family":!0,volume:!0,"white-space":!0,widows:!0,"word-break":!0,"word-spacing":!0,"word-wrap":!0,"writing-mode":!0},Or=["box-decoration-break","image-resolution","orphans","widows"];var Rr={"http://www.idpf.org/2007/ops":!0,"http://www.w3.org/1999/xhtml":!0,"http://www.w3.org/2000/svg":!0},kr=["margin-%","padding-%","border-%-width","border-%-style","border-%-color","%"],Lr=["max-%","min-%","%"],Fr=function(){for(var t=["left","right","top","bottom"],e={width:!0,height:!0,"max-width":!0,"max-height":!0,"min-width":!0,"min-height":!0},n=0;n<kr.length;n++)for(var i=0;i<t.length;i++)e[kr[n].replace("%",t[i])]=!0;return e}();function _r(t,e){for(var n,i={},r=B(kr);!(n=r()).done;){var o=n.value;for(var a in t){var s=o.replace("%",a),l=o.replace("%",t[a]);i[s]=l,i[l]=s}}for(var u,c=B(Lr);!(u=c()).done;){var h=u.value;for(var f in e){var d=h.replace("%",f),p=h.replace("%",e[f]);i[d]=p,i[p]=d}}return i}var Dr=_r({"block-start":"right","block-end":"left","inline-start":"top","inline-end":"bottom"},{"block-size":"width","inline-size":"height"}),Br=_r({"block-start":"top","block-end":"bottom","inline-start":"left","inline-end":"right"},{"block-size":"height","inline-size":"width"}),Mr=_r({"block-start":"right","block-end":"left","inline-start":"bottom","inline-end":"top"},{"block-size":"width","inline-size":"height"}),Ur=_r({"block-start":"top","block-end":"bottom","inline-start":"right","inline-end":"left"},{"block-size":"height","inline-size":"width"}),zr=function(){function t(t,e){this.value=t,this.priority=e}var e=t.prototype;return e.getBaseValue=function(){return this},e.filterValue=function(e){var n=this.value.visit(e);return n===this.value?this:new t(n,this.priority)},e.increaseSpecificity=function(e){return 0==e?this:new t(this.value,this.priority+e)},e.evaluate=function(t,e){return Nr(t,this.value,e)},e.isEnabled=function(t){return!0},t}(),Vr=function(t){function e(e,n,i){var r;return(r=t.call(this,e,n)||this).condition=i,r}A(e,t);var n=e.prototype;return n.getBaseValue=function(){return new zr(this.value,this.priority)},n.filterValue=function(t){var n=this.value.visit(t);return n===this.value?this:new e(n,this.priority,this.condition)},n.increaseSpecificity=function(t){return 0==t?this:new e(this.value,this.priority+t,this.condition)},n.isEnabled=function(t){return!!this.condition.evaluate(t)},e}(zr);function Hr(t,e,n){return(null==e||n.priority>e.priority)&&n.isEnabled(t)?n.getBaseValue():e}var Gr={"region-id":!0,"fragment-selector-id":!0};function Wr(t){return!!Gr[t]}function Xr(t){return"_"!=t.charAt(0)&&!Gr[t]}function jr(t){return!!Ar[t]}function Kr(t,e){return t[e]}function Yr(t,e,n){n?t[e]=n:delete t[e]}function qr(t,e){return t[e]}function $r(t,e){var n=t[e];return n||(t[e]=n={}),n}var Zr=function(t){var e=t._viewConditionalStyles;return e||(t._viewConditionalStyles=e=[]),e};function Qr(t,e){return t[e]}function Jr(t,e){var n=t[e];return n||(t[e]=n=[]),n}function to(t,e,n,i,r,o,a){for(var s in[{id:r,styleKey:"_pseudos"},{id:o,styleKey:"_regions"}].forEach((function(t){if(t.id){var n=$r(e,t.styleKey);(e=n[t.id])||(n[t.id]=e={})}})),a&&Zr(e).push({styles:e={},matcher:a}),n)if("_"!=s.charAt(0))if(Wr(s)){var l=Qr(n,s),u=Jr(e,s);Array.prototype.push.apply(u,l)}else{var c=Kr(n,s).increaseSpecificity(i),h=Kr(e,s);Yr(e,s,Hr(t,h,c))}}function eo(t,e){if(t.length>0){t.sort((function(t,e){return e.getPriority()-t.getPriority()}));for(var n=null,i=t.length-1;i>=0;i--)(n=t[i]).chained=e,e=n;return n}return e}var no=function(t){function e(e,n){var i;return(i=t.call(this)||this).props=e,i.context=n,i.propName="",i}A(e,t);var n=e.prototype;return n.setPropName=function(t){this.propName=t},n.getFontSize=function(){var t=Kr(this.props,"font-size").value;if(!function(t){switch(t.toLowerCase()){case"px":case"in":case"pt":case"pc":case"cm":case"mm":case"q":return!0;default:return!1}}(t.unit))throw new Error("Unexpected state");return t.num*Vt[t.unit]},n.visitNumeric=function(t){if("font-size"===this.propName)return function(t,e,n){var i=(t=io(t,e,n)).unit,r=t.num;return"px"===i?t:new Be("%"===i?r/100*e:r*n.queryUnitSize(i,!1),"px")}(t,this.getFontSize(),this.context);if("em"==t.unit||"ex"==t.unit||"rem"==t.unit)return io(t,this.getFontSize(),this.context);if("%"==t.unit){if("line-height"===this.propName)return t;var e=this.propName.match(/height|^(top|bottom)$/)?"vh":"vw";return new Be(t.num,e)}return t},n.visitExpr=function(t){return"font-size"==this.propName?Nr(this.context,t,this.propName).visit(this):t},e}(Ae);function io(t,e,n){var i=t.unit,r=t.num;return"em"===i||"ex"===i?new Be(r*(Vt[i]/Vt.em)*e,"px"):"rem"===i?new Be(r*n.fontSize(),"px"):t}var ro=function(){function t(){}var e=t.prototype;return e.apply=function(t){},e.mergeWith=function(t){return new ao([this,t])},e.clone=function(){return this},t}(),oo=function(t){function e(e){var n;return(n=t.call(this)||this).conditionItem=e,n}return A(e,t),e.prototype.apply=function(t){t.pushConditionItem(this.conditionItem.fresh(t))},e}(ro),ao=function(t){function e(e){var n;return(n=t.call(this)||this).list=e,n}A(e,t);var n=e.prototype;return n.apply=function(t){for(var e=0;e<this.list.length;e++)this.list[e].apply(t)},n.mergeWith=function(t){return this.list.push(t),this},n.clone=function(){return new e([].concat(this.list))},e}(ro),so=function(t){function e(e,n,i,r,o){var a;return(a=t.call(this)||this).style=e,a.specificity=n,a.pseudoelement=i,a.regionId=r,a.viewConditionId=o,a}return A(e,t),e.prototype.apply=function(t){to(t.context,t.currentStyle,this.style,this.specificity,this.pseudoelement,this.regionId,t.buildViewConditionMatcher(this.viewConditionId))},e}(ro),lo=function(t){function e(){var e;return(e=t.call(this)||this).chained=null,e}A(e,t);var n=e.prototype;return n.apply=function(t){this.chained.apply(t)},n.getPriority=function(){return 0},n.makePrimary=function(t){return!1},e}(ro),uo=function(t){function e(e){var n;return(n=t.call(this)||this).className=e,n}A(e,t);var n=e.prototype;return n.apply=function(t){t.currentClassNames.includes(this.className)&&this.chained.apply(t)},n.getPriority=function(){return 10},n.makePrimary=function(t){return this.chained&&t.insertInTable(t.classes,this.className,this.chained),!0},e}(lo),co=function(t){function e(e){var n;return(n=t.call(this)||this).id=e,n}A(e,t);var n=e.prototype;return n.apply=function(t){t.currentId!=this.id&&t.currentXmlId!=this.id||this.chained.apply(t)},n.getPriority=function(){return 11},n.makePrimary=function(t){return this.chained&&t.insertInTable(t.ids,this.id,this.chained),!0},e}(lo),ho=function(t){function e(e){var n;return(n=t.call(this)||this).localName=e,n}A(e,t);var n=e.prototype;return n.apply=function(t){t.currentLocalName==this.localName&&this.chained.apply(t)},n.getPriority=function(){return 8},n.makePrimary=function(t){return this.chained&&t.insertInTable(t.tags,this.localName,this.chained),!0},e}(lo),fo=function(t){function e(e,n){var i;return(i=t.call(this)||this).ns=e,i.localName=n,i}A(e,t);var n=e.prototype;return n.apply=function(t){t.currentLocalName==this.localName&&t.currentNamespace==this.ns&&this.chained.apply(t)},n.getPriority=function(){return 8},n.makePrimary=function(t){if(this.chained){var e=t.nsPrefix[this.ns];e||(e="ns"+t.nsCount+++":",t.nsPrefix[this.ns]=e),t.insertInTable(t.nstags,e+this.localName,this.chained)}return!0},e}(lo),po=function(t){function e(e){var n;return(n=t.call(this)||this).epubTypePatt=e,n}return A(e,t),e.prototype.apply=function(t){var e=t.currentElement;if(e&&"a"==t.currentLocalName){var n=e.getAttribute("href");if(n&&n.match(/^#/)){var i=n.substring(1),r=e.ownerDocument.getElementById(i);if(r){var o=r.getAttributeNS(G.epub,"type");o&&o.match(this.epubTypePatt)&&this.chained.apply(t)}}}},e}(lo),go=function(t){function e(e){var n;return(n=t.call(this)||this).ns=e,n}return A(e,t),e.prototype.apply=function(t){t.currentNamespace==this.ns&&this.chained.apply(t)},e}(lo),mo=function(t){function e(e,n){var i;return(i=t.call(this)||this).ns=e,i.name=n,i}return A(e,t),e.prototype.apply=function(t){t.currentElement&&t.currentElement.hasAttributeNS(this.ns,this.name)&&this.chained.apply(t)},e}(lo),vo=function(t){function e(e,n,i){var r;return(r=t.call(this)||this).ns=e,r.name=n,r.value=i,r}A(e,t);var n=e.prototype;return n.apply=function(t){t.currentElement&&t.currentElement.getAttributeNS(this.ns,this.name)==this.value&&this.chained.apply(t)},n.getPriority=function(){return"type"==this.name&&this.ns==G.epub?9:0},n.makePrimary=function(t){return"type"==this.name&&this.ns==G.epub&&(this.chained&&t.insertInTable(t.epubtypes,this.value,this.chained),!0)},e}(lo),bo=function(t){function e(e,n){var i;return(i=t.call(this)||this).ns=e,i.name=n,i}A(e,t);var n=e.prototype;return n.apply=function(t){if(t.currentElement){var e=t.currentElement.getAttributeNS(this.ns,this.name);e&&Rr[e]&&this.chained.apply(t)}},n.getPriority=function(){return 0},n.makePrimary=function(t){return!1},e}(lo),yo=function(t){function e(e,n,i){var r;return(r=t.call(this)||this).ns=e,r.name=n,r.regexp=i,r}return A(e,t),e.prototype.apply=function(t){if(t.currentElement){var e=t.currentElement.getAttributeNS(this.ns,this.name);e&&e.match(this.regexp)&&this.chained.apply(t)}},e}(lo),wo=function(t){function e(e){var n;return(n=t.call(this)||this).langRegExp=e,n}return A(e,t),e.prototype.apply=function(t){t.lang.match(this.langRegExp)&&this.chained.apply(t)},e}(lo),Eo=function(t){function e(){return t.call(this)||this}A(e,t);var n=e.prototype;return n.apply=function(t){t.isFirst&&this.chained.apply(t)},n.getPriority=function(){return 6},e}(lo),So=function(t){function e(){return t.call(this)||this}A(e,t);var n=e.prototype;return n.apply=function(t){t.isRoot&&this.chained.apply(t)},n.getPriority=function(){return 12},e}(lo),No=function(t){function e(e,n){var i;return(i=t.call(this)||this).a=e,i.b=n,i}return A(e,t),e.prototype.matchANPlusB=function(t){return Cr(t,this.a,this.b)},e}(lo),Co=function(t){function e(e,n){return t.call(this,e,n)||this}A(e,t);var n=e.prototype;return n.apply=function(t){this.matchANPlusB(t.currentSiblingOrder)&&this.chained.apply(t)},n.getPriority=function(){return 5},e}(No),To=function(t){function e(e,n){return t.call(this,e,n)||this}A(e,t);var n=e.prototype;return n.apply=function(t){this.matchANPlusB(t.currentSiblingTypeCounts[t.currentNamespace][t.currentLocalName])&&this.chained.apply(t)},n.getPriority=function(){return 5},e}(No),xo=function(t){function e(e,n){return t.call(this,e,n)||this}A(e,t);var n=e.prototype;return n.apply=function(t){var e=t.currentFollowingSiblingOrder;null===e&&(e=t.currentFollowingSiblingOrder=t.currentElement.parentNode.childElementCount-t.currentSiblingOrder+1),this.matchANPlusB(e)&&this.chained.apply(t)},n.getPriority=function(){return 4},e}(No),Io=function(t){function e(e,n){return t.call(this,e,n)||this}A(e,t);var n=e.prototype;return n.apply=function(t){var e=t.currentFollowingSiblingTypeCounts;if(!e[t.currentNamespace]){var n=t.currentElement;do{var i=n.namespaceURI,r=n.localName,o=e[i];o||(o=e[i]={}),o[r]=(o[r]||0)+1}while(n=n.nextElementSibling)}this.matchANPlusB(e[t.currentNamespace][t.currentLocalName])&&this.chained.apply(t)},n.getPriority=function(){return 4},e}(No),Po=function(t){function e(){return t.call(this)||this}A(e,t);var n=e.prototype;return n.apply=function(t){for(var e=t.currentElement.firstChild;e;){switch(e.nodeType){case Node.ELEMENT_NODE:return;case Node.TEXT_NODE:if(e.length>0)return}e=e.nextSibling}this.chained.apply(t)},n.getPriority=function(){return 4},e}(lo),Ao=function(t){function e(){return t.call(this)||this}A(e,t);var n=e.prototype;return n.apply=function(t){!1===t.currentElement.disabled&&this.chained.apply(t)},n.getPriority=function(){return 5},e}(lo),Oo=function(t){function e(){return t.call(this)||this}A(e,t);var n=e.prototype;return n.apply=function(t){!0===t.currentElement.disabled&&this.chained.apply(t)},n.getPriority=function(){return 5},e}(lo),Ro=function(t){function e(){return t.call(this)||this}A(e,t);var n=e.prototype;return n.apply=function(t){var e=t.currentElement;!0!==e.selected&&!0!==e.checked||this.chained.apply(t)},n.getPriority=function(){return 5},e}(lo),ko=function(t){function e(e){var n;return(n=t.call(this)||this).condition=e,n}A(e,t);var n=e.prototype;return n.apply=function(t){if(t.conditions[this.condition])try{t.dependentConditions.push(this.condition),this.chained.apply(t)}finally{t.dependentConditions.pop()}},n.getPriority=function(){return 5},e}(lo),Lo=function(t){function e(){var e;return(e=t.call(this)||this).applied=!1,e}A(e,t);var n=e.prototype;return n.apply=function(t){this.applied=!0},n.clone=function(){var t=new e;return t.applied=this.applied,t},e}(ro),Fo=function(t){function e(e){var n;return(n=t.call(this)||this).checkAppliedAction=new Lo,n.firstAction=eo(e,n.checkAppliedAction),n}A(e,t);var n=e.prototype;return n.apply=function(t){this.firstAction.apply(t),this.checkAppliedAction.applied||this.chained.apply(t),this.checkAppliedAction.applied=!1},n.getPriority=function(){return this.firstAction.getPriority()},e}(lo),_o=function(){function t(t,e,n){this.condition=t,this.viewConditionId=e,this.viewCondition=n}var e=t.prototype;return e.increment=function(t){t.increment(this.condition,this.viewCondition)},e.decrement=function(t){t.decrement(this.condition,this.viewCondition)},e.buildViewConditionMatcher=function(t){return t.buildViewConditionMatcher(this.viewConditionId)},t}(),Do=function(t){function e(e,n,i){return t.call(this,e,n,i)||this}A(e,t);var n=e.prototype;return n.fresh=function(t){return new e(this.condition,this.viewConditionId,this.buildViewConditionMatcher(t))},n.push=function(t,e){return 0==e&&this.increment(t),!1},n.pop=function(t,e){return 0==e&&(this.decrement(t),!0)},e}(_o),Bo=function(t){function e(e,n,i){return t.call(this,e,n,i)||this}A(e,t);var n=e.prototype;return n.fresh=function(t){return new e(this.condition,this.viewConditionId,this.buildViewConditionMatcher(t))},n.push=function(t,e){return 0==e?this.increment(t):1==e&&this.decrement(t),!1},n.pop=function(t,e){return 0==e?(this.decrement(t),!0):(1==e&&this.increment(t),!1)},e}(_o),Mo=function(t){function e(e,n,i){var r;return(r=t.call(this,e,n,i)||this).fired=!1,r}A(e,t);var n=e.prototype;return n.fresh=function(t){return new e(this.condition,this.viewConditionId,this.buildViewConditionMatcher(t))},n.push=function(t,e){return!!this.fired&&(this.decrement(t),!0)},n.pop=function(t,e){return this.fired?(this.decrement(t),!0):(0==e&&(this.fired=!0,this.increment(t)),!1)},e}(_o),Uo=function(t){function e(e,n,i){var r;return(r=t.call(this,e,n,i)||this).fired=!1,r}A(e,t);var n=e.prototype;return n.fresh=function(t){return new e(this.condition,this.viewConditionId,this.buildViewConditionMatcher(t))},n.push=function(t,e){return this.fired&&(-1==e?this.increment(t):0==e&&this.decrement(t)),!1},n.pop=function(t,e){if(this.fired){if(-1==e)return this.decrement(t),!0;0==e&&this.increment(t)}else 0==e&&(this.fired=!0,this.increment(t));return!1},e}(_o),zo=function(){function t(t,e){this.afterprop=t,this.element=e}var e=t.prototype;return e.fresh=function(t){return this},e.push=function(t,e){return!1},e.pop=function(t,e){return 0==e&&(t.processPseudoelementProps(this.afterprop,this.element),!0)},t}(),Vo=function(){function t(t){this.lang=t}var e=t.prototype;return e.fresh=function(t){return this},e.push=function(t,e){return!1},e.pop=function(t,e){return 0==e&&(t.lang=this.lang,!0)},t}(),Ho=function(){function t(t){this.oldQuotes=t}var e=t.prototype;return e.fresh=function(t){return this},e.push=function(t,e){return!1},e.pop=function(t,e){return 0==e&&(t.quotes=this.oldQuotes,!0)},t}(),Go=function(t){function e(e){var n;return(n=t.call(this)||this).element=e,n}A(e,t);var n=e.prototype;return n.createValueFromString=function(t,e){switch(e){case"url":return new Ve(t||"about:invalid");case"string":default:return new Le(t||"")}},n.visitFunc=function(e){if("attr"!==e.name)return t.prototype.visitFunc.call(this,e);var n,i="string",r=null;if(e.values[0]instanceof Ge){var o=e.values[0].values;o.length>=2&&(i=o[1].stringValue()),r=o[0].stringValue()}else r=e.values[0].stringValue();return n=this.createValueFromString(e.values.length>1?e.values[1].stringValue():null,i),this.element&&this.element.hasAttribute(r)?this.createValueFromString(this.element.getAttribute(r),i):n},e}(Ae),Wo=function(t){function e(e,n,i){var r;return(r=t.call(this)||this).cascade=e,r.element=n,r.counterResolver=i,r}A(e,t);var n=e.prototype;return n.visitIdent=function(t){var e=this.cascade,n=e.quotes,i=Math.floor(n.length/2)-1;switch(t.name){case"open-quote":var r=n[2*Math.min(i,e.quoteDepth)];return e.quoteDepth++,r;case"close-quote":return e.quoteDepth>0&&e.quoteDepth--,n[2*Math.min(i,e.quoteDepth)+1];case"no-open-quote":return e.quoteDepth++,new Le("");case"no-close-quote":return e.quoteDepth>0&&e.quoteDepth--,new Le("")}return t},n.format=function(t,e){var n,i=!1,r=!1;null!=(n=e.match(/^upper-(.*)/))?(i=!0,e=n[1]):null!=(n=e.match(/^lower-(.*)/))&&(r=!0,e=n[1]);var o="";return Xo[e]?o=function(t,e){if(e>t[0]||e<=0||e!=Math.round(e))return"";for(var n="",i=1;i<t.length;i+=2){var r=t[i],o=Math.floor(e/r);if(o>20)return"";for(e-=o*r;o>0;)n+=t[i+1],o--}return n}(Xo[e],t):jo[e]?o=function(t,e){if(e<=0||e!=Math.round(e))return"";var n=function(t){for(var e=[],n=0;n<t.length;)if("-"==t.substr(n+1,1)){var i=t.charCodeAt(n),r=t.charCodeAt(n+2);n+=3;for(var o=i;o<=r;o++)e.push(String.fromCharCode(o))}else e.push(t.substr(n++,1));return e}(t),i="";do{var r=--e%n.length;i=n[r]+i,e=(e-r)/n.length}while(e>0);return i}(jo[e],t):null!=Ko[e]?o=Ko[e]:"decimal-leading-zero"==e?1==(o=""+t).length&&(o="0"+o):o="cjk-ideographic"==e||"trad-chinese-informal"==e?function(t,e){if(t>9999||t<-9999)return""+t;if(0==t)return e.digits.charAt(0);var n=new it;if(t<0&&(n.append(e.negative),t=-t),t<10)n.append(e.digits.charAt(t));else if(!e.formal&&t<=19)n.append(e.markers.charAt(0)),0!=t&&n.append(e.digits.charAt(t-10));else{var i=Math.floor(t/1e3);i&&(n.append(e.digits.charAt(i)),n.append(e.markers.charAt(2)));var r=Math.floor(t/100)%10;r&&(n.append(e.digits.charAt(r)),n.append(e.markers.charAt(1)));var o=Math.floor(t/10)%10;o&&(n.append(e.digits.charAt(o)),n.append(e.markers.charAt(0)));var a=t%10;a&&n.append(e.digits.charAt(a))}return n.toString()}(t,Yo):""+t,i?o.toUpperCase():r?o.toLowerCase():o},n.visitFuncCounter=function(t){var e=t[0].toString(),n=t.length>1?t[1].stringValue():"decimal",i=this.cascade.counters[e];if(i&&i.length)return new Le(this.format(i&&i.length&&i[i.length-1]||0,n));var r=this,o=new je(this.counterResolver.getPageCounterVal(e,(function(t){return r.format(t||0,n)})));return new Ge([o])},n.visitFuncCounters=function(t){var e=t[0].toString(),n=t[1].stringValue(),i=t.length>2?t[2].stringValue():"decimal",r=this.cascade.counters[e],o=new it;if(r&&r.length)for(var a=0;a<r.length;a++)a>0&&o.append(n),o.append(this.format(r[a],i));var s=this,l=new je(this.counterResolver.getPageCountersVal(e,(function(t){var e=[];if(t.length)for(var r=0;r<t.length;r++)e.push(s.format(t[r],i));var a=o.toString();return a.length&&e.push(a),e.length?e.join(n):s.format(0,i)})));return new Ge([l])},n.visitFuncTargetCounter=function(t){var e,n=t[0];e=n instanceof Ve?n.url:n.stringValue();var i=t[1].toString(),r=t.length>2?t[2].stringValue():"decimal",o=this,a=new je(this.counterResolver.getTargetCounterVal(e,i,(function(t){return o.format(t||0,r)})));return new Ge([a])},n.visitFuncTargetCounters=function(t){var e,n=t[0];e=n instanceof Ve?n.url:n.stringValue();var i=t[1].toString(),r=t[2].stringValue(),o=t.length>3?t[3].stringValue():"decimal",a=this,s=new je(this.counterResolver.getTargetCountersVal(e,i,(function(t){var e=t.map((function(t){return a.format(t,o)}));return e.length?e.join(r):a.format(0,o)})));return new Ge([s])},n.visitFunc=function(t){switch(t.name){case"counter":if(t.values.length<=2)return this.visitFuncCounter(t.values);break;case"counters":if(t.values.length<=3)return this.visitFuncCounters(t.values);break;case"target-counter":if(t.values.length<=3)return this.visitFuncTargetCounter(t.values);break;case"target-counters":if(t.values.length<=4)return this.visitFuncTargetCounters(t.values)}return f.warn("E_CSS_CONTENT_PROP:",t.toString()),new Le("")},e}(Ae),Xo={roman:[4999,1e3,"M",900,"CM",500,"D",400,"CD",100,"C",90,"XC",50,"L",40,"XL",10,"X",9,"IX",5,"V",4,"IV",1,"I"],armenian:[9999,9e3,"ք",8e3,"փ",7e3,"ւ",6e3,"ց",5e3,"ր",4e3,"տ",3e3,"վ",2e3,"ս",1e3,"ռ",900,"ջ",800,"պ",700,"չ",600,"ո",500,"շ",400,"ն",300,"յ",200,"մ",100,"ճ",90,"ղ",80,"ձ",70,"հ",60,"կ",50,"ծ",40,"խ",30,"լ",20,"ի",10,"ժ",9,"թ",8,"ը",7,"է",6,"զ",5,"ե",4,"դ",3,"գ",2,"բ",1,"ա"],georgian:[19999,1e4,"ჵ",9e3,"ჰ",8e3,"ჯ",7e3,"ჴ",6e3,"ხ",5e3,"ჭ",4e3,"წ",3e3,"ძ",2e3,"ც",1e3,"ჩ",900,"შ",800,"ყ",700,"ღ",600,"ქ",500,"ფ",400,"ჳ",300,"ტ",200,"ს",100,"რ",90,"ჟ",80,"პ",70,"ო",60,"ჲ",50,"ნ",40,"მ",30,"ლ",20,"კ",10,"ი",9,"თ",8,"ჱ",7,"ზ",6,"ვ",5,"ე",4,"დ",3,"გ",2,"ბ",1,"ა"],hebrew:[999,400,"ת",300,"ש",200,"ר",100,"ק",90,"צ",80,"פ",70,"ע",60,"ס",50,"נ",40,"מ",30,"ל",20,"כ",19,"יט",18,"יח",17,"יז",16,"טז",15,"טו",10,"י",9,"ט",8,"ח",7,"ז",6,"ו",5,"ה",4,"ד",3,"ג",2,"ב",1,"א"]},jo={latin:"a-z",alpha:"a-z",greek:"α-ρσ-ω",russian:"а-ик-щэ-я"},Ko={square:"■",disc:"•",circle:"◦",none:""},Yo={formal:!1,digits:"零一二三四五六七八九",markers:"十百千",negative:"負"};function qo(t,e){for(var n in t)e[n]=t[n].clone()}var $o,Zo=function(){function t(){this.nsCount=0,this.nsPrefix={},this.tags={},this.nstags={},this.epubtypes={},this.classes={},this.ids={},this.pagetypes={},this.order=0}var e=t.prototype;return e.clone=function(){var e=new t;for(var n in e.nsCount=this.nsCount,this.nsPrefix)e.nsPrefix[n]=this.nsPrefix[n];return qo(this.tags,e.tags),qo(this.nstags,e.nstags),qo(this.epubtypes,e.epubtypes),qo(this.classes,e.classes),qo(this.ids,e.ids),qo(this.pagetypes,e.pagetypes),e.order=this.order,e},e.insertInTable=function(t,e,n){var i=t[e];i&&(n=i.mergeWith(n)),t[e]=n},e.createInstance=function(t,e,n,i){return new Qo(this,t,e,n,i)},e.nextOrder=function(){return this.order+=1/1048576},t}(),Qo=function(){function t(t,e,n,i,r){this.context=e,this.counterListener=n,this.counterResolver=i,this.stack=[[],[]],this.conditions={},this.currentElement=null,this.currentElementOffset=null,this.currentStyle=null,this.currentClassNames=null,this.currentLocalName="",this.currentNamespace="",this.currentId="",this.currentXmlId="",this.currentNSTag="",this.currentEpubTypes=null,this.currentPageType=null,this.isFirst=!0,this.isRoot=!0,this.counters={},this.counterScoping=[{}],this.quoteDepth=0,this.lang="",this.siblingOrderStack=[0],this.currentSiblingOrder=0,this.siblingTypeCountsStack=[{}],this.currentFollowingSiblingOrder=null,this.followingSiblingTypeCountsStack=[{}],this.viewConditions={},this.dependentConditions=[],this.code=t,this.quotes=[new Le("“"),new Le("”"),new Le("‘"),new Le("’")],this.currentSiblingTypeCounts=this.siblingTypeCountsStack[0],this.followingSiblingOrderStack=[this.currentFollowingSiblingOrder],this.currentFollowingSiblingTypeCounts=this.siblingTypeCountsStack[0]}var e=t.prototype;return e.pushConditionItem=function(t){this.stack[this.stack.length-1].push(t)},e.increment=function(t,e){this.conditions[t]=(this.conditions[t]||0)+1,e&&(this.viewConditions[t]?this.viewConditions[t].push(e):this.viewConditions[t]=[e])},e.decrement=function(t,e){this.conditions[t]--,this.viewConditions[t]&&(this.viewConditions[t]=this.viewConditions[t].filter((function(t){return t!==e})),0===this.viewConditions[t].length&&delete this.viewConditions[t])},e.buildViewConditionMatcher=function(t){var e=this,n=null;t&&(n=Pr.buildViewConditionMatcher(this.currentElementOffset,t));var i=this.dependentConditions.map((function(t){var n=e.viewConditions[t];return n&&n.length>0?1===n.length?n[0]:Pr.buildAnyMatcher([].concat(n)):null})).filter((function(t){return t}));return i.length<=0?n:null===n?1===i.length?i[0]:Pr.buildAllMatcher(i):Pr.buildAllMatcher([n].concat(i))},e.applyAction=function(t,e){var n=t[e];n&&n.apply(this)},e.pushRule=function(t,e,n){this.currentElement=null,this.currentElementOffset=null,this.currentStyle=n,this.currentNamespace="",this.currentLocalName="",this.currentId="",this.currentXmlId="",this.currentClassNames=t,this.currentNSTag="",this.currentEpubTypes=Jo,this.currentPageType=e,this.applyActions()},e.defineCounter=function(t,e){this.counters[t]?this.counters[t].push(e):this.counters[t]=[e];var n=this.counterScoping[this.counterScoping.length-1];n||(this.counterScoping[this.counterScoping.length-1]=n={}),n[t]=!0},e.pushCounters=function(t){var e=qe.inline,n=t.display;n&&(e=n.evaluate(this.context));var i=null,r=null,o=null,a=t["counter-reset"];if(a){var s=a.evaluate(this.context);s&&(i=On(s,!0))}var l=t["counter-set"];if(l){var u=l.evaluate(this.context);u&&(o=On(u,!1))}var c=t["counter-increment"];if(c){var h=c.evaluate(this.context);h&&(r=On(h,!1))}if("ol"!=this.currentLocalName&&"ul"!=this.currentLocalName||this.currentNamespace!=G.XHTML||(i||(i={}),i["ua-list-item"]=0),e===qe.list_item&&(r||(r={}),r["ua-list-item"]=1),i)for(var f in i)this.defineCounter(f,i[f]);if(o)for(var d in o)if(this.counters[d]){var p=this.counters[d];p[p.length-1]=o[d]}else this.defineCounter(d,o[d]);if(r)for(var g in r){this.counters[g]||this.defineCounter(g,0);var m=this.counters[g];m[m.length-1]+=r[g]}if(e===qe.list_item){var v=this.counters["ua-list-item"];t["ua-list-item-count"]=new zr(new Me(v[v.length-1]),0)}this.counterScoping.push(null)},e.popCounters=function(){var t=this.counterScoping.pop();if(t)for(var e in t){var n=this.counters[e];n&&(1==n.length?delete this.counters[e]:n.pop())}},e.processPseudoelementProps=function(t,e){this.pushCounters(t),t.content&&(t.content=t.content.filterValue(new Wo(this,e,this.counterResolver))),this.popCounters()},e.pushElement=function(t,e,n){var i=this;this.currentPageType=null,this.currentElement=t,this.currentElementOffset=n,this.currentStyle=e,this.currentNamespace=t.namespaceURI,this.currentLocalName=t.localName;var r=this.code.nsPrefix[this.currentNamespace];this.currentNSTag=r?r+this.currentLocalName:"",this.currentId=t.getAttribute("id"),this.currentXmlId=t.getAttributeNS(G.XML,"id");var o=t.getAttribute("class");this.currentClassNames=o?o.split(/\s+/):Jo;var a=t.getAttributeNS(G.epub,"type");if(this.currentEpubTypes=a?a.split(/\s+/):Jo,"style"==this.currentLocalName&&this.currentNamespace==G.FB2){var s=t.getAttribute("name")||"";this.currentClassNames=[s]}var l=nt(t);l&&(this.stack[this.stack.length-1].push(new Vo(this.lang)),this.lang=l.toLowerCase());var u=this.isRoot,c=this.siblingOrderStack;this.currentSiblingOrder=++c[c.length-1],c.push(0);var h=this.siblingTypeCountsStack,f=this.currentSiblingTypeCounts=h[h.length-1],d=f[this.currentNamespace];d||(d=f[this.currentNamespace]={}),d[this.currentLocalName]=(d[this.currentLocalName]||0)+1,h.push({});var p=this.followingSiblingOrderStack;this.currentFollowingSiblingOrder=null!==p[p.length-1]?--p[p.length-1]:null,p.push(null);var g=this.followingSiblingTypeCountsStack,m=this.currentFollowingSiblingTypeCounts=g[g.length-1];m&&m[this.currentNamespace]&&m[this.currentNamespace][this.currentLocalName]--,g.push({}),this.applyActions(),this.applyAttrFilter(t);var v=e.quotes,b=null;if(v){var y=v.evaluate(this.context);y&&(b=new Ho(this.quotes),y===qe.none?this.quotes=[new Le(""),new Le("")]:y instanceof Ge&&(this.quotes=y.values))}this.pushCounters(this.currentStyle);var w=this.currentId||this.currentXmlId||t.getAttribute("name")||"";if(u||w){var E={};Object.keys(this.counters).forEach((function(t){E[t]=Array.from(i.counters[t])})),this.counterListener.countersOfId(w,E)}var S=qr(this.currentStyle,"_pseudos");if(S)for(var N,C=!0,T=B(ta);!(N=T()).done;){var x=N.value;x||(C=!1);var I=S[x];I&&(C?this.processPseudoelementProps(I,t):this.stack[this.stack.length-2].push(new zo(I,t)))}b&&this.stack[this.stack.length-2].push(b)},e.applyAttrFilterInner=function(t,e){for(var n in e)Xr(n)&&(e[n]=e[n].filterValue(t))},e.applyAttrFilter=function(t){var e=new Go(t),n=this.currentStyle,i=qr(n,"_pseudos");for(var r in i)this.applyAttrFilterInner(e,i[r]);this.applyAttrFilterInner(e,n)},e.applyActions=function(){var t;for(t=0;t<this.currentClassNames.length;t++)this.applyAction(this.code.classes,this.currentClassNames[t]);for(t=0;t<this.currentEpubTypes.length;t++)this.applyAction(this.code.epubtypes,this.currentEpubTypes[t]);this.applyAction(this.code.ids,this.currentId),this.applyAction(this.code.tags,this.currentLocalName),""!=this.currentLocalName&&this.applyAction(this.code.tags,"*"),this.applyAction(this.code.nstags,this.currentNSTag),null!==this.currentPageType&&(this.applyAction(this.code.pagetypes,this.currentPageType),this.applyAction(this.code.pagetypes,"*")),this.currentElement=null,this.currentDoc=null,this.stack.push([]);for(var e=1;e>=-1;--e){var n=this.stack[this.stack.length-e-2];for(t=0;t<n.length;)n[t].push(this,e)?n.splice(t,1):t++}this.isFirst=!0,this.isRoot=!1},e.pop=function(){for(var t=1;t>=-1;--t)for(var e=this.stack[this.stack.length-t-2],n=0;n<e.length;)e[n].pop(this,t)?e.splice(n,1):n++;this.stack.pop(),this.isFirst=!1},e.popRule=function(){this.pop()},e.popElement=function(t){this.siblingOrderStack.pop(),this.siblingTypeCountsStack.pop(),this.followingSiblingOrderStack.pop(),this.followingSiblingTypeCountsStack.pop(),this.pop(),this.popCounters()},t}(),Jo=[],ta=["before","transclusion-before","footnote-call","footnote-marker","inner","first-letter","first-line","","transclusion-after","after"];!function(t){t[t.TOP=0]="TOP",t[t.SELECTOR=1]="SELECTOR",t[t.RULE=2]="RULE"}($o||($o={}));var ea=null,na=function(t){function e(e,n,i,r,o,a,s){var l;return(l=t.call(this,e,n,s)||this).condition=i,l.regionId=o,l.validatorSet=a,l.chain=null,l.specificity=0,l.elementStyle=null,l.conditionCount=0,l.pseudoelement=null,l.footnoteContent=!1,l.viewConditionId=null,l.cascade=r?r.cascade:ea?ea.clone():new Zo,l.state=$o.TOP,l}A(e,t);var n=e.prototype;return n.insertNonPrimary=function(t){this.cascade.insertInTable(this.cascade.tags,"*",t)},n.processChain=function(t){var e=eo(this.chain,t);e!==t&&e.makePrimary(this.cascade)||this.insertNonPrimary(e)},n.isInsideSelectorRule=function(t){return this.state!=$o.TOP&&(this.reportAndSkip(t),!0)},n.tagSelector=function(t,e){(e||t)&&(this.specificity+=1,this.chain.push(e&&t?new fo(t,e.toLowerCase()):e?new ho(e.toLowerCase()):new go(t)))},n.classSelector=function(t){if(this.pseudoelement)return f.warn("::"+this.pseudoelement,"followed by ."+t),void this.chain.push(new ko(""));this.specificity+=256,this.chain.push(new uo(t))},n.pseudoclassSelector=function(t,e){if(this.pseudoelement)return f.warn("::"+this.pseudoelement,"followed by :"+t),void this.chain.push(new ko(""));switch(t.toLowerCase()){case"enabled":this.chain.push(new Ao);break;case"disabled":this.chain.push(new Oo);break;case"checked":this.chain.push(new Ro);break;case"root":this.chain.push(new So);break;case"link":this.chain.push(new ho("a")),this.chain.push(new mo("","href"));break;case"-adapt-href-epub-type":case"href-epub-type":if(e&&1==e.length&&"string"==typeof e[0]){var n=new RegExp("(^|s)"+ct(e[0])+"($|s)");this.chain.push(new po(n))}else this.chain.push(new ko(""));break;case"-adapt-footnote-content":case"footnote-content":this.footnoteContent=!0;break;case"visited":case"active":case"hover":case"focus":this.chain.push(new ko(""));break;case"lang":this.chain.push(e&&1==e.length&&"string"==typeof e[0]?new wo(new RegExp("^"+ct(e[0].toLowerCase())+"($|-)")):new ko(""));break;case"nth-child":case"nth-last-child":case"nth-of-type":case"nth-last-of-type":var i=ia[t.toLowerCase()];this.chain.push(e&&2==e.length?new i(e[0],e[1]):new ko(""));break;case"first-child":this.chain.push(new Eo);break;case"last-child":this.chain.push(new xo(0,1));break;case"first-of-type":this.chain.push(new To(0,1));break;case"last-of-type":this.chain.push(new Io(0,1));break;case"only-child":this.chain.push(new Eo),this.chain.push(new xo(0,1));break;case"only-of-type":this.chain.push(new To(0,1)),this.chain.push(new Io(0,1));break;case"empty":this.chain.push(new Po);break;case"before":case"after":case"first-line":case"first-letter":return void this.pseudoelementSelector(t,e);default:f.warn("unknown pseudo-class selector: "+t),this.chain.push(new ko(""))}this.specificity+=256},n.pseudoelementSelector=function(t,e){switch(t){case"before":case"after":case"first-line":case"first-letter":case"footnote-call":case"footnote-marker":case"inner":case"after-if-continues":this.pseudoelement?(f.warn("Double pseudoelement ::"+this.pseudoelement+"::"+t),this.chain.push(new ko(""))):this.pseudoelement=t;break;case"first-n-lines":if(e&&1==e.length&&"number"==typeof e[0]){var n=Math.round(e[0]);if(n>0&&n==e[0]){this.pseudoelement?(f.warn("Double pseudoelement ::"+this.pseudoelement+"::"+t),this.chain.push(new ko(""))):this.pseudoelement="first-"+n+"-lines";break}}this.chain.push(new ko(""));break;case"nth-fragment":e&&2==e.length?this.viewConditionId="NFS_"+e[0]+"_"+e[1]:this.chain.push(new ko(""));break;default:f.warn("Unrecognized pseudoelement: ::"+t),this.chain.push(new ko(""))}this.specificity+=1},n.idSelector=function(t){this.specificity+=65536,this.chain.push(new co(t))},n.attributeSelector=function(t,e,n,i){var r;switch(this.specificity+=256,e=e.toLowerCase(),i=i||"",n){case Ln.EOF:r=new mo(t,e);break;case Ln.EQ:r=new vo(t,e,i);break;case Ln.TILDE_EQ:r=!i||i.match(/\s/)?new ko(""):new yo(t,e,new RegExp("(^|\\s)"+ct(i)+"($|\\s)"));break;case Ln.BAR_EQ:r=new yo(t,e,new RegExp("^"+ct(i)+"($|-)"));break;case Ln.HAT_EQ:r=i?new yo(t,e,new RegExp("^"+ct(i))):new ko("");break;case Ln.DOLLAR_EQ:r=i?new yo(t,e,new RegExp(ct(i)+"$")):new ko("");break;case Ln.STAR_EQ:r=i?new yo(t,e,new RegExp(ct(i))):new ko("");break;case Ln.COL_COL:"supported"==i?r=new bo(t,e):(f.warn("Unsupported :: attr selector op:",i),r=new ko(""));break;default:f.warn("Unsupported attr selector:",n),r=new ko("")}this.chain.push(r)},n.descendantSelector=function(){var t="d"+ra++;this.processChain(new oo(new Do(t,this.viewConditionId,null))),this.chain=[new ko(t)],this.viewConditionId=null},n.childSelector=function(){var t="c"+ra++;this.processChain(new oo(new Bo(t,this.viewConditionId,null))),this.chain=[new ko(t)],this.viewConditionId=null},n.adjacentSiblingSelector=function(){var t="a"+ra++;this.processChain(new oo(new Mo(t,this.viewConditionId,null))),this.chain=[new ko(t)],this.viewConditionId=null},n.followingSiblingSelector=function(){var t="f"+ra++;this.processChain(new oo(new Uo(t,this.viewConditionId,null))),this.chain=[new ko(t)],this.viewConditionId=null},n.nextSelector=function(){this.finishChain(),this.pseudoelement=null,this.footnoteContent=!1,this.specificity=0,this.chain=[]},n.startSelectorRule=function(){this.isInsideSelectorRule("E_CSS_UNEXPECTED_SELECTOR")||(this.state=$o.SELECTOR,this.elementStyle={},this.pseudoelement=null,this.specificity=0,this.footnoteContent=!1,this.chain=[])},n.error=function(e,n){t.prototype.error.call(this,e,n),this.state==$o.SELECTOR&&(this.state=$o.TOP)},n.startStylesheet=function(e){t.prototype.startStylesheet.call(this,e),this.state=$o.TOP},n.startRuleBody=function(){this.finishChain(),t.prototype.startRuleBody.call(this),this.state==$o.SELECTOR&&(this.state=$o.TOP)},n.endRule=function(){t.prototype.endRule.call(this),this.insideSelectorRule=$o.TOP},n.finishChain=function(){if(this.chain){var t=this.specificity+this.cascade.nextOrder();this.processChain(this.makeApplyRuleAction(t)),this.chain=null,this.pseudoelement=null,this.viewConditionId=null,this.footnoteContent=!1,this.specificity=0}},n.makeApplyRuleAction=function(t){var e=this.regionId;return this.footnoteContent&&(e=e?"xxx-bogus-xxx":"footnote"),new so(this.elementStyle,t,this.pseudoelement,e,this.viewConditionId)},n.special=function(t,e){var n;n=this.condition?new Vr(e,0,this.condition):new zr(e,0),Jr(this.elementStyle,t).push(n)},n.property=function(t,e,n){this.validatorSet.validatePropertyAndHandleShorthand(t,e,n,this)},n.invalidPropertyValue=function(t,e){this.report("E_INVALID_PROPERTY_VALUE "+t+": "+e.toString())},n.unknownProperty=function(t,e){this.report("E_INVALID_PROPERTY "+t+": "+e.toString())},n.simpleProperty=function(t,e,n){"display"!=t||e!==qe.oeb_page_head&&e!==qe.oeb_page_foot||(this.simpleProperty("flow-options",new Ge([qe.exclusive,qe._static]),n),this.simpleProperty("flow-into",e,n),e=qe.block),v("SIMPLE_PROPERTY").forEach((function(i){var r=i({name:t,value:e,important:n});t=r.name,e=r.value,n=r.important}));var i=n?this.getImportantSpecificity():this.getBaseSpecificity(),r=this.condition?new Vr(e,i,this.condition):new zr(e,i);Yr(this.elementStyle,t,r)},n.finish=function(){return this.cascade},n.startFuncWithSelector=function(t){switch(t){case"not":var e=new oa(this);e.startSelectorRule(),this.owner.pushHandler(e)}},e}(er),ia={"nth-child":Co,"nth-of-type":To,"nth-last-child":xo,"nth-last-of-type":Io},ra=0,oa=function(t){function e(e){var n;return(n=t.call(this,e.scope,e.owner,e.condition,e,e.regionId,e.validatorSet,!1)||this).parent=e,n.parentChain=e.chain,n}A(e,t);var n=e.prototype;return n.startFuncWithSelector=function(t){"not"==t&&this.reportAndSkip("E_CSS_UNEXPECTED_NOT")},n.startRuleBody=function(){this.reportAndSkip("E_CSS_UNEXPECTED_RULE_BODY")},n.nextSelector=function(){this.reportAndSkip("E_CSS_UNEXPECTED_NEXT_SELECTOR")},n.endFuncWithSelector=function(){this.chain&&this.chain.length>0&&this.parentChain.push(new Fo(this.chain)),this.parent.specificity+=this.specificity,this.owner.popHandler()},n.error=function(e,n){t.prototype.error.call(this,e,n),this.owner.popHandler()},e}(na),aa=function(t){function e(e,n){return t.call(this,e,n,!1)||this}return A(e,t),e.prototype.property=function(t,e,n){if(this.scope.values[t])this.error("E_CSS_NAME_REDEFINED "+t,this.getCurrentToken());else{var i=t.match(/height|^(top|bottom)$/)?"vh":"vw",r=new pe(this.scope,100,i);this.scope.defineName(t,e.toExpr(this.scope,r))}},e}(er),sa=function(t){function e(e,n,i,r,o){var a;return(a=t.call(this,e,n,!1)||this).condition=i,a.elementStyle=r,a.validatorSet=o,a.order=0,a}A(e,t);var n=e.prototype;return n.property=function(t,e,n){n?f.warn("E_IMPORTANT_NOT_ALLOWED"):this.validatorSet.validatePropertyAndHandleShorthand(t,e,n,this)},n.invalidPropertyValue=function(t,e){f.warn("E_INVALID_PROPERTY_VALUE",t+":",e.toString())},n.unknownProperty=function(t,e){f.warn("E_INVALID_PROPERTY",t+":",e.toString())},n.simpleProperty=function(t,e,n){var i=n?this.getImportantSpecificity():this.getBaseSpecificity();i+=this.order,this.order+=1/1048576;var r=this.condition?new Vr(e,i,this.condition):new zr(e,i);Yr(this.elementStyle,t,r)},e}(er),la=function(t){function e(e,n){var i;return(i=t.call(this,e)||this).validatorSet=n,i.elementStyle={},i.order=0,i}A(e,t);var n=e.prototype;return n.property=function(t,e,n){this.validatorSet.validatePropertyAndHandleShorthand(t,e,n,this)},n.invalidPropertyValue=function(t,e){f.warn("E_INVALID_PROPERTY_VALUE",t+":",e.toString())},n.unknownProperty=function(t,e){f.warn("E_INVALID_PROPERTY",t+":",e.toString())},n.simpleProperty=function(t,e,n){var i=n?67108864:50331648;i+=this.order,this.order+=1/1048576;var r=new zr(e,i);Yr(this.elementStyle,t,r)},e}(br);function ua(t,e){var n=Zr(t);n&&n.forEach((function(t){t.matcher.matches()&&e(t.styles)}))}function ca(t,e,n){ua(n,(function(n){ga(t,n,e)}))}function ha(t,e,n){var i=t["writing-mode"];if(i){var r=i.evaluate(e,"writing-mode");if(r&&r!==qe.inherit)return r===qe.vertical_rl}return n}function fa(t,e,n){var i=t.direction;if(i){var r=i.evaluate(e,"direction");if(r&&r!==qe.inherit)return r===qe.rtl}return n}function da(t,e,n,i,r){var o={};for(var a in t)Xr(a)&&(o[a]=Kr(t,a));return ca(o,e,t),pa(t,n,i,(function(t,n){ga(o,n,e),ca(o,e,n)})),o}function pa(t,e,n,i){var r=qr(t,"_regions");if((e||n)&&r){if(n){var o=["footnote"];e=e?e.concat(o):o}for(var a,s=B(e);!(a=s()).done;){var l=a.value,u=r[l];u&&i(l,u)}}}function ga(t,e,n){for(var i in e)if(Xr(i)){var r=Kr(e,i);t[i]=Hr(n,t[i],r)}}var ma=function(t,e,n,i,r){var o=n?i?Mr:Dr:i?Ur:Br;for(var a in t)if(t.hasOwnProperty(a)){var s=t[a];if(!s)continue;var l=o[a],u=void 0;if(l){var c=t[l];if(c&&c.priority>s.priority)continue;u=Fr[l]?l:a}else u=a;e[u]=r(a,s)}};function va(t,e){var n={};return Object.keys(t).forEach((function(i){var r=n[i]={},o=t[i];Object.keys(o).forEach((function(t){r[t]=o[t].map((function(t){var n=e?t.physical:t.logical;return{regexp:new RegExp("(-?)"+(e?t.logical:t.physical)+"(-?)"),to:"$1"+n+"$2"}}))}))})),n}function ba(t,e,n,i){var r=i[e];if(!r)throw new Error("unknown writing-mode: "+e);var o=r[n||"ltr"];if(!o)throw new Error("unknown direction: "+n);for(var a,s=B(o);!(a=s()).done;){var l=a.value,u=t.replace(l.regexp,l.to);if(u!==t)return u}return t}var ya,wa,Ea,Sa,Na,Ca,Ta,xa={"horizontal-tb":{ltr:[{logical:"inline-start",physical:"left"},{logical:"inline-end",physical:"right"},{logical:"block-start",physical:"top"},{logical:"block-end",physical:"bottom"},{logical:"inline-size",physical:"width"},{logical:"block-size",physical:"height"}],rtl:[{logical:"inline-start",physical:"right"},{logical:"inline-end",physical:"left"},{logical:"block-start",physical:"top"},{logical:"block-end",physical:"bottom"},{logical:"inline-size",physical:"width"},{logical:"block-size",physical:"height"}]},"vertical-rl":{ltr:[{logical:"inline-start",physical:"top"},{logical:"inline-end",physical:"bottom"},{logical:"block-start",physical:"right"},{logical:"block-end",physical:"left"},{logical:"inline-size",physical:"height"},{logical:"block-size",physical:"width"}],rtl:[{logical:"inline-start",physical:"bottom"},{logical:"inline-end",physical:"top"},{logical:"block-start",physical:"right"},{logical:"block-end",physical:"left"},{logical:"inline-size",physical:"height"},{logical:"block-size",physical:"width"}]},"vertical-lr":{ltr:[{logical:"inline-start",physical:"top"},{logical:"inline-end",physical:"bottom"},{logical:"block-start",physical:"left"},{logical:"block-end",physical:"right"},{logical:"inline-size",physical:"height"},{logical:"block-size",physical:"width"}],rtl:[{logical:"inline-start",physical:"bottom"},{logical:"inline-end",physical:"top"},{logical:"block-start",physical:"left"},{logical:"block-end",physical:"right"},{logical:"inline-size",physical:"height"},{logical:"block-size",physical:"width"}]}},Ia=va(xa,!0),Pa=va(xa,!1);function Aa(t,e,n){var i={display:e.style.display,position:e.style.position,width:e.style.width,maxWidth:e.style.maxWidth,minWidth:e.style.minWidth,height:e.style.height,maxHeight:e.style.maxHeight,minHeight:e.style.minHeight},r=e.parentNode,o=e.ownerDocument.createElement("div");function a(n){return t.getElementComputedStyle(e).getPropertyValue(n)}tt(o,"position",i.position),r.insertBefore(o,e),o.appendChild(e),tt(e,"width","auto"),tt(e,"max-width","none"),tt(e,"min-width","0"),tt(e,"height","auto"),tt(e,"max-height","none"),tt(e,"min-height","0");var s=J("writing-mode"),l=(s?a(s[0]):null)||a("writing-mode"),u="vertical-rl"===l||"tb-rl"===l||"vertical-lr"===l||"tb-lr"===l,c=u?"height":"width",h=u?"width":"height";function f(){return tt(e,"display","block"),tt(e,"position","static"),a(c)}function d(){tt(e,"display","inline-block"),tt(o,c,"99999999px");var t=a(c);return tt(o,c,""),t}function p(){tt(e,"display","inline-block"),tt(o,c,"0");var t=a(c);return tt(o,c,""),t}function g(){var t=f(),e=p(),n=parseFloat(t);if(n<=parseFloat(e))return e;var i=d();return n<=parseFloat(i)?t:i}function m(){return a(h)}function v(){throw new Error("Getting fill-available block size is not implemented")}var b={};return n.forEach((function(t){var n;switch(t){case ya.FILL_AVAILABLE_INLINE_SIZE:n=f();break;case ya.MAX_CONTENT_INLINE_SIZE:n=d();break;case ya.MIN_CONTENT_INLINE_SIZE:n=p();break;case ya.FIT_CONTENT_INLINE_SIZE:n=g();break;case ya.FILL_AVAILABLE_BLOCK_SIZE:n=v();break;case ya.MAX_CONTENT_BLOCK_SIZE:case ya.MIN_CONTENT_BLOCK_SIZE:case ya.FIT_CONTENT_BLOCK_SIZE:n=m();break;case ya.FILL_AVAILABLE_WIDTH:n=u?v():f();break;case ya.FILL_AVAILABLE_HEIGHT:n=u?f():v();break;case ya.MAX_CONTENT_WIDTH:n=u?m():d();break;case ya.MAX_CONTENT_HEIGHT:n=u?d():m();break;case ya.MIN_CONTENT_WIDTH:n=u?m():p();break;case ya.MIN_CONTENT_HEIGHT:n=u?p():m();break;case ya.FIT_CONTENT_WIDTH:n=u?m():g();break;case ya.FIT_CONTENT_HEIGHT:n=u?g():m()}b[t]=parseFloat(n),tt(e,"position",i.position),tt(e,"display",i.display)})),tt(e,"width",i.width),tt(e,"max-width",i.maxWidth),tt(e,"min-width",i.minWidth),tt(e,"height",i.height),tt(e,"max-height",i.maxHeight),tt(e,"min-height",i.minHeight),r.insertBefore(e,o),r.removeChild(o),b}function Oa(t){return t.reduce((function(t,e){return e[0]===a.DELETE?t:t+e[1]}),"")}function Ra(t,e,n){var i=0,r=0;return t.some((function(t){for(var o=0;o<t[1].length;o++){switch(t[0]*n){case a.INSERT:i++;break;case a.DELETE:i--,r++;break;case a.EQUAL:r++}if(r>e)return!0}return!1})),Math.max(Math.min(e,r-1)+i,0)}!function(t){t.FILL_AVAILABLE_INLINE_SIZE="fill-available inline size",t.FILL_AVAILABLE_BLOCK_SIZE="fill-available block size",t.FILL_AVAILABLE_WIDTH="fill-available width",t.FILL_AVAILABLE_HEIGHT="fill-available height",t.MAX_CONTENT_INLINE_SIZE="max-content inline size",t.MAX_CONTENT_BLOCK_SIZE="max-content block size",t.MAX_CONTENT_WIDTH="max-content width",t.MAX_CONTENT_HEIGHT="max-content height",t.MIN_CONTENT_INLINE_SIZE="min-content inline size",t.MIN_CONTENT_BLOCK_SIZE="min-content block size",t.MIN_CONTENT_WIDTH="min-content width",t.MIN_CONTENT_HEIGHT="min-content height",t.FIT_CONTENT_INLINE_SIZE="fit-content inline size",t.FIT_CONTENT_BLOCK_SIZE="fit-content block size",t.FIT_CONTENT_WIDTH="fit-content width",t.FIT_CONTENT_HEIGHT="fit-content height"}(ya||(ya={})),function(t){t.isInstanceOfBlockFormattingContext=function(t){return t&&"Block"===t.formattingContextType}}(wa||(wa={})),function(t){!function(t){t.INLINE="inline",t.COLUMN="column",t.REGION="region",t.PAGE="page"}(t.FloatReference||(t.FloatReference={}))}(Ea||(Ea={})),function(t){t.isInstanceOfAfterIfContinuesLayoutConstraint=function(t){return t&&"AfterIfContinue"==t.flagmentLayoutConstraintType}}(Sa||(Sa={})),function(t){t.isInstanceOfRepetitiveElementsOwnerFormattingContext=function(t){return!!t&&("RepetitiveElementsOwner"===t.formattingContextType||Ca.isInstanceOfTableFormattingContext(t))},t.isInstanceOfRepetitiveElementsOwnerLayoutConstraint=function(t){return!!t&&("RepetitiveElementsOwner"===t.flagmentLayoutConstraintType||Ca.isInstanceOfTableRowLayoutConstraint(t))}}(Na||(Na={})),function(t){t.isInstanceOfTableFormattingContext=function(t){return t&&"Table"===t.formattingContextType},t.isInstanceOfTableRowLayoutConstraint=function(t){return t&&"TableRow"===t.flagmentLayoutConstraintType}}(Ca||(Ca={})),function(t){!function(t){t[t.IGNORE=0]="IGNORE",t[t.NEWLINE=1]="NEWLINE",t[t.PRESERVE=2]="PRESERVE"}(t.Whitespace||(t.Whitespace={})),function(t){t[t.NONE=0]="NONE",t[t.CONTENT=1]="CONTENT",t[t.ROOTLESS=2]="ROOTLESS",t[t.ROOTED=3]="ROOTED"}(t.ShadowType||(t.ShadowType={}))}(Ta||(Ta={}));var ka={transform:!0,"transform-origin":!0},La={top:!0,bottom:!0,left:!0,right:!0},Fa=function(t,e,n){this.target=t,this.name=e,this.value=n},_a={show:function(t){t.style.visibility="visible"},hide:function(t){t.style.visibility="hidden"},play:function(t){t.currentTime=0,t.play()},pause:function(t){t.pause()},resume:function(t){t.play()},mute:function(t){t.muted=!0},unmute:function(t){t.muted=!1}};function Da(t,e){var n=_a[e];return n?function(){for(var e=0;e<t.length;e++)try{n(t[e])}catch(t){}}:null}var Ba=function(t){function e(e,n){var i;(i=t.call(this)||this).container=e,i.bleedBox=n,i.pageAreaElement=null,i.delayedItems=[],i.elementsById={},i.dimensions={width:0,height:0},i.isFirstPage=!1,i.isLastPage=!1,i.isAutoPageWidth=!0,i.isAutoPageHeight=!0,i.spineIndex=0,i.position=null,i.offset=-1,i.side=null,i.fetchers=[],i.marginBoxes={top:{},bottom:{},left:{},right:{}};var r=_(i);return i.hrefHandler=function(t){var e=t.currentTarget,n=e.getAttribute("href")||e.getAttributeNS(G.XLINK,"href");n&&r.dispatchEvent({type:"hyperlink",target:null,currentTarget:null,anchorElement:e,href:n,preventDefault:function(){t.preventDefault()}})},i}A(e,t);var n=e.prototype;return n.setAutoPageWidth=function(t){this.isAutoPageWidth=t,t?this.container.setAttribute(e.AUTO_PAGE_WIDTH_ATTRIBUTE,"true"):this.container.removeAttribute(e.AUTO_PAGE_WIDTH_ATTRIBUTE)},n.setAutoPageHeight=function(t){this.isAutoPageHeight=t,t?this.container.setAttribute(e.AUTO_PAGE_HEIGHT_ATTRIBUTE,"true"):this.container.removeAttribute(e.AUTO_PAGE_HEIGHT_ATTRIBUTE)},n.registerElementWithId=function(t,e){var n=this.elementsById[e];n?n.push(t):this.elementsById[e]=[t]},n.finish=function(t,e){var n=this;Object.keys(this.elementsById).forEach((function(t){for(var e=n.elementsById[t],i=0;i<e.length;)n.container.contains(e[i])?i++:e.splice(i,1);0===e.length&&delete n.elementsById[t]}));for(var i=this.delayedItems,r=0;r<i.length;r++){var o=i[r];(o.target!==this.container||"transform"!==o.name||this.isAutoPageWidth||this.isAutoPageHeight)&&tt(o.target,o.name,o.value.toString())}var a=e.getElementClientRect(this.container);this.dimensions.width=a.width,this.dimensions.height=a.height;for(var s=0;s<t.length;s++){var l=t[s],u=this.elementsById[l.ref],c=this.elementsById[l.observer];if(u&&c){var h=Da(u,l.action);if(h)for(var f=0;f<c.length;f++)c[f].addEventListener(l.event,h,!1)}}},n.zoom=function(t){tt(this.container,"transform","scale("+t+")")},n.getPageAreaElement=function(){return this.pageAreaElement||this.container},e}(gt);Ba.AUTO_PAGE_WIDTH_ATTRIBUTE="data-vivliostyle-auto-page-width",Ba.AUTO_PAGE_HEIGHT_ATTRIBUTE="data-vivliostyle-auto-page-height";var Ma=Ta.Whitespace;function Ua(t){switch(t){case"normal":case"nowrap":return Ma.IGNORE;case"pre-line":return Ma.NEWLINE;case"pre":case"pre-wrap":return Ma.PRESERVE;default:return null}}function za(t,e){if(1==t.nodeType)return!1;var n=t.textContent;switch(e){case Ma.IGNORE:return!!n.match(/^\s*$/);case Ma.NEWLINE:return!!n.match(/^[ \t\f]*$/);case Ma.PRESERVE:return 0==n.length}throw new Error("Unexpected whitespace: "+e)}var Va=function(t,e){this.flowName=t,this.parentFlowName=e,this.forcedBreakOffsets=[],this.formattingContext=null},Ha=function(){function t(t,e,n,i,r,o,a,s,l){this.flowName=t,this.element=e,this.startOffset=n,this.priority=i,this.linger=r,this.exclusive=o,this.repeated=a,this.last=s,this.breakBefore=l,this.startPage=-1}return t.prototype.isBetter=function(t){return!!this.exclusive&&(!t.exclusive||this.priority>t.priority||this.last)},t}();function Ga(t,e){return t.top-e.top}function Wa(t,e){return e.right-t.right}function Xa(t,e){return t===e||!(!t||!e)&&t.node===e.node&&t.shadowType===e.shadowType&&Za(t.shadowContext,e.shadowContext)&&Za(t.nodeShadow,e.nodeShadow)&&Xa(t.shadowSibling,e.shadowSibling)}function ja(t,e){if(t===e)return!0;if(!t||!e)return!1;if(t.offsetInNode!==e.offsetInNode||t.after!==e.after||t.steps.length!==e.steps.length)return!1;for(var n=0;n<t.steps.length;n++)if(!Xa(t.steps[n],e.steps[n]))return!1;return!0}function Ka(t,e){return{steps:[{node:t.sourceNode,shadowType:qa.NONE,shadowContext:t.shadowContext,nodeShadow:null,shadowSibling:null,formattingContext:null,fragmentIndex:null!=e?e:t.fragmentIndex}],offsetInNode:0,after:!1,preprocessedTextContent:t.preprocessedTextContent}}function Ya(t,e){var n=new Ja(t.node,e,0);return n.shadowType=t.shadowType,n.shadowContext=t.shadowContext,n.nodeShadow=t.nodeShadow,n.shadowSibling=t.shadowSibling?Ya(t.shadowSibling,e.copy()):null,n.formattingContext=t.formattingContext,n.fragmentIndex=t.fragmentIndex+1,n}var qa=Ta.ShadowType,$a=function(){function t(t,e,n,i,r,o,a){this.owner=t,this.root=e,this.xmldoc=n,this.parentShadow=i,this.type=o,this.styler=a,this.subShadow=null,r&&(r.subShadow=this)}return t.prototype.equals=function(t){return!!t&&this.owner===t.owner&&this.xmldoc===t.xmldoc&&this.type===t.type&&Za(this.parentShadow,t.parentShadow)},t}();function Za(t,e){return t===e||!!t&&!!e&&t.equals(e)}var Qa=function(t,e){this.outer=t,this.count=e},Ja=function(){function t(t,e,n){this.sourceNode=t,this.parent=e,this.boxOffset=n,this.offsetInNode=0,this.after=!1,this.nodeShadow=null,this.shadowSibling=null,this.shared=!1,this.inline=!0,this.overflow=!1,this.display=null,this.floatSide=null,this.clearSide=null,this.floatMinWrapBlock=null,this.columnSpan=null,this.verticalAlign="baseline",this.captionSide="top",this.inlineBorderSpacing=0,this.blockBorderSpacing=0,this.flexContainer=!1,this.establishesBFC=!1,this.containingBlockForAbsolute=!1,this.breakBefore=null,this.breakAfter=null,this.viewNode=null,this.clearSpacer=null,this.lang=null,this.preprocessedTextContent=null,this.repeatOnBreak=null,this.pluginProps={},this.fragmentIndex=1,this.afterIfContinues=null,this.footnotePolicy=null,this.shadowType=qa.NONE,this.shadowContext=e?e.shadowContext:null,this.breakPenalty=e?e.breakPenalty:0,this.floatReference=Ea.FloatReference.INLINE,this.whitespace=e?e.whitespace:Ma.IGNORE,this.hyphenateCharacter=e?e.hyphenateCharacter:null,this.breakWord=!!e&&e.breakWord,this.inheritedProps=e?e.inheritedProps:{},this.vertical=!!e&&e.vertical,this.direction=e?e.direction:"ltr",this.firstPseudo=e?e.firstPseudo:null,this.formattingContext=e?e.formattingContext:null}var e=t.prototype;return e.resetView=function(){this.inline=!0,this.breakPenalty=this.parent?this.parent.breakPenalty:0,this.viewNode=null,this.clearSpacer=null,this.offsetInNode=0,this.after=!1,this.display=null,this.floatReference=Ea.FloatReference.INLINE,this.floatSide=null,this.clearSide=null,this.floatMinWrapBlock=null,this.columnSpan=null,this.verticalAlign="baseline",this.flexContainer=!1,this.whitespace=this.parent?this.parent.whitespace:Ma.IGNORE,this.hyphenateCharacter=this.parent?this.parent.hyphenateCharacter:null,this.breakWord=!!this.parent&&this.parent.breakWord,this.breakBefore=null,this.breakAfter=null,this.nodeShadow=null,this.establishesBFC=!1,this.containingBlockForAbsolute=!1,this.vertical=!!this.parent&&this.parent.vertical,this.nodeShadow=null,this.preprocessedTextContent=null,this.formattingContext=this.parent?this.parent.formattingContext:null,this.repeatOnBreak=null,this.pluginProps={},this.fragmentIndex=1,this.afterIfContinues=null,this.footnotePolicy=null},e.cloneItem=function(){var e=new t(this.sourceNode,this.parent,this.boxOffset);return e.offsetInNode=this.offsetInNode,e.after=this.after,e.nodeShadow=this.nodeShadow,e.shadowType=this.shadowType,e.shadowContext=this.shadowContext,e.shadowSibling=this.shadowSibling,e.inline=this.inline,e.breakPenalty=this.breakPenalty,e.display=this.display,e.floatReference=this.floatReference,e.floatSide=this.floatSide,e.clearSide=this.clearSide,e.floatMinWrapBlock=this.floatMinWrapBlock,e.columnSpan=this.columnSpan,e.verticalAlign=this.verticalAlign,e.captionSide=this.captionSide,e.inlineBorderSpacing=this.inlineBorderSpacing,e.blockBorderSpacing=this.blockBorderSpacing,e.establishesBFC=this.establishesBFC,e.containingBlockForAbsolute=this.containingBlockForAbsolute,e.flexContainer=this.flexContainer,e.whitespace=this.whitespace,e.hyphenateCharacter=this.hyphenateCharacter,e.breakWord=this.breakWord,e.breakBefore=this.breakBefore,e.breakAfter=this.breakAfter,e.viewNode=this.viewNode,e.clearSpacer=this.clearSpacer,e.firstPseudo=this.firstPseudo,e.vertical=this.vertical,e.overflow=this.overflow,e.preprocessedTextContent=this.preprocessedTextContent,e.formattingContext=this.formattingContext,e.repeatOnBreak=this.repeatOnBreak,e.pluginProps=Object.create(this.pluginProps),e.fragmentIndex=this.fragmentIndex,e.afterIfContinues=this.afterIfContinues,e.footnotePolicy=this.footnotePolicy,e},e.modify=function(){return this.shared?this.cloneItem():this},e.copy=function(){var t=this;do{if(t.shared)break;t.shared=!0,t=t.parent}while(t);return this},e.clone=function(){for(var t,e=this.cloneItem(),n=e;null!=(t=n.parent);)t=t.cloneItem(),n.parent=t,n=t;return e},e.toNodePositionStep=function(){return{node:this.sourceNode,shadowType:this.shadowType,shadowContext:this.shadowContext,nodeShadow:this.nodeShadow,shadowSibling:this.shadowSibling?this.shadowSibling.toNodePositionStep():null,formattingContext:this.formattingContext,fragmentIndex:this.fragmentIndex}},e.toNodePosition=function(){var t=this,e=[];do{t.firstPseudo&&t.parent&&t.parent.firstPseudo!==t.firstPseudo||e.push(t.toNodePositionStep()),t=t.parent}while(t);return{steps:e,offsetInNode:this.preprocessedTextContent?Ra(this.preprocessedTextContent,this.offsetInNode,-1):this.offsetInNode,after:this.after,preprocessedTextContent:this.preprocessedTextContent}},e.isInsideBFC=function(){for(var t=this.parent;t;){if(t.establishesBFC)return!0;t=t.parent}return!1},e.getContainingBlockForAbsolute=function(){for(var t=this.parent;t;){if(t.containingBlockForAbsolute)return t;t=t.parent}return null},e.walkUpBlocks=function(t){for(var e=this;e;)e.inline||t(e),e=e.parent},e.belongsTo=function(t){return this.formattingContext===t&&!!this.parent&&this.parent.formattingContext===t},t}(),ts=function(){function t(t){this.primary=t,this.floats=null}var e=t.prototype;return e.clone=function(){var e=new t(this.primary);if(this.floats){e.floats=[];for(var n=0;n<this.floats.length;++n)e.floats[n]=this.floats[n]}return e},e.isSamePosition=function(t){if(!t)return!1;if(this===t)return!0;if(!ja(this.primary,t.primary))return!1;if(this.floats){if(!t.floats||this.floats.length!==t.floats.length)return!1;for(var e=0;e<this.floats.length;e++)if(!ja(this.floats[e],t.floats[e]))return!1}else if(t.floats)return!1;return!0},t}(),es=function(){function t(t,e){this.chunkPosition=t,this.flowChunk=e}var e=t.prototype;return e.clone=function(){return new t(this.chunkPosition.clone(),this.flowChunk)},e.isSamePosition=function(t){return!!t&&(this===t||this.chunkPosition.isSamePosition(t.chunkPosition))},t}(),ns=function(){function t(){this.positions=[],this.startSide="any",this.breakAfter=null}var e=t.prototype;return e.clone=function(){for(var e=new t,n=this.positions,i=e.positions,r=0;r<n.length;r++)i[r]=n[r].clone();return e.startSide=this.startSide,e.breakAfter=this.breakAfter,e},e.isSamePosition=function(t){if(this===t)return!0;if(!t||this.positions.length!==t.positions.length)return!1;for(var e=0;e<this.positions.length;e++)if(!this.positions[e].isSamePosition(t.positions[e]))return!1;return!0},e.hasContent=function(t){return this.positions.length>0&&this.positions[0].flowChunk.startOffset<=t},t}(),is=function(){function t(){this.page=0,this.flows={},this.flowPositions={},this.highestSeenOffset=0}var e=t.prototype;return e.clone=function(){var e=new t;for(var n in e.page=this.page,e.highestSeenNode=this.highestSeenNode,e.highestSeenOffset=this.highestSeenOffset,e.lookupPositionOffset=this.lookupPositionOffset,e.flows=this.flows,this.flowPositions)e.flowPositions[n]=this.flowPositions[n].clone();return e},e.isSamePosition=function(t){if(this===t)return!0;if(!t||this.page!==t.page||this.highestSeenOffset!==t.highestSeenOffset)return!1;var e=Object.keys(this.flowPositions),n=Object.keys(t.flowPositions);if(e.length!==n.length)return!1;for(var i=0,r=e;i<r.length;i++){var o=r[i];if(!this.flowPositions[o].isSamePosition(t.flowPositions[o]))return!1}return!0},e.hasContent=function(t,e){var n=this.flowPositions[t];return!!n&&n.hasContent(e)},e.startSideOfFlow=function(t){var e=this.flowPositions[t];return e?e.startSide:"any"},e.firstFlowChunkOfFlow=function(t){var e=this.flowPositions[t];if(!e)return null;var n=e.positions[0];return n?n.flowChunk:null},t}(),rs=function(){function t(t){this.element=t,this.left=0,this.top=0,this.marginLeft=0,this.marginRight=0,this.marginTop=0,this.marginBottom=0,this.borderLeft=0,this.borderRight=0,this.borderTop=0,this.borderBottom=0,this.paddingLeft=0,this.paddingRight=0,this.paddingTop=0,this.paddingBottom=0,this.width=0,this.height=0,this.originX=0,this.originY=0,this.exclusions=null,this.innerShape=null,this.computedBlockSize=0,this.snapWidth=0,this.snapHeight=0,this.snapOffsetX=0,this.snapOffsetY=0,this.vertical=!1}var e=t.prototype;return e.getInsetTop=function(){return this.marginTop+this.borderTop+this.paddingTop},e.getInsetBottom=function(){return this.marginBottom+this.borderBottom+this.paddingBottom},e.getInsetLeft=function(){return this.marginLeft+this.borderLeft+this.paddingLeft},e.getInsetRight=function(){return this.marginRight+this.borderRight+this.paddingRight},e.getInsetBefore=function(){return this.vertical?this.getInsetRight():this.getInsetTop()},e.getInsetAfter=function(){return this.vertical?this.getInsetLeft():this.getInsetBottom()},e.getInsetStart=function(){return this.vertical?this.getInsetTop():this.getInsetLeft()},e.getInsetEnd=function(){return this.vertical?this.getInsetBottom():this.getInsetRight()},e.getBeforeEdge=function(t){return this.vertical?t.right:t.top},e.getAfterEdge=function(t){return this.vertical?t.left:t.bottom},e.getStartEdge=function(t){return this.vertical?t.top:t.left},e.getEndEdge=function(t){return this.vertical?t.bottom:t.right},e.getInlineSize=function(t){return this.vertical?t.bottom-t.top:t.right-t.left},e.getBoxSize=function(t){return this.vertical?t.right-t.left:t.bottom-t.top},e.getBoxDir=function(){return this.vertical?-1:1},e.getInlineDir=function(){return 1},e.copyFrom=function(t){this.element=t.element,this.left=t.left,this.top=t.top,this.marginLeft=t.marginLeft,this.marginRight=t.marginRight,this.marginTop=t.marginTop,this.marginBottom=t.marginBottom,this.borderLeft=t.borderLeft,this.borderRight=t.borderRight,this.borderTop=t.borderTop,this.borderBottom=t.borderBottom,this.paddingLeft=t.paddingLeft,this.paddingRight=t.paddingRight,this.paddingTop=t.paddingTop,this.paddingBottom=t.paddingBottom,this.width=t.width,this.height=t.height,this.originX=t.originX,this.originY=t.originY,this.innerShape=t.innerShape,this.exclusions=t.exclusions,this.computedBlockSize=t.computedBlockSize,this.snapWidth=t.snapWidth,this.snapHeight=t.snapHeight,this.vertical=t.vertical},e.setVerticalPosition=function(t,e){this.top=t,this.height=e,tt(this.element,"top",t+"px"),tt(this.element,"height",e+"px")},e.setHorizontalPosition=function(t,e){this.left=t,this.width=e,tt(this.element,"left",t+"px"),tt(this.element,"width",e+"px")},e.setBlockPosition=function(t,e){this.vertical?this.setHorizontalPosition(t+e*this.getBoxDir(),e):this.setVerticalPosition(t,e)},e.setInlinePosition=function(t,e){this.vertical?this.setVerticalPosition(t,e):this.setHorizontalPosition(t,e)},e.clear=function(){for(var t,e=this.element;t=e.lastChild;)e.removeChild(t)},e.getInnerShape=function(){var t=this.getInnerRect();return this.innerShape?this.innerShape.withOffset(t.x1,t.y1):hn(t.x1,t.y1,t.x2,t.y2)},e.getInnerRect=function(){var t=this.originX+this.left+this.getInsetLeft(),e=this.originY+this.top+this.getInsetTop();return new nn(t,e,t+this.width,e+this.height)},e.getPaddingRect=function(){var t=this.originX+this.left+this.marginLeft+this.borderLeft,e=this.originY+this.top+this.marginTop+this.borderTop;return new nn(t,e,t+(this.paddingLeft+this.width+this.paddingRight),e+(this.paddingTop+this.height+this.paddingBottom))},e.getOuterShape=function(t,e){var n=this.getOuterRect();return Pn(t,n.x1,n.y1,n.x2-n.x1,n.y2-n.y1,e)},e.getOuterRect=function(){var t=this.originX+this.left,e=this.originY+this.top,n=this.getInsetLeft()+this.width+this.getInsetRight(),i=this.getInsetTop()+this.height+this.getInsetBottom();return new nn(t,e,t+n,e+i)},t}(),os=function(t){function e(e,n,i,r){var o;return(o=t.call(this)||this).elem=e,o.context=n,o.rootContentValue=i,o.exprContentListener=r,o}A(e,t);var n=e.prototype;return n.visitStrInner=function(t,e){e||(e=this.elem.ownerDocument.createTextNode(t)),this.elem.appendChild(e)},n.visitStr=function(t){return this.visitStrInner(t.str),null},n.visitURL=function(t){if(this.rootContentValue.url)this.elem.setAttribute("src",t.url);else{var e=this.elem.ownerDocument.createElementNS(G.XHTML,"img");e.setAttribute("src",t.url),this.elem.appendChild(e)}return null},n.visitSpaceList=function(t){return this.visitValues(t.values),null},n.visitExpr=function(t){var e=t.toExpr(),n=e.evaluate(this.context);if("string"==typeof n){e instanceof ge&&(n=Er(e.scope,new wi(n,null),"").stringValue());var i=this.exprContentListener(e,n,this.elem.ownerDocument);this.visitStrInner(n,i)}return null},e}(Pe);function as(t){return null!=t&&t!==qe.normal&&t!==qe.none&&t!==qe.inherit}var ss=Ea.FloatReference;function ls(t){switch(t){case ss.INLINE:return!1;case ss.COLUMN:case ss.REGION:case ss.PAGE:return!0;default:throw new Error("Unknown float-reference: "+t)}}var us=function(){function t(t,e,n,i,r,o){this.nodePosition=t,this.floatReference=e,this.floatSide=n,this.clearSide=i,this.flowName=r,this.floatMinWrapBlock=o,this.order=null,this.id=null}var e=t.prototype;return e.getOrder=function(){if(null===this.order)throw new Error("The page float is not yet added");return this.order},e.getId=function(){if(!this.id)throw new Error("The page float is not yet added");return this.id},e.isAllowedOnContext=function(t){return t.isAnchorAlreadyAppeared(this.getId())},e.isAllowedToPrecede=function(t){return!1},t}(),cs=function(){function t(){this.floats=[],this.nextPageFloatIndex=0}var e=t.prototype;return e.nextOrder=function(){return this.nextPageFloatIndex++},e.createPageFloatId=function(t){return"pf"+t},e.addPageFloat=function(t){if(this.floats.findIndex((function(e){return ja(e.nodePosition,t.nodePosition)}))>=0)throw new Error("A page float with the same source node is already registered");var e=t.order=this.nextOrder();t.id=this.createPageFloatId(e),this.floats.push(t)},e.findPageFloatByNodePosition=function(t){var e=this.floats.findIndex((function(e){return ja(e.nodePosition,t)}));return e>=0?this.floats[e]:null},e.findPageFloatById=function(t){var e=this.floats.findIndex((function(e){return e.id===t}));return e>=0?this.floats[e]:null},t}(),hs=function(){function t(t,e,n,i,r){this.floatReference=t,this.floatSide=e,this.continuations=n,this.area=i,this.continues=r}var e=t.prototype;return e.hasFloat=function(t){return this.continuations.some((function(e){return e.float===t}))},e.findNotAllowedFloat=function(t){for(var e=this.continuations.length-1;e>=0;e--){var n=this.continuations[e].float;if(!n.isAllowedOnContext(t))return n}return null},e.getOuterShape=function(){return this.area.getOuterShape(null,null)},e.getOuterRect=function(){return this.area.getOuterRect()},e.getOrder=function(){var t=this.continuations.map((function(t){return t.float}));return Math.min.apply(null,t.map((function(t){return t.getOrder()})))},e.shouldBeStashedBefore=function(t){return this.getOrder()<t.getOrder()},e.addContinuations=function(t){var e=this;t.forEach((function(t){e.continuations.push(t)}))},e.getFlowName=function(){var t=this.continuations[0].float.flowName;return this.continuations.every((function(e){return e.float.flowName===t})),t},t}(),fs=function(){function t(t,e){this.float=t,this.nodePosition=e}return t.prototype.equals=function(t){return!!t&&(this===t||this.float===t.float&&ja(this.nodePosition,t.nodePosition))},t}(),ds=function(){function t(t,e,n,i,r,o,a){this.parent=t,this.floatReference=e,this.container=n,this.flowName=i,this.generatingNodePosition=r,this.children=[],this.invalidated=!1,this.forbiddenFloats=[],this.floatFragments=[],this.stashedFloatFragments=[],this.floatAnchors={},this.floatsDeferredToNext=[],this.layoutConstraints=[],this.locked=!1,t&&t.children.push(this),this.writingMode=o||t&&t.writingMode||qe.horizontal_tb,this.direction=a||t&&t.direction||qe.ltr,this.floatStore=t?t.floatStore:new cs;var s=this.getPreviousSibling();this.floatsDeferredFromPrevious=s?[].concat(s.floatsDeferredToNext):[]}var e=t.prototype;return e.getParent=function(t){if(!this.parent)throw new Error("No PageFloatLayoutContext for "+t);return this.parent},e.getPreviousSiblingOf=function(t,e,n,i){var r=this.children.indexOf(t);r<0&&(r=this.children.length);for(var o=r-1;o>=0;o--){var a=this.children[o];if(a.floatReference===e&&a.flowName===n&&ja(a.generatingNodePosition,i))return a;if(a=a.getPreviousSiblingOf(null,e,n,i))return a}return null},e.getPreviousSibling=function(){for(var t,e=this,n=this.parent;n;){if(t=n.getPreviousSiblingOf(e,this.floatReference,this.flowName,this.generatingNodePosition))return t;e=n,n=n.parent}return null},e.getContainer=function(t){return t&&t!==this.floatReference?this.getParent(t).getContainer(t):this.container},e.setContainer=function(t){this.container=t,this.reattachFloatFragments()},e.addPageFloat=function(t){this.floatStore.addPageFloat(t)},e.getPageFloatLayoutContext=function(t){return t===this.floatReference?this:this.getParent(t).getPageFloatLayoutContext(t)},e.findPageFloatByNodePosition=function(t){return this.floatStore.findPageFloatByNodePosition(t)},e.forbid=function(t){var e=t.getId(),n=t.floatReference;n===this.floatReference?this.forbiddenFloats.includes(e)||(this.forbiddenFloats.push(e),(new gs).findByFloat(t).forbid(t,this)):this.getParent(n).forbid(t)},e.isForbidden=function(t){var e=t.getId(),n=t.floatReference;return n===this.floatReference?this.forbiddenFloats.includes(e):this.getParent(n).isForbidden(t)},e.addPageFloatFragment=function(t,e){var n=t.floatReference;n!==this.floatReference?this.getParent(n).addPageFloatFragment(t,e):this.floatFragments.includes(t)||(this.floatFragments.push(t),this.floatFragments.sort((function(t,e){return t.getOrder()-e.getOrder()}))),e||this.invalidate()},e.removePageFloatFragment=function(t,e){var n=t.floatReference;if(n!==this.floatReference)this.getParent(n).removePageFloatFragment(t,e);else{var i=this.floatFragments.indexOf(t);if(i>=0){var r=this.floatFragments.splice(i,1)[0],o=r.area&&r.area.element;o&&o.parentNode&&o.parentNode.removeChild(o),e||this.invalidate()}}},e.findPageFloatFragment=function(t){if(t.floatReference!==this.floatReference)return this.getParent(t.floatReference).findPageFloatFragment(t);var e=this.floatFragments.findIndex((function(e){return e.hasFloat(t)}));return e>=0?this.floatFragments[e]:null},e.hasFloatFragments=function(t){return!(!(this.floatFragments.length>0)||t&&!this.floatFragments.some(t))||!!this.parent&&this.parent.hasFloatFragments(t)},e.hasContinuingFloatFragmentsInFlow=function(t){return this.hasFloatFragments((function(e){return e.continues&&e.getFlowName()===t}))},e.registerPageFloatAnchor=function(t,e){this.floatAnchors[t.getId()]=e},e.collectPageFloatAnchors=function(){var t=Object.assign({},this.floatAnchors);return this.children.reduce((function(t,e){return Object.assign(t,e.collectPageFloatAnchors())}),t)},e.isAnchorAlreadyAppeared=function(t){if(this.getDeferredPageFloatContinuations().some((function(e){return e.float.getId()===t})))return!0;var e=this.collectPageFloatAnchors()[t];return!!e&&!(!this.container||!this.container.element)&&this.container.element.contains(e)},e.deferPageFloat=function(t){var e=t.float;if(e.floatReference===this.floatReference){var n=this.floatsDeferredToNext.findIndex((function(t){return t.float===e}));n>=0?this.floatsDeferredToNext.splice(n,1,t):this.floatsDeferredToNext.push(t)}else this.getParent(e.floatReference).deferPageFloat(t)},e.hasPrecedingFloatsDeferredToNext=function(t,e){if(!e&&t.floatReference!==this.floatReference)return this.getParent(t.floatReference).hasPrecedingFloatsDeferredToNext(t,!1);var n=t.getOrder();return!!this.floatsDeferredToNext.some((function(e){return e.float.getOrder()<n&&!t.isAllowedToPrecede(e.float)}))||!!this.parent&&this.parent.hasPrecedingFloatsDeferredToNext(t,!0)},e.getLastFollowingFloatInFragments=function(t){var e=t.getOrder(),n=null;if(this.floatFragments.forEach((function(t){t.continuations.forEach((function(t){var i=t.float,r=i.getOrder();r>e&&(!n||r>n.getOrder())&&(n=i)}))})),this.parent){var i=this.parent.getLastFollowingFloatInFragments(t);i&&(!n||i.getOrder()>n.getOrder())&&(n=i)}return n},e.getDeferredPageFloatContinuations=function(t){t=t||this.flowName;var e=this.floatsDeferredFromPrevious.filter((function(e){return!t||e.float.flowName===t}));return this.parent&&(e=this.parent.getDeferredPageFloatContinuations(t).concat(e)),e.sort((function(t,e){return t.float.getOrder()-e.float.getOrder()}))},e.getPageFloatContinuationsDeferredToNext=function(t){t=t||this.flowName;var e=this.floatsDeferredToNext.filter((function(e){return!t||e.float.flowName===t}));return this.parent?this.parent.getPageFloatContinuationsDeferredToNext(t).concat(e):e},e.getFloatsDeferredToNextInChildContexts=function(){for(var t=[],e=[],n=this.children.length-1;n>=0;n--){var i=this.children[n];e.includes(i.flowName)||(e.push(i.flowName),t=(t=t.concat(i.floatsDeferredToNext.map((function(t){return t.float})))).concat(i.getFloatsDeferredToNextInChildContexts()))}return t},e.checkAndForbidNotAllowedFloat=function(){if(this.checkAndForbidFloatFollowingDeferredFloat())return!0;for(var t=this.floatFragments.length-1;t>=0;t--){var e=this.floatFragments[t],n=e.findNotAllowedFloat(this);if(n)return this.locked?this.invalidate():(this.removePageFloatFragment(e),this.forbid(n),this.removeEndFloatFragments(e.floatSide)),!0}return!(this.floatReference!==ss.REGION||!this.parent.locked)&&this.parent.checkAndForbidNotAllowedFloat()},e.checkAndForbidFloatFollowingDeferredFloat=function(){var t=this,e=this.getFloatsDeferredToNextInChildContexts(),n=this.floatFragments.reduce((function(t,e){return t.concat(e.continuations.map((function(t){return t.float})))}),[]);n.sort((function(t,e){return e.getOrder()-t.getOrder()}));for(var i,r=function(){var n=i.value,r=n.getOrder();if(e.some((function(t){return!n.isAllowedToPrecede(t)&&r>t.getOrder()}))){if(t.locked)t.invalidate();else{t.forbid(n);var o=t.findPageFloatFragment(n);t.removePageFloatFragment(o)}return{v:!0}}},o=B(n);!(i=o()).done;){var a=r();if("object"==typeof a)return a.v}return!1},e.finish=function(){var t=this;if(!this.checkAndForbidNotAllowedFloat()){for(var e=this.floatsDeferredToNext.length-1;e>=0;e--)if(!this.floatsDeferredToNext[e].float.isAllowedOnContext(this)){if(this.locked)return void this.invalidate();this.floatsDeferredToNext.splice(e,1)}this.floatsDeferredFromPrevious.forEach((function(e){t.floatsDeferredToNext.findIndex((function(t){return e.equals(t)}))>=0||t.floatFragments.some((function(t){return t.hasFloat(e.float)}))||t.floatsDeferredToNext.push(e)}))}},e.hasSameContainerAs=function(t){return!!this.container&&!!t.container&&this.container.element===t.container.element},e.invalidate=function(){var t=this;this.invalidated=!0,this.locked||(this.container&&(this.children.forEach((function(e){t.hasSameContainerAs(e)&&e.floatFragments.forEach((function(t){var e=t.area.element;e&&e.parentNode&&e.parentNode.removeChild(e)}))})),this.container.clear()),this.children.forEach((function(t){t.layoutConstraints.splice(0)})),this.children.splice(0),Object.keys(this.floatAnchors).forEach((function(e){delete t.floatAnchors[e]})))},e.detachChildren=function(){var t=this.children.splice(0);return t.forEach((function(t){t.floatFragments.forEach((function(t){var e=t.area.element;e&&e.parentNode&&e.parentNode.removeChild(e)}))})),t},e.attachChildren=function(t){var e=this;t.forEach((function(t){e.children.push(t),t.reattachFloatFragments()}))},e.isInvalidated=function(){return this.invalidated||!!this.parent&&this.parent.isInvalidated()},e.validate=function(){this.invalidated=!1},e.toLogical=function(t){return ba(t,this.writingMode.toString(),this.direction.toString()||null,Pa)},e.toPhysical=function(t){return ba(t,this.writingMode.toString(),this.direction.toString()||null,Ia)},e.removeEndFloatFragments=function(t){var e=this.toLogical(t);if("block-end"===e||"inline-end"===e)for(var n=0;n<this.floatFragments.length;){var i=this.floatFragments[n];this.toLogical(i.floatSide)===e?this.removePageFloatFragment(i):n++}},e.stashEndFloatFragments=function(t){var e=t.floatReference;if(e===this.floatReference){var n=this.toLogical(t.floatSide);if("block-end"===n||"snap-block"===n||"inline-end"===n)for(var i=0;i<this.floatFragments.length;){var r=this.floatFragments[i],o=this.toLogical(r.floatSide);(o===n||"snap-block"===n&&"block-end"===o)&&r.shouldBeStashedBefore(t)?(this.stashedFloatFragments.push(r),this.floatFragments.splice(i,1)):i++}}else this.getParent(e).stashEndFloatFragments(t)},e.restoreStashedFragments=function(t){var e=this;t===this.floatReference?(this.stashedFloatFragments.forEach((function(t){e.addPageFloatFragment(t,!0)})),this.stashedFloatFragments.splice(0)):this.getParent(t).restoreStashedFragments(t)},e.discardStashedFragments=function(t){t===this.floatReference?this.stashedFloatFragments.splice(0):this.getParent(t).discardStashedFragments(t)},e.getStashedFloatFragments=function(t){return t===this.floatReference?this.stashedFloatFragments.concat().sort((function(t,e){return e.getOrder()-t.getOrder()})):this.getParent(t).getStashedFloatFragments(t)},e.getLimitValue=function(t,e,n,i){var r=this.toLogical(t),o=this.toPhysical(t),a=this.getLimitValueInner(r,e,n,i);if(this.parent&&this.parent.container){var s=this.parent.getLimitValue(o,e,n,i);switch(o){case"top":case"left":return Math.max(a,s);case"bottom":case"right":return Math.min(a,s)}}return a},e.getLimitValueInner=function(t,e,n,i){var r=this.getLimitValuesInner(e,n,i);switch(t){case"block-start":return this.container.vertical?r.right:r.top;case"block-end":return this.container.vertical?r.left:r.bottom;case"inline-start":return this.container.vertical?r.top:r.left;case"inline-end":return this.container.vertical?r.bottom:r.right;default:throw new Error("Unknown logical side: "+t)}},e.getLimitValuesInner=function(t,e,n){var i=this,r=this.container.originX,o=this.container.originY,a=this.container.getPaddingRect(),s={top:a.y1-o,left:a.x1-r,bottom:a.y2-o,right:a.x2-r,floatMinWrapBlockStart:0,floatMinWrapBlockEnd:0};function l(n,i,r){return"%"===n.unit?r*n.num/100:t.convertLengthToPx(n,i,e)}var u=this.floatFragments;return u.length>0&&(s=u.reduce((function(t,e){if(n&&!n(e,i))return t;var r=i.toLogical(e.floatSide),o=e.area,s=e.continuations[0].float.floatMinWrapBlock,u=t.top,c=t.left,h=t.bottom,f=t.right,d=t.floatMinWrapBlockStart,p=t.floatMinWrapBlockEnd;switch(r){case"inline-start":o.vertical?u=Math.max(u,o.top+o.height):c=Math.max(c,o.left+o.width);break;case"block-start":o.vertical?(s&&o.left<f&&(d=l(s,o.rootViewNodes[0],a.x2-a.x1)),f=Math.min(f,o.left)):(s&&o.top+o.height>u&&(d=l(s,o.rootViewNodes[0],a.y2-a.y1)),u=Math.max(u,o.top+o.height));break;case"inline-end":o.vertical?h=Math.min(h,o.top):f=Math.min(f,o.left);break;case"block-end":o.vertical?(s&&o.left+o.width>c&&(p=l(s,o.rootViewNodes[0],a.x2-a.x1)),c=Math.max(c,o.left+o.width)):(s&&o.top<h&&(p=l(s,o.rootViewNodes[0],a.y2-a.y1)),h=Math.min(h,o.top));break;default:throw new Error("Unknown logical float side: "+r)}return{top:u,left:c,bottom:h,right:f,floatMinWrapBlockStart:d,floatMinWrapBlockEnd:p}}),s)),s.left+=r,s.right+=r,s.top+=o,s.bottom+=o,s},e.setFloatAreaDimensions=function(t,e,n,i,r,o,a){if(e!==this.floatReference)return this.getParent(e).setFloatAreaDimensions(t,e,n,i,r,o,a);var s=this.toLogical(n);if("snap-block"===s){if(!a["block-start"]&&!a["block-end"])return null}else if(!a[s])return null;var l,u,c,h,f=this.getLimitValue("block-start",t.layoutContext,t.clientLayout),d=this.getLimitValue("block-end",t.layoutContext,t.clientLayout),p=this.getLimitValue("inline-start",t.layoutContext,t.clientLayout),g=this.getLimitValue("inline-end",t.layoutContext,t.clientLayout),m=t.vertical?t.originX:t.originY,v=t.vertical?t.originY:t.originX;function b(e,n){var i=e(t.bands,n);return i?(t.vertical&&(i=bn(i)),f=t.vertical?Math.min(f,i.x2):Math.max(f,i.y1),d=t.vertical?Math.max(d,i.x1):Math.min(d,i.y2),!0):o}if(f=t.vertical?Math.min(f,t.left+t.getInsetLeft()+t.width+t.getInsetRight()+m):Math.max(f,t.top+m),d=t.vertical?Math.max(d,t.left+m):Math.min(d,t.top+t.getInsetTop()+t.height+t.getInsetBottom()+m),r){var y=t.vertical?vn(new nn(d,p,f,g)):new nn(p,f,g,d);if(("block-start"===s||"snap-block"===s||"inline-start"===s)&&!b(Sn,y))return null;if(("block-end"===s||"snap-block"===s||"inline-end"===s)&&!b(Nn,y))return null;if(l=(c=(d-f)*t.getBoxDir())-t.getInsetBefore()-t.getInsetAfter(),u=(h=g-p)-t.getInsetStart()-t.getInsetEnd(),!o&&(l<=0||u<=0))return null}else{c=(l=t.computedBlockSize)+t.getInsetBefore()+t.getInsetAfter();var w=(d-f)*t.getBoxDir();if("snap-block"===s){if(null===i)s="block-start";else{var E=this.container.getPaddingRect();s=this.container.getBoxDir()*(i-(this.container.vertical?E.x2:E.y1))<=this.container.getBoxDir()*((this.container.vertical?E.x1:E.y2)-i-c)?"block-start":"block-end"}if(!a[s]){if(!a["block-end"])return null;s="block-end"}}if(!o&&w<c)return null;if(h=(u="inline-start"===s||"inline-end"===s?Aa(t.clientLayout,t.element,[ya.FIT_CONTENT_INLINE_SIZE])[ya.FIT_CONTENT_INLINE_SIZE]:t.adjustContentRelativeSize?t.getContentInlineSize():t.vertical?t.height:t.width)+t.getInsetStart()+t.getInsetEnd(),!o&&g-p<h)return null}switch(f-=m,d-=m,p-=v,g-=v,s){case"inline-start":case"block-start":case"snap-block":t.setInlinePosition(p,u),t.setBlockPosition(f,l);break;case"inline-end":case"block-end":t.setInlinePosition(g-h,u),t.setBlockPosition(d-c*t.getBoxDir(),l);break;default:throw new Error("unknown float direction: "+n)}return s},e.getFloatFragmentExclusions=function(){var t=this.floatFragments.map((function(t){return t.getOuterShape()}));return this.parent?this.parent.getFloatFragmentExclusions().concat(t):t},e.reattachFloatFragments=function(){var t=this.container.element&&this.container.element.parentNode;t&&this.floatFragments.forEach((function(e){t.appendChild(e.area.element)}))},e.getMaxReachedAfterEdge=function(){var t=this.getContainer().vertical;return this.floatFragments.reduce((function(e,n){var i=n.getOuterRect();return t?Math.min(e,i.x1):Math.max(e,i.y2)}),t?1/0:0)},e.getBlockStartEdgeOfBlockEndFloats=function(){var t=this.getContainer().vertical;return this.floatFragments.filter((function(t){return"block-end"===t.floatSide})).reduce((function(e,n){var i=n.getOuterRect();return t?Math.max(e,i.x2):Math.min(e,i.y1)}),t?0:1/0)},e.getPageFloatClearEdge=function(t,e){function n(t){return function(e){return t.isAnchorAlreadyAppeared(e.float.getId())}}function i(t,e){return t.continuations.some(n(e))}for(var r=e.getPaddingRect(),o=e.vertical?r.x1:r.y2,a=this;a;){if(a.floatsDeferredToNext.some(n(a)))return o;a=a.parent}var s=this.getLimitValue("block-start",e.layoutContext,e.clientLayout,i);return this.getLimitValue("block-end",e.layoutContext,e.clientLayout,i)*e.getBoxDir()<o*e.getBoxDir()?o:s},e.getPageFloatPlacementCondition=function(t,e,n){var i=this;if(t.floatReference!==this.floatReference)return this.getParent(t.floatReference).getPageFloatPlacementCondition(t,e,n);var r={"block-start":!0,"block-end":!0,"inline-start":!0,"inline-end":!0};if(!n)return r;var o,a=this.toLogical(e),s=this.toLogical(n);o="all"===s?["block-start","block-end","inline-start","inline-end"]:"both"===s?["inline-start","inline-end"]:"same"===s?"snap-block"===a?["block-start","block-end"]:[a]:[s];var l=t.getOrder();function u(t){return function(e){return e.floatSide===t&&e.getOrder()<l}}return o.forEach((function(t){switch(t){case"block-start":case"inline-start":r[t]=!function t(e,n){return e.children.some((function(e){return e.floatFragments.some(u(n))||t(e,n)}))}(i,t);break;case"block-end":case"inline-end":r[t]=!function t(e,n){var i=e.parent;return!!i&&(i.floatFragments.some(u(n))||t(i,n))}(i,t);break;default:throw new Error("Unexpected side: "+t)}})),r},e.getLayoutConstraints=function(){return(this.parent?this.parent.getLayoutConstraints():[]).concat(this.layoutConstraints)},e.addLayoutConstraint=function(t,e){e===this.floatReference?this.layoutConstraints.push(t):this.getParent(e).addLayoutConstraint(t,e)},e.isColumnFullWithPageFloats=function(t){for(var e=t.layoutContext,n=t.clientLayout,i=this,r=null;i&&i.container;){var o=i.getLimitValuesInner(e,n);r?t.vertical?(o.right<r.right&&(r.right=o.right,r.floatMinWrapBlockStart=o.floatMinWrapBlockStart),o.left>r.left&&(r.left=o.left,r.floatMinWrapBlockEnd=o.floatMinWrapBlockEnd)):(o.top>r.top&&(r.top=o.top,r.floatMinWrapBlockStart=o.floatMinWrapBlockStart),o.bottom<r.bottom&&(r.bottom=o.bottom,r.floatMinWrapBlockEnd=o.floatMinWrapBlockEnd)):r=o,i=i.parent}var a=Math.max(r.floatMinWrapBlockStart,r.floatMinWrapBlockEnd);return(t.vertical?r.right-r.left:r.bottom-r.top)<=a},e.getMaxBlockSizeOfPageFloats=function(){var t=this.getContainer().vertical;return this.floatFragments.length?Math.max.apply(null,this.floatFragments.map((function(e){var n=e.area;return t?n.width:n.height}))):0},e.lock=function(){this.locked=!0},e.unlock=function(){this.locked=!1},e.isLocked=function(){return this.locked},t}(),ps=[],gs=function(){function t(){}t.register=function(t){ps.push(t)};var e=t.prototype;return e.findByNodeContext=function(t){for(var e=ps.length-1;e>=0;e--){var n=ps[e];if(n.appliesToNodeContext(t))return n}throw new Error("No PageFloatLayoutStrategy found for "+t)},e.findByFloat=function(t){for(var e=ps.length-1;e>=0;e--){var n=ps[e];if(n.appliesToFloat(t))return n}throw new Error("No PageFloatLayoutStrategy found for "+t)},t}();gs.register(new(function(){function t(){}var e=t.prototype;return e.appliesToNodeContext=function(t){return ls(t.floatReference)},e.appliesToFloat=function(t){return!0},e.createPageFloat=function(t,e,n){var i=t.floatReference,r=t.floatSide,o=t.toNodePosition();return n.resolveFloatReferenceFromColumnSpan(i,t.columnSpan,t).thenAsync((function(n){var a=new us(o,i=n,r,t.clearSide,e.flowName,t.floatMinWrapBlock);return e.addPageFloat(a),Ti(a)}))},e.createPageFloatFragment=function(t,e,n,i){return new hs(t[0].float.floatReference,e,t,n,i)},e.findPageFloatFragment=function(t,e){return e.findPageFloatFragment(t)},e.adjustPageFloatArea=function(t,e,n){},e.forbid=function(t,e){},t}()));var ms=hs,vs=function(t){function e(e,n,i,r,o){var a;return(a=t.call(this,e,n,"block-end",null,i,o)||this).footnotePolicy=r,a}return A(e,t),e.prototype.isAllowedToPrecede=function(t){return!(t instanceof e)},e}(us),bs=function(t){function e(e,n,i,r){return t.call(this,e,"block-end",n,i,r)||this}A(e,t);var n=e.prototype;return n.getOrder=function(){return 1/0},n.shouldBeStashedBefore=function(t){return t instanceof vs||this.getOrder()<t.getOrder()},e}(ms),ys=function(){function t(t){this.footnote=t}return t.prototype.allowLayout=function(t){return!ja(t.toNodePosition(),this.footnote.nodePosition)},t}();gs.register(new(function(){function t(){}var e=t.prototype;return e.appliesToNodeContext=function(t){return"footnote"===t.floatSide},e.appliesToFloat=function(t){return t instanceof vs},e.createPageFloat=function(t,e,n){var i=ss.REGION,r=e.getPageFloatLayoutContext(i);e.getPageFloatLayoutContext(ss.PAGE).hasSameContainerAs(r)&&(i=ss.PAGE);var o=t.toNodePosition(),a=new vs(o,i,e.flowName,t.footnotePolicy,t.floatMinWrapBlock);return e.addPageFloat(a),Ti(a)},e.createPageFloatFragment=function(t,e,n,i){return new bs(t[0].float.floatReference,t,n,i)},e.findPageFloatFragment=function(t,e){return e.getPageFloatLayoutContext(t.floatReference).floatFragments.filter((function(t){return t instanceof bs}))[0]||null},e.adjustPageFloatArea=function(t,e,n){t.isFootnote=!0,t.adjustContentRelativeSize=!1;var i=t.element;t.vertical=n.layoutContext.applyFootnoteStyle(e.vertical,n.layoutContext.nodeContext&&"rtl"===n.layoutContext.nodeContext.direction,i),t.convertPercentageSizesToPx(i),n.setComputedInsets(i,t),n.setComputedWidthAndHeight(i,t)},e.forbid=function(t,e){var n=t;switch(n.footnotePolicy){case qe.line:var i=new ys(n);e.addLayoutConstraint(i,n.floatReference)}},t}()));var ws={page:!0,left:!0,right:!0,recto:!0,verso:!0,column:!0,region:!0};function Es(t){return!!ws[t]}var Ss={avoid:!0,"avoid-page":!0,"avoid-column":!0,"avoid-region":!0};function Ns(t){return!!Ss[t]}function Cs(t,e){if(!t)return e;if(!e)return t;var n=Es(t),i=Es(e);if(!n||!i)return i?e:n?t:Ns(e)?e:Ns(t)?t:e;switch(e){case"column":return t;case"region":return"column"===t?e:t;default:return e}}function Ts(t){switch(t){case"left":case"right":case"recto":case"verso":return t;default:return"any"}}function xs(t){switch(t){case"left":case"right":case"recto":case"verso":return t;default:return null}}function Is(t,e,n,i){var r=t.viewNode;if(!r)return NaN;if(1==r.nodeType){if(t.after||!t.inline){var o=e.getElementClientRect(r);if(o.right>=o.left&&o.bottom>=o.top)return t.after?i?o.left:o.bottom:i?o.right:o.top}return NaN}var a=NaN,s=r.ownerDocument.createRange(),l=r.textContent.length;if(!l)return NaN;t.after&&(n+=l),n>=l&&(n=l-1),s.setStart(r,n),s.setEnd(r,n+1);var u=e.getRangeClientRects(s);i&&function(t){if(null==mt){var e=t.ownerDocument,n=e.createElement("div");n.style.position="absolute",n.style.top="0px",n.style.left="0px",n.style.width="100px",n.style.height="100px",n.style.overflow="hidden",n.style.lineHeight="16px",n.style.fontSize="16px",tt(n,"writing-mode","vertical-rl"),t.appendChild(n);var i=e.createTextNode("a a a a a a a a a a a a a a a a");n.appendChild(i);var r=e.createRange();r.setStart(i,0),r.setEnd(i,1);var o=r.getBoundingClientRect();mt=o.right-o.left<10,t.removeChild(n)}return mt}(document.body)&&(u=function(t,e,n){var i=n.ownerDocument.createRange();i.setStart(n,0),i.setEnd(n,n.textContent.length);for(var r,o=t.getRangeClientRects(i),a=[],s=B(e);!(r=s()).done;){var l=r.value,u=void 0;for(u=0;u<o.length;u++){var c=o[u];if(l.top>=c.top&&l.bottom<=c.bottom&&Math.abs(l.left-c.left)<1){a.push({top:l.top,left:c.left,bottom:l.bottom,right:c.right});break}}u==o.length&&(f.warn("Could not fix character box"),a.push(l))}return a}(e,u,r));for(var c,h=0,d=B(u);!(c=d()).done;){var p=c.value,g=i?p.bottom-p.top:p.right-p.left;p.right>p.left&&p.bottom>p.top&&(isNaN(a)||g>h)&&(a=i?p.left:p.bottom,h=g)}return a}function Ps(t,e,n){var i=e.clientLayout.getElementClientRect(t),r=e.getComputedMargin(t);return n?i.width+r.left+r.right:i.height+r.top+r.bottom}function As(t){for(;t;){if(t.parentNode===t.ownerDocument)return!1;t=t.parentNode}return!0}function Os(t,e){if(t)for(var n;(n=t.lastChild)!=e;)t.removeChild(n)}function Rs(t){return!!t.getAttribute("data-adapt-spec")}function ks(t){if(!t)return!1;var e=t.viewNode;return!(!e||1!==e.nodeType)&&Rs(e)}g("SIMPLE_PROPERTY",(function(t){var e=t.name,n=t.value;switch(e){case"page-break-before":case"page-break-after":case"page-break-inside":return{name:e.replace(/^page-/,""),value:n===qe.always?qe.page:n,important:t.important};default:return t}}));var Ls=function(){function t(){}var e=t.prototype;return e.calculateOffset=function(t){return Fs(this.getNodeContext(),t.collectElementsOffset())},e.breakPositionChosen=function(t){},e.getNodeContext=function(){return null},t}();function Fs(t,e){return{current:e.reduce((function(e,n){return e+n.calculateOffset(t)}),0),minimum:e.reduce((function(e,n){return e+n.calculateMinimumOffset(t)}),0)}}var _s=function(t){function e(e,n,i,r){var o;return(o=t.call(this)||this).position=e,o.breakOnEdge=n,o.overflows=i,o.computedBlockSize=r,o.isEdgeUpdated=!1,o.edge=0,o.overflowIfRepetitiveElementsDropped=i,o}A(e,t);var n=e.prototype;return n.findAcceptableBreak=function(t,e){return this.updateOverflows(t),e<this.getMinBreakPenalty()?null:t.findEdgeBreakPosition(this)},n.getMinBreakPenalty=function(){if(!this.isEdgeUpdated)throw new Error("EdgeBreakPosition.prototype.updateEdge not called");var t=this.isFirstContentOfRepetitiveElementsOwner()&&!this.overflowIfRepetitiveElementsDropped;return(Ns(this.breakOnEdge)?1:0)+(this.overflows&&!t?3:0)+(this.position.parent?this.position.parent.breakPenalty:0)},n.updateEdge=function(t){var e=t.calculateClonedPaddingBorder(this.position);this.edge=Is(this.position,t.clientLayout,0,t.vertical)+e,this.isEdgeUpdated=!0},n.updateOverflows=function(t){this.isEdgeUpdated||this.updateEdge(t);var e=this.edge,n=this.calculateOffset(t);this.overflowIfRepetitiveElementsDropped=t.isOverflown(e+(t.vertical?-1:1)*n.minimum),this.overflows=this.position.overflow=t.isOverflown(e+(t.vertical?-1:1)*n.current)},n.getNodeContext=function(){return this.position},n.isFirstContentOfRepetitiveElementsOwner=function(){var t=this.getNodeContext();if(!t||!t.parent)return!1;var e=t.parent.formattingContext;if(!Na.isInstanceOfRepetitiveElementsOwnerFormattingContext(e))return!1;var n=e.getRepetitiveElements();return!!n&&n.isFirstContentNode(t)},e}(Ls);function Ds(t){var e,n=t.toString();switch(n){case"inline-flex":e="flex";break;case"inline-grid":e="grid";break;case"inline-table":e="table";break;case"inline":case"table-row-group":case"table-column":case"table-column-group":case"table-header-group":case"table-footer-group":case"table-row":case"table-cell":case"table-caption":case"inline-block":e="block";break;default:e=n}return De(e)}function Bs(t){return t===qe.absolute||t===qe.fixed}function Ms(t,e,n,i){return t===qe.none||(Bs(e)?(n=qe.none,t=Ds(t)):(n&&n!==qe.none||i)&&(t=Ds(t))),{display:t,position:e,float:n}}function Us(t,e,n,i){return Ms(t,e,n,i).display===qe.block}function zs(t){switch(t.toString()){case"inline":case"inline-block":case"inline-list-item":case"inline-flex":case"inline-grid":case"ruby":case"inline-table":return!0;default:return!1}}var Vs=function(){function t(){}return t.prototype.find=function(t){for(var n=v(e.HOOKS.RESOLVE_LAYOUT_PROCESSOR),i=0;i<n.length;i++){var r=n[i](t);if(r)return r}throw new Error("No processor found for a formatting context: "+t.getName())},t}(),Hs=function(){function t(){}var e=t.prototype;return e.layout=function(t,e,n){return e.isFloatNodeContext(t)?e.layoutFloatOrFootnote(t):e.isBreakable(t)?e.layoutBreakableBlock(t):e.layoutUnbreakable(t)},e.createEdgeBreakPosition=function(t,e,n,i){return new _s(t.copy(),e,n,i)},e.startNonInlineElementNode=function(t){return!1},e.afterNonInlineElementNode=function(t,e){return!1},e.clearOverflownViewNodes=function(t,e,n,i){if(n.viewNode&&n.viewNode.parentNode){var r=n.viewNode.parentNode;Os(r,n.viewNode),i&&r.removeChild(n.viewNode)}},e.finishBreak=function(t,e,n,i){var r=n||null!=e.viewNode&&1==e.viewNode.nodeType&&!e.after;return t.clearOverflownViewNodes(e,r),i&&(t.fixJustificationIfNeeded(e,!0),t.layoutContext.processFragmentedBlockEdge(r?e:e.parent)),Ti(!0)},t}(),Gs=function(){function t(t){this.parent=t,this.formattingContextType="Block"}var e=t.prototype;return e.getName=function(){return"Block formatting context (BlockFormattingContext)"},e.isFirstTime=function(t,e){return e},e.getParent=function(){return this.parent},e.saveState=function(){},e.restoreState=function(t){},t}(),Ws=new Hs,Xs=wa.isInstanceOfBlockFormattingContext;g(e.HOOKS.RESOLVE_FORMATTING_CONTEXT,(function(t,e,n,i,r,o){var a=t.parent;return!a&&t.formattingContext||a&&t.formattingContext!==a.formattingContext?null:t.establishesBFC||!t.formattingContext&&Us(n,i,r,o)?new Gs(a?a.formattingContext:null):null})),g(e.HOOKS.RESOLVE_LAYOUT_PROCESSOR,(function(t){return t instanceof Gs?Ws:null}));var js=function(){function t(){this.initialBreakPositions=null,this.initialStateOfFormattingContext=null}var e=t.prototype;return e.layout=function(t,e){return this.prepareLayout(t,e),this.tryLayout(t,e)},e.tryLayout=function(t,e){var n=this,i=Ci("AbstractLayoutRetryer.tryLayout");this.saveState(t,e);var r=this.resolveLayoutMode(t);return r.doLayout(t,e).then((function(o){var a=r.accept(o,e);(a=r.postLayout(o,n.initialPosition,e,a))?i.finish(o):(n.clearNodes(n.initialPosition),n.restoreState(t,e),n.tryLayout(n.initialPosition,e).thenFinish(i))})),i.result()},e.prepareLayout=function(t,e){},e.clearNodes=function(t){for(var e,n,i=t.viewNode||t.parent.viewNode;e=i.lastChild;)i.removeChild(e);for(;n=i.nextSibling;)n.parentNode.removeChild(n)},e.saveState=function(t,e){this.initialPosition=t.copy(),this.initialBreakPositions=[].concat(e.breakPositions),this.initialFragmentLayoutConstraints=[].concat(e.fragmentLayoutConstraints),t.formattingContext&&(this.initialStateOfFormattingContext=t.formattingContext.saveState())},e.restoreState=function(t,e){e.breakPositions=this.initialBreakPositions,e.fragmentLayoutConstraints=this.initialFragmentLayoutConstraints,t.formattingContext&&t.formattingContext.restoreState(this.initialStateOfFormattingContext)},t}(),Ks=function(){function t(){}var e=t.prototype;return e.initialState=function(t){return{nodeContext:t,atUnforcedBreak:!1,break:!1}},e.startNonDisplayableNode=function(t){},e.afterNonDisplayableNode=function(t){},e.startIgnoredTextNode=function(t){},e.afterIgnoredTextNode=function(t){},e.startNonElementNode=function(t){},e.afterNonElementNode=function(t){},e.startInlineElementNode=function(t){},e.afterInlineElementNode=function(t){},e.startNonInlineElementNode=function(t){},e.afterNonInlineElementNode=function(t){},e.finish=function(t){},t}(),Ys=function(){function t(t,e){this.strategy=t,this.layoutContext=e}return t.prototype.iterate=function(t){var e=this,n=this.strategy,i=n.initialState(t),r=Ci("LayoutIterator");return r.loopWithFrame((function(t){for(var r;i.nodeContext;){var o=((r=i.nodeContext.viewNode?1!==i.nodeContext.viewNode.nodeType?za(i.nodeContext.viewNode,i.nodeContext.whitespace)?i.nodeContext.after?n.afterIgnoredTextNode(i):n.startIgnoredTextNode(i):i.nodeContext.after?n.afterNonElementNode(i):n.startNonElementNode(i):i.nodeContext.inline?i.nodeContext.after?n.afterInlineElementNode(i):n.startInlineElementNode(i):i.nodeContext.after?n.afterNonInlineElementNode(i):n.startNonInlineElementNode(i):i.nodeContext.after?n.afterNonDisplayableNode(i):n.startNonDisplayableNode(i))&&r.isPending()?r:Ti(!0)).thenAsync((function(){return i.break?Ti(null):e.layoutContext.nextInTree(i.nodeContext,i.atUnforcedBreak)}));if(o.isPending())return void o.then((function(e){i.break?t.breakLoop():(i.nodeContext=e,t.continueLoop())}));if(i.break)return void t.breakLoop();i.nodeContext=o.get()}n.finish(i),t.breakLoop()})).then((function(){r.finish(i.nodeContext)})),r.result()},t}(),qs=function(t){function e(e){var n;return(n=t.call(this)||this).leadingEdge=e,n}A(e,t);var n=e.prototype;return n.startNonInlineBox=function(t){},n.endEmptyNonInlineBox=function(t){},n.endNonInlineBox=function(t){},n.initialState=function(t){return{nodeContext:t,atUnforcedBreak:!!this.leadingEdge&&t.after,break:!1,leadingEdge:this.leadingEdge,breakAtTheEdge:null,onStartEdges:!1,leadingEdgeContexts:[],lastAfterNodeContext:null}},n.processForcedBreak=function(t,e){var n=!t.leadingEdge&&Es(t.breakAtTheEdge);if(n){var i=t.nodeContext=t.leadingEdgeContexts[0]||t.nodeContext;i.viewNode.parentNode.removeChild(i.viewNode),e.pageBreakType=t.breakAtTheEdge}return n},n.saveEdgeAndProcessOverflow=function(t,e){var n=e.checkOverflowAndSaveEdgeAndBreakPosition(t.lastAfterNodeContext,null,!0,t.breakAtTheEdge);return n&&(t.nodeContext=(t.lastAfterNodeContext||t.nodeContext).modify(),t.nodeContext.overflow=!0),n},n.processLayoutConstraint=function(t,e,n){var i=t.nodeContext,r=!e.allowLayout(i);return r&&(n.checkOverflowAndSaveEdgeAndBreakPosition(t.lastAfterNodeContext,null,!1,t.breakAtTheEdge),(i=t.nodeContext=i.modify()).overflow=!0),r},n.startNonElementNode=function(t){t.onStartEdges=!1},n.startNonInlineElementNode=function(t){return t.leadingEdgeContexts.push(t.nodeContext.copy()),t.breakAtTheEdge=Cs(t.breakAtTheEdge,t.nodeContext.breakBefore),t.onStartEdges=!0,this.startNonInlineBox(t)},n.afterNonInlineElementNode=function(t){var e;return(t.onStartEdges?((e=this.endEmptyNonInlineBox(t))&&e.isPending()?e:Ti(!0)).thenAsync((function(){return t.break||(t.leadingEdgeContexts=[],t.leadingEdge=!1,t.atUnforcedBreak=!1,t.breakAtTheEdge=null),Ti(!0)})):(e=this.endNonInlineBox(t))&&e.isPending()?e:Ti(!0)).thenAsync((function(){return t.break||(t.onStartEdges=!1,t.lastAfterNodeContext=t.nodeContext.copy(),t.breakAtTheEdge=Cs(t.breakAtTheEdge,t.nodeContext.breakAfter)),Ti(!0)}))},e}(Ks),$s=[],Zs=(new DOMParser).parseFromString('<root xmlns="'+G.SHADOW+'"/>',"text/xml"),Qs=["footnote-marker","first-5-lines","first-4-lines","first-3-lines","first-2-lines","first-line","first-letter","before","","after"];function Js(t){return t.getAttribute("data-adapt-pseudo")||""}function tl(t,e){t.setAttribute("data-adapt-pseudo",e)}var el=function(){function t(t,e,n,i,r){this.element=t,this.style=e,this.styler=n,this.context=i,this.exprContentListener=r,this.contentProcessed={}}var e=t.prototype;return e.getStyle=function(t,e){var n=Js(t);this.styler&&n&&n.match(/after$/)&&(this.style=this.styler.getStyle(this.element,!0),this.styler=null);var i=qr(this.style,"_pseudos")[n]||{};if(n.match(/^first-/)&&!i["x-first-pseudo"]){var r,o=1;"first-letter"==n?o=0:null!=(r=n.match(/^first-([0-9]+)-lines$/))&&(o=r[1]-0),i["x-first-pseudo"]=new zr(new Ue(o),0)}return i},e.processContent=function(t,e){var n=Js(t);if(!this.contentProcessed[n]){this.contentProcessed[n]=!0;var i=e.content;i&&as(i)&&i.visit(new os(t,this.context,i,this.exprContentListener))}},t}(),nl=Ir.registerFragmentIndex,il=function(){function t(t,e){this.sourceNode=t,this.styler=e}var e=t.prototype;return e.createElement=function(t,e){var n=this,i=e.viewNode.ownerDocument.createElement("div"),r=new dl(t,i,e),o=r.getColumn().pageBreakType;return r.getColumn().pageBreakType=null,r.layout(this.createNodePositionForPseudoElement(),!0).thenAsync((function(){n.styler.contentProcessed["after-if-continues"]=!1,r.getColumn().pageBreakType=o;var t=i.firstChild;return tt(t,"display","block"),Ti(t)}))},e.createNodePositionForPseudoElement=function(){var t=Zs.createElementNS(G.XHTML,"div");tl(t,"after-if-continues");var e=this.createShadowContext(t);return new ts({steps:[{node:t,shadowType:e.type,shadowContext:e,nodeShadow:null,shadowSibling:null}],offsetInNode:0,after:!1,preprocessedTextContent:null})},e.createShadowContext=function(t){return new $a(this.sourceNode,t,null,null,null,Ta.ShadowType.ROOTED,this.styler)},t}(),rl=function(){function t(t,e,n){this.nodeContext=t,this.afterIfContinues=e,this.pseudoElementHeight=n,this.flagmentLayoutConstraintType="AfterIfContinue"}var e=t.prototype;return e.allowLayout=function(t,e,n){return!(e&&!t||t&&t.overflow)},e.nextCandidate=function(t){return!1},e.postLayout=function(t,e,n,i){},e.finishBreak=function(t,e){var n=this;return this.getRepetitiveElements().affectTo(t)?this.afterIfContinues.createElement(e,this.nodeContext).thenAsync((function(t){return n.nodeContext.viewNode.appendChild(t),Ti(!0)})):Ti(!0)},e.getRepetitiveElements=function(){return new ol(this.nodeContext,this.pseudoElementHeight)},e.equalsTo=function(e){return e instanceof t&&this.afterIfContinues==e.afterIfContinues},e.getPriorityOfFinishBreak=function(){return 9},t}(),ol=function(){function t(t,e){this.nodeContext=t,this.pseudoElementHeight=e}var e=t.prototype;return e.calculateOffset=function(t){return this.affectTo(t)?this.pseudoElementHeight:0},e.calculateMinimumOffset=function(t){return this.calculateOffset(t)},e.affectTo=function(t){if(!t)return!1;var e=t.shadowContext?t.shadowContext.owner:t.sourceNode;if(e===this.nodeContext.sourceNode)return!!t.after;for(var n=e.parentNode;n;n=n.parentNode)if(n===this.nodeContext.sourceNode)return!0;return!1},t}();function al(t,e){if(!t||!t.afterIfContinues||t.after||e.isFloatNodeContext(t))return Ti(t);var n=t.afterIfContinues;return n.createElement(e,t).thenAsync((function(i){var r=function(t,e,n){var i=t.viewNode;i.appendChild(n);var r=Ps(n,e,t.vertical);return i.removeChild(n),r}(t,e,i);return e.fragmentLayoutConstraints.push(new rl(t,n,r)),Ti(t)}))}function sl(t,e){return t.thenAsync((function(t){return al(t,e)}))}var ll={img:!0,svg:!0,audio:!0,video:!0},ul=function(){function t(t){this.constraints=t}return t.prototype.allowLayout=function(t){return this.constraints.every((function(e){return e.allowLayout(t)}))},t}(),cl=function(t){function e(e,n){var i;return(i=t.call(this)||this).checkPoints=e,i.penalty=n,i.alreadyEvaluated=!1,i.breakNodeContext=null,i}A(e,t);var n=e.prototype;return n.findAcceptableBreak=function(t,e){return e<this.getMinBreakPenalty()?null:(this.alreadyEvaluated||(this.breakNodeContext=t.findBoxBreakPosition(this,e>0),this.alreadyEvaluated=!0),this.breakNodeContext)},n.getMinBreakPenalty=function(){return this.penalty},n.getNodeContext=function(){return this.alreadyEvaluated?this.breakNodeContext:this.checkPoints[this.checkPoints.length-1]},e}(Ls);function hl(t){switch(t){case"ruby":case"inline-block":case"inline-flex":case"inline-grid":case"inline-list-item":case"inline-table":return!0}return!1}var fl=function(t){function n(e,n,i,r,o){var a;return(a=t.call(this,e)||this).layoutContext=n,a.clientLayout=i,a.layoutConstraint=r,a.pageFloatLayoutContext=o,a.flowRootFormattingContext=null,a.isFloat=!1,a.isFootnote=!1,a.startEdge=0,a.endEdge=0,a.beforeEdge=0,a.afterEdge=0,a.footnoteEdge=0,a.box=null,a.chunkPositions=null,a.bands=null,a.overflown=!1,a.breakPositions=null,a.pageBreakType=null,a.forceNonfitting=!0,a.leftFloatEdge=0,a.rightFloatEdge=0,a.bottommostFloatTop=0,a.stopAtOverflow=!0,a.lastAfterPosition=null,a.fragmentLayoutConstraints=[],a.pseudoParent=null,a.nodeContextOverflowingDueToRepetitiveElements=null,a.blockDistanceToBlockEndFloats=NaN,a.last=e.lastChild,a.viewDocument=e.ownerDocument,o.setContainer(_(a)),a}A(n,t);var i=n.prototype;return i.getTopEdge=function(){return this.vertical?this.startEdge:this.beforeEdge},i.getBottomEdge=function(){return this.vertical?this.endEdge:this.afterEdge},i.getLeftEdge=function(){return this.vertical?this.afterEdge:this.startEdge},i.getRightEdge=function(){return this.vertical?this.beforeEdge:this.endEdge},i.isFloatNodeContext=function(t){return!(!t.floatSide||this.isFloat&&!t.parent)},i.stopByOverflow=function(t){return this.stopAtOverflow&&!!t&&t.overflow},i.isOverflown=function(t){return this.vertical?t<this.footnoteEdge:t>this.footnoteEdge},i.getExclusions=function(){var t=this.pageFloatLayoutContext.getFloatFragmentExclusions();return this.exclusions.concat(t)},i.openAllViews=function(t){var e=this,n=Ci("openAllViews"),i=t.steps;e.layoutContext.setViewRoot(e.element,e.isFootnote);var r=i.length-1,o=null;return n.loop((function(){for(;r>=0&&(o=Ya(i[r],o),r!==i.length-1||o.formattingContext||(o.formattingContext=e.flowRootFormattingContext),0!=r||(o.offsetInNode=e.calculateOffsetInNodeForNodeContext(t),o.after=t.after,o.preprocessedTextContent=t.preprocessedTextContent,!o.after));){var n=e.layoutContext.setCurrent(o,0==r&&0==o.offsetInNode);if(r--,n.isPending())return n}return Ti(!1)})).then((function(){n.finish(o)})),n.result()},i.calculateOffsetInNodeForNodeContext=function(t){return t.preprocessedTextContent?Ra(t.preprocessedTextContent,t.offsetInNode,1):t.offsetInNode},i.maybePeelOff=function(t,e){if(t.firstPseudo&&t.inline&&!t.after&&0==t.firstPseudo.count&&1!=t.viewNode.nodeType){var n=t.viewNode.textContent.match(pl);return this.layoutContext.peelOff(t,n[0].length)}return Ti(t)},i.buildViewToNextBlockEdge=function(t,e){var n=this,i=!1,r=Ci("buildViewToNextBlockEdge");return r.loopWithFrame((function(r){t.viewNode&&!ks(t)&&e.push(t.copy()),n.maybePeelOff(t,0).then((function(o){o!==t&&(ks(t=o)||e.push(t.copy())),n.nextInTree(t).then((function(e){(t=e)?(!i&&n.layoutConstraint.allowLayout(t)||(i=!0,(t=t.modify()).overflow=!0),n.isFloatNodeContext(t)&&!n.vertical?n.layoutFloatOrFootnote(t).then((function(e){t=e,n.pageFloatLayoutContext.isInvalidated()&&(t=null),t?r.continueLoop():r.breakLoop()})):t.inline?r.continueLoop():r.breakLoop()):r.breakLoop()}))}))})).then((function(){r.finish(t)})),r.result()},i.nextInTree=function(t,e){return sl(this.layoutContext.nextInTree(t,e),this)},i.buildDeepElementView=function(t){if(!t.viewNode)return Ti(t);var e=[],n=t.sourceNode,i=this,r=Ci("buildDeepElementView");return r.loopWithFrame((function(r){t.viewNode&&t.inline&&!ks(t)?e.push(t.copy()):(e.length>0&&i.postLayoutBlock(t,e),e=[]),i.maybePeelOff(t,0).then((function(o){var a=o;if(a!==t){for(var s=a;s&&s.sourceNode!=n;)s=s.parent;if(null==s)return t=a,void r.breakLoop();ks(a)||e.push(a.copy())}i.nextInTree(a).then((function(e){(t=e)&&t.sourceNode!=n?i.layoutConstraint.allowLayout(t)?r.continueLoop():((t=t.modify()).overflow=!0,i.stopAtOverflow?r.breakLoop():r.continueLoop()):r.breakLoop()}))}))})).then((function(){e.length>0&&i.postLayoutBlock(t,e),r.finish(t)})),r.result()},i.createFloat=function(t,e,n,i){var r=this.viewDocument.createElement("div");return this.vertical?(i>=this.height&&(i-=.1),tt(r,"height",n+"px"),tt(r,"width",i+"px")):(n>=this.width&&(n-=.1),tt(r,"width",n+"px"),tt(r,"height",i+"px")),tt(r,"float",e),tt(r,"clear",e),this.element.insertBefore(r,t),r},i.killFloats=function(){for(var t=this.element.firstChild;t;){var e=t.nextSibling;if(1==t.nodeType){var n=t,i=n.style.cssFloat;if("left"!=i&&"right"!=i)break;this.element.removeChild(n)}t=e}},i.createFloats=function(){for(var t,e=this.element.firstChild,n=this.bands,i=this.vertical?this.getTopEdge():this.getLeftEdge(),r=this.vertical?this.getBottomEdge():this.getRightEdge(),o=B(n);!(t=o()).done;){var a=t.value,s=a.y2-a.y1;a.left=this.createFloat(e,"left",a.x1-i,s),a.right=this.createFloat(e,"right",r-a.x2,s)}},i.calculateEdge=function(t,e,n,i){var r;if(t&&As(t.viewNode))return NaN;if(t&&t.after&&!t.inline&&(r=Is(t,this.clientLayout,0,this.vertical),!isNaN(r)))return r;for(var o=i-(t=e[n]).boxOffset;;){if(r=Is(t,this.clientLayout,o,this.vertical),!isNaN(r))return r;if(o>0)o--;else{if(--n<0)return this.beforeEdge;1!=(t=e[n]).viewNode.nodeType&&(o=t.viewNode.textContent.length)}}},i.parseComputedLength=function(t){if("number"==typeof t)return t;var e=t.match(/^(-?[0-9]*(\.[0-9]*)?)px$/);return e?parseFloat(e[0]):0},i.getComputedMargin=function(t){var e=this.clientLayout.getElementComputedStyle(t),n=new on(0,0,0,0);return e&&(n.left=this.parseComputedLength(e.marginLeft),n.top=this.parseComputedLength(e.marginTop),n.right=this.parseComputedLength(e.marginRight),n.bottom=this.parseComputedLength(e.marginBottom)),n},i.getComputedPaddingBorder=function(t){var e=this.clientLayout.getElementComputedStyle(t),n=new on(0,0,0,0);return e&&(n.left=this.parseComputedLength(e.borderLeftWidth)+this.parseComputedLength(e.paddingLeft),n.top=this.parseComputedLength(e.borderTopWidth)+this.parseComputedLength(e.paddingTop),n.right=this.parseComputedLength(e.borderRightWidth)+this.parseComputedLength(e.paddingRight),n.bottom=this.parseComputedLength(e.borderBottomWidth)+this.parseComputedLength(e.paddingBottom)),n},i.getComputedInsets=function(t){var e=this.clientLayout.getElementComputedStyle(t),n=new on(0,0,0,0);if(e){if("border-box"==e.boxSizing)return this.getComputedMargin(t);n.left=this.parseComputedLength(e.marginLeft)+this.parseComputedLength(e.borderLeftWidth)+this.parseComputedLength(e.paddingLeft),n.top=this.parseComputedLength(e.marginTop)+this.parseComputedLength(e.borderTopWidth)+this.parseComputedLength(e.paddingTop),n.right=this.parseComputedLength(e.marginRight)+this.parseComputedLength(e.borderRightWidth)+this.parseComputedLength(e.paddingRight),n.bottom=this.parseComputedLength(e.marginBottom)+this.parseComputedLength(e.borderBottomWidth)+this.parseComputedLength(e.paddingBottom)}return n},i.setComputedInsets=function(t,e){var n=this.clientLayout.getElementComputedStyle(t);n&&(e.marginLeft=this.parseComputedLength(n.marginLeft),e.borderLeft=this.parseComputedLength(n.borderLeftWidth),e.paddingLeft=this.parseComputedLength(n.paddingLeft),e.marginTop=this.parseComputedLength(n.marginTop),e.borderTop=this.parseComputedLength(n.borderTopWidth),e.paddingTop=this.parseComputedLength(n.paddingTop),e.marginRight=this.parseComputedLength(n.marginRight),e.borderRight=this.parseComputedLength(n.borderRightWidth),e.paddingRight=this.parseComputedLength(n.paddingRight),e.marginBottom=this.parseComputedLength(n.marginBottom),e.borderBottom=this.parseComputedLength(n.borderBottomWidth),e.paddingBottom=this.parseComputedLength(n.paddingBottom))},i.setComputedWidthAndHeight=function(t,e){var n=this.clientLayout.getElementComputedStyle(t);n&&(e.width=this.parseComputedLength(n.width),e.height=this.parseComputedLength(n.height))},i.layoutUnbreakable=function(t){return this.buildDeepElementView(t)},i.layoutFloat=function(t){var e=this,n=Ci("layoutFloat"),i=t.viewNode,r=t.floatSide;return tt(i,"float","none"),tt(i,"display","inline-block"),tt(i,"vertical-align","top"),e.buildDeepElementView(t).then((function(o){for(var a=e.clientLayout.getElementClientRect(i),s=e.getComputedMargin(i),l=new nn(a.left-s.left,a.top-s.top,a.right+s.right,a.bottom+s.bottom),u=e.startEdge,c=e.endEdge,h=t.parent;h&&h.inline;)h=h.parent;if(h){var f=h.viewNode.ownerDocument.createElement("div");f.style.left="0px",f.style.top="0px",e.vertical?(f.style.bottom="0px",f.style.width="1px"):(f.style.right="0px",f.style.height="1px"),h.viewNode.appendChild(f);var d=e.clientLayout.getElementClientRect(f);u=Math.max(e.getStartEdge(d),u),c=Math.min(e.getEndEdge(d),c),h.viewNode.removeChild(f);var p=e.vertical?l.y2-l.y1:l.x2-l.x1;"left"==r?c=Math.max(c,u+p):u=Math.min(u,c-p),h.viewNode.appendChild(t.viewNode)}var g=new nn(u,e.getBoxDir()*e.beforeEdge,c,e.getBoxDir()*e.afterEdge),m=l;e.vertical&&(m=vn(l));var v=e.getBoxDir();if(m.y1<e.bottommostFloatTop*v){var b=m.y2-m.y1;m.y1=e.bottommostFloatTop*v,m.y2=m.y1+b}!function(t,e,n,i){for(var r=n.y1,o=n.x2-n.x1,a=n.y2-n.y1,s=En(e,r);;){var l=r+a;if(l>t.y2)return!1;for(var u=t.x1,c=t.x2,h=s;h<e.length&&e[h].y1<l;h++){var f=e[h];f.x1>u&&(u=f.x1),f.x2<c&&(c=f.x2)}if(u+o<=c||s>=e.length)return"left"==i?(n.x1=u,n.x2=u+o):(n.x1=c-o,n.x2=c),n.y2+=r-n.y1,n.y1=r,!0;r=e[s].y2,s++}}(g,e.bands,m,r),e.vertical&&(l=bn(m));var y,w=e.getComputedInsets(i);tt(i,"width",l.x2-l.x1-w.left-w.right+"px"),tt(i,"height",l.y2-l.y1-w.top-w.bottom+"px"),tt(i,"position","absolute"),tt(i,"display",t.display);var E=null;if(h&&(E=h.containingBlockForAbsolute?h:h.getContainingBlockForAbsolute()),E){var S=E.viewNode.ownerDocument.createElement("div");S.style.position="absolute",E.vertical?S.style.right="0":S.style.left="0",S.style.top="0",E.viewNode.appendChild(S),y=e.clientLayout.getElementClientRect(S),E.viewNode.removeChild(S)}else y={left:e.getLeftEdge()-e.paddingLeft,right:e.getRightEdge()+e.paddingRight,top:e.getTopEdge()-e.paddingTop};(E?E.vertical:e.vertical)?tt(i,"right",y.right-l.x2+"px"):tt(i,"left",l.x1-y.left+"px"),tt(i,"top",l.y1-y.top+"px"),t.clearSpacer&&(t.clearSpacer.parentNode.removeChild(t.clearSpacer),t.clearSpacer=null);var N=e.vertical?l.x1:l.y2,C=e.vertical?l.x2:l.y1;e.isOverflown(N)&&0!=e.breakPositions.length?((t=t.modify()).overflow=!0,n.finish(t)):(e.killFloats(),g=new nn(e.getLeftEdge(),e.getTopEdge(),e.getRightEdge(),e.getBottomEdge()),e.vertical&&(g=vn(g)),function(t,e,n,i,r){for(i||(i=[new sn(n.y1,n.y2,n.x1,n.x2)]);i.length>0&&i[0].y2<=t.y1;)i.shift();if(0!=i.length){var o;i[0].y1<t.y1&&(i[0].y1=t.y1);var a=0==e.length?t.y1:e[e.length-1].y2;a<t.y2&&e.push(new sn(a,t.y2,t.x1,t.x2));for(var s,l=En(e,i[0].y1),u=B(i);!(s=u()).done;){var c=s.value;if(l==e.length)break;for(e[l].y1<c.y1&&(o=e[l],l++,e.splice(l,0,new sn(c.y1,o.y2,o.x1,o.x2)),o.y2=c.y1);l<e.length&&((o=e[l++]).y2>c.y2&&(e.splice(l,0,new sn(c.y2,o.y2,o.x1,o.x2)),o.y2=c.y2),c.x1!=c.x2&&("left"==r?o.x1=Math.min(c.x2,t.x2):o.x2=Math.max(c.x1,t.x1)),o.y2!=c.y2););}wn(t,e)}}(g,e.bands,m,null,r),e.createFloats(),"left"==r?e.leftFloatEdge=N:e.rightFloatEdge=N,e.bottommostFloatTop=C,e.updateMaxReachedAfterEdge(N),n.finish(o))})),n.result()},i.setupFloatArea=function(t,e,n,i,r,o){var a=this.pageFloatLayoutContext,s=a.getContainer(e),l=t.element;s.element.parentNode.appendChild(l),t.isFloat=!0,t.originX=s.originX,t.originY=s.originY,t.vertical=s.vertical,t.marginLeft=t.marginRight=t.marginTop=t.marginBottom=0,t.borderLeft=t.borderRight=t.borderTop=t.borderBottom=0,t.paddingLeft=t.paddingRight=t.paddingTop=t.paddingBottom=0,t.exclusions=(s.exclusions||[]).concat(),t.forceNonfitting=!a.hasFloatFragments(),t.innerShape=null;var u=s.getPaddingRect();t.setHorizontalPosition(u.x1-s.originX,u.x2-u.x1),t.setVerticalPosition(u.y1-s.originY,u.y2-u.y1),r.adjustPageFloatArea(t,s,this),t.init();var c=!!a.setFloatAreaDimensions(t,e,n,i,!0,!a.hasFloatFragments(),o);return c?(t.killFloats(),t.init()):s.element.parentNode.removeChild(l),c},i.createPageFloatArea=function(t,e,n,i,r){var o=this.element.ownerDocument.createElement("div");tt(o,"position","absolute");var a=this.pageFloatLayoutContext.getPageFloatLayoutContext(t.floatReference),s=new ds(null,ss.COLUMN,null,this.pageFloatLayoutContext.flowName,t.nodePosition,null,null),l=a.getContainer(),u=new yl(e,o,this.layoutContext.clone(),this.clientLayout,this.layoutConstraint,s,l);return s.setContainer(u),this.setupFloatArea(u,t.floatReference,e,n,i,r)?u:null},i.layoutSinglePageFloatFragment=function(t,e,n,i,r,o,a){var s=this.pageFloatLayoutContext,l=(t=(a?a.continuations:[]).concat(t))[0].float,u=s.getPageFloatPlacementCondition(l,e,n),c=this.createPageFloatArea(l,e,o,r,u),h={floatArea:c,pageFloatFragment:null,newPosition:null};if(!c)return Ti(h);var f=Ci("layoutSinglePageFloatFragment"),d=!1,p=0;return f.loopWithFrame((function(e){if(p>=t.length)e.breakLoop();else{var n=new ts(t[p].nodePosition);c.layout(n,!0).then((function(t){h.newPosition=t,!t||i?(p++,e.continueLoop()):(d=!0,e.breakLoop())}))}})).then((function(){if(!d){var n=s.setFloatAreaDimensions(c,l.floatReference,e,o,!1,i,u);if(n){var a=r.createPageFloatFragment(t,n,c,!!h.newPosition);s.addPageFloatFragment(a,!0),h.pageFloatFragment=a}else d=!0}f.finish(h)})),f.result()},i.layoutPageFloatInner=function(t,e,n,i){var r=this.pageFloatLayoutContext,o=t.float;function a(e,n){n?r.removePageFloatFragment(n,!0):e&&e.element.parentNode.removeChild(e.element),r.restoreStashedFragments(o.floatReference),r.deferPageFloat(t)}r.stashEndFloatFragments(o);var s=Ci("layoutPageFloatInner"),l=this;return this.layoutSinglePageFloatFragment([t],o.floatSide,o.clearSide,!r.hasFloatFragments(),e,n,i).then((function(t){var e=t.floatArea,n=t.pageFloatFragment,u=t.newPosition;n?l.layoutStashedPageFloats(o.floatReference,[i]).then((function(t){if(t){if(r.addPageFloatFragment(n),r.discardStashedFragments(o.floatReference),u){var i=new fs(o,u.primary);r.deferPageFloat(i)}s.finish(!0)}else a(e,n),s.finish(!1)})):(a(e,n),s.finish(!1))})),s.result()},i.layoutStashedPageFloats=function(t,e){var n=this.pageFloatLayoutContext,i=n.getStashedFloatFragments(t),r=[],o=[],a=!1,s=Ci("layoutStashedPageFloats"),l=this,u=0;return s.loopWithFrame((function(t){if(u>=i.length)t.breakLoop();else{var n=i[u];if(e.includes(n))return u++,void t.continueLoop();var s=(new gs).findByFloat(n.continuations[0].float);l.layoutSinglePageFloatFragment(n.continuations,n.floatSide,null,!1,s,null).then((function(e){var n=e.floatArea;n&&r.push(n);var i=e.pageFloatFragment;i?(o.push(i),u++,t.continueLoop()):(a=!0,t.breakLoop())}))}})).then((function(){a?(o.forEach((function(t){n.removePageFloatFragment(t,!0)})),r.forEach((function(t){var e=t.element;e&&e.parentNode&&e.parentNode.removeChild(e)}))):i.forEach((function(t){var e=t.area.element;e&&e.parentNode&&e.parentNode.removeChild(e)})),s.finish(!a)})),s.result()},i.setFloatAnchorViewNode=function(t){var e=t.viewNode.parentNode,n=e.ownerDocument.createElement("span");n.setAttribute("data-adapt-spec","1"),"footnote"===t.floatSide&&this.layoutContext.applyPseudoelementStyle(t,"footnote-call",n),e.appendChild(n),e.removeChild(t.viewNode);var i=t.modify();return i.after=!0,i.viewNode=n,i},i.resolveFloatReferenceFromColumnSpan=function(t,e,n){var i=this,r=Ci("resolveFloatReferenceFromColumnSpan"),o=this.pageFloatLayoutContext,a=o.getPageFloatLayoutContext(ss.REGION);return o.getContainer().width<a.getContainer().width&&t===ss.COLUMN?e===qe.auto?this.buildDeepElementView(n.copy()).then((function(e){var n=e.viewNode,o=Aa(i.clientLayout,n,[ya.MIN_CONTENT_INLINE_SIZE])[ya.MIN_CONTENT_INLINE_SIZE],a=i.getComputedMargin(n);r.finish((o+=i.vertical?a.top+a.bottom:a.left+a.right)>i.width?ss.REGION:t)})):r.finish(e===qe.all?ss.REGION:t):r.finish(t),r.result()},i.layoutPageFloat=function(t){var e=this,n=this.pageFloatLayoutContext,i=(new gs).findByNodeContext(t),r=n.findPageFloatByNodePosition(t.toNodePosition());return(r?Ti(r):i.createPageFloat(t,n,this)).thenAsync((function(r){var o=Ka(t,0),a=e.setFloatAnchorViewNode(t),s=i.findPageFloatFragment(r,n),l=new fs(r,o);if(s&&s.hasFloat(r))return n.registerPageFloatAnchor(r,a.viewNode),Ti(a);if(n.isForbidden(r)||n.hasPrecedingFloatsDeferredToNext(r))return n.deferPageFloat(l),n.registerPageFloatAnchor(r,a.viewNode),Ti(a);if(e.nodeContextOverflowingDueToRepetitiveElements)return Ti(null);var u=Is(a,e.clientLayout,0,e.vertical);return e.isOverflown(u)?Ti(a):e.layoutPageFloatInner(l,i,u,s).thenAsync((function(t){return t?Ti(null):(n.registerPageFloatAnchor(r,a.viewNode),Ti(a))}))}))},i.createJustificationAdjustmentElement=function(t,e,n,i){var r=e.createElement("span");r.style.visibility="hidden",r.style.verticalAlign="top",r.setAttribute("data-adapt-spec","1");var o=e.createElement("span");o.style.fontSize="0",o.style.lineHeight="0",o.textContent=" #",r.appendChild(o),r.style.display="block",r.style.textIndent="0",r.style.textAlign="left",n.insertBefore(r,t);var a=this.clientLayout.getElementClientRect(o);r.style.textAlign="right";var s=this.clientLayout.getElementClientRect(o);r.style.textAlign="",r.style.display=function(t){if(null===vt){var e=t.ownerDocument,n=e.createElement("div");n.style.position="absolute",n.style.top="0px",n.style.left="0px",n.style.width="30px",n.style.height="100px",n.style.lineHeight="16px",n.style.fontSize="16px",n.style.textAlign="justify",t.appendChild(n);var i=e.createTextNode("a | ");n.appendChild(i);var r=e.createElement("span");r.style.display="inline-block",r.style.width="30px",n.appendChild(r);var o=e.createRange();o.setStart(i,0),o.setEnd(i,3);var a=o.getBoundingClientRect();vt=a.right<27,t.removeChild(n)}return vt}(document.body)?"inline":"inline-block";var l=i?s.top-a.top:s.left-a.left,u=l>=1?l-1+"px":"100%";return i?r.style.paddingTop=u:r.style.paddingLeft=u,r},i.addAndAdjustJustificationElement=function(t,e,n,i,r,o){return function(t,e,n,i){if(function(t){if(null===bt){var e=t.ownerDocument,n=e.createElement("div");n.style.position="absolute",n.style.top="0px",n.style.left="0px",n.style.width="40px",n.style.height="100px",n.style.lineHeight="16px",n.style.fontSize="16px",n.style.textAlign="justify",t.appendChild(n);var i=e.createTextNode("a a-");n.appendChild(i);var r=e.createElement("span");r.style.display="inline-block",r.style.width="40px",n.appendChild(r);var o=e.createRange();o.setStart(i,2),o.setEnd(i,4);var a=o.getBoundingClientRect();bt=a.right<37,t.removeChild(n)}return bt}(document.body)){var r=ml(t),o=e?n:n.previousSibling,a=o?o.textContent:"";if(a.charAt(a.length-1)===r){var s=n.ownerDocument,l=n.parentNode;!function(t){if(null===yt){var e=t.ownerDocument,n=e.createElement("div");n.style.position="absolute",n.style.top="0px",n.style.left="0px",n.style.width="40px",n.style.height="100px",n.style.lineHeight="16px",n.style.fontSize="16px",n.style.textAlign="justify",t.appendChild(n);var i=e.createTextNode("a a-");n.appendChild(i),n.appendChild(e.createElement("wbr"));var r=e.createElement("span");r.style.display="inline-block",r.style.width="40px",n.appendChild(r);var o=e.createRange();o.setStart(i,2),o.setEnd(i,4);var a=o.getBoundingClientRect();yt=a.right<37,t.removeChild(n)}return yt}(document.body)?l.insertBefore(s.createElement("wbr"),i):l.insertBefore(s.createTextNode(" "),i)}}}(t,e,n,i),this.createJustificationAdjustmentElement(i,r,o,t.vertical)},i.compensateJustificationLineHeight=function(t,e,n){var i=this.clientLayout.getElementClientRect(t),r=this.clientLayout.getElementClientRect(e);n.vertical?(e.style.marginRight=r.right-i.right+"px",e.style.width="0px"):(e.style.marginTop=i.top-r.top+"px",e.style.height="0px"),e.setAttribute("data-adapt-spec","1")},i.fixJustificationIfNeeded=function(t,e){if(!t.after||t.inline){if(e){for(var n="",i=t.parent;i&&!n;i=i.parent)!i.inline&&i.viewNode&&(n=i.viewNode.style.textAlign);if("justify"!==n)return}var r=t.viewNode,o=r.ownerDocument,a=e&&(t.after||1!=r.nodeType),s=a?r.nextSibling:r;s&&!s.parentNode&&(s=null);var l=r.parentNode||t.parent&&t.parent.viewNode;if(l){var u=this.addAndAdjustJustificationElement(t,a,r,s,o,l);if(!e){var c=o.createElement("div");l.insertBefore(c,s),this.compensateJustificationLineHeight(u,c,t)}}}},i.processLineStyling=function(t,e,n){var i=this,r=Ci("processLineStyling"),o=n.concat([]);n.splice(0,n.length);var a=0,s=t.firstPseudo;return 0==s.count&&(s=s.outer),r.loopWithFrame((function(n){if(s){var r=i.findLinePositions(o),l=s.count-a;if(r.length<=l)n.breakLoop();else{var u=i.findAcceptableBreakInside(o,r[l-1],!0);null!=u?i.finishBreak(u,!1,!1).then((function(){a+=l,i.layoutContext.peelOff(u,0).then((function(r){i.fixJustificationIfNeeded(t=r,!1),s=t.firstPseudo,i.buildViewToNextBlockEdge(t,o=[]).then((function(t){e=t,n.continueLoop()}))}))})):n.breakLoop()}}else n.breakLoop()})).then((function(){Array.prototype.push.apply(n,o),r.finish(e)})),r.result()},i.isLoneImage=function(t){return!(2!=t.length&&this.breakPositions.length>0)&&t[0].sourceNode==t[1].sourceNode&&ll[t[0].sourceNode.localName]},i.getTrailingMarginEdgeAdjustment=function(t){for(var e=0,n=0,i=t.length-1;i>=0;i--){var r=t[i];if(!r.after||!r.viewNode||1!=r.viewNode.nodeType)break;var o=this.getComputedMargin(r.viewNode),a=this.vertical?-o.left:o.bottom;a>0?e=Math.max(e,a):n=Math.min(n,a)}return e-n},i.layoutBreakableBlock=function(t){var e=this,n=Ci("layoutBreakableBlock"),i=[];return e.buildViewToNextBlockEdge(t,i).then((function(r){var o=i.length-1;if(o<0)n.finish(r);else{var a=e.calculateEdge(r,i,o,i[o].boxOffset),s=!1;if(!r||!As(r.viewNode)){var l=Fs(r,e.collectElementsOffset());s=e.isOverflown(a+(e.vertical?-1:1)*l.minimum),e.isOverflown(a+(e.vertical?-1:1)*l.current)&&!e.nodeContextOverflowingDueToRepetitiveElements&&(e.nodeContextOverflowingDueToRepetitiveElements=r)}null==r&&(a+=e.getTrailingMarginEdgeAdjustment(i)),e.updateMaxReachedAfterEdge(a),(t.firstPseudo?e.processLineStyling(t,r,i):Ti(r)).then((function(t){e.postLayoutBlock(t,i),i.length>0&&(e.saveBoxBreakPosition(i),s&&!e.isLoneImage(i)&&t&&((t=t.modify()).overflow=!0)),n.finish(t)}))}})),n.result()},i.postLayoutBlock=function(t,n){var i=this;v(e.HOOKS.POST_LAYOUT_BLOCK).forEach((function(e){e(t,n,i)}))},i.findEndOfLine=function(t,e,n){for(var i,r=this.vertical?t-1:t+1,o=0,a=e[0].boxOffset,s=o,l=e.length-1,u=e[l].boxOffset;a<u;){i=a+Math.ceil((u-a)/2),s=o;for(var c=l;s<c;){var h=s+Math.ceil((c-s)/2);e[h].boxOffset>i?c=h-1:s=h}var f=this.calculateEdge(null,e,s,i);if(this.vertical?f<=r:f>=r){for(u=i-1;e[s].boxOffset==i;)s--;l=s}else n&&this.updateMaxReachedAfterEdge(f),a=i,o=s}return{nodeContext:e[s],index:a,checkPointIndex:s}},i.findAcceptableBreakInside=function(t,e,n){var i=this.findEndOfLine(e,t,!0),r=i.nodeContext,o=r.viewNode;if(1!=o.nodeType){var a=o;r=this.resolveTextNodeBreaker(r).breakTextNode(a,r,i.index,t,i.checkPointIndex,n)}return this.clearOverflownViewNodes(r,!1),r},i.resolveTextNodeBreaker=function(t){return v(e.HOOKS.RESOLVE_TEXT_NODE_BREAKER).reduce((function(e,n){return n(t)||e}),gl.instance)},i.getRangeBoxes=function(t,e){for(var n=[],i=t.ownerDocument.createRange(),r=!1,o=t,a=null,s=!1,l=!0;l;){var u=!0;do{var c=null;o==e&&(l=1===e.nodeType&&!(!e.firstChild||r)),1!=o.nodeType?(s||(i.setStartBefore(o),s=!0),a=o):r?r=!1:Rs(o)?u=!s:"ruby"==o.localName||hl(this.clientLayout.getElementComputedStyle(o).display)?((u=!s)&&(i.setStartBefore(o),s=!0,a=o),o.contains(e)&&(l=!1)):c=o.firstChild,c||(c=o.nextSibling)||(r=!0,c=o.parentNode),o=c}while(u&&l);if(s){i.setEndAfter(a);for(var h=this.clientLayout.getRangeClientRects(i),f=0;f<h.length;f++)n.push(h[f]);s=!1}}return n},i.findLinePositions=function(t){var e=[],n=this.getRangeBoxes(t[0].viewNode,t[t.length-1].viewNode);n.sort(this.vertical?Wa:Ga);for(var i=0,r=0,o=0,a=0,s=0,l=this.getBoxDir();;){if(s<n.length){var u=n[s],c=1;if(a>0){var h=Math.max(this.getBoxSize(u),1);c=l*this.getBeforeEdge(u)<l*i?l*(this.getAfterEdge(u)-i)/h:l*this.getAfterEdge(u)>l*r?l*(r-this.getBeforeEdge(u))/h:1}if(0==a||c>=.6||c>=.2&&this.getStartEdge(u)>=o-1){o=this.getEndEdge(u),this.vertical?(i=0==a?u.right:Math.max(i,u.right),r=0==a?u.left:Math.min(r,u.left)):(i=0==a?u.top:Math.min(i,u.top),r=0==a?u.bottom:Math.max(r,u.bottom)),a++,s++;continue}}if(a>0&&(e.push(r),a=0),s>=n.length)break}return e.sort(ft),this.vertical&&e.reverse(),e},i.calculateClonedPaddingBorder=function(t){var e=this,n=0;return t.walkUpBlocks((function(t){if("clone"===t.inheritedProps["box-decoration-break"]){var i=e.getComputedPaddingBorder(t.viewNode);n+=t.vertical?-i.left:i.bottom,"table"===t.display&&(n+=t.blockBorderSpacing)}})),n},i.getOffsetByRepetitiveElements=function(t){return(t?t.calculateOffset(this):Fs(null,this.collectElementsOffset())).current},i.findBoxBreakPosition=function(t,e){for(var n,i,r=this,o=t.checkPoints,a=o[0];a.parent&&a.inline;)a=a.parent;e?(n=1,i=1):(n=Math.max((a.inheritedProps.widows||2)-0,1),i=Math.max((a.inheritedProps.orphans||2)-0,1));var s=r.calculateClonedPaddingBorder(a),l=this.findLinePositions(o),u=this.footnoteEdge-s,c=this.getBoxDir(),h=this.getOffsetByRepetitiveElements(t);u-=c*h;var f=this.findFirstOverflowingEdgeAndCheckPoint(o);isNaN(f.edge)&&(f.edge=1/0*c);var d,p=ht(l.length,(function(t){var e=l[t];return r.vertical?e<u||e<=f.edge:e>u||e>=f.edge})),g=p<=0;if(g&&(p=ht(l.length,(function(t){return r.vertical?l[t]<u:l[t]>u}))),(p=Math.min(l.length-n,p))<i)return null;if(u=l[p-1],d=g?f.checkPoint:this.findAcceptableBreakInside(t.checkPoints,u,e)){var m=this.getAfterEdgeOfBlockContainer(d);!isNaN(m)&&m<u&&(u=m),this.computedBlockSize=c*(u-this.beforeEdge)+h}return d},i.getAfterEdgeOfBlockContainer=function(t){var e=t;do{e=e.parent}while(e&&e.inline);return e?((e=e.copy().modify()).after=!0,Is(e,this.clientLayout,0,this.vertical)):NaN},i.findFirstOverflowingEdgeAndCheckPoint=function(t){var e=t.findIndex((function(t){return t.overflow}));if(e<0)return{edge:NaN,checkPoint:null};var n=t[e];return{edge:this.calculateEdge(null,t,e,n.boxOffset),checkPoint:n}},i.findEdgeBreakPosition=function(t){return this.computedBlockSize=t.computedBlockSize+this.getOffsetByRepetitiveElements(t),t.position},i.finishBreak=function(t,e,n){var i=(new Vs).find(t.formattingContext).finishBreak(this,t,e,n);return i||(i=Ws.finishBreak(this,t,e,n)),i},i.findAcceptableBreakPosition=function(){var t=null,e=null,n=0,i=0;do{n=i,i=Number.MAX_VALUE;for(var r=this.breakPositions.length-1;r>=0&&!e;--r){e=(t=this.breakPositions[r]).findAcceptableBreak(this,n);var o=t.getMinBreakPenalty();o>n&&(i=Math.min(i,o))}}while(i>n&&!e&&this.forceNonfitting);return{breakPosition:e?t:null,nodeContext:e}},i.doFinishBreak=function(t,e,n,i){if(this.pageFloatLayoutContext.isInvalidated()||this.pageBreakType||!e)return Ti(t);var r=this,o=Ci("doFinishBreak"),a=!1;if(!t){if(this.forceNonfitting)return f.warn("Could not find any page breaks?!!"),r.skipTailEdges(e).then((function(t){t?((t=t.modify()).overflow=!1,r.finishBreak(t,a,!0).then((function(){o.finish(t)}))):o.finish(t)})),o.result();t=n,a=!0,r.computedBlockSize=i}return this.finishBreak(t,a,!0).then((function(){o.finish(t)})),o.result()},i.isBreakable=function(t){if(t.after)return!0;switch(t.sourceNode.namespaceURI){case G.SVG:return!1}return!t.flexContainer},i.zeroIndent=function(t){var e=t.toString();return""==e||"auto"==e||!!e.match(/^0+(.0*)?[^0-9]/)},i.checkOverflowAndSaveEdge=function(t,e){if(!t)return!1;if(As(t.viewNode))return!1;var n=Is(t,this.clientLayout,0,this.vertical),i=Fs(t,this.collectElementsOffset()),r=this.isOverflown(n+(this.vertical?-1:1)*i.minimum);if(this.isOverflown(n+(this.vertical?-1:1)*i.current)&&!this.nodeContextOverflowingDueToRepetitiveElements)this.nodeContextOverflowingDueToRepetitiveElements=t;else if(e){var o=n+this.getTrailingMarginEdgeAdjustment(e),a=this.footnoteEdge-this.getBoxDir()*i.current;n=this.vertical?Math.min(n,Math.max(o,a)):Math.max(n,Math.min(o,a))}return this.updateMaxReachedAfterEdge(n),r},i.checkOverflowAndSaveEdgeAndBreakPosition=function(t,e,n,i){if(!t)return!1;if(As(t.viewNode))return!1;var r=this.checkOverflowAndSaveEdge(t,e);return!n&&r||this.saveEdgeBreakPosition(t,i,r),r},i.applyClearance=function(t){if(!t.viewNode.parentNode)return!1;var e=this.getComputedMargin(t.viewNode),n=t.viewNode.ownerDocument.createElement("div");this.vertical?(n.style.bottom="0px",n.style.width="1px",n.style.marginRight=e.right+"px"):(n.style.right="0px",n.style.height="1px",n.style.marginTop=e.top+"px"),t.viewNode.parentNode.insertBefore(n,t.viewNode);var i=this.clientLayout.getElementClientRect(n),r=this.getBeforeEdge(i),o=this.getBoxDir(),a=t.clearSide,s=1/0*-this.getBoxDir();switch("all"===a&&(s=this.pageFloatLayoutContext.getPageFloatClearEdge(a,this)),a){case"left":s=o*Math.max(s*o,this.leftFloatEdge*o);break;case"right":s=o*Math.max(s*o,this.rightFloatEdge*o);break;default:s=o*Math.max(s*o,Math.max(this.rightFloatEdge*o,this.leftFloatEdge*o))}if(r*o>=s*o)return t.viewNode.parentNode.removeChild(n),!1;var l=Math.max(1,(s-r)*o);this.vertical?n.style.width=l+"px":n.style.height=l+"px",i=this.clientLayout.getElementClientRect(n);var u=this.getAfterEdge(i);if(this.vertical){var c=u+e.right-s;c>0==e.right>=0&&(c+=e.right),n.style.marginLeft=c+"px"}else{var h=s-(u+e.top);h>0==e.top>=0&&(h+=e.top),n.style.marginBottom=h+"px"}return t.clearSpacer=n,!0},i.isBFC=function(t){return!!Xs(t)||!!Na.isInstanceOfRepetitiveElementsOwnerFormattingContext(t)},i.skipEdges=function(t,e,n){var i=t.after?t.parent&&t.parent.formattingContext:t.formattingContext;if(i&&!this.isBFC(i))return Ti(t);var r=this,o=Ci("skipEdges"),a=!n&&e&&t&&t.after,s=n,l=null,u=[],c=[],h=!1;function f(){return!!n||!e&&Es(s)}function d(){(t=u[0]||t).viewNode.parentNode.removeChild(t.viewNode),r.pageBreakType=s}return o.loopWithFrame((function(n){for(;t;){var i=(new Vs).find(t.formattingContext);do{if(!t.viewNode)break;if(t.inline&&1!=t.viewNode.nodeType){if(za(t.viewNode,t.whitespace))break;if(!t.after)return f()?d():r.checkOverflowAndSaveEdgeAndBreakPosition(l,null,!0,s)?(t=(r.stopAtOverflow&&l||t).modify()).overflow=!0:(t=t.modify()).breakBefore=s,void n.breakLoop()}if(!t.after){if(i&&i.startNonInlineElementNode(t))break;if(t.clearSide&&r.applyClearance(t)&&e&&0===r.breakPositions.length&&r.saveEdgeBreakPosition(t.copy(),s,!1),!r.isBFC(t.formattingContext)||Na.isInstanceOfRepetitiveElementsOwnerFormattingContext(t.formattingContext)||r.isFloatNodeContext(t)||t.flexContainer)return u.push(t.copy()),s=Cs(s,t.breakBefore),f()?d():!r.checkOverflowAndSaveEdgeAndBreakPosition(l,null,!0,s)&&r.layoutConstraint.allowLayout(t)||((t=(r.stopAtOverflow&&l||t).modify()).overflow=!0),void n.breakLoop()}if(1!=t.viewNode.nodeType)break;var o=t.viewNode.style;if(t.after){if(t.inline)break;if(i&&i.afterNonInlineElementNode(t,r.stopAtOverflow))break;if(h){if(f())return d(),void n.breakLoop();u=[],e=!1,a=!1,s=null}h=!1,l=t.copy(),c.push(l),s=Cs(s,t.breakAfter),!o||r.zeroIndent(o.paddingBottom)&&r.zeroIndent(o.borderBottomWidth)||(c=[l])}else{if(u.push(t.copy()),s=Cs(s,t.breakBefore),!r.layoutConstraint.allowLayout(t)&&(r.checkOverflowAndSaveEdgeAndBreakPosition(l,null,!r.stopAtOverflow,s),(t=t.modify()).overflow=!0,r.stopAtOverflow))return void n.breakLoop();if(ll[t.viewNode.localName])return f()?d():r.checkOverflowAndSaveEdgeAndBreakPosition(l,null,!0,s)&&((t=(r.stopAtOverflow&&l||t).modify()).overflow=!0),void n.breakLoop();!o||r.zeroIndent(o.paddingTop)&&r.zeroIndent(o.borderTopWidth)||(a=!1,c=[]),h=!0}}while(0);var p=r.nextInTree(t,a);if(p.isPending())return void p.then((function(e){t=e,n.continueLoop()}));t=p.get()}r.checkOverflowAndSaveEdgeAndBreakPosition(l,c,!r.stopAtOverflow,s)?l&&r.stopAtOverflow&&((t=l.modify()).overflow=!0):Es(s)&&(r.pageBreakType=s),n.breakLoop()})).then((function(){l&&(r.lastAfterPosition=l.toNodePosition()),o.finish(t)})),o.result()},i.skipTailEdges=function(t){var e=t.copy(),n=this,i=Ci("skipEdges"),r=null,o=!1;return i.loopWithFrame((function(i){for(;t;){do{if(!t.viewNode)break;if(t.inline&&1!=t.viewNode.nodeType){if(za(t.viewNode,t.whitespace))break;if(!t.after)return Es(r)&&(n.pageBreakType=r),void i.breakLoop()}if(!t.after&&(n.isFloatNodeContext(t)||t.flexContainer))return Es(r=Cs(r,t.breakBefore))&&(n.pageBreakType=r),void i.breakLoop();if(1!=t.viewNode.nodeType)break;var a=t.viewNode.style;if(t.after){if(o){if(Es(r))return n.pageBreakType=r,void i.breakLoop();r=null}o=!1,r=Cs(r,t.breakAfter)}else{if(r=Cs(r,t.breakBefore),ll[t.viewNode.localName])return Es(r)&&(n.pageBreakType=r),void i.breakLoop();if(a&&(!n.zeroIndent(a.paddingTop)||!n.zeroIndent(a.borderTopWidth)))return void i.breakLoop()}o=!0}while(0);var s=n.layoutContext.nextInTree(t);if(s.isPending())return void s.then((function(e){t=e,i.continueLoop()}));t=s.get()}e=null,i.breakLoop()})).then((function(){i.finish(e)})),i.result()},i.layoutFloatOrFootnote=function(t){return ls(t.floatReference)||"footnote"===t.floatSide?this.layoutPageFloat(t):this.layoutFloat(t)},i.layoutNext=function(t,e,n){var i=this,r=Ci("layoutNext");return this.skipEdges(t,e,n||null).then((function(n){if(!(t=n)||i.pageBreakType||i.stopByOverflow(t))r.finish(t);else{var o=t.formattingContext;(new Vs).find(o).layout(t,i,e).thenFinish(r)}})),r.result()},i.clearOverflownViewNodes=function(t,e){if(t)for(var n=t.parent;t;t=n,n=n?n.parent:null){var i=(n||t).formattingContext;(new Vs).find(i).clearOverflownViewNodes(this,n,t,e),e=!1}},i.initGeom=function(){var t=this.element.ownerDocument.createElement("div");t.style.position="absolute",t.style.top=this.paddingTop+"px",t.style.right=this.paddingRight+"px",t.style.bottom=this.paddingBottom+"px",t.style.left=this.paddingLeft+"px",this.element.appendChild(t);var e=this.clientLayout.getElementClientRect(t);this.element.removeChild(t);var n=this.originX+this.left+this.getInsetLeft(),i=this.originY+this.top+this.getInsetTop();this.box=new nn(n,i,n+this.width,i+this.height),this.startEdge=e?this.vertical?e.top:e.left:0,this.endEdge=e?this.vertical?e.bottom:e.right:0,this.beforeEdge=e?this.vertical?e.right:e.top:0,this.afterEdge=e?this.vertical?e.left:e.bottom:0,this.leftFloatEdge=this.beforeEdge,this.rightFloatEdge=this.beforeEdge,this.bottommostFloatTop=this.beforeEdge,this.footnoteEdge=this.afterEdge,this.bands=function(t,e,n,i,r,o){o&&(t=vn(t),e=e.map((function(t){return yn(t)})),n=n.map((function(t){return yn(t)})));var a,s,l,u=e.length,c=n?n.length:0,h=[],f=[];for(a=0;a<u;a++)e[a].addSegments(f,a);for(a=0;a<c;a++)n[a].addSegments(f,a+u);var d=f.length;f.sort(ln);for(var p=0;f[p].shapeId>=u;)p++;var g=f[p].low.y;g>t.y1&&h.push(new sn(t.y1,g,t.x2,t.x2));for(var m,v,b=0,y=[];b<d&&(l=f[b]).low.y<g;)l.high.y>g&&y.push(l),b++;for(;b<d||y.length>0;){var w=t.y2,E=Math.min((m=Math.ceil(g+8),(v=r)?Math.ceil(m/v)*v:m),t.y2);for(s=0;s<y.length&&w>E;s++)(l=y[s]).low.x==l.high.x?l.high.y<w&&(w=Math.max(mn(l.high.y,r),E)):l.low.x!=l.high.x&&(w=E);for(w>t.y2&&(w=t.y2);b<d&&(l=f[b]).low.y<w;)if(l.high.y<g)b++;else{if(!(l.low.y<E)){var S=mn(l.low.y,r);S<w&&(w=S);break}l.low.y==l.high.y&&l.low.y==g||(y.push(l),w=E),b++}var N=[];for(s=0;s<y.length;s++)pn(N,y[s],g,w);N.sort((function(t,e){return t.x-e.x||t.lowOrHigh-e.lowOrHigh}));var C=gn(N,u,c);if(0==C.length)h.push(new sn(g,w,t.x2,t.x2));else{var T=0,x=t.x1;for(s=0;s<C.length;s+=2){var I=Math.max(t.x1,C[s]),P=Math.min(t.x2,C[s+1])-I;P>T&&(T=P,x=I)}h.push(0==T?new sn(g,w,t.x2,t.x2):new sn(g,w,Math.max(x,t.x1),Math.min(x+T,t.x2)))}if(w==t.y2)break;for(g=w,s=y.length-1;s>=0;s--)y[s].high.y<=w&&y.splice(s,1)}return wn(t,h),h}(this.box,[this.getInnerShape()],this.getExclusions(),0,this.snapHeight,this.vertical),this.createFloats()},i.init=function(){this.chunkPositions=[],tt(this.element,"width",this.width+"px"),tt(this.element,"height",this.height+"px"),this.initGeom(),this.computedBlockSize=0,this.overflown=!1,this.pageBreakType=null,this.lastAfterPosition=null},i.saveEdgeBreakPosition=function(t,e,n){var i=t.copy(),r=(new Vs).find(t.formattingContext),o=this.calculateClonedPaddingBorder(i),a=r.createEdgeBreakPosition(i,e,n,this.computedBlockSize+o);this.breakPositions.push(a)},i.saveBoxBreakPosition=function(t){var e=new cl(t,t[0].breakPenalty);this.breakPositions.push(e)},i.updateMaxReachedAfterEdge=function(t){if(!isNaN(t)){var e=this.getBoxDir()*(t-this.beforeEdge);this.computedBlockSize=Math.max(e,this.computedBlockSize)}},i.layout=function(t,e,n){if(this.chunkPositions.push(t),t.primary.after&&(this.lastAfterPosition=t.primary),this.stopAtOverflow&&this.overflown)return Ti(t);if(this.isFullWithPageFloats())return Ti(t.primary.after&&1===t.primary.steps.length?null:t);var i=this,r=Ci("layout");return i.openAllViews(t.primary).then((function(t){var o=null;t.viewNode?o=t.copy():i.layoutContext.addEventListener("nextInTree",(function t(e){e.nodeContext.viewNode&&(o=e.nodeContext,i.layoutContext.removeEventListener("nextInTree",t))}));var a=new vl(e,n);a.layout(t,i).then((function(t){i.doFinishBreak(t,a.context.overflownNodeContext,o,a.initialComputedBlockSize).then((function(t){(i.pseudoParent?Ti(null):i.doFinishBreakOfFragmentLayoutConstraints(t)).then((function(){if(i.pageFloatLayoutContext.isInvalidated())r.finish(null);else if(t){i.overflown=!0;var e=new ts(t.toNodePosition());r.finish(e)}else r.finish(null)}))}))}))})),r.result()},i.isFullWithPageFloats=function(){return this.pageFloatLayoutContext.isColumnFullWithPageFloats(this)},i.getMaxBlockSizeOfPageFloats=function(){return this.pageFloatLayoutContext.getMaxBlockSizeOfPageFloats()},i.doFinishBreakOfFragmentLayoutConstraints=function(t){var e=this,n=Ci("doFinishBreakOfFragmentLayoutConstraints"),i=[].concat(this.fragmentLayoutConstraints);i.sort((function(t,e){return t.getPriorityOfFinishBreak()-e.getPriorityOfFinishBreak()}));var r=0;return n.loop((function(){return r<i.length?i[r++].finishBreak(t,e).thenReturn(!0):Ti(!1)})).then((function(){n.finish(!0)})),n.result()},i.doLayout=function(t,e,n){var i=this,r=Ci("doLayout"),o=null;return i.breakPositions=[],i.nodeContextOverflowingDueToRepetitiveElements=null,r.loopWithFrame((function(r){for(var a=function(){var a=!0;if(i.layoutNext(t,e,n||null).then((function(s){if(e=!1,n=null,i.nodeContextOverflowingDueToRepetitiveElements&&i.stopAtOverflow?(i.pageBreakType=null,(t=i.nodeContextOverflowingDueToRepetitiveElements).overflow=!0):t=s,i.pageFloatLayoutContext.isInvalidated())r.breakLoop();else if(i.pageBreakType)r.breakLoop();else if(t&&i.stopByOverflow(t)){o=t;var l=i.findAcceptableBreakPosition();t=l.nodeContext,l.breakPosition&&l.breakPosition.breakPositionChosen(i),r.breakLoop()}else a?a=!1:r.continueLoop()})),a)return a=!1,{v:void 0}};t;){var s=a();if("object"==typeof s)return s.v}i.computedBlockSize+=i.getOffsetByRepetitiveElements(),r.breakLoop()})).then((function(){r.finish({nodeContext:t,overflownNodeContext:o})})),r.result()},i.redoLayout=function(){for(var t=this.chunkPositions,e=this.element.lastChild;e!=this.last;){var n=e.previousSibling;this.element===e.parentNode&&this.layoutContext.isPseudoelement(e)||this.element.removeChild(e),e=n}this.killFloats(),this.init();var i=this,r=Ci("redoLayout"),o=0,a=null,s=!0;return r.loopWithFrame((function(e){if(o<t.length){var n=t[o++];i.layout(n,s).then((function(t){s=!1,t?(a=t,e.breakLoop()):e.continueLoop()}))}else e.breakLoop()})).then((function(){r.finish(a)})),r.result()},i.saveDistanceToBlockEndFloats=function(){var t=this.pageFloatLayoutContext.getBlockStartEdgeOfBlockEndFloats();t>0&&isFinite(t)&&(this.blockDistanceToBlockEndFloats=this.getBoxDir()*(t-this.beforeEdge-this.computedBlockSize))},i.collectElementsOffset=function(){for(var t=this,e=[],n=this;n;n=n.pseudoParent)n.fragmentLayoutConstraints.forEach((function(n){if(Na.isInstanceOfRepetitiveElementsOwnerLayoutConstraint(n)){var i=n.getRepetitiveElements();e.push(i)}if(Sa.isInstanceOfAfterIfContinuesLayoutConstraint(n)){var r=n.getRepetitiveElements();e.push(r)}Ca.isInstanceOfTableRowLayoutConstraint(n)&&n.getElementsOffsetsForTableCell(t).forEach((function(t){e.push(t)}))}));return e},n}(rs),dl=function(){function t(t,e,n){this.startNodeContexts=[],this.column=Object.create(t),this.column.element=e,this.column.layoutContext=t.layoutContext.clone(),this.column.stopAtOverflow=!1,this.column.flowRootFormattingContext=n.formattingContext,this.column.pseudoParent=t;var i=this.column.calculateClonedPaddingBorder(n);this.column.footnoteEdge=this.column.footnoteEdge-i;var r=this;this.column.openAllViews=function(t){return fl.prototype.openAllViews.call(this,t).thenAsync((function(t){return r.startNodeContexts.push(t.copy()),Ti(t)}))}}var e=t.prototype;return e.layout=function(t,e){return this.column.layout(t,e)},e.findAcceptableBreakPosition=function(t){var e=this.column.findAcceptableBreakPosition();if(t){var n=this.startNodeContexts[0].copy(),i=new _s(n,null,n.overflow,0);if(i.findAcceptableBreak(this.column,0),!e.nodeContext)return{breakPosition:i,nodeContext:n}}return e},e.finishBreak=function(t,e,n){return this.column.finishBreak(t,e,n)},e.doFinishBreakOfFragmentLayoutConstraints=function(t){this.column.doFinishBreakOfFragmentLayoutConstraints(t)},e.isStartNodeContext=function(t){var e=this.startNodeContexts[0];return e.viewNode===t.viewNode&&e.after===t.after&&e.offsetInNode===t.offsetInNode},e.isLastAfterNodeContext=function(t){return ja(t.toNodePosition(),this.column.lastAfterPosition)},e.getColumnElement=function(){return this.column.element},e.getColumn=function(){return this.column},t}(),pl=/^[^A-Za-z0-9_\u009E\u009F\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02AF\u037B-\u037D\u0386\u0388-\u0482\u048A-\u0527]*([A-Za-z0-9_\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02AF\u037B-\u037D\u0386\u0388-\u0482\u048A-\u0527][^A-Za-z0-9_\u009E\u009F\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02AF\u037B-\u037D\u0386\u0388-\u0482\u048A-\u0527]*)?/,gl=function(){function t(){}var e=t.prototype;return e.breakTextNode=function(t,e,n,i,r,o){if(e.after)e.offsetInNode=t.length;else{var a=n-e.boxOffset,s=t.data;(a=173==s.charCodeAt(a)?this.breakAfterSoftHyphen(t,s,a,e):this.breakAfterOtherCharacter(t,s,a,e))>0&&(e=this.updateNodeContext(e,a,t))}return e},e.breakAfterSoftHyphen=function(t,e,n,i){return t.replaceData(n,e.length-n,i.breakWord?"":ml(i)),n+1},e.breakAfterOtherCharacter=function(t,e,n,i){var r=e.charAt(n);n++;var o=e.charAt(n);return t.replaceData(n,e.length-n,!i.breakWord&&lt(r)&&lt(o)?ml(i):""),n},e.updateNodeContext=function(t,e,n){return(t=t.modify()).offsetInNode+=e,t.breakBefore=null,t},t}();function ml(t){return t.hyphenateCharacter||t.parent&&t.parent.hyphenateCharacter||"-"}gl.instance=new gl;var vl=function(t){function e(e,n){var i;return(i=t.call(this)||this).leadingEdge=e,i.initialPageBreakType=null,i.initialComputedBlockSize=0,i.initialOverflown=!1,i.context={overflownNodeContext:null},i.breakAfter=n||null,i}A(e,t);var n=e.prototype;return n.resolveLayoutMode=function(t){return new bl(this.leadingEdge,this.breakAfter,this.context)},n.prepareLayout=function(t,e){e.fragmentLayoutConstraints=[],e.pseudoParent||($s=[])},n.clearNodes=function(e){t.prototype.clearNodes.call(this,e);for(var n=e;n;){var i=n.viewNode;i&&Os(i.parentNode,i),n=n.parent}},n.saveState=function(e,n){t.prototype.saveState.call(this,e,n),this.initialPageBreakType=n.pageBreakType,this.initialComputedBlockSize=n.computedBlockSize,this.initialOverflown=n.overflown},n.restoreState=function(e,n){t.prototype.restoreState.call(this,e,n),n.pageBreakType=this.initialPageBreakType,n.computedBlockSize=this.initialComputedBlockSize,n.overflown=this.initialOverflown},e}(js),bl=function(){function t(t,e,n){this.leadingEdge=t,this.breakAfter=e,this.context=n}var e=t.prototype;return e.doLayout=function(t,e){var n=this,i=Ci("DefaultLayoutMode.doLayout");return function(t,e){var n=Ci("processAfterIfContinuesOfAncestors"),i=t;return n.loop((function(){if(null!==i){var t=al(i,e);return i=i.parent,t.thenReturn(!0)}return Ti(!1)})).then((function(){n.finish(!0)})),n.result()}(t,e).then((function(){e.doLayout(t,n.leadingEdge,n.breakAfter).then((function(t){n.context.overflownNodeContext=t.overflownNodeContext,i.finish(t.nodeContext)}))})),i.result()},e.accept=function(t,e){var n=this;return!(!e.pageFloatLayoutContext.isInvalidated()&&!e.pageBreakType)||e.fragmentLayoutConstraints.length<=0||e.fragmentLayoutConstraints.every((function(i){return i.allowLayout(t,n.context.overflownNodeContext,e)}))},e.postLayout=function(t,e,n,i){if(!i){var r=n.fragmentLayoutConstraints.some((function(e){return e.nextCandidate(t)}));i=!r}return n.fragmentLayoutConstraints.forEach((function(r){r.postLayout(i,t,e,n)})),i},t}(),yl=function(t){function e(e,n,i,r,o,a,s){var l;return(l=t.call(this,n,i,r,o,a)||this).floatSide=e,l.parentContainer=s,l.rootViewNodes=[],l.floatMargins=[],l.adjustContentRelativeSize=!0,l}A(e,t);var n=e.prototype;return n.openAllViews=function(e){var n=this;return t.prototype.openAllViews.call(this,e).thenAsync((function(t){return t&&n.fixFloatSizeAndPosition(t),Ti(t)}))},n.convertPercentageSizesToPx=function(t){var e=this.parentContainer.getPaddingRect(),n=e.x2-e.x1,i=e.y2-e.y1;function r(e,n){e.forEach((function(e){var i=et(t,e);if(i&&"%"===i.charAt(i.length-1)){var r=parseFloat(i);tt(t,e,n*r/100+"px")}}))}r(["width","max-width","min-width"],n),r(["height","max-height","min-height"],i),r(["margin-top","margin-right","margin-bottom","margin-left","padding-top","padding-right","padding-bottom","padding-left"],this.vertical?i:n),["margin-top","margin-right","margin-bottom","margin-left"].forEach((function(e){"auto"===et(t,e)&&tt(t,e,"0")}))},n.fixFloatSizeAndPosition=function(t){for(;t.parent;)t=t.parent;var e=t.viewNode;if(this.rootViewNodes.push(e),this.adjustContentRelativeSize&&this.convertPercentageSizesToPx(e),this.floatMargins.push(this.getComputedMargin(e)),this.adjustContentRelativeSize){var n=this.floatSide;if(this.parentContainer.vertical){if("block-end"===n||"left"===n){var i=et(e,"height");""!==i&&"auto"!==i&&tt(e,"margin-top","auto")}}else if("block-end"===n||"bottom"===n){var r=et(e,"width");""!==r&&"auto"!==r&&tt(e,"margin-left","auto")}}},n.getContentInlineSize=function(){var t=this;return Math.max.apply(null,this.rootViewNodes.map((function(e,n){var i=t.clientLayout.getElementClientRect(e),r=t.floatMargins[n];return t.vertical?r.top+i.height+r.bottom:r.left+i.width+r.right})))},e}(fl),wl=function(){function t(t,e){this.parent=t,this.rootSourceNode=e,this.formattingContextType="RepetitiveElementsOwner",this.isRoot=!1,this.repetitiveElements=null}var e=t.prototype;return e.getName=function(){return"Repetitive elements owner formatting context (RepetitiveElementsOwnerFormattingContext)"},e.isFirstTime=function(t,e){return e},e.getParent=function(){return this.parent},e.getRepetitiveElements=function(){return this.repetitiveElements},e.getRootViewNode=function(t){var e=this.getRootNodeContext(t);return e?e.viewNode:null},e.getRootNodeContext=function(t){do{if(!t.belongsTo(this)&&t.sourceNode===this.rootSourceNode)return t}while(t=t.parent);return null},e.initializeRepetitiveElements=function(t){var e=this;this.repetitiveElements||$s.some((function(t){return t.root===e.rootSourceNode&&(e.repetitiveElements=t.elements,!0)}))||(this.repetitiveElements=new El(t,this.rootSourceNode),$s.push({root:this.rootSourceNode,elements:this.repetitiveElements}))},e.saveState=function(){},e.restoreState=function(t){},t}(),El=function(){function t(t,e){this.vertical=t,this.ownerSourceNode=e,this.headerSourceNode=null,this.footerSourceNode=null,this.headerViewNode=null,this.footerViewNode=null,this.headerNodePosition=null,this.footerNodePosition=null,this.headerHeight=0,this.footerHeight=0,this.isSkipHeader=!1,this.isSkipFooter=!1,this.enableSkippingFooter=!0,this.enableSkippingHeader=!0,this.doneInitialLayout=!1,this.firstContentSourceNode=null,this.lastContentSourceNode=null,this.affectedNodeCache=[],this.afterLastContentNodeCache=[],this.allowInsert=!1}var e=t.prototype;return e.setHeaderNodeContext=function(t){this.headerNodePosition||(this.headerNodePosition=Ka(t,0),this.headerSourceNode=t.sourceNode,this.headerViewNode=t.viewNode)},e.setFooterNodeContext=function(t){this.footerNodePosition||(this.footerNodePosition=Ka(t,0),this.footerSourceNode=t.sourceNode,this.footerViewNode=t.viewNode)},e.updateHeight=function(t){this.headerViewNode&&(this.headerHeight=Ps(this.headerViewNode,t,this.vertical),this.headerViewNode=null),this.footerViewNode&&(this.footerHeight=Ps(this.footerViewNode,t,this.vertical),this.footerViewNode=null)},e.prepareLayoutFragment=function(){this.isSkipHeader=this.isSkipFooter=!1,this.enableSkippingFooter=!0,this.enableSkippingHeader=!0},e.appendHeaderToFragment=function(t,e,n){return!this.headerNodePosition||this.isSkipHeader?Ti(!0):this.appendElementToFragment(this.headerNodePosition,t,e,n)},e.appendFooterToFragment=function(t,e,n){return!this.footerNodePosition||this.isSkipFooter?Ti(!0):this.appendElementToFragment(this.footerNodePosition,t,e,n)},e.appendElementToFragment=function(t,e,n,i){var r=this,o=e.viewNode,a=e.viewNode.ownerDocument.createElement("div");o.appendChild(a);var s=new dl(i,a,e),l=s.getColumn().pageBreakType;return s.getColumn().pageBreakType=null,this.allowInsertRepeatitiveElements=!0,s.layout(new ts(t),!0).thenAsync((function(){return r.allowInsertRepeatitiveElements=!1,o.removeChild(a),r.moveChildren(a,o,n),s.getColumn().pageBreakType=l,Ti(!0)}))},e.moveChildren=function(t,e,n){if(e)for(;t.firstChild;){var i=t.firstChild;t.removeChild(i),i.setAttribute("data-adapt-spec","1"),n?e.insertBefore(i,n):e.appendChild(i)}},e.calculateOffset=function(t){var e=0;return t&&!this.affectTo(t)||((!this.isSkipFooter||t&&this.isAfterLastContent(t))&&(e+=this.footerHeight),this.isSkipHeader||(e+=this.headerHeight)),e},e.calculateMinimumOffset=function(t){var e=0;return t&&!this.affectTo(t)||(t&&this.isAfterLastContent(t)&&(e+=this.footerHeight),this.enableSkippingHeader||(e+=this.headerHeight)),e},e.isAfterLastContent=function(t){var e=this;return this.findResultFromCache(t,this.afterLastContentNodeCache,(function(n){return e.isAfterNodeContextOf(e.lastContentSourceNode,t,!1)}))},e.affectTo=function(t){var e=this;return this.findResultFromCache(t,this.affectedNodeCache,(function(n){return e.isAfterNodeContextOf(e.ownerSourceNode,t,!0)}))},e.findResultFromCache=function(t,e,n){var i=e.filter((function(e){return e.nodeContext.sourceNode===t.sourceNode&&e.nodeContext.after===t.after}));if(i.length>0)return i[0].result;var r=n(t);return e.push({nodeContext:t,result:r}),r},e.isAfterNodeContextOf=function(t,e,n){for(var i=[],r=t;r;r=r.parentNode){if(e.sourceNode===r)return e.after;i.push(r)}for(var o=e.sourceNode;o;o=o.parentNode){var a=i.indexOf(o);if(a>=0)return!!n&&0===a;for(var s=o;s;s=s.previousElementSibling)if(i.includes(s))return!0}return e.after},e.isFirstContentNode=function(t){return t&&this.firstContentSourceNode===t.sourceNode},e.isEnableToUpdateState=function(){return!!(!this.isSkipFooter&&this.enableSkippingFooter&&this.footerNodePosition||!this.isSkipHeader&&this.enableSkippingHeader&&this.headerNodePosition)},e.updateState=function(){!this.isSkipFooter&&this.enableSkippingFooter&&this.footerNodePosition?this.isSkipFooter=!0:!this.isSkipHeader&&this.enableSkippingHeader&&this.headerNodePosition&&(this.isSkipHeader=!0)},e.preventSkippingHeader=function(){this.isSkipHeader=!1,this.enableSkippingHeader=!1},e.preventSkippingFooter=function(){this.isSkipFooter=!1,this.enableSkippingFooter=!1},e.isHeaderRegistered=function(){return!!this.headerNodePosition},e.isFooterRegistered=function(){return!!this.footerNodePosition},e.isHeaderSourceNode=function(t){return this.headerSourceNode===t},e.isFooterSourceNode=function(t){return this.footerSourceNode===t},t}(),Sl=function(){function t(t){this.formattingContext=t}var e=t.prototype;return e.accept=function(t,e){return!!t},e.postLayout=function(t,e,n,i){var r=this.formattingContext.getRepetitiveElements();return r&&(r.doneInitialLayout||(r.updateHeight(n),r.doneInitialLayout=!0)),i},t}(),Nl=function(){function t(t){this.formattingContext=t}var e=t.prototype;return e.accept=function(t,e){return!0},e.postLayout=function(t,e,n,i){return i},t}(),Cl=function(t){function e(e,n){var i;return(i=t.call(this,e)||this).processor=n,i}A(e,t);var n=e.prototype;return n.doLayout=function(t,e){return this.processor.doInitialLayout(t,e)},n.accept=function(t,e){return!1},e}(Sl),Tl=function(t){function e(e,n){var i;return(i=t.call(this,e)||this).processor=n,i}return A(e,t),e.prototype.doLayout=function(t,e){return t.belongsTo(this.formattingContext)||t.after||e.fragmentLayoutConstraints.unshift(new xl(t)),this.processor.doLayout(t,e)},e}(Nl),xl=function(){function t(t){this.flagmentLayoutConstraintType="RepetitiveElementsOwner",this.nodeContext=t.formattingContext.getRootNodeContext(t)}var e=t.prototype;return e.allowLayout=function(t,e,n){var i=this.getRepetitiveElements();return!(i&&!As(this.nodeContext.viewNode)&&i.isEnableToUpdateState()&&(e&&!t||t&&t.overflow))},e.nextCandidate=function(t){var e=this.getRepetitiveElements();return!!e&&!!e.isEnableToUpdateState()&&(e.updateState(),!0)},e.postLayout=function(t,e,n,i){var r=this.getRepetitiveElements();r&&t&&i.stopAtOverflow&&(null==e||r.isAfterLastContent(e))&&r.preventSkippingFooter()},e.finishBreak=function(t,e){var n=this.nodeContext.formattingContext,i=this.getRepetitiveElements();if(!i)return Ti(!0);var r=this.nodeContext;return function(t,e,n){var i=t.getRepetitiveElements();if(i){var r=t.getRootNodeContext(e);if(r.viewNode)return i.appendHeaderToFragment(r,r.viewNode.firstChild,n)}return Ti(!0)}(n,r,e).thenAsync((function(){return function(t,e,n){var i=t.getRepetitiveElements();if(i&&!i.isSkipFooter){var r=t.getRootNodeContext(e);if(r.viewNode)return i.appendFooterToFragment(r,null,n)}return Ti(!0)}(n,r,e).thenAsync((function(){return i.prepareLayoutFragment(),Ti(!0)}))}))},e.getRepetitiveElements=function(){return this.nodeContext.formattingContext.getRepetitiveElements()},e.equalsTo=function(e){return e instanceof t&&this.nodeContext.formattingContext===e.nodeContext.formattingContext},e.getPriorityOfFinishBreak=function(){return 10},t}(),Il=function(t){function e(e,n){var i;return(i=t.call(this)||this).formattingContext=e,i.processor=n,i}return A(e,t),e.prototype.resolveLayoutMode=function(t){var e=this.formattingContext.getRepetitiveElements();return t.belongsTo(this.formattingContext)||e.doneInitialLayout?(t.belongsTo(this.formattingContext)||t.after||e&&e.preventSkippingHeader(),new Tl(this.formattingContext,this.processor)):new Cl(this.formattingContext,this.processor)},e}(js),Pl=function(t){function e(e,n){var i;return(i=t.call(this)||this).formattingContext=e,i.column=n,i}A(e,t);var n=e.prototype;return n.startNonInlineElementNode=function(t){var e=this.formattingContext,n=t.nodeContext,i=e.getRepetitiveElements();if(n.parent&&e.rootSourceNode===n.parent.sourceNode){switch(n.repeatOnBreak){case"header":if(!i.isHeaderRegistered())return i.setHeaderNodeContext(n),Ti(!0);n.repeatOnBreak="none";break;case"footer":if(!i.isFooterRegistered())return i.setFooterNodeContext(n),Ti(!0);n.repeatOnBreak="none"}i.firstContentSourceNode||(i.firstContentSourceNode=n.sourceNode)}return qs.prototype.startNonInlineElementNode.call(this,t)},n.afterNonInlineElementNode=function(t){var e=this.formattingContext,n=t.nodeContext;return n.sourceNode===e.rootSourceNode&&(e.getRepetitiveElements().lastContentSourceNode=t.lastAfterNodeContext&&t.lastAfterNodeContext.sourceNode,t.break=!0),"header"===n.repeatOnBreak||"footer"===n.repeatOnBreak?Ti(!0):qs.prototype.afterNonInlineElementNode.call(this,t)},e}(qs);function Al(t,e){t&&function(t,e){for(var n=t;n;n=n.parent){var i=n.formattingContext;i&&i instanceof wl&&!n.belongsTo(i)&&e(i,n)}}(t.after?t.parent:t,(function(t,n){Ca.isInstanceOfTableFormattingContext(t)||e.fragmentLayoutConstraints.push(new xl(n))}))}var Ol=new(function(t){function e(){return t.apply(this,arguments)||this}A(e,t);var n=e.prototype;return n.layout=function(t,e,n){if(e.isFloatNodeContext(t))return e.layoutFloatOrFootnote(t);var i=t.formattingContext;return i.getRootViewNode(t)?(n&&Al(t.parent,e),t.belongsTo(i)?Hs.prototype.layout.call(this,t,e,n):new Il(i,this).layout(t,e)):e.buildDeepElementView(t)},n.startNonInlineElementNode=function(t){var e=function(t){var e=t.formattingContext;return e&&e instanceof wl?e:null}(t).getRepetitiveElements();return!!e&&(e.allowInsertRepeatitiveElements||!e.isHeaderSourceNode(t.sourceNode)&&!e.isFooterSourceNode(t.sourceNode)||t.viewNode.parentNode.removeChild(t.viewNode),!1)},n.doInitialLayout=function(t,e){var n=Ci("BlockLayoutProcessor.doInitialLayout");return this.layoutEntireBlock(t,e).thenFinish(n),n.result()},n.layoutEntireBlock=function(t,e){var n=new Pl(t.formattingContext,e);return new Ys(n,e.layoutContext).iterate(t)},n.doLayout=function(t,e){var n=t.formattingContext,i=Ci("doLayout");return sl(e.layoutContext.nextInTree(t,!1),e).then((function(t){var r=t;i.loopWithFrame((function(t){for(var i=function(){var i=!0;if(e.layoutNext(r,!1).then((function(o){r=o,e.pageFloatLayoutContext.isInvalidated()||e.pageBreakType||r&&e.stopByOverflow(r)||r&&r.after&&r.sourceNode==n.rootSourceNode?t.breakLoop():i?i=!1:t.continueLoop()})),i)return i=!1,{v:void 0}};r;){var o=i();if("object"==typeof o)return o.v}t.breakLoop()})).then((function(){i.finish(r)}))})),i.result()},n.finishBreak=function(t,e,n,i){return Hs.prototype.finishBreak.call(this,t,e,n,i)},n.clearOverflownViewNodes=function(t,e,n,i){Hs.prototype.clearOverflownViewNodes(t,e,n,i)},e}(Hs));g(e.HOOKS.RESOLVE_LAYOUT_PROCESSOR,(function(t){return t instanceof wl&&!Ca.isInstanceOfTableFormattingContext(t)?Ol:null}));var Rl=function(){function t(t,e){this.rowIndex=t,this.sourceNode=e,this.cells=[]}var e=t.prototype;return e.addCell=function(t){this.cells.push(t)},e.getMinimumHeight=function(){return Math.min.apply(null,this.cells.map((function(t){return t.height})))},t}(),kl=function(){function t(t,e,n){this.rowIndex=t,this.columnIndex=e,this.height=0,this.anchorSlot=null,this.viewElement=n,this.colSpan=n.colSpan||1,this.rowSpan=n.rowSpan||1}var e=t.prototype;return e.setHeight=function(t){this.height=t},e.setAnchorSlot=function(t){this.anchorSlot=t},t}(),Ll=function(t,e,n){this.rowIndex=t,this.columnIndex=e,this.cell=n},Fl=function(){function t(t,e,n){this.column=t,this.cellNodeContext=n,this.empty=!1,this.pseudoColumn=new dl(t,e,n)}return t.prototype.findAcceptableBreakPosition=function(){var t=this.cellNodeContext.viewNode,e=this.cellNodeContext.verticalAlign;"middle"!==e&&"bottom"!==e||tt(t,"vertical-align","top");var n=this.pseudoColumn.findAcceptableBreakPosition(!0);return tt(t,"vertical-align",e),n},t}(),_l=function(t,e){this.viewNode=t,this.side=e},Dl=function(t){function e(e,n,i,r){var o;return(o=t.call(this,e,n,i,r)||this).acceptableCellBreakPositions=null,o.rowIndex=null,o.formattingContext=e.formattingContext,o}A(e,t);var n=e.prototype;return n.findAcceptableBreak=function(e,n){var i=t.prototype.findAcceptableBreak.call(this,e,n);return n<this.getMinBreakPenalty()?null:this.getAcceptableCellBreakPositions().every((function(t){return!!t.nodeContext}))?i:null},n.getMinBreakPenalty=function(){var e=t.prototype.getMinBreakPenalty.call(this);return this.getAcceptableCellBreakPositions().forEach((function(t){e+=t.breakPosition.getMinBreakPenalty()})),e},n.getAcceptableCellBreakPositions=function(){if(!this.acceptableCellBreakPositions){var t=this.getCellFragments();this.acceptableCellBreakPositions=t.map((function(t){return t.findAcceptableBreakPosition()}))}return this.acceptableCellBreakPositions},n.getRowIndex=function(){return null!=this.rowIndex?this.rowIndex:this.rowIndex=this.formattingContext.findRowIndexBySourceNode(this.position.sourceNode)},n.getCellFragments=function(){return this.formattingContext.getRowSpanningCellsOverflowingTheRow(this.getRowIndex()).map(this.formattingContext.getCellFragmentOfCell,this.formattingContext)},e}(_s),Bl=function(t){function e(e,n,i){var r;return(r=t.call(this)||this).rowIndex=e,r.beforeNodeContext=n,r.formattingContext=i,r.acceptableCellBreakPositions=null,r}A(e,t);var n=e.prototype;return n.findAcceptableBreak=function(t,e){if(e<this.getMinBreakPenalty())return null;var n=this.getCellFragments(),i=this.getAcceptableCellBreakPositions(),r=i.every((function(t){return!!t.nodeContext}))&&i.some((function(t,e){var i=n[e].pseudoColumn,r=t.nodeContext;return!i.isStartNodeContext(r)&&!i.isLastAfterNodeContext(r)}));return this.beforeNodeContext.overflow=i.some((function(t){return t.nodeContext&&t.nodeContext.overflow})),r?this.beforeNodeContext:null},n.getMinBreakPenalty=function(){var t=this.formattingContext,e=t.getRowByIndex(this.rowIndex),n=0;return t.isFreelyFragmentableRow(e)||(n+=10),this.getAcceptableCellBreakPositions().forEach((function(t){n+=t.breakPosition.getMinBreakPenalty()})),n},n.getAcceptableCellBreakPositions=function(){if(!this.acceptableCellBreakPositions){var t=this.getCellFragments();this.acceptableCellBreakPositions=t.map((function(t){return t.findAcceptableBreakPosition()}))}return this.acceptableCellBreakPositions},n.getCellFragments=function(){return this.formattingContext.getCellsFallingOnRow(this.rowIndex).map(this.formattingContext.getCellFragmentOfCell,this.formattingContext)},e}(Ls),Ml=function(t){function e(e,n){var i;return(i=t.call(this,e,n)||this).tableSourceNode=n,i.formattingContextType="Table",i.vertical=!1,i.columnCount=-1,i.tableWidth=0,i.captions=[],i.colGroups=null,i.colWidths=null,i.inlineBorderSpacing=0,i.rows=[],i.slots=[],i.cellFragments=[],i.lastRowViewNode=null,i.cellBreakPositions=[],i.repetitiveElements=null,i}A(e,t);var n=e.prototype;return n.getName=function(){return"Table formatting context (Table.TableFormattingContext)"},n.isFirstTime=function(t,e){if(!e)return e;switch(t.display){case"table-row":return 0===this.cellBreakPositions.length;case"table-cell":return!this.cellBreakPositions.some((function(e){return e.cellNodePosition.steps[0].node===t.sourceNode}));default:return e}},n.getParent=function(){return this.parent},n.finishFragment=function(){this.cellFragments=[]},n.addRow=function(t,e){this.rows[t]=e},n.getRowSlots=function(t){var e=this.slots[t];return e||(e=this.slots[t]=[]),e},n.addCell=function(t,e){var n=this.rows[t];n||(this.addRow(t,new Rl(t,null)),n=this.rows[t]),n.addCell(e);for(var i=t+e.rowSpan,r=this.getRowSlots(t),o=0;r[o];)o++;for(;t<i;t++){r=this.getRowSlots(t);for(var a=o;a<o+e.colSpan;a++){var s=r[a]=new Ll(t,a,e);e.anchorSlot||e.setAnchorSlot(s)}}},n.getRowByIndex=function(t){return this.rows[t]},n.findRowIndexBySourceNode=function(t){return this.rows.findIndex((function(e){return t===e.sourceNode}))},n.addCellFragment=function(t,e,n){var i=this.cellFragments[t];i||(i=this.cellFragments[t]=[]),i[e]=n},n.getCellsFallingOnRow=function(t){return this.getRowSlots(t).reduce((function(t,e){return e.cell!==t[t.length-1]?t.concat(e.cell):t}),[])},n.getRowSpanningCellsOverflowingTheRow=function(t){return this.getCellsFallingOnRow(t).filter((function(e){return e.rowIndex+e.rowSpan-1>t}))},n.getCellFragmentOfCell=function(t){return this.cellFragments[t.rowIndex]&&this.cellFragments[t.rowIndex][t.columnIndex]},n.isFreelyFragmentableRow=function(t){return t.getMinimumHeight()>this.tableWidth/2},n.getColumnCount=function(){return this.columnCount<0&&(this.columnCount=Math.max.apply(null,this.rows.map((function(t){return t.cells.reduce((function(t,e){return t+e.colSpan}),0)})))),this.columnCount},n.updateCellSizes=function(t){var e=this;this.rows.forEach((function(n){n.cells.forEach((function(n){var i=t.getElementClientRect(n.viewElement);n.viewElement=null,n.setHeight(e.vertical?i.width:i.height)}))}))},n.findCellFromColumn=function(t){if(!t)return null;var e=null,n=0,i=0;t:for(n=0;n<this.cellFragments.length;n++)if(this.cellFragments[n])for(i=0;i<this.cellFragments[n].length;i++)if(this.cellFragments[n][i]&&t===this.cellFragments[n][i].pseudoColumn.getColumn()){e=this.rows[n].cells[i];break t}if(!e)return null;for(;n<this.slots.length;n++)for(;i<this.slots[n].length;i++){var r=this.slots[n][i];if(r.cell===e)return{rowIndex:r.rowIndex,columnIndex:r.columnIndex}}return null},n.collectElementsOffsetOfUpperCells=function(t){var e=this,n=[];return this.slots.reduce((function(i,r,o){if(o>=t.rowIndex)return i;var a=r[t.columnIndex]&&e.getCellFragmentOfCell(r[t.columnIndex].cell);return!a||n.includes(a)||(e.collectElementsOffsetFromColumn(a.pseudoColumn.getColumn(),i),n.push(a)),i}),[])},n.collectElementsOffsetOfHighestColumn=function(){var t=this,e=[];return this.rows.forEach((function(n){n.cells.forEach((function(n,i){e[i]||(e[i]={collected:[],elements:[]});var r=e[i],o=t.getCellFragmentOfCell(n);o&&!r.collected.includes(o)&&(t.collectElementsOffsetFromColumn(o.pseudoColumn.getColumn(),r.elements),r.collected.push(o))}))})),[new Ul(e.map((function(t){return t.elements})))]},n.collectElementsOffsetFromColumn=function(t,e){t.fragmentLayoutConstraints.forEach((function(t){if(Na.isInstanceOfRepetitiveElementsOwnerLayoutConstraint(t)){var n=t.getRepetitiveElements();e.push(n)}Ca.isInstanceOfTableRowLayoutConstraint(t)&&t.getElementsOffsetsForTableCell(null).forEach((function(t){e.push(t)}))}))},n.saveState=function(){return[].concat(this.cellBreakPositions)},n.restoreState=function(t){this.cellBreakPositions=t},e}(wl),Ul=function(){function t(t){this.repeatitiveElementsInColumns=t}var e=t.prototype;return e.calculateOffset=function(t){return this.calculateMaxOffsetOfColumn(t,(function(t){return t.current}))},e.calculateMinimumOffset=function(t){return this.calculateMaxOffsetOfColumn(t,(function(t){return t.minimum}))},e.calculateMaxOffsetOfColumn=function(t,e){var n=0;return this.repeatitiveElementsInColumns.forEach((function(i){var r=Fs(t,i);n=Math.max(n,e(r))})),n},t}();function zl(t){return function(t){return"table-row-group"===t||"table-header-group"===t||"table-footer-group"===t}(t)||function(t){return"table"===t||"inline-table"===t}(t)}function Vl(t,e,n){var i=t.nodeContext,r=i.display,o=i.parent?i.parent.display:null,a=!1;if("inline-table"===o&&!(i.formattingContext instanceof Ml))for(var s=i.parent;s;s=s.parent)if(s.formattingContext instanceof Ml){a=s.formattingContext===e;break}return a||"table-row"===r&&!zl(o)||"table-cell"===r&&"table-row"!==o&&!zl(o)||i.formattingContext instanceof Ml&&i.formattingContext!==e?n.buildDeepElementView(i).thenAsync((function(e){return t.nodeContext=e,Ti(!0)})):null}var Hl=function(t){function e(e,n){var i;return(i=t.call(this)||this).formattingContext=e,i.column=n,i.rowIndex=-1,i.columnIndex=0,i.inRow=!1,i.checkPoints=[],i.inHeaderOrFooter=!1,i}A(e,t);var n=e.prototype;return n.startNonInlineElementNode=function(e){var n=this.formattingContext,i=Vl(e,n,this.column);if(i)return i;this.postLayoutBlockContents(e);var r=e.nodeContext,o=r.display,a=n.getRepetitiveElements();switch(o){case"table":n.inlineBorderSpacing=r.inlineBorderSpacing;break;case"table-caption":var s=new _l(r.viewNode,r.captionSide);n.captions.push(s);break;case"table-header-group":return a.isHeaderRegistered()||(this.inHeaderOrFooter=!0,a.setHeaderNodeContext(r)),Ti(!0);case"table-footer-group":return a.isFooterRegistered()||(this.inHeaderOrFooter=!0,a.setFooterNodeContext(r)),Ti(!0);case"table-row":this.inHeaderOrFooter||(this.inRow=!0,this.rowIndex++,this.columnIndex=0,n.addRow(this.rowIndex,new Rl(this.rowIndex,r.sourceNode)),a.firstContentSourceNode||(a.firstContentSourceNode=r.sourceNode))}return t.prototype.startNonInlineElementNode.call(this,e)},n.afterNonInlineElementNode=function(e){var n=this.formattingContext,i=e.nodeContext,r=i.display,o=this.column.clientLayout;if(this.postLayoutBlockContents(e),i.sourceNode===n.tableSourceNode){var a=o.getElementComputedStyle(n.getRootViewNode(i));n.tableWidth=parseFloat(a[n.vertical?"height":"width"]),n.getRepetitiveElements().lastContentSourceNode=e.lastAfterNodeContext&&e.lastAfterNodeContext.sourceNode,e.break=!0}else switch(r){case"table-header-group":case"table-footer-group":if(this.inHeaderOrFooter)return this.inHeaderOrFooter=!1,Ti(!0);break;case"table-row":this.inHeaderOrFooter||(n.lastRowViewNode=i.viewNode,this.inRow=!1);break;case"table-cell":this.inHeaderOrFooter||(this.inRow||(this.rowIndex++,this.columnIndex=0,this.inRow=!0),n.addCell(this.rowIndex,new kl(this.rowIndex,this.columnIndex,i.viewNode)),this.columnIndex++)}return t.prototype.afterNonInlineElementNode.call(this,e)},n.startNonElementNode=function(t){this.registerCheckPoint(t)},n.afterNonElementNode=function(t){this.registerCheckPoint(t)},n.startInlineElementNode=function(t){this.registerCheckPoint(t)},n.afterInlineElementNode=function(t){this.registerCheckPoint(t)},n.registerCheckPoint=function(t){var e=t.nodeContext;e&&e.viewNode&&!ks(e)&&this.checkPoints.push(e.clone())},n.postLayoutBlockContents=function(t){this.checkPoints.length>0&&this.column.postLayoutBlock(t.nodeContext,this.checkPoints),this.checkPoints=[]},e}(qs),Gl=function(t){function e(e,n){var i;return(i=t.call(this,!0)||this).formattingContext=e,i.column=n,i.inRow=!1,i.currentRowIndex=-1,i.currentColumnIndex=0,i.originalStopAtOverflow=n.stopAtOverflow,n.stopAtOverflow=!1,i}A(e,t);var n=e.prototype;return n.resetColumn=function(){this.column.stopAtOverflow=this.originalStopAtOverflow},n.getColSpanningCellWidth=function(t){for(var e=this.formattingContext.colWidths,n=0,i=0;i<t.colSpan;i++)n+=e[t.anchorSlot.columnIndex+i];return n+this.formattingContext.inlineBorderSpacing*(t.colSpan-1)},n.layoutCell=function(t,e,n){var i=t.rowIndex,r=t.columnIndex,o=e.viewNode;t.colSpan>1&&(tt(o,"box-sizing","border-box"),tt(o,this.formattingContext.vertical?"height":"width",this.getColSpanningCellWidth(t)+"px"));var a=o.ownerDocument.createElement("div");o.appendChild(a);var s=new Fl(this.column,a,e);return this.formattingContext.addCellFragment(i,r,s),1===n.primary.steps.length&&n.primary.after&&(s.empty=!0),s.pseudoColumn.layout(n,!0).thenReturn(!0)},n.hasBrokenCellAtSlot=function(t){var e=this.formattingContext.cellBreakPositions[0];return!!e&&e.cell.anchorSlot.columnIndex===t},n.extractRowSpanningCellBreakPositions=function(){var t=this.formattingContext.cellBreakPositions;if(0===t.length)return[];var e=[],n=0;do{var i=t[n],r=i.cell.rowIndex;if(r<this.currentRowIndex){var o=e[r];o||(o=e[r]=[]),o.push(i),t.splice(n,1)}else n++}while(n<t.length);return e},n.layoutRowSpanningCellsFromPreviousFragment=function(t){var e=this,n=this.formattingContext,i=this.extractRowSpanningCellBreakPositions(),r=i.reduce((function(t){return t+1}),0);if(0===r)return Ti(!0);var o=this.column.layoutContext,a=t.nodeContext;a.viewNode.parentNode.removeChild(a.viewNode);var s=Ci("layoutRowSpanningCellsFromPreviousFragment"),l=Ti(!0),u=0,c=[];return i.forEach((function(t){l=l.thenAsync((function(){var i=Ya(t[0].cellNodePosition.steps[1],a.parent);return o.setCurrent(i,!1).thenAsync((function(){var a=Ti(!0),s=0;function l(t){for(;s<t;){if(!c.includes(s)){var e=i.viewNode.ownerDocument.createElement("td");tt(e,"padding","0"),i.viewNode.appendChild(e)}s++}}return t.forEach((function(t){a=a.thenAsync((function(){var n=t.cell;l(n.anchorSlot.columnIndex);var a=t.cellNodePosition,h=Ya(a.steps[0],i);return h.offsetInNode=a.offsetInNode,h.after=a.after,h.fragmentIndex=a.steps[0].fragmentIndex+1,o.setCurrent(h,!1).thenAsync((function(){for(var i=t.breakChunkPosition,o=0;o<n.colSpan;o++)c.push(s+o);return s+=n.colSpan,e.layoutCell(n,h,i).thenAsync((function(){return h.viewNode.rowSpan=n.rowIndex+n.rowSpan-e.currentRowIndex+r-u,Ti(!0)}))}))}))})),a.thenAsync((function(){return l(n.getColumnCount()),u++,Ti(!0)}))}))}))})),l.then((function(){o.setCurrent(a,!0,t.atUnforcedBreak).then((function(){s.finish(!0)}))})),s.result()},n.startTableRow=function(t){var e=this;if(this.inHeader||this.inFooter)return Ti(!0);var n=t.nodeContext,i=this.formattingContext;return this.currentRowIndex<0?this.currentRowIndex=i.findRowIndexBySourceNode(n.sourceNode):this.currentRowIndex++,this.currentColumnIndex=0,this.inRow=!0,this.layoutRowSpanningCellsFromPreviousFragment(t).thenAsync((function(){return e.registerCellFragmentIndex(),e.column.checkOverflowAndSaveEdgeAndBreakPosition(t.lastAfterNodeContext,null,!0,t.breakAtTheEdge)&&0===i.getRowSpanningCellsOverflowingTheRow(e.currentRowIndex-1).length&&(e.resetColumn(),n.overflow=!0,t.break=!0),Ti(!0)}))},n.registerCellFragmentIndex=function(){var t=this;this.formattingContext.getRowByIndex(this.currentRowIndex).cells.forEach((function(e){var n=t.formattingContext.cellBreakPositions[e.columnIndex];if(n&&n.cell.anchorSlot.columnIndex==e.anchorSlot.columnIndex){var i=n.cellNodePosition.steps[0],r=t.column.layoutContext.xmldoc.getElementOffset(i.node);nl(r,i.fragmentIndex+1,1)}}))},n.startTableCell=function(t){var e=this;if(this.inHeader||this.inFooter)return Ti(!0);var n=t.nodeContext;this.inRow||(this.currentRowIndex<0?this.currentRowIndex=0:this.currentRowIndex++,this.currentColumnIndex=0,this.inRow=!0);var i=this.formattingContext.getRowByIndex(this.currentRowIndex).cells[this.currentColumnIndex],r=n.copy().modify();r.after=!0,t.nodeContext=r;var o,a=Ci("startTableCell");if(this.hasBrokenCellAtSlot(i.anchorSlot.columnIndex)){var s=this.formattingContext.cellBreakPositions.shift();n.fragmentIndex=s.cellNodePosition.steps[0].fragmentIndex+1,o=Ti(s.breakChunkPosition)}else o=this.column.nextInTree(n,t.atUnforcedBreak).thenAsync((function(t){t.viewNode&&n.viewNode.removeChild(t.viewNode);var e=Ka(t,0);return Ti(new ts(e))}));return o.then((function(r){e.layoutCell(i,n,r).then((function(){e.afterNonInlineElementNode(t),e.currentColumnIndex++,a.finish(!0)}))})),a.result()},n.startNonInlineBox=function(t){var e=Vl(t,this.formattingContext,this.column);if(e)return e;var n=t.nodeContext,i=this.formattingContext.getRepetitiveElements(),r=n.display;return"table-header-group"===r&&i&&i.isHeaderSourceNode(n.sourceNode)?(this.inHeader=!0,Ti(!0)):"table-footer-group"===r&&i&&i.isFooterSourceNode(n.sourceNode)?(this.inFooter=!0,Ti(!0)):"table-row"===r?this.startTableRow(t):"table-cell"===r?this.startTableCell(t):Ti(!0)},n.endNonInlineBox=function(t){var e=t.nodeContext;if("table-row"===e.display&&(this.inRow=!1,!this.inHeader&&!this.inFooter)){var n=e.copy().modify();n.after=!1;var i=new Bl(this.currentRowIndex,n,this.formattingContext);this.column.breakPositions.push(i)}return Ti(!0)},n.afterNonInlineElementNode=function(n){var i=n.nodeContext,r=this.formattingContext.getRepetitiveElements(),o=i.display;if("table-header-group"===o?r&&!r.allowInsertRepeatitiveElements&&r.isHeaderSourceNode(i.sourceNode)?(this.inHeader=!1,i.viewNode.parentNode.removeChild(i.viewNode)):tt(i.viewNode,"display","table-row-group"):"table-footer-group"===o&&(r&&!r.allowInsertRepeatitiveElements&&r.isFooterSourceNode(i.sourceNode)?(this.inFooter=!1,i.viewNode.parentNode.removeChild(i.viewNode)):tt(i.viewNode,"display","table-row-group")),o&&e.ignoreList[o])i.viewNode.parentNode.removeChild(i.viewNode);else{if(i.sourceNode!==this.formattingContext.tableSourceNode)return t.prototype.afterNonInlineElementNode.call(this,n);i.overflow=this.column.checkOverflowAndSaveEdge(i,null),this.resetColumn(),n.break=!0}return Ti(!0)},e}(qs);Gl.ignoreList={"table-caption":!0,"table-column-group":!0,"table-column":!0};var Wl=[],Xl=function(){function t(){}var e=t.prototype;return e.layoutEntireTable=function(t,e){var n=new Hl(t.formattingContext,e);return new Ys(n,e.layoutContext).iterate(t)},e.getColumnWidths=function(t,e,n,i){for(var r=t.ownerDocument,o=r.createElement("tr"),a=[],s=0;s<e;s++){var l=r.createElement("td");o.appendChild(l),a.push(l)}t.parentNode.insertBefore(o,t.nextSibling);var u=a.map((function(t){var e=i.getElementClientRect(t);return n?e.height:e.width}));return t.parentNode.removeChild(o),u},e.getColGroupElements=function(t){for(var e=[],n=t.firstElementChild;n;)"colgroup"===n.localName&&e.push(n),n=n.nextElementSibling;return e},e.normalizeAndGetColElements=function(t){var e=[];return t.forEach((function(t){var n=t.span;t.removeAttribute("span");for(var i=t.firstElementChild;i;){if("col"===i.localName){var r=i.span;for(i.removeAttribute("span"),n-=r;r-- >1;){var o=i.cloneNode(!0);t.insertBefore(o,i),e.push(o)}e.push(i)}i=i.nextElementSibling}for(;n-- >0;)i=t.ownerDocument.createElement("col"),t.appendChild(i),e.push(i)})),e},e.addMissingColElements=function(t,e,n,i){if(t.length<n){var r=i.ownerDocument.createElement("colgroup");e.push(r);for(var o=t.length;o<n;o++){var a=i.ownerDocument.createElement("col");r.appendChild(a),t.push(a)}}},e.normalizeColGroups=function(t,e,n){var i=t.vertical,r=t.lastRowViewNode;if(r){t.lastRowViewNode=null;var o=r.ownerDocument.createDocumentFragment(),a=t.getColumnCount();if(a>0){var s=t.colWidths=this.getColumnWidths(r,a,i,n.clientLayout),l=this.getColGroupElements(e),u=this.normalizeAndGetColElements(l);this.addMissingColElements(u,l,a,e),u.forEach((function(t,e){tt(t,i?"height":"width",s[e]+"px")})),l.forEach((function(t){o.appendChild(t.cloneNode(!0))})),t.colGroups=o}else t.colGroups=o}},e.doInitialLayout=function(t,e){var n=this,i=t.formattingContext;i.vertical=t.vertical,i.initializeRepetitiveElements(t.vertical);var r,o,a,s=(r=t.sourceNode,o=Wl.findIndex((function(t){return t.root===r})),(a=Wl[o])?a.tableLayoutOption:null);!function(t){var e=Wl.findIndex((function(e){return e.root===t}));e>=0&&Wl.splice(e,1)}(t.sourceNode);var l=Ci("TableLayoutProcessor.doInitialLayout"),u=t.copy();return this.layoutEntireTable(t,e).then((function(r){var o=r.viewNode,a=e.clientLayout.getElementClientRect(o),c=e.vertical?a.left:a.bottom;if(c+=(e.vertical?-1:1)*Fs(t,e.collectElementsOffset()).current,!(e.isOverflown(c)||s&&s.calculateBreakPositionsInside))return e.breakPositions.push(new Yl(u)),void l.finish(r);n.normalizeColGroups(i,o,e),i.updateCellSizes(e.clientLayout),l.finish(null)})),l.result()},e.addCaptions=function(t,e,n){var i=t.captions;i.forEach((function(t,r){t&&(e.insertBefore(t.viewNode,n),"top"===t.side&&(i[r]=null))}))},e.addColGroups=function(t,e,n){t.colGroups&&0===this.getColGroupElements(e).length&&e.insertBefore(t.colGroups.cloneNode(!0),n)},e.removeColGroups=function(t,e){if(t.colGroups&&e){var n=this.getColGroupElements(e);n&&n.forEach((function(t){e.removeChild(t)}))}},e.doLayout=function(t,e){var n=t.formattingContext,i=n.getRootViewNode(t),r=i.firstChild;this.addCaptions(n,i,r),this.addColGroups(n,i,r);var o=new Gl(n,e),a=new Ys(o,e.layoutContext),s=Ci("TableFormattingContext.doLayout");return a.iterate(t).thenFinish(s),s.result()},e.layout=function(t,e,n){var i=t.formattingContext;return i.getRootViewNode(t)?(n&&Al(t.parent,e),new jl(i,this).layout(t,e)):e.buildDeepElementView(t)},e.createEdgeBreakPosition=function(t,e,n,i){return new Dl(t,e,n,i)},e.startNonInlineElementNode=function(t){return!1},e.afterNonInlineElementNode=function(t,e){return!1},e.finishBreak=function(t,e,n,i){var r=e.formattingContext;if("table-row"===e.display){var o,a=r.findRowIndexBySourceNode(e.sourceNode);if(r.cellBreakPositions=[],(o=e.after?r.getRowSpanningCellsOverflowingTheRow(a):r.getCellsFallingOnRow(a)).length){var s=Ci("TableLayoutProcessor.finishBreak"),l=0;return s.loopWithFrame((function(t){if(l!==o.length){var e=o[l++],n=r.getCellFragmentOfCell(e),i=n.findAcceptableBreakPosition().nodeContext,s=n.cellNodeContext,u=s.toNodePosition(),c=new ts(i.toNodePosition());r.cellBreakPositions.push({cellNodePosition:u,breakChunkPosition:c,cell:e});var h=s.viewNode;n.column.layoutContext.processFragmentedBlockEdge(n.cellNodeContext),a<e.rowIndex+e.rowSpan-1&&(h.rowSpan=a-e.rowIndex+1),n.empty?t.continueLoop():n.pseudoColumn.finishBreak(i,!1,!0).then((function(){!function(t,e,n){var i=e.getRepetitiveElements();if(i){var r=e.vertical,o=t.column,a=t.pseudoColumn.getColumnElement(),s=t.cellNodeContext.viewNode,l=o.clientLayout.getElementClientRect(s),u=o.getComputedPaddingBorder(s);r?tt(a,"max-width",l.right-o.footnoteEdge-i.calculateOffset(n)-u.right+"px"):tt(a,"max-height",o.footnoteEdge-i.calculateOffset(n)-l.top-u.top+"px"),tt(a,"overflow","hidden")}}(n,r,i),t.continueLoop()}))}else t.breakLoop()})).then((function(){t.clearOverflownViewNodes(e,!1),t.layoutContext.processFragmentedBlockEdge(e),r.finishFragment(),s.finish(!0)})),s.result()}}return r.finishFragment(),Ws.finishBreak(t,e,n,i)},e.clearOverflownViewNodes=function(t,e,n,i){Hs.prototype.clearOverflownViewNodes(t,e,n,i)},t}(),jl=function(t){function e(e,n){var i;return(i=t.call(this)||this).tableFormattingContext=e,i.processor=n,i}A(e,t);var n=e.prototype;return n.resolveLayoutMode=function(t){var e=this.tableFormattingContext.getRepetitiveElements();return e&&e.doneInitialLayout?(t.sourceNode!==this.tableFormattingContext.tableSourceNode||t.after||e&&e.preventSkippingHeader(),new $l(this.tableFormattingContext,this.processor)):new Kl(this.tableFormattingContext,this.processor)},n.clearNodes=function(e){t.prototype.clearNodes.call(this,e);var n=this.tableFormattingContext.getRootViewNode(e);this.processor.removeColGroups(this.tableFormattingContext,n)},n.restoreState=function(e,n){t.prototype.restoreState.call(this,e,n),this.tableFormattingContext.finishFragment()},e}(js),Kl=function(t){function e(e,n){var i;return(i=t.call(this,e)||this).processor=n,i}return A(e,t),e.prototype.doLayout=function(t,e){return this.processor.doInitialLayout(t,e)},e}(Sl),Yl=function(t){function e(e){return t.call(this,e,null,e.overflow,0)||this}A(e,t);var n=e.prototype;return n.getMinBreakPenalty=function(){if(!this.isEdgeUpdated)throw new Error("EdgeBreakPosition.prototype.updateEdge not called");return(this.overflows?3:0)+(this.position.parent?this.position.parent.breakPenalty:0)},n.breakPositionChosen=function(t){t.fragmentLayoutConstraints.push(new ql(this.position.sourceNode))},e}(_s),ql=function(){function t(t){this.tableRootNode=t,this.flagmentLayoutConstraintType="EntireTable"}var e=t.prototype;return e.allowLayout=function(t,e,n){return!1},e.nextCandidate=function(t){return!0},e.postLayout=function(t,e,n,i){Wl.push({root:e.sourceNode,tableLayoutOption:{calculateBreakPositionsInside:!0}})},e.finishBreak=function(t,e){return Ti(!0)},e.equalsTo=function(e){return e instanceof t&&e.tableRootNode===this.tableRootNode},e.getPriorityOfFinishBreak=function(){return 0},t}(),$l=function(t){function e(e,n){var i;return(i=t.call(this,e)||this).processor=n,i}return A(e,t),e.prototype.doLayout=function(t,e){var n=this.formattingContext.getRepetitiveElements();if(n&&!n.isAfterLastContent(t)){var i=new Zl(t);e.fragmentLayoutConstraints.some((function(t){return i.equalsTo(t)}))||e.fragmentLayoutConstraints.unshift(i)}return this.processor.doLayout(t,e)},e}(Nl),Zl=function(t){function e(e){var n;return(n=t.call(this,e)||this).flagmentLayoutConstraintType="TableRow",n.cellFragmentLayoutConstraints=[],n}A(e,t);var n=e.prototype;return n.allowLayout=function(t,e,n){var i=this.getRepetitiveElements();return!(i&&!n.pseudoParent&&!As(this.nodeContext.viewNode)&&i.isEnableToUpdateState()&&(e&&!t||t&&t.overflow))},n.nextCandidate=function(e){return!!this.collectCellFragmentLayoutConstraints(e,this.nodeContext.formattingContext).some((function(t){return t.constraints.some((function(t){return t.nextCandidate(e)}))}))||t.prototype.nextCandidate.call(this,e)},n.postLayout=function(e,n,i,r){var o=this.nodeContext.formattingContext;if(this.cellFragmentLayoutConstraints=this.collectCellFragmentLayoutConstraints(n,o),this.cellFragmentLayoutConstraints.forEach((function(t){t.constraints.forEach((function(n){n.postLayout(e,t.breakPosition,i,r)}))})),!e){var a=o.getRootViewNode(this.nodeContext);(new Xl).removeColGroups(o,a),this.removeDummyRowNodes(i)}t.prototype.postLayout.call(this,e,n,i,r)},n.finishBreak=function(e,n){var i=this,r=Ci("finishBreak"),o=this.cellFragmentLayoutConstraints.reduce((function(t,e){return t.concat(e.constraints.map((function(t){return{constraint:t,breakPosition:e.breakPosition}})))}),[]),a=0;return r.loop((function(){if(a<o.length){var t=o[a++];return t.constraint.finishBreak(t.breakPosition,n).thenReturn(!0)}return Ti(!1)})).then((function(){r.finish(!0)})),r.result().thenAsync((function(){return t.prototype.finishBreak.call(i,e,n)}))},n.removeDummyRowNodes=function(t){if(t&&"table-row"===t.display&&t.viewNode)for(;t.viewNode.previousElementSibling;){var e=t.viewNode.previousElementSibling;e.parentNode&&e.parentNode.removeChild(e)}},n.collectCellFragmentLayoutConstraints=function(t,e){return this.getCellFragemnts(t,e).map((function(t){return{constraints:t.fragment.pseudoColumn.getColumn().fragmentLayoutConstraints,breakPosition:t.breakPosition}}))},n.getCellFragemnts=function(t,e){var n=Number.MAX_VALUE;t&&"table-row"===t.display&&(n=e.findRowIndexBySourceNode(t.sourceNode)+1),n=Math.min(e.cellFragments.length,n);for(var i=[],r=0;r<n;r++)e.cellFragments[r]&&e.cellFragments[r].forEach((function(t){t&&i.push({fragment:t,breakPosition:t.findAcceptableBreakPosition().nodeContext})}));return i},n.getElementsOffsetsForTableCell=function(t){var e=this.nodeContext.formattingContext,n=e.findCellFromColumn(t);return n?e.collectElementsOffsetOfUpperCells(n):e.collectElementsOffsetOfHighestColumn()},n.equalsTo=function(t){return t instanceof e&&this.nodeContext.formattingContext===t.nodeContext.formattingContext},e}(xl),Ql=new Xl;function Jl(t){return t.reduce((function(t,e){return t+e}),0)/t.length}g(e.HOOKS.RESOLVE_FORMATTING_CONTEXT,(function(t,e,n,i,r,o){if(!e)return null;if(n===qe.table){var a=t.parent;return new Ml(a?a.formattingContext:null,t.sourceNode)}return null})),g(e.HOOKS.RESOLVE_LAYOUT_PROCESSOR,(function(t){return t instanceof Ml?Ql:null}));var tu=function(t,e){this.layoutResult=t,this.penalty=e};function eu(t){return t.vertical?t.width:t.height}function nu(t,e){t.vertical?t.width=e:t.height=e}var iu=function(){function t(t,e,n){this.layoutContainer=t,this.columnGenerator=e,this.regionPageFloatLayoutContext=n,this.originalContainerBlockSize=eu(t)}var e=t.prototype;return e.balanceColumns=function(t){var e=this,n=Ci("ColumnBalancer#balanceColumns");e.preBalance(t),e.savePageFloatLayoutContexts(t),e.layoutContainer.clear();var i=[e.createTrialResult(t)];return n.loopWithFrame((function(t){e.hasNextCandidate(i)?(e.updateCondition(i),e.columnGenerator().then((function(n){e.savePageFloatLayoutContexts(n),e.layoutContainer.clear(),n?(i.push(e.createTrialResult(n)),t.continueLoop()):t.breakLoop()}))):t.breakLoop()})).then((function(){var t=i.reduce((function(t,e){return e.penalty<t.penalty?e:t}),i[0]);e.restoreContents(t.layoutResult),e.postBalance(),n.finish(t.layoutResult)})),n.result()},e.createTrialResult=function(t){var e=this.calculatePenalty(t);return new tu(t,e)},e.preBalance=function(t){},e.postBalance=function(){nu(this.layoutContainer,this.originalContainerBlockSize)},e.savePageFloatLayoutContexts=function(t){var e=this.regionPageFloatLayoutContext.detachChildren();t&&(t.columnPageFloatLayoutContexts=e)},e.restoreContents=function(t){var e=this.layoutContainer.element;t.columns.forEach((function(t){e.appendChild(t.element)})),this.regionPageFloatLayoutContext.attachChildren(t.columnPageFloatLayoutContexts)},t}();function ru(t){var e=t[t.length-1];if(0===e.penalty)return!1;var n=t[t.length-2];if(n&&e.penalty>=n.penalty)return!1;var i=e.layoutResult.columns;return Math.max.apply(null,i.map((function(t){return t.computedBlockSize})))>Math.max.apply(null,i.map((function(t){return t.getMaxBlockSizeOfPageFloats()})))+1}function ou(t,e){var n=Math.max.apply(null,t[t.length-1].layoutResult.columns.map((function(t){return isNaN(t.blockDistanceToBlockEndFloats)?t.computedBlockSize:t.computedBlockSize-t.blockDistanceToBlockEndFloats+1})))-1;n<eu(e)?nu(e,n):nu(e,eu(e)-1)}var au=function(t){function e(e,n,i,r){var o;return(o=t.call(this,i,e,n)||this).columnCount=r,o.originalPosition=null,o.foundUpperBound=!1,o}A(e,t);var n=e.prototype;return n.preBalance=function(t){var e=t.columns.reduce((function(t,e){return t+e.computedBlockSize}),0);nu(this.layoutContainer,e/this.columnCount),this.originalPosition=t.position},n.checkPosition=function(t){return this.originalPosition?this.originalPosition.isSamePosition(t):null===t},n.calculatePenalty=function(t){if(!this.checkPosition(t.position))return 1/0;var e=t.columns;return su(e)?1/0:Math.max.apply(null,e.map((function(t){return t.computedBlockSize})))},n.hasNextCandidate=function(t){if(1===t.length)return!0;if(this.foundUpperBound)return ru(t);var e=t[t.length-1];return this.checkPosition(e.layoutResult.position)&&!su(e.layoutResult.columns)?(this.foundUpperBound=!0,!0):eu(this.layoutContainer)<this.originalContainerBlockSize},n.updateCondition=function(t){if(this.foundUpperBound)ou(t,this.layoutContainer);else{var e=Math.min(this.originalContainerBlockSize,eu(this.layoutContainer)+.1*this.originalContainerBlockSize);nu(this.layoutContainer,e)}},e}(iu);function su(t){if(t.length<=1)return!1;var e=t[t.length-1].computedBlockSize;return t.slice(0,t.length-1).every((function(t){return e>t.computedBlockSize}))}var lu,uu=function(t){function e(e,n,i){return t.call(this,i,e,n)||this}A(e,t);var n=e.prototype;return n.calculatePenalty=function(t){if(t.columns.every((function(t){return 0===t.computedBlockSize})))return 1/0;var e,n,i=t.columns.filter((function(t){return!t.pageBreakType})).map((function(t){return t.computedBlockSize}));return n=Jl(e=i),Jl(e.map((function(t){var e=t-n;return e*e})))},n.hasNextCandidate=function(t){return ru(t)},n.updateCondition=function(t){ou(t,this.layoutContainer)},e}(iu),cu=function(t,e,n){this.endStuckFixed=t,this.endFixed=e,this.endSlipped=n},hu=function(){function t(){this.map=[]}var e=t.prototype;return e.getMaxFixed=function(){return 0==this.map.length?0:this.map[this.map.length-1].endFixed},e.getMaxSlipped=function(){return 0==this.map.length?0:this.map[this.map.length-1].endSlipped},e.addStuckRange=function(t){if(0==this.map.length)this.map.push(new cu(t,t,t));else{var e=this.map[this.map.length-1],n=e.endSlipped+t-e.endFixed;e.endFixed==e.endStuckFixed?(e.endFixed=t,e.endStuckFixed=t,e.endSlipped=n):this.map.push(new cu(t,t,n))}},e.addSlippedRange=function(t){0==this.map.length?this.map.push(new cu(t,0,0)):this.map[this.map.length-1].endFixed=t},e.slippedByFixed=function(t){var e=this,n=ht(this.map.length,(function(n){return t<=e.map[n].endFixed})),i=this.map[n];return i.endSlipped-Math.max(0,i.endStuckFixed-t)},e.fixedBySlipped=function(t){var e=this,n=ht(this.map.length,(function(n){return t<=e.map[n].endSlipped})),i=this.map[n];return i.endStuckFixed-(i.endSlipped-t)},t}(),fu=function(){function t(e,n,i,r,o,a,s,l){if(this.context=e,this.style=n,this.offset=i,this.isRoot=r,this.flowChunk=o,this.atBlockStart=a,this.atFlowStart=s,this.isParentBoxDisplayed=l,this.isBlockValue=null,this.hasBoxValue=null,this.styleValues={},this.beforeBox=null,this.afterBox=null,this.breakBefore=null,this.flowName=o.flowName,this.hasBox()){var u=n._pseudos;if(u&&u.before){var c=new t(e,u.before,i,!1,o,this.isBlock(),s,!0);as(c.styleValue("content"))&&(this.beforeBox=c,this.breakBefore=c.breakBefore)}}this.breakBefore=Cs(this.getBreakValue("before"),this.breakBefore),this.atFlowStart&&Es(this.breakBefore)&&(o.breakBefore=Cs(o.breakBefore,this.breakBefore))}var e=t.prototype;return e.buildAfterPseudoElementBox=function(e,n,i){if(this.hasBox()){var r=this.style._pseudos;if(r&&r.after){var o=new t(this.context,r.after,e,!1,this.flowChunk,n,i,!0);as(o.styleValue("content"))&&(this.afterBox=o)}}},e.styleValue=function(t,e){if(!(t in this.styleValues)){var n=this.style[t];this.styleValues[t]=n?n.evaluate(this.context,t):e||null}return this.styleValues[t]},e.displayValue=function(){return this.styleValue("display",qe.inline)},e.isBlock=function(){if(null===this.isBlockValue){var t=this.displayValue(),e=this.styleValue("position"),n=this.styleValue("float");this.isBlockValue=Us(t,e,n,this.isRoot)}return this.isBlockValue},e.hasBox=function(){return null===this.hasBoxValue&&(this.hasBoxValue=this.isParentBoxDisplayed&&this.displayValue()!==qe.none),this.hasBoxValue},e.getBreakValue=function(t){var e=null;if(this.isBlock()){var n=this.styleValue("break-"+t);n&&(e=n.toString())}return e},t}(),du=function(){function t(t){this.context=t,this.stack=[],this.atBlockStart=!0,this.atFlowStart=!0,this.atStartStack=[]}var e=t.prototype;return e.empty=function(){return 0===this.stack.length},e.lastBox=function(){return this.stack[this.stack.length-1]},e.lastFlowName=function(){var t=this.lastBox();return t?t.flowChunk.flowName:null},e.isCurrentBoxDisplayed=function(){return this.stack.every((function(t){return t.displayValue()!==qe.none}))},e.push=function(t,e,n,i){var r=this.lastBox();i&&r&&i.flowName!==r.flowName&&this.atStartStack.push({atBlockStart:this.atBlockStart,atFlowStart:this.atFlowStart});var o=i||r.flowChunk,a=this.atFlowStart||!!i,s=this.isCurrentBoxDisplayed(),l=new fu(this.context,t,e,n,o,a||this.atBlockStart,a,s);return this.stack.push(l),this.atBlockStart=l.hasBox()?!l.beforeBox&&l.isBlock():this.atBlockStart,this.atFlowStart=l.hasBox()?!l.beforeBox&&a:this.atFlowStart,l},e.encounteredTextNode=function(t){var e=this.lastBox();(this.atBlockStart||this.atFlowStart)&&e.hasBox()&&(za(t,Ua(e.styleValue("white-space",qe.normal).toString()))||(this.atBlockStart=!1,this.atFlowStart=!1))},e.pop=function(t){var e=this.stack.pop();if(e.buildAfterPseudoElementBox(t,this.atBlockStart,this.atFlowStart),this.atFlowStart&&e.afterBox){var n=e.afterBox.getBreakValue("before");e.flowChunk.breakBefore=Cs(e.flowChunk.breakBefore,n)}var i=this.lastBox();if(i)if(i.flowName===e.flowName)e.hasBox()&&(this.atBlockStart=this.atFlowStart=!1);else{var r=this.atStartStack.pop();this.atBlockStart=r.atBlockStart,this.atFlowStart=r.atFlowStart}return e},e.nearestBlockStartOffset=function(t){if(!t.atBlockStart)return t.offset;var e=this.stack.length-1,n=this.stack[e];for(n===t&&(e--,n=this.stack[e]);e>=0;){if(n.flowName!==t.flowName)return t.offset;if(!n.atBlockStart)return n.offset;if(n.isRoot)return n.offset;t=n,n=this.stack[--e]}throw new Error("No block start offset found!")},t}(),pu=function(){function t(t,e,n,i,r,o,a,s){this.xmldoc=t,this.scope=n,this.context=i,this.primaryFlows=r,this.validatorSet=o,this.counterListener=a,this.rootStyle={},this.styleMap={},this.flows={},this.flowChunks=[],this.flowListener=null,this.flowToReach=null,this.idToReach=null,this.primary=!0,this.primaryStack=[],this.rootBackgroundAssigned=!1,this.rootLayoutAssigned=!1,this.breakBeforeValues={},this.bodyReached=!0,this.root=t.root,this.cascadeHolder=e,this.last=this.root,this.cascade=e.createInstance(i,a,s,t.lang),this.offsetMap=new hu;var l=t.getElementOffset(this.root);this.lastOffset=l,this.boxStack=new du(i),this.offsetMap.addStuckRange(l);var u=this.getAttrStyle(this.root);switch(this.cascade.pushElement(this.root,u,l),this.postprocessTopStyle(u,!1),this.root.namespaceURI){case G.XHTML:case G.FB2:this.bodyReached=!1}this.primaryStack.push(!0),this.styleMap={},this.styleMap["e"+l]=u,this.lastOffset++,this.replayFlowElementsFromOffset(-1)}var e=t.prototype;return e.hasProp=function(t,e,n){var i=t[n];return i&&i.evaluate(this.context)!==e[n]},e.transferPropsToRoot=function(t,e){for(var n in e){var i=t[n];if(i)this.rootStyle[n]=i,delete t[n];else{var r=e[n];r&&(this.rootStyle[n]=new zr(r,33554432))}}},e.postprocessTopStyle=function(t,e){var n=this;if(["writing-mode","direction"].forEach((function(i){!t[i]||e&&n.rootStyle[i]||(n.rootStyle[i]=t[i])})),!this.rootBackgroundAssigned){var i=this.hasProp(t,this.validatorSet.backgroundProps,"background-color")?t["background-color"].evaluate(this.context):null,r=this.hasProp(t,this.validatorSet.backgroundProps,"background-image")?t["background-image"].evaluate(this.context):null;(i&&i!==qe.inherit||r&&r!==qe.inherit)&&(this.transferPropsToRoot(t,this.validatorSet.backgroundProps),this.rootBackgroundAssigned=!0)}if(!this.rootLayoutAssigned)for(var o=0;o<gu.length;o++)if(this.hasProp(t,this.validatorSet.layoutProps,gu[o])){this.transferPropsToRoot(t,this.validatorSet.layoutProps),this.rootLayoutAssigned=!0;break}if(!e){var a=t["font-size"];if(a){var s=a.evaluate(this.context),l=s.num;switch(s.unit){case"em":case"rem":l*=this.context.initialFontSize;break;case"ex":l*=this.context.initialFontSize*Vt.ex/Vt.em;break;case"%":l*=this.context.initialFontSize/100;break;default:var u=Vt[s.unit];u&&(l*=u)}this.context.rootFontSize=l}}},e.getTopContainerStyle=function(){for(var t=0;!this.bodyReached&&this.styleUntil(t+=5e3,0)!=Number.POSITIVE_INFINITY;);return this.rootStyle},e.getAttrStyle=function(t){if(t.style instanceof CSSStyleDeclaration){var e=t.getAttribute("style");if(e)return function(t,e,n,i){var r=new la(t,e),o=new wi(i,r);try{!function(t,e,n){new vr(ir,t,e,n).runParser(Number.POSITIVE_INFINITY,!1,!0,!1,!1)}(o,r,n)}catch(t){f.warn(t,"Style attribute parse error:")}return r.elementStyle}(this.scope,this.validatorSet,this.xmldoc.url,e)}return{}},e.getReachedOffset=function(){return this.lastOffset},e.replayFlowElementsFromOffset=function(t){if(!(t>=this.lastOffset)){var e=this.context,n=this.xmldoc.getElementOffset(this.root);if(t<n){var i=this.getStyle(this.root,!1),r=Kr(i,"flow-into"),o=r?r.evaluate(e,"flow-into").toString():"body",a=this.encounteredFlowElement(o,i,this.root,n);this.boxStack.empty()&&this.boxStack.push(i,n,!0,a)}var s=this.xmldoc.getNodeByOffset(t),l=this.xmldoc.getNodeOffset(s,0,!1);if(!(l>=this.lastOffset))for(;;){if(1!=s.nodeType)l+=s.textContent.length;else{var u=s,c=this.getStyle(u,!1),h=c["flow-into"];if(h){var f=h.evaluate(e,"flow-into").toString();this.encounteredFlowElement(f,c,u,l)}l++}if(l>=this.lastOffset)break;var d=s.firstChild;if(null==d)for(;!(d=s.nextSibling);)if((s=s.parentNode)===this.root)return;s=d}}},e.resetFlowChunkStream=function(t){this.flowListener=t;for(var e=0;e<this.flowChunks.length;e++)this.flowListener.encounteredFlowChunk(this.flowChunks[e],this.flows[this.flowChunks[e].flowName])},e.styleUntilFlowIsReached=function(t){this.flowToReach=t;for(var e=0;null!=this.flowToReach&&this.styleUntil(e+=5e3,0)!=Number.POSITIVE_INFINITY;);},e.styleUntilIdIsReached=function(t){if(t){this.idToReach=t;for(var e=0;this.idToReach&&this.styleUntil(e+=5e3,0)!==Number.POSITIVE_INFINITY;);this.idToReach=null}},e.encounteredFlowElement=function(t,e,n,i){var r=0,o=Number.POSITIVE_INFINITY,a=!1,s=!1,l=!1,u=e["flow-options"];if(u){var c=function(t){if(t){var e=new Cn;try{return t.visit(e),e.propSet}catch(t){f.warn(t,"toSet:")}}return{}}(u.evaluate(this.context,"flow-options"));a=!!c.exclusive,s=!!c.static,l=!!c.last}var h=e["flow-linger"];h&&(o=xn(h.evaluate(this.context,"flow-linger"),Number.POSITIVE_INFINITY));var d=e["flow-priority"];d&&(r=xn(d.evaluate(this.context,"flow-priority"),0));var p=this.breakBeforeValues[i]||null,g=this.flows[t];if(!g){var m=this.boxStack.lastFlowName();g=this.flows[t]=new Va(t,m)}var v=new Ha(t,n,i,r,o,a,s,l,p);return this.flowChunks.push(v),this.flowToReach==t&&(this.flowToReach=null),this.flowListener&&this.flowListener.encounteredFlowChunk(v,g),v},e.registerForcedBreakOffset=function(t,e,n){if(Es(t)){var i=this.flows[n].forcedBreakOffsets;(0===i.length||i[i.length-1]<e)&&i.push(e)}this.breakBeforeValues[e]=Cs(this.breakBeforeValues[e],t)},e.styleUntil=function(t,e){var n=-1;if(t<=this.lastOffset&&(n=this.offsetMap.slippedByFixed(t)+e)<this.offsetMap.getMaxSlipped())return this.offsetMap.fixedBySlipped(n);if(null==this.last)return Number.POSITIVE_INFINITY;for(var i=this.context;;){var r=this.last.firstChild;if(null==r)for(;;){if(1==this.last.nodeType){this.cascade.popElement(this.last),this.primary=this.primaryStack.pop();var o=this.boxStack.pop(this.lastOffset),a=null;if(o.afterBox){var s=o.afterBox.getBreakValue("before");this.registerForcedBreakOffset(s,o.afterBox.atBlockStart?this.boxStack.nearestBlockStartOffset(o):o.afterBox.offset,o.flowName),a=o.afterBox.getBreakValue("after")}a=Cs(a,o.getBreakValue("after")),this.registerForcedBreakOffset(a,this.lastOffset,o.flowName)}if(r=this.last.nextSibling)break;if(this.last=this.last.parentNode,this.last===this.root)return this.last=null,t<this.lastOffset&&(n<0&&(n=this.offsetMap.slippedByFixed(t)+e),n<=this.offsetMap.getMaxSlipped())?this.offsetMap.fixedBySlipped(n):Number.POSITIVE_INFINITY}if(this.last=r,1!=this.last.nodeType)this.lastOffset+=this.last.textContent.length,this.boxStack.encounteredTextNode(this.last),this.primary?this.offsetMap.addStuckRange(this.lastOffset):this.offsetMap.addSlippedRange(this.lastOffset);else{var l=this.last,u=this.getAttrStyle(l);this.primaryStack.push(this.primary),this.cascade.pushElement(l,u,this.lastOffset);var c=l.getAttribute("id")||l.getAttributeNS(G.XML,"id");c&&c===this.idToReach&&(this.idToReach=null),this.bodyReached||"body"!=l.localName||l.parentNode!=this.root||(this.postprocessTopStyle(u,!0),this.bodyReached=!0);var h=void 0,f=u["flow-into"];if(f){var d=f.evaluate(i,"flow-into").toString(),p=this.encounteredFlowElement(d,u,l,this.lastOffset);this.primary=!!this.primaryFlows[d],h=this.boxStack.push(u,this.lastOffset,l===this.root,p)}else h=this.boxStack.push(u,this.lastOffset,l===this.root);var g=this.boxStack.nearestBlockStartOffset(h);if(this.registerForcedBreakOffset(h.breakBefore,g,h.flowName),h.beforeBox){var m=h.beforeBox.getBreakValue("after");this.registerForcedBreakOffset(m,h.beforeBox.atBlockStart?g:h.offset,h.flowName)}if(this.primary&&h.displayValue()===qe.none&&(this.primary=!1),this.styleMap["e"+this.lastOffset]=u,this.lastOffset++,this.primary?this.offsetMap.addStuckRange(this.lastOffset):this.offsetMap.addSlippedRange(this.lastOffset),t<this.lastOffset&&(n<0&&(n=this.offsetMap.slippedByFixed(t)+e),n<=this.offsetMap.getMaxSlipped()))return this.offsetMap.fixedBySlipped(n)}}},e.getStyle=function(t,e){var n=this.xmldoc.getElementOffset(t),i="e"+n;return e&&(n=this.xmldoc.getNodeOffset(t,0,!0)),this.lastOffset<=n&&this.styleUntil(n,0),this.styleMap[i]},e.processContent=function(t,e){},t}(),gu=["column-count","column-width","column-fill"],mu=function(){function t(t){this.validator=t,this.success=null,this.failure=null,this.code=0}var e=t.prototype;return e.isSpecial=function(){return 0!=this.code},e.markAsStartGroup=function(){this.code=-1},e.isStartGroup=function(){return-1==this.code},e.markAsEndGroup=function(){this.code=-2},e.isEndGroup=function(){return-2==this.code},e.markAsStartAlternate=function(t){this.code=2*t+1},e.isStartAlternate=function(){return this.code>0&&this.code%2!=0},e.markAsEndAlternate=function(t){this.code=2*t+2},e.isEndAlternate=function(){return this.code>0&&this.code%2==0},e.getAlternate=function(){return Math.floor((this.code-1)/2)},t}(),vu=function(t,e){this.where=t,this.success=e,this.what=-1};!function(t){t[t.FOLLOW=1]="FOLLOW",t[t.OPTIONAL=2]="OPTIONAL",t[t.REPEATED=3]="REPEATED",t[t.ALTERNATE=4]="ALTERNATE"}(lu||(lu={}));var bu=function(){function t(){this.nodes=[],this.connections=[],this.match=[],this.nomatch=[],this.error=[],this.emptyHead=!0}var e=t.prototype;return e.connect=function(t,e){for(var n=0;n<t.length;n++)this.connections[t[n]].what=e;t.splice(0,t.length)},e.clone=function(){for(var e,n,i,r=new t,o=0;o<this.nodes.length;o++){var a=this.nodes[o],s=new mu(a.validator);s.code=a.code,r.nodes.push(s)}for(var l=0;l<this.connections.length;l++){var u=this.connections[l],c=new vu(u.where,u.success);c.what=u.what,r.connections.push(c)}return(e=r.match).push.apply(e,this.match),(n=r.nomatch).push.apply(n,this.nomatch),(i=r.error).push.apply(i,this.error),r},e.addSpecialToArr=function(t,e,n){var i=this.nodes.length,r=new mu(Su);n>=0?e?r.markAsStartAlternate(n):r.markAsEndAlternate(n):e?r.markAsStartGroup():r.markAsEndGroup(),this.nodes.push(r),this.connect(t,i);var o=new vu(i,!0),a=new vu(i,!1);t.push(this.connections.length),this.connections.push(a),t.push(this.connections.length),this.connections.push(o)},e.endSpecialGroup=function(){for(var t=[this.match,this.nomatch,this.error],e=0;e<t.length;e++)this.addSpecialToArr(t[e],!1,-1)},e.startSpecialGroup=function(){if(this.nodes.length)throw new Error("invalid call");this.addSpecialToArr(this.match,!0,-1)},e.endClause=function(t){this.addSpecialToArr(this.match,!1,t)},e.startClause=function(t){if(this.nodes.length)throw new Error("invalid call");var e=new mu(Su);e.markAsStartAlternate(t),this.nodes.push(e);var n=new vu(0,!0),i=new vu(0,!1);this.nomatch.push(this.connections.length),this.connections.push(i),this.match.push(this.connections.length),this.connections.push(n)},e.addPrimitive=function(t){var e=this.nodes.length;this.nodes.push(new mu(t));var n=new vu(e,!0),i=new vu(e,!1);this.connect(this.match,e),this.emptyHead?(this.nomatch.push(this.connections.length),this.emptyHead=!1):this.error.push(this.connections.length),this.connections.push(i),this.match.push(this.connections.length),this.connections.push(n)},e.isSimple=function(){return 1==this.nodes.length&&!this.nodes[0].isSpecial()},e.isPrimitive=function(){return this.isSimple()&&this.nodes[0].validator instanceof wu},e.addGroup=function(t,e){if(0!=t.nodes.length){var n=this.nodes.length;if(e==lu.ALTERNATE&&1==n&&t.isPrimitive()&&this.isPrimitive())this.nodes[0].validator=this.nodes[0].validator.combine(t.nodes[0].validator);else{for(var i=0;i<t.nodes.length;i++)this.nodes.push(t.nodes[i]);e==lu.ALTERNATE?(this.emptyHead=!0,this.connect(this.nomatch,n)):this.connect(this.match,n);for(var r=this.connections.length,o=0;o<t.connections.length;o++){var a=t.connections[o];a.where+=n,a.what>=0&&(a.what+=n),this.connections.push(a)}for(var s=0;s<t.match.length;s++)this.match.push(t.match[s]+r);if(e==lu.REPEATED&&this.connect(this.match,n),e==lu.OPTIONAL||e==lu.REPEATED)for(var l=0;l<t.nomatch.length;l++)this.match.push(t.nomatch[l]+r);else if(this.emptyHead){for(var u=0;u<t.nomatch.length;u++)this.nomatch.push(t.nomatch[u]+r);this.emptyHead=t.emptyHead}else for(var c=0;c<t.nomatch.length;c++)this.error.push(t.nomatch[c]+r);for(var h=0;h<t.error.length;h++)this.error.push(t.error[h]+r);t.nodes=null,t.connections=null}}},e.finish=function(t,e){var n=this.nodes.length;this.nodes.push(t),this.nodes.push(e),this.connect(this.match,n),this.connect(this.nomatch,n+1),this.connect(this.error,n+1);for(var i,r=B(this.connections);!(i=r()).done;){var o=i.value;o.success?this.nodes[o.where].success=this.nodes[o.what]:this.nodes[o.where].failure=this.nodes[o.what]}for(var a=0;a<n;a++)if(null==this.nodes[a].failure||null==this.nodes[a].success)throw new Error("Invalid validator state");return this.nodes[0]},t}(),yu=function(t){function e(){return t.call(this)||this}return A(e,t),e.prototype.validateForShorthand=function(t,e){var n=t[e].visit(this);return n?[n]:null},e}(Pe),wu=function(t){function e(e,n,i){var r;return(r=t.call(this)||this).allowed=e,r.idents=n,r.units=i,r}A(e,t);var n=e.prototype;return n.visitEmpty=function(t){return 1&this.allowed?t:null},n.visitSlash=function(t){return 2048&this.allowed?t:null},n.visitStr=function(t){return 2&this.allowed?t:null},n.visitIdent=function(t){return this.idents[t.name.toLowerCase()]||(4&this.allowed?t:null)},n.visitNumeric=function(t){return 0!=t.num||512&this.allowed?t.num<0&&!(256&this.allowed)?null:this.units[t.unit]?t:null:"%"==t.unit&&1024&this.allowed?t:null},n.visitNum=function(t){return 0==t.num?512&this.allowed?t:null:t.num<=0&&!(256&this.allowed)?null:16&this.allowed?t:null},n.visitInt=function(t){return 0==t.num?512&this.allowed?t:null:t.num<=0&&!(256&this.allowed)?null:48&this.allowed?t:this.idents[""+t.num]||null},n.visitColor=function(t){return 64&this.allowed?t:null},n.visitURL=function(t){return 128&this.allowed?t:null},n.visitSpaceList=function(t){return null},n.visitCommaList=function(t){return null},n.visitFunc=function(t){return null},n.visitExpr=function(t){return 2046&this.allowed?t:null},n.combine=function(t){var n={},i={};for(var r in this.idents)n[r]=this.idents[r];for(var o in t.idents)n[o]=t.idents[o];for(var a in this.units)i[a]=this.units[a];for(var s in t.units)i[s]=t.units[s];return new e(this.allowed|t.allowed,n,i)},e}(yu),Eu={},Su=new wu(0,Eu,Eu),Nu=function(t){function e(e){var n;return(n=t.call(this)||this).successTerminal=new mu(null),n.failureTerminal=new mu(null),n.first=e.finish(n.successTerminal,n.failureTerminal),n}A(e,t);var n=e.prototype;return n.validateList=function(t,e,n){for(var i=e?[]:t,r=this.first,o=n,a=null,s=null;r!==this.successTerminal&&r!==this.failureTerminal;)if(o>=t.length)r=r.failure;else{var l=t[o],u=l;if(r.isSpecial()){var c=!0;r.isStartGroup()?(a?a.push(s):a=[s],s=[]):r.isEndGroup()?s=a.length>0?a.pop():null:r.isEndAlternate()?s[r.getAlternate()]="taken":c=null==s[r.getAlternate()],r=c?r.success:r.failure}else{if(0==o&&!e&&r.validator instanceof Cu&&this instanceof Cu){if(u=new Ge(t).visit(r.validator)){o=t.length,r=r.success;continue}}else if(0==o&&!e&&r.validator instanceof Tu&&this instanceof Cu){if(u=new We(t).visit(r.validator)){o=t.length,r=r.success;continue}}else u=l.visit(r.validator);if(!u){r=r.failure;continue}if(u!==l&&t===i){i=[];for(var h=0;h<o;h++)i[h]=t[h]}t!==i&&(i[o-n]=u),o++,r=r.success}}return r===this.successTerminal&&(e?i.length>0:o==t.length)?i:null},n.validateSingle=function(t){for(var e=null,n=this.first;n!==this.successTerminal&&n!==this.failureTerminal;)t?n.isSpecial()?n=n.success:(e=t.visit(n.validator))?(t=null,n=n.success):n=n.failure:n=n.failure;return n===this.successTerminal?e:null},n.visitEmpty=function(t){return this.validateSingle(t)},n.visitSlash=function(t){return this.validateSingle(t)},n.visitStr=function(t){return this.validateSingle(t)},n.visitIdent=function(t){return this.validateSingle(t)},n.visitNumeric=function(t){return this.validateSingle(t)},n.visitNum=function(t){return this.validateSingle(t)},n.visitInt=function(t){return this.validateSingle(t)},n.visitColor=function(t){return this.validateSingle(t)},n.visitURL=function(t){return this.validateSingle(t)},n.visitSpaceList=function(t){return null},n.visitCommaList=function(t){return null},n.visitFunc=function(t){return this.validateSingle(t)},n.visitExpr=function(t){return null},e}(yu),Cu=function(t){function e(e){return t.call(this,e)||this}A(e,t);var n=e.prototype;return n.visitSpaceList=function(t){var e=this.validateList(t.values,!1,0);return e===t.values?t:e?new Ge(e):null},n.visitCommaList=function(t){for(var e=this.first,n=!1;e;){if(e.validator instanceof Tu){n=!0;break}e=e.failure}if(n){var i=this.validateList(t.values,!1,0);return i===t.values?t:i?new We(i):null}return null},n.validateForShorthand=function(t,e){return this.validateList(t,!0,e)},e}(Nu),Tu=function(t){function e(e){return t.call(this,e)||this}A(e,t);var n=e.prototype;return n.visitSpaceList=function(t){return this.validateSingle(t)},n.visitCommaList=function(t){var e=this.validateList(t.values,!1,0);return e===t.values?t:e?new We(e):null},n.validateForShorthand=function(t,e){for(var n,i=this.first;i!==this.failureTerminal;){if(n=i.validator.validateForShorthand(t,e))return n;i=i.failure}return null},e}(Nu),xu=function(t){function e(e,n){var i;return(i=t.call(this,n)||this).name=e,i}A(e,t);var n=e.prototype;return n.validateSingle=function(t){return null},n.visitFunc=function(t){if(t.name.toLowerCase()!=this.name)return null;var e=this.validateList(t.values,!1,0);return e===t.values?t:e?new Xe(t.name,e):null},e}(Nu),Iu=function(){function t(){}var e=t.prototype;return e.tryParse=function(t,e,n){return e},e.success=function(t,e){},t}(),Pu=function(t){function e(e,n){var i;return(i=t.call(this)||this).name=n,i.validator=e.validators[i.name],i}A(e,t);var n=e.prototype;return n.tryParse=function(t,e,n){if(n.values[this.name])return e;var i=this.validator.validateForShorthand(t,e);if(i){var r=i.length,o=r>1?new Ge(i):i[0];return this.success(o,n),e+r}return e},n.success=function(t,e){e.values[this.name]=t},e}(Iu),Au=function(t){function e(e,n){var i;return(i=t.call(this,e,n[0])||this).names=n,i}return A(e,t),e.prototype.success=function(t,e){for(var n=0;n<this.names.length;n++)e.values[this.names[n]]=t},e}(Pu),Ou=function(t){function e(e,n){var i;return(i=t.call(this)||this).nodes=e,i.slash=n,i}return A(e,t),e.prototype.tryParse=function(t,e,n){var i=e;if(this.slash){if(t[e]!=ke)return i;if(++e==t.length)return i}var r=this.nodes[0].tryParse(t,e,n);if(r==e)return i;e=r;for(var o=1;o<this.nodes.length&&e<t.length&&(r=this.nodes[o].tryParse(t,e,n))!=e;o++)e=r;return e},e}(Iu),Ru=function(t){function e(){var e;return(e=t.apply(this,arguments)||this).syntax=null,e.propList=null,e.error=!1,e.values={},e.validatorSet=null,e}A(e,t);var n=e.prototype;return n.setOwner=function(t){this.validatorSet=t},n.syntaxNodeForProperty=function(t){return new Pu(this.validatorSet,t)},n.clone=function(){var t=new this.constructor;return t.syntax=this.syntax,t.propList=this.propList,t.validatorSet=this.validatorSet,t},n.init=function(t,e){this.syntax=t,this.propList=e},n.finish=function(t,e){if(!this.error){for(var n,i=B(this.propList);!(n=i()).done;){var r=n.value;e.simpleProperty(r,this.values[r]||this.validatorSet.defaultValues[r],t)}return!0}return!1},n.propagateInherit=function(t,e){for(var n,i=B(this.propList);!(n=i()).done;)e.simpleProperty(n.value,qe.inherit,t)},n.validateList=function(t){return this.error=!0,0},n.validateSingle=function(t){return this.validateList([t]),null},n.visitEmpty=function(t){return this.validateSingle(t)},n.visitStr=function(t){return this.validateSingle(t)},n.visitIdent=function(t){return this.validateSingle(t)},n.visitNumeric=function(t){return this.validateSingle(t)},n.visitNum=function(t){return this.validateSingle(t)},n.visitInt=function(t){return this.validateSingle(t)},n.visitColor=function(t){return this.validateSingle(t)},n.visitURL=function(t){return this.validateSingle(t)},n.visitSpaceList=function(t){return this.validateList(t.values),null},n.visitCommaList=function(t){return this.error=!0,null},n.visitFunc=function(t){return this.validateSingle(t)},n.visitExpr=function(t){return this.error=!0,null},e}(Pe),ku=function(t){function e(){return t.call(this)||this}return A(e,t),e.prototype.validateList=function(t){for(var e=0,n=0;e<t.length;){var i=this.syntax[n].tryParse(t,e,this);if(i>e)e=i,n=0;else if(++n==this.syntax.length){this.error=!0;break}}return e},e}(Ru),Lu=function(t){function e(){return t.call(this)||this}A(e,t);var n=e.prototype;return n.validateList=function(t){if(t.length>this.syntax.length||0==t.length)return this.error=!0,0;for(var e=0;e<this.syntax.length;e++){for(var n=e;n>=t.length;)n=1==n?0:n-2;if(this.syntax[e].tryParse(t,n,this)!=n+1)return this.error=!0,0}return t.length},n.createSyntaxNode=function(){return new Au(this.validatorSet,this.propList)},e}(Ru),Fu={SIMPLE:ku,INSETS:Lu,INSETS_SLASH:function(t){function e(){return t.call(this)||this}return A(e,t),e.prototype.validateList=function(t){for(var e=t.length,n=0;n<t.length;n++)if(t[n]===ke){e=n;break}if(e>this.syntax.length||0==t.length)return this.error=!0,0;for(var i=0;i<this.syntax.length;i++){for(var r=i;r>=e;)r=1==r?0:r-2;var o=void 0;if(e+1<t.length)for(o=e+i+1;o>=t.length;)o-=o==e+2?1:2;else o=r;if(2!=this.syntax[i].tryParse([t[r],t[o]],0,this))return this.error=!0,0}return t.length},e}(Ru),COMMA:function(t){function e(){return t.call(this)||this}A(e,t);var n=e.prototype;return n.mergeIn=function(t,e){for(var n,i=B(this.propList);!(n=i()).done;){var r=n.value,o=e[r]||this.validatorSet.defaultValues[r],a=t[r];a||(t[r]=a=[]),a.push(o)}},n.visitCommaList=function(t){for(var e={},n=0;n<t.values.length;n++)if(this.values={},t.values[n]instanceof We?this.error=!0:(t.values[n].visit(this),this.mergeIn(e,this.values),this.values["background-color"]&&n!=t.values.length-1&&(this.error=!0)),this.error)return null;for(var i in this.values={},e)this.values[i]="background-color"==i?e[i].pop():new We(e[i]);return null},e}(ku),FONT:function(t){function e(){return t.call(this)||this}A(e,t);var n=e.prototype;return n.init=function(e,n){t.prototype.init.call(this,e,n),this.propList.push("font-family","line-height","font-size")},n.validateList=function(e){var n=t.prototype.validateList.call(this,e);if(n+2>e.length)return this.error=!0,n;this.error=!1;var i=this.validatorSet.validators;if(!e[n].visit(i["font-size"]))return this.error=!0,n;if(this.values["font-size"]=e[n++],e[n]===ke){if(2+ ++n>e.length)return this.error=!0,n;if(!e[n].visit(i["line-height"]))return this.error=!0,n;this.values["line-height"]=e[n++]}var r=n==e.length-1?e[n]:new Ge(e.slice(n,e.length));return r.visit(i["font-family"])?(this.values["font-family"]=r,e.length):(this.error=!0,n)},n.visitCommaList=function(t){if(t.values[0].visit(this),this.error)return null;for(var e=[this.values["font-family"]],n=1;n<t.values.length;n++)e.push(t.values[n]);var i=new We(e);return i.visit(this.validatorSet.validators["font-family"])?this.values["font-family"]=i:this.error=!0,null},n.visitIdent=function(t){var e=this.validatorSet.systemFonts[t.name];if(e)for(var n in e)this.values[n]=e[n];else this.error=!0;return null},e}(ku)},_u=function(){function t(){this.validators={},this.prefixes={},this.defaultValues={},this.namedValidators={},this.systemFonts={},this.shorthands={},this.layoutProps={},this.backgroundProps={}}var e=t.prototype;return e.addReplacement=function(t,e){var n;if(e.type==Ln.NUMERIC)n=new Be(e.num,e.text);else if(e.type==Ln.HASH)n=$i(e.text);else{if(e.type!=Ln.IDENT)throw new Error("unexpected replacement");n=De(e.text)}if(t.isPrimitive()){var i=t.nodes[0].validator.idents;for(var r in i)i[r]=n;return t}throw new Error("unexpected replacement")},e.newGroup=function(t,e){var n,i=new bu;if("||"==t){for(var r=0;r<e.length;r++){var o=new bu;o.startClause(r),o.addGroup(e[r],lu.FOLLOW),o.endClause(r),i.addGroup(o,0==r?lu.FOLLOW:lu.ALTERNATE)}var a=new bu;return a.startSpecialGroup(),a.addGroup(i,lu.REPEATED),a.endSpecialGroup(),a}switch(t){case" ":n=lu.FOLLOW;break;case"|":case"||":n=lu.ALTERNATE;break;default:throw new Error("unexpected op")}for(var s=0;s<e.length;s++)i.addGroup(e[s],0==s?lu.FOLLOW:n);return i},e.addCounts=function(t,e,n){for(var i=new bu,r=0;r<e;r++)i.addGroup(t.clone(),lu.FOLLOW);if(n==Number.POSITIVE_INFINITY)i.addGroup(t,lu.REPEATED);else for(var o=e;o<n;o++)i.addGroup(t.clone(),lu.OPTIONAL);return i},e.primitive=function(t){var e=new bu;return e.addPrimitive(t),e},e.newFunc=function(t,e){var n;switch(t){case"COMMA":n=new Tu(e);break;case"SPACE":n=new Cu(e);break;default:n=new xu(t.toLowerCase(),e)}return this.primitive(n)},e.initBuiltInValidators=function(){this.namedValidators.HASHCOLOR=this.primitive(new wu(64,Eu,Eu)),this.namedValidators.POS_INT=this.primitive(new wu(32,Eu,Eu)),this.namedValidators.POS_NUM=this.primitive(new wu(16,Eu,Eu)),this.namedValidators.POS_PERCENTAGE=this.primitive(new wu(8,Eu,{"%":Re})),this.namedValidators.NEGATIVE=this.primitive(new wu(256,Eu,Eu)),this.namedValidators.ZERO=this.primitive(new wu(512,Eu,Eu)),this.namedValidators.ZERO_PERCENTAGE=this.primitive(new wu(1024,Eu,Eu)),this.namedValidators.POS_LENGTH=this.primitive(new wu(8,Eu,{em:Re,ex:Re,ch:Re,rem:Re,vw:Re,vh:Re,vi:Re,vb:Re,vmin:Re,vmax:Re,pvw:Re,pvh:Re,pvi:Re,pvb:Re,pvmin:Re,pvmax:Re,cm:Re,mm:Re,in:Re,px:Re,pt:Re,pc:Re,q:Re})),this.namedValidators.POS_ANGLE=this.primitive(new wu(8,Eu,{deg:Re,grad:Re,rad:Re,turn:Re})),this.namedValidators.POS_TIME=this.primitive(new wu(8,Eu,{s:Re,ms:Re})),this.namedValidators.FREQUENCY=this.primitive(new wu(8,Eu,{Hz:Re,kHz:Re})),this.namedValidators.RESOLUTION=this.primitive(new wu(8,Eu,{dpi:Re,dpcm:Re,dppx:Re})),this.namedValidators.URI=this.primitive(new wu(128,Eu,Eu)),this.namedValidators.IDENT=this.primitive(new wu(4,Eu,Eu)),this.namedValidators.STRING=this.primitive(new wu(2,Eu,Eu)),this.namedValidators.SLASH=this.primitive(new wu(2048,Eu,Eu));var t={"font-family":De("sans-serif")};this.systemFonts.caption=t,this.systemFonts.icon=t,this.systemFonts.menu=t,this.systemFonts["message-box"]=t,this.systemFonts["small-caption"]=t,this.systemFonts["status-bar"]=t},e.isBuiltIn=function(t){return!!t.match(/^[A-Z_0-9]+$/)},e.readNameAndPrefixes=function(t,e){var n=t.token();if(n.type==Ln.EOF)return null;var i={"":!0};if(n.type==Ln.O_BRK){do{if(t.consume(),(n=t.token()).type!=Ln.IDENT)throw new Error("Prefix name expected");i[n.text]=!0,t.consume(),n=t.token()}while(n.type==Ln.COMMA);if(n.type!=Ln.C_BRK)throw new Error("']' expected");t.consume(),n=t.token()}if(n.type!=Ln.IDENT)throw new Error("Property name expected");if(2==e?"SHORTHANDS"==n.text:"DEFAULTS"==n.text)return t.consume(),null;var r=n.text;if(t.consume(),2!=e){if(t.token().type!=Ln.EQ)throw new Error("'=' expected");this.isBuiltIn(r)||(this.prefixes[r]=i)}else if(t.token().type!=Ln.COLON)throw new Error("':' expected");return r},e.parseValidators=function(t){for(var e=this,n=function(){var n=e.readNameAndPrefixes(t,1);if(!n)return{v:void 0};for(var i=[],r=[],o="",a=void 0,s=!0,l=e,u=function(){if(0==i.length)throw new Error("No values");return 1==i.length?i[0]:l.newGroup(o,i)},c=function(t){if(s)throw new Error("'"+t+"': unexpected");if(o&&o!=t)throw new Error("mixed operators: '"+t+"' and '"+o+"'");o=t,s=!0},h=null;!h;){t.consume();var f=t.token();switch(f.type){case Ln.IDENT:if(s||c(" "),e.isBuiltIn(f.text)){var d=e.namedValidators[f.text];if(!d)throw new Error("'"+f.text+"' unexpected");i.push(d.clone())}else{var p={};p[f.text.toLowerCase()]=De(f.text),i.push(e.primitive(new wu(0,p,Eu)))}s=!1;break;case Ln.INT:var g={};g[""+f.num]=new Ue(f.num),i.push(e.primitive(new wu(0,g,Eu))),s=!1;break;case Ln.BAR:c("|");break;case Ln.BAR_BAR:c("||");break;case Ln.O_BRK:s||c(" "),r.push({vals:i,op:o,b:"["}),o="",i=[],s=!0;break;case Ln.FUNC:s||c(" "),r.push({vals:i,op:o,b:"(",fn:f.text}),o="",i=[],s=!0;break;case Ln.C_BRK:a=u();var m=r.pop();if("["!=m.b)throw new Error("']' unexpected");(i=m.vals).push(a),o=m.op,s=!1;break;case Ln.C_PAR:a=u();var v=r.pop();if("("!=v.b)throw new Error("')' unexpected");(i=v.vals).push(e.newFunc(v.fn,a)),o=v.op,s=!1;break;case Ln.COLON:if(s)throw new Error("':' unexpected");t.consume(),i.push(e.addReplacement(i.pop(),t.token()));break;case Ln.QMARK:if(s)throw new Error("'?' unexpected");i.push(e.addCounts(i.pop(),0,1));break;case Ln.STAR:if(s)throw new Error("'*' unexpected");i.push(e.addCounts(i.pop(),0,Number.POSITIVE_INFINITY));break;case Ln.PLUS:if(s)throw new Error("'+' unexpected");i.push(e.addCounts(i.pop(),1,Number.POSITIVE_INFINITY));break;case Ln.O_BRC:if(t.consume(),(f=t.token()).type!=Ln.INT)throw new Error("<int> expected");var b=f.num,y=b;if(t.consume(),(f=t.token()).type==Ln.COMMA){if(t.consume(),(f=t.token()).type!=Ln.INT)throw new Error("<int> expected");y=f.num,t.consume(),f=t.token()}if(f.type!=Ln.C_BRC)throw new Error("'}' expected");i.push(e.addCounts(i.pop(),b,y));break;case Ln.SEMICOL:if(h=u(),r.length>0)throw new Error("unclosed '"+r.pop().b+"'");break;default:throw new Error("unexpected token")}}t.consume(),e.isBuiltIn(n)?e.namedValidators[n]=h:e.validators[n]=h.isSimple()?h.nodes[0].validator:new Cu(h)};;){var i=n();if("object"==typeof i)return i.v}},e.parseDefaults=function(t){for(;;){var e=this.readNameAndPrefixes(t,2);if(!e)return;for(var n=[];;){t.consume();var i=t.token();if(i.type==Ln.SEMICOL){t.consume();break}switch(i.type){case Ln.IDENT:n.push(De(i.text));break;case Ln.NUM:n.push(new Me(i.num));break;case Ln.INT:n.push(new Ue(i.num));break;case Ln.NUMERIC:n.push(new Be(i.num,i.text));break;default:throw new Error("unexpected token")}}this.defaultValues[e]=n.length>1?new Ge(n):n[0]}},e.parseShorthands=function(t){for(;;){var e=this.readNameAndPrefixes(t,3);if(!e)return;var n=t.nthToken(1),i=void 0;n.type==Ln.IDENT&&Fu[n.text]?(i=new Fu[n.text],t.consume()):i=new ku,i.setOwner(this);for(var r=!1,o=[],a=!1,s=[],l=[];!r;)switch(t.consume(),(n=t.token()).type){case Ln.IDENT:if(this.validators[n.text])o.push(i.syntaxNodeForProperty(n.text)),l.push(n.text);else{if(!(this.shorthands[n.text]instanceof Lu))throw new Error("'"+n.text+"' is neither a simple property nor an inset shorthand");var u=this.shorthands[n.text];o.push(u.createSyntaxNode()),l.push.apply(l,u.propList)}break;case Ln.SLASH:if(o.length>0||a)throw new Error("unexpected slash");a=!0;break;case Ln.O_BRK:s.push({slash:a,syntax:o}),o=[],a=!1;break;case Ln.C_BRK:var c=new Ou(o,a),h=s.pop();a=h.slash,(o=h.syntax).push(c);break;case Ln.SEMICOL:r=!0,t.consume();break;default:throw new Error("unexpected token")}i.init(o,l),this.shorthands[e]=i}},e.parse=function(t){var e=new wi(t,null);this.parseValidators(e),this.parseDefaults(e),this.parseShorthands(e),this.backgroundProps=this.makePropSet(["background"]),this.layoutProps=this.makePropSet(["margin","border","padding","columns","column-gap","column-rule","column-fill"])},e.makePropSet=function(t){for(var e,n={},i=B(t);!(e=i()).done;)for(var r,o=e.value,a=this.shorthands[o],s=B(a?a.propList:[o]);!(r=s()).done;){var l=r.value,u=this.defaultValues[l];u?n[l]=u:f.warn("Unknown property in makePropSet:",l)}return n},e.validatePropertyAndHandleShorthand=function(t,e,n,i){var r="",o=t,a=(t=t.toLowerCase()).match(/^-([a-z]+)-([-a-z0-9]+)$/);a&&(r=a[1],t=a[2]);var s=this.prefixes[t];if(s&&s[r]){var l=this.validators[t];if(l){var u=e===qe.inherit||e.isExpr()?e:e.visit(l);u?i.simpleProperty(t,u,n):i.invalidPropertyValue(o,e)}else{var c=this.shorthands[t].clone();e===qe.inherit?c.propagateInherit(n,i):(e.visit(c),c.finish(n,i)||i.invalidPropertyValue(o,e))}}else i.unknownProperty(o,e)},t}();function Du(){var t=new _u;return t.initBuiltInValidators(),t.parse(Vi),t}var Bu={"font-style":qe.normal,"font-variant":qe.normal,"font-weight":qe.normal},Mu="OTTO"+(new Date).valueOf(),Uu=1;function zu(t,e){var n={};for(var i in t)n[i]=Kr(t,i).evaluate(e,i);return function(t){for(var e in Bu)t[e]||(t[e]=Bu[e])}(n),n}var Vu=function(){function t(t){this.properties=t,this.blobURLs=[],this.blobs=[],this.fontTraitKey=function(t){var e=new it;for(var n in Bu)e.append(" "),e.append(t[n].toString());return e.toString()}(this.properties),this.src=this.properties.src?this.properties.src.toString():null;var e=this.properties["font-family"];this.family=e?e.stringValue():null}var e=t.prototype;return e.traitsEqual=function(t){return this.fontTraitKey==t.fontTraitKey},e.makeAtRule=function(t,e){var n=new it;for(var i in n.append("@font-face {\n  font-family: "),n.append(this.family),n.append(";\n  "),Bu)n.append(i),n.append(": "),this.properties[i].appendTo(n,!0),n.append(";\n  ");if(e){n.append('src: url("');var r=(window.URL||window.webkitURL).createObjectURL(e);n.append(r),this.blobURLs.push(r),this.blobs.push(e),n.append('")')}else n.append("src: "),n.append(t);return n.append(";\n}\n"),n.toString()},t}(),Hu=function(){function t(t){this.deobfuscator=t,this.familyMap={}}var e=t.prototype;return e.registerFamily=function(t,e){var n=t.family,i=this.familyMap[n],r=e.family;if(i){if(i!=r)throw new Error("E_FONT_FAMILY_INCONSISTENT "+t.family)}else this.familyMap[n]=r},e.filterFontFamily=function(t){if(t instanceof We){for(var e,n=[],i=B(t.values);!(e=i()).done;){var r=e.value,o=this.familyMap[r.stringValue()];o&&n.push(De(o)),n.push(r)}return new We(n)}var a=this.familyMap[t.stringValue()];return a?new We([De(a),t]):t},t}(),Gu=function(){function t(t,e,n){this.head=t,this.body=e,this.srcURLMap={},this.familyCounter=0,this.familyPrefix=n||"Fnt_"}var e=t.prototype;return e.getViewFontFamily=function(t,e){var n=t.family,i=e.familyMap[n];return i||(i=this.familyPrefix+ ++this.familyCounter,e.familyMap[n]=i,i)},e.initFont=function(t,e,n){var i=Ci("initFont"),r=this,o=t.src,a={};for(var s in Bu)a[s]=t.properties[s];var l=r.getViewFontFamily(t,n);a["font-family"]=De(l);var u=new Vu(a),c=r.body.ownerDocument.createElement("span");c.textContent="M";var h=(new Date).valueOf()+1e3,d=r.head.ownerDocument.createElement("style"),p=Mu+Uu++;for(var g in d.textContent=u.makeAtRule("",ji([p])),r.head.appendChild(d),r.body.appendChild(c),c.style.visibility="hidden",c.style.fontFamily=l,Bu)tt(c,g,a[g].toString());var m=c.getBoundingClientRect(),v=m.right-m.left,b=m.bottom-m.top;d.textContent=u.makeAtRule(o,e),f.info("Starting to load font:",o);var y=!1;return i.loop((function(){var t=c.getBoundingClientRect();return v!=t.right-t.left||b!=t.bottom-t.top?(y=!0,Ti(!1)):(new Date).valueOf()>h?Ti(!1):i.sleep(10)})).then((function(){y?f.info("Loaded font:",o):f.warn("Failed to load font:",o),r.body.removeChild(c),i.finish(u)})),i.result()},e.loadFont=function(t,e){var n=t.src,i=this.srcURLMap[n],r=this;return i?i.piggyback((function(i){var r=i;r.traitsEqual(t)?(e.registerFamily(t,r),f.warn("Found already-loaded font:",n)):f.warn("E_FONT_FACE_INCOMPATIBLE",t.src)})):(i=new _i((function(){var i=Ci("loadFont"),o=e.deobfuscator?e.deobfuscator(n):null;return o?Xi(n,Mi.BLOB).then((function(n){n.responseBlob?o(n.responseBlob).then((function(n){r.initFont(t,n,e).thenFinish(i)})):i.finish(null)})):r.initFont(t,null,e).thenFinish(i),i.result()}),"loadFont "+n),this.srcURLMap[n]=i,i.start()),i},e.findOrLoadFonts=function(t,e){for(var n,i=[],r=B(t);!(n=r()).done;){var o=n.value;o.src&&o.family?i.push(this.loadFont(o,e)):f.warn("E_FONT_FACE_INVALID")}return Di(i)},t}(),Wu=1,Xu=function(){function t(t,e,n,i,r){this.name=e,this.pseudoName=n,this.classes=i,this.parent=r,this.specified={},this.children=[],this.pageMaster=null,this.index=0,this._scope=t,this.key="p"+Wu++,r&&(this.index=r.children.length,r.children.push(this))}var e=t.prototype;return e.createInstance=function(t){throw new Error("E_UNEXPECTED_CALL")},e.clone=function(t){throw new Error("E_UNEXPECTED_CALL")},e.copySpecified=function(t){var e=this.specified,n=t.specified;for(var i in e)Object.prototype.hasOwnProperty.call(e,i)&&(n[i]=e[i])},e.cloneChildren=function(t){for(var e=0;e<this.children.length;e++)this.children[e].clone({parent:t})},P(t,[{key:"scope",get:function(){return this._scope}}]),t}(),ju=function(t){function e(e){var n;return(n=t.call(this,e,null,null,[],null)||this).specified.width=new zr(Ze,0),n.specified.height=new zr(Qe,0),n}return A(e,t),e}(Xu),Ku=function(t){function e(e,n){var i;(i=t.call(this,e,(function(t,e){var n=t.match(/^([^.]+)\.([^.]+)$/);if(n){var i=r.pageMaster.keyMap[n[1]];if(i){var o=this.lookupInstance(i);if(o)return e?o.resolveFunc(n[2]):o.resolveName(n[2])}}return null}))||this).pageMaster=n;var r=_(i);return i}return A(e,t),e}(Ut),Yu=function(t){function e(e,n,i,r,o,a,s){var l;return(l=t.call(this,e,n,i,r,o)||this).condition=a,l.specificity=s,l.keyMap={},e instanceof Ku||(l._scope=new Ku(e,_(l))),l.pageMaster=_(l),l.specified.width=new zr(Ze,0),l.specified.height=new zr(Qe,0),l.specified["wrap-flow"]=new zr(qe.auto,0),l.specified.position=new zr(qe.relative,0),l.specified.overflow=new zr(qe.visible,0),l}A(e,t);var n=e.prototype;return n.createInstance=function(t){return new cc(t,this)},n.clone=function(t){var n=new e(this.scope,this.name,t.pseudoName||this.pseudoName,this.classes,this.parent,this.condition,this.specificity);return this.copySpecified(n),this.cloneChildren(n),n},n.resetScope=function(){this.scope.pageMaster=this},e}(Xu),qu=function(t){function e(e,n,i,r,o){var a;return(a=t.call(this,e,n,i,r,o)||this).pageMaster=o.pageMaster,n&&(a.pageMaster.keyMap[n]=a.key),a.specified["wrap-flow"]=new zr(qe.auto,0),a}A(e,t);var n=e.prototype;return n.createInstance=function(t){return new hc(t,this)},n.clone=function(t){var n=new e(t.parent.scope,this.name,this.pseudoName,this.classes,t.parent);return this.copySpecified(n),this.cloneChildren(n),n},e}(Xu),$u=function(t){function e(e,n,i,r,o){var a;return(a=t.call(this,e,n,i,r,o)||this).pageMaster=o.pageMaster,n&&(a.pageMaster.keyMap[n]=a.key),a}A(e,t);var n=e.prototype;return n.createInstance=function(t){return new fc(t,this)},n.clone=function(t){var n=new e(t.parent.scope,this.name,this.pseudoName,this.classes,t.parent);return this.copySpecified(n),this.cloneChildren(n),n},e}(Xu);function Zu(t,e,n){return e&&e!==qe.auto?e.toExpr(t,n):null}function Qu(t,e,n){return e&&e!==qe.auto?e.toExpr(t,n):t.zero}function Ju(t,e,n){return e?e===qe.auto?null:e.toExpr(t,n):t.zero}function tc(t,e,n,i){return e&&n!==qe.none?e.toExpr(t,i):t.zero}function ec(t,e,n){return e?e===qe._true?t._true:e===qe._false?t._false:e.toExpr(t,t.zero):n}var nc=function(){function t(t,e){this.parentInstance=t,this.pageBox=e,this.cascaded={},this.style={},this.autoWidth=null,this.autoHeight=null,this.children=[],this.isAutoWidth=!1,this.isAutoHeight=!1,this.isTopDependentOnAutoHeight=!1,this.isRightDependentOnAutoWidth=!1,this.calculatedWidth=0,this.calculatedHeight=0,this.pageMasterInstance=null,this.namedValues={},this.namedFuncs={},this.vertical=!1,this.rtl=!1,this.suppressEmptyBoxGeneration=!1,t&&t.children.push(this)}var e=t.prototype;return e.reset=function(){this.calculatedWidth=0,this.calculatedHeight=0},e.addNamedValues=function(t,e){var n=this.resolveName(t),i=this.resolveName(e);if(!n||!i)throw new Error("E_INTERNAL");return Ce(this.pageBox.scope,n,i)},e.resolveName=function(t){var e=this.namedValues[t];if(e)return e;var n=this.style[t];switch(n&&(e=n.toExpr(this.pageBox.scope,this.pageBox.scope.zero)),t){case"margin-left-edge":e=this.resolveName("left");break;case"margin-top-edge":e=this.resolveName("top");break;case"margin-right-edge":e=this.addNamedValues("border-right-edge","margin-right");break;case"margin-bottom-edge":e=this.addNamedValues("border-bottom-edge","margin-bottom");break;case"border-left-edge":e=this.addNamedValues("margin-left-edge","margin-left");break;case"border-top-edge":e=this.addNamedValues("margin-top-edge","margin-top");break;case"border-right-edge":e=this.addNamedValues("padding-right-edge","border-right-width");break;case"border-bottom-edge":e=this.addNamedValues("padding-bottom-edge","border-bottom-width");break;case"padding-left-edge":e=this.addNamedValues("border-left-edge","border-left-width");break;case"padding-top-edge":e=this.addNamedValues("border-top-edge","border-top-width");break;case"padding-right-edge":e=this.addNamedValues("right-edge","padding-right");break;case"padding-bottom-edge":e=this.addNamedValues("bottom-edge","padding-bottom");break;case"left-edge":e=this.addNamedValues("padding-left-edge","padding-left");break;case"top-edge":e=this.addNamedValues("padding-top-edge","padding-top");break;case"right-edge":e=this.addNamedValues("left-edge","width");break;case"bottom-edge":e=this.addNamedValues("top-edge","height")}if(!e){var i;if("extent"==t)i=this.vertical?"width":"height";else if("measure"==t)i=this.vertical?"height":"width";else{var r=this.vertical?Dr:Br;for(var o in i=t,r)i=i.replace(o,r[o])}i!=t&&(e=this.resolveName(i))}return e&&(this.namedValues[t]=e),e},e.resolveFunc=function(t){var e=this.namedFuncs[t];if(e)return e;switch(t){case"columns":var n=this.pageBox.scope,i=new Se(n,0),r=this.resolveName("column-count"),o=this.resolveName("column-width"),a=this.resolveName("column-gap");e=Te(n,xe(n,new be(n,"min",[i,r]),Ce(n,o,a)),a)}return e&&(this.namedFuncs[t]=e),e},e.initEnabled=function(){var t=this.pageBox.scope,e=this.style,n=ec(t,e.enabled,t._true),i=Zu(t,e.page,t.zero);if(i){var r=new ge(t,"page-number");n=Ne(t,n,new se(t,i,r))}var o=Zu(t,e["min-page-width"],t.zero);o&&(n=Ne(t,n,new ae(t,new ge(t,"page-width"),o)));var a=Zu(t,e["min-page-height"],t.zero);a&&(n=Ne(t,n,new ae(t,new ge(t,"page-height"),a))),n=this.boxSpecificEnabled(n),e.enabled=new je(n)},e.boxSpecificEnabled=function(t){return t},e.initHorizontal=function(){var t=this.pageBox.scope,e=this.style,n=this.parentInstance?this.parentInstance.style.width.toExpr(t,null):null,i=Zu(t,e.left,n),r=Zu(t,e["margin-left"],n),o=tc(t,e["border-left-width"],e["border-left-style"],n),a=Qu(t,e["padding-left"],n),s=Zu(t,e.width,n),l=Zu(t,e["max-width"],n),u=Qu(t,e["padding-right"],n),c=tc(t,e["border-right-width"],e["border-right-style"],n),h=Zu(t,e["margin-right"],n),f=Zu(t,e.right,n),d=Ce(t,o,a),p=Ce(t,o,u);if(i&&f&&s){var g=Te(t,n,Ce(t,s,Ce(t,Ce(t,i,d),p)));r?h?f=Te(t,g,h):h=Te(t,g,Ce(t,f,r)):(g=Te(t,g,f),h?r=Te(t,g,h):h=r=xe(t,g,new we(t,.5)))}else{r||(r=t.zero),h||(h=t.zero),i||f||s||(i=t.zero),i||s?i||f?s||f||(s=this.autoWidth,this.isAutoWidth=!0):i=t.zero:(s=this.autoWidth,this.isAutoWidth=!0);var m=Te(t,n,Ce(t,Ce(t,r,d),Ce(t,h,p)));this.isAutoWidth&&(l||(l=Te(t,m,i||f)),this.vertical||!Zu(t,e["column-width"],null)&&!Zu(t,e["column-count"],null)||(s=l,this.isAutoWidth=!1)),i?s?f||(f=Te(t,m,Ce(t,i,s))):s=Te(t,m,Ce(t,i,f)):i=Te(t,m,Ce(t,f,s))}var v=Qu(t,e["snap-width"]||(this.parentInstance?this.parentInstance.style["snap-width"]:null),n);e.left=new je(i),e["margin-left"]=new je(r),e["border-left-width"]=new je(o),e["padding-left"]=new je(a),e.width=new je(s),e["max-width"]=new je(l||s),e["padding-right"]=new je(u),e["border-right-width"]=new je(c),e["margin-right"]=new je(h),e.right=new je(f),e["snap-width"]=new je(v)},e.initVertical=function(){var t=this.pageBox.scope,e=this.style,n=this.parentInstance?this.parentInstance.style.width.toExpr(t,null):null,i=this.parentInstance?this.parentInstance.style.height.toExpr(t,null):null,r=Zu(t,e.top,i),o=Zu(t,e["margin-top"],n),a=tc(t,e["border-top-width"],e["border-top-style"],n),s=Qu(t,e["padding-top"],n),l=Zu(t,e.height,i),u=Zu(t,e["max-height"],i),c=Qu(t,e["padding-bottom"],n),h=tc(t,e["border-bottom-width"],e["border-bottom-style"],n),f=Zu(t,e["margin-bottom"],n),d=Zu(t,e.bottom,i),p=Ce(t,a,s),g=Ce(t,h,c);if(r&&d&&l){var m=Te(t,i,Ce(t,l,Ce(t,Ce(t,r,p),g)));o?f?d=Te(t,m,o):f=Te(t,m,Ce(t,d,o)):(m=Te(t,m,d),f?o=Te(t,m,f):f=o=xe(t,m,new we(t,.5)))}else{o||(o=t.zero),f||(f=t.zero),r||d||l||(r=t.zero),r||l?r||d?l||d||(l=this.autoHeight,this.isAutoHeight=!0):r=t.zero:(l=this.autoHeight,this.isAutoHeight=!0);var v=Te(t,i,Ce(t,Ce(t,o,p),Ce(t,f,g)));this.isAutoHeight&&(u||(u=Te(t,v,r||d)),this.vertical&&(Zu(t,e["column-width"],null)||Zu(t,e["column-count"],null))&&(l=u,this.isAutoHeight=!1)),r?l?d||(d=Te(t,v,Ce(t,r,l))):l=Te(t,v,Ce(t,d,r)):r=Te(t,v,Ce(t,d,l))}var b=Qu(t,e["snap-height"]||(this.parentInstance?this.parentInstance.style["snap-height"]:null),n);e.top=new je(r),e["margin-top"]=new je(o),e["border-top-width"]=new je(a),e["padding-top"]=new je(s),e.height=new je(l),e["max-height"]=new je(u||l),e["padding-bottom"]=new je(c),e["border-bottom-width"]=new je(h),e["margin-bottom"]=new je(f),e.bottom=new je(d),e["snap-height"]=new je(b)},e.initColumns=function(){var t=this.pageBox.scope,e=this.style,n=Zu(t,e[this.vertical?"height":"width"],null),i=Zu(t,e["column-width"],n),r=Zu(t,e["column-count"],null),o=function(t,e,n){return e&&e!==qe.normal?e.toExpr(t,null):null}(t,e["column-gap"]);o||(o=new pe(t,1,"em")),i&&!r&&(r=new be(t,"floor",[Ie(t,Ce(t,n,o),Ce(t,i,o))]),r=new be(t,"max",[t.one,r])),r||(r=t.one),i=Te(t,Ie(t,Ce(t,n,o),r),o),e["column-width"]=new je(i),e["column-count"]=new je(r),e["column-gap"]=new je(o)},e.depends=function(t,e,n){return this.style[t].toExpr(this.pageBox.scope,null).depend(e,n)},e.init=function(t){t.registerInstance(this.pageBox.key,this);var e=this.pageBox.scope,n=this.style,i=this,r=this.parentInstance?this.parentInstance.getActiveRegions(t):null,o=da(this.cascaded,t,r,!1);this.vertical=ha(o,t,!!this.parentInstance&&this.parentInstance.vertical),this.rtl=fa(o,t,!!this.parentInstance&&this.parentInstance.rtl),ma(o,n,this.vertical,this.rtl,(function(t,e){return e.value})),this.autoWidth=new ve(e,(function(){return i.calculatedWidth}),"autoWidth"),this.autoHeight=new ve(e,(function(){return i.calculatedHeight}),"autoHeight"),this.initHorizontal(),this.initVertical(),this.initColumns(),this.initEnabled()},e.getProp=function(t,e){var n=this.style[e];return n&&(n=Nr(t,n,e)),n},e.getPropAsNumber=function(t,e){var n=this.style[e];return n&&(n=Nr(t,n,e)),Ke(n,t)},e.getSpecial=function(t,e){var n=Qr(this.cascaded,e);if(n){for(var i=[],r=0;r<n.length;r++){var o=n[r].evaluate(t,"");o&&o!==Re&&i.push(o)}if(i.length)return i}return null},e.getActiveRegions=function(t){var e=this.getSpecial(t,"region-id");if(e){for(var n=[],i=0;i<e.length;i++)n[i]=e[i].toString();return n}return null},e.propagateProperty=function(t,e,n,i){this.propagatePropertyToElement(t,e.element,n,i)},e.propagatePropertyToElement=function(t,e,n,i){var r=this.getProp(t,n);r&&(r.isNumeric()&&Ht(r.unit)&&(r=Ye(r,t)),"font-family"===n&&(r=i.filterFontFamily(r)),tt(e,n,r.toString()))},e.propagateDelayedProperty=function(t,e,n,i){var r=this.getProp(t,n);r&&i.push(new Fa(e.element,n,r))},e.assignLeftPosition=function(t,e){var n=this.getPropAsNumber(t,"left"),i=this.getPropAsNumber(t,"margin-left"),r=this.getPropAsNumber(t,"padding-left"),o=this.getPropAsNumber(t,"border-left-width"),a=this.getPropAsNumber(t,"width");e.setHorizontalPosition(n,a),tt(e.element,"margin-left",i+"px"),tt(e.element,"padding-left",r+"px"),tt(e.element,"border-left-width",o+"px"),e.marginLeft=i,e.borderLeft=o,e.paddingLeft=r},e.assignRightPosition=function(t,e){var n=this.getPropAsNumber(t,"right"),i=this.getPropAsNumber(t,"snap-height"),r=this.getPropAsNumber(t,"margin-right"),o=this.getPropAsNumber(t,"padding-right"),a=this.getPropAsNumber(t,"border-right-width");if(tt(e.element,"margin-right",r+"px"),tt(e.element,"padding-right",o+"px"),tt(e.element,"border-right-width",a+"px"),e.marginRight=r,e.borderRight=a,this.vertical&&i>0){var s=n+e.getInsetRight(),l=s-Math.floor(s/i)*i;l>0&&(e.snapOffsetX=i-l,o+=e.snapOffsetX)}e.paddingRight=o,e.snapWidth=i},e.assignTopPosition=function(t,e){var n=this.getPropAsNumber(t,"snap-height"),i=this.getPropAsNumber(t,"top"),r=this.getPropAsNumber(t,"margin-top"),o=this.getPropAsNumber(t,"padding-top"),a=this.getPropAsNumber(t,"border-top-width");if(e.top=i,e.marginTop=r,e.borderTop=a,e.snapHeight=n,!this.vertical&&n>0){var s=i+e.getInsetTop(),l=s-Math.floor(s/n)*n;l>0&&(e.snapOffsetY=n-l,o+=e.snapOffsetY)}e.paddingTop=o,tt(e.element,"top",i+"px"),tt(e.element,"margin-top",r+"px"),tt(e.element,"padding-top",o+"px"),tt(e.element,"border-top-width",a+"px")},e.assignBottomPosition=function(t,e){var n=this.getPropAsNumber(t,"margin-bottom"),i=this.getPropAsNumber(t,"padding-bottom"),r=this.getPropAsNumber(t,"border-bottom-width"),o=this.getPropAsNumber(t,"height")-e.snapOffsetY;tt(e.element,"height",o+"px"),tt(e.element,"margin-bottom",n+"px"),tt(e.element,"padding-bottom",i+"px"),tt(e.element,"border-bottom-width",r+"px"),e.height=o-e.snapOffsetY,e.marginBottom=n,e.borderBottom=r,e.paddingBottom=i},e.assignBeforePosition=function(t,e){this.vertical?this.assignRightPosition(t,e):this.assignTopPosition(t,e)},e.assignAfterPosition=function(t,e){this.vertical?this.assignLeftPosition(t,e):this.assignBottomPosition(t,e)},e.assignStartEndPosition=function(t,e){this.vertical?(this.assignTopPosition(t,e),this.assignBottomPosition(t,e)):(this.assignRightPosition(t,e),this.assignLeftPosition(t,e))},e.sizeWithMaxHeight=function(t,e){tt(e.element,"border-top-width","0px");var n=this.getPropAsNumber(t,"max-height");this.isTopDependentOnAutoHeight?e.setVerticalPosition(0,n):(this.assignTopPosition(t,e),e.height=n-=e.snapOffsetY,tt(e.element,"height",n+"px"))},e.sizeWithMaxWidth=function(t,e){tt(e.element,"border-left-width","0px");var n=this.getPropAsNumber(t,"max-width");if(this.isRightDependentOnAutoWidth)e.setHorizontalPosition(0,n);else{this.assignRightPosition(t,e),e.width=n-=e.snapOffsetX;var i=this.getPropAsNumber(t,"right");tt(e.element,"right",i+"px"),tt(e.element,"width",n+"px")}},e.prepareContainer=function(t,e,n,i,r){this.parentInstance&&this.vertical==this.parentInstance.vertical||tt(e.element,"writing-mode",this.vertical?"vertical-rl":"horizontal-tb"),(this.vertical?this.isAutoWidth:this.isAutoHeight)?this.vertical?this.sizeWithMaxWidth(t,e):this.sizeWithMaxHeight(t,e):(this.assignBeforePosition(t,e),this.assignAfterPosition(t,e)),(this.vertical?this.isAutoHeight:this.isAutoWidth)?this.vertical?this.sizeWithMaxHeight(t,e):this.sizeWithMaxWidth(t,e):this.assignStartEndPosition(t,e);for(var o=0;o<ic.length;o++)this.propagateProperty(t,e,ic[o],i)},e.transferContentProps=function(t,e,n,i){for(var r=0;r<oc.length;r++)this.propagateProperty(t,e,oc[r],i)},e.transferSinglUriContentProps=function(t,e,n){for(var i=0;i<ac.length;i++)this.propagatePropertyToElement(t,e,ac[i],n)},e.finishContainer=function(t,e,n,i,r,o,a){this.vertical?this.calculatedWidth=e.computedBlockSize+e.snapOffsetX:this.calculatedHeight=e.computedBlockSize+e.snapOffsetY;var s=(this.vertical||!i)&&this.isAutoHeight,l=(!this.vertical||!i)&&this.isAutoWidth,u=null;if((l||s)&&(l&&tt(e.element,"width","auto"),s&&tt(e.element,"height","auto"),u=o.getElementClientRect(i?i.element:e.element),l&&(this.calculatedWidth=Math.ceil(u.right-u.left-e.paddingLeft-e.borderLeft-e.paddingRight-e.borderRight),this.vertical&&(this.calculatedWidth+=e.snapOffsetX)),s&&(this.calculatedHeight=u.bottom-u.top-e.paddingTop-e.borderTop-e.paddingBottom-e.borderBottom,this.vertical||(this.calculatedHeight+=e.snapOffsetY))),(this.vertical?this.isAutoHeight:this.isAutoWidth)&&this.assignStartEndPosition(t,e),(this.vertical?this.isAutoWidth:this.isAutoHeight)&&((this.vertical?this.isRightDependentOnAutoWidth:this.isTopDependentOnAutoHeight)&&this.assignBeforePosition(t,e),this.assignAfterPosition(t,e)),r>1){var c=this.getPropAsNumber(t,"column-rule-width"),h=this.getProp(t,"column-rule-style"),f=this.getProp(t,"column-rule-color");if(c>0&&h&&h!=qe.none&&f!=qe.transparent)for(var d=this.getPropAsNumber(t,"column-gap"),p=this.vertical?e.height:e.width,g=this.vertical?"border-top":"border-left",m=1;m<r;m++){var v=(p+d)*m/r-d/2+e.paddingLeft-c/2,b=e.height+e.paddingTop+e.paddingBottom,y=e.element.ownerDocument.createElement("div");tt(y,"position","absolute"),tt(y,this.vertical?"left":"top","0px"),tt(y,this.vertical?"top":"left",v+"px"),tt(y,this.vertical?"height":"width","0px"),tt(y,this.vertical?"width":"height",b+"px"),tt(y,g,c+"px "+h.toString()+(f?" "+f.toString():"")),e.element.insertBefore(y,e.element.firstChild)}}for(var w=0;w<rc.length;w++)this.propagateProperty(t,e,rc[w],a);for(var E=0;E<sc.length;E++)this.propagateDelayedProperty(t,e,sc[E],n.delayedItems)},e.applyCascadeAndInit=function(t,e){var n=this.cascaded,i=this.pageBox.specified;for(var r in i)Xr(r)&&Yr(n,r,Kr(i,r));if(this.pageBox.pseudoName==lc)for(var o in e)(o.match(/^background-/)||"writing-mode"==o)&&(n[o]=e[o]);if("layout-host"==this.pageBox.pseudoName)for(var a in e)a.match(/^background-/)||"writing-mode"==a||(n[a]=e[a]);t.pushRule(this.pageBox.classes,null,n),n.content&&(n.content=n.content.filterValue(new Wo(t,null,t.counterResolver))),this.init(t.context);for(var s,l=B(this.pageBox.children);!(s=l()).done;)s.value.createInstance(this).applyCascadeAndInit(t,e);t.popRule()},e.resolveAutoSizing=function(t){this.isAutoWidth&&(this.isRightDependentOnAutoWidth=this.depends("right",this.autoWidth,t)||this.depends("margin-right",this.autoWidth,t)||this.depends("border-right-width",this.autoWidth,t)||this.depends("padding-right",this.autoWidth,t)),this.isAutoHeight&&(this.isTopDependentOnAutoHeight=this.depends("top",this.autoHeight,t)||this.depends("margin-top",this.autoHeight,t)||this.depends("border-top-width",this.autoHeight,t)||this.depends("padding-top",this.autoHeight,t));for(var e,n=B(this.children);!(e=n()).done;)e.value.resolveAutoSizing(t)},t}(),ic=["border-left-style","border-right-style","border-top-style","border-bottom-style","border-left-color","border-right-color","border-top-color","border-bottom-color","outline-style","outline-color","outline-width","overflow","visibility"],rc=["border-top-left-radius","border-top-right-radius","border-bottom-right-radius","border-bottom-left-radius","border-image-source","border-image-slice","border-image-width","border-image-outset","border-image-repeat","background-attachment","background-color","background-image","background-repeat","background-position","background-clip","background-origin","background-size","opacity","z-index","background-blend-mode","isolation","mix-blend-mode","filter"],oc=["color","font-family","font-size","font-style","font-weight","font-variant","line-height","letter-spacing","text-align","text-decoration","text-indent","text-transform","white-space","word-spacing","font-feature-settings","font-kerning","font-size-adjust","font-variant-east-asian","font-stretch","text-decoration-color","text-decoration-line","text-decoration-skip","text-decoration-style","text-emphasis","text-emphasis-color","text-emphasis-position","text-emphasis-style","text-shadow","text-underline-position"],ac=["width","height","image-resolution","object-fit","object-position"],sc=["transform","transform-origin"],lc="background-host",uc=function(t){function e(e){return t.call(this,null,e)||this}return A(e,t),e.prototype.applyCascadeAndInit=function(e,n){t.prototype.applyCascadeAndInit.call(this,e,n),this.children.sort((function(t,e){return e.pageBox.specificity-t.pageBox.specificity||t.pageBox.index-e.pageBox.index}))},e}(nc),cc=function(t){function e(e,n){var i;return(i=t.call(this,e,n)||this).pageMasterInstance=_(i),i}A(e,t);var n=e.prototype;return n.boxSpecificEnabled=function(t){var e=this.pageBox.pageMaster;return e.condition&&(t=Ne(e.scope,t,e.condition)),t},n.adjustPageLayout=function(t,e,n){},e}(nc),hc=function(t){function e(e,n){var i;return(i=t.call(this,e,n)||this).pageMasterInstance=e.pageMasterInstance,i}return A(e,t),e}(nc),fc=function(t){function e(e,n){var i;return(i=t.call(this,e,n)||this).pageMasterInstance=e.pageMasterInstance,i}A(e,t);var n=e.prototype;return n.processPartitionList=function(t,e,n){var i=null;if(e instanceof _e&&(i=[e]),e instanceof We&&(i=e.values),i)for(var r=this.pageBox.scope,o=0;o<i.length;o++)if(i[o]instanceof _e){var a=Bt(i[o].name,"enabled"),s=new ge(r,a);n&&(s=new Zt(r,s)),t=Ne(r,t,s)}return t},n.boxSpecificEnabled=function(t){var e=this.pageBox.scope,n=this.style,i=ec(e,n.required,e._false)!==e._false;if(i||this.isAutoHeight){var r=function(t,e,n){return e?e.toExpr(t,t.zero):new we(t,"body")}(e,n["flow-from"]);t=Ne(e,t,new be(e,"has-content",[r]))}if(t=this.processPartitionList(t,n["required-partitions"],!1),t=this.processPartitionList(t,n["conflicting-partitions"],!0),i){var o=this.pageMasterInstance.style.enabled,a=o?o.toExpr(e,null):e._true;a=Ne(e,a,t),this.pageMasterInstance.style.enabled=new je(a)}return t},n.prepareContainer=function(e,n,i,r,o){tt(n.element,"overflow","hidden"),t.prototype.prepareContainer.call(this,e,n,i,r,o)},e}(nc),dc=function(t){function e(e,n,i,r){var o;return(o=t.call(this,e,n,!1)||this).target=i,o.validatorSet=r,o}A(e,t);var n=e.prototype;return n.property=function(t,e,n){this.validatorSet.validatePropertyAndHandleShorthand(t,e,n,this)},n.unknownProperty=function(t,e){this.report("E_INVALID_PROPERTY "+t+": "+e.toString())},n.invalidPropertyValue=function(t,e){this.report("E_INVALID_PROPERTY_VALUE "+t+": "+e.toString())},n.simpleProperty=function(t,e,n){this.target.specified[t]=new zr(e,n?50331648:67108864)},e}(er),pc=function(t){function e(e,n,i,r){return t.call(this,e,n,i,r)||this}return A(e,t),e}(dc),gc=function(t){function e(e,n,i,r){var o;return o=t.call(this,e,n,i,r)||this,i.specified.width=new zr($e,0),i.specified.height=new zr($e,0),o}A(e,t);var n=e.prototype;return n.startPartitionRule=function(t,e,n){var i=new $u(this.scope,t,e,n,this.target),r=new pc(this.scope,this.owner,i,this.validatorSet);this.owner.pushHandler(r)},n.startPartitionGroupRule=function(t,n,i){var r=new qu(this.scope,t,n,i,this.target),o=new e(this.scope,this.owner,r,this.validatorSet);this.owner.pushHandler(o)},e}(dc),mc=function(t){function e(e,n,i,r){return t.call(this,e,n,i,r)||this}A(e,t);var n=e.prototype;return n.startPartitionRule=function(t,e,n){var i=new $u(this.scope,t,e,n,this.target),r=new pc(this.scope,this.owner,i,this.validatorSet);this.owner.pushHandler(r)},n.startPartitionGroupRule=function(t,e,n){var i=new qu(this.scope,t,e,n,this.target),r=new gc(this.scope,this.owner,i,this.validatorSet);this.owner.pushHandler(r)},e}(dc);function vc(t){var n=t["writing-mode"],i=t.direction;return i=i&&i.value,(n=n&&n.value)===qe.vertical_lr||n!==qe.vertical_rl&&i!==qe.rtl?e.PageProgression.LTR:e.PageProgression.RTL}var bc,yc,wc={a5:{width:new Be(148,"mm"),height:new Be(210,"mm")},a4:{width:new Be(210,"mm"),height:new Be(297,"mm")},a3:{width:new Be(297,"mm"),height:new Be(420,"mm")},b5:{width:new Be(176,"mm"),height:new Be(250,"mm")},b4:{width:new Be(250,"mm"),height:new Be(353,"mm")},"jis-b5":{width:new Be(182,"mm"),height:new Be(257,"mm")},"jis-b4":{width:new Be(257,"mm"),height:new Be(364,"mm")},letter:{width:new Be(8.5,"in"),height:new Be(11,"in")},legal:{width:new Be(8.5,"in"),height:new Be(14,"in")},ledger:{width:new Be(11,"in"),height:new Be(17,"in")}},Ec=new Be(.24,"pt"),Sc=new Be(3,"mm"),Nc=new Be(10,"mm"),Cc=new Be(13,"mm");function Tc(t){var e={width:Ze,height:Qe,bleed:Je,bleedOffset:Je},n=t.size;if(n&&n.value!==qe.auto){var i,r,o=n.value;if(o.isSpaceList()?(i=o.values[0],r=o.values[1]):(i=o,r=null),i.isNumeric())e.width=i,e.height=r||i;else{var a=i.name&&wc[i.name.toLowerCase()];a&&(r&&r===qe.landscape?(e.width=a.height,e.height=a.width):(e.width=a.width,e.height=a.height))}}var s=t.marks;s&&s.value!==qe.none&&(e.bleedOffset=Cc);var l=t.bleed;return l&&l.value!==qe.auto?l.value&&l.value.isNumeric()&&(e.bleed=l.value):s&&(s.value.isSpaceList()?s.value.values.some((function(t){return t===qe.crop})):s.value===qe.crop)&&(e.bleed=new Be(6,"pt")),e}function xc(t,e){var n={},i=t.bleed.num*e.queryUnitSize(t.bleed.unit,!1),r=t.bleedOffset.num*e.queryUnitSize(t.bleedOffset.unit,!1),o=i+r,a=t.width;n.pageWidth=a===Ze?e.pref.defaultPaperSize?e.pref.defaultPaperSize.width*e.queryUnitSize("px",!1):(e.pref.spreadView?Math.floor(e.viewportWidth/2)-e.pref.pageBorder:e.viewportWidth)-2*o:a.num*e.queryUnitSize(a.unit,!1);var s=t.height;return n.pageHeight=s===Qe?e.pref.defaultPaperSize?e.pref.defaultPaperSize.height*e.queryUnitSize("px",!1):e.viewportHeight-2*o:s.num*e.queryUnitSize(s.unit,!1),n.bleed=i,n.bleedOffset=r,n.cropOffset=o,n}function Ic(t,e,n){var i=t.createElementNS(G.SVG,"svg");return i.setAttribute("width",e),i.setAttribute("height",n),i.style.position="absolute",i}function Pc(t,e,n){var i=t.createElementNS(G.SVG,n=n||"polyline");return i.setAttribute("stroke","black"),i.setAttribute("stroke-width",e),i.setAttribute("fill","none"),i}!function(t){t.TOP_LEFT="top left",t.TOP_RIGHT="top right",t.BOTTOM_LEFT="bottom left",t.BOTTOM_RIGHT="bottom right"}(bc||(bc={})),function(t){t.TOP="top",t.BOTTOM="bottom",t.LEFT="left",t.RIGHT="right"}(yc||(yc={}));var Ac,Oc,Rc=(Ac={width:!0,height:!0,"block-size":!0,"inline-size":!0,margin:!0,padding:!0,border:!0,outline:!0,"outline-width":!0,"outline-style":!0,"outline-color":!0},["left","right","top","bottom","before","after","start","end","block-start","block-end","inline-start","inline-end"].forEach((function(t){Ac["margin-"+t]=!0,Ac["padding-"+t]=!0,Ac["border-"+t+"-width"]=!0,Ac["border-"+t+"-style"]=!0,Ac["border-"+t+"-color"]=!0})),Ac);!function(t){t.START="start",t.CENTER="center",t.END="end"}(Oc||(Oc={}));var kc,Lc={"top-left-corner":{order:1,isInTopRow:!0,isInBottomRow:!1,isInLeftColumn:!0,isInRightColumn:!0,positionAlongVariableDimension:null},"top-left":{order:2,isInTopRow:!0,isInBottomRow:!1,isInLeftColumn:!1,isInRightColumn:!1,positionAlongVariableDimension:Oc.START},"top-center":{order:3,isInTopRow:!0,isInBottomRow:!1,isInLeftColumn:!1,isInRightColumn:!1,positionAlongVariableDimension:Oc.CENTER},"top-right":{order:4,isInTopRow:!0,isInBottomRow:!1,isInLeftColumn:!1,isInRightColumn:!1,positionAlongVariableDimension:Oc.END},"top-right-corner":{order:5,isInTopRow:!0,isInBottomRow:!1,isInLeftColumn:!1,isInRightColumn:!0,positionAlongVariableDimension:null},"right-top":{order:6,isInTopRow:!1,isInBottomRow:!1,isInLeftColumn:!1,isInRightColumn:!0,positionAlongVariableDimension:Oc.START},"right-middle":{order:7,isInTopRow:!1,isInBottomRow:!1,isInLeftColumn:!1,isInRightColumn:!0,positionAlongVariableDimension:Oc.CENTER},"right-bottom":{order:8,isInTopRow:!1,isInBottomRow:!1,isInLeftColumn:!1,isInRightColumn:!0,positionAlongVariableDimension:Oc.END},"bottom-right-corner":{order:9,isInTopRow:!1,isInBottomRow:!0,isInLeftColumn:!1,isInRightColumn:!0,positionAlongVariableDimension:null},"bottom-right":{order:10,isInTopRow:!1,isInBottomRow:!0,isInLeftColumn:!1,isInRightColumn:!1,positionAlongVariableDimension:Oc.END},"bottom-center":{order:11,isInTopRow:!1,isInBottomRow:!0,isInLeftColumn:!1,isInRightColumn:!1,positionAlongVariableDimension:Oc.CENTER},"bottom-left":{order:12,isInTopRow:!1,isInBottomRow:!0,isInLeftColumn:!1,isInRightColumn:!1,positionAlongVariableDimension:Oc.START},"bottom-left-corner":{order:13,isInTopRow:!1,isInBottomRow:!0,isInLeftColumn:!0,isInRightColumn:!1,positionAlongVariableDimension:null},"left-bottom":{order:14,isInTopRow:!1,isInBottomRow:!1,isInLeftColumn:!0,isInRightColumn:!1,positionAlongVariableDimension:Oc.END},"left-middle":{order:15,isInTopRow:!1,isInBottomRow:!1,isInLeftColumn:!0,isInRightColumn:!1,positionAlongVariableDimension:Oc.CENTER},"left-top":{order:16,isInTopRow:!1,isInBottomRow:!1,isInLeftColumn:!0,isInRightColumn:!1,positionAlongVariableDimension:Oc.START}},Fc=(kc=Lc,Object.keys(kc).sort((function(t,e){return kc[t].order-kc[e].order}))),_c=function(t){function e(e,n,i){var r;(r=t.call(this,e,null,"vivliostyle-page-rule-master",[],n,null,0)||this).pageMarginBoxes={};var o=Tc(i),a=new Dc(r.scope,_(r),i,o);return r.bodyPartitionKey=a.key,r.createPageMarginBoxes(i),r.applySpecified(i,o),r}A(e,t);var n=e.prototype;return n.createPageMarginBoxes=function(t){var e=t._marginBoxes;if(e){var n=this;Fc.forEach((function(i){e[i]&&(n.pageMarginBoxes[i]=new Bc(n.scope,n,i,t))}))}},n.applySpecified=function(t,e){for(var n in this.specified.position=new zr(qe.relative,0),this.specified.width=new zr(e.width,0),this.specified.height=new zr(e.height,0),t)Rc[n]||"background-clip"===n||(this.specified[n]=t[n])},n.createInstance=function(t){return new Mc(t,this)},e}(Yu),Dc=function(t){function e(e,n,i,r){var o;return(o=t.call(this,e,null,null,[],n)||this).pageSize=r,o.specified["z-index"]=new zr(new Ue(0),0),o.applySpecified(i),o}A(e,t);var n=e.prototype;return n.applySpecified=function(t){for(var e in this.specified["flow-from"]=new zr(De("body"),0),this.specified.position=new zr(qe.absolute,0),this.specified.overflow=new zr(qe.visible,0),Rc)Rc.hasOwnProperty(e)&&(this.specified[e]=t[e])},n.createInstance=function(t){return new Hc(t,this)},e}($u),Bc=function(t){function e(e,n,i,r){var o;return(o=t.call(this,e,null,null,[],n)||this).marginBoxName=i,o.applySpecified(r),o}A(e,t);var n=e.prototype;return n.applySpecified=function(t){var e=t._marginBoxes[this.marginBoxName];for(var n in t){var i=e[n];(Ar[n]||i&&i.value===qe.inherit)&&(this.specified[n]=t[n])}for(var r in e)if(Object.prototype.hasOwnProperty.call(e,r)){var o=e[r];o&&o.value!==qe.inherit&&(this.specified[r]=o)}},n.createInstance=function(t){return new Gc(t,this)},e}($u),Mc=function(t){function e(e,n){var i;return(i=t.call(this,e,n)||this).pageAreaDimension=null,i.pageMarginBoxInstances={},i}A(e,t);var n=e.prototype;return n.applyCascadeAndInit=function(e,n){var i=this.cascaded;for(var r in n)if(Object.prototype.hasOwnProperty.call(n,r))switch(r){case"writing-mode":case"direction":i[r]=n[r]}t.prototype.applyCascadeAndInit.call(this,e,n)},n.initHorizontal=function(){var t=this.style;t.left=Je,t["margin-left"]=Je,t["border-left-width"]=Je,t["padding-left"]=Je,t["padding-right"]=Je,t["border-right-width"]=Je,t["margin-right"]=Je,t.right=Je},n.initVertical=function(){var t=this.style;t.top=Je,t["margin-top"]=Je,t["border-top-width"]=Je,t["padding-top"]=Je,t["padding-bottom"]=Je,t["border-bottom-width"]=Je,t["margin-bottom"]=Je,t.bottom=Je},n.setPageAreaDimension=function(t){this.pageAreaDimension=t;var e=this.style;e.width=new je(t.borderBoxWidth),e.height=new je(t.borderBoxHeight),e["padding-left"]=new je(t.marginLeft),e["padding-right"]=new je(t.marginRight),e["padding-top"]=new je(t.marginTop),e["padding-bottom"]=new je(t.marginBottom)},n.adjustPageLayout=function(t,e,n){var i=e.marginBoxes,r={start:this.pageAreaDimension.marginLeft,end:this.pageAreaDimension.marginRight,extent:this.pageAreaDimension.borderBoxWidth},o={start:this.pageAreaDimension.marginTop,end:this.pageAreaDimension.marginBottom,extent:this.pageAreaDimension.borderBoxHeight};this.sizeMarginBoxesAlongVariableDimension(i.top,!0,r,t,n),this.sizeMarginBoxesAlongVariableDimension(i.bottom,!0,r,t,n),this.sizeMarginBoxesAlongVariableDimension(i.left,!1,o,t,n),this.sizeMarginBoxesAlongVariableDimension(i.right,!1,o,t,n)},n.sizeMarginBoxesAlongVariableDimension=function(t,e,n,i,r){var o=Oc.START,a=Oc.CENTER,s=Oc.END,l=this.pageBox.scope,u={},c={},h={};for(var f in t){var d=Lc[f];if(d){var p=t[f],g=this.pageMarginBoxInstances[f],m=new Uc(p,g.style,e,l,r);u[d.positionAlongVariableDimension]=p,c[d.positionAlongVariableDimension]=g,h[d.positionAlongVariableDimension]=m}}var v={start:n.start.evaluate(i),end:n.end.evaluate(i),extent:n.extent.evaluate(i)},b=this.getSizesOfMarginBoxesAlongVariableDimension(h,v.extent),y=!1,w={};Object.keys(u).forEach((function(t){var o=t,a=Zu(l,c[o].style[e?"max-width":"max-height"],n.extent);if(a){var s=a.evaluate(i);if(b[o]>s){var f=h[o]=new Vc(u[o],c[o].style,e,l,r,s);w[o]=f.getOuterSize(),y=!0}}})),y&&(b=this.getSizesOfMarginBoxesAlongVariableDimension(h,v.extent),y=!1,[o,a,s].forEach((function(t){b[t]=w[t]||b[t]})));var E={};Object.keys(u).forEach((function(t){var o=t,a=Zu(l,c[o].style[e?"min-width":"min-height"],n.extent);if(a){var s=a.evaluate(i);if(b[o]<s){var f=h[o]=new Vc(u[o],c[o].style,e,l,r,s);E[o]=f.getOuterSize(),y=!0}}})),y&&(b=this.getSizesOfMarginBoxesAlongVariableDimension(h,v.extent),[o,a,s].forEach((function(t){b[t]=E[t]||b[t]})));var S=v.start+v.extent,N=v.start+(v.start+v.extent);[o,a,s].forEach((function(t){var n=b[t];if(n){var i=u[t],r=0;switch(t){case o:r=e?i.left:i.top;break;case a:r=(N-n)/2;break;case s:r=S-n}e?i.setHorizontalPosition(r,n-i.getInsetLeft()-i.getInsetRight()):i.setVerticalPosition(r,n-i.getInsetTop()-i.getInsetBottom())}}))},n.getSizesOfMarginBoxesAlongVariableDimension=function(t,e){var n=t[Oc.START],i=t[Oc.CENTER],r=t[Oc.END],o={};if(i){var a=[n,r].filter((function(t){return t})),s=a.length?new zc(a):null,l=this.distributeAutoMarginBoxSizes(i,s,e);l.xSize&&(o[Oc.CENTER]=l.xSize);var u=(e-(l.xSize||i.getOuterSize()))/2;n&&n.hasAutoSize()&&(o[Oc.START]=u),r&&r.hasAutoSize()&&(o[Oc.END]=u)}else{var c=this.distributeAutoMarginBoxSizes(n,r,e);c.xSize&&(o[Oc.START]=c.xSize),c.ySize&&(o[Oc.END]=c.ySize)}return o},n.distributeAutoMarginBoxSizes=function(t,e,n){var i={xSize:null,ySize:null};if(t&&e)if(t.hasAutoSize()&&e.hasAutoSize()){var r=t.getOuterMaxContentSize(),o=e.getOuterMaxContentSize();if(r>0&&o>0){var a=r+o;if(a<n)i.xSize=n*r/a;else{var s=t.getOuterMinContentSize(),l=s+e.getOuterMinContentSize();l<n?i.xSize=s+(n-l)*(r-s)/(a-l):l>0&&(i.xSize=n*s/l)}i.xSize>0&&(i.ySize=n-i.xSize)}else r>0?i.xSize=n:o>0&&(i.ySize=n)}else t.hasAutoSize()?i.xSize=Math.max(n-e.getOuterSize(),0):e.hasAutoSize()&&(i.ySize=Math.max(n-t.getOuterSize(),0));else t?t.hasAutoSize()&&(i.xSize=n):e&&e.hasAutoSize()&&(i.ySize=n);return i},n.prepareContainer=function(e,n,i,r,o){t.prototype.prepareContainer.call(this,e,n,i,r,o),n.element.setAttribute("data-vivliostyle-page-box",!0)},e}(cc),Uc=function(){function t(t,e,n,i,r){this.container=t,this.isHorizontal=n,this.clientLayout=r,this.size=null,this.hasAutoSize_=!Zu(i,e[n?"width":"height"],new pe(i,0,"px"))}var e=t.prototype;return e.hasAutoSize=function(){return this.hasAutoSize_},e.getSize=function(){return this.size||(this.size=Aa(this.clientLayout,this.container.element,this.isHorizontal?[ya.MAX_CONTENT_WIDTH,ya.MIN_CONTENT_WIDTH]:[ya.MAX_CONTENT_HEIGHT,ya.MIN_CONTENT_HEIGHT])),this.size},e.getOuterMaxContentSize=function(){var t=this.getSize();return this.isHorizontal?this.container.getInsetLeft()+t[ya.MAX_CONTENT_WIDTH]+this.container.getInsetRight():this.container.getInsetTop()+t[ya.MAX_CONTENT_HEIGHT]+this.container.getInsetBottom()},e.getOuterMinContentSize=function(){var t=this.getSize();return this.isHorizontal?this.container.getInsetLeft()+t[ya.MIN_CONTENT_WIDTH]+this.container.getInsetRight():this.container.getInsetTop()+t[ya.MIN_CONTENT_HEIGHT]+this.container.getInsetBottom()},e.getOuterSize=function(){return this.isHorizontal?this.container.getInsetLeft()+this.container.width+this.container.getInsetRight():this.container.getInsetTop()+this.container.height+this.container.getInsetBottom()},t}(),zc=function(){function t(t){this.params=t}var e=t.prototype;return e.hasAutoSize=function(){return this.params.some((function(t){return t.hasAutoSize()}))},e.getOuterMaxContentSize=function(){var t=this.params.map((function(t){return t.getOuterMaxContentSize()}));return Math.max.apply(null,t)*t.length},e.getOuterMinContentSize=function(){var t=this.params.map((function(t){return t.getOuterMinContentSize()}));return Math.max.apply(null,t)*t.length},e.getOuterSize=function(){var t=this.params.map((function(t){return t.getOuterSize()}));return Math.max.apply(null,t)*t.length},t}(),Vc=function(t){function e(e,n,i,r,o,a){var s;return(s=t.call(this,e,n,i,r,o)||this).fixedSize=a,s}A(e,t);var n=e.prototype;return n.hasAutoSize=function(){return!1},n.getOuterMaxContentSize=function(){return this.getOuterSize()},n.getOuterMinContentSize=function(){return this.getOuterSize()},n.getOuterSize=function(){return this.isHorizontal?this.container.getInsetLeft()+this.fixedSize+this.container.getInsetRight():this.container.getInsetTop()+this.fixedSize+this.container.getInsetBottom()},e}(Uc),Hc=function(t){function e(e,n){var i;return(i=t.call(this,e,n)||this).borderBoxWidth=null,i.borderBoxHeight=null,i.marginTop=null,i.marginRight=null,i.marginBottom=null,i.marginLeft=null,i}A(e,t);var n=e.prototype;return n.applyCascadeAndInit=function(e,n){var i=this.cascaded;for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(r.match(/^column.*$/)||r.match(/^background-/))&&(i[r]=n[r]);t.prototype.applyCascadeAndInit.call(this,e,n),this.parentInstance.setPageAreaDimension({borderBoxWidth:this.borderBoxWidth,borderBoxHeight:this.borderBoxHeight,marginTop:this.marginTop,marginRight:this.marginRight,marginBottom:this.marginBottom,marginLeft:this.marginLeft})},n.initHorizontal=function(){var t=this.resolvePageBoxDimensions({start:"left",end:"right",extent:"width"});this.borderBoxWidth=t.borderBoxExtent,this.marginLeft=t.marginStart,this.marginRight=t.marginEnd},n.initVertical=function(){var t=this.resolvePageBoxDimensions({start:"top",end:"bottom",extent:"height"});this.borderBoxHeight=t.borderBoxExtent,this.marginTop=t.marginStart,this.marginBottom=t.marginEnd},n.resolvePageBoxDimensions=function(t){var e=this.style,n=this.pageBox.scope,i=t.start,r=t.end,o=t.extent,a=this.pageBox.pageSize[o].toExpr(n,null),s=Zu(n,e[o],a),l=Zu(n,e["margin-"+i],a),u=Zu(n,e["margin-"+r],a),c=Qu(n,e["padding-"+i],a),h=Qu(n,e["padding-"+r],a),f=tc(n,e["border-"+i+"-width"],e["border-"+i+"-style"],a),d=tc(n,e["border-"+r+"-width"],e["border-"+r+"-style"],a),p=Te(n,a,Ce(n,Ce(n,f,c),Ce(n,d,h)));return s?(p=Te(n,p,s),l||u?l?u=Te(n,p,l):l=Te(n,p,u):u=l=xe(n,p,new we(n,.5))):(l||(l=n.zero),u||(u=n.zero),s=Te(n,p,Ce(n,l,u))),e[i]=new je(l),e[r]=new je(u),e["margin-"+i]=Je,e["margin-"+r]=Je,e["padding-"+i]=new je(c),e["padding-"+r]=new je(h),e["border-"+i+"-width"]=new je(f),e["border-"+r+"-width"]=new je(d),e[o]=new je(s),e["max-"+o]=new je(s),{borderBoxExtent:Te(n,a,Ce(n,l,u)),marginStart:l,marginEnd:u}},n.prepareContainer=function(e,n,i,r,o){t.prototype.prepareContainer.call(this,e,n,i,r,o),i.pageAreaElement=n.element,e.pageAreaWidth=parseFloat(i.pageAreaElement.style.width),e.pageAreaHeight=parseFloat(i.pageAreaElement.style.height)},e}(fc),Gc=function(t){function e(e,n){var i;(i=t.call(this,e,n)||this).suppressEmptyBoxGeneration=!0;var r=n.marginBoxName;return i.boxInfo=Lc[r],e.pageMarginBoxInstances[r]=_(i),i}A(e,t);var n=e.prototype;return n.prepareContainer=function(e,n,i,r,o){this.applyVerticalAlign(e,n.element),t.prototype.prepareContainer.call(this,e,n,i,r,o)},n.applyVerticalAlign=function(t,e){tt(e,"display","flex");var n=this.getProp(t,"vertical-align"),i=null;n===De("middle")?i="center":n===De("top")?i="flex-start":n===De("bottom")&&(i="flex-end"),i&&(tt(e,"flex-flow",this.vertical?"row":"column"),tt(e,"justify-content",i))},n.positionAlongVariableDimension=function(t,e){var n=this.style,i=this.pageBox.scope,r=t.start,o=t.end,a="left"===r,s=a?e.borderBoxWidth:e.borderBoxHeight,l=Zu(i,n[t.extent],s),u=a?e.marginLeft:e.marginTop;if(this.boxInfo.positionAlongVariableDimension===Oc.START)n[r]=new je(u);else if(l){var c=Qu(i,n["margin-"+r],s),h=Qu(i,n["margin-"+o],s),f=Qu(i,n["padding-"+r],s),d=Qu(i,n["padding-"+o],s),p=tc(i,n["border-"+r+"-width"],n["border-"+r+"-style"],s),g=tc(i,n["border-"+o+"-width"],n["border-"+o+"-style"],s),m=Ce(i,l,Ce(i,Ce(i,f,d),Ce(i,Ce(i,p,g),Ce(i,c,h))));switch(this.boxInfo.positionAlongVariableDimension){case Oc.CENTER:n[r]=new je(Ce(i,u,Ie(i,Te(i,s,m),new we(i,2))));break;case Oc.END:n[r]=new je(Te(i,Ce(i,u,s),m))}}},n.positionAndSizeAlongFixedDimension=function(t,e){var n=this.style,i=this.pageBox.scope,r=t.inside,o=t.outside,a=t.extent,s=e["margin"+o.charAt(0).toUpperCase()+o.substring(1)],l=Ju(i,n["margin-"+r],s),u=Ju(i,n["margin-"+o],s),c=Qu(i,n["padding-"+r],s),h=Qu(i,n["padding-"+o],s),f=tc(i,n["border-"+r+"-width"],n["border-"+r+"-style"],s),d=tc(i,n["border-"+o+"-width"],n["border-"+o+"-style"],s),p=Zu(i,n[a],s),g=null;function m(t){if(g)return g;g={extent:p?p.evaluate(t):null,marginInside:l?l.evaluate(t):null,marginOutside:u?u.evaluate(t):null};var e=s.evaluate(t),n=0;return[f,c,h,d].forEach((function(e){e&&(n+=e.evaluate(t))})),(null===g.marginInside||null===g.marginOutside)&&n+g.extent+g.marginInside+g.marginOutside>e&&(null===g.marginInside&&(g.marginInside=0),null===g.marginOutside&&(g.marginOutside=0)),null!==g.extent&&null!==g.marginInside&&null!==g.marginOutside&&(g.marginOutside=null),null===g.extent&&null!==g.marginInside&&null!==g.marginOutside?g.extent=e-n-g.marginInside-g.marginOutside:null!==g.extent&&null===g.marginInside&&null!==g.marginOutside?g.marginInside=e-n-g.extent-g.marginOutside:null!==g.extent&&null!==g.marginInside&&null===g.marginOutside?g.marginOutside=e-n-g.extent-g.marginInside:null===g.extent?(g.marginInside=g.marginOutside=0,g.extent=e-n):g.marginInside=g.marginOutside=(e-n-g.extent)/2,g}n[a]=new je(new ve(i,(function(){var t=m(this).extent;return null===t?0:t}),a)),n["margin-"+r]=new je(new ve(i,(function(){var t=m(this).marginInside;return null===t?0:t}),"margin-"+r)),n["margin-"+o]=new je(new ve(i,(function(){var t=m(this).marginOutside;return null===t?0:t}),"margin-"+o)),"left"===r?n.left=new je(Ce(i,e.marginLeft,e.borderBoxWidth)):"top"===r&&(n.top=new je(Ce(i,e.marginTop,e.borderBoxHeight)))},n.initHorizontal=function(){var t=this.parentInstance.pageAreaDimension;this.boxInfo.isInLeftColumn?this.positionAndSizeAlongFixedDimension({inside:"right",outside:"left",extent:"width"},t):this.boxInfo.isInRightColumn?this.positionAndSizeAlongFixedDimension({inside:"left",outside:"right",extent:"width"},t):this.positionAlongVariableDimension({start:"left",end:"right",extent:"width"},t)},n.initVertical=function(){var t=this.parentInstance.pageAreaDimension;this.boxInfo.isInTopRow?this.positionAndSizeAlongFixedDimension({inside:"bottom",outside:"top",extent:"height"},t):this.boxInfo.isInBottomRow?this.positionAndSizeAlongFixedDimension({inside:"top",outside:"bottom",extent:"height"},t):this.positionAlongVariableDimension({start:"top",end:"bottom",extent:"height"},t)},n.finishContainer=function(e,n,i,r,o,a,s){t.prototype.finishContainer.call(this,e,n,i,r,o,a,s);var l=i.marginBoxes,u=this.pageBox.marginBoxName,c=this.boxInfo;c.isInLeftColumn||c.isInRightColumn?c.isInTopRow||c.isInBottomRow||(c.isInLeftColumn?l.left[u]=n:c.isInRightColumn&&(l.right[u]=n)):c.isInTopRow?l.top[u]=n:c.isInBottomRow&&(l.bottom[u]=n)},e}(fc),Wc=function(){function t(t,e,n,i,r){this.cascadeInstance=t,this.pageScope=e,this.rootPageBoxInstance=n,this.context=i,this.docElementStyle=r,this.pageMasterCache={},this.definePageProgression()}var n=t.prototype;return n.definePageProgression=function(){var t=this.pageScope,n=new ge(t,"page-number"),i=new se(t,new de(t,n,new we(t,2)),t.zero);t.defineName("recto-page",new Zt(t,i)),t.defineName("verso-page",i),(this.context.pageProgression||vc(this.docElementStyle))===e.PageProgression.LTR?(t.defineName("left-page",i),t.defineName("right-page",new Zt(t,i))):(t.defineName("left-page",new Zt(t,i)),t.defineName("right-page",i))},n.getCascadedPageStyle=function(){var t={};return this.cascadeInstance.pushRule([],"",t),this.cascadeInstance.popRule(),t},n.getPageRulePageMaster=function(t,e){var n=t.pageBox;if(0===Object.keys(e).length)return n.resetScope(),t;var i=this.makeCacheKey(e,n),r=this.pageMasterCache[i];return r||(r=n.pseudoName===lc?this.generatePageRuleMaster(e):this.generateCascadedPageMaster(e,n),this.pageMasterCache[i]=r),r.pageBox.resetScope(),r},n.makeCacheKey=function(t,e){var n=this.makeCascadeValueObjectKey(t);return e.key+"^"+n},n.makeCascadeValueObjectKey=function(t){var e=[];for(var n in t)if(Object.prototype.hasOwnProperty.call(t,n)){var i,r=t[n];i=r instanceof zr?""+r.value:this.makeCascadeValueObjectKey(r),e.push(n+i+(r.priority||""))}return e.sort().join("^")},n.generatePageRuleMaster=function(t){var e=new _c(this.pageScope,this.rootPageBoxInstance.pageBox,t).createInstance(this.rootPageBoxInstance);return e.applyCascadeAndInit(this.cascadeInstance,this.docElementStyle),e.resolveAutoSizing(this.context),e},n.generateCascadedPageMaster=function(t,e){var n=e.clone({pseudoName:"vivliostyle-page-rule-master"}),i=n.specified,r=t.size;if(r){var o=Tc(t),a=r.priority;i.width=Hr(this.context,i.width,new zr(o.width,a)),i.height=Hr(this.context,i.height,new zr(o.height,a))}["counter-reset","counter-increment"].forEach((function(e){i[e]&&(t[e]=i[e])}));var s=n.createInstance(this.rootPageBoxInstance);return s.applyCascadeAndInit(this.cascadeInstance,this.docElementStyle),s.resolveAutoSizing(this.context),s},t}(),Xc=function(t){function e(e){var n;return(n=t.call(this)||this).pageType=e,n}A(e,t);var n=e.prototype;return n.apply=function(t){t.currentPageType===this.pageType&&this.chained.apply(t)},n.getPriority=function(){return 3},n.makePrimary=function(t){return this.chained&&t.insertInTable(t.pagetypes,this.pageType,this.chained),!0},e}(lo),jc=function(t){function e(e){var n;return(n=t.call(this)||this).scope=e,n}A(e,t);var n=e.prototype;return n.apply=function(t){1===new ge(this.scope,"page-number").evaluate(t.context)&&this.chained.apply(t)},n.getPriority=function(){return 2},e}(lo),Kc=function(t){function e(e){var n;return(n=t.call(this)||this).scope=e,n}A(e,t);var n=e.prototype;return n.apply=function(t){new ge(this.scope,"left-page").evaluate(t.context)&&this.chained.apply(t)},n.getPriority=function(){return 1},e}(lo),Yc=function(t){function e(e){var n;return(n=t.call(this)||this).scope=e,n}A(e,t);var n=e.prototype;return n.apply=function(t){new ge(this.scope,"right-page").evaluate(t.context)&&this.chained.apply(t)},n.getPriority=function(){return 1},e}(lo),qc=function(t){function e(e){var n;return(n=t.call(this)||this).scope=e,n}A(e,t);var n=e.prototype;return n.apply=function(t){new ge(this.scope,"recto-page").evaluate(t.context)&&this.chained.apply(t)},n.getPriority=function(){return 1},e}(lo),$c=function(t){function e(e){var n;return(n=t.call(this)||this).scope=e,n}A(e,t);var n=e.prototype;return n.apply=function(t){new ge(this.scope,"verso-page").evaluate(t.context)&&this.chained.apply(t)},n.getPriority=function(){return 1},e}(lo),Zc=function(t){function e(e,n){return t.call(this,e,n,null,null,null)||this}return A(e,t),e.prototype.apply=function(t){!function(t,e,n,i,r){to(t,e,n,i,null,null,null);var o=n._marginBoxes;if(o){var a=$r(e,"_marginBoxes");for(var s in o)if(o.hasOwnProperty(s)){var l=a[s];l||(a[s]=l={}),to(t,l,o[s],i,null,null,null)}}}(t.context,t.currentStyle,this.style,this.specificity)},e}(so),Qc=function(t){function e(e,n,i,r,o){var a;return(a=t.call(this,e,n,null,i,null,r,!1)||this).pageProps=o,a.currentPageSelectors=[],a.currentNamedPageSelector="",a.currentPseudoPageClassSelectors=[],a}A(e,t);var n=e.prototype;return n.startPageRule=function(){this.startSelectorRule()},n.tagSelector=function(t,e){this.currentNamedPageSelector=e,e&&(this.chain.push(new Xc(e)),this.specificity+=65536)},n.pseudoclassSelector=function(t,e){switch(e&&this.reportAndSkip("E_INVALID_PAGE_SELECTOR :"+t+"("+e.join("")+")"),this.currentPseudoPageClassSelectors.push(":"+t),t.toLowerCase()){case"first":this.chain.push(new jc(this.scope)),this.specificity+=256;break;case"left":this.chain.push(new Kc(this.scope)),this.specificity+=1;break;case"right":this.chain.push(new Yc(this.scope)),this.specificity+=1;break;case"recto":this.chain.push(new qc(this.scope)),this.specificity+=1;break;case"verso":this.chain.push(new $c(this.scope)),this.specificity+=1;break;default:this.reportAndSkip("E_INVALID_PAGE_SELECTOR :"+t)}},n.finishSelector=function(){var t;t=this.currentNamedPageSelector||this.currentPseudoPageClassSelectors.length?[this.currentNamedPageSelector].concat(this.currentPseudoPageClassSelectors.sort()):null,this.currentPageSelectors.push({selectors:t,specificity:this.specificity}),this.currentNamedPageSelector="",this.currentPseudoPageClassSelectors=[]},n.nextSelector=function(){this.finishSelector(),t.prototype.nextSelector.call(this)},n.startRuleBody=function(){this.finishSelector(),t.prototype.startRuleBody.call(this)},n.simpleProperty=function(e,n,i){var r=this;if("bleed"!==e&&"marks"!==e||this.currentPageSelectors.some((function(t){return null===t.selectors}))){t.prototype.simpleProperty.call(this,e,n,i);var o=Kr(this.elementStyle,e),a=this.pageProps;if("bleed"===e||"marks"===e)a[""]||(a[""]={}),Object.keys(a).forEach((function(t){Yr(a[t],e,o)}));else if("size"===e){var s=a[""];this.currentPageSelectors.forEach((function(t){var n=new zr(o.value,o.priority+t.specificity),i=t.selectors?t.selectors.join(""):"",l=a[i];if(l){var u=Kr(l,e);n=u?Hr(null,n,u):n,Yr(l,e,n)}else Yr(l=a[i]={},e,n),s&&["bleed","marks"].forEach((function(t){s[t]&&Yr(l,t,s[t])}),r)}))}}},n.insertNonPrimary=function(t){this.cascade.insertInTable(this.cascade.pagetypes,"*",t)},n.makeApplyRuleAction=function(t){return new Zc(this.elementStyle,t)},n.startPageMarginBoxRule=function(t){var e=$r(this.elementStyle,"_marginBoxes"),n=e[t];n||(e[t]=n={});var i=new Jc(this.scope,this.owner,this.validatorSet,n);this.owner.pushHandler(i)},e}(na),Jc=function(t){function e(e,n,i,r){var o;return(o=t.call(this,e,n,!1)||this).validatorSet=i,o.boxStyle=r,o}A(e,t);var n=e.prototype;return n.property=function(t,e,n){this.validatorSet.validatePropertyAndHandleShorthand(t,e,n,this)},n.invalidPropertyValue=function(t,e){this.report("E_INVALID_PROPERTY_VALUE "+t+": "+e.toString())},n.unknownProperty=function(t,e){this.report("E_INVALID_PROPERTY "+t+": "+e.toString())},n.simpleProperty=function(t,e,n){var i=n?this.getImportantSpecificity():this.getBaseSpecificity(),r=new zr(e,i);Yr(this.boxStyle,t,r)},e}(er),th=function(t,e,n){return t.replace(/[uU][rR][lL]\(\s*"((\\([^0-9a-fA-F]+|[0-9a-fA-F]+\s*)|[^"\r\n])+)"/gm,(function(t,i){return'url("'+n.transformURL(i,e)+'"'})).replace(/[uU][rR][lL]\(\s*'((\\([^0-9a-fA-F]+|[0-9a-fA-F]+\s*)|[^'\r\n])+)'/gm,(function(t,i){return"url('"+n.transformURL(i,e)+"'"})).replace(/[uU][rR][lL]\(\s*((\\([^0-9a-fA-F]+|[0-9a-fA-F]+\s*)|[^"'\r\n\)\s])+)/gm,(function(t,i){return"url("+n.transformURL(i,e)}))},eh={},nh={"text-indent":"0px","margin-top":"0px","padding-top":"0px","border-top-width":"0px","border-top-style":"none","border-top-color":"transparent","border-top-left-radius":"0px","border-top-right-radius":"0px"},ih={"text-indent":"0px","margin-right":"0px","padding-right":"0px","border-right-width":"0px","border-right-style":"none","border-right-color":"transparent","border-top-right-radius":"0px","border-bottom-right-radius":"0px"},rh={"margin-top":"0px"},oh={"margin-right":"0px"},ah=function(t){function n(e,n,i,r,o,a,s,l,u,c,h,f,d){var p;return(p=t.call(this)||this).flowName=e,p.context=n,p.viewport=i,p.styler=r,p.regionIds=o,p.xmldoc=a,p.docFaces=s,p.footnoteStyle=l,p.stylerProducer=u,p.page=c,p.customRenderer=h,p.fallbackMap=f,p.documentURLTransformer=d,p.nodeContext=null,p.viewRoot=null,p.isFootnote=!1,p.sourceNode=null,p.offsetInNode=0,p.viewNode=null,p.document=i.document,p.exprContentListener=r.counterListener.getExprContentListener(),p}A(n,t);var i=n.prototype;return i.clone=function(){return new n(this.flowName,this.context,this.viewport,this.styler,this.regionIds,this.xmldoc,this.docFaces,this.footnoteStyle,this.stylerProducer,this.page,this.customRenderer,this.fallbackMap,this.documentURLTransformer)},i.createPseudoelementShadow=function(t,e,n,i,r,o,a,s){var l=this.getPseudoMap(n,this.regionIds,this.isFootnote,this.nodeContext,o);if(!l)return s;for(var u,c=[],h=Zs.createElementNS(G.SHADOW,"root"),f=h,d=B(Qs);!(u=d()).done;){var p=u.value,g=void 0;if(p){if(!l[p])continue;if(!("footnote-marker"!=p||e&&this.isFootnote))continue;if(p.match(/^first-/)){var m=i.display;if(!m||m===qe.inline)continue}if("before"===p||"after"===p){var v=l[p].content;if(!v||v===qe.normal||v===qe.none)continue}c.push(p),tl(g=Zs.createElementNS(G.XHTML,"span"),p)}else g=Zs.createElementNS(G.SHADOW,"content");f.appendChild(g),p.match(/^first-/)&&(f=g)}if(!c.length)return s;var b=new el(t,n,r,o,this.exprContentListener);return new $a(t,h,null,a,s,qa.ROOTLESS,b)},i.getPseudoMap=function(t,e,n,i,r){var o=qr(t,"_pseudos");if(!o)return null;var a={},s=function(t){var i=a[t]={};ga(i,o[t],r),ca(i,r,o[t]),pa(o[t],e,n,(function(t,e){ga(i,e,r),ua(e,(function(t){ga(i,t,r)}))}))};for(var l in o)s(l);return a},i.createRefShadow=function(t,e,n,i,r){var o=this,a=Ci("createRefShadow");return o.xmldoc.store.load(t).then((function(s){var l=s;if(l){var u=l.getElement(t);if(u){var c=o.stylerProducer.getStylerForDoc(l);r=new $a(n,u,l,i,r,e,c)}}a.finish(r)})),a.result()},i.createShadows=function(t,e,n,i,r,o,a){var s=this,l=Ci("createShadows"),u=i.template;return(u instanceof Ve?s.createRefShadow(u.url,qa.ROOTLESS,t,a,null):Ti(null)).then((function(u){var c=null;if(t.namespaceURI==G.SHADOW&&"include"==t.localName){var h=t.getAttribute("href"),f=null;h?f=a?a.xmldoc:s.xmldoc:a&&(h=a.owner.namespaceURI==G.XHTML?a.owner.getAttribute("href"):a.owner.getAttributeNS(G.XLINK,"href"),f=a.parentShadow?a.parentShadow.xmldoc:s.xmldoc),h&&(h=j(h,f.url),c=s.createRefShadow(h,qa.ROOTED,t,a,u))}null==c&&(c=Ti(u));var d=null;c.then((function(e){if(i.display===qe.table_cell){var n=j("user-agent.xml#table-cell",W);d=s.createRefShadow(n,qa.ROOTLESS,t,a,e)}else d=Ti(e)})),d.then((function(u){u=s.createPseudoelementShadow(t,e,n,i,r,o,a,u),l.finish(u)}))})),l.result()},i.setViewRoot=function(t,e){this.viewRoot=t,this.isFootnote=e},i.computeStyle=function(t,e,n,i){var r=this.context,o=da(n,r,this.regionIds,this.isFootnote);t=ha(o,r,t),e=fa(o,r,e);var a=this;ma(o,i,t,e,(function(t,e){var n=e.evaluate(r,t);return"font-family"==t&&(n=a.docFaces.filterFontFamily(n)),n}));var s=Ms(i.display||qe.inline,i.position,i.float,this.sourceNode===this.xmldoc.root);return["display","position","float"].forEach((function(t){s[t]&&(i[t]=s[t])})),t},i.inheritFromSourceParent=function(t){for(var e=this.nodeContext.sourceNode,n=[],i=null,r=this.nodeContext.shadowContext,o=-1;e&&1==e.nodeType;){var a=r&&r.root==e;if(!a||r.type==qa.ROOTLESS){var s=(r?r.styler:this.styler).getStyle(e,!1);n.push(s),i=i||nt(e)}a?(e=r.owner,r=r.parentShadow):(e=e.parentNode,o++)}for(var l=this.context.queryUnitSize("em",0===o),u={"font-size":new zr(new Be(l,"px"),0)},c=new no(u,this.context),h=n.length-1;h>=0;--h){var f=n[h],d=[];for(var p in f)jr(p)&&d.push(p);d.sort(en);for(var g=0,m=d;g<m.length;g++){var v=m[g];c.setPropName(v);var b=Kr(f,v);b.value!==qe.inherit&&(u[v]=b.filterValue(c))}}for(var y in t)jr(y)||(u[y]=t[y]);return{lang:i,elementStyle:u}},i.resolveURL=function(t){return t=j(t,this.xmldoc.url),this.fallbackMap[t]||t},i.inheritLangAttribute=function(){this.nodeContext.lang=nt(this.nodeContext.sourceNode)||this.nodeContext.parent&&this.nodeContext.parent.lang||this.nodeContext.lang},i.transferPolyfilledInheritedProps=function(t){var n=v(e.HOOKS.POLYFILLED_INHERITED_PROPS).reduce((function(t,e){return t.concat(e())}),[].concat(Or)).filter((function(e){return t[e]}));if(n.length){var i=this.nodeContext.inheritedProps;if(this.nodeContext.parent)for(var r in i=this.nodeContext.inheritedProps={},this.nodeContext.parent.inheritedProps)i[r]=this.nodeContext.parent.inheritedProps[r];n.forEach((function(e){var n=t[e];if(n){if(n instanceof Ue)i[e]=n.num;else if(n instanceof _e)i[e]=n.name;else if(n instanceof Be){var r=n;switch(r.unit){case"dpi":case"dpcm":case"dppx":i[e]=r.num*Vt[r.unit]}}else i[e]=n;delete t[e]}}))}},i.resolveFormattingContext=function(t,n,i,r,o,a){for(var s=v(e.HOOKS.RESOLVE_FORMATTING_CONTEXT),l=0;l<s.length;l++){var u=s[l](t,n,i,r,o,a);if(u)return void(t.formattingContext=u)}},i.createElementView=function(t,e){var n=this,i=!0,r=Ci("createElementView"),o=n.sourceNode,a=n.nodeContext.shadowContext?n.nodeContext.shadowContext.styler:n.styler,s=a.getStyle(o,!1);if(!n.nodeContext.shadowContext){var l=this.xmldoc.getElementOffset(o);Ir.registerFragmentIndex(l,n.nodeContext.fragmentIndex,0)}var u={};if(!n.nodeContext.parent){var c=n.inheritFromSourceParent(s);s=c.elementStyle,n.nodeContext.lang=c.lang}var h=s["float-reference"]&&function(t){switch(t){case"inline":return ss.INLINE;case"column":return ss.COLUMN;case"region":return ss.REGION;case"page":return ss.PAGE;default:throw new Error("Unknown float-reference: "+t)}}(s["float-reference"].value.toString());if(n.nodeContext.parent&&h&&ls(h)){var f=n.inheritFromSourceParent(s);s=f.elementStyle,n.nodeContext.lang=f.lang}n.nodeContext.vertical=n.computeStyle(n.nodeContext.vertical,"rtl"===n.nodeContext.direction,s,u),a.processContent(o,u),this.transferPolyfilledInheritedProps(u),this.inheritLangAttribute(),u.direction&&(n.nodeContext.direction=u.direction.toString());var d=u["flow-into"];if(d&&d.toString()!=n.flowName)return r.finish(!1),r.result();var p=u.display;if(p===qe.none)return r.finish(!1),r.result();var g=null==n.nodeContext.parent;return n.nodeContext.flexContainer=p===qe.flex,n.createShadows(o,g,s,u,a,n.context,n.nodeContext.shadowContext).then((function(l){n.nodeContext.nodeShadow=l;var c=u.position,f=u.float,d=u.clear,m=n.nodeContext.vertical?qe.vertical_rl:qe.horizontal_tb,v=n.nodeContext.parent?n.nodeContext.parent.vertical?qe.vertical_rl:qe.horizontal_tb:m,b=function(t){return"true"===t.getAttribute("data-vivliostyle-flow-root")}(o);n.nodeContext.establishesBFC=function(t,e,n,i,r,o,a){return r=r||o||qe.horizontal_tb,!!a||!!n&&n!==qe.none||Bs(e)||t===qe.inline_block||t===qe.table_cell||t===qe.table_caption||t==qe.flex||(t===qe.block||t===qe.list_item)&&!!i&&i!==qe.visible||!!o&&r!==o}(p,c,f,u.overflow,m,v,b),n.nodeContext.containingBlockForAbsolute=function(t){return t===qe.relative||t===qe.absolute||t===qe.fixed}(c),!n.nodeContext.isInsideBFC()||f===qe.footnote||h&&ls(h)||(f=null,d=null);var y=f===qe.left||f===qe.right||f===qe.top||f===qe.bottom||f===qe.inline_start||f===qe.inline_end||f===qe.block_start||f===qe.block_end||f===qe.snap_block||f===qe.footnote;f&&(delete u.float,f===qe.footnote&&(n.isFootnote?(y=!1,u.display=qe.block):u.display=qe.inline)),d&&(d===qe.inherit&&n.nodeContext.parent&&n.nodeContext.parent.clearSide&&(d=De(n.nodeContext.parent.clearSide)),d!==qe.left&&d!==qe.right&&d!==qe.top&&d!==qe.bottom&&d!==qe.both&&d!==qe.all&&d!==qe.same||(delete u.clear,u.display&&u.display!=qe.inline&&(n.nodeContext.clearSide=d.toString())));var w=p===qe.list_item&&u["ua-list-item-count"];if((y||u["break-inside"]&&u["break-inside"]!==qe.auto)&&n.nodeContext.breakPenalty++,p&&p!==qe.inline&&zs(p)&&n.nodeContext.breakPenalty++,n.nodeContext.inline=!y&&!p||zs(p)||function(t){switch(t.toString()){case"ruby-base":case"ruby-text":case"ruby-base-container":case"ruby-text-container":return!0;default:return!1}}(p),n.nodeContext.display=p?p.toString():"inline",n.nodeContext.floatSide=y?f.toString():null,n.nodeContext.floatReference=h||ss.INLINE,n.nodeContext.floatMinWrapBlock=u["float-min-wrap-block"]||null,n.nodeContext.columnSpan=u["column-span"],!n.nodeContext.inline){var E=u["break-after"];E&&(n.nodeContext.breakAfter=E.toString());var S=u["break-before"];S&&(n.nodeContext.breakBefore=S.toString())}n.nodeContext.verticalAlign=u["vertical-align"]&&u["vertical-align"].toString()||"baseline",n.nodeContext.captionSide=u["caption-side"]&&u["caption-side"].toString()||"top";var N=u["border-collapse"];if(!N||N===De("separate")){var C,T,x=u["border-spacing"];x&&(x.isSpaceList()?(C=x.values[0],T=x.values[1]):C=T=x,C.isNumeric()&&(n.nodeContext.inlineBorderSpacing=Ke(C,n.context)),T.isNumeric()&&(n.nodeContext.blockBorderSpacing=Ke(T,n.context)))}n.nodeContext.footnotePolicy=u["footnote-policy"];var I=u["x-first-pseudo"];I&&(n.nodeContext.firstPseudo=new Qa(n.nodeContext.parent?n.nodeContext.parent.firstPseudo:null,I.num)),n.nodeContext.inline||n.processAfterIfcontinues(o,s,a,n.context);var P=u["white-space"];if(P){var A=Ua(P.toString());null!==A&&(n.nodeContext.whitespace=A)}var O=u["hyphenate-character"];O&&O!==qe.auto&&(n.nodeContext.hyphenateCharacter=O.str),n.nodeContext.breakWord=u["word-break"]===qe.break_all||(u["overflow-wrap"]||["word-wrap"])===qe.break_word,n.resolveFormattingContext(n.nodeContext,t,p,c,f,g),n.nodeContext.parent&&n.nodeContext.parent.formattingContext&&(t=n.nodeContext.parent.formattingContext.isFirstTime(n.nodeContext,t)),n.nodeContext.inline||(n.nodeContext.repeatOnBreak=n.processRepeatOnBreak(u),n.findAndProcessRepeatingElements(o,a));var R=!1,k=null,L=[],F=o.namespaceURI,_=o.localName;if(F==G.XHTML)"html"==_||"body"==_||"script"==_||"link"==_||"meta"==_?_="div":"vide_"==_?_="video":"audi_"==_?_="audio":"object"==_&&(R=!!n.customRenderer),o.getAttribute("data-adapt-pseudo")&&s.content&&s.content.value&&s.content.value.url&&(_="img");else if(F==G.epub)_="span",F=G.XHTML;else if(F==G.FB2){if(F=G.XHTML,"image"==_){_="div";var D=o.getAttributeNS(G.XLINK,"href");if(D&&"#"==D.charAt(0)){var B=n.xmldoc.getElement(D);if(B){k=n.createElement(F,"img");var M="data:"+(B.getAttribute("content-type")||"image/jpeg")+";base64,"+B.textContent.replace(/[ \t\n\t]/g,"");L.push(Bi(k,M))}}}else _=lh[_];_||(_=n.nodeContext.inline?"span":"div")}else if(F==G.NCX)if(F=G.XHTML,"ncx"==_||"navPoint"==_)_="div";else if("navLabel"==_){_="span";var U=o.parentNode;if(U){for(var z=null,V=U.firstChild;V;V=V.nextSibling)if(1==V.nodeType&&V.namespaceURI==G.NCX&&"content"==V.localName){z=V.getAttribute("src");break}z&&(_="a",(o=o.ownerDocument.createElementNS(F,"a")).setAttribute("href",z))}}else _="span";else F==G.SHADOW?(F=G.XHTML,_=n.nodeContext.inline?"span":"div"):R=!!n.customRenderer;if(w)t?_="li":(_="div",u.display=p=qe.block);else if("body"==_||"li"==_)_="div";else if("q"==_)_="span";else if("a"==_){var H=u["hyperlink-processing"];H&&"normal"!=H.toString()&&(_="span")}u.behavior&&"none"!=u.behavior.toString()&&n.customRenderer&&(R=!0),o.dataset&&"true"===o.getAttribute("data-math-typeset")&&(R=!0),(R?n.customRenderer(o,n.nodeContext.parent?n.nodeContext.parent.viewNode:null,u):Ti(null)).then((function(a){var s;a?R&&(i="true"==a.getAttribute("data-adapt-process-children")):a=n.createElement(F,_),"a"==_&&a.addEventListener("click",n.page.hrefHandler,!1),k&&(n.applyPseudoelementStyle(n.nodeContext,"inner",k),a.appendChild(k)),"iframe"==a.localName&&a.namespaceURI==G.XHTML&&(s=a).addEventListener("load",(function(){s.contentWindow.navigator.epubReadingSystem={name:"adapt",version:"0.1",layoutStyle:"paginated",hasFeature:function(t,e){switch(t){case"mouse-events":return!0}return!1}}}),!1);var l=n.nodeContext.inheritedProps["image-resolution"],c=[],h=u.width,f=u.height,d=o.getAttribute("width"),p=o.getAttribute("height"),g=h===qe.auto||!h&&!d,m=f===qe.auto||!f&&!p;if(o.namespaceURI!=G.FB2||"td"==_){for(var v=o.attributes,b=v.length,y=null,E=0;E<b;E++){var S=v[E],N=S.namespaceURI,C=S.localName,T=S.nodeValue;if(N){if("http://www.w3.org/2000/xmlns/"==N)continue;N==G.XLINK&&"href"==C&&(T=n.resolveURL(T))}else{if(C.match(/^on/))continue;if("style"==C)continue;if(("id"==C||"name"==C)&&t){T=n.documentURLTransformer.transformFragment(encodeURIComponent(T),n.xmldoc.url),a.setAttribute(C,T),n.page.registerElementWithId(a,T);continue}if("src"==C||"href"==C||"poster"==C?(T=n.resolveURL(T),"href"===C&&(T=n.documentURLTransformer.transformURL(T,n.xmldoc.url))):"srcset"==C&&(T=T.split(",").map((function(t){return n.resolveURL(t.trim())})).join(",")),"poster"===C&&"video"===_&&F===G.XHTML&&g&&m){var x=new Image,I=Bi(x,T);L.push(I),c.push({image:x,element:a,fetcher:I})}}if(F==G.SVG&&/^[A-Z\-]+$/.test(C)&&(C=C.toLowerCase()),n.isSVGUrlAttribute(C)&&(T=th(T,n.xmldoc.url,n.documentURLTransformer)),N){var P=eh[N];P&&(C=P+":"+C)}"src"!=C||N||"img"!=_&&"input"!=_||F!=G.XHTML?"href"==C&&"image"==_&&F==G.SVG&&N==G.XLINK?n.page.fetchers.push(Bi(a,T)):N?a.setAttributeNS(N,C,T):a.setAttribute(C,T):y=T}if(y){var A="input"===_?new Image:a,O=Bi(A,y);A!==a&&(a.src=y),g||m?(g&&m&&l&&1!==l&&c.push({image:A,element:a,fetcher:O}),L.push(O)):n.page.fetchers.push(O)}}delete u.content;var D=u["list-style-image"];if(D&&D instanceof Ve){var B=D.url;L.push(Bi(new Image,B))}if(n.preprocessElementStyle(u),n.applyComputedStyles(a,u),!n.nodeContext.inline){var M=null;if(t?e&&(M=n.nodeContext.vertical?oh:rh):M="clone"!==n.nodeContext.inheritedProps["box-decoration-break"]?n.nodeContext.vertical?ih:nh:n.nodeContext.vertical?oh:rh,M)for(var U in M)tt(a,U,M[U])}w&&a.setAttribute("value",u["ua-list-item-count"].stringValue()),n.viewNode=a,L.length?Di(L).then((function(){l>0&&n.modifyElemDimensionWithImageResolution(c,l,u,n.nodeContext.vertical),r.finish(i)})):r.timeSlice().then((function(){r.finish(i)}))}))})),r.result()},i.processAfterIfcontinues=function(t,e,n,i){var r=this.getPseudoMap(e,this.regionIds,this.isFootnote,this.nodeContext,i);if(r&&r["after-if-continues"]&&r["after-if-continues"].content){var o=new el(t,e,n,i,this.exprContentListener);this.nodeContext.afterIfContinues=new il(t,o)}},i.isSVGUrlAttribute=function(t){return n.SVG_URL_ATTRIBUTES.includes(t.toLowerCase())},i.modifyElemDimensionWithImageResolution=function(t,e,n,i){var r=this;t.forEach((function(t){if("load"===t.fetcher.get().get()){var o=t.image,a=o.width/e,s=o.height/e,l=t.element;if(a>0&&s>0)if(n["box-sizing"]===qe.border_box&&(n["border-left-style"]!==qe.none&&(a+=Ke(n["border-left-width"],r.context)),n["border-right-style"]!==qe.none&&(a+=Ke(n["border-right-width"],r.context)),n["border-top-style"]!==qe.none&&(s+=Ke(n["border-top-width"],r.context)),n["border-bottom-style"]!==qe.none&&(s+=Ke(n["border-bottom-width"],r.context))),e>1){var u=n["max-width"]||qe.none,c=n["max-height"]||qe.none;if(u===qe.none&&c===qe.none)tt(l,"max-width",a+"px");else if(u!==qe.none&&c===qe.none)tt(l,"width",a+"px");else if(u===qe.none&&c!==qe.none)tt(l,"height",s+"px");else{u.isNumeric(),c.isNumeric();var h=c;"%"!==u.unit?tt(l,"max-width",Math.min(a,Ke(u,r.context))+"px"):"%"!==h.unit?tt(l,"max-height",Math.min(s,Ke(h,r.context))+"px"):i?tt(l,"height",s+"px"):tt(l,"width",a+"px")}}else if(e<1){var f=n["min-width"]||Je,d=n["min-height"]||Je;f.isNumeric(),f.isNumeric();var p=f,g=d;0===p.num&&0===g.num?tt(l,"min-width",a+"px"):0!==p.num&&0===g.num?tt(l,"width",a+"px"):0===p.num&&0!==g.num?tt(l,"height",s+"px"):"%"!==p.unit?tt(l,"min-width",Math.max(a,Ke(p,r.context))+"px"):"%"!==g.unit?tt(l,"min-height",Math.max(s,Ke(g,r.context))+"px"):i?tt(l,"height",s+"px"):tt(l,"width",a+"px")}}}))},i.preprocessElementStyle=function(t){var n=this;v(e.HOOKS.PREPROCESS_ELEMENT_STYLE).forEach((function(e){e(n.nodeContext,t)}))},i.findAndProcessRepeatingElements=function(t,e){for(var n=t.firstChild;n;n=n.nextSibling)if(1===n.nodeType){var i={},r=e.getStyle(n,!1);if(this.computeStyle(this.nodeContext.vertical,"rtl"===this.nodeContext.direction,r,i),this.processRepeatOnBreak(i)){if(this.nodeContext.formattingContext instanceof wl&&!this.nodeContext.belongsTo(this.nodeContext.formattingContext))return;var o=this.nodeContext.parent;return this.nodeContext.formattingContext=new wl(o&&o.formattingContext,this.nodeContext.sourceNode),void this.nodeContext.formattingContext.initializeRepetitiveElements(this.nodeContext.vertical)}}},i.processRepeatOnBreak=function(t){var e=t["repeat-on-break"];return e!==qe.none&&(e===qe.auto&&(e=t.display===qe.table_header_group?qe.header:t.display===qe.table_footer_group?qe.footer:qe.none),e&&e!==qe.none)?e.toString():null},i.createTextNodeView=function(){var t=this,e=Ci("createTextNodeView");return this.preprocessTextContent().then((function(){var n=t.offsetInNode||0,i=Oa(t.nodeContext.preprocessedTextContent).substr(n);t.viewNode=document.createTextNode(i),e.finish(!0)})),e.result()},i.preprocessTextContent=function(){if(null!=this.nodeContext.preprocessedTextContent)return Ti(!0);var t,n=this,i=t=n.sourceNode.textContent,r=Ci("preprocessTextContent"),o=v(e.HOOKS.PREPROCESS_TEXT_CONTENT),s=0;return r.loop((function(){return s>=o.length?Ti(!1):o[s++](n.nodeContext,i).thenAsync((function(t){return i=t,Ti(!0)}))})).then((function(){n.nodeContext.preprocessedTextContent=a(t,i,0),r.finish(!0)})),r.result()},i.createNodeView=function(t,e){var n,i=this,r=Ci("createNodeView"),o=!0;return 1==i.sourceNode.nodeType?n=i.createElementView(t,e):8==i.sourceNode.nodeType?(i.viewNode=null,n=Ti(!0)):n=i.createTextNodeView(),n.then((function(t){if(o=t,i.nodeContext.viewNode=i.viewNode,i.viewNode){var e=i.nodeContext.parent?i.nodeContext.parent.viewNode:i.viewRoot;e&&e.appendChild(i.viewNode)}r.finish(o)})),r.result()},i.setCurrent=function(t,e,n){return this.nodeContext=t,t?(this.sourceNode=t.sourceNode,this.offsetInNode=t.offsetInNode):(this.sourceNode=null,this.offsetInNode=-1),this.viewNode=null,this.nodeContext?this.createNodeView(e,!!n):Ti(!0)},i.processShadowContent=function(t){if(null==t.shadowContext||"content"!=t.sourceNode.localName||t.sourceNode.namespaceURI!=G.SHADOW)return t;var e,n,i,r=t.boxOffset,o=t.shadowContext,a=t.parent;o.subShadow?(i=o.subShadow,e=o.root,(n=o.type)==qa.ROOTLESS&&(e=e.firstChild)):(i=o.parentShadow,e=o.owner.firstChild,n=qa.ROOTLESS);var s=t.sourceNode.nextSibling;if(s?(t.sourceNode=s,t.resetView()):t.shadowSibling?t=t.shadowSibling:e?t=null:(t=t.parent.modify()).after=!0,e){var l=new Ja(e,a,r);return l.shadowContext=i,l.shadowType=n,l.shadowSibling=t,l}return t.boxOffset=r,t},i.nextPositionInTree=function(t){var e=t.boxOffset+1;if(t.after){if(!t.parent)return null;if(t.shadowType!=qa.ROOTED){var n=t.sourceNode.nextSibling;if(n)return(t=t.modify()).boxOffset=e,t.sourceNode=n,t.resetView(),this.processShadowContent(t)}return t.shadowSibling?((t=t.shadowSibling.modify()).boxOffset=e,t):((t=t.parent.modify()).boxOffset=e,t.after=!0,t)}if(t.nodeShadow){var i=t.nodeShadow.root;if(t.nodeShadow.type==qa.ROOTLESS&&(i=i.firstChild),i){var r=new Ja(i,t,e);return r.shadowContext=t.nodeShadow,r.shadowType=t.nodeShadow.type,this.processShadowContent(r)}}var o=t.sourceNode.firstChild;return o?this.processShadowContent(new Ja(o,t,e)):(1!=t.sourceNode.nodeType&&(e+=Oa(t.preprocessedTextContent).length-1-t.offsetInNode),(t=t.modify()).boxOffset=e,t.after=!0,t)},i.isTransclusion=function(t,e,n){var i=Kr(e,"hyperlink-processing");if(!i)return!1;var r=i.evaluate(this.context,"hyperlink-processing");return!!r&&r.toString()==n},i.nextInTree=function(t,e){var n=this,i=this.nextPositionInTree(t);if(!i||i.after)return Ti(i);var r=Ci("nextInTree");return this.setCurrent(i,!0,e).then((function(t){i.viewNode&&t||((i=i.modify()).after=!0,i.viewNode||(i.inline=!0)),n.dispatchEvent({type:"nextInTree",nodeContext:i}),r.finish(i)})),r.result()},i.addImageFetchers=function(t){if(t instanceof We)for(var e=t.values,n=0;n<e.length;n++)this.addImageFetchers(e[n]);else if(t instanceof Ve){var i=t.url;this.page.fetchers.push(Bi(new Image,i))}},i.applyComputedStyles=function(t,e){var n=e["background-image"];n&&this.addImageFetchers(n);var i=e.position===qe.relative;for(var r in e)if(!uh[r]){var o=e[r];(o=o.visit(new Rn(this.xmldoc.url,this.documentURLTransformer))).isNumeric()&&Ht(o.unit)&&(o=Ye(o,this.context)),ka[r]||i&&La[r]?this.page.delayedItems.push(new Fa(t,r,o)):tt(t,r,o.toString())}},i.applyPseudoelementStyle=function(t,e,n){if(!t.after){var i=(t.shadowContext?t.shadowContext.styler:this.styler).getStyle(this.sourceNode,!1),r=qr(i,"_pseudos");if(r&&(i=r[e])){var o={};t.vertical=this.computeStyle(t.vertical,"rtl"===t.direction,i,o);var a=o.content;as(a)&&(a.visit(new os(n,this.context,a,this.exprContentListener)),delete o.content),this.applyComputedStyles(n,o)}}},i.peelOff=function(t,e){var n=Ci("peelOff"),i=t.firstPseudo,r=t.offsetInNode,o=t.after;if(e>0)t.viewNode.textContent=t.viewNode.textContent.substr(0,e),r+=e;else if(!o&&t.viewNode&&0==r){var a=t.viewNode.parentNode;a&&a.removeChild(t.viewNode)}for(var s=t.boxOffset+e,l=[];t.firstPseudo===i;)l.push(t),t=t.parent;var u=l.pop(),c=u.shadowSibling,h=this;return n.loop((function(){for(;l.length>0;){u=l.pop(),t=new Ja(u.sourceNode,t,s),0==l.length&&(t.offsetInNode=r,t.after=o),t.shadowType=u.shadowType,t.shadowContext=u.shadowContext,t.nodeShadow=u.nodeShadow,t.shadowSibling=u.shadowSibling?u.shadowSibling:c,c=null;var e=h.setCurrent(t,!1);if(e.isPending())return e}return Ti(!1)})).then((function(){n.finish(t)})),n.result()},i.createElement=function(t,e){return t==G.XHTML?this.document.createElement(e):this.document.createElementNS(t,e)},i.applyFootnoteStyle=function(t,e,n){var i={},r=qr(this.footnoteStyle,"_pseudos");if(t=this.computeStyle(t,e,this.footnoteStyle,i),r&&r.before){var o={},a=this.createElement(G.XHTML,"span");tl(a,"before"),n.appendChild(a),this.computeStyle(t,e,r.before,o),delete o.content,this.applyComputedStyles(a,o)}return delete i.content,this.applyComputedStyles(n,i),t},i.processFragmentedBlockEdge=function(t){t&&t.walkUpBlocks((function(t){var e=t.inheritedProps["box-decoration-break"];if(!e||"slice"===e){var n=t.viewNode;t.vertical?(tt(n,"padding-left","0"),tt(n,"border-left","none"),tt(n,"border-top-left-radius","0"),tt(n,"border-bottom-left-radius","0")):(tt(n,"padding-bottom","0"),tt(n,"border-bottom","none"),tt(n,"border-bottom-left-radius","0"),tt(n,"border-bottom-right-radius","0"))}}))},i.convertLengthToPx=function(t,e,n){var i=t.num,r=t.unit;if(function(t){switch(t.toLowerCase()){case"em":case"ex":case"rem":return!0;default:return!1}}(r)){for(var o=e;o&&1!==o.nodeType;)o=o.parentNode;return io(t,parseFloat(n.getElementComputedStyle(o)["font-size"]),this.context).num}var a=this.context.queryUnitSize(r,!1);return a?i*a:t},i.isSameNodePositionStep=function(t,e){if(t.shadowContext){if(!e.shadowContext)return!1;var n=1===e.node.nodeType?e.node:e.node.parentElement;return t.shadowContext.owner===e.shadowContext.owner&&Js(1===t.node.nodeType?t.node:t.node.parentElement)===Js(n)}return t.node===e.node},i.isSameNodePosition=function(t,e){var n=this;return t.offsetInNode===e.offsetInNode&&t.after==e.after&&t.steps.length===e.steps.length&&t.steps.every((function(t,i){return n.isSameNodePositionStep(t,e.steps[i])}))},i.isPseudoelement=function(t){return!!Js(t)},n}(gt);ah.SVG_URL_ATTRIBUTES=["color-profile","clip-path","cursor","filter","marker","marker-start","marker-end","marker-mid","fill","stroke","mask"];var sh,lh={a:"a",sub:"sub",sup:"sup",table:"table",tr:"tr",td:"td",th:"th",code:"code",body:"div",p:"p",v:"p",date:"p",emphasis:"em",strong:"strong",style:"span",strikethrough:"del"},uh={"box-decoration-break":!0,"float-min-wrap-block":!0,"float-reference":!0,"flow-into":!0,"flow-linger":!0,"flow-options":!0,"flow-priority":!0,"footnote-policy":!0,page:!0},ch=function(){function t(t){this.layoutBox=t.layoutBox,this.window=t.window}var e=t.prototype;return e.subtractOffsets=function(t,e){var n=e.left,i=e.top;return{left:t.left-n,top:t.top-i,right:t.right-n,bottom:t.bottom-i,width:t.width,height:t.height}},e.getRangeClientRects=function(t){var e=this,n=t.getClientRects(),i=this.layoutBox.getBoundingClientRect();return Array.from(n).map((function(t){return e.subtractOffsets(t,i)}))},e.getElementClientRect=function(t){var e=t.getBoundingClientRect(),n=this.layoutBox.getBoundingClientRect();return this.subtractOffsets(e,n)},e.getElementComputedStyle=function(t){return this.window.getComputedStyle(t,null)},t}(),hh=function(){function t(t,e,n,i,r){this.window=t,this.fontSize=e,this.document=t.document,this.root=n||this.document.body;var o=this.root.firstElementChild;o||((o=this.document.createElement("div")).setAttribute("data-vivliostyle-outer-zoom-box","true"),this.root.appendChild(o));var a=o.firstElementChild;a||((a=this.document.createElement("div")).setAttribute("data-vivliostyle-spread-container","true"),o.appendChild(a));var s=o.nextElementSibling;s||((s=this.document.createElement("div")).setAttribute("data-vivliostyle-layout-box","true"),this.root.appendChild(s)),this.outerZoomBox=o,this.contentContainer=a,this.layoutBox=s;var l=new ch(this).getElementComputedStyle(this.root);this.width=i||parseFloat(l.width)||t.innerWidth,this.height=r||parseFloat(l.height)||t.innerHeight}var e=t.prototype;return e.resetZoom=function(){tt(this.outerZoomBox,"width",""),tt(this.outerZoomBox,"height",""),tt(this.contentContainer,"width",""),tt(this.contentContainer,"height",""),tt(this.contentContainer,"transform","")},e.zoom=function(t,e,n){tt(this.outerZoomBox,"width",t*n+"px"),tt(this.outerZoomBox,"height",e*n+"px"),tt(this.contentContainer,"width",t+"px"),tt(this.contentContainer,"height",e+"px"),tt(this.contentContainer,"transform","scale("+n+")")},e.clear=function(){for(var t=this.root;t.lastChild;)t.removeChild(t.lastChild)},t}(),fh=function(){function t(t,e,n){this.store=t,this.url=e,this.document=n,this.lang=null,this.totalOffset=-1,this.lastOffset=1,this.root=n.documentElement;var i=null,r=null;if(this.root.namespaceURI==G.XHTML){for(var o=this.root.firstChild;o;o=o.nextSibling)if(1==o.nodeType){var a=o;if(a.namespaceURI==G.XHTML)switch(a.localName){case"head":r=a;break;case"body":i=a}}this.lang=this.root.getAttribute("lang")}else if(this.root.namespaceURI==G.FB2){r=this.root;for(var s=this.root.firstChild;s;s=s.nextSibling)1==s.nodeType&&s.namespaceURI==G.FB2&&"body"==s.localName&&(i=s);var l=this.doc().child("FictionBook").child("description").child("title-info").child("lang").textContent();l.length>0&&(this.lang=l[0])}else if(this.root.namespaceURI==G.SSE)for(var u=this.root.firstElementChild;u;u=u.nextElementSibling){var c=u.localName;"meta"===c?r=u:"body"===c&&(i=u)}this.body=i,this.head=r,this.last=this.root,this.last.setAttribute("data-adapt-eloff","0")}var e=t.prototype;return e.doc=function(){return new mh([this.document])},e.getElementOffset=function(t){var e=t.getAttribute("data-adapt-eloff");if(e)return parseInt(e,10);for(var n=this.lastOffset,i=this.last;i!=t;){var r=i.firstChild;if(!r)for(;!(r=i.nextSibling);)if(null==(i=i.parentNode))throw new Error("Internal error");i=r,1==r.nodeType?(r.setAttribute("data-adapt-eloff",n.toString()),++n):n+=r.textContent.length}return this.lastOffset=n,this.last=t,n-1},e.getNodeOffset=function(t,e,n){var i=0,r=t,o=null;if(1==r.nodeType){if(!n)return this.getElementOffset(r)}else{if(i=e,!(o=r.previousSibling))return i+=1,this.getElementOffset(r=r.parentNode)+i;r=o}for(;;){for(;r.lastChild;)r=r.lastChild;if(1==r.nodeType)break;if(i+=r.textContent.length,!(o=r.previousSibling)){r=r.parentNode;break}r=o}return i+=1,this.getElementOffset(r)+i},e.getTotalOffset=function(){return this.totalOffset<0&&(this.totalOffset=this.getNodeOffset(this.root,0,!0)),this.totalOffset},e.getNodeByOffset=function(t){var e,n=this,i=this,r=this.root,o=function(){if((e=n.getElementOffset(r))>=t)return{v:r};var o=r.children;if(!o)return"break";var a=ht(o.length,(function(e){return i.getElementOffset(o[e])>t}));if(0==a)return"break";r=o[a-1]};t:for(;;){var a=o();switch(a){case"break":break t;default:if("object"==typeof a)return a.v}}for(var s=e+1,l=r,u=l.firstChild||l.nextSibling,c=null;;){if(u){if(1==u.nodeType)break;if(c=l=u,(s+=u.textContent.length)>t&&!/^\s*$/.test(u.textContent))break}else if(!(l=l.parentNode))break;u=l.nextSibling}return u&&c&&/^\s*$/.test(c.textContent)&&(c=u),c||r},e.buildIdMap=function(t){var e=t.getAttribute("id");e&&!this.idMap[e]&&(this.idMap[e]=t);var n=t.getAttributeNS(G.XML,"id");n&&!this.idMap[n]&&(this.idMap[n]=t);for(var i=t.firstElementChild;i;i=i.nextElementSibling)this.buildIdMap(i)},e.getElement=function(t){var e=t.match(/([^#]*)#(.+)$/);if(!e||e[1]&&e[1]!=this.url)return null;var n=e[2],i=this.document.getElementById(n);return!i&&this.document.getElementsByName&&(i=this.document.getElementsByName(n)[0]),i||(this.idMap||(this.idMap={},this.buildIdMap(this.document.documentElement)),i=this.idMap[n]),i},t}();function dh(t,e,n){var i,r=n||new DOMParser;try{i=r.parseFromString(t,e)}catch(t){}if(!i)return null;var o=i.documentElement;if("parsererror"===o.localName)return null;for(var a=o.firstElementChild;a;a=a.nextElementSibling)if("parsererror"===a.localName)return null;return i}function ph(t,e){var n=t.responseXML;if(!n){var i=new DOMParser,r=t.responseText;if(r){var o=function(t){var e=t.contentType;if(e){for(var n=Object.keys(sh),i=0;i<n.length;i++)if(sh[n[i]]===e)return e;if(e.match(/\+xml$/))return sh.APPLICATION_XML}var r=t.url.match(/\.([^./]+)$/);if(r)switch(r[1]){case"html":case"htm":return sh.TEXT_HTML;case"xhtml":case"xht":return sh.APPLICATION_XHTML_XML;case"svg":case"svgz":return sh.IMAGE_SVG_XML;case"opf":case"xml":return sh.APPLICATION_XML}return null}(t);if((n=dh(r,o||sh.APPLICATION_XML,i))&&!o){var a=n.documentElement;"html"!==a.localName.toLowerCase()||a.namespaceURI?"svg"===a.localName.toLowerCase()&&n.contentType!==sh.IMAGE_SVG_XML&&(n=dh(r,sh.IMAGE_SVG_XML,i)):n=dh(r,sh.TEXT_HTML,i)}n||(n=dh(r,sh.TEXT_HTML,i))}}return Ti(n?new fh(e,t.url,n):null)}!function(t){t.TEXT_HTML="text/html",t.TEXT_XML="text/xml",t.APPLICATION_XML="application/xml",t.APPLICATION_XHTML_XML="application/xhtml+xml",t.IMAGE_SVG_XML="image/svg+xml"}(sh||(sh={}));var gh=new(function(){function t(t){this.fn=t}var e=t.prototype;return e.check=function(t){return this.fn(t)},e.withAttribute=function(e,n){var i=this;return new t((function(t){return i.check(t)&&1==t.nodeType&&t.getAttribute(e)==n}))},e.withChild=function(e,n){var i=this;return new t((function(t){if(!i.check(t))return!1;var r=new mh([t]);return r=r.child(e),n&&(r=r.predicate(n)),r.size()>0}))},t}())((function(t){return!0})),mh=function(){function t(t){this.nodes=t}var e=t.prototype;return e.asArray=function(){return this.nodes},e.size=function(){return this.nodes.length},e.predicate=function(e){for(var n,i=[],r=B(this.nodes);!(n=r()).done;){var o=n.value;e.check(o)&&i.push(o)}return new t(i)},e.forEachNode=function(e){for(var n=[],i=function(t){n.push(t)},r=0;r<this.nodes.length;r++)e(this.nodes[r],i);return new t(n)},e.forEach=function(t){for(var e=[],n=0;n<this.nodes.length;n++)e.push(t(this.nodes[n]));return e},e.forEachNonNull=function(t){for(var e=[],n=0;n<this.nodes.length;n++){var i=t(this.nodes[n]);null!=i&&e.push(i)}return e},e.child=function(t){return this.forEachNode((function(e,n){for(var i=e.firstChild;i;i=i.nextSibling)1==i.nodeType&&i.localName==t&&n(i)}))},e.childElements=function(){return this.forEachNode((function(t,e){for(var n=t.firstChild;n;n=n.nextSibling)1==n.nodeType&&e(n)}))},e.attribute=function(t){return this.forEachNonNull((function(e){return 1==e.nodeType?e.getAttribute(t):null}))},e.textContent=function(){return this.forEach((function(t){return t.textContent}))},t}(),vh=new _i((function(){var t=Ci("uaStylesheetBase"),e=Du(),n=j("user-agent-base.css",W),i=new na(null,null,null,null,null,e,!0);return i.startStylesheet(Ki.USER_AGENT),ea=i.cascade,yr(Wi,i,n,null,null).thenFinish(t),t.result()}),"uaStylesheetBaseFetcher"),bh=function(){function t(t,e,n,i,r,o,a,s,l,u){this.store=t,this.rootScope=e,this.pageScope=n,this.cascade=i,this.rootBox=r,this.fontFaces=o,this.footnoteProps=a,this.flowProps=s,this.viewportProps=l,this.pageProps=u,this.fontDeobfuscator=t.fontDeobfuscator,this.validatorSet=t.validatorSet,this.pageScope.defineBuiltIn("has-content",(function(t){var e=this.currentLayoutPosition,n=e.firstFlowChunkOfFlow(t=t);return this.matchPageSide(e.startSideOfFlow(t))&&e.hasContent(t,this.lookupOffset)&&!!n&&!this.flowChunkIsAfterParentFlowForcedBreak(n)})),this.pageScope.defineName("page-number",new ve(this.pageScope,(function(){return this.pageNumberOffset+this.currentLayoutPosition.page}),"page-number"))}return t.prototype.sizeViewport=function(t,e,n,i){if(this.viewportProps.length){var r=new Gt(this.rootScope,t,e,n),o=function(t,e){for(var n={},i=0;i<e.length;i++)to(t,n,e[i],0,null,null,null);return n}(r,this.viewportProps),a=o.width,s=o.height,l=o["text-zoom"],u=1;if(a&&s||l){var c=Vt.em;if((l?l.evaluate(r,"text-zoom"):null)===qe.scale&&(u=c/n,n=c,t*=u,e*=u),a&&s){var h=Ke(a.evaluate(r,"width"),r),f=Ke(s.evaluate(r,"height"),r);if(h>0&&f>0)return{width:i&&i.spreadView?2*(h+i.pageBorder):h,height:f,fontSize:n}}}}return{width:t,height:e,fontSize:n}},t}(),yh=function(t){function n(e,n,i,r,o,a,s,l,u,c,h,f){var d;for(var p in(d=t.call(this,e.rootScope,r.width,r.height,r.fontSize)||this).style=e,d.xmldoc=n,d.viewport=r,d.clientLayout=o,d.fontMapper=a,d.customRenderer=s,d.fallbackMap=l,d.pageNumberOffset=u,d.documentURLTransformer=c,d.counterStore=h,d.primaryFlows={body:!0},d.rootPageBoxInstance=null,d.styler=null,d.stylerMap=null,d.currentLayoutPosition=null,d.layoutPositionAtPageStart=null,d.lookupOffset=0,d.pageBoxInstances={},d.pageManager=null,d.pageBreaks={},d.pageProgression=null,d.pageSheetSize={},d.pageSheetHeight=0,d.pageSheetWidth=0,d.lang=n.lang||i,d.faces=new Hu(d.style.fontDeobfuscator),d.rootPageFloatLayoutContext=new ds(null,null,null,null,null,null,null),d.pageProgression=f||null,e.flowProps){var g=Kr(e.flowProps[p],"flow-consume");g&&(g.evaluate(_(d),"flow-consume")==qe.all?d.primaryFlows[p]=!0:delete d.primaryFlows[p])}return d}A(n,t);var i=n.prototype;return i.init=function(){var t=this,e=Ci("StyleInstance.init"),n=this.counterStore.createCounterListener(this.xmldoc.url),i=this.counterStore.createCounterResolver(this.xmldoc.url,this.style.rootScope,this.style.pageScope);this.styler=new pu(this.xmldoc,this.style.cascade,this.style.rootScope,this,this.primaryFlows,this.style.validatorSet,n,i),i.setStyler(this.styler),this.styler.resetFlowChunkStream(this),this.stylerMap={},this.stylerMap[this.xmldoc.url]=this.styler;var r=this.styler.getTopContainerStyle();this.pageProgression||(this.pageProgression=vc(r)),this.rootPageBoxInstance=new uc(this.style.rootBox);var o=this.style.cascade.createInstance(this,n,i,this.lang);this.rootPageBoxInstance.applyCascadeAndInit(o,r),this.rootPageBoxInstance.resolveAutoSizing(this),this.pageManager=new Wc(o,this.style.pageScope,this.rootPageBoxInstance,this,r);for(var a,s=[],l=B(this.style.fontFaces);!(a=l()).done;){var u=a.value;if(!u.condition||u.condition.evaluate(this)){var c=zu(u.properties,this),h=new Vu(c);s.push(h)}}this.fontMapper.findOrLoadFonts(s,this.faces).thenFinish(e);var f=this.style.pageProps;return Object.keys(f).forEach((function(e){var n=xc(Tc(f[e]),t);t.pageSheetSize[e]={width:n.pageWidth+2*n.cropOffset,height:n.pageHeight+2*n.cropOffset}})),e.result()},i.getStylerForDoc=function(t){var e=this.stylerMap[t.url];if(!e){var n=this.style.store.getStyleForDoc(t),i=new Gt(n.rootScope,this.pageWidth(),this.pageHeight(),this.initialFontSize),r=this.counterStore.createCounterListener(t.url),o=this.counterStore.createCounterResolver(t.url,n.rootScope,n.pageScope);e=new pu(t,n.cascade,n.rootScope,i,this.primaryFlows,n.validatorSet,r,o),this.stylerMap[t.url]=e}return e},i.registerInstance=function(t,e){this.pageBoxInstances[t]=e},i.lookupInstance=function(t){return this.pageBoxInstances[t]},i.encounteredFlowChunk=function(t,e){var n=this.currentLayoutPosition;if(n){n.flows[t.flowName]?e=n.flows[t.flowName]:n.flows[t.flowName]=e;var i=n.flowPositions[t.flowName];i||(i=new ns,n.flowPositions[t.flowName]=i);var r=new ts({steps:[{node:t.element,shadowType:qa.NONE,shadowContext:null,nodeShadow:null,shadowSibling:null,formattingContext:null,fragmentIndex:0}],offsetInNode:0,after:!1,preprocessedTextContent:null}),o=new es(r,t);i.positions.push(o)}},i.getConsumedOffset=function(t){for(var e=Number.POSITIVE_INFINITY,n=0;n<t.positions.length;n++){for(var i=t.positions[n].chunkPosition.primary,r=i.steps[0].node,o=i.offsetInNode,a=i.after,s=0;r.ownerDocument!=this.xmldoc.document;)s++,r=i.steps[s].node,a=!1,o=0;var l=this.xmldoc.getNodeOffset(r,o,a);l<e&&(e=l)}return e},i.getPosition=function(t,e){if(!t)return 0;var n=Number.POSITIVE_INFINITY;for(var i in this.primaryFlows){var r=t.flowPositions[i];if(e||r&&0!=r.positions.length||!this.currentLayoutPosition||(this.styler.styleUntilFlowIsReached(i),r=this.currentLayoutPosition.flowPositions[i],t!=this.currentLayoutPosition&&r&&(r=r.clone(),t.flowPositions[i]=r)),r){var o=this.getConsumedOffset(r);o<n&&(n=o)}}return n},i.dumpLocation=function(t){for(var e in f.debug("Location - page",this.currentLayoutPosition.page),f.debug("  current:",t),f.debug("  lookup:",this.lookupOffset),this.currentLayoutPosition.flowPositions)for(var n,i=B(this.currentLayoutPosition.flowPositions[e].positions);!(n=i()).done;)f.debug("  Chunk",e+":",n.value.flowChunk.startOffset)},i.matchPageSide=function(t){switch(t){case"left":case"right":case"recto":case"verso":return new ge(this.style.pageScope,t+"-page").evaluate(this);default:return!0}},i.updateStartSide=function(t){for(var e in t.flowPositions){var n=t.flowPositions[e];if(n&&n.positions.length>0){var i=n.positions[0].flowChunk;if(this.getConsumedOffset(n)===i.startOffset){var r=n.positions[0].flowChunk.breakBefore,o=xs(n.startSide);n.startSide=Ts(Cs(o,r))}}}},i.selectPageMaster=function(t){var e=this.currentLayoutPosition,n=this.getPosition(e);if(n==Number.POSITIVE_INFINITY)return null;for(var i,r=this.rootPageBoxInstance.children,o=0;o<r.length;o++)if("vivliostyle-page-rule-master"!==(i=r[o]).pageBox.pseudoName){var a=1,s=i.getProp(this,"utilization");s&&s.isNum()&&(a=s.num);var l=this.queryUnitSize("em",!1),u=this.pageWidth()*this.pageHeight(),c=Math.ceil(a*u/(l*l));this.lookupOffset=this.styler.styleUntil(n,c),this.updateStartSide(e),this.layoutPositionAtPageStart=e.clone(),this.initLingering(),this.clearScope(this.style.pageScope);var h=i.getProp(this,"enabled");if(!h||h===qe._true)return this.pageManager.getPageRulePageMaster(i,t)}throw new Error("No enabled page masters")},i.flowChunkIsAfterParentFlowForcedBreak=function(t){var e=this.layoutPositionAtPageStart.flows,n=e[t.flowName].parentFlowName;if(n){var i=t.startOffset,r=e[n].forcedBreakOffsets;if(!r.length||i<r[0])return!1;var o=ht(r.length,(function(t){return r[t]>i}))-1,a=r[o],s=this.layoutPositionAtPageStart.flowPositions[n],l=this.getConsumedOffset(s);return!(a<l)&&(l<a||!this.matchPageSide(s.startSide))}return!1},i.setFormattingContextToColumn=function(t,e){var n=this.currentLayoutPosition.flows[e];n.formattingContext||(n.formattingContext=new Gs(null)),t.flowRootFormattingContext=n.formattingContext},i.layoutDeferredPageFloats=function(t){var e=t.pageFloatLayoutContext,n=e.getDeferredPageFloatContinuations(),i=Ci("layoutDeferredPageFloats"),r=!1,o=0;return i.loopWithFrame((function(i){if(o!==n.length){var a=n[o++],s=a.float,l=(new gs).findByFloat(s),u=l.findPageFloatFragment(s,e);if(!u||!u.hasFloat(s))return e.isForbidden(s)||e.hasPrecedingFloatsDeferredToNext(s)?(e.deferPageFloat(a),void i.breakLoop()):void t.layoutPageFloatInner(a,l,null,u).then((function(t){if(t){var n=e.parent.isInvalidated();n?i.breakLoop():(e.isInvalidated()&&!n&&(r=!0,e.validate()),i.continueLoop())}else i.breakLoop()}));i.continueLoop()}else i.breakLoop()})).then((function(){r&&e.invalidate(),i.finish(!0)})),i.result()},i.getLastAfterPositionIfDeferredFloatsExists=function(t,e){var n;return t.pageFloatLayoutContext.getPageFloatContinuationsDeferredToNext().length>0&&t.lastAfterPosition?(e?(n=e.clone()).primary=t.lastAfterPosition:n=new ts(t.lastAfterPosition),n):null},i.layoutColumn=function(t,e){var n=this.currentLayoutPosition.flowPositions[e];if(!n||!this.matchPageSide(n.startSide))return Ti(!0);n.startSide="any",this.setFormattingContextToColumn(t,e),t.init(),this.primaryFlows[e]&&t.bands.length>0&&(t.forceNonfitting=!1);var i=this,r=Ci("layoutColumn");return this.layoutDeferredPageFloats(t).then((function(){if(t.pageFloatLayoutContext.isInvalidated())r.finish(!0);else{var o=[],a=[],s=!0;r.loopWithFrame((function(r){if(t.pageFloatLayoutContext.hasContinuingFloatFragmentsInFlow(e))r.breakLoop();else{var l=function(){for(var e=0;a.includes(e);)e++;var l=n.positions[e];if(l.flowChunk.startOffset>i.lookupOffset||i.flowChunkIsAfterParentFlowForcedBreak(l.flowChunk))return"break";for(var u=e+1;u<n.positions.length;u++)if(!a.includes(u)){var c=n.positions[u];if(c.flowChunk.startOffset>i.lookupOffset||i.flowChunkIsAfterParentFlowForcedBreak(c.flowChunk))break;c.flowChunk.isBetter(l.flowChunk)&&(l=c,e=u)}var h=l.flowChunk,f=!0;return t.layout(l.chunkPosition,s,n.breakAfter).then((function(u){if(t.pageFloatLayoutContext.isInvalidated())r.breakLoop();else{if(s=!1,l.flowChunk.repeated&&(null===u||h.exclusive)&&o.push(e),h.exclusive)return a.push(e),void r.breakLoop();var c=!!u||!!t.pageBreakType,d=i.getLastAfterPositionIfDeferredFloatsExists(t,u);t.pageBreakType&&d?(l.chunkPosition=d,n.breakAfter=t.pageBreakType,t.pageBreakType=null):(a.push(e),(u||d)&&(l.chunkPosition=u||d,o.push(e)),t.pageBreakType&&(n.startSide=Ts(t.pageBreakType))),c?r.breakLoop():(t.forceNonfitting=!1,f?f=!1:r.continueLoop())}})),f?(f=!1,{v:void 0}):void 0};t:for(;n.positions.length-a.length>0;){var u=l();switch(u){case"break":break t;default:if("object"==typeof u)return u.v}}r.breakLoop()}})).then((function(){if(!t.pageFloatLayoutContext.isInvalidated()){n.positions=n.positions.filter((function(t,e){return o.includes(e)||!a.includes(e)})),"column"===n.breakAfter&&(n.breakAfter=null),t.saveDistanceToBlockEndFloats();var e=t.pageFloatLayoutContext.getMaxReachedAfterEdge();t.updateMaxReachedAfterEdge(e)}r.finish(!0)}))}})),r.result()},i.createLayoutConstraint=function(t){var e=this.counterStore.createLayoutConstraint(this.currentLayoutPosition.page-1);return new ul([e].concat(t.getLayoutConstraints()))},i.createAndLayoutColumn=function(t,e,n,i,r,o,a,s,l,u,c,h,f,d){var p,g=this,m=t.vertical?t.isAutoWidth&&t.isRightDependentOnAutoWidth:t.isAutoHeight&&t.isTopDependentOnAutoHeight,v=r.element,b=new ds(s,ss.COLUMN,null,a,null,null,null),y=g.currentLayoutPosition.clone(),w=Ci("createAndLayoutColumn");return w.loopWithFrame((function(t){var w=g.createLayoutConstraint(b);if(l>1){var E=g.viewport.document.createElement("div");if(tt(E,"position","absolute"),v.appendChild(E),(p=new fl(E,f,g.clientLayout,w,b)).forceNonfitting=d,p.vertical=r.vertical,p.snapHeight=r.snapHeight,p.snapWidth=r.snapWidth,r.vertical){var S=o*(c+u)+r.paddingTop;p.setHorizontalPosition(r.paddingLeft,r.width),p.setVerticalPosition(S,c)}else{var N=o*(c+u)+r.paddingLeft;p.setVerticalPosition(r.paddingTop,r.height),p.setHorizontalPosition(N,c)}p.originX=e,p.originY=n}else(p=new fl(v,f,g.clientLayout,w,b)).copyFrom(r);p.exclusions=m?[]:i.concat(),p.innerShape=h,b.setContainer(p),p.width>=0?g.layoutColumn(p,a).then((function(){b.isInvalidated()||b.finish(),p.pageFloatLayoutContext.isInvalidated()&&!s.isInvalidated()?(p.pageFloatLayoutContext.validate(),g.currentLayoutPosition=y.clone(),p.element!==v&&v.removeChild(p.element),t.continueLoop()):t.breakLoop()})):(b.finish(),t.breakLoop())})).then((function(){w.finish(p)})),w.result()},i.setPagePageFloatLayoutContextContainer=function(t,e,n){(e instanceof Hc||e instanceof cc&&!(e instanceof Mc))&&t.setContainer(n)},i.getRegionPageFloatLayoutContext=function(t,e,n,i){var r=e.getProp(this,"writing-mode")||null,o=e.getProp(this,"direction")||null;return new ds(t,ss.REGION,n,i,null,r,o)},i.layoutFlowColumnsWithBalancing=function(t,e,n,i,r,o,a,s,l){var u=this,c=u.currentLayoutPosition.clone(),h=u.getRegionPageFloatLayoutContext(o,e,a,s),f=!0;function d(){return u.currentLayoutPosition=c.clone(),u.layoutFlowColumns(t,e,n,i,r,o,h,a,s,l,f).thenAsync((function(t){return Ti(t?{columns:t,position:u.currentLayoutPosition}:null)}))}return d().thenAsync((function(t){if(!t)return Ti(null);if(l<=1)return Ti(t.columns);var n=e.getProp(u,"column-fill")||qe.balance,i=function(t,e,n,i,r,o,a){if(e===qe.auto)return null;var s=o[o.length-1];return 0===a.positions.length||s&&s.pageBreakType?new au(n,i,r,t):e===qe.balance_all?new uu(n,i,r):null}(l,n,d,h,a,t.columns,u.currentLayoutPosition.flowPositions[s]);return i?(f=!1,o.lock(),h.lock(),i.balanceColumns(t).thenAsync((function(t){return o.unlock(),o.validate(),h.unlock(),u.currentLayoutPosition=t.position,Ti(t.columns)}))):Ti(t.columns)}))},i.layoutFlowColumns=function(t,e,n,i,r,o,a,s,l,u,c){var h=this,f=Ci("layoutFlowColumns"),d=h.currentLayoutPosition.clone(),p=e.getPropAsNumber(h,"column-gap"),g=u>1?e.getPropAsNumber(h,"column-width"):s.width,m=e.getActiveRegions(h),v=Pn(e.getProp(h,"shape-inside"),0,0,s.width,s.height,h),b=new ah(l,h,h.viewport,h.styler,m,h.xmldoc,h.faces,h.style.footnoteProps,h,t,h.customRenderer,h.fallbackMap,this.documentURLTransformer),y=0,w=null,E=[];return f.loopWithFrame((function(t){h.createAndLayoutColumn(e,n,i,r,s,y++,l,a,u,p,g,v,b,c).then((function(e){return o.isInvalidated()?(E=null,void t.breakLoop()):(!(e.pageBreakType&&"column"!==e.pageBreakType)&&y!==u||a.isInvalidated()||a.finish(),a.isInvalidated()?(y=0,h.currentLayoutPosition=d.clone(),a.validate(),void(a.isLocked()?(E=null,t.breakLoop()):t.continueLoop())):(E[y-1]=w=e,w.pageBreakType&&"column"!=w.pageBreakType&&(y=u,"region"!=w.pageBreakType&&(h.pageBreaks[l]=!0)),void(y<u?t.continueLoop():t.breakLoop())))}))})).then((function(){f.finish(E)})),f.result()},i.layoutContainer=function(t,e,n,i,r,o,a){var s=this;e.reset();var l=e.getProp(s,"enabled");if(l&&l!==qe._true)return Ti(!0);var u=Ci("layoutContainer"),c=e.getProp(s,"wrap-flow")===qe.auto,h=e.getProp(s,"flow-from"),f=s.viewport.document.createElement("div"),d=e.getProp(s,"position");tt(f,"position",d?d.name:"absolute"),n.insertBefore(f,n.firstChild);var p,g=new rs(f);g.vertical=e.vertical,g.exclusions=o,e.prepareContainer(s,g,t,s.faces,s.clientLayout),g.originX=i,g.originY=r,i+=g.left+g.marginLeft+g.borderLeft,r+=g.top+g.marginTop+g.borderTop,this.setPagePageFloatLayoutContextContainer(a,e,g);var m=!1;if(h&&h.isIdent())if(s.pageBreaks[h.toString()])a.isInvalidated()||e.finishContainer(s,g,t,null,1,s.clientLayout,s.faces),p=Ti(!0);else{var v=Ci("layoutContainer.inner"),b=h.toString(),y=e.getPropAsNumber(s,"column-count");s.layoutFlowColumnsWithBalancing(t,e,i,r,o,a,g,b,y).then((function(n){if(!a.isInvalidated()){var i=n[0];i.element===f&&(g=i),g.computedBlockSize=Math.max.apply(null,n.map((function(t){return t.computedBlockSize}))),e.finishContainer(s,g,t,i,y,s.clientLayout,s.faces);var r=s.currentLayoutPosition.flowPositions[b];r&&"region"===r.breakAfter&&(r.breakAfter=null)}v.finish(!0)})),p=v.result()}else{var w=e.getProp(s,"content");if(w&&as(w)){var E="span";w.url&&(E="img");var S=s.viewport.document.createElement(E);w.visit(new os(S,s,w,s.counterStore.getExprContentListener())),f.appendChild(S),"img"==E&&e.transferSinglUriContentProps(s,S,s.faces),e.transferContentProps(s,g,t,s.faces)}else e.suppressEmptyBoxGeneration&&(n.removeChild(f),m=!0);m||e.finishContainer(s,g,t,null,1,s.clientLayout,s.faces),p=Ti(!0)}return p.then((function(){if(a.isInvalidated())u.finish(!0);else{if(!e.isAutoHeight||Math.floor(g.computedBlockSize)>0){if(!m&&!c){var l=e.getProp(s,"shape-outside"),h=g.getOuterShape(l,s);o.push(h)}}else if(0==e.children.length)return n.removeChild(f),void u.finish(!0);var d=e.children.length-1;u.loop((function(){for(;d>=0;){var n=e.children[d--],l=s.layoutContainer(t,n,f,i,r,o,a);if(l.isPending())return l.thenAsync((function(){return Ti(!a.isInvalidated())}));if(a.isInvalidated())break}return Ti(!1)})).then((function(){u.finish(!0)}))}})),u.result()},i.processLinger=function(){var t=this.currentLayoutPosition.page;for(var e in this.currentLayoutPosition.flowPositions)for(var n=this.currentLayoutPosition.flowPositions[e],i=n.positions.length-1;i>=0;i--){var r=n.positions[i];r.flowChunk.startPage>=0&&r.flowChunk.startPage+r.flowChunk.linger-1<=t&&n.positions.splice(i,1)}},i.initLingering=function(){var t=this.currentLayoutPosition.page;for(var e in this.currentLayoutPosition.flowPositions)for(var n=this.currentLayoutPosition.flowPositions[e],i=n.positions.length-1;i>=0;i--){var r=n.positions[i];r.flowChunk.startPage<0&&r.flowChunk.startOffset<this.lookupOffset&&(r.flowChunk.startPage=t)}},i.noMorePrimaryFlows=function(t){for(var e in this.primaryFlows){var n=t.flowPositions[e];if(n&&n.positions.length>0)return!1}return!0},i.layoutNextPage=function(t,n){var i=this,r=t.container===t.bleedBox;i.pageBreaks={},n?(i.currentLayoutPosition=n.clone(),i.styler.replayFlowElementsFromOffset(n.highestSeenOffset)):(i.currentLayoutPosition=new is,i.styler.replayFlowElementsFromOffset(-1)),this.lang&&t.bleedBox.setAttribute("lang",this.lang),(n=i.currentLayoutPosition).page++,i.clearScope(i.style.pageScope),i.layoutPositionAtPageStart=n.clone();var o=r?{}:i.pageManager.getCascadedPageStyle(),a=i.selectPageMaster(o);if(!a)return Ti(null);var s=0;if(!r){t.setAutoPageWidth(a.pageBox.specified.width.value===Ze),t.setAutoPageHeight(a.pageBox.specified.height.value===Qe),i.counterStore.setCurrentPage(t),i.counterStore.updatePageCounters(o,i);var l=xc(Tc(o),this);i.setPageSizeAndBleed(l,t),function(t,e,n,i){var r=!1,o=!1,a=t.marks;if(a){var s=a.value;s.isSpaceList()?s.values.forEach((function(t){t===qe.crop?r=!0:t===qe.cross&&(o=!0)})):s===qe.crop?r=!0:s===qe.cross&&(o=!0)}if(r||o){var l=n.container,u=l.ownerDocument,c=e.bleed,h=Ke(Ec,i),f=Ke(Sc,i),d=Ke(Nc,i);if(c){var p=t["background-color"];p&&p.value&&(n.bleedBox.style.backgroundColor=p.value.stringValue())}r&&Object.keys(bc).forEach((function(t){var e=function(t,e,n,i,r,o){var a=i;a<=r+2*Vt.mm&&(a=r+i/2);var s=Math.max(i,a),l=r+s+n/2,u=Ic(t,l,l),c=[[0,r+i],[i,r+i],[i,r+i-a]],h=c.map((function(t){return[t[1],t[0]]}));e!==bc.TOP_RIGHT&&e!==bc.BOTTOM_RIGHT||(c=c.map((function(t){return[r+s-t[0],t[1]]})),h=h.map((function(t){return[r+s-t[0],t[1]]}))),e!==bc.BOTTOM_LEFT&&e!==bc.BOTTOM_RIGHT||(c=c.map((function(t){return[t[0],r+s-t[1]]})),h=h.map((function(t){return[t[0],r+s-t[1]]})));var f=Pc(t,n);f.setAttribute("points",c.map((function(t){return t.join(",")})).join(" ")),u.appendChild(f);var d=Pc(t,n);return d.setAttribute("points",h.map((function(t){return t.join(",")})).join(" ")),u.appendChild(d),e.split(" ").forEach((function(t){u.style[t]=o+"px"})),u}(u,bc[t],h,d,c,f);l.appendChild(e)})),o&&Object.keys(yc).forEach((function(t){var e=function(t,e,n,i,r){var o,a,s=2*i;e===yc.TOP||e===yc.BOTTOM?(o=s,a=i):(o=i,a=s);var l=Ic(t,o,a),u=Pc(t,n);u.setAttribute("points","0,"+a/2+" "+o+","+a/2),l.appendChild(u);var c=Pc(t,n);c.setAttribute("points",o/2+",0 "+o/2+","+a),l.appendChild(c);var h,f=Pc(t,n,"circle");switch(f.setAttribute("cx",o/2),f.setAttribute("cy",a/2),f.setAttribute("r",i/4),l.appendChild(f),e){case yc.TOP:h=yc.BOTTOM;break;case yc.BOTTOM:h=yc.TOP;break;case yc.LEFT:h=yc.RIGHT;break;case yc.RIGHT:h=yc.LEFT}return Object.keys(yc).forEach((function(t){var n=yc[t];n===e?l.style[n]=r+"px":n!==h&&(l.style[n]="0",l.style["margin-"+n]="auto")})),l}(u,yc[t],h,d,f);l.appendChild(e)}))}}(o,l,t,this),s=l.bleedOffset+l.bleed}var u=!r&&a.getProp(i,"writing-mode")||qe.horizontal_tb;this.pageVertical=u!=qe.horizontal_tb;var c=a.getProp(i,"direction")||qe.ltr,h=new ds(i.rootPageFloatLayoutContext,ss.PAGE,null,null,null,u,c),f=Ci("layoutNextPage");return f.loopWithFrame((function(e){i.layoutContainer(t,a,t.bleedBox,s,s,[],h).then((function(){h.isInvalidated()||h.finish(),h.isInvalidated()?(i.currentLayoutPosition=i.layoutPositionAtPageStart.clone(),h.validate(),e.continueLoop()):e.breakLoop()}))})).then((function(){if(a.adjustPageLayout(i,t,i.clientLayout),!r){var o=new ge(a.pageBox.scope,"left-page");t.side=o.evaluate(i)?e.PageSide.LEFT:e.PageSide.RIGHT,i.processLinger(),n=i.currentLayoutPosition,Object.keys(n.flowPositions).forEach((function(t){var e=n.flowPositions[t],r=e.breakAfter;!r||"page"!==r&&i.matchPageSide(r)||(e.breakAfter=null)}))}i.currentLayoutPosition=i.layoutPositionAtPageStart=null,n.highestSeenOffset=i.styler.getReachedOffset();var s=i.style.store.getTriggersForDoc(i.xmldoc);t.finish(s,i.clientLayout),i.noMorePrimaryFlows(n)&&(n=null),f.finish(n)})),f.result()},i.setPageSizeAndBleed=function(t,e){this.actualPageWidth=t.pageWidth,this.actualPageHeight=t.pageHeight,this.pageSheetWidth=t.pageWidth+2*t.cropOffset,this.pageSheetHeight=t.pageHeight+2*t.cropOffset,e.container.style.width=this.pageSheetWidth+"px",e.container.style.height=this.pageSheetHeight+"px",e.bleedBox.style.left=t.bleedOffset+"px",e.bleedBox.style.right=t.bleedOffset+"px",e.bleedBox.style.top=t.bleedOffset+"px",e.bleedBox.style.bottom=t.bleedOffset+"px",e.bleedBox.style.padding=t.bleed+"px",e.bleedBox.style.paddingTop=t.bleed+.01+"px"},n}(Gt),wh=function(t){function e(e,n,i,r){var o;return(o=t.call(this,e.rootScope,e,n,i,r,e.validatorSet,!i)||this).masterHandler=e,o.insideRegion=!1,o}A(e,t);var n=e.prototype;return n.startPageTemplateRule=function(){},n.startPageMasterRule=function(t,e,n){var i=new Yu(this.masterHandler.pageScope,t,e,n,this.masterHandler.rootBox,this.condition,this.owner.getBaseSpecificity());this.masterHandler.pushHandler(new mc(i.scope,this.masterHandler,i,this.validatorSet))},n.startWhenRule=function(t){var n=t.expr;null!=this.condition&&(n=Ne(this.scope,this.condition,n)),this.masterHandler.pushHandler(new e(this.masterHandler,n,this,this.regionId))},n.startDefineRule=function(){this.masterHandler.pushHandler(new aa(this.scope,this.owner))},n.startFontFaceRule=function(){var t={};this.masterHandler.fontFaces.push({properties:t,condition:this.condition}),this.masterHandler.pushHandler(new sa(this.scope,this.owner,null,t,this.masterHandler.validatorSet))},n.startFlowRule=function(t){var e=this.masterHandler.flowProps[t];e||(this.masterHandler.flowProps[t]=e={}),this.masterHandler.pushHandler(new sa(this.scope,this.owner,null,e,this.masterHandler.validatorSet))},n.startViewportRule=function(){var t={};this.masterHandler.viewportProps.push(t),this.masterHandler.pushHandler(new sa(this.scope,this.owner,this.condition,t,this.masterHandler.validatorSet))},n.startFootnoteRule=function(t){var e=this.masterHandler.footnoteProps;if(t){var n=$r(e,"_pseudos");(e=n[t])||(n[t]=e={})}this.masterHandler.pushHandler(new sa(this.scope,this.owner,null,e,this.masterHandler.validatorSet))},n.startRegionRule=function(){this.insideRegion=!0,this.startSelectorRule()},n.startPageRule=function(){var t=new Qc(this.masterHandler.pageScope,this.masterHandler,this,this.validatorSet,this.masterHandler.pageProps);this.masterHandler.pushHandler(t),t.startPageRule()},n.startRuleBody=function(){if(na.prototype.startRuleBody.call(this),this.insideRegion){this.insideRegion=!1;var t="R"+this.masterHandler.regionCount++;this.special("region-id",De(t)),this.endRule();var n=new e(this.masterHandler,this.condition,this,t);this.masterHandler.pushHandler(n),n.startRuleBody()}},e}(na);function Eh(t){var e=t.getAttribute("content");if(!e)return"";for(var n,i={};null!=(n=e.match(/^,?\s*([-A-Za-z_.][-A-Za-z_0-9.]*)\s*=\s*([-+A-Za-z_0-9.]*)\s*/));)e=e.substr(n[0].length),i[n[1]]=n[2];var r=i.width-0,o=i.height-0;return r&&o?"@-epubx-viewport{width:"+r+"px;height:"+o+"px;}":""}var Sh=function(t){function e(e){var n;return(n=t.call(this)||this).validatorSet=e,n.regionCount=0,n.fontFaces=[],n.footnoteProps={},n.flowProps={},n.viewportProps=[],n.pageProps={},n.rootScope=new Ut(null),n.pageScope=new Ut(n.rootScope),n.rootBox=new ju(n.rootScope),n.cascadeParserHandler=new wh(_(n),null,null,null),n.slave=n.cascadeParserHandler,n}return A(e,t),e.prototype.error=function(t,e){f.warn("CSS parser:",t)},e}(Ji);function Nh(t,e){return e.parseOPSResource(t)}var Ch=function(t){function n(e){var n;return(n=t.call(this,Nh,Mi.DOCUMENT)||this).fontDeobfuscator=e,n.styleByKey={},n.styleFetcherByKey={},n.styleByDocURL={},n.triggersByDocURL={},n.validatorSet=null,n.styleSheets=[],n.triggerSingleDocumentPreprocessing=!1,n}A(n,t);var i=n.prototype;return i.init=function(t,e){var n=this;this.setStyleSheets(t,e);var i=j("user-agent.xml",W),r=Ci("OPSDocStore.init");return this.validatorSet=Du(),vh.get().then((function(){n.load(i).then((function(){n.triggerSingleDocumentPreprocessing=!0,r.finish(!0)}))})),r.result()},i.getStyleForDoc=function(t){return this.styleByDocURL[t.url]},i.getTriggersForDoc=function(t){return this.triggersByDocURL[t.url]},i.setStyleSheets=function(t,e){this.clearStyleSheets(),t&&t.forEach(this.addAuthorStyleSheet,this),e&&e.forEach(this.addUserStyleSheet,this)},i.clearStyleSheets=function(){this.styleSheets.splice(0)},i.addAuthorStyleSheet=function(t){var e=t.url;e&&(e=j(K(e),V)),this.styleSheets.push({url:e,text:t.text,flavor:Ki.AUTHOR,classes:null,media:null})},i.addUserStyleSheet=function(t){var e=t.url;e&&(e=j(K(e),V)),this.styleSheets.push({url:e,text:t.text,flavor:Ki.USER,classes:null,media:null})},i.parseOPSResource=function(t){var n=Ci("OPSDocStore.load"),i=this,r=t.url,o=r.endsWith("?viv-toc-box");return ph(t,i).then((function(t){if(t){if(i.triggerSingleDocumentPreprocessing)for(var a=v(e.HOOKS.PREPROCESS_SINGLE_DOCUMENT),s=0;s<a.length;s++)try{a[s](t.document)}catch(t){f.warn("Error during single document preprocessing:",t)}for(var l=[],u=t.document.getElementsByTagNameNS(G.epub,"trigger"),c=0;c<u.length;c++){var h=u[c],d=h.getAttributeNS(G.EV,"observer"),p=h.getAttributeNS(G.EV,"event"),g=h.getAttribute("action"),m=h.getAttribute("ref");d&&p&&g&&m&&l.push({observer:d,event:p,action:g,ref:m})}i.triggersByDocURL[r]=l;var b=[],y=j("user-agent-page.css",W);b.push({url:y,text:Gi,flavor:Ki.USER_AGENT,classes:null,media:null});var w=t.head;if(!o&&w)for(var E=w.firstChild;E;E=E.nextSibling)if(1==E.nodeType){var S=E,N=S.namespaceURI,C=S.localName;if(N==G.XHTML)if("style"==C){var T=S.getAttribute("class"),x=S.getAttribute("media"),I=S.getAttribute("title");b.push({url:r,text:S.textContent,flavor:Ki.AUTHOR,classes:I?T:null,media:x})}else if("link"==C){var P=S.getAttribute("rel"),A=S.getAttribute("class"),O=S.getAttribute("media");if("stylesheet"==P||"alternate stylesheet"==P&&A){var R=S.getAttribute("href");R=j(R,r);var k=S.getAttribute("title");b.push({url:R,text:null,classes:k?A:null,media:O,flavor:Ki.AUTHOR})}}else"meta"==C&&"viewport"==S.getAttribute("name")&&b.push({url:r,text:Eh(S),flavor:Ki.AUTHOR,classes:null,media:null});else if(N==G.FB2)"stylesheet"==C&&"text/css"==S.getAttribute("type")&&b.push({url:r,text:S.textContent,flavor:Ki.AUTHOR,classes:null,media:null});else if(N==G.SSE&&"property"===C){var L=S.getElementsByTagName("name")[0];if(L&&"stylesheet"===L.textContent){var F=S.getElementsByTagName("value")[0];if(F){var _=j(F.textContent,r);b.push({url:_,text:null,classes:null,media:null,flavor:Ki.AUTHOR})}}}}if(!o)for(var D=0;D<i.styleSheets.length;D++)b.push(i.styleSheets[D]);for(var B="",M=0;M<b.length;M++)B+=b[M].url,B+="^",b[M].text&&(B+=b[M].text),B+="^";var U=i.styleByKey[B];if(U)return i.styleByDocURL[r]=U,void n.finish(t);var z=i.styleFetcherByKey[B];z||(z=new _i((function(){var t=Ci("fetchStylesheet"),e=0,n=new Sh(i.validatorSet);return t.loop((function(){if(e<b.length){var t=b[e++];return n.startStylesheet(t.flavor),null!==t.text?yr(t.text,n,t.url,t.classes,t.media).thenReturn(!0):wr(t.url,n,t.classes,t.media)}return Ti(!1)})).then((function(){var e=n.cascadeParserHandler.finish();U=new bh(i,n.rootScope,n.pageScope,e,n.rootBox,n.fontFaces,n.footnoteProps,n.flowProps,n.viewportProps,n.pageProps),i.styleByKey[B]=U,delete i.styleFetcherByKey[B],t.finish(U)})),t.result()}),"FetchStylesheet "+r),i.styleFetcherByKey[B]=z,z.start()),z.get().then((function(e){i.styleByDocURL[r]=e,n.finish(t)}))}else n.finish(null)})),n.result()},n}(Yi);function Th(t){return String.fromCharCode(t>>>24&255,t>>>16&255,t>>>8&255,255&t)}function xh(t){return(255&t.charCodeAt(0))<<24|(255&t.charCodeAt(1))<<16|(255&t.charCodeAt(2))<<8|255&t.charCodeAt(3)}function Ih(t){var e=new it;e.append(t);var n=55-t.length&63;for(e.append("");n>0;)n--,e.append("\0");e.append("\0\0\0\0"),e.append(Th(8*t.length)),t=e.toString();for(var i,r=[1732584193,4023233417,2562383102,271733878,3285377520],o=[],a=0;a<t.length;a+=64){for(i=0;i<16;i++)o[i]=xh(t.substr(a+4*i,4));for(;i<80;i++){var s=o[i-3]^o[i-8]^o[i-14]^o[i-16];o[i]=s<<1|s>>>31}var l=r[0],u=r[1],c=r[2],h=r[3],f=r[4],d=void 0;for(i=0;i<80;i++)d=i<20?1518500249+(u&c|~u&h):i<40?1859775393+(u^c^h):i<60?2400959708+(u&c|u&h|c&h):3395469782+(u^c^h),d+=(l<<5|l>>>27)+f+o[i],f=h,h=c,c=u<<30|u>>>2,u=l,l=d;r[0]=r[0]+l|0,r[1]=r[1]+u|0,r[2]=r[2]+c|0,r[3]=r[3]+h|0,r[4]=r[4]+f|0}return r}var Ph=function(){function t(t,e,n,i,r,o,a,s,l,u){this.store=t,this.url=e,this.lang=n,this.clientLayout=i,this.fontMapper=r,this.rendererFactory=a,this.fallbackMap=s,this.documentURLTransformer=l,this.counterStore=u,this.page=null,this.instance=null,this.pref=Rt(o),this.pref.spreadView=!1}var e=t.prototype;return e.setAutoHeight=function(t,e){if(0!=e--)for(var n=t.firstChild;n;n=n.nextSibling)if(1==n.nodeType){var i=n;"auto"!=et(i,"height","auto")&&(tt(i,"height","auto"),this.setAutoHeight(i,e)),"absolute"==et(i,"position","static")&&(tt(i,"position","relative"),this.setAutoHeight(i,e))}},e.makeCustomRenderer=function(t){var e=this.rendererFactory.makeCustomRenderer(t);return function(t,n,i){var r=i.behavior;if(r)switch(r.toString()){case"body-child":t.parentElement.getAttribute("data-vivliostyle-primary-entry")&&(t.querySelector("[role=doc-toc], [role=directory], nav li a, .toc, #toc")||(i.display=qe.none));break;case"toc-node-anchor":i.color=qe.inherit,i["text-decoration"]=qe.none;break;case"toc-node":i.display=qe.block,i.margin=Je,i.padding=Je,i["padding-inline-start"]=new Be(1.25,"em");break;case"toc-node-first-child":i.display=qe.inline_block,i.margin=new Be(.2,"em"),i["vertical-align"]=qe.top,i.color=qe.inherit,i["text-decoration"]=qe.none}if(!r||"toc-node"!=r.toString()&&"toc-container"!=r.toString())return e(t,n,i);var o=t.firstChild;o&&1!==o.nodeType&&""===o.textContent.trim()&&t.replaceChild(t.ownerDocument.createComment(o.textContent),o);var a=n.getAttribute("data-adapt-class");if("toc-node"==a){var s=n.firstChild;"▸"!=s.textContent&&(s.textContent="▸",tt(s,"cursor","pointer"),s.addEventListener("click",Ah,!1),s.setAttribute("role","button"),s.setAttribute("aria-expanded","false"),n.setAttribute("aria-expanded","false"),"0px"!==n.style.height&&(s.tabIndex=0))}var l=n.ownerDocument.createElement("div");if(l.setAttribute("data-adapt-process-children","true"),"toc-node"==r.toString()){var u=n.ownerDocument.createElement("div");if(u.textContent="▹",tt(u,"margin","0.2em 0 0 -1em"),tt(u,"margin-inline-start","-1em"),tt(u,"margin-inline-end","0"),tt(u,"display","inline-block"),tt(u,"width","1em"),tt(u,"text-align","center"),tt(u,"vertical-align","top"),tt(u,"cursor","default"),tt(u,"font-family","Menlo,sans-serif"),l.appendChild(u),tt(l,"overflow","hidden"),l.setAttribute("data-adapt-class","toc-node"),l.setAttribute("role","treeitem"),"toc-node"==a||"toc-container"==a){tt(l,"height","0px");var c=t.firstElementChild;c&&"a"===c.localName&&(c.tabIndex=-1)}else n.setAttribute("role","tree")}else"toc-node"==a&&(l.setAttribute("data-adapt-class","toc-container"),l.setAttribute("role","group"),l.setAttribute("aria-hidden","true"));return Ti(l)}},e.showTOC=function(t,e,n,i,r){var o=this;if(this.page)return Ti(this.page);var a=this,s=Ci("showTOC"),l=new Ba(t,t);return this.page=l,this.store.load(this.url+"?viv-toc-box").then((function(i){var u=o.store.resources[o.url];u&&u.body&&u.body.getAttribute("data-vivliostyle-primary-entry")&&i.body.setAttribute("data-vivliostyle-primary-entry",!0);var c=a.store.getStyleForDoc(i),h=c.sizeViewport(n,1e5,r);e=new hh(e.window,h.fontSize,e.root,h.width,h.height);var f=a.makeCustomRenderer(i),d=new yh(c,i,a.lang,e,a.clientLayout,a.fontMapper,f,a.fallbackMap,0,a.documentURLTransformer,a.counterStore);a.instance=d,d.pref=a.pref,d.init().then((function(){d.layoutNextPage(l,null).then((function(){Array.from(l.container.querySelectorAll("[data-vivliostyle-toc-box]>*>*>*>*>*[style*='display: none']")).forEach((function(t){t.setAttribute("aria-hidden","true"),t.setAttribute("hidden","hidden")})),a.setAutoHeight(t,2),s.finish(l)}))}))})),s.result()},e.hideTOC=function(){this.page&&(this.page.container.style.visibility="hidden",this.page.container.setAttribute("aria-hidden","true"))},e.isTOCVisible=function(){return!!this.page&&"visible"===this.page.container.style.visibility},e.getTOC=function(){if(!this.page)return[];function t(t){if(!t)return[];var n=t.querySelectorAll(":scope > [role=treeitem] > a[href]");return Array.from(n).map(e)}function e(e){return{id:new URL(e.href).hash.match(/^#(.*)$/)[1],title:e.innerText,children:t(e.parentElement.querySelector("[role=group]"))}}return t(this.page.container.querySelector("[role=tree]"))},t}();function Ah(t){var e=t.target,n="▸"==e.textContent;e.textContent=n?"▾":"▸";var i=e.parentNode;e.setAttribute("aria-expanded",n?"true":"false"),i.setAttribute("aria-expanded",n?"true":"false");for(var r=i.firstChild;r;){if(1===r.nodeType){var o=r,a=o.getAttribute("data-adapt-class");if("toc-container"===a){if(o.setAttribute("aria-hidden",n?"false":"true"),o.firstChild){r=o.firstChild;continue}}else if("toc-node"===a&&(o.style.height=n?"auto":"0px",o.children.length>=2&&(o.children[1].tabIndex=n?0:-1),o.children.length>=3&&(o.children[0].tabIndex=n?0:-1,!n))){var s=o.children[0];if("▾"==s.textContent){s.textContent="▸",s.setAttribute("aria-expanded","false"),o.setAttribute("aria-expanded","false"),r=o.children[2];continue}}}for(;!r.nextSibling&&r.parentNode!==i;)r=r.parentNode;r=r.nextSibling}t.stopPropagation()}var Oh=function(t){function e(){var e;return(e=t.call(this,null)||this).opfByURL={},e.primaryOPFByEPubURL={},e.deobfuscators={},e.documents={},e.fontDeobfuscator=e.makeDeobfuscatorFactory(),e.plainXMLStore=new Yi(ph,Mi.DOCUMENT),e.jsonStore=new Yi(qi,Mi.TEXT),e}A(e,t);var n=e.prototype;return n.makeDeobfuscatorFactory=function(){var t=this;return function(e){return t.deobfuscators[e]}},n.loadAsPlainXML=function(t,e,n){return this.plainXMLStore.load(t,e,n)},n.startLoadingAsPlainXML=function(t){this.plainXMLStore.fetch(t)},n.loadAsJSON=function(t,e,n){return this.jsonStore.load(t,e,n)},n.startLoadingAsJSON=function(t){this.jsonStore.fetch(t)},n.loadPubDoc=function(t,e){var n=this,i=Ci("loadPubDoc");return Xi(t,null,"HEAD").then((function(r){if(r.status>=400)n.loadEPUBDoc(t,e).then((function(e){e?i.finish(e):(f.error("Failed to fetch a source document from "+t+" ("+r.status+(r.statusText?" "+r.statusText:"")+")"),i.finish(null))}));else if(r.status||r.responseXML||r.responseText||r.responseBlob||r.contentType||/\/[^/.]+(?:[#?]|$)/.test(t)&&(t=t.replace(/([#?]|$)/,"/$1")),"application/oebps-package+xml"==r.contentType||/\.opf(?:[#?]|$)/.test(t)){var o=t.match(/^((?:.*\/)?)([^/]*)$/);n.loadOPF(o[1],o[2],e).thenFinish(i)}else"application/ld+json"==r.contentType||"application/webpub+json"==r.contentType||"application/audiobook+json"==r.contentType||"application/json"==r.contentType||/\.json(?:ld)?(?:[#?]|$)/.test(t)?n.loadAsJSON(t,!0).then((function(e){if(!e)return f.error("Received an empty response for "+t+". This may be caused by the server not allowing cross-origin resource sharing (CORS)."),void i.finish(null);var r=new zh(n,t);r.initWithWebPubManifest(e).then((function(){i.finish(r)}))})):n.loadWebPub(t).then((function(r){r?i.finish(r):n.loadEPUBDoc(t,e).then((function(e){e?i.finish(e):(f.error("Failed to load "+t+"."),i.finish(null))}))}))})),i.result()},n.loadEPUBDoc=function(t,e){var n=this,i=Ci("loadEPUBDoc");return t.endsWith("/")||(t+="/"),e&&this.startLoadingAsJSON(t+"?r=list"),this.startLoadingAsPlainXML(t+"META-INF/encryption.xml"),this.loadAsPlainXML(t+"META-INF/container.xml").then((function(r){if(r){for(var o,a=B(r.doc().child("container").child("rootfiles").child("rootfile").attribute("full-path"));!(o=a()).done;){var s=o.value;if(s)return void n.loadOPF(t,s,e).thenFinish(i)}i.finish(null)}})),i.result()},n.loadOPF=function(t,e,n){var i=this,r=t+e,o=i.opfByURL[r];if(o)return Ti(o);var a=Ci("loadOPF");return i.loadAsPlainXML(r,!0,"Failed to fetch EPUB OPF "+r).then((function(e){e?i.loadAsPlainXML(t+"META-INF/encryption.xml").then((function(s){(n?i.loadAsJSON(t+"?r=list"):Ti(null)).then((function(n){(o=new zh(i,t)).initWithXMLDoc(e,s,n,t+"?r=manifest").then((function(){i.opfByURL[r]=o,i.primaryOPFByEPubURL[t]=o,a.finish(o)}))}))})):f.error("Received an empty response for EPUB OPF "+r+". This may be caused by the server not allowing cross-origin resource sharing (CORS).")})),a.result()},n.loadWebPub=function(t){var e=this,n=Ci("loadWebPub");return this.load(t).then((function(i){if(i)if(i.document.querySelector("a[href='META-INF/'],a[href$='/META-INF/']"))n.finish(null);else{var r=i.document,o=new zh(e,t);r.body&&r.body.setAttribute("data-vivliostyle-primary-entry",!0);var a=r.querySelector("link[rel='publication'],link[rel='manifest'][type='application/webpub+json']");if(a){var s=a.getAttribute("href");if(/^#/.test(s)){var l=U(r.getElementById(s.substr(1)).textContent);o.initWithWebPubManifest(l,r).then((function(){n.finish(o)}))}else e.loadAsJSON(j(a.getAttribute("href"),t)).then((function(t){o.initWithWebPubManifest(t,r).then((function(){n.finish(o)}))}))}else o.initWithWebPubManifest({},r).then((function(){o.xhtmlToc&&o.xhtmlToc.src===i.url&&(r.querySelector("[role=doc-toc], [role=directory], nav, .toc, #toc")||(o.xhtmlToc=null)),n.finish(o)}))}else f.error("Received an empty response for "+t+". This may be caused by the server not allowing cross-origin resource sharing (CORS).")})),n.result()},n.addDocument=function(t,e){var n=Ci("EPUBDocStore.load"),i=z(t);return(this.documents[i]=this.parseOPSResource({status:200,statusText:"",url:i,contentType:e.contentType,responseText:null,responseXML:e,responseBlob:null})).thenFinish(n),n.result()},n.load=function(e){var n=z(e),i=this.documents[n];if(i)return i.isPending()?i:Ti(i.get());var r=Ci("EPUBDocStore.load");return(i=t.prototype.load.call(this,n,!0,"Failed to fetch a source document from "+n)).then((function(t){t?r.finish(t):n.startsWith("data:")?f.error("Failed to load "+n+". Invalid data."):n.startsWith("http:")&&V.startsWith("https:")?f.error("Failed to load "+n+'. Mixed Content ("http:" content on "https:" context) is not allowed.'):f.error("Received an empty response for "+n+". This may be caused by the server not allowing cross-origin resource sharing (CORS).")})),r.result()},e}(Ch),Rh=function(){function t(){this.id=null,this.src="",this.mediaType=null,this.title=null,this.itemRefElement=null,this.spineIndex=-1,this.compressedSize=0,this.compressed=null,this.epage=0,this.epageCount=0,this.startPage=null,this.skipPagesBefore=null,this.itemProperties=M}var e=t.prototype;return e.initWithElement=function(t,e){this.id=t.getAttribute("id"),this.src=j(t.getAttribute("href"),e),this.mediaType=t.getAttribute("media-type");var n=t.getAttribute("properties");n&&(this.itemProperties=function(t){for(var e={},n=0;n<t.length;n++)e[t[n]]=!0;return e}(n.split(/\s+/)))},e.initWithParam=function(t){this.spineIndex=t.index,this.id="item"+(t.index+1),this.src=t.url,this.startPage=t.startPage,this.skipPagesBefore=t.skipPagesBefore},t}();function kh(t){return t.id}var Lh={dcterms:"http://purl.org/dc/terms/",marc:"http://id.loc.gov/vocabulary/",media:"http://www.idpf.org/epub/vocab/overlays/#",rendition:"http://www.idpf.org/vocab/rendition/#",onix:"http://www.editeur.org/ONIX/book/codelists/current.html#",xsd:"http://www.w3.org/2001/XMLSchema#",opf:"http://www.idpf.org/2007/opf"},Fh="http://idpf.org/epub/vocab/package/meta/#",_h={language:Lh.dcterms+"language",title:Lh.dcterms+"title",creator:Lh.dcterms+"creator",layout:Lh.rendition+"layout",titleType:Fh+"title-type",displaySeq:Fh+"display-seq",alternateScript:Fh+"alternate-script",role:Fh+"role"};function Dh(t,e){var n={};return function(i,r){var o,a,s,l,u,c=i.r||n,h=r.r||n;if(t==_h.title&&(s="main"==(null==(l=c[_h.titleType])?void 0:l[0].v))!=("main"==(null==(u=h[_h.titleType])?void 0:u[0].v)))return s?-1:1;var f=parseInt(null==(o=c[_h.displaySeq])?void 0:o[0].v,10);isNaN(f)&&(f=Number.MAX_VALUE);var d,p,g=parseInt(null==(a=h[_h.displaySeq])?void 0:a[0].v,10);return isNaN(g)&&(g=Number.MAX_VALUE),f!=g?f-g:t!=_h.language&&e&&(s=(null==(d=c[_h.language]||c[_h.alternateScript])?void 0:d[0].v)==e)!=((null==(p=h[_h.language]||h[_h.alternateScript])?void 0:p[0].v)==e)?s?-1:1:i.o-r.o}}function Bh(){var t=window.MathJax;return t?t.Hub:null}var Mh,Uh={"application/xhtml+xml":!0,"image/jpeg":!0,"image/png":!0,"image/svg+xml":!0,"image/gif":!0,"audio/mp3":!0},zh=function(){function t(t,e){this.store=t,this.pubURL=e,this.opfXML=null,this.encXML=null,this.items=null,this.spine=null,this.itemMap=null,this.itemMapByPath=null,this.uid=null,this.bindings={},this.lang=null,this.epageCount=0,this.prePaginated=!1,this.epageIsRenderedPage=!0,this.epageCountCallback=null,this.metadata={},this.ncxToc=null,this.xhtmlToc=null,this.cover=null,this.fallbackMap={},this.pageProgression=null,this.documentURLTransformer=this.createDocumentURLTransformer(),Bh()&&(Rr[G.MATHML]=!0)}var e=t.prototype;return e.createDocumentURLTransformer=function(){var t=this;return new(function(){function e(){}var n=e.prototype;return n.transformFragment=function(t,e){return"viv-id-"+ut(decodeURI(e+(t?"#"+t:"")),":")},n.transformURL=function(e,n){var i=e.match(/^([^#]*)#?(.*)$/);if(i){var r=i[1]||n,o=i[2];if(r&&t.items.some((function(t){return t.src===r})))return"#"+this.transformFragment(o,r)}return e},n.restoreURL=function(t){"#"===t.charAt(0)&&(t=t.substring(1)),0===t.indexOf("viv-id-")&&(t=t.substring("viv-id-".length));var e=function(t,e){e="string"==typeof e?e:"\\u";var n=new RegExp(ct(e)+"[0-9a-fA-F]{4}","g");return t.replace(n,(function(t){return function(t,e){return 0===t.indexOf(e="string"==typeof e?e:"\\u")?String.fromCharCode(parseInt(t.substring(e.length),16)):t}(t,e)}))}(t,":").match(/^([^#]*)#?(.*)$/);return e?[e[1],e[2]]:[]},e}())},e.getMetadata=function(){return this.metadata},e.getPathFromURL=function(t){if(t.startsWith("data:"))return t===this.pubURL?"":t;if(this.pubURL){var e=j("",this.pubURL);return t===e||t+"/"===e?"":("/"!=e.charAt(e.length-1)&&(e+="/"),t.substr(0,e.length)==e?decodeURI(t.substr(e.length)):null)}return t},e.initWithXMLDoc=function(t,e,n,i){var r=this;this.opfXML=t,this.encXML=e;var o=t.doc().child("package"),a=o.attribute("unique-identifier")[0];if(a){var s=t.getElement(t.url+"#"+a);s&&(this.uid=s.textContent.replace(/[ \n\r\t]/g,""))}var u={};for(var c in this.items=o.child("manifest").child("item").asArray().map((function(e){var n=new Rh,i=e;n.initWithElement(i,t.url);var o=i.getAttribute("fallback");return o&&!Uh[n.mediaType]&&(u[n.src]=o),!r.xhtmlToc&&n.itemProperties.nav&&(r.xhtmlToc=n),!r.cover&&n.itemProperties["cover-image"]&&(r.cover=n),n})),this.itemMap=dt(this.items,kh),this.itemMapByPath=dt(this.items,(function(t){return r.getPathFromURL(t.src)})),u)for(var h=c;;){var f=this.itemMap[u[h]];if(!f)break;if(Uh[f.mediaType]){this.fallbackMap[c]=f.src;break}h=f.src}this.spine=o.child("spine").child("itemref").asArray().map((function(t,e){var n=t,i=n.getAttribute("idref"),o=r.itemMap[i];return o&&(o.itemRefElement=n,o.spineIndex=e),o}));var d=o.child("spine").attribute("toc")[0];d&&(this.ncxToc=this.itemMap[d]);var p=o.child("spine").attribute("page-progression-direction")[0];p&&(this.pageProgression=l(p));for(var g=e?e.doc().child("encryption").child("EncryptedData").predicate(gh.withChild("EncryptionMethod",gh.withAttribute("Algorithm","http://www.idpf.org/2008/embedding"))).child("CipherData").child("CipherReference").attribute("URI"):[],m=o.child("bindings").child("mediaType").asArray(),v=0;v<m.length;v++){var b=m[v].getAttribute("handler"),y=m[v].getAttribute("media-type");y&&b&&this.itemMap[b]&&(this.bindings[y]=this.itemMap[b].src)}if(this.metadata=function(t,e){var n;if(e){for(var i in n={},Lh)n[i]=Lh[i];for(var r;null!=(r=e.match(/^\s*([A-Z_a-z\u007F-\uFFFF][-.A-Z_a-z0-9\u007F-\uFFFF]*):\s*(\S+)/));)e=e.substr(r[0].length),n[r[1]]=r[2]}else n=Lh;var o=function(t){if(t){var e=t.match(/^\s*(([^:]*):)?(\S+)\s*$/);if(e){var i=e[2]?n[e[2]]:Fh;if(i)return i+e[3]}}return null},a=1,s=t.childElements().forEachNonNull((function(t){if("meta"==t.localName){var e=o(t.getAttribute("property"));if(e)return{name:e,value:t.textContent,id:t.getAttribute("id"),order:a++,refines:t.getAttribute("refines"),lang:null,scheme:o(t.getAttribute("scheme")),role:null}}else if(t.namespaceURI==G.DC)return{name:Lh.dcterms+t.localName,order:a++,lang:t.getAttribute("xml:lang"),value:t.textContent,id:t.getAttribute("id"),refines:null,scheme:null,role:t.getAttribute("role")||t.getAttribute("opf:role")};return null})),l=pt(s,(function(t){return t.refines})),u=function t(e){return function(e,n){var i={};for(var r in e)i[r]=e[r].map((function(e){var n={v:e.value,o:e.order};e.scheme&&(n.s=e.scheme);var i=l["#"+e.id]||[];if(i.length||e.lang||e.role){e.lang&&i.push({name:_h.language,value:e.lang,lang:null,id:null,refines:e.id,scheme:null,order:e.order,role:null}),e.role&&i.push({name:_h.role,value:e.role,lang:null,id:null,refines:e.id,scheme:null,order:e.order,role:null});var r=pt(i,(function(t){return t.name}));n.r=t(r)}return n}));return i}(e)}(pt(s,(function(t){return t.refines?null:t.name}))),c=null;return u[_h.language]&&(c=u[_h.language][0].v),function t(e){for(var n in e){var i=e[n];i.sort(Dh(n,c));for(var r=0;r<i.length;r++){var o=i[r].r;o&&t(o)}}}(u),u}(o.child("metadata"),o.attribute("prefix")[0]),this.metadata[_h.language]&&(this.lang=this.metadata[_h.language][0].v),this.metadata[_h.layout]&&(this.prePaginated="pre-paginated"===this.metadata[_h.layout][0].v),!n){if(g.length>0&&this.uid)for(var w=function(t){var e=function(t){for(var e,n=[],i=B(Ih(t));!(e=i()).done;){var r=e.value;n.push(r>>>24&255,r>>>16&255,r>>>8&255,255&r)}return n}(t);return function(t){var n,i,r=Ci("deobfuscator");return t.slice?(n=t.slice(0,1040),i=t.slice(1040,t.size)):(n=t.webkitSlice(0,1040),i=t.webkitSlice(1040,t.size-1040)),function(t){var e=Ci("readBlob"),n=new FileReader,i=e.suspend(n);return n.addEventListener("load",(function(){i.schedule(n.result)}),!1),n.readAsArrayBuffer(t),e.result()}(n).then((function(t){for(var n=new DataView(t),o=0;o<n.byteLength;o++){var a=n.getUint8(o);n.setUint8(o,a^=e[o%20])}r.finish(ji([n,i]))})),r.result()}}(this.uid),E=0;E<g.length;E++)this.store.deobfuscators[this.pubURL+g[E]]=w;return this.prePaginated&&this.assignAutoPages(),Ti(!0)}var S=new it,N={};if(g.length>0&&this.uid)for(var C="1040:"+function(t){for(var e=function(t){for(var e=Ih(t),n=new it,i=0;i<e.length;i++)n.append(Th(e[i]));return n.toString()}(t),n=new it,i=0;i<e.length;i++)n.append((256|e.charCodeAt(i)).toString(16).substr(1));return n.toString()}(this.uid),T=0;T<g.length;T++)N[g[T]]=C;for(var x=0;x<n.length;x++){var I=n[x],P=I.n;if(P){var A=decodeURI(P),O=this.itemMapByPath[A],R=null;O&&(O.compressed=0!=I.m,O.compressedSize=I.c,O.mediaType&&(R=O.mediaType.replace(/\s+/g,"")));var k=N[A];(R||k)&&(S.append(P),S.append(" "),S.append(R||"application/octet-stream"),k&&(S.append(" "),S.append(k)),S.append("\n"))}}return r.assignAutoPages(),Xi(i,Mi.DEFAULT,"POST",S.toString(),"text/plain")},e.assignAutoPages=function(){for(var t,e=0,n=B(this.spine);!(t=n()).done;){var i=t.value,r=this.prePaginated?1:Math.ceil(i.compressedSize/1024);i.epage=e,i.epageCount=r,e+=r}this.epageCount=e,this.epageCountCallback&&this.epageCountCallback(this.epageCount)},e.setEPageCountMode=function(t){this.epageIsRenderedPage=t||this.prePaginated},e.countEPages=function(t){var e=this;if(this.epageCountCallback=t,this.epageIsRenderedPage)return this.prePaginated&&0==this.epageCount&&this.assignAutoPages(),Ti(!0);var n=0,i=0,r=Ci("countEPages");return r.loopWithFrame((function(t){if(i!==e.spine.length){var r=e.spine[i++];r.epage=n,e.store.load(r.src).then((function(i){var o=1800,a=i.lang||e.lang;a&&a.match(/^(ja|ko|zh)/)&&(o/=3),r.epageCount=Math.ceil(i.getTotalOffset()/o),e.epageCount=n+=r.epageCount,e.epageCountCallback&&e.epageCountCallback(e.epageCount),t.continueLoop()}))}else t.breakLoop()})).thenFinish(r),r.result()},e.initWithChapters=function(t,e){var n=this;this.itemMap={},this.itemMapByPath={},this.items=[],this.spine=this.items;var i=this.opfXML=new fh(null,"",(new DOMParser).parseFromString("<spine></spine>","text/xml"));return t.forEach((function(t){var e=new Rh;e.initWithParam(t);var r=i.document.createElement("itemref");r.setAttribute("idref",e.id),i.root.appendChild(r),e.itemRefElement=r,n.itemMap[e.id]=e;var o=n.getPathFromURL(t.url);null==o&&(o=t.url),n.itemMapByPath[o]=e,n.items.push(e)})),e?this.store.addDocument(t[0].url,e):Ti(null)},e.initWithWebPubManifest=function(t,e){var n=this;t.readingProgression&&(this.pageProgression=t.readingProgression),void 0===this.metadata&&(this.metadata={});var i=e&&e.title||t.name||t.metadata&&t.metadata.title;i&&(this.metadata[_h.title]=[{v:i}]);var r=this.getPathFromURL(this.pubURL);!t.readingOrder&&e&&null!==r&&(t.readingOrder=[encodeURI(r)],Array.from(e.querySelectorAll("[role=doc-toc] a[href],[role=directory] a[href],nav li a[href],.toc a[href],#toc a[href]")).forEach((function(e){var i=z(j(e.getAttribute("href"),n.pubURL)),r=n.getPathFromURL(i),o=null!==r?encodeURI(r):i;-1==t.readingOrder.indexOf(o)&&t.readingOrder.push(o)})));var o=[],a=0,s=-1;[t.readingOrder,t.resources].forEach((function(e){e instanceof Array&&e.forEach((function(e){var i=t.readingOrder.includes(e),r="string"==typeof e?e:e.url||e.href,l="string"==typeof e?"":e.encodingFormat||e.href&&e.type||"";if(i||"text/html"===l||"application/xhtml+xml"===l||/(^|\/)([^/]+\.(x?html|htm|xht)|[^/.]*)([#?]|$)/.test(r)){var u={url:j(K(r),n.pubURL),index:a++,startPage:null,skipPagesBefore:null};"contents"===e.rel&&-1===s&&(s=u.index),o.push(u)}}))}));var l=Ci("initWithWebPubManifest");return this.initWithChapters(o).then((function(){-1!==s&&(n.xhtmlToc=n.items[s]),n.xhtmlToc||(n.xhtmlToc=n.itemMapByPath[r]),l.finish(!0)})),l.result()},e.getCFI=function(t,e){var n=this.spine[t],i=Ci("getCFI");return this.store.load(n.src).then((function(t){var r=t.getNodeByOffset(e),o=null;if(r){var a=t.getNodeOffset(r,0,!1),s=e-a,l=new Ot;l.prependPathFromNode(r,s,!1,null),n.itemRefElement&&l.prependPathFromNode(n.itemRefElement,0,!1,null),o=l.toString()}i.finish(o)})),i.result()},e.resolveFragment=function(t){var e=this;return xi("resolveFragment",(function(n){if(t){var i,r=new Ot;if(r.fromString(t),e.opfXML){var o=r.navigate(e.opfXML.document);if(1!=o.node.nodeType||o.after||!o.ref)return void n.finish(null);var a=o.node,s=a.getAttribute("idref");if("itemref"!=a.localName||!s||!e.itemMap[s])return void n.finish(null);i=e.itemMap[s],r=o.ref}else i=e.spine[0];e.store.load(i.src).then((function(t){var e=r.navigate(t.document),o=t.getNodeOffset(e.node,e.offset,e.after);n.finish({spineIndex:i.spineIndex,offsetInItem:o,pageIndex:-1})}))}else n.finish(null)}),(function(e,n){f.warn(n,"Cannot resolve fragment:",t),e.finish(null)}))},e.resolveEPage=function(t){var e=this;return xi("resolveEPage",(function(n){if(t<=0)n.finish({spineIndex:0,offsetInItem:0,pageIndex:-1});else if(e.epageIsRenderedPage){var i=e.spine.findIndex((function(e){return 0==e.epage&&0==e.epageCount||e.epage<=t&&e.epage+e.epageCount>t}));-1==i&&(i=e.spine.length-1);var r=e.spine[i];r&&0!=r.epageCount||(r=e.spine[--i]);var o=Math.floor(t-r.epage);n.finish({spineIndex:i,offsetInItem:-1,pageIndex:o})}else{var a=ht(e.spine.length,(function(n){var i=e.spine[n];return i.epage+i.epageCount>t}));a==e.spine.length&&a--;var s=e.spine[a];e.store.load(s.src).then((function(e){(t-=s.epage)>s.epageCount&&(t=s.epageCount);var i=0;if(t>0){var r=e.getTotalOffset();(i=Math.round(r*t/s.epageCount))==r&&i--}n.finish({spineIndex:a,offsetInItem:i,pageIndex:-1})}))}}),(function(e,n){f.warn(n,"Cannot resolve epage:",t),e.finish(null)}))},e.getEPageFromPosition=function(t){var e=this.spine[t.spineIndex];if(this.epageIsRenderedPage)return Ti(e.epage+t.pageIndex);if(t.offsetInItem<=0)return Ti(e.epage);var n=Ci("getEPage");return this.store.load(e.src).then((function(i){var r=i.getTotalOffset(),o=Math.min(r,t.offsetInItem);n.finish(e.epage+o*e.epageCount/r)})),n.result()},t}(),Vh=function(t,e){return{page:t,position:{spineIndex:t.spineIndex,pageIndex:e,offsetInItem:t.offset}}},Hh=function(){function t(t,e,n,i,r){this.opf=t,this.viewport=e,this.fontMapper=n,this.pageSheetSizeReporter=r,this.spineItems=[],this.spineItemLoadingContinuations=[],this.tocAutohide=!1,this.pref=Rt(i),this.clientLayout=new ch(e),this.counterStore=new Bn(t.documentURLTransformer)}var n=t.prototype;return n.getPage=function(t){var e=this.spineItems[t.spineIndex];return e?e.pages[t.pageIndex]:null},n.getCurrentPageProgression=function(t){if(this.opf.pageProgression)return this.opf.pageProgression;var e=this.spineItems[t?t.spineIndex:0];return e?e.instance.pageProgression:null},n.finishPageContainer=function(t,e,n){e.container.style.display="none",e.container.style.visibility="visible",e.container.style.position="",e.container.style.top="",e.container.style.left="",e.container.setAttribute("data-vivliostyle-page-side",e.side);var i=t.pages[n];if(e.isFirstPage=0==t.item.spineIndex&&0==n,t.pages[n]=e,this.opf.epageIsRenderedPage){if(0==n&&t.item.spineIndex>0){var r=this.opf.spine[t.item.spineIndex-1];t.item.epage=r.epage+r.epageCount}t.item.epageCount=t.pages.length,this.opf.epageCount=this.opf.spine.reduce((function(t,e){return t+e.epageCount}),0),this.opf.epageCountCallback&&this.opf.epageCountCallback(this.opf.epageCount)}if(i)t.instance.viewport.contentContainer.replaceChild(e.container,i.container),i.dispatchEvent({type:"replaced",target:null,currentTarget:null,preventDefault:null,newPage:e});else{var o=null;if(n>0)o=t.pages[n-1].container.nextElementSibling;else for(var a=t.item.spineIndex+1;a<this.spineItems.length;a++){var s=this.spineItems[a];if(s&&s.pages[0]){o=s.pages[0].container;break}}t.instance.viewport.contentContainer.insertBefore(e.container,o)}this.pageSheetSizeReporter({width:t.instance.pageSheetWidth,height:t.instance.pageSheetHeight},t.instance.pageSheetSize,t.item.spineIndex,t.instance.pageNumberOffset+n)},n.renderSinglePage=function(t,e){var n=Ci("renderSinglePage"),i=this.makePage(t,e),r=this;return t.instance.layoutNextPage(i,e).then((function(o){var a=(e=o)?e.page-1:t.layoutPositions.length-1;r.finishPageContainer(t,i,a),r.counterStore.finishPage(i.spineIndex,a);var s=null;if(e){var l=t.layoutPositions[e.page];t.layoutPositions[e.page]=e,l&&t.pages[e.page]&&(e.isSamePosition(l)||(s=r.renderSinglePage(t,e)))}s||(s=Ti(!0)),s.then((function(){var o=r.counterStore.getUnresolvedRefsToPage(i),s=0;n.loopWithFrame((function(t){if(++s>o.length)t.breakLoop();else{var e=o[s-1];e.refs=e.refs.filter((function(t){return!t.isResolved()})),0!==e.refs.length?r.getPageViewItem(e.spineIndex).then((function(n){n?(r.counterStore.pushPageCounters(e.pageCounters),r.counterStore.pushReferencesToSolve(e.refs),r.renderSinglePage(n,n.layoutPositions[e.pageIndex]).then((function(e){r.counterStore.popPageCounters(),r.counterStore.popReferencesToSolve();var n=e.pageAndPosition.position;n.spineIndex===i.spineIndex&&n.pageIndex===a&&(i=e.pageAndPosition.page),t.continueLoop()}))):t.continueLoop()})):t.continueLoop()}})).then((function(){i.container.parentElement||(i=t.pages[a]),i.isLastPage=!e&&t.item.spineIndex===r.opf.spine.length-1,i.isLastPage&&r.counterStore.finishLastPage(r.viewport),n.finish({pageAndPosition:Vh(i,a),nextLayoutPosition:e})}))}))})),n.result()},n.normalizeSeekPosition=function(t,e){var n=t.pageIndex,i=-1;if(n<0){i=t.offsetInItem;var r=ht(e.layoutPositions.length,(function(t){return e.instance.getPosition(e.layoutPositions[t],!0)>i}));n=r===e.layoutPositions.length?e.complete?e.layoutPositions.length-1:Number.POSITIVE_INFINITY:r-1}else n===Number.POSITIVE_INFINITY&&-1!==t.offsetInItem&&(i=t.offsetInItem);return{spineIndex:t.spineIndex,pageIndex:n,offsetInItem:i}},n.findPage=function(t,e){var n=this,i=Ci("findPage");return n.getPageViewItem(t.spineIndex).then((function(r){if(r){var o,a=null;i.loopWithFrame((function(s){var l=n.normalizeSeekPosition(t,r);(a=r.pages[o=l.pageIndex])?s.breakLoop():r.complete?(a=r.pages[o=r.layoutPositions.length-1],s.breakLoop()):e?n.renderPage(l).then((function(t){t&&(a=t.page,o=t.position.pageIndex),s.breakLoop()})):i.sleep(100).then((function(){s.continueLoop()}))})).then((function(){i.finish(Vh(a,o))}))}else i.finish(null)})),i.result()},n.renderPage=function(t){var e=this,n=Ci("renderPage");return e.getPageViewItem(t.spineIndex).then((function(i){if(i){var r=e.normalizeSeekPosition(t,i),o=r.pageIndex,a=r.offsetInItem,s=i.pages[o];s?n.finish(Vh(s,o)):n.loopWithFrame((function(t){if(o<i.layoutPositions.length)t.breakLoop();else{if(i.complete)return o=i.layoutPositions.length-1,void t.breakLoop();var n=i.layoutPositions[i.layoutPositions.length-1];e.renderSinglePage(i,n).then((function(e){var r=e.pageAndPosition.page;if(n=e.nextLayoutPosition){if(a>=0&&i.instance.getPosition(n)>a)return s=r,o=i.layoutPositions.length-2,void t.breakLoop();t.continueLoop()}else s=r,o=e.pageAndPosition.position.pageIndex,i.complete=!0,t.breakLoop()}))}})).then((function(){var t=i.layoutPositions[o];(s=s||i.pages[o])?n.finish(Vh(s,o)):e.renderSinglePage(i,t).then((function(t){t.nextLayoutPosition||(i.complete=!0),n.finish(t.pageAndPosition)}))}))}else n.finish(null)})),n.result()},n.renderAllPages=function(){return this.renderPagesUpto({spineIndex:this.opf.spine.length-1,pageIndex:Number.POSITIVE_INFINITY,offsetInItem:-1},!1)},n.renderPagesUpto=function(t,e){var n=this,i=Ci("renderPagesUpto");t||(t={spineIndex:0,pageIndex:0,offsetInItem:0});var r,o=t.spineIndex,a=t.pageIndex,s=0;return e&&(s=o),i.loopWithFrame((function(e){n.renderPage({spineIndex:s,pageIndex:s===o?a:Number.POSITIVE_INFINITY,offsetInItem:s===o?t.offsetInItem:-1}).then((function(t){r=t,++s>o?e.breakLoop():e.continueLoop()}))})).then((function(){i.finish(r)})),i.result()},n.firstPage=function(t,e){return this.findPage({spineIndex:0,pageIndex:0,offsetInItem:-1},e)},n.lastPage=function(t,e){return this.findPage({spineIndex:this.opf.spine.length-1,pageIndex:Number.POSITIVE_INFINITY,offsetInItem:-1},e)},n.nextPage=function(t,e){var n=this,i=this,r=t.spineIndex,o=t.pageIndex,a=Ci("nextPage");return i.getPageViewItem(r).then((function(t){if(t){if(t.complete&&o==t.layoutPositions.length-1){if(r>=i.opf.spine.length-1)return void a.finish(null);r++,o=0;var s=n.spineItems[r],l=s&&s.pages[0],u=t.pages[t.pages.length-1];l&&u&&l.side==u.side&&(s.pages.forEach((function(t){t.container&&t.container.remove()})),n.spineItems[r]=null,n.spineItemLoadingContinuations[r]=null)}else o++;i.findPage({spineIndex:r,pageIndex:o,offsetInItem:-1},e).thenFinish(a)}else a.finish(null)})),a.result()},n.previousPage=function(t,e){var n=t.spineIndex,i=t.pageIndex;if(0==i){if(0==n)return Ti(null);n--,i=Number.POSITIVE_INFINITY}else i--;return this.findPage({spineIndex:n,pageIndex:i,offsetInItem:-1},e)},n.isRectoPage=function(t,n){var i=t.side===e.PageSide.LEFT,r=this.getCurrentPageProgression(n)===e.PageProgression.LTR;return!i&&r||i&&!r},n.getSpread=function(t,n){var i=this,r=Ci("getCurrentSpread"),o=this.getPage(t);if(!o)return Ti({left:null,right:null});var a=o.side===e.PageSide.LEFT;return(this.isRectoPage(o,t)?this.previousPage(t,n):this.nextPage(t,n)).then((function(e){var n=i.getPage(t),o=e&&e.page;o&&o.side===n.side&&(o=null),r.finish(a?{left:n,right:o}:{left:o,right:n})})),r.result()},n.nextSpread=function(t,e){var n=this.getPage(t);if(!n)return Ti(null);var i=this.isRectoPage(n,t),r=this.nextPage(t,e);if(i)return r;var o=this;return r.thenAsync((function(t){if(t){if(t.page.side===n.side)return r;var i=o.nextPage(t.position,e);return i.thenAsync((function(t){return t?i:r}))}return Ti(null)}))},n.previousSpread=function(t,e){var n=this.getPage(t);if(!n)return Ti(null);var i=this.isRectoPage(n,t),r=this.previousPage(t,e),o=n.container.previousElementSibling;if(i){var a=this;return r.thenAsync((function(t){return t?t.page.side===n.side||t.page.container!==o?r:a.previousPage(t.position,e):Ti(null)}))}return r},n.navigateToEPage=function(t,e,n){var i=Ci("navigateToEPage"),r=this;return this.opf.resolveEPage(t).then((function(t){t?r.findPage(t,n).thenFinish(i):i.finish(null)})),i.result()},n.navigateToFragment=function(t,e,n){var i=Ci("navigateToCFI"),r=this;return r.opf.resolveFragment(t).then((function(t){t?r.findPage(t,n).thenFinish(i):i.finish(null)})),i.result()},n.navigateTo=function(t,e,n){f.debug("Navigate to",t);var i=this.opf.getPathFromURL(z(t));if(!i){if(this.opf.opfXML&&t.match(/^#epubcfi\(/))i=this.opf.getPathFromURL(this.opf.opfXML.url);else if("#"===t.charAt(0)){var r=this.opf.documentURLTransformer.restoreURL(t);this.opf.opfXML?null==(i=this.opf.getPathFromURL(r[0]))&&(i=r[0]):i=r[0],t=r[0]+(r[1]?"#"+r[1]:"")}if(null==i)return Ti(null)}var o=this.opf.itemMapByPath[i];if(!o){if(this.opf.opfXML&&i==this.opf.getPathFromURL(this.opf.opfXML.url)){var a=t.indexOf("#");if(a>=0)return this.navigateToFragment(t.substr(a+1),e,n)}return Ti(null)}var s=Ci("navigateTo"),l=this;return l.getPageViewItem(o.spineIndex).then((function(i){if(i){var r=i.xmldoc.getElement(t);r?l.findPage({spineIndex:o.spineIndex,pageIndex:-1,offsetInItem:i.xmldoc.getElementOffset(r)},n).thenFinish(s):e.spineIndex!==o.spineIndex?l.findPage({spineIndex:o.spineIndex,pageIndex:0,offsetInItem:-1},n).thenFinish(s):s.finish(null)}else s.finish(null)})),s.result()},n.makePage=function(t,n){var i=t.instance.viewport,r=i.document.createElement("div");r.setAttribute("data-vivliostyle-page-container","true"),r.setAttribute("role","region"),r.style.position="absolute",r.style.top="0",r.style.left="0",e.isDebug||(r.style.visibility="hidden",r.setAttribute("aria-hidden","true")),i.layoutBox.appendChild(r);var o=i.document.createElement("div");o.setAttribute("data-vivliostyle-bleed-box","true"),r.appendChild(o);var a=new Ba(r,o);if(a.spineIndex=t.item.spineIndex,a.position=n,a.offset=t.instance.getPosition(n),0===a.offset){var s=this.opf.documentURLTransformer.transformFragment("",t.item.src);o.setAttribute("id",s),a.registerElementWithId(o,s)}if(i!==this.viewport){var l=Ft(this.viewport.width,this.viewport.height,i.width,i.height),u=Er(null,new wi(l,null),"");a.delayedItems.push(new Fa(r,"transform",u))}return a},n.makeObjectView=function(t,e,n,i){var r=e.getAttribute("data"),o=null;if(r){r=j(r,t.url);var a=e.getAttribute("media-type");if(!a){var s=this.opf.getPathFromURL(r);if(s){var l=this.opf.itemMapByPath[s];l&&(a=l.mediaType)}}if(a){var u=this.opf.bindings[a];if(u){(o=this.viewport.document.createElement("iframe")).style.border="none";var c=st(r),h=st(a),f=new it;f.append(u),f.append("?src="),f.append(c),f.append("&type="),f.append(h);for(var d=e.firstChild;d;d=d.nextSibling)if(1==d.nodeType){var p=d;if("param"==p.localName&&p.namespaceURI==G.XHTML){var g=p.getAttribute("name"),m=p.getAttribute("value");g&&m&&(f.append("&"),f.append(encodeURIComponent(g)),f.append("="),f.append(encodeURIComponent(m)))}}o.setAttribute("src",f.toString());var v=e.getAttribute("width");v&&o.setAttribute("width",v);var b=e.getAttribute("height");b&&o.setAttribute("height",b)}}}return o||(o=this.viewport.document.createElement("span")).setAttribute("data-adapt-process-children","true"),Ti(o)},n.makeMathJaxView=function(t,e,n,i){var r=Bh();if(r){var o=n.ownerDocument,a=o.createElement("span");n.appendChild(a);var s=o.importNode(e,!0);this.resolveURLsInMathML(s,t),a.appendChild(s);var l=r.queue;l.Push(["Typeset",r,a]);var u=Ci("makeMathJaxView"),c=u.suspend();return l.Push((function(){c.schedule(a)})),u.result()}return Ti(null)},n.resolveURLsInMathML=function(t,e){if(null!=t){if(1===t.nodeType&&"mglyph"===t.tagName)for(var n=0,i=Array.from(t.attributes);n<i.length;n++){var r=i[n];if("src"===r.name){var o=j(r.nodeValue,e.url);r.namespaceURI?t.setAttributeNS(r.namespaceURI,r.name,o):t.setAttribute(r.name,o)}}t.firstChild&&this.resolveURLsInMathML(t.firstChild,e),t.nextSibling&&this.resolveURLsInMathML(t.nextSibling,e)}},n.makeSSEView=function(t,e,n,i){var r,o=n?n.ownerDocument:this.viewport.document,a=e.localName;switch(a){case"t":case"tab":case"ec":case"nt":case"fraction":case"comment":case"mark":r="span";break;case"ruby":case"rp":case"rt":r=a;break;default:r="div"}var s=o.createElement(r);return s.setAttribute("data-adapt-process-children","true"),Ti(s)},n.makeCustomRenderer=function(t){var e=this;return function(n,i,r){return"object"==n.localName&&n.namespaceURI==G.XHTML?e.makeObjectView(t,n,i,r):n.namespaceURI==G.MATHML?e.makeMathJaxView(t,n,i,r):n.namespaceURI==G.SSE?e.makeSSEView(t,n,i,r):n.dataset&&"true"==n.dataset.mathTypeset?e.makeMathJaxView(t,n,i,r):Ti(null)}},n.getPageViewItem=function(t){var e=this;if(-1===t||t>=e.opf.spine.length)return Ti(null);var n=e.spineItems[t];if(n)return Ti(n);var i=Ci("getPageViewItem"),r=this.spineItemLoadingContinuations[t];if(r){var o=i.suspend();return r.push(o),i.result()}r=this.spineItemLoadingContinuations[t]=[];var a=e.opf.spine[t],s=e.opf.store;return s.load(a.src).then((function(o){a.title=o.document.title;var l=s.getStyleForDoc(o),u=e.makeCustomRenderer(o),c=e.viewport,h=l.sizeViewport(c.width,c.height,c.fontSize,e.pref);h.width==c.width&&h.height==c.height&&h.fontSize==c.fontSize||(c=new hh(c.window,h.fontSize,c.root,h.width,h.height));var f,d=e.spineItems[t-1];null!==a.startPage?f=a.startPage-1:(!(t>0)||d&&d.complete?f=d?d.instance.pageNumberOffset+d.pages.length:0:(f=a.epage||t,e.opf.prePaginated||f%2!=0||f++),null!==a.skipPagesBefore&&(f+=a.skipPagesBefore)),e.counterStore.forceSetPageCounter(f);var p=new yh(l,o,e.opf.lang,c,e.clientLayout,e.fontMapper,u,e.opf.fallbackMap,f,e.opf.documentURLTransformer,e.counterStore,e.opf.pageProgression);p.pref=e.pref;var g=e.opf.metadata&&e.opf.metadata[_h.title];p.pubTitle=g&&g[0]&&g[0].v||"",p.docTitle=a.title||"",p.init().then((function(){e.spineItems[t]=n={item:a,xmldoc:o,instance:p,layoutPositions:[null],pages:[],complete:!1},i.finish(n),r.forEach((function(t){t.schedule(n)}))}))})),i.result()},n.removeRenderedPages=function(){for(var t,e=B(this.spineItems);!(t=e()).done;){var n=t.value;n&&n.pages.splice(0)}this.viewport.clear()},n.hasAutoSizedPages=function(){for(var t,e=B(this.spineItems);!(t=e()).done;){var n=t.value;if(n)for(var i,r=B(n.pages);!(i=r()).done;){var o=i.value;if(o.isAutoPageWidth&&o.isAutoPageHeight)return!0}}return!1},n.hasPages=function(){return this.spineItems.some((function(t){return t&&t.pages.length>0}))},n.showTOC=function(t){var e=this.opf,n=e.xhtmlToc||e.ncxToc;if(this.tocAutohide=t,!n)return Ti(null);if(this.tocView&&this.tocView.page)return this.tocView.page.container.style.visibility="visible",this.tocView.page.container.setAttribute("aria-hidden","false"),Ti(this.tocView.page);var i=Ci("showTOC");this.tocView||(this.tocView=new Ph(e.store,n.src,e.lang,this.clientLayout,this.fontMapper,this.pref,this,e.fallbackMap,e.documentURLTransformer,this.counterStore));var r=this.viewport,o=Math.min(350,Math.round(.67*r.width)-16),a=r.height-6,s=r.document.createElement("div");return r.root.appendChild(s),s.style.visibility="hidden",s.style.width=o+10+"px",s.style.maxHeight=a+"px",s.setAttribute("data-vivliostyle-toc-box","true"),s.setAttribute("role","navigation"),this.tocView.showTOC(s,r,o,a,this.viewport.fontSize).then((function(t){s.style.visibility="visible",s.setAttribute("aria-hidden","false"),i.finish(t)})),i.result()},n.hideTOC=function(){this.tocView&&this.tocView.hideTOC()},n.isTOCVisible=function(){return!!this.tocView&&this.tocView.isTOCVisible()},t}();!function(t){t.SINGLE_PAGE="singlePage",t.SPREAD="spread",t.AUTO_SPREAD="autoSpread"}(Mh||(Mh={}));var Gh,Wh=function(){function t(t,n,i,r){this.window=t,this.viewportElement=n,this.instanceId=i,this.callbackFn=r,this.pageSheetSizeAlreadySet=!1,this.renderTask=null;var o=this;n.setAttribute("data-vivliostyle-viewer-viewport",!0),e.isDebug&&n.setAttribute("data-vivliostyle-debug",!0),n.setAttribute("data-vivliostyle-viewer-status","loading");var a=t.document;this.fontMapper=new Gu(a.head,n),this.init(),this.kick=function(){},this.sendCommand=function(){},this.resizeListener=function(){o.needResize=!0,o.kick()},this.pageReplacedListener=this.pageReplacedListener.bind(this),this.hyperlinkListener=function(t){},this.pageRuleStyleElement=a.getElementById("vivliostyle-page-rules"),this.actions={loadPublication:this.loadPublication,loadXML:this.loadXML,configure:this.configure,moveTo:this.moveTo,toc:this.showTOC},this.addLogListeners()}var n=t.prototype;return n.init=function(){this.readyState=e.ReadyState.LOADING,this.packageURL=[],this.opf=null,this.haveZipMetadata=!1,this.touchActive=!1,this.touchX=0,this.touchY=0,this.needResize=!1,this.needRefresh=!1,this.viewportSize=null,this.currentPage=null,this.currentSpread=null,this.pagePosition=null,this.fontSize=16,this.zoom=1,this.fitToScreen=!1,this.pageViewMode=Mh.SINGLE_PAGE,this.waitForLoading=!1,this.renderAllPages=!0,this.pref={fontFamily:"serif",lineHeight:1.25,margin:8,hyphenate:!1,columnWidth:25,horizontal:!1,nightMode:!1,spreadView:!1,pageBorder:1,enabledMediaTypes:{vivliostyle:!0,print:!0},defaultPaperSize:void 0},this.pageSizes=[]},n.addLogListeners=function(){var t=this,e=o;f.addListener(e.DEBUG,(function(e){t.callback({t:"debug",content:e})})),f.addListener(e.INFO,(function(e){t.callback({t:"info",content:e})})),f.addListener(e.WARN,(function(e){t.callback({t:"warn",content:e})})),f.addListener(e.ERROR,(function(e){t.callback({t:"error",content:e})}))},n.callback=function(t){t.i=this.instanceId,this.callbackFn(t)},n.setReadyState=function(t){this.readyState!==t&&(this.readyState=t,this.viewportElement.setAttribute("data-vivliostyle-viewer-status",t),this.callback({t:"readystatechange"}))},n.loadPublication=function(t){T.registerStartTiming("beforeRender"),this.setReadyState(e.ReadyState.LOADING);var n=t.url,i=t.fragment,r=!!t.zipmeta,o=t.authorStyleSheet,a=t.userStyleSheet;this.viewport=null;var s=Ci("loadPublication"),l=this;return l.configure(t).then((function(){var t=new Oh;t.init(o,a).then((function(){var e=j(K(n),l.window.location.href);l.packageURL=[e],t.loadPubDoc(e,r).then((function(t){t?(l.opf=t,l.render(i).then((function(){s.finish(!0)}))):s.finish(!1)}))}))})),s.result()},n.loadXML=function(t){T.registerStartTiming("beforeRender"),this.setReadyState(e.ReadyState.LOADING);var n=t.url,i=t.document,r=t.fragment,o=t.authorStyleSheet,a=t.userStyleSheet;this.viewport=null;var s=Ci("loadXML"),l=this;return l.configure(t).then((function(){var t=new Oh;t.init(o,a).then((function(){var e=n.map((function(t,e){return{url:j(K(t.url),l.window.location.href),index:e,startPage:t.startPage,skipPagesBefore:t.skipPagesBefore}}));l.packageURL=e.map((function(t){return t.url})),l.opf=new zh(t,""),l.opf.initWithChapters(e,i).then((function(){l.render(r).then((function(){s.finish(!0)}))}))}))})),s.result()},n.render=function(t){this.cancelRenderingTask();var e=this;return(t?this.opf.resolveFragment(t).thenAsync((function(t){return e.pagePosition=t,Ti(!0)})):Ti(!0)).thenAsync((function(){return T.registerEndTiming("beforeRender"),e.resize()}))},n.resolveLength=function(t){var e,n=parseFloat(t);if("string"==typeof t&&(e=t.match(/[a-z]+$/))){var i=e[0];if("em"===i||"rem"===i)return n*this.fontSize;if("ex"===i)return n*Vt.ex*this.fontSize/Vt.em;var r=Vt[i];if(r)return n*r}return n},n.configure=function(t){if("boolean"==typeof t.autoresize&&(t.autoresize?(this.viewportSize=null,this.window.addEventListener("resize",this.resizeListener,!1),this.needResize=!0):this.window.removeEventListener("resize",this.resizeListener,!1)),"number"==typeof t.fontSize){var e=t.fontSize;e>=5&&e<=72&&this.fontSize!=e&&(this.fontSize=e,this.needResize=!0)}if("object"==typeof t.viewport&&t.viewport){var n=t.viewport,i={marginLeft:this.resolveLength(n["margin-left"])||0,marginRight:this.resolveLength(n["margin-right"])||0,marginTop:this.resolveLength(n["margin-top"])||0,marginBottom:this.resolveLength(n["margin-bottom"])||0,width:this.resolveLength(n.width)||0,height:this.resolveLength(n.height)||0};(i.width>=200||i.height>=200)&&(this.window.removeEventListener("resize",this.resizeListener,!1),this.viewportSize=i,this.needResize=!0)}return"boolean"==typeof t.hyphenate&&(this.pref.hyphenate=t.hyphenate,this.needResize=!0),"boolean"==typeof t.horizontal&&(this.pref.horizontal=t.horizontal,this.needResize=!0),"boolean"==typeof t.nightMode&&(this.pref.nightMode=t.nightMode,this.needResize=!0),"number"==typeof t.lineHeight&&(this.pref.lineHeight=t.lineHeight,this.needResize=!0),"number"==typeof t.columnWidth&&(this.pref.columnWidth=t.columnWidth,this.needResize=!0),"string"==typeof t.fontFamily&&(this.pref.fontFamily=t.fontFamily,this.needResize=!0),"boolean"==typeof t.load&&(this.waitForLoading=t.load),"boolean"==typeof t.renderAllPages&&(this.renderAllPages=t.renderAllPages),"string"==typeof t.userAgentRootURL&&(H(t.userAgentRootURL.replace(/resources\/?$/,"")),X(t.userAgentRootURL)),"string"==typeof t.rootURL&&(H(t.rootURL),X(V+"resources/")),"string"==typeof t.pageViewMode&&t.pageViewMode!==this.pageViewMode&&(this.pageViewMode=t.pageViewMode,this.needResize=!0),"number"==typeof t.pageBorder&&t.pageBorder!==this.pref.pageBorder&&(this.viewport=null,this.pref.pageBorder=t.pageBorder,this.needResize=!0),"number"==typeof t.zoom&&t.zoom!==this.zoom&&(this.zoom=t.zoom,this.needRefresh=!0),"boolean"==typeof t.fitToScreen&&t.fitToScreen!==this.fitToScreen&&(this.fitToScreen=t.fitToScreen,this.needRefresh=!0),"object"==typeof t.defaultPaperSize&&"number"==typeof t.defaultPaperSize.width&&"number"==typeof t.defaultPaperSize.height&&(this.viewport=null,this.pref.defaultPaperSize=t.defaultPaperSize,this.needResize=!0),this.configurePlugins(t),Ti(!0)},n.configurePlugins=function(t){var n=this;v(e.HOOKS.CONFIGURATION).forEach((function(e){var i=e(t);n.needResize=i.needResize||n.needResize,n.needRefresh=i.needRefresh||n.needRefresh}))},n.pageReplacedListener=function(t){var e=this.currentPage,n=this.currentSpread,i=t.target;n?n.left!==i&&n.right!==i||this.showCurrent(t.newPage):e===t.target&&this.showCurrent(t.newPage)},n.forCurrentPages=function(t){var e=[];this.currentPage&&e.push(this.currentPage),this.currentSpread&&(e.push(this.currentSpread.left),e.push(this.currentSpread.right)),e.forEach((function(e){e&&t(e)}))},n.removePageListeners=function(){var t=this;this.forCurrentPages((function(e){e.removeEventListener("hyperlink",t.hyperlinkListener,!1),e.removeEventListener("replaced",t.pageReplacedListener,!1)}))},n.hidePages=function(){this.removePageListeners(),this.forCurrentPages((function(t){tt(t.container,"display","none"),t.container.setAttribute("aria-hidden","true")})),this.currentPage=null,this.currentSpread=null},n.showSinglePage=function(t){t.addEventListener("hyperlink",this.hyperlinkListener,!1),t.addEventListener("replaced",this.pageReplacedListener,!1),tt(t.container,"visibility","visible"),tt(t.container,"display","block"),t.container.setAttribute("aria-hidden","false")},n.showPage=function(t){this.hidePages(),this.currentPage=t,t.container.style.marginLeft="",t.container.style.marginRight="",this.showSinglePage(t)},n.showSpread=function(t){if(this.hidePages(),this.currentSpread=t,t.left&&t.right){var e=parseFloat(t.left.container.style.width),n=parseFloat(t.right.container.style.width);e&&n&&e!==n&&(e<n?t.left.container.style.marginLeft=n-e+"px":t.right.container.style.marginRight=e-n+"px")}t.left&&(this.showSinglePage(t.left),t.right?t.left.container.removeAttribute("data-vivliostyle-unpaired-page"):t.left.container.setAttribute("data-vivliostyle-unpaired-page",!0)),t.right&&(this.showSinglePage(t.right),t.left?t.right.container.removeAttribute("data-vivliostyle-unpaired-page"):t.right.container.setAttribute("data-vivliostyle-unpaired-page",!0))},n.reportPosition=function(){var t=Ci("reportPosition"),e=this;return e.opf.getCFI(this.pagePosition.spineIndex,this.pagePosition.offsetInItem).then((function(n){var i=e.currentPage;(e.waitForLoading&&i.fetchers.length>0?Di(i.fetchers):Ti(!0)).then((function(){e.sendLocationNotification(i,n).thenFinish(t)}))})),t.result()},n.createViewport=function(){var t=this.viewportElement;if(this.viewportSize){var e=this.viewportSize;return t.style.marginLeft=e.marginLeft+"px",t.style.marginRight=e.marginRight+"px",t.style.marginTop=e.marginTop+"px",t.style.marginBottom=e.marginBottom+"px",new hh(this.window,this.fontSize,t,e.width,e.height)}return new hh(this.window,this.fontSize,t)},n.resolveSpreadView=function(t){switch(this.pageViewMode){case Mh.SINGLE_PAGE:return!1;case Mh.SPREAD:return!0;case Mh.AUTO_SPREAD:default:return t.width/t.height>=1.45&&t.width>800}},n.updateSpreadView=function(t){this.pref.spreadView=t,this.viewportElement.setAttribute("data-vivliostyle-spread-view",t.toString())},n.sizeIsGood=function(){var t=this.createViewport(),e=this.resolveSpreadView(t),n=this.pref.spreadView!==e;return this.updateSpreadView(e),!(this.viewportSize||!this.viewport||this.viewport.fontSize!=this.fontSize||(n||t.width!=this.viewport.width||t.height!=this.viewport.height)&&(n||t.width!=this.viewport.width||t.height==this.viewport.height||!/Android|iPhone|iPad|iPod/.test(navigator.userAgent))&&(!this.opfView||!this.opfView.hasPages()||this.opfView.hasAutoSizedPages()||(this.viewport.width=t.width,this.viewport.height=t.height,this.needRefresh=!0,0)))},n.setPageSize=function(t,e,n,i){this.pageSizes[i]=t,this.setPageSizePageRules(e,n,i)},n.setPageSizePageRules=function(t,e,n){if(!this.pageSheetSizeAlreadySet&&this.pageRuleStyleElement){var i="";Object.keys(t).forEach((function(e){i+="@page "+e+"{margin:0;size:";var n=t[e];i+=n.width+"px "+n.height+"px;}"})),this.pageRuleStyleElement.textContent=i,this.pageSheetSizeAlreadySet=!0}},n.removePageSizePageRules=function(){this.pageRuleStyleElement&&(this.pageRuleStyleElement.textContent="",this.pageSheetSizeAlreadySet=!1)},n.reset=function(){var t=!1,e=!1;this.opfView&&(t=this.opfView.isTOCVisible(),e=this.opfView.tocAutohide,this.opfView.hideTOC(),this.opfView.removeRenderedPages()),this.removePageSizePageRules(),this.viewport=this.createViewport(),this.viewport.resetZoom(),this.opfView=new Hh(this.opf,this.viewport,this.fontMapper,this.pref,this.setPageSize.bind(this)),t&&this.sendCommand({a:"toc",v:"show",autohide:e})},n.showCurrent=function(t,e){this.needRefresh=!1,this.removePageListeners();var n=this;return this.pref.spreadView?this.opfView.getSpread(this.pagePosition,e).thenAsync((function(e){return n.showSpread(e),n.setSpreadZoom(e),n.currentPage=t,Ti(null)})):(this.showPage(t),this.setPageZoom(t),this.currentPage=t,Ti(null))},n.setPageZoom=function(t){var e=this.getAdjustedZoomFactor(t.dimensions);this.viewport.zoom(t.dimensions.width,t.dimensions.height,e)},n.setSpreadZoom=function(t){var e=this.getSpreadDimensions(t);this.viewport.zoom(e.width,e.height,this.getAdjustedZoomFactor(e))},n.getAdjustedZoomFactor=function(t){return this.fitToScreen?this.calculateZoomFactorToFitInsideViewPort(t):this.zoom},n.getSpreadDimensions=function(t){var e=0,n=0;return t.left&&(e+=t.left.dimensions.width,n=t.left.dimensions.height),t.right&&(e+=t.right.dimensions.width,n=Math.max(n,t.right.dimensions.height)),t.left&&t.right&&(e+=2*this.pref.pageBorder,e+=Math.abs(t.left.dimensions.width-t.right.dimensions.width)),{width:e,height:n}},n.queryZoomFactor=function(t){if(!this.currentPage)throw new Error("no page exists.");switch(t){case Gh.FIT_INSIDE_VIEWPORT:var e;return e=this.pref.spreadView?this.getSpreadDimensions(this.currentSpread):this.currentPage.dimensions,this.calculateZoomFactorToFitInsideViewPort(e);default:throw new Error("unknown zoom type: "+t)}},n.calculateZoomFactorToFitInsideViewPort=function(t){return Math.min(this.viewport.width/t.width,this.viewport.height/t.height)},n.cancelRenderingTask=function(){this.renderTask&&this.renderTask.interrupt(new Xh),this.renderTask=null},n.resize=function(){if(this.needResize=!1,this.needRefresh=!1,this.sizeIsGood())return Ti(!0);var t=this;this.setReadyState(e.ReadyState.LOADING),this.cancelRenderingTask();var n=Ni().getScheduler().run((function(){return xi("resize",(function(i){t.opf?(t.renderTask=n,T.registerStartTiming("render (resize)"),t.reset(),t.pagePosition&&(0==t.pagePosition.pageIndex&&0==t.pagePosition.offsetInItem||(t.pagePosition.pageIndex=-1)),t.opf.setEPageCountMode(t.renderAllPages),t.opfView.renderPagesUpto(t.pagePosition,!t.renderAllPages).then((function(r){r?(t.pagePosition=r.position,t.showCurrent(r.page,!0).then((function(){t.setReadyState(e.ReadyState.INTERACTIVE),t.opf.countEPages((function(e){var n={t:"nav",epageCount:e,first:t.currentPage.isFirstPage,last:t.currentPage.isLastPage,metadata:t.opf.metadata,docTitle:t.opf.spine[t.pagePosition.spineIndex].title};(t.currentPage.isFirstPage||0==t.pagePosition.pageIndex&&t.opf.spine[t.pagePosition.spineIndex].epage)&&(n.epage=t.opf.spine[t.pagePosition.spineIndex].epage),t.callback(n)})).then((function(){t.reportPosition().then((function(r){(t.renderAllPages?t.opfView.renderAllPages():Ti(null)).then((function(){t.renderTask===n&&(t.renderTask=null),T.registerEndTiming("render (resize)"),t.renderAllPages&&t.setReadyState(e.ReadyState.COMPLETE),t.callback({t:"loaded"}),i.finish(r)}))}))}))}))):i.finish(!1)}))):i.finish(!1)}),(function(t,e){if(!(e instanceof Xh))throw e;T.registerEndTiming("render (resize)"),f.debug(e.message)}))}));return Ti(!0)},n.sendLocationNotification=function(t,e){var n=Ci("sendLocationNotification"),i={t:"nav",first:t.isFirstPage,last:t.isLastPage,metadata:this.opf.metadata,docTitle:this.opf.spine[t.spineIndex].title},r=this;return this.opf.getEPageFromPosition(r.pagePosition).then((function(t){i.epage=t,i.epageCount=r.opf.epageCount,e&&(i.cfi=e),r.callback(i),n.finish(!0)})),n.result()},n.getCurrentPageProgression=function(){return this.opfView?this.opfView.getCurrentPageProgression(this.pagePosition):null},n.moveTo=function(t){var n,i=this;if(this.readyState!==e.ReadyState.COMPLETE&&"next"!==t.where&&this.setReadyState(e.ReadyState.LOADING),"string"==typeof t.where){var r;switch(t.where){case"next":r=this.pref.spreadView?this.opfView.nextSpread:this.opfView.nextPage;break;case"previous":r=this.pref.spreadView?this.opfView.previousSpread:this.opfView.previousPage;break;case"last":r=this.opfView.lastPage;break;case"first":r=this.opfView.firstPage;break;default:return Ti(!0)}r&&(n=function(){return r.call(i.opfView,i.pagePosition,!i.renderAllPages)})}else if("number"==typeof t.epage){var o=t.epage;n=function(){return i.opfView.navigateToEPage(o,i.pagePosition,!i.renderAllPages)}}else{if("string"!=typeof t.url)return Ti(!0);var a=t.url;n=function(){return i.opfView.navigateTo(a,i.pagePosition,!i.renderAllPages)}}var s=Ci("moveTo");return n.call(i.opfView).then((function(t){var n;if(t){i.pagePosition=t.position;var r=Ci("moveTo.showCurrent");n=r.result(),i.showCurrent(t.page,!i.renderAllPages).then((function(){i.reportPosition().thenFinish(r)}))}else n=Ti(!0);n.then((function(t){i.readyState===e.ReadyState.LOADING&&i.setReadyState(e.ReadyState.INTERACTIVE),s.finish(t)}))})),s.result()},n.showTOC=function(t){var e=!!t.autohide,n=t.v,i=this.opfView.isTOCVisible(),r=e!=this.opfView.tocAutohide&&"hide"!=n;if(i){if("show"==n&&!r)return Ti(!0)}else if("hide"==n)return Ti(!0);if(i&&"show"!=n)return this.opfView.hideTOC(),Ti(!0);var o=this,a=Ci("showTOC");return this.opfView.showTOC(e).then((function(t){t&&(r&&(t.listeners={}),e&&t.addEventListener("hyperlink",(function(){o.opfView.hideTOC()}),!1),t.addEventListener("hyperlink",o.hyperlinkListener,!1)),a.finish(!0)})),a.result()},n.runCommand=function(t){var e=this,n=t.a||"";return xi("runCommand",(function(i){var r=e.actions[n];r?r.call(e,t).then((function(){e.callback({t:"done",a:n}),i.finish(!0)})):(f.error("No such action:",n),i.finish(!0))}),(function(t,e){f.error(e,"Error during action:",n),t.finish(!0)}))},n.initEmbed=function(t){var e,n=jh(t),i=null,r=this;e=function(){var t=Ci("commandLoop"),e=Ni().getScheduler();return r.hyperlinkListener=function(t){var n=t,i="#"===n.href.charAt(0)||r.packageURL.some((function(t){return n.href.substr(0,t.length)==t}));if(i){t.preventDefault();var o={t:"hyperlink",href:n.href,internal:i};e.run((function(){return r.callback(o),Ti(!0)}))}},t.loopWithFrame((function(t){if(r.needResize)r.resize().then((function(){t.continueLoop()}));else if(r.needRefresh)r.currentPage&&r.showCurrent(r.currentPage).then((function(){t.continueLoop()}));else if(n){var e=n;n=null,r.runCommand(e).then((function(){t.continueLoop()}))}else{var o=Ci("waitForCommand");i=o.suspend(self),o.result().then((function(){t.continueLoop()}))}})).thenFinish(t),t.result()},(Ei?Ei.getScheduler():Si||new Pi(new Ii)).run(e,void 0),r.kick=function(){var t=i;t&&(i=null,t.schedule(!0))},r.sendCommand=function(t){return!n&&(n=jh(t),r.kick(),!0)},this.window.adapt_command=r.sendCommand},t}();!function(t){t.FIT_INSIDE_VIEWPORT="fit inside viewport"}(Gh||(Gh={}));var Xh=function(t){function e(){var n;return(n=t.call(this)||this).name="RenderingCanceledError",n.message="Page rendering has been canceled",Object.setPrototypeOf(_(n),e.prototype),n.stack=(new Error).stack,n}return A(e,t),e}(F(Error));function jh(t){return"string"==typeof t?U(t):t}var Kh=e.PageProgression;function Yh(t){var e={};return Object.keys(t).forEach((function(n){var i=t[n];switch(n){case"autoResize":e.autoresize=i;break;case"pageBorderWidth":e.pageBorder=i;break;default:e[n]=i}})),e}var qh,$h=function(){function t(t,e){this.settings=t,this.initialized=!1,s(t.debug),this.adaptViewer_=new Wh(t.window||window,t.viewportElement,"main",this.dispatcher.bind(this)),this.options={autoResize:!0,fontSize:16,pageBorderWidth:1,renderAllPages:!0,pageViewMode:Mh.AUTO_SPREAD,zoom:1,fitToScreen:!1,defaultPaperSize:void 0},e&&this.setOptions(e),this.eventTarget=new gt,Object.defineProperty(this,"readyState",{get:function(){return this.adaptViewer_.readyState}})}var n=t.prototype;return n.setOptions=function(t){var e=Object.assign({a:"configure"},Yh(t));this.adaptViewer_.sendCommand(e),Object.assign(this.options,t)},n.dispatcher=function(t){var e={type:t.t},n=t;Object.keys(n).forEach((function(t){"t"!==t&&(e[t]=n[t])})),this.eventTarget.dispatchEvent(e)},n.addListener=function(t,e){this.eventTarget.addEventListener(t,e,!1)},n.removeListener=function(t,e){this.eventTarget.removeEventListener(t,e,!1)},n.loadDocument=function(t,e,n){t||this.eventTarget.dispatchEvent({type:"error",content:"No URL specified"}),this.loadDocumentOrPublication(t,null,e,n)},n.loadPublication=function(t,e,n){t||this.eventTarget.dispatchEvent({type:"error",content:"No URL specified"}),this.loadDocumentOrPublication(null,t,e,n)},n.loadDocumentOrPublication=function(t,e,n,i){var r=n||{};function o(t){return t?t.map((function(t){return{url:t.url||null,text:t.text||null}})):void 0}var a=o(r.authorStyleSheet),s=o(r.userStyleSheet);i&&Object.assign(this.options,i);var l=Object.assign({a:t?"loadXML":"loadPublication",userAgentRootURL:this.settings.userAgentRootURL,url:Zh(t)||e,document:r.documentObject,fragment:r.fragment,authorStyleSheet:a,userStyleSheet:s},Yh(this.options));this.initialized?this.adaptViewer_.sendCommand(l):(this.initialized=!0,this.adaptViewer_.initEmbed(l))},n.getCurrentPageProgression=function(){return this.adaptViewer_.getCurrentPageProgression()},n.resolveNavigation=function(t){switch(t){case e.Navigation.LEFT:return this.getCurrentPageProgression()===Kh.LTR?e.Navigation.PREVIOUS:e.Navigation.NEXT;case e.Navigation.RIGHT:return this.getCurrentPageProgression()===Kh.LTR?e.Navigation.NEXT:e.Navigation.PREVIOUS;default:return t}},n.navigateToPage=function(t,n){t===e.Navigation.EPAGE?this.adaptViewer_.sendCommand({a:"moveTo",epage:n}):this.adaptViewer_.sendCommand({a:"moveTo",where:this.resolveNavigation(t)})},n.navigateToInternalUrl=function(t){this.adaptViewer_.sendCommand({a:"moveTo",url:t})},n.isTOCVisible=function(){return this.adaptViewer_.opfView&&this.adaptViewer_.opfView.opf&&(this.adaptViewer_.opfView.opf.xhtmlToc||this.adaptViewer_.opfView.opf.ncxToc)?!!this.adaptViewer_.opfView.isTOCVisible():null},n.showTOC=function(t,e){this.adaptViewer_.sendCommand({a:"toc",v:null==t?"toggle":t?"show":"hide",autohide:e})},n.queryZoomFactor=function(t){return this.adaptViewer_.queryZoomFactor(t)},n.getPageSizes=function(){return this.adaptViewer_.pageSizes},n.getTOC=function(){var t,e;return null==(t=this.adaptViewer_.opfView)||null==(e=t.tocView)?void 0:e.getTOC()},n.getMetadata=function(){return this.adaptViewer_.opf.getMetadata()},n.getCover=function(){return this.adaptViewer_.opf.cover},t}();function Zh(t){function e(t){return"number"==typeof t?t:null}function n(t){return"string"==typeof t?{url:t,startPage:null,skipPagesBefore:null}:{url:t.url,startPage:e(t.startPage),skipPagesBefore:e(t.skipPagesBefore)}}return Array.isArray(t)?t.map(n):t?[n(t)]:null}(qh=e.Navigation||(e.Navigation={})).PREVIOUS="previous",qh.NEXT="next",qh.LEFT="left",qh.RIGHT="right",qh.FIRST="first",qh.LAST="last",qh.EPAGE="epage";var Qh=Gh,Jh=Mh;T.forceRegisterEndTiming("load_vivliostyle");var tf=function(){function t(t,e){var n=e.title,i=void 0===n?"":n,r=e.printCallback,o=void 0===r?function(t){return t.print()}:r,a=e.hideIframe,s=void 0===a||a,l=e.removeIframe,u=void 0===l||l;this.htmlDoc=t,this.title=i,this.printCallback=o,this.hideIframe=s,this.removeIframe=u}var e=t.prototype;return e.init=function(){this.iframe=document.createElement("iframe"),this.hideIframe&&(this.iframe.style.width="0",this.iframe.style.height="0",this.iframe.style.borderWidth="0"),this.window=window,this.window.printInstance=this,this.iframe.srcdoc="\n      <!DOCTYPE html>\n      <html data-vivliostyle-paginated=\"true\">\n        <head>\n          <meta charset='utf-8'/>\n          <meta name='viewport' content='width=device-width, initial-scale=1.0'/>\n          <title>"+this.title+"</title>\n          <style>"+zi+"</style>\n          <style>"+Ui+"</style>\n          <style>\n            html[data-vivliostyle-paginated] {\n              width: 100%;\n              height: 100%;\n            }\n            html[data-vivliostyle-paginated] body,\n            html[data-vivliostyle-paginated] [data-vivliostyle-viewer-viewport] {\n              width: 100% !important;\n              height: 100% !important;\n            }\n            html[data-vivliostyle-paginated],\n            html[data-vivliostyle-paginated] body {\n              margin: 0;\n              padding: 0;\n            }\n          </style>\n          <style id='vivliostyle-page-rules'></style>\n        </head>\n        <body onload='parent.printInstance.runInIframe(window)'>\n          <div id=\"vivliostyle-viewer-viewport\"></div>\n        </body>\n      </html>",document.body.appendChild(this.iframe)},e.runInIframe=function(t){var e=this;return this.iframeWin=t,this.preparePrint().then((function(){return e.browserPrint()})).then((function(){return e.cleanUp()}))},e.preparePrint=function(){this.iframeWin.document.title=this.title;var t=new Blob([this.htmlDoc],{type:"text/html"}),e=URL.createObjectURL(t),n=new $h({viewportElement:this.iframeWin.document.body.firstElementChild,window:this.iframeWin,debug:!0},{defaultPaperSize:{width:794,height:1122}});return new Promise((function(t){n.addListener("readystatechange",(function(){"complete"===n.readyState&&t()})),n.loadDocument({url:e})}))},e.browserPrint=function(){this.printCallback(this.iframeWin)},e.cleanUp=function(){delete this.window.printInstance,this.removeIframe&&this.iframe.parentElement.removeChild(this.iframe)},t}();e.CoreViewer=$h,e.PageViewMode=Jh,e.Profiler=y,e.UserAgentBaseCss=Wi,e.UserAgentPageCss=Gi,e.UserAgentXml=Hi,e.ValidationTxt=Vi,e.VivliostyleViewportCss=zi,e.VivliostyleViewportScreenCss=Ui,e.ZoomType=Qh,e.getHooksForName=v,e.pageProgressionOf=l,e.plugin=b,e.printHTML=function(t,e){new tf(t,e).init()},e.profile=x,e.profiler=T,e.registerHook=g,e.removeHook=m,e.setDebug=s})),g=Object.freeze(Object.assign(Object.create(null),p,{default:p,__moduleExports:p}));!function(t){t.Default="",t.Auto="auto",t.Preset="preset",t.Custom="custom",t.Zero="0"}(f||(f={}));const m=[{name:"A5",description:"A5"},{name:"A4",description:"A4"},{name:"A3",description:"A3"},{name:"B5",description:"B5 (ISO)"},{name:"B4",description:"B4 (ISO)"},{name:"JIS-B5",description:"B5 (JIS)"},{name:"JIS-B4",description:"B4 (JIS)"},{name:"letter",description:"letter"},{name:"legal",description:"legal"},{name:"ledger",description:"ledger"}],v={customWidth:"210mm",customHeight:"297mm",customMargin:"10%",baseFontSize:"12pt",baseLineHeight:"1.2",baseFontFamily:"serif",viewerFontSize:16};class b{constructor(t){this.PresetSize=b.PresetSize,this.pageSizeMode=e.observable(f.Default),this.presetSize=e.observable(m[1]),this.isLandscape=e.observable(!1),this.customWidth=e.observable(v.customWidth),this.customHeight=e.observable(v.customHeight),this.pageSizeImportant=e.observable(!1),this.pageMarginMode=e.observable(f.Default),this.customMargin=e.observable(v.customMargin),this.pageMarginImportant=e.observable(!1),this.firstPageMarginZero=e.observable(!1),this.firstPageMarginZeroImportant=e.observable(!1),this.forceHtmlBodyMarginZero=e.observable(!1),this.widowsOrphans=e.observable(""),this.widowsOrphansImportant=e.observable(!1),this.imageMaxSizeToFitPage=e.observable(!1),this.imageMaxSizeToFitPageImportant=e.observable(!1),this.imageKeepAspectRatio=e.observable(!1),this.imageKeepAspectRatioImportant=e.observable(!1),this.baseFontSize=e.observable(v.baseFontSize),this.baseFontSizeSpecified=e.observable(!1),this.baseFontSizeImportant=e.observable(!1),this.baseLineHeight=e.observable(v.baseLineHeight),this.baseLineHeightSpecified=e.observable(!1),this.baseLineHeightImportant=e.observable(!1),this.baseFontFamily=e.observable(v.baseFontFamily),this.baseFontFamilySpecified=e.observable(!1),this.baseFontFamilyImportant=e.observable(!1),this.allImportant=e.observable(!1),this.pageOtherStyle=e.observable(""),this.firstPageOtherStyle=e.observable(""),this.rootOtherStyle=e.observable(""),this.beforeOtherStyle=e.observable(""),this.afterOtherStyle=e.observable(""),this.viewerFontSize=null,this.setViewerFontSizeObservable=t=>{this.viewerFontSize=t;const e=document.getElementsByName("vivliostyle-settings_viewer-font-size")[0];e&&(e.value=this.fontSizePxToPercent(Number(t()),100,5).toString())},this.viewerFontSizePercent=e.pureComputed({read(){if(!this.viewerFontSize)return 100;return this.fontSizePxToPercent(Number(this.viewerFontSize()),100,5)},write(t){if(!this.viewerFontSize)return;const e=parseFloat(String(t));let n=e&&this.fontSizePercentToPx(e);if(!n||n<5||n>72){const t=document.getElementsByName("vivliostyle-settings_viewer-font-size")[0];t&&(t.value="100"),n=v.viewerFontSize}this.viewerFontSize(Number(n))},owner:this}),this.cssText=e.pureComputed({read:this.toCSSText,write:this.fromCSSText,owner:this}),this.allImportant.subscribe(t=>{this.pageSizeImportant(t),this.pageMarginImportant(t),this.firstPageMarginZeroImportant(t),this.widowsOrphansImportant(t),this.imageMaxSizeToFitPageImportant(t),this.imageKeepAspectRatioImportant(t),this.baseFontSizeImportant(t),this.baseLineHeightImportant(t),this.baseFontFamilyImportant(t)}),this.pageStyleRegExp=new RegExp("^((?:\\n|.)*?)\\/\\*<viewer>\\*\\/\\s*(?:@page\\s*\\{\\s*(?:size:\\s*([^\\s!;{}]+)(?:\\s+([^\\s!;{}]+))?\\s*(!important)?(?:;|(?=[\\s{}]))\\s*)?(?:margin:\\s*([^\\s!;{}]+(?:\\s+[^\\s!;{}]+)?(?:\\s+[^\\s!;{}]+)?(?:\\s+[^\\s!;{}]+)?)\\s*(!important)?(?:;|(?=[\\s{}]))\\s*)?((?:[^{}]+|\\{[^{}]*\\})*)\\}\\s*)?(?:@page\\s*:first\\s*\\{\\s*(margin:\\s*0(?:\\w+|%)?\\s*(!important)?(?:;|(?=[\\s{}]))\\s*)?((?:[^{}]+|\\{[^{}]*\\})*)\\}\\s*)?((?:html|:root),\\s*body\\s*\\{\\s*margin:\\s*0(?:\\w+|%)?\\s*!important(?:;|(?=[\\s{}]))\\s*\\}\\s*)?(?:(?:html|:root)\\s*\\{\\s*(?:font-size:\\s*(calc\\([^()]+\\)|[^\\s!;{}]+)\\s*(!important)?(?:;|(?=[\\s{}]))\\s*)?(?:line-height:\\s*([^\\s!;{}]+)\\s*(!important)?(?:;|(?=[\\s{}]))\\s*)?(?:font-family:\\s*([^!;{}]+)\\s*(!important)?(?:;|(?=[\\s{}]))\\s*)?([^{}]*)\\}\\s*)?(?:body\\s*\\{\\s*(?:[-\\w]+:\\s*inherit\\s*!important(?:;|(?=[\\s{}]))\\s*)+\\}\\s*)?(?:\\*\\s*\\{\\s*widows:\\s*(1|999)\\s*(!important)?(?:;|(?=[\\s{}]))\\s*orphans:\\s*\\19\\s*\\20(?:;|(?=[\\s{}]))\\s*\\}\\s*)?(?:img,\\s*svg\\s*\\{\\s*(max-inline-size:\\s*100%\\s*(!important)?(?:;|(?=[\\s{}]))\\s*max-block-size:\\s*100vb\\s*\\22(?:;|(?=[\\s{}]))\\s*)?(object-fit:\\s*contain\\s*(!important)?(?:;|(?=[\\s{}]))\\s*)?\\}\\s*)?((?:\\n|.)*)$"),t&&this.copyFrom(t)}fontSizePxToPercent(t,e,n){let i=t/v.viewerFontSize*(e||100);return n&&(i=i.toPrecision(n).replace(/(?:\.0*|(\.\d*?)0+)$/,"$1")),i}fontSizePercentToPx(t,e,n){let i=t/(e||100)*v.viewerFontSize;return n&&(i=i.toPrecision(n).replace(/(?:\.0*|(\.\d*?)0+)$/,"$1")),i}fromCSSText(t){const e=this.pageStyleRegExp.exec(t);if(e){const[,t,n,i,r,o,a,s,l,u,c,h,d,p,g,v,b,y,w,E,S,N,C,T,x,I]=e;let P=I,A=b,O=d,R=c,k=s,L=w,F=n,_=i,D=0,B=0;if(this.beforeOtherStyle(t),"landscape"==F||"portrait"==F?(this.isLandscape("landscape"==F),F=_,_=null):"landscape"!=_&&"portrait"!=_||(this.isLandscape("landscape"==_),_=null),null!=F){if(null==_)if("auto"==F)this.pageSizeMode(f.Auto);else{const t=m.find(t=>t.name.toLowerCase()==F.toLowerCase());t?(this.pageSizeMode(f.Preset),this.presetSize(t)):(this.pageSizeMode(f.Custom),this.customWidth(F),this.customHeight(F))}else this.pageSizeMode(f.Custom),this.customWidth(F),this.customHeight(_);this.pageSizeImportant(!!r),r?D++:B++}else this.pageSizeMode(f.Default);null!=o?(this.pageMarginMode("0"==o?f.Zero:f.Custom),"0"==o?this.pageMarginMode(f.Zero):(this.pageMarginMode(f.Custom),this.customMargin(o)),this.pageMarginImportant(!!a),a?D++:B++):this.pageMarginMode(f.Default),k=k||"",this.pageOtherStyle(k),l?(this.firstPageMarginZero(!0),this.firstPageMarginZeroImportant(!!u),u?D++:B++):this.firstPageMarginZero(!1),R=R||"",this.firstPageOtherStyle(R),h?this.forceHtmlBodyMarginZero(!0):this.forceHtmlBodyMarginZero(!1),null!=O?(O=O.replace(/^\s*calc\([.\d]+\s*\*\s*([.\d]+\w+)\)\s*$/,"$1"),this.baseFontSizeSpecified(!0),this.baseFontSize(O),this.baseFontSizeImportant(!!p),p?D++:B++):this.baseFontSizeSpecified(!1),null!=g?(this.baseLineHeightSpecified(!0),this.baseLineHeight(g),this.baseLineHeightImportant(!!v),v?D++:B++):this.baseLineHeightSpecified(!1),null!=A?(A=A.trim(),this.baseFontFamilySpecified(!0),this.baseFontFamily(A),this.baseFontFamilyImportant(!!y),y?D++:B++):this.baseFontFamilySpecified(!1),L=L||"",this.rootOtherStyle(L),null!=E?(this.widowsOrphans(E),this.widowsOrphansImportant(!!S),S?D++:B++):this.widowsOrphans(f.Default),N?(this.imageMaxSizeToFitPage(!0),this.imageMaxSizeToFitPageImportant(!!C),C?D++:B++):this.imageMaxSizeToFitPage(!1),T?(this.imageKeepAspectRatio(!0),this.imageKeepAspectRatioImportant(!!x),x?D++:B++):this.imageKeepAspectRatio(!1),P=P.replace(/\/\*<\/?viewer>\*\/\n?/g,"")||"",this.afterOtherStyle(P),this.allImportant(D>0&&0==B)}else{const e=t.replace(/\/\*<\/?viewer>\*\/\n?/g,"")||"";this.afterOtherStyle(e)}}toCSSText(){function t(t){return t?" !important":""}let e=this.beforeOtherStyle();if(e+="/*<viewer>*/\n",this.pageSizeMode()!=f.Default||this.pageMarginMode()!=f.Default||this.pageOtherStyle()){if(e+="@page { ",this.pageSizeMode()!=f.Default){switch(e+="size: ",this.pageSizeMode()){case f.Auto:e+="auto";break;case f.Preset:e+=this.presetSize().name,this.isLandscape()&&(e+=" landscape");break;case f.Custom:e+=`${this.customWidth()} ${this.customHeight()}`;break;default:throw new Error("Unknown pageSizeMode "+this.pageSizeMode())}e+=t(this.pageSizeImportant())+"; "}if(this.pageMarginMode()!=f.Default){switch(e+="margin: ",this.pageMarginMode()){case f.Auto:e+="auto";break;case f.Zero:e+="0";break;case f.Custom:e+=""+this.customMargin();break;default:throw new Error("Unknown pageMarginMode "+this.pageMarginMode())}e+=t(this.pageMarginImportant())+"; "}e+=this.pageOtherStyle(),e+="}\n"}if((this.firstPageMarginZero()||this.firstPageOtherStyle())&&(e+="@page :first { ",this.firstPageMarginZero()&&(e+=`margin: 0${t(this.firstPageMarginZeroImportant())}; `),e+=this.firstPageOtherStyle(),e+="}\n"),this.forceHtmlBodyMarginZero()&&(e+=":root, body { margin: 0 !important; }\n"),this.baseFontSizeSpecified()||this.baseLineHeightSpecified()||this.baseFontFamilySpecified()||this.rootOtherStyle()){e+=":root { ";const n=this.baseFontSize();if(this.baseFontSizeSpecified())if(this.viewerFontSize&&this.viewerFontSize()!=v.viewerFontSize&&!n.endsWith("%")){e+=`font-size: calc(${this.fontSizePxToPercent(Number(this.viewerFontSize()),1,5)} * ${n})${t(this.baseFontSizeImportant())}; `}else e+=`font-size: ${this.baseFontSize()}${t(this.baseFontSizeImportant())}; `;this.baseLineHeightSpecified()&&(e+=`line-height: ${this.baseLineHeight()}${t(this.baseLineHeightImportant())}; `),this.baseFontFamilySpecified()&&(e+=`font-family: ${this.baseFontFamily()}${t(this.baseFontFamilyImportant())}; `),e+=this.rootOtherStyle(),e+="}\n"}return(this.baseFontSizeSpecified()&&this.baseFontSizeImportant()||this.baseLineHeightSpecified()&&this.baseLineHeightImportant()||this.baseFontFamilySpecified()&&this.baseFontFamilyImportant())&&(e+="body { ",this.baseFontSizeSpecified()&&this.baseFontSizeImportant()&&(e+="font-size: inherit !important; "),this.baseLineHeightSpecified()&&this.baseLineHeightImportant()&&(e+="line-height: inherit !important; "),this.baseFontFamilySpecified()&&this.baseFontFamilyImportant()&&(e+="font-family: inherit !important; "),e+="}\n"),this.widowsOrphans()&&(e+="* { ",e+=`widows: ${this.widowsOrphans()}${t(this.widowsOrphansImportant())}; `,e+=`orphans: ${this.widowsOrphans()}${t(this.widowsOrphansImportant())}; `,e+="}\n"),(this.imageMaxSizeToFitPage()||this.imageKeepAspectRatio())&&(e+="img, svg { ",this.imageMaxSizeToFitPage()&&(e+=`max-inline-size: 100%${t(this.imageMaxSizeToFitPageImportant())}; `,e+=`max-block-size: 100vb${t(this.imageMaxSizeToFitPageImportant())}; `),this.imageKeepAspectRatio()&&(e+=`object-fit: contain${t(this.imageKeepAspectRatioImportant())}; `),e+="}\n"),e+="/*</viewer>*/\n",e+=this.afterOtherStyle(),e}copyFrom(t){this.pageSizeMode(t.pageSizeMode()),this.presetSize(t.presetSize()),this.isLandscape(t.isLandscape()),this.customWidth(t.customWidth()),this.customHeight(t.customHeight()),this.pageSizeImportant(t.pageSizeImportant()),this.pageMarginMode(t.pageMarginMode()),this.customMargin(t.customMargin()),this.pageMarginImportant(t.pageMarginImportant()),this.firstPageMarginZero(t.firstPageMarginZero()),this.firstPageMarginZeroImportant(t.firstPageMarginZeroImportant()),this.forceHtmlBodyMarginZero(t.forceHtmlBodyMarginZero()),this.widowsOrphans(t.widowsOrphans()),this.widowsOrphansImportant(t.widowsOrphansImportant()),this.imageMaxSizeToFitPage(t.imageMaxSizeToFitPage()),this.imageMaxSizeToFitPageImportant(t.imageMaxSizeToFitPageImportant()),this.imageKeepAspectRatio(t.imageKeepAspectRatio()),this.imageKeepAspectRatioImportant(t.imageKeepAspectRatioImportant()),this.baseFontSize(t.baseFontSize()),this.baseFontSizeSpecified(t.baseFontSizeSpecified()),this.baseFontSizeImportant(t.baseFontSizeImportant()),this.baseLineHeight(t.baseLineHeight()),this.baseLineHeightSpecified(t.baseLineHeightSpecified()),this.baseLineHeightImportant(t.baseLineHeightImportant()),this.baseFontFamily(t.baseFontFamily()),this.baseFontFamilySpecified(t.baseFontFamilySpecified()),this.baseFontFamilyImportant(t.baseFontFamilyImportant()),this.allImportant(t.allImportant()),this.pageOtherStyle(t.pageOtherStyle()),this.firstPageOtherStyle(t.firstPageOtherStyle()),this.rootOtherStyle(t.rootOtherStyle()),this.beforeOtherStyle(t.beforeOtherStyle()),this.afterOtherStyle(t.afterOtherStyle()),this.viewerFontSize&&t.viewerFontSize&&this.viewerFontSize(t.viewerFontSize())}equivalentTo(t){return this.pageSizeMode()===t.pageSizeMode()&&((this.pageSizeMode()!==f.Preset||this.presetSize()===t.presetSize())&&((this.pageSizeMode()!==f.Preset||this.isLandscape()===t.isLandscape())&&((this.pageSizeMode()!==f.Custom||this.customWidth()===t.customWidth())&&((this.pageSizeMode()!==f.Custom||this.customHeight()===t.customHeight())&&(this.pageSizeImportant()===t.pageSizeImportant()&&(this.pageMarginMode()===t.pageMarginMode()&&((this.pageMarginMode()!==f.Custom||this.customMargin()===t.customMargin())&&(this.pageMarginImportant()===t.pageMarginImportant()&&(this.firstPageMarginZero()===t.firstPageMarginZero()&&(this.firstPageMarginZeroImportant()===t.firstPageMarginZeroImportant()&&(this.forceHtmlBodyMarginZero()===t.forceHtmlBodyMarginZero()&&(this.widowsOrphans()===t.widowsOrphans()&&(this.widowsOrphansImportant()===t.widowsOrphansImportant()&&(this.imageMaxSizeToFitPage()===t.imageMaxSizeToFitPage()&&(this.imageMaxSizeToFitPageImportant()===t.imageMaxSizeToFitPageImportant()&&(this.imageKeepAspectRatio()===t.imageKeepAspectRatio()&&(this.imageKeepAspectRatioImportant()===t.imageKeepAspectRatioImportant()&&(this.baseFontSizeSpecified()===t.baseFontSizeSpecified()&&((!this.baseFontSizeSpecified()||this.baseFontSize()===t.baseFontSize())&&(this.baseFontSizeImportant()===t.baseFontSizeImportant()&&(this.baseLineHeightSpecified()===t.baseLineHeightSpecified()&&((!this.baseLineHeightSpecified()||this.baseLineHeight()===t.baseLineHeight())&&(this.baseLineHeightImportant()===t.baseLineHeightImportant()&&(this.baseFontFamilySpecified()===t.baseFontFamilySpecified()&&((!this.baseFontFamilySpecified()||this.baseFontFamily()===t.baseFontFamily())&&(this.baseFontFamilyImportant()===t.baseFontFamilyImportant()&&(this.allImportant()===t.allImportant()&&(this.pageOtherStyle()===t.pageOtherStyle()&&(this.firstPageOtherStyle()===t.firstPageOtherStyle()&&(this.rootOtherStyle()===t.rootOtherStyle()&&(this.beforeOtherStyle()===t.beforeOtherStyle()&&(this.afterOtherStyle()===t.afterOtherStyle()&&!(!this.viewerFontSize!=!t.viewerFontSize||this.viewerFontSize&&this.viewerFontSize()!==t.viewerFontSize())))))))))))))))))))))))))))))))))}}b.Mode=f,b.Constants=v,b.PresetSize=m;var y={escapeUnicodeChar:t=>"\\u"+(65536|t.charCodeAt(0)).toString(16).substring(1),escapeUnicodeString(t){return t.replace(/[^-a-zA-Z0-9_]/g,this.escapeUnicodeChar)},percentEncodeAmpersandAndUnencodedPercent:t=>t.replace(/%(?![0-9A-Fa-f]{2})/g,"%25").replace(/&/g,"%26"),percentEncodeAmpersandAndPercent:t=>t.replace(/%/g,"%25").replace(/&/g,"%26"),percentDecodeAmpersandAndPercent:t=>t.replace(/%26/g,"&").replace(/%25/g,"%"),percentEncodeForDataURI:t=>encodeURI(t).replace(/#/g,"%23").replace(/&/g,"%26")};function w(t){return new RegExp(`[#&]${y.escapeUnicodeString(t)}=([^&]*)`,"g")}const E=new class{constructor(){this.history=window?window.history:null,this.location=window?window.location:{href:""},this.storedUrl=this.location.href}getBaseURL(){let t=this.location.href;return t=t.replace(/#.*$/,""),t.replace(/\/[^/]*$/,"/")}hasParameter(t){const e=this.location.href;return w(t).test(e)}getParameter(t){const e=this.location.href,n=w(t),i=[];let r;for(;r=n.exec(e);)i.push(r[1]);return i}setParameter(t,e,n){const i=this.location.href;let r;const o=w(t);let a=o.exec(i);if(a&&n)for(;n-- >=1;)a=o.exec(i);if(a){const t=a[1].length,n=a.index+a[0].length-t;r=i.substring(0,n)+e+i.substring(n+t)}else r=`${i+(i.match(/[#&]$/)?"":i.match(/#/)?"&":"#")+t}=${e}`,"src"===t&&(r=r.replace(/#(?!src)(.*?)&(src=[^&]*)/,"#$2&$1"));null!==this.history&&this.history.replaceState?this.history.replaceState(null,"",r):this.location.href=r,this.storedUrl=r}removeParameter(t,e){const n=this.location.href;let i;const r=w(t);let o=r.exec(n);if(o&&e&&(o=r.exec(n)),o){for(i=n;o;o=r.exec(i)){const t=o.index+o[0].length;i="#"==o[0].charAt(0)?i.substring(0,o.index+1)+i.substring(t+1):i.substring(0,o.index)+i.substring(t),r.lastIndex-=o[0].length}i=i.replace(/^(.*?)[#&]$/,"$1"),null!==this.history&&this.history.replaceState?this.history.replaceState(null,"",i):this.location.href=i}this.storedUrl=i}};class S{constructor(){const t=function(){const t=E.getParameter("src"),e=E.getParameter("b"),n=E.getParameter("x"),i=E.getParameter("bookMode")[0],r=E.getParameter("f")[0],o=E.getParameter("style"),a=E.getParameter("userStyle");return{srcUrls:t.length?t:e.length?e:n.length?n:null,bookMode:"true"===i||"false"!==i&&!!e.length,fragment:r||null,authorStyleSheet:o.length?o:[],userStyleSheet:a.length?a:[]}}();this.srcUrls=e.observable(t.srcUrls||null),this.bookMode=e.observable(t.bookMode),this.fragment=e.observable(t.fragment||""),this.authorStyleSheet=e.observable(t.authorStyleSheet),this.userStyleSheet=e.observable(t.userStyleSheet),this.pageStyle=new b,this.dataUserStyleIndex=-1,this.bookMode.subscribe(t=>{t?E.setParameter("bookMode",t.toString()):E.removeParameter("bookMode")}),this.fragment.subscribe(t=>{if(/^epubcfi\(\/([246]\/)?2!\)/.test(t))E.removeParameter("f");else{const e=t.replace(/[\s+&?=#\u007F-\uFFFF]+/g,encodeURIComponent);E.setParameter("f",e)}}),t.userStyleSheet.find((t,e)=>{if(/^data:,.*?\/\*(?:<|%3C)viewer(?:>|%3E)\*\//.test(t)){this.dataUserStyleIndex=e;const n=t.replace(/^data:,/,"").replace(/%(?![0-9A-Fa-f]{2})/g,"%25"),i=decodeURIComponent(n);return this.pageStyle.cssText(i),!0}return!1}),this.pageStyle.cssText.subscribe(t=>{this.updateUserStyleSheetFromCSSText(t)})}toObject(){function t(t){return t.map(t=>({url:t}))}const e=t(this.userStyleSheet());return this.pageStyle.pageSizeMode()==b.Mode.Default&&e.unshift({text:"@page{size:auto}"}),{fragment:this.fragment(),authorStyleSheet:t(this.authorStyleSheet()),userStyleSheet:e}}updateUserStyleSheetFromCSSText(t){null==t&&(t=this.pageStyle.toCSSText());const e=this.userStyleSheet();if((!t||/^\s*(\/\*.*?\*\/\s*)*$/.test(t))&&e.length<=(-1==this.dataUserStyleIndex?0:1))return e.pop(),this.dataUserStyleIndex=-1,this.userStyleSheet(e),void E.removeParameter("userStyle");const n="data:,"+y.percentEncodeForDataURI(t.trim());-1==this.dataUserStyleIndex?(e.push(n),this.dataUserStyleIndex=e.length-1):e[this.dataUserStyleIndex]=n,this.userStyleSheet(e),E.setParameter("userStyle",n,this.dataUserStyleIndex)}}class N{toSpreadViewString(){switch(this){case C.SPREAD:return"true";case C.SINGLE_PAGE:return"false";case C.AUTO_SPREAD:return"auto";default:throw new Error("Invalid PageViewMode")}}toString(){switch(this){case C.SPREAD:return"spread";case C.SINGLE_PAGE:return"singlePage";case C.AUTO_SPREAD:return"autoSpread";default:throw new Error("Invalid PageViewMode")}}}const C={AUTO_SPREAD:new N,SINGLE_PAGE:new N,SPREAD:new N,defaultMode(){return this.AUTO_SPREAD},fromSpreadViewString(t){switch(t){case"true":return this.SPREAD;case"false":return this.SINGLE_PAGE;case"auto":default:return this.AUTO_SPREAD}},of(t){switch(t){case p.PageViewMode.SPREAD:return this.SPREAD;case p.PageViewMode.SINGLE_PAGE:return this.SINGLE_PAGE;case p.PageViewMode.AUTO_SPREAD:return this.AUTO_SPREAD;default:throw new Error("Invalid PageViewMode name: "+t)}}};class T{constructor(t){this.zoom=t}get fitToScreen(){return null}getCurrentZoomFactor(t){return 1}toggleFitToScreen(){return new T(1)}zoomIn(t){return new I(1.25*this.getCurrentZoomFactor(t))}zoomOut(t){return new I(.8*this.getCurrentZoomFactor(t))}zoomToActualSize(){return new I(1)}static createDefaultOptions(){return new x}static createFromZoomFactor(t){return new I(t)}}class x extends T{constructor(){super(1)}get fitToScreen(){return!0}toggleFitToScreen(){return new I(1)}getCurrentZoomFactor(t){return t.queryZoomFactor(p.ZoomType.FIT_INSIDE_VIEWPORT)}}class I extends T{get fitToScreen(){return!1}toggleFitToScreen(){return new x}getCurrentZoomFactor(){return this.zoom}}function P(){return{renderAllPages:!0,fontSize:16,profile:!1,pageViewMode:C.defaultMode(),zoom:T.createDefaultOptions()}}class A{constructor(t){if(this.renderAllPages=e.observable(),this.fontSize=e.observable(),this.profile=e.observable(),this.pageViewMode=e.observable(),this.zoom=e.observable(),t)this.copyFrom(t);else{const t=P(),e=function(){const t=E.getParameter("renderAllPages")[0],e=E.getParameter("fontSize")[0],n=/^([\d.]+)(?:(%25|%)|\/([\d.]+))?$/.exec(e);let i=null;if(n){const[,t,e,r]=n;i=parseFloat(t),(e||r)&&(i=16*i/(e?100:parseFloat(r))),i<5&&(i=5),i>72&&(i=72)}return{renderAllPages:"true"===t||"false"!==t&&(!E.hasParameter("b")&&null),fontSize:i,profile:"true"===E.getParameter("profile")[0],pageViewMode:C.fromSpreadViewString(E.getParameter("spread")[0]),zoom:void 0}}();this.renderAllPages(null!==e.renderAllPages?e.renderAllPages:t.renderAllPages),this.fontSize(e.fontSize||t.fontSize),this.profile(e.profile||t.profile),this.pageViewMode(e.pageViewMode||t.pageViewMode),this.zoom(t.zoom),this.pageViewMode.subscribe(e=>{e===t.pageViewMode?E.removeParameter("spread"):E.setParameter("spread",e.toSpreadViewString())}),this.renderAllPages.subscribe(e=>{e===t.renderAllPages?E.removeParameter("renderAllPages"):E.setParameter("renderAllPages",e.toString())}),this.fontSize.subscribe(e=>{"number"==typeof e&&(e=e.toPrecision(10).replace(/(?:\.0*|(\.\d*?)0+)$/,"$1")),Number(e)==t.fontSize?E.removeParameter("fontSize"):E.setParameter("fontSize",`${e}/${t.fontSize}`)})}}copyFrom(t){this.renderAllPages(t.renderAllPages()),this.fontSize(t.fontSize()),this.profile(t.profile()),this.pageViewMode(t.pageViewMode()),this.zoom(t.zoom())}toObject(){return{renderAllPages:this.renderAllPages(),fontSize:Number(this.fontSize()),pageViewMode:this.pageViewMode().toString(),fitToScreen:this.zoom().fitToScreen,zoom:this.zoom().zoom}}}A.getDefaultValues=P;var O,R=e.observableArray();!function(t){t.Debug="debug",t.Info="info",t.Warn="warn",t.Error="error"}(O||(O={}));class k{constructor(){this.logLevel=O.Error}static getLogger(){return new k}setLogLevel(t){this.logLevel=t}debug(t){this.logLevel===O.Debug&&R.push({type:"debug",content:t})}info(t){this.logLevel!==O.Debug&&this.logLevel!==O.Info||R.push({type:"info",content:t})}warn(t){this.logLevel!==O.Debug&&this.logLevel!==O.Info&&this.logLevel!==O.Warn||R.push({type:"warn",content:t})}error(t){this.logLevel!==O.Debug&&this.logLevel!==O.Info&&this.logLevel!==O.Warn&&this.logLevel!==O.Error||R.push({type:"error",content:t})}}const L={readonlyObservable(t){const n=e.observable(t);return{getter:e.pureComputed(()=>n()),value:n}}};class F{constructor(t,n){this.viewerOptions_=n,this.documentOptions_=null,this.coreViewer_=new p.CoreViewer(t,n.toObject());const i=this.state_={status:L.readonlyObservable(p.ReadyState.LOADING),pageProgression:L.readonlyObservable(p.PageProgression.LTR)};this.state={status:i.status.getter.extend({rateLimit:{timeout:100,method:"notifyWhenChangesStop"},notify:"always"}),navigatable:e.pureComputed(()=>i.status.value()&&i.status.value()!==p.ReadyState.LOADING),pageProgression:i.pageProgression.getter},this.epage=e.observable(),this.epageCount=e.observable(),this.firstPage=e.observable(),this.lastPage=e.observable(),this.tocVisible=e.observable(),this.tocPinned=e.observable(),this.inputUrl=e.observable(""),this.setupViewerEventHandler(),this.setupViewerOptionSubscriptions()}setupViewerEventHandler(){const t=k.getLogger();this.coreViewer_.addListener("debug",e=>{t.debug(e.content)}),this.coreViewer_.addListener("info",e=>{t.info(e.content)}),this.coreViewer_.addListener("warn",e=>{t.warn(e.content)}),this.coreViewer_.addListener("error",e=>{t.error(e.content)}),this.coreViewer_.addListener("readystatechange",()=>{const t=this.coreViewer_.readyState;t!==p.ReadyState.INTERACTIVE&&t!==p.ReadyState.COMPLETE||this.state_.pageProgression.value(this.coreViewer_.getCurrentPageProgression()),this.state_.status.value(t)}),this.coreViewer_.addListener("loaded",()=>{this.viewerOptions_.profile()&&p.profiler.printTimings()}),this.coreViewer_.addListener("nav",t=>{const{cfi:e,first:n,last:i,epage:r,epageCount:o,metadata:a,docTitle:s}=t;if(e&&this.documentOptions_.fragment(e),void 0!==n&&this.firstPage(n),void 0!==i&&this.lastPage(i),void 0!==r&&this.epage(r),void 0!==o&&this.epageCount(o),a||s){const t=a&&a["http://purl.org/dc/terms/title"],e=t&&t[0]&&t[0].v;e?!s||s===e||this.firstPage()||/\.xhtml$/.test(s)?document.title=e:document.title=`${s} | ${e}`:document.title=s||"Vivliostyle Viewer"}const l=this.tocVisible(),u=this.coreViewer_.isTOCVisible();l&&!u||this.tocVisible(u)}),this.coreViewer_.addListener("hyperlink",t=>{t.internal?(this.navigateToInternalUrl(t.href),this.tocVisible()&&this.tocVisible(!1),document.getElementById("vivliostyle-viewer-viewport").focus()):window.location.href=t.href})}setupViewerOptionSubscriptions(){e.computed((function(){const t=this.viewerOptions_.toObject();this.coreViewer_.setOptions(t)}),this).extend({rateLimit:0})}loadDocument(t,e){this.state_.status.value(p.ReadyState.LOADING),e&&this.viewerOptions_.copyFrom(e),this.documentOptions_=t,t.srcUrls()?t.bookMode()?this.coreViewer_.loadPublication(t.srcUrls()[0],t.toObject(),this.viewerOptions_.toObject()):this.coreViewer_.loadDocument(t.srcUrls(),t.toObject(),this.viewerOptions_.toObject()):this.state_.status.value("")}navigateToPrevious(){this.coreViewer_.navigateToPage(p.Navigation.PREVIOUS)}navigateToNext(){this.coreViewer_.navigateToPage(p.Navigation.NEXT)}navigateToLeft(){this.coreViewer_.navigateToPage(p.Navigation.LEFT)}navigateToRight(){this.coreViewer_.navigateToPage(p.Navigation.RIGHT)}navigateToFirst(){this.coreViewer_.navigateToPage(p.Navigation.FIRST)}navigateToLast(){this.coreViewer_.navigateToPage(p.Navigation.LAST)}navigateToEPage(t){this.coreViewer_.navigateToPage(p.Navigation.EPAGE,t)}navigateToInternalUrl(t){this.coreViewer_.navigateToInternalUrl(t)}queryZoomFactor(t){return this.coreViewer_.queryZoomFactor(t)}epageToPageNumber(t){if(!t&&0!=t)return;return Math.round(t+1)}epageFromPageNumber(t){if(!t&&0!=t)return;return t-1}showTOC(t,e){if(null==this.coreViewer_.isTOCVisible())return;const n=null==t?!this.tocVisible():t;this.tocVisible(n),this.tocPinned(!!n&&!e),this.coreViewer_.showTOC(n,e)}}const _={Unidentified:"Unidentified",ArrowDown:"ArrowDown",ArrowLeft:"ArrowLeft",ArrowRight:"ArrowRight",ArrowUp:"ArrowUp",Home:"Home",End:"End",PageDown:"PageDown",PageUp:"PageUp",Escape:"Escape",Enter:"Enter",Space:" "};var D={Keys:_,identifyKeyFromEvent:function(t){const e=t.key,n=t.keyIdentifier,i=t.location;return e===_.ArrowDown||"Down"===e||"Down"===n?t.metaKey?_.End:_.ArrowDown:e===_.ArrowLeft||"Left"===e||"Left"===n?_.ArrowLeft:e===_.ArrowRight||"Right"===e||"Right"===n?_.ArrowRight:e===_.ArrowUp||"Up"===e||"Up"===n?t.metaKey?_.Home:_.ArrowUp:e===_.Escape||"Esc"===e||"U+001B"===n?_.Escape:e===_.Enter||"Enter"===n?_.Enter:e===_.Space||"U+0020"===n?_.Space:"0"===e||"U+0030"===n?"0":"+"===e||"Add"===e||"U+002B"===n||"U+00BB"===n||"U+004B"===n&&i===KeyboardEvent.DOM_KEY_LOCATION_NUMPAD?"+":"-"===e||"Subtract"===e||"U+002D"===n||"U+00BD"===n||"U+004D"===n&&i===KeyboardEvent.DOM_KEY_LOCATION_NUMPAD?"-":e||n||_.Unidentified}};const{Keys:B}=D;class M{constructor(t,n,i,r){this.viewerOptions_=t,this.viewer_=n,this.settingsPanel_=i,this.justClicked=!1,this.isDisabled=e.pureComputed(()=>this.settingsPanel_.opened()&&!this.settingsPanel_.pinned()||!this.viewer_.state.navigatable());const o=e.pureComputed(()=>r.disablePageNavigation||this.isDisabled());o.subscribe(t=>{const e=document.getElementById("vivliostyle-page-number");e&&(e.disabled=t)}),this.isPageNumberDisabled=e.pureComputed(()=>o()),this.isNavigateToPreviousDisabled=e.pureComputed(()=>!!o()||void 0!==this.viewer_.state.status&&this.viewer_.firstPage()),this.isNavigateToNextDisabled=e.pureComputed(()=>!!o()||void 0!==this.viewer_.state.status&&((!this.viewerOptions_.renderAllPages()||this.viewer_.state.status()==p.ReadyState.COMPLETE)&&this.viewer_.lastPage())),this.isNavigateToLeftDisabled=e.pureComputed(()=>!!o()||void 0!==this.viewer_.state.pageProgression&&(this.viewer_.state.pageProgression()===p.PageProgression.LTR?this.isNavigateToPreviousDisabled():this.isNavigateToNextDisabled())),this.isNavigateToRightDisabled=e.pureComputed(()=>!!o()||void 0!==this.viewer_.state.pageProgression&&(this.viewer_.state.pageProgression()===p.PageProgression.LTR?this.isNavigateToNextDisabled():this.isNavigateToPreviousDisabled())),this.isNavigateToFirstDisabled=this.isNavigateToPreviousDisabled,this.isNavigateToLastDisabled=e.pureComputed(()=>!!o()||void 0!==this.viewer_.state.status&&(!(!this.viewerOptions_.renderAllPages()||this.viewer_.state.status()==p.ReadyState.COMPLETE)||this.viewer_.lastPage())),this.hidePageNavigation=!!r.disablePageNavigation;const a=e.pureComputed(()=>r.disableZoom||this.isDisabled());this.isZoomOutDisabled=a,this.isZoomInDisabled=a,this.isZoomToActualSizeDisabled=a,this.isToggleFitToScreenDisabled=a,this.hideZoom=!!r.disableZoom,this.fitToScreen=e.pureComputed(()=>t.zoom().fitToScreen);const s=e.pureComputed(()=>r.disableFontSizeChange||this.isDisabled());this.isIncreaseFontSizeDisabled=e.pureComputed(()=>!!s()||this.viewerOptions_.fontSize()>=72),this.isDecreaseFontSizeDisabled=e.pureComputed(()=>!!s()||this.viewerOptions_.fontSize()<=5),this.isDefaultFontSizeDisabled=s,this.hideFontSizeChange=!!r.disableFontSizeChange,this.isTOCToggleDisabled=e.pureComputed(()=>r.disableTOCNavigation||this.isDisabled()||null==this.viewer_.tocVisible()),this.hideTOCNavigation=!!r.disableTOCNavigation,this.pageNumber=e.pureComputed({read(){return this.viewer_.epageToPageNumber(this.viewer_.epage())},write(t){const e=this.viewer_.epage(),n=this.viewer_.epageToPageNumber(e);let i=parseFloat(t.toString().replace(/[０-９]/g,t=>String.fromCharCode(t.charCodeAt(0)-65248)))||0;if(/^[-+]/.test(t.toString())&&(i=n+i),i<1)i=1;else{const t=this.viewer_.epageCount();this.viewerOptions_.renderAllPages()?i>t&&(i=t):i>t+1&&(i=t+1)}const r=this.viewer_.epageFromPageNumber(i),o=document.getElementById("vivliostyle-page-number");o.value=i.toString(),this.viewer_.navigateToEPage(r),setTimeout(()=>{this.viewer_.state.status()!=p.ReadyState.LOADING&&this.viewer_.epage()===e&&(o.value=n.toString()),document.getElementById("vivliostyle-viewer-viewport").focus()},10)},owner:this}),this.totalPages=e.pureComputed(()=>{let t=this.viewer_.epageCount();if(!t)return t;const e=Number(this.pageNumber());return this.viewer_.lastPage()?t=e:e>=t&&t++,t}),["navigateToPrevious","navigateToNext","navigateToLeft","navigateToRight","navigateToFirst","navigateToLast","zoomIn","zoomOut","zoomToActualSize","toggleFitToScreen","increaseFontSize","decreaseFontSize","defaultFontSize","onclickViewport","toggleTOC"].forEach(t=>{this[t]=this[t].bind(this)})}static PREVIOUS(t){throw new Error("Method not implemented.")}static NEXT(t){throw new Error("Method not implemented.")}static LEFT(t){throw new Error("Method not implemented.")}static RIGHT(t){throw new Error("Method not implemented.")}static FIRST(t){throw new Error("Method not implemented.")}static LAST(t){throw new Error("Method not implemented.")}static EPAGE(t,e){throw new Error("Method not implemented.")}navigateToPrevious(){return!this.isNavigateToPreviousDisabled()&&(this.viewer_.navigateToPrevious(),!0)}navigateToNext(){return!this.isNavigateToNextDisabled()&&(this.viewer_.navigateToNext(),!0)}navigateToLeft(){return!this.isNavigateToLeftDisabled()&&(this.viewer_.navigateToLeft(),!0)}navigateToRight(){return!this.isNavigateToRightDisabled()&&(this.viewer_.navigateToRight(),!0)}navigateToFirst(){return!this.isNavigateToFirstDisabled()&&(this.viewer_.navigateToFirst(),!0)}navigateToLast(){return!this.isNavigateToLastDisabled()&&(this.viewer_.navigateToLast(),!0)}zoomIn(){if(this.isZoomInDisabled())return!1;{const t=this.viewerOptions_.zoom();return this.viewerOptions_.zoom(t.zoomIn(this.viewer_)),!0}}zoomOut(){if(this.isZoomOutDisabled())return!1;{const t=this.viewerOptions_.zoom();return this.viewerOptions_.zoom(t.zoomOut(this.viewer_)),!0}}zoomToActualSize(){if(this.isZoomToActualSizeDisabled())return!1;{const t=this.viewerOptions_.zoom();return this.viewerOptions_.zoom(t.zoomToActualSize()),!0}}toggleFitToScreen(){if(this.isToggleFitToScreenDisabled())return!1;{const t=this.viewerOptions_.zoom();return this.viewerOptions_.zoom(t.toggleFitToScreen()),!0}}increaseFontSize(){if(this.isIncreaseFontSizeDisabled())return!1;{let t=Number(this.viewerOptions_.fontSize());return t=t<10?Math.floor(t)+1:t<20?2*(Math.floor(t/2)+1):t<40?4*(Math.floor(t/4)+1):t<72?8*(Math.floor(t/8)+1):72,this.viewerOptions_.fontSize(t),this.updateFontSizeSettings(),!0}}decreaseFontSize(){if(this.isDecreaseFontSizeDisabled())return!1;{let t=Number(this.viewerOptions_.fontSize());return t=t>40?8*(Math.ceil(t/8)-1):t>20?4*(Math.ceil(t/4)-1):t>10?2*(Math.ceil(t/2)-1):t>5?Math.ceil(t)-1:5,this.viewerOptions_.fontSize(t),this.updateFontSizeSettings(),!0}}defaultFontSize(){if(this.isDefaultFontSizeDisabled())return!1;{const t=A.getDefaultValues().fontSize;return this.viewerOptions_.fontSize(t),this.updateFontSizeSettings(),!0}}updateFontSizeSettings(){this.settingsPanel_.state.viewerOptions.fontSize(this.viewerOptions_.fontSize()),this.viewer_.documentOptions_.pageStyle.baseFontSizeSpecified()&&(this.viewer_.documentOptions_.updateUserStyleSheetFromCSSText(),this.viewer_.loadDocument(this.viewer_.documentOptions_,this.viewerOptions_))}onclickViewport(){if(this.settingsPanel_.justClicked)return!0;if(this.viewer_.tocVisible()&&!this.viewer_.tocPinned()){const t=document.querySelector("[data-vivliostyle-toc-box]");t&&!t.contains(document.activeElement)&&this.toggleTOC()}return this.settingsPanel_.opened()&&!this.settingsPanel_.pinned()&&this.settingsPanel_.close(),!0}toggleTOC(){if(this.isTOCToggleDisabled())return!1;{let t=null;return this.viewer_.tocVisible()?this.justClicked?(this.viewer_.showTOC(!0,!1),this.justClicked=!1):(null!==t&&(clearInterval(t),t=null),this.viewer_.showTOC(!1),this.justClicked=!0,setTimeout(()=>{this.justClicked&&(document.getElementById("vivliostyle-viewer-viewport").focus(),this.justClicked=!1)},300)):(this.justClicked?(this.viewer_.showTOC(!0,!1),this.justClicked=!1):(this.viewer_.showTOC(!0,!0),this.justClicked=!0),t=setInterval(()=>{const e=document.querySelector("[data-vivliostyle-toc-box]");e&&"visible"===e.style.visibility&&(e.tabIndex=0,e.focus(),clearInterval(t),t=null),this.justClicked=!1},300)),!0}}navigateTOC(t){const e=Array.from(document.querySelectorAll("[data-vivliostyle-toc-box]>*>*>*>*>*:not([hidden]) [tabindex='0'],[data-vivliostyle-toc-box]>*>*>*>*>*:not([hidden]) a[href]:not([tabindex='-1'])"));let n=e.indexOf(document.activeElement);const i=t=>e[t]&&"button"===e[t].getAttribute("role"),r=t=>e[t]&&"true"===e[t].getAttribute("aria-expanded");switch(t){case B.ArrowLeft:if(-1==n){n=e.length-1;break}if(!i(n)&&i(n-1)&&n--,i(n)&&r(n))e[n].click();else for(let t=n-1;t>=0;t--)if(i(t)&&e[t].parentElement.contains(e[n])){n=t;break}break;case B.ArrowRight:if(-1==n){n=0;break}!i(n)&&i(n-1)&&n--,i(n)&&(r(n)?n+=2:e[n].click());break;case B.ArrowDown:n++;break;case B.ArrowUp:if(-1==n){n=e.length-1;break}n>0&&i(--n)&&n--;break;case B.Home:n=0;break;case B.End:n=e.length-1;break;case B.Space:!i(n)&&i(n-1)&&n--,i(n)&&e[n].click()}return i(n)&&n++,e[n]&&e[n].focus(),!0}handleKey(t){if(this.settingsPanel_.opened()&&this.settingsPanel_.settingsToggle.contains(document.activeElement))return!0;const e=document.getElementById("vivliostyle-page-number"),n=document.getElementById("vivliostyle-viewer-viewport"),i=n.scrollWidth>n.clientWidth,r=n.scrollHeight>n.clientHeight,o=e===document.activeElement,a=this.viewer_.tocVisible()&&!o&&n!=document.activeElement;switch(t){case"+":return o||!this.increaseFontSize();case"-":return o||!this.decreaseFontSize();case"0":return o||!this.defaultFontSize();case"1":return o||!this.zoomToActualSize();case B.ArrowLeft:return a?!this.navigateTOC(t):o||i||!this.navigateToLeft();case B.ArrowRight:return a?!this.navigateTOC(t):o||i||!this.navigateToRight();case B.ArrowDown:return a?!this.navigateTOC(t):(n.focus(),r||!this.navigateToNext());case B.ArrowUp:return a?!this.navigateTOC(t):(n.focus(),r||!this.navigateToPrevious());case B.PageDown:return!!a||(n.focus(),!this.navigateToNext());case B.PageUp:return!!a||(n.focus(),!this.navigateToPrevious());case B.Home:return a?!this.navigateTOC(t):(n.focus(),!this.navigateToFirst());case B.End:return a?!this.navigateTOC(t):(n.focus(),!this.navigateToLast());case"o":case"O":return n.focus(),!this.zoomOut();case"i":case"I":return n.focus(),!this.zoomIn();case"f":case"F":return n.focus(),!this.toggleFitToScreen();case"g":case"G":return e.focus(),!1;case"t":case"T":return n.focus(),!this.toggleTOC();case B.Escape:return this.viewer_.tocVisible()?!this.toggleTOC():(n.focus(),!0);case B.Space:return a?!this.navigateTOC(t):"button"!==document.activeElement.getAttribute("role")||(document.activeElement.click(),!1);default:return!0}}}const{Keys:U}=D;class z{constructor(t,n,i,r,o){this.viewerOptions_=t,this.documentOptions_=n,this.viewer_=i,this.isPageStyleChangeDisabled=!!o.disablePageStyleChange,this.isOverrideDocumentStyleSheetDisabled=this.isPageStyleChangeDisabled,this.isPageViewModeChangeDisabled=!!o.disablePageViewModeChange,this.isBookModeChangeDisabled=!!o.disableBookModeChange,this.isRenderAllPagesChangeDisabled=!!o.disableRenderAllPagesChange,this.justClicked=!1,this.settingsToggle=document.getElementById("vivliostyle-menu-item_settings-toggle"),this.opened=e.observable(!1),this.pinned=e.observable(!1),this.state={viewerOptions:new A(t),pageStyle:new b(n.pageStyle),pageViewMode:e.pureComputed({read:()=>this.state.viewerOptions.pageViewMode().toString(),write:t=>{this.state.viewerOptions.pageViewMode(C.of(t))}}),bookMode:e.observable(n.bookMode()),renderAllPages:e.pureComputed({read:()=>this.state.viewerOptions.renderAllPages(),write:t=>{this.state.viewerOptions.renderAllPages(t)}})},this.state.pageStyle.setViewerFontSizeObservable(this.state.viewerOptions.fontSize),this.defaultPageStyle=new b,["close","toggle","apply","cancel","resetUserStyle"].forEach((function(t){this[t]=this[t].bind(this)}),this),r.visible.subscribe((function(t){t&&this.close()}),this),this.state.bookMode.subscribe(t=>{n.bookMode(t)}),this.state.renderAllPages.subscribe(e=>{t.renderAllPages(e)})}close(){this.opened(!1),this.pinned(!1);const t=document.getElementById("vivliostyle-viewer-viewport");return t&&t.focus(),!0}toggle(){this.opened()?this.justClicked?(this.justClicked=!1,this.pinned(!0)):(this.close(),this.justClicked=!0,setTimeout(()=>{this.justClicked=!1},300)):(this.viewer_.tocPinned()||this.viewer_.showTOC(!1),this.opened(!0),this.justClicked?(this.justClicked=!1,this.pinned(!0)):(this.pinned(!1),this.justClicked=!0,this.focusToFirstItem(),setTimeout(()=>{this.justClicked=!1},300)))}apply(){this.documentOptions_.pageStyle.copyFrom(this.state.pageStyle),this.documentOptions_.pageStyle.baseFontSizeSpecified()&&this.documentOptions_.updateUserStyleSheetFromCSSText(),this.viewer_.loadDocument(this.documentOptions_,this.state.viewerOptions),this.pinned()?this.focusToFirstItem():this.close()}cancel(){this.state.viewerOptions.copyFrom(this.viewerOptions_),this.state.pageStyle.copyFrom(this.documentOptions_.pageStyle),this.close()}resetUserStyle(){return this.state.pageStyle.copyFrom(this.defaultPageStyle),this.state.viewerOptions.fontSize(A.getDefaultValues().fontSize),setTimeout(()=>{document.getElementsByName("vivliostyle-settings_reset-user-style")[0].checked=!1},200),!0}focusToFirstItem(t){const e=t||this.settingsToggle,n=["input","textarea","summary"].includes(e.localName)?e:Array.from(e.getElementsByTagName("input")).find(t=>!t.disabled&&("radio"!=t.type||t.checked));if(n){for(let t=n.parentElement;t&&t!=this.settingsToggle;t=t.parentElement)"details"==t.localName&&(t.open=!0);n.focus()}}handleKey(t){const e=this.opened()&&this.settingsToggle.contains(document.activeElement),n=e&&("text"==document.activeElement.type||"select"==document.activeElement.localName),i=e&&"textarea"==document.activeElement.localName,r=e&&!n&&!i;switch(t){case U.Escape:return this.opened()&&(this.cancel(),this.close()),!0;case"s":case"S":return!(!this.opened()||r||!e)||(this.toggle(),!1);case"p":case"P":return!r||(this.focusToFirstItem(document.getElementById("vivliostyle-settings_page-view-and-rendering").firstElementChild),!1);case"v":case"V":return!r||(this.focusToFirstItem(document.getElementById("vivliostyle-settings_page-view-mode")),!1);case"b":case"B":return!r||(this.focusToFirstItem(document.getElementsByName("vivliostyle-settings_book-mode")[0]),!1);case"a":case"A":return!r||(this.focusToFirstItem(document.getElementsByName("vivliostyle-settings_render-all-pages")[0]),!1);case"u":case"U":return!r||(this.focusToFirstItem(document.getElementById("vivliostyle-settings_user-style").firstElementChild),!1);case"z":case"Z":return!r||(this.focusToFirstItem(document.getElementById("vivliostyle-settings_page-size")),!1);case"m":case"M":return!r||(this.focusToFirstItem(document.getElementById("vivliostyle-settings_page-margin")),!1);case"k":case"K":return!r||(this.focusToFirstItem(document.getElementById("vivliostyle-settings_page-breaks")),!1);case"i":case"I":return!r||(this.focusToFirstItem(document.getElementById("vivliostyle-settings_images")),!1);case"t":case"T":return!r||(this.focusToFirstItem(document.getElementById("vivliostyle-settings_text")),!1);case"o":case"O":return!r||(this.focusToFirstItem(document.getElementsByName("vivliostyle-settings_override-document-stylesheets")[0]),!1);case"c":case"C":return!r||(this.focusToFirstItem(document.getElementsByName("vivliostyle-settings_css-details")[0]),!1);case"r":case"R":return!r||(this.focusToFirstItem(document.getElementsByName("vivliostyle-settings_reset-user-style")[0]),!1);case U.Enter:return!(n||r&&"vivliostyle-menu-button_apply"!==document.activeElement.id&&"vivliostyle-menu-button_reset"!==document.activeElement.id)||(document.getElementById("vivliostyle-menu-button_apply").focus(),!1);default:return!0}}}class V{constructor(t){this.list=t,this.visible=e.pureComputed(()=>t().length>0)}getDisplayMessage(t){const e=t.error;let n=e&&(e.toString()||e.frameTrace||e.stack);return n&&(n=n.split("\n",1)[0]),n||(n=t.messages.join("\n")),n}}function H(){this.documentOptions=new S,this.viewerOptions=new A,this.documentOptions.pageStyle.setViewerFontSizeObservable(this.viewerOptions.fontSize),this.viewerOptions.profile()&&g.profiler.enable(),this.isDebug="true"===E.getParameter("debug")[0],this.viewerSettings={userAgentRootURL:E.getBaseURL()+"resources/",viewportElement:document.getElementById("vivliostyle-viewer-viewport"),debug:this.isDebug};const t=E.getParameter("src"),e=E.getParameter("b"),n=E.getParameter("x");t.length||(e.length?(E.setParameter("src",e[0]),E.setParameter("bookMode","true"),E.hasParameter("renderAllPages")||E.setParameter("renderAllPages","false")):n.length&&n.forEach((t,e)=>{E.setParameter("src",t,e)})),E.removeParameter("b"),E.removeParameter("x"),E.removeParameter("f",!0),E.removeParameter("spread",!0),E.removeParameter("bookMode",!0),E.removeParameter("renderAllPages",!0),E.removeParameter("fontSize",!0),E.removeParameter("profile",!0),E.removeParameter("debug",!0),this.viewer=new F(this.viewerSettings,this.viewerOptions),this.viewer.inputUrl.subscribe(t=>{""!=t?(E.hasParameter("src")||E.history.pushState&&E.history.pushState(null,""),t=t.startsWith("<")?"data:,"+y.percentEncodeForDataURI(t):y.percentEncodeAmpersandAndUnencodedPercent(t),E.setParameter("src",t),this.documentOptions.srcUrls(E.getParameter("src"))):E.removeParameter("src")}),this.messageDialog=new V(R);this.settingsPanel=new z(this.viewerOptions,this.documentOptions,this.viewer,this.messageDialog,{disablePageStyleChange:!1,disablePageViewModeChange:!1,disableBookModeChange:!1,disableRenderAllPagesChange:!1});this.navigation=new M(this.viewerOptions,this.viewer,this.settingsPanel,{disableTOCNavigation:!1,disablePageNavigation:!1,disableZoom:!1,disableFontSizeChange:!1}),this.handleKey=(t,e)=>{const n=D.identifyKeyFromEvent(e);if("vivliostyle-input-url"===document.activeElement.id)return"Enter"!==n||13!==e.keyCode||(this.viewer.loadDocument(this.documentOptions),!1);if("Home"!==n&&"End"!==n&&(e.ctrlKey||e.metaKey)||e.altKey||e.shiftKey)return!0;let i=this.settingsPanel.handleKey(n);return i&&(i=this.navigation.handleKey(n)),i},this.viewer.loadDocument(this.documentOptions),window.onhashchange=()=>{window.location.href!=E.storedUrl&&window.location.reload()}}const G="ontouchstart"in window;e.bindingHandlers.menuButton={init(t,n){e.unwrap(n())&&(G?(t.addEventListener("touchstart",()=>{e.utils.toggleDomNodeCssClass(t,"hover active",!0)}),t.addEventListener("touchend",()=>{e.utils.toggleDomNodeCssClass(t,"hover active",!1)})):(t.addEventListener("mouseover",()=>{e.utils.toggleDomNodeCssClass(t,"hover",!0)}),t.addEventListener("mousedown",()=>{e.utils.toggleDomNodeCssClass(t,"active",!0)}),t.addEventListener("mouseup",()=>{e.utils.toggleDomNodeCssClass(t,"active",!1)}),t.addEventListener("mouseout",()=>{e.utils.toggleDomNodeCssClass(t,"hover",!1),e.utils.toggleDomNodeCssClass(t,"active",!1),window.getSelection().removeAllRanges()})))}};const W="ontouchstart"in window;let X=null,j=null,K=null;e.bindingHandlers.swipePages={init(t,n){W&&e.unwrap(n())&&(t.addEventListener("touchstart",t=>{if(t.touches.length>1)return;if(window.visualViewport&&window.visualViewport.scale>1)return;const e=document.getElementById("vivliostyle-viewer-viewport");e&&e.scrollWidth>e.clientWidth||(X=t.touches[0].clientX,j=t.touches[0].clientY)}),t.addEventListener("touchmove",t=>{if(!(t.touches.length>1)&&null!==X&&null!==j){const n=t.touches[0].clientX-X,i=t.touches[0].clientY-j;Math.abs(n)>Math.abs(i)&&(K=n<0?document.getElementById("vivliostyle-page-navigation-right"):document.getElementById("vivliostyle-page-navigation-left")),Math.abs(n)+Math.abs(i)>=16&&(K&&(K.click(),e.utils.toggleDomNodeCssClass(K,"active",!0)),X=null,j=null)}}),t.addEventListener("touchend",()=>{K&&e.utils.toggleDomNodeCssClass(K,"active",!1),K=null,X=null,j=null}))}},{start(){function t(){e.applyBindings(new H)}window.__loaded?t():window.onload=t}}.start()}));
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
