/**
 * @vivliostyle/viewer v2.5.2
 * Vivliostyle Viewer - HTML+CSS typesetting and rich paged viewing with EPUB/Web publications support
 *
 * @author Vivliostyle Foundation
 * @license AGPL-3.0
 * @preserve
 */
!function(t){"function"==typeof define&&define.amd?define(t):t()}((function(){"use strict";function t(t,e,n){return t(n={path:e,exports:{},require:function(t,e){return function(){throw new Error("Dynamic requires are not currently supported by @rollup/plugin-commonjs")}(null==e&&n.path)}},n.exports),n.exports}var e=t((function(t,e){
/*!
	   * Knockout JavaScript library v3.5.1
	   * (c) The Knockout.js team - http://knockoutjs.com/
	   * License: MIT (http://www.opensource.org/licenses/mit-license.php)
	   */
!function(n){var i=this||(0,eval)("this"),r=i.document,o=i.navigator,a=i.jQuery,s=i.JSON;a||"undefined"==typeof jQuery||(a=jQuery),function(n){n(t.exports||e)}((function(t,e){function u(t,e){return(null===t||typeof t in y)&&t===e}function l(t,e){var i;return function(){i||(i=C.a.setTimeout((function(){i=n,t()}),e))}}function c(t,e){var n;return function(){clearTimeout(n),n=C.a.setTimeout(t,e)}}function h(t,e){e&&"change"!==e?"beforeChange"===e?this.pc(t):this.gb(t,e):this.qc(t)}function f(t,e){null!==e&&e.s&&e.s()}function d(t,e){var n=this.qd,i=n[T];i.ra||(this.Qb&&this.mb[e]?(n.uc(e,t,this.mb[e]),this.mb[e]=null,--this.Qb):i.I[e]||n.uc(e,t,i.J?{da:t}:n.$c(t)),t.Ja&&t.gd())}var p,g,m,v,E,b,C=void 0!==t?t:{};C.b=function(t,e){for(var n=t.split("."),i=C,r=0;r<n.length-1;r++)i=i[n[r]];i[n[n.length-1]]=e},C.L=function(t,e,n){t[e]=n},C.version="3.5.1",C.b("version",C.version),C.options={deferUpdates:!1,useOnlyNativeEvents:!1,foreachHidesDestroyed:!1},C.a=function(){function t(t,e){for(var n in t)c.call(t,n)&&e(n,t[n])}function e(t,e){if(e)for(var n in e)c.call(e,n)&&(t[n]=e[n]);return t}function u(t,e){return t.__proto__=e,t}function l(t,e,n,i){var r=t[e].match(E)||[];C.a.D(n.match(E),(function(t){C.a.Na(r,t,i)})),t[e]=r.join(" ")}var c=Object.prototype.hasOwnProperty,h={__proto__:[]}instanceof Array,f="function"==typeof Symbol,d={},p={};d[o&&/Firefox\/2/i.test(o.userAgent)?"KeyboardEvent":"UIEvents"]=["keyup","keydown","keypress"],d.MouseEvents="click dblclick mousedown mouseup mousemove mouseover mouseout mouseenter mouseleave".split(" "),t(d,(function(t,e){if(e.length)for(var n=0,i=e.length;n<i;n++)p[e[n]]=t}));var g,m={propertychange:!0},v=r&&function(){for(var t=3,e=r.createElement("div"),i=e.getElementsByTagName("i");e.innerHTML="\x3c!--[if gt IE "+ ++t+"]><i></i><![endif]--\x3e",i[0];);return 4<t?t:n}(),E=/\S+/g;return{Jc:["authenticity_token",/^__RequestVerificationToken(_.*)?$/],D:function(t,e,n){for(var i=0,r=t.length;i<r;i++)e.call(n,t[i],i,t)},A:"function"==typeof Array.prototype.indexOf?function(t,e){return Array.prototype.indexOf.call(t,e)}:function(t,e){for(var n=0,i=t.length;n<i;n++)if(t[n]===e)return n;return-1},Lb:function(t,e,i){for(var r=0,o=t.length;r<o;r++)if(e.call(i,t[r],r,t))return t[r];return n},Pa:function(t,e){var n=C.a.A(t,e);0<n?t.splice(n,1):0===n&&t.shift()},wc:function(t){var e=[];return t&&C.a.D(t,(function(t){0>C.a.A(e,t)&&e.push(t)})),e},Mb:function(t,e,n){var i=[];if(t)for(var r=0,o=t.length;r<o;r++)i.push(e.call(n,t[r],r));return i},jb:function(t,e,n){var i=[];if(t)for(var r=0,o=t.length;r<o;r++)e.call(n,t[r],r)&&i.push(t[r]);return i},Nb:function(t,e){if(e instanceof Array)t.push.apply(t,e);else for(var n=0,i=e.length;n<i;n++)t.push(e[n]);return t},Na:function(t,e,n){var i=C.a.A(C.a.bc(t),e);0>i?n&&t.push(e):n||t.splice(i,1)},Ba:h,extend:e,setPrototypeOf:u,Ab:h?u:e,P:t,Ga:function(t,e,n){if(!t)return t;var i,r={};for(i in t)c.call(t,i)&&(r[i]=e.call(n,t[i],i,t));return r},Tb:function(t){for(;t.firstChild;)C.removeNode(t.firstChild)},Yb:function(t){for(var e=((t=C.a.la(t))[0]&&t[0].ownerDocument||r).createElement("div"),n=0,i=t.length;n<i;n++)e.appendChild(C.oa(t[n]));return e},Ca:function(t,e){for(var n=0,i=t.length,r=[];n<i;n++){var o=t[n].cloneNode(!0);r.push(e?C.oa(o):o)}return r},va:function(t,e){if(C.a.Tb(t),e)for(var n=0,i=e.length;n<i;n++)t.appendChild(e[n])},Xc:function(t,e){var n=t.nodeType?[t]:t;if(0<n.length){for(var i=n[0],r=i.parentNode,o=0,a=e.length;o<a;o++)r.insertBefore(e[o],i);for(o=0,a=n.length;o<a;o++)C.removeNode(n[o])}},Ua:function(t,e){if(t.length){for(e=8===e.nodeType&&e.parentNode||e;t.length&&t[0].parentNode!==e;)t.splice(0,1);for(;1<t.length&&t[t.length-1].parentNode!==e;)t.length--;if(1<t.length){var n=t[0],i=t[t.length-1];for(t.length=0;n!==i;)t.push(n),n=n.nextSibling;t.push(i)}}return t},Zc:function(t,e){7>v?t.setAttribute("selected",e):t.selected=e},Db:function(t){return null===t||t===n?"":t.trim?t.trim():t.toString().replace(/^[\s\xa0]+|[\s\xa0]+$/g,"")},Ud:function(t,e){return t=t||"",!(e.length>t.length)&&t.substring(0,e.length)===e},vd:function(t,e){if(t===e)return!0;if(11===t.nodeType)return!1;if(e.contains)return e.contains(1!==t.nodeType?t.parentNode:t);if(e.compareDocumentPosition)return 16==(16&e.compareDocumentPosition(t));for(;t&&t!=e;)t=t.parentNode;return!!t},Sb:function(t){return C.a.vd(t,t.ownerDocument.documentElement)},kd:function(t){return!!C.a.Lb(t,C.a.Sb)},R:function(t){return t&&t.tagName&&t.tagName.toLowerCase()},Ac:function(t){return C.onError?function(){try{return t.apply(this,arguments)}catch(t){throw C.onError&&C.onError(t),t}}:t},setTimeout:function(t,e){return setTimeout(C.a.Ac(t),e)},Gc:function(t){setTimeout((function(){throw C.onError&&C.onError(t),t}),0)},B:function(t,e,n){var i=C.a.Ac(n);if(n=m[e],C.options.useOnlyNativeEvents||n||!a)if(n||"function"!=typeof t.addEventListener){if(void 0===t.attachEvent)throw Error("Browser doesn't support addEventListener or attachEvent");var r=function(e){i.call(t,e)},o="on"+e;t.attachEvent(o,r),C.a.K.za(t,(function(){t.detachEvent(o,r)}))}else t.addEventListener(e,i,!1);else g||(g="function"==typeof a(t).on?"on":"bind"),a(t)[g](e,i)},Fb:function(t,e){if(!t||!t.nodeType)throw Error("element must be a DOM node when calling triggerEvent");var n;if(n=!("input"!==C.a.R(t)||!t.type||"click"!=e.toLowerCase())&&("checkbox"==(n=t.type)||"radio"==n),C.options.useOnlyNativeEvents||!a||n)if("function"==typeof r.createEvent){if("function"!=typeof t.dispatchEvent)throw Error("The supplied element doesn't support dispatchEvent");(n=r.createEvent(p[e]||"HTMLEvents")).initEvent(e,!0,!0,i,0,0,0,0,0,!1,!1,!1,!1,0,t),t.dispatchEvent(n)}else if(n&&t.click)t.click();else{if(void 0===t.fireEvent)throw Error("Browser doesn't support triggering events");t.fireEvent("on"+e)}else a(t).trigger(e)},f:function(t){return C.O(t)?t():t},bc:function(t){return C.O(t)?t.v():t},Eb:function(t,e,n){var i;e&&("object"==typeof t.classList?(i=t.classList[n?"add":"remove"],C.a.D(e.match(E),(function(e){i.call(t.classList,e)}))):"string"==typeof t.className.baseVal?l(t.className,"baseVal",e,n):l(t,"className",e,n))},Bb:function(t,e){var i=C.a.f(e);null!==i&&i!==n||(i="");var r=C.h.firstChild(t);!r||3!=r.nodeType||C.h.nextSibling(r)?C.h.va(t,[t.ownerDocument.createTextNode(i)]):r.data=i,C.a.Ad(t)},Yc:function(t,e){if(t.name=e,7>=v)try{var n=t.name.replace(/[&<>'"]/g,(function(t){return"&#"+t.charCodeAt(0)+";"}));t.mergeAttributes(r.createElement("<input name='"+n+"'/>"),!1)}catch(t){}},Ad:function(t){9<=v&&(t=1==t.nodeType?t:t.parentNode).style&&(t.style.zoom=t.style.zoom)},wd:function(t){if(v){var e=t.style.width;t.style.width=0,t.style.width=e}},Pd:function(t,e){t=C.a.f(t),e=C.a.f(e);for(var n=[],i=t;i<=e;i++)n.push(i);return n},la:function(t){for(var e=[],n=0,i=t.length;n<i;n++)e.push(t[n]);return e},Da:function(t){return f?Symbol(t):t},Zd:6===v,$d:7===v,W:v,Lc:function(t,e){for(var n=C.a.la(t.getElementsByTagName("input")).concat(C.a.la(t.getElementsByTagName("textarea"))),i="string"==typeof e?function(t){return t.name===e}:function(t){return e.test(t.name)},r=[],o=n.length-1;0<=o;o--)i(n[o])&&r.push(n[o]);return r},Nd:function(t){return"string"==typeof t&&(t=C.a.Db(t))?s&&s.parse?s.parse(t):new Function("return "+t)():null},hc:function(t,e,n){if(!s||!s.stringify)throw Error("Cannot find JSON.stringify(). Some browsers (e.g., IE < 8) don't support it natively, but you can overcome this by adding a script reference to json2.js, downloadable from http://www.json.org/json2.js");return s.stringify(C.a.f(t),e,n)},Od:function(e,n,i){var o=(i=i||{}).params||{},a=i.includeFields||this.Jc,s=e;if("object"==typeof e&&"form"===C.a.R(e)){s=e.action;for(var u=a.length-1;0<=u;u--)for(var l=C.a.Lc(e,a[u]),c=l.length-1;0<=c;c--)o[l[c].name]=l[c].value}n=C.a.f(n);var h=r.createElement("form");for(var f in h.style.display="none",h.action=s,h.method="post",n)(e=r.createElement("input")).type="hidden",e.name=f,e.value=C.a.hc(C.a.f(n[f])),h.appendChild(e);t(o,(function(t,e){var n=r.createElement("input");n.type="hidden",n.name=t,n.value=e,h.appendChild(n)})),r.body.appendChild(h),i.submitter?i.submitter(h):h.submit(),setTimeout((function(){h.parentNode.removeChild(h)}),0)}}}(),C.b("utils",C.a),C.b("utils.arrayForEach",C.a.D),C.b("utils.arrayFirst",C.a.Lb),C.b("utils.arrayFilter",C.a.jb),C.b("utils.arrayGetDistinctValues",C.a.wc),C.b("utils.arrayIndexOf",C.a.A),C.b("utils.arrayMap",C.a.Mb),C.b("utils.arrayPushAll",C.a.Nb),C.b("utils.arrayRemoveItem",C.a.Pa),C.b("utils.cloneNodes",C.a.Ca),C.b("utils.createSymbolOrString",C.a.Da),C.b("utils.extend",C.a.extend),C.b("utils.fieldsIncludedWithJsonPost",C.a.Jc),C.b("utils.getFormFields",C.a.Lc),C.b("utils.objectMap",C.a.Ga),C.b("utils.peekObservable",C.a.bc),C.b("utils.postJson",C.a.Od),C.b("utils.parseJson",C.a.Nd),C.b("utils.registerEventHandler",C.a.B),C.b("utils.stringifyJson",C.a.hc),C.b("utils.range",C.a.Pd),C.b("utils.toggleDomNodeCssClass",C.a.Eb),C.b("utils.triggerEvent",C.a.Fb),C.b("utils.unwrapObservable",C.a.f),C.b("utils.objectForEach",C.a.P),C.b("utils.addOrRemoveItem",C.a.Na),C.b("utils.setTextContent",C.a.Bb),C.b("unwrap",C.a.f),Function.prototype.bind||(Function.prototype.bind=function(t){var e=this;if(1===arguments.length)return function(){return e.apply(t,arguments)};var n=Array.prototype.slice.call(arguments,1);return function(){var i=n.slice(0);return i.push.apply(i,arguments),e.apply(t,i)}}),C.a.g=new function(){var t,e,i=0,r="__ko__"+(new Date).getTime(),o={};return C.a.W?(t=function(t,e){var a=t[r];if(!a||"null"===a||!o[a]){if(!e)return n;a=t[r]="ko"+i++,o[a]={}}return o[a]},e=function(t){var e=t[r];return!!e&&(delete o[e],t[r]=null,!0)}):(t=function(t,e){var n=t[r];return!n&&e&&(n=t[r]={}),n},e=function(t){return!!t[r]&&(delete t[r],!0)}),{get:function(e,n){var i=t(e,!1);return i&&i[n]},set:function(e,i,r){(e=t(e,r!==n))&&(e[i]=r)},Ub:function(e,n,i){return(e=t(e,!0))[n]||(e[n]=i)},clear:e,Z:function(){return i+++r}}},C.b("utils.domData",C.a.g),C.b("utils.domData.clear",C.a.g.clear),C.a.K=new function(){function t(t,e){var i=C.a.g.get(t,r);return i===n&&e&&(i=[],C.a.g.set(t,r,i)),i}function e(e){if(n=t(e,!1))for(var n=n.slice(0),r=0;r<n.length;r++)n[r](e);C.a.g.clear(e),C.a.K.cleanExternalData(e),s[e.nodeType]&&i(e.childNodes,!0)}function i(t,n){for(var i,r=[],o=0;o<t.length;o++)if((!n||8===t[o].nodeType)&&(e(r[r.length]=i=t[o]),t[o]!==i))for(;o--&&-1==C.a.A(r,t[o]););}var r=C.a.g.Z(),o={1:!0,8:!0,9:!0},s={1:!0,9:!0};return{za:function(e,n){if("function"!=typeof n)throw Error("Callback must be a function");t(e,!0).push(n)},yb:function(e,i){var o=t(e,!1);o&&(C.a.Pa(o,i),0==o.length&&C.a.g.set(e,r,n))},oa:function(t){return C.u.G((function(){o[t.nodeType]&&(e(t),s[t.nodeType]&&i(t.getElementsByTagName("*")))})),t},removeNode:function(t){C.oa(t),t.parentNode&&t.parentNode.removeChild(t)},cleanExternalData:function(t){a&&"function"==typeof a.cleanData&&a.cleanData([t])}}},C.oa=C.a.K.oa,C.removeNode=C.a.K.removeNode,C.b("cleanNode",C.oa),C.b("removeNode",C.removeNode),C.b("utils.domNodeDisposal",C.a.K),C.b("utils.domNodeDisposal.addDisposeCallback",C.a.K.za),C.b("utils.domNodeDisposal.removeDisposeCallback",C.a.K.yb),p=[0,"",""],E={thead:g=[1,"<table>","</table>"],tbody:g,tfoot:g,tr:[2,"<table><tbody>","</tbody></table>"],td:m=[3,"<table><tbody><tr>","</tr></tbody></table>"],th:m,option:v=[1,"<select multiple='multiple'>","</select>"],optgroup:v},b=8>=C.a.W,C.a.ua=function(t,e){var n;if(a){if(a.parseHTML)n=a.parseHTML(t,e)||[];else if((n=a.clean([t],e))&&n[0]){for(var o=n[0];o.parentNode&&11!==o.parentNode.nodeType;)o=o.parentNode;o.parentNode&&o.parentNode.removeChild(o)}}else{(n=e)||(n=r),o=n.parentWindow||n.defaultView||i;var s,u=C.a.Db(t).toLowerCase(),l=n.createElement("div");for(s=(u=u.match(/^(?:\x3c!--.*?--\x3e\s*?)*?<([a-z]+)[\s>]/))&&E[u[1]]||p,u=s[0],s="ignored<div>"+s[1]+t+s[2]+"</div>","function"==typeof o.innerShiv?l.appendChild(o.innerShiv(s)):(b&&n.body.appendChild(l),l.innerHTML=s,b&&l.parentNode.removeChild(l));u--;)l=l.lastChild;n=C.a.la(l.lastChild.childNodes)}return n},C.a.Md=function(t,e){var n=C.a.ua(t,e);return n.length&&n[0].parentElement||C.a.Yb(n)},C.a.fc=function(t,e){if(C.a.Tb(t),null!==(e=C.a.f(e))&&e!==n)if("string"!=typeof e&&(e=e.toString()),a)a(t).html(e);else for(var i=C.a.ua(e,t.ownerDocument),r=0;r<i.length;r++)t.appendChild(i[r])},C.b("utils.parseHtmlFragment",C.a.ua),C.b("utils.setHtml",C.a.fc),C.aa=function(){function t(e,n){if(e)if(8==e.nodeType)null!=(i=C.aa.Uc(e.nodeValue))&&n.push({ud:e,Kd:i});else if(1==e.nodeType)for(var i=0,r=e.childNodes,o=r.length;i<o;i++)t(r[i],n)}var e={};return{Xb:function(t){if("function"!=typeof t)throw Error("You can only pass a function to ko.memoization.memoize()");var n=(4294967296*(1+Math.random())|0).toString(16).substring(1)+(4294967296*(1+Math.random())|0).toString(16).substring(1);return e[n]=t,"\x3c!--[ko_memo:"+n+"]--\x3e"},bd:function(t,i){var r=e[t];if(r===n)throw Error("Couldn't find any memo with ID "+t+". Perhaps it's already been unmemoized.");try{return r.apply(null,i||[]),!0}finally{delete e[t]}},cd:function(e,n){var i=[];t(e,i);for(var r=0,o=i.length;r<o;r++){var a=i[r].ud,s=[a];n&&C.a.Nb(s,n),C.aa.bd(i[r].Kd,s),a.nodeValue="",a.parentNode&&a.parentNode.removeChild(a)}},Uc:function(t){return(t=t.match(/^\[ko_memo\:(.*?)\]$/))?t[1]:null}}}(),C.b("memoization",C.aa),C.b("memoization.memoize",C.aa.Xb),C.b("memoization.unmemoize",C.aa.bd),C.b("memoization.parseMemoText",C.aa.Uc),C.b("memoization.unmemoizeDomNodeAndDescendants",C.aa.cd),C.na=function(){function t(){if(o)for(var t,e=o,i=0;s<o;)if(t=n[s++]){if(s>e){if(5e3<=++i){s=o,C.a.Gc(Error("'Too much recursion' after processing "+i+" task groups."));break}e=o}try{t()}catch(t){C.a.Gc(t)}}}function e(){t(),s=o=n.length=0}var n=[],o=0,a=1,s=0;return{scheduler:i.MutationObserver?function(t){var e=r.createElement("div");return new MutationObserver(t).observe(e,{attributes:!0}),function(){e.classList.toggle("foo")}}(e):r&&"onreadystatechange"in r.createElement("script")?function(t){var e=r.createElement("script");e.onreadystatechange=function(){e.onreadystatechange=null,r.documentElement.removeChild(e),e=null,t()},r.documentElement.appendChild(e)}:function(t){setTimeout(t,0)},zb:function(t){return o||C.na.scheduler(e),n[o++]=t,a++},cancel:function(t){(t-=a-o)>=s&&t<o&&(n[t]=null)},resetForTesting:function(){var t=o-s;return s=o=n.length=0,t},Sd:t}}(),C.b("tasks",C.na),C.b("tasks.schedule",C.na.zb),C.b("tasks.runEarly",C.na.Sd),C.Ta={throttle:function(t,e){t.throttleEvaluation=e;var n=null;return C.$({read:t,write:function(i){clearTimeout(n),n=C.a.setTimeout((function(){t(i)}),e)}})},rateLimit:function(t,e){var n,i,r;"number"==typeof e?n=e:(n=e.timeout,i=e.method),t.Hb=!1,r="function"==typeof i?i:"notifyWhenChangesStop"==i?c:l,t.ub((function(t){return r(t,n,e)}))},deferred:function(t,e){if(!0!==e)throw Error("The 'deferred' extender only accepts the value 'true', because it is not supported to turn deferral off once enabled.");t.Hb||(t.Hb=!0,t.ub((function(e){var i,r=!1;return function(){if(!r){C.na.cancel(i),i=C.na.zb(e);try{r=!0,t.notifySubscribers(n,"dirty")}finally{r=!1}}}})))},notify:function(t,e){t.equalityComparer="always"==e?null:u}};var y={undefined:1,boolean:1,number:1,string:1};C.b("extenders",C.Ta),C.ic=function(t,e,n){this.da=t,this.lc=e,this.mc=n,this.Ib=!1,this.fb=this.Jb=null,C.L(this,"dispose",this.s),C.L(this,"disposeWhenNodeIsRemoved",this.l)},C.ic.prototype.s=function(){this.Ib||(this.fb&&C.a.K.yb(this.Jb,this.fb),this.Ib=!0,this.mc(),this.da=this.lc=this.mc=this.Jb=this.fb=null)},C.ic.prototype.l=function(t){this.Jb=t,C.a.K.za(t,this.fb=this.s.bind(this))},C.T=function(){C.a.Ab(this,w),w.qb(this)};var w={qb:function(t){t.U={change:[]},t.sc=1},subscribe:function(t,e,n){var i=this;n=n||"change";var r=new C.ic(i,e?t.bind(e):t,(function(){C.a.Pa(i.U[n],r),i.hb&&i.hb(n)}));return i.Qa&&i.Qa(n),i.U[n]||(i.U[n]=[]),i.U[n].push(r),r},notifySubscribers:function(t,e){if("change"===(e=e||"change")&&this.Gb(),this.Wa(e)){var n="change"===e&&this.ed||this.U[e].slice(0);try{C.u.xc();for(var i,r=0;i=n[r];++r)i.Ib||i.lc(t)}finally{C.u.end()}}},ob:function(){return this.sc},Dd:function(t){return this.ob()!==t},Gb:function(){++this.sc},ub:function(t){var e,n,i,r,o,a=this,s=C.O(a);a.gb||(a.gb=a.notifySubscribers,a.notifySubscribers=h);var u=t((function(){a.Ja=!1,s&&r===a&&(r=a.nc?a.nc():a());var t=n||o&&a.sb(i,r);o=n=e=!1,t&&a.gb(i=r)}));a.qc=function(t,n){n&&a.Ja||(o=!n),a.ed=a.U.change.slice(0),a.Ja=e=!0,r=t,u()},a.pc=function(t){e||(i=t,a.gb(t,"beforeChange"))},a.rc=function(){o=!0},a.gd=function(){a.sb(i,a.v(!0))&&(n=!0)}},Wa:function(t){return this.U[t]&&this.U[t].length},Bd:function(t){if(t)return this.U[t]&&this.U[t].length||0;var e=0;return C.a.P(this.U,(function(t,n){"dirty"!==t&&(e+=n.length)})),e},sb:function(t,e){return!this.equalityComparer||!this.equalityComparer(t,e)},toString:function(){return"[object Object]"},extend:function(t){var e=this;return t&&C.a.P(t,(function(t,n){var i=C.Ta[t];"function"==typeof i&&(e=i(e,n)||e)})),e}};C.L(w,"init",w.qb),C.L(w,"subscribe",w.subscribe),C.L(w,"extend",w.extend),C.L(w,"getSubscriptionsCount",w.Bd),C.a.Ba&&C.a.setPrototypeOf(w,Function.prototype),C.T.fn=w,C.Qc=function(t){return null!=t&&"function"==typeof t.subscribe&&"function"==typeof t.notifySubscribers},C.b("subscribable",C.T),C.b("isSubscribable",C.Qc),C.S=C.u=function(){function t(t){i.push(n),n=t}function e(){n=i.pop()}var n,i=[],r=0;return{xc:t,end:e,cc:function(t){if(n){if(!C.Qc(t))throw Error("Only subscribable things can act as dependencies");n.od.call(n.pd,t,t.fd||(t.fd=++r))}},G:function(n,i,r){try{return t(),n.apply(i,r||[])}finally{e()}},qa:function(){if(n)return n.o.qa()},Va:function(){if(n)return n.o.Va()},Ya:function(){if(n)return n.Ya},o:function(){if(n)return n.o}}}(),C.b("computedContext",C.S),C.b("computedContext.getDependenciesCount",C.S.qa),C.b("computedContext.getDependencies",C.S.Va),C.b("computedContext.isInitial",C.S.Ya),C.b("computedContext.registerDependency",C.S.cc),C.b("ignoreDependencies",C.Yd=C.u.G);var D=C.a.Da("_latestValue");C.ta=function(t){function e(){return 0<arguments.length?(e.sb(e[D],arguments[0])&&(e.ya(),e[D]=arguments[0],e.xa()),this):(C.u.cc(e),e[D])}return e[D]=t,C.a.Ba||C.a.extend(e,C.T.fn),C.T.fn.qb(e),C.a.Ab(e,S),C.options.deferUpdates&&C.Ta.deferred(e,!0),e};var S={equalityComparer:u,v:function(){return this[D]},xa:function(){this.notifySubscribers(this[D],"spectate"),this.notifySubscribers(this[D])},ya:function(){this.notifySubscribers(this[D],"beforeChange")}};C.a.Ba&&C.a.setPrototypeOf(S,C.T.fn);var N=C.ta.Ma="__ko_proto__";S[N]=C.ta,C.O=function(t){if((t="function"==typeof t&&t[N])&&t!==S[N]&&t!==C.o.fn[N])throw Error("Invalid object that looks like an observable; possibly from another Knockout instance");return!!t},C.Za=function(t){return"function"==typeof t&&(t[N]===S[N]||t[N]===C.o.fn[N]&&t.Nc)},C.b("observable",C.ta),C.b("isObservable",C.O),C.b("isWriteableObservable",C.Za),C.b("isWritableObservable",C.Za),C.b("observable.fn",S),C.L(S,"peek",S.v),C.L(S,"valueHasMutated",S.xa),C.L(S,"valueWillMutate",S.ya),C.Ha=function(t){if("object"!=typeof(t=t||[])||!("length"in t))throw Error("The argument passed when initializing an observable array must be an array, or null, or undefined.");return t=C.ta(t),C.a.Ab(t,C.Ha.fn),t.extend({trackArrayChanges:!0})},C.Ha.fn={remove:function(t){for(var e=this.v(),n=[],i="function"!=typeof t||C.O(t)?function(e){return e===t}:t,r=0;r<e.length;r++){var o=e[r];if(i(o)){if(0===n.length&&this.ya(),e[r]!==o)throw Error("Array modified during remove; cannot remove item");n.push(o),e.splice(r,1),r--}}return n.length&&this.xa(),n},removeAll:function(t){if(t===n){var e=this.v(),i=e.slice(0);return this.ya(),e.splice(0,e.length),this.xa(),i}return t?this.remove((function(e){return 0<=C.a.A(t,e)})):[]},destroy:function(t){var e=this.v(),n="function"!=typeof t||C.O(t)?function(e){return e===t}:t;this.ya();for(var i=e.length-1;0<=i;i--){var r=e[i];n(r)&&(r._destroy=!0)}this.xa()},destroyAll:function(t){return t===n?this.destroy((function(){return!0})):t?this.destroy((function(e){return 0<=C.a.A(t,e)})):[]},indexOf:function(t){var e=this();return C.a.A(e,t)},replace:function(t,e){var n=this.indexOf(t);0<=n&&(this.ya(),this.v()[n]=e,this.xa())},sorted:function(t){var e=this().slice(0);return t?e.sort(t):e.sort()},reversed:function(){return this().slice(0).reverse()}},C.a.Ba&&C.a.setPrototypeOf(C.Ha.fn,C.ta.fn),C.a.D("pop push reverse shift sort splice unshift".split(" "),(function(t){C.Ha.fn[t]=function(){var e=this.v();this.ya(),this.zc(e,t,arguments);var n=e[t].apply(e,arguments);return this.xa(),n===e?this:n}})),C.a.D(["slice"],(function(t){C.Ha.fn[t]=function(){var e=this();return e[t].apply(e,arguments)}})),C.Pc=function(t){return C.O(t)&&"function"==typeof t.remove&&"function"==typeof t.push},C.b("observableArray",C.Ha),C.b("isObservableArray",C.Pc),C.Ta.trackArrayChanges=function(t,e){function i(){function e(){if(l){var e,n=[].concat(t.v()||[]);t.Wa("arrayChange")&&((!u||1<l)&&(u=C.a.Pb(a,n,t.Ob)),e=u),a=n,u=null,l=0,e&&e.length&&t.notifySubscribers(e,"arrayChange")}}s?e():(s=!0,o=t.subscribe((function(){++l}),null,"spectate"),a=[].concat(t.v()||[]),u=null,r=t.subscribe(e))}if(t.Ob={},e&&"object"==typeof e&&C.a.extend(t.Ob,e),t.Ob.sparse=!0,!t.zc){var r,o,a,s=!1,u=null,l=0,c=t.Qa,h=t.hb;t.Qa=function(e){c&&c.call(t,e),"arrayChange"===e&&i()},t.hb=function(e){h&&h.call(t,e),"arrayChange"!==e||t.Wa("arrayChange")||(r&&r.s(),o&&o.s(),o=r=null,s=!1,a=n)},t.zc=function(t,e,n){function i(t,e,n){return r[r.length]={status:t,value:e,index:n}}if(s&&!l){var r=[],o=t.length,a=n.length,c=0;switch(e){case"push":c=o;case"unshift":for(e=0;e<a;e++)i("added",n[e],c+e);break;case"pop":c=o-1;case"shift":o&&i("deleted",t[c],c);break;case"splice":e=Math.min(Math.max(0,0>n[0]?o+n[0]:n[0]),o),o=1===a?o:Math.min(e+(n[1]||0),o),a=e+a-2,c=Math.max(o,a);for(var h=[],f=[],d=2;e<c;++e,++d)e<o&&f.push(i("deleted",t[e],e)),e<a&&h.push(i("added",n[d],e));C.a.Kc(f,h);break;default:return}u=r}}}};var T=C.a.Da("_state");C.o=C.$=function(t,e,i){function r(){if(0<arguments.length){if("function"!=typeof o)throw Error("Cannot write a value to a ko.computed unless you specify a 'write' option. If you wish to read the current value, don't pass any parameters.");return o.apply(a.nb,arguments),this}return a.ra||C.u.cc(r),(a.ka||a.J&&r.Xa())&&r.ha(),a.X}if("object"==typeof t?i=t:(i=i||{},t&&(i.read=t)),"function"!=typeof i.read)throw Error("Pass a function that returns the value of the ko.computed");var o=i.write,a={X:n,sa:!0,ka:!0,rb:!1,jc:!1,ra:!1,wb:!1,J:!1,Wc:i.read,nb:e||i.owner,l:i.disposeWhenNodeIsRemoved||i.l||null,Sa:i.disposeWhen||i.Sa,Rb:null,I:{},V:0,Ic:null};return r[T]=a,r.Nc="function"==typeof o,C.a.Ba||C.a.extend(r,C.T.fn),C.T.fn.qb(r),C.a.Ab(r,A),i.pure?(a.wb=!0,a.J=!0,C.a.extend(r,x)):i.deferEvaluation&&C.a.extend(r,I),C.options.deferUpdates&&C.Ta.deferred(r,!0),a.l&&(a.jc=!0,a.l.nodeType||(a.l=null)),a.J||i.deferEvaluation||r.ha(),a.l&&r.ja()&&C.a.K.za(a.l,a.Rb=function(){r.s()}),r};var A={equalityComparer:u,qa:function(){return this[T].V},Va:function(){var t=[];return C.a.P(this[T].I,(function(e,n){t[n.Ka]=n.da})),t},Vb:function(t){if(!this[T].V)return!1;var e=this.Va();return-1!==C.a.A(e,t)||!!C.a.Lb(e,(function(e){return e.Vb&&e.Vb(t)}))},uc:function(t,e,n){if(this[T].wb&&e===this)throw Error("A 'pure' computed must not be called recursively");this[T].I[t]=n,n.Ka=this[T].V++,n.La=e.ob()},Xa:function(){var t,e,n=this[T].I;for(t in n)if(Object.prototype.hasOwnProperty.call(n,t)&&(e=n[t],this.Ia&&e.da.Ja||e.da.Dd(e.La)))return!0},Jd:function(){this.Ia&&!this[T].rb&&this.Ia(!1)},ja:function(){var t=this[T];return t.ka||0<t.V},Rd:function(){this.Ja?this[T].ka&&(this[T].sa=!0):this.Hc()},$c:function(t){if(t.Hb){var e=t.subscribe(this.Jd,this,"dirty"),n=t.subscribe(this.Rd,this);return{da:t,s:function(){e.s(),n.s()}}}return t.subscribe(this.Hc,this)},Hc:function(){var t=this,e=t.throttleEvaluation;e&&0<=e?(clearTimeout(this[T].Ic),this[T].Ic=C.a.setTimeout((function(){t.ha(!0)}),e)):t.Ia?t.Ia(!0):t.ha(!0)},ha:function(t){var e=this[T],n=e.Sa,i=!1;if(!e.rb&&!e.ra){if(e.l&&!C.a.Sb(e.l)||n&&n()){if(!e.jc)return void this.s()}else e.jc=!1;e.rb=!0;try{i=this.zd(t)}finally{e.rb=!1}return i}},zd:function(t){var e=this[T],i=!1,r=e.wb?n:!e.V;i={qd:this,mb:e.I,Qb:e.V},C.u.xc({pd:i,od:d,o:this,Ya:r}),e.I={},e.V=0;var o=this.yd(e,i);return e.V?i=this.sb(e.X,o):(this.s(),i=!0),i&&(e.J?this.Gb():this.notifySubscribers(e.X,"beforeChange"),e.X=o,this.notifySubscribers(e.X,"spectate"),!e.J&&t&&this.notifySubscribers(e.X),this.rc&&this.rc()),r&&this.notifySubscribers(e.X,"awake"),i},yd:function(t,e){try{var n=t.Wc;return t.nb?n.call(t.nb):n()}finally{C.u.end(),e.Qb&&!t.J&&C.a.P(e.mb,f),t.sa=t.ka=!1}},v:function(t){var e=this[T];return(e.ka&&(t||!e.V)||e.J&&this.Xa())&&this.ha(),e.X},ub:function(t){C.T.fn.ub.call(this,t),this.nc=function(){return this[T].J||(this[T].sa?this.ha():this[T].ka=!1),this[T].X},this.Ia=function(t){this.pc(this[T].X),this[T].ka=!0,t&&(this[T].sa=!0),this.qc(this,!t)}},s:function(){var t=this[T];!t.J&&t.I&&C.a.P(t.I,(function(t,e){e.s&&e.s()})),t.l&&t.Rb&&C.a.K.yb(t.l,t.Rb),t.I=n,t.V=0,t.ra=!0,t.sa=!1,t.ka=!1,t.J=!1,t.l=n,t.Sa=n,t.Wc=n,this.Nc||(t.nb=n)}},x={Qa:function(t){var e=this,n=e[T];if(!n.ra&&n.J&&"change"==t){if(n.J=!1,n.sa||e.Xa())n.I=null,n.V=0,e.ha()&&e.Gb();else{var i=[];C.a.P(n.I,(function(t,e){i[e.Ka]=t})),C.a.D(i,(function(t,i){var r=n.I[t],o=e.$c(r.da);o.Ka=i,o.La=r.La,n.I[t]=o})),e.Xa()&&e.ha()&&e.Gb()}n.ra||e.notifySubscribers(n.X,"awake")}},hb:function(t){var e=this[T];e.ra||"change"!=t||this.Wa("change")||(C.a.P(e.I,(function(t,n){n.s&&(e.I[t]={da:n.da,Ka:n.Ka,La:n.La},n.s())})),e.J=!0,this.notifySubscribers(n,"asleep"))},ob:function(){var t=this[T];return t.J&&(t.sa||this.Xa())&&this.ha(),C.T.fn.ob.call(this)}},I={Qa:function(t){"change"!=t&&"beforeChange"!=t||this.v()}};C.a.Ba&&C.a.setPrototypeOf(A,C.T.fn);var F=C.ta.Ma;A[F]=C.o,C.Oc=function(t){return"function"==typeof t&&t[F]===A[F]},C.Fd=function(t){return C.Oc(t)&&t[T]&&t[T].wb},C.b("computed",C.o),C.b("dependentObservable",C.o),C.b("isComputed",C.Oc),C.b("isPureComputed",C.Fd),C.b("computed.fn",A),C.L(A,"peek",A.v),C.L(A,"dispose",A.s),C.L(A,"isActive",A.ja),C.L(A,"getDependenciesCount",A.qa),C.L(A,"getDependencies",A.Va),C.xb=function(t,e){return"function"==typeof t?C.o(t,e,{pure:!0}):((t=C.a.extend({},t)).pure=!0,C.o(t,e))},C.b("pureComputed",C.xb),function(){function t(i,r,o){if(o=o||new e,"object"!=typeof(i=r(i))||null===i||i===n||i instanceof RegExp||i instanceof Date||i instanceof String||i instanceof Number||i instanceof Boolean)return i;var a=i instanceof Array?[]:{};return o.save(i,a),function(t,e){if(t instanceof Array){for(var n=0;n<t.length;n++)e(n);"function"==typeof t.toJSON&&e("toJSON")}else for(n in t)e(n)}(i,(function(e){var s=r(i[e]);switch(typeof s){case"boolean":case"number":case"string":case"function":a[e]=s;break;case"object":case"undefined":var u=o.get(s);a[e]=u!==n?u:t(s,r,o)}})),a}function e(){this.keys=[],this.values=[]}C.ad=function(e){if(0==arguments.length)throw Error("When calling ko.toJS, pass the object you want to convert.");return t(e,(function(t){for(var e=0;C.O(t)&&10>e;e++)t=t();return t}))},C.toJSON=function(t,e,n){return t=C.ad(t),C.a.hc(t,e,n)},e.prototype={constructor:e,save:function(t,e){var n=C.a.A(this.keys,t);0<=n?this.values[n]=e:(this.keys.push(t),this.values.push(e))},get:function(t){return 0<=(t=C.a.A(this.keys,t))?this.values[t]:n}}}(),C.b("toJS",C.ad),C.b("toJSON",C.toJSON),C.Wd=function(t,e,n){function i(e){var i=C.xb(t,n).extend({ma:"always"}),r=i.subscribe((function(t){t&&(r.s(),e(t))}));return i.notifySubscribers(i.v()),r}return"function"!=typeof Promise||e?i(e.bind(n)):new Promise(i)},C.b("when",C.Wd),C.w={M:function(t){switch(C.a.R(t)){case"option":return!0===t.__ko__hasDomDataOptionValue__?C.a.g.get(t,C.c.options.$b):7>=C.a.W?t.getAttributeNode("value")&&t.getAttributeNode("value").specified?t.value:t.text:t.value;case"select":return 0<=t.selectedIndex?C.w.M(t.options[t.selectedIndex]):n;default:return t.value}},cb:function(t,e,i){switch(C.a.R(t)){case"option":"string"==typeof e?(C.a.g.set(t,C.c.options.$b,n),"__ko__hasDomDataOptionValue__"in t&&delete t.__ko__hasDomDataOptionValue__,t.value=e):(C.a.g.set(t,C.c.options.$b,e),t.__ko__hasDomDataOptionValue__=!0,t.value="number"==typeof e?e:"");break;case"select":""!==e&&null!==e||(e=n);for(var r,o=-1,a=0,s=t.options.length;a<s;++a)if((r=C.w.M(t.options[a]))==e||""===r&&e===n){o=a;break}(i||0<=o||e===n&&1<t.size)&&(t.selectedIndex=o,6===C.a.W&&C.a.setTimeout((function(){t.selectedIndex=o}),0));break;default:null!==e&&e!==n||(e=""),t.value=e}}},C.b("selectExtensions",C.w),C.b("selectExtensions.readValue",C.w.M),C.b("selectExtensions.writeValue",C.w.cb),C.m=function(){function t(t){123===(t=C.a.Db(t)).charCodeAt(0)&&(t=t.slice(1,-1));var e,n=[],a=(t+="\n,").match(i),s=[],u=0;if(1<a.length){for(var l,c=0;l=a[c];++c){var h=l.charCodeAt(0);if(44===h){if(0>=u){n.push(e&&s.length?{key:e,value:s.join("")}:{unknown:e||s.join("")}),e=u=0,s=[];continue}}else if(58===h){if(!u&&!e&&1===s.length){e=s.pop();continue}}else{if(47===h&&1<l.length&&(47===l.charCodeAt(1)||42===l.charCodeAt(1)))continue;47===h&&c&&1<l.length?(h=a[c-1].match(r))&&!o[h[0]]&&(a=(t=t.substr(t.indexOf(l)+1)).match(i),c=-1,l="/"):40===h||123===h||91===h?++u:41===h||125===h||93===h?--u:e||s.length||34!==h&&39!==h||(l=l.slice(1,-1))}s.push(l)}if(0<u)throw Error("Unbalanced parentheses, braces, or brackets")}return n}var e=["true","false","null","undefined"],n=/^(?:[$_a-z][$\w]*|(.+)(\.\s*[$_a-z][$\w]*|\[.+\]))$/i,i=RegExp("\"(?:\\\\.|[^\"])*\"|'(?:\\\\.|[^'])*'|`(?:\\\\.|[^`])*`|/\\*(?:[^*]|\\*+[^*/])*\\*+/|//.*\n|/(?:\\\\.|[^/])+/w*|[^\\s:,/][^,\"'`{}()/:[\\]]*[^\\s,\"'`{}()/:[\\]]|[^\\s]","g"),r=/[\])"'A-Za-z0-9_$]+$/,o={in:1,return:1,typeof:1},a={};return{Ra:[],wa:a,ac:t,vb:function(i,r){function o(t,i){var r;if(!c){var h=C.getBindingHandler(t);if(h&&h.preprocess&&!(i=h.preprocess(i,t,o)))return;(h=a[t])&&(r=i,0<=C.a.A(e,r)?r=!1:(h=r.match(n),r=null!==h&&(h[1]?"Object("+h[1]+")"+h[2]:r)),h=r),h&&u.push("'"+("string"==typeof a[t]?a[t]:t)+"':function(_z){"+r+"=_z}")}l&&(i="function(){return "+i+" }"),s.push("'"+t+"':"+i)}var s=[],u=[],l=(r=r||{}).valueAccessors,c=r.bindingParams,h="string"==typeof i?t(i):i;return C.a.D(h,(function(t){o(t.key||t.unknown,t.value)})),u.length&&o("_ko_property_writers","{"+u.join(",")+" }"),s.join(",")},Id:function(t,e){for(var n=0;n<t.length;n++)if(t[n].key==e)return!0;return!1},eb:function(t,e,n,i,r){t&&C.O(t)?!C.Za(t)||r&&t.v()===i||t(i):(t=e.get("_ko_property_writers"))&&t[n]&&t[n](i)}}}(),C.b("expressionRewriting",C.m),C.b("expressionRewriting.bindingRewriteValidators",C.m.Ra),C.b("expressionRewriting.parseObjectLiteral",C.m.ac),C.b("expressionRewriting.preProcessBindings",C.m.vb),C.b("expressionRewriting._twoWayBindings",C.m.wa),C.b("jsonExpressionRewriting",C.m),C.b("jsonExpressionRewriting.insertPropertyAccessorsIntoJson",C.m.vb),function(){function t(t){return 8==t.nodeType&&a.test(o?t.text:t.nodeValue)}function e(t){return 8==t.nodeType&&s.test(o?t.text:t.nodeValue)}function n(n,i){for(var r=n,o=1,a=[];r=r.nextSibling;){if(e(r)&&(C.a.g.set(r,l,!0),0==--o))return a;a.push(r),t(r)&&o++}if(!i)throw Error("Cannot find closing comment tag to match: "+n.nodeValue);return null}function i(t,e){var i=n(t,e);return i?0<i.length?i[i.length-1].nextSibling:t.nextSibling:null}var o=r&&"\x3c!--test--\x3e"===r.createComment("test").text,a=o?/^\x3c!--\s*ko(?:\s+([\s\S]+))?\s*--\x3e$/:/^\s*ko(?:\s+([\s\S]+))?\s*$/,s=o?/^\x3c!--\s*\/ko\s*--\x3e$/:/^\s*\/ko\s*$/,u={ul:!0,ol:!0},l="__ko_matchedEndComment__";C.h={ea:{},childNodes:function(e){return t(e)?n(e):e.childNodes},Ea:function(e){if(t(e))for(var n=0,i=(e=C.h.childNodes(e)).length;n<i;n++)C.removeNode(e[n]);else C.a.Tb(e)},va:function(e,n){if(t(e)){C.h.Ea(e);for(var i=e.nextSibling,r=0,o=n.length;r<o;r++)i.parentNode.insertBefore(n[r],i)}else C.a.va(e,n)},Vc:function(e,n){var i;t(e)?(i=e.nextSibling,e=e.parentNode):i=e.firstChild,i?n!==i&&e.insertBefore(n,i):e.appendChild(n)},Wb:function(e,n,i){i?(i=i.nextSibling,t(e)&&(e=e.parentNode),i?n!==i&&e.insertBefore(n,i):e.appendChild(n)):C.h.Vc(e,n)},firstChild:function(n){if(t(n))return!n.nextSibling||e(n.nextSibling)?null:n.nextSibling;if(n.firstChild&&e(n.firstChild))throw Error("Found invalid end comment, as the first child of "+n);return n.firstChild},nextSibling:function(n){if(t(n)&&(n=i(n)),n.nextSibling&&e(n.nextSibling)){var r=n.nextSibling;if(e(r)&&!C.a.g.get(r,l))throw Error("Found end comment without a matching opening comment, as child of "+n);return null}return n.nextSibling},Cd:t,Vd:function(t){return(t=(o?t.text:t.nodeValue).match(a))?t[1]:null},Sc:function(n){if(u[C.a.R(n)]){var r=n.firstChild;if(r)do{if(1===r.nodeType){var o,a=null;if(o=r.firstChild)do{if(a)a.push(o);else if(t(o)){var s=i(o,!0);s?o=s:a=[o]}else e(o)&&(a=[o])}while(o=o.nextSibling);if(o=a)for(a=r.nextSibling,s=0;s<o.length;s++)a?n.insertBefore(o[s],a):n.appendChild(o[s])}}while(r=r.nextSibling)}}}}(),C.b("virtualElements",C.h),C.b("virtualElements.allowedBindings",C.h.ea),C.b("virtualElements.emptyNode",C.h.Ea),C.b("virtualElements.insertAfter",C.h.Wb),C.b("virtualElements.prepend",C.h.Vc),C.b("virtualElements.setDomNodeChildren",C.h.va),C.ga=function(){this.nd={}},C.a.extend(C.ga.prototype,{nodeHasBindings:function(t){switch(t.nodeType){case 1:return null!=t.getAttribute("data-bind")||C.j.getComponentNameForNode(t);case 8:return C.h.Cd(t);default:return!1}},getBindings:function(t,e){var n=(n=this.getBindingsString(t,e))?this.parseBindingsString(n,e,t):null;return C.j.tc(n,t,e,!1)},getBindingAccessors:function(t,e){var n=(n=this.getBindingsString(t,e))?this.parseBindingsString(n,e,t,{valueAccessors:!0}):null;return C.j.tc(n,t,e,!0)},getBindingsString:function(t){switch(t.nodeType){case 1:return t.getAttribute("data-bind");case 8:return C.h.Vd(t);default:return null}},parseBindingsString:function(t,e,n,i){try{var r,o=this.nd,a=t+(i&&i.valueAccessors||"");if(!(r=o[a])){var s,u="with($context){with($data||{}){return{"+C.m.vb(t,i)+"}}}";s=new Function("$context","$element",u),r=o[a]=s}return r(e,n)}catch(e){throw e.message="Unable to parse bindings.\nBindings value: "+t+"\nMessage: "+e.message,e}}}),C.ga.instance=new C.ga,C.b("bindingProvider",C.ga),function(){function t(t){var e=(t=C.a.g.get(t,y))&&t.N;e&&(t.N=null,e.Tc())}function e(e,n,i){this.node=e,this.yc=n,this.kb=[],this.H=!1,n.N||C.a.K.za(e,t),i&&i.N&&(i.N.kb.push(e),this.Kb=i)}function o(t){return function(){return t}}function s(t){return t()}function u(t){return C.a.Ga(C.u.G(t),(function(e,n){return function(){return t()[n]}}))}function l(t,e,n){return"function"==typeof t?u(t.bind(null,e,n)):C.a.Ga(t,o)}function c(t,e){return u(this.getBindings.bind(this,t,e))}function h(t,e){var n=C.h.firstChild(e);if(n){var i,r=C.ga.instance,o=r.preprocessNode;if(o){for(;i=n;)n=C.h.nextSibling(i),o.call(r,i);n=C.h.firstChild(e)}for(;i=n;)n=C.h.nextSibling(i),f(t,i)}C.i.ma(e,C.i.H)}function f(t,e){var n=t,i=1===e.nodeType;i&&C.h.Sc(e),(i||C.ga.instance.nodeHasBindings(e))&&(n=d(e,null,t).bindingContextForDescendants),n&&!E[C.a.R(e)]&&h(n,e)}function d(t,e,i){var r,o=C.a.g.Ub(t,y,{}),a=o.hd;if(!e){if(a)throw Error("You cannot apply bindings multiple times to the same element.");o.hd=!0}if(a||(o.context=i),o.Zb||(o.Zb={}),e&&"function"!=typeof e)r=e;else{var u=C.ga.instance,l=u.getBindingAccessors||c,h=C.$((function(){return(r=e?e(i,t):l.call(u,t,i))&&(i[g]&&i[g](),i[v]&&i[v]()),r}),null,{l:t});r&&h.ja()||(h=null)}var f,d=i;if(r){var p=function(){return C.a.Ga(h?h():r,s)},m=h?function(t){return function(){return s(h()[t])}}:function(t){return r[t]};p.get=function(t){return r[t]&&s(m(t))},p.has=function(t){return t in r},C.i.H in r&&C.i.subscribe(t,C.i.H,(function(){var e=(0,r[C.i.H])();if(e){var n=C.h.childNodes(t);n.length&&e(n,C.Ec(n[0]))}})),C.i.pa in r&&(d=C.i.Cb(t,i),C.i.subscribe(t,C.i.pa,(function(){var e=(0,r[C.i.pa])();e&&C.h.firstChild(t)&&e(t)}))),o=function(t){var e=[],n={},i=[];return C.a.P(t,(function r(o){if(!n[o]){var a=C.getBindingHandler(o);a&&(a.after&&(i.push(o),C.a.D(a.after,(function(e){if(t[e]){if(-1!==C.a.A(i,e))throw Error("Cannot combine the following bindings, because they have a cyclic dependency: "+i.join(", "));r(e)}})),i.length--),e.push({key:o,Mc:a})),n[o]=!0}})),e}(r),C.a.D(o,(function(e){var i=e.Mc.init,o=e.Mc.update,a=e.key;if(8===t.nodeType&&!C.h.ea[a])throw Error("The binding '"+a+"' cannot be used with virtual elements");try{"function"==typeof i&&C.u.G((function(){var e=i(t,m(a),p,d.$data,d);if(e&&e.controlsDescendantBindings){if(f!==n)throw Error("Multiple bindings ("+f+" and "+a+") are trying to control descendant bindings of the same element. You cannot use these bindings together on the same element.");f=a}})),"function"==typeof o&&C.$((function(){o(t,m(a),p,d.$data,d)}),null,{l:t})}catch(t){throw t.message='Unable to process binding "'+a+": "+r[a]+'"\nMessage: '+t.message,t}}))}return{shouldBindDescendants:o=f===n,bindingContextForDescendants:o&&d}}function p(t,e){return t&&t instanceof C.fa?t:new C.fa(t,n,n,e)}var g=C.a.Da("_subscribable"),m=C.a.Da("_ancestorBindingInfo"),v=C.a.Da("_dataDependency");C.c={};var E={script:!0,textarea:!0,template:!0};C.getBindingHandler=function(t){return C.c[t]};var b={};C.fa=function(t,e,i,r,o){function a(){var t=h?c():c,n=C.a.f(t);return e?(C.a.extend(u,e),m in e&&(u[m]=e[m])):(u.$parents=[],u.$root=n,u.ko=C),u[g]=s,l?n=u.$data:(u.$rawData=t,u.$data=n),i&&(u[i]=n),r&&r(u,e,n),e&&e[g]&&!C.S.o().Vb(e[g])&&e[g](),f&&(u[v]=f),u.$data}var s,u=this,l=t===b,c=l?n:t,h="function"==typeof c&&!C.O(c),f=o&&o.dataDependency;o&&o.exportDependencies?a():((s=C.xb(a)).v(),s.ja()?s.equalityComparer=null:u[g]=n)},C.fa.prototype.createChildContext=function(t,e,n,i){if(!i&&e&&"object"==typeof e&&(e=(i=e).as,n=i.extend),e&&i&&i.noChildContext){var r="function"==typeof t&&!C.O(t);return new C.fa(b,this,null,(function(i){n&&n(i),i[e]=r?t():t}),i)}return new C.fa(t,this,e,(function(t,e){t.$parentContext=e,t.$parent=e.$data,t.$parents=(e.$parents||[]).slice(0),t.$parents.unshift(t.$parent),n&&n(t)}),i)},C.fa.prototype.extend=function(t,e){return new C.fa(b,this,null,(function(e){C.a.extend(e,"function"==typeof t?t(e):t)}),e)};var y=C.a.g.Z();e.prototype.Tc=function(){this.Kb&&this.Kb.N&&this.Kb.N.sd(this.node)},e.prototype.sd=function(t){C.a.Pa(this.kb,t),!this.kb.length&&this.H&&this.Cc()},e.prototype.Cc=function(){this.H=!0,this.yc.N&&!this.kb.length&&(this.yc.N=null,C.a.K.yb(this.node,t),C.i.ma(this.node,C.i.pa),this.Tc())},C.i={H:"childrenComplete",pa:"descendantsComplete",subscribe:function(t,e,n,i,r){var o=C.a.g.Ub(t,y,{});return o.Fa||(o.Fa=new C.T),r&&r.notifyImmediately&&o.Zb[e]&&C.u.G(n,i,[t]),o.Fa.subscribe(n,i,e)},ma:function(t,e){var i=C.a.g.get(t,y);if(i&&(i.Zb[e]=!0,i.Fa&&i.Fa.notifySubscribers(t,e),e==C.i.H))if(i.N)i.N.Cc();else if(i.N===n&&i.Fa&&i.Fa.Wa(C.i.pa))throw Error("descendantsComplete event not supported for bindings on this node")},Cb:function(t,n){var i=C.a.g.Ub(t,y,{});return i.N||(i.N=new e(t,i,n[m])),n[m]==i?n:n.extend((function(t){t[m]=i}))}},C.Td=function(t){return(t=C.a.g.get(t,y))&&t.context},C.ib=function(t,e,n){return 1===t.nodeType&&C.h.Sc(t),d(t,e,p(n))},C.ld=function(t,e,n){return n=p(n),C.ib(t,l(e,n,t),n)},C.Oa=function(t,e){1!==e.nodeType&&8!==e.nodeType||h(p(t),e)},C.vc=function(t,e,n){if(!a&&i.jQuery&&(a=i.jQuery),2>arguments.length){if(!(e=r.body))throw Error("ko.applyBindings: could not find document.body; has the document been loaded?")}else if(!e||1!==e.nodeType&&8!==e.nodeType)throw Error("ko.applyBindings: first parameter should be your view model; second parameter should be a DOM node");f(p(t,n),e)},C.Dc=function(t){return!t||1!==t.nodeType&&8!==t.nodeType?n:C.Td(t)},C.Ec=function(t){return(t=C.Dc(t))?t.$data:n},C.b("bindingHandlers",C.c),C.b("bindingEvent",C.i),C.b("bindingEvent.subscribe",C.i.subscribe),C.b("bindingEvent.startPossiblyAsyncContentBinding",C.i.Cb),C.b("applyBindings",C.vc),C.b("applyBindingsToDescendants",C.Oa),C.b("applyBindingAccessorsToNode",C.ib),C.b("applyBindingsToNode",C.ld),C.b("contextFor",C.Dc),C.b("dataFor",C.Ec)}(),function(t){function e(e,i){var a,s=Object.prototype.hasOwnProperty.call(r,e)?r[e]:t;s?s.subscribe(i):((s=r[e]=new C.T).subscribe(i),n(e,(function(t,n){var i=!(!n||!n.synchronous);o[e]={definition:t,Gd:i},delete r[e],a||i?s.notifySubscribers(t):C.na.zb((function(){s.notifySubscribers(t)}))})),a=!0)}function n(t,e){i("getConfig",[t],(function(n){n?i("loadComponent",[t,n],(function(t){e(t,n)})):e(null,null)}))}function i(e,n,r,o){o||(o=C.j.loaders.slice(0));var a=o.shift();if(a){var s=a[e];if(s){var u=!1;if(s.apply(a,n.concat((function(t){u?r(null):null!==t?r(t):i(e,n,r,o)})))!==t&&(u=!0,!a.suppressLoaderExceptions))throw Error("Component loaders must supply values by invoking the callback, not by returning values synchronously.")}else i(e,n,r,o)}else r(null)}var r={},o={};C.j={get:function(n,i){var r=Object.prototype.hasOwnProperty.call(o,n)?o[n]:t;r?r.Gd?C.u.G((function(){i(r.definition)})):C.na.zb((function(){i(r.definition)})):e(n,i)},Bc:function(t){delete o[t]},oc:i},C.j.loaders=[],C.b("components",C.j),C.b("components.get",C.j.get),C.b("components.clearCachedDefinition",C.j.Bc)}(),function(){function t(t,e,n,i){function r(){0==--a&&i(o)}var o={},a=2,u=n.template;n=n.viewModel,u?s(e,u,(function(e){C.j.oc("loadTemplate",[t,e],(function(t){o.template=t,r()}))})):r(),n?s(e,n,(function(e){C.j.oc("loadViewModel",[t,e],(function(t){o[c]=t,r()}))})):r()}function n(t,e,i){if("function"==typeof e)i((function(t){return new e(t)}));else if("function"==typeof e[c])i(e[c]);else if("instance"in e){var r=e.instance;i((function(){return r}))}else"viewModel"in e?n(t,e.viewModel,i):t("Unknown viewModel value: "+e)}function o(t){switch(C.a.R(t)){case"script":return C.a.ua(t.text);case"textarea":return C.a.ua(t.value);case"template":if(a(t.content))return C.a.Ca(t.content.childNodes)}return C.a.Ca(t.childNodes)}function a(t){return i.DocumentFragment?t instanceof DocumentFragment:t&&11===t.nodeType}function s(t,n,r){"string"==typeof n.require?e||i.require?(e||i.require)([n.require],(function(t){t&&"object"==typeof t&&t.Xd&&t.default&&(t=t.default),r(t)})):t("Uses require, but no AMD loader is present"):r(n)}function u(t){return function(e){throw Error("Component '"+t+"': "+e)}}var l={};C.j.register=function(t,e){if(!e)throw Error("Invalid configuration for "+t);if(C.j.tb(t))throw Error("Component "+t+" is already registered");l[t]=e},C.j.tb=function(t){return Object.prototype.hasOwnProperty.call(l,t)},C.j.unregister=function(t){delete l[t],C.j.Bc(t)},C.j.Fc={getConfig:function(t,e){e(C.j.tb(t)?l[t]:null)},loadComponent:function(e,n,i){var r=u(e);s(r,n,(function(n){t(e,r,n,i)}))},loadTemplate:function(t,e,n){if(t=u(t),"string"==typeof e)n(C.a.ua(e));else if(e instanceof Array)n(e);else if(a(e))n(C.a.la(e.childNodes));else if(e.element)if(e=e.element,i.HTMLElement?e instanceof HTMLElement:e&&e.tagName&&1===e.nodeType)n(o(e));else if("string"==typeof e){var s=r.getElementById(e);s?n(o(s)):t("Cannot find element with ID "+e)}else t("Unknown element type: "+e);else t("Unknown template value: "+e)},loadViewModel:function(t,e,i){n(u(t),e,i)}};var c="createViewModel";C.b("components.register",C.j.register),C.b("components.isRegistered",C.j.tb),C.b("components.unregister",C.j.unregister),C.b("components.defaultLoader",C.j.Fc),C.j.loaders.push(C.j.Fc),C.j.dd=l}(),function(){function t(t,n){if(i=t.getAttribute("params")){var i=e.parseBindingsString(i,n,t,{valueAccessors:!0,bindingParams:!0}),r=(i=C.a.Ga(i,(function(e){return C.o(e,null,{l:t})})),C.a.Ga(i,(function(e){var n=e.v();return e.ja()?C.o({read:function(){return C.a.f(e())},write:C.Za(n)&&function(t){e()(t)},l:t}):n})));return Object.prototype.hasOwnProperty.call(r,"$raw")||(r.$raw=i),r}return{$raw:{}}}C.j.getComponentNameForNode=function(t){var e=C.a.R(t);if(C.j.tb(e)&&(-1!=e.indexOf("-")||"[object HTMLUnknownElement]"==""+t||8>=C.a.W&&t.tagName===e))return e},C.j.tc=function(e,n,i,r){if(1===n.nodeType){var o=C.j.getComponentNameForNode(n);if(o){if((e=e||{}).component)throw Error('Cannot use the "component" binding on a custom element matching a component');var a={name:o,params:t(n,i)};e.component=r?function(){return a}:a}}return e};var e=new C.ga;9>C.a.W&&(C.j.register=function(t){return function(e){return t.apply(this,arguments)}}(C.j.register),r.createDocumentFragment=function(t){return function(){var e=t();return C.j.dd,e}}(r.createDocumentFragment))}(),function(){var t=0;C.c.component={init:function(e,n,i,r,o){function a(){var t=s&&s.dispose;"function"==typeof t&&t.call(s),l&&l.s(),u=s=l=null}var s,u,l,c=C.a.la(C.h.childNodes(e));return C.h.Ea(e),C.a.K.za(e,a),C.o((function(){var i,r,h=C.a.f(n());if("string"==typeof h?i=h:(i=C.a.f(h.name),r=C.a.f(h.params)),!i)throw Error("No component name specified");var f=C.i.Cb(e,o),d=u=++t;C.j.get(i,(function(t){if(u===d){if(a(),!t)throw Error("Unknown component '"+i+"'");!function(t,e,n){if(!(e=e.template))throw Error("Component '"+t+"' has no template");t=C.a.Ca(e),C.h.va(n,t)}(i,t,e);var n=function(t,e,n){var i=t.createViewModel;return i?i.call(t,e,n):e}(t,r,{element:e,templateNodes:c});t=f.createChildContext(n,{extend:function(t){t.$component=n,t.$componentTemplateNodes=c}}),n&&n.koDescendantsComplete&&(l=C.i.subscribe(e,C.i.pa,n.koDescendantsComplete,n)),s=n,C.Oa(t,e)}}))}),null,{l:e}),{controlsDescendantBindings:!0}}},C.h.ea.component=!0}();var P={class:"className",for:"htmlFor"};C.c.attr={update:function(t,e){var i=C.a.f(e())||{};C.a.P(i,(function(e,i){i=C.a.f(i);var r=e.indexOf(":"),o=(r="lookupNamespaceURI"in t&&0<r&&t.lookupNamespaceURI(e.substr(0,r)),!1===i||null===i||i===n);o?r?t.removeAttributeNS(r,e):t.removeAttribute(e):i=i.toString(),8>=C.a.W&&e in P?(e=P[e],o?t.removeAttribute(e):t[e]=i):o||(r?t.setAttributeNS(r,e,i):t.setAttribute(e,i)),"name"===e&&C.a.Yc(t,o?"":i)}))}},C.c.checked={after:["value","attr"],init:function(t,e,i){function r(){var r=t.checked,u=o();if(!C.S.Ya()&&(r||!s&&!C.S.qa())){var h=C.u.G(e);if(l){var d=c?h.v():h,p=f;f=u,p!==u?r&&(C.a.Na(d,u,!0),C.a.Na(d,p,!1)):C.a.Na(d,u,r),c&&C.Za(h)&&h(d)}else a&&(u===n?u=r:r||(u=n)),C.m.eb(h,i,"checked",u,!0)}}var o=C.xb((function(){return i.has("checkedValue")?C.a.f(i.get("checkedValue")):h?i.has("value")?C.a.f(i.get("value")):t.value:void 0})),a="checkbox"==t.type,s="radio"==t.type;if(a||s){var u=e(),l=a&&C.a.f(u)instanceof Array,c=!(l&&u.push&&u.splice),h=s||l,f=l?o():n;s&&!t.name&&C.c.uniqueName.init(t,(function(){return!0})),C.o(r,null,{l:t}),C.a.B(t,"click",r),C.o((function(){var i=C.a.f(e()),r=o();l?(t.checked=0<=C.a.A(i,r),f=r):t.checked=a&&r===n?!!i:o()===i}),null,{l:t}),u=n}}},C.m.wa.checked=!0,C.c.checkedValue={update:function(t,e){t.value=C.a.f(e())}},C.c.class={update:function(t,e){var n=C.a.Db(C.a.f(e()));C.a.Eb(t,t.__ko__cssValue,!1),t.__ko__cssValue=n,C.a.Eb(t,n,!0)}},C.c.css={update:function(t,e){var n=C.a.f(e());null!==n&&"object"==typeof n?C.a.P(n,(function(e,n){n=C.a.f(n),C.a.Eb(t,e,n)})):C.c.class.update(t,e)}},C.c.enable={update:function(t,e){var n=C.a.f(e());n&&t.disabled?t.removeAttribute("disabled"):n||t.disabled||(t.disabled=!0)}},C.c.disable={update:function(t,e){C.c.enable.update(t,(function(){return!C.a.f(e())}))}},C.c.event={init:function(t,e,n,i,r){var o=e()||{};C.a.P(o,(function(o){"string"==typeof o&&C.a.B(t,o,(function(t){var a,s=e()[o];if(s){try{var u=C.a.la(arguments);i=r.$data,u.unshift(i),a=s.apply(i,u)}finally{!0!==a&&(t.preventDefault?t.preventDefault():t.returnValue=!1)}!1===n.get(o+"Bubble")&&(t.cancelBubble=!0,t.stopPropagation&&t.stopPropagation())}}))}))}},C.c.foreach={Rc:function(t){return function(){var e=t(),n=C.a.bc(e);return n&&"number"!=typeof n.length?(C.a.f(e),{foreach:n.data,as:n.as,noChildContext:n.noChildContext,includeDestroyed:n.includeDestroyed,afterAdd:n.afterAdd,beforeRemove:n.beforeRemove,afterRender:n.afterRender,beforeMove:n.beforeMove,afterMove:n.afterMove,templateEngine:C.ba.Ma}):{foreach:e,templateEngine:C.ba.Ma}}},init:function(t,e){return C.c.template.init(t,C.c.foreach.Rc(e))},update:function(t,e,n,i,r){return C.c.template.update(t,C.c.foreach.Rc(e),n,i,r)}},C.m.Ra.foreach=!1,C.h.ea.foreach=!0,C.c.hasfocus={init:function(t,e,n){function i(i){t.__ko_hasfocusUpdating=!0;var r=t.ownerDocument;if("activeElement"in r){var o;try{o=r.activeElement}catch(t){o=r.body}i=o===t}r=e(),C.m.eb(r,n,"hasfocus",i,!0),t.__ko_hasfocusLastValue=i,t.__ko_hasfocusUpdating=!1}var r=i.bind(null,!0),o=i.bind(null,!1);C.a.B(t,"focus",r),C.a.B(t,"focusin",r),C.a.B(t,"blur",o),C.a.B(t,"focusout",o),t.__ko_hasfocusLastValue=!1},update:function(t,e){var n=!!C.a.f(e());t.__ko_hasfocusUpdating||t.__ko_hasfocusLastValue===n||(n?t.focus():t.blur(),!n&&t.__ko_hasfocusLastValue&&t.ownerDocument.body.focus(),C.u.G(C.a.Fb,null,[t,n?"focusin":"focusout"]))}},C.m.wa.hasfocus=!0,C.c.hasFocus=C.c.hasfocus,C.m.wa.hasFocus="hasfocus",C.c.html={init:function(){return{controlsDescendantBindings:!0}},update:function(t,e){C.a.fc(t,e())}},function(){function t(t,e,n){C.c[t]={init:function(t,i,r,o,a){var s,u,l,c,h,f={};if(e){o=r.get("as");var d=r.get("noChildContext");f={as:o,noChildContext:d,exportDependencies:h=!(o&&d)}}return c=(l="render"==r.get("completeOn"))||r.has(C.i.pa),C.o((function(){var r,o=C.a.f(i()),d=!n!=!o,p=!u;(h||d!==s)&&(c&&(a=C.i.Cb(t,a)),d&&(e&&!h||(f.dataDependency=C.S.o()),r=e?a.createChildContext("function"==typeof o?o:i,f):C.S.qa()?a.extend(null,f):a),p&&C.S.qa()&&(u=C.a.Ca(C.h.childNodes(t),!0)),d?(p||C.h.va(t,C.a.Ca(u)),C.Oa(r,t)):(C.h.Ea(t),l||C.i.ma(t,C.i.H)),s=d)}),null,{l:t}),{controlsDescendantBindings:!0}}},C.m.Ra[t]=!1,C.h.ea[t]=!0}t("if"),t("ifnot",!1,!0),t("with",!0)}(),C.c.let={init:function(t,e,n,i,r){return e=r.extend(e),C.Oa(e,t),{controlsDescendantBindings:!0}}},C.h.ea.let=!0;var O={};C.c.options={init:function(t){if("select"!==C.a.R(t))throw Error("options binding applies only to SELECT elements");for(;0<t.length;)t.remove(0);return{controlsDescendantBindings:!0}},update:function(t,e,i){function r(){return C.a.jb(t.options,(function(t){return t.selected}))}function o(t,e,n){var i=typeof e;return"function"==i?e(t):"string"==i?t[e]:n}function a(e,n){if(p&&c)C.i.ma(t,C.i.H);else if(d.length){var i=0<=C.a.A(d,C.w.M(n[0]));C.a.Zc(n[0],i),p&&!i&&C.u.G(C.a.Fb,null,[t,"change"])}}var s=t.multiple,u=0!=t.length&&s?t.scrollTop:null,l=C.a.f(e()),c=i.get("valueAllowUnset")&&i.has("value"),h=i.get("optionsIncludeDestroyed");e={};var f,d=[];c||(s?d=C.a.Mb(r(),C.w.M):0<=t.selectedIndex&&d.push(C.w.M(t.options[t.selectedIndex]))),l&&(void 0===l.length&&(l=[l]),f=C.a.jb(l,(function(t){return h||t===n||null===t||!C.a.f(t._destroy)})),i.has("optionsCaption")&&null!==(l=C.a.f(i.get("optionsCaption")))&&l!==n&&f.unshift(O));var p=!1;e.beforeRemove=function(e){t.removeChild(e)},l=a,i.has("optionsAfterRender")&&"function"==typeof i.get("optionsAfterRender")&&(l=function(t,e){a(0,e),C.u.G(i.get("optionsAfterRender"),null,[e[0],t!==O?t:n])}),C.a.ec(t,f,(function(e,r,a){return a.length&&(d=!c&&a[0].selected?[C.w.M(a[0])]:[],p=!0),r=t.ownerDocument.createElement("option"),e===O?(C.a.Bb(r,i.get("optionsCaption")),C.w.cb(r,n)):(a=o(e,i.get("optionsValue"),e),C.w.cb(r,C.a.f(a)),e=o(e,i.get("optionsText"),a),C.a.Bb(r,e)),[r]}),e,l),c||(s?d.length&&r().length<d.length:d.length&&0<=t.selectedIndex?C.w.M(t.options[t.selectedIndex])!==d[0]:d.length||0<=t.selectedIndex)&&C.u.G(C.a.Fb,null,[t,"change"]),(c||C.S.Ya())&&C.i.ma(t,C.i.H),C.a.wd(t),u&&20<Math.abs(u-t.scrollTop)&&(t.scrollTop=u)}},C.c.options.$b=C.a.g.Z(),C.c.selectedOptions={init:function(t,e,n){function i(){var i=e(),r=[];C.a.D(t.getElementsByTagName("option"),(function(t){t.selected&&r.push(C.w.M(t))})),C.m.eb(i,n,"selectedOptions",r)}function r(){var n=C.a.f(e()),i=t.scrollTop;n&&"number"==typeof n.length&&C.a.D(t.getElementsByTagName("option"),(function(t){var e=0<=C.a.A(n,C.w.M(t));t.selected!=e&&C.a.Zc(t,e)})),t.scrollTop=i}if("select"!=C.a.R(t))throw Error("selectedOptions binding applies only to SELECT elements");var o;C.i.subscribe(t,C.i.H,(function(){o?i():(C.a.B(t,"change",i),o=C.o(r,null,{l:t}))}),null,{notifyImmediately:!0})},update:function(){}},C.m.wa.selectedOptions=!0,C.c.style={update:function(t,e){var i=C.a.f(e()||{});C.a.P(i,(function(e,i){if(null!==(i=C.a.f(i))&&i!==n&&!1!==i||(i=""),a)a(t).css(e,i);else if(/^--/.test(e))t.style.setProperty(e,i);else{e=e.replace(/-(\w)/g,(function(t,e){return e.toUpperCase()}));var r=t.style[e];t.style[e]=i,i===r||t.style[e]!=r||isNaN(i)||(t.style[e]=i+"px")}}))}},C.c.submit={init:function(t,e,n,i,r){if("function"!=typeof e())throw Error("The value for a submit binding must be a function");C.a.B(t,"submit",(function(n){var i,o=e();try{i=o.call(r.$data,t)}finally{!0!==i&&(n.preventDefault?n.preventDefault():n.returnValue=!1)}}))}},C.c.text={init:function(){return{controlsDescendantBindings:!0}},update:function(t,e){C.a.Bb(t,e())}},C.h.ea.text=!0,function(){if(i&&i.navigator){var t,e,r,o,a,s=function(t){if(t)return parseFloat(t[1])},u=i.navigator.userAgent;(t=i.opera&&i.opera.version&&parseInt(i.opera.version()))||(a=s(u.match(/Edge\/([^ ]+)$/)))||s(u.match(/Chrome\/([^ ]+)/))||(e=s(u.match(/Version\/([^ ]+) Safari/)))||(r=s(u.match(/Firefox\/([^ ]+)/)))||(o=C.a.W||s(u.match(/MSIE ([^ ]+)/)))||(o=s(u.match(/rv:([^ )]+)/)))}if(8<=o&&10>o)var l=C.a.g.Z(),c=C.a.g.Z(),h=function(t){var e=this.activeElement;(e=e&&C.a.g.get(e,c))&&e(t)},f=function(t,e){var n=t.ownerDocument;C.a.g.get(n,l)||(C.a.g.set(n,l,!0),C.a.B(n,"selectionchange",h)),C.a.g.set(t,c,e)};C.c.textInput={init:function(i,s,u){function l(t,e){C.a.B(i,t,e)}function c(){d||(p=i.value,d=C.a.setTimeout(h,4))}function h(){clearTimeout(d),p=d=n;var t=i.value;g!==t&&(g=t,C.m.eb(s(),u,"textInput",t))}var d,p,g=i.value,m=9==C.a.W?c:h,v=!1;o&&l("keypress",h),11>o&&l("propertychange",(function(t){v||"value"!==t.propertyName||m()})),8==o&&(l("keyup",h),l("keydown",h)),f&&(f(i,m),l("dragend",c)),(!o||9<=o)&&l("input",m),5>e&&"textarea"===C.a.R(i)?(l("keydown",c),l("paste",c),l("cut",c)):11>t?l("keydown",c):4>r?(l("DOMAutoComplete",h),l("dragdrop",h),l("drop",h)):a&&"number"===i.type&&l("keydown",c),l("change",h),l("blur",h),C.o((function t(){var e=C.a.f(s());null!==e&&e!==n||(e=""),p!==n&&e===p?C.a.setTimeout(t,4):i.value!==e&&(v=!0,i.value=e,v=!1,g=i.value)}),null,{l:i})}},C.m.wa.textInput=!0,C.c.textinput={preprocess:function(t,e,n){n("textInput",t)}}}(),C.c.uniqueName={init:function(t,e){if(e()){var n="ko_unique_"+ ++C.c.uniqueName.rd;C.a.Yc(t,n)}}},C.c.uniqueName.rd=0,C.c.using={init:function(t,e,n,i,r){var o;return n.has("as")&&(o={as:n.get("as"),noChildContext:n.get("noChildContext")}),e=r.createChildContext(e,o),C.Oa(e,t),{controlsDescendantBindings:!0}}},C.h.ea.using=!0,C.c.value={init:function(t,e,i){var r=C.a.R(t),o="input"==r;if(!o||"checkbox"!=t.type&&"radio"!=t.type){var a=[],s=i.get("valueUpdate"),u=!1,l=null;s&&(a="string"==typeof s?[s]:C.a.wc(s),C.a.Pa(a,"change"));var c,h,f=function(){l=null,u=!1;var n=e(),r=C.w.M(t);C.m.eb(n,i,"value",r)};!C.a.W||!o||"text"!=t.type||"off"==t.autocomplete||t.form&&"off"==t.form.autocomplete||-1!=C.a.A(a,"propertychange")||(C.a.B(t,"propertychange",(function(){u=!0})),C.a.B(t,"focus",(function(){u=!1})),C.a.B(t,"blur",(function(){u&&f()}))),C.a.D(a,(function(e){var n=f;C.a.Ud(e,"after")&&(n=function(){l=C.w.M(t),C.a.setTimeout(f,0)},e=e.substring(5)),C.a.B(t,e,n)})),c=o&&"file"==t.type?function(){var i=C.a.f(e());null===i||i===n||""===i?t.value="":C.u.G(f)}:function(){var o=C.a.f(e()),a=C.w.M(t);null!==l&&o===l?C.a.setTimeout(c,0):o===a&&a!==n||("select"===r?(a=i.get("valueAllowUnset"),C.w.cb(t,o,a),a||o===C.w.M(t)||C.u.G(f)):C.w.cb(t,o))},"select"===r?C.i.subscribe(t,C.i.H,(function(){h?i.get("valueAllowUnset")?c():f():(C.a.B(t,"change",f),h=C.o(c,null,{l:t}))}),null,{notifyImmediately:!0}):(C.a.B(t,"change",f),C.o(c,null,{l:t}))}else C.ib(t,{checkedValue:e})},update:function(){}},C.m.wa.value=!0,C.c.visible={update:function(t,e){var n=C.a.f(e()),i="none"!=t.style.display;n&&!i?t.style.display="":!n&&i&&(t.style.display="none")}},C.c.hidden={update:function(t,e){C.c.visible.update(t,(function(){return!C.a.f(e())}))}},function(t){C.c[t]={init:function(e,n,i,r,o){return C.c.event.init.call(this,e,(function(){var e={};return e[t]=n(),e}),i,r,o)}}}("click"),C.ca=function(){},C.ca.prototype.renderTemplateSource=function(){throw Error("Override renderTemplateSource")},C.ca.prototype.createJavaScriptEvaluatorBlock=function(){throw Error("Override createJavaScriptEvaluatorBlock")},C.ca.prototype.makeTemplateSource=function(t,e){if("string"==typeof t){var n=(e=e||r).getElementById(t);if(!n)throw Error("Cannot find template with ID "+t);return new C.C.F(n)}if(1==t.nodeType||8==t.nodeType)return new C.C.ia(t);throw Error("Unknown template type: "+t)},C.ca.prototype.renderTemplate=function(t,e,n,i){return t=this.makeTemplateSource(t,i),this.renderTemplateSource(t,e,n,i)},C.ca.prototype.isTemplateRewritten=function(t,e){return!1===this.allowTemplateRewriting||this.makeTemplateSource(t,e).data("isRewritten")},C.ca.prototype.rewriteTemplate=function(t,e,n){e=e((t=this.makeTemplateSource(t,n)).text()),t.text(e),t.data("isRewritten",!0)},C.b("templateEngine",C.ca),C.kc=function(){function t(t,e,n,i){t=C.m.ac(t);for(var r=C.m.Ra,o=0;o<t.length;o++){var a=t[o].key;if(Object.prototype.hasOwnProperty.call(r,a)){var s=r[a];if("function"==typeof s){if(a=s(t[o].value))throw Error(a)}else if(!s)throw Error("This template engine does not support the '"+a+"' binding within its templates")}}return n="ko.__tr_ambtns(function($context,$element){return(function(){return{ "+C.m.vb(t,{valueAccessors:!0})+" } })()},'"+n.toLowerCase()+"')",i.createJavaScriptEvaluatorBlock(n)+e}var e=/(<([a-z]+\d*)(?:\s+(?!data-bind\s*=\s*)[a-z0-9\-]+(?:=(?:\"[^\"]*\"|\'[^\']*\'|[^>]*))?)*\s+)data-bind\s*=\s*(["'])([\s\S]*?)\3/gi,n=/\x3c!--\s*ko\b\s*([\s\S]*?)\s*--\x3e/g;return{xd:function(t,e,n){e.isTemplateRewritten(t,n)||e.rewriteTemplate(t,(function(t){return C.kc.Ld(t,e)}),n)},Ld:function(i,r){return i.replace(e,(function(e,n,i,o,a){return t(a,n,i,r)})).replace(n,(function(e,n){return t(n,"\x3c!-- ko --\x3e","#comment",r)}))},md:function(t,e){return C.aa.Xb((function(n,i){var r=n.nextSibling;r&&r.nodeName.toLowerCase()===e&&C.ib(r,t,i)}))}}}(),C.b("__tr_ambtns",C.kc.md),function(){C.C={},C.C.F=function(t){if(this.F=t){var e=C.a.R(t);this.ab="script"===e?1:"textarea"===e?2:"template"==e&&t.content&&11===t.content.nodeType?3:4}},C.C.F.prototype.text=function(){var t=1===this.ab?"text":2===this.ab?"value":"innerHTML";if(0==arguments.length)return this.F[t];var e=arguments[0];"innerHTML"===t?C.a.fc(this.F,e):this.F[t]=e};var t=C.a.g.Z()+"_";C.C.F.prototype.data=function(e){if(1===arguments.length)return C.a.g.get(this.F,t+e);C.a.g.set(this.F,t+e,arguments[1])};var e=C.a.g.Z();C.C.F.prototype.nodes=function(){var t=this.F;if(0==arguments.length){var i=C.a.g.get(t,e)||{},r=i.lb||(3===this.ab?t.content:4===this.ab?t:n);if(!r||i.jd){var o=this.text();o&&o!==i.bb&&(r=C.a.Md(o,t.ownerDocument),C.a.g.set(t,e,{lb:r,bb:o,jd:!0}))}return r}i=arguments[0],this.ab!==n&&this.text(""),C.a.g.set(t,e,{lb:i})},C.C.ia=function(t){this.F=t},C.C.ia.prototype=new C.C.F,C.C.ia.prototype.constructor=C.C.ia,C.C.ia.prototype.text=function(){if(0==arguments.length){var t=C.a.g.get(this.F,e)||{};return t.bb===n&&t.lb&&(t.bb=t.lb.innerHTML),t.bb}C.a.g.set(this.F,e,{bb:arguments[0]})},C.b("templateSources",C.C),C.b("templateSources.domElement",C.C.F),C.b("templateSources.anonymousTemplate",C.C.ia)}(),function(){function t(t,e,n){var i;for(e=C.h.nextSibling(e);t&&(i=t)!==e;)n(i,t=C.h.nextSibling(i))}function e(e,n){if(e.length){var i=e[0],r=e[e.length-1],o=i.parentNode,a=C.ga.instance,s=a.preprocessNode;if(s){if(t(i,r,(function(t,e){var n=t.previousSibling,o=s.call(a,t);o&&(t===i&&(i=o[0]||e),t===r&&(r=o[o.length-1]||n))})),e.length=0,!i)return;i===r?e.push(i):(e.push(i,r),C.a.Ua(e,o))}t(i,r,(function(t){1!==t.nodeType&&8!==t.nodeType||C.vc(n,t)})),t(i,r,(function(t){1!==t.nodeType&&8!==t.nodeType||C.aa.cd(t,[n])})),C.a.Ua(e,o)}}function i(t){return t.nodeType?t:0<t.length?t[0]:null}function r(t,n,r,o,s){s=s||{};var u=(t&&i(t)||r||{}).ownerDocument,l=s.templateEngine||a;if(C.kc.xd(r,l,u),"number"!=typeof(r=l.renderTemplate(r,o,s,u)).length||0<r.length&&"number"!=typeof r[0].nodeType)throw Error("Template engine must return an array of DOM nodes");switch(u=!1,n){case"replaceChildren":C.h.va(t,r),u=!0;break;case"replaceNode":C.a.Xc(t,r),u=!0;break;case"ignoreTargetNode":break;default:throw Error("Unknown renderMode: "+n)}return u&&(e(r,o),s.afterRender&&C.u.G(s.afterRender,null,[r,o[s.as||"$data"]]),"replaceChildren"==n&&C.i.ma(t,C.i.H)),r}function o(t,e,n){return C.O(t)?t():"function"==typeof t?t(e,n):t}var a;C.gc=function(t){if(t!=n&&!(t instanceof C.ca))throw Error("templateEngine must inherit from ko.templateEngine");a=t},C.dc=function(t,e,s,u,l){if(((s=s||{}).templateEngine||a)==n)throw Error("Set a template engine before calling renderTemplate");if(l=l||"replaceChildren",u){var c=i(u);return C.$((function(){var n=e&&e instanceof C.fa?e:new C.fa(e,null,null,null,{exportDependencies:!0}),a=o(t,n.$data,n);n=r(u,l,a,n,s),"replaceNode"==l&&(c=i(u=n))}),null,{Sa:function(){return!c||!C.a.Sb(c)},l:c&&"replaceNode"==l?c.parentNode:c})}return C.aa.Xb((function(n){C.dc(t,e,s,n,"replaceNode")}))},C.Qd=function(t,i,a,s,u){function l(t,e){C.u.G(C.a.ec,null,[s,t,h,a,c,e]),C.i.ma(s,C.i.H)}function c(t,n){e(n,f),a.afterRender&&a.afterRender(n,t),f=null}function h(e,n){f=u.createChildContext(e,{as:d,noChildContext:a.noChildContext,extend:function(t){t.$index=n,d&&(t[d+"Index"]=n)}});var i=o(t,e,f);return r(s,"ignoreTargetNode",i,f,a)}var f,d=a.as,p=!1===a.includeDestroyed||C.options.foreachHidesDestroyed&&!a.includeDestroyed;if(p||a.beforeRemove||!C.Pc(i))return C.$((function(){var t=C.a.f(i)||[];void 0===t.length&&(t=[t]),p&&(t=C.a.jb(t,(function(t){return t===n||null===t||!C.a.f(t._destroy)}))),l(t)}),null,{l:s});l(i.v());var g=i.subscribe((function(t){l(i(),t)}),null,"arrayChange");return g.l(s),g};var s=C.a.g.Z(),u=C.a.g.Z();C.c.template={init:function(t,e){var n=C.a.f(e());if("string"==typeof n||"name"in n)C.h.Ea(t);else if("nodes"in n){if(n=n.nodes||[],C.O(n))throw Error('The "nodes" option must be a plain, non-observable array.');var i=n[0]&&n[0].parentNode;i&&C.a.g.get(i,u)||(i=C.a.Yb(n),C.a.g.set(i,u,!0)),new C.C.ia(t).nodes(i)}else{if(!(0<(n=C.h.childNodes(t)).length))throw Error("Anonymous template defined, but no template content was provided");i=C.a.Yb(n),new C.C.ia(t).nodes(i)}return{controlsDescendantBindings:!0}},update:function(t,e,i,r,o){var a=e();i=!0,r=null,"string"==typeof(e=C.a.f(a))?e={}:(a="name"in e?e.name:t,"if"in e&&(i=C.a.f(e.if)),i&&"ifnot"in e&&(i=!C.a.f(e.ifnot)),i&&!a&&(i=!1)),"foreach"in e?r=C.Qd(a,i&&e.foreach||[],e,t,o):i?(i=o,"data"in e&&(i=o.createChildContext(e.data,{as:e.as,noChildContext:e.noChildContext,exportDependencies:!0})),r=C.dc(a,i,e,t)):C.h.Ea(t),o=r,(e=C.a.g.get(t,s))&&"function"==typeof e.s&&e.s(),C.a.g.set(t,s,!o||o.ja&&!o.ja()?n:o)}},C.m.Ra.template=function(t){return 1==(t=C.m.ac(t)).length&&t[0].unknown||C.m.Id(t,"name")?null:"This template engine does not support anonymous templates nested within its templates"},C.h.ea.template=!0}(),C.b("setTemplateEngine",C.gc),C.b("renderTemplate",C.dc),C.a.Kc=function(t,e,n){var i,r,o,a,s;if(t.length&&e.length)for(i=r=0;(!n||i<n)&&(a=t[r]);++r){for(o=0;s=e[o];++o)if(a.value===s.value){a.moved=s.index,s.moved=a.index,e.splice(o,1),i=o=0;break}i+=o}},C.a.Pb=function(){function t(t,e,n,i,r){var o,a,s,u,l,c=Math.min,h=Math.max,f=[],d=t.length,p=e.length,g=p-d||1,m=d+p+1;for(o=0;o<=d;o++)for(u=s,f.push(s=[]),l=c(p,o+g),a=h(0,o-1);a<=l;a++)s[a]=a?o?t[o-1]===e[a-1]?u[a-1]:c(u[a]||m,s[a-1]||m)+1:a+1:o+1;for(c=[],h=[],g=[],o=d,a=p;o||a;)p=f[o][a]-1,a&&p===f[o][a-1]?h.push(c[c.length]={status:n,value:e[--a],index:a}):o&&p===f[o-1][a]?g.push(c[c.length]={status:i,value:t[--o],index:o}):(--a,--o,r.sparse||c.push({status:"retained",value:e[a]}));return C.a.Kc(g,h,!r.dontLimitMoves&&10*d),c.reverse()}return function(e,n,i){return i="boolean"==typeof i?{dontLimitMoves:i}:i||{},n=n||[],(e=e||[]).length<n.length?t(e,n,"added","deleted",i):t(n,e,"deleted","added",i)}}(),C.b("utils.compareArrays",C.a.Pb),function(){function t(t,e,i,r,o){var a=[],s=C.$((function(){var n=e(i,o,C.a.Ua(a,t))||[];0<a.length&&(C.a.Xc(a,n),r&&C.u.G(r,null,[i,n,o])),a.length=0,C.a.Nb(a,n)}),null,{l:t,Sa:function(){return!C.a.kd(a)}});return{Y:a,$:s.ja()?s:n}}var e=C.a.g.Z(),i=C.a.g.Z();C.a.ec=function(r,o,a,s,u,l){function c(t){d={Aa:t,pb:C.ta(w++)},b.push(d),E||A.push(d)}function h(t){d=v[t],w!==d.pb.v()&&T.push(d),d.pb(w++),C.a.Ua(d.Y,r),b.push(d)}function f(t,e){if(t)for(var n=0,i=e.length;n<i;n++)C.a.D(e[n].Y,(function(i){t(i,n,e[n].Aa)}))}void 0===(o=o||[]).length&&(o=[o]),s=s||{};var d,p,g,m,v=C.a.g.get(r,e),E=!v,b=[],y=0,w=0,D=[],S=[],N=[],T=[],A=[],x=0;if(E)C.a.D(o,c);else{if(!l||v&&v._countWaitingForRemove){var I=C.a.Mb(v,(function(t){return t.Aa}));l=C.a.Pb(I,o,{dontLimitMoves:s.dontLimitMoves,sparse:!0})}var F,P,O;for(I=0;F=l[I];I++)switch(P=F.moved,O=F.index,F.status){case"deleted":for(;y<O;)h(y++);P===n&&((d=v[y]).$&&(d.$.s(),d.$=n),C.a.Ua(d.Y,r).length&&(s.beforeRemove&&(b.push(d),x++,d.Aa===i?d=null:N.push(d)),d&&D.push.apply(D,d.Y))),y++;break;case"added":for(;w<O;)h(y++);P!==n?(S.push(b.length),h(P)):c(F.value)}for(;w<o.length;)h(y++);b._countWaitingForRemove=x}C.a.g.set(r,e,b),f(s.beforeMove,T),C.a.D(D,s.beforeRemove?C.oa:C.removeNode);try{m=r.ownerDocument.activeElement}catch(t){}if(S.length)for(;(I=S.shift())!=n;){for(d=b[I],p=n;I;)if((g=b[--I].Y)&&g.length){p=g[g.length-1];break}for(o=0;y=d.Y[o];p=y,o++)C.h.Wb(r,y,p)}for(I=0;d=b[I];I++){for(d.Y||C.a.extend(d,t(r,a,d.Aa,u,d.pb)),o=0;y=d.Y[o];p=y,o++)C.h.Wb(r,y,p);!d.Ed&&u&&(u(d.Aa,d.Y,d.pb),d.Ed=!0,p=d.Y[d.Y.length-1])}for(m&&r.ownerDocument.activeElement!=m&&m.focus(),f(s.beforeRemove,N),I=0;I<N.length;++I)N[I].Aa=i;f(s.afterMove,T),f(s.afterAdd,A)}}(),C.b("utils.setDomNodeChildrenFromArrayMapping",C.a.ec),C.ba=function(){this.allowTemplateRewriting=!1},C.ba.prototype=new C.ca,C.ba.prototype.constructor=C.ba,C.ba.prototype.renderTemplateSource=function(t,e,n,i){return(e=9>C.a.W||!t.nodes?null:t.nodes())?C.a.la(e.cloneNode(!0).childNodes):(t=t.text(),C.a.ua(t,i))},C.ba.Ma=new C.ba,C.gc(C.ba.Ma),C.b("nativeTemplateEngine",C.ba),function(){C.$a=function(){var t=this.Hd=function(){if(!a||!a.tmpl)return 0;try{if(0<=a.tmpl.tag.tmpl.open.toString().indexOf("__"))return 2}catch(t){}return 1}();this.renderTemplateSource=function(e,n,i,o){if(o=o||r,i=i||{},2>t)throw Error("Your version of jQuery.tmpl is too old. Please upgrade to jQuery.tmpl 1.0.0pre or later.");var s=e.data("precompiled");return s||(s=e.text()||"",s=a.template(null,"{{ko_with $item.koBindingContext}}"+s+"{{/ko_with}}"),e.data("precompiled",s)),e=[n.$data],n=a.extend({koBindingContext:n},i.templateOptions),(n=a.tmpl(s,e,n)).appendTo(o.createElement("div")),a.fragments={},n},this.createJavaScriptEvaluatorBlock=function(t){return"{{ko_code ((function() { return "+t+" })()) }}"},this.addTemplate=function(t,e){r.write("<script type='text/html' id='"+t+"'>"+e+"<\/script>")},0<t&&(a.tmpl.tag.ko_code={open:"__.push($1 || '');"},a.tmpl.tag.ko_with={open:"with($1) {",close:"} "})},C.$a.prototype=new C.ca,C.$a.prototype.constructor=C.$a;var t=new C.$a;0<t.Hd&&C.gc(t),C.b("jqueryTmplTemplateEngine",C.$a)}()}))}()})),n=-1;function i(t,e,u,l){if(t===e)return t?[[0,t]]:[];if(null!=u){var c=function(t,e,n){var i="number"==typeof n?{index:n,length:0}:n.oldRange,r="number"==typeof n?null:n.newRange,o=t.length,a=e.length;if(0===i.length&&(null===r||0===r.length)){var s=i.index,u=t.slice(0,s),l=t.slice(s),c=r?r.index:null,h=s+a-o;if((null===c||c===h)&&!(h<0||h>a)){var d=e.slice(0,h);if((m=e.slice(h))===l){var p=Math.min(s,h);if((E=u.slice(0,p))===(C=d.slice(0,p)))return f(E,u.slice(p),d.slice(p),l)}}if(null===c||c===s){var g=s,m=(d=e.slice(0,g),e.slice(g));if(d===u){var v=Math.min(o-g,a-g);if((b=l.slice(l.length-v))===(y=m.slice(m.length-v)))return f(u,l.slice(0,l.length-v),m.slice(0,m.length-v),b)}}}if(i.length>0&&r&&0===r.length){var E=t.slice(0,i.index),b=t.slice(i.index+i.length);if(!(a<(p=E.length)+(v=b.length))){var C=e.slice(0,p),y=e.slice(a-v);if(E===C&&b===y)return f(E,t.slice(p,o-v),e.slice(p,a-v),b)}}return null}(t,e,u);if(c)return c}var h=o(t,e),d=t.substring(0,h);h=a(t=t.substring(h),e=e.substring(h));var p=t.substring(t.length-h),g=function(t,e){var s;if(!t)return[[1,e]];if(!e)return[[n,t]];var u=t.length>e.length?t:e,l=t.length>e.length?e:t,c=u.indexOf(l);if(-1!==c)return s=[[1,u.substring(0,c)],[0,l],[1,u.substring(c+l.length)]],t.length>e.length&&(s[0][0]=s[2][0]=n),s;if(1===l.length)return[[n,t],[1,e]];var h=function(t,e){var n=t.length>e.length?t:e,i=t.length>e.length?e:t;if(n.length<4||2*i.length<n.length)return null;function r(t,e,n){for(var i,r,s,u,l=t.substring(n,n+Math.floor(t.length/4)),c=-1,h="";-1!==(c=e.indexOf(l,c+1));){var f=o(t.substring(n),e.substring(c)),d=a(t.substring(0,n),e.substring(0,c));h.length<d+f&&(h=e.substring(c-d,c)+e.substring(c,c+f),i=t.substring(0,n-d),r=t.substring(n+f),s=e.substring(0,c-d),u=e.substring(c+f))}return 2*h.length>=t.length?[i,r,s,u,h]:null}var s,u,l,c,h,f=r(n,i,Math.ceil(n.length/4)),d=r(n,i,Math.ceil(n.length/2));if(!f&&!d)return null;s=d?f&&f[4].length>d[4].length?f:d:f;t.length>e.length?(u=s[0],l=s[1],c=s[2],h=s[3]):(c=s[0],h=s[1],u=s[2],l=s[3]);var p=s[4];return[u,l,c,h,p]}(t,e);if(h){var f=h[0],d=h[1],p=h[2],g=h[3],m=h[4],v=i(f,p),E=i(d,g);return v.concat([[0,m]],E)}return function(t,e){for(var i=t.length,o=e.length,a=Math.ceil((i+o)/2),s=a,u=2*a,l=new Array(u),c=new Array(u),h=0;h<u;h++)l[h]=-1,c[h]=-1;l[s+1]=0,c[s+1]=0;for(var f=i-o,d=f%2!=0,p=0,g=0,m=0,v=0,E=0;E<a;E++){for(var b=-E+p;b<=E-g;b+=2){for(var C=s+b,y=(T=b===-E||b!==E&&l[C-1]<l[C+1]?l[C+1]:l[C-1]+1)-b;T<i&&y<o&&t.charAt(T)===e.charAt(y);)T++,y++;if(l[C]=T,T>i)g+=2;else if(y>o)p+=2;else if(d){if((S=s+f-b)>=0&&S<u&&-1!==c[S])if(T>=(D=i-c[S]))return r(t,e,T,y)}}for(var w=-E+m;w<=E-v;w+=2){for(var D,S=s+w,N=(D=w===-E||w!==E&&c[S-1]<c[S+1]?c[S+1]:c[S-1]+1)-w;D<i&&N<o&&t.charAt(i-D-1)===e.charAt(o-N-1);)D++,N++;if(c[S]=D,D>i)v+=2;else if(N>o)m+=2;else if(!d){if((C=s+f-w)>=0&&C<u&&-1!==l[C]){var T;y=s+(T=l[C])-C;if(T>=(D=i-D))return r(t,e,T,y)}}}}return[[n,t],[1,e]]}(t,e)}(t=t.substring(0,t.length-h),e=e.substring(0,e.length-h));return d&&g.unshift([0,d]),p&&g.push([0,p]),s(g,l),g}function r(t,e,n,r){var o=t.substring(0,n),a=e.substring(0,r),s=t.substring(n),u=e.substring(r),l=i(o,a),c=i(s,u);return l.concat(c)}function o(t,e){if(!t||!e||t.charAt(0)!==e.charAt(0))return 0;for(var n=0,i=Math.min(t.length,e.length),r=i,o=0;n<r;)t.substring(o,r)==e.substring(o,r)?o=n=r:i=r,r=Math.floor((i-n)/2+n);return u(t.charCodeAt(r-1))&&r--,r}function a(t,e){if(!t||!e||t.slice(-1)!==e.slice(-1))return 0;for(var n=0,i=Math.min(t.length,e.length),r=i,o=0;n<r;)t.substring(t.length-r,t.length-o)==e.substring(e.length-r,e.length-o)?o=n=r:i=r,r=Math.floor((i-n)/2+n);return l(t.charCodeAt(t.length-r))&&r--,r}function s(t,e){t.push([0,""]);for(var i,r=0,u=0,l=0,f="",d="";r<t.length;)if(r<t.length-1&&!t[r][1])t.splice(r,1);else switch(t[r][0]){case 1:l++,d+=t[r][1],r++;break;case n:u++,f+=t[r][1],r++;break;case 0:var p=r-l-u-1;if(e){if(p>=0&&h(t[p][1])){var g=t[p][1].slice(-1);if(t[p][1]=t[p][1].slice(0,-1),f=g+f,d=g+d,!t[p][1]){t.splice(p,1),r--;var m=p-1;t[m]&&1===t[m][0]&&(l++,d=t[m][1]+d,m--),t[m]&&t[m][0]===n&&(u++,f=t[m][1]+f,m--),p=m}}if(c(t[r][1])){g=t[r][1].charAt(0);t[r][1]=t[r][1].slice(1),f+=g,d+=g}}if(r<t.length-1&&!t[r][1]){t.splice(r,1);break}if(f.length>0||d.length>0){f.length>0&&d.length>0&&(0!==(i=o(d,f))&&(p>=0?t[p][1]+=d.substring(0,i):(t.splice(0,0,[0,d.substring(0,i)]),r++),d=d.substring(i),f=f.substring(i)),0!==(i=a(d,f))&&(t[r][1]=d.substring(d.length-i)+t[r][1],d=d.substring(0,d.length-i),f=f.substring(0,f.length-i)));var v=l+u;0===f.length&&0===d.length?(t.splice(r-v,v),r-=v):0===f.length?(t.splice(r-v,v,[1,d]),r=r-v+1):0===d.length?(t.splice(r-v,v,[n,f]),r=r-v+1):(t.splice(r-v,v,[n,f],[1,d]),r=r-v+2)}0!==r&&0===t[r-1][0]?(t[r-1][1]+=t[r][1],t.splice(r,1)):r++,l=0,u=0,f="",d=""}""===t[t.length-1][1]&&t.pop();var E=!1;for(r=1;r<t.length-1;)0===t[r-1][0]&&0===t[r+1][0]&&(t[r][1].substring(t[r][1].length-t[r-1][1].length)===t[r-1][1]?(t[r][1]=t[r-1][1]+t[r][1].substring(0,t[r][1].length-t[r-1][1].length),t[r+1][1]=t[r-1][1]+t[r+1][1],t.splice(r-1,1),E=!0):t[r][1].substring(0,t[r+1][1].length)==t[r+1][1]&&(t[r-1][1]+=t[r+1][1],t[r][1]=t[r][1].substring(t[r+1][1].length)+t[r+1][1],t.splice(r+1,1),E=!0)),r++;E&&s(t,e)}function u(t){return t>=55296&&t<=56319}function l(t){return t>=56320&&t<=57343}function c(t){return l(t.charCodeAt(0))}function h(t){return u(t.charCodeAt(t.length-1))}function f(t,e,i,r){return h(t)||c(r)?null:function(t){for(var e=[],n=0;n<t.length;n++)t[n][1].length>0&&e.push(t[n]);return e}([[0,t],[n,e],[1,i],[0,r]])}function d(t,e,n){return i(t,e,n,!0)}d.INSERT=1,d.DELETE=n,d.EQUAL=0;var p,g=d,m=t((function(t,e){var n,i,r,o,a=(n=g)&&"object"==typeof n&&"default"in n?n.default:n;function s(t){e.isDebug=t}function u(t){switch(t){case"ltr":return e.PageProgression.LTR;case"rtl":return e.PageProgression.RTL;default:throw new Error("unknown PageProgression: "+t)}}function l(t){var e=Array.from(t),n=null;return e[0]instanceof Error&&(n=e.shift()),{error:n,messages:e}}function c(t){var e=t.error,n=e&&(e.frameTrace||e.stack),i=[].concat(t.messages);return e&&(i.length>0&&(i=i.concat(["\n"])),i=i.concat([e.toString()]),n&&(i=i.concat(["\n"]).concat(n))),i}e.isDebug=!1,function(t){t.LTR="ltr",t.RTL="rtl"}(e.PageProgression||(e.PageProgression={})),(i=e.PageSide||(e.PageSide={})).LEFT="left",i.RIGHT="right",(r=e.ReadyState||(e.ReadyState={})).LOADING="loading",r.INTERACTIVE="interactive",r.COMPLETE="complete",function(t){t[t.DEBUG=1]="DEBUG",t[t.INFO=2]="INFO",t[t.WARN=3]="WARN",t[t.ERROR=4]="ERROR"}(o||(o={}));var h,f=new(function(){function t(t){this.opt_console=t,this.listeners={}}var e=t.prototype;return e.consoleDebug=function(t){var e,n,i;this.opt_console?this.opt_console.debug?(e=this.opt_console).debug.apply(e,t):(n=this.opt_console).log.apply(n,t):(i=console).debug.apply(i,t)},e.consoleInfo=function(t){var e,n,i;this.opt_console?this.opt_console.info?(e=this.opt_console).info.apply(e,t):(n=this.opt_console).log.apply(n,t):(i=console).info.apply(i,t)},e.consoleWarn=function(t){var e,n,i;this.opt_console?this.opt_console.warn?(e=this.opt_console).warn.apply(e,t):(n=this.opt_console).log.apply(n,t):(i=console).warn.apply(i,t)},e.consoleError=function(t){var e,n,i;this.opt_console?this.opt_console.error?(e=this.opt_console).error.apply(e,t):(n=this.opt_console).log.apply(n,t):(i=console).error.apply(i,t)},e.triggerListeners=function(t,e){var n=this.listeners[t];n&&n.forEach((function(t){t(e)}))},e.addListener=function(t,e){var n=this.listeners[t];n||(n=this.listeners[t]=[]),n.push(e)},e.debug=function(){var t=l(arguments);this.consoleDebug(c(t)),this.triggerListeners(o.DEBUG,t)},e.info=function(){var t=l(arguments);this.consoleInfo(c(t)),this.triggerListeners(o.INFO,t)},e.warn=function(){var t=l(arguments);this.consoleWarn(c(t)),this.triggerListeners(o.WARN,t)},e.error=function(){var t=l(arguments);this.consoleError(c(t)),this.triggerListeners(o.ERROR,t)},t}());(h=e.HOOKS||(e.HOOKS={})).SIMPLE_PROPERTY="SIMPLE_PROPERTY",h.PREPROCESS_SINGLE_DOCUMENT="PREPROCESS_SINGLE_DOCUMENT",h.PREPROCESS_TEXT_CONTENT="PREPROCESS_TEXT_CONTENT",h.PREPROCESS_ELEMENT_STYLE="PREPROCESS_ELEMENT_STYLE",h.POLYFILLED_INHERITED_PROPS="POLYFILLED_INHERITED_PROPS",h.CONFIGURATION="CONFIGURATION",h.RESOLVE_TEXT_NODE_BREAKER="RESOLVE_TEXT_NODE_BREAKER",h.RESOLVE_FORMATTING_CONTEXT="RESOLVE_FORMATTING_CONTEXT",h.RESOLVE_LAYOUT_PROCESSOR="RESOLVE_LAYOUT_PROCESSOR",h.POST_LAYOUT_BLOCK="POST_LAYOUT_BLOCK";var d={};function p(t,n){if(e.HOOKS[t]){var i=d[t];i||(i=d[t]=[]),i.push(n)}else f.warn(new Error("Skipping unknown plugin hook '"+t+"'."))}function m(t,n){if(e.HOOKS[t]){var i=d[t];if(i){var r=i.indexOf(n);r>=0&&i.splice(r,1)}}else f.warn(new Error("Ignoring unknown plugin hook '"+t+"'."))}function v(t){return d[t]||[]}var E={registerHook:p,removeHook:m},b=function(){function t(t){this.performanceInstance=t,this.timestamps={},this.registerTiming=C,this.registerStartTiming=this.registerStartTiming=C,this.registerEndTiming=this.registerEndTiming=C}var e=t.prototype;return e.forceRegisterStartTiming=function(t,e){y.call(this,t,"start",e)},e.forceRegisterEndTiming=function(t,e){y.call(this,t,"end",e)},e.printTimings=function(){var t=this.timestamps,e="";Object.keys(t).forEach((function(n){for(var i=t[n],r=i.length,o=0;o<r;o++){var a=i[o];e+=n,r>1&&(e+="("+o+")"),e+=" => start: "+a.start+", end: "+a.end+", duration: "+(a.end-a.start)+"\n"}})),f.info(e)},e.disable=function(){this.registerTiming=C,this.registerStartTiming=this.registerStartTiming=C,this.registerEndTiming=this.registerEndTiming=C},e.enable=function(){this.registerTiming=y,this.registerStartTiming=this.registerStartTiming=w,this.registerEndTiming=this.registerEndTiming=D},e.isEnabled=function(){return this.registerStartTiming===w},t}();function C(){}function y(t,e,n){n||(n=this.performanceInstance.now());var i,r=this.timestamps[t];r||(r=this.timestamps[t]=[]);for(var o=r.length-1;o>=0&&(!(i=r[o])||i[e]);o--)i=null;i||r.push(i={}),i[e]=n}function w(t,e){this.registerTiming(t,"start",e)}function D(t,e){this.registerTiming(t,"end",e)}var S={now:Date.now},N=new b(window&&window.performance||S);N.forceRegisterStartTiming("load_vivliostyle");var T={profiler:{registerStartTiming:N.registerStartTiming,registerEndTiming:N.registerEndTiming,printTimings:N.printTimings,disable:N.disable,enable:N.enable}};function A(t,e){for(var n=0;n<e.length;n++){var i=e[n];i.enumerable=i.enumerable||!1,i.configurable=!0,"value"in i&&(i.writable=!0),Object.defineProperty(t,i.key,i)}}function x(t,e,n){return e&&A(t.prototype,e),n&&A(t,n),t}function I(t,e){t.prototype=Object.create(e.prototype),t.prototype.constructor=t,P(t,e)}function F(t){return(F=Object.setPrototypeOf?Object.getPrototypeOf:function(t){return t.__proto__||Object.getPrototypeOf(t)})(t)}function P(t,e){return(P=Object.setPrototypeOf||function(t,e){return t.__proto__=e,t})(t,e)}function O(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(t){return!1}}function R(t,e,n){return(R=O()?Reflect.construct:function(t,e,n){var i=[null];i.push.apply(i,e);var r=new(Function.bind.apply(t,i));return n&&P(r,n.prototype),r}).apply(null,arguments)}function k(t){var e="function"==typeof Map?new Map:void 0;return(k=function(t){if(null===t||-1===Function.toString.call(t).indexOf("[native code]"))return t;if("function"!=typeof t)throw new TypeError("Super expression must either be null or a function");if(void 0!==e){if(e.has(t))return e.get(t);e.set(t,n)}function n(){return R(t,arguments,F(this).constructor)}return n.prototype=Object.create(t.prototype,{constructor:{value:n,enumerable:!1,writable:!0,configurable:!0}}),P(n,t)})(t)}function L(t){if(void 0===t)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return t}function B(t,e){(null==e||e>t.length)&&(e=t.length);for(var n=0,i=new Array(e);n<e;n++)i[n]=t[n];return i}function _(t,e){var n;if("undefined"==typeof Symbol||null==t[Symbol.iterator]){if(Array.isArray(t)||(n=function(t,e){if(t){if("string"==typeof t)return B(t,void 0);var n=Object.prototype.toString.call(t).slice(8,-1);return"Object"===n&&t.constructor&&(n=t.constructor.name),"Map"===n||"Set"===n?Array.from(t):"Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)?B(t,void 0):void 0}}(t))||e&&t&&"number"==typeof t.length){n&&(t=n);var i=0;return function(){return i>=t.length?{done:!0}:{done:!1,value:t[i++]}}}throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}return(n=t[Symbol.iterator]()).next.bind(n)}var M=/^(?:[ -#%-\*,-\/:;\?@\[-\]_\{\}\xA0\xA1\xA7\xAB\xB6\xB7\xBB\xBF\u0300-\u036F\u037E\u0387\u0483-\u0487\u055A-\u055F\u0589\u058A\u0591-\u05C7\u05F3\u05F4\u0609\u060A\u060C\u060D\u0610-\u061B\u061E\u061F\u064B-\u065F\u066A-\u066D\u0670\u06D4\u06D6-\u06DC\u06DF-\u06E4\u06E7\u06E8\u06EA-\u06ED\u0700-\u070D\u0711\u0730-\u074A\u07A6-\u07B0\u07EB-\u07F3\u07F7-\u07F9\u07FD\u0816-\u0819\u081B-\u0823\u0825-\u0827\u0829-\u082D\u0830-\u083E\u0859-\u085B\u085E\u08D3-\u08E1\u08E3-\u0902\u093A\u093C\u0941-\u0948\u094D\u0951-\u0957\u0962-\u0965\u0970\u0981\u09BC\u09C1-\u09C4\u09CD\u09E2\u09E3\u09FD\u09FE\u0A01\u0A02\u0A3C\u0A41\u0A42\u0A47\u0A48\u0A4B-\u0A4D\u0A51\u0A70\u0A71\u0A75\u0A76\u0A81\u0A82\u0ABC\u0AC1-\u0AC5\u0AC7\u0AC8\u0ACD\u0AE2\u0AE3\u0AF0\u0AFA-\u0AFF\u0B01\u0B3C\u0B3F\u0B41-\u0B44\u0B4D\u0B55\u0B56\u0B62\u0B63\u0B82\u0BC0\u0BCD\u0C00\u0C04\u0C3E-\u0C40\u0C46-\u0C48\u0C4A-\u0C4D\u0C55\u0C56\u0C62\u0C63\u0C77\u0C81\u0C84\u0CBC\u0CBF\u0CC6\u0CCC\u0CCD\u0CE2\u0CE3\u0D00\u0D01\u0D3B\u0D3C\u0D41-\u0D44\u0D4D\u0D62\u0D63\u0D81\u0DCA\u0DD2-\u0DD4\u0DD6\u0DF4\u0E31\u0E34-\u0E3A\u0E47-\u0E4F\u0E5A\u0E5B\u0EB1\u0EB4-\u0EBC\u0EC8-\u0ECD\u0F04-\u0F12\u0F14\u0F18\u0F19\u0F35\u0F37\u0F39-\u0F3D\u0F71-\u0F7E\u0F80-\u0F87\u0F8D-\u0F97\u0F99-\u0FBC\u0FC6\u0FD0-\u0FD4\u0FD9\u0FDA\u102D-\u1030\u1032-\u1037\u1039\u103A\u103D\u103E\u104A-\u104F\u1058\u1059\u105E-\u1060\u1071-\u1074\u1082\u1085\u1086\u108D\u109D\u10FB\u135D-\u1368\u1400\u166E\u1680\u169B\u169C\u16EB-\u16ED\u1712-\u1714\u1732-\u1736\u1752\u1753\u1772\u1773\u17B4\u17B5\u17B7-\u17BD\u17C6\u17C9-\u17D6\u17D8-\u17DA\u17DD\u1800-\u180D\u1885\u1886\u18A9\u1920-\u1922\u1927\u1928\u1932\u1939-\u193B\u1944\u1945\u1A17\u1A18\u1A1B\u1A1E\u1A1F\u1A56\u1A58-\u1A5E\u1A60\u1A62\u1A65-\u1A6C\u1A73-\u1A7C\u1A7F\u1AA0-\u1AA6\u1AA8-\u1AAD\u1AB0-\u1ABD\u1ABF\u1AC0\u1B00-\u1B03\u1B34\u1B36-\u1B3A\u1B3C\u1B42\u1B5A-\u1B60\u1B6B-\u1B73\u1B80\u1B81\u1BA2-\u1BA5\u1BA8\u1BA9\u1BAB-\u1BAD\u1BE6\u1BE8\u1BE9\u1BED\u1BEF-\u1BF1\u1BFC-\u1BFF\u1C2C-\u1C33\u1C36\u1C37\u1C3B-\u1C3F\u1C7E\u1C7F\u1CC0-\u1CC7\u1CD0-\u1CE0\u1CE2-\u1CE8\u1CED\u1CF4\u1CF8\u1CF9\u1DC0-\u1DF9\u1DFB-\u1DFF\u2000-\u200A\u2010-\u2027\u202F-\u2043\u2045-\u2051\u2053-\u205F\u207D\u207E\u208D\u208E\u20D0-\u20DC\u20E1\u20E5-\u20F0\u2308-\u230B\u2329\u232A\u2768-\u2775\u27C5\u27C6\u27E6-\u27EF\u2983-\u2998\u29D8-\u29DB\u29FC\u29FD\u2CEF-\u2CF1\u2CF9-\u2CFC\u2CFE\u2CFF\u2D70\u2D7F\u2DE0-\u2E2E\u2E30-\u2E4F\u2E52\u3000-\u3003\u3008-\u3011\u3014-\u301F\u302A-\u302D\u3030\u303D\u3099\u309A\u30A0\u30FB\uA4FE\uA4FF\uA60D-\uA60F\uA66F\uA673-\uA67E\uA69E\uA69F\uA6F0-\uA6F7\uA802\uA806\uA80B\uA825\uA826\uA82C\uA874-\uA877\uA8C4\uA8C5\uA8CE\uA8CF\uA8E0-\uA8F1\uA8F8-\uA8FA\uA8FC\uA8FF\uA926-\uA92F\uA947-\uA951\uA95F\uA980-\uA982\uA9B3\uA9B6-\uA9B9\uA9BC\uA9BD\uA9C1-\uA9CD\uA9DE\uA9DF\uA9E5\uAA29-\uAA2E\uAA31\uAA32\uAA35\uAA36\uAA43\uAA4C\uAA5C-\uAA5F\uAA7C\uAAB0\uAAB2-\uAAB4\uAAB7\uAAB8\uAABE\uAABF\uAAC1\uAADE\uAADF\uAAEC\uAAED\uAAF0\uAAF1\uAAF6\uABE5\uABE8\uABEB\uABED\uFB1E\uFD3E\uFD3F\uFE00-\uFE19\uFE20-\uFE52\uFE54-\uFE61\uFE63\uFE68\uFE6A\uFE6B\uFF01-\uFF03\uFF05-\uFF0A\uFF0C-\uFF0F\uFF1A\uFF1B\uFF1F\uFF20\uFF3B-\uFF3D\uFF3F\uFF5B\uFF5D\uFF5F-\uFF65]|\uD800[\uDD00-\uDD02\uDDFD\uDEE0\uDF76-\uDF7A\uDF9F\uDFD0]|\uD801\uDD6F|\uD802[\uDC57\uDD1F\uDD3F\uDE01-\uDE03\uDE05\uDE06\uDE0C-\uDE0F\uDE38-\uDE3A\uDE3F\uDE50-\uDE58\uDE7F\uDEE5\uDEE6\uDEF0-\uDEF6\uDF39-\uDF3F\uDF99-\uDF9C]|\uD803[\uDD24-\uDD27\uDEAB-\uDEAD\uDF46-\uDF50\uDF55-\uDF59]|\uD804[\uDC01\uDC38-\uDC4D\uDC7F-\uDC81\uDCB3-\uDCB6\uDCB9-\uDCBC\uDCBE-\uDCC1\uDD00-\uDD02\uDD27-\uDD2B\uDD2D-\uDD34\uDD40-\uDD43\uDD73-\uDD75\uDD80\uDD81\uDDB6-\uDDBE\uDDC5-\uDDCD\uDDCF\uDDDB\uDDDD-\uDDDF\uDE2F-\uDE31\uDE34\uDE36-\uDE3E\uDEA9\uDEDF\uDEE3-\uDEEA\uDF00\uDF01\uDF3B\uDF3C\uDF40\uDF66-\uDF6C\uDF70-\uDF74]|\uD805[\uDC38-\uDC3F\uDC42-\uDC44\uDC46\uDC4B-\uDC4F\uDC5A\uDC5B\uDC5D\uDC5E\uDCB3-\uDCB8\uDCBA\uDCBF\uDCC0\uDCC2\uDCC3\uDCC6\uDDB2-\uDDB5\uDDBC\uDDBD\uDDBF-\uDDD7\uDDDC\uDDDD\uDE33-\uDE3A\uDE3D\uDE3F-\uDE43\uDE60-\uDE6C\uDEAB\uDEAD\uDEB0-\uDEB5\uDEB7\uDF1D-\uDF1F\uDF22-\uDF25\uDF27-\uDF2B\uDF3C-\uDF3E]|\uD806[\uDC2F-\uDC37\uDC39-\uDC3B\uDD3B\uDD3C\uDD3E\uDD43-\uDD46\uDDD4-\uDDD7\uDDDA\uDDDB\uDDE0\uDDE2\uDE01-\uDE0A\uDE33-\uDE38\uDE3B-\uDE47\uDE51-\uDE56\uDE59-\uDE5B\uDE8A-\uDE96\uDE98-\uDE9C\uDE9E-\uDEA2]|\uD807[\uDC30-\uDC36\uDC38-\uDC3D\uDC3F\uDC41-\uDC45\uDC70\uDC71\uDC92-\uDCA7\uDCAA-\uDCB0\uDCB2\uDCB3\uDCB5\uDCB6\uDD31-\uDD36\uDD3A\uDD3C\uDD3D\uDD3F-\uDD45\uDD47\uDD90\uDD91\uDD95\uDD97\uDEF3\uDEF4\uDEF7\uDEF8\uDFFF]|\uD809[\uDC70-\uDC74]|\uD81A[\uDE6E\uDE6F\uDEF0-\uDEF5\uDF30-\uDF3B\uDF44]|\uD81B[\uDE97-\uDE9A\uDF4F\uDF8F-\uDF92\uDFE2\uDFE4]|\uD82F[\uDC9D-\uDC9F]|\uD834[\uDD67-\uDD69\uDD7B-\uDD82\uDD85-\uDD8B\uDDAA-\uDDAD\uDE42-\uDE44]|\uD836[\uDE00-\uDE36\uDE3B-\uDE6C\uDE75\uDE84\uDE87-\uDE8B\uDE9B-\uDE9F\uDEA1-\uDEAF]|\uD838[\uDC00-\uDC06\uDC08-\uDC18\uDC1B-\uDC21\uDC23\uDC24\uDC26-\uDC2A\uDD30-\uDD36\uDEEC-\uDEEF]|\uD83A[\uDCD0-\uDCD6\uDD44-\uDD4A\uDD5E\uDD5F]|\uDB40[\uDD00-\uDDEF])*(?:[0-9A-Za-z\xAA\xB2\xB3\xB5\xB9\xBA\xBC-\xBE\xC0-\xD6\xD8-\xF6\xF8-\u02C1\u02C6-\u02D1\u02E0-\u02E4\u02EC\u02EE\u0370-\u0374\u0376\u0377\u037A-\u037D\u037F\u0386\u0388-\u038A\u038C\u038E-\u03A1\u03A3-\u03F5\u03F7-\u0481\u048A-\u052F\u0531-\u0556\u0559\u0560-\u0588\u05D0-\u05EA\u05EF-\u05F2\u0620-\u064A\u0660-\u0669\u066E\u066F\u0671-\u06D3\u06D5\u06E5\u06E6\u06EE-\u06FC\u06FF\u0710\u0712-\u072F\u074D-\u07A5\u07B1\u07C0-\u07EA\u07F4\u07F5\u07FA\u0800-\u0815\u081A\u0824\u0828\u0840-\u0858\u0860-\u086A\u08A0-\u08B4\u08B6-\u08C7\u0904-\u0939\u093D\u0950\u0958-\u0961\u0966-\u096F\u0971-\u0980\u0985-\u098C\u098F\u0990\u0993-\u09A8\u09AA-\u09B0\u09B2\u09B6-\u09B9\u09BD\u09CE\u09DC\u09DD\u09DF-\u09E1\u09E6-\u09F1\u09F4-\u09F9\u09FC\u0A05-\u0A0A\u0A0F\u0A10\u0A13-\u0A28\u0A2A-\u0A30\u0A32\u0A33\u0A35\u0A36\u0A38\u0A39\u0A59-\u0A5C\u0A5E\u0A66-\u0A6F\u0A72-\u0A74\u0A85-\u0A8D\u0A8F-\u0A91\u0A93-\u0AA8\u0AAA-\u0AB0\u0AB2\u0AB3\u0AB5-\u0AB9\u0ABD\u0AD0\u0AE0\u0AE1\u0AE6-\u0AEF\u0AF9\u0B05-\u0B0C\u0B0F\u0B10\u0B13-\u0B28\u0B2A-\u0B30\u0B32\u0B33\u0B35-\u0B39\u0B3D\u0B5C\u0B5D\u0B5F-\u0B61\u0B66-\u0B6F\u0B71-\u0B77\u0B83\u0B85-\u0B8A\u0B8E-\u0B90\u0B92-\u0B95\u0B99\u0B9A\u0B9C\u0B9E\u0B9F\u0BA3\u0BA4\u0BA8-\u0BAA\u0BAE-\u0BB9\u0BD0\u0BE6-\u0BF2\u0C05-\u0C0C\u0C0E-\u0C10\u0C12-\u0C28\u0C2A-\u0C39\u0C3D\u0C58-\u0C5A\u0C60\u0C61\u0C66-\u0C6F\u0C78-\u0C7E\u0C80\u0C85-\u0C8C\u0C8E-\u0C90\u0C92-\u0CA8\u0CAA-\u0CB3\u0CB5-\u0CB9\u0CBD\u0CDE\u0CE0\u0CE1\u0CE6-\u0CEF\u0CF1\u0CF2\u0D04-\u0D0C\u0D0E-\u0D10\u0D12-\u0D3A\u0D3D\u0D4E\u0D54-\u0D56\u0D58-\u0D61\u0D66-\u0D78\u0D7A-\u0D7F\u0D85-\u0D96\u0D9A-\u0DB1\u0DB3-\u0DBB\u0DBD\u0DC0-\u0DC6\u0DE6-\u0DEF\u0E01-\u0E30\u0E32\u0E33\u0E40-\u0E46\u0E50-\u0E59\u0E81\u0E82\u0E84\u0E86-\u0E8A\u0E8C-\u0EA3\u0EA5\u0EA7-\u0EB0\u0EB2\u0EB3\u0EBD\u0EC0-\u0EC4\u0EC6\u0ED0-\u0ED9\u0EDC-\u0EDF\u0F00\u0F20-\u0F33\u0F40-\u0F47\u0F49-\u0F6C\u0F88-\u0F8C\u1000-\u102A\u103F-\u1049\u1050-\u1055\u105A-\u105D\u1061\u1065\u1066\u106E-\u1070\u1075-\u1081\u108E\u1090-\u1099\u10A0-\u10C5\u10C7\u10CD\u10D0-\u10FA\u10FC-\u1248\u124A-\u124D\u1250-\u1256\u1258\u125A-\u125D\u1260-\u1288\u128A-\u128D\u1290-\u12B0\u12B2-\u12B5\u12B8-\u12BE\u12C0\u12C2-\u12C5\u12C8-\u12D6\u12D8-\u1310\u1312-\u1315\u1318-\u135A\u1369-\u137C\u1380-\u138F\u13A0-\u13F5\u13F8-\u13FD\u1401-\u166C\u166F-\u167F\u1681-\u169A\u16A0-\u16EA\u16EE-\u16F8\u1700-\u170C\u170E-\u1711\u1720-\u1731\u1740-\u1751\u1760-\u176C\u176E-\u1770\u1780-\u17B3\u17D7\u17DC\u17E0-\u17E9\u17F0-\u17F9\u1810-\u1819\u1820-\u1878\u1880-\u1884\u1887-\u18A8\u18AA\u18B0-\u18F5\u1900-\u191E\u1946-\u196D\u1970-\u1974\u1980-\u19AB\u19B0-\u19C9\u19D0-\u19DA\u1A00-\u1A16\u1A20-\u1A54\u1A80-\u1A89\u1A90-\u1A99\u1AA7\u1B05-\u1B33\u1B45-\u1B4B\u1B50-\u1B59\u1B83-\u1BA0\u1BAE-\u1BE5\u1C00-\u1C23\u1C40-\u1C49\u1C4D-\u1C7D\u1C80-\u1C88\u1C90-\u1CBA\u1CBD-\u1CBF\u1CE9-\u1CEC\u1CEE-\u1CF3\u1CF5\u1CF6\u1CFA\u1D00-\u1DBF\u1E00-\u1F15\u1F18-\u1F1D\u1F20-\u1F45\u1F48-\u1F4D\u1F50-\u1F57\u1F59\u1F5B\u1F5D\u1F5F-\u1F7D\u1F80-\u1FB4\u1FB6-\u1FBC\u1FBE\u1FC2-\u1FC4\u1FC6-\u1FCC\u1FD0-\u1FD3\u1FD6-\u1FDB\u1FE0-\u1FEC\u1FF2-\u1FF4\u1FF6-\u1FFC\u2070\u2071\u2074-\u2079\u207F-\u2089\u2090-\u209C\u2102\u2107\u210A-\u2113\u2115\u2119-\u211D\u2124\u2126\u2128\u212A-\u212D\u212F-\u2139\u213C-\u213F\u2145-\u2149\u214E\u2150-\u2189\u2460-\u249B\u24EA-\u24FF\u2776-\u2793\u2C00-\u2C2E\u2C30-\u2C5E\u2C60-\u2CE4\u2CEB-\u2CEE\u2CF2\u2CF3\u2CFD\u2D00-\u2D25\u2D27\u2D2D\u2D30-\u2D67\u2D6F\u2D80-\u2D96\u2DA0-\u2DA6\u2DA8-\u2DAE\u2DB0-\u2DB6\u2DB8-\u2DBE\u2DC0-\u2DC6\u2DC8-\u2DCE\u2DD0-\u2DD6\u2DD8-\u2DDE\u2E2F\u3005-\u3007\u3021-\u3029\u3031-\u3035\u3038-\u303C\u3041-\u3096\u309D-\u309F\u30A1-\u30FA\u30FC-\u30FF\u3105-\u312F\u3131-\u318E\u3192-\u3195\u31A0-\u31BF\u31F0-\u31FF\u3220-\u3229\u3248-\u324F\u3251-\u325F\u3280-\u3289\u32B1-\u32BF\u3400-\u4DBF\u4E00-\u9FFC\uA000-\uA48C\uA4D0-\uA4FD\uA500-\uA60C\uA610-\uA62B\uA640-\uA66E\uA67F-\uA69D\uA6A0-\uA6EF\uA717-\uA71F\uA722-\uA788\uA78B-\uA7BF\uA7C2-\uA7CA\uA7F5-\uA801\uA803-\uA805\uA807-\uA80A\uA80C-\uA822\uA830-\uA835\uA840-\uA873\uA882-\uA8B3\uA8D0-\uA8D9\uA8F2-\uA8F7\uA8FB\uA8FD\uA8FE\uA900-\uA925\uA930-\uA946\uA960-\uA97C\uA984-\uA9B2\uA9CF-\uA9D9\uA9E0-\uA9E4\uA9E6-\uA9FE\uAA00-\uAA28\uAA40-\uAA42\uAA44-\uAA4B\uAA50-\uAA59\uAA60-\uAA76\uAA7A\uAA7E-\uAAAF\uAAB1\uAAB5\uAAB6\uAAB9-\uAABD\uAAC0\uAAC2\uAADB-\uAADD\uAAE0-\uAAEA\uAAF2-\uAAF4\uAB01-\uAB06\uAB09-\uAB0E\uAB11-\uAB16\uAB20-\uAB26\uAB28-\uAB2E\uAB30-\uAB5A\uAB5C-\uAB69\uAB70-\uABE2\uABF0-\uABF9\uAC00-\uD7A3\uD7B0-\uD7C6\uD7CB-\uD7FB\uF900-\uFA6D\uFA70-\uFAD9\uFB00-\uFB06\uFB13-\uFB17\uFB1D\uFB1F-\uFB28\uFB2A-\uFB36\uFB38-\uFB3C\uFB3E\uFB40\uFB41\uFB43\uFB44\uFB46-\uFBB1\uFBD3-\uFD3D\uFD50-\uFD8F\uFD92-\uFDC7\uFDF0-\uFDFB\uFE70-\uFE74\uFE76-\uFEFC\uFF10-\uFF19\uFF21-\uFF3A\uFF41-\uFF5A\uFF66-\uFFBE\uFFC2-\uFFC7\uFFCA-\uFFCF\uFFD2-\uFFD7\uFFDA-\uFFDC]|\uD800[\uDC00-\uDC0B\uDC0D-\uDC26\uDC28-\uDC3A\uDC3C\uDC3D\uDC3F-\uDC4D\uDC50-\uDC5D\uDC80-\uDCFA\uDD07-\uDD33\uDD40-\uDD78\uDD8A\uDD8B\uDE80-\uDE9C\uDEA0-\uDED0\uDEE1-\uDEFB\uDF00-\uDF23\uDF2D-\uDF4A\uDF50-\uDF75\uDF80-\uDF9D\uDFA0-\uDFC3\uDFC8-\uDFCF\uDFD1-\uDFD5]|\uD801[\uDC00-\uDC9D\uDCA0-\uDCA9\uDCB0-\uDCD3\uDCD8-\uDCFB\uDD00-\uDD27\uDD30-\uDD63\uDE00-\uDF36\uDF40-\uDF55\uDF60-\uDF67]|\uD802[\uDC00-\uDC05\uDC08\uDC0A-\uDC35\uDC37\uDC38\uDC3C\uDC3F-\uDC55\uDC58-\uDC76\uDC79-\uDC9E\uDCA7-\uDCAF\uDCE0-\uDCF2\uDCF4\uDCF5\uDCFB-\uDD1B\uDD20-\uDD39\uDD80-\uDDB7\uDDBC-\uDDCF\uDDD2-\uDE00\uDE10-\uDE13\uDE15-\uDE17\uDE19-\uDE35\uDE40-\uDE48\uDE60-\uDE7E\uDE80-\uDE9F\uDEC0-\uDEC7\uDEC9-\uDEE4\uDEEB-\uDEEF\uDF00-\uDF35\uDF40-\uDF55\uDF58-\uDF72\uDF78-\uDF91\uDFA9-\uDFAF]|\uD803[\uDC00-\uDC48\uDC80-\uDCB2\uDCC0-\uDCF2\uDCFA-\uDD23\uDD30-\uDD39\uDE60-\uDE7E\uDE80-\uDEA9\uDEB0\uDEB1\uDF00-\uDF27\uDF30-\uDF45\uDF51-\uDF54\uDFB0-\uDFCB\uDFE0-\uDFF6]|\uD804[\uDC03-\uDC37\uDC52-\uDC6F\uDC83-\uDCAF\uDCD0-\uDCE8\uDCF0-\uDCF9\uDD03-\uDD26\uDD36-\uDD3F\uDD44\uDD47\uDD50-\uDD72\uDD76\uDD83-\uDDB2\uDDC1-\uDDC4\uDDD0-\uDDDA\uDDDC\uDDE1-\uDDF4\uDE00-\uDE11\uDE13-\uDE2B\uDE80-\uDE86\uDE88\uDE8A-\uDE8D\uDE8F-\uDE9D\uDE9F-\uDEA8\uDEB0-\uDEDE\uDEF0-\uDEF9\uDF05-\uDF0C\uDF0F\uDF10\uDF13-\uDF28\uDF2A-\uDF30\uDF32\uDF33\uDF35-\uDF39\uDF3D\uDF50\uDF5D-\uDF61]|\uD805[\uDC00-\uDC34\uDC47-\uDC4A\uDC50-\uDC59\uDC5F-\uDC61\uDC80-\uDCAF\uDCC4\uDCC5\uDCC7\uDCD0-\uDCD9\uDD80-\uDDAE\uDDD8-\uDDDB\uDE00-\uDE2F\uDE44\uDE50-\uDE59\uDE80-\uDEAA\uDEB8\uDEC0-\uDEC9\uDF00-\uDF1A\uDF30-\uDF3B]|\uD806[\uDC00-\uDC2B\uDCA0-\uDCF2\uDCFF-\uDD06\uDD09\uDD0C-\uDD13\uDD15\uDD16\uDD18-\uDD2F\uDD3F\uDD41\uDD50-\uDD59\uDDA0-\uDDA7\uDDAA-\uDDD0\uDDE1\uDDE3\uDE00\uDE0B-\uDE32\uDE3A\uDE50\uDE5C-\uDE89\uDE9D\uDEC0-\uDEF8]|\uD807[\uDC00-\uDC08\uDC0A-\uDC2E\uDC40\uDC50-\uDC6C\uDC72-\uDC8F\uDD00-\uDD06\uDD08\uDD09\uDD0B-\uDD30\uDD46\uDD50-\uDD59\uDD60-\uDD65\uDD67\uDD68\uDD6A-\uDD89\uDD98\uDDA0-\uDDA9\uDEE0-\uDEF2\uDFB0\uDFC0-\uDFD4]|\uD808[\uDC00-\uDF99]|\uD809[\uDC00-\uDC6E\uDC80-\uDD43]|[\uD80C\uD81C-\uD820\uD822\uD840-\uD868\uD86A-\uD86C\uD86F-\uD872\uD874-\uD879\uD880-\uD883][\uDC00-\uDFFF]|\uD80D[\uDC00-\uDC2E]|\uD811[\uDC00-\uDE46]|\uD81A[\uDC00-\uDE38\uDE40-\uDE5E\uDE60-\uDE69\uDED0-\uDEED\uDF00-\uDF2F\uDF40-\uDF43\uDF50-\uDF59\uDF5B-\uDF61\uDF63-\uDF77\uDF7D-\uDF8F]|\uD81B[\uDE40-\uDE96\uDF00-\uDF4A\uDF50\uDF93-\uDF9F\uDFE0\uDFE1\uDFE3]|\uD821[\uDC00-\uDFF7]|\uD823[\uDC00-\uDCD5\uDD00-\uDD08]|\uD82C[\uDC00-\uDD1E\uDD50-\uDD52\uDD64-\uDD67\uDD70-\uDEFB]|\uD82F[\uDC00-\uDC6A\uDC70-\uDC7C\uDC80-\uDC88\uDC90-\uDC99]|\uD834[\uDEE0-\uDEF3\uDF60-\uDF78]|\uD835[\uDC00-\uDC54\uDC56-\uDC9C\uDC9E\uDC9F\uDCA2\uDCA5\uDCA6\uDCA9-\uDCAC\uDCAE-\uDCB9\uDCBB\uDCBD-\uDCC3\uDCC5-\uDD05\uDD07-\uDD0A\uDD0D-\uDD14\uDD16-\uDD1C\uDD1E-\uDD39\uDD3B-\uDD3E\uDD40-\uDD44\uDD46\uDD4A-\uDD50\uDD52-\uDEA5\uDEA8-\uDEC0\uDEC2-\uDEDA\uDEDC-\uDEFA\uDEFC-\uDF14\uDF16-\uDF34\uDF36-\uDF4E\uDF50-\uDF6E\uDF70-\uDF88\uDF8A-\uDFA8\uDFAA-\uDFC2\uDFC4-\uDFCB\uDFCE-\uDFFF]|\uD838[\uDD00-\uDD2C\uDD37-\uDD3D\uDD40-\uDD49\uDD4E\uDEC0-\uDEEB\uDEF0-\uDEF9]|\uD83A[\uDC00-\uDCC4\uDCC7-\uDCCF\uDD00-\uDD43\uDD4B\uDD50-\uDD59]|\uD83B[\uDC71-\uDCAB\uDCAD-\uDCAF\uDCB1-\uDCB4\uDD01-\uDD2D\uDD2F-\uDD3D\uDE00-\uDE03\uDE05-\uDE1F\uDE21\uDE22\uDE24\uDE27\uDE29-\uDE32\uDE34-\uDE37\uDE39\uDE3B\uDE42\uDE47\uDE49\uDE4B\uDE4D-\uDE4F\uDE51\uDE52\uDE54\uDE57\uDE59\uDE5B\uDE5D\uDE5F\uDE61\uDE62\uDE64\uDE67-\uDE6A\uDE6C-\uDE72\uDE74-\uDE77\uDE79-\uDE7C\uDE7E\uDE80-\uDE89\uDE8B-\uDE9B\uDEA1-\uDEA3\uDEA5-\uDEA9\uDEAB-\uDEBB]|\uD83C[\uDD00-\uDD0C]|\uD83E[\uDFF0-\uDFF9]|\uD869[\uDC00-\uDEDD\uDF00-\uDFFF]|\uD86D[\uDC00-\uDF34\uDF40-\uDFFF]|\uD86E[\uDC00-\uDC1D\uDC20-\uDFFF]|\uD873[\uDC00-\uDEA1\uDEB0-\uDFFF]|\uD87A[\uDC00-\uDFE0]|\uD87E[\uDC00-\uDE1D]|\uD884[\uDC00-\uDF4A])(?:[\u0300-\u036F\u0483-\u0487\u0591-\u05BD\u05BF\u05C1\u05C2\u05C4\u05C5\u05C7\u0610-\u061A\u064B-\u065F\u0670\u06D6-\u06DC\u06DF-\u06E4\u06E7\u06E8\u06EA-\u06ED\u0711\u0730-\u074A\u07A6-\u07B0\u07EB-\u07F3\u07FD\u0816-\u0819\u081B-\u0823\u0825-\u0827\u0829-\u082D\u0859-\u085B\u08D3-\u08E1\u08E3-\u0902\u093A\u093C\u0941-\u0948\u094D\u0951-\u0957\u0962\u0963\u0981\u09BC\u09C1-\u09C4\u09CD\u09E2\u09E3\u09FE\u0A01\u0A02\u0A3C\u0A41\u0A42\u0A47\u0A48\u0A4B-\u0A4D\u0A51\u0A70\u0A71\u0A75\u0A81\u0A82\u0ABC\u0AC1-\u0AC5\u0AC7\u0AC8\u0ACD\u0AE2\u0AE3\u0AFA-\u0AFF\u0B01\u0B3C\u0B3F\u0B41-\u0B44\u0B4D\u0B55\u0B56\u0B62\u0B63\u0B82\u0BC0\u0BCD\u0C00\u0C04\u0C3E-\u0C40\u0C46-\u0C48\u0C4A-\u0C4D\u0C55\u0C56\u0C62\u0C63\u0C81\u0CBC\u0CBF\u0CC6\u0CCC\u0CCD\u0CE2\u0CE3\u0D00\u0D01\u0D3B\u0D3C\u0D41-\u0D44\u0D4D\u0D62\u0D63\u0D81\u0DCA\u0DD2-\u0DD4\u0DD6\u0E31\u0E34-\u0E3A\u0E47-\u0E4E\u0EB1\u0EB4-\u0EBC\u0EC8-\u0ECD\u0F18\u0F19\u0F35\u0F37\u0F39\u0F71-\u0F7E\u0F80-\u0F84\u0F86\u0F87\u0F8D-\u0F97\u0F99-\u0FBC\u0FC6\u102D-\u1030\u1032-\u1037\u1039\u103A\u103D\u103E\u1058\u1059\u105E-\u1060\u1071-\u1074\u1082\u1085\u1086\u108D\u109D\u135D-\u135F\u1712-\u1714\u1732-\u1734\u1752\u1753\u1772\u1773\u17B4\u17B5\u17B7-\u17BD\u17C6\u17C9-\u17D3\u17DD\u180B-\u180D\u1885\u1886\u18A9\u1920-\u1922\u1927\u1928\u1932\u1939-\u193B\u1A17\u1A18\u1A1B\u1A56\u1A58-\u1A5E\u1A60\u1A62\u1A65-\u1A6C\u1A73-\u1A7C\u1A7F\u1AB0-\u1ABD\u1ABF\u1AC0\u1B00-\u1B03\u1B34\u1B36-\u1B3A\u1B3C\u1B42\u1B6B-\u1B73\u1B80\u1B81\u1BA2-\u1BA5\u1BA8\u1BA9\u1BAB-\u1BAD\u1BE6\u1BE8\u1BE9\u1BED\u1BEF-\u1BF1\u1C2C-\u1C33\u1C36\u1C37\u1CD0-\u1CD2\u1CD4-\u1CE0\u1CE2-\u1CE8\u1CED\u1CF4\u1CF8\u1CF9\u1DC0-\u1DF9\u1DFB-\u1DFF\u20D0-\u20DC\u20E1\u20E5-\u20F0\u2CEF-\u2CF1\u2D7F\u2DE0-\u2DFF\u302A-\u302D\u3099\u309A\uA66F\uA674-\uA67D\uA69E\uA69F\uA6F0\uA6F1\uA802\uA806\uA80B\uA825\uA826\uA82C\uA8C4\uA8C5\uA8E0-\uA8F1\uA8FF\uA926-\uA92D\uA947-\uA951\uA980-\uA982\uA9B3\uA9B6-\uA9B9\uA9BC\uA9BD\uA9E5\uAA29-\uAA2E\uAA31\uAA32\uAA35\uAA36\uAA43\uAA4C\uAA7C\uAAB0\uAAB2-\uAAB4\uAAB7\uAAB8\uAABE\uAABF\uAAC1\uAAEC\uAAED\uAAF6\uABE5\uABE8\uABED\uFB1E\uFE00-\uFE0F\uFE20-\uFE2F]|\uD800[\uDDFD\uDEE0\uDF76-\uDF7A]|\uD802[\uDE01-\uDE03\uDE05\uDE06\uDE0C-\uDE0F\uDE38-\uDE3A\uDE3F\uDEE5\uDEE6]|\uD803[\uDD24-\uDD27\uDEAB\uDEAC\uDF46-\uDF50]|\uD804[\uDC01\uDC38-\uDC46\uDC7F-\uDC81\uDCB3-\uDCB6\uDCB9\uDCBA\uDD00-\uDD02\uDD27-\uDD2B\uDD2D-\uDD34\uDD73\uDD80\uDD81\uDDB6-\uDDBE\uDDC9-\uDDCC\uDDCF\uDE2F-\uDE31\uDE34\uDE36\uDE37\uDE3E\uDEDF\uDEE3-\uDEEA\uDF00\uDF01\uDF3B\uDF3C\uDF40\uDF66-\uDF6C\uDF70-\uDF74]|\uD805[\uDC38-\uDC3F\uDC42-\uDC44\uDC46\uDC5E\uDCB3-\uDCB8\uDCBA\uDCBF\uDCC0\uDCC2\uDCC3\uDDB2-\uDDB5\uDDBC\uDDBD\uDDBF\uDDC0\uDDDC\uDDDD\uDE33-\uDE3A\uDE3D\uDE3F\uDE40\uDEAB\uDEAD\uDEB0-\uDEB5\uDEB7\uDF1D-\uDF1F\uDF22-\uDF25\uDF27-\uDF2B]|\uD806[\uDC2F-\uDC37\uDC39\uDC3A\uDD3B\uDD3C\uDD3E\uDD43\uDDD4-\uDDD7\uDDDA\uDDDB\uDDE0\uDE01-\uDE0A\uDE33-\uDE38\uDE3B-\uDE3E\uDE47\uDE51-\uDE56\uDE59-\uDE5B\uDE8A-\uDE96\uDE98\uDE99]|\uD807[\uDC30-\uDC36\uDC38-\uDC3D\uDC3F\uDC92-\uDCA7\uDCAA-\uDCB0\uDCB2\uDCB3\uDCB5\uDCB6\uDD31-\uDD36\uDD3A\uDD3C\uDD3D\uDD3F-\uDD45\uDD47\uDD90\uDD91\uDD95\uDD97\uDEF3\uDEF4]|\uD81A[\uDEF0-\uDEF4\uDF30-\uDF36]|\uD81B[\uDF4F\uDF8F-\uDF92\uDFE4]|\uD82F[\uDC9D\uDC9E]|\uD834[\uDD67-\uDD69\uDD7B-\uDD82\uDD85-\uDD8B\uDDAA-\uDDAD\uDE42-\uDE44]|\uD836[\uDE00-\uDE36\uDE3B-\uDE6C\uDE75\uDE84\uDE9B-\uDE9F\uDEA1-\uDEAF]|\uD838[\uDC00-\uDC06\uDC08-\uDC18\uDC1B-\uDC21\uDC23\uDC24\uDC26-\uDC2A\uDD30-\uDD36\uDEEC-\uDEEF]|\uD83A[\uDCD0-\uDCD6\uDD44-\uDD4A]|\uDB40[\uDD00-\uDDEF])*(?:[ \xA0\u1680\u2000-\u200A\u202F\u205F\u3000]*(?:[!-#%-\*,-\/:;\?@\[-\]_\{\}\xA1\xA7\xAB\xB6\xB7\xBB\xBF\u037E\u0387\u055A-\u055F\u0589\u058A\u05BE\u05C0\u05C3\u05C6\u05F3\u05F4\u0609\u060A\u060C\u060D\u061B\u061E\u061F\u066A-\u066D\u06D4\u0700-\u070D\u07F7-\u07F9\u0830-\u083E\u085E\u0964\u0965\u0970\u09FD\u0A76\u0AF0\u0C77\u0C84\u0DF4\u0E4F\u0E5A\u0E5B\u0F04-\u0F12\u0F14\u0F3A-\u0F3D\u0F85\u0FD0-\u0FD4\u0FD9\u0FDA\u104A-\u104F\u10FB\u1360-\u1368\u1400\u166E\u169B\u169C\u16EB-\u16ED\u1735\u1736\u17D4-\u17D6\u17D8-\u17DA\u1800-\u180A\u1944\u1945\u1A1E\u1A1F\u1AA0-\u1AA6\u1AA8-\u1AAD\u1B5A-\u1B60\u1BFC-\u1BFF\u1C3B-\u1C3F\u1C7E\u1C7F\u1CC0-\u1CC7\u1CD3\u2010-\u2027\u2030-\u2043\u2045-\u2051\u2053-\u205E\u207D\u207E\u208D\u208E\u2308-\u230B\u2329\u232A\u2768-\u2775\u27C5\u27C6\u27E6-\u27EF\u2983-\u2998\u29D8-\u29DB\u29FC\u29FD\u2CF9-\u2CFC\u2CFE\u2CFF\u2D70\u2E00-\u2E2E\u2E30-\u2E4F\u2E52\u3001-\u3003\u3008-\u3011\u3014-\u301F\u3030\u303D\u30A0\u30FB\uA4FE\uA4FF\uA60D-\uA60F\uA673\uA67E\uA6F2-\uA6F7\uA874-\uA877\uA8CE\uA8CF\uA8F8-\uA8FA\uA8FC\uA92E\uA92F\uA95F\uA9C1-\uA9CD\uA9DE\uA9DF\uAA5C-\uAA5F\uAADE\uAADF\uAAF0\uAAF1\uABEB\uFD3E\uFD3F\uFE10-\uFE19\uFE30-\uFE52\uFE54-\uFE61\uFE63\uFE68\uFE6A\uFE6B\uFF01-\uFF03\uFF05-\uFF0A\uFF0C-\uFF0F\uFF1A\uFF1B\uFF1F\uFF20\uFF3B-\uFF3D\uFF3F\uFF5B\uFF5D\uFF5F-\uFF65]|\uD800[\uDD00-\uDD02\uDF9F\uDFD0]|\uD801\uDD6F|\uD802[\uDC57\uDD1F\uDD3F\uDE50-\uDE58\uDE7F\uDEF0-\uDEF6\uDF39-\uDF3F\uDF99-\uDF9C]|\uD803[\uDEAD\uDF55-\uDF59]|\uD804[\uDC47-\uDC4D\uDCBB\uDCBC\uDCBE-\uDCC1\uDD40-\uDD43\uDD74\uDD75\uDDC5-\uDDC8\uDDCD\uDDDB\uDDDD-\uDDDF\uDE38-\uDE3D\uDEA9]|\uD805[\uDC4B-\uDC4F\uDC5A\uDC5B\uDC5D\uDCC6\uDDC1-\uDDD7\uDE41-\uDE43\uDE60-\uDE6C\uDF3C-\uDF3E]|\uD806[\uDC3B\uDD44-\uDD46\uDDE2\uDE3F-\uDE46\uDE9A-\uDE9C\uDE9E-\uDEA2]|\uD807[\uDC41-\uDC45\uDC70\uDC71\uDEF7\uDEF8\uDFFF]|\uD809[\uDC70-\uDC74]|\uD81A[\uDE6E\uDE6F\uDEF5\uDF37-\uDF3B\uDF44]|\uD81B[\uDE97-\uDE9A\uDFE2]|\uD82F\uDC9F|\uD836[\uDE87-\uDE8B]|\uD83A[\uDD5E\uDD5F])(?:[\u0300-\u036F\u0483-\u0487\u0591-\u05BD\u05BF\u05C1\u05C2\u05C4\u05C5\u05C7\u0610-\u061A\u064B-\u065F\u0670\u06D6-\u06DC\u06DF-\u06E4\u06E7\u06E8\u06EA-\u06ED\u0711\u0730-\u074A\u07A6-\u07B0\u07EB-\u07F3\u07FD\u0816-\u0819\u081B-\u0823\u0825-\u0827\u0829-\u082D\u0859-\u085B\u08D3-\u08E1\u08E3-\u0902\u093A\u093C\u0941-\u0948\u094D\u0951-\u0957\u0962\u0963\u0981\u09BC\u09C1-\u09C4\u09CD\u09E2\u09E3\u09FE\u0A01\u0A02\u0A3C\u0A41\u0A42\u0A47\u0A48\u0A4B-\u0A4D\u0A51\u0A70\u0A71\u0A75\u0A81\u0A82\u0ABC\u0AC1-\u0AC5\u0AC7\u0AC8\u0ACD\u0AE2\u0AE3\u0AFA-\u0AFF\u0B01\u0B3C\u0B3F\u0B41-\u0B44\u0B4D\u0B55\u0B56\u0B62\u0B63\u0B82\u0BC0\u0BCD\u0C00\u0C04\u0C3E-\u0C40\u0C46-\u0C48\u0C4A-\u0C4D\u0C55\u0C56\u0C62\u0C63\u0C81\u0CBC\u0CBF\u0CC6\u0CCC\u0CCD\u0CE2\u0CE3\u0D00\u0D01\u0D3B\u0D3C\u0D41-\u0D44\u0D4D\u0D62\u0D63\u0D81\u0DCA\u0DD2-\u0DD4\u0DD6\u0E31\u0E34-\u0E3A\u0E47-\u0E4E\u0EB1\u0EB4-\u0EBC\u0EC8-\u0ECD\u0F18\u0F19\u0F35\u0F37\u0F39\u0F71-\u0F7E\u0F80-\u0F84\u0F86\u0F87\u0F8D-\u0F97\u0F99-\u0FBC\u0FC6\u102D-\u1030\u1032-\u1037\u1039\u103A\u103D\u103E\u1058\u1059\u105E-\u1060\u1071-\u1074\u1082\u1085\u1086\u108D\u109D\u135D-\u135F\u1712-\u1714\u1732-\u1734\u1752\u1753\u1772\u1773\u17B4\u17B5\u17B7-\u17BD\u17C6\u17C9-\u17D3\u17DD\u180B-\u180D\u1885\u1886\u18A9\u1920-\u1922\u1927\u1928\u1932\u1939-\u193B\u1A17\u1A18\u1A1B\u1A56\u1A58-\u1A5E\u1A60\u1A62\u1A65-\u1A6C\u1A73-\u1A7C\u1A7F\u1AB0-\u1ABD\u1ABF\u1AC0\u1B00-\u1B03\u1B34\u1B36-\u1B3A\u1B3C\u1B42\u1B6B-\u1B73\u1B80\u1B81\u1BA2-\u1BA5\u1BA8\u1BA9\u1BAB-\u1BAD\u1BE6\u1BE8\u1BE9\u1BED\u1BEF-\u1BF1\u1C2C-\u1C33\u1C36\u1C37\u1CD0-\u1CD2\u1CD4-\u1CE0\u1CE2-\u1CE8\u1CED\u1CF4\u1CF8\u1CF9\u1DC0-\u1DF9\u1DFB-\u1DFF\u20D0-\u20DC\u20E1\u20E5-\u20F0\u2CEF-\u2CF1\u2D7F\u2DE0-\u2DFF\u302A-\u302D\u3099\u309A\uA66F\uA674-\uA67D\uA69E\uA69F\uA6F0\uA6F1\uA802\uA806\uA80B\uA825\uA826\uA82C\uA8C4\uA8C5\uA8E0-\uA8F1\uA8FF\uA926-\uA92D\uA947-\uA951\uA980-\uA982\uA9B3\uA9B6-\uA9B9\uA9BC\uA9BD\uA9E5\uAA29-\uAA2E\uAA31\uAA32\uAA35\uAA36\uAA43\uAA4C\uAA7C\uAAB0\uAAB2-\uAAB4\uAAB7\uAAB8\uAABE\uAABF\uAAC1\uAAEC\uAAED\uAAF6\uABE5\uABE8\uABED\uFB1E\uFE00-\uFE0F\uFE20-\uFE2F]|\uD800[\uDDFD\uDEE0\uDF76-\uDF7A]|\uD802[\uDE01-\uDE03\uDE05\uDE06\uDE0C-\uDE0F\uDE38-\uDE3A\uDE3F\uDEE5\uDEE6]|\uD803[\uDD24-\uDD27\uDEAB\uDEAC\uDF46-\uDF50]|\uD804[\uDC01\uDC38-\uDC46\uDC7F-\uDC81\uDCB3-\uDCB6\uDCB9\uDCBA\uDD00-\uDD02\uDD27-\uDD2B\uDD2D-\uDD34\uDD73\uDD80\uDD81\uDDB6-\uDDBE\uDDC9-\uDDCC\uDDCF\uDE2F-\uDE31\uDE34\uDE36\uDE37\uDE3E\uDEDF\uDEE3-\uDEEA\uDF00\uDF01\uDF3B\uDF3C\uDF40\uDF66-\uDF6C\uDF70-\uDF74]|\uD805[\uDC38-\uDC3F\uDC42-\uDC44\uDC46\uDC5E\uDCB3-\uDCB8\uDCBA\uDCBF\uDCC0\uDCC2\uDCC3\uDDB2-\uDDB5\uDDBC\uDDBD\uDDBF\uDDC0\uDDDC\uDDDD\uDE33-\uDE3A\uDE3D\uDE3F\uDE40\uDEAB\uDEAD\uDEB0-\uDEB5\uDEB7\uDF1D-\uDF1F\uDF22-\uDF25\uDF27-\uDF2B]|\uD806[\uDC2F-\uDC37\uDC39\uDC3A\uDD3B\uDD3C\uDD3E\uDD43\uDDD4-\uDDD7\uDDDA\uDDDB\uDDE0\uDE01-\uDE0A\uDE33-\uDE38\uDE3B-\uDE3E\uDE47\uDE51-\uDE56\uDE59-\uDE5B\uDE8A-\uDE96\uDE98\uDE99]|\uD807[\uDC30-\uDC36\uDC38-\uDC3D\uDC3F\uDC92-\uDCA7\uDCAA-\uDCB0\uDCB2\uDCB3\uDCB5\uDCB6\uDD31-\uDD36\uDD3A\uDD3C\uDD3D\uDD3F-\uDD45\uDD47\uDD90\uDD91\uDD95\uDD97\uDEF3\uDEF4]|\uD81A[\uDEF0-\uDEF4\uDF30-\uDF36]|\uD81B[\uDF4F\uDF8F-\uDF92\uDFE4]|\uD82F[\uDC9D\uDC9E]|\uD834[\uDD67-\uDD69\uDD7B-\uDD82\uDD85-\uDD8B\uDDAA-\uDDAD\uDE42-\uDE44]|\uD836[\uDE00-\uDE36\uDE3B-\uDE6C\uDE75\uDE84\uDE9B-\uDE9F\uDEA1-\uDEAF]|\uD838[\uDC00-\uDC06\uDC08-\uDC18\uDC1B-\uDC21\uDC23\uDC24\uDC26-\uDC2A\uDD30-\uDD36\uDEEC-\uDEEF]|\uD83A[\uDCD0-\uDCD6\uDD44-\uDD4A]|\uDB40[\uDD00-\uDDEF])*)*/,U={};function V(t){return JSON.parse(t)}function z(t){var e=t.match(/^([^#]*)/);return e?e[1]:t}var H=window.location.href;function G(t){H=t}var W,X=window.location.href;function j(t){X=t}function K(t,e){if(/^data:/i.test(e))return t||e;if(!e||t.match(/^\w{2,}:/))return t.toLowerCase().match("^javascript:")?"#":(t.match(/^\w{2,}:\/\/[^\/]+$/)&&(t+="/"),t);var n;if(e.match(/^\w{2,}:\/\/[^\/]+$/)&&(e+="/"),t.match(/^\/\//))return(n=e.match(/^(\w{2,}:)\/\//))?n[1]+t:t;if(t.match(/^\//))return(n=e.match(/^(\w{2,}:\/\/[^\/]+)\//))?n[1]+t:t;if(t.match(/^\.(\/|$)/)&&(t=t.substr(2)),e=function(t){var e=t.match(/^([^#?]*)/);return e?e[1]:t}(e),t.match(/^#/))return e+t;var i=e.lastIndexOf("/");if(i<0)return t;if(i<e.length-1&&e.lastIndexOf(".")<i){if(""==t)return e;i=(e+="/").length-1}var r=e.substr(0,i+1)+t,o="";for((n=r.match(/^([^?#]*)([?#].*)$/))&&(r=n[1],o=n[2]);!((i=r.indexOf("/../"))<=0);){var a=r.lastIndexOf("/",i-1);if(a<=0)break;r=r.substr(0,a)+r.substr(i+3)}return r.replace(/\/(\.\/)+/g,"/")+o}function $(t){var e;return(e=/^(https?:)\/\/github\.com\/([^/]+\/[^/]+)\/(blob\/|tree\/|raw\/)?(.*)$/.exec(t))?t=e[1]+"//raw.githubusercontent.com/"+e[2]+"/"+(e[3]?"":"master/")+e[4]:(e=/^(https?:)\/\/www\.aozora\.gr\.jp\/(cards\/[^/]+\/files\/[^/.]+\.html)$/.exec(t))?t=e[1]+"//raw.githubusercontent.com/aozorabunko/aozorabunko/master/"+e[2]:(e=/^(https?:)\/\/gist\.github\.com\/([^/]+\/\w+)(\/|$)(raw(\/|$))?(.*)$/.exec(t))?t=e[1]+"//gist.githubusercontent.com/"+e[2]+"/raw/"+e[6]:(e=/^(https?:)\/\/(?:[^/.]+\.)?jsbin\.com\/(?!(?:blog|help)\b)(\w+)((\/\d+)?).*$/.exec(t))&&(t=e[1]+"//output.jsbin.com/"+e[2]+e[3]+"/"),t}function q(t){return null==t?t:t.toString()}!function(t){t.epub="http://www.idpf.org/2007/ops",t.EV="http://www.w3.org/2001/xml-events",t.MATHML="http://www.w3.org/1998/Math/MathML",t.XML="http://www.w3.org/XML/1998/namespace",t.XHTML="http://www.w3.org/1999/xhtml",t.XLINK="http://www.w3.org/1999/xlink",t.SHADOW="http://www.pyroxy.com/ns/shadow",t.SVG="http://www.w3.org/2000/svg",t.DC="http://purl.org/dc/elements/1.1/",t.NCX="http://www.daisy.org/z3986/2005/ncx/"}(W||(W={}));var Y=function(){function t(){this.queue=[null]}var e=t.prototype;return e.length=function(){return this.queue.length-1},e.add=function(t){for(var e=this.queue.length;e>1;){var n=Math.floor(e/2),i=this.queue[n];if(i.compare(t)>0)return void(this.queue[e]=t);this.queue[e]=i,e=n}this.queue[1]=t},e.peek=function(){return this.queue[1]},e.remove=function(){var t=this.queue[1],e=this.queue.pop(),n=this.queue.length;if(n>1){for(var i=1;;){var r=2*i;if(r>=n)break;if(this.queue[r].compare(e)>0)r+1<n&&this.queue[r+1].compare(this.queue[r])>0&&r++;else{if(!(r+1<n&&this.queue[r+1].compare(e)>0))break;r++}this.queue[i]=this.queue[r],i=r}this.queue[i]=e}return t},t}(),Z=["","-webkit-","-moz-","-ms-","-o-","-epub-"],Q={};function J(t,e){if("writing-mode"===e){var n=document.createElement("span");return"-ms-"===t?(n.style.setProperty(t+e,"tb-rl"),"tb-rl"===n.style["writing-mode"]):(n.style.setProperty(t+e,"vertical-rl"),"vertical-rl"===n.style[t+e])}return"string"==typeof document.documentElement.style[function(t,e){return t&&(e="-"+e,"moz"===(t=t.replace(/-/g,""))&&(t="Moz")),t+e.replace(/-[a-z]/g,(function(t){return t.substr(1).toUpperCase()}))}(t,e)]}function tt(t){var e=Q[t];if(e||null===e)return e;switch(t){case"text-combine-upright":if(J("-webkit-","text-combine")&&!J("","text-combine-upright"))return Q[t]=["-webkit-text-combine"],["-webkit-text-combine"];break;case"writing-mode":if(J("-ms-","writing-mode"))return Q[t]=["-ms-writing-mode"],["-ms-writing-mode"];break;case"filter":if(J("-webkit-","filter"))return Q[t]=["-webkit-filter"],["-webkit-filter"];break;case"clip-path":if(J("-webkit-","clip-path"))return Q[t]=["-webkit-clip-path","clip-path"];break;case"margin-inline-start":if(J("-webkit-","margin-start"))return Q[t]=["-webkit-margin-start"],["-webkit-margin-start"];break;case"margin-inline-end":if(J("-webkit-","margin-end"))return Q[t]=["-webkit-margin-end"],["-webkit-margin-end"];break;case"padding-inline-start":if(J("-webkit-","padding-start"))return Q[t]=["-webkit-padding-start"],["-webkit-padding-start"];break;case"padding-inline-end":if(J("-webkit-","padding-end"))return Q[t]=["-webkit-padding-end"],["-webkit-padding-end"]}for(var n,i=_(Z);!(n=i()).done;){var r=n.value;if(J(r,t))return Q[t]=[e=r+t],[e]}return f.warn("Property not supported by the browser: ",t),Q[t]=null,null}function et(t,e,n){try{var i=tt(e);if(!i)return;i.forEach((function(e){if("-ms-writing-mode"===e)switch(n){case"horizontal-tb":n="lr-tb";break;case"vertical-rl":n="tb-rl";break;case"vertical-lr":n="tb-lr"}else if("-webkit-text-combine"===e)switch(n){case"all":n="horizontal"}t&&t.style&&t.style.setProperty(e,n)}))}catch(t){f.warn(t)}}function nt(t,e,n){try{var i=Q[e];return t.style.getPropertyValue(i?i[0]:e)}catch(t){}return n||""}function it(t){var e=t.getAttributeNS(W.XML,"lang");return e||t.namespaceURI!=W.XHTML||(e=t.getAttribute("lang")),e}var rt=function(){function t(){this.list=[]}var e=t.prototype;return e.append=function(t){return this.list.push(t),this},e.clear=function(){this.list=[]},e.toString=function(){var t=this.list.join("");return this.list=[t],t},t}();function ot(t){return"\\"+t.charCodeAt(0).toString(16)+" "}function at(t){return t.replace(/[^-_a-zA-Z0-9\u0080-\uFFFF]/g,ot)}function st(t){return t.replace(/[\u0000-\u001F"\\]/g,ot)}function ut(t){return t.replace(/[\s+&?=#\u007F-\uFFFF]+/g,encodeURIComponent)}function lt(t){return!!t.match(/^[a-zA-Z\u009E\u009F\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u024F\u037B-\u037D\u0386\u0388-\u0482\u048A-\u0527]$/)}function ct(t,e){return t.replace(/[^-a-zA-Z0-9_]/g,(function(t){return function(t,e){return(e="string"==typeof e?e:"\\u")+(65536|t.charCodeAt(0)).toString(16).substr(1)}(t,e)}))}function ht(t){return ct(t)}function ft(t,e){for(var n=0,i=t;;){if(0==n||e(n-1),i==t||e(i),n==i)return n;var r=n+i>>1;e(r)?i=r:n=r+1}}function dt(t,e){return t-e}function pt(t,e){for(var n,i={},r=_(t);!(n=r()).done;){var o=n.value,a=e(o);a&&!i[a]&&(i[a]=o)}return i}function gt(t,e){for(var n,i={},r=_(t);!(n=r()).done;){var o=n.value,a=e(o);a&&(i[a]?i[a].push(o):i[a]=[o])}return i}var mt=function(){function t(){this.listeners={}}var e=t.prototype;return e.dispatchEvent=function(t){var e=this.listeners[t.type];if(e){t.target=this,t.currentTarget=this;for(var n=0;n<e.length;n++)e[n](t)}},e.addEventListener=function(t,e,n){if(!n){var i=this.listeners[t];i?i.push(e):this.listeners[t]=[e]}},e.removeEventListener=function(t,e,n){if(!n){var i=this.listeners[t];if(i){var r=i.indexOf(e);r>=0&&i.splice(r,1)}}},t}(),vt=null,Et=null,bt=null,Ct=null;function yt(t){if(1==t.nodeType){var e=t.getAttribute("id");if(e)return e}return null}function wt(t){return"^"+t}function Dt(t){return t.replace(/[\[\]\(\),=;^]/g,wt)}function St(t){return t.substr(1)}function Nt(t){return t?t.replace(/\^[\[\]\(\),=;^]/g,St):t}function Tt(t){var e=[];do{var n=t.match(/^(\^,|[^,])*/),i=Nt(n[0]);if(!(t=t.substr(n[0].length+1))&&!e.length)return i;e.push(i)}while(t);return e}function At(t){for(var e={};t;){var n=t.match(/^;([^;=]+)=(([^;]|\^;)*)/);if(!n)return e;e[n[1]]=Tt(n[2]),t=t.substr(n[0].length)}return e}var xt=function(){function t(){}var e=t.prototype;return e.appendTo=function(t){t.append("!")},e.applyTo=function(t){return!1},t}(),It=function(){function t(t,e,n){this.index=t,this.id=e,this.sideBias=n}var e=t.prototype;return e.appendTo=function(t){t.append("/"),t.append(this.index.toString()),(this.id||this.sideBias)&&(t.append("["),this.id&&t.append(this.id),this.sideBias&&(t.append(";s="),t.append(this.sideBias)),t.append("]"))},e.applyTo=function(t){if(1!=t.node.nodeType)throw new Error("E_CFI_NOT_ELEMENT");var e,n=t.node,i=n.children,r=i.length,o=Math.floor(this.index/2)-1;if(o<0||0==r)t.node=(e=n.firstChild)||n;else{if(e=i[Math.min(o,r-1)],1&this.index){var a=e.nextSibling;a&&1!=a.nodeType?e=a:t.after=!0}t.node=e}if(this.id&&(t.after||this.id!=yt(t.node)))throw new Error("E_CFI_ID_MISMATCH");return t.sideBias=this.sideBias,!0},t}(),Ft=function(){function t(t,e,n,i){this.offset=t,this.textBefore=e,this.textAfter=n,this.sideBias=i}var e=t.prototype;return e.applyTo=function(t){if(this.offset>0&&!t.after){for(var e=this.offset,n=t.node;;){var i=n.nodeType;if(1==i)break;var r=n.nextSibling;if(3<=i&&i<=5){var o=n.textContent.length;if(e<=o)break;if(!r){e=o;break}e-=o}if(!r){e=0;break}n=r}t.node=n,t.offset=e}return t.sideBias=this.sideBias,!0},e.appendTo=function(t){t.append(":"),t.append(this.offset.toString()),(this.textBefore||this.textAfter||this.sideBias)&&(t.append("["),(this.textBefore||this.textAfter)&&(this.textBefore&&t.append(Dt(this.textBefore)),t.append(","),this.textAfter&&t.append(Dt(this.textAfter))),this.sideBias&&(t.append(";s="),t.append(this.sideBias)),t.append("]"))},t}(),Pt=function(){function t(){this.steps=null}var e=t.prototype;return e.fromString=function(t){var e=t.match(/^#?epubcfi\((.*)\)$/);if(!e)throw new Error("E_CFI_NOT_CFI");for(var n=decodeURIComponent(e[1]),i=0,r=[];;){var o=void 0;switch(n.charAt(i)){case"/":if(i++,!(e=n.substr(i).match(/^(0|[1-9][0-9]*)(\[(.*?)(;([^\]]|\^\])*)?\])?/)))throw new Error("E_CFI_NUMBER_EXPECTED");i+=e[0].length;var a=parseInt(e[1],10),s=e[3];o=At(e[4]),r.push(new It(a,s,q(o.s)));break;case":":if(i++,!(e=n.substr(i).match(/^(0|[1-9][0-9]*)(\[((([^\];,]|\^[\];,])*)(,(([^\];,]|\^[\];,])*))?)(;([^]]|\^\])*)?\])?/)))throw new Error("E_CFI_NUMBER_EXPECTED");i+=e[0].length;var u=parseInt(e[1],10),l=e[4];l&&(l=Nt(l));var c=e[7];c&&(c=Nt(c)),o=At(e[10]),r.push(new Ft(u,l,c,q(o.s)));break;case"!":i++,r.push(new xt);break;case"~":case"@":case"":return void(this.steps=r);default:throw new Error("E_CFI_PARSE_ERROR")}}},e.navigate=function(e){for(var n={node:e.documentElement,offset:0,after:!1,sideBias:null,ref:null},i=0;i<this.steps.length;i++)if(!this.steps[i].applyTo(n)){n.ref=new t,n.ref.steps=this.steps.slice(i+1);break}return n},e.trim=function(t,e){return t.replace(/\s+/g," ").match(e?/^[ -\uD7FF\uE000-\uFFFF]{0,8}/:/[ -\uD7FF\uE000-\uFFFF]{0,8}$/)[0].replace(/^\s/,"").replace(/\s$/,"")},e.prependPathFromNode=function(t,e,n,i){for(var r=[],o=t.parentNode,a="",s="";t;){switch(t.nodeType){case 3:case 4:case 5:var u=t.textContent,l=u.length;n?(e+=l,a||(a=u)):(e>l&&(e=l),n=!0,a=u.substr(0,e),s=u.substr(e)),t=t.previousSibling;continue;case 8:t=t.previousSibling;continue}break}for((e>0||a||s)&&(a=this.trim(a,!1),s=this.trim(s,!0),r.push(new Ft(e,a,s,i)),i=null);o&&o&&9!=o.nodeType;){for(var c=n?null:yt(t),h=n?1:0;t;)1==t.nodeType&&(h+=2),t=t.previousSibling;r.push(new It(h,c,i)),i=null,t=o,o=o.parentNode,n=!1}r.reverse(),this.steps?(r.push(new xt),this.steps=r.concat(this.steps)):this.steps=r},e.toString=function(){if(!this.steps)return"";var t=new rt;t.append("epubcfi(");for(var e=0;e<this.steps.length;e++)this.steps[e].appendTo(t);return t.append(")"),t.toString().replace(/%/g,"%25")},t}();function Ot(t){return{fontFamily:t.fontFamily,lineHeight:t.lineHeight,margin:t.margin,hyphenate:t.hyphenate,columnWidth:t.columnWidth,horizontal:t.horizontal,nightMode:t.nightMode,spreadView:t.spreadView,pageBorder:t.pageBorder,enabledMediaTypes:Object.assign({},t.enabledMediaTypes),defaultPaperSize:t.defaultPaperSize?Object.assign({},t.defaultPaperSize):void 0}}var Rt={fontFamily:"serif",lineHeight:1.25,margin:8,hyphenate:!1,columnWidth:25,horizontal:!1,nightMode:!1,spreadView:!1,pageBorder:1,enabledMediaTypes:{vivliostyle:!0,print:!0},defaultPaperSize:void 0},kt={};function Lt(t,e,n,i){var r=Math.min((t-0)/n,(e-0)/i);return"matrix("+r+",0,0,"+r+",0,0)"}function Bt(t){return'"'+st(""+t)+'"'}function _t(t){return at(""+t)}function Mt(t,e){return t?at(t)+"."+at(e):at(e)}var Ut=0,Vt=function(){function t(t,e){if(this.parent=t,this.resolver=e,this.children=[],this.values={},this.funcs={},this.builtIns={},this.scopeKey="S"+Ut++,this.zero=new ye(this,0),this.one=new ye(this,1),this._true=new ye(this,!0),this._false=new ye(this,!1),t&&t.children.push(this),!t){var n=this.builtIns;n.floor=Math.floor,n.ceil=Math.ceil,n.round=Math.round,n.sqrt=Math.sqrt,n.min=Math.min,n.max=Math.max,n.letterbox=Lt,n["css-string"]=Bt,n["css-name"]=_t,n.typeof=function(t){return typeof t},this.defineBuiltInName("page-width",(function(){return this.pageWidth()})),this.defineBuiltInName("page-height",(function(){return this.pageHeight()})),this.defineBuiltInName("pref-font-family",(function(){return this.pref.fontFamily})),this.defineBuiltInName("pref-night-mode",(function(){return this.pref.nightMode})),this.defineBuiltInName("pref-hyphenate",(function(){return this.pref.hyphenate})),this.defineBuiltInName("pref-margin",(function(){return this.pref.margin})),this.defineBuiltInName("pref-line-height",(function(){return this.pref.lineHeight})),this.defineBuiltInName("pref-column-width",(function(){return this.pref.columnWidth*this.fontSize})),this.defineBuiltInName("pref-horizontal",(function(){return this.pref.horizontal})),this.defineBuiltInName("pref-spread-view",(function(){return this.pref.spreadView})),this.defineBuiltInName("pub-title",(function(){return Bt(this.pubTitle?this.pubTitle:"")})),this.defineBuiltInName("doc-title",(function(){return Bt(this.docTitle?this.docTitle:"")}))}}var e=t.prototype;return e.defineBuiltInName=function(t,e){this.values[t]=new Ee(this,e,t)},e.defineName=function(t,e){this.values[t]=e},e.defineFunc=function(t,e){this.funcs[t]=e},e.defineBuiltIn=function(t,e){this.builtIns[t]=e},t}();function zt(t){switch(t.toLowerCase()){case"vw":case"vh":case"vi":case"vb":case"vmin":case"vmax":case"pvw":case"pvh":case"pvi":case"pvb":case"pvmin":case"pvmax":return!0;default:return!1}}var Ht={px:1,in:96,pt:4/3,pc:16,cm:96/2.54,mm:96/25.4,q:96/2.54/40,em:16,rem:16,ex:8,dppx:1,dpi:1/96,dpcm:2.54/96};function Gt(t){switch(t){case"q":case"rem":return!0;default:return!1}}var Wt=function(){function t(t,e,n,i){this.rootScope=t,this.viewportWidth=e,this.viewportHeight=n,this.actualPageWidth=null,this.actualPageHeight=null,this.rootFontSize=null,this.scopes={},this.pageAreaWidth=null,this.pageAreaHeight=null,this.pageVertical=null,this.pubTitle=null,this.docTitle=null,this.pageWidth=function(){return this.actualPageWidth?this.actualPageWidth:this.pref.spreadView?Math.floor(e/2)-this.pref.pageBorder:e},this.pageHeight=function(){return this.actualPageHeight?this.actualPageHeight:n},this.initialFontSize=i,this.fontSize=function(){return this.rootFontSize?this.rootFontSize:i},this.pref=Rt}var e=t.prototype;return e.getScopeContext=function(t){var e=this.scopes[t.scopeKey];return e||(this.scopes[t.scopeKey]=e={}),e},e.clearScope=function(t){this.scopes[t.scopeKey]={};for(var e=0;e<t.children.length;e++)this.clearScope(t.children[e])},e.queryUnitSize=function(t,e){if(zt(t)){var n=this.pageWidth()/100,i=this.pageHeight()/100,r=null!=this.pageAreaWidth?this.pageAreaWidth/100:n,o=null!=this.pageAreaHeight?this.pageAreaHeight/100:i;switch(t){case"vw":return r;case"vh":return o;case"vi":return this.pageVertical?o:r;case"vb":return this.pageVertical?r:o;case"vmin":return r<o?r:o;case"vmax":return r>o?r:o;case"pvw":return n;case"pvh":return i;case"pvi":return this.pageVertical?i:n;case"pvb":return this.pageVertical?n:i;case"pvmin":return n<i?n:i;case"pvmax":return n>i?n:i}}return"em"==t||"rem"==t?e?this.initialFontSize:this.fontSize():"ex"==t?Ht.ex*(e?this.initialFontSize:this.fontSize())/Ht.em:Ht[t]},e.evalName=function(t,e){do{var n=t.values[e];if(n)return n;if(t.resolver&&(n=t.resolver.call(this,e,!1)))return n;t=t.parent}while(t);throw new Error("Name '"+e+"' is undefined")},e.evalCall=function(t,e,n,i){do{var r=t.funcs[e];if(r)return r;if(t.resolver&&(r=t.resolver.call(this,e,!0)))return r;var o=t.builtIns[e];if(o){if(i)return t.zero;for(var a=Array(n.length),s=0;s<n.length;s++)a[s]=n[s].evaluate(this);return new ye(t,o.apply(this,a))}t=t.parent}while(t);throw new Error("Function '"+e+"' is undefined")},e.evalMediaName=function(t,e){var n="all"===t||!!this.pref.enabledMediaTypes[t];return e?!n:n},e.evalMediaTest=function(t,e){var n="",i=t.match(/^(min|max)-(.*)$/);i&&(n=i[1],t=i[2]);var r=null,o=null;switch(t){case"width":case"height":case"device-width":case"device-height":case"color":e&&(r=e.evaluate(this))}switch(t){case"width":o=this.pageWidth();break;case"height":o=this.pageHeight();break;case"device-width":o=window.screen.availWidth;break;case"device-height":o=window.screen.availHeight;break;case"color":o=window.screen.pixelDepth}if(null!=o&&null!=r)switch(n){case"min":return o>=r;case"max":return o<=r;default:return o==r}else if(null!=o&&null==e)return 0!==o;return!1},e.queryVal=function(t,e){var n=this.scopes[t.scopeKey];return n?n[e]:void 0},e.storeVal=function(t,e,n){this.getScopeContext(t)[e]=n},t}(),Xt=function(){function t(t){this.scope=t,this.scope=t,this.key="_"+Ut++}var e=t.prototype;return e.toString=function(){var t=new rt;return this.appendTo(t,0),t.toString()},e.appendTo=function(t,e){throw new Error("F_ABSTRACT")},e.evaluateCore=function(t){throw new Error("F_ABSTRACT")},e.expand=function(t,e){return this},e.dependCore=function(t,e,n){return t===this},e.dependOuter=function(t,e,n){var i=n[this.key];if(null!=i)return i!==kt&&i;n[this.key]=kt;var r=this.dependCore(t,e,n);return n[this.key]=r,r},e.depend=function(t,e){return this.dependOuter(t,e,{})},e.evaluate=function(t){var e=t.queryVal(this.scope,this.key);return void 0!==e||(e=this.evaluateCore(t),t.storeVal(this.scope,this.key,e)),e},e.isMediaName=function(){return!1},t}(),jt=function(t){function e(e,n){var i;return(i=t.call(this,e)||this).val=n,i}I(e,t);var n=e.prototype;return n.getOp=function(){throw new Error("F_ABSTRACT")},n.evalPrefix=function(t){throw new Error("F_ABSTRACT")},n.evaluateCore=function(t){var e=this.val.evaluate(t);return this.evalPrefix(e)},n.dependCore=function(t,e,n){return t===this||this.val.dependOuter(t,e,n)},n.appendTo=function(t,e){10<e&&t.append("("),t.append(this.getOp()),this.val.appendTo(t,10),10<e&&t.append(")")},n.expand=function(t,e){var n=this.val.expand(t,e);return n===this.val?this:new this.constructor(this.scope,n)},e}(Xt),Kt=function(t){function e(e,n,i){var r;return(r=t.call(this,e)||this).lhs=n,r.rhs=i,r}I(e,t);var n=e.prototype;return n.getPriority=function(){throw new Error("F_ABSTRACT")},n.getOp=function(){throw new Error("F_ABSTRACT")},n.evalInfix=function(t,e){throw new Error("F_ABSTRACT")},n.evaluateCore=function(t){var e=this.lhs.evaluate(t),n=this.rhs.evaluate(t);return this.evalInfix(e,n)},n.dependCore=function(t,e,n){return t===this||this.lhs.dependOuter(t,e,n)||this.rhs.dependOuter(t,e,n)},n.appendTo=function(t,e){var n=this.getPriority();n<=e&&t.append("("),this.lhs.appendTo(t,n),t.append(this.getOp()),this.rhs.appendTo(t,n),n<=e&&t.append(")")},n.expand=function(t,e){var n=this.lhs.expand(t,e),i=this.rhs.expand(t,e);return n===this.lhs&&i===this.rhs?this:new this.constructor(this.scope,n,i)},e}(Xt),$t=function(t){function e(e,n,i){return t.call(this,e,n,i)||this}return I(e,t),e.prototype.getPriority=function(){return 1},e}(Kt),qt=function(t){function e(e,n,i){return t.call(this,e,n,i)||this}return I(e,t),e.prototype.getPriority=function(){return 2},e}(Kt),Yt=function(t){function e(e,n,i){return t.call(this,e,n,i)||this}return I(e,t),e.prototype.getPriority=function(){return 3},e}(Kt),Zt=function(t){function e(e,n,i){return t.call(this,e,n,i)||this}return I(e,t),e.prototype.getPriority=function(){return 4},e}(Kt),Qt=function(t){function e(e,n){return t.call(this,e,n)||this}I(e,t);var n=e.prototype;return n.getOp=function(){return"!"},n.evalPrefix=function(t){return!t},e}(jt),Jt=function(t){function e(e,n){return t.call(this,e,n)||this}I(e,t);var n=e.prototype;return n.getOp=function(){return"-"},n.evalPrefix=function(t){return-t},e}(jt),te=function(t){function e(e,n,i){return t.call(this,e,n,i)||this}I(e,t);var n=e.prototype;return n.getOp=function(){return"&&"},n.evaluateCore=function(t){return this.lhs.evaluate(t)&&this.rhs.evaluate(t)},e}($t),ee=function(t){function e(e,n,i){return t.call(this,e,n,i)||this}return I(e,t),e.prototype.getOp=function(){return" and "},e}(te),ne=function(t){function e(e,n,i){return t.call(this,e,n,i)||this}I(e,t);var n=e.prototype;return n.getOp=function(){return"||"},n.evaluateCore=function(t){return this.lhs.evaluate(t)||this.rhs.evaluate(t)},e}($t),ie=function(t){function e(e,n,i){return t.call(this,e,n,i)||this}return I(e,t),e.prototype.getOp=function(){return", "},e}(ne),re=function(t){function e(e,n,i){return t.call(this,e,n,i)||this}I(e,t);var n=e.prototype;return n.getOp=function(){return"<"},n.evalInfix=function(t,e){return t<e},e}(qt),oe=function(t){function e(e,n,i){return t.call(this,e,n,i)||this}I(e,t);var n=e.prototype;return n.getOp=function(){return"<="},n.evalInfix=function(t,e){return t<=e},e}(qt),ae=function(t){function e(e,n,i){return t.call(this,e,n,i)||this}I(e,t);var n=e.prototype;return n.getOp=function(){return">"},n.evalInfix=function(t,e){return t>e},e}(qt),se=function(t){function e(e,n,i){return t.call(this,e,n,i)||this}I(e,t);var n=e.prototype;return n.getOp=function(){return">="},n.evalInfix=function(t,e){return t>=e},e}(qt),ue=function(t){function e(e,n,i){return t.call(this,e,n,i)||this}I(e,t);var n=e.prototype;return n.getOp=function(){return"=="},n.evalInfix=function(t,e){return t==e},e}(qt),le=function(t){function e(e,n,i){return t.call(this,e,n,i)||this}I(e,t);var n=e.prototype;return n.getOp=function(){return"!="},n.evalInfix=function(t,e){return t!=e},e}(qt),ce=function(t){function e(e,n,i){return t.call(this,e,n,i)||this}I(e,t);var n=e.prototype;return n.getOp=function(){return"+"},n.evalInfix=function(t,e){return t+e},e}(Yt),he=function(t){function e(e,n,i){return t.call(this,e,n,i)||this}I(e,t);var n=e.prototype;return n.getOp=function(){return" - "},n.evalInfix=function(t,e){return t-e},e}(Yt),fe=function(t){function e(e,n,i){return t.call(this,e,n,i)||this}I(e,t);var n=e.prototype;return n.getOp=function(){return"*"},n.evalInfix=function(t,e){return t*e},e}(Zt),de=function(t){function e(e,n,i){return t.call(this,e,n,i)||this}I(e,t);var n=e.prototype;return n.getOp=function(){return"/"},n.evalInfix=function(t,e){return t/e},e}(Zt),pe=function(t){function e(e,n,i){return t.call(this,e,n,i)||this}I(e,t);var n=e.prototype;return n.getOp=function(){return"%"},n.evalInfix=function(t,e){return t%e},e}(Zt),ge=function(t){function e(e,n,i){var r;return(r=t.call(this,e)||this).num=n,r.unit=i.toLowerCase(),r}I(e,t);var n=e.prototype;return n.appendTo=function(t,e){t.append(this.num.toString()),t.append(at(this.unit))},n.evaluateCore=function(t){return this.num*t.queryUnitSize(this.unit,!1)},e}(Xt),me=function(t){function e(e,n){var i;return(i=t.call(this,e)||this).qualifiedName=n,i}I(e,t);var n=e.prototype;return n.appendTo=function(t,e){t.append(this.qualifiedName)},n.evaluateCore=function(t){return t.evalName(this.scope,this.qualifiedName).evaluate(t)},n.dependCore=function(t,e,n){return t===this||e.evalName(this.scope,this.qualifiedName).dependOuter(t,e,n)},e}(Xt),ve=function(t){function e(e,n,i){var r;return(r=t.call(this,e)||this).not=n,r.name=i,r}I(e,t);var n=e.prototype;return n.appendTo=function(t,e){this.not&&t.append("not "),t.append(at(this.name))},n.evaluateCore=function(t){return t.evalMediaName(this.name,this.not)},n.dependCore=function(t,e,n){return t===this||this.value.dependOuter(t,e,n)},n.isMediaName=function(){return!0},e}(Xt),Ee=function(t){function e(e,n,i){var r;return(r=t.call(this,e)||this).fn=n,r.str=i,r}I(e,t);var n=e.prototype;return n.appendTo=function(t,e){t.append(this.str)},n.evaluateCore=function(t){return this.fn.call(t)},e}(Xt),be=function(t){function e(e,n,i){var r;return(r=t.call(this,e)||this).qualifiedName=n,r.params=i,r}I(e,t);var n=e.prototype;return n.appendTo=function(t,e){t.append(this.qualifiedName),function(t,e){t.append("(");for(var n=0;n<e.length;n++)n&&t.append(","),e[n].appendTo(t,0);t.append(")")}(t,this.params)},n.evaluateCore=function(t){return t.evalCall(this.scope,this.qualifiedName,this.params,!1).expand(t,this.params).evaluate(t)},n.dependCore=function(t,e,n){if(t===this)return!0;for(var i=0;i<this.params.length;i++)if(this.params[i].dependOuter(t,e,n))return!0;return e.evalCall(this.scope,this.qualifiedName,this.params,!0).dependOuter(t,e,n)},n.expand=function(t,n){var i=function(t,e,n){for(var i=e,r=0;r<e.length;r++){var o=e[r].expand(t,n);if(e!==i)i[r]=o;else if(o!==e[r]){i=Array(e.length);for(var a=0;a<r;a++)i[a]=e[a];i[r]=o}}return i}(t,this.params,n);return i===this.params?this:new e(this.scope,this.qualifiedName,i)},e}(Xt),Ce=function(t){function e(e,n,i,r){var o;return(o=t.call(this,e)||this).cond=n,o.ifTrue=i,o.ifFalse=r,o}I(e,t);var n=e.prototype;return n.appendTo=function(t,e){e>0&&t.append("("),this.cond.appendTo(t,0),t.append("?"),this.ifTrue.appendTo(t,0),t.append(":"),this.ifFalse.appendTo(t,0),e>0&&t.append(")")},n.evaluateCore=function(t){return this.cond.evaluate(t)?this.ifTrue.evaluate(t):this.ifFalse.evaluate(t)},n.dependCore=function(t,e,n){return t===this||this.cond.dependOuter(t,e,n)||this.ifTrue.dependOuter(t,e,n)||this.ifFalse.dependOuter(t,e,n)},n.expand=function(t,n){var i=this.cond.expand(t,n),r=this.ifTrue.expand(t,n),o=this.ifFalse.expand(t,n);return i===this.cond&&r===this.ifTrue&&o===this.ifFalse?this:new e(this.scope,i,r,o)},e}(Xt),ye=function(t){function e(e,n){var i;return(i=t.call(this,e)||this).val=n,i}I(e,t);var n=e.prototype;return n.appendTo=function(t,e){switch(typeof this.val){case"number":case"boolean":t.append(this.val.toString());break;case"string":t.append('"'),t.append(st(this.val)),t.append('"');break;default:throw new Error("F_UNEXPECTED_STATE")}},n.evaluateCore=function(t){return this.val},e}(Xt),we=function(t){function e(e,n,i){var r;return(r=t.call(this,e)||this).name=n,r.value=i,r}I(e,t);var n=e.prototype;return n.appendTo=function(t,e){t.append("("),t.append(st(this.name.name)),t.append(":"),this.value.appendTo(t,0),t.append(")")},n.evaluateCore=function(t){return t.evalMediaTest(this.name.name,this.value)},n.dependCore=function(t,e,n){return t===this||this.value.dependOuter(t,e,n)},n.expand=function(t,n){var i=this.value.expand(t,n);return i===this.value?this:new e(this.scope,this.name,i)},e}(Xt),De=function(t){function e(e,n){var i;return(i=t.call(this,e)||this).index=n,i}I(e,t);var n=e.prototype;return n.appendTo=function(t,e){t.append("$"),t.append(this.index.toString())},n.expand=function(t,e){var n=e[this.index];if(!n)throw new Error("Parameter missing: "+this.index);return n},e}(Xt);function Se(t,e,n){return e===t._false||e===t.zero||n==t._false||n==t.zero?t._false:e===t._true||e===t.one?n:n===t._true||n===t.one?e:new te(t,e,n)}function Ne(t,e,n){return e===t.zero?n:n===t.zero?e:new ce(t,e,n)}function Te(t,e,n){return e===t.zero?new Jt(t,n):n===t.zero?e:new he(t,e,n)}function Ae(t,e,n){return e===t.zero||n===t.zero?t.zero:e===t.one?n:n===t.one?e:new fe(t,e,n)}function xe(t,e,n){return e===t.zero?t.zero:n===t.one?e:new de(t,e,n)}var Ie=function(){function t(){}var e=t.prototype;return e.visitValues=function(t){for(var e=0;e<t.length;e++)t[e].visit(this)},e.visitEmpty=function(t){throw new Error("E_CSS_EMPTY_NOT_ALLOWED")},e.visitSlash=function(t){throw new Error("E_CSS_SLASH_NOT_ALLOWED")},e.visitStr=function(t){throw new Error("E_CSS_STR_NOT_ALLOWED")},e.visitIdent=function(t){throw new Error("E_CSS_IDENT_NOT_ALLOWED")},e.visitNumeric=function(t){throw new Error("E_CSS_NUMERIC_NOT_ALLOWED")},e.visitNum=function(t){throw new Error("E_CSS_NUM_NOT_ALLOWED")},e.visitInt=function(t){return this.visitNum(t)},e.visitColor=function(t){throw new Error("E_CSS_COLOR_NOT_ALLOWED")},e.visitURL=function(t){throw new Error("E_CSS_URL_NOT_ALLOWED")},e.visitSpaceList=function(t){throw new Error("E_CSS_LIST_NOT_ALLOWED")},e.visitCommaList=function(t){throw new Error("E_CSS_COMMA_NOT_ALLOWED")},e.visitFunc=function(t){throw new Error("E_CSS_FUNC_NOT_ALLOWED")},e.visitExpr=function(t){throw new Error("E_CSS_EXPR_NOT_ALLOWED")},t}(),Fe=function(t){function e(){return t.call(this)||this}I(e,t);var n=e.prototype;return n.visitValues=function(t){for(var e=null,n=0;n<t.length;n++){var i=t[n],r=i.visit(this);if(e)e[n]=r;else if(i!==r){e=new Array(t.length);for(var o=0;o<n;o++)e[o]=t[o];e[n]=r}}return e||t},n.visitStr=function(t){return t},n.visitIdent=function(t){return t},n.visitSlash=function(t){return t},n.visitNumeric=function(t){return t},n.visitNum=function(t){return t},n.visitInt=function(t){return t},n.visitColor=function(t){return t},n.visitURL=function(t){return t},n.visitSpaceList=function(t){var e=this.visitValues(t.values);return e===t.values?t:new We(e)},n.visitCommaList=function(t){var e=this.visitValues(t.values);return e===t.values?t:new Xe(e)},n.visitFunc=function(t){var e=this.visitValues(t.values);return e===t.values?t:new je(t.name,e)},n.visitExpr=function(t){return t},e}(Ie),Pe=function(){function t(){}var e=t.prototype;return e.toString=function(){var t=new rt;return this.appendTo(t,!0),t.toString()},e.stringValue=function(){var t=new rt;return this.appendTo(t,!1),t.toString()},e.toExpr=function(t,e){throw new Error("F_ABSTRACT")},e.appendTo=function(t,e){t.append("[error]")},e.isExpr=function(){return!1},e.isNumeric=function(){return!1},e.isNum=function(){return!1},e.isIdent=function(){return!1},e.isSpaceList=function(){return!1},e.visit=function(t){throw new Error("F_ABSTRACT")},t}(),Oe=function(t){function e(){return t.call(this)||this}I(e,t);var n=e.prototype;return n.toExpr=function(t,e){return new ye(t,"")},n.appendTo=function(t,e){},n.visit=function(t){return t.visitEmpty(this)},x(e,null,[{key:"instance",get:function(){return this.empty||(this.empty=new e),this.empty}}]),e}(Pe).instance,Re=function(t){function e(){return t.call(this)||this}I(e,t);var n=e.prototype;return n.toExpr=function(t,e){return new ye(t,"/")},n.appendTo=function(t,e){t.append("/")},n.visit=function(t){return t.visitSlash(this)},x(e,null,[{key:"instance",get:function(){return this.slash||(this.slash=new e),this.slash}}]),e}(Pe).instance,ke=function(t){function e(e){var n;return(n=t.call(this)||this).str=e,n}I(e,t);var n=e.prototype;return n.toExpr=function(t,e){return new ye(t,this.str)},n.appendTo=function(t,e){e?(t.append('"'),t.append(st(this.str)),t.append('"')):t.append(this.str)},n.visit=function(t){return t.visitStr(this)},e}(Pe),Le={},Be=function(t){function e(e){var n;if((n=t.call(this)||this).name=e,Le[e])throw new Error("E_INVALID_CALL");return Le[e]=L(n),n}I(e,t);var n=e.prototype;return n.toExpr=function(t,e){return new ye(t,this.name)},n.appendTo=function(t,e){t.append(e?at(this.name):this.name)},n.visit=function(t){return t.visitIdent(this)},n.isIdent=function(){return!0},e}(Pe);function _e(t){var e=Le[t];return e||(e=new Be(t)),e}var Me=function(t){function e(e,n){var i;return(i=t.call(this)||this).num=e,i.unit=n.toLowerCase(),i}I(e,t);var n=e.prototype;return n.toExpr=function(t,e){return 0==this.num?t.zero:e&&"%"==this.unit?100==this.num?e:new fe(t,e,new ye(t,this.num/100)):new ge(t,this.num,this.unit)},n.appendTo=function(t,e){t.append(this.num.toString()),t.append(this.unit)},n.visit=function(t){return t.visitNumeric(this)},n.isNumeric=function(){return!0},e}(Pe),Ue=function(t){function e(e){var n;return(n=t.call(this)||this).num=e,n}I(e,t);var n=e.prototype;return n.toExpr=function(t,e){return 0==this.num?t.zero:1==this.num?t.one:new ye(t,this.num)},n.appendTo=function(t,e){t.append(this.num.toString())},n.visit=function(t){return t.visitNum(this)},n.isNum=function(){return!0},e}(Pe),Ve=function(t){function e(e){return t.call(this,e)||this}return I(e,t),e.prototype.visit=function(t){return t.visitInt(this)},e}(Ue),ze=function(t){function e(e){var n;return(n=t.call(this)||this).rgb=e,n}I(e,t);var n=e.prototype;return n.appendTo=function(t,e){t.append("#");var n=this.rgb.toString(16);t.append("000000".substr(n.length)),t.append(n)},n.visit=function(t){return t.visitColor(this)},e}(Pe),He=function(t){function e(e){var n;return(n=t.call(this)||this).url=e,n}I(e,t);var n=e.prototype;return n.appendTo=function(t,e){t.append('url("'),t.append(st(this.url)),t.append('")')},n.visit=function(t){return t.visitURL(this)},e}(Pe);function Ge(t,e,n,i){var r=e.length;if(r>0){e[0].appendTo(t,i);for(var o=1;o<r;o++)t.append(n),e[o].appendTo(t,i)}}var We=function(t){function e(e){var n;return(n=t.call(this)||this).values=e,n}I(e,t);var n=e.prototype;return n.appendTo=function(t,e){Ge(t,this.values," ",e)},n.visit=function(t){return t.visitSpaceList(this)},n.isSpaceList=function(){return!0},e}(Pe),Xe=function(t){function e(e){var n;return(n=t.call(this)||this).values=e,n}I(e,t);var n=e.prototype;return n.appendTo=function(t,e){Ge(t,this.values,",",e)},n.visit=function(t){return t.visitCommaList(this)},e}(Pe),je=function(t){function e(e,n){var i;return(i=t.call(this)||this).name=e,i.values=n,i}I(e,t);var n=e.prototype;return n.appendTo=function(t,e){t.append(at(this.name)),t.append("("),Ge(t,this.values,",",e),t.append(")")},n.visit=function(t){return t.visitFunc(this)},e}(Pe),Ke=function(t){function e(e){var n;return(n=t.call(this)||this).expr=e,n}I(e,t);var n=e.prototype;return n.toExpr=function(){return this.expr},n.appendTo=function(t,e){t.append("-epubx-expr("),this.expr.appendTo(t,0),t.append(")")},n.visit=function(t){return t.visitExpr(this)},n.isExpr=function(){return!0},e}(Pe);function $e(t,e){if(t){if(t.isNumeric()){var n=t;return e.queryUnitSize(n.unit,!1)*n.num}if(t.isNum())return t.num}return 0}function qe(t,e){return new Me($e(t,e),"px")}var Ye={absolute:_e("absolute"),all:_e("all"),always:_e("always"),auto:_e("auto"),avoid:_e("avoid"),balance:_e("balance"),balance_all:_e("balance-all"),block:_e("block"),block_end:_e("block-end"),block_start:_e("block-start"),both:_e("both"),bottom:_e("bottom"),border_box:_e("border-box"),break_all:_e("break-all"),break_word:_e("break-word"),crop:_e("crop"),cross:_e("cross"),column:_e("column"),exclusive:_e("exclusive"),_false:_e("false"),fixed:_e("fixed"),flex:_e("flex"),footnote:_e("footnote"),footer:_e("footer"),header:_e("header"),hidden:_e("hidden"),horizontal_tb:_e("horizontal-tb"),inherit:_e("inherit"),inline:_e("inline"),inline_block:_e("inline-block"),inline_end:_e("inline-end"),inline_start:_e("inline-start"),landscape:_e("landscape"),left:_e("left"),line:_e("line"),list_item:_e("list-item"),ltr:_e("ltr"),manual:_e("manual"),none:_e("none"),normal:_e("normal"),oeb_page_foot:_e("oeb-page-foot"),oeb_page_head:_e("oeb-page-head"),page:_e("page"),relative:_e("relative"),right:_e("right"),same:_e("same"),scale:_e("scale"),snap_block:_e("snap-block"),spread:_e("spread"),_static:_e("static"),rtl:_e("rtl"),table:_e("table"),table_caption:_e("table-caption"),table_cell:_e("table-cell"),table_footer_group:_e("table-footer-group"),table_header_group:_e("table-header-group"),table_row:_e("table-row"),top:_e("top"),transparent:_e("transparent"),vertical_lr:_e("vertical-lr"),vertical_rl:_e("vertical-rl"),visible:_e("visible"),_true:_e("true")},Ze=new Me(100,"%"),Qe=new Me(100,"pvw"),Je=new Me(100,"pvh"),tn=new Me(0,"px"),en={"font-size":1,color:2};function nn(t,e){return(en[t]||Number.MAX_VALUE)-(en[e]||Number.MAX_VALUE)}var rn=function(t,e,n,i){this.x1=t,this.y1=e,this.x2=n,this.y2=i},on=function(t,e){this.x=t,this.y=e},an=function(t,e,n,i){this.left=t,this.top=e,this.right=n,this.bottom=i},sn=function(t,e,n,i){this.low=t,this.high=e,this.winding=n,this.shapeId=i},un=function(t,e,n,i){this.y1=t,this.y2=e,this.x1=n,this.x2=i,this.left=null,this.right=null};function ln(t,e){return t.low.y-e.low.y||t.low.x-e.low.x}var cn=function(){function t(t){this.points=t}var e=t.prototype;return e.addSegments=function(t,e){for(var n=this.points,i=n.length,r=n[i-1],o=0;o<i;o++){var a,s=n[o];a=r.y<s.y?new sn(r,s,1,e):new sn(s,r,-1,e),t.push(a),r=s}},e.withOffset=function(e,n){for(var i,r=[],o=_(this.points);!(i=o()).done;){var a=i.value;r.push(new on(a.x+e,a.y+n))}return new t(r)},t}();function hn(t,e,n,i){for(var r=[],o=0;o<20;o++){var a=2*o*Math.PI/20;r.push(new on(t+n*Math.sin(a),e+i*Math.cos(a)))}return new cn(r)}function fn(t,e,n,i){return new cn([new on(t,e),new on(n,e),new on(n,i),new on(t,i)])}var dn=function(t,e,n,i){this.x=t,this.winding=e,this.shapeId=n,this.lowOrHigh=i};function pn(t,e){var n=t.low.x+(t.high.x-t.low.x)*(e-t.low.y)/(t.high.y-t.low.y);if(isNaN(n))throw new Error("Bad intersection");return n}function gn(t,e,n,i){var r,o,a,s;e.high.y<n&&f.warn("Error: inconsistent segment (1)"),e.low.y<=n?(r=pn(e,n),o=e.winding):(r=e.low.x,o=0),e.high.y>=i?(a=pn(e,i),s=e.winding):(a=e.high.x,s=0),r<a?(t.push(new dn(r,o,e.shapeId,-1)),t.push(new dn(a,s,e.shapeId,1))):(t.push(new dn(a,s,e.shapeId,-1)),t.push(new dn(r,o,e.shapeId,1)))}function mn(t,e,n){var i,r=e+n,o=Array(r),a=Array(r);for(i=0;i<=r;i++)o[i]=0,a[i]=0;for(var s=[],u=!1,l=t.length,c=0;c<l;c++){var h=t[c];o[h.shapeId]+=h.winding,a[h.shapeId]+=h.lowOrHigh;var f=!1;for(i=0;i<e;i++)if(o[i]&&!a[i]){f=!0;break}if(f)for(i=e;i<=r;i++)if(o[i]||a[i]){f=!1;break}u!=f&&(s.push(h.x),u=f)}return s}function vn(t,e){return e?Math.floor(t/e)*e:t}function En(t){return new rn(t.y1,-t.x2,t.y2,-t.x1)}function bn(t){return new rn(-t.y2,t.x1,-t.y1,t.x2)}function Cn(t){return new cn(t.points.map((function(t){return function(t){return new on(t.y,-t.x)}(t)})))}function yn(t,e){for(var n=e.length-1,i=new un(t.y2,t.y2,t.x1,t.x2);n>=0;){var r=i;((i=e[n]).y2-i.y1<1||i.x1==r.x1&&i.x2==r.x2)&&(r.y1=i.y1,e.splice(n,1),i=r),n--}}function wn(t,e){for(var n=0,i=t.length;n<i;){var r=Math.floor((n+i)/2);e>=t[r].y2?n=r+1:i=r}return n}function Dn(t,e){if(!t.length)return e;var n,i,r=e.y1;for(i=0;i<t.length&&!((n=t[i]).y2>e.y1&&n.x1-.1<=e.x1&&n.x2+.1>=e.x2);i++)r=Math.max(r,n.y2);for(var o=r;i<t.length&&!((n=t[i]).y1>=e.y2||n.x1-.1>e.x1||n.x2+.1<e.x2);i++)o=n.y2;return(o=i===t.length?e.y2:Math.min(o,e.y2))<=r?null:new rn(e.x1,r,e.x2,o)}function Sn(t,e){if(!t.length)return e;var n,i,r=e.y2;for(i=t.length-1;i>=0&&(n=t[i],!(i===t.length-1&&n.y2<e.y2))&&!(n.y1<e.y2&&n.x1-.1<=e.x1&&n.x2+.1>=e.x2);i--)r=Math.min(r,n.y1);for(var o=Math.min(r,n.y2);i>=0&&!((n=t[i]).y2<=e.y1||n.x1-.1>e.x1||n.x2+.1<e.x2);i--)o=n.y1;return r<=(o=Math.max(o,e.y1))?null:new rn(e.x1,o,e.x2,r)}var Nn=function(t){function e(){var e;return(e=t.call(this)||this).propSet={},e}I(e,t);var n=e.prototype;return n.visitIdent=function(t){return this.propSet[t.name]=!0,t},n.visitSpaceList=function(t){return this.visitValues(t.values),t},e}(Ie),Tn=function(t){function e(e){var n;return(n=t.call(this)||this).value=e,n}return I(e,t),e.prototype.visitInt=function(t){return this.value=t.num,t},e}(Ie);function An(t,e){if(t){var n=new Tn(e);try{return t.visit(n),n.value}catch(t){f.warn(t,"toInt: ")}}return e}var xn=function(t){function e(){var e;return(e=t.call(this)||this).collect=!1,e.coords=[],e.name=null,e}I(e,t);var n=e.prototype;return n.visitNumeric=function(t){return this.collect&&this.coords.push(t),null},n.visitNum=function(t){return this.collect&&0==t.num&&this.coords.push(new Me(0,"px")),null},n.visitSpaceList=function(t){return this.visitValues(t.values),null},n.visitFunc=function(t){return this.collect||(this.collect=!0,this.visitValues(t.values),this.collect=!1,this.name=t.name.toLowerCase()),null},n.getShape=function(t,e,n,i,r){var o=this;if(this.coords.length>0){var a=[];switch(this.coords.forEach((function(t,e){if("%"==t.unit){var s=e%2==0?n:i;3==e&&"circle"==o.name&&(s=Math.sqrt((n*n+i*i)/2)),a.push(t.num*s/100)}else a.push(t.num*r.queryUnitSize(t.unit,!1))})),this.name){case"polygon":if(a.length%2==0){for(var s=[],u=0;u<a.length;u+=2)s.push(new on(t+a[u],e+a[u+1]));return new cn(s)}break;case"rectangle":if(4==a.length)return fn(t+a[0],e+a[1],t+a[0]+a[2],e+a[1]+a[3]);break;case"ellipse":if(4==a.length)return hn(t+a[0],e+a[1],a[2],a[3]);break;case"circle":if(3==a.length)return hn(t+a[0],e+a[1],a[2],a[2])}}return null},e}(Ie);function In(t,e,n,i,r,o){if(t){var a=new xn;try{return t.visit(a),a.getShape(e,n,i,r,o)}catch(t){f.warn(t,"toShape:")}}return fn(e,n,e+i,n+r)}var Fn=function(t){function e(e){var n;return(n=t.call(this)||this).reset=e,n.counters={},n.name=null,n}I(e,t);var n=e.prototype;return n.visitIdent=function(t){return this.name=t.toString(),this.counters[this.name]=this.reset?0:(this.counters[this.name]||0)+1,t},n.visitInt=function(t){return this.name&&(this.counters[this.name]+=t.num-(this.reset?0:1)),t},n.visitSpaceList=function(t){return this.visitValues(t.values),t},e}(Ie);function Pn(t,e){var n=new Fn(e);try{t.visit(n)}catch(t){f.warn(t,"toCounters:")}return n.counters}var On=function(t){function e(e,n){var i;return(i=t.call(this)||this).baseUrl=e,i.transformer=n,i}return I(e,t),e.prototype.visitURL=function(t){return new He(this.transformer.transformURL(t.url,this.baseUrl))},e}(Fe);function Rn(t){var e={};return Object.keys(t).forEach((function(n){e[n]=Array.from(t[n])})),e}var kn,Ln=function(){function t(t,e){this.targetId=t,this.resolved=e,this.pageCounters=null,this.spineIndex=-1,this.pageIndex=-1}var e=t.prototype;return e.equals=function(t){return this===t||!!t&&this.targetId===t.targetId&&this.resolved===t.resolved&&this.spineIndex===t.spineIndex&&this.pageIndex===t.pageIndex},e.isResolved=function(){return this.resolved},e.resolve=function(){this.resolved=!0},e.unresolve=function(){this.resolved=!1},t}(),Bn=function(){function t(t,e){this.counterStore=t,this.baseURL=e}var e=t.prototype;return e.countersOfId=function(t,e){t=this.counterStore.documentURLTransformer.transformFragment(t,this.baseURL),this.counterStore.countersById[t]=e},e.getExprContentListener=function(){return this.counterStore.getExprContentListener()},t}(),_n=function(){function t(t,e,n,i){this.counterStore=t,this.baseURL=e,this.rootScope=n,this.pageScope=i,this.styler=null,this.namedStringValues={}}var e=t.prototype;return e.setStyler=function(t){this.styler=t},e.getFragment=function(t){var e=t.match(/^[^#]*#(.*)$/);return e?e[1]:null},e.getTransformedId=function(t){var e=this.counterStore.documentURLTransformer.transformURL(K(t,this.baseURL),this.baseURL);return"#"===e.charAt(0)&&(e=e.substring(1)),e},e.getPageCounterVal=function(t,e){var n=this,i=new Ee(this.pageScope,(function(){return e(function(){var e=n.counterStore.currentPageCounters[t];return e&&e.length?e[e.length-1]:null}())}),"page-counter-"+t);return this.counterStore.registerPageCounterExpr(t,(function(t){return e(t[0])}),i),i},e.getPageCountersVal=function(t,e){var n=this,i=new Ee(this.pageScope,(function(){return e(n.counterStore.currentPageCounters[t]||[])}),"page-counters-"+t);return this.counterStore.registerPageCounterExpr(t,e,i),i},e.getTargetCounters=function(t,e,n){var i=this.counterStore.countersById[e];return!i&&n&&t&&(this.styler.styleUntilIdIsReached(t),i=this.counterStore.countersById[e]),i||null},e.getTargetPageCounters=function(t){return this.counterStore.currentPage.elementsById[t]?this.counterStore.currentPageCounters:this.counterStore.pageCountersById[t]||null},e.getTargetCounterVal=function(t,e,n){var i=this,r=this.getFragment(t),o=this.getTransformedId(t),a=this.getTargetCounters(r,o,!1);if(a&&a[e]){var s=a[e];return new ye(this.rootScope,n(s[s.length-1]||null))}return new Ee(this.pageScope,(function(){if(a=i.getTargetCounters(r,o,!0)){if(a[e]){var t=a[e];return n(t[t.length-1]||null)}var s=i.getTargetPageCounters(o);if(s){if(i.counterStore.resolveReference(o),s[e]){var u=s[e];return n(u[u.length-1]||null)}return n(0)}return i.counterStore.saveReferenceOfCurrentPage(o,!1),"??"}return i.counterStore.saveReferenceOfCurrentPage(o,!1),"??"}),"target-counter-"+e+"-of-"+t)},e.getTargetCountersVal=function(t,e,n){var i=this,r=this.getFragment(t),o=this.getTransformedId(t);return new Ee(this.pageScope,(function(){var t=i.getTargetPageCounters(o);if(t){i.counterStore.resolveReference(o);var a=t[e]||[],s=i.getTargetCounters(r,o,!0);return n(a.concat(s[e]||[]))}return i.counterStore.saveReferenceOfCurrentPage(o,!1),"??"}),"target-counters-"+e+"-of-"+t)},e.getNamedStringVal=function(t,e){var n=this;return new Ee(this.pageScope,(function(){var i=n.namedStringValues[t];if(!i)return"";for(var r=Object.keys(i).map((function(t){return parseInt(t,10)})).sort(dt),o=n.counterStore.currentPage,a=o.offset,s=Math.max.apply(Math,[a].concat(Array.from(o.container.querySelectorAll("[data-adapt-eloff]")).map((function(t){return parseInt(t.getAttribute("data-adapt-eloff"),10)})))),u=-1,l=-1,c=-1,h=-1,f=0;f<r.length;f++){var d=r[f],p=f>0?r[f-1]:-1,g=f<r.length-1?r[f+1]:-1;if(d>s)break;if(d>=a){if(u<0&&(u=d,h=-1),l<0)if(d===a)l=d;else{p<u&&(l=p);var m=o.container.querySelector('[data-adapt-eloff="'+d+'"]');if(m){var v=o.container.querySelector('[data-adapt-eloff="'+a+'"]');if(v||(v=o.container.querySelector('[data-adapt-eloff="0"]')),v)for(var E=v;E;E=E.firstElementChild)if(E===m){l=d;break}}else l<0&&(l=d)}c=d}else(g>s||g<0)&&(u=l=c=h=d)}return i[{first:u,start:l,last:c,"first-except":h}[e]]||""}),"named-string-"+e+"-"+t)},e.setNamedString=function(t,e,n){(this.namedStringValues[t]||(this.namedStringValues[t]={}))[n.currentElementOffset]=e},t}(),Mn=function(){function t(t){this.documentURLTransformer=t,this.countersById={},this.pageCountersById={},this.currentPageCounters={},this.previousPageCounters={},this.currentPageCountersStack=[],this.pageIndicesById={},this.currentPage=null,this.newReferencesOfCurrentPage=[],this.referencesToSolve=[],this.referencesToSolveStack=[],this.unresolvedReferences={},this.resolvedReferences={},this.pagesCounterExprs=[],this.currentPageCounters.page=[0]}var e=t.prototype;return e.createCounterListener=function(t){return new Bn(this,t)},e.createCounterResolver=function(t,e,n){return new _n(this,t,e,n)},e.setCurrentPage=function(t){this.currentPage=t},e.definePageCounter=function(t,e){this.currentPageCounters[t]?this.currentPageCounters[t].push(e):this.currentPageCounters[t]=[e]},e.forceSetPageCounter=function(t){var e=this.currentPageCounters.page;e&&e.length?e[e.length-1]=t:this.currentPageCounters.page=[t]},e.updatePageCounters=function(t,e){var n;this.previousPageCounters=Rn(this.currentPageCounters);var i,r=t["counter-reset"];if(r){var o=r.evaluate(e);o&&(n=Pn(o,!0))}if(n)for(var a in n)this.definePageCounter(a,n[a]);var s=t["counter-increment"];if(s){var u=s.evaluate(e);u&&(i=Pn(u,!1))}for(var l in i?"page"in i||(i.page=1):(i={}).page=1,i){this.currentPageCounters[l]||this.definePageCounter(l,0);var c=this.currentPageCounters[l];c[c.length-1]+=i[l]}},e.pushPageCounters=function(t){this.currentPageCountersStack.push(this.currentPageCounters),this.currentPageCounters=Rn(t)},e.popPageCounters=function(){this.currentPageCounters=this.currentPageCountersStack.pop()},e.resolveReference=function(t){var e=this.unresolvedReferences[t],n=this.resolvedReferences[t];n||(n=this.resolvedReferences[t]=[]);for(var i=!1,r=0;r<this.referencesToSolve.length;){var o=this.referencesToSolve[r];if(o.targetId===t){if(o.resolve(),this.referencesToSolve.splice(r,1),e){var a=e.indexOf(o);a>=0&&e.splice(a,1)}n.push(o),i=!0}else r++}i||this.saveReferenceOfCurrentPage(t,!0)},e.saveReferenceOfCurrentPage=function(t,e){if(!this.newReferencesOfCurrentPage.some((function(e){return e.targetId===t}))){var n=new Ln(t,e);this.newReferencesOfCurrentPage.push(n)}},e.finishPage=function(t,e){var n=this,i=Object.keys(this.currentPage.elementsById);if(i.length>0){var r=Rn(this.currentPageCounters);i.forEach((function(i){n.pageCountersById[i]=r;var o=n.pageIndicesById[i];if(o&&o.pageIndex<e){var a=n.resolvedReferences[i];if(a){var s,u=n.unresolvedReferences[i];for(u||(u=n.unresolvedReferences[i]=[]);s=a.shift();)s.unresolve(),u.push(s)}}n.pageIndicesById[i]={spineIndex:t,pageIndex:e}}))}for(var o,a=this.previousPageCounters;o=this.newReferencesOfCurrentPage.shift();){o.pageCounters=a,o.spineIndex=t,o.pageIndex=e;var s=void 0;o.isResolved()?(s=this.resolvedReferences[o.targetId])||(s=this.resolvedReferences[o.targetId]=[]):(s=this.unresolvedReferences[o.targetId])||(s=this.unresolvedReferences[o.targetId]=[]),s.every((function(t){return!o.equals(t)}))&&s.push(o)}this.currentPage=null},e.getUnresolvedRefsToPage=function(t){var e=this,n=[];Object.keys(t.elementsById).forEach((function(t){var i=e.unresolvedReferences[t];i&&(n=n.concat(i))})),n.sort((function(t,e){return t.spineIndex-e.spineIndex||t.pageIndex-e.pageIndex}));var i=[],r=null;return n.forEach((function(t){r&&r.spineIndex===t.spineIndex&&r.pageIndex===t.pageIndex?r.refs.push(t):i.push(r={spineIndex:t.spineIndex,pageIndex:t.pageIndex,pageCounters:t.pageCounters,refs:[t]})})),i},e.pushReferencesToSolve=function(t){this.referencesToSolveStack.push(this.referencesToSolve),this.referencesToSolve=t},e.popReferencesToSolve=function(){this.referencesToSolve=this.referencesToSolveStack.pop()},e.registerPageCounterExpr=function(t,e,n){"pages"===t&&this.pagesCounterExprs.push({expr:n,format:e})},e.getExprContentListener=function(){return this.exprContentListener.bind(this)},e.exprContentListener=function(t,e,n){if(this.pagesCounterExprs.findIndex((function(e){return e.expr===t}))>=0){var i=n.createElement("span");return i.textContent=e,i.setAttribute(Un,t.key),i}return null},e.finishLastPage=function(t){for(var e,n=this,i=t.root.querySelectorAll("["+Un+"]"),r=this.currentPageCounters.page[0],o=function(){var t=e.value,i=t.getAttribute(Un),o=n.pagesCounterExprs.findIndex((function(t){return t.expr.key===i}));t.textContent=n.pagesCounterExprs[o].format([r])},a=_(i);!(e=a()).done;)o()},e.createLayoutConstraint=function(t){return new Vn(this,t)},t}(),Un="data-vivliostyle-pages-counter",Vn=function(){function t(t,e){this.counterStore=t,this.pageIndex=e}return t.prototype.allowLayout=function(t){if(!t||t.after)return!0;var e=t.viewNode;if(!e||1!==e.nodeType)return!0;var n=e.getAttribute("id")||e.getAttribute("name");if(!n)return!0;if(!this.counterStore.resolvedReferences[n]&&!this.counterStore.unresolvedReferences[n])return!0;var i=this.counterStore.pageIndicesById[n];return!i||this.pageIndex>=i.pageIndex},t}();function zn(t){if((t=t.substr(1)).match(/^[^0-9a-fA-F\n\r]$/))return t;var e=parseInt(t,16);return isNaN(e)?"":e<=65535?String.fromCharCode(e):e<=1114111?String.fromCharCode(55296|e>>10&1023,56320|1023&e):"�"}function Hn(t){return t.replace(/\\([0-9a-fA-F]{0,6}(\r\n|[ \n\r\t\f])?|[^0-9a-fA-F\n\r])/g,zn)}!function(t){t[t.EOF=0]="EOF",t[t.IDENT=1]="IDENT",t[t.STR=2]="STR",t[t.NUMERIC=3]="NUMERIC",t[t.NUM=4]="NUM",t[t.INT=5]="INT",t[t.FUNC=6]="FUNC",t[t.HASH=7]="HASH",t[t.URL=8]="URL",t[t.CLASS=9]="CLASS",t[t.O_PAR=10]="O_PAR",t[t.C_PAR=11]="C_PAR",t[t.O_BRC=12]="O_BRC",t[t.C_BRC=13]="C_BRC",t[t.O_BRK=14]="O_BRK",t[t.C_BRK=15]="C_BRK",t[t.COMMA=16]="COMMA",t[t.SEMICOL=17]="SEMICOL",t[t.COLON=18]="COLON",t[t.SLASH=19]="SLASH",t[t.AT=20]="AT",t[t.PERCENT=21]="PERCENT",t[t.QMARK=22]="QMARK",t[t.PLUS=23]="PLUS",t[t.MINUS=24]="MINUS",t[t.BAR_BAR=25]="BAR_BAR",t[t.AMP_AMP=26]="AMP_AMP",t[t.BANG=31]="BANG",t[t.DOLLAR=32]="DOLLAR",t[t.HAT=33]="HAT",t[t.BAR=34]="BAR",t[t.TILDE=35]="TILDE",t[t.STAR=36]="STAR",t[t.GT=37]="GT",t[t.LT=38]="LT",t[t.EQ=39]="EQ",t[t.BANG_EQ=41]="BANG_EQ",t[t.DOLLAR_EQ=42]="DOLLAR_EQ",t[t.HAT_EQ=43]="HAT_EQ",t[t.BAR_EQ=44]="BAR_EQ",t[t.TILDE_EQ=45]="TILDE_EQ",t[t.STAR_EQ=46]="STAR_EQ",t[t.GT_EQ=47]="GT_EQ",t[t.LT_EQ=48]="LT_EQ",t[t.EQ_EQ=49]="EQ_EQ",t[t.COL_COL=50]="COL_COL",t[t.INVALID=51]="INVALID",t[t.LAST=51]="LAST"}(kn||(kn={}));var Gn,Wn=function(){this.precededBySpace=!1,this.num=0,this.text="",this.position=0,this.type=kn.EOF};function Xn(t,e){var n,i=Array(128);for(n=0;n<128;n++)i[n]=t;for(i.NaN=t==Gn.END?Gn.END:Gn.INVALID,n=0;n<e.length;n+=2)i[e[n]]=e[n+1];return i}!function(t){t[t.SPACE=1]="SPACE",t[t.INT=2]="INT",t[t.IDENT=3]="IDENT",t[t.BANG=4]="BANG",t[t.HASH=6]="HASH",t[t.DOLLAR=7]="DOLLAR",t[t.PERCENT=8]="PERCENT",t[t.AMP=9]="AMP",t[t.O_PAR=10]="O_PAR",t[t.C_PAR=11]="C_PAR",t[t.STAR=12]="STAR",t[t.PLUS=13]="PLUS",t[t.COMMA=14]="COMMA",t[t.MINUS=15]="MINUS",t[t.DOT=16]="DOT",t[t.SLASH=17]="SLASH",t[t.COLON=18]="COLON",t[t.SEMICOL=19]="SEMICOL",t[t.LT=20]="LT",t[t.EQ=21]="EQ",t[t.GT=22]="GT",t[t.QMARK=23]="QMARK",t[t.AT=24]="AT",t[t.O_BRK=25]="O_BRK",t[t.C_BRK=26]="C_BRK",t[t.O_BRC=27]="O_BRC",t[t.C_BRC=28]="C_BRC",t[t.BSLASH=29]="BSLASH",t[t.HAT=30]="HAT",t[t.BAR=31]="BAR",t[t.TILDE=32]="TILDE",t[t.STR1=33]="STR1",t[t.STR2=34]="STR2",t[t.END=35]="END",t[t.EQTAIL=36]="EQTAIL",t[t.ENDINT=37]="ENDINT",t[t.ENDNUM=38]="ENDNUM",t[t.CONT=39]="CONT",t[t.UNIT=40]="UNIT",t[t.PCUNIT=41]="PCUNIT",t[t.NUMBER=42]="NUMBER",t[t.ENDIDNT=43]="ENDIDNT",t[t.IDNTESC=44]="IDNTESC",t[t.ENDIDES=45]="ENDIDES",t[t.ENDSTR=46]="ENDSTR",t[t.ENDESTR=47]="ENDESTR",t[t.STR1ESC=48]="STR1ESC",t[t.STR2ESC=49]="STR2ESC",t[t.BAR_BAR=50]="BAR_BAR",t[t.AMP_AMP=51]="AMP_AMP",t[t.FUNC=52]="FUNC",t[t.FUNCES=53]="FUNCES",t[t.COMMENT=54]="COMMENT",t[t.COMMST=55]="COMMST",t[t.ENDNOTK=56]="ENDNOTK",t[t.MINMIN=57]="MINMIN",t[t.TOINT=58]="TOINT",t[t.TONUM=59]="TONUM",t[t.TOIDENT=60]="TOIDENT",t[t.TOIDES=61]="TOIDES",t[t.KILL1=62]="KILL1",t[t.KILL2=63]="KILL2",t[t.URL=64]="URL",t[t.URL1=65]="URL1",t[t.URL2=66]="URL2",t[t.ENDURL=67]="ENDURL",t[t.TERMURL=68]="TERMURL",t[t.FINURL=69]="FINURL",t[t.LT_BG=70]="LT_BG",t[t.LT_BG_M=71]="LT_BG_M",t[t.INVALID=72]="INVALID",t[t.CHKPOSS=73]="CHKPOSS",t[t.CHKPOSN=74]="CHKPOSN",t[t.URLESC=75]="URLESC",t[t.IDESCH=76]="IDESCH",t[t.COL_COL=77]="COL_COL",t[t.TOCLASS=78]="TOCLASS",t[t.CHKSP=79]="CHKSP",t[t.EOF=80]="EOF"}(Gn||(Gn={}));var jn=[Gn.INVALID,Gn.INVALID,Gn.INVALID,Gn.INVALID,Gn.INVALID,Gn.INVALID,Gn.INVALID,Gn.INVALID,Gn.INVALID,Gn.SPACE,Gn.SPACE,Gn.INVALID,Gn.SPACE,Gn.SPACE,Gn.INVALID,Gn.INVALID,Gn.INVALID,Gn.INVALID,Gn.INVALID,Gn.INVALID,Gn.INVALID,Gn.INVALID,Gn.INVALID,Gn.INVALID,Gn.INVALID,Gn.INVALID,Gn.INVALID,Gn.INVALID,Gn.INVALID,Gn.INVALID,Gn.INVALID,Gn.INVALID,Gn.SPACE,Gn.BANG,Gn.STR2,Gn.HASH,Gn.DOLLAR,Gn.PERCENT,Gn.AMP,Gn.STR1,Gn.O_PAR,Gn.C_PAR,Gn.STAR,Gn.PLUS,Gn.COMMA,Gn.MINUS,Gn.DOT,Gn.SLASH,Gn.INT,Gn.INT,Gn.INT,Gn.INT,Gn.INT,Gn.INT,Gn.INT,Gn.INT,Gn.INT,Gn.INT,Gn.COLON,Gn.SEMICOL,Gn.LT,Gn.EQ,Gn.GT,Gn.QMARK,Gn.AT,Gn.IDENT,Gn.IDENT,Gn.IDENT,Gn.IDENT,Gn.IDENT,Gn.IDENT,Gn.IDENT,Gn.IDENT,Gn.IDENT,Gn.IDENT,Gn.IDENT,Gn.IDENT,Gn.IDENT,Gn.IDENT,Gn.IDENT,Gn.IDENT,Gn.IDENT,Gn.IDENT,Gn.IDENT,Gn.IDENT,Gn.IDENT,Gn.IDENT,Gn.IDENT,Gn.IDENT,Gn.IDENT,Gn.IDENT,Gn.O_BRK,Gn.BSLASH,Gn.C_BRK,Gn.HAT,Gn.IDENT,Gn.INVALID,Gn.IDENT,Gn.IDENT,Gn.IDENT,Gn.IDENT,Gn.IDENT,Gn.IDENT,Gn.IDENT,Gn.IDENT,Gn.IDENT,Gn.IDENT,Gn.IDENT,Gn.IDENT,Gn.IDENT,Gn.IDENT,Gn.IDENT,Gn.IDENT,Gn.IDENT,Gn.IDENT,Gn.IDENT,Gn.IDENT,Gn.IDENT,Gn.IDENT,Gn.IDENT,Gn.IDENT,Gn.IDENT,Gn.IDENT,Gn.O_BRC,Gn.BAR,Gn.C_BRC,Gn.TILDE,Gn.INVALID];jn.NaN=Gn.EOF;var Kn=[Gn.ENDIDNT,Gn.ENDIDNT,Gn.ENDIDNT,Gn.ENDIDNT,Gn.ENDIDNT,Gn.ENDIDNT,Gn.ENDIDNT,Gn.ENDIDNT,Gn.ENDIDNT,Gn.ENDIDNT,Gn.ENDIDNT,Gn.ENDIDNT,Gn.ENDIDNT,Gn.ENDIDNT,Gn.ENDIDNT,Gn.ENDIDNT,Gn.ENDIDNT,Gn.ENDIDNT,Gn.ENDIDNT,Gn.ENDIDNT,Gn.ENDIDNT,Gn.ENDIDNT,Gn.ENDIDNT,Gn.ENDIDNT,Gn.ENDIDNT,Gn.ENDIDNT,Gn.ENDIDNT,Gn.ENDIDNT,Gn.ENDIDNT,Gn.ENDIDNT,Gn.ENDIDNT,Gn.ENDIDNT,Gn.ENDIDNT,Gn.ENDIDNT,Gn.ENDIDNT,Gn.ENDIDNT,Gn.ENDIDNT,Gn.ENDIDNT,Gn.ENDIDNT,Gn.ENDIDNT,Gn.FUNC,Gn.ENDIDNT,Gn.ENDIDNT,Gn.ENDIDNT,Gn.ENDIDNT,Gn.CONT,Gn.ENDIDNT,Gn.ENDIDNT,Gn.CONT,Gn.CONT,Gn.CONT,Gn.CONT,Gn.CONT,Gn.CONT,Gn.CONT,Gn.CONT,Gn.CONT,Gn.CONT,Gn.ENDIDNT,Gn.ENDIDNT,Gn.ENDIDNT,Gn.ENDIDNT,Gn.ENDIDNT,Gn.ENDIDNT,Gn.ENDIDNT,Gn.CONT,Gn.CONT,Gn.CONT,Gn.CONT,Gn.CONT,Gn.CONT,Gn.CONT,Gn.CONT,Gn.CONT,Gn.CONT,Gn.CONT,Gn.CONT,Gn.CONT,Gn.CONT,Gn.CONT,Gn.CONT,Gn.CONT,Gn.CONT,Gn.CONT,Gn.CONT,Gn.CONT,Gn.CONT,Gn.CONT,Gn.CONT,Gn.CONT,Gn.CONT,Gn.ENDIDNT,Gn.IDNTESC,Gn.ENDIDNT,Gn.ENDIDNT,Gn.CONT,Gn.ENDIDNT,Gn.CONT,Gn.CONT,Gn.CONT,Gn.CONT,Gn.CONT,Gn.CONT,Gn.CONT,Gn.CONT,Gn.CONT,Gn.CONT,Gn.CONT,Gn.CONT,Gn.CONT,Gn.CONT,Gn.CONT,Gn.CONT,Gn.CONT,Gn.CONT,Gn.CONT,Gn.CONT,Gn.CONT,Gn.CONT,Gn.CONT,Gn.CONT,Gn.CONT,Gn.CONT,Gn.ENDIDNT,Gn.ENDIDNT,Gn.ENDIDNT,Gn.ENDIDNT,Gn.ENDIDNT];Kn.NaN=Gn.ENDIDNT;var $n=[Gn.INVALID,Gn.INVALID,Gn.INVALID,Gn.INVALID,Gn.INVALID,Gn.INVALID,Gn.INVALID,Gn.INVALID,Gn.INVALID,Gn.INVALID,Gn.INVALID,Gn.INVALID,Gn.INVALID,Gn.INVALID,Gn.INVALID,Gn.INVALID,Gn.INVALID,Gn.INVALID,Gn.INVALID,Gn.INVALID,Gn.INVALID,Gn.INVALID,Gn.INVALID,Gn.INVALID,Gn.INVALID,Gn.INVALID,Gn.INVALID,Gn.INVALID,Gn.INVALID,Gn.INVALID,Gn.INVALID,Gn.INVALID,Gn.INVALID,Gn.INVALID,Gn.INVALID,Gn.INVALID,Gn.INVALID,Gn.INVALID,Gn.INVALID,Gn.INVALID,Gn.INVALID,Gn.INVALID,Gn.INVALID,Gn.INVALID,Gn.INVALID,Gn.TOCLASS,Gn.TONUM,Gn.INVALID,Gn.TONUM,Gn.TONUM,Gn.TONUM,Gn.TONUM,Gn.TONUM,Gn.TONUM,Gn.TONUM,Gn.TONUM,Gn.TONUM,Gn.TONUM,Gn.INVALID,Gn.INVALID,Gn.INVALID,Gn.INVALID,Gn.INVALID,Gn.INVALID,Gn.INVALID,Gn.TOCLASS,Gn.TOCLASS,Gn.TOCLASS,Gn.TOCLASS,Gn.TOCLASS,Gn.TOCLASS,Gn.TOCLASS,Gn.TOCLASS,Gn.TOCLASS,Gn.TOCLASS,Gn.TOCLASS,Gn.TOCLASS,Gn.TOCLASS,Gn.TOCLASS,Gn.TOCLASS,Gn.TOCLASS,Gn.TOCLASS,Gn.TOCLASS,Gn.TOCLASS,Gn.TOCLASS,Gn.TOCLASS,Gn.TOCLASS,Gn.TOCLASS,Gn.TOCLASS,Gn.TOCLASS,Gn.TOCLASS,Gn.INVALID,Gn.TOIDES,Gn.INVALID,Gn.INVALID,Gn.TOCLASS,Gn.INVALID,Gn.TOCLASS,Gn.TOCLASS,Gn.TOCLASS,Gn.TOCLASS,Gn.TOCLASS,Gn.TOCLASS,Gn.TOCLASS,Gn.TOCLASS,Gn.TOCLASS,Gn.TOCLASS,Gn.TOCLASS,Gn.TOCLASS,Gn.TOCLASS,Gn.TOCLASS,Gn.TOCLASS,Gn.TOCLASS,Gn.TOCLASS,Gn.TOCLASS,Gn.TOCLASS,Gn.TOCLASS,Gn.TOCLASS,Gn.TOCLASS,Gn.TOCLASS,Gn.TOCLASS,Gn.TOCLASS,Gn.TOCLASS,Gn.INVALID,Gn.INVALID,Gn.INVALID,Gn.INVALID,Gn.INVALID];Kn.NaN=Gn.ENDIDNT;var qn=[Gn.END,Gn.END,Gn.END,Gn.END,Gn.END,Gn.END,Gn.END,Gn.END,Gn.END,Gn.END,Gn.END,Gn.END,Gn.END,Gn.END,Gn.END,Gn.END,Gn.END,Gn.END,Gn.END,Gn.END,Gn.END,Gn.END,Gn.END,Gn.END,Gn.END,Gn.END,Gn.END,Gn.END,Gn.END,Gn.END,Gn.END,Gn.END,Gn.END,Gn.END,Gn.END,Gn.END,Gn.END,Gn.END,Gn.END,Gn.END,Gn.END,Gn.END,Gn.END,Gn.END,Gn.END,Gn.MINMIN,Gn.TONUM,Gn.END,Gn.TOINT,Gn.TOINT,Gn.TOINT,Gn.TOINT,Gn.TOINT,Gn.TOINT,Gn.TOINT,Gn.TOINT,Gn.TOINT,Gn.TOINT,Gn.END,Gn.END,Gn.END,Gn.END,Gn.END,Gn.END,Gn.END,Gn.TOIDENT,Gn.TOIDENT,Gn.TOIDENT,Gn.TOIDENT,Gn.TOIDENT,Gn.TOIDENT,Gn.TOIDENT,Gn.TOIDENT,Gn.TOIDENT,Gn.TOIDENT,Gn.TOIDENT,Gn.TOIDENT,Gn.TOIDENT,Gn.TOIDENT,Gn.TOIDENT,Gn.TOIDENT,Gn.TOIDENT,Gn.TOIDENT,Gn.TOIDENT,Gn.TOIDENT,Gn.TOIDENT,Gn.TOIDENT,Gn.TOIDENT,Gn.TOIDENT,Gn.TOIDENT,Gn.TOIDENT,Gn.END,Gn.TOIDES,Gn.END,Gn.END,Gn.TOIDENT,Gn.END,Gn.TOIDENT,Gn.TOIDENT,Gn.TOIDENT,Gn.TOIDENT,Gn.TOIDENT,Gn.TOIDENT,Gn.TOIDENT,Gn.TOIDENT,Gn.TOIDENT,Gn.TOIDENT,Gn.TOIDENT,Gn.TOIDENT,Gn.TOIDENT,Gn.TOIDENT,Gn.TOIDENT,Gn.TOIDENT,Gn.TOIDENT,Gn.TOIDENT,Gn.TOIDENT,Gn.TOIDENT,Gn.TOIDENT,Gn.TOIDENT,Gn.TOIDENT,Gn.TOIDENT,Gn.TOIDENT,Gn.TOIDENT,Gn.END,Gn.END,Gn.END,Gn.END,Gn.END];qn.NaN=Gn.END;var Yn=[Gn.ENDIDES,Gn.ENDIDES,Gn.ENDIDES,Gn.ENDIDES,Gn.ENDIDES,Gn.ENDIDES,Gn.ENDIDES,Gn.ENDIDES,Gn.ENDIDES,Gn.CHKPOSS,Gn.ENDIDES,Gn.ENDIDES,Gn.ENDIDES,Gn.ENDIDES,Gn.ENDIDES,Gn.ENDIDES,Gn.ENDIDES,Gn.ENDIDES,Gn.ENDIDES,Gn.ENDIDES,Gn.ENDIDES,Gn.ENDIDES,Gn.ENDIDES,Gn.ENDIDES,Gn.ENDIDES,Gn.ENDIDES,Gn.ENDIDES,Gn.ENDIDES,Gn.ENDIDES,Gn.ENDIDES,Gn.ENDIDES,Gn.ENDIDES,Gn.CHKPOSS,Gn.ENDIDES,Gn.ENDIDES,Gn.ENDIDES,Gn.ENDIDES,Gn.ENDIDES,Gn.ENDIDES,Gn.ENDIDES,Gn.FUNCES,Gn.ENDIDES,Gn.ENDIDES,Gn.ENDIDES,Gn.ENDIDES,Gn.ENDIDES,Gn.ENDIDES,Gn.ENDIDES,Gn.CONT,Gn.CONT,Gn.CONT,Gn.CONT,Gn.CONT,Gn.CONT,Gn.CONT,Gn.CONT,Gn.CONT,Gn.CONT,Gn.ENDIDES,Gn.ENDIDES,Gn.ENDIDES,Gn.ENDIDES,Gn.ENDIDES,Gn.ENDIDES,Gn.ENDIDES,Gn.CONT,Gn.CONT,Gn.CONT,Gn.CONT,Gn.CONT,Gn.CONT,Gn.CONT,Gn.CONT,Gn.CONT,Gn.CONT,Gn.CONT,Gn.CONT,Gn.CONT,Gn.CONT,Gn.CONT,Gn.CONT,Gn.CONT,Gn.CONT,Gn.CONT,Gn.CONT,Gn.CONT,Gn.CONT,Gn.CONT,Gn.CONT,Gn.CONT,Gn.CONT,Gn.ENDIDES,Gn.IDNTESC,Gn.ENDIDES,Gn.ENDIDES,Gn.CONT,Gn.ENDIDES,Gn.CONT,Gn.CONT,Gn.CONT,Gn.CONT,Gn.CONT,Gn.CONT,Gn.CONT,Gn.CONT,Gn.CONT,Gn.CONT,Gn.CONT,Gn.CONT,Gn.CONT,Gn.CONT,Gn.CONT,Gn.CONT,Gn.CONT,Gn.CONT,Gn.CONT,Gn.CONT,Gn.CONT,Gn.CONT,Gn.CONT,Gn.CONT,Gn.CONT,Gn.CONT,Gn.ENDIDES,Gn.ENDIDES,Gn.ENDIDES,Gn.ENDIDES,Gn.ENDIDES];Yn.NaN=Gn.ENDIDES;var Zn=[Gn.ENDINT,Gn.ENDINT,Gn.ENDINT,Gn.ENDINT,Gn.ENDINT,Gn.ENDINT,Gn.ENDINT,Gn.ENDINT,Gn.ENDINT,Gn.ENDINT,Gn.ENDINT,Gn.ENDINT,Gn.ENDINT,Gn.ENDINT,Gn.ENDINT,Gn.ENDINT,Gn.ENDINT,Gn.ENDINT,Gn.ENDINT,Gn.ENDINT,Gn.ENDINT,Gn.ENDINT,Gn.ENDINT,Gn.ENDINT,Gn.ENDINT,Gn.ENDINT,Gn.ENDINT,Gn.ENDINT,Gn.ENDINT,Gn.ENDINT,Gn.ENDINT,Gn.ENDINT,Gn.ENDINT,Gn.ENDINT,Gn.ENDINT,Gn.ENDINT,Gn.ENDINT,Gn.PCUNIT,Gn.ENDINT,Gn.ENDINT,Gn.ENDINT,Gn.ENDINT,Gn.ENDINT,Gn.ENDINT,Gn.ENDINT,Gn.ENDINT,Gn.NUMBER,Gn.ENDINT,Gn.CONT,Gn.CONT,Gn.CONT,Gn.CONT,Gn.CONT,Gn.CONT,Gn.CONT,Gn.CONT,Gn.CONT,Gn.CONT,Gn.ENDINT,Gn.ENDINT,Gn.ENDINT,Gn.ENDINT,Gn.ENDINT,Gn.ENDINT,Gn.ENDINT,Gn.UNIT,Gn.UNIT,Gn.UNIT,Gn.UNIT,Gn.UNIT,Gn.UNIT,Gn.UNIT,Gn.UNIT,Gn.UNIT,Gn.UNIT,Gn.UNIT,Gn.UNIT,Gn.UNIT,Gn.UNIT,Gn.UNIT,Gn.UNIT,Gn.UNIT,Gn.UNIT,Gn.UNIT,Gn.UNIT,Gn.UNIT,Gn.UNIT,Gn.UNIT,Gn.UNIT,Gn.UNIT,Gn.UNIT,Gn.ENDINT,Gn.ENDINT,Gn.ENDINT,Gn.ENDINT,Gn.UNIT,Gn.ENDINT,Gn.UNIT,Gn.UNIT,Gn.UNIT,Gn.UNIT,Gn.UNIT,Gn.UNIT,Gn.UNIT,Gn.UNIT,Gn.UNIT,Gn.UNIT,Gn.UNIT,Gn.UNIT,Gn.UNIT,Gn.UNIT,Gn.UNIT,Gn.UNIT,Gn.UNIT,Gn.UNIT,Gn.UNIT,Gn.UNIT,Gn.UNIT,Gn.UNIT,Gn.UNIT,Gn.UNIT,Gn.UNIT,Gn.UNIT,Gn.ENDINT,Gn.ENDINT,Gn.ENDINT,Gn.ENDINT,Gn.ENDINT];Zn.NaN=Gn.ENDINT;var Qn=[Gn.ENDNUM,Gn.ENDNUM,Gn.ENDNUM,Gn.ENDNUM,Gn.ENDNUM,Gn.ENDNUM,Gn.ENDNUM,Gn.ENDNUM,Gn.ENDNUM,Gn.ENDNUM,Gn.ENDNUM,Gn.ENDNUM,Gn.ENDNUM,Gn.ENDNUM,Gn.ENDNUM,Gn.ENDNUM,Gn.ENDNUM,Gn.ENDNUM,Gn.ENDNUM,Gn.ENDNUM,Gn.ENDNUM,Gn.ENDNUM,Gn.ENDNUM,Gn.ENDNUM,Gn.ENDNUM,Gn.ENDNUM,Gn.ENDNUM,Gn.ENDNUM,Gn.ENDNUM,Gn.ENDNUM,Gn.ENDNUM,Gn.ENDNUM,Gn.ENDNUM,Gn.ENDNUM,Gn.ENDNUM,Gn.ENDNUM,Gn.ENDNUM,Gn.PCUNIT,Gn.ENDNUM,Gn.ENDNUM,Gn.ENDNUM,Gn.ENDNUM,Gn.ENDNUM,Gn.ENDNUM,Gn.ENDNUM,Gn.ENDNUM,Gn.ENDNUM,Gn.ENDNUM,Gn.CONT,Gn.CONT,Gn.CONT,Gn.CONT,Gn.CONT,Gn.CONT,Gn.CONT,Gn.CONT,Gn.CONT,Gn.CONT,Gn.ENDNUM,Gn.ENDNUM,Gn.ENDNUM,Gn.ENDNUM,Gn.ENDNUM,Gn.ENDNUM,Gn.ENDNUM,Gn.UNIT,Gn.UNIT,Gn.UNIT,Gn.UNIT,Gn.UNIT,Gn.UNIT,Gn.UNIT,Gn.UNIT,Gn.UNIT,Gn.UNIT,Gn.UNIT,Gn.UNIT,Gn.UNIT,Gn.UNIT,Gn.UNIT,Gn.UNIT,Gn.UNIT,Gn.UNIT,Gn.UNIT,Gn.UNIT,Gn.UNIT,Gn.UNIT,Gn.UNIT,Gn.UNIT,Gn.UNIT,Gn.UNIT,Gn.ENDNUM,Gn.ENDNUM,Gn.ENDNUM,Gn.ENDNUM,Gn.UNIT,Gn.ENDNUM,Gn.UNIT,Gn.UNIT,Gn.UNIT,Gn.UNIT,Gn.UNIT,Gn.UNIT,Gn.UNIT,Gn.UNIT,Gn.UNIT,Gn.UNIT,Gn.UNIT,Gn.UNIT,Gn.UNIT,Gn.UNIT,Gn.UNIT,Gn.UNIT,Gn.UNIT,Gn.UNIT,Gn.UNIT,Gn.UNIT,Gn.UNIT,Gn.UNIT,Gn.UNIT,Gn.UNIT,Gn.UNIT,Gn.UNIT,Gn.ENDNUM,Gn.ENDNUM,Gn.ENDNUM,Gn.ENDNUM,Gn.ENDNUM];Qn.NaN=Gn.ENDNUM;var Jn,ti=Xn(Gn.END,[61,Gn.EQTAIL]),ei=Xn(Gn.END,[58,Gn.COL_COL]),ni=Xn(Gn.END,[61,Gn.EQTAIL,124,Gn.BAR_BAR]),ii=Xn(Gn.END,[38,Gn.AMP_AMP]),ri=Xn(Gn.END,[42,Gn.COMMENT]),oi=Xn(Gn.CONT,[42,Gn.COMMST]),ai=Xn(Gn.COMMENT,[42,Gn.COMMST,47,Gn.ENDNOTK]),si=Xn(Gn.KILL1,[62,Gn.ENDNOTK]),ui=Xn(Gn.END,[61,Gn.EQTAIL,33,Gn.LT_BG]),li=Xn(Gn.KILL1,[45,Gn.LT_BG_M]),ci=Xn(Gn.KILL2,[45,Gn.ENDNOTK]),hi=Xn(Gn.IDESCH,[9,Gn.INVALID,10,Gn.INVALID,13,Gn.INVALID,32,Gn.INVALID]),fi=Xn(Gn.CONT,[39,Gn.ENDSTR,10,Gn.INVALID,13,Gn.INVALID,92,Gn.STR1ESC]),di=Xn(Gn.CONT,[34,Gn.ENDSTR,10,Gn.INVALID,13,Gn.INVALID,92,Gn.STR2ESC]),pi=Xn(Gn.CONT,[39,Gn.ENDESTR,10,Gn.CHKPOSN,13,Gn.CHKPOSN,92,Gn.STR1ESC]),gi=Xn(Gn.CONT,[34,Gn.ENDESTR,10,Gn.CHKPOSN,13,Gn.CHKPOSN,92,Gn.STR2ESC]),mi=Xn(Gn.URL,[9,Gn.CONT,32,Gn.CONT,34,Gn.URL2,39,Gn.URL1,41,Gn.INVALID,10,Gn.CONT,13,Gn.CONT]),vi=Xn(Gn.CONT,[41,Gn.ENDURL,9,Gn.CHKSP,10,Gn.CHKSP,13,Gn.CHKSP,32,Gn.CHKSP,92,Gn.URLESC,40,Gn.INVALID,91,Gn.INVALID,93,Gn.INVALID,123,Gn.INVALID,125,Gn.INVALID,NaN,Gn.ENDURL]),Ei=Xn(Gn.CONT,[39,Gn.TERMURL,10,Gn.CHKPOSN,13,Gn.CHKPOSN,92,Gn.URLESC,NaN,Gn.ENDURL]),bi=Xn(Gn.CONT,[34,Gn.TERMURL,10,Gn.CHKPOSN,13,Gn.CHKPOSN,92,Gn.URLESC,NaN,Gn.ENDURL]),Ci=Xn(Gn.INVALID,[9,Gn.CONT,10,Gn.CONT,13,Gn.CONT,32,Gn.CONT,41,Gn.FINURL]),yi=function(){function t(t,e){this.input=t,this.handler=e,this.head=-1,this.tail=0,this.curr=0,this.position=0,this.indexMask=15,this.buffer=Array(this.indexMask+1);for(var n=0;n<=this.indexMask;n++)this.buffer[n]=new Wn}var e=t.prototype;return e.token=function(){return this.tail==this.curr&&this.fillBuffer(),this.buffer[this.curr]},e.nthToken=function(t){return(this.tail-this.curr&this.indexMask)<=t&&this.fillBuffer(),this.buffer[this.curr+t&this.indexMask]},e.consume=function(){this.curr=this.curr+1&this.indexMask},e.mark=function(){if(this.head>=0)throw new Error("F_CSSTOK_BAD_CALL mark");this.head=this.curr},e.reset=function(){if(this.head<0)throw new Error("F_CSSTOK_BAD_CALL reset");this.curr=this.head,this.head=-1},e.unmark=function(){this.head=-1},e.hasMark=function(){return this.head>=0},e.reallocate=function(){for(var t=2*(this.indexMask+1)-1,e=Array(t+1),n=this.head,i=0;n!=this.tail;)e[i]=this.buffer[n],n==this.curr&&(this.curr=i),n=n+1&this.indexMask,i++;for(this.head=0,this.tail=i,this.indexMask=t,this.buffer=e;i<=t;)e[i++]=new Wn},e.error=function(t,e,n){this.handler&&this.handler.error(n,e)},e.fillBuffer=function(){var t=this.tail,e=this.head>=0?this.head:this.curr,n=this.indexMask;if(t>=e?e+=n:e--,e==t){if(this.head<0)throw new Error("F_CSSTOK_INTERNAL");this.reallocate(),t=this.tail,e=n=this.indexMask}for(var i=jn,r=this.input,o=this.position,a=this.buffer,s=kn.EOF,u=0,l="",c=0,h=!1,f=a[t],d=-9;;){var p=r.charCodeAt(o);switch(i[p]||i[65]){case Gn.INVALID:s=kn.INVALID,l=isNaN(p)?"E_CSS_UNEXPECTED_EOF":"E_CSS_UNEXPECTED_CHAR",i=jn,o++;break;case Gn.SPACE:o++,h=!0;continue;case Gn.INT:u=o++,i=Zn;continue;case Gn.IDENT:s=kn.IDENT,u=o++,i=Kn;continue;case Gn.BANG:u=o++,s=kn.BANG,i=ti;continue;case Gn.STR1:s=kn.STR,u=++o,i=fi;continue;case Gn.STR2:s=kn.STR,u=++o,i=di;continue;case Gn.HASH:u=++o,s=kn.HASH,i=Kn;continue;case Gn.DOLLAR:u=o++,s=kn.DOLLAR,i=ti;continue;case Gn.PERCENT:u=o++,s=kn.PERCENT;break;case Gn.AMP:u=o++,s=kn.DOLLAR,i=ii;continue;case Gn.O_PAR:u=o++,s=kn.O_PAR;break;case Gn.C_PAR:u=o++,s=kn.C_PAR;break;case Gn.STAR:u=o++,s=kn.STAR,i=ti;continue;case Gn.PLUS:u=o++,s=kn.PLUS;break;case Gn.COMMA:u=o++,s=kn.COMMA;break;case Gn.MINUS:s=kn.MINUS,u=o++,i=qn;continue;case Gn.DOT:u=o++,i=$n;continue;case Gn.TOCLASS:u=o++,s=kn.CLASS,i=Kn;continue;case Gn.SLASH:u=o++,s=kn.SLASH,i=ri;continue;case Gn.COLON:u=o++,s=kn.COLON,i=ei;continue;case Gn.COL_COL:o++,s=kn.COL_COL;break;case Gn.SEMICOL:u=o++,s=kn.SEMICOL;break;case Gn.LT:u=o++,s=kn.LT,i=ui;continue;case Gn.EQ:u=o++,s=kn.EQ,i=ti;continue;case Gn.GT:u=o++,s=kn.GT,i=ti;continue;case Gn.QMARK:u=o++,s=kn.QMARK;break;case Gn.AT:u=++o,s=kn.AT,i=Kn;continue;case Gn.O_BRK:u=o++,s=kn.O_BRK;break;case Gn.C_BRK:u=o++,s=kn.C_BRK;break;case Gn.O_BRC:u=o++,s=kn.O_BRC;break;case Gn.C_BRC:u=o++,s=kn.C_BRC;break;case Gn.BSLASH:d=u=o++,s=kn.IDENT,i=hi;continue;case Gn.HAT:u=o++,s=kn.HAT,i=ti;continue;case Gn.BAR:u=o++,s=kn.BAR,i=ni;continue;case Gn.TILDE:u=o++,s=kn.TILDE,i=ti;continue;case Gn.END:break;case Gn.EQTAIL:o++,s=s+kn.BANG_EQ-kn.BANG;break;case Gn.ENDINT:s=kn.INT,c=parseInt(r.substring(u,o),10);break;case Gn.ENDNUM:s=kn.NUM,c=parseFloat(r.substring(u,o));break;case Gn.CONT:o++;continue;case Gn.UNIT:s=kn.NUMERIC,c=parseFloat(r.substring(u,o)),u=o++,i=Kn;continue;case Gn.PCUNIT:s=kn.NUMERIC,c=parseFloat(r.substring(u,o)),l="%",u=o++;break;case Gn.NUMBER:o++,i=Qn;continue;case Gn.ENDIDNT:l=r.substring(u,o);break;case Gn.IDNTESC:d=o++,i=hi;continue;case Gn.ENDIDES:l=Hn(r.substring(u,o));break;case Gn.ENDSTR:l=r.substring(u,o),o++;break;case Gn.ENDESTR:l=Hn(r.substring(u,o)),o++;break;case Gn.STR1ESC:d=o,o+=2,i=pi;continue;case Gn.STR2ESC:d=o,o+=2,i=gi;continue;case Gn.BAR_BAR:o++,s=kn.BAR_BAR;break;case Gn.AMP_AMP:o++,s=kn.AMP_AMP;break;case Gn.FUNC:if(l=r.substring(u,o),s==kn.IDENT){if(o++,"url"==l.toLowerCase()){i=mi;continue}s=kn.FUNC}break;case Gn.FUNCES:if(l=Hn(r.substring(u,o)),s==kn.IDENT){if(o++,"url"==l.toLowerCase()){i=mi;continue}s=kn.FUNC}break;case Gn.COMMENT:i=oi,o++;continue;case Gn.COMMST:i=ai,o++;continue;case Gn.ENDNOTK:i=jn,o++;continue;case Gn.MINMIN:i=si,o++;continue;case Gn.TOINT:s=kn.INT,i=Zn,o++;continue;case Gn.TONUM:s=kn.NUM,i=Qn,o++;continue;case Gn.TOIDENT:s=kn.IDENT,i=Kn,o++;continue;case Gn.TOIDES:s=kn.IDENT,i=hi,d=o++;continue;case Gn.KILL1:o--;break;case Gn.KILL2:o-=2;break;case Gn.URL:u=o++,i=vi;continue;case Gn.URL1:u=++o,i=Ei;continue;case Gn.URL2:u=++o,i=bi;continue;case Gn.ENDURL:s=kn.URL,l=Hn(r.substring(u,o)),o++;break;case Gn.FINURL:o++;break;case Gn.LT_BG:i=li,o++;continue;case Gn.LT_BG_M:i=ci,o++;continue;case Gn.CHKSP:if(o-d<8&&r.substring(d+1,o+1).match(/^[0-9a-fA-F]{0,6}(\r\n|[\n\r])|[ \t]$/)){o++;continue}case Gn.TERMURL:s=kn.URL,l=Hn(r.substring(u,o)),o++,i=Ci;continue;case Gn.CHKPOSN:if(++o-d<9&&r.substring(d+1,o).match(/^[0-9a-fA-F]{0,6}(\r\n|[\n\r])$/))continue;s=kn.INVALID,l="E_CSS_UNEXPECTED_NEWLINE",i=jn;break;case Gn.CHKPOSS:if(o-d<9&&r.substring(d+1,o+1).match(/^[0-9a-fA-F]{0,6}[ \t]$/)){o++;continue}l=Hn(r.substring(u,o));break;case Gn.URLESC:d=o++;continue;case Gn.IDESCH:o++,i=Yn;continue;default:if(i!==jn){s=kn.INVALID,l="E_CSS_UNEXPECTED_STATE";break}u=o,s=kn.EOF}if(f.type=s,f.precededBySpace=h,f.num=c,f.text=l,f.position=u,++t>=e)break;i=jn,h=!1,f=a[t&n]}this.position=o,this.tail=t&n},t}(),wi=null,Di=null;function Si(){return wi}function Ni(t){if(!wi)throw new Error("E_TASK_NO_CONTEXT");wi.name||(wi.name=t);var e=wi,n=new ki(e,e.top,t);return e.top=n,n.state=Jn.ACTIVE,n}function Ti(t){return new Oi(t)}function Ai(t,e,n){var i=Ni(t);i.handler=n;try{e(i)}catch(t){i.task.raise(t,i)}return i.result()}!function(t){t[t.INIT=0]="INIT",t[t.ACTIVE=1]="ACTIVE",t[t.FINISHED=2]="FINISHED",t[t.DEAD=3]="DEAD"}(Jn||(Jn={}));var xi=function(){function t(){}var e=t.prototype;return e.currentTime=function(){return(new Date).valueOf()},e.setTimeout=function(t){function e(e,n){return t.apply(this,arguments)}return e.toString=function(){return t.toString()},e}((function(t,e){return setTimeout(t,e)})),e.clearTimeout=function(t){function e(e){return t.apply(this,arguments)}return e.toString=function(){return t.toString()},e}((function(t){clearTimeout(t)})),t}(),Ii=function(){function t(t){this.timer=t,this.timeout=1,this.slice=25,this.sliceOverTime=0,this.wakeupTime=null,this.timeoutToken=null,this.inTimeSlice=!1,this.order=0,this.queue=new Y,Di||(Di=this)}var e=t.prototype;return e.setSlice=function(t){this.slice=t},e.setTimeout=function(t){this.timeout=t},e.isTimeSliceOver=function(){return this.timer.currentTime()>=this.sliceOverTime},e.arm=function(){var t=this;if(!this.inTimeSlice){var e=this.queue.peek().scheduledTime,n=this.timer.currentTime();if(null!=this.timeoutToken){if(n+this.timeout>this.wakeupTime)return;this.timer.clearTimeout(this.timeoutToken)}var i=e-n;i<=this.timeout&&(i=this.timeout),this.wakeupTime=n+i,this.timeoutToken=this.timer.setTimeout((function(){t.timeoutToken=null,t.doTimeSlice()}),i)}},e.schedule=function(t,e){var n=t,i=this.timer.currentTime();n.order=this.order++,n.scheduledTime=i+(e||0),this.queue.add(n),this.arm()},e.doTimeSlice=function(){null!=this.timeoutToken&&(this.timer.clearTimeout(this.timeoutToken),this.timeoutToken=null),this.inTimeSlice=!0;try{var t=this.timer.currentTime();for(this.sliceOverTime=t+this.slice;this.queue.length();){var e=this.queue.peek();if(e.scheduledTime>t)break;if(this.queue.remove(),e.canceled||e.resumeInternal(),(t=this.timer.currentTime())>=this.sliceOverTime)break}}catch(t){f.error(t)}this.inTimeSlice=!1,this.queue.length()&&this.arm()},e.run=function(t,e){var n=new Pi(this,e||"");n.top=new ki(n,null,"bootstrap"),n.top.state=Jn.ACTIVE,n.top.then((function(){var e=function(){n.running=!1;for(var t,e=_(n.callbacks);!(t=e()).done;){var i=t.value;try{i()}catch(t){f.error(t)}}};try{t().then((function(t){n.result=t,e()}))}catch(t){n.raise(t),e()}}));var i=wi;return wi=n,this.schedule(n.top.suspend("bootstrap")),wi=i,n},t}(),Fi=function(){function t(t){this.task=t,this.scheduledTime=0,this.order=0,this.result=null,this.canceled=!1}var e=t.prototype;return e.compare=function(t){return t.scheduledTime-this.scheduledTime||t.order-this.order},e.getTask=function(){return this.task},e.schedule=function(t,e){this.result=t,this.task.scheduler.schedule(this,e)},e.resumeInternal=function(){var t=this.task;if(this.task=null,t&&t.continuation==this){t.continuation=null;var e=wi;return wi=t,t.top.finish(this.result),wi=e,!0}return!1},e.cancel=function(){this.canceled=!0},t}(),Pi=function(){function t(t,e){this.scheduler=t,this.name=e,this.callbacks=[],this.exception=null,this.running=!0,this.result=null,this.waitTarget=null,this.top=null,this.continuation=null}var e=t.prototype;return e.getName=function(){return this.name},e.interrupt=function(t){if(this.raise(t||new Error("E_TASK_INTERRUPT")),this!==wi&&this.continuation){this.continuation.cancel();var e=new Fi(this);this.waitTarget="interrupt",this.continuation=e,this.scheduler.schedule(e)}},e.getScheduler=function(){return this.scheduler},e.isRunning=function(){return this.running},e.whenDone=function(t){this.callbacks.push(t)},e.join=function(){var t=this,e=Ni("Task.join");if(this.running){var n=e.suspend(this);this.whenDone((function(){n.schedule(t.result)}))}else e.finish(this.result);return e.result()},e.unwind=function(){for(;this.top&&!this.top.handler;)this.top=this.top.parent;if(this.top&&this.top.handler&&this.exception){var t=this.exception;this.exception=null,this.top.handler(this.top,t)}else this.exception&&f.error(this.exception,"Unhandled exception in task",this.name)},e.raise=function(t,e){if(this.fillStack(t),e){for(var n=this.top;n&&n!=e;)n=n.parent;n==e&&(this.top=n)}this.exception=t,this.unwind()},e.fillStack=function(t){var e=t.frameTrace;if(!e){e=t.stack?t.stack+"\n\t---- async ---\n":"";for(var n=this.top;n;n=n.parent)e+="\t",e+=n.getName(),e+="\n";t.frameTrace=e}},t}(),Oi=function(){function t(t){this.value=t}var e=t.prototype;return e.then=function(t){t(this.value)},e.thenAsync=function(t){return t(this.value)},e.thenReturn=function(e){return new t(e)},e.thenFinish=function(t){t.finish(this.value)},e.isPending=function(){return!1},e.get=function(){return this.value},t}(),Ri=function(){function t(t){this.frame=t}var e=t.prototype;return e.then=function(t){this.frame.then(t)},e.thenAsync=function(t){if(this.isPending()){var e=new ki(this.frame.task,this.frame.parent,"AsyncResult.thenAsync");return e.state=Jn.ACTIVE,this.frame.parent=e,this.frame.then((function(n){t(n).then((function(t){e.finish(t)}))})),e.result()}return t(this.frame.res)},e.thenReturn=function(t){return this.isPending()?this.thenAsync((function(){return new Oi(t)})):new Oi(t)},e.thenFinish=function(t){this.isPending()?this.then((function(e){t.finish(e)})):t.finish(this.frame.res)},e.isPending=function(){return this.frame.state==Jn.ACTIVE},e.get=function(){if(this.isPending())throw new Error("Result is pending");return this.frame.res},t}(),ki=function(){function t(t,e,n){this.task=t,this.parent=e,this.name=n,this.res=null,this.callback=null,this.handler=null,this.state=Jn.INIT}var e=t.prototype;return e.checkEnvironment=function(){if(!wi)throw new Error("F_TASK_NO_CONTEXT");if(this!==wi.top)throw new Error("F_TASK_NOT_TOP_FRAME")},e.result=function(){return new Ri(this)},e.finish=function(t){this.checkEnvironment(),wi&&!wi.exception&&(this.res=t),this.state=Jn.FINISHED;var e=this.parent;if(wi&&(wi.top=e),this.callback){try{this.callback(t)}catch(t){this.task.raise(t,e)}this.state=Jn.DEAD}},e.getTask=function(){return this.task},e.getName=function(){return this.name},e.getScheduler=function(){return this.task.scheduler},e.then=function(t){switch(this.state){case Jn.ACTIVE:if(this.callback)throw new Error("F_TASK_FRAME_ALREADY_HAS_CALLBACK");this.callback=t;break;case Jn.FINISHED:var e=this.task,n=this.parent;try{t(this.res),this.state=Jn.DEAD}catch(t){this.state=Jn.DEAD,e.raise(t,n)}break;case Jn.DEAD:throw new Error("F_TASK_DEAD_FRAME");default:throw new Error("F_TASK_UNEXPECTED_FRAME_STATE "+this.state)}},e.timeSlice=function(){var t=Ni("Frame.timeSlice");return t.getScheduler().isTimeSliceOver()?(f.debug("-- time slice --"),t.suspend().schedule(!0)):t.finish(!0),t.result()},e.sleep=function(t){var e=Ni("Frame.sleep");return e.suspend().schedule(!0,t),e.result()},e.loop=function(t){var e=Ni("Frame.loop");return function n(i){try{for(;i;){var r=t();if(r.isPending())return void r.then(n);r.then((function(t){i=t}))}e.finish(!0)}catch(t){e.task.raise(t,e)}}(!0),e.result()},e.loopWithFrame=function(t){var e=wi;if(!e)throw new Error("E_TASK_NO_CONTEXT");return this.loop((function(){var n;do{var i=new Li(e,e.top);e.top=i,i.state=Jn.ACTIVE,t(i),n=i.result()}while(!n.isPending()&&n.get());return n}))},e.suspend=function(t){if(this.checkEnvironment(),this.task.continuation)throw new Error("E_TASK_ALREADY_SUSPENDED");var e=new Fi(this.task);return this.task.continuation=e,wi=null,this.task.waitTarget=t||null,e},t}(),Li=function(t){function e(e,n){return t.call(this,e,n,"loop")||this}I(e,t);var n=e.prototype;return n.continueLoop=function(){this.finish(!0)},n.breakLoop=function(){this.finish(!1)},e}(ki),Bi=function(){function t(t,e){this.fetch=t,this.arrived=!1,this.resource=null,this.task=null,this.piggybacks=[],this.name=e}var e=t.prototype;return e.start=function(){var t=this;this.task||(this.task=Si().getScheduler().run((function(){var e=Ni("Fetcher.run");return t.fetch().then((function(n){var i=t.piggybacks;if(t.arrived=!0,t.resource=n,t.task=null,t.piggybacks=[],i)for(var r=0;r<i.length;r++)try{i[r](n)}catch(t){f.error(t,"Error:")}e.finish(n)})),e.result()}),this.name))},e.piggyback=function(t){this.arrived?t(this.resource):this.piggybacks.push(t)},e.get=function(){return this.arrived?Ti(this.resource):(this.start(),this.task.join())},e.hasArrived=function(){return this.arrived},t}(),_i=function(t){if(0==t.length)return Ti(!0);if(1==t.length)return t[0].get().thenReturn(!0);var e=Ni("waitForFetches"),n=0;return e.loop((function(){for(;n<t.length;){var e=t[n++];if(!e.hasArrived())return e.get().thenReturn(!0)}return Ti(!1)})).then((function(){e.finish(!0)})),e.result()};function Mi(t,e){var n=null,i=null;"img"==t.localName&&(n=t.getAttribute("width"),i=t.getAttribute("height"));var r=new Bi((function(){var r=Ni("loadImage"),o=r.suspend(t),a=!1,s=function(e){a||(a=!0,"img"==t.localName&&(n||t.removeAttribute("width"),i||t.removeAttribute("height")),o.schedule(e?e.type:"timeout"))};return t.addEventListener("load",s,!1),t.addEventListener("error",s,!1),t.addEventListener("abort",s,!1),t.namespaceURI==W.SVG?(t.setAttributeNS(W.XLINK,"xlink:href",e),setTimeout(s,300)):t.src=e,r.result()}),"loadElement "+e);return r.start(),r}var Ui,Vi='\n@media screen {\n  [data-vivliostyle-viewer-viewport] {\n    background: #aaaaaa;\n  }\n\n  [data-vivliostyle-page-container] {\n    background: white;\n    z-index: 0;\n  }\n\n  [data-vivliostyle-viewer-viewport] {\n    display: -webkit-flex;\n    display: flex;\n    overflow: auto;\n    position: relative;\n  }\n\n  [data-vivliostyle-outer-zoom-box] {\n    margin: auto;\n    overflow: hidden;\n    -webkit-flex: none;\n    flex: none;\n  }\n\n  [data-vivliostyle-viewer-viewport] [data-vivliostyle-spread-container] {\n    display: -webkit-flex;\n    display: flex;\n    -webkit-flex: none;\n    flex: none;\n    -webkit-justify-content: center;\n    justify-content: center;\n    -moz-transform-origin: left top;\n    -ms-transform-origin: left top;\n    -webkit-transform-origin: left top;\n    transform-origin: left top;\n  }\n\n  [data-vivliostyle-viewer-viewport][data-vivliostyle-page-progression="ltr"]\n    [data-vivliostyle-spread-container] {\n    -webkit-flex-direction: row;\n    flex-direction: row;\n  }\n\n  [data-vivliostyle-viewer-viewport][data-vivliostyle-page-progression="rtl"]\n    [data-vivliostyle-spread-container] {\n    -webkit-flex-direction: row-reverse;\n    flex-direction: row-reverse;\n  }\n\n  [data-vivliostyle-viewer-viewport] [data-vivliostyle-page-container] {\n    margin: 0 auto;\n    -webkit-flex: none;\n    flex: none;\n    transform-origin: center top;\n  }\n\n  [data-vivliostyle-viewer-viewport][data-vivliostyle-spread-view="true"]\n    [data-vivliostyle-page-container][data-vivliostyle-page-side="left"] {\n    margin-right: 1px;\n    transform-origin: right top;\n  }\n\n  [data-vivliostyle-viewer-viewport][data-vivliostyle-spread-view="true"]\n    [data-vivliostyle-page-container][data-vivliostyle-page-side="right"] {\n    margin-left: 1px;\n    transform-origin: left top;\n  }\n\n  [data-vivliostyle-viewer-viewport][data-vivliostyle-spread-view="true"]\n    [data-vivliostyle-page-container][data-vivliostyle-unpaired-page="true"] {\n    margin-left: auto;\n    margin-right: auto;\n    transform-origin: center top;\n  }\n}\n',zi="\n[data-vivliostyle-layout-box] {\n  position: absolute;\n  left: 0;\n  top: 0;\n  right: 0;\n  bottom: 0;\n  overflow: hidden;\n  z-index: -1;\n}\n\n[data-vivliostyle-debug] [data-vivliostyle-layout-box] {\n  right: auto;\n  bottom: auto;\n  overflow: visible;\n  z-index: auto;\n}\n\n[data-vivliostyle-page-container] {\n  position: relative;\n  overflow: hidden;\n}\n\n[data-vivliostyle-bleed-box] {\n  position: absolute;\n  overflow: hidden;\n  max-width: 100%;\n  max-height: 100%;\n  box-sizing: border-box;\n}\n\n[data-vivliostyle-page-box] ~ [data-vivliostyle-page-box] {\n  display: none;\n}\n\n[data-vivliostyle-toc-box] {\n  position: absolute;\n  left: 3px;\n  top: 3px;\n  overflow: scroll;\n  overflow-x: hidden;\n  background: rgba(248, 248, 248, 0.9);\n  border-radius: 2px;\n  box-shadow: 1px 1px 2px rgba(0, 0, 0, 0.4);\n}\n\n@media print {\n  [data-vivliostyle-toc-box] {\n    display: none;\n  }\n\n  [data-vivliostyle-outer-zoom-box],\n  [data-vivliostyle-spread-container] {\n    width: 100% !important;\n    height: 100% !important;\n  }\n\n  [data-vivliostyle-spread-container],\n  [data-vivliostyle-page-container] {\n    -moz-transform: none !important;\n    -ms-transform: none !important;\n    -webkit-transform: none !important;\n    transform: none !important;\n  }\n\n  [data-vivliostyle-page-container] {\n    display: block !important;\n    max-width: 100%;\n    height: 100% !important;\n    max-height: 100%;\n  }\n\n  /* Workaround for Chrome printing problem */\n  /* [data-vivliostyle-page-box] {\n        padding-bottom: 0 !important;\n        overflow: visible !important;\n    } */\n  [data-vivliostyle-bleed-box] > div > div::before {\n    display: block;\n    content: \"\";\n    padding-top: 0.015625px;\n    margin-bottom: -0.015625px;\n  }\n\n  /* Gecko-only hack, see https://bugzilla.mozilla.org/show_bug.cgi?id=267029#c17 */\n  @-moz-document regexp('.*') {\n    [data-vivliostyle-page-container]:nth-last-child(n + 2) {\n      top: -1px;\n      margin-top: 1px;\n      margin-bottom: -1px;\n    }\n  }\n}\n",Hi="\n/*\n * Copyright 2013 Google, Inc.\n * Copyright 2015 Trim-marks Inc.\n * Copyright 2019 Vivliostyle Foundation\n *\n * CSS property validation.\n */\nNUM = POS_NUM | ZERO | NEGATIVE;\nNNEG_NUM = POS_NUM | ZERO;\nINT = POS_INT | ZERO | NEGATIVE;\nNNEG_INT = POS_INT | ZERO;\nPERCENTAGE = POS_PERCENTAGE | ZERO | NEGATIVE;\nSTRICT_PERCENTAGE = POS_PERCENTAGE | ZERO_PERCENTAGE | NEGATIVE;\nNNEG_PERCENTAGE = POS_PERCENTAGE | ZERO;\nLENGTH = POS_LENGTH | ZERO | NEGATIVE;\nNNEG_LENGTH = POS_LENGTH | ZERO | NEGATIVE;\nPLENGTH = LENGTH | PERCENTAGE;\nPPLENGTH = POS_LENGTH | ZERO | POS_PERCENTAGE;\nALENGTH = LENGTH | auto;\nAPLENGTH = PLENGTH | auto;\nPAPLENGTH = PPLENGTH | auto;\nANGLE = POS_ANGLE | ZERO | NEGATIVE;\nLENGTH_OR_NUM = LENGTH | NUM;\nANGLE_OR_NUM = ANGLE | NUM;\nSCOLOR = HASHCOLOR | aliceblue: #F0F8FF | antiquewhite: #FAEBD7 | aqua: #00FFFF | aquamarine: #7FFFD4 | azure: #F0FFFF |\n    beige: #F5F5DC | bisque: #FFE4C4 | black: #000000 | blanchedalmond: #FFEBCD | blue: #0000FF | blueviolet: #8A2BE2 | brown: #A52A2A |\n    burlywood: #DEB887 | cadetblue: #5F9EA0 | chartreuse: #7FFF00 | chocolate: #D2691E | coral: #FF7F50 | cornflowerblue: #6495ED |\n    cornsilk: #FFF8DC | crimson: #DC143C | cyan: #00FFFF | darkblue: #00008B | darkcyan: #008B8B | darkgoldenrod: #B8860B |\n    darkgray: #A9A9A9 | darkgreen: #006400 | darkgrey: #A9A9A9 | darkkhaki: #BDB76B | darkmagenta: #8B008B | darkolivegreen: #556B2F |\n    darkorange: #FF8C00 | darkorchid: #9932CC | darkred: #8B0000 | darksalmon: #E9967A | darkseagreen: #8FBC8F | darkslateblue: #483D8B |\n    darkslategray: #2F4F4F | darkslategrey: #2F4F4F | darkturquoise: #00CED1 | darkviolet: #9400D3 | deeppink: #FF1493 |\n    deepskyblue: #00BFFF | dimgray: #696969 | dimgrey: #696969 | dodgerblue: #1E90FF | firebrick: #B22222 | floralwhite: #FFFAF0 |\n    forestgreen: #228B22 | fuchsia: #FF00FF | gainsboro: #DCDCDC | ghostwhite: #F8F8FF | gold: #FFD700 | goldenrod: #DAA520 |\n    gray: #808080 | green: #008000 | greenyellow: #ADFF2F | grey: #808080 | honeydew: #F0FFF0 | hotpink: #FF69B4 | indianred: #CD5C5C |\n    indigo: #4B0082 | ivory: #FFFFF0 | khaki: #F0E68C | lavender: #E6E6FA | lavenderblush: #FFF0F5 | lawngreen: #7CFC00 |\n    lemonchiffon: #FFFACD | lightblue: #ADD8E6 | lightcoral: #F08080 | lightcyan: #E0FFFF | lightgoldenrodyellow: #FAFAD2 |\n    lightgray: #D3D3D3 | lightgreen: #90EE90 | lightgrey: #D3D3D3 | lightpink: #FFB6C1 | lightsalmon: #FFA07A | lightseagreen: #20B2AA |\n    lightskyblue: #87CEFA | lightslategray: #778899 | lightslategrey: #778899 | lightsteelblue: #B0C4DE | lightyellow: #FFFFE0 |\n    lime: #00FF00 | limegreen: #32CD32 | linen: #FAF0E6 | magenta: #FF00FF | maroon: #800000 | mediumaquamarine: #66CDAA |\n    mediumblue: #0000CD | mediumorchid: #BA55D3 | mediumpurple: #9370DB | mediumseagreen: #3CB371 | mediumslateblue: #7B68EE |\n    mediumspringgreen: #00FA9A | mediumturquoise: #48D1CC | mediumvioletred: #C71585 | midnightblue: #191970 | mintcream: #F5FFFA |\n    mistyrose: #FFE4E1 | moccasin: #FFE4B5 | navajowhite: #FFDEAD | navy: #000080 | oldlace: #FDF5E6 | olive: #808000 |\n    olivedrab: #6B8E23 | orange: #FFA500 | orangered: #FF4500 | orchid: #DA70D6 | palegoldenrod: #EEE8AA | palegreen: #98FB98 |\n    paleturquoise: #AFEEEE | palevioletred: #DB7093 | papayawhip: #FFEFD5 | peachpuff: #FFDAB9 | peru: #CD853F | pink: #FFC0CB |\n    plum: #DDA0DD | powderblue: #B0E0E6 | purple: #800080 | rebeccapurple: #663399 | red: #FF0000 | rosybrown: #BC8F8F | royalblue: #4169E1 |\n    saddlebrown: #8B4513 | salmon: #FA8072 | sandybrown: #F4A460 | seagreen: #2E8B57 | seashell: #FFF5EE | sienna: #A0522D |\n    silver: #C0C0C0 | skyblue: #87CEEB | slateblue: #6A5ACD | slategray: #708090 | slategrey: #708090 | snow: #FFFAFA |\n    springgreen: #00FF7F | steelblue: #4682B4 | tan: #D2B48C | teal: #008080 | thistle: #D8BFD8 | tomato: #FF6347 |\n    turquoise: #40E0D0 | violet: #EE82EE | wheat: #F5DEB3 | white: #FFFFFF | whitesmoke: #F5F5F5 | yellow: #FFFF00 |\n    yellowgreen: #9ACD32 | transparent | currentcolor;\nRGBCOLOR = rgb(INT{3}) | rgb(STRICT_PERCENTAGE{3});\nRGBACOLOR = rgba(NUM{4}) | rgba(STRICT_PERCENTAGE{3} NUM);\nHSLCOLOR = hsl(NUM PERCENTAGE{2});\nHSLACOLOR = hsl(NUM PERCENTAGE{2} NUM);\nCOLOR = SCOLOR | RGBCOLOR | RGBACOLOR | HSLCOLOR | HSLACOLOR;\nBG_POSITION_TERM = PLENGTH | left | center | right | top | bottom;\nSIDE_OR_CORNER =  [left | right] || [top | bottom];\nCOLOR_STOP = SPACE(COLOR [PERCENTAGE | LENGTH]?);\nLINEAR_GRADIENT = linear-gradient([ANGLE | SPACE(to SIDE_OR_CORNER)]? COLOR_STOP+) |\n                  repeating-linear-gradient([ANGLE | SPACE(to SIDE_OR_CORNER)]? COLOR_STOP+) |;\nGRADIENT_EXTENT = closest-corner | closest-side | farthest-corner | farthest-side;\nGRADIENT_POSITION = at BG_POSITION_TERM{1,4};\nGRADIENT_SHAPE = SPACE(circle LENGTH? GRADIENT_POSITION?) | SPACE(ellipse PLENGTH{2}? GRADIENT_POSITION?)| SPACE([circle | ellipse] GRADIENT_EXTENT? GRADIENT_POSITION?);\nRADIAL_GRADIENT = radial-gradient([GRADIENT_SHAPE | SPACE(GRADIENT_POSITION)]? COLOR_STOP+) |\n                  repeating-radial-gradient([GRADIENT_SHAPE | SPACE(GRADIENT_POSITION)]? COLOR_STOP+);\nURI_OR_NONE = URI | none;\nIMAGE =  URI | LINEAR_GRADIENT | RADIAL_GRADIENT | none;\nazimuth = ANGLE | [[ left-side | far-left | left | center-left | center | center-right | right | far-right | right-side ] || behind ] | leftwards | rightwards;\nbackground-attachment = COMMA( [scroll | fixed | local]+ );\nbackground-color = COLOR;\nbackground-image = COMMA( IMAGE+ );\nbackground-position = COMMA( SPACE(BG_POSITION_TERM{1,4})+ ); /* relaxed */\nbackground-repeat = COMMA( [repeat | repeat-x | repeat-y | no-repeat]+ );\nborder-collapse = collapse | separate;\nBORDER_SIDE_COLOR = COLOR;\nBORDER_SIDE_STYLE = none | hidden | dotted | dashed | solid | double | groove | ridge | inset | outset;\nBORDER_SIDE_WIDTH = thin: 1px | medium: 3px | thick: 5px | NNEG_LENGTH;\nborder-spacing = LENGTH LENGTH?;\nborder-top-color = BORDER_SIDE_COLOR;\nborder-right-color = BORDER_SIDE_COLOR;\nborder-bottom-color = BORDER_SIDE_COLOR;\nborder-left-color = BORDER_SIDE_COLOR;\nborder-top-style = BORDER_SIDE_STYLE;\nborder-right-style = BORDER_SIDE_STYLE;\nborder-bottom-style = BORDER_SIDE_STYLE;\nborder-left-style = BORDER_SIDE_STYLE;\nborder-top-width = BORDER_SIDE_WIDTH;\nborder-right-width = BORDER_SIDE_WIDTH;\nborder-bottom-width = BORDER_SIDE_WIDTH;\nborder-left-width = BORDER_SIDE_WIDTH;\nBORDER_RADIUS = PLENGTH{1,2};\nborder-top-left-radius = BORDER_RADIUS;\nborder-top-right-radius = BORDER_RADIUS;\nborder-bottom-right-radius = BORDER_RADIUS;\nborder-bottom-left-radius = BORDER_RADIUS;\nborder-image-source = IMAGE;\nborder-image-slice = [NUM | PERCENTAGE]{1,4} || fill; /* relaxed */\nborder-image-width = [NUM | PLENGTH | auto]{1,4};\nborder-image-outset = [NUM | LENGTH]{1,4};\nborder-image-repeat = [ stretch | repeat | round | space ]{1,2};\nbottom = APLENGTH;\ncaption-side = top | bottom;\nclear = none | left | right | top | bottom | both | all | same;\nclip = rect(ALENGTH{4}) | rect(SPACE(ALENGTH{4})) | auto;\ncolor = COLOR;\nLIST_STYLE_TYPE = disc | circle | square | decimal | decimal-leading-zero | lower-roman |\n    upper-roman | lower-greek | lower-latin | upper-latin | armenian | georgian | lower-alpha |\n    upper-alpha | russian | upper-russian | lower-russian | cjk-ideographic | trad-chinese-informal |\n    hebrew | none;\nTYPE_OR_UNIT_IN_ATTR = string | color | url | integer | number | length | angle | time | frequency;\nATTR = attr(SPACE(IDENT TYPE_OR_UNIT_IN_ATTR?) [ STRING | IDENT | COLOR | INT | NUM | PLENGTH | ANGLE | POS_TIME | FREQUENCY]?);\nCONTENT_LIST = [ STRING | URI | counter(IDENT LIST_STYLE_TYPE?) |\n    counters(IDENT STRING LIST_STYLE_TYPE?) | ATTR |\n    target-counter([ STRING | URI ] IDENT LIST_STYLE_TYPE?) |\n    target-counter(ATTR IDENT LIST_STYLE_TYPE?) |\n    target-counters([ STRING | URI ] IDENT STRING LIST_STYLE_TYPE?) |\n    target-counters(ATTR IDENT STRING LIST_STYLE_TYPE?) |\n    open-quote | close-quote | no-open-quote | no-close-quote |\n    content([ text | before | after | first-letter ]?) |\n    string(IDENT [first | start | last | first-except]?) ]+;\nCONTENT = normal | none | CONTENT_LIST;\ncontent = CONTENT;\nCOUNTER = [ IDENT INT? ]+ | none;\ncounter-increment = COUNTER;\ncounter-reset = COUNTER;\ncounter-set = COUNTER;\ncue-after = URI_OR_NONE;\ncue-before = URI_OR_NONE;\ncursor = COMMA(URI* [ auto | crosshair | default | pointer | move | e-resize | ne-resize | nw-resize |\n    n-resize | se-resize | sw-resize | s-resize | w-resize | text | wait | help | progress ]);\ndirection = ltr | rtl;\ndisplay = inline | block | list-item | inline-block | table | inline-table | table-row-group |\n    table-header-group | table-footer-group | table-row | table-column-group | table-column |\n    table-cell | table-caption | none | oeb-page-head | oeb-page-foot | flex | inline-flex |\n    ruby | ruby-base | ruby-text | ruby-base-container | ruby-text-container | run-in | compact | marker;\nelevation = ANGLE | below | level | above | higher | lower;\nempty-cells = show | hide;\nFAMILY = SPACE(IDENT+) | STRING;\nFAMILY_LIST = COMMA( FAMILY+ );\nfont-family = FAMILY_LIST;\nfont-size = xx-small | x-small | small | medium | large | x-large | xx-large | larger | smaller | PPLENGTH | POS_NUM;\nfont-style = normal | italic | oblique;\nfont-variant = normal | small-caps;\nfont-weight = normal | bold | bolder | lighter | 100 | 200 | 300 | 400 | 500 | 600 | 700 | 800 | 900;\nheight = PAPLENGTH | POS_NUM ;\nleft = APLENGTH;\nletter-spacing = normal | LENGTH_OR_NUM;\nline-height = normal | POS_NUM | PPLENGTH;\nlist-style-image = IMAGE;\nlist-style-position = inside | outside;\nlist-style-type = LIST_STYLE_TYPE;\nmargin-right = APLENGTH;\nmargin-left = APLENGTH;\nmargin-top = APLENGTH;\nmargin-bottom = APLENGTH;\nNPLENGTH = none | PLENGTH;\nmax-height = NPLENGTH;\nmax-width = NPLENGTH;\nmin-height = auto | PLENGTH;\nmin-width = auto | PLENGTH;\norphans = POS_INT;\noutline-offset = LENGTH;\noutline-color = COLOR | invert;\noutline-style = BORDER_SIDE_STYLE;\noutline-width = BORDER_SIDE_WIDTH;\noverflow = visible | hidden | scroll | auto;\npadding-right = PPLENGTH;\npadding-left = PPLENGTH;\npadding-top = PPLENGTH;\npadding-bottom = PPLENGTH;\nPAGE_BREAK = auto | always | avoid | left | right | recto | verso;\npage-break-after = PAGE_BREAK;\npage-break-before = PAGE_BREAK;\npage-break-inside = avoid | auto;\nPAUSE = POS_TIME | ZERO | POS_PERCENTAGE;\npause-after = PAUSE;\npause-before = PAUSE;\npitch-range = NUM;\npitch = FREQUENCY | x-low | low | medium | high | x-high;\nplay-during = [URI [ mix || repeat ]?] | auto | none;\nposition = static | relative | absolute | fixed;\nquotes = [STRING STRING]+ | none;\nrichness = NUM;\nright = APLENGTH;\nspeak-header = once | always;\nspeak-numeral = digits | continuous;\nspeak-punctuation = code | none;\nspeech-rate = NUM | x-slow | slow | medium | fast | x-fast | faster | slower;\nstress = NUM;\ntable-layout = auto | fixed;\ntext-align = left | right | center | justify | start | end;\ntext-decoration = none | [ underline || overline || line-through || blink ];\ntext-indent = PLENGTH;\ntext-transform = capitalize | uppercase | lowercase | none;\ntop = APLENGTH;\nvertical-align = baseline | sub | super | top | text-top | middle | bottom | text-bottom | PLENGTH;\nvisibility = visible | hidden | collapse;\nvoice-family = FAMILY_LIST;\nvolume = NUM | PERCENTAGE | silent | x-soft | soft | medium | loud | x-loud;\nwhite-space = normal | pre | nowrap | pre-wrap | pre-line;\nwidows = POS_INT;\nwidth = PAPLENGTH | POS_NUM ;\nword-spacing = normal | LENGTH_OR_NUM;\nz-index = auto | INT;\n\n[epub,moz,ms,webkit]hyphens = auto | manual | none;\n[webkit]hyphenate-character = auto | STRING;\n\n/* css-logical */\nmargin-block-start = APLENGTH;\nmargin-block-end = APLENGTH;\nmargin-inline-start = APLENGTH;\nmargin-inline-end = APLENGTH;\npadding-block-start = APLENGTH;\npadding-block-end = APLENGTH;\npadding-inline-start = APLENGTH;\npadding-inline-end = APLENGTH;\nborder-block-start-color = BORDER_SIDE_COLOR;\nborder-block-end-color = BORDER_SIDE_COLOR;\nborder-inline-start-color = BORDER_SIDE_COLOR;\nborder-inline-end-color = BORDER_SIDE_COLOR;\nborder-block-start-style = BORDER_SIDE_STYLE;\nborder-block-end-style = BORDER_SIDE_STYLE;\nborder-inline-start-style = BORDER_SIDE_STYLE;\nborder-inline-end-style = BORDER_SIDE_STYLE;\nborder-block-start-width = BORDER_SIDE_WIDTH;\nborder-block-end-width = BORDER_SIDE_WIDTH;\nborder-inline-start-width = BORDER_SIDE_WIDTH;\nborder-inline-end-width = BORDER_SIDE_WIDTH;\nblock-start = APLENGTH;\nblock-end = APLENGTH;\ninline-start = APLENGTH;\ninline-end = APLENGTH;\nblock-size = PAPLENGTH | POS_NUM;\ninline-size = PAPLENGTH | POS_NUM;\nmax-block-size = NPLENGTH;\nmax-inline-size = NPLENGTH;\nmin-block-size = auto | PLENGTH;\nmin-inline-size = auto | PLENGTH;\n\nSHAPE = auto | rectangle( PLENGTH{4} ) |  ellipse( PLENGTH{4} ) |  circle( PLENGTH{3} ) |\n    polygon( SPACE(PLENGTH+)+ );\n[epubx]shape-inside = SHAPE;\n[epubx,webkit]shape-outside = SHAPE;\n[epubx,ms]wrap-flow = auto | both | start | end | maximum | clear | around /* epub al */;\n\nTRANSFORM_FUNCTION = matrix(NUM{6}) | translate(PLENGTH{1,2}) | translateX(PLENGTH) | translateY(PLENGTH) |\n scale(NUM{1,2}) | scaleX(NUM) | scaleY(NUM) | rotate(ANGLE) | skewX(ANGLE) | skewY(ANGLE);\n[epub,ms]transform = none | TRANSFORM_FUNCTION+;\n[epub,ms]transform-origin = [[[ top | bottom | left | right] PLENGTH?] | center | PLENGTH]{1,2}; /* relaxed */\n\nBOX = border-box | padding-box | content-box;\nSHADOW = SPACE(inset || LENGTH{2,4} || COLOR); /* relaxed */\n[webkit]background-size = COMMA( SPACE( [PLENGTH | auto ]{1,2} | cover | contain)+ );\n[webkit]background-origin = COMMA( BOX+ );\n[webkit]background-clip = COMMA( BOX+ );\n[webkit]box-shadow = none | COMMA( SHADOW+ );\ntext-shadow = none |  COMMA( SHADOW+ );\n[webkit]box-decoration-break = slice | clone;\nFILTER_FUNCTION = blur(LENGTH) | brightness(NUM | PERCENTAGE) | contrast(NUM | PERCENTAGE) | drop-shadow(SPACE(LENGTH{2,3} COLOR?))\n                | grayscale(NUM | PERCENTAGE) | hue-rotate(ANGLE) | invert(NUM | PERCENTAGE) | opacity(NUM | PERCENTAGE)\n                | saturate(NUM | PERCENTAGE) | sepia(NUM | PERCENTAGE);\nFILTER_FUNCTION_LIST = FILTER_FUNCTION+;\n[webkit]filter = none | FILTER_FUNCTION_LIST;\n\nopacity = NUM;\n\n[moz,webkit]column-width = LENGTH | auto;\n[moz,webkit]column-count = INT | auto;\n[moz,webkit]column-gap = LENGTH | normal;\n[moz,webkit]column-rule-color = COLOR;\n[moz,webkit]column-rule-style = BORDER_SIDE_STYLE;\n[moz,webkit]column-rule-width = BORDER_SIDE_WIDTH;\nBREAK = auto | avoid | avoid-page | page | left | right | recto | verso | avoid-column | column | avoid-region | region;\nbreak-before = BREAK;\nbreak-after = BREAK;\nbreak-inside = auto | avoid | avoid-page | avoid-column | avoid-region;\n[webkit]column-span = none | auto | all;\n[moz]column-fill = auto | balance | balance-all;\n\nsrc = COMMA([SPACE(URI format(STRING+)?) | local(FAMILY)]+); /* for font-face */\n\n[epubx,webkit]flow-from = IDENT;\n[epubx,webkit]flow-into = IDENT;\n[epubx]flow-linger = INT | none;\n[epubx]flow-priority = INT;\n[epubx]flow-options = none | [ exclusive || last || static ];\n[epubx]page = INT | auto;\n[epubx]min-page-width = LENGTH;\n[epubx]min-page-height = LENGTH;\n[epubx]required = true | false;\n[epubx]enabled = true | false;\n[epubx]conflicting-partitions = COMMA(IDENT+);\n[epubx]required-partitions = COMMA(IDENT+);\n[epubx]snap-height = LENGTH | none;\n[epubx]snap-width = LENGTH | none;\n[epubx]flow-consume = all | some;\n[epubx]utilization = NUM;\n[epubx]text-zoom = font-size | scale;\n\n[adapt]template = URI_OR_NONE;\n[adapt]behavior = IDENT;\n\n/* CSS Fonts */\nfont-size-adjust = none | NNEG_NUM;\n[webkit]font-kerning = auto | normal | none;\nfont-variant-east-asian = normal | [[ jis78 | jis83 | jis90 | jis04 | simplified | traditional ] || [ full-width | proportional-width ] || ruby];\nfont-feature-settings = COMMA( normal | SPACE( STRING [ on | off | INT ]? )+ );\nfont-stretch = normal | wider | narrower | ultra-condensed | extra-condensed | condensed | semi-condensed | semi-expanded | expanded | extra-expanded | ultra-expanded;\n\n/* CSS Images */\nimage-resolution = RESOLUTION;\nobject-fit = fill | contain | cover | none | scale-down;\nobject-position = COMMA( SPACE(BG_POSITION_TERM{1,4})+ ); /* relaxed */\n\n/* CSS Paged Media */\nPAGE_SIZE = a5 | a4 | a3 | b5 | b4 | jis-b5 | jis-b4 | letter | legal | ledger;\nbleed = auto | LENGTH;\nmarks = none | [ crop || cross ];\nsize = POS_LENGTH{1,2} | auto | [ PAGE_SIZE || [ portrait | landscape ] ];\n\n/* CSS Page Floats */\nfloat-reference = inline | column | region | page;\nfloat = block-start | block-end | inline-start | inline-end | snap-block | snap-inline | left | right | top | bottom | none | footnote;\nfloat-min-wrap-block = PPLENGTH;\n\n/* CSS Ruby */\nruby-align = start | center | space-between | space-around;\nruby-position = over | under | inter-character;\n\n/* CSS Size Adjust */\n[moz,ms]text-size-adjust = auto | none | POS_PERCENTAGE;\n\n/* CSS Text */\n[ms,webkit]line-break = auto | loose | normal | strict;\noverflow-wrap = normal | break-word;\n[moz]tab-size = NNEG_INT | NNEG_LENGTH;\n[moz,ms]text-align-last = auto | start | end | left | right | center | justify;\n[ms]text-justify = auto | none | inter-word | inter-character | inter-ideograph /* specified in UA stylesheet for IE */;\n[ms]word-break = normal | keep-all | break-all | break-word;\n[ms]word-wrap = normal | break-word;\n\n/* CSS Text Decoration */\n[webkit]text-decoration-color = COLOR;\n[webkit]text-decoration-line = none | [ underline || overline || line-through || blink ];\n[webkit]text-decoration-skip = none | [ objects || spaces || ink || edges || box-decoration ];\n[webkit]text-decoration-style = solid | double | dotted | dashed | wavy;\n[epub,webkit]text-emphasis-color = COLOR;\n[webkit]text-emphasis-position = [ over | under ] [ right | left ];\n[epub,webkit]text-emphasis-style = none | [[ filled | open ] || [ dot | circle | double-circle | triangle | sesame ]] | STRING;\n[ms,webkit]text-underline-position = auto | [ under || [ left | right ]];\n\n/* CSS Transforms */\n[ms,webkit]backface-visibility = visible | hidden;\n\n/* CSS UI */\nbox-sizing = content-box | padding-box | border-box;\n[ms]text-overflow = [clip | ellipsis | STRING]{1,2};\n\n/* CSS Writing Modes */\n[webkit]text-combine = none | horizontal;\n[epub,ms]text-combine-horizontal = none | all | [ digits POS_INT? ]; /* relaxed */\ntext-combine-upright = none | all | [ digits POS_INT? ]; /* relaxed */\n[epub,webkit]text-orientation = mixed | upright | sideways-right | sideways-left | sideways | use-glyph-orientation /* the following values are kept for backward-compatibility */ | vertical-right | rotate-right | rotate-left | rotate-normal | auto;\nunicode-bidi = normal | embed | isolate | bidi-override | isolate-override | plaintext;\n[epub,webkit]writing-mode = horizontal-tb | vertical-rl | lr-tb | rl-tb | tb-rl | lr | rl | tb;\n\n/* CSS Flex box */\nFLEX_BASIS = content | PAPLENGTH;\nflex-direction = row | row-reverse | column | column-reverse;\nflex-wrap = nowrap | wrap | wrap-reverse;\norder = INT;\nflex-grow = NNEG_NUM;\nflex-shrink = NNEG_NUM;\nflex-basis = FLEX_BASIS;\nflex = none | [ [ NNEG_NUM NNEG_NUM? ] || FLEX_BASIS ];\njustify-content = flex-start | flex-end | center | space-between | space-around;\nalign-items = flex-start | flex-end | center | baseline | stretch;\nalign-self = auto | flex-start | flex-end | center | baseline | stretch;\nalign-content = flex-start | flex-end | center | space-between | space-around | stretch;\n\n/* Pointer Events */\n[ms]touch-action = auto | none | [ pan-x || pan-y ] | manipulation;\n\n/* SVG 2 */\nOPACITY_VALUE = NUM | PERCENTAGE;\nDASH_ARRAY = COMMA( SPACE( [ LENGTH | PERCENTAGE | NUM ]+ )+ );\nPAINT = none | child | child(INT) | COLOR | SPACE( URI [none | COLOR]? ) | context-fill | context-stroke;\ncolor-interpolation = auto | sRGB | linearRGB;\ncolor-rendering = auto | optimizeSpeed | optimizeQuality;\nfill = PAINT;\nfill-opacity = OPACITY_VALUE;\nfill-rule = nonzero | evenodd;\nglyph-orientation-vertical = auto | NUM | ANGLE;\nimage-rendering = auto | optimizeSpeed | optimizeQuality | crisp-edges | pixelated;\nmarker-start = none | URI;\nmarker-mid = none | URI;\nmarker-end = none | URI;\npointer-events = bounding-box | visiblePainted | visibleFill | visibleStroke | visible | painted | fill | stroke | all | none;\npaint-order = normal | [ fill || stroke || markers ];\nshape-rendering = auto | optimizeSpeed | crispEdges | geometricPrecision;\nstop-color = COLOR;\nstop-opacity = OPACITY_VALUE;\nstroke = PAINT;\nstroke-dasharray = none | DASH_ARRAY;\nstroke-dashoffset = PERCENTAGE | LENGTH_OR_NUM;\nstroke-linecap = butt | round | square;\nstroke-linejoin = miter | round | bevel;\nstroke-miterlimit = NUM;\nstroke-opacity = OPACITY_VALUE;\nstroke-width = PERCENTAGE | LENGTH_OR_NUM;\ntext-anchor = start | middle | end;\ntext-rendering = auto | optimizeSpeed | optimizeLegibility | geometricPrecision;\nvector-effect = none | SPACE( [ non-scaling-stroke | non-scaling-size | non-rotation | fixed-position ]+ [ viewport | screen ]? );\n\n/* SVG 1.1 */\nalignment-baseline = auto | baseline | before-edge | text-before-edge | middle | central | after-edge | text-after-edge | ideographic | alphabetic | hanging | mathematical;\nbaseline-shift = baseline | sub | super | PERCENTAGE | LENGTH_OR_NUM;\ndominant-baseline = auto | use-script | no-change | reset-size | ideographic | alphabetic | hanging | mathematical | central | middle | text-after-edge | text-before-edge;\nmask = none | URI;\n\n/* css-masking-1 */\nSHAPE_RADIUS = PLENGTH | closest-side | farthest-side;\nFILL_RULE = nonzero | evenodd;\nSHAPE_BOX = BOX | margin-box;\nGEOMETRY_BOX = SHAPE_BOX | fill-box | stroke-box | view-box;\nBASIC_SHAPE =\n    inset( SPACE( PLENGTH{1,4} [ round PLENGTH{1,4} [ SLASH PLENGTH{1,4} ]? ]? ) )\n  | circle(  SPACE( [SHAPE_RADIUS]?    [at BG_POSITION_TERM{1,4}]? ) )\n  | ellipse( SPACE( SHAPE_RADIUS{2}? [at BG_POSITION_TERM{1,4}]? ) )\n  | polygon( FILL_RULE? COMMA( SPACE( PLENGTH{2} )+ )+ );\n[webkit]clip-path = none | URI | [ BASIC_SHAPE || GEOMETRY_BOX ];\nclip-rule = nonzero | evenodd;\n\n/* filters */\nflood-color = COLOR;\nflood-opacity = OPACITY_VALUE;\nlighting-color = COLOR;\n\n/* compositing-1 */\nBLEND_MODE = normal | multiply | screen | overlay | darken | lighten | color-dodge | color-burn | hard-light | soft-light | difference | exclusion | hue | saturation | color | luminosity;\nmix-blend-mode = BLEND_MODE;\nisolation = auto | isolate;\nbackground-blend-mode = COMMA( BLEND_MODE+ );\n\n/* CSS GCPM */\nstring-set = COMMA( SPACE( IDENT CONTENT_LIST )+ | none );\nfootnote-policy = auto | line;\n\n/* CSS Repeated Headers and Footers */\n[viv]repeat-on-break = auto | none | header | footer;\n\nDEFAULTS\n\nbackground-attachment: scroll;\nbackground-color: transparent;\nbackground-image: none;\nbackground-repeat: repeat;\nbackground-position: 0% 0%;\nbackground-clip: border-box;\nbackground-origin: padding-box;\nbackground-size: auto;\nborder-top-color: currentColor;\nborder-right-color: currentColor;\nborder-bottom-color: currentColor;\nborder-left-color: currentColor;\nborder-top-style: none;\nborder-right-style: none;\nborder-bottom-style: none;\nborder-left-style: none;\nborder-top-width: 3px;\nborder-right-width: 3px;\nborder-bottom-width: 3px;\nborder-left-width: 3px;\nborder-top-left-radius: 0;\nborder-top-right-radius: 0;\nborder-bottom-right-radius: 0;\nborder-bottom-left-radius: 0;\nborder-image-source: none;\nborder-image-slice: 100%;\nborder-image-width: 1;\nborder-image-outset: 0;\nborder-image-repeat: stretch;\ncolumn-count: auto;\ncolumn-gap: normal;\ncolumn-width: auto;\ncolumn-rule-color: currentColor;\ncolumn-rule-style: none;\ncolumn-rule-width: 3px;\ncolumn-fill: balance;\noutline-color: currentColor;\noutline-style: none;\noutline-width: 3px;\nflex-direction: row;\nflex-wrap: nowrap;\nfont-family: serif;\nfont-style: normal;\nfont-size: medium;\nfont-variant: normal;\nfont-weight: normal;\nfont-stretch: normal;\nline-height: normal;\nlist-style-image: none;\nlist-style-position: outside;\nlist-style-type: disc;\nmargin-bottom: auto;\nmargin-left: auto;\nmargin-right: auto;\nmargin-top: auto;\npadding-bottom: auto;\npadding-left: auto;\npadding-right: auto;\npadding-top: auto;\ntext-emphasis-color: currentColor;\ntext-emphasis-style: none;\nmarker-start: none;\nmarker-mid: none;\nmarker-end: none;\n\n/* css-logical */\nborder-block-start-color: currentColor;\nborder-block-end-color: currentColor;\nborder-inline-start-color: currentColor;\nborder-inline-end-color: currentColor;\nborder-block-start-style: none;\nborder-block-end-style: none;\nborder-inline-start-style: none;\nborder-inline-end-style: none;\nborder-block-start-width: 3px;\nborder-block-end-width: 3px;\nborder-inline-start-width: 3px;\nborder-inline-end-width: 3px;\n\nSHORTHANDS\n\nbackground = COMMA background-image [background-position [ / background-size ]] background-repeat\n     background-attachment [background-origin background-clip] background-color; /* background-color is a special case, see the code */\nborder-top = border-top-width border-top-style border-top-color;\nborder-right = border-right-width border-right-style border-right-color;\nborder-bottom = border-bottom-width border-bottom-style border-bottom-color;\nborder-left = border-left-width border-left-style border-left-color;\nborder-width = INSETS border-top-width border-right-width border-bottom-width border-left-width;\nborder-style = INSETS border-top-style border-right-style border-bottom-style border-left-style;\nborder-color = INSETS border-top-color border-right-color border-bottom-color border-left-color;\nborder = border-width border-style border-color;\nborder-image = border-image-source border-image-slice [ / border-image-width [ / border-image-outset ] ]\n     border-image-repeat;\nborder-radius = INSETS_SLASH border-top-left-radius border-top-right-radius\n     border-bottom-right-radius border-bottom-left-radius;\n[moz,webkit]columns = column-width column-count;\n[moz,webkit]column-rule = column-rule-width column-rule-style column-rule-color;\nflex-flow = flex-direction flex-wrap;\noeb-column-number = column-count;\noutline = outline-width outline-style outline-color;\nlist-style = list-style-type list-style-position list-style-image;\nmargin = INSETS margin-top margin-right margin-bottom margin-left;\npadding = INSETS padding-top padding-right padding-bottom padding-left;\npause = INSETS pause-before pause-after;\nfont = FONT font-style font-variant font-weight font-stretch /* font-size line-height font-family are special-cased */;\n[epub,webkit]text-emphasis = text-emphasis-style text-emphasis-color;\nmarker = INSETS marker-start marker-mid marker-end;\n\n/* css-logical */\nmargin-block = INSETS margin-block-start margin-block-end;\nmargin-inline = INSETS margin-inline-start margin-inline-end;\npadding-block = INSETS padding-block-start padding-block-end;\npadding-inline = INSETS padding-inline-start padding-inline-end;\nborder-block-width = INSETS border-block-start-width border-block-end-width;\nborder-block-style = INSETS border-block-start-style border-block-end-style;\nborder-block-color = INSETS border-block-start-color border-block-end-color;\nborder-inline-width = INSETS border-inline-start-width border-inline-end-width;\nborder-inline-style = INSETS border-inline-start-style border-inline-end-style;\nborder-inline-color = INSETS border-inline-start-color border-inline-end-color;\nborder-block = border-block-width border-block-style border-block-color;\nborder-inline = border-inline-width border-inline-style border-inline-color;\nborder-block-start = border-block-start-width border-block-start-style border-block-start-color;\nborder-block-end = border-block-end-width border-block-end-style border-block-end-color;\nborder-inline-start = border-inline-start-width border-inline-start-style border-inline-start-color;\nborder-inline-end = border-inline-end-width border-inline-end-style border-inline-end-color;\ninset-block-start = block-start;\ninset-block-end = block-end;\ninset-inline-start = inline-start;\ninset-inline-end = inline-end;\ninset-block = INSETS block-start block-end;\ninset-inline = INSETS inline-start inline-end;\n\n/* old names  */\n[adapt,webkit]margin-before = margin-block-start;\n[adapt,webkit]margin-after = margin-block-end;\n[adapt,webkit]margin-start = margin-inline-start;\n[adapt,webkit]margin-end = margin-inline-end;\n[adapt,webkit]padding-before = padding-block-start;\n[adapt,webkit]padding-after = padding-block-end;\n[adapt,webkit]padding-start = padding-inline-start;\n[adapt,webkit]padding-end = padding-inline-end;\n[adapt,webkit]border-before-color = border-block-start-color;\n[adapt,webkit]border-after-color = border-block-end-color;\n[adapt,webkit]border-start-color = border-inline-start-color;\n[adapt,webkit]border-end-color = border-inline-end-color;\n[adapt,webkit]border-before-style = border-block-start-style;\n[adapt,webkit]border-after-style = border-block-end-style;\n[adapt,webkit]border-start-style = border-inline-start-style;\n[adapt,webkit]border-end-style = border-inline-end-style;\n[adapt,webkit]border-before-width = border-block-start-width;\n[adapt,webkit]border-after-width = border-block-end-width;\n[adapt,webkit]border-start-width = border-inline-start-width;\n[adapt,webkit]border-end-width = border-inline-end-width;\n[adapt,webkit]before = block-start;\n[adapt,webkit]after = block-end;\n[adapt,webkit]start = inline-start;\n[adapt,webkit]end = inline-end;\n\n",Gi='\n<!DOCTYPE html>\n<html xmlns="http://www.w3.org/1999/xhtml" xmlns:s="http://www.pyroxy.com/ns/shadow">\n<head>\n<style><![CDATA[\n\n.footnote-content {\n  float: footnote;\n}\n\n.table-cell-container {\n  display: block;\n}\n\n]]></style>\n</head>\n<body>\n\n<s:template id="footnote"><s:content/><s:include class="footnote-content"/></s:template>\n\n<s:template id="table-cell"><div data-vivliostyle-flow-root="true" class="table-cell-container"><s:content/></div></s:template>\n\n</body>\n</html>',Wi='\n@namespace html "http://www.w3.org/1999/xhtml";\n\n:root {\n  hyphens: -epubx-expr(pref-hyphenate? "auto": "manual");\n}\n:root[data-vivliostyle-epub-spine-properties~="page-spread-left"] {\n  break-before: left;\n}\n:root[data-vivliostyle-epub-spine-properties~="page-spread-right"] {\n  break-before: right;\n}\n\n@-adapt-footnote-area {\n  display: block;\n  margin-block-start: 0.5em;\n  margin-block-end: 0.5em;\n}\n\n@-adapt-footnote-area ::before {\n  display: block;\n  border-block-start-width: 1px;\n  border-block-start-style: solid;\n  border-block-start-color: black;\n  margin-block-end: 0.4em;\n  margin-inline-start: 0;\n  margin-inline-end: 60%;\n}\n\n/* default page master */\n@-epubx-page-master :background-host {\n  @-epubx-partition :layout-host {\n    -epubx-flow-from: body;\n    top: -epubx-expr(header.margin-bottom-edge);\n    bottom: -epubx-expr(page-height - footer.margin-top-edge);\n    left: 0px;\n    right: 0px;\n    column-width: 25em;\n  }\n  @-epubx-partition footer :oeb-page-foot {\n    writing-mode: horizontal-tb;\n    -epubx-flow-from: oeb-page-foot;\n    bottom: 0px;\n    left: 0px;\n    right: 0px;\n  }\n  @-epubx-partition header :oeb-page-head {\n    writing-mode: horizontal-tb;\n    -epubx-flow-from: oeb-page-head;\n    top: 0px;\n    left: 0px;\n    right: 0px;\n  }\n}\n\n@page {\n  @top-left-corner {\n    text-align: right;\n    vertical-align: middle;\n  }\n  @top-left {\n    text-align: left;\n    vertical-align: middle;\n  }\n  @top-center {\n    text-align: center;\n    vertical-align: middle;\n  }\n  @top-right {\n    text-align: right;\n    vertical-align: middle;\n  }\n  @top-right-corner {\n    text-align: left;\n    vertical-align: middle;\n  }\n  @left-top {\n    text-align: center;\n    vertical-align: top;\n  }\n  @left-middle {\n    text-align: center;\n    vertical-align: middle;\n  }\n  @left-bottom {\n    text-align: center;\n    vertical-align: bottom;\n  }\n  @right-top {\n    text-align: center;\n    vertical-align: top;\n  }\n  @right-middle {\n    text-align: center;\n    vertical-align: middle;\n  }\n  @right-bottom {\n    text-align: center;\n    vertical-align: bottom;\n  }\n  @bottom-left-corner {\n    text-align: right;\n    vertical-align: middle;\n  }\n  @bottom-left {\n    text-align: left;\n    vertical-align: middle;\n  }\n  @bottom-center {\n    text-align: center;\n    vertical-align: middle;\n  }\n  @bottom-right {\n    text-align: right;\n    vertical-align: middle;\n  }\n  @bottom-right-corner {\n    text-align: left;\n    vertical-align: middle;\n  }\n}\n\n@media print {\n  @page {\n    margin: 10%;\n  }\n}\n',Xi='\n@namespace html "http://www.w3.org/1999/xhtml";\n\nhtml|html,\nhtml|address,\nhtml|blockquote,\nhtml|body,\nhtml|dd,\nhtml|div,\nhtml|dl,\nhtml|dt,\nhtml|fieldset,\nhtml|form,\nhtml|frame,\nhtml|frameset,\nhtml|h1,\nhtml|h2,\nhtml|h3,\nhtml|h4,\nhtml|h5,\nhtml|h6,\nhtml|noframes,\nhtml|ol,\nhtml|p,\nhtml|ul,\nhtml|center,\nhtml|dir,\nhtml|hr,\nhtml|menu,\nhtml|pre,\nhtml|article,\nhtml|section,\nhtml|nav,\nhtml|aside,\nhtml|hgroup,\nhtml|footer,\nhtml|header,\nhtml|figure,\nhtml|figcaption,\nhtml|main {\n  display: block;\n  unicode-bidi: normal;\n}\nhtml|li {\n  display: list-item;\n}\nhtml|head {\n  display: none !important;\n}\nhtml|table {\n  display: table;\n}\nhtml|tr {\n  display: table-row;\n}\nhtml|thead {\n  display: table-header-group;\n  break-after: avoid;\n}\nhtml|tbody {\n  display: table-row-group;\n}\nhtml|tfoot {\n  display: table-footer-group;\n  break-before: avoid;\n}\nhtml|col {\n  display: table-column;\n}\nhtml|colgroup {\n  display: table-column-group;\n}\nhtml|td,\nhtml|th {\n  display: table-cell;\n}\nhtml|caption {\n  display: table-caption;\n  text-align: center;\n}\nhtml|th {\n  font-weight: bolder;\n  text-align: center;\n}\nhtml|*[hidden],\nhtml|link,\nhtml|style,\nhtml|script {\n  display: none;\n}\nhtml|body {\n  margin: 8px;\n}\nhtml|h1 {\n  font-size: 2em;\n  margin-block-start: 0.67em;\n  margin-block-end: 0.67em;\n  margin-inline-start: 0em;\n  margin-inline-end: 0em;\n}\nhtml|h2 {\n  font-size: 1.5em;\n  margin-block-start: 0.75em;\n  margin-block-end: 0.75em;\n  margin-inline-start: 0em;\n  margin-inline-end: 0em;\n}\nhtml|h3 {\n  font-size: 1.17em;\n  margin-block-start: 0.83em;\n  margin-block-end: 0.83em;\n  margin-inline-start: 0em;\n  margin-inline-end: 0em;\n}\nhtml|h4,\nhtml|p,\nhtml|blockquote,\nhtml|ul,\nhtml|fieldset,\nhtml|form,\nhtml|ol,\nhtml|dl,\nhtml|dir,\nhtml|menu,\nhtml|h5,\nhtml|h6 {\n  margin-block-start: 1em;\n  margin-block-end: 1em;\n  margin-inline-start: 0em;\n  margin-inline-end: 0em;\n}\nhtml|h5 {\n  font-size: 0.83em;\n}\nhtml|h6 {\n  font-size: 0.75em;\n}\nhtml|h1,\nhtml|h2,\nhtml|h3,\nhtml|h4,\nhtml|h5,\nhtml|h6,\nhtml|b,\nhtml|strong {\n  font-weight: bolder;\n}\nhtml|h1,\nhtml|h2,\nhtml|h3,\nhtml|h4,\nhtml|h5,\nhtml|h6 {\n  break-after: avoid;\n}\nhtml|blockquote {\n  margin-block-start: 0px;\n  margin-block-end: 0px;\n  margin-inline-start: 40px;\n  margin-inline-end: 40px;\n}\nhtml|i,\nhtml|cite,\nhtml|em,\nhtml|var,\nhtml|address {\n  font-style: italic;\n}\nhtml|pre,\nhtml|tt,\nhtml|code,\nhtml|kbd,\nhtml|samp {\n  font-family: monospace;\n}\nhtml|pre {\n  white-space: pre;\n}\nhtml|button,\nhtml|textarea,\nhtml|input,\nhtml|select {\n  display: inline-block;\n}\nhtml|big {\n  font-size: 1.17em;\n}\nhtml|small,\nhtml|sub,\nhtml|sup {\n  font-size: 0.83em;\n}\nhtml|sub {\n  vertical-align: sub;\n}\nhtml|sup {\n  vertical-align: super;\n}\nhtml|table {\n  border-spacing: 2px;\n}\nhtml|thead,\nhtml|tbody,\nhtml|tfoot {\n  vertical-align: middle;\n}\n/* for XHTML tables without tbody */\nhtml|table > html|tr {\n  vertical-align: middle;\n}\nhtml|td,\nhtml|th {\n  vertical-align: inherit;\n}\nhtml|s,\nhtml|strike,\nhtml|del {\n  text-decoration: line-through;\n}\nhtml|hr {\n  border: 1px inset;\n}\nhtml|ol,\nhtml|ul,\nhtml|dir,\nhtml|menu,\nhtml|dd {\n  margin: 0px;\n  margin-inline-start: 40px;\n}\nhtml|ol html|ul,\nhtml|ul html|ol,\nhtml|ul html|ul,\nhtml|ol html|ol {\n  margin-block-start: 0;\n  margin-block-end: 0;\n}\nhtml|u,\nhtml|ins {\n  text-decoration: underline;\n}\nhtml|center {\n  text-align: center;\n}\nhtml|q:before {\n  content: open-quote;\n}\nhtml|q:after {\n  content: close-quote;\n}\n\nhtml|audio,\nhtml|video {\n  break-inside: avoid;\n}\n\nhtml|ruby {\n  display: ruby;\n}\nhtml|rp {\n  display: none;\n}\nhtml|rbc {\n  display: ruby-base-container;\n}\nhtml|rtc {\n  display: ruby-text-container;\n}\nhtml|rb {\n  display: ruby-base;\n  white-space: nowrap;\n}\nhtml|rt {\n  display: ruby-text;\n}\nhtml|ruby,\nhtml|rb,\nhtml|rt,\nhtml|rbc,\nhtml|rtc {\n  unicode-bidi: isolate;\n}\n\nhtml|rtc,\nhtml|rt {\n  font-variant-east-asian: ruby;\n  text-emphasis: none;\n  white-space: nowrap;\n  line-height: 1;\n}\n\nhtml|rtc:lang(zh),\nhtml|rt:lang(zh) {\n  ruby-align: center;\n}\n\nhtml|rtc,\nhtml|rt {\n  font-size: 50%;\n}\n\nhtml|rtc:lang(zh-TW),\nhtml|rt:lang(zh-TW) {\n  font-size: 30%;\n}\n\nhtml|rtc > html|rt,\nhtml|rtc > html|rt:lang(zh-TW) {\n  font-size: 100%;\n}\n\n/* Bidi settings */\nhtml|bdo[dir="ltr"] {\n  direction: ltr;\n  unicode-bidi: bidi-override;\n}\nhtml|bdo[dir="rtl"] {\n  direction: rtl;\n  unicode-bidi: bidi-override;\n}\nhtml|*[dir="ltr"] {\n  direction: ltr;\n  unicode-bidi: embed;\n}\nhtml|*[dir="rtl"] {\n  direction: rtl;\n  unicode-bidi: embed;\n}\n\n/*------------------ epub-specific ---------------------*/\n\n@namespace epub "http://www.idpf.org/2007/ops";\n\nhtml|a[epub|type="noteref"] {\n  font-size: 0.75em;\n  vertical-align: super;\n  line-height: 0.01;\n}\n\nhtml|a[epub|type="noteref"]:href-epub-type(footnote) {\n  -adapt-template: url(user-agent.xml#footnote);\n  text-decoration: none;\n}\n\nhtml|aside[epub|type="footnote"] {\n  display: none;\n}\n\nhtml|aside[epub|type="footnote"]:footnote-content {\n  display: block;\n  margin: 0.25em;\n  font-size: 1.2em;\n  line-height: 1.2;\n}\n\nepub|trigger {\n  display: none;\n}\n\nepub|switch {\n  display: inline;\n}\n\nepub|default {\n  display: inline;\n}\n\nepub|case {\n  display: none;\n}\n\nepub|case[required-namespace::supported] {\n  display: inline;\n}\n\nepub|case[required-namespace::supported] ~ epub|case {\n  display: none;\n}\n\nepub|case[required-namespace::supported] ~ epub|default {\n  display: none;\n}\n\n/*--------------- ncx and toc ----------------------*/\n\n@namespace ncx "http://www.daisy.org/z3986/2005/ncx/";\n\nncx|ncx {\n  display: block;\n  padding-top: 10px;\n  padding-bottom: 10px;\n}\n\nncx|content {\n  display: none;\n}\n\nbody > * {\n  -adapt-behavior: body-child;\n}\n\n[role="doc-toc"],\n[role="directory"],\nnav,\n.toc,\n#toc,\n#table-of-contents,\n#contents {\n  -adapt-behavior: toc-root;\n}\n\n[role="doc-toc"] a,\n[role="directory"] a,\nnav a,\n.toc a,\n#toc a,\nncx|navLabel {\n  -adapt-behavior: toc-node-anchor;\n}\n\n[role="doc-toc"] li,\n[role="directory"] li,\nnav li,\n.toc li,\n#toc li,\nncx|navPoint {\n  -adapt-behavior: toc-node;\n}\n\n[role="doc-toc"] li > *:first-child,\n[role="directory"] li > *:first-child,\nnav li > *:first-child,\n.toc li > *:first-child,\n#toc li > *:first-child {\n  -adapt-behavior: toc-node-first-child;\n}\n\n[role="doc-toc"] ol,\n[role="directory"] ol,\nnav ol,\n.toc ol,\n#toc ol,\n[role="doc-toc"] ul,\n[role="directory"] ul,\nnav ul,\n.toc ul,\n#toc ul,\nol[role="doc-toc"],\nol[role="directory"],\nol.toc,\nol#toc,\nul[role="doc-toc"],\nul[role="directory"],\nul.toc,\nul#toc {\n  -adapt-behavior: toc-container;\n}\n';function ji(t,e,n,i,r){var o=Ni("ajax"),a=new XMLHttpRequest,s=o.suspend(a),u={status:0,statusText:"",url:t,contentType:null,responseText:null,responseXML:null,responseBlob:null};a.open(n||"GET",t,!0),e&&(a.responseType=e),a.onreadystatechange=function(){if(4===a.readyState){if(u.status=a.status,u.statusText=a.statusText||404==a.status&&"Not Found"||"",200==u.status||0==u.status)if(e&&e!==Ui.DOCUMENT||!a.responseXML||"parsererror"==a.responseXML.documentElement.localName)if((!e||e===Ui.DOCUMENT)&&a.response instanceof HTMLDocument)u.responseXML=a.response,u.contentType=a.response.contentType;else{var n=a.response;e&&e!==Ui.TEXT||"string"!=typeof n?n?u.responseBlob="string"==typeof n?Ki([n]):n:f.warn("Unexpected empty success response for",t):u.responseText=n;var i=a.getResponseHeader("Content-Type");i&&(u.contentType=i.replace(/(.*);.*$/,"$1"))}else u.responseXML=a.responseXML,u.contentType=a.responseXML.contentType;s.schedule(u)}};try{i?(a.setRequestHeader("Content-Type",r||"text/plain; charset=UTF-8"),a.send(i)):(/^file:|^https?:\/\/[^/]+\.githubusercontent\.com|\.(xhtml|xht|opf)$/i.test(t)?/\/aozorabunko\/[^/]+\/cards\/[^/]+\/files\/[^/.]+\.html$/.test(t)?a.overrideMimeType("text/html; charset=Shift_JIS"):/\.(html|htm)$/i.test(t)?a.overrideMimeType("text/html; charset=UTF-8"):/\.(xhtml|xht|xml|opf)$/i.test(t)?a.overrideMimeType("application/xml; charset=UTF-8"):/\.(txt|css)$/i.test(t)?a.overrideMimeType("text/plain; charset=UTF-8"):a.overrideMimeType("text/html; charset=UTF-8"):/^data:,(<|%3c)/i.test(t)?a.overrideMimeType("text/html; charset=UTF-8"):/^data:,/i.test(t)&&a.overrideMimeType("text/plain; charset=UTF-8"),a.send(null))}catch(e){f.warn(e,"Error fetching "+t),s.schedule(u)}return o.result()}function Ki(t,e){var n=e||"application/octet-stream",i=window.WebKitBlobBuilder||window.MSBlobBuilder;if(i){for(var r=new i,o=0;o<t.length;o++)r.append(t[o]);return r.getBlob(n)}return new Blob(t,{type:n})}!function(t){t.DEFAULT="",t.ARRAYBUFFER="arraybuffer",t.BLOB="blob",t.DOCUMENT="document",t.JSON="json",t.TEXT="text"}(Ui||(Ui={}));var $i,qi=function(){function t(t,e){this.parser=t,this.type=e,this.resources={},this.fetchers={}}var e=t.prototype;return e.load=function(t,e,n){t=z(t);var i=this.resources[t];return void 0!==i?Ti(i):this.fetch(t,e,n).get()},e.fetchInner=function(t,e,n){var i=this,r=Ni("fetch"),o=t.endsWith("?viv-toc-box");o&&(t=t.replace("?viv-toc-box",""));var a=K("user-agent.xml",X),s=!o&&t===a;return s&&(t="data:application/xml,"+encodeURIComponent(Gi)),ji(t,this.type).then((function(u){if(u.status>=400&&e)throw new Error((n||"Failed to fetch required resource: "+t)+" ("+u.status+(u.statusText?" "+u.statusText:"")+")");o?(t+="?viv-toc-box",u.url+="?viv-toc-box"):s&&(u.url=t=a),i.parser(u,i).then((function(e){delete i.fetchers[t],i.resources[t]=e,r.finish(e)}))})),r.result()},e.fetch=function(t,e,n){var i=this;if(t=z(t),this.resources[t])return null;var r=this.fetchers[t];return r||(r=new Bi((function(){return i.fetchInner(t,e,n)}),"Fetch "+t),this.fetchers[t]=r,r.start()),r},e.get=function(t){return this.resources[z(t)]},e.delete=function(t){delete this.resources[z(t)]},t}();function Yi(t,e){var n=t.responseText;return Ti(n?V(n):null)}function Zi(t){var e=parseInt(t,16);if(isNaN(e))throw new Error("E_CSS_COLOR");if(6==t.length)return new ze(e);if(3==t.length)return new ze(e=15&e|(15&e)<<4|(240&e)<<4|(240&e)<<8|(3840&e)<<8|(3840&e)<<12);throw new Error("E_CSS_COLOR")}!function(t){t.USER_AGENT="UA",t.USER="User",t.AUTHOR="Author"}($i||($i={}));var Qi,Ji=function(){function t(t){this.scope=t,this.flavor=$i.AUTHOR}var e=t.prototype;return e.getCurrentToken=function(){return null},e.getScope=function(){return this.scope},e.error=function(t,e){},e.startStylesheet=function(t){this.flavor=t},e.tagSelector=function(t,e){},e.classSelector=function(t){},e.pseudoclassSelector=function(t,e){},e.pseudoelementSelector=function(t,e){},e.idSelector=function(t){},e.attributeSelector=function(t,e,n,i){},e.descendantSelector=function(){},e.childSelector=function(){},e.adjacentSiblingSelector=function(){},e.followingSiblingSelector=function(){},e.nextSelector=function(){},e.startSelectorRule=function(){},e.startFontFaceRule=function(){},e.startFootnoteRule=function(t){},e.startViewportRule=function(){},e.startDefineRule=function(){},e.startRegionRule=function(){},e.startPageRule=function(){},e.startPageMarginBoxRule=function(t){},e.startWhenRule=function(t){},e.startMediaRule=function(t){this.startWhenRule(t)},e.startFlowRule=function(t){},e.startPageTemplateRule=function(){},e.startPageMasterRule=function(t,e,n){},e.startPartitionRule=function(t,e,n){},e.startPartitionGroupRule=function(t,e,n){},e.startRuleBody=function(){},e.property=function(t,e,n){},e.endRule=function(){},e.startFuncWithSelector=function(t){},e.endFuncWithSelector=function(){},e.getImportantSpecificity=function(){switch(this.flavor){case $i.USER_AGENT:return 0;case $i.USER:return 100663296;default:return 83886080}},e.getBaseSpecificity=function(){switch(this.flavor){case $i.USER_AGENT:return 0;case $i.USER:return 16777216;default:return 33554432}},t}(),tr=function(t){function e(){var e;return(e=t.call(this,null)||this).stack=[],e.tokenizer=null,e.slave=null,e}I(e,t);var n=e.prototype;return n.pushHandler=function(t){this.stack.push(this.slave),this.slave=t},n.popHandler=function(){this.slave=this.stack.pop()},n.getCurrentToken=function(){return this.tokenizer?this.tokenizer.token():null},n.getScope=function(){return this.slave.getScope()},n.error=function(t,e){this.slave.error(t,e)},n.errorMsg=function(t,e){f.warn(t)},n.startStylesheet=function(e){t.prototype.startStylesheet.call(this,e),this.stack.length>0&&(this.slave=this.stack[0],this.stack=[]),this.slave.startStylesheet(e)},n.tagSelector=function(t,e){this.slave.tagSelector(t,e)},n.classSelector=function(t){this.slave.classSelector(t)},n.pseudoclassSelector=function(t,e){this.slave.pseudoclassSelector(t,e)},n.pseudoelementSelector=function(t,e){this.slave.pseudoelementSelector(t,e)},n.idSelector=function(t){this.slave.idSelector(t)},n.attributeSelector=function(t,e,n,i){this.slave.attributeSelector(t,e,n,i)},n.descendantSelector=function(){this.slave.descendantSelector()},n.childSelector=function(){this.slave.childSelector()},n.adjacentSiblingSelector=function(){this.slave.adjacentSiblingSelector()},n.followingSiblingSelector=function(){this.slave.followingSiblingSelector()},n.nextSelector=function(){this.slave.nextSelector()},n.startSelectorRule=function(){this.slave.startSelectorRule()},n.startFontFaceRule=function(){this.slave.startFontFaceRule()},n.startFootnoteRule=function(t){this.slave.startFootnoteRule(t)},n.startViewportRule=function(){this.slave.startViewportRule()},n.startDefineRule=function(){this.slave.startDefineRule()},n.startRegionRule=function(){this.slave.startRegionRule()},n.startPageRule=function(){this.slave.startPageRule()},n.startPageMarginBoxRule=function(t){this.slave.startPageMarginBoxRule(t)},n.startWhenRule=function(t){this.slave.startWhenRule(t)},n.startFlowRule=function(t){this.slave.startFlowRule(t)},n.startPageTemplateRule=function(){this.slave.startPageTemplateRule()},n.startPageMasterRule=function(t,e,n){this.slave.startPageMasterRule(t,e,n)},n.startPartitionRule=function(t,e,n){this.slave.startPartitionRule(t,e,n)},n.startPartitionGroupRule=function(t,e,n){this.slave.startPartitionGroupRule(t,e,n)},n.startRuleBody=function(){this.slave.startRuleBody()},n.property=function(t,e,n){this.slave.property(t,e,n)},n.endRule=function(){this.slave.endRule()},n.startFuncWithSelector=function(t){this.slave.startFuncWithSelector(t)},n.endFuncWithSelector=function(){this.slave.endFuncWithSelector()},e}(Ji),er=function(t){function e(e,n,i){var r;return(r=t.call(this,e)||this).owner=n,r.topLevel=i,r.depth=0,n&&(r.flavor=n.flavor),r}I(e,t);var n=e.prototype;return n.getCurrentToken=function(){return this.owner.getCurrentToken()},n.error=function(t,e){this.owner.errorMsg(t,e)},n.startRuleBody=function(){this.depth++},n.endRule=function(){0!=--this.depth||this.topLevel||this.owner.popHandler()},e}(Ji),nr=function(t){function e(e,n,i){return t.call(this,e,n,i)||this}I(e,t);var n=e.prototype;return n.report=function(t){this.error(t,this.getCurrentToken())},n.reportAndSkip=function(t){this.report(t),this.owner.pushHandler(new er(this.scope,this.owner,!1))},n.startSelectorRule=function(){this.reportAndSkip("E_CSS_UNEXPECTED_SELECTOR")},n.startFontFaceRule=function(){this.reportAndSkip("E_CSS_UNEXPECTED_FONT_FACE")},n.startFootnoteRule=function(t){this.reportAndSkip("E_CSS_UNEXPECTED_FOOTNOTE")},n.startViewportRule=function(){this.reportAndSkip("E_CSS_UNEXPECTED_VIEWPORT")},n.startDefineRule=function(){this.reportAndSkip("E_CSS_UNEXPECTED_DEFINE")},n.startRegionRule=function(){this.reportAndSkip("E_CSS_UNEXPECTED_REGION")},n.startPageRule=function(){this.reportAndSkip("E_CSS_UNEXPECTED_PAGE")},n.startWhenRule=function(t){this.reportAndSkip("E_CSS_UNEXPECTED_WHEN")},n.startFlowRule=function(t){this.reportAndSkip("E_CSS_UNEXPECTED_FLOW")},n.startPageTemplateRule=function(){this.reportAndSkip("E_CSS_UNEXPECTED_PAGE_TEMPLATE")},n.startPageMasterRule=function(t,e,n){this.reportAndSkip("E_CSS_UNEXPECTED_PAGE_MASTER")},n.startPartitionRule=function(t,e,n){this.reportAndSkip("E_CSS_UNEXPECTED_PARTITION")},n.startPartitionGroupRule=function(t,e,n){this.reportAndSkip("E_CSS_UNEXPECTED_PARTITION_GROUP")},n.startFuncWithSelector=function(t){this.reportAndSkip("E_CSS_UNEXPECTED_SELECTOR_FUNC")},n.endFuncWithSelector=function(){this.reportAndSkip("E_CSS_UNEXPECTED_END_SELECTOR_FUNC")},n.property=function(t,e,n){this.error("E_CSS_UNEXPECTED_PROPERTY",this.getCurrentToken())},e}(er),ir=[],rr=[],or=[],ar=[],sr=[],ur=[],lr=[],cr=[],hr=[],fr=[],dr=[],pr=[],gr=[];!function(t){t[t.SELECTOR_NAME_1=1]="SELECTOR_NAME_1",t[t.SELECTOR_NAME=2]="SELECTOR_NAME",t[t.SELECTOR_ANY_1=3]="SELECTOR_ANY_1",t[t.SELECTOR_ANY=4]="SELECTOR_ANY",t[t.SELECTOR_ID_1=5]="SELECTOR_ID_1",t[t.SELECTOR_ID=6]="SELECTOR_ID",t[t.SELECTOR_CLASS_1=7]="SELECTOR_CLASS_1",t[t.SELECTOR_CLASS=8]="SELECTOR_CLASS",t[t.SELECTOR_ATTR_1=9]="SELECTOR_ATTR_1",t[t.SELECTOR_ATTR=10]="SELECTOR_ATTR",t[t.SELECTOR_CHILD=11]="SELECTOR_CHILD",t[t.SELECTOR_SIBLING=12]="SELECTOR_SIBLING",t[t.SELECTOR_BODY=13]="SELECTOR_BODY",t[t.SELECTOR_PSEUDOCLASS=14]="SELECTOR_PSEUDOCLASS",t[t.VAL_IDENT=15]="VAL_IDENT",t[t.VAL_HASH=16]="VAL_HASH",t[t.VAL_NUM=17]="VAL_NUM",t[t.VAL_INT=18]="VAL_INT",t[t.VAL_NUMERIC=19]="VAL_NUMERIC",t[t.VAL_STR=20]="VAL_STR",t[t.VAL_URL=21]="VAL_URL",t[t.VAL_COMMA=22]="VAL_COMMA",t[t.VAL_SLASH=23]="VAL_SLASH",t[t.VAL_FUNC=24]="VAL_FUNC",t[t.VAL_C_PAR=25]="VAL_C_PAR",t[t.VAL_END=26]="VAL_END",t[t.RULE_END=27]="RULE_END",t[t.IDENT=28]="IDENT",t[t.SELECTOR_START=29]="SELECTOR_START",t[t.AT=30]="AT",t[t.EXPR_IDENT=31]="EXPR_IDENT",t[t.EXPR_NUM=32]="EXPR_NUM",t[t.EXPR_NUMERIC=33]="EXPR_NUMERIC",t[t.EXPR_STR=34]="EXPR_STR",t[t.EXPR_PARAM=35]="EXPR_PARAM",t[t.EXPR_PREFIX=36]="EXPR_PREFIX",t[t.EXPR_INFIX=37]="EXPR_INFIX",t[t.EXPR_FUNC=38]="EXPR_FUNC",t[t.EXPR_C_PAR=39]="EXPR_C_PAR",t[t.EXPR_O_PAR=40]="EXPR_O_PAR",t[t.SELECTOR_NEXT=41]="SELECTOR_NEXT",t[t.SELECTOR_PSEUDOELEM=42]="SELECTOR_PSEUDOELEM",t[t.EXPR_O_BRC=43]="EXPR_O_BRC",t[t.VAL_FINISH=44]="VAL_FINISH",t[t.EXPR_INFIX_NAME=45]="EXPR_INFIX_NAME",t[t.PROP=46]="PROP",t[t.VAL_BANG=47]="VAL_BANG",t[t.VAL_BRC=48]="VAL_BRC",t[t.EXPR_SEMICOL=49]="EXPR_SEMICOL",t[t.ERROR_PUSH=50]="ERROR_PUSH",t[t.ERROR_POP=51]="ERROR_POP",t[t.ERROR_POP_DECL=52]="ERROR_POP_DECL",t[t.ERROR_SEMICOL=53]="ERROR_SEMICOL",t[t.VAL_PLUS=54]="VAL_PLUS",t[t.SELECTOR_PSEUDOCLASS_1=55]="SELECTOR_PSEUDOCLASS_1",t[t.SELECTOR_FOLLOWING_SIBLING=56]="SELECTOR_FOLLOWING_SIBLING",t[t.DONE=200]="DONE"}(Qi||(Qi={}));var mr,vr=kn.LAST+1;ir[kn.IDENT]=Qi.IDENT,ir[kn.STAR]=Qi.SELECTOR_START,ir[kn.HASH]=Qi.SELECTOR_START,ir[kn.CLASS]=Qi.SELECTOR_START,ir[kn.O_BRK]=Qi.SELECTOR_START,ir[kn.COLON]=Qi.SELECTOR_START,ir[kn.AT]=Qi.AT,ir[kn.C_BRC]=Qi.RULE_END,ir[kn.EOF]=Qi.DONE,rr[kn.IDENT]=Qi.PROP,rr[kn.EOF]=Qi.DONE,ur[kn.IDENT]=Qi.SELECTOR_NAME,ur[kn.STAR]=Qi.SELECTOR_ANY,ur[kn.HASH]=Qi.SELECTOR_ID,ur[kn.CLASS]=Qi.SELECTOR_CLASS,ur[kn.O_BRK]=Qi.SELECTOR_ATTR,ur[kn.COLON]=Qi.SELECTOR_PSEUDOCLASS,or[kn.GT]=Qi.SELECTOR_CHILD,or[kn.PLUS]=Qi.SELECTOR_SIBLING,or[kn.TILDE]=Qi.SELECTOR_FOLLOWING_SIBLING,or[kn.IDENT]=Qi.SELECTOR_NAME_1,or[kn.STAR]=Qi.SELECTOR_ANY_1,or[kn.HASH]=Qi.SELECTOR_ID_1,or[kn.CLASS]=Qi.SELECTOR_CLASS_1,or[kn.O_BRK]=Qi.SELECTOR_ATTR_1,or[kn.O_BRC]=Qi.SELECTOR_BODY,or[kn.COLON]=Qi.SELECTOR_PSEUDOCLASS_1,or[kn.COL_COL]=Qi.SELECTOR_PSEUDOELEM,or[kn.COMMA]=Qi.SELECTOR_NEXT,ar[kn.IDENT]=Qi.SELECTOR_NAME_1,ar[kn.STAR]=Qi.SELECTOR_ANY_1,ar[kn.HASH]=Qi.SELECTOR_ID_1,ar[kn.CLASS]=Qi.SELECTOR_CLASS_1,ar[kn.O_BRK]=Qi.SELECTOR_ATTR_1,ar[kn.C_PAR]=Qi.DONE,ar[kn.COLON]=Qi.SELECTOR_PSEUDOCLASS_1,sr[kn.IDENT]=Qi.SELECTOR_NAME,sr[kn.STAR]=Qi.SELECTOR_ANY,sr[kn.HASH]=Qi.SELECTOR_ID,sr[kn.CLASS]=Qi.SELECTOR_CLASS,sr[kn.COLON]=Qi.SELECTOR_PSEUDOCLASS,sr[kn.COL_COL]=Qi.SELECTOR_PSEUDOELEM,sr[kn.O_BRK]=Qi.SELECTOR_ATTR,sr[kn.O_BRC]=Qi.SELECTOR_BODY,lr[kn.IDENT]=Qi.VAL_IDENT,lr[kn.HASH]=Qi.VAL_HASH,lr[kn.NUM]=Qi.VAL_NUM,lr[kn.INT]=Qi.VAL_INT,lr[kn.NUMERIC]=Qi.VAL_NUMERIC,lr[kn.STR]=Qi.VAL_STR,lr[kn.URL]=Qi.VAL_URL,lr[kn.COMMA]=Qi.VAL_COMMA,lr[kn.SLASH]=Qi.VAL_SLASH,lr[kn.FUNC]=Qi.VAL_FUNC,lr[kn.C_PAR]=Qi.VAL_C_PAR,lr[kn.SEMICOL]=Qi.VAL_END,lr[kn.C_BRC]=Qi.VAL_BRC,lr[kn.BANG]=Qi.VAL_BANG,lr[kn.PLUS]=Qi.VAL_PLUS,lr[kn.EOF]=Qi.VAL_FINISH,cr[kn.IDENT]=Qi.EXPR_IDENT,cr[kn.NUM]=Qi.EXPR_NUM,cr[kn.INT]=Qi.EXPR_NUM,cr[kn.NUMERIC]=Qi.EXPR_NUMERIC,cr[kn.STR]=Qi.EXPR_STR,cr[kn.O_PAR]=Qi.EXPR_O_PAR,cr[kn.FUNC]=Qi.EXPR_FUNC,cr[kn.BANG]=Qi.EXPR_PREFIX,cr[kn.MINUS]=Qi.EXPR_PREFIX,cr[kn.DOLLAR]=Qi.EXPR_PARAM,hr[kn.IDENT]=Qi.EXPR_INFIX_NAME,hr[kn.COMMA]=Qi.EXPR_INFIX,hr[kn.GT]=Qi.EXPR_INFIX,hr[kn.LT]=Qi.EXPR_INFIX,hr[kn.GT_EQ]=Qi.EXPR_INFIX,hr[kn.LT_EQ]=Qi.EXPR_INFIX,hr[kn.EQ]=Qi.EXPR_INFIX,hr[kn.EQ_EQ]=Qi.EXPR_INFIX,hr[kn.BANG_EQ]=Qi.EXPR_INFIX,hr[kn.AMP_AMP]=Qi.EXPR_INFIX,hr[kn.BAR_BAR]=Qi.EXPR_INFIX,hr[kn.PLUS]=Qi.EXPR_INFIX,hr[kn.MINUS]=Qi.EXPR_INFIX,hr[kn.SLASH]=Qi.EXPR_INFIX,hr[kn.PERCENT]=Qi.EXPR_INFIX,hr[kn.STAR]=Qi.EXPR_INFIX,hr[kn.COLON]=Qi.EXPR_INFIX,hr[kn.QMARK]=Qi.EXPR_INFIX,hr[kn.C_PAR]=Qi.EXPR_C_PAR,hr[kn.O_BRC]=Qi.EXPR_O_BRC,hr[kn.SEMICOL]=Qi.EXPR_SEMICOL,fr[kn.EOF]=Qi.DONE,fr[kn.O_BRC]=Qi.ERROR_PUSH,fr[kn.C_BRC]=Qi.ERROR_POP,fr[kn.O_BRK]=Qi.ERROR_PUSH,fr[kn.C_BRK]=Qi.ERROR_POP,fr[kn.O_PAR]=Qi.ERROR_PUSH,fr[kn.C_PAR]=Qi.ERROR_POP,fr[kn.SEMICOL]=Qi.ERROR_SEMICOL,dr[kn.EOF]=Qi.DONE,dr[kn.O_BRC]=Qi.ERROR_PUSH,dr[kn.C_BRC]=Qi.ERROR_POP_DECL,dr[kn.O_BRK]=Qi.ERROR_PUSH,dr[kn.C_BRK]=Qi.ERROR_POP,dr[kn.O_PAR]=Qi.ERROR_PUSH,dr[kn.C_PAR]=Qi.ERROR_POP,dr[kn.SEMICOL]=Qi.ERROR_SEMICOL,pr[kn.EOF]=Qi.DONE,pr[kn.O_BRC]=Qi.ERROR_PUSH,pr[kn.C_BRC]=Qi.ERROR_POP,pr[kn.O_BRK]=Qi.ERROR_PUSH,pr[kn.C_BRK]=Qi.ERROR_POP,pr[kn.O_PAR]=Qi.ERROR_PUSH,pr[kn.C_PAR]=Qi.ERROR_POP,gr[kn.C_PAR]=0,gr[kn.COMMA]=0,gr[kn.QMARK]=1,gr[kn.COLON]=1,gr[kn.AMP_AMP]=2,gr[kn.BAR_BAR]=2,gr[kn.LT]=3,gr[kn.GT]=3,gr[kn.LT_EQ]=3,gr[kn.GT_EQ]=3,gr[kn.EQ]=3,gr[kn.EQ_EQ]=3,gr[kn.BANG_EQ]=3,gr[kn.PLUS]=4,gr[kn.MINUS]=4,gr[kn.STAR]=5,gr[kn.SLASH]=5,gr[kn.PERCENT]=5,gr[kn.EOF]=6,gr[vr]=2,function(t){t[t.PROP=0]="PROP",t[t.WHEN=1]="WHEN",t[t.MEDIA=2]="MEDIA",t[t.IMPORT=3]="IMPORT"}(mr||(mr={}));var Er=function(){function t(t,e,n,i){this.actions=t,this.tokenizer=e,this.handler=n,this.baseURL=i,this.valStack=[],this.namespacePrefixToURI={},this.defaultNamespaceURI=null,this.propName=null,this.propImportant=!1,this.result=null,this.importReady=!1,this.importURL=null,this.importCondition=null,this.errorBrackets=[],this.ruleStack=[],this.regionRule=!1,this.pageRule=!1,this.exprContext=mr.MEDIA}var e=t.prototype;return e.extractVals=function(t,e){for(var n=[],i=this.valStack;e<i.length&&(n.push(i[e++]),e!=i.length);)if(i[e++]!=t)throw new Error("Unexpected state");return n},e.valStackReduce=function(t,e){var n,i=this.valStack,r=i.length;do{n=i[--r]}while(void 0!==n&&"string"!=typeof n);var o=i.length-(r+1);if(o>1&&i.splice(r+1,o,new We(i.slice(r+1,i.length))),","==t)return null;r++;do{n=i[--r]}while(void 0!==n&&("string"!=typeof n||","==n));if(o=i.length-(r+1),"("==n){if(")"!=t)return this.handler.error("E_CSS_MISMATCHED_C_PAR",e),this.actions=dr,null;var a=new je(i[r-1],this.extractVals(",",r+1));return i.splice(r-1,o+2,a),null}return";"!=t||r>=0?(this.handler.error("E_CSS_UNEXPECTED_VAL_END",e),this.actions=dr,null):o>1?new Xe(this.extractVals(",",r+1)):i[0]},e.exprError=function(t,e){this.actions=this.propName?dr:fr,this.handler.error(t,e)},e.exprStackReduce=function(t,e){for(var n,i=this.valStack,r=this.handler,o=i.pop();;){var a=i.pop();if(t==kn.C_PAR){for(var s=[o];a==kn.COMMA;)s.unshift(i.pop()),a=i.pop();if("string"==typeof a){if("{"==a){for(;s.length>=2;){var u=s.shift(),l=s.shift(),c=new ie(r.getScope(),u,l);s.unshift(c)}return i.push(new Ke(s[0])),!0}if("("==a){var h=i.pop(),f=i.pop();o=new be(r.getScope(),Mt(f,h),s),t=kn.EOF;continue}}if(a==kn.O_PAR){o.isMediaName()&&(o=new we(r.getScope(),o,null)),t=kn.EOF;continue}}else if("string"==typeof a){i.push(a);break}if(a<0)if(a==-kn.BANG)o=new Qt(r.getScope(),o);else{if(a!=-kn.MINUS)return this.exprError("F_UNEXPECTED_STATE",e),!1;o=new Jt(r.getScope(),o)}else{if(gr[t]>gr[a]){i.push(a);break}switch(n=i.pop(),a){case kn.AMP_AMP:o=new te(r.getScope(),n,o);break;case vr:o=new ee(r.getScope(),n,o);break;case kn.BAR_BAR:o=new ne(r.getScope(),n,o);break;case kn.LT:o=new re(r.getScope(),n,o);break;case kn.GT:o=new ae(r.getScope(),n,o);break;case kn.LT_EQ:o=new oe(r.getScope(),n,o);break;case kn.GT_EQ:o=new se(r.getScope(),n,o);break;case kn.EQ:case kn.EQ_EQ:o=new ue(r.getScope(),n,o);break;case kn.BANG_EQ:o=new le(r.getScope(),n,o);break;case kn.PLUS:o=new ce(r.getScope(),n,o);break;case kn.MINUS:o=new he(r.getScope(),n,o);break;case kn.STAR:o=new fe(r.getScope(),n,o);break;case kn.SLASH:o=new de(r.getScope(),n,o);break;case kn.PERCENT:o=new pe(r.getScope(),n,o);break;case kn.COLON:if(!(i.length>1))return this.exprError("E_CSS_EXPR_COND",e),!1;switch(i[i.length-1]){case kn.QMARK:i.pop(),o=new Ce(r.getScope(),i.pop(),n,o);break;case kn.O_PAR:if(!n.isMediaName())return this.exprError("E_CSS_MEDIA_TEST",e),!1;o=new we(r.getScope(),n,o)}break;case kn.QMARK:if(t!=kn.COLON)return this.exprError("E_CSS_EXPR_COND",e),!1;case kn.O_PAR:return i.push(n),i.push(a),i.push(o),!1;default:return this.exprError("F_UNEXPECTED_STATE",e),!1}}}return i.push(o),!1},e.readPseudoParams=function(){for(var t=[];;){var e=this.tokenizer.token();switch(e.type){case kn.IDENT:t.push(e.text);break;case kn.PLUS:t.push("+");break;case kn.NUM:case kn.INT:t.push(e.num);break;default:return t}this.tokenizer.consume()}},e.readNthPseudoParams=function(){var t=!1,e=this.tokenizer.token();if(e.type===kn.PLUS)t=!0,this.tokenizer.consume(),e=this.tokenizer.token();else if(e.type===kn.IDENT&&("even"===e.text||"odd"===e.text))return this.tokenizer.consume(),[2,"odd"===e.text?1:0];switch(e.type){case kn.NUMERIC:if(t&&e.num<0)return null;case kn.IDENT:if(t&&"-"===e.text.charAt(0))return null;if("n"===e.text||"-n"===e.text){if(t&&e.precededBySpace)return null;var n="-n"===e.text?-1:1;e.type===kn.NUMERIC&&(n=e.num);var i=0;this.tokenizer.consume();var r=(e=this.tokenizer.token()).type===kn.MINUS,o=e.type===kn.PLUS||r;if(o&&(this.tokenizer.consume(),e=this.tokenizer.token()),e.type===kn.INT){if(1/(i=e.num)==-1/0){if(i=0,o)return null}else if(i<0){if(o)return null}else if(i>=0&&!o)return null;this.tokenizer.consume()}else if(o)return null;return[n,r&&i>0?-i:i]}if("n-"===e.text||"-n-"===e.text){if(t&&e.precededBySpace)return null;var a="-n-"===e.text?-1:1;if(e.type===kn.NUMERIC&&(a=e.num),this.tokenizer.consume(),(e=this.tokenizer.token()).type===kn.INT)return e.num<0||1/e.num==-1/0?null:(this.tokenizer.consume(),[a,e.num])}else{var s=e.text.match(/^n(-[0-9]+)$/);if(s)return t&&e.precededBySpace?null:(this.tokenizer.consume(),[e.type===kn.NUMERIC?e.num:1,parseInt(s[1],10)]);if(s=e.text.match(/^-n(-[0-9]+)$/))return this.tokenizer.consume(),[-1,parseInt(s[1],10)]}return null;case kn.INT:return t&&(e.precededBySpace||e.num<0)?null:(this.tokenizer.consume(),[0,e.num])}return null},e.makeCondition=function(t,e){var n=this.handler.getScope();if(!n)return null;if(e=e||n._true,t)for(var i,r=_(t.split(/\s+/));!(i=r()).done;)switch(i.value){case"vertical":e=Se(n,e,new Qt(n,new me(n,"pref-horizontal")));break;case"horizontal":e=Se(n,e,new me(n,"pref-horizontal"));break;case"day":e=Se(n,e,new Qt(n,new me(n,"pref-night-mode")));break;case"night":e=Se(n,e,new me(n,"pref-night-mode"));break;default:e=n._false}return e===n._true?null:new Ke(e)},e.isInsidePropertyOnlyRule=function(){switch(this.ruleStack[this.ruleStack.length-1]){case"[selector]":case"font-face":case"-epubx-flow":case"-epubx-viewport":case"-epubx-define":case"-adapt-footnote-area":return!0}return!1},e.runParser=function(t,e,n,i,r){var o,a,s,u,l,c,h,f=this.handler,d=this.tokenizer,p=this.valStack;i&&(this.exprContext=mr.MEDIA,this.valStack.push("{"));t:for(;t>0;--t)switch(o=d.token(),this.actions[o.type]){case Qi.IDENT:if(d.nthToken(1).type!=kn.COLON){this.isInsidePropertyOnlyRule()?(f.error("E_CSS_COLON_EXPECTED",d.nthToken(1)),this.actions=dr):(this.actions=ur,f.startSelectorRule());continue}(a=d.nthToken(2)).precededBySpace||a.type!=kn.IDENT&&a.type!=kn.FUNC||d.mark(),this.propName=o.text,this.propImportant=!1,d.consume(),d.consume(),this.actions=lr,p.splice(0,p.length);continue;case Qi.PROP:if(d.nthToken(1).type!=kn.COLON){this.actions=dr,f.error("E_CSS_COLON_EXPECTED",d.nthToken(1));continue}this.propName=o.text,this.propImportant=!1,d.consume(),d.consume(),this.actions=lr,p.splice(0,p.length);continue;case Qi.SELECTOR_START:this.actions=ur,f.startSelectorRule();continue;case Qi.SELECTOR_NAME_1:if(!o.precededBySpace){this.actions=pr,f.error("E_CSS_SPACE_EXPECTED",o);continue}f.descendantSelector();case Qi.SELECTOR_NAME:if(d.nthToken(1).type==kn.BAR)if(d.consume(),d.consume(),null!=(s=this.namespacePrefixToURI[o.text]))switch((o=d.token()).type){case kn.IDENT:f.tagSelector(s,o.text),this.actions=r?ar:or,d.consume();break;case kn.STAR:f.tagSelector(s,null),this.actions=r?ar:or,d.consume();break;default:this.actions=fr,f.error("E_CSS_NAMESPACE",o)}else this.actions=fr,f.error("E_CSS_UNDECLARED_PREFIX",o);else f.tagSelector(this.defaultNamespaceURI,o.text),this.actions=r?ar:or,d.consume();continue;case Qi.SELECTOR_ANY_1:if(!o.precededBySpace){this.actions=pr,f.error("E_CSS_SPACE_EXPECTED",o);continue}f.descendantSelector();case Qi.SELECTOR_ANY:if(d.nthToken(1).type==kn.BAR)switch(d.consume(),d.consume(),(o=d.token()).type){case kn.IDENT:f.tagSelector(null,o.text),this.actions=r?ar:or,d.consume();break;case kn.STAR:f.tagSelector(null,null),this.actions=r?ar:or,d.consume();break;default:this.actions=fr,f.error("E_CSS_NAMESPACE",o)}else f.tagSelector(this.defaultNamespaceURI,null),this.actions=r?ar:or,d.consume();continue;case Qi.SELECTOR_ID_1:o.precededBySpace&&f.descendantSelector();case Qi.SELECTOR_ID:f.idSelector(o.text),this.actions=r?ar:or,d.consume();continue;case Qi.SELECTOR_CLASS_1:o.precededBySpace&&f.descendantSelector();case Qi.SELECTOR_CLASS:f.classSelector(o.text),this.actions=r?ar:or,d.consume();continue;case Qi.SELECTOR_PSEUDOCLASS_1:o.precededBySpace&&f.descendantSelector();case Qi.SELECTOR_PSEUDOCLASS:d.consume();e:switch((o=d.token()).type){case kn.IDENT:f.pseudoclassSelector(o.text,null),d.consume(),this.actions=r?ar:or;continue;case kn.FUNC:switch(u=o.text,d.consume(),u){case"not":this.actions=ur,f.startFuncWithSelector("not"),this.actions=this.runParser(Number.POSITIVE_INFINITY,!1,!1,!1,!0)?or:pr;break t;case"lang":case"href-epub-type":if((o=d.token()).type===kn.IDENT){h=[o.text],d.consume();break}break e;case"nth-child":case"nth-of-type":case"nth-last-child":case"nth-last-of-type":case"nth":if(h=this.readNthPseudoParams())break;break e;default:h=this.readPseudoParams()}if((o=d.token()).type==kn.C_PAR){f.pseudoclassSelector(u,h),d.consume(),this.actions=r?ar:or;continue}}f.error("E_CSS_PSEUDOCLASS_SYNTAX",o),this.actions=fr;continue;case Qi.SELECTOR_PSEUDOELEM:switch(d.consume(),(o=d.token()).type){case kn.IDENT:f.pseudoelementSelector(o.text,null),this.actions=r?ar:or,d.consume();continue;case kn.FUNC:if(u=o.text,d.consume(),"nth-fragment"==u){if(null===(h=this.readNthPseudoParams()))break}else h=this.readPseudoParams();if((o=d.token()).type==kn.C_PAR){f.pseudoelementSelector(u,h),this.actions=r?ar:or,d.consume();continue}}f.error("E_CSS_PSEUDOELEM_SYNTAX",o),this.actions=fr;continue;case Qi.SELECTOR_ATTR_1:o.precededBySpace&&f.descendantSelector();case Qi.SELECTOR_ATTR:if(d.consume(),(o=d.token()).type==kn.IDENT)u=o.text,d.consume();else if(o.type==kn.STAR)u=null,d.consume();else{if(o.type!=kn.BAR){this.actions=pr,f.error("E_CSS_ATTR",o),d.consume();continue}u=""}if((o=d.token()).type==kn.BAR){if(null==(s=u?this.namespacePrefixToURI[u]:u)){this.actions=pr,f.error("E_CSS_UNDECLARED_PREFIX",o),d.consume();continue}if(d.consume(),(o=d.token()).type!=kn.IDENT){this.actions=pr,f.error("E_CSS_ATTR_NAME_EXPECTED",o);continue}u=o.text,d.consume(),o=d.token()}else s="";switch(o.type){case kn.EQ:case kn.TILDE_EQ:case kn.BAR_EQ:case kn.HAT_EQ:case kn.DOLLAR_EQ:case kn.STAR_EQ:case kn.COL_COL:l=o.type,d.consume(),o=d.token();break;case kn.C_BRK:f.attributeSelector(s,u,kn.EOF,null),this.actions=r?ar:or,d.consume();continue;default:this.actions=pr,f.error("E_CSS_ATTR_OP_EXPECTED",o);continue}switch(o.type){case kn.IDENT:case kn.STR:f.attributeSelector(s,u,l,o.text),d.consume(),o=d.token();break;default:this.actions=pr,f.error("E_CSS_ATTR_VAL_EXPECTED",o);continue}if(o.type!=kn.C_BRK){this.actions=pr,f.error("E_CSS_ATTR",o);continue}this.actions=r?ar:or,d.consume();continue;case Qi.SELECTOR_CHILD:f.childSelector(),this.actions=sr,d.consume();continue;case Qi.SELECTOR_SIBLING:f.adjacentSiblingSelector(),this.actions=sr,d.consume();continue;case Qi.SELECTOR_FOLLOWING_SIBLING:f.followingSiblingSelector(),this.actions=sr,d.consume();continue;case Qi.SELECTOR_BODY:this.regionRule?(this.ruleStack.push("-epubx-region"),this.regionRule=!1):this.pageRule?(this.ruleStack.push("page"),this.pageRule=!1):this.ruleStack.push("[selector]"),f.startRuleBody(),this.actions=ir,d.consume();continue;case Qi.SELECTOR_NEXT:f.nextSelector(),this.actions=ur,d.consume();continue;case Qi.VAL_IDENT:p.push(_e(o.text)),d.consume();continue;case Qi.VAL_HASH:l=parseInt(o.text,16);try{p.push(Zi(o.text))}catch(t){f.error("E_CSS_COLOR",o),this.actions=fr}d.consume();continue;case Qi.VAL_NUM:p.push(new Ue(o.num)),d.consume();continue;case Qi.VAL_INT:p.push(new Ve(o.num)),d.consume();continue;case Qi.VAL_NUMERIC:zt(o.text)?p.push(new Ke(new ge(f.getScope(),o.num,o.text))):p.push(new Me(o.num,o.text)),d.consume();continue;case Qi.VAL_STR:p.push(new ke(o.text)),d.consume();continue;case Qi.VAL_URL:p.push(new He(K(o.text,this.baseURL))),d.consume();continue;case Qi.VAL_COMMA:this.valStackReduce(",",o),p.push(","),d.consume();continue;case Qi.VAL_SLASH:p.push(Re),d.consume();continue;case Qi.VAL_FUNC:"-epubx-expr"==(u=o.text.toLowerCase())||"calc"==u||"env"==u?(this.actions=cr,this.exprContext=mr.PROP,p.push("{")):(p.push(u),p.push("(")),d.consume();continue;case Qi.VAL_C_PAR:this.valStackReduce(")",o),d.consume();continue;case Qi.VAL_BANG:if(d.consume(),o=d.token(),a=d.nthToken(1),o.type==kn.IDENT&&"important"==o.text.toLowerCase()&&(a.type==kn.SEMICOL||a.type==kn.EOF||a.type==kn.C_BRC)){d.consume(),this.propImportant=!0;continue}this.exprError("E_CSS_SYNTAX",o);continue;case Qi.VAL_PLUS:switch((a=d.nthToken(1)).type){case kn.NUM:case kn.NUMERIC:case kn.INT:if(!a.precededBySpace){d.consume();continue}}if(this.actions===lr&&d.hasMark()){d.reset(),this.actions=ur,f.startSelectorRule();continue}this.exprError("E_CSS_UNEXPECTED_PLUS",o);continue;case Qi.VAL_END:d.consume();case Qi.VAL_BRC:d.unmark(),(c=this.valStackReduce(";",o))&&this.propName&&f.property(this.propName,c,this.propImportant),this.actions=n?rr:ir;continue;case Qi.VAL_FINISH:if(d.consume(),d.unmark(),c=this.valStackReduce(";",o),e)return this.result=c,!0;if(this.propName&&c&&f.property(this.propName,c,this.propImportant),n)return!0;this.exprError("E_CSS_SYNTAX",o);continue;case Qi.EXPR_IDENT:(a=d.nthToken(1)).type==kn.CLASS?(d.nthToken(2).type!=kn.O_PAR||d.nthToken(2).precededBySpace?(p.push(new me(f.getScope(),Mt(o.text,a.text))),this.actions=hr):(p.push(o.text,a.text,"("),d.consume()),d.consume()):(this.exprContext==mr.MEDIA||this.exprContext==mr.IMPORT?"not"==o.text.toLowerCase()?(d.consume(),p.push(new ve(f.getScope(),!0,a.text))):("only"==o.text.toLowerCase()&&(d.consume(),o=a),p.push(new ve(f.getScope(),!1,o.text))):p.push(new me(f.getScope(),o.text)),this.actions=hr),d.consume();continue;case Qi.EXPR_FUNC:p.push(null,o.text,"("),d.consume();continue;case Qi.EXPR_NUM:p.push(new ye(f.getScope(),o.num)),d.consume(),this.actions=hr;continue;case Qi.EXPR_NUMERIC:"%"==(u=o.text)&&(u=this.propName&&this.propName.match(/height|^(top|bottom)$/)?"vh":"vw"),p.push(new ge(f.getScope(),o.num,u)),d.consume(),this.actions=hr;continue;case Qi.EXPR_STR:p.push(new ye(f.getScope(),o.text)),d.consume(),this.actions=hr;continue;case Qi.EXPR_PARAM:d.consume(),(o=d.token()).type!=kn.INT||o.precededBySpace?this.exprError("E_CSS_SYNTAX",o):(p.push(new De(f.getScope(),o.num)),d.consume(),this.actions=hr);continue;case Qi.EXPR_PREFIX:p.push(-o.type),d.consume();continue;case Qi.EXPR_INFIX:this.actions=cr,this.exprStackReduce(o.type,o),p.push(o.type),d.consume();continue;case Qi.EXPR_INFIX_NAME:"and"==o.text.toLowerCase()?(this.actions=cr,this.exprStackReduce(vr,o),p.push(vr),d.consume()):this.exprError("E_CSS_SYNTAX",o);continue;case Qi.EXPR_C_PAR:this.exprStackReduce(o.type,o)&&(this.propName?this.actions=lr:this.exprError("E_CSS_UNBALANCED_PAR",o)),d.consume();continue;case Qi.EXPR_O_BRC:this.exprStackReduce(kn.C_PAR,o)&&(this.propName||this.exprContext==mr.IMPORT?this.exprError("E_CSS_UNEXPECTED_BRC",o):(this.exprContext==mr.WHEN?f.startWhenRule(p.pop()):f.startMediaRule(p.pop()),this.ruleStack.push("media"),f.startRuleBody(),this.actions=ir)),d.consume();continue;case Qi.EXPR_SEMICOL:if(this.exprStackReduce(kn.C_PAR,o)){if(!this.propName&&this.exprContext==mr.IMPORT)return this.importCondition=p.pop(),this.importReady=!0,this.actions=ir,d.consume(),!1;this.exprError("E_CSS_UNEXPECTED_SEMICOL",o)}d.consume();continue;case Qi.EXPR_O_PAR:p.push(o.type),d.consume();continue;case Qi.RULE_END:this.actions=ir,d.consume(),f.endRule(),this.ruleStack.length&&this.ruleStack.pop();continue;case Qi.AT:switch(u=o.text.toLowerCase()){case"import":if(d.consume(),(o=d.token()).type==kn.STR||o.type==kn.URL){if(this.importURL=o.text,d.consume(),(o=d.token()).type==kn.SEMICOL||o.type==kn.EOF)return this.importReady=!0,d.consume(),!1;this.propName=null,this.exprContext=mr.IMPORT,this.actions=cr,p.push("{");continue}f.error("E_CSS_IMPORT_SYNTAX",o),this.actions=fr;continue;case"namespace":switch(d.consume(),(o=d.token()).type){case kn.IDENT:if(u=o.text,d.consume(),((o=d.token()).type==kn.STR||o.type==kn.URL)&&d.nthToken(1).type==kn.SEMICOL){this.namespacePrefixToURI[u]=o.text,d.consume(),d.consume();continue}break;case kn.STR:case kn.URL:if(d.nthToken(1).type==kn.SEMICOL){this.defaultNamespaceURI=o.text,d.consume(),d.consume();continue}}f.error("E_CSS_NAMESPACE_SYNTAX",o),this.actions=fr;continue;case"charset":if(d.consume(),(o=d.token()).type==kn.STR&&d.nthToken(1).type==kn.SEMICOL){"utf-8"!=(u=o.text.toLowerCase())&&"utf-16"!=u&&f.error("E_CSS_UNEXPECTED_CHARSET "+u,o),d.consume(),d.consume();continue}f.error("E_CSS_CHARSET_SYNTAX",o),this.actions=fr;continue;case"font-face":case"-epubx-page-template":case"-epubx-define":case"-epubx-viewport":if(d.nthToken(1).type==kn.O_BRC){switch(d.consume(),d.consume(),u){case"font-face":f.startFontFaceRule();break;case"-epubx-page-template":f.startPageTemplateRule();break;case"-epubx-define":f.startDefineRule();break;case"-epubx-viewport":f.startViewportRule()}this.ruleStack.push(u),f.startRuleBody();continue}break;case"-adapt-footnote-area":switch(d.consume(),(o=d.token()).type){case kn.O_BRC:d.consume(),f.startFootnoteRule(null),this.ruleStack.push(u),f.startRuleBody();continue;case kn.COL_COL:if(d.consume(),(o=d.token()).type==kn.IDENT&&d.nthToken(1).type==kn.O_BRC){u=o.text,d.consume(),d.consume(),f.startFootnoteRule(u),this.ruleStack.push("-adapt-footnote-area"),f.startRuleBody();continue}}break;case"-epubx-region":d.consume(),f.startRegionRule(),this.regionRule=!0,this.actions=ur;continue;case"page":d.consume(),f.startPageRule(),this.pageRule=!0,this.actions=sr;continue;case"top-left-corner":case"top-left":case"top-center":case"top-right":case"top-right-corner":case"right-top":case"right-middle":case"right-bottom":case"bottom-right-corner":case"bottom-right":case"bottom-center":case"bottom-left":case"bottom-left-corner":case"left-bottom":case"left-middle":case"left-top":if(d.consume(),(o=d.token()).type==kn.O_BRC){d.consume(),f.startPageMarginBoxRule(u),this.ruleStack.push(u),f.startRuleBody();continue}break;case"-epubx-when":d.consume(),this.propName=null,this.exprContext=mr.WHEN,this.actions=cr,p.push("{");continue;case"media":d.consume(),this.propName=null,this.exprContext=mr.MEDIA,this.actions=cr,p.push("{");continue;case"-epubx-flow":if(d.nthToken(1).type==kn.IDENT&&d.nthToken(2).type==kn.O_BRC){f.startFlowRule(d.nthToken(1).text),d.consume(),d.consume(),d.consume(),this.ruleStack.push(u),f.startRuleBody();continue}break;case"-epubx-page-master":case"-epubx-partition":case"-epubx-partition-group":d.consume();var g=null,m=null,v=[];for((o=d.token()).type==kn.IDENT&&(g=o.text,d.consume(),o=d.token()),o.type==kn.COLON&&d.nthToken(1).type==kn.IDENT&&(m=d.nthToken(1).text,d.consume(),d.consume(),o=d.token());o.type==kn.FUNC&&"class"==o.text.toLowerCase()&&d.nthToken(1).type==kn.IDENT&&d.nthToken(2).type==kn.C_PAR;)v.push(d.nthToken(1).text),d.consume(),d.consume(),d.consume(),o=d.token();if(o.type==kn.O_BRC){switch(d.consume(),u){case"-epubx-page-master":f.startPageMasterRule(g,m,v);break;case"-epubx-partition":f.startPartitionRule(g,m,v);break;case"-epubx-partition-group":f.startPartitionGroupRule(g,m,v)}this.ruleStack.push(u),f.startRuleBody();continue}break;case"":f.error("E_CSS_UNEXPECTED_AT"+u,o),this.actions=pr;continue;default:f.error("E_CSS_AT_UNKNOWN "+u,o),this.actions=fr;continue}f.error("E_CSS_AT_SYNTAX "+u,o),this.actions=fr;continue;case Qi.ERROR_PUSH:if(e||n)return!0;this.errorBrackets.push(o.type+1),d.consume();continue;case Qi.ERROR_POP_DECL:if(e||n)return!0;if(0==this.errorBrackets.length){this.actions=ir;continue}case Qi.ERROR_POP:this.errorBrackets.length>0&&this.errorBrackets[this.errorBrackets.length-1]==o.type&&this.errorBrackets.pop(),0==this.errorBrackets.length&&o.type==kn.C_BRC&&(this.actions=ir),d.consume();continue;case Qi.ERROR_SEMICOL:if(e||n)return!0;0==this.errorBrackets.length&&(this.actions=ir),d.consume();continue;case Qi.DONE:return r&&(d.consume(),f.endFuncWithSelector()),!0;default:if(e||n)return!0;if(i)return!!this.exprStackReduce(kn.C_PAR,o)&&(this.result=p.pop(),!0);if(r)return f.error(o.type==kn.INVALID?o.text:"E_CSS_SYNTAX",o),!1;if(this.actions===lr&&d.hasMark()){d.reset(),this.actions=ur,f.startSelectorRule();continue}if(this.actions!==fr&&this.actions!==pr&&this.actions!==dr){f.error(o.type==kn.INVALID?o.text:"E_CSS_SYNTAX",o),this.actions=this.isInsidePropertyOnlyRule()?dr:pr;continue}d.consume();continue}return!1},t}(),br=function(t){function e(e){var n;return(n=t.call(this,null)||this).scope=e,n}I(e,t);var n=e.prototype;return n.error=function(t,e){throw new Error(t)},n.getScope=function(){return this.scope},e}(Ji);function Cr(t,e,n,i,r){return Ai("parseStylesheetFromText",(function(o){(function(t,e,n,i,r){var o=Ni("parseStylesheet"),a=new Er(ir,t,e,n),s=null;return r&&(s=function(t,e,n){var i=new Er(cr,t,e,n);return i.runParser(Number.POSITIVE_INFINITY,!1,!1,!0,!1),i.result}(new yi(r,e),e,n)),(s=a.makeCondition(i,s&&s.toExpr()))&&(e.startMediaRule(s),e.startRuleBody()),o.loop((function(){for(;!a.runParser(100,!1,!1,!1,!1);){if(a.importReady){var t=function(){var t=K(a.importURL,n);a.importCondition&&(e.startMediaRule(a.importCondition),e.startRuleBody());var i=Ni("parseStylesheet.import");return yr(t,e,null,null).then((function(){a.importCondition&&e.endRule(),a.importReady=!1,a.importURL=null,a.importCondition=null,i.finish(!0)})),{v:i.result()}}();if("object"==typeof t)return t.v}var i=o.timeSlice();if(i.isPending)return i}return Ti(!1)})).then((function(){s&&e.endRule(),o.finish(!0)})),o.result()})(new yi(t,e),e,n,i,r).thenFinish(o)}),(function(e,n){f.warn(n,"Failed to parse stylesheet text: "+t),e.finish(!1)}))}function yr(t,e,n,i){return Ai("parseStylesheetFromURL",(function(r){ji(t).then((function(o){o.responseText?Cr(o.responseText,e,t,n,i).then((function(e){e||f.warn("Failed to parse stylesheet from "+t),r.finish(!0)})):r.finish(!0)}))}),(function(e,n){f.warn(n,"Exception while fetching and parsing:",t),e.finish(!0)}))}function wr(t,e,n){var i=new Er(lr,e,new br(t),n);return i.runParser(Number.POSITIVE_INFINITY,!0,!1,!1,!1),i.result}var Dr={"z-index":!0,"column-count":!0,"flow-linger":!0,opacity:!0,page:!0,"flow-priority":!0,utilization:!0};function Sr(t,e,n){return e.isExpr()?function(t,e,n){var i=e.evaluate(t);switch(typeof i){case"number":return function(t){return!!Dr[t]}(n)?i==Math.round(i)?new Ve(i):new Ue(i):new Me(i,"px");case"string":return i?wr(e.scope,new yi(i,null),""):Oe;case"boolean":return i?Ye._true:Ye._false;case"undefined":return Oe}throw new Error("E_UNEXPECTED")}(t,e.expr,n):e}function Nr(t,e,n){return t-=n,0===e?0===t:t%e==0&&t/e>=0}var Tr=function(){function t(t){this.matchers=t}return t.prototype.matches=function(){return this.matchers.some((function(t){return t.matches()}))},t}(),Ar=function(){function t(t){this.matchers=t}return t.prototype.matches=function(){return this.matchers.every((function(t){return t.matches()}))},t}(),xr=function(){function t(t,e,n){this.elementOffset=t,this.a=e,this.b=n}return t.registerFragmentIndex=function(e,n,i){var r=t.fragmentIndices;(!r[e]||r[e].priority<=i)&&(r[e]={fragmentIndex:n,priority:i})},t.clearFragmentIndices=function(){t.fragmentIndices={}},t.prototype.matches=function(){var e=t.fragmentIndices[this.elementOffset];return null!=e&&null!=e.fragmentIndex&&Nr(e.fragmentIndex,this.a,this.b)},t}();xr.fragmentIndices={};var Ir,Fr,Pr,Or,Rr,kr,Lr=function(){function t(){}return t.buildViewConditionMatcher=function(t,e){var n=e.split("_");return"NFS"==n[0]?new xr(t,parseInt(n[1],10),parseInt(n[2],10)):null},t.buildAllMatcher=function(t){return new Ar(t)},t.buildAnyMatcher=function(t){return new Tr(t)},t}();function Br(t){return t.reduce((function(t,e){return e[0]===a.DELETE?t:t+e[1]}),"")}function _r(t,e,n){var i=0,r=0;return t.some((function(t){for(var o=0;o<t[1].length;o++){switch(t[0]*n){case a.INSERT:i++;break;case a.DELETE:i--,r++;break;case a.EQUAL:r++}if(r>e)return!0}return!1})),Math.max(Math.min(e,r-1)+i,0)}!function(t){t.isInstanceOfBlockFormattingContext=function(t){return t&&"Block"===t.formattingContextType}}(Ir||(Ir={})),function(t){!function(t){t.INLINE="inline",t.COLUMN="column",t.REGION="region",t.PAGE="page"}(t.FloatReference||(t.FloatReference={}))}(Fr||(Fr={})),function(t){t.isInstanceOfAfterIfContinuesLayoutConstraint=function(t){return t&&"AfterIfContinue"==t.flagmentLayoutConstraintType}}(Pr||(Pr={})),function(t){t.isInstanceOfRepetitiveElementsOwnerFormattingContext=function(t){return!!t&&("RepetitiveElementsOwner"===t.formattingContextType||Rr.isInstanceOfTableFormattingContext(t))},t.isInstanceOfRepetitiveElementsOwnerLayoutConstraint=function(t){return!!t&&("RepetitiveElementsOwner"===t.flagmentLayoutConstraintType||Rr.isInstanceOfTableRowLayoutConstraint(t))}}(Or||(Or={})),function(t){t.isInstanceOfTableFormattingContext=function(t){return t&&"Table"===t.formattingContextType},t.isInstanceOfTableRowLayoutConstraint=function(t){return t&&"TableRow"===t.flagmentLayoutConstraintType}}(Rr||(Rr={})),function(t){!function(t){t[t.IGNORE=0]="IGNORE",t[t.NEWLINE=1]="NEWLINE",t[t.PRESERVE=2]="PRESERVE"}(t.Whitespace||(t.Whitespace={})),function(t){t[t.NONE=0]="NONE",t[t.CONTENT=1]="CONTENT",t[t.ROOTLESS=2]="ROOTLESS",t[t.ROOTED=3]="ROOTED"}(t.ShadowType||(t.ShadowType={}))}(kr||(kr={}));var Mr=(new DOMParser).parseFromString('<root xmlns="'+W.SHADOW+'"/>',"text/xml"),Ur=["footnote-marker","first-5-lines","first-4-lines","first-3-lines","first-2-lines","first-line","first-letter","before","","after"];function Vr(t){return t.getAttribute("data-adapt-pseudo")||""}function zr(t,e){t.setAttribute("data-adapt-pseudo",e)}var Hr=function(){function t(t,e,n,i,r){this.element=t,this.style=e,this.styler=n,this.context=i,this.exprContentListener=r,this.contentProcessed={}}var e=t.prototype;return e.getStyle=function(t,e){var n=Vr(t);this.styler&&n&&n.match(/after$/)&&(this.style=this.styler.getStyle(this.element,!0),this.styler=null);var i=Uo(this.style,"_pseudos")[n]||{};if(n.match(/^first-/)&&!i["x-first-pseudo"]){var r,o=1;"first-letter"==n?o=0:null!=(r=n.match(/^first-([0-9]+)-lines$/))&&(o=r[1]-0),i["x-first-pseudo"]=new Fo(new Ve(o),0)}return i},e.processContent=function(t,e){var n=Vr(t);if(!this.contentProcessed[n]){this.contentProcessed[n]=!0;var i=e.content;i&&Eo(i)&&i.visit(new vo(t,this.context,i,this.exprContentListener))}},t}(),Gr={transform:!0,"transform-origin":!0},Wr={top:!0,bottom:!0,left:!0,right:!0},Xr=function(t,e,n){this.target=t,this.name=e,this.value=n},jr={show:function(t){t.style.visibility="visible"},hide:function(t){t.style.visibility="hidden"},play:function(t){t.currentTime=0,t.play()},pause:function(t){t.pause()},resume:function(t){t.play()},mute:function(t){t.muted=!0},unmute:function(t){t.muted=!1}};function Kr(t,e){var n=jr[e];return n?function(){for(var e=0;e<t.length;e++)try{n(t[e])}catch(t){}}:null}var $r=function(t){function e(e,n){var i;return(i=t.call(this)||this).container=e,i.bleedBox=n,i.pageAreaElement=null,i.delayedItems=[],i.elementsById={},i.dimensions={width:0,height:0},i.isFirstPage=!1,i.isLastPage=!1,i.isAutoPageWidth=!0,i.isAutoPageHeight=!0,i.spineIndex=0,i.position=null,i.offset=-1,i.side=null,i.fetchers=[],i.marginBoxes={top:{},bottom:{},left:{},right:{}},i.hrefHandler=function(t){var e=t.currentTarget,n=e.getAttribute("href")||e.getAttributeNS(W.XLINK,"href");n&&i.dispatchEvent({type:"hyperlink",target:null,currentTarget:null,anchorElement:e,href:n,preventDefault:function(){t.preventDefault()}})},i}I(e,t);var n=e.prototype;return n.setAutoPageWidth=function(t){this.isAutoPageWidth=t,t?this.container.setAttribute(e.AUTO_PAGE_WIDTH_ATTRIBUTE,"true"):this.container.removeAttribute(e.AUTO_PAGE_WIDTH_ATTRIBUTE)},n.setAutoPageHeight=function(t){this.isAutoPageHeight=t,t?this.container.setAttribute(e.AUTO_PAGE_HEIGHT_ATTRIBUTE,"true"):this.container.removeAttribute(e.AUTO_PAGE_HEIGHT_ATTRIBUTE)},n.registerElementWithId=function(t,e){var n=this.elementsById[e];n?n.push(t):this.elementsById[e]=[t]},n.finish=function(t,e){var n=this;Object.keys(this.elementsById).forEach((function(t){for(var e=n.elementsById[t],i=0;i<e.length;)n.container.contains(e[i])?i++:e.splice(i,1);0===e.length&&delete n.elementsById[t]}));for(var i=this.delayedItems,r=0;r<i.length;r++){var o=i[r];(o.target!==this.container||"transform"!==o.name||this.isAutoPageWidth||this.isAutoPageHeight)&&et(o.target,o.name,o.value.toString())}var a=e.getElementClientRect(this.container);this.dimensions.width=a.width,this.dimensions.height=a.height;for(var s=0;s<t.length;s++){var u=t[s],l=this.elementsById[u.ref],c=this.elementsById[u.observer];if(l&&c){var h=Kr(l,u.action);if(h)for(var f=0;f<c.length;f++)c[f].addEventListener(u.event,h,!1)}}},n.zoom=function(t){et(this.container,"transform","scale("+t+")")},n.getPageAreaElement=function(){return this.pageAreaElement||this.container},e}(mt);$r.AUTO_PAGE_WIDTH_ATTRIBUTE="data-vivliostyle-auto-page-width",$r.AUTO_PAGE_HEIGHT_ATTRIBUTE="data-vivliostyle-auto-page-height";var qr=kr.Whitespace;function Yr(t){switch(t){case"normal":case"nowrap":return qr.IGNORE;case"pre-line":return qr.NEWLINE;case"pre":case"pre-wrap":return qr.PRESERVE;default:return null}}function Zr(t,e){if(1==t.nodeType)return!1;var n=t.textContent;switch(e){case qr.IGNORE:return!!n.match(/^\s*$/);case qr.NEWLINE:return!!n.match(/^[ \t\f]*$/);case qr.PRESERVE:return 0==n.length}throw new Error("Unexpected whitespace: "+e)}var Qr=function(t,e){this.flowName=t,this.parentFlowName=e,this.forcedBreakOffsets=[],this.formattingContext=null},Jr=function(){function t(t,e,n,i,r,o,a,s,u){this.flowName=t,this.element=e,this.startOffset=n,this.priority=i,this.linger=r,this.exclusive=o,this.repeated=a,this.last=s,this.breakBefore=u,this.startPage=-1}return t.prototype.isBetter=function(t){return!!this.exclusive&&(!t.exclusive||this.priority>t.priority||this.last)},t}();function to(t,e){return t.top-e.top}function eo(t,e){return e.right-t.right}function no(t,e){return t===e||!(!t||!e)&&t.node===e.node&&t.shadowType===e.shadowType&&uo(t.shadowContext,e.shadowContext)&&uo(t.nodeShadow,e.nodeShadow)&&no(t.shadowSibling,e.shadowSibling)}function io(t,e){if(t===e)return!0;if(!t||!e)return!1;if(t.offsetInNode!==e.offsetInNode||t.after!==e.after||t.steps.length!==e.steps.length)return!1;for(var n=0;n<t.steps.length;n++)if(!no(t.steps[n],e.steps[n]))return!1;return!0}function ro(t,e){return{steps:[{node:t.sourceNode,shadowType:ao.NONE,shadowContext:t.shadowContext,nodeShadow:null,shadowSibling:null,formattingContext:null,fragmentIndex:null!=e?e:t.fragmentIndex}],offsetInNode:0,after:!1,preprocessedTextContent:t.preprocessedTextContent}}function oo(t,e){var n=new co(t.node,e,0);return n.shadowType=t.shadowType,n.shadowContext=t.shadowContext,n.nodeShadow=t.nodeShadow,n.shadowSibling=t.shadowSibling?oo(t.shadowSibling,e.copy()):null,n.formattingContext=t.formattingContext,n.fragmentIndex=t.fragmentIndex+1,n}var ao=kr.ShadowType,so=function(){function t(t,e,n,i,r,o,a){this.owner=t,this.root=e,this.xmldoc=n,this.parentShadow=i,this.type=o,this.styler=a,this.subShadow=null,r&&(r.subShadow=this)}return t.prototype.equals=function(t){return!!t&&this.owner===t.owner&&this.xmldoc===t.xmldoc&&this.type===t.type&&uo(this.parentShadow,t.parentShadow)},t}();function uo(t,e){return t===e||!!t&&!!e&&t.equals(e)}var lo=function(t,e){this.outer=t,this.count=e},co=function(){function t(t,e,n){this.sourceNode=t,this.parent=e,this.boxOffset=n,this.offsetInNode=0,this.after=!1,this.nodeShadow=null,this.shadowSibling=null,this.shared=!1,this.inline=!0,this.overflow=!1,this.display=null,this.floatSide=null,this.clearSide=null,this.floatMinWrapBlock=null,this.columnSpan=null,this.verticalAlign="baseline",this.captionSide="top",this.inlineBorderSpacing=0,this.blockBorderSpacing=0,this.flexContainer=!1,this.establishesBFC=!1,this.containingBlockForAbsolute=!1,this.breakBefore=null,this.breakAfter=null,this.viewNode=null,this.clearSpacer=null,this.lang=null,this.preprocessedTextContent=null,this.repeatOnBreak=null,this.pluginProps={},this.fragmentIndex=1,this.afterIfContinues=null,this.footnotePolicy=null,this.shadowType=ao.NONE,this.shadowContext=e?e.shadowContext:null,this.breakPenalty=e?e.breakPenalty:0,this.floatReference=Fr.FloatReference.INLINE,this.whitespace=e?e.whitespace:qr.IGNORE,this.hyphenateCharacter=e?e.hyphenateCharacter:null,this.breakWord=!!e&&e.breakWord,this.inheritedProps=e?e.inheritedProps:{},this.vertical=!!e&&e.vertical,this.direction=e?e.direction:"ltr",this.firstPseudo=e?e.firstPseudo:null,this.formattingContext=e?e.formattingContext:null}var e=t.prototype;return e.resetView=function(){this.inline=!0,this.breakPenalty=this.parent?this.parent.breakPenalty:0,this.viewNode=null,this.clearSpacer=null,this.offsetInNode=0,this.after=!1,this.display=null,this.floatReference=Fr.FloatReference.INLINE,this.floatSide=null,this.clearSide=null,this.floatMinWrapBlock=null,this.columnSpan=null,this.verticalAlign="baseline",this.flexContainer=!1,this.whitespace=this.parent?this.parent.whitespace:qr.IGNORE,this.hyphenateCharacter=this.parent?this.parent.hyphenateCharacter:null,this.breakWord=!!this.parent&&this.parent.breakWord,this.breakBefore=null,this.breakAfter=null,this.nodeShadow=null,this.establishesBFC=!1,this.containingBlockForAbsolute=!1,this.vertical=!!this.parent&&this.parent.vertical,this.nodeShadow=null,this.preprocessedTextContent=null,this.formattingContext=this.parent?this.parent.formattingContext:null,this.repeatOnBreak=null,this.pluginProps={},this.fragmentIndex=1,this.afterIfContinues=null,this.footnotePolicy=null},e.cloneItem=function(){var e=new t(this.sourceNode,this.parent,this.boxOffset);return e.offsetInNode=this.offsetInNode,e.after=this.after,e.nodeShadow=this.nodeShadow,e.shadowType=this.shadowType,e.shadowContext=this.shadowContext,e.shadowSibling=this.shadowSibling,e.inline=this.inline,e.breakPenalty=this.breakPenalty,e.display=this.display,e.floatReference=this.floatReference,e.floatSide=this.floatSide,e.clearSide=this.clearSide,e.floatMinWrapBlock=this.floatMinWrapBlock,e.columnSpan=this.columnSpan,e.verticalAlign=this.verticalAlign,e.captionSide=this.captionSide,e.inlineBorderSpacing=this.inlineBorderSpacing,e.blockBorderSpacing=this.blockBorderSpacing,e.establishesBFC=this.establishesBFC,e.containingBlockForAbsolute=this.containingBlockForAbsolute,e.flexContainer=this.flexContainer,e.whitespace=this.whitespace,e.hyphenateCharacter=this.hyphenateCharacter,e.breakWord=this.breakWord,e.breakBefore=this.breakBefore,e.breakAfter=this.breakAfter,e.viewNode=this.viewNode,e.clearSpacer=this.clearSpacer,e.firstPseudo=this.firstPseudo,e.vertical=this.vertical,e.overflow=this.overflow,e.preprocessedTextContent=this.preprocessedTextContent,e.formattingContext=this.formattingContext,e.repeatOnBreak=this.repeatOnBreak,e.pluginProps=Object.create(this.pluginProps),e.fragmentIndex=this.fragmentIndex,e.afterIfContinues=this.afterIfContinues,e.footnotePolicy=this.footnotePolicy,e},e.modify=function(){return this.shared?this.cloneItem():this},e.copy=function(){var t=this;do{if(t.shared)break;t.shared=!0,t=t.parent}while(t);return this},e.clone=function(){for(var t,e=this.cloneItem(),n=e;null!=(t=n.parent);)t=t.cloneItem(),n.parent=t,n=t;return e},e.toNodePositionStep=function(){return{node:this.sourceNode,shadowType:this.shadowType,shadowContext:this.shadowContext,nodeShadow:this.nodeShadow,shadowSibling:this.shadowSibling?this.shadowSibling.toNodePositionStep():null,formattingContext:this.formattingContext,fragmentIndex:this.fragmentIndex}},e.toNodePosition=function(){var t=this,e=[];t.shadowType===kr.ShadowType.ROOTLESS&&(t.floatReference!==Fr.FloatReference.INLINE||"footnote"===t.floatSide)&&t.shadowContext.styler instanceof Hr&&(t=t.parent);do{t.firstPseudo&&t.parent&&t.parent.firstPseudo!==t.firstPseudo||e.push(t.toNodePositionStep()),t=t.parent}while(t);return{steps:e,offsetInNode:this.preprocessedTextContent?_r(this.preprocessedTextContent,this.offsetInNode,-1):this.offsetInNode,after:this.after,preprocessedTextContent:this.preprocessedTextContent}},e.isInsideBFC=function(){for(var t=this.parent;t;){if(t.establishesBFC)return!0;t=t.parent}return!1},e.getContainingBlockForAbsolute=function(){for(var t=this.parent;t;){if(t.containingBlockForAbsolute)return t;t=t.parent}return null},e.walkUpBlocks=function(t){for(var e=this;e;)e.inline||t(e),e=e.parent},e.belongsTo=function(t){return this.formattingContext===t&&!!this.parent&&this.parent.formattingContext===t},t}(),ho=function(){function t(t){this.primary=t,this.floats=null}var e=t.prototype;return e.clone=function(){var e=new t(this.primary);if(this.floats){e.floats=[];for(var n=0;n<this.floats.length;++n)e.floats[n]=this.floats[n]}return e},e.isSamePosition=function(t){if(!t)return!1;if(this===t)return!0;if(!io(this.primary,t.primary))return!1;if(this.floats){if(!t.floats||this.floats.length!==t.floats.length)return!1;for(var e=0;e<this.floats.length;e++)if(!io(this.floats[e],t.floats[e]))return!1}else if(t.floats)return!1;return!0},t}(),fo=function(){function t(t,e){this.chunkPosition=t,this.flowChunk=e}var e=t.prototype;return e.clone=function(){return new t(this.chunkPosition.clone(),this.flowChunk)},e.isSamePosition=function(t){return!!t&&(this===t||this.chunkPosition.isSamePosition(t.chunkPosition))},t}(),po=function(){function t(){this.positions=[],this.startSide="any",this.breakAfter=null}var e=t.prototype;return e.clone=function(){for(var e=new t,n=this.positions,i=e.positions,r=0;r<n.length;r++)i[r]=n[r].clone();return e.startSide=this.startSide,e.breakAfter=this.breakAfter,e},e.isSamePosition=function(t){if(this===t)return!0;if(!t||this.positions.length!==t.positions.length)return!1;for(var e=0;e<this.positions.length;e++)if(!this.positions[e].isSamePosition(t.positions[e]))return!1;return!0},e.hasContent=function(t){return this.positions.length>0&&this.positions[0].flowChunk.startOffset<=t},t}(),go=function(){function t(){this.page=0,this.flows={},this.flowPositions={},this.highestSeenOffset=0}var e=t.prototype;return e.clone=function(){var e=new t;for(var n in e.page=this.page,e.highestSeenNode=this.highestSeenNode,e.highestSeenOffset=this.highestSeenOffset,e.lookupPositionOffset=this.lookupPositionOffset,e.flows=this.flows,this.flowPositions)e.flowPositions[n]=this.flowPositions[n].clone();return e},e.isSamePosition=function(t){if(this===t)return!0;if(!t||this.page!==t.page||this.highestSeenOffset!==t.highestSeenOffset)return!1;var e=Object.keys(this.flowPositions),n=Object.keys(t.flowPositions);if(e.length!==n.length)return!1;for(var i=0,r=e;i<r.length;i++){var o=r[i];if(!this.flowPositions[o].isSamePosition(t.flowPositions[o]))return!1}return!0},e.hasContent=function(t,e){var n=this.flowPositions[t];return!!n&&n.hasContent(e)},e.startSideOfFlow=function(t){var e=this.flowPositions[t];return e?e.startSide:"any"},e.firstFlowChunkOfFlow=function(t){var e=this.flowPositions[t];if(!e)return null;var n=e.positions[0];return n?n.flowChunk:null},t}(),mo=function(){function t(t){this.element=t,this.left=0,this.top=0,this.marginLeft=0,this.marginRight=0,this.marginTop=0,this.marginBottom=0,this.borderLeft=0,this.borderRight=0,this.borderTop=0,this.borderBottom=0,this.paddingLeft=0,this.paddingRight=0,this.paddingTop=0,this.paddingBottom=0,this.width=0,this.height=0,this.originX=0,this.originY=0,this.exclusions=null,this.innerShape=null,this.computedBlockSize=0,this.snapWidth=0,this.snapHeight=0,this.snapOffsetX=0,this.snapOffsetY=0,this.vertical=!1}var e=t.prototype;return e.getInsetTop=function(){return this.marginTop+this.borderTop+this.paddingTop},e.getInsetBottom=function(){return this.marginBottom+this.borderBottom+this.paddingBottom},e.getInsetLeft=function(){return this.marginLeft+this.borderLeft+this.paddingLeft},e.getInsetRight=function(){return this.marginRight+this.borderRight+this.paddingRight},e.getInsetBefore=function(){return this.vertical?this.getInsetRight():this.getInsetTop()},e.getInsetAfter=function(){return this.vertical?this.getInsetLeft():this.getInsetBottom()},e.getInsetStart=function(){return this.vertical?this.getInsetTop():this.getInsetLeft()},e.getInsetEnd=function(){return this.vertical?this.getInsetBottom():this.getInsetRight()},e.getBeforeEdge=function(t){return this.vertical?t.right:t.top},e.getAfterEdge=function(t){return this.vertical?t.left:t.bottom},e.getStartEdge=function(t){return this.vertical?t.top:t.left},e.getEndEdge=function(t){return this.vertical?t.bottom:t.right},e.getInlineSize=function(t){return this.vertical?t.bottom-t.top:t.right-t.left},e.getBoxSize=function(t){return this.vertical?t.right-t.left:t.bottom-t.top},e.getBoxDir=function(){return this.vertical?-1:1},e.getInlineDir=function(){return 1},e.copyFrom=function(t){this.element=t.element,this.left=t.left,this.top=t.top,this.marginLeft=t.marginLeft,this.marginRight=t.marginRight,this.marginTop=t.marginTop,this.marginBottom=t.marginBottom,this.borderLeft=t.borderLeft,this.borderRight=t.borderRight,this.borderTop=t.borderTop,this.borderBottom=t.borderBottom,this.paddingLeft=t.paddingLeft,this.paddingRight=t.paddingRight,this.paddingTop=t.paddingTop,this.paddingBottom=t.paddingBottom,this.width=t.width,this.height=t.height,this.originX=t.originX,this.originY=t.originY,this.innerShape=t.innerShape,this.exclusions=t.exclusions,this.computedBlockSize=t.computedBlockSize,this.snapWidth=t.snapWidth,this.snapHeight=t.snapHeight,this.vertical=t.vertical},e.setVerticalPosition=function(t,e){this.top=t,this.height=e,et(this.element,"top",t+"px"),et(this.element,"height",e+"px")},e.setHorizontalPosition=function(t,e){this.left=t,this.width=e,et(this.element,"left",t+"px"),et(this.element,"width",e+"px")},e.setBlockPosition=function(t,e){this.vertical?this.setHorizontalPosition(t+e*this.getBoxDir(),e):this.setVerticalPosition(t,e)},e.setInlinePosition=function(t,e){this.vertical?this.setVerticalPosition(t,e):this.setHorizontalPosition(t,e)},e.clear=function(){for(var t,e=this.element;t=e.lastChild;)e.removeChild(t)},e.getInnerShape=function(){var t=this.getInnerRect();return this.innerShape?this.innerShape.withOffset(t.x1,t.y1):fn(t.x1,t.y1,t.x2,t.y2)},e.getInnerRect=function(){var t=this.originX+this.left+this.getInsetLeft(),e=this.originY+this.top+this.getInsetTop();return new rn(t,e,t+this.width,e+this.height)},e.getPaddingRect=function(){var t=this.originX+this.left+this.marginLeft+this.borderLeft,e=this.originY+this.top+this.marginTop+this.borderTop;return new rn(t,e,t+(this.paddingLeft+this.width+this.paddingRight),e+(this.paddingTop+this.height+this.paddingBottom))},e.getOuterShape=function(t,e){var n=this.getOuterRect();return In(t,n.x1,n.y1,n.x2-n.x1,n.y2-n.y1,e)},e.getOuterRect=function(){var t=this.originX+this.left,e=this.originY+this.top,n=this.getInsetLeft()+this.width+this.getInsetRight(),i=this.getInsetTop()+this.height+this.getInsetBottom();return new rn(t,e,t+n,e+i)},t}(),vo=function(t){function e(e,n,i,r){var o;return(o=t.call(this)||this).elem=e,o.context=n,o.rootContentValue=i,o.exprContentListener=r,o}I(e,t);var n=e.prototype;return n.visitStrInner=function(t,e){e||(e=this.elem.ownerDocument.createTextNode(t)),this.elem.appendChild(e)},n.visitStr=function(t){return this.visitStrInner(t.str),null},n.visitURL=function(t){if(this.rootContentValue.url)this.elem.setAttribute("src",t.url);else{var e=this.elem.ownerDocument.createElementNS(W.XHTML,"img");e.setAttribute("src",t.url),this.elem.appendChild(e)}return null},n.visitSpaceList=function(t){return this.visitValues(t.values),null},n.visitExpr=function(t){var e=t.toExpr(),n=e.evaluate(this.context);if("string"==typeof n){e instanceof me&&(n=wr(e.scope,new yi(n,null),"").stringValue());var i=this.exprContentListener(e,n,this.elem.ownerDocument);this.visitStrInner(n,i)}return null},e}(Ie);function Eo(t){return null!=t&&t!==Ye.normal&&t!==Ye.none&&t!==Ye.inherit}var bo={azimuth:!0,"border-collapse":!0,"border-spacing":!0,"caption-side":!0,"clip-rule":!0,color:!0,"color-interpolation":!0,"color-rendering":!0,cursor:!0,direction:!0,elevation:!0,"empty-cells":!0,fill:!0,"fill-opacity":!0,"fill-rule":!0,"font-kerning":!0,"font-size":!0,"font-size-adjust":!0,"font-family":!0,"font-feature-settings":!0,"font-style":!0,"font-stretch":!0,"font-variant":!0,"font-weight":!0,"glyph-orientation-vertical":!0,hyphens:!0,"hyphenate-character":!0,"hyphenate-limit-chars":!0,"hyphenate-limit-last":!0,"image-rendering":!0,"image-resolution":!0,"letter-spacing":!0,"line-break":!0,"line-height":!0,"list-style-image":!0,"list-style-position":!0,"list-style-type":!0,marker:!0,"marker-end":!0,"marker-mid":!0,"marker-start":!0,orphans:!0,"overflow-wrap":!0,"paint-order":!0,"pointer-events":!0,"pitch-range":!0,quotes:!0,richness:!0,"ruby-align":!0,"ruby-position":!0,"speak-header":!0,"speak-numeral":!0,"speak-punctuation":!0,"speech-rate":!0,"shape-rendering":!0,stress:!0,stroke:!0,"stroke-dasharray":!0,"stroke-dashoffset":!0,"stroke-linecap":!0,"stroke-linejoin":!0,"stroke-miterlimit":!0,"stroke-opacity":!0,"stroke-width":!0,"tab-size":!0,"text-align":!0,"text-align-last":!0,"text-anchor":!0,"text-decoration-skip":!0,"text-emphasis-color":!0,"text-emphasis-position":!0,"text-emphasis-style":!0,"text-combine-upright":!0,"text-indent":!0,"text-justify":!0,"text-rendering":!0,"text-size-adjust":!0,"text-transform":!0,"text-underline-position":!0,visibility:!0,"voice-family":!0,volume:!0,"white-space":!0,widows:!0,"word-break":!0,"word-spacing":!0,"word-wrap":!0,"writing-mode":!0},Co=["box-decoration-break","image-resolution","orphans","widows"];var yo={"http://www.idpf.org/2007/ops":!0,"http://www.w3.org/1999/xhtml":!0,"http://www.w3.org/2000/svg":!0},wo=["margin-%","padding-%","border-%-width","border-%-style","border-%-color","%"],Do=["max-%","min-%","%"],So=function(){for(var t=["left","right","top","bottom"],e={width:!0,height:!0,"max-width":!0,"max-height":!0,"min-width":!0,"min-height":!0},n=0;n<wo.length;n++)for(var i=0;i<t.length;i++)e[wo[n].replace("%",t[i])]=!0;return e}();function No(t,e){for(var n,i={},r=_(wo);!(n=r()).done;){var o=n.value;for(var a in t){var s=o.replace("%",a),u=o.replace("%",t[a]);i[s]=u,i[u]=s}}for(var l,c=_(Do);!(l=c()).done;){var h=l.value;for(var f in e){var d=h.replace("%",f),p=h.replace("%",e[f]);i[d]=p,i[p]=d}}return i}var To=No({"block-start":"right","block-end":"left","inline-start":"top","inline-end":"bottom"},{"block-size":"width","inline-size":"height"}),Ao=No({"block-start":"top","block-end":"bottom","inline-start":"left","inline-end":"right"},{"block-size":"height","inline-size":"width"}),xo=No({"block-start":"right","block-end":"left","inline-start":"bottom","inline-end":"top"},{"block-size":"width","inline-size":"height"}),Io=No({"block-start":"top","block-end":"bottom","inline-start":"right","inline-end":"left"},{"block-size":"height","inline-size":"width"}),Fo=function(){function t(t,e){this.value=t,this.priority=e}var e=t.prototype;return e.getBaseValue=function(){return this},e.filterValue=function(e){var n=this.value.visit(e);return n===this.value?this:new t(n,this.priority)},e.increaseSpecificity=function(e){return 0==e?this:new t(this.value,this.priority+e)},e.evaluate=function(t,e){return Sr(t,this.value,e)},e.isEnabled=function(t){return!0},t}(),Po=function(t){function e(e,n,i){var r;return(r=t.call(this,e,n)||this).condition=i,r}I(e,t);var n=e.prototype;return n.getBaseValue=function(){return new Fo(this.value,this.priority)},n.filterValue=function(t){var n=this.value.visit(t);return n===this.value?this:new e(n,this.priority,this.condition)},n.increaseSpecificity=function(t){return 0==t?this:new e(this.value,this.priority+t,this.condition)},n.isEnabled=function(t){return!!this.condition.evaluate(t)},e}(Fo);function Oo(t,e,n){return(null==e||n.priority>e.priority)&&n.isEnabled(t)?n.getBaseValue():e}var Ro={"region-id":!0,"fragment-selector-id":!0};function ko(t){return!!Ro[t]}function Lo(t){return"_"!=t.charAt(0)&&!Ro[t]}function Bo(t){return!!bo[t]}function _o(t,e){return t[e]}function Mo(t,e,n){n?t[e]=n:delete t[e]}function Uo(t,e){return t[e]}function Vo(t,e){var n=t[e];return n||(t[e]=n={}),n}var zo=function(t){var e=t._viewConditionalStyles;return e||(t._viewConditionalStyles=e=[]),e};function Ho(t,e){return t[e]}function Go(t,e){var n=t[e];return n||(t[e]=n=[]),n}function Wo(t,e,n,i,r,o,a){for(var s in[{id:r,styleKey:"_pseudos"},{id:o,styleKey:"_regions"}].forEach((function(t){if(t.id){var n=Vo(e,t.styleKey);(e=n[t.id])||(n[t.id]=e={})}})),a&&zo(e).push({styles:e={},matcher:a}),n)if("_"!=s.charAt(0))if(ko(s)){var u=Ho(n,s),l=Go(e,s);Array.prototype.push.apply(l,u)}else{var c=_o(n,s).increaseSpecificity(i),h=_o(e,s);Mo(e,s,Oo(t,h,c))}}function Xo(t,e){if(t.length>0){t.sort((function(t,e){return e.getPriority()-t.getPriority()}));for(var n=null,i=t.length-1;i>=0;i--)(n=t[i]).chained=e,e=n;return n}return e}var jo=function(t){function e(e,n){var i;return(i=t.call(this)||this).props=e,i.context=n,i.propName="",i}I(e,t);var n=e.prototype;return n.setPropName=function(t){this.propName=t},n.getFontSize=function(){var t=_o(this.props,"font-size").value;if(!function(t){switch(t.toLowerCase()){case"px":case"in":case"pt":case"pc":case"cm":case"mm":case"q":return!0;default:return!1}}(t.unit))throw new Error("Unexpected state");return t.num*Ht[t.unit]},n.visitNumeric=function(t){if("font-size"===this.propName)return function(t,e,n){var i=(t=Ko(t,e,n)).unit,r=t.num;return"px"===i?t:new Me("%"===i?r/100*e:r*n.queryUnitSize(i,!1),"px")}(t,this.getFontSize(),this.context);if("em"==t.unit||"ex"==t.unit||"rem"==t.unit)return Ko(t,this.getFontSize(),this.context);if("%"==t.unit){if("line-height"===this.propName)return t;var e=this.propName.match(/height|^(top|bottom)$/)?"vh":"vw";return new Me(t.num,e)}return t},n.visitExpr=function(t){return"font-size"==this.propName?Sr(this.context,t,this.propName).visit(this):t},e}(Fe);function Ko(t,e,n){var i=t.unit,r=t.num;return"em"===i||"ex"===i?new Me(r*(Ht[i]/Ht.em)*e,"px"):"rem"===i?new Me(r*n.fontSize(),"px"):t}var $o=function(){function t(){}var e=t.prototype;return e.apply=function(t){},e.mergeWith=function(t){return new Yo([this,t])},e.clone=function(){return this},t}(),qo=function(t){function e(e){var n;return(n=t.call(this)||this).conditionItem=e,n}return I(e,t),e.prototype.apply=function(t){t.pushConditionItem(this.conditionItem.fresh(t))},e}($o),Yo=function(t){function e(e){var n;return(n=t.call(this)||this).list=e,n}I(e,t);var n=e.prototype;return n.apply=function(t){for(var e=0;e<this.list.length;e++)this.list[e].apply(t)},n.mergeWith=function(t){return this.list.push(t),this},n.clone=function(){return new e([].concat(this.list))},e}($o),Zo=function(t){function e(e,n,i,r,o){var a;return(a=t.call(this)||this).style=e,a.specificity=n,a.pseudoelement=i,a.regionId=r,a.viewConditionId=o,a}return I(e,t),e.prototype.apply=function(t){Wo(t.context,t.currentStyle,this.style,this.specificity,this.pseudoelement,this.regionId,t.buildViewConditionMatcher(this.viewConditionId))},e}($o),Qo=function(t){function e(){var e;return(e=t.call(this)||this).chained=null,e}I(e,t);var n=e.prototype;return n.apply=function(t){this.chained.apply(t)},n.getPriority=function(){return 0},n.makePrimary=function(t){return!1},e}($o),Jo=function(t){function e(e){var n;return(n=t.call(this)||this).className=e,n}I(e,t);var n=e.prototype;return n.apply=function(t){t.currentClassNames.includes(this.className)&&this.chained.apply(t)},n.getPriority=function(){return 10},n.makePrimary=function(t){return this.chained&&t.insertInTable(t.classes,this.className,this.chained),!0},e}(Qo),ta=function(t){function e(e){var n;return(n=t.call(this)||this).id=e,n}I(e,t);var n=e.prototype;return n.apply=function(t){t.currentId!=this.id&&t.currentXmlId!=this.id||this.chained.apply(t)},n.getPriority=function(){return 11},n.makePrimary=function(t){return this.chained&&t.insertInTable(t.ids,this.id,this.chained),!0},e}(Qo),ea=function(t){function e(e){var n;return(n=t.call(this)||this).localName=e,n}I(e,t);var n=e.prototype;return n.apply=function(t){t.currentLocalName==this.localName&&this.chained.apply(t)},n.getPriority=function(){return 8},n.makePrimary=function(t){return this.chained&&t.insertInTable(t.tags,this.localName,this.chained),!0},e}(Qo),na=function(t){function e(e,n){var i;return(i=t.call(this)||this).ns=e,i.localName=n,i}I(e,t);var n=e.prototype;return n.apply=function(t){t.currentLocalName==this.localName&&t.currentNamespace==this.ns&&this.chained.apply(t)},n.getPriority=function(){return 8},n.makePrimary=function(t){if(this.chained){var e=t.nsPrefix[this.ns];e||(e="ns"+t.nsCount+++":",t.nsPrefix[this.ns]=e),t.insertInTable(t.nstags,e+this.localName,this.chained)}return!0},e}(Qo),ia=function(t){function e(e){var n;return(n=t.call(this)||this).epubTypePatt=e,n}return I(e,t),e.prototype.apply=function(t){var e=t.currentElement;if(e&&"a"==t.currentLocalName){var n=e.getAttribute("href");if(n&&n.match(/^#/)){var i=n.substring(1),r=e.ownerDocument.getElementById(i);if(r){var o=r.getAttributeNS(W.epub,"type");o&&o.match(this.epubTypePatt)&&this.chained.apply(t)}}}},e}(Qo),ra=function(t){function e(e){var n;return(n=t.call(this)||this).ns=e,n}return I(e,t),e.prototype.apply=function(t){t.currentNamespace==this.ns&&this.chained.apply(t)},e}(Qo),oa=function(t){function e(e,n){var i;return(i=t.call(this)||this).ns=e,i.name=n,i}return I(e,t),e.prototype.apply=function(t){t.currentElement&&t.currentElement.hasAttributeNS(this.ns,this.name)&&this.chained.apply(t)},e}(Qo),aa=function(t){function e(e,n,i){var r;return(r=t.call(this)||this).ns=e,r.name=n,r.value=i,r}I(e,t);var n=e.prototype;return n.apply=function(t){t.currentElement&&t.currentElement.getAttributeNS(this.ns,this.name)==this.value&&this.chained.apply(t)},n.getPriority=function(){return"type"==this.name&&this.ns==W.epub?9:0},n.makePrimary=function(t){return"type"==this.name&&this.ns==W.epub&&(this.chained&&t.insertInTable(t.epubtypes,this.value,this.chained),!0)},e}(Qo),sa=function(t){function e(e,n){var i;return(i=t.call(this)||this).ns=e,i.name=n,i}I(e,t);var n=e.prototype;return n.apply=function(t){if(t.currentElement){var e=t.currentElement.getAttributeNS(this.ns,this.name);e&&yo[e]&&this.chained.apply(t)}},n.getPriority=function(){return 0},n.makePrimary=function(t){return!1},e}(Qo),ua=function(t){function e(e,n,i){var r;return(r=t.call(this)||this).ns=e,r.name=n,r.regexp=i,r}return I(e,t),e.prototype.apply=function(t){if(t.currentElement){var e=t.currentElement.getAttributeNS(this.ns,this.name);e&&e.match(this.regexp)&&this.chained.apply(t)}},e}(Qo),la=function(t){function e(e){var n;return(n=t.call(this)||this).langRegExp=e,n}return I(e,t),e.prototype.apply=function(t){t.lang.match(this.langRegExp)&&this.chained.apply(t)},e}(Qo),ca=function(t){function e(){return t.call(this)||this}I(e,t);var n=e.prototype;return n.apply=function(t){t.isFirst&&this.chained.apply(t)},n.getPriority=function(){return 6},e}(Qo),ha=function(t){function e(){return t.call(this)||this}I(e,t);var n=e.prototype;return n.apply=function(t){t.isRoot&&this.chained.apply(t)},n.getPriority=function(){return 12},e}(Qo),fa=function(t){function e(e,n){var i;return(i=t.call(this)||this).a=e,i.b=n,i}return I(e,t),e.prototype.matchANPlusB=function(t){return Nr(t,this.a,this.b)},e}(Qo),da=function(t){function e(e,n){return t.call(this,e,n)||this}I(e,t);var n=e.prototype;return n.apply=function(t){this.matchANPlusB(t.currentSiblingOrder)&&this.chained.apply(t)},n.getPriority=function(){return 5},e}(fa),pa=function(t){function e(e,n){return t.call(this,e,n)||this}I(e,t);var n=e.prototype;return n.apply=function(t){this.matchANPlusB(t.currentSiblingTypeCounts[t.currentNamespace][t.currentLocalName])&&this.chained.apply(t)},n.getPriority=function(){return 5},e}(fa),ga=function(t){function e(e,n){return t.call(this,e,n)||this}I(e,t);var n=e.prototype;return n.apply=function(t){var e=t.currentFollowingSiblingOrder;null===e&&(e=t.currentFollowingSiblingOrder=t.currentElement.parentNode.childElementCount-t.currentSiblingOrder+1),this.matchANPlusB(e)&&this.chained.apply(t)},n.getPriority=function(){return 4},e}(fa),ma=function(t){function e(e,n){return t.call(this,e,n)||this}I(e,t);var n=e.prototype;return n.apply=function(t){var e=t.currentFollowingSiblingTypeCounts;if(!e[t.currentNamespace]){var n=t.currentElement;do{var i=n.namespaceURI,r=n.localName,o=e[i];o||(o=e[i]={}),o[r]=(o[r]||0)+1}while(n=n.nextElementSibling)}this.matchANPlusB(e[t.currentNamespace][t.currentLocalName])&&this.chained.apply(t)},n.getPriority=function(){return 4},e}(fa),va=function(t){function e(){return t.call(this)||this}I(e,t);var n=e.prototype;return n.apply=function(t){for(var e=t.currentElement.firstChild;e;){switch(e.nodeType){case Node.ELEMENT_NODE:return;case Node.TEXT_NODE:if(e.length>0)return}e=e.nextSibling}this.chained.apply(t)},n.getPriority=function(){return 4},e}(Qo),Ea=function(t){function e(){return t.call(this)||this}I(e,t);var n=e.prototype;return n.apply=function(t){!1===t.currentElement.disabled&&this.chained.apply(t)},n.getPriority=function(){return 5},e}(Qo),ba=function(t){function e(){return t.call(this)||this}I(e,t);var n=e.prototype;return n.apply=function(t){!0===t.currentElement.disabled&&this.chained.apply(t)},n.getPriority=function(){return 5},e}(Qo),Ca=function(t){function e(){return t.call(this)||this}I(e,t);var n=e.prototype;return n.apply=function(t){var e=t.currentElement;!0!==e.selected&&!0!==e.checked||this.chained.apply(t)},n.getPriority=function(){return 5},e}(Qo),ya=function(t){function e(e){var n;return(n=t.call(this)||this).condition=e,n}I(e,t);var n=e.prototype;return n.apply=function(t){if(t.conditions[this.condition])try{t.dependentConditions.push(this.condition),this.chained.apply(t)}finally{t.dependentConditions.pop()}},n.getPriority=function(){return 5},e}(Qo),wa=function(t){function e(){var e;return(e=t.call(this)||this).applied=!1,e}I(e,t);var n=e.prototype;return n.apply=function(t){this.applied=!0},n.clone=function(){var t=new e;return t.applied=this.applied,t},e}($o),Da=function(t){function e(e){var n;return(n=t.call(this)||this).checkAppliedAction=new wa,n.firstAction=Xo(e,n.checkAppliedAction),n}I(e,t);var n=e.prototype;return n.apply=function(t){this.firstAction.apply(t),this.checkAppliedAction.applied||this.chained.apply(t),this.checkAppliedAction.applied=!1},n.getPriority=function(){return this.firstAction.getPriority()},e}(Qo),Sa=function(){function t(t,e,n){this.condition=t,this.viewConditionId=e,this.viewCondition=n}var e=t.prototype;return e.increment=function(t){t.increment(this.condition,this.viewCondition)},e.decrement=function(t){t.decrement(this.condition,this.viewCondition)},e.buildViewConditionMatcher=function(t){return t.buildViewConditionMatcher(this.viewConditionId)},t}(),Na=function(t){function e(e,n,i){return t.call(this,e,n,i)||this}I(e,t);var n=e.prototype;return n.fresh=function(t){return new e(this.condition,this.viewConditionId,this.buildViewConditionMatcher(t))},n.push=function(t,e){return 0==e&&this.increment(t),!1},n.pop=function(t,e){return 0==e&&(this.decrement(t),!0)},e}(Sa),Ta=function(t){function e(e,n,i){return t.call(this,e,n,i)||this}I(e,t);var n=e.prototype;return n.fresh=function(t){return new e(this.condition,this.viewConditionId,this.buildViewConditionMatcher(t))},n.push=function(t,e){return 0==e?this.increment(t):1==e&&this.decrement(t),!1},n.pop=function(t,e){return 0==e?(this.decrement(t),!0):(1==e&&this.increment(t),!1)},e}(Sa),Aa=function(t){function e(e,n,i){var r;return(r=t.call(this,e,n,i)||this).fired=!1,r}I(e,t);var n=e.prototype;return n.fresh=function(t){return new e(this.condition,this.viewConditionId,this.buildViewConditionMatcher(t))},n.push=function(t,e){return!!this.fired&&(this.decrement(t),!0)},n.pop=function(t,e){return this.fired?(this.decrement(t),!0):(0==e&&(this.fired=!0,this.increment(t)),!1)},e}(Sa),xa=function(t){function e(e,n,i){var r;return(r=t.call(this,e,n,i)||this).fired=!1,r}I(e,t);var n=e.prototype;return n.fresh=function(t){return new e(this.condition,this.viewConditionId,this.buildViewConditionMatcher(t))},n.push=function(t,e){return this.fired&&(-1==e?this.increment(t):0==e&&this.decrement(t)),!1},n.pop=function(t,e){if(this.fired){if(-1==e)return this.decrement(t),!0;0==e&&this.increment(t)}else 0==e&&(this.fired=!0,this.increment(t));return!1},e}(Sa),Ia=function(){function t(t,e){this.afterprop=t,this.element=e}var e=t.prototype;return e.fresh=function(t){return this},e.push=function(t,e){return!1},e.pop=function(t,e){return 0==e&&(t.processPseudoelementProps(this.afterprop,this.element),!0)},t}(),Fa=function(){function t(t){this.lang=t}var e=t.prototype;return e.fresh=function(t){return this},e.push=function(t,e){return!1},e.pop=function(t,e){return 0==e&&(t.lang=this.lang,!0)},t}(),Pa=function(){function t(t){this.oldQuotes=t}var e=t.prototype;return e.fresh=function(t){return this},e.push=function(t,e){return!1},e.pop=function(t,e){return 0==e&&(t.quotes=this.oldQuotes,!0)},t}(),Oa=function(t){function e(e){var n;return(n=t.call(this)||this).element=e,n}I(e,t);var n=e.prototype;return n.createValueFromString=function(t,e){switch(e){case"url":return new He(t||"about:invalid");case"string":default:return new ke(t||"")}},n.visitFunc=function(e){if("attr"!==e.name)return t.prototype.visitFunc.call(this,e);var n,i="string",r=null;if(e.values[0]instanceof We){var o=e.values[0].values;o.length>=2&&(i=o[1].stringValue()),r=o[0].stringValue()}else r=e.values[0].stringValue();return n=this.createValueFromString(e.values.length>1?e.values[1].stringValue():null,i),this.element&&this.element.hasAttribute(r)?this.createValueFromString(this.element.getAttribute(r),i):n},e}(Fe);function Ra(t){if(Eo(t)){if(t instanceof ke)return t.stringValue();if(t instanceof We)return t.values.map((function(t){return Ra(t)})).join("")}return""}var ka=function(t){function e(e,n,i){var r;return(r=t.call(this)||this).cascade=e,r.element=n,r.counterResolver=i,r}I(e,t);var n=e.prototype;return n.visitIdent=function(t){var e=this.cascade,n=e.quotes,i=Math.floor(n.length/2)-1;switch(t.name){case"open-quote":var r=n[2*Math.min(i,e.quoteDepth)];return e.quoteDepth++,r;case"close-quote":return e.quoteDepth>0&&e.quoteDepth--,n[2*Math.min(i,e.quoteDepth)+1];case"no-open-quote":return e.quoteDepth++,new ke("");case"no-close-quote":return e.quoteDepth>0&&e.quoteDepth--,new ke("")}return t},n.format=function(t,e){var n,i=!1,r=!1;null!=(n=e.match(/^upper-(.*)/))?(i=!0,e=n[1]):null!=(n=e.match(/^lower-(.*)/))&&(r=!0,e=n[1]);var o="";return La[e]?o=function(t,e){if(e>t[0]||e<=0||e!=Math.round(e))return"";for(var n="",i=1;i<t.length;i+=2){var r=t[i],o=Math.floor(e/r);if(o>20)return"";for(e-=o*r;o>0;)n+=t[i+1],o--}return n}(La[e],t):Ba[e]?o=function(t,e){if(e<=0||e!=Math.round(e))return"";var n=function(t){for(var e=[],n=0;n<t.length;)if("-"==t.substr(n+1,1)){var i=t.charCodeAt(n),r=t.charCodeAt(n+2);n+=3;for(var o=i;o<=r;o++)e.push(String.fromCharCode(o))}else e.push(t.substr(n++,1));return e}(t),i="";do{var r=--e%n.length;i=n[r]+i,e=(e-r)/n.length}while(e>0);return i}(Ba[e],t):null!=_a[e]?o=_a[e]:"decimal-leading-zero"==e?1==(o=""+t).length&&(o="0"+o):o="cjk-ideographic"==e||"trad-chinese-informal"==e?function(t,e){if(t>9999||t<-9999)return""+t;if(0==t)return e.digits.charAt(0);var n=new rt;if(t<0&&(n.append(e.negative),t=-t),t<10)n.append(e.digits.charAt(t));else if(!e.formal&&t<=19)n.append(e.markers.charAt(0)),0!=t&&n.append(e.digits.charAt(t-10));else{var i=Math.floor(t/1e3);i&&(n.append(e.digits.charAt(i)),n.append(e.markers.charAt(2)));var r=Math.floor(t/100)%10;r&&(n.append(e.digits.charAt(r)),n.append(e.markers.charAt(1)));var o=Math.floor(t/10)%10;o&&(n.append(e.digits.charAt(o)),n.append(e.markers.charAt(0)));var a=t%10;a&&n.append(e.digits.charAt(a))}return n.toString()}(t,Ma):""+t,i?o.toUpperCase():r?o.toLowerCase():o},n.visitFuncCounter=function(t){var e=this,n=t[0].toString(),i=t.length>1?t[1].stringValue():"decimal",r=this.cascade.counters[n];if(r&&r.length)return new ke(this.format(r&&r.length&&r[r.length-1]||0,i));var o=new Ke(this.counterResolver.getPageCounterVal(n,(function(t){return e.format(t||0,i)})));return new We([o])},n.visitFuncCounters=function(t){var e=this,n=t[0].toString(),i=t[1].stringValue(),r=t.length>2?t[2].stringValue():"decimal",o=this.cascade.counters[n],a=new rt;if(o&&o.length)for(var s=0;s<o.length;s++)s>0&&a.append(i),a.append(this.format(o[s],r));var u=new Ke(this.counterResolver.getPageCountersVal(n,(function(t){var n=[];if(t.length)for(var o=0;o<t.length;o++)n.push(e.format(t[o],r));var s=a.toString();return s.length&&n.push(s),n.length?n.join(i):e.format(0,r)})));return new We([u])},n.visitFuncTargetCounter=function(t){var e,n=this,i=t[0];e=i instanceof He?i.url:i.stringValue();var r=t[1].toString(),o=t.length>2?t[2].stringValue():"decimal",a=new Ke(this.counterResolver.getTargetCounterVal(e,r,(function(t){return n.format(t||0,o)})));return new We([a])},n.visitFuncTargetCounters=function(t){var e,n=this,i=t[0];e=i instanceof He?i.url:i.stringValue();var r=t[1].toString(),o=t[2].stringValue(),a=t.length>3?t[3].stringValue():"decimal",s=new Ke(this.counterResolver.getTargetCountersVal(e,r,(function(t){var e=t.map((function(t){return n.format(t,a)}));return e.length?e.join(o):n.format(0,a)})));return new We([s])},n.visitFuncString=function(t){var e=t.length>0?t[0].stringValue():"",n=t.length>1?t[1].stringValue():"first",i=new Ke(this.counterResolver.getNamedStringVal(e,n));return new We([i])},n.visitFuncContent=function(t){var e=t.length>0?t[0].stringValue():"text",n="";switch(e){case"text":case"first-letter":if(n=this.element.textContent.trim().replace(/\s+/g," "),"first-letter"===e){var i=n.match(M);n=i?i[0]:""}break;case"before":case"after":var r,o,a=Uo(this.cascade.currentStyle,"_pseudos");n=Ra(null==a||null==(r=a[e])||null==(o=r.content)?void 0:o.value)}return new ke(n)},n.visitFunc=function(t){switch(t.name){case"counter":if(t.values.length<=2)return this.visitFuncCounter(t.values);break;case"counters":if(t.values.length<=3)return this.visitFuncCounters(t.values);break;case"target-counter":if(t.values.length<=3)return this.visitFuncTargetCounter(t.values);break;case"target-counters":if(t.values.length<=4)return this.visitFuncTargetCounters(t.values);break;case"string":if(t.values.length<=2)return this.visitFuncString(t.values);break;case"content":if(t.values.length<=1)return this.visitFuncContent(t.values)}return f.warn("E_CSS_CONTENT_PROP:",t.toString()),new ke("")},e}(Fe),La={roman:[4999,1e3,"M",900,"CM",500,"D",400,"CD",100,"C",90,"XC",50,"L",40,"XL",10,"X",9,"IX",5,"V",4,"IV",1,"I"],armenian:[9999,9e3,"ք",8e3,"փ",7e3,"ւ",6e3,"ց",5e3,"ր",4e3,"տ",3e3,"վ",2e3,"ս",1e3,"ռ",900,"ջ",800,"պ",700,"չ",600,"ո",500,"շ",400,"ն",300,"յ",200,"մ",100,"ճ",90,"ղ",80,"ձ",70,"հ",60,"կ",50,"ծ",40,"խ",30,"լ",20,"ի",10,"ժ",9,"թ",8,"ը",7,"է",6,"զ",5,"ե",4,"դ",3,"գ",2,"բ",1,"ա"],georgian:[19999,1e4,"ჵ",9e3,"ჰ",8e3,"ჯ",7e3,"ჴ",6e3,"ხ",5e3,"ჭ",4e3,"წ",3e3,"ძ",2e3,"ც",1e3,"ჩ",900,"შ",800,"ყ",700,"ღ",600,"ქ",500,"ფ",400,"ჳ",300,"ტ",200,"ს",100,"რ",90,"ჟ",80,"პ",70,"ო",60,"ჲ",50,"ნ",40,"მ",30,"ლ",20,"კ",10,"ი",9,"თ",8,"ჱ",7,"ზ",6,"ვ",5,"ე",4,"დ",3,"გ",2,"ბ",1,"ა"],hebrew:[999,400,"ת",300,"ש",200,"ר",100,"ק",90,"צ",80,"פ",70,"ע",60,"ס",50,"נ",40,"מ",30,"ל",20,"כ",19,"יט",18,"יח",17,"יז",16,"טז",15,"טו",10,"י",9,"ט",8,"ח",7,"ז",6,"ו",5,"ה",4,"ד",3,"ג",2,"ב",1,"א"]},Ba={latin:"a-z",alpha:"a-z",greek:"α-ρσ-ω",russian:"а-ик-щэ-я"},_a={square:"■",disc:"•",circle:"◦",none:""},Ma={formal:!1,digits:"零一二三四五六七八九",markers:"十百千",negative:"負"};function Ua(t,e){for(var n in t)e[n]=t[n].clone()}var Va,za=function(){function t(){this.nsCount=0,this.nsPrefix={},this.tags={},this.nstags={},this.epubtypes={},this.classes={},this.ids={},this.pagetypes={},this.order=0}var e=t.prototype;return e.clone=function(){var e=new t;for(var n in e.nsCount=this.nsCount,this.nsPrefix)e.nsPrefix[n]=this.nsPrefix[n];return Ua(this.tags,e.tags),Ua(this.nstags,e.nstags),Ua(this.epubtypes,e.epubtypes),Ua(this.classes,e.classes),Ua(this.ids,e.ids),Ua(this.pagetypes,e.pagetypes),e.order=this.order,e},e.insertInTable=function(t,e,n){var i=t[e];i&&(n=i.mergeWith(n)),t[e]=n},e.createInstance=function(t,e,n,i){return new Ha(this,t,e,n,i)},e.nextOrder=function(){return this.order+=1/1048576},t}(),Ha=function(){function t(t,e,n,i,r){this.context=e,this.counterListener=n,this.counterResolver=i,this.stack=[[],[]],this.conditions={},this.currentElement=null,this.currentElementOffset=null,this.currentStyle=null,this.currentClassNames=null,this.currentLocalName="",this.currentNamespace="",this.currentId="",this.currentXmlId="",this.currentNSTag="",this.currentEpubTypes=null,this.currentPageType=null,this.isFirst=!0,this.isRoot=!0,this.counters={},this.counterScoping=[{}],this.quoteDepth=0,this.lang="",this.siblingOrderStack=[0],this.currentSiblingOrder=0,this.siblingTypeCountsStack=[{}],this.currentFollowingSiblingOrder=null,this.followingSiblingTypeCountsStack=[{}],this.viewConditions={},this.dependentConditions=[],this.code=t,this.quotes=[new ke("“"),new ke("”"),new ke("‘"),new ke("’")],this.currentSiblingTypeCounts=this.siblingTypeCountsStack[0],this.followingSiblingOrderStack=[this.currentFollowingSiblingOrder],this.currentFollowingSiblingTypeCounts=this.siblingTypeCountsStack[0]}var e=t.prototype;return e.pushConditionItem=function(t){this.stack[this.stack.length-1].push(t)},e.increment=function(t,e){this.conditions[t]=(this.conditions[t]||0)+1,e&&(this.viewConditions[t]?this.viewConditions[t].push(e):this.viewConditions[t]=[e])},e.decrement=function(t,e){this.conditions[t]--,this.viewConditions[t]&&(this.viewConditions[t]=this.viewConditions[t].filter((function(t){return t!==e})),0===this.viewConditions[t].length&&delete this.viewConditions[t])},e.buildViewConditionMatcher=function(t){var e=this,n=null;t&&(n=Lr.buildViewConditionMatcher(this.currentElementOffset,t));var i=this.dependentConditions.map((function(t){var n=e.viewConditions[t];return n&&n.length>0?1===n.length?n[0]:Lr.buildAnyMatcher([].concat(n)):null})).filter((function(t){return t}));return i.length<=0?n:null===n?1===i.length?i[0]:Lr.buildAllMatcher(i):Lr.buildAllMatcher([n].concat(i))},e.applyAction=function(t,e){var n=t[e];n&&n.apply(this)},e.pushRule=function(t,e,n){this.currentElement=null,this.currentElementOffset=null,this.currentStyle=n,this.currentNamespace="",this.currentLocalName="",this.currentId="",this.currentXmlId="",this.currentClassNames=t,this.currentNSTag="",this.currentEpubTypes=Ga,this.currentPageType=e,this.applyActions()},e.defineCounter=function(t,e){this.counters[t]?this.counters[t].push(e):this.counters[t]=[e];var n=this.counterScoping[this.counterScoping.length-1];n||(this.counterScoping[this.counterScoping.length-1]=n={}),n[t]=!0},e.pushCounters=function(t){var e=Ye.inline,n=t.display;n&&(e=n.evaluate(this.context));var i=null,r=null,o=null,a=t["counter-reset"];if(a){var s=a.evaluate(this.context);s&&(i=Pn(s,!0))}var u=t["counter-set"];if(u){var l=u.evaluate(this.context);l&&(o=Pn(l,!1))}var c,h,f,d,p=t["counter-increment"];if(p){var g=p.evaluate(this.context);g&&(r=Pn(g,!1))}if("ol"!=this.currentLocalName&&"ul"!=this.currentLocalName||this.currentNamespace!=W.XHTML||(i||(i={}),i["ua-list-item"]=(null!=(c=null==(h=this.currentElement)?void 0:h.start)?c:1)-1),e===Ye.list_item&&(r||(r={}),r["ua-list-item"]=1,/^\s*[-+]?\d/.test(null!=(f=null==(d=this.currentElement)?void 0:d.getAttribute("value"))?f:"")&&(i||(i={}),i["ua-list-item"]=this.currentElement.value-1)),i)for(var m in i)this.defineCounter(m,i[m]);if(o)for(var v in o)if(this.counters[v]){var E=this.counters[v];E[E.length-1]=o[v]}else this.defineCounter(v,o[v]);if(r)for(var b in r){this.counters[b]||this.defineCounter(b,0);var C=this.counters[b];C[C.length-1]+=r[b]}if(e===Ye.list_item){var y=this.counters["ua-list-item"];t["ua-list-item-count"]=new Fo(new Ue(y[y.length-1]),0)}this.counterScoping.push(null)},e.popCounters=function(){var t=this.counterScoping.pop();if(t)for(var e in t){var n=this.counters[e];n&&(1==n.length?delete this.counters[e]:n.pop())}},e.setNamedStrings=function(t){var e=t["string-set"];if(e){for(var n,i=_((e=e.filterValue(new ka(this,this.currentElement,this.counterResolver))).value instanceof Xe?e.value.values:[e.value]);!(n=i()).done;){var r=n.value;if(r instanceof We){var o=r.values[0].stringValue(),a=r.values.slice(1).map((function(t){return Ra(t)})).join("");this.counterResolver.setNamedString(o,a,this)}}delete t["string-set"]}},e.processPseudoelementProps=function(t,e){this.pushCounters(t),t.content&&(t.content=t.content.filterValue(new ka(this,e,this.counterResolver))),this.popCounters()},e.pushElement=function(t,e,n){var i=this;this.currentPageType=null,this.currentElement=t,this.currentElementOffset=n,this.currentStyle=e,this.currentNamespace=t.namespaceURI,this.currentLocalName=t.localName;var r=this.code.nsPrefix[this.currentNamespace];this.currentNSTag=r?r+this.currentLocalName:"",this.currentId=t.getAttribute("id"),this.currentXmlId=t.getAttributeNS(W.XML,"id");var o=t.getAttribute("class");this.currentClassNames=o?o.split(/\s+/):Ga;var a=t.getAttributeNS(W.epub,"type");this.currentEpubTypes=a?a.split(/\s+/):Ga;var s=it(t);s&&(this.stack[this.stack.length-1].push(new Fa(this.lang)),this.lang=s.toLowerCase());var u=this.isRoot,l=this.siblingOrderStack;this.currentSiblingOrder=++l[l.length-1],l.push(0);var c=this.siblingTypeCountsStack,h=this.currentSiblingTypeCounts=c[c.length-1],f=h[this.currentNamespace];f||(f=h[this.currentNamespace]={}),f[this.currentLocalName]=(f[this.currentLocalName]||0)+1,c.push({});var d=this.followingSiblingOrderStack;this.currentFollowingSiblingOrder=null!==d[d.length-1]?--d[d.length-1]:null,d.push(null);var p=this.followingSiblingTypeCountsStack,g=this.currentFollowingSiblingTypeCounts=p[p.length-1];g&&g[this.currentNamespace]&&g[this.currentNamespace][this.currentLocalName]--,p.push({}),this.applyActions(),this.applyAttrFilter(t);var m=e.quotes,v=null;if(m){var E=m.evaluate(this.context);E&&(v=new Pa(this.quotes),E===Ye.none?this.quotes=[new ke(""),new ke("")]:E instanceof We&&(this.quotes=E.values))}this.pushCounters(this.currentStyle);var b=this.currentId||this.currentXmlId||t.getAttribute("name")||"";if(u||b){var C={};Object.keys(this.counters).forEach((function(t){C[t]=Array.from(i.counters[t])})),this.counterListener.countersOfId(b,C)}var y=Uo(this.currentStyle,"_pseudos");if(y)for(var w,D=!0,S=_(Wa);!(w=S()).done;){var N=w.value;N||(D=!1);var T=y[N];T&&(D?this.processPseudoelementProps(T,t):this.stack[this.stack.length-2].push(new Ia(T,t)))}this.setNamedStrings(this.currentStyle),v&&this.stack[this.stack.length-2].push(v)},e.applyAttrFilterInner=function(t,e){for(var n in e)Lo(n)&&(e[n]=e[n].filterValue(t))},e.applyAttrFilter=function(t){var e=new Oa(t),n=this.currentStyle,i=Uo(n,"_pseudos");for(var r in i)this.applyAttrFilterInner(e,i[r]);this.applyAttrFilterInner(e,n)},e.applyActions=function(){var t;for(t=0;t<this.currentClassNames.length;t++)this.applyAction(this.code.classes,this.currentClassNames[t]);for(t=0;t<this.currentEpubTypes.length;t++)this.applyAction(this.code.epubtypes,this.currentEpubTypes[t]);this.applyAction(this.code.ids,this.currentId),this.applyAction(this.code.tags,this.currentLocalName),""!=this.currentLocalName&&this.applyAction(this.code.tags,"*"),this.applyAction(this.code.nstags,this.currentNSTag),null!==this.currentPageType&&(this.applyAction(this.code.pagetypes,this.currentPageType),this.applyAction(this.code.pagetypes,"*")),this.stack.push([]);for(var e=1;e>=-1;--e){var n=this.stack[this.stack.length-e-2];for(t=0;t<n.length;)n[t].push(this,e)?n.splice(t,1):t++}this.isFirst=!0,this.isRoot=!1},e.pop=function(){for(var t=1;t>=-1;--t)for(var e=this.stack[this.stack.length-t-2],n=0;n<e.length;)e[n].pop(this,t)?e.splice(n,1):n++;this.stack.pop(),this.isFirst=!1},e.popRule=function(){this.pop()},e.popElement=function(t){this.siblingOrderStack.pop(),this.siblingTypeCountsStack.pop(),this.followingSiblingOrderStack.pop(),this.followingSiblingTypeCountsStack.pop(),this.pop(),this.popCounters()},t}(),Ga=[],Wa=["before","transclusion-before","footnote-call","footnote-marker","inner","first-letter","first-line","","transclusion-after","after"];!function(t){t[t.TOP=0]="TOP",t[t.SELECTOR=1]="SELECTOR",t[t.RULE=2]="RULE"}(Va||(Va={}));var Xa=null,ja=function(t){function e(e,n,i,r,o,a,s){var u;return(u=t.call(this,e,n,s)||this).condition=i,u.regionId=o,u.validatorSet=a,u.chain=null,u.specificity=0,u.elementStyle=null,u.conditionCount=0,u.pseudoelement=null,u.footnoteContent=!1,u.viewConditionId=null,u.cascade=r?r.cascade:Xa?Xa.clone():new za,u.state=Va.TOP,u}I(e,t);var n=e.prototype;return n.insertNonPrimary=function(t){this.cascade.insertInTable(this.cascade.tags,"*",t)},n.processChain=function(t){var e=Xo(this.chain,t);e!==t&&e.makePrimary(this.cascade)||this.insertNonPrimary(e)},n.isInsideSelectorRule=function(t){return this.state!=Va.TOP&&(this.reportAndSkip(t),!0)},n.tagSelector=function(t,e){(e||t)&&(this.specificity+=1,this.chain.push(e&&t?new na(t,e.toLowerCase()):e?new ea(e.toLowerCase()):new ra(t)))},n.classSelector=function(t){if(this.pseudoelement)return f.warn("::"+this.pseudoelement,"followed by ."+t),void this.chain.push(new ya(""));this.specificity+=256,this.chain.push(new Jo(t))},n.pseudoclassSelector=function(t,e){if(this.pseudoelement)return f.warn("::"+this.pseudoelement,"followed by :"+t),void this.chain.push(new ya(""));switch(t.toLowerCase()){case"enabled":this.chain.push(new Ea);break;case"disabled":this.chain.push(new ba);break;case"checked":this.chain.push(new Ca);break;case"root":this.chain.push(new ha);break;case"link":this.chain.push(new ea("a")),this.chain.push(new oa("","href"));break;case"-adapt-href-epub-type":case"href-epub-type":if(e&&1==e.length&&"string"==typeof e[0]){var n=new RegExp("(^|s)"+ht(e[0])+"($|s)");this.chain.push(new ia(n))}else this.chain.push(new ya(""));break;case"-adapt-footnote-content":case"footnote-content":this.footnoteContent=!0;break;case"visited":case"active":case"hover":case"focus":this.chain.push(new ya(""));break;case"lang":this.chain.push(e&&1==e.length&&"string"==typeof e[0]?new la(new RegExp("^"+ht(e[0].toLowerCase())+"($|-)")):new ya(""));break;case"nth-child":case"nth-last-child":case"nth-of-type":case"nth-last-of-type":var i=Ka[t.toLowerCase()];this.chain.push(e&&2==e.length?new i(e[0],e[1]):new ya(""));break;case"first-child":this.chain.push(new ca);break;case"last-child":this.chain.push(new ga(0,1));break;case"first-of-type":this.chain.push(new pa(0,1));break;case"last-of-type":this.chain.push(new ma(0,1));break;case"only-child":this.chain.push(new ca),this.chain.push(new ga(0,1));break;case"only-of-type":this.chain.push(new pa(0,1)),this.chain.push(new ma(0,1));break;case"empty":this.chain.push(new va);break;case"before":case"after":case"first-line":case"first-letter":return void this.pseudoelementSelector(t,e);default:f.warn("unknown pseudo-class selector: "+t),this.chain.push(new ya(""))}this.specificity+=256},n.pseudoelementSelector=function(t,e){switch(t){case"before":case"after":case"first-line":case"first-letter":case"footnote-call":case"footnote-marker":case"inner":case"after-if-continues":this.pseudoelement?(f.warn("Double pseudoelement ::"+this.pseudoelement+"::"+t),this.chain.push(new ya(""))):this.pseudoelement=t;break;case"first-n-lines":if(e&&1==e.length&&"number"==typeof e[0]){var n=Math.round(e[0]);if(n>0&&n==e[0]){this.pseudoelement?(f.warn("Double pseudoelement ::"+this.pseudoelement+"::"+t),this.chain.push(new ya(""))):this.pseudoelement="first-"+n+"-lines";break}}this.chain.push(new ya(""));break;case"nth-fragment":e&&2==e.length?this.viewConditionId="NFS_"+e[0]+"_"+e[1]:this.chain.push(new ya(""));break;default:f.warn("Unrecognized pseudoelement: ::"+t),this.chain.push(new ya(""))}this.specificity+=1},n.idSelector=function(t){this.specificity+=65536,this.chain.push(new ta(t))},n.attributeSelector=function(t,e,n,i){var r;switch(this.specificity+=256,e=e.toLowerCase(),i=i||"",n){case kn.EOF:r=new oa(t,e);break;case kn.EQ:r=new aa(t,e,i);break;case kn.TILDE_EQ:r=!i||i.match(/\s/)?new ya(""):new ua(t,e,new RegExp("(^|\\s)"+ht(i)+"($|\\s)"));break;case kn.BAR_EQ:r=new ua(t,e,new RegExp("^"+ht(i)+"($|-)"));break;case kn.HAT_EQ:r=i?new ua(t,e,new RegExp("^"+ht(i))):new ya("");break;case kn.DOLLAR_EQ:r=i?new ua(t,e,new RegExp(ht(i)+"$")):new ya("");break;case kn.STAR_EQ:r=i?new ua(t,e,new RegExp(ht(i))):new ya("");break;case kn.COL_COL:"supported"==i?r=new sa(t,e):(f.warn("Unsupported :: attr selector op:",i),r=new ya(""));break;default:f.warn("Unsupported attr selector:",n),r=new ya("")}this.chain.push(r)},n.descendantSelector=function(){var t="d"+$a++;this.processChain(new qo(new Na(t,this.viewConditionId,null))),this.chain=[new ya(t)],this.viewConditionId=null},n.childSelector=function(){var t="c"+$a++;this.processChain(new qo(new Ta(t,this.viewConditionId,null))),this.chain=[new ya(t)],this.viewConditionId=null},n.adjacentSiblingSelector=function(){var t="a"+$a++;this.processChain(new qo(new Aa(t,this.viewConditionId,null))),this.chain=[new ya(t)],this.viewConditionId=null},n.followingSiblingSelector=function(){var t="f"+$a++;this.processChain(new qo(new xa(t,this.viewConditionId,null))),this.chain=[new ya(t)],this.viewConditionId=null},n.nextSelector=function(){this.finishChain(),this.pseudoelement=null,this.footnoteContent=!1,this.specificity=0,this.chain=[]},n.startSelectorRule=function(){this.isInsideSelectorRule("E_CSS_UNEXPECTED_SELECTOR")||(this.state=Va.SELECTOR,this.elementStyle={},this.pseudoelement=null,this.specificity=0,this.footnoteContent=!1,this.chain=[])},n.error=function(e,n){t.prototype.error.call(this,e,n),this.state==Va.SELECTOR&&(this.state=Va.TOP)},n.startStylesheet=function(e){t.prototype.startStylesheet.call(this,e),this.state=Va.TOP},n.startRuleBody=function(){this.finishChain(),t.prototype.startRuleBody.call(this),this.state==Va.SELECTOR&&(this.state=Va.TOP)},n.endRule=function(){t.prototype.endRule.call(this),this.insideSelectorRule=Va.TOP},n.finishChain=function(){if(this.chain){var t=this.specificity+this.cascade.nextOrder();this.processChain(this.makeApplyRuleAction(t)),this.chain=null,this.pseudoelement=null,this.viewConditionId=null,this.footnoteContent=!1,this.specificity=0}},n.makeApplyRuleAction=function(t){var e=this.regionId;return this.footnoteContent&&(e=e?"xxx-bogus-xxx":"footnote"),new Zo(this.elementStyle,t,this.pseudoelement,e,this.viewConditionId)},n.special=function(t,e){var n;n=this.condition?new Po(e,0,this.condition):new Fo(e,0),Go(this.elementStyle,t).push(n)},n.property=function(t,e,n){this.validatorSet.validatePropertyAndHandleShorthand(t,e,n,this)},n.invalidPropertyValue=function(t,e){this.report("E_INVALID_PROPERTY_VALUE "+t+": "+e.toString())},n.unknownProperty=function(t,e){this.report("E_INVALID_PROPERTY "+t+": "+e.toString())},n.simpleProperty=function(t,e,n){"display"!=t||e!==Ye.oeb_page_head&&e!==Ye.oeb_page_foot||(this.simpleProperty("flow-options",new We([Ye.exclusive,Ye._static]),n),this.simpleProperty("flow-into",e,n),e=Ye.block),v("SIMPLE_PROPERTY").forEach((function(i){var r=i({name:t,value:e,important:n});t=r.name,e=r.value,n=r.important}));var i=n?this.getImportantSpecificity():this.getBaseSpecificity(),r=this.condition?new Po(e,i,this.condition):new Fo(e,i);Mo(this.elementStyle,t,r)},n.finish=function(){return this.cascade},n.startFuncWithSelector=function(t){switch(t){case"not":var e=new qa(this);e.startSelectorRule(),this.owner.pushHandler(e)}},e}(nr),Ka={"nth-child":da,"nth-of-type":pa,"nth-last-child":ga,"nth-last-of-type":ma},$a=0,qa=function(t){function e(e){var n;return(n=t.call(this,e.scope,e.owner,e.condition,e,e.regionId,e.validatorSet,!1)||this).parent=e,n.parentChain=e.chain,n}I(e,t);var n=e.prototype;return n.startFuncWithSelector=function(t){"not"==t&&this.reportAndSkip("E_CSS_UNEXPECTED_NOT")},n.startRuleBody=function(){this.reportAndSkip("E_CSS_UNEXPECTED_RULE_BODY")},n.nextSelector=function(){this.reportAndSkip("E_CSS_UNEXPECTED_NEXT_SELECTOR")},n.endFuncWithSelector=function(){this.chain&&this.chain.length>0&&this.parentChain.push(new Da(this.chain)),this.parent.specificity+=this.specificity,this.owner.popHandler()},n.error=function(e,n){t.prototype.error.call(this,e,n),this.owner.popHandler()},e}(ja),Ya=function(t){function e(e,n){return t.call(this,e,n,!1)||this}return I(e,t),e.prototype.property=function(t,e,n){if(this.scope.values[t])this.error("E_CSS_NAME_REDEFINED "+t,this.getCurrentToken());else{var i=t.match(/height|^(top|bottom)$/)?"vh":"vw",r=new ge(this.scope,100,i);this.scope.defineName(t,e.toExpr(this.scope,r))}},e}(nr),Za=function(t){function e(e,n,i,r,o){var a;return(a=t.call(this,e,n,!1)||this).condition=i,a.elementStyle=r,a.validatorSet=o,a.order=0,a}I(e,t);var n=e.prototype;return n.property=function(t,e,n){n?f.warn("E_IMPORTANT_NOT_ALLOWED"):this.validatorSet.validatePropertyAndHandleShorthand(t,e,n,this)},n.invalidPropertyValue=function(t,e){f.warn("E_INVALID_PROPERTY_VALUE",t+":",e.toString())},n.unknownProperty=function(t,e){f.warn("E_INVALID_PROPERTY",t+":",e.toString())},n.simpleProperty=function(t,e,n){var i=n?this.getImportantSpecificity():this.getBaseSpecificity();i+=this.order,this.order+=1/1048576;var r=this.condition?new Po(e,i,this.condition):new Fo(e,i);Mo(this.elementStyle,t,r)},e}(nr),Qa=function(t){function e(e,n){var i;return(i=t.call(this,e)||this).validatorSet=n,i.elementStyle={},i.order=0,i}I(e,t);var n=e.prototype;return n.property=function(t,e,n){this.validatorSet.validatePropertyAndHandleShorthand(t,e,n,this)},n.invalidPropertyValue=function(t,e){f.warn("E_INVALID_PROPERTY_VALUE",t+":",e.toString())},n.unknownProperty=function(t,e){f.warn("E_INVALID_PROPERTY",t+":",e.toString())},n.simpleProperty=function(t,e,n){var i=n?67108864:50331648;i+=this.order,this.order+=1/1048576;var r=new Fo(e,i);Mo(this.elementStyle,t,r)},e}(br);function Ja(t,e){var n=zo(t);n&&n.forEach((function(t){t.matcher.matches()&&e(t.styles)}))}function ts(t,e,n){Ja(n,(function(n){os(t,n,e)}))}function es(t,e,n){var i=t["writing-mode"];if(i){var r=i.evaluate(e,"writing-mode");if(r&&r!==Ye.inherit)return r===Ye.vertical_rl}return n}function ns(t,e,n){var i=t.direction;if(i){var r=i.evaluate(e,"direction");if(r&&r!==Ye.inherit)return r===Ye.rtl}return n}function is(t,e,n,i,r){var o={};for(var a in t)Lo(a)&&(o[a]=_o(t,a));return ts(o,e,t),rs(t,n,i,(function(t,n){os(o,n,e),ts(o,e,n)})),o}function rs(t,e,n,i){var r=Uo(t,"_regions");if((e||n)&&r){if(n){var o=["footnote"];e=e?e.concat(o):o}for(var a,s=_(e);!(a=s()).done;){var u=a.value,l=r[u];l&&i(u,l)}}}function os(t,e,n){for(var i in e)if(Lo(i)){var r=_o(e,i);t[i]=Oo(n,t[i],r)}}var as=function(t,e,n,i,r){var o=n?i?xo:To:i?Io:Ao;for(var a in t)if(t.hasOwnProperty(a)){var s=t[a];if(!s)continue;var u=o[a],l=void 0;if(u){var c=t[u];if(c&&c.priority>s.priority)continue;l=So[u]?u:a}else l=a;e[l]=r(a,s)}};function ss(t,e){var n={};return Object.keys(t).forEach((function(i){var r=n[i]={},o=t[i];Object.keys(o).forEach((function(t){r[t]=o[t].map((function(t){var n=e?t.physical:t.logical;return{regexp:new RegExp("(-?)"+(e?t.logical:t.physical)+"(-?)"),to:"$1"+n+"$2"}}))}))})),n}function us(t,e,n,i){var r=i[e];if(!r)throw new Error("unknown writing-mode: "+e);var o=r[n||"ltr"];if(!o)throw new Error("unknown direction: "+n);for(var a,s=_(o);!(a=s()).done;){var u=a.value,l=t.replace(u.regexp,u.to);if(l!==t)return l}return t}var ls,cs={"horizontal-tb":{ltr:[{logical:"inline-start",physical:"left"},{logical:"inline-end",physical:"right"},{logical:"block-start",physical:"top"},{logical:"block-end",physical:"bottom"},{logical:"inline-size",physical:"width"},{logical:"block-size",physical:"height"}],rtl:[{logical:"inline-start",physical:"right"},{logical:"inline-end",physical:"left"},{logical:"block-start",physical:"top"},{logical:"block-end",physical:"bottom"},{logical:"inline-size",physical:"width"},{logical:"block-size",physical:"height"}]},"vertical-rl":{ltr:[{logical:"inline-start",physical:"top"},{logical:"inline-end",physical:"bottom"},{logical:"block-start",physical:"right"},{logical:"block-end",physical:"left"},{logical:"inline-size",physical:"height"},{logical:"block-size",physical:"width"}],rtl:[{logical:"inline-start",physical:"bottom"},{logical:"inline-end",physical:"top"},{logical:"block-start",physical:"right"},{logical:"block-end",physical:"left"},{logical:"inline-size",physical:"height"},{logical:"block-size",physical:"width"}]},"vertical-lr":{ltr:[{logical:"inline-start",physical:"top"},{logical:"inline-end",physical:"bottom"},{logical:"block-start",physical:"left"},{logical:"block-end",physical:"right"},{logical:"inline-size",physical:"height"},{logical:"block-size",physical:"width"}],rtl:[{logical:"inline-start",physical:"bottom"},{logical:"inline-end",physical:"top"},{logical:"block-start",physical:"left"},{logical:"block-end",physical:"right"},{logical:"inline-size",physical:"height"},{logical:"block-size",physical:"width"}]}},hs=ss(cs,!0),fs=ss(cs,!1);function ds(t,e,n){var i={display:e.style.display,position:e.style.position,width:e.style.width,maxWidth:e.style.maxWidth,minWidth:e.style.minWidth,height:e.style.height,maxHeight:e.style.maxHeight,minHeight:e.style.minHeight},r=e.parentNode,o=e.ownerDocument.createElement("div");function a(n){return t.getElementComputedStyle(e).getPropertyValue(n)}et(o,"position",i.position),r.insertBefore(o,e),o.appendChild(e),et(e,"width","auto"),et(e,"max-width","none"),et(e,"min-width","0"),et(e,"height","auto"),et(e,"max-height","none"),et(e,"min-height","0");var s=tt("writing-mode"),u=(s?a(s[0]):null)||a("writing-mode"),l="vertical-rl"===u||"tb-rl"===u||"vertical-lr"===u||"tb-lr"===u,c=l?"height":"width",h=l?"width":"height";function f(){return et(e,"display","block"),et(e,"position","static"),a(c)}function d(){et(e,"display","inline-block"),et(o,c,"99999999px");var t=a(c);return et(o,c,""),t}function p(){et(e,"display","inline-block"),et(o,c,"0");var t=a(c);return et(o,c,""),t}function g(){var t=f(),e=p(),n=parseFloat(t);if(n<=parseFloat(e))return e;var i=d();return n<=parseFloat(i)?t:i}function m(){return a(h)}function v(){throw new Error("Getting fill-available block size is not implemented")}var E={};return n.forEach((function(t){var n;switch(t){case ls.FILL_AVAILABLE_INLINE_SIZE:n=f();break;case ls.MAX_CONTENT_INLINE_SIZE:n=d();break;case ls.MIN_CONTENT_INLINE_SIZE:n=p();break;case ls.FIT_CONTENT_INLINE_SIZE:n=g();break;case ls.FILL_AVAILABLE_BLOCK_SIZE:n=v();break;case ls.MAX_CONTENT_BLOCK_SIZE:case ls.MIN_CONTENT_BLOCK_SIZE:case ls.FIT_CONTENT_BLOCK_SIZE:n=m();break;case ls.FILL_AVAILABLE_WIDTH:n=l?v():f();break;case ls.FILL_AVAILABLE_HEIGHT:n=l?f():v();break;case ls.MAX_CONTENT_WIDTH:n=l?m():d();break;case ls.MAX_CONTENT_HEIGHT:n=l?d():m();break;case ls.MIN_CONTENT_WIDTH:n=l?m():p();break;case ls.MIN_CONTENT_HEIGHT:n=l?p():m();break;case ls.FIT_CONTENT_WIDTH:n=l?m():g();break;case ls.FIT_CONTENT_HEIGHT:n=l?g():m()}E[t]=parseFloat(n),et(e,"position",i.position),et(e,"display",i.display)})),et(e,"width",i.width),et(e,"max-width",i.maxWidth),et(e,"min-width",i.minWidth),et(e,"height",i.height),et(e,"max-height",i.maxHeight),et(e,"min-height",i.minHeight),r.insertBefore(e,o),r.removeChild(o),E}!function(t){t.FILL_AVAILABLE_INLINE_SIZE="fill-available inline size",t.FILL_AVAILABLE_BLOCK_SIZE="fill-available block size",t.FILL_AVAILABLE_WIDTH="fill-available width",t.FILL_AVAILABLE_HEIGHT="fill-available height",t.MAX_CONTENT_INLINE_SIZE="max-content inline size",t.MAX_CONTENT_BLOCK_SIZE="max-content block size",t.MAX_CONTENT_WIDTH="max-content width",t.MAX_CONTENT_HEIGHT="max-content height",t.MIN_CONTENT_INLINE_SIZE="min-content inline size",t.MIN_CONTENT_BLOCK_SIZE="min-content block size",t.MIN_CONTENT_WIDTH="min-content width",t.MIN_CONTENT_HEIGHT="min-content height",t.FIT_CONTENT_INLINE_SIZE="fit-content inline size",t.FIT_CONTENT_BLOCK_SIZE="fit-content block size",t.FIT_CONTENT_WIDTH="fit-content width",t.FIT_CONTENT_HEIGHT="fit-content height"}(ls||(ls={}));var ps=Fr.FloatReference;function gs(t){switch(t){case ps.INLINE:return!1;case ps.COLUMN:case ps.REGION:case ps.PAGE:return!0;default:throw new Error("Unknown float-reference: "+t)}}var ms=function(){function t(t,e,n,i,r,o){this.nodePosition=t,this.floatReference=e,this.floatSide=n,this.clearSide=i,this.flowName=r,this.floatMinWrapBlock=o,this.order=null,this.id=null}var e=t.prototype;return e.getOrder=function(){if(null===this.order)throw new Error("The page float is not yet added");return this.order},e.getId=function(){if(!this.id)throw new Error("The page float is not yet added");return this.id},e.isAllowedOnContext=function(t){return t.isAnchorAlreadyAppeared(this.getId())},e.isAllowedToPrecede=function(t){return!1},t}(),vs=function(){function t(){this.floats=[],this.nextPageFloatIndex=0}var e=t.prototype;return e.nextOrder=function(){return this.nextPageFloatIndex++},e.createPageFloatId=function(t){return"pf"+t},e.addPageFloat=function(t){if(this.floats.findIndex((function(e){return io(e.nodePosition,t.nodePosition)}))>=0)throw new Error("A page float with the same source node is already registered");var e=t.order=this.nextOrder();t.id=this.createPageFloatId(e),this.floats.push(t)},e.findPageFloatByNodePosition=function(t){var e=this.floats.findIndex((function(e){return io(e.nodePosition,t)}));return e>=0?this.floats[e]:null},e.findPageFloatById=function(t){var e=this.floats.findIndex((function(e){return e.id===t}));return e>=0?this.floats[e]:null},t}(),Es=function(){function t(t,e,n,i,r){this.floatReference=t,this.floatSide=e,this.continuations=n,this.area=i,this.continues=r}var e=t.prototype;return e.hasFloat=function(t){return this.continuations.some((function(e){return e.float===t}))},e.findNotAllowedFloat=function(t){for(var e=this.continuations.length-1;e>=0;e--){var n=this.continuations[e].float;if(!n.isAllowedOnContext(t))return n}return null},e.getOuterShape=function(){return this.area.getOuterShape(null,null)},e.getOuterRect=function(){return this.area.getOuterRect()},e.getOrder=function(){var t=this.continuations.map((function(t){return t.float}));return Math.min.apply(null,t.map((function(t){return t.getOrder()})))},e.shouldBeStashedBefore=function(t){return this.getOrder()<t.getOrder()},e.addContinuations=function(t){var e=this;t.forEach((function(t){e.continuations.push(t)}))},e.getFlowName=function(){var t=this.continuations[0].float.flowName;return this.continuations.every((function(e){return e.float.flowName===t})),t},t}(),bs=function(){function t(t,e){this.float=t,this.nodePosition=e}return t.prototype.equals=function(t){return!!t&&(this===t||this.float===t.float&&io(this.nodePosition,t.nodePosition))},t}(),Cs=function(){function t(t,e,n,i,r,o,a){this.parent=t,this.floatReference=e,this.container=n,this.flowName=i,this.generatingNodePosition=r,this.children=[],this.invalidated=!1,this.forbiddenFloats=[],this.floatFragments=[],this.stashedFloatFragments=[],this.floatAnchors={},this.floatsDeferredToNext=[],this.layoutConstraints=[],this.locked=!1,t&&t.children.push(this),this.writingMode=o||t&&t.writingMode||Ye.horizontal_tb,this.direction=a||t&&t.direction||Ye.ltr,this.floatStore=t?t.floatStore:new vs;var s=this.getPreviousSibling();this.floatsDeferredFromPrevious=s?[].concat(s.floatsDeferredToNext):[]}var e=t.prototype;return e.getParent=function(t){if(!this.parent)throw new Error("No PageFloatLayoutContext for "+t);return this.parent},e.getPreviousSiblingOf=function(t,e,n,i){var r=this.children.indexOf(t);r<0&&(r=this.children.length);for(var o=r-1;o>=0;o--){var a=this.children[o];if(a.floatReference===e&&a.flowName===n&&io(a.generatingNodePosition,i))return a;if(a=a.getPreviousSiblingOf(null,e,n,i))return a}return null},e.getPreviousSibling=function(){for(var t,e=this,n=this.parent;n;){if(t=n.getPreviousSiblingOf(e,this.floatReference,this.flowName,this.generatingNodePosition))return t;e=n,n=n.parent}return null},e.getContainer=function(t){return t&&t!==this.floatReference?this.getParent(t).getContainer(t):this.container},e.setContainer=function(t){this.container=t,this.reattachFloatFragments()},e.addPageFloat=function(t){this.floatStore.addPageFloat(t)},e.getPageFloatLayoutContext=function(t){return t===this.floatReference?this:this.getParent(t).getPageFloatLayoutContext(t)},e.findPageFloatByNodePosition=function(t){return this.floatStore.findPageFloatByNodePosition(t)},e.forbid=function(t){var e=t.getId(),n=t.floatReference;n===this.floatReference?this.forbiddenFloats.includes(e)||(this.forbiddenFloats.push(e),(new ws).findByFloat(t).forbid(t,this)):this.getParent(n).forbid(t)},e.isForbidden=function(t){var e=t.getId(),n=t.floatReference;return n===this.floatReference?this.forbiddenFloats.includes(e):this.getParent(n).isForbidden(t)},e.addPageFloatFragment=function(t,e){var n=t.floatReference;n!==this.floatReference?this.getParent(n).addPageFloatFragment(t,e):this.floatFragments.includes(t)||(this.floatFragments.push(t),this.floatFragments.sort((function(t,e){return t.getOrder()-e.getOrder()}))),e||this.invalidate()},e.removePageFloatFragment=function(t,e){var n=t.floatReference;if(n!==this.floatReference)this.getParent(n).removePageFloatFragment(t,e);else{var i=this.floatFragments.indexOf(t);if(i>=0){var r=this.floatFragments.splice(i,1)[0],o=r.area&&r.area.element;o&&o.parentNode&&o.parentNode.removeChild(o),e||this.invalidate()}}},e.findPageFloatFragment=function(t){if(t.floatReference!==this.floatReference)return this.getParent(t.floatReference).findPageFloatFragment(t);var e=this.floatFragments.findIndex((function(e){return e.hasFloat(t)}));return e>=0?this.floatFragments[e]:null},e.hasFloatFragments=function(t){return!(!(this.floatFragments.length>0)||t&&!this.floatFragments.some(t))||!!this.parent&&this.parent.hasFloatFragments(t)},e.hasContinuingFloatFragmentsInFlow=function(t){return this.hasFloatFragments((function(e){return e.continues&&e.getFlowName()===t}))},e.registerPageFloatAnchor=function(t,e){this.floatAnchors[t.getId()]=e},e.collectPageFloatAnchors=function(){var t=Object.assign({},this.floatAnchors);return this.children.reduce((function(t,e){return Object.assign(t,e.collectPageFloatAnchors())}),t)},e.isAnchorAlreadyAppeared=function(t){if(this.getDeferredPageFloatContinuations().some((function(e){return e.float.getId()===t})))return!0;var e=this.collectPageFloatAnchors()[t];return!!e&&!(!this.container||!this.container.element)&&this.container.element.contains(e)},e.deferPageFloat=function(t){var e=t.float;if(e.floatReference===this.floatReference){var n=this.floatsDeferredToNext.findIndex((function(t){return t.float===e}));n>=0?this.floatsDeferredToNext.splice(n,1,t):this.floatsDeferredToNext.push(t)}else this.getParent(e.floatReference).deferPageFloat(t)},e.hasPrecedingFloatsDeferredToNext=function(t,e){if(!e&&t.floatReference!==this.floatReference)return this.getParent(t.floatReference).hasPrecedingFloatsDeferredToNext(t,!1);var n=t.getOrder();return!!this.floatsDeferredToNext.some((function(e){return e.float.getOrder()<n&&!t.isAllowedToPrecede(e.float)}))||!!this.parent&&this.parent.hasPrecedingFloatsDeferredToNext(t,!0)},e.getLastFollowingFloatInFragments=function(t){var e=t.getOrder(),n=null;if(this.floatFragments.forEach((function(t){t.continuations.forEach((function(t){var i=t.float,r=i.getOrder();r>e&&(!n||r>n.getOrder())&&(n=i)}))})),this.parent){var i=this.parent.getLastFollowingFloatInFragments(t);i&&(!n||i.getOrder()>n.getOrder())&&(n=i)}return n},e.getDeferredPageFloatContinuations=function(t){t=t||this.flowName;var e=this.floatsDeferredFromPrevious.filter((function(e){return!t||e.float.flowName===t}));return this.parent&&(e=this.parent.getDeferredPageFloatContinuations(t).concat(e)),e.sort((function(t,e){return t.float.getOrder()-e.float.getOrder()}))},e.getPageFloatContinuationsDeferredToNext=function(t){t=t||this.flowName;var e=this.floatsDeferredToNext.filter((function(e){return!t||e.float.flowName===t}));return this.parent?this.parent.getPageFloatContinuationsDeferredToNext(t).concat(e):e},e.getFloatsDeferredToNextInChildContexts=function(){for(var t=[],e=[],n=this.children.length-1;n>=0;n--){var i=this.children[n];e.includes(i.flowName)||(e.push(i.flowName),t=(t=t.concat(i.floatsDeferredToNext.map((function(t){return t.float})))).concat(i.getFloatsDeferredToNextInChildContexts()))}return t},e.checkAndForbidNotAllowedFloat=function(){if(this.checkAndForbidFloatFollowingDeferredFloat())return!0;for(var t=this.floatFragments.length-1;t>=0;t--){var e=this.floatFragments[t],n=e.findNotAllowedFloat(this);if(n)return this.locked?this.invalidate():(this.removePageFloatFragment(e),this.forbid(n),this.removeEndFloatFragments(e.floatSide)),!0}return!(this.floatReference!==ps.REGION||!this.parent.locked)&&this.parent.checkAndForbidNotAllowedFloat()},e.checkAndForbidFloatFollowingDeferredFloat=function(){var t=this,e=this.getFloatsDeferredToNextInChildContexts(),n=this.floatFragments.reduce((function(t,e){return t.concat(e.continuations.map((function(t){return t.float})))}),[]);n.sort((function(t,e){return e.getOrder()-t.getOrder()}));for(var i,r=function(){var n=i.value,r=n.getOrder();if(e.some((function(t){return!n.isAllowedToPrecede(t)&&r>t.getOrder()}))){if(t.locked)t.invalidate();else{t.forbid(n);var o=t.findPageFloatFragment(n);t.removePageFloatFragment(o)}return{v:!0}}},o=_(n);!(i=o()).done;){var a=r();if("object"==typeof a)return a.v}return!1},e.finish=function(){var t=this;if(!this.checkAndForbidNotAllowedFloat()){for(var e=this.floatsDeferredToNext.length-1;e>=0;e--)if(!this.floatsDeferredToNext[e].float.isAllowedOnContext(this)){if(this.locked)return void this.invalidate();this.floatsDeferredToNext.splice(e,1)}this.floatsDeferredFromPrevious.forEach((function(e){t.floatsDeferredToNext.findIndex((function(t){return e.equals(t)}))>=0||t.floatFragments.some((function(t){return t.hasFloat(e.float)}))||t.floatsDeferredToNext.push(e)}))}},e.hasSameContainerAs=function(t){return!!this.container&&!!t.container&&this.container.element===t.container.element},e.invalidate=function(){var t=this;this.invalidated=!0,this.locked||(this.container&&(this.children.forEach((function(e){t.hasSameContainerAs(e)&&e.floatFragments.forEach((function(t){var e=t.area.element;e&&e.parentNode&&e.parentNode.removeChild(e)}))})),this.container.clear()),this.children.forEach((function(t){t.layoutConstraints.splice(0)})),this.children.splice(0),Object.keys(this.floatAnchors).forEach((function(e){delete t.floatAnchors[e]})))},e.detachChildren=function(){var t=this.children.splice(0);return t.forEach((function(t){t.floatFragments.forEach((function(t){var e=t.area.element;e&&e.parentNode&&e.parentNode.removeChild(e)}))})),t},e.attachChildren=function(t){var e=this;t.forEach((function(t){e.children.push(t),t.reattachFloatFragments()}))},e.isInvalidated=function(){return this.invalidated||!!this.parent&&this.parent.isInvalidated()},e.validate=function(){this.invalidated=!1},e.toLogical=function(t){return us(t,this.writingMode.toString(),this.direction.toString()||null,fs)},e.toPhysical=function(t){return us(t,this.writingMode.toString(),this.direction.toString()||null,hs)},e.removeEndFloatFragments=function(t){var e=this.toLogical(t);if("block-end"===e||"inline-end"===e)for(var n=0;n<this.floatFragments.length;){var i=this.floatFragments[n];this.toLogical(i.floatSide)===e?this.removePageFloatFragment(i):n++}},e.stashEndFloatFragments=function(t){var e=t.floatReference;if(e===this.floatReference){var n=this.toLogical(t.floatSide);if("block-end"===n||"snap-block"===n||"inline-end"===n)for(var i=0;i<this.floatFragments.length;){var r=this.floatFragments[i],o=this.toLogical(r.floatSide);(o===n||"snap-block"===n&&"block-end"===o)&&r.shouldBeStashedBefore(t)?(this.stashedFloatFragments.push(r),this.floatFragments.splice(i,1)):i++}}else this.getParent(e).stashEndFloatFragments(t)},e.restoreStashedFragments=function(t){var e=this;t===this.floatReference?(this.stashedFloatFragments.forEach((function(t){e.addPageFloatFragment(t,!0)})),this.stashedFloatFragments.splice(0)):this.getParent(t).restoreStashedFragments(t)},e.discardStashedFragments=function(t){t===this.floatReference?this.stashedFloatFragments.splice(0):this.getParent(t).discardStashedFragments(t)},e.getStashedFloatFragments=function(t){return t===this.floatReference?this.stashedFloatFragments.concat().sort((function(t,e){return e.getOrder()-t.getOrder()})):this.getParent(t).getStashedFloatFragments(t)},e.getLimitValue=function(t,e,n,i){var r=this.toLogical(t),o=this.toPhysical(t),a=this.getLimitValueInner(r,e,n,i);if(this.parent&&this.parent.container){var s=this.parent.getLimitValue(o,e,n,i);switch(o){case"top":case"left":return Math.max(a,s);case"bottom":case"right":return Math.min(a,s)}}return a},e.getLimitValueInner=function(t,e,n,i){var r=this.getLimitValuesInner(e,n,i);switch(t){case"block-start":return this.container.vertical?r.right:r.top;case"block-end":return this.container.vertical?r.left:r.bottom;case"inline-start":return this.container.vertical?r.top:r.left;case"inline-end":return this.container.vertical?r.bottom:r.right;default:throw new Error("Unknown logical side: "+t)}},e.getLimitValuesInner=function(t,e,n){var i=this,r=this.container.originX,o=this.container.originY,a=this.container.getPaddingRect(),s={top:a.y1-o,left:a.x1-r,bottom:a.y2-o,right:a.x2-r,floatMinWrapBlockStart:0,floatMinWrapBlockEnd:0};function u(n,i,r){return"%"===n.unit?r*n.num/100:t.convertLengthToPx(n,i,e)}var l=this.floatFragments;return l.length>0&&(s=l.reduce((function(t,e){if(n&&!n(e,i))return t;var r=i.toLogical(e.floatSide),o=e.area,s=e.continuations[0].float.floatMinWrapBlock,l=t.top,c=t.left,h=t.bottom,f=t.right,d=t.floatMinWrapBlockStart,p=t.floatMinWrapBlockEnd;switch(r){case"inline-start":o.vertical?l=Math.max(l,o.top+o.height):c=Math.max(c,o.left+o.width);break;case"block-start":o.vertical?(s&&o.left<f&&(d=u(s,o.rootViewNodes[0],a.x2-a.x1)),f=Math.min(f,o.left)):(s&&o.top+o.height>l&&(d=u(s,o.rootViewNodes[0],a.y2-a.y1)),l=Math.max(l,o.top+o.height));break;case"inline-end":o.vertical?h=Math.min(h,o.top):f=Math.min(f,o.left);break;case"block-end":o.vertical?(s&&o.left+o.width>c&&(p=u(s,o.rootViewNodes[0],a.x2-a.x1)),c=Math.max(c,o.left+o.width)):(s&&o.top<h&&(p=u(s,o.rootViewNodes[0],a.y2-a.y1)),h=Math.min(h,o.top));break;default:throw new Error("Unknown logical float side: "+r)}return{top:l,left:c,bottom:h,right:f,floatMinWrapBlockStart:d,floatMinWrapBlockEnd:p}}),s)),s.left+=r,s.right+=r,s.top+=o,s.bottom+=o,s},e.setFloatAreaDimensions=function(t,e,n,i,r,o,a){if(e!==this.floatReference)return this.getParent(e).setFloatAreaDimensions(t,e,n,i,r,o,a);var s=this.toLogical(n);if("snap-block"===s){if(!a["block-start"]&&!a["block-end"])return null}else if(!a[s])return null;var u,l,c,h,f=this.getLimitValue("block-start",t.layoutContext,t.clientLayout),d=this.getLimitValue("block-end",t.layoutContext,t.clientLayout),p=this.getLimitValue("inline-start",t.layoutContext,t.clientLayout),g=this.getLimitValue("inline-end",t.layoutContext,t.clientLayout),m=t.vertical?t.originX:t.originY,v=t.vertical?t.originY:t.originX;function E(e,n){var i=e(t.bands,n);return i?(t.vertical&&(i=bn(i)),f=t.vertical?Math.min(f,i.x2):Math.max(f,i.y1),d=t.vertical?Math.max(d,i.x1):Math.min(d,i.y2),!0):o}if(f=t.vertical?Math.min(f,t.left+t.getInsetLeft()+t.width+t.getInsetRight()+m):Math.max(f,t.top+m),d=t.vertical?Math.max(d,t.left+m):Math.min(d,t.top+t.getInsetTop()+t.height+t.getInsetBottom()+m),r){var b=t.vertical?En(new rn(d,p,f,g)):new rn(p,f,g,d);if(("block-start"===s||"snap-block"===s||"inline-start"===s)&&!E(Dn,b))return null;if(("block-end"===s||"snap-block"===s||"inline-end"===s)&&!E(Sn,b))return null;if(u=(c=(d-f)*t.getBoxDir())-t.getInsetBefore()-t.getInsetAfter(),l=(h=g-p)-t.getInsetStart()-t.getInsetEnd(),!o&&(u<=0||l<=0))return null}else{c=(u=t.computedBlockSize)+t.getInsetBefore()+t.getInsetAfter();var C=(d-f)*t.getBoxDir();if("snap-block"===s){if(null===i)s="block-start";else{var y=this.container.getPaddingRect();s=this.container.getBoxDir()*(i-(this.container.vertical?y.x2:y.y1))<=this.container.getBoxDir()*((this.container.vertical?y.x1:y.y2)-i-c)?"block-start":"block-end"}if(!a[s]){if(!a["block-end"])return null;s="block-end"}}if(!o&&C<c)return null;if(h=(l="inline-start"===s||"inline-end"===s?ds(t.clientLayout,t.element,[ls.FIT_CONTENT_INLINE_SIZE])[ls.FIT_CONTENT_INLINE_SIZE]:t.adjustContentRelativeSize?t.getContentInlineSize():t.vertical?t.height:t.width)+t.getInsetStart()+t.getInsetEnd(),!o&&g-p<h)return null}switch(f-=m,d-=m,p-=v,g-=v,s){case"inline-start":case"block-start":case"snap-block":t.setInlinePosition(p,l),t.setBlockPosition(f,u);break;case"inline-end":case"block-end":t.setInlinePosition(g-h,l),t.setBlockPosition(d-c*t.getBoxDir(),u);break;default:throw new Error("unknown float direction: "+n)}return s},e.getFloatFragmentExclusions=function(){var t=this.floatFragments.map((function(t){return t.getOuterShape()}));return this.parent?this.parent.getFloatFragmentExclusions().concat(t):t},e.reattachFloatFragments=function(){var t=this.container.element&&this.container.element.parentNode;t&&this.floatFragments.forEach((function(e){t.appendChild(e.area.element)}))},e.getMaxReachedAfterEdge=function(){var t=this.getContainer().vertical;return this.floatFragments.reduce((function(e,n){var i=n.getOuterRect();return t?Math.min(e,i.x1):Math.max(e,i.y2)}),t?1/0:0)},e.getBlockStartEdgeOfBlockEndFloats=function(){var t=this.getContainer().vertical;return this.floatFragments.filter((function(t){return"block-end"===t.floatSide})).reduce((function(e,n){var i=n.getOuterRect();return t?Math.max(e,i.x2):Math.min(e,i.y1)}),t?0:1/0)},e.getPageFloatClearEdge=function(t,e){function n(t){return function(e){return t.isAnchorAlreadyAppeared(e.float.getId())}}function i(t,e){return t.continuations.some(n(e))}for(var r=e.getPaddingRect(),o=e.vertical?r.x1:r.y2,a=this;a;){if(a.floatsDeferredToNext.some(n(a)))return o;a=a.parent}var s=this.getLimitValue("block-start",e.layoutContext,e.clientLayout,i);return this.getLimitValue("block-end",e.layoutContext,e.clientLayout,i)*e.getBoxDir()<o*e.getBoxDir()?o:s},e.getPageFloatPlacementCondition=function(t,e,n){var i=this;if(t.floatReference!==this.floatReference)return this.getParent(t.floatReference).getPageFloatPlacementCondition(t,e,n);var r={"block-start":!0,"block-end":!0,"inline-start":!0,"inline-end":!0};if(!n)return r;var o,a=this.toLogical(e),s=this.toLogical(n);o="all"===s?["block-start","block-end","inline-start","inline-end"]:"both"===s?["inline-start","inline-end"]:"same"===s?"snap-block"===a?["block-start","block-end"]:[a]:[s];var u=t.getOrder();function l(t){return function(e){return e.floatSide===t&&e.getOrder()<u}}return o.forEach((function(t){switch(t){case"block-start":case"inline-start":r[t]=!function t(e,n){return e.children.some((function(e){return e.floatFragments.some(l(n))||t(e,n)}))}(i,t);break;case"block-end":case"inline-end":r[t]=!function t(e,n){var i=e.parent;return!!i&&(i.floatFragments.some(l(n))||t(i,n))}(i,t);break;default:throw new Error("Unexpected side: "+t)}})),r},e.getLayoutConstraints=function(){return(this.parent?this.parent.getLayoutConstraints():[]).concat(this.layoutConstraints)},e.addLayoutConstraint=function(t,e){e===this.floatReference?this.layoutConstraints.push(t):this.getParent(e).addLayoutConstraint(t,e)},e.isColumnFullWithPageFloats=function(t){for(var e=t.layoutContext,n=t.clientLayout,i=this,r=null;i&&i.container;){var o=i.getLimitValuesInner(e,n);r?t.vertical?(o.right<r.right&&(r.right=o.right,r.floatMinWrapBlockStart=o.floatMinWrapBlockStart),o.left>r.left&&(r.left=o.left,r.floatMinWrapBlockEnd=o.floatMinWrapBlockEnd)):(o.top>r.top&&(r.top=o.top,r.floatMinWrapBlockStart=o.floatMinWrapBlockStart),o.bottom<r.bottom&&(r.bottom=o.bottom,r.floatMinWrapBlockEnd=o.floatMinWrapBlockEnd)):r=o,i=i.parent}var a=Math.max(r.floatMinWrapBlockStart,r.floatMinWrapBlockEnd);return(t.vertical?r.right-r.left:r.bottom-r.top)<=a},e.getMaxBlockSizeOfPageFloats=function(){var t=this.getContainer().vertical;return this.floatFragments.length?Math.max.apply(null,this.floatFragments.map((function(e){var n=e.area;return t?n.width:n.height}))):0},e.lock=function(){this.locked=!0},e.unlock=function(){this.locked=!1},e.isLocked=function(){return this.locked},t}(),ys=[],ws=function(){function t(){}t.register=function(t){ys.push(t)};var e=t.prototype;return e.findByNodeContext=function(t){for(var e=ys.length-1;e>=0;e--){var n=ys[e];if(n.appliesToNodeContext(t))return n}throw new Error("No PageFloatLayoutStrategy found for "+t)},e.findByFloat=function(t){for(var e=ys.length-1;e>=0;e--){var n=ys[e];if(n.appliesToFloat(t))return n}throw new Error("No PageFloatLayoutStrategy found for "+t)},t}();ws.register(new(function(){function t(){}var e=t.prototype;return e.appliesToNodeContext=function(t){return gs(t.floatReference)},e.appliesToFloat=function(t){return!0},e.createPageFloat=function(t,e,n){var i=t.floatReference,r=t.floatSide,o=t.toNodePosition();return n.resolveFloatReferenceFromColumnSpan(i,t.columnSpan,t).thenAsync((function(n){var a=new ms(o,i=n,r,t.clearSide,e.flowName,t.floatMinWrapBlock);return e.addPageFloat(a),Ti(a)}))},e.createPageFloatFragment=function(t,e,n,i){return new Es(t[0].float.floatReference,e,t,n,i)},e.findPageFloatFragment=function(t,e){return e.findPageFloatFragment(t)},e.adjustPageFloatArea=function(t,e,n){},e.forbid=function(t,e){},t}()));var Ds=Es,Ss=function(t){function e(e,n,i,r,o){var a;return(a=t.call(this,e,n,"block-end",null,i,o)||this).footnotePolicy=r,a}return I(e,t),e.prototype.isAllowedToPrecede=function(t){return!(t instanceof e)},e}(ms),Ns=function(t){function e(e,n,i,r){return t.call(this,e,"block-end",n,i,r)||this}I(e,t);var n=e.prototype;return n.getOrder=function(){return 1/0},n.shouldBeStashedBefore=function(t){return t instanceof Ss||this.getOrder()<t.getOrder()},e}(Ds),Ts=function(){function t(t){this.footnote=t}return t.prototype.allowLayout=function(t){return!io(t.toNodePosition(),this.footnote.nodePosition)},t}();ws.register(new(function(){function t(){}var e=t.prototype;return e.appliesToNodeContext=function(t){return"footnote"===t.floatSide},e.appliesToFloat=function(t){return t instanceof Ss},e.createPageFloat=function(t,e,n){var i=ps.REGION,r=e.getPageFloatLayoutContext(i);e.getPageFloatLayoutContext(ps.PAGE).hasSameContainerAs(r)&&(i=ps.PAGE);var o=t.toNodePosition(),a=new Ss(o,i,e.flowName,t.footnotePolicy,t.floatMinWrapBlock);return e.addPageFloat(a),Ti(a)},e.createPageFloatFragment=function(t,e,n,i){return new Ns(t[0].float.floatReference,t,n,i)},e.findPageFloatFragment=function(t,e){return e.getPageFloatLayoutContext(t.floatReference).floatFragments.filter((function(t){return t instanceof Ns}))[0]||null},e.adjustPageFloatArea=function(t,e,n){t.isFootnote=!0,t.adjustContentRelativeSize=!1;var i=t.element;t.vertical=n.layoutContext.applyFootnoteStyle(e.vertical,n.layoutContext.nodeContext&&"rtl"===n.layoutContext.nodeContext.direction,i),t.convertPercentageSizesToPx(i),n.setComputedInsets(i,t),n.setComputedWidthAndHeight(i,t)},e.forbid=function(t,e){var n=t;switch(n.footnotePolicy){case Ye.line:var i=new Ts(n);e.addLayoutConstraint(i,n.floatReference)}},t}()));var As={page:!0,left:!0,right:!0,recto:!0,verso:!0,column:!0,region:!0};function xs(t){return!!As[t]}var Is={left:!0,right:!0,recto:!0,verso:!0};function Fs(t){return!!Is[t]}var Ps={avoid:!0,"avoid-page":!0,"avoid-column":!0,"avoid-region":!0};function Os(t){return!!Ps[t]}function Rs(t,e){if(!t)return e;if(!e)return t;if(Fs(e))return e;if(Fs(t))return t;var n=xs(t),i=xs(e);if(!n||!i)return i?e:n?t:Os(e)?e:Os(t)?t:e;switch(e){case"column":return t;case"region":return"column"===t?e:t;default:return e}}function ks(t){switch(t){case"left":case"right":case"recto":case"verso":return t;default:return"any"}}function Ls(t){switch(t){case"left":case"right":case"recto":case"verso":return t;default:return null}}function Bs(t,e,n,i){var r=t.viewNode;if(!r)return NaN;if(1==r.nodeType){if(t.after||!t.inline){var o=e.getElementClientRect(r);if(o.right>=o.left&&o.bottom>=o.top)return t.after?i?o.left:o.bottom:i?o.right:o.top}return NaN}var a=NaN,s=r.ownerDocument.createRange(),u=r.textContent.length;if(!u)return NaN;t.after&&(n+=u),n>=u&&(n=u-1),s.setStart(r,n),s.setEnd(r,n+1);var l=e.getRangeClientRects(s);i&&function(t){if(null==vt){var e=t.ownerDocument,n=e.createElement("div");n.style.position="absolute",n.style.top="0px",n.style.left="0px",n.style.width="100px",n.style.height="100px",n.style.overflow="hidden",n.style.lineHeight="16px",n.style.fontSize="16px",et(n,"writing-mode","vertical-rl"),t.appendChild(n);var i=e.createTextNode("a a a a a a a a a a a a a a a a");n.appendChild(i);var r=e.createRange();r.setStart(i,0),r.setEnd(i,1);var o=r.getBoundingClientRect();vt=o.right-o.left<10,t.removeChild(n)}return vt}(document.body)&&(l=function(t,e,n){var i=n.ownerDocument.createRange();i.setStart(n,0),i.setEnd(n,n.textContent.length);for(var r,o=t.getRangeClientRects(i),a=[],s=_(e);!(r=s()).done;){var u=r.value,l=void 0;for(l=0;l<o.length;l++){var c=o[l];if(u.top>=c.top&&u.bottom<=c.bottom&&Math.abs(u.left-c.left)<1){a.push({top:u.top,left:c.left,bottom:u.bottom,right:c.right});break}}l==o.length&&(f.warn("Could not fix character box"),a.push(u))}return a}(e,l,r));for(var c,h=0,d=_(l);!(c=d()).done;){var p=c.value,g=i?p.bottom-p.top:p.right-p.left;p.right>p.left&&p.bottom>p.top&&(isNaN(a)||g>h)&&(a=i?p.left:p.bottom,h=g)}return a}function _s(t,e,n){var i=e.clientLayout.getElementClientRect(t),r=e.getComputedMargin(t);return n?i.width+r.left+r.right:i.height+r.top+r.bottom}function Ms(t){for(;t;){if(t.parentNode===t.ownerDocument)return!1;t=t.parentNode}return!0}function Us(t,e){if(t)for(var n;(n=t.lastChild)!=e;)t.removeChild(n)}function Vs(t){return!!t.getAttribute("data-adapt-spec")}function zs(t){if(!t)return!1;var e=t.viewNode;return!(!e||1!==e.nodeType)&&Vs(e)}p("SIMPLE_PROPERTY",(function(t){var e=t.name,n=t.value;switch(e){case"page-break-before":case"page-break-after":case"page-break-inside":return{name:e.replace(/^page-/,""),value:n===Ye.always?Ye.page:n,important:t.important};default:return t}}));var Hs=function(){function t(){}var e=t.prototype;return e.calculateOffset=function(t){return Gs(this.getNodeContext(),t.collectElementsOffset())},e.breakPositionChosen=function(t){},e.getNodeContext=function(){return null},t}();function Gs(t,e){return{current:e.reduce((function(e,n){return e+n.calculateOffset(t)}),0),minimum:e.reduce((function(e,n){return e+n.calculateMinimumOffset(t)}),0)}}var Ws=function(t){function e(e,n,i,r){var o;return(o=t.call(this)||this).position=e,o.breakOnEdge=n,o.overflows=i,o.computedBlockSize=r,o.isEdgeUpdated=!1,o.edge=0,o.overflowIfRepetitiveElementsDropped=i,o}I(e,t);var n=e.prototype;return n.findAcceptableBreak=function(t,e){return this.updateOverflows(t),e<this.getMinBreakPenalty()?null:t.findEdgeBreakPosition(this)},n.getMinBreakPenalty=function(){if(!this.isEdgeUpdated)throw new Error("EdgeBreakPosition.prototype.updateEdge not called");var t=this.isFirstContentOfRepetitiveElementsOwner()&&!this.overflowIfRepetitiveElementsDropped;return(Os(this.breakOnEdge)?1:0)+(this.overflows&&!t?3:0)+(this.position.parent?this.position.parent.breakPenalty:0)},n.updateEdge=function(t){var e=t.calculateClonedPaddingBorder(this.position);this.edge=Bs(this.position,t.clientLayout,0,t.vertical)+e,this.isEdgeUpdated=!0},n.updateOverflows=function(t){this.isEdgeUpdated||this.updateEdge(t);var e=this.edge,n=this.calculateOffset(t);this.overflowIfRepetitiveElementsDropped=t.isOverflown(e+(t.vertical?-1:1)*n.minimum),this.overflows=this.position.overflow=t.isOverflown(e+(t.vertical?-1:1)*n.current)},n.getNodeContext=function(){return this.position},n.isFirstContentOfRepetitiveElementsOwner=function(){var t=this.getNodeContext();if(!t||!t.parent)return!1;var e=t.parent.formattingContext;if(!Or.isInstanceOfRepetitiveElementsOwnerFormattingContext(e))return!1;var n=e.getRepetitiveElements();return!!n&&n.isFirstContentNode(t)},e}(Hs);function Xs(t){var e,n=t.toString();switch(n){case"inline-flex":e="flex";break;case"inline-grid":e="grid";break;case"inline-table":e="table";break;case"inline":case"table-row-group":case"table-column":case"table-column-group":case"table-header-group":case"table-footer-group":case"table-row":case"table-cell":case"table-caption":case"inline-block":e="block";break;default:e=n}return _e(e)}function js(t){return t===Ye.absolute||t===Ye.fixed}function Ks(t,e,n,i){return t===Ye.none||(js(e)?(n=Ye.none,t=Xs(t)):(n&&n!==Ye.none||i)&&(t=Xs(t))),{display:t,position:e,float:n}}function $s(t,e,n,i){return Ks(t,e,n,i).display===Ye.block}function qs(t){switch(t.toString()){case"inline":case"inline-block":case"inline-list-item":case"inline-flex":case"inline-grid":case"ruby":case"inline-table":return!0;default:return!1}}var Ys=function(){function t(){}return t.prototype.find=function(t){for(var n=v(e.HOOKS.RESOLVE_LAYOUT_PROCESSOR),i=0;i<n.length;i++){var r=n[i](t);if(r)return r}throw new Error("No processor found for a formatting context: "+t.getName())},t}(),Zs=function(){function t(){}var e=t.prototype;return e.layout=function(t,e,n){return e.isFloatNodeContext(t)?e.layoutFloatOrFootnote(t):e.isBreakable(t)?e.layoutBreakableBlock(t):e.layoutUnbreakable(t)},e.createEdgeBreakPosition=function(t,e,n,i){return new Ws(t.copy(),e,n,i)},e.startNonInlineElementNode=function(t){return!1},e.afterNonInlineElementNode=function(t,e){return!1},e.clearOverflownViewNodes=function(t,e,n,i){if(n.viewNode&&n.viewNode.parentNode){var r=n.viewNode.parentNode;Us(r,n.viewNode),i&&r.removeChild(n.viewNode)}},e.finishBreak=function(t,e,n,i){var r=n||null!=e.viewNode&&1==e.viewNode.nodeType&&!e.after;return t.clearOverflownViewNodes(e,r),i&&(t.fixJustificationIfNeeded(e,!0),t.layoutContext.processFragmentedBlockEdge(r?e:e.parent)),Ti(!0)},t}(),Qs=function(){function t(t){this.parent=t,this.formattingContextType="Block"}var e=t.prototype;return e.getName=function(){return"Block formatting context (BlockFormattingContext)"},e.isFirstTime=function(t,e){return e},e.getParent=function(){return this.parent},e.saveState=function(){},e.restoreState=function(t){},t}(),Js=new Zs,tu=Ir.isInstanceOfBlockFormattingContext;p(e.HOOKS.RESOLVE_FORMATTING_CONTEXT,(function(t,e,n,i,r,o){var a=t.parent;return!a&&t.formattingContext||a&&t.formattingContext!==a.formattingContext?null:t.establishesBFC||!t.formattingContext&&$s(n,i,r,o)?new Qs(a?a.formattingContext:null):null})),p(e.HOOKS.RESOLVE_LAYOUT_PROCESSOR,(function(t){return t instanceof Qs?Js:null}));var eu=function(){function t(){this.initialBreakPositions=null,this.initialStateOfFormattingContext=null}var e=t.prototype;return e.layout=function(t,e){return this.prepareLayout(t,e),this.tryLayout(t,e)},e.tryLayout=function(t,e){var n=this,i=Ni("AbstractLayoutRetryer.tryLayout");this.saveState(t,e);var r=this.resolveLayoutMode(t);return r.doLayout(t,e).then((function(o){var a=r.accept(o,e);(a=r.postLayout(o,n.initialPosition,e,a))?i.finish(o):(n.clearNodes(n.initialPosition),n.restoreState(t,e),n.tryLayout(n.initialPosition,e).thenFinish(i))})),i.result()},e.prepareLayout=function(t,e){},e.clearNodes=function(t){for(var e,n,i=t.viewNode||t.parent.viewNode;e=i.lastChild;)i.removeChild(e);for(;n=i.nextSibling;)n.parentNode.removeChild(n)},e.saveState=function(t,e){this.initialPosition=t.copy(),this.initialBreakPositions=[].concat(e.breakPositions),this.initialFragmentLayoutConstraints=[].concat(e.fragmentLayoutConstraints),t.formattingContext&&(this.initialStateOfFormattingContext=t.formattingContext.saveState())},e.restoreState=function(t,e){e.breakPositions=this.initialBreakPositions,e.fragmentLayoutConstraints=this.initialFragmentLayoutConstraints,t.formattingContext&&t.formattingContext.restoreState(this.initialStateOfFormattingContext)},t}(),nu=function(){function t(){}var e=t.prototype;return e.initialState=function(t){return{nodeContext:t,atUnforcedBreak:!1,break:!1}},e.startNonDisplayableNode=function(t){},e.afterNonDisplayableNode=function(t){},e.startIgnoredTextNode=function(t){},e.afterIgnoredTextNode=function(t){},e.startNonElementNode=function(t){},e.afterNonElementNode=function(t){},e.startInlineElementNode=function(t){},e.afterInlineElementNode=function(t){},e.startNonInlineElementNode=function(t){},e.afterNonInlineElementNode=function(t){},e.finish=function(t){},t}(),iu=function(){function t(t,e){this.strategy=t,this.layoutContext=e}return t.prototype.iterate=function(t){var e=this,n=this.strategy,i=n.initialState(t),r=Ni("LayoutIterator");return r.loopWithFrame((function(t){for(var r;i.nodeContext;){var o=((r=i.nodeContext.viewNode?1!==i.nodeContext.viewNode.nodeType?Zr(i.nodeContext.viewNode,i.nodeContext.whitespace)?i.nodeContext.after?n.afterIgnoredTextNode(i):n.startIgnoredTextNode(i):i.nodeContext.after?n.afterNonElementNode(i):n.startNonElementNode(i):i.nodeContext.inline?i.nodeContext.after?n.afterInlineElementNode(i):n.startInlineElementNode(i):i.nodeContext.after?n.afterNonInlineElementNode(i):n.startNonInlineElementNode(i):i.nodeContext.after?n.afterNonDisplayableNode(i):n.startNonDisplayableNode(i))&&r.isPending()?r:Ti(!0)).thenAsync((function(){return i.break?Ti(null):e.layoutContext.nextInTree(i.nodeContext,i.atUnforcedBreak)}));if(o.isPending())return void o.then((function(e){i.break?t.breakLoop():(i.nodeContext=e,t.continueLoop())}));if(i.break)return void t.breakLoop();i.nodeContext=o.get()}n.finish(i),t.breakLoop()})).then((function(){r.finish(i.nodeContext)})),r.result()},t}(),ru=function(t){function e(e){var n;return(n=t.call(this)||this).leadingEdge=e,n}I(e,t);var n=e.prototype;return n.startNonInlineBox=function(t){},n.endEmptyNonInlineBox=function(t){},n.endNonInlineBox=function(t){},n.initialState=function(t){return{nodeContext:t,atUnforcedBreak:!!this.leadingEdge&&t.after,break:!1,leadingEdge:this.leadingEdge,breakAtTheEdge:null,onStartEdges:!1,leadingEdgeContexts:[],lastAfterNodeContext:null}},n.processForcedBreak=function(t,e){var n=!t.leadingEdge&&xs(t.breakAtTheEdge);if(n){var i=t.nodeContext=t.leadingEdgeContexts[0]||t.nodeContext;i.viewNode.parentNode.removeChild(i.viewNode),e.pageBreakType=t.breakAtTheEdge}return n},n.saveEdgeAndProcessOverflow=function(t,e){var n=e.checkOverflowAndSaveEdgeAndBreakPosition(t.lastAfterNodeContext,null,!0,t.breakAtTheEdge);return n&&(t.nodeContext=(t.lastAfterNodeContext||t.nodeContext).modify(),t.nodeContext.overflow=!0),n},n.processLayoutConstraint=function(t,e,n){var i=t.nodeContext,r=!e.allowLayout(i);return r&&(n.checkOverflowAndSaveEdgeAndBreakPosition(t.lastAfterNodeContext,null,!1,t.breakAtTheEdge),(i=t.nodeContext=i.modify()).overflow=!0),r},n.startNonElementNode=function(t){t.onStartEdges=!1},n.startNonInlineElementNode=function(t){return t.leadingEdgeContexts.push(t.nodeContext.copy()),t.breakAtTheEdge=Rs(t.breakAtTheEdge,t.nodeContext.breakBefore),t.onStartEdges=!0,this.startNonInlineBox(t)},n.afterNonInlineElementNode=function(t){var e;return(t.onStartEdges?((e=this.endEmptyNonInlineBox(t))&&e.isPending()?e:Ti(!0)).thenAsync((function(){return t.break||(t.leadingEdgeContexts=[],t.leadingEdge=!1,t.atUnforcedBreak=!1,t.breakAtTheEdge=null),Ti(!0)})):(e=this.endNonInlineBox(t))&&e.isPending()?e:Ti(!0)).thenAsync((function(){return t.break||(t.onStartEdges=!1,t.lastAfterNodeContext=t.nodeContext.copy(),t.breakAtTheEdge=Rs(t.breakAtTheEdge,t.nodeContext.breakAfter)),Ti(!0)}))},e}(nu),ou=[],au=xr.registerFragmentIndex,su=function(){function t(t,e){this.sourceNode=t,this.styler=e}var e=t.prototype;return e.createElement=function(t,e){var n=this,i=e.viewNode.ownerDocument.createElement("div"),r=new vu(t,i,e),o=r.getColumn().pageBreakType;return r.getColumn().pageBreakType=null,r.layout(this.createNodePositionForPseudoElement(),!0).thenAsync((function(){n.styler.contentProcessed["after-if-continues"]=!1,r.getColumn().pageBreakType=o;var t=i.firstChild;return et(t,"display","block"),Ti(t)}))},e.createNodePositionForPseudoElement=function(){var t=Mr.createElementNS(W.XHTML,"div");zr(t,"after-if-continues");var e=this.createShadowContext(t);return new ho({steps:[{node:t,shadowType:e.type,shadowContext:e,nodeShadow:null,shadowSibling:null}],offsetInNode:0,after:!1,preprocessedTextContent:null})},e.createShadowContext=function(t){return new so(this.sourceNode,t,null,null,null,kr.ShadowType.ROOTED,this.styler)},t}(),uu=function(){function t(t,e,n){this.nodeContext=t,this.afterIfContinues=e,this.pseudoElementHeight=n,this.flagmentLayoutConstraintType="AfterIfContinue"}var e=t.prototype;return e.allowLayout=function(t,e,n){return!(e&&!t||t&&t.overflow)},e.nextCandidate=function(t){return!1},e.postLayout=function(t,e,n,i){},e.finishBreak=function(t,e){var n=this;return this.getRepetitiveElements().affectTo(t)?this.afterIfContinues.createElement(e,this.nodeContext).thenAsync((function(t){return n.nodeContext.viewNode.appendChild(t),Ti(!0)})):Ti(!0)},e.getRepetitiveElements=function(){return new lu(this.nodeContext,this.pseudoElementHeight)},e.equalsTo=function(e){return e instanceof t&&this.afterIfContinues==e.afterIfContinues},e.getPriorityOfFinishBreak=function(){return 9},t}(),lu=function(){function t(t,e){this.nodeContext=t,this.pseudoElementHeight=e}var e=t.prototype;return e.calculateOffset=function(t){return this.affectTo(t)?this.pseudoElementHeight:0},e.calculateMinimumOffset=function(t){return this.calculateOffset(t)},e.affectTo=function(t){if(!t)return!1;var e=t.shadowContext?t.shadowContext.owner:t.sourceNode;if(e===this.nodeContext.sourceNode)return!!t.after;for(var n=e.parentNode;n;n=n.parentNode)if(n===this.nodeContext.sourceNode)return!0;return!1},t}();function cu(t,e){if(!t||!t.afterIfContinues||t.after||e.isFloatNodeContext(t))return Ti(t);var n=t.afterIfContinues;return n.createElement(e,t).thenAsync((function(i){var r=function(t,e,n){var i=t.viewNode;i.appendChild(n);var r=_s(n,e,t.vertical);return i.removeChild(n),r}(t,e,i);return e.fragmentLayoutConstraints.push(new uu(t,n,r)),Ti(t)}))}function hu(t,e){return t.thenAsync((function(t){return cu(t,e)}))}var fu={img:!0,svg:!0,audio:!0,video:!0},du=function(){function t(t){this.constraints=t}return t.prototype.allowLayout=function(t){return this.constraints.every((function(e){return e.allowLayout(t)}))},t}(),pu=function(t){function e(e,n){var i;return(i=t.call(this)||this).checkPoints=e,i.penalty=n,i.alreadyEvaluated=!1,i.breakNodeContext=null,i}I(e,t);var n=e.prototype;return n.findAcceptableBreak=function(t,e){return e<this.getMinBreakPenalty()?null:(this.alreadyEvaluated||(this.breakNodeContext=t.findBoxBreakPosition(this,e>0),this.alreadyEvaluated=!0),this.breakNodeContext)},n.getMinBreakPenalty=function(){return this.penalty},n.getNodeContext=function(){return this.alreadyEvaluated?this.breakNodeContext:this.checkPoints[this.checkPoints.length-1]},e}(Hs);function gu(t){switch(t){case"ruby":case"inline-block":case"inline-flex":case"inline-grid":case"inline-list-item":case"inline-table":return!0}return!1}var mu=function(t){function n(e,n,i,r,o){var a;return(a=t.call(this,e)||this).layoutContext=n,a.clientLayout=i,a.layoutConstraint=r,a.pageFloatLayoutContext=o,a.flowRootFormattingContext=null,a.isFloat=!1,a.isFootnote=!1,a.startEdge=0,a.endEdge=0,a.beforeEdge=0,a.afterEdge=0,a.footnoteEdge=0,a.box=null,a.chunkPositions=null,a.bands=null,a.overflown=!1,a.breakPositions=null,a.pageBreakType=null,a.forceNonfitting=!0,a.leftFloatEdge=0,a.rightFloatEdge=0,a.bottommostFloatTop=0,a.stopAtOverflow=!0,a.lastAfterPosition=null,a.fragmentLayoutConstraints=[],a.pseudoParent=null,a.nodeContextOverflowingDueToRepetitiveElements=null,a.blockDistanceToBlockEndFloats=NaN,a.last=e.lastChild,a.viewDocument=e.ownerDocument,o.setContainer(L(a)),a}I(n,t);var i=n.prototype;return i.getTopEdge=function(){return this.vertical?this.startEdge:this.beforeEdge},i.getBottomEdge=function(){return this.vertical?this.endEdge:this.afterEdge},i.getLeftEdge=function(){return this.vertical?this.afterEdge:this.startEdge},i.getRightEdge=function(){return this.vertical?this.beforeEdge:this.endEdge},i.isFloatNodeContext=function(t){return!(!t.floatSide||this.isFloat&&!t.parent)},i.stopByOverflow=function(t){return this.stopAtOverflow&&!!t&&t.overflow},i.isOverflown=function(t){return this.vertical?t<this.footnoteEdge:t>this.footnoteEdge},i.getExclusions=function(){var t=this.pageFloatLayoutContext.getFloatFragmentExclusions();return this.exclusions.concat(t)},i.openAllViews=function(t){var e=this,n=Ni("openAllViews"),i=t.steps;this.layoutContext.setViewRoot(this.element,this.isFootnote);var r=i.length-1,o=null;return n.loop((function(){for(;r>=0&&(o=oo(i[r],o),r!==i.length-1||o.formattingContext||(o.formattingContext=e.flowRootFormattingContext),0!=r||(o.offsetInNode=e.calculateOffsetInNodeForNodeContext(t),o.after=t.after,o.preprocessedTextContent=t.preprocessedTextContent,!o.after));){var n=e.layoutContext.setCurrent(o,0==r&&0==o.offsetInNode);if(r--,n.isPending())return n}return Ti(!1)})).then((function(){n.finish(o)})),n.result()},i.calculateOffsetInNodeForNodeContext=function(t){return t.preprocessedTextContent?_r(t.preprocessedTextContent,t.offsetInNode,1):t.offsetInNode},i.maybePeelOff=function(t,e){if(t.firstPseudo&&t.inline&&!t.after&&0==t.firstPseudo.count&&1!=t.viewNode.nodeType){var n=t.viewNode.textContent.match(M);return this.layoutContext.peelOff(t,n?n[0].length:0)}return Ti(t)},i.buildViewToNextBlockEdge=function(t,e){var n=this,i=!1,r=Ni("buildViewToNextBlockEdge");return r.loopWithFrame((function(r){t.viewNode&&!zs(t)&&e.push(t.copy()),n.maybePeelOff(t,0).then((function(o){o!==t&&(zs(t=o)||e.push(t.copy())),n.nextInTree(t).then((function(e){(t=e)?(!i&&n.layoutConstraint.allowLayout(t)||(i=!0,(t=t.modify()).overflow=!0),n.isFloatNodeContext(t)&&!n.vertical?n.layoutFloatOrFootnote(t).then((function(e){t=e,n.pageFloatLayoutContext.isInvalidated()&&(t=null),t?r.continueLoop():r.breakLoop()})):t.inline?r.continueLoop():r.breakLoop()):r.breakLoop()}))}))})).then((function(){r.finish(t)})),r.result()},i.nextInTree=function(t,e){return hu(this.layoutContext.nextInTree(t,e),this)},i.buildDeepElementView=function(t){var e=this;if(!t.viewNode)return Ti(t);var n=[],i=t.sourceNode,r=Ni("buildDeepElementView");return r.loopWithFrame((function(r){t.viewNode&&t.inline&&!zs(t)?n.push(t.copy()):(n.length>0&&e.postLayoutBlock(t,n),n=[]),e.maybePeelOff(t,0).then((function(o){var a=o;if(a!==t){for(var s=a;s&&s.sourceNode!=i;)s=s.parent;if(null==s)return t=a,void r.breakLoop();zs(a)||n.push(a.copy())}e.nextInTree(a).then((function(n){(t=n)&&t.sourceNode!=i?e.layoutConstraint.allowLayout(t)?r.continueLoop():((t=t.modify()).overflow=!0,e.stopAtOverflow?r.breakLoop():r.continueLoop()):r.breakLoop()}))}))})).then((function(){n.length>0&&e.postLayoutBlock(t,n),r.finish(t)})),r.result()},i.createFloat=function(t,e,n,i){var r=this.viewDocument.createElement("div");return this.vertical?(i>=this.height&&(i-=.1),et(r,"height",n+"px"),et(r,"width",i+"px")):(n>=this.width&&(n-=.1),et(r,"width",n+"px"),et(r,"height",i+"px")),et(r,"float",e),et(r,"clear",e),this.element.insertBefore(r,t),r},i.killFloats=function(){for(var t=this.element.firstChild;t;){var e=t.nextSibling;if(1==t.nodeType){var n=t,i=n.style.cssFloat;if("left"!=i&&"right"!=i)break;this.element.removeChild(n)}t=e}},i.createFloats=function(){for(var t,e=this.element.firstChild,n=this.bands,i=this.vertical?this.getTopEdge():this.getLeftEdge(),r=this.vertical?this.getBottomEdge():this.getRightEdge(),o=_(n);!(t=o()).done;){var a=t.value,s=a.y2-a.y1;a.left=this.createFloat(e,"left",a.x1-i,s),a.right=this.createFloat(e,"right",r-a.x2,s)}},i.calculateEdge=function(t,e,n,i){var r;if(t&&Ms(t.viewNode))return NaN;if(t&&t.after&&!t.inline&&(r=Bs(t,this.clientLayout,0,this.vertical),!isNaN(r)))return r;for(var o=i-(t=e[n]).boxOffset;;){if(r=Bs(t,this.clientLayout,o,this.vertical),!isNaN(r))return r;if(o>0)o--;else{if(--n<0)return this.beforeEdge;1!=(t=e[n]).viewNode.nodeType&&(o=t.viewNode.textContent.length)}}},i.parseComputedLength=function(t){if("number"==typeof t)return t;var e=t.match(/^(-?[0-9]*(\.[0-9]*)?)px$/);return e?parseFloat(e[0]):0},i.getComputedMargin=function(t){var e=this.clientLayout.getElementComputedStyle(t),n=new an(0,0,0,0);return e&&(n.left=this.parseComputedLength(e.marginLeft),n.top=this.parseComputedLength(e.marginTop),n.right=this.parseComputedLength(e.marginRight),n.bottom=this.parseComputedLength(e.marginBottom)),n},i.getComputedPaddingBorder=function(t){var e=this.clientLayout.getElementComputedStyle(t),n=new an(0,0,0,0);return e&&(n.left=this.parseComputedLength(e.borderLeftWidth)+this.parseComputedLength(e.paddingLeft),n.top=this.parseComputedLength(e.borderTopWidth)+this.parseComputedLength(e.paddingTop),n.right=this.parseComputedLength(e.borderRightWidth)+this.parseComputedLength(e.paddingRight),n.bottom=this.parseComputedLength(e.borderBottomWidth)+this.parseComputedLength(e.paddingBottom)),n},i.getComputedInsets=function(t){var e=this.clientLayout.getElementComputedStyle(t),n=new an(0,0,0,0);if(e){if("border-box"==e.boxSizing)return this.getComputedMargin(t);n.left=this.parseComputedLength(e.marginLeft)+this.parseComputedLength(e.borderLeftWidth)+this.parseComputedLength(e.paddingLeft),n.top=this.parseComputedLength(e.marginTop)+this.parseComputedLength(e.borderTopWidth)+this.parseComputedLength(e.paddingTop),n.right=this.parseComputedLength(e.marginRight)+this.parseComputedLength(e.borderRightWidth)+this.parseComputedLength(e.paddingRight),n.bottom=this.parseComputedLength(e.marginBottom)+this.parseComputedLength(e.borderBottomWidth)+this.parseComputedLength(e.paddingBottom)}return n},i.setComputedInsets=function(t,e){var n=this.clientLayout.getElementComputedStyle(t);n&&(e.marginLeft=this.parseComputedLength(n.marginLeft),e.borderLeft=this.parseComputedLength(n.borderLeftWidth),e.paddingLeft=this.parseComputedLength(n.paddingLeft),e.marginTop=this.parseComputedLength(n.marginTop),e.borderTop=this.parseComputedLength(n.borderTopWidth),e.paddingTop=this.parseComputedLength(n.paddingTop),e.marginRight=this.parseComputedLength(n.marginRight),e.borderRight=this.parseComputedLength(n.borderRightWidth),e.paddingRight=this.parseComputedLength(n.paddingRight),e.marginBottom=this.parseComputedLength(n.marginBottom),e.borderBottom=this.parseComputedLength(n.borderBottomWidth),e.paddingBottom=this.parseComputedLength(n.paddingBottom))},i.setComputedWidthAndHeight=function(t,e){var n=this.clientLayout.getElementComputedStyle(t);n&&(e.width=this.parseComputedLength(n.width),e.height=this.parseComputedLength(n.height))},i.layoutUnbreakable=function(t){return this.buildDeepElementView(t)},i.layoutFloat=function(t){var e=this,n=Ni("layoutFloat"),i=t.viewNode,r=t.floatSide;return et(i,"float","none"),et(i,"display","inline-block"),et(i,"vertical-align","top"),this.buildDeepElementView(t).then((function(o){for(var a=e.clientLayout.getElementClientRect(i),s=e.getComputedMargin(i),u=new rn(a.left-s.left,a.top-s.top,a.right+s.right,a.bottom+s.bottom),l=e.startEdge,c=e.endEdge,h=t.parent;h&&h.inline;)h=h.parent;if(h){var f=h.viewNode.ownerDocument.createElement("div");f.style.left="0px",f.style.top="0px",e.vertical?(f.style.bottom="0px",f.style.width="1px"):(f.style.right="0px",f.style.height="1px"),h.viewNode.appendChild(f);var d=e.clientLayout.getElementClientRect(f);l=Math.max(e.getStartEdge(d),l),c=Math.min(e.getEndEdge(d),c),h.viewNode.removeChild(f);var p=e.vertical?u.y2-u.y1:u.x2-u.x1;"left"==r?c=Math.max(c,l+p):l=Math.min(l,c-p),h.viewNode.appendChild(t.viewNode)}var g=new rn(l,e.getBoxDir()*e.beforeEdge,c,e.getBoxDir()*e.afterEdge),m=u;e.vertical&&(m=En(u));var v=e.getBoxDir();if(m.y1<e.bottommostFloatTop*v){var E=m.y2-m.y1;m.y1=e.bottommostFloatTop*v,m.y2=m.y1+E}!function(t,e,n,i){for(var r=n.y1,o=n.x2-n.x1,a=n.y2-n.y1,s=wn(e,r);;){var u=r+a;if(u>t.y2)return!1;for(var l=t.x1,c=t.x2,h=s;h<e.length&&e[h].y1<u;h++){var f=e[h];f.x1>l&&(l=f.x1),f.x2<c&&(c=f.x2)}if(l+o<=c||s>=e.length)return"left"==i?(n.x1=l,n.x2=l+o):(n.x1=c-o,n.x2=c),n.y2+=r-n.y1,n.y1=r,!0;r=e[s].y2,s++}}(g,e.bands,m,r),e.vertical&&(u=bn(m));var b,C=e.getComputedInsets(i);et(i,"width",u.x2-u.x1-C.left-C.right+"px"),et(i,"height",u.y2-u.y1-C.top-C.bottom+"px"),et(i,"position","absolute"),et(i,"display",t.display);var y=null;if(h&&(y=h.containingBlockForAbsolute?h:h.getContainingBlockForAbsolute()),y){var w=y.viewNode.ownerDocument.createElement("div");w.style.position="absolute",y.vertical?w.style.right="0":w.style.left="0",w.style.top="0",y.viewNode.appendChild(w),b=e.clientLayout.getElementClientRect(w),y.viewNode.removeChild(w)}else b={left:e.getLeftEdge()-e.paddingLeft,right:e.getRightEdge()+e.paddingRight,top:e.getTopEdge()-e.paddingTop};(y?y.vertical:e.vertical)?et(i,"right",b.right-u.x2+"px"):et(i,"left",u.x1-b.left+"px"),et(i,"top",u.y1-b.top+"px"),t.clearSpacer&&(t.clearSpacer.parentNode.removeChild(t.clearSpacer),t.clearSpacer=null);var D=e.vertical?u.x1:u.y2,S=e.vertical?u.x2:u.y1;e.isOverflown(D)&&0!=e.breakPositions.length?((t=t.modify()).overflow=!0,n.finish(t)):(e.killFloats(),g=new rn(e.getLeftEdge(),e.getTopEdge(),e.getRightEdge(),e.getBottomEdge()),e.vertical&&(g=En(g)),function(t,e,n,i,r){for(i||(i=[new un(n.y1,n.y2,n.x1,n.x2)]);i.length>0&&i[0].y2<=t.y1;)i.shift();if(0!=i.length){var o;i[0].y1<t.y1&&(i[0].y1=t.y1);var a=0==e.length?t.y1:e[e.length-1].y2;a<t.y2&&e.push(new un(a,t.y2,t.x1,t.x2));for(var s,u=wn(e,i[0].y1),l=_(i);!(s=l()).done;){var c=s.value;if(u==e.length)break;for(e[u].y1<c.y1&&(o=e[u],u++,e.splice(u,0,new un(c.y1,o.y2,o.x1,o.x2)),o.y2=c.y1);u<e.length&&((o=e[u++]).y2>c.y2&&(e.splice(u,0,new un(c.y2,o.y2,o.x1,o.x2)),o.y2=c.y2),c.x1!=c.x2&&("left"==r?o.x1=Math.min(c.x2,t.x2):o.x2=Math.max(c.x1,t.x1)),o.y2!=c.y2););}yn(t,e)}}(g,e.bands,m,null,r),e.createFloats(),"left"==r?e.leftFloatEdge=D:e.rightFloatEdge=D,e.bottommostFloatTop=S,e.updateMaxReachedAfterEdge(D),n.finish(o))})),n.result()},i.setupFloatArea=function(t,e,n,i,r,o){var a=this.pageFloatLayoutContext,s=a.getContainer(e),u=t.element;s.element.parentNode.appendChild(u),t.isFloat=!0,t.originX=s.originX,t.originY=s.originY,t.vertical=s.vertical,t.marginLeft=t.marginRight=t.marginTop=t.marginBottom=0,t.borderLeft=t.borderRight=t.borderTop=t.borderBottom=0,t.paddingLeft=t.paddingRight=t.paddingTop=t.paddingBottom=0,t.exclusions=(s.exclusions||[]).concat(),t.forceNonfitting=!a.hasFloatFragments(),t.innerShape=null;var l=s.getPaddingRect();t.setHorizontalPosition(l.x1-s.originX,l.x2-l.x1),t.setVerticalPosition(l.y1-s.originY,l.y2-l.y1),r.adjustPageFloatArea(t,s,this),t.init();var c=!!a.setFloatAreaDimensions(t,e,n,i,!0,!a.hasFloatFragments(),o);return c?(t.killFloats(),t.init()):s.element.parentNode.removeChild(u),c},i.createPageFloatArea=function(t,e,n,i,r){var o=this.element.ownerDocument.createElement("div");et(o,"position","absolute");var a=this.pageFloatLayoutContext.getPageFloatLayoutContext(t.floatReference),s=new Cs(null,ps.COLUMN,null,this.pageFloatLayoutContext.flowName,t.nodePosition,null,null),u=a.getContainer(),l=new wu(e,o,this.layoutContext.clone(),this.clientLayout,this.layoutConstraint,s,u);return s.setContainer(l),this.setupFloatArea(l,t.floatReference,e,n,i,r)?l:null},i.layoutSinglePageFloatFragment=function(t,e,n,i,r,o,a){var s=this.pageFloatLayoutContext,u=(t=(a?a.continuations:[]).concat(t))[0].float,l=s.getPageFloatPlacementCondition(u,e,n),c=this.createPageFloatArea(u,e,o,r,l),h={floatArea:c,pageFloatFragment:null,newPosition:null};if(!c)return Ti(h);var f=Ni("layoutSinglePageFloatFragment"),d=!1,p=0;return f.loopWithFrame((function(e){if(p>=t.length)e.breakLoop();else{var n=new ho(t[p].nodePosition);c.layout(n,!0).then((function(t){h.newPosition=t,!t||i?(p++,e.continueLoop()):(d=!0,e.breakLoop())}))}})).then((function(){if(!d){var n=s.setFloatAreaDimensions(c,u.floatReference,e,o,!1,i,l);if(n){var a=r.createPageFloatFragment(t,n,c,!!h.newPosition);s.addPageFloatFragment(a,!0),h.pageFloatFragment=a}else d=!0}f.finish(h)})),f.result()},i.layoutPageFloatInner=function(t,e,n,i){var r=this,o=this.pageFloatLayoutContext,a=t.float;function s(e,n){n?o.removePageFloatFragment(n,!0):e&&e.element.parentNode.removeChild(e.element),o.restoreStashedFragments(a.floatReference),o.deferPageFloat(t)}o.stashEndFloatFragments(a);var u=Ni("layoutPageFloatInner");return this.layoutSinglePageFloatFragment([t],a.floatSide,a.clearSide,!o.hasFloatFragments(),e,n,i).then((function(t){var e=t.floatArea,n=t.pageFloatFragment,l=t.newPosition;n?r.layoutStashedPageFloats(a.floatReference,[i]).then((function(t){if(t){if(o.addPageFloatFragment(n),o.discardStashedFragments(a.floatReference),l){var i=new bs(a,l.primary);o.deferPageFloat(i)}u.finish(!0)}else s(e,n),u.finish(!1)})):(s(e,n),u.finish(!1))})),u.result()},i.layoutStashedPageFloats=function(t,e){var n=this,i=this.pageFloatLayoutContext,r=i.getStashedFloatFragments(t),o=[],a=[],s=!1,u=Ni("layoutStashedPageFloats"),l=0;return u.loopWithFrame((function(t){if(l>=r.length)t.breakLoop();else{var i=r[l];if(e.includes(i))return l++,void t.continueLoop();var u=(new ws).findByFloat(i.continuations[0].float);n.layoutSinglePageFloatFragment(i.continuations,i.floatSide,null,!1,u,null).then((function(e){var n=e.floatArea;n&&o.push(n);var i=e.pageFloatFragment;i?(a.push(i),l++,t.continueLoop()):(s=!0,t.breakLoop())}))}})).then((function(){s?(a.forEach((function(t){i.removePageFloatFragment(t,!0)})),o.forEach((function(t){var e=t.element;e&&e.parentNode&&e.parentNode.removeChild(e)}))):r.forEach((function(t){var e=t.area.element;e&&e.parentNode&&e.parentNode.removeChild(e)})),u.finish(!s)})),u.result()},i.setFloatAnchorViewNode=function(t){var e=t.viewNode.parentNode,n=e.ownerDocument.createElement("span");n.setAttribute("data-adapt-spec","1"),"footnote"===t.floatSide&&this.layoutContext.applyPseudoelementStyle(t,"footnote-call",n),e.appendChild(n),e.removeChild(t.viewNode);var i=t.modify();return i.after=!0,i.viewNode=n,i},i.resolveFloatReferenceFromColumnSpan=function(t,e,n){var i=this,r=Ni("resolveFloatReferenceFromColumnSpan"),o=this.pageFloatLayoutContext,a=o.getPageFloatLayoutContext(ps.REGION);return o.getContainer().width<a.getContainer().width&&t===ps.COLUMN?e===Ye.auto?this.buildDeepElementView(n.copy()).then((function(e){var n=e.viewNode,o=ds(i.clientLayout,n,[ls.MIN_CONTENT_INLINE_SIZE])[ls.MIN_CONTENT_INLINE_SIZE],a=i.getComputedMargin(n);r.finish((o+=i.vertical?a.top+a.bottom:a.left+a.right)>i.width?ps.REGION:t)})):r.finish(e===Ye.all?ps.REGION:t):r.finish(t),r.result()},i.layoutPageFloat=function(t){var e=this,n=this.pageFloatLayoutContext,i=(new ws).findByNodeContext(t),r=n.findPageFloatByNodePosition(t.toNodePosition());return(r?Ti(r):i.createPageFloat(t,n,this)).thenAsync((function(r){var o=ro(t,0),a=e.setFloatAnchorViewNode(t),s=i.findPageFloatFragment(r,n),u=new bs(r,o);if(s&&s.hasFloat(r))return n.registerPageFloatAnchor(r,a.viewNode),Ti(a);if(n.isForbidden(r)||n.hasPrecedingFloatsDeferredToNext(r))return n.deferPageFloat(u),n.registerPageFloatAnchor(r,a.viewNode),Ti(a);if(e.nodeContextOverflowingDueToRepetitiveElements)return Ti(null);var l=Bs(a,e.clientLayout,0,e.vertical);return e.isOverflown(l)?Ti(a):e.layoutPageFloatInner(u,i,l,s).thenAsync((function(t){return t?Ti(null):(n.registerPageFloatAnchor(r,a.viewNode),Ti(a))}))}))},i.createJustificationAdjustmentElement=function(t,e,n,i){var r=e.createElement("span");r.style.visibility="hidden",r.style.verticalAlign="top",r.setAttribute("data-adapt-spec","1");var o=e.createElement("span");o.style.fontSize="0",o.style.lineHeight="0",o.textContent=" #",r.appendChild(o),r.style.display="block",r.style.textIndent="0",r.style.textAlign="left",n.insertBefore(r,t);var a=this.clientLayout.getElementClientRect(o);r.style.textAlign="right";var s=this.clientLayout.getElementClientRect(o);r.style.textAlign="",r.style.display=function(t){if(null===Et){var e=t.ownerDocument,n=e.createElement("div");n.style.position="absolute",n.style.top="0px",n.style.left="0px",n.style.width="30px",n.style.height="100px",n.style.lineHeight="16px",n.style.fontSize="16px",n.style.textAlign="justify",t.appendChild(n);var i=e.createTextNode("a | ");n.appendChild(i);var r=e.createElement("span");r.style.display="inline-block",r.style.width="30px",n.appendChild(r);var o=e.createRange();o.setStart(i,0),o.setEnd(i,3);var a=o.getBoundingClientRect();Et=a.right<27,t.removeChild(n)}return Et}(document.body)?"inline":"inline-block";var u=i?s.top-a.top:s.left-a.left,l=u>=1?u-1+"px":"100%";return i?r.style.paddingTop=l:r.style.paddingLeft=l,r},i.addAndAdjustJustificationElement=function(t,e,n,i,r,o){return function(t,e,n,i){if(function(t){if(null===bt){var e=t.ownerDocument,n=e.createElement("div");n.style.position="absolute",n.style.top="0px",n.style.left="0px",n.style.width="40px",n.style.height="100px",n.style.lineHeight="16px",n.style.fontSize="16px",n.style.textAlign="justify",t.appendChild(n);var i=e.createTextNode("a a-");n.appendChild(i);var r=e.createElement("span");r.style.display="inline-block",r.style.width="40px",n.appendChild(r);var o=e.createRange();o.setStart(i,2),o.setEnd(i,4);var a=o.getBoundingClientRect();bt=a.right<37,t.removeChild(n)}return bt}(document.body)){var r=bu(t),o=e?n:n.previousSibling,a=o?o.textContent:"";if(a.charAt(a.length-1)===r){var s=n.ownerDocument,u=n.parentNode;!function(t){if(null===Ct){var e=t.ownerDocument,n=e.createElement("div");n.style.position="absolute",n.style.top="0px",n.style.left="0px",n.style.width="40px",n.style.height="100px",n.style.lineHeight="16px",n.style.fontSize="16px",n.style.textAlign="justify",t.appendChild(n);var i=e.createTextNode("a a-");n.appendChild(i),n.appendChild(e.createElement("wbr"));var r=e.createElement("span");r.style.display="inline-block",r.style.width="40px",n.appendChild(r);var o=e.createRange();o.setStart(i,2),o.setEnd(i,4);var a=o.getBoundingClientRect();Ct=a.right<37,t.removeChild(n)}return Ct}(document.body)?u.insertBefore(s.createElement("wbr"),i):u.insertBefore(s.createTextNode(" "),i)}}}(t,e,n,i),this.createJustificationAdjustmentElement(i,r,o,t.vertical)},i.compensateJustificationLineHeight=function(t,e,n){var i=this.clientLayout.getElementClientRect(t),r=this.clientLayout.getElementClientRect(e);n.vertical?(e.style.marginRight=r.right-i.right+"px",e.style.width="0px"):(e.style.marginTop=i.top-r.top+"px",e.style.height="0px"),e.setAttribute("data-adapt-spec","1")},i.fixJustificationIfNeeded=function(t,e){if(!t.after||t.inline){if(e){for(var n="",i=t.parent;i&&!n;i=i.parent)!i.inline&&i.viewNode&&(n=i.viewNode.style.textAlign);if("justify"!==n)return}var r=t.viewNode,o=r.ownerDocument,a=e&&(t.after||1!=r.nodeType),s=a?r.nextSibling:r;s&&!s.parentNode&&(s=null);var u=r.parentNode||t.parent&&t.parent.viewNode;if(u){var l=this.addAndAdjustJustificationElement(t,a,r,s,o,u);if(!e){var c=o.createElement("div");u.insertBefore(c,s),this.compensateJustificationLineHeight(l,c,t)}}}},i.processLineStyling=function(t,e,n){var i=this,r=Ni("processLineStyling"),o=n.concat([]);n.splice(0,n.length);var a=0,s=t.firstPseudo;return 0==s.count&&(s=s.outer),r.loopWithFrame((function(n){if(s){var r=i.findLinePositions(o),u=s.count-a;if(r.length<=u)n.breakLoop();else{var l=i.findAcceptableBreakInside(o,r[u-1],!0);null!=l?i.finishBreak(l,!1,!1).then((function(){a+=u,i.layoutContext.peelOff(l,0).then((function(r){i.fixJustificationIfNeeded(t=r,!1),s=t.firstPseudo,i.buildViewToNextBlockEdge(t,o=[]).then((function(t){e=t,n.continueLoop()}))}))})):n.breakLoop()}}else n.breakLoop()})).then((function(){Array.prototype.push.apply(n,o),r.finish(e)})),r.result()},i.isLoneImage=function(t){return!(2!=t.length&&this.breakPositions.length>0)&&t[0].sourceNode==t[1].sourceNode&&fu[t[0].sourceNode.localName]},i.getTrailingMarginEdgeAdjustment=function(t){for(var e=0,n=0,i=t.length-1;i>=0;i--){var r=t[i];if(!r.after||!r.viewNode||1!=r.viewNode.nodeType)break;var o=this.getComputedMargin(r.viewNode),a=this.vertical?-o.left:o.bottom;a>0?e=Math.max(e,a):n=Math.min(n,a)}return e-n},i.layoutBreakableBlock=function(t){var e=this,n=Ni("layoutBreakableBlock"),i=[];return this.buildViewToNextBlockEdge(t,i).then((function(r){var o=i.length-1;if(o<0)n.finish(r);else{var a=e.calculateEdge(r,i,o,i[o].boxOffset),s=!1;if(!r||!Ms(r.viewNode)){var u=Gs(r,e.collectElementsOffset());s=e.isOverflown(a+(e.vertical?-1:1)*u.minimum),e.isOverflown(a+(e.vertical?-1:1)*u.current)&&!e.nodeContextOverflowingDueToRepetitiveElements&&(e.nodeContextOverflowingDueToRepetitiveElements=r)}null==r&&(a+=e.getTrailingMarginEdgeAdjustment(i)),e.updateMaxReachedAfterEdge(a),(t.firstPseudo?e.processLineStyling(t,r,i):Ti(r)).then((function(t){e.postLayoutBlock(t,i),i.length>0&&(e.saveBoxBreakPosition(i),s&&!e.isLoneImage(i)&&t&&((t=t.modify()).overflow=!0)),n.finish(t)}))}})),n.result()},i.postLayoutBlock=function(t,n){var i=this;v(e.HOOKS.POST_LAYOUT_BLOCK).forEach((function(e){e(t,n,i)}))},i.findEndOfLine=function(t,e,n){for(var i,r=this.vertical?t-1:t+1,o=0,a=e[0].boxOffset,s=o,u=e.length-1,l=e[u].boxOffset;a<l;){i=a+Math.ceil((l-a)/2),s=o;for(var c=u;s<c;){var h=s+Math.ceil((c-s)/2);e[h].boxOffset>i?c=h-1:s=h}var f=this.calculateEdge(null,e,s,i);if(this.vertical?f<=r:f>=r){for(l=i-1;e[s].boxOffset==i;)s--;u=s}else n&&this.updateMaxReachedAfterEdge(f),a=i,o=s}return{nodeContext:e[s],index:a,checkPointIndex:s}},i.findAcceptableBreakInside=function(t,e,n){var i=this.findEndOfLine(e,t,!0),r=i.nodeContext,o=r.viewNode;if(1!=o.nodeType){var a=o;r=this.resolveTextNodeBreaker(r).breakTextNode(a,r,i.index,t,i.checkPointIndex,n)}return this.clearOverflownViewNodes(r,!1),r},i.resolveTextNodeBreaker=function(t){return v(e.HOOKS.RESOLVE_TEXT_NODE_BREAKER).reduce((function(e,n){return n(t)||e}),Eu.instance)},i.getRangeBoxes=function(t,e){for(var n=[],i=t.ownerDocument.createRange(),r=!1,o=t,a=null,s=!1,u=!0;u;){var l=!0;do{var c=null;o==e&&(u=1===e.nodeType&&!(!e.firstChild||r)),1!=o.nodeType?(s||(i.setStartBefore(o),s=!0),a=o):r?r=!1:Vs(o)?l=!s:"ruby"==o.localName||gu(this.clientLayout.getElementComputedStyle(o).display)?((l=!s)&&(i.setStartBefore(o),s=!0,a=o),o.contains(e)&&(u=!1)):c=o.firstChild,c||(c=o.nextSibling)||(r=!0,c=o.parentNode),o=c}while(l&&u);if(s){i.setEndAfter(a);for(var h=this.clientLayout.getRangeClientRects(i),f=0;f<h.length;f++)n.push(h[f]);s=!1}}return n},i.findLinePositions=function(t){var e=[],n=this.getRangeBoxes(t[0].viewNode,t[t.length-1].viewNode);n.sort(this.vertical?eo:to);for(var i=0,r=0,o=0,a=0,s=0,u=this.getBoxDir();;){if(s<n.length){var l=n[s],c=1;if(a>0){var h=Math.max(this.getBoxSize(l),1);c=u*this.getBeforeEdge(l)<u*i?u*(this.getAfterEdge(l)-i)/h:u*this.getAfterEdge(l)>u*r?u*(r-this.getBeforeEdge(l))/h:1}if(0==a||c>=.6||c>=.2&&this.getStartEdge(l)>=o-1){o=this.getEndEdge(l),this.vertical?(i=0==a?l.right:Math.max(i,l.right),r=0==a?l.left:Math.min(r,l.left)):(i=0==a?l.top:Math.min(i,l.top),r=0==a?l.bottom:Math.max(r,l.bottom)),a++,s++;continue}}if(a>0&&(e.push(r),a=0),s>=n.length)break}return e.sort(dt),this.vertical&&e.reverse(),e},i.calculateClonedPaddingBorder=function(t){var e=this,n=0;return t.walkUpBlocks((function(t){if("clone"===t.inheritedProps["box-decoration-break"]){var i=e.getComputedPaddingBorder(t.viewNode);n+=t.vertical?-i.left:i.bottom,"table"===t.display&&(n+=t.blockBorderSpacing)}})),n},i.getOffsetByRepetitiveElements=function(t){return(t?t.calculateOffset(this):Gs(null,this.collectElementsOffset())).current},i.findBoxBreakPosition=function(t,e){for(var n,i,r=this,o=t.checkPoints,a=o[0];a.parent&&a.inline;)a=a.parent;e?(n=1,i=1):(n=Math.max((a.inheritedProps.widows||2)-0,1),i=Math.max((a.inheritedProps.orphans||2)-0,1));var s=this.calculateClonedPaddingBorder(a),u=this.findLinePositions(o),l=this.footnoteEdge-s,c=this.getBoxDir(),h=this.getOffsetByRepetitiveElements(t);l-=c*h;var f=this.findFirstOverflowingEdgeAndCheckPoint(o);isNaN(f.edge)&&(f.edge=1/0*c);var d,p=ft(u.length,(function(t){var e=u[t];return r.vertical?e<l||e<=f.edge:e>l||e>=f.edge})),g=p<=0;if(g&&(p=ft(u.length,(function(t){return r.vertical?u[t]<l:u[t]>l}))),(p=Math.min(u.length-n,p))<i)return null;if(l=u[p-1],d=g?f.checkPoint:this.findAcceptableBreakInside(t.checkPoints,l,e)){var m=this.getAfterEdgeOfBlockContainer(d);!isNaN(m)&&m<l&&(l=m),this.computedBlockSize=c*(l-this.beforeEdge)+h}return d},i.getAfterEdgeOfBlockContainer=function(t){var e=t;do{e=e.parent}while(e&&e.inline);return e?((e=e.copy().modify()).after=!0,Bs(e,this.clientLayout,0,this.vertical)):NaN},i.findFirstOverflowingEdgeAndCheckPoint=function(t){var e=t.findIndex((function(t){return t.overflow}));if(e<0)return{edge:NaN,checkPoint:null};var n=t[e];return{edge:this.calculateEdge(null,t,e,n.boxOffset),checkPoint:n}},i.findEdgeBreakPosition=function(t){return this.computedBlockSize=t.computedBlockSize+this.getOffsetByRepetitiveElements(t),t.position},i.finishBreak=function(t,e,n){var i=(new Ys).find(t.formattingContext).finishBreak(this,t,e,n);return i||(i=Js.finishBreak(this,t,e,n)),i},i.findAcceptableBreakPosition=function(){var t=null,e=null,n=0,i=0;do{n=i,i=Number.MAX_VALUE;for(var r=this.breakPositions.length-1;r>=0&&!e;--r){e=(t=this.breakPositions[r]).findAcceptableBreak(this,n);var o=t.getMinBreakPenalty();o>n&&(i=Math.min(i,o))}}while(i>n&&!e&&this.forceNonfitting);return{breakPosition:e?t:null,nodeContext:e}},i.doFinishBreak=function(t,e,n,i){var r=this;if(this.pageFloatLayoutContext.isInvalidated()||this.pageBreakType||!e)return Ti(t);var o=Ni("doFinishBreak"),a=!1;if(!t){if(this.forceNonfitting)return f.warn("Could not find any page breaks?!!"),this.skipTailEdges(e).then((function(t){t?((t=t.modify()).overflow=!1,r.finishBreak(t,a,!0).then((function(){o.finish(t)}))):o.finish(t)})),o.result();t=n,a=!0,this.computedBlockSize=i}return this.finishBreak(t,a,!0).then((function(){o.finish(t)})),o.result()},i.isBreakable=function(t){if(t.after)return!0;switch(t.sourceNode.namespaceURI){case W.SVG:return!1}return!t.flexContainer},i.zeroIndent=function(t){var e=t.toString();return""==e||"auto"==e||!!e.match(/^0+(.0*)?[^0-9]/)},i.checkOverflowAndSaveEdge=function(t,e){if(!t)return!1;if(Ms(t.viewNode))return!1;var n=Bs(t,this.clientLayout,0,this.vertical),i=Gs(t,this.collectElementsOffset()),r=this.isOverflown(n+(this.vertical?-1:1)*i.minimum);if(this.isOverflown(n+(this.vertical?-1:1)*i.current)&&!this.nodeContextOverflowingDueToRepetitiveElements)this.nodeContextOverflowingDueToRepetitiveElements=t;else if(e){var o=n+this.getTrailingMarginEdgeAdjustment(e),a=this.footnoteEdge-this.getBoxDir()*i.current;n=this.vertical?Math.min(n,Math.max(o,a)):Math.max(n,Math.min(o,a))}return this.updateMaxReachedAfterEdge(n),r},i.checkOverflowAndSaveEdgeAndBreakPosition=function(t,e,n,i){if(!t)return!1;if(Ms(t.viewNode))return!1;var r=this.checkOverflowAndSaveEdge(t,e);return!n&&r||this.saveEdgeBreakPosition(t,i,r),r},i.applyClearance=function(t){if(!t.viewNode.parentNode)return!1;var e=this.getComputedMargin(t.viewNode),n=t.viewNode.ownerDocument.createElement("div");this.vertical?(n.style.bottom="0px",n.style.width="1px",n.style.marginRight=e.right+"px"):(n.style.right="0px",n.style.height="1px",n.style.marginTop=e.top+"px"),t.viewNode.parentNode.insertBefore(n,t.viewNode);var i=this.clientLayout.getElementClientRect(n),r=this.getBeforeEdge(i),o=this.getBoxDir(),a=t.clearSide,s=1/0*-this.getBoxDir();switch("all"===a&&(s=this.pageFloatLayoutContext.getPageFloatClearEdge(a,this)),a){case"left":s=o*Math.max(s*o,this.leftFloatEdge*o);break;case"right":s=o*Math.max(s*o,this.rightFloatEdge*o);break;default:s=o*Math.max(s*o,Math.max(this.rightFloatEdge*o,this.leftFloatEdge*o))}if(r*o>=s*o)return t.viewNode.parentNode.removeChild(n),!1;var u=Math.max(1,(s-r)*o);this.vertical?n.style.width=u+"px":n.style.height=u+"px",i=this.clientLayout.getElementClientRect(n);var l=this.getAfterEdge(i);if(this.vertical){var c=l+e.right-s;c>0==e.right>=0&&(c+=e.right),n.style.marginLeft=c+"px"}else{var h=s-(l+e.top);h>0==e.top>=0&&(h+=e.top),n.style.marginBottom=h+"px"}return t.clearSpacer=n,!0},i.isBFC=function(t){return!!tu(t)||!!Or.isInstanceOfRepetitiveElementsOwnerFormattingContext(t)},i.skipEdges=function(t,e,n){var i=this,r=t.after?t.parent&&t.parent.formattingContext:t.formattingContext;if(r&&!this.isBFC(r))return Ti(t);var o=Ni("skipEdges"),a=!n&&e&&t&&t.after,s=n,u=null,l=[],c=[],h=!1;function f(){return!!n||!e&&xs(s)}var d=function(){(t=l[0]||t).viewNode.parentNode.removeChild(t.viewNode),i.pageBreakType=s};return o.loopWithFrame((function(n){for(;t;){var r=(new Ys).find(t.formattingContext);do{if(!t.viewNode)break;if(t.inline&&1!=t.viewNode.nodeType){if(Zr(t.viewNode,t.whitespace))break;if(!t.after)return f()?d():i.checkOverflowAndSaveEdgeAndBreakPosition(u,null,!0,s)?(t=(i.stopAtOverflow&&u||t).modify()).overflow=!0:(t=t.modify()).breakBefore=s,void n.breakLoop()}if(!t.after){if(r&&r.startNonInlineElementNode(t))break;if(t.clearSide&&i.applyClearance(t)&&e&&0===i.breakPositions.length&&i.saveEdgeBreakPosition(t.copy(),s,!1),!i.isBFC(t.formattingContext)||Or.isInstanceOfRepetitiveElementsOwnerFormattingContext(t.formattingContext)||i.isFloatNodeContext(t)||t.flexContainer)return l.push(t.copy()),s=Rs(s,t.breakBefore),f()?d():!i.checkOverflowAndSaveEdgeAndBreakPosition(u,null,!0,s)&&i.layoutConstraint.allowLayout(t)||((t=(i.stopAtOverflow&&u||t).modify()).overflow=!0),void n.breakLoop()}if(1!=t.viewNode.nodeType)break;var o=t.viewNode.style;if(t.after){if(t.inline)break;if(r&&r.afterNonInlineElementNode(t,i.stopAtOverflow))break;if(h){if(f())return d(),void n.breakLoop();l=[],e=!1,a=!1,s=null}h=!1,u=t.copy(),c.push(u),s=Rs(s,t.breakAfter),!o||i.zeroIndent(o.paddingBottom)&&i.zeroIndent(o.borderBottomWidth)||(c=[u])}else{if(l.push(t.copy()),s=Rs(s,t.breakBefore),!i.layoutConstraint.allowLayout(t)&&(i.checkOverflowAndSaveEdgeAndBreakPosition(u,null,!i.stopAtOverflow,s),(t=t.modify()).overflow=!0,i.stopAtOverflow))return void n.breakLoop();if(fu[t.viewNode.localName])return f()?d():i.checkOverflowAndSaveEdgeAndBreakPosition(u,null,!0,s)&&((t=(i.stopAtOverflow&&u||t).modify()).overflow=!0),void n.breakLoop();!o||i.zeroIndent(o.paddingTop)&&i.zeroIndent(o.borderTopWidth)||(a=!1,c=[]),h=!0}}while(0);var p=i.nextInTree(t,a);if(p.isPending())return void p.then((function(e){t=e,n.continueLoop()}));t=p.get()}i.checkOverflowAndSaveEdgeAndBreakPosition(u,c,!i.stopAtOverflow,s)?u&&i.stopAtOverflow&&((t=u.modify()).overflow=!0):xs(s)&&(i.pageBreakType=s),n.breakLoop()})).then((function(){u&&(i.lastAfterPosition=u.toNodePosition()),o.finish(t)})),o.result()},i.skipTailEdges=function(t){var e=this,n=t.copy(),i=Ni("skipEdges"),r=null,o=!1;return i.loopWithFrame((function(i){for(;t;){do{if(!t.viewNode)break;if(t.inline&&1!=t.viewNode.nodeType){if(Zr(t.viewNode,t.whitespace))break;if(!t.after)return xs(r)&&(e.pageBreakType=r),void i.breakLoop()}if(!t.after&&(e.isFloatNodeContext(t)||t.flexContainer))return xs(r=Rs(r,t.breakBefore))&&(e.pageBreakType=r),void i.breakLoop();if(1!=t.viewNode.nodeType)break;var a=t.viewNode.style;if(t.after){if(o){if(xs(r))return e.pageBreakType=r,void i.breakLoop();r=null}o=!1,r=Rs(r,t.breakAfter)}else{if(r=Rs(r,t.breakBefore),fu[t.viewNode.localName])return xs(r)&&(e.pageBreakType=r),void i.breakLoop();if(a&&(!e.zeroIndent(a.paddingTop)||!e.zeroIndent(a.borderTopWidth)))return void i.breakLoop()}o=!0}while(0);var s=e.layoutContext.nextInTree(t);if(s.isPending())return void s.then((function(e){t=e,i.continueLoop()}));t=s.get()}n=null,i.breakLoop()})).then((function(){i.finish(n)})),i.result()},i.layoutFloatOrFootnote=function(t){return gs(t.floatReference)||"footnote"===t.floatSide?this.layoutPageFloat(t):this.layoutFloat(t)},i.layoutNext=function(t,e,n){var i=this,r=Ni("layoutNext");return this.skipEdges(t,e,n||null).then((function(n){if(!(t=n)||i.pageBreakType||i.stopByOverflow(t))r.finish(t);else{var o=t.formattingContext;(new Ys).find(o).layout(t,i,e).thenFinish(r)}})),r.result()},i.clearOverflownViewNodes=function(t,e){if(t)for(var n=t.parent;t;t=n,n=n?n.parent:null){var i=(n||t).formattingContext;(new Ys).find(i).clearOverflownViewNodes(this,n,t,e),e=!1}},i.initGeom=function(){var t=this.element.ownerDocument.createElement("div");t.style.position="absolute",t.style.top=this.paddingTop+"px",t.style.right=this.paddingRight+"px",t.style.bottom=this.paddingBottom+"px",t.style.left=this.paddingLeft+"px",this.element.appendChild(t);var e=this.clientLayout.getElementClientRect(t);this.element.removeChild(t);var n=this.originX+this.left+this.getInsetLeft(),i=this.originY+this.top+this.getInsetTop();this.box=new rn(n,i,n+this.width,i+this.height),this.startEdge=e?this.vertical?e.top:e.left:0,this.endEdge=e?this.vertical?e.bottom:e.right:0,this.beforeEdge=e?this.vertical?e.right:e.top:0,this.afterEdge=e?this.vertical?e.left:e.bottom:0,this.leftFloatEdge=this.beforeEdge,this.rightFloatEdge=this.beforeEdge,this.bottommostFloatTop=this.beforeEdge,this.footnoteEdge=this.afterEdge,this.bands=function(t,e,n,i,r,o){o&&(t=En(t),e=e.map((function(t){return Cn(t)})),n=n.map((function(t){return Cn(t)})));var a,s,u,l=e.length,c=n?n.length:0,h=[],f=[];for(a=0;a<l;a++)e[a].addSegments(f,a);for(a=0;a<c;a++)n[a].addSegments(f,a+l);var d=f.length;f.sort(ln);for(var p=0;f[p].shapeId>=l;)p++;var g=f[p].low.y;g>t.y1&&h.push(new un(t.y1,g,t.x2,t.x2));for(var m,v,E=0,b=[];E<d&&(u=f[E]).low.y<g;)u.high.y>g&&b.push(u),E++;for(;E<d||b.length>0;){var C=t.y2,y=Math.min((m=Math.ceil(g+8),(v=r)?Math.ceil(m/v)*v:m),t.y2);for(s=0;s<b.length&&C>y;s++)(u=b[s]).low.x==u.high.x?u.high.y<C&&(C=Math.max(vn(u.high.y,r),y)):u.low.x!=u.high.x&&(C=y);for(C>t.y2&&(C=t.y2);E<d&&(u=f[E]).low.y<C;)if(u.high.y<g)E++;else{if(!(u.low.y<y)){var w=vn(u.low.y,r);w<C&&(C=w);break}u.low.y==u.high.y&&u.low.y==g||(b.push(u),C=y),E++}var D=[];for(s=0;s<b.length;s++)gn(D,b[s],g,C);D.sort((function(t,e){return t.x-e.x||t.lowOrHigh-e.lowOrHigh}));var S=mn(D,l,c);if(0==S.length)h.push(new un(g,C,t.x2,t.x2));else{var N=0,T=t.x1;for(s=0;s<S.length;s+=2){var A=Math.max(t.x1,S[s]),x=Math.min(t.x2,S[s+1])-A;x>N&&(N=x,T=A)}h.push(0==N?new un(g,C,t.x2,t.x2):new un(g,C,Math.max(T,t.x1),Math.min(T+N,t.x2)))}if(C==t.y2)break;for(g=C,s=b.length-1;s>=0;s--)b[s].high.y<=C&&b.splice(s,1)}return yn(t,h),h}(this.box,[this.getInnerShape()],this.getExclusions(),0,this.snapHeight,this.vertical),this.createFloats()},i.init=function(){this.chunkPositions=[],et(this.element,"width",this.width+"px"),et(this.element,"height",this.height+"px"),this.initGeom(),this.computedBlockSize=0,this.overflown=!1,this.pageBreakType=null,this.lastAfterPosition=null},i.saveEdgeBreakPosition=function(t,e,n){var i=t.copy(),r=(new Ys).find(t.formattingContext),o=this.calculateClonedPaddingBorder(i),a=r.createEdgeBreakPosition(i,e,n,this.computedBlockSize+o);this.breakPositions.push(a)},i.saveBoxBreakPosition=function(t){var e=new pu(t,t[0].breakPenalty);this.breakPositions.push(e)},i.updateMaxReachedAfterEdge=function(t){if(!isNaN(t)){var e=this.getBoxDir()*(t-this.beforeEdge);this.computedBlockSize=Math.max(e,this.computedBlockSize)}},i.layout=function(t,e,n){var i=this;if(this.chunkPositions.push(t),t.primary.after&&(this.lastAfterPosition=t.primary),this.stopAtOverflow&&this.overflown)return Ti(t);if(this.isFullWithPageFloats())return Ti(t.primary.after&&1===t.primary.steps.length?null:t);var r=Ni("layout");return this.openAllViews(t.primary).then((function(t){var o=null;t.viewNode?o=t.copy():i.layoutContext.addEventListener("nextInTree",(function t(e){e.nodeContext.viewNode&&(o=e.nodeContext,i.layoutContext.removeEventListener("nextInTree",t))}));var a=new Cu(e,n);a.layout(t,i).then((function(t){i.doFinishBreak(t,a.context.overflownNodeContext,o,a.initialComputedBlockSize).then((function(t){(i.pseudoParent?Ti(null):i.doFinishBreakOfFragmentLayoutConstraints(t)).then((function(){if(i.pageFloatLayoutContext.isInvalidated())r.finish(null);else if(t){i.overflown=!0;var e=new ho(t.toNodePosition());r.finish(e)}else r.finish(null)}))}))}))})),r.result()},i.isFullWithPageFloats=function(){return this.pageFloatLayoutContext.isColumnFullWithPageFloats(this)},i.getMaxBlockSizeOfPageFloats=function(){return this.pageFloatLayoutContext.getMaxBlockSizeOfPageFloats()},i.doFinishBreakOfFragmentLayoutConstraints=function(t){var e=this,n=Ni("doFinishBreakOfFragmentLayoutConstraints"),i=[].concat(this.fragmentLayoutConstraints);i.sort((function(t,e){return t.getPriorityOfFinishBreak()-e.getPriorityOfFinishBreak()}));var r=0;return n.loop((function(){return r<i.length?i[r++].finishBreak(t,e).thenReturn(!0):Ti(!1)})).then((function(){n.finish(!0)})),n.result()},i.doLayout=function(t,e,n){var i=this,r=Ni("doLayout"),o=null;return this.breakPositions=[],this.nodeContextOverflowingDueToRepetitiveElements=null,r.loopWithFrame((function(r){for(var a=function(){var a=!0;if(i.layoutNext(t,e,n||null).then((function(s){if(e=!1,n=null,i.nodeContextOverflowingDueToRepetitiveElements&&i.stopAtOverflow?(i.pageBreakType=null,(t=i.nodeContextOverflowingDueToRepetitiveElements).overflow=!0):t=s,i.pageFloatLayoutContext.isInvalidated())r.breakLoop();else if(i.pageBreakType)r.breakLoop();else if(t&&i.stopByOverflow(t)){o=t;var u=i.findAcceptableBreakPosition();t=u.nodeContext,u.breakPosition&&u.breakPosition.breakPositionChosen(i),r.breakLoop()}else a?a=!1:r.continueLoop()})),a)return a=!1,{v:void 0}};t;){var s=a();if("object"==typeof s)return s.v}i.computedBlockSize+=i.getOffsetByRepetitiveElements(),r.breakLoop()})).then((function(){r.finish({nodeContext:t,overflownNodeContext:o})})),r.result()},i.redoLayout=function(){for(var t=this,e=this.chunkPositions,n=this.element.lastChild;n!=this.last;){var i=n.previousSibling;this.element===n.parentNode&&this.layoutContext.isPseudoelement(n)||this.element.removeChild(n),n=i}this.killFloats(),this.init();var r=Ni("redoLayout"),o=0,a=null,s=!0;return r.loopWithFrame((function(n){if(o<e.length){var i=e[o++];t.layout(i,s).then((function(t){s=!1,t?(a=t,n.breakLoop()):n.continueLoop()}))}else n.breakLoop()})).then((function(){r.finish(a)})),r.result()},i.saveDistanceToBlockEndFloats=function(){var t=this.pageFloatLayoutContext.getBlockStartEdgeOfBlockEndFloats();t>0&&isFinite(t)&&(this.blockDistanceToBlockEndFloats=this.getBoxDir()*(t-this.beforeEdge-this.computedBlockSize))},i.collectElementsOffset=function(){for(var t=this,e=[],n=this;n;n=n.pseudoParent)n.fragmentLayoutConstraints.forEach((function(n){if(Or.isInstanceOfRepetitiveElementsOwnerLayoutConstraint(n)){var i=n.getRepetitiveElements();e.push(i)}if(Pr.isInstanceOfAfterIfContinuesLayoutConstraint(n)){var r=n.getRepetitiveElements();e.push(r)}Rr.isInstanceOfTableRowLayoutConstraint(n)&&n.getElementsOffsetsForTableCell(t).forEach((function(t){e.push(t)}))}));return e},n}(mo),vu=function(){function t(t,e,n){this.startNodeContexts=[],this.column=Object.create(t),this.column.element=e,this.column.layoutContext=t.layoutContext.clone(),this.column.stopAtOverflow=!1,this.column.flowRootFormattingContext=n.formattingContext,this.column.pseudoParent=t;var i=this.column.calculateClonedPaddingBorder(n);this.column.footnoteEdge=this.column.footnoteEdge-i;var r=this;this.column.openAllViews=function(t){return mu.prototype.openAllViews.call(this,t).thenAsync((function(t){return r.startNodeContexts.push(t.copy()),Ti(t)}))}}var e=t.prototype;return e.layout=function(t,e){return this.column.layout(t,e)},e.findAcceptableBreakPosition=function(t){var e=this.column.findAcceptableBreakPosition();if(t){var n=this.startNodeContexts[0].copy(),i=new Ws(n,null,n.overflow,0);if(i.findAcceptableBreak(this.column,0),!e.nodeContext)return{breakPosition:i,nodeContext:n}}return e},e.finishBreak=function(t,e,n){return this.column.finishBreak(t,e,n)},e.doFinishBreakOfFragmentLayoutConstraints=function(t){this.column.doFinishBreakOfFragmentLayoutConstraints(t)},e.isStartNodeContext=function(t){var e=this.startNodeContexts[0];return e.viewNode===t.viewNode&&e.after===t.after&&e.offsetInNode===t.offsetInNode},e.isLastAfterNodeContext=function(t){return io(t.toNodePosition(),this.column.lastAfterPosition)},e.getColumnElement=function(){return this.column.element},e.getColumn=function(){return this.column},t}(),Eu=function(){function t(){}var e=t.prototype;return e.breakTextNode=function(t,e,n,i,r,o){if(e.after)e.offsetInNode=t.length;else{var a=n-e.boxOffset,s=t.data;(a=173==s.charCodeAt(a)?this.breakAfterSoftHyphen(t,s,a,e):this.breakAfterOtherCharacter(t,s,a,e))>0&&(e=this.updateNodeContext(e,a,t))}return e},e.breakAfterSoftHyphen=function(t,e,n,i){return t.replaceData(n,e.length-n,i.breakWord?"":bu(i)),n+1},e.breakAfterOtherCharacter=function(t,e,n,i){var r=e.charAt(n);n++;var o=e.charAt(n);return t.replaceData(n,e.length-n,!i.breakWord&&lt(r)&&lt(o)?bu(i):""),n},e.updateNodeContext=function(t,e,n){return(t=t.modify()).offsetInNode+=e,t.breakBefore=null,t},t}();function bu(t){return t.hyphenateCharacter||t.parent&&t.parent.hyphenateCharacter||"-"}Eu.instance=new Eu;var Cu=function(t){function e(e,n){var i;return(i=t.call(this)||this).leadingEdge=e,i.initialPageBreakType=null,i.initialComputedBlockSize=0,i.initialOverflown=!1,i.context={overflownNodeContext:null},i.breakAfter=n||null,i}I(e,t);var n=e.prototype;return n.resolveLayoutMode=function(t){return new yu(this.leadingEdge,this.breakAfter,this.context)},n.prepareLayout=function(t,e){e.fragmentLayoutConstraints=[],e.pseudoParent||(ou=[])},n.clearNodes=function(e){t.prototype.clearNodes.call(this,e);for(var n=e;n;){var i=n.viewNode;i&&Us(i.parentNode,i),n=n.parent}},n.saveState=function(e,n){t.prototype.saveState.call(this,e,n),this.initialPageBreakType=n.pageBreakType,this.initialComputedBlockSize=n.computedBlockSize,this.initialOverflown=n.overflown},n.restoreState=function(e,n){t.prototype.restoreState.call(this,e,n),n.pageBreakType=this.initialPageBreakType,n.computedBlockSize=this.initialComputedBlockSize,n.overflown=this.initialOverflown},e}(eu),yu=function(){function t(t,e,n){this.leadingEdge=t,this.breakAfter=e,this.context=n}var e=t.prototype;return e.doLayout=function(t,e){var n=this,i=Ni("DefaultLayoutMode.doLayout");return function(t,e){var n=Ni("processAfterIfContinuesOfAncestors"),i=t;return n.loop((function(){if(null!==i){var t=cu(i,e);return i=i.parent,t.thenReturn(!0)}return Ti(!1)})).then((function(){n.finish(!0)})),n.result()}(t,e).then((function(){e.doLayout(t,n.leadingEdge,n.breakAfter).then((function(t){n.context.overflownNodeContext=t.overflownNodeContext,i.finish(t.nodeContext)}))})),i.result()},e.accept=function(t,e){var n=this;return!(!e.pageFloatLayoutContext.isInvalidated()&&!e.pageBreakType)||e.fragmentLayoutConstraints.length<=0||e.fragmentLayoutConstraints.every((function(i){return i.allowLayout(t,n.context.overflownNodeContext,e)}))},e.postLayout=function(t,e,n,i){if(!i){var r=n.fragmentLayoutConstraints.some((function(e){return e.nextCandidate(t)}));i=!r}return n.fragmentLayoutConstraints.forEach((function(r){r.postLayout(i,t,e,n)})),i},t}(),wu=function(t){function e(e,n,i,r,o,a,s){var u;return(u=t.call(this,n,i,r,o,a)||this).floatSide=e,u.parentContainer=s,u.rootViewNodes=[],u.floatMargins=[],u.adjustContentRelativeSize=!0,u}I(e,t);var n=e.prototype;return n.openAllViews=function(e){var n=this;return t.prototype.openAllViews.call(this,e).thenAsync((function(t){return t&&n.fixFloatSizeAndPosition(t),Ti(t)}))},n.convertPercentageSizesToPx=function(t){var e=this.parentContainer.getPaddingRect(),n=e.x2-e.x1,i=e.y2-e.y1;function r(e,n){e.forEach((function(e){var i=nt(t,e);if(i&&"%"===i.charAt(i.length-1)){var r=parseFloat(i);et(t,e,n*r/100+"px")}}))}r(["width","max-width","min-width"],n),r(["height","max-height","min-height"],i),r(["margin-top","margin-right","margin-bottom","margin-left","padding-top","padding-right","padding-bottom","padding-left"],this.vertical?i:n),["margin-top","margin-right","margin-bottom","margin-left"].forEach((function(e){"auto"===nt(t,e)&&et(t,e,"0")}))},n.fixFloatSizeAndPosition=function(t){for(;t.parent;)t=t.parent;var e=t.viewNode;if(this.rootViewNodes.push(e),this.adjustContentRelativeSize&&this.convertPercentageSizesToPx(e),this.floatMargins.push(this.getComputedMargin(e)),this.adjustContentRelativeSize){var n=this.floatSide;if(this.parentContainer.vertical){if("block-end"===n||"left"===n){var i=nt(e,"height");""!==i&&"auto"!==i&&et(e,"margin-top","auto")}}else if("block-end"===n||"bottom"===n){var r=nt(e,"width");""!==r&&"auto"!==r&&et(e,"margin-left","auto")}}},n.getContentInlineSize=function(){var t=this;return Math.max.apply(null,this.rootViewNodes.map((function(e,n){var i=t.clientLayout.getElementClientRect(e),r=t.floatMargins[n];return t.vertical?r.top+i.height+r.bottom:r.left+i.width+r.right})))},e}(mu),Du=function(){function t(t,e){this.parent=t,this.rootSourceNode=e,this.formattingContextType="RepetitiveElementsOwner",this.isRoot=!1,this.repetitiveElements=null}var e=t.prototype;return e.getName=function(){return"Repetitive elements owner formatting context (RepetitiveElementsOwnerFormattingContext)"},e.isFirstTime=function(t,e){return e},e.getParent=function(){return this.parent},e.getRepetitiveElements=function(){return this.repetitiveElements},e.getRootViewNode=function(t){var e=this.getRootNodeContext(t);return e?e.viewNode:null},e.getRootNodeContext=function(t){do{if(!t.belongsTo(this)&&t.sourceNode===this.rootSourceNode)return t}while(t=t.parent);return null},e.initializeRepetitiveElements=function(t){var e=this;this.repetitiveElements||ou.some((function(t){return t.root===e.rootSourceNode&&(e.repetitiveElements=t.elements,!0)}))||(this.repetitiveElements=new Su(t,this.rootSourceNode),ou.push({root:this.rootSourceNode,elements:this.repetitiveElements}))},e.saveState=function(){},e.restoreState=function(t){},t}(),Su=function(){function t(t,e){this.vertical=t,this.ownerSourceNode=e,this.headerSourceNode=null,this.footerSourceNode=null,this.headerViewNode=null,this.footerViewNode=null,this.headerNodePosition=null,this.footerNodePosition=null,this.headerHeight=0,this.footerHeight=0,this.isSkipHeader=!1,this.isSkipFooter=!1,this.enableSkippingFooter=!0,this.enableSkippingHeader=!0,this.doneInitialLayout=!1,this.firstContentSourceNode=null,this.lastContentSourceNode=null,this.affectedNodeCache=[],this.afterLastContentNodeCache=[],this.allowInsert=!1}var e=t.prototype;return e.setHeaderNodeContext=function(t){this.headerNodePosition||(this.headerNodePosition=ro(t,0),this.headerSourceNode=t.sourceNode,this.headerViewNode=t.viewNode)},e.setFooterNodeContext=function(t){this.footerNodePosition||(this.footerNodePosition=ro(t,0),this.footerSourceNode=t.sourceNode,this.footerViewNode=t.viewNode)},e.updateHeight=function(t){this.headerViewNode&&(this.headerHeight=_s(this.headerViewNode,t,this.vertical),this.headerViewNode=null),this.footerViewNode&&(this.footerHeight=_s(this.footerViewNode,t,this.vertical),this.footerViewNode=null)},e.prepareLayoutFragment=function(){this.isSkipHeader=this.isSkipFooter=!1,this.enableSkippingFooter=!0,this.enableSkippingHeader=!0},e.appendHeaderToFragment=function(t,e,n){return!this.headerNodePosition||this.isSkipHeader?Ti(!0):this.appendElementToFragment(this.headerNodePosition,t,e,n)},e.appendFooterToFragment=function(t,e,n){return!this.footerNodePosition||this.isSkipFooter?Ti(!0):this.appendElementToFragment(this.footerNodePosition,t,e,n)},e.appendElementToFragment=function(t,e,n,i){var r=this,o=e.viewNode,a=e.viewNode.ownerDocument.createElement("div");o.appendChild(a);var s=new vu(i,a,e),u=s.getColumn().pageBreakType;return s.getColumn().pageBreakType=null,this.allowInsertRepeatitiveElements=!0,s.layout(new ho(t),!0).thenAsync((function(){return r.allowInsertRepeatitiveElements=!1,o.removeChild(a),r.moveChildren(a,o,n),s.getColumn().pageBreakType=u,Ti(!0)}))},e.moveChildren=function(t,e,n){if(e)for(;t.firstChild;){var i=t.firstChild;t.removeChild(i),i.setAttribute("data-adapt-spec","1"),n?e.insertBefore(i,n):e.appendChild(i)}},e.calculateOffset=function(t){var e=0;return t&&!this.affectTo(t)||((!this.isSkipFooter||t&&this.isAfterLastContent(t))&&(e+=this.footerHeight),this.isSkipHeader||(e+=this.headerHeight)),e},e.calculateMinimumOffset=function(t){var e=0;return t&&!this.affectTo(t)||(t&&this.isAfterLastContent(t)&&(e+=this.footerHeight),this.enableSkippingHeader||(e+=this.headerHeight)),e},e.isAfterLastContent=function(t){var e=this;return this.findResultFromCache(t,this.afterLastContentNodeCache,(function(n){return e.isAfterNodeContextOf(e.lastContentSourceNode,t,!1)}))},e.affectTo=function(t){var e=this;return this.findResultFromCache(t,this.affectedNodeCache,(function(n){return e.isAfterNodeContextOf(e.ownerSourceNode,t,!0)}))},e.findResultFromCache=function(t,e,n){var i=e.filter((function(e){return e.nodeContext.sourceNode===t.sourceNode&&e.nodeContext.after===t.after}));if(i.length>0)return i[0].result;var r=n(t);return e.push({nodeContext:t,result:r}),r},e.isAfterNodeContextOf=function(t,e,n){for(var i=[],r=t;r;r=r.parentNode){if(e.sourceNode===r)return e.after;i.push(r)}for(var o=e.sourceNode;o;o=o.parentNode){var a=i.indexOf(o);if(a>=0)return!!n&&0===a;for(var s=o;s;s=s.previousElementSibling)if(i.includes(s))return!0}return e.after},e.isFirstContentNode=function(t){return t&&this.firstContentSourceNode===t.sourceNode},e.isEnableToUpdateState=function(){return!!(!this.isSkipFooter&&this.enableSkippingFooter&&this.footerNodePosition||!this.isSkipHeader&&this.enableSkippingHeader&&this.headerNodePosition)},e.updateState=function(){!this.isSkipFooter&&this.enableSkippingFooter&&this.footerNodePosition?this.isSkipFooter=!0:!this.isSkipHeader&&this.enableSkippingHeader&&this.headerNodePosition&&(this.isSkipHeader=!0)},e.preventSkippingHeader=function(){this.isSkipHeader=!1,this.enableSkippingHeader=!1},e.preventSkippingFooter=function(){this.isSkipFooter=!1,this.enableSkippingFooter=!1},e.isHeaderRegistered=function(){return!!this.headerNodePosition},e.isFooterRegistered=function(){return!!this.footerNodePosition},e.isHeaderSourceNode=function(t){return this.headerSourceNode===t},e.isFooterSourceNode=function(t){return this.footerSourceNode===t},t}(),Nu=function(){function t(t){this.formattingContext=t}var e=t.prototype;return e.accept=function(t,e){return!!t},e.postLayout=function(t,e,n,i){var r=this.formattingContext.getRepetitiveElements();return r&&(r.doneInitialLayout||(r.updateHeight(n),r.doneInitialLayout=!0)),i},t}(),Tu=function(){function t(t){this.formattingContext=t}var e=t.prototype;return e.accept=function(t,e){return!0},e.postLayout=function(t,e,n,i){return i},t}(),Au=function(t){function e(e,n){var i;return(i=t.call(this,e)||this).processor=n,i}I(e,t);var n=e.prototype;return n.doLayout=function(t,e){return this.processor.doInitialLayout(t,e)},n.accept=function(t,e){return!1},e}(Nu),xu=function(t){function e(e,n){var i;return(i=t.call(this,e)||this).processor=n,i}return I(e,t),e.prototype.doLayout=function(t,e){return t.belongsTo(this.formattingContext)||t.after||e.fragmentLayoutConstraints.unshift(new Iu(t)),this.processor.doLayout(t,e)},e}(Tu),Iu=function(){function t(t){this.flagmentLayoutConstraintType="RepetitiveElementsOwner",this.nodeContext=t.formattingContext.getRootNodeContext(t)}var e=t.prototype;return e.allowLayout=function(t,e,n){var i=this.getRepetitiveElements();return!(i&&!Ms(this.nodeContext.viewNode)&&i.isEnableToUpdateState()&&(e&&!t||t&&t.overflow))},e.nextCandidate=function(t){var e=this.getRepetitiveElements();return!!e&&!!e.isEnableToUpdateState()&&(e.updateState(),!0)},e.postLayout=function(t,e,n,i){var r=this.getRepetitiveElements();r&&t&&i.stopAtOverflow&&(null==e||r.isAfterLastContent(e))&&r.preventSkippingFooter()},e.finishBreak=function(t,e){var n=this.nodeContext.formattingContext,i=this.getRepetitiveElements();if(!i)return Ti(!0);var r=this.nodeContext;return function(t,e,n){var i=t.getRepetitiveElements();if(i){var r=t.getRootNodeContext(e);if(r.viewNode)return i.appendHeaderToFragment(r,r.viewNode.firstChild,n)}return Ti(!0)}(n,r,e).thenAsync((function(){return function(t,e,n){var i=t.getRepetitiveElements();if(i&&!i.isSkipFooter){var r=t.getRootNodeContext(e);if(r.viewNode)return i.appendFooterToFragment(r,null,n)}return Ti(!0)}(n,r,e).thenAsync((function(){return i.prepareLayoutFragment(),Ti(!0)}))}))},e.getRepetitiveElements=function(){return this.nodeContext.formattingContext.getRepetitiveElements()},e.equalsTo=function(e){return e instanceof t&&this.nodeContext.formattingContext===e.nodeContext.formattingContext},e.getPriorityOfFinishBreak=function(){return 10},t}(),Fu=function(t){function e(e,n){var i;return(i=t.call(this)||this).formattingContext=e,i.processor=n,i}return I(e,t),e.prototype.resolveLayoutMode=function(t){var e=this.formattingContext.getRepetitiveElements();return t.belongsTo(this.formattingContext)||e.doneInitialLayout?(t.belongsTo(this.formattingContext)||t.after||e&&e.preventSkippingHeader(),new xu(this.formattingContext,this.processor)):new Au(this.formattingContext,this.processor)},e}(eu),Pu=function(t){function e(e,n){var i;return(i=t.call(this)||this).formattingContext=e,i.column=n,i}I(e,t);var n=e.prototype;return n.startNonInlineElementNode=function(t){var e=this.formattingContext,n=t.nodeContext,i=e.getRepetitiveElements();if(n.parent&&e.rootSourceNode===n.parent.sourceNode){switch(n.repeatOnBreak){case"header":if(!i.isHeaderRegistered())return i.setHeaderNodeContext(n),Ti(!0);n.repeatOnBreak="none";break;case"footer":if(!i.isFooterRegistered())return i.setFooterNodeContext(n),Ti(!0);n.repeatOnBreak="none"}i.firstContentSourceNode||(i.firstContentSourceNode=n.sourceNode)}return ru.prototype.startNonInlineElementNode.call(this,t)},n.afterNonInlineElementNode=function(t){var e=this.formattingContext,n=t.nodeContext;return n.sourceNode===e.rootSourceNode&&(e.getRepetitiveElements().lastContentSourceNode=t.lastAfterNodeContext&&t.lastAfterNodeContext.sourceNode,t.break=!0),"header"===n.repeatOnBreak||"footer"===n.repeatOnBreak?Ti(!0):ru.prototype.afterNonInlineElementNode.call(this,t)},e}(ru);function Ou(t,e){t&&function(t,e){for(var n=t;n;n=n.parent){var i=n.formattingContext;i&&i instanceof Du&&!n.belongsTo(i)&&e(i,n)}}(t.after?t.parent:t,(function(t,n){Rr.isInstanceOfTableFormattingContext(t)||e.fragmentLayoutConstraints.push(new Iu(n))}))}var Ru=new(function(t){function e(){return t.apply(this,arguments)||this}I(e,t);var n=e.prototype;return n.layout=function(t,e,n){if(e.isFloatNodeContext(t))return e.layoutFloatOrFootnote(t);var i=t.formattingContext;return i.getRootViewNode(t)?(n&&Ou(t.parent,e),t.belongsTo(i)?Zs.prototype.layout.call(this,t,e,n):new Fu(i,this).layout(t,e)):e.buildDeepElementView(t)},n.startNonInlineElementNode=function(t){var e=function(t){var e=t.formattingContext;return e&&e instanceof Du?e:null}(t).getRepetitiveElements();return!!e&&(e.allowInsertRepeatitiveElements||!e.isHeaderSourceNode(t.sourceNode)&&!e.isFooterSourceNode(t.sourceNode)||t.viewNode.parentNode.removeChild(t.viewNode),!1)},n.doInitialLayout=function(t,e){var n=Ni("BlockLayoutProcessor.doInitialLayout");return this.layoutEntireBlock(t,e).thenFinish(n),n.result()},n.layoutEntireBlock=function(t,e){var n=new Pu(t.formattingContext,e);return new iu(n,e.layoutContext).iterate(t)},n.doLayout=function(t,e){var n=t.formattingContext,i=Ni("doLayout");return hu(e.layoutContext.nextInTree(t,!1),e).then((function(t){var r=t;i.loopWithFrame((function(t){for(var i=function(){var i=!0;if(e.layoutNext(r,!1).then((function(o){r=o,e.pageFloatLayoutContext.isInvalidated()||e.pageBreakType||r&&e.stopByOverflow(r)||r&&r.after&&r.sourceNode==n.rootSourceNode?t.breakLoop():i?i=!1:t.continueLoop()})),i)return i=!1,{v:void 0}};r;){var o=i();if("object"==typeof o)return o.v}t.breakLoop()})).then((function(){i.finish(r)}))})),i.result()},n.finishBreak=function(t,e,n,i){return Zs.prototype.finishBreak.call(this,t,e,n,i)},n.clearOverflownViewNodes=function(t,e,n,i){Zs.prototype.clearOverflownViewNodes(t,e,n,i)},e}(Zs));p(e.HOOKS.RESOLVE_LAYOUT_PROCESSOR,(function(t){return t instanceof Du&&!Rr.isInstanceOfTableFormattingContext(t)?Ru:null}));var ku=function(){function t(t,e){this.rowIndex=t,this.sourceNode=e,this.cells=[]}var e=t.prototype;return e.addCell=function(t){this.cells.push(t)},e.getMinimumHeight=function(){return Math.min.apply(null,this.cells.map((function(t){return t.height})))},t}(),Lu=function(){function t(t,e,n){this.rowIndex=t,this.columnIndex=e,this.height=0,this.anchorSlot=null,this.viewElement=n,this.colSpan=n.colSpan||1,this.rowSpan=n.rowSpan||1}var e=t.prototype;return e.setHeight=function(t){this.height=t},e.setAnchorSlot=function(t){this.anchorSlot=t},t}(),Bu=function(t,e,n){this.rowIndex=t,this.columnIndex=e,this.cell=n},_u=function(){function t(t,e,n){this.column=t,this.cellNodeContext=n,this.empty=!1,this.pseudoColumn=new vu(t,e,n)}return t.prototype.findAcceptableBreakPosition=function(){var t=this.cellNodeContext.viewNode,e=this.cellNodeContext.verticalAlign;"middle"!==e&&"bottom"!==e||et(t,"vertical-align","top");var n=this.pseudoColumn.findAcceptableBreakPosition(!0);return et(t,"vertical-align",e),n},t}(),Mu=function(t,e){this.viewNode=t,this.side=e},Uu=function(t){function e(e,n,i,r){var o;return(o=t.call(this,e,n,i,r)||this).acceptableCellBreakPositions=null,o.rowIndex=null,o.formattingContext=e.formattingContext,o}I(e,t);var n=e.prototype;return n.findAcceptableBreak=function(e,n){var i=t.prototype.findAcceptableBreak.call(this,e,n);return n<this.getMinBreakPenalty()?null:this.getAcceptableCellBreakPositions().every((function(t){return!!t.nodeContext}))?i:null},n.getMinBreakPenalty=function(){var e=t.prototype.getMinBreakPenalty.call(this);return this.getAcceptableCellBreakPositions().forEach((function(t){e+=t.breakPosition.getMinBreakPenalty()})),e},n.getAcceptableCellBreakPositions=function(){if(!this.acceptableCellBreakPositions){var t=this.getCellFragments();this.acceptableCellBreakPositions=t.map((function(t){return t.findAcceptableBreakPosition()}))}return this.acceptableCellBreakPositions},n.getRowIndex=function(){return null!=this.rowIndex?this.rowIndex:this.rowIndex=this.formattingContext.findRowIndexBySourceNode(this.position.sourceNode)},n.getCellFragments=function(){return this.formattingContext.getRowSpanningCellsOverflowingTheRow(this.getRowIndex()).map(this.formattingContext.getCellFragmentOfCell,this.formattingContext)},e}(Ws),Vu=function(t){function e(e,n,i){var r;return(r=t.call(this)||this).rowIndex=e,r.beforeNodeContext=n,r.formattingContext=i,r.acceptableCellBreakPositions=null,r}I(e,t);var n=e.prototype;return n.findAcceptableBreak=function(t,e){if(e<this.getMinBreakPenalty())return null;var n=this.getCellFragments(),i=this.getAcceptableCellBreakPositions(),r=i.every((function(t){return!!t.nodeContext}))&&i.some((function(t,e){var i=n[e].pseudoColumn,r=t.nodeContext;return!i.isStartNodeContext(r)&&!i.isLastAfterNodeContext(r)}));return this.beforeNodeContext.overflow=i.some((function(t){return t.nodeContext&&t.nodeContext.overflow})),r?this.beforeNodeContext:null},n.getMinBreakPenalty=function(){var t=this.formattingContext,e=t.getRowByIndex(this.rowIndex),n=0;return t.isFreelyFragmentableRow(e)||(n+=10),this.getAcceptableCellBreakPositions().forEach((function(t){n+=t.breakPosition.getMinBreakPenalty()})),n},n.getAcceptableCellBreakPositions=function(){if(!this.acceptableCellBreakPositions){var t=this.getCellFragments();this.acceptableCellBreakPositions=t.map((function(t){return t.findAcceptableBreakPosition()}))}return this.acceptableCellBreakPositions},n.getCellFragments=function(){return this.formattingContext.getCellsFallingOnRow(this.rowIndex).map(this.formattingContext.getCellFragmentOfCell,this.formattingContext)},e}(Hs),zu=function(t){function e(e,n){var i;return(i=t.call(this,e,n)||this).tableSourceNode=n,i.formattingContextType="Table",i.vertical=!1,i.columnCount=-1,i.tableWidth=0,i.captions=[],i.colGroups=null,i.colWidths=null,i.inlineBorderSpacing=0,i.rows=[],i.slots=[],i.cellFragments=[],i.lastRowViewNode=null,i.cellBreakPositions=[],i.repetitiveElements=null,i}I(e,t);var n=e.prototype;return n.getName=function(){return"Table formatting context (Table.TableFormattingContext)"},n.isFirstTime=function(t,e){if(!e)return e;switch(t.display){case"table-row":return 0===this.cellBreakPositions.length;case"table-cell":return!this.cellBreakPositions.some((function(e){return e.cellNodePosition.steps[0].node===t.sourceNode}));default:return e}},n.getParent=function(){return this.parent},n.finishFragment=function(){this.cellFragments=[]},n.addRow=function(t,e){this.rows[t]=e},n.getRowSlots=function(t){var e=this.slots[t];return e||(e=this.slots[t]=[]),e},n.addCell=function(t,e){var n=this.rows[t];n||(this.addRow(t,new ku(t,null)),n=this.rows[t]),n.addCell(e);for(var i=t+e.rowSpan,r=this.getRowSlots(t),o=0;r[o];)o++;for(;t<i;t++){r=this.getRowSlots(t);for(var a=o;a<o+e.colSpan;a++){var s=r[a]=new Bu(t,a,e);e.anchorSlot||e.setAnchorSlot(s)}}},n.getRowByIndex=function(t){return this.rows[t]},n.findRowIndexBySourceNode=function(t){return this.rows.findIndex((function(e){return t===e.sourceNode}))},n.addCellFragment=function(t,e,n){var i=this.cellFragments[t];i||(i=this.cellFragments[t]=[]),i[e]=n},n.getCellsFallingOnRow=function(t){return this.getRowSlots(t).reduce((function(t,e){return e.cell!==t[t.length-1]?t.concat(e.cell):t}),[])},n.getRowSpanningCellsOverflowingTheRow=function(t){return this.getCellsFallingOnRow(t).filter((function(e){return e.rowIndex+e.rowSpan-1>t}))},n.getCellFragmentOfCell=function(t){return this.cellFragments[t.rowIndex]&&this.cellFragments[t.rowIndex][t.columnIndex]},n.isFreelyFragmentableRow=function(t){return t.getMinimumHeight()>this.tableWidth/2},n.getColumnCount=function(){return this.columnCount<0&&(this.columnCount=Math.max.apply(null,this.rows.map((function(t){return t.cells.reduce((function(t,e){return t+e.colSpan}),0)})))),this.columnCount},n.updateCellSizes=function(t){var e=this;this.rows.forEach((function(n){n.cells.forEach((function(n){var i=t.getElementClientRect(n.viewElement);n.viewElement=null,n.setHeight(e.vertical?i.width:i.height)}))}))},n.findCellFromColumn=function(t){if(!t)return null;var e=null,n=0,i=0;t:for(n=0;n<this.cellFragments.length;n++)if(this.cellFragments[n])for(i=0;i<this.cellFragments[n].length;i++)if(this.cellFragments[n][i]&&t===this.cellFragments[n][i].pseudoColumn.getColumn()){e=this.rows[n].cells[i];break t}if(!e)return null;for(;n<this.slots.length;n++)for(;i<this.slots[n].length;i++){var r=this.slots[n][i];if(r.cell===e)return{rowIndex:r.rowIndex,columnIndex:r.columnIndex}}return null},n.collectElementsOffsetOfUpperCells=function(t){var e=this,n=[];return this.slots.reduce((function(i,r,o){if(o>=t.rowIndex)return i;var a=r[t.columnIndex]&&e.getCellFragmentOfCell(r[t.columnIndex].cell);return!a||n.includes(a)||(e.collectElementsOffsetFromColumn(a.pseudoColumn.getColumn(),i),n.push(a)),i}),[])},n.collectElementsOffsetOfHighestColumn=function(){var t=this,e=[];return this.rows.forEach((function(n){n.cells.forEach((function(n,i){e[i]||(e[i]={collected:[],elements:[]});var r=e[i],o=t.getCellFragmentOfCell(n);o&&!r.collected.includes(o)&&(t.collectElementsOffsetFromColumn(o.pseudoColumn.getColumn(),r.elements),r.collected.push(o))}))})),[new Hu(e.map((function(t){return t.elements})))]},n.collectElementsOffsetFromColumn=function(t,e){t.fragmentLayoutConstraints.forEach((function(t){if(Or.isInstanceOfRepetitiveElementsOwnerLayoutConstraint(t)){var n=t.getRepetitiveElements();e.push(n)}Rr.isInstanceOfTableRowLayoutConstraint(t)&&t.getElementsOffsetsForTableCell(null).forEach((function(t){e.push(t)}))}))},n.saveState=function(){return[].concat(this.cellBreakPositions)},n.restoreState=function(t){this.cellBreakPositions=t},e}(Du),Hu=function(){function t(t){this.repeatitiveElementsInColumns=t}var e=t.prototype;return e.calculateOffset=function(t){return this.calculateMaxOffsetOfColumn(t,(function(t){return t.current}))},e.calculateMinimumOffset=function(t){return this.calculateMaxOffsetOfColumn(t,(function(t){return t.minimum}))},e.calculateMaxOffsetOfColumn=function(t,e){var n=0;return this.repeatitiveElementsInColumns.forEach((function(i){var r=Gs(t,i);n=Math.max(n,e(r))})),n},t}();function Gu(t){return function(t){return"table-row-group"===t||"table-header-group"===t||"table-footer-group"===t}(t)||function(t){return"table"===t||"inline-table"===t}(t)}function Wu(t,e,n){var i=t.nodeContext,r=i.display,o=i.parent?i.parent.display:null,a=!1;if("inline-table"===o&&!(i.formattingContext instanceof zu))for(var s=i.parent;s;s=s.parent)if(s.formattingContext instanceof zu){a=s.formattingContext===e;break}return a||"table-row"===r&&!Gu(o)||"table-cell"===r&&"table-row"!==o&&!Gu(o)||i.formattingContext instanceof zu&&i.formattingContext!==e?n.buildDeepElementView(i).thenAsync((function(e){return t.nodeContext=e,Ti(!0)})):null}var Xu=function(t){function e(e,n){var i;return(i=t.call(this)||this).formattingContext=e,i.column=n,i.rowIndex=-1,i.columnIndex=0,i.inRow=!1,i.checkPoints=[],i.inHeaderOrFooter=!1,i}I(e,t);var n=e.prototype;return n.startNonInlineElementNode=function(e){var n=this.formattingContext,i=Wu(e,n,this.column);if(i)return i;this.postLayoutBlockContents(e);var r=e.nodeContext,o=r.display,a=n.getRepetitiveElements();switch(o){case"table":n.inlineBorderSpacing=r.inlineBorderSpacing;break;case"table-caption":var s=new Mu(r.viewNode,r.captionSide);n.captions.push(s);break;case"table-header-group":return a.isHeaderRegistered()||(this.inHeaderOrFooter=!0,a.setHeaderNodeContext(r)),Ti(!0);case"table-footer-group":return a.isFooterRegistered()||(this.inHeaderOrFooter=!0,a.setFooterNodeContext(r)),Ti(!0);case"table-row":this.inHeaderOrFooter||(this.inRow=!0,this.rowIndex++,this.columnIndex=0,n.addRow(this.rowIndex,new ku(this.rowIndex,r.sourceNode)),a.firstContentSourceNode||(a.firstContentSourceNode=r.sourceNode))}return t.prototype.startNonInlineElementNode.call(this,e)},n.afterNonInlineElementNode=function(e){var n=this.formattingContext,i=e.nodeContext,r=i.display,o=this.column.clientLayout;if(this.postLayoutBlockContents(e),i.sourceNode===n.tableSourceNode){var a=o.getElementComputedStyle(n.getRootViewNode(i));n.tableWidth=parseFloat(a[n.vertical?"height":"width"]),n.getRepetitiveElements().lastContentSourceNode=e.lastAfterNodeContext&&e.lastAfterNodeContext.sourceNode,e.break=!0}else switch(r){case"table-header-group":case"table-footer-group":if(this.inHeaderOrFooter)return this.inHeaderOrFooter=!1,Ti(!0);break;case"table-row":this.inHeaderOrFooter||(n.lastRowViewNode=i.viewNode,this.inRow=!1);break;case"table-cell":this.inHeaderOrFooter||(this.inRow||(this.rowIndex++,this.columnIndex=0,this.inRow=!0),n.addCell(this.rowIndex,new Lu(this.rowIndex,this.columnIndex,i.viewNode)),this.columnIndex++)}return t.prototype.afterNonInlineElementNode.call(this,e)},n.startNonElementNode=function(t){this.registerCheckPoint(t)},n.afterNonElementNode=function(t){this.registerCheckPoint(t)},n.startInlineElementNode=function(t){this.registerCheckPoint(t)},n.afterInlineElementNode=function(t){this.registerCheckPoint(t)},n.registerCheckPoint=function(t){var e=t.nodeContext;e&&e.viewNode&&!zs(e)&&this.checkPoints.push(e.clone())},n.postLayoutBlockContents=function(t){this.checkPoints.length>0&&this.column.postLayoutBlock(t.nodeContext,this.checkPoints),this.checkPoints=[]},e}(ru),ju=function(t){function e(e,n){var i;return(i=t.call(this,!0)||this).formattingContext=e,i.column=n,i.inRow=!1,i.currentRowIndex=-1,i.currentColumnIndex=0,i.originalStopAtOverflow=n.stopAtOverflow,n.stopAtOverflow=!1,i}I(e,t);var n=e.prototype;return n.resetColumn=function(){this.column.stopAtOverflow=this.originalStopAtOverflow},n.getColSpanningCellWidth=function(t){for(var e=this.formattingContext.colWidths,n=0,i=0;i<t.colSpan;i++)n+=e[t.anchorSlot.columnIndex+i];return n+this.formattingContext.inlineBorderSpacing*(t.colSpan-1)},n.layoutCell=function(t,e,n){var i=t.rowIndex,r=t.columnIndex,o=e.viewNode;t.colSpan>1&&(et(o,"box-sizing","border-box"),et(o,this.formattingContext.vertical?"height":"width",this.getColSpanningCellWidth(t)+"px"));var a=o.ownerDocument.createElement("div");o.appendChild(a);var s=new _u(this.column,a,e);return this.formattingContext.addCellFragment(i,r,s),1===n.primary.steps.length&&n.primary.after&&(s.empty=!0),s.pseudoColumn.layout(n,!0).thenReturn(!0)},n.hasBrokenCellAtSlot=function(t){var e=this.formattingContext.cellBreakPositions[0];return!!e&&e.cell.anchorSlot.columnIndex===t},n.extractRowSpanningCellBreakPositions=function(){var t=this.formattingContext.cellBreakPositions;if(0===t.length)return[];var e=[],n=0;do{var i=t[n],r=i.cell.rowIndex;if(r<this.currentRowIndex){var o=e[r];o||(o=e[r]=[]),o.push(i),t.splice(n,1)}else n++}while(n<t.length);return e},n.layoutRowSpanningCellsFromPreviousFragment=function(t){var e=this,n=this.formattingContext,i=this.extractRowSpanningCellBreakPositions(),r=i.reduce((function(t){return t+1}),0);if(0===r)return Ti(!0);var o=this.column.layoutContext,a=t.nodeContext;a.viewNode.parentNode.removeChild(a.viewNode);var s=Ni("layoutRowSpanningCellsFromPreviousFragment"),u=Ti(!0),l=0,c=[];return i.forEach((function(t){u=u.thenAsync((function(){var i=oo(t[0].cellNodePosition.steps[1],a.parent);return o.setCurrent(i,!1).thenAsync((function(){var a=Ti(!0),s=0;function u(t){for(;s<t;){if(!c.includes(s)){var e=i.viewNode.ownerDocument.createElement("td");et(e,"padding","0"),i.viewNode.appendChild(e)}s++}}return t.forEach((function(t){a=a.thenAsync((function(){var n=t.cell;u(n.anchorSlot.columnIndex);var a=t.cellNodePosition,h=oo(a.steps[0],i);return h.offsetInNode=a.offsetInNode,h.after=a.after,h.fragmentIndex=a.steps[0].fragmentIndex+1,o.setCurrent(h,!1).thenAsync((function(){for(var i=t.breakChunkPosition,o=0;o<n.colSpan;o++)c.push(s+o);return s+=n.colSpan,e.layoutCell(n,h,i).thenAsync((function(){return h.viewNode.rowSpan=n.rowIndex+n.rowSpan-e.currentRowIndex+r-l,Ti(!0)}))}))}))})),a.thenAsync((function(){return u(n.getColumnCount()),l++,Ti(!0)}))}))}))})),u.then((function(){o.setCurrent(a,!0,t.atUnforcedBreak).then((function(){s.finish(!0)}))})),s.result()},n.startTableRow=function(t){var e=this;if(this.inHeader||this.inFooter)return Ti(!0);var n=t.nodeContext,i=this.formattingContext;return this.currentRowIndex<0?this.currentRowIndex=i.findRowIndexBySourceNode(n.sourceNode):this.currentRowIndex++,this.currentColumnIndex=0,this.inRow=!0,this.layoutRowSpanningCellsFromPreviousFragment(t).thenAsync((function(){return e.registerCellFragmentIndex(),e.column.checkOverflowAndSaveEdgeAndBreakPosition(t.lastAfterNodeContext,null,!0,t.breakAtTheEdge)&&0===i.getRowSpanningCellsOverflowingTheRow(e.currentRowIndex-1).length&&(e.resetColumn(),n.overflow=!0,t.break=!0),Ti(!0)}))},n.registerCellFragmentIndex=function(){var t=this;this.formattingContext.getRowByIndex(this.currentRowIndex).cells.forEach((function(e){var n=t.formattingContext.cellBreakPositions[e.columnIndex];if(n&&n.cell.anchorSlot.columnIndex==e.anchorSlot.columnIndex){var i=n.cellNodePosition.steps[0],r=t.column.layoutContext.xmldoc.getElementOffset(i.node);au(r,i.fragmentIndex+1,1)}}))},n.startTableCell=function(t){var e=this;if(this.inHeader||this.inFooter)return Ti(!0);var n=t.nodeContext;this.inRow||(this.currentRowIndex<0?this.currentRowIndex=0:this.currentRowIndex++,this.currentColumnIndex=0,this.inRow=!0);var i=this.formattingContext.getRowByIndex(this.currentRowIndex).cells[this.currentColumnIndex],r=n.copy().modify();r.after=!0,t.nodeContext=r;var o,a=Ni("startTableCell");if(this.hasBrokenCellAtSlot(i.anchorSlot.columnIndex)){var s=this.formattingContext.cellBreakPositions.shift();n.fragmentIndex=s.cellNodePosition.steps[0].fragmentIndex+1,o=Ti(s.breakChunkPosition)}else o=this.column.nextInTree(n,t.atUnforcedBreak).thenAsync((function(t){t.viewNode&&n.viewNode.removeChild(t.viewNode);var e=ro(t,0);return Ti(new ho(e))}));return o.then((function(r){e.layoutCell(i,n,r).then((function(){e.afterNonInlineElementNode(t),e.currentColumnIndex++,a.finish(!0)}))})),a.result()},n.startNonInlineBox=function(t){var e=Wu(t,this.formattingContext,this.column);if(e)return e;var n=t.nodeContext,i=this.formattingContext.getRepetitiveElements(),r=n.display;return"table-header-group"===r&&i&&i.isHeaderSourceNode(n.sourceNode)?(this.inHeader=!0,Ti(!0)):"table-footer-group"===r&&i&&i.isFooterSourceNode(n.sourceNode)?(this.inFooter=!0,Ti(!0)):"table-row"===r?this.startTableRow(t):"table-cell"===r?this.startTableCell(t):Ti(!0)},n.endNonInlineBox=function(t){var e=t.nodeContext;if("table-row"===e.display&&(this.inRow=!1,!this.inHeader&&!this.inFooter)){var n=e.copy().modify();n.after=!1;var i=new Vu(this.currentRowIndex,n,this.formattingContext);this.column.breakPositions.push(i)}return Ti(!0)},n.afterNonInlineElementNode=function(n){var i=n.nodeContext,r=this.formattingContext.getRepetitiveElements(),o=i.display;if("table-header-group"===o?r&&!r.allowInsertRepeatitiveElements&&r.isHeaderSourceNode(i.sourceNode)?(this.inHeader=!1,i.viewNode.parentNode.removeChild(i.viewNode)):et(i.viewNode,"display","table-row-group"):"table-footer-group"===o&&(r&&!r.allowInsertRepeatitiveElements&&r.isFooterSourceNode(i.sourceNode)?(this.inFooter=!1,i.viewNode.parentNode.removeChild(i.viewNode)):et(i.viewNode,"display","table-row-group")),o&&e.ignoreList[o])i.viewNode.parentNode.removeChild(i.viewNode);else{if(i.sourceNode!==this.formattingContext.tableSourceNode)return t.prototype.afterNonInlineElementNode.call(this,n);i.overflow=this.column.checkOverflowAndSaveEdge(i,null),this.resetColumn(),n.break=!0}return Ti(!0)},e}(ru);ju.ignoreList={"table-caption":!0,"table-column-group":!0,"table-column":!0};var Ku=[],$u=function(){function t(){}var e=t.prototype;return e.layoutEntireTable=function(t,e){var n=new Xu(t.formattingContext,e);return new iu(n,e.layoutContext).iterate(t)},e.getColumnWidths=function(t,e,n,i){for(var r=t.ownerDocument,o=r.createElement("tr"),a=[],s=0;s<e;s++){var u=r.createElement("td");o.appendChild(u),a.push(u)}t.parentNode.insertBefore(o,t.nextSibling);var l=a.map((function(t){var e=i.getElementClientRect(t);return n?e.height:e.width}));return t.parentNode.removeChild(o),l},e.getColGroupElements=function(t){for(var e=[],n=t.firstElementChild;n;)"colgroup"===n.localName&&e.push(n),n=n.nextElementSibling;return e},e.normalizeAndGetColElements=function(t){var e=[];return t.forEach((function(t){var n=t.span;t.removeAttribute("span");for(var i=t.firstElementChild;i;){if("col"===i.localName){var r=i.span;for(i.removeAttribute("span"),n-=r;r-- >1;){var o=i.cloneNode(!0);t.insertBefore(o,i),e.push(o)}e.push(i)}i=i.nextElementSibling}for(;n-- >0;)i=t.ownerDocument.createElement("col"),t.appendChild(i),e.push(i)})),e},e.addMissingColElements=function(t,e,n,i){if(t.length<n){var r=i.ownerDocument.createElement("colgroup");e.push(r);for(var o=t.length;o<n;o++){var a=i.ownerDocument.createElement("col");r.appendChild(a),t.push(a)}}},e.normalizeColGroups=function(t,e,n){var i=t.vertical,r=t.lastRowViewNode;if(r){t.lastRowViewNode=null;var o=r.ownerDocument.createDocumentFragment(),a=t.getColumnCount();if(a>0){var s=t.colWidths=this.getColumnWidths(r,a,i,n.clientLayout),u=this.getColGroupElements(e),l=this.normalizeAndGetColElements(u);this.addMissingColElements(l,u,a,e),l.forEach((function(t,e){et(t,i?"height":"width",s[e]+"px")})),u.forEach((function(t){o.appendChild(t.cloneNode(!0))})),t.colGroups=o}else t.colGroups=o}},e.doInitialLayout=function(t,e){var n=this,i=t.formattingContext;i.vertical=t.vertical,i.initializeRepetitiveElements(t.vertical);var r,o,a,s=(r=t.sourceNode,o=Ku.findIndex((function(t){return t.root===r})),(a=Ku[o])?a.tableLayoutOption:null);!function(t){var e=Ku.findIndex((function(e){return e.root===t}));e>=0&&Ku.splice(e,1)}(t.sourceNode);var u=Ni("TableLayoutProcessor.doInitialLayout"),l=t.copy();return this.layoutEntireTable(t,e).then((function(r){var o=r.viewNode,a=e.clientLayout.getElementClientRect(o),c=e.vertical?a.left:a.bottom;if(c+=(e.vertical?-1:1)*Gs(t,e.collectElementsOffset()).current,!(e.isOverflown(c)||s&&s.calculateBreakPositionsInside))return e.breakPositions.push(new Zu(l)),void u.finish(r);n.normalizeColGroups(i,o,e),i.updateCellSizes(e.clientLayout),u.finish(null)})),u.result()},e.addCaptions=function(t,e,n){var i=t.captions;i.forEach((function(t,r){t&&(e.insertBefore(t.viewNode,n),"top"===t.side&&(i[r]=null))}))},e.addColGroups=function(t,e,n){t.colGroups&&0===this.getColGroupElements(e).length&&e.insertBefore(t.colGroups.cloneNode(!0),n)},e.removeColGroups=function(t,e){if(t.colGroups&&e){var n=this.getColGroupElements(e);n&&n.forEach((function(t){e.removeChild(t)}))}},e.doLayout=function(t,e){var n=t.formattingContext,i=n.getRootViewNode(t),r=i.firstChild;this.addCaptions(n,i,r),this.addColGroups(n,i,r);var o=new ju(n,e),a=new iu(o,e.layoutContext),s=Ni("TableFormattingContext.doLayout");return a.iterate(t).thenFinish(s),s.result()},e.layout=function(t,e,n){var i=t.formattingContext;return i.getRootViewNode(t)?(n&&Ou(t.parent,e),new qu(i,this).layout(t,e)):e.buildDeepElementView(t)},e.createEdgeBreakPosition=function(t,e,n,i){return new Uu(t,e,n,i)},e.startNonInlineElementNode=function(t){return!1},e.afterNonInlineElementNode=function(t,e){return!1},e.finishBreak=function(t,e,n,i){var r=e.formattingContext;if("table-row"===e.display){var o,a=r.findRowIndexBySourceNode(e.sourceNode);if(r.cellBreakPositions=[],(o=e.after?r.getRowSpanningCellsOverflowingTheRow(a):r.getCellsFallingOnRow(a)).length){var s=Ni("TableLayoutProcessor.finishBreak"),u=0;return s.loopWithFrame((function(t){if(u!==o.length){var e=o[u++],n=r.getCellFragmentOfCell(e),i=n.findAcceptableBreakPosition().nodeContext,s=n.cellNodeContext,l=s.toNodePosition(),c=new ho(i.toNodePosition());r.cellBreakPositions.push({cellNodePosition:l,breakChunkPosition:c,cell:e});var h=s.viewNode;n.column.layoutContext.processFragmentedBlockEdge(n.cellNodeContext),a<e.rowIndex+e.rowSpan-1&&(h.rowSpan=a-e.rowIndex+1),n.empty?t.continueLoop():n.pseudoColumn.finishBreak(i,!1,!0).then((function(){!function(t,e,n){var i=e.getRepetitiveElements();if(i){var r=e.vertical,o=t.column,a=t.pseudoColumn.getColumnElement(),s=t.cellNodeContext.viewNode,u=o.clientLayout.getElementClientRect(s),l=o.getComputedPaddingBorder(s);r?et(a,"max-width",u.right-o.footnoteEdge-i.calculateOffset(n)-l.right+"px"):et(a,"max-height",o.footnoteEdge-i.calculateOffset(n)-u.top-l.top+"px"),et(a,"overflow","hidden")}}(n,r,i),t.continueLoop()}))}else t.breakLoop()})).then((function(){t.clearOverflownViewNodes(e,!1),t.layoutContext.processFragmentedBlockEdge(e),r.finishFragment(),s.finish(!0)})),s.result()}}return r.finishFragment(),Js.finishBreak(t,e,n,i)},e.clearOverflownViewNodes=function(t,e,n,i){Zs.prototype.clearOverflownViewNodes(t,e,n,i)},t}(),qu=function(t){function e(e,n){var i;return(i=t.call(this)||this).tableFormattingContext=e,i.processor=n,i}I(e,t);var n=e.prototype;return n.resolveLayoutMode=function(t){var e=this.tableFormattingContext.getRepetitiveElements();return e&&e.doneInitialLayout?(t.sourceNode!==this.tableFormattingContext.tableSourceNode||t.after||e&&e.preventSkippingHeader(),new Ju(this.tableFormattingContext,this.processor)):new Yu(this.tableFormattingContext,this.processor)},n.clearNodes=function(e){t.prototype.clearNodes.call(this,e);var n=this.tableFormattingContext.getRootViewNode(e);this.processor.removeColGroups(this.tableFormattingContext,n)},n.restoreState=function(e,n){t.prototype.restoreState.call(this,e,n),this.tableFormattingContext.finishFragment()},e}(eu),Yu=function(t){function e(e,n){var i;return(i=t.call(this,e)||this).processor=n,i}return I(e,t),e.prototype.doLayout=function(t,e){return this.processor.doInitialLayout(t,e)},e}(Nu),Zu=function(t){function e(e){return t.call(this,e,null,e.overflow,0)||this}I(e,t);var n=e.prototype;return n.getMinBreakPenalty=function(){if(!this.isEdgeUpdated)throw new Error("EdgeBreakPosition.prototype.updateEdge not called");return(this.overflows?3:0)+(this.position.parent?this.position.parent.breakPenalty:0)},n.breakPositionChosen=function(t){t.fragmentLayoutConstraints.push(new Qu(this.position.sourceNode))},e}(Ws),Qu=function(){function t(t){this.tableRootNode=t,this.flagmentLayoutConstraintType="EntireTable"}var e=t.prototype;return e.allowLayout=function(t,e,n){return!1},e.nextCandidate=function(t){return!0},e.postLayout=function(t,e,n,i){Ku.push({root:e.sourceNode,tableLayoutOption:{calculateBreakPositionsInside:!0}})},e.finishBreak=function(t,e){return Ti(!0)},e.equalsTo=function(e){return e instanceof t&&e.tableRootNode===this.tableRootNode},e.getPriorityOfFinishBreak=function(){return 0},t}(),Ju=function(t){function e(e,n){var i;return(i=t.call(this,e)||this).processor=n,i}return I(e,t),e.prototype.doLayout=function(t,e){var n=this.formattingContext.getRepetitiveElements();if(n&&!n.isAfterLastContent(t)){var i=new tl(t);e.fragmentLayoutConstraints.some((function(t){return i.equalsTo(t)}))||e.fragmentLayoutConstraints.unshift(i)}return this.processor.doLayout(t,e)},e}(Tu),tl=function(t){function e(e){var n;return(n=t.call(this,e)||this).flagmentLayoutConstraintType="TableRow",n.cellFragmentLayoutConstraints=[],n}I(e,t);var n=e.prototype;return n.allowLayout=function(t,e,n){var i=this.getRepetitiveElements();return!(i&&!n.pseudoParent&&!Ms(this.nodeContext.viewNode)&&i.isEnableToUpdateState()&&(e&&!t||t&&t.overflow))},n.nextCandidate=function(e){return!!this.collectCellFragmentLayoutConstraints(e,this.nodeContext.formattingContext).some((function(t){return t.constraints.some((function(t){return t.nextCandidate(e)}))}))||t.prototype.nextCandidate.call(this,e)},n.postLayout=function(e,n,i,r){var o=this.nodeContext.formattingContext;if(this.cellFragmentLayoutConstraints=this.collectCellFragmentLayoutConstraints(n,o),this.cellFragmentLayoutConstraints.forEach((function(t){t.constraints.forEach((function(n){n.postLayout(e,t.breakPosition,i,r)}))})),!e){var a=o.getRootViewNode(this.nodeContext);(new $u).removeColGroups(o,a),this.removeDummyRowNodes(i)}t.prototype.postLayout.call(this,e,n,i,r)},n.finishBreak=function(e,n){var i=this,r=Ni("finishBreak"),o=this.cellFragmentLayoutConstraints.reduce((function(t,e){return t.concat(e.constraints.map((function(t){return{constraint:t,breakPosition:e.breakPosition}})))}),[]),a=0;return r.loop((function(){if(a<o.length){var t=o[a++];return t.constraint.finishBreak(t.breakPosition,n).thenReturn(!0)}return Ti(!1)})).then((function(){r.finish(!0)})),r.result().thenAsync((function(){return t.prototype.finishBreak.call(i,e,n)}))},n.removeDummyRowNodes=function(t){if(t&&"table-row"===t.display&&t.viewNode)for(;t.viewNode.previousElementSibling;){var e=t.viewNode.previousElementSibling;e.parentNode&&e.parentNode.removeChild(e)}},n.collectCellFragmentLayoutConstraints=function(t,e){return this.getCellFragemnts(t,e).map((function(t){return{constraints:t.fragment.pseudoColumn.getColumn().fragmentLayoutConstraints,breakPosition:t.breakPosition}}))},n.getCellFragemnts=function(t,e){var n=Number.MAX_VALUE;t&&"table-row"===t.display&&(n=e.findRowIndexBySourceNode(t.sourceNode)+1),n=Math.min(e.cellFragments.length,n);for(var i=[],r=0;r<n;r++)e.cellFragments[r]&&e.cellFragments[r].forEach((function(t){t&&i.push({fragment:t,breakPosition:t.findAcceptableBreakPosition().nodeContext})}));return i},n.getElementsOffsetsForTableCell=function(t){var e=this.nodeContext.formattingContext,n=e.findCellFromColumn(t);return n?e.collectElementsOffsetOfUpperCells(n):e.collectElementsOffsetOfHighestColumn()},n.equalsTo=function(t){return t instanceof e&&this.nodeContext.formattingContext===t.nodeContext.formattingContext},e}(Iu),el=new $u;function nl(t){return t.reduce((function(t,e){return t+e}),0)/t.length}p(e.HOOKS.RESOLVE_FORMATTING_CONTEXT,(function(t,e,n,i,r,o){if(!e)return null;if(n===Ye.table){var a=t.parent;return new zu(a?a.formattingContext:null,t.sourceNode)}return null})),p(e.HOOKS.RESOLVE_LAYOUT_PROCESSOR,(function(t){return t instanceof zu?el:null}));var il=function(t,e){this.layoutResult=t,this.penalty=e};function rl(t){return t.vertical?t.width:t.height}function ol(t,e){t.vertical?t.width=e:t.height=e}var al=function(){function t(t,e,n){this.layoutContainer=t,this.columnGenerator=e,this.regionPageFloatLayoutContext=n,this.originalContainerBlockSize=rl(t)}var e=t.prototype;return e.balanceColumns=function(t){var e=this,n=Ni("ColumnBalancer#balanceColumns");this.preBalance(t),this.savePageFloatLayoutContexts(t),this.layoutContainer.clear();var i=[this.createTrialResult(t)];return n.loopWithFrame((function(t){e.hasNextCandidate(i)?(e.updateCondition(i),e.columnGenerator().then((function(n){e.savePageFloatLayoutContexts(n),e.layoutContainer.clear(),n?(i.push(e.createTrialResult(n)),t.continueLoop()):t.breakLoop()}))):t.breakLoop()})).then((function(){var t=i.reduce((function(t,e){return e.penalty<t.penalty?e:t}),i[0]);e.restoreContents(t.layoutResult),e.postBalance(),n.finish(t.layoutResult)})),n.result()},e.createTrialResult=function(t){var e=this.calculatePenalty(t);return new il(t,e)},e.preBalance=function(t){},e.postBalance=function(){ol(this.layoutContainer,this.originalContainerBlockSize)},e.savePageFloatLayoutContexts=function(t){var e=this.regionPageFloatLayoutContext.detachChildren();t&&(t.columnPageFloatLayoutContexts=e)},e.restoreContents=function(t){var e=this.layoutContainer.element;t.columns.forEach((function(t){e.appendChild(t.element)})),this.regionPageFloatLayoutContext.attachChildren(t.columnPageFloatLayoutContexts)},t}();function sl(t){var e=t[t.length-1];if(0===e.penalty)return!1;var n=t[t.length-2];if(n&&e.penalty>=n.penalty)return!1;var i=e.layoutResult.columns;return Math.max.apply(null,i.map((function(t){return t.computedBlockSize})))>Math.max.apply(null,i.map((function(t){return t.getMaxBlockSizeOfPageFloats()})))+1}function ul(t,e){var n=Math.max.apply(null,t[t.length-1].layoutResult.columns.map((function(t){return isNaN(t.blockDistanceToBlockEndFloats)?t.computedBlockSize:t.computedBlockSize-t.blockDistanceToBlockEndFloats+1})))-1;n<rl(e)?ol(e,n):ol(e,rl(e)-1)}var ll=function(t){function e(e,n,i,r){var o;return(o=t.call(this,i,e,n)||this).columnCount=r,o.originalPosition=null,o.foundUpperBound=!1,o}I(e,t);var n=e.prototype;return n.preBalance=function(t){var e=t.columns.reduce((function(t,e){return t+e.computedBlockSize}),0);ol(this.layoutContainer,e/this.columnCount),this.originalPosition=t.position},n.checkPosition=function(t){return this.originalPosition?this.originalPosition.isSamePosition(t):null===t},n.calculatePenalty=function(t){if(!this.checkPosition(t.position))return 1/0;var e=t.columns;return cl(e)?1/0:Math.max.apply(null,e.map((function(t){return t.computedBlockSize})))},n.hasNextCandidate=function(t){if(1===t.length)return!0;if(this.foundUpperBound)return sl(t);var e=t[t.length-1];return this.checkPosition(e.layoutResult.position)&&!cl(e.layoutResult.columns)?(this.foundUpperBound=!0,!0):rl(this.layoutContainer)<this.originalContainerBlockSize},n.updateCondition=function(t){if(this.foundUpperBound)ul(t,this.layoutContainer);else{var e=Math.min(this.originalContainerBlockSize,rl(this.layoutContainer)+.1*this.originalContainerBlockSize);ol(this.layoutContainer,e)}},e}(al);function cl(t){if(t.length<=1)return!1;var e=t[t.length-1].computedBlockSize;return t.slice(0,t.length-1).every((function(t){return e>t.computedBlockSize}))}var hl,fl=function(t){function e(e,n,i){return t.call(this,i,e,n)||this}I(e,t);var n=e.prototype;return n.calculatePenalty=function(t){if(t.columns.every((function(t){return 0===t.computedBlockSize})))return 1/0;var e,n,i=t.columns.filter((function(t){return!t.pageBreakType})).map((function(t){return t.computedBlockSize}));return n=nl(e=i),nl(e.map((function(t){var e=t-n;return e*e})))},n.hasNextCandidate=function(t){return sl(t)},n.updateCondition=function(t){ul(t,this.layoutContainer)},e}(al),dl=function(t,e,n){this.endStuckFixed=t,this.endFixed=e,this.endSlipped=n},pl=function(){function t(){this.map=[]}var e=t.prototype;return e.getMaxFixed=function(){return 0==this.map.length?0:this.map[this.map.length-1].endFixed},e.getMaxSlipped=function(){return 0==this.map.length?0:this.map[this.map.length-1].endSlipped},e.addStuckRange=function(t){if(0==this.map.length)this.map.push(new dl(t,t,t));else{var e=this.map[this.map.length-1],n=e.endSlipped+t-e.endFixed;e.endFixed==e.endStuckFixed?(e.endFixed=t,e.endStuckFixed=t,e.endSlipped=n):this.map.push(new dl(t,t,n))}},e.addSlippedRange=function(t){0==this.map.length?this.map.push(new dl(t,0,0)):this.map[this.map.length-1].endFixed=t},e.slippedByFixed=function(t){var e=this,n=ft(this.map.length,(function(n){return t<=e.map[n].endFixed})),i=this.map[n];return i.endSlipped-Math.max(0,i.endStuckFixed-t)},e.fixedBySlipped=function(t){var e=this,n=ft(this.map.length,(function(n){return t<=e.map[n].endSlipped})),i=this.map[n];return i.endStuckFixed-(i.endSlipped-t)},t}(),gl=function(){function t(e,n,i,r,o,a,s,u){if(this.context=e,this.style=n,this.offset=i,this.isRoot=r,this.flowChunk=o,this.atBlockStart=a,this.atFlowStart=s,this.isParentBoxDisplayed=u,this.isBlockValue=null,this.hasBoxValue=null,this.styleValues={},this.beforeBox=null,this.afterBox=null,this.breakBefore=null,this.flowName=o.flowName,this.hasBox()){var l=n._pseudos;if(l&&l.before){var c=new t(e,l.before,i,!1,o,this.isBlock(),s,!0);Eo(c.styleValue("content"))&&(this.beforeBox=c,this.breakBefore=c.breakBefore)}}this.breakBefore=Rs(this.getBreakValue("before"),this.breakBefore),this.atFlowStart&&xs(this.breakBefore)&&(o.breakBefore=Rs(o.breakBefore,this.breakBefore))}var e=t.prototype;return e.buildAfterPseudoElementBox=function(e,n,i){if(this.hasBox()){var r=this.style._pseudos;if(r&&r.after){var o=new t(this.context,r.after,e,!1,this.flowChunk,n,i,!0);Eo(o.styleValue("content"))&&(this.afterBox=o)}}},e.styleValue=function(t,e){if(!(t in this.styleValues)){var n=this.style[t];this.styleValues[t]=n?n.evaluate(this.context,t):e||null}return this.styleValues[t]},e.displayValue=function(){return this.styleValue("display",Ye.inline)},e.isBlock=function(){if(null===this.isBlockValue){var t=this.displayValue(),e=this.styleValue("position"),n=this.styleValue("float");this.isBlockValue=$s(t,e,n,this.isRoot)}return this.isBlockValue},e.hasBox=function(){return null===this.hasBoxValue&&(this.hasBoxValue=this.isParentBoxDisplayed&&this.displayValue()!==Ye.none),this.hasBoxValue},e.getBreakValue=function(t){var e=null;if(this.isBlock()){var n=this.styleValue("break-"+t);n&&(e=n.toString())}return e},t}(),ml=function(){function t(t){this.context=t,this.stack=[],this.atBlockStart=!0,this.atFlowStart=!0,this.atStartStack=[]}var e=t.prototype;return e.empty=function(){return 0===this.stack.length},e.lastBox=function(){return this.stack[this.stack.length-1]},e.lastFlowName=function(){var t=this.lastBox();return t?t.flowChunk.flowName:null},e.isCurrentBoxDisplayed=function(){return this.stack.every((function(t){return t.displayValue()!==Ye.none}))},e.push=function(t,e,n,i){var r=this.lastBox();i&&r&&i.flowName!==r.flowName&&this.atStartStack.push({atBlockStart:this.atBlockStart,atFlowStart:this.atFlowStart});var o=i||r.flowChunk,a=this.atFlowStart||!!i,s=this.isCurrentBoxDisplayed(),u=new gl(this.context,t,e,n,o,a||this.atBlockStart,a,s);return this.stack.push(u),this.atBlockStart=u.hasBox()?!u.beforeBox&&u.isBlock():this.atBlockStart,this.atFlowStart=u.hasBox()?!u.beforeBox&&a:this.atFlowStart,u},e.encounteredTextNode=function(t){var e=this.lastBox();(this.atBlockStart||this.atFlowStart)&&e.hasBox()&&(Zr(t,Yr(e.styleValue("white-space",Ye.normal).toString()))||(this.atBlockStart=!1,this.atFlowStart=!1))},e.pop=function(t){var e=this.stack.pop();if(e.buildAfterPseudoElementBox(t,this.atBlockStart,this.atFlowStart),this.atFlowStart&&e.afterBox){var n=e.afterBox.getBreakValue("before");e.flowChunk.breakBefore=Rs(e.flowChunk.breakBefore,n)}var i=this.lastBox();if(i)if(i.flowName===e.flowName)e.hasBox()&&(this.atBlockStart=this.atFlowStart=!1);else{var r=this.atStartStack.pop();this.atBlockStart=r.atBlockStart,this.atFlowStart=r.atFlowStart}return e},e.nearestBlockStartOffset=function(t){if(!t.atBlockStart)return t.offset;var e=this.stack.length-1,n=this.stack[e];for(n===t&&(e--,n=this.stack[e]);e>=0;){if(n.flowName!==t.flowName)return t.offset;if(!n.atBlockStart)return n.offset;if(n.isRoot)return n.offset;t=n,n=this.stack[--e]}throw new Error("No block start offset found!")},t}(),vl=function(){function t(t,e,n,i,r,o,a,s){this.xmldoc=t,this.scope=n,this.context=i,this.primaryFlows=r,this.validatorSet=o,this.counterListener=a,this.rootStyle={},this.styleMap={},this.flows={},this.flowChunks=[],this.flowListener=null,this.flowToReach=null,this.idToReach=null,this.primary=!0,this.primaryStack=[],this.rootBackgroundAssigned=!1,this.rootLayoutAssigned=!1,this.breakBeforeValues={},this.bodyReached=!0,this.root=t.root,this.cascadeHolder=e,this.last=this.root,this.cascade=e.createInstance(i,a,s,t.lang),this.offsetMap=new pl;var u=t.getElementOffset(this.root);this.lastOffset=u,this.boxStack=new ml(i),this.offsetMap.addStuckRange(u);var l=this.getAttrStyle(this.root);switch(this.cascade.pushElement(this.root,l,u),this.postprocessTopStyle(l,!1),this.root.namespaceURI){case W.XHTML:this.bodyReached=!1}this.primaryStack.push(!0),this.styleMap={},this.styleMap["e"+u]=l,this.lastOffset++,this.replayFlowElementsFromOffset(-1)}var e=t.prototype;return e.hasProp=function(t,e,n){var i=t[n];return i&&i.evaluate(this.context)!==e[n]},e.transferPropsToRoot=function(t,e){for(var n in e){var i=t[n];if(i)this.rootStyle[n]=i,delete t[n];else{var r=e[n];r&&(this.rootStyle[n]=new Fo(r,33554432))}}},e.postprocessTopStyle=function(t,e){var n=this;if(["writing-mode","direction"].forEach((function(i){!t[i]||e&&n.rootStyle[i]||(n.rootStyle[i]=t[i])})),!this.rootBackgroundAssigned){var i=this.hasProp(t,this.validatorSet.backgroundProps,"background-color")?t["background-color"].evaluate(this.context):null,r=this.hasProp(t,this.validatorSet.backgroundProps,"background-image")?t["background-image"].evaluate(this.context):null;(i&&i!==Ye.inherit||r&&r!==Ye.inherit)&&(this.transferPropsToRoot(t,this.validatorSet.backgroundProps),this.rootBackgroundAssigned=!0)}if(!this.rootLayoutAssigned)for(var o=0;o<El.length;o++)if(this.hasProp(t,this.validatorSet.layoutProps,El[o])){this.transferPropsToRoot(t,this.validatorSet.layoutProps),this.rootLayoutAssigned=!0;break}if(!e){var a=t["font-size"];if(a){var s=a.evaluate(this.context),u=s.num;switch(s.unit){case"em":case"rem":u*=this.context.initialFontSize;break;case"ex":u*=this.context.initialFontSize*Ht.ex/Ht.em;break;case"%":u*=this.context.initialFontSize/100;break;default:var l=Ht[s.unit];l&&(u*=l)}this.context.rootFontSize=u}}},e.getTopContainerStyle=function(){for(var t=0;!this.bodyReached&&this.styleUntil(t+=5e3,0)!=Number.POSITIVE_INFINITY;);return this.rootStyle},e.getAttrStyle=function(t){if(t.style instanceof CSSStyleDeclaration){var e=t.getAttribute("style");if(e)return function(t,e,n,i){var r=new Qa(t,e),o=new yi(i,r);try{!function(t,e,n){new Er(rr,t,e,n).runParser(Number.POSITIVE_INFINITY,!1,!0,!1,!1)}(o,r,n)}catch(t){f.warn(t,"Style attribute parse error:")}return r.elementStyle}(this.scope,this.validatorSet,this.xmldoc.url,e)}return{}},e.getReachedOffset=function(){return this.lastOffset},e.replayFlowElementsFromOffset=function(t){if(!(t>=this.lastOffset)){var e=this.context,n=this.xmldoc.getElementOffset(this.root);if(t<n){var i=this.getStyle(this.root,!1),r=_o(i,"flow-into"),o=r?r.evaluate(e,"flow-into").toString():"body",a=this.encounteredFlowElement(o,i,this.root,n);this.boxStack.empty()&&this.boxStack.push(i,n,!0,a)}var s=this.xmldoc.getNodeByOffset(t),u=this.xmldoc.getNodeOffset(s,0,!1);if(!(u>=this.lastOffset))for(;;){if(1!=s.nodeType)u+=s.textContent.length;else{var l=s,c=this.getStyle(l,!1),h=c["flow-into"];if(h){var f=h.evaluate(e,"flow-into").toString();this.encounteredFlowElement(f,c,l,u)}u++}if(u>=this.lastOffset)break;var d=s.firstChild;if(null==d)for(;!(d=s.nextSibling);)if((s=s.parentNode)===this.root)return;s=d}}},e.resetFlowChunkStream=function(t){this.flowListener=t;for(var e=0;e<this.flowChunks.length;e++)this.flowListener.encounteredFlowChunk(this.flowChunks[e],this.flows[this.flowChunks[e].flowName])},e.styleUntilFlowIsReached=function(t){this.flowToReach=t;for(var e=0;null!=this.flowToReach&&this.styleUntil(e+=5e3,0)!=Number.POSITIVE_INFINITY;);},e.styleUntilIdIsReached=function(t){if(t){this.idToReach=t;for(var e=0;this.idToReach&&this.styleUntil(e+=5e3,0)!==Number.POSITIVE_INFINITY;);this.idToReach=null}},e.encounteredFlowElement=function(t,e,n,i){var r=0,o=Number.POSITIVE_INFINITY,a=!1,s=!1,u=!1,l=e["flow-options"];if(l){var c=function(t){if(t){var e=new Nn;try{return t.visit(e),e.propSet}catch(t){f.warn(t,"toSet:")}}return{}}(l.evaluate(this.context,"flow-options"));a=!!c.exclusive,s=!!c.static,u=!!c.last}var h=e["flow-linger"];h&&(o=An(h.evaluate(this.context,"flow-linger"),Number.POSITIVE_INFINITY));var d=e["flow-priority"];d&&(r=An(d.evaluate(this.context,"flow-priority"),0));var p=this.breakBeforeValues[i]||null,g=this.flows[t];if(!g){var m=this.boxStack.lastFlowName();g=this.flows[t]=new Qr(t,m)}var v=new Jr(t,n,i,r,o,a,s,u,p);return this.flowChunks.push(v),this.flowToReach==t&&(this.flowToReach=null),this.flowListener&&this.flowListener.encounteredFlowChunk(v,g),v},e.registerForcedBreakOffset=function(t,e,n){if(xs(t)){var i=this.flows[n].forcedBreakOffsets;(0===i.length||i[i.length-1]<e)&&i.push(e)}this.breakBeforeValues[e]=Rs(this.breakBeforeValues[e],t)},e.styleUntil=function(t,e){var n=-1;if(t<=this.lastOffset&&(n=this.offsetMap.slippedByFixed(t)+e)<this.offsetMap.getMaxSlipped())return this.offsetMap.fixedBySlipped(n);if(null==this.last)return Number.POSITIVE_INFINITY;for(var i=this.context;;){var r=this.last.firstChild;if(null==r)for(;;){if(1==this.last.nodeType){this.cascade.popElement(this.last),this.primary=this.primaryStack.pop();var o=this.boxStack.pop(this.lastOffset),a=null;if(o.afterBox){var s=o.afterBox.getBreakValue("before");this.registerForcedBreakOffset(s,o.afterBox.atBlockStart?this.boxStack.nearestBlockStartOffset(o):o.afterBox.offset,o.flowName),a=o.afterBox.getBreakValue("after")}a=Rs(a,o.getBreakValue("after")),this.registerForcedBreakOffset(a,this.lastOffset,o.flowName)}if(r=this.last.nextSibling)break;if(this.last=this.last.parentNode,this.last===this.root)return this.last=null,t<this.lastOffset&&(n<0&&(n=this.offsetMap.slippedByFixed(t)+e),n<=this.offsetMap.getMaxSlipped())?this.offsetMap.fixedBySlipped(n):Number.POSITIVE_INFINITY}if(this.last=r,1!=this.last.nodeType)this.lastOffset+=this.last.textContent.length,this.boxStack.encounteredTextNode(this.last),this.primary?this.offsetMap.addStuckRange(this.lastOffset):this.offsetMap.addSlippedRange(this.lastOffset);else{var u=this.last,l=this.getAttrStyle(u);this.primaryStack.push(this.primary),this.cascade.pushElement(u,l,this.lastOffset);var c=u.getAttribute("id")||u.getAttributeNS(W.XML,"id");c&&c===this.idToReach&&(this.idToReach=null),this.bodyReached||"body"!=u.localName||u.parentNode!=this.root||(this.postprocessTopStyle(l,!0),this.bodyReached=!0);var h=void 0,f=l["flow-into"];if(f){var d=f.evaluate(i,"flow-into").toString(),p=this.encounteredFlowElement(d,l,u,this.lastOffset);this.primary=!!this.primaryFlows[d],h=this.boxStack.push(l,this.lastOffset,u===this.root,p)}else h=this.boxStack.push(l,this.lastOffset,u===this.root),u===this.xmldoc.body&&(h.breakBefore=Rs(h.flowChunk.breakBefore,h.breakBefore));var g=this.boxStack.nearestBlockStartOffset(h);if(this.registerForcedBreakOffset(h.breakBefore,g,h.flowName),h.beforeBox){var m=h.beforeBox.getBreakValue("after");this.registerForcedBreakOffset(m,h.beforeBox.atBlockStart?g:h.offset,h.flowName)}if(this.primary&&h.displayValue()===Ye.none&&(this.primary=!1),this.styleMap["e"+this.lastOffset]=l,this.lastOffset++,this.primary?this.offsetMap.addStuckRange(this.lastOffset):this.offsetMap.addSlippedRange(this.lastOffset),t<this.lastOffset&&(n<0&&(n=this.offsetMap.slippedByFixed(t)+e),n<=this.offsetMap.getMaxSlipped()))return this.offsetMap.fixedBySlipped(n)}}},e.getStyle=function(t,e){var n=this.xmldoc.getElementOffset(t),i="e"+n;return e&&(n=this.xmldoc.getNodeOffset(t,0,!0)),this.lastOffset<=n&&this.styleUntil(n,0),this.styleMap[i]},e.processContent=function(t,e){},t}(),El=["column-count","column-width","column-fill"],bl=function(){function t(t){this.validator=t,this.success=null,this.failure=null,this.code=0}var e=t.prototype;return e.isSpecial=function(){return 0!=this.code},e.markAsStartGroup=function(){this.code=-1},e.isStartGroup=function(){return-1==this.code},e.markAsEndGroup=function(){this.code=-2},e.isEndGroup=function(){return-2==this.code},e.markAsStartAlternate=function(t){this.code=2*t+1},e.isStartAlternate=function(){return this.code>0&&this.code%2!=0},e.markAsEndAlternate=function(t){this.code=2*t+2},e.isEndAlternate=function(){return this.code>0&&this.code%2==0},e.getAlternate=function(){return Math.floor((this.code-1)/2)},t}(),Cl=function(t,e){this.where=t,this.success=e,this.what=-1};!function(t){t[t.FOLLOW=1]="FOLLOW",t[t.OPTIONAL=2]="OPTIONAL",t[t.REPEATED=3]="REPEATED",t[t.ALTERNATE=4]="ALTERNATE"}(hl||(hl={}));var yl=function(){function t(){this.nodes=[],this.connections=[],this.match=[],this.nomatch=[],this.error=[],this.emptyHead=!0}var e=t.prototype;return e.connect=function(t,e){for(var n=0;n<t.length;n++)this.connections[t[n]].what=e;t.splice(0,t.length)},e.clone=function(){for(var e,n,i,r=new t,o=0;o<this.nodes.length;o++){var a=this.nodes[o],s=new bl(a.validator);s.code=a.code,r.nodes.push(s)}for(var u=0;u<this.connections.length;u++){var l=this.connections[u],c=new Cl(l.where,l.success);c.what=l.what,r.connections.push(c)}return(e=r.match).push.apply(e,this.match),(n=r.nomatch).push.apply(n,this.nomatch),(i=r.error).push.apply(i,this.error),r},e.addSpecialToArr=function(t,e,n){var i=this.nodes.length,r=new bl(Nl);n>=0?e?r.markAsStartAlternate(n):r.markAsEndAlternate(n):e?r.markAsStartGroup():r.markAsEndGroup(),this.nodes.push(r),this.connect(t,i);var o=new Cl(i,!0),a=new Cl(i,!1);t.push(this.connections.length),this.connections.push(a),t.push(this.connections.length),this.connections.push(o)},e.endSpecialGroup=function(){for(var t=[this.match,this.nomatch,this.error],e=0;e<t.length;e++)this.addSpecialToArr(t[e],!1,-1)},e.startSpecialGroup=function(){if(this.nodes.length)throw new Error("invalid call");this.addSpecialToArr(this.match,!0,-1)},e.endClause=function(t){this.addSpecialToArr(this.match,!1,t)},e.startClause=function(t){if(this.nodes.length)throw new Error("invalid call");var e=new bl(Nl);e.markAsStartAlternate(t),this.nodes.push(e);var n=new Cl(0,!0),i=new Cl(0,!1);this.nomatch.push(this.connections.length),this.connections.push(i),this.match.push(this.connections.length),this.connections.push(n)},e.addPrimitive=function(t){var e=this.nodes.length;this.nodes.push(new bl(t));var n=new Cl(e,!0),i=new Cl(e,!1);this.connect(this.match,e),this.emptyHead?(this.nomatch.push(this.connections.length),this.emptyHead=!1):this.error.push(this.connections.length),this.connections.push(i),this.match.push(this.connections.length),this.connections.push(n)},e.isSimple=function(){return 1==this.nodes.length&&!this.nodes[0].isSpecial()},e.isPrimitive=function(){return this.isSimple()&&this.nodes[0].validator instanceof Dl},e.addGroup=function(t,e){if(0!=t.nodes.length){var n=this.nodes.length;if(e==hl.ALTERNATE&&1==n&&t.isPrimitive()&&this.isPrimitive())this.nodes[0].validator=this.nodes[0].validator.combine(t.nodes[0].validator);else{for(var i=0;i<t.nodes.length;i++)this.nodes.push(t.nodes[i]);e==hl.ALTERNATE?(this.emptyHead=!0,this.connect(this.nomatch,n)):this.connect(this.match,n);for(var r=this.connections.length,o=0;o<t.connections.length;o++){var a=t.connections[o];a.where+=n,a.what>=0&&(a.what+=n),this.connections.push(a)}for(var s=0;s<t.match.length;s++)this.match.push(t.match[s]+r);if(e==hl.REPEATED&&this.connect(this.match,n),e==hl.OPTIONAL||e==hl.REPEATED)for(var u=0;u<t.nomatch.length;u++)this.match.push(t.nomatch[u]+r);else if(this.emptyHead){for(var l=0;l<t.nomatch.length;l++)this.nomatch.push(t.nomatch[l]+r);this.emptyHead=t.emptyHead}else for(var c=0;c<t.nomatch.length;c++)this.error.push(t.nomatch[c]+r);for(var h=0;h<t.error.length;h++)this.error.push(t.error[h]+r);t.nodes=null,t.connections=null}}},e.finish=function(t,e){var n=this.nodes.length;this.nodes.push(t),this.nodes.push(e),this.connect(this.match,n),this.connect(this.nomatch,n+1),this.connect(this.error,n+1);for(var i,r=_(this.connections);!(i=r()).done;){var o=i.value;o.success?this.nodes[o.where].success=this.nodes[o.what]:this.nodes[o.where].failure=this.nodes[o.what]}for(var a=0;a<n;a++)if(null==this.nodes[a].failure||null==this.nodes[a].success)throw new Error("Invalid validator state");return this.nodes[0]},t}(),wl=function(t){function e(){return t.call(this)||this}return I(e,t),e.prototype.validateForShorthand=function(t,e){var n=t[e].visit(this);return n?[n]:null},e}(Ie),Dl=function(t){function e(e,n,i){var r;return(r=t.call(this)||this).allowed=e,r.idents=n,r.units=i,r}I(e,t);var n=e.prototype;return n.visitEmpty=function(t){return 1&this.allowed?t:null},n.visitSlash=function(t){return 2048&this.allowed?t:null},n.visitStr=function(t){return 2&this.allowed?t:null},n.visitIdent=function(t){return this.idents[t.name.toLowerCase()]||(4&this.allowed?t:null)},n.visitNumeric=function(t){return 0!=t.num||512&this.allowed?t.num<0&&!(256&this.allowed)?null:this.units[t.unit]?t:null:"%"==t.unit&&1024&this.allowed?t:null},n.visitNum=function(t){return 0==t.num?512&this.allowed?t:null:t.num<=0&&!(256&this.allowed)?null:16&this.allowed?t:null},n.visitInt=function(t){return 0==t.num?512&this.allowed?t:null:t.num<=0&&!(256&this.allowed)?null:48&this.allowed?t:this.idents[""+t.num]||null},n.visitColor=function(t){return 64&this.allowed?t:null},n.visitURL=function(t){return 128&this.allowed?t:null},n.visitSpaceList=function(t){return null},n.visitCommaList=function(t){return null},n.visitFunc=function(t){return null},n.visitExpr=function(t){return 2046&this.allowed?t:null},n.combine=function(t){var n={},i={};for(var r in this.idents)n[r]=this.idents[r];for(var o in t.idents)n[o]=t.idents[o];for(var a in this.units)i[a]=this.units[a];for(var s in t.units)i[s]=t.units[s];return new e(this.allowed|t.allowed,n,i)},e}(wl),Sl={},Nl=new Dl(0,Sl,Sl),Tl=function(t){function e(e){var n;return(n=t.call(this)||this).successTerminal=new bl(null),n.failureTerminal=new bl(null),n.first=e.finish(n.successTerminal,n.failureTerminal),n}I(e,t);var n=e.prototype;return n.validateList=function(t,e,n){for(var i=e?[]:t,r=this.first,o=n,a=null,s=null;r!==this.successTerminal&&r!==this.failureTerminal;)if(o>=t.length)r=r.failure;else{var u=t[o],l=u;if(r.isSpecial()){var c=!0;r.isStartGroup()?(a?a.push(s):a=[s],s=[]):r.isEndGroup()?s=a.length>0?a.pop():null:r.isEndAlternate()?s[r.getAlternate()]="taken":c=null==s[r.getAlternate()],r=c?r.success:r.failure}else{if(0==o&&!e&&r.validator instanceof Al&&this instanceof Al){if(l=new We(t).visit(r.validator)){o=t.length,r=r.success;continue}}else if(0==o&&!e&&r.validator instanceof xl&&this instanceof Al){if(l=new Xe(t).visit(r.validator)){o=t.length,r=r.success;continue}}else l=u.visit(r.validator);if(!l){r=r.failure;continue}if(l!==u&&t===i){i=[];for(var h=0;h<o;h++)i[h]=t[h]}t!==i&&(i[o-n]=l),o++,r=r.success}}return r===this.successTerminal&&(e?i.length>0:o==t.length)?i:null},n.validateSingle=function(t){for(var e=null,n=this.first;n!==this.successTerminal&&n!==this.failureTerminal;)t?n.isSpecial()?n=n.success:(e=t.visit(n.validator))?(t=null,n=n.success):n=n.failure:n=n.failure;return n===this.successTerminal?e:null},n.visitEmpty=function(t){return this.validateSingle(t)},n.visitSlash=function(t){return this.validateSingle(t)},n.visitStr=function(t){return this.validateSingle(t)},n.visitIdent=function(t){return this.validateSingle(t)},n.visitNumeric=function(t){return this.validateSingle(t)},n.visitNum=function(t){return this.validateSingle(t)},n.visitInt=function(t){return this.validateSingle(t)},n.visitColor=function(t){return this.validateSingle(t)},n.visitURL=function(t){return this.validateSingle(t)},n.visitSpaceList=function(t){return null},n.visitCommaList=function(t){return null},n.visitFunc=function(t){return this.validateSingle(t)},n.visitExpr=function(t){return null},e}(wl),Al=function(t){function e(e){return t.call(this,e)||this}I(e,t);var n=e.prototype;return n.visitSpaceList=function(t){var e=this.validateList(t.values,!1,0);return e===t.values?t:e?new We(e):null},n.visitCommaList=function(t){for(var e=this.first,n=!1;e;){if(e.validator instanceof xl){n=!0;break}e=e.failure}if(n){var i=this.validateList(t.values,!1,0);return i===t.values?t:i?new Xe(i):null}return null},n.validateForShorthand=function(t,e){return this.validateList(t,!0,e)},e}(Tl),xl=function(t){function e(e){return t.call(this,e)||this}I(e,t);var n=e.prototype;return n.visitSpaceList=function(t){return this.validateSingle(t)},n.visitCommaList=function(t){var e=this.validateList(t.values,!1,0);return e===t.values?t:e?new Xe(e):null},n.validateForShorthand=function(t,e){for(var n,i=this.first;i!==this.failureTerminal;){if(n=i.validator.validateForShorthand(t,e))return n;i=i.failure}return null},e}(Tl),Il=function(t){function e(e,n){var i;return(i=t.call(this,n)||this).name=e,i}I(e,t);var n=e.prototype;return n.validateSingle=function(t){return null},n.visitFunc=function(t){if(t.name.toLowerCase()!=this.name)return null;var e=this.validateList(t.values,!1,0);return e===t.values?t:e?new je(t.name,e):null},e}(Tl),Fl=function(){function t(){}var e=t.prototype;return e.tryParse=function(t,e,n){return e},e.success=function(t,e){},t}(),Pl=function(t){function e(e,n){var i;return(i=t.call(this)||this).name=n,i.validator=e.validators[i.name],i}I(e,t);var n=e.prototype;return n.tryParse=function(t,e,n){if(n.values[this.name])return e;var i=this.validator.validateForShorthand(t,e);if(i){var r=i.length,o=r>1?new We(i):i[0];return this.success(o,n),e+r}return e},n.success=function(t,e){e.values[this.name]=t},e}(Fl),Ol=function(t){function e(e,n){var i;return(i=t.call(this,e,n[0])||this).names=n,i}return I(e,t),e.prototype.success=function(t,e){for(var n=0;n<this.names.length;n++)e.values[this.names[n]]=t},e}(Pl),Rl=function(t){function e(e,n){var i;return(i=t.call(this)||this).nodes=e,i.slash=n,i}return I(e,t),e.prototype.tryParse=function(t,e,n){var i=e;if(this.slash){if(t[e]!=Re)return i;if(++e==t.length)return i}var r=this.nodes[0].tryParse(t,e,n);if(r==e)return i;e=r;for(var o=1;o<this.nodes.length&&e<t.length&&(r=this.nodes[o].tryParse(t,e,n))!=e;o++)e=r;return e},e}(Fl),kl=function(t){function e(){var e;return(e=t.apply(this,arguments)||this).syntax=null,e.propList=null,e.error=!1,e.values={},e.validatorSet=null,e}I(e,t);var n=e.prototype;return n.setOwner=function(t){this.validatorSet=t},n.syntaxNodeForProperty=function(t){return new Pl(this.validatorSet,t)},n.clone=function(){var t=new this.constructor;return t.syntax=this.syntax,t.propList=this.propList,t.validatorSet=this.validatorSet,t},n.init=function(t,e){this.syntax=t,this.propList=e},n.finish=function(t,e){if(!this.error){for(var n,i=_(this.propList);!(n=i()).done;){var r=n.value;e.simpleProperty(r,this.values[r]||this.validatorSet.defaultValues[r],t)}return!0}return!1},n.propagateInherit=function(t,e){for(var n,i=_(this.propList);!(n=i()).done;)e.simpleProperty(n.value,Ye.inherit,t)},n.validateList=function(t){return this.error=!0,0},n.validateSingle=function(t){return this.validateList([t]),null},n.visitEmpty=function(t){return this.validateSingle(t)},n.visitStr=function(t){return this.validateSingle(t)},n.visitIdent=function(t){return this.validateSingle(t)},n.visitNumeric=function(t){return this.validateSingle(t)},n.visitNum=function(t){return this.validateSingle(t)},n.visitInt=function(t){return this.validateSingle(t)},n.visitColor=function(t){return this.validateSingle(t)},n.visitURL=function(t){return this.validateSingle(t)},n.visitSpaceList=function(t){return this.validateList(t.values),null},n.visitCommaList=function(t){return this.error=!0,null},n.visitFunc=function(t){return this.validateSingle(t)},n.visitExpr=function(t){return this.error=!0,null},e}(Ie),Ll=function(t){function e(){return t.call(this)||this}return I(e,t),e.prototype.validateList=function(t){for(var e=0,n=0;e<t.length;){var i=this.syntax[n].tryParse(t,e,this);if(i>e)e=i,n=0;else if(++n==this.syntax.length){this.error=!0;break}}return e},e}(kl),Bl=function(t){function e(){return t.call(this)||this}I(e,t);var n=e.prototype;return n.validateList=function(t){if(t.length>this.syntax.length||0==t.length)return this.error=!0,0;for(var e=0;e<this.syntax.length;e++){for(var n=e;n>=t.length;)n=1==n?0:n-2;if(this.syntax[e].tryParse(t,n,this)!=n+1)return this.error=!0,0}return t.length},n.createSyntaxNode=function(){return new Ol(this.validatorSet,this.propList)},e}(kl),_l={SIMPLE:Ll,INSETS:Bl,INSETS_SLASH:function(t){function e(){return t.call(this)||this}return I(e,t),e.prototype.validateList=function(t){for(var e=t.length,n=0;n<t.length;n++)if(t[n]===Re){e=n;break}if(e>this.syntax.length||0==t.length)return this.error=!0,0;for(var i=0;i<this.syntax.length;i++){for(var r=i;r>=e;)r=1==r?0:r-2;var o=void 0;if(e+1<t.length)for(o=e+i+1;o>=t.length;)o-=o==e+2?1:2;else o=r;if(2!=this.syntax[i].tryParse([t[r],t[o]],0,this))return this.error=!0,0}return t.length},e}(kl),COMMA:function(t){function e(){return t.call(this)||this}I(e,t);var n=e.prototype;return n.mergeIn=function(t,e){for(var n,i=_(this.propList);!(n=i()).done;){var r=n.value,o=e[r]||this.validatorSet.defaultValues[r],a=t[r];a||(t[r]=a=[]),a.push(o)}},n.visitCommaList=function(t){for(var e={},n=0;n<t.values.length;n++)if(this.values={},t.values[n]instanceof Xe?this.error=!0:(t.values[n].visit(this),this.mergeIn(e,this.values),this.values["background-color"]&&n!=t.values.length-1&&(this.error=!0)),this.error)return null;for(var i in this.values={},e)this.values[i]="background-color"==i?e[i].pop():new Xe(e[i]);return null},e}(Ll),FONT:function(t){function e(){return t.call(this)||this}I(e,t);var n=e.prototype;return n.init=function(e,n){t.prototype.init.call(this,e,n),this.propList.push("font-family","line-height","font-size")},n.validateList=function(e){var n=t.prototype.validateList.call(this,e);if(n+2>e.length)return this.error=!0,n;this.error=!1;var i=this.validatorSet.validators;if(!e[n].visit(i["font-size"]))return this.error=!0,n;if(this.values["font-size"]=e[n++],e[n]===Re){if(2+ ++n>e.length)return this.error=!0,n;if(!e[n].visit(i["line-height"]))return this.error=!0,n;this.values["line-height"]=e[n++]}var r=n==e.length-1?e[n]:new We(e.slice(n,e.length));return r.visit(i["font-family"])?(this.values["font-family"]=r,e.length):(this.error=!0,n)},n.visitCommaList=function(t){if(t.values[0].visit(this),this.error)return null;for(var e=[this.values["font-family"]],n=1;n<t.values.length;n++)e.push(t.values[n]);var i=new Xe(e);return i.visit(this.validatorSet.validators["font-family"])?this.values["font-family"]=i:this.error=!0,null},n.visitIdent=function(t){var e=this.validatorSet.systemFonts[t.name];if(e)for(var n in e)this.values[n]=e[n];else this.error=!0;return null},e}(Ll)},Ml=function(){function t(){this.validators={},this.prefixes={},this.defaultValues={},this.namedValidators={},this.systemFonts={},this.shorthands={},this.layoutProps={},this.backgroundProps={}}var e=t.prototype;return e.addReplacement=function(t,e){var n;if(e.type==kn.NUMERIC)n=new Me(e.num,e.text);else if(e.type==kn.HASH)n=Zi(e.text);else{if(e.type!=kn.IDENT)throw new Error("unexpected replacement");n=_e(e.text)}if(t.isPrimitive()){var i=t.nodes[0].validator.idents;for(var r in i)i[r]=n;return t}throw new Error("unexpected replacement")},e.newGroup=function(t,e){var n,i=new yl;if("||"==t){for(var r=0;r<e.length;r++){var o=new yl;o.startClause(r),o.addGroup(e[r],hl.FOLLOW),o.endClause(r),i.addGroup(o,0==r?hl.FOLLOW:hl.ALTERNATE)}var a=new yl;return a.startSpecialGroup(),a.addGroup(i,hl.REPEATED),a.endSpecialGroup(),a}switch(t){case" ":n=hl.FOLLOW;break;case"|":case"||":n=hl.ALTERNATE;break;default:throw new Error("unexpected op")}for(var s=0;s<e.length;s++)i.addGroup(e[s],0==s?hl.FOLLOW:n);return i},e.addCounts=function(t,e,n){for(var i=new yl,r=0;r<e;r++)i.addGroup(t.clone(),hl.FOLLOW);if(n==Number.POSITIVE_INFINITY)i.addGroup(t,hl.REPEATED);else for(var o=e;o<n;o++)i.addGroup(t.clone(),hl.OPTIONAL);return i},e.primitive=function(t){var e=new yl;return e.addPrimitive(t),e},e.newFunc=function(t,e){var n;switch(t){case"COMMA":n=new xl(e);break;case"SPACE":n=new Al(e);break;default:n=new Il(t.toLowerCase(),e)}return this.primitive(n)},e.initBuiltInValidators=function(){this.namedValidators.HASHCOLOR=this.primitive(new Dl(64,Sl,Sl)),this.namedValidators.POS_INT=this.primitive(new Dl(32,Sl,Sl)),this.namedValidators.POS_NUM=this.primitive(new Dl(16,Sl,Sl)),this.namedValidators.POS_PERCENTAGE=this.primitive(new Dl(8,Sl,{"%":Oe})),this.namedValidators.NEGATIVE=this.primitive(new Dl(256,Sl,Sl)),this.namedValidators.ZERO=this.primitive(new Dl(512,Sl,Sl)),this.namedValidators.ZERO_PERCENTAGE=this.primitive(new Dl(1024,Sl,Sl)),this.namedValidators.POS_LENGTH=this.primitive(new Dl(8,Sl,{em:Oe,ex:Oe,ch:Oe,rem:Oe,vw:Oe,vh:Oe,vi:Oe,vb:Oe,vmin:Oe,vmax:Oe,pvw:Oe,pvh:Oe,pvi:Oe,pvb:Oe,pvmin:Oe,pvmax:Oe,cm:Oe,mm:Oe,in:Oe,px:Oe,pt:Oe,pc:Oe,q:Oe})),this.namedValidators.POS_ANGLE=this.primitive(new Dl(8,Sl,{deg:Oe,grad:Oe,rad:Oe,turn:Oe})),this.namedValidators.POS_TIME=this.primitive(new Dl(8,Sl,{s:Oe,ms:Oe})),this.namedValidators.FREQUENCY=this.primitive(new Dl(8,Sl,{Hz:Oe,kHz:Oe})),this.namedValidators.RESOLUTION=this.primitive(new Dl(8,Sl,{dpi:Oe,dpcm:Oe,dppx:Oe})),this.namedValidators.URI=this.primitive(new Dl(128,Sl,Sl)),this.namedValidators.IDENT=this.primitive(new Dl(4,Sl,Sl)),this.namedValidators.STRING=this.primitive(new Dl(2,Sl,Sl)),this.namedValidators.SLASH=this.primitive(new Dl(2048,Sl,Sl));var t={"font-family":_e("sans-serif")};this.systemFonts.caption=t,this.systemFonts.icon=t,this.systemFonts.menu=t,this.systemFonts["message-box"]=t,this.systemFonts["small-caption"]=t,this.systemFonts["status-bar"]=t},e.isBuiltIn=function(t){return!!t.match(/^[A-Z_0-9]+$/)},e.readNameAndPrefixes=function(t,e){var n=t.token();if(n.type==kn.EOF)return null;var i={"":!0};if(n.type==kn.O_BRK){do{if(t.consume(),(n=t.token()).type!=kn.IDENT)throw new Error("Prefix name expected");i[n.text]=!0,t.consume(),n=t.token()}while(n.type==kn.COMMA);if(n.type!=kn.C_BRK)throw new Error("']' expected");t.consume(),n=t.token()}if(n.type!=kn.IDENT)throw new Error("Property name expected");if(2==e?"SHORTHANDS"==n.text:"DEFAULTS"==n.text)return t.consume(),null;var r=n.text;if(t.consume(),2!=e){if(t.token().type!=kn.EQ)throw new Error("'=' expected");this.isBuiltIn(r)||(this.prefixes[r]=i)}else if(t.token().type!=kn.COLON)throw new Error("':' expected");return r},e.parseValidators=function(t){for(var e=this,n=function(){var n=e.readNameAndPrefixes(t,1);if(!n)return{v:void 0};for(var i=[],r=[],o="",a=void 0,s=!0,u=function(){if(0==i.length)throw new Error("No values");return 1==i.length?i[0]:e.newGroup(o,i)},l=function(t){if(s)throw new Error("'"+t+"': unexpected");if(o&&o!=t)throw new Error("mixed operators: '"+t+"' and '"+o+"'");o=t,s=!0},c=null;!c;){t.consume();var h=t.token();switch(h.type){case kn.IDENT:if(s||l(" "),e.isBuiltIn(h.text)){var f=e.namedValidators[h.text];if(!f)throw new Error("'"+h.text+"' unexpected");i.push(f.clone())}else{var d={};d[h.text.toLowerCase()]=_e(h.text),i.push(e.primitive(new Dl(0,d,Sl)))}s=!1;break;case kn.INT:var p={};p[""+h.num]=new Ve(h.num),i.push(e.primitive(new Dl(0,p,Sl))),s=!1;break;case kn.BAR:l("|");break;case kn.BAR_BAR:l("||");break;case kn.O_BRK:s||l(" "),r.push({vals:i,op:o,b:"["}),o="",i=[],s=!0;break;case kn.FUNC:s||l(" "),r.push({vals:i,op:o,b:"(",fn:h.text}),o="",i=[],s=!0;break;case kn.C_BRK:a=u();var g=r.pop();if("["!=g.b)throw new Error("']' unexpected");(i=g.vals).push(a),o=g.op,s=!1;break;case kn.C_PAR:a=u();var m=r.pop();if("("!=m.b)throw new Error("')' unexpected");(i=m.vals).push(e.newFunc(m.fn,a)),o=m.op,s=!1;break;case kn.COLON:if(s)throw new Error("':' unexpected");t.consume(),i.push(e.addReplacement(i.pop(),t.token()));break;case kn.QMARK:if(s)throw new Error("'?' unexpected");i.push(e.addCounts(i.pop(),0,1));break;case kn.STAR:if(s)throw new Error("'*' unexpected");i.push(e.addCounts(i.pop(),0,Number.POSITIVE_INFINITY));break;case kn.PLUS:if(s)throw new Error("'+' unexpected");i.push(e.addCounts(i.pop(),1,Number.POSITIVE_INFINITY));break;case kn.O_BRC:if(t.consume(),(h=t.token()).type!=kn.INT)throw new Error("<int> expected");var v=h.num,E=v;if(t.consume(),(h=t.token()).type==kn.COMMA){if(t.consume(),(h=t.token()).type!=kn.INT)throw new Error("<int> expected");E=h.num,t.consume(),h=t.token()}if(h.type!=kn.C_BRC)throw new Error("'}' expected");i.push(e.addCounts(i.pop(),v,E));break;case kn.SEMICOL:if(c=u(),r.length>0)throw new Error("unclosed '"+r.pop().b+"'");break;default:throw new Error("unexpected token")}}t.consume(),e.isBuiltIn(n)?e.namedValidators[n]=c:e.validators[n]=c.isSimple()?c.nodes[0].validator:new Al(c)};;){var i=n();if("object"==typeof i)return i.v}},e.parseDefaults=function(t){for(;;){var e=this.readNameAndPrefixes(t,2);if(!e)return;for(var n=[];;){t.consume();var i=t.token();if(i.type==kn.SEMICOL){t.consume();break}switch(i.type){case kn.IDENT:n.push(_e(i.text));break;case kn.NUM:n.push(new Ue(i.num));break;case kn.INT:n.push(new Ve(i.num));break;case kn.NUMERIC:n.push(new Me(i.num,i.text));break;default:throw new Error("unexpected token")}}this.defaultValues[e]=n.length>1?new We(n):n[0]}},e.parseShorthands=function(t){for(;;){var e=this.readNameAndPrefixes(t,3);if(!e)return;var n=t.nthToken(1),i=void 0;n.type==kn.IDENT&&_l[n.text]?(i=new _l[n.text],t.consume()):i=new Ll,i.setOwner(this);for(var r=!1,o=[],a=!1,s=[],u=[];!r;)switch(t.consume(),(n=t.token()).type){case kn.IDENT:if(this.validators[n.text])o.push(i.syntaxNodeForProperty(n.text)),u.push(n.text);else{if(!(this.shorthands[n.text]instanceof Bl))throw new Error("'"+n.text+"' is neither a simple property nor an inset shorthand");var l=this.shorthands[n.text];o.push(l.createSyntaxNode()),u.push.apply(u,l.propList)}break;case kn.SLASH:if(o.length>0||a)throw new Error("unexpected slash");a=!0;break;case kn.O_BRK:s.push({slash:a,syntax:o}),o=[],a=!1;break;case kn.C_BRK:var c=new Rl(o,a),h=s.pop();a=h.slash,(o=h.syntax).push(c);break;case kn.SEMICOL:r=!0,t.consume();break;default:throw new Error("unexpected token")}i.init(o,u),this.shorthands[e]=i}},e.parse=function(t){var e=new yi(t,null);this.parseValidators(e),this.parseDefaults(e),this.parseShorthands(e),this.backgroundProps=this.makePropSet(["background"]),this.layoutProps=this.makePropSet(["margin","border","padding","columns","column-gap","column-rule","column-fill"])},e.makePropSet=function(t){for(var e,n={},i=_(t);!(e=i()).done;)for(var r,o=e.value,a=this.shorthands[o],s=_(a?a.propList:[o]);!(r=s()).done;){var u=r.value,l=this.defaultValues[u];l?n[u]=l:f.warn("Unknown property in makePropSet:",u)}return n},e.validatePropertyAndHandleShorthand=function(t,e,n,i){var r="",o=t,a=(t=t.toLowerCase()).match(/^-([a-z]+)-([-a-z0-9]+)$/);a&&(r=a[1],t=a[2]);var s=this.prefixes[t];if(s&&s[r]){var u=this.validators[t];if(u){var l=e===Ye.inherit||e.isExpr()?e:e.visit(u);l?i.simpleProperty(t,l,n):i.invalidPropertyValue(o,e)}else{var c=this.shorthands[t].clone();e===Ye.inherit?c.propagateInherit(n,i):(e.visit(c),c.finish(n,i)||i.invalidPropertyValue(o,e))}}else i.unknownProperty(o,e)},t}();function Ul(){var t=new Ml;return t.initBuiltInValidators(),t.parse(Hi),t}var Vl={"font-style":Ye.normal,"font-variant":Ye.normal,"font-weight":Ye.normal},zl="OTTO"+(new Date).valueOf(),Hl=1;function Gl(t,e){var n={};for(var i in t)n[i]=_o(t,i).evaluate(e,i);return function(t){for(var e in Vl)t[e]||(t[e]=Vl[e])}(n),n}var Wl=function(){function t(t){this.properties=t,this.blobURLs=[],this.blobs=[],this.fontTraitKey=function(t){var e=new rt;for(var n in Vl)e.append(" "),e.append(t[n].toString());return e.toString()}(this.properties),this.src=this.properties.src?this.properties.src.toString():null;var e=this.properties["font-family"];this.family=e?e.stringValue():null}var e=t.prototype;return e.traitsEqual=function(t){return this.fontTraitKey==t.fontTraitKey},e.makeAtRule=function(t,e){var n=new rt;for(var i in n.append("@font-face {\n  font-family: "),n.append(this.family),n.append(";\n  "),Vl)n.append(i),n.append(": "),this.properties[i].appendTo(n,!0),n.append(";\n  ");if(e){n.append('src: url("');var r=(window.URL||window.webkitURL).createObjectURL(e);n.append(r),this.blobURLs.push(r),this.blobs.push(e),n.append('")')}else n.append("src: "),n.append(t);return n.append(";\n}\n"),n.toString()},t}(),Xl=function(){function t(t){this.deobfuscator=t,this.familyMap={}}var e=t.prototype;return e.registerFamily=function(t,e){var n=t.family,i=this.familyMap[n],r=e.family;if(i){if(i!=r)throw new Error("E_FONT_FAMILY_INCONSISTENT "+t.family)}else this.familyMap[n]=r},e.filterFontFamily=function(t){if(t instanceof Xe){for(var e,n=[],i=_(t.values);!(e=i()).done;){var r=e.value,o=this.familyMap[r.stringValue()];o&&n.push(_e(o)),n.push(r)}return new Xe(n)}var a=this.familyMap[t.stringValue()];return a?new Xe([_e(a),t]):t},t}(),jl=function(){function t(t,e,n){this.head=t,this.body=e,this.srcURLMap={},this.familyCounter=0,this.familyPrefix=n||"Fnt_"}var e=t.prototype;return e.getViewFontFamily=function(t,e){var n=t.family,i=e.familyMap[n];return i||(i=this.familyPrefix+ ++this.familyCounter,e.familyMap[n]=i,i)},e.initFont=function(t,e,n){var i=this,r=Ni("initFont"),o=t.src,a={};for(var s in Vl)a[s]=t.properties[s];var u=this.getViewFontFamily(t,n);a["font-family"]=_e(u);var l=new Wl(a),c=this.body.ownerDocument.createElement("span");c.textContent="M";var h=(new Date).valueOf()+1e3,d=this.head.ownerDocument.createElement("style"),p=zl+Hl++;d.textContent=l.makeAtRule("",Ki([p])),this.head.appendChild(d);var g=this.body.ownerDocument.createElement("span");for(var m in g.style.width="0",g.style.height="0",g.style.overflow="hidden",g.appendChild(c),this.body.appendChild(g),c.style.visibility="hidden",c.style.fontFamily=u,Vl)et(c,m,a[m].toString());var v=c.getBoundingClientRect(),E=v.right-v.left,b=v.bottom-v.top;d.textContent=l.makeAtRule(o,e),f.info("Starting to load font:",o);var C=!1;return r.loop((function(){var t=c.getBoundingClientRect();return E!=t.right-t.left||b!=t.bottom-t.top?(C=!0,Ti(!1)):(new Date).valueOf()>h?Ti(!1):r.sleep(10)})).then((function(){C?f.info("Loaded font:",o):f.warn("Failed to load font:",o),i.body.removeChild(g),r.finish(l)})),r.result()},e.loadFont=function(t,e){var n=this,i=t.src,r=this.srcURLMap[i];return r?r.piggyback((function(n){var r=n;r.traitsEqual(t)?(e.registerFamily(t,r),f.warn("Found already-loaded font:",i)):f.warn("E_FONT_FACE_INCOMPATIBLE",t.src)})):(r=new Bi((function(){var r=Ni("loadFont"),o=e.deobfuscator?e.deobfuscator(i):null;return o?ji(i,Ui.BLOB).then((function(i){i.responseBlob?o(i.responseBlob).then((function(i){n.initFont(t,i,e).thenFinish(r)})):r.finish(null)})):n.initFont(t,null,e).thenFinish(r),r.result()}),"loadFont "+i),this.srcURLMap[i]=r,r.start()),r},e.findOrLoadFonts=function(t,e){for(var n,i=[],r=_(t);!(n=r()).done;){var o=n.value;o.src&&o.family?i.push(this.loadFont(o,e)):f.warn("E_FONT_FACE_INVALID")}return _i(i)},t}(),Kl=1,$l=function(){function t(t,e,n,i,r){this.name=e,this.pseudoName=n,this.classes=i,this.parent=r,this.specified={},this.children=[],this.pageMaster=null,this.index=0,this._scope=t,this.key="p"+Kl++,r&&(this.index=r.children.length,r.children.push(this))}var e=t.prototype;return e.createInstance=function(t){throw new Error("E_UNEXPECTED_CALL")},e.clone=function(t){throw new Error("E_UNEXPECTED_CALL")},e.copySpecified=function(t){var e=this.specified,n=t.specified;for(var i in e)Object.prototype.hasOwnProperty.call(e,i)&&(n[i]=e[i])},e.cloneChildren=function(t){for(var e=0;e<this.children.length;e++)this.children[e].clone({parent:t})},x(t,[{key:"scope",get:function(){return this._scope}}]),t}(),ql=function(t){function e(e){var n;return(n=t.call(this,e,null,null,[],null)||this).specified.width=new Fo(Qe,0),n.specified.height=new Fo(Je,0),n}return I(e,t),e}($l),Yl=function(t){function e(e,n){var i;(i=t.call(this,e,(function(t,e){var n=t.match(/^([^.]+)\.([^.]+)$/);if(n){var i=r.pageMaster.keyMap[n[1]];if(i){var o=this.lookupInstance(i);if(o)return e?o.resolveFunc(n[2]):o.resolveName(n[2])}}return null}))||this).pageMaster=n;var r=L(i);return i}return I(e,t),e}(Vt),Zl=function(t){function e(e,n,i,r,o,a,s){var u;return(u=t.call(this,e,n,i,r,o)||this).condition=a,u.specificity=s,u.keyMap={},e instanceof Yl||(u._scope=new Yl(e,L(u))),u.pageMaster=L(u),u.specified.width=new Fo(Qe,0),u.specified.height=new Fo(Je,0),u.specified["wrap-flow"]=new Fo(Ye.auto,0),u.specified.position=new Fo(Ye.relative,0),u.specified.overflow=new Fo(Ye.visible,0),u}I(e,t);var n=e.prototype;return n.createInstance=function(t){return new dc(t,this)},n.clone=function(t){var n=new e(this.scope,this.name,t.pseudoName||this.pseudoName,this.classes,this.parent,this.condition,this.specificity);return this.copySpecified(n),this.cloneChildren(n),n},n.resetScope=function(){this.scope.pageMaster=this},e}($l),Ql=function(t){function e(e,n,i,r,o){var a;return(a=t.call(this,e,n,i,r,o)||this).pageMaster=o.pageMaster,n&&(a.pageMaster.keyMap[n]=a.key),a.specified["wrap-flow"]=new Fo(Ye.auto,0),a}I(e,t);var n=e.prototype;return n.createInstance=function(t){return new pc(t,this)},n.clone=function(t){var n=new e(t.parent.scope,this.name,this.pseudoName,this.classes,t.parent);return this.copySpecified(n),this.cloneChildren(n),n},e}($l),Jl=function(t){function e(e,n,i,r,o){var a;return(a=t.call(this,e,n,i,r,o)||this).pageMaster=o.pageMaster,n&&(a.pageMaster.keyMap[n]=a.key),a}I(e,t);var n=e.prototype;return n.createInstance=function(t){return new gc(t,this)},n.clone=function(t){var n=new e(t.parent.scope,this.name,this.pseudoName,this.classes,t.parent);return this.copySpecified(n),this.cloneChildren(n),n},e}($l);function tc(t,e,n){return e&&e!==Ye.auto?e.toExpr(t,n):null}function ec(t,e,n){return e&&e!==Ye.auto?e.toExpr(t,n):t.zero}function nc(t,e,n){return e?e===Ye.auto?null:e.toExpr(t,n):t.zero}function ic(t,e,n,i){return e&&n!==Ye.none?e.toExpr(t,i):t.zero}function rc(t,e,n){return e?e===Ye._true?t._true:e===Ye._false?t._false:e.toExpr(t,t.zero):n}var oc=function(){function t(t,e){this.parentInstance=t,this.pageBox=e,this.cascaded={},this.style={},this.autoWidth=null,this.autoHeight=null,this.children=[],this.isAutoWidth=!1,this.isAutoHeight=!1,this.isTopDependentOnAutoHeight=!1,this.isRightDependentOnAutoWidth=!1,this.calculatedWidth=0,this.calculatedHeight=0,this.pageMasterInstance=null,this.namedValues={},this.namedFuncs={},this.vertical=!1,this.rtl=!1,this.suppressEmptyBoxGeneration=!1,t&&t.children.push(this)}var e=t.prototype;return e.reset=function(){this.calculatedWidth=0,this.calculatedHeight=0},e.addNamedValues=function(t,e){var n=this.resolveName(t),i=this.resolveName(e);if(!n||!i)throw new Error("E_INTERNAL");return Ne(this.pageBox.scope,n,i)},e.resolveName=function(t){var e=this.namedValues[t];if(e)return e;var n=this.style[t];switch(n&&(e=n.toExpr(this.pageBox.scope,this.pageBox.scope.zero)),t){case"margin-left-edge":e=this.resolveName("left");break;case"margin-top-edge":e=this.resolveName("top");break;case"margin-right-edge":e=this.addNamedValues("border-right-edge","margin-right");break;case"margin-bottom-edge":e=this.addNamedValues("border-bottom-edge","margin-bottom");break;case"border-left-edge":e=this.addNamedValues("margin-left-edge","margin-left");break;case"border-top-edge":e=this.addNamedValues("margin-top-edge","margin-top");break;case"border-right-edge":e=this.addNamedValues("padding-right-edge","border-right-width");break;case"border-bottom-edge":e=this.addNamedValues("padding-bottom-edge","border-bottom-width");break;case"padding-left-edge":e=this.addNamedValues("border-left-edge","border-left-width");break;case"padding-top-edge":e=this.addNamedValues("border-top-edge","border-top-width");break;case"padding-right-edge":e=this.addNamedValues("right-edge","padding-right");break;case"padding-bottom-edge":e=this.addNamedValues("bottom-edge","padding-bottom");break;case"left-edge":e=this.addNamedValues("padding-left-edge","padding-left");break;case"top-edge":e=this.addNamedValues("padding-top-edge","padding-top");break;case"right-edge":e=this.addNamedValues("left-edge","width");break;case"bottom-edge":e=this.addNamedValues("top-edge","height")}if(!e){var i;if("extent"==t)i=this.vertical?"width":"height";else if("measure"==t)i=this.vertical?"height":"width";else{var r=this.vertical?To:Ao;for(var o in i=t,r)i=i.replace(o,r[o])}i!=t&&(e=this.resolveName(i))}return e&&(this.namedValues[t]=e),e},e.resolveFunc=function(t){var e=this.namedFuncs[t];if(e)return e;switch(t){case"columns":var n=this.pageBox.scope,i=new De(n,0),r=this.resolveName("column-count"),o=this.resolveName("column-width"),a=this.resolveName("column-gap");e=Te(n,Ae(n,new be(n,"min",[i,r]),Ne(n,o,a)),a)}return e&&(this.namedFuncs[t]=e),e},e.initEnabled=function(){var t=this.pageBox.scope,e=this.style,n=rc(t,e.enabled,t._true),i=tc(t,e.page,t.zero);if(i){var r=new me(t,"page-number");n=Se(t,n,new ue(t,i,r))}var o=tc(t,e["min-page-width"],t.zero);o&&(n=Se(t,n,new se(t,new me(t,"page-width"),o)));var a=tc(t,e["min-page-height"],t.zero);a&&(n=Se(t,n,new se(t,new me(t,"page-height"),a))),n=this.boxSpecificEnabled(n),e.enabled=new Ke(n)},e.boxSpecificEnabled=function(t){return t},e.initHorizontal=function(){var t=this.pageBox.scope,e=this.style,n=this.parentInstance?this.parentInstance.style.width.toExpr(t,null):null,i=tc(t,e.left,n),r=tc(t,e["margin-left"],n),o=ic(t,e["border-left-width"],e["border-left-style"],n),a=ec(t,e["padding-left"],n),s=tc(t,e.width,n),u=tc(t,e["max-width"],n),l=ec(t,e["padding-right"],n),c=ic(t,e["border-right-width"],e["border-right-style"],n),h=tc(t,e["margin-right"],n),f=tc(t,e.right,n),d=Ne(t,o,a),p=Ne(t,o,l);if(i&&f&&s){var g=Te(t,n,Ne(t,s,Ne(t,Ne(t,i,d),p)));r?h?f=Te(t,g,h):h=Te(t,g,Ne(t,f,r)):(g=Te(t,g,f),h?r=Te(t,g,h):h=r=Ae(t,g,new ye(t,.5)))}else{r||(r=t.zero),h||(h=t.zero),i||f||s||(i=t.zero),i||s?i||f?s||f||(s=this.autoWidth,this.isAutoWidth=!0):i=t.zero:(s=this.autoWidth,this.isAutoWidth=!0);var m=Te(t,n,Ne(t,Ne(t,r,d),Ne(t,h,p)));this.isAutoWidth&&(u||(u=Te(t,m,i||f)),this.vertical||!tc(t,e["column-width"],null)&&!tc(t,e["column-count"],null)||(s=u,this.isAutoWidth=!1)),i?s?f||(f=Te(t,m,Ne(t,i,s))):s=Te(t,m,Ne(t,i,f)):i=Te(t,m,Ne(t,f,s))}var v=ec(t,e["snap-width"]||(this.parentInstance?this.parentInstance.style["snap-width"]:null),n);e.left=new Ke(i),e["margin-left"]=new Ke(r),e["border-left-width"]=new Ke(o),e["padding-left"]=new Ke(a),e.width=new Ke(s),e["max-width"]=new Ke(u||s),e["padding-right"]=new Ke(l),e["border-right-width"]=new Ke(c),e["margin-right"]=new Ke(h),e.right=new Ke(f),e["snap-width"]=new Ke(v)},e.initVertical=function(){var t=this.pageBox.scope,e=this.style,n=this.parentInstance?this.parentInstance.style.width.toExpr(t,null):null,i=this.parentInstance?this.parentInstance.style.height.toExpr(t,null):null,r=tc(t,e.top,i),o=tc(t,e["margin-top"],n),a=ic(t,e["border-top-width"],e["border-top-style"],n),s=ec(t,e["padding-top"],n),u=tc(t,e.height,i),l=tc(t,e["max-height"],i),c=ec(t,e["padding-bottom"],n),h=ic(t,e["border-bottom-width"],e["border-bottom-style"],n),f=tc(t,e["margin-bottom"],n),d=tc(t,e.bottom,i),p=Ne(t,a,s),g=Ne(t,h,c);if(r&&d&&u){var m=Te(t,i,Ne(t,u,Ne(t,Ne(t,r,p),g)));o?f?d=Te(t,m,o):f=Te(t,m,Ne(t,d,o)):(m=Te(t,m,d),f?o=Te(t,m,f):f=o=Ae(t,m,new ye(t,.5)))}else{o||(o=t.zero),f||(f=t.zero),r||d||u||(r=t.zero),r||u?r||d?u||d||(u=this.autoHeight,this.isAutoHeight=!0):r=t.zero:(u=this.autoHeight,this.isAutoHeight=!0);var v=Te(t,i,Ne(t,Ne(t,o,p),Ne(t,f,g)));this.isAutoHeight&&(l||(l=Te(t,v,r||d)),this.vertical&&(tc(t,e["column-width"],null)||tc(t,e["column-count"],null))&&(u=l,this.isAutoHeight=!1)),r?u?d||(d=Te(t,v,Ne(t,r,u))):u=Te(t,v,Ne(t,d,r)):r=Te(t,v,Ne(t,d,u))}var E=ec(t,e["snap-height"]||(this.parentInstance?this.parentInstance.style["snap-height"]:null),n);e.top=new Ke(r),e["margin-top"]=new Ke(o),e["border-top-width"]=new Ke(a),e["padding-top"]=new Ke(s),e.height=new Ke(u),e["max-height"]=new Ke(l||u),e["padding-bottom"]=new Ke(c),e["border-bottom-width"]=new Ke(h),e["margin-bottom"]=new Ke(f),e.bottom=new Ke(d),e["snap-height"]=new Ke(E)},e.initColumns=function(){var t=this.pageBox.scope,e=this.style,n=tc(t,e[this.vertical?"height":"width"],null),i=tc(t,e["column-width"],n),r=tc(t,e["column-count"],null),o=function(t,e,n){return e&&e!==Ye.normal?e.toExpr(t,null):null}(t,e["column-gap"]);o||(o=new ge(t,1,"em")),i&&!r&&(r=new be(t,"floor",[xe(t,Ne(t,n,o),Ne(t,i,o))]),r=new be(t,"max",[t.one,r])),r||(r=t.one),i=Te(t,xe(t,Ne(t,n,o),r),o),e["column-width"]=new Ke(i),e["column-count"]=new Ke(r),e["column-gap"]=new Ke(o)},e.depends=function(t,e,n){return this.style[t].toExpr(this.pageBox.scope,null).depend(e,n)},e.init=function(t){var e=this;t.registerInstance(this.pageBox.key,this);var n=this.pageBox.scope,i=this.style,r=this.parentInstance?this.parentInstance.getActiveRegions(t):null,o=is(this.cascaded,t,r,!1);this.vertical=es(o,t,!!this.parentInstance&&this.parentInstance.vertical),this.rtl=ns(o,t,!!this.parentInstance&&this.parentInstance.rtl),as(o,i,this.vertical,this.rtl,(function(t,e){return e.value})),this.autoWidth=new Ee(n,(function(){return e.calculatedWidth}),"autoWidth"),this.autoHeight=new Ee(n,(function(){return e.calculatedHeight}),"autoHeight"),this.initHorizontal(),this.initVertical(),this.initColumns(),this.initEnabled()},e.getProp=function(t,e){var n=this.style[e];return n&&(n=Sr(t,n,e)),n},e.getPropAsNumber=function(t,e){var n=this.style[e];return n&&(n=Sr(t,n,e)),$e(n,t)},e.getSpecial=function(t,e){var n=Ho(this.cascaded,e);if(n){for(var i=[],r=0;r<n.length;r++){var o=n[r].evaluate(t,"");o&&o!==Oe&&i.push(o)}if(i.length)return i}return null},e.getActiveRegions=function(t){var e=this.getSpecial(t,"region-id");if(e){for(var n=[],i=0;i<e.length;i++)n[i]=e[i].toString();return n}return null},e.propagateProperty=function(t,e,n,i){this.propagatePropertyToElement(t,e.element,n,i)},e.propagatePropertyToElement=function(t,e,n,i){var r=this.getProp(t,n);r&&(r.isNumeric()&&Gt(r.unit)&&(r=qe(r,t)),"font-family"===n&&(r=i.filterFontFamily(r)),et(e,n,r.toString()))},e.propagateDelayedProperty=function(t,e,n,i){var r=this.getProp(t,n);r&&i.push(new Xr(e.element,n,r))},e.assignLeftPosition=function(t,e){var n=this.getPropAsNumber(t,"left"),i=this.getPropAsNumber(t,"margin-left"),r=this.getPropAsNumber(t,"padding-left"),o=this.getPropAsNumber(t,"border-left-width"),a=this.getPropAsNumber(t,"width");e.setHorizontalPosition(n,a),et(e.element,"margin-left",i+"px"),et(e.element,"padding-left",r+"px"),et(e.element,"border-left-width",o+"px"),e.marginLeft=i,e.borderLeft=o,e.paddingLeft=r},e.assignRightPosition=function(t,e){var n=this.getPropAsNumber(t,"right"),i=this.getPropAsNumber(t,"snap-height"),r=this.getPropAsNumber(t,"margin-right"),o=this.getPropAsNumber(t,"padding-right"),a=this.getPropAsNumber(t,"border-right-width");if(et(e.element,"margin-right",r+"px"),et(e.element,"padding-right",o+"px"),et(e.element,"border-right-width",a+"px"),e.marginRight=r,e.borderRight=a,this.vertical&&i>0){var s=n+e.getInsetRight(),u=s-Math.floor(s/i)*i;u>0&&(e.snapOffsetX=i-u,o+=e.snapOffsetX)}e.paddingRight=o,e.snapWidth=i},e.assignTopPosition=function(t,e){var n=this.getPropAsNumber(t,"snap-height"),i=this.getPropAsNumber(t,"top"),r=this.getPropAsNumber(t,"margin-top"),o=this.getPropAsNumber(t,"padding-top"),a=this.getPropAsNumber(t,"border-top-width");if(e.top=i,e.marginTop=r,e.borderTop=a,e.snapHeight=n,!this.vertical&&n>0){var s=i+e.getInsetTop(),u=s-Math.floor(s/n)*n;u>0&&(e.snapOffsetY=n-u,o+=e.snapOffsetY)}e.paddingTop=o,et(e.element,"top",i+"px"),et(e.element,"margin-top",r+"px"),et(e.element,"padding-top",o+"px"),et(e.element,"border-top-width",a+"px")},e.assignBottomPosition=function(t,e){var n=this.getPropAsNumber(t,"margin-bottom"),i=this.getPropAsNumber(t,"padding-bottom"),r=this.getPropAsNumber(t,"border-bottom-width"),o=this.getPropAsNumber(t,"height")-e.snapOffsetY;et(e.element,"height",o+"px"),et(e.element,"margin-bottom",n+"px"),et(e.element,"padding-bottom",i+"px"),et(e.element,"border-bottom-width",r+"px"),e.height=o-e.snapOffsetY,e.marginBottom=n,e.borderBottom=r,e.paddingBottom=i},e.assignBeforePosition=function(t,e){this.vertical?this.assignRightPosition(t,e):this.assignTopPosition(t,e)},e.assignAfterPosition=function(t,e){this.vertical?this.assignLeftPosition(t,e):this.assignBottomPosition(t,e)},e.assignStartEndPosition=function(t,e){this.vertical?(this.assignTopPosition(t,e),this.assignBottomPosition(t,e)):(this.assignRightPosition(t,e),this.assignLeftPosition(t,e))},e.sizeWithMaxHeight=function(t,e){et(e.element,"border-top-width","0px");var n=this.getPropAsNumber(t,"max-height");this.isTopDependentOnAutoHeight?e.setVerticalPosition(0,n):(this.assignTopPosition(t,e),e.height=n-=e.snapOffsetY,et(e.element,"height",n+"px"))},e.sizeWithMaxWidth=function(t,e){et(e.element,"border-left-width","0px");var n=this.getPropAsNumber(t,"max-width");if(this.isRightDependentOnAutoWidth)e.setHorizontalPosition(0,n);else{this.assignRightPosition(t,e),e.width=n-=e.snapOffsetX;var i=this.getPropAsNumber(t,"right");et(e.element,"right",i+"px"),et(e.element,"width",n+"px")}},e.prepareContainer=function(t,e,n,i,r){this.parentInstance&&this.vertical==this.parentInstance.vertical||et(e.element,"writing-mode",this.vertical?"vertical-rl":"horizontal-tb"),(this.vertical?this.isAutoWidth:this.isAutoHeight)?this.vertical?this.sizeWithMaxWidth(t,e):this.sizeWithMaxHeight(t,e):(this.assignBeforePosition(t,e),this.assignAfterPosition(t,e)),(this.vertical?this.isAutoHeight:this.isAutoWidth)?this.vertical?this.sizeWithMaxHeight(t,e):this.sizeWithMaxWidth(t,e):this.assignStartEndPosition(t,e);for(var o=0;o<ac.length;o++)this.propagateProperty(t,e,ac[o],i)},e.transferContentProps=function(t,e,n,i){for(var r=0;r<uc.length;r++)this.propagateProperty(t,e,uc[r],i)},e.transferSinglUriContentProps=function(t,e,n){for(var i=0;i<lc.length;i++)this.propagatePropertyToElement(t,e,lc[i],n)},e.finishContainer=function(t,e,n,i,r,o,a){this.vertical?this.calculatedWidth=e.computedBlockSize+e.snapOffsetX:this.calculatedHeight=e.computedBlockSize+e.snapOffsetY;var s=(this.vertical||!i)&&this.isAutoHeight,u=(!this.vertical||!i)&&this.isAutoWidth,l=null;if((u||s)&&(u&&et(e.element,"width","auto"),s&&et(e.element,"height","auto"),l=o.getElementClientRect(i?i.element:e.element),u&&(this.calculatedWidth=Math.ceil(l.right-l.left-e.paddingLeft-e.borderLeft-e.paddingRight-e.borderRight),this.vertical&&(this.calculatedWidth+=e.snapOffsetX)),s&&(this.calculatedHeight=l.bottom-l.top-e.paddingTop-e.borderTop-e.paddingBottom-e.borderBottom,this.vertical||(this.calculatedHeight+=e.snapOffsetY))),(this.vertical?this.isAutoHeight:this.isAutoWidth)&&this.assignStartEndPosition(t,e),(this.vertical?this.isAutoWidth:this.isAutoHeight)&&((this.vertical?this.isRightDependentOnAutoWidth:this.isTopDependentOnAutoHeight)&&this.assignBeforePosition(t,e),this.assignAfterPosition(t,e)),r>1){var c=this.getPropAsNumber(t,"column-rule-width"),h=this.getProp(t,"column-rule-style"),f=this.getProp(t,"column-rule-color");if(c>0&&h&&h!=Ye.none&&f!=Ye.transparent)for(var d=this.getPropAsNumber(t,"column-gap"),p=this.vertical?e.height:e.width,g=this.vertical?"border-top":"border-left",m=1;m<r;m++){var v=(p+d)*m/r-d/2+e.paddingLeft-c/2,E=e.height+e.paddingTop+e.paddingBottom,b=e.element.ownerDocument.createElement("div");et(b,"position","absolute"),et(b,this.vertical?"left":"top","0px"),et(b,this.vertical?"top":"left",v+"px"),et(b,this.vertical?"height":"width","0px"),et(b,this.vertical?"width":"height",E+"px"),et(b,g,c+"px "+h.toString()+(f?" "+f.toString():"")),e.element.insertBefore(b,e.element.firstChild)}}for(var C=0;C<sc.length;C++)this.propagateProperty(t,e,sc[C],a);for(var y=0;y<cc.length;y++)this.propagateDelayedProperty(t,e,cc[y],n.delayedItems)},e.applyCascadeAndInit=function(t,e){var n=this.cascaded,i=this.pageBox.specified;for(var r in i)Lo(r)&&Mo(n,r,_o(i,r));if(this.pageBox.pseudoName==hc)for(var o in e)(o.match(/^background-/)||"writing-mode"==o)&&(n[o]=e[o]);if("layout-host"==this.pageBox.pseudoName)for(var a in e)a.match(/^background-/)||"writing-mode"==a||(n[a]=e[a]);t.pushRule(this.pageBox.classes,null,n),n.content&&(n.content=n.content.filterValue(new ka(t,null,t.counterResolver))),this.init(t.context);for(var s,u=_(this.pageBox.children);!(s=u()).done;)s.value.createInstance(this).applyCascadeAndInit(t,e);t.popRule()},e.resolveAutoSizing=function(t){this.isAutoWidth&&(this.isRightDependentOnAutoWidth=this.depends("right",this.autoWidth,t)||this.depends("margin-right",this.autoWidth,t)||this.depends("border-right-width",this.autoWidth,t)||this.depends("padding-right",this.autoWidth,t)),this.isAutoHeight&&(this.isTopDependentOnAutoHeight=this.depends("top",this.autoHeight,t)||this.depends("margin-top",this.autoHeight,t)||this.depends("border-top-width",this.autoHeight,t)||this.depends("padding-top",this.autoHeight,t));for(var e,n=_(this.children);!(e=n()).done;)e.value.resolveAutoSizing(t)},t}(),ac=["border-left-style","border-right-style","border-top-style","border-bottom-style","border-left-color","border-right-color","border-top-color","border-bottom-color","outline-style","outline-color","outline-width","overflow","visibility"],sc=["border-top-left-radius","border-top-right-radius","border-bottom-right-radius","border-bottom-left-radius","border-image-source","border-image-slice","border-image-width","border-image-outset","border-image-repeat","background-attachment","background-color","background-image","background-repeat","background-position","background-clip","background-origin","background-size","opacity","z-index","background-blend-mode","isolation","mix-blend-mode","filter"],uc=["color","font-family","font-size","font-style","font-weight","font-variant","line-height","letter-spacing","text-align","text-decoration","text-indent","text-transform","white-space","word-spacing","font-feature-settings","font-kerning","font-size-adjust","font-variant-east-asian","font-stretch","text-decoration-color","text-decoration-line","text-decoration-skip","text-decoration-style","text-emphasis","text-emphasis-color","text-emphasis-position","text-emphasis-style","text-shadow","text-underline-position"],lc=["width","height","image-resolution","object-fit","object-position"],cc=["transform","transform-origin"],hc="background-host",fc=function(t){function e(e){return t.call(this,null,e)||this}return I(e,t),e.prototype.applyCascadeAndInit=function(e,n){t.prototype.applyCascadeAndInit.call(this,e,n),this.children.sort((function(t,e){return e.pageBox.specificity-t.pageBox.specificity||t.pageBox.index-e.pageBox.index}))},e}(oc),dc=function(t){function e(e,n){var i;return(i=t.call(this,e,n)||this).pageMasterInstance=L(i),i}I(e,t);var n=e.prototype;return n.boxSpecificEnabled=function(t){var e=this.pageBox.pageMaster;return e.condition&&(t=Se(e.scope,t,e.condition)),t},n.adjustPageLayout=function(t,e,n){},e}(oc),pc=function(t){function e(e,n){var i;return(i=t.call(this,e,n)||this).pageMasterInstance=e.pageMasterInstance,i}return I(e,t),e}(oc),gc=function(t){function e(e,n){var i;return(i=t.call(this,e,n)||this).pageMasterInstance=e.pageMasterInstance,i}I(e,t);var n=e.prototype;return n.processPartitionList=function(t,e,n){var i=null;if(e instanceof Be&&(i=[e]),e instanceof Xe&&(i=e.values),i)for(var r=this.pageBox.scope,o=0;o<i.length;o++)if(i[o]instanceof Be){var a=Mt(i[o].name,"enabled"),s=new me(r,a);n&&(s=new Qt(r,s)),t=Se(r,t,s)}return t},n.boxSpecificEnabled=function(t){var e=this.pageBox.scope,n=this.style,i=rc(e,n.required,e._false)!==e._false;if(i||this.isAutoHeight){var r=function(t,e,n){return e?e.toExpr(t,t.zero):new ye(t,"body")}(e,n["flow-from"]);t=Se(e,t,new be(e,"has-content",[r]))}if(t=this.processPartitionList(t,n["required-partitions"],!1),t=this.processPartitionList(t,n["conflicting-partitions"],!0),i){var o=this.pageMasterInstance.style.enabled,a=o?o.toExpr(e,null):e._true;a=Se(e,a,t),this.pageMasterInstance.style.enabled=new Ke(a)}return t},n.prepareContainer=function(e,n,i,r,o){et(n.element,"overflow","hidden"),t.prototype.prepareContainer.call(this,e,n,i,r,o)},e}(oc),mc=function(t){function e(e,n,i,r){var o;return(o=t.call(this,e,n,!1)||this).target=i,o.validatorSet=r,o}I(e,t);var n=e.prototype;return n.property=function(t,e,n){this.validatorSet.validatePropertyAndHandleShorthand(t,e,n,this)},n.unknownProperty=function(t,e){this.report("E_INVALID_PROPERTY "+t+": "+e.toString())},n.invalidPropertyValue=function(t,e){this.report("E_INVALID_PROPERTY_VALUE "+t+": "+e.toString())},n.simpleProperty=function(t,e,n){this.target.specified[t]=new Fo(e,n?50331648:67108864)},e}(nr),vc=function(t){function e(e,n,i,r){return t.call(this,e,n,i,r)||this}return I(e,t),e}(mc),Ec=function(t){function e(e,n,i,r){var o;return o=t.call(this,e,n,i,r)||this,i.specified.width=new Fo(Ze,0),i.specified.height=new Fo(Ze,0),o}I(e,t);var n=e.prototype;return n.startPartitionRule=function(t,e,n){var i=new Jl(this.scope,t,e,n,this.target),r=new vc(this.scope,this.owner,i,this.validatorSet);this.owner.pushHandler(r)},n.startPartitionGroupRule=function(t,n,i){var r=new Ql(this.scope,t,n,i,this.target),o=new e(this.scope,this.owner,r,this.validatorSet);this.owner.pushHandler(o)},e}(mc),bc=function(t){function e(e,n,i,r){return t.call(this,e,n,i,r)||this}I(e,t);var n=e.prototype;return n.startPartitionRule=function(t,e,n){var i=new Jl(this.scope,t,e,n,this.target),r=new vc(this.scope,this.owner,i,this.validatorSet);this.owner.pushHandler(r)},n.startPartitionGroupRule=function(t,e,n){var i=new Ql(this.scope,t,e,n,this.target),r=new Ec(this.scope,this.owner,i,this.validatorSet);this.owner.pushHandler(r)},e}(mc);function Cc(t){var n=t["writing-mode"],i=t.direction;return i=i&&i.value,(n=n&&n.value)===Ye.vertical_lr||n!==Ye.vertical_rl&&i!==Ye.rtl?e.PageProgression.LTR:e.PageProgression.RTL}var yc,wc,Dc={a5:{width:new Me(148,"mm"),height:new Me(210,"mm")},a4:{width:new Me(210,"mm"),height:new Me(297,"mm")},a3:{width:new Me(297,"mm"),height:new Me(420,"mm")},b5:{width:new Me(176,"mm"),height:new Me(250,"mm")},b4:{width:new Me(250,"mm"),height:new Me(353,"mm")},"jis-b5":{width:new Me(182,"mm"),height:new Me(257,"mm")},"jis-b4":{width:new Me(257,"mm"),height:new Me(364,"mm")},letter:{width:new Me(8.5,"in"),height:new Me(11,"in")},legal:{width:new Me(8.5,"in"),height:new Me(14,"in")},ledger:{width:new Me(11,"in"),height:new Me(17,"in")}},Sc=new Me(.24,"pt"),Nc=new Me(3,"mm"),Tc=new Me(10,"mm"),Ac=new Me(13,"mm");function xc(t){var e={width:Qe,height:Je,bleed:tn,bleedOffset:tn},n=t.size;if(n&&n.value!==Ye.auto){var i,r,o=n.value;if(o.isSpaceList()?(i=o.values[0],r=o.values[1]):(i=o,r=null),i.isNumeric())e.width=i,e.height=r||i;else{var a=i.name&&Dc[i.name.toLowerCase()];a&&(r&&r===Ye.landscape?(e.width=a.height,e.height=a.width):(e.width=a.width,e.height=a.height))}}var s=t.marks;s&&s.value!==Ye.none&&(e.bleedOffset=Ac);var u=t.bleed;return u&&u.value!==Ye.auto?u.value&&u.value.isNumeric()&&(e.bleed=u.value):s&&(s.value.isSpaceList()?s.value.values.some((function(t){return t===Ye.crop})):s.value===Ye.crop)&&(e.bleed=new Me(6,"pt")),e}function Ic(t,e){var n={},i=t.bleed.num*e.queryUnitSize(t.bleed.unit,!1),r=t.bleedOffset.num*e.queryUnitSize(t.bleedOffset.unit,!1),o=i+r,a=t.width;n.pageWidth=a===Qe?e.pref.defaultPaperSize?e.pref.defaultPaperSize.width*e.queryUnitSize("px",!1):(e.pref.spreadView?Math.floor(e.viewportWidth/2)-e.pref.pageBorder:e.viewportWidth)-2*o:a.num*e.queryUnitSize(a.unit,!1);var s=t.height;return n.pageHeight=s===Je?e.pref.defaultPaperSize?e.pref.defaultPaperSize.height*e.queryUnitSize("px",!1):e.viewportHeight-2*o:s.num*e.queryUnitSize(s.unit,!1),n.bleed=i,n.bleedOffset=r,n.cropOffset=o,n}function Fc(t,e,n){var i=t.createElementNS(W.SVG,"svg");return i.setAttribute("width",e),i.setAttribute("height",n),i.style.position="absolute",i}function Pc(t,e,n){var i=t.createElementNS(W.SVG,n=n||"polyline");return i.setAttribute("stroke","black"),i.setAttribute("stroke-width",e),i.setAttribute("fill","none"),i}!function(t){t.TOP_LEFT="top left",t.TOP_RIGHT="top right",t.BOTTOM_LEFT="bottom left",t.BOTTOM_RIGHT="bottom right"}(yc||(yc={})),function(t){t.TOP="top",t.BOTTOM="bottom",t.LEFT="left",t.RIGHT="right"}(wc||(wc={}));var Oc,Rc,kc=(Oc={width:!0,height:!0,"block-size":!0,"inline-size":!0,margin:!0,padding:!0,border:!0,outline:!0,"outline-width":!0,"outline-style":!0,"outline-color":!0},["left","right","top","bottom","before","after","start","end","block-start","block-end","inline-start","inline-end"].forEach((function(t){Oc["margin-"+t]=!0,Oc["padding-"+t]=!0,Oc["border-"+t+"-width"]=!0,Oc["border-"+t+"-style"]=!0,Oc["border-"+t+"-color"]=!0})),Oc);!function(t){t.START="start",t.CENTER="center",t.END="end"}(Rc||(Rc={}));var Lc,Bc={"top-left-corner":{order:1,isInTopRow:!0,isInBottomRow:!1,isInLeftColumn:!0,isInRightColumn:!0,positionAlongVariableDimension:null},"top-left":{order:2,isInTopRow:!0,isInBottomRow:!1,isInLeftColumn:!1,isInRightColumn:!1,positionAlongVariableDimension:Rc.START},"top-center":{order:3,isInTopRow:!0,isInBottomRow:!1,isInLeftColumn:!1,isInRightColumn:!1,positionAlongVariableDimension:Rc.CENTER},"top-right":{order:4,isInTopRow:!0,isInBottomRow:!1,isInLeftColumn:!1,isInRightColumn:!1,positionAlongVariableDimension:Rc.END},"top-right-corner":{order:5,isInTopRow:!0,isInBottomRow:!1,isInLeftColumn:!1,isInRightColumn:!0,positionAlongVariableDimension:null},"right-top":{order:6,isInTopRow:!1,isInBottomRow:!1,isInLeftColumn:!1,isInRightColumn:!0,positionAlongVariableDimension:Rc.START},"right-middle":{order:7,isInTopRow:!1,isInBottomRow:!1,isInLeftColumn:!1,isInRightColumn:!0,positionAlongVariableDimension:Rc.CENTER},"right-bottom":{order:8,isInTopRow:!1,isInBottomRow:!1,isInLeftColumn:!1,isInRightColumn:!0,positionAlongVariableDimension:Rc.END},"bottom-right-corner":{order:9,isInTopRow:!1,isInBottomRow:!0,isInLeftColumn:!1,isInRightColumn:!0,positionAlongVariableDimension:null},"bottom-right":{order:10,isInTopRow:!1,isInBottomRow:!0,isInLeftColumn:!1,isInRightColumn:!1,positionAlongVariableDimension:Rc.END},"bottom-center":{order:11,isInTopRow:!1,isInBottomRow:!0,isInLeftColumn:!1,isInRightColumn:!1,positionAlongVariableDimension:Rc.CENTER},"bottom-left":{order:12,isInTopRow:!1,isInBottomRow:!0,isInLeftColumn:!1,isInRightColumn:!1,positionAlongVariableDimension:Rc.START},"bottom-left-corner":{order:13,isInTopRow:!1,isInBottomRow:!0,isInLeftColumn:!0,isInRightColumn:!1,positionAlongVariableDimension:null},"left-bottom":{order:14,isInTopRow:!1,isInBottomRow:!1,isInLeftColumn:!0,isInRightColumn:!1,positionAlongVariableDimension:Rc.END},"left-middle":{order:15,isInTopRow:!1,isInBottomRow:!1,isInLeftColumn:!0,isInRightColumn:!1,positionAlongVariableDimension:Rc.CENTER},"left-top":{order:16,isInTopRow:!1,isInBottomRow:!1,isInLeftColumn:!0,isInRightColumn:!1,positionAlongVariableDimension:Rc.START}},_c=(Lc=Bc,Object.keys(Lc).sort((function(t,e){return Lc[t].order-Lc[e].order}))),Mc=function(t){function e(e,n,i){var r;(r=t.call(this,e,null,"vivliostyle-page-rule-master",[],n,null,0)||this).pageMarginBoxes={};var o=xc(i),a=new Uc(r.scope,L(r),i,o);return r.bodyPartitionKey=a.key,r.createPageMarginBoxes(i),r.applySpecified(i,o),r}I(e,t);var n=e.prototype;return n.createPageMarginBoxes=function(t){var e=this,n=t._marginBoxes;n&&_c.forEach((function(i){n[i]&&(e.pageMarginBoxes[i]=new Vc(e.scope,e,i,t))}))},n.applySpecified=function(t,e){for(var n in this.specified.position=new Fo(Ye.relative,0),this.specified.width=new Fo(e.width,0),this.specified.height=new Fo(e.height,0),t)kc[n]||"background-clip"===n||(this.specified[n]=t[n])},n.createInstance=function(t){return new zc(t,this)},e}(Zl),Uc=function(t){function e(e,n,i,r){var o;return(o=t.call(this,e,null,null,[],n)||this).pageSize=r,o.specified["z-index"]=new Fo(new Ve(0),0),o.applySpecified(i),o}I(e,t);var n=e.prototype;return n.applySpecified=function(t){for(var e in this.specified["flow-from"]=new Fo(_e("body"),0),this.specified.position=new Fo(Ye.absolute,0),this.specified.overflow=new Fo(Ye.visible,0),kc)kc.hasOwnProperty(e)&&(this.specified[e]=t[e])},n.createInstance=function(t){return new Xc(t,this)},e}(Jl),Vc=function(t){function e(e,n,i,r){var o;return(o=t.call(this,e,null,null,[],n)||this).marginBoxName=i,o.applySpecified(r),o}I(e,t);var n=e.prototype;return n.applySpecified=function(t){var e=t._marginBoxes[this.marginBoxName];for(var n in t){var i=e[n];(bo[n]||i&&i.value===Ye.inherit)&&(this.specified[n]=t[n])}for(var r in e)if(Object.prototype.hasOwnProperty.call(e,r)){var o=e[r];o&&o.value!==Ye.inherit&&(this.specified[r]=o)}},n.createInstance=function(t){return new jc(t,this)},e}(Jl),zc=function(t){function e(e,n){var i;return(i=t.call(this,e,n)||this).pageAreaDimension=null,i.pageMarginBoxInstances={},i}I(e,t);var n=e.prototype;return n.applyCascadeAndInit=function(e,n){var i=this.cascaded;for(var r in n)if(Object.prototype.hasOwnProperty.call(n,r))switch(r){case"writing-mode":case"direction":i[r]=n[r]}t.prototype.applyCascadeAndInit.call(this,e,n)},n.initHorizontal=function(){var t=this.style;t.left=tn,t["margin-left"]=tn,t["border-left-width"]=tn,t["padding-left"]=tn,t["padding-right"]=tn,t["border-right-width"]=tn,t["margin-right"]=tn,t.right=tn},n.initVertical=function(){var t=this.style;t.top=tn,t["margin-top"]=tn,t["border-top-width"]=tn,t["padding-top"]=tn,t["padding-bottom"]=tn,t["border-bottom-width"]=tn,t["margin-bottom"]=tn,t.bottom=tn},n.setPageAreaDimension=function(t){this.pageAreaDimension=t;var e=this.style;e.width=new Ke(t.borderBoxWidth),e.height=new Ke(t.borderBoxHeight),e["padding-left"]=new Ke(t.marginLeft),e["padding-right"]=new Ke(t.marginRight),e["padding-top"]=new Ke(t.marginTop),e["padding-bottom"]=new Ke(t.marginBottom)},n.adjustPageLayout=function(t,e,n){var i=e.marginBoxes,r={start:this.pageAreaDimension.marginLeft,end:this.pageAreaDimension.marginRight,extent:this.pageAreaDimension.borderBoxWidth},o={start:this.pageAreaDimension.marginTop,end:this.pageAreaDimension.marginBottom,extent:this.pageAreaDimension.borderBoxHeight};this.sizeMarginBoxesAlongVariableDimension(i.top,!0,r,t,n),this.sizeMarginBoxesAlongVariableDimension(i.bottom,!0,r,t,n),this.sizeMarginBoxesAlongVariableDimension(i.left,!1,o,t,n),this.sizeMarginBoxesAlongVariableDimension(i.right,!1,o,t,n)},n.sizeMarginBoxesAlongVariableDimension=function(t,e,n,i,r){var o=Rc.START,a=Rc.CENTER,s=Rc.END,u=this.pageBox.scope,l={},c={},h={};for(var f in t){var d=Bc[f];if(d){var p=t[f],g=this.pageMarginBoxInstances[f],m=new Hc(p,g.style,e,u,r);l[d.positionAlongVariableDimension]=p,c[d.positionAlongVariableDimension]=g,h[d.positionAlongVariableDimension]=m}}var v={start:n.start.evaluate(i),end:n.end.evaluate(i),extent:n.extent.evaluate(i)},E=this.getSizesOfMarginBoxesAlongVariableDimension(h,v.extent),b=!1,C={};Object.keys(l).forEach((function(t){var o=t,a=tc(u,c[o].style[e?"max-width":"max-height"],n.extent);if(a){var s=a.evaluate(i);if(E[o]>s){var f=h[o]=new Wc(l[o],c[o].style,e,u,r,s);C[o]=f.getOuterSize(),b=!0}}})),b&&(E=this.getSizesOfMarginBoxesAlongVariableDimension(h,v.extent),b=!1,[o,a,s].forEach((function(t){E[t]=C[t]||E[t]})));var y={};Object.keys(l).forEach((function(t){var o=t,a=tc(u,c[o].style[e?"min-width":"min-height"],n.extent);if(a){var s=a.evaluate(i);if(E[o]<s){var f=h[o]=new Wc(l[o],c[o].style,e,u,r,s);y[o]=f.getOuterSize(),b=!0}}})),b&&(E=this.getSizesOfMarginBoxesAlongVariableDimension(h,v.extent),[o,a,s].forEach((function(t){E[t]=y[t]||E[t]})));var w=v.start+v.extent,D=v.start+(v.start+v.extent);[o,a,s].forEach((function(t){var n=E[t];if(n){var i=l[t],r=0;switch(t){case o:r=e?i.left:i.top;break;case a:r=(D-n)/2;break;case s:r=w-n}e?i.setHorizontalPosition(r,n-i.getInsetLeft()-i.getInsetRight()):i.setVerticalPosition(r,n-i.getInsetTop()-i.getInsetBottom())}}))},n.getSizesOfMarginBoxesAlongVariableDimension=function(t,e){var n=t[Rc.START],i=t[Rc.CENTER],r=t[Rc.END],o={};if(i){var a=[n,r].filter((function(t){return t})),s=a.length?new Gc(a):null,u=this.distributeAutoMarginBoxSizes(i,s,e);u.xSize&&(o[Rc.CENTER]=u.xSize);var l=(e-(u.xSize||i.getOuterSize()))/2;n&&n.hasAutoSize()&&(o[Rc.START]=l),r&&r.hasAutoSize()&&(o[Rc.END]=l)}else{var c=this.distributeAutoMarginBoxSizes(n,r,e);c.xSize&&(o[Rc.START]=c.xSize),c.ySize&&(o[Rc.END]=c.ySize)}return o},n.distributeAutoMarginBoxSizes=function(t,e,n){var i={xSize:null,ySize:null};if(t&&e)if(t.hasAutoSize()&&e.hasAutoSize()){var r=t.getOuterMaxContentSize(),o=e.getOuterMaxContentSize();if(r>0&&o>0){var a=r+o;if(a<n)i.xSize=n*r/a;else{var s=t.getOuterMinContentSize(),u=s+e.getOuterMinContentSize();u<n?i.xSize=s+(n-u)*(r-s)/(a-u):u>0&&(i.xSize=n*s/u)}i.xSize>0&&(i.ySize=n-i.xSize)}else r>0?i.xSize=n:o>0&&(i.ySize=n)}else t.hasAutoSize()?i.xSize=Math.max(n-e.getOuterSize(),0):e.hasAutoSize()&&(i.ySize=Math.max(n-t.getOuterSize(),0));else t?t.hasAutoSize()&&(i.xSize=n):e&&e.hasAutoSize()&&(i.ySize=n);return i},n.prepareContainer=function(e,n,i,r,o){t.prototype.prepareContainer.call(this,e,n,i,r,o),n.element.setAttribute("data-vivliostyle-page-box",!0)},e}(dc),Hc=function(){function t(t,e,n,i,r){this.container=t,this.isHorizontal=n,this.clientLayout=r,this.size=null,this.hasAutoSize_=!tc(i,e[n?"width":"height"],new ge(i,0,"px"))}var e=t.prototype;return e.hasAutoSize=function(){return this.hasAutoSize_},e.getSize=function(){return this.size||(this.size=ds(this.clientLayout,this.container.element,this.isHorizontal?[ls.MAX_CONTENT_WIDTH,ls.MIN_CONTENT_WIDTH]:[ls.MAX_CONTENT_HEIGHT,ls.MIN_CONTENT_HEIGHT])),this.size},e.getOuterMaxContentSize=function(){var t=this.getSize();return this.isHorizontal?this.container.getInsetLeft()+t[ls.MAX_CONTENT_WIDTH]+this.container.getInsetRight():this.container.getInsetTop()+t[ls.MAX_CONTENT_HEIGHT]+this.container.getInsetBottom()},e.getOuterMinContentSize=function(){var t=this.getSize();return this.isHorizontal?this.container.getInsetLeft()+t[ls.MIN_CONTENT_WIDTH]+this.container.getInsetRight():this.container.getInsetTop()+t[ls.MIN_CONTENT_HEIGHT]+this.container.getInsetBottom()},e.getOuterSize=function(){return this.isHorizontal?this.container.getInsetLeft()+this.container.width+this.container.getInsetRight():this.container.getInsetTop()+this.container.height+this.container.getInsetBottom()},t}(),Gc=function(){function t(t){this.params=t}var e=t.prototype;return e.hasAutoSize=function(){return this.params.some((function(t){return t.hasAutoSize()}))},e.getOuterMaxContentSize=function(){var t=this.params.map((function(t){return t.getOuterMaxContentSize()}));return Math.max.apply(null,t)*t.length},e.getOuterMinContentSize=function(){var t=this.params.map((function(t){return t.getOuterMinContentSize()}));return Math.max.apply(null,t)*t.length},e.getOuterSize=function(){var t=this.params.map((function(t){return t.getOuterSize()}));return Math.max.apply(null,t)*t.length},t}(),Wc=function(t){function e(e,n,i,r,o,a){var s;return(s=t.call(this,e,n,i,r,o)||this).fixedSize=a,s}I(e,t);var n=e.prototype;return n.hasAutoSize=function(){return!1},n.getOuterMaxContentSize=function(){return this.getOuterSize()},n.getOuterMinContentSize=function(){return this.getOuterSize()},n.getOuterSize=function(){return this.isHorizontal?this.container.getInsetLeft()+this.fixedSize+this.container.getInsetRight():this.container.getInsetTop()+this.fixedSize+this.container.getInsetBottom()},e}(Hc),Xc=function(t){function e(e,n){var i;return(i=t.call(this,e,n)||this).borderBoxWidth=null,i.borderBoxHeight=null,i.marginTop=null,i.marginRight=null,i.marginBottom=null,i.marginLeft=null,i}I(e,t);var n=e.prototype;return n.applyCascadeAndInit=function(e,n){var i=this.cascaded;for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(r.match(/^column.*$/)||r.match(/^background-/))&&(i[r]=n[r]);t.prototype.applyCascadeAndInit.call(this,e,n),this.parentInstance.setPageAreaDimension({borderBoxWidth:this.borderBoxWidth,borderBoxHeight:this.borderBoxHeight,marginTop:this.marginTop,marginRight:this.marginRight,marginBottom:this.marginBottom,marginLeft:this.marginLeft})},n.initHorizontal=function(){var t=this.resolvePageBoxDimensions({start:"left",end:"right",extent:"width"});this.borderBoxWidth=t.borderBoxExtent,this.marginLeft=t.marginStart,this.marginRight=t.marginEnd},n.initVertical=function(){var t=this.resolvePageBoxDimensions({start:"top",end:"bottom",extent:"height"});this.borderBoxHeight=t.borderBoxExtent,this.marginTop=t.marginStart,this.marginBottom=t.marginEnd},n.resolvePageBoxDimensions=function(t){var e=this.style,n=this.pageBox.scope,i=t.start,r=t.end,o=t.extent,a=this.pageBox.pageSize[o].toExpr(n,null),s=tc(n,e[o],a),u=tc(n,e["margin-"+i],a),l=tc(n,e["margin-"+r],a),c=ec(n,e["padding-"+i],a),h=ec(n,e["padding-"+r],a),f=ic(n,e["border-"+i+"-width"],e["border-"+i+"-style"],a),d=ic(n,e["border-"+r+"-width"],e["border-"+r+"-style"],a),p=Te(n,a,Ne(n,Ne(n,f,c),Ne(n,d,h)));return s?(p=Te(n,p,s),u||l?u?l=Te(n,p,u):u=Te(n,p,l):l=u=Ae(n,p,new ye(n,.5))):(u||(u=n.zero),l||(l=n.zero),s=Te(n,p,Ne(n,u,l))),e[i]=new Ke(u),e[r]=new Ke(l),e["margin-"+i]=tn,e["margin-"+r]=tn,e["padding-"+i]=new Ke(c),e["padding-"+r]=new Ke(h),e["border-"+i+"-width"]=new Ke(f),e["border-"+r+"-width"]=new Ke(d),e[o]=new Ke(s),e["max-"+o]=new Ke(s),{borderBoxExtent:Te(n,a,Ne(n,u,l)),marginStart:u,marginEnd:l}},n.prepareContainer=function(e,n,i,r,o){t.prototype.prepareContainer.call(this,e,n,i,r,o),i.pageAreaElement=n.element,e.pageAreaWidth=parseFloat(i.pageAreaElement.style.width),e.pageAreaHeight=parseFloat(i.pageAreaElement.style.height)},e}(gc),jc=function(t){function e(e,n){var i;(i=t.call(this,e,n)||this).suppressEmptyBoxGeneration=!0;var r=n.marginBoxName;return i.boxInfo=Bc[r],e.pageMarginBoxInstances[r]=L(i),i}I(e,t);var n=e.prototype;return n.prepareContainer=function(e,n,i,r,o){this.applyVerticalAlign(e,n.element),t.prototype.prepareContainer.call(this,e,n,i,r,o)},n.applyVerticalAlign=function(t,e){et(e,"display","flex");var n=this.getProp(t,"vertical-align"),i=null;n===_e("middle")?i="center":n===_e("top")?i="flex-start":n===_e("bottom")&&(i="flex-end"),i&&(et(e,"flex-flow",this.vertical?"row":"column"),et(e,"justify-content",i))},n.positionAlongVariableDimension=function(t,e){var n=this.style,i=this.pageBox.scope,r=t.start,o=t.end,a="left"===r,s=a?e.borderBoxWidth:e.borderBoxHeight,u=tc(i,n[t.extent],s),l=a?e.marginLeft:e.marginTop;if(this.boxInfo.positionAlongVariableDimension===Rc.START)n[r]=new Ke(l);else if(u){var c=ec(i,n["margin-"+r],s),h=ec(i,n["margin-"+o],s),f=ec(i,n["padding-"+r],s),d=ec(i,n["padding-"+o],s),p=ic(i,n["border-"+r+"-width"],n["border-"+r+"-style"],s),g=ic(i,n["border-"+o+"-width"],n["border-"+o+"-style"],s),m=Ne(i,u,Ne(i,Ne(i,f,d),Ne(i,Ne(i,p,g),Ne(i,c,h))));switch(this.boxInfo.positionAlongVariableDimension){case Rc.CENTER:n[r]=new Ke(Ne(i,l,xe(i,Te(i,s,m),new ye(i,2))));break;case Rc.END:n[r]=new Ke(Te(i,Ne(i,l,s),m))}}},n.positionAndSizeAlongFixedDimension=function(t,e){var n=this.style,i=this.pageBox.scope,r=t.inside,o=t.outside,a=t.extent,s=e["margin"+o.charAt(0).toUpperCase()+o.substring(1)],u=nc(i,n["margin-"+r],s),l=nc(i,n["margin-"+o],s),c=ec(i,n["padding-"+r],s),h=ec(i,n["padding-"+o],s),f=ic(i,n["border-"+r+"-width"],n["border-"+r+"-style"],s),d=ic(i,n["border-"+o+"-width"],n["border-"+o+"-style"],s),p=tc(i,n[a],s),g=null;function m(t){if(g)return g;g={extent:p?p.evaluate(t):null,marginInside:u?u.evaluate(t):null,marginOutside:l?l.evaluate(t):null};var e=s.evaluate(t),n=0;return[f,c,h,d].forEach((function(e){e&&(n+=e.evaluate(t))})),(null===g.marginInside||null===g.marginOutside)&&n+g.extent+g.marginInside+g.marginOutside>e&&(null===g.marginInside&&(g.marginInside=0),null===g.marginOutside&&(g.marginOutside=0)),null!==g.extent&&null!==g.marginInside&&null!==g.marginOutside&&(g.marginOutside=null),null===g.extent&&null!==g.marginInside&&null!==g.marginOutside?g.extent=e-n-g.marginInside-g.marginOutside:null!==g.extent&&null===g.marginInside&&null!==g.marginOutside?g.marginInside=e-n-g.extent-g.marginOutside:null!==g.extent&&null!==g.marginInside&&null===g.marginOutside?g.marginOutside=e-n-g.extent-g.marginInside:null===g.extent?(g.marginInside=g.marginOutside=0,g.extent=e-n):g.marginInside=g.marginOutside=(e-n-g.extent)/2,g}n[a]=new Ke(new Ee(i,(function(){var t=m(this).extent;return null===t?0:t}),a)),n["margin-"+r]=new Ke(new Ee(i,(function(){var t=m(this).marginInside;return null===t?0:t}),"margin-"+r)),n["margin-"+o]=new Ke(new Ee(i,(function(){var t=m(this).marginOutside;return null===t?0:t}),"margin-"+o)),"left"===r?n.left=new Ke(Ne(i,e.marginLeft,e.borderBoxWidth)):"top"===r&&(n.top=new Ke(Ne(i,e.marginTop,e.borderBoxHeight)))},n.initHorizontal=function(){var t=this.parentInstance.pageAreaDimension;this.boxInfo.isInLeftColumn?this.positionAndSizeAlongFixedDimension({inside:"right",outside:"left",extent:"width"},t):this.boxInfo.isInRightColumn?this.positionAndSizeAlongFixedDimension({inside:"left",outside:"right",extent:"width"},t):this.positionAlongVariableDimension({start:"left",end:"right",extent:"width"},t)},n.initVertical=function(){var t=this.parentInstance.pageAreaDimension;this.boxInfo.isInTopRow?this.positionAndSizeAlongFixedDimension({inside:"bottom",outside:"top",extent:"height"},t):this.boxInfo.isInBottomRow?this.positionAndSizeAlongFixedDimension({inside:"top",outside:"bottom",extent:"height"},t):this.positionAlongVariableDimension({start:"top",end:"bottom",extent:"height"},t)},n.finishContainer=function(e,n,i,r,o,a,s){t.prototype.finishContainer.call(this,e,n,i,r,o,a,s);var u=i.marginBoxes,l=this.pageBox.marginBoxName,c=this.boxInfo;c.isInLeftColumn||c.isInRightColumn?c.isInTopRow||c.isInBottomRow||(c.isInLeftColumn?u.left[l]=n:c.isInRightColumn&&(u.right[l]=n)):c.isInTopRow?u.top[l]=n:c.isInBottomRow&&(u.bottom[l]=n)},e}(gc),Kc=function(){function t(t,e,n,i,r){this.cascadeInstance=t,this.pageScope=e,this.rootPageBoxInstance=n,this.context=i,this.docElementStyle=r,this.pageMasterCache={},this.definePageProgression()}var n=t.prototype;return n.definePageProgression=function(){var t=this.pageScope,n=this.context,i=n.isVersoFirstPage,r=new me(t,"page-number"),o=new ue(t,new pe(t,r,new ye(t,2)),i?t.one:t.zero);t.defineName("recto-page",new Qt(t,o)),t.defineName("verso-page",o),(n.pageProgression||Cc(this.docElementStyle))===e.PageProgression.LTR?(t.defineName("left-page",o),t.defineName("right-page",new Qt(t,o))):(t.defineName("left-page",new Qt(t,o)),t.defineName("right-page",o))},n.getCascadedPageStyle=function(){var t={};return this.cascadeInstance.pushRule([],"",t),this.cascadeInstance.popRule(),t},n.getPageRulePageMaster=function(t,e){var n=t.pageBox;if(0===Object.keys(e).length)return n.resetScope(),t;var i=this.makeCacheKey(e,n),r=this.pageMasterCache[i];return r||(r=n.pseudoName===hc?this.generatePageRuleMaster(e):this.generateCascadedPageMaster(e,n),this.pageMasterCache[i]=r),r.pageBox.resetScope(),r},n.makeCacheKey=function(t,e){var n=this.makeCascadeValueObjectKey(t);return e.key+"^"+n},n.makeCascadeValueObjectKey=function(t){var e=[];for(var n in t)if(Object.prototype.hasOwnProperty.call(t,n)){var i,r=t[n];i=r instanceof Fo?""+r.value:this.makeCascadeValueObjectKey(r),e.push(n+i+(r.priority||""))}return e.sort().join("^")},n.generatePageRuleMaster=function(t){var e=new Mc(this.pageScope,this.rootPageBoxInstance.pageBox,t).createInstance(this.rootPageBoxInstance);return e.applyCascadeAndInit(this.cascadeInstance,this.docElementStyle),e.resolveAutoSizing(this.context),e},n.generateCascadedPageMaster=function(t,e){var n=e.clone({pseudoName:"vivliostyle-page-rule-master"}),i=n.specified,r=t.size;if(r){var o=xc(t),a=r.priority;i.width=Oo(this.context,i.width,new Fo(o.width,a)),i.height=Oo(this.context,i.height,new Fo(o.height,a))}["counter-reset","counter-increment"].forEach((function(e){i[e]&&(t[e]=i[e])}));var s=n.createInstance(this.rootPageBoxInstance);return s.applyCascadeAndInit(this.cascadeInstance,this.docElementStyle),s.resolveAutoSizing(this.context),s},t}(),$c=function(t){function e(e){var n;return(n=t.call(this)||this).pageType=e,n}I(e,t);var n=e.prototype;return n.apply=function(t){t.currentPageType===this.pageType&&this.chained.apply(t)},n.getPriority=function(){return 3},n.makePrimary=function(t){return this.chained&&t.insertInTable(t.pagetypes,this.pageType,this.chained),!0},e}(Qo),qc=function(t){function e(e){var n;return(n=t.call(this)||this).scope=e,n}I(e,t);var n=e.prototype;return n.apply=function(t){1===new me(this.scope,"page-number").evaluate(t.context)&&this.chained.apply(t)},n.getPriority=function(){return 2},e}(Qo),Yc=function(t){function e(e){var n;return(n=t.call(this)||this).scope=e,n}I(e,t);var n=e.prototype;return n.apply=function(t){new me(this.scope,"left-page").evaluate(t.context)&&this.chained.apply(t)},n.getPriority=function(){return 1},e}(Qo),Zc=function(t){function e(e){var n;return(n=t.call(this)||this).scope=e,n}I(e,t);var n=e.prototype;return n.apply=function(t){new me(this.scope,"right-page").evaluate(t.context)&&this.chained.apply(t)},n.getPriority=function(){return 1},e}(Qo),Qc=function(t){function e(e){var n;return(n=t.call(this)||this).scope=e,n}I(e,t);var n=e.prototype;return n.apply=function(t){new me(this.scope,"recto-page").evaluate(t.context)&&this.chained.apply(t)},n.getPriority=function(){return 1},e}(Qo),Jc=function(t){function e(e){var n;return(n=t.call(this)||this).scope=e,n}I(e,t);var n=e.prototype;return n.apply=function(t){new me(this.scope,"verso-page").evaluate(t.context)&&this.chained.apply(t)},n.getPriority=function(){return 1},e}(Qo),th=function(t){function e(e,n,i){var r;return(r=t.call(this,n,i)||this).scope=e,r.a=n,r.b=i,r}I(e,t);var n=e.prototype;return n.apply=function(t){var e=t.context,n=e.layoutPositionAtPageStart.page;e.blankPageAtStart&&n--,n&&this.matchANPlusB(n)&&this.chained.apply(t)},n.getPriority=function(){return 2},e}(fa),eh=function(t){function e(e,n){return t.call(this,e,n,null,null,null)||this}return I(e,t),e.prototype.apply=function(t){!function(t,e,n,i,r){Wo(t,e,n,i,null,null,null);var o=n._marginBoxes;if(o){var a=Vo(e,"_marginBoxes");for(var s in o)if(o.hasOwnProperty(s)){var u=a[s];u||(a[s]=u={}),Wo(t,u,o[s],i,null,null,null)}}}(t.context,t.currentStyle,this.style,this.specificity)},e}(Zo),nh=function(t){function e(e,n,i,r,o){var a;return(a=t.call(this,e,n,null,i,null,r,!1)||this).pageProps=o,a.currentPageSelectors=[],a.currentNamedPageSelector="",a.currentPseudoPageClassSelectors=[],a}I(e,t);var n=e.prototype;return n.startPageRule=function(){this.startSelectorRule()},n.tagSelector=function(t,e){this.currentNamedPageSelector=e,e&&(this.chain.push(new $c(e)),this.specificity+=65536)},n.pseudoclassSelector=function(t,e){if(t=t.toLowerCase(),e)switch(t){case"nth":var n=e[0],i=e[1];this.currentPseudoPageClassSelectors.push(":"+t+"("+n+"n"+(i<0?i:"+"+i)+")"),this.chain.push(new th(this.scope,n,i)),this.specificity+=256;break;default:this.reportAndSkip("E_INVALID_PAGE_SELECTOR :"+t+"("+e.join("")+")")}else switch(this.currentPseudoPageClassSelectors.push(":"+t),t){case"first":this.chain.push(new qc(this.scope)),this.specificity+=256;break;case"left":this.chain.push(new Yc(this.scope)),this.specificity+=1;break;case"right":this.chain.push(new Zc(this.scope)),this.specificity+=1;break;case"recto":this.chain.push(new Qc(this.scope)),this.specificity+=1;break;case"verso":this.chain.push(new Jc(this.scope)),this.specificity+=1;break;default:this.reportAndSkip("E_INVALID_PAGE_SELECTOR :"+t)}},n.finishSelector=function(){var t;t=this.currentNamedPageSelector||this.currentPseudoPageClassSelectors.length?[this.currentNamedPageSelector].concat(this.currentPseudoPageClassSelectors.sort()):null,this.currentPageSelectors.push({selectors:t,specificity:this.specificity}),this.currentNamedPageSelector="",this.currentPseudoPageClassSelectors=[]},n.nextSelector=function(){this.finishSelector(),t.prototype.nextSelector.call(this)},n.startRuleBody=function(){this.finishSelector(),t.prototype.startRuleBody.call(this)},n.simpleProperty=function(e,n,i){if("bleed"!==e&&"marks"!==e||this.currentPageSelectors.some((function(t){return null===t.selectors}))){t.prototype.simpleProperty.call(this,e,n,i);var r=_o(this.elementStyle,e),o=this.pageProps;if("bleed"===e||"marks"===e)o[""]||(o[""]={}),Object.keys(o).forEach((function(t){Mo(o[t],e,r)}));else if("size"===e){var a=o[""];this.currentPageSelectors.forEach((function(t){var n=new Fo(r.value,r.priority+t.specificity),i=t.selectors?t.selectors.join(""):"",s=o[i];if(s){var u=_o(s,e);n=u?Oo(null,n,u):n,Mo(s,e,n)}else Mo(s=o[i]={},e,n),a&&["bleed","marks"].forEach((function(t){a[t]&&Mo(s,t,a[t])}))}))}}},n.insertNonPrimary=function(t){this.cascade.insertInTable(this.cascade.pagetypes,"*",t)},n.makeApplyRuleAction=function(t){return new eh(this.elementStyle,t)},n.startPageMarginBoxRule=function(t){var e=Vo(this.elementStyle,"_marginBoxes"),n=e[t];n||(e[t]=n={});var i=new ih(this.scope,this.owner,this.validatorSet,n);this.owner.pushHandler(i)},e}(ja),ih=function(t){function e(e,n,i,r){var o;return(o=t.call(this,e,n,!1)||this).validatorSet=i,o.boxStyle=r,o}I(e,t);var n=e.prototype;return n.property=function(t,e,n){this.validatorSet.validatePropertyAndHandleShorthand(t,e,n,this)},n.invalidPropertyValue=function(t,e){this.report("E_INVALID_PROPERTY_VALUE "+t+": "+e.toString())},n.unknownProperty=function(t,e){this.report("E_INVALID_PROPERTY "+t+": "+e.toString())},n.simpleProperty=function(t,e,n){var i=n?this.getImportantSpecificity():this.getBaseSpecificity(),r=new Fo(e,i);Mo(this.boxStyle,t,r)},e}(nr),rh=function(t,e,n){return t.replace(/[uU][rR][lL]\(\s*"((\\([^0-9a-fA-F]+|[0-9a-fA-F]+\s*)|[^"\r\n])+)"/gm,(function(t,i){return'url("'+n.transformURL(i,e)+'"'})).replace(/[uU][rR][lL]\(\s*'((\\([^0-9a-fA-F]+|[0-9a-fA-F]+\s*)|[^'\r\n])+)'/gm,(function(t,i){return"url('"+n.transformURL(i,e)+"'"})).replace(/[uU][rR][lL]\(\s*((\\([^0-9a-fA-F]+|[0-9a-fA-F]+\s*)|[^"'\r\n\)\s])+)/gm,(function(t,i){return"url("+n.transformURL(i,e)}))},oh={},ah={"text-indent":"0px","margin-top":"0px","padding-top":"0px","border-top-width":"0px","border-top-style":"none","border-top-color":"transparent","border-top-left-radius":"0px","border-top-right-radius":"0px"},sh={"text-indent":"0px","margin-right":"0px","padding-right":"0px","border-right-width":"0px","border-right-style":"none","border-right-color":"transparent","border-top-right-radius":"0px","border-bottom-right-radius":"0px"},uh={"margin-top":"0px"},lh={"margin-right":"0px"},ch=function(t){function n(e,n,i,r,o,a,s,u,l,c,h,f,d){var p;return(p=t.call(this)||this).flowName=e,p.context=n,p.viewport=i,p.styler=r,p.regionIds=o,p.xmldoc=a,p.docFaces=s,p.footnoteStyle=u,p.stylerProducer=l,p.page=c,p.customRenderer=h,p.fallbackMap=f,p.documentURLTransformer=d,p.nodeContext=null,p.viewRoot=null,p.isFootnote=!1,p.sourceNode=null,p.offsetInNode=0,p.viewNode=null,p.document=i.document,p.exprContentListener=r.counterListener.getExprContentListener(),p}I(n,t);var i=n.prototype;return i.clone=function(){return new n(this.flowName,this.context,this.viewport,this.styler,this.regionIds,this.xmldoc,this.docFaces,this.footnoteStyle,this.stylerProducer,this.page,this.customRenderer,this.fallbackMap,this.documentURLTransformer)},i.createPseudoelementShadow=function(t,e,n,i,r,o,a,s){var u=this.getPseudoMap(n,this.regionIds,this.isFootnote,this.nodeContext,o);if(!u)return s;for(var l,c=[],h=Mr.createElementNS(W.SHADOW,"root"),f=h,d=_(Ur);!(l=d()).done;){var p=l.value,g=void 0;if(p){if(!u[p])continue;if(!("footnote-marker"!=p||e&&this.isFootnote))continue;if(p.match(/^first-/)){var m=i.display;if(!m||m===Ye.inline)continue}if("before"===p||"after"===p){var v=u[p].content;if(!v||v===Ye.normal||v===Ye.none)continue}c.push(p),zr(g=Mr.createElementNS(W.XHTML,"span"),p)}else g=Mr.createElementNS(W.SHADOW,"content");f.appendChild(g),p.match(/^first-/)&&(f=g)}if(!c.length)return s;var E=new Hr(t,n,r,o,this.exprContentListener);return new so(t,h,null,a,s,ao.ROOTLESS,E)},i.getPseudoMap=function(t,e,n,i,r){var o=Uo(t,"_pseudos");if(!o)return null;var a={},s=function(t){var i=a[t]={};os(i,o[t],r),ts(i,r,o[t]),rs(o[t],e,n,(function(t,e){os(i,e,r),Ja(e,(function(t){os(i,t,r)}))}))};for(var u in o)s(u);return a},i.createRefShadow=function(t,e,n,i,r){var o=this,a=Ni("createRefShadow");return this.xmldoc.store.load(t).then((function(s){var u=s;if(u){var l=u.getElement(t);if(l){var c=o.stylerProducer.getStylerForDoc(u);r=new so(n,l,u,i,r,e,c)}}a.finish(r)})),a.result()},i.createShadows=function(t,e,n,i,r,o,a){var s=this,u=Ni("createShadows"),l=i.template;return(l instanceof He?this.createRefShadow(l.url,ao.ROOTLESS,t,a,null):Ti(null)).then((function(l){var c=null;if(t.namespaceURI==W.SHADOW&&"include"==t.localName){var h=t.getAttribute("href"),f=null;h?f=a?a.xmldoc:s.xmldoc:a&&(h=a.owner.namespaceURI==W.XHTML?a.owner.getAttribute("href"):a.owner.getAttributeNS(W.XLINK,"href"),f=a.parentShadow?a.parentShadow.xmldoc:s.xmldoc),h&&(h=K(h,f.url),c=s.createRefShadow(h,ao.ROOTED,t,a,l))}null==c&&(c=Ti(l));var d=null;c.then((function(e){if(i.display===Ye.table_cell){var n=K("user-agent.xml#table-cell",X);d=s.createRefShadow(n,ao.ROOTLESS,t,a,e)}else d=Ti(e)})),d.then((function(l){l=s.createPseudoelementShadow(t,e,n,i,r,o,a,l),u.finish(l)}))})),u.result()},i.setViewRoot=function(t,e){this.viewRoot=t,this.isFootnote=e},i.computeStyle=function(t,e,n,i){var r=this,o=this.context,a=is(n,o,this.regionIds,this.isFootnote);t=es(a,o,t),e=ns(a,o,e),as(a,i,t,e,(function(t,e){var n=e.evaluate(o,t);return"font-family"==t&&(n=r.docFaces.filterFontFamily(n)),n}));var s=Ks(i.display||Ye.inline,i.position,i.float,this.sourceNode===this.xmldoc.root);return["display","position","float"].forEach((function(t){s[t]&&(i[t]=s[t])})),t},i.inheritFromSourceParent=function(t){for(var e=this.nodeContext.sourceNode,n=[],i=null,r=this.nodeContext.shadowContext,o=-1;e&&1==e.nodeType;){var a=r&&r.root==e;if(!a||r.type==ao.ROOTLESS){var s=(r?r.styler:this.styler).getStyle(e,!1);n.push(s),i=i||it(e)}a?(e=r.owner,r=r.parentShadow):(e=e.parentNode,o++)}for(var u=this.context.queryUnitSize("em",0===o),l={"font-size":new Fo(new Me(u,"px"),0)},c=new jo(l,this.context),h=n.length-1;h>=0;--h){var f=n[h],d=[];for(var p in f)Bo(p)&&d.push(p);d.sort(nn);for(var g=0,m=d;g<m.length;g++){var v=m[g];c.setPropName(v);var E=_o(f,v);E.value!==Ye.inherit&&(l[v]=E.filterValue(c))}}for(var b in t)Bo(b)||(l[b]=t[b]);return{lang:i,elementStyle:l}},i.resolveURL=function(t){return t=K(t,this.xmldoc.url),this.fallbackMap[t]||t},i.inheritLangAttribute=function(){this.nodeContext.lang=it(this.nodeContext.sourceNode)||this.nodeContext.parent&&this.nodeContext.parent.lang||this.nodeContext.lang},i.transferPolyfilledInheritedProps=function(t){var n=v(e.HOOKS.POLYFILLED_INHERITED_PROPS).reduce((function(t,e){return t.concat(e())}),[].concat(Co)).filter((function(e){return t[e]}));if(n.length){var i=this.nodeContext.inheritedProps;if(this.nodeContext.parent)for(var r in i=this.nodeContext.inheritedProps={},this.nodeContext.parent.inheritedProps)i[r]=this.nodeContext.parent.inheritedProps[r];n.forEach((function(e){var n=t[e];if(n){if(n instanceof Ve)i[e]=n.num;else if(n instanceof Be)i[e]=n.name;else if(n instanceof Me){var r=n;switch(r.unit){case"dpi":case"dpcm":case"dppx":i[e]=r.num*Ht[r.unit]}}else i[e]=n;delete t[e]}}))}},i.resolveFormattingContext=function(t,n,i,r,o,a){for(var s=v(e.HOOKS.RESOLVE_FORMATTING_CONTEXT),u=0;u<s.length;u++){var l=s[u](t,n,i,r,o,a);if(l)return void(t.formattingContext=l)}},i.createElementView=function(t,e){var n=this,i=!0,r=Ni("createElementView"),o=this.sourceNode,a=this.nodeContext.shadowContext?this.nodeContext.shadowContext.styler:this.styler,s=a.getStyle(o,!1);if(!this.nodeContext.shadowContext){var u=this.xmldoc.getElementOffset(o);xr.registerFragmentIndex(u,this.nodeContext.fragmentIndex,0)}var l={};if(!this.nodeContext.parent){var c=this.inheritFromSourceParent(s);s=c.elementStyle,this.nodeContext.lang=c.lang}var h=s["float-reference"]&&function(t){switch(t){case"inline":return ps.INLINE;case"column":return ps.COLUMN;case"region":return ps.REGION;case"page":return ps.PAGE;default:throw new Error("Unknown float-reference: "+t)}}(s["float-reference"].value.toString());if(this.nodeContext.parent&&h&&gs(h)){var f=this.inheritFromSourceParent(s);s=f.elementStyle,this.nodeContext.lang=f.lang}this.nodeContext.vertical=this.computeStyle(this.nodeContext.vertical,"rtl"===this.nodeContext.direction,s,l),a.processContent(o,l),this.transferPolyfilledInheritedProps(l),this.inheritLangAttribute(),l.direction&&(this.nodeContext.direction=l.direction.toString());var d=l["flow-into"];if(d&&d.toString()!=this.flowName)return r.finish(!1),r.result();var p=l.display;if(p===Ye.none)return r.finish(!1),r.result();var g=null==this.nodeContext.parent;return this.nodeContext.flexContainer=p===Ye.flex,this.createShadows(o,g,s,l,a,this.context,this.nodeContext.shadowContext).then((function(u){n.nodeContext.nodeShadow=u;var c=l.position,f=l.float,d=l.clear,m=n.nodeContext.vertical?Ye.vertical_rl:Ye.horizontal_tb,v=n.nodeContext.parent?n.nodeContext.parent.vertical?Ye.vertical_rl:Ye.horizontal_tb:m,E=function(t){return"true"===t.getAttribute("data-vivliostyle-flow-root")}(o);n.nodeContext.establishesBFC=function(t,e,n,i,r,o,a){return r=r||o||Ye.horizontal_tb,!!a||!!n&&n!==Ye.none||js(e)||t===Ye.inline_block||t===Ye.table_cell||t===Ye.table_caption||t==Ye.flex||(t===Ye.block||t===Ye.list_item)&&!!i&&i!==Ye.visible||!!o&&r!==o}(p,c,f,l.overflow,m,v,E),n.nodeContext.containingBlockForAbsolute=function(t){return t===Ye.relative||t===Ye.absolute||t===Ye.fixed}(c),!n.nodeContext.isInsideBFC()||f===Ye.footnote||h&&gs(h)||(f=null,d=null);var b=f===Ye.left||f===Ye.right||f===Ye.top||f===Ye.bottom||f===Ye.inline_start||f===Ye.inline_end||f===Ye.block_start||f===Ye.block_end||f===Ye.snap_block||f===Ye.footnote;f&&(delete l.float,f===Ye.footnote&&(n.isFootnote?(b=!1,l.display=Ye.block):l.display=Ye.inline)),d&&(d===Ye.inherit&&n.nodeContext.parent&&n.nodeContext.parent.clearSide&&(d=_e(n.nodeContext.parent.clearSide)),d!==Ye.left&&d!==Ye.right&&d!==Ye.top&&d!==Ye.bottom&&d!==Ye.both&&d!==Ye.all&&d!==Ye.same||(delete l.clear,l.display&&l.display!=Ye.inline&&(n.nodeContext.clearSide=d.toString())));var C=p===Ye.list_item&&l["ua-list-item-count"];if((b||l["break-inside"]&&l["break-inside"]!==Ye.auto)&&n.nodeContext.breakPenalty++,p&&p!==Ye.inline&&qs(p)&&n.nodeContext.breakPenalty++,n.nodeContext.inline=!b&&!p||qs(p)||function(t){switch(t.toString()){case"ruby-base":case"ruby-text":case"ruby-base-container":case"ruby-text-container":return!0;default:return!1}}(p),n.nodeContext.display=p?p.toString():"inline",n.nodeContext.floatSide=b?f.toString():null,n.nodeContext.floatReference=h||ps.INLINE,n.nodeContext.floatMinWrapBlock=l["float-min-wrap-block"]||null,n.nodeContext.columnSpan=l["column-span"],!n.nodeContext.inline){var y=l["break-after"];y&&(n.nodeContext.breakAfter=y.toString());var w=l["break-before"];w&&(n.nodeContext.breakBefore=w.toString())}n.nodeContext.verticalAlign=l["vertical-align"]&&l["vertical-align"].toString()||"baseline",n.nodeContext.captionSide=l["caption-side"]&&l["caption-side"].toString()||"top";var D=l["border-collapse"];if(!D||D===_e("separate")){var S,N,T=l["border-spacing"];T&&(T.isSpaceList()?(S=T.values[0],N=T.values[1]):S=N=T,S.isNumeric()&&(n.nodeContext.inlineBorderSpacing=$e(S,n.context)),N.isNumeric()&&(n.nodeContext.blockBorderSpacing=$e(N,n.context)))}n.nodeContext.footnotePolicy=l["footnote-policy"];var A=l["x-first-pseudo"];A&&(n.nodeContext.firstPseudo=new lo(n.nodeContext.parent?n.nodeContext.parent.firstPseudo:null,A.num)),n.nodeContext.inline||n.processAfterIfcontinues(o,s,a,n.context);var x=l["white-space"];if(x){var I=Yr(x.toString());null!==I&&(n.nodeContext.whitespace=I)}var F=l["hyphenate-character"];F&&F!==Ye.auto&&(n.nodeContext.hyphenateCharacter=F.str),n.nodeContext.breakWord=l["word-break"]===Ye.break_all||(l["overflow-wrap"]||["word-wrap"])===Ye.break_word,n.resolveFormattingContext(n.nodeContext,t,p,c,f,g),n.nodeContext.parent&&n.nodeContext.parent.formattingContext&&(t=n.nodeContext.parent.formattingContext.isFirstTime(n.nodeContext,t)),n.nodeContext.inline||(n.nodeContext.repeatOnBreak=n.processRepeatOnBreak(l),n.findAndProcessRepeatingElements(o,a));var P=!1,O=[],R=o.namespaceURI,k=o.localName;if(R==W.XHTML)"html"==k||"body"==k||"script"==k||"link"==k||"meta"==k?k="div":"vide_"==k?k="video":"audi_"==k?k="audio":"object"==k&&(P=!!n.customRenderer),o.getAttribute("data-adapt-pseudo")&&s.content&&s.content.value&&s.content.value.url&&(k="img");else if(R==W.epub)k="span",R=W.XHTML;else if(R==W.NCX)if(R=W.XHTML,"ncx"==k||"navPoint"==k)k="div";else if("navLabel"==k){k="span";var L=o.parentNode;if(L){for(var B=null,_=L.firstChild;_;_=_.nextSibling)if(1==_.nodeType&&_.namespaceURI==W.NCX&&"content"==_.localName){B=_.getAttribute("src");break}B&&(k="a",(o=o.ownerDocument.createElementNS(R,"a")).setAttribute("href",B))}}else k="span";else R==W.SHADOW?(R=W.XHTML,k=n.nodeContext.inline?"span":"div"):P=!!n.customRenderer;if(C)t?k="li":(k="div",l.display=p=Ye.block);else if("body"==k||"li"==k)k="div";else if("q"==k)k="span";else if("a"==k){var M=l["hyperlink-processing"];M&&"normal"!=M.toString()&&(k="span")}l.behavior&&"none"!=l.behavior.toString()&&n.customRenderer&&(P=!0),o.dataset&&"true"===o.getAttribute("data-math-typeset")&&(P=!0),(P?n.customRenderer(o,n.nodeContext.parent?n.nodeContext.parent.viewNode:null,l):Ti(null)).then((function(a){var s;a?P&&(i="true"==a.getAttribute("data-adapt-process-children")):a=n.createElement(R,k),"a"==k&&a.addEventListener("click",n.page.hrefHandler,!1),"iframe"==a.localName&&a.namespaceURI==W.XHTML&&(s=a).addEventListener("load",(function(){s.contentWindow.navigator.epubReadingSystem={name:"adapt",version:"0.1",layoutStyle:"paginated",hasFeature:function(t,e){switch(t){case"mouse-events":return!0}return!1}}}),!1);for(var u=n.nodeContext.inheritedProps["image-resolution"],c=[],h=l.width,f=l.height,d=o.getAttribute("width"),p=o.getAttribute("height"),g=h===Ye.auto||!h&&!d,m=f===Ye.auto||!f&&!p,v=o.attributes,E=v.length,b=null,y=0;y<E;y++){var w=v[y],D=w.namespaceURI,S=w.localName,N=w.nodeValue;if(D){if("http://www.w3.org/2000/xmlns/"==D)continue;D==W.XLINK&&"href"==S&&(N=n.resolveURL(N))}else{if(S.match(/^on/))continue;if("style"==S)continue;if(("id"==S||"name"==S)&&t){N=n.documentURLTransformer.transformFragment(N,n.xmldoc.url),a.setAttribute(S,N),n.page.registerElementWithId(a,N);continue}if("src"==S||"href"==S||"poster"==S?(N=n.resolveURL(N),"href"===S&&(N=n.documentURLTransformer.transformURL(N,n.xmldoc.url))):"srcset"==S&&(N=N.split(",").map((function(t){return n.resolveURL(t.trim())})).join(",")),"poster"===S&&"video"===k&&R===W.XHTML&&g&&m){var T=new Image,A=Mi(T,N);O.push(A),c.push({image:T,element:a,fetcher:A})}}if(R==W.SVG&&/^[A-Z\-]+$/.test(S)&&(S=S.toLowerCase()),n.isSVGUrlAttribute(S)&&(N=rh(N,n.xmldoc.url,n.documentURLTransformer)),D){var x=oh[D];x&&(S=x+":"+S)}"src"!=S||D||"img"!=k&&"input"!=k||R!=W.XHTML?"href"==S&&"image"==k&&R==W.SVG&&D==W.XLINK?n.page.fetchers.push(Mi(a,N)):D?a.setAttributeNS(D,S,N):a.setAttribute(S,N):b=N}if(b){var I="input"===k?new Image:a,F=Mi(I,b);I!==a&&(a.src=b),g||m?(g&&m&&u&&1!==u&&c.push({image:I,element:a,fetcher:F}),O.push(F)):n.page.fetchers.push(F)}delete l.content;var L=l["list-style-image"];if(L&&L instanceof He){var B=L.url;O.push(Mi(new Image,B))}if(n.preprocessElementStyle(l),n.applyComputedStyles(a,l),!n.nodeContext.inline){var _=null;if(t?e&&!n.isAtForcedBreak()&&(_=n.nodeContext.vertical?lh:uh):_="clone"!==n.nodeContext.inheritedProps["box-decoration-break"]?n.nodeContext.vertical?sh:ah:n.nodeContext.vertical?lh:uh,_)for(var M in _)et(a,M,_[M])}C&&a.setAttribute("value",l["ua-list-item-count"].stringValue()),n.viewNode=a,O.length?_i(O).then((function(){u>0&&n.modifyElemDimensionWithImageResolution(c,u,l,n.nodeContext.vertical),r.finish(i)})):r.timeSlice().then((function(){r.finish(i)}))}))})),r.result()},i.isAtForcedBreak=function(){for(var t=this.nodeContext;t&&!t.after;t=t.parent){if(xs(t.breakBefore))return!0;if(t.parent&&t.parent.sourceNode.firstElementChild!==t.sourceNode)break}return!1},i.processAfterIfcontinues=function(t,e,n,i){var r=this.getPseudoMap(e,this.regionIds,this.isFootnote,this.nodeContext,i);if(r&&r["after-if-continues"]&&r["after-if-continues"].content){var o=new Hr(t,e,n,i,this.exprContentListener);this.nodeContext.afterIfContinues=new su(t,o)}},i.isSVGUrlAttribute=function(t){return n.SVG_URL_ATTRIBUTES.includes(t.toLowerCase())},i.modifyElemDimensionWithImageResolution=function(t,e,n,i){var r=this;t.forEach((function(t){if("load"===t.fetcher.get().get()){var o=t.image,a=o.width/e,s=o.height/e,u=t.element;if(a>0&&s>0)if(n["box-sizing"]===Ye.border_box&&(n["border-left-style"]!==Ye.none&&(a+=$e(n["border-left-width"],r.context)),n["border-right-style"]!==Ye.none&&(a+=$e(n["border-right-width"],r.context)),n["border-top-style"]!==Ye.none&&(s+=$e(n["border-top-width"],r.context)),n["border-bottom-style"]!==Ye.none&&(s+=$e(n["border-bottom-width"],r.context))),e>1){var l=n["max-width"]||Ye.none,c=n["max-height"]||Ye.none;if(l===Ye.none&&c===Ye.none)et(u,"max-width",a+"px");else if(l!==Ye.none&&c===Ye.none)et(u,"width",a+"px");else if(l===Ye.none&&c!==Ye.none)et(u,"height",s+"px");else{l.isNumeric(),c.isNumeric();var h=c;"%"!==l.unit?et(u,"max-width",Math.min(a,$e(l,r.context))+"px"):"%"!==h.unit?et(u,"max-height",Math.min(s,$e(h,r.context))+"px"):i?et(u,"height",s+"px"):et(u,"width",a+"px")}}else if(e<1){var f=n["min-width"]||tn,d=n["min-height"]||tn;f.isNumeric(),f.isNumeric();var p=f,g=d;0===p.num&&0===g.num?et(u,"min-width",a+"px"):0!==p.num&&0===g.num?et(u,"width",a+"px"):0===p.num&&0!==g.num?et(u,"height",s+"px"):"%"!==p.unit?et(u,"min-width",Math.max(a,$e(p,r.context))+"px"):"%"!==g.unit?et(u,"min-height",Math.max(s,$e(g,r.context))+"px"):i?et(u,"height",s+"px"):et(u,"width",a+"px")}}}))},i.preprocessElementStyle=function(t){var n=this;v(e.HOOKS.PREPROCESS_ELEMENT_STYLE).forEach((function(e){e(n.nodeContext,t)}))},i.findAndProcessRepeatingElements=function(t,e){for(var n=t.firstChild;n;n=n.nextSibling)if(1===n.nodeType){var i={},r=e.getStyle(n,!1);if(this.computeStyle(this.nodeContext.vertical,"rtl"===this.nodeContext.direction,r,i),this.processRepeatOnBreak(i)){if(this.nodeContext.formattingContext instanceof Du&&!this.nodeContext.belongsTo(this.nodeContext.formattingContext))return;var o=this.nodeContext.parent;return this.nodeContext.formattingContext=new Du(o&&o.formattingContext,this.nodeContext.sourceNode),void this.nodeContext.formattingContext.initializeRepetitiveElements(this.nodeContext.vertical)}}},i.processRepeatOnBreak=function(t){var e=t["repeat-on-break"];return e!==Ye.none&&(e===Ye.auto&&(e=t.display===Ye.table_header_group?Ye.header:t.display===Ye.table_footer_group?Ye.footer:Ye.none),e&&e!==Ye.none)?e.toString():null},i.createTextNodeView=function(){var t=this,e=Ni("createTextNodeView");return this.preprocessTextContent().then((function(){var n=t.offsetInNode||0,i=Br(t.nodeContext.preprocessedTextContent).substr(n);t.viewNode=document.createTextNode(i),e.finish(!0)})),e.result()},i.preprocessTextContent=function(){var t,n=this;if(null!=this.nodeContext.preprocessedTextContent)return Ti(!0);var i=t=this.sourceNode.textContent,r=Ni("preprocessTextContent"),o=v(e.HOOKS.PREPROCESS_TEXT_CONTENT),s=0;return r.loop((function(){return s>=o.length?Ti(!1):o[s++](n.nodeContext,i).thenAsync((function(t){return i=t,Ti(!0)}))})).then((function(){n.nodeContext.preprocessedTextContent=a(t,i,0),r.finish(!0)})),r.result()},i.createNodeView=function(t,e){var n,i=this,r=Ni("createNodeView"),o=!0;return 1==this.sourceNode.nodeType?n=this.createElementView(t,e):8==this.sourceNode.nodeType?(this.viewNode=null,n=Ti(!0)):n=this.createTextNodeView(),n.then((function(t){if(o=t,i.nodeContext.viewNode=i.viewNode,i.viewNode){var e=i.nodeContext.parent?i.nodeContext.parent.viewNode:i.viewRoot;e&&e.appendChild(i.viewNode)}r.finish(o)})),r.result()},i.setCurrent=function(t,e,n){return this.nodeContext=t,t?(this.sourceNode=t.sourceNode,this.offsetInNode=t.offsetInNode):(this.sourceNode=null,this.offsetInNode=-1),this.viewNode=null,this.nodeContext?this.createNodeView(e,!!n):Ti(!0)},i.processShadowContent=function(t){if(null==t.shadowContext||"content"!=t.sourceNode.localName||t.sourceNode.namespaceURI!=W.SHADOW)return t;var e,n,i,r=t.boxOffset,o=t.shadowContext,a=t.parent;o.subShadow?(i=o.subShadow,e=o.root,(n=o.type)==ao.ROOTLESS&&(e=e.firstChild)):(i=o.parentShadow,e=o.owner.firstChild,n=ao.ROOTLESS);var s=t.sourceNode.nextSibling;if(s?(t.sourceNode=s,t.resetView()):t.shadowSibling?t=t.shadowSibling:e?t=null:(t=t.parent.modify()).after=!0,e){var u=new co(e,a,r);return u.shadowContext=i,u.shadowType=n,u.shadowSibling=t,u}return t.boxOffset=r,t},i.nextPositionInTree=function(t){var e=t.boxOffset+1;if(t.after){if(!t.parent)return null;if(t.shadowType!=ao.ROOTED){var n=t.sourceNode.nextSibling;if(n)return(t=t.modify()).boxOffset=e,t.sourceNode=n,t.resetView(),this.processShadowContent(t)}return t.shadowSibling?((t=t.shadowSibling.modify()).boxOffset=e,t):((t=t.parent.modify()).boxOffset=e,t.after=!0,t)}if(t.nodeShadow){var i=t.nodeShadow.root;if(t.nodeShadow.type==ao.ROOTLESS&&(i=i.firstChild),i){var r=new co(i,t,e);return r.shadowContext=t.nodeShadow,r.shadowType=t.nodeShadow.type,this.processShadowContent(r)}}var o=t.sourceNode.firstChild;return o?this.processShadowContent(new co(o,t,e)):(1!=t.sourceNode.nodeType&&(e+=Br(t.preprocessedTextContent).length-1-t.offsetInNode),(t=t.modify()).boxOffset=e,t.after=!0,t)},i.isTransclusion=function(t,e,n){var i=_o(e,"hyperlink-processing");if(!i)return!1;var r=i.evaluate(this.context,"hyperlink-processing");return!!r&&r.toString()==n},i.nextInTree=function(t,e){var n=this,i=this.nextPositionInTree(t);if(!i||i.after)return Ti(i);var r=Ni("nextInTree");return this.setCurrent(i,!0,e).then((function(t){i.viewNode&&t||((i=i.modify()).after=!0,i.viewNode||(i.inline=!0)),n.dispatchEvent({type:"nextInTree",nodeContext:i}),r.finish(i)})),r.result()},i.addImageFetchers=function(t){if(t instanceof Xe)for(var e=t.values,n=0;n<e.length;n++)this.addImageFetchers(e[n]);else if(t instanceof He){var i=t.url;this.page.fetchers.push(Mi(new Image,i))}},i.applyComputedStyles=function(t,e){var n=e["background-image"];n&&this.addImageFetchers(n);var i=e.position===Ye.relative;for(var r in e)if(!fh[r]){var o=e[r];(o=o.visit(new On(this.xmldoc.url,this.documentURLTransformer))).isNumeric()&&Gt(o.unit)&&(o=qe(o,this.context)),Gr[r]||i&&Wr[r]?this.page.delayedItems.push(new Xr(t,r,o)):et(t,r,o.toString())}},i.applyPseudoelementStyle=function(t,e,n){if(!t.after){var i=(t.shadowContext?t.shadowContext.styler:this.styler).getStyle(this.sourceNode,!1),r=Uo(i,"_pseudos");if(r&&(i=r[e])){var o={};t.vertical=this.computeStyle(t.vertical,"rtl"===t.direction,i,o);var a=o.content;Eo(a)&&(a.visit(new vo(n,this.context,a,this.exprContentListener)),delete o.content),this.applyComputedStyles(n,o)}}},i.peelOff=function(t,e){var n=this,i=Ni("peelOff"),r=t.firstPseudo,o=t.offsetInNode,a=t.after;if(e>0)t.viewNode.textContent=t.viewNode.textContent.substr(0,e),o+=e;else if(!a&&t.viewNode&&0==o){var s=t.viewNode.parentNode;s&&s.removeChild(t.viewNode)}for(var u=t.boxOffset+e,l=[];t.firstPseudo===r;)l.push(t),t=t.parent;var c=l.pop(),h=c.shadowSibling;return i.loop((function(){for(;l.length>0;){c=l.pop(),t=new co(c.sourceNode,t,u),0==l.length&&(t.offsetInNode=o,t.after=a),t.shadowType=c.shadowType,t.shadowContext=c.shadowContext,t.nodeShadow=c.nodeShadow,t.shadowSibling=c.shadowSibling?c.shadowSibling:h,h=null;var e=n.setCurrent(t,!1);if(e.isPending())return e}return Ti(!1)})).then((function(){i.finish(t)})),i.result()},i.createElement=function(t,e){return t==W.XHTML?this.document.createElement(e):this.document.createElementNS(t,e)},i.applyFootnoteStyle=function(t,e,n){var i={},r=Uo(this.footnoteStyle,"_pseudos");if(t=this.computeStyle(t,e,this.footnoteStyle,i),r&&r.before){var o={},a=this.createElement(W.XHTML,"span");zr(a,"before"),n.appendChild(a),this.computeStyle(t,e,r.before,o),delete o.content,this.applyComputedStyles(a,o)}return delete i.content,this.applyComputedStyles(n,i),t},i.processFragmentedBlockEdge=function(t){t&&t.walkUpBlocks((function(t){var e=t.inheritedProps["box-decoration-break"];if(!e||"slice"===e){var n=t.viewNode;t.vertical?(et(n,"padding-left","0"),et(n,"border-left","none"),et(n,"border-top-left-radius","0"),et(n,"border-bottom-left-radius","0")):(et(n,"padding-bottom","0"),et(n,"border-bottom","none"),et(n,"border-bottom-left-radius","0"),et(n,"border-bottom-right-radius","0"))}}))},i.convertLengthToPx=function(t,e,n){var i=t.num,r=t.unit;if(function(t){switch(t.toLowerCase()){case"em":case"ex":case"rem":return!0;default:return!1}}(r)){for(var o=e;o&&1!==o.nodeType;)o=o.parentNode;return Ko(t,parseFloat(n.getElementComputedStyle(o)["font-size"]),this.context).num}var a=this.context.queryUnitSize(r,!1);return a?i*a:t},i.isSameNodePositionStep=function(t,e){if(t.shadowContext){if(!e.shadowContext)return!1;var n=1===e.node.nodeType?e.node:e.node.parentElement;return t.shadowContext.owner===e.shadowContext.owner&&Vr(1===t.node.nodeType?t.node:t.node.parentElement)===Vr(n)}return t.node===e.node},i.isSameNodePosition=function(t,e){var n=this;return t.offsetInNode===e.offsetInNode&&t.after==e.after&&t.steps.length===e.steps.length&&t.steps.every((function(t,i){return n.isSameNodePositionStep(t,e.steps[i])}))},i.isPseudoelement=function(t){return!!Vr(t)},n}(mt);ch.SVG_URL_ATTRIBUTES=["color-profile","clip-path","cursor","filter","marker","marker-start","marker-end","marker-mid","fill","stroke","mask"];var hh,fh={"box-decoration-break":!0,"float-min-wrap-block":!0,"float-reference":!0,"flow-into":!0,"flow-linger":!0,"flow-options":!0,"flow-priority":!0,"footnote-policy":!0,page:!0},dh=function(){function t(t){this.layoutBox=t.layoutBox,this.window=t.window}var e=t.prototype;return e.subtractOffsets=function(t,e){var n=e.left,i=e.top;return{left:t.left-n,top:t.top-i,right:t.right-n,bottom:t.bottom-i,width:t.width,height:t.height}},e.getRangeClientRects=function(t){var e=this,n=t.getClientRects(),i=this.layoutBox.getBoundingClientRect();return Array.from(n).map((function(t){return e.subtractOffsets(t,i)}))},e.getElementClientRect=function(t){var e=t.getBoundingClientRect(),n=this.layoutBox.getBoundingClientRect();return this.subtractOffsets(e,n)},e.getElementComputedStyle=function(t){return this.window.getComputedStyle(t,null)},t}(),ph=function(){function t(t,e,n,i,r){this.window=t,this.fontSize=e,this.document=t.document,this.root=n||this.document.body;var o=this.root.firstElementChild;o||((o=this.document.createElement("div")).setAttribute("data-vivliostyle-outer-zoom-box","true"),this.root.appendChild(o));var a=o.firstElementChild;a||((a=this.document.createElement("div")).setAttribute("data-vivliostyle-spread-container","true"),o.appendChild(a));var s=o.nextElementSibling;s||((s=this.document.createElement("div")).setAttribute("data-vivliostyle-layout-box","true"),this.root.appendChild(s)),this.outerZoomBox=o,this.contentContainer=a,this.layoutBox=s;var u=new dh(this).getElementComputedStyle(this.root);this.width=i||parseFloat(u.width)||t.innerWidth,this.height=r||parseFloat(u.height)||t.innerHeight}var e=t.prototype;return e.resetZoom=function(){et(this.outerZoomBox,"width",""),et(this.outerZoomBox,"height",""),et(this.contentContainer,"width",""),et(this.contentContainer,"height",""),et(this.contentContainer,"transform","")},e.zoom=function(t,e,n){et(this.outerZoomBox,"width",t*n+"px"),et(this.outerZoomBox,"height",e*n+"px"),et(this.contentContainer,"width",t+"px"),et(this.contentContainer,"height",e+"px"),et(this.contentContainer,"transform","scale("+n+")")},e.clear=function(){for(var t=this.root;t.lastChild;)t.removeChild(t.lastChild)},t}(),gh=function(){function t(t,e,n){this.store=t,this.url=e,this.document=n,this.lang=null,this.totalOffset=-1,this.lastOffset=1,this.root=n.documentElement;var i=null,r=null;if(this.root.namespaceURI==W.XHTML){for(var o=this.root.firstChild;o;o=o.nextSibling)if(1==o.nodeType){var a=o;if(a.namespaceURI==W.XHTML)switch(a.localName){case"head":r=a;break;case"body":i=a}}this.lang=this.root.getAttribute("lang")}this.body=i,this.head=r,this.last=this.root,this.last.setAttribute("data-adapt-eloff","0")}var e=t.prototype;return e.doc=function(){return new bh([this.document])},e.getElementOffset=function(t){var e=t.getAttribute("data-adapt-eloff");if(e)return parseInt(e,10);for(var n=this.lastOffset,i=this.last;i!=t;){var r=i.firstChild;if(!r)for(;!(r=i.nextSibling);)if(null==(i=i.parentNode))throw new Error("Internal error");i=r,1==r.nodeType?(r.setAttribute("data-adapt-eloff",n.toString()),++n):n+=r.textContent.length}return this.lastOffset=n,this.last=t,n-1},e.getNodeOffset=function(t,e,n){var i=0,r=t,o=null;if(1==r.nodeType){if(!n)return this.getElementOffset(r)}else{if(i=e,!(o=r.previousSibling))return i+=1,this.getElementOffset(r=r.parentNode)+i;r=o}for(;;){for(;r.lastChild;)r=r.lastChild;if(1==r.nodeType)break;if(i+=r.textContent.length,!(o=r.previousSibling)){r=r.parentNode;break}r=o}return i+=1,this.getElementOffset(r)+i},e.getTotalOffset=function(){return this.totalOffset<0&&(this.totalOffset=this.getNodeOffset(this.root,0,!0)),this.totalOffset},e.getNodeByOffset=function(t){for(var e,n=this,i=this.root,r=function(){if((e=n.getElementOffset(i))>=t)return{v:i};var r=i.children;if(!r)return"break";var o=ft(r.length,(function(e){return n.getElementOffset(r[e])>t}));if(0==o)return"break";i=r[o-1]};;){var o=r();if("break"===o)break;if("object"==typeof o)return o.v}for(var a=e+1,s=i,u=s.firstChild||s.nextSibling,l=null;;){if(u){if(1==u.nodeType)break;if(l=s=u,(a+=u.textContent.length)>t&&!/^\s*$/.test(u.textContent))break}else if(!(s=s.parentNode))break;u=s.nextSibling}return u&&l&&/^\s*$/.test(l.textContent)&&(l=u),l||i},e.buildIdMap=function(t){var e=t.getAttribute("id");e&&!this.idMap[e]&&(this.idMap[e]=t);var n=t.getAttributeNS(W.XML,"id");n&&!this.idMap[n]&&(this.idMap[n]=t);for(var i=t.firstElementChild;i;i=i.nextElementSibling)this.buildIdMap(i)},e.getElement=function(t){var e=t.match(/([^#]*)#(.+)$/);if(!e||e[1]&&e[1]!=this.url)return null;var n=e[2],i=this.document.getElementById(n);return!i&&this.document.getElementsByName&&(i=this.document.getElementsByName(n)[0]),i||(this.idMap||(this.idMap={},this.buildIdMap(this.document.documentElement)),i=this.idMap[n]),i},t}();function mh(t,e,n){var i,r=n||new DOMParser;try{i=r.parseFromString(t,e)}catch(t){}if(!i)return null;var o=i.documentElement;if("parsererror"===o.localName)return null;for(var a=o.firstElementChild;a;a=a.nextElementSibling)if("parsererror"===a.localName)return null;return i}function vh(t,e){var n=t.responseXML;if(!n){var i=new DOMParser,r=t.responseText;if(r){var o=function(t){var e=t.contentType;if(e){for(var n=Object.keys(hh),i=0;i<n.length;i++)if(hh[n[i]]===e)return e;if(e.match(/\+xml$/))return hh.APPLICATION_XML}var r=t.url.match(/\.([^./]+)$/);if(r)switch(r[1]){case"html":case"htm":return hh.TEXT_HTML;case"xhtml":case"xht":return hh.APPLICATION_XHTML_XML;case"svg":case"svgz":return hh.IMAGE_SVG_XML;case"opf":case"xml":return hh.APPLICATION_XML}return null}(t);if((n=mh(r,o||hh.APPLICATION_XML,i))&&!o){var a=n.documentElement;"html"!==a.localName.toLowerCase()||a.namespaceURI?"svg"===a.localName.toLowerCase()&&n.contentType!==hh.IMAGE_SVG_XML&&(n=mh(r,hh.IMAGE_SVG_XML,i)):n=mh(r,hh.TEXT_HTML,i)}n||(n=mh(r,hh.TEXT_HTML,i))}}return Ti(n?new gh(e,t.url,n):null)}!function(t){t.TEXT_HTML="text/html",t.TEXT_XML="text/xml",t.APPLICATION_XML="application/xml",t.APPLICATION_XHTML_XML="application/xhtml+xml",t.IMAGE_SVG_XML="image/svg+xml"}(hh||(hh={}));var Eh=new(function(){function t(t){this.fn=t}var e=t.prototype;return e.check=function(t){return this.fn(t)},e.withAttribute=function(e,n){var i=this;return new t((function(t){return i.check(t)&&1==t.nodeType&&t.getAttribute(e)==n}))},e.withChild=function(e,n){var i=this;return new t((function(t){if(!i.check(t))return!1;var r=new bh([t]);return r=r.child(e),n&&(r=r.predicate(n)),r.size()>0}))},t}())((function(t){return!0})),bh=function(){function t(t){this.nodes=t}var e=t.prototype;return e.asArray=function(){return this.nodes},e.size=function(){return this.nodes.length},e.predicate=function(e){for(var n,i=[],r=_(this.nodes);!(n=r()).done;){var o=n.value;e.check(o)&&i.push(o)}return new t(i)},e.forEachNode=function(e){for(var n=[],i=function(t){n.push(t)},r=0;r<this.nodes.length;r++)e(this.nodes[r],i);return new t(n)},e.forEach=function(t){for(var e=[],n=0;n<this.nodes.length;n++)e.push(t(this.nodes[n]));return e},e.forEachNonNull=function(t){for(var e=[],n=0;n<this.nodes.length;n++){var i=t(this.nodes[n]);null!=i&&e.push(i)}return e},e.child=function(t){return this.forEachNode((function(e,n){for(var i=e.firstChild;i;i=i.nextSibling)1==i.nodeType&&i.localName==t&&n(i)}))},e.childElements=function(){return this.forEachNode((function(t,e){for(var n=t.firstChild;n;n=n.nextSibling)1==n.nodeType&&e(n)}))},e.attribute=function(t){return this.forEachNonNull((function(e){return 1==e.nodeType?e.getAttribute(t):null}))},e.textContent=function(){return this.forEach((function(t){return t.textContent}))},t}(),Ch=new Bi((function(){var t=Ni("uaStylesheetBase"),e=Ul(),n=K("user-agent-base.css",X),i=new ja(null,null,null,null,null,e,!0);return i.startStylesheet($i.USER_AGENT),Xa=i.cascade,Cr(Xi,i,n,null,null).thenFinish(t),t.result()}),"uaStylesheetBaseFetcher"),yh=function(){function t(t,e,n,i,r,o,a,s,u,l){this.store=t,this.rootScope=e,this.pageScope=n,this.cascade=i,this.rootBox=r,this.fontFaces=o,this.footnoteProps=a,this.flowProps=s,this.viewportProps=u,this.pageProps=l,this.fontDeobfuscator=t.fontDeobfuscator,this.validatorSet=t.validatorSet,this.pageScope.defineBuiltIn("has-content",(function(t){var e=this.currentLayoutPosition,n=e.firstFlowChunkOfFlow(t=t);return this.matchPageSide(e.startSideOfFlow(t))&&e.hasContent(t,this.lookupOffset)&&!!n&&!this.flowChunkIsAfterParentFlowForcedBreak(n)})),this.pageScope.defineName("page-number",new Ee(this.pageScope,(function(){return this.pageNumberOffset+this.currentLayoutPosition.page}),"page-number"))}return t.prototype.sizeViewport=function(t,e,n,i){if(this.viewportProps.length){var r=new Wt(this.rootScope,t,e,n),o=function(t,e){for(var n={},i=0;i<e.length;i++)Wo(t,n,e[i],0,null,null,null);return n}(r,this.viewportProps),a=o.width,s=o.height,u=o["text-zoom"],l=1;if(a&&s||u){var c=Ht.em;if((u?u.evaluate(r,"text-zoom"):null)===Ye.scale&&(l=c/n,n=c,t*=l,e*=l),a&&s){var h=$e(a.evaluate(r,"width"),r),f=$e(s.evaluate(r,"height"),r);if(h>0&&f>0)return{width:i&&i.spreadView?2*(h+i.pageBorder):h,height:f,fontSize:n}}}}return{width:t,height:e,fontSize:n}},t}(),wh=function(t){function n(e,n,i,r,o,a,s,u,l,c,h,f,d){var p;for(var g in(p=t.call(this,e.rootScope,r.width,r.height,r.fontSize)||this).style=e,p.xmldoc=n,p.viewport=r,p.clientLayout=o,p.fontMapper=a,p.customRenderer=s,p.fallbackMap=u,p.pageNumberOffset=l,p.documentURLTransformer=c,p.counterStore=h,p.primaryFlows={body:!0},p.rootPageBoxInstance=null,p.styler=null,p.stylerMap=null,p.currentLayoutPosition=null,p.layoutPositionAtPageStart=null,p.lookupOffset=0,p.pageBoxInstances={},p.pageManager=null,p.pageBreaks={},p.pageProgression=null,p.isVersoFirstPage=!1,p.blankPageAtStart=!1,p.pageSheetSize={},p.pageSheetHeight=0,p.pageSheetWidth=0,p.lang=n.lang||i,p.faces=new Xl(p.style.fontDeobfuscator),p.rootPageFloatLayoutContext=new Cs(null,null,null,null,null,null,null),p.pageProgression=f||null,p.isVersoFirstPage=!!d,e.flowProps){var m=_o(e.flowProps[g],"flow-consume");m&&(m.evaluate(L(p),"flow-consume")==Ye.all?p.primaryFlows[g]=!0:delete p.primaryFlows[g])}return p}I(n,t);var i=n.prototype;return i.init=function(){var t=this,e=Ni("StyleInstance.init"),n=this.counterStore.createCounterListener(this.xmldoc.url),i=this.counterStore.createCounterResolver(this.xmldoc.url,this.style.rootScope,this.style.pageScope);this.styler=new vl(this.xmldoc,this.style.cascade,this.style.rootScope,this,this.primaryFlows,this.style.validatorSet,n,i),i.setStyler(this.styler),this.styler.resetFlowChunkStream(this),this.stylerMap={},this.stylerMap[this.xmldoc.url]=this.styler;var r=this.styler.getTopContainerStyle();this.pageProgression||(this.pageProgression=Cc(r)),this.matchStartPageSide(this.styler.breakBeforeValues[0])||(0===this.pageNumberOffset?this.isVersoFirstPage=!0:this.blankPageAtStart=!0),this.rootPageBoxInstance=new fc(this.style.rootBox);var o=this.style.cascade.createInstance(this,n,i,this.lang);this.rootPageBoxInstance.applyCascadeAndInit(o,r),this.rootPageBoxInstance.resolveAutoSizing(this),this.pageManager=new Kc(o,this.style.pageScope,this.rootPageBoxInstance,this,r);for(var a,s=[],u=_(this.style.fontFaces);!(a=u()).done;){var l=a.value;if(!l.condition||l.condition.evaluate(this)){var c=Gl(l.properties,this),h=new Wl(c);s.push(h)}}this.fontMapper.findOrLoadFonts(s,this.faces).thenFinish(e);var f=this.style.pageProps;return Object.keys(f).forEach((function(e){var n=Ic(xc(f[e]),t);t.pageSheetSize[e]={width:n.pageWidth+2*n.cropOffset,height:n.pageHeight+2*n.cropOffset}})),e.result()},i.matchStartPageSide=function(t){var n=this.pageNumberOffset%2==(this.isVersoFirstPage?1:0),i=this.pageProgression==e.PageProgression.LTR;switch(t){case"left":return n!==i;case"right":return n===i;case"recto":return n;case"verso":return!n;default:return!0}},i.getStylerForDoc=function(t){var e=this.stylerMap[t.url];if(!e){var n=this.style.store.getStyleForDoc(t),i=new Wt(n.rootScope,this.pageWidth(),this.pageHeight(),this.initialFontSize),r=this.counterStore.createCounterListener(t.url),o=this.counterStore.createCounterResolver(t.url,n.rootScope,n.pageScope);e=new vl(t,n.cascade,n.rootScope,i,this.primaryFlows,n.validatorSet,r,o),this.stylerMap[t.url]=e}return e},i.registerInstance=function(t,e){this.pageBoxInstances[t]=e},i.lookupInstance=function(t){return this.pageBoxInstances[t]},i.encounteredFlowChunk=function(t,e){var n=this.currentLayoutPosition;if(n){n.flows[t.flowName]?e=n.flows[t.flowName]:n.flows[t.flowName]=e;var i=n.flowPositions[t.flowName];i||(i=new po,n.flowPositions[t.flowName]=i);var r=new ho({steps:[{node:t.element,shadowType:ao.NONE,shadowContext:null,nodeShadow:null,shadowSibling:null,formattingContext:null,fragmentIndex:0}],offsetInNode:0,after:!1,preprocessedTextContent:null}),o=new fo(r,t);i.positions.push(o)}},i.getConsumedOffset=function(t){for(var e=Number.POSITIVE_INFINITY,n=0;n<t.positions.length;n++){for(var i=t.positions[n].chunkPosition.primary,r=i.steps[0].node,o=i.offsetInNode,a=i.after,s=0;r.ownerDocument!=this.xmldoc.document;)s++,r=i.steps[s].node,a=!1,o=0;var u=this.xmldoc.getNodeOffset(r,o,a);u<e&&(e=u)}return e},i.getPosition=function(t,e){if(!t)return 0;var n=Number.POSITIVE_INFINITY;for(var i in this.primaryFlows){var r=t.flowPositions[i];if(e||r&&0!=r.positions.length||!this.currentLayoutPosition||(this.styler.styleUntilFlowIsReached(i),r=this.currentLayoutPosition.flowPositions[i],t!=this.currentLayoutPosition&&r&&(r=r.clone(),t.flowPositions[i]=r)),r){var o=this.getConsumedOffset(r);o<n&&(n=o)}}return n},i.dumpLocation=function(t){for(var e in f.debug("Location - page",this.currentLayoutPosition.page),f.debug("  current:",t),f.debug("  lookup:",this.lookupOffset),this.currentLayoutPosition.flowPositions)for(var n,i=_(this.currentLayoutPosition.flowPositions[e].positions);!(n=i()).done;)f.debug("  Chunk",e+":",n.value.flowChunk.startOffset)},i.matchPageSide=function(t){switch(t){case"left":case"right":case"recto":case"verso":return new me(this.style.pageScope,t+"-page").evaluate(this);default:return!0}},i.updateStartSide=function(t){for(var e in t.flowPositions){var n=t.flowPositions[e];if(n&&n.positions.length>0){var i=n.positions[0].flowChunk;if(this.getConsumedOffset(n)===i.startOffset){var r=n.positions[0].flowChunk.breakBefore,o=Ls(n.startSide);n.startSide=ks(Rs(o,r))}}}},i.selectPageMaster=function(t){var e=this.currentLayoutPosition,n=this.getPosition(e);if(n==Number.POSITIVE_INFINITY)return null;for(var i,r=this.rootPageBoxInstance.children,o=0;o<r.length;o++)if("vivliostyle-page-rule-master"!==(i=r[o]).pageBox.pseudoName){var a=1,s=i.getProp(this,"utilization");s&&s.isNum()&&(a=s.num);var u=this.queryUnitSize("em",!1),l=this.pageWidth()*this.pageHeight(),c=Math.ceil(a*l/(u*u));this.lookupOffset=this.styler.styleUntil(n,c),this.updateStartSide(e),this.layoutPositionAtPageStart=e.clone(),this.initLingering(),this.clearScope(this.style.pageScope);var h=i.getProp(this,"enabled");if(!h||h===Ye._true)return 1===e.page&&this.blankPageAtStart&&(i.style={},t={}),this.pageManager.getPageRulePageMaster(i,t)}throw new Error("No enabled page masters")},i.flowChunkIsAfterParentFlowForcedBreak=function(t){var e=this.layoutPositionAtPageStart.flows,n=e[t.flowName].parentFlowName;if(n){var i=t.startOffset,r=e[n].forcedBreakOffsets;if(!r.length||i<r[0])return!1;var o=ft(r.length,(function(t){return r[t]>i}))-1,a=r[o],s=this.layoutPositionAtPageStart.flowPositions[n],u=this.getConsumedOffset(s);return!(a<u)&&(u<a||!this.matchPageSide(s.startSide))}return!1},i.setFormattingContextToColumn=function(t,e){var n=this.currentLayoutPosition.flows[e];n.formattingContext||(n.formattingContext=new Qs(null)),t.flowRootFormattingContext=n.formattingContext},i.layoutDeferredPageFloats=function(t){var e=t.pageFloatLayoutContext,n=e.getDeferredPageFloatContinuations();if(n.length&&"page"===n[0].float.floatReference){var i=n[0].float.nodePosition.steps[0].node,r=i&&this.xmldoc.getNodeOffset(i,0,!1),o=this.layoutPositionAtPageStart.flowPositions.body,a=o&&this.getConsumedOffset(o);if(null!=r&&null!=a&&r>a)return Ti(!0)}var s=Ni("layoutDeferredPageFloats"),u=!1,l=0;return s.loopWithFrame((function(i){if(l!==n.length){var r=n[l++],o=r.float,a=(new ws).findByFloat(o),s=a.findPageFloatFragment(o,e);if(!s||!s.hasFloat(o))return e.isForbidden(o)||e.hasPrecedingFloatsDeferredToNext(o)?(e.deferPageFloat(r),void i.breakLoop()):void t.layoutPageFloatInner(r,a,null,s).then((function(t){if(t){var n=e.parent.isInvalidated();n?i.breakLoop():(e.isInvalidated()&&!n&&(u=!0,e.validate()),i.continueLoop())}else i.breakLoop()}));i.continueLoop()}else i.breakLoop()})).then((function(){u&&e.invalidate(),s.finish(!0)})),s.result()},i.getLastAfterPositionIfDeferredFloatsExists=function(t,e){var n;return t.pageFloatLayoutContext.getPageFloatContinuationsDeferredToNext().length>0&&t.lastAfterPosition?(e?(n=e.clone()).primary=t.lastAfterPosition:n=new ho(t.lastAfterPosition),n):null},i.layoutColumn=function(t,e){var n=this,i=this.currentLayoutPosition.flowPositions[e];if(!i||!this.matchPageSide(i.startSide))return Ti(!0);i.startSide="any",this.setFormattingContextToColumn(t,e),t.init(),this.primaryFlows[e]&&t.bands.length>0&&(t.forceNonfitting=!1);var r=Ni("layoutColumn");return this.layoutDeferredPageFloats(t).then((function(){if(t.pageFloatLayoutContext.isInvalidated())r.finish(!0);else{var o=[],a=[],s=!0;r.loopWithFrame((function(r){if(t.pageFloatLayoutContext.hasContinuingFloatFragmentsInFlow(e))r.breakLoop();else{for(var u=function(){for(var e=0;a.includes(e);)e++;var u=i.positions[e];if(u.flowChunk.startOffset>n.lookupOffset||n.flowChunkIsAfterParentFlowForcedBreak(u.flowChunk))return"break";for(var l=e+1;l<i.positions.length;l++)if(!a.includes(l)){var c=i.positions[l];if(c.flowChunk.startOffset>n.lookupOffset||n.flowChunkIsAfterParentFlowForcedBreak(c.flowChunk))break;c.flowChunk.isBetter(u.flowChunk)&&(u=c,e=l)}var h=u.flowChunk,f=!0;return t.layout(u.chunkPosition,s,i.breakAfter).then((function(l){if(t.pageFloatLayoutContext.isInvalidated())r.breakLoop();else{if(s=!1,u.flowChunk.repeated&&(null===l||h.exclusive)&&o.push(e),h.exclusive)return a.push(e),void r.breakLoop();var c=!!l||!!t.pageBreakType,d=n.getLastAfterPositionIfDeferredFloatsExists(t,l);t.pageBreakType&&d?(u.chunkPosition=d,i.breakAfter=t.pageBreakType,t.pageBreakType=null):(a.push(e),(l||d)&&(u.chunkPosition=l||d,o.push(e)),t.pageBreakType&&(i.startSide=ks(t.pageBreakType))),c?r.breakLoop():(t.forceNonfitting=!1,f?f=!1:r.continueLoop())}})),f?(f=!1,{v:void 0}):void 0};i.positions.length-a.length>0;){var l=u();if("break"===l)break;if("object"==typeof l)return l.v}r.breakLoop()}})).then((function(){if(!t.pageFloatLayoutContext.isInvalidated()){i.positions=i.positions.filter((function(t,e){return o.includes(e)||!a.includes(e)})),"column"===i.breakAfter&&(i.breakAfter=null),t.saveDistanceToBlockEndFloats();var e=t.pageFloatLayoutContext.getMaxReachedAfterEdge();t.updateMaxReachedAfterEdge(e)}r.finish(!0)}))}})),r.result()},i.createLayoutConstraint=function(t){var e=this.counterStore.createLayoutConstraint(this.currentLayoutPosition.page-1);return new du([e].concat(t.getLayoutConstraints()))},i.createAndLayoutColumn=function(t,e,n,i,r,o,a,s,u,l,c,h,f,d){var p,g=this,m=t.vertical?t.isAutoWidth&&t.isRightDependentOnAutoWidth:t.isAutoHeight&&t.isTopDependentOnAutoHeight,v=r.element,E=new Cs(s,ps.COLUMN,null,a,null,null,null),b=this.currentLayoutPosition.clone(),C=Ni("createAndLayoutColumn");return C.loopWithFrame((function(t){var C=g.createLayoutConstraint(E);if(u>1){var y=g.viewport.document.createElement("div");if(et(y,"position","absolute"),v.appendChild(y),(p=new mu(y,f,g.clientLayout,C,E)).forceNonfitting=d,p.vertical=r.vertical,p.snapHeight=r.snapHeight,p.snapWidth=r.snapWidth,r.vertical){var w=o*(c+l)+r.paddingTop;p.setHorizontalPosition(r.paddingLeft,r.width),p.setVerticalPosition(w,c)}else{var D=o*(c+l)+r.paddingLeft;p.setVerticalPosition(r.paddingTop,r.height),p.setHorizontalPosition(D,c)}p.originX=e,p.originY=n}else(p=new mu(v,f,g.clientLayout,C,E)).copyFrom(r);p.exclusions=m?[]:i.concat(),p.innerShape=h,E.setContainer(p),p.width>=0?g.layoutColumn(p,a).then((function(){E.isInvalidated()||E.finish(),p.pageFloatLayoutContext.isInvalidated()&&!s.isInvalidated()?(p.pageFloatLayoutContext.validate(),g.currentLayoutPosition=b.clone(),p.element!==v&&v.removeChild(p.element),t.continueLoop()):t.breakLoop()})):(E.finish(),t.breakLoop())})).then((function(){C.finish(p)})),C.result()},i.setPagePageFloatLayoutContextContainer=function(t,e,n){(e instanceof Xc||e instanceof dc&&!(e instanceof zc))&&t.setContainer(n)},i.getRegionPageFloatLayoutContext=function(t,e,n,i){var r=e.getProp(this,"writing-mode")||null,o=e.getProp(this,"direction")||null;return new Cs(t,ps.REGION,n,i,null,r,o)},i.layoutFlowColumnsWithBalancing=function(t,e,n,i,r,o,a,s,u){var l=this,c=this.currentLayoutPosition.clone(),h=this.getRegionPageFloatLayoutContext(o,e,a,s),f=!0,d=function(){return l.currentLayoutPosition=c.clone(),l.layoutFlowColumns(t,e,n,i,r,o,h,a,s,u,f).thenAsync((function(t){return Ti(t?{columns:t,position:l.currentLayoutPosition}:null)}))};return d().thenAsync((function(t){if(!t)return Ti(null);if(u<=1)return Ti(t.columns);var n=e.getProp(l,"column-fill")||Ye.balance,i=function(t,e,n,i,r,o,a){if(e===Ye.auto)return null;var s=o[o.length-1];return 0===a.positions.length||s&&s.pageBreakType?new ll(n,i,r,t):e===Ye.balance_all?new fl(n,i,r):null}(u,n,d,h,a,t.columns,l.currentLayoutPosition.flowPositions[s]);return i?(f=!1,o.lock(),h.lock(),i.balanceColumns(t).thenAsync((function(t){return o.unlock(),o.validate(),h.unlock(),l.currentLayoutPosition=t.position,Ti(t.columns)}))):Ti(t.columns)}))},i.layoutFlowColumns=function(t,e,n,i,r,o,a,s,u,l,c){var h=this,f=Ni("layoutFlowColumns"),d=this.currentLayoutPosition.clone(),p=e.getPropAsNumber(this,"column-gap"),g=l>1?e.getPropAsNumber(this,"column-width"):s.width,m=e.getActiveRegions(this),v=In(e.getProp(this,"shape-inside"),0,0,s.width,s.height,this),E=new ch(u,this,this.viewport,this.styler,m,this.xmldoc,this.faces,this.style.footnoteProps,this,t,this.customRenderer,this.fallbackMap,this.documentURLTransformer),b=0,C=null,y=[];return f.loopWithFrame((function(t){h.createAndLayoutColumn(e,n,i,r,s,b++,u,a,l,p,g,v,E,c).then((function(e){return o.isInvalidated()?(y=null,void t.breakLoop()):(!(e.pageBreakType&&"column"!==e.pageBreakType)&&b!==l||a.isInvalidated()||a.finish(),a.isInvalidated()?(b=0,h.currentLayoutPosition=d.clone(),a.validate(),void(a.isLocked()?(y=null,t.breakLoop()):t.continueLoop())):(y[b-1]=C=e,C.pageBreakType&&"column"!=C.pageBreakType&&(b=l,"region"!=C.pageBreakType&&(h.pageBreaks[u]=!0)),void(b<l?t.continueLoop():t.breakLoop())))}))})).then((function(){f.finish(y)})),f.result()},i.layoutContainer=function(t,e,n,i,r,o,a){var s=this;e.reset();var u=e.getProp(this,"enabled");if(u&&u!==Ye._true)return Ti(!0);var l=Ni("layoutContainer"),c=e.getProp(this,"wrap-flow")===Ye.auto,h=e.getProp(this,"flow-from"),f=this.viewport.document.createElement("div"),d=e.getProp(this,"position");et(f,"position",d?d.name:"absolute");var p=e instanceof zc;e instanceof gc?n.appendChild(f):n.insertBefore(f,n.firstChild);var g,m=new mo(f);m.vertical=e.vertical,m.exclusions=o,e.prepareContainer(this,m,t,this.faces,this.clientLayout),m.originX=i,m.originY=r,i+=m.left+m.marginLeft+m.borderLeft,r+=m.top+m.marginTop+m.borderTop,this.setPagePageFloatLayoutContextContainer(a,e,m);var v=!1;if(h&&h.isIdent())if(this.pageBreaks[h.toString()])a.isInvalidated()||e.finishContainer(this,m,t,null,1,this.clientLayout,this.faces),g=Ti(!0);else{var E=Ni("layoutContainer.inner"),b=h.toString(),C=e.getPropAsNumber(this,"column-count");this.layoutFlowColumnsWithBalancing(t,e,i,r,o,a,m,b,C).then((function(n){if(!a.isInvalidated()){var i=n[0];i.element===f&&(m=i),m.computedBlockSize=Math.max.apply(null,n.map((function(t){return t.computedBlockSize}))),e.finishContainer(s,m,t,i,C,s.clientLayout,s.faces);var r=s.currentLayoutPosition.flowPositions[b];r&&"region"===r.breakAfter&&(r.breakAfter=null)}E.finish(!0)})),g=E.result()}else{var y=e.getProp(this,"content");if(y&&Eo(y)){var w="span";y.url&&(w="img");var D=this.viewport.document.createElement(w);y.visit(new vo(D,this,y,this.counterStore.getExprContentListener())),f.appendChild(D),"img"==w&&e.transferSinglUriContentProps(this,D,this.faces),e.transferContentProps(this,m,t,this.faces)}else e.suppressEmptyBoxGeneration&&(n.removeChild(f),v=!0);v||e.finishContainer(this,m,t,null,1,this.clientLayout,this.faces),g=Ti(!0)}return g.then((function(){if(a.isInvalidated())l.finish(!0);else{if(!e.isAutoHeight||Math.floor(m.computedBlockSize)>0){if(!v&&!c){var u=e.getProp(s,"shape-outside"),h=m.getOuterShape(u,s);o.push(h)}}else if(0==e.children.length)return n.removeChild(f),void l.finish(!0);var d=p?0:e.children.length-1;l.loop((function(){for(;d>=0&&d<e.children.length;){var n=e.children[p?d++:d--],u=s.layoutContainer(t,n,f,i,r,o,a);if(u.isPending())return u.thenAsync((function(){return Ti(!a.isInvalidated())}));if(a.isInvalidated())break}return Ti(!1)})).then((function(){l.finish(!0)}))}})),l.result()},i.processLinger=function(){var t=this.currentLayoutPosition.page;for(var e in this.currentLayoutPosition.flowPositions)for(var n=this.currentLayoutPosition.flowPositions[e],i=n.positions.length-1;i>=0;i--){var r=n.positions[i];r.flowChunk.startPage>=0&&r.flowChunk.startPage+r.flowChunk.linger-1<=t&&n.positions.splice(i,1)}},i.initLingering=function(){var t=this.currentLayoutPosition.page;for(var e in this.currentLayoutPosition.flowPositions)for(var n=this.currentLayoutPosition.flowPositions[e],i=n.positions.length-1;i>=0;i--){var r=n.positions[i];r.flowChunk.startPage<0&&r.flowChunk.startOffset<this.lookupOffset&&(r.flowChunk.startPage=t)}},i.noMorePrimaryFlows=function(t){for(var e in this.primaryFlows){var n=t.flowPositions[e];if(n&&n.positions.length>0)return!1}return!0},i.layoutNextPage=function(t,n){var i=this,r=t.container===t.bleedBox;this.pageBreaks={},n?(this.currentLayoutPosition=n.clone(),this.styler.replayFlowElementsFromOffset(n.highestSeenOffset)):(this.currentLayoutPosition=new go,this.styler.replayFlowElementsFromOffset(-1)),this.lang&&t.bleedBox.setAttribute("lang",this.lang),(n=this.currentLayoutPosition).page++,this.clearScope(this.style.pageScope),this.layoutPositionAtPageStart=n.clone();var o=r?{}:this.pageManager.getCascadedPageStyle(),a=this.selectPageMaster(o);if(!a)return Ti(null);var s=0;if(!r){t.setAutoPageWidth(a.pageBox.specified.width.value===Qe),t.setAutoPageHeight(a.pageBox.specified.height.value===Je),this.counterStore.setCurrentPage(t),this.counterStore.updatePageCounters(o,this);var u=Ic(xc(o),this);this.setPageSizeAndBleed(u,t),function(t,e,n,i){var r=!1,o=!1,a=t.marks;if(a){var s=a.value;s.isSpaceList()?s.values.forEach((function(t){t===Ye.crop?r=!0:t===Ye.cross&&(o=!0)})):s===Ye.crop?r=!0:s===Ye.cross&&(o=!0)}if(r||o){var u=n.container,l=u.ownerDocument,c=e.bleed,h=$e(Sc,i),f=$e(Nc,i),d=$e(Tc,i);if(c){var p=t["background-color"];p&&p.value&&(n.bleedBox.style.backgroundColor=p.value.stringValue())}r&&Object.keys(yc).forEach((function(t){var e=function(t,e,n,i,r,o){var a=i;a<=r+2*Ht.mm&&(a=r+i/2);var s=Math.max(i,a),u=r+s+n/2,l=Fc(t,u,u),c=[[0,r+i],[i,r+i],[i,r+i-a]],h=c.map((function(t){return[t[1],t[0]]}));e!==yc.TOP_RIGHT&&e!==yc.BOTTOM_RIGHT||(c=c.map((function(t){return[r+s-t[0],t[1]]})),h=h.map((function(t){return[r+s-t[0],t[1]]}))),e!==yc.BOTTOM_LEFT&&e!==yc.BOTTOM_RIGHT||(c=c.map((function(t){return[t[0],r+s-t[1]]})),h=h.map((function(t){return[t[0],r+s-t[1]]})));var f=Pc(t,n);f.setAttribute("points",c.map((function(t){return t.join(",")})).join(" ")),l.appendChild(f);var d=Pc(t,n);return d.setAttribute("points",h.map((function(t){return t.join(",")})).join(" ")),l.appendChild(d),e.split(" ").forEach((function(t){l.style[t]=o+"px"})),l}(l,yc[t],h,d,c,f);u.appendChild(e)})),o&&Object.keys(wc).forEach((function(t){var e=function(t,e,n,i,r){var o,a,s=2*i;e===wc.TOP||e===wc.BOTTOM?(o=s,a=i):(o=i,a=s);var u=Fc(t,o,a),l=Pc(t,n);l.setAttribute("points","0,"+a/2+" "+o+","+a/2),u.appendChild(l);var c=Pc(t,n);c.setAttribute("points",o/2+",0 "+o/2+","+a),u.appendChild(c);var h,f=Pc(t,n,"circle");switch(f.setAttribute("cx",o/2),f.setAttribute("cy",a/2),f.setAttribute("r",i/4),u.appendChild(f),e){case wc.TOP:h=wc.BOTTOM;break;case wc.BOTTOM:h=wc.TOP;break;case wc.LEFT:h=wc.RIGHT;break;case wc.RIGHT:h=wc.LEFT}return Object.keys(wc).forEach((function(t){var n=wc[t];n===e?u.style[n]=r+"px":n!==h&&(u.style[n]="0",u.style["margin-"+n]="auto")})),u}(l,wc[t],h,d,f);u.appendChild(e)}))}}(o,u,t,this),s=u.bleedOffset+u.bleed}var l=!r&&a.getProp(this,"writing-mode")||Ye.horizontal_tb;this.pageVertical=l!=Ye.horizontal_tb;var c=a.getProp(this,"direction")||Ye.ltr,h=new Cs(this.rootPageFloatLayoutContext,ps.PAGE,null,null,null,l,c),f=Ni("layoutNextPage");return f.loopWithFrame((function(e){i.layoutContainer(t,a,t.bleedBox,s,s,[],h).then((function(){h.isInvalidated()||h.finish(),h.isInvalidated()?(i.currentLayoutPosition=i.layoutPositionAtPageStart.clone(),h.validate(),e.continueLoop()):e.breakLoop()}))})).then((function(){if(a.adjustPageLayout(i,t,i.clientLayout),!r){var o=new me(a.pageBox.scope,"left-page");t.side=o.evaluate(i)?e.PageSide.LEFT:e.PageSide.RIGHT,i.processLinger(),n=i.currentLayoutPosition,Object.keys(n.flowPositions).forEach((function(t){var e=n.flowPositions[t],r=e.breakAfter;!r||"page"!==r&&i.matchPageSide(r)||(e.breakAfter=null)}))}i.currentLayoutPosition=i.layoutPositionAtPageStart=null,n.highestSeenOffset=i.styler.getReachedOffset();var s=i.style.store.getTriggersForDoc(i.xmldoc);t.finish(s,i.clientLayout),i.noMorePrimaryFlows(n)&&(n=null),f.finish(n)})),f.result()},i.setPageSizeAndBleed=function(t,e){this.actualPageWidth=t.pageWidth,this.actualPageHeight=t.pageHeight,this.pageSheetWidth=t.pageWidth+2*t.cropOffset,this.pageSheetHeight=t.pageHeight+2*t.cropOffset,e.container.style.width=this.pageSheetWidth+"px",e.container.style.height=this.pageSheetHeight+"px",e.bleedBox.style.left=t.bleedOffset+"px",e.bleedBox.style.right=t.bleedOffset+"px",e.bleedBox.style.top=t.bleedOffset+"px",e.bleedBox.style.bottom=t.bleedOffset+"px",e.bleedBox.style.padding=t.bleed+"px",e.bleedBox.style.paddingTop=t.bleed+.01+"px"},n}(Wt),Dh=function(t){function e(e,n,i,r){var o;return(o=t.call(this,e.rootScope,e,n,i,r,e.validatorSet,!i)||this).masterHandler=e,o.insideRegion=!1,o}I(e,t);var n=e.prototype;return n.startPageTemplateRule=function(){},n.startPageMasterRule=function(t,e,n){var i=new Zl(this.masterHandler.pageScope,t,e,n,this.masterHandler.rootBox,this.condition,this.owner.getBaseSpecificity());this.masterHandler.pushHandler(new bc(i.scope,this.masterHandler,i,this.validatorSet))},n.startWhenRule=function(t){var n=t.expr;null!=this.condition&&(n=Se(this.scope,this.condition,n)),this.masterHandler.pushHandler(new e(this.masterHandler,n,this,this.regionId))},n.startDefineRule=function(){this.masterHandler.pushHandler(new Ya(this.scope,this.owner))},n.startFontFaceRule=function(){var t={};this.masterHandler.fontFaces.push({properties:t,condition:this.condition}),this.masterHandler.pushHandler(new Za(this.scope,this.owner,null,t,this.masterHandler.validatorSet))},n.startFlowRule=function(t){var e=this.masterHandler.flowProps[t];e||(this.masterHandler.flowProps[t]=e={}),this.masterHandler.pushHandler(new Za(this.scope,this.owner,null,e,this.masterHandler.validatorSet))},n.startViewportRule=function(){var t={};this.masterHandler.viewportProps.push(t),this.masterHandler.pushHandler(new Za(this.scope,this.owner,this.condition,t,this.masterHandler.validatorSet))},n.startFootnoteRule=function(t){var e=this.masterHandler.footnoteProps;if(t){var n=Vo(e,"_pseudos");(e=n[t])||(n[t]=e={})}this.masterHandler.pushHandler(new Za(this.scope,this.owner,null,e,this.masterHandler.validatorSet))},n.startRegionRule=function(){this.insideRegion=!0,this.startSelectorRule()},n.startPageRule=function(){var t=new nh(this.masterHandler.pageScope,this.masterHandler,this,this.validatorSet,this.masterHandler.pageProps);this.masterHandler.pushHandler(t),t.startPageRule()},n.startRuleBody=function(){if(ja.prototype.startRuleBody.call(this),this.insideRegion){this.insideRegion=!1;var t="R"+this.masterHandler.regionCount++;this.special("region-id",_e(t)),this.endRule();var n=new e(this.masterHandler,this.condition,this,t);this.masterHandler.pushHandler(n),n.startRuleBody()}},e}(ja);function Sh(t){var e=t.getAttribute("content");if(!e)return"";for(var n,i={};null!=(n=e.match(/^,?\s*([-A-Za-z_.][-A-Za-z_0-9.]*)\s*=\s*([-+A-Za-z_0-9.]*)\s*/));)e=e.substr(n[0].length),i[n[1]]=n[2];var r=i.width-0,o=i.height-0;return r&&o?"@-epubx-viewport{width:"+r+"px;height:"+o+"px;}":""}var Nh=function(t){function e(e){var n;return(n=t.call(this)||this).validatorSet=e,n.regionCount=0,n.fontFaces=[],n.footnoteProps={},n.flowProps={},n.viewportProps=[],n.pageProps={},n.rootScope=new Vt(null),n.pageScope=new Vt(n.rootScope),n.rootBox=new ql(n.rootScope),n.cascadeParserHandler=new Dh(L(n),null,null,null),n.slave=n.cascadeParserHandler,n}return I(e,t),e.prototype.error=function(t,e){f.warn("CSS parser:",t)},e}(tr);function Th(t,e){return e.parseOPSResource(t)}var Ah=function(t){function n(e){var n;return(n=t.call(this,Th,Ui.DOCUMENT)||this).fontDeobfuscator=e,n.styleByKey={},n.styleFetcherByKey={},n.styleByDocURL={},n.triggersByDocURL={},n.validatorSet=null,n.styleSheets=[],n.triggerSingleDocumentPreprocessing=!1,n}I(n,t);var i=n.prototype;return i.init=function(t,e){var n=this;this.setStyleSheets(t,e);var i=K("user-agent.xml",X),r=Ni("OPSDocStore.init");return this.validatorSet=Ul(),Ch.get().then((function(){n.load(i).then((function(){n.triggerSingleDocumentPreprocessing=!0,r.finish(!0)}))})),r.result()},i.getStyleForDoc=function(t){return this.styleByDocURL[t.url]},i.getTriggersForDoc=function(t){return this.triggersByDocURL[t.url]},i.setStyleSheets=function(t,e){this.clearStyleSheets(),t&&t.forEach(this.addAuthorStyleSheet,this),e&&e.forEach(this.addUserStyleSheet,this)},i.clearStyleSheets=function(){this.styleSheets.splice(0)},i.addAuthorStyleSheet=function(t){var e=t.url;e&&(e=K($(e),H)),this.styleSheets.push({url:e,text:t.text,flavor:$i.AUTHOR,classes:null,media:null})},i.addUserStyleSheet=function(t){var e=t.url;e&&(e=K($(e),H)),this.styleSheets.push({url:e,text:t.text,flavor:$i.USER,classes:null,media:null})},i.parseOPSResource=function(t){var n=this,i=Ni("OPSDocStore.load"),r=t.url,o=r.endsWith("?viv-toc-box");return vh(t,this).then((function(t){if(t){if(n.triggerSingleDocumentPreprocessing)for(var a=v(e.HOOKS.PREPROCESS_SINGLE_DOCUMENT),s=0;s<a.length;s++)try{a[s](t.document)}catch(t){f.warn("Error during single document preprocessing:",t)}for(var u=[],l=t.document.getElementsByTagNameNS(W.epub,"trigger"),c=0;c<l.length;c++){var h=l[c],d=h.getAttributeNS(W.EV,"observer"),p=h.getAttributeNS(W.EV,"event"),g=h.getAttribute("action"),m=h.getAttribute("ref");d&&p&&g&&m&&u.push({observer:d,event:p,action:g,ref:m})}n.triggersByDocURL[r]=u;var E=[],b=K("user-agent-page.css",X);if(E.push({url:b,text:Wi,flavor:$i.USER_AGENT,classes:null,media:null}),!o){for(var C,y=_(t.document.querySelectorAll("style, link, meta"));!(C=y()).done;){var w=C.value,D=w.localName;if(w.namespaceURI==W.XHTML)if("style"==D){var S=w.getAttribute("class"),N=w.getAttribute("media"),T=w.getAttribute("title");E.push({url:r,text:w.textContent,flavor:$i.AUTHOR,classes:T?S:null,media:N})}else if("link"==D){var A=w.getAttribute("rel"),x=w.getAttribute("class"),I=w.getAttribute("media");if("stylesheet"==A||"alternate stylesheet"==A&&x){var F=w.getAttribute("href");F=K(F,r);var P=w.getAttribute("title");E.push({url:F,text:null,classes:P?x:null,media:I,flavor:$i.AUTHOR})}}else"meta"==D&&"viewport"==w.getAttribute("name")&&E.push({url:r,text:Sh(w),flavor:$i.AUTHOR,classes:null,media:null})}for(var O=0;O<n.styleSheets.length;O++)E.push(n.styleSheets[O])}for(var R="",k=0;k<E.length;k++)R+=E[k].url,R+="^",E[k].text&&(R+=E[k].text),R+="^";var L=n.styleByKey[R];if(L)return n.styleByDocURL[r]=L,void i.finish(t);var B=n.styleFetcherByKey[R];B||(B=new Bi((function(){var t=Ni("fetchStylesheet"),e=0,i=new Nh(n.validatorSet);return t.loop((function(){if(e<E.length){var t=E[e++];return i.startStylesheet(t.flavor),null!==t.text?Cr(t.text,i,t.url,t.classes,t.media).thenReturn(!0):yr(t.url,i,t.classes,t.media)}return Ti(!1)})).then((function(){var e=i.cascadeParserHandler.finish();L=new yh(n,i.rootScope,i.pageScope,e,i.rootBox,i.fontFaces,i.footnoteProps,i.flowProps,i.viewportProps,i.pageProps),n.styleByKey[R]=L,delete n.styleFetcherByKey[R],t.finish(L)})),t.result()}),"FetchStylesheet "+r),n.styleFetcherByKey[R]=B,B.start()),B.get().then((function(e){n.styleByDocURL[r]=e,i.finish(t)}))}else i.finish(null)})),i.result()},n}(qi);function xh(t){return String.fromCharCode(t>>>24&255,t>>>16&255,t>>>8&255,255&t)}function Ih(t){return(255&t.charCodeAt(0))<<24|(255&t.charCodeAt(1))<<16|(255&t.charCodeAt(2))<<8|255&t.charCodeAt(3)}function Fh(t){var e=new rt;e.append(t);var n=55-t.length&63;for(e.append("");n>0;)n--,e.append("\0");e.append("\0\0\0\0"),e.append(xh(8*t.length)),t=e.toString();for(var i,r=[1732584193,4023233417,2562383102,271733878,3285377520],o=[],a=0;a<t.length;a+=64){for(i=0;i<16;i++)o[i]=Ih(t.substr(a+4*i,4));for(;i<80;i++){var s=o[i-3]^o[i-8]^o[i-14]^o[i-16];o[i]=s<<1|s>>>31}var u=r[0],l=r[1],c=r[2],h=r[3],f=r[4],d=void 0;for(i=0;i<80;i++)d=i<20?1518500249+(l&c|~l&h):i<40?1859775393+(l^c^h):i<60?2400959708+(l&c|l&h|c&h):3395469782+(l^c^h),d+=(u<<5|u>>>27)+f+o[i],f=h,h=c,c=l<<30|l>>>2,l=u,u=d;r[0]=r[0]+u|0,r[1]=r[1]+l|0,r[2]=r[2]+c|0,r[3]=r[3]+h|0,r[4]=r[4]+f|0}return r}var Ph=function(){function t(t,e,n,i,r,o,a,s,u,l){this.store=t,this.url=e,this.lang=n,this.clientLayout=i,this.fontMapper=r,this.rendererFactory=a,this.fallbackMap=s,this.documentURLTransformer=u,this.counterStore=l,this.page=null,this.instance=null,this.pref=Ot(o),this.pref.spreadView=!1}var e=t.prototype;return e.setAutoHeight=function(t,e){if(0!=e--)for(var n=t.firstChild;n;n=n.nextSibling)if(1==n.nodeType){var i=n;"auto"!=nt(i,"height","auto")&&(et(i,"height","auto"),this.setAutoHeight(i,e)),"absolute"==nt(i,"position","static")&&(et(i,"position","relative"),this.setAutoHeight(i,e))}},e.makeCustomRenderer=function(t){var e=this.rendererFactory.makeCustomRenderer(t);return function(t,n,i){var r=i.behavior;if(r)switch(r.toString()){case"body-child":t.parentElement.getAttribute("data-vivliostyle-primary-entry")&&(t.querySelector("[role=doc-toc], [role=directory], nav li a, .toc, #toc")||(i.display=Ye.none));break;case"toc-node-anchor":i.color=Ye.inherit,i["text-decoration"]=Ye.none;break;case"toc-node":i.display=Ye.block,i.margin=tn,i.padding=tn,i["padding-inline-start"]=new Me(1.25,"em");break;case"toc-node-first-child":i.display=Ye.inline_block,i.margin=new Me(.2,"em"),i["vertical-align"]=Ye.top,i.color=Ye.inherit,i["text-decoration"]=Ye.none}if(!r||"toc-node"!=r.toString()&&"toc-container"!=r.toString())return e(t,n,i);var o=t.firstChild;o&&1!==o.nodeType&&""===o.textContent.trim()&&t.replaceChild(t.ownerDocument.createComment(o.textContent),o);var a=n.getAttribute("data-adapt-class");if("toc-node"==a){var s=n.firstChild;"▸"!=s.textContent&&(s.textContent="▸",et(s,"cursor","pointer"),s.addEventListener("click",Oh,!1),s.setAttribute("role","button"),s.setAttribute("aria-expanded","false"),n.setAttribute("aria-expanded","false"),"0px"!==n.style.height&&(s.tabIndex=0))}var u=n.ownerDocument.createElement("div");if(u.setAttribute("data-adapt-process-children","true"),"toc-node"==r.toString()){var l=n.ownerDocument.createElement("div");if(l.textContent="▹",et(l,"margin","0.2em 0 0 -1em"),et(l,"margin-inline-start","-1em"),et(l,"margin-inline-end","0"),et(l,"display","inline-block"),et(l,"width","1em"),et(l,"text-align","center"),et(l,"vertical-align","top"),et(l,"cursor","default"),et(l,"font-family","Menlo,sans-serif"),u.appendChild(l),et(u,"overflow","hidden"),u.setAttribute("data-adapt-class","toc-node"),u.setAttribute("role","treeitem"),"toc-node"==a||"toc-container"==a){et(u,"height","0px");var c=t.firstElementChild;c&&"a"===c.localName&&(c.tabIndex=-1)}else n.setAttribute("role","tree")}else"toc-node"==a&&(u.setAttribute("data-adapt-class","toc-container"),u.setAttribute("role","group"),u.setAttribute("aria-hidden","true"));return Ti(u)}},e.showTOC=function(t,e,n,i,r){var o=this;if(this.page)return Ti(this.page);var a=Ni("showTOC"),s=new $r(t,t);return this.page=s,this.store.load(this.url+"?viv-toc-box").then((function(i){var u=o.store.resources[o.url];u&&u.body&&u.body.getAttribute("data-vivliostyle-primary-entry")&&i.body.setAttribute("data-vivliostyle-primary-entry",!0);for(var l,c=_(i.document.querySelectorAll("[role=doc-toc], [role=directory], nav, .toc, #toc"));!(l=c()).done;){var h=l.value;h.hasAttribute("hidden")&&h.removeAttribute("hidden")}var f=o.store.getStyleForDoc(i),d=f.sizeViewport(n,1e5,r);e=new ph(e.window,d.fontSize,e.root,d.width,d.height);var p=o.makeCustomRenderer(i),g=new wh(f,i,o.lang,e,o.clientLayout,o.fontMapper,p,o.fallbackMap,0,o.documentURLTransformer,o.counterStore);o.instance=g,g.pref=o.pref,g.init().then((function(){g.layoutNextPage(s,null).then((function(){Array.from(s.container.querySelectorAll("[data-vivliostyle-toc-box]>*>*>*>*>*[style*='display: none']")).forEach((function(t){t.setAttribute("aria-hidden","true"),t.setAttribute("hidden","hidden")})),o.setAutoHeight(t,2),a.finish(s)}))}))})),a.result()},e.hideTOC=function(){this.page&&(this.page.container.style.visibility="hidden",this.page.container.setAttribute("aria-hidden","true"))},e.isTOCVisible=function(){return!!this.page&&"visible"===this.page.container.style.visibility},e.getTOC=function(){if(!this.page)return[];function t(t){if(!t)return[];var n=t.querySelectorAll(":scope > [role=treeitem] > a[href]");return Array.from(n).map(e)}function e(e){return{id:new URL(e.href).hash.match(/^#(.*)$/)[1],title:e.innerText,children:t(e.parentElement.querySelector("[role=group]"))}}return t(this.page.container.querySelector("[role=tree]"))},t}();function Oh(t){var e=t.target,n="▸"==e.textContent;e.textContent=n?"▾":"▸";var i=e.parentNode;e.setAttribute("aria-expanded",n?"true":"false"),i.setAttribute("aria-expanded",n?"true":"false");for(var r=i.firstChild;r;){if(1===r.nodeType){var o=r,a=o.getAttribute("data-adapt-class");if("toc-container"===a){if(o.setAttribute("aria-hidden",n?"false":"true"),o.firstChild){r=o.firstChild;continue}}else if("toc-node"===a&&(o.style.height=n?"auto":"0px",o.children.length>=2&&(o.children[1].tabIndex=n?0:-1),o.children.length>=3&&(o.children[0].tabIndex=n?0:-1,!n))){var s=o.children[0];if("▾"==s.textContent){s.textContent="▸",s.setAttribute("aria-expanded","false"),o.setAttribute("aria-expanded","false"),r=o.children[2];continue}}}for(;!r.nextSibling&&r.parentNode!==i;)r=r.parentNode;r=r.nextSibling}t.stopPropagation()}var Rh=function(t){function e(){var e;return(e=t.call(this,null)||this).opfByURL={},e.primaryOPFByEPubURL={},e.deobfuscators={},e.documents={},e.fontDeobfuscator=e.makeDeobfuscatorFactory(),e.plainXMLStore=new qi(vh,Ui.DOCUMENT),e.jsonStore=new qi(Yi,Ui.TEXT),e}I(e,t);var n=e.prototype;return n.makeDeobfuscatorFactory=function(){var t=this;return function(e){return t.deobfuscators[e]}},n.loadAsPlainXML=function(t,e,n){return this.plainXMLStore.load(t,e,n)},n.startLoadingAsPlainXML=function(t){this.plainXMLStore.fetch(t)},n.loadAsJSON=function(t,e,n){return this.jsonStore.load(t,e,n)},n.startLoadingAsJSON=function(t){this.jsonStore.fetch(t)},n.loadPubDoc=function(t,e){var n=this,i=Ni("loadPubDoc");return ji(t,null,"HEAD").then((function(r){if(r.status>=400)n.loadEPUBDoc(t,e).then((function(e){e?i.finish(e):(f.error("Failed to fetch a source document from "+t+" ("+r.status+(r.statusText?" "+r.statusText:"")+")"),i.finish(null))}));else if(r.status||r.responseXML||r.responseText||r.responseBlob||r.contentType||/\/[^/.]+(?:[#?]|$)/.test(t)&&(t=t.replace(/([#?]|$)/,"/$1")),"application/oebps-package+xml"==r.contentType||/\.opf(?:[#?]|$)/.test(t)){var o=t.match(/^((?:.*\/)?)([^/]*)$/);n.loadOPF(o[1],o[2],e).thenFinish(i)}else"application/ld+json"==r.contentType||"application/webpub+json"==r.contentType||"application/audiobook+json"==r.contentType||"application/json"==r.contentType||/\.json(?:ld)?(?:[#?]|$)/.test(t)?n.loadAsJSON(t,!0).then((function(e){if(!e)return n.reportLoadError(t),void i.finish(null);var r=new Gh(n,t);r.initWithWebPubManifest(e,void 0,t).then((function(){i.finish(r)}))})):n.loadWebPub(t).then((function(r){r?i.finish(r):n.loadEPUBDoc(t,e).then((function(e){e?i.finish(e):(f.error("Failed to load "+t+"."),i.finish(null))}))}))})),i.result()},n.loadEPUBDoc=function(t,e){var n=this,i=Ni("loadEPUBDoc");return t.endsWith("/")||(t+="/"),e&&this.startLoadingAsJSON(t+"?r=list"),this.startLoadingAsPlainXML(t+"META-INF/encryption.xml"),this.loadAsPlainXML(t+"META-INF/container.xml").then((function(r){if(r)for(var o,a=_(r.doc().child("container").child("rootfiles").child("rootfile").attribute("full-path"));!(o=a()).done;){var s=o.value;if(s)return void n.loadOPF(t,s,e).thenFinish(i)}i.finish(null)})),i.result()},n.loadOPF=function(t,e,n){var i=this,r=t+e,o=this.opfByURL[r];if(o)return Ti(o);var a=Ni("loadOPF");return this.loadAsPlainXML(r,!0,"Failed to fetch EPUB OPF "+r).then((function(e){e?i.loadAsPlainXML(t+"META-INF/encryption.xml").then((function(s){(n?i.loadAsJSON(t+"?r=list"):Ti(null)).then((function(n){(o=new Gh(i,t)).initWithXMLDoc(e,s,n,t+"?r=manifest").then((function(){i.opfByURL[r]=o,i.primaryOPFByEPubURL[t]=o,a.finish(o)}))}))})):i.reportLoadError(r)})),a.result()},n.loadWebPub=function(t){var e=this,n=Ni("loadWebPub");return this.load(t).then((function(i){if(i)if(i.document.querySelector("a[href='META-INF/'],a[href$='/META-INF/']"))n.finish(null);else{var r=i.document,o=new Gh(e,t);r.body&&r.body.setAttribute("data-vivliostyle-primary-entry",!0);var a=r.querySelector("link[rel='publication'],link[rel='manifest'][type='application/webpub+json']");if(a){var s=a.getAttribute("href");if(/^#/.test(s)){var u=V(r.getElementById(s.substr(1)).textContent);o.initWithWebPubManifest(u,r).then((function(){n.finish(o)}))}else{var l=K(a.getAttribute("href"),t);e.loadAsJSON(l).then((function(t){o.initWithWebPubManifest(t,r,l).then((function(){n.finish(o)}))}))}}else o.initWithWebPubManifest({},r).then((function(){o.xhtmlToc&&o.xhtmlToc.src===i.url&&(r.querySelector("[role=doc-toc], [role=directory], nav, .toc, #toc")||(o.xhtmlToc=null)),n.finish(o)}))}else e.reportLoadError(t)})),n.result()},n.addDocument=function(t,e){var n=Ni("EPUBDocStore.load"),i=z(t);return(this.documents[i]=this.parseOPSResource({status:200,statusText:"",url:i,contentType:e.contentType,responseText:null,responseXML:e,responseBlob:null})).thenFinish(n),n.result()},n.reportLoadError=function(t){var e,n=this,i=function(t){return t.replace(/([^:/?#]|^)[/?#].*/,"$1")};t.startsWith("data:")?f.error("Failed to load "+t+". Invalid data."):t.startsWith("http:")&&H.startsWith("https:")?f.error("Failed to load "+t+'. Mixed Content ("http:" content on "https:" context) is not allowed.'):(e=i(t))===i(H)||Object.keys(n.resources).find((function(t){return n.resources[t]&&i(t)===e}))||/\.(xhtml|xht|xml|opf)$/i.test(t)?f.error("Failed to load "+t+". The target resource is invalid."):f.error("Failed to load "+t+". This may be caused by the server not allowing cross-origin resource sharing (CORS).")},n.load=function(e){var n=this,i=z(e),r=this.documents[i];if(r)return r.isPending()?r:Ti(r.get());var o=Ni("EPUBDocStore.load");return(r=t.prototype.load.call(this,i,!0,"Failed to fetch a source document from "+i)).then((function(t){t?o.finish(t):n.reportLoadError(i)})),o.result()},e}(Ah),kh=function(){function t(){this.id=null,this.src="",this.mediaType=null,this.title=null,this.itemRefElement=null,this.spineIndex=-1,this.compressedSize=0,this.compressed=null,this.epage=0,this.epageCount=0,this.startPage=null,this.skipPagesBefore=null,this.itemProperties=U}var e=t.prototype;return e.initWithElement=function(t,e){this.id=t.getAttribute("id"),this.src=K(t.getAttribute("href"),e),this.mediaType=t.getAttribute("media-type");var n=t.getAttribute("properties");n&&(this.itemProperties=function(t){for(var e={},n=0;n<t.length;n++)e[t[n]]=!0;return e}(n.split(/\s+/)))},e.initWithParam=function(t){this.spineIndex=t.index,this.id="item"+(t.index+1),this.src=t.url,this.startPage=t.startPage,this.skipPagesBefore=t.skipPagesBefore},t}();function Lh(t){return t.id}var Bh={dcterms:"http://purl.org/dc/terms/",marc:"http://id.loc.gov/vocabulary/",media:"http://www.idpf.org/epub/vocab/overlays/#",rendition:"http://www.idpf.org/vocab/rendition/#",onix:"http://www.editeur.org/ONIX/book/codelists/current.html#",xsd:"http://www.w3.org/2001/XMLSchema#",opf:"http://www.idpf.org/2007/opf"},_h="http://idpf.org/epub/vocab/package/meta/#",Mh={language:Bh.dcterms+"language",title:Bh.dcterms+"title",creator:Bh.dcterms+"creator",layout:Bh.rendition+"layout",titleType:_h+"title-type",displaySeq:_h+"display-seq",alternateScript:_h+"alternate-script",role:_h+"role"};function Uh(t,e){var n={};return function(i,r){var o,a,s,u,l,c=i.r||n,h=r.r||n;if(t==Mh.title&&(s="main"==(null==(u=c[Mh.titleType])?void 0:u[0].v))!=("main"==(null==(l=h[Mh.titleType])?void 0:l[0].v)))return s?-1:1;var f=parseInt(null==(o=c[Mh.displaySeq])?void 0:o[0].v,10);isNaN(f)&&(f=Number.MAX_VALUE);var d,p,g=parseInt(null==(a=h[Mh.displaySeq])?void 0:a[0].v,10);return isNaN(g)&&(g=Number.MAX_VALUE),f!=g?f-g:t!=Mh.language&&e&&(s=(null==(d=c[Mh.language]||c[Mh.alternateScript])?void 0:d[0].v)==e)!=((null==(p=h[Mh.language]||h[Mh.alternateScript])?void 0:p[0].v)==e)?s?-1:1:i.o-r.o}}function Vh(){var t=window.MathJax;return t?t.Hub:null}var zh,Hh={"application/xhtml+xml":!0,"image/jpeg":!0,"image/png":!0,"image/svg+xml":!0,"image/gif":!0,"audio/mp3":!0},Gh=function(){function t(t,e){this.store=t,this.pubURL=e,this.opfXML=null,this.encXML=null,this.items=null,this.spine=null,this.itemMap=null,this.itemMapByPath=null,this.uid=null,this.bindings={},this.lang=null,this.epageCount=0,this.prePaginated=!1,this.epageIsRenderedPage=!0,this.epageCountCallback=null,this.metadata={},this.ncxToc=null,this.xhtmlToc=null,this.cover=null,this.fallbackMap={},this.pageProgression=null,this.documentURLTransformer=this.createDocumentURLTransformer(),Vh()&&(yo[W.MATHML]=!0)}var e=t.prototype;return e.createDocumentURLTransformer=function(){var t=this;return new(function(){function e(){}var n=e.prototype;return n.transformFragment=function(t,e){return"viv-id-"+ct(e+(t?"#"+t:""),":")},n.transformURL=function(e,n){var i=e.match(/^([^#]*)#?(.*)$/);if(i){var r=i[1]||n,o=decodeURIComponent(i[2]);if(r&&t.items.some((function(t){return t.src===r})))return"#"+this.transformFragment(o,r)}return e},n.restoreURL=function(t){"#"===t.charAt(0)&&(t=t.substring(1)),0===t.indexOf("viv-id-")&&(t=t.substring("viv-id-".length));var e=function(t,e){e="string"==typeof e?e:"\\u";var n=new RegExp(ht(e)+"[0-9a-fA-F]{4}","g");return t.replace(n,(function(t){return function(t,e){return 0===t.indexOf(e="string"==typeof e?e:"\\u")?String.fromCharCode(parseInt(t.substring(e.length),16)):t}(t,e)}))}(t,":").match(/^([^#]*)#?(.*)$/);return e?[e[1],e[2]]:[]},e}())},e.getMetadata=function(){return this.metadata},e.getPathFromURL=function(t){if(t.startsWith("data:"))return t===this.pubURL?"":t;if(this.pubURL){var e=K("",this.pubURL);return t===e||t+"/"===e?"":("/"!=e.charAt(e.length-1)&&(e+="/"),t.substr(0,e.length)==e?decodeURI(t.substr(e.length)):null)}return t},e.initWithXMLDoc=function(t,e,n,i){var r=this;this.opfXML=t,this.encXML=e;var o=t.doc().child("package"),a=o.attribute("unique-identifier")[0];if(a){var s=t.getElement(t.url+"#"+a);s&&(this.uid=s.textContent.replace(/[ \n\r\t]/g,""))}var l={};for(var c in this.items=o.child("manifest").child("item").asArray().map((function(e){var n=new kh,i=e;n.initWithElement(i,t.url);var o=i.getAttribute("fallback");return o&&!Hh[n.mediaType]&&(l[n.src]=o),!r.xhtmlToc&&n.itemProperties.nav&&(r.xhtmlToc=n),!r.cover&&n.itemProperties["cover-image"]&&(r.cover=n),n})),this.itemMap=pt(this.items,Lh),this.itemMapByPath=pt(this.items,(function(t){return r.getPathFromURL(t.src)})),l)for(var h=c;;){var f=this.itemMap[l[h]];if(!f)break;if(Hh[f.mediaType]){this.fallbackMap[c]=f.src;break}h=f.src}this.spine=o.child("spine").child("itemref").asArray().map((function(t,e){var n=t,i=n.getAttribute("idref"),o=r.itemMap[i];return o&&(o.itemRefElement=n,o.spineIndex=e),o}));var d=o.child("spine").attribute("toc")[0];d&&(this.ncxToc=this.itemMap[d]);var p=o.child("spine").attribute("page-progression-direction")[0];p&&(this.pageProgression=u(p));for(var g=e?e.doc().child("encryption").child("EncryptedData").predicate(Eh.withChild("EncryptionMethod",Eh.withAttribute("Algorithm","http://www.idpf.org/2008/embedding"))).child("CipherData").child("CipherReference").attribute("URI"):[],m=o.child("bindings").child("mediaType").asArray(),v=0;v<m.length;v++){var E=m[v].getAttribute("handler"),b=m[v].getAttribute("media-type");b&&E&&this.itemMap[E]&&(this.bindings[b]=this.itemMap[E].src)}if(this.metadata=function(t,e){var n;if(e){for(var i in n={},Bh)n[i]=Bh[i];for(var r;null!=(r=e.match(/^\s*([A-Z_a-z\u007F-\uFFFF][-.A-Z_a-z0-9\u007F-\uFFFF]*):\s*(\S+)/));)e=e.substr(r[0].length),n[r[1]]=r[2]}else n=Bh;var o=function(t){if(t){var e=t.match(/^\s*(([^:]*):)?(\S+)\s*$/);if(e){var i=e[2]?n[e[2]]:_h;if(i)return i+e[3]}}return null},a=1,s=t.childElements().forEachNonNull((function(t){if("meta"==t.localName){var e=o(t.getAttribute("property"));if(e)return{name:e,value:t.textContent,id:t.getAttribute("id"),order:a++,refines:t.getAttribute("refines"),lang:null,scheme:o(t.getAttribute("scheme")),role:null}}else if(t.namespaceURI==W.DC)return{name:Bh.dcterms+t.localName,order:a++,lang:t.getAttribute("xml:lang"),value:t.textContent,id:t.getAttribute("id"),refines:null,scheme:null,role:t.getAttribute("role")||t.getAttribute("opf:role")};return null})),u=gt(s,(function(t){return t.refines})),l=function t(e){return function(e,n){var i={};for(var r in e)i[r]=e[r].map((function(e){var n={v:e.value,o:e.order};e.scheme&&(n.s=e.scheme);var i=u["#"+e.id]||[];if(i.length||e.lang||e.role){e.lang&&i.push({name:Mh.language,value:e.lang,lang:null,id:null,refines:e.id,scheme:null,order:e.order,role:null}),e.role&&i.push({name:Mh.role,value:e.role,lang:null,id:null,refines:e.id,scheme:null,order:e.order,role:null});var r=gt(i,(function(t){return t.name}));n.r=t(r)}return n}));return i}(e)}(gt(s,(function(t){return t.refines?null:t.name}))),c=null;return l[Mh.language]&&(c=l[Mh.language][0].v),function t(e){for(var n in e){var i=e[n];i.sort(Uh(n,c));for(var r=0;r<i.length;r++){var o=i[r].r;o&&t(o)}}}(l),l}(o.child("metadata"),o.attribute("prefix")[0]),this.metadata[Mh.language]&&(this.lang=this.metadata[Mh.language][0].v),this.metadata[Mh.layout]&&(this.prePaginated="pre-paginated"===this.metadata[Mh.layout][0].v),!n){if(g.length>0&&this.uid)for(var C=function(t){var e=function(t){for(var e,n=[],i=_(Fh(t));!(e=i()).done;){var r=e.value;n.push(r>>>24&255,r>>>16&255,r>>>8&255,255&r)}return n}(t);return function(t){var n,i,r=Ni("deobfuscator");return t.slice?(n=t.slice(0,1040),i=t.slice(1040,t.size)):(n=t.webkitSlice(0,1040),i=t.webkitSlice(1040,t.size-1040)),function(t){var e=Ni("readBlob"),n=new FileReader,i=e.suspend(n);return n.addEventListener("load",(function(){i.schedule(n.result)}),!1),n.readAsArrayBuffer(t),e.result()}(n).then((function(t){for(var n=new DataView(t),o=0;o<n.byteLength;o++){var a=n.getUint8(o);n.setUint8(o,a^=e[o%20])}r.finish(Ki([n,i]))})),r.result()}}(this.uid),y=0;y<g.length;y++)this.store.deobfuscators[this.pubURL+g[y]]=C;return this.prePaginated&&this.assignAutoPages(),Ti(!0)}var w=new rt,D={};if(g.length>0&&this.uid)for(var S="1040:"+function(t){for(var e=function(t){for(var e=Fh(t),n=new rt,i=0;i<e.length;i++)n.append(xh(e[i]));return n.toString()}(t),n=new rt,i=0;i<e.length;i++)n.append((256|e.charCodeAt(i)).toString(16).substr(1));return n.toString()}(this.uid),N=0;N<g.length;N++)D[g[N]]=S;for(var T=0;T<n.length;T++){var A=n[T],x=A.n;if(x){var I=decodeURI(x),F=this.itemMapByPath[I],P=null;F&&(F.compressed=0!=A.m,F.compressedSize=A.c,F.mediaType&&(P=F.mediaType.replace(/\s+/g,"")));var O=D[I];(P||O)&&(w.append(x),w.append(" "),w.append(P||"application/octet-stream"),O&&(w.append(" "),w.append(O)),w.append("\n"))}}return this.assignAutoPages(),ji(i,Ui.DEFAULT,"POST",w.toString(),"text/plain")},e.assignAutoPages=function(){for(var t,e=0,n=_(this.spine);!(t=n()).done;){var i=t.value,r=this.prePaginated?1:Math.ceil(i.compressedSize/1024);i.epage=e,i.epageCount=r,e+=r}this.epageCount=e,this.epageCountCallback&&this.epageCountCallback(this.epageCount)},e.setEPageCountMode=function(t){this.epageIsRenderedPage=t||this.prePaginated},e.countEPages=function(t){var e=this;if(this.epageCountCallback=t,this.epageIsRenderedPage)return this.prePaginated&&0==this.epageCount&&this.assignAutoPages(),Ti(!0);var n=0,i=0,r=Ni("countEPages");return r.loopWithFrame((function(t){if(i!==e.spine.length){var r=e.spine[i++];r.epage=n,e.store.load(r.src).then((function(i){var o=1800,a=i.lang||e.lang;a&&a.match(/^(ja|ko|zh)/)&&(o/=3),r.epageCount=Math.ceil(i.getTotalOffset()/o),e.epageCount=n+=r.epageCount,e.epageCountCallback&&e.epageCountCallback(e.epageCount),t.continueLoop()}))}else t.breakLoop()})).thenFinish(r),r.result()},e.initWithChapters=function(t,e){var n=this;this.itemMap={},this.itemMapByPath={},this.items=[],this.spine=this.items;var i=this.opfXML=new gh(null,"",(new DOMParser).parseFromString("<spine></spine>","text/xml"));return t.forEach((function(t){var e=new kh;e.initWithParam(t);var r=i.document.createElement("itemref");r.setAttribute("idref",e.id),i.root.appendChild(r),e.itemRefElement=r,n.itemMap[e.id]=e;var o=n.getPathFromURL(t.url);null==o&&(o=t.url),n.itemMapByPath[o]=e,n.items.push(e)})),e?this.store.addDocument(t[0].url,e):Ti(null)},e.initWithWebPubManifest=function(t,e,n){var i=this;t.readingProgression&&(this.pageProgression=t.readingProgression),void 0===this.metadata&&(this.metadata={});var r=e&&e.title||t.name||t.metadata&&t.metadata.title;r&&(this.metadata[Mh.title]=[{v:r}]);var o=this.getPathFromURL(this.pubURL);if(!t.readingOrder&&e&&null!==o){t.readingOrder=[encodeURI(o)];for(var a,s=_(e.querySelectorAll("[role=doc-toc] a[href],[role=directory] a[href],nav li a[href],.toc a[href],#toc a[href]"));!(a=s()).done;){var u=a.value.getAttribute("href");if(!/^(https?:)?\/\//.test(u)){var l=z(K(u,this.pubURL)),c=this.getPathFromURL(l),h=null!==c?encodeURI(c):l;-1==t.readingOrder.indexOf(h)&&t.readingOrder.push(h)}}}var f=[],d=0,p=-1;[t.readingOrder,t.resources].forEach((function(e){e instanceof Array&&e.forEach((function(e){var r=t.readingOrder.includes(e),o="string"==typeof e?e:e.url||e.href,a="string"==typeof e?"":e.encodingFormat||e.href&&e.type||"";if(r||"text/html"===a||"application/xhtml+xml"===a||/(^|\/)([^/]+\.(x?html|htm|xht)|[^/.]*)([#?]|$)/.test(o)){var s={url:K($(o),n||i.pubURL),index:d++,startPage:null,skipPagesBefore:null};"contents"===e.rel&&-1===p&&(p=s.index),f.push(s)}}))}));var g=Ni("initWithWebPubManifest");return this.initWithChapters(f).then((function(){var t;-1!==p&&(i.xhtmlToc=i.items[p]),i.xhtmlToc||(i.xhtmlToc=n?null==(t=i.items)?void 0:t[0]:i.itemMapByPath[o]),g.finish(!0)})),g.result()},e.getCFI=function(t,e){var n=this.spine[t],i=Ni("getCFI");return this.store.load(n.src).then((function(t){var r=t.getNodeByOffset(e),o=null;if(r){var a=t.getNodeOffset(r,0,!1),s=e-a,u=new Pt;u.prependPathFromNode(r,s,!1,null),n.itemRefElement&&u.prependPathFromNode(n.itemRefElement,0,!1,null),o=u.toString()}i.finish(o)})),i.result()},e.resolveFragment=function(t){var e=this;return Ai("resolveFragment",(function(n){if(t){var i,r=new Pt;if(r.fromString(t),e.opfXML){var o=r.navigate(e.opfXML.document);if(1!=o.node.nodeType||o.after||!o.ref)return void n.finish(null);var a=o.node,s=a.getAttribute("idref");if("itemref"!=a.localName||!s||!e.itemMap[s])return void n.finish(null);i=e.itemMap[s],r=o.ref}else i=e.spine[0];e.store.load(i.src).then((function(t){var e=r.navigate(t.document),o=t.getNodeOffset(e.node,e.offset,e.after);n.finish({spineIndex:i.spineIndex,offsetInItem:o,pageIndex:-1})}))}else n.finish(null)}),(function(e,n){f.warn(n,"Cannot resolve fragment:",t),e.finish(null)}))},e.resolveEPage=function(t){var e=this;return Ai("resolveEPage",(function(n){if(t<=0)n.finish({spineIndex:0,offsetInItem:0,pageIndex:-1});else if(e.epageIsRenderedPage){var i=e.spine.findIndex((function(e){return 0==e.epage&&0==e.epageCount||e.epage<=t&&e.epage+e.epageCount>t}));-1==i&&(i=e.spine.length-1);var r=e.spine[i];r&&0!=r.epageCount||(r=e.spine[--i]);var o=Math.floor(t-r.epage);n.finish({spineIndex:i,offsetInItem:-1,pageIndex:o})}else{var a=ft(e.spine.length,(function(n){var i=e.spine[n];return i.epage+i.epageCount>t}));a==e.spine.length&&a--;var s=e.spine[a];e.store.load(s.src).then((function(e){(t-=s.epage)>s.epageCount&&(t=s.epageCount);var i=0;if(t>0){var r=e.getTotalOffset();(i=Math.round(r*t/s.epageCount))==r&&i--}n.finish({spineIndex:a,offsetInItem:i,pageIndex:-1})}))}}),(function(e,n){f.warn(n,"Cannot resolve epage:",t),e.finish(null)}))},e.getEPageFromPosition=function(t){var e=this.spine[t.spineIndex];if(this.epageIsRenderedPage)return Ti(e.epage+t.pageIndex);if(t.offsetInItem<=0)return Ti(e.epage);var n=Ni("getEPage");return this.store.load(e.src).then((function(i){var r=i.getTotalOffset(),o=Math.min(r,t.offsetInItem);n.finish(e.epage+o*e.epageCount/r)})),n.result()},t}(),Wh=function(t,e){return{page:t,position:{spineIndex:t.spineIndex,pageIndex:e,offsetInItem:t.offset}}},Xh=function(){function t(t,e,n,i,r){this.opf=t,this.viewport=e,this.fontMapper=n,this.pageSheetSizeReporter=r,this.spineItems=[],this.spineItemLoadingContinuations=[],this.tocAutohide=!1,this.pref=Ot(i),this.clientLayout=new dh(e),this.counterStore=new Mn(t.documentURLTransformer)}var n=t.prototype;return n.getPage=function(t){var e=this.spineItems[t.spineIndex];return e?e.pages[t.pageIndex]:null},n.getCurrentPageProgression=function(t){if(this.opf.pageProgression)return this.opf.pageProgression;var e=this.spineItems[t?t.spineIndex:0];return e?e.instance.pageProgression:null},n.finishPageContainer=function(t,e,n){e.container.style.display="none",e.container.style.visibility="visible",e.container.style.position="",e.container.style.top="",e.container.style.left="",e.container.setAttribute("data-vivliostyle-page-side",e.side);var i=t.pages[n];if(e.isFirstPage=0==t.item.spineIndex&&0==n,t.pages[n]=e,this.opf.epageIsRenderedPage){if(0==n&&t.item.spineIndex>0){var r=this.opf.spine[t.item.spineIndex-1];t.item.epage=r.epage+r.epageCount}t.item.epageCount=t.pages.length,this.opf.epageCount=this.opf.spine.reduce((function(t,e){return t+e.epageCount}),0),this.opf.epageCountCallback&&this.opf.epageCountCallback(this.opf.epageCount)}if(i)t.instance.viewport.contentContainer.replaceChild(e.container,i.container),i.dispatchEvent({type:"replaced",target:null,currentTarget:null,preventDefault:null,newPage:e});else{var o=null;if(n>0)o=t.pages[n-1].container.nextElementSibling;else for(var a=t.item.spineIndex+1;a<this.spineItems.length;a++){var s=this.spineItems[a];if(s&&s.pages[0]){o=s.pages[0].container;break}}t.instance.viewport.contentContainer.insertBefore(e.container,o)}this.pageSheetSizeReporter({width:t.instance.pageSheetWidth,height:t.instance.pageSheetHeight},t.instance.pageSheetSize,t.item.spineIndex,t.instance.pageNumberOffset+n)},n.renderSinglePage=function(t,e){var n=this,i=Ni("renderSinglePage"),r=this.makePage(t,e);return t.instance.layoutNextPage(r,e).then((function(o){var a=(e=o)?e.page-1:t.layoutPositions.length-1;n.finishPageContainer(t,r,a),n.counterStore.finishPage(r.spineIndex,a);var s=null;if(e){var u=t.layoutPositions[e.page];t.layoutPositions[e.page]=e,u&&t.pages[e.page]&&(e.isSamePosition(u)||(s=n.renderSinglePage(t,e)))}s||(s=Ti(!0)),s.then((function(){var o=n.counterStore.getUnresolvedRefsToPage(r),s=0;i.loopWithFrame((function(t){if(++s>o.length)t.breakLoop();else{var e=o[s-1];e.refs=e.refs.filter((function(t){return!t.isResolved()})),0!==e.refs.length?n.getPageViewItem(e.spineIndex).then((function(i){i?(n.counterStore.pushPageCounters(e.pageCounters),n.counterStore.pushReferencesToSolve(e.refs),n.renderSinglePage(i,i.layoutPositions[e.pageIndex]).then((function(e){n.counterStore.popPageCounters(),n.counterStore.popReferencesToSolve();var i=e.pageAndPosition.position;i.spineIndex===r.spineIndex&&i.pageIndex===a&&(r=e.pageAndPosition.page),t.continueLoop()}))):t.continueLoop()})):t.continueLoop()}})).then((function(){r.container.parentElement||(r=t.pages[a]),r.isLastPage=!e&&t.item.spineIndex===n.opf.spine.length-1,r.isLastPage&&n.counterStore.finishLastPage(n.viewport),i.finish({pageAndPosition:Wh(r,a),nextLayoutPosition:e})}))}))})),i.result()},n.normalizeSeekPosition=function(t,e){var n=t.pageIndex,i=-1;if(n<0){i=t.offsetInItem;var r=ft(e.layoutPositions.length,(function(t){return e.instance.getPosition(e.layoutPositions[t],!0)>i}));n=r===e.layoutPositions.length?e.complete?e.layoutPositions.length-1:Number.POSITIVE_INFINITY:r-1}else n===Number.POSITIVE_INFINITY&&-1!==t.offsetInItem&&(i=t.offsetInItem);return{spineIndex:t.spineIndex,pageIndex:n,offsetInItem:i}},n.findPage=function(t,e){var n=this,i=Ni("findPage");return this.getPageViewItem(t.spineIndex).then((function(r){if(r){var o,a=null;i.loopWithFrame((function(s){var u=n.normalizeSeekPosition(t,r);(a=r.pages[o=u.pageIndex])?s.breakLoop():r.complete?(a=r.pages[o=r.layoutPositions.length-1],s.breakLoop()):e?n.renderPage(u).then((function(t){t&&(a=t.page,o=t.position.pageIndex),s.breakLoop()})):i.sleep(100).then((function(){s.continueLoop()}))})).then((function(){i.finish(Wh(a,o))}))}else i.finish(null)})),i.result()},n.renderPage=function(t){var e=this,n=Ni("renderPage");return this.getPageViewItem(t.spineIndex).then((function(i){if(i){var r=e.normalizeSeekPosition(t,i),o=r.pageIndex,a=r.offsetInItem,s=i.pages[o];s?n.finish(Wh(s,o)):n.loopWithFrame((function(t){if(o<i.layoutPositions.length)t.breakLoop();else{if(i.complete)return o=i.layoutPositions.length-1,void t.breakLoop();var n=i.layoutPositions[i.layoutPositions.length-1];e.renderSinglePage(i,n).then((function(e){var r=e.pageAndPosition.page;if(n=e.nextLayoutPosition){if(a>=0&&i.instance.getPosition(n)>a)return s=r,o=i.layoutPositions.length-2,void t.breakLoop();t.continueLoop()}else s=r,o=e.pageAndPosition.position.pageIndex,i.complete=!0,t.breakLoop()}))}})).then((function(){var t=i.layoutPositions[o];(s=s||i.pages[o])?n.finish(Wh(s,o)):e.renderSinglePage(i,t).then((function(t){t.nextLayoutPosition||(i.complete=!0),n.finish(t.pageAndPosition)}))}))}else n.finish(null)})),n.result()},n.renderAllPages=function(){return this.renderPagesUpto({spineIndex:this.opf.spine.length-1,pageIndex:Number.POSITIVE_INFINITY,offsetInItem:-1},!1)},n.renderPagesUpto=function(t,e){var n=this,i=Ni("renderPagesUpto");t||(t={spineIndex:0,pageIndex:0,offsetInItem:0});var r,o=t.spineIndex,a=t.pageIndex,s=0;return e&&(s=o),i.loopWithFrame((function(e){n.renderPage({spineIndex:s,pageIndex:s===o?a:Number.POSITIVE_INFINITY,offsetInItem:s===o?t.offsetInItem:-1}).then((function(t){r=t,++s>o?e.breakLoop():e.continueLoop()}))})).then((function(){i.finish(r)})),i.result()},n.firstPage=function(t,e){return this.findPage({spineIndex:0,pageIndex:0,offsetInItem:-1},e)},n.lastPage=function(t,e){return this.findPage({spineIndex:this.opf.spine.length-1,pageIndex:Number.POSITIVE_INFINITY,offsetInItem:-1},e)},n.nextPage=function(t,e){var n=this,i=t.spineIndex,r=t.pageIndex,o=Ni("nextPage");return this.getPageViewItem(i).then((function(t){if(t){if(t.complete&&r==t.layoutPositions.length-1){if(i>=n.opf.spine.length-1)return void o.finish(null);i++,r=0;var a=n.spineItems[i],s=a&&a.pages[0],u=t.pages[t.pages.length-1];s&&u&&s.side==u.side&&(a.pages.forEach((function(t){t.container&&t.container.remove()})),n.spineItems[i]=null,n.spineItemLoadingContinuations[i]=null)}else r++;n.findPage({spineIndex:i,pageIndex:r,offsetInItem:-1},e).thenFinish(o)}else o.finish(null)})),o.result()},n.previousPage=function(t,e){var n=t.spineIndex,i=t.pageIndex;if(0==i){if(0==n)return Ti(null);n--,i=Number.POSITIVE_INFINITY}else i--;return this.findPage({spineIndex:n,pageIndex:i,offsetInItem:-1},e)},n.isRectoPage=function(t,n){var i=t.side===e.PageSide.LEFT,r=this.getCurrentPageProgression(n)===e.PageProgression.LTR;return!i&&r||i&&!r},n.getSpread=function(t,n){var i=this,r=Ni("getCurrentSpread"),o=this.getPage(t);if(!o)return Ti({left:null,right:null});var a=o.side===e.PageSide.LEFT;return(this.isRectoPage(o,t)?this.previousPage(t,n):this.nextPage(t,n)).then((function(e){var n=i.getPage(t),o=e&&e.page;o&&o.side===n.side&&(o=null),r.finish(a?{left:n,right:o}:{left:o,right:n})})),r.result()},n.nextSpread=function(t,e){var n=this,i=this.getPage(t);if(!i)return Ti(null);var r=this.isRectoPage(i,t),o=this.nextPage(t,e);return r?o:o.thenAsync((function(t){if(t){if(t.page.side===i.side)return o;var r=n.nextPage(t.position,e);return r.thenAsync((function(t){return t?r:o}))}return Ti(null)}))},n.previousSpread=function(t,e){var n=this,i=this.getPage(t);if(!i)return Ti(null);var r=this.isRectoPage(i,t),o=this.previousPage(t,e),a=i.container.previousElementSibling;return r?o.thenAsync((function(t){return t?t.page.side===i.side||t.page.container!==a?o:n.previousPage(t.position,e):Ti(null)})):o},n.navigateToEPage=function(t,e,n){var i=this,r=Ni("navigateToEPage");return this.opf.resolveEPage(t).then((function(t){t?i.findPage(t,n).thenFinish(r):r.finish(null)})),r.result()},n.navigateToFragment=function(t,e,n){var i=this,r=Ni("navigateToCFI");return this.opf.resolveFragment(t).then((function(t){t?i.findPage(t,n).thenFinish(r):r.finish(null)})),r.result()},n.navigateTo=function(t,e,n){var i=this;f.debug("Navigate to",t);var r=this.opf.getPathFromURL(z(t));if(!r){if(this.opf.opfXML&&t.match(/^#epubcfi\(/))r=this.opf.getPathFromURL(this.opf.opfXML.url);else if("#"===t.charAt(0)){var o=this.opf.documentURLTransformer.restoreURL(t);this.opf.opfXML?null==(r=this.opf.getPathFromURL(o[0]))&&(r=o[0]):r=o[0],t=o[0]+(o[1]?"#"+o[1]:"")}if(null==r)return Ti(null)}var a=this.opf.itemMapByPath[r];if(!a){if(this.opf.opfXML&&r==this.opf.getPathFromURL(this.opf.opfXML.url)){var s=t.indexOf("#");if(s>=0)return this.navigateToFragment(t.substr(s+1),e,n)}return Ti(null)}var u=Ni("navigateTo");return this.getPageViewItem(a.spineIndex).then((function(r){if(r){var o=r.xmldoc.getElement(t);o?i.findPage({spineIndex:a.spineIndex,pageIndex:-1,offsetInItem:r.xmldoc.getElementOffset(o)},n).thenFinish(u):e.spineIndex!==a.spineIndex?i.findPage({spineIndex:a.spineIndex,pageIndex:0,offsetInItem:-1},n).thenFinish(u):u.finish(null)}else u.finish(null)})),u.result()},n.makePage=function(t,n){var i=t.instance.viewport,r=i.document.createElement("div");r.setAttribute("data-vivliostyle-page-container","true"),r.setAttribute("role","region"),r.style.position="absolute",r.style.top="0",r.style.left="0",e.isDebug||(r.style.visibility="hidden",r.setAttribute("aria-hidden","true")),i.layoutBox.appendChild(r);var o=i.document.createElement("div");o.setAttribute("data-vivliostyle-bleed-box","true"),r.appendChild(o);var a=new $r(r,o);if(a.spineIndex=t.item.spineIndex,a.position=n,a.offset=t.instance.getPosition(n),0===a.offset){var s=this.opf.documentURLTransformer.transformFragment("",t.item.src);o.setAttribute("id",s),a.registerElementWithId(o,s)}if(i!==this.viewport){var u=Lt(this.viewport.width,this.viewport.height,i.width,i.height),l=wr(null,new yi(u,null),"");a.delayedItems.push(new Xr(r,"transform",l))}return a},n.makeObjectView=function(t,e,n,i){var r=e.getAttribute("data"),o=null;if(r){r=K(r,t.url);var a=e.getAttribute("media-type");if(!a){var s=this.opf.getPathFromURL(r);if(s){var u=this.opf.itemMapByPath[s];u&&(a=u.mediaType)}}if(a){var l=this.opf.bindings[a];if(l){(o=this.viewport.document.createElement("iframe")).style.border="none";var c=ut(r),h=ut(a),f=new rt;f.append(l),f.append("?src="),f.append(c),f.append("&type="),f.append(h);for(var d=e.firstChild;d;d=d.nextSibling)if(1==d.nodeType){var p=d;if("param"==p.localName&&p.namespaceURI==W.XHTML){var g=p.getAttribute("name"),m=p.getAttribute("value");g&&m&&(f.append("&"),f.append(encodeURIComponent(g)),f.append("="),f.append(encodeURIComponent(m)))}}o.setAttribute("src",f.toString());var v=e.getAttribute("width");v&&o.setAttribute("width",v);var E=e.getAttribute("height");E&&o.setAttribute("height",E)}}}return o||(o=this.viewport.document.createElement("span")).setAttribute("data-adapt-process-children","true"),Ti(o)},n.makeMathJaxView=function(t,e,n,i){var r=Vh();if(r){var o=n.ownerDocument,a=o.createElement("span");n.appendChild(a);var s=o.importNode(e,!0);this.resolveURLsInMathML(s,t),a.appendChild(s);var u=r.queue;u.Push(["Typeset",r,a]);var l=Ni("makeMathJaxView"),c=l.suspend();return u.Push((function(){c.schedule(a)})),l.result()}return Ti(null)},n.resolveURLsInMathML=function(t,e){if(null!=t){if(1===t.nodeType&&"mglyph"===t.tagName)for(var n=0,i=Array.from(t.attributes);n<i.length;n++){var r=i[n];if("src"===r.name){var o=K(r.nodeValue,e.url);r.namespaceURI?t.setAttributeNS(r.namespaceURI,r.name,o):t.setAttribute(r.name,o)}}t.firstChild&&this.resolveURLsInMathML(t.firstChild,e),t.nextSibling&&this.resolveURLsInMathML(t.nextSibling,e)}},n.makeCustomRenderer=function(t){var e=this;return function(n,i,r){return"object"==n.localName&&n.namespaceURI==W.XHTML?e.makeObjectView(t,n,i,r):n.namespaceURI==W.MATHML||n.dataset&&"true"==n.dataset.mathTypeset?e.makeMathJaxView(t,n,i,r):Ti(null)}},n.getPageViewItem=function(t){var e=this;if(-1===t||t>=this.opf.spine.length)return Ti(null);var n=this.spineItems[t];if(n)return Ti(n);var i=Ni("getPageViewItem"),r=this.spineItemLoadingContinuations[t];if(r){var o=i.suspend();return r.push(o),i.result()}r=this.spineItemLoadingContinuations[t]=[];var a=this.opf.spine[t],s=this.opf.store;return s.load(a.src).then((function(o){var u,l=a.itemRefElement.getAttribute("properties");l&&o.root.setAttribute("data-vivliostyle-epub-spine-properties",l),a.title=o.document.title;var c=s.getStyleForDoc(o),h=e.makeCustomRenderer(o),f=e.viewport,d=c.sizeViewport(f.width,f.height,f.fontSize,e.pref);d.width==f.width&&d.height==f.height&&d.fontSize==f.fontSize||(f=new ph(f.window,d.fontSize,f.root,d.width,d.height));var p,g,m=null==(u=e.spineItems[0])?void 0:u.instance.isVersoFirstPage,v=e.spineItems[t-1];if(null!==a.startPage)g=p=a.startPage-1;else{if(!(t>0)||v&&v.complete){p=v?v.instance.pageNumberOffset+v.pages.length:0;var E=e.counterStore.currentPageCounters.page;g=E&&E.length?E[E.length-1]:p}else p=a.epage||t,e.opf.prePaginated||p%2!=(m?1:0)||p++,g=p;null!==a.skipPagesBefore&&(p+=a.skipPagesBefore,g+=a.skipPagesBefore)}e.counterStore.forceSetPageCounter(g);var b=new wh(c,o,e.opf.lang,f,e.clientLayout,e.fontMapper,h,e.opf.fallbackMap,p,e.opf.documentURLTransformer,e.counterStore,e.opf.pageProgression,m);b.pref=e.pref;var C=e.opf.metadata&&e.opf.metadata[Mh.title];b.pubTitle=C&&C[0]&&C[0].v||"",b.docTitle=a.title||"",b.init().then((function(){e.spineItems[t]=n={item:a,xmldoc:o,instance:b,layoutPositions:[null],pages:[],complete:!1},i.finish(n),r.forEach((function(t){t.schedule(n)}))}))})),i.result()},n.removeRenderedPages=function(){for(var t,e=_(this.spineItems);!(t=e()).done;){var n=t.value;n&&n.pages.splice(0)}this.viewport.clear()},n.hasAutoSizedPages=function(){for(var t,e=_(this.spineItems);!(t=e()).done;){var n=t.value;if(n)for(var i,r=_(n.pages);!(i=r()).done;){var o=i.value;if(o.isAutoPageWidth&&o.isAutoPageHeight)return!0}}return!1},n.hasPages=function(){return this.spineItems.some((function(t){return t&&t.pages.length>0}))},n.showTOC=function(t){var e=this.opf,n=e.xhtmlToc||e.ncxToc;if(this.tocAutohide=t,!n)return Ti(null);if(this.tocView&&this.tocView.page)return this.tocView.page.container.style.visibility="visible",this.tocView.page.container.setAttribute("aria-hidden","false"),Ti(this.tocView.page);var i=Ni("showTOC");this.tocView||(this.tocView=new Ph(e.store,n.src,e.lang,this.clientLayout,this.fontMapper,this.pref,this,e.fallbackMap,e.documentURLTransformer,this.counterStore));var r=this.viewport,o=Math.min(350,Math.round(.67*r.width)-16),a=r.height-6,s=r.document.createElement("div");return r.root.appendChild(s),s.style.visibility="hidden",s.style.width=o+10+"px",s.style.maxHeight=a+"px",s.setAttribute("data-vivliostyle-toc-box","true"),s.setAttribute("role","navigation"),this.tocView.showTOC(s,r,o,a,this.viewport.fontSize).then((function(t){s.style.visibility="visible",s.setAttribute("aria-hidden","false"),i.finish(t)})),i.result()},n.hideTOC=function(){this.tocView&&this.tocView.hideTOC()},n.isTOCVisible=function(){return!!this.tocView&&this.tocView.isTOCVisible()},t}();!function(t){t.SINGLE_PAGE="singlePage",t.SPREAD="spread",t.AUTO_SPREAD="autoSpread"}(zh||(zh={}));var jh,Kh=function(){function t(t,n,i,r){var o=this;this.window=t,this.viewportElement=n,this.instanceId=i,this.callbackFn=r,this.pageSheetSizeAlreadySet=!1,this.renderTask=null,n.setAttribute("data-vivliostyle-viewer-viewport",!0),e.isDebug&&n.setAttribute("data-vivliostyle-debug",!0),n.setAttribute("data-vivliostyle-viewer-status","loading");var a=t.document;this.fontMapper=new jl(a.head,n),this.init(),this.kick=function(){},this.sendCommand=function(){},this.resizeListener=function(){o.needResize=!0,o.kick()},this.pageReplacedListener=this.pageReplacedListener.bind(this),this.hyperlinkListener=function(t){},this.pageRuleStyleElement=a.getElementById("vivliostyle-page-rules"),this.actions={loadPublication:this.loadPublication,loadXML:this.loadXML,configure:this.configure,moveTo:this.moveTo,toc:this.showTOC},this.addLogListeners()}var n=t.prototype;return n.init=function(){this.readyState=e.ReadyState.LOADING,this.packageURL=[],this.opf=null,this.haveZipMetadata=!1,this.touchActive=!1,this.touchX=0,this.touchY=0,this.needResize=!1,this.needRefresh=!1,this.viewportSize=null,this.currentPage=null,this.currentSpread=null,this.pagePosition=null,this.fontSize=16,this.zoom=1,this.fitToScreen=!1,this.pageViewMode=zh.SINGLE_PAGE,this.waitForLoading=!1,this.renderAllPages=!0,this.pref={fontFamily:"serif",lineHeight:1.25,margin:8,hyphenate:!1,columnWidth:25,horizontal:!1,nightMode:!1,spreadView:!1,pageBorder:1,enabledMediaTypes:{vivliostyle:!0,print:!0},defaultPaperSize:void 0},this.pageSizes=[]},n.addLogListeners=function(){var t=this,e=o;f.addListener(e.DEBUG,(function(e){t.callback({t:"debug",content:e})})),f.addListener(e.INFO,(function(e){t.callback({t:"info",content:e})})),f.addListener(e.WARN,(function(e){t.callback({t:"warn",content:e})})),f.addListener(e.ERROR,(function(e){t.callback({t:"error",content:e})}))},n.callback=function(t){t.i=this.instanceId,this.callbackFn(t)},n.setReadyState=function(t){this.readyState!==t&&(this.readyState=t,this.viewportElement.setAttribute("data-vivliostyle-viewer-status",t),this.callback({t:"readystatechange"}))},n.loadPublication=function(t){var n=this;N.registerStartTiming("beforeRender"),this.setReadyState(e.ReadyState.LOADING);var i=t.url,r=t.fragment,o=!!t.zipmeta,a=t.authorStyleSheet,s=t.userStyleSheet;this.viewport=null;var u=Ni("loadPublication");return this.configure(t).then((function(){var t=new Rh;t.init(a,s).then((function(){var e=K($(i),n.window.location.href);n.packageURL=[e],t.loadPubDoc(e,o).then((function(t){t?(n.opf=t,n.render(r).then((function(){u.finish(!0)}))):u.finish(!1)}))}))})),u.result()},n.loadXML=function(t){var n=this;N.registerStartTiming("beforeRender"),this.setReadyState(e.ReadyState.LOADING);var i=t.url,r=t.document,o=t.fragment,a=t.authorStyleSheet,s=t.userStyleSheet;this.viewport=null;var u=Ni("loadXML");return this.configure(t).then((function(){var t=new Rh;t.init(a,s).then((function(){var e=i.map((function(t,e){return{url:K($(t.url),n.window.location.href),index:e,startPage:t.startPage,skipPagesBefore:t.skipPagesBefore}}));n.packageURL=e.map((function(t){return t.url})),n.opf=new Gh(t,""),n.opf.initWithChapters(e,r).then((function(){n.render(o).then((function(){u.finish(!0)}))}))}))})),u.result()},n.render=function(t){var e=this;return this.cancelRenderingTask(),(t?this.opf.resolveFragment(t).thenAsync((function(t){return e.pagePosition=t,Ti(!0)})):Ti(!0)).thenAsync((function(){return N.registerEndTiming("beforeRender"),e.resize()}))},n.resolveLength=function(t){var e,n=parseFloat(t);if("string"==typeof t&&(e=t.match(/[a-z]+$/))){var i=e[0];if("em"===i||"rem"===i)return n*this.fontSize;if("ex"===i)return n*Ht.ex*this.fontSize/Ht.em;var r=Ht[i];if(r)return n*r}return n},n.configure=function(t){if("boolean"==typeof t.autoresize&&(t.autoresize?(this.viewportSize=null,this.window.addEventListener("resize",this.resizeListener,!1),this.needResize=!0):this.window.removeEventListener("resize",this.resizeListener,!1)),"number"==typeof t.fontSize){var e=t.fontSize;e>=5&&e<=72&&this.fontSize!=e&&(this.fontSize=e,this.needResize=!0)}if("object"==typeof t.viewport&&t.viewport){var n=t.viewport,i={marginLeft:this.resolveLength(n["margin-left"])||0,marginRight:this.resolveLength(n["margin-right"])||0,marginTop:this.resolveLength(n["margin-top"])||0,marginBottom:this.resolveLength(n["margin-bottom"])||0,width:this.resolveLength(n.width)||0,height:this.resolveLength(n.height)||0};(i.width>=200||i.height>=200)&&(this.window.removeEventListener("resize",this.resizeListener,!1),this.viewportSize=i,this.needResize=!0)}return"boolean"==typeof t.hyphenate&&(this.pref.hyphenate=t.hyphenate,this.needResize=!0),"boolean"==typeof t.horizontal&&(this.pref.horizontal=t.horizontal,this.needResize=!0),"boolean"==typeof t.nightMode&&(this.pref.nightMode=t.nightMode,this.needResize=!0),"number"==typeof t.lineHeight&&(this.pref.lineHeight=t.lineHeight,this.needResize=!0),"number"==typeof t.columnWidth&&(this.pref.columnWidth=t.columnWidth,this.needResize=!0),"string"==typeof t.fontFamily&&(this.pref.fontFamily=t.fontFamily,this.needResize=!0),"boolean"==typeof t.load&&(this.waitForLoading=t.load),"boolean"==typeof t.renderAllPages&&(this.renderAllPages=t.renderAllPages),"string"==typeof t.userAgentRootURL&&(G(t.userAgentRootURL.replace(/resources\/?$/,"")),j(t.userAgentRootURL)),"string"==typeof t.rootURL&&(G(t.rootURL),j(H+"resources/")),"string"==typeof t.pageViewMode&&t.pageViewMode!==this.pageViewMode&&(this.pageViewMode=t.pageViewMode,this.needResize=!0),"number"==typeof t.pageBorder&&t.pageBorder!==this.pref.pageBorder&&(this.viewport=null,this.pref.pageBorder=t.pageBorder,this.needResize=!0),"number"==typeof t.zoom&&t.zoom!==this.zoom&&(this.zoom=t.zoom,this.needRefresh=!0),"boolean"==typeof t.fitToScreen&&t.fitToScreen!==this.fitToScreen&&(this.fitToScreen=t.fitToScreen,this.needRefresh=!0),"object"==typeof t.defaultPaperSize&&"number"==typeof t.defaultPaperSize.width&&"number"==typeof t.defaultPaperSize.height&&(this.viewport=null,this.pref.defaultPaperSize=t.defaultPaperSize,this.needResize=!0),this.configurePlugins(t),Ti(!0)},n.configurePlugins=function(t){var n=this;v(e.HOOKS.CONFIGURATION).forEach((function(e){var i=e(t);n.needResize=i.needResize||n.needResize,n.needRefresh=i.needRefresh||n.needRefresh}))},n.pageReplacedListener=function(t){var e=this.currentPage,n=this.currentSpread,i=t.target;n?n.left!==i&&n.right!==i||this.showCurrent(t.newPage):e===t.target&&this.showCurrent(t.newPage)},n.forCurrentPages=function(t){var e=[];this.currentPage&&e.push(this.currentPage),this.currentSpread&&(e.push(this.currentSpread.left),e.push(this.currentSpread.right)),e.forEach((function(e){e&&t(e)}))},n.removePageListeners=function(){var t=this;this.forCurrentPages((function(e){e.removeEventListener("hyperlink",t.hyperlinkListener,!1),e.removeEventListener("replaced",t.pageReplacedListener,!1)}))},n.hidePages=function(){this.removePageListeners(),this.forCurrentPages((function(t){et(t.container,"display","none"),t.container.setAttribute("aria-hidden","true")})),this.currentPage=null,this.currentSpread=null},n.showSinglePage=function(t){t.addEventListener("hyperlink",this.hyperlinkListener,!1),t.addEventListener("replaced",this.pageReplacedListener,!1),et(t.container,"visibility","visible"),et(t.container,"display","block"),t.container.setAttribute("aria-hidden","false")},n.showPage=function(t){this.hidePages(),this.currentPage=t,t.container.style.marginLeft="",t.container.style.marginRight="",this.showSinglePage(t)},n.showSpread=function(t){if(this.hidePages(),this.currentSpread=t,t.left&&t.right){var e=parseFloat(t.left.container.style.width),n=parseFloat(t.right.container.style.width);e&&n&&e!==n&&(e<n?t.left.container.style.marginLeft=n-e+"px":t.right.container.style.marginRight=e-n+"px")}t.left&&(this.showSinglePage(t.left),t.right?t.left.container.removeAttribute("data-vivliostyle-unpaired-page"):t.left.container.setAttribute("data-vivliostyle-unpaired-page",!0)),t.right&&(this.showSinglePage(t.right),t.left?t.right.container.removeAttribute("data-vivliostyle-unpaired-page"):t.right.container.setAttribute("data-vivliostyle-unpaired-page",!0))},n.reportPosition=function(){var t=this,e=Ni("reportPosition");return this.opf.getCFI(this.pagePosition.spineIndex,this.pagePosition.offsetInItem).then((function(n){var i=t.currentPage;(t.waitForLoading&&i.fetchers.length>0?_i(i.fetchers):Ti(!0)).then((function(){t.sendLocationNotification(i,n).thenFinish(e)}))})),e.result()},n.createViewport=function(){var t=this.viewportElement;if(this.viewportSize){var e=this.viewportSize;return t.style.marginLeft=e.marginLeft+"px",t.style.marginRight=e.marginRight+"px",t.style.marginTop=e.marginTop+"px",t.style.marginBottom=e.marginBottom+"px",new ph(this.window,this.fontSize,t,e.width,e.height)}return new ph(this.window,this.fontSize,t)},n.resolveSpreadView=function(t){switch(this.pageViewMode){case zh.SINGLE_PAGE:return!1;case zh.SPREAD:return!0;case zh.AUTO_SPREAD:default:return t.width/t.height>=1.45&&t.width>800}},n.updateSpreadView=function(t){this.pref.spreadView=t,this.viewportElement.setAttribute("data-vivliostyle-spread-view",t.toString())},n.sizeIsGood=function(){var t=this.createViewport(),e=this.resolveSpreadView(t),n=this.pref.spreadView!==e;return this.updateSpreadView(e),!(this.viewportSize||!this.viewport||this.viewport.fontSize!=this.fontSize||(n||t.width!=this.viewport.width||t.height!=this.viewport.height)&&(n||t.width!=this.viewport.width||t.height==this.viewport.height||!/Android|iPhone|iPad|iPod/.test(navigator.userAgent))&&(!this.opfView||!this.opfView.hasPages()||this.opfView.hasAutoSizedPages()||(this.viewport.width=t.width,this.viewport.height=t.height,this.needRefresh=!0,0)))},n.setPageSize=function(t,e,n,i){this.pageSizes[i]=t,this.setPageSizePageRules(e,n,i)},n.setPageSizePageRules=function(t,e,n){if(!this.pageSheetSizeAlreadySet&&this.pageRuleStyleElement){var i="";Object.keys(t).forEach((function(e){i+="@page "+e+"{margin:0;size:";var n=t[e];i+=n.width+"px "+n.height+"px;}"})),this.pageRuleStyleElement.textContent=i,this.pageSheetSizeAlreadySet=!0}},n.removePageSizePageRules=function(){this.pageRuleStyleElement&&(this.pageRuleStyleElement.textContent="",this.pageSheetSizeAlreadySet=!1)},n.reset=function(){var t=!1,e=!1;this.opfView&&(t=this.opfView.isTOCVisible(),e=this.opfView.tocAutohide,this.opfView.hideTOC(),this.opfView.removeRenderedPages()),this.removePageSizePageRules(),this.viewport=this.createViewport(),this.viewport.resetZoom(),this.opfView=new Xh(this.opf,this.viewport,this.fontMapper,this.pref,this.setPageSize.bind(this)),t&&this.sendCommand({a:"toc",v:"show",autohide:e})},n.showCurrent=function(t,e){var n=this;return this.needRefresh=!1,this.removePageListeners(),this.pref.spreadView?this.opfView.getSpread(this.pagePosition,e).thenAsync((function(e){return n.showSpread(e),n.setSpreadZoom(e),n.currentPage=t,Ti(null)})):(this.showPage(t),this.setPageZoom(t),this.currentPage=t,Ti(null))},n.setPageZoom=function(t){var e=this.getAdjustedZoomFactor(t.dimensions);this.viewport.zoom(t.dimensions.width,t.dimensions.height,e)},n.setSpreadZoom=function(t){var e=this.getSpreadDimensions(t);this.viewport.zoom(e.width,e.height,this.getAdjustedZoomFactor(e))},n.getAdjustedZoomFactor=function(t){return this.fitToScreen?this.calculateZoomFactorToFitInsideViewPort(t):this.zoom},n.getSpreadDimensions=function(t){var e=0,n=0;return t.left&&(e+=t.left.dimensions.width,n=t.left.dimensions.height),t.right&&(e+=t.right.dimensions.width,n=Math.max(n,t.right.dimensions.height)),t.left&&t.right&&(e+=2*this.pref.pageBorder,e+=Math.abs(t.left.dimensions.width-t.right.dimensions.width)),{width:e,height:n}},n.queryZoomFactor=function(t){if(!this.currentPage)throw new Error("no page exists.");switch(t){case jh.FIT_INSIDE_VIEWPORT:var e;return e=this.pref.spreadView?this.getSpreadDimensions(this.currentSpread):this.currentPage.dimensions,this.calculateZoomFactorToFitInsideViewPort(e);default:throw new Error("unknown zoom type: "+t)}},n.calculateZoomFactorToFitInsideViewPort=function(t){return Math.min(this.viewport.width/t.width,this.viewport.height/t.height)},n.cancelRenderingTask=function(){this.renderTask&&this.renderTask.interrupt(new $h),this.renderTask=null},n.resize=function(){var t=this;if(this.needResize=!1,this.needRefresh=!1,this.sizeIsGood())return Ti(!0);this.setReadyState(e.ReadyState.LOADING),this.cancelRenderingTask();var n=Si().getScheduler().run((function(){return Ai("resize",(function(i){t.opf?(t.renderTask=n,N.registerStartTiming("render (resize)"),t.reset(),t.pagePosition&&(0==t.pagePosition.pageIndex&&0==t.pagePosition.offsetInItem||(t.pagePosition.pageIndex=-1)),t.opf.setEPageCountMode(t.renderAllPages),t.opfView.renderPagesUpto(t.pagePosition,!t.renderAllPages).then((function(r){r?(t.pagePosition=r.position,t.showCurrent(r.page,!0).then((function(){t.setReadyState(e.ReadyState.INTERACTIVE),t.opf.countEPages((function(e){var n={t:"nav",epageCount:e,first:t.currentPage.isFirstPage,last:t.currentPage.isLastPage,metadata:t.opf.metadata,docTitle:t.opf.spine[t.pagePosition.spineIndex].title};(t.currentPage.isFirstPage||0==t.pagePosition.pageIndex&&t.opf.spine[t.pagePosition.spineIndex].epage)&&(n.epage=t.opf.spine[t.pagePosition.spineIndex].epage),t.callback(n)})).then((function(){t.reportPosition().then((function(r){(t.renderAllPages?t.opfView.renderAllPages():Ti(null)).then((function(){t.renderTask===n&&(t.renderTask=null),N.registerEndTiming("render (resize)"),t.renderAllPages&&t.setReadyState(e.ReadyState.COMPLETE),t.callback({t:"loaded"}),i.finish(r)}))}))}))}))):i.finish(!1)}))):i.finish(!1)}),(function(t,e){if(!(e instanceof $h))throw e;N.registerEndTiming("render (resize)"),f.debug(e.message)}))}));return Ti(!0)},n.sendLocationNotification=function(t,e){var n=this,i=Ni("sendLocationNotification"),r={t:"nav",first:t.isFirstPage,last:t.isLastPage,metadata:this.opf.metadata,docTitle:this.opf.spine[t.spineIndex].title};return this.opf.getEPageFromPosition(this.pagePosition).then((function(t){r.epage=t,r.epageCount=n.opf.epageCount,e&&(r.cfi=e),n.callback(r),i.finish(!0)})),i.result()},n.getCurrentPageProgression=function(){return this.opfView?this.opfView.getCurrentPageProgression(this.pagePosition):null},n.moveTo=function(t){var n,i=this;if(this.readyState!==e.ReadyState.COMPLETE&&"next"!==t.where&&this.setReadyState(e.ReadyState.LOADING),"string"==typeof t.where){var r;switch(t.where){case"next":r=this.pref.spreadView?this.opfView.nextSpread:this.opfView.nextPage;break;case"previous":r=this.pref.spreadView?this.opfView.previousSpread:this.opfView.previousPage;break;case"last":r=this.opfView.lastPage;break;case"first":r=this.opfView.firstPage;break;default:return Ti(!0)}r&&(n=function(){return r.call(i.opfView,i.pagePosition,!i.renderAllPages)})}else if("number"==typeof t.epage){var o=t.epage;n=function(){return i.opfView.navigateToEPage(o,i.pagePosition,!i.renderAllPages)}}else{if("string"!=typeof t.url)return Ti(!0);var a=t.url;n=function(){return i.opfView.navigateTo(a,i.pagePosition,!i.renderAllPages)}}var s=Ni("moveTo");return n.call(this.opfView).then((function(t){var n;if(t){i.pagePosition=t.position;var r=Ni("moveTo.showCurrent");n=r.result(),i.showCurrent(t.page,!i.renderAllPages).then((function(){i.reportPosition().thenFinish(r)}))}else n=Ti(!0);n.then((function(t){i.readyState===e.ReadyState.LOADING&&i.setReadyState(e.ReadyState.INTERACTIVE),s.finish(t)}))})),s.result()},n.showTOC=function(t){var e=this,n=!!t.autohide,i=t.v,r=this.opfView.isTOCVisible(),o=n!=this.opfView.tocAutohide&&"hide"!=i;if(r){if("show"==i&&!o)return Ti(!0)}else if("hide"==i)return Ti(!0);if(r&&"show"!=i)return this.opfView.hideTOC(),Ti(!0);var a=Ni("showTOC");return this.opfView.showTOC(n).then((function(t){t&&(o&&(t.listeners={}),n&&t.addEventListener("hyperlink",(function(){e.opfView.hideTOC()}),!1),t.addEventListener("hyperlink",e.hyperlinkListener,!1)),a.finish(!0)})),a.result()},n.runCommand=function(t){var e=this,n=t.a||"";return Ai("runCommand",(function(i){var r=e.actions[n];r?r.call(e,t).then((function(){e.callback({t:"done",a:n}),i.finish(!0)})):(f.error("No such action:",n),i.finish(!0))}),(function(t,e){f.error(e,"Error during action:",n),t.finish(!0)}))},n.initEmbed=function(t){var e,n=this,i=qh(t),r=null,o=this;e=function(){var t=Ni("commandLoop"),e=Si().getScheduler();return o.hyperlinkListener=function(t){var n=t,i="#"===n.href.charAt(0)||o.packageURL.some((function(t){return n.href.substr(0,t.length)==t}));if(i){t.preventDefault();var r={t:"hyperlink",href:n.href,internal:i};e.run((function(){return o.callback(r),Ti(!0)}))}},t.loopWithFrame((function(t){if(o.needResize)o.resize().then((function(){t.continueLoop()}));else if(o.needRefresh)o.currentPage&&o.showCurrent(o.currentPage).then((function(){t.continueLoop()}));else if(i){var e=i;i=null,o.runCommand(e).then((function(){t.continueLoop()}))}else{var a=Ni("waitForCommand");r=a.suspend(n),a.result().then((function(){t.continueLoop()}))}})).thenFinish(t),t.result()},(wi?wi.getScheduler():Di||new Ii(new xi)).run(e,void 0),o.kick=function(){var t=r;t&&(r=null,t.schedule(!0))},o.sendCommand=function(t){return!i&&(i=qh(t),o.kick(),!0)},this.window.adapt_command=o.sendCommand},t}();!function(t){t.FIT_INSIDE_VIEWPORT="fit inside viewport"}(jh||(jh={}));var $h=function(t){function e(){var n;return(n=t.call(this)||this).name="RenderingCanceledError",n.message="Page rendering has been canceled",Object.setPrototypeOf(L(n),e.prototype),n.stack=(new Error).stack,n}return I(e,t),e}(k(Error));function qh(t){return"string"==typeof t?V(t):t}var Yh=e.PageProgression;function Zh(t){var e={};return Object.keys(t).forEach((function(n){var i=t[n];switch(n){case"autoResize":e.autoresize=i;break;case"pageBorderWidth":e.pageBorder=i;break;default:e[n]=i}})),e}var Qh,Jh=function(){function t(t,e){this.settings=t,this.initialized=!1,s(t.debug),this.adaptViewer_=new Kh(t.window||window,t.viewportElement,"main",this.dispatcher.bind(this)),this.options={autoResize:!0,fontSize:16,pageBorderWidth:1,renderAllPages:!0,pageViewMode:zh.AUTO_SPREAD,zoom:1,fitToScreen:!1,defaultPaperSize:void 0},e&&this.setOptions(e),this.eventTarget=new mt,Object.defineProperty(this,"readyState",{get:function(){return this.adaptViewer_.readyState}})}var n=t.prototype;return n.setOptions=function(t){var e=Object.assign({a:"configure"},Zh(t));this.adaptViewer_.sendCommand(e),Object.assign(this.options,t)},n.dispatcher=function(t){var e={type:t.t},n=t;Object.keys(n).forEach((function(t){"t"!==t&&(e[t]=n[t])})),this.eventTarget.dispatchEvent(e)},n.addListener=function(t,e){this.eventTarget.addEventListener(t,e,!1)},n.removeListener=function(t,e){this.eventTarget.removeEventListener(t,e,!1)},n.loadDocument=function(t,e,n){t||this.eventTarget.dispatchEvent({type:"error",content:"No URL specified"}),this.loadDocumentOrPublication(t,null,e,n)},n.loadPublication=function(t,e,n){t||this.eventTarget.dispatchEvent({type:"error",content:"No URL specified"}),this.loadDocumentOrPublication(null,t,e,n)},n.loadDocumentOrPublication=function(t,e,n,i){var r=n||{};function o(t){return t?t.map((function(t){return{url:t.url||null,text:t.text||null}})):void 0}var a=o(r.authorStyleSheet),s=o(r.userStyleSheet);i&&Object.assign(this.options,i);var u=Object.assign({a:t?"loadXML":"loadPublication",userAgentRootURL:this.settings.userAgentRootURL,url:tf(t)||e,document:r.documentObject,fragment:r.fragment,authorStyleSheet:a,userStyleSheet:s},Zh(this.options));this.initialized?this.adaptViewer_.sendCommand(u):(this.initialized=!0,this.adaptViewer_.initEmbed(u))},n.getCurrentPageProgression=function(){return this.adaptViewer_.getCurrentPageProgression()},n.resolveNavigation=function(t){switch(t){case e.Navigation.LEFT:return this.getCurrentPageProgression()===Yh.LTR?e.Navigation.PREVIOUS:e.Navigation.NEXT;case e.Navigation.RIGHT:return this.getCurrentPageProgression()===Yh.LTR?e.Navigation.NEXT:e.Navigation.PREVIOUS;default:return t}},n.navigateToPage=function(t,n){t===e.Navigation.EPAGE?this.adaptViewer_.sendCommand({a:"moveTo",epage:n}):this.adaptViewer_.sendCommand({a:"moveTo",where:this.resolveNavigation(t)})},n.navigateToInternalUrl=function(t){this.adaptViewer_.sendCommand({a:"moveTo",url:t})},n.isTOCVisible=function(){return this.adaptViewer_.opfView&&this.adaptViewer_.opfView.opf&&(this.adaptViewer_.opfView.opf.xhtmlToc||this.adaptViewer_.opfView.opf.ncxToc)?!!this.adaptViewer_.opfView.isTOCVisible():null},n.showTOC=function(t,e){this.adaptViewer_.sendCommand({a:"toc",v:null==t?"toggle":t?"show":"hide",autohide:e})},n.queryZoomFactor=function(t){return this.adaptViewer_.queryZoomFactor(t)},n.getPageSizes=function(){return this.adaptViewer_.pageSizes},n.getTOC=function(){var t,e;return null==(t=this.adaptViewer_.opfView)||null==(e=t.tocView)?void 0:e.getTOC()},n.getMetadata=function(){return this.adaptViewer_.opf.getMetadata()},n.getCover=function(){return this.adaptViewer_.opf.cover},t}();function tf(t){function e(t){return"number"==typeof t?t:null}function n(t){return"string"==typeof t?{url:t,startPage:null,skipPagesBefore:null}:{url:t.url,startPage:e(t.startPage),skipPagesBefore:e(t.skipPagesBefore)}}return Array.isArray(t)?t.map(n):t?[n(t)]:null}(Qh=e.Navigation||(e.Navigation={})).PREVIOUS="previous",Qh.NEXT="next",Qh.LEFT="left",Qh.RIGHT="right",Qh.FIRST="first",Qh.LAST="last",Qh.EPAGE="epage";var ef=jh,nf=zh;N.forceRegisterEndTiming("load_vivliostyle");var rf=function(){function t(t,e){var n=e.title,i=void 0===n?"":n,r=e.printCallback,o=void 0===r?function(t){return t.print()}:r,a=e.hideIframe,s=void 0===a||a,u=e.removeIframe,l=void 0===u||u;this.htmlDoc=t,this.title=i,this.printCallback=o,this.hideIframe=s,this.removeIframe=l}var e=t.prototype;return e.init=function(){this.iframe=document.createElement("iframe"),this.hideIframe&&(this.iframe.style.width="0",this.iframe.style.height="0",this.iframe.style.borderWidth="0"),this.window=window,this.window.printInstance=this,this.iframe.srcdoc="\n      <!DOCTYPE html>\n      <html data-vivliostyle-paginated=\"true\">\n        <head>\n          <meta charset='utf-8'/>\n          <meta name='viewport' content='width=device-width, initial-scale=1.0'/>\n          <title>"+this.title+"</title>\n          <style>"+zi+"</style>\n          <style>"+Vi+"</style>\n          <style>\n            html[data-vivliostyle-paginated] {\n              width: 100%;\n              height: 100%;\n            }\n            html[data-vivliostyle-paginated] body,\n            html[data-vivliostyle-paginated] [data-vivliostyle-viewer-viewport] {\n              width: 100% !important;\n              height: 100% !important;\n            }\n            html[data-vivliostyle-paginated],\n            html[data-vivliostyle-paginated] body {\n              margin: 0;\n              padding: 0;\n            }\n          </style>\n          <style id='vivliostyle-page-rules'></style>\n        </head>\n        <body onload='parent.printInstance.runInIframe(window)'>\n          <div id=\"vivliostyle-viewer-viewport\"></div>\n        </body>\n      </html>",document.body.appendChild(this.iframe)},e.runInIframe=function(t){var e=this;return this.iframeWin=t,this.preparePrint().then((function(){return e.browserPrint()})).then((function(){return e.cleanUp()}))},e.preparePrint=function(){this.iframeWin.document.title=this.title;var t=new Blob([this.htmlDoc],{type:"text/html"}),e=URL.createObjectURL(t),n=new Jh({viewportElement:this.iframeWin.document.body.firstElementChild,window:this.iframeWin,debug:!0},{defaultPaperSize:{width:794,height:1122}});return new Promise((function(t){n.addListener("readystatechange",(function(){"complete"===n.readyState&&t()})),n.loadDocument({url:e})}))},e.browserPrint=function(){this.printCallback(this.iframeWin)},e.cleanUp=function(){delete this.window.printInstance,this.removeIframe&&this.iframe.parentElement.removeChild(this.iframe)},t}();e.CoreViewer=Jh,e.PageViewMode=nf,e.Profiler=b,e.UserAgentBaseCss=Xi,e.UserAgentPageCss=Wi,e.UserAgentXml=Gi,e.ValidationTxt=Hi,e.VivliostyleViewportCss=zi,e.VivliostyleViewportScreenCss=Vi,e.ZoomType=ef,e.getHooksForName=v,e.pageProgressionOf=u,e.plugin=E,e.printHTML=function(t,e){new rf(t,e).init()},e.profile=T,e.profiler=N,e.registerHook=p,e.removeHook=m,e.setDebug=s})),v=Object.freeze(Object.assign(Object.create(null),m,{default:m}));!function(t){t.Default="",t.Auto="auto",t.Preset="preset",t.Custom="custom",t.Zero="0"}(p||(p={}));const E=[{name:"A5",description:"A5"},{name:"A4",description:"A4"},{name:"A3",description:"A3"},{name:"B5",description:"B5 (ISO)"},{name:"B4",description:"B4 (ISO)"},{name:"JIS-B5",description:"B5 (JIS)"},{name:"JIS-B4",description:"B4 (JIS)"},{name:"letter",description:"letter"},{name:"legal",description:"legal"},{name:"ledger",description:"ledger"}],b={customWidth:"210mm",customHeight:"297mm",customMargin:"10%",baseFontSize:"12pt",baseLineHeight:"1.2",baseFontFamily:"serif",viewerFontSize:16};class C{constructor(t){this.PresetSize=C.PresetSize,this.pageSizeMode=e.observable(p.Default),this.presetSize=e.observable(E[1]),this.isLandscape=e.observable(!1),this.customWidth=e.observable(b.customWidth),this.customHeight=e.observable(b.customHeight),this.pageSizeImportant=e.observable(!1),this.pageMarginMode=e.observable(p.Default),this.customMargin=e.observable(b.customMargin),this.pageMarginImportant=e.observable(!1),this.firstPageMarginZero=e.observable(!1),this.firstPageMarginZeroImportant=e.observable(!1),this.forceHtmlBodyMarginZero=e.observable(!1),this.widowsOrphans=e.observable(""),this.widowsOrphansImportant=e.observable(!1),this.imageMaxSizeToFitPage=e.observable(!1),this.imageMaxSizeToFitPageImportant=e.observable(!1),this.imageKeepAspectRatio=e.observable(!1),this.imageKeepAspectRatioImportant=e.observable(!1),this.baseFontSize=e.observable(b.baseFontSize),this.baseFontSizeSpecified=e.observable(!1),this.baseFontSizeImportant=e.observable(!1),this.baseLineHeight=e.observable(b.baseLineHeight),this.baseLineHeightSpecified=e.observable(!1),this.baseLineHeightImportant=e.observable(!1),this.baseFontFamily=e.observable(b.baseFontFamily),this.baseFontFamilySpecified=e.observable(!1),this.baseFontFamilyImportant=e.observable(!1),this.allImportant=e.observable(!1),this.pageOtherStyle=e.observable(""),this.firstPageOtherStyle=e.observable(""),this.rootOtherStyle=e.observable(""),this.beforeOtherStyle=e.observable(""),this.afterOtherStyle=e.observable(""),this.viewerFontSize=null,this.setViewerFontSizeObservable=t=>{this.viewerFontSize=t;const e=document.getElementsByName("vivliostyle-settings_viewer-font-size")[0];e&&(e.value=this.fontSizePxToPercent(Number(t()),100,5).toString())},this.viewerFontSizePercent=e.pureComputed({read(){if(!this.viewerFontSize)return 100;return this.fontSizePxToPercent(Number(this.viewerFontSize()),100,5)},write(t){if(!this.viewerFontSize)return;const e=parseFloat(String(t));let n=e&&this.fontSizePercentToPx(e);if(!n||n<5||n>72){const t=document.getElementsByName("vivliostyle-settings_viewer-font-size")[0];t&&(t.value="100"),n=b.viewerFontSize}this.viewerFontSize(Number(n))},owner:this}),this.cssText=e.pureComputed({read:this.toCSSText,write:this.fromCSSText,owner:this}),this.allImportant.subscribe((t=>{this.pageSizeImportant(t),this.pageMarginImportant(t),this.firstPageMarginZeroImportant(t),this.widowsOrphansImportant(t),this.imageMaxSizeToFitPageImportant(t),this.imageKeepAspectRatioImportant(t),this.baseFontSizeImportant(t),this.baseLineHeightImportant(t),this.baseFontFamilyImportant(t)})),this.pageStyleRegExp=new RegExp("^((?:\\n|.)*?)\\/\\*<viewer>\\*\\/\\s*(?:@page\\s*\\{\\s*(?:size:\\s*([^\\s!;{}]+)(?:\\s+([^\\s!;{}]+))?\\s*(!important)?(?:;|(?=[\\s{}]))\\s*)?(?:margin:\\s*([^\\s!;{}]+(?:\\s+[^\\s!;{}]+)?(?:\\s+[^\\s!;{}]+)?(?:\\s+[^\\s!;{}]+)?)\\s*(!important)?(?:;|(?=[\\s{}]))\\s*)?((?:[^{}]+|\\{[^{}]*\\})*)\\}\\s*)?(?:@page\\s*:first\\s*\\{\\s*(margin:\\s*0(?:\\w+|%)?\\s*(!important)?(?:;|(?=[\\s{}]))\\s*)?((?:[^{}]+|\\{[^{}]*\\})*)\\}\\s*)?((?:html|:root),\\s*body\\s*\\{\\s*margin:\\s*0(?:\\w+|%)?\\s*!important(?:;|(?=[\\s{}]))\\s*\\}\\s*)?(?:(?:html|:root)\\s*\\{\\s*(?:font-size:\\s*(calc\\([^()]+\\)|[^\\s!;{}]+)\\s*(!important)?(?:;|(?=[\\s{}]))\\s*)?(?:line-height:\\s*([^\\s!;{}]+)\\s*(!important)?(?:;|(?=[\\s{}]))\\s*)?(?:font-family:\\s*([^!;{}]+)\\s*(!important)?(?:;|(?=[\\s{}]))\\s*)?([^{}]*)\\}\\s*)?(?:body\\s*\\{\\s*(?:[-\\w]+:\\s*inherit\\s*!important(?:;|(?=[\\s{}]))\\s*)+\\}\\s*)?(?:\\*\\s*\\{\\s*widows:\\s*(1|999)\\s*(!important)?(?:;|(?=[\\s{}]))\\s*orphans:\\s*\\19\\s*\\20(?:;|(?=[\\s{}]))\\s*\\}\\s*)?(?:img,\\s*svg\\s*\\{\\s*(max-inline-size:\\s*100%\\s*(!important)?(?:;|(?=[\\s{}]))\\s*max-block-size:\\s*100vb\\s*\\22(?:;|(?=[\\s{}]))\\s*)?(object-fit:\\s*contain\\s*(!important)?(?:;|(?=[\\s{}]))\\s*)?\\}\\s*)?((?:\\n|.)*)$"),t&&this.copyFrom(t)}fontSizePxToPercent(t,e,n){let i=t/b.viewerFontSize*(e||100);return n&&(i=i.toPrecision(n).replace(/(?:\.0*|(\.\d*?)0+)$/,"$1")),i}fontSizePercentToPx(t,e,n){let i=t/(e||100)*b.viewerFontSize;return n&&(i=i.toPrecision(n).replace(/(?:\.0*|(\.\d*?)0+)$/,"$1")),i}fromCSSText(t){const e=this.pageStyleRegExp.exec(t);if(e){const[,t,n,i,r,o,a,s,u,l,c,h,f,d,g,m,v,b,C,y,w,D,S,N,T,A]=e;let x=A,I=v,F=f,P=c,O=s,R=C,k=n,L=i,B=0,_=0;if(this.beforeOtherStyle(t),"landscape"==k||"portrait"==k?(this.isLandscape("landscape"==k),k=L,L=null):"landscape"!=L&&"portrait"!=L||(this.isLandscape("landscape"==L),L=null),null!=k){if(null==L)if("auto"==k)this.pageSizeMode(p.Auto);else{const t=E.find((t=>t.name.toLowerCase()==k.toLowerCase()));t?(this.pageSizeMode(p.Preset),this.presetSize(t)):(this.pageSizeMode(p.Custom),this.customWidth(k),this.customHeight(k))}else this.pageSizeMode(p.Custom),this.customWidth(k),this.customHeight(L);this.pageSizeImportant(!!r),r?B++:_++}else this.pageSizeMode(p.Default);null!=o?(this.pageMarginMode("0"==o?p.Zero:p.Custom),"0"==o?this.pageMarginMode(p.Zero):(this.pageMarginMode(p.Custom),this.customMargin(o)),this.pageMarginImportant(!!a),a?B++:_++):this.pageMarginMode(p.Default),O=O||"",this.pageOtherStyle(O),u?(this.firstPageMarginZero(!0),this.firstPageMarginZeroImportant(!!l),l?B++:_++):this.firstPageMarginZero(!1),P=P||"",this.firstPageOtherStyle(P),h?this.forceHtmlBodyMarginZero(!0):this.forceHtmlBodyMarginZero(!1),null!=F?(F=F.replace(/^\s*calc\([.\d]+\s*\*\s*([.\d]+\w+)\)\s*$/,"$1"),this.baseFontSizeSpecified(!0),this.baseFontSize(F),this.baseFontSizeImportant(!!d),d?B++:_++):this.baseFontSizeSpecified(!1),null!=g?(this.baseLineHeightSpecified(!0),this.baseLineHeight(g),this.baseLineHeightImportant(!!m),m?B++:_++):this.baseLineHeightSpecified(!1),null!=I?(I=I.trim(),this.baseFontFamilySpecified(!0),this.baseFontFamily(I),this.baseFontFamilyImportant(!!b),b?B++:_++):this.baseFontFamilySpecified(!1),R=R||"",this.rootOtherStyle(R),null!=y?(this.widowsOrphans(y),this.widowsOrphansImportant(!!w),w?B++:_++):this.widowsOrphans(p.Default),D?(this.imageMaxSizeToFitPage(!0),this.imageMaxSizeToFitPageImportant(!!S),S?B++:_++):this.imageMaxSizeToFitPage(!1),N?(this.imageKeepAspectRatio(!0),this.imageKeepAspectRatioImportant(!!T),T?B++:_++):this.imageKeepAspectRatio(!1),x=x.replace(/\/\*<\/?viewer>\*\/\n?/g,"")||"",this.afterOtherStyle(x),this.allImportant(B>0&&0==_)}else{const e=t.replace(/\/\*<\/?viewer>\*\/\n?/g,"")||"";this.afterOtherStyle(e)}}toCSSText(){function t(t){return t?" !important":""}let e=this.beforeOtherStyle();if(e+="/*<viewer>*/\n",this.pageSizeMode()!=p.Default||this.pageMarginMode()!=p.Default||this.pageOtherStyle()){if(e+="@page { ",this.pageSizeMode()!=p.Default){switch(e+="size: ",this.pageSizeMode()){case p.Auto:e+="auto";break;case p.Preset:e+=this.presetSize().name,this.isLandscape()&&(e+=" landscape");break;case p.Custom:e+=`${this.customWidth()} ${this.customHeight()}`;break;default:throw new Error(`Unknown pageSizeMode ${this.pageSizeMode()}`)}e+=`${t(this.pageSizeImportant())}; `}if(this.pageMarginMode()!=p.Default){switch(e+="margin: ",this.pageMarginMode()){case p.Auto:e+="auto";break;case p.Zero:e+="0";break;case p.Custom:e+=`${this.customMargin()}`;break;default:throw new Error(`Unknown pageMarginMode ${this.pageMarginMode()}`)}e+=`${t(this.pageMarginImportant())}; `}e+=this.pageOtherStyle(),e+="}\n"}if((this.firstPageMarginZero()||this.firstPageOtherStyle())&&(e+="@page :first { ",this.firstPageMarginZero()&&(e+=`margin: 0${t(this.firstPageMarginZeroImportant())}; `),e+=this.firstPageOtherStyle(),e+="}\n"),this.forceHtmlBodyMarginZero()&&(e+=":root, body { margin: 0 !important; }\n"),this.baseFontSizeSpecified()||this.baseLineHeightSpecified()||this.baseFontFamilySpecified()||this.rootOtherStyle()){e+=":root { ";const n=this.baseFontSize();if(this.baseFontSizeSpecified())if(this.viewerFontSize&&this.viewerFontSize()!=b.viewerFontSize&&!n.endsWith("%")){e+=`font-size: calc(${this.fontSizePxToPercent(Number(this.viewerFontSize()),1,5)} * ${n})${t(this.baseFontSizeImportant())}; `}else e+=`font-size: ${this.baseFontSize()}${t(this.baseFontSizeImportant())}; `;this.baseLineHeightSpecified()&&(e+=`line-height: ${this.baseLineHeight()}${t(this.baseLineHeightImportant())}; `),this.baseFontFamilySpecified()&&(e+=`font-family: ${this.baseFontFamily()}${t(this.baseFontFamilyImportant())}; `),e+=this.rootOtherStyle(),e+="}\n"}return(this.baseFontSizeSpecified()&&this.baseFontSizeImportant()||this.baseLineHeightSpecified()&&this.baseLineHeightImportant()||this.baseFontFamilySpecified()&&this.baseFontFamilyImportant())&&(e+="body { ",this.baseFontSizeSpecified()&&this.baseFontSizeImportant()&&(e+="font-size: inherit !important; "),this.baseLineHeightSpecified()&&this.baseLineHeightImportant()&&(e+="line-height: inherit !important; "),this.baseFontFamilySpecified()&&this.baseFontFamilyImportant()&&(e+="font-family: inherit !important; "),e+="}\n"),this.widowsOrphans()&&(e+="* { ",e+=`widows: ${this.widowsOrphans()}${t(this.widowsOrphansImportant())}; `,e+=`orphans: ${this.widowsOrphans()}${t(this.widowsOrphansImportant())}; `,e+="}\n"),(this.imageMaxSizeToFitPage()||this.imageKeepAspectRatio())&&(e+="img, svg { ",this.imageMaxSizeToFitPage()&&(e+=`max-inline-size: 100%${t(this.imageMaxSizeToFitPageImportant())}; `,e+=`max-block-size: 100vb${t(this.imageMaxSizeToFitPageImportant())}; `),this.imageKeepAspectRatio()&&(e+=`object-fit: contain${t(this.imageKeepAspectRatioImportant())}; `),e+="}\n"),e+="/*</viewer>*/\n",e+=this.afterOtherStyle(),e}copyFrom(t){this.pageSizeMode(t.pageSizeMode()),this.presetSize(t.presetSize()),this.isLandscape(t.isLandscape()),this.customWidth(t.customWidth()),this.customHeight(t.customHeight()),this.pageSizeImportant(t.pageSizeImportant()),this.pageMarginMode(t.pageMarginMode()),this.customMargin(t.customMargin()),this.pageMarginImportant(t.pageMarginImportant()),this.firstPageMarginZero(t.firstPageMarginZero()),this.firstPageMarginZeroImportant(t.firstPageMarginZeroImportant()),this.forceHtmlBodyMarginZero(t.forceHtmlBodyMarginZero()),this.widowsOrphans(t.widowsOrphans()),this.widowsOrphansImportant(t.widowsOrphansImportant()),this.imageMaxSizeToFitPage(t.imageMaxSizeToFitPage()),this.imageMaxSizeToFitPageImportant(t.imageMaxSizeToFitPageImportant()),this.imageKeepAspectRatio(t.imageKeepAspectRatio()),this.imageKeepAspectRatioImportant(t.imageKeepAspectRatioImportant()),this.baseFontSize(t.baseFontSize()),this.baseFontSizeSpecified(t.baseFontSizeSpecified()),this.baseFontSizeImportant(t.baseFontSizeImportant()),this.baseLineHeight(t.baseLineHeight()),this.baseLineHeightSpecified(t.baseLineHeightSpecified()),this.baseLineHeightImportant(t.baseLineHeightImportant()),this.baseFontFamily(t.baseFontFamily()),this.baseFontFamilySpecified(t.baseFontFamilySpecified()),this.baseFontFamilyImportant(t.baseFontFamilyImportant()),this.allImportant(t.allImportant()),this.pageOtherStyle(t.pageOtherStyle()),this.firstPageOtherStyle(t.firstPageOtherStyle()),this.rootOtherStyle(t.rootOtherStyle()),this.beforeOtherStyle(t.beforeOtherStyle()),this.afterOtherStyle(t.afterOtherStyle()),this.viewerFontSize&&t.viewerFontSize&&this.viewerFontSize(t.viewerFontSize())}equivalentTo(t){return this.pageSizeMode()===t.pageSizeMode()&&((this.pageSizeMode()!==p.Preset||this.presetSize()===t.presetSize())&&((this.pageSizeMode()!==p.Preset||this.isLandscape()===t.isLandscape())&&((this.pageSizeMode()!==p.Custom||this.customWidth()===t.customWidth())&&((this.pageSizeMode()!==p.Custom||this.customHeight()===t.customHeight())&&(this.pageSizeImportant()===t.pageSizeImportant()&&(this.pageMarginMode()===t.pageMarginMode()&&((this.pageMarginMode()!==p.Custom||this.customMargin()===t.customMargin())&&(this.pageMarginImportant()===t.pageMarginImportant()&&(this.firstPageMarginZero()===t.firstPageMarginZero()&&(this.firstPageMarginZeroImportant()===t.firstPageMarginZeroImportant()&&(this.forceHtmlBodyMarginZero()===t.forceHtmlBodyMarginZero()&&(this.widowsOrphans()===t.widowsOrphans()&&(this.widowsOrphansImportant()===t.widowsOrphansImportant()&&(this.imageMaxSizeToFitPage()===t.imageMaxSizeToFitPage()&&(this.imageMaxSizeToFitPageImportant()===t.imageMaxSizeToFitPageImportant()&&(this.imageKeepAspectRatio()===t.imageKeepAspectRatio()&&(this.imageKeepAspectRatioImportant()===t.imageKeepAspectRatioImportant()&&(this.baseFontSizeSpecified()===t.baseFontSizeSpecified()&&((!this.baseFontSizeSpecified()||this.baseFontSize()===t.baseFontSize())&&(this.baseFontSizeImportant()===t.baseFontSizeImportant()&&(this.baseLineHeightSpecified()===t.baseLineHeightSpecified()&&((!this.baseLineHeightSpecified()||this.baseLineHeight()===t.baseLineHeight())&&(this.baseLineHeightImportant()===t.baseLineHeightImportant()&&(this.baseFontFamilySpecified()===t.baseFontFamilySpecified()&&((!this.baseFontFamilySpecified()||this.baseFontFamily()===t.baseFontFamily())&&(this.baseFontFamilyImportant()===t.baseFontFamilyImportant()&&(this.allImportant()===t.allImportant()&&(this.pageOtherStyle()===t.pageOtherStyle()&&(this.firstPageOtherStyle()===t.firstPageOtherStyle()&&(this.rootOtherStyle()===t.rootOtherStyle()&&(this.beforeOtherStyle()===t.beforeOtherStyle()&&(this.afterOtherStyle()===t.afterOtherStyle()&&!(!this.viewerFontSize!=!t.viewerFontSize||this.viewerFontSize&&this.viewerFontSize()!==t.viewerFontSize())))))))))))))))))))))))))))))))))}}C.Mode=p,C.Constants=b,C.PresetSize=E;var y={escapeUnicodeChar:t=>`\\u${(65536|t.charCodeAt(0)).toString(16).substring(1)}`,escapeUnicodeString(t){return t.replace(/[^-a-zA-Z0-9_]/g,this.escapeUnicodeChar)},percentEncodeAmpersandAndUnencodedPercent:t=>t.replace(/%(?![0-9A-Fa-f]{2})/g,"%25").replace(/&/g,"%26"),percentEncodeAmpersandAndPercent:t=>t.replace(/%/g,"%25").replace(/&/g,"%26"),percentDecodeAmpersandAndPercent:t=>t.replace(/%26/g,"&").replace(/%25/g,"%"),percentEncodeForDataURI:t=>encodeURI(t).replace(/#/g,"%23").replace(/&/g,"%26")};function w(t){return new RegExp(`[#&]${y.escapeUnicodeString(t)}=([^&]*)`,"g")}const D=new class{constructor(){this.history=window?window.history:null,this.location=window?window.location:{href:""},this.storedUrl=this.location.href}getBaseURL(){let t=this.location.href;return t=t.replace(/#.*$/,""),t.replace(/\/[^/]*$/,"/")}hasParameter(t){const e=this.location.href;return w(t).test(e)}getParameter(t){const e=this.location.href,n=w(t),i=[];let r;for(;r=n.exec(e);)i.push(r[1]);return i}setParameter(t,e,n){const i=this.location.href;let r;const o=w(t);let a=o.exec(i);if(a&&n)for(;n-- >=1;)a=o.exec(i);if(a){const t=a[1].length,n=a.index+a[0].length-t;r=i.substring(0,n)+e+i.substring(n+t)}else r=`${i+(i.match(/[#&]$/)?"":i.match(/#/)?"&":"#")+t}=${e}`,"src"===t&&(r=r.replace(/#(?!src)(.*?)&(src=[^&]*)/,"#$2&$1"));null!==this.history&&this.history.replaceState?this.history.replaceState(null,"",r):this.location.href=r,this.storedUrl=r}removeParameter(t,e){const n=this.location.href;let i;const r=w(t);let o=r.exec(n);if(o&&e&&(o=r.exec(n)),o){for(i=n;o;o=r.exec(i)){const t=o.index+o[0].length;i="#"==o[0].charAt(0)?i.substring(0,o.index+1)+i.substring(t+1):i.substring(0,o.index)+i.substring(t),r.lastIndex-=o[0].length}i=i.replace(/^(.*?)[#&]$/,"$1"),null!==this.history&&this.history.replaceState?this.history.replaceState(null,"",i):this.location.href=i}this.storedUrl=i}};class S{constructor(t){var n;const i=function(){const t=D.getParameter("src"),e=D.getParameter("b"),n=D.getParameter("x"),i=D.getParameter("bookMode")[0],r=D.getParameter("f")[0],o=D.getParameter("style"),a=D.getParameter("userStyle");return{srcUrls:t.length?t:e.length?e:n.length?n:null,bookMode:"true"===i||"false"!==i&&(!!e.length||null),fragment:r||null,authorStyleSheet:o.length?o:[],userStyleSheet:a.length?a:[]}}();this.srcUrls=e.observable(i.srcUrls||null),this.bookMode=e.observable(null!==(n=i.bookMode)&&void 0!==n?n:t),this.fragment=e.observable(i.fragment||""),this.authorStyleSheet=e.observable(i.authorStyleSheet),this.userStyleSheet=e.observable(i.userStyleSheet),this.pageStyle=new C,this.dataUserStyleIndex=-1,this.bookMode.subscribe((e=>{e===t?D.removeParameter("bookMode"):D.setParameter("bookMode",e.toString())})),this.fragment.subscribe((t=>{if(/^epubcfi\(\/([246]\/)?2!\)/.test(t))D.removeParameter("f");else{const e=t.replace(/[\s+&?=#\u007F-\uFFFF]+/g,encodeURIComponent);D.setParameter("f",e)}})),i.userStyleSheet.find(((t,e)=>{if(/^data:,.*?\/\*(?:<|%3C)viewer(?:>|%3E)\*\//.test(t)){this.dataUserStyleIndex=e;const n=t.replace(/^data:,/,"").replace(/%(?![0-9A-Fa-f]{2})/g,"%25"),i=decodeURIComponent(n);return this.pageStyle.cssText(i),!0}return!1})),this.pageStyle.cssText.subscribe((t=>{this.updateUserStyleSheetFromCSSText(t)}))}toObject(){function t(t){return t.map((t=>({url:t})))}const e=t(this.userStyleSheet());return this.pageStyle.pageSizeMode()==C.Mode.Default&&e.unshift({text:"@page{size:auto}"}),{fragment:this.fragment(),authorStyleSheet:t(this.authorStyleSheet()),userStyleSheet:e}}updateUserStyleSheetFromCSSText(t){null==t&&(t=this.pageStyle.toCSSText());const e=this.userStyleSheet();if((!t||/^\s*(\/\*.*?\*\/\s*)*$/.test(t))&&e.length<=(-1==this.dataUserStyleIndex?0:1))return e.pop(),this.dataUserStyleIndex=-1,this.userStyleSheet(e),void D.removeParameter("userStyle");const n="data:,"+y.percentEncodeForDataURI(t.trim());-1==this.dataUserStyleIndex?(e.push(n),this.dataUserStyleIndex=e.length-1):e[this.dataUserStyleIndex]=n,this.userStyleSheet(e),D.setParameter("userStyle",n,this.dataUserStyleIndex)}}class N{toSpreadViewString(){switch(this){case T.SPREAD:return"true";case T.SINGLE_PAGE:return"false";case T.AUTO_SPREAD:return"auto";default:throw new Error("Invalid PageViewMode")}}toString(){switch(this){case T.SPREAD:return"spread";case T.SINGLE_PAGE:return"singlePage";case T.AUTO_SPREAD:return"autoSpread";default:throw new Error("Invalid PageViewMode")}}}const T={AUTO_SPREAD:new N,SINGLE_PAGE:new N,SPREAD:new N,defaultMode(){return this.AUTO_SPREAD},fromSpreadViewString(t){switch(t){case"true":return this.SPREAD;case"false":return this.SINGLE_PAGE;case"auto":default:return this.AUTO_SPREAD}},of(t){switch(t){case m.PageViewMode.SPREAD:return this.SPREAD;case m.PageViewMode.SINGLE_PAGE:return this.SINGLE_PAGE;case m.PageViewMode.AUTO_SPREAD:return this.AUTO_SPREAD;default:throw new Error(`Invalid PageViewMode name: ${t}`)}}};class A{constructor(t){this.zoom=t}get fitToScreen(){return null}getCurrentZoomFactor(t){return 1}toggleFitToScreen(){return new A(1)}zoomIn(t){return new I(1.25*this.getCurrentZoomFactor(t))}zoomOut(t){return new I(.8*this.getCurrentZoomFactor(t))}zoomToActualSize(){return new I(1)}static createDefaultOptions(){return new x}static createFromZoomFactor(t){return new I(t)}}class x extends A{constructor(){super(1)}get fitToScreen(){return!0}toggleFitToScreen(){return new I(1)}getCurrentZoomFactor(t){return t.queryZoomFactor(m.ZoomType.FIT_INSIDE_VIEWPORT)}}class I extends A{get fitToScreen(){return!1}toggleFitToScreen(){return new x}getCurrentZoomFactor(){return this.zoom}}function F(){return{renderAllPages:!0,fontSize:16,profile:!1,pageViewMode:T.defaultMode(),zoom:A.createDefaultOptions()}}class P{constructor(t){var n;const i="boolean"==typeof t?t:void 0,r="object"==typeof t?t:void 0;if(this.renderAllPages=e.observable(),this.fontSize=e.observable(),this.profile=e.observable(),this.pageViewMode=e.observable(),this.zoom=e.observable(),r)this.copyFrom(r);else{const t=F(),e=function(){const t=D.getParameter("renderAllPages")[0],e=D.getParameter("fontSize")[0],n=/^([\d.]+)(?:(%25|%)|\/([\d.]+))?$/.exec(e);let i=null;if(n){const[,t,e,r]=n;i=parseFloat(t),(e||r)&&(i=16*i/(e?100:parseFloat(r))),i<5&&(i=5),i>72&&(i=72)}return{renderAllPages:"true"===t||"false"!==t&&!D.hasParameter("b")&&null,fontSize:i,profile:"true"===D.getParameter("profile")[0],pageViewMode:T.fromSpreadViewString(D.getParameter("spread")[0]),zoom:void 0}}();this.renderAllPages(null!==(n=e.renderAllPages)&&void 0!==n?n:i),this.fontSize(e.fontSize||t.fontSize),this.profile(e.profile||t.profile),this.pageViewMode(e.pageViewMode||t.pageViewMode),this.zoom(t.zoom),this.pageViewMode.subscribe((e=>{e===t.pageViewMode?D.removeParameter("spread"):D.setParameter("spread",e.toSpreadViewString())})),this.renderAllPages.subscribe((t=>{t===i?D.removeParameter("renderAllPages"):D.setParameter("renderAllPages",t.toString())})),this.fontSize.subscribe((e=>{"number"==typeof e&&(e=e.toPrecision(10).replace(/(?:\.0*|(\.\d*?)0+)$/,"$1")),Number(e)==t.fontSize?D.removeParameter("fontSize"):D.setParameter("fontSize",`${e}/${t.fontSize}`)}))}}copyFrom(t){this.renderAllPages(t.renderAllPages()),this.fontSize(t.fontSize()),this.profile(t.profile()),this.pageViewMode(t.pageViewMode()),this.zoom(t.zoom())}toObject(){return{renderAllPages:this.renderAllPages(),fontSize:Number(this.fontSize()),pageViewMode:this.pageViewMode().toString(),fitToScreen:this.zoom().fitToScreen,zoom:this.zoom().zoom}}}P.getDefaultValues=F;var O,R=e.observableArray();!function(t){t.Debug="debug",t.Info="info",t.Warn="warn",t.Error="error"}(O||(O={}));class k{constructor(){this.logLevel=O.Error}static getLogger(){return new k}setLogLevel(t){this.logLevel=t}debug(t){this.logLevel===O.Debug&&R.push({type:"debug",content:t})}info(t){this.logLevel!==O.Debug&&this.logLevel!==O.Info||R.push({type:"info",content:t})}warn(t){this.logLevel!==O.Debug&&this.logLevel!==O.Info&&this.logLevel!==O.Warn||R.push({type:"warn",content:t})}error(t){var e,n;if(this.logLevel===O.Debug||this.logLevel===O.Info||this.logLevel===O.Warn||this.logLevel===O.Error){if(null===(n=null===(e=t)||void 0===e?void 0:e.error)||void 0===n?void 0:n.toString().includes("history.replaceState()"))return;R.push({type:"error",content:t})}}}const L={readonlyObservable(t){const n=e.observable(t);return{getter:e.pureComputed((()=>n())),value:n}}};class B{constructor(t,n){this.viewerOptions_=n,this.documentOptions_=null,this.coreViewer_=new m.CoreViewer(t,n.toObject());const i=this.state_={status:L.readonlyObservable(m.ReadyState.LOADING),pageProgression:L.readonlyObservable(m.PageProgression.LTR)};this.state={status:i.status.getter.extend({rateLimit:{timeout:100,method:"notifyWhenChangesStop"},notify:"always"}),navigatable:e.pureComputed((()=>i.status.value()&&i.status.value()!==m.ReadyState.LOADING)),pageProgression:i.pageProgression.getter},this.epage=e.observable(),this.epageCount=e.observable(),this.firstPage=e.observable(),this.lastPage=e.observable(),this.tocVisible=e.observable(),this.tocPinned=e.observable(),this.inputUrl=e.observable(""),this.setupViewerEventHandler(),this.setupViewerOptionSubscriptions()}setupViewerEventHandler(){const t=k.getLogger();this.coreViewer_.addListener("debug",(e=>{t.debug(e.content)})),this.coreViewer_.addListener("info",(e=>{t.info(e.content)})),this.coreViewer_.addListener("warn",(e=>{t.warn(e.content)})),this.coreViewer_.addListener("error",(e=>{t.error(e.content)})),this.coreViewer_.addListener("readystatechange",(()=>{const t=this.coreViewer_.readyState;t!==m.ReadyState.INTERACTIVE&&t!==m.ReadyState.COMPLETE||this.state_.pageProgression.value(this.coreViewer_.getCurrentPageProgression()),this.state_.status.value(t)})),this.coreViewer_.addListener("loaded",(()=>{this.viewerOptions_.profile()&&m.profiler.printTimings()})),this.coreViewer_.addListener("nav",(t=>{const{cfi:e,first:n,last:i,epage:r,epageCount:o,metadata:a,docTitle:s}=t;if(e&&this.documentOptions_.fragment(e),void 0!==r&&this.epage(r),void 0!==o&&this.epageCount(o),void 0!==n&&this.firstPage(n),void 0!==i&&this.lastPage(i),a||s){const t=a&&a["http://purl.org/dc/terms/title"],e=t&&t[0]&&t[0].v;e?!s||s===e||this.firstPage()||/\.xhtml$/.test(s)?document.title=e:document.title=`${s} | ${e}`:document.title=s||"Vivliostyle Viewer"}const u=this.tocVisible(),l=this.coreViewer_.isTOCVisible();u&&!l||this.tocVisible(l)})),this.coreViewer_.addListener("hyperlink",(t=>{t.internal?(this.navigateToInternalUrl(t.href),this.tocVisible()&&this.tocVisible(!1),document.getElementById("vivliostyle-viewer-viewport").focus()):window.location.href=t.href}))}setupViewerOptionSubscriptions(){e.computed((function(){const t=this.viewerOptions_.toObject();this.coreViewer_.setOptions(t)}),this).extend({rateLimit:0})}loadDocument(t,e){this.state_.status.value(m.ReadyState.LOADING),e&&this.viewerOptions_.copyFrom(e),this.documentOptions_=t,t.srcUrls()?t.bookMode()?this.coreViewer_.loadPublication(t.srcUrls()[0],t.toObject(),this.viewerOptions_.toObject()):this.coreViewer_.loadDocument(t.srcUrls(),t.toObject(),this.viewerOptions_.toObject()):this.state_.status.value("")}navigateToPrevious(){this.coreViewer_.navigateToPage(m.Navigation.PREVIOUS)}navigateToNext(){this.coreViewer_.navigateToPage(m.Navigation.NEXT)}navigateToLeft(){this.coreViewer_.navigateToPage(m.Navigation.LEFT)}navigateToRight(){this.coreViewer_.navigateToPage(m.Navigation.RIGHT)}navigateToFirst(){this.coreViewer_.navigateToPage(m.Navigation.FIRST)}navigateToLast(){this.coreViewer_.navigateToPage(m.Navigation.LAST)}navigateToEPage(t){this.coreViewer_.navigateToPage(m.Navigation.EPAGE,t)}navigateToInternalUrl(t){this.coreViewer_.navigateToInternalUrl(t)}queryZoomFactor(t){return this.coreViewer_.queryZoomFactor(t)}epageToPageNumber(t){if(!t&&0!=t)return;return Math.round(t+1)}epageFromPageNumber(t){if(!t&&0!=t)return;return t-1}showTOC(t,e){if(null==this.coreViewer_.isTOCVisible())return;const n=null==t?!this.tocVisible():t;this.tocVisible(n),this.tocPinned(!!n&&!e),this.coreViewer_.showTOC(n,e)}}const _={Unidentified:"Unidentified",ArrowDown:"ArrowDown",ArrowLeft:"ArrowLeft",ArrowRight:"ArrowRight",ArrowUp:"ArrowUp",Home:"Home",End:"End",PageDown:"PageDown",PageUp:"PageUp",Escape:"Escape",Enter:"Enter",Space:" "};var M={Keys:_,identifyKeyFromEvent:function(t){const e=t.key,n=t.keyIdentifier,i=t.location;return e===_.ArrowDown||"Down"===e||"Down"===n?t.metaKey?_.End:_.ArrowDown:e===_.ArrowLeft||"Left"===e||"Left"===n?_.ArrowLeft:e===_.ArrowRight||"Right"===e||"Right"===n?_.ArrowRight:e===_.ArrowUp||"Up"===e||"Up"===n?t.metaKey?_.Home:_.ArrowUp:e===_.Escape||"Esc"===e||"U+001B"===n?_.Escape:e===_.Enter||"Enter"===n?_.Enter:e===_.Space||"U+0020"===n?_.Space:"0"===e||"U+0030"===n?"0":"+"===e||"Add"===e||"U+002B"===n||"U+00BB"===n||"U+004B"===n&&i===KeyboardEvent.DOM_KEY_LOCATION_NUMPAD?"+":"-"===e||"Subtract"===e||"U+002D"===n||"U+00BD"===n||"U+004D"===n&&i===KeyboardEvent.DOM_KEY_LOCATION_NUMPAD?"-":e||n||_.Unidentified}};const{Keys:U}=M;class V{constructor(t,n,i,r){this.viewerOptions_=t,this.viewer_=n,this.settingsPanel_=i,this.justClicked=!1,this.isDisabled=e.pureComputed((()=>this.settingsPanel_.opened()&&!this.settingsPanel_.pinned()||!this.viewer_.state.navigatable()));const o=e.pureComputed((()=>r.disablePageNavigation||this.isDisabled()));o.subscribe((t=>{const e=document.getElementById("vivliostyle-page-number");e&&(e.disabled=t)})),this.isPageNumberDisabled=e.pureComputed((()=>o())),this.isPageSliderDisabled=e.pureComputed((()=>!(!r.disablePageSlider&&!o())||this.totalPages()<=1)),this.isNavigateToPreviousDisabled=e.pureComputed((()=>!!o()||void 0!==this.viewer_.state.status&&this.viewer_.firstPage())),this.isNavigateToNextDisabled=e.pureComputed((()=>!!o()||void 0!==this.viewer_.state.status&&((!this.viewerOptions_.renderAllPages()||this.viewer_.state.status()==m.ReadyState.COMPLETE)&&this.viewer_.lastPage()))),this.isNavigateToLeftDisabled=e.pureComputed((()=>!!o()||void 0!==this.viewer_.state.pageProgression&&(this.viewer_.state.pageProgression()===m.PageProgression.LTR?this.isNavigateToPreviousDisabled():this.isNavigateToNextDisabled()))),this.isNavigateToRightDisabled=e.pureComputed((()=>!!o()||void 0!==this.viewer_.state.pageProgression&&(this.viewer_.state.pageProgression()===m.PageProgression.LTR?this.isNavigateToNextDisabled():this.isNavigateToPreviousDisabled()))),this.isNavigateToFirstDisabled=this.isNavigateToPreviousDisabled,this.isNavigateToLastDisabled=e.pureComputed((()=>!!o()||void 0!==this.viewer_.state.status&&(!(!this.viewerOptions_.renderAllPages()||this.viewer_.state.status()==m.ReadyState.COMPLETE)||this.viewer_.lastPage()))),this.hidePageNavigation=!!r.disablePageNavigation;const a=e.pureComputed((()=>r.disableZoom||this.isDisabled()));this.isZoomOutDisabled=a,this.isZoomInDisabled=a,this.isZoomToActualSizeDisabled=a,this.isToggleFitToScreenDisabled=a,this.hideZoom=!!r.disableZoom,this.fitToScreen=e.pureComputed((()=>t.zoom().fitToScreen));const s=e.pureComputed((()=>r.disableFontSizeChange||this.isDisabled()));this.isIncreaseFontSizeDisabled=e.pureComputed((()=>!!s()||this.viewerOptions_.fontSize()>=72)),this.isDecreaseFontSizeDisabled=e.pureComputed((()=>!!s()||this.viewerOptions_.fontSize()<=5)),this.isDefaultFontSizeDisabled=s,this.hideFontSizeChange=!!r.disableFontSizeChange,this.isTOCToggleDisabled=e.pureComputed((()=>r.disableTOCNavigation||this.isDisabled()||null==this.viewer_.tocVisible())),this.hideTOCNavigation=!!r.disableTOCNavigation,this.hidePageSlider=!!r.disablePageSlider,this.pageNumber=e.pureComputed({read(){return this.viewer_.epageToPageNumber(this.viewer_.epage())},write(t){const e=this.viewer_.epage(),n=this.viewer_.epageToPageNumber(e);let i=parseFloat(t.toString().replace(/[０-９]/g,(t=>String.fromCharCode(t.charCodeAt(0)-65248))))||0;if(/^[-+]/.test(t.toString())&&(i=n+i),i<1)i=1;else{const t=this.viewer_.epageCount();this.viewerOptions_.renderAllPages()?i>t&&(i=t):i>t+1&&(i=t+1)}const r=this.viewer_.epageFromPageNumber(i),o=document.getElementById("vivliostyle-page-number");o.value=i.toString(),this.viewer_.navigateToEPage(r),setTimeout((()=>{this.viewer_.state.status()!=m.ReadyState.LOADING&&this.viewer_.epage()===e&&(o.value=n.toString()),document.getElementById("vivliostyle-viewer-viewport").focus()}),10)},owner:this}),this.totalPages=e.pureComputed((()=>{let t=this.viewer_.epageCount();if(!t)return t;const e=Number(this.pageNumber());return this.viewer_.lastPage()?t=e:e>=t&&t++,t})),this.pageSlider=e.pureComputed({read(){return this.pageNumber()},write(t){if(this.viewerOptions_.renderAllPages()){const e=Number(t),n=this.viewer_.epageFromPageNumber(e);this.viewer_.navigateToEPage(n)}else{document.getElementById("vivliostyle-page-number").value=String(t)}},owner:this}),this.pageSliderMax=this.totalPages,["navigateToPrevious","navigateToNext","navigateToLeft","navigateToRight","navigateToFirst","navigateToLast","zoomIn","zoomOut","zoomToActualSize","toggleFitToScreen","increaseFontSize","decreaseFontSize","defaultFontSize","onfocusPageNumber","onmouseupPageSlider","onwheelPageSlider","onwheelViewport","onclickViewport","toggleTOC"].forEach((t=>{this[t]=this[t].bind(this)}))}static PREVIOUS(t){throw new Error("Method not implemented.")}static NEXT(t){throw new Error("Method not implemented.")}static LEFT(t){throw new Error("Method not implemented.")}static RIGHT(t){throw new Error("Method not implemented.")}static FIRST(t){throw new Error("Method not implemented.")}static LAST(t){throw new Error("Method not implemented.")}static EPAGE(t,e){throw new Error("Method not implemented.")}navigateToPrevious(){return!this.isNavigateToPreviousDisabled()&&(this.viewer_.navigateToPrevious(),!0)}navigateToNext(){return!this.isNavigateToNextDisabled()&&(this.viewer_.navigateToNext(),!0)}navigateToLeft(){return!this.isNavigateToLeftDisabled()&&(this.viewer_.navigateToLeft(),!0)}navigateToRight(){return!this.isNavigateToRightDisabled()&&(this.viewer_.navigateToRight(),!0)}navigateToFirst(){return!this.isNavigateToFirstDisabled()&&(this.viewer_.navigateToFirst(),!0)}navigateToLast(){return!this.isNavigateToLastDisabled()&&(this.viewer_.navigateToLast(),!0)}zoomIn(){if(this.isZoomInDisabled())return!1;{const t=this.viewerOptions_.zoom();return this.viewerOptions_.zoom(t.zoomIn(this.viewer_)),!0}}zoomOut(){if(this.isZoomOutDisabled())return!1;{const t=this.viewerOptions_.zoom();return this.viewerOptions_.zoom(t.zoomOut(this.viewer_)),!0}}zoomToActualSize(){if(this.isZoomToActualSizeDisabled())return!1;{const t=this.viewerOptions_.zoom();return this.viewerOptions_.zoom(t.zoomToActualSize()),!0}}toggleFitToScreen(){if(this.isToggleFitToScreenDisabled())return!1;{const t=this.viewerOptions_.zoom();return this.viewerOptions_.zoom(t.toggleFitToScreen()),!0}}increaseFontSize(){if(this.isIncreaseFontSizeDisabled())return!1;{let t=Number(this.viewerOptions_.fontSize());return t=t<10?Math.floor(t)+1:t<20?2*(Math.floor(t/2)+1):t<40?4*(Math.floor(t/4)+1):t<72?8*(Math.floor(t/8)+1):72,this.viewerOptions_.fontSize(t),this.updateFontSizeSettings(),!0}}decreaseFontSize(){if(this.isDecreaseFontSizeDisabled())return!1;{let t=Number(this.viewerOptions_.fontSize());return t=t>40?8*(Math.ceil(t/8)-1):t>20?4*(Math.ceil(t/4)-1):t>10?2*(Math.ceil(t/2)-1):t>5?Math.ceil(t)-1:5,this.viewerOptions_.fontSize(t),this.updateFontSizeSettings(),!0}}defaultFontSize(){if(this.isDefaultFontSizeDisabled())return!1;{const t=P.getDefaultValues().fontSize;return this.viewerOptions_.fontSize(t),this.updateFontSizeSettings(),!0}}updateFontSizeSettings(){this.settingsPanel_.state.viewerOptions.fontSize(this.viewerOptions_.fontSize()),this.viewer_.documentOptions_.pageStyle.baseFontSizeSpecified()&&(this.viewer_.documentOptions_.updateUserStyleSheetFromCSSText(),this.viewer_.loadDocument(this.viewer_.documentOptions_,this.viewerOptions_))}onfocusPageNumber(t,e){const n=e.currentTarget;return setTimeout((()=>{n.setSelectionRange(0,n.value.length)}),0),!0}onmouseupPageSlider(t,e){if(this.viewerOptions_.renderAllPages())return!0;const n=document.getElementById("vivliostyle-page-number"),i=Number(n.value),r=this.viewer_.epageFromPageNumber(i);return this.viewer_.navigateToEPage(r),!0}onwheelPageSlider(t,e){return e.preventDefault(),0===e.deltaMode&&Math.abs(e.deltaX)<2&&Math.abs(e.deltaY)<2||(Math.abs(e.deltaX)>=Math.abs(e.deltaY)?e.deltaX<0?this.navigateToLeft():this.navigateToRight():e.deltaY<0?this.navigateToPrevious():this.navigateToNext()),!0}onwheelViewport(t,e){const n=document.getElementById("vivliostyle-viewer-viewport");return!!(this.viewer_.tocVisible()&&n!=document.activeElement||n.scrollWidth>n.clientWidth||n.scrollHeight>n.clientHeight)||this.onwheelPageSlider(t,e)}onclickViewport(t,e){if(this.pageNumber(),this.settingsPanel_.justClicked)return!0;if(this.viewer_.tocVisible()&&!this.viewer_.tocPinned()){const t=document.querySelector("[data-vivliostyle-toc-box]");t&&!t.contains(document.activeElement)&&this.toggleTOC()}return this.settingsPanel_.opened()&&!this.settingsPanel_.pinned()&&this.settingsPanel_.close(),!0}toggleTOC(){if(this.isTOCToggleDisabled())return!1;{let t=null;return this.viewer_.tocVisible()?this.justClicked?(this.viewer_.showTOC(!0,!1),this.justClicked=!1):(null!==t&&(clearInterval(t),t=null),this.viewer_.showTOC(!1),this.justClicked=!0,setTimeout((()=>{this.justClicked&&(document.getElementById("vivliostyle-viewer-viewport").focus(),this.justClicked=!1)}),300)):(this.justClicked?(this.viewer_.showTOC(!0,!1),this.justClicked=!1):(this.viewer_.showTOC(!0,!0),this.justClicked=!0),t=setInterval((()=>{const e=document.querySelector("[data-vivliostyle-toc-box]");e&&"visible"===e.style.visibility&&(e.tabIndex=0,e.focus(),clearInterval(t),t=null),this.justClicked=!1}),300)),!0}}navigateTOC(t){const e=Array.from(document.querySelectorAll("[data-vivliostyle-toc-box]>*>*>*>*>*:not([hidden]) [tabindex='0'],[data-vivliostyle-toc-box]>*>*>*>*>*:not([hidden]) a[href]:not([tabindex='-1'])"));let n=e.indexOf(document.activeElement);const i=t=>e[t]&&"button"===e[t].getAttribute("role"),r=t=>e[t]&&"true"===e[t].getAttribute("aria-expanded");switch(t){case U.ArrowLeft:if(-1==n){n=e.length-1;break}if(!i(n)&&i(n-1)&&n--,i(n)&&r(n))e[n].click();else for(let t=n-1;t>=0;t--)if(i(t)&&e[t].parentElement.contains(e[n])){n=t;break}break;case U.ArrowRight:if(-1==n){n=0;break}!i(n)&&i(n-1)&&n--,i(n)&&(r(n)?n+=2:e[n].click());break;case U.ArrowDown:n++;break;case U.ArrowUp:if(-1==n){n=e.length-1;break}n>0&&i(--n)&&n--;break;case U.Home:n=0;break;case U.End:n=e.length-1;break;case U.Space:!i(n)&&i(n-1)&&n--,i(n)&&e[n].click()}return i(n)&&n++,e[n]&&e[n].focus(),!0}handleKey(t){if(this.settingsPanel_.opened()&&this.settingsPanel_.settingsToggle.contains(document.activeElement))return!0;const e=document.getElementById("vivliostyle-page-number"),n=document.getElementById("vivliostyle-viewer-viewport"),i=n.scrollWidth>n.clientWidth,r=n.scrollHeight>n.clientHeight,o=e===document.activeElement,a=this.viewer_.tocVisible()&&!o&&n!=document.activeElement;switch(t){case"+":return o||!this.increaseFontSize();case"-":return o||!this.decreaseFontSize();case"0":return o||!this.defaultFontSize();case"1":return o||!this.zoomToActualSize();case U.ArrowLeft:return a?!this.navigateTOC(t):o||i||!this.navigateToLeft();case U.ArrowRight:return a?!this.navigateTOC(t):o||i||!this.navigateToRight();case U.ArrowDown:return a?!this.navigateTOC(t):(n.focus(),r||!this.navigateToNext());case U.ArrowUp:return a?!this.navigateTOC(t):(n.focus(),r||!this.navigateToPrevious());case U.PageDown:return!!a||(n.focus(),!this.navigateToNext());case U.PageUp:return!!a||(n.focus(),!this.navigateToPrevious());case U.Home:return a?!this.navigateTOC(t):(n.focus(),!this.navigateToFirst());case U.End:return a?!this.navigateTOC(t):(n.focus(),!this.navigateToLast());case"o":case"O":return n.focus(),!this.zoomOut();case"i":case"I":return n.focus(),!this.zoomIn();case"f":case"F":return n.focus(),!this.toggleFitToScreen();case"g":case"G":return e.focus(),!1;case"t":case"T":return n.focus(),!this.toggleTOC();case U.Escape:return this.viewer_.tocVisible()?!this.toggleTOC():(n.focus(),!0);case U.Space:return a?!this.navigateTOC(t):"button"!==document.activeElement.getAttribute("role")||(document.activeElement.click(),!1);default:return!0}}}const{Keys:z}=M;class H{constructor(t,n,i,r,o){this.viewerOptions_=t,this.documentOptions_=n,this.viewer_=i,this.isPageStyleChangeDisabled=!!o.disablePageStyleChange,this.isOverrideDocumentStyleSheetDisabled=this.isPageStyleChangeDisabled,this.isPageViewModeChangeDisabled=!!o.disablePageViewModeChange,this.isBookModeChangeDisabled=!!o.disableBookModeChange,this.isRenderAllPagesChangeDisabled=!!o.disableRenderAllPagesChange,this.justClicked=!1,this.settingsToggle=document.getElementById("vivliostyle-menu-item_settings-toggle"),this.opened=e.observable(!1),this.pinned=e.observable(!1),this.state={viewerOptions:new P(t),pageStyle:new C(n.pageStyle),pageViewMode:e.pureComputed({read:()=>this.state.viewerOptions.pageViewMode().toString(),write:t=>{this.state.viewerOptions.pageViewMode(T.of(t))}}),bookMode:e.observable(n.bookMode()),renderAllPages:e.pureComputed({read:()=>this.state.viewerOptions.renderAllPages(),write:t=>{this.state.viewerOptions.renderAllPages(t)}})},this.state.pageStyle.setViewerFontSizeObservable(this.state.viewerOptions.fontSize),this.defaultPageStyle=new C,["close","toggle","apply","cancel","resetUserStyle"].forEach((function(t){this[t]=this[t].bind(this)}),this),r.visible.subscribe((function(t){t&&this.close()}),this),this.state.bookMode.subscribe((t=>{n.bookMode(t)})),this.state.renderAllPages.subscribe((e=>{t.renderAllPages(e)}))}close(){this.opened(!1),this.pinned(!1);const t=document.getElementById("vivliostyle-viewer-viewport");return t&&t.focus(),!0}toggle(){this.opened()?this.justClicked?(this.justClicked=!1,this.pinned(!0)):(this.close(),this.justClicked=!0,setTimeout((()=>{this.justClicked=!1}),300)):(this.viewer_.tocPinned()||this.viewer_.showTOC(!1),this.opened(!0),this.justClicked?(this.justClicked=!1,this.pinned(!0)):(this.pinned(!1),this.justClicked=!0,this.focusToFirstItem(),setTimeout((()=>{this.justClicked=!1}),300)))}apply(){this.documentOptions_.pageStyle.copyFrom(this.state.pageStyle),this.documentOptions_.pageStyle.baseFontSizeSpecified()&&this.documentOptions_.updateUserStyleSheetFromCSSText(),this.viewer_.loadDocument(this.documentOptions_,this.state.viewerOptions),this.pinned()?this.focusToFirstItem():this.close()}cancel(){this.state.viewerOptions.copyFrom(this.viewerOptions_),this.state.pageStyle.copyFrom(this.documentOptions_.pageStyle),this.close()}resetUserStyle(){return this.state.pageStyle.copyFrom(this.defaultPageStyle),this.state.viewerOptions.fontSize(P.getDefaultValues().fontSize),setTimeout((()=>{document.getElementsByName("vivliostyle-settings_reset-user-style")[0].checked=!1}),200),!0}focusToFirstItem(t){const e=t||this.settingsToggle,n=["input","textarea","summary"].includes(e.localName)?e:Array.from(e.getElementsByTagName("input")).find((t=>!t.disabled&&("radio"!=t.type||t.checked)));if(n){for(let t=n.parentElement;t&&t!=this.settingsToggle;t=t.parentElement)"details"==t.localName&&(t.open=!0);n.focus()}}handleKey(t){const e=this.opened()&&this.settingsToggle.contains(document.activeElement),n=e&&("text"==document.activeElement.type||"select"==document.activeElement.localName),i=e&&"textarea"==document.activeElement.localName,r=e&&!n&&!i;switch(t){case z.Escape:return this.opened()&&(this.cancel(),this.close()),!0;case"s":case"S":return!(!this.opened()||r||!e)||(this.toggle(),!1);case"p":case"P":return!r||(this.focusToFirstItem(document.getElementById("vivliostyle-settings_page-view-and-rendering").firstElementChild),!1);case"v":case"V":return!r||(this.focusToFirstItem(document.getElementById("vivliostyle-settings_page-view-mode")),!1);case"b":case"B":return!r||(this.focusToFirstItem(document.getElementsByName("vivliostyle-settings_book-mode")[0]),!1);case"a":case"A":return!r||(this.focusToFirstItem(document.getElementsByName("vivliostyle-settings_render-all-pages")[0]),!1);case"u":case"U":return!r||(this.focusToFirstItem(document.getElementById("vivliostyle-settings_user-style").firstElementChild),!1);case"z":case"Z":return!r||(this.focusToFirstItem(document.getElementById("vivliostyle-settings_page-size")),!1);case"m":case"M":return!r||(this.focusToFirstItem(document.getElementById("vivliostyle-settings_page-margin")),!1);case"k":case"K":return!r||(this.focusToFirstItem(document.getElementById("vivliostyle-settings_page-breaks")),!1);case"i":case"I":return!r||(this.focusToFirstItem(document.getElementById("vivliostyle-settings_images")),!1);case"t":case"T":return!r||(this.focusToFirstItem(document.getElementById("vivliostyle-settings_text")),!1);case"o":case"O":return!r||(this.focusToFirstItem(document.getElementsByName("vivliostyle-settings_override-document-stylesheets")[0]),!1);case"c":case"C":return!r||(this.focusToFirstItem(document.getElementsByName("vivliostyle-settings_css-details")[0]),!1);case"r":case"R":return!r||(this.focusToFirstItem(document.getElementsByName("vivliostyle-settings_reset-user-style")[0]),!1);case z.Enter:return!(n||r&&"vivliostyle-menu-button_apply"!==document.activeElement.id&&"vivliostyle-menu-button_reset"!==document.activeElement.id)||(document.getElementById("vivliostyle-menu-button_apply").focus(),!1);default:return!0}}}class G{constructor(t){this.list=t,this.visible=e.pureComputed((()=>t().length>0))}getDisplayMessage(t){const e=t.error;let n=e&&(e.toString()||e.frameTrace||e.stack);return n&&(n=n.split("\n",1)[0]),n||(n=t.messages.join("\n")),n}}class W{constructor(){var t;const e=[].concat(null!==(t=document.documentElement.getAttribute("data-vivliostyle-viewer-flags"))&&void 0!==t?t:[],D.getParameter("flags")).join(),n=e.includes("S"),i={disablePageStyleChange:n||e.includes("P"),disablePageViewModeChange:n||e.includes("V"),disableBookModeChange:n||e.includes("B"),disableRenderAllPagesChange:n||e.includes("A")},r={disableTOCNavigation:e.includes("T"),disablePageNavigation:e.includes("N"),disableZoom:e.includes("Z"),disableFontSizeChange:e.includes("F"),disablePageSlider:e.includes("s")},o=e.includes("c"),a=e.includes("p"),s=e.includes("b"),u=!e.includes("a");if(n){const t=document.getElementById("vivliostyle-welcome");t&&t.remove();const e=document.querySelector(".vivliostyle-menu-detail"),n=document.querySelector(".vivliostyle-menu-detail-main");e&&n&&(n.style.visibility="hidden",e.style.height="auto")}if(o&&(document.oncontextmenu=()=>!1),a){const t=document.createElement("style");t.setAttribute("media","print"),t.textContent="*{display:none}",document.head.appendChild(t)}this.documentOptions=new S(s),this.viewerOptions=new P(u),this.documentOptions.pageStyle.setViewerFontSizeObservable(this.viewerOptions.fontSize),this.viewerOptions.profile()&&v.profiler.enable(),this.isDebug="true"===D.getParameter("debug")[0],this.viewerSettings={userAgentRootURL:`${D.getBaseURL()}resources/`,viewportElement:document.getElementById("vivliostyle-viewer-viewport"),debug:this.isDebug};const l=D.getParameter("src"),c=D.getParameter("b"),h=D.getParameter("x");l.length||(c.length?(D.setParameter("src",c[0]),D.setParameter("bookMode","true"),D.hasParameter("renderAllPages")||D.setParameter("renderAllPages","false")):h.length&&h.forEach(((t,e)=>{D.setParameter("src",t,e)}))),D.removeParameter("b"),D.removeParameter("x"),D.removeParameter("f",!0),D.removeParameter("spread",!0),D.removeParameter("bookMode",!0),D.removeParameter("renderAllPages",!0),D.removeParameter("fontSize",!0),D.removeParameter("profile",!0),D.removeParameter("debug",!0),this.viewer=new B(this.viewerSettings,this.viewerOptions),this.viewer.inputUrl.subscribe((t=>{""!=t?(D.hasParameter("src")||D.history.pushState&&D.history.pushState(null,""),t=t.startsWith("<")?"data:,"+y.percentEncodeForDataURI(t):y.percentEncodeAmpersandAndUnencodedPercent(t),D.setParameter("src",t),this.documentOptions.srcUrls(D.getParameter("src"))):D.removeParameter("src")})),this.messageDialog=new G(R),this.settingsPanel=new H(this.viewerOptions,this.documentOptions,this.viewer,this.messageDialog,i),this.navigation=new V(this.viewerOptions,this.viewer,this.settingsPanel,r),this.viewer.loadDocument(this.documentOptions),window.onhashchange=()=>{window.location.href!=D.storedUrl&&window.location.reload()}}handleKey(t,e){const n=M.identifyKeyFromEvent(e);if("vivliostyle-input-url"===document.activeElement.id)return"Enter"!==n||13!==e.keyCode||(this.viewer.loadDocument(this.documentOptions),!1);if("Home"!==n&&"End"!==n&&(e.ctrlKey||e.metaKey)||e.altKey||e.shiftKey)return!0;let i=this.settingsPanel.handleKey(n);return i&&(i=this.navigation.handleKey(n)),i}}const X="ontouchstart"in window;e.bindingHandlers.menuButton={init(t,n){e.unwrap(n())&&(X?(t.addEventListener("touchstart",(()=>{e.utils.toggleDomNodeCssClass(t,"hover active",!0)})),t.addEventListener("touchend",(()=>{e.utils.toggleDomNodeCssClass(t,"hover active",!1)}))):(t.addEventListener("mouseover",(()=>{e.utils.toggleDomNodeCssClass(t,"hover",!0)})),t.addEventListener("mousedown",(()=>{e.utils.toggleDomNodeCssClass(t,"active",!0)})),t.addEventListener("mouseup",(()=>{e.utils.toggleDomNodeCssClass(t,"active",!1)})),t.addEventListener("mouseout",(()=>{e.utils.toggleDomNodeCssClass(t,"hover",!1),e.utils.toggleDomNodeCssClass(t,"active",!1),window.getSelection().removeAllRanges()}))))}};const j="ontouchstart"in window;let K=null,$=null,q=null;e.bindingHandlers.swipePages={init(t,n){j&&e.unwrap(n())&&(t.addEventListener("touchstart",(t=>{if(t.touches.length>1)return;if(window.visualViewport&&window.visualViewport.scale>1)return;const e=document.getElementById("vivliostyle-viewer-viewport");e&&e.scrollWidth>e.clientWidth||(K=t.touches[0].clientX,$=t.touches[0].clientY)})),t.addEventListener("touchmove",(t=>{if(!(t.touches.length>1)&&null!==K&&null!==$){const n=t.touches[0].clientX-K,i=t.touches[0].clientY-$;Math.abs(n)>Math.abs(i)&&(q=n<0?document.getElementById("vivliostyle-page-navigation-right"):document.getElementById("vivliostyle-page-navigation-left")),Math.abs(n)+Math.abs(i)>=16&&(q&&(q.click(),e.utils.toggleDomNodeCssClass(q,"active",!0)),K=null,$=null)}})),t.addEventListener("touchend",(()=>{q&&e.utils.toggleDomNodeCssClass(q,"active",!1),q=null,K=null,$=null})))}},{start(){function t(){e.applyBindings(new W)}window.__loaded?t():window.onload=t}}.start()}));
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidml2bGlvc3R5bGUtdmlld2VyLmpzIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMva25vY2tvdXQvYnVpbGQvb3V0cHV0L2tub2Nrb3V0LWxhdGVzdC5qcyIsIi4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9mYXN0LWRpZmYvZGlmZi5qcyIsIi4uLy4uL3NyYy9tb2RlbHMvcGFnZS1zdHlsZS50cyIsIi4uLy4uLy4uL2NvcmUvc3JjL3Zpdmxpb3N0eWxlL2NvbnN0YW50cy50cyIsIi4uLy4uLy4uL2NvcmUvc3JjL3Zpdmxpb3N0eWxlL2xvZ2dpbmcudHMiLCIuLi8uLi8uLi9jb3JlL3NyYy92aXZsaW9zdHlsZS9wbHVnaW4udHMiLCIuLi8uLi8uLi9jb3JlL3NyYy92aXZsaW9zdHlsZS9wcm9maWxlLnRzIiwiLi4vLi4vLi4vY29yZS9zcmMvdml2bGlvc3R5bGUvYmFzZS50cyIsIi4uLy4uLy4uL2NvcmUvc3JjL3Zpdmxpb3N0eWxlL2NmaS50cyIsIi4uLy4uLy4uL2NvcmUvc3JjL3Zpdmxpb3N0eWxlL2V4cHJzLnRzIiwiLi4vLi4vLi4vY29yZS9zcmMvdml2bGlvc3R5bGUvY3NzLnRzIiwiLi4vLi4vLi4vY29yZS9zcmMvdml2bGlvc3R5bGUvZ2VvbWV0cnktdXRpbC50cyIsIi4uLy4uLy4uL2NvcmUvc3JjL3Zpdmxpb3N0eWxlL2Nzcy1wcm9wLnRzIiwiLi4vLi4vLi4vY29yZS9zcmMvdml2bGlvc3R5bGUvY291bnRlcnMudHMiLCIuLi8uLi8uLi9jb3JlL3NyYy92aXZsaW9zdHlsZS9jc3MtdG9rZW5pemVyLnRzIiwiLi4vLi4vLi4vY29yZS9zcmMvdml2bGlvc3R5bGUvdGFzay50cyIsIi4uLy4uLy4uL2NvcmUvc3JjL3Zpdmxpb3N0eWxlL3Rhc2stdXRpbC50cyIsIi4uLy4uLy4uL2NvcmUvc3JjL3Zpdmxpb3N0eWxlL25ldC50cyIsIi4uLy4uLy4uL2NvcmUvc3JjL3Zpdmxpb3N0eWxlL2Fzc2V0cy50cyIsIi4uLy4uLy4uL2NvcmUvc3JjL3Zpdmxpb3N0eWxlL2Nzcy1wYXJzZXIudHMiLCIuLi8uLi8uLi9jb3JlL3NyYy92aXZsaW9zdHlsZS9tYXRjaGVycy50cyIsIi4uLy4uLy4uL2NvcmUvc3JjL3Zpdmxpb3N0eWxlL3R5cGVzLnRzIiwiLi4vLi4vLi4vY29yZS9zcmMvdml2bGlvc3R5bGUvZGlmZi50cyIsIi4uLy4uLy4uL2NvcmUvc3JjL3Zpdmxpb3N0eWxlL3BzZXVkby1lbGVtZW50LnRzIiwiLi4vLi4vLi4vY29yZS9zcmMvdml2bGlvc3R5bGUvdnRyZWUudHMiLCIuLi8uLi8uLi9jb3JlL3NyYy92aXZsaW9zdHlsZS9jc3MtY2FzY2FkZS50cyIsIi4uLy4uLy4uL2NvcmUvc3JjL3Zpdmxpb3N0eWxlL2Nzcy1sb2dpY2FsLXV0aWwudHMiLCIuLi8uLi8uLi9jb3JlL3NyYy92aXZsaW9zdHlsZS9zaXppbmcudHMiLCIuLi8uLi8uLi9jb3JlL3NyYy92aXZsaW9zdHlsZS9wYWdlLWZsb2F0cy50cyIsIi4uLy4uLy4uL2NvcmUvc3JjL3Zpdmxpb3N0eWxlL2Zvb3Rub3Rlcy50cyIsIi4uLy4uLy4uL2NvcmUvc3JjL3Zpdmxpb3N0eWxlL2JyZWFrLnRzIiwiLi4vLi4vLi4vY29yZS9zcmMvdml2bGlvc3R5bGUvbGF5b3V0LWhlbHBlci50cyIsIi4uLy4uLy4uL2NvcmUvc3JjL3Zpdmxpb3N0eWxlL2JyZWFrLXBvc2l0aW9uLnRzIiwiLi4vLi4vLi4vY29yZS9zcmMvdml2bGlvc3R5bGUvZGlzcGxheS50cyIsIi4uLy4uLy4uL2NvcmUvc3JjL3Zpdmxpb3N0eWxlL2xheW91dC1wcm9jZXNzb3IudHMiLCIuLi8uLi8uLi9jb3JlL3NyYy92aXZsaW9zdHlsZS9sYXlvdXQtcmV0cnllcnMudHMiLCIuLi8uLi8uLi9jb3JlL3NyYy92aXZsaW9zdHlsZS9sYXlvdXQtdXRpbC50cyIsIi4uLy4uLy4uL2NvcmUvc3JjL3Zpdmxpb3N0eWxlL3NoYXJlZC50cyIsIi4uLy4uLy4uL2NvcmUvc3JjL3Zpdmxpb3N0eWxlL2xheW91dC50cyIsIi4uLy4uLy4uL2NvcmUvc3JjL3Zpdmxpb3N0eWxlL3JlcGV0aXRpdmUtZWxlbWVudC50cyIsIi4uLy4uLy4uL2NvcmUvc3JjL3Zpdmxpb3N0eWxlL3RhYmxlLnRzIiwiLi4vLi4vLi4vY29yZS9zcmMvdml2bGlvc3R5bGUvbWF0aC11dGlsLnRzIiwiLi4vLi4vLi4vY29yZS9zcmMvdml2bGlvc3R5bGUvY29sdW1ucy50cyIsIi4uLy4uLy4uL2NvcmUvc3JjL3Zpdmxpb3N0eWxlL2Nzcy12YWxpZGF0b3IudHMiLCIuLi8uLi8uLi9jb3JlL3NyYy92aXZsaW9zdHlsZS9jc3Mtc3R5bGVyLnRzIiwiLi4vLi4vLi4vY29yZS9zcmMvdml2bGlvc3R5bGUvZm9udC50cyIsIi4uLy4uLy4uL2NvcmUvc3JjL3Zpdmxpb3N0eWxlL3BhZ2UtbWFzdGVyLnRzIiwiLi4vLi4vLi4vY29yZS9zcmMvdml2bGlvc3R5bGUvY3NzLXBhZ2UudHMiLCIuLi8uLi8uLi9jb3JlL3NyYy92aXZsaW9zdHlsZS91cmxzLnRzIiwiLi4vLi4vLi4vY29yZS9zcmMvdml2bGlvc3R5bGUvdmdlbi50cyIsIi4uLy4uLy4uL2NvcmUvc3JjL3Zpdmxpb3N0eWxlL3htbC1kb2MudHMiLCIuLi8uLi8uLi9jb3JlL3NyYy92aXZsaW9zdHlsZS9vcHMudHMiLCIuLi8uLi8uLi9jb3JlL3NyYy92aXZsaW9zdHlsZS9zaGExLnRzIiwiLi4vLi4vLi4vY29yZS9zcmMvdml2bGlvc3R5bGUvdG9jLnRzIiwiLi4vLi4vLi4vY29yZS9zcmMvdml2bGlvc3R5bGUvZXB1Yi50cyIsIi4uLy4uLy4uL2NvcmUvc3JjL3Zpdmxpb3N0eWxlL2FkYXB0aXZlLXZpZXdlci50cyIsIi4uLy4uLy4uL2NvcmUvc3JjL3Zpdmxpb3N0eWxlL2NvcmUtdmlld2VyLnRzIiwiLi4vLi4vLi4vY29yZS9zcmMvdml2bGlvc3R5bGUvcHJpbnQudHMiLCIuLi8uLi9zcmMvdXRpbHMvc3RyaW5nLXV0aWwudHMiLCIuLi8uLi9zcmMvc3RvcmVzL3VybC1wYXJhbWV0ZXJzLnRzIiwiLi4vLi4vc3JjL21vZGVscy9kb2N1bWVudC1vcHRpb25zLnRzIiwiLi4vLi4vc3JjL21vZGVscy9wYWdlLXZpZXctbW9kZS50cyIsIi4uLy4uL3NyYy9tb2RlbHMvem9vbS1vcHRpb25zLnRzIiwiLi4vLi4vc3JjL21vZGVscy92aWV3ZXItb3B0aW9ucy50cyIsIi4uLy4uL3NyYy9sb2dnaW5nL2xvZ2dlci50cyIsIi4uLy4uL3NyYy9tb2RlbHMvbWVzc2FnZS1xdWV1ZS50cyIsIi4uLy4uL3NyYy91dGlscy9vYnNlcnZhYmxlLXV0aWwudHMiLCIuLi8uLi9zcmMvdmlld21vZGVscy92aWV3ZXIudHMiLCIuLi8uLi9zcmMvdXRpbHMva2V5LXV0aWwudHMiLCIuLi8uLi9zcmMvdmlld21vZGVscy9uYXZpZ2F0aW9uLnRzIiwiLi4vLi4vc3JjL3ZpZXdtb2RlbHMvc2V0dGluZ3MtcGFuZWwudHMiLCIuLi8uLi9zcmMvdmlld21vZGVscy9tZXNzYWdlLWRpYWxvZy50cyIsIi4uLy4uL3NyYy92aWV3bW9kZWxzL3ZpZXdlci1hcHAudHMiLCIuLi8uLi9zcmMvYmluZGluZ3MvbWVudUJ1dHRvbi50cyIsIi4uLy4uL3NyYy9iaW5kaW5ncy9zd2lwZVBhZ2VzLnRzIiwiLi4vLi4vc3JjL3Zpdmxpb3N0eWxlLXZpZXdlci50cyIsIi4uLy4uL3NyYy9tYWluLnRzIl0sInNvdXJjZXNDb250ZW50IjpbIi8qIVxuICogS25vY2tvdXQgSmF2YVNjcmlwdCBsaWJyYXJ5IHYzLjUuMVxuICogKGMpIFRoZSBLbm9ja291dC5qcyB0ZWFtIC0gaHR0cDovL2tub2Nrb3V0anMuY29tL1xuICogTGljZW5zZTogTUlUIChodHRwOi8vd3d3Lm9wZW5zb3VyY2Uub3JnL2xpY2Vuc2VzL21pdC1saWNlbnNlLnBocClcbiAqL1xuXG4oZnVuY3Rpb24oKSB7KGZ1bmN0aW9uKG4pe3ZhciBBPXRoaXN8fCgwLGV2YWwpKFwidGhpc1wiKSx3PUEuZG9jdW1lbnQsUj1BLm5hdmlnYXRvcix2PUEualF1ZXJ5LEg9QS5KU09OO3Z8fFwidW5kZWZpbmVkXCI9PT10eXBlb2YgalF1ZXJ5fHwodj1qUXVlcnkpOyhmdW5jdGlvbihuKXtcImZ1bmN0aW9uXCI9PT10eXBlb2YgZGVmaW5lJiZkZWZpbmUuYW1kP2RlZmluZShbXCJleHBvcnRzXCIsXCJyZXF1aXJlXCJdLG4pOlwib2JqZWN0XCI9PT10eXBlb2YgZXhwb3J0cyYmXCJvYmplY3RcIj09PXR5cGVvZiBtb2R1bGU/bihtb2R1bGUuZXhwb3J0c3x8ZXhwb3J0cyk6bihBLmtvPXt9KX0pKGZ1bmN0aW9uKFMsVCl7ZnVuY3Rpb24gSyhhLGMpe3JldHVybiBudWxsPT09YXx8dHlwZW9mIGEgaW4gVz9hPT09YzohMX1mdW5jdGlvbiBYKGIsYyl7dmFyIGQ7cmV0dXJuIGZ1bmN0aW9uKCl7ZHx8KGQ9YS5hLnNldFRpbWVvdXQoZnVuY3Rpb24oKXtkPW47YigpfSxjKSl9fWZ1bmN0aW9uIFkoYixjKXt2YXIgZDtyZXR1cm4gZnVuY3Rpb24oKXtjbGVhclRpbWVvdXQoZCk7XG5kPWEuYS5zZXRUaW1lb3V0KGIsYyl9fWZ1bmN0aW9uIFooYSxjKXtjJiZcImNoYW5nZVwiIT09Yz9cImJlZm9yZUNoYW5nZVwiPT09Yz90aGlzLnBjKGEpOnRoaXMuZ2IoYSxjKTp0aGlzLnFjKGEpfWZ1bmN0aW9uIGFhKGEsYyl7bnVsbCE9PWMmJmMucyYmYy5zKCl9ZnVuY3Rpb24gYmEoYSxjKXt2YXIgZD10aGlzLnFkLGU9ZFtyXTtlLnJhfHwodGhpcy5RYiYmdGhpcy5tYltjXT8oZC51YyhjLGEsdGhpcy5tYltjXSksdGhpcy5tYltjXT1udWxsLC0tdGhpcy5RYik6ZS5JW2NdfHxkLnVjKGMsYSxlLko/e2RhOmF9OmQuJGMoYSkpLGEuSmEmJmEuZ2QoKSl9dmFyIGE9XCJ1bmRlZmluZWRcIiE9PXR5cGVvZiBTP1M6e307YS5iPWZ1bmN0aW9uKGIsYyl7Zm9yKHZhciBkPWIuc3BsaXQoXCIuXCIpLGU9YSxmPTA7ZjxkLmxlbmd0aC0xO2YrKyllPWVbZFtmXV07ZVtkW2QubGVuZ3RoLTFdXT1jfTthLkw9ZnVuY3Rpb24oYSxjLGQpe2FbY109ZH07YS52ZXJzaW9uPVwiMy41LjFcIjthLmIoXCJ2ZXJzaW9uXCIsXG5hLnZlcnNpb24pO2Eub3B0aW9ucz17ZGVmZXJVcGRhdGVzOiExLHVzZU9ubHlOYXRpdmVFdmVudHM6ITEsZm9yZWFjaEhpZGVzRGVzdHJveWVkOiExfTthLmE9ZnVuY3Rpb24oKXtmdW5jdGlvbiBiKGEsYil7Zm9yKHZhciBjIGluIGEpZi5jYWxsKGEsYykmJmIoYyxhW2NdKX1mdW5jdGlvbiBjKGEsYil7aWYoYilmb3IodmFyIGMgaW4gYilmLmNhbGwoYixjKSYmKGFbY109YltjXSk7cmV0dXJuIGF9ZnVuY3Rpb24gZChhLGIpe2EuX19wcm90b19fPWI7cmV0dXJuIGF9ZnVuY3Rpb24gZShiLGMsZCxlKXt2YXIgbD1iW2NdLm1hdGNoKHEpfHxbXTthLmEuRChkLm1hdGNoKHEpLGZ1bmN0aW9uKGIpe2EuYS5OYShsLGIsZSl9KTtiW2NdPWwuam9pbihcIiBcIil9dmFyIGY9T2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eSxnPXtfX3Byb3RvX186W119aW5zdGFuY2VvZiBBcnJheSxoPVwiZnVuY3Rpb25cIj09PXR5cGVvZiBTeW1ib2wsbT17fSxrPXt9O21bUiYmL0ZpcmVmb3hcXC8yL2kudGVzdChSLnVzZXJBZ2VudCk/XG5cIktleWJvYXJkRXZlbnRcIjpcIlVJRXZlbnRzXCJdPVtcImtleXVwXCIsXCJrZXlkb3duXCIsXCJrZXlwcmVzc1wiXTttLk1vdXNlRXZlbnRzPVwiY2xpY2sgZGJsY2xpY2sgbW91c2Vkb3duIG1vdXNldXAgbW91c2Vtb3ZlIG1vdXNlb3ZlciBtb3VzZW91dCBtb3VzZWVudGVyIG1vdXNlbGVhdmVcIi5zcGxpdChcIiBcIik7YihtLGZ1bmN0aW9uKGEsYil7aWYoYi5sZW5ndGgpZm9yKHZhciBjPTAsZD1iLmxlbmd0aDtjPGQ7YysrKWtbYltjXV09YX0pO3ZhciBsPXtwcm9wZXJ0eWNoYW5nZTohMH0scD13JiZmdW5jdGlvbigpe2Zvcih2YXIgYT0zLGI9dy5jcmVhdGVFbGVtZW50KFwiZGl2XCIpLGM9Yi5nZXRFbGVtZW50c0J5VGFnTmFtZShcImlcIik7Yi5pbm5lckhUTUw9XCJcXHgzYyEtLVtpZiBndCBJRSBcIisgKythK1wiXT48aT48L2k+PCFbZW5kaWZdLS1cXHgzZVwiLGNbMF07KTtyZXR1cm4gNDxhP2E6bn0oKSxxPS9cXFMrL2csdDtyZXR1cm57SmM6W1wiYXV0aGVudGljaXR5X3Rva2VuXCIsL15fX1JlcXVlc3RWZXJpZmljYXRpb25Ub2tlbihfLiopPyQvXSxcbkQ6ZnVuY3Rpb24oYSxiLGMpe2Zvcih2YXIgZD0wLGU9YS5sZW5ndGg7ZDxlO2QrKyliLmNhbGwoYyxhW2RdLGQsYSl9LEE6XCJmdW5jdGlvblwiPT10eXBlb2YgQXJyYXkucHJvdG90eXBlLmluZGV4T2Y/ZnVuY3Rpb24oYSxiKXtyZXR1cm4gQXJyYXkucHJvdG90eXBlLmluZGV4T2YuY2FsbChhLGIpfTpmdW5jdGlvbihhLGIpe2Zvcih2YXIgYz0wLGQ9YS5sZW5ndGg7YzxkO2MrKylpZihhW2NdPT09YilyZXR1cm4gYztyZXR1cm4tMX0sTGI6ZnVuY3Rpb24oYSxiLGMpe2Zvcih2YXIgZD0wLGU9YS5sZW5ndGg7ZDxlO2QrKylpZihiLmNhbGwoYyxhW2RdLGQsYSkpcmV0dXJuIGFbZF07cmV0dXJuIG59LFBhOmZ1bmN0aW9uKGIsYyl7dmFyIGQ9YS5hLkEoYixjKTswPGQ/Yi5zcGxpY2UoZCwxKTowPT09ZCYmYi5zaGlmdCgpfSx3YzpmdW5jdGlvbihiKXt2YXIgYz1bXTtiJiZhLmEuRChiLGZ1bmN0aW9uKGIpezA+YS5hLkEoYyxiKSYmYy5wdXNoKGIpfSk7cmV0dXJuIGN9LE1iOmZ1bmN0aW9uKGEsXG5iLGMpe3ZhciBkPVtdO2lmKGEpZm9yKHZhciBlPTAsbD1hLmxlbmd0aDtlPGw7ZSsrKWQucHVzaChiLmNhbGwoYyxhW2VdLGUpKTtyZXR1cm4gZH0samI6ZnVuY3Rpb24oYSxiLGMpe3ZhciBkPVtdO2lmKGEpZm9yKHZhciBlPTAsbD1hLmxlbmd0aDtlPGw7ZSsrKWIuY2FsbChjLGFbZV0sZSkmJmQucHVzaChhW2VdKTtyZXR1cm4gZH0sTmI6ZnVuY3Rpb24oYSxiKXtpZihiIGluc3RhbmNlb2YgQXJyYXkpYS5wdXNoLmFwcGx5KGEsYik7ZWxzZSBmb3IodmFyIGM9MCxkPWIubGVuZ3RoO2M8ZDtjKyspYS5wdXNoKGJbY10pO3JldHVybiBhfSxOYTpmdW5jdGlvbihiLGMsZCl7dmFyIGU9YS5hLkEoYS5hLmJjKGIpLGMpOzA+ZT9kJiZiLnB1c2goYyk6ZHx8Yi5zcGxpY2UoZSwxKX0sQmE6ZyxleHRlbmQ6YyxzZXRQcm90b3R5cGVPZjpkLEFiOmc/ZDpjLFA6YixHYTpmdW5jdGlvbihhLGIsYyl7aWYoIWEpcmV0dXJuIGE7dmFyIGQ9e30sZTtmb3IoZSBpbiBhKWYuY2FsbChhLGUpJiYoZFtlXT1cbmIuY2FsbChjLGFbZV0sZSxhKSk7cmV0dXJuIGR9LFRiOmZ1bmN0aW9uKGIpe2Zvcig7Yi5maXJzdENoaWxkOylhLnJlbW92ZU5vZGUoYi5maXJzdENoaWxkKX0sWWI6ZnVuY3Rpb24oYil7Yj1hLmEubGEoYik7Zm9yKHZhciBjPShiWzBdJiZiWzBdLm93bmVyRG9jdW1lbnR8fHcpLmNyZWF0ZUVsZW1lbnQoXCJkaXZcIiksZD0wLGU9Yi5sZW5ndGg7ZDxlO2QrKyljLmFwcGVuZENoaWxkKGEub2EoYltkXSkpO3JldHVybiBjfSxDYTpmdW5jdGlvbihiLGMpe2Zvcih2YXIgZD0wLGU9Yi5sZW5ndGgsbD1bXTtkPGU7ZCsrKXt2YXIgaz1iW2RdLmNsb25lTm9kZSghMCk7bC5wdXNoKGM/YS5vYShrKTprKX1yZXR1cm4gbH0sdmE6ZnVuY3Rpb24oYixjKXthLmEuVGIoYik7aWYoYylmb3IodmFyIGQ9MCxlPWMubGVuZ3RoO2Q8ZTtkKyspYi5hcHBlbmRDaGlsZChjW2RdKX0sWGM6ZnVuY3Rpb24oYixjKXt2YXIgZD1iLm5vZGVUeXBlP1tiXTpiO2lmKDA8ZC5sZW5ndGgpe2Zvcih2YXIgZT1kWzBdLFxubD1lLnBhcmVudE5vZGUsaz0wLGY9Yy5sZW5ndGg7azxmO2srKylsLmluc2VydEJlZm9yZShjW2tdLGUpO2s9MDtmb3IoZj1kLmxlbmd0aDtrPGY7aysrKWEucmVtb3ZlTm9kZShkW2tdKX19LFVhOmZ1bmN0aW9uKGEsYil7aWYoYS5sZW5ndGgpe2ZvcihiPTg9PT1iLm5vZGVUeXBlJiZiLnBhcmVudE5vZGV8fGI7YS5sZW5ndGgmJmFbMF0ucGFyZW50Tm9kZSE9PWI7KWEuc3BsaWNlKDAsMSk7Zm9yKDsxPGEubGVuZ3RoJiZhW2EubGVuZ3RoLTFdLnBhcmVudE5vZGUhPT1iOylhLmxlbmd0aC0tO2lmKDE8YS5sZW5ndGgpe3ZhciBjPWFbMF0sZD1hW2EubGVuZ3RoLTFdO2ZvcihhLmxlbmd0aD0wO2MhPT1kOylhLnB1c2goYyksYz1jLm5leHRTaWJsaW5nO2EucHVzaChkKX19cmV0dXJuIGF9LFpjOmZ1bmN0aW9uKGEsYil7Nz5wP2Euc2V0QXR0cmlidXRlKFwic2VsZWN0ZWRcIixiKTphLnNlbGVjdGVkPWJ9LERiOmZ1bmN0aW9uKGEpe3JldHVybiBudWxsPT09YXx8YT09PW4/XCJcIjphLnRyaW0/XG5hLnRyaW0oKTphLnRvU3RyaW5nKCkucmVwbGFjZSgvXltcXHNcXHhhMF0rfFtcXHNcXHhhMF0rJC9nLFwiXCIpfSxVZDpmdW5jdGlvbihhLGIpe2E9YXx8XCJcIjtyZXR1cm4gYi5sZW5ndGg+YS5sZW5ndGg/ITE6YS5zdWJzdHJpbmcoMCxiLmxlbmd0aCk9PT1ifSx2ZDpmdW5jdGlvbihhLGIpe2lmKGE9PT1iKXJldHVybiEwO2lmKDExPT09YS5ub2RlVHlwZSlyZXR1cm4hMTtpZihiLmNvbnRhaW5zKXJldHVybiBiLmNvbnRhaW5zKDEhPT1hLm5vZGVUeXBlP2EucGFyZW50Tm9kZTphKTtpZihiLmNvbXBhcmVEb2N1bWVudFBvc2l0aW9uKXJldHVybiAxNj09KGIuY29tcGFyZURvY3VtZW50UG9zaXRpb24oYSkmMTYpO2Zvcig7YSYmYSE9YjspYT1hLnBhcmVudE5vZGU7cmV0dXJuISFhfSxTYjpmdW5jdGlvbihiKXtyZXR1cm4gYS5hLnZkKGIsYi5vd25lckRvY3VtZW50LmRvY3VtZW50RWxlbWVudCl9LGtkOmZ1bmN0aW9uKGIpe3JldHVybiEhYS5hLkxiKGIsYS5hLlNiKX0sUjpmdW5jdGlvbihhKXtyZXR1cm4gYSYmXG5hLnRhZ05hbWUmJmEudGFnTmFtZS50b0xvd2VyQ2FzZSgpfSxBYzpmdW5jdGlvbihiKXtyZXR1cm4gYS5vbkVycm9yP2Z1bmN0aW9uKCl7dHJ5e3JldHVybiBiLmFwcGx5KHRoaXMsYXJndW1lbnRzKX1jYXRjaChjKXt0aHJvdyBhLm9uRXJyb3ImJmEub25FcnJvcihjKSxjO319OmJ9LHNldFRpbWVvdXQ6ZnVuY3Rpb24oYixjKXtyZXR1cm4gc2V0VGltZW91dChhLmEuQWMoYiksYyl9LEdjOmZ1bmN0aW9uKGIpe3NldFRpbWVvdXQoZnVuY3Rpb24oKXthLm9uRXJyb3ImJmEub25FcnJvcihiKTt0aHJvdyBiO30sMCl9LEI6ZnVuY3Rpb24oYixjLGQpe3ZhciBlPWEuYS5BYyhkKTtkPWxbY107aWYoYS5vcHRpb25zLnVzZU9ubHlOYXRpdmVFdmVudHN8fGR8fCF2KWlmKGR8fFwiZnVuY3Rpb25cIiE9dHlwZW9mIGIuYWRkRXZlbnRMaXN0ZW5lcilpZihcInVuZGVmaW5lZFwiIT10eXBlb2YgYi5hdHRhY2hFdmVudCl7dmFyIGs9ZnVuY3Rpb24oYSl7ZS5jYWxsKGIsYSl9LGY9XCJvblwiK2M7Yi5hdHRhY2hFdmVudChmLFxuayk7YS5hLksuemEoYixmdW5jdGlvbigpe2IuZGV0YWNoRXZlbnQoZixrKX0pfWVsc2UgdGhyb3cgRXJyb3IoXCJCcm93c2VyIGRvZXNuJ3Qgc3VwcG9ydCBhZGRFdmVudExpc3RlbmVyIG9yIGF0dGFjaEV2ZW50XCIpO2Vsc2UgYi5hZGRFdmVudExpc3RlbmVyKGMsZSwhMSk7ZWxzZSB0fHwodD1cImZ1bmN0aW9uXCI9PXR5cGVvZiB2KGIpLm9uP1wib25cIjpcImJpbmRcIiksdihiKVt0XShjLGUpfSxGYjpmdW5jdGlvbihiLGMpe2lmKCFifHwhYi5ub2RlVHlwZSl0aHJvdyBFcnJvcihcImVsZW1lbnQgbXVzdCBiZSBhIERPTSBub2RlIHdoZW4gY2FsbGluZyB0cmlnZ2VyRXZlbnRcIik7dmFyIGQ7XCJpbnB1dFwiPT09YS5hLlIoYikmJmIudHlwZSYmXCJjbGlja1wiPT1jLnRvTG93ZXJDYXNlKCk/KGQ9Yi50eXBlLGQ9XCJjaGVja2JveFwiPT1kfHxcInJhZGlvXCI9PWQpOmQ9ITE7aWYoYS5vcHRpb25zLnVzZU9ubHlOYXRpdmVFdmVudHN8fCF2fHxkKWlmKFwiZnVuY3Rpb25cIj09dHlwZW9mIHcuY3JlYXRlRXZlbnQpaWYoXCJmdW5jdGlvblwiPT1cbnR5cGVvZiBiLmRpc3BhdGNoRXZlbnQpZD13LmNyZWF0ZUV2ZW50KGtbY118fFwiSFRNTEV2ZW50c1wiKSxkLmluaXRFdmVudChjLCEwLCEwLEEsMCwwLDAsMCwwLCExLCExLCExLCExLDAsYiksYi5kaXNwYXRjaEV2ZW50KGQpO2Vsc2UgdGhyb3cgRXJyb3IoXCJUaGUgc3VwcGxpZWQgZWxlbWVudCBkb2Vzbid0IHN1cHBvcnQgZGlzcGF0Y2hFdmVudFwiKTtlbHNlIGlmKGQmJmIuY2xpY2spYi5jbGljaygpO2Vsc2UgaWYoXCJ1bmRlZmluZWRcIiE9dHlwZW9mIGIuZmlyZUV2ZW50KWIuZmlyZUV2ZW50KFwib25cIitjKTtlbHNlIHRocm93IEVycm9yKFwiQnJvd3NlciBkb2Vzbid0IHN1cHBvcnQgdHJpZ2dlcmluZyBldmVudHNcIik7ZWxzZSB2KGIpLnRyaWdnZXIoYyl9LGY6ZnVuY3Rpb24oYil7cmV0dXJuIGEuTyhiKT9iKCk6Yn0sYmM6ZnVuY3Rpb24oYil7cmV0dXJuIGEuTyhiKT9iLnYoKTpifSxFYjpmdW5jdGlvbihiLGMsZCl7dmFyIGw7YyYmKFwib2JqZWN0XCI9PT10eXBlb2YgYi5jbGFzc0xpc3Q/XG4obD1iLmNsYXNzTGlzdFtkP1wiYWRkXCI6XCJyZW1vdmVcIl0sYS5hLkQoYy5tYXRjaChxKSxmdW5jdGlvbihhKXtsLmNhbGwoYi5jbGFzc0xpc3QsYSl9KSk6XCJzdHJpbmdcIj09PXR5cGVvZiBiLmNsYXNzTmFtZS5iYXNlVmFsP2UoYi5jbGFzc05hbWUsXCJiYXNlVmFsXCIsYyxkKTplKGIsXCJjbGFzc05hbWVcIixjLGQpKX0sQmI6ZnVuY3Rpb24oYixjKXt2YXIgZD1hLmEuZihjKTtpZihudWxsPT09ZHx8ZD09PW4pZD1cIlwiO3ZhciBlPWEuaC5maXJzdENoaWxkKGIpOyFlfHwzIT1lLm5vZGVUeXBlfHxhLmgubmV4dFNpYmxpbmcoZSk/YS5oLnZhKGIsW2Iub3duZXJEb2N1bWVudC5jcmVhdGVUZXh0Tm9kZShkKV0pOmUuZGF0YT1kO2EuYS5BZChiKX0sWWM6ZnVuY3Rpb24oYSxiKXthLm5hbWU9YjtpZig3Pj1wKXRyeXt2YXIgYz1hLm5hbWUucmVwbGFjZSgvWyY8PidcIl0vZyxmdW5jdGlvbihhKXtyZXR1cm5cIiYjXCIrYS5jaGFyQ29kZUF0KDApK1wiO1wifSk7YS5tZXJnZUF0dHJpYnV0ZXMody5jcmVhdGVFbGVtZW50KFwiPGlucHV0IG5hbWU9J1wiK1xuYytcIicvPlwiKSwhMSl9Y2F0Y2goZCl7fX0sQWQ6ZnVuY3Rpb24oYSl7OTw9cCYmKGE9MT09YS5ub2RlVHlwZT9hOmEucGFyZW50Tm9kZSxhLnN0eWxlJiYoYS5zdHlsZS56b29tPWEuc3R5bGUuem9vbSkpfSx3ZDpmdW5jdGlvbihhKXtpZihwKXt2YXIgYj1hLnN0eWxlLndpZHRoO2Euc3R5bGUud2lkdGg9MDthLnN0eWxlLndpZHRoPWJ9fSxQZDpmdW5jdGlvbihiLGMpe2I9YS5hLmYoYik7Yz1hLmEuZihjKTtmb3IodmFyIGQ9W10sZT1iO2U8PWM7ZSsrKWQucHVzaChlKTtyZXR1cm4gZH0sbGE6ZnVuY3Rpb24oYSl7Zm9yKHZhciBiPVtdLGM9MCxkPWEubGVuZ3RoO2M8ZDtjKyspYi5wdXNoKGFbY10pO3JldHVybiBifSxEYTpmdW5jdGlvbihhKXtyZXR1cm4gaD9TeW1ib2woYSk6YX0sWmQ6Nj09PXAsJGQ6Nz09PXAsVzpwLExjOmZ1bmN0aW9uKGIsYyl7Zm9yKHZhciBkPWEuYS5sYShiLmdldEVsZW1lbnRzQnlUYWdOYW1lKFwiaW5wdXRcIikpLmNvbmNhdChhLmEubGEoYi5nZXRFbGVtZW50c0J5VGFnTmFtZShcInRleHRhcmVhXCIpKSksXG5lPVwic3RyaW5nXCI9PXR5cGVvZiBjP2Z1bmN0aW9uKGEpe3JldHVybiBhLm5hbWU9PT1jfTpmdW5jdGlvbihhKXtyZXR1cm4gYy50ZXN0KGEubmFtZSl9LGw9W10saz1kLmxlbmd0aC0xOzA8PWs7ay0tKWUoZFtrXSkmJmwucHVzaChkW2tdKTtyZXR1cm4gbH0sTmQ6ZnVuY3Rpb24oYil7cmV0dXJuXCJzdHJpbmdcIj09dHlwZW9mIGImJihiPWEuYS5EYihiKSk/SCYmSC5wYXJzZT9ILnBhcnNlKGIpOihuZXcgRnVuY3Rpb24oXCJyZXR1cm4gXCIrYikpKCk6bnVsbH0saGM6ZnVuY3Rpb24oYixjLGQpe2lmKCFIfHwhSC5zdHJpbmdpZnkpdGhyb3cgRXJyb3IoXCJDYW5ub3QgZmluZCBKU09OLnN0cmluZ2lmeSgpLiBTb21lIGJyb3dzZXJzIChlLmcuLCBJRSA8IDgpIGRvbid0IHN1cHBvcnQgaXQgbmF0aXZlbHksIGJ1dCB5b3UgY2FuIG92ZXJjb21lIHRoaXMgYnkgYWRkaW5nIGEgc2NyaXB0IHJlZmVyZW5jZSB0byBqc29uMi5qcywgZG93bmxvYWRhYmxlIGZyb20gaHR0cDovL3d3dy5qc29uLm9yZy9qc29uMi5qc1wiKTtcbnJldHVybiBILnN0cmluZ2lmeShhLmEuZihiKSxjLGQpfSxPZDpmdW5jdGlvbihjLGQsZSl7ZT1lfHx7fTt2YXIgbD1lLnBhcmFtc3x8e30saz1lLmluY2x1ZGVGaWVsZHN8fHRoaXMuSmMsZj1jO2lmKFwib2JqZWN0XCI9PXR5cGVvZiBjJiZcImZvcm1cIj09PWEuYS5SKGMpKWZvcih2YXIgZj1jLmFjdGlvbixoPWsubGVuZ3RoLTE7MDw9aDtoLS0pZm9yKHZhciBnPWEuYS5MYyhjLGtbaF0pLG09Zy5sZW5ndGgtMTswPD1tO20tLSlsW2dbbV0ubmFtZV09Z1ttXS52YWx1ZTtkPWEuYS5mKGQpO3ZhciBwPXcuY3JlYXRlRWxlbWVudChcImZvcm1cIik7cC5zdHlsZS5kaXNwbGF5PVwibm9uZVwiO3AuYWN0aW9uPWY7cC5tZXRob2Q9XCJwb3N0XCI7Zm9yKHZhciBxIGluIGQpYz13LmNyZWF0ZUVsZW1lbnQoXCJpbnB1dFwiKSxjLnR5cGU9XCJoaWRkZW5cIixjLm5hbWU9cSxjLnZhbHVlPWEuYS5oYyhhLmEuZihkW3FdKSkscC5hcHBlbmRDaGlsZChjKTtiKGwsZnVuY3Rpb24oYSxiKXt2YXIgYz13LmNyZWF0ZUVsZW1lbnQoXCJpbnB1dFwiKTtcbmMudHlwZT1cImhpZGRlblwiO2MubmFtZT1hO2MudmFsdWU9YjtwLmFwcGVuZENoaWxkKGMpfSk7dy5ib2R5LmFwcGVuZENoaWxkKHApO2Uuc3VibWl0dGVyP2Uuc3VibWl0dGVyKHApOnAuc3VibWl0KCk7c2V0VGltZW91dChmdW5jdGlvbigpe3AucGFyZW50Tm9kZS5yZW1vdmVDaGlsZChwKX0sMCl9fX0oKTthLmIoXCJ1dGlsc1wiLGEuYSk7YS5iKFwidXRpbHMuYXJyYXlGb3JFYWNoXCIsYS5hLkQpO2EuYihcInV0aWxzLmFycmF5Rmlyc3RcIixhLmEuTGIpO2EuYihcInV0aWxzLmFycmF5RmlsdGVyXCIsYS5hLmpiKTthLmIoXCJ1dGlscy5hcnJheUdldERpc3RpbmN0VmFsdWVzXCIsYS5hLndjKTthLmIoXCJ1dGlscy5hcnJheUluZGV4T2ZcIixhLmEuQSk7YS5iKFwidXRpbHMuYXJyYXlNYXBcIixhLmEuTWIpO2EuYihcInV0aWxzLmFycmF5UHVzaEFsbFwiLGEuYS5OYik7YS5iKFwidXRpbHMuYXJyYXlSZW1vdmVJdGVtXCIsYS5hLlBhKTthLmIoXCJ1dGlscy5jbG9uZU5vZGVzXCIsYS5hLkNhKTthLmIoXCJ1dGlscy5jcmVhdGVTeW1ib2xPclN0cmluZ1wiLFxuYS5hLkRhKTthLmIoXCJ1dGlscy5leHRlbmRcIixhLmEuZXh0ZW5kKTthLmIoXCJ1dGlscy5maWVsZHNJbmNsdWRlZFdpdGhKc29uUG9zdFwiLGEuYS5KYyk7YS5iKFwidXRpbHMuZ2V0Rm9ybUZpZWxkc1wiLGEuYS5MYyk7YS5iKFwidXRpbHMub2JqZWN0TWFwXCIsYS5hLkdhKTthLmIoXCJ1dGlscy5wZWVrT2JzZXJ2YWJsZVwiLGEuYS5iYyk7YS5iKFwidXRpbHMucG9zdEpzb25cIixhLmEuT2QpO2EuYihcInV0aWxzLnBhcnNlSnNvblwiLGEuYS5OZCk7YS5iKFwidXRpbHMucmVnaXN0ZXJFdmVudEhhbmRsZXJcIixhLmEuQik7YS5iKFwidXRpbHMuc3RyaW5naWZ5SnNvblwiLGEuYS5oYyk7YS5iKFwidXRpbHMucmFuZ2VcIixhLmEuUGQpO2EuYihcInV0aWxzLnRvZ2dsZURvbU5vZGVDc3NDbGFzc1wiLGEuYS5FYik7YS5iKFwidXRpbHMudHJpZ2dlckV2ZW50XCIsYS5hLkZiKTthLmIoXCJ1dGlscy51bndyYXBPYnNlcnZhYmxlXCIsYS5hLmYpO2EuYihcInV0aWxzLm9iamVjdEZvckVhY2hcIixhLmEuUCk7YS5iKFwidXRpbHMuYWRkT3JSZW1vdmVJdGVtXCIsXG5hLmEuTmEpO2EuYihcInV0aWxzLnNldFRleHRDb250ZW50XCIsYS5hLkJiKTthLmIoXCJ1bndyYXBcIixhLmEuZik7RnVuY3Rpb24ucHJvdG90eXBlLmJpbmR8fChGdW5jdGlvbi5wcm90b3R5cGUuYmluZD1mdW5jdGlvbihhKXt2YXIgYz10aGlzO2lmKDE9PT1hcmd1bWVudHMubGVuZ3RoKXJldHVybiBmdW5jdGlvbigpe3JldHVybiBjLmFwcGx5KGEsYXJndW1lbnRzKX07dmFyIGQ9QXJyYXkucHJvdG90eXBlLnNsaWNlLmNhbGwoYXJndW1lbnRzLDEpO3JldHVybiBmdW5jdGlvbigpe3ZhciBlPWQuc2xpY2UoMCk7ZS5wdXNoLmFwcGx5KGUsYXJndW1lbnRzKTtyZXR1cm4gYy5hcHBseShhLGUpfX0pO2EuYS5nPW5ldyBmdW5jdGlvbigpe3ZhciBiPTAsYz1cIl9fa29fX1wiKyhuZXcgRGF0ZSkuZ2V0VGltZSgpLGQ9e30sZSxmO2EuYS5XPyhlPWZ1bmN0aW9uKGEsZSl7dmFyIGY9YVtjXTtpZighZnx8XCJudWxsXCI9PT1mfHwhZFtmXSl7aWYoIWUpcmV0dXJuIG47Zj1hW2NdPVwia29cIitiKys7ZFtmXT1cbnt9fXJldHVybiBkW2ZdfSxmPWZ1bmN0aW9uKGEpe3ZhciBiPWFbY107cmV0dXJuIGI/KGRlbGV0ZSBkW2JdLGFbY109bnVsbCwhMCk6ITF9KTooZT1mdW5jdGlvbihhLGIpe3ZhciBkPWFbY107IWQmJmImJihkPWFbY109e30pO3JldHVybiBkfSxmPWZ1bmN0aW9uKGEpe3JldHVybiBhW2NdPyhkZWxldGUgYVtjXSwhMCk6ITF9KTtyZXR1cm57Z2V0OmZ1bmN0aW9uKGEsYil7dmFyIGM9ZShhLCExKTtyZXR1cm4gYyYmY1tiXX0sc2V0OmZ1bmN0aW9uKGEsYixjKXsoYT1lKGEsYyE9PW4pKSYmKGFbYl09Yyl9LFViOmZ1bmN0aW9uKGEsYixjKXthPWUoYSwhMCk7cmV0dXJuIGFbYl18fChhW2JdPWMpfSxjbGVhcjpmLFo6ZnVuY3Rpb24oKXtyZXR1cm4gYisrICtjfX19O2EuYihcInV0aWxzLmRvbURhdGFcIixhLmEuZyk7YS5iKFwidXRpbHMuZG9tRGF0YS5jbGVhclwiLGEuYS5nLmNsZWFyKTthLmEuSz1uZXcgZnVuY3Rpb24oKXtmdW5jdGlvbiBiKGIsYyl7dmFyIGQ9YS5hLmcuZ2V0KGIsZSk7XG5kPT09biYmYyYmKGQ9W10sYS5hLmcuc2V0KGIsZSxkKSk7cmV0dXJuIGR9ZnVuY3Rpb24gYyhjKXt2YXIgZT1iKGMsITEpO2lmKGUpZm9yKHZhciBlPWUuc2xpY2UoMCksaz0wO2s8ZS5sZW5ndGg7aysrKWVba10oYyk7YS5hLmcuY2xlYXIoYyk7YS5hLksuY2xlYW5FeHRlcm5hbERhdGEoYyk7Z1tjLm5vZGVUeXBlXSYmZChjLmNoaWxkTm9kZXMsITApfWZ1bmN0aW9uIGQoYixkKXtmb3IodmFyIGU9W10sbCxmPTA7ZjxiLmxlbmd0aDtmKyspaWYoIWR8fDg9PT1iW2ZdLm5vZGVUeXBlKWlmKGMoZVtlLmxlbmd0aF09bD1iW2ZdKSxiW2ZdIT09bClmb3IoO2YtLSYmLTE9PWEuYS5BKGUsYltmXSk7KTt9dmFyIGU9YS5hLmcuWigpLGY9ezE6ITAsODohMCw5OiEwfSxnPXsxOiEwLDk6ITB9O3JldHVybnt6YTpmdW5jdGlvbihhLGMpe2lmKFwiZnVuY3Rpb25cIiE9dHlwZW9mIGMpdGhyb3cgRXJyb3IoXCJDYWxsYmFjayBtdXN0IGJlIGEgZnVuY3Rpb25cIik7YihhLCEwKS5wdXNoKGMpfSx5YjpmdW5jdGlvbihjLFxuZCl7dmFyIGY9YihjLCExKTtmJiYoYS5hLlBhKGYsZCksMD09Zi5sZW5ndGgmJmEuYS5nLnNldChjLGUsbikpfSxvYTpmdW5jdGlvbihiKXthLnUuRyhmdW5jdGlvbigpe2ZbYi5ub2RlVHlwZV0mJihjKGIpLGdbYi5ub2RlVHlwZV0mJmQoYi5nZXRFbGVtZW50c0J5VGFnTmFtZShcIipcIikpKX0pO3JldHVybiBifSxyZW1vdmVOb2RlOmZ1bmN0aW9uKGIpe2Eub2EoYik7Yi5wYXJlbnROb2RlJiZiLnBhcmVudE5vZGUucmVtb3ZlQ2hpbGQoYil9LGNsZWFuRXh0ZXJuYWxEYXRhOmZ1bmN0aW9uKGEpe3YmJlwiZnVuY3Rpb25cIj09dHlwZW9mIHYuY2xlYW5EYXRhJiZ2LmNsZWFuRGF0YShbYV0pfX19O2Eub2E9YS5hLksub2E7YS5yZW1vdmVOb2RlPWEuYS5LLnJlbW92ZU5vZGU7YS5iKFwiY2xlYW5Ob2RlXCIsYS5vYSk7YS5iKFwicmVtb3ZlTm9kZVwiLGEucmVtb3ZlTm9kZSk7YS5iKFwidXRpbHMuZG9tTm9kZURpc3Bvc2FsXCIsYS5hLkspO2EuYihcInV0aWxzLmRvbU5vZGVEaXNwb3NhbC5hZGREaXNwb3NlQ2FsbGJhY2tcIixcbmEuYS5LLnphKTthLmIoXCJ1dGlscy5kb21Ob2RlRGlzcG9zYWwucmVtb3ZlRGlzcG9zZUNhbGxiYWNrXCIsYS5hLksueWIpOyhmdW5jdGlvbigpe3ZhciBiPVswLFwiXCIsXCJcIl0sYz1bMSxcIjx0YWJsZT5cIixcIjwvdGFibGU+XCJdLGQ9WzMsXCI8dGFibGU+PHRib2R5Pjx0cj5cIixcIjwvdHI+PC90Ym9keT48L3RhYmxlPlwiXSxlPVsxLFwiPHNlbGVjdCBtdWx0aXBsZT0nbXVsdGlwbGUnPlwiLFwiPC9zZWxlY3Q+XCJdLGY9e3RoZWFkOmMsdGJvZHk6Yyx0Zm9vdDpjLHRyOlsyLFwiPHRhYmxlPjx0Ym9keT5cIixcIjwvdGJvZHk+PC90YWJsZT5cIl0sdGQ6ZCx0aDpkLG9wdGlvbjplLG9wdGdyb3VwOmV9LGc9OD49YS5hLlc7YS5hLnVhPWZ1bmN0aW9uKGMsZCl7dmFyIGU7aWYodilpZih2LnBhcnNlSFRNTCllPXYucGFyc2VIVE1MKGMsZCl8fFtdO2Vsc2V7aWYoKGU9di5jbGVhbihbY10sZCkpJiZlWzBdKXtmb3IodmFyIGw9ZVswXTtsLnBhcmVudE5vZGUmJjExIT09bC5wYXJlbnROb2RlLm5vZGVUeXBlOylsPWwucGFyZW50Tm9kZTtcbmwucGFyZW50Tm9kZSYmbC5wYXJlbnROb2RlLnJlbW92ZUNoaWxkKGwpfX1lbHNleyhlPWQpfHwoZT13KTt2YXIgbD1lLnBhcmVudFdpbmRvd3x8ZS5kZWZhdWx0Vmlld3x8QSxwPWEuYS5EYihjKS50b0xvd2VyQ2FzZSgpLHE9ZS5jcmVhdGVFbGVtZW50KFwiZGl2XCIpLHQ7dD0ocD1wLm1hdGNoKC9eKD86XFx4M2MhLS0uKj8tLVxceDNlXFxzKj8pKj88KFthLXpdKylbXFxzPl0vKSkmJmZbcFsxXV18fGI7cD10WzBdO3Q9XCJpZ25vcmVkPGRpdj5cIit0WzFdK2MrdFsyXStcIjwvZGl2PlwiO1wiZnVuY3Rpb25cIj09dHlwZW9mIGwuaW5uZXJTaGl2P3EuYXBwZW5kQ2hpbGQobC5pbm5lclNoaXYodCkpOihnJiZlLmJvZHkuYXBwZW5kQ2hpbGQocSkscS5pbm5lckhUTUw9dCxnJiZxLnBhcmVudE5vZGUucmVtb3ZlQ2hpbGQocSkpO2Zvcig7cC0tOylxPXEubGFzdENoaWxkO2U9YS5hLmxhKHEubGFzdENoaWxkLmNoaWxkTm9kZXMpfXJldHVybiBlfTthLmEuTWQ9ZnVuY3Rpb24oYixjKXt2YXIgZD1hLmEudWEoYixcbmMpO3JldHVybiBkLmxlbmd0aCYmZFswXS5wYXJlbnRFbGVtZW50fHxhLmEuWWIoZCl9O2EuYS5mYz1mdW5jdGlvbihiLGMpe2EuYS5UYihiKTtjPWEuYS5mKGMpO2lmKG51bGwhPT1jJiZjIT09bilpZihcInN0cmluZ1wiIT10eXBlb2YgYyYmKGM9Yy50b1N0cmluZygpKSx2KXYoYikuaHRtbChjKTtlbHNlIGZvcih2YXIgZD1hLmEudWEoYyxiLm93bmVyRG9jdW1lbnQpLGU9MDtlPGQubGVuZ3RoO2UrKyliLmFwcGVuZENoaWxkKGRbZV0pfX0pKCk7YS5iKFwidXRpbHMucGFyc2VIdG1sRnJhZ21lbnRcIixhLmEudWEpO2EuYihcInV0aWxzLnNldEh0bWxcIixhLmEuZmMpO2EuYWE9ZnVuY3Rpb24oKXtmdW5jdGlvbiBiKGMsZSl7aWYoYylpZig4PT1jLm5vZGVUeXBlKXt2YXIgZj1hLmFhLlVjKGMubm9kZVZhbHVlKTtudWxsIT1mJiZlLnB1c2goe3VkOmMsS2Q6Zn0pfWVsc2UgaWYoMT09Yy5ub2RlVHlwZSlmb3IodmFyIGY9MCxnPWMuY2hpbGROb2RlcyxoPWcubGVuZ3RoO2Y8aDtmKyspYihnW2ZdLFxuZSl9dmFyIGM9e307cmV0dXJue1hiOmZ1bmN0aW9uKGEpe2lmKFwiZnVuY3Rpb25cIiE9dHlwZW9mIGEpdGhyb3cgRXJyb3IoXCJZb3UgY2FuIG9ubHkgcGFzcyBhIGZ1bmN0aW9uIHRvIGtvLm1lbW9pemF0aW9uLm1lbW9pemUoKVwiKTt2YXIgYj0oNDI5NDk2NzI5NiooMStNYXRoLnJhbmRvbSgpKXwwKS50b1N0cmluZygxNikuc3Vic3RyaW5nKDEpKyg0Mjk0OTY3Mjk2KigxK01hdGgucmFuZG9tKCkpfDApLnRvU3RyaW5nKDE2KS5zdWJzdHJpbmcoMSk7Y1tiXT1hO3JldHVyblwiXFx4M2MhLS1ba29fbWVtbzpcIitiK1wiXS0tXFx4M2VcIn0sYmQ6ZnVuY3Rpb24oYSxiKXt2YXIgZj1jW2FdO2lmKGY9PT1uKXRocm93IEVycm9yKFwiQ291bGRuJ3QgZmluZCBhbnkgbWVtbyB3aXRoIElEIFwiK2ErXCIuIFBlcmhhcHMgaXQncyBhbHJlYWR5IGJlZW4gdW5tZW1vaXplZC5cIik7dHJ5e3JldHVybiBmLmFwcGx5KG51bGwsYnx8W10pLCEwfWZpbmFsbHl7ZGVsZXRlIGNbYV19fSxjZDpmdW5jdGlvbihjLGUpe3ZhciBmPVxuW107YihjLGYpO2Zvcih2YXIgZz0wLGg9Zi5sZW5ndGg7ZzxoO2crKyl7dmFyIG09ZltnXS51ZCxrPVttXTtlJiZhLmEuTmIoayxlKTthLmFhLmJkKGZbZ10uS2Qsayk7bS5ub2RlVmFsdWU9XCJcIjttLnBhcmVudE5vZGUmJm0ucGFyZW50Tm9kZS5yZW1vdmVDaGlsZChtKX19LFVjOmZ1bmN0aW9uKGEpe3JldHVybihhPWEubWF0Y2goL15cXFtrb19tZW1vXFw6KC4qPylcXF0kLykpP2FbMV06bnVsbH19fSgpO2EuYihcIm1lbW9pemF0aW9uXCIsYS5hYSk7YS5iKFwibWVtb2l6YXRpb24ubWVtb2l6ZVwiLGEuYWEuWGIpO2EuYihcIm1lbW9pemF0aW9uLnVubWVtb2l6ZVwiLGEuYWEuYmQpO2EuYihcIm1lbW9pemF0aW9uLnBhcnNlTWVtb1RleHRcIixhLmFhLlVjKTthLmIoXCJtZW1vaXphdGlvbi51bm1lbW9pemVEb21Ob2RlQW5kRGVzY2VuZGFudHNcIixhLmFhLmNkKTthLm5hPWZ1bmN0aW9uKCl7ZnVuY3Rpb24gYigpe2lmKGYpZm9yKHZhciBiPWYsYz0wLGQ7aDxmOylpZihkPWVbaCsrXSl7aWYoaD5iKXtpZig1RTM8PVxuKytjKXtoPWY7YS5hLkdjKEVycm9yKFwiJ1RvbyBtdWNoIHJlY3Vyc2lvbicgYWZ0ZXIgcHJvY2Vzc2luZyBcIitjK1wiIHRhc2sgZ3JvdXBzLlwiKSk7YnJlYWt9Yj1mfXRyeXtkKCl9Y2F0Y2gocCl7YS5hLkdjKHApfX19ZnVuY3Rpb24gYygpe2IoKTtoPWY9ZS5sZW5ndGg9MH12YXIgZCxlPVtdLGY9MCxnPTEsaD0wO0EuTXV0YXRpb25PYnNlcnZlcj9kPWZ1bmN0aW9uKGEpe3ZhciBiPXcuY3JlYXRlRWxlbWVudChcImRpdlwiKTsobmV3IE11dGF0aW9uT2JzZXJ2ZXIoYSkpLm9ic2VydmUoYix7YXR0cmlidXRlczohMH0pO3JldHVybiBmdW5jdGlvbigpe2IuY2xhc3NMaXN0LnRvZ2dsZShcImZvb1wiKX19KGMpOmQ9dyYmXCJvbnJlYWR5c3RhdGVjaGFuZ2VcImluIHcuY3JlYXRlRWxlbWVudChcInNjcmlwdFwiKT9mdW5jdGlvbihhKXt2YXIgYj13LmNyZWF0ZUVsZW1lbnQoXCJzY3JpcHRcIik7Yi5vbnJlYWR5c3RhdGVjaGFuZ2U9ZnVuY3Rpb24oKXtiLm9ucmVhZHlzdGF0ZWNoYW5nZT1udWxsO3cuZG9jdW1lbnRFbGVtZW50LnJlbW92ZUNoaWxkKGIpO1xuYj1udWxsO2EoKX07dy5kb2N1bWVudEVsZW1lbnQuYXBwZW5kQ2hpbGQoYil9OmZ1bmN0aW9uKGEpe3NldFRpbWVvdXQoYSwwKX07cmV0dXJue3NjaGVkdWxlcjpkLHpiOmZ1bmN0aW9uKGIpe2Z8fGEubmEuc2NoZWR1bGVyKGMpO2VbZisrXT1iO3JldHVybiBnKyt9LGNhbmNlbDpmdW5jdGlvbihhKXthPWEtKGctZik7YT49aCYmYTxmJiYoZVthXT1udWxsKX0scmVzZXRGb3JUZXN0aW5nOmZ1bmN0aW9uKCl7dmFyIGE9Zi1oO2g9Zj1lLmxlbmd0aD0wO3JldHVybiBhfSxTZDpifX0oKTthLmIoXCJ0YXNrc1wiLGEubmEpO2EuYihcInRhc2tzLnNjaGVkdWxlXCIsYS5uYS56Yik7YS5iKFwidGFza3MucnVuRWFybHlcIixhLm5hLlNkKTthLlRhPXt0aHJvdHRsZTpmdW5jdGlvbihiLGMpe2IudGhyb3R0bGVFdmFsdWF0aW9uPWM7dmFyIGQ9bnVsbDtyZXR1cm4gYS4kKHtyZWFkOmIsd3JpdGU6ZnVuY3Rpb24oZSl7Y2xlYXJUaW1lb3V0KGQpO2Q9YS5hLnNldFRpbWVvdXQoZnVuY3Rpb24oKXtiKGUpfSxcbmMpfX0pfSxyYXRlTGltaXQ6ZnVuY3Rpb24oYSxjKXt2YXIgZCxlLGY7XCJudW1iZXJcIj09dHlwZW9mIGM/ZD1jOihkPWMudGltZW91dCxlPWMubWV0aG9kKTthLkhiPSExO2Y9XCJmdW5jdGlvblwiPT10eXBlb2YgZT9lOlwibm90aWZ5V2hlbkNoYW5nZXNTdG9wXCI9PWU/WTpYO2EudWIoZnVuY3Rpb24oYSl7cmV0dXJuIGYoYSxkLGMpfSl9LGRlZmVycmVkOmZ1bmN0aW9uKGIsYyl7aWYoITAhPT1jKXRocm93IEVycm9yKFwiVGhlICdkZWZlcnJlZCcgZXh0ZW5kZXIgb25seSBhY2NlcHRzIHRoZSB2YWx1ZSAndHJ1ZScsIGJlY2F1c2UgaXQgaXMgbm90IHN1cHBvcnRlZCB0byB0dXJuIGRlZmVycmFsIG9mZiBvbmNlIGVuYWJsZWQuXCIpO2IuSGJ8fChiLkhiPSEwLGIudWIoZnVuY3Rpb24oYyl7dmFyIGUsZj0hMTtyZXR1cm4gZnVuY3Rpb24oKXtpZighZil7YS5uYS5jYW5jZWwoZSk7ZT1hLm5hLnpiKGMpO3RyeXtmPSEwLGIubm90aWZ5U3Vic2NyaWJlcnMobixcImRpcnR5XCIpfWZpbmFsbHl7Zj1cbiExfX19fSkpfSxub3RpZnk6ZnVuY3Rpb24oYSxjKXthLmVxdWFsaXR5Q29tcGFyZXI9XCJhbHdheXNcIj09Yz9udWxsOkt9fTt2YXIgVz17dW5kZWZpbmVkOjEsXCJib29sZWFuXCI6MSxudW1iZXI6MSxzdHJpbmc6MX07YS5iKFwiZXh0ZW5kZXJzXCIsYS5UYSk7YS5pYz1mdW5jdGlvbihiLGMsZCl7dGhpcy5kYT1iO3RoaXMubGM9Yzt0aGlzLm1jPWQ7dGhpcy5JYj0hMTt0aGlzLmZiPXRoaXMuSmI9bnVsbDthLkwodGhpcyxcImRpc3Bvc2VcIix0aGlzLnMpO2EuTCh0aGlzLFwiZGlzcG9zZVdoZW5Ob2RlSXNSZW1vdmVkXCIsdGhpcy5sKX07YS5pYy5wcm90b3R5cGUucz1mdW5jdGlvbigpe3RoaXMuSWJ8fCh0aGlzLmZiJiZhLmEuSy55Yih0aGlzLkpiLHRoaXMuZmIpLHRoaXMuSWI9ITAsdGhpcy5tYygpLHRoaXMuZGE9dGhpcy5sYz10aGlzLm1jPXRoaXMuSmI9dGhpcy5mYj1udWxsKX07YS5pYy5wcm90b3R5cGUubD1mdW5jdGlvbihiKXt0aGlzLkpiPWI7YS5hLksuemEoYix0aGlzLmZiPXRoaXMucy5iaW5kKHRoaXMpKX07XG5hLlQ9ZnVuY3Rpb24oKXthLmEuQWIodGhpcyxEKTtELnFiKHRoaXMpfTt2YXIgRD17cWI6ZnVuY3Rpb24oYSl7YS5VPXtjaGFuZ2U6W119O2Euc2M9MX0sc3Vic2NyaWJlOmZ1bmN0aW9uKGIsYyxkKXt2YXIgZT10aGlzO2Q9ZHx8XCJjaGFuZ2VcIjt2YXIgZj1uZXcgYS5pYyhlLGM/Yi5iaW5kKGMpOmIsZnVuY3Rpb24oKXthLmEuUGEoZS5VW2RdLGYpO2UuaGImJmUuaGIoZCl9KTtlLlFhJiZlLlFhKGQpO2UuVVtkXXx8KGUuVVtkXT1bXSk7ZS5VW2RdLnB1c2goZik7cmV0dXJuIGZ9LG5vdGlmeVN1YnNjcmliZXJzOmZ1bmN0aW9uKGIsYyl7Yz1jfHxcImNoYW5nZVwiO1wiY2hhbmdlXCI9PT1jJiZ0aGlzLkdiKCk7aWYodGhpcy5XYShjKSl7dmFyIGQ9XCJjaGFuZ2VcIj09PWMmJnRoaXMuZWR8fHRoaXMuVVtjXS5zbGljZSgwKTt0cnl7YS51LnhjKCk7Zm9yKHZhciBlPTAsZjtmPWRbZV07KytlKWYuSWJ8fGYubGMoYil9ZmluYWxseXthLnUuZW5kKCl9fX0sb2I6ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5zY30sXG5EZDpmdW5jdGlvbihhKXtyZXR1cm4gdGhpcy5vYigpIT09YX0sR2I6ZnVuY3Rpb24oKXsrK3RoaXMuc2N9LHViOmZ1bmN0aW9uKGIpe3ZhciBjPXRoaXMsZD1hLk8oYyksZSxmLGcsaCxtO2MuZ2J8fChjLmdiPWMubm90aWZ5U3Vic2NyaWJlcnMsYy5ub3RpZnlTdWJzY3JpYmVycz1aKTt2YXIgaz1iKGZ1bmN0aW9uKCl7Yy5KYT0hMTtkJiZoPT09YyYmKGg9Yy5uYz9jLm5jKCk6YygpKTt2YXIgYT1mfHxtJiZjLnNiKGcsaCk7bT1mPWU9ITE7YSYmYy5nYihnPWgpfSk7Yy5xYz1mdW5jdGlvbihhLGIpe2ImJmMuSmF8fChtPSFiKTtjLmVkPWMuVS5jaGFuZ2Uuc2xpY2UoMCk7Yy5KYT1lPSEwO2g9YTtrKCl9O2MucGM9ZnVuY3Rpb24oYSl7ZXx8KGc9YSxjLmdiKGEsXCJiZWZvcmVDaGFuZ2VcIikpfTtjLnJjPWZ1bmN0aW9uKCl7bT0hMH07Yy5nZD1mdW5jdGlvbigpe2Muc2IoZyxjLnYoITApKSYmKGY9ITApfX0sV2E6ZnVuY3Rpb24oYSl7cmV0dXJuIHRoaXMuVVthXSYmdGhpcy5VW2FdLmxlbmd0aH0sXG5CZDpmdW5jdGlvbihiKXtpZihiKXJldHVybiB0aGlzLlVbYl0mJnRoaXMuVVtiXS5sZW5ndGh8fDA7dmFyIGM9MDthLmEuUCh0aGlzLlUsZnVuY3Rpb24oYSxiKXtcImRpcnR5XCIhPT1hJiYoYys9Yi5sZW5ndGgpfSk7cmV0dXJuIGN9LHNiOmZ1bmN0aW9uKGEsYyl7cmV0dXJuIXRoaXMuZXF1YWxpdHlDb21wYXJlcnx8IXRoaXMuZXF1YWxpdHlDb21wYXJlcihhLGMpfSx0b1N0cmluZzpmdW5jdGlvbigpe3JldHVyblwiW29iamVjdCBPYmplY3RdXCJ9LGV4dGVuZDpmdW5jdGlvbihiKXt2YXIgYz10aGlzO2ImJmEuYS5QKGIsZnVuY3Rpb24oYixlKXt2YXIgZj1hLlRhW2JdO1wiZnVuY3Rpb25cIj09dHlwZW9mIGYmJihjPWYoYyxlKXx8Yyl9KTtyZXR1cm4gY319O2EuTChELFwiaW5pdFwiLEQucWIpO2EuTChELFwic3Vic2NyaWJlXCIsRC5zdWJzY3JpYmUpO2EuTChELFwiZXh0ZW5kXCIsRC5leHRlbmQpO2EuTChELFwiZ2V0U3Vic2NyaXB0aW9uc0NvdW50XCIsRC5CZCk7YS5hLkJhJiZhLmEuc2V0UHJvdG90eXBlT2YoRCxcbkZ1bmN0aW9uLnByb3RvdHlwZSk7YS5ULmZuPUQ7YS5RYz1mdW5jdGlvbihhKXtyZXR1cm4gbnVsbCE9YSYmXCJmdW5jdGlvblwiPT10eXBlb2YgYS5zdWJzY3JpYmUmJlwiZnVuY3Rpb25cIj09dHlwZW9mIGEubm90aWZ5U3Vic2NyaWJlcnN9O2EuYihcInN1YnNjcmliYWJsZVwiLGEuVCk7YS5iKFwiaXNTdWJzY3JpYmFibGVcIixhLlFjKTthLlM9YS51PWZ1bmN0aW9uKCl7ZnVuY3Rpb24gYihhKXtkLnB1c2goZSk7ZT1hfWZ1bmN0aW9uIGMoKXtlPWQucG9wKCl9dmFyIGQ9W10sZSxmPTA7cmV0dXJue3hjOmIsZW5kOmMsY2M6ZnVuY3Rpb24oYil7aWYoZSl7aWYoIWEuUWMoYikpdGhyb3cgRXJyb3IoXCJPbmx5IHN1YnNjcmliYWJsZSB0aGluZ3MgY2FuIGFjdCBhcyBkZXBlbmRlbmNpZXNcIik7ZS5vZC5jYWxsKGUucGQsYixiLmZkfHwoYi5mZD0rK2YpKX19LEc6ZnVuY3Rpb24oYSxkLGUpe3RyeXtyZXR1cm4gYigpLGEuYXBwbHkoZCxlfHxbXSl9ZmluYWxseXtjKCl9fSxxYTpmdW5jdGlvbigpe2lmKGUpcmV0dXJuIGUuby5xYSgpfSxcblZhOmZ1bmN0aW9uKCl7aWYoZSlyZXR1cm4gZS5vLlZhKCl9LFlhOmZ1bmN0aW9uKCl7aWYoZSlyZXR1cm4gZS5ZYX0sbzpmdW5jdGlvbigpe2lmKGUpcmV0dXJuIGUub319fSgpO2EuYihcImNvbXB1dGVkQ29udGV4dFwiLGEuUyk7YS5iKFwiY29tcHV0ZWRDb250ZXh0LmdldERlcGVuZGVuY2llc0NvdW50XCIsYS5TLnFhKTthLmIoXCJjb21wdXRlZENvbnRleHQuZ2V0RGVwZW5kZW5jaWVzXCIsYS5TLlZhKTthLmIoXCJjb21wdXRlZENvbnRleHQuaXNJbml0aWFsXCIsYS5TLllhKTthLmIoXCJjb21wdXRlZENvbnRleHQucmVnaXN0ZXJEZXBlbmRlbmN5XCIsYS5TLmNjKTthLmIoXCJpZ25vcmVEZXBlbmRlbmNpZXNcIixhLllkPWEudS5HKTt2YXIgST1hLmEuRGEoXCJfbGF0ZXN0VmFsdWVcIik7YS50YT1mdW5jdGlvbihiKXtmdW5jdGlvbiBjKCl7aWYoMDxhcmd1bWVudHMubGVuZ3RoKXJldHVybiBjLnNiKGNbSV0sYXJndW1lbnRzWzBdKSYmKGMueWEoKSxjW0ldPWFyZ3VtZW50c1swXSxjLnhhKCkpLHRoaXM7XG5hLnUuY2MoYyk7cmV0dXJuIGNbSV19Y1tJXT1iO2EuYS5CYXx8YS5hLmV4dGVuZChjLGEuVC5mbik7YS5ULmZuLnFiKGMpO2EuYS5BYihjLEYpO2Eub3B0aW9ucy5kZWZlclVwZGF0ZXMmJmEuVGEuZGVmZXJyZWQoYywhMCk7cmV0dXJuIGN9O3ZhciBGPXtlcXVhbGl0eUNvbXBhcmVyOkssdjpmdW5jdGlvbigpe3JldHVybiB0aGlzW0ldfSx4YTpmdW5jdGlvbigpe3RoaXMubm90aWZ5U3Vic2NyaWJlcnModGhpc1tJXSxcInNwZWN0YXRlXCIpO3RoaXMubm90aWZ5U3Vic2NyaWJlcnModGhpc1tJXSl9LHlhOmZ1bmN0aW9uKCl7dGhpcy5ub3RpZnlTdWJzY3JpYmVycyh0aGlzW0ldLFwiYmVmb3JlQ2hhbmdlXCIpfX07YS5hLkJhJiZhLmEuc2V0UHJvdG90eXBlT2YoRixhLlQuZm4pO3ZhciBHPWEudGEuTWE9XCJfX2tvX3Byb3RvX19cIjtGW0ddPWEudGE7YS5PPWZ1bmN0aW9uKGIpe2lmKChiPVwiZnVuY3Rpb25cIj09dHlwZW9mIGImJmJbR10pJiZiIT09RltHXSYmYiE9PWEuby5mbltHXSl0aHJvdyBFcnJvcihcIkludmFsaWQgb2JqZWN0IHRoYXQgbG9va3MgbGlrZSBhbiBvYnNlcnZhYmxlOyBwb3NzaWJseSBmcm9tIGFub3RoZXIgS25vY2tvdXQgaW5zdGFuY2VcIik7XG5yZXR1cm4hIWJ9O2EuWmE9ZnVuY3Rpb24oYil7cmV0dXJuXCJmdW5jdGlvblwiPT10eXBlb2YgYiYmKGJbR109PT1GW0ddfHxiW0ddPT09YS5vLmZuW0ddJiZiLk5jKX07YS5iKFwib2JzZXJ2YWJsZVwiLGEudGEpO2EuYihcImlzT2JzZXJ2YWJsZVwiLGEuTyk7YS5iKFwiaXNXcml0ZWFibGVPYnNlcnZhYmxlXCIsYS5aYSk7YS5iKFwiaXNXcml0YWJsZU9ic2VydmFibGVcIixhLlphKTthLmIoXCJvYnNlcnZhYmxlLmZuXCIsRik7YS5MKEYsXCJwZWVrXCIsRi52KTthLkwoRixcInZhbHVlSGFzTXV0YXRlZFwiLEYueGEpO2EuTChGLFwidmFsdWVXaWxsTXV0YXRlXCIsRi55YSk7YS5IYT1mdW5jdGlvbihiKXtiPWJ8fFtdO2lmKFwib2JqZWN0XCIhPXR5cGVvZiBifHwhKFwibGVuZ3RoXCJpbiBiKSl0aHJvdyBFcnJvcihcIlRoZSBhcmd1bWVudCBwYXNzZWQgd2hlbiBpbml0aWFsaXppbmcgYW4gb2JzZXJ2YWJsZSBhcnJheSBtdXN0IGJlIGFuIGFycmF5LCBvciBudWxsLCBvciB1bmRlZmluZWQuXCIpO2I9YS50YShiKTthLmEuQWIoYixcbmEuSGEuZm4pO3JldHVybiBiLmV4dGVuZCh7dHJhY2tBcnJheUNoYW5nZXM6ITB9KX07YS5IYS5mbj17cmVtb3ZlOmZ1bmN0aW9uKGIpe2Zvcih2YXIgYz10aGlzLnYoKSxkPVtdLGU9XCJmdW5jdGlvblwiIT10eXBlb2YgYnx8YS5PKGIpP2Z1bmN0aW9uKGEpe3JldHVybiBhPT09Yn06YixmPTA7ZjxjLmxlbmd0aDtmKyspe3ZhciBnPWNbZl07aWYoZShnKSl7MD09PWQubGVuZ3RoJiZ0aGlzLnlhKCk7aWYoY1tmXSE9PWcpdGhyb3cgRXJyb3IoXCJBcnJheSBtb2RpZmllZCBkdXJpbmcgcmVtb3ZlOyBjYW5ub3QgcmVtb3ZlIGl0ZW1cIik7ZC5wdXNoKGcpO2Muc3BsaWNlKGYsMSk7Zi0tfX1kLmxlbmd0aCYmdGhpcy54YSgpO3JldHVybiBkfSxyZW1vdmVBbGw6ZnVuY3Rpb24oYil7aWYoYj09PW4pe3ZhciBjPXRoaXMudigpLGQ9Yy5zbGljZSgwKTt0aGlzLnlhKCk7Yy5zcGxpY2UoMCxjLmxlbmd0aCk7dGhpcy54YSgpO3JldHVybiBkfXJldHVybiBiP3RoaXMucmVtb3ZlKGZ1bmN0aW9uKGMpe3JldHVybiAwPD1cbmEuYS5BKGIsYyl9KTpbXX0sZGVzdHJveTpmdW5jdGlvbihiKXt2YXIgYz10aGlzLnYoKSxkPVwiZnVuY3Rpb25cIiE9dHlwZW9mIGJ8fGEuTyhiKT9mdW5jdGlvbihhKXtyZXR1cm4gYT09PWJ9OmI7dGhpcy55YSgpO2Zvcih2YXIgZT1jLmxlbmd0aC0xOzA8PWU7ZS0tKXt2YXIgZj1jW2VdO2QoZikmJihmLl9kZXN0cm95PSEwKX10aGlzLnhhKCl9LGRlc3Ryb3lBbGw6ZnVuY3Rpb24oYil7cmV0dXJuIGI9PT1uP3RoaXMuZGVzdHJveShmdW5jdGlvbigpe3JldHVybiEwfSk6Yj90aGlzLmRlc3Ryb3koZnVuY3Rpb24oYyl7cmV0dXJuIDA8PWEuYS5BKGIsYyl9KTpbXX0saW5kZXhPZjpmdW5jdGlvbihiKXt2YXIgYz10aGlzKCk7cmV0dXJuIGEuYS5BKGMsYil9LHJlcGxhY2U6ZnVuY3Rpb24oYSxjKXt2YXIgZD10aGlzLmluZGV4T2YoYSk7MDw9ZCYmKHRoaXMueWEoKSx0aGlzLnYoKVtkXT1jLHRoaXMueGEoKSl9LHNvcnRlZDpmdW5jdGlvbihhKXt2YXIgYz10aGlzKCkuc2xpY2UoMCk7XG5yZXR1cm4gYT9jLnNvcnQoYSk6Yy5zb3J0KCl9LHJldmVyc2VkOmZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMoKS5zbGljZSgwKS5yZXZlcnNlKCl9fTthLmEuQmEmJmEuYS5zZXRQcm90b3R5cGVPZihhLkhhLmZuLGEudGEuZm4pO2EuYS5EKFwicG9wIHB1c2ggcmV2ZXJzZSBzaGlmdCBzb3J0IHNwbGljZSB1bnNoaWZ0XCIuc3BsaXQoXCIgXCIpLGZ1bmN0aW9uKGIpe2EuSGEuZm5bYl09ZnVuY3Rpb24oKXt2YXIgYT10aGlzLnYoKTt0aGlzLnlhKCk7dGhpcy56YyhhLGIsYXJndW1lbnRzKTt2YXIgZD1hW2JdLmFwcGx5KGEsYXJndW1lbnRzKTt0aGlzLnhhKCk7cmV0dXJuIGQ9PT1hP3RoaXM6ZH19KTthLmEuRChbXCJzbGljZVwiXSxmdW5jdGlvbihiKXthLkhhLmZuW2JdPWZ1bmN0aW9uKCl7dmFyIGE9dGhpcygpO3JldHVybiBhW2JdLmFwcGx5KGEsYXJndW1lbnRzKX19KTthLlBjPWZ1bmN0aW9uKGIpe3JldHVybiBhLk8oYikmJlwiZnVuY3Rpb25cIj09dHlwZW9mIGIucmVtb3ZlJiZcImZ1bmN0aW9uXCI9PVxudHlwZW9mIGIucHVzaH07YS5iKFwib2JzZXJ2YWJsZUFycmF5XCIsYS5IYSk7YS5iKFwiaXNPYnNlcnZhYmxlQXJyYXlcIixhLlBjKTthLlRhLnRyYWNrQXJyYXlDaGFuZ2VzPWZ1bmN0aW9uKGIsYyl7ZnVuY3Rpb24gZCgpe2Z1bmN0aW9uIGMoKXtpZihtKXt2YXIgZD1bXS5jb25jYXQoYi52KCl8fFtdKSxlO2lmKGIuV2EoXCJhcnJheUNoYW5nZVwiKSl7aWYoIWZ8fDE8bSlmPWEuYS5QYihrLGQsYi5PYik7ZT1mfWs9ZDtmPW51bGw7bT0wO2UmJmUubGVuZ3RoJiZiLm5vdGlmeVN1YnNjcmliZXJzKGUsXCJhcnJheUNoYW5nZVwiKX19ZT9jKCk6KGU9ITAsaD1iLnN1YnNjcmliZShmdW5jdGlvbigpeysrbX0sbnVsbCxcInNwZWN0YXRlXCIpLGs9W10uY29uY2F0KGIudigpfHxbXSksZj1udWxsLGc9Yi5zdWJzY3JpYmUoYykpfWIuT2I9e307YyYmXCJvYmplY3RcIj09dHlwZW9mIGMmJmEuYS5leHRlbmQoYi5PYixjKTtiLk9iLnNwYXJzZT0hMDtpZighYi56Yyl7dmFyIGU9ITEsZj1udWxsLGcsaCxtPTAsXG5rLGw9Yi5RYSxwPWIuaGI7Yi5RYT1mdW5jdGlvbihhKXtsJiZsLmNhbGwoYixhKTtcImFycmF5Q2hhbmdlXCI9PT1hJiZkKCl9O2IuaGI9ZnVuY3Rpb24oYSl7cCYmcC5jYWxsKGIsYSk7XCJhcnJheUNoYW5nZVwiIT09YXx8Yi5XYShcImFycmF5Q2hhbmdlXCIpfHwoZyYmZy5zKCksaCYmaC5zKCksaD1nPW51bGwsZT0hMSxrPW4pfTtiLnpjPWZ1bmN0aW9uKGIsYyxkKXtmdW5jdGlvbiBsKGEsYixjKXtyZXR1cm4ga1trLmxlbmd0aF09e3N0YXR1czphLHZhbHVlOmIsaW5kZXg6Y319aWYoZSYmIW0pe3ZhciBrPVtdLHA9Yi5sZW5ndGgsZz1kLmxlbmd0aCxoPTA7c3dpdGNoKGMpe2Nhc2UgXCJwdXNoXCI6aD1wO2Nhc2UgXCJ1bnNoaWZ0XCI6Zm9yKGM9MDtjPGc7YysrKWwoXCJhZGRlZFwiLGRbY10saCtjKTticmVhaztjYXNlIFwicG9wXCI6aD1wLTE7Y2FzZSBcInNoaWZ0XCI6cCYmbChcImRlbGV0ZWRcIixiW2hdLGgpO2JyZWFrO2Nhc2UgXCJzcGxpY2VcIjpjPU1hdGgubWluKE1hdGgubWF4KDAsMD5kWzBdP3ArZFswXTpcbmRbMF0pLHApO2Zvcih2YXIgcD0xPT09Zz9wOk1hdGgubWluKGMrKGRbMV18fDApLHApLGc9YytnLTIsaD1NYXRoLm1heChwLGcpLFU9W10sTD1bXSxuPTI7YzxoOysrYywrK24pYzxwJiZMLnB1c2gobChcImRlbGV0ZWRcIixiW2NdLGMpKSxjPGcmJlUucHVzaChsKFwiYWRkZWRcIixkW25dLGMpKTthLmEuS2MoTCxVKTticmVhaztkZWZhdWx0OnJldHVybn1mPWt9fX19O3ZhciByPWEuYS5EYShcIl9zdGF0ZVwiKTthLm89YS4kPWZ1bmN0aW9uKGIsYyxkKXtmdW5jdGlvbiBlKCl7aWYoMDxhcmd1bWVudHMubGVuZ3RoKXtpZihcImZ1bmN0aW9uXCI9PT10eXBlb2YgZilmLmFwcGx5KGcubmIsYXJndW1lbnRzKTtlbHNlIHRocm93IEVycm9yKFwiQ2Fubm90IHdyaXRlIGEgdmFsdWUgdG8gYSBrby5jb21wdXRlZCB1bmxlc3MgeW91IHNwZWNpZnkgYSAnd3JpdGUnIG9wdGlvbi4gSWYgeW91IHdpc2ggdG8gcmVhZCB0aGUgY3VycmVudCB2YWx1ZSwgZG9uJ3QgcGFzcyBhbnkgcGFyYW1ldGVycy5cIik7cmV0dXJuIHRoaXN9Zy5yYXx8XG5hLnUuY2MoZSk7KGcua2F8fGcuSiYmZS5YYSgpKSYmZS5oYSgpO3JldHVybiBnLlh9XCJvYmplY3RcIj09PXR5cGVvZiBiP2Q9YjooZD1kfHx7fSxiJiYoZC5yZWFkPWIpKTtpZihcImZ1bmN0aW9uXCIhPXR5cGVvZiBkLnJlYWQpdGhyb3cgRXJyb3IoXCJQYXNzIGEgZnVuY3Rpb24gdGhhdCByZXR1cm5zIHRoZSB2YWx1ZSBvZiB0aGUga28uY29tcHV0ZWRcIik7dmFyIGY9ZC53cml0ZSxnPXtYOm4sc2E6ITAsa2E6ITAscmI6ITEsamM6ITEscmE6ITEsd2I6ITEsSjohMSxXYzpkLnJlYWQsbmI6Y3x8ZC5vd25lcixsOmQuZGlzcG9zZVdoZW5Ob2RlSXNSZW1vdmVkfHxkLmx8fG51bGwsU2E6ZC5kaXNwb3NlV2hlbnx8ZC5TYSxSYjpudWxsLEk6e30sVjowLEljOm51bGx9O2Vbcl09ZztlLk5jPVwiZnVuY3Rpb25cIj09PXR5cGVvZiBmO2EuYS5CYXx8YS5hLmV4dGVuZChlLGEuVC5mbik7YS5ULmZuLnFiKGUpO2EuYS5BYihlLEMpO2QucHVyZT8oZy53Yj0hMCxnLko9ITAsYS5hLmV4dGVuZChlLGRhKSk6XG5kLmRlZmVyRXZhbHVhdGlvbiYmYS5hLmV4dGVuZChlLGVhKTthLm9wdGlvbnMuZGVmZXJVcGRhdGVzJiZhLlRhLmRlZmVycmVkKGUsITApO2cubCYmKGcuamM9ITAsZy5sLm5vZGVUeXBlfHwoZy5sPW51bGwpKTtnLkp8fGQuZGVmZXJFdmFsdWF0aW9ufHxlLmhhKCk7Zy5sJiZlLmphKCkmJmEuYS5LLnphKGcubCxnLlJiPWZ1bmN0aW9uKCl7ZS5zKCl9KTtyZXR1cm4gZX07dmFyIEM9e2VxdWFsaXR5Q29tcGFyZXI6SyxxYTpmdW5jdGlvbigpe3JldHVybiB0aGlzW3JdLlZ9LFZhOmZ1bmN0aW9uKCl7dmFyIGI9W107YS5hLlAodGhpc1tyXS5JLGZ1bmN0aW9uKGEsZCl7YltkLkthXT1kLmRhfSk7cmV0dXJuIGJ9LFZiOmZ1bmN0aW9uKGIpe2lmKCF0aGlzW3JdLlYpcmV0dXJuITE7dmFyIGM9dGhpcy5WYSgpO3JldHVybi0xIT09YS5hLkEoYyxiKT8hMDohIWEuYS5MYihjLGZ1bmN0aW9uKGEpe3JldHVybiBhLlZiJiZhLlZiKGIpfSl9LHVjOmZ1bmN0aW9uKGEsYyxkKXtpZih0aGlzW3JdLndiJiZcbmM9PT10aGlzKXRocm93IEVycm9yKFwiQSAncHVyZScgY29tcHV0ZWQgbXVzdCBub3QgYmUgY2FsbGVkIHJlY3Vyc2l2ZWx5XCIpO3RoaXNbcl0uSVthXT1kO2QuS2E9dGhpc1tyXS5WKys7ZC5MYT1jLm9iKCl9LFhhOmZ1bmN0aW9uKCl7dmFyIGEsYyxkPXRoaXNbcl0uSTtmb3IoYSBpbiBkKWlmKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChkLGEpJiYoYz1kW2FdLHRoaXMuSWEmJmMuZGEuSmF8fGMuZGEuRGQoYy5MYSkpKXJldHVybiEwfSxKZDpmdW5jdGlvbigpe3RoaXMuSWEmJiF0aGlzW3JdLnJiJiZ0aGlzLklhKCExKX0samE6ZnVuY3Rpb24oKXt2YXIgYT10aGlzW3JdO3JldHVybiBhLmthfHwwPGEuVn0sUmQ6ZnVuY3Rpb24oKXt0aGlzLkphP3RoaXNbcl0ua2EmJih0aGlzW3JdLnNhPSEwKTp0aGlzLkhjKCl9LCRjOmZ1bmN0aW9uKGEpe2lmKGEuSGIpe3ZhciBjPWEuc3Vic2NyaWJlKHRoaXMuSmQsdGhpcyxcImRpcnR5XCIpLGQ9YS5zdWJzY3JpYmUodGhpcy5SZCxcbnRoaXMpO3JldHVybntkYTphLHM6ZnVuY3Rpb24oKXtjLnMoKTtkLnMoKX19fXJldHVybiBhLnN1YnNjcmliZSh0aGlzLkhjLHRoaXMpfSxIYzpmdW5jdGlvbigpe3ZhciBiPXRoaXMsYz1iLnRocm90dGxlRXZhbHVhdGlvbjtjJiYwPD1jPyhjbGVhclRpbWVvdXQodGhpc1tyXS5JYyksdGhpc1tyXS5JYz1hLmEuc2V0VGltZW91dChmdW5jdGlvbigpe2IuaGEoITApfSxjKSk6Yi5JYT9iLklhKCEwKTpiLmhhKCEwKX0saGE6ZnVuY3Rpb24oYil7dmFyIGM9dGhpc1tyXSxkPWMuU2EsZT0hMTtpZighYy5yYiYmIWMucmEpe2lmKGMubCYmIWEuYS5TYihjLmwpfHxkJiZkKCkpe2lmKCFjLmpjKXt0aGlzLnMoKTtyZXR1cm59fWVsc2UgYy5qYz0hMTtjLnJiPSEwO3RyeXtlPXRoaXMuemQoYil9ZmluYWxseXtjLnJiPSExfXJldHVybiBlfX0semQ6ZnVuY3Rpb24oYil7dmFyIGM9dGhpc1tyXSxkPSExLGU9Yy53Yj9uOiFjLlYsZD17cWQ6dGhpcyxtYjpjLkksUWI6Yy5WfTthLnUueGMoe3BkOmQsXG5vZDpiYSxvOnRoaXMsWWE6ZX0pO2MuST17fTtjLlY9MDt2YXIgZj10aGlzLnlkKGMsZCk7Yy5WP2Q9dGhpcy5zYihjLlgsZik6KHRoaXMucygpLGQ9ITApO2QmJihjLko/dGhpcy5HYigpOnRoaXMubm90aWZ5U3Vic2NyaWJlcnMoYy5YLFwiYmVmb3JlQ2hhbmdlXCIpLGMuWD1mLHRoaXMubm90aWZ5U3Vic2NyaWJlcnMoYy5YLFwic3BlY3RhdGVcIiksIWMuSiYmYiYmdGhpcy5ub3RpZnlTdWJzY3JpYmVycyhjLlgpLHRoaXMucmMmJnRoaXMucmMoKSk7ZSYmdGhpcy5ub3RpZnlTdWJzY3JpYmVycyhjLlgsXCJhd2FrZVwiKTtyZXR1cm4gZH0seWQ6ZnVuY3Rpb24oYixjKXt0cnl7dmFyIGQ9Yi5XYztyZXR1cm4gYi5uYj9kLmNhbGwoYi5uYik6ZCgpfWZpbmFsbHl7YS51LmVuZCgpLGMuUWImJiFiLkomJmEuYS5QKGMubWIsYWEpLGIuc2E9Yi5rYT0hMX19LHY6ZnVuY3Rpb24oYSl7dmFyIGM9dGhpc1tyXTsoYy5rYSYmKGF8fCFjLlYpfHxjLkomJnRoaXMuWGEoKSkmJnRoaXMuaGEoKTtyZXR1cm4gYy5YfSxcbnViOmZ1bmN0aW9uKGIpe2EuVC5mbi51Yi5jYWxsKHRoaXMsYik7dGhpcy5uYz1mdW5jdGlvbigpe3RoaXNbcl0uSnx8KHRoaXNbcl0uc2E/dGhpcy5oYSgpOnRoaXNbcl0ua2E9ITEpO3JldHVybiB0aGlzW3JdLlh9O3RoaXMuSWE9ZnVuY3Rpb24oYSl7dGhpcy5wYyh0aGlzW3JdLlgpO3RoaXNbcl0ua2E9ITA7YSYmKHRoaXNbcl0uc2E9ITApO3RoaXMucWModGhpcywhYSl9fSxzOmZ1bmN0aW9uKCl7dmFyIGI9dGhpc1tyXTshYi5KJiZiLkkmJmEuYS5QKGIuSSxmdW5jdGlvbihhLGIpe2IucyYmYi5zKCl9KTtiLmwmJmIuUmImJmEuYS5LLnliKGIubCxiLlJiKTtiLkk9bjtiLlY9MDtiLnJhPSEwO2Iuc2E9ITE7Yi5rYT0hMTtiLko9ITE7Yi5sPW47Yi5TYT1uO2IuV2M9bjt0aGlzLk5jfHwoYi5uYj1uKX19LGRhPXtRYTpmdW5jdGlvbihiKXt2YXIgYz10aGlzLGQ9Y1tyXTtpZighZC5yYSYmZC5KJiZcImNoYW5nZVwiPT1iKXtkLko9ITE7aWYoZC5zYXx8Yy5YYSgpKWQuST1udWxsLGQuVj1cbjAsYy5oYSgpJiZjLkdiKCk7ZWxzZXt2YXIgZT1bXTthLmEuUChkLkksZnVuY3Rpb24oYSxiKXtlW2IuS2FdPWF9KTthLmEuRChlLGZ1bmN0aW9uKGEsYil7dmFyIGU9ZC5JW2FdLG09Yy4kYyhlLmRhKTttLkthPWI7bS5MYT1lLkxhO2QuSVthXT1tfSk7Yy5YYSgpJiZjLmhhKCkmJmMuR2IoKX1kLnJhfHxjLm5vdGlmeVN1YnNjcmliZXJzKGQuWCxcImF3YWtlXCIpfX0saGI6ZnVuY3Rpb24oYil7dmFyIGM9dGhpc1tyXTtjLnJhfHxcImNoYW5nZVwiIT1ifHx0aGlzLldhKFwiY2hhbmdlXCIpfHwoYS5hLlAoYy5JLGZ1bmN0aW9uKGEsYil7Yi5zJiYoYy5JW2FdPXtkYTpiLmRhLEthOmIuS2EsTGE6Yi5MYX0sYi5zKCkpfSksYy5KPSEwLHRoaXMubm90aWZ5U3Vic2NyaWJlcnMobixcImFzbGVlcFwiKSl9LG9iOmZ1bmN0aW9uKCl7dmFyIGI9dGhpc1tyXTtiLkomJihiLnNhfHx0aGlzLlhhKCkpJiZ0aGlzLmhhKCk7cmV0dXJuIGEuVC5mbi5vYi5jYWxsKHRoaXMpfX0sZWE9e1FhOmZ1bmN0aW9uKGEpe1wiY2hhbmdlXCIhPVxuYSYmXCJiZWZvcmVDaGFuZ2VcIiE9YXx8dGhpcy52KCl9fTthLmEuQmEmJmEuYS5zZXRQcm90b3R5cGVPZihDLGEuVC5mbik7dmFyIE49YS50YS5NYTtDW05dPWEubzthLk9jPWZ1bmN0aW9uKGEpe3JldHVyblwiZnVuY3Rpb25cIj09dHlwZW9mIGEmJmFbTl09PT1DW05dfTthLkZkPWZ1bmN0aW9uKGIpe3JldHVybiBhLk9jKGIpJiZiW3JdJiZiW3JdLndifTthLmIoXCJjb21wdXRlZFwiLGEubyk7YS5iKFwiZGVwZW5kZW50T2JzZXJ2YWJsZVwiLGEubyk7YS5iKFwiaXNDb21wdXRlZFwiLGEuT2MpO2EuYihcImlzUHVyZUNvbXB1dGVkXCIsYS5GZCk7YS5iKFwiY29tcHV0ZWQuZm5cIixDKTthLkwoQyxcInBlZWtcIixDLnYpO2EuTChDLFwiZGlzcG9zZVwiLEMucyk7YS5MKEMsXCJpc0FjdGl2ZVwiLEMuamEpO2EuTChDLFwiZ2V0RGVwZW5kZW5jaWVzQ291bnRcIixDLnFhKTthLkwoQyxcImdldERlcGVuZGVuY2llc1wiLEMuVmEpO2EueGI9ZnVuY3Rpb24oYixjKXtpZihcImZ1bmN0aW9uXCI9PT10eXBlb2YgYilyZXR1cm4gYS5vKGIsXG5jLHtwdXJlOiEwfSk7Yj1hLmEuZXh0ZW5kKHt9LGIpO2IucHVyZT0hMDtyZXR1cm4gYS5vKGIsYyl9O2EuYihcInB1cmVDb21wdXRlZFwiLGEueGIpOyhmdW5jdGlvbigpe2Z1bmN0aW9uIGIoYSxmLGcpe2c9Z3x8bmV3IGQ7YT1mKGEpO2lmKFwib2JqZWN0XCIhPXR5cGVvZiBhfHxudWxsPT09YXx8YT09PW58fGEgaW5zdGFuY2VvZiBSZWdFeHB8fGEgaW5zdGFuY2VvZiBEYXRlfHxhIGluc3RhbmNlb2YgU3RyaW5nfHxhIGluc3RhbmNlb2YgTnVtYmVyfHxhIGluc3RhbmNlb2YgQm9vbGVhbilyZXR1cm4gYTt2YXIgaD1hIGluc3RhbmNlb2YgQXJyYXk/W106e307Zy5zYXZlKGEsaCk7YyhhLGZ1bmN0aW9uKGMpe3ZhciBkPWYoYVtjXSk7c3dpdGNoKHR5cGVvZiBkKXtjYXNlIFwiYm9vbGVhblwiOmNhc2UgXCJudW1iZXJcIjpjYXNlIFwic3RyaW5nXCI6Y2FzZSBcImZ1bmN0aW9uXCI6aFtjXT1kO2JyZWFrO2Nhc2UgXCJvYmplY3RcIjpjYXNlIFwidW5kZWZpbmVkXCI6dmFyIGw9Zy5nZXQoZCk7aFtjXT1sIT09XG5uP2w6YihkLGYsZyl9fSk7cmV0dXJuIGh9ZnVuY3Rpb24gYyhhLGIpe2lmKGEgaW5zdGFuY2VvZiBBcnJheSl7Zm9yKHZhciBjPTA7YzxhLmxlbmd0aDtjKyspYihjKTtcImZ1bmN0aW9uXCI9PXR5cGVvZiBhLnRvSlNPTiYmYihcInRvSlNPTlwiKX1lbHNlIGZvcihjIGluIGEpYihjKX1mdW5jdGlvbiBkKCl7dGhpcy5rZXlzPVtdO3RoaXMudmFsdWVzPVtdfWEuYWQ9ZnVuY3Rpb24oYyl7aWYoMD09YXJndW1lbnRzLmxlbmd0aCl0aHJvdyBFcnJvcihcIldoZW4gY2FsbGluZyBrby50b0pTLCBwYXNzIHRoZSBvYmplY3QgeW91IHdhbnQgdG8gY29udmVydC5cIik7cmV0dXJuIGIoYyxmdW5jdGlvbihiKXtmb3IodmFyIGM9MDthLk8oYikmJjEwPmM7YysrKWI9YigpO3JldHVybiBifSl9O2EudG9KU09OPWZ1bmN0aW9uKGIsYyxkKXtiPWEuYWQoYik7cmV0dXJuIGEuYS5oYyhiLGMsZCl9O2QucHJvdG90eXBlPXtjb25zdHJ1Y3RvcjpkLHNhdmU6ZnVuY3Rpb24oYixjKXt2YXIgZD1hLmEuQSh0aGlzLmtleXMsXG5iKTswPD1kP3RoaXMudmFsdWVzW2RdPWM6KHRoaXMua2V5cy5wdXNoKGIpLHRoaXMudmFsdWVzLnB1c2goYykpfSxnZXQ6ZnVuY3Rpb24oYil7Yj1hLmEuQSh0aGlzLmtleXMsYik7cmV0dXJuIDA8PWI/dGhpcy52YWx1ZXNbYl06bn19fSkoKTthLmIoXCJ0b0pTXCIsYS5hZCk7YS5iKFwidG9KU09OXCIsYS50b0pTT04pO2EuV2Q9ZnVuY3Rpb24oYixjLGQpe2Z1bmN0aW9uIGUoYyl7dmFyIGU9YS54YihiLGQpLmV4dGVuZCh7bWE6XCJhbHdheXNcIn0pLGg9ZS5zdWJzY3JpYmUoZnVuY3Rpb24oYSl7YSYmKGgucygpLGMoYSkpfSk7ZS5ub3RpZnlTdWJzY3JpYmVycyhlLnYoKSk7cmV0dXJuIGh9cmV0dXJuXCJmdW5jdGlvblwiIT09dHlwZW9mIFByb21pc2V8fGM/ZShjLmJpbmQoZCkpOm5ldyBQcm9taXNlKGUpfTthLmIoXCJ3aGVuXCIsYS5XZCk7KGZ1bmN0aW9uKCl7YS53PXtNOmZ1bmN0aW9uKGIpe3N3aXRjaChhLmEuUihiKSl7Y2FzZSBcIm9wdGlvblwiOnJldHVybiEwPT09Yi5fX2tvX19oYXNEb21EYXRhT3B0aW9uVmFsdWVfXz9cbmEuYS5nLmdldChiLGEuYy5vcHRpb25zLiRiKTo3Pj1hLmEuVz9iLmdldEF0dHJpYnV0ZU5vZGUoXCJ2YWx1ZVwiKSYmYi5nZXRBdHRyaWJ1dGVOb2RlKFwidmFsdWVcIikuc3BlY2lmaWVkP2IudmFsdWU6Yi50ZXh0OmIudmFsdWU7Y2FzZSBcInNlbGVjdFwiOnJldHVybiAwPD1iLnNlbGVjdGVkSW5kZXg/YS53Lk0oYi5vcHRpb25zW2Iuc2VsZWN0ZWRJbmRleF0pOm47ZGVmYXVsdDpyZXR1cm4gYi52YWx1ZX19LGNiOmZ1bmN0aW9uKGIsYyxkKXtzd2l0Y2goYS5hLlIoYikpe2Nhc2UgXCJvcHRpb25cIjpcInN0cmluZ1wiPT09dHlwZW9mIGM/KGEuYS5nLnNldChiLGEuYy5vcHRpb25zLiRiLG4pLFwiX19rb19faGFzRG9tRGF0YU9wdGlvblZhbHVlX19cImluIGImJmRlbGV0ZSBiLl9fa29fX2hhc0RvbURhdGFPcHRpb25WYWx1ZV9fLGIudmFsdWU9Yyk6KGEuYS5nLnNldChiLGEuYy5vcHRpb25zLiRiLGMpLGIuX19rb19faGFzRG9tRGF0YU9wdGlvblZhbHVlX189ITAsYi52YWx1ZT1cIm51bWJlclwiPT09XG50eXBlb2YgYz9jOlwiXCIpO2JyZWFrO2Nhc2UgXCJzZWxlY3RcIjppZihcIlwiPT09Y3x8bnVsbD09PWMpYz1uO2Zvcih2YXIgZT0tMSxmPTAsZz1iLm9wdGlvbnMubGVuZ3RoLGg7ZjxnOysrZilpZihoPWEudy5NKGIub3B0aW9uc1tmXSksaD09Y3x8XCJcIj09PWgmJmM9PT1uKXtlPWY7YnJlYWt9aWYoZHx8MDw9ZXx8Yz09PW4mJjE8Yi5zaXplKWIuc2VsZWN0ZWRJbmRleD1lLDY9PT1hLmEuVyYmYS5hLnNldFRpbWVvdXQoZnVuY3Rpb24oKXtiLnNlbGVjdGVkSW5kZXg9ZX0sMCk7YnJlYWs7ZGVmYXVsdDppZihudWxsPT09Y3x8Yz09PW4pYz1cIlwiO2IudmFsdWU9Y319fX0pKCk7YS5iKFwic2VsZWN0RXh0ZW5zaW9uc1wiLGEudyk7YS5iKFwic2VsZWN0RXh0ZW5zaW9ucy5yZWFkVmFsdWVcIixhLncuTSk7YS5iKFwic2VsZWN0RXh0ZW5zaW9ucy53cml0ZVZhbHVlXCIsYS53LmNiKTthLm09ZnVuY3Rpb24oKXtmdW5jdGlvbiBiKGIpe2I9YS5hLkRiKGIpOzEyMz09PWIuY2hhckNvZGVBdCgwKSYmKGI9Yi5zbGljZSgxLFxuLTEpKTtiKz1cIlxcbixcIjt2YXIgYz1bXSxkPWIubWF0Y2goZSkscCxxPVtdLGg9MDtpZigxPGQubGVuZ3RoKXtmb3IodmFyIHg9MCxCO0I9ZFt4XTsrK3gpe3ZhciB1PUIuY2hhckNvZGVBdCgwKTtpZig0ND09PXUpe2lmKDA+PWgpe2MucHVzaChwJiZxLmxlbmd0aD97a2V5OnAsdmFsdWU6cS5qb2luKFwiXCIpfTp7dW5rbm93bjpwfHxxLmpvaW4oXCJcIil9KTtwPWg9MDtxPVtdO2NvbnRpbnVlfX1lbHNlIGlmKDU4PT09dSl7aWYoIWgmJiFwJiYxPT09cS5sZW5ndGgpe3A9cS5wb3AoKTtjb250aW51ZX19ZWxzZSBpZig0Nz09PXUmJjE8Qi5sZW5ndGgmJig0Nz09PUIuY2hhckNvZGVBdCgxKXx8NDI9PT1CLmNoYXJDb2RlQXQoMSkpKWNvbnRpbnVlO2Vsc2UgNDc9PT11JiZ4JiYxPEIubGVuZ3RoPyh1PWRbeC0xXS5tYXRjaChmKSkmJiFnW3VbMF1dJiYoYj1iLnN1YnN0cihiLmluZGV4T2YoQikrMSksZD1iLm1hdGNoKGUpLHg9LTEsQj1cIi9cIik6NDA9PT11fHwxMjM9PT11fHw5MT09PXU/KytoOlxuNDE9PT11fHwxMjU9PT11fHw5Mz09PXU/LS1oOnB8fHEubGVuZ3RofHwzNCE9PXUmJjM5IT09dXx8KEI9Qi5zbGljZSgxLC0xKSk7cS5wdXNoKEIpfWlmKDA8aCl0aHJvdyBFcnJvcihcIlVuYmFsYW5jZWQgcGFyZW50aGVzZXMsIGJyYWNlcywgb3IgYnJhY2tldHNcIik7fXJldHVybiBjfXZhciBjPVtcInRydWVcIixcImZhbHNlXCIsXCJudWxsXCIsXCJ1bmRlZmluZWRcIl0sZD0vXig/OlskX2Etel1bJFxcd10qfCguKykoXFwuXFxzKlskX2Etel1bJFxcd10qfFxcWy4rXFxdKSkkL2ksZT1SZWdFeHAoXCJcXFwiKD86XFxcXFxcXFwufFteXFxcIl0pKlxcXCJ8Jyg/OlxcXFxcXFxcLnxbXiddKSonfGAoPzpcXFxcXFxcXC58W15gXSkqYHwvXFxcXCooPzpbXipdfFxcXFwqK1teKi9dKSpcXFxcKisvfC8vLipcXG58Lyg/OlxcXFxcXFxcLnxbXi9dKSsvdyp8W15cXFxcczosL11bXixcXFwiJ2B7fSgpLzpbXFxcXF1dKlteXFxcXHMsXFxcIidge30oKS86W1xcXFxdXXxbXlxcXFxzXVwiLFwiZ1wiKSxmPS9bXFxdKVwiJ0EtWmEtejAtOV8kXSskLyxnPXtcImluXCI6MSxcInJldHVyblwiOjEsXCJ0eXBlb2ZcIjoxfSxcbmg9e307cmV0dXJue1JhOltdLHdhOmgsYWM6Yix2YjpmdW5jdGlvbihlLGYpe2Z1bmN0aW9uIGwoYixlKXt2YXIgZjtpZigheCl7dmFyIGs9YS5nZXRCaW5kaW5nSGFuZGxlcihiKTtpZihrJiZrLnByZXByb2Nlc3MmJiEoZT1rLnByZXByb2Nlc3MoZSxiLGwpKSlyZXR1cm47aWYoaz1oW2JdKWY9ZSwwPD1hLmEuQShjLGYpP2Y9ITE6KGs9Zi5tYXRjaChkKSxmPW51bGw9PT1rPyExOmtbMV0/XCJPYmplY3QoXCIra1sxXStcIilcIitrWzJdOmYpLGs9ZjtrJiZxLnB1c2goXCInXCIrKFwic3RyaW5nXCI9PXR5cGVvZiBoW2JdP2hbYl06YikrXCInOmZ1bmN0aW9uKF96KXtcIitmK1wiPV96fVwiKX1nJiYoZT1cImZ1bmN0aW9uKCl7cmV0dXJuIFwiK2UrXCIgfVwiKTtwLnB1c2goXCInXCIrYitcIic6XCIrZSl9Zj1mfHx7fTt2YXIgcD1bXSxxPVtdLGc9Zi52YWx1ZUFjY2Vzc29ycyx4PWYuYmluZGluZ1BhcmFtcyxCPVwic3RyaW5nXCI9PT10eXBlb2YgZT9iKGUpOmU7YS5hLkQoQixmdW5jdGlvbihhKXtsKGEua2V5fHxhLnVua25vd24sXG5hLnZhbHVlKX0pO3EubGVuZ3RoJiZsKFwiX2tvX3Byb3BlcnR5X3dyaXRlcnNcIixcIntcIitxLmpvaW4oXCIsXCIpK1wiIH1cIik7cmV0dXJuIHAuam9pbihcIixcIil9LElkOmZ1bmN0aW9uKGEsYil7Zm9yKHZhciBjPTA7YzxhLmxlbmd0aDtjKyspaWYoYVtjXS5rZXk9PWIpcmV0dXJuITA7cmV0dXJuITF9LGViOmZ1bmN0aW9uKGIsYyxkLGUsZil7aWYoYiYmYS5PKGIpKSFhLlphKGIpfHxmJiZiLnYoKT09PWV8fGIoZSk7ZWxzZSBpZigoYj1jLmdldChcIl9rb19wcm9wZXJ0eV93cml0ZXJzXCIpKSYmYltkXSliW2RdKGUpfX19KCk7YS5iKFwiZXhwcmVzc2lvblJld3JpdGluZ1wiLGEubSk7YS5iKFwiZXhwcmVzc2lvblJld3JpdGluZy5iaW5kaW5nUmV3cml0ZVZhbGlkYXRvcnNcIixhLm0uUmEpO2EuYihcImV4cHJlc3Npb25SZXdyaXRpbmcucGFyc2VPYmplY3RMaXRlcmFsXCIsYS5tLmFjKTthLmIoXCJleHByZXNzaW9uUmV3cml0aW5nLnByZVByb2Nlc3NCaW5kaW5nc1wiLGEubS52Yik7YS5iKFwiZXhwcmVzc2lvblJld3JpdGluZy5fdHdvV2F5QmluZGluZ3NcIixcbmEubS53YSk7YS5iKFwianNvbkV4cHJlc3Npb25SZXdyaXRpbmdcIixhLm0pO2EuYihcImpzb25FeHByZXNzaW9uUmV3cml0aW5nLmluc2VydFByb3BlcnR5QWNjZXNzb3JzSW50b0pzb25cIixhLm0udmIpOyhmdW5jdGlvbigpe2Z1bmN0aW9uIGIoYSl7cmV0dXJuIDg9PWEubm9kZVR5cGUmJmcudGVzdChmP2EudGV4dDphLm5vZGVWYWx1ZSl9ZnVuY3Rpb24gYyhhKXtyZXR1cm4gOD09YS5ub2RlVHlwZSYmaC50ZXN0KGY/YS50ZXh0OmEubm9kZVZhbHVlKX1mdW5jdGlvbiBkKGQsZSl7Zm9yKHZhciBmPWQsaD0xLGc9W107Zj1mLm5leHRTaWJsaW5nOyl7aWYoYyhmKSYmKGEuYS5nLnNldChmLGssITApLGgtLSwwPT09aCkpcmV0dXJuIGc7Zy5wdXNoKGYpO2IoZikmJmgrK31pZighZSl0aHJvdyBFcnJvcihcIkNhbm5vdCBmaW5kIGNsb3NpbmcgY29tbWVudCB0YWcgdG8gbWF0Y2g6IFwiK2Qubm9kZVZhbHVlKTtyZXR1cm4gbnVsbH1mdW5jdGlvbiBlKGEsYil7dmFyIGM9ZChhLGIpO3JldHVybiBjP1xuMDxjLmxlbmd0aD9jW2MubGVuZ3RoLTFdLm5leHRTaWJsaW5nOmEubmV4dFNpYmxpbmc6bnVsbH12YXIgZj13JiZcIlxceDNjIS0tdGVzdC0tXFx4M2VcIj09PXcuY3JlYXRlQ29tbWVudChcInRlc3RcIikudGV4dCxnPWY/L15cXHgzYyEtLVxccyprbyg/OlxccysoW1xcc1xcU10rKSk/XFxzKi0tXFx4M2UkLzovXlxccyprbyg/OlxccysoW1xcc1xcU10rKSk/XFxzKiQvLGg9Zj8vXlxceDNjIS0tXFxzKlxcL2tvXFxzKi0tXFx4M2UkLzovXlxccypcXC9rb1xccyokLyxtPXt1bDohMCxvbDohMH0saz1cIl9fa29fbWF0Y2hlZEVuZENvbW1lbnRfX1wiO2EuaD17ZWE6e30sY2hpbGROb2RlczpmdW5jdGlvbihhKXtyZXR1cm4gYihhKT9kKGEpOmEuY2hpbGROb2Rlc30sRWE6ZnVuY3Rpb24oYyl7aWYoYihjKSl7Yz1hLmguY2hpbGROb2RlcyhjKTtmb3IodmFyIGQ9MCxlPWMubGVuZ3RoO2Q8ZTtkKyspYS5yZW1vdmVOb2RlKGNbZF0pfWVsc2UgYS5hLlRiKGMpfSx2YTpmdW5jdGlvbihjLGQpe2lmKGIoYykpe2EuaC5FYShjKTtmb3IodmFyIGU9XG5jLm5leHRTaWJsaW5nLGY9MCxrPWQubGVuZ3RoO2Y8aztmKyspZS5wYXJlbnROb2RlLmluc2VydEJlZm9yZShkW2ZdLGUpfWVsc2UgYS5hLnZhKGMsZCl9LFZjOmZ1bmN0aW9uKGEsYyl7dmFyIGQ7YihhKT8oZD1hLm5leHRTaWJsaW5nLGE9YS5wYXJlbnROb2RlKTpkPWEuZmlyc3RDaGlsZDtkP2MhPT1kJiZhLmluc2VydEJlZm9yZShjLGQpOmEuYXBwZW5kQ2hpbGQoYyl9LFdiOmZ1bmN0aW9uKGMsZCxlKXtlPyhlPWUubmV4dFNpYmxpbmcsYihjKSYmKGM9Yy5wYXJlbnROb2RlKSxlP2QhPT1lJiZjLmluc2VydEJlZm9yZShkLGUpOmMuYXBwZW5kQ2hpbGQoZCkpOmEuaC5WYyhjLGQpfSxmaXJzdENoaWxkOmZ1bmN0aW9uKGEpe2lmKGIoYSkpcmV0dXJuIWEubmV4dFNpYmxpbmd8fGMoYS5uZXh0U2libGluZyk/bnVsbDphLm5leHRTaWJsaW5nO2lmKGEuZmlyc3RDaGlsZCYmYyhhLmZpcnN0Q2hpbGQpKXRocm93IEVycm9yKFwiRm91bmQgaW52YWxpZCBlbmQgY29tbWVudCwgYXMgdGhlIGZpcnN0IGNoaWxkIG9mIFwiK1xuYSk7cmV0dXJuIGEuZmlyc3RDaGlsZH0sbmV4dFNpYmxpbmc6ZnVuY3Rpb24oZCl7YihkKSYmKGQ9ZShkKSk7aWYoZC5uZXh0U2libGluZyYmYyhkLm5leHRTaWJsaW5nKSl7dmFyIGY9ZC5uZXh0U2libGluZztpZihjKGYpJiYhYS5hLmcuZ2V0KGYsaykpdGhyb3cgRXJyb3IoXCJGb3VuZCBlbmQgY29tbWVudCB3aXRob3V0IGEgbWF0Y2hpbmcgb3BlbmluZyBjb21tZW50LCBhcyBjaGlsZCBvZiBcIitkKTtyZXR1cm4gbnVsbH1yZXR1cm4gZC5uZXh0U2libGluZ30sQ2Q6YixWZDpmdW5jdGlvbihhKXtyZXR1cm4oYT0oZj9hLnRleHQ6YS5ub2RlVmFsdWUpLm1hdGNoKGcpKT9hWzFdOm51bGx9LFNjOmZ1bmN0aW9uKGQpe2lmKG1bYS5hLlIoZCldKXt2YXIgZj1kLmZpcnN0Q2hpbGQ7aWYoZil7ZG8gaWYoMT09PWYubm9kZVR5cGUpe3ZhciBrO2s9Zi5maXJzdENoaWxkO3ZhciBoPW51bGw7aWYoayl7ZG8gaWYoaCloLnB1c2goayk7ZWxzZSBpZihiKGspKXt2YXIgZz1lKGssITApO2c/az1cbmc6aD1ba119ZWxzZSBjKGspJiYoaD1ba10pO3doaWxlKGs9ay5uZXh0U2libGluZyl9aWYoaz1oKWZvcihoPWYubmV4dFNpYmxpbmcsZz0wO2c8ay5sZW5ndGg7ZysrKWg/ZC5pbnNlcnRCZWZvcmUoa1tnXSxoKTpkLmFwcGVuZENoaWxkKGtbZ10pfXdoaWxlKGY9Zi5uZXh0U2libGluZyl9fX19fSkoKTthLmIoXCJ2aXJ0dWFsRWxlbWVudHNcIixhLmgpO2EuYihcInZpcnR1YWxFbGVtZW50cy5hbGxvd2VkQmluZGluZ3NcIixhLmguZWEpO2EuYihcInZpcnR1YWxFbGVtZW50cy5lbXB0eU5vZGVcIixhLmguRWEpO2EuYihcInZpcnR1YWxFbGVtZW50cy5pbnNlcnRBZnRlclwiLGEuaC5XYik7YS5iKFwidmlydHVhbEVsZW1lbnRzLnByZXBlbmRcIixhLmguVmMpO2EuYihcInZpcnR1YWxFbGVtZW50cy5zZXREb21Ob2RlQ2hpbGRyZW5cIixhLmgudmEpOyhmdW5jdGlvbigpe2EuZ2E9ZnVuY3Rpb24oKXt0aGlzLm5kPXt9fTthLmEuZXh0ZW5kKGEuZ2EucHJvdG90eXBlLHtub2RlSGFzQmluZGluZ3M6ZnVuY3Rpb24oYil7c3dpdGNoKGIubm9kZVR5cGUpe2Nhc2UgMTpyZXR1cm4gbnVsbCE9XG5iLmdldEF0dHJpYnV0ZShcImRhdGEtYmluZFwiKXx8YS5qLmdldENvbXBvbmVudE5hbWVGb3JOb2RlKGIpO2Nhc2UgODpyZXR1cm4gYS5oLkNkKGIpO2RlZmF1bHQ6cmV0dXJuITF9fSxnZXRCaW5kaW5nczpmdW5jdGlvbihiLGMpe3ZhciBkPXRoaXMuZ2V0QmluZGluZ3NTdHJpbmcoYixjKSxkPWQ/dGhpcy5wYXJzZUJpbmRpbmdzU3RyaW5nKGQsYyxiKTpudWxsO3JldHVybiBhLmoudGMoZCxiLGMsITEpfSxnZXRCaW5kaW5nQWNjZXNzb3JzOmZ1bmN0aW9uKGIsYyl7dmFyIGQ9dGhpcy5nZXRCaW5kaW5nc1N0cmluZyhiLGMpLGQ9ZD90aGlzLnBhcnNlQmluZGluZ3NTdHJpbmcoZCxjLGIse3ZhbHVlQWNjZXNzb3JzOiEwfSk6bnVsbDtyZXR1cm4gYS5qLnRjKGQsYixjLCEwKX0sZ2V0QmluZGluZ3NTdHJpbmc6ZnVuY3Rpb24oYil7c3dpdGNoKGIubm9kZVR5cGUpe2Nhc2UgMTpyZXR1cm4gYi5nZXRBdHRyaWJ1dGUoXCJkYXRhLWJpbmRcIik7Y2FzZSA4OnJldHVybiBhLmguVmQoYik7ZGVmYXVsdDpyZXR1cm4gbnVsbH19LFxucGFyc2VCaW5kaW5nc1N0cmluZzpmdW5jdGlvbihiLGMsZCxlKXt0cnl7dmFyIGY9dGhpcy5uZCxnPWIrKGUmJmUudmFsdWVBY2Nlc3NvcnN8fFwiXCIpLGg7aWYoIShoPWZbZ10pKXt2YXIgbSxrPVwid2l0aCgkY29udGV4dCl7d2l0aCgkZGF0YXx8e30pe3JldHVybntcIithLm0udmIoYixlKStcIn19fVwiO209bmV3IEZ1bmN0aW9uKFwiJGNvbnRleHRcIixcIiRlbGVtZW50XCIsayk7aD1mW2ddPW19cmV0dXJuIGgoYyxkKX1jYXRjaChsKXt0aHJvdyBsLm1lc3NhZ2U9XCJVbmFibGUgdG8gcGFyc2UgYmluZGluZ3MuXFxuQmluZGluZ3MgdmFsdWU6IFwiK2IrXCJcXG5NZXNzYWdlOiBcIitsLm1lc3NhZ2UsbDt9fX0pO2EuZ2EuaW5zdGFuY2U9bmV3IGEuZ2F9KSgpO2EuYihcImJpbmRpbmdQcm92aWRlclwiLGEuZ2EpOyhmdW5jdGlvbigpe2Z1bmN0aW9uIGIoYil7dmFyIGM9KGI9YS5hLmcuZ2V0KGIseikpJiZiLk47YyYmKGIuTj1udWxsLGMuVGMoKSl9ZnVuY3Rpb24gYyhjLGQsZSl7dGhpcy5ub2RlPWM7dGhpcy55Yz1cbmQ7dGhpcy5rYj1bXTt0aGlzLkg9ITE7ZC5OfHxhLmEuSy56YShjLGIpO2UmJmUuTiYmKGUuTi5rYi5wdXNoKGMpLHRoaXMuS2I9ZSl9ZnVuY3Rpb24gZChhKXtyZXR1cm4gZnVuY3Rpb24oKXtyZXR1cm4gYX19ZnVuY3Rpb24gZShhKXtyZXR1cm4gYSgpfWZ1bmN0aW9uIGYoYil7cmV0dXJuIGEuYS5HYShhLnUuRyhiKSxmdW5jdGlvbihhLGMpe3JldHVybiBmdW5jdGlvbigpe3JldHVybiBiKClbY119fSl9ZnVuY3Rpb24gZyhiLGMsZSl7cmV0dXJuXCJmdW5jdGlvblwiPT09dHlwZW9mIGI/ZihiLmJpbmQobnVsbCxjLGUpKTphLmEuR2EoYixkKX1mdW5jdGlvbiBoKGEsYil7cmV0dXJuIGYodGhpcy5nZXRCaW5kaW5ncy5iaW5kKHRoaXMsYSxiKSl9ZnVuY3Rpb24gbShiLGMpe3ZhciBkPWEuaC5maXJzdENoaWxkKGMpO2lmKGQpe3ZhciBlLGY9YS5nYS5pbnN0YW5jZSxsPWYucHJlcHJvY2Vzc05vZGU7aWYobCl7Zm9yKDtlPWQ7KWQ9YS5oLm5leHRTaWJsaW5nKGUpLGwuY2FsbChmLGUpO1xuZD1hLmguZmlyc3RDaGlsZChjKX1mb3IoO2U9ZDspZD1hLmgubmV4dFNpYmxpbmcoZSksayhiLGUpfWEuaS5tYShjLGEuaS5IKX1mdW5jdGlvbiBrKGIsYyl7dmFyIGQ9YixlPTE9PT1jLm5vZGVUeXBlO2UmJmEuaC5TYyhjKTtpZihlfHxhLmdhLmluc3RhbmNlLm5vZGVIYXNCaW5kaW5ncyhjKSlkPXAoYyxudWxsLGIpLmJpbmRpbmdDb250ZXh0Rm9yRGVzY2VuZGFudHM7ZCYmIXVbYS5hLlIoYyldJiZtKGQsYyl9ZnVuY3Rpb24gbChiKXt2YXIgYz1bXSxkPXt9LGU9W107YS5hLlAoYixmdW5jdGlvbiBjYShmKXtpZighZFtmXSl7dmFyIGs9YS5nZXRCaW5kaW5nSGFuZGxlcihmKTtrJiYoay5hZnRlciYmKGUucHVzaChmKSxhLmEuRChrLmFmdGVyLGZ1bmN0aW9uKGMpe2lmKGJbY10pe2lmKC0xIT09YS5hLkEoZSxjKSl0aHJvdyBFcnJvcihcIkNhbm5vdCBjb21iaW5lIHRoZSBmb2xsb3dpbmcgYmluZGluZ3MsIGJlY2F1c2UgdGhleSBoYXZlIGEgY3ljbGljIGRlcGVuZGVuY3k6IFwiK2Uuam9pbihcIiwgXCIpKTtcbmNhKGMpfX0pLGUubGVuZ3RoLS0pLGMucHVzaCh7a2V5OmYsTWM6a30pKTtkW2ZdPSEwfX0pO3JldHVybiBjfWZ1bmN0aW9uIHAoYixjLGQpe3ZhciBmPWEuYS5nLlViKGIseix7fSksaz1mLmhkO2lmKCFjKXtpZihrKXRocm93IEVycm9yKFwiWW91IGNhbm5vdCBhcHBseSBiaW5kaW5ncyBtdWx0aXBsZSB0aW1lcyB0byB0aGUgc2FtZSBlbGVtZW50LlwiKTtmLmhkPSEwfWt8fChmLmNvbnRleHQ9ZCk7Zi5aYnx8KGYuWmI9e30pO3ZhciBnO2lmKGMmJlwiZnVuY3Rpb25cIiE9PXR5cGVvZiBjKWc9YztlbHNle3ZhciBwPWEuZ2EuaW5zdGFuY2UscT1wLmdldEJpbmRpbmdBY2Nlc3NvcnN8fGgsbT1hLiQoZnVuY3Rpb24oKXtpZihnPWM/YyhkLGIpOnEuY2FsbChwLGIsZCkpe2lmKGRbdF0pZFt0XSgpO2lmKGRbQl0pZFtCXSgpfXJldHVybiBnfSxudWxsLHtsOmJ9KTtnJiZtLmphKCl8fChtPW51bGwpfXZhciB4PWQsdTtpZihnKXt2YXIgSj1mdW5jdGlvbigpe3JldHVybiBhLmEuR2EobT9tKCk6XG5nLGUpfSxyPW0/ZnVuY3Rpb24oYSl7cmV0dXJuIGZ1bmN0aW9uKCl7cmV0dXJuIGUobSgpW2FdKX19OmZ1bmN0aW9uKGEpe3JldHVybiBnW2FdfTtKLmdldD1mdW5jdGlvbihhKXtyZXR1cm4gZ1thXSYmZShyKGEpKX07Si5oYXM9ZnVuY3Rpb24oYSl7cmV0dXJuIGEgaW4gZ307YS5pLkggaW4gZyYmYS5pLnN1YnNjcmliZShiLGEuaS5ILGZ1bmN0aW9uKCl7dmFyIGM9KDAsZ1thLmkuSF0pKCk7aWYoYyl7dmFyIGQ9YS5oLmNoaWxkTm9kZXMoYik7ZC5sZW5ndGgmJmMoZCxhLkVjKGRbMF0pKX19KTthLmkucGEgaW4gZyYmKHg9YS5pLkNiKGIsZCksYS5pLnN1YnNjcmliZShiLGEuaS5wYSxmdW5jdGlvbigpe3ZhciBjPSgwLGdbYS5pLnBhXSkoKTtjJiZhLmguZmlyc3RDaGlsZChiKSYmYyhiKX0pKTtmPWwoZyk7YS5hLkQoZixmdW5jdGlvbihjKXt2YXIgZD1jLk1jLmluaXQsZT1jLk1jLnVwZGF0ZSxmPWMua2V5O2lmKDg9PT1iLm5vZGVUeXBlJiYhYS5oLmVhW2ZdKXRocm93IEVycm9yKFwiVGhlIGJpbmRpbmcgJ1wiK1xuZitcIicgY2Fubm90IGJlIHVzZWQgd2l0aCB2aXJ0dWFsIGVsZW1lbnRzXCIpO3RyeXtcImZ1bmN0aW9uXCI9PXR5cGVvZiBkJiZhLnUuRyhmdW5jdGlvbigpe3ZhciBhPWQoYixyKGYpLEoseC4kZGF0YSx4KTtpZihhJiZhLmNvbnRyb2xzRGVzY2VuZGFudEJpbmRpbmdzKXtpZih1IT09bil0aHJvdyBFcnJvcihcIk11bHRpcGxlIGJpbmRpbmdzIChcIit1K1wiIGFuZCBcIitmK1wiKSBhcmUgdHJ5aW5nIHRvIGNvbnRyb2wgZGVzY2VuZGFudCBiaW5kaW5ncyBvZiB0aGUgc2FtZSBlbGVtZW50LiBZb3UgY2Fubm90IHVzZSB0aGVzZSBiaW5kaW5ncyB0b2dldGhlciBvbiB0aGUgc2FtZSBlbGVtZW50LlwiKTt1PWZ9fSksXCJmdW5jdGlvblwiPT10eXBlb2YgZSYmYS4kKGZ1bmN0aW9uKCl7ZShiLHIoZiksSix4LiRkYXRhLHgpfSxudWxsLHtsOmJ9KX1jYXRjaChrKXt0aHJvdyBrLm1lc3NhZ2U9J1VuYWJsZSB0byBwcm9jZXNzIGJpbmRpbmcgXCInK2YrXCI6IFwiK2dbZl0rJ1wiXFxuTWVzc2FnZTogJytrLm1lc3NhZ2UsXG5rO319KX1mPXU9PT1uO3JldHVybntzaG91bGRCaW5kRGVzY2VuZGFudHM6ZixiaW5kaW5nQ29udGV4dEZvckRlc2NlbmRhbnRzOmYmJnh9fWZ1bmN0aW9uIHEoYixjKXtyZXR1cm4gYiYmYiBpbnN0YW5jZW9mIGEuZmE/YjpuZXcgYS5mYShiLG4sbixjKX12YXIgdD1hLmEuRGEoXCJfc3Vic2NyaWJhYmxlXCIpLHg9YS5hLkRhKFwiX2FuY2VzdG9yQmluZGluZ0luZm9cIiksQj1hLmEuRGEoXCJfZGF0YURlcGVuZGVuY3lcIik7YS5jPXt9O3ZhciB1PXtzY3JpcHQ6ITAsdGV4dGFyZWE6ITAsdGVtcGxhdGU6ITB9O2EuZ2V0QmluZGluZ0hhbmRsZXI9ZnVuY3Rpb24oYil7cmV0dXJuIGEuY1tiXX07dmFyIEo9e307YS5mYT1mdW5jdGlvbihiLGMsZCxlLGYpe2Z1bmN0aW9uIGsoKXt2YXIgYj1wP2goKTpoLGY9YS5hLmYoYik7Yz8oYS5hLmV4dGVuZChsLGMpLHggaW4gYyYmKGxbeF09Y1t4XSkpOihsLiRwYXJlbnRzPVtdLGwuJHJvb3Q9ZixsLmtvPWEpO2xbdF09cTtnP2Y9bC4kZGF0YToobC4kcmF3RGF0YT1cbmIsbC4kZGF0YT1mKTtkJiYobFtkXT1mKTtlJiZlKGwsYyxmKTtpZihjJiZjW3RdJiYhYS5TLm8oKS5WYihjW3RdKSljW3RdKCk7bSYmKGxbQl09bSk7cmV0dXJuIGwuJGRhdGF9dmFyIGw9dGhpcyxnPWI9PT1KLGg9Zz9uOmIscD1cImZ1bmN0aW9uXCI9PXR5cGVvZiBoJiYhYS5PKGgpLHEsbT1mJiZmLmRhdGFEZXBlbmRlbmN5O2YmJmYuZXhwb3J0RGVwZW5kZW5jaWVzP2soKToocT1hLnhiKGspLHEudigpLHEuamEoKT9xLmVxdWFsaXR5Q29tcGFyZXI9bnVsbDpsW3RdPW4pfTthLmZhLnByb3RvdHlwZS5jcmVhdGVDaGlsZENvbnRleHQ9ZnVuY3Rpb24oYixjLGQsZSl7IWUmJmMmJlwib2JqZWN0XCI9PXR5cGVvZiBjJiYoZT1jLGM9ZS5hcyxkPWUuZXh0ZW5kKTtpZihjJiZlJiZlLm5vQ2hpbGRDb250ZXh0KXt2YXIgZj1cImZ1bmN0aW9uXCI9PXR5cGVvZiBiJiYhYS5PKGIpO3JldHVybiBuZXcgYS5mYShKLHRoaXMsbnVsbCxmdW5jdGlvbihhKXtkJiZkKGEpO2FbY109Zj9iKCk6Yn0sZSl9cmV0dXJuIG5ldyBhLmZhKGIsXG50aGlzLGMsZnVuY3Rpb24oYSxiKXthLiRwYXJlbnRDb250ZXh0PWI7YS4kcGFyZW50PWIuJGRhdGE7YS4kcGFyZW50cz0oYi4kcGFyZW50c3x8W10pLnNsaWNlKDApO2EuJHBhcmVudHMudW5zaGlmdChhLiRwYXJlbnQpO2QmJmQoYSl9LGUpfTthLmZhLnByb3RvdHlwZS5leHRlbmQ9ZnVuY3Rpb24oYixjKXtyZXR1cm4gbmV3IGEuZmEoSix0aGlzLG51bGwsZnVuY3Rpb24oYyl7YS5hLmV4dGVuZChjLFwiZnVuY3Rpb25cIj09dHlwZW9mIGI/YihjKTpiKX0sYyl9O3ZhciB6PWEuYS5nLlooKTtjLnByb3RvdHlwZS5UYz1mdW5jdGlvbigpe3RoaXMuS2ImJnRoaXMuS2IuTiYmdGhpcy5LYi5OLnNkKHRoaXMubm9kZSl9O2MucHJvdG90eXBlLnNkPWZ1bmN0aW9uKGIpe2EuYS5QYSh0aGlzLmtiLGIpOyF0aGlzLmtiLmxlbmd0aCYmdGhpcy5IJiZ0aGlzLkNjKCl9O2MucHJvdG90eXBlLkNjPWZ1bmN0aW9uKCl7dGhpcy5IPSEwO3RoaXMueWMuTiYmIXRoaXMua2IubGVuZ3RoJiYodGhpcy55Yy5OPVxubnVsbCxhLmEuSy55Yih0aGlzLm5vZGUsYiksYS5pLm1hKHRoaXMubm9kZSxhLmkucGEpLHRoaXMuVGMoKSl9O2EuaT17SDpcImNoaWxkcmVuQ29tcGxldGVcIixwYTpcImRlc2NlbmRhbnRzQ29tcGxldGVcIixzdWJzY3JpYmU6ZnVuY3Rpb24oYixjLGQsZSxmKXt2YXIgaz1hLmEuZy5VYihiLHose30pO2suRmF8fChrLkZhPW5ldyBhLlQpO2YmJmYubm90aWZ5SW1tZWRpYXRlbHkmJmsuWmJbY10mJmEudS5HKGQsZSxbYl0pO3JldHVybiBrLkZhLnN1YnNjcmliZShkLGUsYyl9LG1hOmZ1bmN0aW9uKGIsYyl7dmFyIGQ9YS5hLmcuZ2V0KGIseik7aWYoZCYmKGQuWmJbY109ITAsZC5GYSYmZC5GYS5ub3RpZnlTdWJzY3JpYmVycyhiLGMpLGM9PWEuaS5IKSlpZihkLk4pZC5OLkNjKCk7ZWxzZSBpZihkLk49PT1uJiZkLkZhJiZkLkZhLldhKGEuaS5wYSkpdGhyb3cgRXJyb3IoXCJkZXNjZW5kYW50c0NvbXBsZXRlIGV2ZW50IG5vdCBzdXBwb3J0ZWQgZm9yIGJpbmRpbmdzIG9uIHRoaXMgbm9kZVwiKTtcbn0sQ2I6ZnVuY3Rpb24oYixkKXt2YXIgZT1hLmEuZy5VYihiLHose30pO2UuTnx8KGUuTj1uZXcgYyhiLGUsZFt4XSkpO3JldHVybiBkW3hdPT1lP2Q6ZC5leHRlbmQoZnVuY3Rpb24oYSl7YVt4XT1lfSl9fTthLlRkPWZ1bmN0aW9uKGIpe3JldHVybihiPWEuYS5nLmdldChiLHopKSYmYi5jb250ZXh0fTthLmliPWZ1bmN0aW9uKGIsYyxkKXsxPT09Yi5ub2RlVHlwZSYmYS5oLlNjKGIpO3JldHVybiBwKGIsYyxxKGQpKX07YS5sZD1mdW5jdGlvbihiLGMsZCl7ZD1xKGQpO3JldHVybiBhLmliKGIsZyhjLGQsYiksZCl9O2EuT2E9ZnVuY3Rpb24oYSxiKXsxIT09Yi5ub2RlVHlwZSYmOCE9PWIubm9kZVR5cGV8fG0ocShhKSxiKX07YS52Yz1mdW5jdGlvbihhLGIsYyl7IXYmJkEualF1ZXJ5JiYodj1BLmpRdWVyeSk7aWYoMj5hcmd1bWVudHMubGVuZ3RoKXtpZihiPXcuYm9keSwhYil0aHJvdyBFcnJvcihcImtvLmFwcGx5QmluZGluZ3M6IGNvdWxkIG5vdCBmaW5kIGRvY3VtZW50LmJvZHk7IGhhcyB0aGUgZG9jdW1lbnQgYmVlbiBsb2FkZWQ/XCIpO1xufWVsc2UgaWYoIWJ8fDEhPT1iLm5vZGVUeXBlJiY4IT09Yi5ub2RlVHlwZSl0aHJvdyBFcnJvcihcImtvLmFwcGx5QmluZGluZ3M6IGZpcnN0IHBhcmFtZXRlciBzaG91bGQgYmUgeW91ciB2aWV3IG1vZGVsOyBzZWNvbmQgcGFyYW1ldGVyIHNob3VsZCBiZSBhIERPTSBub2RlXCIpO2socShhLGMpLGIpfTthLkRjPWZ1bmN0aW9uKGIpe3JldHVybiFifHwxIT09Yi5ub2RlVHlwZSYmOCE9PWIubm9kZVR5cGU/bjphLlRkKGIpfTthLkVjPWZ1bmN0aW9uKGIpe3JldHVybihiPWEuRGMoYikpP2IuJGRhdGE6bn07YS5iKFwiYmluZGluZ0hhbmRsZXJzXCIsYS5jKTthLmIoXCJiaW5kaW5nRXZlbnRcIixhLmkpO2EuYihcImJpbmRpbmdFdmVudC5zdWJzY3JpYmVcIixhLmkuc3Vic2NyaWJlKTthLmIoXCJiaW5kaW5nRXZlbnQuc3RhcnRQb3NzaWJseUFzeW5jQ29udGVudEJpbmRpbmdcIixhLmkuQ2IpO2EuYihcImFwcGx5QmluZGluZ3NcIixhLnZjKTthLmIoXCJhcHBseUJpbmRpbmdzVG9EZXNjZW5kYW50c1wiLGEuT2EpO1xuYS5iKFwiYXBwbHlCaW5kaW5nQWNjZXNzb3JzVG9Ob2RlXCIsYS5pYik7YS5iKFwiYXBwbHlCaW5kaW5nc1RvTm9kZVwiLGEubGQpO2EuYihcImNvbnRleHRGb3JcIixhLkRjKTthLmIoXCJkYXRhRm9yXCIsYS5FYyl9KSgpOyhmdW5jdGlvbihiKXtmdW5jdGlvbiBjKGMsZSl7dmFyIGs9T2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKGYsYyk/ZltjXTpiLGw7az9rLnN1YnNjcmliZShlKTooaz1mW2NdPW5ldyBhLlQsay5zdWJzY3JpYmUoZSksZChjLGZ1bmN0aW9uKGIsZCl7dmFyIGU9ISghZHx8IWQuc3luY2hyb25vdXMpO2dbY109e2RlZmluaXRpb246YixHZDplfTtkZWxldGUgZltjXTtsfHxlP2subm90aWZ5U3Vic2NyaWJlcnMoYik6YS5uYS56YihmdW5jdGlvbigpe2subm90aWZ5U3Vic2NyaWJlcnMoYil9KX0pLGw9ITApfWZ1bmN0aW9uIGQoYSxiKXtlKFwiZ2V0Q29uZmlnXCIsW2FdLGZ1bmN0aW9uKGMpe2M/ZShcImxvYWRDb21wb25lbnRcIixbYSxjXSxmdW5jdGlvbihhKXtiKGEsXG5jKX0pOmIobnVsbCxudWxsKX0pfWZ1bmN0aW9uIGUoYyxkLGYsbCl7bHx8KGw9YS5qLmxvYWRlcnMuc2xpY2UoMCkpO3ZhciBnPWwuc2hpZnQoKTtpZihnKXt2YXIgcT1nW2NdO2lmKHEpe3ZhciB0PSExO2lmKHEuYXBwbHkoZyxkLmNvbmNhdChmdW5jdGlvbihhKXt0P2YobnVsbCk6bnVsbCE9PWE/ZihhKTplKGMsZCxmLGwpfSkpIT09YiYmKHQ9ITAsIWcuc3VwcHJlc3NMb2FkZXJFeGNlcHRpb25zKSl0aHJvdyBFcnJvcihcIkNvbXBvbmVudCBsb2FkZXJzIG11c3Qgc3VwcGx5IHZhbHVlcyBieSBpbnZva2luZyB0aGUgY2FsbGJhY2ssIG5vdCBieSByZXR1cm5pbmcgdmFsdWVzIHN5bmNocm9ub3VzbHkuXCIpO31lbHNlIGUoYyxkLGYsbCl9ZWxzZSBmKG51bGwpfXZhciBmPXt9LGc9e307YS5qPXtnZXQ6ZnVuY3Rpb24oZCxlKXt2YXIgZj1PYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwoZyxkKT9nW2RdOmI7Zj9mLkdkP2EudS5HKGZ1bmN0aW9uKCl7ZShmLmRlZmluaXRpb24pfSk6XG5hLm5hLnpiKGZ1bmN0aW9uKCl7ZShmLmRlZmluaXRpb24pfSk6YyhkLGUpfSxCYzpmdW5jdGlvbihhKXtkZWxldGUgZ1thXX0sb2M6ZX07YS5qLmxvYWRlcnM9W107YS5iKFwiY29tcG9uZW50c1wiLGEuaik7YS5iKFwiY29tcG9uZW50cy5nZXRcIixhLmouZ2V0KTthLmIoXCJjb21wb25lbnRzLmNsZWFyQ2FjaGVkRGVmaW5pdGlvblwiLGEuai5CYyl9KSgpOyhmdW5jdGlvbigpe2Z1bmN0aW9uIGIoYixjLGQsZSl7ZnVuY3Rpb24gZygpezA9PT0tLUImJmUoaCl9dmFyIGg9e30sQj0yLHU9ZC50ZW1wbGF0ZTtkPWQudmlld01vZGVsO3U/ZihjLHUsZnVuY3Rpb24oYyl7YS5qLm9jKFwibG9hZFRlbXBsYXRlXCIsW2IsY10sZnVuY3Rpb24oYSl7aC50ZW1wbGF0ZT1hO2coKX0pfSk6ZygpO2Q/ZihjLGQsZnVuY3Rpb24oYyl7YS5qLm9jKFwibG9hZFZpZXdNb2RlbFwiLFtiLGNdLGZ1bmN0aW9uKGEpe2hbbV09YTtnKCl9KX0pOmcoKX1mdW5jdGlvbiBjKGEsYixkKXtpZihcImZ1bmN0aW9uXCI9PT10eXBlb2YgYilkKGZ1bmN0aW9uKGEpe3JldHVybiBuZXcgYihhKX0pO1xuZWxzZSBpZihcImZ1bmN0aW9uXCI9PT10eXBlb2YgYlttXSlkKGJbbV0pO2Vsc2UgaWYoXCJpbnN0YW5jZVwiaW4gYil7dmFyIGU9Yi5pbnN0YW5jZTtkKGZ1bmN0aW9uKCl7cmV0dXJuIGV9KX1lbHNlXCJ2aWV3TW9kZWxcImluIGI/YyhhLGIudmlld01vZGVsLGQpOmEoXCJVbmtub3duIHZpZXdNb2RlbCB2YWx1ZTogXCIrYil9ZnVuY3Rpb24gZChiKXtzd2l0Y2goYS5hLlIoYikpe2Nhc2UgXCJzY3JpcHRcIjpyZXR1cm4gYS5hLnVhKGIudGV4dCk7Y2FzZSBcInRleHRhcmVhXCI6cmV0dXJuIGEuYS51YShiLnZhbHVlKTtjYXNlIFwidGVtcGxhdGVcIjppZihlKGIuY29udGVudCkpcmV0dXJuIGEuYS5DYShiLmNvbnRlbnQuY2hpbGROb2Rlcyl9cmV0dXJuIGEuYS5DYShiLmNoaWxkTm9kZXMpfWZ1bmN0aW9uIGUoYSl7cmV0dXJuIEEuRG9jdW1lbnRGcmFnbWVudD9hIGluc3RhbmNlb2YgRG9jdW1lbnRGcmFnbWVudDphJiYxMT09PWEubm9kZVR5cGV9ZnVuY3Rpb24gZihhLGIsYyl7XCJzdHJpbmdcIj09PXR5cGVvZiBiLnJlcXVpcmU/XG5UfHxBLnJlcXVpcmU/KFR8fEEucmVxdWlyZSkoW2IucmVxdWlyZV0sZnVuY3Rpb24oYSl7YSYmXCJvYmplY3RcIj09PXR5cGVvZiBhJiZhLlhkJiZhW1wiZGVmYXVsdFwiXSYmKGE9YVtcImRlZmF1bHRcIl0pO2MoYSl9KTphKFwiVXNlcyByZXF1aXJlLCBidXQgbm8gQU1EIGxvYWRlciBpcyBwcmVzZW50XCIpOmMoYil9ZnVuY3Rpb24gZyhhKXtyZXR1cm4gZnVuY3Rpb24oYil7dGhyb3cgRXJyb3IoXCJDb21wb25lbnQgJ1wiK2ErXCInOiBcIitiKTt9fXZhciBoPXt9O2Euai5yZWdpc3Rlcj1mdW5jdGlvbihiLGMpe2lmKCFjKXRocm93IEVycm9yKFwiSW52YWxpZCBjb25maWd1cmF0aW9uIGZvciBcIitiKTtpZihhLmoudGIoYikpdGhyb3cgRXJyb3IoXCJDb21wb25lbnQgXCIrYitcIiBpcyBhbHJlYWR5IHJlZ2lzdGVyZWRcIik7aFtiXT1jfTthLmoudGI9ZnVuY3Rpb24oYSl7cmV0dXJuIE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChoLGEpfTthLmoudW5yZWdpc3Rlcj1mdW5jdGlvbihiKXtkZWxldGUgaFtiXTtcbmEuai5CYyhiKX07YS5qLkZjPXtnZXRDb25maWc6ZnVuY3Rpb24oYixjKXtjKGEuai50YihiKT9oW2JdOm51bGwpfSxsb2FkQ29tcG9uZW50OmZ1bmN0aW9uKGEsYyxkKXt2YXIgZT1nKGEpO2YoZSxjLGZ1bmN0aW9uKGMpe2IoYSxlLGMsZCl9KX0sbG9hZFRlbXBsYXRlOmZ1bmN0aW9uKGIsYyxmKXtiPWcoYik7aWYoXCJzdHJpbmdcIj09PXR5cGVvZiBjKWYoYS5hLnVhKGMpKTtlbHNlIGlmKGMgaW5zdGFuY2VvZiBBcnJheSlmKGMpO2Vsc2UgaWYoZShjKSlmKGEuYS5sYShjLmNoaWxkTm9kZXMpKTtlbHNlIGlmKGMuZWxlbWVudClpZihjPWMuZWxlbWVudCxBLkhUTUxFbGVtZW50P2MgaW5zdGFuY2VvZiBIVE1MRWxlbWVudDpjJiZjLnRhZ05hbWUmJjE9PT1jLm5vZGVUeXBlKWYoZChjKSk7ZWxzZSBpZihcInN0cmluZ1wiPT09dHlwZW9mIGMpe3ZhciBoPXcuZ2V0RWxlbWVudEJ5SWQoYyk7aD9mKGQoaCkpOmIoXCJDYW5ub3QgZmluZCBlbGVtZW50IHdpdGggSUQgXCIrYyl9ZWxzZSBiKFwiVW5rbm93biBlbGVtZW50IHR5cGU6IFwiK1xuYyk7ZWxzZSBiKFwiVW5rbm93biB0ZW1wbGF0ZSB2YWx1ZTogXCIrYyl9LGxvYWRWaWV3TW9kZWw6ZnVuY3Rpb24oYSxiLGQpe2MoZyhhKSxiLGQpfX07dmFyIG09XCJjcmVhdGVWaWV3TW9kZWxcIjthLmIoXCJjb21wb25lbnRzLnJlZ2lzdGVyXCIsYS5qLnJlZ2lzdGVyKTthLmIoXCJjb21wb25lbnRzLmlzUmVnaXN0ZXJlZFwiLGEuai50Yik7YS5iKFwiY29tcG9uZW50cy51bnJlZ2lzdGVyXCIsYS5qLnVucmVnaXN0ZXIpO2EuYihcImNvbXBvbmVudHMuZGVmYXVsdExvYWRlclwiLGEuai5GYyk7YS5qLmxvYWRlcnMucHVzaChhLmouRmMpO2Euai5kZD1ofSkoKTsoZnVuY3Rpb24oKXtmdW5jdGlvbiBiKGIsZSl7dmFyIGY9Yi5nZXRBdHRyaWJ1dGUoXCJwYXJhbXNcIik7aWYoZil7dmFyIGY9Yy5wYXJzZUJpbmRpbmdzU3RyaW5nKGYsZSxiLHt2YWx1ZUFjY2Vzc29yczohMCxiaW5kaW5nUGFyYW1zOiEwfSksZj1hLmEuR2EoZixmdW5jdGlvbihjKXtyZXR1cm4gYS5vKGMsbnVsbCx7bDpifSl9KSxnPWEuYS5HYShmLFxuZnVuY3Rpb24oYyl7dmFyIGU9Yy52KCk7cmV0dXJuIGMuamEoKT9hLm8oe3JlYWQ6ZnVuY3Rpb24oKXtyZXR1cm4gYS5hLmYoYygpKX0sd3JpdGU6YS5aYShlKSYmZnVuY3Rpb24oYSl7YygpKGEpfSxsOmJ9KTplfSk7T2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKGcsXCIkcmF3XCIpfHwoZy4kcmF3PWYpO3JldHVybiBnfXJldHVybnskcmF3Ont9fX1hLmouZ2V0Q29tcG9uZW50TmFtZUZvck5vZGU9ZnVuY3Rpb24oYil7dmFyIGM9YS5hLlIoYik7aWYoYS5qLnRiKGMpJiYoLTEhPWMuaW5kZXhPZihcIi1cIil8fFwiW29iamVjdCBIVE1MVW5rbm93bkVsZW1lbnRdXCI9PVwiXCIrYnx8OD49YS5hLlcmJmIudGFnTmFtZT09PWMpKXJldHVybiBjfTthLmoudGM9ZnVuY3Rpb24oYyxlLGYsZyl7aWYoMT09PWUubm9kZVR5cGUpe3ZhciBoPWEuai5nZXRDb21wb25lbnROYW1lRm9yTm9kZShlKTtpZihoKXtjPWN8fHt9O2lmKGMuY29tcG9uZW50KXRocm93IEVycm9yKCdDYW5ub3QgdXNlIHRoZSBcImNvbXBvbmVudFwiIGJpbmRpbmcgb24gYSBjdXN0b20gZWxlbWVudCBtYXRjaGluZyBhIGNvbXBvbmVudCcpO1xudmFyIG09e25hbWU6aCxwYXJhbXM6YihlLGYpfTtjLmNvbXBvbmVudD1nP2Z1bmN0aW9uKCl7cmV0dXJuIG19Om19fXJldHVybiBjfTt2YXIgYz1uZXcgYS5nYTs5PmEuYS5XJiYoYS5qLnJlZ2lzdGVyPWZ1bmN0aW9uKGEpe3JldHVybiBmdW5jdGlvbihiKXtyZXR1cm4gYS5hcHBseSh0aGlzLGFyZ3VtZW50cyl9fShhLmoucmVnaXN0ZXIpLHcuY3JlYXRlRG9jdW1lbnRGcmFnbWVudD1mdW5jdGlvbihiKXtyZXR1cm4gZnVuY3Rpb24oKXt2YXIgYz1iKCksZj1hLmouZGQsZztmb3IoZyBpbiBmKTtyZXR1cm4gY319KHcuY3JlYXRlRG9jdW1lbnRGcmFnbWVudCkpfSkoKTsoZnVuY3Rpb24oKXtmdW5jdGlvbiBiKGIsYyxkKXtjPWMudGVtcGxhdGU7aWYoIWMpdGhyb3cgRXJyb3IoXCJDb21wb25lbnQgJ1wiK2IrXCInIGhhcyBubyB0ZW1wbGF0ZVwiKTtiPWEuYS5DYShjKTthLmgudmEoZCxiKX1mdW5jdGlvbiBjKGEsYixjKXt2YXIgZD1hLmNyZWF0ZVZpZXdNb2RlbDtyZXR1cm4gZD9kLmNhbGwoYSxcbmIsYyk6Yn12YXIgZD0wO2EuYy5jb21wb25lbnQ9e2luaXQ6ZnVuY3Rpb24oZSxmLGcsaCxtKXtmdW5jdGlvbiBrKCl7dmFyIGE9bCYmbC5kaXNwb3NlO1wiZnVuY3Rpb25cIj09PXR5cGVvZiBhJiZhLmNhbGwobCk7cSYmcS5zKCk7cD1sPXE9bnVsbH12YXIgbCxwLHEsdD1hLmEubGEoYS5oLmNoaWxkTm9kZXMoZSkpO2EuaC5FYShlKTthLmEuSy56YShlLGspO2EubyhmdW5jdGlvbigpe3ZhciBnPWEuYS5mKGYoKSksaCx1O1wic3RyaW5nXCI9PT10eXBlb2YgZz9oPWc6KGg9YS5hLmYoZy5uYW1lKSx1PWEuYS5mKGcucGFyYW1zKSk7aWYoIWgpdGhyb3cgRXJyb3IoXCJObyBjb21wb25lbnQgbmFtZSBzcGVjaWZpZWRcIik7dmFyIG49YS5pLkNiKGUsbSksej1wPSsrZDthLmouZ2V0KGgsZnVuY3Rpb24oZCl7aWYocD09PXope2soKTtpZighZCl0aHJvdyBFcnJvcihcIlVua25vd24gY29tcG9uZW50ICdcIitoK1wiJ1wiKTtiKGgsZCxlKTt2YXIgZj1jKGQsdSx7ZWxlbWVudDplLHRlbXBsYXRlTm9kZXM6dH0pO1xuZD1uLmNyZWF0ZUNoaWxkQ29udGV4dChmLHtleHRlbmQ6ZnVuY3Rpb24oYSl7YS4kY29tcG9uZW50PWY7YS4kY29tcG9uZW50VGVtcGxhdGVOb2Rlcz10fX0pO2YmJmYua29EZXNjZW5kYW50c0NvbXBsZXRlJiYocT1hLmkuc3Vic2NyaWJlKGUsYS5pLnBhLGYua29EZXNjZW5kYW50c0NvbXBsZXRlLGYpKTtsPWY7YS5PYShkLGUpfX0pfSxudWxsLHtsOmV9KTtyZXR1cm57Y29udHJvbHNEZXNjZW5kYW50QmluZGluZ3M6ITB9fX07YS5oLmVhLmNvbXBvbmVudD0hMH0pKCk7dmFyIFY9e1wiY2xhc3NcIjpcImNsYXNzTmFtZVwiLFwiZm9yXCI6XCJodG1sRm9yXCJ9O2EuYy5hdHRyPXt1cGRhdGU6ZnVuY3Rpb24oYixjKXt2YXIgZD1hLmEuZihjKCkpfHx7fTthLmEuUChkLGZ1bmN0aW9uKGMsZCl7ZD1hLmEuZihkKTt2YXIgZz1jLmluZGV4T2YoXCI6XCIpLGc9XCJsb29rdXBOYW1lc3BhY2VVUklcImluIGImJjA8ZyYmYi5sb29rdXBOYW1lc3BhY2VVUkkoYy5zdWJzdHIoMCxnKSksaD0hMT09PWR8fG51bGw9PT1cbmR8fGQ9PT1uO2g/Zz9iLnJlbW92ZUF0dHJpYnV0ZU5TKGcsYyk6Yi5yZW1vdmVBdHRyaWJ1dGUoYyk6ZD1kLnRvU3RyaW5nKCk7OD49YS5hLlcmJmMgaW4gVj8oYz1WW2NdLGg/Yi5yZW1vdmVBdHRyaWJ1dGUoYyk6YltjXT1kKTpofHwoZz9iLnNldEF0dHJpYnV0ZU5TKGcsYyxkKTpiLnNldEF0dHJpYnV0ZShjLGQpKTtcIm5hbWVcIj09PWMmJmEuYS5ZYyhiLGg/XCJcIjpkKX0pfX07KGZ1bmN0aW9uKCl7YS5jLmNoZWNrZWQ9e2FmdGVyOltcInZhbHVlXCIsXCJhdHRyXCJdLGluaXQ6ZnVuY3Rpb24oYixjLGQpe2Z1bmN0aW9uIGUoKXt2YXIgZT1iLmNoZWNrZWQsZj1nKCk7aWYoIWEuUy5ZYSgpJiYoZXx8IW0mJiFhLlMucWEoKSkpe3ZhciBrPWEudS5HKGMpO2lmKGwpe3ZhciBxPXA/ay52KCk6ayx6PXQ7dD1mO3ohPT1mP2UmJihhLmEuTmEocSxmLCEwKSxhLmEuTmEocSx6LCExKSk6YS5hLk5hKHEsZixlKTtwJiZhLlphKGspJiZrKHEpfWVsc2UgaCYmKGY9PT1uP2Y9ZTplfHwoZj1uKSksYS5tLmViKGssXG5kLFwiY2hlY2tlZFwiLGYsITApfX1mdW5jdGlvbiBmKCl7dmFyIGQ9YS5hLmYoYygpKSxlPWcoKTtsPyhiLmNoZWNrZWQ9MDw9YS5hLkEoZCxlKSx0PWUpOmIuY2hlY2tlZD1oJiZlPT09bj8hIWQ6ZygpPT09ZH12YXIgZz1hLnhiKGZ1bmN0aW9uKCl7aWYoZC5oYXMoXCJjaGVja2VkVmFsdWVcIikpcmV0dXJuIGEuYS5mKGQuZ2V0KFwiY2hlY2tlZFZhbHVlXCIpKTtpZihxKXJldHVybiBkLmhhcyhcInZhbHVlXCIpP2EuYS5mKGQuZ2V0KFwidmFsdWVcIikpOmIudmFsdWV9KSxoPVwiY2hlY2tib3hcIj09Yi50eXBlLG09XCJyYWRpb1wiPT1iLnR5cGU7aWYoaHx8bSl7dmFyIGs9YygpLGw9aCYmYS5hLmYoaylpbnN0YW5jZW9mIEFycmF5LHA9IShsJiZrLnB1c2gmJmsuc3BsaWNlKSxxPW18fGwsdD1sP2coKTpuO20mJiFiLm5hbWUmJmEuYy51bmlxdWVOYW1lLmluaXQoYixmdW5jdGlvbigpe3JldHVybiEwfSk7YS5vKGUsbnVsbCx7bDpifSk7YS5hLkIoYixcImNsaWNrXCIsZSk7YS5vKGYsbnVsbCx7bDpifSk7XG5rPW59fX07YS5tLndhLmNoZWNrZWQ9ITA7YS5jLmNoZWNrZWRWYWx1ZT17dXBkYXRlOmZ1bmN0aW9uKGIsYyl7Yi52YWx1ZT1hLmEuZihjKCkpfX19KSgpO2EuY1tcImNsYXNzXCJdPXt1cGRhdGU6ZnVuY3Rpb24oYixjKXt2YXIgZD1hLmEuRGIoYS5hLmYoYygpKSk7YS5hLkViKGIsYi5fX2tvX19jc3NWYWx1ZSwhMSk7Yi5fX2tvX19jc3NWYWx1ZT1kO2EuYS5FYihiLGQsITApfX07YS5jLmNzcz17dXBkYXRlOmZ1bmN0aW9uKGIsYyl7dmFyIGQ9YS5hLmYoYygpKTtudWxsIT09ZCYmXCJvYmplY3RcIj09dHlwZW9mIGQ/YS5hLlAoZCxmdW5jdGlvbihjLGQpe2Q9YS5hLmYoZCk7YS5hLkViKGIsYyxkKX0pOmEuY1tcImNsYXNzXCJdLnVwZGF0ZShiLGMpfX07YS5jLmVuYWJsZT17dXBkYXRlOmZ1bmN0aW9uKGIsYyl7dmFyIGQ9YS5hLmYoYygpKTtkJiZiLmRpc2FibGVkP2IucmVtb3ZlQXR0cmlidXRlKFwiZGlzYWJsZWRcIik6ZHx8Yi5kaXNhYmxlZHx8KGIuZGlzYWJsZWQ9ITApfX07YS5jLmRpc2FibGU9XG57dXBkYXRlOmZ1bmN0aW9uKGIsYyl7YS5jLmVuYWJsZS51cGRhdGUoYixmdW5jdGlvbigpe3JldHVybiFhLmEuZihjKCkpfSl9fTthLmMuZXZlbnQ9e2luaXQ6ZnVuY3Rpb24oYixjLGQsZSxmKXt2YXIgZz1jKCl8fHt9O2EuYS5QKGcsZnVuY3Rpb24oZyl7XCJzdHJpbmdcIj09dHlwZW9mIGcmJmEuYS5CKGIsZyxmdW5jdGlvbihiKXt2YXIgayxsPWMoKVtnXTtpZihsKXt0cnl7dmFyIHA9YS5hLmxhKGFyZ3VtZW50cyk7ZT1mLiRkYXRhO3AudW5zaGlmdChlKTtrPWwuYXBwbHkoZSxwKX1maW5hbGx5eyEwIT09ayYmKGIucHJldmVudERlZmF1bHQ/Yi5wcmV2ZW50RGVmYXVsdCgpOmIucmV0dXJuVmFsdWU9ITEpfSExPT09ZC5nZXQoZytcIkJ1YmJsZVwiKSYmKGIuY2FuY2VsQnViYmxlPSEwLGIuc3RvcFByb3BhZ2F0aW9uJiZiLnN0b3BQcm9wYWdhdGlvbigpKX19KX0pfX07YS5jLmZvcmVhY2g9e1JjOmZ1bmN0aW9uKGIpe3JldHVybiBmdW5jdGlvbigpe3ZhciBjPWIoKSxkPWEuYS5iYyhjKTtcbmlmKCFkfHxcIm51bWJlclwiPT10eXBlb2YgZC5sZW5ndGgpcmV0dXJue2ZvcmVhY2g6Yyx0ZW1wbGF0ZUVuZ2luZTphLmJhLk1hfTthLmEuZihjKTtyZXR1cm57Zm9yZWFjaDpkLmRhdGEsYXM6ZC5hcyxub0NoaWxkQ29udGV4dDpkLm5vQ2hpbGRDb250ZXh0LGluY2x1ZGVEZXN0cm95ZWQ6ZC5pbmNsdWRlRGVzdHJveWVkLGFmdGVyQWRkOmQuYWZ0ZXJBZGQsYmVmb3JlUmVtb3ZlOmQuYmVmb3JlUmVtb3ZlLGFmdGVyUmVuZGVyOmQuYWZ0ZXJSZW5kZXIsYmVmb3JlTW92ZTpkLmJlZm9yZU1vdmUsYWZ0ZXJNb3ZlOmQuYWZ0ZXJNb3ZlLHRlbXBsYXRlRW5naW5lOmEuYmEuTWF9fX0saW5pdDpmdW5jdGlvbihiLGMpe3JldHVybiBhLmMudGVtcGxhdGUuaW5pdChiLGEuYy5mb3JlYWNoLlJjKGMpKX0sdXBkYXRlOmZ1bmN0aW9uKGIsYyxkLGUsZil7cmV0dXJuIGEuYy50ZW1wbGF0ZS51cGRhdGUoYixhLmMuZm9yZWFjaC5SYyhjKSxkLGUsZil9fTthLm0uUmEuZm9yZWFjaD0hMTthLmguZWEuZm9yZWFjaD1cbiEwO2EuYy5oYXNmb2N1cz17aW5pdDpmdW5jdGlvbihiLGMsZCl7ZnVuY3Rpb24gZShlKXtiLl9fa29faGFzZm9jdXNVcGRhdGluZz0hMDt2YXIgZj1iLm93bmVyRG9jdW1lbnQ7aWYoXCJhY3RpdmVFbGVtZW50XCJpbiBmKXt2YXIgZzt0cnl7Zz1mLmFjdGl2ZUVsZW1lbnR9Y2F0Y2gobCl7Zz1mLmJvZHl9ZT1nPT09Yn1mPWMoKTthLm0uZWIoZixkLFwiaGFzZm9jdXNcIixlLCEwKTtiLl9fa29faGFzZm9jdXNMYXN0VmFsdWU9ZTtiLl9fa29faGFzZm9jdXNVcGRhdGluZz0hMX12YXIgZj1lLmJpbmQobnVsbCwhMCksZz1lLmJpbmQobnVsbCwhMSk7YS5hLkIoYixcImZvY3VzXCIsZik7YS5hLkIoYixcImZvY3VzaW5cIixmKTthLmEuQihiLFwiYmx1clwiLGcpO2EuYS5CKGIsXCJmb2N1c291dFwiLGcpO2IuX19rb19oYXNmb2N1c0xhc3RWYWx1ZT0hMX0sdXBkYXRlOmZ1bmN0aW9uKGIsYyl7dmFyIGQ9ISFhLmEuZihjKCkpO2IuX19rb19oYXNmb2N1c1VwZGF0aW5nfHxiLl9fa29faGFzZm9jdXNMYXN0VmFsdWU9PT1cbmR8fChkP2IuZm9jdXMoKTpiLmJsdXIoKSwhZCYmYi5fX2tvX2hhc2ZvY3VzTGFzdFZhbHVlJiZiLm93bmVyRG9jdW1lbnQuYm9keS5mb2N1cygpLGEudS5HKGEuYS5GYixudWxsLFtiLGQ/XCJmb2N1c2luXCI6XCJmb2N1c291dFwiXSkpfX07YS5tLndhLmhhc2ZvY3VzPSEwO2EuYy5oYXNGb2N1cz1hLmMuaGFzZm9jdXM7YS5tLndhLmhhc0ZvY3VzPVwiaGFzZm9jdXNcIjthLmMuaHRtbD17aW5pdDpmdW5jdGlvbigpe3JldHVybntjb250cm9sc0Rlc2NlbmRhbnRCaW5kaW5nczohMH19LHVwZGF0ZTpmdW5jdGlvbihiLGMpe2EuYS5mYyhiLGMoKSl9fTsoZnVuY3Rpb24oKXtmdW5jdGlvbiBiKGIsZCxlKXthLmNbYl09e2luaXQ6ZnVuY3Rpb24oYixjLGgsbSxrKXt2YXIgbCxwLHE9e30sdCx4LG47aWYoZCl7bT1oLmdldChcImFzXCIpO3ZhciB1PWguZ2V0KFwibm9DaGlsZENvbnRleHRcIik7bj0hKG0mJnUpO3E9e2FzOm0sbm9DaGlsZENvbnRleHQ6dSxleHBvcnREZXBlbmRlbmNpZXM6bn19eD0odD1cblwicmVuZGVyXCI9PWguZ2V0KFwiY29tcGxldGVPblwiKSl8fGguaGFzKGEuaS5wYSk7YS5vKGZ1bmN0aW9uKCl7dmFyIGg9YS5hLmYoYygpKSxtPSFlIT09IWgsdT0hcCxyO2lmKG58fG0hPT1sKXt4JiYoaz1hLmkuQ2IoYixrKSk7aWYobSl7aWYoIWR8fG4pcS5kYXRhRGVwZW5kZW5jeT1hLlMubygpO3I9ZD9rLmNyZWF0ZUNoaWxkQ29udGV4dChcImZ1bmN0aW9uXCI9PXR5cGVvZiBoP2g6YyxxKTphLlMucWEoKT9rLmV4dGVuZChudWxsLHEpOmt9dSYmYS5TLnFhKCkmJihwPWEuYS5DYShhLmguY2hpbGROb2RlcyhiKSwhMCkpO20/KHV8fGEuaC52YShiLGEuYS5DYShwKSksYS5PYShyLGIpKTooYS5oLkVhKGIpLHR8fGEuaS5tYShiLGEuaS5IKSk7bD1tfX0sbnVsbCx7bDpifSk7cmV0dXJue2NvbnRyb2xzRGVzY2VuZGFudEJpbmRpbmdzOiEwfX19O2EubS5SYVtiXT0hMTthLmguZWFbYl09ITB9YihcImlmXCIpO2IoXCJpZm5vdFwiLCExLCEwKTtiKFwid2l0aFwiLCEwKX0pKCk7YS5jLmxldD17aW5pdDpmdW5jdGlvbihiLFxuYyxkLGUsZil7Yz1mLmV4dGVuZChjKTthLk9hKGMsYik7cmV0dXJue2NvbnRyb2xzRGVzY2VuZGFudEJpbmRpbmdzOiEwfX19O2EuaC5lYS5sZXQ9ITA7dmFyIFE9e307YS5jLm9wdGlvbnM9e2luaXQ6ZnVuY3Rpb24oYil7aWYoXCJzZWxlY3RcIiE9PWEuYS5SKGIpKXRocm93IEVycm9yKFwib3B0aW9ucyBiaW5kaW5nIGFwcGxpZXMgb25seSB0byBTRUxFQ1QgZWxlbWVudHNcIik7Zm9yKDswPGIubGVuZ3RoOyliLnJlbW92ZSgwKTtyZXR1cm57Y29udHJvbHNEZXNjZW5kYW50QmluZGluZ3M6ITB9fSx1cGRhdGU6ZnVuY3Rpb24oYixjLGQpe2Z1bmN0aW9uIGUoKXtyZXR1cm4gYS5hLmpiKGIub3B0aW9ucyxmdW5jdGlvbihhKXtyZXR1cm4gYS5zZWxlY3RlZH0pfWZ1bmN0aW9uIGYoYSxiLGMpe3ZhciBkPXR5cGVvZiBiO3JldHVyblwiZnVuY3Rpb25cIj09ZD9iKGEpOlwic3RyaW5nXCI9PWQ/YVtiXTpjfWZ1bmN0aW9uIGcoYyxkKXtpZih4JiZsKWEuaS5tYShiLGEuaS5IKTtlbHNlIGlmKHQubGVuZ3RoKXt2YXIgZT1cbjA8PWEuYS5BKHQsYS53Lk0oZFswXSkpO2EuYS5aYyhkWzBdLGUpO3gmJiFlJiZhLnUuRyhhLmEuRmIsbnVsbCxbYixcImNoYW5nZVwiXSl9fXZhciBoPWIubXVsdGlwbGUsbT0wIT1iLmxlbmd0aCYmaD9iLnNjcm9sbFRvcDpudWxsLGs9YS5hLmYoYygpKSxsPWQuZ2V0KFwidmFsdWVBbGxvd1Vuc2V0XCIpJiZkLmhhcyhcInZhbHVlXCIpLHA9ZC5nZXQoXCJvcHRpb25zSW5jbHVkZURlc3Ryb3llZFwiKTtjPXt9O3ZhciBxLHQ9W107bHx8KGg/dD1hLmEuTWIoZSgpLGEudy5NKTowPD1iLnNlbGVjdGVkSW5kZXgmJnQucHVzaChhLncuTShiLm9wdGlvbnNbYi5zZWxlY3RlZEluZGV4XSkpKTtrJiYoXCJ1bmRlZmluZWRcIj09dHlwZW9mIGsubGVuZ3RoJiYoaz1ba10pLHE9YS5hLmpiKGssZnVuY3Rpb24oYil7cmV0dXJuIHB8fGI9PT1ufHxudWxsPT09Ynx8IWEuYS5mKGIuX2Rlc3Ryb3kpfSksZC5oYXMoXCJvcHRpb25zQ2FwdGlvblwiKSYmKGs9YS5hLmYoZC5nZXQoXCJvcHRpb25zQ2FwdGlvblwiKSksbnVsbCE9PVxuayYmayE9PW4mJnEudW5zaGlmdChRKSkpO3ZhciB4PSExO2MuYmVmb3JlUmVtb3ZlPWZ1bmN0aW9uKGEpe2IucmVtb3ZlQ2hpbGQoYSl9O2s9ZztkLmhhcyhcIm9wdGlvbnNBZnRlclJlbmRlclwiKSYmXCJmdW5jdGlvblwiPT10eXBlb2YgZC5nZXQoXCJvcHRpb25zQWZ0ZXJSZW5kZXJcIikmJihrPWZ1bmN0aW9uKGIsYyl7ZygwLGMpO2EudS5HKGQuZ2V0KFwib3B0aW9uc0FmdGVyUmVuZGVyXCIpLG51bGwsW2NbMF0sYiE9PVE/YjpuXSl9KTthLmEuZWMoYixxLGZ1bmN0aW9uKGMsZSxnKXtnLmxlbmd0aCYmKHQ9IWwmJmdbMF0uc2VsZWN0ZWQ/W2Eudy5NKGdbMF0pXTpbXSx4PSEwKTtlPWIub3duZXJEb2N1bWVudC5jcmVhdGVFbGVtZW50KFwib3B0aW9uXCIpO2M9PT1RPyhhLmEuQmIoZSxkLmdldChcIm9wdGlvbnNDYXB0aW9uXCIpKSxhLncuY2IoZSxuKSk6KGc9ZihjLGQuZ2V0KFwib3B0aW9uc1ZhbHVlXCIpLGMpLGEudy5jYihlLGEuYS5mKGcpKSxjPWYoYyxkLmdldChcIm9wdGlvbnNUZXh0XCIpLGcpLFxuYS5hLkJiKGUsYykpO3JldHVybltlXX0sYyxrKTtpZighbCl7dmFyIEI7aD9CPXQubGVuZ3RoJiZlKCkubGVuZ3RoPHQubGVuZ3RoOkI9dC5sZW5ndGgmJjA8PWIuc2VsZWN0ZWRJbmRleD9hLncuTShiLm9wdGlvbnNbYi5zZWxlY3RlZEluZGV4XSkhPT10WzBdOnQubGVuZ3RofHwwPD1iLnNlbGVjdGVkSW5kZXg7QiYmYS51LkcoYS5hLkZiLG51bGwsW2IsXCJjaGFuZ2VcIl0pfShsfHxhLlMuWWEoKSkmJmEuaS5tYShiLGEuaS5IKTthLmEud2QoYik7bSYmMjA8TWF0aC5hYnMobS1iLnNjcm9sbFRvcCkmJihiLnNjcm9sbFRvcD1tKX19O2EuYy5vcHRpb25zLiRiPWEuYS5nLlooKTthLmMuc2VsZWN0ZWRPcHRpb25zPXtpbml0OmZ1bmN0aW9uKGIsYyxkKXtmdW5jdGlvbiBlKCl7dmFyIGU9YygpLGY9W107YS5hLkQoYi5nZXRFbGVtZW50c0J5VGFnTmFtZShcIm9wdGlvblwiKSxmdW5jdGlvbihiKXtiLnNlbGVjdGVkJiZmLnB1c2goYS53Lk0oYikpfSk7YS5tLmViKGUsZCxcInNlbGVjdGVkT3B0aW9uc1wiLFxuZil9ZnVuY3Rpb24gZigpe3ZhciBkPWEuYS5mKGMoKSksZT1iLnNjcm9sbFRvcDtkJiZcIm51bWJlclwiPT10eXBlb2YgZC5sZW5ndGgmJmEuYS5EKGIuZ2V0RWxlbWVudHNCeVRhZ05hbWUoXCJvcHRpb25cIiksZnVuY3Rpb24oYil7dmFyIGM9MDw9YS5hLkEoZCxhLncuTShiKSk7Yi5zZWxlY3RlZCE9YyYmYS5hLlpjKGIsYyl9KTtiLnNjcm9sbFRvcD1lfWlmKFwic2VsZWN0XCIhPWEuYS5SKGIpKXRocm93IEVycm9yKFwic2VsZWN0ZWRPcHRpb25zIGJpbmRpbmcgYXBwbGllcyBvbmx5IHRvIFNFTEVDVCBlbGVtZW50c1wiKTt2YXIgZzthLmkuc3Vic2NyaWJlKGIsYS5pLkgsZnVuY3Rpb24oKXtnP2UoKTooYS5hLkIoYixcImNoYW5nZVwiLGUpLGc9YS5vKGYsbnVsbCx7bDpifSkpfSxudWxsLHtub3RpZnlJbW1lZGlhdGVseTohMH0pfSx1cGRhdGU6ZnVuY3Rpb24oKXt9fTthLm0ud2Euc2VsZWN0ZWRPcHRpb25zPSEwO2EuYy5zdHlsZT17dXBkYXRlOmZ1bmN0aW9uKGIsYyl7dmFyIGQ9YS5hLmYoYygpfHxcbnt9KTthLmEuUChkLGZ1bmN0aW9uKGMsZCl7ZD1hLmEuZihkKTtpZihudWxsPT09ZHx8ZD09PW58fCExPT09ZClkPVwiXCI7aWYodil2KGIpLmNzcyhjLGQpO2Vsc2UgaWYoL14tLS8udGVzdChjKSliLnN0eWxlLnNldFByb3BlcnR5KGMsZCk7ZWxzZXtjPWMucmVwbGFjZSgvLShcXHcpL2csZnVuY3Rpb24oYSxiKXtyZXR1cm4gYi50b1VwcGVyQ2FzZSgpfSk7dmFyIGc9Yi5zdHlsZVtjXTtiLnN0eWxlW2NdPWQ7ZD09PWd8fGIuc3R5bGVbY10hPWd8fGlzTmFOKGQpfHwoYi5zdHlsZVtjXT1kK1wicHhcIil9fSl9fTthLmMuc3VibWl0PXtpbml0OmZ1bmN0aW9uKGIsYyxkLGUsZil7aWYoXCJmdW5jdGlvblwiIT10eXBlb2YgYygpKXRocm93IEVycm9yKFwiVGhlIHZhbHVlIGZvciBhIHN1Ym1pdCBiaW5kaW5nIG11c3QgYmUgYSBmdW5jdGlvblwiKTthLmEuQihiLFwic3VibWl0XCIsZnVuY3Rpb24oYSl7dmFyIGQsZT1jKCk7dHJ5e2Q9ZS5jYWxsKGYuJGRhdGEsYil9ZmluYWxseXshMCE9PWQmJihhLnByZXZlbnREZWZhdWx0P1xuYS5wcmV2ZW50RGVmYXVsdCgpOmEucmV0dXJuVmFsdWU9ITEpfX0pfX07YS5jLnRleHQ9e2luaXQ6ZnVuY3Rpb24oKXtyZXR1cm57Y29udHJvbHNEZXNjZW5kYW50QmluZGluZ3M6ITB9fSx1cGRhdGU6ZnVuY3Rpb24oYixjKXthLmEuQmIoYixjKCkpfX07YS5oLmVhLnRleHQ9ITA7KGZ1bmN0aW9uKCl7aWYoQSYmQS5uYXZpZ2F0b3Ipe3ZhciBiPWZ1bmN0aW9uKGEpe2lmKGEpcmV0dXJuIHBhcnNlRmxvYXQoYVsxXSl9LGM9QS5uYXZpZ2F0b3IudXNlckFnZW50LGQsZSxmLGcsaDsoZD1BLm9wZXJhJiZBLm9wZXJhLnZlcnNpb24mJnBhcnNlSW50KEEub3BlcmEudmVyc2lvbigpKSl8fChoPWIoYy5tYXRjaCgvRWRnZVxcLyhbXiBdKykkLykpKXx8YihjLm1hdGNoKC9DaHJvbWVcXC8oW14gXSspLykpfHwoZT1iKGMubWF0Y2goL1ZlcnNpb25cXC8oW14gXSspIFNhZmFyaS8pKSl8fChmPWIoYy5tYXRjaCgvRmlyZWZveFxcLyhbXiBdKykvKSkpfHwoZz1hLmEuV3x8YihjLm1hdGNoKC9NU0lFIChbXiBdKykvKSkpfHxcbihnPWIoYy5tYXRjaCgvcnY6KFteICldKykvKSkpfWlmKDg8PWcmJjEwPmcpdmFyIG09YS5hLmcuWigpLGs9YS5hLmcuWigpLGw9ZnVuY3Rpb24oYil7dmFyIGM9dGhpcy5hY3RpdmVFbGVtZW50OyhjPWMmJmEuYS5nLmdldChjLGspKSYmYyhiKX0scD1mdW5jdGlvbihiLGMpe3ZhciBkPWIub3duZXJEb2N1bWVudDthLmEuZy5nZXQoZCxtKXx8KGEuYS5nLnNldChkLG0sITApLGEuYS5CKGQsXCJzZWxlY3Rpb25jaGFuZ2VcIixsKSk7YS5hLmcuc2V0KGIsayxjKX07YS5jLnRleHRJbnB1dD17aW5pdDpmdW5jdGlvbihiLGMsayl7ZnVuY3Rpb24gbChjLGQpe2EuYS5CKGIsYyxkKX1mdW5jdGlvbiBtKCl7dmFyIGQ9YS5hLmYoYygpKTtpZihudWxsPT09ZHx8ZD09PW4pZD1cIlwiO0whPT1uJiZkPT09TD9hLmEuc2V0VGltZW91dChtLDQpOmIudmFsdWUhPT1kJiYoeT0hMCxiLnZhbHVlPWQseT0hMSx2PWIudmFsdWUpfWZ1bmN0aW9uIHIoKXt3fHwoTD1iLnZhbHVlLHc9YS5hLnNldFRpbWVvdXQoeixcbjQpKX1mdW5jdGlvbiB6KCl7Y2xlYXJUaW1lb3V0KHcpO0w9dz1uO3ZhciBkPWIudmFsdWU7diE9PWQmJih2PWQsYS5tLmViKGMoKSxrLFwidGV4dElucHV0XCIsZCkpfXZhciB2PWIudmFsdWUsdyxMLEE9OT09YS5hLlc/cjp6LHk9ITE7ZyYmbChcImtleXByZXNzXCIseik7MTE+ZyYmbChcInByb3BlcnR5Y2hhbmdlXCIsZnVuY3Rpb24oYSl7eXx8XCJ2YWx1ZVwiIT09YS5wcm9wZXJ0eU5hbWV8fEEoYSl9KTs4PT1nJiYobChcImtleXVwXCIseiksbChcImtleWRvd25cIix6KSk7cCYmKHAoYixBKSxsKFwiZHJhZ2VuZFwiLHIpKTsoIWd8fDk8PWcpJiZsKFwiaW5wdXRcIixBKTs1PmUmJlwidGV4dGFyZWFcIj09PWEuYS5SKGIpPyhsKFwia2V5ZG93blwiLHIpLGwoXCJwYXN0ZVwiLHIpLGwoXCJjdXRcIixyKSk6MTE+ZD9sKFwia2V5ZG93blwiLHIpOjQ+Zj8obChcIkRPTUF1dG9Db21wbGV0ZVwiLHopLGwoXCJkcmFnZHJvcFwiLHopLGwoXCJkcm9wXCIseikpOmgmJlwibnVtYmVyXCI9PT1iLnR5cGUmJmwoXCJrZXlkb3duXCIscik7bChcImNoYW5nZVwiLFxueik7bChcImJsdXJcIix6KTthLm8obSxudWxsLHtsOmJ9KX19O2EubS53YS50ZXh0SW5wdXQ9ITA7YS5jLnRleHRpbnB1dD17cHJlcHJvY2VzczpmdW5jdGlvbihhLGIsYyl7YyhcInRleHRJbnB1dFwiLGEpfX19KSgpO2EuYy51bmlxdWVOYW1lPXtpbml0OmZ1bmN0aW9uKGIsYyl7aWYoYygpKXt2YXIgZD1cImtvX3VuaXF1ZV9cIisgKythLmMudW5pcXVlTmFtZS5yZDthLmEuWWMoYixkKX19fTthLmMudW5pcXVlTmFtZS5yZD0wO2EuYy51c2luZz17aW5pdDpmdW5jdGlvbihiLGMsZCxlLGYpe3ZhciBnO2QuaGFzKFwiYXNcIikmJihnPXthczpkLmdldChcImFzXCIpLG5vQ2hpbGRDb250ZXh0OmQuZ2V0KFwibm9DaGlsZENvbnRleHRcIil9KTtjPWYuY3JlYXRlQ2hpbGRDb250ZXh0KGMsZyk7YS5PYShjLGIpO3JldHVybntjb250cm9sc0Rlc2NlbmRhbnRCaW5kaW5nczohMH19fTthLmguZWEudXNpbmc9ITA7YS5jLnZhbHVlPXtpbml0OmZ1bmN0aW9uKGIsYyxkKXt2YXIgZT1hLmEuUihiKSxmPVwiaW5wdXRcIj09XG5lO2lmKCFmfHxcImNoZWNrYm94XCIhPWIudHlwZSYmXCJyYWRpb1wiIT1iLnR5cGUpe3ZhciBnPVtdLGg9ZC5nZXQoXCJ2YWx1ZVVwZGF0ZVwiKSxtPSExLGs9bnVsbDtoJiYoXCJzdHJpbmdcIj09dHlwZW9mIGg/Zz1baF06Zz1hLmEud2MoaCksYS5hLlBhKGcsXCJjaGFuZ2VcIikpO3ZhciBsPWZ1bmN0aW9uKCl7az1udWxsO209ITE7dmFyIGU9YygpLGY9YS53Lk0oYik7YS5tLmViKGUsZCxcInZhbHVlXCIsZil9OyFhLmEuV3x8IWZ8fFwidGV4dFwiIT1iLnR5cGV8fFwib2ZmXCI9PWIuYXV0b2NvbXBsZXRlfHxiLmZvcm0mJlwib2ZmXCI9PWIuZm9ybS5hdXRvY29tcGxldGV8fC0xIT1hLmEuQShnLFwicHJvcGVydHljaGFuZ2VcIil8fChhLmEuQihiLFwicHJvcGVydHljaGFuZ2VcIixmdW5jdGlvbigpe209ITB9KSxhLmEuQihiLFwiZm9jdXNcIixmdW5jdGlvbigpe209ITF9KSxhLmEuQihiLFwiYmx1clwiLGZ1bmN0aW9uKCl7bSYmbCgpfSkpO2EuYS5EKGcsZnVuY3Rpb24oYyl7dmFyIGQ9bDthLmEuVWQoYyxcImFmdGVyXCIpJiZcbihkPWZ1bmN0aW9uKCl7az1hLncuTShiKTthLmEuc2V0VGltZW91dChsLDApfSxjPWMuc3Vic3RyaW5nKDUpKTthLmEuQihiLGMsZCl9KTt2YXIgcDtwPWYmJlwiZmlsZVwiPT1iLnR5cGU/ZnVuY3Rpb24oKXt2YXIgZD1hLmEuZihjKCkpO251bGw9PT1kfHxkPT09bnx8XCJcIj09PWQ/Yi52YWx1ZT1cIlwiOmEudS5HKGwpfTpmdW5jdGlvbigpe3ZhciBmPWEuYS5mKGMoKSksZz1hLncuTShiKTtpZihudWxsIT09ayYmZj09PWspYS5hLnNldFRpbWVvdXQocCwwKTtlbHNlIGlmKGYhPT1nfHxnPT09bilcInNlbGVjdFwiPT09ZT8oZz1kLmdldChcInZhbHVlQWxsb3dVbnNldFwiKSxhLncuY2IoYixmLGcpLGd8fGY9PT1hLncuTShiKXx8YS51LkcobCkpOmEudy5jYihiLGYpfTtpZihcInNlbGVjdFwiPT09ZSl7dmFyIHE7YS5pLnN1YnNjcmliZShiLGEuaS5ILGZ1bmN0aW9uKCl7cT9kLmdldChcInZhbHVlQWxsb3dVbnNldFwiKT9wKCk6bCgpOihhLmEuQihiLFwiY2hhbmdlXCIsbCkscT1hLm8ocCxudWxsLHtsOmJ9KSl9LFxubnVsbCx7bm90aWZ5SW1tZWRpYXRlbHk6ITB9KX1lbHNlIGEuYS5CKGIsXCJjaGFuZ2VcIixsKSxhLm8ocCxudWxsLHtsOmJ9KX1lbHNlIGEuaWIoYix7Y2hlY2tlZFZhbHVlOmN9KX0sdXBkYXRlOmZ1bmN0aW9uKCl7fX07YS5tLndhLnZhbHVlPSEwO2EuYy52aXNpYmxlPXt1cGRhdGU6ZnVuY3Rpb24oYixjKXt2YXIgZD1hLmEuZihjKCkpLGU9XCJub25lXCIhPWIuc3R5bGUuZGlzcGxheTtkJiYhZT9iLnN0eWxlLmRpc3BsYXk9XCJcIjohZCYmZSYmKGIuc3R5bGUuZGlzcGxheT1cIm5vbmVcIil9fTthLmMuaGlkZGVuPXt1cGRhdGU6ZnVuY3Rpb24oYixjKXthLmMudmlzaWJsZS51cGRhdGUoYixmdW5jdGlvbigpe3JldHVybiFhLmEuZihjKCkpfSl9fTsoZnVuY3Rpb24oYil7YS5jW2JdPXtpbml0OmZ1bmN0aW9uKGMsZCxlLGYsZyl7cmV0dXJuIGEuYy5ldmVudC5pbml0LmNhbGwodGhpcyxjLGZ1bmN0aW9uKCl7dmFyIGE9e307YVtiXT1kKCk7cmV0dXJuIGF9LGUsZixnKX19fSkoXCJjbGlja1wiKTtcbmEuY2E9ZnVuY3Rpb24oKXt9O2EuY2EucHJvdG90eXBlLnJlbmRlclRlbXBsYXRlU291cmNlPWZ1bmN0aW9uKCl7dGhyb3cgRXJyb3IoXCJPdmVycmlkZSByZW5kZXJUZW1wbGF0ZVNvdXJjZVwiKTt9O2EuY2EucHJvdG90eXBlLmNyZWF0ZUphdmFTY3JpcHRFdmFsdWF0b3JCbG9jaz1mdW5jdGlvbigpe3Rocm93IEVycm9yKFwiT3ZlcnJpZGUgY3JlYXRlSmF2YVNjcmlwdEV2YWx1YXRvckJsb2NrXCIpO307YS5jYS5wcm90b3R5cGUubWFrZVRlbXBsYXRlU291cmNlPWZ1bmN0aW9uKGIsYyl7aWYoXCJzdHJpbmdcIj09dHlwZW9mIGIpe2M9Y3x8dzt2YXIgZD1jLmdldEVsZW1lbnRCeUlkKGIpO2lmKCFkKXRocm93IEVycm9yKFwiQ2Fubm90IGZpbmQgdGVtcGxhdGUgd2l0aCBJRCBcIitiKTtyZXR1cm4gbmV3IGEuQy5GKGQpfWlmKDE9PWIubm9kZVR5cGV8fDg9PWIubm9kZVR5cGUpcmV0dXJuIG5ldyBhLkMuaWEoYik7dGhyb3cgRXJyb3IoXCJVbmtub3duIHRlbXBsYXRlIHR5cGU6IFwiK2IpO307YS5jYS5wcm90b3R5cGUucmVuZGVyVGVtcGxhdGU9XG5mdW5jdGlvbihhLGMsZCxlKXthPXRoaXMubWFrZVRlbXBsYXRlU291cmNlKGEsZSk7cmV0dXJuIHRoaXMucmVuZGVyVGVtcGxhdGVTb3VyY2UoYSxjLGQsZSl9O2EuY2EucHJvdG90eXBlLmlzVGVtcGxhdGVSZXdyaXR0ZW49ZnVuY3Rpb24oYSxjKXtyZXR1cm4hMT09PXRoaXMuYWxsb3dUZW1wbGF0ZVJld3JpdGluZz8hMDp0aGlzLm1ha2VUZW1wbGF0ZVNvdXJjZShhLGMpLmRhdGEoXCJpc1Jld3JpdHRlblwiKX07YS5jYS5wcm90b3R5cGUucmV3cml0ZVRlbXBsYXRlPWZ1bmN0aW9uKGEsYyxkKXthPXRoaXMubWFrZVRlbXBsYXRlU291cmNlKGEsZCk7Yz1jKGEudGV4dCgpKTthLnRleHQoYyk7YS5kYXRhKFwiaXNSZXdyaXR0ZW5cIiwhMCl9O2EuYihcInRlbXBsYXRlRW5naW5lXCIsYS5jYSk7YS5rYz1mdW5jdGlvbigpe2Z1bmN0aW9uIGIoYixjLGQsaCl7Yj1hLm0uYWMoYik7Zm9yKHZhciBtPWEubS5SYSxrPTA7azxiLmxlbmd0aDtrKyspe3ZhciBsPWJba10ua2V5O2lmKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChtLFxubCkpe3ZhciBwPW1bbF07aWYoXCJmdW5jdGlvblwiPT09dHlwZW9mIHApe2lmKGw9cChiW2tdLnZhbHVlKSl0aHJvdyBFcnJvcihsKTt9ZWxzZSBpZighcCl0aHJvdyBFcnJvcihcIlRoaXMgdGVtcGxhdGUgZW5naW5lIGRvZXMgbm90IHN1cHBvcnQgdGhlICdcIitsK1wiJyBiaW5kaW5nIHdpdGhpbiBpdHMgdGVtcGxhdGVzXCIpO319ZD1cImtvLl9fdHJfYW1idG5zKGZ1bmN0aW9uKCRjb250ZXh0LCRlbGVtZW50KXtyZXR1cm4oZnVuY3Rpb24oKXtyZXR1cm57IFwiK2EubS52YihiLHt2YWx1ZUFjY2Vzc29yczohMH0pK1wiIH0gfSkoKX0sJ1wiK2QudG9Mb3dlckNhc2UoKStcIicpXCI7cmV0dXJuIGguY3JlYXRlSmF2YVNjcmlwdEV2YWx1YXRvckJsb2NrKGQpK2N9dmFyIGM9Lyg8KFthLXpdK1xcZCopKD86XFxzKyg/IWRhdGEtYmluZFxccyo9XFxzKilbYS16MC05XFwtXSsoPzo9KD86XFxcIlteXFxcIl0qXFxcInxcXCdbXlxcJ10qXFwnfFtePl0qKSk/KSpcXHMrKWRhdGEtYmluZFxccyo9XFxzKihbXCInXSkoW1xcc1xcU10qPylcXDMvZ2ksXG5kPS9cXHgzYyEtLVxccyprb1xcYlxccyooW1xcc1xcU10qPylcXHMqLS1cXHgzZS9nO3JldHVybnt4ZDpmdW5jdGlvbihiLGMsZCl7Yy5pc1RlbXBsYXRlUmV3cml0dGVuKGIsZCl8fGMucmV3cml0ZVRlbXBsYXRlKGIsZnVuY3Rpb24oYil7cmV0dXJuIGEua2MuTGQoYixjKX0sZCl9LExkOmZ1bmN0aW9uKGEsZil7cmV0dXJuIGEucmVwbGFjZShjLGZ1bmN0aW9uKGEsYyxkLGUsbCl7cmV0dXJuIGIobCxjLGQsZil9KS5yZXBsYWNlKGQsZnVuY3Rpb24oYSxjKXtyZXR1cm4gYihjLFwiXFx4M2MhLS0ga28gLS1cXHgzZVwiLFwiI2NvbW1lbnRcIixmKX0pfSxtZDpmdW5jdGlvbihiLGMpe3JldHVybiBhLmFhLlhiKGZ1bmN0aW9uKGQsaCl7dmFyIG09ZC5uZXh0U2libGluZzttJiZtLm5vZGVOYW1lLnRvTG93ZXJDYXNlKCk9PT1jJiZhLmliKG0sYixoKX0pfX19KCk7YS5iKFwiX190cl9hbWJ0bnNcIixhLmtjLm1kKTsoZnVuY3Rpb24oKXthLkM9e307YS5DLkY9ZnVuY3Rpb24oYil7aWYodGhpcy5GPWIpe3ZhciBjPVxuYS5hLlIoYik7dGhpcy5hYj1cInNjcmlwdFwiPT09Yz8xOlwidGV4dGFyZWFcIj09PWM/MjpcInRlbXBsYXRlXCI9PWMmJmIuY29udGVudCYmMTE9PT1iLmNvbnRlbnQubm9kZVR5cGU/Mzo0fX07YS5DLkYucHJvdG90eXBlLnRleHQ9ZnVuY3Rpb24oKXt2YXIgYj0xPT09dGhpcy5hYj9cInRleHRcIjoyPT09dGhpcy5hYj9cInZhbHVlXCI6XCJpbm5lckhUTUxcIjtpZigwPT1hcmd1bWVudHMubGVuZ3RoKXJldHVybiB0aGlzLkZbYl07dmFyIGM9YXJndW1lbnRzWzBdO1wiaW5uZXJIVE1MXCI9PT1iP2EuYS5mYyh0aGlzLkYsYyk6dGhpcy5GW2JdPWN9O3ZhciBiPWEuYS5nLlooKStcIl9cIjthLkMuRi5wcm90b3R5cGUuZGF0YT1mdW5jdGlvbihjKXtpZigxPT09YXJndW1lbnRzLmxlbmd0aClyZXR1cm4gYS5hLmcuZ2V0KHRoaXMuRixiK2MpO2EuYS5nLnNldCh0aGlzLkYsYitjLGFyZ3VtZW50c1sxXSl9O3ZhciBjPWEuYS5nLlooKTthLkMuRi5wcm90b3R5cGUubm9kZXM9ZnVuY3Rpb24oKXt2YXIgYj10aGlzLkY7XG5pZigwPT1hcmd1bWVudHMubGVuZ3RoKXt2YXIgZT1hLmEuZy5nZXQoYixjKXx8e30sZj1lLmxifHwoMz09PXRoaXMuYWI/Yi5jb250ZW50OjQ9PT10aGlzLmFiP2I6bik7aWYoIWZ8fGUuamQpe3ZhciBnPXRoaXMudGV4dCgpO2cmJmchPT1lLmJiJiYoZj1hLmEuTWQoZyxiLm93bmVyRG9jdW1lbnQpLGEuYS5nLnNldChiLGMse2xiOmYsYmI6ZyxqZDohMH0pKX1yZXR1cm4gZn1lPWFyZ3VtZW50c1swXTt0aGlzLmFiIT09biYmdGhpcy50ZXh0KFwiXCIpO2EuYS5nLnNldChiLGMse2xiOmV9KX07YS5DLmlhPWZ1bmN0aW9uKGEpe3RoaXMuRj1hfTthLkMuaWEucHJvdG90eXBlPW5ldyBhLkMuRjthLkMuaWEucHJvdG90eXBlLmNvbnN0cnVjdG9yPWEuQy5pYTthLkMuaWEucHJvdG90eXBlLnRleHQ9ZnVuY3Rpb24oKXtpZigwPT1hcmd1bWVudHMubGVuZ3RoKXt2YXIgYj1hLmEuZy5nZXQodGhpcy5GLGMpfHx7fTtiLmJiPT09biYmYi5sYiYmKGIuYmI9Yi5sYi5pbm5lckhUTUwpO3JldHVybiBiLmJifWEuYS5nLnNldCh0aGlzLkYsXG5jLHtiYjphcmd1bWVudHNbMF19KX07YS5iKFwidGVtcGxhdGVTb3VyY2VzXCIsYS5DKTthLmIoXCJ0ZW1wbGF0ZVNvdXJjZXMuZG9tRWxlbWVudFwiLGEuQy5GKTthLmIoXCJ0ZW1wbGF0ZVNvdXJjZXMuYW5vbnltb3VzVGVtcGxhdGVcIixhLkMuaWEpfSkoKTsoZnVuY3Rpb24oKXtmdW5jdGlvbiBiKGIsYyxkKXt2YXIgZTtmb3IoYz1hLmgubmV4dFNpYmxpbmcoYyk7YiYmKGU9YikhPT1jOyliPWEuaC5uZXh0U2libGluZyhlKSxkKGUsYil9ZnVuY3Rpb24gYyhjLGQpe2lmKGMubGVuZ3RoKXt2YXIgZT1jWzBdLGY9Y1tjLmxlbmd0aC0xXSxnPWUucGFyZW50Tm9kZSxoPWEuZ2EuaW5zdGFuY2UsbT1oLnByZXByb2Nlc3NOb2RlO2lmKG0pe2IoZSxmLGZ1bmN0aW9uKGEsYil7dmFyIGM9YS5wcmV2aW91c1NpYmxpbmcsZD1tLmNhbGwoaCxhKTtkJiYoYT09PWUmJihlPWRbMF18fGIpLGE9PT1mJiYoZj1kW2QubGVuZ3RoLTFdfHxjKSl9KTtjLmxlbmd0aD0wO2lmKCFlKXJldHVybjtlPT09Zj9jLnB1c2goZSk6XG4oYy5wdXNoKGUsZiksYS5hLlVhKGMsZykpfWIoZSxmLGZ1bmN0aW9uKGIpezEhPT1iLm5vZGVUeXBlJiY4IT09Yi5ub2RlVHlwZXx8YS52YyhkLGIpfSk7YihlLGYsZnVuY3Rpb24oYil7MSE9PWIubm9kZVR5cGUmJjghPT1iLm5vZGVUeXBlfHxhLmFhLmNkKGIsW2RdKX0pO2EuYS5VYShjLGcpfX1mdW5jdGlvbiBkKGEpe3JldHVybiBhLm5vZGVUeXBlP2E6MDxhLmxlbmd0aD9hWzBdOm51bGx9ZnVuY3Rpb24gZShiLGUsZixoLG0pe209bXx8e307dmFyIG49KGImJmQoYil8fGZ8fHt9KS5vd25lckRvY3VtZW50LEI9bS50ZW1wbGF0ZUVuZ2luZXx8ZzthLmtjLnhkKGYsQixuKTtmPUIucmVuZGVyVGVtcGxhdGUoZixoLG0sbik7aWYoXCJudW1iZXJcIiE9dHlwZW9mIGYubGVuZ3RofHwwPGYubGVuZ3RoJiZcIm51bWJlclwiIT10eXBlb2YgZlswXS5ub2RlVHlwZSl0aHJvdyBFcnJvcihcIlRlbXBsYXRlIGVuZ2luZSBtdXN0IHJldHVybiBhbiBhcnJheSBvZiBET00gbm9kZXNcIik7bj0hMTtzd2l0Y2goZSl7Y2FzZSBcInJlcGxhY2VDaGlsZHJlblwiOmEuaC52YShiLFxuZik7bj0hMDticmVhaztjYXNlIFwicmVwbGFjZU5vZGVcIjphLmEuWGMoYixmKTtuPSEwO2JyZWFrO2Nhc2UgXCJpZ25vcmVUYXJnZXROb2RlXCI6YnJlYWs7ZGVmYXVsdDp0aHJvdyBFcnJvcihcIlVua25vd24gcmVuZGVyTW9kZTogXCIrZSk7fW4mJihjKGYsaCksbS5hZnRlclJlbmRlciYmYS51LkcobS5hZnRlclJlbmRlcixudWxsLFtmLGhbbS5hc3x8XCIkZGF0YVwiXV0pLFwicmVwbGFjZUNoaWxkcmVuXCI9PWUmJmEuaS5tYShiLGEuaS5IKSk7cmV0dXJuIGZ9ZnVuY3Rpb24gZihiLGMsZCl7cmV0dXJuIGEuTyhiKT9iKCk6XCJmdW5jdGlvblwiPT09dHlwZW9mIGI/YihjLGQpOmJ9dmFyIGc7YS5nYz1mdW5jdGlvbihiKXtpZihiIT1uJiYhKGIgaW5zdGFuY2VvZiBhLmNhKSl0aHJvdyBFcnJvcihcInRlbXBsYXRlRW5naW5lIG11c3QgaW5oZXJpdCBmcm9tIGtvLnRlbXBsYXRlRW5naW5lXCIpO2c9Yn07YS5kYz1mdW5jdGlvbihiLGMsaCxtLHQpe2g9aHx8e307aWYoKGgudGVtcGxhdGVFbmdpbmV8fGcpPT1cbm4pdGhyb3cgRXJyb3IoXCJTZXQgYSB0ZW1wbGF0ZSBlbmdpbmUgYmVmb3JlIGNhbGxpbmcgcmVuZGVyVGVtcGxhdGVcIik7dD10fHxcInJlcGxhY2VDaGlsZHJlblwiO2lmKG0pe3ZhciB4PWQobSk7cmV0dXJuIGEuJChmdW5jdGlvbigpe3ZhciBnPWMmJmMgaW5zdGFuY2VvZiBhLmZhP2M6bmV3IGEuZmEoYyxudWxsLG51bGwsbnVsbCx7ZXhwb3J0RGVwZW5kZW5jaWVzOiEwfSksbj1mKGIsZy4kZGF0YSxnKSxnPWUobSx0LG4sZyxoKTtcInJlcGxhY2VOb2RlXCI9PXQmJihtPWcseD1kKG0pKX0sbnVsbCx7U2E6ZnVuY3Rpb24oKXtyZXR1cm4heHx8IWEuYS5TYih4KX0sbDp4JiZcInJlcGxhY2VOb2RlXCI9PXQ/eC5wYXJlbnROb2RlOnh9KX1yZXR1cm4gYS5hYS5YYihmdW5jdGlvbihkKXthLmRjKGIsYyxoLGQsXCJyZXBsYWNlTm9kZVwiKX0pfTthLlFkPWZ1bmN0aW9uKGIsZCxnLGgsbSl7ZnVuY3Rpb24geChiLGMpe2EudS5HKGEuYS5lYyxudWxsLFtoLGIsdSxnLHIsY10pO2EuaS5tYShoLGEuaS5IKX1cbmZ1bmN0aW9uIHIoYSxiKXtjKGIsdik7Zy5hZnRlclJlbmRlciYmZy5hZnRlclJlbmRlcihiLGEpO3Y9bnVsbH1mdW5jdGlvbiB1KGEsYyl7dj1tLmNyZWF0ZUNoaWxkQ29udGV4dChhLHthczp6LG5vQ2hpbGRDb250ZXh0Omcubm9DaGlsZENvbnRleHQsZXh0ZW5kOmZ1bmN0aW9uKGEpe2EuJGluZGV4PWM7eiYmKGFbeitcIkluZGV4XCJdPWMpfX0pO3ZhciBkPWYoYixhLHYpO3JldHVybiBlKGgsXCJpZ25vcmVUYXJnZXROb2RlXCIsZCx2LGcpfXZhciB2LHo9Zy5hcyx3PSExPT09Zy5pbmNsdWRlRGVzdHJveWVkfHxhLm9wdGlvbnMuZm9yZWFjaEhpZGVzRGVzdHJveWVkJiYhZy5pbmNsdWRlRGVzdHJveWVkO2lmKHd8fGcuYmVmb3JlUmVtb3ZlfHwhYS5QYyhkKSlyZXR1cm4gYS4kKGZ1bmN0aW9uKCl7dmFyIGI9YS5hLmYoZCl8fFtdO1widW5kZWZpbmVkXCI9PXR5cGVvZiBiLmxlbmd0aCYmKGI9W2JdKTt3JiYoYj1hLmEuamIoYixmdW5jdGlvbihiKXtyZXR1cm4gYj09PW58fG51bGw9PT1ifHxcbiFhLmEuZihiLl9kZXN0cm95KX0pKTt4KGIpfSxudWxsLHtsOmh9KTt4KGQudigpKTt2YXIgQT1kLnN1YnNjcmliZShmdW5jdGlvbihhKXt4KGQoKSxhKX0sbnVsbCxcImFycmF5Q2hhbmdlXCIpO0EubChoKTtyZXR1cm4gQX07dmFyIGg9YS5hLmcuWigpLG09YS5hLmcuWigpO2EuYy50ZW1wbGF0ZT17aW5pdDpmdW5jdGlvbihiLGMpe3ZhciBkPWEuYS5mKGMoKSk7aWYoXCJzdHJpbmdcIj09dHlwZW9mIGR8fFwibmFtZVwiaW4gZClhLmguRWEoYik7ZWxzZSBpZihcIm5vZGVzXCJpbiBkKXtkPWQubm9kZXN8fFtdO2lmKGEuTyhkKSl0aHJvdyBFcnJvcignVGhlIFwibm9kZXNcIiBvcHRpb24gbXVzdCBiZSBhIHBsYWluLCBub24tb2JzZXJ2YWJsZSBhcnJheS4nKTt2YXIgZT1kWzBdJiZkWzBdLnBhcmVudE5vZGU7ZSYmYS5hLmcuZ2V0KGUsbSl8fChlPWEuYS5ZYihkKSxhLmEuZy5zZXQoZSxtLCEwKSk7KG5ldyBhLkMuaWEoYikpLm5vZGVzKGUpfWVsc2UgaWYoZD1hLmguY2hpbGROb2RlcyhiKSwwPGQubGVuZ3RoKWU9XG5hLmEuWWIoZCksKG5ldyBhLkMuaWEoYikpLm5vZGVzKGUpO2Vsc2UgdGhyb3cgRXJyb3IoXCJBbm9ueW1vdXMgdGVtcGxhdGUgZGVmaW5lZCwgYnV0IG5vIHRlbXBsYXRlIGNvbnRlbnQgd2FzIHByb3ZpZGVkXCIpO3JldHVybntjb250cm9sc0Rlc2NlbmRhbnRCaW5kaW5nczohMH19LHVwZGF0ZTpmdW5jdGlvbihiLGMsZCxlLGYpe3ZhciBnPWMoKTtjPWEuYS5mKGcpO2Q9ITA7ZT1udWxsO1wic3RyaW5nXCI9PXR5cGVvZiBjP2M9e306KGc9XCJuYW1lXCJpbiBjP2MubmFtZTpiLFwiaWZcImluIGMmJihkPWEuYS5mKGNbXCJpZlwiXSkpLGQmJlwiaWZub3RcImluIGMmJihkPSFhLmEuZihjLmlmbm90KSksZCYmIWcmJihkPSExKSk7XCJmb3JlYWNoXCJpbiBjP2U9YS5RZChnLGQmJmMuZm9yZWFjaHx8W10sYyxiLGYpOmQ/KGQ9ZixcImRhdGFcImluIGMmJihkPWYuY3JlYXRlQ2hpbGRDb250ZXh0KGMuZGF0YSx7YXM6Yy5hcyxub0NoaWxkQ29udGV4dDpjLm5vQ2hpbGRDb250ZXh0LGV4cG9ydERlcGVuZGVuY2llczohMH0pKSxcbmU9YS5kYyhnLGQsYyxiKSk6YS5oLkVhKGIpO2Y9ZTsoYz1hLmEuZy5nZXQoYixoKSkmJlwiZnVuY3Rpb25cIj09dHlwZW9mIGMucyYmYy5zKCk7YS5hLmcuc2V0KGIsaCwhZnx8Zi5qYSYmIWYuamEoKT9uOmYpfX07YS5tLlJhLnRlbXBsYXRlPWZ1bmN0aW9uKGIpe2I9YS5tLmFjKGIpO3JldHVybiAxPT1iLmxlbmd0aCYmYlswXS51bmtub3dufHxhLm0uSWQoYixcIm5hbWVcIik/bnVsbDpcIlRoaXMgdGVtcGxhdGUgZW5naW5lIGRvZXMgbm90IHN1cHBvcnQgYW5vbnltb3VzIHRlbXBsYXRlcyBuZXN0ZWQgd2l0aGluIGl0cyB0ZW1wbGF0ZXNcIn07YS5oLmVhLnRlbXBsYXRlPSEwfSkoKTthLmIoXCJzZXRUZW1wbGF0ZUVuZ2luZVwiLGEuZ2MpO2EuYihcInJlbmRlclRlbXBsYXRlXCIsYS5kYyk7YS5hLktjPWZ1bmN0aW9uKGEsYyxkKXtpZihhLmxlbmd0aCYmYy5sZW5ndGgpe3ZhciBlLGYsZyxoLG07Zm9yKGU9Zj0wOyghZHx8ZTxkKSYmKGg9YVtmXSk7KytmKXtmb3IoZz0wO209Y1tnXTsrK2cpaWYoaC52YWx1ZT09PVxubS52YWx1ZSl7aC5tb3ZlZD1tLmluZGV4O20ubW92ZWQ9aC5pbmRleDtjLnNwbGljZShnLDEpO2U9Zz0wO2JyZWFrfWUrPWd9fX07YS5hLlBiPWZ1bmN0aW9uKCl7ZnVuY3Rpb24gYihiLGQsZSxmLGcpe3ZhciBoPU1hdGgubWluLG09TWF0aC5tYXgsaz1bXSxsLHA9Yi5sZW5ndGgscSxuPWQubGVuZ3RoLHI9bi1wfHwxLHY9cCtuKzEsdSx3LHo7Zm9yKGw9MDtsPD1wO2wrKylmb3Iodz11LGsucHVzaCh1PVtdKSx6PWgobixsK3IpLHE9bSgwLGwtMSk7cTw9ejtxKyspdVtxXT1xP2w/YltsLTFdPT09ZFtxLTFdP3dbcS0xXTpoKHdbcV18fHYsdVtxLTFdfHx2KSsxOnErMTpsKzE7aD1bXTttPVtdO3I9W107bD1wO2ZvcihxPW47bHx8cTspbj1rW2xdW3FdLTEscSYmbj09PWtbbF1bcS0xXT9tLnB1c2goaFtoLmxlbmd0aF09e3N0YXR1czplLHZhbHVlOmRbLS1xXSxpbmRleDpxfSk6bCYmbj09PWtbbC0xXVtxXT9yLnB1c2goaFtoLmxlbmd0aF09e3N0YXR1czpmLHZhbHVlOmJbLS1sXSxpbmRleDpsfSk6XG4oLS1xLC0tbCxnLnNwYXJzZXx8aC5wdXNoKHtzdGF0dXM6XCJyZXRhaW5lZFwiLHZhbHVlOmRbcV19KSk7YS5hLktjKHIsbSwhZy5kb250TGltaXRNb3ZlcyYmMTAqcCk7cmV0dXJuIGgucmV2ZXJzZSgpfXJldHVybiBmdW5jdGlvbihhLGQsZSl7ZT1cImJvb2xlYW5cIj09PXR5cGVvZiBlP3tkb250TGltaXRNb3ZlczplfTplfHx7fTthPWF8fFtdO2Q9ZHx8W107cmV0dXJuIGEubGVuZ3RoPGQubGVuZ3RoP2IoYSxkLFwiYWRkZWRcIixcImRlbGV0ZWRcIixlKTpiKGQsYSxcImRlbGV0ZWRcIixcImFkZGVkXCIsZSl9fSgpO2EuYihcInV0aWxzLmNvbXBhcmVBcnJheXNcIixhLmEuUGIpOyhmdW5jdGlvbigpe2Z1bmN0aW9uIGIoYixjLGQsaCxtKXt2YXIgaz1bXSxsPWEuJChmdW5jdGlvbigpe3ZhciBsPWMoZCxtLGEuYS5VYShrLGIpKXx8W107MDxrLmxlbmd0aCYmKGEuYS5YYyhrLGwpLGgmJmEudS5HKGgsbnVsbCxbZCxsLG1dKSk7ay5sZW5ndGg9MDthLmEuTmIoayxsKX0sbnVsbCx7bDpiLFNhOmZ1bmN0aW9uKCl7cmV0dXJuIWEuYS5rZChrKX19KTtcbnJldHVybntZOmssJDpsLmphKCk/bDpufX12YXIgYz1hLmEuZy5aKCksZD1hLmEuZy5aKCk7YS5hLmVjPWZ1bmN0aW9uKGUsZixnLGgsbSxrKXtmdW5jdGlvbiBsKGIpe3k9e0FhOmIscGI6YS50YSh3KyspfTt2LnB1c2goeSk7cnx8Ri5wdXNoKHkpfWZ1bmN0aW9uIHAoYil7eT10W2JdO3chPT15LnBiLnYoKSYmRC5wdXNoKHkpO3kucGIodysrKTthLmEuVWEoeS5ZLGUpO3YucHVzaCh5KX1mdW5jdGlvbiBxKGIsYyl7aWYoYilmb3IodmFyIGQ9MCxlPWMubGVuZ3RoO2Q8ZTtkKyspYS5hLkQoY1tkXS5ZLGZ1bmN0aW9uKGEpe2IoYSxkLGNbZF0uQWEpfSl9Zj1mfHxbXTtcInVuZGVmaW5lZFwiPT10eXBlb2YgZi5sZW5ndGgmJihmPVtmXSk7aD1ofHx7fTt2YXIgdD1hLmEuZy5nZXQoZSxjKSxyPSF0LHY9W10sdT0wLHc9MCx6PVtdLEE9W10sQz1bXSxEPVtdLEY9W10seSxJPTA7aWYocilhLmEuRChmLGwpO2Vsc2V7aWYoIWt8fHQmJnQuX2NvdW50V2FpdGluZ0ZvclJlbW92ZSl7dmFyIEU9XG5hLmEuTWIodCxmdW5jdGlvbihhKXtyZXR1cm4gYS5BYX0pO2s9YS5hLlBiKEUsZix7ZG9udExpbWl0TW92ZXM6aC5kb250TGltaXRNb3ZlcyxzcGFyc2U6ITB9KX1mb3IodmFyIEU9MCxHLEgsSztHPWtbRV07RSsrKXN3aXRjaChIPUcubW92ZWQsSz1HLmluZGV4LEcuc3RhdHVzKXtjYXNlIFwiZGVsZXRlZFwiOmZvcig7dTxLOylwKHUrKyk7SD09PW4mJih5PXRbdV0seS4kJiYoeS4kLnMoKSx5LiQ9biksYS5hLlVhKHkuWSxlKS5sZW5ndGgmJihoLmJlZm9yZVJlbW92ZSYmKHYucHVzaCh5KSxJKysseS5BYT09PWQ/eT1udWxsOkMucHVzaCh5KSkseSYmei5wdXNoLmFwcGx5KHoseS5ZKSkpO3UrKzticmVhaztjYXNlIFwiYWRkZWRcIjpmb3IoO3c8SzspcCh1KyspO0ghPT1uPyhBLnB1c2godi5sZW5ndGgpLHAoSCkpOmwoRy52YWx1ZSl9Zm9yKDt3PGYubGVuZ3RoOylwKHUrKyk7di5fY291bnRXYWl0aW5nRm9yUmVtb3ZlPUl9YS5hLmcuc2V0KGUsYyx2KTtxKGguYmVmb3JlTW92ZSxEKTthLmEuRCh6LFxuaC5iZWZvcmVSZW1vdmU/YS5vYTphLnJlbW92ZU5vZGUpO3ZhciBNLE8sUDt0cnl7UD1lLm93bmVyRG9jdW1lbnQuYWN0aXZlRWxlbWVudH1jYXRjaChOKXt9aWYoQS5sZW5ndGgpZm9yKDsoRT1BLnNoaWZ0KCkpIT1uOyl7eT12W0VdO2ZvcihNPW47RTspaWYoKE89dlstLUVdLlkpJiZPLmxlbmd0aCl7TT1PW08ubGVuZ3RoLTFdO2JyZWFrfWZvcihmPTA7dT15LllbZl07TT11LGYrKylhLmguV2IoZSx1LE0pfWZvcihFPTA7eT12W0VdO0UrKyl7eS5ZfHxhLmEuZXh0ZW5kKHksYihlLGcseS5BYSxtLHkucGIpKTtmb3IoZj0wO3U9eS5ZW2ZdO009dSxmKyspYS5oLldiKGUsdSxNKTsheS5FZCYmbSYmKG0oeS5BYSx5LlkseS5wYikseS5FZD0hMCxNPXkuWVt5LlkubGVuZ3RoLTFdKX1QJiZlLm93bmVyRG9jdW1lbnQuYWN0aXZlRWxlbWVudCE9UCYmUC5mb2N1cygpO3EoaC5iZWZvcmVSZW1vdmUsQyk7Zm9yKEU9MDtFPEMubGVuZ3RoOysrRSlDW0VdLkFhPWQ7cShoLmFmdGVyTW92ZSxEKTtcbnEoaC5hZnRlckFkZCxGKX19KSgpO2EuYihcInV0aWxzLnNldERvbU5vZGVDaGlsZHJlbkZyb21BcnJheU1hcHBpbmdcIixhLmEuZWMpO2EuYmE9ZnVuY3Rpb24oKXt0aGlzLmFsbG93VGVtcGxhdGVSZXdyaXRpbmc9ITF9O2EuYmEucHJvdG90eXBlPW5ldyBhLmNhO2EuYmEucHJvdG90eXBlLmNvbnN0cnVjdG9yPWEuYmE7YS5iYS5wcm90b3R5cGUucmVuZGVyVGVtcGxhdGVTb3VyY2U9ZnVuY3Rpb24oYixjLGQsZSl7aWYoYz0oOT5hLmEuVz8wOmIubm9kZXMpP2Iubm9kZXMoKTpudWxsKXJldHVybiBhLmEubGEoYy5jbG9uZU5vZGUoITApLmNoaWxkTm9kZXMpO2I9Yi50ZXh0KCk7cmV0dXJuIGEuYS51YShiLGUpfTthLmJhLk1hPW5ldyBhLmJhO2EuZ2MoYS5iYS5NYSk7YS5iKFwibmF0aXZlVGVtcGxhdGVFbmdpbmVcIixhLmJhKTsoZnVuY3Rpb24oKXthLiRhPWZ1bmN0aW9uKCl7dmFyIGE9dGhpcy5IZD1mdW5jdGlvbigpe2lmKCF2fHwhdi50bXBsKXJldHVybiAwO3RyeXtpZigwPD12LnRtcGwudGFnLnRtcGwub3Blbi50b1N0cmluZygpLmluZGV4T2YoXCJfX1wiKSlyZXR1cm4gMn1jYXRjaChhKXt9cmV0dXJuIDF9KCk7XG50aGlzLnJlbmRlclRlbXBsYXRlU291cmNlPWZ1bmN0aW9uKGIsZSxmLGcpe2c9Z3x8dztmPWZ8fHt9O2lmKDI+YSl0aHJvdyBFcnJvcihcIllvdXIgdmVyc2lvbiBvZiBqUXVlcnkudG1wbCBpcyB0b28gb2xkLiBQbGVhc2UgdXBncmFkZSB0byBqUXVlcnkudG1wbCAxLjAuMHByZSBvciBsYXRlci5cIik7dmFyIGg9Yi5kYXRhKFwicHJlY29tcGlsZWRcIik7aHx8KGg9Yi50ZXh0KCl8fFwiXCIsaD12LnRlbXBsYXRlKG51bGwsXCJ7e2tvX3dpdGggJGl0ZW0ua29CaW5kaW5nQ29udGV4dH19XCIraCtcInt7L2tvX3dpdGh9fVwiKSxiLmRhdGEoXCJwcmVjb21waWxlZFwiLGgpKTtiPVtlLiRkYXRhXTtlPXYuZXh0ZW5kKHtrb0JpbmRpbmdDb250ZXh0OmV9LGYudGVtcGxhdGVPcHRpb25zKTtlPXYudG1wbChoLGIsZSk7ZS5hcHBlbmRUbyhnLmNyZWF0ZUVsZW1lbnQoXCJkaXZcIikpO3YuZnJhZ21lbnRzPXt9O3JldHVybiBlfTt0aGlzLmNyZWF0ZUphdmFTY3JpcHRFdmFsdWF0b3JCbG9jaz1mdW5jdGlvbihhKXtyZXR1cm5cInt7a29fY29kZSAoKGZ1bmN0aW9uKCkgeyByZXR1cm4gXCIrXG5hK1wiIH0pKCkpIH19XCJ9O3RoaXMuYWRkVGVtcGxhdGU9ZnVuY3Rpb24oYSxiKXt3LndyaXRlKFwiPHNjcmlwdCB0eXBlPSd0ZXh0L2h0bWwnIGlkPSdcIithK1wiJz5cIitiK1wiXFx4M2Mvc2NyaXB0PlwiKX07MDxhJiYodi50bXBsLnRhZy5rb19jb2RlPXtvcGVuOlwiX18ucHVzaCgkMSB8fCAnJyk7XCJ9LHYudG1wbC50YWcua29fd2l0aD17b3BlbjpcIndpdGgoJDEpIHtcIixjbG9zZTpcIn0gXCJ9KX07YS4kYS5wcm90b3R5cGU9bmV3IGEuY2E7YS4kYS5wcm90b3R5cGUuY29uc3RydWN0b3I9YS4kYTt2YXIgYj1uZXcgYS4kYTswPGIuSGQmJmEuZ2MoYik7YS5iKFwianF1ZXJ5VG1wbFRlbXBsYXRlRW5naW5lXCIsYS4kYSl9KSgpfSl9KSgpO30pKCk7XG4iLCIvKipcbiAqIFRoaXMgbGlicmFyeSBtb2RpZmllcyB0aGUgZGlmZi1wYXRjaC1tYXRjaCBsaWJyYXJ5IGJ5IE5laWwgRnJhc2VyXG4gKiBieSByZW1vdmluZyB0aGUgcGF0Y2ggYW5kIG1hdGNoIGZ1bmN0aW9uYWxpdHkgYW5kIGNlcnRhaW4gYWR2YW5jZWRcbiAqIG9wdGlvbnMgaW4gdGhlIGRpZmYgZnVuY3Rpb24uIFRoZSBvcmlnaW5hbCBsaWNlbnNlIGlzIGFzIGZvbGxvd3M6XG4gKlxuICogPT09XG4gKlxuICogRGlmZiBNYXRjaCBhbmQgUGF0Y2hcbiAqXG4gKiBDb3B5cmlnaHQgMjAwNiBHb29nbGUgSW5jLlxuICogaHR0cDovL2NvZGUuZ29vZ2xlLmNvbS9wL2dvb2dsZS1kaWZmLW1hdGNoLXBhdGNoL1xuICpcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XG4gKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG4gKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbiAqXG4gKiAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuICpcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcbiAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcbiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxuICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxuICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG4gKi9cblxuXG4vKipcbiAqIFRoZSBkYXRhIHN0cnVjdHVyZSByZXByZXNlbnRpbmcgYSBkaWZmIGlzIGFuIGFycmF5IG9mIHR1cGxlczpcbiAqIFtbRElGRl9ERUxFVEUsICdIZWxsbyddLCBbRElGRl9JTlNFUlQsICdHb29kYnllJ10sIFtESUZGX0VRVUFMLCAnIHdvcmxkLiddXVxuICogd2hpY2ggbWVhbnM6IGRlbGV0ZSAnSGVsbG8nLCBhZGQgJ0dvb2RieWUnIGFuZCBrZWVwICcgd29ybGQuJ1xuICovXG52YXIgRElGRl9ERUxFVEUgPSAtMTtcbnZhciBESUZGX0lOU0VSVCA9IDE7XG52YXIgRElGRl9FUVVBTCA9IDA7XG5cblxuLyoqXG4gKiBGaW5kIHRoZSBkaWZmZXJlbmNlcyBiZXR3ZWVuIHR3byB0ZXh0cy4gIFNpbXBsaWZpZXMgdGhlIHByb2JsZW0gYnkgc3RyaXBwaW5nXG4gKiBhbnkgY29tbW9uIHByZWZpeCBvciBzdWZmaXggb2ZmIHRoZSB0ZXh0cyBiZWZvcmUgZGlmZmluZy5cbiAqIEBwYXJhbSB7c3RyaW5nfSB0ZXh0MSBPbGQgc3RyaW5nIHRvIGJlIGRpZmZlZC5cbiAqIEBwYXJhbSB7c3RyaW5nfSB0ZXh0MiBOZXcgc3RyaW5nIHRvIGJlIGRpZmZlZC5cbiAqIEBwYXJhbSB7SW50fE9iamVjdH0gW2N1cnNvcl9wb3NdIEVkaXQgcG9zaXRpb24gaW4gdGV4dDEgb3Igb2JqZWN0IHdpdGggbW9yZSBpbmZvXG4gKiBAcmV0dXJuIHtBcnJheX0gQXJyYXkgb2YgZGlmZiB0dXBsZXMuXG4gKi9cbmZ1bmN0aW9uIGRpZmZfbWFpbih0ZXh0MSwgdGV4dDIsIGN1cnNvcl9wb3MsIF9maXhfdW5pY29kZSkge1xuICAvLyBDaGVjayBmb3IgZXF1YWxpdHlcbiAgaWYgKHRleHQxID09PSB0ZXh0Mikge1xuICAgIGlmICh0ZXh0MSkge1xuICAgICAgcmV0dXJuIFtbRElGRl9FUVVBTCwgdGV4dDFdXTtcbiAgICB9XG4gICAgcmV0dXJuIFtdO1xuICB9XG5cbiAgaWYgKGN1cnNvcl9wb3MgIT0gbnVsbCkge1xuICAgIHZhciBlZGl0ZGlmZiA9IGZpbmRfY3Vyc29yX2VkaXRfZGlmZih0ZXh0MSwgdGV4dDIsIGN1cnNvcl9wb3MpO1xuICAgIGlmIChlZGl0ZGlmZikge1xuICAgICAgcmV0dXJuIGVkaXRkaWZmO1xuICAgIH1cbiAgfVxuXG4gIC8vIFRyaW0gb2ZmIGNvbW1vbiBwcmVmaXggKHNwZWVkdXApLlxuICB2YXIgY29tbW9ubGVuZ3RoID0gZGlmZl9jb21tb25QcmVmaXgodGV4dDEsIHRleHQyKTtcbiAgdmFyIGNvbW1vbnByZWZpeCA9IHRleHQxLnN1YnN0cmluZygwLCBjb21tb25sZW5ndGgpO1xuICB0ZXh0MSA9IHRleHQxLnN1YnN0cmluZyhjb21tb25sZW5ndGgpO1xuICB0ZXh0MiA9IHRleHQyLnN1YnN0cmluZyhjb21tb25sZW5ndGgpO1xuXG4gIC8vIFRyaW0gb2ZmIGNvbW1vbiBzdWZmaXggKHNwZWVkdXApLlxuICBjb21tb25sZW5ndGggPSBkaWZmX2NvbW1vblN1ZmZpeCh0ZXh0MSwgdGV4dDIpO1xuICB2YXIgY29tbW9uc3VmZml4ID0gdGV4dDEuc3Vic3RyaW5nKHRleHQxLmxlbmd0aCAtIGNvbW1vbmxlbmd0aCk7XG4gIHRleHQxID0gdGV4dDEuc3Vic3RyaW5nKDAsIHRleHQxLmxlbmd0aCAtIGNvbW1vbmxlbmd0aCk7XG4gIHRleHQyID0gdGV4dDIuc3Vic3RyaW5nKDAsIHRleHQyLmxlbmd0aCAtIGNvbW1vbmxlbmd0aCk7XG5cbiAgLy8gQ29tcHV0ZSB0aGUgZGlmZiBvbiB0aGUgbWlkZGxlIGJsb2NrLlxuICB2YXIgZGlmZnMgPSBkaWZmX2NvbXB1dGVfKHRleHQxLCB0ZXh0Mik7XG5cbiAgLy8gUmVzdG9yZSB0aGUgcHJlZml4IGFuZCBzdWZmaXguXG4gIGlmIChjb21tb25wcmVmaXgpIHtcbiAgICBkaWZmcy51bnNoaWZ0KFtESUZGX0VRVUFMLCBjb21tb25wcmVmaXhdKTtcbiAgfVxuICBpZiAoY29tbW9uc3VmZml4KSB7XG4gICAgZGlmZnMucHVzaChbRElGRl9FUVVBTCwgY29tbW9uc3VmZml4XSk7XG4gIH1cbiAgZGlmZl9jbGVhbnVwTWVyZ2UoZGlmZnMsIF9maXhfdW5pY29kZSk7XG4gIHJldHVybiBkaWZmcztcbn07XG5cblxuLyoqXG4gKiBGaW5kIHRoZSBkaWZmZXJlbmNlcyBiZXR3ZWVuIHR3byB0ZXh0cy4gIEFzc3VtZXMgdGhhdCB0aGUgdGV4dHMgZG8gbm90XG4gKiBoYXZlIGFueSBjb21tb24gcHJlZml4IG9yIHN1ZmZpeC5cbiAqIEBwYXJhbSB7c3RyaW5nfSB0ZXh0MSBPbGQgc3RyaW5nIHRvIGJlIGRpZmZlZC5cbiAqIEBwYXJhbSB7c3RyaW5nfSB0ZXh0MiBOZXcgc3RyaW5nIHRvIGJlIGRpZmZlZC5cbiAqIEByZXR1cm4ge0FycmF5fSBBcnJheSBvZiBkaWZmIHR1cGxlcy5cbiAqL1xuZnVuY3Rpb24gZGlmZl9jb21wdXRlXyh0ZXh0MSwgdGV4dDIpIHtcbiAgdmFyIGRpZmZzO1xuXG4gIGlmICghdGV4dDEpIHtcbiAgICAvLyBKdXN0IGFkZCBzb21lIHRleHQgKHNwZWVkdXApLlxuICAgIHJldHVybiBbW0RJRkZfSU5TRVJULCB0ZXh0Ml1dO1xuICB9XG5cbiAgaWYgKCF0ZXh0Mikge1xuICAgIC8vIEp1c3QgZGVsZXRlIHNvbWUgdGV4dCAoc3BlZWR1cCkuXG4gICAgcmV0dXJuIFtbRElGRl9ERUxFVEUsIHRleHQxXV07XG4gIH1cblxuICB2YXIgbG9uZ3RleHQgPSB0ZXh0MS5sZW5ndGggPiB0ZXh0Mi5sZW5ndGggPyB0ZXh0MSA6IHRleHQyO1xuICB2YXIgc2hvcnR0ZXh0ID0gdGV4dDEubGVuZ3RoID4gdGV4dDIubGVuZ3RoID8gdGV4dDIgOiB0ZXh0MTtcbiAgdmFyIGkgPSBsb25ndGV4dC5pbmRleE9mKHNob3J0dGV4dCk7XG4gIGlmIChpICE9PSAtMSkge1xuICAgIC8vIFNob3J0ZXIgdGV4dCBpcyBpbnNpZGUgdGhlIGxvbmdlciB0ZXh0IChzcGVlZHVwKS5cbiAgICBkaWZmcyA9IFtcbiAgICAgIFtESUZGX0lOU0VSVCwgbG9uZ3RleHQuc3Vic3RyaW5nKDAsIGkpXSxcbiAgICAgIFtESUZGX0VRVUFMLCBzaG9ydHRleHRdLFxuICAgICAgW0RJRkZfSU5TRVJULCBsb25ndGV4dC5zdWJzdHJpbmcoaSArIHNob3J0dGV4dC5sZW5ndGgpXVxuICAgIF07XG4gICAgLy8gU3dhcCBpbnNlcnRpb25zIGZvciBkZWxldGlvbnMgaWYgZGlmZiBpcyByZXZlcnNlZC5cbiAgICBpZiAodGV4dDEubGVuZ3RoID4gdGV4dDIubGVuZ3RoKSB7XG4gICAgICBkaWZmc1swXVswXSA9IGRpZmZzWzJdWzBdID0gRElGRl9ERUxFVEU7XG4gICAgfVxuICAgIHJldHVybiBkaWZmcztcbiAgfVxuXG4gIGlmIChzaG9ydHRleHQubGVuZ3RoID09PSAxKSB7XG4gICAgLy8gU2luZ2xlIGNoYXJhY3RlciBzdHJpbmcuXG4gICAgLy8gQWZ0ZXIgdGhlIHByZXZpb3VzIHNwZWVkdXAsIHRoZSBjaGFyYWN0ZXIgY2FuJ3QgYmUgYW4gZXF1YWxpdHkuXG4gICAgcmV0dXJuIFtbRElGRl9ERUxFVEUsIHRleHQxXSwgW0RJRkZfSU5TRVJULCB0ZXh0Ml1dO1xuICB9XG5cbiAgLy8gQ2hlY2sgdG8gc2VlIGlmIHRoZSBwcm9ibGVtIGNhbiBiZSBzcGxpdCBpbiB0d28uXG4gIHZhciBobSA9IGRpZmZfaGFsZk1hdGNoXyh0ZXh0MSwgdGV4dDIpO1xuICBpZiAoaG0pIHtcbiAgICAvLyBBIGhhbGYtbWF0Y2ggd2FzIGZvdW5kLCBzb3J0IG91dCB0aGUgcmV0dXJuIGRhdGEuXG4gICAgdmFyIHRleHQxX2EgPSBobVswXTtcbiAgICB2YXIgdGV4dDFfYiA9IGhtWzFdO1xuICAgIHZhciB0ZXh0Ml9hID0gaG1bMl07XG4gICAgdmFyIHRleHQyX2IgPSBobVszXTtcbiAgICB2YXIgbWlkX2NvbW1vbiA9IGhtWzRdO1xuICAgIC8vIFNlbmQgYm90aCBwYWlycyBvZmYgZm9yIHNlcGFyYXRlIHByb2Nlc3NpbmcuXG4gICAgdmFyIGRpZmZzX2EgPSBkaWZmX21haW4odGV4dDFfYSwgdGV4dDJfYSk7XG4gICAgdmFyIGRpZmZzX2IgPSBkaWZmX21haW4odGV4dDFfYiwgdGV4dDJfYik7XG4gICAgLy8gTWVyZ2UgdGhlIHJlc3VsdHMuXG4gICAgcmV0dXJuIGRpZmZzX2EuY29uY2F0KFtbRElGRl9FUVVBTCwgbWlkX2NvbW1vbl1dLCBkaWZmc19iKTtcbiAgfVxuXG4gIHJldHVybiBkaWZmX2Jpc2VjdF8odGV4dDEsIHRleHQyKTtcbn07XG5cblxuLyoqXG4gKiBGaW5kIHRoZSAnbWlkZGxlIHNuYWtlJyBvZiBhIGRpZmYsIHNwbGl0IHRoZSBwcm9ibGVtIGluIHR3b1xuICogYW5kIHJldHVybiB0aGUgcmVjdXJzaXZlbHkgY29uc3RydWN0ZWQgZGlmZi5cbiAqIFNlZSBNeWVycyAxOTg2IHBhcGVyOiBBbiBPKE5EKSBEaWZmZXJlbmNlIEFsZ29yaXRobSBhbmQgSXRzIFZhcmlhdGlvbnMuXG4gKiBAcGFyYW0ge3N0cmluZ30gdGV4dDEgT2xkIHN0cmluZyB0byBiZSBkaWZmZWQuXG4gKiBAcGFyYW0ge3N0cmluZ30gdGV4dDIgTmV3IHN0cmluZyB0byBiZSBkaWZmZWQuXG4gKiBAcmV0dXJuIHtBcnJheX0gQXJyYXkgb2YgZGlmZiB0dXBsZXMuXG4gKiBAcHJpdmF0ZVxuICovXG5mdW5jdGlvbiBkaWZmX2Jpc2VjdF8odGV4dDEsIHRleHQyKSB7XG4gIC8vIENhY2hlIHRoZSB0ZXh0IGxlbmd0aHMgdG8gcHJldmVudCBtdWx0aXBsZSBjYWxscy5cbiAgdmFyIHRleHQxX2xlbmd0aCA9IHRleHQxLmxlbmd0aDtcbiAgdmFyIHRleHQyX2xlbmd0aCA9IHRleHQyLmxlbmd0aDtcbiAgdmFyIG1heF9kID0gTWF0aC5jZWlsKCh0ZXh0MV9sZW5ndGggKyB0ZXh0Ml9sZW5ndGgpIC8gMik7XG4gIHZhciB2X29mZnNldCA9IG1heF9kO1xuICB2YXIgdl9sZW5ndGggPSAyICogbWF4X2Q7XG4gIHZhciB2MSA9IG5ldyBBcnJheSh2X2xlbmd0aCk7XG4gIHZhciB2MiA9IG5ldyBBcnJheSh2X2xlbmd0aCk7XG4gIC8vIFNldHRpbmcgYWxsIGVsZW1lbnRzIHRvIC0xIGlzIGZhc3RlciBpbiBDaHJvbWUgJiBGaXJlZm94IHRoYW4gbWl4aW5nXG4gIC8vIGludGVnZXJzIGFuZCB1bmRlZmluZWQuXG4gIGZvciAodmFyIHggPSAwOyB4IDwgdl9sZW5ndGg7IHgrKykge1xuICAgIHYxW3hdID0gLTE7XG4gICAgdjJbeF0gPSAtMTtcbiAgfVxuICB2MVt2X29mZnNldCArIDFdID0gMDtcbiAgdjJbdl9vZmZzZXQgKyAxXSA9IDA7XG4gIHZhciBkZWx0YSA9IHRleHQxX2xlbmd0aCAtIHRleHQyX2xlbmd0aDtcbiAgLy8gSWYgdGhlIHRvdGFsIG51bWJlciBvZiBjaGFyYWN0ZXJzIGlzIG9kZCwgdGhlbiB0aGUgZnJvbnQgcGF0aCB3aWxsIGNvbGxpZGVcbiAgLy8gd2l0aCB0aGUgcmV2ZXJzZSBwYXRoLlxuICB2YXIgZnJvbnQgPSAoZGVsdGEgJSAyICE9PSAwKTtcbiAgLy8gT2Zmc2V0cyBmb3Igc3RhcnQgYW5kIGVuZCBvZiBrIGxvb3AuXG4gIC8vIFByZXZlbnRzIG1hcHBpbmcgb2Ygc3BhY2UgYmV5b25kIHRoZSBncmlkLlxuICB2YXIgazFzdGFydCA9IDA7XG4gIHZhciBrMWVuZCA9IDA7XG4gIHZhciBrMnN0YXJ0ID0gMDtcbiAgdmFyIGsyZW5kID0gMDtcbiAgZm9yICh2YXIgZCA9IDA7IGQgPCBtYXhfZDsgZCsrKSB7XG4gICAgLy8gV2FsayB0aGUgZnJvbnQgcGF0aCBvbmUgc3RlcC5cbiAgICBmb3IgKHZhciBrMSA9IC1kICsgazFzdGFydDsgazEgPD0gZCAtIGsxZW5kOyBrMSArPSAyKSB7XG4gICAgICB2YXIgazFfb2Zmc2V0ID0gdl9vZmZzZXQgKyBrMTtcbiAgICAgIHZhciB4MTtcbiAgICAgIGlmIChrMSA9PT0gLWQgfHwgKGsxICE9PSBkICYmIHYxW2sxX29mZnNldCAtIDFdIDwgdjFbazFfb2Zmc2V0ICsgMV0pKSB7XG4gICAgICAgIHgxID0gdjFbazFfb2Zmc2V0ICsgMV07XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB4MSA9IHYxW2sxX29mZnNldCAtIDFdICsgMTtcbiAgICAgIH1cbiAgICAgIHZhciB5MSA9IHgxIC0gazE7XG4gICAgICB3aGlsZSAoXG4gICAgICAgIHgxIDwgdGV4dDFfbGVuZ3RoICYmIHkxIDwgdGV4dDJfbGVuZ3RoICYmXG4gICAgICAgIHRleHQxLmNoYXJBdCh4MSkgPT09IHRleHQyLmNoYXJBdCh5MSlcbiAgICAgICkge1xuICAgICAgICB4MSsrO1xuICAgICAgICB5MSsrO1xuICAgICAgfVxuICAgICAgdjFbazFfb2Zmc2V0XSA9IHgxO1xuICAgICAgaWYgKHgxID4gdGV4dDFfbGVuZ3RoKSB7XG4gICAgICAgIC8vIFJhbiBvZmYgdGhlIHJpZ2h0IG9mIHRoZSBncmFwaC5cbiAgICAgICAgazFlbmQgKz0gMjtcbiAgICAgIH0gZWxzZSBpZiAoeTEgPiB0ZXh0Ml9sZW5ndGgpIHtcbiAgICAgICAgLy8gUmFuIG9mZiB0aGUgYm90dG9tIG9mIHRoZSBncmFwaC5cbiAgICAgICAgazFzdGFydCArPSAyO1xuICAgICAgfSBlbHNlIGlmIChmcm9udCkge1xuICAgICAgICB2YXIgazJfb2Zmc2V0ID0gdl9vZmZzZXQgKyBkZWx0YSAtIGsxO1xuICAgICAgICBpZiAoazJfb2Zmc2V0ID49IDAgJiYgazJfb2Zmc2V0IDwgdl9sZW5ndGggJiYgdjJbazJfb2Zmc2V0XSAhPT0gLTEpIHtcbiAgICAgICAgICAvLyBNaXJyb3IgeDIgb250byB0b3AtbGVmdCBjb29yZGluYXRlIHN5c3RlbS5cbiAgICAgICAgICB2YXIgeDIgPSB0ZXh0MV9sZW5ndGggLSB2MltrMl9vZmZzZXRdO1xuICAgICAgICAgIGlmICh4MSA+PSB4Mikge1xuICAgICAgICAgICAgLy8gT3ZlcmxhcCBkZXRlY3RlZC5cbiAgICAgICAgICAgIHJldHVybiBkaWZmX2Jpc2VjdFNwbGl0Xyh0ZXh0MSwgdGV4dDIsIHgxLCB5MSk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuXG4gICAgLy8gV2FsayB0aGUgcmV2ZXJzZSBwYXRoIG9uZSBzdGVwLlxuICAgIGZvciAodmFyIGsyID0gLWQgKyBrMnN0YXJ0OyBrMiA8PSBkIC0gazJlbmQ7IGsyICs9IDIpIHtcbiAgICAgIHZhciBrMl9vZmZzZXQgPSB2X29mZnNldCArIGsyO1xuICAgICAgdmFyIHgyO1xuICAgICAgaWYgKGsyID09PSAtZCB8fCAoazIgIT09IGQgJiYgdjJbazJfb2Zmc2V0IC0gMV0gPCB2MltrMl9vZmZzZXQgKyAxXSkpIHtcbiAgICAgICAgeDIgPSB2MltrMl9vZmZzZXQgKyAxXTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHgyID0gdjJbazJfb2Zmc2V0IC0gMV0gKyAxO1xuICAgICAgfVxuICAgICAgdmFyIHkyID0geDIgLSBrMjtcbiAgICAgIHdoaWxlIChcbiAgICAgICAgeDIgPCB0ZXh0MV9sZW5ndGggJiYgeTIgPCB0ZXh0Ml9sZW5ndGggJiZcbiAgICAgICAgdGV4dDEuY2hhckF0KHRleHQxX2xlbmd0aCAtIHgyIC0gMSkgPT09IHRleHQyLmNoYXJBdCh0ZXh0Ml9sZW5ndGggLSB5MiAtIDEpXG4gICAgICApIHtcbiAgICAgICAgeDIrKztcbiAgICAgICAgeTIrKztcbiAgICAgIH1cbiAgICAgIHYyW2syX29mZnNldF0gPSB4MjtcbiAgICAgIGlmICh4MiA+IHRleHQxX2xlbmd0aCkge1xuICAgICAgICAvLyBSYW4gb2ZmIHRoZSBsZWZ0IG9mIHRoZSBncmFwaC5cbiAgICAgICAgazJlbmQgKz0gMjtcbiAgICAgIH0gZWxzZSBpZiAoeTIgPiB0ZXh0Ml9sZW5ndGgpIHtcbiAgICAgICAgLy8gUmFuIG9mZiB0aGUgdG9wIG9mIHRoZSBncmFwaC5cbiAgICAgICAgazJzdGFydCArPSAyO1xuICAgICAgfSBlbHNlIGlmICghZnJvbnQpIHtcbiAgICAgICAgdmFyIGsxX29mZnNldCA9IHZfb2Zmc2V0ICsgZGVsdGEgLSBrMjtcbiAgICAgICAgaWYgKGsxX29mZnNldCA+PSAwICYmIGsxX29mZnNldCA8IHZfbGVuZ3RoICYmIHYxW2sxX29mZnNldF0gIT09IC0xKSB7XG4gICAgICAgICAgdmFyIHgxID0gdjFbazFfb2Zmc2V0XTtcbiAgICAgICAgICB2YXIgeTEgPSB2X29mZnNldCArIHgxIC0gazFfb2Zmc2V0O1xuICAgICAgICAgIC8vIE1pcnJvciB4MiBvbnRvIHRvcC1sZWZ0IGNvb3JkaW5hdGUgc3lzdGVtLlxuICAgICAgICAgIHgyID0gdGV4dDFfbGVuZ3RoIC0geDI7XG4gICAgICAgICAgaWYgKHgxID49IHgyKSB7XG4gICAgICAgICAgICAvLyBPdmVybGFwIGRldGVjdGVkLlxuICAgICAgICAgICAgcmV0dXJuIGRpZmZfYmlzZWN0U3BsaXRfKHRleHQxLCB0ZXh0MiwgeDEsIHkxKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gIH1cbiAgLy8gRGlmZiB0b29rIHRvbyBsb25nIGFuZCBoaXQgdGhlIGRlYWRsaW5lIG9yXG4gIC8vIG51bWJlciBvZiBkaWZmcyBlcXVhbHMgbnVtYmVyIG9mIGNoYXJhY3RlcnMsIG5vIGNvbW1vbmFsaXR5IGF0IGFsbC5cbiAgcmV0dXJuIFtbRElGRl9ERUxFVEUsIHRleHQxXSwgW0RJRkZfSU5TRVJULCB0ZXh0Ml1dO1xufTtcblxuXG4vKipcbiAqIEdpdmVuIHRoZSBsb2NhdGlvbiBvZiB0aGUgJ21pZGRsZSBzbmFrZScsIHNwbGl0IHRoZSBkaWZmIGluIHR3byBwYXJ0c1xuICogYW5kIHJlY3Vyc2UuXG4gKiBAcGFyYW0ge3N0cmluZ30gdGV4dDEgT2xkIHN0cmluZyB0byBiZSBkaWZmZWQuXG4gKiBAcGFyYW0ge3N0cmluZ30gdGV4dDIgTmV3IHN0cmluZyB0byBiZSBkaWZmZWQuXG4gKiBAcGFyYW0ge251bWJlcn0geCBJbmRleCBvZiBzcGxpdCBwb2ludCBpbiB0ZXh0MS5cbiAqIEBwYXJhbSB7bnVtYmVyfSB5IEluZGV4IG9mIHNwbGl0IHBvaW50IGluIHRleHQyLlxuICogQHJldHVybiB7QXJyYXl9IEFycmF5IG9mIGRpZmYgdHVwbGVzLlxuICovXG5mdW5jdGlvbiBkaWZmX2Jpc2VjdFNwbGl0Xyh0ZXh0MSwgdGV4dDIsIHgsIHkpIHtcbiAgdmFyIHRleHQxYSA9IHRleHQxLnN1YnN0cmluZygwLCB4KTtcbiAgdmFyIHRleHQyYSA9IHRleHQyLnN1YnN0cmluZygwLCB5KTtcbiAgdmFyIHRleHQxYiA9IHRleHQxLnN1YnN0cmluZyh4KTtcbiAgdmFyIHRleHQyYiA9IHRleHQyLnN1YnN0cmluZyh5KTtcblxuICAvLyBDb21wdXRlIGJvdGggZGlmZnMgc2VyaWFsbHkuXG4gIHZhciBkaWZmcyA9IGRpZmZfbWFpbih0ZXh0MWEsIHRleHQyYSk7XG4gIHZhciBkaWZmc2IgPSBkaWZmX21haW4odGV4dDFiLCB0ZXh0MmIpO1xuXG4gIHJldHVybiBkaWZmcy5jb25jYXQoZGlmZnNiKTtcbn07XG5cblxuLyoqXG4gKiBEZXRlcm1pbmUgdGhlIGNvbW1vbiBwcmVmaXggb2YgdHdvIHN0cmluZ3MuXG4gKiBAcGFyYW0ge3N0cmluZ30gdGV4dDEgRmlyc3Qgc3RyaW5nLlxuICogQHBhcmFtIHtzdHJpbmd9IHRleHQyIFNlY29uZCBzdHJpbmcuXG4gKiBAcmV0dXJuIHtudW1iZXJ9IFRoZSBudW1iZXIgb2YgY2hhcmFjdGVycyBjb21tb24gdG8gdGhlIHN0YXJ0IG9mIGVhY2hcbiAqICAgICBzdHJpbmcuXG4gKi9cbmZ1bmN0aW9uIGRpZmZfY29tbW9uUHJlZml4KHRleHQxLCB0ZXh0Mikge1xuICAvLyBRdWljayBjaGVjayBmb3IgY29tbW9uIG51bGwgY2FzZXMuXG4gIGlmICghdGV4dDEgfHwgIXRleHQyIHx8IHRleHQxLmNoYXJBdCgwKSAhPT0gdGV4dDIuY2hhckF0KDApKSB7XG4gICAgcmV0dXJuIDA7XG4gIH1cbiAgLy8gQmluYXJ5IHNlYXJjaC5cbiAgLy8gUGVyZm9ybWFuY2UgYW5hbHlzaXM6IGh0dHA6Ly9uZWlsLmZyYXNlci5uYW1lL25ld3MvMjAwNy8xMC8wOS9cbiAgdmFyIHBvaW50ZXJtaW4gPSAwO1xuICB2YXIgcG9pbnRlcm1heCA9IE1hdGgubWluKHRleHQxLmxlbmd0aCwgdGV4dDIubGVuZ3RoKTtcbiAgdmFyIHBvaW50ZXJtaWQgPSBwb2ludGVybWF4O1xuICB2YXIgcG9pbnRlcnN0YXJ0ID0gMDtcbiAgd2hpbGUgKHBvaW50ZXJtaW4gPCBwb2ludGVybWlkKSB7XG4gICAgaWYgKFxuICAgICAgdGV4dDEuc3Vic3RyaW5nKHBvaW50ZXJzdGFydCwgcG9pbnRlcm1pZCkgPT1cbiAgICAgIHRleHQyLnN1YnN0cmluZyhwb2ludGVyc3RhcnQsIHBvaW50ZXJtaWQpXG4gICAgKSB7XG4gICAgICBwb2ludGVybWluID0gcG9pbnRlcm1pZDtcbiAgICAgIHBvaW50ZXJzdGFydCA9IHBvaW50ZXJtaW47XG4gICAgfSBlbHNlIHtcbiAgICAgIHBvaW50ZXJtYXggPSBwb2ludGVybWlkO1xuICAgIH1cbiAgICBwb2ludGVybWlkID0gTWF0aC5mbG9vcigocG9pbnRlcm1heCAtIHBvaW50ZXJtaW4pIC8gMiArIHBvaW50ZXJtaW4pO1xuICB9XG5cbiAgaWYgKGlzX3N1cnJvZ2F0ZV9wYWlyX3N0YXJ0KHRleHQxLmNoYXJDb2RlQXQocG9pbnRlcm1pZCAtIDEpKSkge1xuICAgIHBvaW50ZXJtaWQtLTtcbiAgfVxuXG4gIHJldHVybiBwb2ludGVybWlkO1xufTtcblxuXG4vKipcbiAqIERldGVybWluZSB0aGUgY29tbW9uIHN1ZmZpeCBvZiB0d28gc3RyaW5ncy5cbiAqIEBwYXJhbSB7c3RyaW5nfSB0ZXh0MSBGaXJzdCBzdHJpbmcuXG4gKiBAcGFyYW0ge3N0cmluZ30gdGV4dDIgU2Vjb25kIHN0cmluZy5cbiAqIEByZXR1cm4ge251bWJlcn0gVGhlIG51bWJlciBvZiBjaGFyYWN0ZXJzIGNvbW1vbiB0byB0aGUgZW5kIG9mIGVhY2ggc3RyaW5nLlxuICovXG5mdW5jdGlvbiBkaWZmX2NvbW1vblN1ZmZpeCh0ZXh0MSwgdGV4dDIpIHtcbiAgLy8gUXVpY2sgY2hlY2sgZm9yIGNvbW1vbiBudWxsIGNhc2VzLlxuICBpZiAoIXRleHQxIHx8ICF0ZXh0MiB8fCB0ZXh0MS5zbGljZSgtMSkgIT09IHRleHQyLnNsaWNlKC0xKSkge1xuICAgIHJldHVybiAwO1xuICB9XG4gIC8vIEJpbmFyeSBzZWFyY2guXG4gIC8vIFBlcmZvcm1hbmNlIGFuYWx5c2lzOiBodHRwOi8vbmVpbC5mcmFzZXIubmFtZS9uZXdzLzIwMDcvMTAvMDkvXG4gIHZhciBwb2ludGVybWluID0gMDtcbiAgdmFyIHBvaW50ZXJtYXggPSBNYXRoLm1pbih0ZXh0MS5sZW5ndGgsIHRleHQyLmxlbmd0aCk7XG4gIHZhciBwb2ludGVybWlkID0gcG9pbnRlcm1heDtcbiAgdmFyIHBvaW50ZXJlbmQgPSAwO1xuICB3aGlsZSAocG9pbnRlcm1pbiA8IHBvaW50ZXJtaWQpIHtcbiAgICBpZiAoXG4gICAgICB0ZXh0MS5zdWJzdHJpbmcodGV4dDEubGVuZ3RoIC0gcG9pbnRlcm1pZCwgdGV4dDEubGVuZ3RoIC0gcG9pbnRlcmVuZCkgPT1cbiAgICAgIHRleHQyLnN1YnN0cmluZyh0ZXh0Mi5sZW5ndGggLSBwb2ludGVybWlkLCB0ZXh0Mi5sZW5ndGggLSBwb2ludGVyZW5kKVxuICAgICkge1xuICAgICAgcG9pbnRlcm1pbiA9IHBvaW50ZXJtaWQ7XG4gICAgICBwb2ludGVyZW5kID0gcG9pbnRlcm1pbjtcbiAgICB9IGVsc2Uge1xuICAgICAgcG9pbnRlcm1heCA9IHBvaW50ZXJtaWQ7XG4gICAgfVxuICAgIHBvaW50ZXJtaWQgPSBNYXRoLmZsb29yKChwb2ludGVybWF4IC0gcG9pbnRlcm1pbikgLyAyICsgcG9pbnRlcm1pbik7XG4gIH1cblxuICBpZiAoaXNfc3Vycm9nYXRlX3BhaXJfZW5kKHRleHQxLmNoYXJDb2RlQXQodGV4dDEubGVuZ3RoIC0gcG9pbnRlcm1pZCkpKSB7XG4gICAgcG9pbnRlcm1pZC0tO1xuICB9XG5cbiAgcmV0dXJuIHBvaW50ZXJtaWQ7XG59O1xuXG5cbi8qKlxuICogRG8gdGhlIHR3byB0ZXh0cyBzaGFyZSBhIHN1YnN0cmluZyB3aGljaCBpcyBhdCBsZWFzdCBoYWxmIHRoZSBsZW5ndGggb2YgdGhlXG4gKiBsb25nZXIgdGV4dD9cbiAqIFRoaXMgc3BlZWR1cCBjYW4gcHJvZHVjZSBub24tbWluaW1hbCBkaWZmcy5cbiAqIEBwYXJhbSB7c3RyaW5nfSB0ZXh0MSBGaXJzdCBzdHJpbmcuXG4gKiBAcGFyYW0ge3N0cmluZ30gdGV4dDIgU2Vjb25kIHN0cmluZy5cbiAqIEByZXR1cm4ge0FycmF5LjxzdHJpbmc+fSBGaXZlIGVsZW1lbnQgQXJyYXksIGNvbnRhaW5pbmcgdGhlIHByZWZpeCBvZlxuICogICAgIHRleHQxLCB0aGUgc3VmZml4IG9mIHRleHQxLCB0aGUgcHJlZml4IG9mIHRleHQyLCB0aGUgc3VmZml4IG9mXG4gKiAgICAgdGV4dDIgYW5kIHRoZSBjb21tb24gbWlkZGxlLiAgT3IgbnVsbCBpZiB0aGVyZSB3YXMgbm8gbWF0Y2guXG4gKi9cbmZ1bmN0aW9uIGRpZmZfaGFsZk1hdGNoXyh0ZXh0MSwgdGV4dDIpIHtcbiAgdmFyIGxvbmd0ZXh0ID0gdGV4dDEubGVuZ3RoID4gdGV4dDIubGVuZ3RoID8gdGV4dDEgOiB0ZXh0MjtcbiAgdmFyIHNob3J0dGV4dCA9IHRleHQxLmxlbmd0aCA+IHRleHQyLmxlbmd0aCA/IHRleHQyIDogdGV4dDE7XG4gIGlmIChsb25ndGV4dC5sZW5ndGggPCA0IHx8IHNob3J0dGV4dC5sZW5ndGggKiAyIDwgbG9uZ3RleHQubGVuZ3RoKSB7XG4gICAgcmV0dXJuIG51bGw7ICAvLyBQb2ludGxlc3MuXG4gIH1cblxuICAvKipcbiAgICogRG9lcyBhIHN1YnN0cmluZyBvZiBzaG9ydHRleHQgZXhpc3Qgd2l0aGluIGxvbmd0ZXh0IHN1Y2ggdGhhdCB0aGUgc3Vic3RyaW5nXG4gICAqIGlzIGF0IGxlYXN0IGhhbGYgdGhlIGxlbmd0aCBvZiBsb25ndGV4dD9cbiAgICogQ2xvc3VyZSwgYnV0IGRvZXMgbm90IHJlZmVyZW5jZSBhbnkgZXh0ZXJuYWwgdmFyaWFibGVzLlxuICAgKiBAcGFyYW0ge3N0cmluZ30gbG9uZ3RleHQgTG9uZ2VyIHN0cmluZy5cbiAgICogQHBhcmFtIHtzdHJpbmd9IHNob3J0dGV4dCBTaG9ydGVyIHN0cmluZy5cbiAgICogQHBhcmFtIHtudW1iZXJ9IGkgU3RhcnQgaW5kZXggb2YgcXVhcnRlciBsZW5ndGggc3Vic3RyaW5nIHdpdGhpbiBsb25ndGV4dC5cbiAgICogQHJldHVybiB7QXJyYXkuPHN0cmluZz59IEZpdmUgZWxlbWVudCBBcnJheSwgY29udGFpbmluZyB0aGUgcHJlZml4IG9mXG4gICAqICAgICBsb25ndGV4dCwgdGhlIHN1ZmZpeCBvZiBsb25ndGV4dCwgdGhlIHByZWZpeCBvZiBzaG9ydHRleHQsIHRoZSBzdWZmaXhcbiAgICogICAgIG9mIHNob3J0dGV4dCBhbmQgdGhlIGNvbW1vbiBtaWRkbGUuICBPciBudWxsIGlmIHRoZXJlIHdhcyBubyBtYXRjaC5cbiAgICogQHByaXZhdGVcbiAgICovXG4gIGZ1bmN0aW9uIGRpZmZfaGFsZk1hdGNoSV8obG9uZ3RleHQsIHNob3J0dGV4dCwgaSkge1xuICAgIC8vIFN0YXJ0IHdpdGggYSAxLzQgbGVuZ3RoIHN1YnN0cmluZyBhdCBwb3NpdGlvbiBpIGFzIGEgc2VlZC5cbiAgICB2YXIgc2VlZCA9IGxvbmd0ZXh0LnN1YnN0cmluZyhpLCBpICsgTWF0aC5mbG9vcihsb25ndGV4dC5sZW5ndGggLyA0KSk7XG4gICAgdmFyIGogPSAtMTtcbiAgICB2YXIgYmVzdF9jb21tb24gPSAnJztcbiAgICB2YXIgYmVzdF9sb25ndGV4dF9hLCBiZXN0X2xvbmd0ZXh0X2IsIGJlc3Rfc2hvcnR0ZXh0X2EsIGJlc3Rfc2hvcnR0ZXh0X2I7XG4gICAgd2hpbGUgKChqID0gc2hvcnR0ZXh0LmluZGV4T2Yoc2VlZCwgaiArIDEpKSAhPT0gLTEpIHtcbiAgICAgIHZhciBwcmVmaXhMZW5ndGggPSBkaWZmX2NvbW1vblByZWZpeChcbiAgICAgICAgbG9uZ3RleHQuc3Vic3RyaW5nKGkpLCBzaG9ydHRleHQuc3Vic3RyaW5nKGopKTtcbiAgICAgIHZhciBzdWZmaXhMZW5ndGggPSBkaWZmX2NvbW1vblN1ZmZpeChcbiAgICAgICAgbG9uZ3RleHQuc3Vic3RyaW5nKDAsIGkpLCBzaG9ydHRleHQuc3Vic3RyaW5nKDAsIGopKTtcbiAgICAgIGlmIChiZXN0X2NvbW1vbi5sZW5ndGggPCBzdWZmaXhMZW5ndGggKyBwcmVmaXhMZW5ndGgpIHtcbiAgICAgICAgYmVzdF9jb21tb24gPSBzaG9ydHRleHQuc3Vic3RyaW5nKFxuICAgICAgICAgIGogLSBzdWZmaXhMZW5ndGgsIGopICsgc2hvcnR0ZXh0LnN1YnN0cmluZyhqLCBqICsgcHJlZml4TGVuZ3RoKTtcbiAgICAgICAgYmVzdF9sb25ndGV4dF9hID0gbG9uZ3RleHQuc3Vic3RyaW5nKDAsIGkgLSBzdWZmaXhMZW5ndGgpO1xuICAgICAgICBiZXN0X2xvbmd0ZXh0X2IgPSBsb25ndGV4dC5zdWJzdHJpbmcoaSArIHByZWZpeExlbmd0aCk7XG4gICAgICAgIGJlc3Rfc2hvcnR0ZXh0X2EgPSBzaG9ydHRleHQuc3Vic3RyaW5nKDAsIGogLSBzdWZmaXhMZW5ndGgpO1xuICAgICAgICBiZXN0X3Nob3J0dGV4dF9iID0gc2hvcnR0ZXh0LnN1YnN0cmluZyhqICsgcHJlZml4TGVuZ3RoKTtcbiAgICAgIH1cbiAgICB9XG4gICAgaWYgKGJlc3RfY29tbW9uLmxlbmd0aCAqIDIgPj0gbG9uZ3RleHQubGVuZ3RoKSB7XG4gICAgICByZXR1cm4gW1xuICAgICAgICBiZXN0X2xvbmd0ZXh0X2EsIGJlc3RfbG9uZ3RleHRfYixcbiAgICAgICAgYmVzdF9zaG9ydHRleHRfYSwgYmVzdF9zaG9ydHRleHRfYiwgYmVzdF9jb21tb25cbiAgICAgIF07XG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiBudWxsO1xuICAgIH1cbiAgfVxuXG4gIC8vIEZpcnN0IGNoZWNrIGlmIHRoZSBzZWNvbmQgcXVhcnRlciBpcyB0aGUgc2VlZCBmb3IgYSBoYWxmLW1hdGNoLlxuICB2YXIgaG0xID0gZGlmZl9oYWxmTWF0Y2hJXyhsb25ndGV4dCwgc2hvcnR0ZXh0LCBNYXRoLmNlaWwobG9uZ3RleHQubGVuZ3RoIC8gNCkpO1xuICAvLyBDaGVjayBhZ2FpbiBiYXNlZCBvbiB0aGUgdGhpcmQgcXVhcnRlci5cbiAgdmFyIGhtMiA9IGRpZmZfaGFsZk1hdGNoSV8obG9uZ3RleHQsIHNob3J0dGV4dCwgTWF0aC5jZWlsKGxvbmd0ZXh0Lmxlbmd0aCAvIDIpKTtcbiAgdmFyIGhtO1xuICBpZiAoIWhtMSAmJiAhaG0yKSB7XG4gICAgcmV0dXJuIG51bGw7XG4gIH0gZWxzZSBpZiAoIWhtMikge1xuICAgIGhtID0gaG0xO1xuICB9IGVsc2UgaWYgKCFobTEpIHtcbiAgICBobSA9IGhtMjtcbiAgfSBlbHNlIHtcbiAgICAvLyBCb3RoIG1hdGNoZWQuICBTZWxlY3QgdGhlIGxvbmdlc3QuXG4gICAgaG0gPSBobTFbNF0ubGVuZ3RoID4gaG0yWzRdLmxlbmd0aCA/IGhtMSA6IGhtMjtcbiAgfVxuXG4gIC8vIEEgaGFsZi1tYXRjaCB3YXMgZm91bmQsIHNvcnQgb3V0IHRoZSByZXR1cm4gZGF0YS5cbiAgdmFyIHRleHQxX2EsIHRleHQxX2IsIHRleHQyX2EsIHRleHQyX2I7XG4gIGlmICh0ZXh0MS5sZW5ndGggPiB0ZXh0Mi5sZW5ndGgpIHtcbiAgICB0ZXh0MV9hID0gaG1bMF07XG4gICAgdGV4dDFfYiA9IGhtWzFdO1xuICAgIHRleHQyX2EgPSBobVsyXTtcbiAgICB0ZXh0Ml9iID0gaG1bM107XG4gIH0gZWxzZSB7XG4gICAgdGV4dDJfYSA9IGhtWzBdO1xuICAgIHRleHQyX2IgPSBobVsxXTtcbiAgICB0ZXh0MV9hID0gaG1bMl07XG4gICAgdGV4dDFfYiA9IGhtWzNdO1xuICB9XG4gIHZhciBtaWRfY29tbW9uID0gaG1bNF07XG4gIHJldHVybiBbdGV4dDFfYSwgdGV4dDFfYiwgdGV4dDJfYSwgdGV4dDJfYiwgbWlkX2NvbW1vbl07XG59O1xuXG5cbi8qKlxuICogUmVvcmRlciBhbmQgbWVyZ2UgbGlrZSBlZGl0IHNlY3Rpb25zLiAgTWVyZ2UgZXF1YWxpdGllcy5cbiAqIEFueSBlZGl0IHNlY3Rpb24gY2FuIG1vdmUgYXMgbG9uZyBhcyBpdCBkb2Vzbid0IGNyb3NzIGFuIGVxdWFsaXR5LlxuICogQHBhcmFtIHtBcnJheX0gZGlmZnMgQXJyYXkgb2YgZGlmZiB0dXBsZXMuXG4gKiBAcGFyYW0ge2Jvb2xlYW59IGZpeF91bmljb2RlIFdoZXRoZXIgdG8gbm9ybWFsaXplIHRvIGEgdW5pY29kZS1jb3JyZWN0IGRpZmZcbiAqL1xuZnVuY3Rpb24gZGlmZl9jbGVhbnVwTWVyZ2UoZGlmZnMsIGZpeF91bmljb2RlKSB7XG4gIGRpZmZzLnB1c2goW0RJRkZfRVFVQUwsICcnXSk7ICAvLyBBZGQgYSBkdW1teSBlbnRyeSBhdCB0aGUgZW5kLlxuICB2YXIgcG9pbnRlciA9IDA7XG4gIHZhciBjb3VudF9kZWxldGUgPSAwO1xuICB2YXIgY291bnRfaW5zZXJ0ID0gMDtcbiAgdmFyIHRleHRfZGVsZXRlID0gJyc7XG4gIHZhciB0ZXh0X2luc2VydCA9ICcnO1xuICB2YXIgY29tbW9ubGVuZ3RoO1xuICB3aGlsZSAocG9pbnRlciA8IGRpZmZzLmxlbmd0aCkge1xuICAgIGlmIChwb2ludGVyIDwgZGlmZnMubGVuZ3RoIC0gMSAmJiAhZGlmZnNbcG9pbnRlcl1bMV0pIHtcbiAgICAgIGRpZmZzLnNwbGljZShwb2ludGVyLCAxKTtcbiAgICAgIGNvbnRpbnVlO1xuICAgIH1cbiAgICBzd2l0Y2ggKGRpZmZzW3BvaW50ZXJdWzBdKSB7XG4gICAgICBjYXNlIERJRkZfSU5TRVJUOlxuXG4gICAgICAgIGNvdW50X2luc2VydCsrO1xuICAgICAgICB0ZXh0X2luc2VydCArPSBkaWZmc1twb2ludGVyXVsxXTtcbiAgICAgICAgcG9pbnRlcisrO1xuICAgICAgICBicmVhaztcbiAgICAgIGNhc2UgRElGRl9ERUxFVEU6XG4gICAgICAgIGNvdW50X2RlbGV0ZSsrO1xuICAgICAgICB0ZXh0X2RlbGV0ZSArPSBkaWZmc1twb2ludGVyXVsxXTtcbiAgICAgICAgcG9pbnRlcisrO1xuICAgICAgICBicmVhaztcbiAgICAgIGNhc2UgRElGRl9FUVVBTDpcbiAgICAgICAgdmFyIHByZXZpb3VzX2VxdWFsaXR5ID0gcG9pbnRlciAtIGNvdW50X2luc2VydCAtIGNvdW50X2RlbGV0ZSAtIDE7XG4gICAgICAgIGlmIChmaXhfdW5pY29kZSkge1xuICAgICAgICAgIC8vIHByZXZlbnQgc3BsaXR0aW5nIG9mIHVuaWNvZGUgc3Vycm9nYXRlIHBhaXJzLiAgd2hlbiBmaXhfdW5pY29kZSBpcyB0cnVlLFxuICAgICAgICAgIC8vIHdlIGFzc3VtZSB0aGF0IHRoZSBvbGQgYW5kIG5ldyB0ZXh0IGluIHRoZSBkaWZmIGFyZSBjb21wbGV0ZSBhbmQgY29ycmVjdFxuICAgICAgICAgIC8vIHVuaWNvZGUtZW5jb2RlZCBKUyBzdHJpbmdzLCBidXQgdGhlIHR1cGxlIGJvdW5kYXJpZXMgbWF5IGZhbGwgYmV0d2VlblxuICAgICAgICAgIC8vIHN1cnJvZ2F0ZSBwYWlycy4gIHdlIGZpeCB0aGlzIGJ5IHNoYXZpbmcgb2ZmIHN0cmF5IHN1cnJvZ2F0ZXMgZnJvbSB0aGUgZW5kXG4gICAgICAgICAgLy8gb2YgdGhlIHByZXZpb3VzIGVxdWFsaXR5IGFuZCB0aGUgYmVnaW5uaW5nIG9mIHRoaXMgZXF1YWxpdHkuICB0aGlzIG1heSBjcmVhdGVcbiAgICAgICAgICAvLyBlbXB0eSBlcXVhbGl0aWVzIG9yIGEgY29tbW9uIHByZWZpeCBvciBzdWZmaXguICBmb3IgZXhhbXBsZSwgaWYgQUIgYW5kIEFDIGFyZVxuICAgICAgICAgIC8vIGVtb2ppcywgYFtbMCwgJ0EnXSwgWy0xLCAnQkEnXSwgWzAsICdDJ11dYCB3b3VsZCB0dXJuIGludG8gZGVsZXRpbmcgJ0FCQUMnIGFuZFxuICAgICAgICAgIC8vIGluc2VydGluZyAnQUMnLCBhbmQgdGhlbiB0aGUgY29tbW9uIHN1ZmZpeCAnQUMnIHdpbGwgYmUgZWxpbWluYXRlZC4gIGluIHRoaXNcbiAgICAgICAgICAvLyBwYXJ0aWN1bGFyIGNhc2UsIGJvdGggZXF1YWxpdGllcyBnbyBhd2F5LCB3ZSBhYnNvcmIgYW55IHByZXZpb3VzIGluZXF1YWxpdGllcyxcbiAgICAgICAgICAvLyBhbmQgd2Uga2VlcCBzY2FubmluZyBmb3IgdGhlIG5leHQgZXF1YWxpdHkgYmVmb3JlIHJld3JpdGluZyB0aGUgdHVwbGVzLlxuICAgICAgICAgIGlmIChwcmV2aW91c19lcXVhbGl0eSA+PSAwICYmIGVuZHNfd2l0aF9wYWlyX3N0YXJ0KGRpZmZzW3ByZXZpb3VzX2VxdWFsaXR5XVsxXSkpIHtcbiAgICAgICAgICAgIHZhciBzdHJheSA9IGRpZmZzW3ByZXZpb3VzX2VxdWFsaXR5XVsxXS5zbGljZSgtMSk7XG4gICAgICAgICAgICBkaWZmc1twcmV2aW91c19lcXVhbGl0eV1bMV0gPSBkaWZmc1twcmV2aW91c19lcXVhbGl0eV1bMV0uc2xpY2UoMCwgLTEpO1xuICAgICAgICAgICAgdGV4dF9kZWxldGUgPSBzdHJheSArIHRleHRfZGVsZXRlO1xuICAgICAgICAgICAgdGV4dF9pbnNlcnQgPSBzdHJheSArIHRleHRfaW5zZXJ0O1xuICAgICAgICAgICAgaWYgKCFkaWZmc1twcmV2aW91c19lcXVhbGl0eV1bMV0pIHtcbiAgICAgICAgICAgICAgLy8gZW1wdGllZCBvdXQgcHJldmlvdXMgZXF1YWxpdHksIHNvIGRlbGV0ZSBpdCBhbmQgaW5jbHVkZSBwcmV2aW91cyBkZWxldGUvaW5zZXJ0XG4gICAgICAgICAgICAgIGRpZmZzLnNwbGljZShwcmV2aW91c19lcXVhbGl0eSwgMSk7XG4gICAgICAgICAgICAgIHBvaW50ZXItLTtcbiAgICAgICAgICAgICAgdmFyIGsgPSBwcmV2aW91c19lcXVhbGl0eSAtIDE7XG4gICAgICAgICAgICAgIGlmIChkaWZmc1trXSAmJiBkaWZmc1trXVswXSA9PT0gRElGRl9JTlNFUlQpIHtcbiAgICAgICAgICAgICAgICBjb3VudF9pbnNlcnQrKztcbiAgICAgICAgICAgICAgICB0ZXh0X2luc2VydCA9IGRpZmZzW2tdWzFdICsgdGV4dF9pbnNlcnQ7XG4gICAgICAgICAgICAgICAgay0tO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIGlmIChkaWZmc1trXSAmJiBkaWZmc1trXVswXSA9PT0gRElGRl9ERUxFVEUpIHtcbiAgICAgICAgICAgICAgICBjb3VudF9kZWxldGUrKztcbiAgICAgICAgICAgICAgICB0ZXh0X2RlbGV0ZSA9IGRpZmZzW2tdWzFdICsgdGV4dF9kZWxldGU7XG4gICAgICAgICAgICAgICAgay0tO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIHByZXZpb3VzX2VxdWFsaXR5ID0gaztcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgICAgaWYgKHN0YXJ0c193aXRoX3BhaXJfZW5kKGRpZmZzW3BvaW50ZXJdWzFdKSkge1xuICAgICAgICAgICAgdmFyIHN0cmF5ID0gZGlmZnNbcG9pbnRlcl1bMV0uY2hhckF0KDApO1xuICAgICAgICAgICAgZGlmZnNbcG9pbnRlcl1bMV0gPSBkaWZmc1twb2ludGVyXVsxXS5zbGljZSgxKTtcbiAgICAgICAgICAgIHRleHRfZGVsZXRlICs9IHN0cmF5O1xuICAgICAgICAgICAgdGV4dF9pbnNlcnQgKz0gc3RyYXk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGlmIChwb2ludGVyIDwgZGlmZnMubGVuZ3RoIC0gMSAmJiAhZGlmZnNbcG9pbnRlcl1bMV0pIHtcbiAgICAgICAgICAvLyBmb3IgZW1wdHkgZXF1YWxpdHkgbm90IGF0IGVuZCwgd2FpdCBmb3IgbmV4dCBlcXVhbGl0eVxuICAgICAgICAgIGRpZmZzLnNwbGljZShwb2ludGVyLCAxKTtcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuICAgICAgICBpZiAodGV4dF9kZWxldGUubGVuZ3RoID4gMCB8fCB0ZXh0X2luc2VydC5sZW5ndGggPiAwKSB7XG4gICAgICAgICAgLy8gbm90ZSB0aGF0IGRpZmZfY29tbW9uUHJlZml4IGFuZCBkaWZmX2NvbW1vblN1ZmZpeCBhcmUgdW5pY29kZS1hd2FyZVxuICAgICAgICAgIGlmICh0ZXh0X2RlbGV0ZS5sZW5ndGggPiAwICYmIHRleHRfaW5zZXJ0Lmxlbmd0aCA+IDApIHtcbiAgICAgICAgICAgIC8vIEZhY3RvciBvdXQgYW55IGNvbW1vbiBwcmVmaXhlcy5cbiAgICAgICAgICAgIGNvbW1vbmxlbmd0aCA9IGRpZmZfY29tbW9uUHJlZml4KHRleHRfaW5zZXJ0LCB0ZXh0X2RlbGV0ZSk7XG4gICAgICAgICAgICBpZiAoY29tbW9ubGVuZ3RoICE9PSAwKSB7XG4gICAgICAgICAgICAgIGlmIChwcmV2aW91c19lcXVhbGl0eSA+PSAwKSB7XG4gICAgICAgICAgICAgICAgZGlmZnNbcHJldmlvdXNfZXF1YWxpdHldWzFdICs9IHRleHRfaW5zZXJ0LnN1YnN0cmluZygwLCBjb21tb25sZW5ndGgpO1xuICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIGRpZmZzLnNwbGljZSgwLCAwLCBbRElGRl9FUVVBTCwgdGV4dF9pbnNlcnQuc3Vic3RyaW5nKDAsIGNvbW1vbmxlbmd0aCldKTtcbiAgICAgICAgICAgICAgICBwb2ludGVyKys7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgdGV4dF9pbnNlcnQgPSB0ZXh0X2luc2VydC5zdWJzdHJpbmcoY29tbW9ubGVuZ3RoKTtcbiAgICAgICAgICAgICAgdGV4dF9kZWxldGUgPSB0ZXh0X2RlbGV0ZS5zdWJzdHJpbmcoY29tbW9ubGVuZ3RoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIC8vIEZhY3RvciBvdXQgYW55IGNvbW1vbiBzdWZmaXhlcy5cbiAgICAgICAgICAgIGNvbW1vbmxlbmd0aCA9IGRpZmZfY29tbW9uU3VmZml4KHRleHRfaW5zZXJ0LCB0ZXh0X2RlbGV0ZSk7XG4gICAgICAgICAgICBpZiAoY29tbW9ubGVuZ3RoICE9PSAwKSB7XG4gICAgICAgICAgICAgIGRpZmZzW3BvaW50ZXJdWzFdID1cbiAgICAgICAgICAgICAgICB0ZXh0X2luc2VydC5zdWJzdHJpbmcodGV4dF9pbnNlcnQubGVuZ3RoIC0gY29tbW9ubGVuZ3RoKSArIGRpZmZzW3BvaW50ZXJdWzFdO1xuICAgICAgICAgICAgICB0ZXh0X2luc2VydCA9IHRleHRfaW5zZXJ0LnN1YnN0cmluZygwLCB0ZXh0X2luc2VydC5sZW5ndGggLSBjb21tb25sZW5ndGgpO1xuICAgICAgICAgICAgICB0ZXh0X2RlbGV0ZSA9IHRleHRfZGVsZXRlLnN1YnN0cmluZygwLCB0ZXh0X2RlbGV0ZS5sZW5ndGggLSBjb21tb25sZW5ndGgpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgICAvLyBEZWxldGUgdGhlIG9mZmVuZGluZyByZWNvcmRzIGFuZCBhZGQgdGhlIG1lcmdlZCBvbmVzLlxuICAgICAgICAgIHZhciBuID0gY291bnRfaW5zZXJ0ICsgY291bnRfZGVsZXRlO1xuICAgICAgICAgIGlmICh0ZXh0X2RlbGV0ZS5sZW5ndGggPT09IDAgJiYgdGV4dF9pbnNlcnQubGVuZ3RoID09PSAwKSB7XG4gICAgICAgICAgICBkaWZmcy5zcGxpY2UocG9pbnRlciAtIG4sIG4pO1xuICAgICAgICAgICAgcG9pbnRlciA9IHBvaW50ZXIgLSBuO1xuICAgICAgICAgIH0gZWxzZSBpZiAodGV4dF9kZWxldGUubGVuZ3RoID09PSAwKSB7XG4gICAgICAgICAgICBkaWZmcy5zcGxpY2UocG9pbnRlciAtIG4sIG4sIFtESUZGX0lOU0VSVCwgdGV4dF9pbnNlcnRdKTtcbiAgICAgICAgICAgIHBvaW50ZXIgPSBwb2ludGVyIC0gbiArIDE7XG4gICAgICAgICAgfSBlbHNlIGlmICh0ZXh0X2luc2VydC5sZW5ndGggPT09IDApIHtcbiAgICAgICAgICAgIGRpZmZzLnNwbGljZShwb2ludGVyIC0gbiwgbiwgW0RJRkZfREVMRVRFLCB0ZXh0X2RlbGV0ZV0pO1xuICAgICAgICAgICAgcG9pbnRlciA9IHBvaW50ZXIgLSBuICsgMTtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgZGlmZnMuc3BsaWNlKHBvaW50ZXIgLSBuLCBuLCBbRElGRl9ERUxFVEUsIHRleHRfZGVsZXRlXSwgW0RJRkZfSU5TRVJULCB0ZXh0X2luc2VydF0pO1xuICAgICAgICAgICAgcG9pbnRlciA9IHBvaW50ZXIgLSBuICsgMjtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHBvaW50ZXIgIT09IDAgJiYgZGlmZnNbcG9pbnRlciAtIDFdWzBdID09PSBESUZGX0VRVUFMKSB7XG4gICAgICAgICAgLy8gTWVyZ2UgdGhpcyBlcXVhbGl0eSB3aXRoIHRoZSBwcmV2aW91cyBvbmUuXG4gICAgICAgICAgZGlmZnNbcG9pbnRlciAtIDFdWzFdICs9IGRpZmZzW3BvaW50ZXJdWzFdO1xuICAgICAgICAgIGRpZmZzLnNwbGljZShwb2ludGVyLCAxKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBwb2ludGVyKys7XG4gICAgICAgIH1cbiAgICAgICAgY291bnRfaW5zZXJ0ID0gMDtcbiAgICAgICAgY291bnRfZGVsZXRlID0gMDtcbiAgICAgICAgdGV4dF9kZWxldGUgPSAnJztcbiAgICAgICAgdGV4dF9pbnNlcnQgPSAnJztcbiAgICAgICAgYnJlYWs7XG4gICAgfVxuICB9XG4gIGlmIChkaWZmc1tkaWZmcy5sZW5ndGggLSAxXVsxXSA9PT0gJycpIHtcbiAgICBkaWZmcy5wb3AoKTsgIC8vIFJlbW92ZSB0aGUgZHVtbXkgZW50cnkgYXQgdGhlIGVuZC5cbiAgfVxuXG4gIC8vIFNlY29uZCBwYXNzOiBsb29rIGZvciBzaW5nbGUgZWRpdHMgc3Vycm91bmRlZCBvbiBib3RoIHNpZGVzIGJ5IGVxdWFsaXRpZXNcbiAgLy8gd2hpY2ggY2FuIGJlIHNoaWZ0ZWQgc2lkZXdheXMgdG8gZWxpbWluYXRlIGFuIGVxdWFsaXR5LlxuICAvLyBlLmc6IEE8aW5zPkJBPC9pbnM+QyAtPiA8aW5zPkFCPC9pbnM+QUNcbiAgdmFyIGNoYW5nZXMgPSBmYWxzZTtcbiAgcG9pbnRlciA9IDE7XG4gIC8vIEludGVudGlvbmFsbHkgaWdub3JlIHRoZSBmaXJzdCBhbmQgbGFzdCBlbGVtZW50IChkb24ndCBuZWVkIGNoZWNraW5nKS5cbiAgd2hpbGUgKHBvaW50ZXIgPCBkaWZmcy5sZW5ndGggLSAxKSB7XG4gICAgaWYgKGRpZmZzW3BvaW50ZXIgLSAxXVswXSA9PT0gRElGRl9FUVVBTCAmJlxuICAgICAgZGlmZnNbcG9pbnRlciArIDFdWzBdID09PSBESUZGX0VRVUFMKSB7XG4gICAgICAvLyBUaGlzIGlzIGEgc2luZ2xlIGVkaXQgc3Vycm91bmRlZCBieSBlcXVhbGl0aWVzLlxuICAgICAgaWYgKGRpZmZzW3BvaW50ZXJdWzFdLnN1YnN0cmluZyhkaWZmc1twb2ludGVyXVsxXS5sZW5ndGggLVxuICAgICAgICBkaWZmc1twb2ludGVyIC0gMV1bMV0ubGVuZ3RoKSA9PT0gZGlmZnNbcG9pbnRlciAtIDFdWzFdKSB7XG4gICAgICAgIC8vIFNoaWZ0IHRoZSBlZGl0IG92ZXIgdGhlIHByZXZpb3VzIGVxdWFsaXR5LlxuICAgICAgICBkaWZmc1twb2ludGVyXVsxXSA9IGRpZmZzW3BvaW50ZXIgLSAxXVsxXSArXG4gICAgICAgICAgZGlmZnNbcG9pbnRlcl1bMV0uc3Vic3RyaW5nKDAsIGRpZmZzW3BvaW50ZXJdWzFdLmxlbmd0aCAtXG4gICAgICAgICAgICBkaWZmc1twb2ludGVyIC0gMV1bMV0ubGVuZ3RoKTtcbiAgICAgICAgZGlmZnNbcG9pbnRlciArIDFdWzFdID0gZGlmZnNbcG9pbnRlciAtIDFdWzFdICsgZGlmZnNbcG9pbnRlciArIDFdWzFdO1xuICAgICAgICBkaWZmcy5zcGxpY2UocG9pbnRlciAtIDEsIDEpO1xuICAgICAgICBjaGFuZ2VzID0gdHJ1ZTtcbiAgICAgIH0gZWxzZSBpZiAoZGlmZnNbcG9pbnRlcl1bMV0uc3Vic3RyaW5nKDAsIGRpZmZzW3BvaW50ZXIgKyAxXVsxXS5sZW5ndGgpID09XG4gICAgICAgIGRpZmZzW3BvaW50ZXIgKyAxXVsxXSkge1xuICAgICAgICAvLyBTaGlmdCB0aGUgZWRpdCBvdmVyIHRoZSBuZXh0IGVxdWFsaXR5LlxuICAgICAgICBkaWZmc1twb2ludGVyIC0gMV1bMV0gKz0gZGlmZnNbcG9pbnRlciArIDFdWzFdO1xuICAgICAgICBkaWZmc1twb2ludGVyXVsxXSA9XG4gICAgICAgICAgZGlmZnNbcG9pbnRlcl1bMV0uc3Vic3RyaW5nKGRpZmZzW3BvaW50ZXIgKyAxXVsxXS5sZW5ndGgpICtcbiAgICAgICAgICBkaWZmc1twb2ludGVyICsgMV1bMV07XG4gICAgICAgIGRpZmZzLnNwbGljZShwb2ludGVyICsgMSwgMSk7XG4gICAgICAgIGNoYW5nZXMgPSB0cnVlO1xuICAgICAgfVxuICAgIH1cbiAgICBwb2ludGVyKys7XG4gIH1cbiAgLy8gSWYgc2hpZnRzIHdlcmUgbWFkZSwgdGhlIGRpZmYgbmVlZHMgcmVvcmRlcmluZyBhbmQgYW5vdGhlciBzaGlmdCBzd2VlcC5cbiAgaWYgKGNoYW5nZXMpIHtcbiAgICBkaWZmX2NsZWFudXBNZXJnZShkaWZmcywgZml4X3VuaWNvZGUpO1xuICB9XG59O1xuXG5mdW5jdGlvbiBpc19zdXJyb2dhdGVfcGFpcl9zdGFydChjaGFyQ29kZSkge1xuICByZXR1cm4gY2hhckNvZGUgPj0gMHhEODAwICYmIGNoYXJDb2RlIDw9IDB4REJGRjtcbn1cblxuZnVuY3Rpb24gaXNfc3Vycm9nYXRlX3BhaXJfZW5kKGNoYXJDb2RlKSB7XG4gIHJldHVybiBjaGFyQ29kZSA+PSAweERDMDAgJiYgY2hhckNvZGUgPD0gMHhERkZGO1xufVxuXG5mdW5jdGlvbiBzdGFydHNfd2l0aF9wYWlyX2VuZChzdHIpIHtcbiAgcmV0dXJuIGlzX3N1cnJvZ2F0ZV9wYWlyX2VuZChzdHIuY2hhckNvZGVBdCgwKSk7XG59XG5cbmZ1bmN0aW9uIGVuZHNfd2l0aF9wYWlyX3N0YXJ0KHN0cikge1xuICByZXR1cm4gaXNfc3Vycm9nYXRlX3BhaXJfc3RhcnQoc3RyLmNoYXJDb2RlQXQoc3RyLmxlbmd0aCAtIDEpKTtcbn1cblxuZnVuY3Rpb24gcmVtb3ZlX2VtcHR5X3R1cGxlcyh0dXBsZXMpIHtcbiAgdmFyIHJldCA9IFtdO1xuICBmb3IgKHZhciBpID0gMDsgaSA8IHR1cGxlcy5sZW5ndGg7IGkrKykge1xuICAgIGlmICh0dXBsZXNbaV1bMV0ubGVuZ3RoID4gMCkge1xuICAgICAgcmV0LnB1c2godHVwbGVzW2ldKTtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIHJldDtcbn1cblxuZnVuY3Rpb24gbWFrZV9lZGl0X3NwbGljZShiZWZvcmUsIG9sZE1pZGRsZSwgbmV3TWlkZGxlLCBhZnRlcikge1xuICBpZiAoZW5kc193aXRoX3BhaXJfc3RhcnQoYmVmb3JlKSB8fCBzdGFydHNfd2l0aF9wYWlyX2VuZChhZnRlcikpIHtcbiAgICByZXR1cm4gbnVsbDtcbiAgfVxuICByZXR1cm4gcmVtb3ZlX2VtcHR5X3R1cGxlcyhbXG4gICAgW0RJRkZfRVFVQUwsIGJlZm9yZV0sXG4gICAgW0RJRkZfREVMRVRFLCBvbGRNaWRkbGVdLFxuICAgIFtESUZGX0lOU0VSVCwgbmV3TWlkZGxlXSxcbiAgICBbRElGRl9FUVVBTCwgYWZ0ZXJdXG4gIF0pO1xufVxuXG5mdW5jdGlvbiBmaW5kX2N1cnNvcl9lZGl0X2RpZmYob2xkVGV4dCwgbmV3VGV4dCwgY3Vyc29yX3Bvcykge1xuICAvLyBub3RlOiB0aGlzIHJ1bnMgYWZ0ZXIgZXF1YWxpdHkgY2hlY2sgaGFzIHJ1bGVkIG91dCBleGFjdCBlcXVhbGl0eVxuICB2YXIgb2xkUmFuZ2UgPSB0eXBlb2YgY3Vyc29yX3BvcyA9PT0gJ251bWJlcicgP1xuICAgIHsgaW5kZXg6IGN1cnNvcl9wb3MsIGxlbmd0aDogMCB9IDogY3Vyc29yX3Bvcy5vbGRSYW5nZTtcbiAgdmFyIG5ld1JhbmdlID0gdHlwZW9mIGN1cnNvcl9wb3MgPT09ICdudW1iZXInID9cbiAgICBudWxsIDogY3Vyc29yX3Bvcy5uZXdSYW5nZTtcbiAgLy8gdGFrZSBpbnRvIGFjY291bnQgdGhlIG9sZCBhbmQgbmV3IHNlbGVjdGlvbiB0byBnZW5lcmF0ZSB0aGUgYmVzdCBkaWZmXG4gIC8vIHBvc3NpYmxlIGZvciBhIHRleHQgZWRpdC4gIGZvciBleGFtcGxlLCBhIHRleHQgY2hhbmdlIGZyb20gXCJ4eHhcIiB0byBcInh4XCJcbiAgLy8gY291bGQgYmUgYSBkZWxldGUgb3IgZm9yd2FyZHMtZGVsZXRlIG9mIGFueSBvbmUgb2YgdGhlIHgncywgb3IgdGhlXG4gIC8vIHJlc3VsdCBvZiBzZWxlY3RpbmcgdHdvIG9mIHRoZSB4J3MgYW5kIHR5cGluZyBcInhcIi5cbiAgdmFyIG9sZExlbmd0aCA9IG9sZFRleHQubGVuZ3RoO1xuICB2YXIgbmV3TGVuZ3RoID0gbmV3VGV4dC5sZW5ndGg7XG4gIGlmIChvbGRSYW5nZS5sZW5ndGggPT09IDAgJiYgKG5ld1JhbmdlID09PSBudWxsIHx8IG5ld1JhbmdlLmxlbmd0aCA9PT0gMCkpIHtcbiAgICAvLyBzZWUgaWYgd2UgaGF2ZSBhbiBpbnNlcnQgb3IgZGVsZXRlIGJlZm9yZSBvciBhZnRlciBjdXJzb3JcbiAgICB2YXIgb2xkQ3Vyc29yID0gb2xkUmFuZ2UuaW5kZXg7XG4gICAgdmFyIG9sZEJlZm9yZSA9IG9sZFRleHQuc2xpY2UoMCwgb2xkQ3Vyc29yKTtcbiAgICB2YXIgb2xkQWZ0ZXIgPSBvbGRUZXh0LnNsaWNlKG9sZEN1cnNvcik7XG4gICAgdmFyIG1heWJlTmV3Q3Vyc29yID0gbmV3UmFuZ2UgPyBuZXdSYW5nZS5pbmRleCA6IG51bGw7XG4gICAgZWRpdEJlZm9yZToge1xuICAgICAgLy8gaXMgdGhpcyBhbiBpbnNlcnQgb3IgZGVsZXRlIHJpZ2h0IGJlZm9yZSBvbGRDdXJzb3I/XG4gICAgICB2YXIgbmV3Q3Vyc29yID0gb2xkQ3Vyc29yICsgbmV3TGVuZ3RoIC0gb2xkTGVuZ3RoO1xuICAgICAgaWYgKG1heWJlTmV3Q3Vyc29yICE9PSBudWxsICYmIG1heWJlTmV3Q3Vyc29yICE9PSBuZXdDdXJzb3IpIHtcbiAgICAgICAgYnJlYWsgZWRpdEJlZm9yZTtcbiAgICAgIH1cbiAgICAgIGlmIChuZXdDdXJzb3IgPCAwIHx8IG5ld0N1cnNvciA+IG5ld0xlbmd0aCkge1xuICAgICAgICBicmVhayBlZGl0QmVmb3JlO1xuICAgICAgfVxuICAgICAgdmFyIG5ld0JlZm9yZSA9IG5ld1RleHQuc2xpY2UoMCwgbmV3Q3Vyc29yKTtcbiAgICAgIHZhciBuZXdBZnRlciA9IG5ld1RleHQuc2xpY2UobmV3Q3Vyc29yKTtcbiAgICAgIGlmIChuZXdBZnRlciAhPT0gb2xkQWZ0ZXIpIHtcbiAgICAgICAgYnJlYWsgZWRpdEJlZm9yZTtcbiAgICAgIH1cbiAgICAgIHZhciBwcmVmaXhMZW5ndGggPSBNYXRoLm1pbihvbGRDdXJzb3IsIG5ld0N1cnNvcik7XG4gICAgICB2YXIgb2xkUHJlZml4ID0gb2xkQmVmb3JlLnNsaWNlKDAsIHByZWZpeExlbmd0aCk7XG4gICAgICB2YXIgbmV3UHJlZml4ID0gbmV3QmVmb3JlLnNsaWNlKDAsIHByZWZpeExlbmd0aCk7XG4gICAgICBpZiAob2xkUHJlZml4ICE9PSBuZXdQcmVmaXgpIHtcbiAgICAgICAgYnJlYWsgZWRpdEJlZm9yZTtcbiAgICAgIH1cbiAgICAgIHZhciBvbGRNaWRkbGUgPSBvbGRCZWZvcmUuc2xpY2UocHJlZml4TGVuZ3RoKTtcbiAgICAgIHZhciBuZXdNaWRkbGUgPSBuZXdCZWZvcmUuc2xpY2UocHJlZml4TGVuZ3RoKTtcbiAgICAgIHJldHVybiBtYWtlX2VkaXRfc3BsaWNlKG9sZFByZWZpeCwgb2xkTWlkZGxlLCBuZXdNaWRkbGUsIG9sZEFmdGVyKTtcbiAgICB9XG4gICAgZWRpdEFmdGVyOiB7XG4gICAgICAvLyBpcyB0aGlzIGFuIGluc2VydCBvciBkZWxldGUgcmlnaHQgYWZ0ZXIgb2xkQ3Vyc29yP1xuICAgICAgaWYgKG1heWJlTmV3Q3Vyc29yICE9PSBudWxsICYmIG1heWJlTmV3Q3Vyc29yICE9PSBvbGRDdXJzb3IpIHtcbiAgICAgICAgYnJlYWsgZWRpdEFmdGVyO1xuICAgICAgfVxuICAgICAgdmFyIGN1cnNvciA9IG9sZEN1cnNvcjtcbiAgICAgIHZhciBuZXdCZWZvcmUgPSBuZXdUZXh0LnNsaWNlKDAsIGN1cnNvcik7XG4gICAgICB2YXIgbmV3QWZ0ZXIgPSBuZXdUZXh0LnNsaWNlKGN1cnNvcik7XG4gICAgICBpZiAobmV3QmVmb3JlICE9PSBvbGRCZWZvcmUpIHtcbiAgICAgICAgYnJlYWsgZWRpdEFmdGVyO1xuICAgICAgfVxuICAgICAgdmFyIHN1ZmZpeExlbmd0aCA9IE1hdGgubWluKG9sZExlbmd0aCAtIGN1cnNvciwgbmV3TGVuZ3RoIC0gY3Vyc29yKTtcbiAgICAgIHZhciBvbGRTdWZmaXggPSBvbGRBZnRlci5zbGljZShvbGRBZnRlci5sZW5ndGggLSBzdWZmaXhMZW5ndGgpO1xuICAgICAgdmFyIG5ld1N1ZmZpeCA9IG5ld0FmdGVyLnNsaWNlKG5ld0FmdGVyLmxlbmd0aCAtIHN1ZmZpeExlbmd0aCk7XG4gICAgICBpZiAob2xkU3VmZml4ICE9PSBuZXdTdWZmaXgpIHtcbiAgICAgICAgYnJlYWsgZWRpdEFmdGVyO1xuICAgICAgfVxuICAgICAgdmFyIG9sZE1pZGRsZSA9IG9sZEFmdGVyLnNsaWNlKDAsIG9sZEFmdGVyLmxlbmd0aCAtIHN1ZmZpeExlbmd0aCk7XG4gICAgICB2YXIgbmV3TWlkZGxlID0gbmV3QWZ0ZXIuc2xpY2UoMCwgbmV3QWZ0ZXIubGVuZ3RoIC0gc3VmZml4TGVuZ3RoKTtcbiAgICAgIHJldHVybiBtYWtlX2VkaXRfc3BsaWNlKG9sZEJlZm9yZSwgb2xkTWlkZGxlLCBuZXdNaWRkbGUsIG9sZFN1ZmZpeCk7XG4gICAgfVxuICB9XG4gIGlmIChvbGRSYW5nZS5sZW5ndGggPiAwICYmIG5ld1JhbmdlICYmIG5ld1JhbmdlLmxlbmd0aCA9PT0gMCkge1xuICAgIHJlcGxhY2VSYW5nZToge1xuICAgICAgLy8gc2VlIGlmIGRpZmYgY291bGQgYmUgYSBzcGxpY2Ugb2YgdGhlIG9sZCBzZWxlY3Rpb24gcmFuZ2VcbiAgICAgIHZhciBvbGRQcmVmaXggPSBvbGRUZXh0LnNsaWNlKDAsIG9sZFJhbmdlLmluZGV4KTtcbiAgICAgIHZhciBvbGRTdWZmaXggPSBvbGRUZXh0LnNsaWNlKG9sZFJhbmdlLmluZGV4ICsgb2xkUmFuZ2UubGVuZ3RoKTtcbiAgICAgIHZhciBwcmVmaXhMZW5ndGggPSBvbGRQcmVmaXgubGVuZ3RoO1xuICAgICAgdmFyIHN1ZmZpeExlbmd0aCA9IG9sZFN1ZmZpeC5sZW5ndGg7XG4gICAgICBpZiAobmV3TGVuZ3RoIDwgcHJlZml4TGVuZ3RoICsgc3VmZml4TGVuZ3RoKSB7XG4gICAgICAgIGJyZWFrIHJlcGxhY2VSYW5nZTtcbiAgICAgIH1cbiAgICAgIHZhciBuZXdQcmVmaXggPSBuZXdUZXh0LnNsaWNlKDAsIHByZWZpeExlbmd0aCk7XG4gICAgICB2YXIgbmV3U3VmZml4ID0gbmV3VGV4dC5zbGljZShuZXdMZW5ndGggLSBzdWZmaXhMZW5ndGgpO1xuICAgICAgaWYgKG9sZFByZWZpeCAhPT0gbmV3UHJlZml4IHx8IG9sZFN1ZmZpeCAhPT0gbmV3U3VmZml4KSB7XG4gICAgICAgIGJyZWFrIHJlcGxhY2VSYW5nZTtcbiAgICAgIH1cbiAgICAgIHZhciBvbGRNaWRkbGUgPSBvbGRUZXh0LnNsaWNlKHByZWZpeExlbmd0aCwgb2xkTGVuZ3RoIC0gc3VmZml4TGVuZ3RoKTtcbiAgICAgIHZhciBuZXdNaWRkbGUgPSBuZXdUZXh0LnNsaWNlKHByZWZpeExlbmd0aCwgbmV3TGVuZ3RoIC0gc3VmZml4TGVuZ3RoKTtcbiAgICAgIHJldHVybiBtYWtlX2VkaXRfc3BsaWNlKG9sZFByZWZpeCwgb2xkTWlkZGxlLCBuZXdNaWRkbGUsIG9sZFN1ZmZpeCk7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIG51bGw7XG59XG5cbmZ1bmN0aW9uIGRpZmYodGV4dDEsIHRleHQyLCBjdXJzb3JfcG9zKSB7XG4gIC8vIG9ubHkgcGFzcyBmaXhfdW5pY29kZT10cnVlIGF0IHRoZSB0b3AgbGV2ZWwsIG5vdCB3aGVuIGRpZmZfbWFpbiBpc1xuICAvLyByZWN1cnNpdmVseSBpbnZva2VkXG4gIHJldHVybiBkaWZmX21haW4odGV4dDEsIHRleHQyLCBjdXJzb3JfcG9zLCB0cnVlKTtcbn1cblxuZGlmZi5JTlNFUlQgPSBESUZGX0lOU0VSVDtcbmRpZmYuREVMRVRFID0gRElGRl9ERUxFVEU7XG5kaWZmLkVRVUFMID0gRElGRl9FUVVBTDtcblxubW9kdWxlLmV4cG9ydHMgPSBkaWZmO1xuIixudWxsLCIvKipcbiAqIENvcHlyaWdodCAyMDE1IFRyaW0tbWFya3MgSW5jLlxuICogQ29weXJpZ2h0IDIwMTkgVml2bGlvc3R5bGUgRm91bmRhdGlvblxuICpcbiAqIFZpdmxpb3N0eWxlLmpzIGlzIGZyZWUgc29mdHdhcmU6IHlvdSBjYW4gcmVkaXN0cmlidXRlIGl0IGFuZC9vciBtb2RpZnlcbiAqIGl0IHVuZGVyIHRoZSB0ZXJtcyBvZiB0aGUgR05VIEFmZmVybyBHZW5lcmFsIFB1YmxpYyBMaWNlbnNlIGFzIHB1Ymxpc2hlZCBieVxuICogdGhlIEZyZWUgU29mdHdhcmUgRm91bmRhdGlvbiwgZWl0aGVyIHZlcnNpb24gMyBvZiB0aGUgTGljZW5zZSwgb3JcbiAqIChhdCB5b3VyIG9wdGlvbikgYW55IGxhdGVyIHZlcnNpb24uXG4gKlxuICogVml2bGlvc3R5bGUuanMgaXMgZGlzdHJpYnV0ZWQgaW4gdGhlIGhvcGUgdGhhdCBpdCB3aWxsIGJlIHVzZWZ1bCxcbiAqIGJ1dCBXSVRIT1VUIEFOWSBXQVJSQU5UWTsgd2l0aG91dCBldmVuIHRoZSBpbXBsaWVkIHdhcnJhbnR5IG9mXG4gKiBNRVJDSEFOVEFCSUxJVFkgb3IgRklUTkVTUyBGT1IgQSBQQVJUSUNVTEFSIFBVUlBPU0UuICBTZWUgdGhlXG4gKiBHTlUgQWZmZXJvIEdlbmVyYWwgUHVibGljIExpY2Vuc2UgZm9yIG1vcmUgZGV0YWlscy5cbiAqXG4gKiBZb3Ugc2hvdWxkIGhhdmUgcmVjZWl2ZWQgYSBjb3B5IG9mIHRoZSBHTlUgQWZmZXJvIEdlbmVyYWwgUHVibGljIExpY2Vuc2VcbiAqIGFsb25nIHdpdGggVml2bGlvc3R5bGUuanMuICBJZiBub3QsIHNlZSA8aHR0cDovL3d3dy5nbnUub3JnL2xpY2Vuc2VzLz4uXG4gKlxuICogQGZpbGVvdmVydmlldyBDb25zdGFudHNcbiAqL1xuXG4vKipcbiAqIERlYnVnIGZsYWcuXG4gKi9cbmV4cG9ydCBsZXQgaXNEZWJ1ZzogYm9vbGVhbiA9IGZhbHNlO1xuZXhwb3J0IGZ1bmN0aW9uIHNldERlYnVnKHZhbHVlOiBib29sZWFuKTogdm9pZCB7XG4gIGlzRGVidWcgPSB2YWx1ZTtcbn1cblxuLyoqXG4gKiBQYWdlIHByb2dyZXNzaW9uIGRpcmVjdGlvbi5cbiAqIEBlbnVtIHtzdHJpbmd9XG4gKi9cbmV4cG9ydCBlbnVtIFBhZ2VQcm9ncmVzc2lvbiB7XG4gIExUUiA9IFwibHRyXCIsXG4gIFJUTCA9IFwicnRsXCIsXG59XG5cbi8qKlxuICogUmV0dXJuIFBhZ2VQcm9ncmVzc2lvbiBjb3JyZXNwb25kaW5nIHRvIHRoZSBzcGVjaWZpZWQgc3RyaW5nXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBwYWdlUHJvZ3Jlc3Npb25PZihzdHI6IHN0cmluZyk6IFBhZ2VQcm9ncmVzc2lvbiB7XG4gIHN3aXRjaCAoc3RyKSB7XG4gICAgY2FzZSBcImx0clwiOlxuICAgICAgcmV0dXJuIFBhZ2VQcm9ncmVzc2lvbi5MVFI7XG4gICAgY2FzZSBcInJ0bFwiOlxuICAgICAgcmV0dXJuIFBhZ2VQcm9ncmVzc2lvbi5SVEw7XG4gICAgZGVmYXVsdDpcbiAgICAgIHRocm93IG5ldyBFcnJvcihgdW5rbm93biBQYWdlUHJvZ3Jlc3Npb246ICR7c3RyfWApO1xuICB9XG59XG5cbi8qKlxuICogUGFnZSBzaWRlIChsZWZ0L3JpZ2h0KS5cbiAqIEBlbnVtIHtzdHJpbmd9XG4gKi9cbmV4cG9ydCBlbnVtIFBhZ2VTaWRlIHtcbiAgTEVGVCA9IFwibGVmdFwiLFxuICBSSUdIVCA9IFwicmlnaHRcIixcbn1cblxuLyoqXG4gKiBWaWV3ZXIgcmVhZHkgc3RhdGUuXG4gKiBAZW51bSB7c3RyaW5nfVxuICovXG5leHBvcnQgZW51bSBSZWFkeVN0YXRlIHtcbiAgTE9BRElORyA9IFwibG9hZGluZ1wiLFxuICBJTlRFUkFDVElWRSA9IFwiaW50ZXJhY3RpdmVcIixcbiAgQ09NUExFVEUgPSBcImNvbXBsZXRlXCIsXG59XG4iLCIvKipcbiAqIENvcHlyaWdodCAyMDE1IFRyaW0tbWFya3MgSW5jLlxuICogQ29weXJpZ2h0IDIwMTkgVml2bGlvc3R5bGUgRm91bmRhdGlvblxuICpcbiAqIFZpdmxpb3N0eWxlLmpzIGlzIGZyZWUgc29mdHdhcmU6IHlvdSBjYW4gcmVkaXN0cmlidXRlIGl0IGFuZC9vciBtb2RpZnlcbiAqIGl0IHVuZGVyIHRoZSB0ZXJtcyBvZiB0aGUgR05VIEFmZmVybyBHZW5lcmFsIFB1YmxpYyBMaWNlbnNlIGFzIHB1Ymxpc2hlZCBieVxuICogdGhlIEZyZWUgU29mdHdhcmUgRm91bmRhdGlvbiwgZWl0aGVyIHZlcnNpb24gMyBvZiB0aGUgTGljZW5zZSwgb3JcbiAqIChhdCB5b3VyIG9wdGlvbikgYW55IGxhdGVyIHZlcnNpb24uXG4gKlxuICogVml2bGlvc3R5bGUuanMgaXMgZGlzdHJpYnV0ZWQgaW4gdGhlIGhvcGUgdGhhdCBpdCB3aWxsIGJlIHVzZWZ1bCxcbiAqIGJ1dCBXSVRIT1VUIEFOWSBXQVJSQU5UWTsgd2l0aG91dCBldmVuIHRoZSBpbXBsaWVkIHdhcnJhbnR5IG9mXG4gKiBNRVJDSEFOVEFCSUxJVFkgb3IgRklUTkVTUyBGT1IgQSBQQVJUSUNVTEFSIFBVUlBPU0UuICBTZWUgdGhlXG4gKiBHTlUgQWZmZXJvIEdlbmVyYWwgUHVibGljIExpY2Vuc2UgZm9yIG1vcmUgZGV0YWlscy5cbiAqXG4gKiBZb3Ugc2hvdWxkIGhhdmUgcmVjZWl2ZWQgYSBjb3B5IG9mIHRoZSBHTlUgQWZmZXJvIEdlbmVyYWwgUHVibGljIExpY2Vuc2VcbiAqIGFsb25nIHdpdGggVml2bGlvc3R5bGUuanMuICBJZiBub3QsIHNlZSA8aHR0cDovL3d3dy5nbnUub3JnL2xpY2Vuc2VzLz4uXG4gKlxuICogQGZpbGVvdmVydmlldyBMb2dnaW5nIC0gTG9nZ2luZyB1dGlsaXR5XG4gKi9cblxuLyoqXG4gKiBMb2cgbGV2ZWwuXG4gKiBAZW51bSB7bnVtYmVyfVxuICovXG5leHBvcnQgZW51bSBMb2dMZXZlbCB7XG4gIERFQlVHID0gMSxcbiAgSU5GTyxcbiAgV0FSTixcbiAgRVJST1IsXG59XG5cbmV4cG9ydCB0eXBlIEVycm9ySW5mbyA9IHtcbiAgZXJyb3I6IEVycm9yO1xuICBtZXNzYWdlczogYW55W107XG59O1xuXG4vKipcbiAqIENsYXNzIGxvZ2dpbmcgZXJyb3IsIHdhcm5pbmcsIGluZm9ybWF0aW9uIG9yIGRlYnVnIG1lc3NhZ2VzLlxuICovXG5leHBvcnQgY2xhc3MgTG9nZ2VyIHtcbiAgcHJpdmF0ZSBsaXN0ZW5lcnM6IHsgW2tleSBpbiBMb2dMZXZlbF0/OiAoKHAxOiBFcnJvckluZm8pID0+IHZvaWQpW10gfSA9IHt9O1xuXG4gIGNvbnN0cnVjdG9yKHByaXZhdGUgb3B0X2NvbnNvbGU/OiBDb25zb2xlKSB7fVxuXG4gIHByaXZhdGUgY29uc29sZURlYnVnKG1zZzogYW55W10pIHtcbiAgICBpZiAodGhpcy5vcHRfY29uc29sZSkge1xuICAgICAgaWYgKHRoaXMub3B0X2NvbnNvbGUuZGVidWcpIHtcbiAgICAgICAgdGhpcy5vcHRfY29uc29sZS5kZWJ1ZyguLi5tc2cpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdGhpcy5vcHRfY29uc29sZS5sb2coLi4ubXNnKTtcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgY29uc29sZS5kZWJ1ZyguLi5tc2cpOyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIG5vLWNvbnNvbGVcbiAgICB9XG4gIH1cblxuICBwcml2YXRlIGNvbnNvbGVJbmZvKG1zZzogYW55W10pIHtcbiAgICBpZiAodGhpcy5vcHRfY29uc29sZSkge1xuICAgICAgaWYgKHRoaXMub3B0X2NvbnNvbGUuaW5mbykge1xuICAgICAgICB0aGlzLm9wdF9jb25zb2xlLmluZm8oLi4ubXNnKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHRoaXMub3B0X2NvbnNvbGUubG9nKC4uLm1zZyk7XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIGNvbnNvbGUuaW5mbyguLi5tc2cpOyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIG5vLWNvbnNvbGVcbiAgICB9XG4gIH1cblxuICBwcml2YXRlIGNvbnNvbGVXYXJuKG1zZzogYW55W10pIHtcbiAgICBpZiAodGhpcy5vcHRfY29uc29sZSkge1xuICAgICAgaWYgKHRoaXMub3B0X2NvbnNvbGUud2Fybikge1xuICAgICAgICB0aGlzLm9wdF9jb25zb2xlLndhcm4oLi4ubXNnKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHRoaXMub3B0X2NvbnNvbGUubG9nKC4uLm1zZyk7XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIGNvbnNvbGUud2FybiguLi5tc2cpOyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIG5vLWNvbnNvbGVcbiAgICB9XG4gIH1cblxuICBwcml2YXRlIGNvbnNvbGVFcnJvcihtc2c6IGFueVtdKSB7XG4gICAgaWYgKHRoaXMub3B0X2NvbnNvbGUpIHtcbiAgICAgIGlmICh0aGlzLm9wdF9jb25zb2xlLmVycm9yKSB7XG4gICAgICAgIHRoaXMub3B0X2NvbnNvbGUuZXJyb3IoLi4ubXNnKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHRoaXMub3B0X2NvbnNvbGUubG9nKC4uLm1zZyk7XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIGNvbnNvbGUuZXJyb3IoLi4ubXNnKTsgLy8gZXNsaW50LWRpc2FibGUtbGluZSBuby1jb25zb2xlXG4gICAgfVxuICB9XG5cbiAgcHJpdmF0ZSB0cmlnZ2VyTGlzdGVuZXJzKGxldmVsOiBMb2dMZXZlbCwgYXJnczogRXJyb3JJbmZvKSB7XG4gICAgY29uc3QgbGlzdGVuZXJzID0gdGhpcy5saXN0ZW5lcnNbbGV2ZWxdO1xuICAgIGlmIChsaXN0ZW5lcnMpIHtcbiAgICAgIGxpc3RlbmVycy5mb3JFYWNoKChsaXN0ZW5lcikgPT4ge1xuICAgICAgICBsaXN0ZW5lcihhcmdzKTtcbiAgICAgIH0pO1xuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAgKiBBZGQgYSBsaXN0ZW5lciBmdW5jdGlvbiBpbnZva2VkIHdoZW4gYSBsb2cgZXZlbnQgd2l0aCB0aGUgc3BlY2lmaWVkIGxldmVsXG4gICAqIG9jY3Vycy5cbiAgICovXG4gIGFkZExpc3RlbmVyKGxldmVsOiBMb2dMZXZlbCwgbGlzdGVuZXI6IChwMTogRXJyb3JJbmZvKSA9PiB2b2lkKSB7XG4gICAgbGV0IGxpc3RlbmVycyA9IHRoaXMubGlzdGVuZXJzW2xldmVsXTtcbiAgICBpZiAoIWxpc3RlbmVycykge1xuICAgICAgbGlzdGVuZXJzID0gdGhpcy5saXN0ZW5lcnNbbGV2ZWxdID0gW107XG4gICAgfVxuICAgIGxpc3RlbmVycy5wdXNoKGxpc3RlbmVyKTtcbiAgfVxuXG4gIGRlYnVnKC4uLnZhcl9hcmdzOiBhbnlbXSkge1xuICAgIGNvbnN0IGFyZ3MgPSBhcmd1bWVudHNUb0Vycm9ySW5mbyhhcmd1bWVudHMpO1xuICAgIHRoaXMuY29uc29sZURlYnVnKGJ1aWxkTWVzc2FnZUFuZFN0YWNrVHJhY2UoYXJncykpO1xuICAgIHRoaXMudHJpZ2dlckxpc3RlbmVycyhMb2dMZXZlbC5ERUJVRywgYXJncyk7XG4gIH1cblxuICBpbmZvKC4uLnZhcl9hcmdzOiBhbnlbXSkge1xuICAgIGNvbnN0IGFyZ3MgPSBhcmd1bWVudHNUb0Vycm9ySW5mbyhhcmd1bWVudHMpO1xuICAgIHRoaXMuY29uc29sZUluZm8oYnVpbGRNZXNzYWdlQW5kU3RhY2tUcmFjZShhcmdzKSk7XG4gICAgdGhpcy50cmlnZ2VyTGlzdGVuZXJzKExvZ0xldmVsLklORk8sIGFyZ3MpO1xuICB9XG5cbiAgd2FybiguLi52YXJfYXJnczogYW55W10pIHtcbiAgICBjb25zdCBhcmdzID0gYXJndW1lbnRzVG9FcnJvckluZm8oYXJndW1lbnRzKTtcbiAgICB0aGlzLmNvbnNvbGVXYXJuKGJ1aWxkTWVzc2FnZUFuZFN0YWNrVHJhY2UoYXJncykpO1xuICAgIHRoaXMudHJpZ2dlckxpc3RlbmVycyhMb2dMZXZlbC5XQVJOLCBhcmdzKTtcbiAgfVxuXG4gIGVycm9yKC4uLnZhcl9hcmdzOiBhbnlbXSkge1xuICAgIGNvbnN0IGFyZ3MgPSBhcmd1bWVudHNUb0Vycm9ySW5mbyhhcmd1bWVudHMpO1xuICAgIHRoaXMuY29uc29sZUVycm9yKGJ1aWxkTWVzc2FnZUFuZFN0YWNrVHJhY2UoYXJncykpO1xuICAgIHRoaXMudHJpZ2dlckxpc3RlbmVycyhMb2dMZXZlbC5FUlJPUiwgYXJncyk7XG4gIH1cbn1cblxuLyoqXG4gKiBAcGFyYW0gYXJnc1xuICovXG5mdW5jdGlvbiBhcmd1bWVudHNUb0Vycm9ySW5mbyhhcmdzOiBJQXJndW1lbnRzKTogRXJyb3JJbmZvIHtcbiAgY29uc3QgYSA9IEFycmF5LmZyb20oYXJncyk7XG4gIGxldCBlOiBFcnJvciA9IG51bGw7XG4gIGlmIChhWzBdIGluc3RhbmNlb2YgRXJyb3IpIHtcbiAgICBlID0gYS5zaGlmdCgpO1xuICB9XG4gIHJldHVybiB7IGVycm9yOiBlLCBtZXNzYWdlczogYSB9O1xufVxuXG5mdW5jdGlvbiBidWlsZE1lc3NhZ2VBbmRTdGFja1RyYWNlKGFyZ3M6IEVycm9ySW5mbyk6IHN0cmluZ1tdIHtcbiAgY29uc3QgZSA9IGFyZ3MuZXJyb3I7XG4gIGNvbnN0IHN0YWNrID0gZSAmJiAoZVtcImZyYW1lVHJhY2VcIl0gfHwgZVtcInN0YWNrXCJdKTtcbiAgbGV0IG1lc3NhZ2VzID0gW10uY29uY2F0KGFyZ3NbXCJtZXNzYWdlc1wiXSk7XG4gIGlmIChlKSB7XG4gICAgaWYgKG1lc3NhZ2VzLmxlbmd0aCA+IDApIHtcbiAgICAgIG1lc3NhZ2VzID0gbWVzc2FnZXMuY29uY2F0KFtcIlxcblwiXSk7XG4gICAgfVxuICAgIG1lc3NhZ2VzID0gbWVzc2FnZXMuY29uY2F0KFtlW1widG9TdHJpbmdcIl0oKV0pO1xuICAgIGlmIChzdGFjaykge1xuICAgICAgbWVzc2FnZXMgPSBtZXNzYWdlcy5jb25jYXQoW1wiXFxuXCJdKS5jb25jYXQoc3RhY2spO1xuICAgIH1cbiAgfVxuICByZXR1cm4gbWVzc2FnZXM7XG59XG5cbmV4cG9ydCBjb25zdCBsb2dnZXIgPSBuZXcgTG9nZ2VyKCk7XG4iLCIvKipcbiAqIENvcHlyaWdodCAyMDE2IFRyaW0tbWFya3MgSW5jLlxuICogQ29weXJpZ2h0IDIwMTkgVml2bGlvc3R5bGUgRm91bmRhdGlvblxuICpcbiAqIFZpdmxpb3N0eWxlLmpzIGlzIGZyZWUgc29mdHdhcmU6IHlvdSBjYW4gcmVkaXN0cmlidXRlIGl0IGFuZC9vciBtb2RpZnlcbiAqIGl0IHVuZGVyIHRoZSB0ZXJtcyBvZiB0aGUgR05VIEFmZmVybyBHZW5lcmFsIFB1YmxpYyBMaWNlbnNlIGFzIHB1Ymxpc2hlZCBieVxuICogdGhlIEZyZWUgU29mdHdhcmUgRm91bmRhdGlvbiwgZWl0aGVyIHZlcnNpb24gMyBvZiB0aGUgTGljZW5zZSwgb3JcbiAqIChhdCB5b3VyIG9wdGlvbikgYW55IGxhdGVyIHZlcnNpb24uXG4gKlxuICogVml2bGlvc3R5bGUuanMgaXMgZGlzdHJpYnV0ZWQgaW4gdGhlIGhvcGUgdGhhdCBpdCB3aWxsIGJlIHVzZWZ1bCxcbiAqIGJ1dCBXSVRIT1VUIEFOWSBXQVJSQU5UWTsgd2l0aG91dCBldmVuIHRoZSBpbXBsaWVkIHdhcnJhbnR5IG9mXG4gKiBNRVJDSEFOVEFCSUxJVFkgb3IgRklUTkVTUyBGT1IgQSBQQVJUSUNVTEFSIFBVUlBPU0UuICBTZWUgdGhlXG4gKiBHTlUgQWZmZXJvIEdlbmVyYWwgUHVibGljIExpY2Vuc2UgZm9yIG1vcmUgZGV0YWlscy5cbiAqXG4gKiBZb3Ugc2hvdWxkIGhhdmUgcmVjZWl2ZWQgYSBjb3B5IG9mIHRoZSBHTlUgQWZmZXJvIEdlbmVyYWwgUHVibGljIExpY2Vuc2VcbiAqIGFsb25nIHdpdGggVml2bGlvc3R5bGUuanMuICBJZiBub3QsIHNlZSA8aHR0cDovL3d3dy5nbnUub3JnL2xpY2Vuc2VzLz4uXG4gKlxuICogQGZpbGVvdmVydmlldyBQbHVnaW4gLSBQbHVnaW4gbWVjaGFuaXNtXG4gKi9cbmltcG9ydCAqIGFzIEJhc2UgZnJvbSBcIi4vYmFzZVwiO1xuaW1wb3J0ICogYXMgQ3NzIGZyb20gXCIuL2Nzc1wiO1xuaW1wb3J0ICogYXMgTGF5b3V0UHJvY2Vzc29yIGZyb20gXCIuL2xheW91dC1wcm9jZXNzb3JcIjtcbmltcG9ydCAqIGFzIExvZ2dpbmcgZnJvbSBcIi4vbG9nZ2luZ1wiO1xuaW1wb3J0ICogYXMgVGFzayBmcm9tIFwiLi90YXNrXCI7XG5pbXBvcnQgeyBMYXlvdXQsIFZ0cmVlIH0gZnJvbSBcIi4vdHlwZXNcIjtcblxuLyoqXG4gKiBUeXBlIG9mIGltcGxlbWVudGVkIGhvb2tzLlxuICogQGVudW0ge3N0cmluZ31cbiAqL1xuZXhwb3J0IGVudW0gSE9PS1Mge1xuICAvKipcbiAgICogQ2FsbGVkIHdoZW4gYSBzaW5nbGUgcHJvcGVydHkgZGVjbGFyYXRpb24gaXMgcGFyc2VkLlxuICAgKlxuICAgKiBUaGUgaG9vayBpcyBjYWxsZWQgd2l0aCBhbiBvYmplY3Qgd2l0aCB0aGUgZm9sbG93aW5nIHByb3BlcnRpZXM6XG4gICAqICAge3N0cmluZ30gbmFtZTogUHJvcGVydHkgbmFtZVxuICAgKiAgIHshQ3NzLlZhbH0gdmFsdWU6IFByb3BlcnR5IHZhbHVlXG4gICAqICAge2Jvb2xlYW59IGltcG9ydGFudDogV2hldGhlciAnIWltcG9ydGFudCcgZmxhZyBpcyBwcmVzZW50IG9yIG5vdFxuICAgKiBGdW5jdGlvbnMgY2FsbGVkIGJ5IHRoaXMgaG9vayBhcmUgZXhwZWN0ZWQgdG8gcmV0dXJuIGEgdmFsdWUgd2l0aCB0aGUgc2FtZVxuICAgKiB0eXBlIGFzIHRoZSBhYm92ZS4gVGhlIGRlY2xhcmF0aW9uIGlzIHRoZW4gcmVwbGFjZWQgYnkgdGhlIHJldHVybmVkIHZhbHVlLlxuICAgKlxuICAgKiBOb3RlIHRoYXQgYSBzaG9ydGhhbmQgZGVjbGFyYXRpb24gaXMgbm90IGRpcmVjdGx5IHBhc3NlZCB0byB0aGlzIGhvb2suXG4gICAqIEFmdGVyIHRoZSBzaG9ydGhhbmQgZGVjbGFyYXRpb24gaXMgaW50ZXJwcmV0ZWQgYW5kIGJyb2tlbiBpbnRvXG4gICAqIG5vbi1zaG9ydGhhbmQgZGVjbGFyYXRpb25zLCB0aGUgaG9vayBpcyBjYWxsZWQgZm9yIGVhY2ggb2YgdGhlXG4gICAqIG5vbi1zaG9ydGhhbmQgZGVjbGFyYXRpb25zLlxuICAgKi9cbiAgU0lNUExFX1BST1BFUlRZID0gXCJTSU1QTEVfUFJPUEVSVFlcIixcblxuICAvKipcbiAgICogQ2FsbGVkIHdoZW4gYSBzaW5nbGUgZG9jdW1lbnQgKGkuZS4gYSBzaW5nbGUgc3BpbmUgaXRlbSkgaGFzIGJlZW4gZmV0Y2hlZCxcbiAgICogYmVmb3JlIHBhcnNpbmcuXG4gICAqXG4gICAqIFRoZSBob29rIGlzIGNhbGxlZCB3aXRoIHRoZSBEb2N1bWVudCBvYmplY3QuXG4gICAqL1xuICBQUkVQUk9DRVNTX1NJTkdMRV9ET0NVTUVOVCA9IFwiUFJFUFJPQ0VTU19TSU5HTEVfRE9DVU1FTlRcIixcblxuICAvKipcbiAgICogQ2FsbGVkIGJlZm9yZSBjcmVhdGluZyBhIHRleHQgbm9kZSBmb3IgbW9kaWZ5aW5nIGEgdGV4dCBjb250ZW50LlxuICAgKlxuICAgKiBUaGUgaG9vayBpcyBjYWxsZWQgd2l0aCBhbiBvYmplY3Qgd2l0aCB0aGUgZm9sbG93aW5nIHByb3BlcnRpZXM6XG4gICAqICAge1Z0cmVlLk5vZGVDb250ZXh0fSBub2RlQ29udGV4dFxuICAgKiAgIHtzdHJpbmd9IHNvdXJjZVRleHRDb250ZW50XG4gICAqXG4gICAqIEZ1bmN0aW9ucyBjYWxsZWQgYnkgdGhpcyBob29rIGFyZSBleHBlY3RlZCB0byByZXR1cm4gYVxuICAgKiBUYXNrLlJlc3VsdC48c3RyaW5nPi4gVGhlIHRleHQgY29udGVudCBpcyB0aGVuIHJlcGxhY2VkIGJ5IHRoZVxuICAgKiByZXR1cm5lZCB2YWx1ZS5cbiAgICovXG4gIFBSRVBST0NFU1NfVEVYVF9DT05URU5UID0gXCJQUkVQUk9DRVNTX1RFWFRfQ09OVEVOVFwiLFxuXG4gIC8qKlxuICAgKiBDYWxsZWQgYmVmb3JlIGNyZWF0aW5nIGEgZWxlbWVudCBmb3IgbW9kaWZ5aW5nIGEgZWxlbWVudCBzdHlsZS5cbiAgICpcbiAgICogVGhlIGhvb2sgaXMgY2FsbGVkIHdpdGggYW4gb2JqZWN0IHdpdGggdGhlIGZvbGxvd2luZyBwcm9wZXJ0aWVzOlxuICAgKiAgIHtWdHJlZS5Ob2RlQ29udGV4dH0gbm9kZUNvbnRleHRcbiAgICogICB7IU9iamVjdH0gc3R5bGVcbiAgICovXG4gIFBSRVBST0NFU1NfRUxFTUVOVF9TVFlMRSA9IFwiUFJFUFJPQ0VTU19FTEVNRU5UX1NUWUxFXCIsXG5cbiAgLyoqXG4gICAqIENhbGxlZCBiZWZvcmUgZ2V0aW5nIENzc0Nhc2NhZGUucG9seWZpbGxlZEluaGVyaXRlZFByb3BzLlxuICAgKlxuICAgKiBUaGUgaG9vayByZXR1cm4gYSBhcnJheSBvZiBwb2x5ZmlsbGVkIGluaGVyaXRlZCBwcm9wZXJ0eSBuYW1lLlxuICAgKi9cbiAgUE9MWUZJTExFRF9JTkhFUklURURfUFJPUFMgPSBcIlBPTFlGSUxMRURfSU5IRVJJVEVEX1BST1BTXCIsXG5cbiAgLyoqXG4gICAqIENhbGxlZCB3aGVuIGEgVmlld2VyIGlzIGNvbmZpZ3VyZWQuXG4gICAqXG4gICAqIFRoZSBob29rIGlzIGNhbGxlZCB3aXRoIGFuIG9iamVjdCB3aXRoIHRoZSBmb2xsb3dpbmcgcHJvcGVydGllczpcbiAgICogIHtCYXNlLkpTT059IGNvbW1hbmRcbiAgICovXG4gIENPTkZJR1VSQVRJT04gPSBcIkNPTkZJR1VSQVRJT05cIixcblxuICAvKipcbiAgICogQ2FsbGVkIHdoZW4gcmVzb2x2aW5nIGEgdGV4dCBub2RlIGJyZWFrZXJcbiAgICogd2hpY2ggZGV0ZWN0cyBhbiBhY2NlcHRhYmxlIGJyZWFrcG9pbnQgYW5kIGJyZWFrIHRleHQgbm9kZSBhdCB0aGlzIHBvaW50LlxuICAgKlxuICAgKiBUaGUgaG9vayBpcyBjYWxsZWQgd2l0aCBhbiBvYmplY3Qgd2l0aCB0aGUgZm9sbG93aW5nIHByb3BlcnRpZXM6XG4gICAqICB7VnRyZWUuTm9kZUNvbnRleHR9IG5vZGVDb250ZXh0XG4gICAqXG4gICAqIEZ1bmN0aW9ucyBjYWxsZWQgYnkgdGhpcyBob29rIGFyZSBleHBlY3RlZCB0b1xuICAgKiByZXR1cm4gYW4gaW5zdG5jZSBvZiB7TGF5b3V0LlRleHROb2RlQnJlYWtlcn0gb3IgbnVsbC5cbiAgICovXG4gIFJFU09MVkVfVEVYVF9OT0RFX0JSRUFLRVIgPSBcIlJFU09MVkVfVEVYVF9OT0RFX0JSRUFLRVJcIixcblxuICAvKipcbiAgICogQ2FsbGVkIHdoZW4gcmVzb2x2aW5nIGEgZm9ybWF0dGluZyBjb250ZXh0LlxuICAgKlxuICAgKiBUaGUgaG9vayBpcyBjYWxsZWQgd2l0aCB0aGUgZm9sbG93aW5nIHBhcmFtZXRlcnM6XG4gICAqICAgbm9kZUNvbnRleHQ6IGEgTm9kZUNvbnRleHQgb2JqZWN0XG4gICAqICAgZmlyc3RUaW1lOiBhIGJvb2xlYW4gZmxhZyByZXByZXNlbnRpbmcgd2hldGhlciB0aGlzIG5vZGUgaXMgZW5jb3VudGVyZWRcbiAgICogZm9yIHRoZSBmaXJzdCB0aW1lIG9yIG5vdCBkaXNwbGF5OiBhbiBDc3MuSWRlbnQgdmFsdWUgcmVwcmVzZW50aW5nXG4gICAqICdkaXNwbGF5JyB2YWx1ZSBvZiB0aGUgbm9kZSBwb3NpdGlvbjogYW4gQ3NzLklkZW50IHZhbHVlIHJlcHJlc2VudGluZ1xuICAgKiAncG9zaXRpb24nIHZhbHVlIG9mIHRoZSBub2RlIGZsb2F0OiBhbiBDc3MuSWRlbnQgdmFsdWUgcmVwcmVzZW50aW5nXG4gICAqICdmbG9hdCcgdmFsdWUgb2YgdGhlIG5vZGUgaXNSb290OiBhIGJvb2xlYW4gZmxhZyByZXByZXNlbnRpbmcgd2hldGhlciB0aGlzXG4gICAqIG5vZGUgaXMgYSByb290IChvZiBhIGZsb3cpIG9yIG5vdCBGdW5jdGlvbnMgY2FsbGVkIGJ5IHRoaXMgaG9vayBhcmVcbiAgICogZXhwZWN0ZWQgdG8gcmV0dXJuIGEgZm9ybWF0dGluZyBjb250ZXh0IGZvciB0aGUgTm9kZUNvbnRleHQuXG4gICAqL1xuICBSRVNPTFZFX0ZPUk1BVFRJTkdfQ09OVEVYVCA9IFwiUkVTT0xWRV9GT1JNQVRUSU5HX0NPTlRFWFRcIixcblxuICAvKipcbiAgICogQ2FsbGVkIHdoZW4gcmVzb2x2aW5nIGEgbGF5b3V0IHByb2Nlc3NvciAoTGF5b3V0UHJvY2Vzc29yKSBmb3JcbiAgICogYSBmb3JtYXR0aW5nIGNvbnRleHQuXG4gICAqXG4gICAqIFRoZSBob29rIGlzIGNhbGxlZCB3aXRoIGEgZm9ybWF0dGluZyBjb250ZXh0XG4gICAqIChWdHJlZS5Gb3JtYXR0aW5nQ29udGV4dCkuIEZ1bmN0aW9ucyBjYWxsZWQgYnkgdGhpcyBob29rIGFyZSBleHBlY3RlZFxuICAgKiB0byByZXR1cm4gYSBsYXlvdXQgcHJvY2Vzc29yIGNvcnJlc3BvbmRpbmcgdG8gdGhlIGZvcm1hdHRpbmcgY29udGV4dC5cbiAgICovXG4gIFJFU09MVkVfTEFZT1VUX1BST0NFU1NPUiA9IFwiUkVTT0xWRV9MQVlPVVRfUFJPQ0VTU09SXCIsXG5cbiAgLyoqXG4gICAqIENhbGxlZCBhZnRlciBsYWlkIG91dCBhIGJsb2NrIGNvbnRlbnRzLlxuICAgKlxuICAgKiBUaGUgaG9vayBpcyBjYWxsZWQgd2l0aCBhbiBvYmplY3Qgd2l0aCB0aGUgZm9sbG93aW5nIHByb3BlcnRpZXM6XG4gICAqICB7VnRyZWUuTm9kZUNvbnRleHR9IG5vZGVDb250ZXh0XG4gICAqICB7QXJyYXkuPFZ0cmVlLk5vZGVDb250ZXh0Pn0gY2hlY2tQb2ludHNcbiAgICogIHtMYXlvdXQuQ29sdW1ufSBjb2x1bW5cbiAgICovXG4gIFBPU1RfTEFZT1VUX0JMT0NLID0gXCJQT1NUX0xBWU9VVF9CTE9DS1wiLFxufVxuXG5leHBvcnQgdHlwZSBQcmVQcm9jZXNzU2luZ2xlRG9jdW1lbnRIb29rID0gKHAxOiBEb2N1bWVudCkgPT4gYW55O1xuXG5leHBvcnQgdHlwZSBQcmVQcm9jZXNzVGV4dENvbnRlbnRIb29rID0gKFxuICBwMTogVnRyZWUuTm9kZUNvbnRleHQsXG4gIHAyOiBzdHJpbmcsXG4pID0+IFRhc2suUmVzdWx0PHN0cmluZz47XG5cbmV4cG9ydCB0eXBlIFByZVByb2Nlc3NFbGVtZW50U3R5bGVIb29rID0gKFxuICBwMTogVnRyZWUuTm9kZUNvbnRleHQsXG4gIHAyOiBvYmplY3QsXG4pID0+IHZvaWQ7XG5cbmV4cG9ydCB0eXBlIFBvbHlmaWxsZWRJbmhlcml0ZWRQcm9wc0hvb2sgPSAoKSA9PiBzdHJpbmdbXTtcblxuZXhwb3J0IHR5cGUgQ29uZmlndXJhdGlvbkhvb2sgPSAoXG4gIHAxOiBCYXNlLkpTT04sXG4pID0+IHtcbiAgbmVlZFJlc2l6ZTogYm9vbGVhbiB8IG51bGwgfCB1bmRlZmluZWQ7XG4gIG5lZWRSZWZyZXNoOiBib29sZWFuIHwgbnVsbCB8IHVuZGVmaW5lZDtcbn07XG5cbmV4cG9ydCB0eXBlIFJlc29sdmVUZXh0Tm9kZUJyZWFrZXJIb29rID0gKFxuICBwMTogVnRyZWUuTm9kZUNvbnRleHQsXG4pID0+IExheW91dC5UZXh0Tm9kZUJyZWFrZXI7XG5cbmV4cG9ydCB0eXBlIFJlc29sdmVGb3JtYXR0aW5nQ29udGV4dEhvb2sgPSAoXG4gIHAxOiBWdHJlZS5Ob2RlQ29udGV4dCxcbiAgcDI6IGJvb2xlYW4sXG4gIHAzOiBDc3MuSWRlbnQsXG4gIHA0OiBDc3MuSWRlbnQsXG4gIHA1OiBDc3MuSWRlbnQsXG4gIHA2OiBib29sZWFuLFxuKSA9PiBWdHJlZS5Gb3JtYXR0aW5nQ29udGV4dDtcblxuZXhwb3J0IHR5cGUgUmVzb2x2ZUxheW91dFByb2Nlc3Nvckhvb2sgPSAoXG4gIHAxOiBWdHJlZS5Gb3JtYXR0aW5nQ29udGV4dCxcbikgPT4gTGF5b3V0UHJvY2Vzc29yLkxheW91dFByb2Nlc3NvcjtcblxuZXhwb3J0IHR5cGUgUG9zdExheW91dEJsb2NrSG9vayA9IChcbiAgcDE6IFZ0cmVlLk5vZGVDb250ZXh0LFxuICBwMjogVnRyZWUuTm9kZUNvbnRleHRbXSxcbiAgcDM6IExheW91dC5Db2x1bW4sXG4pID0+IHZvaWQ7XG5cbmNvbnN0IGhvb2tzID0ge307XG5cbi8qKlxuICogUmVnaXN0ZXIgYSBmdW5jdGlvbiB0byBhIGhvb2sgd2l0aCB0aGUgc3BlY2lmaWVkIG5hbWUuXG4gKiBUaGUgcmVnaXN0ZXJlZCBmdW5jdGlvbiBpcyBjYWxsZWQgYXQgYXBwcm9wcmlhdGUgdGltaW5ncyBieSB0aGUgY29yZSBjb2RlLlxuICogQXJndW1lbnRzIHBhc3NlZCB0byB0aGUgZnVuY3Rpb24gZGVwZW5kIG9uIHRoZSBob29rLlxuICogV2hlbiBtdWx0aXBsZSBmdW5jdGlvbnMgYXJlIHJlZ2lzdGVyZWQsIHRoZXkgYXJlIGNhbGxlZCBieSB0aGUgb3JkZXIgaW4gd2hpY2hcbiAqIHRoZXkgYXJlIHJlZ2lzdGVyZWQuXG4gKiBAcGFyYW0gbmFtZSBOYW1lIG9mIHRoZSBob29rLlxuICogQHBhcmFtIGZuIEZ1bmN0aW9uIHRvIGJlIHJlZ2lzdGVyZWQgdG8gdGhlIGhvb2suXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiByZWdpc3Rlckhvb2sobmFtZTogc3RyaW5nLCBmbjogKC4uLnAxKSA9PiBhbnkpOiB2b2lkIHtcbiAgaWYgKCFIT09LU1tuYW1lXSkge1xuICAgIExvZ2dpbmcubG9nZ2VyLndhcm4obmV3IEVycm9yKGBTa2lwcGluZyB1bmtub3duIHBsdWdpbiBob29rICcke25hbWV9Jy5gKSk7XG4gIH0gZWxzZSB7XG4gICAgbGV0IGhvb2tzRm9yTmFtZSA9IGhvb2tzW25hbWVdO1xuICAgIGlmICghaG9va3NGb3JOYW1lKSB7XG4gICAgICBob29rc0Zvck5hbWUgPSBob29rc1tuYW1lXSA9IFtdO1xuICAgIH1cbiAgICBob29rc0Zvck5hbWUucHVzaChmbik7XG4gIH1cbn1cblxuLyoqXG4gKiBSZW1vdmUgYSBmdW5jdGlvbiBhbHJlYWR5IHJlZ2lzdGVyZWQgdG8gdGhlIHNwZWNpZmllZCBuYW1lLlxuICogTm90ZSB0aGF0IGV2ZW4gaWYgdGhlIHNhbWUgZnVuY3Rpb24gYXJlIHJlZ2lzdGVyZWQgbXVsdGlwbGUgdGltZXMsIHRoaXNcbiAqIG1ldGhvZCByZW1vdmVzIG9ubHkgdGhlIGZpcnN0IG9uZS5cbiAqIEBwYXJhbSBuYW1lIE5hbWUgb2YgdGhlIGhvb2suXG4gKiBAcGFyYW0gZm4gRnVuY3Rpb24gdG8gYmUgcmVtb3ZlZCBmcm9tIHRoZSBob29rLlxuICovXG5leHBvcnQgZnVuY3Rpb24gcmVtb3ZlSG9vayhuYW1lOiBzdHJpbmcsIGZuOiAoLi4ucDEpID0+IGFueSk6IHZvaWQge1xuICBpZiAoIUhPT0tTW25hbWVdKSB7XG4gICAgTG9nZ2luZy5sb2dnZXIud2FybihuZXcgRXJyb3IoYElnbm9yaW5nIHVua25vd24gcGx1Z2luIGhvb2sgJyR7bmFtZX0nLmApKTtcbiAgfSBlbHNlIHtcbiAgICBjb25zdCBob29rc0Zvck5hbWUgPSBob29rc1tuYW1lXTtcbiAgICBpZiAoaG9va3NGb3JOYW1lKSB7XG4gICAgICBjb25zdCBpbmRleCA9IGhvb2tzRm9yTmFtZS5pbmRleE9mKGZuKTtcbiAgICAgIGlmIChpbmRleCA+PSAwKSB7XG4gICAgICAgIGhvb2tzRm9yTmFtZS5zcGxpY2UoaW5kZXgsIDEpO1xuICAgICAgfVxuICAgIH1cbiAgfVxufVxuXG4vKipcbiAqIEdldCBhbGwgaG9va3MgcmVnaXN0ZXJlZCB0byB0aGUgc3BlY2lmaWVkIG5hbWUuXG4gKiBUaGlzIG1ldGhvZCBpcyBmb3IgaW50ZXJuYWwgdXNlIChmcm9tIHRoZSBjb3JlIGNvZGUpLlxuICovXG5leHBvcnQgZnVuY3Rpb24gZ2V0SG9va3NGb3JOYW1lKG5hbWU6IHN0cmluZyk6ICgoLi4ucDEpID0+IGFueSlbXSB7XG4gIGNvbnN0IGhvb2tzRm9yTmFtZSA9IGhvb2tzW25hbWVdO1xuICByZXR1cm4gaG9va3NGb3JOYW1lIHx8IFtdO1xufVxuXG4vKipcbiAqIFB1YmlsYyBtZW1iZXJzIG9mIHRoZSBidW5kbGVkIGxpYnJhcnkuXG4gKi9cbmV4cG9ydCBjb25zdCBwbHVnaW4gPSB7XG4gIHJlZ2lzdGVySG9vayxcbiAgcmVtb3ZlSG9vayxcbn07XG4iLCIvKipcbiAqIENvcHlyaWdodCAyMDE1IFRyaW0tbWFya3MgSW5jLlxuICogQ29weXJpZ2h0IDIwMTkgVml2bGlvc3R5bGUgRm91bmRhdGlvblxuICpcbiAqIFZpdmxpb3N0eWxlLmpzIGlzIGZyZWUgc29mdHdhcmU6IHlvdSBjYW4gcmVkaXN0cmlidXRlIGl0IGFuZC9vciBtb2RpZnlcbiAqIGl0IHVuZGVyIHRoZSB0ZXJtcyBvZiB0aGUgR05VIEFmZmVybyBHZW5lcmFsIFB1YmxpYyBMaWNlbnNlIGFzIHB1Ymxpc2hlZCBieVxuICogdGhlIEZyZWUgU29mdHdhcmUgRm91bmRhdGlvbiwgZWl0aGVyIHZlcnNpb24gMyBvZiB0aGUgTGljZW5zZSwgb3JcbiAqIChhdCB5b3VyIG9wdGlvbikgYW55IGxhdGVyIHZlcnNpb24uXG4gKlxuICogVml2bGlvc3R5bGUuanMgaXMgZGlzdHJpYnV0ZWQgaW4gdGhlIGhvcGUgdGhhdCBpdCB3aWxsIGJlIHVzZWZ1bCxcbiAqIGJ1dCBXSVRIT1VUIEFOWSBXQVJSQU5UWTsgd2l0aG91dCBldmVuIHRoZSBpbXBsaWVkIHdhcnJhbnR5IG9mXG4gKiBNRVJDSEFOVEFCSUxJVFkgb3IgRklUTkVTUyBGT1IgQSBQQVJUSUNVTEFSIFBVUlBPU0UuICBTZWUgdGhlXG4gKiBHTlUgQWZmZXJvIEdlbmVyYWwgUHVibGljIExpY2Vuc2UgZm9yIG1vcmUgZGV0YWlscy5cbiAqXG4gKiBZb3Ugc2hvdWxkIGhhdmUgcmVjZWl2ZWQgYSBjb3B5IG9mIHRoZSBHTlUgQWZmZXJvIEdlbmVyYWwgUHVibGljIExpY2Vuc2VcbiAqIGFsb25nIHdpdGggVml2bGlvc3R5bGUuanMuICBJZiBub3QsIHNlZSA8aHR0cDovL3d3dy5nbnUub3JnL2xpY2Vuc2VzLz4uXG4gKlxuICogQGZpbGVvdmVydmlldyBQcm9maWxlIC0gVXRpbGl0eSBmb3IgcHJvZmlsaW5nXG4gKi9cbmltcG9ydCAqIGFzIExvZ2dpbmcgZnJvbSBcIi4vbG9nZ2luZ1wiO1xuXG4vKipcbiAqIFBlcmZvcm1hbmNlIHByb2ZpbGVyIG1lYXN1cmluZyBleGVjdXRpb24gdGltZSBvZiB0aGUgc2NyaXB0LlxuICovXG5leHBvcnQgY2xhc3MgUHJvZmlsZXIge1xuICB0aW1lc3RhbXBzOiB7IFtrZXk6IHN0cmluZ106IHsgW2tleTogc3RyaW5nXTogbnVtYmVyIH0gfSA9IHt9O1xuICBwcml2YXRlIHJlZ2lzdGVyVGltaW5nOiAocDE6IHN0cmluZywgcDI6IHN0cmluZywgcDM/OiBudW1iZXIpID0+IGFueTtcbiAgcmVnaXN0ZXJTdGFydFRpbWluZzogKG5hbWU6IHN0cmluZywgdGltZXN0YW1wPzogbnVtYmVyKSA9PiBhbnk7XG4gIHJlZ2lzdGVyRW5kVGltaW5nOiAobmFtZTogc3RyaW5nLCB0aW1lc3RhbXA/OiBudW1iZXIpID0+IGFueTtcblxuICBjb25zdHJ1Y3RvcihwdWJsaWMgcmVhZG9ubHkgcGVyZm9ybWFuY2VJbnN0YW5jZTogUGVyZm9ybWFuY2UpIHtcbiAgICB0aGlzLnJlZ2lzdGVyVGltaW5nID0gbm9vcDtcblxuICAgIC8vIGhhY2sgdG8gZXhwb3J0IChub24tcHJvdG90eXBlKSBtZXRob2RzXG4gICAgdGhpc1tcInJlZ2lzdGVyU3RhcnRUaW1pbmdcIl0gPSB0aGlzLnJlZ2lzdGVyU3RhcnRUaW1pbmcgPSBub29wO1xuICAgIHRoaXNbXCJyZWdpc3RlckVuZFRpbWluZ1wiXSA9IHRoaXMucmVnaXN0ZXJFbmRUaW1pbmcgPSBub29wO1xuICB9XG5cbiAgLyoqXG4gICAqIFJlZ2lzdGVycyBzdGFydCB0aW1pbmcgb2Ygc29tZSBldmVudCwgZXZlbiBpZiBwcm9maWxlIGlzIGRpc2FibGVkLlxuICAgKiBAcGFyYW0gbmFtZSBOYW1lIG9mIGV2ZW50XG4gICAqIEBwYXJhbSB0aW1lc3RhbXAgVXNlZCBhcyB0aGUgYWN0dWFsIHRpbWVzdGFtcCBvZiB0aGUgZXZlbnQgaWYgc3BlY2lmaWVkLFxuICAgKiAgICAgaW5zdGVhZCBvZiBcIm5vd1wiXG4gICAqL1xuICBmb3JjZVJlZ2lzdGVyU3RhcnRUaW1pbmcobmFtZTogc3RyaW5nLCB0aW1lc3RhbXA/OiBudW1iZXIpIHtcbiAgICByZWdpc3RlclRpbWluZy5jYWxsKHRoaXMsIG5hbWUsIFwic3RhcnRcIiwgdGltZXN0YW1wKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBSZWdpc3RlcnMgZW5kIHRpbWluZyBvZiBzb21lIGV2ZW50LCBldmVuIGlmIHByb2ZpbGUgaXMgZGlzYWJsZWQuXG4gICAqIEBwYXJhbSBuYW1lIE5hbWUgb2YgZXZlbnRcbiAgICogQHBhcmFtIHRpbWVzdGFtcCBVc2VkIGFzIHRoZSBhY3R1YWwgdGltZXN0YW1wIG9mIHRoZSBldmVudCBpZiBzcGVjaWZpZWQsXG4gICAqICAgICBpbnN0ZWFkIG9mIFwibm93XCJcbiAgICovXG4gIGZvcmNlUmVnaXN0ZXJFbmRUaW1pbmcobmFtZTogc3RyaW5nLCB0aW1lc3RhbXA/OiBudW1iZXIpIHtcbiAgICByZWdpc3RlclRpbWluZy5jYWxsKHRoaXMsIG5hbWUsIFwiZW5kXCIsIHRpbWVzdGFtcCk7XG4gIH1cblxuICAvKipcbiAgICogTG9nIHJlZ2lzdGVyZWQgdGltaW5ncyAoc3RhcnQvZW5kL2R1cmF0aW9uKS5cbiAgICogQWxsIHZhbHVlcyBhcmUgcHJpbnRlZCBpbiBtcyB1bml0LlxuICAgKi9cbiAgcHJpbnRUaW1pbmdzKCkge1xuICAgIGNvbnN0IHRpbWVzdGFtcHMgPSB0aGlzLnRpbWVzdGFtcHM7XG4gICAgbGV0IHN0ID0gXCJcIjtcbiAgICBPYmplY3Qua2V5cyh0aW1lc3RhbXBzKS5mb3JFYWNoKChuYW1lKSA9PiB7XG4gICAgICBjb25zdCBzdGFtcHMgPSB0aW1lc3RhbXBzW25hbWVdO1xuICAgICAgY29uc3QgbCA9IHN0YW1wcy5sZW5ndGg7XG4gICAgICBmb3IgKGxldCBpID0gMDsgaSA8IGw7IGkrKykge1xuICAgICAgICBjb25zdCB0ID0gc3RhbXBzW2ldO1xuICAgICAgICBzdCArPSBuYW1lO1xuICAgICAgICBpZiAobCA+IDEpIHtcbiAgICAgICAgICBzdCArPSBgKCR7aX0pYDtcbiAgICAgICAgfVxuICAgICAgICBzdCArPSBgID0+IHN0YXJ0OiAke3RbXCJzdGFydFwiXX0sIGVuZDogJHt0W1wiZW5kXCJdfSwgZHVyYXRpb246ICR7XG4gICAgICAgICAgdFtcImVuZFwiXSAtIHRbXCJzdGFydFwiXVxuICAgICAgICB9XFxuYDtcbiAgICAgIH1cbiAgICB9KTtcbiAgICBMb2dnaW5nLmxvZ2dlci5pbmZvKHN0KTtcbiAgfVxuXG4gIC8qKlxuICAgKiBEaXNhYmxlIHByb2ZpbGluZy5cbiAgICovXG4gIGRpc2FibGUoKSB7XG4gICAgdGhpcy5yZWdpc3RlclRpbWluZyA9IG5vb3A7XG5cbiAgICAvLyBoYWNrIHRvIGV4cG9ydCAobm9uLXByb3RvdHlwZSkgbWV0aG9kc1xuICAgIHRoaXNbXCJyZWdpc3RlclN0YXJ0VGltaW5nXCJdID0gdGhpcy5yZWdpc3RlclN0YXJ0VGltaW5nID0gbm9vcDtcbiAgICB0aGlzW1wicmVnaXN0ZXJFbmRUaW1pbmdcIl0gPSB0aGlzLnJlZ2lzdGVyRW5kVGltaW5nID0gbm9vcDtcbiAgfVxuXG4gIC8qKlxuICAgKiBFbmFibGUgcHJvZmlsaW5nLlxuICAgKi9cbiAgZW5hYmxlKCkge1xuICAgIHRoaXMucmVnaXN0ZXJUaW1pbmcgPSByZWdpc3RlclRpbWluZztcblxuICAgIC8vIGhhY2sgdG8gZXhwb3J0IChub24tcHJvdG90eXBlKSBtZXRob2RzXG4gICAgdGhpc1tcbiAgICAgIFwicmVnaXN0ZXJTdGFydFRpbWluZ1wiXG4gICAgXSA9IHRoaXMucmVnaXN0ZXJTdGFydFRpbWluZyA9IHJlZ2lzdGVyU3RhcnRUaW1pbmc7XG4gICAgdGhpc1tcInJlZ2lzdGVyRW5kVGltaW5nXCJdID0gdGhpcy5yZWdpc3RlckVuZFRpbWluZyA9IHJlZ2lzdGVyRW5kVGltaW5nO1xuICB9XG5cbiAgLyoqXG4gICAqIFJldHVybnMgaWYgcHJvZmlsaW5nIGlzIGVuYWJsZWQgb3Igbm90LlxuICAgKi9cbiAgaXNFbmFibGVkKCk6IGJvb2xlYW4ge1xuICAgIHJldHVybiB0aGlzLnJlZ2lzdGVyU3RhcnRUaW1pbmcgPT09IHJlZ2lzdGVyU3RhcnRUaW1pbmc7XG4gIH1cbn1cblxuZnVuY3Rpb24gbm9vcCgpOiB2b2lkIHt9XG5cbi8qKlxuICogUmVnaXN0ZXJzIHN0YXJ0L2VuZCB0aW1pbmcgb2Ygc29tZSBldmVudC5cbiAqIEB0aGlzIHtQcm9maWxlLlByb2ZpbGVyfVxuICogQHBhcmFtIG5hbWUgTmFtZSBvZiBldmVudFxuICogQHBhcmFtIHN0YXJ0RW5kIEVpdGhlciBvZiBcInN0YXJ0XCIgb3IgXCJlbmRcIlxuICogQHBhcmFtIHRpbWVzdGFtcCBVc2VkIGFzIHRoZSBhY3R1YWwgdGltZXN0YW1wIG9mIHRoZSBldmVudCBpZiBzcGVjaWZpZWQsXG4gKiAgICAgaW5zdGVhZCBvZiBcIm5vd1wiXG4gKi9cbmZ1bmN0aW9uIHJlZ2lzdGVyVGltaW5nKFxuICBuYW1lOiBzdHJpbmcsXG4gIHN0YXJ0RW5kOiBzdHJpbmcsXG4gIHRpbWVzdGFtcD86IG51bWJlcixcbik6IHZvaWQge1xuICBpZiAoIXRpbWVzdGFtcCkge1xuICAgIHRpbWVzdGFtcCA9IHRoaXMucGVyZm9ybWFuY2VJbnN0YW5jZS5ub3coKTtcbiAgfVxuICBsZXQgdGltZXN0YW1wcyA9IHRoaXMudGltZXN0YW1wc1tuYW1lXTtcbiAgaWYgKCF0aW1lc3RhbXBzKSB7XG4gICAgdGltZXN0YW1wcyA9IHRoaXMudGltZXN0YW1wc1tuYW1lXSA9IFtdO1xuICB9XG4gIGxldCB0O1xuICBjb25zdCBsID0gdGltZXN0YW1wcy5sZW5ndGg7XG4gIGZvciAobGV0IGkgPSBsIC0gMTsgaSA+PSAwOyBpLS0pIHtcbiAgICB0ID0gdGltZXN0YW1wc1tpXTtcbiAgICBpZiAodCAmJiAhdFtzdGFydEVuZF0pIHtcbiAgICAgIGJyZWFrO1xuICAgIH1cbiAgICB0ID0gbnVsbDtcbiAgfVxuICBpZiAoIXQpIHtcbiAgICB0ID0ge307XG4gICAgdGltZXN0YW1wcy5wdXNoKHQpO1xuICB9XG4gIHRbc3RhcnRFbmRdID0gdGltZXN0YW1wO1xufVxuXG4vKipcbiAqIFJlZ2lzdGVycyBzdGFydCB0aW1pbmcgb2Ygc29tZSBldmVudC5cbiAqIEB0aGlzIHtQcm9maWxlLlByb2ZpbGVyfVxuICogQHBhcmFtIG5hbWUgTmFtZSBvZiBldmVudFxuICogQHBhcmFtIHRpbWVzdGFtcCBVc2VkIGFzIHRoZSBhY3R1YWwgdGltZXN0YW1wIG9mIHRoZSBldmVudCBpZiBzcGVjaWZpZWQsXG4gKiAgICAgaW5zdGVhZCBvZiBcIm5vd1wiXG4gKi9cbmZ1bmN0aW9uIHJlZ2lzdGVyU3RhcnRUaW1pbmcobmFtZTogc3RyaW5nLCB0aW1lc3RhbXA/OiBudW1iZXIpOiB2b2lkIHtcbiAgdGhpcy5yZWdpc3RlclRpbWluZyhuYW1lLCBcInN0YXJ0XCIsIHRpbWVzdGFtcCk7XG59XG5cbi8qKlxuICogUmVnaXN0ZXJzIGVuZCB0aW1pbmcgb2Ygc29tZSBldmVudC5cbiAqIEB0aGlzIHtQcm9maWxlLlByb2ZpbGVyfVxuICogQHBhcmFtIG5hbWUgTmFtZSBvZiBldmVudFxuICogQHBhcmFtIHRpbWVzdGFtcCBVc2VkIGFzIHRoZSBhY3R1YWwgdGltZXN0YW1wIG9mIHRoZSBldmVudCBpZiBzcGVjaWZpZWQsXG4gKiAgICAgaW5zdGVhZCBvZiBcIm5vd1wiXG4gKi9cbmZ1bmN0aW9uIHJlZ2lzdGVyRW5kVGltaW5nKG5hbWU6IHN0cmluZywgdGltZXN0YW1wPzogbnVtYmVyKTogdm9pZCB7XG4gIHRoaXMucmVnaXN0ZXJUaW1pbmcobmFtZSwgXCJlbmRcIiwgdGltZXN0YW1wKTtcbn1cbmNvbnN0IGZhbGxiYWNrUGVyZm9ybWFuY2VJbnN0YW5jZSA9IHsgbm93OiBEYXRlLm5vdyB9IGFzIFBlcmZvcm1hbmNlO1xuY29uc3QgcGVyZm9ybWFuY2VJbnN0YW5jZSA9IHdpbmRvdyAmJiB3aW5kb3cucGVyZm9ybWFuY2U7XG5leHBvcnQgY29uc3QgcHJvZmlsZXIgPSBuZXcgUHJvZmlsZXIoXG4gIHBlcmZvcm1hbmNlSW5zdGFuY2UgfHwgZmFsbGJhY2tQZXJmb3JtYW5jZUluc3RhbmNlLFxuKTtcbnByb2ZpbGVyLmZvcmNlUmVnaXN0ZXJTdGFydFRpbWluZyhcImxvYWRfdml2bGlvc3R5bGVcIik7XG5cbi8qKlxuICogUHViaWxjIG1lbWJlcnMgb2YgdGhlIGJ1bmRsZWQgbGlicmFyeS5cbiAqL1xuZXhwb3J0IGNvbnN0IHByb2ZpbGUgPSB7XG4gIHByb2ZpbGVyOiB7XG4gICAgcmVnaXN0ZXJTdGFydFRpbWluZzogcHJvZmlsZXIucmVnaXN0ZXJTdGFydFRpbWluZyxcbiAgICByZWdpc3RlckVuZFRpbWluZzogcHJvZmlsZXIucmVnaXN0ZXJFbmRUaW1pbmcsXG4gICAgcHJpbnRUaW1pbmdzOiBwcm9maWxlci5wcmludFRpbWluZ3MsXG4gICAgZGlzYWJsZTogcHJvZmlsZXIuZGlzYWJsZSxcbiAgICBlbmFibGU6IHByb2ZpbGVyLmVuYWJsZSxcbiAgfSxcbn07XG4iLCIvKipcbiAqIENvcHlyaWdodCAyMDEzIEdvb2dsZSwgSW5jLlxuICogQ29weXJpZ2h0IDIwMTUgVHJpbS1tYXJrcyBJbmMuXG4gKiBDb3B5cmlnaHQgMjAxOSBWaXZsaW9zdHlsZSBGb3VuZGF0aW9uXG4gKlxuICogVml2bGlvc3R5bGUuanMgaXMgZnJlZSBzb2Z0d2FyZTogeW91IGNhbiByZWRpc3RyaWJ1dGUgaXQgYW5kL29yIG1vZGlmeVxuICogaXQgdW5kZXIgdGhlIHRlcm1zIG9mIHRoZSBHTlUgQWZmZXJvIEdlbmVyYWwgUHVibGljIExpY2Vuc2UgYXMgcHVibGlzaGVkIGJ5XG4gKiB0aGUgRnJlZSBTb2Z0d2FyZSBGb3VuZGF0aW9uLCBlaXRoZXIgdmVyc2lvbiAzIG9mIHRoZSBMaWNlbnNlLCBvclxuICogKGF0IHlvdXIgb3B0aW9uKSBhbnkgbGF0ZXIgdmVyc2lvbi5cbiAqXG4gKiBWaXZsaW9zdHlsZS5qcyBpcyBkaXN0cmlidXRlZCBpbiB0aGUgaG9wZSB0aGF0IGl0IHdpbGwgYmUgdXNlZnVsLFxuICogYnV0IFdJVEhPVVQgQU5ZIFdBUlJBTlRZOyB3aXRob3V0IGV2ZW4gdGhlIGltcGxpZWQgd2FycmFudHkgb2ZcbiAqIE1FUkNIQU5UQUJJTElUWSBvciBGSVRORVNTIEZPUiBBIFBBUlRJQ1VMQVIgUFVSUE9TRS4gIFNlZSB0aGVcbiAqIEdOVSBBZmZlcm8gR2VuZXJhbCBQdWJsaWMgTGljZW5zZSBmb3IgbW9yZSBkZXRhaWxzLlxuICpcbiAqIFlvdSBzaG91bGQgaGF2ZSByZWNlaXZlZCBhIGNvcHkgb2YgdGhlIEdOVSBBZmZlcm8gR2VuZXJhbCBQdWJsaWMgTGljZW5zZVxuICogYWxvbmcgd2l0aCBWaXZsaW9zdHlsZS5qcy4gIElmIG5vdCwgc2VlIDxodHRwOi8vd3d3LmdudS5vcmcvbGljZW5zZXMvPi5cbiAqXG4gKiBAZmlsZW92ZXJ2aWV3IEJhc2UgLSBDb21tb24gdXRpbGl0aWVzLlxuICovXG5pbXBvcnQgKiBhcyBMb2dnaW5nIGZyb20gXCIuL2xvZ2dpbmdcIjtcbmltcG9ydCAqIGFzIEFzc2VydHMgZnJvbSBcIi4vYXNzZXJ0c1wiO1xuXG4vKipcbiAqIFJlZ0V4cCBwYXR0ZXJuIGZvciA6OmZpcnN0LWxldHRlciBwc2V1ZG8gZWxlbWVudDpcbiAqIGh0dHBzOi8vZHJhZnRzLmNzc3dnLm9yZy9jc3MtcHNldWRvLTQvI2ZpcnN0LWxldHRlci1wc2V1ZG9cbiAqL1xuZXhwb3J0IGNvbnN0IGZpcnN0TGV0dGVyUGF0dGVybiA9IC9eW1xccHtac31cXHB7UH1cXHB7TW59XSpbXFxwe0x9XFxwe059XVxccHtNbn0qKD86XFxwe1pzfSpcXHB7UH1cXHB7TW59KikqL3U7XG4vKipcbiAqIEluZGljYXRlcyB0aGUgb2Zmc2V0IHBvc2l0aW9uIG9mIGFuIGVsZW1lbnQgaW4gYSBkb2N1bWVudFxuICovXG5leHBvcnQgY29uc3QgRUxFTUVOVF9PRkZTRVRfQVRUUiA9IFwiZGF0YS1hZGFwdC1lbG9mZlwiO1xuXG5leHBvcnQgbGV0IGVtcHR5T2JqID0ge307XG5cbmV4cG9ydCB0eXBlIEpTT04gPSBhbnk7XG5cbmV4cG9ydCBmdW5jdGlvbiBqc29uVG9TdHJpbmcoanNvbjogSlNPTik6IHN0cmluZyB7XG4gIHJldHVybiBKU09OLnN0cmluZ2lmeShqc29uKTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHN0cmluZ1RvSlNPTihzdHI6IHN0cmluZyk6IEpTT04ge1xuICByZXR1cm4gSlNPTi5wYXJzZShzdHIpO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gc3RyaXBGcmFnbWVudCh1cmw6IHN0cmluZyk6IHN0cmluZyB7XG4gIGNvbnN0IHIgPSB1cmwubWF0Y2goL14oW14jXSopLyk7XG4gIGlmIChyKSB7XG4gICAgcmV0dXJuIHJbMV07XG4gIH1cbiAgcmV0dXJuIHVybDtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHN0cmlwRnJhZ21lbnRBbmRRdWVyeSh1cmw6IHN0cmluZyk6IHN0cmluZyB7XG4gIGNvbnN0IHIgPSB1cmwubWF0Y2goL14oW14jP10qKS8pO1xuICBpZiAocikge1xuICAgIHJldHVybiByWzFdO1xuICB9XG4gIHJldHVybiB1cmw7XG59XG5cbi8qKlxuICogQmFzZSBVUkwgcmVsYXRpdmUgdG8gd2hpY2ggVVJMcyBvZiByZXNvdXJjZXMgYXJlIHJlc29sdmVkLlxuICovXG5leHBvcnQgbGV0IGJhc2VVUkwgPSB3aW5kb3cubG9jYXRpb24uaHJlZjtcbmV4cG9ydCBmdW5jdGlvbiBzZXRCYXNlVVJMKHZhbHVlOiBzdHJpbmcpOiB2b2lkIHtcbiAgYmFzZVVSTCA9IHZhbHVlO1xufVxuXG4vKipcbiAqIEJhc2UgVVJMIHJlbGF0aXZlIHRvIHdoaWNoIFVSTHMgb2YgcmVzb3VyY2VzIHN1Y2ggYXMgdmFsaWRhdGlvbi50eHQgYW5kXG4gKiB1c2VyLWFnZW50LmNzcyBhcmUgcmVzb2x2ZWQuXG4gKi9cbmV4cG9ydCBsZXQgcmVzb3VyY2VCYXNlVVJMID0gd2luZG93LmxvY2F0aW9uLmhyZWY7XG5leHBvcnQgZnVuY3Rpb24gc2V0UmVzb3VyY2VCYXNlVVJMKHZhbHVlOiBzdHJpbmcpOiB2b2lkIHtcbiAgcmVzb3VyY2VCYXNlVVJMID0gdmFsdWU7XG59XG5cbi8qKlxuICogQHBhcmFtIHJlbFVSTCByZWxhdGl2ZSBVUkxcbiAqIEBwYXJhbSBiYXNlVVJMIGJhc2UgKGFic29sdXRlKSBVUkxcbiAqIEByZXR1cm4gcmVzb2x2ZWQgKGFic29sdXRlKSBVUkxcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHJlc29sdmVVUkwocmVsVVJMOiBzdHJpbmcsIGJhc2VVUkw6IHN0cmluZyk6IHN0cmluZyB7XG4gIGlmICgvXmRhdGE6L2kudGVzdChiYXNlVVJMKSkge1xuICAgIHJldHVybiByZWxVUkwgfHwgYmFzZVVSTDtcbiAgfVxuICBpZiAoIWJhc2VVUkwgfHwgcmVsVVJMLm1hdGNoKC9eXFx3ezIsfTovKSkge1xuICAgIGlmIChyZWxVUkwudG9Mb3dlckNhc2UoKS5tYXRjaChcIl5qYXZhc2NyaXB0OlwiKSkge1xuICAgICAgcmV0dXJuIFwiI1wiO1xuICAgIH1cbiAgICBpZiAocmVsVVJMLm1hdGNoKC9eXFx3ezIsfTpcXC9cXC9bXlxcL10rJC8pKSB7XG4gICAgICByZWxVUkwgPSBgJHtyZWxVUkx9L2A7XG4gICAgfVxuICAgIHJldHVybiByZWxVUkw7XG4gIH1cbiAgaWYgKGJhc2VVUkwubWF0Y2goL15cXHd7Mix9OlxcL1xcL1teXFwvXSskLykpIHtcbiAgICBiYXNlVVJMID0gYCR7YmFzZVVSTH0vYDtcbiAgfVxuICBsZXQgcjogc3RyaW5nW107XG4gIGlmIChyZWxVUkwubWF0Y2goL15cXC9cXC8vKSkge1xuICAgIHIgPSBiYXNlVVJMLm1hdGNoKC9eKFxcd3syLH06KVxcL1xcLy8pO1xuICAgIGlmIChyKSB7XG4gICAgICByZXR1cm4gclsxXSArIHJlbFVSTDtcbiAgICB9XG4gICAgcmV0dXJuIHJlbFVSTDtcbiAgfVxuICBpZiAocmVsVVJMLm1hdGNoKC9eXFwvLykpIHtcbiAgICByID0gYmFzZVVSTC5tYXRjaCgvXihcXHd7Mix9OlxcL1xcL1teXFwvXSspXFwvLyk7XG4gICAgaWYgKHIpIHtcbiAgICAgIHJldHVybiByWzFdICsgcmVsVVJMO1xuICAgIH1cbiAgICByZXR1cm4gcmVsVVJMO1xuICB9XG4gIGlmIChyZWxVUkwubWF0Y2goL15cXC4oXFwvfCQpLykpIHtcbiAgICByZWxVUkwgPSByZWxVUkwuc3Vic3RyKDIpOyAvLyAnLi9mb28nID0+ICdmb28nXG4gIH1cbiAgYmFzZVVSTCA9IHN0cmlwRnJhZ21lbnRBbmRRdWVyeShiYXNlVVJMKTtcbiAgaWYgKHJlbFVSTC5tYXRjaCgvXiMvKSkge1xuICAgIHJldHVybiBiYXNlVVJMICsgcmVsVVJMO1xuICB9XG4gIGxldCBpID0gYmFzZVVSTC5sYXN0SW5kZXhPZihcIi9cIik7XG4gIGlmIChpIDwgMCkge1xuICAgIHJldHVybiByZWxVUkw7XG4gIH1cbiAgaWYgKGkgPCBiYXNlVVJMLmxlbmd0aCAtIDEpIHtcbiAgICBjb25zdCBqID0gYmFzZVVSTC5sYXN0SW5kZXhPZihcIi5cIik7XG4gICAgaWYgKGogPCBpKSB7XG4gICAgICAvLyBBc3N1bWUgdGhlIGxhc3QgcGFydCB3aXRob3V0ICcuJyB0byBiZSBhIGRpcmVjdG9yeSBuYW1lLlxuICAgICAgaWYgKHJlbFVSTCA9PSBcIlwiKSB7XG4gICAgICAgIHJldHVybiBiYXNlVVJMO1xuICAgICAgfVxuICAgICAgYmFzZVVSTCArPSBcIi9cIjtcbiAgICAgIGkgPSBiYXNlVVJMLmxlbmd0aCAtIDE7XG4gICAgfVxuICB9XG4gIGxldCB1cmwgPSBiYXNlVVJMLnN1YnN0cigwLCBpICsgMSkgKyByZWxVUkw7XG4gIGxldCB1cmxPcHRpb24gPSBcIlwiO1xuICByID0gdXJsLm1hdGNoKC9eKFtePyNdKikoWz8jXS4qKSQvKTtcbiAgaWYgKHIpIHtcbiAgICB1cmwgPSByWzFdO1xuICAgIHVybE9wdGlvbiA9IHJbMl07XG4gIH1cblxuICB3aGlsZSAodHJ1ZSkge1xuICAgIGkgPSB1cmwuaW5kZXhPZihcIi8uLi9cIik7XG4gICAgaWYgKGkgPD0gMCkge1xuICAgICAgYnJlYWs7XG4gICAgfVxuICAgIGNvbnN0IGogPSB1cmwubGFzdEluZGV4T2YoXCIvXCIsIGkgLSAxKTtcbiAgICBpZiAoaiA8PSAwKSB7XG4gICAgICBicmVhaztcbiAgICB9XG4gICAgdXJsID0gdXJsLnN1YnN0cigwLCBqKSArIHVybC5zdWJzdHIoaSArIDMpO1xuICB9XG4gIHJldHVybiB1cmwucmVwbGFjZSgvXFwvKFxcLlxcLykrL2csIFwiL1wiKSArIHVybE9wdGlvbjtcbn1cblxuLyoqXG4gKiBAcmV0dXJuIGNvbnZlcnRlZCBVUkxcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGNvbnZlcnRTcGVjaWFsVVJMKHVybDogc3RyaW5nKTogc3RyaW5nIHtcbiAgbGV0IHI6IFJlZ0V4cE1hdGNoQXJyYXk7XG4gIGlmIChcbiAgICAociA9IC9eKGh0dHBzPzopXFwvXFwvZ2l0aHViXFwuY29tXFwvKFteL10rXFwvW14vXSspXFwvKGJsb2JcXC98dHJlZVxcL3xyYXdcXC8pPyguKikkLy5leGVjKFxuICAgICAgdXJsLFxuICAgICkpXG4gICkge1xuICAgIC8vIENvbnZlcnQgR2l0SHViIFVSTCB0byBHaXRIdWIgcmF3IFVSTFxuICAgIHVybCA9IGAke3JbMV19Ly9yYXcuZ2l0aHVidXNlcmNvbnRlbnQuY29tLyR7clsyXX0vJHtyWzNdID8gXCJcIiA6IFwibWFzdGVyL1wifSR7XG4gICAgICByWzRdXG4gICAgfWA7XG4gIH0gZWxzZSBpZiAoXG4gICAgKHIgPSAvXihodHRwcz86KVxcL1xcL3d3d1xcLmFvem9yYVxcLmdyXFwuanBcXC8oY2FyZHNcXC9bXi9dK1xcL2ZpbGVzXFwvW14vLl0rXFwuaHRtbCkkLy5leGVjKFxuICAgICAgdXJsLFxuICAgICkpXG4gICkge1xuICAgIC8vIENvbnZlcnQgQW96b3JhYnVua28gKFgpSFRNTCBVUkwgdG8gR2l0SHViIHJhdyBVUkxcbiAgICB1cmwgPSBgJHtyWzFdfS8vcmF3LmdpdGh1YnVzZXJjb250ZW50LmNvbS9hb3pvcmFidW5rby9hb3pvcmFidW5rby9tYXN0ZXIvJHtyWzJdfWA7XG4gIH0gZWxzZSBpZiAoXG4gICAgKHIgPSAvXihodHRwcz86KVxcL1xcL2dpc3RcXC5naXRodWJcXC5jb21cXC8oW14vXStcXC9cXHcrKShcXC98JCkocmF3KFxcL3wkKSk/KC4qKSQvLmV4ZWMoXG4gICAgICB1cmwsXG4gICAgKSlcbiAgKSB7XG4gICAgLy8gQ29udmVydCBHaXN0IFVSTCB0byBHaXN0IHJhdyBVUkxcbiAgICB1cmwgPSBgJHtyWzFdfS8vZ2lzdC5naXRodWJ1c2VyY29udGVudC5jb20vJHtyWzJdfS9yYXcvJHtyWzZdfWA7XG4gIH0gZWxzZSBpZiAoXG4gICAgKHIgPSAvXihodHRwcz86KVxcL1xcLyg/OlteLy5dK1xcLik/anNiaW5cXC5jb21cXC8oPyEoPzpibG9nfGhlbHApXFxiKShcXHcrKSgoXFwvXFxkKyk/KS4qJC8uZXhlYyhcbiAgICAgIHVybCxcbiAgICApKVxuICApIHtcbiAgICAvLyBDb252ZXJ0IEpTIEJpbiBVUkwgdG8gSlMgQmluIG91dHB1dCBVUkxcbiAgICB1cmwgPSBgJHtyWzFdfS8vb3V0cHV0LmpzYmluLmNvbS8ke3JbMl19JHtyWzNdfS9gO1xuICB9XG4gIHJldHVybiB1cmw7XG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgRG9jdW1lbnRVUkxUcmFuc2Zvcm1lciB7XG4gIHRyYW5zZm9ybUZyYWdtZW50KGZyYWdtZW50OiBzdHJpbmcsIGJhc2VVUkw6IHN0cmluZyk6IHN0cmluZztcblxuICB0cmFuc2Zvcm1VUkwodXJsOiBzdHJpbmcsIGJhc2VVUkw6IHN0cmluZyk6IHN0cmluZztcblxuICByZXN0b3JlVVJMKGVuY29kZWQ6IHN0cmluZyk6IHN0cmluZ1tdO1xufVxuXG4vKipcbiAqIFZhcmlvdXMgbmFtZXNwYWNlcy5cbiAqIEBlbnVtIHtzdHJpbmd9XG4gKi9cbmV4cG9ydCBlbnVtIE5TIHtcbiAgZXB1YiA9IFwiaHR0cDovL3d3dy5pZHBmLm9yZy8yMDA3L29wc1wiLFxuICBFViA9IFwiaHR0cDovL3d3dy53My5vcmcvMjAwMS94bWwtZXZlbnRzXCIsXG4gIE1BVEhNTCA9IFwiaHR0cDovL3d3dy53My5vcmcvMTk5OC9NYXRoL01hdGhNTFwiLFxuICBYTUwgPSBcImh0dHA6Ly93d3cudzMub3JnL1hNTC8xOTk4L25hbWVzcGFjZVwiLFxuICBYSFRNTCA9IFwiaHR0cDovL3d3dy53My5vcmcvMTk5OS94aHRtbFwiLFxuICBYTElOSyA9IFwiaHR0cDovL3d3dy53My5vcmcvMTk5OS94bGlua1wiLFxuICBTSEFET1cgPSBcImh0dHA6Ly93d3cucHlyb3h5LmNvbS9ucy9zaGFkb3dcIixcbiAgU1ZHID0gXCJodHRwOi8vd3d3LnczLm9yZy8yMDAwL3N2Z1wiLFxuICBEQyA9IFwiaHR0cDovL3B1cmwub3JnL2RjL2VsZW1lbnRzLzEuMS9cIixcbiAgTkNYID0gXCJodHRwOi8vd3d3LmRhaXN5Lm9yZy96Mzk4Ni8yMDA1L25jeC9cIixcbn1cblxuLyoqXG4gKiBAcGFyYW0gbmFtZSBwYXJhbWV0ZXIgbmFtZVxuICogQHBhcmFtIG9wdF91cmwgVVJMOyB3aW5kb3cubG9jYXRpb24uaHJlZiBpcyB1c2VkIGlmIG5vdCBwcm92aWRlZFxuICogQHJldHVybiBwYXJhbWV0ZXIgdmFsdWVcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGdldFVSTFBhcmFtKG5hbWU6IHN0cmluZywgb3B0X3VybD86IHN0cmluZyk6IHN0cmluZyB8IG51bGwge1xuICBjb25zdCByZyA9IG5ldyBSZWdFeHAoYCMoLiomKT8ke2VzY2FwZVJlZ0V4cChuYW1lKX09KFteIyZdKilgKTtcbiAgY29uc3QgdXJsID0gb3B0X3VybCB8fCB3aW5kb3cubG9jYXRpb24uaHJlZjtcbiAgY29uc3QgciA9IHVybC5tYXRjaChyZyk7XG4gIGlmIChyKSB7XG4gICAgcmV0dXJuIHJbMl07XG4gIH1cbiAgcmV0dXJuIG51bGw7XG59XG5cbi8qKlxuICogQHBhcmFtIG5hbWUgcGFyYW1ldGVyIG5hbWVcbiAqIEBwYXJhbSB2YWx1ZSBwYXJhbWV0ZXIgdmFsdWVcbiAqIEByZXR1cm4gbmV3IHVybFxuICovXG5leHBvcnQgZnVuY3Rpb24gc2V0VVJMUGFyYW0odXJsOiBzdHJpbmcsIG5hbWU6IHN0cmluZywgdmFsdWU6IHN0cmluZyk6IHN0cmluZyB7XG4gIGNvbnN0IHJnID0gbmV3IFJlZ0V4cChgIyguKiYpPyR7ZXNjYXBlUmVnRXhwKG5hbWUpfT0oW14jJl0qKWApO1xuICBjb25zdCByID0gdXJsLm1hdGNoKHJnKTtcbiAgaWYgKHIpIHtcbiAgICBjb25zdCBsZW5ndGggPSByWzJdLmxlbmd0aDtcbiAgICBjb25zdCBpbmRleCA9IHIuaW5kZXggKyByWzBdLmxlbmd0aCAtIGxlbmd0aDtcbiAgICByZXR1cm4gdXJsLnN1YnN0cigwLCBpbmRleCkgKyB2YWx1ZSArIHVybC5zdWJzdHIoaW5kZXggKyBsZW5ndGgpO1xuICB9XG4gIGlmICghdXJsLm1hdGNoKC8jLykpIHtcbiAgICByZXR1cm4gYCR7dXJsfSMke25hbWV9PSR7dmFsdWV9YDtcbiAgfSBlbHNlIHtcbiAgICByZXR1cm4gYCR7dXJsfSYke25hbWV9PSR7dmFsdWV9YDtcbiAgfVxufVxuXG4vKipcbiAqIEByZXR1cm4gP3N0cmluZ1xuICovXG5leHBvcnQgZnVuY3Rpb24gYXNTdHJpbmcodjogYW55KTogYW55IHtcbiAgaWYgKHYgPT0gbnVsbCkge1xuICAgIHJldHVybiB2O1xuICB9XG4gIHJldHVybiB2LnRvU3RyaW5nKCk7XG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgQ29tcGFyYWJsZSB7XG4gIC8qKlxuICAgKiBAcmV0dXJuIC0xIHdoZW4gdGhpcyBsZXNzIHRoZW4gb3RoZXIsIDAgd2hlbiB0aGlzIGVxdWFscyBvdGhlclxuICAgKi9cbiAgY29tcGFyZShvdGhlcjogQ29tcGFyYWJsZSk6IG51bWJlcjtcbn1cblxuLyoqXG4gKiBBIHByaW9yaXR5IHF1ZXVlLlxuICovXG5leHBvcnQgY2xhc3MgUHJpb3JpdHlRdWV1ZSB7XG4gIHF1ZXVlOiBDb21wYXJhYmxlW10gPSBbbnVsbF07XG5cbiAgbGVuZ3RoKCk6IG51bWJlciB7XG4gICAgcmV0dXJuIHRoaXMucXVldWUubGVuZ3RoIC0gMTtcbiAgfVxuXG4gIGFkZChpdGVtOiBDb21wYXJhYmxlKTogdm9pZCB7XG4gICAgbGV0IGluZGV4ID0gdGhpcy5xdWV1ZS5sZW5ndGg7XG4gICAgd2hpbGUgKGluZGV4ID4gMSkge1xuICAgICAgY29uc3QgcGFyZW50SW5kZXggPSBNYXRoLmZsb29yKGluZGV4IC8gMik7XG4gICAgICBjb25zdCBwYXJlbnQgPSB0aGlzLnF1ZXVlW3BhcmVudEluZGV4XTtcbiAgICAgIGlmIChwYXJlbnQuY29tcGFyZShpdGVtKSA+IDApIHtcbiAgICAgICAgdGhpcy5xdWV1ZVtpbmRleF0gPSBpdGVtO1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG4gICAgICB0aGlzLnF1ZXVlW2luZGV4XSA9IHBhcmVudDtcbiAgICAgIGluZGV4ID0gcGFyZW50SW5kZXg7XG4gICAgfVxuICAgIHRoaXMucXVldWVbMV0gPSBpdGVtO1xuICB9XG5cbiAgLyoqXG4gICAqIEByZXR1cm4gaGlnaGVzdCBwcmlvcml0eSBDb21wYXJhYmxlLlxuICAgKi9cbiAgcGVlaygpOiBDb21wYXJhYmxlIHtcbiAgICByZXR1cm4gdGhpcy5xdWV1ZVsxXTtcbiAgfVxuXG4gIC8qKlxuICAgKiBSZW1vdmUgdGhlIGhpZ2hlc3QtcHJpb3JpdHkgaXRlbSBmcm9tIHRoZSBxdWV1ZS5cbiAgICogQHJldHVybiByZW1vdmVkIGl0ZW0uXG4gICAqL1xuICByZW1vdmUoKTogQ29tcGFyYWJsZSB7XG4gICAgY29uc3QgcmVzdWx0ID0gdGhpcy5xdWV1ZVsxXSBhcyBDb21wYXJhYmxlO1xuICAgIGNvbnN0IGN1cnIgPSB0aGlzLnF1ZXVlLnBvcCgpIGFzIENvbXBhcmFibGU7XG4gICAgY29uc3Qgc2l6ZSA9IHRoaXMucXVldWUubGVuZ3RoO1xuICAgIGlmIChzaXplID4gMSkge1xuICAgICAgbGV0IGluZGV4ID0gMTtcbiAgICAgIHdoaWxlICh0cnVlKSB7XG4gICAgICAgIGxldCBjaGlsZEluZGV4ID0gaW5kZXggKiAyO1xuICAgICAgICBpZiAoY2hpbGRJbmRleCA+PSBzaXplKSB7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHRoaXMucXVldWVbY2hpbGRJbmRleF0uY29tcGFyZShjdXJyKSA+IDApIHtcbiAgICAgICAgICBpZiAoXG4gICAgICAgICAgICBjaGlsZEluZGV4ICsgMSA8IHNpemUgJiZcbiAgICAgICAgICAgIHRoaXMucXVldWVbY2hpbGRJbmRleCArIDFdLmNvbXBhcmUoXG4gICAgICAgICAgICAgIHRoaXMucXVldWVbY2hpbGRJbmRleF0gYXMgQ29tcGFyYWJsZSxcbiAgICAgICAgICAgICkgPiAwXG4gICAgICAgICAgKSB7XG4gICAgICAgICAgICBjaGlsZEluZGV4Kys7XG4gICAgICAgICAgfVxuICAgICAgICB9IGVsc2UgaWYgKFxuICAgICAgICAgIGNoaWxkSW5kZXggKyAxIDwgc2l6ZSAmJlxuICAgICAgICAgIHRoaXMucXVldWVbY2hpbGRJbmRleCArIDFdLmNvbXBhcmUoY3VycikgPiAwXG4gICAgICAgICkge1xuICAgICAgICAgIGNoaWxkSW5kZXgrKztcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuICAgICAgICB0aGlzLnF1ZXVlW2luZGV4XSA9IHRoaXMucXVldWVbY2hpbGRJbmRleF07XG4gICAgICAgIGluZGV4ID0gY2hpbGRJbmRleDtcbiAgICAgIH1cbiAgICAgIHRoaXMucXVldWVbaW5kZXhdID0gY3VycjtcbiAgICB9XG4gICAgcmV0dXJuIHJlc3VsdDtcbiAgfVxufVxuXG4vKipcbiAqIEBwYXJhbSBwcmVmaXggUHJlZml4IChjb250YWluaW5nIGxlYWRpbmcgYW5kIHRyYWlsaW5nIGh5cGhlbnMpXG4gKiBAcGFyYW0gY3NzUHJvcE5hbWUgQ1NTIHByb3BlcnR5IG5hbWVcbiAqIEByZXR1cm4gSmF2YVNjcmlwdCBwcm9wZXJ0eSBuYW1lXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBjc3NUb0pTUHJvcChwcmVmaXg6IHN0cmluZywgY3NzUHJvcE5hbWU6IHN0cmluZyk6IHN0cmluZyB7XG4gIGlmIChwcmVmaXgpIHtcbiAgICBjc3NQcm9wTmFtZSA9IGAtJHtjc3NQcm9wTmFtZX1gO1xuICAgIHByZWZpeCA9IHByZWZpeC5yZXBsYWNlKC8tL2csIFwiXCIpO1xuICAgIGlmIChwcmVmaXggPT09IFwibW96XCIpIHtcbiAgICAgIHByZWZpeCA9IFwiTW96XCI7XG4gICAgfVxuICB9XG4gIHJldHVybiAoXG4gICAgcHJlZml4ICtcbiAgICBjc3NQcm9wTmFtZS5yZXBsYWNlKC8tW2Etel0vZywgKHR4dCkgPT4gdHh0LnN1YnN0cigxKS50b1VwcGVyQ2FzZSgpKVxuICApO1xufVxuXG5leHBvcnQgY29uc3Qga25vd25QcmVmaXhlcyA9IFtcIlwiLCBcIi13ZWJraXQtXCIsIFwiLW1vei1cIiwgXCItbXMtXCIsIFwiLW8tXCIsIFwiLWVwdWItXCJdO1xuXG5leHBvcnQgY29uc3QgcHJvcE5hbWVNYXAgPSB7fTtcblxuZXhwb3J0IGZ1bmN0aW9uIGNoZWNrSWZQcm9wZXJ0eVN1cHBvcnRlZChcbiAgcHJlZml4OiBzdHJpbmcsXG4gIHByb3A6IHN0cmluZyxcbik6IGJvb2xlYW4ge1xuICAvLyBTcGVjaWFsIGNhc2VcbiAgaWYgKHByb3AgPT09IFwid3JpdGluZy1tb2RlXCIpIHtcbiAgICBjb25zdCBwcm9iZSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJzcGFuXCIpO1xuICAgIGlmIChwcmVmaXggPT09IFwiLW1zLVwiKSB7XG4gICAgICBwcm9iZS5zdHlsZS5zZXRQcm9wZXJ0eShwcmVmaXggKyBwcm9wLCBcInRiLXJsXCIpO1xuICAgICAgcmV0dXJuIHByb2JlLnN0eWxlW1wid3JpdGluZy1tb2RlXCJdID09PSBcInRiLXJsXCI7XG4gICAgfSBlbHNlIHtcbiAgICAgIHByb2JlLnN0eWxlLnNldFByb3BlcnR5KHByZWZpeCArIHByb3AsIFwidmVydGljYWwtcmxcIik7XG4gICAgICByZXR1cm4gcHJvYmUuc3R5bGVbcHJlZml4ICsgcHJvcF0gPT09IFwidmVydGljYWwtcmxcIjtcbiAgICB9XG4gIH0gZWxzZSB7XG4gICAgY29uc3Qgc3R5bGUgPSBkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQuc3R5bGU7XG4gICAgcmV0dXJuIHR5cGVvZiBzdHlsZVtjc3NUb0pTUHJvcChwcmVmaXgsIHByb3ApXSA9PT0gXCJzdHJpbmdcIjtcbiAgfVxufVxuXG5leHBvcnQgZnVuY3Rpb24gZ2V0UHJlZml4ZWRQcm9wZXJ0eU5hbWVzKHByb3A6IHN0cmluZyk6IHN0cmluZ1tdIHwgbnVsbCB7XG4gIGxldCBwcmVmaXhlZCA9IHByb3BOYW1lTWFwW3Byb3BdO1xuICBpZiAocHJlZml4ZWQgfHwgcHJlZml4ZWQgPT09IG51bGwpIHtcbiAgICAvLyBudWxsIG1lYW5zIHRoZSBicm93c2VyIGRvZXMgbm90IHN1cHBvcnQgdGhlIHByb3BlcnR5XG4gICAgcmV0dXJuIHByZWZpeGVkO1xuICB9XG4gIHN3aXRjaCAocHJvcCkge1xuICAgIGNhc2UgXCJ0ZXh0LWNvbWJpbmUtdXByaWdodFwiOlxuICAgICAgLy8gU3BlY2lhbCBjYXNlIGZvciBTYWZhcmlcbiAgICAgIGlmIChcbiAgICAgICAgY2hlY2tJZlByb3BlcnR5U3VwcG9ydGVkKFwiLXdlYmtpdC1cIiwgXCJ0ZXh0LWNvbWJpbmVcIikgJiZcbiAgICAgICAgIWNoZWNrSWZQcm9wZXJ0eVN1cHBvcnRlZChcIlwiLCBcInRleHQtY29tYmluZS11cHJpZ2h0XCIpXG4gICAgICApIHtcbiAgICAgICAgcHJvcE5hbWVNYXBbcHJvcF0gPSBbXCItd2Via2l0LXRleHQtY29tYmluZVwiXTtcbiAgICAgICAgcmV0dXJuIFtcIi13ZWJraXQtdGV4dC1jb21iaW5lXCJdO1xuICAgICAgfVxuICAgICAgYnJlYWs7XG4gICAgY2FzZSBcIndyaXRpbmctbW9kZVwiOlxuICAgICAgLy8gU3BlY2lhbCBjYXNlOiBwcmVmZXIgJy1tcy13cml0aW5nLW1vZGUnIHRvICd3cml0aW5nLW1vZGUnXG4gICAgICBpZiAoY2hlY2tJZlByb3BlcnR5U3VwcG9ydGVkKFwiLW1zLVwiLCBcIndyaXRpbmctbW9kZVwiKSkge1xuICAgICAgICBwcm9wTmFtZU1hcFtwcm9wXSA9IFtcIi1tcy13cml0aW5nLW1vZGVcIl07XG4gICAgICAgIHJldHVybiBbXCItbXMtd3JpdGluZy1tb2RlXCJdO1xuICAgICAgfVxuICAgICAgYnJlYWs7XG4gICAgY2FzZSBcImZpbHRlclwiOlxuICAgICAgLy8gU3BlY2lhbCBjYXNlOiBwcmVmZXIgJy13ZWJraXQtZmlsdGVyJyB0byAnZmlsdGVyJ1xuICAgICAgaWYgKGNoZWNrSWZQcm9wZXJ0eVN1cHBvcnRlZChcIi13ZWJraXQtXCIsIFwiZmlsdGVyXCIpKSB7XG4gICAgICAgIHByb3BOYW1lTWFwW3Byb3BdID0gW1wiLXdlYmtpdC1maWx0ZXJcIl07XG4gICAgICAgIHJldHVybiBbXCItd2Via2l0LWZpbHRlclwiXTtcbiAgICAgIH1cbiAgICAgIGJyZWFrO1xuICAgIGNhc2UgXCJjbGlwLXBhdGhcIjpcbiAgICAgIC8vIFNwZWNpYWwgY2FzZSBmb3IgY2hyb21lLlxuICAgICAgaWYgKGNoZWNrSWZQcm9wZXJ0eVN1cHBvcnRlZChcIi13ZWJraXQtXCIsIFwiY2xpcC1wYXRoXCIpKSB7XG4gICAgICAgIHJldHVybiAocHJvcE5hbWVNYXBbcHJvcF0gPSBbXCItd2Via2l0LWNsaXAtcGF0aFwiLCBcImNsaXAtcGF0aFwiXSk7XG4gICAgICB9XG4gICAgICBicmVhaztcbiAgICBjYXNlIFwibWFyZ2luLWlubGluZS1zdGFydFwiOlxuICAgICAgaWYgKGNoZWNrSWZQcm9wZXJ0eVN1cHBvcnRlZChcIi13ZWJraXQtXCIsIFwibWFyZ2luLXN0YXJ0XCIpKSB7XG4gICAgICAgIHByb3BOYW1lTWFwW3Byb3BdID0gW1wiLXdlYmtpdC1tYXJnaW4tc3RhcnRcIl07XG4gICAgICAgIHJldHVybiBbXCItd2Via2l0LW1hcmdpbi1zdGFydFwiXTtcbiAgICAgIH1cbiAgICAgIGJyZWFrO1xuICAgIGNhc2UgXCJtYXJnaW4taW5saW5lLWVuZFwiOlxuICAgICAgaWYgKGNoZWNrSWZQcm9wZXJ0eVN1cHBvcnRlZChcIi13ZWJraXQtXCIsIFwibWFyZ2luLWVuZFwiKSkge1xuICAgICAgICBwcm9wTmFtZU1hcFtwcm9wXSA9IFtcIi13ZWJraXQtbWFyZ2luLWVuZFwiXTtcbiAgICAgICAgcmV0dXJuIFtcIi13ZWJraXQtbWFyZ2luLWVuZFwiXTtcbiAgICAgIH1cbiAgICAgIGJyZWFrO1xuICAgIGNhc2UgXCJwYWRkaW5nLWlubGluZS1zdGFydFwiOlxuICAgICAgaWYgKGNoZWNrSWZQcm9wZXJ0eVN1cHBvcnRlZChcIi13ZWJraXQtXCIsIFwicGFkZGluZy1zdGFydFwiKSkge1xuICAgICAgICBwcm9wTmFtZU1hcFtwcm9wXSA9IFtcIi13ZWJraXQtcGFkZGluZy1zdGFydFwiXTtcbiAgICAgICAgcmV0dXJuIFtcIi13ZWJraXQtcGFkZGluZy1zdGFydFwiXTtcbiAgICAgIH1cbiAgICAgIGJyZWFrO1xuICAgIGNhc2UgXCJwYWRkaW5nLWlubGluZS1lbmRcIjpcbiAgICAgIGlmIChjaGVja0lmUHJvcGVydHlTdXBwb3J0ZWQoXCItd2Via2l0LVwiLCBcInBhZGRpbmctZW5kXCIpKSB7XG4gICAgICAgIHByb3BOYW1lTWFwW3Byb3BdID0gW1wiLXdlYmtpdC1wYWRkaW5nLWVuZFwiXTtcbiAgICAgICAgcmV0dXJuIFtcIi13ZWJraXQtcGFkZGluZy1lbmRcIl07XG4gICAgICB9XG4gICAgICBicmVhaztcbiAgfVxuICBmb3IgKGNvbnN0IHByZWZpeCBvZiBrbm93blByZWZpeGVzKSB7XG4gICAgaWYgKGNoZWNrSWZQcm9wZXJ0eVN1cHBvcnRlZChwcmVmaXgsIHByb3ApKSB7XG4gICAgICBwcmVmaXhlZCA9IHByZWZpeCArIHByb3A7XG4gICAgICBwcm9wTmFtZU1hcFtwcm9wXSA9IFtwcmVmaXhlZF07XG4gICAgICByZXR1cm4gW3ByZWZpeGVkXTtcbiAgICB9XG4gIH1cblxuICAvLyBOb3Qgc3VwcG9ydGVkIGJ5IHRoZSBicm93c2VyXG4gIExvZ2dpbmcubG9nZ2VyLndhcm4oXCJQcm9wZXJ0eSBub3Qgc3VwcG9ydGVkIGJ5IHRoZSBicm93c2VyOiBcIiwgcHJvcCk7XG4gIHByb3BOYW1lTWFwW3Byb3BdID0gbnVsbDtcbiAgcmV0dXJuIG51bGw7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBzZXRDU1NQcm9wZXJ0eShcbiAgZWxlbTogRWxlbWVudCxcbiAgcHJvcDogc3RyaW5nLFxuICB2YWx1ZTogc3RyaW5nLFxuKTogdm9pZCB7XG4gIHRyeSB7XG4gICAgY29uc3QgcHJlZml4ZWRQcm9wZXJ0eU5hbWVzID0gZ2V0UHJlZml4ZWRQcm9wZXJ0eU5hbWVzKHByb3ApO1xuICAgIGlmICghcHJlZml4ZWRQcm9wZXJ0eU5hbWVzKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIHByZWZpeGVkUHJvcGVydHlOYW1lcy5mb3JFYWNoKChwcmVmaXhlZCkgPT4ge1xuICAgICAgaWYgKHByZWZpeGVkID09PSBcIi1tcy13cml0aW5nLW1vZGVcIikge1xuICAgICAgICBzd2l0Y2ggKHZhbHVlKSB7XG4gICAgICAgICAgY2FzZSBcImhvcml6b250YWwtdGJcIjpcbiAgICAgICAgICAgIHZhbHVlID0gXCJsci10YlwiO1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgY2FzZSBcInZlcnRpY2FsLXJsXCI6XG4gICAgICAgICAgICB2YWx1ZSA9IFwidGItcmxcIjtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgIGNhc2UgXCJ2ZXJ0aWNhbC1sclwiOlxuICAgICAgICAgICAgdmFsdWUgPSBcInRiLWxyXCI7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIGlmIChwcmVmaXhlZCA9PT0gXCItd2Via2l0LXRleHQtY29tYmluZVwiKSB7XG4gICAgICAgIHN3aXRjaCAodmFsdWUpIHtcbiAgICAgICAgICBjYXNlIFwiYWxsXCI6XG4gICAgICAgICAgICB2YWx1ZSA9IFwiaG9yaXpvbnRhbFwiO1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIGlmIChlbGVtICYmIChlbGVtIGFzIEhUTUxFbGVtZW50KS5zdHlsZSkge1xuICAgICAgICAoZWxlbSBhcyBIVE1MRWxlbWVudCkuc3R5bGUuc2V0UHJvcGVydHkocHJlZml4ZWQsIHZhbHVlKTtcbiAgICAgIH1cbiAgICB9KTtcbiAgfSBjYXRjaCAoZXJyKSB7XG4gICAgTG9nZ2luZy5sb2dnZXIud2FybihlcnIpO1xuICB9XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBnZXRDU1NQcm9wZXJ0eShcbiAgZWxlbTogRWxlbWVudCxcbiAgcHJvcDogc3RyaW5nLFxuICBvcHRfdmFsdWU/OiBzdHJpbmcsXG4pOiBzdHJpbmcge1xuICB0cnkge1xuICAgIGNvbnN0IHByb3BlcnR5TmFtZXMgPSBwcm9wTmFtZU1hcFtwcm9wXTtcbiAgICByZXR1cm4gKGVsZW0gYXMgSFRNTEVsZW1lbnQpLnN0eWxlLmdldFByb3BlcnR5VmFsdWUoXG4gICAgICBwcm9wZXJ0eU5hbWVzID8gcHJvcGVydHlOYW1lc1swXSA6IHByb3AsXG4gICAgKTtcbiAgfSBjYXRjaCAoZXJyKSB7fVxuICByZXR1cm4gb3B0X3ZhbHVlIHx8IFwiXCI7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBnZXRMYW5nQXR0cmlidXRlKGVsZW1lbnQ6IEVsZW1lbnQpOiBzdHJpbmcge1xuICBsZXQgbGFuZyA9IGVsZW1lbnQuZ2V0QXR0cmlidXRlTlMoTlMuWE1MLCBcImxhbmdcIik7XG4gIGlmICghbGFuZyAmJiBlbGVtZW50Lm5hbWVzcGFjZVVSSSA9PSBOUy5YSFRNTCkge1xuICAgIGxhbmcgPSBlbGVtZW50LmdldEF0dHJpYnV0ZShcImxhbmdcIik7XG4gIH1cbiAgcmV0dXJuIGxhbmc7XG59XG5cbmV4cG9ydCBjbGFzcyBTdHJpbmdCdWZmZXIge1xuICBsaXN0OiBzdHJpbmdbXSA9IFtdO1xuXG4gIGFwcGVuZChzdHI6IHN0cmluZyk6IFN0cmluZ0J1ZmZlciB7XG4gICAgdGhpcy5saXN0LnB1c2goc3RyKTtcbiAgICByZXR1cm4gdGhpcztcbiAgfVxuXG4gIGNsZWFyKCk6IHZvaWQge1xuICAgIHRoaXMubGlzdCA9IFtdO1xuICB9XG5cbiAgLyoqXG4gICAqIEBvdmVycmlkZVxuICAgKi9cbiAgdG9TdHJpbmcoKTogc3RyaW5nIHtcbiAgICBjb25zdCBzdHIgPSB0aGlzLmxpc3Quam9pbihcIlwiKTtcbiAgICB0aGlzLmxpc3QgPSBbc3RyXTtcbiAgICByZXR1cm4gc3RyO1xuICB9XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBlc2NhcGVDaGFyKHN0cjogc3RyaW5nKTogc3RyaW5nIHtcbiAgLy8gbm90IGNhbGxlZCBmb3Igc3Vycm9nYXRlIHBhaXJzLCBubyBuZWVkIHRvIHdvcnJ5IGFib3V0IHRoZW1cbiAgcmV0dXJuIGBcXFxcJHtzdHIuY2hhckNvZGVBdCgwKS50b1N0cmluZygxNil9IGA7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBlc2NhcGVDU1NJZGVudChuYW1lOiBzdHJpbmcpOiBzdHJpbmcge1xuICByZXR1cm4gbmFtZS5yZXBsYWNlKC9bXi1fYS16QS1aMC05XFx1MDA4MC1cXHVGRkZGXS9nLCBlc2NhcGVDaGFyKTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGVzY2FwZUNTU1N0cihzdHI6IHN0cmluZyk6IHN0cmluZyB7XG4gIHJldHVybiBzdHIucmVwbGFjZSgvW1xcdTAwMDAtXFx1MDAxRlwiXFxcXF0vZywgZXNjYXBlQ2hhcik7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBsaWdodFVSTEVuY29kZShzdHI6IHN0cmluZyk6IHN0cmluZyB7XG4gIHJldHVybiBzdHIucmVwbGFjZSgvW1xccysmPz0jXFx1MDA3Ri1cXHVGRkZGXSsvZywgZW5jb2RlVVJJQ29tcG9uZW50KTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGlzTGV0dGVyKGNoOiBzdHJpbmcpOiBib29sZWFuIHtcbiAgcmV0dXJuICEhY2gubWF0Y2goXG4gICAgL15bYS16QS1aXFx1MDA5RVxcdTAwOUZcXHUwMEMwLVxcdTAwRDZcXHUwMEQ4LVxcdTAwRjZcXHUwMEY4LVxcdTAyNEZcXHUwMzdCLVxcdTAzN0RcXHUwMzg2XFx1MDM4OC1cXHUwNDgyXFx1MDQ4QS1cXHUwNTI3XSQvLFxuICApO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gZXNjYXBlQ2hhclRvSGV4KHN0cjogc3RyaW5nLCBwcmVmaXg/OiBzdHJpbmcpOiBzdHJpbmcge1xuICBwcmVmaXggPSB0eXBlb2YgcHJlZml4ID09PSBcInN0cmluZ1wiID8gcHJlZml4IDogXCJcXFxcdVwiO1xuICByZXR1cm4gcHJlZml4ICsgKDY1NTM2IHwgc3RyLmNoYXJDb2RlQXQoMCkpLnRvU3RyaW5nKDE2KS5zdWJzdHIoMSk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBlc2NhcGVOYW1lU3RyVG9IZXgoc3RyOiBzdHJpbmcsIHByZWZpeD86IHN0cmluZyk6IHN0cmluZyB7XG4gIGZ1bmN0aW9uIGVzY2FwZUNoYXIocykge1xuICAgIHJldHVybiBlc2NhcGVDaGFyVG9IZXgocywgcHJlZml4KTtcbiAgfVxuICByZXR1cm4gc3RyLnJlcGxhY2UoL1teLWEtekEtWjAtOV9dL2csIGVzY2FwZUNoYXIpO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gZXNjYXBlUmVnRXhwKHN0cjogc3RyaW5nKTogc3RyaW5nIHtcbiAgcmV0dXJuIGVzY2FwZU5hbWVTdHJUb0hleChzdHIpO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gdW5lc2NhcGVDaGFyRnJvbUhleChzdHI6IHN0cmluZywgcHJlZml4Pzogc3RyaW5nKTogc3RyaW5nIHtcbiAgcHJlZml4ID0gdHlwZW9mIHByZWZpeCA9PT0gXCJzdHJpbmdcIiA/IHByZWZpeCA6IFwiXFxcXHVcIjtcbiAgaWYgKHN0ci5pbmRleE9mKHByZWZpeCkgPT09IDApIHtcbiAgICByZXR1cm4gU3RyaW5nLmZyb21DaGFyQ29kZShwYXJzZUludChzdHIuc3Vic3RyaW5nKHByZWZpeC5sZW5ndGgpLCAxNikpO1xuICB9IGVsc2Uge1xuICAgIHJldHVybiBzdHI7XG4gIH1cbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHVuZXNjYXBlU3RyRnJvbUhleChzdHI6IHN0cmluZywgcHJlZml4Pzogc3RyaW5nKTogc3RyaW5nIHtcbiAgcHJlZml4ID0gdHlwZW9mIHByZWZpeCA9PT0gXCJzdHJpbmdcIiA/IHByZWZpeCA6IFwiXFxcXHVcIjtcblxuICBmdW5jdGlvbiB1bmVzY2FwZUNoYXIocykge1xuICAgIHJldHVybiB1bmVzY2FwZUNoYXJGcm9tSGV4KHMsIHByZWZpeCk7XG4gIH1cbiAgY29uc3QgcmVnZXhwID0gbmV3IFJlZ0V4cChgJHtlc2NhcGVSZWdFeHAocHJlZml4KX1bMC05YS1mQS1GXXs0fWAsIFwiZ1wiKTtcbiAgcmV0dXJuIHN0ci5yZXBsYWNlKHJlZ2V4cCwgdW5lc2NhcGVDaGFyKTtcbn1cblxuLyoqXG4gKiBGdW5jdGlvbiBnb29kIGlzIGRlZmluZWQgZm9yIGludHMgZnJvbSAwIHRvIGhpZ2gtMS4gSXQgaXMgc3VjaCB0aGF0IGZvclxuICogZWFjaCBpIGJldHdlZW4gMSBhbmQgaGlnaC0xICFnb29kKGktMSkgfHwgZ29vZChpKSBpcyB0cnVlLiBJbiBvdGhlciB3b3JkcyxcbiAqIGl0IGdvZXMgbGlrZSBmYWxzZSAuLi4gZmFsc2UgdHJ1ZSAuLi4gdHJ1ZS5cbiAqIEZpbmQgaSBzdWNoIHRoYXQgKGkgPT0gMCB8fCAhZ29vZChpLTEpKSAmJiAoaSA9PSBoIHx8IGdvb2QoaSkpXG4gKiBJbiBvdGhlciB3b3JkcywgZ29vZChpKSBpcyB0aGUgXCJmaXJzdFwiIGdvb2QgPSB0cnVlLlxuICovXG5leHBvcnQgZnVuY3Rpb24gYmluYXJ5U2VhcmNoKFxuICBoaWdoOiBudW1iZXIsXG4gIGdvb2Q6IChwMTogbnVtYmVyKSA9PiBib29sZWFuLFxuKTogbnVtYmVyIHtcbiAgbGV0IGwgPSAwO1xuICBsZXQgaCA9IGhpZ2g7XG4gIHdoaWxlICh0cnVlKSB7XG4gICAgQXNzZXJ0cy5hc3NlcnQobCA8PSBoKTtcbiAgICBBc3NlcnRzLmFzc2VydChsID09IDAgfHwgIWdvb2QobCAtIDEpKTtcbiAgICBBc3NlcnRzLmFzc2VydChoID09IGhpZ2ggfHwgZ29vZChoKSk7XG4gICAgaWYgKGwgPT0gaCkge1xuICAgICAgcmV0dXJuIGw7XG4gICAgfVxuICAgIGNvbnN0IG0gPSAobCArIGgpID4+IDE7XG4gICAgaWYgKGdvb2QobSkpIHtcbiAgICAgIGggPSBtO1xuICAgIH0gZWxzZSB7XG4gICAgICBsID0gbSArIDE7XG4gICAgfVxuICB9XG59XG5cbi8qKlxuICogRnVuY3Rpb24gdG8gc29ydCBudW1iZXJzIGxvdyB0byBoaWdoXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBudW1iZXJDb21wYXJlKGE6IG51bWJlciwgYjogbnVtYmVyKTogbnVtYmVyIHtcbiAgcmV0dXJuIGEgLSBiO1xufVxuXG5leHBvcnQgY29uc3QgYmFzZTY0Q2hhcnMgPVxuICBcIkFCQ0RFRkdISUpLTE1OT1BRUlNUVVZXWFlaYWJjZGVmZ2hpamtsbW5vcHFyc3R1dnd4eXowMTIzNDU2Nzg5Ky9cIjtcblxuZXhwb3J0IGZ1bmN0aW9uIGFwcGVuZEJhc2U2NChzYjogU3RyaW5nQnVmZmVyLCBkYXRhOiBzdHJpbmcpOiB2b2lkIHtcbiAgY29uc3QgbGVuZ3RoID0gZGF0YS5sZW5ndGg7XG4gIGNvbnN0IGxlbmd0aDMgPSBNYXRoLmZsb29yKGxlbmd0aCAvIDMpICogMztcbiAgZm9yIChsZXQgaSA9IDA7IGkgPCBsZW5ndGgzOyBpICs9IDMpIHtcbiAgICBjb25zdCBjMSA9IGRhdGEuY2hhckNvZGVBdChpKSAmIDI1NTtcbiAgICBjb25zdCBjMiA9IGRhdGEuY2hhckNvZGVBdChpICsgMSkgJiAyNTU7XG4gICAgY29uc3QgYzMgPSBkYXRhLmNoYXJDb2RlQXQoaSArIDIpICYgMjU1O1xuICAgIHNiLmFwcGVuZChiYXNlNjRDaGFycy5jaGFyQXQoYzEgPj4gMikpO1xuICAgIHNiLmFwcGVuZChiYXNlNjRDaGFycy5jaGFyQXQoKChjMSA8PCA0KSB8IChjMiA+PiA0KSkgJiA2MykpO1xuICAgIHNiLmFwcGVuZChiYXNlNjRDaGFycy5jaGFyQXQoKChjMiA8PCAyKSB8IChjMyA+PiA2KSkgJiA2MykpO1xuICAgIHNiLmFwcGVuZChiYXNlNjRDaGFycy5jaGFyQXQoYzMgJiA2MykpO1xuICB9XG4gIHN3aXRjaCAobGVuZ3RoIC0gbGVuZ3RoMykge1xuICAgIGNhc2UgMToge1xuICAgICAgY29uc3QgcDEgPSBkYXRhLmNoYXJDb2RlQXQobGVuZ3RoMykgJiAyNTU7XG4gICAgICBzYi5hcHBlbmQoYmFzZTY0Q2hhcnMuY2hhckF0KHAxID4+IDIpKTtcbiAgICAgIHNiLmFwcGVuZChiYXNlNjRDaGFycy5jaGFyQXQoKHAxIDw8IDQpICYgNjMpKTtcbiAgICAgIHNiLmFwcGVuZChcIj09XCIpO1xuICAgICAgYnJlYWs7XG4gICAgfVxuICAgIGNhc2UgMjoge1xuICAgICAgY29uc3QgcTEgPSBkYXRhLmNoYXJDb2RlQXQobGVuZ3RoMykgJiAyNTU7XG4gICAgICBjb25zdCBxMiA9IGRhdGEuY2hhckNvZGVBdChsZW5ndGgzICsgMSkgJiAyNTU7XG4gICAgICBzYi5hcHBlbmQoYmFzZTY0Q2hhcnMuY2hhckF0KHExID4+IDIpKTtcbiAgICAgIHNiLmFwcGVuZChiYXNlNjRDaGFycy5jaGFyQXQoKChxMSA8PCA0KSB8IChxMiA+PiA0KSkgJiA2MykpO1xuICAgICAgc2IuYXBwZW5kKGJhc2U2NENoYXJzLmNoYXJBdCgocTIgPDwgMikgJiA2MykpO1xuICAgICAgc2IuYXBwZW5kKFwiPVwiKTtcbiAgICAgIGJyZWFrO1xuICAgIH1cbiAgfVxufVxuXG4vKipcbiAqIEluZGV4IGFycmF5IHVzaW5nIGtleSBmdW5jdGlvbi4gRmlyc3QgZW5jb3VudGVyZWQgaXRlbSB3aW5zIG9uIGNvbGxpc2lvbi5cbiAqIEVsZW1lbnRzIHdpdGggZW1wdHkgYW5kIG51bGwga2V5cyBhcmUgZHJvcHBlZC5cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGluZGV4QXJyYXk8VD4oXG4gIGFycjogVFtdLFxuICBrZXk6IChwMTogVCkgPT4gc3RyaW5nIHwgbnVsbCxcbik6IHsgW2tleTogc3RyaW5nXTogVCB9IHtcbiAgY29uc3QgbWFwOiB7IFtrZXk6IHN0cmluZ106IFQgfSA9IHt9O1xuICBmb3IgKGNvbnN0IHYgb2YgYXJyKSB7XG4gICAgY29uc3Qgazogc3RyaW5nIHwgbnVsbCA9IGtleSh2KTtcbiAgICBpZiAoayAmJiAhbWFwW2tdKSB7XG4gICAgICBtYXBba10gPSB2O1xuICAgIH1cbiAgfVxuICByZXR1cm4gbWFwO1xufVxuXG4vKipcbiAqIENvbnZlcnQgYXJyYXkgb2Ygc3RyaW5ncyB0byBhbiBvYmplY3Qgd2l0aCB0aGUgdmFsdWVzIGluIHRoZSBhcnJheSBzZXQgdG9cbiAqIHRydWUuXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBhcnJheVRvU2V0KGFycjogc3RyaW5nW10pOiB7IFtrZXk6IHN0cmluZ106IGJvb2xlYW4gfSB7XG4gIGNvbnN0IHNldCA9IHt9O1xuICBmb3IgKGxldCBpID0gMDsgaSA8IGFyci5sZW5ndGg7IGkrKykge1xuICAgIHNldFthcnJbaV1dID0gdHJ1ZTtcbiAgfVxuICByZXR1cm4gc2V0O1xufVxuXG4vKipcbiAqIEluZGV4IGFycmF5IHVzaW5nIGtleSBmdW5jdGlvbi4gUmVwZWF0ZWQgaW5kaWNlcyBhcmUgYWxsIGNvbWJpbmVkIGludG9cbiAqIGFycmF5cy4gRWxlbWVudHMgd2l0aCBlbXB0eSBhbmQgbnVsbCBrZXlzIGFyZSBkcm9wcGVkLiBPcmRlcmluZyBvZiB0aGVcbiAqIGVsZW1lbnRzIGluIGFycmF5cyBpcyBwcmVzZXJ2ZWQuXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBtdWx0aUluZGV4QXJyYXk8VD4oXG4gIGFycjogVFtdLFxuICBrZXk6IChwMTogVCkgPT4gc3RyaW5nIHwgbnVsbCxcbik6IHsgW2tleTogc3RyaW5nXTogVFtdIH0ge1xuICBjb25zdCBtYXA6IHsgW2tleTogc3RyaW5nXTogVFtdIH0gPSB7fTtcbiAgZm9yIChjb25zdCB2IG9mIGFycikge1xuICAgIGNvbnN0IGsgPSBrZXkodik7XG4gICAgaWYgKGspIHtcbiAgICAgIGlmIChtYXBba10pIHtcbiAgICAgICAgbWFwW2tdLnB1c2godik7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBtYXBba10gPSBbdl07XG4gICAgICB9XG4gICAgfVxuICB9XG4gIHJldHVybiBtYXA7XG59XG5cbi8qKlxuICogQXBwbHkgZnVuY3Rpb24gdG8gZWFjaCB2YWx1ZSBvZiB0aGUgb2JqZWN0XG4gKiBAcGFyYW0gZm4gc2Vjb25kIHBhcmFtZXRlciBpcyB0aGUga2V5XG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBtYXBPYmo8UCwgUj4oXG4gIG9iajogeyBba2V5OiBzdHJpbmddOiBQIH0sXG4gIGZuOiAocDE6IFAsIHAyOiBzdHJpbmcpID0+IFIsXG4pOiB7IFtrZXk6IHN0cmluZ106IFIgfSB7XG4gIGNvbnN0IHJlczogeyBba2V5OiBzdHJpbmddOiBSIH0gPSB7fTtcbiAgZm9yIChjb25zdCBuIGluIG9iaikge1xuICAgIHJlc1tuXSA9IGZuKG9ialtuXSwgbik7XG4gIH1cbiAgcmV0dXJuIHJlcztcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIG1hcFNpemUob2JqOiBvYmplY3QpOiBudW1iZXIge1xuICBsZXQgbiA9IDA7XG4gIGZvciAoY29uc3Qga2V5IGluIG9iaikge1xuICAgIG4rKztcbiAgfVxuICByZXR1cm4gbjtcbn1cblxuZXhwb3J0IHR5cGUgRXZlbnQgPSB7XG4gIHR5cGU6IHN0cmluZztcbiAgdGFyZ2V0PztcbiAgY3VycmVudFRhcmdldD87XG4gIHByZXZlbnREZWZhdWx0PztcbiAgbmV3UGFnZT87XG4gIGFuY2hvckVsZW1lbnQ/O1xuICBocmVmPztcbiAgY29udGVudD87XG59O1xuXG5leHBvcnQgdHlwZSBFdmVudExpc3RlbmVyID0gKHAxOiBFdmVudCkgPT4gdm9pZDtcblxuLyoqXG4gKiBFeHRlbWVseSBzaW1wbGUtbWluZGVkIEV2ZW50VGFyZ2V0IGltcGxlbWVudGF0aW9uLiBDb25zaWRlciB1c2luZ1xuICogZ29vZy5ldmVudHMuRXZlbnRUYXJnZXQgaWYgeW91IGFyZSB1c2luZyBDbG9zdXJlIGxpYnJhcnkuXG4gKi9cbmV4cG9ydCBjbGFzcyBTaW1wbGVFdmVudFRhcmdldCB7XG4gIGxpc3RlbmVyczogeyBba2V5OiBzdHJpbmddOiBFdmVudExpc3RlbmVyW10gfSA9IHt9O1xuXG4gIGRpc3BhdGNoRXZlbnQoZXZ0OiBFdmVudCk6IHZvaWQge1xuICAgIGNvbnN0IGxpc3QgPSB0aGlzLmxpc3RlbmVyc1tldnQudHlwZV07XG4gICAgaWYgKGxpc3QpIHtcbiAgICAgIGV2dC50YXJnZXQgPSB0aGlzO1xuICAgICAgZXZ0LmN1cnJlbnRUYXJnZXQgPSB0aGlzO1xuICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBsaXN0Lmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIGxpc3RbaV0oZXZ0KTtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICBhZGRFdmVudExpc3RlbmVyKFxuICAgIHR5cGU6IHN0cmluZyxcbiAgICBsaXN0ZW5lcjogRXZlbnRMaXN0ZW5lcixcbiAgICBjYXB0dXJlPzogYm9vbGVhbixcbiAgKTogdm9pZCB7XG4gICAgaWYgKGNhcHR1cmUpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgY29uc3QgbGlzdCA9IHRoaXMubGlzdGVuZXJzW3R5cGVdO1xuICAgIGlmIChsaXN0KSB7XG4gICAgICBsaXN0LnB1c2gobGlzdGVuZXIpO1xuICAgIH0gZWxzZSB7XG4gICAgICB0aGlzLmxpc3RlbmVyc1t0eXBlXSA9IFtsaXN0ZW5lcl07XG4gICAgfVxuICB9XG5cbiAgcmVtb3ZlRXZlbnRMaXN0ZW5lcihcbiAgICB0eXBlOiBzdHJpbmcsXG4gICAgbGlzdGVuZXI6IEV2ZW50TGlzdGVuZXIsXG4gICAgY2FwdHVyZT86IGJvb2xlYW4sXG4gICk6IHZvaWQge1xuICAgIGlmIChjYXB0dXJlKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIGNvbnN0IGxpc3QgPSB0aGlzLmxpc3RlbmVyc1t0eXBlXTtcbiAgICBpZiAobGlzdCkge1xuICAgICAgY29uc3QgaW5kZXggPSBsaXN0LmluZGV4T2YobGlzdGVuZXIpO1xuICAgICAgaWYgKGluZGV4ID49IDApIHtcbiAgICAgICAgbGlzdC5zcGxpY2UoaW5kZXgsIDEpO1xuICAgICAgfVxuICAgIH1cbiAgfVxufVxuZXhwb3J0IHR5cGUgRXZlbnRUYXJnZXQgPSBTaW1wbGVFdmVudFRhcmdldDtcblxuZXhwb3J0IGxldCBoYXNMU2hhcGVGbG9hdEJ1ZzogYm9vbGVhbiB8IG51bGwgPSBudWxsO1xuXG4vKipcbiAqIENoZWNrIGlmIHRoZXJlIGlzIGEgYnVnIHdpdGggTC1zaGFwZSBmbG9hdHMgb3ZlcmxhcHBpbmcgdGV4dC5cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGNoZWNrTFNoYXBlRmxvYXRCdWcoYm9keTogSFRNTEVsZW1lbnQpOiBib29sZWFuIHtcbiAgaWYgKGhhc0xTaGFwZUZsb2F0QnVnID09IG51bGwpIHtcbiAgICBjb25zdCBkb2MgPSBib2R5Lm93bmVyRG9jdW1lbnQ7XG4gICAgY29uc3QgY29udGFpbmVyID0gZG9jLmNyZWF0ZUVsZW1lbnQoXCJkaXZcIikgYXMgSFRNTEVsZW1lbnQ7XG4gICAgY29udGFpbmVyLnN0eWxlLnBvc2l0aW9uID0gXCJhYnNvbHV0ZVwiO1xuICAgIGNvbnRhaW5lci5zdHlsZS50b3AgPSBcIjBweFwiO1xuICAgIGNvbnRhaW5lci5zdHlsZS5sZWZ0ID0gXCIwcHhcIjtcbiAgICBjb250YWluZXIuc3R5bGUud2lkdGggPSBcIjEwMHB4XCI7XG4gICAgY29udGFpbmVyLnN0eWxlLmhlaWdodCA9IFwiMTAwcHhcIjtcbiAgICBjb250YWluZXIuc3R5bGUub3ZlcmZsb3cgPSBcImhpZGRlblwiO1xuICAgIGNvbnRhaW5lci5zdHlsZS5saW5lSGVpZ2h0ID0gXCIxNnB4XCI7XG4gICAgY29udGFpbmVyLnN0eWxlLmZvbnRTaXplID0gXCIxNnB4XCI7XG4gICAgYm9keS5hcHBlbmRDaGlsZChjb250YWluZXIpO1xuICAgIGNvbnN0IGYxID0gZG9jLmNyZWF0ZUVsZW1lbnQoXCJkaXZcIikgYXMgSFRNTEVsZW1lbnQ7XG4gICAgZjEuc3R5bGUud2lkdGggPSBcIjBweFwiO1xuICAgIGYxLnN0eWxlLmhlaWdodCA9IFwiMTRweFwiO1xuICAgIGYxLnN0eWxlLmNzc0Zsb2F0ID0gXCJsZWZ0XCI7XG4gICAgY29udGFpbmVyLmFwcGVuZENoaWxkKGYxKTtcbiAgICBjb25zdCBmMiA9IGRvYy5jcmVhdGVFbGVtZW50KFwiZGl2XCIpIGFzIEhUTUxFbGVtZW50O1xuICAgIGYyLnN0eWxlLndpZHRoID0gXCI1MHB4XCI7XG4gICAgZjIuc3R5bGUuaGVpZ2h0ID0gXCI1MHB4XCI7XG4gICAgZjIuc3R5bGUuY3NzRmxvYXQgPSBcImxlZnRcIjtcbiAgICBmMi5zdHlsZS5jbGVhciA9IFwibGVmdFwiO1xuICAgIGNvbnRhaW5lci5hcHBlbmRDaGlsZChmMik7XG4gICAgY29uc3QgdCA9IGRvYy5jcmVhdGVUZXh0Tm9kZShcImEgYSBhIGEgYSBhIGEgYSBhIGEgYSBhIGEgYSBhIGFcIik7XG4gICAgY29udGFpbmVyLmFwcGVuZENoaWxkKHQpO1xuICAgIGNvbnN0IHJhbmdlID0gZG9jLmNyZWF0ZVJhbmdlKCk7XG4gICAgcmFuZ2Uuc2V0U3RhcnQodCwgMCk7XG4gICAgcmFuZ2Uuc2V0RW5kKHQsIDEpO1xuICAgIGNvbnN0IGxlZnRFZGdlID0gcmFuZ2UuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCkubGVmdDtcbiAgICBoYXNMU2hhcGVGbG9hdEJ1ZyA9IGxlZnRFZGdlIDwgNDA7XG4gICAgYm9keS5yZW1vdmVDaGlsZChjb250YWluZXIpO1xuICB9XG4gIHJldHVybiBoYXNMU2hhcGVGbG9hdEJ1Zztcbn1cblxuZXhwb3J0IGxldCBoYXNWZXJ0aWNhbEJCb3hCdWc6IGJvb2xlYW4gfCBudWxsID0gbnVsbDtcblxuLyoqXG4gKiBDaGVjayBpZiB0aGVyZSBpcyBhIGJ1ZyB3aXRoIHRoZSBib3VuZGluZyBib3hlcyBvZiB2ZXJ0aWNhbCB0ZXh0IGNoYXJhY3RlcnMuXG4gKiBUaG91Z2ggbWV0aG9kIHVzZWQgdG8gYmUgdXNlZCBjaGVjayBDaHJvbWUgYnVnLCBpdCBzZWVtcyB0aGF0IHRoZSBidWcgaGFzXG4gKiBiZWVuIGFscmVhZHkgZml4ZWQ6XG4gKiAgIGh0dHBzOi8vYnVncy5jaHJvbWl1bS5vcmcvcC9jaHJvbWl1bS9pc3N1ZXMvZGV0YWlsP2lkPTI5NzgwOFxuICogV2Ugbm93IHVzZSB0aGlzIG1ldGhvZCB0byBjaGVjayBGaXJlZm94IGJ1ZzpcbiAqICAgaHR0cHM6Ly9idWd6aWxsYS5tb3ppbGxhLm9yZy9zaG93X2J1Zy5jZ2k/aWQ9MTE1OTMwOVxuICovXG5leHBvcnQgZnVuY3Rpb24gY2hlY2tWZXJ0aWNhbEJCb3hCdWcoYm9keTogSFRNTEVsZW1lbnQpOiBib29sZWFuIHtcbiAgaWYgKGhhc1ZlcnRpY2FsQkJveEJ1ZyA9PSBudWxsKSB7XG4gICAgY29uc3QgZG9jID0gYm9keS5vd25lckRvY3VtZW50O1xuICAgIGNvbnN0IGNvbnRhaW5lciA9IGRvYy5jcmVhdGVFbGVtZW50KFwiZGl2XCIpIGFzIEhUTUxFbGVtZW50O1xuICAgIGNvbnRhaW5lci5zdHlsZS5wb3NpdGlvbiA9IFwiYWJzb2x1dGVcIjtcbiAgICBjb250YWluZXIuc3R5bGUudG9wID0gXCIwcHhcIjtcbiAgICBjb250YWluZXIuc3R5bGUubGVmdCA9IFwiMHB4XCI7XG4gICAgY29udGFpbmVyLnN0eWxlLndpZHRoID0gXCIxMDBweFwiO1xuICAgIGNvbnRhaW5lci5zdHlsZS5oZWlnaHQgPSBcIjEwMHB4XCI7XG4gICAgY29udGFpbmVyLnN0eWxlLm92ZXJmbG93ID0gXCJoaWRkZW5cIjtcbiAgICBjb250YWluZXIuc3R5bGUubGluZUhlaWdodCA9IFwiMTZweFwiO1xuICAgIGNvbnRhaW5lci5zdHlsZS5mb250U2l6ZSA9IFwiMTZweFwiO1xuICAgIHNldENTU1Byb3BlcnR5KGNvbnRhaW5lciwgXCJ3cml0aW5nLW1vZGVcIiwgXCJ2ZXJ0aWNhbC1ybFwiKTtcbiAgICBib2R5LmFwcGVuZENoaWxkKGNvbnRhaW5lcik7XG4gICAgY29uc3QgdCA9IGRvYy5jcmVhdGVUZXh0Tm9kZShcImEgYSBhIGEgYSBhIGEgYSBhIGEgYSBhIGEgYSBhIGFcIik7XG4gICAgY29udGFpbmVyLmFwcGVuZENoaWxkKHQpO1xuICAgIGNvbnN0IHJhbmdlID0gZG9jLmNyZWF0ZVJhbmdlKCk7XG4gICAgcmFuZ2Uuc2V0U3RhcnQodCwgMCk7XG4gICAgcmFuZ2Uuc2V0RW5kKHQsIDEpO1xuICAgIGNvbnN0IGJveCA9IHJhbmdlLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpO1xuICAgIGhhc1ZlcnRpY2FsQkJveEJ1ZyA9IGJveC5yaWdodCAtIGJveC5sZWZ0IDwgMTA7XG4gICAgYm9keS5yZW1vdmVDaGlsZChjb250YWluZXIpO1xuICB9XG4gIHJldHVybiBoYXNWZXJ0aWNhbEJCb3hCdWc7XG59XG5cbmV4cG9ydCBsZXQgaGFzSW5saW5lQmxvY2tKdXN0aWZpY2F0aW9uQnVnOiBib29sZWFuIHwgbnVsbCA9IG51bGw7XG5cbmV4cG9ydCBmdW5jdGlvbiBjaGVja0lubGluZUJsb2NrSnVzdGlmaWNhdGlvbkJ1Zyhib2R5OiBIVE1MRWxlbWVudCk6IGJvb2xlYW4ge1xuICBpZiAoaGFzSW5saW5lQmxvY2tKdXN0aWZpY2F0aW9uQnVnID09PSBudWxsKSB7XG4gICAgY29uc3QgZG9jID0gYm9keS5vd25lckRvY3VtZW50O1xuICAgIGNvbnN0IGNvbnRhaW5lciA9IGRvYy5jcmVhdGVFbGVtZW50KFwiZGl2XCIpIGFzIEhUTUxFbGVtZW50O1xuICAgIGNvbnRhaW5lci5zdHlsZS5wb3NpdGlvbiA9IFwiYWJzb2x1dGVcIjtcbiAgICBjb250YWluZXIuc3R5bGUudG9wID0gXCIwcHhcIjtcbiAgICBjb250YWluZXIuc3R5bGUubGVmdCA9IFwiMHB4XCI7XG4gICAgY29udGFpbmVyLnN0eWxlLndpZHRoID0gXCIzMHB4XCI7XG4gICAgY29udGFpbmVyLnN0eWxlLmhlaWdodCA9IFwiMTAwcHhcIjtcbiAgICBjb250YWluZXIuc3R5bGUubGluZUhlaWdodCA9IFwiMTZweFwiO1xuICAgIGNvbnRhaW5lci5zdHlsZS5mb250U2l6ZSA9IFwiMTZweFwiO1xuICAgIGNvbnRhaW5lci5zdHlsZS50ZXh0QWxpZ24gPSBcImp1c3RpZnlcIjtcbiAgICBib2R5LmFwcGVuZENoaWxkKGNvbnRhaW5lcik7XG4gICAgY29uc3QgdCA9IGRvYy5jcmVhdGVUZXh0Tm9kZShcImEgfCBcIik7XG4gICAgY29udGFpbmVyLmFwcGVuZENoaWxkKHQpO1xuICAgIGNvbnN0IGlubGluZUJsb2NrID0gZG9jLmNyZWF0ZUVsZW1lbnQoXCJzcGFuXCIpO1xuICAgIGlubGluZUJsb2NrLnN0eWxlLmRpc3BsYXkgPSBcImlubGluZS1ibG9ja1wiO1xuICAgIGlubGluZUJsb2NrLnN0eWxlLndpZHRoID0gXCIzMHB4XCI7XG4gICAgY29udGFpbmVyLmFwcGVuZENoaWxkKGlubGluZUJsb2NrKTtcbiAgICBjb25zdCByYW5nZSA9IGRvYy5jcmVhdGVSYW5nZSgpO1xuICAgIHJhbmdlLnNldFN0YXJ0KHQsIDApO1xuICAgIHJhbmdlLnNldEVuZCh0LCAzKTtcbiAgICBjb25zdCBib3ggPSByYW5nZS5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKTtcbiAgICBoYXNJbmxpbmVCbG9ja0p1c3RpZmljYXRpb25CdWcgPSBib3gucmlnaHQgPCAyNztcbiAgICBib2R5LnJlbW92ZUNoaWxkKGNvbnRhaW5lcik7XG4gIH1cbiAgcmV0dXJuIGhhc0lubGluZUJsb2NrSnVzdGlmaWNhdGlvbkJ1Zztcbn1cblxuZXhwb3J0IGxldCBoYXNTb2Z0V3JhcE9wcG9ydHVuaXR5QWZ0ZXJIeXBoZW5CdWc6IGJvb2xlYW4gfCBudWxsID0gbnVsbDtcblxuZXhwb3J0IGZ1bmN0aW9uIGNoZWNrU29mdFdyYXBPcHBvcnR1bml0eUFmdGVySHlwaGVuQnVnKFxuICBib2R5OiBIVE1MRWxlbWVudCxcbik6IGJvb2xlYW4ge1xuICBpZiAoaGFzU29mdFdyYXBPcHBvcnR1bml0eUFmdGVySHlwaGVuQnVnID09PSBudWxsKSB7XG4gICAgY29uc3QgZG9jID0gYm9keS5vd25lckRvY3VtZW50O1xuICAgIGNvbnN0IGNvbnRhaW5lciA9IGRvYy5jcmVhdGVFbGVtZW50KFwiZGl2XCIpIGFzIEhUTUxFbGVtZW50O1xuICAgIGNvbnRhaW5lci5zdHlsZS5wb3NpdGlvbiA9IFwiYWJzb2x1dGVcIjtcbiAgICBjb250YWluZXIuc3R5bGUudG9wID0gXCIwcHhcIjtcbiAgICBjb250YWluZXIuc3R5bGUubGVmdCA9IFwiMHB4XCI7XG4gICAgY29udGFpbmVyLnN0eWxlLndpZHRoID0gXCI0MHB4XCI7XG4gICAgY29udGFpbmVyLnN0eWxlLmhlaWdodCA9IFwiMTAwcHhcIjtcbiAgICBjb250YWluZXIuc3R5bGUubGluZUhlaWdodCA9IFwiMTZweFwiO1xuICAgIGNvbnRhaW5lci5zdHlsZS5mb250U2l6ZSA9IFwiMTZweFwiO1xuICAgIGNvbnRhaW5lci5zdHlsZS50ZXh0QWxpZ24gPSBcImp1c3RpZnlcIjtcbiAgICBib2R5LmFwcGVuZENoaWxkKGNvbnRhaW5lcik7XG4gICAgY29uc3QgdCA9IGRvYy5jcmVhdGVUZXh0Tm9kZShcImEgYS1cIik7XG4gICAgY29udGFpbmVyLmFwcGVuZENoaWxkKHQpO1xuICAgIGNvbnN0IGlubGluZUJsb2NrID0gZG9jLmNyZWF0ZUVsZW1lbnQoXCJzcGFuXCIpO1xuICAgIGlubGluZUJsb2NrLnN0eWxlLmRpc3BsYXkgPSBcImlubGluZS1ibG9ja1wiO1xuICAgIGlubGluZUJsb2NrLnN0eWxlLndpZHRoID0gXCI0MHB4XCI7XG4gICAgY29udGFpbmVyLmFwcGVuZENoaWxkKGlubGluZUJsb2NrKTtcbiAgICBjb25zdCByYW5nZSA9IGRvYy5jcmVhdGVSYW5nZSgpO1xuICAgIHJhbmdlLnNldFN0YXJ0KHQsIDIpO1xuICAgIHJhbmdlLnNldEVuZCh0LCA0KTtcbiAgICBjb25zdCBib3ggPSByYW5nZS5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKTtcbiAgICBoYXNTb2Z0V3JhcE9wcG9ydHVuaXR5QWZ0ZXJIeXBoZW5CdWcgPSBib3gucmlnaHQgPCAzNztcbiAgICBib2R5LnJlbW92ZUNoaWxkKGNvbnRhaW5lcik7XG4gIH1cbiAgcmV0dXJuIGhhc1NvZnRXcmFwT3Bwb3J0dW5pdHlBZnRlckh5cGhlbkJ1Zztcbn1cblxuZXhwb3J0IGxldCBoYXNTb2Z0V3JhcE9wcG9ydHVuaXR5QnlXYnJCdWc6IGJvb2xlYW4gfCBudWxsID0gbnVsbDtcblxuZXhwb3J0IGZ1bmN0aW9uIGNoZWNrU29mdFdyYXBPcHBvcnR1bml0eUJ5V2JyQnVnKGJvZHk6IEhUTUxFbGVtZW50KTogYm9vbGVhbiB7XG4gIGlmIChoYXNTb2Z0V3JhcE9wcG9ydHVuaXR5QnlXYnJCdWcgPT09IG51bGwpIHtcbiAgICBjb25zdCBkb2MgPSBib2R5Lm93bmVyRG9jdW1lbnQ7XG4gICAgY29uc3QgY29udGFpbmVyID0gZG9jLmNyZWF0ZUVsZW1lbnQoXCJkaXZcIikgYXMgSFRNTEVsZW1lbnQ7XG4gICAgY29udGFpbmVyLnN0eWxlLnBvc2l0aW9uID0gXCJhYnNvbHV0ZVwiO1xuICAgIGNvbnRhaW5lci5zdHlsZS50b3AgPSBcIjBweFwiO1xuICAgIGNvbnRhaW5lci5zdHlsZS5sZWZ0ID0gXCIwcHhcIjtcbiAgICBjb250YWluZXIuc3R5bGUud2lkdGggPSBcIjQwcHhcIjtcbiAgICBjb250YWluZXIuc3R5bGUuaGVpZ2h0ID0gXCIxMDBweFwiO1xuICAgIGNvbnRhaW5lci5zdHlsZS5saW5lSGVpZ2h0ID0gXCIxNnB4XCI7XG4gICAgY29udGFpbmVyLnN0eWxlLmZvbnRTaXplID0gXCIxNnB4XCI7XG4gICAgY29udGFpbmVyLnN0eWxlLnRleHRBbGlnbiA9IFwianVzdGlmeVwiO1xuICAgIGJvZHkuYXBwZW5kQ2hpbGQoY29udGFpbmVyKTtcbiAgICBjb25zdCB0ID0gZG9jLmNyZWF0ZVRleHROb2RlKFwiYSBhLVwiKTtcbiAgICBjb250YWluZXIuYXBwZW5kQ2hpbGQodCk7XG4gICAgY29udGFpbmVyLmFwcGVuZENoaWxkKGRvYy5jcmVhdGVFbGVtZW50KFwid2JyXCIpKTtcbiAgICBjb25zdCBpbmxpbmVCbG9jayA9IGRvYy5jcmVhdGVFbGVtZW50KFwic3BhblwiKTtcbiAgICBpbmxpbmVCbG9jay5zdHlsZS5kaXNwbGF5ID0gXCJpbmxpbmUtYmxvY2tcIjtcbiAgICBpbmxpbmVCbG9jay5zdHlsZS53aWR0aCA9IFwiNDBweFwiO1xuICAgIGNvbnRhaW5lci5hcHBlbmRDaGlsZChpbmxpbmVCbG9jayk7XG4gICAgY29uc3QgcmFuZ2UgPSBkb2MuY3JlYXRlUmFuZ2UoKTtcbiAgICByYW5nZS5zZXRTdGFydCh0LCAyKTtcbiAgICByYW5nZS5zZXRFbmQodCwgNCk7XG4gICAgY29uc3QgYm94ID0gcmFuZ2UuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCk7XG4gICAgaGFzU29mdFdyYXBPcHBvcnR1bml0eUJ5V2JyQnVnID0gYm94LnJpZ2h0IDwgMzc7XG4gICAgYm9keS5yZW1vdmVDaGlsZChjb250YWluZXIpO1xuICB9XG4gIHJldHVybiBoYXNTb2Z0V3JhcE9wcG9ydHVuaXR5QnlXYnJCdWc7XG59XG4iLCIvKipcbiAqIENvcHlyaWdodCAyMDEzIEdvb2dsZSwgSW5jLlxuICogQ29weXJpZ2h0IDIwMTUgVHJpbS1tYXJrcyBJbmMuXG4gKiBDb3B5cmlnaHQgMjAxOSBWaXZsaW9zdHlsZSBGb3VuZGF0aW9uXG4gKlxuICogVml2bGlvc3R5bGUuanMgaXMgZnJlZSBzb2Z0d2FyZTogeW91IGNhbiByZWRpc3RyaWJ1dGUgaXQgYW5kL29yIG1vZGlmeVxuICogaXQgdW5kZXIgdGhlIHRlcm1zIG9mIHRoZSBHTlUgQWZmZXJvIEdlbmVyYWwgUHVibGljIExpY2Vuc2UgYXMgcHVibGlzaGVkIGJ5XG4gKiB0aGUgRnJlZSBTb2Z0d2FyZSBGb3VuZGF0aW9uLCBlaXRoZXIgdmVyc2lvbiAzIG9mIHRoZSBMaWNlbnNlLCBvclxuICogKGF0IHlvdXIgb3B0aW9uKSBhbnkgbGF0ZXIgdmVyc2lvbi5cbiAqXG4gKiBWaXZsaW9zdHlsZS5qcyBpcyBkaXN0cmlidXRlZCBpbiB0aGUgaG9wZSB0aGF0IGl0IHdpbGwgYmUgdXNlZnVsLFxuICogYnV0IFdJVEhPVVQgQU5ZIFdBUlJBTlRZOyB3aXRob3V0IGV2ZW4gdGhlIGltcGxpZWQgd2FycmFudHkgb2ZcbiAqIE1FUkNIQU5UQUJJTElUWSBvciBGSVRORVNTIEZPUiBBIFBBUlRJQ1VMQVIgUFVSUE9TRS4gIFNlZSB0aGVcbiAqIEdOVSBBZmZlcm8gR2VuZXJhbCBQdWJsaWMgTGljZW5zZSBmb3IgbW9yZSBkZXRhaWxzLlxuICpcbiAqIFlvdSBzaG91bGQgaGF2ZSByZWNlaXZlZCBhIGNvcHkgb2YgdGhlIEdOVSBBZmZlcm8gR2VuZXJhbCBQdWJsaWMgTGljZW5zZVxuICogYWxvbmcgd2l0aCBWaXZsaW9zdHlsZS5qcy4gIElmIG5vdCwgc2VlIDxodHRwOi8vd3d3LmdudS5vcmcvbGljZW5zZXMvPi5cbiAqXG4gKiBAZmlsZW92ZXJ2aWV3IENmaSAtIFN1cHBvcnQgZm9yIEVQVUIgQ2Fub25pY2FsIEZyYWdtZW50IElkZW50aWZpZXJzLlxuICovXG5pbXBvcnQgKiBhcyBCYXNlIGZyb20gXCIuL2Jhc2VcIjtcblxuZXhwb3J0IHR5cGUgUG9zaXRpb24gPSB7XG4gIG5vZGU6IE5vZGU7XG4gIG9mZnNldDogbnVtYmVyO1xuICBhZnRlcjogYm9vbGVhbjtcbiAgc2lkZUJpYXM6IHN0cmluZyB8IG51bGw7XG4gIHJlZjogRnJhZ21lbnQ7XG59O1xuXG5leHBvcnQgZnVuY3Rpb24gZ2V0SWQobm9kZTogTm9kZSk6IHN0cmluZyB8IG51bGwge1xuICBpZiAobm9kZS5ub2RlVHlwZSA9PSAxKSB7XG4gICAgY29uc3QgaWR0eHQgPSAobm9kZSBhcyBFbGVtZW50KS5nZXRBdHRyaWJ1dGUoXCJpZFwiKTtcbiAgICBpZiAoaWR0eHQpIHtcbiAgICAgIHJldHVybiBpZHR4dDtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIG51bGw7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBlc2NhcGVDaGFyKGNoOiBzdHJpbmcpOiBzdHJpbmcge1xuICByZXR1cm4gYF4ke2NofWA7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBlc2NhcGUoc3RyOiBzdHJpbmcpOiBzdHJpbmcge1xuICByZXR1cm4gc3RyLnJlcGxhY2UoL1tcXFtcXF1cXChcXCksPTteXS9nLCBlc2NhcGVDaGFyKTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHVuZXNjYXBlQ2hhcihzdHI6IHN0cmluZyk6IHN0cmluZyB7XG4gIHJldHVybiBzdHIuc3Vic3RyKDEpO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gdW5lc2NhcGUoc3RyOiBzdHJpbmcpOiBzdHJpbmcge1xuICBpZiAoIXN0cikge1xuICAgIHJldHVybiBzdHI7XG4gIH1cbiAgcmV0dXJuIHN0ci5yZXBsYWNlKC9cXF5bXFxbXFxdXFwoXFwpLD07Xl0vZywgdW5lc2NhcGVDaGFyKTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHBhcnNlRXh0VmFsKGV4dHN0cjogc3RyaW5nKTogc3RyaW5nIHwgc3RyaW5nW10ge1xuICBjb25zdCByZXN1bHQgPSBbXTtcbiAgZG8ge1xuICAgIGNvbnN0IHIgPSBleHRzdHIubWF0Y2goL14oXFxeLHxbXixdKSovKTtcbiAgICBjb25zdCBwID0gdW5lc2NhcGUoclswXSk7XG4gICAgZXh0c3RyID0gZXh0c3RyLnN1YnN0cihyWzBdLmxlbmd0aCArIDEpO1xuICAgIGlmICghZXh0c3RyICYmICFyZXN1bHQubGVuZ3RoKSB7XG4gICAgICByZXR1cm4gcDtcbiAgICB9XG4gICAgcmVzdWx0LnB1c2gocCk7XG4gIH0gd2hpbGUgKGV4dHN0cik7XG4gIHJldHVybiByZXN1bHQ7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBwYXJzZUV4dChleHRzdHI6IHN0cmluZyk6IHsgW2tleTogc3RyaW5nXTogc3RyaW5nIHwgc3RyaW5nW10gfSB7XG4gIGNvbnN0IGV4dCA9IHt9O1xuICB3aGlsZSAoZXh0c3RyKSB7XG4gICAgY29uc3QgciA9IGV4dHN0ci5tYXRjaCgvXjsoW147PV0rKT0oKFteO118XFxeOykqKS8pO1xuICAgIGlmICghcikge1xuICAgICAgcmV0dXJuIGV4dDtcbiAgICB9XG4gICAgZXh0W3JbMV1dID0gcGFyc2VFeHRWYWwoclsyXSk7XG4gICAgZXh0c3RyID0gZXh0c3RyLnN1YnN0cihyWzBdLmxlbmd0aCk7XG4gIH1cbiAgcmV0dXJuIGV4dDtcbn1cblxuZXhwb3J0IGludGVyZmFjZSBTdGVwIHtcbiAgYXBwZW5kVG8oc2I6IEJhc2UuU3RyaW5nQnVmZmVyKTogdm9pZDtcblxuICBhcHBseVRvKHBvczogUG9zaXRpb24pOiBib29sZWFuO1xufVxuXG5leHBvcnQgY2xhc3MgUmVmU3RlcCBpbXBsZW1lbnRzIFN0ZXAge1xuICBhcHBlbmRUbyhzYjogQmFzZS5TdHJpbmdCdWZmZXIpIHtcbiAgICBzYi5hcHBlbmQoXCIhXCIpO1xuICB9XG5cbiAgLyoqXG4gICAqIEBvdmVycmlkZVxuICAgKi9cbiAgYXBwbHlUbyhwb3M6IFBvc2l0aW9uKTogYm9vbGVhbiB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG59XG5cbmV4cG9ydCBjbGFzcyBDaGlsZFN0ZXAgaW1wbGVtZW50cyBTdGVwIHtcbiAgY29uc3RydWN0b3IoXG4gICAgcHVibGljIHJlYWRvbmx5IGluZGV4OiBudW1iZXIsXG4gICAgcHVibGljIHJlYWRvbmx5IGlkOiBzdHJpbmcgfCBudWxsLFxuICAgIHB1YmxpYyByZWFkb25seSBzaWRlQmlhczogc3RyaW5nIHwgbnVsbCxcbiAgKSB7fVxuXG4gIC8qKlxuICAgKiBAb3ZlcnJpZGVcbiAgICovXG4gIGFwcGVuZFRvKHNiOiBCYXNlLlN0cmluZ0J1ZmZlcik6IHZvaWQge1xuICAgIHNiLmFwcGVuZChcIi9cIik7XG4gICAgc2IuYXBwZW5kKHRoaXMuaW5kZXgudG9TdHJpbmcoKSk7XG4gICAgaWYgKHRoaXMuaWQgfHwgdGhpcy5zaWRlQmlhcykge1xuICAgICAgc2IuYXBwZW5kKFwiW1wiKTtcbiAgICAgIGlmICh0aGlzLmlkKSB7XG4gICAgICAgIHNiLmFwcGVuZCh0aGlzLmlkKTtcbiAgICAgIH1cbiAgICAgIGlmICh0aGlzLnNpZGVCaWFzKSB7XG4gICAgICAgIHNiLmFwcGVuZChcIjtzPVwiKTtcbiAgICAgICAgc2IuYXBwZW5kKHRoaXMuc2lkZUJpYXMpO1xuICAgICAgfVxuICAgICAgc2IuYXBwZW5kKFwiXVwiKTtcbiAgICB9XG4gIH1cblxuICAvKipcbiAgICogQG92ZXJyaWRlXG4gICAqL1xuICBhcHBseVRvKHBvczogUG9zaXRpb24pOiBib29sZWFuIHtcbiAgICBpZiAocG9zLm5vZGUubm9kZVR5cGUgIT0gMSkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKFwiRV9DRklfTk9UX0VMRU1FTlRcIik7XG4gICAgfVxuICAgIGNvbnN0IGVsZW0gPSBwb3Mubm9kZSBhcyBFbGVtZW50O1xuICAgIGNvbnN0IGNoaWxkRWxlbWVudHMgPSBlbGVtLmNoaWxkcmVuO1xuICAgIGNvbnN0IGNoaWxkRWxlbWVudENvdW50ID0gY2hpbGRFbGVtZW50cy5sZW5ndGg7XG4gICAgbGV0IGNoaWxkOiBOb2RlO1xuICAgIGNvbnN0IGNoaWxkSW5kZXggPSBNYXRoLmZsb29yKHRoaXMuaW5kZXggLyAyKSAtIDE7XG4gICAgaWYgKGNoaWxkSW5kZXggPCAwIHx8IGNoaWxkRWxlbWVudENvdW50ID09IDApIHtcbiAgICAgIGNoaWxkID0gZWxlbS5maXJzdENoaWxkO1xuICAgICAgcG9zLm5vZGUgPSBjaGlsZCB8fCBlbGVtO1xuICAgIH0gZWxzZSB7XG4gICAgICBjaGlsZCA9IGNoaWxkRWxlbWVudHNbTWF0aC5taW4oY2hpbGRJbmRleCwgY2hpbGRFbGVtZW50Q291bnQgLSAxKV07XG4gICAgICBpZiAodGhpcy5pbmRleCAmIDEpIHtcbiAgICAgICAgY29uc3QgbmV4dCA9IGNoaWxkLm5leHRTaWJsaW5nO1xuICAgICAgICBpZiAoIW5leHQgfHwgbmV4dC5ub2RlVHlwZSA9PSAxKSB7XG4gICAgICAgICAgcG9zLmFmdGVyID0gdHJ1ZTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBjaGlsZCA9IG5leHQ7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIHBvcy5ub2RlID0gY2hpbGQ7XG4gICAgfVxuICAgIGlmICh0aGlzLmlkICYmIChwb3MuYWZ0ZXIgfHwgdGhpcy5pZCAhPSBnZXRJZChwb3Mubm9kZSkpKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoXCJFX0NGSV9JRF9NSVNNQVRDSFwiKTtcbiAgICB9XG4gICAgcG9zLnNpZGVCaWFzID0gdGhpcy5zaWRlQmlhcztcbiAgICByZXR1cm4gdHJ1ZTtcbiAgfVxufVxuXG5leHBvcnQgY2xhc3MgT2Zmc2V0U3RlcCBpbXBsZW1lbnRzIFN0ZXAge1xuICBjb25zdHJ1Y3RvcihcbiAgICBwdWJsaWMgcmVhZG9ubHkgb2Zmc2V0OiBudW1iZXIsXG4gICAgcHVibGljIHJlYWRvbmx5IHRleHRCZWZvcmU6IHN0cmluZyB8IG51bGwsXG4gICAgcHVibGljIHJlYWRvbmx5IHRleHRBZnRlcjogc3RyaW5nIHwgbnVsbCxcbiAgICBwdWJsaWMgcmVhZG9ubHkgc2lkZUJpYXM6IHN0cmluZyB8IG51bGwsXG4gICkge31cblxuICBhcHBseVRvKHBvczogUG9zaXRpb24pOiBib29sZWFuIHtcbiAgICBpZiAodGhpcy5vZmZzZXQgPiAwICYmICFwb3MuYWZ0ZXIpIHtcbiAgICAgIGxldCBvZmZzZXQgPSB0aGlzLm9mZnNldDtcbiAgICAgIGxldCBub2RlID0gcG9zLm5vZGU7XG4gICAgICB3aGlsZSAodHJ1ZSkge1xuICAgICAgICBjb25zdCBub2RlVHlwZSA9IG5vZGUubm9kZVR5cGU7XG4gICAgICAgIGlmIChub2RlVHlwZSA9PSAxKSB7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgbmV4dCA9IG5vZGUubmV4dFNpYmxpbmc7XG4gICAgICAgIGlmICgzIDw9IG5vZGVUeXBlICYmIG5vZGVUeXBlIDw9IDUpIHtcbiAgICAgICAgICBjb25zdCB0ZXh0TGVuZ3RoID0gbm9kZS50ZXh0Q29udGVudC5sZW5ndGg7XG4gICAgICAgICAgaWYgKG9mZnNldCA8PSB0ZXh0TGVuZ3RoKSB7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgICB9XG4gICAgICAgICAgaWYgKCFuZXh0KSB7XG4gICAgICAgICAgICBvZmZzZXQgPSB0ZXh0TGVuZ3RoO1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgfVxuICAgICAgICAgIG9mZnNldCAtPSB0ZXh0TGVuZ3RoO1xuICAgICAgICB9XG4gICAgICAgIGlmICghbmV4dCkge1xuICAgICAgICAgIG9mZnNldCA9IDA7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cbiAgICAgICAgbm9kZSA9IG5leHQ7XG4gICAgICB9XG4gICAgICBwb3Mubm9kZSA9IG5vZGU7XG4gICAgICBwb3Mub2Zmc2V0ID0gb2Zmc2V0O1xuICAgIH1cbiAgICBwb3Muc2lkZUJpYXMgPSB0aGlzLnNpZGVCaWFzO1xuICAgIHJldHVybiB0cnVlO1xuICB9XG5cbiAgLyoqXG4gICAqIEBvdmVycmlkZVxuICAgKi9cbiAgYXBwZW5kVG8oc2I6IEJhc2UuU3RyaW5nQnVmZmVyKTogdm9pZCB7XG4gICAgc2IuYXBwZW5kKFwiOlwiKTtcbiAgICBzYi5hcHBlbmQodGhpcy5vZmZzZXQudG9TdHJpbmcoKSk7XG4gICAgaWYgKHRoaXMudGV4dEJlZm9yZSB8fCB0aGlzLnRleHRBZnRlciB8fCB0aGlzLnNpZGVCaWFzKSB7XG4gICAgICBzYi5hcHBlbmQoXCJbXCIpO1xuICAgICAgaWYgKHRoaXMudGV4dEJlZm9yZSB8fCB0aGlzLnRleHRBZnRlcikge1xuICAgICAgICBpZiAodGhpcy50ZXh0QmVmb3JlKSB7XG4gICAgICAgICAgc2IuYXBwZW5kKGVzY2FwZSh0aGlzLnRleHRCZWZvcmUpKTtcbiAgICAgICAgfVxuICAgICAgICBzYi5hcHBlbmQoXCIsXCIpO1xuICAgICAgICBpZiAodGhpcy50ZXh0QWZ0ZXIpIHtcbiAgICAgICAgICBzYi5hcHBlbmQoZXNjYXBlKHRoaXMudGV4dEFmdGVyKSk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIGlmICh0aGlzLnNpZGVCaWFzKSB7XG4gICAgICAgIHNiLmFwcGVuZChcIjtzPVwiKTtcbiAgICAgICAgc2IuYXBwZW5kKHRoaXMuc2lkZUJpYXMpO1xuICAgICAgfVxuICAgICAgc2IuYXBwZW5kKFwiXVwiKTtcbiAgICB9XG4gIH1cbn1cblxuZXhwb3J0IGNsYXNzIEZyYWdtZW50IHtcbiAgc3RlcHM6IFN0ZXBbXSA9IG51bGw7XG5cbiAgZnJvbVN0cmluZyhmcmFnc3RyOiBzdHJpbmcpOiB2b2lkIHtcbiAgICBsZXQgciA9IGZyYWdzdHIubWF0Y2goL14jP2VwdWJjZmlcXCgoLiopXFwpJC8pO1xuICAgIGlmICghcikge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKFwiRV9DRklfTk9UX0NGSVwiKTtcbiAgICB9XG4gICAgY29uc3Qgc3RyID0gZGVjb2RlVVJJQ29tcG9uZW50KHJbMV0pO1xuICAgIGxldCBpID0gMDtcbiAgICBjb25zdCBzdGVwcyA9IFtdO1xuICAgIHdoaWxlICh0cnVlKSB7XG4gICAgICBsZXQgZXh0OiB7XG4gICAgICAgIFtrZXk6IHN0cmluZ106IHN0cmluZyB8IHN0cmluZ1tdO1xuICAgICAgfTtcbiAgICAgIHN3aXRjaCAoc3RyLmNoYXJBdChpKSkge1xuICAgICAgICBjYXNlIFwiL1wiOiB7XG4gICAgICAgICAgaSsrO1xuICAgICAgICAgIHIgPSBzdHJcbiAgICAgICAgICAgIC5zdWJzdHIoaSlcbiAgICAgICAgICAgIC5tYXRjaCgvXigwfFsxLTldWzAtOV0qKShcXFsoLio/KSg7KFteXFxdXXxcXF5cXF0pKik/XFxdKT8vKTtcbiAgICAgICAgICBpZiAoIXIpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcIkVfQ0ZJX05VTUJFUl9FWFBFQ1RFRFwiKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgaSArPSByWzBdLmxlbmd0aDtcbiAgICAgICAgICBjb25zdCBpbmRleCA9IHBhcnNlSW50KHJbMV0sIDEwKTtcbiAgICAgICAgICBjb25zdCBpZCA9IHJbM107XG4gICAgICAgICAgZXh0ID0gcGFyc2VFeHQocls0XSk7XG4gICAgICAgICAgc3RlcHMucHVzaChuZXcgQ2hpbGRTdGVwKGluZGV4LCBpZCwgQmFzZS5hc1N0cmluZyhleHRbXCJzXCJdKSkpO1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG4gICAgICAgIGNhc2UgXCI6XCI6IHtcbiAgICAgICAgICBpKys7XG4gICAgICAgICAgciA9IHN0clxuICAgICAgICAgICAgLnN1YnN0cihpKVxuICAgICAgICAgICAgLm1hdGNoKFxuICAgICAgICAgICAgICAvXigwfFsxLTldWzAtOV0qKShcXFsoKChbXlxcXTssXXxcXF5bXFxdOyxdKSopKCwoKFteXFxdOyxdfFxcXltcXF07LF0pKikpPykoOyhbXl1dfFxcXlxcXSkqKT9cXF0pPy8sXG4gICAgICAgICAgICApO1xuICAgICAgICAgIGlmICghcikge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiRV9DRklfTlVNQkVSX0VYUEVDVEVEXCIpO1xuICAgICAgICAgIH1cbiAgICAgICAgICBpICs9IHJbMF0ubGVuZ3RoO1xuICAgICAgICAgIGNvbnN0IG9mZnNldCA9IHBhcnNlSW50KHJbMV0sIDEwKTtcbiAgICAgICAgICBsZXQgdGV4dEJlZm9yZSA9IHJbNF07XG4gICAgICAgICAgaWYgKHRleHRCZWZvcmUpIHtcbiAgICAgICAgICAgIHRleHRCZWZvcmUgPSB1bmVzY2FwZSh0ZXh0QmVmb3JlKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgbGV0IHRleHRBZnRlciA9IHJbN107XG4gICAgICAgICAgaWYgKHRleHRBZnRlcikge1xuICAgICAgICAgICAgdGV4dEFmdGVyID0gdW5lc2NhcGUodGV4dEFmdGVyKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgZXh0ID0gcGFyc2VFeHQoclsxMF0pO1xuICAgICAgICAgIHN0ZXBzLnB1c2goXG4gICAgICAgICAgICBuZXcgT2Zmc2V0U3RlcChcbiAgICAgICAgICAgICAgb2Zmc2V0LFxuICAgICAgICAgICAgICB0ZXh0QmVmb3JlLFxuICAgICAgICAgICAgICB0ZXh0QWZ0ZXIsXG4gICAgICAgICAgICAgIEJhc2UuYXNTdHJpbmcoZXh0W1wic1wiXSksXG4gICAgICAgICAgICApLFxuICAgICAgICAgICk7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cbiAgICAgICAgY2FzZSBcIiFcIjpcbiAgICAgICAgICBpKys7XG4gICAgICAgICAgc3RlcHMucHVzaChuZXcgUmVmU3RlcCgpKTtcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgY2FzZSBcIn5cIjpcbiAgICAgICAgY2FzZSBcIkBcIjpcblxuICAgICAgICAvLyBUaW1lL3NwYWNlIHRlcm1pbnVzOyBvbmx5IHVzZWZ1bCBmb3IgaGlnaGxpZ2h0cy9zZWxlY3Rpb25zIHdoaWNoIGFyZVxuICAgICAgICAvLyBub3QgeWV0IHN1cHBvcnRlZCwgc2tpcCBmb3Igbm93LiBmYWxsIHRocm91Z2hcbiAgICAgICAgY2FzZSBcIlwiOlxuICAgICAgICAgIHRoaXMuc3RlcHMgPSBzdGVwcztcbiAgICAgICAgICByZXR1cm47XG4gICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiRV9DRklfUEFSU0VfRVJST1JcIik7XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgbmF2aWdhdGUoZG9jOiBEb2N1bWVudCk6IFBvc2l0aW9uIHtcbiAgICBjb25zdCBwb3MgPSB7XG4gICAgICBub2RlOiBkb2MuZG9jdW1lbnRFbGVtZW50LFxuICAgICAgb2Zmc2V0OiAwLFxuICAgICAgYWZ0ZXI6IGZhbHNlLFxuICAgICAgc2lkZUJpYXM6IG51bGwsXG4gICAgICByZWY6IG51bGwsXG4gICAgfTtcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IHRoaXMuc3RlcHMubGVuZ3RoOyBpKyspIHtcbiAgICAgIGlmICghdGhpcy5zdGVwc1tpXS5hcHBseVRvKHBvcykpIHtcbiAgICAgICAgcG9zLnJlZiA9IG5ldyBGcmFnbWVudCgpO1xuICAgICAgICBwb3MucmVmLnN0ZXBzID0gdGhpcy5zdGVwcy5zbGljZShpICsgMSk7XG4gICAgICAgIGJyZWFrO1xuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gcG9zO1xuICB9XG5cbiAgdHJpbSh0ZXh0OiBzdHJpbmcsIGFmdGVyOiBib29sZWFuKTogc3RyaW5nIHtcbiAgICByZXR1cm4gdGV4dFxuICAgICAgLnJlcGxhY2UoL1xccysvZywgXCIgXCIpXG4gICAgICAubWF0Y2goXG4gICAgICAgIGFmdGVyXG4gICAgICAgICAgPyAvXlsgLVxcdUQ3RkZcXHVFMDAwLVxcdUZGRkZdezAsOH0vXG4gICAgICAgICAgOiAvWyAtXFx1RDdGRlxcdUUwMDAtXFx1RkZGRl17MCw4fSQvLFxuICAgICAgKVswXVxuICAgICAgLnJlcGxhY2UoL15cXHMvLCBcIlwiKVxuICAgICAgLnJlcGxhY2UoL1xccyQvLCBcIlwiKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBJbml0aWFsaXplIGZyb20gYSBub2RlIGFuZCBhbiBvZmZzZXQuXG4gICAqL1xuICBwcmVwZW5kUGF0aEZyb21Ob2RlKFxuICAgIG5vZGU6IE5vZGUsXG4gICAgb2Zmc2V0OiBudW1iZXIsXG4gICAgYWZ0ZXI6IGJvb2xlYW4sXG4gICAgc2lkZUJpYXM6IHN0cmluZyB8IG51bGwsXG4gICkge1xuICAgIGNvbnN0IHN0ZXBzID0gW107XG4gICAgbGV0IHBhcmVudCA9IG5vZGUucGFyZW50Tm9kZTtcbiAgICBsZXQgdGV4dEJlZm9yZSA9IFwiXCI7XG4gICAgbGV0IHRleHRBZnRlciA9IFwiXCI7XG4gICAgd2hpbGUgKG5vZGUpIHtcbiAgICAgIHN3aXRjaCAobm9kZS5ub2RlVHlwZSkge1xuICAgICAgICBjYXNlIDM6IC8vIFRleHQgbm9kZXNcbiAgICAgICAgY2FzZSA0OlxuICAgICAgICBjYXNlIDU6IHtcbiAgICAgICAgICBjb25zdCB0ZXh0ID0gbm9kZS50ZXh0Q29udGVudDtcbiAgICAgICAgICBjb25zdCB0ZXh0TGVuZ3RoID0gdGV4dC5sZW5ndGg7XG4gICAgICAgICAgaWYgKGFmdGVyKSB7XG4gICAgICAgICAgICBvZmZzZXQgKz0gdGV4dExlbmd0aDtcbiAgICAgICAgICAgIGlmICghdGV4dEJlZm9yZSkge1xuICAgICAgICAgICAgICB0ZXh0QmVmb3JlID0gdGV4dDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgaWYgKG9mZnNldCA+IHRleHRMZW5ndGgpIHtcbiAgICAgICAgICAgICAgb2Zmc2V0ID0gdGV4dExlbmd0aDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGFmdGVyID0gdHJ1ZTtcbiAgICAgICAgICAgIHRleHRCZWZvcmUgPSB0ZXh0LnN1YnN0cigwLCBvZmZzZXQpO1xuICAgICAgICAgICAgdGV4dEFmdGVyID0gdGV4dC5zdWJzdHIob2Zmc2V0KTtcbiAgICAgICAgICB9XG4gICAgICAgICAgbm9kZSA9IG5vZGUucHJldmlvdXNTaWJsaW5nO1xuICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICB9XG4gICAgICAgIGNhc2UgODogLy8gQ29tbWVudCBOb2RlXG4gICAgICAgICAgbm9kZSA9IG5vZGUucHJldmlvdXNTaWJsaW5nO1xuICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgfVxuICAgICAgYnJlYWs7XG4gICAgfVxuICAgIGlmIChvZmZzZXQgPiAwIHx8IHRleHRCZWZvcmUgfHwgdGV4dEFmdGVyKSB7XG4gICAgICB0ZXh0QmVmb3JlID0gdGhpcy50cmltKHRleHRCZWZvcmUsIGZhbHNlKTtcbiAgICAgIHRleHRBZnRlciA9IHRoaXMudHJpbSh0ZXh0QWZ0ZXIsIHRydWUpO1xuICAgICAgc3RlcHMucHVzaChuZXcgT2Zmc2V0U3RlcChvZmZzZXQsIHRleHRCZWZvcmUsIHRleHRBZnRlciwgc2lkZUJpYXMpKTtcbiAgICAgIHNpZGVCaWFzID0gbnVsbDtcbiAgICB9XG4gICAgd2hpbGUgKHBhcmVudCkge1xuICAgICAgaWYgKCFwYXJlbnQgfHwgcGFyZW50Lm5vZGVUeXBlID09IDkpIHtcbiAgICAgICAgYnJlYWs7XG4gICAgICB9XG4gICAgICBjb25zdCBpZCA9IGFmdGVyID8gbnVsbCA6IGdldElkKG5vZGUpO1xuICAgICAgbGV0IGluZGV4ID0gYWZ0ZXIgPyAxIDogMDtcbiAgICAgIHdoaWxlIChub2RlKSB7XG4gICAgICAgIGlmIChub2RlLm5vZGVUeXBlID09IDEpIHtcbiAgICAgICAgICBpbmRleCArPSAyO1xuICAgICAgICB9XG4gICAgICAgIG5vZGUgPSBub2RlLnByZXZpb3VzU2libGluZztcbiAgICAgIH1cbiAgICAgIHN0ZXBzLnB1c2gobmV3IENoaWxkU3RlcChpbmRleCwgaWQsIHNpZGVCaWFzKSk7XG4gICAgICBzaWRlQmlhcyA9IG51bGw7XG4gICAgICBub2RlID0gcGFyZW50O1xuICAgICAgcGFyZW50ID0gcGFyZW50LnBhcmVudE5vZGU7XG4gICAgICBhZnRlciA9IGZhbHNlO1xuICAgIH1cbiAgICBzdGVwcy5yZXZlcnNlKCk7XG4gICAgaWYgKHRoaXMuc3RlcHMpIHtcbiAgICAgIHN0ZXBzLnB1c2gobmV3IFJlZlN0ZXAoKSk7XG4gICAgICB0aGlzLnN0ZXBzID0gc3RlcHMuY29uY2F0KHRoaXMuc3RlcHMpO1xuICAgIH0gZWxzZSB7XG4gICAgICB0aGlzLnN0ZXBzID0gc3RlcHM7XG4gICAgfVxuICB9XG5cbiAgdG9TdHJpbmcoKTogc3RyaW5nIHtcbiAgICBpZiAoIXRoaXMuc3RlcHMpIHtcbiAgICAgIHJldHVybiBcIlwiO1xuICAgIH1cbiAgICBjb25zdCBzYiA9IG5ldyBCYXNlLlN0cmluZ0J1ZmZlcigpO1xuICAgIHNiLmFwcGVuZChcImVwdWJjZmkoXCIpO1xuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgdGhpcy5zdGVwcy5sZW5ndGg7IGkrKykge1xuICAgICAgdGhpcy5zdGVwc1tpXS5hcHBlbmRUbyhzYik7XG4gICAgfVxuICAgIHNiLmFwcGVuZChcIilcIik7XG4gICAgcmV0dXJuIHNiLnRvU3RyaW5nKCkucmVwbGFjZSgvJS9nLCBcIiUyNVwiKTtcbiAgfVxufVxuIiwiLyoqXG4gKiBDb3B5cmlnaHQgMjAxMyBHb29nbGUsIEluYy5cbiAqIENvcHlyaWdodCAyMDE1IFRyaW0tbWFya3MgSW5jLlxuICogQ29weXJpZ2h0IDIwMTkgVml2bGlvc3R5bGUgRm91bmRhdGlvblxuICpcbiAqIFZpdmxpb3N0eWxlLmpzIGlzIGZyZWUgc29mdHdhcmU6IHlvdSBjYW4gcmVkaXN0cmlidXRlIGl0IGFuZC9vciBtb2RpZnlcbiAqIGl0IHVuZGVyIHRoZSB0ZXJtcyBvZiB0aGUgR05VIEFmZmVybyBHZW5lcmFsIFB1YmxpYyBMaWNlbnNlIGFzIHB1Ymxpc2hlZCBieVxuICogdGhlIEZyZWUgU29mdHdhcmUgRm91bmRhdGlvbiwgZWl0aGVyIHZlcnNpb24gMyBvZiB0aGUgTGljZW5zZSwgb3JcbiAqIChhdCB5b3VyIG9wdGlvbikgYW55IGxhdGVyIHZlcnNpb24uXG4gKlxuICogVml2bGlvc3R5bGUuanMgaXMgZGlzdHJpYnV0ZWQgaW4gdGhlIGhvcGUgdGhhdCBpdCB3aWxsIGJlIHVzZWZ1bCxcbiAqIGJ1dCBXSVRIT1VUIEFOWSBXQVJSQU5UWTsgd2l0aG91dCBldmVuIHRoZSBpbXBsaWVkIHdhcnJhbnR5IG9mXG4gKiBNRVJDSEFOVEFCSUxJVFkgb3IgRklUTkVTUyBGT1IgQSBQQVJUSUNVTEFSIFBVUlBPU0UuICBTZWUgdGhlXG4gKiBHTlUgQWZmZXJvIEdlbmVyYWwgUHVibGljIExpY2Vuc2UgZm9yIG1vcmUgZGV0YWlscy5cbiAqXG4gKiBZb3Ugc2hvdWxkIGhhdmUgcmVjZWl2ZWQgYSBjb3B5IG9mIHRoZSBHTlUgQWZmZXJvIEdlbmVyYWwgUHVibGljIExpY2Vuc2VcbiAqIGFsb25nIHdpdGggVml2bGlvc3R5bGUuanMuICBJZiBub3QsIHNlZSA8aHR0cDovL3d3dy5nbnUub3JnL2xpY2Vuc2VzLz4uXG4gKlxuICogQGZpbGVvdmVydmlldyBFeHBycyAtIGAtZXB1YngtZXhwcmAgQWRhcHRpdmUgTGF5b3V0IGV4cHJlc3Npb25zLlxuICovXG5pbXBvcnQgKiBhcyBCYXNlIGZyb20gXCIuL2Jhc2VcIjtcblxuZXhwb3J0IHR5cGUgUHJlZmVyZW5jZXMgPSB7XG4gIGZvbnRGYW1pbHk6IHN0cmluZztcbiAgbGluZUhlaWdodDogbnVtYmVyO1xuICBtYXJnaW46IG51bWJlcjtcbiAgaHlwaGVuYXRlOiBib29sZWFuO1xuICBjb2x1bW5XaWR0aDogbnVtYmVyO1xuICBob3Jpem9udGFsOiBib29sZWFuO1xuICBuaWdodE1vZGU6IGJvb2xlYW47XG4gIHNwcmVhZFZpZXc6IGJvb2xlYW47XG4gIHBhZ2VCb3JkZXI6IG51bWJlcjtcbiAgZW5hYmxlZE1lZGlhVHlwZXM6IHsgW2tleTogc3RyaW5nXTogYm9vbGVhbiB9O1xuICBkZWZhdWx0UGFwZXJTaXplPzogeyBba2V5OiBzdHJpbmddOiBudW1iZXIgfTtcbn07XG5cbmV4cG9ydCBmdW5jdGlvbiBkZWZhdWx0UHJlZmVyZW5jZXMoKTogUHJlZmVyZW5jZXMge1xuICByZXR1cm4ge1xuICAgIGZvbnRGYW1pbHk6IFwic2VyaWZcIixcbiAgICBsaW5lSGVpZ2h0OiAxLjI1LFxuICAgIG1hcmdpbjogOCxcbiAgICBoeXBoZW5hdGU6IGZhbHNlLFxuICAgIGNvbHVtbldpZHRoOiAyNSxcbiAgICBob3Jpem9udGFsOiBmYWxzZSxcbiAgICBuaWdodE1vZGU6IGZhbHNlLFxuICAgIHNwcmVhZFZpZXc6IGZhbHNlLFxuICAgIHBhZ2VCb3JkZXI6IDEsXG4gICAgZW5hYmxlZE1lZGlhVHlwZXM6IHsgdml2bGlvc3R5bGU6IHRydWUsIHByaW50OiB0cnVlIH0sXG4gICAgZGVmYXVsdFBhcGVyU2l6ZTogdW5kZWZpbmVkLFxuICB9O1xufVxuXG5leHBvcnQgZnVuY3Rpb24gY2xvbmVQcmVmZXJlbmNlcyhwcmVmOiBQcmVmZXJlbmNlcyk6IFByZWZlcmVuY2VzIHtcbiAgcmV0dXJuIHtcbiAgICBmb250RmFtaWx5OiBwcmVmLmZvbnRGYW1pbHksXG4gICAgbGluZUhlaWdodDogcHJlZi5saW5lSGVpZ2h0LFxuICAgIG1hcmdpbjogcHJlZi5tYXJnaW4sXG4gICAgaHlwaGVuYXRlOiBwcmVmLmh5cGhlbmF0ZSxcbiAgICBjb2x1bW5XaWR0aDogcHJlZi5jb2x1bW5XaWR0aCxcbiAgICBob3Jpem9udGFsOiBwcmVmLmhvcml6b250YWwsXG4gICAgbmlnaHRNb2RlOiBwcmVmLm5pZ2h0TW9kZSxcbiAgICBzcHJlYWRWaWV3OiBwcmVmLnNwcmVhZFZpZXcsXG4gICAgcGFnZUJvcmRlcjogcHJlZi5wYWdlQm9yZGVyLFxuICAgIGVuYWJsZWRNZWRpYVR5cGVzOiBPYmplY3QuYXNzaWduKHt9LCBwcmVmLmVuYWJsZWRNZWRpYVR5cGVzKSxcbiAgICBkZWZhdWx0UGFwZXJTaXplOiBwcmVmLmRlZmF1bHRQYXBlclNpemVcbiAgICAgID8gT2JqZWN0LmFzc2lnbih7fSwgcHJlZi5kZWZhdWx0UGFwZXJTaXplKVxuICAgICAgOiB1bmRlZmluZWQsXG4gIH07XG59XG5cbmV4cG9ydCBjb25zdCBkZWZhdWx0UHJlZmVyZW5jZXNJbnN0YW5jZSA9IGRlZmF1bHRQcmVmZXJlbmNlcygpO1xuXG5pbnRlcmZhY2UgUGVuZGluZyB7fVxudHlwZSBTcGVjaWFsID0gUGVuZGluZztcblxuLyoqXG4gKiBTcGVjaWFsIG1hcmtlciB2YWx1ZSB0aGF0IGluZGljYXRlcyB0aGF0IHRoZSBleHByZXNzaW9uIHJlc3VsdCBpcyBiZWluZ1xuICogY2FsY3VsYXRlZC5cbiAqL1xuLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXJlZGVjbGFyZVxuZXhwb3J0IGNvbnN0IFNwZWNpYWwgPSB7XG4gIFBFTkRJTkc6IHt9IGFzIFBlbmRpbmcsXG59O1xuXG5leHBvcnQgdHlwZSBSZXN1bHQgPSBzdHJpbmcgfCBudW1iZXIgfCBib29sZWFuIHwgdW5kZWZpbmVkO1xuXG5leHBvcnQgdHlwZSBQZW5kaW5nUmVzdWx0ID0gU3BlY2lhbCB8IFJlc3VsdDtcblxuZXhwb3J0IGZ1bmN0aW9uIGxldHRlcmJveChcbiAgdmlld1c6IG51bWJlcixcbiAgdmlld0g6IG51bWJlcixcbiAgb2JqVzogbnVtYmVyLFxuICBvYmpIOiBudW1iZXIsXG4pOiBzdHJpbmcge1xuICBjb25zdCBzY2FsZSA9IE1hdGgubWluKCh2aWV3VyAtIDApIC8gb2JqVywgKHZpZXdIIC0gMCkgLyBvYmpIKTtcbiAgcmV0dXJuIGBtYXRyaXgoJHtzY2FsZX0sMCwwLCR7c2NhbGV9LDAsMClgO1xufVxuXG4vKipcbiAqIEByZXR1cm4gc3RyaW5nIHRoYXQgY2FuIGJlIHBhcnNlZCBhcyBDU1Mgc3RyaW5nIHdpdGggdmFsdWUgc3RyXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBjc3NTdHJpbmcoc3RyOiBzdHJpbmcpOiBzdHJpbmcge1xuICByZXR1cm4gYFwiJHtCYXNlLmVzY2FwZUNTU1N0cihgJHtzdHJ9YCl9XCJgO1xufVxuXG4vKipcbiAqIEByZXR1cm4gc3RyaW5nIHRoYXQgY2FuIGJlIHBhcnNlZCBhcyBDU1MgbmFtZVxuICovXG5leHBvcnQgZnVuY3Rpb24gY3NzSWRlbnQobmFtZTogc3RyaW5nKTogc3RyaW5nIHtcbiAgcmV0dXJuIEJhc2UuZXNjYXBlQ1NTSWRlbnQoYCR7bmFtZX1gKTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIG1ha2VRdWFsaWZpZWROYW1lKFxuICBvYmpOYW1lOiBzdHJpbmcgfCBudWxsLFxuICBtZW1iZXJOYW1lOiBzdHJpbmcsXG4pOiBzdHJpbmcge1xuICBpZiAob2JqTmFtZSkge1xuICAgIHJldHVybiBgJHtCYXNlLmVzY2FwZUNTU0lkZW50KG9iak5hbWUpfS4ke0Jhc2UuZXNjYXBlQ1NTSWRlbnQobWVtYmVyTmFtZSl9YDtcbiAgfVxuICByZXR1cm4gQmFzZS5lc2NhcGVDU1NJZGVudChtZW1iZXJOYW1lKTtcbn1cblxuZXhwb3J0IGxldCBuZXh0S2V5SW5kZXg6IG51bWJlciA9IDA7XG5cbi8qKlxuICogTGV4aWNhbCBzY29wZSBvZiB0aGUgZXhwcmVzc2lvbi5cbiAqL1xuZXhwb3J0IGNsYXNzIExleGljYWxTY29wZSB7XG4gIHNjb3BlS2V5OiBzdHJpbmc7XG4gIGNoaWxkcmVuOiBMZXhpY2FsU2NvcGVbXSA9IFtdO1xuICB6ZXJvOiBDb25zdDtcbiAgb25lOiBDb25zdDtcbiAgX3RydWU6IENvbnN0O1xuICBfZmFsc2U6IENvbnN0O1xuICB2YWx1ZXM6IHsgW2tleTogc3RyaW5nXTogVmFsIH0gPSB7fTtcbiAgZnVuY3M6IHsgW2tleTogc3RyaW5nXTogVmFsIH0gPSB7fTtcbiAgYnVpbHRJbnM6IHsgW2tleTogc3RyaW5nXTogKC4uLnAxOiBSZXN1bHRbXSkgPT4gUmVzdWx0IH0gPSB7fTtcblxuICBjb25zdHJ1Y3RvcihcbiAgICBwdWJsaWMgcGFyZW50OiBMZXhpY2FsU2NvcGUsXG4gICAgcHVibGljIHJlc29sdmVyPzogKHAxOiBzdHJpbmcsIHAyOiBib29sZWFuKSA9PiBWYWwsXG4gICkge1xuICAgIHRoaXMuc2NvcGVLZXkgPSBgUyR7bmV4dEtleUluZGV4Kyt9YDtcbiAgICB0aGlzLnplcm8gPSBuZXcgQ29uc3QodGhpcywgMCk7XG4gICAgdGhpcy5vbmUgPSBuZXcgQ29uc3QodGhpcywgMSk7XG4gICAgdGhpcy5fdHJ1ZSA9IG5ldyBDb25zdCh0aGlzLCB0cnVlKTtcbiAgICB0aGlzLl9mYWxzZSA9IG5ldyBDb25zdCh0aGlzLCBmYWxzZSk7XG4gICAgaWYgKHBhcmVudCkge1xuICAgICAgcGFyZW50LmNoaWxkcmVuLnB1c2godGhpcyk7XG4gICAgfVxuICAgIGlmICghcGFyZW50KSB7XG4gICAgICAvLyByb290IHNjb3BlXG4gICAgICBjb25zdCBidWlsdElucyA9IHRoaXMuYnVpbHRJbnM7XG4gICAgICBidWlsdEluc1tcImZsb29yXCJdID0gTWF0aC5mbG9vcjtcbiAgICAgIGJ1aWx0SW5zW1wiY2VpbFwiXSA9IE1hdGguY2VpbDtcbiAgICAgIGJ1aWx0SW5zW1wicm91bmRcIl0gPSBNYXRoLnJvdW5kO1xuICAgICAgYnVpbHRJbnNbXCJzcXJ0XCJdID0gTWF0aC5zcXJ0O1xuICAgICAgYnVpbHRJbnNbXCJtaW5cIl0gPSBNYXRoLm1pbjtcbiAgICAgIGJ1aWx0SW5zW1wibWF4XCJdID0gTWF0aC5tYXg7XG4gICAgICBidWlsdEluc1tcImxldHRlcmJveFwiXSA9IGxldHRlcmJveDtcbiAgICAgIGJ1aWx0SW5zW1wiY3NzLXN0cmluZ1wiXSA9IGNzc1N0cmluZztcbiAgICAgIGJ1aWx0SW5zW1wiY3NzLW5hbWVcIl0gPSBjc3NJZGVudDtcbiAgICAgIGJ1aWx0SW5zW1widHlwZW9mXCJdID0gKHgpID0+IHR5cGVvZiB4O1xuICAgICAgdGhpcy5kZWZpbmVCdWlsdEluTmFtZShcInBhZ2Utd2lkdGhcIiwgZnVuY3Rpb24gKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5wYWdlV2lkdGgoKTtcbiAgICAgIH0pO1xuICAgICAgdGhpcy5kZWZpbmVCdWlsdEluTmFtZShcInBhZ2UtaGVpZ2h0XCIsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMucGFnZUhlaWdodCgpO1xuICAgICAgfSk7XG4gICAgICB0aGlzLmRlZmluZUJ1aWx0SW5OYW1lKFwicHJlZi1mb250LWZhbWlseVwiLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLnByZWYuZm9udEZhbWlseTtcbiAgICAgIH0pO1xuICAgICAgdGhpcy5kZWZpbmVCdWlsdEluTmFtZShcInByZWYtbmlnaHQtbW9kZVwiLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLnByZWYubmlnaHRNb2RlO1xuICAgICAgfSk7XG4gICAgICB0aGlzLmRlZmluZUJ1aWx0SW5OYW1lKFwicHJlZi1oeXBoZW5hdGVcIiwgZnVuY3Rpb24gKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5wcmVmLmh5cGhlbmF0ZTtcbiAgICAgIH0pO1xuICAgICAgdGhpcy5kZWZpbmVCdWlsdEluTmFtZShcInByZWYtbWFyZ2luXCIsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMucHJlZi5tYXJnaW47XG4gICAgICB9KTtcbiAgICAgIHRoaXMuZGVmaW5lQnVpbHRJbk5hbWUoXCJwcmVmLWxpbmUtaGVpZ2h0XCIsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMucHJlZi5saW5lSGVpZ2h0O1xuICAgICAgfSk7XG4gICAgICB0aGlzLmRlZmluZUJ1aWx0SW5OYW1lKFwicHJlZi1jb2x1bW4td2lkdGhcIiwgZnVuY3Rpb24gKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5wcmVmLmNvbHVtbldpZHRoICogdGhpcy5mb250U2l6ZTtcbiAgICAgIH0pO1xuICAgICAgdGhpcy5kZWZpbmVCdWlsdEluTmFtZShcInByZWYtaG9yaXpvbnRhbFwiLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLnByZWYuaG9yaXpvbnRhbDtcbiAgICAgIH0pO1xuICAgICAgdGhpcy5kZWZpbmVCdWlsdEluTmFtZShcInByZWYtc3ByZWFkLXZpZXdcIiwgZnVuY3Rpb24gKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5wcmVmLnNwcmVhZFZpZXc7XG4gICAgICB9KTtcblxuICAgICAgLy8gRm9yIGVudihwdWItdGl0bGUpIGFuZCBlbnYoZG9jLXRpdGxlKVxuICAgICAgdGhpcy5kZWZpbmVCdWlsdEluTmFtZShcInB1Yi10aXRsZVwiLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiBjc3NTdHJpbmcodGhpcy5wdWJUaXRsZSA/IHRoaXMucHViVGl0bGUgOiBcIlwiKTtcbiAgICAgIH0pO1xuICAgICAgdGhpcy5kZWZpbmVCdWlsdEluTmFtZShcImRvYy10aXRsZVwiLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiBjc3NTdHJpbmcodGhpcy5kb2NUaXRsZSA/IHRoaXMuZG9jVGl0bGUgOiBcIlwiKTtcbiAgICAgIH0pO1xuICAgIH1cbiAgfVxuXG4gIGRlZmluZUJ1aWx0SW5OYW1lKG5hbWU6IHN0cmluZywgZm46ICgpID0+IFJlc3VsdCkge1xuICAgIHRoaXMudmFsdWVzW25hbWVdID0gbmV3IE5hdGl2ZSh0aGlzLCBmbiwgbmFtZSk7XG4gIH1cblxuICBkZWZpbmVOYW1lKHF1YWxpZmllZE5hbWU6IHN0cmluZywgdmFsOiBWYWwpOiB2b2lkIHtcbiAgICB0aGlzLnZhbHVlc1txdWFsaWZpZWROYW1lXSA9IHZhbDtcbiAgfVxuXG4gIGRlZmluZUZ1bmMocXVhbGlmaWVkTmFtZTogc3RyaW5nLCB2YWw6IFZhbCk6IHZvaWQge1xuICAgIHRoaXMuZnVuY3NbcXVhbGlmaWVkTmFtZV0gPSB2YWw7XG4gIH1cblxuICBkZWZpbmVCdWlsdEluKHF1YWxpZmllZE5hbWU6IHN0cmluZywgZm46ICguLi5wMTogUmVzdWx0W10pID0+IFJlc3VsdCk6IHZvaWQge1xuICAgIHRoaXMuYnVpbHRJbnNbcXVhbGlmaWVkTmFtZV0gPSBmbjtcbiAgfVxufVxuXG5leHBvcnQgZnVuY3Rpb24gaXNBYnNvbHV0ZUxlbmd0aFVuaXQodW5pdDogc3RyaW5nKTogYm9vbGVhbiB7XG4gIHN3aXRjaCAodW5pdC50b0xvd2VyQ2FzZSgpKSB7XG4gICAgY2FzZSBcInB4XCI6XG4gICAgY2FzZSBcImluXCI6XG4gICAgY2FzZSBcInB0XCI6XG4gICAgY2FzZSBcInBjXCI6XG4gICAgY2FzZSBcImNtXCI6XG4gICAgY2FzZSBcIm1tXCI6XG4gICAgY2FzZSBcInFcIjpcbiAgICAgIHJldHVybiB0cnVlO1xuICAgIGRlZmF1bHQ6XG4gICAgICByZXR1cm4gZmFsc2U7XG4gIH1cbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGlzVmlld3BvcnRSZWxhdGl2ZUxlbmd0aFVuaXQodW5pdDogc3RyaW5nKTogYm9vbGVhbiB7XG4gIHN3aXRjaCAodW5pdC50b0xvd2VyQ2FzZSgpKSB7XG4gICAgY2FzZSBcInZ3XCI6XG4gICAgY2FzZSBcInZoXCI6XG4gICAgY2FzZSBcInZpXCI6XG4gICAgY2FzZSBcInZiXCI6XG4gICAgY2FzZSBcInZtaW5cIjpcbiAgICBjYXNlIFwidm1heFwiOlxuICAgIGNhc2UgXCJwdndcIjpcbiAgICBjYXNlIFwicHZoXCI6XG4gICAgY2FzZSBcInB2aVwiOlxuICAgIGNhc2UgXCJwdmJcIjpcbiAgICBjYXNlIFwicHZtaW5cIjpcbiAgICBjYXNlIFwicHZtYXhcIjpcbiAgICAgIHJldHVybiB0cnVlO1xuICAgIGRlZmF1bHQ6XG4gICAgICByZXR1cm4gZmFsc2U7XG4gIH1cbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGlzRm9udFJlbGF0aXZlTGVuZ3RoVW5pdCh1bml0OiBzdHJpbmcpOiBib29sZWFuIHtcbiAgc3dpdGNoICh1bml0LnRvTG93ZXJDYXNlKCkpIHtcbiAgICBjYXNlIFwiZW1cIjpcbiAgICBjYXNlIFwiZXhcIjpcbiAgICBjYXNlIFwicmVtXCI6XG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICBkZWZhdWx0OlxuICAgICAgcmV0dXJuIGZhbHNlO1xuICB9XG59XG5cbmV4cG9ydCBjb25zdCBkZWZhdWx0VW5pdFNpemVzOiB7IFtrZXk6IHN0cmluZ106IG51bWJlciB9ID0ge1xuICBweDogMSxcbiAgaW46IDk2LFxuICBwdDogNCAvIDMsXG4gIHBjOiA5NiAvIDYsXG4gIGNtOiA5NiAvIDIuNTQsXG4gIG1tOiA5NiAvIDI1LjQsXG4gIHE6IDk2IC8gMi41NCAvIDQwLFxuICBlbTogMTYsXG4gIHJlbTogMTYsXG4gIGV4OiA4LFxuICAvLyA8cmVzb2x1dGlvbj5cbiAgZHBweDogMSxcbiAgZHBpOiAxIC8gOTYsXG4gIGRwY206IDIuNTQgLyA5Nixcbn07XG5cbi8qKlxuICogUmV0dXJucyBpZiBhIHVuaXQgc2hvdWxkIGJlIGNvbnZlcnRlZCB0byBweCBiZWZvcmUgYXBwbGllZCB0byB0aGUgcmF3IERPTS5cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIG5lZWRVbml0Q29udmVyc2lvbih1bml0OiBzdHJpbmcpOiBib29sZWFuIHtcbiAgc3dpdGNoICh1bml0KSB7XG4gICAgY2FzZSBcInFcIjpcbiAgICBjYXNlIFwicmVtXCI6XG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICBkZWZhdWx0OlxuICAgICAgcmV0dXJuIGZhbHNlO1xuICB9XG59XG5cbmV4cG9ydCB0eXBlIFNjb3BlQ29udGV4dCA9IHtcbiAgW2tleTogc3RyaW5nXTogUmVzdWx0O1xufTtcblxuLyoqXG4gKiBSdW4tdGltZSBpbnN0YW5jZSBvZiBhIHNjb3BlIGFuZCBpdHMgY2hpbGRyZW4uXG4gKi9cbmV4cG9ydCBjbGFzcyBDb250ZXh0IHtcbiAgcHJvdGVjdGVkIGFjdHVhbFBhZ2VXaWR0aDogbnVtYmVyIHwgbnVsbCA9IG51bGw7XG4gIHBhZ2VXaWR0aDogKCkgPT4gbnVtYmVyO1xuICBwcm90ZWN0ZWQgYWN0dWFsUGFnZUhlaWdodDogbnVtYmVyIHwgbnVsbCA9IG51bGw7XG4gIHBhZ2VIZWlnaHQ6ICgpID0+IG51bWJlcjtcbiAgaW5pdGlhbEZvbnRTaXplOiBudW1iZXI7XG4gIHJvb3RGb250U2l6ZTogbnVtYmVyIHwgbnVsbCA9IG51bGw7XG4gIGZvbnRTaXplOiAoKSA9PiBudW1iZXI7XG4gIHByZWY6IFByZWZlcmVuY2VzO1xuICBzY29wZXM6IHsgW2tleTogc3RyaW5nXTogU2NvcGVDb250ZXh0IH0gPSB7fTtcbiAgcGFnZUFyZWFXaWR0aDogbnVtYmVyIHwgbnVsbCA9IG51bGw7XG4gIHBhZ2VBcmVhSGVpZ2h0OiBudW1iZXIgfCBudWxsID0gbnVsbDtcbiAgcGFnZVZlcnRpY2FsOiBib29sZWFuIHwgbnVsbCA9IG51bGw7XG4gIHB1YlRpdGxlOiBzdHJpbmcgfCBudWxsID0gbnVsbDtcbiAgZG9jVGl0bGU6IHN0cmluZyB8IG51bGwgPSBudWxsO1xuXG4gIGNvbnN0cnVjdG9yKFxuICAgIHB1YmxpYyByZWFkb25seSByb290U2NvcGU6IExleGljYWxTY29wZSxcbiAgICBwdWJsaWMgcmVhZG9ubHkgdmlld3BvcnRXaWR0aDogbnVtYmVyLFxuICAgIHB1YmxpYyByZWFkb25seSB2aWV3cG9ydEhlaWdodDogbnVtYmVyLFxuICAgIGZvbnRTaXplOiBudW1iZXIsXG4gICkge1xuICAgIHRoaXMucGFnZVdpZHRoID0gZnVuY3Rpb24gKCkge1xuICAgICAgaWYgKHRoaXMuYWN0dWFsUGFnZVdpZHRoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmFjdHVhbFBhZ2VXaWR0aDtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHJldHVybiB0aGlzLnByZWYuc3ByZWFkVmlld1xuICAgICAgICAgID8gTWF0aC5mbG9vcih2aWV3cG9ydFdpZHRoIC8gMikgLSB0aGlzLnByZWYucGFnZUJvcmRlclxuICAgICAgICAgIDogdmlld3BvcnRXaWR0aDtcbiAgICAgIH1cbiAgICB9O1xuICAgIHRoaXMucGFnZUhlaWdodCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgIGlmICh0aGlzLmFjdHVhbFBhZ2VIZWlnaHQpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuYWN0dWFsUGFnZUhlaWdodDtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHJldHVybiB2aWV3cG9ydEhlaWdodDtcbiAgICAgIH1cbiAgICB9O1xuICAgIHRoaXMuaW5pdGlhbEZvbnRTaXplID0gZm9udFNpemU7XG4gICAgdGhpcy5mb250U2l6ZSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgIGlmICh0aGlzLnJvb3RGb250U2l6ZSkge1xuICAgICAgICByZXR1cm4gdGhpcy5yb290Rm9udFNpemU7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICByZXR1cm4gZm9udFNpemU7XG4gICAgICB9XG4gICAgfTtcbiAgICB0aGlzLnByZWYgPSBkZWZhdWx0UHJlZmVyZW5jZXNJbnN0YW5jZTtcbiAgfVxuXG4gIHByaXZhdGUgZ2V0U2NvcGVDb250ZXh0KHNjb3BlOiBMZXhpY2FsU2NvcGUpOiBTY29wZUNvbnRleHQge1xuICAgIGxldCBzID0gdGhpcy5zY29wZXNbc2NvcGUuc2NvcGVLZXldO1xuICAgIGlmICghcykge1xuICAgICAgcyA9IHt9O1xuICAgICAgdGhpcy5zY29wZXNbc2NvcGUuc2NvcGVLZXldID0gcztcbiAgICB9XG4gICAgcmV0dXJuIHM7XG4gIH1cblxuICBjbGVhclNjb3BlKHNjb3BlOiBMZXhpY2FsU2NvcGUpOiB2b2lkIHtcbiAgICB0aGlzLnNjb3Blc1tzY29wZS5zY29wZUtleV0gPSB7fTtcbiAgICBmb3IgKGxldCBrID0gMDsgayA8IHNjb3BlLmNoaWxkcmVuLmxlbmd0aDsgaysrKSB7XG4gICAgICB0aGlzLmNsZWFyU2NvcGUoc2NvcGUuY2hpbGRyZW5ba10pO1xuICAgIH1cbiAgfVxuXG4gIHF1ZXJ5VW5pdFNpemUodW5pdDogc3RyaW5nLCBpc1Jvb3Q6IGJvb2xlYW4pOiBudW1iZXIge1xuICAgIGlmIChpc1ZpZXdwb3J0UmVsYXRpdmVMZW5ndGhVbml0KHVuaXQpKSB7XG4gICAgICBjb25zdCBwdncgPSB0aGlzLnBhZ2VXaWR0aCgpIC8gMTAwO1xuICAgICAgY29uc3QgcHZoID0gdGhpcy5wYWdlSGVpZ2h0KCkgLyAxMDA7XG4gICAgICBjb25zdCB2dyA9IHRoaXMucGFnZUFyZWFXaWR0aCAhPSBudWxsID8gdGhpcy5wYWdlQXJlYVdpZHRoIC8gMTAwIDogcHZ3O1xuICAgICAgY29uc3QgdmggPSB0aGlzLnBhZ2VBcmVhSGVpZ2h0ICE9IG51bGwgPyB0aGlzLnBhZ2VBcmVhSGVpZ2h0IC8gMTAwIDogcHZoO1xuXG4gICAgICBzd2l0Y2ggKHVuaXQpIHtcbiAgICAgICAgY2FzZSBcInZ3XCI6XG4gICAgICAgICAgcmV0dXJuIHZ3O1xuICAgICAgICBjYXNlIFwidmhcIjpcbiAgICAgICAgICByZXR1cm4gdmg7XG4gICAgICAgIGNhc2UgXCJ2aVwiOlxuICAgICAgICAgIHJldHVybiB0aGlzLnBhZ2VWZXJ0aWNhbCA/IHZoIDogdnc7XG4gICAgICAgIGNhc2UgXCJ2YlwiOlxuICAgICAgICAgIHJldHVybiB0aGlzLnBhZ2VWZXJ0aWNhbCA/IHZ3IDogdmg7XG4gICAgICAgIGNhc2UgXCJ2bWluXCI6XG4gICAgICAgICAgcmV0dXJuIHZ3IDwgdmggPyB2dyA6IHZoO1xuICAgICAgICBjYXNlIFwidm1heFwiOlxuICAgICAgICAgIHJldHVybiB2dyA+IHZoID8gdncgOiB2aDtcbiAgICAgICAgY2FzZSBcInB2d1wiOlxuICAgICAgICAgIHJldHVybiBwdnc7XG4gICAgICAgIGNhc2UgXCJwdmhcIjpcbiAgICAgICAgICByZXR1cm4gcHZoO1xuICAgICAgICBjYXNlIFwicHZpXCI6XG4gICAgICAgICAgcmV0dXJuIHRoaXMucGFnZVZlcnRpY2FsID8gcHZoIDogcHZ3O1xuICAgICAgICBjYXNlIFwicHZiXCI6XG4gICAgICAgICAgcmV0dXJuIHRoaXMucGFnZVZlcnRpY2FsID8gcHZ3IDogcHZoO1xuICAgICAgICBjYXNlIFwicHZtaW5cIjpcbiAgICAgICAgICByZXR1cm4gcHZ3IDwgcHZoID8gcHZ3IDogcHZoO1xuICAgICAgICBjYXNlIFwicHZtYXhcIjpcbiAgICAgICAgICByZXR1cm4gcHZ3ID4gcHZoID8gcHZ3IDogcHZoO1xuICAgICAgfVxuICAgIH1cbiAgICBpZiAodW5pdCA9PSBcImVtXCIgfHwgdW5pdCA9PSBcInJlbVwiKSB7XG4gICAgICByZXR1cm4gaXNSb290ID8gdGhpcy5pbml0aWFsRm9udFNpemUgOiB0aGlzLmZvbnRTaXplKCk7XG4gICAgfVxuICAgIGlmICh1bml0ID09IFwiZXhcIikge1xuICAgICAgcmV0dXJuIChcbiAgICAgICAgKGRlZmF1bHRVbml0U2l6ZXNbXCJleFwiXSAqXG4gICAgICAgICAgKGlzUm9vdCA/IHRoaXMuaW5pdGlhbEZvbnRTaXplIDogdGhpcy5mb250U2l6ZSgpKSkgL1xuICAgICAgICBkZWZhdWx0VW5pdFNpemVzW1wiZW1cIl1cbiAgICAgICk7XG4gICAgfVxuICAgIHJldHVybiBkZWZhdWx0VW5pdFNpemVzW3VuaXRdO1xuICB9XG5cbiAgZXZhbE5hbWUoc2NvcGU6IExleGljYWxTY29wZSwgcXVhbGlmaWVkTmFtZTogc3RyaW5nKTogVmFsIHtcbiAgICBkbyB7XG4gICAgICBsZXQgdmFsID0gc2NvcGUudmFsdWVzW3F1YWxpZmllZE5hbWVdO1xuICAgICAgaWYgKHZhbCkge1xuICAgICAgICByZXR1cm4gdmFsO1xuICAgICAgfVxuICAgICAgaWYgKHNjb3BlLnJlc29sdmVyKSB7XG4gICAgICAgIHZhbCA9IHNjb3BlLnJlc29sdmVyLmNhbGwodGhpcywgcXVhbGlmaWVkTmFtZSwgZmFsc2UpO1xuICAgICAgICBpZiAodmFsKSB7XG4gICAgICAgICAgcmV0dXJuIHZhbDtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgc2NvcGUgPSBzY29wZS5wYXJlbnQ7XG4gICAgfSB3aGlsZSAoc2NvcGUpO1xuICAgIHRocm93IG5ldyBFcnJvcihgTmFtZSAnJHtxdWFsaWZpZWROYW1lfScgaXMgdW5kZWZpbmVkYCk7XG4gIH1cblxuICAvKipcbiAgICogQHBhcmFtIG5vQnVpbHRJbkV2YWwgZG9uJ3QgZXZhbHVhdGUgYnVpbHQtaW5zIChmb3IgZGVwZW5kZW5jeSBjYWxjdWxhdGlvbnMpXG4gICAqL1xuICBldmFsQ2FsbChcbiAgICBzY29wZTogTGV4aWNhbFNjb3BlLFxuICAgIHF1YWxpZmllZE5hbWU6IHN0cmluZyxcbiAgICBwYXJhbXM6IFZhbFtdLFxuICAgIG5vQnVpbHRJbkV2YWw6IGJvb2xlYW4sXG4gICk6IFZhbCB7XG4gICAgZG8ge1xuICAgICAgbGV0IGJvZHkgPSBzY29wZS5mdW5jc1txdWFsaWZpZWROYW1lXTtcbiAgICAgIGlmIChib2R5KSB7XG4gICAgICAgIHJldHVybiBib2R5OyAvLyB3aWxsIGJlIGV4cGFuZGVkIGJ5IGNhbGxlZVxuICAgICAgfVxuICAgICAgaWYgKHNjb3BlLnJlc29sdmVyKSB7XG4gICAgICAgIGJvZHkgPSBzY29wZS5yZXNvbHZlci5jYWxsKHRoaXMsIHF1YWxpZmllZE5hbWUsIHRydWUpO1xuICAgICAgICBpZiAoYm9keSkge1xuICAgICAgICAgIHJldHVybiBib2R5O1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICBjb25zdCBmbiA9IHNjb3BlLmJ1aWx0SW5zW3F1YWxpZmllZE5hbWVdO1xuICAgICAgaWYgKGZuKSB7XG4gICAgICAgIGlmIChub0J1aWx0SW5FdmFsKSB7XG4gICAgICAgICAgcmV0dXJuIHNjb3BlLnplcm87XG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgYXJncyA9IEFycmF5KHBhcmFtcy5sZW5ndGgpO1xuICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IHBhcmFtcy5sZW5ndGg7IGkrKykge1xuICAgICAgICAgIGFyZ3NbaV0gPSBwYXJhbXNbaV0uZXZhbHVhdGUodGhpcyk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIG5ldyBDb25zdChzY29wZSwgZm4uYXBwbHkodGhpcywgYXJncykpO1xuICAgICAgfVxuICAgICAgc2NvcGUgPSBzY29wZS5wYXJlbnQ7XG4gICAgfSB3aGlsZSAoc2NvcGUpO1xuICAgIHRocm93IG5ldyBFcnJvcihgRnVuY3Rpb24gJyR7cXVhbGlmaWVkTmFtZX0nIGlzIHVuZGVmaW5lZGApO1xuICB9XG5cbiAgZXZhbE1lZGlhTmFtZShuYW1lOiBzdHJpbmcsIG5vdDogYm9vbGVhbik6IGJvb2xlYW4ge1xuICAgIGNvbnN0IGVuYWJsZWQgPSBuYW1lID09PSBcImFsbFwiIHx8ICEhdGhpcy5wcmVmLmVuYWJsZWRNZWRpYVR5cGVzW25hbWVdO1xuICAgIHJldHVybiBub3QgPyAhZW5hYmxlZCA6IGVuYWJsZWQ7XG4gIH1cblxuICBldmFsTWVkaWFUZXN0KGZlYXR1cmU6IHN0cmluZywgdmFsdWU6IFZhbCk6IGJvb2xlYW4ge1xuICAgIGxldCBwcmVmaXggPSBcIlwiO1xuICAgIGNvbnN0IHIgPSBmZWF0dXJlLm1hdGNoKC9eKG1pbnxtYXgpLSguKikkLyk7XG4gICAgaWYgKHIpIHtcbiAgICAgIHByZWZpeCA9IHJbMV07XG4gICAgICBmZWF0dXJlID0gclsyXTtcbiAgICB9XG4gICAgbGV0IHJlcTogUmVzdWx0IHwgbnVsbCA9IG51bGw7XG4gICAgbGV0IGFjdHVhbDogbnVtYmVyIHwgbnVsbCA9IG51bGw7XG4gICAgc3dpdGNoIChmZWF0dXJlKSB7XG4gICAgICBjYXNlIFwid2lkdGhcIjpcbiAgICAgIGNhc2UgXCJoZWlnaHRcIjpcbiAgICAgIGNhc2UgXCJkZXZpY2Utd2lkdGhcIjpcbiAgICAgIGNhc2UgXCJkZXZpY2UtaGVpZ2h0XCI6XG4gICAgICBjYXNlIFwiY29sb3JcIjpcbiAgICAgICAgaWYgKHZhbHVlKSB7XG4gICAgICAgICAgcmVxID0gdmFsdWUuZXZhbHVhdGUodGhpcyk7XG4gICAgICAgIH1cbiAgICAgICAgYnJlYWs7XG4gICAgfVxuICAgIHN3aXRjaCAoZmVhdHVyZSkge1xuICAgICAgY2FzZSBcIndpZHRoXCI6XG4gICAgICAgIGFjdHVhbCA9IHRoaXMucGFnZVdpZHRoKCk7XG4gICAgICAgIGJyZWFrO1xuICAgICAgY2FzZSBcImhlaWdodFwiOlxuICAgICAgICBhY3R1YWwgPSB0aGlzLnBhZ2VIZWlnaHQoKTtcbiAgICAgICAgYnJlYWs7XG4gICAgICBjYXNlIFwiZGV2aWNlLXdpZHRoXCI6XG4gICAgICAgIGFjdHVhbCA9IHdpbmRvdy5zY3JlZW4uYXZhaWxXaWR0aDtcbiAgICAgICAgYnJlYWs7XG4gICAgICBjYXNlIFwiZGV2aWNlLWhlaWdodFwiOlxuICAgICAgICBhY3R1YWwgPSB3aW5kb3cuc2NyZWVuLmF2YWlsSGVpZ2h0O1xuICAgICAgICBicmVhaztcbiAgICAgIGNhc2UgXCJjb2xvclwiOlxuICAgICAgICBhY3R1YWwgPSB3aW5kb3cuc2NyZWVuLnBpeGVsRGVwdGg7XG4gICAgICAgIGJyZWFrO1xuICAgIH1cbiAgICBpZiAoYWN0dWFsICE9IG51bGwgJiYgcmVxICE9IG51bGwpIHtcbiAgICAgIHN3aXRjaCAocHJlZml4KSB7XG4gICAgICAgIGNhc2UgXCJtaW5cIjpcbiAgICAgICAgICByZXR1cm4gYWN0dWFsID49IHJlcTtcbiAgICAgICAgY2FzZSBcIm1heFwiOlxuICAgICAgICAgIHJldHVybiBhY3R1YWwgPD0gcmVxO1xuICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgIHJldHVybiBhY3R1YWwgPT0gcmVxO1xuICAgICAgfVxuICAgIH0gZWxzZSBpZiAoYWN0dWFsICE9IG51bGwgJiYgdmFsdWUgPT0gbnVsbCkge1xuICAgICAgcmV0dXJuIGFjdHVhbCAhPT0gMDtcbiAgICB9XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG5cbiAgcXVlcnlWYWwoc2NvcGU6IExleGljYWxTY29wZSwga2V5OiBzdHJpbmcpOiBSZXN1bHQgfCB1bmRlZmluZWQge1xuICAgIGNvbnN0IHMgPSB0aGlzLnNjb3Blc1tzY29wZS5zY29wZUtleV07XG4gICAgcmV0dXJuIHMgPyBzW2tleV0gOiB1bmRlZmluZWQ7XG4gIH1cblxuICBzdG9yZVZhbChzY29wZTogTGV4aWNhbFNjb3BlLCBrZXk6IHN0cmluZywgdmFsOiBSZXN1bHQpOiB2b2lkIHtcbiAgICB0aGlzLmdldFNjb3BlQ29udGV4dChzY29wZSlba2V5XSA9IHZhbDtcbiAgfVxufVxuXG4vLy0tLS0tLS0tLS0gbmFtZSByZXNvbHV0aW9uIC0tLS0tLS0tLS0tLS0tXG5leHBvcnQgdHlwZSBEZXBlbmRlbmN5Q2FjaGUgPSB7XG4gIFtrZXk6IHN0cmluZ106IGJvb2xlYW4gfCBTcGVjaWFsO1xufTtcblxuZXhwb3J0IGNsYXNzIFZhbCB7XG4gIGtleTogc3RyaW5nO1xuXG4gIGNvbnN0cnVjdG9yKHB1YmxpYyBzY29wZTogTGV4aWNhbFNjb3BlKSB7XG4gICAgdGhpcy5zY29wZSA9IHNjb3BlO1xuICAgIHRoaXMua2V5ID0gYF8ke25leHRLZXlJbmRleCsrfWA7XG4gIH1cblxuICAvKipcbiAgICogQG92ZXJyaWRlXG4gICAqL1xuICB0b1N0cmluZygpOiBzdHJpbmcge1xuICAgIGNvbnN0IGJ1ZiA9IG5ldyBCYXNlLlN0cmluZ0J1ZmZlcigpO1xuICAgIHRoaXMuYXBwZW5kVG8oYnVmLCAwKTtcbiAgICByZXR1cm4gYnVmLnRvU3RyaW5nKCk7XG4gIH1cblxuICBhcHBlbmRUbyhidWY6IEJhc2UuU3RyaW5nQnVmZmVyLCBwcmlvcml0eTogbnVtYmVyKTogdm9pZCB7XG4gICAgdGhyb3cgbmV3IEVycm9yKFwiRl9BQlNUUkFDVFwiKTtcbiAgfVxuXG4gIHByb3RlY3RlZCBldmFsdWF0ZUNvcmUoY29udGV4dDogQ29udGV4dCk6IFJlc3VsdCB7XG4gICAgdGhyb3cgbmV3IEVycm9yKFwiRl9BQlNUUkFDVFwiKTtcbiAgfVxuXG4gIGV4cGFuZChjb250ZXh0OiBDb250ZXh0LCBwYXJhbXM6IFZhbFtdKTogVmFsIHtcbiAgICByZXR1cm4gdGhpcztcbiAgfVxuXG4gIGRlcGVuZENvcmUoXG4gICAgb3RoZXI6IFZhbCxcbiAgICBjb250ZXh0OiBDb250ZXh0LFxuICAgIGRlcGVuZGVuY3lDYWNoZTogRGVwZW5kZW5jeUNhY2hlLFxuICApOiBib29sZWFuIHtcbiAgICByZXR1cm4gb3RoZXIgPT09IHRoaXM7XG4gIH1cblxuICBkZXBlbmRPdXRlcihcbiAgICBvdGhlcjogVmFsLFxuICAgIGNvbnRleHQ6IENvbnRleHQsXG4gICAgZGVwZW5kZW5jeUNhY2hlOiBEZXBlbmRlbmN5Q2FjaGUsXG4gICk6IGJvb2xlYW4ge1xuICAgIGNvbnN0IGNhY2hlZCA9IGRlcGVuZGVuY3lDYWNoZVt0aGlzLmtleV07XG4gICAgaWYgKGNhY2hlZCAhPSBudWxsKSB7XG4gICAgICBpZiAoY2FjaGVkID09PSBTcGVjaWFsLlBFTkRJTkcpIHtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgfVxuICAgICAgcmV0dXJuIGNhY2hlZCBhcyBib29sZWFuO1xuICAgIH0gZWxzZSB7XG4gICAgICBkZXBlbmRlbmN5Q2FjaGVbdGhpcy5rZXldID0gU3BlY2lhbC5QRU5ESU5HO1xuICAgICAgY29uc3QgcmVzdWx0ID0gdGhpcy5kZXBlbmRDb3JlKG90aGVyLCBjb250ZXh0LCBkZXBlbmRlbmN5Q2FjaGUpO1xuICAgICAgZGVwZW5kZW5jeUNhY2hlW3RoaXMua2V5XSA9IHJlc3VsdDtcbiAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfVxuICB9XG5cbiAgZGVwZW5kKG90aGVyOiBWYWwsIGNvbnRleHQ6IENvbnRleHQpOiBib29sZWFuIHtcbiAgICByZXR1cm4gdGhpcy5kZXBlbmRPdXRlcihvdGhlciwgY29udGV4dCwge30pO1xuICB9XG5cbiAgZXZhbHVhdGUoY29udGV4dDogQ29udGV4dCk6IFJlc3VsdCB7XG4gICAgbGV0IHJlc3VsdCA9IGNvbnRleHQucXVlcnlWYWwodGhpcy5zY29wZSwgdGhpcy5rZXkpO1xuICAgIGlmICh0eXBlb2YgcmVzdWx0ICE9IFwidW5kZWZpbmVkXCIpIHtcbiAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfVxuICAgIHJlc3VsdCA9IHRoaXMuZXZhbHVhdGVDb3JlKGNvbnRleHQpO1xuICAgIGNvbnRleHQuc3RvcmVWYWwodGhpcy5zY29wZSwgdGhpcy5rZXksIHJlc3VsdCk7XG4gICAgcmV0dXJuIHJlc3VsdDtcbiAgfVxuXG4gIGlzTWVkaWFOYW1lKCk6IGJvb2xlYW4ge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxufVxuXG5leHBvcnQgY2xhc3MgUHJlZml4IGV4dGVuZHMgVmFsIHtcbiAgY29uc3RydWN0b3Ioc2NvcGU6IExleGljYWxTY29wZSwgcHVibGljIHZhbDogVmFsKSB7XG4gICAgc3VwZXIoc2NvcGUpO1xuICB9XG5cbiAgcHJvdGVjdGVkIGdldE9wKCk6IHN0cmluZyB7XG4gICAgdGhyb3cgbmV3IEVycm9yKFwiRl9BQlNUUkFDVFwiKTtcbiAgfVxuXG4gIGV2YWxQcmVmaXgodmFsOiBSZXN1bHQpOiBSZXN1bHQge1xuICAgIHRocm93IG5ldyBFcnJvcihcIkZfQUJTVFJBQ1RcIik7XG4gIH1cblxuICAvKipcbiAgICogQG92ZXJyaWRlXG4gICAqL1xuICBldmFsdWF0ZUNvcmUoY29udGV4dDogQ29udGV4dCk6IFJlc3VsdCB7XG4gICAgY29uc3QgdmFsID0gdGhpcy52YWwuZXZhbHVhdGUoY29udGV4dCk7XG4gICAgcmV0dXJuIHRoaXMuZXZhbFByZWZpeCh2YWwpO1xuICB9XG5cbiAgLyoqXG4gICAqIEBvdmVycmlkZVxuICAgKi9cbiAgZGVwZW5kQ29yZShcbiAgICBvdGhlcjogVmFsLFxuICAgIGNvbnRleHQ6IENvbnRleHQsXG4gICAgZGVwZW5kZW5jeUNhY2hlOiBEZXBlbmRlbmN5Q2FjaGUsXG4gICk6IGJvb2xlYW4ge1xuICAgIHJldHVybiAoXG4gICAgICBvdGhlciA9PT0gdGhpcyB8fCB0aGlzLnZhbC5kZXBlbmRPdXRlcihvdGhlciwgY29udGV4dCwgZGVwZW5kZW5jeUNhY2hlKVxuICAgICk7XG4gIH1cblxuICAvKipcbiAgICogQG92ZXJyaWRlXG4gICAqL1xuICBhcHBlbmRUbyhidWY6IEJhc2UuU3RyaW5nQnVmZmVyLCBwcmlvcml0eTogbnVtYmVyKTogdm9pZCB7XG4gICAgaWYgKDEwIDwgcHJpb3JpdHkpIHtcbiAgICAgIGJ1Zi5hcHBlbmQoXCIoXCIpO1xuICAgIH1cbiAgICBidWYuYXBwZW5kKHRoaXMuZ2V0T3AoKSk7XG4gICAgdGhpcy52YWwuYXBwZW5kVG8oYnVmLCAxMCk7XG4gICAgaWYgKDEwIDwgcHJpb3JpdHkpIHtcbiAgICAgIGJ1Zi5hcHBlbmQoXCIpXCIpO1xuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAgKiBAb3ZlcnJpZGVcbiAgICovXG4gIGV4cGFuZChjb250ZXh0OiBDb250ZXh0LCBwYXJhbXM6IFZhbFtdKTogVmFsIHtcbiAgICBjb25zdCB2YWwgPSB0aGlzLnZhbC5leHBhbmQoY29udGV4dCwgcGFyYW1zKTtcbiAgICBpZiAodmFsID09PSB0aGlzLnZhbCkge1xuICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuICAgIGNvbnN0IHIgPSBuZXcgKHRoaXMuY29uc3RydWN0b3IgYXMgYW55KSh0aGlzLnNjb3BlLCB2YWwpO1xuICAgIHJldHVybiByO1xuICB9XG59XG5cbmV4cG9ydCBjbGFzcyBJbmZpeCBleHRlbmRzIFZhbCB7XG4gIGNvbnN0cnVjdG9yKHNjb3BlOiBMZXhpY2FsU2NvcGUsIHB1YmxpYyBsaHM6IFZhbCwgcHVibGljIHJoczogVmFsKSB7XG4gICAgc3VwZXIoc2NvcGUpO1xuICB9XG5cbiAgZ2V0UHJpb3JpdHkoKTogbnVtYmVyIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoXCJGX0FCU1RSQUNUXCIpO1xuICB9XG5cbiAgZ2V0T3AoKTogc3RyaW5nIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoXCJGX0FCU1RSQUNUXCIpO1xuICB9XG5cbiAgZXZhbEluZml4KGxoczogUmVzdWx0LCByaHM6IFJlc3VsdCk6IFJlc3VsdCB7XG4gICAgdGhyb3cgbmV3IEVycm9yKFwiRl9BQlNUUkFDVFwiKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBAb3ZlcnJpZGVcbiAgICovXG4gIGV2YWx1YXRlQ29yZShjb250ZXh0OiBDb250ZXh0KTogUmVzdWx0IHtcbiAgICBjb25zdCBsaHMgPSB0aGlzLmxocy5ldmFsdWF0ZShjb250ZXh0KTtcbiAgICBjb25zdCByaHMgPSB0aGlzLnJocy5ldmFsdWF0ZShjb250ZXh0KTtcbiAgICByZXR1cm4gdGhpcy5ldmFsSW5maXgobGhzLCByaHMpO1xuICB9XG5cbiAgLyoqXG4gICAqIEBvdmVycmlkZVxuICAgKi9cbiAgZGVwZW5kQ29yZShcbiAgICBvdGhlcjogVmFsLFxuICAgIGNvbnRleHQ6IENvbnRleHQsXG4gICAgZGVwZW5kZW5jeUNhY2hlOiBEZXBlbmRlbmN5Q2FjaGUsXG4gICk6IGJvb2xlYW4ge1xuICAgIHJldHVybiAoXG4gICAgICBvdGhlciA9PT0gdGhpcyB8fFxuICAgICAgdGhpcy5saHMuZGVwZW5kT3V0ZXIob3RoZXIsIGNvbnRleHQsIGRlcGVuZGVuY3lDYWNoZSkgfHxcbiAgICAgIHRoaXMucmhzLmRlcGVuZE91dGVyKG90aGVyLCBjb250ZXh0LCBkZXBlbmRlbmN5Q2FjaGUpXG4gICAgKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBAb3ZlcnJpZGVcbiAgICovXG4gIGFwcGVuZFRvKGJ1ZjogQmFzZS5TdHJpbmdCdWZmZXIsIHByaW9yaXR5OiBudW1iZXIpOiB2b2lkIHtcbiAgICBjb25zdCB0aGlzUHJpb3JpdHkgPSB0aGlzLmdldFByaW9yaXR5KCk7XG4gICAgaWYgKHRoaXNQcmlvcml0eSA8PSBwcmlvcml0eSkge1xuICAgICAgYnVmLmFwcGVuZChcIihcIik7XG4gICAgfVxuICAgIHRoaXMubGhzLmFwcGVuZFRvKGJ1ZiwgdGhpc1ByaW9yaXR5KTtcbiAgICBidWYuYXBwZW5kKHRoaXMuZ2V0T3AoKSk7XG4gICAgdGhpcy5yaHMuYXBwZW5kVG8oYnVmLCB0aGlzUHJpb3JpdHkpO1xuICAgIGlmICh0aGlzUHJpb3JpdHkgPD0gcHJpb3JpdHkpIHtcbiAgICAgIGJ1Zi5hcHBlbmQoXCIpXCIpO1xuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAgKiBAb3ZlcnJpZGVcbiAgICovXG4gIGV4cGFuZChjb250ZXh0OiBDb250ZXh0LCBwYXJhbXM6IFZhbFtdKTogVmFsIHtcbiAgICBjb25zdCBsaHMgPSB0aGlzLmxocy5leHBhbmQoY29udGV4dCwgcGFyYW1zKTtcbiAgICBjb25zdCByaHMgPSB0aGlzLnJocy5leHBhbmQoY29udGV4dCwgcGFyYW1zKTtcbiAgICBpZiAobGhzID09PSB0aGlzLmxocyAmJiByaHMgPT09IHRoaXMucmhzKSB7XG4gICAgICByZXR1cm4gdGhpcztcbiAgICB9XG4gICAgY29uc3QgciA9IG5ldyAodGhpcy5jb25zdHJ1Y3RvciBhcyBhbnkpKHRoaXMuc2NvcGUsIGxocywgcmhzKTtcbiAgICByZXR1cm4gcjtcbiAgfVxufVxuXG5leHBvcnQgY2xhc3MgTG9naWNhbCBleHRlbmRzIEluZml4IHtcbiAgY29uc3RydWN0b3Ioc2NvcGU6IExleGljYWxTY29wZSwgbGhzOiBWYWwsIHJoczogVmFsKSB7XG4gICAgc3VwZXIoc2NvcGUsIGxocywgcmhzKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBAb3ZlcnJpZGVcbiAgICovXG4gIGdldFByaW9yaXR5KCk6IG51bWJlciB7XG4gICAgcmV0dXJuIDE7XG4gIH1cbn1cblxuZXhwb3J0IGNsYXNzIENvbXBhcmlzb24gZXh0ZW5kcyBJbmZpeCB7XG4gIGNvbnN0cnVjdG9yKHNjb3BlOiBMZXhpY2FsU2NvcGUsIGxoczogVmFsLCByaHM6IFZhbCkge1xuICAgIHN1cGVyKHNjb3BlLCBsaHMsIHJocyk7XG4gIH1cblxuICAvKipcbiAgICogQG92ZXJyaWRlXG4gICAqL1xuICBnZXRQcmlvcml0eSgpOiBudW1iZXIge1xuICAgIHJldHVybiAyO1xuICB9XG59XG5cbmV4cG9ydCBjbGFzcyBBZGRpdGl2ZSBleHRlbmRzIEluZml4IHtcbiAgY29uc3RydWN0b3Ioc2NvcGU6IExleGljYWxTY29wZSwgbGhzOiBWYWwsIHJoczogVmFsKSB7XG4gICAgc3VwZXIoc2NvcGUsIGxocywgcmhzKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBAb3ZlcnJpZGVcbiAgICovXG4gIGdldFByaW9yaXR5KCk6IG51bWJlciB7XG4gICAgcmV0dXJuIDM7XG4gIH1cbn1cblxuZXhwb3J0IGNsYXNzIE11bHRpcGxpY2F0aXZlIGV4dGVuZHMgSW5maXgge1xuICBjb25zdHJ1Y3RvcihzY29wZTogTGV4aWNhbFNjb3BlLCBsaHM6IFZhbCwgcmhzOiBWYWwpIHtcbiAgICBzdXBlcihzY29wZSwgbGhzLCByaHMpO1xuICB9XG5cbiAgLyoqXG4gICAqIEBvdmVycmlkZVxuICAgKi9cbiAgZ2V0UHJpb3JpdHkoKTogbnVtYmVyIHtcbiAgICByZXR1cm4gNDtcbiAgfVxufVxuXG5leHBvcnQgY2xhc3MgTm90IGV4dGVuZHMgUHJlZml4IHtcbiAgY29uc3RydWN0b3Ioc2NvcGU6IExleGljYWxTY29wZSwgdmFsOiBWYWwpIHtcbiAgICBzdXBlcihzY29wZSwgdmFsKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBAb3ZlcnJpZGVcbiAgICovXG4gIGdldE9wKCk6IHN0cmluZyB7XG4gICAgcmV0dXJuIFwiIVwiO1xuICB9XG5cbiAgLyoqXG4gICAqIEBvdmVycmlkZVxuICAgKi9cbiAgZXZhbFByZWZpeCh2YWw6IFJlc3VsdCk6IFJlc3VsdCB7XG4gICAgcmV0dXJuICF2YWw7XG4gIH1cbn1cblxuZXhwb3J0IGNsYXNzIE5lZ2F0ZSBleHRlbmRzIFByZWZpeCB7XG4gIGNvbnN0cnVjdG9yKHNjb3BlOiBMZXhpY2FsU2NvcGUsIHZhbDogVmFsKSB7XG4gICAgc3VwZXIoc2NvcGUsIHZhbCk7XG4gIH1cblxuICAvKipcbiAgICogQG92ZXJyaWRlXG4gICAqL1xuICBnZXRPcCgpOiBzdHJpbmcge1xuICAgIHJldHVybiBcIi1cIjtcbiAgfVxuXG4gIC8qKlxuICAgKiBAb3ZlcnJpZGVcbiAgICovXG4gIGV2YWxQcmVmaXgodmFsOiBSZXN1bHQpOiBSZXN1bHQge1xuICAgIHJldHVybiAtdmFsO1xuICB9XG59XG5cbmV4cG9ydCBjbGFzcyBBbmQgZXh0ZW5kcyBMb2dpY2FsIHtcbiAgY29uc3RydWN0b3Ioc2NvcGU6IExleGljYWxTY29wZSwgbGhzOiBWYWwsIHJoczogVmFsKSB7XG4gICAgc3VwZXIoc2NvcGUsIGxocywgcmhzKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBAb3ZlcnJpZGVcbiAgICovXG4gIGdldE9wKCk6IHN0cmluZyB7XG4gICAgcmV0dXJuIFwiJiZcIjtcbiAgfVxuXG4gIC8qKlxuICAgKiBAb3ZlcnJpZGVcbiAgICovXG4gIGV2YWx1YXRlQ29yZShjb250ZXh0OiBDb250ZXh0KTogUmVzdWx0IHtcbiAgICByZXR1cm4gdGhpcy5saHMuZXZhbHVhdGUoY29udGV4dCkgJiYgdGhpcy5yaHMuZXZhbHVhdGUoY29udGV4dCk7XG4gIH1cbn1cblxuZXhwb3J0IGNsYXNzIEFuZE1lZGlhIGV4dGVuZHMgQW5kIHtcbiAgY29uc3RydWN0b3Ioc2NvcGU6IExleGljYWxTY29wZSwgbGhzOiBWYWwsIHJoczogVmFsKSB7XG4gICAgc3VwZXIoc2NvcGUsIGxocywgcmhzKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBAb3ZlcnJpZGVcbiAgICovXG4gIGdldE9wKCk6IHN0cmluZyB7XG4gICAgcmV0dXJuIFwiIGFuZCBcIjtcbiAgfVxufVxuXG5leHBvcnQgY2xhc3MgT3IgZXh0ZW5kcyBMb2dpY2FsIHtcbiAgY29uc3RydWN0b3Ioc2NvcGU6IExleGljYWxTY29wZSwgbGhzOiBWYWwsIHJoczogVmFsKSB7XG4gICAgc3VwZXIoc2NvcGUsIGxocywgcmhzKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBAb3ZlcnJpZGVcbiAgICovXG4gIGdldE9wKCk6IHN0cmluZyB7XG4gICAgcmV0dXJuIFwifHxcIjtcbiAgfVxuXG4gIC8qKlxuICAgKiBAb3ZlcnJpZGVcbiAgICovXG4gIGV2YWx1YXRlQ29yZShjb250ZXh0OiBDb250ZXh0KTogUmVzdWx0IHtcbiAgICByZXR1cm4gdGhpcy5saHMuZXZhbHVhdGUoY29udGV4dCkgfHwgdGhpcy5yaHMuZXZhbHVhdGUoY29udGV4dCk7XG4gIH1cbn1cblxuZXhwb3J0IGNsYXNzIE9yTWVkaWEgZXh0ZW5kcyBPciB7XG4gIGNvbnN0cnVjdG9yKHNjb3BlOiBMZXhpY2FsU2NvcGUsIGxoczogVmFsLCByaHM6IFZhbCkge1xuICAgIHN1cGVyKHNjb3BlLCBsaHMsIHJocyk7XG4gIH1cblxuICAvKipcbiAgICogQG92ZXJyaWRlXG4gICAqL1xuICBnZXRPcCgpOiBzdHJpbmcge1xuICAgIHJldHVybiBcIiwgXCI7XG4gIH1cbn1cblxuZXhwb3J0IGNsYXNzIEx0IGV4dGVuZHMgQ29tcGFyaXNvbiB7XG4gIGNvbnN0cnVjdG9yKHNjb3BlOiBMZXhpY2FsU2NvcGUsIGxoczogVmFsLCByaHM6IFZhbCkge1xuICAgIHN1cGVyKHNjb3BlLCBsaHMsIHJocyk7XG4gIH1cblxuICAvKipcbiAgICogQG92ZXJyaWRlXG4gICAqL1xuICBnZXRPcCgpOiBzdHJpbmcge1xuICAgIHJldHVybiBcIjxcIjtcbiAgfVxuXG4gIC8qKlxuICAgKiBAb3ZlcnJpZGVcbiAgICovXG4gIGV2YWxJbmZpeChsaHM6IFJlc3VsdCwgcmhzOiBSZXN1bHQpOiBSZXN1bHQge1xuICAgIHJldHVybiBsaHMgPCByaHM7XG4gIH1cbn1cblxuZXhwb3J0IGNsYXNzIExlIGV4dGVuZHMgQ29tcGFyaXNvbiB7XG4gIGNvbnN0cnVjdG9yKHNjb3BlOiBMZXhpY2FsU2NvcGUsIGxoczogVmFsLCByaHM6IFZhbCkge1xuICAgIHN1cGVyKHNjb3BlLCBsaHMsIHJocyk7XG4gIH1cblxuICAvKipcbiAgICogQG92ZXJyaWRlXG4gICAqL1xuICBnZXRPcCgpOiBzdHJpbmcge1xuICAgIHJldHVybiBcIjw9XCI7XG4gIH1cblxuICAvKipcbiAgICogQG92ZXJyaWRlXG4gICAqL1xuICBldmFsSW5maXgobGhzOiBSZXN1bHQsIHJoczogUmVzdWx0KTogUmVzdWx0IHtcbiAgICByZXR1cm4gbGhzIDw9IHJocztcbiAgfVxufVxuXG5leHBvcnQgY2xhc3MgR3QgZXh0ZW5kcyBDb21wYXJpc29uIHtcbiAgY29uc3RydWN0b3Ioc2NvcGU6IExleGljYWxTY29wZSwgbGhzOiBWYWwsIHJoczogVmFsKSB7XG4gICAgc3VwZXIoc2NvcGUsIGxocywgcmhzKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBAb3ZlcnJpZGVcbiAgICovXG4gIGdldE9wKCk6IHN0cmluZyB7XG4gICAgcmV0dXJuIFwiPlwiO1xuICB9XG5cbiAgLyoqXG4gICAqIEBvdmVycmlkZVxuICAgKi9cbiAgZXZhbEluZml4KGxoczogUmVzdWx0LCByaHM6IFJlc3VsdCk6IFJlc3VsdCB7XG4gICAgcmV0dXJuIGxocyA+IHJocztcbiAgfVxufVxuXG5leHBvcnQgY2xhc3MgR2UgZXh0ZW5kcyBDb21wYXJpc29uIHtcbiAgY29uc3RydWN0b3Ioc2NvcGU6IExleGljYWxTY29wZSwgbGhzOiBWYWwsIHJoczogVmFsKSB7XG4gICAgc3VwZXIoc2NvcGUsIGxocywgcmhzKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBAb3ZlcnJpZGVcbiAgICovXG4gIGdldE9wKCk6IHN0cmluZyB7XG4gICAgcmV0dXJuIFwiPj1cIjtcbiAgfVxuXG4gIC8qKlxuICAgKiBAb3ZlcnJpZGVcbiAgICovXG4gIGV2YWxJbmZpeChsaHM6IFJlc3VsdCwgcmhzOiBSZXN1bHQpOiBSZXN1bHQge1xuICAgIHJldHVybiBsaHMgPj0gcmhzO1xuICB9XG59XG5cbmV4cG9ydCBjbGFzcyBFcSBleHRlbmRzIENvbXBhcmlzb24ge1xuICBjb25zdHJ1Y3RvcihzY29wZTogTGV4aWNhbFNjb3BlLCBsaHM6IFZhbCwgcmhzOiBWYWwpIHtcbiAgICBzdXBlcihzY29wZSwgbGhzLCByaHMpO1xuICB9XG5cbiAgLyoqXG4gICAqIEBvdmVycmlkZVxuICAgKi9cbiAgZ2V0T3AoKTogc3RyaW5nIHtcbiAgICByZXR1cm4gXCI9PVwiO1xuICB9XG5cbiAgLyoqXG4gICAqIEBvdmVycmlkZVxuICAgKi9cbiAgZXZhbEluZml4KGxoczogUmVzdWx0LCByaHM6IFJlc3VsdCk6IFJlc3VsdCB7XG4gICAgcmV0dXJuIGxocyA9PSByaHM7XG4gIH1cbn1cblxuZXhwb3J0IGNsYXNzIE5lIGV4dGVuZHMgQ29tcGFyaXNvbiB7XG4gIGNvbnN0cnVjdG9yKHNjb3BlOiBMZXhpY2FsU2NvcGUsIGxoczogVmFsLCByaHM6IFZhbCkge1xuICAgIHN1cGVyKHNjb3BlLCBsaHMsIHJocyk7XG4gIH1cblxuICAvKipcbiAgICogQG92ZXJyaWRlXG4gICAqL1xuICBnZXRPcCgpOiBzdHJpbmcge1xuICAgIHJldHVybiBcIiE9XCI7XG4gIH1cblxuICAvKipcbiAgICogQG92ZXJyaWRlXG4gICAqL1xuICBldmFsSW5maXgobGhzOiBSZXN1bHQsIHJoczogUmVzdWx0KTogUmVzdWx0IHtcbiAgICByZXR1cm4gbGhzICE9IHJocztcbiAgfVxufVxuXG5leHBvcnQgY2xhc3MgQWRkIGV4dGVuZHMgQWRkaXRpdmUge1xuICBjb25zdHJ1Y3RvcihzY29wZTogTGV4aWNhbFNjb3BlLCBsaHM6IFZhbCwgcmhzOiBWYWwpIHtcbiAgICBzdXBlcihzY29wZSwgbGhzLCByaHMpO1xuICB9XG5cbiAgLyoqXG4gICAqIEBvdmVycmlkZVxuICAgKi9cbiAgZ2V0T3AoKTogc3RyaW5nIHtcbiAgICByZXR1cm4gXCIrXCI7XG4gIH1cblxuICAvKipcbiAgICogQG92ZXJyaWRlXG4gICAqL1xuICBldmFsSW5maXgobGhzOiBSZXN1bHQsIHJoczogUmVzdWx0KTogUmVzdWx0IHtcbiAgICByZXR1cm4gKGxocyBhcyBhbnkpICsgcmhzO1xuICB9XG59XG5cbmV4cG9ydCBjbGFzcyBTdWJ0cmFjdCBleHRlbmRzIEFkZGl0aXZlIHtcbiAgY29uc3RydWN0b3Ioc2NvcGU6IExleGljYWxTY29wZSwgbGhzOiBWYWwsIHJoczogVmFsKSB7XG4gICAgc3VwZXIoc2NvcGUsIGxocywgcmhzKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBAb3ZlcnJpZGVcbiAgICovXG4gIGdldE9wKCk6IHN0cmluZyB7XG4gICAgcmV0dXJuIFwiIC0gXCI7XG4gIH1cblxuICAvKipcbiAgICogQG92ZXJyaWRlXG4gICAqL1xuICBldmFsSW5maXgobGhzOiBSZXN1bHQsIHJoczogUmVzdWx0KTogUmVzdWx0IHtcbiAgICByZXR1cm4gKGxocyBhcyBhbnkpIC0gKHJocyBhcyBhbnkpO1xuICB9XG59XG5cbmV4cG9ydCBjbGFzcyBNdWx0aXBseSBleHRlbmRzIE11bHRpcGxpY2F0aXZlIHtcbiAgY29uc3RydWN0b3Ioc2NvcGU6IExleGljYWxTY29wZSwgbGhzOiBWYWwsIHJoczogVmFsKSB7XG4gICAgc3VwZXIoc2NvcGUsIGxocywgcmhzKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBAb3ZlcnJpZGVcbiAgICovXG4gIGdldE9wKCk6IHN0cmluZyB7XG4gICAgcmV0dXJuIFwiKlwiO1xuICB9XG5cbiAgLyoqXG4gICAqIEBvdmVycmlkZVxuICAgKi9cbiAgZXZhbEluZml4KGxoczogUmVzdWx0LCByaHM6IFJlc3VsdCk6IFJlc3VsdCB7XG4gICAgcmV0dXJuIChsaHMgYXMgYW55KSAqIChyaHMgYXMgYW55KTtcbiAgfVxufVxuXG5leHBvcnQgY2xhc3MgRGl2aWRlIGV4dGVuZHMgTXVsdGlwbGljYXRpdmUge1xuICBjb25zdHJ1Y3RvcihzY29wZTogTGV4aWNhbFNjb3BlLCBsaHM6IFZhbCwgcmhzOiBWYWwpIHtcbiAgICBzdXBlcihzY29wZSwgbGhzLCByaHMpO1xuICB9XG5cbiAgLyoqXG4gICAqIEBvdmVycmlkZVxuICAgKi9cbiAgZ2V0T3AoKTogc3RyaW5nIHtcbiAgICByZXR1cm4gXCIvXCI7XG4gIH1cblxuICAvKipcbiAgICogQG92ZXJyaWRlXG4gICAqL1xuICBldmFsSW5maXgobGhzOiBSZXN1bHQsIHJoczogUmVzdWx0KTogUmVzdWx0IHtcbiAgICByZXR1cm4gKGxocyBhcyBhbnkpIC8gKHJocyBhcyBhbnkpO1xuICB9XG59XG5cbmV4cG9ydCBjbGFzcyBNb2R1bG8gZXh0ZW5kcyBNdWx0aXBsaWNhdGl2ZSB7XG4gIGNvbnN0cnVjdG9yKHNjb3BlOiBMZXhpY2FsU2NvcGUsIGxoczogVmFsLCByaHM6IFZhbCkge1xuICAgIHN1cGVyKHNjb3BlLCBsaHMsIHJocyk7XG4gIH1cblxuICAvKipcbiAgICogQG92ZXJyaWRlXG4gICAqL1xuICBnZXRPcCgpOiBzdHJpbmcge1xuICAgIHJldHVybiBcIiVcIjtcbiAgfVxuXG4gIC8qKlxuICAgKiBAb3ZlcnJpZGVcbiAgICovXG4gIGV2YWxJbmZpeChsaHM6IFJlc3VsdCwgcmhzOiBSZXN1bHQpOiBSZXN1bHQge1xuICAgIHJldHVybiAobGhzIGFzIGFueSkgJSAocmhzIGFzIGFueSk7XG4gIH1cbn1cblxuLyoqXG4gKiBOdW1lcmljYWwgdmFsdWUgd2l0aCBhIHVuaXQuXG4gKi9cbmV4cG9ydCBjbGFzcyBOdW1lcmljIGV4dGVuZHMgVmFsIHtcbiAgdW5pdDogc3RyaW5nO1xuXG4gIGNvbnN0cnVjdG9yKHNjb3BlOiBMZXhpY2FsU2NvcGUsIHB1YmxpYyBudW06IG51bWJlciwgdW5pdDogc3RyaW5nKSB7XG4gICAgc3VwZXIoc2NvcGUpO1xuICAgIHRoaXMudW5pdCA9IHVuaXQudG9Mb3dlckNhc2UoKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBAb3ZlcnJpZGVcbiAgICovXG4gIGFwcGVuZFRvKGJ1ZjogQmFzZS5TdHJpbmdCdWZmZXIsIHByaW9yaXR5OiBudW1iZXIpOiB2b2lkIHtcbiAgICBidWYuYXBwZW5kKHRoaXMubnVtLnRvU3RyaW5nKCkpO1xuICAgIGJ1Zi5hcHBlbmQoQmFzZS5lc2NhcGVDU1NJZGVudCh0aGlzLnVuaXQpKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBAb3ZlcnJpZGVcbiAgICovXG4gIGV2YWx1YXRlQ29yZShjb250ZXh0OiBDb250ZXh0KTogUmVzdWx0IHtcbiAgICByZXR1cm4gdGhpcy5udW0gKiBjb250ZXh0LnF1ZXJ5VW5pdFNpemUodGhpcy51bml0LCBmYWxzZSk7XG4gIH1cbn1cblxuLyoqXG4gKiBOYW1lZCB2YWx1ZS5cbiAqIEBwYXJhbSBxdWFsaWZpZWROYW1lIENTUy1lc2NhcGVkIG5hbWUgc2VxdWVuY2Ugc2VwYXJhdGVkIGJ5IGRvdHMuXG4gKi9cbmV4cG9ydCBjbGFzcyBOYW1lZCBleHRlbmRzIFZhbCB7XG4gIGNvbnN0cnVjdG9yKHNjb3BlOiBMZXhpY2FsU2NvcGUsIHB1YmxpYyBxdWFsaWZpZWROYW1lOiBzdHJpbmcpIHtcbiAgICBzdXBlcihzY29wZSk7XG4gIH1cblxuICAvKipcbiAgICogQG92ZXJyaWRlXG4gICAqL1xuICBhcHBlbmRUbyhidWY6IEJhc2UuU3RyaW5nQnVmZmVyLCBwcmlvcml0eTogbnVtYmVyKTogdm9pZCB7XG4gICAgYnVmLmFwcGVuZCh0aGlzLnF1YWxpZmllZE5hbWUpO1xuICB9XG5cbiAgLyoqXG4gICAqIEBvdmVycmlkZVxuICAgKi9cbiAgZXZhbHVhdGVDb3JlKGNvbnRleHQ6IENvbnRleHQpOiBSZXN1bHQge1xuICAgIHJldHVybiBjb250ZXh0LmV2YWxOYW1lKHRoaXMuc2NvcGUsIHRoaXMucXVhbGlmaWVkTmFtZSkuZXZhbHVhdGUoY29udGV4dCk7XG4gIH1cblxuICAvKipcbiAgICogQG92ZXJyaWRlXG4gICAqL1xuICBkZXBlbmRDb3JlKFxuICAgIG90aGVyOiBWYWwsXG4gICAgY29udGV4dDogQ29udGV4dCxcbiAgICBkZXBlbmRlbmN5Q2FjaGU6IERlcGVuZGVuY3lDYWNoZSxcbiAgKTogYm9vbGVhbiB7XG4gICAgcmV0dXJuIChcbiAgICAgIG90aGVyID09PSB0aGlzIHx8XG4gICAgICBjb250ZXh0XG4gICAgICAgIC5ldmFsTmFtZSh0aGlzLnNjb3BlLCB0aGlzLnF1YWxpZmllZE5hbWUpXG4gICAgICAgIC5kZXBlbmRPdXRlcihvdGhlciwgY29udGV4dCwgZGVwZW5kZW5jeUNhY2hlKVxuICAgICk7XG4gIH1cbn1cblxuLyoqXG4gKiBOYW1lZCB2YWx1ZS5cbiAqL1xuZXhwb3J0IGNsYXNzIE1lZGlhTmFtZSBleHRlbmRzIFZhbCB7XG4gIC8vIEZJWE1FOiBUaGlzIHByb3BlcnR5IGlzIGFkZGVkIHRvIHJlZHVjZSBUeXBlU2NyaXB0IGVycm9yIG9uIGBkZXBlbmRDb3JlYFxuICAvLyBidXQgaXQgaXMgbmV2ZXIgaW5pdGlhbGl6ZWQuIElzIGl0IHJlYWxseSBjb3JyZWN0IGNvZGU/XG4gIHZhbHVlOiBWYWw7XG5cbiAgY29uc3RydWN0b3Ioc2NvcGU6IExleGljYWxTY29wZSwgcHVibGljIG5vdDogYm9vbGVhbiwgcHVibGljIG5hbWU6IHN0cmluZykge1xuICAgIHN1cGVyKHNjb3BlKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBAb3ZlcnJpZGVcbiAgICovXG4gIGFwcGVuZFRvKGJ1ZjogQmFzZS5TdHJpbmdCdWZmZXIsIHByaW9yaXR5OiBudW1iZXIpOiB2b2lkIHtcbiAgICBpZiAodGhpcy5ub3QpIHtcbiAgICAgIGJ1Zi5hcHBlbmQoXCJub3QgXCIpO1xuICAgIH1cbiAgICBidWYuYXBwZW5kKEJhc2UuZXNjYXBlQ1NTSWRlbnQodGhpcy5uYW1lKSk7XG4gIH1cblxuICAvKipcbiAgICogQG92ZXJyaWRlXG4gICAqL1xuICBldmFsdWF0ZUNvcmUoY29udGV4dDogQ29udGV4dCk6IFJlc3VsdCB7XG4gICAgcmV0dXJuIGNvbnRleHQuZXZhbE1lZGlhTmFtZSh0aGlzLm5hbWUsIHRoaXMubm90KTtcbiAgfVxuXG4gIC8qKlxuICAgKiBAb3ZlcnJpZGVcbiAgICovXG4gIGRlcGVuZENvcmUoXG4gICAgb3RoZXI6IFZhbCxcbiAgICBjb250ZXh0OiBDb250ZXh0LFxuICAgIGRlcGVuZGVuY3lDYWNoZTogRGVwZW5kZW5jeUNhY2hlLFxuICApOiBib29sZWFuIHtcbiAgICByZXR1cm4gKFxuICAgICAgb3RoZXIgPT09IHRoaXMgfHwgdGhpcy52YWx1ZS5kZXBlbmRPdXRlcihvdGhlciwgY29udGV4dCwgZGVwZW5kZW5jeUNhY2hlKVxuICAgICk7XG4gIH1cblxuICAvKipcbiAgICogQG92ZXJyaWRlXG4gICAqL1xuICBpc01lZGlhTmFtZSgpOiBib29sZWFuIHtcbiAgICByZXR1cm4gdHJ1ZTtcbiAgfVxufVxuXG4vKipcbiAqIEEgdmFsdWUgdGhhdCBpcyBjYWxjdWxhdGVkIGJ5IGNhbGxpbmcgYSBKYXZhU2NyaXB0IGZ1bmN0aW9uLiBOb3RlIHRoYXQgdGhlXG4gKiByZXN1bHQgaXMgY2FjaGVkIGFuZCB0aGlzIGZ1bmN0aW9uIHdpbGwgYmUgY2FsbGVkIG9ubHkgb25jZSBiZXR3ZWVuIGFueVxuICogY2xlYXJzIGZvciBpdHMgc2NvcGUgaW4gdGhlIGNvbnRleHQuXG4gKiBAcGFyYW0gZm4gZnVuY3Rpb24gdG8gY2FsbC5cbiAqIEBwYXJhbSBzdHIgYSB3YXkgdG8gcmVwcmVzZW50IHRoaXMgdmFsdWUgaW4gdG9TdHJpbmcoKSBjYWxsLlxuICovXG5leHBvcnQgY2xhc3MgTmF0aXZlIGV4dGVuZHMgVmFsIHtcbiAgY29uc3RydWN0b3IoXG4gICAgc2NvcGU6IExleGljYWxTY29wZSxcbiAgICBwdWJsaWMgZm46ICgpID0+IFJlc3VsdCxcbiAgICBwdWJsaWMgc3RyOiBzdHJpbmcsXG4gICkge1xuICAgIHN1cGVyKHNjb3BlKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBAb3ZlcnJpZGVcbiAgICovXG4gIGFwcGVuZFRvKGJ1ZjogQmFzZS5TdHJpbmdCdWZmZXIsIHByaW9yaXR5OiBudW1iZXIpOiB2b2lkIHtcbiAgICBidWYuYXBwZW5kKHRoaXMuc3RyKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBAb3ZlcnJpZGVcbiAgICovXG4gIGV2YWx1YXRlQ29yZShjb250ZXh0OiBDb250ZXh0KTogUmVzdWx0IHtcbiAgICByZXR1cm4gdGhpcy5mbi5jYWxsKGNvbnRleHQpO1xuICB9XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBhcHBlbmRWYWxBcnJheShidWY6IEJhc2UuU3RyaW5nQnVmZmVyLCBhcnI6IFZhbFtdKTogdm9pZCB7XG4gIGJ1Zi5hcHBlbmQoXCIoXCIpO1xuICBmb3IgKGxldCBpID0gMDsgaSA8IGFyci5sZW5ndGg7IGkrKykge1xuICAgIGlmIChpKSB7XG4gICAgICBidWYuYXBwZW5kKFwiLFwiKTtcbiAgICB9XG4gICAgYXJyW2ldLmFwcGVuZFRvKGJ1ZiwgMCk7XG4gIH1cbiAgYnVmLmFwcGVuZChcIilcIik7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBleHBhbmRWYWxBcnJheShcbiAgY29udGV4dDogQ29udGV4dCxcbiAgYXJyOiBWYWxbXSxcbiAgcGFyYW1zOiBWYWxbXSxcbik6IFZhbFtdIHtcbiAgbGV0IGV4cGFuZGVkOiBWYWxbXSA9IGFycjtcbiAgZm9yIChsZXQgaSA9IDA7IGkgPCBhcnIubGVuZ3RoOyBpKyspIHtcbiAgICBjb25zdCBwID0gYXJyW2ldLmV4cGFuZChjb250ZXh0LCBwYXJhbXMpO1xuICAgIGlmIChhcnIgIT09IGV4cGFuZGVkKSB7XG4gICAgICBleHBhbmRlZFtpXSA9IHA7XG4gICAgfSBlbHNlIGlmIChwICE9PSBhcnJbaV0pIHtcbiAgICAgIGV4cGFuZGVkID0gQXJyYXkoYXJyLmxlbmd0aCk7XG4gICAgICBmb3IgKGxldCBqID0gMDsgaiA8IGk7IGorKykge1xuICAgICAgICBleHBhbmRlZFtqXSA9IGFycltqXTtcbiAgICAgIH1cbiAgICAgIGV4cGFuZGVkW2ldID0gcDtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIGV4cGFuZGVkO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gZXZhbFZhbEFycmF5KGNvbnRleHQ6IENvbnRleHQsIGFycjogVmFsW10pOiBSZXN1bHRbXSB7XG4gIGNvbnN0IHJlc3VsdDogUmVzdWx0W10gPSBBcnJheShhcnIubGVuZ3RoKTtcbiAgZm9yIChsZXQgaSA9IDA7IGkgPCBhcnIubGVuZ3RoOyBpKyspIHtcbiAgICByZXN1bHRbaV0gPSBhcnJbaV0uZXZhbHVhdGUoY29udGV4dCk7XG4gIH1cbiAgcmV0dXJuIHJlc3VsdDtcbn1cblxuZXhwb3J0IGNsYXNzIENhbGwgZXh0ZW5kcyBWYWwge1xuICBjb25zdHJ1Y3RvcihcbiAgICBzY29wZTogTGV4aWNhbFNjb3BlLFxuICAgIHB1YmxpYyBxdWFsaWZpZWROYW1lOiBzdHJpbmcsXG4gICAgcHVibGljIHBhcmFtczogVmFsW10sXG4gICkge1xuICAgIHN1cGVyKHNjb3BlKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBAb3ZlcnJpZGVcbiAgICovXG4gIGFwcGVuZFRvKGJ1ZjogQmFzZS5TdHJpbmdCdWZmZXIsIHByaW9yaXR5OiBudW1iZXIpOiB2b2lkIHtcbiAgICBidWYuYXBwZW5kKHRoaXMucXVhbGlmaWVkTmFtZSk7XG4gICAgYXBwZW5kVmFsQXJyYXkoYnVmLCB0aGlzLnBhcmFtcyk7XG4gIH1cblxuICAvKipcbiAgICogQG92ZXJyaWRlXG4gICAqL1xuICBldmFsdWF0ZUNvcmUoY29udGV4dDogQ29udGV4dCk6IFJlc3VsdCB7XG4gICAgY29uc3QgYm9keSA9IGNvbnRleHQuZXZhbENhbGwoXG4gICAgICB0aGlzLnNjb3BlLFxuICAgICAgdGhpcy5xdWFsaWZpZWROYW1lLFxuICAgICAgdGhpcy5wYXJhbXMsXG4gICAgICBmYWxzZSxcbiAgICApO1xuICAgIHJldHVybiBib2R5LmV4cGFuZChjb250ZXh0LCB0aGlzLnBhcmFtcykuZXZhbHVhdGUoY29udGV4dCk7XG4gIH1cblxuICAvKipcbiAgICogQG92ZXJyaWRlXG4gICAqL1xuICBkZXBlbmRDb3JlKFxuICAgIG90aGVyOiBWYWwsXG4gICAgY29udGV4dDogQ29udGV4dCxcbiAgICBkZXBlbmRlbmN5Q2FjaGU6IERlcGVuZGVuY3lDYWNoZSxcbiAgKTogYm9vbGVhbiB7XG4gICAgaWYgKG90aGVyID09PSB0aGlzKSB7XG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCB0aGlzLnBhcmFtcy5sZW5ndGg7IGkrKykge1xuICAgICAgaWYgKHRoaXMucGFyYW1zW2ldLmRlcGVuZE91dGVyKG90aGVyLCBjb250ZXh0LCBkZXBlbmRlbmN5Q2FjaGUpKSB7XG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgfVxuICAgIH1cbiAgICBjb25zdCBib2R5ID0gY29udGV4dC5ldmFsQ2FsbChcbiAgICAgIHRoaXMuc2NvcGUsXG4gICAgICB0aGlzLnF1YWxpZmllZE5hbWUsXG4gICAgICB0aGlzLnBhcmFtcyxcbiAgICAgIHRydWUsXG4gICAgKTtcblxuICAgIC8vIE5vIGV4cGFuc2lvbiBoZXJlIVxuICAgIHJldHVybiBib2R5LmRlcGVuZE91dGVyKG90aGVyLCBjb250ZXh0LCBkZXBlbmRlbmN5Q2FjaGUpO1xuICB9XG5cbiAgLyoqXG4gICAqIEBvdmVycmlkZVxuICAgKi9cbiAgZXhwYW5kKGNvbnRleHQ6IENvbnRleHQsIHBhcmFtczogVmFsW10pOiBWYWwge1xuICAgIGNvbnN0IGV4cGFuZGVkUGFyYW1zID0gZXhwYW5kVmFsQXJyYXkoY29udGV4dCwgdGhpcy5wYXJhbXMsIHBhcmFtcyk7XG4gICAgaWYgKGV4cGFuZGVkUGFyYW1zID09PSB0aGlzLnBhcmFtcykge1xuICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuICAgIHJldHVybiBuZXcgQ2FsbCh0aGlzLnNjb3BlLCB0aGlzLnF1YWxpZmllZE5hbWUsIGV4cGFuZGVkUGFyYW1zKTtcbiAgfVxufVxuXG5leHBvcnQgY2xhc3MgQ29uZCBleHRlbmRzIFZhbCB7XG4gIGNvbnN0cnVjdG9yKFxuICAgIHNjb3BlOiBMZXhpY2FsU2NvcGUsXG4gICAgcHVibGljIGNvbmQ6IFZhbCxcbiAgICBwdWJsaWMgaWZUcnVlOiBWYWwsXG4gICAgcHVibGljIGlmRmFsc2U6IFZhbCxcbiAgKSB7XG4gICAgc3VwZXIoc2NvcGUpO1xuICB9XG5cbiAgLyoqXG4gICAqIEBvdmVycmlkZVxuICAgKi9cbiAgYXBwZW5kVG8oYnVmOiBCYXNlLlN0cmluZ0J1ZmZlciwgcHJpb3JpdHk6IG51bWJlcik6IHZvaWQge1xuICAgIGlmIChwcmlvcml0eSA+IDApIHtcbiAgICAgIGJ1Zi5hcHBlbmQoXCIoXCIpO1xuICAgIH1cbiAgICB0aGlzLmNvbmQuYXBwZW5kVG8oYnVmLCAwKTtcbiAgICBidWYuYXBwZW5kKFwiP1wiKTtcbiAgICB0aGlzLmlmVHJ1ZS5hcHBlbmRUbyhidWYsIDApO1xuICAgIGJ1Zi5hcHBlbmQoXCI6XCIpO1xuICAgIHRoaXMuaWZGYWxzZS5hcHBlbmRUbyhidWYsIDApO1xuICAgIGlmIChwcmlvcml0eSA+IDApIHtcbiAgICAgIGJ1Zi5hcHBlbmQoXCIpXCIpO1xuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAgKiBAb3ZlcnJpZGVcbiAgICovXG4gIGV2YWx1YXRlQ29yZShjb250ZXh0OiBDb250ZXh0KTogUmVzdWx0IHtcbiAgICBpZiAodGhpcy5jb25kLmV2YWx1YXRlKGNvbnRleHQpKSB7XG4gICAgICByZXR1cm4gdGhpcy5pZlRydWUuZXZhbHVhdGUoY29udGV4dCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiB0aGlzLmlmRmFsc2UuZXZhbHVhdGUoY29udGV4dCk7XG4gICAgfVxuICB9XG5cbiAgLyoqXG4gICAqIEBvdmVycmlkZVxuICAgKi9cbiAgZGVwZW5kQ29yZShcbiAgICBvdGhlcjogVmFsLFxuICAgIGNvbnRleHQ6IENvbnRleHQsXG4gICAgZGVwZW5kZW5jeUNhY2hlOiBEZXBlbmRlbmN5Q2FjaGUsXG4gICk6IGJvb2xlYW4ge1xuICAgIHJldHVybiAoXG4gICAgICBvdGhlciA9PT0gdGhpcyB8fFxuICAgICAgdGhpcy5jb25kLmRlcGVuZE91dGVyKG90aGVyLCBjb250ZXh0LCBkZXBlbmRlbmN5Q2FjaGUpIHx8XG4gICAgICB0aGlzLmlmVHJ1ZS5kZXBlbmRPdXRlcihvdGhlciwgY29udGV4dCwgZGVwZW5kZW5jeUNhY2hlKSB8fFxuICAgICAgdGhpcy5pZkZhbHNlLmRlcGVuZE91dGVyKG90aGVyLCBjb250ZXh0LCBkZXBlbmRlbmN5Q2FjaGUpXG4gICAgKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBAb3ZlcnJpZGVcbiAgICovXG4gIGV4cGFuZChjb250ZXh0OiBDb250ZXh0LCBwYXJhbXM6IFZhbFtdKTogVmFsIHtcbiAgICBjb25zdCBjb25kID0gdGhpcy5jb25kLmV4cGFuZChjb250ZXh0LCBwYXJhbXMpO1xuICAgIGNvbnN0IGlmVHJ1ZSA9IHRoaXMuaWZUcnVlLmV4cGFuZChjb250ZXh0LCBwYXJhbXMpO1xuICAgIGNvbnN0IGlmRmFsc2UgPSB0aGlzLmlmRmFsc2UuZXhwYW5kKGNvbnRleHQsIHBhcmFtcyk7XG4gICAgaWYgKFxuICAgICAgY29uZCA9PT0gdGhpcy5jb25kICYmXG4gICAgICBpZlRydWUgPT09IHRoaXMuaWZUcnVlICYmXG4gICAgICBpZkZhbHNlID09PSB0aGlzLmlmRmFsc2VcbiAgICApIHtcbiAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cbiAgICBjb25zdCByID0gbmV3IENvbmQodGhpcy5zY29wZSwgY29uZCwgaWZUcnVlLCBpZkZhbHNlKTtcbiAgICByZXR1cm4gcjtcbiAgfVxufVxuXG5leHBvcnQgY2xhc3MgQ29uc3QgZXh0ZW5kcyBWYWwge1xuICBjb25zdHJ1Y3RvcihzY29wZTogTGV4aWNhbFNjb3BlLCBwdWJsaWMgdmFsOiBSZXN1bHQpIHtcbiAgICBzdXBlcihzY29wZSk7XG4gIH1cblxuICAvKipcbiAgICogQG92ZXJyaWRlXG4gICAqL1xuICBhcHBlbmRUbyhidWY6IEJhc2UuU3RyaW5nQnVmZmVyLCBwcmlvcml0eTogbnVtYmVyKTogdm9pZCB7XG4gICAgc3dpdGNoICh0eXBlb2YgdGhpcy52YWwpIHtcbiAgICAgIGNhc2UgXCJudW1iZXJcIjpcbiAgICAgIGNhc2UgXCJib29sZWFuXCI6XG4gICAgICAgIGJ1Zi5hcHBlbmQodGhpcy52YWwudG9TdHJpbmcoKSk7XG4gICAgICAgIGJyZWFrO1xuICAgICAgY2FzZSBcInN0cmluZ1wiOlxuICAgICAgICBidWYuYXBwZW5kKCdcIicpO1xuICAgICAgICBidWYuYXBwZW5kKEJhc2UuZXNjYXBlQ1NTU3RyKHRoaXMudmFsKSk7XG4gICAgICAgIGJ1Zi5hcHBlbmQoJ1wiJyk7XG4gICAgICAgIGJyZWFrO1xuICAgICAgZGVmYXVsdDpcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiRl9VTkVYUEVDVEVEX1NUQVRFXCIpO1xuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAgKiBAb3ZlcnJpZGVcbiAgICovXG4gIGV2YWx1YXRlQ29yZShjb250ZXh0OiBDb250ZXh0KTogUmVzdWx0IHtcbiAgICByZXR1cm4gdGhpcy52YWw7XG4gIH1cbn1cblxuZXhwb3J0IGNsYXNzIE1lZGlhVGVzdCBleHRlbmRzIFZhbCB7XG4gIGNvbnN0cnVjdG9yKHNjb3BlOiBMZXhpY2FsU2NvcGUsIHB1YmxpYyBuYW1lOiBNZWRpYU5hbWUsIHB1YmxpYyB2YWx1ZTogVmFsKSB7XG4gICAgc3VwZXIoc2NvcGUpO1xuICB9XG5cbiAgLyoqXG4gICAqIEBvdmVycmlkZVxuICAgKi9cbiAgYXBwZW5kVG8oYnVmOiBCYXNlLlN0cmluZ0J1ZmZlciwgcHJpb3JpdHk6IG51bWJlcik6IHZvaWQge1xuICAgIGJ1Zi5hcHBlbmQoXCIoXCIpO1xuICAgIGJ1Zi5hcHBlbmQoQmFzZS5lc2NhcGVDU1NTdHIodGhpcy5uYW1lLm5hbWUpKTtcbiAgICBidWYuYXBwZW5kKFwiOlwiKTtcbiAgICB0aGlzLnZhbHVlLmFwcGVuZFRvKGJ1ZiwgMCk7XG4gICAgYnVmLmFwcGVuZChcIilcIik7XG4gIH1cblxuICAvKipcbiAgICogQG92ZXJyaWRlXG4gICAqL1xuICBldmFsdWF0ZUNvcmUoY29udGV4dDogQ29udGV4dCk6IFJlc3VsdCB7XG4gICAgcmV0dXJuIGNvbnRleHQuZXZhbE1lZGlhVGVzdCh0aGlzLm5hbWUubmFtZSwgdGhpcy52YWx1ZSk7XG4gIH1cblxuICAvKipcbiAgICogQG92ZXJyaWRlXG4gICAqL1xuICBkZXBlbmRDb3JlKFxuICAgIG90aGVyOiBWYWwsXG4gICAgY29udGV4dDogQ29udGV4dCxcbiAgICBkZXBlbmRlbmN5Q2FjaGU6IERlcGVuZGVuY3lDYWNoZSxcbiAgKTogYm9vbGVhbiB7XG4gICAgcmV0dXJuIChcbiAgICAgIG90aGVyID09PSB0aGlzIHx8IHRoaXMudmFsdWUuZGVwZW5kT3V0ZXIob3RoZXIsIGNvbnRleHQsIGRlcGVuZGVuY3lDYWNoZSlcbiAgICApO1xuICB9XG5cbiAgLyoqXG4gICAqIEBvdmVycmlkZVxuICAgKi9cbiAgZXhwYW5kKGNvbnRleHQ6IENvbnRleHQsIHBhcmFtczogVmFsW10pOiBWYWwge1xuICAgIGNvbnN0IHZhbHVlID0gdGhpcy52YWx1ZS5leHBhbmQoY29udGV4dCwgcGFyYW1zKTtcbiAgICBpZiAodmFsdWUgPT09IHRoaXMudmFsdWUpIHtcbiAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cbiAgICBjb25zdCByID0gbmV3IE1lZGlhVGVzdCh0aGlzLnNjb3BlLCB0aGlzLm5hbWUsIHZhbHVlKTtcbiAgICByZXR1cm4gcjtcbiAgfVxufVxuXG5leHBvcnQgY2xhc3MgUGFyYW0gZXh0ZW5kcyBWYWwge1xuICBjb25zdHJ1Y3RvcihzY29wZTogTGV4aWNhbFNjb3BlLCBwdWJsaWMgaW5kZXg6IG51bWJlcikge1xuICAgIHN1cGVyKHNjb3BlKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBAb3ZlcnJpZGVcbiAgICovXG4gIGFwcGVuZFRvKGJ1ZjogQmFzZS5TdHJpbmdCdWZmZXIsIHByaW9yaXR5OiBudW1iZXIpOiB2b2lkIHtcbiAgICBidWYuYXBwZW5kKFwiJFwiKTtcbiAgICBidWYuYXBwZW5kKHRoaXMuaW5kZXgudG9TdHJpbmcoKSk7XG4gIH1cblxuICAvKipcbiAgICogQG92ZXJyaWRlXG4gICAqL1xuICBleHBhbmQoY29udGV4dDogQ29udGV4dCwgcGFyYW1zOiBWYWxbXSk6IFZhbCB7XG4gICAgY29uc3QgdiA9IHBhcmFtc1t0aGlzLmluZGV4XTtcbiAgICBpZiAoIXYpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcihgUGFyYW1ldGVyIG1pc3Npbmc6ICR7dGhpcy5pbmRleH1gKTtcbiAgICB9XG4gICAgcmV0dXJuIHYgYXMgVmFsO1xuICB9XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBhbmQoc2NvcGU6IExleGljYWxTY29wZSwgdjE6IFZhbCwgdjI6IFZhbCk6IFZhbCB7XG4gIGlmIChcbiAgICB2MSA9PT0gc2NvcGUuX2ZhbHNlIHx8XG4gICAgdjEgPT09IHNjb3BlLnplcm8gfHxcbiAgICB2MiA9PSBzY29wZS5fZmFsc2UgfHxcbiAgICB2MiA9PSBzY29wZS56ZXJvXG4gICkge1xuICAgIHJldHVybiBzY29wZS5fZmFsc2U7XG4gIH1cbiAgaWYgKHYxID09PSBzY29wZS5fdHJ1ZSB8fCB2MSA9PT0gc2NvcGUub25lKSB7XG4gICAgcmV0dXJuIHYyO1xuICB9XG4gIGlmICh2MiA9PT0gc2NvcGUuX3RydWUgfHwgdjIgPT09IHNjb3BlLm9uZSkge1xuICAgIHJldHVybiB2MTtcbiAgfVxuICByZXR1cm4gbmV3IEFuZChzY29wZSwgdjEsIHYyKTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGFkZChzY29wZTogTGV4aWNhbFNjb3BlLCB2MTogVmFsLCB2MjogVmFsKTogVmFsIHtcbiAgaWYgKHYxID09PSBzY29wZS56ZXJvKSB7XG4gICAgcmV0dXJuIHYyO1xuICB9XG4gIGlmICh2MiA9PT0gc2NvcGUuemVybykge1xuICAgIHJldHVybiB2MTtcbiAgfVxuICByZXR1cm4gbmV3IEFkZChzY29wZSwgdjEsIHYyKTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHN1YihzY29wZTogTGV4aWNhbFNjb3BlLCB2MTogVmFsLCB2MjogVmFsKTogVmFsIHtcbiAgaWYgKHYxID09PSBzY29wZS56ZXJvKSB7XG4gICAgcmV0dXJuIG5ldyBOZWdhdGUoc2NvcGUsIHYyKTtcbiAgfVxuICBpZiAodjIgPT09IHNjb3BlLnplcm8pIHtcbiAgICByZXR1cm4gdjE7XG4gIH1cbiAgcmV0dXJuIG5ldyBTdWJ0cmFjdChzY29wZSwgdjEsIHYyKTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIG11bChzY29wZTogTGV4aWNhbFNjb3BlLCB2MTogVmFsLCB2MjogVmFsKTogVmFsIHtcbiAgaWYgKHYxID09PSBzY29wZS56ZXJvIHx8IHYyID09PSBzY29wZS56ZXJvKSB7XG4gICAgcmV0dXJuIHNjb3BlLnplcm87XG4gIH1cbiAgaWYgKHYxID09PSBzY29wZS5vbmUpIHtcbiAgICByZXR1cm4gdjI7XG4gIH1cbiAgaWYgKHYyID09PSBzY29wZS5vbmUpIHtcbiAgICByZXR1cm4gdjE7XG4gIH1cbiAgcmV0dXJuIG5ldyBNdWx0aXBseShzY29wZSwgdjEsIHYyKTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGRpdihzY29wZTogTGV4aWNhbFNjb3BlLCB2MTogVmFsLCB2MjogVmFsKTogVmFsIHtcbiAgaWYgKHYxID09PSBzY29wZS56ZXJvKSB7XG4gICAgcmV0dXJuIHNjb3BlLnplcm87XG4gIH1cbiAgaWYgKHYyID09PSBzY29wZS5vbmUpIHtcbiAgICByZXR1cm4gdjE7XG4gIH1cbiAgcmV0dXJuIG5ldyBEaXZpZGUoc2NvcGUsIHYxLCB2Mik7XG59XG4iLCIvKipcbiAqIENvcHlyaWdodCAyMDEzIEdvb2dsZSwgSW5jLlxuICogQ29weXJpZ2h0IDIwMTUgVHJpbS1tYXJrcyBJbmMuXG4gKiBDb3B5cmlnaHQgMjAxOSBWaXZsaW9zdHlsZSBGb3VuZGF0aW9uXG4gKlxuICogVml2bGlvc3R5bGUuanMgaXMgZnJlZSBzb2Z0d2FyZTogeW91IGNhbiByZWRpc3RyaWJ1dGUgaXQgYW5kL29yIG1vZGlmeVxuICogaXQgdW5kZXIgdGhlIHRlcm1zIG9mIHRoZSBHTlUgQWZmZXJvIEdlbmVyYWwgUHVibGljIExpY2Vuc2UgYXMgcHVibGlzaGVkIGJ5XG4gKiB0aGUgRnJlZSBTb2Z0d2FyZSBGb3VuZGF0aW9uLCBlaXRoZXIgdmVyc2lvbiAzIG9mIHRoZSBMaWNlbnNlLCBvclxuICogKGF0IHlvdXIgb3B0aW9uKSBhbnkgbGF0ZXIgdmVyc2lvbi5cbiAqXG4gKiBWaXZsaW9zdHlsZS5qcyBpcyBkaXN0cmlidXRlZCBpbiB0aGUgaG9wZSB0aGF0IGl0IHdpbGwgYmUgdXNlZnVsLFxuICogYnV0IFdJVEhPVVQgQU5ZIFdBUlJBTlRZOyB3aXRob3V0IGV2ZW4gdGhlIGltcGxpZWQgd2FycmFudHkgb2ZcbiAqIE1FUkNIQU5UQUJJTElUWSBvciBGSVRORVNTIEZPUiBBIFBBUlRJQ1VMQVIgUFVSUE9TRS4gIFNlZSB0aGVcbiAqIEdOVSBBZmZlcm8gR2VuZXJhbCBQdWJsaWMgTGljZW5zZSBmb3IgbW9yZSBkZXRhaWxzLlxuICpcbiAqIFlvdSBzaG91bGQgaGF2ZSByZWNlaXZlZCBhIGNvcHkgb2YgdGhlIEdOVSBBZmZlcm8gR2VuZXJhbCBQdWJsaWMgTGljZW5zZVxuICogYWxvbmcgd2l0aCBWaXZsaW9zdHlsZS5qcy4gIElmIG5vdCwgc2VlIDxodHRwOi8vd3d3LmdudS5vcmcvbGljZW5zZXMvPi5cbiAqXG4gKiBAZmlsZW92ZXJ2aWV3IENzcyAtIENTUyBWYWx1ZXMgYW5kIHV0aWxpdGllcyB0byBoYW5kbGUgdGhlbS5cbiAqL1xuaW1wb3J0ICogYXMgQmFzZSBmcm9tIFwiLi9iYXNlXCI7XG5pbXBvcnQgKiBhcyBFeHBycyBmcm9tIFwiLi9leHByc1wiO1xuXG5leHBvcnQgY2xhc3MgVmlzaXRvciB7XG4gIC8qKlxuICAgKiBAcmV0dXJuIHZvaWRcbiAgICovXG4gIHZpc2l0VmFsdWVzKHZhbHVlczogVmFsW10pOiBhbnkge1xuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgdmFsdWVzLmxlbmd0aDsgaSsrKSB7XG4gICAgICB2YWx1ZXNbaV0udmlzaXQodGhpcyk7XG4gICAgfVxuICB9XG5cbiAgdmlzaXRFbXB0eShlbXB0eTogVmFsKTogVmFsIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoXCJFX0NTU19FTVBUWV9OT1RfQUxMT1dFRFwiKTtcbiAgfVxuXG4gIHZpc2l0U2xhc2goc2xhc2g6IFZhbCk6IFZhbCB7XG4gICAgdGhyb3cgbmV3IEVycm9yKFwiRV9DU1NfU0xBU0hfTk9UX0FMTE9XRURcIik7XG4gIH1cblxuICB2aXNpdFN0cihzdHI6IFN0cik6IFZhbCB7XG4gICAgdGhyb3cgbmV3IEVycm9yKFwiRV9DU1NfU1RSX05PVF9BTExPV0VEXCIpO1xuICB9XG5cbiAgdmlzaXRJZGVudChpZGVudDogSWRlbnQpOiBWYWwge1xuICAgIHRocm93IG5ldyBFcnJvcihcIkVfQ1NTX0lERU5UX05PVF9BTExPV0VEXCIpO1xuICB9XG5cbiAgdmlzaXROdW1lcmljKG51bWVyaWM6IE51bWVyaWMpOiBWYWwge1xuICAgIHRocm93IG5ldyBFcnJvcihcIkVfQ1NTX05VTUVSSUNfTk9UX0FMTE9XRURcIik7XG4gIH1cblxuICB2aXNpdE51bShudW06IE51bSk6IFZhbCB7XG4gICAgdGhyb3cgbmV3IEVycm9yKFwiRV9DU1NfTlVNX05PVF9BTExPV0VEXCIpO1xuICB9XG5cbiAgdmlzaXRJbnQobnVtOiBJbnQpOiBWYWwge1xuICAgIHJldHVybiB0aGlzLnZpc2l0TnVtKG51bSk7XG4gIH1cblxuICB2aXNpdENvbG9yKGNvbG9yOiBDb2xvcik6IFZhbCB7XG4gICAgdGhyb3cgbmV3IEVycm9yKFwiRV9DU1NfQ09MT1JfTk9UX0FMTE9XRURcIik7XG4gIH1cblxuICB2aXNpdFVSTCh1cmw6IFVSTCk6IFZhbCB7XG4gICAgdGhyb3cgbmV3IEVycm9yKFwiRV9DU1NfVVJMX05PVF9BTExPV0VEXCIpO1xuICB9XG5cbiAgdmlzaXRTcGFjZUxpc3QobGlzdDogU3BhY2VMaXN0KTogVmFsIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoXCJFX0NTU19MSVNUX05PVF9BTExPV0VEXCIpO1xuICB9XG5cbiAgdmlzaXRDb21tYUxpc3QobGlzdDogQ29tbWFMaXN0KTogVmFsIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoXCJFX0NTU19DT01NQV9OT1RfQUxMT1dFRFwiKTtcbiAgfVxuXG4gIHZpc2l0RnVuYyhmdW5jOiBGdW5jKTogVmFsIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoXCJFX0NTU19GVU5DX05PVF9BTExPV0VEXCIpO1xuICB9XG5cbiAgdmlzaXRFeHByKGV4cHI6IEV4cHIpOiBWYWwge1xuICAgIHRocm93IG5ldyBFcnJvcihcIkVfQ1NTX0VYUFJfTk9UX0FMTE9XRURcIik7XG4gIH1cbn1cblxuZXhwb3J0IGNsYXNzIEZpbHRlclZpc2l0b3IgZXh0ZW5kcyBWaXNpdG9yIHtcbiAgY29uc3RydWN0b3IoKSB7XG4gICAgc3VwZXIoKTtcbiAgfVxuXG4gIHZpc2l0VmFsdWVzKHZhbHVlczogVmFsW10pOiBWYWxbXSB7XG4gICAgbGV0IGFycjogVmFsW10gPSBudWxsO1xuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgdmFsdWVzLmxlbmd0aDsgaSsrKSB7XG4gICAgICBjb25zdCBiZWZvcmUgPSB2YWx1ZXNbaV07XG4gICAgICBjb25zdCBhZnRlciA9IGJlZm9yZS52aXNpdCh0aGlzKTtcbiAgICAgIGlmIChhcnIpIHtcbiAgICAgICAgYXJyW2ldID0gYWZ0ZXI7XG4gICAgICB9IGVsc2UgaWYgKGJlZm9yZSAhPT0gYWZ0ZXIpIHtcbiAgICAgICAgYXJyID0gbmV3IEFycmF5KHZhbHVlcy5sZW5ndGgpO1xuICAgICAgICBmb3IgKGxldCBrID0gMDsgayA8IGk7IGsrKykge1xuICAgICAgICAgIGFycltrXSA9IHZhbHVlc1trXTtcbiAgICAgICAgfVxuICAgICAgICBhcnJbaV0gPSBhZnRlcjtcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIGFyciB8fCB2YWx1ZXM7XG4gIH1cblxuICAvKipcbiAgICogQG92ZXJyaWRlXG4gICAqL1xuICB2aXNpdFN0cihzdHI6IFN0cik6IFZhbCB7XG4gICAgcmV0dXJuIHN0cjtcbiAgfVxuXG4gIC8qKlxuICAgKiBAb3ZlcnJpZGVcbiAgICovXG4gIHZpc2l0SWRlbnQoaWRlbnQ6IElkZW50KTogVmFsIHtcbiAgICByZXR1cm4gaWRlbnQ7XG4gIH1cblxuICAvKipcbiAgICogQG92ZXJyaWRlXG4gICAqL1xuICB2aXNpdFNsYXNoKHNsYXNoOiBWYWwpOiBWYWwge1xuICAgIHJldHVybiBzbGFzaDtcbiAgfVxuXG4gIC8qKlxuICAgKiBAb3ZlcnJpZGVcbiAgICovXG4gIHZpc2l0TnVtZXJpYyhudW1lcmljOiBOdW1lcmljKTogVmFsIHtcbiAgICByZXR1cm4gbnVtZXJpYztcbiAgfVxuXG4gIC8qKlxuICAgKiBAb3ZlcnJpZGVcbiAgICovXG4gIHZpc2l0TnVtKG51bTogTnVtKTogVmFsIHtcbiAgICByZXR1cm4gbnVtO1xuICB9XG5cbiAgLyoqXG4gICAqIEBvdmVycmlkZVxuICAgKi9cbiAgdmlzaXRJbnQobnVtOiBJbnQpOiBWYWwge1xuICAgIHJldHVybiBudW07XG4gIH1cblxuICAvKipcbiAgICogQG92ZXJyaWRlXG4gICAqL1xuICB2aXNpdENvbG9yKGNvbG9yOiBDb2xvcik6IFZhbCB7XG4gICAgcmV0dXJuIGNvbG9yO1xuICB9XG5cbiAgLyoqXG4gICAqIEBvdmVycmlkZVxuICAgKi9cbiAgdmlzaXRVUkwodXJsOiBVUkwpOiBWYWwge1xuICAgIHJldHVybiB1cmw7XG4gIH1cblxuICAvKipcbiAgICogQG92ZXJyaWRlXG4gICAqL1xuICB2aXNpdFNwYWNlTGlzdChsaXN0OiBTcGFjZUxpc3QpOiBWYWwge1xuICAgIGNvbnN0IHZhbHVlcyA9IHRoaXMudmlzaXRWYWx1ZXMobGlzdC52YWx1ZXMpO1xuICAgIGlmICh2YWx1ZXMgPT09IGxpc3QudmFsdWVzKSB7XG4gICAgICByZXR1cm4gbGlzdDtcbiAgICB9XG4gICAgcmV0dXJuIG5ldyBTcGFjZUxpc3QodmFsdWVzKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBAb3ZlcnJpZGVcbiAgICovXG4gIHZpc2l0Q29tbWFMaXN0KGxpc3Q6IENvbW1hTGlzdCk6IFZhbCB7XG4gICAgY29uc3QgdmFsdWVzID0gdGhpcy52aXNpdFZhbHVlcyhsaXN0LnZhbHVlcyk7XG4gICAgaWYgKHZhbHVlcyA9PT0gbGlzdC52YWx1ZXMpIHtcbiAgICAgIHJldHVybiBsaXN0O1xuICAgIH1cbiAgICByZXR1cm4gbmV3IENvbW1hTGlzdCh2YWx1ZXMpO1xuICB9XG5cbiAgLyoqXG4gICAqIEBvdmVycmlkZVxuICAgKi9cbiAgdmlzaXRGdW5jKGZ1bmM6IEZ1bmMpOiBWYWwge1xuICAgIGNvbnN0IHZhbHVlcyA9IHRoaXMudmlzaXRWYWx1ZXMoZnVuYy52YWx1ZXMpO1xuICAgIGlmICh2YWx1ZXMgPT09IGZ1bmMudmFsdWVzKSB7XG4gICAgICByZXR1cm4gZnVuYztcbiAgICB9XG4gICAgcmV0dXJuIG5ldyBGdW5jKGZ1bmMubmFtZSwgdmFsdWVzKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBAb3ZlcnJpZGVcbiAgICovXG4gIHZpc2l0RXhwcihleHByOiBFeHByKTogVmFsIHtcbiAgICByZXR1cm4gZXhwcjtcbiAgfVxufVxuXG5leHBvcnQgY2xhc3MgVmFsIHtcbiAgLyoqXG4gICAqIEBvdmVycmlkZVxuICAgKi9cbiAgdG9TdHJpbmcoKTogc3RyaW5nIHtcbiAgICBjb25zdCBidWYgPSBuZXcgQmFzZS5TdHJpbmdCdWZmZXIoKTtcbiAgICB0aGlzLmFwcGVuZFRvKGJ1ZiwgdHJ1ZSk7XG4gICAgcmV0dXJuIGJ1Zi50b1N0cmluZygpO1xuICB9XG5cbiAgc3RyaW5nVmFsdWUoKTogc3RyaW5nIHtcbiAgICBjb25zdCBidWYgPSBuZXcgQmFzZS5TdHJpbmdCdWZmZXIoKTtcbiAgICB0aGlzLmFwcGVuZFRvKGJ1ZiwgZmFsc2UpO1xuICAgIHJldHVybiBidWYudG9TdHJpbmcoKTtcbiAgfVxuXG4gIHRvRXhwcihzY29wZTogRXhwcnMuTGV4aWNhbFNjb3BlLCByZWY6IEV4cHJzLlZhbCk6IEV4cHJzLlZhbCB7XG4gICAgdGhyb3cgbmV3IEVycm9yKFwiRl9BQlNUUkFDVFwiKTtcbiAgfVxuXG4gIGFwcGVuZFRvKGJ1ZjogQmFzZS5TdHJpbmdCdWZmZXIsIHRvU3RyaW5nOiBib29sZWFuKTogdm9pZCB7XG4gICAgYnVmLmFwcGVuZChcIltlcnJvcl1cIik7XG4gIH1cblxuICBpc0V4cHIoKTogYm9vbGVhbiB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG5cbiAgaXNOdW1lcmljKCk6IGJvb2xlYW4ge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuXG4gIGlzTnVtKCk6IGJvb2xlYW4ge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuXG4gIGlzSWRlbnQoKTogYm9vbGVhbiB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG5cbiAgaXNTcGFjZUxpc3QoKTogYm9vbGVhbiB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG5cbiAgdmlzaXQodmlzaXRvcjogYW55KTogYW55IHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoXCJGX0FCU1RSQUNUXCIpO1xuICB9XG59XG5cbmV4cG9ydCBjbGFzcyBFbXB0eSBleHRlbmRzIFZhbCB7XG4gIHByaXZhdGUgc3RhdGljIGVtcHR5OiBFbXB0eTtcblxuICBwdWJsaWMgc3RhdGljIGdldCBpbnN0YW5jZSgpOiBFbXB0eSB7XG4gICAgaWYgKCF0aGlzLmVtcHR5KSB7XG4gICAgICB0aGlzLmVtcHR5ID0gbmV3IEVtcHR5KCk7XG4gICAgfVxuICAgIHJldHVybiB0aGlzLmVtcHR5O1xuICB9XG5cbiAgcHJpdmF0ZSBjb25zdHJ1Y3RvcigpIHtcbiAgICBzdXBlcigpO1xuICB9XG5cbiAgLyoqXG4gICAqIEBvdmVycmlkZVxuICAgKi9cbiAgdG9FeHByKHNjb3BlOiBFeHBycy5MZXhpY2FsU2NvcGUsIHJlZjogRXhwcnMuVmFsKTogRXhwcnMuVmFsIHtcbiAgICByZXR1cm4gbmV3IEV4cHJzLkNvbnN0KHNjb3BlLCBcIlwiKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBAb3ZlcnJpZGVcbiAgICovXG4gIGFwcGVuZFRvKGJ1ZjogQmFzZS5TdHJpbmdCdWZmZXIsIHRvU3RyaW5nOiBib29sZWFuKTogdm9pZCB7fVxuXG4gIC8qKlxuICAgKiBAb3ZlcnJpZGVcbiAgICovXG4gIHZpc2l0KHZpc2l0b3I6IGFueSk6IGFueSB7XG4gICAgcmV0dXJuIHZpc2l0b3IudmlzaXRFbXB0eSh0aGlzKTtcbiAgfVxufVxuXG5leHBvcnQgY29uc3QgZW1wdHk6IEVtcHR5ID0gRW1wdHkuaW5zdGFuY2U7XG5cbmV4cG9ydCBjbGFzcyBTbGFzaCBleHRlbmRzIFZhbCB7XG4gIHByaXZhdGUgc3RhdGljIHNsYXNoOiBTbGFzaDtcblxuICBwdWJsaWMgc3RhdGljIGdldCBpbnN0YW5jZSgpOiBTbGFzaCB7XG4gICAgaWYgKCF0aGlzLnNsYXNoKSB7XG4gICAgICB0aGlzLnNsYXNoID0gbmV3IFNsYXNoKCk7XG4gICAgfVxuICAgIHJldHVybiB0aGlzLnNsYXNoO1xuICB9XG5cbiAgcHJpdmF0ZSBjb25zdHJ1Y3RvcigpIHtcbiAgICBzdXBlcigpO1xuICB9XG5cbiAgLyoqXG4gICAqIEBvdmVycmlkZVxuICAgKi9cbiAgdG9FeHByKHNjb3BlOiBFeHBycy5MZXhpY2FsU2NvcGUsIHJlZjogRXhwcnMuVmFsKTogRXhwcnMuVmFsIHtcbiAgICByZXR1cm4gbmV3IEV4cHJzLkNvbnN0KHNjb3BlLCBcIi9cIik7XG4gIH1cblxuICAvKipcbiAgICogQG92ZXJyaWRlXG4gICAqL1xuICBhcHBlbmRUbyhidWY6IEJhc2UuU3RyaW5nQnVmZmVyLCB0b1N0cmluZzogYm9vbGVhbik6IHZvaWQge1xuICAgIGJ1Zi5hcHBlbmQoXCIvXCIpO1xuICB9XG5cbiAgLyoqXG4gICAqIEBvdmVycmlkZVxuICAgKi9cbiAgdmlzaXQodmlzaXRvcjogYW55KTogYW55IHtcbiAgICByZXR1cm4gdmlzaXRvci52aXNpdFNsYXNoKHRoaXMpO1xuICB9XG59XG5cbmV4cG9ydCBjb25zdCBzbGFzaDogU2xhc2ggPSBTbGFzaC5pbnN0YW5jZTtcblxuZXhwb3J0IGNsYXNzIFN0ciBleHRlbmRzIFZhbCB7XG4gIGNvbnN0cnVjdG9yKHB1YmxpYyBzdHI6IHN0cmluZykge1xuICAgIHN1cGVyKCk7XG4gIH1cblxuICAvKipcbiAgICogQG92ZXJyaWRlXG4gICAqL1xuICB0b0V4cHIoc2NvcGU6IEV4cHJzLkxleGljYWxTY29wZSwgcmVmOiBFeHBycy5WYWwpOiBFeHBycy5WYWwge1xuICAgIHJldHVybiBuZXcgRXhwcnMuQ29uc3Qoc2NvcGUsIHRoaXMuc3RyKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBAb3ZlcnJpZGVcbiAgICovXG4gIGFwcGVuZFRvKGJ1ZjogQmFzZS5TdHJpbmdCdWZmZXIsIHRvU3RyaW5nOiBib29sZWFuKTogdm9pZCB7XG4gICAgaWYgKHRvU3RyaW5nKSB7XG4gICAgICBidWYuYXBwZW5kKCdcIicpO1xuICAgICAgYnVmLmFwcGVuZChCYXNlLmVzY2FwZUNTU1N0cih0aGlzLnN0cikpO1xuICAgICAgYnVmLmFwcGVuZCgnXCInKTtcbiAgICB9IGVsc2Uge1xuICAgICAgYnVmLmFwcGVuZCh0aGlzLnN0cik7XG4gICAgfVxuICB9XG5cbiAgLyoqXG4gICAqIEBvdmVycmlkZVxuICAgKi9cbiAgdmlzaXQodmlzaXRvcjogYW55KTogYW55IHtcbiAgICByZXR1cm4gdmlzaXRvci52aXNpdFN0cih0aGlzKTtcbiAgfVxufVxuXG5jb25zdCBuYW1lVGFibGUgPSB7fTtcblxuZXhwb3J0IGNsYXNzIElkZW50IGV4dGVuZHMgVmFsIHtcbiAgY29uc3RydWN0b3IocHVibGljIG5hbWU6IHN0cmluZykge1xuICAgIHN1cGVyKCk7XG4gICAgaWYgKG5hbWVUYWJsZVtuYW1lXSkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKFwiRV9JTlZBTElEX0NBTExcIik7XG4gICAgfVxuICAgIG5hbWVUYWJsZVtuYW1lXSA9IHRoaXM7XG4gIH1cblxuICAvKipcbiAgICogQG92ZXJyaWRlXG4gICAqL1xuICB0b0V4cHIoc2NvcGU6IEV4cHJzLkxleGljYWxTY29wZSwgcmVmOiBFeHBycy5WYWwpOiBFeHBycy5WYWwge1xuICAgIHJldHVybiBuZXcgRXhwcnMuQ29uc3Qoc2NvcGUsIHRoaXMubmFtZSk7XG4gIH1cblxuICAvKipcbiAgICogQG92ZXJyaWRlXG4gICAqL1xuICBhcHBlbmRUbyhidWY6IEJhc2UuU3RyaW5nQnVmZmVyLCB0b1N0cmluZzogYm9vbGVhbik6IHZvaWQge1xuICAgIGlmICh0b1N0cmluZykge1xuICAgICAgYnVmLmFwcGVuZChCYXNlLmVzY2FwZUNTU0lkZW50KHRoaXMubmFtZSkpO1xuICAgIH0gZWxzZSB7XG4gICAgICBidWYuYXBwZW5kKHRoaXMubmFtZSk7XG4gICAgfVxuICB9XG5cbiAgLyoqXG4gICAqIEBvdmVycmlkZVxuICAgKi9cbiAgdmlzaXQodmlzaXRvcjogYW55KTogYW55IHtcbiAgICByZXR1cm4gdmlzaXRvci52aXNpdElkZW50KHRoaXMpO1xuICB9XG5cbiAgLyoqXG4gICAqIEBvdmVycmlkZVxuICAgKi9cbiAgaXNJZGVudCgpOiBib29sZWFuIHtcbiAgICByZXR1cm4gdHJ1ZTtcbiAgfVxufVxuXG5leHBvcnQgZnVuY3Rpb24gZ2V0TmFtZShuYW1lOiBzdHJpbmcpOiBJZGVudCB7XG4gIGxldCByID0gbmFtZVRhYmxlW25hbWVdO1xuICBpZiAoIXIpIHtcbiAgICByID0gbmV3IElkZW50KG5hbWUpO1xuICB9XG4gIHJldHVybiByO1xufVxuXG5leHBvcnQgY2xhc3MgTnVtZXJpYyBleHRlbmRzIFZhbCB7XG4gIHVuaXQ6IHN0cmluZztcblxuICBjb25zdHJ1Y3RvcihwdWJsaWMgbnVtOiBudW1iZXIsIHVuaXQ6IHN0cmluZykge1xuICAgIHN1cGVyKCk7XG4gICAgdGhpcy51bml0ID0gdW5pdC50b0xvd2VyQ2FzZSgpOyAvLyB1bml0cyBhcmUgY2FzZS1pbnNlbnNpdGl2ZSBpbiBDU1NcbiAgfVxuXG4gIC8qKlxuICAgKiBAb3ZlcnJpZGVcbiAgICovXG4gIHRvRXhwcihzY29wZTogRXhwcnMuTGV4aWNhbFNjb3BlLCByZWY6IEV4cHJzLlZhbCk6IEV4cHJzLlZhbCB7XG4gICAgaWYgKHRoaXMubnVtID09IDApIHtcbiAgICAgIHJldHVybiBzY29wZS56ZXJvO1xuICAgIH1cbiAgICBpZiAocmVmICYmIHRoaXMudW5pdCA9PSBcIiVcIikge1xuICAgICAgaWYgKHRoaXMubnVtID09IDEwMCkge1xuICAgICAgICByZXR1cm4gcmVmO1xuICAgICAgfVxuICAgICAgcmV0dXJuIG5ldyBFeHBycy5NdWx0aXBseShcbiAgICAgICAgc2NvcGUsXG4gICAgICAgIHJlZixcbiAgICAgICAgbmV3IEV4cHJzLkNvbnN0KHNjb3BlLCB0aGlzLm51bSAvIDEwMCksXG4gICAgICApO1xuICAgIH1cbiAgICByZXR1cm4gbmV3IEV4cHJzLk51bWVyaWMoc2NvcGUsIHRoaXMubnVtLCB0aGlzLnVuaXQpO1xuICB9XG5cbiAgLyoqXG4gICAqIEBvdmVycmlkZVxuICAgKi9cbiAgYXBwZW5kVG8oYnVmOiBCYXNlLlN0cmluZ0J1ZmZlciwgdG9TdHJpbmc6IGJvb2xlYW4pOiB2b2lkIHtcbiAgICBidWYuYXBwZW5kKHRoaXMubnVtLnRvU3RyaW5nKCkpO1xuICAgIGJ1Zi5hcHBlbmQodGhpcy51bml0KTtcbiAgfVxuXG4gIC8qKlxuICAgKiBAb3ZlcnJpZGVcbiAgICovXG4gIHZpc2l0KHZpc2l0b3I6IGFueSk6IGFueSB7XG4gICAgcmV0dXJuIHZpc2l0b3IudmlzaXROdW1lcmljKHRoaXMpO1xuICB9XG5cbiAgLyoqXG4gICAqIEBvdmVycmlkZVxuICAgKi9cbiAgaXNOdW1lcmljKCk6IGJvb2xlYW4ge1xuICAgIHJldHVybiB0cnVlO1xuICB9XG59XG5cbmV4cG9ydCBjbGFzcyBOdW0gZXh0ZW5kcyBWYWwge1xuICBjb25zdHJ1Y3RvcihwdWJsaWMgbnVtOiBudW1iZXIpIHtcbiAgICBzdXBlcigpO1xuICB9XG5cbiAgLyoqXG4gICAqIEBvdmVycmlkZVxuICAgKi9cbiAgdG9FeHByKHNjb3BlOiBFeHBycy5MZXhpY2FsU2NvcGUsIHJlZjogRXhwcnMuVmFsKTogRXhwcnMuVmFsIHtcbiAgICBpZiAodGhpcy5udW0gPT0gMCkge1xuICAgICAgcmV0dXJuIHNjb3BlLnplcm87XG4gICAgfVxuICAgIGlmICh0aGlzLm51bSA9PSAxKSB7XG4gICAgICByZXR1cm4gc2NvcGUub25lO1xuICAgIH1cbiAgICByZXR1cm4gbmV3IEV4cHJzLkNvbnN0KHNjb3BlLCB0aGlzLm51bSk7XG4gIH1cblxuICAvKipcbiAgICogQG92ZXJyaWRlXG4gICAqL1xuICBhcHBlbmRUbyhidWY6IEJhc2UuU3RyaW5nQnVmZmVyLCB0b1N0cmluZzogYm9vbGVhbik6IHZvaWQge1xuICAgIGJ1Zi5hcHBlbmQodGhpcy5udW0udG9TdHJpbmcoKSk7XG4gIH1cblxuICAvKipcbiAgICogQG92ZXJyaWRlXG4gICAqL1xuICB2aXNpdCh2aXNpdG9yOiBhbnkpOiBhbnkge1xuICAgIHJldHVybiB2aXNpdG9yLnZpc2l0TnVtKHRoaXMpO1xuICB9XG5cbiAgLyoqXG4gICAqIEBvdmVycmlkZVxuICAgKi9cbiAgaXNOdW0oKTogYm9vbGVhbiB7XG4gICAgcmV0dXJuIHRydWU7XG4gIH1cbn1cblxuZXhwb3J0IGNsYXNzIEludCBleHRlbmRzIE51bSB7XG4gIGNvbnN0cnVjdG9yKG51bTogbnVtYmVyKSB7XG4gICAgc3VwZXIobnVtKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBAb3ZlcnJpZGVcbiAgICovXG4gIHZpc2l0KHZpc2l0b3I6IGFueSk6IGFueSB7XG4gICAgcmV0dXJuIHZpc2l0b3IudmlzaXRJbnQodGhpcyk7XG4gIH1cbn1cblxuZXhwb3J0IGNsYXNzIENvbG9yIGV4dGVuZHMgVmFsIHtcbiAgY29uc3RydWN0b3IocHVibGljIHJnYjogbnVtYmVyKSB7XG4gICAgc3VwZXIoKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBAb3ZlcnJpZGVcbiAgICovXG4gIGFwcGVuZFRvKGJ1ZjogQmFzZS5TdHJpbmdCdWZmZXIsIHRvU3RyaW5nOiBib29sZWFuKTogdm9pZCB7XG4gICAgYnVmLmFwcGVuZChcIiNcIik7XG4gICAgY29uc3Qgc3RyID0gdGhpcy5yZ2IudG9TdHJpbmcoMTYpO1xuICAgIGJ1Zi5hcHBlbmQoXCIwMDAwMDBcIi5zdWJzdHIoc3RyLmxlbmd0aCkpO1xuICAgIGJ1Zi5hcHBlbmQoc3RyKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBAb3ZlcnJpZGVcbiAgICovXG4gIHZpc2l0KHZpc2l0b3I6IGFueSk6IGFueSB7XG4gICAgcmV0dXJuIHZpc2l0b3IudmlzaXRDb2xvcih0aGlzKTtcbiAgfVxufVxuXG5leHBvcnQgY2xhc3MgVVJMIGV4dGVuZHMgVmFsIHtcbiAgY29uc3RydWN0b3IocHVibGljIHVybDogc3RyaW5nKSB7XG4gICAgc3VwZXIoKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBAb3ZlcnJpZGVcbiAgICovXG4gIGFwcGVuZFRvKGJ1ZjogQmFzZS5TdHJpbmdCdWZmZXIsIHRvU3RyaW5nOiBib29sZWFuKTogdm9pZCB7XG4gICAgYnVmLmFwcGVuZCgndXJsKFwiJyk7XG4gICAgYnVmLmFwcGVuZChCYXNlLmVzY2FwZUNTU1N0cih0aGlzLnVybCkpO1xuICAgIGJ1Zi5hcHBlbmQoJ1wiKScpO1xuICB9XG5cbiAgLyoqXG4gICAqIEBvdmVycmlkZVxuICAgKi9cbiAgdmlzaXQodmlzaXRvcjogYW55KTogYW55IHtcbiAgICByZXR1cm4gdmlzaXRvci52aXNpdFVSTCh0aGlzKTtcbiAgfVxufVxuXG5leHBvcnQgZnVuY3Rpb24gYXBwZW5kTGlzdChcbiAgYnVmOiBCYXNlLlN0cmluZ0J1ZmZlcixcbiAgdmFsdWVzOiBWYWxbXSxcbiAgc2VwYXJhdG9yOiBzdHJpbmcsXG4gIHRvU3RyaW5nOiBib29sZWFuLFxuKTogdm9pZCB7XG4gIGNvbnN0IGxlbmd0aCA9IHZhbHVlcy5sZW5ndGg7XG4gIGlmIChsZW5ndGggPiAwKSB7XG4gICAgdmFsdWVzWzBdLmFwcGVuZFRvKGJ1ZiwgdG9TdHJpbmcpO1xuICAgIGZvciAobGV0IGkgPSAxOyBpIDwgbGVuZ3RoOyBpKyspIHtcbiAgICAgIGJ1Zi5hcHBlbmQoc2VwYXJhdG9yKTtcbiAgICAgIHZhbHVlc1tpXS5hcHBlbmRUbyhidWYsIHRvU3RyaW5nKTtcbiAgICB9XG4gIH1cbn1cblxuZXhwb3J0IGNsYXNzIFNwYWNlTGlzdCBleHRlbmRzIFZhbCB7XG4gIGNvbnN0cnVjdG9yKHB1YmxpYyB2YWx1ZXM6IFZhbFtdKSB7XG4gICAgc3VwZXIoKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBAb3ZlcnJpZGVcbiAgICovXG4gIGFwcGVuZFRvKGJ1ZjogQmFzZS5TdHJpbmdCdWZmZXIsIHRvU3RyaW5nOiBib29sZWFuKTogdm9pZCB7XG4gICAgYXBwZW5kTGlzdChidWYsIHRoaXMudmFsdWVzLCBcIiBcIiwgdG9TdHJpbmcpO1xuICB9XG5cbiAgLyoqXG4gICAqIEBvdmVycmlkZVxuICAgKi9cbiAgdmlzaXQodmlzaXRvcjogYW55KTogYW55IHtcbiAgICByZXR1cm4gdmlzaXRvci52aXNpdFNwYWNlTGlzdCh0aGlzKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBAb3ZlcnJpZGVcbiAgICovXG4gIGlzU3BhY2VMaXN0KCk6IGJvb2xlYW4ge1xuICAgIHJldHVybiB0cnVlO1xuICB9XG59XG5cbmV4cG9ydCBjbGFzcyBDb21tYUxpc3QgZXh0ZW5kcyBWYWwge1xuICBjb25zdHJ1Y3RvcihwdWJsaWMgdmFsdWVzOiBWYWxbXSkge1xuICAgIHN1cGVyKCk7XG4gIH1cblxuICAvKipcbiAgICogQG92ZXJyaWRlXG4gICAqL1xuICBhcHBlbmRUbyhidWY6IEJhc2UuU3RyaW5nQnVmZmVyLCB0b1N0cmluZzogYm9vbGVhbik6IHZvaWQge1xuICAgIGFwcGVuZExpc3QoYnVmLCB0aGlzLnZhbHVlcywgXCIsXCIsIHRvU3RyaW5nKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBAb3ZlcnJpZGVcbiAgICovXG4gIHZpc2l0KHZpc2l0b3I6IGFueSk6IGFueSB7XG4gICAgcmV0dXJuIHZpc2l0b3IudmlzaXRDb21tYUxpc3QodGhpcyk7XG4gIH1cbn1cblxuZXhwb3J0IGNsYXNzIEZ1bmMgZXh0ZW5kcyBWYWwge1xuICBjb25zdHJ1Y3RvcihwdWJsaWMgbmFtZTogc3RyaW5nLCBwdWJsaWMgdmFsdWVzOiBWYWxbXSkge1xuICAgIHN1cGVyKCk7XG4gIH1cblxuICAvKipcbiAgICogQG92ZXJyaWRlXG4gICAqL1xuICBhcHBlbmRUbyhidWY6IEJhc2UuU3RyaW5nQnVmZmVyLCB0b1N0cmluZzogYm9vbGVhbik6IHZvaWQge1xuICAgIGJ1Zi5hcHBlbmQoQmFzZS5lc2NhcGVDU1NJZGVudCh0aGlzLm5hbWUpKTtcbiAgICBidWYuYXBwZW5kKFwiKFwiKTtcbiAgICBhcHBlbmRMaXN0KGJ1ZiwgdGhpcy52YWx1ZXMsIFwiLFwiLCB0b1N0cmluZyk7XG4gICAgYnVmLmFwcGVuZChcIilcIik7XG4gIH1cblxuICAvKipcbiAgICogQG92ZXJyaWRlXG4gICAqL1xuICB2aXNpdCh2aXNpdG9yOiBhbnkpOiBhbnkge1xuICAgIHJldHVybiB2aXNpdG9yLnZpc2l0RnVuYyh0aGlzKTtcbiAgfVxufVxuXG5leHBvcnQgY2xhc3MgRXhwciBleHRlbmRzIFZhbCB7XG4gIGNvbnN0cnVjdG9yKHB1YmxpYyBleHByOiBFeHBycy5WYWwpIHtcbiAgICBzdXBlcigpO1xuICB9XG5cbiAgLyoqXG4gICAqIEBvdmVycmlkZVxuICAgKi9cbiAgdG9FeHByKCk6IEV4cHJzLlZhbCB7XG4gICAgcmV0dXJuIHRoaXMuZXhwcjtcbiAgfVxuXG4gIC8qKlxuICAgKiBAb3ZlcnJpZGVcbiAgICovXG4gIGFwcGVuZFRvKGJ1ZjogQmFzZS5TdHJpbmdCdWZmZXIsIHRvU3RyaW5nOiBib29sZWFuKTogdm9pZCB7XG4gICAgYnVmLmFwcGVuZChcIi1lcHVieC1leHByKFwiKTtcbiAgICB0aGlzLmV4cHIuYXBwZW5kVG8oYnVmLCAwKTtcbiAgICBidWYuYXBwZW5kKFwiKVwiKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBAb3ZlcnJpZGVcbiAgICovXG4gIHZpc2l0KHZpc2l0b3I6IGFueSk6IGFueSB7XG4gICAgcmV0dXJuIHZpc2l0b3IudmlzaXRFeHByKHRoaXMpO1xuICB9XG5cbiAgLyoqXG4gICAqIEBvdmVycmlkZVxuICAgKi9cbiAgaXNFeHByKCk6IGJvb2xlYW4ge1xuICAgIHJldHVybiB0cnVlO1xuICB9XG59XG5cbmV4cG9ydCBmdW5jdGlvbiB0b051bWJlcih2YWw6IFZhbCwgY29udGV4dDogRXhwcnMuQ29udGV4dCk6IG51bWJlciB7XG4gIGlmICh2YWwpIHtcbiAgICBpZiAodmFsLmlzTnVtZXJpYygpKSB7XG4gICAgICBjb25zdCBudW1lcmljID0gdmFsIGFzIE51bWVyaWM7XG4gICAgICByZXR1cm4gY29udGV4dC5xdWVyeVVuaXRTaXplKG51bWVyaWMudW5pdCwgZmFsc2UpICogbnVtZXJpYy5udW07XG4gICAgfVxuICAgIGlmICh2YWwuaXNOdW0oKSkge1xuICAgICAgcmV0dXJuICh2YWwgYXMgTnVtKS5udW07XG4gICAgfVxuICB9XG4gIHJldHVybiAwO1xufVxuXG4vKipcbiAqIENvbnZlcnQgbnVtZXJpYyB2YWx1ZSB0byBweFxuICovXG5leHBvcnQgZnVuY3Rpb24gY29udmVydE51bWVyaWNUb1B4KHZhbDogVmFsLCBjb250ZXh0OiBFeHBycy5Db250ZXh0KTogTnVtZXJpYyB7XG4gIHJldHVybiBuZXcgTnVtZXJpYyh0b051bWJlcih2YWwsIGNvbnRleHQpLCBcInB4XCIpO1xufVxuXG5leHBvcnQgY29uc3QgaWRlbnQ6IHsgW2tleTogc3RyaW5nXTogSWRlbnQgfSA9IHtcbiAgYWJzb2x1dGU6IGdldE5hbWUoXCJhYnNvbHV0ZVwiKSxcbiAgYWxsOiBnZXROYW1lKFwiYWxsXCIpLFxuICBhbHdheXM6IGdldE5hbWUoXCJhbHdheXNcIiksXG4gIGF1dG86IGdldE5hbWUoXCJhdXRvXCIpLFxuICBhdm9pZDogZ2V0TmFtZShcImF2b2lkXCIpLFxuICBiYWxhbmNlOiBnZXROYW1lKFwiYmFsYW5jZVwiKSxcbiAgYmFsYW5jZV9hbGw6IGdldE5hbWUoXCJiYWxhbmNlLWFsbFwiKSxcbiAgYmxvY2s6IGdldE5hbWUoXCJibG9ja1wiKSxcbiAgYmxvY2tfZW5kOiBnZXROYW1lKFwiYmxvY2stZW5kXCIpLFxuICBibG9ja19zdGFydDogZ2V0TmFtZShcImJsb2NrLXN0YXJ0XCIpLFxuICBib3RoOiBnZXROYW1lKFwiYm90aFwiKSxcbiAgYm90dG9tOiBnZXROYW1lKFwiYm90dG9tXCIpLFxuICBib3JkZXJfYm94OiBnZXROYW1lKFwiYm9yZGVyLWJveFwiKSxcbiAgYnJlYWtfYWxsOiBnZXROYW1lKFwiYnJlYWstYWxsXCIpLFxuICBicmVha193b3JkOiBnZXROYW1lKFwiYnJlYWstd29yZFwiKSxcbiAgY3JvcDogZ2V0TmFtZShcImNyb3BcIiksXG4gIGNyb3NzOiBnZXROYW1lKFwiY3Jvc3NcIiksXG4gIGNvbHVtbjogZ2V0TmFtZShcImNvbHVtblwiKSxcbiAgZXhjbHVzaXZlOiBnZXROYW1lKFwiZXhjbHVzaXZlXCIpLFxuICBfZmFsc2U6IGdldE5hbWUoXCJmYWxzZVwiKSxcbiAgZml4ZWQ6IGdldE5hbWUoXCJmaXhlZFwiKSxcbiAgZmxleDogZ2V0TmFtZShcImZsZXhcIiksXG4gIGZvb3Rub3RlOiBnZXROYW1lKFwiZm9vdG5vdGVcIiksXG4gIGZvb3RlcjogZ2V0TmFtZShcImZvb3RlclwiKSxcbiAgaGVhZGVyOiBnZXROYW1lKFwiaGVhZGVyXCIpLFxuICBoaWRkZW46IGdldE5hbWUoXCJoaWRkZW5cIiksXG4gIGhvcml6b250YWxfdGI6IGdldE5hbWUoXCJob3Jpem9udGFsLXRiXCIpLFxuICBpbmhlcml0OiBnZXROYW1lKFwiaW5oZXJpdFwiKSxcbiAgaW5saW5lOiBnZXROYW1lKFwiaW5saW5lXCIpLFxuICBpbmxpbmVfYmxvY2s6IGdldE5hbWUoXCJpbmxpbmUtYmxvY2tcIiksXG4gIGlubGluZV9lbmQ6IGdldE5hbWUoXCJpbmxpbmUtZW5kXCIpLFxuICBpbmxpbmVfc3RhcnQ6IGdldE5hbWUoXCJpbmxpbmUtc3RhcnRcIiksXG4gIGxhbmRzY2FwZTogZ2V0TmFtZShcImxhbmRzY2FwZVwiKSxcbiAgbGVmdDogZ2V0TmFtZShcImxlZnRcIiksXG4gIGxpbmU6IGdldE5hbWUoXCJsaW5lXCIpLFxuICBsaXN0X2l0ZW06IGdldE5hbWUoXCJsaXN0LWl0ZW1cIiksXG4gIGx0cjogZ2V0TmFtZShcImx0clwiKSxcbiAgbWFudWFsOiBnZXROYW1lKFwibWFudWFsXCIpLFxuICBub25lOiBnZXROYW1lKFwibm9uZVwiKSxcbiAgbm9ybWFsOiBnZXROYW1lKFwibm9ybWFsXCIpLFxuICBvZWJfcGFnZV9mb290OiBnZXROYW1lKFwib2ViLXBhZ2UtZm9vdFwiKSxcbiAgb2ViX3BhZ2VfaGVhZDogZ2V0TmFtZShcIm9lYi1wYWdlLWhlYWRcIiksXG4gIHBhZ2U6IGdldE5hbWUoXCJwYWdlXCIpLFxuICByZWxhdGl2ZTogZ2V0TmFtZShcInJlbGF0aXZlXCIpLFxuICByaWdodDogZ2V0TmFtZShcInJpZ2h0XCIpLFxuICBzYW1lOiBnZXROYW1lKFwic2FtZVwiKSxcbiAgc2NhbGU6IGdldE5hbWUoXCJzY2FsZVwiKSxcbiAgc25hcF9ibG9jazogZ2V0TmFtZShcInNuYXAtYmxvY2tcIiksXG4gIHNwcmVhZDogZ2V0TmFtZShcInNwcmVhZFwiKSxcbiAgX3N0YXRpYzogZ2V0TmFtZShcInN0YXRpY1wiKSxcbiAgcnRsOiBnZXROYW1lKFwicnRsXCIpLFxuICB0YWJsZTogZ2V0TmFtZShcInRhYmxlXCIpLFxuICB0YWJsZV9jYXB0aW9uOiBnZXROYW1lKFwidGFibGUtY2FwdGlvblwiKSxcbiAgdGFibGVfY2VsbDogZ2V0TmFtZShcInRhYmxlLWNlbGxcIiksXG4gIHRhYmxlX2Zvb3Rlcl9ncm91cDogZ2V0TmFtZShcInRhYmxlLWZvb3Rlci1ncm91cFwiKSxcbiAgdGFibGVfaGVhZGVyX2dyb3VwOiBnZXROYW1lKFwidGFibGUtaGVhZGVyLWdyb3VwXCIpLFxuICB0YWJsZV9yb3c6IGdldE5hbWUoXCJ0YWJsZS1yb3dcIiksXG4gIHRvcDogZ2V0TmFtZShcInRvcFwiKSxcbiAgdHJhbnNwYXJlbnQ6IGdldE5hbWUoXCJ0cmFuc3BhcmVudFwiKSxcbiAgdmVydGljYWxfbHI6IGdldE5hbWUoXCJ2ZXJ0aWNhbC1sclwiKSxcbiAgdmVydGljYWxfcmw6IGdldE5hbWUoXCJ2ZXJ0aWNhbC1ybFwiKSxcbiAgdmlzaWJsZTogZ2V0TmFtZShcInZpc2libGVcIiksXG4gIF90cnVlOiBnZXROYW1lKFwidHJ1ZVwiKSxcbn07XG5cbmV4cG9ydCBjb25zdCBodW5kcmVkUGVyY2VudDogTnVtZXJpYyA9IG5ldyBOdW1lcmljKDEwMCwgXCIlXCIpO1xuXG5leHBvcnQgY29uc3QgZnVsbFdpZHRoOiBOdW1lcmljID0gbmV3IE51bWVyaWMoMTAwLCBcInB2d1wiKTtcblxuZXhwb3J0IGNvbnN0IGZ1bGxIZWlnaHQ6IE51bWVyaWMgPSBuZXcgTnVtZXJpYygxMDAsIFwicHZoXCIpO1xuXG5leHBvcnQgY29uc3QgbnVtZXJpY1plcm86IE51bWVyaWMgPSBuZXcgTnVtZXJpYygwLCBcInB4XCIpO1xuXG5leHBvcnQgY29uc3QgcHJvY2Vzc2luZ09yZGVyID0ge1xuICBcImZvbnQtc2l6ZVwiOiAxLFxuICBjb2xvcjogMixcbn07XG5cbi8qKlxuICogRnVuY3Rpb24gdG8gc29ydCBwcm9wZXJ0eSBuYW1lcyBpbiB0aGUgb3JkZXIgdGhleSBzaG91bGQgYmUgcHJvY2Vzc2VkXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBwcm9jZXNzaW5nT3JkZXJGbihuYW1lMTogc3RyaW5nLCBuYW1lMjogc3RyaW5nKTogbnVtYmVyIHtcbiAgY29uc3QgbjEgPSBwcm9jZXNzaW5nT3JkZXJbbmFtZTFdIHx8IE51bWJlci5NQVhfVkFMVUU7XG4gIGNvbnN0IG4yID0gcHJvY2Vzc2luZ09yZGVyW25hbWUyXSB8fCBOdW1iZXIuTUFYX1ZBTFVFO1xuICByZXR1cm4gbjEgLSBuMjtcbn1cbiIsIi8qKlxuICogQ29weXJpZ2h0IDIwMTMgR29vZ2xlLCBJbmMuXG4gKiBDb3B5cmlnaHQgMjAxNiBUcmltLW1hcmtzIEluYy5cbiAqIENvcHlyaWdodCAyMDE5IFZpdmxpb3N0eWxlIEZvdW5kYXRpb25cbiAqXG4gKiBWaXZsaW9zdHlsZS5qcyBpcyBmcmVlIHNvZnR3YXJlOiB5b3UgY2FuIHJlZGlzdHJpYnV0ZSBpdCBhbmQvb3IgbW9kaWZ5XG4gKiBpdCB1bmRlciB0aGUgdGVybXMgb2YgdGhlIEdOVSBBZmZlcm8gR2VuZXJhbCBQdWJsaWMgTGljZW5zZSBhcyBwdWJsaXNoZWQgYnlcbiAqIHRoZSBGcmVlIFNvZnR3YXJlIEZvdW5kYXRpb24sIGVpdGhlciB2ZXJzaW9uIDMgb2YgdGhlIExpY2Vuc2UsIG9yXG4gKiAoYXQgeW91ciBvcHRpb24pIGFueSBsYXRlciB2ZXJzaW9uLlxuICpcbiAqIFZpdmxpb3N0eWxlLmpzIGlzIGRpc3RyaWJ1dGVkIGluIHRoZSBob3BlIHRoYXQgaXQgd2lsbCBiZSB1c2VmdWwsXG4gKiBidXQgV0lUSE9VVCBBTlkgV0FSUkFOVFk7IHdpdGhvdXQgZXZlbiB0aGUgaW1wbGllZCB3YXJyYW50eSBvZlxuICogTUVSQ0hBTlRBQklMSVRZIG9yIEZJVE5FU1MgRk9SIEEgUEFSVElDVUxBUiBQVVJQT1NFLiAgU2VlIHRoZVxuICogR05VIEFmZmVybyBHZW5lcmFsIFB1YmxpYyBMaWNlbnNlIGZvciBtb3JlIGRldGFpbHMuXG4gKlxuICogWW91IHNob3VsZCBoYXZlIHJlY2VpdmVkIGEgY29weSBvZiB0aGUgR05VIEFmZmVybyBHZW5lcmFsIFB1YmxpYyBMaWNlbnNlXG4gKiBhbG9uZyB3aXRoIFZpdmxpb3N0eWxlLmpzLiAgSWYgbm90LCBzZWUgPGh0dHA6Ly93d3cuZ251Lm9yZy9saWNlbnNlcy8+LlxuICpcbiAqIEBmaWxlb3ZlcnZpZXcgR2VvbWV0cnlVdGlsIC0gR2VvbWV0cmljIHV0aWxpdGllcy5cbiAqL1xuaW1wb3J0ICogYXMgTG9nZ2luZyBmcm9tIFwiLi9sb2dnaW5nXCI7XG5cbmV4cG9ydCBjbGFzcyBSZWN0IHtcbiAgY29uc3RydWN0b3IoXG4gICAgcHVibGljIHgxOiBudW1iZXIsXG4gICAgcHVibGljIHkxOiBudW1iZXIsXG4gICAgcHVibGljIHgyOiBudW1iZXIsXG4gICAgcHVibGljIHkyOiBudW1iZXIsXG4gICkge31cbn1cblxuZXhwb3J0IGNsYXNzIFBvaW50IHtcbiAgY29uc3RydWN0b3IocHVibGljIHg6IG51bWJlciwgcHVibGljIHk6IG51bWJlcikge31cbn1cblxuZXhwb3J0IGNsYXNzIEluc2V0cyB7XG4gIGNvbnN0cnVjdG9yKFxuICAgIHB1YmxpYyBsZWZ0OiBudW1iZXIsXG4gICAgcHVibGljIHRvcDogbnVtYmVyLFxuICAgIHB1YmxpYyByaWdodDogbnVtYmVyLFxuICAgIHB1YmxpYyBib3R0b206IG51bWJlcixcbiAgKSB7fVxufVxuXG5leHBvcnQgY2xhc3MgU2VnbWVudCB7XG4gIGNvbnN0cnVjdG9yKFxuICAgIHB1YmxpYyBsb3c6IFBvaW50LFxuICAgIHB1YmxpYyBoaWdoOiBQb2ludCxcbiAgICBwdWJsaWMgd2luZGluZzogbnVtYmVyLFxuICAgIHB1YmxpYyBzaGFwZUlkOiBudW1iZXIsXG4gICkge31cbn1cblxuLyoqXG4gKiBBIHNpbmdsZSBiYW5kIGZvciBleGNsdXNpb24gcmVzdWx0LiBMZWZ0IGZsb2F0IGlzIGZyb20gdGhlIGxlZnQgYm94IGVkZ2VcbiAqIHRvIHgxLiBSaWdodCBmbG9hdCBpcyBmcm9tIHgyIHRvIHRoZSByaWdodCBib3ggZWRnZS5cbiAqL1xuZXhwb3J0IGNsYXNzIEJhbmQge1xuICAvKiogTGVmdCBmbG9hdC4gKi9cbiAgbGVmdDogRWxlbWVudCB8IG51bGwgPSBudWxsO1xuXG4gIC8qKiBSaWdodCBmbG9hdC4gKi9cbiAgcmlnaHQ6IEVsZW1lbnQgfCBudWxsID0gbnVsbDtcblxuICBjb25zdHJ1Y3RvcihcbiAgICBwdWJsaWMgeTE6IG51bWJlcixcbiAgICBwdWJsaWMgeTI6IG51bWJlcixcbiAgICBwdWJsaWMgeDE6IG51bWJlcixcbiAgICBwdWJsaWMgeDI6IG51bWJlcixcbiAgKSB7fVxufVxuXG5leHBvcnQgZnVuY3Rpb24gc2VnbWVudENvbXBhcmUoczE6IFNlZ21lbnQsIHMyOiBTZWdtZW50KTogbnVtYmVyIHtcbiAgcmV0dXJuIHMxLmxvdy55IC0gczIubG93LnkgfHwgczEubG93LnggLSBzMi5sb3cueDtcbn1cblxuZXhwb3J0IGNsYXNzIFNoYXBlIHtcbiAgY29uc3RydWN0b3IocHVibGljIHBvaW50czogUG9pbnRbXSkge31cblxuICAvKipcbiAgICogQ29udmVydHMgdGhpcyBzaGFwZSB0byBhIHNlcXVlbmNlIG9mIFNlZ21lbnRzIGFuZCBhZGRzIHNlZ21lbnRzIHRvIHRoZVxuICAgKiBnaXZlbiBhcnJheS5cbiAgICogQHBhcmFtIGFyciBhcnJheSB0byBhZGQgc2VnbWVudHMuXG4gICAqIEBwYXJhbSBpZCBzaGFwZUlkIHRvIHdyaXRlIGludG8gc2VnbWVudHMuXG4gICAqL1xuICBhZGRTZWdtZW50cyhhcnI6IFNlZ21lbnRbXSwgaWQ6IG51bWJlcik6IHZvaWQge1xuICAgIGNvbnN0IHBvaW50cyA9IHRoaXMucG9pbnRzO1xuICAgIGNvbnN0IGxlbmd0aCA9IHBvaW50cy5sZW5ndGg7XG4gICAgbGV0IHByZXYgPSBwb2ludHNbbGVuZ3RoIC0gMV07XG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCBsZW5ndGg7IGkrKykge1xuICAgICAgY29uc3QgY3VyciA9IHBvaW50c1tpXTtcbiAgICAgIGxldCBzOiBTZWdtZW50O1xuICAgICAgaWYgKHByZXYueSA8IGN1cnIueSkge1xuICAgICAgICBzID0gbmV3IFNlZ21lbnQocHJldiwgY3VyciwgMSwgaWQpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcyA9IG5ldyBTZWdtZW50KGN1cnIsIHByZXYsIC0xLCBpZCk7XG4gICAgICB9XG4gICAgICBhcnIucHVzaChzKTtcbiAgICAgIHByZXYgPSBjdXJyO1xuICAgIH1cbiAgfVxuXG4gIHdpdGhPZmZzZXQob2Zmc2V0WDogbnVtYmVyLCBvZmZzZXRZOiBudW1iZXIpOiBTaGFwZSB7XG4gICAgY29uc3QgcG9pbnRzID0gW107XG4gICAgZm9yIChjb25zdCBwIG9mIHRoaXMucG9pbnRzKSB7XG4gICAgICBwb2ludHMucHVzaChuZXcgUG9pbnQocC54ICsgb2Zmc2V0WCwgcC55ICsgb2Zmc2V0WSkpO1xuICAgIH1cbiAgICByZXR1cm4gbmV3IFNoYXBlKHBvaW50cyk7XG4gIH1cbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHNoYXBlRm9yRWxsaXBzZShcbiAgY3g6IG51bWJlcixcbiAgY3k6IG51bWJlcixcbiAgcng6IG51bWJlcixcbiAgcnk6IG51bWJlcixcbik6IFNoYXBlIHtcbiAgY29uc3QgY291bnQgPSAyMDtcbiAgY29uc3QgcG9pbnRzOiBQb2ludFtdID0gW107XG4gIGZvciAobGV0IGkgPSAwOyBpIDwgY291bnQ7IGkrKykge1xuICAgIGNvbnN0IGEgPSAoaSAqIDIgKiBNYXRoLlBJKSAvIGNvdW50O1xuICAgIHBvaW50cy5wdXNoKG5ldyBQb2ludChjeCArIHJ4ICogTWF0aC5zaW4oYSksIGN5ICsgcnkgKiBNYXRoLmNvcyhhKSkpO1xuICB9XG4gIHJldHVybiBuZXcgU2hhcGUocG9pbnRzKTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHNoYXBlRm9yUmVjdChcbiAgeDE6IG51bWJlcixcbiAgeTE6IG51bWJlcixcbiAgeDI6IG51bWJlcixcbiAgeTI6IG51bWJlcixcbik6IFNoYXBlIHtcbiAgcmV0dXJuIG5ldyBTaGFwZShbXG4gICAgbmV3IFBvaW50KHgxLCB5MSksXG4gICAgbmV3IFBvaW50KHgyLCB5MSksXG4gICAgbmV3IFBvaW50KHgyLCB5MiksXG4gICAgbmV3IFBvaW50KHgxLCB5MiksXG4gIF0pO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gc2hhcGVGb3JSZWN0T2JqKHI6IFJlY3QpOiBTaGFwZSB7XG4gIHJldHVybiBuZXcgU2hhcGUoW1xuICAgIG5ldyBQb2ludChyLngxLCByLnkxKSxcbiAgICBuZXcgUG9pbnQoci54Miwgci55MSksXG4gICAgbmV3IFBvaW50KHIueDIsIHIueTIpLFxuICAgIG5ldyBQb2ludChyLngxLCByLnkyKSxcbiAgXSk7XG59XG5cbmV4cG9ydCBjbGFzcyBCYW5kSW50ZXJzZWN0aW9uIHtcbiAgY29uc3RydWN0b3IoXG4gICAgcHVibGljIHg6IG51bWJlcixcbiAgICBwdWJsaWMgd2luZGluZzogbnVtYmVyLFxuICAgIHB1YmxpYyBzaGFwZUlkOiBudW1iZXIsXG4gICAgcHVibGljIGxvd09ySGlnaDogbnVtYmVyLFxuICApIHt9XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBpbnRlcnNlY3RZKHM6IFNlZ21lbnQsIHk6IG51bWJlcik6IG51bWJlciB7XG4gIGNvbnN0IHggPVxuICAgIHMubG93LnggKyAoKHMuaGlnaC54IC0gcy5sb3cueCkgKiAoeSAtIHMubG93LnkpKSAvIChzLmhpZ2gueSAtIHMubG93LnkpO1xuICBpZiAoaXNOYU4oeCkpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoXCJCYWQgaW50ZXJzZWN0aW9uXCIpO1xuICB9XG4gIHJldHVybiB4O1xufVxuXG5leHBvcnQgZnVuY3Rpb24gYWRkQmFuZEludGVyc2VjdGlvbnMoXG4gIGludGVyc2VjdGlvbnM6IEJhbmRJbnRlcnNlY3Rpb25bXSxcbiAgczogU2VnbWVudCxcbiAgeTE6IG51bWJlcixcbiAgeTI6IG51bWJlcixcbik6IHZvaWQge1xuICBsZXQgeDE6IG51bWJlcjtcbiAgbGV0IHcxOiBudW1iZXI7XG4gIGxldCB4MjogbnVtYmVyO1xuICBsZXQgdzI6IG51bWJlcjtcbiAgaWYgKHMuaGlnaC55IDwgeTEpIHtcbiAgICBMb2dnaW5nLmxvZ2dlci53YXJuKFwiRXJyb3I6IGluY29uc2lzdGVudCBzZWdtZW50ICgxKVwiKTtcbiAgfVxuICBpZiAocy5sb3cueSA8PSB5MSkge1xuICAgIC8vIG91dHNpZGVcbiAgICB4MSA9IGludGVyc2VjdFkocywgeTEpO1xuICAgIHcxID0gcy53aW5kaW5nO1xuICB9IGVsc2Uge1xuICAgIHgxID0gcy5sb3cueDtcbiAgICB3MSA9IDA7XG4gIH1cbiAgaWYgKHMuaGlnaC55ID49IHkyKSB7XG4gICAgLy8gb3V0c2lkZVxuICAgIHgyID0gaW50ZXJzZWN0WShzLCB5Mik7XG4gICAgdzIgPSBzLndpbmRpbmc7XG4gIH0gZWxzZSB7XG4gICAgeDIgPSBzLmhpZ2gueDtcbiAgICB3MiA9IDA7XG4gIH1cbiAgaWYgKHgxIDwgeDIpIHtcbiAgICBpbnRlcnNlY3Rpb25zLnB1c2gobmV3IEJhbmRJbnRlcnNlY3Rpb24oeDEsIHcxLCBzLnNoYXBlSWQsIC0xKSk7XG4gICAgaW50ZXJzZWN0aW9ucy5wdXNoKG5ldyBCYW5kSW50ZXJzZWN0aW9uKHgyLCB3Miwgcy5zaGFwZUlkLCAxKSk7XG4gIH0gZWxzZSB7XG4gICAgaW50ZXJzZWN0aW9ucy5wdXNoKG5ldyBCYW5kSW50ZXJzZWN0aW9uKHgyLCB3Miwgcy5zaGFwZUlkLCAtMSkpO1xuICAgIGludGVyc2VjdGlvbnMucHVzaChuZXcgQmFuZEludGVyc2VjdGlvbih4MSwgdzEsIHMuc2hhcGVJZCwgMSkpO1xuICB9XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBtZXJnZUludGVyc2VjdGlvbnMoXG4gIGludGVyc2VjdGlvbnM6IEJhbmRJbnRlcnNlY3Rpb25bXSxcbiAgaW5jbHVkZUNvdW50OiBudW1iZXIsXG4gIGV4Y2x1ZGVDb3VudDogbnVtYmVyLFxuKTogbnVtYmVyW10ge1xuICBjb25zdCBzaGFwZUNvdW50ID0gaW5jbHVkZUNvdW50ICsgZXhjbHVkZUNvdW50O1xuICBjb25zdCB3aW5kaW5nczE6IG51bWJlcltdID0gQXJyYXkoc2hhcGVDb3VudCk7XG4gIGNvbnN0IHdpbmRpbmdzMjogbnVtYmVyW10gPSBBcnJheShzaGFwZUNvdW50KTtcbiAgbGV0IGk6IG51bWJlcjtcbiAgZm9yIChpID0gMDsgaSA8PSBzaGFwZUNvdW50OyBpKyspIHtcbiAgICB3aW5kaW5nczFbaV0gPSAwO1xuICAgIHdpbmRpbmdzMltpXSA9IDA7XG4gIH1cbiAgY29uc3QgeHJhbmdlczogbnVtYmVyW10gPSBbXTtcbiAgbGV0IGluc2lkZTogYm9vbGVhbiA9IGZhbHNlO1xuICBjb25zdCBpbnRlcnNlY3Rpb25Db3VudCA9IGludGVyc2VjdGlvbnMubGVuZ3RoO1xuICBmb3IgKGxldCBrID0gMDsgayA8IGludGVyc2VjdGlvbkNvdW50OyBrKyspIHtcbiAgICBjb25zdCBpbnRlcnNlY3Rpb24gPSBpbnRlcnNlY3Rpb25zW2tdO1xuICAgIHdpbmRpbmdzMVtpbnRlcnNlY3Rpb24uc2hhcGVJZF0gKz0gaW50ZXJzZWN0aW9uLndpbmRpbmc7XG4gICAgd2luZGluZ3MyW2ludGVyc2VjdGlvbi5zaGFwZUlkXSArPSBpbnRlcnNlY3Rpb24ubG93T3JIaWdoO1xuICAgIGxldCBzdGlsbEluc2lkZSA9IGZhbHNlO1xuICAgIGZvciAoaSA9IDA7IGkgPCBpbmNsdWRlQ291bnQ7IGkrKykge1xuICAgICAgaWYgKHdpbmRpbmdzMVtpXSAmJiAhd2luZGluZ3MyW2ldKSB7XG4gICAgICAgIHN0aWxsSW5zaWRlID0gdHJ1ZTtcbiAgICAgICAgYnJlYWs7XG4gICAgICB9XG4gICAgfVxuICAgIGlmIChzdGlsbEluc2lkZSkge1xuICAgICAgZm9yIChpID0gaW5jbHVkZUNvdW50OyBpIDw9IHNoYXBlQ291bnQ7IGkrKykge1xuICAgICAgICBpZiAod2luZGluZ3MxW2ldIHx8IHdpbmRpbmdzMltpXSkge1xuICAgICAgICAgIHN0aWxsSW5zaWRlID0gZmFsc2U7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gICAgaWYgKGluc2lkZSAhPSBzdGlsbEluc2lkZSkge1xuICAgICAgeHJhbmdlcy5wdXNoKGludGVyc2VjdGlvbi54KTtcbiAgICAgIGluc2lkZSA9IHN0aWxsSW5zaWRlO1xuICAgIH1cbiAgfVxuICByZXR1cm4geHJhbmdlcztcbn1cblxuLyoqXG4gKiBSb3VuZCB2IHVwIHRvIG1ha2UgaXQgYSBtdWx0aXBsZSBvZiB1bml0LiBJZiB1bml0IGlzIHplcm8sIHJldHVybiB2LlxuICovXG5leHBvcnQgZnVuY3Rpb24gY2VpbCh2OiBudW1iZXIsIHVuaXQ6IG51bWJlcik6IG51bWJlciB7XG4gIHJldHVybiB1bml0ID8gTWF0aC5jZWlsKHYgLyB1bml0KSAqIHVuaXQgOiB2O1xufVxuXG4vKipcbiAqIFJvdW5kIHYgZG93biB0byBtYWtlIGl0IGEgbXVsdGlwbGUgb2YgdW5pdC4gSWYgdW5pdCBpcyB6ZXJvLCByZXR1cm4gdi5cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGZsb29yKHY6IG51bWJlciwgdW5pdDogbnVtYmVyKTogbnVtYmVyIHtcbiAgcmV0dXJuIHVuaXQgPyBNYXRoLmZsb29yKHYgLyB1bml0KSAqIHVuaXQgOiB2O1xufVxuXG5leHBvcnQgZnVuY3Rpb24gcm90YXRlUG9pbnQocG9pbnQ6IFBvaW50KTogUG9pbnQge1xuICByZXR1cm4gbmV3IFBvaW50KHBvaW50LnksIC1wb2ludC54KTtcbn1cblxuLyoqXG4gKiBWZXJ0aWNhbCBib3ggdG8gcHNldWRvLWhvcml6b250YWwgY29vcmRzLlxuICovXG5leHBvcnQgZnVuY3Rpb24gcm90YXRlQm94KGJveDogUmVjdCk6IFJlY3Qge1xuICByZXR1cm4gbmV3IFJlY3QoYm94LnkxLCAtYm94LngyLCBib3gueTIsIC1ib3gueDEpO1xufVxuXG4vKipcbiAqIFBzZXVkby1ob3Jpem9udGFsIGNvb3JkcyB0byB2ZXJ0aWNhbC5cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHVucm90YXRlQm94KGJveDogUmVjdCk6IFJlY3Qge1xuICByZXR1cm4gbmV3IFJlY3QoLWJveC55MiwgYm94LngxLCAtYm94LnkxLCBib3gueDIpO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gcm90YXRlU2hhcGUoc2hhcGU6IFNoYXBlKTogU2hhcGUge1xuICByZXR1cm4gbmV3IFNoYXBlKHNoYXBlLnBvaW50cy5tYXAoKHBvaW50KSA9PiByb3RhdGVQb2ludChwb2ludCkpKTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHNoYXBlc1RvQmFuZHMoXG4gIGJveDogUmVjdCxcbiAgaW5jbHVkZTogU2hhcGVbXSxcbiAgZXhjbHVkZTogU2hhcGVbXSxcbiAgZ3JhbnVsYXJpdHk6IG51bWJlcixcbiAgc25hcEhlaWdodDogbnVtYmVyLFxuICB2ZXJ0aWNhbDogYm9vbGVhbixcbik6IEJhbmRbXSB7XG4gIGlmICh2ZXJ0aWNhbCkge1xuICAgIGJveCA9IHJvdGF0ZUJveChib3gpO1xuICAgIGluY2x1ZGUgPSBpbmNsdWRlLm1hcCgoc2hhcGUpID0+IHJvdGF0ZVNoYXBlKHNoYXBlKSk7XG4gICAgZXhjbHVkZSA9IGV4Y2x1ZGUubWFwKChzaGFwZSkgPT4gcm90YXRlU2hhcGUoc2hhcGUpKTtcbiAgfVxuICBjb25zdCBpbmNsdWRlQ291bnQgPSBpbmNsdWRlLmxlbmd0aDtcbiAgY29uc3QgZXhjbHVkZUNvdW50ID0gZXhjbHVkZSA/IGV4Y2x1ZGUubGVuZ3RoIDogMDtcbiAgY29uc3QgcmVzdWx0OiBCYW5kW10gPSBbXTtcbiAgY29uc3Qgc2VnbWVudHM6IFNlZ21lbnRbXSA9IFtdO1xuICBsZXQgaTogbnVtYmVyO1xuICBsZXQgazogbnVtYmVyO1xuICBsZXQgc2VnbWVudDogU2VnbWVudDtcbiAgZm9yIChpID0gMDsgaSA8IGluY2x1ZGVDb3VudDsgaSsrKSB7XG4gICAgaW5jbHVkZVtpXS5hZGRTZWdtZW50cyhzZWdtZW50cywgaSk7XG4gIH1cbiAgZm9yIChpID0gMDsgaSA8IGV4Y2x1ZGVDb3VudDsgaSsrKSB7XG4gICAgZXhjbHVkZVtpXS5hZGRTZWdtZW50cyhzZWdtZW50cywgaSArIGluY2x1ZGVDb3VudCk7XG4gIH1cbiAgY29uc3Qgc2VnbWVudENvdW50ID0gc2VnbWVudHMubGVuZ3RoO1xuICBzZWdtZW50cy5zb3J0KHNlZ21lbnRDb21wYXJlKTtcbiAgbGV0IGxvd2VzdEluY2x1ZGVJbmRleCA9IDA7XG4gIHdoaWxlIChzZWdtZW50c1tsb3dlc3RJbmNsdWRlSW5kZXhdLnNoYXBlSWQgPj0gaW5jbHVkZUNvdW50KSB7XG4gICAgbG93ZXN0SW5jbHVkZUluZGV4Kys7XG4gIH1cbiAgbGV0IHkgPSBzZWdtZW50c1tsb3dlc3RJbmNsdWRlSW5kZXhdLmxvdy55O1xuICBpZiAoeSA+IGJveC55MSkge1xuICAgIHJlc3VsdC5wdXNoKG5ldyBCYW5kKGJveC55MSwgeSwgYm94LngyLCBib3gueDIpKTtcbiAgfVxuICBsZXQgc2VnbWVudEluZGV4ID0gMDtcbiAgY29uc3QgYWN0aXZlU2VnbWVudHM6IFNlZ21lbnRbXSA9IFtdO1xuICB3aGlsZSAoXG4gICAgc2VnbWVudEluZGV4IDwgc2VnbWVudENvdW50ICYmXG4gICAgKHNlZ21lbnQgPSBzZWdtZW50c1tzZWdtZW50SW5kZXhdKS5sb3cueSA8IHlcbiAgKSB7XG4gICAgaWYgKHNlZ21lbnQuaGlnaC55ID4geSkge1xuICAgICAgYWN0aXZlU2VnbWVudHMucHVzaChzZWdtZW50KTtcbiAgICB9XG4gICAgc2VnbWVudEluZGV4Kys7XG4gIH1cblxuICAvLyBwcm9jZXNzIHRoZSBzZWdtZW50cyBmcm9tIGxvdyB0byBoaWdoIHkgdmFsdWVzXG4gIHdoaWxlIChzZWdtZW50SW5kZXggPCBzZWdtZW50Q291bnQgfHwgYWN0aXZlU2VnbWVudHMubGVuZ3RoID4gMCkge1xuICAgIC8vIGNhbGN1bGF0ZSB0aGUgaGVpZ2h0IG9mIHRoZSBiYW5kIHRvIHdvcmsgd2l0aFxuICAgIGxldCB5MiA9IGJveC55MjsgLy8gYmFuZCBib3R0b21cbiAgICAvLyBtaW4gcG9zc2libGUgeTJcbiAgICBjb25zdCB5Mm1pbiA9IE1hdGgubWluKFxuICAgICAgY2VpbChNYXRoLmNlaWwoeSArIGdyYW51bGFyaXR5KSwgc25hcEhlaWdodCksXG4gICAgICBib3gueTIsXG4gICAgKTtcbiAgICBmb3IgKGsgPSAwOyBrIDwgYWN0aXZlU2VnbWVudHMubGVuZ3RoICYmIHkyID4geTJtaW47IGsrKykge1xuICAgICAgc2VnbWVudCA9IGFjdGl2ZVNlZ21lbnRzW2tdO1xuICAgICAgaWYgKHNlZ21lbnQubG93LnggPT0gc2VnbWVudC5oaWdoLngpIHtcbiAgICAgICAgLy8gdmVydGljYWxcbiAgICAgICAgaWYgKHNlZ21lbnQuaGlnaC55IDwgeTIpIHtcbiAgICAgICAgICB5MiA9IE1hdGgubWF4KGZsb29yKHNlZ21lbnQuaGlnaC55LCBzbmFwSGVpZ2h0KSwgeTJtaW4pO1xuICAgICAgICB9XG4gICAgICB9IGVsc2UgaWYgKHNlZ21lbnQubG93LnggIT0gc2VnbWVudC5oaWdoLngpIHtcbiAgICAgICAgLy8gVE9ETzogc2hvdWxkIHdlIGNvbXBhcmUgeT8/P1xuICAgICAgICAvLyBzbGFudGVkIChub3QgaG9yaXpvbnRhbClcbiAgICAgICAgeTIgPSB5Mm1pbjtcbiAgICAgIH1cbiAgICB9XG4gICAgaWYgKHkyID4gYm94LnkyKSB7XG4gICAgICB5MiA9IGJveC55MjtcbiAgICB9XG5cbiAgICAvLyBpbmNsdWRlIG5ldyBzZWdtZW50cywgZGVjcmVhc2luZyB5MiBpZiBuZWVkZWRcbiAgICB3aGlsZSAoXG4gICAgICBzZWdtZW50SW5kZXggPCBzZWdtZW50Q291bnQgJiZcbiAgICAgIChzZWdtZW50ID0gc2VnbWVudHNbc2VnbWVudEluZGV4XSkubG93LnkgPCB5MlxuICAgICkge1xuICAgICAgaWYgKHNlZ21lbnQuaGlnaC55IDwgeSkge1xuICAgICAgICBzZWdtZW50SW5kZXgrKztcbiAgICAgICAgY29udGludWU7XG4gICAgICB9XG4gICAgICBpZiAoc2VnbWVudC5sb3cueSA8IHkybWluKSB7XG4gICAgICAgIGlmIChzZWdtZW50Lmxvdy55ID09IHNlZ21lbnQuaGlnaC55ICYmIHNlZ21lbnQubG93LnkgPT0geSkge1xuICAgICAgICAgIC8vIEhvcml6b250YWwgc2VnbWVudCB0aGF0IGdvZXMgcmlnaHQgYXQgeSBpcyBub3QgYWN0aXZlLFxuICAgICAgICAgIC8vIGJ1dCBjb25zdW1lIGl0IGFueXdheVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGFjdGl2ZVNlZ21lbnRzLnB1c2goc2VnbWVudCk7XG4gICAgICAgICAgeTIgPSB5Mm1pbjtcbiAgICAgICAgfVxuICAgICAgICBzZWdtZW50SW5kZXgrKztcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIC8vIERvIG5vdCBjb25zdW1lIGl0LCBjb25zaWRlciBib3R0b20gZWRnZSBcIm91dHNpZGVcIlxuICAgICAgICBjb25zdCB5biA9IGZsb29yKHNlZ21lbnQubG93LnksIHNuYXBIZWlnaHQpO1xuICAgICAgICBpZiAoeW4gPCB5Mikge1xuICAgICAgICAgIHkyID0geW47XG4gICAgICAgIH1cbiAgICAgICAgYnJlYWs7XG4gICAgICB9XG4gICAgfVxuXG4gICAgLy8gbm93IGxvb2sgYXQgdGhlIGJhbmQgd2l0aCB0b3AgYXQgeSBhbmQgYm90dG9tIGF0IHkyXG4gICAgLy8gYWN0aXZlU2VnbWVudHMgc2hvdWxkIGxpc3QgYWxsIHNlZ21lbnRzIHRoYXQgaW50ZXJzZWN0IHRoYXQgYmFuZFxuXG4gICAgLy8gZmluZCBhbGwgaW50ZXJzZWN0aW9ucyB3aXRoIHRoZSBiYW5kXG4gICAgY29uc3QgYmFuZEludGVyc2VjdGlvbnM6IEJhbmRJbnRlcnNlY3Rpb25bXSA9IFtdO1xuICAgIGZvciAoayA9IDA7IGsgPCBhY3RpdmVTZWdtZW50cy5sZW5ndGg7IGsrKykge1xuICAgICAgYWRkQmFuZEludGVyc2VjdGlvbnMoYmFuZEludGVyc2VjdGlvbnMsIGFjdGl2ZVNlZ21lbnRzW2tdLCB5LCB5Mik7XG4gICAgfVxuICAgIGJhbmRJbnRlcnNlY3Rpb25zLnNvcnQoXG4gICAgICAoYmkxLCBiaTIpID0+IGJpMS54IC0gYmkyLnggfHwgYmkxLmxvd09ySGlnaCAtIGJpMi5sb3dPckhpZ2gsXG4gICAgKTtcbiAgICBjb25zdCB4cmFuZ2VzID0gbWVyZ2VJbnRlcnNlY3Rpb25zKFxuICAgICAgYmFuZEludGVyc2VjdGlvbnMsXG4gICAgICBpbmNsdWRlQ291bnQsXG4gICAgICBleGNsdWRlQ291bnQsXG4gICAgKTtcbiAgICBpZiAoeHJhbmdlcy5sZW5ndGggPT0gMCkge1xuICAgICAgcmVzdWx0LnB1c2gobmV3IEJhbmQoeSwgeTIsIGJveC54MiwgYm94LngyKSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIC8vIGdldCB0aGUgd2lkZXN0XG4gICAgICBsZXQgd2lkdGggPSAwO1xuICAgICAgbGV0IHggPSBib3gueDE7XG4gICAgICBmb3IgKGsgPSAwOyBrIDwgeHJhbmdlcy5sZW5ndGg7IGsgKz0gMikge1xuICAgICAgICBjb25zdCByeCA9IE1hdGgubWF4KGJveC54MSwgeHJhbmdlc1trXSk7XG4gICAgICAgIGNvbnN0IHJ3ID0gTWF0aC5taW4oYm94LngyLCB4cmFuZ2VzW2sgKyAxXSkgLSByeDtcbiAgICAgICAgaWYgKHJ3ID4gd2lkdGgpIHtcbiAgICAgICAgICB3aWR0aCA9IHJ3O1xuICAgICAgICAgIHggPSByeDtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgaWYgKHdpZHRoID09IDApIHtcbiAgICAgICAgLy8gbm8gc3BhY2UgbGVmdFxuICAgICAgICByZXN1bHQucHVzaChuZXcgQmFuZCh5LCB5MiwgYm94LngyLCBib3gueDIpKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHJlc3VsdC5wdXNoKFxuICAgICAgICAgIG5ldyBCYW5kKHksIHkyLCBNYXRoLm1heCh4LCBib3gueDEpLCBNYXRoLm1pbih4ICsgd2lkdGgsIGJveC54MikpLFxuICAgICAgICApO1xuICAgICAgfVxuICAgIH1cbiAgICBpZiAoeTIgPT0gYm94LnkyKSB7XG4gICAgICBicmVhaztcbiAgICB9XG4gICAgeSA9IHkyO1xuICAgIGZvciAoayA9IGFjdGl2ZVNlZ21lbnRzLmxlbmd0aCAtIDE7IGsgPj0gMDsgay0tKSB7XG4gICAgICBpZiAoYWN0aXZlU2VnbWVudHNba10uaGlnaC55IDw9IHkyKSB7XG4gICAgICAgIGFjdGl2ZVNlZ21lbnRzLnNwbGljZShrLCAxKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cbiAgbm9ybWFsaXplKGJveCwgcmVzdWx0KTtcbiAgcmV0dXJuIHJlc3VsdDtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIG5vcm1hbGl6ZShib3g6IFJlY3QsIGJhbmRzOiBCYW5kW10pOiB2b2lkIHtcbiAgbGV0IGsgPSBiYW5kcy5sZW5ndGggLSAxO1xuXG4gIC8vIE1lcmdlIGJhbmRzIHdpdGggdGhlIHNhbWUgeDEsIHgyIGFuZCByZW1vdmUgdW5uZWVkZWQgYmFuZHMgYXQgdGhlIGVuZC5cbiAgLy8gQ3JlYXRlIGZpY3Rpb3VzIGxhc3QgYmFuZCB0byBtZXJnZSB1bm5lZWRlZCBiYW5kcyBhdCB0aGUgZW5kXG4gIGxldCBjdXJyQmFuZCA9IG5ldyBCYW5kKGJveC55MiwgYm94LnkyLCBib3gueDEsIGJveC54Mik7XG4gIHdoaWxlIChrID49IDApIHtcbiAgICBjb25zdCBwcmV2QmFuZCA9IGN1cnJCYW5kOyAvLyByZXN1bHRbaysxXVxuICAgIGN1cnJCYW5kID0gYmFuZHNba107XG4gICAgaWYgKFxuICAgICAgY3VyckJhbmQueTIgLSBjdXJyQmFuZC55MSA8IDEgfHwgLy8gUmVtb3ZlIGJhbmRzIHdpdGggaGVpZ2h0IGxlc3MgdGhhbiAxcHhcbiAgICAgIChjdXJyQmFuZC54MSA9PSBwcmV2QmFuZC54MSAmJiBjdXJyQmFuZC54MiA9PSBwcmV2QmFuZC54MilcbiAgICApIHtcbiAgICAgIHByZXZCYW5kLnkxID0gY3VyckJhbmQueTE7IC8vIG1lcmdlXG4gICAgICBiYW5kcy5zcGxpY2UoaywgMSk7XG4gICAgICBjdXJyQmFuZCA9IHByZXZCYW5kO1xuICAgIH1cbiAgICBrLS07XG4gIH1cbn1cblxuLyoqXG4gKiBGaW5kIHRoZSBpbmRleCBvZiB0aGUgYm90dG9tbW9zdCBiYW5kIHNvIHRoYXQgeSA8IGJhbmQueTJcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGZpbmRCYW5kKGJhbmRzOiBCYW5kW10sIHk6IG51bWJlcik6IG51bWJlciB7XG4gIGxldCBsb3cgPSAwO1xuICBsZXQgaGlnaCA9IGJhbmRzLmxlbmd0aDtcbiAgd2hpbGUgKGxvdyA8IGhpZ2gpIHtcbiAgICBjb25zdCBtaWQgPSBNYXRoLmZsb29yKChsb3cgKyBoaWdoKSAvIDIpO1xuICAgIGlmICh5ID49IGJhbmRzW21pZF0ueTIpIHtcbiAgICAgIGxvdyA9IG1pZCArIDE7XG4gICAgfSBlbHNlIHtcbiAgICAgIGhpZ2ggPSBtaWQ7XG4gICAgfVxuICB9XG4gIHJldHVybiBsb3c7XG59XG5cbi8qKlxuICogRmluZCB0aGUgdXBwZXJtb3N0IHJlY3RhbmdsZSBjb250YWluZWQgaW4gdGhlIHNwZWNpZmllZCByZWN0IHdoaWNoIG9jY3VwaWVzXG4gKiBmdWxsIHdpZHRoIG9mIHRoZSByZWN0IHdpdGhvdXQgb3ZlcmxhcHBpbmcgd2l0aCBhbnkgYmFuZCBpbiB0aGUgc3BlY2lmaWVkXG4gKiBiYW5kcy5cbiAqIEByZXR1cm5zIFJldHVybnMgbnVsbCBpZiBzdWNoIHJlY3RhbmdsZSBkb2VzIG5vdCBleGlzdC5cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGZpbmRVcHBlcm1vc3RGdWxseU9wZW5SZWN0KFxuICBiYW5kczogQmFuZFtdLFxuICByZWN0OiBSZWN0LFxuKTogUmVjdCB8IG51bGwge1xuICBpZiAoIWJhbmRzLmxlbmd0aCkge1xuICAgIHJldHVybiByZWN0O1xuICB9XG4gIGxldCB0b3BFZGdlID0gcmVjdC55MTtcbiAgbGV0IGJhbmQ6IEJhbmQ7XG4gIGxldCBpOiBudW1iZXI7XG4gIGZvciAoaSA9IDA7IGkgPCBiYW5kcy5sZW5ndGg7IGkrKykge1xuICAgIGJhbmQgPSBiYW5kc1tpXTtcbiAgICBpZiAoXG4gICAgICBiYW5kLnkyID4gcmVjdC55MSAmJlxuICAgICAgYmFuZC54MSAtIDAuMSA8PSByZWN0LngxICYmXG4gICAgICBiYW5kLngyICsgMC4xID49IHJlY3QueDJcbiAgICApIHtcbiAgICAgIGJyZWFrO1xuICAgIH0gZWxzZSB7XG4gICAgICB0b3BFZGdlID0gTWF0aC5tYXgodG9wRWRnZSwgYmFuZC55Mik7XG4gICAgfVxuICB9XG4gIGxldCBib3R0b21FZGdlID0gdG9wRWRnZTtcbiAgZm9yICg7IGkgPCBiYW5kcy5sZW5ndGg7IGkrKykge1xuICAgIGJhbmQgPSBiYW5kc1tpXTtcbiAgICBpZiAoXG4gICAgICBiYW5kLnkxID49IHJlY3QueTIgfHxcbiAgICAgIGJhbmQueDEgLSAwLjEgPiByZWN0LngxIHx8XG4gICAgICBiYW5kLngyICsgMC4xIDwgcmVjdC54MlxuICAgICkge1xuICAgICAgYnJlYWs7XG4gICAgfSBlbHNlIHtcbiAgICAgIGJvdHRvbUVkZ2UgPSBiYW5kLnkyO1xuICAgIH1cbiAgfVxuICBpZiAoaSA9PT0gYmFuZHMubGVuZ3RoKSB7XG4gICAgYm90dG9tRWRnZSA9IHJlY3QueTI7XG4gIH0gZWxzZSB7XG4gICAgYm90dG9tRWRnZSA9IE1hdGgubWluKGJvdHRvbUVkZ2UsIHJlY3QueTIpO1xuICB9XG4gIGlmIChib3R0b21FZGdlIDw9IHRvcEVkZ2UpIHtcbiAgICByZXR1cm4gbnVsbDtcbiAgfSBlbHNlIHtcbiAgICByZXR1cm4gbmV3IFJlY3QocmVjdC54MSwgdG9wRWRnZSwgcmVjdC54MiwgYm90dG9tRWRnZSk7XG4gIH1cbn1cblxuLyoqXG4gKiBGaW5kIHRoZSBib3R0b21tb3N0IHJlY3RhbmdsZSBjb250YWluZWQgaW4gdGhlIHNwZWNpZmllZCByZWN0IHdoaWNoIG9jY3VwaWVzXG4gKiBmdWxsIHdpZHRoIG9mIHRoZSByZWN0IHdpdGhvdXQgb3ZlcmxhcHBpbmcgd2l0aCBhbnkgYmFuZCBpbiB0aGUgc3BlY2lmaWVkXG4gKiBiYW5kcy5cbiAqIEByZXR1cm5zIFJldHVybnMgbnVsbCBpZiBzdWNoIHJlY3RhbmdsZSBkb2VzIG5vdCBleGlzdC5cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGZpbmRCb3R0b21tb3N0RnVsbHlPcGVuUmVjdChcbiAgYmFuZHM6IEJhbmRbXSxcbiAgcmVjdDogUmVjdCxcbik6IFJlY3QgfCBudWxsIHtcbiAgaWYgKCFiYW5kcy5sZW5ndGgpIHtcbiAgICByZXR1cm4gcmVjdDtcbiAgfVxuICBsZXQgYm90dG9tRWRnZSA9IHJlY3QueTI7XG4gIGxldCBiYW5kOiBCYW5kO1xuICBsZXQgaTogbnVtYmVyO1xuICBmb3IgKGkgPSBiYW5kcy5sZW5ndGggLSAxOyBpID49IDA7IGktLSkge1xuICAgIGJhbmQgPSBiYW5kc1tpXTtcbiAgICBpZiAoaSA9PT0gYmFuZHMubGVuZ3RoIC0gMSAmJiBiYW5kLnkyIDwgcmVjdC55Mikge1xuICAgICAgYnJlYWs7XG4gICAgfSBlbHNlIGlmIChcbiAgICAgIGJhbmQueTEgPCByZWN0LnkyICYmXG4gICAgICBiYW5kLngxIC0gMC4xIDw9IHJlY3QueDEgJiZcbiAgICAgIGJhbmQueDIgKyAwLjEgPj0gcmVjdC54MlxuICAgICkge1xuICAgICAgYnJlYWs7XG4gICAgfSBlbHNlIHtcbiAgICAgIGJvdHRvbUVkZ2UgPSBNYXRoLm1pbihib3R0b21FZGdlLCBiYW5kLnkxKTtcbiAgICB9XG4gIH1cbiAgbGV0IHRvcEVkZ2UgPSBNYXRoLm1pbihib3R0b21FZGdlLCBiYW5kLnkyKTtcbiAgZm9yICg7IGkgPj0gMDsgaS0tKSB7XG4gICAgYmFuZCA9IGJhbmRzW2ldO1xuICAgIGlmIChcbiAgICAgIGJhbmQueTIgPD0gcmVjdC55MSB8fFxuICAgICAgYmFuZC54MSAtIDAuMSA+IHJlY3QueDEgfHxcbiAgICAgIGJhbmQueDIgKyAwLjEgPCByZWN0LngyXG4gICAgKSB7XG4gICAgICBicmVhaztcbiAgICB9IGVsc2Uge1xuICAgICAgdG9wRWRnZSA9IGJhbmQueTE7XG4gICAgfVxuICB9XG4gIHRvcEVkZ2UgPSBNYXRoLm1heCh0b3BFZGdlLCByZWN0LnkxKTtcbiAgaWYgKGJvdHRvbUVkZ2UgPD0gdG9wRWRnZSkge1xuICAgIHJldHVybiBudWxsO1xuICB9IGVsc2Uge1xuICAgIHJldHVybiBuZXcgUmVjdChyZWN0LngxLCB0b3BFZGdlLCByZWN0LngyLCBib3R0b21FZGdlKTtcbiAgfVxufVxuXG4vKipcbiAqIEBwYXJhbSBzaWRlIGVpdGhlciBcImxlZnRcIiBvciBcInJpZ2h0XCJcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHBvc2l0aW9uRmxvYXQoXG4gIGJveDogUmVjdCxcbiAgYmFuZHM6IEJhbmRbXSxcbiAgZmxvYXRCb3g6IFJlY3QsXG4gIHNpZGU6IHN0cmluZyxcbik6IGJvb2xlYW4ge1xuICBsZXQgeSA9IGZsb2F0Qm94LnkxO1xuICBjb25zdCBmbG9hdFdpZHRoID0gZmxvYXRCb3gueDIgLSBmbG9hdEJveC54MTtcbiAgY29uc3QgZmxvYXRIZWlnaHQgPSBmbG9hdEJveC55MiAtIGZsb2F0Qm94LnkxO1xuICBsZXQgaW5kZXggPSBmaW5kQmFuZChiYW5kcywgeSk7XG4gIHdoaWxlICh0cnVlKSB7XG4gICAgLy8gQ2hlY2sgaWYgaXQgZml0c1xuICAgIGNvbnN0IGZsb2F0Qm90dG9tID0geSArIGZsb2F0SGVpZ2h0O1xuICAgIGlmIChmbG9hdEJvdHRvbSA+IGJveC55Mikge1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cblxuICAgIC8vIGRvZXMgbm90IGZpdCB2ZXJ0aWNhbGx5XG4gICAgbGV0IHgxID0gYm94LngxO1xuICAgIGxldCB4MiA9IGJveC54MjtcbiAgICBmb3IgKGxldCBpID0gaW5kZXg7IGkgPCBiYW5kcy5sZW5ndGggJiYgYmFuZHNbaV0ueTEgPCBmbG9hdEJvdHRvbTsgaSsrKSB7XG4gICAgICBjb25zdCBiYW5kID0gYmFuZHNbaV07XG4gICAgICBpZiAoYmFuZC54MSA+IHgxKSB7XG4gICAgICAgIHgxID0gYmFuZC54MTtcbiAgICAgIH1cbiAgICAgIGlmIChiYW5kLngyIDwgeDIpIHtcbiAgICAgICAgeDIgPSBiYW5kLngyO1xuICAgICAgfVxuICAgIH1cbiAgICBpZiAoeDEgKyBmbG9hdFdpZHRoIDw9IHgyIHx8IGluZGV4ID49IGJhbmRzLmxlbmd0aCkge1xuICAgICAgaWYgKHNpZGUgPT0gXCJsZWZ0XCIpIHtcbiAgICAgICAgZmxvYXRCb3gueDEgPSB4MTtcbiAgICAgICAgZmxvYXRCb3gueDIgPSB4MSArIGZsb2F0V2lkdGg7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBmbG9hdEJveC54MSA9IHgyIC0gZmxvYXRXaWR0aDtcbiAgICAgICAgZmxvYXRCb3gueDIgPSB4MjtcbiAgICAgIH1cbiAgICAgIGZsb2F0Qm94LnkyICs9IHkgLSBmbG9hdEJveC55MTtcbiAgICAgIGZsb2F0Qm94LnkxID0geTtcbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cbiAgICB5ID0gYmFuZHNbaW5kZXhdLnkyO1xuICAgIGluZGV4Kys7XG4gIH1cbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGFkZEZsb2F0VG9CYW5kcyhcbiAgYm94OiBSZWN0LFxuICBiYW5kczogQmFuZFtdLFxuICBmbG9hdEJveDogUmVjdCxcbiAgZmxvYXRCYW5kczogQmFuZFtdLFxuICBzaWRlOiBzdHJpbmcsXG4pOiB2b2lkIHtcbiAgaWYgKCFmbG9hdEJhbmRzKSB7XG4gICAgZmxvYXRCYW5kcyA9IFtuZXcgQmFuZChmbG9hdEJveC55MSwgZmxvYXRCb3gueTIsIGZsb2F0Qm94LngxLCBmbG9hdEJveC54MildO1xuICB9XG4gIHdoaWxlIChmbG9hdEJhbmRzLmxlbmd0aCA+IDAgJiYgZmxvYXRCYW5kc1swXS55MiA8PSBib3gueTEpIHtcbiAgICBmbG9hdEJhbmRzLnNoaWZ0KCk7XG4gIH1cbiAgaWYgKGZsb2F0QmFuZHMubGVuZ3RoID09IDApIHtcbiAgICByZXR1cm47XG4gIH1cbiAgaWYgKGZsb2F0QmFuZHNbMF0ueTEgPCBib3gueTEpIHtcbiAgICBmbG9hdEJhbmRzWzBdLnkxID0gYm94LnkxO1xuICB9XG4gIGxldCBiYW5kOiBCYW5kO1xuICBjb25zdCBsYXN0WSA9IGJhbmRzLmxlbmd0aCA9PSAwID8gYm94LnkxIDogYmFuZHNbYmFuZHMubGVuZ3RoIC0gMV0ueTI7XG4gIGlmIChsYXN0WSA8IGJveC55Mikge1xuICAgIC8vIGFkZCB0aGUgdGFpbCBiYW5kIHRoYXQgd2UgdHlwaWNhbGx5IGRvbid0IGtlZXAsIGl0IHdpbGwgYmUgY2xlYXJlZCBieVxuICAgIC8vIG5vcm1hbGl6ZSgpXG4gICAgYmFuZHMucHVzaChuZXcgQmFuZChsYXN0WSwgYm94LnkyLCBib3gueDEsIGJveC54MikpO1xuICB9XG4gIGxldCBpbmRleCA9IGZpbmRCYW5kKGJhbmRzLCBmbG9hdEJhbmRzWzBdLnkxKTtcbiAgZm9yIChjb25zdCBmbG9hdEJhbmQgb2YgZmxvYXRCYW5kcykge1xuICAgIGlmIChpbmRleCA9PSBiYW5kcy5sZW5ndGgpIHtcbiAgICAgIGJyZWFrO1xuICAgIH1cbiAgICBpZiAoYmFuZHNbaW5kZXhdLnkxIDwgZmxvYXRCYW5kLnkxKSB7XG4gICAgICAvLyBzcGxpdCBpdFxuICAgICAgYmFuZCA9IGJhbmRzW2luZGV4XTtcbiAgICAgIGluZGV4Kys7XG4gICAgICBiYW5kcy5zcGxpY2UoaW5kZXgsIDAsIG5ldyBCYW5kKGZsb2F0QmFuZC55MSwgYmFuZC55MiwgYmFuZC54MSwgYmFuZC54MikpO1xuICAgICAgYmFuZC55MiA9IGZsb2F0QmFuZC55MTtcbiAgICB9XG4gICAgd2hpbGUgKGluZGV4IDwgYmFuZHMubGVuZ3RoKSB7XG4gICAgICBiYW5kID0gYmFuZHNbaW5kZXgrK107XG4gICAgICBpZiAoYmFuZC55MiA+IGZsb2F0QmFuZC55Mikge1xuICAgICAgICAvLyBzcGxpdCBpdFxuICAgICAgICBiYW5kcy5zcGxpY2UoXG4gICAgICAgICAgaW5kZXgsXG4gICAgICAgICAgMCxcbiAgICAgICAgICBuZXcgQmFuZChmbG9hdEJhbmQueTIsIGJhbmQueTIsIGJhbmQueDEsIGJhbmQueDIpLFxuICAgICAgICApO1xuICAgICAgICBiYW5kLnkyID0gZmxvYXRCYW5kLnkyO1xuICAgICAgfVxuICAgICAgaWYgKGZsb2F0QmFuZC54MSAhPSBmbG9hdEJhbmQueDIpIHtcbiAgICAgICAgLy8gbm9uLWVtcHR5IGZsb2F0QmFuZFxuICAgICAgICBpZiAoc2lkZSA9PSBcImxlZnRcIikge1xuICAgICAgICAgIGJhbmQueDEgPSBNYXRoLm1pbihmbG9hdEJhbmQueDIsIGJveC54Mik7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgYmFuZC54MiA9IE1hdGgubWF4KGZsb2F0QmFuZC54MSwgYm94LngxKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgaWYgKGJhbmQueTIgPT0gZmxvYXRCYW5kLnkyKSB7XG4gICAgICAgIGJyZWFrO1xuICAgICAgfVxuICAgIH1cbiAgfVxuICBub3JtYWxpemUoYm94LCBiYW5kcyk7XG59XG4iLCIvKipcbiAqIENvcHlyaWdodCAyMDEzIEdvb2dsZSwgSW5jLlxuICogQ29weXJpZ2h0IDIwMTUgVHJpbS1tYXJrcyBJbmMuXG4gKiBDb3B5cmlnaHQgMjAxOSBWaXZsaW9zdHlsZSBGb3VuZGF0aW9uXG4gKlxuICogVml2bGlvc3R5bGUuanMgaXMgZnJlZSBzb2Z0d2FyZTogeW91IGNhbiByZWRpc3RyaWJ1dGUgaXQgYW5kL29yIG1vZGlmeVxuICogaXQgdW5kZXIgdGhlIHRlcm1zIG9mIHRoZSBHTlUgQWZmZXJvIEdlbmVyYWwgUHVibGljIExpY2Vuc2UgYXMgcHVibGlzaGVkIGJ5XG4gKiB0aGUgRnJlZSBTb2Z0d2FyZSBGb3VuZGF0aW9uLCBlaXRoZXIgdmVyc2lvbiAzIG9mIHRoZSBMaWNlbnNlLCBvclxuICogKGF0IHlvdXIgb3B0aW9uKSBhbnkgbGF0ZXIgdmVyc2lvbi5cbiAqXG4gKiBWaXZsaW9zdHlsZS5qcyBpcyBkaXN0cmlidXRlZCBpbiB0aGUgaG9wZSB0aGF0IGl0IHdpbGwgYmUgdXNlZnVsLFxuICogYnV0IFdJVEhPVVQgQU5ZIFdBUlJBTlRZOyB3aXRob3V0IGV2ZW4gdGhlIGltcGxpZWQgd2FycmFudHkgb2ZcbiAqIE1FUkNIQU5UQUJJTElUWSBvciBGSVRORVNTIEZPUiBBIFBBUlRJQ1VMQVIgUFVSUE9TRS4gIFNlZSB0aGVcbiAqIEdOVSBBZmZlcm8gR2VuZXJhbCBQdWJsaWMgTGljZW5zZSBmb3IgbW9yZSBkZXRhaWxzLlxuICpcbiAqIFlvdSBzaG91bGQgaGF2ZSByZWNlaXZlZCBhIGNvcHkgb2YgdGhlIEdOVSBBZmZlcm8gR2VuZXJhbCBQdWJsaWMgTGljZW5zZVxuICogYWxvbmcgd2l0aCBWaXZsaW9zdHlsZS5qcy4gIElmIG5vdCwgc2VlIDxodHRwOi8vd3d3LmdudS5vcmcvbGljZW5zZXMvPi5cbiAqXG4gKiBAZmlsZW92ZXJ2aWV3IENzc1Byb3AgLSBTdXBwb3J0IHV0aWxpdGllcyB0byBleHRyYWN0IGluZm9ybWF0aW9uXG4gKiBmcm9tIHZhcmlvdXMgKHBhcnNlZCkgQ1NTIHZhbHVlcy5cbiAqL1xuaW1wb3J0ICogYXMgQmFzZSBmcm9tIFwiLi9iYXNlXCI7XG5pbXBvcnQgKiBhcyBDc3MgZnJvbSBcIi4vY3NzXCI7XG5pbXBvcnQgKiBhcyBFeHBycyBmcm9tIFwiLi9leHByc1wiO1xuaW1wb3J0ICogYXMgR2VvbWV0cnlVdGlsIGZyb20gXCIuL2dlb21ldHJ5LXV0aWxcIjtcbmltcG9ydCAqIGFzIExvZ2dpbmcgZnJvbSBcIi4vbG9nZ2luZ1wiO1xuXG4vLy0tLS0tLS0tLS0tLS0tLS0tLS0tLS0gdmFsdWUgcGFyc2VycyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG5leHBvcnQgY2xhc3MgU2V0VmlzaXRvciBleHRlbmRzIENzcy5WaXNpdG9yIHtcbiAgcHJvcFNldDogeyBba2V5OiBzdHJpbmddOiBib29sZWFuIH0gPSB7fTtcblxuICBjb25zdHJ1Y3RvcigpIHtcbiAgICBzdXBlcigpO1xuICB9XG5cbiAgLyoqXG4gICAqIEBvdmVycmlkZVxuICAgKi9cbiAgdmlzaXRJZGVudChpZGVudDogQ3NzLklkZW50KTogQ3NzLlZhbCB7XG4gICAgdGhpcy5wcm9wU2V0W2lkZW50Lm5hbWVdID0gdHJ1ZTtcbiAgICByZXR1cm4gaWRlbnQ7XG4gIH1cblxuICAvKipcbiAgICogQG92ZXJyaWRlXG4gICAqL1xuICB2aXNpdFNwYWNlTGlzdChsaXN0OiBDc3MuU3BhY2VMaXN0KTogQ3NzLlZhbCB7XG4gICAgdGhpcy52aXNpdFZhbHVlcyhsaXN0LnZhbHVlcyk7XG4gICAgcmV0dXJuIGxpc3Q7XG4gIH1cbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHRvU2V0KHZhbDogQ3NzLlZhbCk6IHsgW2tleTogc3RyaW5nXTogYm9vbGVhbiB9IHtcbiAgaWYgKHZhbCkge1xuICAgIGNvbnN0IHZpc2l0b3IgPSBuZXcgU2V0VmlzaXRvcigpO1xuICAgIHRyeSB7XG4gICAgICB2YWwudmlzaXQodmlzaXRvcik7XG4gICAgICByZXR1cm4gdmlzaXRvci5wcm9wU2V0O1xuICAgIH0gY2F0Y2ggKGVycikge1xuICAgICAgTG9nZ2luZy5sb2dnZXIud2FybihlcnIsIFwidG9TZXQ6XCIpO1xuICAgIH1cbiAgfVxuICByZXR1cm4ge307XG59XG5cbmV4cG9ydCBjbGFzcyBJbnRWaXNpdG9yIGV4dGVuZHMgQ3NzLlZpc2l0b3Ige1xuICBjb25zdHJ1Y3RvcihwdWJsaWMgdmFsdWU6IG51bWJlcikge1xuICAgIHN1cGVyKCk7XG4gIH1cblxuICAvKipcbiAgICogQG92ZXJyaWRlXG4gICAqL1xuICB2aXNpdEludChudW06IENzcy5JbnQpOiBDc3MuVmFsIHtcbiAgICB0aGlzLnZhbHVlID0gbnVtLm51bTtcbiAgICByZXR1cm4gbnVtO1xuICB9XG59XG5cbmV4cG9ydCBmdW5jdGlvbiB0b0ludCh2YWw6IENzcy5WYWwsIGRlZjogbnVtYmVyKTogbnVtYmVyIHtcbiAgaWYgKHZhbCkge1xuICAgIGNvbnN0IHZpc2l0b3IgPSBuZXcgSW50VmlzaXRvcihkZWYpO1xuICAgIHRyeSB7XG4gICAgICB2YWwudmlzaXQodmlzaXRvcik7XG4gICAgICByZXR1cm4gdmlzaXRvci52YWx1ZTtcbiAgICB9IGNhdGNoIChlcnIpIHtcbiAgICAgIExvZ2dpbmcubG9nZ2VyLndhcm4oZXJyLCBcInRvSW50OiBcIik7XG4gICAgfVxuICB9XG4gIHJldHVybiBkZWY7XG59XG5cbmV4cG9ydCBjbGFzcyBTaGFwZVZpc2l0b3IgZXh0ZW5kcyBDc3MuVmlzaXRvciB7XG4gIGNvbGxlY3Q6IGJvb2xlYW4gPSBmYWxzZTtcbiAgY29vcmRzOiBDc3MuTnVtZXJpY1tdID0gW107XG4gIG5hbWU6IHN0cmluZyB8IG51bGwgPSBudWxsO1xuXG4gIGNvbnN0cnVjdG9yKCkge1xuICAgIHN1cGVyKCk7XG4gIH1cblxuICAvKipcbiAgICogQG92ZXJyaWRlXG4gICAqL1xuICB2aXNpdE51bWVyaWMobnVtZXJpYzogQ3NzLk51bWVyaWMpOiBDc3MuVmFsIHtcbiAgICBpZiAodGhpcy5jb2xsZWN0KSB7XG4gICAgICB0aGlzLmNvb3Jkcy5wdXNoKG51bWVyaWMpO1xuICAgIH1cbiAgICByZXR1cm4gbnVsbDtcbiAgfVxuXG4gIC8qKlxuICAgKiBAb3ZlcnJpZGVcbiAgICovXG4gIHZpc2l0TnVtKG51bTogQ3NzLk51bSk6IENzcy5WYWwge1xuICAgIGlmICh0aGlzLmNvbGxlY3QgJiYgbnVtLm51bSA9PSAwKSB7XG4gICAgICB0aGlzLmNvb3Jkcy5wdXNoKG5ldyBDc3MuTnVtZXJpYygwLCBcInB4XCIpKTtcbiAgICB9XG4gICAgcmV0dXJuIG51bGw7XG4gIH1cblxuICAvKipcbiAgICogQG92ZXJyaWRlXG4gICAqL1xuICB2aXNpdFNwYWNlTGlzdChsaXN0OiBDc3MuU3BhY2VMaXN0KTogQ3NzLlZhbCB7XG4gICAgdGhpcy52aXNpdFZhbHVlcyhsaXN0LnZhbHVlcyk7XG4gICAgcmV0dXJuIG51bGw7XG4gIH1cblxuICAvKipcbiAgICogQG92ZXJyaWRlXG4gICAqL1xuICB2aXNpdEZ1bmMoZnVuYzogQ3NzLkZ1bmMpOiBDc3MuVmFsIHtcbiAgICBpZiAoIXRoaXMuY29sbGVjdCkge1xuICAgICAgdGhpcy5jb2xsZWN0ID0gdHJ1ZTtcbiAgICAgIHRoaXMudmlzaXRWYWx1ZXMoZnVuYy52YWx1ZXMpO1xuICAgICAgdGhpcy5jb2xsZWN0ID0gZmFsc2U7XG4gICAgICB0aGlzLm5hbWUgPSBmdW5jLm5hbWUudG9Mb3dlckNhc2UoKTtcbiAgICB9XG4gICAgcmV0dXJuIG51bGw7XG4gIH1cblxuICBnZXRTaGFwZShcbiAgICB4OiBudW1iZXIsXG4gICAgeTogbnVtYmVyLFxuICAgIHdpZHRoOiBudW1iZXIsXG4gICAgaGVpZ2h0OiBudW1iZXIsXG4gICAgY29udGV4dDogRXhwcnMuQ29udGV4dCxcbiAgKTogR2VvbWV0cnlVdGlsLlNoYXBlIHtcbiAgICBpZiAodGhpcy5jb29yZHMubGVuZ3RoID4gMCkge1xuICAgICAgY29uc3QgbnVtYmVyczogbnVtYmVyW10gPSBbXTtcbiAgICAgIHRoaXMuY29vcmRzLmZvckVhY2goKGNvb3JkLCBpKSA9PiB7XG4gICAgICAgIGlmIChjb29yZC51bml0ID09IFwiJVwiKSB7XG4gICAgICAgICAgbGV0IHJlZiA9IGkgJSAyID09IDAgPyB3aWR0aCA6IGhlaWdodDtcbiAgICAgICAgICBpZiAoaSA9PSAzICYmIHRoaXMubmFtZSA9PSBcImNpcmNsZVwiKSB7XG4gICAgICAgICAgICByZWYgPSBNYXRoLnNxcnQoKHdpZHRoICogd2lkdGggKyBoZWlnaHQgKiBoZWlnaHQpIC8gMik7XG4gICAgICAgICAgfVxuICAgICAgICAgIG51bWJlcnMucHVzaCgoY29vcmQubnVtICogcmVmKSAvIDEwMCk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgbnVtYmVycy5wdXNoKGNvb3JkLm51bSAqIGNvbnRleHQucXVlcnlVbml0U2l6ZShjb29yZC51bml0LCBmYWxzZSkpO1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgICAgIHN3aXRjaCAodGhpcy5uYW1lKSB7XG4gICAgICAgIGNhc2UgXCJwb2x5Z29uXCI6XG4gICAgICAgICAgaWYgKG51bWJlcnMubGVuZ3RoICUgMiA9PSAwKSB7XG4gICAgICAgICAgICBjb25zdCBwb2ludHM6IEdlb21ldHJ5VXRpbC5Qb2ludFtdID0gW107XG4gICAgICAgICAgICBmb3IgKGxldCBrID0gMDsgayA8IG51bWJlcnMubGVuZ3RoOyBrICs9IDIpIHtcbiAgICAgICAgICAgICAgcG9pbnRzLnB1c2goXG4gICAgICAgICAgICAgICAgbmV3IEdlb21ldHJ5VXRpbC5Qb2ludCh4ICsgbnVtYmVyc1trXSwgeSArIG51bWJlcnNbayArIDFdKSxcbiAgICAgICAgICAgICAgKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiBuZXcgR2VvbWV0cnlVdGlsLlNoYXBlKHBvaW50cyk7XG4gICAgICAgICAgfVxuICAgICAgICAgIGJyZWFrO1xuICAgICAgICBjYXNlIFwicmVjdGFuZ2xlXCI6XG4gICAgICAgICAgaWYgKG51bWJlcnMubGVuZ3RoID09IDQpIHtcbiAgICAgICAgICAgIHJldHVybiBHZW9tZXRyeVV0aWwuc2hhcGVGb3JSZWN0KFxuICAgICAgICAgICAgICB4ICsgbnVtYmVyc1swXSxcbiAgICAgICAgICAgICAgeSArIG51bWJlcnNbMV0sXG4gICAgICAgICAgICAgIHggKyBudW1iZXJzWzBdICsgbnVtYmVyc1syXSxcbiAgICAgICAgICAgICAgeSArIG51bWJlcnNbMV0gKyBudW1iZXJzWzNdLFxuICAgICAgICAgICAgKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIGNhc2UgXCJlbGxpcHNlXCI6XG4gICAgICAgICAgaWYgKG51bWJlcnMubGVuZ3RoID09IDQpIHtcbiAgICAgICAgICAgIHJldHVybiBHZW9tZXRyeVV0aWwuc2hhcGVGb3JFbGxpcHNlKFxuICAgICAgICAgICAgICB4ICsgbnVtYmVyc1swXSxcbiAgICAgICAgICAgICAgeSArIG51bWJlcnNbMV0sXG4gICAgICAgICAgICAgIG51bWJlcnNbMl0sXG4gICAgICAgICAgICAgIG51bWJlcnNbM10sXG4gICAgICAgICAgICApO1xuICAgICAgICAgIH1cbiAgICAgICAgICBicmVhaztcbiAgICAgICAgY2FzZSBcImNpcmNsZVwiOlxuICAgICAgICAgIGlmIChudW1iZXJzLmxlbmd0aCA9PSAzKSB7XG4gICAgICAgICAgICByZXR1cm4gR2VvbWV0cnlVdGlsLnNoYXBlRm9yRWxsaXBzZShcbiAgICAgICAgICAgICAgeCArIG51bWJlcnNbMF0sXG4gICAgICAgICAgICAgIHkgKyBudW1iZXJzWzFdLFxuICAgICAgICAgICAgICBudW1iZXJzWzJdLFxuICAgICAgICAgICAgICBudW1iZXJzWzJdLFxuICAgICAgICAgICAgKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgYnJlYWs7XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiBudWxsO1xuICB9XG59XG5cbmV4cG9ydCBmdW5jdGlvbiB0b1NoYXBlKFxuICB2YWw6IENzcy5WYWwsXG4gIHg6IG51bWJlcixcbiAgeTogbnVtYmVyLFxuICB3aWR0aDogbnVtYmVyLFxuICBoZWlnaHQ6IG51bWJlcixcbiAgY29udGV4dDogRXhwcnMuQ29udGV4dCxcbik6IEdlb21ldHJ5VXRpbC5TaGFwZSB7XG4gIGlmICh2YWwpIHtcbiAgICBjb25zdCB2aXNpdG9yID0gbmV3IFNoYXBlVmlzaXRvcigpO1xuICAgIHRyeSB7XG4gICAgICB2YWwudmlzaXQodmlzaXRvcik7XG4gICAgICByZXR1cm4gdmlzaXRvci5nZXRTaGFwZSh4LCB5LCB3aWR0aCwgaGVpZ2h0LCBjb250ZXh0KTtcbiAgICB9IGNhdGNoIChlcnIpIHtcbiAgICAgIExvZ2dpbmcubG9nZ2VyLndhcm4oZXJyLCBcInRvU2hhcGU6XCIpO1xuICAgIH1cbiAgfVxuICByZXR1cm4gR2VvbWV0cnlVdGlsLnNoYXBlRm9yUmVjdCh4LCB5LCB4ICsgd2lkdGgsIHkgKyBoZWlnaHQpO1xufVxuXG5leHBvcnQgY2xhc3MgQ291bnRlcnNWaXNpdG9yIGV4dGVuZHMgQ3NzLlZpc2l0b3Ige1xuICBjb3VudGVyczogeyBba2V5OiBzdHJpbmddOiBudW1iZXIgfSA9IHt9O1xuICBuYW1lOiBzdHJpbmcgfCBudWxsID0gbnVsbDtcblxuICBjb25zdHJ1Y3RvcihwdWJsaWMgcmVhZG9ubHkgcmVzZXQ6IGJvb2xlYW4pIHtcbiAgICBzdXBlcigpO1xuICB9XG5cbiAgLyoqIEBvdmVycmlkZSAqL1xuICB2aXNpdElkZW50KGlkZW50OiBDc3MuSWRlbnQpOiBDc3MuVmFsIHtcbiAgICB0aGlzLm5hbWUgPSBpZGVudC50b1N0cmluZygpO1xuICAgIGlmICh0aGlzLnJlc2V0KSB7XG4gICAgICB0aGlzLmNvdW50ZXJzW3RoaXMubmFtZV0gPSAwO1xuICAgIH0gZWxzZSB7XG4gICAgICB0aGlzLmNvdW50ZXJzW3RoaXMubmFtZV0gPSAodGhpcy5jb3VudGVyc1t0aGlzLm5hbWVdIHx8IDApICsgMTtcbiAgICB9XG4gICAgcmV0dXJuIGlkZW50O1xuICB9XG5cbiAgLyoqIEBvdmVycmlkZSAqL1xuICB2aXNpdEludChudW06IENzcy5JbnQpOiBDc3MuVmFsIHtcbiAgICBpZiAodGhpcy5uYW1lKSB7XG4gICAgICB0aGlzLmNvdW50ZXJzW3RoaXMubmFtZV0gKz0gbnVtLm51bSAtICh0aGlzLnJlc2V0ID8gMCA6IDEpO1xuICAgIH1cbiAgICByZXR1cm4gbnVtO1xuICB9XG5cbiAgLyoqIEBvdmVycmlkZSAqL1xuICB2aXNpdFNwYWNlTGlzdChsaXN0OiBDc3MuU3BhY2VMaXN0KTogQ3NzLlZhbCB7XG4gICAgdGhpcy52aXNpdFZhbHVlcyhsaXN0LnZhbHVlcyk7XG4gICAgcmV0dXJuIGxpc3Q7XG4gIH1cbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHRvQ291bnRlcnMoXG4gIHZhbDogQ3NzLlZhbCxcbiAgcmVzZXQ6IGJvb2xlYW4sXG4pOiB7IFtrZXk6IHN0cmluZ106IG51bWJlciB9IHtcbiAgY29uc3QgdmlzaXRvciA9IG5ldyBDb3VudGVyc1Zpc2l0b3IocmVzZXQpO1xuICB0cnkge1xuICAgIHZhbC52aXNpdCh2aXNpdG9yKTtcbiAgfSBjYXRjaCAoZXJyKSB7XG4gICAgTG9nZ2luZy5sb2dnZXIud2FybihlcnIsIFwidG9Db3VudGVyczpcIik7XG4gIH1cbiAgcmV0dXJuIHZpc2l0b3IuY291bnRlcnM7XG59XG5cbmV4cG9ydCBjbGFzcyBVcmxUcmFuc2Zvcm1WaXNpdG9yIGV4dGVuZHMgQ3NzLkZpbHRlclZpc2l0b3Ige1xuICBjb25zdHJ1Y3RvcihcbiAgICBwdWJsaWMgYmFzZVVybDogc3RyaW5nLFxuICAgIHB1YmxpYyB0cmFuc2Zvcm1lcjogQmFzZS5Eb2N1bWVudFVSTFRyYW5zZm9ybWVyLFxuICApIHtcbiAgICBzdXBlcigpO1xuICB9XG5cbiAgLyoqIEBvdmVycmlkZSAqL1xuICB2aXNpdFVSTCh1cmw6IENzcy5VUkwpOiBDc3MuVmFsIHtcbiAgICByZXR1cm4gbmV3IENzcy5VUkwodGhpcy50cmFuc2Zvcm1lci50cmFuc2Zvcm1VUkwodXJsLnVybCwgdGhpcy5iYXNlVXJsKSk7XG4gIH1cbn1cbiIsIi8qKlxuICogQ29weXJpZ2h0IDIwMTYgVHJpbS1tYXJrcyBJbmMuXG4gKiBDb3B5cmlnaHQgMjAxOSBWaXZsaW9zdHlsZSBGb3VuZGF0aW9uXG4gKlxuICogVml2bGlvc3R5bGUuanMgaXMgZnJlZSBzb2Z0d2FyZTogeW91IGNhbiByZWRpc3RyaWJ1dGUgaXQgYW5kL29yIG1vZGlmeVxuICogaXQgdW5kZXIgdGhlIHRlcm1zIG9mIHRoZSBHTlUgQWZmZXJvIEdlbmVyYWwgUHVibGljIExpY2Vuc2UgYXMgcHVibGlzaGVkIGJ5XG4gKiB0aGUgRnJlZSBTb2Z0d2FyZSBGb3VuZGF0aW9uLCBlaXRoZXIgdmVyc2lvbiAzIG9mIHRoZSBMaWNlbnNlLCBvclxuICogKGF0IHlvdXIgb3B0aW9uKSBhbnkgbGF0ZXIgdmVyc2lvbi5cbiAqXG4gKiBWaXZsaW9zdHlsZS5qcyBpcyBkaXN0cmlidXRlZCBpbiB0aGUgaG9wZSB0aGF0IGl0IHdpbGwgYmUgdXNlZnVsLFxuICogYnV0IFdJVEhPVVQgQU5ZIFdBUlJBTlRZOyB3aXRob3V0IGV2ZW4gdGhlIGltcGxpZWQgd2FycmFudHkgb2ZcbiAqIE1FUkNIQU5UQUJJTElUWSBvciBGSVRORVNTIEZPUiBBIFBBUlRJQ1VMQVIgUFVSUE9TRS4gIFNlZSB0aGVcbiAqIEdOVSBBZmZlcm8gR2VuZXJhbCBQdWJsaWMgTGljZW5zZSBmb3IgbW9yZSBkZXRhaWxzLlxuICpcbiAqIFlvdSBzaG91bGQgaGF2ZSByZWNlaXZlZCBhIGNvcHkgb2YgdGhlIEdOVSBBZmZlcm8gR2VuZXJhbCBQdWJsaWMgTGljZW5zZVxuICogYWxvbmcgd2l0aCBWaXZsaW9zdHlsZS5qcy4gIElmIG5vdCwgc2VlIDxodHRwOi8vd3d3LmdudS5vcmcvbGljZW5zZXMvPi5cbiAqXG4gKiBAZmlsZW92ZXJ2aWV3IENvdW50ZXJzIGFuZCBuYW1lZCBzdHJpbmdzXG4gKi9cbmltcG9ydCAqIGFzIEFzc2VydHMgZnJvbSBcIi4vYXNzZXJ0c1wiO1xuaW1wb3J0ICogYXMgQmFzZSBmcm9tIFwiLi9iYXNlXCI7XG5pbXBvcnQgKiBhcyBDc3NDYXNjYWRlIGZyb20gXCIuL2Nzcy1jYXNjYWRlXCI7XG5pbXBvcnQgKiBhcyBDc3NQcm9wIGZyb20gXCIuL2Nzcy1wcm9wXCI7XG5pbXBvcnQgKiBhcyBDc3NTdHlsZXIgZnJvbSBcIi4vY3NzLXN0eWxlclwiO1xuaW1wb3J0ICogYXMgRXhwcnMgZnJvbSBcIi4vZXhwcnNcIjtcbmltcG9ydCAqIGFzIFZnZW4gZnJvbSBcIi4vdmdlblwiO1xuaW1wb3J0ICogYXMgVnRyZWUgZnJvbSBcIi4vdnRyZWVcIjtcbmltcG9ydCB7IExheW91dCB9IGZyb20gXCIuL3R5cGVzXCI7XG5cbi8qKlxuICogQ2xvbmUgY291bnRlciB2YWx1ZXMuXG4gKi9cbmZ1bmN0aW9uIGNsb25lQ291bnRlclZhbHVlcyhcbiAgY291bnRlcnM6IENzc0Nhc2NhZGUuQ291bnRlclZhbHVlcyxcbik6IENzc0Nhc2NhZGUuQ291bnRlclZhbHVlcyB7XG4gIGNvbnN0IHJlc3VsdCA9IHt9O1xuICBPYmplY3Qua2V5cyhjb3VudGVycykuZm9yRWFjaCgobmFtZSkgPT4ge1xuICAgIHJlc3VsdFtuYW1lXSA9IEFycmF5LmZyb20oY291bnRlcnNbbmFtZV0pO1xuICB9KTtcbiAgcmV0dXJuIHJlc3VsdDtcbn1cblxuLyoqXG4gKiBDbGFzcyByZXByZXNlbnRpbmcgYSByZWZlcmVuY2UgYnkgdGFyZ2V0LWNvdW50ZXIocykuXG4gKiBAcGFyYW0gdGFyZ2V0SWQgSUQgb2YgdGhlIHJlZmVyZW5jZWQgZWxlbWVudCAodHJhbnNmb3JtZWQgYnlcbiAqICAgICBEb2N1bWVudFVSTFRyYW5zZm9ybWVyIHRvIGhhbmRsZSBhIHJlZmVyZW5jZSBhY3Jvc3MgbXVsdGlwbGUgc291cmNlXG4gKiAgICAgZG9jdW1lbnRzKVxuICogQHBhcmFtIHJlc29sdmVkIElmIHRoZSByZWZlcmVuY2UgaXMgYWxyZWFkeSByZXNvbHZlZCBvciBub3RcbiAqL1xuZXhwb3J0IGNsYXNzIFRhcmdldENvdW50ZXJSZWZlcmVuY2Uge1xuICBwYWdlQ291bnRlcnM6IENzc0Nhc2NhZGUuQ291bnRlclZhbHVlcyA9IG51bGw7XG4gIHNwaW5lSW5kZXg6IG51bWJlciA9IC0xO1xuICBwYWdlSW5kZXg6IG51bWJlciA9IC0xO1xuXG4gIGNvbnN0cnVjdG9yKHB1YmxpYyByZWFkb25seSB0YXJnZXRJZDogc3RyaW5nLCBwdWJsaWMgcmVzb2x2ZWQ6IGJvb2xlYW4pIHt9XG5cbiAgZXF1YWxzKG90aGVyOiBUYXJnZXRDb3VudGVyUmVmZXJlbmNlKTogYm9vbGVhbiB7XG4gICAgaWYgKHRoaXMgPT09IG90aGVyKSB7XG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG4gICAgaWYgKCFvdGhlcikge1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgICByZXR1cm4gKFxuICAgICAgdGhpcy50YXJnZXRJZCA9PT0gb3RoZXIudGFyZ2V0SWQgJiZcbiAgICAgIHRoaXMucmVzb2x2ZWQgPT09IG90aGVyLnJlc29sdmVkICYmXG4gICAgICB0aGlzLnNwaW5lSW5kZXggPT09IG90aGVyLnNwaW5lSW5kZXggJiZcbiAgICAgIHRoaXMucGFnZUluZGV4ID09PSBvdGhlci5wYWdlSW5kZXhcbiAgICApO1xuICB9XG5cbiAgLyoqXG4gICAqIFJldHVybnMgaWYgdGhlIHJlZmVyZW5jZSBpcyByZXNvbHZlZCBvciBub3QuXG4gICAqL1xuICBpc1Jlc29sdmVkKCk6IGJvb2xlYW4ge1xuICAgIHJldHVybiB0aGlzLnJlc29sdmVkO1xuICB9XG5cbiAgLyoqXG4gICAqIE1hcmtzIHRoYXQgdGhpcyByZWZlcmVuY2UgaXMgcmVzb2x2ZWQuXG4gICAqL1xuICByZXNvbHZlKCkge1xuICAgIHRoaXMucmVzb2x2ZWQgPSB0cnVlO1xuICB9XG5cbiAgLyoqXG4gICAqIE1hcmtzIHRoYXQgdGhpcyByZWZlcmVuY2UgaXMgdW5yZXNvbHZlZC5cbiAgICovXG4gIHVucmVzb2x2ZSgpIHtcbiAgICB0aGlzLnJlc29sdmVkID0gZmFsc2U7XG4gIH1cbn1cblxuY2xhc3MgQ291bnRlckxpc3RlbmVyIGltcGxlbWVudHMgQ3NzQ2FzY2FkZS5Db3VudGVyTGlzdGVuZXIge1xuICBjb25zdHJ1Y3RvcihcbiAgICBwdWJsaWMgcmVhZG9ubHkgY291bnRlclN0b3JlOiBDb3VudGVyU3RvcmUsXG4gICAgcHVibGljIHJlYWRvbmx5IGJhc2VVUkw6IHN0cmluZyxcbiAgKSB7fVxuXG4gIC8qKlxuICAgKiBAb3ZlcnJpZGVcbiAgICovXG4gIGNvdW50ZXJzT2ZJZChpZDogc3RyaW5nLCBjb3VudGVyczogQ3NzQ2FzY2FkZS5Db3VudGVyVmFsdWVzKSB7XG4gICAgaWQgPSB0aGlzLmNvdW50ZXJTdG9yZS5kb2N1bWVudFVSTFRyYW5zZm9ybWVyLnRyYW5zZm9ybUZyYWdtZW50KFxuICAgICAgaWQsXG4gICAgICB0aGlzLmJhc2VVUkwsXG4gICAgKTtcbiAgICB0aGlzLmNvdW50ZXJTdG9yZS5jb3VudGVyc0J5SWRbaWRdID0gY291bnRlcnM7XG4gIH1cblxuICBnZXRFeHByQ29udGVudExpc3RlbmVyKCk6IFZ0cmVlLkV4cHJDb250ZW50TGlzdGVuZXIge1xuICAgIHJldHVybiB0aGlzLmNvdW50ZXJTdG9yZS5nZXRFeHByQ29udGVudExpc3RlbmVyKCk7XG4gIH1cbn1cblxuLyoqXG4gKiBNYXAgZm9yIG5hbWVkIHN0cmluZyBuYW1lLCBlbGVtZW50IG9mZnNldCwgYW5kIHRoZSBzdHJpbmcgdmFsdWVcbiAqL1xudHlwZSBOYW1lZFN0cmluZ1ZhbHVlcyA9IHtcbiAgW25hbWU6IHN0cmluZ106IHsgW2VsZW1lbnRPZmZzZXQ6IG51bWJlcl06IHN0cmluZyB9O1xufTtcblxuY2xhc3MgQ291bnRlclJlc29sdmVyIGltcGxlbWVudHMgQ3NzQ2FzY2FkZS5Db3VudGVyUmVzb2x2ZXIge1xuICBzdHlsZXI6IENzc1N0eWxlci5TdHlsZXIgfCBudWxsID0gbnVsbDtcbiAgbmFtZWRTdHJpbmdWYWx1ZXM6IE5hbWVkU3RyaW5nVmFsdWVzID0ge307XG5cbiAgY29uc3RydWN0b3IoXG4gICAgcHVibGljIHJlYWRvbmx5IGNvdW50ZXJTdG9yZTogQ291bnRlclN0b3JlLFxuICAgIHB1YmxpYyByZWFkb25seSBiYXNlVVJMOiBzdHJpbmcsXG4gICAgcHVibGljIHJlYWRvbmx5IHJvb3RTY29wZTogRXhwcnMuTGV4aWNhbFNjb3BlLFxuICAgIHB1YmxpYyByZWFkb25seSBwYWdlU2NvcGU6IEV4cHJzLkxleGljYWxTY29wZSxcbiAgKSB7fVxuXG4gIHNldFN0eWxlcihzdHlsZXI6IENzc1N0eWxlci5TdHlsZXIpOiB2b2lkIHtcbiAgICB0aGlzLnN0eWxlciA9IHN0eWxlcjtcbiAgfVxuXG4gIHByaXZhdGUgZ2V0RnJhZ21lbnQodXJsOiBzdHJpbmcpOiBzdHJpbmcgfCBudWxsIHtcbiAgICBjb25zdCByID0gdXJsLm1hdGNoKC9eW14jXSojKC4qKSQvKTtcbiAgICByZXR1cm4gciA/IHJbMV0gOiBudWxsO1xuICB9XG5cbiAgcHJpdmF0ZSBnZXRUcmFuc2Zvcm1lZElkKHVybDogc3RyaW5nKTogc3RyaW5nIHtcbiAgICBsZXQgdHJhbnNmb3JtZWRJZCA9IHRoaXMuY291bnRlclN0b3JlLmRvY3VtZW50VVJMVHJhbnNmb3JtZXIudHJhbnNmb3JtVVJMKFxuICAgICAgQmFzZS5yZXNvbHZlVVJMKHVybCwgdGhpcy5iYXNlVVJMKSxcbiAgICAgIHRoaXMuYmFzZVVSTCxcbiAgICApO1xuICAgIGlmICh0cmFuc2Zvcm1lZElkLmNoYXJBdCgwKSA9PT0gXCIjXCIpIHtcbiAgICAgIHRyYW5zZm9ybWVkSWQgPSB0cmFuc2Zvcm1lZElkLnN1YnN0cmluZygxKTtcbiAgICB9XG4gICAgcmV0dXJuIHRyYW5zZm9ybWVkSWQ7XG4gIH1cblxuICAvKipcbiAgICogQG92ZXJyaWRlXG4gICAqL1xuICBnZXRQYWdlQ291bnRlclZhbChcbiAgICBuYW1lOiBzdHJpbmcsXG4gICAgZm9ybWF0OiAocDE6IG51bWJlciB8IG51bGwpID0+IHN0cmluZyxcbiAgKTogRXhwcnMuVmFsIHtcbiAgICBjb25zdCBnZXRDb3VudGVyTnVtYmVyID0gKCkgPT4ge1xuICAgICAgY29uc3QgdmFsdWVzID0gdGhpcy5jb3VudGVyU3RvcmUuY3VycmVudFBhZ2VDb3VudGVyc1tuYW1lXTtcbiAgICAgIHJldHVybiB2YWx1ZXMgJiYgdmFsdWVzLmxlbmd0aCA/IHZhbHVlc1t2YWx1ZXMubGVuZ3RoIC0gMV0gOiBudWxsO1xuICAgIH07XG5cbiAgICBjb25zdCBleHByID0gbmV3IEV4cHJzLk5hdGl2ZShcbiAgICAgIHRoaXMucGFnZVNjb3BlLFxuICAgICAgKCkgPT4gZm9ybWF0KGdldENvdW50ZXJOdW1iZXIoKSksXG4gICAgICBgcGFnZS1jb3VudGVyLSR7bmFtZX1gLFxuICAgICk7XG5cbiAgICBjb25zdCBhcnJheUZvcm1hdCA9IChhcnIpID0+IHtcbiAgICAgIHJldHVybiBmb3JtYXQoYXJyWzBdKTtcbiAgICB9O1xuXG4gICAgdGhpcy5jb3VudGVyU3RvcmUucmVnaXN0ZXJQYWdlQ291bnRlckV4cHIobmFtZSwgYXJyYXlGb3JtYXQsIGV4cHIpO1xuICAgIHJldHVybiBleHByO1xuICB9XG5cbiAgLyoqXG4gICAqIEBvdmVycmlkZVxuICAgKi9cbiAgZ2V0UGFnZUNvdW50ZXJzVmFsKFxuICAgIG5hbWU6IHN0cmluZyxcbiAgICBmb3JtYXQ6IChwMTogbnVtYmVyW10pID0+IHN0cmluZyxcbiAgKTogRXhwcnMuVmFsIHtcbiAgICBjb25zdCBnZXRDb3VudGVyTnVtYmVycyA9ICgpID0+IHtcbiAgICAgIHJldHVybiB0aGlzLmNvdW50ZXJTdG9yZS5jdXJyZW50UGFnZUNvdW50ZXJzW25hbWVdIHx8IFtdO1xuICAgIH07XG5cbiAgICBjb25zdCBleHByID0gbmV3IEV4cHJzLk5hdGl2ZShcbiAgICAgIHRoaXMucGFnZVNjb3BlLFxuICAgICAgKCkgPT4gZm9ybWF0KGdldENvdW50ZXJOdW1iZXJzKCkpLFxuICAgICAgYHBhZ2UtY291bnRlcnMtJHtuYW1lfWAsXG4gICAgKTtcbiAgICB0aGlzLmNvdW50ZXJTdG9yZS5yZWdpc3RlclBhZ2VDb3VudGVyRXhwcihuYW1lLCBmb3JtYXQsIGV4cHIpO1xuICAgIHJldHVybiBleHByO1xuICB9XG5cbiAgLyoqXG4gICAqIFJldHVybnMgKG5vbiBwYWdlLWJhc2VkKSBjb3VudGVyIHZhbHVlcyBmb3IgYW4gZWxlbWVudCB3aXRoIHRoZSBzcGVjaWZpZWRcbiAgICogSUQuIFJldHVybnMgbnVsbCBpZiB0aGUgc3R5bGUgb2YgdGhlIGVsZW1lbnRzIGhhcyBub3QgYmVlbiBjYWxjdWxhdGVkIHlldFxuICAgKiAoaS5lLiB0aGUgZWxlbWVudCBkb2VzIG5vdCBleGl0IG9yIGl0IGlzIGluIGEgc291cmNlIGRvY3VtZW50IHdoaWNoIGlzIG5vdFxuICAgKiBsb2FkZWQgeWV0KS5cbiAgICogQHBhcmFtIGlkIE9yaWdpbmFsIElEIHZhbHVlXG4gICAqIEBwYXJhbSB0cmFuc2Zvcm1lZElkIElEIHRyYW5zZm9ybWVkIGJ5IERvY3VtZW50VVJMVHJhbnNmb3JtZXIgdG8gaGFuZGxlIGFcbiAgICogICAgIHJlZmVyZW5jZSBhY3Jvc3MgbXVsdGlwbGUgc291cmNlIGRvY3VtZW50c1xuICAgKiBAcGFyYW0gbG9va0ZvckVsZW1lbnQgSWYgdHJ1ZSwgbG9vayBhaGVhZCBmb3IgYW4gZWxlbWVudCB3aXRoIHRoZSBJRCBpbiB0aGVcbiAgICogICAgIGN1cnJlbnQgc291cmNlIGRvY3VtZW50IHdoZW4gc3VjaCBhbiBlbGVtZW50IGhhcyBub3QgYXBwZWFyZWQgeWV0LiBEb1xuICAgKiAgICAgbm90IHNldCB0byB0cnVlIGR1cmluZyBTdHlsZXIuc3R5bGVVbnRpbCBpcyBiZWluZyBjYWxsZWQsIHNpbmNlIGluIHRoYXRcbiAgICogICAgIGNhc2UgU3R5bGVyLnN0eWxlVW50aWwgY2FuIGJlIGNhbGxlZCBhZ2FpbiBhbmQgbWF5IGxlYWQgdG8gaW50ZXJuYWxcbiAgICogICAgIGluY29uc2lzdGVuY3kuXG4gICAqL1xuICBwcml2YXRlIGdldFRhcmdldENvdW50ZXJzKFxuICAgIGlkOiBzdHJpbmcgfCBudWxsLFxuICAgIHRyYW5zZm9ybWVkSWQ6IHN0cmluZyxcbiAgICBsb29rRm9yRWxlbWVudDogYm9vbGVhbixcbiAgKTogQ3NzQ2FzY2FkZS5Db3VudGVyVmFsdWVzIHwgbnVsbCB7XG4gICAgbGV0IHRhcmdldENvdW50ZXJzID0gdGhpcy5jb3VudGVyU3RvcmUuY291bnRlcnNCeUlkW3RyYW5zZm9ybWVkSWRdO1xuICAgIGlmICghdGFyZ2V0Q291bnRlcnMgJiYgbG9va0ZvckVsZW1lbnQgJiYgaWQpIHtcbiAgICAgIHRoaXMuc3R5bGVyLnN0eWxlVW50aWxJZElzUmVhY2hlZChpZCk7XG4gICAgICB0YXJnZXRDb3VudGVycyA9IHRoaXMuY291bnRlclN0b3JlLmNvdW50ZXJzQnlJZFt0cmFuc2Zvcm1lZElkXTtcbiAgICB9XG4gICAgcmV0dXJuIHRhcmdldENvdW50ZXJzIHx8IG51bGw7XG4gIH1cblxuICAvKipcbiAgICogUmV0dXJucyBwYWdlLWJhc2VkIGNvdW50ZXIgdmFsdWVzIGZvciBhbiBlbGVtZW50IHdpdGggdGhlIHNwZWNpZmllZCBJRC5cbiAgICogUmV0dXJucyBudWxsIGlmIHRoZSBlbGVtZW50IGhhcyBub3QgYmVlbiBsYWlkIG91dCB5ZXQuXG4gICAqIEBwYXJhbSB0cmFuc2Zvcm1lZElkIElEIHRyYW5zZm9ybWVkIGJ5IERvY3VtZW50VVJMVHJhbnNmb3JtZXIgdG8gaGFuZGxlIGFcbiAgICogICAgIHJlZmVyZW5jZSBhY3Jvc3MgbXVsdGlwbGUgc291cmNlIGRvY3VtZW50c1xuICAgKi9cbiAgcHJpdmF0ZSBnZXRUYXJnZXRQYWdlQ291bnRlcnMoXG4gICAgdHJhbnNmb3JtZWRJZDogc3RyaW5nLFxuICApOiBDc3NDYXNjYWRlLkNvdW50ZXJWYWx1ZXMgfCBudWxsIHtcbiAgICBpZiAodGhpcy5jb3VudGVyU3RvcmUuY3VycmVudFBhZ2UuZWxlbWVudHNCeUlkW3RyYW5zZm9ybWVkSWRdKSB7XG4gICAgICByZXR1cm4gdGhpcy5jb3VudGVyU3RvcmUuY3VycmVudFBhZ2VDb3VudGVycztcbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuIHRoaXMuY291bnRlclN0b3JlLnBhZ2VDb3VudGVyc0J5SWRbdHJhbnNmb3JtZWRJZF0gfHwgbnVsbDtcbiAgICB9XG4gIH1cblxuICAvKipcbiAgICogQG92ZXJyaWRlXG4gICAqL1xuICBnZXRUYXJnZXRDb3VudGVyVmFsKFxuICAgIHVybDogc3RyaW5nLFxuICAgIG5hbWU6IHN0cmluZyxcbiAgICBmb3JtYXQ6IChwMTogbnVtYmVyIHwgbnVsbCkgPT4gc3RyaW5nLFxuICApOiBFeHBycy5WYWwge1xuICAgIGNvbnN0IGlkID0gdGhpcy5nZXRGcmFnbWVudCh1cmwpO1xuICAgIGNvbnN0IHRyYW5zZm9ybWVkSWQgPSB0aGlzLmdldFRyYW5zZm9ybWVkSWQodXJsKTtcblxuICAgIC8vIFNpbmNlIHRoaXMgbWV0aG9kIGlzIGV4ZWN1dGVkIGR1cmluZyBTdHlsZXIuc3R5bGVVbnRpbCBpcyBiZWluZyBjYWxsZWQsXG4gICAgLy8gc2V0IGZhbHNlIHRvIGxvb2tGb3JFbGVtZW50IGFyZ3VtZW50LlxuICAgIGxldCBjb3VudGVycyA9IHRoaXMuZ2V0VGFyZ2V0Q291bnRlcnMoaWQsIHRyYW5zZm9ybWVkSWQsIGZhbHNlKTtcbiAgICBpZiAoY291bnRlcnMgJiYgY291bnRlcnNbbmFtZV0pIHtcbiAgICAgIC8vIFNpbmNlIGFuIGVsZW1lbnQtYmFzZWQgY291bnRlciBpcyBkZWZpbmVkLCBhbnkgcGFnZS1iYXNlZCBjb3VudGVyIGlzXG4gICAgICAvLyBvYnNjdXJlZCBldmVuIGlmIGl0IGV4aXN0cy5cbiAgICAgIGNvbnN0IGNvdW50ZXJzT2ZOYW1lID0gY291bnRlcnNbbmFtZV07XG4gICAgICByZXR1cm4gbmV3IEV4cHJzLkNvbnN0KFxuICAgICAgICB0aGlzLnJvb3RTY29wZSxcbiAgICAgICAgZm9ybWF0KGNvdW50ZXJzT2ZOYW1lW2NvdW50ZXJzT2ZOYW1lLmxlbmd0aCAtIDFdIHx8IG51bGwpLFxuICAgICAgKTtcbiAgICB9XG4gICAgcmV0dXJuIG5ldyBFeHBycy5OYXRpdmUoXG4gICAgICB0aGlzLnBhZ2VTY29wZSxcbiAgICAgICgpID0+IHtcbiAgICAgICAgLy8gU2luY2UgVGhpcyBibG9jayBpcyBldmFsdWF0ZWQgZHVyaW5nIGxheW91dCwgbG9va0ZvckVsZW1lbnRcbiAgICAgICAgLy8gYXJndW1lbnQgY2FuIGJlIHNldCB0byB0cnVlLlxuICAgICAgICBjb3VudGVycyA9IHRoaXMuZ2V0VGFyZ2V0Q291bnRlcnMoaWQsIHRyYW5zZm9ybWVkSWQsIHRydWUpO1xuXG4gICAgICAgIGlmIChjb3VudGVycykge1xuICAgICAgICAgIGlmIChjb3VudGVyc1tuYW1lXSkge1xuICAgICAgICAgICAgLy8gU2luY2UgYW4gZWxlbWVudC1iYXNlZCBjb3VudGVyIGlzIGRlZmluZWQsIGFueSBwYWdlLWJhc2VkXG4gICAgICAgICAgICAvLyBjb3VudGVyIGlzIG9ic2N1cmVkIGV2ZW4gaWYgaXQgZXhpc3RzLlxuICAgICAgICAgICAgY29uc3QgY291bnRlcnNPZk5hbWUgPSBjb3VudGVyc1tuYW1lXTtcbiAgICAgICAgICAgIHJldHVybiBmb3JtYXQoY291bnRlcnNPZk5hbWVbY291bnRlcnNPZk5hbWUubGVuZ3RoIC0gMV0gfHwgbnVsbCk7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGNvbnN0IHBhZ2VDb3VudGVycyA9IHRoaXMuZ2V0VGFyZ2V0UGFnZUNvdW50ZXJzKHRyYW5zZm9ybWVkSWQpO1xuICAgICAgICAgICAgaWYgKHBhZ2VDb3VudGVycykge1xuICAgICAgICAgICAgICAvLyBUaGUgdGFyZ2V0IGVsZW1lbnQgaGFzIGFscmVhZHkgYmVlbiBsYWlkIG91dC5cbiAgICAgICAgICAgICAgdGhpcy5jb3VudGVyU3RvcmUucmVzb2x2ZVJlZmVyZW5jZSh0cmFuc2Zvcm1lZElkKTtcbiAgICAgICAgICAgICAgaWYgKHBhZ2VDb3VudGVyc1tuYW1lXSkge1xuICAgICAgICAgICAgICAgIGNvbnN0IHBhZ2VDb3VudGVyc09mTmFtZSA9IHBhZ2VDb3VudGVyc1tuYW1lXTtcbiAgICAgICAgICAgICAgICByZXR1cm4gZm9ybWF0KFxuICAgICAgICAgICAgICAgICAgcGFnZUNvdW50ZXJzT2ZOYW1lW3BhZ2VDb3VudGVyc09mTmFtZS5sZW5ndGggLSAxXSB8fCBudWxsLFxuICAgICAgICAgICAgICAgICk7XG4gICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgLy8gTm8gY29ycmVzcG9uZGluZyBjb3VudGVyIHdpdGggdGhlIG5hbWUuXG4gICAgICAgICAgICAgICAgcmV0dXJuIGZvcm1hdCgwKTtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgLy8gVGhlIHRhcmdldCBlbGVtZW50IGhhcyBub3QgYmVlbiBsYWlkIG91dCB5ZXQuXG4gICAgICAgICAgICAgIHRoaXMuY291bnRlclN0b3JlLnNhdmVSZWZlcmVuY2VPZkN1cnJlbnRQYWdlKFxuICAgICAgICAgICAgICAgIHRyYW5zZm9ybWVkSWQsXG4gICAgICAgICAgICAgICAgZmFsc2UsXG4gICAgICAgICAgICAgICk7XG4gICAgICAgICAgICAgIHJldHVybiBcIj8/XCI7IC8vIFRPRE8gbW9yZSByZWFzb25hYmxlIHBsYWNlaG9sZGVyP1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAvLyBUaGUgc3R5bGUgb2YgdGFyZ2V0IGVsZW1lbnQgaGFzIG5vdCBiZWVuIGNhbGN1bGF0ZWQgeWV0LlxuICAgICAgICAgIC8vIChUaGUgZWxlbWVudCBpcyBpbiBhbm90aGVyIHNvdXJjZSBkb2N1bWVudCB0aGF0IGlzIG5vdCBwYXJzZWRcbiAgICAgICAgICAvLyB5ZXQpXG4gICAgICAgICAgdGhpcy5jb3VudGVyU3RvcmUuc2F2ZVJlZmVyZW5jZU9mQ3VycmVudFBhZ2UodHJhbnNmb3JtZWRJZCwgZmFsc2UpO1xuICAgICAgICAgIHJldHVybiBcIj8/XCI7IC8vIFRPRE8gbW9yZSByZWFzb25hYmxlIHBsYWNlaG9sZGVyP1xuICAgICAgICB9XG4gICAgICB9LFxuICAgICAgYHRhcmdldC1jb3VudGVyLSR7bmFtZX0tb2YtJHt1cmx9YCxcbiAgICApO1xuICB9XG5cbiAgLyoqXG4gICAqIEBvdmVycmlkZVxuICAgKi9cbiAgZ2V0VGFyZ2V0Q291bnRlcnNWYWwoXG4gICAgdXJsOiBzdHJpbmcsXG4gICAgbmFtZTogc3RyaW5nLFxuICAgIGZvcm1hdDogKHAxOiBudW1iZXJbXSkgPT4gc3RyaW5nLFxuICApOiBFeHBycy5WYWwge1xuICAgIGNvbnN0IGlkID0gdGhpcy5nZXRGcmFnbWVudCh1cmwpO1xuICAgIGNvbnN0IHRyYW5zZm9ybWVkSWQgPSB0aGlzLmdldFRyYW5zZm9ybWVkSWQodXJsKTtcbiAgICByZXR1cm4gbmV3IEV4cHJzLk5hdGl2ZShcbiAgICAgIHRoaXMucGFnZVNjb3BlLFxuICAgICAgKCkgPT4ge1xuICAgICAgICBjb25zdCBwYWdlQ291bnRlcnMgPSB0aGlzLmdldFRhcmdldFBhZ2VDb3VudGVycyh0cmFuc2Zvcm1lZElkKTtcblxuICAgICAgICBpZiAoIXBhZ2VDb3VudGVycykge1xuICAgICAgICAgIC8vIFRoZSB0YXJnZXQgZWxlbWVudCBoYXMgbm90IGJlZW4gbGFpZCBvdXQgeWV0LlxuICAgICAgICAgIHRoaXMuY291bnRlclN0b3JlLnNhdmVSZWZlcmVuY2VPZkN1cnJlbnRQYWdlKHRyYW5zZm9ybWVkSWQsIGZhbHNlKTtcbiAgICAgICAgICByZXR1cm4gXCI/P1wiOyAvLyBUT0RPIG1vcmUgcmVhc29uYWJsZSBwbGFjZWhvbGRlcj9cbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICB0aGlzLmNvdW50ZXJTdG9yZS5yZXNvbHZlUmVmZXJlbmNlKHRyYW5zZm9ybWVkSWQpO1xuICAgICAgICAgIGNvbnN0IHBhZ2VDb3VudGVyc09mTmFtZSA9IHBhZ2VDb3VudGVyc1tuYW1lXSB8fCBbXTtcbiAgICAgICAgICBjb25zdCBlbGVtZW50Q291bnRlcnMgPSB0aGlzLmdldFRhcmdldENvdW50ZXJzKFxuICAgICAgICAgICAgaWQsXG4gICAgICAgICAgICB0cmFuc2Zvcm1lZElkLFxuICAgICAgICAgICAgdHJ1ZSxcbiAgICAgICAgICApO1xuICAgICAgICAgIGNvbnN0IGVsZW1lbnRDb3VudGVyc09mTmFtZSA9IGVsZW1lbnRDb3VudGVyc1tuYW1lXSB8fCBbXTtcbiAgICAgICAgICByZXR1cm4gZm9ybWF0KHBhZ2VDb3VudGVyc09mTmFtZS5jb25jYXQoZWxlbWVudENvdW50ZXJzT2ZOYW1lKSk7XG4gICAgICAgIH1cbiAgICAgIH0sXG4gICAgICBgdGFyZ2V0LWNvdW50ZXJzLSR7bmFtZX0tb2YtJHt1cmx9YCxcbiAgICApO1xuICB9XG5cbiAgLyoqXG4gICAqIEdldCB2YWx1ZSBvZiB0aGUgQ1NTIHN0cmluZygpIGZ1bmN0aW9uXG4gICAqIGh0dHBzOi8vZHJhZnRzLmNzc3dnLm9yZy9jc3MtZ2NwbS0zLyN1c2luZy1uYW1lZC1zdHJpbmdzXG4gICAqL1xuICBnZXROYW1lZFN0cmluZ1ZhbChuYW1lOiBzdHJpbmcsIHJldHJpZXZlUG9zaXRpb246IHN0cmluZyk6IEV4cHJzLlZhbCB7XG4gICAgcmV0dXJuIG5ldyBFeHBycy5OYXRpdmUoXG4gICAgICB0aGlzLnBhZ2VTY29wZSxcbiAgICAgICgpID0+IHtcbiAgICAgICAgY29uc3Qgc3RyaW5nVmFsdWVzID0gdGhpcy5uYW1lZFN0cmluZ1ZhbHVlc1tuYW1lXTtcbiAgICAgICAgaWYgKCFzdHJpbmdWYWx1ZXMpIHtcbiAgICAgICAgICByZXR1cm4gXCJcIjtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCBvZmZzZXRzID0gT2JqZWN0LmtleXMoc3RyaW5nVmFsdWVzKVxuICAgICAgICAgIC5tYXAoKGEpID0+IHBhcnNlSW50KGEsIDEwKSlcbiAgICAgICAgICAuc29ydChCYXNlLm51bWJlckNvbXBhcmUpO1xuXG4gICAgICAgIGNvbnN0IGN1cnJlbnRQYWdlID0gdGhpcy5jb3VudGVyU3RvcmUuY3VycmVudFBhZ2U7XG4gICAgICAgIGNvbnN0IHBhZ2VTdGFydE9mZnNldCA9IGN1cnJlbnRQYWdlLm9mZnNldDtcbiAgICAgICAgY29uc3QgcGFnZUxhc3RPZmZzZXQgPSBNYXRoLm1heChcbiAgICAgICAgICBwYWdlU3RhcnRPZmZzZXQsXG4gICAgICAgICAgLi4uQXJyYXkuZnJvbShcbiAgICAgICAgICAgIGN1cnJlbnRQYWdlLmNvbnRhaW5lci5xdWVyeVNlbGVjdG9yQWxsKFxuICAgICAgICAgICAgICBgWyR7QmFzZS5FTEVNRU5UX09GRlNFVF9BVFRSfV1gLFxuICAgICAgICAgICAgKSxcbiAgICAgICAgICApLm1hcCgoZSkgPT4gcGFyc2VJbnQoZS5nZXRBdHRyaWJ1dGUoQmFzZS5FTEVNRU5UX09GRlNFVF9BVFRSKSwgMTApKSxcbiAgICAgICAgKTtcblxuICAgICAgICBsZXQgZmlyc3RPZmZzZXQgPSAtMTtcbiAgICAgICAgbGV0IHN0YXJ0T2Zmc2V0ID0gLTE7XG4gICAgICAgIGxldCBsYXN0T2Zmc2V0ID0gLTE7XG4gICAgICAgIGxldCBmaXJzdEV4Y2VwdE9mZnNldCA9IC0xO1xuXG4gICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgb2Zmc2V0cy5sZW5ndGg7IGkrKykge1xuICAgICAgICAgIGNvbnN0IG9mZnNldCA9IG9mZnNldHNbaV07XG4gICAgICAgICAgY29uc3Qgb2Zmc2V0UHJldiA9IGkgPiAwID8gb2Zmc2V0c1tpIC0gMV0gOiAtMTtcbiAgICAgICAgICBjb25zdCBvZmZzZXROZXh0ID0gaSA8IG9mZnNldHMubGVuZ3RoIC0gMSA/IG9mZnNldHNbaSArIDFdIDogLTE7XG4gICAgICAgICAgaWYgKG9mZnNldCA+IHBhZ2VMYXN0T2Zmc2V0KSB7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgICB9XG4gICAgICAgICAgaWYgKG9mZnNldCA+PSBwYWdlU3RhcnRPZmZzZXQpIHtcbiAgICAgICAgICAgIGlmIChmaXJzdE9mZnNldCA8IDApIHtcbiAgICAgICAgICAgICAgZmlyc3RPZmZzZXQgPSBvZmZzZXQ7XG4gICAgICAgICAgICAgIGZpcnN0RXhjZXB0T2Zmc2V0ID0gLTE7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoc3RhcnRPZmZzZXQgPCAwKSB7XG4gICAgICAgICAgICAgIGlmIChvZmZzZXQgPT09IHBhZ2VTdGFydE9mZnNldCkge1xuICAgICAgICAgICAgICAgIHN0YXJ0T2Zmc2V0ID0gb2Zmc2V0O1xuICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIGlmIChvZmZzZXRQcmV2IDwgZmlyc3RPZmZzZXQpIHtcbiAgICAgICAgICAgICAgICAgIHN0YXJ0T2Zmc2V0ID0gb2Zmc2V0UHJldjtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgLy8gQ2hlY2sgaWYgdGhlIGVsZW1lbnQgYXQgdGhlIG9mZnNldCBpcyBhdCBiZWdpbm5pbmcgb2YgdGhlIHBhZ2VcbiAgICAgICAgICAgICAgICBjb25zdCBlbGVtZW50QXRPZmZzZXQgPSBjdXJyZW50UGFnZS5jb250YWluZXIucXVlcnlTZWxlY3RvcihcbiAgICAgICAgICAgICAgICAgIGBbJHtCYXNlLkVMRU1FTlRfT0ZGU0VUX0FUVFJ9PVwiJHtvZmZzZXR9XCJdYCxcbiAgICAgICAgICAgICAgICApO1xuICAgICAgICAgICAgICAgIGlmICghZWxlbWVudEF0T2Zmc2V0KSB7XG4gICAgICAgICAgICAgICAgICAvLyB0aXRsZSBvciBtZXRhIGVsZW1lbnRzIGFyZSBub3Qgb3V0cHV0LCBidXQgc2hvdWxkIGJlIHRyZWF0ZWQgYXMgc3RhcnRcbiAgICAgICAgICAgICAgICAgIGlmIChzdGFydE9mZnNldCA8IDApIHtcbiAgICAgICAgICAgICAgICAgICAgc3RhcnRPZmZzZXQgPSBvZmZzZXQ7XG4gICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgIGxldCBlbGVtZW50QXRQYWdlU3RhcnRPZmZzZXQgPSBjdXJyZW50UGFnZS5jb250YWluZXIucXVlcnlTZWxlY3RvcihcbiAgICAgICAgICAgICAgICAgICAgYFske0Jhc2UuRUxFTUVOVF9PRkZTRVRfQVRUUn09XCIke3BhZ2VTdGFydE9mZnNldH1cIl1gLFxuICAgICAgICAgICAgICAgICAgKTtcbiAgICAgICAgICAgICAgICAgIGlmICghZWxlbWVudEF0UGFnZVN0YXJ0T2Zmc2V0KSB7XG4gICAgICAgICAgICAgICAgICAgIC8vIFRoZSBlbGVtZW50IGF0IHBhZ2VTdGFydE9mZnNldCBpcyBub3QgZm91bmQgd2hlbiBwYWdlIGJyZWFrIG9jY3VyZWRcbiAgICAgICAgICAgICAgICAgICAgLy8gd2l0aGluIGFuIGVsZW1lbnQsIHNvIHVzZSB0aGUgYW5jZXN0b3IgZWxlbWVudCB3aXRoIG9mZnNldCAwIGluc3RlYWQuXG4gICAgICAgICAgICAgICAgICAgIGVsZW1lbnRBdFBhZ2VTdGFydE9mZnNldCA9IGN1cnJlbnRQYWdlLmNvbnRhaW5lci5xdWVyeVNlbGVjdG9yKFxuICAgICAgICAgICAgICAgICAgICAgIGBbJHtCYXNlLkVMRU1FTlRfT0ZGU0VUX0FUVFJ9PVwiMFwiXWAsXG4gICAgICAgICAgICAgICAgICAgICk7XG4gICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICBpZiAoZWxlbWVudEF0UGFnZVN0YXJ0T2Zmc2V0KSB7XG4gICAgICAgICAgICAgICAgICAgIC8vIEZpbmQgaWYgdGhlIGVsZW1lbnQgYXQgdGhlIG9mZnNldCBpcyAodGhlIGZpcnN0IGNoaWxkIG9mKSogdGhlIGVsZW1lbnQgYXQgcGFnZSBzdGFydFxuICAgICAgICAgICAgICAgICAgICBmb3IgKFxuICAgICAgICAgICAgICAgICAgICAgIGxldCBlbGVtZW50ID0gZWxlbWVudEF0UGFnZVN0YXJ0T2Zmc2V0O1xuICAgICAgICAgICAgICAgICAgICAgIGVsZW1lbnQ7XG4gICAgICAgICAgICAgICAgICAgICAgZWxlbWVudCA9IGVsZW1lbnQuZmlyc3RFbGVtZW50Q2hpbGRcbiAgICAgICAgICAgICAgICAgICAgKSB7XG4gICAgICAgICAgICAgICAgICAgICAgaWYgKGVsZW1lbnQgPT09IGVsZW1lbnRBdE9mZnNldCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgc3RhcnRPZmZzZXQgPSBvZmZzZXQ7XG4gICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGxhc3RPZmZzZXQgPSBvZmZzZXQ7XG4gICAgICAgICAgfSBlbHNlIGlmIChvZmZzZXROZXh0ID4gcGFnZUxhc3RPZmZzZXQgfHwgb2Zmc2V0TmV4dCA8IDApIHtcbiAgICAgICAgICAgIGZpcnN0T2Zmc2V0ID0gc3RhcnRPZmZzZXQgPSBsYXN0T2Zmc2V0ID0gZmlyc3RFeGNlcHRPZmZzZXQgPSBvZmZzZXQ7XG4gICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgY29uc3Qgc3RyaW5nVmFsdWUgPVxuICAgICAgICAgIHN0cmluZ1ZhbHVlc1tcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgZmlyc3Q6IGZpcnN0T2Zmc2V0LFxuICAgICAgICAgICAgICBzdGFydDogc3RhcnRPZmZzZXQsXG4gICAgICAgICAgICAgIGxhc3Q6IGxhc3RPZmZzZXQsXG4gICAgICAgICAgICAgIFwiZmlyc3QtZXhjZXB0XCI6IGZpcnN0RXhjZXB0T2Zmc2V0LFxuICAgICAgICAgICAgfVtyZXRyaWV2ZVBvc2l0aW9uXVxuICAgICAgICAgIF0gfHwgXCJcIjtcblxuICAgICAgICByZXR1cm4gc3RyaW5nVmFsdWU7XG4gICAgICB9LFxuICAgICAgYG5hbWVkLXN0cmluZy0ke3JldHJpZXZlUG9zaXRpb259LSR7bmFtZX1gLFxuICAgICk7XG4gIH1cblxuICAvKipcbiAgICogU2V0IG5hbWVkIHN0cmluZyBmb3IgdGhlIENTUyBzdHJpbmctc2V0IHByb3BlcnR5XG4gICAqIGh0dHBzOi8vZHJhZnRzLmNzc3dnLm9yZy9jc3MtZ2NwbS0zLyNzZXR0aW5nLW5hbWVkLXN0cmluZ3MtdGhlLXN0cmluZy1zZXQtcHJvXG4gICAqL1xuICBzZXROYW1lZFN0cmluZyhcbiAgICBuYW1lOiBzdHJpbmcsXG4gICAgc3RyaW5nVmFsdWU6IHN0cmluZyxcbiAgICBjYXNjYWRlSW5zdGFuY2U6IENzc0Nhc2NhZGUuQ2FzY2FkZUluc3RhbmNlLFxuICApOiB2b2lkIHtcbiAgICBjb25zdCB2YWx1ZXMgPVxuICAgICAgdGhpcy5uYW1lZFN0cmluZ1ZhbHVlc1tuYW1lXSB8fCAodGhpcy5uYW1lZFN0cmluZ1ZhbHVlc1tuYW1lXSA9IHt9KTtcbiAgICB2YWx1ZXNbY2FzY2FkZUluc3RhbmNlLmN1cnJlbnRFbGVtZW50T2Zmc2V0XSA9IHN0cmluZ1ZhbHVlO1xuICB9XG59XG5cbmV4cG9ydCBjbGFzcyBDb3VudGVyU3RvcmUge1xuICBjb3VudGVyc0J5SWQ6IHsgW2tleTogc3RyaW5nXTogQ3NzQ2FzY2FkZS5Db3VudGVyVmFsdWVzIH0gPSB7fTtcbiAgcGFnZUNvdW50ZXJzQnlJZDogeyBba2V5OiBzdHJpbmddOiBDc3NDYXNjYWRlLkNvdW50ZXJWYWx1ZXMgfSA9IHt9O1xuICBjdXJyZW50UGFnZUNvdW50ZXJzOiBDc3NDYXNjYWRlLkNvdW50ZXJWYWx1ZXMgPSB7fTtcbiAgcHJldmlvdXNQYWdlQ291bnRlcnM6IENzc0Nhc2NhZGUuQ291bnRlclZhbHVlcyA9IHt9O1xuICBjdXJyZW50UGFnZUNvdW50ZXJzU3RhY2s6IENzc0Nhc2NhZGUuQ291bnRlclZhbHVlc1tdID0gW107XG4gIHBhZ2VJbmRpY2VzQnlJZDoge1xuICAgIFtrZXk6IHN0cmluZ106IHsgc3BpbmVJbmRleDogbnVtYmVyOyBwYWdlSW5kZXg6IG51bWJlciB9O1xuICB9ID0ge307XG4gIGN1cnJlbnRQYWdlOiBWdHJlZS5QYWdlID0gbnVsbDtcbiAgbmV3UmVmZXJlbmNlc09mQ3VycmVudFBhZ2U6IFRhcmdldENvdW50ZXJSZWZlcmVuY2VbXSA9IFtdO1xuICByZWZlcmVuY2VzVG9Tb2x2ZTogVGFyZ2V0Q291bnRlclJlZmVyZW5jZVtdID0gW107XG4gIHJlZmVyZW5jZXNUb1NvbHZlU3RhY2s6IFRhcmdldENvdW50ZXJSZWZlcmVuY2VbXVtdID0gW107XG4gIHVucmVzb2x2ZWRSZWZlcmVuY2VzOiB7IFtrZXk6IHN0cmluZ106IFRhcmdldENvdW50ZXJSZWZlcmVuY2VbXSB9ID0ge307XG4gIHJlc29sdmVkUmVmZXJlbmNlczogeyBba2V5OiBzdHJpbmddOiBUYXJnZXRDb3VudGVyUmVmZXJlbmNlW10gfSA9IHt9O1xuICBwcml2YXRlIHBhZ2VzQ291bnRlckV4cHJzOiB7XG4gICAgZXhwcjogRXhwcnMuVmFsO1xuICAgIGZvcm1hdDogKHAxOiBudW1iZXJbXSkgPT4gc3RyaW5nO1xuICB9W10gPSBbXTtcblxuICBjb25zdHJ1Y3RvcihcbiAgICBwdWJsaWMgcmVhZG9ubHkgZG9jdW1lbnRVUkxUcmFuc2Zvcm1lcjogQmFzZS5Eb2N1bWVudFVSTFRyYW5zZm9ybWVyLFxuICApIHtcbiAgICB0aGlzLmN1cnJlbnRQYWdlQ291bnRlcnNbXCJwYWdlXCJdID0gWzBdO1xuICB9XG5cbiAgY3JlYXRlQ291bnRlckxpc3RlbmVyKGJhc2VVUkw6IHN0cmluZyk6IENzc0Nhc2NhZGUuQ291bnRlckxpc3RlbmVyIHtcbiAgICByZXR1cm4gbmV3IENvdW50ZXJMaXN0ZW5lcih0aGlzLCBiYXNlVVJMKTtcbiAgfVxuXG4gIGNyZWF0ZUNvdW50ZXJSZXNvbHZlcihcbiAgICBiYXNlVVJMOiBzdHJpbmcsXG4gICAgcm9vdFNjb3BlOiBFeHBycy5MZXhpY2FsU2NvcGUsXG4gICAgcGFnZVNjb3BlOiBFeHBycy5MZXhpY2FsU2NvcGUsXG4gICk6IENzc0Nhc2NhZGUuQ291bnRlclJlc29sdmVyIHtcbiAgICByZXR1cm4gbmV3IENvdW50ZXJSZXNvbHZlcih0aGlzLCBiYXNlVVJMLCByb290U2NvcGUsIHBhZ2VTY29wZSk7XG4gIH1cblxuICBzZXRDdXJyZW50UGFnZShwYWdlOiBWdHJlZS5QYWdlKSB7XG4gICAgdGhpcy5jdXJyZW50UGFnZSA9IHBhZ2U7XG4gIH1cblxuICBwcml2YXRlIGRlZmluZVBhZ2VDb3VudGVyKGNvdW50ZXJOYW1lOiBzdHJpbmcsIHZhbHVlOiBudW1iZXIpIHtcbiAgICBpZiAodGhpcy5jdXJyZW50UGFnZUNvdW50ZXJzW2NvdW50ZXJOYW1lXSkge1xuICAgICAgdGhpcy5jdXJyZW50UGFnZUNvdW50ZXJzW2NvdW50ZXJOYW1lXS5wdXNoKHZhbHVlKTtcbiAgICB9IGVsc2Uge1xuICAgICAgdGhpcy5jdXJyZW50UGFnZUNvdW50ZXJzW2NvdW50ZXJOYW1lXSA9IFt2YWx1ZV07XG4gICAgfVxuICB9XG5cbiAgLyoqXG4gICAqIEZvcmNlZnVsbHkgc2V0IHRoZSBgcGFnZWAgcGFnZS1iYXNlZCBjb3VudGVyIHRvIHRoZSBzcGVjaWZpZWQgdmFsdWUuXG4gICAqL1xuICBmb3JjZVNldFBhZ2VDb3VudGVyKHBhZ2VOdW1iZXI6IG51bWJlcikge1xuICAgIGNvbnN0IGNvdW50ZXJzID0gdGhpcy5jdXJyZW50UGFnZUNvdW50ZXJzW1wicGFnZVwiXTtcbiAgICBpZiAoIWNvdW50ZXJzIHx8ICFjb3VudGVycy5sZW5ndGgpIHtcbiAgICAgIHRoaXMuY3VycmVudFBhZ2VDb3VudGVyc1tcInBhZ2VcIl0gPSBbcGFnZU51bWJlcl07XG4gICAgfSBlbHNlIHtcbiAgICAgIGNvdW50ZXJzW2NvdW50ZXJzLmxlbmd0aCAtIDFdID0gcGFnZU51bWJlcjtcbiAgICB9XG4gIH1cblxuICAvKipcbiAgICogVXBkYXRlIHRoZSBwYWdlLWJhc2VkIGNvdW50ZXJzIHdpdGggJ2NvdW50ZXItcmVzZXQnIGFuZCAnY291bnRlci1pbmNyZW1lbnQnXG4gICAqIHByb3BlcnRpZXMgd2l0aGluIHRoZSBwYWdlIGNvbnRleHQuIENhbGwgYmVmb3JlIHN0YXJ0aW5nIGxheW91dCBvZiB0aGVcbiAgICogcGFnZS5cbiAgICovXG4gIHVwZGF0ZVBhZ2VDb3VudGVycyhcbiAgICBjYXNjYWRlZFBhZ2VTdHlsZTogQ3NzQ2FzY2FkZS5FbGVtZW50U3R5bGUsXG4gICAgY29udGV4dDogRXhwcnMuQ29udGV4dCxcbiAgKSB7XG4gICAgLy8gU2F2ZSBwYWdlIGNvdW50ZXJzIHRvIHByZXZpb3VzUGFnZUNvdW50ZXJzIGJlZm9yZSB1cGRhdGluZ1xuICAgIHRoaXMucHJldmlvdXNQYWdlQ291bnRlcnMgPSBjbG9uZUNvdW50ZXJWYWx1ZXModGhpcy5jdXJyZW50UGFnZUNvdW50ZXJzKTtcbiAgICBsZXQgcmVzZXRNYXA6IHsgW2tleTogc3RyaW5nXTogbnVtYmVyIH07XG4gICAgY29uc3QgcmVzZXQgPSBjYXNjYWRlZFBhZ2VTdHlsZVtcImNvdW50ZXItcmVzZXRcIl07XG4gICAgaWYgKHJlc2V0KSB7XG4gICAgICBjb25zdCByZXNldFZhbCA9IHJlc2V0LmV2YWx1YXRlKGNvbnRleHQpO1xuICAgICAgaWYgKHJlc2V0VmFsKSB7XG4gICAgICAgIHJlc2V0TWFwID0gQ3NzUHJvcC50b0NvdW50ZXJzKHJlc2V0VmFsLCB0cnVlKTtcbiAgICAgIH1cbiAgICB9XG4gICAgaWYgKHJlc2V0TWFwKSB7XG4gICAgICBmb3IgKGNvbnN0IHJlc2V0Q291bnRlck5hbWUgaW4gcmVzZXRNYXApIHtcbiAgICAgICAgdGhpcy5kZWZpbmVQYWdlQ291bnRlcihyZXNldENvdW50ZXJOYW1lLCByZXNldE1hcFtyZXNldENvdW50ZXJOYW1lXSk7XG4gICAgICB9XG4gICAgfVxuICAgIGxldCBpbmNyZW1lbnRNYXA6IHsgW2tleTogc3RyaW5nXTogbnVtYmVyIH07XG4gICAgY29uc3QgaW5jcmVtZW50ID0gY2FzY2FkZWRQYWdlU3R5bGVbXCJjb3VudGVyLWluY3JlbWVudFwiXTtcbiAgICBpZiAoaW5jcmVtZW50KSB7XG4gICAgICBjb25zdCBpbmNyZW1lbnRWYWwgPSBpbmNyZW1lbnQuZXZhbHVhdGUoY29udGV4dCk7XG4gICAgICBpZiAoaW5jcmVtZW50VmFsKSB7XG4gICAgICAgIGluY3JlbWVudE1hcCA9IENzc1Byb3AudG9Db3VudGVycyhpbmNyZW1lbnRWYWwsIGZhbHNlKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICAvLyBJZiAnY291bnRlci1pbmNyZW1lbnQnIGZvciB0aGUgYnVpbHRpbiAncGFnZScgY291bnRlciBpcyBhYnNlbnQsIGFkZCBpdFxuICAgIC8vIHdpdGggdmFsdWUgMS5cbiAgICBpZiAoaW5jcmVtZW50TWFwKSB7XG4gICAgICBpZiAoIShcInBhZ2VcIiBpbiBpbmNyZW1lbnRNYXApKSB7XG4gICAgICAgIGluY3JlbWVudE1hcFtcInBhZ2VcIl0gPSAxO1xuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICBpbmNyZW1lbnRNYXAgPSB7fTtcbiAgICAgIGluY3JlbWVudE1hcFtcInBhZ2VcIl0gPSAxO1xuICAgIH1cbiAgICBmb3IgKGNvbnN0IGluY3JlbWVudENvdW50ZXJOYW1lIGluIGluY3JlbWVudE1hcCkge1xuICAgICAgaWYgKCF0aGlzLmN1cnJlbnRQYWdlQ291bnRlcnNbaW5jcmVtZW50Q291bnRlck5hbWVdKSB7XG4gICAgICAgIHRoaXMuZGVmaW5lUGFnZUNvdW50ZXIoaW5jcmVtZW50Q291bnRlck5hbWUsIDApO1xuICAgICAgfVxuICAgICAgY29uc3QgY291bnRlclZhbHVlcyA9IHRoaXMuY3VycmVudFBhZ2VDb3VudGVyc1tpbmNyZW1lbnRDb3VudGVyTmFtZV07XG4gICAgICBjb3VudGVyVmFsdWVzW2NvdW50ZXJWYWx1ZXMubGVuZ3RoIC0gMV0gKz1cbiAgICAgICAgaW5jcmVtZW50TWFwW2luY3JlbWVudENvdW50ZXJOYW1lXTtcbiAgICB9XG4gIH1cblxuICAvKipcbiAgICogU2F2ZSBjdXJyZW50IHBhZ2UtYmFzZWQgY291bnRlcnMgdmFsdWVzIGFuZCBzZXQgdGhlbSB0byB0aGUgdmFsdWVzIHBhc3NlZFxuICAgKiBpbi4gVGhlIHNhdmVkIGNvdW50ZXIgdmFsdWVzIGNhbiBiZSByZXN0b3JlZCBieSBwb3BQYWdlQ291bnRlcnMgbWV0aG9kLlxuICAgKi9cbiAgcHVzaFBhZ2VDb3VudGVycyhjb3VudGVyczogQ3NzQ2FzY2FkZS5Db3VudGVyVmFsdWVzKSB7XG4gICAgdGhpcy5jdXJyZW50UGFnZUNvdW50ZXJzU3RhY2sucHVzaCh0aGlzLmN1cnJlbnRQYWdlQ291bnRlcnMpO1xuICAgIHRoaXMuY3VycmVudFBhZ2VDb3VudGVycyA9IGNsb25lQ291bnRlclZhbHVlcyhjb3VudGVycyk7XG4gIH1cblxuICAvKipcbiAgICogUmVzdG9yZSBwcmV2aW91c2x5IHNhdmVkIHBhZ2UtYmFzZWQgY291bnRlciB2YWx1ZXMuXG4gICAqL1xuICBwb3BQYWdlQ291bnRlcnMoKSB7XG4gICAgdGhpcy5jdXJyZW50UGFnZUNvdW50ZXJzID0gdGhpcy5jdXJyZW50UGFnZUNvdW50ZXJzU3RhY2sucG9wKCk7XG4gIH1cblxuICAvKipcbiAgICogUmVzb2x2ZSBhIHJlZmVyZW5jZSB3aXRoIHRoZSBzcGVjaWZpZWQgSUQuXG4gICAqL1xuICByZXNvbHZlUmVmZXJlbmNlKGlkOiBzdHJpbmcpIHtcbiAgICBjb25zdCB1bnJlc29sdmVkUmVmcyA9IHRoaXMudW5yZXNvbHZlZFJlZmVyZW5jZXNbaWRdO1xuICAgIGxldCByZXNvbHZlZFJlZnMgPSB0aGlzLnJlc29sdmVkUmVmZXJlbmNlc1tpZF07XG4gICAgaWYgKCFyZXNvbHZlZFJlZnMpIHtcbiAgICAgIHJlc29sdmVkUmVmcyA9IHRoaXMucmVzb2x2ZWRSZWZlcmVuY2VzW2lkXSA9IFtdO1xuICAgIH1cbiAgICBsZXQgcHVzaGVkID0gZmFsc2U7XG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCB0aGlzLnJlZmVyZW5jZXNUb1NvbHZlLmxlbmd0aDsgKSB7XG4gICAgICBjb25zdCByZWYgPSB0aGlzLnJlZmVyZW5jZXNUb1NvbHZlW2ldO1xuICAgICAgaWYgKHJlZi50YXJnZXRJZCA9PT0gaWQpIHtcbiAgICAgICAgcmVmLnJlc29sdmUoKTtcbiAgICAgICAgdGhpcy5yZWZlcmVuY2VzVG9Tb2x2ZS5zcGxpY2UoaSwgMSk7XG4gICAgICAgIGlmICh1bnJlc29sdmVkUmVmcykge1xuICAgICAgICAgIGNvbnN0IGogPSB1bnJlc29sdmVkUmVmcy5pbmRleE9mKHJlZik7XG4gICAgICAgICAgaWYgKGogPj0gMCkge1xuICAgICAgICAgICAgdW5yZXNvbHZlZFJlZnMuc3BsaWNlKGosIDEpO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXNvbHZlZFJlZnMucHVzaChyZWYpO1xuICAgICAgICBwdXNoZWQgPSB0cnVlO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgaSsrO1xuICAgICAgfVxuICAgIH1cbiAgICBpZiAoIXB1c2hlZCkge1xuICAgICAgdGhpcy5zYXZlUmVmZXJlbmNlT2ZDdXJyZW50UGFnZShpZCwgdHJ1ZSk7XG4gICAgfVxuICB9XG5cbiAgLyoqXG4gICAqIFNhdmUgYSByZWZlcmVuY2UgYXBwZWFyZWQgaW4gdGhlIGN1cnJlbnQgcGFnZS5cbiAgICogQHBhcmFtIHJlc29sdmVkIElmIHRoZSByZWZlcmVuY2UgaXMgYWxyZWFkeSByZXNvbHZlZCBvciBub3QuXG4gICAqL1xuICBzYXZlUmVmZXJlbmNlT2ZDdXJyZW50UGFnZShpZDogc3RyaW5nLCByZXNvbHZlZDogYm9vbGVhbikge1xuICAgIGlmICghdGhpcy5uZXdSZWZlcmVuY2VzT2ZDdXJyZW50UGFnZS5zb21lKChyZWYpID0+IHJlZi50YXJnZXRJZCA9PT0gaWQpKSB7XG4gICAgICBjb25zdCByZWYgPSBuZXcgVGFyZ2V0Q291bnRlclJlZmVyZW5jZShpZCwgcmVzb2x2ZWQpO1xuICAgICAgdGhpcy5uZXdSZWZlcmVuY2VzT2ZDdXJyZW50UGFnZS5wdXNoKHJlZik7XG4gICAgfVxuICB9XG5cbiAgLyoqXG4gICAqIEZpbmlzaCB0aGUgY3VycmVudCBwYWdlOyBlbGVtZW50cyB3aXRoIElEIGFyZSBjb2xsZWN0ZWQgYW5kIHNhdmVkIHdpdGhcbiAgICogY3VycmVudCBwYWdlLWJhc2VkIGNvdW50ZXIgdmFsdWVzIGludGVybmFsbHkuXG4gICAqIEBwYXJhbSBzcGluZUluZGV4IEluZGV4IG9mIHRoZSBjdXJyZW50bHkgbGFpZCBvdXQgc3BpbmUgaXRlbVxuICAgKiBAcGFyYW0gcGFnZUluZGV4IEluZGV4IG9mIHRoZSBjdXJyZW50bHkgbGFpZCBvdXQgcGFnZSBpbiBpdHMgc3BpbmUgaXRlbVxuICAgKi9cbiAgZmluaXNoUGFnZShzcGluZUluZGV4OiBudW1iZXIsIHBhZ2VJbmRleDogbnVtYmVyKSB7XG4gICAgY29uc3QgaWRzID0gT2JqZWN0LmtleXModGhpcy5jdXJyZW50UGFnZS5lbGVtZW50c0J5SWQpO1xuICAgIGlmIChpZHMubGVuZ3RoID4gMCkge1xuICAgICAgY29uc3QgY3VycmVudFBhZ2VDb3VudGVycyA9IGNsb25lQ291bnRlclZhbHVlcyh0aGlzLmN1cnJlbnRQYWdlQ291bnRlcnMpO1xuICAgICAgaWRzLmZvckVhY2goKGlkKSA9PiB7XG4gICAgICAgIHRoaXMucGFnZUNvdW50ZXJzQnlJZFtpZF0gPSBjdXJyZW50UGFnZUNvdW50ZXJzO1xuICAgICAgICBjb25zdCBvbGRQYWdlSW5kZXggPSB0aGlzLnBhZ2VJbmRpY2VzQnlJZFtpZF07XG4gICAgICAgIGlmIChvbGRQYWdlSW5kZXggJiYgb2xkUGFnZUluZGV4LnBhZ2VJbmRleCA8IHBhZ2VJbmRleCkge1xuICAgICAgICAgIGNvbnN0IHJlc29sdmVkUmVmcyA9IHRoaXMucmVzb2x2ZWRSZWZlcmVuY2VzW2lkXTtcbiAgICAgICAgICBpZiAocmVzb2x2ZWRSZWZzKSB7XG4gICAgICAgICAgICBsZXQgdW5yZXNvbHZlZFJlZnMgPSB0aGlzLnVucmVzb2x2ZWRSZWZlcmVuY2VzW2lkXTtcbiAgICAgICAgICAgIGlmICghdW5yZXNvbHZlZFJlZnMpIHtcbiAgICAgICAgICAgICAgdW5yZXNvbHZlZFJlZnMgPSB0aGlzLnVucmVzb2x2ZWRSZWZlcmVuY2VzW2lkXSA9IFtdO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgbGV0IHJlZjogVGFyZ2V0Q291bnRlclJlZmVyZW5jZTtcbiAgICAgICAgICAgIHdoaWxlICgocmVmID0gcmVzb2x2ZWRSZWZzLnNoaWZ0KCkpKSB7XG4gICAgICAgICAgICAgIHJlZi51bnJlc29sdmUoKTtcbiAgICAgICAgICAgICAgdW5yZXNvbHZlZFJlZnMucHVzaChyZWYpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICB0aGlzLnBhZ2VJbmRpY2VzQnlJZFtpZF0gPSB7IHNwaW5lSW5kZXgsIHBhZ2VJbmRleCB9O1xuICAgICAgfSk7XG4gICAgfVxuICAgIGNvbnN0IHByZXZQYWdlQ291bnRlcnMgPSB0aGlzLnByZXZpb3VzUGFnZUNvdW50ZXJzO1xuICAgIGxldCByZWY6IFRhcmdldENvdW50ZXJSZWZlcmVuY2U7XG4gICAgd2hpbGUgKChyZWYgPSB0aGlzLm5ld1JlZmVyZW5jZXNPZkN1cnJlbnRQYWdlLnNoaWZ0KCkpKSB7XG4gICAgICByZWYucGFnZUNvdW50ZXJzID0gcHJldlBhZ2VDb3VudGVycztcbiAgICAgIHJlZi5zcGluZUluZGV4ID0gc3BpbmVJbmRleDtcbiAgICAgIHJlZi5wYWdlSW5kZXggPSBwYWdlSW5kZXg7XG4gICAgICBsZXQgYXJyOiBUYXJnZXRDb3VudGVyUmVmZXJlbmNlW107XG4gICAgICBpZiAocmVmLmlzUmVzb2x2ZWQoKSkge1xuICAgICAgICBhcnIgPSB0aGlzLnJlc29sdmVkUmVmZXJlbmNlc1tyZWYudGFyZ2V0SWRdO1xuICAgICAgICBpZiAoIWFycikge1xuICAgICAgICAgIGFyciA9IHRoaXMucmVzb2x2ZWRSZWZlcmVuY2VzW3JlZi50YXJnZXRJZF0gPSBbXTtcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgYXJyID0gdGhpcy51bnJlc29sdmVkUmVmZXJlbmNlc1tyZWYudGFyZ2V0SWRdO1xuICAgICAgICBpZiAoIWFycikge1xuICAgICAgICAgIGFyciA9IHRoaXMudW5yZXNvbHZlZFJlZmVyZW5jZXNbcmVmLnRhcmdldElkXSA9IFtdO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICBpZiAoYXJyLmV2ZXJ5KChyKSA9PiAhcmVmLmVxdWFscyhyKSkpIHtcbiAgICAgICAgYXJyLnB1c2gocmVmKTtcbiAgICAgIH1cbiAgICB9XG4gICAgdGhpcy5jdXJyZW50UGFnZSA9IG51bGw7XG4gIH1cblxuICAvKipcbiAgICogUmV0dXJucyB1bnJlc29sdmVkIHJlZmVyZW5jZXMgcG9pbnRpbmcgdG8gdGhlIHNwZWNpZmllZCBwYWdlLlxuICAgKi9cbiAgZ2V0VW5yZXNvbHZlZFJlZnNUb1BhZ2UoXG4gICAgcGFnZTogVnRyZWUuUGFnZSxcbiAgKToge1xuICAgIHNwaW5lSW5kZXg6IG51bWJlcjtcbiAgICBwYWdlSW5kZXg6IG51bWJlcjtcbiAgICBwYWdlQ291bnRlcnM6IENzc0Nhc2NhZGUuQ291bnRlclZhbHVlcztcbiAgICByZWZzOiBUYXJnZXRDb3VudGVyUmVmZXJlbmNlW107XG4gIH1bXSB7XG4gICAgbGV0IHJlZnM6IFRhcmdldENvdW50ZXJSZWZlcmVuY2VbXSA9IFtdO1xuICAgIGNvbnN0IGlkcyA9IE9iamVjdC5rZXlzKHBhZ2UuZWxlbWVudHNCeUlkKTtcbiAgICBpZHMuZm9yRWFjaCgoaWQpID0+IHtcbiAgICAgIGNvbnN0IGlkUmVmcyA9IHRoaXMudW5yZXNvbHZlZFJlZmVyZW5jZXNbaWRdO1xuICAgICAgaWYgKGlkUmVmcykge1xuICAgICAgICByZWZzID0gcmVmcy5jb25jYXQoaWRSZWZzKTtcbiAgICAgIH1cbiAgICB9KTtcbiAgICByZWZzLnNvcnQoXG4gICAgICAocjEsIHIyKSA9PiByMS5zcGluZUluZGV4IC0gcjIuc3BpbmVJbmRleCB8fCByMS5wYWdlSW5kZXggLSByMi5wYWdlSW5kZXgsXG4gICAgKTtcbiAgICBjb25zdCByZXN1bHQ6IHtcbiAgICAgIHNwaW5lSW5kZXg6IG51bWJlcjtcbiAgICAgIHBhZ2VJbmRleDogbnVtYmVyO1xuICAgICAgcGFnZUNvdW50ZXJzOiBDc3NDYXNjYWRlLkNvdW50ZXJWYWx1ZXM7XG4gICAgICByZWZzOiBUYXJnZXRDb3VudGVyUmVmZXJlbmNlW107XG4gICAgfVtdID0gW107XG4gICAgbGV0IG86IHtcbiAgICAgIHNwaW5lSW5kZXg6IG51bWJlcjtcbiAgICAgIHBhZ2VJbmRleDogbnVtYmVyO1xuICAgICAgcGFnZUNvdW50ZXJzOiBDc3NDYXNjYWRlLkNvdW50ZXJWYWx1ZXM7XG4gICAgICByZWZzOiBUYXJnZXRDb3VudGVyUmVmZXJlbmNlW107XG4gICAgfSA9IG51bGw7XG4gICAgcmVmcy5mb3JFYWNoKChyZWYpID0+IHtcbiAgICAgIGlmIChcbiAgICAgICAgIW8gfHxcbiAgICAgICAgby5zcGluZUluZGV4ICE9PSByZWYuc3BpbmVJbmRleCB8fFxuICAgICAgICBvLnBhZ2VJbmRleCAhPT0gcmVmLnBhZ2VJbmRleFxuICAgICAgKSB7XG4gICAgICAgIG8gPSB7XG4gICAgICAgICAgc3BpbmVJbmRleDogcmVmLnNwaW5lSW5kZXgsXG4gICAgICAgICAgcGFnZUluZGV4OiByZWYucGFnZUluZGV4LFxuICAgICAgICAgIHBhZ2VDb3VudGVyczogcmVmLnBhZ2VDb3VudGVycyxcbiAgICAgICAgICByZWZzOiBbcmVmXSxcbiAgICAgICAgfTtcbiAgICAgICAgcmVzdWx0LnB1c2gobyk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBvLnJlZnMucHVzaChyZWYpO1xuICAgICAgfVxuICAgIH0pO1xuICAgIHJldHVybiByZXN1bHQ7XG4gIH1cblxuICAvKipcbiAgICogU2F2ZSBjdXJyZW50IHJlZmVyZW5jZXMgdG8gc29sdmUgYW5kIHNldCB0aGVtIHRvIHRoZSB2YWx1ZXMgcGFzc2VkIGluLlxuICAgKiBUaGUgc2F2ZWQgcmVmZXJlbmNlcyBjYW4gYmUgcmVzdG9yZWQgYnkgcG9wUmVmZXJlbmNlc1RvU29sdmUgbWV0aG9kLlxuICAgKi9cbiAgcHVzaFJlZmVyZW5jZXNUb1NvbHZlKHJlZnM6IFRhcmdldENvdW50ZXJSZWZlcmVuY2VbXSkge1xuICAgIHRoaXMucmVmZXJlbmNlc1RvU29sdmVTdGFjay5wdXNoKHRoaXMucmVmZXJlbmNlc1RvU29sdmUpO1xuICAgIHRoaXMucmVmZXJlbmNlc1RvU29sdmUgPSByZWZzO1xuICB9XG5cbiAgLyoqXG4gICAqIFJlc3RvcmUgcHJldmlvdXNseSBzYXZlZCByZWZlcmVuY2VzIHRvIHNvbHZlLlxuICAgKi9cbiAgcG9wUmVmZXJlbmNlc1RvU29sdmUoKSB7XG4gICAgdGhpcy5yZWZlcmVuY2VzVG9Tb2x2ZSA9IHRoaXMucmVmZXJlbmNlc1RvU29sdmVTdGFjay5wb3AoKTtcbiAgfVxuXG4gIHJlZ2lzdGVyUGFnZUNvdW50ZXJFeHByKFxuICAgIG5hbWU6IHN0cmluZyxcbiAgICBmb3JtYXQ6IChwMTogbnVtYmVyW10pID0+IHN0cmluZyxcbiAgICBleHByOiBFeHBycy5WYWwsXG4gICkge1xuICAgIGlmIChuYW1lID09PSBcInBhZ2VzXCIpIHtcbiAgICAgIHRoaXMucGFnZXNDb3VudGVyRXhwcnMucHVzaCh7IGV4cHIsIGZvcm1hdCB9KTtcbiAgICB9XG4gIH1cblxuICBnZXRFeHByQ29udGVudExpc3RlbmVyKCk6IFZ0cmVlLkV4cHJDb250ZW50TGlzdGVuZXIge1xuICAgIHJldHVybiB0aGlzLmV4cHJDb250ZW50TGlzdGVuZXIuYmluZCh0aGlzKTtcbiAgfVxuXG4gIHByaXZhdGUgZXhwckNvbnRlbnRMaXN0ZW5lcihleHByLCB2YWwsIGRvY3VtZW50KSB7XG4gICAgY29uc3QgZm91bmQgPSB0aGlzLnBhZ2VzQ291bnRlckV4cHJzLmZpbmRJbmRleCgobykgPT4gby5leHByID09PSBleHByKSA+PSAwO1xuICAgIGlmIChmb3VuZCkge1xuICAgICAgY29uc3Qgbm9kZSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJzcGFuXCIpO1xuICAgICAgbm9kZS50ZXh0Q29udGVudCA9IHZhbDtcbiAgICAgIG5vZGUuc2V0QXR0cmlidXRlKFBBR0VTX0NPVU5URVJfQVRUUiwgZXhwci5rZXkpO1xuICAgICAgcmV0dXJuIG5vZGU7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiBudWxsO1xuICAgIH1cbiAgfVxuXG4gIGZpbmlzaExhc3RQYWdlKHZpZXdwb3J0OiBWZ2VuLlZpZXdwb3J0KSB7XG4gICAgY29uc3Qgbm9kZXMgPSB2aWV3cG9ydC5yb290LnF1ZXJ5U2VsZWN0b3JBbGwoYFske1BBR0VTX0NPVU5URVJfQVRUUn1dYCk7XG4gICAgY29uc3QgcGFnZXMgPSB0aGlzLmN1cnJlbnRQYWdlQ291bnRlcnNbXCJwYWdlXCJdWzBdO1xuICAgIGZvciAoY29uc3Qgbm9kZSBvZiBub2Rlcykge1xuICAgICAgY29uc3Qga2V5ID0gbm9kZS5nZXRBdHRyaWJ1dGUoUEFHRVNfQ09VTlRFUl9BVFRSKTtcbiAgICAgIGNvbnN0IGkgPSB0aGlzLnBhZ2VzQ291bnRlckV4cHJzLmZpbmRJbmRleCgobykgPT4gby5leHByLmtleSA9PT0ga2V5KTtcbiAgICAgIEFzc2VydHMuYXNzZXJ0KGkgPj0gMCk7XG4gICAgICBub2RlLnRleHRDb250ZW50ID0gdGhpcy5wYWdlc0NvdW50ZXJFeHByc1tpXS5mb3JtYXQoW3BhZ2VzXSk7XG4gICAgfVxuICB9XG5cbiAgY3JlYXRlTGF5b3V0Q29uc3RyYWludChwYWdlSW5kZXg6IG51bWJlcik6IExheW91dC5MYXlvdXRDb25zdHJhaW50IHtcbiAgICByZXR1cm4gbmV3IExheW91dENvbnN0cmFpbnQodGhpcywgcGFnZUluZGV4KTtcbiAgfVxufVxuXG5leHBvcnQgY29uc3QgUEFHRVNfQ09VTlRFUl9BVFRSID0gXCJkYXRhLXZpdmxpb3N0eWxlLXBhZ2VzLWNvdW50ZXJcIjtcblxuY2xhc3MgTGF5b3V0Q29uc3RyYWludCBpbXBsZW1lbnRzIExheW91dC5MYXlvdXRDb25zdHJhaW50IHtcbiAgY29uc3RydWN0b3IoXG4gICAgcHVibGljIHJlYWRvbmx5IGNvdW50ZXJTdG9yZTogQ291bnRlclN0b3JlLFxuICAgIHB1YmxpYyByZWFkb25seSBwYWdlSW5kZXg6IG51bWJlcixcbiAgKSB7fVxuXG4gIC8qKlxuICAgKiBAb3ZlcnJpZGVcbiAgICovXG4gIGFsbG93TGF5b3V0KG5vZGVDb250ZXh0OiBWdHJlZS5Ob2RlQ29udGV4dCk6IGJvb2xlYW4ge1xuICAgIGlmICghbm9kZUNvbnRleHQgfHwgbm9kZUNvbnRleHQuYWZ0ZXIpIHtcbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cbiAgICBjb25zdCB2aWV3Tm9kZSA9IG5vZGVDb250ZXh0LnZpZXdOb2RlO1xuICAgIGlmICghdmlld05vZGUgfHwgdmlld05vZGUubm9kZVR5cGUgIT09IDEpIHtcbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cbiAgICBjb25zdCBpZCA9XG4gICAgICAodmlld05vZGUgYXMgRWxlbWVudCkuZ2V0QXR0cmlidXRlKFwiaWRcIikgfHxcbiAgICAgICh2aWV3Tm9kZSBhcyBFbGVtZW50KS5nZXRBdHRyaWJ1dGUoXCJuYW1lXCIpO1xuICAgIGlmICghaWQpIHtcbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cbiAgICBpZiAoXG4gICAgICAhdGhpcy5jb3VudGVyU3RvcmUucmVzb2x2ZWRSZWZlcmVuY2VzW2lkXSAmJlxuICAgICAgIXRoaXMuY291bnRlclN0b3JlLnVucmVzb2x2ZWRSZWZlcmVuY2VzW2lkXVxuICAgICkge1xuICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuICAgIGNvbnN0IHBhZ2VJbmRleCA9IHRoaXMuY291bnRlclN0b3JlLnBhZ2VJbmRpY2VzQnlJZFtpZF07XG4gICAgaWYgKCFwYWdlSW5kZXgpIHtcbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cbiAgICByZXR1cm4gdGhpcy5wYWdlSW5kZXggPj0gcGFnZUluZGV4LnBhZ2VJbmRleDtcbiAgfVxufVxuIiwiLyoqXG4gKiBDb3B5cmlnaHQgMjAxMyBHb29nbGUsIEluYy5cbiAqIENvcHlyaWdodCAyMDE3IFRyaW0tbWFya3MgSW5jLlxuICogQ29weXJpZ2h0IDIwMTkgVml2bGlvc3R5bGUgRm91bmRhdGlvblxuICpcbiAqIFZpdmxpb3N0eWxlLmpzIGlzIGZyZWUgc29mdHdhcmU6IHlvdSBjYW4gcmVkaXN0cmlidXRlIGl0IGFuZC9vciBtb2RpZnlcbiAqIGl0IHVuZGVyIHRoZSB0ZXJtcyBvZiB0aGUgR05VIEFmZmVybyBHZW5lcmFsIFB1YmxpYyBMaWNlbnNlIGFzIHB1Ymxpc2hlZCBieVxuICogdGhlIEZyZWUgU29mdHdhcmUgRm91bmRhdGlvbiwgZWl0aGVyIHZlcnNpb24gMyBvZiB0aGUgTGljZW5zZSwgb3JcbiAqIChhdCB5b3VyIG9wdGlvbikgYW55IGxhdGVyIHZlcnNpb24uXG4gKlxuICogVml2bGlvc3R5bGUuanMgaXMgZGlzdHJpYnV0ZWQgaW4gdGhlIGhvcGUgdGhhdCBpdCB3aWxsIGJlIHVzZWZ1bCxcbiAqIGJ1dCBXSVRIT1VUIEFOWSBXQVJSQU5UWTsgd2l0aG91dCBldmVuIHRoZSBpbXBsaWVkIHdhcnJhbnR5IG9mXG4gKiBNRVJDSEFOVEFCSUxJVFkgb3IgRklUTkVTUyBGT1IgQSBQQVJUSUNVTEFSIFBVUlBPU0UuICBTZWUgdGhlXG4gKiBHTlUgQWZmZXJvIEdlbmVyYWwgUHVibGljIExpY2Vuc2UgZm9yIG1vcmUgZGV0YWlscy5cbiAqXG4gKiBZb3Ugc2hvdWxkIGhhdmUgcmVjZWl2ZWQgYSBjb3B5IG9mIHRoZSBHTlUgQWZmZXJvIEdlbmVyYWwgUHVibGljIExpY2Vuc2VcbiAqIGFsb25nIHdpdGggVml2bGlvc3R5bGUuanMuICBJZiBub3QsIHNlZSA8aHR0cDovL3d3dy5nbnUub3JnL2xpY2Vuc2VzLz4uXG4gKlxuICogQGZpbGVvdmVydmlldyBDc3NUb2tlbml6ZXIgLSBDU1MgVG9rZW5pemVyLlxuICovXG5cbmV4cG9ydCBpbnRlcmZhY2UgVG9rZW5pemVySGFuZGxlciB7XG4gIGVycm9yKG1uZW1vbmljczogc3RyaW5nLCB0b2tlbjogVG9rZW4pOiB2b2lkO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gZXNjYXBlUGFyc2VTaW5nbGUoc3RyOiBzdHJpbmcpOiBzdHJpbmcge1xuICBzdHIgPSBzdHIuc3Vic3RyKDEpO1xuICBpZiAoc3RyLm1hdGNoKC9eW14wLTlhLWZBLUZcXG5cXHJdJC8pKSB7XG4gICAgcmV0dXJuIHN0cjtcbiAgfVxuICBjb25zdCBjb2RlID0gcGFyc2VJbnQoc3RyLCAxNik7XG4gIGlmIChpc05hTihjb2RlKSkge1xuICAgIHJldHVybiBcIlwiO1xuICB9XG4gIGlmIChjb2RlIDw9IDY1NTM1KSB7XG4gICAgcmV0dXJuIFN0cmluZy5mcm9tQ2hhckNvZGUoY29kZSk7XG4gIH1cbiAgaWYgKGNvZGUgPD0gMTExNDExMSkge1xuICAgIC8vIG5vbi1CTVAgY2hhcmFjdGVyczogY29udmVydCB0byBhIHN1cnJvZ2F0ZSBwYWlyXG4gICAgcmV0dXJuIFN0cmluZy5mcm9tQ2hhckNvZGUoXG4gICAgICA1NTI5NiB8ICgoY29kZSA+PiAxMCkgJiAxMDIzKSxcbiAgICAgIDU2MzIwIHwgKGNvZGUgJiAxMDIzKSxcbiAgICApO1xuICB9XG5cbiAgLy8gbm90IGEgdmFsaWQgVW5pY29kZSB2YWx1ZVxuICByZXR1cm4gXCJcXHVmZmZkXCI7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBlc2NhcGVQYXJzZShzdHI6IHN0cmluZyk6IHN0cmluZyB7XG4gIHJldHVybiBzdHIucmVwbGFjZShcbiAgICAvXFxcXChbMC05YS1mQS1GXXswLDZ9KFxcclxcbnxbIFxcblxcclxcdFxcZl0pP3xbXjAtOWEtZkEtRlxcblxccl0pL2csXG4gICAgZXNjYXBlUGFyc2VTaW5nbGUsXG4gICk7XG59XG5cbi8qKlxuICogQGVudW0ge251bWJlcn1cbiAqL1xuZXhwb3J0IGVudW0gVG9rZW5UeXBlIHtcbiAgRU9GLFxuICBJREVOVCxcbiAgU1RSLFxuICBOVU1FUklDLFxuICBOVU0sXG4gIElOVCxcbiAgRlVOQyxcbiAgSEFTSCxcbiAgVVJMLFxuICBDTEFTUyxcbiAgT19QQVIsXG4gIENfUEFSLFxuICBPX0JSQyxcbiAgQ19CUkMsXG4gIE9fQlJLLFxuICBDX0JSSyxcbiAgQ09NTUEsXG4gIFNFTUlDT0wsXG4gIENPTE9OLFxuICBTTEFTSCxcbiAgQVQsXG4gIFBFUkNFTlQsXG4gIFFNQVJLLFxuICBQTFVTLFxuICBNSU5VUyxcbiAgQkFSX0JBUixcbiAgQU1QX0FNUCxcblxuICAvLyB0aG9zZSBjYW4gaGF2ZSBcIj1cIiBhdCB0aGUgZW5kXG4gIEJBTkcgPSAzMSxcbiAgRE9MTEFSLFxuICBIQVQsXG4gIEJBUixcbiAgVElMREUsXG4gIFNUQVIsXG4gIEdULFxuICBMVCxcbiAgRVEsXG5cbiAgLy8gdG9rZW5zIGFib3ZlIHBsdXMgXCI9XCIgYXQgdGhlIGVuZCwgb3JkZXIgbXVzdCBiZSB0aGUgc2FtZVxuICBCQU5HX0VRID0gNDEsXG4gIERPTExBUl9FUSxcbiAgSEFUX0VRLFxuICBCQVJfRVEsXG4gIFRJTERFX0VRLFxuICBTVEFSX0VRLFxuICBHVF9FUSxcbiAgTFRfRVEsXG4gIEVRX0VRLFxuICBDT0xfQ09MLFxuICBJTlZBTElELFxuICBMQVNUID0gNTEsXG59XG5cbmV4cG9ydCBjbGFzcyBUb2tlbiB7XG4gIHR5cGU6IFRva2VuVHlwZTtcbiAgcHJlY2VkZWRCeVNwYWNlOiBib29sZWFuID0gZmFsc2U7XG4gIG51bTogbnVtYmVyID0gMDtcbiAgdGV4dDogc3RyaW5nID0gXCJcIjtcbiAgcG9zaXRpb246IG51bWJlciA9IDA7XG5cbiAgY29uc3RydWN0b3IoKSB7XG4gICAgdGhpcy50eXBlID0gVG9rZW5UeXBlLkVPRjtcbiAgfVxufVxuXG4vKipcbiAqIEBlbnVtIHtudW1iZXJ9XG4gKi9cbmV4cG9ydCBlbnVtIEFjdGlvbiB7XG4gIFNQQUNFID0gMSxcbiAgSU5ULFxuICBJREVOVCxcbiAgQkFORyxcbiAgSEFTSCA9IDYsXG4gIERPTExBUixcbiAgUEVSQ0VOVCxcbiAgQU1QLFxuICBPX1BBUixcbiAgQ19QQVIsXG4gIFNUQVIsXG4gIFBMVVMsXG4gIENPTU1BLFxuICBNSU5VUyxcbiAgRE9ULFxuICBTTEFTSCxcbiAgQ09MT04sXG4gIFNFTUlDT0wsXG4gIExULFxuICBFUSxcbiAgR1QsXG4gIFFNQVJLLFxuICBBVCxcbiAgT19CUkssXG4gIENfQlJLLFxuICBPX0JSQyxcbiAgQ19CUkMsXG4gIEJTTEFTSCxcbiAgSEFULFxuICBCQVIsXG4gIFRJTERFLFxuICBTVFIxLFxuICBTVFIyLFxuICBFTkQsXG4gIEVRVEFJTCxcbiAgRU5ESU5ULFxuICBFTkROVU0sXG4gIENPTlQsXG4gIFVOSVQsXG4gIFBDVU5JVCxcbiAgTlVNQkVSLFxuICBFTkRJRE5ULFxuICBJRE5URVNDLFxuICBFTkRJREVTLFxuXG4gIC8vIGVuZCBvZiBpZGVudGlmaWVyIHdpdGggZXNjYXBlc1xuICBFTkRTVFIsXG4gIEVOREVTVFIsXG5cbiAgLy8gZW5kIG9mIHN0cmluZyB3aXRoIGVzY2FwZXNcbiAgU1RSMUVTQyxcbiAgU1RSMkVTQyxcbiAgQkFSX0JBUixcbiAgQU1QX0FNUCxcbiAgRlVOQyxcbiAgRlVOQ0VTLFxuICBDT01NRU5ULFxuICBDT01NU1QsXG4gIEVORE5PVEssXG4gIE1JTk1JTixcbiAgVE9JTlQsXG4gIFRPTlVNLFxuICBUT0lERU5ULFxuICBUT0lERVMsXG4gIEtJTEwxLFxuICBLSUxMMixcbiAgVVJMLFxuICBVUkwxLFxuICBVUkwyLFxuICBFTkRVUkwsXG4gIFRFUk1VUkwsXG4gIEZJTlVSTCxcbiAgTFRfQkcsXG4gIExUX0JHX00sXG4gIElOVkFMSUQsXG4gIENIS1BPU1MsXG4gIENIS1BPU04sXG4gIFVSTEVTQyxcbiAgSURFU0NILFxuICBDT0xfQ09MLFxuICBUT0NMQVNTLFxuICBDSEtTUCxcbiAgRU9GLFxufVxuXG5leHBvcnQgZnVuY3Rpb24gbWFrZUFjdGlvbnMoZGVmOiBBY3Rpb24sIHNwZWM6IEFjdGlvbltdKTogQWN0aW9uW10ge1xuICBjb25zdCBhOiBudW1iZXJbXSA9IEFycmF5KDEyOCk7XG4gIGxldCBpOiBudW1iZXI7XG4gIGZvciAoaSA9IDA7IGkgPCAxMjg7IGkrKykge1xuICAgIGFbaV0gPSBkZWY7XG4gIH1cbiAgYVtOYU5dID0gZGVmID09IEFjdGlvbi5FTkQgPyBBY3Rpb24uRU5EIDogQWN0aW9uLklOVkFMSUQ7XG4gIGZvciAoaSA9IDA7IGkgPCBzcGVjLmxlbmd0aDsgaSArPSAyKSB7XG4gICAgYVtzcGVjW2ldXSA9IHNwZWNbaSArIDFdO1xuICB9XG4gIHJldHVybiBhO1xufVxuXG4vKipcbiAqIFN0YXJ0IG9mIHRoZSB0b2tlbi5cbiAqL1xuZXhwb3J0IGNvbnN0IGFjdGlvbnNOb3JtYWw6IEFjdGlvbltdID0gW1xuICBBY3Rpb24uSU5WQUxJRCxcbiAgQWN0aW9uLklOVkFMSUQsXG4gIEFjdGlvbi5JTlZBTElELFxuICBBY3Rpb24uSU5WQUxJRCxcbiAgQWN0aW9uLklOVkFMSUQsXG4gIEFjdGlvbi5JTlZBTElELFxuICBBY3Rpb24uSU5WQUxJRCxcbiAgQWN0aW9uLklOVkFMSUQsIC8vIDB4MDAtMHgwN1xuICBBY3Rpb24uSU5WQUxJRCxcbiAgQWN0aW9uLlNQQUNFLFxuICBBY3Rpb24uU1BBQ0UsXG4gIEFjdGlvbi5JTlZBTElELFxuICBBY3Rpb24uU1BBQ0UsXG4gIEFjdGlvbi5TUEFDRSxcbiAgQWN0aW9uLklOVkFMSUQsXG4gIEFjdGlvbi5JTlZBTElELCAvLyAweDA4LTB4MEZcbiAgQWN0aW9uLklOVkFMSUQsXG4gIEFjdGlvbi5JTlZBTElELFxuICBBY3Rpb24uSU5WQUxJRCxcbiAgQWN0aW9uLklOVkFMSUQsXG4gIEFjdGlvbi5JTlZBTElELFxuICBBY3Rpb24uSU5WQUxJRCxcbiAgQWN0aW9uLklOVkFMSUQsXG4gIEFjdGlvbi5JTlZBTElELCAvLyAweDEwLTB4MTdcbiAgQWN0aW9uLklOVkFMSUQsXG4gIEFjdGlvbi5JTlZBTElELFxuICBBY3Rpb24uSU5WQUxJRCxcbiAgQWN0aW9uLklOVkFMSUQsXG4gIEFjdGlvbi5JTlZBTElELFxuICBBY3Rpb24uSU5WQUxJRCxcbiAgQWN0aW9uLklOVkFMSUQsXG4gIEFjdGlvbi5JTlZBTElELCAvLyAweDE4LTB4MUZcbiAgQWN0aW9uLlNQQUNFLFxuICBBY3Rpb24uQkFORyxcbiAgQWN0aW9uLlNUUjIsXG4gIEFjdGlvbi5IQVNILFxuICBBY3Rpb24uRE9MTEFSLFxuICBBY3Rpb24uUEVSQ0VOVCxcbiAgQWN0aW9uLkFNUCxcbiAgQWN0aW9uLlNUUjEsIC8vIDB4MjAtMHgyN1xuICBBY3Rpb24uT19QQVIsXG4gIEFjdGlvbi5DX1BBUixcbiAgQWN0aW9uLlNUQVIsXG4gIEFjdGlvbi5QTFVTLFxuICBBY3Rpb24uQ09NTUEsXG4gIEFjdGlvbi5NSU5VUyxcbiAgQWN0aW9uLkRPVCxcbiAgQWN0aW9uLlNMQVNILCAvLyAweDI4LTB4MkZcbiAgQWN0aW9uLklOVCxcbiAgQWN0aW9uLklOVCxcbiAgQWN0aW9uLklOVCxcbiAgQWN0aW9uLklOVCxcbiAgQWN0aW9uLklOVCxcbiAgQWN0aW9uLklOVCxcbiAgQWN0aW9uLklOVCxcbiAgQWN0aW9uLklOVCwgLy8gMHgzMC0weDM3XG4gIEFjdGlvbi5JTlQsXG4gIEFjdGlvbi5JTlQsXG4gIEFjdGlvbi5DT0xPTixcbiAgQWN0aW9uLlNFTUlDT0wsXG4gIEFjdGlvbi5MVCxcbiAgQWN0aW9uLkVRLFxuICBBY3Rpb24uR1QsXG4gIEFjdGlvbi5RTUFSSywgLy8gMHgzOC0weDNGXG4gIEFjdGlvbi5BVCxcbiAgQWN0aW9uLklERU5ULFxuICBBY3Rpb24uSURFTlQsXG4gIEFjdGlvbi5JREVOVCxcbiAgQWN0aW9uLklERU5ULFxuICBBY3Rpb24uSURFTlQsXG4gIEFjdGlvbi5JREVOVCxcbiAgQWN0aW9uLklERU5ULCAvLyAweDQwLTB4NDdcbiAgQWN0aW9uLklERU5ULFxuICBBY3Rpb24uSURFTlQsXG4gIEFjdGlvbi5JREVOVCxcbiAgQWN0aW9uLklERU5ULFxuICBBY3Rpb24uSURFTlQsXG4gIEFjdGlvbi5JREVOVCxcbiAgQWN0aW9uLklERU5ULFxuICBBY3Rpb24uSURFTlQsIC8vIDB4NDgtMHg0RlxuICBBY3Rpb24uSURFTlQsXG4gIEFjdGlvbi5JREVOVCxcbiAgQWN0aW9uLklERU5ULFxuICBBY3Rpb24uSURFTlQsXG4gIEFjdGlvbi5JREVOVCxcbiAgQWN0aW9uLklERU5ULFxuICBBY3Rpb24uSURFTlQsXG4gIEFjdGlvbi5JREVOVCwgLy8gMHg1MC0weDU3XG4gIEFjdGlvbi5JREVOVCxcbiAgQWN0aW9uLklERU5ULFxuICBBY3Rpb24uSURFTlQsXG4gIEFjdGlvbi5PX0JSSyxcbiAgQWN0aW9uLkJTTEFTSCxcbiAgQWN0aW9uLkNfQlJLLFxuICBBY3Rpb24uSEFULFxuICBBY3Rpb24uSURFTlQsIC8vIDB4NTgtMHg1RlxuICBBY3Rpb24uSU5WQUxJRCxcbiAgQWN0aW9uLklERU5ULFxuICBBY3Rpb24uSURFTlQsXG4gIEFjdGlvbi5JREVOVCxcbiAgQWN0aW9uLklERU5ULFxuICBBY3Rpb24uSURFTlQsXG4gIEFjdGlvbi5JREVOVCxcbiAgQWN0aW9uLklERU5ULCAvLyAweDYwLTB4NjdcbiAgQWN0aW9uLklERU5ULFxuICBBY3Rpb24uSURFTlQsXG4gIEFjdGlvbi5JREVOVCxcbiAgQWN0aW9uLklERU5ULFxuICBBY3Rpb24uSURFTlQsXG4gIEFjdGlvbi5JREVOVCxcbiAgQWN0aW9uLklERU5ULFxuICBBY3Rpb24uSURFTlQsIC8vIDB4NjgtMHg2RlxuICBBY3Rpb24uSURFTlQsXG4gIEFjdGlvbi5JREVOVCxcbiAgQWN0aW9uLklERU5ULFxuICBBY3Rpb24uSURFTlQsXG4gIEFjdGlvbi5JREVOVCxcbiAgQWN0aW9uLklERU5ULFxuICBBY3Rpb24uSURFTlQsXG4gIEFjdGlvbi5JREVOVCwgLy8gMHg3MC0weDc3XG4gIEFjdGlvbi5JREVOVCxcbiAgQWN0aW9uLklERU5ULFxuICBBY3Rpb24uSURFTlQsXG4gIEFjdGlvbi5PX0JSQyxcbiAgQWN0aW9uLkJBUixcbiAgQWN0aW9uLkNfQlJDLFxuICBBY3Rpb24uVElMREUsXG4gIEFjdGlvbi5JTlZBTElELCAvLyAweDc4LTB4N0Zcbl07XG5cbmFjdGlvbnNOb3JtYWxbTmFOXSA9IEFjdGlvbi5FT0Y7XG5cbi8qKlxuICogSW5zaWRlIGlkZW50aWZpZXIuXG4gKi9cbmV4cG9ydCBjb25zdCBhY3Rpb25zSWRlbnQ6IEFjdGlvbltdID0gW1xuICBBY3Rpb24uRU5ESUROVCxcbiAgQWN0aW9uLkVORElETlQsXG4gIEFjdGlvbi5FTkRJRE5ULFxuICBBY3Rpb24uRU5ESUROVCxcbiAgQWN0aW9uLkVORElETlQsXG4gIEFjdGlvbi5FTkRJRE5ULFxuICBBY3Rpb24uRU5ESUROVCxcbiAgQWN0aW9uLkVORElETlQsIC8vIDB4MDAtMHgwN1xuICBBY3Rpb24uRU5ESUROVCxcbiAgQWN0aW9uLkVORElETlQsXG4gIEFjdGlvbi5FTkRJRE5ULFxuICBBY3Rpb24uRU5ESUROVCxcbiAgQWN0aW9uLkVORElETlQsXG4gIEFjdGlvbi5FTkRJRE5ULFxuICBBY3Rpb24uRU5ESUROVCxcbiAgQWN0aW9uLkVORElETlQsIC8vIDB4MDgtMHgwRlxuICBBY3Rpb24uRU5ESUROVCxcbiAgQWN0aW9uLkVORElETlQsXG4gIEFjdGlvbi5FTkRJRE5ULFxuICBBY3Rpb24uRU5ESUROVCxcbiAgQWN0aW9uLkVORElETlQsXG4gIEFjdGlvbi5FTkRJRE5ULFxuICBBY3Rpb24uRU5ESUROVCxcbiAgQWN0aW9uLkVORElETlQsIC8vIDB4MTAtMHgxN1xuICBBY3Rpb24uRU5ESUROVCxcbiAgQWN0aW9uLkVORElETlQsXG4gIEFjdGlvbi5FTkRJRE5ULFxuICBBY3Rpb24uRU5ESUROVCxcbiAgQWN0aW9uLkVORElETlQsXG4gIEFjdGlvbi5FTkRJRE5ULFxuICBBY3Rpb24uRU5ESUROVCxcbiAgQWN0aW9uLkVORElETlQsIC8vIDB4MTgtMHgxRlxuICBBY3Rpb24uRU5ESUROVCxcbiAgQWN0aW9uLkVORElETlQsXG4gIEFjdGlvbi5FTkRJRE5ULFxuICBBY3Rpb24uRU5ESUROVCxcbiAgQWN0aW9uLkVORElETlQsXG4gIEFjdGlvbi5FTkRJRE5ULFxuICBBY3Rpb24uRU5ESUROVCxcbiAgQWN0aW9uLkVORElETlQsIC8vIDB4MjAtMHgyN1xuICBBY3Rpb24uRlVOQyxcbiAgQWN0aW9uLkVORElETlQsXG4gIEFjdGlvbi5FTkRJRE5ULFxuICBBY3Rpb24uRU5ESUROVCxcbiAgQWN0aW9uLkVORElETlQsXG4gIEFjdGlvbi5DT05ULFxuICBBY3Rpb24uRU5ESUROVCxcbiAgQWN0aW9uLkVORElETlQsIC8vIDB4MjgtMHgyRlxuICBBY3Rpb24uQ09OVCxcbiAgQWN0aW9uLkNPTlQsXG4gIEFjdGlvbi5DT05ULFxuICBBY3Rpb24uQ09OVCxcbiAgQWN0aW9uLkNPTlQsXG4gIEFjdGlvbi5DT05ULFxuICBBY3Rpb24uQ09OVCxcbiAgQWN0aW9uLkNPTlQsIC8vIDB4MzAtMHgzN1xuICBBY3Rpb24uQ09OVCxcbiAgQWN0aW9uLkNPTlQsXG4gIEFjdGlvbi5FTkRJRE5ULFxuICBBY3Rpb24uRU5ESUROVCxcbiAgQWN0aW9uLkVORElETlQsXG4gIEFjdGlvbi5FTkRJRE5ULFxuICBBY3Rpb24uRU5ESUROVCxcbiAgQWN0aW9uLkVORElETlQsIC8vIDB4MzgtMHgzRlxuICBBY3Rpb24uRU5ESUROVCxcbiAgQWN0aW9uLkNPTlQsXG4gIEFjdGlvbi5DT05ULFxuICBBY3Rpb24uQ09OVCxcbiAgQWN0aW9uLkNPTlQsXG4gIEFjdGlvbi5DT05ULFxuICBBY3Rpb24uQ09OVCxcbiAgQWN0aW9uLkNPTlQsIC8vIDB4NDAtMHg0N1xuICBBY3Rpb24uQ09OVCxcbiAgQWN0aW9uLkNPTlQsXG4gIEFjdGlvbi5DT05ULFxuICBBY3Rpb24uQ09OVCxcbiAgQWN0aW9uLkNPTlQsXG4gIEFjdGlvbi5DT05ULFxuICBBY3Rpb24uQ09OVCxcbiAgQWN0aW9uLkNPTlQsIC8vIDB4NDgtMHg0RlxuICBBY3Rpb24uQ09OVCxcbiAgQWN0aW9uLkNPTlQsXG4gIEFjdGlvbi5DT05ULFxuICBBY3Rpb24uQ09OVCxcbiAgQWN0aW9uLkNPTlQsXG4gIEFjdGlvbi5DT05ULFxuICBBY3Rpb24uQ09OVCxcbiAgQWN0aW9uLkNPTlQsIC8vIDB4NTAtMHg1N1xuICBBY3Rpb24uQ09OVCxcbiAgQWN0aW9uLkNPTlQsXG4gIEFjdGlvbi5DT05ULFxuICBBY3Rpb24uRU5ESUROVCxcbiAgQWN0aW9uLklETlRFU0MsXG4gIEFjdGlvbi5FTkRJRE5ULFxuICBBY3Rpb24uRU5ESUROVCxcbiAgQWN0aW9uLkNPTlQsIC8vIDB4NTgtMHg1RlxuICBBY3Rpb24uRU5ESUROVCxcbiAgQWN0aW9uLkNPTlQsXG4gIEFjdGlvbi5DT05ULFxuICBBY3Rpb24uQ09OVCxcbiAgQWN0aW9uLkNPTlQsXG4gIEFjdGlvbi5DT05ULFxuICBBY3Rpb24uQ09OVCxcbiAgQWN0aW9uLkNPTlQsIC8vIDB4NjAtMHg2N1xuICBBY3Rpb24uQ09OVCxcbiAgQWN0aW9uLkNPTlQsXG4gIEFjdGlvbi5DT05ULFxuICBBY3Rpb24uQ09OVCxcbiAgQWN0aW9uLkNPTlQsXG4gIEFjdGlvbi5DT05ULFxuICBBY3Rpb24uQ09OVCxcbiAgQWN0aW9uLkNPTlQsIC8vIDB4NjgtMHg2RlxuICBBY3Rpb24uQ09OVCxcbiAgQWN0aW9uLkNPTlQsXG4gIEFjdGlvbi5DT05ULFxuICBBY3Rpb24uQ09OVCxcbiAgQWN0aW9uLkNPTlQsXG4gIEFjdGlvbi5DT05ULFxuICBBY3Rpb24uQ09OVCxcbiAgQWN0aW9uLkNPTlQsIC8vIDB4NzAtMHg3N1xuICBBY3Rpb24uQ09OVCxcbiAgQWN0aW9uLkNPTlQsXG4gIEFjdGlvbi5DT05ULFxuICBBY3Rpb24uRU5ESUROVCxcbiAgQWN0aW9uLkVORElETlQsXG4gIEFjdGlvbi5FTkRJRE5ULFxuICBBY3Rpb24uRU5ESUROVCxcbiAgQWN0aW9uLkVORElETlQsIC8vIDB4NzgtMHg3RlxuXTtcblxuYWN0aW9uc0lkZW50W05hTl0gPSBBY3Rpb24uRU5ESUROVDtcblxuLyoqXG4gKiBBZnRlciBkb3QgKGVpdGhlciAuY2xhc3Mgb3IgLjEyMylcbiAqL1xuZXhwb3J0IGNvbnN0IGFjdGlvbnNOdW1PckNsYXNzOiBBY3Rpb25bXSA9IFtcbiAgQWN0aW9uLklOVkFMSUQsXG4gIEFjdGlvbi5JTlZBTElELFxuICBBY3Rpb24uSU5WQUxJRCxcbiAgQWN0aW9uLklOVkFMSUQsXG4gIEFjdGlvbi5JTlZBTElELFxuICBBY3Rpb24uSU5WQUxJRCxcbiAgQWN0aW9uLklOVkFMSUQsXG4gIEFjdGlvbi5JTlZBTElELCAvLyAweDAwLTB4MDdcbiAgQWN0aW9uLklOVkFMSUQsXG4gIEFjdGlvbi5JTlZBTElELFxuICBBY3Rpb24uSU5WQUxJRCxcbiAgQWN0aW9uLklOVkFMSUQsXG4gIEFjdGlvbi5JTlZBTElELFxuICBBY3Rpb24uSU5WQUxJRCxcbiAgQWN0aW9uLklOVkFMSUQsXG4gIEFjdGlvbi5JTlZBTElELCAvLyAweDA4LTB4MEZcbiAgQWN0aW9uLklOVkFMSUQsXG4gIEFjdGlvbi5JTlZBTElELFxuICBBY3Rpb24uSU5WQUxJRCxcbiAgQWN0aW9uLklOVkFMSUQsXG4gIEFjdGlvbi5JTlZBTElELFxuICBBY3Rpb24uSU5WQUxJRCxcbiAgQWN0aW9uLklOVkFMSUQsXG4gIEFjdGlvbi5JTlZBTElELCAvLyAweDEwLTB4MTdcbiAgQWN0aW9uLklOVkFMSUQsXG4gIEFjdGlvbi5JTlZBTElELFxuICBBY3Rpb24uSU5WQUxJRCxcbiAgQWN0aW9uLklOVkFMSUQsXG4gIEFjdGlvbi5JTlZBTElELFxuICBBY3Rpb24uSU5WQUxJRCxcbiAgQWN0aW9uLklOVkFMSUQsXG4gIEFjdGlvbi5JTlZBTElELCAvLyAweDE4LTB4MUZcbiAgQWN0aW9uLklOVkFMSUQsXG4gIEFjdGlvbi5JTlZBTElELFxuICBBY3Rpb24uSU5WQUxJRCxcbiAgQWN0aW9uLklOVkFMSUQsXG4gIEFjdGlvbi5JTlZBTElELFxuICBBY3Rpb24uSU5WQUxJRCxcbiAgQWN0aW9uLklOVkFMSUQsXG4gIEFjdGlvbi5JTlZBTElELCAvLyAweDIwLTB4MjdcbiAgQWN0aW9uLklOVkFMSUQsXG4gIEFjdGlvbi5JTlZBTElELFxuICBBY3Rpb24uSU5WQUxJRCxcbiAgQWN0aW9uLklOVkFMSUQsXG4gIEFjdGlvbi5JTlZBTElELFxuICBBY3Rpb24uVE9DTEFTUyxcbiAgQWN0aW9uLlRPTlVNLFxuICBBY3Rpb24uSU5WQUxJRCwgLy8gMHgyOC0weDJGXG4gIEFjdGlvbi5UT05VTSxcbiAgQWN0aW9uLlRPTlVNLFxuICBBY3Rpb24uVE9OVU0sXG4gIEFjdGlvbi5UT05VTSxcbiAgQWN0aW9uLlRPTlVNLFxuICBBY3Rpb24uVE9OVU0sXG4gIEFjdGlvbi5UT05VTSxcbiAgQWN0aW9uLlRPTlVNLCAvLyAweDMwLTB4MzdcbiAgQWN0aW9uLlRPTlVNLFxuICBBY3Rpb24uVE9OVU0sXG4gIEFjdGlvbi5JTlZBTElELFxuICBBY3Rpb24uSU5WQUxJRCxcbiAgQWN0aW9uLklOVkFMSUQsXG4gIEFjdGlvbi5JTlZBTElELFxuICBBY3Rpb24uSU5WQUxJRCxcbiAgQWN0aW9uLklOVkFMSUQsIC8vIDB4MzgtMHgzRlxuICBBY3Rpb24uSU5WQUxJRCxcbiAgQWN0aW9uLlRPQ0xBU1MsXG4gIEFjdGlvbi5UT0NMQVNTLFxuICBBY3Rpb24uVE9DTEFTUyxcbiAgQWN0aW9uLlRPQ0xBU1MsXG4gIEFjdGlvbi5UT0NMQVNTLFxuICBBY3Rpb24uVE9DTEFTUyxcbiAgQWN0aW9uLlRPQ0xBU1MsIC8vIDB4NDAtMHg0N1xuICBBY3Rpb24uVE9DTEFTUyxcbiAgQWN0aW9uLlRPQ0xBU1MsXG4gIEFjdGlvbi5UT0NMQVNTLFxuICBBY3Rpb24uVE9DTEFTUyxcbiAgQWN0aW9uLlRPQ0xBU1MsXG4gIEFjdGlvbi5UT0NMQVNTLFxuICBBY3Rpb24uVE9DTEFTUyxcbiAgQWN0aW9uLlRPQ0xBU1MsIC8vIDB4NDgtMHg0RlxuICBBY3Rpb24uVE9DTEFTUyxcbiAgQWN0aW9uLlRPQ0xBU1MsXG4gIEFjdGlvbi5UT0NMQVNTLFxuICBBY3Rpb24uVE9DTEFTUyxcbiAgQWN0aW9uLlRPQ0xBU1MsXG4gIEFjdGlvbi5UT0NMQVNTLFxuICBBY3Rpb24uVE9DTEFTUyxcbiAgQWN0aW9uLlRPQ0xBU1MsIC8vIDB4NTAtMHg1N1xuICBBY3Rpb24uVE9DTEFTUyxcbiAgQWN0aW9uLlRPQ0xBU1MsXG4gIEFjdGlvbi5UT0NMQVNTLFxuICBBY3Rpb24uSU5WQUxJRCxcbiAgQWN0aW9uLlRPSURFUyxcbiAgQWN0aW9uLklOVkFMSUQsXG4gIEFjdGlvbi5JTlZBTElELFxuICBBY3Rpb24uVE9DTEFTUywgLy8gMHg1OC0weDVGXG4gIEFjdGlvbi5JTlZBTElELFxuICBBY3Rpb24uVE9DTEFTUyxcbiAgQWN0aW9uLlRPQ0xBU1MsXG4gIEFjdGlvbi5UT0NMQVNTLFxuICBBY3Rpb24uVE9DTEFTUyxcbiAgQWN0aW9uLlRPQ0xBU1MsXG4gIEFjdGlvbi5UT0NMQVNTLFxuICBBY3Rpb24uVE9DTEFTUywgLy8gMHg2MC0weDY3XG4gIEFjdGlvbi5UT0NMQVNTLFxuICBBY3Rpb24uVE9DTEFTUyxcbiAgQWN0aW9uLlRPQ0xBU1MsXG4gIEFjdGlvbi5UT0NMQVNTLFxuICBBY3Rpb24uVE9DTEFTUyxcbiAgQWN0aW9uLlRPQ0xBU1MsXG4gIEFjdGlvbi5UT0NMQVNTLFxuICBBY3Rpb24uVE9DTEFTUywgLy8gMHg2OC0weDZGXG4gIEFjdGlvbi5UT0NMQVNTLFxuICBBY3Rpb24uVE9DTEFTUyxcbiAgQWN0aW9uLlRPQ0xBU1MsXG4gIEFjdGlvbi5UT0NMQVNTLFxuICBBY3Rpb24uVE9DTEFTUyxcbiAgQWN0aW9uLlRPQ0xBU1MsXG4gIEFjdGlvbi5UT0NMQVNTLFxuICBBY3Rpb24uVE9DTEFTUywgLy8gMHg3MC0weDc3XG4gIEFjdGlvbi5UT0NMQVNTLFxuICBBY3Rpb24uVE9DTEFTUyxcbiAgQWN0aW9uLlRPQ0xBU1MsXG4gIEFjdGlvbi5JTlZBTElELFxuICBBY3Rpb24uSU5WQUxJRCxcbiAgQWN0aW9uLklOVkFMSUQsXG4gIEFjdGlvbi5JTlZBTElELFxuICBBY3Rpb24uSU5WQUxJRCwgLy8gMHg3OC0weDdGXG5dO1xuXG5hY3Rpb25zSWRlbnRbTmFOXSA9IEFjdGlvbi5FTkRJRE5UO1xuXG4vKipcbiAqIGFmdGVyICctJ1xuICovXG5leHBvcnQgY29uc3QgYWN0aW9uc01pbnVzOiBBY3Rpb25bXSA9IFtcbiAgQWN0aW9uLkVORCxcbiAgQWN0aW9uLkVORCxcbiAgQWN0aW9uLkVORCxcbiAgQWN0aW9uLkVORCxcbiAgQWN0aW9uLkVORCxcbiAgQWN0aW9uLkVORCxcbiAgQWN0aW9uLkVORCxcbiAgQWN0aW9uLkVORCwgLy8gMHgwMC0weDA3XG4gIEFjdGlvbi5FTkQsXG4gIEFjdGlvbi5FTkQsXG4gIEFjdGlvbi5FTkQsXG4gIEFjdGlvbi5FTkQsXG4gIEFjdGlvbi5FTkQsXG4gIEFjdGlvbi5FTkQsXG4gIEFjdGlvbi5FTkQsXG4gIEFjdGlvbi5FTkQsIC8vIDB4MDgtMHgwRlxuICBBY3Rpb24uRU5ELFxuICBBY3Rpb24uRU5ELFxuICBBY3Rpb24uRU5ELFxuICBBY3Rpb24uRU5ELFxuICBBY3Rpb24uRU5ELFxuICBBY3Rpb24uRU5ELFxuICBBY3Rpb24uRU5ELFxuICBBY3Rpb24uRU5ELCAvLyAweDEwLTB4MTdcbiAgQWN0aW9uLkVORCxcbiAgQWN0aW9uLkVORCxcbiAgQWN0aW9uLkVORCxcbiAgQWN0aW9uLkVORCxcbiAgQWN0aW9uLkVORCxcbiAgQWN0aW9uLkVORCxcbiAgQWN0aW9uLkVORCxcbiAgQWN0aW9uLkVORCwgLy8gMHgxOC0weDFGXG4gIEFjdGlvbi5FTkQsXG4gIEFjdGlvbi5FTkQsXG4gIEFjdGlvbi5FTkQsXG4gIEFjdGlvbi5FTkQsXG4gIEFjdGlvbi5FTkQsXG4gIEFjdGlvbi5FTkQsXG4gIEFjdGlvbi5FTkQsXG4gIEFjdGlvbi5FTkQsIC8vIDB4MjAtMHgyN1xuICBBY3Rpb24uRU5ELFxuICBBY3Rpb24uRU5ELFxuICBBY3Rpb24uRU5ELFxuICBBY3Rpb24uRU5ELFxuICBBY3Rpb24uRU5ELFxuICBBY3Rpb24uTUlOTUlOLFxuICBBY3Rpb24uVE9OVU0sXG4gIEFjdGlvbi5FTkQsIC8vIDB4MjgtMHgyRlxuICBBY3Rpb24uVE9JTlQsXG4gIEFjdGlvbi5UT0lOVCxcbiAgQWN0aW9uLlRPSU5ULFxuICBBY3Rpb24uVE9JTlQsXG4gIEFjdGlvbi5UT0lOVCxcbiAgQWN0aW9uLlRPSU5ULFxuICBBY3Rpb24uVE9JTlQsXG4gIEFjdGlvbi5UT0lOVCwgLy8gMHgzMC0weDM3XG4gIEFjdGlvbi5UT0lOVCxcbiAgQWN0aW9uLlRPSU5ULFxuICBBY3Rpb24uRU5ELFxuICBBY3Rpb24uRU5ELFxuICBBY3Rpb24uRU5ELFxuICBBY3Rpb24uRU5ELFxuICBBY3Rpb24uRU5ELFxuICBBY3Rpb24uRU5ELCAvLyAweDM4LTB4M0ZcbiAgQWN0aW9uLkVORCxcbiAgQWN0aW9uLlRPSURFTlQsXG4gIEFjdGlvbi5UT0lERU5ULFxuICBBY3Rpb24uVE9JREVOVCxcbiAgQWN0aW9uLlRPSURFTlQsXG4gIEFjdGlvbi5UT0lERU5ULFxuICBBY3Rpb24uVE9JREVOVCxcbiAgQWN0aW9uLlRPSURFTlQsIC8vIDB4NDAtMHg0N1xuICBBY3Rpb24uVE9JREVOVCxcbiAgQWN0aW9uLlRPSURFTlQsXG4gIEFjdGlvbi5UT0lERU5ULFxuICBBY3Rpb24uVE9JREVOVCxcbiAgQWN0aW9uLlRPSURFTlQsXG4gIEFjdGlvbi5UT0lERU5ULFxuICBBY3Rpb24uVE9JREVOVCxcbiAgQWN0aW9uLlRPSURFTlQsIC8vIDB4NDgtMHg0RlxuICBBY3Rpb24uVE9JREVOVCxcbiAgQWN0aW9uLlRPSURFTlQsXG4gIEFjdGlvbi5UT0lERU5ULFxuICBBY3Rpb24uVE9JREVOVCxcbiAgQWN0aW9uLlRPSURFTlQsXG4gIEFjdGlvbi5UT0lERU5ULFxuICBBY3Rpb24uVE9JREVOVCxcbiAgQWN0aW9uLlRPSURFTlQsIC8vIDB4NTAtMHg1N1xuICBBY3Rpb24uVE9JREVOVCxcbiAgQWN0aW9uLlRPSURFTlQsXG4gIEFjdGlvbi5UT0lERU5ULFxuICBBY3Rpb24uRU5ELFxuICBBY3Rpb24uVE9JREVTLFxuICBBY3Rpb24uRU5ELFxuICBBY3Rpb24uRU5ELFxuICBBY3Rpb24uVE9JREVOVCwgLy8gMHg1OC0weDVGXG4gIEFjdGlvbi5FTkQsXG4gIEFjdGlvbi5UT0lERU5ULFxuICBBY3Rpb24uVE9JREVOVCxcbiAgQWN0aW9uLlRPSURFTlQsXG4gIEFjdGlvbi5UT0lERU5ULFxuICBBY3Rpb24uVE9JREVOVCxcbiAgQWN0aW9uLlRPSURFTlQsXG4gIEFjdGlvbi5UT0lERU5ULCAvLyAweDYwLTB4NjdcbiAgQWN0aW9uLlRPSURFTlQsXG4gIEFjdGlvbi5UT0lERU5ULFxuICBBY3Rpb24uVE9JREVOVCxcbiAgQWN0aW9uLlRPSURFTlQsXG4gIEFjdGlvbi5UT0lERU5ULFxuICBBY3Rpb24uVE9JREVOVCxcbiAgQWN0aW9uLlRPSURFTlQsXG4gIEFjdGlvbi5UT0lERU5ULCAvLyAweDY4LTB4NkZcbiAgQWN0aW9uLlRPSURFTlQsXG4gIEFjdGlvbi5UT0lERU5ULFxuICBBY3Rpb24uVE9JREVOVCxcbiAgQWN0aW9uLlRPSURFTlQsXG4gIEFjdGlvbi5UT0lERU5ULFxuICBBY3Rpb24uVE9JREVOVCxcbiAgQWN0aW9uLlRPSURFTlQsXG4gIEFjdGlvbi5UT0lERU5ULCAvLyAweDcwLTB4NzdcbiAgQWN0aW9uLlRPSURFTlQsXG4gIEFjdGlvbi5UT0lERU5ULFxuICBBY3Rpb24uVE9JREVOVCxcbiAgQWN0aW9uLkVORCxcbiAgQWN0aW9uLkVORCxcbiAgQWN0aW9uLkVORCxcbiAgQWN0aW9uLkVORCxcbiAgQWN0aW9uLkVORCwgLy8gMHg3OC0weDdGXG5dO1xuXG5hY3Rpb25zTWludXNbTmFOXSA9IEFjdGlvbi5FTkQ7XG5cbi8qKlxuICogSW5zaWRlIGlkZW50aWZpZXIgd2l0aCBlc2NhcGUgc2VxdWVuY2VcbiAqL1xuZXhwb3J0IGNvbnN0IGFjdGlvbnNJZGVudEVzYzogQWN0aW9uW10gPSBbXG4gIEFjdGlvbi5FTkRJREVTLFxuICBBY3Rpb24uRU5ESURFUyxcbiAgQWN0aW9uLkVORElERVMsXG4gIEFjdGlvbi5FTkRJREVTLFxuICBBY3Rpb24uRU5ESURFUyxcbiAgQWN0aW9uLkVORElERVMsXG4gIEFjdGlvbi5FTkRJREVTLFxuICBBY3Rpb24uRU5ESURFUywgLy8gMHgwMC0weDA3XG4gIEFjdGlvbi5FTkRJREVTLFxuICBBY3Rpb24uQ0hLUE9TUyxcbiAgQWN0aW9uLkVORElERVMsXG4gIEFjdGlvbi5FTkRJREVTLFxuICBBY3Rpb24uRU5ESURFUyxcbiAgQWN0aW9uLkVORElERVMsXG4gIEFjdGlvbi5FTkRJREVTLFxuICBBY3Rpb24uRU5ESURFUywgLy8gMHgwOC0weDBGXG4gIEFjdGlvbi5FTkRJREVTLFxuICBBY3Rpb24uRU5ESURFUyxcbiAgQWN0aW9uLkVORElERVMsXG4gIEFjdGlvbi5FTkRJREVTLFxuICBBY3Rpb24uRU5ESURFUyxcbiAgQWN0aW9uLkVORElERVMsXG4gIEFjdGlvbi5FTkRJREVTLFxuICBBY3Rpb24uRU5ESURFUywgLy8gMHgxMC0weDE3XG4gIEFjdGlvbi5FTkRJREVTLFxuICBBY3Rpb24uRU5ESURFUyxcbiAgQWN0aW9uLkVORElERVMsXG4gIEFjdGlvbi5FTkRJREVTLFxuICBBY3Rpb24uRU5ESURFUyxcbiAgQWN0aW9uLkVORElERVMsXG4gIEFjdGlvbi5FTkRJREVTLFxuICBBY3Rpb24uRU5ESURFUywgLy8gMHgxOC0weDFGXG4gIEFjdGlvbi5DSEtQT1NTLFxuICBBY3Rpb24uRU5ESURFUyxcbiAgQWN0aW9uLkVORElERVMsXG4gIEFjdGlvbi5FTkRJREVTLFxuICBBY3Rpb24uRU5ESURFUyxcbiAgQWN0aW9uLkVORElERVMsXG4gIEFjdGlvbi5FTkRJREVTLFxuICBBY3Rpb24uRU5ESURFUywgLy8gMHgyMC0weDI3XG4gIEFjdGlvbi5GVU5DRVMsXG4gIEFjdGlvbi5FTkRJREVTLFxuICBBY3Rpb24uRU5ESURFUyxcbiAgQWN0aW9uLkVORElERVMsXG4gIEFjdGlvbi5FTkRJREVTLFxuICBBY3Rpb24uRU5ESURFUyxcbiAgQWN0aW9uLkVORElERVMsXG4gIEFjdGlvbi5FTkRJREVTLCAvLyAweDI4LTB4MkZcbiAgQWN0aW9uLkNPTlQsXG4gIEFjdGlvbi5DT05ULFxuICBBY3Rpb24uQ09OVCxcbiAgQWN0aW9uLkNPTlQsXG4gIEFjdGlvbi5DT05ULFxuICBBY3Rpb24uQ09OVCxcbiAgQWN0aW9uLkNPTlQsXG4gIEFjdGlvbi5DT05ULCAvLyAweDMwLTB4MzdcbiAgQWN0aW9uLkNPTlQsXG4gIEFjdGlvbi5DT05ULFxuICBBY3Rpb24uRU5ESURFUyxcbiAgQWN0aW9uLkVORElERVMsXG4gIEFjdGlvbi5FTkRJREVTLFxuICBBY3Rpb24uRU5ESURFUyxcbiAgQWN0aW9uLkVORElERVMsXG4gIEFjdGlvbi5FTkRJREVTLCAvLyAweDM4LTB4M0ZcbiAgQWN0aW9uLkVORElERVMsXG4gIEFjdGlvbi5DT05ULFxuICBBY3Rpb24uQ09OVCxcbiAgQWN0aW9uLkNPTlQsXG4gIEFjdGlvbi5DT05ULFxuICBBY3Rpb24uQ09OVCxcbiAgQWN0aW9uLkNPTlQsXG4gIEFjdGlvbi5DT05ULCAvLyAweDQwLTB4NDdcbiAgQWN0aW9uLkNPTlQsXG4gIEFjdGlvbi5DT05ULFxuICBBY3Rpb24uQ09OVCxcbiAgQWN0aW9uLkNPTlQsXG4gIEFjdGlvbi5DT05ULFxuICBBY3Rpb24uQ09OVCxcbiAgQWN0aW9uLkNPTlQsXG4gIEFjdGlvbi5DT05ULCAvLyAweDQ4LTB4NEZcbiAgQWN0aW9uLkNPTlQsXG4gIEFjdGlvbi5DT05ULFxuICBBY3Rpb24uQ09OVCxcbiAgQWN0aW9uLkNPTlQsXG4gIEFjdGlvbi5DT05ULFxuICBBY3Rpb24uQ09OVCxcbiAgQWN0aW9uLkNPTlQsXG4gIEFjdGlvbi5DT05ULCAvLyAweDUwLTB4NTdcbiAgQWN0aW9uLkNPTlQsXG4gIEFjdGlvbi5DT05ULFxuICBBY3Rpb24uQ09OVCxcbiAgQWN0aW9uLkVORElERVMsXG4gIEFjdGlvbi5JRE5URVNDLFxuICBBY3Rpb24uRU5ESURFUyxcbiAgQWN0aW9uLkVORElERVMsXG4gIEFjdGlvbi5DT05ULCAvLyAweDU4LTB4NUZcbiAgQWN0aW9uLkVORElERVMsXG4gIEFjdGlvbi5DT05ULFxuICBBY3Rpb24uQ09OVCxcbiAgQWN0aW9uLkNPTlQsXG4gIEFjdGlvbi5DT05ULFxuICBBY3Rpb24uQ09OVCxcbiAgQWN0aW9uLkNPTlQsXG4gIEFjdGlvbi5DT05ULCAvLyAweDYwLTB4NjdcbiAgQWN0aW9uLkNPTlQsXG4gIEFjdGlvbi5DT05ULFxuICBBY3Rpb24uQ09OVCxcbiAgQWN0aW9uLkNPTlQsXG4gIEFjdGlvbi5DT05ULFxuICBBY3Rpb24uQ09OVCxcbiAgQWN0aW9uLkNPTlQsXG4gIEFjdGlvbi5DT05ULCAvLyAweDY4LTB4NkZcbiAgQWN0aW9uLkNPTlQsXG4gIEFjdGlvbi5DT05ULFxuICBBY3Rpb24uQ09OVCxcbiAgQWN0aW9uLkNPTlQsXG4gIEFjdGlvbi5DT05ULFxuICBBY3Rpb24uQ09OVCxcbiAgQWN0aW9uLkNPTlQsXG4gIEFjdGlvbi5DT05ULCAvLyAweDcwLTB4NzdcbiAgQWN0aW9uLkNPTlQsXG4gIEFjdGlvbi5DT05ULFxuICBBY3Rpb24uQ09OVCxcbiAgQWN0aW9uLkVORElERVMsXG4gIEFjdGlvbi5FTkRJREVTLFxuICBBY3Rpb24uRU5ESURFUyxcbiAgQWN0aW9uLkVORElERVMsXG4gIEFjdGlvbi5FTkRJREVTLCAvLyAweDc4LTB4N0Zcbl07XG5cbmFjdGlvbnNJZGVudEVzY1tOYU5dID0gQWN0aW9uLkVORElERVM7XG5cbi8qKlxuICogSW5zaWRlIGludGVnZXJcbiAqL1xuZXhwb3J0IGNvbnN0IGFjdGlvbnNJbnQ6IEFjdGlvbltdID0gW1xuICBBY3Rpb24uRU5ESU5ULFxuICBBY3Rpb24uRU5ESU5ULFxuICBBY3Rpb24uRU5ESU5ULFxuICBBY3Rpb24uRU5ESU5ULFxuICBBY3Rpb24uRU5ESU5ULFxuICBBY3Rpb24uRU5ESU5ULFxuICBBY3Rpb24uRU5ESU5ULFxuICBBY3Rpb24uRU5ESU5ULCAvLyAweDAwLTB4MDdcbiAgQWN0aW9uLkVORElOVCxcbiAgQWN0aW9uLkVORElOVCxcbiAgQWN0aW9uLkVORElOVCxcbiAgQWN0aW9uLkVORElOVCxcbiAgQWN0aW9uLkVORElOVCxcbiAgQWN0aW9uLkVORElOVCxcbiAgQWN0aW9uLkVORElOVCxcbiAgQWN0aW9uLkVORElOVCwgLy8gMHgwOC0weDBGXG4gIEFjdGlvbi5FTkRJTlQsXG4gIEFjdGlvbi5FTkRJTlQsXG4gIEFjdGlvbi5FTkRJTlQsXG4gIEFjdGlvbi5FTkRJTlQsXG4gIEFjdGlvbi5FTkRJTlQsXG4gIEFjdGlvbi5FTkRJTlQsXG4gIEFjdGlvbi5FTkRJTlQsXG4gIEFjdGlvbi5FTkRJTlQsIC8vIDB4MTAtMHgxN1xuICBBY3Rpb24uRU5ESU5ULFxuICBBY3Rpb24uRU5ESU5ULFxuICBBY3Rpb24uRU5ESU5ULFxuICBBY3Rpb24uRU5ESU5ULFxuICBBY3Rpb24uRU5ESU5ULFxuICBBY3Rpb24uRU5ESU5ULFxuICBBY3Rpb24uRU5ESU5ULFxuICBBY3Rpb24uRU5ESU5ULCAvLyAweDE4LTB4MUZcbiAgQWN0aW9uLkVORElOVCxcbiAgQWN0aW9uLkVORElOVCxcbiAgQWN0aW9uLkVORElOVCxcbiAgQWN0aW9uLkVORElOVCxcbiAgQWN0aW9uLkVORElOVCxcbiAgQWN0aW9uLlBDVU5JVCxcbiAgQWN0aW9uLkVORElOVCxcbiAgQWN0aW9uLkVORElOVCwgLy8gMHgyMC0weDI3XG4gIEFjdGlvbi5FTkRJTlQsXG4gIEFjdGlvbi5FTkRJTlQsXG4gIEFjdGlvbi5FTkRJTlQsXG4gIEFjdGlvbi5FTkRJTlQsXG4gIEFjdGlvbi5FTkRJTlQsXG4gIEFjdGlvbi5FTkRJTlQsXG4gIEFjdGlvbi5OVU1CRVIsXG4gIEFjdGlvbi5FTkRJTlQsIC8vIDB4MjgtMHgyRlxuICBBY3Rpb24uQ09OVCxcbiAgQWN0aW9uLkNPTlQsXG4gIEFjdGlvbi5DT05ULFxuICBBY3Rpb24uQ09OVCxcbiAgQWN0aW9uLkNPTlQsXG4gIEFjdGlvbi5DT05ULFxuICBBY3Rpb24uQ09OVCxcbiAgQWN0aW9uLkNPTlQsIC8vIDB4MzAtMHgzN1xuICBBY3Rpb24uQ09OVCxcbiAgQWN0aW9uLkNPTlQsXG4gIEFjdGlvbi5FTkRJTlQsXG4gIEFjdGlvbi5FTkRJTlQsXG4gIEFjdGlvbi5FTkRJTlQsXG4gIEFjdGlvbi5FTkRJTlQsXG4gIEFjdGlvbi5FTkRJTlQsXG4gIEFjdGlvbi5FTkRJTlQsIC8vIDB4MzgtMHgzRlxuICBBY3Rpb24uRU5ESU5ULFxuICBBY3Rpb24uVU5JVCxcbiAgQWN0aW9uLlVOSVQsXG4gIEFjdGlvbi5VTklULFxuICBBY3Rpb24uVU5JVCxcbiAgQWN0aW9uLlVOSVQsXG4gIEFjdGlvbi5VTklULFxuICBBY3Rpb24uVU5JVCwgLy8gMHg0MC0weDQ3XG4gIEFjdGlvbi5VTklULFxuICBBY3Rpb24uVU5JVCxcbiAgQWN0aW9uLlVOSVQsXG4gIEFjdGlvbi5VTklULFxuICBBY3Rpb24uVU5JVCxcbiAgQWN0aW9uLlVOSVQsXG4gIEFjdGlvbi5VTklULFxuICBBY3Rpb24uVU5JVCwgLy8gMHg0OC0weDRGXG4gIEFjdGlvbi5VTklULFxuICBBY3Rpb24uVU5JVCxcbiAgQWN0aW9uLlVOSVQsXG4gIEFjdGlvbi5VTklULFxuICBBY3Rpb24uVU5JVCxcbiAgQWN0aW9uLlVOSVQsXG4gIEFjdGlvbi5VTklULFxuICBBY3Rpb24uVU5JVCwgLy8gMHg1MC0weDU3XG4gIEFjdGlvbi5VTklULFxuICBBY3Rpb24uVU5JVCxcbiAgQWN0aW9uLlVOSVQsXG4gIEFjdGlvbi5FTkRJTlQsXG4gIEFjdGlvbi5FTkRJTlQsXG4gIEFjdGlvbi5FTkRJTlQsXG4gIEFjdGlvbi5FTkRJTlQsXG4gIEFjdGlvbi5VTklULCAvLyAweDU4LTB4NUZcbiAgQWN0aW9uLkVORElOVCxcbiAgQWN0aW9uLlVOSVQsXG4gIEFjdGlvbi5VTklULFxuICBBY3Rpb24uVU5JVCxcbiAgQWN0aW9uLlVOSVQsXG4gIEFjdGlvbi5VTklULFxuICBBY3Rpb24uVU5JVCxcbiAgQWN0aW9uLlVOSVQsIC8vIDB4NjAtMHg2N1xuICBBY3Rpb24uVU5JVCxcbiAgQWN0aW9uLlVOSVQsXG4gIEFjdGlvbi5VTklULFxuICBBY3Rpb24uVU5JVCxcbiAgQWN0aW9uLlVOSVQsXG4gIEFjdGlvbi5VTklULFxuICBBY3Rpb24uVU5JVCxcbiAgQWN0aW9uLlVOSVQsIC8vIDB4NjgtMHg2RlxuICBBY3Rpb24uVU5JVCxcbiAgQWN0aW9uLlVOSVQsXG4gIEFjdGlvbi5VTklULFxuICBBY3Rpb24uVU5JVCxcbiAgQWN0aW9uLlVOSVQsXG4gIEFjdGlvbi5VTklULFxuICBBY3Rpb24uVU5JVCxcbiAgQWN0aW9uLlVOSVQsIC8vIDB4NzAtMHg3N1xuICBBY3Rpb24uVU5JVCxcbiAgQWN0aW9uLlVOSVQsXG4gIEFjdGlvbi5VTklULFxuICBBY3Rpb24uRU5ESU5ULFxuICBBY3Rpb24uRU5ESU5ULFxuICBBY3Rpb24uRU5ESU5ULFxuICBBY3Rpb24uRU5ESU5ULFxuICBBY3Rpb24uRU5ESU5ULCAvLyAweDc4LTB4N0Zcbl07XG5cbmFjdGlvbnNJbnRbTmFOXSA9IEFjdGlvbi5FTkRJTlQ7XG5cbi8qKlxuICogaW5zaWRlIHJlYWwsIGFmdGVyIGRvdFxuICovXG5leHBvcnQgY29uc3QgYWN0aW9uc051bWJlcjogQWN0aW9uW10gPSBbXG4gIEFjdGlvbi5FTkROVU0sXG4gIEFjdGlvbi5FTkROVU0sXG4gIEFjdGlvbi5FTkROVU0sXG4gIEFjdGlvbi5FTkROVU0sXG4gIEFjdGlvbi5FTkROVU0sXG4gIEFjdGlvbi5FTkROVU0sXG4gIEFjdGlvbi5FTkROVU0sXG4gIEFjdGlvbi5FTkROVU0sIC8vIDB4MDAtMHgwN1xuICBBY3Rpb24uRU5ETlVNLFxuICBBY3Rpb24uRU5ETlVNLFxuICBBY3Rpb24uRU5ETlVNLFxuICBBY3Rpb24uRU5ETlVNLFxuICBBY3Rpb24uRU5ETlVNLFxuICBBY3Rpb24uRU5ETlVNLFxuICBBY3Rpb24uRU5ETlVNLFxuICBBY3Rpb24uRU5ETlVNLCAvLyAweDA4LTB4MEZcbiAgQWN0aW9uLkVORE5VTSxcbiAgQWN0aW9uLkVORE5VTSxcbiAgQWN0aW9uLkVORE5VTSxcbiAgQWN0aW9uLkVORE5VTSxcbiAgQWN0aW9uLkVORE5VTSxcbiAgQWN0aW9uLkVORE5VTSxcbiAgQWN0aW9uLkVORE5VTSxcbiAgQWN0aW9uLkVORE5VTSwgLy8gMHgxMC0weDE3XG4gIEFjdGlvbi5FTkROVU0sXG4gIEFjdGlvbi5FTkROVU0sXG4gIEFjdGlvbi5FTkROVU0sXG4gIEFjdGlvbi5FTkROVU0sXG4gIEFjdGlvbi5FTkROVU0sXG4gIEFjdGlvbi5FTkROVU0sXG4gIEFjdGlvbi5FTkROVU0sXG4gIEFjdGlvbi5FTkROVU0sIC8vIDB4MTgtMHgxRlxuICBBY3Rpb24uRU5ETlVNLFxuICBBY3Rpb24uRU5ETlVNLFxuICBBY3Rpb24uRU5ETlVNLFxuICBBY3Rpb24uRU5ETlVNLFxuICBBY3Rpb24uRU5ETlVNLFxuICBBY3Rpb24uUENVTklULFxuICBBY3Rpb24uRU5ETlVNLFxuICBBY3Rpb24uRU5ETlVNLCAvLyAweDIwLTB4MjdcbiAgQWN0aW9uLkVORE5VTSxcbiAgQWN0aW9uLkVORE5VTSxcbiAgQWN0aW9uLkVORE5VTSxcbiAgQWN0aW9uLkVORE5VTSxcbiAgQWN0aW9uLkVORE5VTSxcbiAgQWN0aW9uLkVORE5VTSxcbiAgQWN0aW9uLkVORE5VTSxcbiAgQWN0aW9uLkVORE5VTSwgLy8gMHgyOC0weDJGXG4gIEFjdGlvbi5DT05ULFxuICBBY3Rpb24uQ09OVCxcbiAgQWN0aW9uLkNPTlQsXG4gIEFjdGlvbi5DT05ULFxuICBBY3Rpb24uQ09OVCxcbiAgQWN0aW9uLkNPTlQsXG4gIEFjdGlvbi5DT05ULFxuICBBY3Rpb24uQ09OVCwgLy8gMHgzMC0weDM3XG4gIEFjdGlvbi5DT05ULFxuICBBY3Rpb24uQ09OVCxcbiAgQWN0aW9uLkVORE5VTSxcbiAgQWN0aW9uLkVORE5VTSxcbiAgQWN0aW9uLkVORE5VTSxcbiAgQWN0aW9uLkVORE5VTSxcbiAgQWN0aW9uLkVORE5VTSxcbiAgQWN0aW9uLkVORE5VTSwgLy8gMHgzOC0weDNGXG4gIEFjdGlvbi5FTkROVU0sXG4gIEFjdGlvbi5VTklULFxuICBBY3Rpb24uVU5JVCxcbiAgQWN0aW9uLlVOSVQsXG4gIEFjdGlvbi5VTklULFxuICBBY3Rpb24uVU5JVCxcbiAgQWN0aW9uLlVOSVQsXG4gIEFjdGlvbi5VTklULCAvLyAweDQwLTB4NDdcbiAgQWN0aW9uLlVOSVQsXG4gIEFjdGlvbi5VTklULFxuICBBY3Rpb24uVU5JVCxcbiAgQWN0aW9uLlVOSVQsXG4gIEFjdGlvbi5VTklULFxuICBBY3Rpb24uVU5JVCxcbiAgQWN0aW9uLlVOSVQsXG4gIEFjdGlvbi5VTklULCAvLyAweDQ4LTB4NEZcbiAgQWN0aW9uLlVOSVQsXG4gIEFjdGlvbi5VTklULFxuICBBY3Rpb24uVU5JVCxcbiAgQWN0aW9uLlVOSVQsXG4gIEFjdGlvbi5VTklULFxuICBBY3Rpb24uVU5JVCxcbiAgQWN0aW9uLlVOSVQsXG4gIEFjdGlvbi5VTklULCAvLyAweDUwLTB4NTdcbiAgQWN0aW9uLlVOSVQsXG4gIEFjdGlvbi5VTklULFxuICBBY3Rpb24uVU5JVCxcbiAgQWN0aW9uLkVORE5VTSxcbiAgQWN0aW9uLkVORE5VTSxcbiAgQWN0aW9uLkVORE5VTSxcbiAgQWN0aW9uLkVORE5VTSxcbiAgQWN0aW9uLlVOSVQsIC8vIDB4NTgtMHg1RlxuICBBY3Rpb24uRU5ETlVNLFxuICBBY3Rpb24uVU5JVCxcbiAgQWN0aW9uLlVOSVQsXG4gIEFjdGlvbi5VTklULFxuICBBY3Rpb24uVU5JVCxcbiAgQWN0aW9uLlVOSVQsXG4gIEFjdGlvbi5VTklULFxuICBBY3Rpb24uVU5JVCwgLy8gMHg2MC0weDY3XG4gIEFjdGlvbi5VTklULFxuICBBY3Rpb24uVU5JVCxcbiAgQWN0aW9uLlVOSVQsXG4gIEFjdGlvbi5VTklULFxuICBBY3Rpb24uVU5JVCxcbiAgQWN0aW9uLlVOSVQsXG4gIEFjdGlvbi5VTklULFxuICBBY3Rpb24uVU5JVCwgLy8gMHg2OC0weDZGXG4gIEFjdGlvbi5VTklULFxuICBBY3Rpb24uVU5JVCxcbiAgQWN0aW9uLlVOSVQsXG4gIEFjdGlvbi5VTklULFxuICBBY3Rpb24uVU5JVCxcbiAgQWN0aW9uLlVOSVQsXG4gIEFjdGlvbi5VTklULFxuICBBY3Rpb24uVU5JVCwgLy8gMHg3MC0weDc3XG4gIEFjdGlvbi5VTklULFxuICBBY3Rpb24uVU5JVCxcbiAgQWN0aW9uLlVOSVQsXG4gIEFjdGlvbi5FTkROVU0sXG4gIEFjdGlvbi5FTkROVU0sXG4gIEFjdGlvbi5FTkROVU0sXG4gIEFjdGlvbi5FTkROVU0sXG4gIEFjdGlvbi5FTkROVU0sIC8vIDB4NzgtMHg3RlxuXTtcblxuYWN0aW9uc051bWJlcltOYU5dID0gQWN0aW9uLkVORE5VTTtcblxuZXhwb3J0IGNvbnN0IGFjdGlvbnNDaGVja0VxOiBBY3Rpb25bXSA9IG1ha2VBY3Rpb25zKEFjdGlvbi5FTkQsIFtcbiAgNjEgLyo9Ki8sXG4gIEFjdGlvbi5FUVRBSUwsXG5dKTtcblxuZXhwb3J0IGNvbnN0IGFjdGlvbnNDb2xvbjogQWN0aW9uW10gPSBtYWtlQWN0aW9ucyhBY3Rpb24uRU5ELCBbXG4gIDU4IC8qOiovLFxuICBBY3Rpb24uQ09MX0NPTCxcbl0pO1xuXG5leHBvcnQgY29uc3QgYWN0aW9uc0JhcjogQWN0aW9uW10gPSBtYWtlQWN0aW9ucyhBY3Rpb24uRU5ELCBbXG4gIDYxIC8qPSovLFxuICBBY3Rpb24uRVFUQUlMLFxuICAxMjQgLyp8Ki8sXG4gIEFjdGlvbi5CQVJfQkFSLFxuXSk7XG5cbmV4cG9ydCBjb25zdCBhY3Rpb25zQW1wOiBBY3Rpb25bXSA9IG1ha2VBY3Rpb25zKEFjdGlvbi5FTkQsIFtcbiAgMzggLyomKi8sXG4gIEFjdGlvbi5BTVBfQU1QLFxuXSk7XG5cbmV4cG9ydCBjb25zdCBhY3Rpb25zU2xhc2g6IEFjdGlvbltdID0gbWFrZUFjdGlvbnMoQWN0aW9uLkVORCwgW1xuICA0MiAvKiAqICovLFxuICBBY3Rpb24uQ09NTUVOVCxcbl0pO1xuXG5leHBvcnQgY29uc3QgYWN0aW9uc0NvbW1lbnQ6IEFjdGlvbltdID0gbWFrZUFjdGlvbnMoQWN0aW9uLkNPTlQsIFtcbiAgNDIgLyogKiAqLyxcbiAgQWN0aW9uLkNPTU1TVCxcbl0pO1xuXG5leHBvcnQgY29uc3QgYWN0aW9uc0NvbW1lbnRTdGFyOiBBY3Rpb25bXSA9IG1ha2VBY3Rpb25zKEFjdGlvbi5DT01NRU5ULCBbXG4gIDQyIC8qICogKi8sXG4gIEFjdGlvbi5DT01NU1QsXG4gIDQ3IC8qIC8gKi8sXG4gIEFjdGlvbi5FTkROT1RLLFxuXSk7XG5cbmV4cG9ydCBjb25zdCBhY3Rpb25zTWludXNNaW51czogQWN0aW9uW10gPSBtYWtlQWN0aW9ucyhBY3Rpb24uS0lMTDEsIFtcbiAgNjIgLyogPiAqLyxcbiAgQWN0aW9uLkVORE5PVEssXG5dKTtcblxuZXhwb3J0IGNvbnN0IGFjdGlvbnNMdDogQWN0aW9uW10gPSBtYWtlQWN0aW9ucyhBY3Rpb24uRU5ELCBbXG4gIDYxIC8qPSovLFxuICBBY3Rpb24uRVFUQUlMLFxuICAzMyAvKiEqLyxcbiAgQWN0aW9uLkxUX0JHLFxuXSk7XG5cbmV4cG9ydCBjb25zdCBhY3Rpb25zTHRCYW5nOiBBY3Rpb25bXSA9IG1ha2VBY3Rpb25zKEFjdGlvbi5LSUxMMSwgW1xuICA0NSAvKi0qLyxcbiAgQWN0aW9uLkxUX0JHX00sXG5dKTtcblxuZXhwb3J0IGNvbnN0IGFjdGlvbnNMdEJhbmdNaW51czogQWN0aW9uW10gPSBtYWtlQWN0aW9ucyhBY3Rpb24uS0lMTDIsIFtcbiAgNDUgLyotKi8sXG4gIEFjdGlvbi5FTkROT1RLLFxuXSk7XG5cbmV4cG9ydCBjb25zdCBhY3Rpb25zSWRlbnRFc2NDaHI6IEFjdGlvbltdID0gbWFrZUFjdGlvbnMoQWN0aW9uLklERVNDSCwgW1xuICA5IC8qdGFiKi8sXG4gIEFjdGlvbi5JTlZBTElELFxuICAxMCAvKkxGKi8sXG4gIEFjdGlvbi5JTlZBTElELFxuICAxMyAvKkNSKi8sXG4gIEFjdGlvbi5JTlZBTElELFxuICAzMiAvKnNwKi8sXG4gIEFjdGlvbi5JTlZBTElELFxuXSk7XG5cbmV4cG9ydCBjb25zdCBhY3Rpb25zU3RyMTogQWN0aW9uW10gPSBtYWtlQWN0aW9ucyhBY3Rpb24uQ09OVCwgW1xuICAzOSAvKicqLyxcbiAgQWN0aW9uLkVORFNUUixcbiAgMTAgLypMRiovLFxuICBBY3Rpb24uSU5WQUxJRCxcbiAgMTMgLypDUiovLFxuICBBY3Rpb24uSU5WQUxJRCxcbiAgOTIgLypcXCovLFxuICBBY3Rpb24uU1RSMUVTQyxcbl0pO1xuXG5leHBvcnQgY29uc3QgYWN0aW9uc1N0cjI6IEFjdGlvbltdID0gbWFrZUFjdGlvbnMoQWN0aW9uLkNPTlQsIFtcbiAgMzQgLypcIiovLFxuICBBY3Rpb24uRU5EU1RSLFxuICAxMCAvKkxGKi8sXG4gIEFjdGlvbi5JTlZBTElELFxuICAxMyAvKkNSKi8sXG4gIEFjdGlvbi5JTlZBTElELFxuICA5MiAvKlxcKi8sXG4gIEFjdGlvbi5TVFIyRVNDLFxuXSk7XG5cbmV4cG9ydCBjb25zdCBhY3Rpb25zU3RyMUVzYzogQWN0aW9uW10gPSBtYWtlQWN0aW9ucyhBY3Rpb24uQ09OVCwgW1xuICAzOSAvKicqLyxcbiAgQWN0aW9uLkVOREVTVFIsXG4gIDEwIC8qTEYqLyxcbiAgQWN0aW9uLkNIS1BPU04sXG4gIDEzIC8qQ1IqLyxcbiAgQWN0aW9uLkNIS1BPU04sXG4gIDkyIC8qXFwqLyxcbiAgQWN0aW9uLlNUUjFFU0MsXG5dKTtcblxuZXhwb3J0IGNvbnN0IGFjdGlvbnNTdHIyRXNjOiBBY3Rpb25bXSA9IG1ha2VBY3Rpb25zKEFjdGlvbi5DT05ULCBbXG4gIDM0IC8qXCIqLyxcbiAgQWN0aW9uLkVOREVTVFIsXG4gIDEwIC8qTEYqLyxcbiAgQWN0aW9uLkNIS1BPU04sXG4gIDEzIC8qQ1IqLyxcbiAgQWN0aW9uLkNIS1BPU04sXG4gIDkyIC8qXFwqLyxcbiAgQWN0aW9uLlNUUjJFU0MsXG5dKTtcblxuZXhwb3J0IGNvbnN0IGFjdGlvbnNVUkw6IEFjdGlvbltdID0gbWFrZUFjdGlvbnMoQWN0aW9uLlVSTCwgW1xuICA5IC8qdGFiKi8sXG4gIEFjdGlvbi5DT05ULFxuICAzMiAvKnNwKi8sXG4gIEFjdGlvbi5DT05ULFxuICAzNCAvKlwiKi8sXG4gIEFjdGlvbi5VUkwyLFxuICAzOSAvKicqLyxcbiAgQWN0aW9uLlVSTDEsXG4gIDQxIC8qKSovLFxuICBBY3Rpb24uSU5WQUxJRCxcbiAgMTAgLypMRiovLFxuICBBY3Rpb24uQ09OVCxcbiAgMTMgLypDUiovLFxuICBBY3Rpb24uQ09OVCxcbl0pO1xuXG5leHBvcnQgY29uc3QgYWN0aW9uc1VSTEluc2lkZTogQWN0aW9uW10gPSBtYWtlQWN0aW9ucyhBY3Rpb24uQ09OVCwgW1xuICA0MSAvKikqLyxcbiAgQWN0aW9uLkVORFVSTCxcbiAgOSAvKlRBQiovLFxuICBBY3Rpb24uQ0hLU1AsXG4gIDEwIC8qTEYqLyxcbiAgQWN0aW9uLkNIS1NQLFxuICAxMyAvKkNSKi8sXG4gIEFjdGlvbi5DSEtTUCxcbiAgMzIgLypzcCovLFxuICBBY3Rpb24uQ0hLU1AsXG4gIDkyIC8qXFwqLyxcbiAgQWN0aW9uLlVSTEVTQyxcbiAgNDAgLyooKi8sXG4gIEFjdGlvbi5JTlZBTElELFxuICA5MSAvKlsqLyxcbiAgQWN0aW9uLklOVkFMSUQsXG4gIDkzIC8qXSovLFxuICBBY3Rpb24uSU5WQUxJRCxcbiAgMTIzIC8qeyovLFxuICBBY3Rpb24uSU5WQUxJRCxcbiAgMTI1IC8qfSovLFxuICBBY3Rpb24uSU5WQUxJRCxcbiAgTmFOLFxuICBBY3Rpb24uRU5EVVJMLFxuXSk7XG5cbmV4cG9ydCBjb25zdCBhY3Rpb25zVVJMSW5zaWRlMTogQWN0aW9uW10gPSBtYWtlQWN0aW9ucyhBY3Rpb24uQ09OVCwgW1xuICAzOSAvKicqLyxcbiAgQWN0aW9uLlRFUk1VUkwsXG4gIDEwIC8qTEYqLyxcbiAgQWN0aW9uLkNIS1BPU04sXG4gIDEzIC8qQ1IqLyxcbiAgQWN0aW9uLkNIS1BPU04sXG4gIDkyIC8qXFwqLyxcbiAgQWN0aW9uLlVSTEVTQyxcbiAgTmFOLFxuICBBY3Rpb24uRU5EVVJMLFxuXSk7XG5cbmV4cG9ydCBjb25zdCBhY3Rpb25zVVJMSW5zaWRlMjogQWN0aW9uW10gPSBtYWtlQWN0aW9ucyhBY3Rpb24uQ09OVCwgW1xuICAzNCAvKlwiKi8sXG4gIEFjdGlvbi5URVJNVVJMLFxuICAxMCAvKkxGKi8sXG4gIEFjdGlvbi5DSEtQT1NOLFxuICAxMyAvKkNSKi8sXG4gIEFjdGlvbi5DSEtQT1NOLFxuICA5MiAvKlxcKi8sXG4gIEFjdGlvbi5VUkxFU0MsXG4gIE5hTixcbiAgQWN0aW9uLkVORFVSTCxcbl0pO1xuXG5leHBvcnQgY29uc3QgYWN0aW9uc1VSTFRhaWw6IEFjdGlvbltdID0gbWFrZUFjdGlvbnMoQWN0aW9uLklOVkFMSUQsIFtcbiAgOSAvKnRhYiovLFxuICBBY3Rpb24uQ09OVCxcbiAgMTAgLypMRiovLFxuICBBY3Rpb24uQ09OVCxcbiAgMTMgLypDUiovLFxuICBBY3Rpb24uQ09OVCxcbiAgMzIgLypzcCovLFxuICBBY3Rpb24uQ09OVCxcbiAgNDEgLyopKi8sXG4gIEFjdGlvbi5GSU5VUkwsXG5dKTtcblxuZXhwb3J0IGNvbnN0IElOSVRJQUxfSU5ERVhfTUFTSyA9IDE1O1xuXG5leHBvcnQgY2xhc3MgVG9rZW5pemVyIHtcbiAgaW5kZXhNYXNrOiBudW1iZXI7XG4gIGJ1ZmZlcjogVG9rZW5bXTtcbiAgaGVhZDogbnVtYmVyID0gLTE7IC8vIHNhdmVkLCBvY2N1cGllZCBpZiA+PSAwXG4gIHRhaWw6IG51bWJlciA9IDA7IC8vIGF2YWlsYWJsZSwgcmVhZHkgdG8gd3JpdGVcbiAgY3VycjogbnVtYmVyID0gMDsgLy8gcmVhZHkgdG8gcmVhZFxuICBwb3NpdGlvbjogbnVtYmVyID0gMDtcblxuICBjb25zdHJ1Y3RvcihwdWJsaWMgaW5wdXQ6IHN0cmluZywgcHVibGljIHJlYWRvbmx5IGhhbmRsZXI6IFRva2VuaXplckhhbmRsZXIpIHtcbiAgICB0aGlzLmluZGV4TWFzayA9IElOSVRJQUxfSU5ERVhfTUFTSztcbiAgICB0aGlzLmJ1ZmZlciA9IEFycmF5KHRoaXMuaW5kZXhNYXNrICsgMSk7XG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPD0gdGhpcy5pbmRleE1hc2s7IGkrKykge1xuICAgICAgdGhpcy5idWZmZXJbaV0gPSBuZXcgVG9rZW4oKTtcbiAgICB9XG4gIH1cblxuICB0b2tlbigpOiBUb2tlbiB7XG4gICAgaWYgKHRoaXMudGFpbCA9PSB0aGlzLmN1cnIpIHtcbiAgICAgIHRoaXMuZmlsbEJ1ZmZlcigpO1xuICAgIH1cbiAgICByZXR1cm4gdGhpcy5idWZmZXJbdGhpcy5jdXJyXTtcbiAgfVxuXG4gIG50aFRva2VuKG46IG51bWJlcik6IFRva2VuIHtcbiAgICBpZiAoKCh0aGlzLnRhaWwgLSB0aGlzLmN1cnIpICYgdGhpcy5pbmRleE1hc2spIDw9IG4pIHtcbiAgICAgIHRoaXMuZmlsbEJ1ZmZlcigpO1xuICAgIH1cbiAgICByZXR1cm4gdGhpcy5idWZmZXJbKHRoaXMuY3VyciArIG4pICYgdGhpcy5pbmRleE1hc2tdO1xuICB9XG5cbiAgY29uc3VtZSgpOiB2b2lkIHtcbiAgICB0aGlzLmN1cnIgPSAodGhpcy5jdXJyICsgMSkgJiB0aGlzLmluZGV4TWFzaztcbiAgfVxuXG4gIG1hcmsoKTogdm9pZCB7XG4gICAgaWYgKHRoaXMuaGVhZCA+PSAwKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoXCJGX0NTU1RPS19CQURfQ0FMTCBtYXJrXCIpO1xuICAgIH1cbiAgICB0aGlzLmhlYWQgPSB0aGlzLmN1cnI7XG4gIH1cblxuICByZXNldCgpOiB2b2lkIHtcbiAgICBpZiAodGhpcy5oZWFkIDwgMCkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKFwiRl9DU1NUT0tfQkFEX0NBTEwgcmVzZXRcIik7XG4gICAgfVxuICAgIHRoaXMuY3VyciA9IHRoaXMuaGVhZDtcbiAgICB0aGlzLmhlYWQgPSAtMTtcbiAgfVxuXG4gIHVubWFyaygpOiB2b2lkIHtcbiAgICB0aGlzLmhlYWQgPSAtMTtcbiAgfVxuXG4gIGhhc01hcmsoKTogYm9vbGVhbiB7XG4gICAgcmV0dXJuIHRoaXMuaGVhZCA+PSAwO1xuICB9XG5cbiAgcHJpdmF0ZSByZWFsbG9jYXRlKCk6IHZvaWQge1xuICAgIGNvbnN0IG5ld0luZGV4TWFzayA9IDIgKiAodGhpcy5pbmRleE1hc2sgKyAxKSAtIDE7XG4gICAgY29uc3QgbmV3QnVmZmVyOiBUb2tlbltdID0gQXJyYXkobmV3SW5kZXhNYXNrICsgMSk7XG4gICAgbGV0IG9sZEluZGV4ID0gdGhpcy5oZWFkO1xuICAgIGxldCBuZXdJbmRleCA9IDA7XG4gICAgd2hpbGUgKG9sZEluZGV4ICE9IHRoaXMudGFpbCkge1xuICAgICAgbmV3QnVmZmVyW25ld0luZGV4XSA9IHRoaXMuYnVmZmVyW29sZEluZGV4XTtcbiAgICAgIGlmIChvbGRJbmRleCA9PSB0aGlzLmN1cnIpIHtcbiAgICAgICAgdGhpcy5jdXJyID0gbmV3SW5kZXg7XG4gICAgICB9XG4gICAgICBvbGRJbmRleCA9IChvbGRJbmRleCArIDEpICYgdGhpcy5pbmRleE1hc2s7XG4gICAgICBuZXdJbmRleCsrO1xuICAgIH1cbiAgICB0aGlzLmhlYWQgPSAwO1xuICAgIHRoaXMudGFpbCA9IG5ld0luZGV4O1xuICAgIHRoaXMuaW5kZXhNYXNrID0gbmV3SW5kZXhNYXNrO1xuICAgIHRoaXMuYnVmZmVyID0gbmV3QnVmZmVyO1xuICAgIHdoaWxlIChuZXdJbmRleCA8PSBuZXdJbmRleE1hc2spIHtcbiAgICAgIG5ld0J1ZmZlcltuZXdJbmRleCsrXSA9IG5ldyBUb2tlbigpO1xuICAgIH1cbiAgfVxuXG4gIHByaXZhdGUgZXJyb3IocG9zaXRpb24sIHRva2VuLCBtbmVtb25pY3MpIHtcbiAgICBpZiAodGhpcy5oYW5kbGVyKSB7XG4gICAgICB0aGlzLmhhbmRsZXIuZXJyb3IobW5lbW9uaWNzLCB0b2tlbik7XG4gICAgfVxuICB9XG5cbiAgcHJpdmF0ZSBmaWxsQnVmZmVyKCk6IHZvaWQge1xuICAgIGxldCB0YWlsID0gdGhpcy50YWlsO1xuICAgIGxldCBoZWFkID0gdGhpcy5oZWFkID49IDAgPyB0aGlzLmhlYWQgOiB0aGlzLmN1cnI7XG4gICAgbGV0IGluZGV4TWFzayA9IHRoaXMuaW5kZXhNYXNrO1xuICAgIGlmICh0YWlsID49IGhlYWQpIHtcbiAgICAgIGhlYWQgKz0gaW5kZXhNYXNrO1xuICAgIH0gZWxzZSB7XG4gICAgICBoZWFkLS07XG4gICAgfVxuICAgIGlmIChoZWFkID09IHRhaWwpIHtcbiAgICAgIC8vIG9ubHkgZXhwZWN0IHRvIGdldCBoZXJlIHdoZW4gbWFyayBpcyBpbiBlZmZlY3RcbiAgICAgIGlmICh0aGlzLmhlYWQgPCAwKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcihcIkZfQ1NTVE9LX0lOVEVSTkFMXCIpO1xuICAgICAgfVxuICAgICAgdGhpcy5yZWFsbG9jYXRlKCk7XG4gICAgICB0YWlsID0gdGhpcy50YWlsO1xuICAgICAgaW5kZXhNYXNrID0gdGhpcy5pbmRleE1hc2s7XG4gICAgICBoZWFkID0gaW5kZXhNYXNrOyAvLyB0aGlzLmhlYWQgaXMgemVyb1xuICAgIH1cbiAgICBsZXQgYWN0aW9ucyA9IGFjdGlvbnNOb3JtYWw7XG4gICAgY29uc3QgaW5wdXQgPSB0aGlzLmlucHV0O1xuICAgIGxldCBwb3NpdGlvbiA9IHRoaXMucG9zaXRpb247XG4gICAgY29uc3QgYnVmZmVyID0gdGhpcy5idWZmZXI7XG4gICAgbGV0IHRva2VuVHlwZTogVG9rZW5UeXBlID0gVG9rZW5UeXBlLkVPRjtcbiAgICBsZXQgdG9rZW5Qb3NpdGlvbjogbnVtYmVyID0gMDtcbiAgICBsZXQgdG9rZW5UZXh0OiBzdHJpbmcgPSBcIlwiO1xuICAgIGxldCB0b2tlbk51bTogbnVtYmVyID0gMDtcbiAgICBsZXQgc2VlblNwYWNlID0gZmFsc2U7XG4gICAgbGV0IHRva2VuOiBUb2tlbiA9IGJ1ZmZlclt0YWlsXTtcbiAgICBsZXQgYmFja3NsYXNoUG9zID0gLTk7IC8vIGZhciBlbm91Z2ggYmVmb3JlIHRoZSBzdGFydCBvZiB0aGUgc3RyaW5nXG4gICAgd2hpbGUgKHRydWUpIHtcbiAgICAgIGNvbnN0IGNoYXJDb2RlID0gaW5wdXQuY2hhckNvZGVBdChwb3NpdGlvbik7XG4gICAgICBzd2l0Y2ggKGFjdGlvbnNbY2hhckNvZGVdIHx8IGFjdGlvbnNbNjVdIC8qQSovKSB7XG4gICAgICAgIGNhc2UgQWN0aW9uLklOVkFMSUQ6XG4gICAgICAgICAgdG9rZW5UeXBlID0gVG9rZW5UeXBlLklOVkFMSUQ7XG4gICAgICAgICAgaWYgKGlzTmFOKGNoYXJDb2RlKSkge1xuICAgICAgICAgICAgdG9rZW5UZXh0ID0gXCJFX0NTU19VTkVYUEVDVEVEX0VPRlwiO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICB0b2tlblRleHQgPSBcIkVfQ1NTX1VORVhQRUNURURfQ0hBUlwiO1xuICAgICAgICAgIH1cbiAgICAgICAgICBhY3Rpb25zID0gYWN0aW9uc05vcm1hbDtcbiAgICAgICAgICBwb3NpdGlvbisrO1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICBjYXNlIEFjdGlvbi5TUEFDRTpcbiAgICAgICAgICBwb3NpdGlvbisrO1xuICAgICAgICAgIHNlZW5TcGFjZSA9IHRydWU7XG4gICAgICAgICAgY29udGludWU7XG4gICAgICAgIGNhc2UgQWN0aW9uLklOVDpcbiAgICAgICAgICB0b2tlblBvc2l0aW9uID0gcG9zaXRpb24rKztcbiAgICAgICAgICBhY3Rpb25zID0gYWN0aW9uc0ludDtcbiAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgY2FzZSBBY3Rpb24uSURFTlQ6XG4gICAgICAgICAgdG9rZW5UeXBlID0gVG9rZW5UeXBlLklERU5UO1xuICAgICAgICAgIHRva2VuUG9zaXRpb24gPSBwb3NpdGlvbisrO1xuICAgICAgICAgIGFjdGlvbnMgPSBhY3Rpb25zSWRlbnQ7XG4gICAgICAgICAgY29udGludWU7XG4gICAgICAgIGNhc2UgQWN0aW9uLkJBTkc6XG4gICAgICAgICAgdG9rZW5Qb3NpdGlvbiA9IHBvc2l0aW9uKys7XG4gICAgICAgICAgdG9rZW5UeXBlID0gVG9rZW5UeXBlLkJBTkc7XG4gICAgICAgICAgYWN0aW9ucyA9IGFjdGlvbnNDaGVja0VxO1xuICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICBjYXNlIEFjdGlvbi5TVFIxOlxuICAgICAgICAgIHRva2VuVHlwZSA9IFRva2VuVHlwZS5TVFI7XG4gICAgICAgICAgdG9rZW5Qb3NpdGlvbiA9ICsrcG9zaXRpb247IC8vIGFmdGVyIHF1b3RlXG4gICAgICAgICAgYWN0aW9ucyA9IGFjdGlvbnNTdHIxO1xuICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICBjYXNlIEFjdGlvbi5TVFIyOlxuICAgICAgICAgIHRva2VuVHlwZSA9IFRva2VuVHlwZS5TVFI7XG4gICAgICAgICAgdG9rZW5Qb3NpdGlvbiA9ICsrcG9zaXRpb247IC8vIGFmdGVyIHF1b3RlXG4gICAgICAgICAgYWN0aW9ucyA9IGFjdGlvbnNTdHIyO1xuICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICBjYXNlIEFjdGlvbi5IQVNIOlxuICAgICAgICAgIHRva2VuUG9zaXRpb24gPSArK3Bvc2l0aW9uOyAvLyBhZnRlciBoYXNoXG4gICAgICAgICAgdG9rZW5UeXBlID0gVG9rZW5UeXBlLkhBU0g7XG4gICAgICAgICAgYWN0aW9ucyA9IGFjdGlvbnNJZGVudDtcbiAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgY2FzZSBBY3Rpb24uRE9MTEFSOlxuICAgICAgICAgIHRva2VuUG9zaXRpb24gPSBwb3NpdGlvbisrO1xuICAgICAgICAgIHRva2VuVHlwZSA9IFRva2VuVHlwZS5ET0xMQVI7XG4gICAgICAgICAgYWN0aW9ucyA9IGFjdGlvbnNDaGVja0VxO1xuICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICBjYXNlIEFjdGlvbi5QRVJDRU5UOlxuICAgICAgICAgIHRva2VuUG9zaXRpb24gPSBwb3NpdGlvbisrO1xuICAgICAgICAgIHRva2VuVHlwZSA9IFRva2VuVHlwZS5QRVJDRU5UO1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICBjYXNlIEFjdGlvbi5BTVA6XG4gICAgICAgICAgdG9rZW5Qb3NpdGlvbiA9IHBvc2l0aW9uKys7XG4gICAgICAgICAgdG9rZW5UeXBlID0gVG9rZW5UeXBlLkRPTExBUjtcbiAgICAgICAgICBhY3Rpb25zID0gYWN0aW9uc0FtcDtcbiAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgY2FzZSBBY3Rpb24uT19QQVI6XG4gICAgICAgICAgdG9rZW5Qb3NpdGlvbiA9IHBvc2l0aW9uKys7XG4gICAgICAgICAgdG9rZW5UeXBlID0gVG9rZW5UeXBlLk9fUEFSO1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICBjYXNlIEFjdGlvbi5DX1BBUjpcbiAgICAgICAgICB0b2tlblBvc2l0aW9uID0gcG9zaXRpb24rKztcbiAgICAgICAgICB0b2tlblR5cGUgPSBUb2tlblR5cGUuQ19QQVI7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIGNhc2UgQWN0aW9uLlNUQVI6XG4gICAgICAgICAgdG9rZW5Qb3NpdGlvbiA9IHBvc2l0aW9uKys7XG4gICAgICAgICAgdG9rZW5UeXBlID0gVG9rZW5UeXBlLlNUQVI7XG4gICAgICAgICAgYWN0aW9ucyA9IGFjdGlvbnNDaGVja0VxO1xuICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICBjYXNlIEFjdGlvbi5QTFVTOlxuICAgICAgICAgIHRva2VuUG9zaXRpb24gPSBwb3NpdGlvbisrO1xuICAgICAgICAgIHRva2VuVHlwZSA9IFRva2VuVHlwZS5QTFVTO1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICBjYXNlIEFjdGlvbi5DT01NQTpcbiAgICAgICAgICB0b2tlblBvc2l0aW9uID0gcG9zaXRpb24rKztcbiAgICAgICAgICB0b2tlblR5cGUgPSBUb2tlblR5cGUuQ09NTUE7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIGNhc2UgQWN0aW9uLk1JTlVTOlxuICAgICAgICAgIHRva2VuVHlwZSA9IFRva2VuVHlwZS5NSU5VUztcbiAgICAgICAgICB0b2tlblBvc2l0aW9uID0gcG9zaXRpb24rKztcbiAgICAgICAgICBhY3Rpb25zID0gYWN0aW9uc01pbnVzO1xuICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICBjYXNlIEFjdGlvbi5ET1Q6XG4gICAgICAgICAgdG9rZW5Qb3NpdGlvbiA9IHBvc2l0aW9uKys7XG4gICAgICAgICAgYWN0aW9ucyA9IGFjdGlvbnNOdW1PckNsYXNzO1xuICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICBjYXNlIEFjdGlvbi5UT0NMQVNTOlxuICAgICAgICAgIHRva2VuUG9zaXRpb24gPSBwb3NpdGlvbisrO1xuICAgICAgICAgIHRva2VuVHlwZSA9IFRva2VuVHlwZS5DTEFTUztcbiAgICAgICAgICBhY3Rpb25zID0gYWN0aW9uc0lkZW50O1xuICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICBjYXNlIEFjdGlvbi5TTEFTSDpcbiAgICAgICAgICB0b2tlblBvc2l0aW9uID0gcG9zaXRpb24rKztcbiAgICAgICAgICB0b2tlblR5cGUgPSBUb2tlblR5cGUuU0xBU0g7XG4gICAgICAgICAgYWN0aW9ucyA9IGFjdGlvbnNTbGFzaDtcbiAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgY2FzZSBBY3Rpb24uQ09MT046XG4gICAgICAgICAgdG9rZW5Qb3NpdGlvbiA9IHBvc2l0aW9uKys7XG4gICAgICAgICAgdG9rZW5UeXBlID0gVG9rZW5UeXBlLkNPTE9OO1xuICAgICAgICAgIGFjdGlvbnMgPSBhY3Rpb25zQ29sb247XG4gICAgICAgICAgY29udGludWU7XG4gICAgICAgIGNhc2UgQWN0aW9uLkNPTF9DT0w6XG4gICAgICAgICAgcG9zaXRpb24rKztcbiAgICAgICAgICB0b2tlblR5cGUgPSBUb2tlblR5cGUuQ09MX0NPTDtcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgY2FzZSBBY3Rpb24uU0VNSUNPTDpcbiAgICAgICAgICB0b2tlblBvc2l0aW9uID0gcG9zaXRpb24rKztcbiAgICAgICAgICB0b2tlblR5cGUgPSBUb2tlblR5cGUuU0VNSUNPTDtcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgY2FzZSBBY3Rpb24uTFQ6XG4gICAgICAgICAgdG9rZW5Qb3NpdGlvbiA9IHBvc2l0aW9uKys7XG4gICAgICAgICAgdG9rZW5UeXBlID0gVG9rZW5UeXBlLkxUO1xuICAgICAgICAgIGFjdGlvbnMgPSBhY3Rpb25zTHQ7XG4gICAgICAgICAgY29udGludWU7XG4gICAgICAgIGNhc2UgQWN0aW9uLkVROlxuICAgICAgICAgIHRva2VuUG9zaXRpb24gPSBwb3NpdGlvbisrO1xuICAgICAgICAgIHRva2VuVHlwZSA9IFRva2VuVHlwZS5FUTtcbiAgICAgICAgICBhY3Rpb25zID0gYWN0aW9uc0NoZWNrRXE7XG4gICAgICAgICAgY29udGludWU7XG4gICAgICAgIGNhc2UgQWN0aW9uLkdUOlxuICAgICAgICAgIHRva2VuUG9zaXRpb24gPSBwb3NpdGlvbisrO1xuICAgICAgICAgIHRva2VuVHlwZSA9IFRva2VuVHlwZS5HVDtcbiAgICAgICAgICBhY3Rpb25zID0gYWN0aW9uc0NoZWNrRXE7XG4gICAgICAgICAgY29udGludWU7XG4gICAgICAgIGNhc2UgQWN0aW9uLlFNQVJLOlxuICAgICAgICAgIHRva2VuUG9zaXRpb24gPSBwb3NpdGlvbisrO1xuICAgICAgICAgIHRva2VuVHlwZSA9IFRva2VuVHlwZS5RTUFSSztcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgY2FzZSBBY3Rpb24uQVQ6XG4gICAgICAgICAgdG9rZW5Qb3NpdGlvbiA9ICsrcG9zaXRpb247IC8vIGFmdGVyIFwiYXRcIiBzaWduXG4gICAgICAgICAgdG9rZW5UeXBlID0gVG9rZW5UeXBlLkFUO1xuICAgICAgICAgIGFjdGlvbnMgPSBhY3Rpb25zSWRlbnQ7XG4gICAgICAgICAgY29udGludWU7XG4gICAgICAgIGNhc2UgQWN0aW9uLk9fQlJLOlxuICAgICAgICAgIHRva2VuUG9zaXRpb24gPSBwb3NpdGlvbisrO1xuICAgICAgICAgIHRva2VuVHlwZSA9IFRva2VuVHlwZS5PX0JSSztcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgY2FzZSBBY3Rpb24uQ19CUks6XG4gICAgICAgICAgdG9rZW5Qb3NpdGlvbiA9IHBvc2l0aW9uKys7XG4gICAgICAgICAgdG9rZW5UeXBlID0gVG9rZW5UeXBlLkNfQlJLO1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICBjYXNlIEFjdGlvbi5PX0JSQzpcbiAgICAgICAgICB0b2tlblBvc2l0aW9uID0gcG9zaXRpb24rKztcbiAgICAgICAgICB0b2tlblR5cGUgPSBUb2tlblR5cGUuT19CUkM7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIGNhc2UgQWN0aW9uLkNfQlJDOlxuICAgICAgICAgIHRva2VuUG9zaXRpb24gPSBwb3NpdGlvbisrO1xuICAgICAgICAgIHRva2VuVHlwZSA9IFRva2VuVHlwZS5DX0JSQztcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgY2FzZSBBY3Rpb24uQlNMQVNIOlxuICAgICAgICAgIHRva2VuUG9zaXRpb24gPSBwb3NpdGlvbisrO1xuICAgICAgICAgIGJhY2tzbGFzaFBvcyA9IHRva2VuUG9zaXRpb247XG4gICAgICAgICAgdG9rZW5UeXBlID0gVG9rZW5UeXBlLklERU5UO1xuICAgICAgICAgIGFjdGlvbnMgPSBhY3Rpb25zSWRlbnRFc2NDaHI7XG4gICAgICAgICAgY29udGludWU7XG4gICAgICAgIGNhc2UgQWN0aW9uLkhBVDpcbiAgICAgICAgICB0b2tlblBvc2l0aW9uID0gcG9zaXRpb24rKztcbiAgICAgICAgICB0b2tlblR5cGUgPSBUb2tlblR5cGUuSEFUO1xuICAgICAgICAgIGFjdGlvbnMgPSBhY3Rpb25zQ2hlY2tFcTtcbiAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgY2FzZSBBY3Rpb24uQkFSOlxuICAgICAgICAgIHRva2VuUG9zaXRpb24gPSBwb3NpdGlvbisrO1xuICAgICAgICAgIHRva2VuVHlwZSA9IFRva2VuVHlwZS5CQVI7XG4gICAgICAgICAgYWN0aW9ucyA9IGFjdGlvbnNCYXI7XG4gICAgICAgICAgY29udGludWU7XG4gICAgICAgIGNhc2UgQWN0aW9uLlRJTERFOlxuICAgICAgICAgIHRva2VuUG9zaXRpb24gPSBwb3NpdGlvbisrO1xuICAgICAgICAgIHRva2VuVHlwZSA9IFRva2VuVHlwZS5USUxERTtcbiAgICAgICAgICBhY3Rpb25zID0gYWN0aW9uc0NoZWNrRXE7XG4gICAgICAgICAgY29udGludWU7XG4gICAgICAgIGNhc2UgQWN0aW9uLkVORDpcbiAgICAgICAgICAvLyBkb24ndCBjb25zdW1lIGN1cnJlbnQgY2hhclxuICAgICAgICAgIGJyZWFrO1xuICAgICAgICBjYXNlIEFjdGlvbi5FUVRBSUw6XG4gICAgICAgICAgcG9zaXRpb24rKztcbiAgICAgICAgICB0b2tlblR5cGUgPSAodG9rZW5UeXBlICtcbiAgICAgICAgICAgIFRva2VuVHlwZS5CQU5HX0VRIC1cbiAgICAgICAgICAgIFRva2VuVHlwZS5CQU5HKSBhcyBUb2tlblR5cGU7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIGNhc2UgQWN0aW9uLkVORElOVDpcbiAgICAgICAgICAvLyBkb24ndCBjb25zdW1lIGN1cnJlbnQgY2hhclxuICAgICAgICAgIHRva2VuVHlwZSA9IFRva2VuVHlwZS5JTlQ7XG4gICAgICAgICAgdG9rZW5OdW0gPSBwYXJzZUludChpbnB1dC5zdWJzdHJpbmcodG9rZW5Qb3NpdGlvbiwgcG9zaXRpb24pLCAxMCk7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIGNhc2UgQWN0aW9uLkVORE5VTTpcbiAgICAgICAgICAvLyBkb24ndCBjb25zdW1lIGN1cnJlbnQgY2hhclxuICAgICAgICAgIHRva2VuVHlwZSA9IFRva2VuVHlwZS5OVU07XG4gICAgICAgICAgdG9rZW5OdW0gPSBwYXJzZUZsb2F0KGlucHV0LnN1YnN0cmluZyh0b2tlblBvc2l0aW9uLCBwb3NpdGlvbikpO1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICBjYXNlIEFjdGlvbi5DT05UOlxuICAgICAgICAgIC8vIGp1c3QgY29uc3VtZSBjdXJyZW50IGNoYXJcbiAgICAgICAgICBwb3NpdGlvbisrO1xuICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICBjYXNlIEFjdGlvbi5VTklUOlxuICAgICAgICAgIHRva2VuVHlwZSA9IFRva2VuVHlwZS5OVU1FUklDO1xuICAgICAgICAgIHRva2VuTnVtID0gcGFyc2VGbG9hdChpbnB1dC5zdWJzdHJpbmcodG9rZW5Qb3NpdGlvbiwgcG9zaXRpb24pKTtcbiAgICAgICAgICB0b2tlblBvc2l0aW9uID0gcG9zaXRpb24rKztcbiAgICAgICAgICBhY3Rpb25zID0gYWN0aW9uc0lkZW50O1xuICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICBjYXNlIEFjdGlvbi5QQ1VOSVQ6XG4gICAgICAgICAgdG9rZW5UeXBlID0gVG9rZW5UeXBlLk5VTUVSSUM7XG4gICAgICAgICAgdG9rZW5OdW0gPSBwYXJzZUZsb2F0KGlucHV0LnN1YnN0cmluZyh0b2tlblBvc2l0aW9uLCBwb3NpdGlvbikpO1xuICAgICAgICAgIHRva2VuVGV4dCA9IFwiJVwiO1xuICAgICAgICAgIHRva2VuUG9zaXRpb24gPSBwb3NpdGlvbisrOyAvLyBmb3IgY29uc2lzdGVuY3kgd2l0aCBhbHBoYWJldGljIHVuaXRzXG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIGNhc2UgQWN0aW9uLk5VTUJFUjpcbiAgICAgICAgICBwb3NpdGlvbisrO1xuICAgICAgICAgIGFjdGlvbnMgPSBhY3Rpb25zTnVtYmVyO1xuICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICBjYXNlIEFjdGlvbi5FTkRJRE5UOlxuICAgICAgICAgIC8vIGRvbid0IGNvbnN1bWUgY3VycmVudCBjaGFyXG4gICAgICAgICAgLy8gdG9rZW5UeXBlIHNob3VsZCBiZSBzZXQgYWxyZWFkeVxuICAgICAgICAgIHRva2VuVGV4dCA9IGlucHV0LnN1YnN0cmluZyh0b2tlblBvc2l0aW9uLCBwb3NpdGlvbik7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIGNhc2UgQWN0aW9uLklETlRFU0M6XG4gICAgICAgICAgYmFja3NsYXNoUG9zID0gcG9zaXRpb24rKztcbiAgICAgICAgICBhY3Rpb25zID0gYWN0aW9uc0lkZW50RXNjQ2hyO1xuICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICBjYXNlIEFjdGlvbi5FTkRJREVTOlxuICAgICAgICAgIC8vIGVuZCBvZiBpZGVudGlmaWVyIHdpdGggZXNjYXBlc1xuICAgICAgICAgIC8vIGRvbid0IGNvbnN1bWUgY3VycmVudCBjaGFyXG4gICAgICAgICAgLy8gdG9rZW5UeXBlIHNob3VsZCBiZSBzZXQgYWxyZWFkeVxuICAgICAgICAgIHRva2VuVGV4dCA9IGVzY2FwZVBhcnNlKGlucHV0LnN1YnN0cmluZyh0b2tlblBvc2l0aW9uLCBwb3NpdGlvbikpO1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICBjYXNlIEFjdGlvbi5FTkRTVFI6XG4gICAgICAgICAgdG9rZW5UZXh0ID0gaW5wdXQuc3Vic3RyaW5nKHRva2VuUG9zaXRpb24sIHBvc2l0aW9uKTsgLy8gY29uc3VtZSBjbG9zaW5nIHF1b3RlXG4gICAgICAgICAgcG9zaXRpb24rKztcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgY2FzZSBBY3Rpb24uRU5ERVNUUjpcbiAgICAgICAgICB0b2tlblRleHQgPSBlc2NhcGVQYXJzZShpbnB1dC5zdWJzdHJpbmcodG9rZW5Qb3NpdGlvbiwgcG9zaXRpb24pKTsgLy8gY29uc3VtZSBjbG9zaW5nIHF1b3RlXG4gICAgICAgICAgcG9zaXRpb24rKztcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgY2FzZSBBY3Rpb24uU1RSMUVTQzpcbiAgICAgICAgICBiYWNrc2xhc2hQb3MgPSBwb3NpdGlvbjtcbiAgICAgICAgICBwb3NpdGlvbiArPSAyOyAvLyBjb25zdW1lIGNoYXJhY3RlciBhZnRlciBiYWNrc2xhc2ggaW4gYW55IGNhc2VcbiAgICAgICAgICBhY3Rpb25zID0gYWN0aW9uc1N0cjFFc2M7XG4gICAgICAgICAgY29udGludWU7XG4gICAgICAgIGNhc2UgQWN0aW9uLlNUUjJFU0M6XG4gICAgICAgICAgYmFja3NsYXNoUG9zID0gcG9zaXRpb247XG4gICAgICAgICAgcG9zaXRpb24gKz0gMjsgLy8gY29uc3VtZSBjaGFyYWN0ZXIgYWZ0ZXIgYmFja3NsYXNoIGluIGFueSBjYXNlXG4gICAgICAgICAgYWN0aW9ucyA9IGFjdGlvbnNTdHIyRXNjO1xuICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICBjYXNlIEFjdGlvbi5CQVJfQkFSOlxuICAgICAgICAgIHBvc2l0aW9uKys7XG4gICAgICAgICAgdG9rZW5UeXBlID0gVG9rZW5UeXBlLkJBUl9CQVI7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIGNhc2UgQWN0aW9uLkFNUF9BTVA6XG4gICAgICAgICAgcG9zaXRpb24rKztcbiAgICAgICAgICB0b2tlblR5cGUgPSBUb2tlblR5cGUuQU1QX0FNUDtcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgY2FzZSBBY3Rpb24uRlVOQzpcbiAgICAgICAgICAvLyB0b2tlblR5cGUgY2FuIGJlIFRva2VuVHlwZS5JREVOVCxcbiAgICAgICAgICAvLyBUb2tlblR5cGUuQ0xBU1MsIFRva2VuVHlwZS5BVCxcbiAgICAgICAgICAvLyBUb2tlblR5cGUuSEFTSCwgVG9rZW5UeXBlLk5VTUVSSUNcbiAgICAgICAgICB0b2tlblRleHQgPSBpbnB1dC5zdWJzdHJpbmcodG9rZW5Qb3NpdGlvbiwgcG9zaXRpb24pO1xuICAgICAgICAgIGlmICh0b2tlblR5cGUgPT0gVG9rZW5UeXBlLklERU5UKSB7XG4gICAgICAgICAgICBwb3NpdGlvbisrOyAvLyBjb25zdW1lXG4gICAgICAgICAgICBpZiAodG9rZW5UZXh0LnRvTG93ZXJDYXNlKCkgPT0gXCJ1cmxcIikge1xuICAgICAgICAgICAgICBhY3Rpb25zID0gYWN0aW9uc1VSTDtcbiAgICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB0b2tlblR5cGUgPSBUb2tlblR5cGUuRlVOQztcbiAgICAgICAgICB9XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIGNhc2UgQWN0aW9uLkZVTkNFUzpcbiAgICAgICAgICAvLyB0b2tlblR5cGUgY2FuIGJlIFRva2VuVHlwZS5JREVOVCxcbiAgICAgICAgICAvLyBUb2tlblR5cGUuQ0xBU1MsIFRva2VuVHlwZS5BVCxcbiAgICAgICAgICAvLyBUb2tlblR5cGUuSEFTSCwgVF9OVU1FUklDXG4gICAgICAgICAgdG9rZW5UZXh0ID0gZXNjYXBlUGFyc2UoaW5wdXQuc3Vic3RyaW5nKHRva2VuUG9zaXRpb24sIHBvc2l0aW9uKSk7XG4gICAgICAgICAgaWYgKHRva2VuVHlwZSA9PSBUb2tlblR5cGUuSURFTlQpIHtcbiAgICAgICAgICAgIHBvc2l0aW9uKys7IC8vIGNvbnN1bWVcbiAgICAgICAgICAgIGlmICh0b2tlblRleHQudG9Mb3dlckNhc2UoKSA9PSBcInVybFwiKSB7XG4gICAgICAgICAgICAgIGFjdGlvbnMgPSBhY3Rpb25zVVJMO1xuICAgICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHRva2VuVHlwZSA9IFRva2VuVHlwZS5GVU5DO1xuICAgICAgICAgIH1cbiAgICAgICAgICBicmVhaztcbiAgICAgICAgY2FzZSBBY3Rpb24uQ09NTUVOVDpcbiAgICAgICAgICBhY3Rpb25zID0gYWN0aW9uc0NvbW1lbnQ7XG4gICAgICAgICAgcG9zaXRpb24rKztcbiAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgY2FzZSBBY3Rpb24uQ09NTVNUOlxuICAgICAgICAgIGFjdGlvbnMgPSBhY3Rpb25zQ29tbWVudFN0YXI7XG4gICAgICAgICAgcG9zaXRpb24rKztcbiAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgY2FzZSBBY3Rpb24uRU5ETk9USzpcbiAgICAgICAgICBhY3Rpb25zID0gYWN0aW9uc05vcm1hbDtcbiAgICAgICAgICBwb3NpdGlvbisrO1xuICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICBjYXNlIEFjdGlvbi5NSU5NSU46XG4gICAgICAgICAgYWN0aW9ucyA9IGFjdGlvbnNNaW51c01pbnVzO1xuICAgICAgICAgIHBvc2l0aW9uKys7XG4gICAgICAgICAgY29udGludWU7XG4gICAgICAgIGNhc2UgQWN0aW9uLlRPSU5UOlxuICAgICAgICAgIHRva2VuVHlwZSA9IFRva2VuVHlwZS5JTlQ7XG4gICAgICAgICAgYWN0aW9ucyA9IGFjdGlvbnNJbnQ7XG4gICAgICAgICAgcG9zaXRpb24rKztcbiAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgY2FzZSBBY3Rpb24uVE9OVU06XG4gICAgICAgICAgdG9rZW5UeXBlID0gVG9rZW5UeXBlLk5VTTtcbiAgICAgICAgICBhY3Rpb25zID0gYWN0aW9uc051bWJlcjtcbiAgICAgICAgICBwb3NpdGlvbisrO1xuICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICBjYXNlIEFjdGlvbi5UT0lERU5UOlxuICAgICAgICAgIHRva2VuVHlwZSA9IFRva2VuVHlwZS5JREVOVDtcbiAgICAgICAgICBhY3Rpb25zID0gYWN0aW9uc0lkZW50O1xuICAgICAgICAgIHBvc2l0aW9uKys7XG4gICAgICAgICAgY29udGludWU7XG4gICAgICAgIGNhc2UgQWN0aW9uLlRPSURFUzpcbiAgICAgICAgICB0b2tlblR5cGUgPSBUb2tlblR5cGUuSURFTlQ7XG4gICAgICAgICAgYWN0aW9ucyA9IGFjdGlvbnNJZGVudEVzY0NocjtcbiAgICAgICAgICBiYWNrc2xhc2hQb3MgPSBwb3NpdGlvbisrO1xuICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICBjYXNlIEFjdGlvbi5LSUxMMTpcbiAgICAgICAgICBwb3NpdGlvbi0tO1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICBjYXNlIEFjdGlvbi5LSUxMMjpcbiAgICAgICAgICBwb3NpdGlvbiAtPSAyO1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICBjYXNlIEFjdGlvbi5VUkw6XG4gICAgICAgICAgdG9rZW5Qb3NpdGlvbiA9IHBvc2l0aW9uKys7XG4gICAgICAgICAgYWN0aW9ucyA9IGFjdGlvbnNVUkxJbnNpZGU7XG4gICAgICAgICAgY29udGludWU7XG4gICAgICAgIGNhc2UgQWN0aW9uLlVSTDE6XG4gICAgICAgICAgdG9rZW5Qb3NpdGlvbiA9ICsrcG9zaXRpb247IC8vIHNraXAgcXVvdGVcbiAgICAgICAgICBhY3Rpb25zID0gYWN0aW9uc1VSTEluc2lkZTE7XG4gICAgICAgICAgY29udGludWU7XG4gICAgICAgIGNhc2UgQWN0aW9uLlVSTDI6XG4gICAgICAgICAgdG9rZW5Qb3NpdGlvbiA9ICsrcG9zaXRpb247IC8vIHNraXAgcXVvdGVcbiAgICAgICAgICBhY3Rpb25zID0gYWN0aW9uc1VSTEluc2lkZTI7XG4gICAgICAgICAgY29udGludWU7XG4gICAgICAgIGNhc2UgQWN0aW9uLkVORFVSTDpcbiAgICAgICAgICB0b2tlblR5cGUgPSBUb2tlblR5cGUuVVJMO1xuICAgICAgICAgIHRva2VuVGV4dCA9IGVzY2FwZVBhcnNlKGlucHV0LnN1YnN0cmluZyh0b2tlblBvc2l0aW9uLCBwb3NpdGlvbikpO1xuICAgICAgICAgIHBvc2l0aW9uKys7IC8vIHNraXAgJyknXG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIGNhc2UgQWN0aW9uLkZJTlVSTDpcbiAgICAgICAgICBwb3NpdGlvbisrOyAvLyBza2lwICcpJ1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICBjYXNlIEFjdGlvbi5MVF9CRzpcbiAgICAgICAgICBhY3Rpb25zID0gYWN0aW9uc0x0QmFuZztcbiAgICAgICAgICBwb3NpdGlvbisrO1xuICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICBjYXNlIEFjdGlvbi5MVF9CR19NOlxuICAgICAgICAgIGFjdGlvbnMgPSBhY3Rpb25zTHRCYW5nTWludXM7XG4gICAgICAgICAgcG9zaXRpb24rKztcbiAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgY2FzZSBBY3Rpb24uQ0hLU1A6XG4gICAgICAgICAgLy8gbmV3bGluZSBpbiBub24tcXVvdGVkIFVSTCAtIGNoZWNrIGlmIGVuZCBvZiB1cmxcbiAgICAgICAgICBpZiAocG9zaXRpb24gLSBiYWNrc2xhc2hQb3MgPCA4KSB7XG4gICAgICAgICAgICAvLyBjbG9zZSBlbm91Z2g6IG1heSBiZSB2YWxpZFxuICAgICAgICAgICAgaWYgKFxuICAgICAgICAgICAgICBpbnB1dFxuICAgICAgICAgICAgICAgIC5zdWJzdHJpbmcoYmFja3NsYXNoUG9zICsgMSwgcG9zaXRpb24gKyAxKVxuICAgICAgICAgICAgICAgIC5tYXRjaCgvXlswLTlhLWZBLUZdezAsNn0oXFxyXFxufFtcXG5cXHJdKXxbIFxcdF0kLylcbiAgICAgICAgICAgICkge1xuICAgICAgICAgICAgICAvLyB2YWxpZCwga2VlcCBnb2luZ1xuICAgICAgICAgICAgICBwb3NpdGlvbisrO1xuICAgICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG5cbiAgICAgICAgLy8gZW5kIG9mIHVybFxuICAgICAgICAvLyBmYWxsIHRocm91Z2hcbiAgICAgICAgY2FzZSBBY3Rpb24uVEVSTVVSTDpcbiAgICAgICAgICB0b2tlblR5cGUgPSBUb2tlblR5cGUuVVJMO1xuICAgICAgICAgIHRva2VuVGV4dCA9IGVzY2FwZVBhcnNlKGlucHV0LnN1YnN0cmluZyh0b2tlblBvc2l0aW9uLCBwb3NpdGlvbikpO1xuICAgICAgICAgIHBvc2l0aW9uKys7IC8vIHNraXAgcXVvdGUgKG9yIG5ld2xpbmUpXG4gICAgICAgICAgYWN0aW9ucyA9IGFjdGlvbnNVUkxUYWlsO1xuICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICBjYXNlIEFjdGlvbi5DSEtQT1NOOlxuICAgICAgICAgIC8vIG5ld2xpbmUgaW4gc3RyaW5nIG9yIHF1b3RlZCBVUkwgLSBjaGVjayB2YWxpZGl0eVxuICAgICAgICAgIHBvc2l0aW9uKys7XG4gICAgICAgICAgaWYgKHBvc2l0aW9uIC0gYmFja3NsYXNoUG9zIDwgOSkge1xuICAgICAgICAgICAgLy8gY2xvc2UgZW5vdWdoOiBtYXkgYmUgdmFsaWRcbiAgICAgICAgICAgIGlmIChcbiAgICAgICAgICAgICAgaW5wdXRcbiAgICAgICAgICAgICAgICAuc3Vic3RyaW5nKGJhY2tzbGFzaFBvcyArIDEsIHBvc2l0aW9uKVxuICAgICAgICAgICAgICAgIC5tYXRjaCgvXlswLTlhLWZBLUZdezAsNn0oXFxyXFxufFtcXG5cXHJdKSQvKVxuICAgICAgICAgICAgKSB7XG4gICAgICAgICAgICAgIC8vIHZhbGlkLCBrZWVwIGdvaW5nXG4gICAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cblxuICAgICAgICAgIC8vIGludmFsaWQgdG9rZW5cbiAgICAgICAgICB0b2tlblR5cGUgPSBUb2tlblR5cGUuSU5WQUxJRDtcbiAgICAgICAgICB0b2tlblRleHQgPSBcIkVfQ1NTX1VORVhQRUNURURfTkVXTElORVwiO1xuICAgICAgICAgIGFjdGlvbnMgPSBhY3Rpb25zTm9ybWFsO1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICBjYXNlIEFjdGlvbi5DSEtQT1NTOlxuICAgICAgICAgIC8vIHNwYWNlIGluIGlkZW50aWZpZXIgLSBjaGVjayB2YWxpZGl0eVxuICAgICAgICAgIGlmIChwb3NpdGlvbiAtIGJhY2tzbGFzaFBvcyA8IDkpIHtcbiAgICAgICAgICAgIC8vIGNsb3NlIGVub3VnaDogbWF5IGJlIHZhbGlkXG4gICAgICAgICAgICBpZiAoXG4gICAgICAgICAgICAgIGlucHV0XG4gICAgICAgICAgICAgICAgLnN1YnN0cmluZyhiYWNrc2xhc2hQb3MgKyAxLCBwb3NpdGlvbiArIDEpXG4gICAgICAgICAgICAgICAgLm1hdGNoKC9eWzAtOWEtZkEtRl17MCw2fVsgXFx0XSQvKVxuICAgICAgICAgICAgKSB7XG4gICAgICAgICAgICAgIC8vIHZhbGlkLCBrZWVwIGdvaW5nXG4gICAgICAgICAgICAgIHBvc2l0aW9uKys7XG4gICAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cblxuICAgICAgICAgIC8vIGVuZCBvZiBpZGVudGlmaWVyXG4gICAgICAgICAgLy8gZG9uJ3QgY29uc3VtZSBjdXJyZW50IGNoYXJcbiAgICAgICAgICAvLyB0b2tlblR5cGUgc2hvdWxkIGJlIHNldCBhbHJlYWR5XG4gICAgICAgICAgdG9rZW5UZXh0ID0gZXNjYXBlUGFyc2UoaW5wdXQuc3Vic3RyaW5nKHRva2VuUG9zaXRpb24sIHBvc2l0aW9uKSk7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIGNhc2UgQWN0aW9uLlVSTEVTQzpcbiAgICAgICAgICBiYWNrc2xhc2hQb3MgPSBwb3NpdGlvbisrO1xuICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICBjYXNlIEFjdGlvbi5JREVTQ0g6XG4gICAgICAgICAgcG9zaXRpb24rKztcbiAgICAgICAgICBhY3Rpb25zID0gYWN0aW9uc0lkZW50RXNjO1xuICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgIC8vIEVPRlxuICAgICAgICAgIGlmIChhY3Rpb25zICE9PSBhY3Rpb25zTm9ybWFsKSB7XG4gICAgICAgICAgICB0b2tlblR5cGUgPSBUb2tlblR5cGUuSU5WQUxJRDtcbiAgICAgICAgICAgIHRva2VuVGV4dCA9IFwiRV9DU1NfVU5FWFBFQ1RFRF9TVEFURVwiO1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgfVxuICAgICAgICAgIHRva2VuUG9zaXRpb24gPSBwb3NpdGlvbjtcbiAgICAgICAgICB0b2tlblR5cGUgPSBUb2tlblR5cGUuRU9GO1xuICAgICAgfVxuICAgICAgdG9rZW4udHlwZSA9IHRva2VuVHlwZTtcbiAgICAgIHRva2VuLnByZWNlZGVkQnlTcGFjZSA9IHNlZW5TcGFjZTtcbiAgICAgIHRva2VuLm51bSA9IHRva2VuTnVtO1xuICAgICAgdG9rZW4udGV4dCA9IHRva2VuVGV4dDtcbiAgICAgIHRva2VuLnBvc2l0aW9uID0gdG9rZW5Qb3NpdGlvbjtcbiAgICAgIHRhaWwrKztcbiAgICAgIGlmICh0YWlsID49IGhlYWQpIHtcbiAgICAgICAgYnJlYWs7XG4gICAgICB9XG4gICAgICBhY3Rpb25zID0gYWN0aW9uc05vcm1hbDtcbiAgICAgIHNlZW5TcGFjZSA9IGZhbHNlO1xuICAgICAgdG9rZW4gPSBidWZmZXJbdGFpbCAmIGluZGV4TWFza107XG4gICAgfVxuICAgIHRoaXMucG9zaXRpb24gPSBwb3NpdGlvbjtcbiAgICB0aGlzLnRhaWwgPSB0YWlsICYgaW5kZXhNYXNrO1xuICB9XG59XG4iLCIvKipcbiAqIENvcHlyaWdodCAyMDEzIEdvb2dsZSwgSW5jLlxuICogQ29weXJpZ2h0IDIwMTUgVHJpbS1tYXJrcyBJbmMuXG4gKiBDb3B5cmlnaHQgMjAxOSBWaXZsaW9zdHlsZSBGb3VuZGF0aW9uXG4gKlxuICogVml2bGlvc3R5bGUuanMgaXMgZnJlZSBzb2Z0d2FyZTogeW91IGNhbiByZWRpc3RyaWJ1dGUgaXQgYW5kL29yIG1vZGlmeVxuICogaXQgdW5kZXIgdGhlIHRlcm1zIG9mIHRoZSBHTlUgQWZmZXJvIEdlbmVyYWwgUHVibGljIExpY2Vuc2UgYXMgcHVibGlzaGVkIGJ5XG4gKiB0aGUgRnJlZSBTb2Z0d2FyZSBGb3VuZGF0aW9uLCBlaXRoZXIgdmVyc2lvbiAzIG9mIHRoZSBMaWNlbnNlLCBvclxuICogKGF0IHlvdXIgb3B0aW9uKSBhbnkgbGF0ZXIgdmVyc2lvbi5cbiAqXG4gKiBWaXZsaW9zdHlsZS5qcyBpcyBkaXN0cmlidXRlZCBpbiB0aGUgaG9wZSB0aGF0IGl0IHdpbGwgYmUgdXNlZnVsLFxuICogYnV0IFdJVEhPVVQgQU5ZIFdBUlJBTlRZOyB3aXRob3V0IGV2ZW4gdGhlIGltcGxpZWQgd2FycmFudHkgb2ZcbiAqIE1FUkNIQU5UQUJJTElUWSBvciBGSVRORVNTIEZPUiBBIFBBUlRJQ1VMQVIgUFVSUE9TRS4gIFNlZSB0aGVcbiAqIEdOVSBBZmZlcm8gR2VuZXJhbCBQdWJsaWMgTGljZW5zZSBmb3IgbW9yZSBkZXRhaWxzLlxuICpcbiAqIFlvdSBzaG91bGQgaGF2ZSByZWNlaXZlZCBhIGNvcHkgb2YgdGhlIEdOVSBBZmZlcm8gR2VuZXJhbCBQdWJsaWMgTGljZW5zZVxuICogYWxvbmcgd2l0aCBWaXZsaW9zdHlsZS5qcy4gIElmIG5vdCwgc2VlIDxodHRwOi8vd3d3LmdudS5vcmcvbGljZW5zZXMvPi5cbiAqXG4gKiBAZmlsZW92ZXJ2aWV3IFRhc2sgLSBTdXBwb3J0IGZvciBhc3luY2hyb25vdXMgZXhlY3V0aW9uIGFuZCBjb29wZXJhdGl2ZVxuICogbXVsdGl0YXNraW5nLlxuICovXG5pbXBvcnQgKiBhcyBCYXNlIGZyb20gXCIuL2Jhc2VcIjtcbmltcG9ydCAqIGFzIExvZ2dpbmcgZnJvbSBcIi4vbG9nZ2luZ1wiO1xuXG4vKipcbiAqIEV4dGVybmFsIHRpbWVyLiBPbmx5IG5lZWRlZCBmb3IgdGVzdGluZy5cbiAqL1xuZXhwb3J0IGludGVyZmFjZSBUaW1lciB7XG4gIC8qKlxuICAgKiBAcmV0dXJuIGN1cnJlbnQgdGltZSBpbiBtaWxsaXNlY29uZHMuXG4gICAqL1xuICBjdXJyZW50VGltZSgpOiBudW1iZXI7XG5cbiAgLyoqXG4gICAqIENhbGxzIGZ1bmN0aW9uIGFmdGVyIGEgZ2l2ZW4gdGltZW91dC5cbiAgICogQHBhcmFtIGZuIGZ1bmN0aW9uIHRvIGNhbGwuXG4gICAqIEBwYXJhbSBkZWxheSB0aW1lb3V0IGluIG1pbGxpc2Vjb25kcy5cbiAgICogQHJldHVybiB1bmlxdWUgbnVtYmVyIHRoYXQgY2FuIGJlIHVzZWQgdG8gY2xlYXIgdGhlIHRpbWVvdXQuXG4gICAqL1xuICBzZXRUaW1lb3V0KGZuOiAoKSA9PiB2b2lkLCBkZWxheTogbnVtYmVyKTogbnVtYmVyO1xuXG4gIC8qKlxuICAgKiBDYWxscyBmdW5jdGlvbiBhZnRlciBhIGdpdmVuIHRpbWVvdXQuXG4gICAqIEBwYXJhbSB0b2tlbiB0aW1lb3V0IHRva2VuLlxuICAgKiBAcmV0dXJuLlxuICAgKi9cbiAgY2xlYXJUaW1lb3V0KHRva2VuOiBudW1iZXIpOiB2b2lkO1xufVxuXG4vKipcbiAqIFJlc3VsdCBvZiBhbiBhc3luY2hyb25vdXMgZnVuY3Rpb24gdGhhdCBtYXkgYmUgYXZhaWxhYmxlIGltbWVkaWF0ZWx5IG9yXG4gKiBzb21lIHRpbWUgbGF0ZXIuIFNpbWlsYXIgdG8gRGVmZXJyZWQuXG4gKiBAdGVtcGxhdGUgVFxuICovXG5leHBvcnQgaW50ZXJmYWNlIFJlc3VsdDxUPiB7XG4gIC8qKlxuICAgKiBDYWxsIHRoZSBnaXZlbiBmdW5jdGlvbiB3aGVuIGFzeW5jaHJvbm91cyBmdW5jdGlvbiBpcyBmaW5pc2hlZC4gQ2FsbGJhY2tcbiAgICogaXMgZXhlY3V0ZWQgaW4gdGhlIHRhc2sncyBjb250ZXh0LlxuICAgKi9cbiAgdGhlbihjYWxsYmFjazogKHAxOiBUKSA9PiB2b2lkKTogdm9pZDtcblxuICAvKipcbiAgICogQ2FsbCB0aGUgZ2l2ZW4gYXN5bmNocm9ub3VzIGZ1bmN0aW9uIHdoZW4gc29tZSBhc3luY2hyb25vdXMgZnVuY3Rpb24gaXNcbiAgICogZmluaXNoZWQuIENhbGxiYWNrIGlzIGV4ZWN1dGVkIGluIHRoZSB0YXNrJ3MgY29udGV4dC5cbiAgICogQHRlbXBsYXRlIFQxXG4gICAqL1xuICB0aGVuQXN5bmM8VDE+KGNhbGxiYWNrOiAocDE6IFQpID0+IFJlc3VsdDxUMT4pOiBSZXN1bHQ8VDE+O1xuXG4gIC8qKlxuICAgKiBQcm9kdWNlIGEgUmVzdWx0IHRoYXQgcmVzb2x2ZXMgdG8gdGhlIGdpdmVuIHZhbHVlIHdoZW4gdGhpcyBSZXN1bHQgaXNcbiAgICogcmVzb2x2ZWQuXG4gICAqIEB0ZW1wbGF0ZSBUMVxuICAgKi9cbiAgdGhlblJldHVybjxUMT4ocmVzdWx0OiBUMSk6IFJlc3VsdDxUMT47XG5cbiAgLyoqXG4gICAqIEZpbmlzaCBnaXZlbiBmcmFtZSB3aXRoIHRoZSByZXN1bHQgdmFsdWUgd2hlbiByZXN1bHQgYmVjb21lcyByZWFkeS5cbiAgICovXG4gIHRoZW5GaW5pc2goZnJhbWU6IEZyYW1lPFQ+KTogdm9pZDtcblxuICAvKipcbiAgICogQ2hlY2sgaWYgdGhpcyBSZXN1bHQgaXMgc3RpbGwgcGVuZGluZy5cbiAgICovXG4gIGlzUGVuZGluZygpOiBib29sZWFuO1xuXG4gIC8qKlxuICAgKiBJZiB0aGlzIFJlc3VsdCBpcyByZXNvbHZlZCwgcmV0dXJuIHRoZSB2YWx1ZSB0aGF0IGl0IGhvbGRzLlxuICAgKi9cbiAgZ2V0KCk6IFQgfCBudWxsO1xufVxuXG5leHBvcnQgbGV0IHByaXZhdGVDdXJyZW50VGFzazogVGFzayB8IG51bGwgPSBudWxsO1xuXG5leHBvcnQgbGV0IHByaW1hcnlTY2hlZHVsZXI6IFNjaGVkdWxlciB8IG51bGwgPSBudWxsO1xuXG4vKipcbiAqIFJldHVybnMgY3VycmVudCB0YXNrLlxuICovXG5leHBvcnQgZnVuY3Rpb24gY3VycmVudFRhc2soKTogVGFzayB8IG51bGwge1xuICByZXR1cm4gcHJpdmF0ZUN1cnJlbnRUYXNrO1xufVxuXG4vKipcbiAqIENyZWF0ZSBhbmQgcmV0dXJuIGEgbmV3IGZyYW1lIHdpdGggdGhlIGdpdmVuIG5hbWUuXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBuZXdGcmFtZTxUPihuYW1lOiBzdHJpbmcpOiBGcmFtZTxUPiB7XG4gIGlmICghcHJpdmF0ZUN1cnJlbnRUYXNrKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKFwiRV9UQVNLX05PX0NPTlRFWFRcIik7XG4gIH1cbiAgaWYgKCFwcml2YXRlQ3VycmVudFRhc2submFtZSkge1xuICAgIHByaXZhdGVDdXJyZW50VGFzay5uYW1lID0gbmFtZTtcbiAgfVxuICBjb25zdCB0YXNrID0gcHJpdmF0ZUN1cnJlbnRUYXNrO1xuICBjb25zdCBmcmFtZSA9IG5ldyBGcmFtZTxUPih0YXNrLCB0YXNrLnRvcCwgbmFtZSk7XG4gIHRhc2sudG9wID0gZnJhbWU7XG4gIGZyYW1lLnN0YXRlID0gRnJhbWVTdGF0ZS5BQ1RJVkU7XG4gIHJldHVybiBmcmFtZTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIG5ld0V2ZW50U291cmNlKCk6IEV2ZW50U291cmNlIHtcbiAgcmV0dXJuIG5ldyBFdmVudFNvdXJjZSgpO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gbmV3U2NoZWR1bGVyKG9wdF90aW1lcj86IFRpbWVyKTogU2NoZWR1bGVyIHtcbiAgcmV0dXJuIG5ldyBTY2hlZHVsZXIob3B0X3RpbWVyIHx8IG5ldyBUaW1lckltcGwoKSk7XG59XG5cbi8qKlxuICogQHRlbXBsYXRlIFRcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIG5ld1Jlc3VsdDxUPihvcHRfdmFsdWU6IFQpOiBSZXN1bHQ8VD4ge1xuICByZXR1cm4gbmV3IFN5bmNSZXN1bHRJbXBsPFQ+KG9wdF92YWx1ZSk7XG59XG5cbi8qKlxuICogQ3JlYXRlcyBhIG5ldyBmcmFtZSBhbmQgcnVucyBjb2RlIGluIGl0cyBjb250ZXh0LCBjYXRjaGluZyBzeW5jaHJvbm91cyBhbmRcbiAqIGFzeW5jaHJvbm91cyBlcnJvcnMuIElmIGFuIGVycm9yIG9jY3Vycywgb25FcnIgaXMgcnVuIChpbiB0aGUgY29udGV4dCBvZlxuICogdGhlIHNhbWUgZnJhbWUpLiBBcyB1c3VhbCwgb25FcnIgaXMgc3VwcG9zZWQgZWl0aGVyIHByb2R1Y2UgYSByZXN1bHQgb3IgcmFpc2VcbiAqIGFuIGV4Y2VwdGlvbi5cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGhhbmRsZTxUPihcbiAgbmFtZTogYW55LFxuICBjb2RlOiAocDE6IEZyYW1lPFQ+KSA9PiB2b2lkLFxuICBvbkVycjogKHAxOiBGcmFtZTxUPiwgcDI6IEVycm9yKSA9PiB2b2lkLFxuKTogUmVzdWx0PFQ+IHtcbiAgY29uc3QgZnJhbWUgPSBuZXdGcmFtZTxUPihuYW1lKTtcbiAgZnJhbWUuaGFuZGxlciA9IG9uRXJyO1xuICB0cnkge1xuICAgIGNvZGUoZnJhbWUpO1xuICB9IGNhdGNoIChlcnIpIHtcbiAgICAvLyBzeW5jaHJvbm91cyBleGNlcHRpb25cbiAgICBmcmFtZS50YXNrLnJhaXNlKGVyciwgZnJhbWUpO1xuICB9XG4gIHJldHVybiBmcmFtZS5yZXN1bHQoKTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHN0YXJ0PFQ+KGZ1bmM6ICgpID0+IFJlc3VsdDxUPiwgb3B0X25hbWU/OiBzdHJpbmcpOiBUYXNrIHtcbiAgY29uc3Qgc2NoZWR1bGVyID0gcHJpdmF0ZUN1cnJlbnRUYXNrXG4gICAgPyBwcml2YXRlQ3VycmVudFRhc2suZ2V0U2NoZWR1bGVyKClcbiAgICA6IHByaW1hcnlTY2hlZHVsZXIgfHwgbmV3U2NoZWR1bGVyKCk7XG4gIHJldHVybiBzY2hlZHVsZXIucnVuKGZ1bmMsIG9wdF9uYW1lKTtcbn1cblxuLyoqXG4gKiBGcmFtZSBzdGF0ZS5cbiAqIEBlbnVtIHtudW1iZXJ9XG4gKi9cbmV4cG9ydCBlbnVtIEZyYW1lU3RhdGUge1xuICBJTklULCAvLyBiZWZvcmUgbmV3RnJhbWUgY2FsbFxuICBBQ1RJVkUsIC8vIGJlZm9yZSBmaW5pc2ggY2FsbFxuICBGSU5JU0hFRCwgLy8gYmVmb3JlIGNhbGxiYWNrIGNvbXBsZXRlXG4gIERFQUQsIC8vIHdoZW4gY2FsbGJhY2sgaXMgY29tcGxldGVcbn1cbmV4cG9ydCBjbGFzcyBUaW1lckltcGwgaW1wbGVtZW50cyBUaW1lciB7XG4gIC8qKlxuICAgKiBAb3ZlcnJpZGVcbiAgICovXG4gIGN1cnJlbnRUaW1lKCk6IG51bWJlciB7XG4gICAgcmV0dXJuIG5ldyBEYXRlKCkudmFsdWVPZigpO1xuICB9XG5cbiAgLyoqXG4gICAqIEBvdmVycmlkZVxuICAgKi9cbiAgc2V0VGltZW91dChmbjogKCkgPT4gdm9pZCwgZGVsYXk6IG51bWJlcikge1xuICAgIC8vIEhBQ0s6IGNhc3RpbmcgdG8gdW5rbm93biB0eXBlIHRvIHByZXZlbnQgVHlwZVNjcmlwdCBlcnJvclxuICAgIC8vIFtUUzIzNTJdIENvbnZlcnNpb24gb2YgdHlwZSAnVGltZXInIHRvIHR5cGUgJ251bWJlcicgbWF5IGJlIGEgbWlzdGFrZSBiZWNhdXNlIG5laXRoZXIgdHlwZSBzdWZmaWNpZW50bHkgb3ZlcmxhcHMgd2l0aCB0aGUgb3RoZXIuXG4gICAgY29uc3QgdGltZXI6IHVua25vd24gPSBzZXRUaW1lb3V0KGZuLCBkZWxheSk7XG4gICAgcmV0dXJuIHRpbWVyIGFzIG51bWJlcjtcbiAgfVxuXG4gIC8qKlxuICAgKiBAb3ZlcnJpZGVcbiAgICovXG4gIGNsZWFyVGltZW91dCh0b2tlbjogbnVtYmVyKTogdm9pZCB7XG4gICAgY2xlYXJUaW1lb3V0KHRva2VuKTtcbiAgfVxufVxuXG4vKipcbiAqIEEgY2xhc3MgdG8gY3JlYXRlIHRhc2tzLlxuICovXG5leHBvcnQgY2xhc3MgU2NoZWR1bGVyIHtcbiAgdGltZW91dDogbnVtYmVyID0gMTtcbiAgc2xpY2U6IG51bWJlciA9IDI1O1xuICBzbGljZU92ZXJUaW1lOiBudW1iZXIgPSAwO1xuICBxdWV1ZTogQmFzZS5Qcmlvcml0eVF1ZXVlO1xuICB3YWtldXBUaW1lOiBudW1iZXIgfCBudWxsID0gbnVsbDtcbiAgdGltZW91dFRva2VuOiBudW1iZXIgfCBudWxsID0gbnVsbDtcbiAgaW5UaW1lU2xpY2U6IGJvb2xlYW4gPSBmYWxzZTtcbiAgb3JkZXI6IG51bWJlciA9IDA7XG5cbiAgY29uc3RydWN0b3IocHVibGljIHRpbWVyOiBUaW1lcikge1xuICAgIHRoaXMucXVldWUgPSBuZXcgQmFzZS5Qcmlvcml0eVF1ZXVlKCk7XG4gICAgaWYgKCFwcmltYXJ5U2NoZWR1bGVyKSB7XG4gICAgICBwcmltYXJ5U2NoZWR1bGVyID0gdGhpcztcbiAgICB9XG4gIH1cblxuICAvKipcbiAgICogU2V0cyB0aW1lIHNsaWNlIGxlbmd0aC5cbiAgICogQHBhcmFtIHNsaWNlIGxlbmd0aCBpbiBtaWxsaXNlY29uZHMuXG4gICAqL1xuICBzZXRTbGljZShzbGljZTogbnVtYmVyKSB7XG4gICAgdGhpcy5zbGljZSA9IHNsaWNlO1xuICB9XG5cbiAgLyoqXG4gICAqIFNldHMgdGltZW91dCBiZXR3ZWVuIHRpbWUgc2xpY2VzLlxuICAgKiBAcGFyYW0gdGltZW91dCBpbiBtaWxsaXNlY29uZHMuXG4gICAqL1xuICBzZXRUaW1lb3V0KHRpbWVvdXQ6IG51bWJlcikge1xuICAgIHRoaXMudGltZW91dCA9IHRpbWVvdXQ7XG4gIH1cblxuICAvKipcbiAgICogQ2hlY2tzIGlmIHRoZSBjdXJyZW50IHRpbWUgc2xpY2UgaXMgb3Zlci5cbiAgICovXG4gIGlzVGltZVNsaWNlT3ZlcigpOiBib29sZWFuIHtcbiAgICBjb25zdCBub3cgPSB0aGlzLnRpbWVyLmN1cnJlbnRUaW1lKCk7XG4gICAgcmV0dXJuIG5vdyA+PSB0aGlzLnNsaWNlT3ZlclRpbWU7XG4gIH1cblxuICBwcml2YXRlIGFybSgpOiB2b2lkIHtcbiAgICBpZiAodGhpcy5pblRpbWVTbGljZSkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBjb25zdCBuZXh0SW5RdWV1ZSA9IHRoaXMucXVldWUucGVlaygpIGFzIENvbnRpbnVhdGlvbjxhbnk+O1xuICAgIGNvbnN0IG5ld1RpbWUgPSBuZXh0SW5RdWV1ZS5zY2hlZHVsZWRUaW1lO1xuICAgIGNvbnN0IG5vdyA9IHRoaXMudGltZXIuY3VycmVudFRpbWUoKTtcbiAgICBpZiAodGhpcy50aW1lb3V0VG9rZW4gIT0gbnVsbCkge1xuICAgICAgaWYgKG5vdyArIHRoaXMudGltZW91dCA+IHRoaXMud2FrZXVwVGltZSkge1xuICAgICAgICByZXR1cm47IC8vIG5vIHVzZSByZS1hcm1pbmdcbiAgICAgIH1cbiAgICAgIHRoaXMudGltZXIuY2xlYXJUaW1lb3V0KHRoaXMudGltZW91dFRva2VuKTtcbiAgICB9XG4gICAgbGV0IHRpbWVvdXQgPSBuZXdUaW1lIC0gbm93O1xuICAgIGlmICh0aW1lb3V0IDw9IHRoaXMudGltZW91dCkge1xuICAgICAgdGltZW91dCA9IHRoaXMudGltZW91dDtcbiAgICB9XG4gICAgdGhpcy53YWtldXBUaW1lID0gbm93ICsgdGltZW91dDtcbiAgICB0aGlzLnRpbWVvdXRUb2tlbiA9IHRoaXMudGltZXIuc2V0VGltZW91dCgoKSA9PiB7XG4gICAgICB0aGlzLnRpbWVvdXRUb2tlbiA9IG51bGw7XG4gICAgICB0aGlzLmRvVGltZVNsaWNlKCk7XG4gICAgfSwgdGltZW91dCk7XG4gIH1cblxuICBzY2hlZHVsZShjb250aW51YXRpb246IENvbnRpbnVhdGlvbjxhbnk+LCBvcHRfZGVsYXk/OiBudW1iZXIpOiB2b2lkIHtcbiAgICBjb25zdCBjID0gY29udGludWF0aW9uIGFzIENvbnRpbnVhdGlvbjxhbnk+O1xuICAgIGNvbnN0IG5vdyA9IHRoaXMudGltZXIuY3VycmVudFRpbWUoKTtcbiAgICBjLm9yZGVyID0gdGhpcy5vcmRlcisrO1xuICAgIGMuc2NoZWR1bGVkVGltZSA9IG5vdyArIChvcHRfZGVsYXkgfHwgMCk7XG4gICAgdGhpcy5xdWV1ZS5hZGQoYyk7XG4gICAgdGhpcy5hcm0oKTtcbiAgfVxuXG4gIHByaXZhdGUgZG9UaW1lU2xpY2UoKTogdm9pZCB7XG4gICAgaWYgKHRoaXMudGltZW91dFRva2VuICE9IG51bGwpIHtcbiAgICAgIHRoaXMudGltZXIuY2xlYXJUaW1lb3V0KHRoaXMudGltZW91dFRva2VuKTtcbiAgICAgIHRoaXMudGltZW91dFRva2VuID0gbnVsbDtcbiAgICB9XG4gICAgdGhpcy5pblRpbWVTbGljZSA9IHRydWU7XG4gICAgdHJ5IHtcbiAgICAgIGxldCBub3cgPSB0aGlzLnRpbWVyLmN1cnJlbnRUaW1lKCk7XG4gICAgICB0aGlzLnNsaWNlT3ZlclRpbWUgPSBub3cgKyB0aGlzLnNsaWNlO1xuICAgICAgd2hpbGUgKHRoaXMucXVldWUubGVuZ3RoKCkpIHtcbiAgICAgICAgY29uc3QgY29udGludWF0aW9uID0gdGhpcy5xdWV1ZS5wZWVrKCkgYXMgQ29udGludWF0aW9uPGFueT47XG4gICAgICAgIGlmIChjb250aW51YXRpb24uc2NoZWR1bGVkVGltZSA+IG5vdykge1xuICAgICAgICAgIGJyZWFrOyAvLyB0b28gZWFybHlcbiAgICAgICAgfVxuICAgICAgICB0aGlzLnF1ZXVlLnJlbW92ZSgpO1xuICAgICAgICBpZiAoIWNvbnRpbnVhdGlvbi5jYW5jZWxlZCkge1xuICAgICAgICAgIGNvbnRpbnVhdGlvbi5yZXN1bWVJbnRlcm5hbCgpO1xuICAgICAgICB9XG4gICAgICAgIG5vdyA9IHRoaXMudGltZXIuY3VycmVudFRpbWUoKTtcbiAgICAgICAgaWYgKG5vdyA+PSB0aGlzLnNsaWNlT3ZlclRpbWUpIHtcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0gY2F0Y2ggKGVycikge1xuICAgICAgTG9nZ2luZy5sb2dnZXIuZXJyb3IoZXJyKTtcbiAgICB9XG4gICAgdGhpcy5pblRpbWVTbGljZSA9IGZhbHNlO1xuICAgIGlmICh0aGlzLnF1ZXVlLmxlbmd0aCgpKSB7XG4gICAgICB0aGlzLmFybSgpO1xuICAgIH1cbiAgfVxuXG4gIHJ1bihmdW5jOiAoKSA9PiBSZXN1bHQ8YW55Piwgb3B0X25hbWU/OiBzdHJpbmcpOiBUYXNrIHtcbiAgICBjb25zdCB0YXNrID0gbmV3IFRhc2sodGhpcywgb3B0X25hbWUgfHwgXCJcIik7XG4gICAgdGFzay50b3AgPSBuZXcgRnJhbWU8YW55Pih0YXNrLCBudWxsLCBcImJvb3RzdHJhcFwiKTtcbiAgICB0YXNrLnRvcC5zdGF0ZSA9IEZyYW1lU3RhdGUuQUNUSVZFO1xuICAgIHRhc2sudG9wLnRoZW4oKCkgPT4ge1xuICAgICAgY29uc3QgZG9uZSA9ICgpID0+IHtcbiAgICAgICAgdGFzay5ydW5uaW5nID0gZmFsc2U7XG4gICAgICAgIGZvciAoY29uc3QgY2FsbGJhY2sgb2YgdGFzay5jYWxsYmFja3MpIHtcbiAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgY2FsbGJhY2soKTtcbiAgICAgICAgICB9IGNhdGNoIChlcnIpIHtcbiAgICAgICAgICAgIExvZ2dpbmcubG9nZ2VyLmVycm9yKGVycik7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9O1xuICAgICAgdHJ5IHtcbiAgICAgICAgZnVuYygpLnRoZW4oKHJlc3VsdCkgPT4ge1xuICAgICAgICAgIHRhc2sucmVzdWx0ID0gcmVzdWx0O1xuICAgICAgICAgIGRvbmUoKTtcbiAgICAgICAgfSk7XG4gICAgICB9IGNhdGNoIChlcnIpIHtcbiAgICAgICAgdGFzay5yYWlzZShlcnIpO1xuICAgICAgICBkb25lKCk7XG4gICAgICB9XG4gICAgfSk7XG4gICAgY29uc3Qgc2F2ZWRUYXNrID0gcHJpdmF0ZUN1cnJlbnRUYXNrO1xuICAgIHByaXZhdGVDdXJyZW50VGFzayA9IHRhc2s7XG4gICAgdGhpcy5zY2hlZHVsZSh0YXNrLnRvcC5zdXNwZW5kKFwiYm9vdHN0cmFwXCIpKTtcbiAgICBwcml2YXRlQ3VycmVudFRhc2sgPSBzYXZlZFRhc2s7XG4gICAgcmV0dXJuIHRhc2s7XG4gIH1cbn1cblxuLyoqXG4gKiBUYXNrIHN1c3BlbnNpb24gcG9pbnQuXG4gKiBAdGVtcGxhdGUgVFxuICovXG5leHBvcnQgY2xhc3MgQ29udGludWF0aW9uPFQ+IGltcGxlbWVudHMgQmFzZS5Db21wYXJhYmxlIHtcbiAgc2NoZWR1bGVkVGltZTogbnVtYmVyID0gMDtcbiAgb3JkZXI6IG51bWJlciA9IDA7XG4gIHJlc3VsdDogVCA9IG51bGw7XG4gIGNhbmNlbGVkOiBib29sZWFuID0gZmFsc2U7XG5cbiAgY29uc3RydWN0b3IocHVibGljIHRhc2s6IFRhc2spIHt9XG5cbiAgLyoqXG4gICAqIEBvdmVycmlkZVxuICAgKi9cbiAgY29tcGFyZShvdGhlckNvbXA6IEJhc2UuQ29tcGFyYWJsZSk6IG51bWJlciB7XG4gICAgLy8gZWFybGllciB3aW5zXG4gICAgY29uc3Qgb3RoZXIgPSBvdGhlckNvbXAgYXMgQ29udGludWF0aW9uPGFueT47XG4gICAgcmV0dXJuIG90aGVyLnNjaGVkdWxlZFRpbWUgLSB0aGlzLnNjaGVkdWxlZFRpbWUgfHwgb3RoZXIub3JkZXIgLSB0aGlzLm9yZGVyO1xuICB9XG5cbiAgLyoqXG4gICAqIENvbnRpbnVhdGlvbidzIHRhc2tcbiAgICovXG4gIGdldFRhc2soKTogVGFzayB7XG4gICAgcmV0dXJuIHRoaXMudGFzaztcbiAgfVxuXG4gIC8qKlxuICAgKiBTY2hlZHVsZSB0YXNrIGNvbnRpbnVhdGlvbiBhZnRlciB0aGUgZ2l2ZW4gKG9wdGlvbmFsKSBkZWxheS5cbiAgICogQHBhcmFtIG9wdF9kZWxheSBvcHRpb25hbCBkZWxheSBpbiBtaWxsaXNlY29uZHMuXG4gICAqL1xuICBzY2hlZHVsZShyZXN1bHQ6IFQsIG9wdF9kZWxheT86IG51bWJlcikge1xuICAgIHRoaXMucmVzdWx0ID0gcmVzdWx0O1xuICAgIHRoaXMudGFzay5zY2hlZHVsZXIuc2NoZWR1bGUodGhpcywgb3B0X2RlbGF5KTtcbiAgfVxuXG4gIHJlc3VtZUludGVybmFsKCk6IGJvb2xlYW4ge1xuICAgIGNvbnN0IHRhc2sgPSB0aGlzLnRhc2s7XG4gICAgdGhpcy50YXNrID0gbnVsbDtcbiAgICBpZiAodGFzayAmJiB0YXNrLmNvbnRpbnVhdGlvbiA9PSB0aGlzKSB7XG4gICAgICB0YXNrLmNvbnRpbnVhdGlvbiA9IG51bGw7XG4gICAgICBjb25zdCBzYXZlZFRhc2sgPSBwcml2YXRlQ3VycmVudFRhc2s7XG4gICAgICBwcml2YXRlQ3VycmVudFRhc2sgPSB0YXNrO1xuICAgICAgdGFzay50b3AuZmluaXNoKHRoaXMucmVzdWx0KTtcbiAgICAgIHByaXZhdGVDdXJyZW50VGFzayA9IHNhdmVkVGFzaztcbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cblxuICAvKipcbiAgICogQ2FuY2VsIGNvbnRpbnVhdGlvblxuICAgKi9cbiAgY2FuY2VsKCkge1xuICAgIHRoaXMuY2FuY2VsZWQgPSB0cnVlO1xuICB9XG59XG5cbi8qKlxuICogQW4gYXN5bmNocm9ub3VzLCB0aW1lLXNsaWNlZCB0YXNrLlxuICovXG5leHBvcnQgY2xhc3MgVGFzayB7XG4gIGNhbGxiYWNrczogKCgpID0+IHZvaWQpW10gPSBbXTtcbiAgZXhjZXB0aW9uOiBFcnJvciB8IG51bGwgPSBudWxsO1xuICBydW5uaW5nOiBib29sZWFuID0gdHJ1ZTtcbiAgcmVzdWx0OiBhbnkgPSBudWxsO1xuICB3YWl0VGFyZ2V0OiBzdHJpbmcgfCBudWxsID0gbnVsbDtcbiAgdG9wOiBGcmFtZTxhbnk+IHwgbnVsbCA9IG51bGw7XG4gIGNvbnRpbnVhdGlvbjogQ29udGludWF0aW9uPGFueT4gfCBudWxsID0gbnVsbDtcblxuICBjb25zdHJ1Y3RvcihwdWJsaWMgc2NoZWR1bGVyOiBTY2hlZHVsZXIsIHB1YmxpYyBuYW1lOiBzdHJpbmcpIHt9XG5cbiAgLyoqXG4gICAqIEByZXR1cm4gdGFzayBuYW1lLlxuICAgKi9cbiAgZ2V0TmFtZSgpOiBzdHJpbmcge1xuICAgIHJldHVybiB0aGlzLm5hbWU7XG4gIH1cblxuICAvKipcbiAgICogQHBhcmFtIGVyciBleGNlcHRpb24gdG8gdGhyb3cgaW4gdGhlIHRhc2sncyBjb250ZXh0LlxuICAgKi9cbiAgaW50ZXJydXB0KGVycjogRXJyb3IpOiB2b2lkIHtcbiAgICB0aGlzLnJhaXNlKGVyciB8fCBuZXcgRXJyb3IoXCJFX1RBU0tfSU5URVJSVVBUXCIpKTtcbiAgICBpZiAodGhpcyAhPT0gcHJpdmF0ZUN1cnJlbnRUYXNrICYmIHRoaXMuY29udGludWF0aW9uKSB7XG4gICAgICAvLyBibG9ja2VkIG9uIHNvbWV0aGluZ1xuICAgICAgdGhpcy5jb250aW51YXRpb24uY2FuY2VsKCk7XG4gICAgICBjb25zdCBjb250aW51YXRpb24gPSBuZXcgQ29udGludWF0aW9uKHRoaXMpO1xuICAgICAgdGhpcy53YWl0VGFyZ2V0ID0gXCJpbnRlcnJ1cHRcIjtcbiAgICAgIHRoaXMuY29udGludWF0aW9uID0gY29udGludWF0aW9uO1xuICAgICAgdGhpcy5zY2hlZHVsZXIuc2NoZWR1bGUoY29udGludWF0aW9uKTtcbiAgICB9XG4gIH1cblxuICAvKipcbiAgICogQHJldHVybiB0aGlzIHRhc2sncyBzY2hlZHVsZXIuXG4gICAqL1xuICBnZXRTY2hlZHVsZXIoKTogU2NoZWR1bGVyIHtcbiAgICByZXR1cm4gdGhpcy5zY2hlZHVsZXI7XG4gIH1cblxuICAvKipcbiAgICogQHJldHVybiB0cnVlIGlmIHRhc2sgaXMgc3RpbGwgcnVubmluZy5cbiAgICovXG4gIGlzUnVubmluZygpOiBib29sZWFuIHtcbiAgICByZXR1cm4gdGhpcy5ydW5uaW5nO1xuICB9XG5cbiAgLyoqXG4gICAqIFJlZ2lzdGVyIGEgY2FsbGJhY2sgdG8gYmUgY2FsbGVkIHdoZW4gdGhlIHRhc2sgaXMgZG9uZS4gQ2FsbGJhY2sgaXMgbm90XG4gICAqIGV4ZWN1dGVkIGluIGFueSB0YXNrIGNvbnRleHQuIE11bHRpcGxlIGNhbGxiYWNrcyBjYW4gYmUgcmVnaXN0ZXJlZCBhbmRcbiAgICogdGhleSB3aWxsIGJlIGNhbGxlZCBpbiB0aGUgcmVnaXN0cmF0aW9uIG9yZGVyLlxuICAgKi9cbiAgd2hlbkRvbmUoY2FsbGJhY2s6ICgpID0+IHZvaWQpOiB2b2lkIHtcbiAgICB0aGlzLmNhbGxiYWNrcy5wdXNoKGNhbGxiYWNrKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBXYWl0IGZvciB0YXNrIHRvIGZpbmlzaCAoZnJvbSBhbm90aGVyIHRhc2spLlxuICAgKi9cbiAgam9pbigpOiBSZXN1bHQ8YW55PiB7XG4gICAgY29uc3QgZnJhbWUgPSBuZXdGcmFtZTxhbnk+KFwiVGFzay5qb2luXCIpO1xuICAgIGlmICghdGhpcy5ydW5uaW5nKSB7XG4gICAgICBmcmFtZS5maW5pc2godGhpcy5yZXN1bHQpO1xuICAgIH0gZWxzZSB7XG4gICAgICBjb25zdCBjb250aW51YXRpb24gPSBmcmFtZS5zdXNwZW5kKHRoaXMpO1xuICAgICAgdGhpcy53aGVuRG9uZSgoKSA9PiB7XG4gICAgICAgIGNvbnRpbnVhdGlvbi5zY2hlZHVsZSh0aGlzLnJlc3VsdCk7XG4gICAgICB9KTtcbiAgICB9XG4gICAgcmV0dXJuIGZyYW1lLnJlc3VsdCgpO1xuICB9XG5cbiAgLyoqXG4gICAqIFVud2luZCB0aGUgc3RhY2suIFdlIGhhdmUgdHdvIHN0YWNrczogYXN5bmMgKG1haW50YWluZWQgYnkgZnJhbWVcbiAgICogcGFyZW50IGxpbmspIGFuZCBzeW5jIChyZWd1bGFyIEphdmFTY3JpcHQgc3RhY2spLlxuICAgKi9cbiAgdW53aW5kKCkge1xuICAgIC8vIFdlIGhhdmUgYSBzZXF1ZW5jZSBvZiBmcmFtZXMgb24gdGhlIHN0YWNrLlxuICAgIHdoaWxlICh0aGlzLnRvcCAmJiAhdGhpcy50b3AuaGFuZGxlcikge1xuICAgICAgdGhpcy50b3AgPSB0aGlzLnRvcC5wYXJlbnQ7XG4gICAgfVxuICAgIGlmICh0aGlzLnRvcCAmJiB0aGlzLnRvcC5oYW5kbGVyICYmIHRoaXMuZXhjZXB0aW9uKSB7XG4gICAgICAvLyBmb3VuZCBhIGhhbmRsZXJcbiAgICAgIGNvbnN0IGVyciA9IHRoaXMuZXhjZXB0aW9uO1xuICAgICAgdGhpcy5leGNlcHRpb24gPSBudWxsO1xuICAgICAgdGhpcy50b3AuaGFuZGxlcih0aGlzLnRvcCwgZXJyKTtcbiAgICB9IGVsc2Uge1xuICAgICAgaWYgKHRoaXMuZXhjZXB0aW9uKSB7XG4gICAgICAgIExvZ2dpbmcubG9nZ2VyLmVycm9yKFxuICAgICAgICAgIHRoaXMuZXhjZXB0aW9uLFxuICAgICAgICAgIFwiVW5oYW5kbGVkIGV4Y2VwdGlvbiBpbiB0YXNrXCIsXG4gICAgICAgICAgdGhpcy5uYW1lLFxuICAgICAgICApO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIHJhaXNlKGVycjogRXJyb3IsIG9wdF9mcmFtZT86IEZyYW1lPGFueT4pOiB2b2lkIHtcbiAgICB0aGlzLmZpbGxTdGFjayhlcnIpO1xuICAgIGlmIChvcHRfZnJhbWUpIHtcbiAgICAgIGxldCBmID0gdGhpcy50b3A7XG4gICAgICB3aGlsZSAoZiAmJiBmICE9IG9wdF9mcmFtZSkge1xuICAgICAgICBmID0gZi5wYXJlbnQ7XG4gICAgICB9XG4gICAgICBpZiAoZiA9PSBvcHRfZnJhbWUpIHtcbiAgICAgICAgdGhpcy50b3AgPSBmO1xuICAgICAgfVxuICAgIH1cbiAgICB0aGlzLmV4Y2VwdGlvbiA9IGVycjtcbiAgICB0aGlzLnVud2luZCgpO1xuICB9XG5cbiAgLyoqXG4gICAqIEZpbGwgdGhlIHN0YWNrIHRyYWNlIGluIHRoZSBleGNlcHRpb25cbiAgICogQHBhcmFtIGVyciBleGNlcHRpb25cbiAgICovXG4gIGZpbGxTdGFjayhlcnI6IEVycm9yKSB7XG4gICAgbGV0IG91dCA9IGVycltcImZyYW1lVHJhY2VcIl07XG4gICAgaWYgKCFvdXQpIHtcbiAgICAgIG91dCA9IGVycltcInN0YWNrXCJdID8gYCR7ZXJyW1wic3RhY2tcIl19XFxuXFx0LS0tLSBhc3luYyAtLS1cXG5gIDogXCJcIjtcbiAgICAgIGZvciAobGV0IGYgPSB0aGlzLnRvcDsgZjsgZiA9IGYucGFyZW50KSB7XG4gICAgICAgIG91dCArPSBcIlxcdFwiO1xuICAgICAgICBvdXQgKz0gZi5nZXROYW1lKCk7XG4gICAgICAgIG91dCArPSBcIlxcblwiO1xuICAgICAgfVxuICAgICAgZXJyW1wiZnJhbWVUcmFjZVwiXSA9IG91dDtcbiAgICB9XG4gIH1cbn1cblxuLyoqXG4gKiBAdGVtcGxhdGUgVFxuICovXG5leHBvcnQgY2xhc3MgU3luY1Jlc3VsdEltcGw8VD4gaW1wbGVtZW50cyBSZXN1bHQ8VD4ge1xuICBjb25zdHJ1Y3RvcihwdWJsaWMgdmFsdWU6IFQpIHt9XG5cbiAgLyoqXG4gICAqIEBvdmVycmlkZVxuICAgKi9cbiAgdGhlbihjYWxsYmFjazogKFQ6IGFueSkgPT4gdm9pZCkge1xuICAgIGNhbGxiYWNrKHRoaXMudmFsdWUpO1xuICB9XG5cbiAgLyoqXG4gICAqIEBvdmVycmlkZVxuICAgKi9cbiAgdGhlbkFzeW5jPFQxPihjYWxsYmFjazogKHAxOiBUKSA9PiBSZXN1bHQ8VDE+KSB7XG4gICAgcmV0dXJuIGNhbGxiYWNrKHRoaXMudmFsdWUpO1xuICB9XG5cbiAgLyoqXG4gICAqIEBvdmVycmlkZVxuICAgKi9cbiAgdGhlblJldHVybjxUMT4ocmVzdWx0OiBUMSkge1xuICAgIHJldHVybiBuZXcgU3luY1Jlc3VsdEltcGwocmVzdWx0KTtcbiAgfVxuXG4gIC8qKlxuICAgKiBAb3ZlcnJpZGVcbiAgICovXG4gIHRoZW5GaW5pc2goZnJhbWU6IEZyYW1lPFQ+KTogdm9pZCB7XG4gICAgZnJhbWUuZmluaXNoKHRoaXMudmFsdWUpO1xuICB9XG5cbiAgLyoqXG4gICAqIEBvdmVycmlkZVxuICAgKi9cbiAgaXNQZW5kaW5nKCk6IGJvb2xlYW4ge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuXG4gIC8qKlxuICAgKiBAb3ZlcnJpZGVcbiAgICovXG4gIGdldCgpOiBUIHwgbnVsbCB7XG4gICAgcmV0dXJuIHRoaXMudmFsdWU7XG4gIH1cbn1cblxuLyoqXG4gKiBAdGVtcGxhdGUgVFxuICovXG5leHBvcnQgY2xhc3MgUmVzdWx0SW1wbDxUPiBpbXBsZW1lbnRzIFJlc3VsdDxUPiB7XG4gIGNvbnN0cnVjdG9yKHB1YmxpYyByZWFkb25seSBmcmFtZTogRnJhbWU8VD4pIHt9XG5cbiAgLyoqXG4gICAqIEBvdmVycmlkZVxuICAgKi9cbiAgdGhlbihjYWxsYmFjazogKHAxOiBUKSA9PiB2b2lkKTogdm9pZCB7XG4gICAgdGhpcy5mcmFtZS50aGVuKGNhbGxiYWNrKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBAb3ZlcnJpZGVcbiAgICovXG4gIHRoZW5Bc3luYzxUMT4oY2FsbGJhY2s6IChwMTogVCkgPT4gUmVzdWx0PFQxPik6IFJlc3VsdDxUMT4ge1xuICAgIGlmICh0aGlzLmlzUGVuZGluZygpKSB7XG4gICAgICAvLyB0aGVuQXN5bmMgaXMgc3BlY2lhbCwgZG8gdGhlIHRyaWNrIHdpdGggdGhlIGNvbnRleHRcbiAgICAgIGNvbnN0IGZyYW1lID0gbmV3IEZyYW1lPFQgfCBUMT4oXG4gICAgICAgIHRoaXMuZnJhbWUudGFzayxcbiAgICAgICAgdGhpcy5mcmFtZS5wYXJlbnQsXG4gICAgICAgIFwiQXN5bmNSZXN1bHQudGhlbkFzeW5jXCIsXG4gICAgICApO1xuICAgICAgZnJhbWUuc3RhdGUgPSBGcmFtZVN0YXRlLkFDVElWRTtcbiAgICAgIHRoaXMuZnJhbWUucGFyZW50ID0gZnJhbWUgYXMgRnJhbWU8VD47XG4gICAgICB0aGlzLmZyYW1lLnRoZW4oKHJlczEpID0+IHtcbiAgICAgICAgY2FsbGJhY2socmVzMSkudGhlbigocmVzMikgPT4ge1xuICAgICAgICAgIGZyYW1lLmZpbmlzaChyZXMyKTtcbiAgICAgICAgfSk7XG4gICAgICB9KTtcbiAgICAgIHJldHVybiBmcmFtZS5yZXN1bHQoKSBhcyBSZXN1bHQ8VDE+O1xuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gY2FsbGJhY2sodGhpcy5mcmFtZS5yZXMpO1xuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAgKiBAb3ZlcnJpZGVcbiAgICovXG4gIHRoZW5SZXR1cm48VDE+KHJlc3VsdDogVDEpIHtcbiAgICBpZiAodGhpcy5pc1BlbmRpbmcoKSkge1xuICAgICAgcmV0dXJuIHRoaXMudGhlbkFzeW5jKCgpID0+IG5ldyBTeW5jUmVzdWx0SW1wbChyZXN1bHQpKTtcbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuIG5ldyBTeW5jUmVzdWx0SW1wbChyZXN1bHQpO1xuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAgKiBAb3ZlcnJpZGVcbiAgICovXG4gIHRoZW5GaW5pc2goZnJhbWU6IEZyYW1lPFQ+KTogdm9pZCB7XG4gICAgaWYgKHRoaXMuaXNQZW5kaW5nKCkpIHtcbiAgICAgIHRoaXMudGhlbigocmVzKSA9PiB7XG4gICAgICAgIGZyYW1lLmZpbmlzaChyZXMpO1xuICAgICAgfSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGZyYW1lLmZpbmlzaCh0aGlzLmZyYW1lLnJlcyk7XG4gICAgfVxuICB9XG5cbiAgLyoqXG4gICAqIEBvdmVycmlkZVxuICAgKi9cbiAgaXNQZW5kaW5nKCk6IGJvb2xlYW4ge1xuICAgIHJldHVybiB0aGlzLmZyYW1lLnN0YXRlID09IEZyYW1lU3RhdGUuQUNUSVZFO1xuICB9XG5cbiAgLyoqXG4gICAqIEBvdmVycmlkZVxuICAgKi9cbiAgZ2V0KCk6IFQgfCBudWxsIHtcbiAgICBpZiAodGhpcy5pc1BlbmRpbmcoKSkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKFwiUmVzdWx0IGlzIHBlbmRpbmdcIik7XG4gICAgfVxuICAgIHJldHVybiB0aGlzLmZyYW1lLnJlcztcbiAgfVxufVxuXG4vKipcbiAqIEFzeW5jaHJvbm91cyBleGVjdXRpb24gZnJhbWUuIENvcnJlc3BvbmRzIHRvIGFuIGFzeW5jaHJvbm91cyBmdW5jdGlvblxuICogaW52b2NhdGlvbi5cbiAqIEB0ZW1wbGF0ZSBUXG4gKi9cbmV4cG9ydCBjbGFzcyBGcmFtZTxUPiB7XG4gIHJlczogVCA9IG51bGw7XG4gIHN0YXRlOiBGcmFtZVN0YXRlO1xuICBjYWxsYmFjazogKChwMTogYW55KSA9PiB2b2lkKSB8IG51bGwgPSBudWxsO1xuICBoYW5kbGVyOiAoKHAxOiBGcmFtZTxhbnk+LCBwMjogRXJyb3IpID0+IHZvaWQpIHwgbnVsbCA9IG51bGw7XG5cbiAgY29uc3RydWN0b3IocHVibGljIHRhc2s6IFRhc2ssIHB1YmxpYyBwYXJlbnQ6IEZyYW1lPFQ+LCBwdWJsaWMgbmFtZTogc3RyaW5nKSB7XG4gICAgdGhpcy5zdGF0ZSA9IEZyYW1lU3RhdGUuSU5JVDtcbiAgfVxuXG4gIHByaXZhdGUgY2hlY2tFbnZpcm9ubWVudCgpOiB2b2lkIHtcbiAgICBpZiAoIXByaXZhdGVDdXJyZW50VGFzaykge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKFwiRl9UQVNLX05PX0NPTlRFWFRcIik7XG4gICAgfVxuICAgIGlmICh0aGlzICE9PSBwcml2YXRlQ3VycmVudFRhc2sudG9wKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoXCJGX1RBU0tfTk9UX1RPUF9GUkFNRVwiKTtcbiAgICB9XG4gIH1cblxuICAvKipcbiAgICogQHJldHVybiB0byBiZSByZXR1cm5lZCBhcyB0aGlzIGFzeW5jaHJvbm91cyBmdW5jdGlvbiByZXR1cm4gdmFsdWUuXG4gICAqL1xuICByZXN1bHQoKTogUmVzdWx0PFQ+IHtcbiAgICByZXR1cm4gbmV3IFJlc3VsdEltcGw8VD4odGhpcyk7XG4gIH1cblxuICBmaW5pc2gocmVzOiBUKSB7XG4gICAgdGhpcy5jaGVja0Vudmlyb25tZW50KCk7XG4gICAgaWYgKHByaXZhdGVDdXJyZW50VGFzayAmJiAhcHJpdmF0ZUN1cnJlbnRUYXNrLmV4Y2VwdGlvbikge1xuICAgICAgdGhpcy5yZXMgPSByZXM7XG4gICAgfVxuICAgIHRoaXMuc3RhdGUgPSBGcmFtZVN0YXRlLkZJTklTSEVEO1xuICAgIGNvbnN0IGZyYW1lID0gdGhpcy5wYXJlbnQ7XG4gICAgaWYgKHByaXZhdGVDdXJyZW50VGFzaykge1xuICAgICAgcHJpdmF0ZUN1cnJlbnRUYXNrLnRvcCA9IGZyYW1lO1xuICAgIH1cbiAgICBpZiAodGhpcy5jYWxsYmFjaykge1xuICAgICAgdHJ5IHtcbiAgICAgICAgdGhpcy5jYWxsYmFjayhyZXMpO1xuICAgICAgfSBjYXRjaCAoZXJyKSB7XG4gICAgICAgIHRoaXMudGFzay5yYWlzZShlcnIsIGZyYW1lKTtcbiAgICAgIH1cblxuICAgICAgLy8gY2FsbGJhY2sgd2FzIGNhbGxlZFxuICAgICAgdGhpcy5zdGF0ZSA9IEZyYW1lU3RhdGUuREVBRDtcbiAgICB9XG4gIH1cblxuICBnZXRUYXNrKCk6IFRhc2sge1xuICAgIHJldHVybiB0aGlzLnRhc2s7XG4gIH1cblxuICAvKipcbiAgICogQHJldHVybiBmcmFtZSBuYW1lLlxuICAgKi9cbiAgZ2V0TmFtZSgpOiBzdHJpbmcge1xuICAgIHJldHVybiB0aGlzLm5hbWU7XG4gIH1cblxuICBnZXRTY2hlZHVsZXIoKTogU2NoZWR1bGVyIHtcbiAgICByZXR1cm4gdGhpcy50YXNrLnNjaGVkdWxlcjtcbiAgfVxuXG4gIHRoZW4oY2FsbGJhY2s6IChwMTogVCkgPT4gdm9pZCk6IHZvaWQge1xuICAgIC8vIGxlZ2FsIHRvIGNhbGwgd2hlbiBjdXJyZW50VGFzayBpcyBudWxsXG4gICAgc3dpdGNoICh0aGlzLnN0YXRlKSB7XG4gICAgICBjYXNlIEZyYW1lU3RhdGUuQUNUSVZFOlxuICAgICAgICBpZiAodGhpcy5jYWxsYmFjaykge1xuICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcIkZfVEFTS19GUkFNRV9BTFJFQURZX0hBU19DQUxMQkFDS1wiKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICB0aGlzLmNhbGxiYWNrID0gY2FsbGJhY2s7XG4gICAgICAgIH1cbiAgICAgICAgYnJlYWs7XG4gICAgICBjYXNlIEZyYW1lU3RhdGUuRklOSVNIRUQ6IHtcbiAgICAgICAgY29uc3QgdGFzayA9IHRoaXMudGFzaztcbiAgICAgICAgY29uc3QgZnJhbWUgPSB0aGlzLnBhcmVudDtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICBjYWxsYmFjayh0aGlzLnJlcyk7XG4gICAgICAgICAgdGhpcy5zdGF0ZSA9IEZyYW1lU3RhdGUuREVBRDtcbiAgICAgICAgfSBjYXRjaCAoZXJyKSB7XG4gICAgICAgICAgdGhpcy5zdGF0ZSA9IEZyYW1lU3RhdGUuREVBRDtcbiAgICAgICAgICB0YXNrLnJhaXNlKGVyciwgZnJhbWUpO1xuICAgICAgICB9XG4gICAgICAgIGJyZWFrO1xuICAgICAgfVxuICAgICAgY2FzZSBGcmFtZVN0YXRlLkRFQUQ6XG4gICAgICAgIHRocm93IG5ldyBFcnJvcihcIkZfVEFTS19ERUFEX0ZSQU1FXCIpO1xuICAgICAgZGVmYXVsdDpcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKGBGX1RBU0tfVU5FWFBFQ1RFRF9GUkFNRV9TVEFURSAke3RoaXMuc3RhdGV9YCk7XG4gICAgfVxuICB9XG5cbiAgLyoqXG4gICAqIElmIHRoaXMgdGFzayB3YXMgZXhlY3V0ZWQgbG9uZ2VyIHRoYW4gdGFzaydzIHNsaWNlIHBhcmFtZXRlci5cbiAgICogQHJldHVybiBob2xkcyB0cnVlXG4gICAqL1xuICB0aW1lU2xpY2UoKTogUmVzdWx0PGJvb2xlYW4+IHtcbiAgICBjb25zdCBmcmFtZSA9IG5ld0ZyYW1lPGJvb2xlYW4+KFwiRnJhbWUudGltZVNsaWNlXCIpO1xuICAgIGNvbnN0IHNjaGVkdWxlciA9IGZyYW1lLmdldFNjaGVkdWxlcigpO1xuICAgIGlmIChzY2hlZHVsZXIuaXNUaW1lU2xpY2VPdmVyKCkpIHtcbiAgICAgIExvZ2dpbmcubG9nZ2VyLmRlYnVnKFwiLS0gdGltZSBzbGljZSAtLVwiKTtcbiAgICAgIGZyYW1lLnN1c3BlbmQoKS5zY2hlZHVsZSh0cnVlKTtcbiAgICB9IGVsc2Uge1xuICAgICAgZnJhbWUuZmluaXNoKHRydWUpO1xuICAgIH1cbiAgICByZXR1cm4gZnJhbWUucmVzdWx0KCk7XG4gIH1cblxuICAvKipcbiAgICogWWllbGQgdG8gb3RoZXIgdGFza3MgZm9yIHRoZSBzcGVjaWZpZWQgdGltZS5cbiAgICogQHBhcmFtIGRlbGF5IGluIG1pbGxpc2Vjb25kcy5cbiAgICogQHJldHVybiBob2xkcyB0cnVlXG4gICAqL1xuICBzbGVlcChkZWxheTogbnVtYmVyKTogUmVzdWx0PGJvb2xlYW4+IHtcbiAgICBjb25zdCBmcmFtZSA9IG5ld0ZyYW1lPGJvb2xlYW4+KFwiRnJhbWUuc2xlZXBcIik7XG4gICAgZnJhbWUuc3VzcGVuZCgpLnNjaGVkdWxlKHRydWUsIGRlbGF5KTtcbiAgICByZXR1cm4gZnJhbWUucmVzdWx0KCk7XG4gIH1cblxuICAvKipcbiAgICogUmVwZWF0ZWRseSBleGVjdXRlIHRoZSBnaXZlbiBmdW5jdGlvbiBhc3luY2hyb25vdXNseSB1bnRpbCBpdCByZXR1cm5zXG4gICAqIGZhbHNlLlxuICAgKiBAcmV0dXJuIGhvbGRzIHRydWUuXG4gICAqL1xuICBsb29wKGZ1bmM6ICgpID0+IFJlc3VsdDxib29sZWFuPik6IFJlc3VsdDxib29sZWFuPiB7XG4gICAgY29uc3QgZnJhbWUgPSBuZXdGcmFtZTxib29sZWFuPihcIkZyYW1lLmxvb3BcIik7XG4gICAgY29uc3Qgc3RlcCA9IChtb3JlKSA9PiB7XG4gICAgICB0cnkge1xuICAgICAgICB3aGlsZSAobW9yZSkge1xuICAgICAgICAgIGNvbnN0IHJlc3VsdCA9IGZ1bmMoKTtcbiAgICAgICAgICBpZiAocmVzdWx0LmlzUGVuZGluZygpKSB7XG4gICAgICAgICAgICByZXN1bHQudGhlbihzdGVwKTtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgcmVzdWx0LnRoZW4oKG0pID0+IHtcbiAgICAgICAgICAgICAgbW9yZSA9IG07XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgZnJhbWUuZmluaXNoKHRydWUpO1xuICAgICAgfSBjYXRjaCAoZXJyKSB7XG4gICAgICAgIGZyYW1lLnRhc2sucmFpc2UoZXJyLCBmcmFtZSk7XG4gICAgICB9XG4gICAgfTtcbiAgICBzdGVwKHRydWUpO1xuICAgIHJldHVybiBmcmFtZS5yZXN1bHQoKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBTaW1pbGFyIHRvIGxvb3AoKSwgYnV0IHByb3ZpZGVzIGEgRnJhbWUgZm9yIGxvb3AgYm9keSBmdW5jdGlvbi5cbiAgICogQHJldHVybiBob2xkcyB0cnVlLlxuICAgKi9cbiAgbG9vcFdpdGhGcmFtZShmdW5jOiAocDE6IExvb3BCb2R5RnJhbWUpID0+IHZvaWQpOiBSZXN1bHQ8Ym9vbGVhbj4ge1xuICAgIGNvbnN0IHRhc2sgPSBwcml2YXRlQ3VycmVudFRhc2s7XG4gICAgaWYgKCF0YXNrKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoXCJFX1RBU0tfTk9fQ09OVEVYVFwiKTtcbiAgICB9XG4gICAgcmV0dXJuIHRoaXMubG9vcCgoKSA9PiB7XG4gICAgICBsZXQgcmVzdWx0OiBSZXN1bHQ8Ym9vbGVhbj47XG4gICAgICBkbyB7XG4gICAgICAgIGNvbnN0IGZyYW1lID0gbmV3IExvb3BCb2R5RnJhbWUodGFzayBhcyBUYXNrLCB0YXNrLnRvcCk7XG4gICAgICAgIHRhc2sudG9wID0gZnJhbWU7XG4gICAgICAgIGZyYW1lLnN0YXRlID0gRnJhbWVTdGF0ZS5BQ1RJVkU7XG4gICAgICAgIGZ1bmMoZnJhbWUpO1xuICAgICAgICByZXN1bHQgPSBmcmFtZS5yZXN1bHQoKTtcbiAgICAgIH0gd2hpbGUgKCFyZXN1bHQuaXNQZW5kaW5nKCkgJiYgcmVzdWx0LmdldCgpKTtcbiAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfSk7XG4gIH1cblxuICBzdXNwZW5kKG9wdF93YWl0VGFyZ2V0PzogYW55KTogQ29udGludWF0aW9uPFQ+IHtcbiAgICB0aGlzLmNoZWNrRW52aXJvbm1lbnQoKTtcbiAgICBpZiAodGhpcy50YXNrLmNvbnRpbnVhdGlvbikge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKFwiRV9UQVNLX0FMUkVBRFlfU1VTUEVOREVEXCIpO1xuICAgIH1cbiAgICBjb25zdCBjb250aW51YXRpb246IENvbnRpbnVhdGlvbjxUPiA9IG5ldyBDb250aW51YXRpb24odGhpcy50YXNrKTtcbiAgICB0aGlzLnRhc2suY29udGludWF0aW9uID0gY29udGludWF0aW9uO1xuICAgIHByaXZhdGVDdXJyZW50VGFzayA9IG51bGw7XG4gICAgdGhpcy50YXNrLndhaXRUYXJnZXQgPSBvcHRfd2FpdFRhcmdldCB8fCBudWxsO1xuICAgIHJldHVybiBjb250aW51YXRpb247XG4gIH1cbn1cblxuZXhwb3J0IGNsYXNzIExvb3BCb2R5RnJhbWUgZXh0ZW5kcyBGcmFtZTxib29sZWFuPiB7XG4gIGNvbnN0cnVjdG9yKHRhc2s6IFRhc2ssIHBhcmVudDogRnJhbWU8Ym9vbGVhbj4pIHtcbiAgICBzdXBlcih0YXNrLCBwYXJlbnQsIFwibG9vcFwiKTtcbiAgfVxuXG4gIGNvbnRpbnVlTG9vcCgpOiB2b2lkIHtcbiAgICB0aGlzLmZpbmlzaCh0cnVlKTtcbiAgfVxuXG4gIGJyZWFrTG9vcCgpOiB2b2lkIHtcbiAgICB0aGlzLmZpbmlzaChmYWxzZSk7XG4gIH1cbn1cblxuZXhwb3J0IGNsYXNzIEV2ZW50SXRlbSB7XG4gIG5leHQ6IEV2ZW50SXRlbSA9IG51bGw7XG5cbiAgY29uc3RydWN0b3IocHVibGljIGV2ZW50OiBCYXNlLkV2ZW50KSB7fVxufVxuXG4vKipcbiAqIEFuIGNsYXNzIHRvIGxpc3RlbiB0byBldmVucyBhbmQgcHJlc2VudCB0aGVtIGFzIGEgcmVhZGFibGUgYXN5bmNocm9ub3VzXG4gKiBzdHJlYW0gdG8gdGFza3MuXG4gKi9cbmV4cG9ydCBjbGFzcyBFdmVudFNvdXJjZSB7XG4gIGNvbnRpbnVhdGlvbjogQ29udGludWF0aW9uPGJvb2xlYW4+ID0gbnVsbDtcbiAgbGlzdGVuZXJzOiB7XG4gICAgdGFyZ2V0OiBCYXNlLkV2ZW50VGFyZ2V0O1xuICAgIHR5cGU6IHN0cmluZztcbiAgICBsaXN0ZW5lcjogQmFzZS5FdmVudExpc3RlbmVyO1xuICB9W10gPSBbXTtcbiAgaGVhZDogRXZlbnRJdGVtO1xuICB0YWlsOiBFdmVudEl0ZW07XG5cbiAgY29uc3RydWN0b3IoKSB7XG4gICAgdGhpcy5oZWFkID0gbmV3IEV2ZW50SXRlbShudWxsKTtcbiAgICB0aGlzLnRhaWwgPSB0aGlzLmhlYWQ7XG4gIH1cblxuICAvKipcbiAgICogQXR0YWNoZXMgYXMgYW4gZXZlbnQgbGlzdGVuZXIgdG8gYW4gRXZlbnRUYXJnZXQuXG4gICAqL1xuICBhdHRhY2goXG4gICAgdGFyZ2V0OiBCYXNlLkV2ZW50VGFyZ2V0LFxuICAgIHR5cGU6IHN0cmluZyxcbiAgICBvcHRfcHJldmVudERlZmF1bHQ/OiBib29sZWFuLFxuICApOiB2b2lkIHtcbiAgICBjb25zdCBsaXN0ZW5lciA9IChldmVudCkgPT4ge1xuICAgICAgaWYgKG9wdF9wcmV2ZW50RGVmYXVsdCkge1xuICAgICAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgfVxuICAgICAgaWYgKHRoaXMudGFpbC5ldmVudCkge1xuICAgICAgICB0aGlzLnRhaWwubmV4dCA9IG5ldyBFdmVudEl0ZW0oZXZlbnQpO1xuICAgICAgICB0aGlzLnRhaWwgPSB0aGlzLnRhaWwubmV4dDtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHRoaXMudGFpbC5ldmVudCA9IGV2ZW50O1xuICAgICAgICBjb25zdCBjb250aW51YXRpb24gPSB0aGlzLmNvbnRpbnVhdGlvbjtcbiAgICAgICAgaWYgKGNvbnRpbnVhdGlvbikge1xuICAgICAgICAgIHRoaXMuY29udGludWF0aW9uID0gbnVsbDtcbiAgICAgICAgICBjb250aW51YXRpb24uc2NoZWR1bGUodHJ1ZSk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9O1xuICAgIHRhcmdldC5hZGRFdmVudExpc3RlbmVyKHR5cGUsIGxpc3RlbmVyLCBmYWxzZSk7XG4gICAgdGhpcy5saXN0ZW5lcnMucHVzaCh7IHRhcmdldCwgdHlwZSwgbGlzdGVuZXIgfSk7XG4gIH1cblxuICBkZXRhY2godGFyZ2V0OiBCYXNlLkV2ZW50VGFyZ2V0LCB0eXBlOiBzdHJpbmcpOiB2b2lkIHtcbiAgICBsZXQgaSA9IDA7XG4gICAgbGV0IGl0ZW06IHtcbiAgICAgIHRhcmdldDogQmFzZS5TaW1wbGVFdmVudFRhcmdldDtcbiAgICAgIHR5cGU6IHN0cmluZztcbiAgICAgIGxpc3RlbmVyOiBCYXNlLkV2ZW50TGlzdGVuZXI7XG4gICAgfSA9IG51bGw7XG4gICAgd2hpbGUgKGkgPCB0aGlzLmxpc3RlbmVycy5sZW5ndGgpIHtcbiAgICAgIGl0ZW0gPSB0aGlzLmxpc3RlbmVyc1tpXTtcbiAgICAgIGlmIChpdGVtLnR5cGUgPT0gdHlwZSAmJiBpdGVtLnRhcmdldCA9PT0gdGFyZ2V0KSB7XG4gICAgICAgIHRoaXMubGlzdGVuZXJzLnNwbGljZShpLCAxKTtcbiAgICAgICAgaXRlbS50YXJnZXQucmVtb3ZlRXZlbnRMaXN0ZW5lcihpdGVtLnR5cGUsIGl0ZW0ubGlzdGVuZXIsIGZhbHNlKTtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuICAgICAgaSsrO1xuICAgIH1cbiAgICB0aHJvdyBuZXcgRXJyb3IoXCJFX1RBU0tfRVZFTlRfU09VUkNFX05PVF9BVFRBQ0hFRFwiKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBSZWFkIG5leHQgZGlzcGF0Y2hlZCBldmVudCwgYmxvY2tpbmcgdGhlIGN1cnJlbnQgdGFzayBpZiBuZWVkZWQuXG4gICAqL1xuICBuZXh0RXZlbnQoKTogUmVzdWx0PEJhc2UuRXZlbnQ+IHtcbiAgICBjb25zdCBmcmFtZTogRnJhbWU8QmFzZS5FdmVudD4gPSBuZXdGcmFtZShcIkV2ZW50U291cmNlLm5leHRFdmVudFwiKTtcbiAgICBjb25zdCByZWFkRXZlbnQgPSAoKSA9PiB7XG4gICAgICBpZiAodGhpcy5oZWFkLmV2ZW50KSB7XG4gICAgICAgIGNvbnN0IGV2ZW50ID0gdGhpcy5oZWFkLmV2ZW50O1xuICAgICAgICBpZiAodGhpcy5oZWFkLm5leHQpIHtcbiAgICAgICAgICB0aGlzLmhlYWQgPSB0aGlzLmhlYWQubmV4dDtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICB0aGlzLmhlYWQuZXZlbnQgPSBudWxsO1xuICAgICAgICB9XG4gICAgICAgIGZyYW1lLmZpbmlzaChldmVudCk7XG4gICAgICB9IGVsc2UgaWYgKHRoaXMuY29udGludWF0aW9uKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcihcIkVfVEFTS19FVkVOVF9TT1VSQ0VfT1RIRVJfVEFTS19XQUlUSU5HXCIpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgY29uc3QgZnJhbWVJbnRlcm5hbDogRnJhbWU8Ym9vbGVhbj4gPSBuZXdGcmFtZShcbiAgICAgICAgICBcIkV2ZW50U291cmNlLm5leHRFdmVudEludGVybmFsXCIsXG4gICAgICAgICk7XG4gICAgICAgIHRoaXMuY29udGludWF0aW9uID0gZnJhbWVJbnRlcm5hbC5zdXNwZW5kKHRoaXMpO1xuICAgICAgICBmcmFtZUludGVybmFsLnJlc3VsdCgpLnRoZW4ocmVhZEV2ZW50KTtcbiAgICAgIH1cbiAgICB9O1xuICAgIHJlYWRFdmVudCgpO1xuICAgIHJldHVybiBmcmFtZS5yZXN1bHQoKTtcbiAgfVxufVxuIiwiLyoqXG4gKiBDb3B5cmlnaHQgMjAxMyBHb29nbGUsIEluYy5cbiAqIENvcHlyaWdodCAyMDE1IFRyaW0tbWFya3MgSW5jLlxuICogQ29weXJpZ2h0IDIwMTkgVml2bGlvc3R5bGUgRm91bmRhdGlvblxuICpcbiAqIFZpdmxpb3N0eWxlLmpzIGlzIGZyZWUgc29mdHdhcmU6IHlvdSBjYW4gcmVkaXN0cmlidXRlIGl0IGFuZC9vciBtb2RpZnlcbiAqIGl0IHVuZGVyIHRoZSB0ZXJtcyBvZiB0aGUgR05VIEFmZmVybyBHZW5lcmFsIFB1YmxpYyBMaWNlbnNlIGFzIHB1Ymxpc2hlZCBieVxuICogdGhlIEZyZWUgU29mdHdhcmUgRm91bmRhdGlvbiwgZWl0aGVyIHZlcnNpb24gMyBvZiB0aGUgTGljZW5zZSwgb3JcbiAqIChhdCB5b3VyIG9wdGlvbikgYW55IGxhdGVyIHZlcnNpb24uXG4gKlxuICogVml2bGlvc3R5bGUuanMgaXMgZGlzdHJpYnV0ZWQgaW4gdGhlIGhvcGUgdGhhdCBpdCB3aWxsIGJlIHVzZWZ1bCxcbiAqIGJ1dCBXSVRIT1VUIEFOWSBXQVJSQU5UWTsgd2l0aG91dCBldmVuIHRoZSBpbXBsaWVkIHdhcnJhbnR5IG9mXG4gKiBNRVJDSEFOVEFCSUxJVFkgb3IgRklUTkVTUyBGT1IgQSBQQVJUSUNVTEFSIFBVUlBPU0UuICBTZWUgdGhlXG4gKiBHTlUgQWZmZXJvIEdlbmVyYWwgUHVibGljIExpY2Vuc2UgZm9yIG1vcmUgZGV0YWlscy5cbiAqXG4gKiBZb3Ugc2hvdWxkIGhhdmUgcmVjZWl2ZWQgYSBjb3B5IG9mIHRoZSBHTlUgQWZmZXJvIEdlbmVyYWwgUHVibGljIExpY2Vuc2VcbiAqIGFsb25nIHdpdGggVml2bGlvc3R5bGUuanMuICBJZiBub3QsIHNlZSA8aHR0cDovL3d3dy5nbnUub3JnL2xpY2Vuc2VzLz4uXG4gKlxuICogQGZpbGVvdmVydmlldyBUYXNrVXRpbCAtIFV0aWxpdGllcyBhc3luY2hyb25vdXMgZXhlY3V0aW9uIGFuZCBjb29wZXJhdGl2ZVxuICogbXVsdGl0YXNraW5nLlxuICovXG5pbXBvcnQgKiBhcyBCYXNlIGZyb20gXCIuL2Jhc2VcIjtcbmltcG9ydCAqIGFzIExvZ2dpbmcgZnJvbSBcIi4vbG9nZ2luZ1wiO1xuaW1wb3J0ICogYXMgVGFzayBmcm9tIFwiLi90YXNrXCI7XG5cbi8qKlxuICogQSBjbGFzcyB0aGF0IGNhbiBmZXRjaCBvciBjb21wdXRlIGEgcmVzb3VyY2UgdGhhdCBtYXkgYmUgbmVlZGVkIGJ5IG11bHRpcGxlXG4gKiB0YXNrcy4gVGhlIGZpcnN0IHRpbWUgYSByZXNvdXJjZSBpcyByZXF1ZXN0ZWQsIGl0IGlzIGZldGNoZWQgYW5kIHRoZW4gZ2l2ZW5cbiAqIHRvIGV2ZXJ5b25lIHJlcXVlc3RpbmcgaXQuXG4gKiBAdGVtcGxhdGUgVFxuICogQHBhcmFtIGZldGNoIGZ1bmN0aW9uIHRoYXQgZmV0Y2hlcy9jb21wdXRlc1xuICogICAgYSByZXNvdXJjZTsgaXQgd2lsbCBiZSBydW4gaW4gYSBzZXBhcmF0ZSB0YXNrLlxuICovXG5leHBvcnQgY2xhc3MgRmV0Y2hlcjxUPiB7XG4gIG5hbWU6IHN0cmluZztcbiAgYXJyaXZlZDogYm9vbGVhbiA9IGZhbHNlO1xuICByZXNvdXJjZTogVCA9IG51bGw7XG4gIHRhc2s6IFRhc2suVGFzayA9IG51bGw7XG4gIHBpZ2d5YmFja3M6ICgocDE6IGFueSkgPT4gdm9pZClbXSB8IG51bGwgPSBbXTtcblxuICBjb25zdHJ1Y3RvcihwdWJsaWMgcmVhZG9ubHkgZmV0Y2g6ICgpID0+IFRhc2suUmVzdWx0PFQ+LCBvcHRfbmFtZT86IHN0cmluZykge1xuICAgIHRoaXMubmFtZSA9IG9wdF9uYW1lO1xuICB9XG5cbiAgLyoqXG4gICAqIFN0YXJ0IGZldGNoaW5nL2NvbXB1dGluZyBhIHJlc291cmNlLCBkb24ndCBibG9jayBjdXJyZW50IHRhc2suXG4gICAqL1xuICBzdGFydCgpOiB2b2lkIHtcbiAgICBpZiAoIXRoaXMudGFzaykge1xuICAgICAgdGhpcy50YXNrID0gVGFzay5jdXJyZW50VGFzaygpXG4gICAgICAgIC5nZXRTY2hlZHVsZXIoKVxuICAgICAgICAucnVuKCgpID0+IHtcbiAgICAgICAgICBjb25zdCBmcmFtZSA9IFRhc2submV3RnJhbWUoXCJGZXRjaGVyLnJ1blwiKTtcbiAgICAgICAgICB0aGlzLmZldGNoKCkudGhlbigocmVzb3VyY2UpID0+IHtcbiAgICAgICAgICAgIGNvbnN0IHBpZ2dpYmFja3MgPSB0aGlzLnBpZ2d5YmFja3M7XG4gICAgICAgICAgICB0aGlzLmFycml2ZWQgPSB0cnVlO1xuICAgICAgICAgICAgdGhpcy5yZXNvdXJjZSA9IHJlc291cmNlO1xuICAgICAgICAgICAgdGhpcy50YXNrID0gbnVsbDtcbiAgICAgICAgICAgIHRoaXMucGlnZ3liYWNrcyA9IFtdO1xuICAgICAgICAgICAgaWYgKHBpZ2dpYmFja3MpIHtcbiAgICAgICAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBwaWdnaWJhY2tzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICAgIHBpZ2dpYmFja3NbaV0ocmVzb3VyY2UpO1xuICAgICAgICAgICAgICAgIH0gY2F0Y2ggKGVycikge1xuICAgICAgICAgICAgICAgICAgTG9nZ2luZy5sb2dnZXIuZXJyb3IoZXJyLCBcIkVycm9yOlwiKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGZyYW1lLmZpbmlzaChyZXNvdXJjZSk7XG4gICAgICAgICAgfSk7XG4gICAgICAgICAgcmV0dXJuIGZyYW1lLnJlc3VsdCgpO1xuICAgICAgICB9LCB0aGlzLm5hbWUpO1xuICAgIH1cbiAgfVxuXG4gIHBpZ2d5YmFjayhmbjogKHAxOiBUKSA9PiB2b2lkKTogdm9pZCB7XG4gICAgaWYgKHRoaXMuYXJyaXZlZCkge1xuICAgICAgZm4odGhpcy5yZXNvdXJjZSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHRoaXMucGlnZ3liYWNrcy5wdXNoKGZuKTtcbiAgICB9XG4gIH1cblxuICAvKipcbiAgICogRmV0Y2hlcyB0aGUgcmVzb3VyY2UsIHdhaXRzIGZvciBpdCB0byBhcnJpdmUgaWYgaXQgaXMgYWxyZWFkeSBiZWluZ1xuICAgKiBmZXRjaGVkLlxuICAgKi9cbiAgZ2V0KCk6IFRhc2suUmVzdWx0PFQ+IHtcbiAgICBpZiAodGhpcy5hcnJpdmVkKSB7XG4gICAgICByZXR1cm4gVGFzay5uZXdSZXN1bHQodGhpcy5yZXNvdXJjZSk7XG4gICAgfVxuICAgIHRoaXMuc3RhcnQoKTtcbiAgICByZXR1cm4gdGhpcy50YXNrLmpvaW4oKSBhcyBUYXNrLlJlc3VsdDxUPjtcbiAgfVxuXG4gIGhhc0Fycml2ZWQoKTogYm9vbGVhbiB7XG4gICAgcmV0dXJuIHRoaXMuYXJyaXZlZDtcbiAgfVxufVxuXG4vKipcbiAqIFdhaXQgZm9yIGFsbCBGZXRjaGVyIG9iamVjdHMgaW4gdGhlIGFycmF5IHRvIGFycml2ZVxuICovXG5leHBvcnQgY29uc3Qgd2FpdEZvckZldGNoZXJzID0gPFQ+KFxuICBmZXRjaGVyczogRmV0Y2hlcjxUPltdLFxuKTogVGFzay5SZXN1bHQ8Ym9vbGVhbj4gPT4ge1xuICBpZiAoZmV0Y2hlcnMubGVuZ3RoID09IDApIHtcbiAgICByZXR1cm4gVGFzay5uZXdSZXN1bHQodHJ1ZSk7XG4gIH1cbiAgaWYgKGZldGNoZXJzLmxlbmd0aCA9PSAxKSB7XG4gICAgcmV0dXJuIGZldGNoZXJzWzBdLmdldCgpLnRoZW5SZXR1cm4odHJ1ZSk7XG4gIH1cbiAgY29uc3QgZnJhbWUgPSBUYXNrLm5ld0ZyYW1lPGJvb2xlYW4+KFwid2FpdEZvckZldGNoZXNcIik7XG4gIGxldCBpID0gMDtcbiAgZnJhbWVcbiAgICAubG9vcCgoKSA9PiB7XG4gICAgICB3aGlsZSAoaSA8IGZldGNoZXJzLmxlbmd0aCkge1xuICAgICAgICBjb25zdCBmZXRjaGVyID0gZmV0Y2hlcnNbaSsrXTtcbiAgICAgICAgaWYgKCFmZXRjaGVyLmhhc0Fycml2ZWQoKSkge1xuICAgICAgICAgIHJldHVybiBmZXRjaGVyLmdldCgpLnRoZW5SZXR1cm4odHJ1ZSk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIHJldHVybiBUYXNrLm5ld1Jlc3VsdChmYWxzZSk7XG4gICAgfSlcbiAgICAudGhlbigoKSA9PiB7XG4gICAgICBmcmFtZS5maW5pc2godHJ1ZSk7XG4gICAgfSk7XG4gIHJldHVybiBmcmFtZS5yZXN1bHQoKTtcbn07XG5cbi8qKlxuICogQHJldHVybiBob2xkaW5nIGV2ZW50IHR5cGUgKGxvYWQvZXJyb3IvYWJvcnQpXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBsb2FkRWxlbWVudChlbGVtOiBFbGVtZW50LCBzcmM6IHN0cmluZyk6IEZldGNoZXI8c3RyaW5nPiB7XG4gIGxldCB3aWR0aDogc3RyaW5nIHwgbnVsbCA9IG51bGw7XG4gIGxldCBoZWlnaHQ6IHN0cmluZyB8IG51bGwgPSBudWxsO1xuICBpZiAoZWxlbS5sb2NhbE5hbWUgPT0gXCJpbWdcIikge1xuICAgIHdpZHRoID0gZWxlbS5nZXRBdHRyaWJ1dGUoXCJ3aWR0aFwiKTtcbiAgICBoZWlnaHQgPSBlbGVtLmdldEF0dHJpYnV0ZShcImhlaWdodFwiKTtcbiAgfVxuICBjb25zdCBmZXRjaGVyID0gbmV3IEZldGNoZXIoKCkgPT4ge1xuICAgIGNvbnN0IGZyYW1lOiBUYXNrLkZyYW1lPHN0cmluZz4gPSBUYXNrLm5ld0ZyYW1lKFwibG9hZEltYWdlXCIpO1xuICAgIGNvbnN0IGNvbnRpbnVhdGlvbiA9IGZyYW1lLnN1c3BlbmQoZWxlbSk7XG4gICAgbGV0IGRvbmUgPSBmYWxzZTtcbiAgICBjb25zdCBoYW5kbGVyID0gKGV2dDogRXZlbnQpID0+IHtcbiAgICAgIGlmIChkb25lKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGRvbmUgPSB0cnVlO1xuICAgICAgfVxuICAgICAgaWYgKGVsZW0ubG9jYWxOYW1lID09IFwiaW1nXCIpIHtcbiAgICAgICAgLy8gSUUgcHV0cyB0aGVzZSBib2d1cyBhdHRyaWJ1dGVzLCBldmVuIGlmIHRoZXkgd2VyZSBub3QgcHJlc2VudFxuICAgICAgICBpZiAoIXdpZHRoKSB7XG4gICAgICAgICAgZWxlbS5yZW1vdmVBdHRyaWJ1dGUoXCJ3aWR0aFwiKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoIWhlaWdodCkge1xuICAgICAgICAgIGVsZW0ucmVtb3ZlQXR0cmlidXRlKFwiaGVpZ2h0XCIpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICBjb250aW51YXRpb24uc2NoZWR1bGUoZXZ0ID8gZXZ0LnR5cGUgOiBcInRpbWVvdXRcIik7XG4gICAgfTtcbiAgICBlbGVtLmFkZEV2ZW50TGlzdGVuZXIoXCJsb2FkXCIsIGhhbmRsZXIsIGZhbHNlKTtcbiAgICBlbGVtLmFkZEV2ZW50TGlzdGVuZXIoXCJlcnJvclwiLCBoYW5kbGVyLCBmYWxzZSk7XG4gICAgZWxlbS5hZGRFdmVudExpc3RlbmVyKFwiYWJvcnRcIiwgaGFuZGxlciwgZmFsc2UpO1xuICAgIGlmIChlbGVtLm5hbWVzcGFjZVVSSSA9PSBCYXNlLk5TLlNWRykge1xuICAgICAgZWxlbS5zZXRBdHRyaWJ1dGVOUyhCYXNlLk5TLlhMSU5LLCBcInhsaW5rOmhyZWZcIiwgc3JjKTtcblxuICAgICAgLy8gU1ZHIGhhbmRsZXJzIGFyZSBub3QgcmVsaWFibGVcbiAgICAgIHNldFRpbWVvdXQoaGFuZGxlciwgMzAwKTtcbiAgICB9IGVsc2Uge1xuICAgICAgKGVsZW0gYXMgYW55KS5zcmMgPSBzcmM7XG4gICAgfVxuICAgIHJldHVybiBmcmFtZS5yZXN1bHQoKTtcbiAgfSwgYGxvYWRFbGVtZW50ICR7c3JjfWApO1xuICBmZXRjaGVyLnN0YXJ0KCk7XG4gIHJldHVybiBmZXRjaGVyO1xufVxuIiwiLyoqXG4gKiBDb3B5cmlnaHQgMjAxMyBHb29nbGUsIEluYy5cbiAqIENvcHlyaWdodCAyMDE1IFRyaW0tbWFya3MgSW5jLlxuICogQ29weXJpZ2h0IDIwMTkgVml2bGlvc3R5bGUgRm91bmRhdGlvblxuICpcbiAqIFZpdmxpb3N0eWxlLmpzIGlzIGZyZWUgc29mdHdhcmU6IHlvdSBjYW4gcmVkaXN0cmlidXRlIGl0IGFuZC9vciBtb2RpZnlcbiAqIGl0IHVuZGVyIHRoZSB0ZXJtcyBvZiB0aGUgR05VIEFmZmVybyBHZW5lcmFsIFB1YmxpYyBMaWNlbnNlIGFzIHB1Ymxpc2hlZCBieVxuICogdGhlIEZyZWUgU29mdHdhcmUgRm91bmRhdGlvbiwgZWl0aGVyIHZlcnNpb24gMyBvZiB0aGUgTGljZW5zZSwgb3JcbiAqIChhdCB5b3VyIG9wdGlvbikgYW55IGxhdGVyIHZlcnNpb24uXG4gKlxuICogVml2bGlvc3R5bGUuanMgaXMgZGlzdHJpYnV0ZWQgaW4gdGhlIGhvcGUgdGhhdCBpdCB3aWxsIGJlIHVzZWZ1bCxcbiAqIGJ1dCBXSVRIT1VUIEFOWSBXQVJSQU5UWTsgd2l0aG91dCBldmVuIHRoZSBpbXBsaWVkIHdhcnJhbnR5IG9mXG4gKiBNRVJDSEFOVEFCSUxJVFkgb3IgRklUTkVTUyBGT1IgQSBQQVJUSUNVTEFSIFBVUlBPU0UuICBTZWUgdGhlXG4gKiBHTlUgQWZmZXJvIEdlbmVyYWwgUHVibGljIExpY2Vuc2UgZm9yIG1vcmUgZGV0YWlscy5cbiAqXG4gKiBZb3Ugc2hvdWxkIGhhdmUgcmVjZWl2ZWQgYSBjb3B5IG9mIHRoZSBHTlUgQWZmZXJvIEdlbmVyYWwgUHVibGljIExpY2Vuc2VcbiAqIGFsb25nIHdpdGggVml2bGlvc3R5bGUuanMuICBJZiBub3QsIHNlZSA8aHR0cDovL3d3dy5nbnUub3JnL2xpY2Vuc2VzLz4uXG4gKlxuICogQGZpbGVvdmVydmlldyBOZXQgLSBGZXRjaCByZXNvdXJjZSBmcm9tIGEgVVJMLlxuICovXG5pbXBvcnQgKiBhcyBCYXNlIGZyb20gXCIuL2Jhc2VcIjtcbmltcG9ydCAqIGFzIExvZ2dpbmcgZnJvbSBcIi4vbG9nZ2luZ1wiO1xuaW1wb3J0ICogYXMgVGFzayBmcm9tIFwiLi90YXNrXCI7XG5pbXBvcnQgKiBhcyBUYXNrVXRpbCBmcm9tIFwiLi90YXNrLXV0aWxcIjtcbmltcG9ydCB7IE5ldCwgWG1sRG9jIH0gZnJvbSBcIi4vdHlwZXNcIjtcbmltcG9ydCB7IFVzZXJBZ2VudFhtbCB9IGZyb20gXCIuL2Fzc2V0c1wiO1xuXG4vKipcbiAqIEBlbnVtIHtzdHJpbmd9XG4gKi9cbmV4cG9ydCBlbnVtIFhNTEh0dHBSZXF1ZXN0UmVzcG9uc2VUeXBlIHtcbiAgREVGQVVMVCA9IFwiXCIsXG4gIEFSUkFZQlVGRkVSID0gXCJhcnJheWJ1ZmZlclwiLFxuICBCTE9CID0gXCJibG9iXCIsXG4gIERPQ1VNRU5UID0gXCJkb2N1bWVudFwiLFxuICBKU09OID0gXCJqc29uXCIsXG4gIFRFWFQgPSBcInRleHRcIixcbn1cblxuZXhwb3J0IHR5cGUgUmVzcG9uc2UgPSBOZXQuUmVzcG9uc2U7XG5cbmV4cG9ydCBmdW5jdGlvbiBhamF4KFxuICB1cmw6IHN0cmluZyxcbiAgb3B0X3R5cGU/OiBYTUxIdHRwUmVxdWVzdFJlc3BvbnNlVHlwZSxcbiAgb3B0X21ldGhvZD86IHN0cmluZyxcbiAgb3B0X2RhdGE/OiBzdHJpbmcsXG4gIG9wdF9jb250ZW50VHlwZT86IHN0cmluZyxcbik6IFRhc2suUmVzdWx0PFJlc3BvbnNlPiB7XG4gIGNvbnN0IGZyYW1lOiBUYXNrLkZyYW1lPFJlc3BvbnNlPiA9IFRhc2submV3RnJhbWUoXCJhamF4XCIpO1xuICBjb25zdCByZXF1ZXN0ID0gbmV3IFhNTEh0dHBSZXF1ZXN0KCk7XG4gIGNvbnN0IGNvbnRpbnVhdGlvbiA9IGZyYW1lLnN1c3BlbmQocmVxdWVzdCk7XG4gIGNvbnN0IHJlc3BvbnNlOiBSZXNwb25zZSA9IHtcbiAgICBzdGF0dXM6IDAsXG4gICAgc3RhdHVzVGV4dDogXCJcIixcbiAgICB1cmwsXG4gICAgY29udGVudFR5cGU6IG51bGwsXG4gICAgcmVzcG9uc2VUZXh0OiBudWxsLFxuICAgIHJlc3BvbnNlWE1MOiBudWxsLFxuICAgIHJlc3BvbnNlQmxvYjogbnVsbCxcbiAgfTtcbiAgcmVxdWVzdC5vcGVuKG9wdF9tZXRob2QgfHwgXCJHRVRcIiwgdXJsLCB0cnVlKTtcbiAgaWYgKG9wdF90eXBlKSB7XG4gICAgcmVxdWVzdC5yZXNwb25zZVR5cGUgPSBvcHRfdHlwZTtcbiAgfVxuICByZXF1ZXN0Lm9ucmVhZHlzdGF0ZWNoYW5nZSA9ICgpID0+IHtcbiAgICBpZiAocmVxdWVzdC5yZWFkeVN0YXRlID09PSA0KSB7XG4gICAgICByZXNwb25zZS5zdGF0dXMgPSByZXF1ZXN0LnN0YXR1cztcbiAgICAgIHJlc3BvbnNlLnN0YXR1c1RleHQgPVxuICAgICAgICByZXF1ZXN0LnN0YXR1c1RleHQgfHwgKHJlcXVlc3Quc3RhdHVzID09IDQwNCAmJiBcIk5vdCBGb3VuZFwiKSB8fCBcIlwiO1xuICAgICAgaWYgKHJlc3BvbnNlLnN0YXR1cyA9PSAyMDAgfHwgcmVzcG9uc2Uuc3RhdHVzID09IDApIHtcbiAgICAgICAgaWYgKFxuICAgICAgICAgICghb3B0X3R5cGUgfHwgb3B0X3R5cGUgPT09IFhNTEh0dHBSZXF1ZXN0UmVzcG9uc2VUeXBlLkRPQ1VNRU5UKSAmJlxuICAgICAgICAgIHJlcXVlc3QucmVzcG9uc2VYTUwgJiZcbiAgICAgICAgICByZXF1ZXN0LnJlc3BvbnNlWE1MLmRvY3VtZW50RWxlbWVudC5sb2NhbE5hbWUgIT0gXCJwYXJzZXJlcnJvclwiXG4gICAgICAgICkge1xuICAgICAgICAgIHJlc3BvbnNlLnJlc3BvbnNlWE1MID0gcmVxdWVzdC5yZXNwb25zZVhNTDtcbiAgICAgICAgICByZXNwb25zZS5jb250ZW50VHlwZSA9IChyZXF1ZXN0LnJlc3BvbnNlWE1MIGFzIGFueSkuY29udGVudFR5cGU7XG4gICAgICAgIH0gZWxzZSBpZiAoXG4gICAgICAgICAgKCFvcHRfdHlwZSB8fCBvcHRfdHlwZSA9PT0gWE1MSHR0cFJlcXVlc3RSZXNwb25zZVR5cGUuRE9DVU1FTlQpICYmXG4gICAgICAgICAgcmVxdWVzdC5yZXNwb25zZSBpbnN0YW5jZW9mIEhUTUxEb2N1bWVudFxuICAgICAgICApIHtcbiAgICAgICAgICByZXNwb25zZS5yZXNwb25zZVhNTCA9IHJlcXVlc3QucmVzcG9uc2U7XG4gICAgICAgICAgcmVzcG9uc2UuY29udGVudFR5cGUgPSAocmVxdWVzdC5yZXNwb25zZSBhcyBhbnkpLmNvbnRlbnRUeXBlO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGNvbnN0IHRleHQgPSByZXF1ZXN0LnJlc3BvbnNlO1xuICAgICAgICAgIGlmIChcbiAgICAgICAgICAgICghb3B0X3R5cGUgfHwgb3B0X3R5cGUgPT09IFhNTEh0dHBSZXF1ZXN0UmVzcG9uc2VUeXBlLlRFWFQpICYmXG4gICAgICAgICAgICB0eXBlb2YgdGV4dCA9PSBcInN0cmluZ1wiXG4gICAgICAgICAgKSB7XG4gICAgICAgICAgICByZXNwb25zZS5yZXNwb25zZVRleHQgPSB0ZXh0O1xuICAgICAgICAgIH0gZWxzZSBpZiAoIXRleHQpIHtcbiAgICAgICAgICAgIExvZ2dpbmcubG9nZ2VyLndhcm4oXCJVbmV4cGVjdGVkIGVtcHR5IHN1Y2Nlc3MgcmVzcG9uc2UgZm9yXCIsIHVybCk7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGlmICh0eXBlb2YgdGV4dCA9PSBcInN0cmluZ1wiKSB7XG4gICAgICAgICAgICAgIHJlc3BvbnNlLnJlc3BvbnNlQmxvYiA9IG1ha2VCbG9iKFt0ZXh0XSk7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICByZXNwb25zZS5yZXNwb25zZUJsb2IgPSB0ZXh0IGFzIEJsb2I7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICAgIGNvbnN0IGNvbnRlbnRUeXBlSGVhZGVyID0gcmVxdWVzdC5nZXRSZXNwb25zZUhlYWRlcihcIkNvbnRlbnQtVHlwZVwiKTtcbiAgICAgICAgICBpZiAoY29udGVudFR5cGVIZWFkZXIpIHtcbiAgICAgICAgICAgIHJlc3BvbnNlLmNvbnRlbnRUeXBlID0gY29udGVudFR5cGVIZWFkZXIucmVwbGFjZSgvKC4qKTsuKiQvLCBcIiQxXCIpO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgY29udGludWF0aW9uLnNjaGVkdWxlKHJlc3BvbnNlKTtcbiAgICB9XG4gIH07XG4gIHRyeSB7XG4gICAgaWYgKG9wdF9kYXRhKSB7XG4gICAgICByZXF1ZXN0LnNldFJlcXVlc3RIZWFkZXIoXG4gICAgICAgIFwiQ29udGVudC1UeXBlXCIsXG4gICAgICAgIG9wdF9jb250ZW50VHlwZSB8fCBcInRleHQvcGxhaW47IGNoYXJzZXQ9VVRGLThcIixcbiAgICAgICk7XG4gICAgICByZXF1ZXN0LnNlbmQob3B0X2RhdGEpO1xuICAgIH0gZWxzZSB7XG4gICAgICBpZiAoXG4gICAgICAgIC9eZmlsZTp8Xmh0dHBzPzpcXC9cXC9bXi9dK1xcLmdpdGh1YnVzZXJjb250ZW50XFwuY29tfFxcLih4aHRtbHx4aHR8b3BmKSQvaS50ZXN0KFxuICAgICAgICAgIHVybCxcbiAgICAgICAgKVxuICAgICAgKSB7XG4gICAgICAgIC8vIEZpbGUgb3IgR2l0SHViIHJhdyBVUkwgb3IgLnhodChtbCkgb3IgLm9wZlxuICAgICAgICBpZiAoXG4gICAgICAgICAgL1xcL2Fvem9yYWJ1bmtvXFwvW14vXStcXC9jYXJkc1xcL1teL10rXFwvZmlsZXNcXC9bXi8uXStcXC5odG1sJC8udGVzdCh1cmwpXG4gICAgICAgICkge1xuICAgICAgICAgIC8vIEFvem9yYWJ1bmtvJ3MgKFgpSFRNTCBzdXBwb3J0XG4gICAgICAgICAgcmVxdWVzdC5vdmVycmlkZU1pbWVUeXBlKFwidGV4dC9odG1sOyBjaGFyc2V0PVNoaWZ0X0pJU1wiKTtcbiAgICAgICAgfSBlbHNlIGlmICgvXFwuKGh0bWx8aHRtKSQvaS50ZXN0KHVybCkpIHtcbiAgICAgICAgICByZXF1ZXN0Lm92ZXJyaWRlTWltZVR5cGUoXCJ0ZXh0L2h0bWw7IGNoYXJzZXQ9VVRGLThcIik7XG4gICAgICAgIH0gZWxzZSBpZiAoL1xcLih4aHRtbHx4aHR8eG1sfG9wZikkL2kudGVzdCh1cmwpKSB7XG4gICAgICAgICAgcmVxdWVzdC5vdmVycmlkZU1pbWVUeXBlKFwiYXBwbGljYXRpb24veG1sOyBjaGFyc2V0PVVURi04XCIpO1xuICAgICAgICB9IGVsc2UgaWYgKC9cXC4odHh0fGNzcykkL2kudGVzdCh1cmwpKSB7XG4gICAgICAgICAgcmVxdWVzdC5vdmVycmlkZU1pbWVUeXBlKFwidGV4dC9wbGFpbjsgY2hhcnNldD1VVEYtOFwiKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAvLyBmYWxsYmFjayB0byBIVE1MXG4gICAgICAgICAgcmVxdWVzdC5vdmVycmlkZU1pbWVUeXBlKFwidGV4dC9odG1sOyBjaGFyc2V0PVVURi04XCIpO1xuICAgICAgICB9XG4gICAgICB9IGVsc2UgaWYgKC9eZGF0YTosKDx8JTNjKS9pLnRlc3QodXJsKSkge1xuICAgICAgICByZXF1ZXN0Lm92ZXJyaWRlTWltZVR5cGUoXCJ0ZXh0L2h0bWw7IGNoYXJzZXQ9VVRGLThcIik7XG4gICAgICB9IGVsc2UgaWYgKC9eZGF0YTosL2kudGVzdCh1cmwpKSB7XG4gICAgICAgIHJlcXVlc3Qub3ZlcnJpZGVNaW1lVHlwZShcInRleHQvcGxhaW47IGNoYXJzZXQ9VVRGLThcIik7XG4gICAgICB9XG4gICAgICByZXF1ZXN0LnNlbmQobnVsbCk7XG4gICAgfVxuICB9IGNhdGNoIChlKSB7XG4gICAgTG9nZ2luZy5sb2dnZXIud2FybihlLCBgRXJyb3IgZmV0Y2hpbmcgJHt1cmx9YCk7XG4gICAgY29udGludWF0aW9uLnNjaGVkdWxlKHJlc3BvbnNlKTtcbiAgfVxuICByZXR1cm4gZnJhbWUucmVzdWx0KCk7XG59XG5cbi8qKlxuICogQHJldHVybiBCbG9iXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBtYWtlQmxvYihcbiAgcGFydHM6IChzdHJpbmcgfCBCbG9iIHwgQXJyYXlCdWZmZXIgfCBBcnJheUJ1ZmZlclZpZXcpW10sXG4gIG9wdF90eXBlPzogc3RyaW5nLFxuKTogYW55IHtcbiAgY29uc3QgdHlwZSA9IG9wdF90eXBlIHx8IFwiYXBwbGljYXRpb24vb2N0ZXQtc3RyZWFtXCI7XG4gIGNvbnN0IGJ1aWxkZXJDdHIgPSB3aW5kb3dbXCJXZWJLaXRCbG9iQnVpbGRlclwiXSB8fCB3aW5kb3dbXCJNU0Jsb2JCdWlsZGVyXCJdOyAvLyBkZXByZWNhdGVkXG4gIGlmIChidWlsZGVyQ3RyKSB7XG4gICAgY29uc3QgYnVpbGRlciA9IG5ldyBidWlsZGVyQ3RyKCk7XG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCBwYXJ0cy5sZW5ndGg7IGkrKykge1xuICAgICAgYnVpbGRlci5hcHBlbmQocGFydHNbaV0pO1xuICAgIH1cbiAgICByZXR1cm4gYnVpbGRlci5nZXRCbG9iKHR5cGUpO1xuICB9XG4gIHJldHVybiBuZXcgQmxvYihwYXJ0cywgeyB0eXBlIH0pO1xufVxuXG4vKipcbiAqIEByZXR1cm4gVGFzay5SZXN1bHQuPEFycmF5QnVmZmVyPlxuICovXG5leHBvcnQgZnVuY3Rpb24gcmVhZEJsb2IoYmxvYjogQmxvYik6IGFueSB7XG4gIGNvbnN0IGZyYW1lOiBUYXNrLkZyYW1lPEFycmF5QnVmZmVyPiA9IFRhc2submV3RnJhbWUoXCJyZWFkQmxvYlwiKTtcbiAgY29uc3QgZmlsZVJlYWRlciA9IG5ldyBGaWxlUmVhZGVyKCk7XG4gIGNvbnN0IGNvbnRpbnVhdGlvbiA9IGZyYW1lLnN1c3BlbmQoZmlsZVJlYWRlcik7XG4gIGZpbGVSZWFkZXIuYWRkRXZlbnRMaXN0ZW5lcihcbiAgICBcImxvYWRcIixcbiAgICAoKSA9PiB7XG4gICAgICBjb250aW51YXRpb24uc2NoZWR1bGUoZmlsZVJlYWRlci5yZXN1bHQgYXMgQXJyYXlCdWZmZXIpO1xuICAgIH0sXG4gICAgZmFsc2UsXG4gICk7XG4gIGZpbGVSZWFkZXIucmVhZEFzQXJyYXlCdWZmZXIoYmxvYik7XG4gIHJldHVybiBmcmFtZS5yZXN1bHQoKTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHJldm9rZU9iamVjdFVSTCh1cmw6IHN0cmluZyk6IHZvaWQge1xuICAod2luZG93W1wiVVJMXCJdIHx8IHdpbmRvd1tcIndlYmtpdFVSTFwiXSkucmV2b2tlT2JqZWN0VVJMKHVybCk7XG59XG5cbi8qKlxuICogQHJldHVybiB1cmxcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGNyZWF0ZU9iamVjdFVSTChibG9iOiBCbG9iKTogc3RyaW5nIHtcbiAgcmV0dXJuICh3aW5kb3dbXCJVUkxcIl0gfHwgd2luZG93W1wid2Via2l0VVJMXCJdKS5jcmVhdGVPYmplY3RVUkwoYmxvYik7XG59XG5cbi8qKlxuICogQHRlbXBsYXRlIFJlc291cmNlXG4gKi9cbmV4cG9ydCBjbGFzcyBSZXNvdXJjZVN0b3JlPFJlc291cmNlPiBpbXBsZW1lbnRzIE5ldC5SZXNvdXJjZVN0b3JlPFJlc291cmNlPiB7XG4gIHJlc291cmNlczogeyBba2V5OiBzdHJpbmddOiBSZXNvdXJjZSB9ID0ge307XG4gIGZldGNoZXJzOiB7IFtrZXk6IHN0cmluZ106IFRhc2tVdGlsLkZldGNoZXI8UmVzb3VyY2U+IH0gPSB7fTtcblxuICBjb25zdHJ1Y3RvcihcbiAgICBwdWJsaWMgcmVhZG9ubHkgcGFyc2VyOiAoXG4gICAgICBwMTogUmVzcG9uc2UsXG4gICAgICBwMjogUmVzb3VyY2VTdG9yZTxSZXNvdXJjZT4sXG4gICAgKSA9PiBUYXNrLlJlc3VsdDxSZXNvdXJjZT4sXG4gICAgcHVibGljIHJlYWRvbmx5IHR5cGU6IFhNTEh0dHBSZXF1ZXN0UmVzcG9uc2VUeXBlLFxuICApIHt9XG5cbiAgLyoqXG4gICAqIEByZXR1cm4gcmVzb3VyY2UgZm9yIHRoZSBnaXZlbiBVUkxcbiAgICovXG4gIGxvYWQoXG4gICAgdXJsOiBzdHJpbmcsXG4gICAgb3B0X3JlcXVpcmVkPzogYm9vbGVhbixcbiAgICBvcHRfbWVzc2FnZT86IHN0cmluZyxcbiAgKTogVGFzay5SZXN1bHQ8UmVzb3VyY2U+IHtcbiAgICB1cmwgPSBCYXNlLnN0cmlwRnJhZ21lbnQodXJsKTtcbiAgICBjb25zdCByZXNvdXJjZSA9IHRoaXMucmVzb3VyY2VzW3VybF07XG4gICAgaWYgKHR5cGVvZiByZXNvdXJjZSAhPSBcInVuZGVmaW5lZFwiKSB7XG4gICAgICByZXR1cm4gVGFzay5uZXdSZXN1bHQocmVzb3VyY2UpO1xuICAgIH1cbiAgICByZXR1cm4gdGhpcy5mZXRjaCh1cmwsIG9wdF9yZXF1aXJlZCwgb3B0X21lc3NhZ2UpLmdldCgpO1xuICB9XG5cbiAgcHJpdmF0ZSBmZXRjaElubmVyKFxuICAgIHVybDogc3RyaW5nLFxuICAgIG9wdF9yZXF1aXJlZD86IGJvb2xlYW4sXG4gICAgb3B0X21lc3NhZ2U/OiBzdHJpbmcsXG4gICk6IFRhc2suUmVzdWx0PFJlc291cmNlPiB7XG4gICAgY29uc3QgZnJhbWU6IFRhc2suRnJhbWU8UmVzb3VyY2U+ID0gVGFzay5uZXdGcmFtZShcImZldGNoXCIpO1xuXG4gICAgLy8gSGFjayBmb3IgVE9DVmlldy5zaG93VE9DKClcbiAgICBjb25zdCBpc1RvY0JveCA9IHVybC5lbmRzV2l0aChcIj92aXYtdG9jLWJveFwiKTtcbiAgICBpZiAoaXNUb2NCb3gpIHtcbiAgICAgIHVybCA9IHVybC5yZXBsYWNlKFwiP3Zpdi10b2MtYm94XCIsIFwiXCIpO1xuICAgIH1cbiAgICBjb25zdCB1c2VyQWdlbnRYbWxVcmwgPSBCYXNlLnJlc29sdmVVUkwoXG4gICAgICBcInVzZXItYWdlbnQueG1sXCIsXG4gICAgICBCYXNlLnJlc291cmNlQmFzZVVSTCxcbiAgICApO1xuICAgIGNvbnN0IGlzVXNlckFnZW50WG1sID0gIWlzVG9jQm94ICYmIHVybCA9PT0gdXNlckFnZW50WG1sVXJsO1xuICAgIGlmIChpc1VzZXJBZ2VudFhtbCkge1xuICAgICAgLy8gQ2hhbmdlIFwidXNlci1hZ2VudC54bWxcIiBVUkwgdG8gZGF0YSBVUkxcbiAgICAgIHVybCA9IGBkYXRhOmFwcGxpY2F0aW9uL3htbCwke2VuY29kZVVSSUNvbXBvbmVudChVc2VyQWdlbnRYbWwpfWA7XG4gICAgfVxuXG4gICAgYWpheCh1cmwsIHRoaXMudHlwZSkudGhlbigocmVzcG9uc2UpID0+IHtcbiAgICAgIGlmIChyZXNwb25zZS5zdGF0dXMgPj0gNDAwKSB7XG4gICAgICAgIGlmIChvcHRfcmVxdWlyZWQpIHtcbiAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXG4gICAgICAgICAgICAob3B0X21lc3NhZ2UgfHwgYEZhaWxlZCB0byBmZXRjaCByZXF1aXJlZCByZXNvdXJjZTogJHt1cmx9YCkgK1xuICAgICAgICAgICAgICBgICgke3Jlc3BvbnNlLnN0YXR1c30ke1xuICAgICAgICAgICAgICAgIHJlc3BvbnNlLnN0YXR1c1RleHQgPyBcIiBcIiArIHJlc3BvbnNlLnN0YXR1c1RleHQgOiBcIlwiXG4gICAgICAgICAgICAgIH0pYCxcbiAgICAgICAgICApO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICBpZiAoaXNUb2NCb3gpIHtcbiAgICAgICAgLy8gSGFjayBmb3IgVE9DVmlldy5zaG93VE9DKClcbiAgICAgICAgdXJsICs9IFwiP3Zpdi10b2MtYm94XCI7XG4gICAgICAgIHJlc3BvbnNlLnVybCArPSBcIj92aXYtdG9jLWJveFwiO1xuICAgICAgfSBlbHNlIGlmIChpc1VzZXJBZ2VudFhtbCkge1xuICAgICAgICAvLyBSZXN0b3JlIFwidXNlci1hZ2VudC54bWxcIiBVUkxcbiAgICAgICAgcmVzcG9uc2UudXJsID0gdXJsID0gdXNlckFnZW50WG1sVXJsO1xuICAgICAgfVxuICAgICAgdGhpcy5wYXJzZXIocmVzcG9uc2UsIHRoaXMpLnRoZW4oKHJlc291cmNlKSA9PiB7XG4gICAgICAgIGRlbGV0ZSB0aGlzLmZldGNoZXJzW3VybF07XG4gICAgICAgIHRoaXMucmVzb3VyY2VzW3VybF0gPSByZXNvdXJjZTtcbiAgICAgICAgZnJhbWUuZmluaXNoKHJlc291cmNlKTtcbiAgICAgIH0pO1xuICAgIH0pO1xuICAgIHJldHVybiBmcmFtZS5yZXN1bHQoKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBAcmV0dXJuIGZldGNoZXIgZm9yIHRoZSByZXNvdXJjZSBmb3IgdGhlIGdpdmVuIFVSTFxuICAgKi9cbiAgZmV0Y2goXG4gICAgdXJsOiBzdHJpbmcsXG4gICAgb3B0X3JlcXVpcmVkPzogYm9vbGVhbixcbiAgICBvcHRfbWVzc2FnZT86IHN0cmluZyxcbiAgKTogVGFza1V0aWwuRmV0Y2hlcjxSZXNvdXJjZT4ge1xuICAgIHVybCA9IEJhc2Uuc3RyaXBGcmFnbWVudCh1cmwpO1xuICAgIGNvbnN0IHJlc291cmNlID0gdGhpcy5yZXNvdXJjZXNbdXJsXTtcbiAgICBpZiAocmVzb3VyY2UpIHtcbiAgICAgIHJldHVybiBudWxsO1xuICAgIH1cbiAgICBsZXQgZmV0Y2hlciA9IHRoaXMuZmV0Y2hlcnNbdXJsXTtcbiAgICBpZiAoIWZldGNoZXIpIHtcbiAgICAgIGZldGNoZXIgPSBuZXcgVGFza1V0aWwuRmV0Y2hlcihcbiAgICAgICAgKCkgPT4gdGhpcy5mZXRjaElubmVyKHVybCwgb3B0X3JlcXVpcmVkLCBvcHRfbWVzc2FnZSksXG4gICAgICAgIGBGZXRjaCAke3VybH1gLFxuICAgICAgKTtcbiAgICAgIHRoaXMuZmV0Y2hlcnNbdXJsXSA9IGZldGNoZXI7XG4gICAgICBmZXRjaGVyLnN0YXJ0KCk7XG4gICAgfVxuICAgIHJldHVybiBmZXRjaGVyO1xuICB9XG5cbiAgZ2V0KHVybDogc3RyaW5nKTogWG1sRG9jLlhNTERvY0hvbGRlciB7XG4gICAgY29uc3QgcmVzb3VyY2U6IHVua25vd24gPSB0aGlzLnJlc291cmNlc1tCYXNlLnN0cmlwRnJhZ21lbnQodXJsKV07XG4gICAgcmV0dXJuIHJlc291cmNlIGFzIFhtbERvYy5YTUxEb2NIb2xkZXI7XG4gIH1cblxuICBkZWxldGUodXJsOiBzdHJpbmcpIHtcbiAgICBkZWxldGUgdGhpcy5yZXNvdXJjZXNbQmFzZS5zdHJpcEZyYWdtZW50KHVybCldO1xuICB9XG59XG5cbmV4cG9ydCB0eXBlIEpTT05TdG9yZSA9IFJlc291cmNlU3RvcmU8QmFzZS5KU09OPjtcblxuZXhwb3J0IGZ1bmN0aW9uIHBhcnNlSlNPTlJlc291cmNlKFxuICByZXNwb25zZTogUmVzcG9uc2UsXG4gIHN0b3JlOiBKU09OU3RvcmUsXG4pOiBUYXNrLlJlc3VsdDxCYXNlLkpTT04+IHtcbiAgY29uc3QgdGV4dCA9IHJlc3BvbnNlLnJlc3BvbnNlVGV4dDtcbiAgcmV0dXJuIFRhc2submV3UmVzdWx0KHRleHQgPyBCYXNlLnN0cmluZ1RvSlNPTih0ZXh0KSA6IG51bGwpO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gbmV3SlNPTlN0b3JlKCk6IEpTT05TdG9yZSB7XG4gIHJldHVybiBuZXcgUmVzb3VyY2VTdG9yZShwYXJzZUpTT05SZXNvdXJjZSwgWE1MSHR0cFJlcXVlc3RSZXNwb25zZVR5cGUuVEVYVCk7XG59XG4iLCIvKipcbiAqIENvcHlyaWdodCAyMDE1IFRyaW0tbWFya3MgSW5jLlxuICogQ29weXJpZ2h0IDIwMTkgVml2bGlvc3R5bGUgRm91bmRhdGlvblxuICpcbiAqIFZpdmxpb3N0eWxlLmpzIGlzIGZyZWUgc29mdHdhcmU6IHlvdSBjYW4gcmVkaXN0cmlidXRlIGl0IGFuZC9vciBtb2RpZnlcbiAqIGl0IHVuZGVyIHRoZSB0ZXJtcyBvZiB0aGUgR05VIEFmZmVybyBHZW5lcmFsIFB1YmxpYyBMaWNlbnNlIGFzIHB1Ymxpc2hlZCBieVxuICogdGhlIEZyZWUgU29mdHdhcmUgRm91bmRhdGlvbiwgZWl0aGVyIHZlcnNpb24gMyBvZiB0aGUgTGljZW5zZSwgb3JcbiAqIChhdCB5b3VyIG9wdGlvbikgYW55IGxhdGVyIHZlcnNpb24uXG4gKlxuICogVml2bGlvc3R5bGUuanMgaXMgZGlzdHJpYnV0ZWQgaW4gdGhlIGhvcGUgdGhhdCBpdCB3aWxsIGJlIHVzZWZ1bCxcbiAqIGJ1dCBXSVRIT1VUIEFOWSBXQVJSQU5UWTsgd2l0aG91dCBldmVuIHRoZSBpbXBsaWVkIHdhcnJhbnR5IG9mXG4gKiBNRVJDSEFOVEFCSUxJVFkgb3IgRklUTkVTUyBGT1IgQSBQQVJUSUNVTEFSIFBVUlBPU0UuICBTZWUgdGhlXG4gKiBHTlUgQWZmZXJvIEdlbmVyYWwgUHVibGljIExpY2Vuc2UgZm9yIG1vcmUgZGV0YWlscy5cbiAqXG4gKiBZb3Ugc2hvdWxkIGhhdmUgcmVjZWl2ZWQgYSBjb3B5IG9mIHRoZSBHTlUgQWZmZXJvIEdlbmVyYWwgUHVibGljIExpY2Vuc2VcbiAqIGFsb25nIHdpdGggVml2bGlvc3R5bGUuanMuICBJZiBub3QsIHNlZSA8aHR0cDovL3d3dy5nbnUub3JnL2xpY2Vuc2VzLz4uXG4gKlxuICogQGZpbGVvdmVydmlldyBBc3NldHMgLSBCdW5kbGUgcmVzb3VyY2VzXG4gKi9cblxuLy8gdml2bGlvc3R5bGUtdmlld3BvcnQtc2NyZWVuLmNzc1xuZXhwb3J0IGNvbnN0IFZpdmxpb3N0eWxlVmlld3BvcnRTY3JlZW5Dc3MgPSBgXG5AbWVkaWEgc2NyZWVuIHtcbiAgW2RhdGEtdml2bGlvc3R5bGUtdmlld2VyLXZpZXdwb3J0XSB7XG4gICAgYmFja2dyb3VuZDogI2FhYWFhYTtcbiAgfVxuXG4gIFtkYXRhLXZpdmxpb3N0eWxlLXBhZ2UtY29udGFpbmVyXSB7XG4gICAgYmFja2dyb3VuZDogd2hpdGU7XG4gICAgei1pbmRleDogMDtcbiAgfVxuXG4gIFtkYXRhLXZpdmxpb3N0eWxlLXZpZXdlci12aWV3cG9ydF0ge1xuICAgIGRpc3BsYXk6IC13ZWJraXQtZmxleDtcbiAgICBkaXNwbGF5OiBmbGV4O1xuICAgIG92ZXJmbG93OiBhdXRvO1xuICAgIHBvc2l0aW9uOiByZWxhdGl2ZTtcbiAgfVxuXG4gIFtkYXRhLXZpdmxpb3N0eWxlLW91dGVyLXpvb20tYm94XSB7XG4gICAgbWFyZ2luOiBhdXRvO1xuICAgIG92ZXJmbG93OiBoaWRkZW47XG4gICAgLXdlYmtpdC1mbGV4OiBub25lO1xuICAgIGZsZXg6IG5vbmU7XG4gIH1cblxuICBbZGF0YS12aXZsaW9zdHlsZS12aWV3ZXItdmlld3BvcnRdIFtkYXRhLXZpdmxpb3N0eWxlLXNwcmVhZC1jb250YWluZXJdIHtcbiAgICBkaXNwbGF5OiAtd2Via2l0LWZsZXg7XG4gICAgZGlzcGxheTogZmxleDtcbiAgICAtd2Via2l0LWZsZXg6IG5vbmU7XG4gICAgZmxleDogbm9uZTtcbiAgICAtd2Via2l0LWp1c3RpZnktY29udGVudDogY2VudGVyO1xuICAgIGp1c3RpZnktY29udGVudDogY2VudGVyO1xuICAgIC1tb3otdHJhbnNmb3JtLW9yaWdpbjogbGVmdCB0b3A7XG4gICAgLW1zLXRyYW5zZm9ybS1vcmlnaW46IGxlZnQgdG9wO1xuICAgIC13ZWJraXQtdHJhbnNmb3JtLW9yaWdpbjogbGVmdCB0b3A7XG4gICAgdHJhbnNmb3JtLW9yaWdpbjogbGVmdCB0b3A7XG4gIH1cblxuICBbZGF0YS12aXZsaW9zdHlsZS12aWV3ZXItdmlld3BvcnRdW2RhdGEtdml2bGlvc3R5bGUtcGFnZS1wcm9ncmVzc2lvbj1cImx0clwiXVxuICAgIFtkYXRhLXZpdmxpb3N0eWxlLXNwcmVhZC1jb250YWluZXJdIHtcbiAgICAtd2Via2l0LWZsZXgtZGlyZWN0aW9uOiByb3c7XG4gICAgZmxleC1kaXJlY3Rpb246IHJvdztcbiAgfVxuXG4gIFtkYXRhLXZpdmxpb3N0eWxlLXZpZXdlci12aWV3cG9ydF1bZGF0YS12aXZsaW9zdHlsZS1wYWdlLXByb2dyZXNzaW9uPVwicnRsXCJdXG4gICAgW2RhdGEtdml2bGlvc3R5bGUtc3ByZWFkLWNvbnRhaW5lcl0ge1xuICAgIC13ZWJraXQtZmxleC1kaXJlY3Rpb246IHJvdy1yZXZlcnNlO1xuICAgIGZsZXgtZGlyZWN0aW9uOiByb3ctcmV2ZXJzZTtcbiAgfVxuXG4gIFtkYXRhLXZpdmxpb3N0eWxlLXZpZXdlci12aWV3cG9ydF0gW2RhdGEtdml2bGlvc3R5bGUtcGFnZS1jb250YWluZXJdIHtcbiAgICBtYXJnaW46IDAgYXV0bztcbiAgICAtd2Via2l0LWZsZXg6IG5vbmU7XG4gICAgZmxleDogbm9uZTtcbiAgICB0cmFuc2Zvcm0tb3JpZ2luOiBjZW50ZXIgdG9wO1xuICB9XG5cbiAgW2RhdGEtdml2bGlvc3R5bGUtdmlld2VyLXZpZXdwb3J0XVtkYXRhLXZpdmxpb3N0eWxlLXNwcmVhZC12aWV3PVwidHJ1ZVwiXVxuICAgIFtkYXRhLXZpdmxpb3N0eWxlLXBhZ2UtY29udGFpbmVyXVtkYXRhLXZpdmxpb3N0eWxlLXBhZ2Utc2lkZT1cImxlZnRcIl0ge1xuICAgIG1hcmdpbi1yaWdodDogMXB4O1xuICAgIHRyYW5zZm9ybS1vcmlnaW46IHJpZ2h0IHRvcDtcbiAgfVxuXG4gIFtkYXRhLXZpdmxpb3N0eWxlLXZpZXdlci12aWV3cG9ydF1bZGF0YS12aXZsaW9zdHlsZS1zcHJlYWQtdmlldz1cInRydWVcIl1cbiAgICBbZGF0YS12aXZsaW9zdHlsZS1wYWdlLWNvbnRhaW5lcl1bZGF0YS12aXZsaW9zdHlsZS1wYWdlLXNpZGU9XCJyaWdodFwiXSB7XG4gICAgbWFyZ2luLWxlZnQ6IDFweDtcbiAgICB0cmFuc2Zvcm0tb3JpZ2luOiBsZWZ0IHRvcDtcbiAgfVxuXG4gIFtkYXRhLXZpdmxpb3N0eWxlLXZpZXdlci12aWV3cG9ydF1bZGF0YS12aXZsaW9zdHlsZS1zcHJlYWQtdmlldz1cInRydWVcIl1cbiAgICBbZGF0YS12aXZsaW9zdHlsZS1wYWdlLWNvbnRhaW5lcl1bZGF0YS12aXZsaW9zdHlsZS11bnBhaXJlZC1wYWdlPVwidHJ1ZVwiXSB7XG4gICAgbWFyZ2luLWxlZnQ6IGF1dG87XG4gICAgbWFyZ2luLXJpZ2h0OiBhdXRvO1xuICAgIHRyYW5zZm9ybS1vcmlnaW46IGNlbnRlciB0b3A7XG4gIH1cbn1cbmA7XG5cbi8vIHZpdmxpb3N0eWxlLXZpZXdwb3J0LmNzc1xuZXhwb3J0IGNvbnN0IFZpdmxpb3N0eWxlVmlld3BvcnRDc3MgPSBgXG5bZGF0YS12aXZsaW9zdHlsZS1sYXlvdXQtYm94XSB7XG4gIHBvc2l0aW9uOiBhYnNvbHV0ZTtcbiAgbGVmdDogMDtcbiAgdG9wOiAwO1xuICByaWdodDogMDtcbiAgYm90dG9tOiAwO1xuICBvdmVyZmxvdzogaGlkZGVuO1xuICB6LWluZGV4OiAtMTtcbn1cblxuW2RhdGEtdml2bGlvc3R5bGUtZGVidWddIFtkYXRhLXZpdmxpb3N0eWxlLWxheW91dC1ib3hdIHtcbiAgcmlnaHQ6IGF1dG87XG4gIGJvdHRvbTogYXV0bztcbiAgb3ZlcmZsb3c6IHZpc2libGU7XG4gIHotaW5kZXg6IGF1dG87XG59XG5cbltkYXRhLXZpdmxpb3N0eWxlLXBhZ2UtY29udGFpbmVyXSB7XG4gIHBvc2l0aW9uOiByZWxhdGl2ZTtcbiAgb3ZlcmZsb3c6IGhpZGRlbjtcbn1cblxuW2RhdGEtdml2bGlvc3R5bGUtYmxlZWQtYm94XSB7XG4gIHBvc2l0aW9uOiBhYnNvbHV0ZTtcbiAgb3ZlcmZsb3c6IGhpZGRlbjtcbiAgbWF4LXdpZHRoOiAxMDAlO1xuICBtYXgtaGVpZ2h0OiAxMDAlO1xuICBib3gtc2l6aW5nOiBib3JkZXItYm94O1xufVxuXG5bZGF0YS12aXZsaW9zdHlsZS1wYWdlLWJveF0gfiBbZGF0YS12aXZsaW9zdHlsZS1wYWdlLWJveF0ge1xuICBkaXNwbGF5OiBub25lO1xufVxuXG5bZGF0YS12aXZsaW9zdHlsZS10b2MtYm94XSB7XG4gIHBvc2l0aW9uOiBhYnNvbHV0ZTtcbiAgbGVmdDogM3B4O1xuICB0b3A6IDNweDtcbiAgb3ZlcmZsb3c6IHNjcm9sbDtcbiAgb3ZlcmZsb3cteDogaGlkZGVuO1xuICBiYWNrZ3JvdW5kOiByZ2JhKDI0OCwgMjQ4LCAyNDgsIDAuOSk7XG4gIGJvcmRlci1yYWRpdXM6IDJweDtcbiAgYm94LXNoYWRvdzogMXB4IDFweCAycHggcmdiYSgwLCAwLCAwLCAwLjQpO1xufVxuXG5AbWVkaWEgcHJpbnQge1xuICBbZGF0YS12aXZsaW9zdHlsZS10b2MtYm94XSB7XG4gICAgZGlzcGxheTogbm9uZTtcbiAgfVxuXG4gIFtkYXRhLXZpdmxpb3N0eWxlLW91dGVyLXpvb20tYm94XSxcbiAgW2RhdGEtdml2bGlvc3R5bGUtc3ByZWFkLWNvbnRhaW5lcl0ge1xuICAgIHdpZHRoOiAxMDAlICFpbXBvcnRhbnQ7XG4gICAgaGVpZ2h0OiAxMDAlICFpbXBvcnRhbnQ7XG4gIH1cblxuICBbZGF0YS12aXZsaW9zdHlsZS1zcHJlYWQtY29udGFpbmVyXSxcbiAgW2RhdGEtdml2bGlvc3R5bGUtcGFnZS1jb250YWluZXJdIHtcbiAgICAtbW96LXRyYW5zZm9ybTogbm9uZSAhaW1wb3J0YW50O1xuICAgIC1tcy10cmFuc2Zvcm06IG5vbmUgIWltcG9ydGFudDtcbiAgICAtd2Via2l0LXRyYW5zZm9ybTogbm9uZSAhaW1wb3J0YW50O1xuICAgIHRyYW5zZm9ybTogbm9uZSAhaW1wb3J0YW50O1xuICB9XG5cbiAgW2RhdGEtdml2bGlvc3R5bGUtcGFnZS1jb250YWluZXJdIHtcbiAgICBkaXNwbGF5OiBibG9jayAhaW1wb3J0YW50O1xuICAgIG1heC13aWR0aDogMTAwJTtcbiAgICBoZWlnaHQ6IDEwMCUgIWltcG9ydGFudDtcbiAgICBtYXgtaGVpZ2h0OiAxMDAlO1xuICB9XG5cbiAgLyogV29ya2Fyb3VuZCBmb3IgQ2hyb21lIHByaW50aW5nIHByb2JsZW0gKi9cbiAgLyogW2RhdGEtdml2bGlvc3R5bGUtcGFnZS1ib3hdIHtcbiAgICAgICAgcGFkZGluZy1ib3R0b206IDAgIWltcG9ydGFudDtcbiAgICAgICAgb3ZlcmZsb3c6IHZpc2libGUgIWltcG9ydGFudDtcbiAgICB9ICovXG4gIFtkYXRhLXZpdmxpb3N0eWxlLWJsZWVkLWJveF0gPiBkaXYgPiBkaXY6OmJlZm9yZSB7XG4gICAgZGlzcGxheTogYmxvY2s7XG4gICAgY29udGVudDogXCJcIjtcbiAgICBwYWRkaW5nLXRvcDogMC4wMTU2MjVweDtcbiAgICBtYXJnaW4tYm90dG9tOiAtMC4wMTU2MjVweDtcbiAgfVxuXG4gIC8qIEdlY2tvLW9ubHkgaGFjaywgc2VlIGh0dHBzOi8vYnVnemlsbGEubW96aWxsYS5vcmcvc2hvd19idWcuY2dpP2lkPTI2NzAyOSNjMTcgKi9cbiAgQC1tb3otZG9jdW1lbnQgcmVnZXhwKCcuKicpIHtcbiAgICBbZGF0YS12aXZsaW9zdHlsZS1wYWdlLWNvbnRhaW5lcl06bnRoLWxhc3QtY2hpbGQobiArIDIpIHtcbiAgICAgIHRvcDogLTFweDtcbiAgICAgIG1hcmdpbi10b3A6IDFweDtcbiAgICAgIG1hcmdpbi1ib3R0b206IC0xcHg7XG4gICAgfVxuICB9XG59XG5gO1xuXG4vLyB2YWxpZGF0aW9uLnR4dFxuZXhwb3J0IGNvbnN0IFZhbGlkYXRpb25UeHQgPSBgXG4vKlxuICogQ29weXJpZ2h0IDIwMTMgR29vZ2xlLCBJbmMuXG4gKiBDb3B5cmlnaHQgMjAxNSBUcmltLW1hcmtzIEluYy5cbiAqIENvcHlyaWdodCAyMDE5IFZpdmxpb3N0eWxlIEZvdW5kYXRpb25cbiAqXG4gKiBDU1MgcHJvcGVydHkgdmFsaWRhdGlvbi5cbiAqL1xuTlVNID0gUE9TX05VTSB8IFpFUk8gfCBORUdBVElWRTtcbk5ORUdfTlVNID0gUE9TX05VTSB8IFpFUk87XG5JTlQgPSBQT1NfSU5UIHwgWkVSTyB8IE5FR0FUSVZFO1xuTk5FR19JTlQgPSBQT1NfSU5UIHwgWkVSTztcblBFUkNFTlRBR0UgPSBQT1NfUEVSQ0VOVEFHRSB8IFpFUk8gfCBORUdBVElWRTtcblNUUklDVF9QRVJDRU5UQUdFID0gUE9TX1BFUkNFTlRBR0UgfCBaRVJPX1BFUkNFTlRBR0UgfCBORUdBVElWRTtcbk5ORUdfUEVSQ0VOVEFHRSA9IFBPU19QRVJDRU5UQUdFIHwgWkVSTztcbkxFTkdUSCA9IFBPU19MRU5HVEggfCBaRVJPIHwgTkVHQVRJVkU7XG5OTkVHX0xFTkdUSCA9IFBPU19MRU5HVEggfCBaRVJPIHwgTkVHQVRJVkU7XG5QTEVOR1RIID0gTEVOR1RIIHwgUEVSQ0VOVEFHRTtcblBQTEVOR1RIID0gUE9TX0xFTkdUSCB8IFpFUk8gfCBQT1NfUEVSQ0VOVEFHRTtcbkFMRU5HVEggPSBMRU5HVEggfCBhdXRvO1xuQVBMRU5HVEggPSBQTEVOR1RIIHwgYXV0bztcblBBUExFTkdUSCA9IFBQTEVOR1RIIHwgYXV0bztcbkFOR0xFID0gUE9TX0FOR0xFIHwgWkVSTyB8IE5FR0FUSVZFO1xuTEVOR1RIX09SX05VTSA9IExFTkdUSCB8IE5VTTtcbkFOR0xFX09SX05VTSA9IEFOR0xFIHwgTlVNO1xuU0NPTE9SID0gSEFTSENPTE9SIHwgYWxpY2VibHVlOiAjRjBGOEZGIHwgYW50aXF1ZXdoaXRlOiAjRkFFQkQ3IHwgYXF1YTogIzAwRkZGRiB8IGFxdWFtYXJpbmU6ICM3RkZGRDQgfCBhenVyZTogI0YwRkZGRiB8XG4gICAgYmVpZ2U6ICNGNUY1REMgfCBiaXNxdWU6ICNGRkU0QzQgfCBibGFjazogIzAwMDAwMCB8IGJsYW5jaGVkYWxtb25kOiAjRkZFQkNEIHwgYmx1ZTogIzAwMDBGRiB8IGJsdWV2aW9sZXQ6ICM4QTJCRTIgfCBicm93bjogI0E1MkEyQSB8XG4gICAgYnVybHl3b29kOiAjREVCODg3IHwgY2FkZXRibHVlOiAjNUY5RUEwIHwgY2hhcnRyZXVzZTogIzdGRkYwMCB8IGNob2NvbGF0ZTogI0QyNjkxRSB8IGNvcmFsOiAjRkY3RjUwIHwgY29ybmZsb3dlcmJsdWU6ICM2NDk1RUQgfFxuICAgIGNvcm5zaWxrOiAjRkZGOERDIHwgY3JpbXNvbjogI0RDMTQzQyB8IGN5YW46ICMwMEZGRkYgfCBkYXJrYmx1ZTogIzAwMDA4QiB8IGRhcmtjeWFuOiAjMDA4QjhCIHwgZGFya2dvbGRlbnJvZDogI0I4ODYwQiB8XG4gICAgZGFya2dyYXk6ICNBOUE5QTkgfCBkYXJrZ3JlZW46ICMwMDY0MDAgfCBkYXJrZ3JleTogI0E5QTlBOSB8IGRhcmtraGFraTogI0JEQjc2QiB8IGRhcmttYWdlbnRhOiAjOEIwMDhCIHwgZGFya29saXZlZ3JlZW46ICM1NTZCMkYgfFxuICAgIGRhcmtvcmFuZ2U6ICNGRjhDMDAgfCBkYXJrb3JjaGlkOiAjOTkzMkNDIHwgZGFya3JlZDogIzhCMDAwMCB8IGRhcmtzYWxtb246ICNFOTk2N0EgfCBkYXJrc2VhZ3JlZW46ICM4RkJDOEYgfCBkYXJrc2xhdGVibHVlOiAjNDgzRDhCIHxcbiAgICBkYXJrc2xhdGVncmF5OiAjMkY0RjRGIHwgZGFya3NsYXRlZ3JleTogIzJGNEY0RiB8IGRhcmt0dXJxdW9pc2U6ICMwMENFRDEgfCBkYXJrdmlvbGV0OiAjOTQwMEQzIHwgZGVlcHBpbms6ICNGRjE0OTMgfFxuICAgIGRlZXBza3libHVlOiAjMDBCRkZGIHwgZGltZ3JheTogIzY5Njk2OSB8IGRpbWdyZXk6ICM2OTY5NjkgfCBkb2RnZXJibHVlOiAjMUU5MEZGIHwgZmlyZWJyaWNrOiAjQjIyMjIyIHwgZmxvcmFsd2hpdGU6ICNGRkZBRjAgfFxuICAgIGZvcmVzdGdyZWVuOiAjMjI4QjIyIHwgZnVjaHNpYTogI0ZGMDBGRiB8IGdhaW5zYm9ybzogI0RDRENEQyB8IGdob3N0d2hpdGU6ICNGOEY4RkYgfCBnb2xkOiAjRkZENzAwIHwgZ29sZGVucm9kOiAjREFBNTIwIHxcbiAgICBncmF5OiAjODA4MDgwIHwgZ3JlZW46ICMwMDgwMDAgfCBncmVlbnllbGxvdzogI0FERkYyRiB8IGdyZXk6ICM4MDgwODAgfCBob25leWRldzogI0YwRkZGMCB8IGhvdHBpbms6ICNGRjY5QjQgfCBpbmRpYW5yZWQ6ICNDRDVDNUMgfFxuICAgIGluZGlnbzogIzRCMDA4MiB8IGl2b3J5OiAjRkZGRkYwIHwga2hha2k6ICNGMEU2OEMgfCBsYXZlbmRlcjogI0U2RTZGQSB8IGxhdmVuZGVyYmx1c2g6ICNGRkYwRjUgfCBsYXduZ3JlZW46ICM3Q0ZDMDAgfFxuICAgIGxlbW9uY2hpZmZvbjogI0ZGRkFDRCB8IGxpZ2h0Ymx1ZTogI0FERDhFNiB8IGxpZ2h0Y29yYWw6ICNGMDgwODAgfCBsaWdodGN5YW46ICNFMEZGRkYgfCBsaWdodGdvbGRlbnJvZHllbGxvdzogI0ZBRkFEMiB8XG4gICAgbGlnaHRncmF5OiAjRDNEM0QzIHwgbGlnaHRncmVlbjogIzkwRUU5MCB8IGxpZ2h0Z3JleTogI0QzRDNEMyB8IGxpZ2h0cGluazogI0ZGQjZDMSB8IGxpZ2h0c2FsbW9uOiAjRkZBMDdBIHwgbGlnaHRzZWFncmVlbjogIzIwQjJBQSB8XG4gICAgbGlnaHRza3libHVlOiAjODdDRUZBIHwgbGlnaHRzbGF0ZWdyYXk6ICM3Nzg4OTkgfCBsaWdodHNsYXRlZ3JleTogIzc3ODg5OSB8IGxpZ2h0c3RlZWxibHVlOiAjQjBDNERFIHwgbGlnaHR5ZWxsb3c6ICNGRkZGRTAgfFxuICAgIGxpbWU6ICMwMEZGMDAgfCBsaW1lZ3JlZW46ICMzMkNEMzIgfCBsaW5lbjogI0ZBRjBFNiB8IG1hZ2VudGE6ICNGRjAwRkYgfCBtYXJvb246ICM4MDAwMDAgfCBtZWRpdW1hcXVhbWFyaW5lOiAjNjZDREFBIHxcbiAgICBtZWRpdW1ibHVlOiAjMDAwMENEIHwgbWVkaXVtb3JjaGlkOiAjQkE1NUQzIHwgbWVkaXVtcHVycGxlOiAjOTM3MERCIHwgbWVkaXVtc2VhZ3JlZW46ICMzQ0IzNzEgfCBtZWRpdW1zbGF0ZWJsdWU6ICM3QjY4RUUgfFxuICAgIG1lZGl1bXNwcmluZ2dyZWVuOiAjMDBGQTlBIHwgbWVkaXVtdHVycXVvaXNlOiAjNDhEMUNDIHwgbWVkaXVtdmlvbGV0cmVkOiAjQzcxNTg1IHwgbWlkbmlnaHRibHVlOiAjMTkxOTcwIHwgbWludGNyZWFtOiAjRjVGRkZBIHxcbiAgICBtaXN0eXJvc2U6ICNGRkU0RTEgfCBtb2NjYXNpbjogI0ZGRTRCNSB8IG5hdmFqb3doaXRlOiAjRkZERUFEIHwgbmF2eTogIzAwMDA4MCB8IG9sZGxhY2U6ICNGREY1RTYgfCBvbGl2ZTogIzgwODAwMCB8XG4gICAgb2xpdmVkcmFiOiAjNkI4RTIzIHwgb3JhbmdlOiAjRkZBNTAwIHwgb3JhbmdlcmVkOiAjRkY0NTAwIHwgb3JjaGlkOiAjREE3MEQ2IHwgcGFsZWdvbGRlbnJvZDogI0VFRThBQSB8IHBhbGVncmVlbjogIzk4RkI5OCB8XG4gICAgcGFsZXR1cnF1b2lzZTogI0FGRUVFRSB8IHBhbGV2aW9sZXRyZWQ6ICNEQjcwOTMgfCBwYXBheWF3aGlwOiAjRkZFRkQ1IHwgcGVhY2hwdWZmOiAjRkZEQUI5IHwgcGVydTogI0NEODUzRiB8IHBpbms6ICNGRkMwQ0IgfFxuICAgIHBsdW06ICNEREEwREQgfCBwb3dkZXJibHVlOiAjQjBFMEU2IHwgcHVycGxlOiAjODAwMDgwIHwgcmViZWNjYXB1cnBsZTogIzY2MzM5OSB8IHJlZDogI0ZGMDAwMCB8IHJvc3licm93bjogI0JDOEY4RiB8IHJveWFsYmx1ZTogIzQxNjlFMSB8XG4gICAgc2FkZGxlYnJvd246ICM4QjQ1MTMgfCBzYWxtb246ICNGQTgwNzIgfCBzYW5keWJyb3duOiAjRjRBNDYwIHwgc2VhZ3JlZW46ICMyRThCNTcgfCBzZWFzaGVsbDogI0ZGRjVFRSB8IHNpZW5uYTogI0EwNTIyRCB8XG4gICAgc2lsdmVyOiAjQzBDMEMwIHwgc2t5Ymx1ZTogIzg3Q0VFQiB8IHNsYXRlYmx1ZTogIzZBNUFDRCB8IHNsYXRlZ3JheTogIzcwODA5MCB8IHNsYXRlZ3JleTogIzcwODA5MCB8IHNub3c6ICNGRkZBRkEgfFxuICAgIHNwcmluZ2dyZWVuOiAjMDBGRjdGIHwgc3RlZWxibHVlOiAjNDY4MkI0IHwgdGFuOiAjRDJCNDhDIHwgdGVhbDogIzAwODA4MCB8IHRoaXN0bGU6ICNEOEJGRDggfCB0b21hdG86ICNGRjYzNDcgfFxuICAgIHR1cnF1b2lzZTogIzQwRTBEMCB8IHZpb2xldDogI0VFODJFRSB8IHdoZWF0OiAjRjVERUIzIHwgd2hpdGU6ICNGRkZGRkYgfCB3aGl0ZXNtb2tlOiAjRjVGNUY1IHwgeWVsbG93OiAjRkZGRjAwIHxcbiAgICB5ZWxsb3dncmVlbjogIzlBQ0QzMiB8IHRyYW5zcGFyZW50IHwgY3VycmVudGNvbG9yO1xuUkdCQ09MT1IgPSByZ2IoSU5UezN9KSB8IHJnYihTVFJJQ1RfUEVSQ0VOVEFHRXszfSk7XG5SR0JBQ09MT1IgPSByZ2JhKE5VTXs0fSkgfCByZ2JhKFNUUklDVF9QRVJDRU5UQUdFezN9IE5VTSk7XG5IU0xDT0xPUiA9IGhzbChOVU0gUEVSQ0VOVEFHRXsyfSk7XG5IU0xBQ09MT1IgPSBoc2woTlVNIFBFUkNFTlRBR0V7Mn0gTlVNKTtcbkNPTE9SID0gU0NPTE9SIHwgUkdCQ09MT1IgfCBSR0JBQ09MT1IgfCBIU0xDT0xPUiB8IEhTTEFDT0xPUjtcbkJHX1BPU0lUSU9OX1RFUk0gPSBQTEVOR1RIIHwgbGVmdCB8IGNlbnRlciB8IHJpZ2h0IHwgdG9wIHwgYm90dG9tO1xuU0lERV9PUl9DT1JORVIgPSAgW2xlZnQgfCByaWdodF0gfHwgW3RvcCB8IGJvdHRvbV07XG5DT0xPUl9TVE9QID0gU1BBQ0UoQ09MT1IgW1BFUkNFTlRBR0UgfCBMRU5HVEhdPyk7XG5MSU5FQVJfR1JBRElFTlQgPSBsaW5lYXItZ3JhZGllbnQoW0FOR0xFIHwgU1BBQ0UodG8gU0lERV9PUl9DT1JORVIpXT8gQ09MT1JfU1RPUCspIHxcbiAgICAgICAgICAgICAgICAgIHJlcGVhdGluZy1saW5lYXItZ3JhZGllbnQoW0FOR0xFIHwgU1BBQ0UodG8gU0lERV9PUl9DT1JORVIpXT8gQ09MT1JfU1RPUCspIHw7XG5HUkFESUVOVF9FWFRFTlQgPSBjbG9zZXN0LWNvcm5lciB8IGNsb3Nlc3Qtc2lkZSB8IGZhcnRoZXN0LWNvcm5lciB8IGZhcnRoZXN0LXNpZGU7XG5HUkFESUVOVF9QT1NJVElPTiA9IGF0IEJHX1BPU0lUSU9OX1RFUk17MSw0fTtcbkdSQURJRU5UX1NIQVBFID0gU1BBQ0UoY2lyY2xlIExFTkdUSD8gR1JBRElFTlRfUE9TSVRJT04/KSB8IFNQQUNFKGVsbGlwc2UgUExFTkdUSHsyfT8gR1JBRElFTlRfUE9TSVRJT04/KXwgU1BBQ0UoW2NpcmNsZSB8IGVsbGlwc2VdIEdSQURJRU5UX0VYVEVOVD8gR1JBRElFTlRfUE9TSVRJT04/KTtcblJBRElBTF9HUkFESUVOVCA9IHJhZGlhbC1ncmFkaWVudChbR1JBRElFTlRfU0hBUEUgfCBTUEFDRShHUkFESUVOVF9QT1NJVElPTildPyBDT0xPUl9TVE9QKykgfFxuICAgICAgICAgICAgICAgICAgcmVwZWF0aW5nLXJhZGlhbC1ncmFkaWVudChbR1JBRElFTlRfU0hBUEUgfCBTUEFDRShHUkFESUVOVF9QT1NJVElPTildPyBDT0xPUl9TVE9QKyk7XG5VUklfT1JfTk9ORSA9IFVSSSB8IG5vbmU7XG5JTUFHRSA9ICBVUkkgfCBMSU5FQVJfR1JBRElFTlQgfCBSQURJQUxfR1JBRElFTlQgfCBub25lO1xuYXppbXV0aCA9IEFOR0xFIHwgW1sgbGVmdC1zaWRlIHwgZmFyLWxlZnQgfCBsZWZ0IHwgY2VudGVyLWxlZnQgfCBjZW50ZXIgfCBjZW50ZXItcmlnaHQgfCByaWdodCB8IGZhci1yaWdodCB8IHJpZ2h0LXNpZGUgXSB8fCBiZWhpbmQgXSB8IGxlZnR3YXJkcyB8IHJpZ2h0d2FyZHM7XG5iYWNrZ3JvdW5kLWF0dGFjaG1lbnQgPSBDT01NQSggW3Njcm9sbCB8IGZpeGVkIHwgbG9jYWxdKyApO1xuYmFja2dyb3VuZC1jb2xvciA9IENPTE9SO1xuYmFja2dyb3VuZC1pbWFnZSA9IENPTU1BKCBJTUFHRSsgKTtcbmJhY2tncm91bmQtcG9zaXRpb24gPSBDT01NQSggU1BBQ0UoQkdfUE9TSVRJT05fVEVSTXsxLDR9KSsgKTsgLyogcmVsYXhlZCAqL1xuYmFja2dyb3VuZC1yZXBlYXQgPSBDT01NQSggW3JlcGVhdCB8IHJlcGVhdC14IHwgcmVwZWF0LXkgfCBuby1yZXBlYXRdKyApO1xuYm9yZGVyLWNvbGxhcHNlID0gY29sbGFwc2UgfCBzZXBhcmF0ZTtcbkJPUkRFUl9TSURFX0NPTE9SID0gQ09MT1I7XG5CT1JERVJfU0lERV9TVFlMRSA9IG5vbmUgfCBoaWRkZW4gfCBkb3R0ZWQgfCBkYXNoZWQgfCBzb2xpZCB8IGRvdWJsZSB8IGdyb292ZSB8IHJpZGdlIHwgaW5zZXQgfCBvdXRzZXQ7XG5CT1JERVJfU0lERV9XSURUSCA9IHRoaW46IDFweCB8IG1lZGl1bTogM3B4IHwgdGhpY2s6IDVweCB8IE5ORUdfTEVOR1RIO1xuYm9yZGVyLXNwYWNpbmcgPSBMRU5HVEggTEVOR1RIPztcbmJvcmRlci10b3AtY29sb3IgPSBCT1JERVJfU0lERV9DT0xPUjtcbmJvcmRlci1yaWdodC1jb2xvciA9IEJPUkRFUl9TSURFX0NPTE9SO1xuYm9yZGVyLWJvdHRvbS1jb2xvciA9IEJPUkRFUl9TSURFX0NPTE9SO1xuYm9yZGVyLWxlZnQtY29sb3IgPSBCT1JERVJfU0lERV9DT0xPUjtcbmJvcmRlci10b3Atc3R5bGUgPSBCT1JERVJfU0lERV9TVFlMRTtcbmJvcmRlci1yaWdodC1zdHlsZSA9IEJPUkRFUl9TSURFX1NUWUxFO1xuYm9yZGVyLWJvdHRvbS1zdHlsZSA9IEJPUkRFUl9TSURFX1NUWUxFO1xuYm9yZGVyLWxlZnQtc3R5bGUgPSBCT1JERVJfU0lERV9TVFlMRTtcbmJvcmRlci10b3Atd2lkdGggPSBCT1JERVJfU0lERV9XSURUSDtcbmJvcmRlci1yaWdodC13aWR0aCA9IEJPUkRFUl9TSURFX1dJRFRIO1xuYm9yZGVyLWJvdHRvbS13aWR0aCA9IEJPUkRFUl9TSURFX1dJRFRIO1xuYm9yZGVyLWxlZnQtd2lkdGggPSBCT1JERVJfU0lERV9XSURUSDtcbkJPUkRFUl9SQURJVVMgPSBQTEVOR1RIezEsMn07XG5ib3JkZXItdG9wLWxlZnQtcmFkaXVzID0gQk9SREVSX1JBRElVUztcbmJvcmRlci10b3AtcmlnaHQtcmFkaXVzID0gQk9SREVSX1JBRElVUztcbmJvcmRlci1ib3R0b20tcmlnaHQtcmFkaXVzID0gQk9SREVSX1JBRElVUztcbmJvcmRlci1ib3R0b20tbGVmdC1yYWRpdXMgPSBCT1JERVJfUkFESVVTO1xuYm9yZGVyLWltYWdlLXNvdXJjZSA9IElNQUdFO1xuYm9yZGVyLWltYWdlLXNsaWNlID0gW05VTSB8IFBFUkNFTlRBR0VdezEsNH0gfHwgZmlsbDsgLyogcmVsYXhlZCAqL1xuYm9yZGVyLWltYWdlLXdpZHRoID0gW05VTSB8IFBMRU5HVEggfCBhdXRvXXsxLDR9O1xuYm9yZGVyLWltYWdlLW91dHNldCA9IFtOVU0gfCBMRU5HVEhdezEsNH07XG5ib3JkZXItaW1hZ2UtcmVwZWF0ID0gWyBzdHJldGNoIHwgcmVwZWF0IHwgcm91bmQgfCBzcGFjZSBdezEsMn07XG5ib3R0b20gPSBBUExFTkdUSDtcbmNhcHRpb24tc2lkZSA9IHRvcCB8IGJvdHRvbTtcbmNsZWFyID0gbm9uZSB8IGxlZnQgfCByaWdodCB8IHRvcCB8IGJvdHRvbSB8IGJvdGggfCBhbGwgfCBzYW1lO1xuY2xpcCA9IHJlY3QoQUxFTkdUSHs0fSkgfCByZWN0KFNQQUNFKEFMRU5HVEh7NH0pKSB8IGF1dG87XG5jb2xvciA9IENPTE9SO1xuTElTVF9TVFlMRV9UWVBFID0gZGlzYyB8IGNpcmNsZSB8IHNxdWFyZSB8IGRlY2ltYWwgfCBkZWNpbWFsLWxlYWRpbmctemVybyB8IGxvd2VyLXJvbWFuIHxcbiAgICB1cHBlci1yb21hbiB8IGxvd2VyLWdyZWVrIHwgbG93ZXItbGF0aW4gfCB1cHBlci1sYXRpbiB8IGFybWVuaWFuIHwgZ2VvcmdpYW4gfCBsb3dlci1hbHBoYSB8XG4gICAgdXBwZXItYWxwaGEgfCBydXNzaWFuIHwgdXBwZXItcnVzc2lhbiB8IGxvd2VyLXJ1c3NpYW4gfCBjamstaWRlb2dyYXBoaWMgfCB0cmFkLWNoaW5lc2UtaW5mb3JtYWwgfFxuICAgIGhlYnJldyB8IG5vbmU7XG5UWVBFX09SX1VOSVRfSU5fQVRUUiA9IHN0cmluZyB8IGNvbG9yIHwgdXJsIHwgaW50ZWdlciB8IG51bWJlciB8IGxlbmd0aCB8IGFuZ2xlIHwgdGltZSB8IGZyZXF1ZW5jeTtcbkFUVFIgPSBhdHRyKFNQQUNFKElERU5UIFRZUEVfT1JfVU5JVF9JTl9BVFRSPykgWyBTVFJJTkcgfCBJREVOVCB8IENPTE9SIHwgSU5UIHwgTlVNIHwgUExFTkdUSCB8IEFOR0xFIHwgUE9TX1RJTUUgfCBGUkVRVUVOQ1ldPyk7XG5DT05URU5UX0xJU1QgPSBbIFNUUklORyB8IFVSSSB8IGNvdW50ZXIoSURFTlQgTElTVF9TVFlMRV9UWVBFPykgfFxuICAgIGNvdW50ZXJzKElERU5UIFNUUklORyBMSVNUX1NUWUxFX1RZUEU/KSB8IEFUVFIgfFxuICAgIHRhcmdldC1jb3VudGVyKFsgU1RSSU5HIHwgVVJJIF0gSURFTlQgTElTVF9TVFlMRV9UWVBFPykgfFxuICAgIHRhcmdldC1jb3VudGVyKEFUVFIgSURFTlQgTElTVF9TVFlMRV9UWVBFPykgfFxuICAgIHRhcmdldC1jb3VudGVycyhbIFNUUklORyB8IFVSSSBdIElERU5UIFNUUklORyBMSVNUX1NUWUxFX1RZUEU/KSB8XG4gICAgdGFyZ2V0LWNvdW50ZXJzKEFUVFIgSURFTlQgU1RSSU5HIExJU1RfU1RZTEVfVFlQRT8pIHxcbiAgICBvcGVuLXF1b3RlIHwgY2xvc2UtcXVvdGUgfCBuby1vcGVuLXF1b3RlIHwgbm8tY2xvc2UtcXVvdGUgfFxuICAgIGNvbnRlbnQoWyB0ZXh0IHwgYmVmb3JlIHwgYWZ0ZXIgfCBmaXJzdC1sZXR0ZXIgXT8pIHxcbiAgICBzdHJpbmcoSURFTlQgW2ZpcnN0IHwgc3RhcnQgfCBsYXN0IHwgZmlyc3QtZXhjZXB0XT8pIF0rO1xuQ09OVEVOVCA9IG5vcm1hbCB8IG5vbmUgfCBDT05URU5UX0xJU1Q7XG5jb250ZW50ID0gQ09OVEVOVDtcbkNPVU5URVIgPSBbIElERU5UIElOVD8gXSsgfCBub25lO1xuY291bnRlci1pbmNyZW1lbnQgPSBDT1VOVEVSO1xuY291bnRlci1yZXNldCA9IENPVU5URVI7XG5jb3VudGVyLXNldCA9IENPVU5URVI7XG5jdWUtYWZ0ZXIgPSBVUklfT1JfTk9ORTtcbmN1ZS1iZWZvcmUgPSBVUklfT1JfTk9ORTtcbmN1cnNvciA9IENPTU1BKFVSSSogWyBhdXRvIHwgY3Jvc3NoYWlyIHwgZGVmYXVsdCB8IHBvaW50ZXIgfCBtb3ZlIHwgZS1yZXNpemUgfCBuZS1yZXNpemUgfCBudy1yZXNpemUgfFxuICAgIG4tcmVzaXplIHwgc2UtcmVzaXplIHwgc3ctcmVzaXplIHwgcy1yZXNpemUgfCB3LXJlc2l6ZSB8IHRleHQgfCB3YWl0IHwgaGVscCB8IHByb2dyZXNzIF0pO1xuZGlyZWN0aW9uID0gbHRyIHwgcnRsO1xuZGlzcGxheSA9IGlubGluZSB8IGJsb2NrIHwgbGlzdC1pdGVtIHwgaW5saW5lLWJsb2NrIHwgdGFibGUgfCBpbmxpbmUtdGFibGUgfCB0YWJsZS1yb3ctZ3JvdXAgfFxuICAgIHRhYmxlLWhlYWRlci1ncm91cCB8IHRhYmxlLWZvb3Rlci1ncm91cCB8IHRhYmxlLXJvdyB8IHRhYmxlLWNvbHVtbi1ncm91cCB8IHRhYmxlLWNvbHVtbiB8XG4gICAgdGFibGUtY2VsbCB8IHRhYmxlLWNhcHRpb24gfCBub25lIHwgb2ViLXBhZ2UtaGVhZCB8IG9lYi1wYWdlLWZvb3QgfCBmbGV4IHwgaW5saW5lLWZsZXggfFxuICAgIHJ1YnkgfCBydWJ5LWJhc2UgfCBydWJ5LXRleHQgfCBydWJ5LWJhc2UtY29udGFpbmVyIHwgcnVieS10ZXh0LWNvbnRhaW5lciB8IHJ1bi1pbiB8IGNvbXBhY3QgfCBtYXJrZXI7XG5lbGV2YXRpb24gPSBBTkdMRSB8IGJlbG93IHwgbGV2ZWwgfCBhYm92ZSB8IGhpZ2hlciB8IGxvd2VyO1xuZW1wdHktY2VsbHMgPSBzaG93IHwgaGlkZTtcbkZBTUlMWSA9IFNQQUNFKElERU5UKykgfCBTVFJJTkc7XG5GQU1JTFlfTElTVCA9IENPTU1BKCBGQU1JTFkrICk7XG5mb250LWZhbWlseSA9IEZBTUlMWV9MSVNUO1xuZm9udC1zaXplID0geHgtc21hbGwgfCB4LXNtYWxsIHwgc21hbGwgfCBtZWRpdW0gfCBsYXJnZSB8IHgtbGFyZ2UgfCB4eC1sYXJnZSB8IGxhcmdlciB8IHNtYWxsZXIgfCBQUExFTkdUSCB8IFBPU19OVU07XG5mb250LXN0eWxlID0gbm9ybWFsIHwgaXRhbGljIHwgb2JsaXF1ZTtcbmZvbnQtdmFyaWFudCA9IG5vcm1hbCB8IHNtYWxsLWNhcHM7XG5mb250LXdlaWdodCA9IG5vcm1hbCB8IGJvbGQgfCBib2xkZXIgfCBsaWdodGVyIHwgMTAwIHwgMjAwIHwgMzAwIHwgNDAwIHwgNTAwIHwgNjAwIHwgNzAwIHwgODAwIHwgOTAwO1xuaGVpZ2h0ID0gUEFQTEVOR1RIIHwgUE9TX05VTSA7XG5sZWZ0ID0gQVBMRU5HVEg7XG5sZXR0ZXItc3BhY2luZyA9IG5vcm1hbCB8IExFTkdUSF9PUl9OVU07XG5saW5lLWhlaWdodCA9IG5vcm1hbCB8IFBPU19OVU0gfCBQUExFTkdUSDtcbmxpc3Qtc3R5bGUtaW1hZ2UgPSBJTUFHRTtcbmxpc3Qtc3R5bGUtcG9zaXRpb24gPSBpbnNpZGUgfCBvdXRzaWRlO1xubGlzdC1zdHlsZS10eXBlID0gTElTVF9TVFlMRV9UWVBFO1xubWFyZ2luLXJpZ2h0ID0gQVBMRU5HVEg7XG5tYXJnaW4tbGVmdCA9IEFQTEVOR1RIO1xubWFyZ2luLXRvcCA9IEFQTEVOR1RIO1xubWFyZ2luLWJvdHRvbSA9IEFQTEVOR1RIO1xuTlBMRU5HVEggPSBub25lIHwgUExFTkdUSDtcbm1heC1oZWlnaHQgPSBOUExFTkdUSDtcbm1heC13aWR0aCA9IE5QTEVOR1RIO1xubWluLWhlaWdodCA9IGF1dG8gfCBQTEVOR1RIO1xubWluLXdpZHRoID0gYXV0byB8IFBMRU5HVEg7XG5vcnBoYW5zID0gUE9TX0lOVDtcbm91dGxpbmUtb2Zmc2V0ID0gTEVOR1RIO1xub3V0bGluZS1jb2xvciA9IENPTE9SIHwgaW52ZXJ0O1xub3V0bGluZS1zdHlsZSA9IEJPUkRFUl9TSURFX1NUWUxFO1xub3V0bGluZS13aWR0aCA9IEJPUkRFUl9TSURFX1dJRFRIO1xub3ZlcmZsb3cgPSB2aXNpYmxlIHwgaGlkZGVuIHwgc2Nyb2xsIHwgYXV0bztcbnBhZGRpbmctcmlnaHQgPSBQUExFTkdUSDtcbnBhZGRpbmctbGVmdCA9IFBQTEVOR1RIO1xucGFkZGluZy10b3AgPSBQUExFTkdUSDtcbnBhZGRpbmctYm90dG9tID0gUFBMRU5HVEg7XG5QQUdFX0JSRUFLID0gYXV0byB8IGFsd2F5cyB8IGF2b2lkIHwgbGVmdCB8IHJpZ2h0IHwgcmVjdG8gfCB2ZXJzbztcbnBhZ2UtYnJlYWstYWZ0ZXIgPSBQQUdFX0JSRUFLO1xucGFnZS1icmVhay1iZWZvcmUgPSBQQUdFX0JSRUFLO1xucGFnZS1icmVhay1pbnNpZGUgPSBhdm9pZCB8IGF1dG87XG5QQVVTRSA9IFBPU19USU1FIHwgWkVSTyB8IFBPU19QRVJDRU5UQUdFO1xucGF1c2UtYWZ0ZXIgPSBQQVVTRTtcbnBhdXNlLWJlZm9yZSA9IFBBVVNFO1xucGl0Y2gtcmFuZ2UgPSBOVU07XG5waXRjaCA9IEZSRVFVRU5DWSB8IHgtbG93IHwgbG93IHwgbWVkaXVtIHwgaGlnaCB8IHgtaGlnaDtcbnBsYXktZHVyaW5nID0gW1VSSSBbIG1peCB8fCByZXBlYXQgXT9dIHwgYXV0byB8IG5vbmU7XG5wb3NpdGlvbiA9IHN0YXRpYyB8IHJlbGF0aXZlIHwgYWJzb2x1dGUgfCBmaXhlZDtcbnF1b3RlcyA9IFtTVFJJTkcgU1RSSU5HXSsgfCBub25lO1xucmljaG5lc3MgPSBOVU07XG5yaWdodCA9IEFQTEVOR1RIO1xuc3BlYWstaGVhZGVyID0gb25jZSB8IGFsd2F5cztcbnNwZWFrLW51bWVyYWwgPSBkaWdpdHMgfCBjb250aW51b3VzO1xuc3BlYWstcHVuY3R1YXRpb24gPSBjb2RlIHwgbm9uZTtcbnNwZWVjaC1yYXRlID0gTlVNIHwgeC1zbG93IHwgc2xvdyB8IG1lZGl1bSB8IGZhc3QgfCB4LWZhc3QgfCBmYXN0ZXIgfCBzbG93ZXI7XG5zdHJlc3MgPSBOVU07XG50YWJsZS1sYXlvdXQgPSBhdXRvIHwgZml4ZWQ7XG50ZXh0LWFsaWduID0gbGVmdCB8IHJpZ2h0IHwgY2VudGVyIHwganVzdGlmeSB8IHN0YXJ0IHwgZW5kO1xudGV4dC1kZWNvcmF0aW9uID0gbm9uZSB8IFsgdW5kZXJsaW5lIHx8IG92ZXJsaW5lIHx8IGxpbmUtdGhyb3VnaCB8fCBibGluayBdO1xudGV4dC1pbmRlbnQgPSBQTEVOR1RIO1xudGV4dC10cmFuc2Zvcm0gPSBjYXBpdGFsaXplIHwgdXBwZXJjYXNlIHwgbG93ZXJjYXNlIHwgbm9uZTtcbnRvcCA9IEFQTEVOR1RIO1xudmVydGljYWwtYWxpZ24gPSBiYXNlbGluZSB8IHN1YiB8IHN1cGVyIHwgdG9wIHwgdGV4dC10b3AgfCBtaWRkbGUgfCBib3R0b20gfCB0ZXh0LWJvdHRvbSB8IFBMRU5HVEg7XG52aXNpYmlsaXR5ID0gdmlzaWJsZSB8IGhpZGRlbiB8IGNvbGxhcHNlO1xudm9pY2UtZmFtaWx5ID0gRkFNSUxZX0xJU1Q7XG52b2x1bWUgPSBOVU0gfCBQRVJDRU5UQUdFIHwgc2lsZW50IHwgeC1zb2Z0IHwgc29mdCB8IG1lZGl1bSB8IGxvdWQgfCB4LWxvdWQ7XG53aGl0ZS1zcGFjZSA9IG5vcm1hbCB8IHByZSB8IG5vd3JhcCB8IHByZS13cmFwIHwgcHJlLWxpbmU7XG53aWRvd3MgPSBQT1NfSU5UO1xud2lkdGggPSBQQVBMRU5HVEggfCBQT1NfTlVNIDtcbndvcmQtc3BhY2luZyA9IG5vcm1hbCB8IExFTkdUSF9PUl9OVU07XG56LWluZGV4ID0gYXV0byB8IElOVDtcblxuW2VwdWIsbW96LG1zLHdlYmtpdF1oeXBoZW5zID0gYXV0byB8IG1hbnVhbCB8IG5vbmU7XG5bd2Via2l0XWh5cGhlbmF0ZS1jaGFyYWN0ZXIgPSBhdXRvIHwgU1RSSU5HO1xuXG4vKiBjc3MtbG9naWNhbCAqL1xubWFyZ2luLWJsb2NrLXN0YXJ0ID0gQVBMRU5HVEg7XG5tYXJnaW4tYmxvY2stZW5kID0gQVBMRU5HVEg7XG5tYXJnaW4taW5saW5lLXN0YXJ0ID0gQVBMRU5HVEg7XG5tYXJnaW4taW5saW5lLWVuZCA9IEFQTEVOR1RIO1xucGFkZGluZy1ibG9jay1zdGFydCA9IEFQTEVOR1RIO1xucGFkZGluZy1ibG9jay1lbmQgPSBBUExFTkdUSDtcbnBhZGRpbmctaW5saW5lLXN0YXJ0ID0gQVBMRU5HVEg7XG5wYWRkaW5nLWlubGluZS1lbmQgPSBBUExFTkdUSDtcbmJvcmRlci1ibG9jay1zdGFydC1jb2xvciA9IEJPUkRFUl9TSURFX0NPTE9SO1xuYm9yZGVyLWJsb2NrLWVuZC1jb2xvciA9IEJPUkRFUl9TSURFX0NPTE9SO1xuYm9yZGVyLWlubGluZS1zdGFydC1jb2xvciA9IEJPUkRFUl9TSURFX0NPTE9SO1xuYm9yZGVyLWlubGluZS1lbmQtY29sb3IgPSBCT1JERVJfU0lERV9DT0xPUjtcbmJvcmRlci1ibG9jay1zdGFydC1zdHlsZSA9IEJPUkRFUl9TSURFX1NUWUxFO1xuYm9yZGVyLWJsb2NrLWVuZC1zdHlsZSA9IEJPUkRFUl9TSURFX1NUWUxFO1xuYm9yZGVyLWlubGluZS1zdGFydC1zdHlsZSA9IEJPUkRFUl9TSURFX1NUWUxFO1xuYm9yZGVyLWlubGluZS1lbmQtc3R5bGUgPSBCT1JERVJfU0lERV9TVFlMRTtcbmJvcmRlci1ibG9jay1zdGFydC13aWR0aCA9IEJPUkRFUl9TSURFX1dJRFRIO1xuYm9yZGVyLWJsb2NrLWVuZC13aWR0aCA9IEJPUkRFUl9TSURFX1dJRFRIO1xuYm9yZGVyLWlubGluZS1zdGFydC13aWR0aCA9IEJPUkRFUl9TSURFX1dJRFRIO1xuYm9yZGVyLWlubGluZS1lbmQtd2lkdGggPSBCT1JERVJfU0lERV9XSURUSDtcbmJsb2NrLXN0YXJ0ID0gQVBMRU5HVEg7XG5ibG9jay1lbmQgPSBBUExFTkdUSDtcbmlubGluZS1zdGFydCA9IEFQTEVOR1RIO1xuaW5saW5lLWVuZCA9IEFQTEVOR1RIO1xuYmxvY2stc2l6ZSA9IFBBUExFTkdUSCB8IFBPU19OVU07XG5pbmxpbmUtc2l6ZSA9IFBBUExFTkdUSCB8IFBPU19OVU07XG5tYXgtYmxvY2stc2l6ZSA9IE5QTEVOR1RIO1xubWF4LWlubGluZS1zaXplID0gTlBMRU5HVEg7XG5taW4tYmxvY2stc2l6ZSA9IGF1dG8gfCBQTEVOR1RIO1xubWluLWlubGluZS1zaXplID0gYXV0byB8IFBMRU5HVEg7XG5cblNIQVBFID0gYXV0byB8IHJlY3RhbmdsZSggUExFTkdUSHs0fSApIHwgIGVsbGlwc2UoIFBMRU5HVEh7NH0gKSB8ICBjaXJjbGUoIFBMRU5HVEh7M30gKSB8XG4gICAgcG9seWdvbiggU1BBQ0UoUExFTkdUSCspKyApO1xuW2VwdWJ4XXNoYXBlLWluc2lkZSA9IFNIQVBFO1xuW2VwdWJ4LHdlYmtpdF1zaGFwZS1vdXRzaWRlID0gU0hBUEU7XG5bZXB1YngsbXNdd3JhcC1mbG93ID0gYXV0byB8IGJvdGggfCBzdGFydCB8IGVuZCB8IG1heGltdW0gfCBjbGVhciB8IGFyb3VuZCAvKiBlcHViIGFsICovO1xuXG5UUkFOU0ZPUk1fRlVOQ1RJT04gPSBtYXRyaXgoTlVNezZ9KSB8IHRyYW5zbGF0ZShQTEVOR1RIezEsMn0pIHwgdHJhbnNsYXRlWChQTEVOR1RIKSB8IHRyYW5zbGF0ZVkoUExFTkdUSCkgfFxuIHNjYWxlKE5VTXsxLDJ9KSB8IHNjYWxlWChOVU0pIHwgc2NhbGVZKE5VTSkgfCByb3RhdGUoQU5HTEUpIHwgc2tld1goQU5HTEUpIHwgc2tld1koQU5HTEUpO1xuW2VwdWIsbXNddHJhbnNmb3JtID0gbm9uZSB8IFRSQU5TRk9STV9GVU5DVElPTis7XG5bZXB1Yixtc110cmFuc2Zvcm0tb3JpZ2luID0gW1tbIHRvcCB8IGJvdHRvbSB8IGxlZnQgfCByaWdodF0gUExFTkdUSD9dIHwgY2VudGVyIHwgUExFTkdUSF17MSwyfTsgLyogcmVsYXhlZCAqL1xuXG5CT1ggPSBib3JkZXItYm94IHwgcGFkZGluZy1ib3ggfCBjb250ZW50LWJveDtcblNIQURPVyA9IFNQQUNFKGluc2V0IHx8IExFTkdUSHsyLDR9IHx8IENPTE9SKTsgLyogcmVsYXhlZCAqL1xuW3dlYmtpdF1iYWNrZ3JvdW5kLXNpemUgPSBDT01NQSggU1BBQ0UoIFtQTEVOR1RIIHwgYXV0byBdezEsMn0gfCBjb3ZlciB8IGNvbnRhaW4pKyApO1xuW3dlYmtpdF1iYWNrZ3JvdW5kLW9yaWdpbiA9IENPTU1BKCBCT1grICk7XG5bd2Via2l0XWJhY2tncm91bmQtY2xpcCA9IENPTU1BKCBCT1grICk7XG5bd2Via2l0XWJveC1zaGFkb3cgPSBub25lIHwgQ09NTUEoIFNIQURPVysgKTtcbnRleHQtc2hhZG93ID0gbm9uZSB8ICBDT01NQSggU0hBRE9XKyApO1xuW3dlYmtpdF1ib3gtZGVjb3JhdGlvbi1icmVhayA9IHNsaWNlIHwgY2xvbmU7XG5GSUxURVJfRlVOQ1RJT04gPSBibHVyKExFTkdUSCkgfCBicmlnaHRuZXNzKE5VTSB8IFBFUkNFTlRBR0UpIHwgY29udHJhc3QoTlVNIHwgUEVSQ0VOVEFHRSkgfCBkcm9wLXNoYWRvdyhTUEFDRShMRU5HVEh7MiwzfSBDT0xPUj8pKVxuICAgICAgICAgICAgICAgIHwgZ3JheXNjYWxlKE5VTSB8IFBFUkNFTlRBR0UpIHwgaHVlLXJvdGF0ZShBTkdMRSkgfCBpbnZlcnQoTlVNIHwgUEVSQ0VOVEFHRSkgfCBvcGFjaXR5KE5VTSB8IFBFUkNFTlRBR0UpXG4gICAgICAgICAgICAgICAgfCBzYXR1cmF0ZShOVU0gfCBQRVJDRU5UQUdFKSB8IHNlcGlhKE5VTSB8IFBFUkNFTlRBR0UpO1xuRklMVEVSX0ZVTkNUSU9OX0xJU1QgPSBGSUxURVJfRlVOQ1RJT04rO1xuW3dlYmtpdF1maWx0ZXIgPSBub25lIHwgRklMVEVSX0ZVTkNUSU9OX0xJU1Q7XG5cbm9wYWNpdHkgPSBOVU07XG5cblttb3osd2Via2l0XWNvbHVtbi13aWR0aCA9IExFTkdUSCB8IGF1dG87XG5bbW96LHdlYmtpdF1jb2x1bW4tY291bnQgPSBJTlQgfCBhdXRvO1xuW21veix3ZWJraXRdY29sdW1uLWdhcCA9IExFTkdUSCB8IG5vcm1hbDtcblttb3osd2Via2l0XWNvbHVtbi1ydWxlLWNvbG9yID0gQ09MT1I7XG5bbW96LHdlYmtpdF1jb2x1bW4tcnVsZS1zdHlsZSA9IEJPUkRFUl9TSURFX1NUWUxFO1xuW21veix3ZWJraXRdY29sdW1uLXJ1bGUtd2lkdGggPSBCT1JERVJfU0lERV9XSURUSDtcbkJSRUFLID0gYXV0byB8IGF2b2lkIHwgYXZvaWQtcGFnZSB8IHBhZ2UgfCBsZWZ0IHwgcmlnaHQgfCByZWN0byB8IHZlcnNvIHwgYXZvaWQtY29sdW1uIHwgY29sdW1uIHwgYXZvaWQtcmVnaW9uIHwgcmVnaW9uO1xuYnJlYWstYmVmb3JlID0gQlJFQUs7XG5icmVhay1hZnRlciA9IEJSRUFLO1xuYnJlYWstaW5zaWRlID0gYXV0byB8IGF2b2lkIHwgYXZvaWQtcGFnZSB8IGF2b2lkLWNvbHVtbiB8IGF2b2lkLXJlZ2lvbjtcblt3ZWJraXRdY29sdW1uLXNwYW4gPSBub25lIHwgYXV0byB8IGFsbDtcblttb3pdY29sdW1uLWZpbGwgPSBhdXRvIHwgYmFsYW5jZSB8IGJhbGFuY2UtYWxsO1xuXG5zcmMgPSBDT01NQShbU1BBQ0UoVVJJIGZvcm1hdChTVFJJTkcrKT8pIHwgbG9jYWwoRkFNSUxZKV0rKTsgLyogZm9yIGZvbnQtZmFjZSAqL1xuXG5bZXB1Yngsd2Via2l0XWZsb3ctZnJvbSA9IElERU5UO1xuW2VwdWJ4LHdlYmtpdF1mbG93LWludG8gPSBJREVOVDtcbltlcHVieF1mbG93LWxpbmdlciA9IElOVCB8IG5vbmU7XG5bZXB1YnhdZmxvdy1wcmlvcml0eSA9IElOVDtcbltlcHVieF1mbG93LW9wdGlvbnMgPSBub25lIHwgWyBleGNsdXNpdmUgfHwgbGFzdCB8fCBzdGF0aWMgXTtcbltlcHVieF1wYWdlID0gSU5UIHwgYXV0bztcbltlcHVieF1taW4tcGFnZS13aWR0aCA9IExFTkdUSDtcbltlcHVieF1taW4tcGFnZS1oZWlnaHQgPSBMRU5HVEg7XG5bZXB1YnhdcmVxdWlyZWQgPSB0cnVlIHwgZmFsc2U7XG5bZXB1YnhdZW5hYmxlZCA9IHRydWUgfCBmYWxzZTtcbltlcHVieF1jb25mbGljdGluZy1wYXJ0aXRpb25zID0gQ09NTUEoSURFTlQrKTtcbltlcHVieF1yZXF1aXJlZC1wYXJ0aXRpb25zID0gQ09NTUEoSURFTlQrKTtcbltlcHVieF1zbmFwLWhlaWdodCA9IExFTkdUSCB8IG5vbmU7XG5bZXB1Ynhdc25hcC13aWR0aCA9IExFTkdUSCB8IG5vbmU7XG5bZXB1YnhdZmxvdy1jb25zdW1lID0gYWxsIHwgc29tZTtcbltlcHVieF11dGlsaXphdGlvbiA9IE5VTTtcbltlcHVieF10ZXh0LXpvb20gPSBmb250LXNpemUgfCBzY2FsZTtcblxuW2FkYXB0XXRlbXBsYXRlID0gVVJJX09SX05PTkU7XG5bYWRhcHRdYmVoYXZpb3IgPSBJREVOVDtcblxuLyogQ1NTIEZvbnRzICovXG5mb250LXNpemUtYWRqdXN0ID0gbm9uZSB8IE5ORUdfTlVNO1xuW3dlYmtpdF1mb250LWtlcm5pbmcgPSBhdXRvIHwgbm9ybWFsIHwgbm9uZTtcbmZvbnQtdmFyaWFudC1lYXN0LWFzaWFuID0gbm9ybWFsIHwgW1sgamlzNzggfCBqaXM4MyB8IGppczkwIHwgamlzMDQgfCBzaW1wbGlmaWVkIHwgdHJhZGl0aW9uYWwgXSB8fCBbIGZ1bGwtd2lkdGggfCBwcm9wb3J0aW9uYWwtd2lkdGggXSB8fCBydWJ5XTtcbmZvbnQtZmVhdHVyZS1zZXR0aW5ncyA9IENPTU1BKCBub3JtYWwgfCBTUEFDRSggU1RSSU5HIFsgb24gfCBvZmYgfCBJTlQgXT8gKSsgKTtcbmZvbnQtc3RyZXRjaCA9IG5vcm1hbCB8IHdpZGVyIHwgbmFycm93ZXIgfCB1bHRyYS1jb25kZW5zZWQgfCBleHRyYS1jb25kZW5zZWQgfCBjb25kZW5zZWQgfCBzZW1pLWNvbmRlbnNlZCB8IHNlbWktZXhwYW5kZWQgfCBleHBhbmRlZCB8IGV4dHJhLWV4cGFuZGVkIHwgdWx0cmEtZXhwYW5kZWQ7XG5cbi8qIENTUyBJbWFnZXMgKi9cbmltYWdlLXJlc29sdXRpb24gPSBSRVNPTFVUSU9OO1xub2JqZWN0LWZpdCA9IGZpbGwgfCBjb250YWluIHwgY292ZXIgfCBub25lIHwgc2NhbGUtZG93bjtcbm9iamVjdC1wb3NpdGlvbiA9IENPTU1BKCBTUEFDRShCR19QT1NJVElPTl9URVJNezEsNH0pKyApOyAvKiByZWxheGVkICovXG5cbi8qIENTUyBQYWdlZCBNZWRpYSAqL1xuUEFHRV9TSVpFID0gYTUgfCBhNCB8IGEzIHwgYjUgfCBiNCB8IGppcy1iNSB8IGppcy1iNCB8IGxldHRlciB8IGxlZ2FsIHwgbGVkZ2VyO1xuYmxlZWQgPSBhdXRvIHwgTEVOR1RIO1xubWFya3MgPSBub25lIHwgWyBjcm9wIHx8IGNyb3NzIF07XG5zaXplID0gUE9TX0xFTkdUSHsxLDJ9IHwgYXV0byB8IFsgUEFHRV9TSVpFIHx8IFsgcG9ydHJhaXQgfCBsYW5kc2NhcGUgXSBdO1xuXG4vKiBDU1MgUGFnZSBGbG9hdHMgKi9cbmZsb2F0LXJlZmVyZW5jZSA9IGlubGluZSB8IGNvbHVtbiB8IHJlZ2lvbiB8IHBhZ2U7XG5mbG9hdCA9IGJsb2NrLXN0YXJ0IHwgYmxvY2stZW5kIHwgaW5saW5lLXN0YXJ0IHwgaW5saW5lLWVuZCB8IHNuYXAtYmxvY2sgfCBzbmFwLWlubGluZSB8IGxlZnQgfCByaWdodCB8IHRvcCB8IGJvdHRvbSB8IG5vbmUgfCBmb290bm90ZTtcbmZsb2F0LW1pbi13cmFwLWJsb2NrID0gUFBMRU5HVEg7XG5cbi8qIENTUyBSdWJ5ICovXG5ydWJ5LWFsaWduID0gc3RhcnQgfCBjZW50ZXIgfCBzcGFjZS1iZXR3ZWVuIHwgc3BhY2UtYXJvdW5kO1xucnVieS1wb3NpdGlvbiA9IG92ZXIgfCB1bmRlciB8IGludGVyLWNoYXJhY3RlcjtcblxuLyogQ1NTIFNpemUgQWRqdXN0ICovXG5bbW96LG1zXXRleHQtc2l6ZS1hZGp1c3QgPSBhdXRvIHwgbm9uZSB8IFBPU19QRVJDRU5UQUdFO1xuXG4vKiBDU1MgVGV4dCAqL1xuW21zLHdlYmtpdF1saW5lLWJyZWFrID0gYXV0byB8IGxvb3NlIHwgbm9ybWFsIHwgc3RyaWN0O1xub3ZlcmZsb3ctd3JhcCA9IG5vcm1hbCB8IGJyZWFrLXdvcmQ7XG5bbW96XXRhYi1zaXplID0gTk5FR19JTlQgfCBOTkVHX0xFTkdUSDtcblttb3osbXNddGV4dC1hbGlnbi1sYXN0ID0gYXV0byB8IHN0YXJ0IHwgZW5kIHwgbGVmdCB8IHJpZ2h0IHwgY2VudGVyIHwganVzdGlmeTtcblttc110ZXh0LWp1c3RpZnkgPSBhdXRvIHwgbm9uZSB8IGludGVyLXdvcmQgfCBpbnRlci1jaGFyYWN0ZXIgfCBpbnRlci1pZGVvZ3JhcGggLyogc3BlY2lmaWVkIGluIFVBIHN0eWxlc2hlZXQgZm9yIElFICovO1xuW21zXXdvcmQtYnJlYWsgPSBub3JtYWwgfCBrZWVwLWFsbCB8IGJyZWFrLWFsbCB8IGJyZWFrLXdvcmQ7XG5bbXNdd29yZC13cmFwID0gbm9ybWFsIHwgYnJlYWstd29yZDtcblxuLyogQ1NTIFRleHQgRGVjb3JhdGlvbiAqL1xuW3dlYmtpdF10ZXh0LWRlY29yYXRpb24tY29sb3IgPSBDT0xPUjtcblt3ZWJraXRddGV4dC1kZWNvcmF0aW9uLWxpbmUgPSBub25lIHwgWyB1bmRlcmxpbmUgfHwgb3ZlcmxpbmUgfHwgbGluZS10aHJvdWdoIHx8IGJsaW5rIF07XG5bd2Via2l0XXRleHQtZGVjb3JhdGlvbi1za2lwID0gbm9uZSB8IFsgb2JqZWN0cyB8fCBzcGFjZXMgfHwgaW5rIHx8IGVkZ2VzIHx8IGJveC1kZWNvcmF0aW9uIF07XG5bd2Via2l0XXRleHQtZGVjb3JhdGlvbi1zdHlsZSA9IHNvbGlkIHwgZG91YmxlIHwgZG90dGVkIHwgZGFzaGVkIHwgd2F2eTtcbltlcHViLHdlYmtpdF10ZXh0LWVtcGhhc2lzLWNvbG9yID0gQ09MT1I7XG5bd2Via2l0XXRleHQtZW1waGFzaXMtcG9zaXRpb24gPSBbIG92ZXIgfCB1bmRlciBdIFsgcmlnaHQgfCBsZWZ0IF07XG5bZXB1Yix3ZWJraXRddGV4dC1lbXBoYXNpcy1zdHlsZSA9IG5vbmUgfCBbWyBmaWxsZWQgfCBvcGVuIF0gfHwgWyBkb3QgfCBjaXJjbGUgfCBkb3VibGUtY2lyY2xlIHwgdHJpYW5nbGUgfCBzZXNhbWUgXV0gfCBTVFJJTkc7XG5bbXMsd2Via2l0XXRleHQtdW5kZXJsaW5lLXBvc2l0aW9uID0gYXV0byB8IFsgdW5kZXIgfHwgWyBsZWZ0IHwgcmlnaHQgXV07XG5cbi8qIENTUyBUcmFuc2Zvcm1zICovXG5bbXMsd2Via2l0XWJhY2tmYWNlLXZpc2liaWxpdHkgPSB2aXNpYmxlIHwgaGlkZGVuO1xuXG4vKiBDU1MgVUkgKi9cbmJveC1zaXppbmcgPSBjb250ZW50LWJveCB8IHBhZGRpbmctYm94IHwgYm9yZGVyLWJveDtcblttc110ZXh0LW92ZXJmbG93ID0gW2NsaXAgfCBlbGxpcHNpcyB8IFNUUklOR117MSwyfTtcblxuLyogQ1NTIFdyaXRpbmcgTW9kZXMgKi9cblt3ZWJraXRddGV4dC1jb21iaW5lID0gbm9uZSB8IGhvcml6b250YWw7XG5bZXB1Yixtc110ZXh0LWNvbWJpbmUtaG9yaXpvbnRhbCA9IG5vbmUgfCBhbGwgfCBbIGRpZ2l0cyBQT1NfSU5UPyBdOyAvKiByZWxheGVkICovXG50ZXh0LWNvbWJpbmUtdXByaWdodCA9IG5vbmUgfCBhbGwgfCBbIGRpZ2l0cyBQT1NfSU5UPyBdOyAvKiByZWxheGVkICovXG5bZXB1Yix3ZWJraXRddGV4dC1vcmllbnRhdGlvbiA9IG1peGVkIHwgdXByaWdodCB8IHNpZGV3YXlzLXJpZ2h0IHwgc2lkZXdheXMtbGVmdCB8IHNpZGV3YXlzIHwgdXNlLWdseXBoLW9yaWVudGF0aW9uIC8qIHRoZSBmb2xsb3dpbmcgdmFsdWVzIGFyZSBrZXB0IGZvciBiYWNrd2FyZC1jb21wYXRpYmlsaXR5ICovIHwgdmVydGljYWwtcmlnaHQgfCByb3RhdGUtcmlnaHQgfCByb3RhdGUtbGVmdCB8IHJvdGF0ZS1ub3JtYWwgfCBhdXRvO1xudW5pY29kZS1iaWRpID0gbm9ybWFsIHwgZW1iZWQgfCBpc29sYXRlIHwgYmlkaS1vdmVycmlkZSB8IGlzb2xhdGUtb3ZlcnJpZGUgfCBwbGFpbnRleHQ7XG5bZXB1Yix3ZWJraXRdd3JpdGluZy1tb2RlID0gaG9yaXpvbnRhbC10YiB8IHZlcnRpY2FsLXJsIHwgbHItdGIgfCBybC10YiB8IHRiLXJsIHwgbHIgfCBybCB8IHRiO1xuXG4vKiBDU1MgRmxleCBib3ggKi9cbkZMRVhfQkFTSVMgPSBjb250ZW50IHwgUEFQTEVOR1RIO1xuZmxleC1kaXJlY3Rpb24gPSByb3cgfCByb3ctcmV2ZXJzZSB8IGNvbHVtbiB8IGNvbHVtbi1yZXZlcnNlO1xuZmxleC13cmFwID0gbm93cmFwIHwgd3JhcCB8IHdyYXAtcmV2ZXJzZTtcbm9yZGVyID0gSU5UO1xuZmxleC1ncm93ID0gTk5FR19OVU07XG5mbGV4LXNocmluayA9IE5ORUdfTlVNO1xuZmxleC1iYXNpcyA9IEZMRVhfQkFTSVM7XG5mbGV4ID0gbm9uZSB8IFsgWyBOTkVHX05VTSBOTkVHX05VTT8gXSB8fCBGTEVYX0JBU0lTIF07XG5qdXN0aWZ5LWNvbnRlbnQgPSBmbGV4LXN0YXJ0IHwgZmxleC1lbmQgfCBjZW50ZXIgfCBzcGFjZS1iZXR3ZWVuIHwgc3BhY2UtYXJvdW5kO1xuYWxpZ24taXRlbXMgPSBmbGV4LXN0YXJ0IHwgZmxleC1lbmQgfCBjZW50ZXIgfCBiYXNlbGluZSB8IHN0cmV0Y2g7XG5hbGlnbi1zZWxmID0gYXV0byB8IGZsZXgtc3RhcnQgfCBmbGV4LWVuZCB8IGNlbnRlciB8IGJhc2VsaW5lIHwgc3RyZXRjaDtcbmFsaWduLWNvbnRlbnQgPSBmbGV4LXN0YXJ0IHwgZmxleC1lbmQgfCBjZW50ZXIgfCBzcGFjZS1iZXR3ZWVuIHwgc3BhY2UtYXJvdW5kIHwgc3RyZXRjaDtcblxuLyogUG9pbnRlciBFdmVudHMgKi9cblttc110b3VjaC1hY3Rpb24gPSBhdXRvIHwgbm9uZSB8IFsgcGFuLXggfHwgcGFuLXkgXSB8IG1hbmlwdWxhdGlvbjtcblxuLyogU1ZHIDIgKi9cbk9QQUNJVFlfVkFMVUUgPSBOVU0gfCBQRVJDRU5UQUdFO1xuREFTSF9BUlJBWSA9IENPTU1BKCBTUEFDRSggWyBMRU5HVEggfCBQRVJDRU5UQUdFIHwgTlVNIF0rICkrICk7XG5QQUlOVCA9IG5vbmUgfCBjaGlsZCB8IGNoaWxkKElOVCkgfCBDT0xPUiB8IFNQQUNFKCBVUkkgW25vbmUgfCBDT0xPUl0/ICkgfCBjb250ZXh0LWZpbGwgfCBjb250ZXh0LXN0cm9rZTtcbmNvbG9yLWludGVycG9sYXRpb24gPSBhdXRvIHwgc1JHQiB8IGxpbmVhclJHQjtcbmNvbG9yLXJlbmRlcmluZyA9IGF1dG8gfCBvcHRpbWl6ZVNwZWVkIHwgb3B0aW1pemVRdWFsaXR5O1xuZmlsbCA9IFBBSU5UO1xuZmlsbC1vcGFjaXR5ID0gT1BBQ0lUWV9WQUxVRTtcbmZpbGwtcnVsZSA9IG5vbnplcm8gfCBldmVub2RkO1xuZ2x5cGgtb3JpZW50YXRpb24tdmVydGljYWwgPSBhdXRvIHwgTlVNIHwgQU5HTEU7XG5pbWFnZS1yZW5kZXJpbmcgPSBhdXRvIHwgb3B0aW1pemVTcGVlZCB8IG9wdGltaXplUXVhbGl0eSB8IGNyaXNwLWVkZ2VzIHwgcGl4ZWxhdGVkO1xubWFya2VyLXN0YXJ0ID0gbm9uZSB8IFVSSTtcbm1hcmtlci1taWQgPSBub25lIHwgVVJJO1xubWFya2VyLWVuZCA9IG5vbmUgfCBVUkk7XG5wb2ludGVyLWV2ZW50cyA9IGJvdW5kaW5nLWJveCB8IHZpc2libGVQYWludGVkIHwgdmlzaWJsZUZpbGwgfCB2aXNpYmxlU3Ryb2tlIHwgdmlzaWJsZSB8IHBhaW50ZWQgfCBmaWxsIHwgc3Ryb2tlIHwgYWxsIHwgbm9uZTtcbnBhaW50LW9yZGVyID0gbm9ybWFsIHwgWyBmaWxsIHx8IHN0cm9rZSB8fCBtYXJrZXJzIF07XG5zaGFwZS1yZW5kZXJpbmcgPSBhdXRvIHwgb3B0aW1pemVTcGVlZCB8IGNyaXNwRWRnZXMgfCBnZW9tZXRyaWNQcmVjaXNpb247XG5zdG9wLWNvbG9yID0gQ09MT1I7XG5zdG9wLW9wYWNpdHkgPSBPUEFDSVRZX1ZBTFVFO1xuc3Ryb2tlID0gUEFJTlQ7XG5zdHJva2UtZGFzaGFycmF5ID0gbm9uZSB8IERBU0hfQVJSQVk7XG5zdHJva2UtZGFzaG9mZnNldCA9IFBFUkNFTlRBR0UgfCBMRU5HVEhfT1JfTlVNO1xuc3Ryb2tlLWxpbmVjYXAgPSBidXR0IHwgcm91bmQgfCBzcXVhcmU7XG5zdHJva2UtbGluZWpvaW4gPSBtaXRlciB8IHJvdW5kIHwgYmV2ZWw7XG5zdHJva2UtbWl0ZXJsaW1pdCA9IE5VTTtcbnN0cm9rZS1vcGFjaXR5ID0gT1BBQ0lUWV9WQUxVRTtcbnN0cm9rZS13aWR0aCA9IFBFUkNFTlRBR0UgfCBMRU5HVEhfT1JfTlVNO1xudGV4dC1hbmNob3IgPSBzdGFydCB8IG1pZGRsZSB8IGVuZDtcbnRleHQtcmVuZGVyaW5nID0gYXV0byB8IG9wdGltaXplU3BlZWQgfCBvcHRpbWl6ZUxlZ2liaWxpdHkgfCBnZW9tZXRyaWNQcmVjaXNpb247XG52ZWN0b3ItZWZmZWN0ID0gbm9uZSB8IFNQQUNFKCBbIG5vbi1zY2FsaW5nLXN0cm9rZSB8IG5vbi1zY2FsaW5nLXNpemUgfCBub24tcm90YXRpb24gfCBmaXhlZC1wb3NpdGlvbiBdKyBbIHZpZXdwb3J0IHwgc2NyZWVuIF0/ICk7XG5cbi8qIFNWRyAxLjEgKi9cbmFsaWdubWVudC1iYXNlbGluZSA9IGF1dG8gfCBiYXNlbGluZSB8IGJlZm9yZS1lZGdlIHwgdGV4dC1iZWZvcmUtZWRnZSB8IG1pZGRsZSB8IGNlbnRyYWwgfCBhZnRlci1lZGdlIHwgdGV4dC1hZnRlci1lZGdlIHwgaWRlb2dyYXBoaWMgfCBhbHBoYWJldGljIHwgaGFuZ2luZyB8IG1hdGhlbWF0aWNhbDtcbmJhc2VsaW5lLXNoaWZ0ID0gYmFzZWxpbmUgfCBzdWIgfCBzdXBlciB8IFBFUkNFTlRBR0UgfCBMRU5HVEhfT1JfTlVNO1xuZG9taW5hbnQtYmFzZWxpbmUgPSBhdXRvIHwgdXNlLXNjcmlwdCB8IG5vLWNoYW5nZSB8IHJlc2V0LXNpemUgfCBpZGVvZ3JhcGhpYyB8IGFscGhhYmV0aWMgfCBoYW5naW5nIHwgbWF0aGVtYXRpY2FsIHwgY2VudHJhbCB8IG1pZGRsZSB8IHRleHQtYWZ0ZXItZWRnZSB8IHRleHQtYmVmb3JlLWVkZ2U7XG5tYXNrID0gbm9uZSB8IFVSSTtcblxuLyogY3NzLW1hc2tpbmctMSAqL1xuU0hBUEVfUkFESVVTID0gUExFTkdUSCB8IGNsb3Nlc3Qtc2lkZSB8IGZhcnRoZXN0LXNpZGU7XG5GSUxMX1JVTEUgPSBub256ZXJvIHwgZXZlbm9kZDtcblNIQVBFX0JPWCA9IEJPWCB8IG1hcmdpbi1ib3g7XG5HRU9NRVRSWV9CT1ggPSBTSEFQRV9CT1ggfCBmaWxsLWJveCB8IHN0cm9rZS1ib3ggfCB2aWV3LWJveDtcbkJBU0lDX1NIQVBFID1cbiAgICBpbnNldCggU1BBQ0UoIFBMRU5HVEh7MSw0fSBbIHJvdW5kIFBMRU5HVEh7MSw0fSBbIFNMQVNIIFBMRU5HVEh7MSw0fSBdPyBdPyApIClcbiAgfCBjaXJjbGUoICBTUEFDRSggW1NIQVBFX1JBRElVU10/ICAgIFthdCBCR19QT1NJVElPTl9URVJNezEsNH1dPyApIClcbiAgfCBlbGxpcHNlKCBTUEFDRSggU0hBUEVfUkFESVVTezJ9PyBbYXQgQkdfUE9TSVRJT05fVEVSTXsxLDR9XT8gKSApXG4gIHwgcG9seWdvbiggRklMTF9SVUxFPyBDT01NQSggU1BBQ0UoIFBMRU5HVEh7Mn0gKSsgKSsgKTtcblt3ZWJraXRdY2xpcC1wYXRoID0gbm9uZSB8IFVSSSB8IFsgQkFTSUNfU0hBUEUgfHwgR0VPTUVUUllfQk9YIF07XG5jbGlwLXJ1bGUgPSBub256ZXJvIHwgZXZlbm9kZDtcblxuLyogZmlsdGVycyAqL1xuZmxvb2QtY29sb3IgPSBDT0xPUjtcbmZsb29kLW9wYWNpdHkgPSBPUEFDSVRZX1ZBTFVFO1xubGlnaHRpbmctY29sb3IgPSBDT0xPUjtcblxuLyogY29tcG9zaXRpbmctMSAqL1xuQkxFTkRfTU9ERSA9IG5vcm1hbCB8IG11bHRpcGx5IHwgc2NyZWVuIHwgb3ZlcmxheSB8IGRhcmtlbiB8IGxpZ2h0ZW4gfCBjb2xvci1kb2RnZSB8IGNvbG9yLWJ1cm4gfCBoYXJkLWxpZ2h0IHwgc29mdC1saWdodCB8IGRpZmZlcmVuY2UgfCBleGNsdXNpb24gfCBodWUgfCBzYXR1cmF0aW9uIHwgY29sb3IgfCBsdW1pbm9zaXR5O1xubWl4LWJsZW5kLW1vZGUgPSBCTEVORF9NT0RFO1xuaXNvbGF0aW9uID0gYXV0byB8IGlzb2xhdGU7XG5iYWNrZ3JvdW5kLWJsZW5kLW1vZGUgPSBDT01NQSggQkxFTkRfTU9ERSsgKTtcblxuLyogQ1NTIEdDUE0gKi9cbnN0cmluZy1zZXQgPSBDT01NQSggU1BBQ0UoIElERU5UIENPTlRFTlRfTElTVCApKyB8IG5vbmUgKTtcbmZvb3Rub3RlLXBvbGljeSA9IGF1dG8gfCBsaW5lO1xuXG4vKiBDU1MgUmVwZWF0ZWQgSGVhZGVycyBhbmQgRm9vdGVycyAqL1xuW3Zpdl1yZXBlYXQtb24tYnJlYWsgPSBhdXRvIHwgbm9uZSB8IGhlYWRlciB8IGZvb3RlcjtcblxuREVGQVVMVFNcblxuYmFja2dyb3VuZC1hdHRhY2htZW50OiBzY3JvbGw7XG5iYWNrZ3JvdW5kLWNvbG9yOiB0cmFuc3BhcmVudDtcbmJhY2tncm91bmQtaW1hZ2U6IG5vbmU7XG5iYWNrZ3JvdW5kLXJlcGVhdDogcmVwZWF0O1xuYmFja2dyb3VuZC1wb3NpdGlvbjogMCUgMCU7XG5iYWNrZ3JvdW5kLWNsaXA6IGJvcmRlci1ib3g7XG5iYWNrZ3JvdW5kLW9yaWdpbjogcGFkZGluZy1ib3g7XG5iYWNrZ3JvdW5kLXNpemU6IGF1dG87XG5ib3JkZXItdG9wLWNvbG9yOiBjdXJyZW50Q29sb3I7XG5ib3JkZXItcmlnaHQtY29sb3I6IGN1cnJlbnRDb2xvcjtcbmJvcmRlci1ib3R0b20tY29sb3I6IGN1cnJlbnRDb2xvcjtcbmJvcmRlci1sZWZ0LWNvbG9yOiBjdXJyZW50Q29sb3I7XG5ib3JkZXItdG9wLXN0eWxlOiBub25lO1xuYm9yZGVyLXJpZ2h0LXN0eWxlOiBub25lO1xuYm9yZGVyLWJvdHRvbS1zdHlsZTogbm9uZTtcbmJvcmRlci1sZWZ0LXN0eWxlOiBub25lO1xuYm9yZGVyLXRvcC13aWR0aDogM3B4O1xuYm9yZGVyLXJpZ2h0LXdpZHRoOiAzcHg7XG5ib3JkZXItYm90dG9tLXdpZHRoOiAzcHg7XG5ib3JkZXItbGVmdC13aWR0aDogM3B4O1xuYm9yZGVyLXRvcC1sZWZ0LXJhZGl1czogMDtcbmJvcmRlci10b3AtcmlnaHQtcmFkaXVzOiAwO1xuYm9yZGVyLWJvdHRvbS1yaWdodC1yYWRpdXM6IDA7XG5ib3JkZXItYm90dG9tLWxlZnQtcmFkaXVzOiAwO1xuYm9yZGVyLWltYWdlLXNvdXJjZTogbm9uZTtcbmJvcmRlci1pbWFnZS1zbGljZTogMTAwJTtcbmJvcmRlci1pbWFnZS13aWR0aDogMTtcbmJvcmRlci1pbWFnZS1vdXRzZXQ6IDA7XG5ib3JkZXItaW1hZ2UtcmVwZWF0OiBzdHJldGNoO1xuY29sdW1uLWNvdW50OiBhdXRvO1xuY29sdW1uLWdhcDogbm9ybWFsO1xuY29sdW1uLXdpZHRoOiBhdXRvO1xuY29sdW1uLXJ1bGUtY29sb3I6IGN1cnJlbnRDb2xvcjtcbmNvbHVtbi1ydWxlLXN0eWxlOiBub25lO1xuY29sdW1uLXJ1bGUtd2lkdGg6IDNweDtcbmNvbHVtbi1maWxsOiBiYWxhbmNlO1xub3V0bGluZS1jb2xvcjogY3VycmVudENvbG9yO1xub3V0bGluZS1zdHlsZTogbm9uZTtcbm91dGxpbmUtd2lkdGg6IDNweDtcbmZsZXgtZGlyZWN0aW9uOiByb3c7XG5mbGV4LXdyYXA6IG5vd3JhcDtcbmZvbnQtZmFtaWx5OiBzZXJpZjtcbmZvbnQtc3R5bGU6IG5vcm1hbDtcbmZvbnQtc2l6ZTogbWVkaXVtO1xuZm9udC12YXJpYW50OiBub3JtYWw7XG5mb250LXdlaWdodDogbm9ybWFsO1xuZm9udC1zdHJldGNoOiBub3JtYWw7XG5saW5lLWhlaWdodDogbm9ybWFsO1xubGlzdC1zdHlsZS1pbWFnZTogbm9uZTtcbmxpc3Qtc3R5bGUtcG9zaXRpb246IG91dHNpZGU7XG5saXN0LXN0eWxlLXR5cGU6IGRpc2M7XG5tYXJnaW4tYm90dG9tOiBhdXRvO1xubWFyZ2luLWxlZnQ6IGF1dG87XG5tYXJnaW4tcmlnaHQ6IGF1dG87XG5tYXJnaW4tdG9wOiBhdXRvO1xucGFkZGluZy1ib3R0b206IGF1dG87XG5wYWRkaW5nLWxlZnQ6IGF1dG87XG5wYWRkaW5nLXJpZ2h0OiBhdXRvO1xucGFkZGluZy10b3A6IGF1dG87XG50ZXh0LWVtcGhhc2lzLWNvbG9yOiBjdXJyZW50Q29sb3I7XG50ZXh0LWVtcGhhc2lzLXN0eWxlOiBub25lO1xubWFya2VyLXN0YXJ0OiBub25lO1xubWFya2VyLW1pZDogbm9uZTtcbm1hcmtlci1lbmQ6IG5vbmU7XG5cbi8qIGNzcy1sb2dpY2FsICovXG5ib3JkZXItYmxvY2stc3RhcnQtY29sb3I6IGN1cnJlbnRDb2xvcjtcbmJvcmRlci1ibG9jay1lbmQtY29sb3I6IGN1cnJlbnRDb2xvcjtcbmJvcmRlci1pbmxpbmUtc3RhcnQtY29sb3I6IGN1cnJlbnRDb2xvcjtcbmJvcmRlci1pbmxpbmUtZW5kLWNvbG9yOiBjdXJyZW50Q29sb3I7XG5ib3JkZXItYmxvY2stc3RhcnQtc3R5bGU6IG5vbmU7XG5ib3JkZXItYmxvY2stZW5kLXN0eWxlOiBub25lO1xuYm9yZGVyLWlubGluZS1zdGFydC1zdHlsZTogbm9uZTtcbmJvcmRlci1pbmxpbmUtZW5kLXN0eWxlOiBub25lO1xuYm9yZGVyLWJsb2NrLXN0YXJ0LXdpZHRoOiAzcHg7XG5ib3JkZXItYmxvY2stZW5kLXdpZHRoOiAzcHg7XG5ib3JkZXItaW5saW5lLXN0YXJ0LXdpZHRoOiAzcHg7XG5ib3JkZXItaW5saW5lLWVuZC13aWR0aDogM3B4O1xuXG5TSE9SVEhBTkRTXG5cbmJhY2tncm91bmQgPSBDT01NQSBiYWNrZ3JvdW5kLWltYWdlIFtiYWNrZ3JvdW5kLXBvc2l0aW9uIFsgLyBiYWNrZ3JvdW5kLXNpemUgXV0gYmFja2dyb3VuZC1yZXBlYXRcbiAgICAgYmFja2dyb3VuZC1hdHRhY2htZW50IFtiYWNrZ3JvdW5kLW9yaWdpbiBiYWNrZ3JvdW5kLWNsaXBdIGJhY2tncm91bmQtY29sb3I7IC8qIGJhY2tncm91bmQtY29sb3IgaXMgYSBzcGVjaWFsIGNhc2UsIHNlZSB0aGUgY29kZSAqL1xuYm9yZGVyLXRvcCA9IGJvcmRlci10b3Atd2lkdGggYm9yZGVyLXRvcC1zdHlsZSBib3JkZXItdG9wLWNvbG9yO1xuYm9yZGVyLXJpZ2h0ID0gYm9yZGVyLXJpZ2h0LXdpZHRoIGJvcmRlci1yaWdodC1zdHlsZSBib3JkZXItcmlnaHQtY29sb3I7XG5ib3JkZXItYm90dG9tID0gYm9yZGVyLWJvdHRvbS13aWR0aCBib3JkZXItYm90dG9tLXN0eWxlIGJvcmRlci1ib3R0b20tY29sb3I7XG5ib3JkZXItbGVmdCA9IGJvcmRlci1sZWZ0LXdpZHRoIGJvcmRlci1sZWZ0LXN0eWxlIGJvcmRlci1sZWZ0LWNvbG9yO1xuYm9yZGVyLXdpZHRoID0gSU5TRVRTIGJvcmRlci10b3Atd2lkdGggYm9yZGVyLXJpZ2h0LXdpZHRoIGJvcmRlci1ib3R0b20td2lkdGggYm9yZGVyLWxlZnQtd2lkdGg7XG5ib3JkZXItc3R5bGUgPSBJTlNFVFMgYm9yZGVyLXRvcC1zdHlsZSBib3JkZXItcmlnaHQtc3R5bGUgYm9yZGVyLWJvdHRvbS1zdHlsZSBib3JkZXItbGVmdC1zdHlsZTtcbmJvcmRlci1jb2xvciA9IElOU0VUUyBib3JkZXItdG9wLWNvbG9yIGJvcmRlci1yaWdodC1jb2xvciBib3JkZXItYm90dG9tLWNvbG9yIGJvcmRlci1sZWZ0LWNvbG9yO1xuYm9yZGVyID0gYm9yZGVyLXdpZHRoIGJvcmRlci1zdHlsZSBib3JkZXItY29sb3I7XG5ib3JkZXItaW1hZ2UgPSBib3JkZXItaW1hZ2Utc291cmNlIGJvcmRlci1pbWFnZS1zbGljZSBbIC8gYm9yZGVyLWltYWdlLXdpZHRoIFsgLyBib3JkZXItaW1hZ2Utb3V0c2V0IF0gXVxuICAgICBib3JkZXItaW1hZ2UtcmVwZWF0O1xuYm9yZGVyLXJhZGl1cyA9IElOU0VUU19TTEFTSCBib3JkZXItdG9wLWxlZnQtcmFkaXVzIGJvcmRlci10b3AtcmlnaHQtcmFkaXVzXG4gICAgIGJvcmRlci1ib3R0b20tcmlnaHQtcmFkaXVzIGJvcmRlci1ib3R0b20tbGVmdC1yYWRpdXM7XG5bbW96LHdlYmtpdF1jb2x1bW5zID0gY29sdW1uLXdpZHRoIGNvbHVtbi1jb3VudDtcblttb3osd2Via2l0XWNvbHVtbi1ydWxlID0gY29sdW1uLXJ1bGUtd2lkdGggY29sdW1uLXJ1bGUtc3R5bGUgY29sdW1uLXJ1bGUtY29sb3I7XG5mbGV4LWZsb3cgPSBmbGV4LWRpcmVjdGlvbiBmbGV4LXdyYXA7XG5vZWItY29sdW1uLW51bWJlciA9IGNvbHVtbi1jb3VudDtcbm91dGxpbmUgPSBvdXRsaW5lLXdpZHRoIG91dGxpbmUtc3R5bGUgb3V0bGluZS1jb2xvcjtcbmxpc3Qtc3R5bGUgPSBsaXN0LXN0eWxlLXR5cGUgbGlzdC1zdHlsZS1wb3NpdGlvbiBsaXN0LXN0eWxlLWltYWdlO1xubWFyZ2luID0gSU5TRVRTIG1hcmdpbi10b3AgbWFyZ2luLXJpZ2h0IG1hcmdpbi1ib3R0b20gbWFyZ2luLWxlZnQ7XG5wYWRkaW5nID0gSU5TRVRTIHBhZGRpbmctdG9wIHBhZGRpbmctcmlnaHQgcGFkZGluZy1ib3R0b20gcGFkZGluZy1sZWZ0O1xucGF1c2UgPSBJTlNFVFMgcGF1c2UtYmVmb3JlIHBhdXNlLWFmdGVyO1xuZm9udCA9IEZPTlQgZm9udC1zdHlsZSBmb250LXZhcmlhbnQgZm9udC13ZWlnaHQgZm9udC1zdHJldGNoIC8qIGZvbnQtc2l6ZSBsaW5lLWhlaWdodCBmb250LWZhbWlseSBhcmUgc3BlY2lhbC1jYXNlZCAqLztcbltlcHViLHdlYmtpdF10ZXh0LWVtcGhhc2lzID0gdGV4dC1lbXBoYXNpcy1zdHlsZSB0ZXh0LWVtcGhhc2lzLWNvbG9yO1xubWFya2VyID0gSU5TRVRTIG1hcmtlci1zdGFydCBtYXJrZXItbWlkIG1hcmtlci1lbmQ7XG5cbi8qIGNzcy1sb2dpY2FsICovXG5tYXJnaW4tYmxvY2sgPSBJTlNFVFMgbWFyZ2luLWJsb2NrLXN0YXJ0IG1hcmdpbi1ibG9jay1lbmQ7XG5tYXJnaW4taW5saW5lID0gSU5TRVRTIG1hcmdpbi1pbmxpbmUtc3RhcnQgbWFyZ2luLWlubGluZS1lbmQ7XG5wYWRkaW5nLWJsb2NrID0gSU5TRVRTIHBhZGRpbmctYmxvY2stc3RhcnQgcGFkZGluZy1ibG9jay1lbmQ7XG5wYWRkaW5nLWlubGluZSA9IElOU0VUUyBwYWRkaW5nLWlubGluZS1zdGFydCBwYWRkaW5nLWlubGluZS1lbmQ7XG5ib3JkZXItYmxvY2std2lkdGggPSBJTlNFVFMgYm9yZGVyLWJsb2NrLXN0YXJ0LXdpZHRoIGJvcmRlci1ibG9jay1lbmQtd2lkdGg7XG5ib3JkZXItYmxvY2stc3R5bGUgPSBJTlNFVFMgYm9yZGVyLWJsb2NrLXN0YXJ0LXN0eWxlIGJvcmRlci1ibG9jay1lbmQtc3R5bGU7XG5ib3JkZXItYmxvY2stY29sb3IgPSBJTlNFVFMgYm9yZGVyLWJsb2NrLXN0YXJ0LWNvbG9yIGJvcmRlci1ibG9jay1lbmQtY29sb3I7XG5ib3JkZXItaW5saW5lLXdpZHRoID0gSU5TRVRTIGJvcmRlci1pbmxpbmUtc3RhcnQtd2lkdGggYm9yZGVyLWlubGluZS1lbmQtd2lkdGg7XG5ib3JkZXItaW5saW5lLXN0eWxlID0gSU5TRVRTIGJvcmRlci1pbmxpbmUtc3RhcnQtc3R5bGUgYm9yZGVyLWlubGluZS1lbmQtc3R5bGU7XG5ib3JkZXItaW5saW5lLWNvbG9yID0gSU5TRVRTIGJvcmRlci1pbmxpbmUtc3RhcnQtY29sb3IgYm9yZGVyLWlubGluZS1lbmQtY29sb3I7XG5ib3JkZXItYmxvY2sgPSBib3JkZXItYmxvY2std2lkdGggYm9yZGVyLWJsb2NrLXN0eWxlIGJvcmRlci1ibG9jay1jb2xvcjtcbmJvcmRlci1pbmxpbmUgPSBib3JkZXItaW5saW5lLXdpZHRoIGJvcmRlci1pbmxpbmUtc3R5bGUgYm9yZGVyLWlubGluZS1jb2xvcjtcbmJvcmRlci1ibG9jay1zdGFydCA9IGJvcmRlci1ibG9jay1zdGFydC13aWR0aCBib3JkZXItYmxvY2stc3RhcnQtc3R5bGUgYm9yZGVyLWJsb2NrLXN0YXJ0LWNvbG9yO1xuYm9yZGVyLWJsb2NrLWVuZCA9IGJvcmRlci1ibG9jay1lbmQtd2lkdGggYm9yZGVyLWJsb2NrLWVuZC1zdHlsZSBib3JkZXItYmxvY2stZW5kLWNvbG9yO1xuYm9yZGVyLWlubGluZS1zdGFydCA9IGJvcmRlci1pbmxpbmUtc3RhcnQtd2lkdGggYm9yZGVyLWlubGluZS1zdGFydC1zdHlsZSBib3JkZXItaW5saW5lLXN0YXJ0LWNvbG9yO1xuYm9yZGVyLWlubGluZS1lbmQgPSBib3JkZXItaW5saW5lLWVuZC13aWR0aCBib3JkZXItaW5saW5lLWVuZC1zdHlsZSBib3JkZXItaW5saW5lLWVuZC1jb2xvcjtcbmluc2V0LWJsb2NrLXN0YXJ0ID0gYmxvY2stc3RhcnQ7XG5pbnNldC1ibG9jay1lbmQgPSBibG9jay1lbmQ7XG5pbnNldC1pbmxpbmUtc3RhcnQgPSBpbmxpbmUtc3RhcnQ7XG5pbnNldC1pbmxpbmUtZW5kID0gaW5saW5lLWVuZDtcbmluc2V0LWJsb2NrID0gSU5TRVRTIGJsb2NrLXN0YXJ0IGJsb2NrLWVuZDtcbmluc2V0LWlubGluZSA9IElOU0VUUyBpbmxpbmUtc3RhcnQgaW5saW5lLWVuZDtcblxuLyogb2xkIG5hbWVzICAqL1xuW2FkYXB0LHdlYmtpdF1tYXJnaW4tYmVmb3JlID0gbWFyZ2luLWJsb2NrLXN0YXJ0O1xuW2FkYXB0LHdlYmtpdF1tYXJnaW4tYWZ0ZXIgPSBtYXJnaW4tYmxvY2stZW5kO1xuW2FkYXB0LHdlYmtpdF1tYXJnaW4tc3RhcnQgPSBtYXJnaW4taW5saW5lLXN0YXJ0O1xuW2FkYXB0LHdlYmtpdF1tYXJnaW4tZW5kID0gbWFyZ2luLWlubGluZS1lbmQ7XG5bYWRhcHQsd2Via2l0XXBhZGRpbmctYmVmb3JlID0gcGFkZGluZy1ibG9jay1zdGFydDtcblthZGFwdCx3ZWJraXRdcGFkZGluZy1hZnRlciA9IHBhZGRpbmctYmxvY2stZW5kO1xuW2FkYXB0LHdlYmtpdF1wYWRkaW5nLXN0YXJ0ID0gcGFkZGluZy1pbmxpbmUtc3RhcnQ7XG5bYWRhcHQsd2Via2l0XXBhZGRpbmctZW5kID0gcGFkZGluZy1pbmxpbmUtZW5kO1xuW2FkYXB0LHdlYmtpdF1ib3JkZXItYmVmb3JlLWNvbG9yID0gYm9yZGVyLWJsb2NrLXN0YXJ0LWNvbG9yO1xuW2FkYXB0LHdlYmtpdF1ib3JkZXItYWZ0ZXItY29sb3IgPSBib3JkZXItYmxvY2stZW5kLWNvbG9yO1xuW2FkYXB0LHdlYmtpdF1ib3JkZXItc3RhcnQtY29sb3IgPSBib3JkZXItaW5saW5lLXN0YXJ0LWNvbG9yO1xuW2FkYXB0LHdlYmtpdF1ib3JkZXItZW5kLWNvbG9yID0gYm9yZGVyLWlubGluZS1lbmQtY29sb3I7XG5bYWRhcHQsd2Via2l0XWJvcmRlci1iZWZvcmUtc3R5bGUgPSBib3JkZXItYmxvY2stc3RhcnQtc3R5bGU7XG5bYWRhcHQsd2Via2l0XWJvcmRlci1hZnRlci1zdHlsZSA9IGJvcmRlci1ibG9jay1lbmQtc3R5bGU7XG5bYWRhcHQsd2Via2l0XWJvcmRlci1zdGFydC1zdHlsZSA9IGJvcmRlci1pbmxpbmUtc3RhcnQtc3R5bGU7XG5bYWRhcHQsd2Via2l0XWJvcmRlci1lbmQtc3R5bGUgPSBib3JkZXItaW5saW5lLWVuZC1zdHlsZTtcblthZGFwdCx3ZWJraXRdYm9yZGVyLWJlZm9yZS13aWR0aCA9IGJvcmRlci1ibG9jay1zdGFydC13aWR0aDtcblthZGFwdCx3ZWJraXRdYm9yZGVyLWFmdGVyLXdpZHRoID0gYm9yZGVyLWJsb2NrLWVuZC13aWR0aDtcblthZGFwdCx3ZWJraXRdYm9yZGVyLXN0YXJ0LXdpZHRoID0gYm9yZGVyLWlubGluZS1zdGFydC13aWR0aDtcblthZGFwdCx3ZWJraXRdYm9yZGVyLWVuZC13aWR0aCA9IGJvcmRlci1pbmxpbmUtZW5kLXdpZHRoO1xuW2FkYXB0LHdlYmtpdF1iZWZvcmUgPSBibG9jay1zdGFydDtcblthZGFwdCx3ZWJraXRdYWZ0ZXIgPSBibG9jay1lbmQ7XG5bYWRhcHQsd2Via2l0XXN0YXJ0ID0gaW5saW5lLXN0YXJ0O1xuW2FkYXB0LHdlYmtpdF1lbmQgPSBpbmxpbmUtZW5kO1xuXG5gO1xuXG4vLyB1c2VyLWFnZW50LnhtbFxuZXhwb3J0IGNvbnN0IFVzZXJBZ2VudFhtbCA9IGBcbjwhRE9DVFlQRSBodG1sPlxuPGh0bWwgeG1sbnM9XCJodHRwOi8vd3d3LnczLm9yZy8xOTk5L3hodG1sXCIgeG1sbnM6cz1cImh0dHA6Ly93d3cucHlyb3h5LmNvbS9ucy9zaGFkb3dcIj5cbjxoZWFkPlxuPHN0eWxlPjwhW0NEQVRBW1xuXG4uZm9vdG5vdGUtY29udGVudCB7XG4gIGZsb2F0OiBmb290bm90ZTtcbn1cblxuLnRhYmxlLWNlbGwtY29udGFpbmVyIHtcbiAgZGlzcGxheTogYmxvY2s7XG59XG5cbl1dPjwvc3R5bGU+XG48L2hlYWQ+XG48Ym9keT5cblxuPHM6dGVtcGxhdGUgaWQ9XCJmb290bm90ZVwiPjxzOmNvbnRlbnQvPjxzOmluY2x1ZGUgY2xhc3M9XCJmb290bm90ZS1jb250ZW50XCIvPjwvczp0ZW1wbGF0ZT5cblxuPHM6dGVtcGxhdGUgaWQ9XCJ0YWJsZS1jZWxsXCI+PGRpdiBkYXRhLXZpdmxpb3N0eWxlLWZsb3ctcm9vdD1cInRydWVcIiBjbGFzcz1cInRhYmxlLWNlbGwtY29udGFpbmVyXCI+PHM6Y29udGVudC8+PC9kaXY+PC9zOnRlbXBsYXRlPlxuXG48L2JvZHk+XG48L2h0bWw+YDtcblxuLy8gdXNlci1hZ2VudC1wYWdlLmNzc1xuZXhwb3J0IGNvbnN0IFVzZXJBZ2VudFBhZ2VDc3MgPSBgXG5AbmFtZXNwYWNlIGh0bWwgXCJodHRwOi8vd3d3LnczLm9yZy8xOTk5L3hodG1sXCI7XG5cbjpyb290IHtcbiAgaHlwaGVuczogLWVwdWJ4LWV4cHIocHJlZi1oeXBoZW5hdGU/IFwiYXV0b1wiOiBcIm1hbnVhbFwiKTtcbn1cbjpyb290W2RhdGEtdml2bGlvc3R5bGUtZXB1Yi1zcGluZS1wcm9wZXJ0aWVzfj1cInBhZ2Utc3ByZWFkLWxlZnRcIl0ge1xuICBicmVhay1iZWZvcmU6IGxlZnQ7XG59XG46cm9vdFtkYXRhLXZpdmxpb3N0eWxlLWVwdWItc3BpbmUtcHJvcGVydGllc349XCJwYWdlLXNwcmVhZC1yaWdodFwiXSB7XG4gIGJyZWFrLWJlZm9yZTogcmlnaHQ7XG59XG5cbkAtYWRhcHQtZm9vdG5vdGUtYXJlYSB7XG4gIGRpc3BsYXk6IGJsb2NrO1xuICBtYXJnaW4tYmxvY2stc3RhcnQ6IDAuNWVtO1xuICBtYXJnaW4tYmxvY2stZW5kOiAwLjVlbTtcbn1cblxuQC1hZGFwdC1mb290bm90ZS1hcmVhIDo6YmVmb3JlIHtcbiAgZGlzcGxheTogYmxvY2s7XG4gIGJvcmRlci1ibG9jay1zdGFydC13aWR0aDogMXB4O1xuICBib3JkZXItYmxvY2stc3RhcnQtc3R5bGU6IHNvbGlkO1xuICBib3JkZXItYmxvY2stc3RhcnQtY29sb3I6IGJsYWNrO1xuICBtYXJnaW4tYmxvY2stZW5kOiAwLjRlbTtcbiAgbWFyZ2luLWlubGluZS1zdGFydDogMDtcbiAgbWFyZ2luLWlubGluZS1lbmQ6IDYwJTtcbn1cblxuLyogZGVmYXVsdCBwYWdlIG1hc3RlciAqL1xuQC1lcHVieC1wYWdlLW1hc3RlciA6YmFja2dyb3VuZC1ob3N0IHtcbiAgQC1lcHVieC1wYXJ0aXRpb24gOmxheW91dC1ob3N0IHtcbiAgICAtZXB1YngtZmxvdy1mcm9tOiBib2R5O1xuICAgIHRvcDogLWVwdWJ4LWV4cHIoaGVhZGVyLm1hcmdpbi1ib3R0b20tZWRnZSk7XG4gICAgYm90dG9tOiAtZXB1YngtZXhwcihwYWdlLWhlaWdodCAtIGZvb3Rlci5tYXJnaW4tdG9wLWVkZ2UpO1xuICAgIGxlZnQ6IDBweDtcbiAgICByaWdodDogMHB4O1xuICAgIGNvbHVtbi13aWR0aDogMjVlbTtcbiAgfVxuICBALWVwdWJ4LXBhcnRpdGlvbiBmb290ZXIgOm9lYi1wYWdlLWZvb3Qge1xuICAgIHdyaXRpbmctbW9kZTogaG9yaXpvbnRhbC10YjtcbiAgICAtZXB1YngtZmxvdy1mcm9tOiBvZWItcGFnZS1mb290O1xuICAgIGJvdHRvbTogMHB4O1xuICAgIGxlZnQ6IDBweDtcbiAgICByaWdodDogMHB4O1xuICB9XG4gIEAtZXB1YngtcGFydGl0aW9uIGhlYWRlciA6b2ViLXBhZ2UtaGVhZCB7XG4gICAgd3JpdGluZy1tb2RlOiBob3Jpem9udGFsLXRiO1xuICAgIC1lcHVieC1mbG93LWZyb206IG9lYi1wYWdlLWhlYWQ7XG4gICAgdG9wOiAwcHg7XG4gICAgbGVmdDogMHB4O1xuICAgIHJpZ2h0OiAwcHg7XG4gIH1cbn1cblxuQHBhZ2Uge1xuICBAdG9wLWxlZnQtY29ybmVyIHtcbiAgICB0ZXh0LWFsaWduOiByaWdodDtcbiAgICB2ZXJ0aWNhbC1hbGlnbjogbWlkZGxlO1xuICB9XG4gIEB0b3AtbGVmdCB7XG4gICAgdGV4dC1hbGlnbjogbGVmdDtcbiAgICB2ZXJ0aWNhbC1hbGlnbjogbWlkZGxlO1xuICB9XG4gIEB0b3AtY2VudGVyIHtcbiAgICB0ZXh0LWFsaWduOiBjZW50ZXI7XG4gICAgdmVydGljYWwtYWxpZ246IG1pZGRsZTtcbiAgfVxuICBAdG9wLXJpZ2h0IHtcbiAgICB0ZXh0LWFsaWduOiByaWdodDtcbiAgICB2ZXJ0aWNhbC1hbGlnbjogbWlkZGxlO1xuICB9XG4gIEB0b3AtcmlnaHQtY29ybmVyIHtcbiAgICB0ZXh0LWFsaWduOiBsZWZ0O1xuICAgIHZlcnRpY2FsLWFsaWduOiBtaWRkbGU7XG4gIH1cbiAgQGxlZnQtdG9wIHtcbiAgICB0ZXh0LWFsaWduOiBjZW50ZXI7XG4gICAgdmVydGljYWwtYWxpZ246IHRvcDtcbiAgfVxuICBAbGVmdC1taWRkbGUge1xuICAgIHRleHQtYWxpZ246IGNlbnRlcjtcbiAgICB2ZXJ0aWNhbC1hbGlnbjogbWlkZGxlO1xuICB9XG4gIEBsZWZ0LWJvdHRvbSB7XG4gICAgdGV4dC1hbGlnbjogY2VudGVyO1xuICAgIHZlcnRpY2FsLWFsaWduOiBib3R0b207XG4gIH1cbiAgQHJpZ2h0LXRvcCB7XG4gICAgdGV4dC1hbGlnbjogY2VudGVyO1xuICAgIHZlcnRpY2FsLWFsaWduOiB0b3A7XG4gIH1cbiAgQHJpZ2h0LW1pZGRsZSB7XG4gICAgdGV4dC1hbGlnbjogY2VudGVyO1xuICAgIHZlcnRpY2FsLWFsaWduOiBtaWRkbGU7XG4gIH1cbiAgQHJpZ2h0LWJvdHRvbSB7XG4gICAgdGV4dC1hbGlnbjogY2VudGVyO1xuICAgIHZlcnRpY2FsLWFsaWduOiBib3R0b207XG4gIH1cbiAgQGJvdHRvbS1sZWZ0LWNvcm5lciB7XG4gICAgdGV4dC1hbGlnbjogcmlnaHQ7XG4gICAgdmVydGljYWwtYWxpZ246IG1pZGRsZTtcbiAgfVxuICBAYm90dG9tLWxlZnQge1xuICAgIHRleHQtYWxpZ246IGxlZnQ7XG4gICAgdmVydGljYWwtYWxpZ246IG1pZGRsZTtcbiAgfVxuICBAYm90dG9tLWNlbnRlciB7XG4gICAgdGV4dC1hbGlnbjogY2VudGVyO1xuICAgIHZlcnRpY2FsLWFsaWduOiBtaWRkbGU7XG4gIH1cbiAgQGJvdHRvbS1yaWdodCB7XG4gICAgdGV4dC1hbGlnbjogcmlnaHQ7XG4gICAgdmVydGljYWwtYWxpZ246IG1pZGRsZTtcbiAgfVxuICBAYm90dG9tLXJpZ2h0LWNvcm5lciB7XG4gICAgdGV4dC1hbGlnbjogbGVmdDtcbiAgICB2ZXJ0aWNhbC1hbGlnbjogbWlkZGxlO1xuICB9XG59XG5cbkBtZWRpYSBwcmludCB7XG4gIEBwYWdlIHtcbiAgICBtYXJnaW46IDEwJTtcbiAgfVxufVxuYDtcblxuLy8gdXNlci1hZ2VudC1iYXNlLmNzc1xuZXhwb3J0IGNvbnN0IFVzZXJBZ2VudEJhc2VDc3MgPSBgXG5AbmFtZXNwYWNlIGh0bWwgXCJodHRwOi8vd3d3LnczLm9yZy8xOTk5L3hodG1sXCI7XG5cbmh0bWx8aHRtbCxcbmh0bWx8YWRkcmVzcyxcbmh0bWx8YmxvY2txdW90ZSxcbmh0bWx8Ym9keSxcbmh0bWx8ZGQsXG5odG1sfGRpdixcbmh0bWx8ZGwsXG5odG1sfGR0LFxuaHRtbHxmaWVsZHNldCxcbmh0bWx8Zm9ybSxcbmh0bWx8ZnJhbWUsXG5odG1sfGZyYW1lc2V0LFxuaHRtbHxoMSxcbmh0bWx8aDIsXG5odG1sfGgzLFxuaHRtbHxoNCxcbmh0bWx8aDUsXG5odG1sfGg2LFxuaHRtbHxub2ZyYW1lcyxcbmh0bWx8b2wsXG5odG1sfHAsXG5odG1sfHVsLFxuaHRtbHxjZW50ZXIsXG5odG1sfGRpcixcbmh0bWx8aHIsXG5odG1sfG1lbnUsXG5odG1sfHByZSxcbmh0bWx8YXJ0aWNsZSxcbmh0bWx8c2VjdGlvbixcbmh0bWx8bmF2LFxuaHRtbHxhc2lkZSxcbmh0bWx8aGdyb3VwLFxuaHRtbHxmb290ZXIsXG5odG1sfGhlYWRlcixcbmh0bWx8ZmlndXJlLFxuaHRtbHxmaWdjYXB0aW9uLFxuaHRtbHxtYWluIHtcbiAgZGlzcGxheTogYmxvY2s7XG4gIHVuaWNvZGUtYmlkaTogbm9ybWFsO1xufVxuaHRtbHxsaSB7XG4gIGRpc3BsYXk6IGxpc3QtaXRlbTtcbn1cbmh0bWx8aGVhZCB7XG4gIGRpc3BsYXk6IG5vbmUgIWltcG9ydGFudDtcbn1cbmh0bWx8dGFibGUge1xuICBkaXNwbGF5OiB0YWJsZTtcbn1cbmh0bWx8dHIge1xuICBkaXNwbGF5OiB0YWJsZS1yb3c7XG59XG5odG1sfHRoZWFkIHtcbiAgZGlzcGxheTogdGFibGUtaGVhZGVyLWdyb3VwO1xuICBicmVhay1hZnRlcjogYXZvaWQ7XG59XG5odG1sfHRib2R5IHtcbiAgZGlzcGxheTogdGFibGUtcm93LWdyb3VwO1xufVxuaHRtbHx0Zm9vdCB7XG4gIGRpc3BsYXk6IHRhYmxlLWZvb3Rlci1ncm91cDtcbiAgYnJlYWstYmVmb3JlOiBhdm9pZDtcbn1cbmh0bWx8Y29sIHtcbiAgZGlzcGxheTogdGFibGUtY29sdW1uO1xufVxuaHRtbHxjb2xncm91cCB7XG4gIGRpc3BsYXk6IHRhYmxlLWNvbHVtbi1ncm91cDtcbn1cbmh0bWx8dGQsXG5odG1sfHRoIHtcbiAgZGlzcGxheTogdGFibGUtY2VsbDtcbn1cbmh0bWx8Y2FwdGlvbiB7XG4gIGRpc3BsYXk6IHRhYmxlLWNhcHRpb247XG4gIHRleHQtYWxpZ246IGNlbnRlcjtcbn1cbmh0bWx8dGgge1xuICBmb250LXdlaWdodDogYm9sZGVyO1xuICB0ZXh0LWFsaWduOiBjZW50ZXI7XG59XG5odG1sfCpbaGlkZGVuXSxcbmh0bWx8bGluayxcbmh0bWx8c3R5bGUsXG5odG1sfHNjcmlwdCB7XG4gIGRpc3BsYXk6IG5vbmU7XG59XG5odG1sfGJvZHkge1xuICBtYXJnaW46IDhweDtcbn1cbmh0bWx8aDEge1xuICBmb250LXNpemU6IDJlbTtcbiAgbWFyZ2luLWJsb2NrLXN0YXJ0OiAwLjY3ZW07XG4gIG1hcmdpbi1ibG9jay1lbmQ6IDAuNjdlbTtcbiAgbWFyZ2luLWlubGluZS1zdGFydDogMGVtO1xuICBtYXJnaW4taW5saW5lLWVuZDogMGVtO1xufVxuaHRtbHxoMiB7XG4gIGZvbnQtc2l6ZTogMS41ZW07XG4gIG1hcmdpbi1ibG9jay1zdGFydDogMC43NWVtO1xuICBtYXJnaW4tYmxvY2stZW5kOiAwLjc1ZW07XG4gIG1hcmdpbi1pbmxpbmUtc3RhcnQ6IDBlbTtcbiAgbWFyZ2luLWlubGluZS1lbmQ6IDBlbTtcbn1cbmh0bWx8aDMge1xuICBmb250LXNpemU6IDEuMTdlbTtcbiAgbWFyZ2luLWJsb2NrLXN0YXJ0OiAwLjgzZW07XG4gIG1hcmdpbi1ibG9jay1lbmQ6IDAuODNlbTtcbiAgbWFyZ2luLWlubGluZS1zdGFydDogMGVtO1xuICBtYXJnaW4taW5saW5lLWVuZDogMGVtO1xufVxuaHRtbHxoNCxcbmh0bWx8cCxcbmh0bWx8YmxvY2txdW90ZSxcbmh0bWx8dWwsXG5odG1sfGZpZWxkc2V0LFxuaHRtbHxmb3JtLFxuaHRtbHxvbCxcbmh0bWx8ZGwsXG5odG1sfGRpcixcbmh0bWx8bWVudSxcbmh0bWx8aDUsXG5odG1sfGg2IHtcbiAgbWFyZ2luLWJsb2NrLXN0YXJ0OiAxZW07XG4gIG1hcmdpbi1ibG9jay1lbmQ6IDFlbTtcbiAgbWFyZ2luLWlubGluZS1zdGFydDogMGVtO1xuICBtYXJnaW4taW5saW5lLWVuZDogMGVtO1xufVxuaHRtbHxoNSB7XG4gIGZvbnQtc2l6ZTogMC44M2VtO1xufVxuaHRtbHxoNiB7XG4gIGZvbnQtc2l6ZTogMC43NWVtO1xufVxuaHRtbHxoMSxcbmh0bWx8aDIsXG5odG1sfGgzLFxuaHRtbHxoNCxcbmh0bWx8aDUsXG5odG1sfGg2LFxuaHRtbHxiLFxuaHRtbHxzdHJvbmcge1xuICBmb250LXdlaWdodDogYm9sZGVyO1xufVxuaHRtbHxoMSxcbmh0bWx8aDIsXG5odG1sfGgzLFxuaHRtbHxoNCxcbmh0bWx8aDUsXG5odG1sfGg2IHtcbiAgYnJlYWstYWZ0ZXI6IGF2b2lkO1xufVxuaHRtbHxibG9ja3F1b3RlIHtcbiAgbWFyZ2luLWJsb2NrLXN0YXJ0OiAwcHg7XG4gIG1hcmdpbi1ibG9jay1lbmQ6IDBweDtcbiAgbWFyZ2luLWlubGluZS1zdGFydDogNDBweDtcbiAgbWFyZ2luLWlubGluZS1lbmQ6IDQwcHg7XG59XG5odG1sfGksXG5odG1sfGNpdGUsXG5odG1sfGVtLFxuaHRtbHx2YXIsXG5odG1sfGFkZHJlc3Mge1xuICBmb250LXN0eWxlOiBpdGFsaWM7XG59XG5odG1sfHByZSxcbmh0bWx8dHQsXG5odG1sfGNvZGUsXG5odG1sfGtiZCxcbmh0bWx8c2FtcCB7XG4gIGZvbnQtZmFtaWx5OiBtb25vc3BhY2U7XG59XG5odG1sfHByZSB7XG4gIHdoaXRlLXNwYWNlOiBwcmU7XG59XG5odG1sfGJ1dHRvbixcbmh0bWx8dGV4dGFyZWEsXG5odG1sfGlucHV0LFxuaHRtbHxzZWxlY3Qge1xuICBkaXNwbGF5OiBpbmxpbmUtYmxvY2s7XG59XG5odG1sfGJpZyB7XG4gIGZvbnQtc2l6ZTogMS4xN2VtO1xufVxuaHRtbHxzbWFsbCxcbmh0bWx8c3ViLFxuaHRtbHxzdXAge1xuICBmb250LXNpemU6IDAuODNlbTtcbn1cbmh0bWx8c3ViIHtcbiAgdmVydGljYWwtYWxpZ246IHN1Yjtcbn1cbmh0bWx8c3VwIHtcbiAgdmVydGljYWwtYWxpZ246IHN1cGVyO1xufVxuaHRtbHx0YWJsZSB7XG4gIGJvcmRlci1zcGFjaW5nOiAycHg7XG59XG5odG1sfHRoZWFkLFxuaHRtbHx0Ym9keSxcbmh0bWx8dGZvb3Qge1xuICB2ZXJ0aWNhbC1hbGlnbjogbWlkZGxlO1xufVxuLyogZm9yIFhIVE1MIHRhYmxlcyB3aXRob3V0IHRib2R5ICovXG5odG1sfHRhYmxlID4gaHRtbHx0ciB7XG4gIHZlcnRpY2FsLWFsaWduOiBtaWRkbGU7XG59XG5odG1sfHRkLFxuaHRtbHx0aCB7XG4gIHZlcnRpY2FsLWFsaWduOiBpbmhlcml0O1xufVxuaHRtbHxzLFxuaHRtbHxzdHJpa2UsXG5odG1sfGRlbCB7XG4gIHRleHQtZGVjb3JhdGlvbjogbGluZS10aHJvdWdoO1xufVxuaHRtbHxociB7XG4gIGJvcmRlcjogMXB4IGluc2V0O1xufVxuaHRtbHxvbCxcbmh0bWx8dWwsXG5odG1sfGRpcixcbmh0bWx8bWVudSxcbmh0bWx8ZGQge1xuICBtYXJnaW46IDBweDtcbiAgbWFyZ2luLWlubGluZS1zdGFydDogNDBweDtcbn1cbmh0bWx8b2wgaHRtbHx1bCxcbmh0bWx8dWwgaHRtbHxvbCxcbmh0bWx8dWwgaHRtbHx1bCxcbmh0bWx8b2wgaHRtbHxvbCB7XG4gIG1hcmdpbi1ibG9jay1zdGFydDogMDtcbiAgbWFyZ2luLWJsb2NrLWVuZDogMDtcbn1cbmh0bWx8dSxcbmh0bWx8aW5zIHtcbiAgdGV4dC1kZWNvcmF0aW9uOiB1bmRlcmxpbmU7XG59XG5odG1sfGNlbnRlciB7XG4gIHRleHQtYWxpZ246IGNlbnRlcjtcbn1cbmh0bWx8cTpiZWZvcmUge1xuICBjb250ZW50OiBvcGVuLXF1b3RlO1xufVxuaHRtbHxxOmFmdGVyIHtcbiAgY29udGVudDogY2xvc2UtcXVvdGU7XG59XG5cbmh0bWx8YXVkaW8sXG5odG1sfHZpZGVvIHtcbiAgYnJlYWstaW5zaWRlOiBhdm9pZDtcbn1cblxuaHRtbHxydWJ5IHtcbiAgZGlzcGxheTogcnVieTtcbn1cbmh0bWx8cnAge1xuICBkaXNwbGF5OiBub25lO1xufVxuaHRtbHxyYmMge1xuICBkaXNwbGF5OiBydWJ5LWJhc2UtY29udGFpbmVyO1xufVxuaHRtbHxydGMge1xuICBkaXNwbGF5OiBydWJ5LXRleHQtY29udGFpbmVyO1xufVxuaHRtbHxyYiB7XG4gIGRpc3BsYXk6IHJ1YnktYmFzZTtcbiAgd2hpdGUtc3BhY2U6IG5vd3JhcDtcbn1cbmh0bWx8cnQge1xuICBkaXNwbGF5OiBydWJ5LXRleHQ7XG59XG5odG1sfHJ1YnksXG5odG1sfHJiLFxuaHRtbHxydCxcbmh0bWx8cmJjLFxuaHRtbHxydGMge1xuICB1bmljb2RlLWJpZGk6IGlzb2xhdGU7XG59XG5cbmh0bWx8cnRjLFxuaHRtbHxydCB7XG4gIGZvbnQtdmFyaWFudC1lYXN0LWFzaWFuOiBydWJ5O1xuICB0ZXh0LWVtcGhhc2lzOiBub25lO1xuICB3aGl0ZS1zcGFjZTogbm93cmFwO1xuICBsaW5lLWhlaWdodDogMTtcbn1cblxuaHRtbHxydGM6bGFuZyh6aCksXG5odG1sfHJ0OmxhbmcoemgpIHtcbiAgcnVieS1hbGlnbjogY2VudGVyO1xufVxuXG5odG1sfHJ0Yyxcbmh0bWx8cnQge1xuICBmb250LXNpemU6IDUwJTtcbn1cblxuaHRtbHxydGM6bGFuZyh6aC1UVyksXG5odG1sfHJ0OmxhbmcoemgtVFcpIHtcbiAgZm9udC1zaXplOiAzMCU7XG59XG5cbmh0bWx8cnRjID4gaHRtbHxydCxcbmh0bWx8cnRjID4gaHRtbHxydDpsYW5nKHpoLVRXKSB7XG4gIGZvbnQtc2l6ZTogMTAwJTtcbn1cblxuLyogQmlkaSBzZXR0aW5ncyAqL1xuaHRtbHxiZG9bZGlyPVwibHRyXCJdIHtcbiAgZGlyZWN0aW9uOiBsdHI7XG4gIHVuaWNvZGUtYmlkaTogYmlkaS1vdmVycmlkZTtcbn1cbmh0bWx8YmRvW2Rpcj1cInJ0bFwiXSB7XG4gIGRpcmVjdGlvbjogcnRsO1xuICB1bmljb2RlLWJpZGk6IGJpZGktb3ZlcnJpZGU7XG59XG5odG1sfCpbZGlyPVwibHRyXCJdIHtcbiAgZGlyZWN0aW9uOiBsdHI7XG4gIHVuaWNvZGUtYmlkaTogZW1iZWQ7XG59XG5odG1sfCpbZGlyPVwicnRsXCJdIHtcbiAgZGlyZWN0aW9uOiBydGw7XG4gIHVuaWNvZGUtYmlkaTogZW1iZWQ7XG59XG5cbi8qLS0tLS0tLS0tLS0tLS0tLS0tIGVwdWItc3BlY2lmaWMgLS0tLS0tLS0tLS0tLS0tLS0tLS0tKi9cblxuQG5hbWVzcGFjZSBlcHViIFwiaHR0cDovL3d3dy5pZHBmLm9yZy8yMDA3L29wc1wiO1xuXG5odG1sfGFbZXB1Ynx0eXBlPVwibm90ZXJlZlwiXSB7XG4gIGZvbnQtc2l6ZTogMC43NWVtO1xuICB2ZXJ0aWNhbC1hbGlnbjogc3VwZXI7XG4gIGxpbmUtaGVpZ2h0OiAwLjAxO1xufVxuXG5odG1sfGFbZXB1Ynx0eXBlPVwibm90ZXJlZlwiXTpocmVmLWVwdWItdHlwZShmb290bm90ZSkge1xuICAtYWRhcHQtdGVtcGxhdGU6IHVybCh1c2VyLWFnZW50LnhtbCNmb290bm90ZSk7XG4gIHRleHQtZGVjb3JhdGlvbjogbm9uZTtcbn1cblxuaHRtbHxhc2lkZVtlcHVifHR5cGU9XCJmb290bm90ZVwiXSB7XG4gIGRpc3BsYXk6IG5vbmU7XG59XG5cbmh0bWx8YXNpZGVbZXB1Ynx0eXBlPVwiZm9vdG5vdGVcIl06Zm9vdG5vdGUtY29udGVudCB7XG4gIGRpc3BsYXk6IGJsb2NrO1xuICBtYXJnaW46IDAuMjVlbTtcbiAgZm9udC1zaXplOiAxLjJlbTtcbiAgbGluZS1oZWlnaHQ6IDEuMjtcbn1cblxuZXB1Ynx0cmlnZ2VyIHtcbiAgZGlzcGxheTogbm9uZTtcbn1cblxuZXB1Ynxzd2l0Y2gge1xuICBkaXNwbGF5OiBpbmxpbmU7XG59XG5cbmVwdWJ8ZGVmYXVsdCB7XG4gIGRpc3BsYXk6IGlubGluZTtcbn1cblxuZXB1YnxjYXNlIHtcbiAgZGlzcGxheTogbm9uZTtcbn1cblxuZXB1YnxjYXNlW3JlcXVpcmVkLW5hbWVzcGFjZTo6c3VwcG9ydGVkXSB7XG4gIGRpc3BsYXk6IGlubGluZTtcbn1cblxuZXB1YnxjYXNlW3JlcXVpcmVkLW5hbWVzcGFjZTo6c3VwcG9ydGVkXSB+IGVwdWJ8Y2FzZSB7XG4gIGRpc3BsYXk6IG5vbmU7XG59XG5cbmVwdWJ8Y2FzZVtyZXF1aXJlZC1uYW1lc3BhY2U6OnN1cHBvcnRlZF0gfiBlcHVifGRlZmF1bHQge1xuICBkaXNwbGF5OiBub25lO1xufVxuXG4vKi0tLS0tLS0tLS0tLS0tLSBuY3ggYW5kIHRvYyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tKi9cblxuQG5hbWVzcGFjZSBuY3ggXCJodHRwOi8vd3d3LmRhaXN5Lm9yZy96Mzk4Ni8yMDA1L25jeC9cIjtcblxubmN4fG5jeCB7XG4gIGRpc3BsYXk6IGJsb2NrO1xuICBwYWRkaW5nLXRvcDogMTBweDtcbiAgcGFkZGluZy1ib3R0b206IDEwcHg7XG59XG5cbm5jeHxjb250ZW50IHtcbiAgZGlzcGxheTogbm9uZTtcbn1cblxuYm9keSA+ICoge1xuICAtYWRhcHQtYmVoYXZpb3I6IGJvZHktY2hpbGQ7XG59XG5cbltyb2xlPVwiZG9jLXRvY1wiXSxcbltyb2xlPVwiZGlyZWN0b3J5XCJdLFxubmF2LFxuLnRvYyxcbiN0b2MsXG4jdGFibGUtb2YtY29udGVudHMsXG4jY29udGVudHMge1xuICAtYWRhcHQtYmVoYXZpb3I6IHRvYy1yb290O1xufVxuXG5bcm9sZT1cImRvYy10b2NcIl0gYSxcbltyb2xlPVwiZGlyZWN0b3J5XCJdIGEsXG5uYXYgYSxcbi50b2MgYSxcbiN0b2MgYSxcbm5jeHxuYXZMYWJlbCB7XG4gIC1hZGFwdC1iZWhhdmlvcjogdG9jLW5vZGUtYW5jaG9yO1xufVxuXG5bcm9sZT1cImRvYy10b2NcIl0gbGksXG5bcm9sZT1cImRpcmVjdG9yeVwiXSBsaSxcbm5hdiBsaSxcbi50b2MgbGksXG4jdG9jIGxpLFxubmN4fG5hdlBvaW50IHtcbiAgLWFkYXB0LWJlaGF2aW9yOiB0b2Mtbm9kZTtcbn1cblxuW3JvbGU9XCJkb2MtdG9jXCJdIGxpID4gKjpmaXJzdC1jaGlsZCxcbltyb2xlPVwiZGlyZWN0b3J5XCJdIGxpID4gKjpmaXJzdC1jaGlsZCxcbm5hdiBsaSA+ICo6Zmlyc3QtY2hpbGQsXG4udG9jIGxpID4gKjpmaXJzdC1jaGlsZCxcbiN0b2MgbGkgPiAqOmZpcnN0LWNoaWxkIHtcbiAgLWFkYXB0LWJlaGF2aW9yOiB0b2Mtbm9kZS1maXJzdC1jaGlsZDtcbn1cblxuW3JvbGU9XCJkb2MtdG9jXCJdIG9sLFxuW3JvbGU9XCJkaXJlY3RvcnlcIl0gb2wsXG5uYXYgb2wsXG4udG9jIG9sLFxuI3RvYyBvbCxcbltyb2xlPVwiZG9jLXRvY1wiXSB1bCxcbltyb2xlPVwiZGlyZWN0b3J5XCJdIHVsLFxubmF2IHVsLFxuLnRvYyB1bCxcbiN0b2MgdWwsXG5vbFtyb2xlPVwiZG9jLXRvY1wiXSxcbm9sW3JvbGU9XCJkaXJlY3RvcnlcIl0sXG5vbC50b2MsXG5vbCN0b2MsXG51bFtyb2xlPVwiZG9jLXRvY1wiXSxcbnVsW3JvbGU9XCJkaXJlY3RvcnlcIl0sXG51bC50b2MsXG51bCN0b2Mge1xuICAtYWRhcHQtYmVoYXZpb3I6IHRvYy1jb250YWluZXI7XG59XG5gO1xuIiwiLyoqXG4gKiBDb3B5cmlnaHQgMjAxMyBHb29nbGUsIEluYy5cbiAqIENvcHlyaWdodCAyMDE1IFRyaW0tbWFya3MgSW5jLlxuICogQ29weXJpZ2h0IDIwMTkgVml2bGlvc3R5bGUgRm91bmRhdGlvblxuICpcbiAqIFZpdmxpb3N0eWxlLmpzIGlzIGZyZWUgc29mdHdhcmU6IHlvdSBjYW4gcmVkaXN0cmlidXRlIGl0IGFuZC9vciBtb2RpZnlcbiAqIGl0IHVuZGVyIHRoZSB0ZXJtcyBvZiB0aGUgR05VIEFmZmVybyBHZW5lcmFsIFB1YmxpYyBMaWNlbnNlIGFzIHB1Ymxpc2hlZCBieVxuICogdGhlIEZyZWUgU29mdHdhcmUgRm91bmRhdGlvbiwgZWl0aGVyIHZlcnNpb24gMyBvZiB0aGUgTGljZW5zZSwgb3JcbiAqIChhdCB5b3VyIG9wdGlvbikgYW55IGxhdGVyIHZlcnNpb24uXG4gKlxuICogVml2bGlvc3R5bGUuanMgaXMgZGlzdHJpYnV0ZWQgaW4gdGhlIGhvcGUgdGhhdCBpdCB3aWxsIGJlIHVzZWZ1bCxcbiAqIGJ1dCBXSVRIT1VUIEFOWSBXQVJSQU5UWTsgd2l0aG91dCBldmVuIHRoZSBpbXBsaWVkIHdhcnJhbnR5IG9mXG4gKiBNRVJDSEFOVEFCSUxJVFkgb3IgRklUTkVTUyBGT1IgQSBQQVJUSUNVTEFSIFBVUlBPU0UuICBTZWUgdGhlXG4gKiBHTlUgQWZmZXJvIEdlbmVyYWwgUHVibGljIExpY2Vuc2UgZm9yIG1vcmUgZGV0YWlscy5cbiAqXG4gKiBZb3Ugc2hvdWxkIGhhdmUgcmVjZWl2ZWQgYSBjb3B5IG9mIHRoZSBHTlUgQWZmZXJvIEdlbmVyYWwgUHVibGljIExpY2Vuc2VcbiAqIGFsb25nIHdpdGggVml2bGlvc3R5bGUuanMuICBJZiBub3QsIHNlZSA8aHR0cDovL3d3dy5nbnUub3JnL2xpY2Vuc2VzLz4uXG4gKlxuICogQGZpbGVvdmVydmlldyBDc3NQYXJzZXIgLSBDU1MgUGFyc2VyLlxuICovXG5pbXBvcnQgKiBhcyBCYXNlIGZyb20gXCIuL2Jhc2VcIjtcbmltcG9ydCAqIGFzIENzcyBmcm9tIFwiLi9jc3NcIjtcbmltcG9ydCAqIGFzIENzc1Rva2VuaXplciBmcm9tIFwiLi9jc3MtdG9rZW5pemVyXCI7XG5pbXBvcnQgKiBhcyBFeHBycyBmcm9tIFwiLi9leHByc1wiO1xuaW1wb3J0ICogYXMgTG9nZ2luZyBmcm9tIFwiLi9sb2dnaW5nXCI7XG5pbXBvcnQgKiBhcyBOZXQgZnJvbSBcIi4vbmV0XCI7XG5pbXBvcnQgKiBhcyBUYXNrIGZyb20gXCIuL3Rhc2tcIjtcblxuLyoqXG4gKiBVc2VyIGFnZW50IHN0eWxlc2hlZXQgYmFzZSBzcGVjaWZpY2l0eS5cbiAqL1xuZXhwb3J0IGNvbnN0IFNQRUNJRklDSVRZX1VTRVJfQUdFTlQ6IG51bWJlciA9IDA7XG5cbi8qKlxuICogVXNlciBzdHlsZXNoZWV0IGJhc2Ugc3BlY2lmaWNpdHkuXG4gKi9cbmV4cG9ydCBjb25zdCBTUEVDSUZJQ0lUWV9VU0VSOiBudW1iZXIgPSAxNjc3NzIxNjtcblxuLyoqXG4gKiBBdXRob3Igc3R5bGVzaGVldCAoXCJub3JtYWxcIiBzdHlsZXNoZWV0KSBiYXNlIHNwZWNpZmljaXR5LlxuICovXG5leHBvcnQgY29uc3QgU1BFQ0lGSUNJVFlfQVVUSE9SOiBudW1iZXIgPSAzMzU1NDQzMjtcblxuLyoqXG4gKiBTdHlsZSBhdHRyaWJ1dGUgYmFzZSBzcGVjaWZpY2l0eS5cbiAqL1xuZXhwb3J0IGNvbnN0IFNQRUNJRklDSVRZX1NUWUxFOiBudW1iZXIgPSA1MDMzMTY0ODtcblxuLyoqXG4gKiBTdHlsZSBhdHRyaWJ1dGUgYmFzZSBzcGVjaWZpY2l0eSB3aGVuICFpbXBvcnRhbnQgaXMgdXNlZC5cbiAqL1xuZXhwb3J0IGNvbnN0IFNQRUNJRklDSVRZX1NUWUxFX0lNUE9SVEFOVDogbnVtYmVyID0gNjcxMDg4NjQ7XG5cbi8qKlxuICogQXV0aG9yIHN0eWxlc2hlZXQgYmFzZSBzcGVjaWZpY2l0eSB3aGVuICFpbXBvcnRhbnQgaXMgdXNlZC5cbiAqL1xuZXhwb3J0IGNvbnN0IFNQRUNJRklDSVRZX0FVVEhPUl9JTVBPUlRBTlQ6IG51bWJlciA9IDgzODg2MDgwO1xuXG4vKipcbiAqIFVzZXIgc3R5bGVzaGVldCBiYXNlIHNwZWNpZmljaXR5IHdoZW4gIWltcG9ydGFudCBpcyB1c2VkLlxuICovXG5leHBvcnQgY29uc3QgU1BFQ0lGSUNJVFlfVVNFUl9JTVBPUlRBTlQ6IG51bWJlciA9IDEwMDY2MzI5NjtcblxuLyoqXG4gKiBAZW51bSB7c3RyaW5nfVxuICovXG5leHBvcnQgZW51bSBTdHlsZXNoZWV0Rmxhdm9yIHtcbiAgVVNFUl9BR0VOVCA9IFwiVUFcIixcbiAgVVNFUiA9IFwiVXNlclwiLFxuICBBVVRIT1IgPSBcIkF1dGhvclwiLFxufVxuXG4vKipcbiAqIENTUyBDb2xvciB2YWx1ZSBmcm9tIGhhc2ggdGV4dCAod2l0aG91dCAnIycgY2hhcmFjdGVyKS5cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGNvbG9yRnJvbUhhc2godGV4dDogc3RyaW5nKTogQ3NzLkNvbG9yIHtcbiAgbGV0IG51bSA9IHBhcnNlSW50KHRleHQsIDE2KTtcbiAgaWYgKGlzTmFOKG51bSkpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoXCJFX0NTU19DT0xPUlwiKTtcbiAgfVxuICBpZiAodGV4dC5sZW5ndGggPT0gNikge1xuICAgIHJldHVybiBuZXcgQ3NzLkNvbG9yKG51bSk7XG4gIH1cbiAgaWYgKHRleHQubGVuZ3RoID09IDMpIHtcbiAgICBudW0gPVxuICAgICAgKG51bSAmIDE1KSB8XG4gICAgICAoKG51bSAmIDE1KSA8PCA0KSB8XG4gICAgICAoKG51bSAmIDI0MCkgPDwgNCkgfFxuICAgICAgKChudW0gJiAyNDApIDw8IDgpIHxcbiAgICAgICgobnVtICYgMzg0MCkgPDwgOCkgfFxuICAgICAgKChudW0gJiAzODQwKSA8PCAxMik7XG4gICAgcmV0dXJuIG5ldyBDc3MuQ29sb3IobnVtKTtcbiAgfVxuICB0aHJvdyBuZXcgRXJyb3IoXCJFX0NTU19DT0xPUlwiKTtcbn1cblxuZXhwb3J0IGNsYXNzIFBhcnNlckhhbmRsZXIgaW1wbGVtZW50cyBDc3NUb2tlbml6ZXIuVG9rZW5pemVySGFuZGxlciB7XG4gIGZsYXZvcjogU3R5bGVzaGVldEZsYXZvcjtcblxuICBjb25zdHJ1Y3RvcihwdWJsaWMgc2NvcGU6IEV4cHJzLkxleGljYWxTY29wZSkge1xuICAgIHRoaXMuZmxhdm9yID0gU3R5bGVzaGVldEZsYXZvci5BVVRIT1I7XG4gIH1cblxuICBnZXRDdXJyZW50VG9rZW4oKTogQ3NzVG9rZW5pemVyLlRva2VuIHtcbiAgICByZXR1cm4gbnVsbDtcbiAgfVxuXG4gIGdldFNjb3BlKCk6IEV4cHJzLkxleGljYWxTY29wZSB7XG4gICAgcmV0dXJuIHRoaXMuc2NvcGU7XG4gIH1cblxuICBlcnJvcihtbmVtb25pY3M6IHN0cmluZywgdG9rZW46IENzc1Rva2VuaXplci5Ub2tlbik6IHZvaWQge31cblxuICBzdGFydFN0eWxlc2hlZXQoZmxhdm9yOiBTdHlsZXNoZWV0Rmxhdm9yKTogdm9pZCB7XG4gICAgdGhpcy5mbGF2b3IgPSBmbGF2b3I7XG4gIH1cblxuICB0YWdTZWxlY3Rvcihuczogc3RyaW5nIHwgbnVsbCwgbmFtZTogc3RyaW5nIHwgbnVsbCk6IHZvaWQge31cblxuICBjbGFzc1NlbGVjdG9yKG5hbWU6IHN0cmluZyk6IHZvaWQge31cblxuICBwc2V1ZG9jbGFzc1NlbGVjdG9yKG5hbWU6IHN0cmluZywgcGFyYW1zOiAobnVtYmVyIHwgc3RyaW5nKVtdKTogdm9pZCB7fVxuXG4gIHBzZXVkb2VsZW1lbnRTZWxlY3RvcihuYW1lOiBzdHJpbmcsIHBhcmFtczogKG51bWJlciB8IHN0cmluZylbXSk6IHZvaWQge31cblxuICBpZFNlbGVjdG9yKGlkOiBzdHJpbmcpOiB2b2lkIHt9XG5cbiAgYXR0cmlidXRlU2VsZWN0b3IoXG4gICAgbnM6IHN0cmluZyxcbiAgICBuYW1lOiBzdHJpbmcsXG4gICAgb3A6IENzc1Rva2VuaXplci5Ub2tlblR5cGUsXG4gICAgdmFsdWU6IHN0cmluZyB8IG51bGwsXG4gICk6IHZvaWQge31cblxuICBkZXNjZW5kYW50U2VsZWN0b3IoKTogdm9pZCB7fVxuXG4gIGNoaWxkU2VsZWN0b3IoKTogdm9pZCB7fVxuXG4gIGFkamFjZW50U2libGluZ1NlbGVjdG9yKCk6IHZvaWQge31cblxuICBmb2xsb3dpbmdTaWJsaW5nU2VsZWN0b3IoKTogdm9pZCB7fVxuXG4gIG5leHRTZWxlY3RvcigpOiB2b2lkIHt9XG5cbiAgc3RhcnRTZWxlY3RvclJ1bGUoKTogdm9pZCB7fVxuXG4gIHN0YXJ0Rm9udEZhY2VSdWxlKCk6IHZvaWQge31cblxuICBzdGFydEZvb3Rub3RlUnVsZShwc2V1ZG9lbGVtOiBzdHJpbmcgfCBudWxsKTogdm9pZCB7fVxuXG4gIHN0YXJ0Vmlld3BvcnRSdWxlKCk6IHZvaWQge31cblxuICBzdGFydERlZmluZVJ1bGUoKTogdm9pZCB7fVxuXG4gIHN0YXJ0UmVnaW9uUnVsZSgpOiB2b2lkIHt9XG5cbiAgc3RhcnRQYWdlUnVsZSgpOiB2b2lkIHt9XG5cbiAgc3RhcnRQYWdlTWFyZ2luQm94UnVsZShuYW1lOiBzdHJpbmcpOiB2b2lkIHt9XG5cbiAgc3RhcnRXaGVuUnVsZShleHByOiBDc3MuRXhwcik6IHZvaWQge31cblxuICBzdGFydE1lZGlhUnVsZShleHByOiBDc3MuRXhwcik6IHZvaWQge1xuICAgIHRoaXMuc3RhcnRXaGVuUnVsZShleHByKTtcbiAgfVxuXG4gIHN0YXJ0Rmxvd1J1bGUoZmxvd05hbWU6IHN0cmluZyk6IHZvaWQge31cblxuICBzdGFydFBhZ2VUZW1wbGF0ZVJ1bGUoKTogdm9pZCB7fVxuXG4gIHN0YXJ0UGFnZU1hc3RlclJ1bGUoXG4gICAgbmFtZTogc3RyaW5nIHwgbnVsbCxcbiAgICBwc2V1ZG9OYW1lOiBzdHJpbmcgfCBudWxsLFxuICAgIGNsYXNzZXM6IHN0cmluZ1tdLFxuICApOiB2b2lkIHt9XG5cbiAgc3RhcnRQYXJ0aXRpb25SdWxlKFxuICAgIG5hbWU6IHN0cmluZyB8IG51bGwsXG4gICAgcHNldWRvTmFtZTogc3RyaW5nIHwgbnVsbCxcbiAgICBjbGFzc2VzOiBzdHJpbmdbXSxcbiAgKTogdm9pZCB7fVxuXG4gIHN0YXJ0UGFydGl0aW9uR3JvdXBSdWxlKFxuICAgIG5hbWU6IHN0cmluZyB8IG51bGwsXG4gICAgcHNldWRvTmFtZTogc3RyaW5nIHwgbnVsbCxcbiAgICBjbGFzc2VzOiBzdHJpbmdbXSxcbiAgKTogdm9pZCB7fVxuXG4gIHN0YXJ0UnVsZUJvZHkoKTogdm9pZCB7fVxuXG4gIHByb3BlcnR5KG5hbWU6IHN0cmluZywgdmFsdWU6IENzcy5WYWwsIGltcG9ydGFudDogYm9vbGVhbik6IHZvaWQge31cblxuICBlbmRSdWxlKCk6IHZvaWQge31cblxuICAvKipcbiAgICogQHBhcmFtIGZ1bmNOYW1lIFRoZSBuYW1lIG9mIHRoZSBmdW5jdGlvbiB0YWtpbmcgYSBzZWxlY3RvciBsaXN0IGFzIGFuXG4gICAqICAgICBhcmd1bWVudFxuICAgKi9cbiAgc3RhcnRGdW5jV2l0aFNlbGVjdG9yKGZ1bmNOYW1lOiBzdHJpbmcpOiB2b2lkIHt9XG5cbiAgZW5kRnVuY1dpdGhTZWxlY3RvcigpOiB2b2lkIHt9XG5cbiAgZ2V0SW1wb3J0YW50U3BlY2lmaWNpdHkoKTogbnVtYmVyIHtcbiAgICBzd2l0Y2ggKHRoaXMuZmxhdm9yKSB7XG4gICAgICBjYXNlIFN0eWxlc2hlZXRGbGF2b3IuVVNFUl9BR0VOVDpcbiAgICAgICAgcmV0dXJuIFNQRUNJRklDSVRZX1VTRVJfQUdFTlQ7XG4gICAgICBjYXNlIFN0eWxlc2hlZXRGbGF2b3IuVVNFUjpcbiAgICAgICAgcmV0dXJuIFNQRUNJRklDSVRZX1VTRVJfSU1QT1JUQU5UO1xuICAgICAgZGVmYXVsdDpcbiAgICAgICAgcmV0dXJuIFNQRUNJRklDSVRZX0FVVEhPUl9JTVBPUlRBTlQ7XG4gICAgfVxuICB9XG5cbiAgZ2V0QmFzZVNwZWNpZmljaXR5KCk6IG51bWJlciB7XG4gICAgc3dpdGNoICh0aGlzLmZsYXZvcikge1xuICAgICAgY2FzZSBTdHlsZXNoZWV0Rmxhdm9yLlVTRVJfQUdFTlQ6XG4gICAgICAgIHJldHVybiBTUEVDSUZJQ0lUWV9VU0VSX0FHRU5UO1xuICAgICAgY2FzZSBTdHlsZXNoZWV0Rmxhdm9yLlVTRVI6XG4gICAgICAgIHJldHVybiBTUEVDSUZJQ0lUWV9VU0VSO1xuICAgICAgZGVmYXVsdDpcbiAgICAgICAgcmV0dXJuIFNQRUNJRklDSVRZX0FVVEhPUjtcbiAgICB9XG4gIH1cbn1cblxuZXhwb3J0IGNsYXNzIERpc3BhdGNoUGFyc2VySGFuZGxlciBleHRlbmRzIFBhcnNlckhhbmRsZXIge1xuICBzdGFjazogUGFyc2VySGFuZGxlcltdID0gW107XG4gIHRva2VuaXplcjogQ3NzVG9rZW5pemVyLlRva2VuaXplciA9IG51bGw7XG4gIHNsYXZlOiBQYXJzZXJIYW5kbGVyID0gbnVsbDtcblxuICBjb25zdHJ1Y3RvcigpIHtcbiAgICBzdXBlcihudWxsKTtcbiAgfVxuXG4gIHB1c2hIYW5kbGVyKHNsYXZlOiBQYXJzZXJIYW5kbGVyKTogdm9pZCB7XG4gICAgdGhpcy5zdGFjay5wdXNoKHRoaXMuc2xhdmUpO1xuICAgIHRoaXMuc2xhdmUgPSBzbGF2ZTtcbiAgfVxuXG4gIHBvcEhhbmRsZXIoKTogdm9pZCB7XG4gICAgdGhpcy5zbGF2ZSA9IHRoaXMuc3RhY2sucG9wKCk7XG4gIH1cblxuICAvKipcbiAgICogQG92ZXJyaWRlXG4gICAqL1xuICBnZXRDdXJyZW50VG9rZW4oKTogQ3NzVG9rZW5pemVyLlRva2VuIHtcbiAgICBpZiAodGhpcy50b2tlbml6ZXIpIHtcbiAgICAgIHJldHVybiB0aGlzLnRva2VuaXplci50b2tlbigpO1xuICAgIH1cbiAgICByZXR1cm4gbnVsbDtcbiAgfVxuXG4gIC8qKlxuICAgKiBAb3ZlcnJpZGVcbiAgICovXG4gIGdldFNjb3BlKCk6IEV4cHJzLkxleGljYWxTY29wZSB7XG4gICAgcmV0dXJuIHRoaXMuc2xhdmUuZ2V0U2NvcGUoKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBGb3J3YXJkcyBjYWxsIHRvIHNsYXZlLlxuICAgKiBAb3ZlcnJpZGVcbiAgICovXG4gIGVycm9yKG1uZW1vbmljczogc3RyaW5nLCB0b2tlbjogQ3NzVG9rZW5pemVyLlRva2VuKTogdm9pZCB7XG4gICAgdGhpcy5zbGF2ZS5lcnJvcihtbmVtb25pY3MsIHRva2VuKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBDYWxsZWQgYnkgYSBzbGF2ZS5cbiAgICovXG4gIGVycm9yTXNnKG1uZW1vbmljczogc3RyaW5nLCB0b2tlbjogQ3NzVG9rZW5pemVyLlRva2VuKTogdm9pZCB7XG4gICAgTG9nZ2luZy5sb2dnZXIud2FybihtbmVtb25pY3MpO1xuICB9XG5cbiAgLyoqXG4gICAqIEBvdmVycmlkZVxuICAgKi9cbiAgc3RhcnRTdHlsZXNoZWV0KGZsYXZvcjogU3R5bGVzaGVldEZsYXZvcik6IHZvaWQge1xuICAgIHN1cGVyLnN0YXJ0U3R5bGVzaGVldChmbGF2b3IpO1xuICAgIGlmICh0aGlzLnN0YWNrLmxlbmd0aCA+IDApIHtcbiAgICAgIC8vIFRoaXMgY2FuIG9jY3VyIGFzIGEgcmVzdWx0IG9mIGFuIGVycm9yXG4gICAgICB0aGlzLnNsYXZlID0gdGhpcy5zdGFja1swXTtcbiAgICAgIHRoaXMuc3RhY2sgPSBbXTtcbiAgICB9XG4gICAgdGhpcy5zbGF2ZS5zdGFydFN0eWxlc2hlZXQoZmxhdm9yKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBAb3ZlcnJpZGVcbiAgICovXG4gIHRhZ1NlbGVjdG9yKG5zOiBzdHJpbmcgfCBudWxsLCBuYW1lOiBzdHJpbmcgfCBudWxsKTogdm9pZCB7XG4gICAgdGhpcy5zbGF2ZS50YWdTZWxlY3RvcihucywgbmFtZSk7XG4gIH1cblxuICAvKipcbiAgICogQG92ZXJyaWRlXG4gICAqL1xuICBjbGFzc1NlbGVjdG9yKG5hbWU6IHN0cmluZyk6IHZvaWQge1xuICAgIHRoaXMuc2xhdmUuY2xhc3NTZWxlY3RvcihuYW1lKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBAb3ZlcnJpZGVcbiAgICovXG4gIHBzZXVkb2NsYXNzU2VsZWN0b3IobmFtZTogc3RyaW5nLCBwYXJhbXM6IChudW1iZXIgfCBzdHJpbmcpW10pOiB2b2lkIHtcbiAgICB0aGlzLnNsYXZlLnBzZXVkb2NsYXNzU2VsZWN0b3IobmFtZSwgcGFyYW1zKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBAb3ZlcnJpZGVcbiAgICovXG4gIHBzZXVkb2VsZW1lbnRTZWxlY3RvcihuYW1lOiBzdHJpbmcsIHBhcmFtczogKG51bWJlciB8IHN0cmluZylbXSk6IHZvaWQge1xuICAgIHRoaXMuc2xhdmUucHNldWRvZWxlbWVudFNlbGVjdG9yKG5hbWUsIHBhcmFtcyk7XG4gIH1cblxuICAvKipcbiAgICogQG92ZXJyaWRlXG4gICAqL1xuICBpZFNlbGVjdG9yKGlkOiBzdHJpbmcpOiB2b2lkIHtcbiAgICB0aGlzLnNsYXZlLmlkU2VsZWN0b3IoaWQpO1xuICB9XG5cbiAgLyoqXG4gICAqIEBvdmVycmlkZVxuICAgKi9cbiAgYXR0cmlidXRlU2VsZWN0b3IoXG4gICAgbnM6IHN0cmluZyxcbiAgICBuYW1lOiBzdHJpbmcsXG4gICAgb3A6IENzc1Rva2VuaXplci5Ub2tlblR5cGUsXG4gICAgdmFsdWU6IHN0cmluZyB8IG51bGwsXG4gICk6IHZvaWQge1xuICAgIHRoaXMuc2xhdmUuYXR0cmlidXRlU2VsZWN0b3IobnMsIG5hbWUsIG9wLCB2YWx1ZSk7XG4gIH1cblxuICAvKipcbiAgICogQG92ZXJyaWRlXG4gICAqL1xuICBkZXNjZW5kYW50U2VsZWN0b3IoKTogdm9pZCB7XG4gICAgdGhpcy5zbGF2ZS5kZXNjZW5kYW50U2VsZWN0b3IoKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBAb3ZlcnJpZGVcbiAgICovXG4gIGNoaWxkU2VsZWN0b3IoKTogdm9pZCB7XG4gICAgdGhpcy5zbGF2ZS5jaGlsZFNlbGVjdG9yKCk7XG4gIH1cblxuICAvKipcbiAgICogQG92ZXJyaWRlXG4gICAqL1xuICBhZGphY2VudFNpYmxpbmdTZWxlY3RvcigpOiB2b2lkIHtcbiAgICB0aGlzLnNsYXZlLmFkamFjZW50U2libGluZ1NlbGVjdG9yKCk7XG4gIH1cblxuICAvKipcbiAgICogQG92ZXJyaWRlXG4gICAqL1xuICBmb2xsb3dpbmdTaWJsaW5nU2VsZWN0b3IoKTogdm9pZCB7XG4gICAgdGhpcy5zbGF2ZS5mb2xsb3dpbmdTaWJsaW5nU2VsZWN0b3IoKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBAb3ZlcnJpZGVcbiAgICovXG4gIG5leHRTZWxlY3RvcigpOiB2b2lkIHtcbiAgICB0aGlzLnNsYXZlLm5leHRTZWxlY3RvcigpO1xuICB9XG5cbiAgLyoqXG4gICAqIEBvdmVycmlkZVxuICAgKi9cbiAgc3RhcnRTZWxlY3RvclJ1bGUoKTogdm9pZCB7XG4gICAgdGhpcy5zbGF2ZS5zdGFydFNlbGVjdG9yUnVsZSgpO1xuICB9XG5cbiAgLyoqXG4gICAqIEBvdmVycmlkZVxuICAgKi9cbiAgc3RhcnRGb250RmFjZVJ1bGUoKTogdm9pZCB7XG4gICAgdGhpcy5zbGF2ZS5zdGFydEZvbnRGYWNlUnVsZSgpO1xuICB9XG5cbiAgLyoqXG4gICAqIEBvdmVycmlkZVxuICAgKi9cbiAgc3RhcnRGb290bm90ZVJ1bGUocHNldWRvZWxlbTogc3RyaW5nIHwgbnVsbCk6IHZvaWQge1xuICAgIHRoaXMuc2xhdmUuc3RhcnRGb290bm90ZVJ1bGUocHNldWRvZWxlbSk7XG4gIH1cblxuICAvKipcbiAgICogQG92ZXJyaWRlXG4gICAqL1xuICBzdGFydFZpZXdwb3J0UnVsZSgpOiB2b2lkIHtcbiAgICB0aGlzLnNsYXZlLnN0YXJ0Vmlld3BvcnRSdWxlKCk7XG4gIH1cblxuICAvKipcbiAgICogQG92ZXJyaWRlXG4gICAqL1xuICBzdGFydERlZmluZVJ1bGUoKTogdm9pZCB7XG4gICAgdGhpcy5zbGF2ZS5zdGFydERlZmluZVJ1bGUoKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBAb3ZlcnJpZGVcbiAgICovXG4gIHN0YXJ0UmVnaW9uUnVsZSgpOiB2b2lkIHtcbiAgICB0aGlzLnNsYXZlLnN0YXJ0UmVnaW9uUnVsZSgpO1xuICB9XG5cbiAgLyoqXG4gICAqIEBvdmVycmlkZVxuICAgKi9cbiAgc3RhcnRQYWdlUnVsZSgpOiB2b2lkIHtcbiAgICB0aGlzLnNsYXZlLnN0YXJ0UGFnZVJ1bGUoKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBAb3ZlcnJpZGVcbiAgICovXG4gIHN0YXJ0UGFnZU1hcmdpbkJveFJ1bGUobmFtZTogc3RyaW5nKTogdm9pZCB7XG4gICAgdGhpcy5zbGF2ZS5zdGFydFBhZ2VNYXJnaW5Cb3hSdWxlKG5hbWUpO1xuICB9XG5cbiAgLyoqXG4gICAqIEBvdmVycmlkZVxuICAgKi9cbiAgc3RhcnRXaGVuUnVsZShleHByOiBDc3MuRXhwcik6IHZvaWQge1xuICAgIHRoaXMuc2xhdmUuc3RhcnRXaGVuUnVsZShleHByKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBAb3ZlcnJpZGVcbiAgICovXG4gIHN0YXJ0Rmxvd1J1bGUoZmxvd05hbWU6IHN0cmluZyk6IHZvaWQge1xuICAgIHRoaXMuc2xhdmUuc3RhcnRGbG93UnVsZShmbG93TmFtZSk7XG4gIH1cblxuICAvKipcbiAgICogQG92ZXJyaWRlXG4gICAqL1xuICBzdGFydFBhZ2VUZW1wbGF0ZVJ1bGUoKTogdm9pZCB7XG4gICAgdGhpcy5zbGF2ZS5zdGFydFBhZ2VUZW1wbGF0ZVJ1bGUoKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBAb3ZlcnJpZGVcbiAgICovXG4gIHN0YXJ0UGFnZU1hc3RlclJ1bGUoXG4gICAgbmFtZTogc3RyaW5nIHwgbnVsbCxcbiAgICBwc2V1ZG9OYW1lOiBzdHJpbmcgfCBudWxsLFxuICAgIGNsYXNzZXM6IHN0cmluZ1tdLFxuICApOiB2b2lkIHtcbiAgICB0aGlzLnNsYXZlLnN0YXJ0UGFnZU1hc3RlclJ1bGUobmFtZSwgcHNldWRvTmFtZSwgY2xhc3Nlcyk7XG4gIH1cblxuICAvKipcbiAgICogQG92ZXJyaWRlXG4gICAqL1xuICBzdGFydFBhcnRpdGlvblJ1bGUoXG4gICAgbmFtZTogc3RyaW5nIHwgbnVsbCxcbiAgICBwc2V1ZG9OYW1lOiBzdHJpbmcgfCBudWxsLFxuICAgIGNsYXNzZXM6IHN0cmluZ1tdLFxuICApOiB2b2lkIHtcbiAgICB0aGlzLnNsYXZlLnN0YXJ0UGFydGl0aW9uUnVsZShuYW1lLCBwc2V1ZG9OYW1lLCBjbGFzc2VzKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBAb3ZlcnJpZGVcbiAgICovXG4gIHN0YXJ0UGFydGl0aW9uR3JvdXBSdWxlKFxuICAgIG5hbWU6IHN0cmluZyB8IG51bGwsXG4gICAgcHNldWRvTmFtZTogc3RyaW5nIHwgbnVsbCxcbiAgICBjbGFzc2VzOiBzdHJpbmdbXSxcbiAgKTogdm9pZCB7XG4gICAgdGhpcy5zbGF2ZS5zdGFydFBhcnRpdGlvbkdyb3VwUnVsZShuYW1lLCBwc2V1ZG9OYW1lLCBjbGFzc2VzKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBAb3ZlcnJpZGVcbiAgICovXG4gIHN0YXJ0UnVsZUJvZHkoKTogdm9pZCB7XG4gICAgdGhpcy5zbGF2ZS5zdGFydFJ1bGVCb2R5KCk7XG4gIH1cblxuICAvKipcbiAgICogQG92ZXJyaWRlXG4gICAqL1xuICBwcm9wZXJ0eShuYW1lOiBzdHJpbmcsIHZhbHVlOiBDc3MuVmFsLCBpbXBvcnRhbnQ6IGJvb2xlYW4pOiB2b2lkIHtcbiAgICB0aGlzLnNsYXZlLnByb3BlcnR5KG5hbWUsIHZhbHVlLCBpbXBvcnRhbnQpO1xuICB9XG5cbiAgLyoqXG4gICAqIEBvdmVycmlkZVxuICAgKi9cbiAgZW5kUnVsZSgpOiB2b2lkIHtcbiAgICB0aGlzLnNsYXZlLmVuZFJ1bGUoKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBAb3ZlcnJpZGVcbiAgICovXG4gIHN0YXJ0RnVuY1dpdGhTZWxlY3RvcihmdW5jTmFtZTogc3RyaW5nKTogdm9pZCB7XG4gICAgdGhpcy5zbGF2ZS5zdGFydEZ1bmNXaXRoU2VsZWN0b3IoZnVuY05hbWUpO1xuICB9XG5cbiAgLyoqXG4gICAqIEBvdmVycmlkZVxuICAgKi9cbiAgZW5kRnVuY1dpdGhTZWxlY3RvcigpOiB2b2lkIHtcbiAgICB0aGlzLnNsYXZlLmVuZEZ1bmNXaXRoU2VsZWN0b3IoKTtcbiAgfVxufVxuXG5leHBvcnQgY2xhc3MgU2tpcHBpbmdQYXJzZXJIYW5kbGVyIGV4dGVuZHMgUGFyc2VySGFuZGxlciB7XG4gIGRlcHRoOiBudW1iZXIgPSAwO1xuICBmbGF2b3I6IFN0eWxlc2hlZXRGbGF2b3I7XG5cbiAgY29uc3RydWN0b3IoXG4gICAgc2NvcGU6IEV4cHJzLkxleGljYWxTY29wZSxcbiAgICBwdWJsaWMgb3duZXI6IERpc3BhdGNoUGFyc2VySGFuZGxlcixcbiAgICBwdWJsaWMgcmVhZG9ubHkgdG9wTGV2ZWwsXG4gICkge1xuICAgIHN1cGVyKHNjb3BlKTtcbiAgICBpZiAob3duZXIpIHtcbiAgICAgIHRoaXMuZmxhdm9yID0gb3duZXIuZmxhdm9yO1xuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAgKiBAb3ZlcnJpZGVcbiAgICovXG4gIGdldEN1cnJlbnRUb2tlbigpOiBDc3NUb2tlbml6ZXIuVG9rZW4ge1xuICAgIHJldHVybiB0aGlzLm93bmVyLmdldEN1cnJlbnRUb2tlbigpO1xuICB9XG5cbiAgLyoqXG4gICAqIEBvdmVycmlkZVxuICAgKi9cbiAgZXJyb3IobW5lbW9uaWNzOiBzdHJpbmcsIHRva2VuOiBDc3NUb2tlbml6ZXIuVG9rZW4pOiB2b2lkIHtcbiAgICB0aGlzLm93bmVyLmVycm9yTXNnKG1uZW1vbmljcywgdG9rZW4pO1xuICB9XG5cbiAgLyoqXG4gICAqIEBvdmVycmlkZVxuICAgKi9cbiAgc3RhcnRSdWxlQm9keSgpOiB2b2lkIHtcbiAgICB0aGlzLmRlcHRoKys7XG4gIH1cblxuICAvKipcbiAgICogQG92ZXJyaWRlXG4gICAqL1xuICBlbmRSdWxlKCk6IHZvaWQge1xuICAgIGlmICgtLXRoaXMuZGVwdGggPT0gMCAmJiAhdGhpcy50b3BMZXZlbCkge1xuICAgICAgdGhpcy5vd25lci5wb3BIYW5kbGVyKCk7XG4gICAgfVxuICB9XG59XG5cbmV4cG9ydCBjbGFzcyBTbGF2ZVBhcnNlckhhbmRsZXIgZXh0ZW5kcyBTa2lwcGluZ1BhcnNlckhhbmRsZXIge1xuICBjb25zdHJ1Y3RvcihcbiAgICBzY29wZTogRXhwcnMuTGV4aWNhbFNjb3BlLFxuICAgIG93bmVyOiBEaXNwYXRjaFBhcnNlckhhbmRsZXIsXG4gICAgdG9wTGV2ZWw6IGJvb2xlYW4sXG4gICkge1xuICAgIHN1cGVyKHNjb3BlLCBvd25lciwgdG9wTGV2ZWwpO1xuICB9XG5cbiAgcmVwb3J0KG1lc3NhZ2U6IHN0cmluZyk6IHZvaWQge1xuICAgIHRoaXMuZXJyb3IobWVzc2FnZSwgdGhpcy5nZXRDdXJyZW50VG9rZW4oKSk7XG4gIH1cblxuICByZXBvcnRBbmRTa2lwKG1lc3NhZ2U6IHN0cmluZyk6IHZvaWQge1xuICAgIHRoaXMucmVwb3J0KG1lc3NhZ2UpO1xuICAgIHRoaXMub3duZXIucHVzaEhhbmRsZXIoXG4gICAgICBuZXcgU2tpcHBpbmdQYXJzZXJIYW5kbGVyKHRoaXMuc2NvcGUsIHRoaXMub3duZXIsIGZhbHNlKSxcbiAgICApO1xuICB9XG5cbiAgLyoqXG4gICAqIEBvdmVycmlkZVxuICAgKi9cbiAgc3RhcnRTZWxlY3RvclJ1bGUoKTogdm9pZCB7XG4gICAgdGhpcy5yZXBvcnRBbmRTa2lwKFwiRV9DU1NfVU5FWFBFQ1RFRF9TRUxFQ1RPUlwiKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBAb3ZlcnJpZGVcbiAgICovXG4gIHN0YXJ0Rm9udEZhY2VSdWxlKCk6IHZvaWQge1xuICAgIHRoaXMucmVwb3J0QW5kU2tpcChcIkVfQ1NTX1VORVhQRUNURURfRk9OVF9GQUNFXCIpO1xuICB9XG5cbiAgLyoqXG4gICAqIEBvdmVycmlkZVxuICAgKi9cbiAgc3RhcnRGb290bm90ZVJ1bGUocHNldWRvZWxlbTogc3RyaW5nIHwgbnVsbCk6IHZvaWQge1xuICAgIHRoaXMucmVwb3J0QW5kU2tpcChcIkVfQ1NTX1VORVhQRUNURURfRk9PVE5PVEVcIik7XG4gIH1cblxuICAvKipcbiAgICogQG92ZXJyaWRlXG4gICAqL1xuICBzdGFydFZpZXdwb3J0UnVsZSgpOiB2b2lkIHtcbiAgICB0aGlzLnJlcG9ydEFuZFNraXAoXCJFX0NTU19VTkVYUEVDVEVEX1ZJRVdQT1JUXCIpO1xuICB9XG5cbiAgLyoqXG4gICAqIEBvdmVycmlkZVxuICAgKi9cbiAgc3RhcnREZWZpbmVSdWxlKCk6IHZvaWQge1xuICAgIHRoaXMucmVwb3J0QW5kU2tpcChcIkVfQ1NTX1VORVhQRUNURURfREVGSU5FXCIpO1xuICB9XG5cbiAgLyoqXG4gICAqIEBvdmVycmlkZVxuICAgKi9cbiAgc3RhcnRSZWdpb25SdWxlKCk6IHZvaWQge1xuICAgIHRoaXMucmVwb3J0QW5kU2tpcChcIkVfQ1NTX1VORVhQRUNURURfUkVHSU9OXCIpO1xuICB9XG5cbiAgLyoqXG4gICAqIEBvdmVycmlkZVxuICAgKi9cbiAgc3RhcnRQYWdlUnVsZSgpOiB2b2lkIHtcbiAgICB0aGlzLnJlcG9ydEFuZFNraXAoXCJFX0NTU19VTkVYUEVDVEVEX1BBR0VcIik7XG4gIH1cblxuICAvKipcbiAgICogQG92ZXJyaWRlXG4gICAqL1xuICBzdGFydFdoZW5SdWxlKGV4cHI6IENzcy5FeHByKTogdm9pZCB7XG4gICAgdGhpcy5yZXBvcnRBbmRTa2lwKFwiRV9DU1NfVU5FWFBFQ1RFRF9XSEVOXCIpO1xuICB9XG5cbiAgLyoqXG4gICAqIEBvdmVycmlkZVxuICAgKi9cbiAgc3RhcnRGbG93UnVsZShmbG93TmFtZTogc3RyaW5nKTogdm9pZCB7XG4gICAgdGhpcy5yZXBvcnRBbmRTa2lwKFwiRV9DU1NfVU5FWFBFQ1RFRF9GTE9XXCIpO1xuICB9XG5cbiAgLyoqXG4gICAqIEBvdmVycmlkZVxuICAgKi9cbiAgc3RhcnRQYWdlVGVtcGxhdGVSdWxlKCk6IHZvaWQge1xuICAgIHRoaXMucmVwb3J0QW5kU2tpcChcIkVfQ1NTX1VORVhQRUNURURfUEFHRV9URU1QTEFURVwiKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBAb3ZlcnJpZGVcbiAgICovXG4gIHN0YXJ0UGFnZU1hc3RlclJ1bGUoXG4gICAgbmFtZTogc3RyaW5nIHwgbnVsbCxcbiAgICBwc2V1ZG9OYW1lOiBzdHJpbmcgfCBudWxsLFxuICAgIGNsYXNzZXM6IHN0cmluZ1tdLFxuICApOiB2b2lkIHtcbiAgICB0aGlzLnJlcG9ydEFuZFNraXAoXCJFX0NTU19VTkVYUEVDVEVEX1BBR0VfTUFTVEVSXCIpO1xuICB9XG5cbiAgLyoqXG4gICAqIEBvdmVycmlkZVxuICAgKi9cbiAgc3RhcnRQYXJ0aXRpb25SdWxlKFxuICAgIG5hbWU6IHN0cmluZyB8IG51bGwsXG4gICAgcHNldWRvTmFtZTogc3RyaW5nIHwgbnVsbCxcbiAgICBjbGFzc2VzOiBzdHJpbmdbXSxcbiAgKTogdm9pZCB7XG4gICAgdGhpcy5yZXBvcnRBbmRTa2lwKFwiRV9DU1NfVU5FWFBFQ1RFRF9QQVJUSVRJT05cIik7XG4gIH1cblxuICAvKipcbiAgICogQG92ZXJyaWRlXG4gICAqL1xuICBzdGFydFBhcnRpdGlvbkdyb3VwUnVsZShcbiAgICBuYW1lOiBzdHJpbmcgfCBudWxsLFxuICAgIHBzZXVkb05hbWU6IHN0cmluZyB8IG51bGwsXG4gICAgY2xhc3Nlczogc3RyaW5nW10sXG4gICk6IHZvaWQge1xuICAgIHRoaXMucmVwb3J0QW5kU2tpcChcIkVfQ1NTX1VORVhQRUNURURfUEFSVElUSU9OX0dST1VQXCIpO1xuICB9XG5cbiAgLyoqXG4gICAqIEBvdmVycmlkZVxuICAgKi9cbiAgc3RhcnRGdW5jV2l0aFNlbGVjdG9yKGZ1bmNOYW1lOiBzdHJpbmcpOiB2b2lkIHtcbiAgICB0aGlzLnJlcG9ydEFuZFNraXAoXCJFX0NTU19VTkVYUEVDVEVEX1NFTEVDVE9SX0ZVTkNcIik7XG4gIH1cblxuICAvKipcbiAgICogQG92ZXJyaWRlXG4gICAqL1xuICBlbmRGdW5jV2l0aFNlbGVjdG9yKCk6IHZvaWQge1xuICAgIHRoaXMucmVwb3J0QW5kU2tpcChcIkVfQ1NTX1VORVhQRUNURURfRU5EX1NFTEVDVE9SX0ZVTkNcIik7XG4gIH1cblxuICAvKipcbiAgICogQG92ZXJyaWRlXG4gICAqL1xuICBwcm9wZXJ0eShuYW1lOiBzdHJpbmcsIHZhbHVlOiBDc3MuVmFsLCBpbXBvcnRhbnQ6IGJvb2xlYW4pOiB2b2lkIHtcbiAgICB0aGlzLmVycm9yKFwiRV9DU1NfVU5FWFBFQ1RFRF9QUk9QRVJUWVwiLCB0aGlzLmdldEN1cnJlbnRUb2tlbigpKTtcbiAgfVxufVxuXG5leHBvcnQgY29uc3QgYWN0aW9uc0Jhc2U6IEFjdGlvbltdID0gW107XG5cbmV4cG9ydCBjb25zdCBhY3Rpb25zU3R5bGVBdHRyaWJ1dGU6IEFjdGlvbltdID0gW107XG5cbmV4cG9ydCBjb25zdCBhY3Rpb25zU2VsZWN0b3I6IEFjdGlvbltdID0gW107XG5cbmV4cG9ydCBjb25zdCBhY3Rpb25zU2VsZWN0b3JJbkZ1bmM6IEFjdGlvbltdID0gW107XG5cbmV4cG9ydCBjb25zdCBhY3Rpb25zU2VsZWN0b3JDb250OiBBY3Rpb25bXSA9IFtdO1xuXG5leHBvcnQgY29uc3QgYWN0aW9uc1NlbGVjdG9yU3RhcnQ6IEFjdGlvbltdID0gW107XG5cbmV4cG9ydCBjb25zdCBhY3Rpb25zUHJvcFZhbDogQWN0aW9uW10gPSBbXTtcblxuZXhwb3J0IGNvbnN0IGFjdGlvbnNFeHByVmFsOiBBY3Rpb25bXSA9IFtdO1xuXG5leHBvcnQgY29uc3QgYWN0aW9uc0V4cHJPcDogQWN0aW9uW10gPSBbXTtcblxuZXhwb3J0IGNvbnN0IGFjdGlvbnNFcnJvcjogQWN0aW9uW10gPSBbXTtcblxuZXhwb3J0IGNvbnN0IGFjdGlvbnNFcnJvckRlY2w6IEFjdGlvbltdID0gW107XG5cbmV4cG9ydCBjb25zdCBhY3Rpb25zRXJyb3JTZWxlY3RvcjogQWN0aW9uW10gPSBbXTtcblxuZXhwb3J0IGNvbnN0IHByaW9yaXR5OiBudW1iZXJbXSA9IFtdO1xuXG4vKipcbiAqIEBlbnVtIHtudW1iZXJ9XG4gKi9cbmV4cG9ydCBlbnVtIEFjdGlvbiB7XG4gIFNFTEVDVE9SX05BTUVfMSA9IDEsXG4gIFNFTEVDVE9SX05BTUUsXG4gIFNFTEVDVE9SX0FOWV8xLFxuICBTRUxFQ1RPUl9BTlksXG4gIFNFTEVDVE9SX0lEXzEsXG4gIFNFTEVDVE9SX0lELFxuICBTRUxFQ1RPUl9DTEFTU18xLFxuICBTRUxFQ1RPUl9DTEFTUyxcbiAgU0VMRUNUT1JfQVRUUl8xLFxuICBTRUxFQ1RPUl9BVFRSLFxuICBTRUxFQ1RPUl9DSElMRCxcbiAgU0VMRUNUT1JfU0lCTElORyxcbiAgU0VMRUNUT1JfQk9EWSxcbiAgU0VMRUNUT1JfUFNFVURPQ0xBU1MsXG4gIFZBTF9JREVOVCxcbiAgVkFMX0hBU0gsXG4gIFZBTF9OVU0sXG4gIFZBTF9JTlQsXG4gIFZBTF9OVU1FUklDLFxuICBWQUxfU1RSLFxuICBWQUxfVVJMLFxuICBWQUxfQ09NTUEsXG4gIFZBTF9TTEFTSCxcbiAgVkFMX0ZVTkMsXG4gIFZBTF9DX1BBUixcbiAgVkFMX0VORCxcbiAgUlVMRV9FTkQsXG4gIElERU5ULFxuICBTRUxFQ1RPUl9TVEFSVCxcbiAgQVQsXG4gIEVYUFJfSURFTlQsXG4gIEVYUFJfTlVNLFxuICBFWFBSX05VTUVSSUMsXG4gIEVYUFJfU1RSLFxuICBFWFBSX1BBUkFNLFxuICBFWFBSX1BSRUZJWCxcbiAgRVhQUl9JTkZJWCxcbiAgRVhQUl9GVU5DLFxuICBFWFBSX0NfUEFSLFxuICBFWFBSX09fUEFSLFxuICBTRUxFQ1RPUl9ORVhULFxuICBTRUxFQ1RPUl9QU0VVRE9FTEVNLFxuICBFWFBSX09fQlJDLFxuICBWQUxfRklOSVNILFxuICBFWFBSX0lORklYX05BTUUsXG4gIFBST1AsXG4gIFZBTF9CQU5HLFxuICBWQUxfQlJDLFxuICBFWFBSX1NFTUlDT0wsXG4gIEVSUk9SX1BVU0gsXG4gIEVSUk9SX1BPUCxcbiAgRVJST1JfUE9QX0RFQ0wsXG4gIEVSUk9SX1NFTUlDT0wsXG4gIFZBTF9QTFVTLFxuICBTRUxFQ1RPUl9QU0VVRE9DTEFTU18xLFxuICBTRUxFQ1RPUl9GT0xMT1dJTkdfU0lCTElORyxcbiAgRE9ORSA9IDIwMCxcbn1cblxuZXhwb3J0IGNvbnN0IE9QX01FRElBX0FORDogbnVtYmVyID0gQ3NzVG9rZW5pemVyLlRva2VuVHlwZS5MQVNUICsgMTtcblxuKCgpID0+IHtcbiAgYWN0aW9uc0Jhc2VbQ3NzVG9rZW5pemVyLlRva2VuVHlwZS5JREVOVF0gPSBBY3Rpb24uSURFTlQ7XG4gIGFjdGlvbnNCYXNlW0Nzc1Rva2VuaXplci5Ub2tlblR5cGUuU1RBUl0gPSBBY3Rpb24uU0VMRUNUT1JfU1RBUlQ7XG4gIGFjdGlvbnNCYXNlW0Nzc1Rva2VuaXplci5Ub2tlblR5cGUuSEFTSF0gPSBBY3Rpb24uU0VMRUNUT1JfU1RBUlQ7XG4gIGFjdGlvbnNCYXNlW0Nzc1Rva2VuaXplci5Ub2tlblR5cGUuQ0xBU1NdID0gQWN0aW9uLlNFTEVDVE9SX1NUQVJUO1xuICBhY3Rpb25zQmFzZVtDc3NUb2tlbml6ZXIuVG9rZW5UeXBlLk9fQlJLXSA9IEFjdGlvbi5TRUxFQ1RPUl9TVEFSVDtcbiAgYWN0aW9uc0Jhc2VbQ3NzVG9rZW5pemVyLlRva2VuVHlwZS5DT0xPTl0gPSBBY3Rpb24uU0VMRUNUT1JfU1RBUlQ7XG4gIGFjdGlvbnNCYXNlW0Nzc1Rva2VuaXplci5Ub2tlblR5cGUuQVRdID0gQWN0aW9uLkFUO1xuICBhY3Rpb25zQmFzZVtDc3NUb2tlbml6ZXIuVG9rZW5UeXBlLkNfQlJDXSA9IEFjdGlvbi5SVUxFX0VORDtcbiAgYWN0aW9uc0Jhc2VbQ3NzVG9rZW5pemVyLlRva2VuVHlwZS5FT0ZdID0gQWN0aW9uLkRPTkU7XG4gIGFjdGlvbnNTdHlsZUF0dHJpYnV0ZVtDc3NUb2tlbml6ZXIuVG9rZW5UeXBlLklERU5UXSA9IEFjdGlvbi5QUk9QO1xuICBhY3Rpb25zU3R5bGVBdHRyaWJ1dGVbQ3NzVG9rZW5pemVyLlRva2VuVHlwZS5FT0ZdID0gQWN0aW9uLkRPTkU7XG4gIGFjdGlvbnNTZWxlY3RvclN0YXJ0W0Nzc1Rva2VuaXplci5Ub2tlblR5cGUuSURFTlRdID0gQWN0aW9uLlNFTEVDVE9SX05BTUU7XG4gIGFjdGlvbnNTZWxlY3RvclN0YXJ0W0Nzc1Rva2VuaXplci5Ub2tlblR5cGUuU1RBUl0gPSBBY3Rpb24uU0VMRUNUT1JfQU5ZO1xuICBhY3Rpb25zU2VsZWN0b3JTdGFydFtDc3NUb2tlbml6ZXIuVG9rZW5UeXBlLkhBU0hdID0gQWN0aW9uLlNFTEVDVE9SX0lEO1xuICBhY3Rpb25zU2VsZWN0b3JTdGFydFtDc3NUb2tlbml6ZXIuVG9rZW5UeXBlLkNMQVNTXSA9IEFjdGlvbi5TRUxFQ1RPUl9DTEFTUztcbiAgYWN0aW9uc1NlbGVjdG9yU3RhcnRbQ3NzVG9rZW5pemVyLlRva2VuVHlwZS5PX0JSS10gPSBBY3Rpb24uU0VMRUNUT1JfQVRUUjtcbiAgYWN0aW9uc1NlbGVjdG9yU3RhcnRbQ3NzVG9rZW5pemVyLlRva2VuVHlwZS5DT0xPTl0gPVxuICAgIEFjdGlvbi5TRUxFQ1RPUl9QU0VVRE9DTEFTUztcblxuICBhY3Rpb25zU2VsZWN0b3JbQ3NzVG9rZW5pemVyLlRva2VuVHlwZS5HVF0gPSBBY3Rpb24uU0VMRUNUT1JfQ0hJTEQ7XG4gIGFjdGlvbnNTZWxlY3RvcltDc3NUb2tlbml6ZXIuVG9rZW5UeXBlLlBMVVNdID0gQWN0aW9uLlNFTEVDVE9SX1NJQkxJTkc7XG4gIGFjdGlvbnNTZWxlY3RvcltDc3NUb2tlbml6ZXIuVG9rZW5UeXBlLlRJTERFXSA9XG4gICAgQWN0aW9uLlNFTEVDVE9SX0ZPTExPV0lOR19TSUJMSU5HO1xuICBhY3Rpb25zU2VsZWN0b3JbQ3NzVG9rZW5pemVyLlRva2VuVHlwZS5JREVOVF0gPSBBY3Rpb24uU0VMRUNUT1JfTkFNRV8xO1xuICBhY3Rpb25zU2VsZWN0b3JbQ3NzVG9rZW5pemVyLlRva2VuVHlwZS5TVEFSXSA9IEFjdGlvbi5TRUxFQ1RPUl9BTllfMTtcbiAgYWN0aW9uc1NlbGVjdG9yW0Nzc1Rva2VuaXplci5Ub2tlblR5cGUuSEFTSF0gPSBBY3Rpb24uU0VMRUNUT1JfSURfMTtcbiAgYWN0aW9uc1NlbGVjdG9yW0Nzc1Rva2VuaXplci5Ub2tlblR5cGUuQ0xBU1NdID0gQWN0aW9uLlNFTEVDVE9SX0NMQVNTXzE7XG4gIGFjdGlvbnNTZWxlY3RvcltDc3NUb2tlbml6ZXIuVG9rZW5UeXBlLk9fQlJLXSA9IEFjdGlvbi5TRUxFQ1RPUl9BVFRSXzE7XG4gIGFjdGlvbnNTZWxlY3RvcltDc3NUb2tlbml6ZXIuVG9rZW5UeXBlLk9fQlJDXSA9IEFjdGlvbi5TRUxFQ1RPUl9CT0RZO1xuICBhY3Rpb25zU2VsZWN0b3JbQ3NzVG9rZW5pemVyLlRva2VuVHlwZS5DT0xPTl0gPSBBY3Rpb24uU0VMRUNUT1JfUFNFVURPQ0xBU1NfMTtcbiAgYWN0aW9uc1NlbGVjdG9yW0Nzc1Rva2VuaXplci5Ub2tlblR5cGUuQ09MX0NPTF0gPSBBY3Rpb24uU0VMRUNUT1JfUFNFVURPRUxFTTtcbiAgYWN0aW9uc1NlbGVjdG9yW0Nzc1Rva2VuaXplci5Ub2tlblR5cGUuQ09NTUFdID0gQWN0aW9uLlNFTEVDVE9SX05FWFQ7XG4gIGFjdGlvbnNTZWxlY3RvckluRnVuY1tDc3NUb2tlbml6ZXIuVG9rZW5UeXBlLklERU5UXSA9IEFjdGlvbi5TRUxFQ1RPUl9OQU1FXzE7XG4gIGFjdGlvbnNTZWxlY3RvckluRnVuY1tDc3NUb2tlbml6ZXIuVG9rZW5UeXBlLlNUQVJdID0gQWN0aW9uLlNFTEVDVE9SX0FOWV8xO1xuICBhY3Rpb25zU2VsZWN0b3JJbkZ1bmNbQ3NzVG9rZW5pemVyLlRva2VuVHlwZS5IQVNIXSA9IEFjdGlvbi5TRUxFQ1RPUl9JRF8xO1xuICBhY3Rpb25zU2VsZWN0b3JJbkZ1bmNbQ3NzVG9rZW5pemVyLlRva2VuVHlwZS5DTEFTU10gPSBBY3Rpb24uU0VMRUNUT1JfQ0xBU1NfMTtcbiAgYWN0aW9uc1NlbGVjdG9ySW5GdW5jW0Nzc1Rva2VuaXplci5Ub2tlblR5cGUuT19CUktdID0gQWN0aW9uLlNFTEVDVE9SX0FUVFJfMTtcbiAgYWN0aW9uc1NlbGVjdG9ySW5GdW5jW0Nzc1Rva2VuaXplci5Ub2tlblR5cGUuQ19QQVJdID0gQWN0aW9uLkRPTkU7XG4gIGFjdGlvbnNTZWxlY3RvckluRnVuY1tDc3NUb2tlbml6ZXIuVG9rZW5UeXBlLkNPTE9OXSA9XG4gICAgQWN0aW9uLlNFTEVDVE9SX1BTRVVET0NMQVNTXzE7XG4gIGFjdGlvbnNTZWxlY3RvckNvbnRbQ3NzVG9rZW5pemVyLlRva2VuVHlwZS5JREVOVF0gPSBBY3Rpb24uU0VMRUNUT1JfTkFNRTtcbiAgYWN0aW9uc1NlbGVjdG9yQ29udFtDc3NUb2tlbml6ZXIuVG9rZW5UeXBlLlNUQVJdID0gQWN0aW9uLlNFTEVDVE9SX0FOWTtcbiAgYWN0aW9uc1NlbGVjdG9yQ29udFtDc3NUb2tlbml6ZXIuVG9rZW5UeXBlLkhBU0hdID0gQWN0aW9uLlNFTEVDVE9SX0lEO1xuICBhY3Rpb25zU2VsZWN0b3JDb250W0Nzc1Rva2VuaXplci5Ub2tlblR5cGUuQ0xBU1NdID0gQWN0aW9uLlNFTEVDVE9SX0NMQVNTO1xuICBhY3Rpb25zU2VsZWN0b3JDb250W0Nzc1Rva2VuaXplci5Ub2tlblR5cGUuQ09MT05dID1cbiAgICBBY3Rpb24uU0VMRUNUT1JfUFNFVURPQ0xBU1M7XG4gIGFjdGlvbnNTZWxlY3RvckNvbnRbQ3NzVG9rZW5pemVyLlRva2VuVHlwZS5DT0xfQ09MXSA9XG4gICAgQWN0aW9uLlNFTEVDVE9SX1BTRVVET0VMRU07XG4gIGFjdGlvbnNTZWxlY3RvckNvbnRbQ3NzVG9rZW5pemVyLlRva2VuVHlwZS5PX0JSS10gPSBBY3Rpb24uU0VMRUNUT1JfQVRUUjtcbiAgYWN0aW9uc1NlbGVjdG9yQ29udFtDc3NUb2tlbml6ZXIuVG9rZW5UeXBlLk9fQlJDXSA9IEFjdGlvbi5TRUxFQ1RPUl9CT0RZO1xuICBhY3Rpb25zUHJvcFZhbFtDc3NUb2tlbml6ZXIuVG9rZW5UeXBlLklERU5UXSA9IEFjdGlvbi5WQUxfSURFTlQ7XG4gIGFjdGlvbnNQcm9wVmFsW0Nzc1Rva2VuaXplci5Ub2tlblR5cGUuSEFTSF0gPSBBY3Rpb24uVkFMX0hBU0g7XG4gIGFjdGlvbnNQcm9wVmFsW0Nzc1Rva2VuaXplci5Ub2tlblR5cGUuTlVNXSA9IEFjdGlvbi5WQUxfTlVNO1xuICBhY3Rpb25zUHJvcFZhbFtDc3NUb2tlbml6ZXIuVG9rZW5UeXBlLklOVF0gPSBBY3Rpb24uVkFMX0lOVDtcbiAgYWN0aW9uc1Byb3BWYWxbQ3NzVG9rZW5pemVyLlRva2VuVHlwZS5OVU1FUklDXSA9IEFjdGlvbi5WQUxfTlVNRVJJQztcbiAgYWN0aW9uc1Byb3BWYWxbQ3NzVG9rZW5pemVyLlRva2VuVHlwZS5TVFJdID0gQWN0aW9uLlZBTF9TVFI7XG4gIGFjdGlvbnNQcm9wVmFsW0Nzc1Rva2VuaXplci5Ub2tlblR5cGUuVVJMXSA9IEFjdGlvbi5WQUxfVVJMO1xuICBhY3Rpb25zUHJvcFZhbFtDc3NUb2tlbml6ZXIuVG9rZW5UeXBlLkNPTU1BXSA9IEFjdGlvbi5WQUxfQ09NTUE7XG4gIGFjdGlvbnNQcm9wVmFsW0Nzc1Rva2VuaXplci5Ub2tlblR5cGUuU0xBU0hdID0gQWN0aW9uLlZBTF9TTEFTSDtcbiAgYWN0aW9uc1Byb3BWYWxbQ3NzVG9rZW5pemVyLlRva2VuVHlwZS5GVU5DXSA9IEFjdGlvbi5WQUxfRlVOQztcbiAgYWN0aW9uc1Byb3BWYWxbQ3NzVG9rZW5pemVyLlRva2VuVHlwZS5DX1BBUl0gPSBBY3Rpb24uVkFMX0NfUEFSO1xuICBhY3Rpb25zUHJvcFZhbFtDc3NUb2tlbml6ZXIuVG9rZW5UeXBlLlNFTUlDT0xdID0gQWN0aW9uLlZBTF9FTkQ7XG4gIGFjdGlvbnNQcm9wVmFsW0Nzc1Rva2VuaXplci5Ub2tlblR5cGUuQ19CUkNdID0gQWN0aW9uLlZBTF9CUkM7XG4gIGFjdGlvbnNQcm9wVmFsW0Nzc1Rva2VuaXplci5Ub2tlblR5cGUuQkFOR10gPSBBY3Rpb24uVkFMX0JBTkc7XG4gIGFjdGlvbnNQcm9wVmFsW0Nzc1Rva2VuaXplci5Ub2tlblR5cGUuUExVU10gPSBBY3Rpb24uVkFMX1BMVVM7XG4gIGFjdGlvbnNQcm9wVmFsW0Nzc1Rva2VuaXplci5Ub2tlblR5cGUuRU9GXSA9IEFjdGlvbi5WQUxfRklOSVNIO1xuICBhY3Rpb25zRXhwclZhbFtDc3NUb2tlbml6ZXIuVG9rZW5UeXBlLklERU5UXSA9IEFjdGlvbi5FWFBSX0lERU5UO1xuICBhY3Rpb25zRXhwclZhbFtDc3NUb2tlbml6ZXIuVG9rZW5UeXBlLk5VTV0gPSBBY3Rpb24uRVhQUl9OVU07XG4gIGFjdGlvbnNFeHByVmFsW0Nzc1Rva2VuaXplci5Ub2tlblR5cGUuSU5UXSA9IEFjdGlvbi5FWFBSX05VTTtcbiAgYWN0aW9uc0V4cHJWYWxbQ3NzVG9rZW5pemVyLlRva2VuVHlwZS5OVU1FUklDXSA9IEFjdGlvbi5FWFBSX05VTUVSSUM7XG4gIGFjdGlvbnNFeHByVmFsW0Nzc1Rva2VuaXplci5Ub2tlblR5cGUuU1RSXSA9IEFjdGlvbi5FWFBSX1NUUjtcbiAgYWN0aW9uc0V4cHJWYWxbQ3NzVG9rZW5pemVyLlRva2VuVHlwZS5PX1BBUl0gPSBBY3Rpb24uRVhQUl9PX1BBUjtcbiAgYWN0aW9uc0V4cHJWYWxbQ3NzVG9rZW5pemVyLlRva2VuVHlwZS5GVU5DXSA9IEFjdGlvbi5FWFBSX0ZVTkM7XG4gIGFjdGlvbnNFeHByVmFsW0Nzc1Rva2VuaXplci5Ub2tlblR5cGUuQkFOR10gPSBBY3Rpb24uRVhQUl9QUkVGSVg7XG4gIGFjdGlvbnNFeHByVmFsW0Nzc1Rva2VuaXplci5Ub2tlblR5cGUuTUlOVVNdID0gQWN0aW9uLkVYUFJfUFJFRklYO1xuICBhY3Rpb25zRXhwclZhbFtDc3NUb2tlbml6ZXIuVG9rZW5UeXBlLkRPTExBUl0gPSBBY3Rpb24uRVhQUl9QQVJBTTtcbiAgYWN0aW9uc0V4cHJPcFtDc3NUb2tlbml6ZXIuVG9rZW5UeXBlLklERU5UXSA9IEFjdGlvbi5FWFBSX0lORklYX05BTUU7XG4gIGFjdGlvbnNFeHByT3BbQ3NzVG9rZW5pemVyLlRva2VuVHlwZS5DT01NQV0gPSBBY3Rpb24uRVhQUl9JTkZJWDtcbiAgYWN0aW9uc0V4cHJPcFtDc3NUb2tlbml6ZXIuVG9rZW5UeXBlLkdUXSA9IEFjdGlvbi5FWFBSX0lORklYO1xuICBhY3Rpb25zRXhwck9wW0Nzc1Rva2VuaXplci5Ub2tlblR5cGUuTFRdID0gQWN0aW9uLkVYUFJfSU5GSVg7XG4gIGFjdGlvbnNFeHByT3BbQ3NzVG9rZW5pemVyLlRva2VuVHlwZS5HVF9FUV0gPSBBY3Rpb24uRVhQUl9JTkZJWDtcbiAgYWN0aW9uc0V4cHJPcFtDc3NUb2tlbml6ZXIuVG9rZW5UeXBlLkxUX0VRXSA9IEFjdGlvbi5FWFBSX0lORklYO1xuICBhY3Rpb25zRXhwck9wW0Nzc1Rva2VuaXplci5Ub2tlblR5cGUuRVFdID0gQWN0aW9uLkVYUFJfSU5GSVg7XG4gIGFjdGlvbnNFeHByT3BbQ3NzVG9rZW5pemVyLlRva2VuVHlwZS5FUV9FUV0gPSBBY3Rpb24uRVhQUl9JTkZJWDtcbiAgYWN0aW9uc0V4cHJPcFtDc3NUb2tlbml6ZXIuVG9rZW5UeXBlLkJBTkdfRVFdID0gQWN0aW9uLkVYUFJfSU5GSVg7XG4gIGFjdGlvbnNFeHByT3BbQ3NzVG9rZW5pemVyLlRva2VuVHlwZS5BTVBfQU1QXSA9IEFjdGlvbi5FWFBSX0lORklYO1xuICBhY3Rpb25zRXhwck9wW0Nzc1Rva2VuaXplci5Ub2tlblR5cGUuQkFSX0JBUl0gPSBBY3Rpb24uRVhQUl9JTkZJWDtcbiAgYWN0aW9uc0V4cHJPcFtDc3NUb2tlbml6ZXIuVG9rZW5UeXBlLlBMVVNdID0gQWN0aW9uLkVYUFJfSU5GSVg7XG4gIGFjdGlvbnNFeHByT3BbQ3NzVG9rZW5pemVyLlRva2VuVHlwZS5NSU5VU10gPSBBY3Rpb24uRVhQUl9JTkZJWDtcbiAgYWN0aW9uc0V4cHJPcFtDc3NUb2tlbml6ZXIuVG9rZW5UeXBlLlNMQVNIXSA9IEFjdGlvbi5FWFBSX0lORklYO1xuICBhY3Rpb25zRXhwck9wW0Nzc1Rva2VuaXplci5Ub2tlblR5cGUuUEVSQ0VOVF0gPSBBY3Rpb24uRVhQUl9JTkZJWDtcbiAgYWN0aW9uc0V4cHJPcFtDc3NUb2tlbml6ZXIuVG9rZW5UeXBlLlNUQVJdID0gQWN0aW9uLkVYUFJfSU5GSVg7XG4gIGFjdGlvbnNFeHByT3BbQ3NzVG9rZW5pemVyLlRva2VuVHlwZS5DT0xPTl0gPSBBY3Rpb24uRVhQUl9JTkZJWDtcbiAgYWN0aW9uc0V4cHJPcFtDc3NUb2tlbml6ZXIuVG9rZW5UeXBlLlFNQVJLXSA9IEFjdGlvbi5FWFBSX0lORklYO1xuICBhY3Rpb25zRXhwck9wW0Nzc1Rva2VuaXplci5Ub2tlblR5cGUuQ19QQVJdID0gQWN0aW9uLkVYUFJfQ19QQVI7XG4gIGFjdGlvbnNFeHByT3BbQ3NzVG9rZW5pemVyLlRva2VuVHlwZS5PX0JSQ10gPSBBY3Rpb24uRVhQUl9PX0JSQztcbiAgYWN0aW9uc0V4cHJPcFtDc3NUb2tlbml6ZXIuVG9rZW5UeXBlLlNFTUlDT0xdID0gQWN0aW9uLkVYUFJfU0VNSUNPTDtcbiAgYWN0aW9uc0Vycm9yW0Nzc1Rva2VuaXplci5Ub2tlblR5cGUuRU9GXSA9IEFjdGlvbi5ET05FO1xuICBhY3Rpb25zRXJyb3JbQ3NzVG9rZW5pemVyLlRva2VuVHlwZS5PX0JSQ10gPSBBY3Rpb24uRVJST1JfUFVTSDtcbiAgYWN0aW9uc0Vycm9yW0Nzc1Rva2VuaXplci5Ub2tlblR5cGUuQ19CUkNdID0gQWN0aW9uLkVSUk9SX1BPUDtcbiAgYWN0aW9uc0Vycm9yW0Nzc1Rva2VuaXplci5Ub2tlblR5cGUuT19CUktdID0gQWN0aW9uLkVSUk9SX1BVU0g7XG4gIGFjdGlvbnNFcnJvcltDc3NUb2tlbml6ZXIuVG9rZW5UeXBlLkNfQlJLXSA9IEFjdGlvbi5FUlJPUl9QT1A7XG4gIGFjdGlvbnNFcnJvcltDc3NUb2tlbml6ZXIuVG9rZW5UeXBlLk9fUEFSXSA9IEFjdGlvbi5FUlJPUl9QVVNIO1xuICBhY3Rpb25zRXJyb3JbQ3NzVG9rZW5pemVyLlRva2VuVHlwZS5DX1BBUl0gPSBBY3Rpb24uRVJST1JfUE9QO1xuICBhY3Rpb25zRXJyb3JbQ3NzVG9rZW5pemVyLlRva2VuVHlwZS5TRU1JQ09MXSA9IEFjdGlvbi5FUlJPUl9TRU1JQ09MO1xuICBhY3Rpb25zRXJyb3JEZWNsW0Nzc1Rva2VuaXplci5Ub2tlblR5cGUuRU9GXSA9IEFjdGlvbi5ET05FO1xuICBhY3Rpb25zRXJyb3JEZWNsW0Nzc1Rva2VuaXplci5Ub2tlblR5cGUuT19CUkNdID0gQWN0aW9uLkVSUk9SX1BVU0g7XG4gIGFjdGlvbnNFcnJvckRlY2xbQ3NzVG9rZW5pemVyLlRva2VuVHlwZS5DX0JSQ10gPSBBY3Rpb24uRVJST1JfUE9QX0RFQ0w7XG4gIGFjdGlvbnNFcnJvckRlY2xbQ3NzVG9rZW5pemVyLlRva2VuVHlwZS5PX0JSS10gPSBBY3Rpb24uRVJST1JfUFVTSDtcbiAgYWN0aW9uc0Vycm9yRGVjbFtDc3NUb2tlbml6ZXIuVG9rZW5UeXBlLkNfQlJLXSA9IEFjdGlvbi5FUlJPUl9QT1A7XG4gIGFjdGlvbnNFcnJvckRlY2xbQ3NzVG9rZW5pemVyLlRva2VuVHlwZS5PX1BBUl0gPSBBY3Rpb24uRVJST1JfUFVTSDtcbiAgYWN0aW9uc0Vycm9yRGVjbFtDc3NUb2tlbml6ZXIuVG9rZW5UeXBlLkNfUEFSXSA9IEFjdGlvbi5FUlJPUl9QT1A7XG4gIGFjdGlvbnNFcnJvckRlY2xbQ3NzVG9rZW5pemVyLlRva2VuVHlwZS5TRU1JQ09MXSA9IEFjdGlvbi5FUlJPUl9TRU1JQ09MO1xuICBhY3Rpb25zRXJyb3JTZWxlY3RvcltDc3NUb2tlbml6ZXIuVG9rZW5UeXBlLkVPRl0gPSBBY3Rpb24uRE9ORTtcbiAgYWN0aW9uc0Vycm9yU2VsZWN0b3JbQ3NzVG9rZW5pemVyLlRva2VuVHlwZS5PX0JSQ10gPSBBY3Rpb24uRVJST1JfUFVTSDtcbiAgYWN0aW9uc0Vycm9yU2VsZWN0b3JbQ3NzVG9rZW5pemVyLlRva2VuVHlwZS5DX0JSQ10gPSBBY3Rpb24uRVJST1JfUE9QO1xuICBhY3Rpb25zRXJyb3JTZWxlY3RvcltDc3NUb2tlbml6ZXIuVG9rZW5UeXBlLk9fQlJLXSA9IEFjdGlvbi5FUlJPUl9QVVNIO1xuICBhY3Rpb25zRXJyb3JTZWxlY3RvcltDc3NUb2tlbml6ZXIuVG9rZW5UeXBlLkNfQlJLXSA9IEFjdGlvbi5FUlJPUl9QT1A7XG4gIGFjdGlvbnNFcnJvclNlbGVjdG9yW0Nzc1Rva2VuaXplci5Ub2tlblR5cGUuT19QQVJdID0gQWN0aW9uLkVSUk9SX1BVU0g7XG4gIGFjdGlvbnNFcnJvclNlbGVjdG9yW0Nzc1Rva2VuaXplci5Ub2tlblR5cGUuQ19QQVJdID0gQWN0aW9uLkVSUk9SX1BPUDtcbiAgcHJpb3JpdHlbQ3NzVG9rZW5pemVyLlRva2VuVHlwZS5DX1BBUl0gPSAwO1xuICBwcmlvcml0eVtDc3NUb2tlbml6ZXIuVG9rZW5UeXBlLkNPTU1BXSA9IDA7XG4gIHByaW9yaXR5W0Nzc1Rva2VuaXplci5Ub2tlblR5cGUuUU1BUktdID0gMTtcbiAgcHJpb3JpdHlbQ3NzVG9rZW5pemVyLlRva2VuVHlwZS5DT0xPTl0gPSAxO1xuICBwcmlvcml0eVtDc3NUb2tlbml6ZXIuVG9rZW5UeXBlLkFNUF9BTVBdID0gMjtcbiAgcHJpb3JpdHlbQ3NzVG9rZW5pemVyLlRva2VuVHlwZS5CQVJfQkFSXSA9IDI7XG4gIHByaW9yaXR5W0Nzc1Rva2VuaXplci5Ub2tlblR5cGUuTFRdID0gMztcbiAgcHJpb3JpdHlbQ3NzVG9rZW5pemVyLlRva2VuVHlwZS5HVF0gPSAzO1xuICBwcmlvcml0eVtDc3NUb2tlbml6ZXIuVG9rZW5UeXBlLkxUX0VRXSA9IDM7XG4gIHByaW9yaXR5W0Nzc1Rva2VuaXplci5Ub2tlblR5cGUuR1RfRVFdID0gMztcbiAgcHJpb3JpdHlbQ3NzVG9rZW5pemVyLlRva2VuVHlwZS5FUV0gPSAzO1xuICBwcmlvcml0eVtDc3NUb2tlbml6ZXIuVG9rZW5UeXBlLkVRX0VRXSA9IDM7XG4gIHByaW9yaXR5W0Nzc1Rva2VuaXplci5Ub2tlblR5cGUuQkFOR19FUV0gPSAzO1xuICBwcmlvcml0eVtDc3NUb2tlbml6ZXIuVG9rZW5UeXBlLlBMVVNdID0gNDtcbiAgcHJpb3JpdHlbQ3NzVG9rZW5pemVyLlRva2VuVHlwZS5NSU5VU10gPSA0O1xuICBwcmlvcml0eVtDc3NUb2tlbml6ZXIuVG9rZW5UeXBlLlNUQVJdID0gNTtcbiAgcHJpb3JpdHlbQ3NzVG9rZW5pemVyLlRva2VuVHlwZS5TTEFTSF0gPSA1O1xuICBwcmlvcml0eVtDc3NUb2tlbml6ZXIuVG9rZW5UeXBlLlBFUkNFTlRdID0gNTtcbiAgcHJpb3JpdHlbQ3NzVG9rZW5pemVyLlRva2VuVHlwZS5FT0ZdID0gNjtcbiAgcHJpb3JpdHlbT1BfTUVESUFfQU5EXSA9IDI7XG59KSgpO1xuXG4vKipcbiAqIEBlbnVtIHtudW1iZXJ9XG4gKi9cbmV4cG9ydCBlbnVtIEV4cHJDb250ZXh0IHtcbiAgUFJPUCxcbiAgV0hFTixcbiAgTUVESUEsXG4gIElNUE9SVCxcbn1cblxuZXhwb3J0IGNsYXNzIFBhcnNlciB7XG4gIHZhbFN0YWNrOiBhbnlbXSA9IFtdO1xuICBuYW1lc3BhY2VQcmVmaXhUb1VSSTogeyBba2V5OiBzdHJpbmddOiBzdHJpbmcgfSA9IHt9O1xuICBkZWZhdWx0TmFtZXNwYWNlVVJJOiBzdHJpbmcgfCBudWxsID0gbnVsbDtcbiAgcHJvcE5hbWU6IHN0cmluZyB8IG51bGwgPSBudWxsO1xuICBwcm9wSW1wb3J0YW50OiBib29sZWFuID0gZmFsc2U7XG4gIGV4cHJDb250ZXh0OiBFeHByQ29udGV4dDtcbiAgcmVzdWx0OiBDc3MuVmFsID0gbnVsbDtcbiAgaW1wb3J0UmVhZHk6IGJvb2xlYW4gPSBmYWxzZTtcbiAgaW1wb3J0VVJMOiBzdHJpbmcgfCBudWxsID0gbnVsbDtcbiAgaW1wb3J0Q29uZGl0aW9uOiBDc3MuRXhwciA9IG51bGw7XG4gIGVycm9yQnJhY2tldHM6IG51bWJlcltdID0gW107XG4gIHJ1bGVTdGFjazogc3RyaW5nW10gPSBbXTtcbiAgcmVnaW9uUnVsZTogYm9vbGVhbiA9IGZhbHNlO1xuICBwYWdlUnVsZTogYm9vbGVhbiA9IGZhbHNlO1xuXG4gIGNvbnN0cnVjdG9yKFxuICAgIHB1YmxpYyBhY3Rpb25zOiBBY3Rpb25bXSxcbiAgICBwdWJsaWMgdG9rZW5pemVyOiBDc3NUb2tlbml6ZXIuVG9rZW5pemVyLFxuICAgIHB1YmxpYyByZWFkb25seSBoYW5kbGVyOiBQYXJzZXJIYW5kbGVyLFxuICAgIHB1YmxpYyBiYXNlVVJMOiBzdHJpbmcsXG4gICkge1xuICAgIHRoaXMuZXhwckNvbnRleHQgPSBFeHByQ29udGV4dC5NRURJQTtcbiAgfVxuXG4gIGV4dHJhY3RWYWxzKHNlcDogc3RyaW5nLCBpbmRleDogbnVtYmVyKTogQ3NzLlZhbFtdIHtcbiAgICBjb25zdCBhcnI6IENzcy5WYWxbXSA9IFtdO1xuICAgIGNvbnN0IHZhbFN0YWNrID0gdGhpcy52YWxTdGFjaztcbiAgICB3aGlsZSAoaW5kZXggPCB2YWxTdGFjay5sZW5ndGgpIHtcbiAgICAgIGFyci5wdXNoKHZhbFN0YWNrW2luZGV4KytdIGFzIENzcy5WYWwpO1xuICAgICAgaWYgKGluZGV4ID09IHZhbFN0YWNrLmxlbmd0aCkge1xuICAgICAgICBicmVhaztcbiAgICAgIH1cbiAgICAgIGlmICh2YWxTdGFja1tpbmRleCsrXSAhPSBzZXApIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiVW5leHBlY3RlZCBzdGF0ZVwiKTtcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIGFycjtcbiAgfVxuXG4gIHZhbFN0YWNrUmVkdWNlKHNlcDogc3RyaW5nLCB0b2tlbjogQ3NzVG9rZW5pemVyLlRva2VuKTogQ3NzLlZhbCB7XG4gICAgY29uc3QgdmFsU3RhY2sgPSB0aGlzLnZhbFN0YWNrO1xuICAgIGxldCBpbmRleCA9IHZhbFN0YWNrLmxlbmd0aDtcbiAgICBsZXQgdjtcbiAgICBkbyB7XG4gICAgICB2ID0gdmFsU3RhY2tbLS1pbmRleF07XG4gICAgfSB3aGlsZSAodHlwZW9mIHYgIT0gXCJ1bmRlZmluZWRcIiAmJiB0eXBlb2YgdiAhPSBcInN0cmluZ1wiKTtcbiAgICBsZXQgY291bnQgPSB2YWxTdGFjay5sZW5ndGggLSAoaW5kZXggKyAxKTtcbiAgICBpZiAoY291bnQgPiAxKSB7XG4gICAgICB2YWxTdGFjay5zcGxpY2UoXG4gICAgICAgIGluZGV4ICsgMSxcbiAgICAgICAgY291bnQsXG4gICAgICAgIG5ldyBDc3MuU3BhY2VMaXN0KHZhbFN0YWNrLnNsaWNlKGluZGV4ICsgMSwgdmFsU3RhY2subGVuZ3RoKSksXG4gICAgICApO1xuICAgIH1cbiAgICBpZiAoc2VwID09IFwiLFwiKSB7XG4gICAgICByZXR1cm4gbnVsbDtcbiAgICB9XG4gICAgaW5kZXgrKztcbiAgICBkbyB7XG4gICAgICB2ID0gdmFsU3RhY2tbLS1pbmRleF07XG4gICAgfSB3aGlsZSAodHlwZW9mIHYgIT0gXCJ1bmRlZmluZWRcIiAmJiAodHlwZW9mIHYgIT0gXCJzdHJpbmdcIiB8fCB2ID09IFwiLFwiKSk7XG4gICAgY291bnQgPSB2YWxTdGFjay5sZW5ndGggLSAoaW5kZXggKyAxKTtcbiAgICBpZiAodiA9PSBcIihcIikge1xuICAgICAgaWYgKHNlcCAhPSBcIilcIikge1xuICAgICAgICB0aGlzLmhhbmRsZXIuZXJyb3IoXCJFX0NTU19NSVNNQVRDSEVEX0NfUEFSXCIsIHRva2VuKTtcbiAgICAgICAgdGhpcy5hY3Rpb25zID0gYWN0aW9uc0Vycm9yRGVjbDtcbiAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICB9XG4gICAgICBjb25zdCBmdW5jID0gbmV3IENzcy5GdW5jKFxuICAgICAgICB2YWxTdGFja1tpbmRleCAtIDFdIGFzIHN0cmluZyxcbiAgICAgICAgdGhpcy5leHRyYWN0VmFscyhcIixcIiwgaW5kZXggKyAxKSxcbiAgICAgICk7XG4gICAgICB2YWxTdGFjay5zcGxpY2UoaW5kZXggLSAxLCBjb3VudCArIDIsIGZ1bmMpO1xuICAgICAgcmV0dXJuIG51bGw7XG4gICAgfVxuICAgIGlmIChzZXAgIT0gXCI7XCIgfHwgaW5kZXggPj0gMCkge1xuICAgICAgdGhpcy5oYW5kbGVyLmVycm9yKFwiRV9DU1NfVU5FWFBFQ1RFRF9WQUxfRU5EXCIsIHRva2VuKTtcbiAgICAgIHRoaXMuYWN0aW9ucyA9IGFjdGlvbnNFcnJvckRlY2w7XG4gICAgICByZXR1cm4gbnVsbDtcbiAgICB9XG4gICAgaWYgKGNvdW50ID4gMSkge1xuICAgICAgcmV0dXJuIG5ldyBDc3MuQ29tbWFMaXN0KHRoaXMuZXh0cmFjdFZhbHMoXCIsXCIsIGluZGV4ICsgMSkpO1xuICAgIH1cbiAgICByZXR1cm4gdmFsU3RhY2tbMF0gYXMgQ3NzLlZhbDtcbiAgfVxuXG4gIGV4cHJFcnJvcihtbmVtb25pY3M6IHN0cmluZywgdG9rZW46IENzc1Rva2VuaXplci5Ub2tlbikge1xuICAgIHRoaXMuYWN0aW9ucyA9IHRoaXMucHJvcE5hbWUgPyBhY3Rpb25zRXJyb3JEZWNsIDogYWN0aW9uc0Vycm9yO1xuICAgIHRoaXMuaGFuZGxlci5lcnJvcihtbmVtb25pY3MsIHRva2VuKTtcbiAgfVxuXG4gIGV4cHJTdGFja1JlZHVjZShvcDogbnVtYmVyLCB0b2tlbjogQ3NzVG9rZW5pemVyLlRva2VuKTogYm9vbGVhbiB7XG4gICAgY29uc3QgdmFsU3RhY2sgPSB0aGlzLnZhbFN0YWNrO1xuICAgIGNvbnN0IGhhbmRsZXIgPSB0aGlzLmhhbmRsZXI7XG4gICAgbGV0IHZhbCA9IHZhbFN0YWNrLnBvcCgpIGFzIEV4cHJzLlZhbDtcbiAgICBsZXQgdmFsMjogRXhwcnMuVmFsO1xuICAgIHdoaWxlICh0cnVlKSB7XG4gICAgICBsZXQgdG9rID0gdmFsU3RhY2sucG9wKCk7XG4gICAgICBpZiAob3AgPT0gQ3NzVG9rZW5pemVyLlRva2VuVHlwZS5DX1BBUikge1xuICAgICAgICBjb25zdCBhcmdzOiBFeHBycy5WYWxbXSA9IFt2YWxdO1xuICAgICAgICB3aGlsZSAodG9rID09IENzc1Rva2VuaXplci5Ub2tlblR5cGUuQ09NTUEpIHtcbiAgICAgICAgICBhcmdzLnVuc2hpZnQodmFsU3RhY2sucG9wKCkpO1xuICAgICAgICAgIHRvayA9IHZhbFN0YWNrLnBvcCgpO1xuICAgICAgICB9XG4gICAgICAgIGlmICh0eXBlb2YgdG9rID09IFwic3RyaW5nXCIpIHtcbiAgICAgICAgICBpZiAodG9rID09IFwie1wiKSB7XG4gICAgICAgICAgICAvLyByZWFjaGVkIENTUyBwb3J0aW9uIG9mIHRoZSBzdGFja1xuICAgICAgICAgICAgd2hpbGUgKGFyZ3MubGVuZ3RoID49IDIpIHtcbiAgICAgICAgICAgICAgY29uc3QgZTEgPSBhcmdzLnNoaWZ0KCk7XG4gICAgICAgICAgICAgIGNvbnN0IGUyID0gYXJncy5zaGlmdCgpO1xuICAgICAgICAgICAgICBjb25zdCBlciA9IG5ldyBFeHBycy5Pck1lZGlhKGhhbmRsZXIuZ2V0U2NvcGUoKSwgZTEsIGUyKTtcbiAgICAgICAgICAgICAgYXJncy51bnNoaWZ0KGVyKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHZhbFN0YWNrLnB1c2gobmV3IENzcy5FeHByKGFyZ3NbMF0pKTtcbiAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICAgIH0gZWxzZSBpZiAodG9rID09IFwiKFwiKSB7XG4gICAgICAgICAgICAvLyBjYWxsXG4gICAgICAgICAgICBjb25zdCBuYW1lMiA9IHZhbFN0YWNrLnBvcCgpIGFzIHN0cmluZztcbiAgICAgICAgICAgIGNvbnN0IG5hbWUxID0gdmFsU3RhY2sucG9wKCkgYXMgc3RyaW5nIHwgbnVsbDtcbiAgICAgICAgICAgIHZhbCA9IG5ldyBFeHBycy5DYWxsKFxuICAgICAgICAgICAgICBoYW5kbGVyLmdldFNjb3BlKCksXG4gICAgICAgICAgICAgIEV4cHJzLm1ha2VRdWFsaWZpZWROYW1lKG5hbWUxLCBuYW1lMiksXG4gICAgICAgICAgICAgIGFyZ3MsXG4gICAgICAgICAgICApO1xuICAgICAgICAgICAgb3AgPSBDc3NUb2tlbml6ZXIuVG9rZW5UeXBlLkVPRjtcbiAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBpZiAodG9rID09IENzc1Rva2VuaXplci5Ub2tlblR5cGUuT19QQVIpIHtcbiAgICAgICAgICBpZiAodmFsLmlzTWVkaWFOYW1lKCkpIHtcbiAgICAgICAgICAgIHZhbCA9IG5ldyBFeHBycy5NZWRpYVRlc3QoXG4gICAgICAgICAgICAgIGhhbmRsZXIuZ2V0U2NvcGUoKSxcbiAgICAgICAgICAgICAgdmFsIGFzIEV4cHJzLk1lZGlhTmFtZSxcbiAgICAgICAgICAgICAgbnVsbCxcbiAgICAgICAgICAgICk7XG4gICAgICAgICAgfVxuICAgICAgICAgIG9wID0gQ3NzVG9rZW5pemVyLlRva2VuVHlwZS5FT0Y7XG4gICAgICAgICAgY29udGludWU7XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGlmICh0eXBlb2YgdG9rID09IFwic3RyaW5nXCIpIHtcbiAgICAgICAgICAvLyByZWFjaGVkIENTUyBwb3J0aW9uIG9mIHRoZSBzdGFjayBvciBhIGNhbGxcbiAgICAgICAgICB2YWxTdGFjay5wdXNoKHRvayk7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIGlmICgodG9rIGFzIG51bWJlcikgPCAwKSB7XG4gICAgICAgIC8vIHByZWZpeFxuICAgICAgICBpZiAodG9rID09IC1Dc3NUb2tlbml6ZXIuVG9rZW5UeXBlLkJBTkcpIHtcbiAgICAgICAgICB2YWwgPSBuZXcgRXhwcnMuTm90KGhhbmRsZXIuZ2V0U2NvcGUoKSwgdmFsKTtcbiAgICAgICAgfSBlbHNlIGlmICh0b2sgPT0gLUNzc1Rva2VuaXplci5Ub2tlblR5cGUuTUlOVVMpIHtcbiAgICAgICAgICB2YWwgPSBuZXcgRXhwcnMuTmVnYXRlKGhhbmRsZXIuZ2V0U2NvcGUoKSwgdmFsKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICB0aGlzLmV4cHJFcnJvcihcIkZfVU5FWFBFQ1RFRF9TVEFURVwiLCB0b2tlbik7XG4gICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICB9XG4gICAgICB9IGVsc2Uge1xuICAgICAgICAvLyBpbmZpeFxuICAgICAgICBpZiAocHJpb3JpdHlbb3BdID4gcHJpb3JpdHlbdG9rIGFzIG51bWJlcl0pIHtcbiAgICAgICAgICB2YWxTdGFjay5wdXNoKHRvayk7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cbiAgICAgICAgdmFsMiA9IHZhbFN0YWNrLnBvcCgpIGFzIEV4cHJzLlZhbDtcbiAgICAgICAgc3dpdGNoICh0b2spIHtcbiAgICAgICAgICBjYXNlIENzc1Rva2VuaXplci5Ub2tlblR5cGUuQU1QX0FNUDpcbiAgICAgICAgICAgIHZhbCA9IG5ldyBFeHBycy5BbmQoaGFuZGxlci5nZXRTY29wZSgpLCB2YWwyLCB2YWwpO1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgY2FzZSBPUF9NRURJQV9BTkQ6XG4gICAgICAgICAgICB2YWwgPSBuZXcgRXhwcnMuQW5kTWVkaWEoaGFuZGxlci5nZXRTY29wZSgpLCB2YWwyLCB2YWwpO1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgY2FzZSBDc3NUb2tlbml6ZXIuVG9rZW5UeXBlLkJBUl9CQVI6XG4gICAgICAgICAgICB2YWwgPSBuZXcgRXhwcnMuT3IoaGFuZGxlci5nZXRTY29wZSgpLCB2YWwyLCB2YWwpO1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgY2FzZSBDc3NUb2tlbml6ZXIuVG9rZW5UeXBlLkxUOlxuICAgICAgICAgICAgdmFsID0gbmV3IEV4cHJzLkx0KGhhbmRsZXIuZ2V0U2NvcGUoKSwgdmFsMiwgdmFsKTtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgIGNhc2UgQ3NzVG9rZW5pemVyLlRva2VuVHlwZS5HVDpcbiAgICAgICAgICAgIHZhbCA9IG5ldyBFeHBycy5HdChoYW5kbGVyLmdldFNjb3BlKCksIHZhbDIsIHZhbCk7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgICBjYXNlIENzc1Rva2VuaXplci5Ub2tlblR5cGUuTFRfRVE6XG4gICAgICAgICAgICB2YWwgPSBuZXcgRXhwcnMuTGUoaGFuZGxlci5nZXRTY29wZSgpLCB2YWwyLCB2YWwpO1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgY2FzZSBDc3NUb2tlbml6ZXIuVG9rZW5UeXBlLkdUX0VROlxuICAgICAgICAgICAgdmFsID0gbmV3IEV4cHJzLkdlKGhhbmRsZXIuZ2V0U2NvcGUoKSwgdmFsMiwgdmFsKTtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgIGNhc2UgQ3NzVG9rZW5pemVyLlRva2VuVHlwZS5FUTpcbiAgICAgICAgICBjYXNlIENzc1Rva2VuaXplci5Ub2tlblR5cGUuRVFfRVE6XG4gICAgICAgICAgICB2YWwgPSBuZXcgRXhwcnMuRXEoaGFuZGxlci5nZXRTY29wZSgpLCB2YWwyLCB2YWwpO1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgY2FzZSBDc3NUb2tlbml6ZXIuVG9rZW5UeXBlLkJBTkdfRVE6XG4gICAgICAgICAgICB2YWwgPSBuZXcgRXhwcnMuTmUoaGFuZGxlci5nZXRTY29wZSgpLCB2YWwyLCB2YWwpO1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgY2FzZSBDc3NUb2tlbml6ZXIuVG9rZW5UeXBlLlBMVVM6XG4gICAgICAgICAgICB2YWwgPSBuZXcgRXhwcnMuQWRkKGhhbmRsZXIuZ2V0U2NvcGUoKSwgdmFsMiwgdmFsKTtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgIGNhc2UgQ3NzVG9rZW5pemVyLlRva2VuVHlwZS5NSU5VUzpcbiAgICAgICAgICAgIHZhbCA9IG5ldyBFeHBycy5TdWJ0cmFjdChoYW5kbGVyLmdldFNjb3BlKCksIHZhbDIsIHZhbCk7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgICBjYXNlIENzc1Rva2VuaXplci5Ub2tlblR5cGUuU1RBUjpcbiAgICAgICAgICAgIHZhbCA9IG5ldyBFeHBycy5NdWx0aXBseShoYW5kbGVyLmdldFNjb3BlKCksIHZhbDIsIHZhbCk7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgICBjYXNlIENzc1Rva2VuaXplci5Ub2tlblR5cGUuU0xBU0g6XG4gICAgICAgICAgICB2YWwgPSBuZXcgRXhwcnMuRGl2aWRlKGhhbmRsZXIuZ2V0U2NvcGUoKSwgdmFsMiwgdmFsKTtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgIGNhc2UgQ3NzVG9rZW5pemVyLlRva2VuVHlwZS5QRVJDRU5UOlxuICAgICAgICAgICAgdmFsID0gbmV3IEV4cHJzLk1vZHVsbyhoYW5kbGVyLmdldFNjb3BlKCksIHZhbDIsIHZhbCk7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgICBjYXNlIENzc1Rva2VuaXplci5Ub2tlblR5cGUuQ09MT046XG4gICAgICAgICAgICBpZiAodmFsU3RhY2subGVuZ3RoID4gMSkge1xuICAgICAgICAgICAgICBzd2l0Y2ggKHZhbFN0YWNrW3ZhbFN0YWNrLmxlbmd0aCAtIDFdKSB7XG4gICAgICAgICAgICAgICAgY2FzZSBDc3NUb2tlbml6ZXIuVG9rZW5UeXBlLlFNQVJLOlxuICAgICAgICAgICAgICAgICAgdmFsU3RhY2sucG9wKCk7XG4gICAgICAgICAgICAgICAgICB2YWwgPSBuZXcgRXhwcnMuQ29uZChcbiAgICAgICAgICAgICAgICAgICAgaGFuZGxlci5nZXRTY29wZSgpLFxuICAgICAgICAgICAgICAgICAgICB2YWxTdGFjay5wb3AoKSBhcyBFeHBycy5WYWwsXG4gICAgICAgICAgICAgICAgICAgIHZhbDIsXG4gICAgICAgICAgICAgICAgICAgIHZhbCxcbiAgICAgICAgICAgICAgICAgICk7XG4gICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICBjYXNlIENzc1Rva2VuaXplci5Ub2tlblR5cGUuT19QQVI6XG4gICAgICAgICAgICAgICAgICBpZiAodmFsMi5pc01lZGlhTmFtZSgpKSB7XG4gICAgICAgICAgICAgICAgICAgIHZhbCA9IG5ldyBFeHBycy5NZWRpYVRlc3QoXG4gICAgICAgICAgICAgICAgICAgICAgaGFuZGxlci5nZXRTY29wZSgpLFxuICAgICAgICAgICAgICAgICAgICAgIHZhbDIgYXMgRXhwcnMuTWVkaWFOYW1lLFxuICAgICAgICAgICAgICAgICAgICAgIHZhbCxcbiAgICAgICAgICAgICAgICAgICAgKTtcbiAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuZXhwckVycm9yKFwiRV9DU1NfTUVESUFfVEVTVFwiLCB0b2tlbik7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICB0aGlzLmV4cHJFcnJvcihcIkVfQ1NTX0VYUFJfQ09ORFwiLCB0b2tlbik7XG4gICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgIGNhc2UgQ3NzVG9rZW5pemVyLlRva2VuVHlwZS5RTUFSSzpcbiAgICAgICAgICAgIGlmIChvcCAhPSBDc3NUb2tlbml6ZXIuVG9rZW5UeXBlLkNPTE9OKSB7XG4gICAgICAgICAgICAgIHRoaXMuZXhwckVycm9yKFwiRV9DU1NfRVhQUl9DT05EXCIsIHRva2VuKTtcbiAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgLy8gZmFsbCB0aHJvdWdoXG4gICAgICAgICAgY2FzZSBDc3NUb2tlbml6ZXIuVG9rZW5UeXBlLk9fUEFSOlxuICAgICAgICAgICAgLy8gZG9uJ3QgcmVkdWNlXG4gICAgICAgICAgICB2YWxTdGFjay5wdXNoKHZhbDIpO1xuICAgICAgICAgICAgdmFsU3RhY2sucHVzaCh0b2spO1xuICAgICAgICAgICAgdmFsU3RhY2sucHVzaCh2YWwpO1xuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICB0aGlzLmV4cHJFcnJvcihcIkZfVU5FWFBFQ1RFRF9TVEFURVwiLCB0b2tlbik7XG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gICAgdmFsU3RhY2sucHVzaCh2YWwpO1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuXG4gIHJlYWRQc2V1ZG9QYXJhbXMoKTogKG51bWJlciB8IHN0cmluZylbXSB7XG4gICAgY29uc3QgYXJyID0gW107XG4gICAgd2hpbGUgKHRydWUpIHtcbiAgICAgIGNvbnN0IHRva2VuID0gdGhpcy50b2tlbml6ZXIudG9rZW4oKTtcbiAgICAgIHN3aXRjaCAodG9rZW4udHlwZSkge1xuICAgICAgICBjYXNlIENzc1Rva2VuaXplci5Ub2tlblR5cGUuSURFTlQ6XG4gICAgICAgICAgYXJyLnB1c2godG9rZW4udGV4dCk7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIGNhc2UgQ3NzVG9rZW5pemVyLlRva2VuVHlwZS5QTFVTOlxuICAgICAgICAgIGFyci5wdXNoKFwiK1wiKTtcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgY2FzZSBDc3NUb2tlbml6ZXIuVG9rZW5UeXBlLk5VTTpcbiAgICAgICAgY2FzZSBDc3NUb2tlbml6ZXIuVG9rZW5UeXBlLklOVDpcbiAgICAgICAgICBhcnIucHVzaCh0b2tlbi5udW0pO1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgIHJldHVybiBhcnI7XG4gICAgICB9XG4gICAgICB0aGlzLnRva2VuaXplci5jb25zdW1lKCk7XG4gICAgfVxuICB9XG5cbiAgLyoqXG4gICAqIFJlYWQgYGFuK2JgIGFyZ3VtZW50IG9mIHBzZXVkb2NsYXNzZXMuIFJvdWdobHkgYmFzZWQgb24gdGhlIGFsZ29yaXRobSBhdFxuICAgKiBodHRwczovL2RyYWZ0cy5jc3N3Zy5vcmcvY3NzLXN5bnRheC8jdGhlLWFuYi10eXBlXG4gICAqL1xuICBwcml2YXRlIHJlYWROdGhQc2V1ZG9QYXJhbXMoKTogbnVtYmVyW10gfCBudWxsIHtcbiAgICBsZXQgaGFzTGVhZGluZ1BsdXMgPSBmYWxzZTtcbiAgICBsZXQgdG9rZW4gPSB0aGlzLnRva2VuaXplci50b2tlbigpO1xuICAgIGlmICh0b2tlbi50eXBlID09PSBDc3NUb2tlbml6ZXIuVG9rZW5UeXBlLlBMVVMpIHtcbiAgICAgIC8vICcrJ1xuICAgICAgaGFzTGVhZGluZ1BsdXMgPSB0cnVlO1xuICAgICAgdGhpcy50b2tlbml6ZXIuY29uc3VtZSgpO1xuICAgICAgdG9rZW4gPSB0aGlzLnRva2VuaXplci50b2tlbigpO1xuICAgIH0gZWxzZSBpZiAoXG4gICAgICB0b2tlbi50eXBlID09PSBDc3NUb2tlbml6ZXIuVG9rZW5UeXBlLklERU5UICYmXG4gICAgICAodG9rZW4udGV4dCA9PT0gXCJldmVuXCIgfHwgdG9rZW4udGV4dCA9PT0gXCJvZGRcIilcbiAgICApIHtcbiAgICAgIC8vICdldmVuJyBvciAnb2RkJ1xuICAgICAgdGhpcy50b2tlbml6ZXIuY29uc3VtZSgpO1xuICAgICAgcmV0dXJuIFsyLCB0b2tlbi50ZXh0ID09PSBcIm9kZFwiID8gMSA6IDBdO1xuICAgIH1cbiAgICBzd2l0Y2ggKHRva2VuLnR5cGUpIHtcbiAgICAgIGNhc2UgQ3NzVG9rZW5pemVyLlRva2VuVHlwZS5OVU1FUklDOlxuICAgICAgICBpZiAoaGFzTGVhZGluZ1BsdXMgJiYgdG9rZW4ubnVtIDwgMCkge1xuICAgICAgICAgIC8vIHJlamVjdCAnKy1hbidcbiAgICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgICAgfVxuXG4gICAgICAvLyBGQUxMVEhST1VHSFxuICAgICAgY2FzZSBDc3NUb2tlbml6ZXIuVG9rZW5UeXBlLklERU5UOlxuICAgICAgICBpZiAoaGFzTGVhZGluZ1BsdXMgJiYgdG9rZW4udGV4dC5jaGFyQXQoMCkgPT09IFwiLVwiKSB7XG4gICAgICAgICAgLy8gcmVqZWN0ICcrLW4nXG4gICAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHRva2VuLnRleHQgPT09IFwiblwiIHx8IHRva2VuLnRleHQgPT09IFwiLW5cIikge1xuICAgICAgICAgIC8vICdhbicsICdhbiArYicsICdhbiAtYicsICduJywgJ24gK2InLCAnbiAtYicsICctbicsICctbiArYicgJy1uIC1iJ1xuICAgICAgICAgIGlmIChoYXNMZWFkaW5nUGx1cyAmJiB0b2tlbi5wcmVjZWRlZEJ5U3BhY2UpIHtcbiAgICAgICAgICAgIC8vIHJlamVjdCAnKyBhbidcbiAgICAgICAgICAgIHJldHVybiBudWxsO1xuICAgICAgICAgIH1cbiAgICAgICAgICBsZXQgYSA9IHRva2VuLnRleHQgPT09IFwiLW5cIiA/IC0xIDogMTtcbiAgICAgICAgICBpZiAodG9rZW4udHlwZSA9PT0gQ3NzVG9rZW5pemVyLlRva2VuVHlwZS5OVU1FUklDKSB7XG4gICAgICAgICAgICBhID0gdG9rZW4ubnVtO1xuICAgICAgICAgIH1cbiAgICAgICAgICBsZXQgYiA9IDA7XG4gICAgICAgICAgdGhpcy50b2tlbml6ZXIuY29uc3VtZSgpO1xuICAgICAgICAgIHRva2VuID0gdGhpcy50b2tlbml6ZXIudG9rZW4oKTtcbiAgICAgICAgICBjb25zdCBoYXNNaW51c1NpZ24gPSB0b2tlbi50eXBlID09PSBDc3NUb2tlbml6ZXIuVG9rZW5UeXBlLk1JTlVTO1xuICAgICAgICAgIGNvbnN0IGhhc1NpZ24gPVxuICAgICAgICAgICAgdG9rZW4udHlwZSA9PT0gQ3NzVG9rZW5pemVyLlRva2VuVHlwZS5QTFVTIHx8IGhhc01pbnVzU2lnbjtcbiAgICAgICAgICBpZiAoaGFzU2lnbikge1xuICAgICAgICAgICAgLy8gJ2FuICtiJywgJ2FuIC0gYidcbiAgICAgICAgICAgIHRoaXMudG9rZW5pemVyLmNvbnN1bWUoKTtcbiAgICAgICAgICAgIHRva2VuID0gdGhpcy50b2tlbml6ZXIudG9rZW4oKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgaWYgKHRva2VuLnR5cGUgPT09IENzc1Rva2VuaXplci5Ub2tlblR5cGUuSU5UKSB7XG4gICAgICAgICAgICBiID0gdG9rZW4ubnVtO1xuXG4gICAgICAgICAgICBpZiAoMSAvIGIgPT09IDEgLyAtMCkge1xuICAgICAgICAgICAgICAvLyBuZWdhdGl2ZSB6ZXJvOiAnYW4gLTAnXG4gICAgICAgICAgICAgIGIgPSAwO1xuICAgICAgICAgICAgICBpZiAoaGFzU2lnbikge1xuICAgICAgICAgICAgICAgIHJldHVybiBudWxsOyAvLyByZWplY3QgJ2FuICsgLTAnLCAnYW4gLSAtMCdcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSBlbHNlIGlmIChiIDwgMCkge1xuICAgICAgICAgICAgICAvLyBuZWdhdGl2ZTogJ2FuIC1iJ1xuICAgICAgICAgICAgICBpZiAoaGFzU2lnbikge1xuICAgICAgICAgICAgICAgIHJldHVybiBudWxsOyAvLyByZWplY3QgJ2FuICsgLWInLCAnYW4gLSAtYidcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSBlbHNlIGlmIChiID49IDApIHtcbiAgICAgICAgICAgICAgLy8gcG9zaXRpdmUgb3IgcG9zaXRpdmUgemVybzogJ2FuICtiJ1xuICAgICAgICAgICAgICBpZiAoIWhhc1NpZ24pIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdGhpcy50b2tlbml6ZXIuY29uc3VtZSgpO1xuICAgICAgICAgIH0gZWxzZSBpZiAoaGFzU2lnbikge1xuICAgICAgICAgICAgLy8gcmVqZWN0ICdhbiArIChub24taW50ZWdlciknXG4gICAgICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgICAgICB9XG4gICAgICAgICAgcmV0dXJuIFthLCBoYXNNaW51c1NpZ24gJiYgYiA+IDAgPyAtYiA6IGJdO1xuICAgICAgICB9IGVsc2UgaWYgKHRva2VuLnRleHQgPT09IFwibi1cIiB8fCB0b2tlbi50ZXh0ID09PSBcIi1uLVwiKSB7XG4gICAgICAgICAgLy8gJ2FuLSBiJywgJy1uLSBiJ1xuICAgICAgICAgIGlmIChoYXNMZWFkaW5nUGx1cyAmJiB0b2tlbi5wcmVjZWRlZEJ5U3BhY2UpIHtcbiAgICAgICAgICAgIC8vIHJlamVjdCAnKyBhbi0gYidcbiAgICAgICAgICAgIHJldHVybiBudWxsO1xuICAgICAgICAgIH1cbiAgICAgICAgICBsZXQgYSA9IHRva2VuLnRleHQgPT09IFwiLW4tXCIgPyAtMSA6IDE7XG4gICAgICAgICAgaWYgKHRva2VuLnR5cGUgPT09IENzc1Rva2VuaXplci5Ub2tlblR5cGUuTlVNRVJJQykge1xuICAgICAgICAgICAgYSA9IHRva2VuLm51bTtcbiAgICAgICAgICB9XG4gICAgICAgICAgdGhpcy50b2tlbml6ZXIuY29uc3VtZSgpO1xuICAgICAgICAgIHRva2VuID0gdGhpcy50b2tlbml6ZXIudG9rZW4oKTtcbiAgICAgICAgICBpZiAodG9rZW4udHlwZSA9PT0gQ3NzVG9rZW5pemVyLlRva2VuVHlwZS5JTlQpIHtcbiAgICAgICAgICAgIGlmICh0b2tlbi5udW0gPCAwIHx8IDEgLyB0b2tlbi5udW0gPT09IDEgLyAtMCkge1xuICAgICAgICAgICAgICAvLyByZWplY3QgJ2FuLSAtYicsICdhbi0gLTAnXG4gICAgICAgICAgICAgIHJldHVybiBudWxsO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgdGhpcy50b2tlbml6ZXIuY29uc3VtZSgpO1xuICAgICAgICAgICAgICByZXR1cm4gW2EsIHRva2VuLm51bV07XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGxldCByID0gdG9rZW4udGV4dC5tYXRjaCgvXm4oLVswLTldKykkLyk7XG4gICAgICAgICAgaWYgKHIpIHtcbiAgICAgICAgICAgIC8vICduLWInLCAnYW4tYidcbiAgICAgICAgICAgIGlmIChoYXNMZWFkaW5nUGx1cyAmJiB0b2tlbi5wcmVjZWRlZEJ5U3BhY2UpIHtcbiAgICAgICAgICAgICAgLy8gcmVqZWN0ICcrIGFuLWInXG4gICAgICAgICAgICAgIHJldHVybiBudWxsO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdGhpcy50b2tlbml6ZXIuY29uc3VtZSgpO1xuICAgICAgICAgICAgcmV0dXJuIFtcbiAgICAgICAgICAgICAgdG9rZW4udHlwZSA9PT0gQ3NzVG9rZW5pemVyLlRva2VuVHlwZS5OVU1FUklDID8gdG9rZW4ubnVtIDogMSxcbiAgICAgICAgICAgICAgcGFyc2VJbnQoclsxXSwgMTApLFxuICAgICAgICAgICAgXTtcbiAgICAgICAgICB9XG4gICAgICAgICAgciA9IHRva2VuLnRleHQubWF0Y2goL14tbigtWzAtOV0rKSQvKTtcblxuICAgICAgICAgIC8vICctbi1iJ1xuICAgICAgICAgIGlmIChyKSB7XG4gICAgICAgICAgICB0aGlzLnRva2VuaXplci5jb25zdW1lKCk7XG4gICAgICAgICAgICByZXR1cm4gWy0xLCBwYXJzZUludChyWzFdLCAxMCldO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgIGNhc2UgQ3NzVG9rZW5pemVyLlRva2VuVHlwZS5JTlQ6XG4gICAgICAgIGlmIChoYXNMZWFkaW5nUGx1cyAmJiAodG9rZW4ucHJlY2VkZWRCeVNwYWNlIHx8IHRva2VuLm51bSA8IDApKSB7XG4gICAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy50b2tlbml6ZXIuY29uc3VtZSgpO1xuICAgICAgICByZXR1cm4gWzAsIHRva2VuLm51bV07XG4gICAgfVxuICAgIHJldHVybiBudWxsO1xuICB9XG5cbiAgbWFrZUNvbmRpdGlvbihjbGFzc2VzOiBzdHJpbmcgfCBudWxsLCBjb25kaXRpb246IEV4cHJzLlZhbCk6IENzcy5FeHByIHtcbiAgICBjb25zdCBzY29wZSA9IHRoaXMuaGFuZGxlci5nZXRTY29wZSgpO1xuICAgIGlmICghc2NvcGUpIHtcbiAgICAgIHJldHVybiBudWxsO1xuICAgIH1cbiAgICBjb25kaXRpb24gPSBjb25kaXRpb24gfHwgc2NvcGUuX3RydWU7XG4gICAgaWYgKGNsYXNzZXMpIHtcbiAgICAgIGNvbnN0IGNsYXNzTGlzdCA9IGNsYXNzZXMuc3BsaXQoL1xccysvKTtcbiAgICAgIGZvciAoY29uc3QgY2xhc3NOYW1lIG9mIGNsYXNzTGlzdCkge1xuICAgICAgICBzd2l0Y2ggKGNsYXNzTmFtZSkge1xuICAgICAgICAgIGNhc2UgXCJ2ZXJ0aWNhbFwiOlxuICAgICAgICAgICAgY29uZGl0aW9uID0gRXhwcnMuYW5kKFxuICAgICAgICAgICAgICBzY29wZSxcbiAgICAgICAgICAgICAgY29uZGl0aW9uLFxuICAgICAgICAgICAgICBuZXcgRXhwcnMuTm90KHNjb3BlLCBuZXcgRXhwcnMuTmFtZWQoc2NvcGUsIFwicHJlZi1ob3Jpem9udGFsXCIpKSxcbiAgICAgICAgICAgICk7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgICBjYXNlIFwiaG9yaXpvbnRhbFwiOlxuICAgICAgICAgICAgY29uZGl0aW9uID0gRXhwcnMuYW5kKFxuICAgICAgICAgICAgICBzY29wZSxcbiAgICAgICAgICAgICAgY29uZGl0aW9uLFxuICAgICAgICAgICAgICBuZXcgRXhwcnMuTmFtZWQoc2NvcGUsIFwicHJlZi1ob3Jpem9udGFsXCIpLFxuICAgICAgICAgICAgKTtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgIGNhc2UgXCJkYXlcIjpcbiAgICAgICAgICAgIGNvbmRpdGlvbiA9IEV4cHJzLmFuZChcbiAgICAgICAgICAgICAgc2NvcGUsXG4gICAgICAgICAgICAgIGNvbmRpdGlvbixcbiAgICAgICAgICAgICAgbmV3IEV4cHJzLk5vdChzY29wZSwgbmV3IEV4cHJzLk5hbWVkKHNjb3BlLCBcInByZWYtbmlnaHQtbW9kZVwiKSksXG4gICAgICAgICAgICApO1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgY2FzZSBcIm5pZ2h0XCI6XG4gICAgICAgICAgICBjb25kaXRpb24gPSBFeHBycy5hbmQoXG4gICAgICAgICAgICAgIHNjb3BlLFxuICAgICAgICAgICAgICBjb25kaXRpb24sXG4gICAgICAgICAgICAgIG5ldyBFeHBycy5OYW1lZChzY29wZSwgXCJwcmVmLW5pZ2h0LW1vZGVcIiksXG4gICAgICAgICAgICApO1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgIGNvbmRpdGlvbiA9IHNjb3BlLl9mYWxzZTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgICBpZiAoY29uZGl0aW9uID09PSBzY29wZS5fdHJ1ZSkge1xuICAgICAgcmV0dXJuIG51bGw7XG4gICAgfVxuICAgIHJldHVybiBuZXcgQ3NzLkV4cHIoY29uZGl0aW9uKTtcbiAgfVxuXG4gIGlzSW5zaWRlUHJvcGVydHlPbmx5UnVsZSgpOiBib29sZWFuIHtcbiAgICBzd2l0Y2ggKHRoaXMucnVsZVN0YWNrW3RoaXMucnVsZVN0YWNrLmxlbmd0aCAtIDFdKSB7XG4gICAgICBjYXNlIFwiW3NlbGVjdG9yXVwiOlxuICAgICAgY2FzZSBcImZvbnQtZmFjZVwiOlxuICAgICAgY2FzZSBcIi1lcHVieC1mbG93XCI6XG4gICAgICBjYXNlIFwiLWVwdWJ4LXZpZXdwb3J0XCI6XG4gICAgICBjYXNlIFwiLWVwdWJ4LWRlZmluZVwiOlxuICAgICAgY2FzZSBcIi1hZGFwdC1mb290bm90ZS1hcmVhXCI6XG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cblxuICBydW5QYXJzZXIoXG4gICAgY291bnQ6IG51bWJlcixcbiAgICBwYXJzaW5nVmFsdWUsXG4gICAgcGFyc2luZ1N0eWxlQXR0cjogYm9vbGVhbixcbiAgICBwYXJzaW5nTWVkaWFRdWVyeSxcbiAgICBwYXJzaW5nRnVuY3Rpb25QYXJhbSxcbiAgKTogYm9vbGVhbiB7XG4gICAgY29uc3QgaGFuZGxlciA9IHRoaXMuaGFuZGxlcjtcbiAgICBjb25zdCB0b2tlbml6ZXIgPSB0aGlzLnRva2VuaXplcjtcbiAgICBjb25zdCB2YWxTdGFjayA9IHRoaXMudmFsU3RhY2s7XG4gICAgbGV0IHRva2VuOiBDc3NUb2tlbml6ZXIuVG9rZW47XG4gICAgbGV0IHRva2VuMTogQ3NzVG9rZW5pemVyLlRva2VuO1xuICAgIGxldCBuczogc3RyaW5nIHwgbnVsbDtcbiAgICBsZXQgdGV4dDogc3RyaW5nIHwgbnVsbDtcbiAgICBsZXQgbnVtOiBudW1iZXI7XG4gICAgbGV0IHZhbDogQ3NzLlZhbDtcbiAgICBsZXQgcGFyYW1zOiAobnVtYmVyIHwgc3RyaW5nKVtdO1xuICAgIGlmIChwYXJzaW5nTWVkaWFRdWVyeSkge1xuICAgICAgdGhpcy5leHByQ29udGV4dCA9IEV4cHJDb250ZXh0Lk1FRElBO1xuICAgICAgdGhpcy52YWxTdGFjay5wdXNoKFwie1wiKTtcbiAgICB9XG4gICAgcGFyc2VyTG9vcDogZm9yICg7IGNvdW50ID4gMDsgLS1jb3VudCkge1xuICAgICAgdG9rZW4gPSB0b2tlbml6ZXIudG9rZW4oKTtcbiAgICAgIHN3aXRjaCAodGhpcy5hY3Rpb25zW3Rva2VuLnR5cGVdKSB7XG4gICAgICAgIGNhc2UgQWN0aW9uLklERU5UOlxuICAgICAgICAgIC8vIGZpZ3VyZSBvdXQgaWYgdGhpcyBpcyBhIHByb3BlcnR5IGFzc2lnbm1lbnQgb3Igc2VsZWN0b3JcbiAgICAgICAgICBpZiAodG9rZW5pemVyLm50aFRva2VuKDEpLnR5cGUgIT0gQ3NzVG9rZW5pemVyLlRva2VuVHlwZS5DT0xPTikge1xuICAgICAgICAgICAgLy8gY2Fubm90IGJlIHByb3BlcnR5IGFzc2lnbm1lbnRcbiAgICAgICAgICAgIGlmICh0aGlzLmlzSW5zaWRlUHJvcGVydHlPbmx5UnVsZSgpKSB7XG4gICAgICAgICAgICAgIGhhbmRsZXIuZXJyb3IoXCJFX0NTU19DT0xPTl9FWFBFQ1RFRFwiLCB0b2tlbml6ZXIubnRoVG9rZW4oMSkpO1xuICAgICAgICAgICAgICB0aGlzLmFjdGlvbnMgPSBhY3Rpb25zRXJyb3JEZWNsO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgdGhpcy5hY3Rpb25zID0gYWN0aW9uc1NlbGVjdG9yU3RhcnQ7XG4gICAgICAgICAgICAgIGhhbmRsZXIuc3RhcnRTZWxlY3RvclJ1bGUoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICAgIH1cbiAgICAgICAgICB0b2tlbjEgPSB0b2tlbml6ZXIubnRoVG9rZW4oMik7XG4gICAgICAgICAgaWYgKFxuICAgICAgICAgICAgdG9rZW4xLnByZWNlZGVkQnlTcGFjZSB8fFxuICAgICAgICAgICAgKHRva2VuMS50eXBlICE9IENzc1Rva2VuaXplci5Ub2tlblR5cGUuSURFTlQgJiZcbiAgICAgICAgICAgICAgdG9rZW4xLnR5cGUgIT0gQ3NzVG9rZW5pemVyLlRva2VuVHlwZS5GVU5DKVxuICAgICAgICAgICkge1xuICAgICAgICAgICAgLy8gY2Fubm90IGJlIGEgc2VsZWN0b3JcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgLy8gY2FuIGJlIGVpdGhlciBhIHNlbGVjdG9yIG9yIGEgcHJvcGVydHkgYXNzaWdubWVudFxuICAgICAgICAgICAgdG9rZW5pemVyLm1hcmsoKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgdGhpcy5wcm9wTmFtZSA9IHRva2VuLnRleHQ7XG4gICAgICAgICAgdGhpcy5wcm9wSW1wb3J0YW50ID0gZmFsc2U7XG4gICAgICAgICAgdG9rZW5pemVyLmNvbnN1bWUoKTtcbiAgICAgICAgICB0b2tlbml6ZXIuY29uc3VtZSgpO1xuICAgICAgICAgIHRoaXMuYWN0aW9ucyA9IGFjdGlvbnNQcm9wVmFsO1xuICAgICAgICAgIHZhbFN0YWNrLnNwbGljZSgwLCB2YWxTdGFjay5sZW5ndGgpO1xuICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICBjYXNlIEFjdGlvbi5QUk9QOlxuICAgICAgICAgIC8vIGZpZ3VyZSBvdXQgaWYgdGhpcyBpcyBhIHByb3BlcnR5IGFzc2lnbm1lbnQgb3Igc2VsZWN0b3JcbiAgICAgICAgICBpZiAodG9rZW5pemVyLm50aFRva2VuKDEpLnR5cGUgIT0gQ3NzVG9rZW5pemVyLlRva2VuVHlwZS5DT0xPTikge1xuICAgICAgICAgICAgLy8gY2Fubm90IGJlIHByb3BlcnR5IGFzc2lnbm1lbnRcbiAgICAgICAgICAgIHRoaXMuYWN0aW9ucyA9IGFjdGlvbnNFcnJvckRlY2w7XG4gICAgICAgICAgICBoYW5kbGVyLmVycm9yKFwiRV9DU1NfQ09MT05fRVhQRUNURURcIiwgdG9rZW5pemVyLm50aFRva2VuKDEpKTtcbiAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICAgIH1cbiAgICAgICAgICB0aGlzLnByb3BOYW1lID0gdG9rZW4udGV4dDtcbiAgICAgICAgICB0aGlzLnByb3BJbXBvcnRhbnQgPSBmYWxzZTtcbiAgICAgICAgICB0b2tlbml6ZXIuY29uc3VtZSgpO1xuICAgICAgICAgIHRva2VuaXplci5jb25zdW1lKCk7XG4gICAgICAgICAgdGhpcy5hY3Rpb25zID0gYWN0aW9uc1Byb3BWYWw7XG4gICAgICAgICAgdmFsU3RhY2suc3BsaWNlKDAsIHZhbFN0YWNrLmxlbmd0aCk7XG4gICAgICAgICAgY29udGludWU7XG4gICAgICAgIGNhc2UgQWN0aW9uLlNFTEVDVE9SX1NUQVJUOlxuICAgICAgICAgIC8vIGRvbid0IGNvbnN1bWUsIHByb2Nlc3MgYWdhaW5cbiAgICAgICAgICB0aGlzLmFjdGlvbnMgPSBhY3Rpb25zU2VsZWN0b3JTdGFydDtcbiAgICAgICAgICBoYW5kbGVyLnN0YXJ0U2VsZWN0b3JSdWxlKCk7XG4gICAgICAgICAgY29udGludWU7XG4gICAgICAgIGNhc2UgQWN0aW9uLlNFTEVDVE9SX05BTUVfMTpcbiAgICAgICAgICBpZiAoIXRva2VuLnByZWNlZGVkQnlTcGFjZSkge1xuICAgICAgICAgICAgdGhpcy5hY3Rpb25zID0gYWN0aW9uc0Vycm9yU2VsZWN0b3I7XG4gICAgICAgICAgICBoYW5kbGVyLmVycm9yKFwiRV9DU1NfU1BBQ0VfRVhQRUNURURcIiwgdG9rZW4pO1xuICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgICAgfVxuICAgICAgICAgIGhhbmRsZXIuZGVzY2VuZGFudFNlbGVjdG9yKCk7XG5cbiAgICAgICAgLy8gZmFsbCB0aHJvdWdoXG4gICAgICAgIGNhc2UgQWN0aW9uLlNFTEVDVE9SX05BTUU6XG4gICAgICAgICAgaWYgKHRva2VuaXplci5udGhUb2tlbigxKS50eXBlID09IENzc1Rva2VuaXplci5Ub2tlblR5cGUuQkFSKSB7XG4gICAgICAgICAgICB0b2tlbml6ZXIuY29uc3VtZSgpO1xuICAgICAgICAgICAgdG9rZW5pemVyLmNvbnN1bWUoKTtcbiAgICAgICAgICAgIG5zID0gdGhpcy5uYW1lc3BhY2VQcmVmaXhUb1VSSVt0b2tlbi50ZXh0XTtcbiAgICAgICAgICAgIGlmIChucyAhPSBudWxsKSB7XG4gICAgICAgICAgICAgIHRva2VuID0gdG9rZW5pemVyLnRva2VuKCk7XG4gICAgICAgICAgICAgIHN3aXRjaCAodG9rZW4udHlwZSkge1xuICAgICAgICAgICAgICAgIGNhc2UgQ3NzVG9rZW5pemVyLlRva2VuVHlwZS5JREVOVDpcbiAgICAgICAgICAgICAgICAgIGhhbmRsZXIudGFnU2VsZWN0b3IobnMsIHRva2VuLnRleHQpO1xuICAgICAgICAgICAgICAgICAgaWYgKHBhcnNpbmdGdW5jdGlvblBhcmFtKSB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuYWN0aW9ucyA9IGFjdGlvbnNTZWxlY3RvckluRnVuYztcbiAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuYWN0aW9ucyA9IGFjdGlvbnNTZWxlY3RvcjtcbiAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgIHRva2VuaXplci5jb25zdW1lKCk7XG4gICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICBjYXNlIENzc1Rva2VuaXplci5Ub2tlblR5cGUuU1RBUjpcbiAgICAgICAgICAgICAgICAgIGhhbmRsZXIudGFnU2VsZWN0b3IobnMsIG51bGwpO1xuICAgICAgICAgICAgICAgICAgaWYgKHBhcnNpbmdGdW5jdGlvblBhcmFtKSB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuYWN0aW9ucyA9IGFjdGlvbnNTZWxlY3RvckluRnVuYztcbiAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuYWN0aW9ucyA9IGFjdGlvbnNTZWxlY3RvcjtcbiAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgIHRva2VuaXplci5jb25zdW1lKCk7XG4gICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgICAgICAgdGhpcy5hY3Rpb25zID0gYWN0aW9uc0Vycm9yO1xuICAgICAgICAgICAgICAgICAgaGFuZGxlci5lcnJvcihcIkVfQ1NTX05BTUVTUEFDRVwiLCB0b2tlbik7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgIHRoaXMuYWN0aW9ucyA9IGFjdGlvbnNFcnJvcjtcbiAgICAgICAgICAgICAgaGFuZGxlci5lcnJvcihcIkVfQ1NTX1VOREVDTEFSRURfUFJFRklYXCIsIHRva2VuKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgaGFuZGxlci50YWdTZWxlY3Rvcih0aGlzLmRlZmF1bHROYW1lc3BhY2VVUkksIHRva2VuLnRleHQpO1xuICAgICAgICAgICAgaWYgKHBhcnNpbmdGdW5jdGlvblBhcmFtKSB7XG4gICAgICAgICAgICAgIHRoaXMuYWN0aW9ucyA9IGFjdGlvbnNTZWxlY3RvckluRnVuYztcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgIHRoaXMuYWN0aW9ucyA9IGFjdGlvbnNTZWxlY3RvcjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHRva2VuaXplci5jb25zdW1lKCk7XG4gICAgICAgICAgfVxuICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICBjYXNlIEFjdGlvbi5TRUxFQ1RPUl9BTllfMTpcbiAgICAgICAgICBpZiAoIXRva2VuLnByZWNlZGVkQnlTcGFjZSkge1xuICAgICAgICAgICAgdGhpcy5hY3Rpb25zID0gYWN0aW9uc0Vycm9yU2VsZWN0b3I7XG4gICAgICAgICAgICBoYW5kbGVyLmVycm9yKFwiRV9DU1NfU1BBQ0VfRVhQRUNURURcIiwgdG9rZW4pO1xuICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgICAgfVxuICAgICAgICAgIGhhbmRsZXIuZGVzY2VuZGFudFNlbGVjdG9yKCk7XG5cbiAgICAgICAgLy8gZmFsbCB0aHJvdWdoXG4gICAgICAgIGNhc2UgQWN0aW9uLlNFTEVDVE9SX0FOWTpcbiAgICAgICAgICBpZiAodG9rZW5pemVyLm50aFRva2VuKDEpLnR5cGUgPT0gQ3NzVG9rZW5pemVyLlRva2VuVHlwZS5CQVIpIHtcbiAgICAgICAgICAgIHRva2VuaXplci5jb25zdW1lKCk7XG4gICAgICAgICAgICB0b2tlbml6ZXIuY29uc3VtZSgpO1xuICAgICAgICAgICAgdG9rZW4gPSB0b2tlbml6ZXIudG9rZW4oKTtcbiAgICAgICAgICAgIHN3aXRjaCAodG9rZW4udHlwZSkge1xuICAgICAgICAgICAgICBjYXNlIENzc1Rva2VuaXplci5Ub2tlblR5cGUuSURFTlQ6XG4gICAgICAgICAgICAgICAgaGFuZGxlci50YWdTZWxlY3RvcihudWxsLCB0b2tlbi50ZXh0KTtcbiAgICAgICAgICAgICAgICBpZiAocGFyc2luZ0Z1bmN0aW9uUGFyYW0pIHtcbiAgICAgICAgICAgICAgICAgIHRoaXMuYWN0aW9ucyA9IGFjdGlvbnNTZWxlY3RvckluRnVuYztcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgdGhpcy5hY3Rpb25zID0gYWN0aW9uc1NlbGVjdG9yO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB0b2tlbml6ZXIuY29uc3VtZSgpO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICBjYXNlIENzc1Rva2VuaXplci5Ub2tlblR5cGUuU1RBUjpcbiAgICAgICAgICAgICAgICBoYW5kbGVyLnRhZ1NlbGVjdG9yKG51bGwsIG51bGwpO1xuICAgICAgICAgICAgICAgIGlmIChwYXJzaW5nRnVuY3Rpb25QYXJhbSkge1xuICAgICAgICAgICAgICAgICAgdGhpcy5hY3Rpb25zID0gYWN0aW9uc1NlbGVjdG9ySW5GdW5jO1xuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICB0aGlzLmFjdGlvbnMgPSBhY3Rpb25zU2VsZWN0b3I7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHRva2VuaXplci5jb25zdW1lKCk7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICAgICAgdGhpcy5hY3Rpb25zID0gYWN0aW9uc0Vycm9yO1xuICAgICAgICAgICAgICAgIGhhbmRsZXIuZXJyb3IoXCJFX0NTU19OQU1FU1BBQ0VcIiwgdG9rZW4pO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBoYW5kbGVyLnRhZ1NlbGVjdG9yKHRoaXMuZGVmYXVsdE5hbWVzcGFjZVVSSSwgbnVsbCk7XG4gICAgICAgICAgICBpZiAocGFyc2luZ0Z1bmN0aW9uUGFyYW0pIHtcbiAgICAgICAgICAgICAgdGhpcy5hY3Rpb25zID0gYWN0aW9uc1NlbGVjdG9ySW5GdW5jO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgdGhpcy5hY3Rpb25zID0gYWN0aW9uc1NlbGVjdG9yO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdG9rZW5pemVyLmNvbnN1bWUoKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgY29udGludWU7XG4gICAgICAgIGNhc2UgQWN0aW9uLlNFTEVDVE9SX0lEXzE6XG4gICAgICAgICAgaWYgKHRva2VuLnByZWNlZGVkQnlTcGFjZSkge1xuICAgICAgICAgICAgaGFuZGxlci5kZXNjZW5kYW50U2VsZWN0b3IoKTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgLy8gZmFsbCB0aHJvdWdoXG4gICAgICAgIGNhc2UgQWN0aW9uLlNFTEVDVE9SX0lEOlxuICAgICAgICAgIGhhbmRsZXIuaWRTZWxlY3Rvcih0b2tlbi50ZXh0KTtcbiAgICAgICAgICBpZiAocGFyc2luZ0Z1bmN0aW9uUGFyYW0pIHtcbiAgICAgICAgICAgIHRoaXMuYWN0aW9ucyA9IGFjdGlvbnNTZWxlY3RvckluRnVuYztcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgdGhpcy5hY3Rpb25zID0gYWN0aW9uc1NlbGVjdG9yO1xuICAgICAgICAgIH1cbiAgICAgICAgICB0b2tlbml6ZXIuY29uc3VtZSgpO1xuICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICBjYXNlIEFjdGlvbi5TRUxFQ1RPUl9DTEFTU18xOlxuICAgICAgICAgIGlmICh0b2tlbi5wcmVjZWRlZEJ5U3BhY2UpIHtcbiAgICAgICAgICAgIGhhbmRsZXIuZGVzY2VuZGFudFNlbGVjdG9yKCk7XG4gICAgICAgICAgfVxuXG4gICAgICAgIC8vIGZhbGwgdGhyb3VnaFxuICAgICAgICBjYXNlIEFjdGlvbi5TRUxFQ1RPUl9DTEFTUzpcbiAgICAgICAgICBoYW5kbGVyLmNsYXNzU2VsZWN0b3IodG9rZW4udGV4dCk7XG4gICAgICAgICAgaWYgKHBhcnNpbmdGdW5jdGlvblBhcmFtKSB7XG4gICAgICAgICAgICB0aGlzLmFjdGlvbnMgPSBhY3Rpb25zU2VsZWN0b3JJbkZ1bmM7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHRoaXMuYWN0aW9ucyA9IGFjdGlvbnNTZWxlY3RvcjtcbiAgICAgICAgICB9XG4gICAgICAgICAgdG9rZW5pemVyLmNvbnN1bWUoKTtcbiAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgY2FzZSBBY3Rpb24uU0VMRUNUT1JfUFNFVURPQ0xBU1NfMTpcbiAgICAgICAgICBpZiAodG9rZW4ucHJlY2VkZWRCeVNwYWNlKSB7XG4gICAgICAgICAgICBoYW5kbGVyLmRlc2NlbmRhbnRTZWxlY3RvcigpO1xuICAgICAgICAgIH1cblxuICAgICAgICAvLyBmYWxsIHRocm91Z2hcbiAgICAgICAgY2FzZSBBY3Rpb24uU0VMRUNUT1JfUFNFVURPQ0xBU1M6XG4gICAgICAgICAgdG9rZW5pemVyLmNvbnN1bWUoKTtcbiAgICAgICAgICB0b2tlbiA9IHRva2VuaXplci50b2tlbigpO1xuICAgICAgICAgIHBzZXVkb2NsYXNzVHlwZTogc3dpdGNoICh0b2tlbi50eXBlKSB7XG4gICAgICAgICAgICBjYXNlIENzc1Rva2VuaXplci5Ub2tlblR5cGUuSURFTlQ6XG4gICAgICAgICAgICAgIGhhbmRsZXIucHNldWRvY2xhc3NTZWxlY3Rvcih0b2tlbi50ZXh0LCBudWxsKTtcbiAgICAgICAgICAgICAgdG9rZW5pemVyLmNvbnN1bWUoKTtcbiAgICAgICAgICAgICAgaWYgKHBhcnNpbmdGdW5jdGlvblBhcmFtKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5hY3Rpb25zID0gYWN0aW9uc1NlbGVjdG9ySW5GdW5jO1xuICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIHRoaXMuYWN0aW9ucyA9IGFjdGlvbnNTZWxlY3RvcjtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgICAgIGNhc2UgQ3NzVG9rZW5pemVyLlRva2VuVHlwZS5GVU5DOlxuICAgICAgICAgICAgICB0ZXh0ID0gdG9rZW4udGV4dDtcbiAgICAgICAgICAgICAgdG9rZW5pemVyLmNvbnN1bWUoKTtcbiAgICAgICAgICAgICAgc3dpdGNoICh0ZXh0KSB7XG4gICAgICAgICAgICAgICAgY2FzZSBcIm5vdFwiOlxuICAgICAgICAgICAgICAgICAgdGhpcy5hY3Rpb25zID0gYWN0aW9uc1NlbGVjdG9yU3RhcnQ7XG4gICAgICAgICAgICAgICAgICBoYW5kbGVyLnN0YXJ0RnVuY1dpdGhTZWxlY3RvcihcIm5vdFwiKTtcbiAgICAgICAgICAgICAgICAgIGlmIChcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5ydW5QYXJzZXIoXG4gICAgICAgICAgICAgICAgICAgICAgTnVtYmVyLlBPU0lUSVZFX0lORklOSVRZLFxuICAgICAgICAgICAgICAgICAgICAgIGZhbHNlLFxuICAgICAgICAgICAgICAgICAgICAgIGZhbHNlLFxuICAgICAgICAgICAgICAgICAgICAgIGZhbHNlLFxuICAgICAgICAgICAgICAgICAgICAgIHRydWUsXG4gICAgICAgICAgICAgICAgICAgIClcbiAgICAgICAgICAgICAgICAgICkge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLmFjdGlvbnMgPSBhY3Rpb25zU2VsZWN0b3I7XG4gICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLmFjdGlvbnMgPSBhY3Rpb25zRXJyb3JTZWxlY3RvcjtcbiAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgIGJyZWFrIHBhcnNlckxvb3A7XG4gICAgICAgICAgICAgICAgY2FzZSBcImxhbmdcIjpcbiAgICAgICAgICAgICAgICBjYXNlIFwiaHJlZi1lcHViLXR5cGVcIjpcbiAgICAgICAgICAgICAgICAgIHRva2VuID0gdG9rZW5pemVyLnRva2VuKCk7XG4gICAgICAgICAgICAgICAgICBpZiAodG9rZW4udHlwZSA9PT0gQ3NzVG9rZW5pemVyLlRva2VuVHlwZS5JREVOVCkge1xuICAgICAgICAgICAgICAgICAgICBwYXJhbXMgPSBbdG9rZW4udGV4dF07XG4gICAgICAgICAgICAgICAgICAgIHRva2VuaXplci5jb25zdW1lKCk7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWsgcHNldWRvY2xhc3NUeXBlO1xuICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGNhc2UgXCJudGgtY2hpbGRcIjpcbiAgICAgICAgICAgICAgICBjYXNlIFwibnRoLW9mLXR5cGVcIjpcbiAgICAgICAgICAgICAgICBjYXNlIFwibnRoLWxhc3QtY2hpbGRcIjpcbiAgICAgICAgICAgICAgICBjYXNlIFwibnRoLWxhc3Qtb2YtdHlwZVwiOlxuICAgICAgICAgICAgICAgIGNhc2UgXCJudGhcIjpcbiAgICAgICAgICAgICAgICAgIHBhcmFtcyA9IHRoaXMucmVhZE50aFBzZXVkb1BhcmFtcygpO1xuICAgICAgICAgICAgICAgICAgaWYgKCFwYXJhbXMpIHtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWsgcHNldWRvY2xhc3NUeXBlO1xuICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgICAgICAgIC8vIFRPRE9cbiAgICAgICAgICAgICAgICAgIHBhcmFtcyA9IHRoaXMucmVhZFBzZXVkb1BhcmFtcygpO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIHRva2VuID0gdG9rZW5pemVyLnRva2VuKCk7XG4gICAgICAgICAgICAgIGlmICh0b2tlbi50eXBlID09IENzc1Rva2VuaXplci5Ub2tlblR5cGUuQ19QQVIpIHtcbiAgICAgICAgICAgICAgICBoYW5kbGVyLnBzZXVkb2NsYXNzU2VsZWN0b3IodGV4dCBhcyBzdHJpbmcsIHBhcmFtcyk7XG4gICAgICAgICAgICAgICAgdG9rZW5pemVyLmNvbnN1bWUoKTtcbiAgICAgICAgICAgICAgICBpZiAocGFyc2luZ0Z1bmN0aW9uUGFyYW0pIHtcbiAgICAgICAgICAgICAgICAgIHRoaXMuYWN0aW9ucyA9IGFjdGlvbnNTZWxlY3RvckluRnVuYztcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgdGhpcy5hY3Rpb25zID0gYWN0aW9uc1NlbGVjdG9yO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICB9XG4gICAgICAgICAgaGFuZGxlci5lcnJvcihcIkVfQ1NTX1BTRVVET0NMQVNTX1NZTlRBWFwiLCB0b2tlbik7XG4gICAgICAgICAgdGhpcy5hY3Rpb25zID0gYWN0aW9uc0Vycm9yO1xuICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICBjYXNlIEFjdGlvbi5TRUxFQ1RPUl9QU0VVRE9FTEVNOlxuICAgICAgICAgIHRva2VuaXplci5jb25zdW1lKCk7XG4gICAgICAgICAgdG9rZW4gPSB0b2tlbml6ZXIudG9rZW4oKTtcbiAgICAgICAgICBzd2l0Y2ggKHRva2VuLnR5cGUpIHtcbiAgICAgICAgICAgIGNhc2UgQ3NzVG9rZW5pemVyLlRva2VuVHlwZS5JREVOVDpcbiAgICAgICAgICAgICAgaGFuZGxlci5wc2V1ZG9lbGVtZW50U2VsZWN0b3IodG9rZW4udGV4dCwgbnVsbCk7XG4gICAgICAgICAgICAgIGlmIChwYXJzaW5nRnVuY3Rpb25QYXJhbSkge1xuICAgICAgICAgICAgICAgIHRoaXMuYWN0aW9ucyA9IGFjdGlvbnNTZWxlY3RvckluRnVuYztcbiAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICB0aGlzLmFjdGlvbnMgPSBhY3Rpb25zU2VsZWN0b3I7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgdG9rZW5pemVyLmNvbnN1bWUoKTtcbiAgICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgICAgICBjYXNlIENzc1Rva2VuaXplci5Ub2tlblR5cGUuRlVOQzpcbiAgICAgICAgICAgICAgdGV4dCA9IHRva2VuLnRleHQ7XG4gICAgICAgICAgICAgIHRva2VuaXplci5jb25zdW1lKCk7XG4gICAgICAgICAgICAgIGlmICh0ZXh0ID09IFwibnRoLWZyYWdtZW50XCIpIHtcbiAgICAgICAgICAgICAgICBwYXJhbXMgPSB0aGlzLnJlYWROdGhQc2V1ZG9QYXJhbXMoKTtcbiAgICAgICAgICAgICAgICBpZiAocGFyYW1zID09PSBudWxsKSB7XG4gICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgcGFyYW1zID0gdGhpcy5yZWFkUHNldWRvUGFyYW1zKCk7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgdG9rZW4gPSB0b2tlbml6ZXIudG9rZW4oKTtcbiAgICAgICAgICAgICAgaWYgKHRva2VuLnR5cGUgPT0gQ3NzVG9rZW5pemVyLlRva2VuVHlwZS5DX1BBUikge1xuICAgICAgICAgICAgICAgIGhhbmRsZXIucHNldWRvZWxlbWVudFNlbGVjdG9yKHRleHQgYXMgc3RyaW5nLCBwYXJhbXMpO1xuICAgICAgICAgICAgICAgIGlmIChwYXJzaW5nRnVuY3Rpb25QYXJhbSkge1xuICAgICAgICAgICAgICAgICAgdGhpcy5hY3Rpb25zID0gYWN0aW9uc1NlbGVjdG9ySW5GdW5jO1xuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICB0aGlzLmFjdGlvbnMgPSBhY3Rpb25zU2VsZWN0b3I7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHRva2VuaXplci5jb25zdW1lKCk7XG4gICAgICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgfVxuICAgICAgICAgIGhhbmRsZXIuZXJyb3IoXCJFX0NTU19QU0VVRE9FTEVNX1NZTlRBWFwiLCB0b2tlbik7XG4gICAgICAgICAgdGhpcy5hY3Rpb25zID0gYWN0aW9uc0Vycm9yO1xuICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICBjYXNlIEFjdGlvbi5TRUxFQ1RPUl9BVFRSXzE6XG4gICAgICAgICAgaWYgKHRva2VuLnByZWNlZGVkQnlTcGFjZSkge1xuICAgICAgICAgICAgaGFuZGxlci5kZXNjZW5kYW50U2VsZWN0b3IoKTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgLy8gZmFsbCB0aHJvdWdoXG4gICAgICAgIGNhc2UgQWN0aW9uLlNFTEVDVE9SX0FUVFI6XG4gICAgICAgICAgdG9rZW5pemVyLmNvbnN1bWUoKTtcbiAgICAgICAgICB0b2tlbiA9IHRva2VuaXplci50b2tlbigpO1xuICAgICAgICAgIGlmICh0b2tlbi50eXBlID09IENzc1Rva2VuaXplci5Ub2tlblR5cGUuSURFTlQpIHtcbiAgICAgICAgICAgIHRleHQgPSB0b2tlbi50ZXh0O1xuICAgICAgICAgICAgdG9rZW5pemVyLmNvbnN1bWUoKTtcbiAgICAgICAgICB9IGVsc2UgaWYgKHRva2VuLnR5cGUgPT0gQ3NzVG9rZW5pemVyLlRva2VuVHlwZS5TVEFSKSB7XG4gICAgICAgICAgICB0ZXh0ID0gbnVsbDtcbiAgICAgICAgICAgIHRva2VuaXplci5jb25zdW1lKCk7XG4gICAgICAgICAgfSBlbHNlIGlmICh0b2tlbi50eXBlID09IENzc1Rva2VuaXplci5Ub2tlblR5cGUuQkFSKSB7XG4gICAgICAgICAgICB0ZXh0ID0gXCJcIjtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgdGhpcy5hY3Rpb25zID0gYWN0aW9uc0Vycm9yU2VsZWN0b3I7XG4gICAgICAgICAgICBoYW5kbGVyLmVycm9yKFwiRV9DU1NfQVRUUlwiLCB0b2tlbik7XG4gICAgICAgICAgICB0b2tlbml6ZXIuY29uc3VtZSgpO1xuICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgICAgfVxuICAgICAgICAgIHRva2VuID0gdG9rZW5pemVyLnRva2VuKCk7XG4gICAgICAgICAgaWYgKHRva2VuLnR5cGUgPT0gQ3NzVG9rZW5pemVyLlRva2VuVHlwZS5CQVIpIHtcbiAgICAgICAgICAgIG5zID0gdGV4dCA/IHRoaXMubmFtZXNwYWNlUHJlZml4VG9VUklbdGV4dF0gOiB0ZXh0O1xuICAgICAgICAgICAgaWYgKG5zID09IG51bGwpIHtcbiAgICAgICAgICAgICAgdGhpcy5hY3Rpb25zID0gYWN0aW9uc0Vycm9yU2VsZWN0b3I7XG4gICAgICAgICAgICAgIGhhbmRsZXIuZXJyb3IoXCJFX0NTU19VTkRFQ0xBUkVEX1BSRUZJWFwiLCB0b2tlbik7XG4gICAgICAgICAgICAgIHRva2VuaXplci5jb25zdW1lKCk7XG4gICAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdG9rZW5pemVyLmNvbnN1bWUoKTtcbiAgICAgICAgICAgIHRva2VuID0gdG9rZW5pemVyLnRva2VuKCk7XG4gICAgICAgICAgICBpZiAodG9rZW4udHlwZSAhPSBDc3NUb2tlbml6ZXIuVG9rZW5UeXBlLklERU5UKSB7XG4gICAgICAgICAgICAgIHRoaXMuYWN0aW9ucyA9IGFjdGlvbnNFcnJvclNlbGVjdG9yO1xuICAgICAgICAgICAgICBoYW5kbGVyLmVycm9yKFwiRV9DU1NfQVRUUl9OQU1FX0VYUEVDVEVEXCIsIHRva2VuKTtcbiAgICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB0ZXh0ID0gdG9rZW4udGV4dDtcbiAgICAgICAgICAgIHRva2VuaXplci5jb25zdW1lKCk7XG4gICAgICAgICAgICB0b2tlbiA9IHRva2VuaXplci50b2tlbigpO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBucyA9IFwiXCI7XG4gICAgICAgICAgfVxuICAgICAgICAgIHN3aXRjaCAodG9rZW4udHlwZSkge1xuICAgICAgICAgICAgY2FzZSBDc3NUb2tlbml6ZXIuVG9rZW5UeXBlLkVROlxuICAgICAgICAgICAgY2FzZSBDc3NUb2tlbml6ZXIuVG9rZW5UeXBlLlRJTERFX0VROlxuICAgICAgICAgICAgY2FzZSBDc3NUb2tlbml6ZXIuVG9rZW5UeXBlLkJBUl9FUTpcbiAgICAgICAgICAgIGNhc2UgQ3NzVG9rZW5pemVyLlRva2VuVHlwZS5IQVRfRVE6XG4gICAgICAgICAgICBjYXNlIENzc1Rva2VuaXplci5Ub2tlblR5cGUuRE9MTEFSX0VROlxuICAgICAgICAgICAgY2FzZSBDc3NUb2tlbml6ZXIuVG9rZW5UeXBlLlNUQVJfRVE6XG4gICAgICAgICAgICBjYXNlIENzc1Rva2VuaXplci5Ub2tlblR5cGUuQ09MX0NPTDpcbiAgICAgICAgICAgICAgbnVtID0gdG9rZW4udHlwZTtcbiAgICAgICAgICAgICAgdG9rZW5pemVyLmNvbnN1bWUoKTtcbiAgICAgICAgICAgICAgdG9rZW4gPSB0b2tlbml6ZXIudG9rZW4oKTtcbiAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBjYXNlIENzc1Rva2VuaXplci5Ub2tlblR5cGUuQ19CUks6XG4gICAgICAgICAgICAgIGhhbmRsZXIuYXR0cmlidXRlU2VsZWN0b3IoXG4gICAgICAgICAgICAgICAgbnMgYXMgc3RyaW5nLFxuICAgICAgICAgICAgICAgIHRleHQgYXMgc3RyaW5nLFxuICAgICAgICAgICAgICAgIENzc1Rva2VuaXplci5Ub2tlblR5cGUuRU9GLFxuICAgICAgICAgICAgICAgIG51bGwsXG4gICAgICAgICAgICAgICk7XG4gICAgICAgICAgICAgIGlmIChwYXJzaW5nRnVuY3Rpb25QYXJhbSkge1xuICAgICAgICAgICAgICAgIHRoaXMuYWN0aW9ucyA9IGFjdGlvbnNTZWxlY3RvckluRnVuYztcbiAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICB0aGlzLmFjdGlvbnMgPSBhY3Rpb25zU2VsZWN0b3I7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgdG9rZW5pemVyLmNvbnN1bWUoKTtcbiAgICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgICB0aGlzLmFjdGlvbnMgPSBhY3Rpb25zRXJyb3JTZWxlY3RvcjtcbiAgICAgICAgICAgICAgaGFuZGxlci5lcnJvcihcIkVfQ1NTX0FUVFJfT1BfRVhQRUNURURcIiwgdG9rZW4pO1xuICAgICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgICB9XG4gICAgICAgICAgc3dpdGNoICh0b2tlbi50eXBlKSB7XG4gICAgICAgICAgICBjYXNlIENzc1Rva2VuaXplci5Ub2tlblR5cGUuSURFTlQ6XG4gICAgICAgICAgICBjYXNlIENzc1Rva2VuaXplci5Ub2tlblR5cGUuU1RSOlxuICAgICAgICAgICAgICBoYW5kbGVyLmF0dHJpYnV0ZVNlbGVjdG9yKFxuICAgICAgICAgICAgICAgIG5zIGFzIHN0cmluZyxcbiAgICAgICAgICAgICAgICB0ZXh0IGFzIHN0cmluZyxcbiAgICAgICAgICAgICAgICBudW0sXG4gICAgICAgICAgICAgICAgdG9rZW4udGV4dCxcbiAgICAgICAgICAgICAgKTtcbiAgICAgICAgICAgICAgdG9rZW5pemVyLmNvbnN1bWUoKTtcbiAgICAgICAgICAgICAgdG9rZW4gPSB0b2tlbml6ZXIudG9rZW4oKTtcbiAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgICB0aGlzLmFjdGlvbnMgPSBhY3Rpb25zRXJyb3JTZWxlY3RvcjtcbiAgICAgICAgICAgICAgaGFuZGxlci5lcnJvcihcIkVfQ1NTX0FUVFJfVkFMX0VYUEVDVEVEXCIsIHRva2VuKTtcbiAgICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgICAgfVxuICAgICAgICAgIGlmICh0b2tlbi50eXBlICE9IENzc1Rva2VuaXplci5Ub2tlblR5cGUuQ19CUkspIHtcbiAgICAgICAgICAgIHRoaXMuYWN0aW9ucyA9IGFjdGlvbnNFcnJvclNlbGVjdG9yO1xuICAgICAgICAgICAgaGFuZGxlci5lcnJvcihcIkVfQ1NTX0FUVFJcIiwgdG9rZW4pO1xuICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgICAgfVxuICAgICAgICAgIGlmIChwYXJzaW5nRnVuY3Rpb25QYXJhbSkge1xuICAgICAgICAgICAgdGhpcy5hY3Rpb25zID0gYWN0aW9uc1NlbGVjdG9ySW5GdW5jO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICB0aGlzLmFjdGlvbnMgPSBhY3Rpb25zU2VsZWN0b3I7XG4gICAgICAgICAgfVxuICAgICAgICAgIHRva2VuaXplci5jb25zdW1lKCk7XG4gICAgICAgICAgY29udGludWU7XG4gICAgICAgIGNhc2UgQWN0aW9uLlNFTEVDVE9SX0NISUxEOlxuICAgICAgICAgIGhhbmRsZXIuY2hpbGRTZWxlY3RvcigpO1xuICAgICAgICAgIHRoaXMuYWN0aW9ucyA9IGFjdGlvbnNTZWxlY3RvckNvbnQ7XG4gICAgICAgICAgdG9rZW5pemVyLmNvbnN1bWUoKTtcbiAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgY2FzZSBBY3Rpb24uU0VMRUNUT1JfU0lCTElORzpcbiAgICAgICAgICBoYW5kbGVyLmFkamFjZW50U2libGluZ1NlbGVjdG9yKCk7XG4gICAgICAgICAgdGhpcy5hY3Rpb25zID0gYWN0aW9uc1NlbGVjdG9yQ29udDtcbiAgICAgICAgICB0b2tlbml6ZXIuY29uc3VtZSgpO1xuICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICBjYXNlIEFjdGlvbi5TRUxFQ1RPUl9GT0xMT1dJTkdfU0lCTElORzpcbiAgICAgICAgICBoYW5kbGVyLmZvbGxvd2luZ1NpYmxpbmdTZWxlY3RvcigpO1xuICAgICAgICAgIHRoaXMuYWN0aW9ucyA9IGFjdGlvbnNTZWxlY3RvckNvbnQ7XG4gICAgICAgICAgdG9rZW5pemVyLmNvbnN1bWUoKTtcbiAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgY2FzZSBBY3Rpb24uU0VMRUNUT1JfQk9EWTpcbiAgICAgICAgICBpZiAodGhpcy5yZWdpb25SdWxlKSB7XG4gICAgICAgICAgICB0aGlzLnJ1bGVTdGFjay5wdXNoKFwiLWVwdWJ4LXJlZ2lvblwiKTtcbiAgICAgICAgICAgIHRoaXMucmVnaW9uUnVsZSA9IGZhbHNlO1xuICAgICAgICAgIH0gZWxzZSBpZiAodGhpcy5wYWdlUnVsZSkge1xuICAgICAgICAgICAgdGhpcy5ydWxlU3RhY2sucHVzaChcInBhZ2VcIik7XG4gICAgICAgICAgICB0aGlzLnBhZ2VSdWxlID0gZmFsc2U7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHRoaXMucnVsZVN0YWNrLnB1c2goXCJbc2VsZWN0b3JdXCIpO1xuICAgICAgICAgIH1cbiAgICAgICAgICBoYW5kbGVyLnN0YXJ0UnVsZUJvZHkoKTtcbiAgICAgICAgICB0aGlzLmFjdGlvbnMgPSBhY3Rpb25zQmFzZTtcbiAgICAgICAgICB0b2tlbml6ZXIuY29uc3VtZSgpO1xuICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICBjYXNlIEFjdGlvbi5TRUxFQ1RPUl9ORVhUOlxuICAgICAgICAgIGhhbmRsZXIubmV4dFNlbGVjdG9yKCk7XG4gICAgICAgICAgdGhpcy5hY3Rpb25zID0gYWN0aW9uc1NlbGVjdG9yU3RhcnQ7XG4gICAgICAgICAgdG9rZW5pemVyLmNvbnN1bWUoKTtcbiAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgY2FzZSBBY3Rpb24uVkFMX0lERU5UOlxuICAgICAgICAgIHZhbFN0YWNrLnB1c2goQ3NzLmdldE5hbWUodG9rZW4udGV4dCkpO1xuICAgICAgICAgIHRva2VuaXplci5jb25zdW1lKCk7XG4gICAgICAgICAgY29udGludWU7XG4gICAgICAgIGNhc2UgQWN0aW9uLlZBTF9IQVNIOlxuICAgICAgICAgIG51bSA9IHBhcnNlSW50KHRva2VuLnRleHQsIDE2KTtcbiAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgdmFsU3RhY2sucHVzaChjb2xvckZyb21IYXNoKHRva2VuLnRleHQpKTtcbiAgICAgICAgICB9IGNhdGNoIChlcnIpIHtcbiAgICAgICAgICAgIGhhbmRsZXIuZXJyb3IoXCJFX0NTU19DT0xPUlwiLCB0b2tlbik7XG4gICAgICAgICAgICB0aGlzLmFjdGlvbnMgPSBhY3Rpb25zRXJyb3I7XG4gICAgICAgICAgfVxuICAgICAgICAgIHRva2VuaXplci5jb25zdW1lKCk7XG4gICAgICAgICAgY29udGludWU7XG4gICAgICAgIGNhc2UgQWN0aW9uLlZBTF9OVU06XG4gICAgICAgICAgdmFsU3RhY2sucHVzaChuZXcgQ3NzLk51bSh0b2tlbi5udW0pKTtcbiAgICAgICAgICB0b2tlbml6ZXIuY29uc3VtZSgpO1xuICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICBjYXNlIEFjdGlvbi5WQUxfSU5UOlxuICAgICAgICAgIHZhbFN0YWNrLnB1c2gobmV3IENzcy5JbnQodG9rZW4ubnVtKSk7XG4gICAgICAgICAgdG9rZW5pemVyLmNvbnN1bWUoKTtcbiAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgY2FzZSBBY3Rpb24uVkFMX05VTUVSSUM6XG4gICAgICAgICAgaWYgKEV4cHJzLmlzVmlld3BvcnRSZWxhdGl2ZUxlbmd0aFVuaXQodG9rZW4udGV4dCkpIHtcbiAgICAgICAgICAgIC8vIFRyZWF0IG51bWVyaWMgdmFsdWUgd2l0aCB2aWV3cG9ydCB1bml0IGFzIG51bWVyaWMgaW4gZXhwci5cbiAgICAgICAgICAgIHZhbFN0YWNrLnB1c2goXG4gICAgICAgICAgICAgIG5ldyBDc3MuRXhwcihcbiAgICAgICAgICAgICAgICBuZXcgRXhwcnMuTnVtZXJpYyhoYW5kbGVyLmdldFNjb3BlKCksIHRva2VuLm51bSwgdG9rZW4udGV4dCksXG4gICAgICAgICAgICAgICksXG4gICAgICAgICAgICApO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICB2YWxTdGFjay5wdXNoKG5ldyBDc3MuTnVtZXJpYyh0b2tlbi5udW0sIHRva2VuLnRleHQpKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgdG9rZW5pemVyLmNvbnN1bWUoKTtcbiAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgY2FzZSBBY3Rpb24uVkFMX1NUUjpcbiAgICAgICAgICB2YWxTdGFjay5wdXNoKG5ldyBDc3MuU3RyKHRva2VuLnRleHQpKTtcbiAgICAgICAgICB0b2tlbml6ZXIuY29uc3VtZSgpO1xuICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICBjYXNlIEFjdGlvbi5WQUxfVVJMOlxuICAgICAgICAgIHZhbFN0YWNrLnB1c2gobmV3IENzcy5VUkwoQmFzZS5yZXNvbHZlVVJMKHRva2VuLnRleHQsIHRoaXMuYmFzZVVSTCkpKTtcbiAgICAgICAgICB0b2tlbml6ZXIuY29uc3VtZSgpO1xuICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICBjYXNlIEFjdGlvbi5WQUxfQ09NTUE6XG4gICAgICAgICAgdGhpcy52YWxTdGFja1JlZHVjZShcIixcIiwgdG9rZW4pO1xuICAgICAgICAgIHZhbFN0YWNrLnB1c2goXCIsXCIpO1xuICAgICAgICAgIHRva2VuaXplci5jb25zdW1lKCk7XG4gICAgICAgICAgY29udGludWU7XG4gICAgICAgIGNhc2UgQWN0aW9uLlZBTF9TTEFTSDpcbiAgICAgICAgICB2YWxTdGFjay5wdXNoKENzcy5zbGFzaCk7XG4gICAgICAgICAgdG9rZW5pemVyLmNvbnN1bWUoKTtcbiAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgY2FzZSBBY3Rpb24uVkFMX0ZVTkM6XG4gICAgICAgICAgdGV4dCA9IHRva2VuLnRleHQudG9Mb3dlckNhc2UoKTtcbiAgICAgICAgICBpZiAodGV4dCA9PSBcIi1lcHVieC1leHByXCIgfHwgdGV4dCA9PSBcImNhbGNcIiB8fCB0ZXh0ID09IFwiZW52XCIpIHtcbiAgICAgICAgICAgIC8vIHNwZWNpYWwgY2FzZVxuICAgICAgICAgICAgdGhpcy5hY3Rpb25zID0gYWN0aW9uc0V4cHJWYWw7XG4gICAgICAgICAgICB0aGlzLmV4cHJDb250ZXh0ID0gRXhwckNvbnRleHQuUFJPUDtcbiAgICAgICAgICAgIHZhbFN0YWNrLnB1c2goXCJ7XCIpO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICB2YWxTdGFjay5wdXNoKHRleHQpO1xuICAgICAgICAgICAgdmFsU3RhY2sucHVzaChcIihcIik7XG4gICAgICAgICAgfVxuICAgICAgICAgIHRva2VuaXplci5jb25zdW1lKCk7XG4gICAgICAgICAgY29udGludWU7XG4gICAgICAgIGNhc2UgQWN0aW9uLlZBTF9DX1BBUjpcbiAgICAgICAgICB0aGlzLnZhbFN0YWNrUmVkdWNlKFwiKVwiLCB0b2tlbik7XG4gICAgICAgICAgdG9rZW5pemVyLmNvbnN1bWUoKTtcbiAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgY2FzZSBBY3Rpb24uVkFMX0JBTkc6XG4gICAgICAgICAgdG9rZW5pemVyLmNvbnN1bWUoKTtcbiAgICAgICAgICB0b2tlbiA9IHRva2VuaXplci50b2tlbigpO1xuICAgICAgICAgIHRva2VuMSA9IHRva2VuaXplci5udGhUb2tlbigxKTtcbiAgICAgICAgICBpZiAoXG4gICAgICAgICAgICB0b2tlbi50eXBlID09IENzc1Rva2VuaXplci5Ub2tlblR5cGUuSURFTlQgJiZcbiAgICAgICAgICAgIHRva2VuLnRleHQudG9Mb3dlckNhc2UoKSA9PSBcImltcG9ydGFudFwiICYmXG4gICAgICAgICAgICAodG9rZW4xLnR5cGUgPT0gQ3NzVG9rZW5pemVyLlRva2VuVHlwZS5TRU1JQ09MIHx8XG4gICAgICAgICAgICAgIHRva2VuMS50eXBlID09IENzc1Rva2VuaXplci5Ub2tlblR5cGUuRU9GIHx8XG4gICAgICAgICAgICAgIHRva2VuMS50eXBlID09IENzc1Rva2VuaXplci5Ub2tlblR5cGUuQ19CUkMpXG4gICAgICAgICAgKSB7XG4gICAgICAgICAgICB0b2tlbml6ZXIuY29uc3VtZSgpO1xuICAgICAgICAgICAgdGhpcy5wcm9wSW1wb3J0YW50ID0gdHJ1ZTtcbiAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICAgIH1cbiAgICAgICAgICB0aGlzLmV4cHJFcnJvcihcIkVfQ1NTX1NZTlRBWFwiLCB0b2tlbik7XG4gICAgICAgICAgY29udGludWU7XG4gICAgICAgIGNhc2UgQWN0aW9uLlZBTF9QTFVTOlxuICAgICAgICAgIHRva2VuMSA9IHRva2VuaXplci5udGhUb2tlbigxKTtcbiAgICAgICAgICBzd2l0Y2ggKHRva2VuMS50eXBlKSB7XG4gICAgICAgICAgICBjYXNlIENzc1Rva2VuaXplci5Ub2tlblR5cGUuTlVNOlxuICAgICAgICAgICAgY2FzZSBDc3NUb2tlbml6ZXIuVG9rZW5UeXBlLk5VTUVSSUM6XG4gICAgICAgICAgICBjYXNlIENzc1Rva2VuaXplci5Ub2tlblR5cGUuSU5UOlxuICAgICAgICAgICAgICBpZiAoIXRva2VuMS5wcmVjZWRlZEJ5U3BhY2UpIHtcbiAgICAgICAgICAgICAgICAvLyBQbHVzIGJlZm9yZSBudW1iZXIsIGlnbm9yZVxuICAgICAgICAgICAgICAgIHRva2VuaXplci5jb25zdW1lKCk7XG4gICAgICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgICAgaWYgKHRoaXMuYWN0aW9ucyA9PT0gYWN0aW9uc1Byb3BWYWwgJiYgdG9rZW5pemVyLmhhc01hcmsoKSkge1xuICAgICAgICAgICAgdG9rZW5pemVyLnJlc2V0KCk7XG4gICAgICAgICAgICB0aGlzLmFjdGlvbnMgPSBhY3Rpb25zU2VsZWN0b3JTdGFydDtcbiAgICAgICAgICAgIGhhbmRsZXIuc3RhcnRTZWxlY3RvclJ1bGUoKTtcbiAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICB0aGlzLmV4cHJFcnJvcihcIkVfQ1NTX1VORVhQRUNURURfUExVU1wiLCB0b2tlbik7XG4gICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgICB9XG4gICAgICAgIGNhc2UgQWN0aW9uLlZBTF9FTkQ6XG4gICAgICAgICAgdG9rZW5pemVyLmNvbnN1bWUoKTtcblxuICAgICAgICAvLyBmYWxsIHRocm91Z2hcbiAgICAgICAgY2FzZSBBY3Rpb24uVkFMX0JSQzpcbiAgICAgICAgICB0b2tlbml6ZXIudW5tYXJrKCk7XG4gICAgICAgICAgdmFsID0gdGhpcy52YWxTdGFja1JlZHVjZShcIjtcIiwgdG9rZW4pO1xuICAgICAgICAgIGlmICh2YWwgJiYgdGhpcy5wcm9wTmFtZSkge1xuICAgICAgICAgICAgaGFuZGxlci5wcm9wZXJ0eSh0aGlzLnByb3BOYW1lIGFzIHN0cmluZywgdmFsLCB0aGlzLnByb3BJbXBvcnRhbnQpO1xuICAgICAgICAgIH1cbiAgICAgICAgICB0aGlzLmFjdGlvbnMgPSBwYXJzaW5nU3R5bGVBdHRyID8gYWN0aW9uc1N0eWxlQXR0cmlidXRlIDogYWN0aW9uc0Jhc2U7XG4gICAgICAgICAgY29udGludWU7XG4gICAgICAgIGNhc2UgQWN0aW9uLlZBTF9GSU5JU0g6XG4gICAgICAgICAgdG9rZW5pemVyLmNvbnN1bWUoKTtcbiAgICAgICAgICB0b2tlbml6ZXIudW5tYXJrKCk7XG4gICAgICAgICAgdmFsID0gdGhpcy52YWxTdGFja1JlZHVjZShcIjtcIiwgdG9rZW4pO1xuICAgICAgICAgIGlmIChwYXJzaW5nVmFsdWUpIHtcbiAgICAgICAgICAgIHRoaXMucmVzdWx0ID0gdmFsO1xuICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgICAgfVxuICAgICAgICAgIGlmICh0aGlzLnByb3BOYW1lICYmIHZhbCkge1xuICAgICAgICAgICAgaGFuZGxlci5wcm9wZXJ0eSh0aGlzLnByb3BOYW1lIGFzIHN0cmluZywgdmFsLCB0aGlzLnByb3BJbXBvcnRhbnQpO1xuICAgICAgICAgIH1cbiAgICAgICAgICBpZiAocGFyc2luZ1N0eWxlQXR0cikge1xuICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgICAgfVxuICAgICAgICAgIHRoaXMuZXhwckVycm9yKFwiRV9DU1NfU1lOVEFYXCIsIHRva2VuKTtcbiAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgY2FzZSBBY3Rpb24uRVhQUl9JREVOVDpcbiAgICAgICAgICB0b2tlbjEgPSB0b2tlbml6ZXIubnRoVG9rZW4oMSk7XG4gICAgICAgICAgaWYgKHRva2VuMS50eXBlID09IENzc1Rva2VuaXplci5Ub2tlblR5cGUuQ0xBU1MpIHtcbiAgICAgICAgICAgIGlmIChcbiAgICAgICAgICAgICAgdG9rZW5pemVyLm50aFRva2VuKDIpLnR5cGUgPT0gQ3NzVG9rZW5pemVyLlRva2VuVHlwZS5PX1BBUiAmJlxuICAgICAgICAgICAgICAhdG9rZW5pemVyLm50aFRva2VuKDIpLnByZWNlZGVkQnlTcGFjZVxuICAgICAgICAgICAgKSB7XG4gICAgICAgICAgICAgIHZhbFN0YWNrLnB1c2godG9rZW4udGV4dCwgdG9rZW4xLnRleHQsIFwiKFwiKTtcbiAgICAgICAgICAgICAgdG9rZW5pemVyLmNvbnN1bWUoKTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgIHZhbFN0YWNrLnB1c2goXG4gICAgICAgICAgICAgICAgbmV3IEV4cHJzLk5hbWVkKFxuICAgICAgICAgICAgICAgICAgaGFuZGxlci5nZXRTY29wZSgpLFxuICAgICAgICAgICAgICAgICAgRXhwcnMubWFrZVF1YWxpZmllZE5hbWUodG9rZW4udGV4dCwgdG9rZW4xLnRleHQpLFxuICAgICAgICAgICAgICAgICksXG4gICAgICAgICAgICAgICk7XG4gICAgICAgICAgICAgIHRoaXMuYWN0aW9ucyA9IGFjdGlvbnNFeHByT3A7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB0b2tlbml6ZXIuY29uc3VtZSgpO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBpZiAoXG4gICAgICAgICAgICAgIHRoaXMuZXhwckNvbnRleHQgPT0gRXhwckNvbnRleHQuTUVESUEgfHxcbiAgICAgICAgICAgICAgdGhpcy5leHByQ29udGV4dCA9PSBFeHByQ29udGV4dC5JTVBPUlRcbiAgICAgICAgICAgICkge1xuICAgICAgICAgICAgICBpZiAodG9rZW4udGV4dC50b0xvd2VyQ2FzZSgpID09IFwibm90XCIpIHtcbiAgICAgICAgICAgICAgICB0b2tlbml6ZXIuY29uc3VtZSgpO1xuICAgICAgICAgICAgICAgIHZhbFN0YWNrLnB1c2goXG4gICAgICAgICAgICAgICAgICBuZXcgRXhwcnMuTWVkaWFOYW1lKGhhbmRsZXIuZ2V0U2NvcGUoKSwgdHJ1ZSwgdG9rZW4xLnRleHQpLFxuICAgICAgICAgICAgICAgICk7XG4gICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgaWYgKHRva2VuLnRleHQudG9Mb3dlckNhc2UoKSA9PSBcIm9ubHlcIikge1xuICAgICAgICAgICAgICAgICAgdG9rZW5pemVyLmNvbnN1bWUoKTtcbiAgICAgICAgICAgICAgICAgIHRva2VuID0gdG9rZW4xO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB2YWxTdGFjay5wdXNoKFxuICAgICAgICAgICAgICAgICAgbmV3IEV4cHJzLk1lZGlhTmFtZShoYW5kbGVyLmdldFNjb3BlKCksIGZhbHNlLCB0b2tlbi50ZXh0KSxcbiAgICAgICAgICAgICAgICApO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICB2YWxTdGFjay5wdXNoKG5ldyBFeHBycy5OYW1lZChoYW5kbGVyLmdldFNjb3BlKCksIHRva2VuLnRleHQpKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHRoaXMuYWN0aW9ucyA9IGFjdGlvbnNFeHByT3A7XG4gICAgICAgICAgfVxuICAgICAgICAgIHRva2VuaXplci5jb25zdW1lKCk7XG4gICAgICAgICAgY29udGludWU7XG4gICAgICAgIGNhc2UgQWN0aW9uLkVYUFJfRlVOQzpcbiAgICAgICAgICB2YWxTdGFjay5wdXNoKG51bGwsIHRva2VuLnRleHQsIFwiKFwiKTtcbiAgICAgICAgICB0b2tlbml6ZXIuY29uc3VtZSgpO1xuICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICBjYXNlIEFjdGlvbi5FWFBSX05VTTpcbiAgICAgICAgICB2YWxTdGFjay5wdXNoKG5ldyBFeHBycy5Db25zdChoYW5kbGVyLmdldFNjb3BlKCksIHRva2VuLm51bSkpO1xuICAgICAgICAgIHRva2VuaXplci5jb25zdW1lKCk7XG4gICAgICAgICAgdGhpcy5hY3Rpb25zID0gYWN0aW9uc0V4cHJPcDtcbiAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgY2FzZSBBY3Rpb24uRVhQUl9OVU1FUklDOlxuICAgICAgICAgIHRleHQgPSB0b2tlbi50ZXh0O1xuICAgICAgICAgIGlmICh0ZXh0ID09IFwiJVwiKSB7XG4gICAgICAgICAgICBpZiAodGhpcy5wcm9wTmFtZSAmJiB0aGlzLnByb3BOYW1lLm1hdGNoKC9oZWlnaHR8Xih0b3B8Ym90dG9tKSQvKSkge1xuICAgICAgICAgICAgICB0ZXh0ID0gXCJ2aFwiO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgdGV4dCA9IFwidndcIjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgICAgdmFsU3RhY2sucHVzaChuZXcgRXhwcnMuTnVtZXJpYyhoYW5kbGVyLmdldFNjb3BlKCksIHRva2VuLm51bSwgdGV4dCkpO1xuICAgICAgICAgIHRva2VuaXplci5jb25zdW1lKCk7XG4gICAgICAgICAgdGhpcy5hY3Rpb25zID0gYWN0aW9uc0V4cHJPcDtcbiAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgY2FzZSBBY3Rpb24uRVhQUl9TVFI6XG4gICAgICAgICAgdmFsU3RhY2sucHVzaChuZXcgRXhwcnMuQ29uc3QoaGFuZGxlci5nZXRTY29wZSgpLCB0b2tlbi50ZXh0KSk7XG4gICAgICAgICAgdG9rZW5pemVyLmNvbnN1bWUoKTtcbiAgICAgICAgICB0aGlzLmFjdGlvbnMgPSBhY3Rpb25zRXhwck9wO1xuICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICBjYXNlIEFjdGlvbi5FWFBSX1BBUkFNOlxuICAgICAgICAgIHRva2VuaXplci5jb25zdW1lKCk7XG4gICAgICAgICAgdG9rZW4gPSB0b2tlbml6ZXIudG9rZW4oKTtcbiAgICAgICAgICBpZiAoXG4gICAgICAgICAgICB0b2tlbi50eXBlICE9IENzc1Rva2VuaXplci5Ub2tlblR5cGUuSU5UIHx8XG4gICAgICAgICAgICB0b2tlbi5wcmVjZWRlZEJ5U3BhY2VcbiAgICAgICAgICApIHtcbiAgICAgICAgICAgIHRoaXMuZXhwckVycm9yKFwiRV9DU1NfU1lOVEFYXCIsIHRva2VuKTtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgdmFsU3RhY2sucHVzaChuZXcgRXhwcnMuUGFyYW0oaGFuZGxlci5nZXRTY29wZSgpLCB0b2tlbi5udW0pKTtcbiAgICAgICAgICAgIHRva2VuaXplci5jb25zdW1lKCk7XG4gICAgICAgICAgICB0aGlzLmFjdGlvbnMgPSBhY3Rpb25zRXhwck9wO1xuICAgICAgICAgIH1cbiAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgY2FzZSBBY3Rpb24uRVhQUl9QUkVGSVg6XG4gICAgICAgICAgdmFsU3RhY2sucHVzaCgtdG9rZW4udHlwZSk7XG4gICAgICAgICAgdG9rZW5pemVyLmNvbnN1bWUoKTtcbiAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgY2FzZSBBY3Rpb24uRVhQUl9JTkZJWDpcbiAgICAgICAgICB0aGlzLmFjdGlvbnMgPSBhY3Rpb25zRXhwclZhbDtcbiAgICAgICAgICB0aGlzLmV4cHJTdGFja1JlZHVjZSh0b2tlbi50eXBlLCB0b2tlbik7XG4gICAgICAgICAgdmFsU3RhY2sucHVzaCh0b2tlbi50eXBlKTtcbiAgICAgICAgICB0b2tlbml6ZXIuY29uc3VtZSgpO1xuICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICBjYXNlIEFjdGlvbi5FWFBSX0lORklYX05BTUU6XG4gICAgICAgICAgaWYgKHRva2VuLnRleHQudG9Mb3dlckNhc2UoKSA9PSBcImFuZFwiKSB7XG4gICAgICAgICAgICB0aGlzLmFjdGlvbnMgPSBhY3Rpb25zRXhwclZhbDtcbiAgICAgICAgICAgIHRoaXMuZXhwclN0YWNrUmVkdWNlKE9QX01FRElBX0FORCwgdG9rZW4pO1xuICAgICAgICAgICAgdmFsU3RhY2sucHVzaChPUF9NRURJQV9BTkQpO1xuICAgICAgICAgICAgdG9rZW5pemVyLmNvbnN1bWUoKTtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgdGhpcy5leHByRXJyb3IoXCJFX0NTU19TWU5UQVhcIiwgdG9rZW4pO1xuICAgICAgICAgIH1cbiAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgY2FzZSBBY3Rpb24uRVhQUl9DX1BBUjpcbiAgICAgICAgICBpZiAodGhpcy5leHByU3RhY2tSZWR1Y2UodG9rZW4udHlwZSwgdG9rZW4pKSB7XG4gICAgICAgICAgICBpZiAodGhpcy5wcm9wTmFtZSkge1xuICAgICAgICAgICAgICB0aGlzLmFjdGlvbnMgPSBhY3Rpb25zUHJvcFZhbDtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgIHRoaXMuZXhwckVycm9yKFwiRV9DU1NfVU5CQUxBTkNFRF9QQVJcIiwgdG9rZW4pO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgICB0b2tlbml6ZXIuY29uc3VtZSgpO1xuICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICBjYXNlIEFjdGlvbi5FWFBSX09fQlJDOlxuICAgICAgICAgIGlmICh0aGlzLmV4cHJTdGFja1JlZHVjZShDc3NUb2tlbml6ZXIuVG9rZW5UeXBlLkNfUEFSLCB0b2tlbikpIHtcbiAgICAgICAgICAgIGlmICh0aGlzLnByb3BOYW1lIHx8IHRoaXMuZXhwckNvbnRleHQgPT0gRXhwckNvbnRleHQuSU1QT1JUKSB7XG4gICAgICAgICAgICAgIHRoaXMuZXhwckVycm9yKFwiRV9DU1NfVU5FWFBFQ1RFRF9CUkNcIiwgdG9rZW4pO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgaWYgKHRoaXMuZXhwckNvbnRleHQgPT0gRXhwckNvbnRleHQuV0hFTikge1xuICAgICAgICAgICAgICAgIGhhbmRsZXIuc3RhcnRXaGVuUnVsZSh2YWxTdGFjay5wb3AoKSBhcyBDc3MuRXhwcik7XG4gICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgaGFuZGxlci5zdGFydE1lZGlhUnVsZSh2YWxTdGFjay5wb3AoKSBhcyBDc3MuRXhwcik7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgdGhpcy5ydWxlU3RhY2sucHVzaChcIm1lZGlhXCIpO1xuICAgICAgICAgICAgICBoYW5kbGVyLnN0YXJ0UnVsZUJvZHkoKTtcbiAgICAgICAgICAgICAgdGhpcy5hY3Rpb25zID0gYWN0aW9uc0Jhc2U7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICAgIHRva2VuaXplci5jb25zdW1lKCk7XG4gICAgICAgICAgY29udGludWU7XG4gICAgICAgIGNhc2UgQWN0aW9uLkVYUFJfU0VNSUNPTDpcbiAgICAgICAgICBpZiAodGhpcy5leHByU3RhY2tSZWR1Y2UoQ3NzVG9rZW5pemVyLlRva2VuVHlwZS5DX1BBUiwgdG9rZW4pKSB7XG4gICAgICAgICAgICBpZiAodGhpcy5wcm9wTmFtZSB8fCB0aGlzLmV4cHJDb250ZXh0ICE9IEV4cHJDb250ZXh0LklNUE9SVCkge1xuICAgICAgICAgICAgICB0aGlzLmV4cHJFcnJvcihcIkVfQ1NTX1VORVhQRUNURURfU0VNSUNPTFwiLCB0b2tlbik7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICB0aGlzLmltcG9ydENvbmRpdGlvbiA9IHZhbFN0YWNrLnBvcCgpIGFzIENzcy5FeHByO1xuICAgICAgICAgICAgICB0aGlzLmltcG9ydFJlYWR5ID0gdHJ1ZTtcbiAgICAgICAgICAgICAgdGhpcy5hY3Rpb25zID0gYWN0aW9uc0Jhc2U7XG4gICAgICAgICAgICAgIHRva2VuaXplci5jb25zdW1lKCk7XG4gICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgICAgdG9rZW5pemVyLmNvbnN1bWUoKTtcbiAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgY2FzZSBBY3Rpb24uRVhQUl9PX1BBUjpcbiAgICAgICAgICB2YWxTdGFjay5wdXNoKHRva2VuLnR5cGUpO1xuICAgICAgICAgIHRva2VuaXplci5jb25zdW1lKCk7XG4gICAgICAgICAgY29udGludWU7XG4gICAgICAgIGNhc2UgQWN0aW9uLlJVTEVfRU5EOlxuICAgICAgICAgIHRoaXMuYWN0aW9ucyA9IGFjdGlvbnNCYXNlO1xuICAgICAgICAgIHRva2VuaXplci5jb25zdW1lKCk7XG4gICAgICAgICAgaGFuZGxlci5lbmRSdWxlKCk7XG4gICAgICAgICAgaWYgKHRoaXMucnVsZVN0YWNrLmxlbmd0aCkge1xuICAgICAgICAgICAgdGhpcy5ydWxlU3RhY2sucG9wKCk7XG4gICAgICAgICAgfVxuICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICBjYXNlIEFjdGlvbi5BVDpcbiAgICAgICAgICB0ZXh0ID0gdG9rZW4udGV4dC50b0xvd2VyQ2FzZSgpO1xuICAgICAgICAgIHN3aXRjaCAodGV4dCkge1xuICAgICAgICAgICAgY2FzZSBcImltcG9ydFwiOlxuICAgICAgICAgICAgICB0b2tlbml6ZXIuY29uc3VtZSgpO1xuICAgICAgICAgICAgICB0b2tlbiA9IHRva2VuaXplci50b2tlbigpO1xuICAgICAgICAgICAgICBpZiAoXG4gICAgICAgICAgICAgICAgdG9rZW4udHlwZSA9PSBDc3NUb2tlbml6ZXIuVG9rZW5UeXBlLlNUUiB8fFxuICAgICAgICAgICAgICAgIHRva2VuLnR5cGUgPT0gQ3NzVG9rZW5pemVyLlRva2VuVHlwZS5VUkxcbiAgICAgICAgICAgICAgKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5pbXBvcnRVUkwgPSB0b2tlbi50ZXh0O1xuICAgICAgICAgICAgICAgIHRva2VuaXplci5jb25zdW1lKCk7XG4gICAgICAgICAgICAgICAgdG9rZW4gPSB0b2tlbml6ZXIudG9rZW4oKTtcbiAgICAgICAgICAgICAgICBpZiAoXG4gICAgICAgICAgICAgICAgICB0b2tlbi50eXBlID09IENzc1Rva2VuaXplci5Ub2tlblR5cGUuU0VNSUNPTCB8fFxuICAgICAgICAgICAgICAgICAgdG9rZW4udHlwZSA9PSBDc3NUb2tlbml6ZXIuVG9rZW5UeXBlLkVPRlxuICAgICAgICAgICAgICAgICkge1xuICAgICAgICAgICAgICAgICAgdGhpcy5pbXBvcnRSZWFkeSA9IHRydWU7XG4gICAgICAgICAgICAgICAgICB0b2tlbml6ZXIuY29uc3VtZSgpO1xuICAgICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICB0aGlzLnByb3BOYW1lID0gbnVsbDsgLy8gc2lnbmFscyBAIHJ1bGVcbiAgICAgICAgICAgICAgICAgIHRoaXMuZXhwckNvbnRleHQgPSBFeHByQ29udGV4dC5JTVBPUlQ7XG4gICAgICAgICAgICAgICAgICB0aGlzLmFjdGlvbnMgPSBhY3Rpb25zRXhwclZhbDtcbiAgICAgICAgICAgICAgICAgIHZhbFN0YWNrLnB1c2goXCJ7XCIpO1xuICAgICAgICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIGhhbmRsZXIuZXJyb3IoXCJFX0NTU19JTVBPUlRfU1lOVEFYXCIsIHRva2VuKTtcbiAgICAgICAgICAgICAgdGhpcy5hY3Rpb25zID0gYWN0aW9uc0Vycm9yO1xuICAgICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgICAgIGNhc2UgXCJuYW1lc3BhY2VcIjpcbiAgICAgICAgICAgICAgdG9rZW5pemVyLmNvbnN1bWUoKTtcbiAgICAgICAgICAgICAgdG9rZW4gPSB0b2tlbml6ZXIudG9rZW4oKTtcbiAgICAgICAgICAgICAgc3dpdGNoICh0b2tlbi50eXBlKSB7XG4gICAgICAgICAgICAgICAgY2FzZSBDc3NUb2tlbml6ZXIuVG9rZW5UeXBlLklERU5UOlxuICAgICAgICAgICAgICAgICAgdGV4dCA9IHRva2VuLnRleHQ7IC8vIFByZWZpeFxuICAgICAgICAgICAgICAgICAgdG9rZW5pemVyLmNvbnN1bWUoKTtcbiAgICAgICAgICAgICAgICAgIHRva2VuID0gdG9rZW5pemVyLnRva2VuKCk7XG4gICAgICAgICAgICAgICAgICBpZiAoXG4gICAgICAgICAgICAgICAgICAgICh0b2tlbi50eXBlID09IENzc1Rva2VuaXplci5Ub2tlblR5cGUuU1RSIHx8XG4gICAgICAgICAgICAgICAgICAgICAgdG9rZW4udHlwZSA9PSBDc3NUb2tlbml6ZXIuVG9rZW5UeXBlLlVSTCkgJiZcbiAgICAgICAgICAgICAgICAgICAgdG9rZW5pemVyLm50aFRva2VuKDEpLnR5cGUgPT0gQ3NzVG9rZW5pemVyLlRva2VuVHlwZS5TRU1JQ09MXG4gICAgICAgICAgICAgICAgICApIHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5uYW1lc3BhY2VQcmVmaXhUb1VSSVt0ZXh0XSA9IHRva2VuLnRleHQ7XG4gICAgICAgICAgICAgICAgICAgIHRva2VuaXplci5jb25zdW1lKCk7XG4gICAgICAgICAgICAgICAgICAgIHRva2VuaXplci5jb25zdW1lKCk7XG4gICAgICAgICAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgY2FzZSBDc3NUb2tlbml6ZXIuVG9rZW5UeXBlLlNUUjpcbiAgICAgICAgICAgICAgICBjYXNlIENzc1Rva2VuaXplci5Ub2tlblR5cGUuVVJMOlxuICAgICAgICAgICAgICAgICAgaWYgKFxuICAgICAgICAgICAgICAgICAgICB0b2tlbml6ZXIubnRoVG9rZW4oMSkudHlwZSA9PSBDc3NUb2tlbml6ZXIuVG9rZW5UeXBlLlNFTUlDT0xcbiAgICAgICAgICAgICAgICAgICkge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLmRlZmF1bHROYW1lc3BhY2VVUkkgPSB0b2tlbi50ZXh0O1xuICAgICAgICAgICAgICAgICAgICB0b2tlbml6ZXIuY29uc3VtZSgpO1xuICAgICAgICAgICAgICAgICAgICB0b2tlbml6ZXIuY29uc3VtZSgpO1xuICAgICAgICAgICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIGhhbmRsZXIuZXJyb3IoXCJFX0NTU19OQU1FU1BBQ0VfU1lOVEFYXCIsIHRva2VuKTtcbiAgICAgICAgICAgICAgdGhpcy5hY3Rpb25zID0gYWN0aW9uc0Vycm9yO1xuICAgICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgICAgIGNhc2UgXCJjaGFyc2V0XCI6XG4gICAgICAgICAgICAgIC8vIFVzZWxlc3MgaW4gRVBVQiAob25seSBVVEYtOCBvciBVVEYtMTYgaXMgYWxsb3dlZCBhbnl3YXkgYW5kXG4gICAgICAgICAgICAgIC8vIHdlIGFyZSBhdCB0aGUgbWVyY3kgb2YgdGhlIGJyb3dzZXIgY2hhcnNldCBoYW5kbGluZyBhbnl3YXkpLlxuICAgICAgICAgICAgICB0b2tlbml6ZXIuY29uc3VtZSgpO1xuICAgICAgICAgICAgICB0b2tlbiA9IHRva2VuaXplci50b2tlbigpO1xuICAgICAgICAgICAgICBpZiAoXG4gICAgICAgICAgICAgICAgdG9rZW4udHlwZSA9PSBDc3NUb2tlbml6ZXIuVG9rZW5UeXBlLlNUUiAmJlxuICAgICAgICAgICAgICAgIHRva2VuaXplci5udGhUb2tlbigxKS50eXBlID09IENzc1Rva2VuaXplci5Ub2tlblR5cGUuU0VNSUNPTFxuICAgICAgICAgICAgICApIHtcbiAgICAgICAgICAgICAgICB0ZXh0ID0gdG9rZW4udGV4dC50b0xvd2VyQ2FzZSgpO1xuICAgICAgICAgICAgICAgIGlmICh0ZXh0ICE9IFwidXRmLThcIiAmJiB0ZXh0ICE9IFwidXRmLTE2XCIpIHtcbiAgICAgICAgICAgICAgICAgIGhhbmRsZXIuZXJyb3IoYEVfQ1NTX1VORVhQRUNURURfQ0hBUlNFVCAke3RleHR9YCwgdG9rZW4pO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB0b2tlbml6ZXIuY29uc3VtZSgpO1xuICAgICAgICAgICAgICAgIHRva2VuaXplci5jb25zdW1lKCk7XG4gICAgICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgaGFuZGxlci5lcnJvcihcIkVfQ1NTX0NIQVJTRVRfU1lOVEFYXCIsIHRva2VuKTtcbiAgICAgICAgICAgICAgdGhpcy5hY3Rpb25zID0gYWN0aW9uc0Vycm9yO1xuICAgICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgICAgIGNhc2UgXCJmb250LWZhY2VcIjpcbiAgICAgICAgICAgIGNhc2UgXCItZXB1YngtcGFnZS10ZW1wbGF0ZVwiOlxuICAgICAgICAgICAgY2FzZSBcIi1lcHVieC1kZWZpbmVcIjpcbiAgICAgICAgICAgIGNhc2UgXCItZXB1Yngtdmlld3BvcnRcIjpcbiAgICAgICAgICAgICAgaWYgKHRva2VuaXplci5udGhUb2tlbigxKS50eXBlID09IENzc1Rva2VuaXplci5Ub2tlblR5cGUuT19CUkMpIHtcbiAgICAgICAgICAgICAgICB0b2tlbml6ZXIuY29uc3VtZSgpO1xuICAgICAgICAgICAgICAgIHRva2VuaXplci5jb25zdW1lKCk7XG4gICAgICAgICAgICAgICAgc3dpdGNoICh0ZXh0KSB7XG4gICAgICAgICAgICAgICAgICBjYXNlIFwiZm9udC1mYWNlXCI6XG4gICAgICAgICAgICAgICAgICAgIGhhbmRsZXIuc3RhcnRGb250RmFjZVJ1bGUoKTtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgICBjYXNlIFwiLWVwdWJ4LXBhZ2UtdGVtcGxhdGVcIjpcbiAgICAgICAgICAgICAgICAgICAgaGFuZGxlci5zdGFydFBhZ2VUZW1wbGF0ZVJ1bGUoKTtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgICBjYXNlIFwiLWVwdWJ4LWRlZmluZVwiOlxuICAgICAgICAgICAgICAgICAgICBoYW5kbGVyLnN0YXJ0RGVmaW5lUnVsZSgpO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICAgIGNhc2UgXCItZXB1Yngtdmlld3BvcnRcIjpcbiAgICAgICAgICAgICAgICAgICAgaGFuZGxlci5zdGFydFZpZXdwb3J0UnVsZSgpO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgdGhpcy5ydWxlU3RhY2sucHVzaCh0ZXh0KTtcbiAgICAgICAgICAgICAgICBoYW5kbGVyLnN0YXJ0UnVsZUJvZHkoKTtcbiAgICAgICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGNhc2UgXCItYWRhcHQtZm9vdG5vdGUtYXJlYVwiOlxuICAgICAgICAgICAgICB0b2tlbml6ZXIuY29uc3VtZSgpO1xuICAgICAgICAgICAgICB0b2tlbiA9IHRva2VuaXplci50b2tlbigpO1xuICAgICAgICAgICAgICBzd2l0Y2ggKHRva2VuLnR5cGUpIHtcbiAgICAgICAgICAgICAgICBjYXNlIENzc1Rva2VuaXplci5Ub2tlblR5cGUuT19CUkM6XG4gICAgICAgICAgICAgICAgICB0b2tlbml6ZXIuY29uc3VtZSgpO1xuICAgICAgICAgICAgICAgICAgaGFuZGxlci5zdGFydEZvb3Rub3RlUnVsZShudWxsKTtcbiAgICAgICAgICAgICAgICAgIHRoaXMucnVsZVN0YWNrLnB1c2godGV4dCk7XG4gICAgICAgICAgICAgICAgICBoYW5kbGVyLnN0YXJ0UnVsZUJvZHkoKTtcbiAgICAgICAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICAgICAgICAgIGNhc2UgQ3NzVG9rZW5pemVyLlRva2VuVHlwZS5DT0xfQ09MOlxuICAgICAgICAgICAgICAgICAgdG9rZW5pemVyLmNvbnN1bWUoKTtcbiAgICAgICAgICAgICAgICAgIHRva2VuID0gdG9rZW5pemVyLnRva2VuKCk7XG4gICAgICAgICAgICAgICAgICBpZiAoXG4gICAgICAgICAgICAgICAgICAgIHRva2VuLnR5cGUgPT0gQ3NzVG9rZW5pemVyLlRva2VuVHlwZS5JREVOVCAmJlxuICAgICAgICAgICAgICAgICAgICB0b2tlbml6ZXIubnRoVG9rZW4oMSkudHlwZSA9PSBDc3NUb2tlbml6ZXIuVG9rZW5UeXBlLk9fQlJDXG4gICAgICAgICAgICAgICAgICApIHtcbiAgICAgICAgICAgICAgICAgICAgdGV4dCA9IHRva2VuLnRleHQ7XG4gICAgICAgICAgICAgICAgICAgIHRva2VuaXplci5jb25zdW1lKCk7XG4gICAgICAgICAgICAgICAgICAgIHRva2VuaXplci5jb25zdW1lKCk7XG4gICAgICAgICAgICAgICAgICAgIGhhbmRsZXIuc3RhcnRGb290bm90ZVJ1bGUodGV4dCk7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMucnVsZVN0YWNrLnB1c2goXCItYWRhcHQtZm9vdG5vdGUtYXJlYVwiKTtcbiAgICAgICAgICAgICAgICAgICAgaGFuZGxlci5zdGFydFJ1bGVCb2R5KCk7XG4gICAgICAgICAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBjYXNlIFwiLWVwdWJ4LXJlZ2lvblwiOlxuICAgICAgICAgICAgICB0b2tlbml6ZXIuY29uc3VtZSgpO1xuICAgICAgICAgICAgICBoYW5kbGVyLnN0YXJ0UmVnaW9uUnVsZSgpO1xuICAgICAgICAgICAgICB0aGlzLnJlZ2lvblJ1bGUgPSB0cnVlO1xuICAgICAgICAgICAgICB0aGlzLmFjdGlvbnMgPSBhY3Rpb25zU2VsZWN0b3JTdGFydDtcbiAgICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgICAgICBjYXNlIFwicGFnZVwiOlxuICAgICAgICAgICAgICB0b2tlbml6ZXIuY29uc3VtZSgpO1xuICAgICAgICAgICAgICBoYW5kbGVyLnN0YXJ0UGFnZVJ1bGUoKTtcbiAgICAgICAgICAgICAgdGhpcy5wYWdlUnVsZSA9IHRydWU7XG4gICAgICAgICAgICAgIHRoaXMuYWN0aW9ucyA9IGFjdGlvbnNTZWxlY3RvckNvbnQ7XG4gICAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICAgICAgY2FzZSBcInRvcC1sZWZ0LWNvcm5lclwiOlxuICAgICAgICAgICAgY2FzZSBcInRvcC1sZWZ0XCI6XG4gICAgICAgICAgICBjYXNlIFwidG9wLWNlbnRlclwiOlxuICAgICAgICAgICAgY2FzZSBcInRvcC1yaWdodFwiOlxuICAgICAgICAgICAgY2FzZSBcInRvcC1yaWdodC1jb3JuZXJcIjpcbiAgICAgICAgICAgIGNhc2UgXCJyaWdodC10b3BcIjpcbiAgICAgICAgICAgIGNhc2UgXCJyaWdodC1taWRkbGVcIjpcbiAgICAgICAgICAgIGNhc2UgXCJyaWdodC1ib3R0b21cIjpcbiAgICAgICAgICAgIGNhc2UgXCJib3R0b20tcmlnaHQtY29ybmVyXCI6XG4gICAgICAgICAgICBjYXNlIFwiYm90dG9tLXJpZ2h0XCI6XG4gICAgICAgICAgICBjYXNlIFwiYm90dG9tLWNlbnRlclwiOlxuICAgICAgICAgICAgY2FzZSBcImJvdHRvbS1sZWZ0XCI6XG4gICAgICAgICAgICBjYXNlIFwiYm90dG9tLWxlZnQtY29ybmVyXCI6XG4gICAgICAgICAgICBjYXNlIFwibGVmdC1ib3R0b21cIjpcbiAgICAgICAgICAgIGNhc2UgXCJsZWZ0LW1pZGRsZVwiOlxuICAgICAgICAgICAgY2FzZSBcImxlZnQtdG9wXCI6XG4gICAgICAgICAgICAgIHRva2VuaXplci5jb25zdW1lKCk7XG4gICAgICAgICAgICAgIHRva2VuID0gdG9rZW5pemVyLnRva2VuKCk7XG4gICAgICAgICAgICAgIGlmICh0b2tlbi50eXBlID09IENzc1Rva2VuaXplci5Ub2tlblR5cGUuT19CUkMpIHtcbiAgICAgICAgICAgICAgICB0b2tlbml6ZXIuY29uc3VtZSgpO1xuICAgICAgICAgICAgICAgIGhhbmRsZXIuc3RhcnRQYWdlTWFyZ2luQm94UnVsZSh0ZXh0KTtcbiAgICAgICAgICAgICAgICB0aGlzLnJ1bGVTdGFjay5wdXNoKHRleHQpO1xuICAgICAgICAgICAgICAgIGhhbmRsZXIuc3RhcnRSdWxlQm9keSgpO1xuICAgICAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgY2FzZSBcIi1lcHVieC13aGVuXCI6XG4gICAgICAgICAgICAgIHRva2VuaXplci5jb25zdW1lKCk7XG4gICAgICAgICAgICAgIHRoaXMucHJvcE5hbWUgPSBudWxsOyAvLyBzaWduYWxzIEAgcnVsZVxuICAgICAgICAgICAgICB0aGlzLmV4cHJDb250ZXh0ID0gRXhwckNvbnRleHQuV0hFTjtcbiAgICAgICAgICAgICAgdGhpcy5hY3Rpb25zID0gYWN0aW9uc0V4cHJWYWw7XG4gICAgICAgICAgICAgIHZhbFN0YWNrLnB1c2goXCJ7XCIpO1xuICAgICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgICAgIGNhc2UgXCJtZWRpYVwiOlxuICAgICAgICAgICAgICB0b2tlbml6ZXIuY29uc3VtZSgpO1xuICAgICAgICAgICAgICB0aGlzLnByb3BOYW1lID0gbnVsbDsgLy8gc2lnbmFscyBAIHJ1bGVcbiAgICAgICAgICAgICAgdGhpcy5leHByQ29udGV4dCA9IEV4cHJDb250ZXh0Lk1FRElBO1xuICAgICAgICAgICAgICB0aGlzLmFjdGlvbnMgPSBhY3Rpb25zRXhwclZhbDtcbiAgICAgICAgICAgICAgdmFsU3RhY2sucHVzaChcIntcIik7XG4gICAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICAgICAgY2FzZSBcIi1lcHVieC1mbG93XCI6XG4gICAgICAgICAgICAgIGlmIChcbiAgICAgICAgICAgICAgICB0b2tlbml6ZXIubnRoVG9rZW4oMSkudHlwZSA9PSBDc3NUb2tlbml6ZXIuVG9rZW5UeXBlLklERU5UICYmXG4gICAgICAgICAgICAgICAgdG9rZW5pemVyLm50aFRva2VuKDIpLnR5cGUgPT0gQ3NzVG9rZW5pemVyLlRva2VuVHlwZS5PX0JSQ1xuICAgICAgICAgICAgICApIHtcbiAgICAgICAgICAgICAgICBoYW5kbGVyLnN0YXJ0Rmxvd1J1bGUodG9rZW5pemVyLm50aFRva2VuKDEpLnRleHQpO1xuICAgICAgICAgICAgICAgIHRva2VuaXplci5jb25zdW1lKCk7XG4gICAgICAgICAgICAgICAgdG9rZW5pemVyLmNvbnN1bWUoKTtcbiAgICAgICAgICAgICAgICB0b2tlbml6ZXIuY29uc3VtZSgpO1xuICAgICAgICAgICAgICAgIHRoaXMucnVsZVN0YWNrLnB1c2godGV4dCk7XG4gICAgICAgICAgICAgICAgaGFuZGxlci5zdGFydFJ1bGVCb2R5KCk7XG4gICAgICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBjYXNlIFwiLWVwdWJ4LXBhZ2UtbWFzdGVyXCI6XG4gICAgICAgICAgICBjYXNlIFwiLWVwdWJ4LXBhcnRpdGlvblwiOlxuICAgICAgICAgICAgY2FzZSBcIi1lcHVieC1wYXJ0aXRpb24tZ3JvdXBcIjoge1xuICAgICAgICAgICAgICB0b2tlbml6ZXIuY29uc3VtZSgpO1xuICAgICAgICAgICAgICB0b2tlbiA9IHRva2VuaXplci50b2tlbigpO1xuICAgICAgICAgICAgICBsZXQgcnVsZU5hbWU6IHN0cmluZyB8IG51bGwgPSBudWxsO1xuICAgICAgICAgICAgICBsZXQgcnVsZVBzZXVkb05hbWU6IHN0cmluZyB8IG51bGwgPSBudWxsO1xuICAgICAgICAgICAgICBjb25zdCBjbGFzc2VzOiBzdHJpbmdbXSA9IFtdO1xuICAgICAgICAgICAgICBpZiAodG9rZW4udHlwZSA9PSBDc3NUb2tlbml6ZXIuVG9rZW5UeXBlLklERU5UKSB7XG4gICAgICAgICAgICAgICAgcnVsZU5hbWUgPSB0b2tlbi50ZXh0O1xuICAgICAgICAgICAgICAgIHRva2VuaXplci5jb25zdW1lKCk7XG4gICAgICAgICAgICAgICAgdG9rZW4gPSB0b2tlbml6ZXIudG9rZW4oKTtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICBpZiAoXG4gICAgICAgICAgICAgICAgdG9rZW4udHlwZSA9PSBDc3NUb2tlbml6ZXIuVG9rZW5UeXBlLkNPTE9OICYmXG4gICAgICAgICAgICAgICAgdG9rZW5pemVyLm50aFRva2VuKDEpLnR5cGUgPT0gQ3NzVG9rZW5pemVyLlRva2VuVHlwZS5JREVOVFxuICAgICAgICAgICAgICApIHtcbiAgICAgICAgICAgICAgICBydWxlUHNldWRvTmFtZSA9IHRva2VuaXplci5udGhUb2tlbigxKS50ZXh0O1xuICAgICAgICAgICAgICAgIHRva2VuaXplci5jb25zdW1lKCk7XG4gICAgICAgICAgICAgICAgdG9rZW5pemVyLmNvbnN1bWUoKTtcbiAgICAgICAgICAgICAgICB0b2tlbiA9IHRva2VuaXplci50b2tlbigpO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIHdoaWxlIChcbiAgICAgICAgICAgICAgICB0b2tlbi50eXBlID09IENzc1Rva2VuaXplci5Ub2tlblR5cGUuRlVOQyAmJlxuICAgICAgICAgICAgICAgIHRva2VuLnRleHQudG9Mb3dlckNhc2UoKSA9PSBcImNsYXNzXCIgJiZcbiAgICAgICAgICAgICAgICB0b2tlbml6ZXIubnRoVG9rZW4oMSkudHlwZSA9PSBDc3NUb2tlbml6ZXIuVG9rZW5UeXBlLklERU5UICYmXG4gICAgICAgICAgICAgICAgdG9rZW5pemVyLm50aFRva2VuKDIpLnR5cGUgPT0gQ3NzVG9rZW5pemVyLlRva2VuVHlwZS5DX1BBUlxuICAgICAgICAgICAgICApIHtcbiAgICAgICAgICAgICAgICBjbGFzc2VzLnB1c2godG9rZW5pemVyLm50aFRva2VuKDEpLnRleHQpO1xuICAgICAgICAgICAgICAgIHRva2VuaXplci5jb25zdW1lKCk7XG4gICAgICAgICAgICAgICAgdG9rZW5pemVyLmNvbnN1bWUoKTtcbiAgICAgICAgICAgICAgICB0b2tlbml6ZXIuY29uc3VtZSgpO1xuICAgICAgICAgICAgICAgIHRva2VuID0gdG9rZW5pemVyLnRva2VuKCk7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgaWYgKHRva2VuLnR5cGUgPT0gQ3NzVG9rZW5pemVyLlRva2VuVHlwZS5PX0JSQykge1xuICAgICAgICAgICAgICAgIHRva2VuaXplci5jb25zdW1lKCk7XG4gICAgICAgICAgICAgICAgc3dpdGNoICh0ZXh0KSB7XG4gICAgICAgICAgICAgICAgICBjYXNlIFwiLWVwdWJ4LXBhZ2UtbWFzdGVyXCI6XG4gICAgICAgICAgICAgICAgICAgIGhhbmRsZXIuc3RhcnRQYWdlTWFzdGVyUnVsZShcbiAgICAgICAgICAgICAgICAgICAgICBydWxlTmFtZSxcbiAgICAgICAgICAgICAgICAgICAgICBydWxlUHNldWRvTmFtZSxcbiAgICAgICAgICAgICAgICAgICAgICBjbGFzc2VzLFxuICAgICAgICAgICAgICAgICAgICApO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICAgIGNhc2UgXCItZXB1YngtcGFydGl0aW9uXCI6XG4gICAgICAgICAgICAgICAgICAgIGhhbmRsZXIuc3RhcnRQYXJ0aXRpb25SdWxlKFxuICAgICAgICAgICAgICAgICAgICAgIHJ1bGVOYW1lLFxuICAgICAgICAgICAgICAgICAgICAgIHJ1bGVQc2V1ZG9OYW1lLFxuICAgICAgICAgICAgICAgICAgICAgIGNsYXNzZXMsXG4gICAgICAgICAgICAgICAgICAgICk7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgICAgY2FzZSBcIi1lcHVieC1wYXJ0aXRpb24tZ3JvdXBcIjpcbiAgICAgICAgICAgICAgICAgICAgaGFuZGxlci5zdGFydFBhcnRpdGlvbkdyb3VwUnVsZShcbiAgICAgICAgICAgICAgICAgICAgICBydWxlTmFtZSxcbiAgICAgICAgICAgICAgICAgICAgICBydWxlUHNldWRvTmFtZSxcbiAgICAgICAgICAgICAgICAgICAgICBjbGFzc2VzLFxuICAgICAgICAgICAgICAgICAgICApO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgdGhpcy5ydWxlU3RhY2sucHVzaCh0ZXh0KTtcbiAgICAgICAgICAgICAgICBoYW5kbGVyLnN0YXJ0UnVsZUJvZHkoKTtcbiAgICAgICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGNhc2UgXCJcIjpcbiAgICAgICAgICAgICAgLy8gTm8gdGV4dCBhZnRlciBAXG4gICAgICAgICAgICAgIGhhbmRsZXIuZXJyb3IoYEVfQ1NTX1VORVhQRUNURURfQVQke3RleHR9YCwgdG9rZW4pO1xuXG4gICAgICAgICAgICAgIC8vIEVycm9yIHJlY292ZXJ5IHVzaW5nIHNlbGVjdG9yIHJ1bGVzLlxuICAgICAgICAgICAgICB0aGlzLmFjdGlvbnMgPSBhY3Rpb25zRXJyb3JTZWxlY3RvcjtcbiAgICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgICBoYW5kbGVyLmVycm9yKGBFX0NTU19BVF9VTktOT1dOICR7dGV4dH1gLCB0b2tlbik7XG4gICAgICAgICAgICAgIHRoaXMuYWN0aW9ucyA9IGFjdGlvbnNFcnJvcjtcbiAgICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgICAgfVxuICAgICAgICAgIGhhbmRsZXIuZXJyb3IoYEVfQ1NTX0FUX1NZTlRBWCAke3RleHR9YCwgdG9rZW4pO1xuICAgICAgICAgIHRoaXMuYWN0aW9ucyA9IGFjdGlvbnNFcnJvcjtcbiAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgY2FzZSBBY3Rpb24uRVJST1JfUFVTSDpcbiAgICAgICAgICAvLyBPcGVuIGJyYWNrZXQgd2hpbGUgc2tpcHBpbmcgZXJyb3Igc3ludGF4XG4gICAgICAgICAgaWYgKHBhcnNpbmdWYWx1ZSB8fCBwYXJzaW5nU3R5bGVBdHRyKSB7XG4gICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgICB9XG4gICAgICAgICAgdGhpcy5lcnJvckJyYWNrZXRzLnB1c2godG9rZW4udHlwZSArIDEpO1xuXG4gICAgICAgICAgLy8gRXhwZWN0ZWQgY2xvc2luZyBicmFja2V0XG4gICAgICAgICAgdG9rZW5pemVyLmNvbnN1bWUoKTtcbiAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgY2FzZSBBY3Rpb24uRVJST1JfUE9QX0RFQ0w6XG4gICAgICAgICAgLy8gQ2xvc2UgYnJhY2tldCB3aGlsZSBza2lwcGluZyBlcnJvciBzeW50YXggaW4gZGVjbGFyYXRpb25cbiAgICAgICAgICBpZiAocGFyc2luZ1ZhbHVlIHx8IHBhcnNpbmdTdHlsZUF0dHIpIHtcbiAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICAgIH1cbiAgICAgICAgICBpZiAodGhpcy5lcnJvckJyYWNrZXRzLmxlbmd0aCA9PSAwKSB7XG4gICAgICAgICAgICB0aGlzLmFjdGlvbnMgPSBhY3Rpb25zQmFzZTtcblxuICAgICAgICAgICAgLy8gRG9uJ3QgY29uc3VtZSBjbG9zaW5nIGJyYWNlXG4gICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgLy8gZmFsbCB0aHJvdWdoXG4gICAgICAgIGNhc2UgQWN0aW9uLkVSUk9SX1BPUDpcbiAgICAgICAgICAvLyBDbG9zZSBicmFja2V0IHdoaWxlIHNraXBwaW5nIGVycm9yIHN5bnRheFxuICAgICAgICAgIGlmIChcbiAgICAgICAgICAgIHRoaXMuZXJyb3JCcmFja2V0cy5sZW5ndGggPiAwICYmXG4gICAgICAgICAgICB0aGlzLmVycm9yQnJhY2tldHNbdGhpcy5lcnJvckJyYWNrZXRzLmxlbmd0aCAtIDFdID09IHRva2VuLnR5cGVcbiAgICAgICAgICApIHtcbiAgICAgICAgICAgIHRoaXMuZXJyb3JCcmFja2V0cy5wb3AoKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgaWYgKFxuICAgICAgICAgICAgdGhpcy5lcnJvckJyYWNrZXRzLmxlbmd0aCA9PSAwICYmXG4gICAgICAgICAgICB0b2tlbi50eXBlID09IENzc1Rva2VuaXplci5Ub2tlblR5cGUuQ19CUkNcbiAgICAgICAgICApIHtcbiAgICAgICAgICAgIHRoaXMuYWN0aW9ucyA9IGFjdGlvbnNCYXNlO1xuICAgICAgICAgIH1cbiAgICAgICAgICB0b2tlbml6ZXIuY29uc3VtZSgpO1xuICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICBjYXNlIEFjdGlvbi5FUlJPUl9TRU1JQ09MOlxuICAgICAgICAgIGlmIChwYXJzaW5nVmFsdWUgfHwgcGFyc2luZ1N0eWxlQXR0cikge1xuICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgICAgfVxuICAgICAgICAgIGlmICh0aGlzLmVycm9yQnJhY2tldHMubGVuZ3RoID09IDApIHtcbiAgICAgICAgICAgIHRoaXMuYWN0aW9ucyA9IGFjdGlvbnNCYXNlO1xuICAgICAgICAgIH1cbiAgICAgICAgICB0b2tlbml6ZXIuY29uc3VtZSgpO1xuICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICBjYXNlIEFjdGlvbi5ET05FOlxuICAgICAgICAgIGlmIChwYXJzaW5nRnVuY3Rpb25QYXJhbSkge1xuICAgICAgICAgICAgdG9rZW5pemVyLmNvbnN1bWUoKTtcbiAgICAgICAgICAgIGhhbmRsZXIuZW5kRnVuY1dpdGhTZWxlY3RvcigpO1xuICAgICAgICAgIH1cbiAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICBpZiAocGFyc2luZ1ZhbHVlIHx8IHBhcnNpbmdTdHlsZUF0dHIpIHtcbiAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICAgIH1cbiAgICAgICAgICBpZiAocGFyc2luZ01lZGlhUXVlcnkpIHtcbiAgICAgICAgICAgIGlmICh0aGlzLmV4cHJTdGFja1JlZHVjZShDc3NUb2tlbml6ZXIuVG9rZW5UeXBlLkNfUEFSLCB0b2tlbikpIHtcbiAgICAgICAgICAgICAgdGhpcy5yZXN1bHQgPSB2YWxTdGFjay5wb3AoKSBhcyBDc3MuVmFsO1xuICAgICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgICB9XG4gICAgICAgICAgaWYgKHBhcnNpbmdGdW5jdGlvblBhcmFtKSB7XG4gICAgICAgICAgICBpZiAodG9rZW4udHlwZSA9PSBDc3NUb2tlbml6ZXIuVG9rZW5UeXBlLklOVkFMSUQpIHtcbiAgICAgICAgICAgICAgaGFuZGxlci5lcnJvcih0b2tlbi50ZXh0LCB0b2tlbik7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICBoYW5kbGVyLmVycm9yKFwiRV9DU1NfU1lOVEFYXCIsIHRva2VuKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgICB9XG4gICAgICAgICAgaWYgKHRoaXMuYWN0aW9ucyA9PT0gYWN0aW9uc1Byb3BWYWwgJiYgdG9rZW5pemVyLmhhc01hcmsoKSkge1xuICAgICAgICAgICAgdG9rZW5pemVyLnJlc2V0KCk7XG4gICAgICAgICAgICB0aGlzLmFjdGlvbnMgPSBhY3Rpb25zU2VsZWN0b3JTdGFydDtcbiAgICAgICAgICAgIGhhbmRsZXIuc3RhcnRTZWxlY3RvclJ1bGUoKTtcbiAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICAgIH1cbiAgICAgICAgICBpZiAoXG4gICAgICAgICAgICB0aGlzLmFjdGlvbnMgIT09IGFjdGlvbnNFcnJvciAmJlxuICAgICAgICAgICAgdGhpcy5hY3Rpb25zICE9PSBhY3Rpb25zRXJyb3JTZWxlY3RvciAmJlxuICAgICAgICAgICAgdGhpcy5hY3Rpb25zICE9PSBhY3Rpb25zRXJyb3JEZWNsXG4gICAgICAgICAgKSB7XG4gICAgICAgICAgICBpZiAodG9rZW4udHlwZSA9PSBDc3NUb2tlbml6ZXIuVG9rZW5UeXBlLklOVkFMSUQpIHtcbiAgICAgICAgICAgICAgaGFuZGxlci5lcnJvcih0b2tlbi50ZXh0LCB0b2tlbik7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICBoYW5kbGVyLmVycm9yKFwiRV9DU1NfU1lOVEFYXCIsIHRva2VuKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmICh0aGlzLmlzSW5zaWRlUHJvcGVydHlPbmx5UnVsZSgpKSB7XG4gICAgICAgICAgICAgIHRoaXMuYWN0aW9ucyA9IGFjdGlvbnNFcnJvckRlY2w7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICB0aGlzLmFjdGlvbnMgPSBhY3Rpb25zRXJyb3JTZWxlY3RvcjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGNvbnRpbnVlOyAvLyBMZXQgZXJyb3ItcmVjb3ZlcnkgdG8gcmUtcHJvY2VzcyB0aGUgb2ZmZW5kaW5nIHRva2VuXG4gICAgICAgICAgfVxuICAgICAgICAgIHRva2VuaXplci5jb25zdW1lKCk7XG4gICAgICAgICAgY29udGludWU7XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiBmYWxzZTsgLy8gTm90IGRvbmUgeWV0LlxuICB9XG59XG5cbmV4cG9ydCBjbGFzcyBFcnJvckhhbmRsZXIgZXh0ZW5kcyBQYXJzZXJIYW5kbGVyIHtcbiAgY29uc3RydWN0b3IocHVibGljIHJlYWRvbmx5IHNjb3BlOiBFeHBycy5MZXhpY2FsU2NvcGUpIHtcbiAgICBzdXBlcihudWxsKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBAb3ZlcnJpZGVcbiAgICovXG4gIGVycm9yKG1uZW1vbmljczogc3RyaW5nLCB0b2tlbjogQ3NzVG9rZW5pemVyLlRva2VuKTogdm9pZCB7XG4gICAgdGhyb3cgbmV3IEVycm9yKG1uZW1vbmljcyk7XG4gIH1cblxuICAvKipcbiAgICogQG92ZXJyaWRlXG4gICAqL1xuICBnZXRTY29wZSgpOiBFeHBycy5MZXhpY2FsU2NvcGUge1xuICAgIHJldHVybiB0aGlzLnNjb3BlO1xuICB9XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBwYXJzZVN0eWxlc2hlZXQoXG4gIHRva2VuaXplcjogQ3NzVG9rZW5pemVyLlRva2VuaXplcixcbiAgaGFuZGxlcjogUGFyc2VySGFuZGxlcixcbiAgYmFzZVVSTDogc3RyaW5nLFxuICBjbGFzc2VzOiBzdHJpbmcgfCBudWxsLFxuICBtZWRpYTogc3RyaW5nIHwgbnVsbCxcbik6IFRhc2suUmVzdWx0PGJvb2xlYW4+IHtcbiAgY29uc3QgZnJhbWU6IFRhc2suRnJhbWU8Ym9vbGVhbj4gPSBUYXNrLm5ld0ZyYW1lKFwicGFyc2VTdHlsZXNoZWV0XCIpO1xuICBjb25zdCBwYXJzZXIgPSBuZXcgUGFyc2VyKGFjdGlvbnNCYXNlLCB0b2tlbml6ZXIsIGhhbmRsZXIsIGJhc2VVUkwpO1xuICBsZXQgY29uZGl0aW9uOiBDc3MuRXhwciA9IG51bGw7XG4gIGlmIChtZWRpYSkge1xuICAgIGNvbmRpdGlvbiA9IHBhcnNlTWVkaWFRdWVyeShcbiAgICAgIG5ldyBDc3NUb2tlbml6ZXIuVG9rZW5pemVyKG1lZGlhLCBoYW5kbGVyKSxcbiAgICAgIGhhbmRsZXIsXG4gICAgICBiYXNlVVJMLFxuICAgICk7XG4gIH1cbiAgY29uZGl0aW9uID0gcGFyc2VyLm1ha2VDb25kaXRpb24oY2xhc3NlcywgY29uZGl0aW9uICYmIGNvbmRpdGlvbi50b0V4cHIoKSk7XG4gIGlmIChjb25kaXRpb24pIHtcbiAgICBoYW5kbGVyLnN0YXJ0TWVkaWFSdWxlKGNvbmRpdGlvbik7XG4gICAgaGFuZGxlci5zdGFydFJ1bGVCb2R5KCk7XG4gIH1cbiAgZnJhbWVcbiAgICAubG9vcCgoKSA9PiB7XG4gICAgICB3aGlsZSAoIXBhcnNlci5ydW5QYXJzZXIoMTAwLCBmYWxzZSwgZmFsc2UsIGZhbHNlLCBmYWxzZSkpIHtcbiAgICAgICAgaWYgKHBhcnNlci5pbXBvcnRSZWFkeSkge1xuICAgICAgICAgIGNvbnN0IHJlc29sdmVkVVJMID0gQmFzZS5yZXNvbHZlVVJMKFxuICAgICAgICAgICAgcGFyc2VyLmltcG9ydFVSTCBhcyBzdHJpbmcsXG4gICAgICAgICAgICBiYXNlVVJMLFxuICAgICAgICAgICk7XG4gICAgICAgICAgaWYgKHBhcnNlci5pbXBvcnRDb25kaXRpb24pIHtcbiAgICAgICAgICAgIGhhbmRsZXIuc3RhcnRNZWRpYVJ1bGUocGFyc2VyLmltcG9ydENvbmRpdGlvbik7XG4gICAgICAgICAgICBoYW5kbGVyLnN0YXJ0UnVsZUJvZHkoKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgY29uc3QgaW5uZXJGcmFtZTogVGFzay5GcmFtZTxib29sZWFuPiA9IFRhc2submV3RnJhbWUoXG4gICAgICAgICAgICBcInBhcnNlU3R5bGVzaGVldC5pbXBvcnRcIixcbiAgICAgICAgICApO1xuICAgICAgICAgIHBhcnNlU3R5bGVzaGVldEZyb21VUkwocmVzb2x2ZWRVUkwsIGhhbmRsZXIsIG51bGwsIG51bGwpLnRoZW4oKCkgPT4ge1xuICAgICAgICAgICAgaWYgKHBhcnNlci5pbXBvcnRDb25kaXRpb24pIHtcbiAgICAgICAgICAgICAgaGFuZGxlci5lbmRSdWxlKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBwYXJzZXIuaW1wb3J0UmVhZHkgPSBmYWxzZTtcbiAgICAgICAgICAgIHBhcnNlci5pbXBvcnRVUkwgPSBudWxsO1xuICAgICAgICAgICAgcGFyc2VyLmltcG9ydENvbmRpdGlvbiA9IG51bGw7XG4gICAgICAgICAgICBpbm5lckZyYW1lLmZpbmlzaCh0cnVlKTtcbiAgICAgICAgICB9KTtcbiAgICAgICAgICByZXR1cm4gaW5uZXJGcmFtZS5yZXN1bHQoKTtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCByID0gZnJhbWUudGltZVNsaWNlKCk7XG4gICAgICAgIGlmIChyLmlzUGVuZGluZykge1xuICAgICAgICAgIHJldHVybiByO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICByZXR1cm4gVGFzay5uZXdSZXN1bHQoZmFsc2UpO1xuICAgIH0pXG4gICAgLnRoZW4oKCkgPT4ge1xuICAgICAgaWYgKGNvbmRpdGlvbikge1xuICAgICAgICBoYW5kbGVyLmVuZFJ1bGUoKTtcbiAgICAgIH1cbiAgICAgIGZyYW1lLmZpbmlzaCh0cnVlKTtcbiAgICB9KTtcbiAgcmV0dXJuIGZyYW1lLnJlc3VsdCgpO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gcGFyc2VTdHlsZXNoZWV0RnJvbVRleHQoXG4gIHRleHQ6IHN0cmluZyxcbiAgaGFuZGxlcjogUGFyc2VySGFuZGxlcixcbiAgYmFzZVVSTDogc3RyaW5nLFxuICBjbGFzc2VzOiBzdHJpbmcgfCBudWxsLFxuICBtZWRpYTogc3RyaW5nIHwgbnVsbCxcbik6IFRhc2suUmVzdWx0PGJvb2xlYW4+IHtcbiAgcmV0dXJuIFRhc2suaGFuZGxlKFxuICAgIFwicGFyc2VTdHlsZXNoZWV0RnJvbVRleHRcIixcbiAgICAoZnJhbWUpID0+IHtcbiAgICAgIGNvbnN0IHRvayA9IG5ldyBDc3NUb2tlbml6ZXIuVG9rZW5pemVyKHRleHQsIGhhbmRsZXIpO1xuICAgICAgcGFyc2VTdHlsZXNoZWV0KHRvaywgaGFuZGxlciwgYmFzZVVSTCwgY2xhc3NlcywgbWVkaWEpLnRoZW5GaW5pc2goZnJhbWUpO1xuICAgIH0sXG4gICAgKGZyYW1lLCBlcnIpID0+IHtcbiAgICAgIExvZ2dpbmcubG9nZ2VyLndhcm4oZXJyLCBgRmFpbGVkIHRvIHBhcnNlIHN0eWxlc2hlZXQgdGV4dDogJHt0ZXh0fWApO1xuICAgICAgZnJhbWUuZmluaXNoKGZhbHNlKTtcbiAgICB9LFxuICApO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gcGFyc2VTdHlsZXNoZWV0RnJvbVVSTChcbiAgdXJsOiBzdHJpbmcsXG4gIGhhbmRsZXI6IFBhcnNlckhhbmRsZXIsXG4gIGNsYXNzZXM6IHN0cmluZyB8IG51bGwsXG4gIG1lZGlhOiBzdHJpbmcgfCBudWxsLFxuKTogVGFzay5SZXN1bHQ8Ym9vbGVhbj4ge1xuICByZXR1cm4gVGFzay5oYW5kbGUoXG4gICAgXCJwYXJzZVN0eWxlc2hlZXRGcm9tVVJMXCIsXG4gICAgKGZyYW1lKSA9PiB7XG4gICAgICBOZXQuYWpheCh1cmwpLnRoZW4oKHhocikgPT4ge1xuICAgICAgICBpZiAoIXhoci5yZXNwb25zZVRleHQpIHtcbiAgICAgICAgICBmcmFtZS5maW5pc2godHJ1ZSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgcGFyc2VTdHlsZXNoZWV0RnJvbVRleHQoXG4gICAgICAgICAgICB4aHIucmVzcG9uc2VUZXh0LFxuICAgICAgICAgICAgaGFuZGxlcixcbiAgICAgICAgICAgIHVybCxcbiAgICAgICAgICAgIGNsYXNzZXMsXG4gICAgICAgICAgICBtZWRpYSxcbiAgICAgICAgICApLnRoZW4oKHJlc3VsdCkgPT4ge1xuICAgICAgICAgICAgaWYgKCFyZXN1bHQpIHtcbiAgICAgICAgICAgICAgTG9nZ2luZy5sb2dnZXIud2FybihgRmFpbGVkIHRvIHBhcnNlIHN0eWxlc2hlZXQgZnJvbSAke3VybH1gKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGZyYW1lLmZpbmlzaCh0cnVlKTtcbiAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgfSxcbiAgICAoZnJhbWUsIGVycikgPT4ge1xuICAgICAgTG9nZ2luZy5sb2dnZXIud2FybihlcnIsIFwiRXhjZXB0aW9uIHdoaWxlIGZldGNoaW5nIGFuZCBwYXJzaW5nOlwiLCB1cmwpO1xuICAgICAgZnJhbWUuZmluaXNoKHRydWUpO1xuICAgIH0sXG4gICk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBwYXJzZVZhbHVlKFxuICBzY29wZTogRXhwcnMuTGV4aWNhbFNjb3BlLFxuICB0b2tlbml6ZXI6IENzc1Rva2VuaXplci5Ub2tlbml6ZXIsXG4gIGJhc2VVUkw6IHN0cmluZyxcbik6IENzcy5WYWwge1xuICBjb25zdCBwYXJzZXIgPSBuZXcgUGFyc2VyKFxuICAgIGFjdGlvbnNQcm9wVmFsLFxuICAgIHRva2VuaXplcixcbiAgICBuZXcgRXJyb3JIYW5kbGVyKHNjb3BlKSxcbiAgICBiYXNlVVJMLFxuICApO1xuICBwYXJzZXIucnVuUGFyc2VyKE51bWJlci5QT1NJVElWRV9JTkZJTklUWSwgdHJ1ZSwgZmFsc2UsIGZhbHNlLCBmYWxzZSk7XG4gIHJldHVybiBwYXJzZXIucmVzdWx0O1xufVxuXG5leHBvcnQgZnVuY3Rpb24gcGFyc2VTdHlsZUF0dHJpYnV0ZShcbiAgdG9rZW5pemVyOiBDc3NUb2tlbml6ZXIuVG9rZW5pemVyLFxuICBoYW5kbGVyOiBQYXJzZXJIYW5kbGVyLFxuICBiYXNlVVJMOiBzdHJpbmcsXG4pOiB2b2lkIHtcbiAgY29uc3QgcGFyc2VyID0gbmV3IFBhcnNlcihhY3Rpb25zU3R5bGVBdHRyaWJ1dGUsIHRva2VuaXplciwgaGFuZGxlciwgYmFzZVVSTCk7XG4gIHBhcnNlci5ydW5QYXJzZXIoTnVtYmVyLlBPU0lUSVZFX0lORklOSVRZLCBmYWxzZSwgdHJ1ZSwgZmFsc2UsIGZhbHNlKTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHBhcnNlTWVkaWFRdWVyeShcbiAgdG9rZW5pemVyOiBDc3NUb2tlbml6ZXIuVG9rZW5pemVyLFxuICBoYW5kbGVyOiBQYXJzZXJIYW5kbGVyLFxuICBiYXNlVVJMOiBzdHJpbmcsXG4pOiBDc3MuRXhwciB7XG4gIGNvbnN0IHBhcnNlciA9IG5ldyBQYXJzZXIoYWN0aW9uc0V4cHJWYWwsIHRva2VuaXplciwgaGFuZGxlciwgYmFzZVVSTCk7XG4gIHBhcnNlci5ydW5QYXJzZXIoTnVtYmVyLlBPU0lUSVZFX0lORklOSVRZLCBmYWxzZSwgZmFsc2UsIHRydWUsIGZhbHNlKTtcbiAgcmV0dXJuIHBhcnNlci5yZXN1bHQgYXMgQ3NzLkV4cHI7XG59XG5cbmV4cG9ydCBjb25zdCBudW1Qcm9wOiB7IFtrZXk6IHN0cmluZ106IGJvb2xlYW4gfSA9IHtcbiAgXCJ6LWluZGV4XCI6IHRydWUsXG4gIFwiY29sdW1uLWNvdW50XCI6IHRydWUsXG4gIFwiZmxvdy1saW5nZXJcIjogdHJ1ZSxcbiAgb3BhY2l0eTogdHJ1ZSxcbiAgcGFnZTogdHJ1ZSxcbiAgXCJmbG93LXByaW9yaXR5XCI6IHRydWUsXG4gIHV0aWxpemF0aW9uOiB0cnVlLFxufTtcblxuZXhwb3J0IGZ1bmN0aW9uIHRha2VzT25seU51bShwcm9wTmFtZTogc3RyaW5nKTogYm9vbGVhbiB7XG4gIHJldHVybiAhIW51bVByb3BbcHJvcE5hbWVdO1xufVxuXG4vKipcbiAqIEByZXR1cm4gdmFsXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBldmFsdWF0ZUV4cHJUb0NTUyhcbiAgY29udGV4dDogRXhwcnMuQ29udGV4dCxcbiAgdmFsOiBFeHBycy5WYWwsXG4gIHByb3BOYW1lOiBzdHJpbmcsXG4pOiBDc3MuVmFsIHtcbiAgY29uc3QgcmVzdWx0ID0gdmFsLmV2YWx1YXRlKGNvbnRleHQpO1xuICBzd2l0Y2ggKHR5cGVvZiByZXN1bHQpIHtcbiAgICBjYXNlIFwibnVtYmVyXCI6XG4gICAgICBpZiAoIXRha2VzT25seU51bShwcm9wTmFtZSkpIHtcbiAgICAgICAgcmV0dXJuIG5ldyBDc3MuTnVtZXJpYyhyZXN1bHQgYXMgbnVtYmVyLCBcInB4XCIpO1xuICAgICAgfSBlbHNlIGlmIChyZXN1bHQgPT0gTWF0aC5yb3VuZChyZXN1bHQgYXMgbnVtYmVyKSkge1xuICAgICAgICByZXR1cm4gbmV3IENzcy5JbnQocmVzdWx0IGFzIG51bWJlcik7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICByZXR1cm4gbmV3IENzcy5OdW0ocmVzdWx0IGFzIG51bWJlcik7XG4gICAgICB9XG4gICAgY2FzZSBcInN0cmluZ1wiOlxuICAgICAgaWYgKCFyZXN1bHQpIHtcbiAgICAgICAgcmV0dXJuIENzcy5lbXB0eTtcbiAgICAgIH1cblxuICAgICAgLy8gVE9ETzogd2hlcmUgYmFzZVVSTCBzaG91bGQgY29tZSBmcm9tPz8/XG4gICAgICByZXR1cm4gcGFyc2VWYWx1ZShcbiAgICAgICAgdmFsLnNjb3BlLFxuICAgICAgICBuZXcgQ3NzVG9rZW5pemVyLlRva2VuaXplcihyZXN1bHQgYXMgc3RyaW5nLCBudWxsKSxcbiAgICAgICAgXCJcIixcbiAgICAgICk7XG4gICAgY2FzZSBcImJvb2xlYW5cIjpcbiAgICAgIHJldHVybiByZXN1bHQgPyBDc3MuaWRlbnQuX3RydWUgOiBDc3MuaWRlbnQuX2ZhbHNlO1xuICAgIGNhc2UgXCJ1bmRlZmluZWRcIjpcbiAgICAgIHJldHVybiBDc3MuZW1wdHk7XG4gIH1cbiAgdGhyb3cgbmV3IEVycm9yKFwiRV9VTkVYUEVDVEVEXCIpO1xufVxuXG4vKipcbiAqIEByZXR1cm4gdmFsXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBldmFsdWF0ZUNTU1RvQ1NTKFxuICBjb250ZXh0OiBFeHBycy5Db250ZXh0LFxuICB2YWw6IENzcy5WYWwsXG4gIHByb3BOYW1lOiBzdHJpbmcsXG4pOiBDc3MuVmFsIHtcbiAgaWYgKHZhbC5pc0V4cHIoKSkge1xuICAgIHJldHVybiBldmFsdWF0ZUV4cHJUb0NTUyhjb250ZXh0LCAodmFsIGFzIENzcy5FeHByKS5leHByLCBwcm9wTmFtZSk7XG4gIH1cbiAgcmV0dXJuIHZhbDtcbn1cbiIsIi8qKlxuICogQ29weXJpZ2h0IDIwMTkgVml2bGlvc3R5bGUgRm91bmRhdGlvblxuICpcbiAqIFZpdmxpb3N0eWxlLmpzIGlzIGZyZWUgc29mdHdhcmU6IHlvdSBjYW4gcmVkaXN0cmlidXRlIGl0IGFuZC9vciBtb2RpZnlcbiAqIGl0IHVuZGVyIHRoZSB0ZXJtcyBvZiB0aGUgR05VIEFmZmVybyBHZW5lcmFsIFB1YmxpYyBMaWNlbnNlIGFzIHB1Ymxpc2hlZCBieVxuICogdGhlIEZyZWUgU29mdHdhcmUgRm91bmRhdGlvbiwgZWl0aGVyIHZlcnNpb24gMyBvZiB0aGUgTGljZW5zZSwgb3JcbiAqIChhdCB5b3VyIG9wdGlvbikgYW55IGxhdGVyIHZlcnNpb24uXG4gKlxuICogVml2bGlvc3R5bGUuanMgaXMgZGlzdHJpYnV0ZWQgaW4gdGhlIGhvcGUgdGhhdCBpdCB3aWxsIGJlIHVzZWZ1bCxcbiAqIGJ1dCBXSVRIT1VUIEFOWSBXQVJSQU5UWTsgd2l0aG91dCBldmVuIHRoZSBpbXBsaWVkIHdhcnJhbnR5IG9mXG4gKiBNRVJDSEFOVEFCSUxJVFkgb3IgRklUTkVTUyBGT1IgQSBQQVJUSUNVTEFSIFBVUlBPU0UuICBTZWUgdGhlXG4gKiBHTlUgQWZmZXJvIEdlbmVyYWwgUHVibGljIExpY2Vuc2UgZm9yIG1vcmUgZGV0YWlscy5cbiAqXG4gKiBZb3Ugc2hvdWxkIGhhdmUgcmVjZWl2ZWQgYSBjb3B5IG9mIHRoZSBHTlUgQWZmZXJvIEdlbmVyYWwgUHVibGljIExpY2Vuc2VcbiAqIGFsb25nIHdpdGggVml2bGlvc3R5bGUuanMuICBJZiBub3QsIHNlZSA8aHR0cDovL3d3dy5nbnUub3JnL2xpY2Vuc2VzLz4uXG4gKlxuICogQGZpbGVvdmVydmlldyBNYXRjaGVycyAtIERlZmluaXRpb25zIG9mIE1hdGNoZXIuXG4gKi9cbmltcG9ydCAqIGFzIEFzc2VydHMgZnJvbSBcIi4vYXNzZXJ0c1wiO1xuXG4vKipcbiAqIENoZWNrZXMgd2hldGhlciBnaXZlbiBvcmRlciBjYW4gYmUgcmVwcmVzZW50ZWQgYXMgYW4rYiB3aXRoIGEgbm9uLW5lZ2F0aXZlXG4gKiBpbnRlcmdlciBuXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBtYXRjaEFOUGx1c0Iob3JkZXI6IG51bWJlciwgYTogbnVtYmVyLCBiOiBudW1iZXIpOiBib29sZWFuIHtcbiAgb3JkZXIgLT0gYjtcbiAgaWYgKGEgPT09IDApIHtcbiAgICByZXR1cm4gb3JkZXIgPT09IDA7XG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuIG9yZGVyICUgYSA9PT0gMCAmJiBvcmRlciAvIGEgPj0gMDtcbiAgfVxufVxuXG5leHBvcnQgaW50ZXJmYWNlIE1hdGNoZXIge1xuICBtYXRjaGVzKCk6IGJvb2xlYW47XG59XG5cbmV4cG9ydCBjbGFzcyBBbnlNYXRjaGVyIGltcGxlbWVudHMgTWF0Y2hlciB7XG4gIGNvbnN0cnVjdG9yKHB1YmxpYyByZWFkb25seSBtYXRjaGVyczogTWF0Y2hlcltdKSB7fVxuXG4gIC8qKiBAb3ZlcnJpZGUgKi9cbiAgbWF0Y2hlcygpOiBib29sZWFuIHtcbiAgICByZXR1cm4gdGhpcy5tYXRjaGVycy5zb21lKChtYXRjaGVyKSA9PiBtYXRjaGVyLm1hdGNoZXMoKSk7XG4gIH1cbn1cblxuZXhwb3J0IGNsYXNzIEFsbE1hdGNoZXIgaW1wbGVtZW50cyBNYXRjaGVyIHtcbiAgY29uc3RydWN0b3IocHVibGljIHJlYWRvbmx5IG1hdGNoZXJzOiBNYXRjaGVyW10pIHt9XG5cbiAgLyoqIEBvdmVycmlkZSAqL1xuICBtYXRjaGVzKCk6IGJvb2xlYW4ge1xuICAgIHJldHVybiB0aGlzLm1hdGNoZXJzLmV2ZXJ5KChtYXRjaGVyKSA9PiBtYXRjaGVyLm1hdGNoZXMoKSk7XG4gIH1cbn1cblxuZXhwb3J0IGNsYXNzIE50aEZyYWdtZW50TWF0Y2hlciBpbXBsZW1lbnRzIE1hdGNoZXIge1xuICBzdGF0aWMgZnJhZ21lbnRJbmRpY2VzID0ge307XG5cbiAgc3RhdGljIHJlZ2lzdGVyRnJhZ21lbnRJbmRleChcbiAgICBlbGVtZW50T2Zmc2V0OiBudW1iZXIsXG4gICAgZnJhZ21lbnRJbmRleDogbnVtYmVyLFxuICAgIHByaW9yaXR5OiBudW1iZXIsXG4gICkge1xuICAgIGNvbnN0IGluZGljZXMgPSBOdGhGcmFnbWVudE1hdGNoZXIuZnJhZ21lbnRJbmRpY2VzO1xuICAgIGlmIChcbiAgICAgICFpbmRpY2VzW2VsZW1lbnRPZmZzZXRdIHx8XG4gICAgICBpbmRpY2VzW2VsZW1lbnRPZmZzZXRdLnByaW9yaXR5IDw9IHByaW9yaXR5XG4gICAgKSB7XG4gICAgICBpbmRpY2VzW2VsZW1lbnRPZmZzZXRdID0geyBmcmFnbWVudEluZGV4LCBwcmlvcml0eSB9O1xuICAgIH1cbiAgfVxuXG4gIHN0YXRpYyBjbGVhckZyYWdtZW50SW5kaWNlcygpIHtcbiAgICBOdGhGcmFnbWVudE1hdGNoZXIuZnJhZ21lbnRJbmRpY2VzID0ge307XG4gIH1cblxuICBjb25zdHJ1Y3RvcihcbiAgICBwdWJsaWMgcmVhZG9ubHkgZWxlbWVudE9mZnNldDogbnVtYmVyLFxuICAgIHB1YmxpYyByZWFkb25seSBhOiBudW1iZXIsXG4gICAgcHVibGljIHJlYWRvbmx5IGI6IG51bWJlcixcbiAgKSB7fVxuXG4gIC8qKiBAb3ZlcnJpZGUgKi9cbiAgbWF0Y2hlcygpOiBib29sZWFuIHtcbiAgICBjb25zdCBlbnRyeSA9IE50aEZyYWdtZW50TWF0Y2hlci5mcmFnbWVudEluZGljZXNbdGhpcy5lbGVtZW50T2Zmc2V0XTtcbiAgICByZXR1cm4gKFxuICAgICAgZW50cnkgIT0gbnVsbCAmJlxuICAgICAgZW50cnkuZnJhZ21lbnRJbmRleCAhPSBudWxsICYmXG4gICAgICBtYXRjaEFOUGx1c0IoZW50cnkuZnJhZ21lbnRJbmRleCwgdGhpcy5hLCB0aGlzLmIpXG4gICAgKTtcbiAgfVxufVxuXG5leHBvcnQgY2xhc3MgTWF0Y2hlckJ1aWxkZXIge1xuICBzdGF0aWMgYnVpbGRWaWV3Q29uZGl0aW9uTWF0Y2hlcihcbiAgICBlbGVtZW50T2Zmc2V0OiBudW1iZXIsXG4gICAgdmlld0NvbmRpdGlvbjogc3RyaW5nLFxuICApOiBNYXRjaGVyIHtcbiAgICBjb25zdCBzdHJzID0gdmlld0NvbmRpdGlvbi5zcGxpdChcIl9cIik7XG4gICAgaWYgKHN0cnNbMF0gPT0gXCJORlNcIikge1xuICAgICAgcmV0dXJuIG5ldyBOdGhGcmFnbWVudE1hdGNoZXIoXG4gICAgICAgIGVsZW1lbnRPZmZzZXQsXG4gICAgICAgIHBhcnNlSW50KHN0cnNbMV0sIDEwKSxcbiAgICAgICAgcGFyc2VJbnQoc3Ryc1syXSwgMTApLFxuICAgICAgKTtcbiAgICB9IGVsc2Uge1xuICAgICAgQXNzZXJ0cy5mYWlsKGB1bmtub3duIHZpZXcgY29uZGl0aW9uLiBjb25kaXRpb249JHt2aWV3Q29uZGl0aW9ufWApO1xuICAgICAgcmV0dXJuIG51bGw7XG4gICAgfVxuICB9XG5cbiAgc3RhdGljIGJ1aWxkQWxsTWF0Y2hlcihtYXRjaGVyczogTWF0Y2hlcltdKTogTWF0Y2hlciB7XG4gICAgcmV0dXJuIG5ldyBBbGxNYXRjaGVyKG1hdGNoZXJzKTtcbiAgfVxuXG4gIHN0YXRpYyBidWlsZEFueU1hdGNoZXIobWF0Y2hlcnM6IE1hdGNoZXJbXSk6IE1hdGNoZXIge1xuICAgIHJldHVybiBuZXcgQW55TWF0Y2hlcihtYXRjaGVycyk7XG4gIH1cbn1cbiIsIi8qKlxuICogQ29weXJpZ2h0IDIwMTkgVml2bGlvc3R5bGUgRm91bmRhdGlvblxuICpcbiAqIFZpdmxpb3N0eWxlLmpzIGlzIGZyZWUgc29mdHdhcmU6IHlvdSBjYW4gcmVkaXN0cmlidXRlIGl0IGFuZC9vciBtb2RpZnlcbiAqIGl0IHVuZGVyIHRoZSB0ZXJtcyBvZiB0aGUgR05VIEFmZmVybyBHZW5lcmFsIFB1YmxpYyBMaWNlbnNlIGFzIHB1Ymxpc2hlZCBieVxuICogdGhlIEZyZWUgU29mdHdhcmUgRm91bmRhdGlvbiwgZWl0aGVyIHZlcnNpb24gMyBvZiB0aGUgTGljZW5zZSwgb3JcbiAqIChhdCB5b3VyIG9wdGlvbikgYW55IGxhdGVyIHZlcnNpb24uXG4gKlxuICogVml2bGlvc3R5bGUuanMgaXMgZGlzdHJpYnV0ZWQgaW4gdGhlIGhvcGUgdGhhdCBpdCB3aWxsIGJlIHVzZWZ1bCxcbiAqIGJ1dCBXSVRIT1VUIEFOWSBXQVJSQU5UWTsgd2l0aG91dCBldmVuIHRoZSBpbXBsaWVkIHdhcnJhbnR5IG9mXG4gKiBNRVJDSEFOVEFCSUxJVFkgb3IgRklUTkVTUyBGT1IgQSBQQVJUSUNVTEFSIFBVUlBPU0UuICBTZWUgdGhlXG4gKiBHTlUgQWZmZXJvIEdlbmVyYWwgUHVibGljIExpY2Vuc2UgZm9yIG1vcmUgZGV0YWlscy5cbiAqXG4gKiBZb3Ugc2hvdWxkIGhhdmUgcmVjZWl2ZWQgYSBjb3B5IG9mIHRoZSBHTlUgQWZmZXJvIEdlbmVyYWwgUHVibGljIExpY2Vuc2VcbiAqIGFsb25nIHdpdGggVml2bGlvc3R5bGUuanMuICBJZiBub3QsIHNlZSA8aHR0cDovL3d3dy5nbnUub3JnL2xpY2Vuc2VzLz4uXG4gKlxuICogQGZpbGVvdmVydmlldyBUeXBlcyAtIFR5cGUgZGVmaW5paW9ucy5cbiAqL1xuaW1wb3J0ICogYXMgQmFzZSBmcm9tIFwiLi9iYXNlXCI7XG5pbXBvcnQgKiBhcyBDc3MgZnJvbSBcIi4vY3NzXCI7XG5pbXBvcnQgKiBhcyBEaWZmIGZyb20gXCIuL2RpZmZcIjtcbmltcG9ydCAqIGFzIEV4cHJzIGZyb20gXCIuL2V4cHJzXCI7XG5pbXBvcnQgKiBhcyBHZW9tZXRyeVV0aWwgZnJvbSBcIi4vZ2VvbWV0cnktdXRpbFwiO1xuaW1wb3J0ICogYXMgVGFzayBmcm9tIFwiLi90YXNrXCI7XG5pbXBvcnQgKiBhcyBUYXNrVXRpbCBmcm9tIFwiLi90YXNrLXV0aWxcIjtcblxuZXhwb3J0IHR5cGUgRm9ybWF0dGluZ0NvbnRleHRUeXBlID1cbiAgfCBcIkJsb2NrXCJcbiAgfCBcIlJlcGV0aXRpdmVFbGVtZW50c093bmVyXCJcbiAgfCBcIlRhYmxlXCI7XG5cbmV4cG9ydCB0eXBlIEZyYWdtZW50TGF5b3V0Q29uc3RyYWludFR5cGUgPVxuICB8IFwiQWZ0ZXJJZkNvbnRpbnVlXCJcbiAgfCBcIkVudGlyZVRhYmxlXCJcbiAgfCBcIlJlcGV0aXRpdmVFbGVtZW50c093bmVyXCJcbiAgfCBcIlRhYmxlUm93XCI7XG5cbmV4cG9ydCBuYW1lc3BhY2UgQ3NzQ2FzY2FkZSB7XG4gIGV4cG9ydCBpbnRlcmZhY2UgRWxlbWVudFN0eWxlIHt9XG59XG5cbmV4cG9ydCBuYW1lc3BhY2UgQ3NzU3R5bGVyIHtcbiAgZXhwb3J0IGludGVyZmFjZSBBYnN0cmFjdFN0eWxlciB7XG4gICAgZ2V0U3R5bGUoZWxlbWVudDogRWxlbWVudCwgZGVlcDogYm9vbGVhbik6IENzc0Nhc2NhZGUuRWxlbWVudFN0eWxlO1xuICAgIHByb2Nlc3NDb250ZW50KGVsZW1lbnQ6IEVsZW1lbnQsIHN0eWxlczogeyBba2V5OiBzdHJpbmddOiBDc3MuVmFsIH0pO1xuICB9XG59XG5cbmV4cG9ydCBuYW1lc3BhY2UgTGF5b3V0IHtcbiAgLyoqXG4gICAqIFJlcHJlc2VudHMgYSBjb25zdHJhaW50IG9uIGxheW91dFxuICAgKi9cbiAgZXhwb3J0IGludGVyZmFjZSBMYXlvdXRDb25zdHJhaW50IHtcbiAgICAvKipcbiAgICAgKiBSZXR1cm5zIGlmIHRoaXMgY29uc3RyYWludCBhbGxvd3MgdGhlIG5vZGUgY29udGV4dCB0byBiZSBsYWlkIG91dCBhdCB0aGVcbiAgICAgKiBjdXJyZW50IHBvc2l0aW9uLlxuICAgICAqL1xuICAgIGFsbG93TGF5b3V0KG5vZGVDb250ZXh0OiBWdHJlZS5Ob2RlQ29udGV4dCk6IGJvb2xlYW47XG4gIH1cbiAgLyoqXG4gICAqIFJlcHJlc2VudHMgY29uc3RyYWludHMgb24gbGF5aW5nIG91dCBmcmFnbWVudHNcbiAgICovXG4gIGV4cG9ydCBpbnRlcmZhY2UgRnJhZ21lbnRMYXlvdXRDb25zdHJhaW50IHtcbiAgICBmbGFnbWVudExheW91dENvbnN0cmFpbnRUeXBlOiBGcmFnbWVudExheW91dENvbnN0cmFpbnRUeXBlO1xuICAgIGFsbG93TGF5b3V0KFxuICAgICAgbm9kZUNvbnRleHQ6IFZ0cmVlLk5vZGVDb250ZXh0LFxuICAgICAgb3ZlcmZsb3duTm9kZUNvbnRleHQ6IFZ0cmVlLk5vZGVDb250ZXh0LFxuICAgICAgY29sdW1uOiBDb2x1bW4sXG4gICAgKTogYm9vbGVhbjtcbiAgICBuZXh0Q2FuZGlkYXRlKG5vZGVDb250ZXh0OiBWdHJlZS5Ob2RlQ29udGV4dCk6IGJvb2xlYW47XG4gICAgcG9zdExheW91dChcbiAgICAgIGFsbG93ZWQ6IGJvb2xlYW4sXG4gICAgICBwb3NpdGlvbkFmdGVyOiBWdHJlZS5Ob2RlQ29udGV4dCxcbiAgICAgIGluaXRpYWxQb3NpdGlvbjogVnRyZWUuTm9kZUNvbnRleHQsXG4gICAgICBjb2x1bW46IENvbHVtbixcbiAgICApO1xuICAgIGZpbmlzaEJyZWFrKFxuICAgICAgbm9kZUNvbnRleHQ6IFZ0cmVlLk5vZGVDb250ZXh0LFxuICAgICAgY29sdW1uOiBDb2x1bW4sXG4gICAgKTogVGFzay5SZXN1bHQ8Ym9vbGVhbj47XG4gICAgZXF1YWxzVG8oY29uc3RyYWludDogRnJhZ21lbnRMYXlvdXRDb25zdHJhaW50KTogYm9vbGVhbjtcbiAgICBnZXRQcmlvcml0eU9mRmluaXNoQnJlYWsoKTogbnVtYmVyO1xuICB9XG5cbiAgLyoqXG4gICAqIFBvdGVudGlhbCBicmVha2luZyBwb3NpdGlvbi5cbiAgICovXG4gIGV4cG9ydCBpbnRlcmZhY2UgQnJlYWtQb3NpdGlvbiB7XG4gICAgLyoqXG4gICAgICogQHJldHVybiBicmVhayBwb3NpdGlvbiwgaWYgZm91bmRcbiAgICAgKi9cbiAgICBmaW5kQWNjZXB0YWJsZUJyZWFrKGNvbHVtbjogQ29sdW1uLCBwZW5hbHR5OiBudW1iZXIpOiBWdHJlZS5Ob2RlQ29udGV4dDtcbiAgICAvKipcbiAgICAgKiBAcmV0dXJuIHBlbmFsdHkgZm9yIHRoaXMgYnJlYWsgcG9zaXRpb25cbiAgICAgKi9cbiAgICBnZXRNaW5CcmVha1BlbmFsdHkoKTogbnVtYmVyO1xuICAgIGNhbGN1bGF0ZU9mZnNldChjb2x1bW46IENvbHVtbik6IHsgY3VycmVudDogbnVtYmVyOyBtaW5pbXVtOiBudW1iZXIgfTtcbiAgICBicmVha1Bvc2l0aW9uQ2hvc2VuKGNvbHVtbjogQ29sdW1uKTogdm9pZDtcbiAgfVxuXG4gIGV4cG9ydCBpbnRlcmZhY2UgQWJzdHJhY3RCcmVha1Bvc2l0aW9uIGV4dGVuZHMgQnJlYWtQb3NpdGlvbiB7XG4gICAgZ2V0Tm9kZUNvbnRleHQoKTogVnRyZWUuTm9kZUNvbnRleHQ7XG4gIH1cblxuICBleHBvcnQgdHlwZSBCcmVha1Bvc2l0aW9uQW5kTm9kZUNvbnRleHQgPSB7XG4gICAgYnJlYWtQb3NpdGlvbjogQnJlYWtQb3NpdGlvbjtcbiAgICBub2RlQ29udGV4dDogVnRyZWUuTm9kZUNvbnRleHQ7XG4gIH07XG5cbiAgLyoqXG4gICAqIFBvdGVudGlhbCBicmVha2luZyBwb3NpdGlvbiBpbnNpZGUgQ1NTIGJveCAoYmV0d2VlbiBsaW5lcykuXG4gICAqIEBwYXJhbSBjaGVja1BvaW50cyBhcnJheSBvZiBicmVha2luZyBwb2ludHMgZm9yXG4gICAqICAgIGJyZWFrYWJsZSBibG9ja1xuICAgKi9cbiAgZXhwb3J0IGludGVyZmFjZSBCb3hCcmVha1Bvc2l0aW9uIGV4dGVuZHMgQWJzdHJhY3RCcmVha1Bvc2l0aW9uIHtcbiAgICBicmVha05vZGVDb250ZXh0OiBWdHJlZS5Ob2RlQ29udGV4dDtcbiAgICByZWFkb25seSBjaGVja1BvaW50czogVnRyZWUuTm9kZUNvbnRleHRbXTtcbiAgICByZWFkb25seSBwZW5hbHR5OiBudW1iZXI7XG4gIH1cblxuICAvKipcbiAgICogUG90ZW50aWFsIGVkZ2UgYnJlYWtpbmcgcG9zaXRpb24uXG4gICAqL1xuICBleHBvcnQgaW50ZXJmYWNlIEVkZ2VCcmVha1Bvc2l0aW9uIGV4dGVuZHMgQWJzdHJhY3RCcmVha1Bvc2l0aW9uIHtcbiAgICBvdmVyZmxvd0lmUmVwZXRpdGl2ZUVsZW1lbnRzRHJvcHBlZDogYm9vbGVhbjtcbiAgICByZWFkb25seSBwb3NpdGlvbjogVnRyZWUuTm9kZUNvbnRleHQ7XG4gICAgcmVhZG9ubHkgYnJlYWtPbkVkZ2U6IHN0cmluZyB8IG51bGw7XG4gICAgb3ZlcmZsb3dzOiBib29sZWFuO1xuICAgIHJlYWRvbmx5IGNvbXB1dGVkQmxvY2tTaXplOiBudW1iZXI7XG4gIH1cblxuICBleHBvcnQgaW50ZXJmYWNlIENvbHVtbiBleHRlbmRzIFZ0cmVlLkNvbnRhaW5lciB7XG4gICAgbGFzdDogTm9kZTtcbiAgICB2aWV3RG9jdW1lbnQ6IERvY3VtZW50O1xuICAgIGZsb3dSb290Rm9ybWF0dGluZ0NvbnRleHQ6IFZ0cmVlLkZvcm1hdHRpbmdDb250ZXh0O1xuICAgIGlzRmxvYXQ6IGJvb2xlYW47XG4gICAgaXNGb290bm90ZTogYm9vbGVhbjtcbiAgICBzdGFydEVkZ2U6IG51bWJlcjtcbiAgICBlbmRFZGdlOiBudW1iZXI7XG4gICAgYmVmb3JlRWRnZTogbnVtYmVyO1xuICAgIGFmdGVyRWRnZTogbnVtYmVyO1xuICAgIGZvb3Rub3RlRWRnZTogbnVtYmVyO1xuICAgIGJveDogR2VvbWV0cnlVdGlsLlJlY3Q7XG4gICAgY2h1bmtQb3NpdGlvbnM6IFZ0cmVlLkNodW5rUG9zaXRpb25bXTtcbiAgICBiYW5kczogR2VvbWV0cnlVdGlsLkJhbmRbXTtcbiAgICBvdmVyZmxvd246IGJvb2xlYW47XG4gICAgYnJlYWtQb3NpdGlvbnM6IEJyZWFrUG9zaXRpb25bXTtcbiAgICBwYWdlQnJlYWtUeXBlOiBzdHJpbmcgfCBudWxsO1xuICAgIGZvcmNlTm9uZml0dGluZzogYm9vbGVhbjtcbiAgICBsZWZ0RmxvYXRFZGdlOiBudW1iZXI7XG4gICAgLyoqXG4gICAgICogYm90dG9tIG9mIHRoZSBib3R0b21tb3N0IGxlZnQgZmxvYXRcbiAgICAgKi9cbiAgICByaWdodEZsb2F0RWRnZTogbnVtYmVyO1xuICAgIC8qKlxuICAgICAqIGJvdHRvbSBvZiB0aGUgYm90dG9tbW9zdCByaWdodCBmbG9hdFxuICAgICAqL1xuICAgIGJvdHRvbW1vc3RGbG9hdFRvcDogbnVtYmVyO1xuICAgIC8qKlxuICAgICAqIFRvcCBvZiB0aGUgYm90dG9tbW9zdCBmbG9hdFxuICAgICAqL1xuICAgIHN0b3BBdE92ZXJmbG93OiBib29sZWFuO1xuICAgIGxhc3RBZnRlclBvc2l0aW9uOiBWdHJlZS5Ob2RlUG9zaXRpb24gfCBudWxsO1xuICAgIGZyYWdtZW50TGF5b3V0Q29uc3RyYWludHM6IEZyYWdtZW50TGF5b3V0Q29uc3RyYWludFtdO1xuICAgIHBzZXVkb1BhcmVudDogQ29sdW1uO1xuICAgIG5vZGVDb250ZXh0T3ZlcmZsb3dpbmdEdWVUb1JlcGV0aXRpdmVFbGVtZW50czogVnRyZWUuTm9kZUNvbnRleHQgfCBudWxsO1xuICAgIGJsb2NrRGlzdGFuY2VUb0Jsb2NrRW5kRmxvYXRzOiBudW1iZXI7XG4gICAgY29tcHV0ZWRCbG9ja1NpemU6IG51bWJlcjtcblxuICAgIGxheW91dENvbnRleHQ6IFZ0cmVlLkxheW91dENvbnRleHQ7XG4gICAgY2xpZW50TGF5b3V0OiBWdHJlZS5DbGllbnRMYXlvdXQ7XG4gICAgcmVhZG9ubHkgbGF5b3V0Q29uc3RyYWludDogTGF5b3V0Q29uc3RyYWludDtcbiAgICByZWFkb25seSBwYWdlRmxvYXRMYXlvdXRDb250ZXh0OiBQYWdlRmxvYXRzLlBhZ2VGbG9hdExheW91dENvbnRleHQ7XG5cbiAgICBnZXRUb3BFZGdlKCk6IG51bWJlcjtcbiAgICBnZXRCb3R0b21FZGdlKCk6IG51bWJlcjtcbiAgICBnZXRMZWZ0RWRnZSgpOiBudW1iZXI7XG4gICAgZ2V0UmlnaHRFZGdlKCk6IG51bWJlcjtcbiAgICBpc0Zsb2F0Tm9kZUNvbnRleHQobm9kZUNvbnRleHQ6IFZ0cmVlLk5vZGVDb250ZXh0KTogYm9vbGVhbjtcbiAgICBzdG9wQnlPdmVyZmxvdyhub2RlQ29udGV4dDogVnRyZWUuTm9kZUNvbnRleHQpOiBib29sZWFuO1xuICAgIGlzT3ZlcmZsb3duKGVkZ2U6IG51bWJlcik6IGJvb2xlYW47XG4gICAgZ2V0RXhjbHVzaW9ucygpOiBHZW9tZXRyeVV0aWwuU2hhcGVbXTtcbiAgICBvcGVuQWxsVmlld3MocG9zaXRpb246IFZ0cmVlLk5vZGVQb3NpdGlvbik6IFRhc2suUmVzdWx0PFZ0cmVlLk5vZGVDb250ZXh0PjtcbiAgICBjYWxjdWxhdGVPZmZzZXRJbk5vZGVGb3JOb2RlQ29udGV4dChwb3NpdGlvbjogVnRyZWUuTm9kZVBvc2l0aW9uKTogbnVtYmVyO1xuICAgIC8qKlxuICAgICAqIEBwYXJhbSBjb3VudCBmaXJzdC1YWFggbmVzdGluZyBpZGVudGlmaWVyXG4gICAgICovXG4gICAgbWF5YmVQZWVsT2ZmKFxuICAgICAgcG9zaXRpb246IFZ0cmVlLk5vZGVDb250ZXh0LFxuICAgICAgY291bnQ6IG51bWJlcixcbiAgICApOiBUYXNrLlJlc3VsdDxWdHJlZS5Ob2RlQ29udGV4dD47XG4gICAgLyoqXG4gICAgICogQnVpbGRzIHRoZSB2aWV3IHVudGlsIGEgQ1NTIGJveCBlZGdlIGlzIHJlYWNoZWQuXG4gICAgICogQHBhcmFtIHBvc2l0aW9uIHN0YXJ0IHNvdXJjZSBwb3NpdGlvbi5cbiAgICAgKiBAcGFyYW0gY2hlY2tQb2ludHMgYXJyYXkgdG8gYXBwZW5kIHBvc3NpYmxlIGJyZWFraW5nIHBvaW50cy5cbiAgICAgKiBAcmV0dXJuIGhvbGRpbmcgYm94IGVkZ2UgcG9zaXRpb24gcmVhY2hlZCBvciBudWxsIGlmIHRoZSBzb3VyY2UgaXMgZXhoYXVzdGVkLlxuICAgICAqL1xuICAgIGJ1aWxkVmlld1RvTmV4dEJsb2NrRWRnZShcbiAgICAgIHBvc2l0aW9uOiBWdHJlZS5Ob2RlQ29udGV4dCxcbiAgICAgIGNoZWNrUG9pbnRzOiBWdHJlZS5Ob2RlQ29udGV4dFtdLFxuICAgICk6IFRhc2suUmVzdWx0PFZ0cmVlLk5vZGVDb250ZXh0PjtcbiAgICBuZXh0SW5UcmVlKFxuICAgICAgcG9zaXRpb246IFZ0cmVlLk5vZGVDb250ZXh0LFxuICAgICAgYXRVbmZvcmNlZEJyZWFrPzogYm9vbGVhbixcbiAgICApOiBUYXNrLlJlc3VsdDxWdHJlZS5Ob2RlQ29udGV4dD47XG4gICAgLyoqXG4gICAgICogQnVpbGRzIHRoZSB2aWV3IGZvciBhIHNpbmdsZSB1bmJyZWFrYWJsZSBlbGVtZW50LlxuICAgICAqIEBwYXJhbSBwb3NpdGlvbiBzdGFydCBzb3VyY2UgcG9zaXRpb24uXG4gICAgICogQHJldHVybiBob2xkaW5nIGJveCBlZGdlIHBvc2l0aW9uIHJlYWNoZWQgb3IgbnVsbCBpZiB0aGUgc291cmNlIGlzIGV4aGF1c3RlZC5cbiAgICAgKi9cbiAgICBidWlsZERlZXBFbGVtZW50VmlldyhcbiAgICAgIHBvc2l0aW9uOiBWdHJlZS5Ob2RlQ29udGV4dCxcbiAgICApOiBUYXNrLlJlc3VsdDxWdHJlZS5Ob2RlQ29udGV4dD47XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGUgYSBzaW5nbGUgZmxvYXRpbmcgZWxlbWVudCAoZm9yIGV4Y2x1c2lvbiBhcmVhcykuXG4gICAgICogQHBhcmFtIHJlZiBjb250YWluZXIncyBjaGlsZCB0byBpbnNlcnQgZmxvYXQgYmVmb3JlIChjYW4gYmUgbnVsbCkuXG4gICAgICogQHBhcmFtIHNpZGUgZmxvYXQgc2lkZSAoXCJsZWZ0XCIgb3IgXCJyaWdodFwiKS5cbiAgICAgKiBAcGFyYW0gd2lkdGggZmxvYXQgaW5saW5lIGRpbWVuc2lvbi5cbiAgICAgKiBAcGFyYW0gaGVpZ2h0IGZsb2F0IGJveCBwcm9ncmVzc2lvbiBkaW1lbnNpb24uXG4gICAgICogQHJldHVybiBuZXdseSBjcmVhdGVkIGZsb2F0IGVsZW1lbnQuXG4gICAgICovXG4gICAgY3JlYXRlRmxvYXQoXG4gICAgICByZWY6IE5vZGUsXG4gICAgICBzaWRlOiBzdHJpbmcsXG4gICAgICB3aWR0aDogbnVtYmVyLFxuICAgICAgaGVpZ2h0OiBudW1iZXIsXG4gICAgKTogRWxlbWVudDtcbiAgICAvKipcbiAgICAgKiBSZW1vdmUgYWxsIHRoZSBleGNsdXNpb24gZmxvYXRzLlxuICAgICAqL1xuICAgIGtpbGxGbG9hdHMoKTogdm9pZDtcbiAgICAvKipcbiAgICAgKiBDcmVhdGUgZXhjbHVzaW9uIGZsb2F0cyBmb3IgYSBjb2x1bW4uXG4gICAgICovXG4gICAgY3JlYXRlRmxvYXRzKCk6IHZvaWQ7XG4gICAgLyoqXG4gICAgICogQHBhcmFtIG5vZGVDb250ZXh0IHBvc2l0aW9uIGFmdGVyIHRoZSBibG9ja1xuICAgICAqIEBwYXJhbSBjaGVja1BvaW50cyBhcnJheSBvZiBwb3NzaWJsZSBicmVha2luZyBwb2ludHMuXG4gICAgICogQHBhcmFtIGluZGV4IGluZGV4IG9mIHRoZSBicmVha2luZyBwb2ludFxuICAgICAqIEBwYXJhbSBib3hPZmZzZXQgYm94IG9mZnNldFxuICAgICAqIEByZXR1cm4gZWRnZSBwb3NpdGlvblxuICAgICAqL1xuICAgIGNhbGN1bGF0ZUVkZ2UoXG4gICAgICBub2RlQ29udGV4dDogVnRyZWUuTm9kZUNvbnRleHQsXG4gICAgICBjaGVja1BvaW50czogVnRyZWUuTm9kZUNvbnRleHRbXSxcbiAgICAgIGluZGV4OiBudW1iZXIsXG4gICAgICBib3hPZmZzZXQ6IG51bWJlcixcbiAgICApOiBudW1iZXI7XG4gICAgLyoqXG4gICAgICogUGFyc2UgQ1NTIGNvbXB1dGVkIGxlbmd0aCAoaW4gcGl4ZWxzKVxuICAgICAqIEBwYXJhbSB2YWwgQ1NTIGxlbmd0aCBpbiBcInB4XCIgdW5pdHMgb3IgYSBudW1iZXIuXG4gICAgICogQHJldHVybiB2YWx1ZSBpbiBwaXhlbHMgb3IgMCBpZiBub3QgcGFyc2FibGVcbiAgICAgKi9cbiAgICBwYXJzZUNvbXB1dGVkTGVuZ3RoKHZhbDogc3RyaW5nIHwgbnVtYmVyKTogbnVtYmVyO1xuICAgIC8qKlxuICAgICAqIFJlYWRzIGVsZW1lbnQncyBjb21wdXRlZCBDU1MgbWFyZ2luLlxuICAgICAqL1xuICAgIGdldENvbXB1dGVkTWFyZ2luKGVsZW1lbnQ6IEVsZW1lbnQpOiBHZW9tZXRyeVV0aWwuSW5zZXRzO1xuICAgIC8qKlxuICAgICAqIFJlYWRzIGVsZW1lbnQncyBjb21wdXRlZCBwYWRkaW5nICsgYm9yZGVycy5cbiAgICAgKi9cbiAgICBnZXRDb21wdXRlZFBhZGRpbmdCb3JkZXIoZWxlbWVudDogRWxlbWVudCk6IEdlb21ldHJ5VXRpbC5JbnNldHM7XG4gICAgLyoqXG4gICAgICogUmVhZHMgZWxlbWVudCdzIGNvbXB1dGVkIENTUyBpbnNldHMobWFyZ2lucyArIGJvcmRlciArIHBhZGRpbmcgb3IgbWFyZ2lucyA6XG4gICAgICogZGVwZW5kcyBvbiBib3gtc2l6aW5nKVxuICAgICAqL1xuICAgIGdldENvbXB1dGVkSW5zZXRzKGVsZW1lbnQ6IEVsZW1lbnQpOiBHZW9tZXRyeVV0aWwuSW5zZXRzO1xuICAgIC8qKlxuICAgICAqIFNldCBlbGVtZW50J3MgY29tcHV0ZWQgQ1NTIGluc2V0cyB0byBDb2x1bW4gQ29udGFpbmVyXG4gICAgICovXG4gICAgc2V0Q29tcHV0ZWRJbnNldHMoZWxlbWVudDogRWxlbWVudCwgY29udGFpbmVyOiBDb2x1bW4pOiB2b2lkO1xuICAgIC8qKlxuICAgICAqIFNldCBlbGVtZW50J3MgY29tcHV0ZWQgd2lkdGggYW5kIGhlaWdodCB0byBDb2x1bW4gQ29udGFpbmVyXG4gICAgICovXG4gICAgc2V0Q29tcHV0ZWRXaWR0aEFuZEhlaWdodChlbGVtZW50OiBFbGVtZW50LCBjb250YWluZXI6IENvbHVtbik6IHZvaWQ7XG4gICAgLyoqXG4gICAgICogTGF5b3V0IGEgc2luZ2xlIHVuYnJlYWthYmxlIGVsZW1lbnQuXG4gICAgICovXG4gICAgbGF5b3V0VW5icmVha2FibGUoXG4gICAgICBub2RlQ29udGV4dEluOiBWdHJlZS5Ob2RlQ29udGV4dCxcbiAgICApOiBUYXNrLlJlc3VsdDxWdHJlZS5Ob2RlQ29udGV4dD47XG4gICAgLyoqXG4gICAgICogTGF5b3V0IGEgc2luZ2xlIGZsb2F0IGVsZW1lbnQuXG4gICAgICovXG4gICAgbGF5b3V0RmxvYXQobm9kZUNvbnRleHQ6IFZ0cmVlLk5vZGVDb250ZXh0KTogVGFzay5SZXN1bHQ8VnRyZWUuTm9kZUNvbnRleHQ+O1xuXG4gICAgc2V0dXBGbG9hdEFyZWEoXG4gICAgICBhcmVhOiBQYWdlRmxvYXRBcmVhLFxuICAgICAgZmxvYXRSZWZlcmVuY2U6IFBhZ2VGbG9hdHMuRmxvYXRSZWZlcmVuY2UsXG4gICAgICBmbG9hdFNpZGU6IHN0cmluZyxcbiAgICAgIGFuY2hvckVkZ2U6IG51bWJlciB8IG51bGwsXG4gICAgICBzdHJhdGVneTogUGFnZUZsb2F0cy5QYWdlRmxvYXRMYXlvdXRTdHJhdGVneSxcbiAgICAgIGNvbmRpdGlvbjogUGFnZUZsb2F0cy5QYWdlRmxvYXRQbGFjZW1lbnRDb25kaXRpb24sXG4gICAgKTogYm9vbGVhbjtcbiAgICBjcmVhdGVQYWdlRmxvYXRBcmVhKFxuICAgICAgZmxvYXQ6IFBhZ2VGbG9hdHMuUGFnZUZsb2F0IHwgbnVsbCxcbiAgICAgIGZsb2F0U2lkZTogc3RyaW5nLFxuICAgICAgYW5jaG9yRWRnZTogbnVtYmVyIHwgbnVsbCxcbiAgICAgIHN0cmF0ZWd5OiBQYWdlRmxvYXRzLlBhZ2VGbG9hdExheW91dFN0cmF0ZWd5LFxuICAgICAgY29uZGl0aW9uOiBQYWdlRmxvYXRzLlBhZ2VGbG9hdFBsYWNlbWVudENvbmRpdGlvbixcbiAgICApOiBQYWdlRmxvYXRBcmVhIHwgbnVsbDtcbiAgICBsYXlvdXRTaW5nbGVQYWdlRmxvYXRGcmFnbWVudChcbiAgICAgIGNvbnRpbnVhdGlvbnM6IFBhZ2VGbG9hdHMuUGFnZUZsb2F0Q29udGludWF0aW9uW10sXG4gICAgICBmbG9hdFNpZGU6IHN0cmluZyxcbiAgICAgIGNsZWFyU2lkZTogc3RyaW5nIHwgbnVsbCxcbiAgICAgIGFsbG93RnJhZ21lbnRlZDogYm9vbGVhbixcbiAgICAgIHN0cmF0ZWd5OiBQYWdlRmxvYXRzLlBhZ2VGbG9hdExheW91dFN0cmF0ZWd5LFxuICAgICAgYW5jaG9yRWRnZTogbnVtYmVyIHwgbnVsbCxcbiAgICAgIHBhZ2VGbG9hdEZyYWdtZW50PzogUGFnZUZsb2F0cy5QYWdlRmxvYXRGcmFnbWVudCB8IG51bGwsXG4gICAgKTogVGFzay5SZXN1bHQ8U2luZ2xlUGFnZUZsb2F0TGF5b3V0UmVzdWx0PjtcbiAgICBsYXlvdXRQYWdlRmxvYXRJbm5lcihcbiAgICAgIGNvbnRpbnVhdGlvbjogUGFnZUZsb2F0cy5QYWdlRmxvYXRDb250aW51YXRpb24sXG4gICAgICBzdHJhdGVneTogUGFnZUZsb2F0cy5QYWdlRmxvYXRMYXlvdXRTdHJhdGVneSxcbiAgICAgIGFuY2hvckVkZ2U6IG51bWJlciB8IG51bGwsXG4gICAgICBwYWdlRmxvYXRGcmFnbWVudD86IFBhZ2VGbG9hdHMuUGFnZUZsb2F0RnJhZ21lbnQsXG4gICAgKTogVGFzay5SZXN1bHQ8Ym9vbGVhbj47XG4gICAgc2V0RmxvYXRBbmNob3JWaWV3Tm9kZShub2RlQ29udGV4dDogVnRyZWUuTm9kZUNvbnRleHQpOiBWdHJlZS5Ob2RlQ29udGV4dDtcbiAgICByZXNvbHZlRmxvYXRSZWZlcmVuY2VGcm9tQ29sdW1uU3BhbihcbiAgICAgIGZsb2F0UmVmZXJlbmNlOiBQYWdlRmxvYXRzLkZsb2F0UmVmZXJlbmNlLFxuICAgICAgY29sdW1uU3BhbjogQ3NzLlZhbCxcbiAgICAgIG5vZGVDb250ZXh0OiBWdHJlZS5Ob2RlQ29udGV4dCxcbiAgICApOiBUYXNrLlJlc3VsdDxQYWdlRmxvYXRzLkZsb2F0UmVmZXJlbmNlPjtcbiAgICBsYXlvdXRQYWdlRmxvYXQoXG4gICAgICBub2RlQ29udGV4dDogVnRyZWUuTm9kZUNvbnRleHQsXG4gICAgKTogVGFzay5SZXN1bHQ8VnRyZWUuTm9kZUNvbnRleHQ+O1xuICAgIGNyZWF0ZUp1c3RpZmljYXRpb25BZGp1c3RtZW50RWxlbWVudChcbiAgICAgIGluc2VydGlvblBvaW50OiBOb2RlLFxuICAgICAgZG9jOiBEb2N1bWVudCxcbiAgICAgIHBhcmVudE5vZGU6IE5vZGUsXG4gICAgICB2ZXJ0aWNhbDogYm9vbGVhbixcbiAgICApOiBIVE1MRWxlbWVudDtcbiAgICBhZGRBbmRBZGp1c3RKdXN0aWZpY2F0aW9uRWxlbWVudChcbiAgICAgIG5vZGVDb250ZXh0OiBWdHJlZS5Ob2RlQ29udGV4dCxcbiAgICAgIGluc2VydEFmdGVyOiBib29sZWFuLFxuICAgICAgbm9kZTogTm9kZSxcbiAgICAgIGluc2VydGlvblBvaW50OiBOb2RlLFxuICAgICAgZG9jOiBEb2N1bWVudCxcbiAgICAgIHBhcmVudE5vZGU6IE5vZGUsXG4gICAgKTogSFRNTEVsZW1lbnQ7XG4gICAgY29tcGVuc2F0ZUp1c3RpZmljYXRpb25MaW5lSGVpZ2h0KFxuICAgICAgc3BhbjogRWxlbWVudCxcbiAgICAgIGJyOiBFbGVtZW50LFxuICAgICAgbm9kZUNvbnRleHQ6IFZ0cmVlLk5vZGVDb250ZXh0LFxuICAgICk6IHZvaWQ7XG4gICAgLyoqXG4gICAgICogRml4IGp1c3RpZmljYXRpb24gb2YgdGhlIGxhc3QgbGluZSBvZiB0ZXh0IGJyb2tlbiBhY3Jvc3MgcGFnZXMgKGlmXG4gICAgICogbmVlZGVkKS5cbiAgICAgKi9cbiAgICBmaXhKdXN0aWZpY2F0aW9uSWZOZWVkZWQoXG4gICAgICBub2RlQ29udGV4dDogVnRyZWUuTm9kZUNvbnRleHQsXG4gICAgICBlbmRPZkNvbHVtbjogYm9vbGVhbixcbiAgICApOiB2b2lkO1xuICAgIHByb2Nlc3NMaW5lU3R5bGluZyhcbiAgICAgIG5vZGVDb250ZXh0OiBWdHJlZS5Ob2RlQ29udGV4dCxcbiAgICAgIHJlc05vZGVDb250ZXh0OiBWdHJlZS5Ob2RlQ29udGV4dCxcbiAgICAgIGNoZWNrUG9pbnRzOiBWdHJlZS5Ob2RlQ29udGV4dFtdLFxuICAgICk6IFRhc2suUmVzdWx0PFZ0cmVlLk5vZGVDb250ZXh0PjtcbiAgICBpc0xvbmVJbWFnZShjaGVja1BvaW50czogVnRyZWUuTm9kZUNvbnRleHRbXSk6IGJvb2xlYW47XG4gICAgZ2V0VHJhaWxpbmdNYXJnaW5FZGdlQWRqdXN0bWVudChcbiAgICAgIHRyYWlsaW5nRWRnZUNvbnRleHRzOiBWdHJlZS5Ob2RlQ29udGV4dFtdLFxuICAgICk6IG51bWJlcjtcbiAgICAvKipcbiAgICAgKiBMYXlvdXQgYSBzaW5nbGUgQ1NTIGJveC5cbiAgICAgKi9cbiAgICBsYXlvdXRCcmVha2FibGVCbG9jayhcbiAgICAgIG5vZGVDb250ZXh0OiBWdHJlZS5Ob2RlQ29udGV4dCxcbiAgICApOiBUYXNrLlJlc3VsdDxWdHJlZS5Ob2RlQ29udGV4dD47XG4gICAgcG9zdExheW91dEJsb2NrKFxuICAgICAgbm9kZUNvbnRleHQ6IFZ0cmVlLk5vZGVDb250ZXh0LFxuICAgICAgY2hlY2tQb2ludHM6IFZ0cmVlLk5vZGVDb250ZXh0W10sXG4gICAgKTogdm9pZDtcbiAgICBmaW5kRW5kT2ZMaW5lKFxuICAgICAgbGluZVBvc2l0aW9uOiBudW1iZXIsXG4gICAgICBjaGVja1BvaW50czogVnRyZWUuTm9kZUNvbnRleHRbXSxcbiAgICAgIGlzVXBkYXRlTWF4UmVhY2hlZEFmdGVyRWRnZTogYm9vbGVhbixcbiAgICApOiB7XG4gICAgICBub2RlQ29udGV4dDogVnRyZWUuTm9kZUNvbnRleHQ7XG4gICAgICBpbmRleDogbnVtYmVyO1xuICAgICAgY2hlY2tQb2ludEluZGV4OiBudW1iZXI7XG4gICAgfTtcbiAgICBmaW5kQWNjZXB0YWJsZUJyZWFrSW5zaWRlKFxuICAgICAgY2hlY2tQb2ludHM6IFZ0cmVlLk5vZGVDb250ZXh0W10sXG4gICAgICBlZGdlUG9zaXRpb246IG51bWJlcixcbiAgICAgIGZvcmNlOiBib29sZWFuLFxuICAgICk6IFZ0cmVlLk5vZGVDb250ZXh0O1xuICAgIHJlc29sdmVUZXh0Tm9kZUJyZWFrZXIobm9kZUNvbnRleHQ6IFZ0cmVlLk5vZGVDb250ZXh0KTogVGV4dE5vZGVCcmVha2VyO1xuICAgIC8qKlxuICAgICAqIFJlYWQgcmFuZ2VzIHNraXBwaW5nIHNwZWNpYWwgZWxtZW50c1xuICAgICAqL1xuICAgIGdldFJhbmdlQm94ZXMoc3RhcnQ6IE5vZGUsIGVuZDogTm9kZSk6IFZ0cmVlLkNsaWVudFJlY3RbXTtcbiAgICAvKipcbiAgICAgKiBHaXZlIGJsb2NrJ3MgaW5pdGlhbCBhbmQgZmluYWwgbm9kZXMsIGZpbmQgcG9zaXRpb25zIG9mIHRoZSBsaW5lIGJvdHRvbXMuXG4gICAgICogVGhpcyBpcywgb2YgY291cnNlLCBzb21ld2hhdCBoYWNreSBpbXBsZW1lbnRhdGlvbi5cbiAgICAgKiBAcmV0dXJuIHBvc2l0aW9uIG9mIGxpbmUgYnJlYWtzXG4gICAgICovXG4gICAgZmluZExpbmVQb3NpdGlvbnMoY2hlY2tQb2ludHM6IFZ0cmVlLk5vZGVDb250ZXh0W10pOiBudW1iZXJbXTtcbiAgICBjYWxjdWxhdGVDbG9uZWRQYWRkaW5nQm9yZGVyKG5vZGVDb250ZXh0OiBWdHJlZS5Ob2RlQ29udGV4dCk6IG51bWJlcjtcbiAgICBmaW5kQm94QnJlYWtQb3NpdGlvbihcbiAgICAgIGJwOiBCb3hCcmVha1Bvc2l0aW9uLFxuICAgICAgZm9yY2U6IGJvb2xlYW4sXG4gICAgKTogVnRyZWUuTm9kZUNvbnRleHQ7XG4gICAgZ2V0QWZ0ZXJFZGdlT2ZCbG9ja0NvbnRhaW5lcihub2RlQ29udGV4dDogVnRyZWUuTm9kZUNvbnRleHQpOiBudW1iZXI7XG4gICAgZmluZEZpcnN0T3ZlcmZsb3dpbmdFZGdlQW5kQ2hlY2tQb2ludChcbiAgICAgIGNoZWNrUG9pbnRzOiBWdHJlZS5Ob2RlQ29udGV4dFtdLFxuICAgICk6IHsgZWRnZTogbnVtYmVyOyBjaGVja1BvaW50OiBWdHJlZS5Ob2RlQ29udGV4dCB8IG51bGwgfTtcbiAgICBmaW5kRWRnZUJyZWFrUG9zaXRpb24oYnA6IEVkZ2VCcmVha1Bvc2l0aW9uKTogVnRyZWUuTm9kZUNvbnRleHQ7XG4gICAgLyoqXG4gICAgICogRmluYWxpemUgYSBsaW5lIGJyZWFrLlxuICAgICAqIEByZXR1cm4gaG9saW5nIHRydWVcbiAgICAgKi9cbiAgICBmaW5pc2hCcmVhayhcbiAgICAgIG5vZGVDb250ZXh0OiBWdHJlZS5Ob2RlQ29udGV4dCxcbiAgICAgIGZvcmNlUmVtb3ZlU2VsZjogYm9vbGVhbixcbiAgICAgIGVuZE9mQ29sdW1uOiBib29sZWFuLFxuICAgICk6IFRhc2suUmVzdWx0PGJvb2xlYW4+O1xuICAgIGZpbmRBY2NlcHRhYmxlQnJlYWtQb3NpdGlvbigpOiBCcmVha1Bvc2l0aW9uQW5kTm9kZUNvbnRleHQ7XG4gICAgZG9GaW5pc2hCcmVhayhcbiAgICAgIG5vZGVDb250ZXh0OiBWdHJlZS5Ob2RlQ29udGV4dCxcbiAgICAgIG92ZXJmbG93bk5vZGVDb250ZXh0OiBWdHJlZS5Ob2RlQ29udGV4dCxcbiAgICAgIGluaXRpYWxOb2RlQ29udGV4dDogVnRyZWUuTm9kZUNvbnRleHQsXG4gICAgICBpbml0aWFsQ29tcHV0ZWRCbG9ja1NpemU6IG51bWJlcixcbiAgICApOiBUYXNrLlJlc3VsdDxWdHJlZS5Ob2RlQ29udGV4dD47XG4gICAgLyoqXG4gICAgICogRGV0ZXJtaW5lcyBpZiBhIHBhZ2UgYnJlYWsgaXMgYWNjZXB0YWJsZSBhdCB0aGlzIHBvc2l0aW9uXG4gICAgICovXG4gICAgaXNCcmVha2FibGUoZmxvd1Bvc2l0aW9uOiBWdHJlZS5Ob2RlQ29udGV4dCk6IGJvb2xlYW47XG4gICAgLyoqXG4gICAgICogRGV0ZXJtaW5lcyBpZiBhbiBpbmRlbnQgdmFsdWUgaXMgemVyb1xuICAgICAqL1xuICAgIHplcm9JbmRlbnQodmFsOiBzdHJpbmcgfCBudW1iZXIpOiBib29sZWFuO1xuICAgIC8qKlxuICAgICAqIEByZXR1cm4gdHJ1ZSBpZiBvdmVyZmxvd3NcbiAgICAgKi9cbiAgICBjaGVja092ZXJmbG93QW5kU2F2ZUVkZ2UoXG4gICAgICBub2RlQ29udGV4dDogVnRyZWUuTm9kZUNvbnRleHQsXG4gICAgICB0cmFpbGluZ0VkZ2VDb250ZXh0czogVnRyZWUuTm9kZUNvbnRleHRbXSxcbiAgICApOiBib29sZWFuO1xuICAgIC8qKlxuICAgICAqIFNhdmUgYSBwb3NzaWJsZSBwYWdlIGJyZWFrIHBvc2l0aW9uIG9uIGEgQ1NTIGJsb2NrIGVkZ2UuIENoZWNrIGlmIGl0XG4gICAgICogb3ZlcmZsb3dzLlxuICAgICAqIEByZXR1cm4gdHJ1ZSBpZiBvdmVyZmxvd3NcbiAgICAgKi9cbiAgICBjaGVja092ZXJmbG93QW5kU2F2ZUVkZ2VBbmRCcmVha1Bvc2l0aW9uKFxuICAgICAgbm9kZUNvbnRleHQ6IFZ0cmVlLk5vZGVDb250ZXh0LFxuICAgICAgdHJhaWxpbmdFZGdlQ29udGV4dHM6IFZ0cmVlLk5vZGVDb250ZXh0W10sXG4gICAgICBzYXZlRXZlbk92ZXJmbG93bjogYm9vbGVhbixcbiAgICAgIGJyZWFrQXRUaGVFZGdlOiBzdHJpbmcgfCBudWxsLFxuICAgICk6IGJvb2xlYW47XG4gICAgYXBwbHlDbGVhcmFuY2Uobm9kZUNvbnRleHQ6IFZ0cmVlLk5vZGVDb250ZXh0KTogYm9vbGVhbjtcbiAgICBpc0JGQyhmb3JtYXR0aW5nQ29udGV4dDogVnRyZWUuRm9ybWF0dGluZ0NvbnRleHQpOiBib29sZWFuO1xuICAgIC8qKlxuICAgICAqIFNraXBzIHBvc2l0aW9ucyB1bnRpbCBlaXRoZXIgdGhlIHN0YXJ0IG9mIHVuYnJlYWthYmxlIGJsb2NrIG9yIGlubGluZVxuICAgICAqIGNvbnRlbnQuIEFsc28gc2V0cyBicmVha0JlZm9yZSBvbiB0aGUgcmVzdWx0IGNvbWJpbmluZyBicmVhay1iZWZvcmUgYW5kXG4gICAgICogYnJlYWstYWZ0ZXIgcHJvcGVydGllcyBmcm9tIGFsbCBlbGVtZW50cyB0aGF0IG1lZXQgYXQgdGhlIGVkZ2UuXG4gICAgICovXG4gICAgc2tpcEVkZ2VzKFxuICAgICAgbm9kZUNvbnRleHQ6IFZ0cmVlLk5vZGVDb250ZXh0LFxuICAgICAgbGVhZGluZ0VkZ2U6IGJvb2xlYW4sXG4gICAgICBmb3JjZWRCcmVha1ZhbHVlOiBzdHJpbmcgfCBudWxsLFxuICAgICk6IFRhc2suUmVzdWx0PFZ0cmVlLk5vZGVDb250ZXh0PjtcbiAgICAvKipcbiAgICAgKiBTa2lwcyBub24tcmVuZGVyYWJsZSBwb3NpdGlvbnMgdW50aWwgaXQgaGl0cyB0aGUgZW5kIG9mIHRoZSBmbG93IG9yIHNvbWVcbiAgICAgKiByZW5kZXJhYmxlIGNvbnRlbnQuIFJldHVybnMgdGhlIG5vZGVDb250ZXh0IHRoYXQgd2FzIHBhc3NlZCBpbiBpZiBzb21lXG4gICAgICogY29udGVudCByZW1haW5zIGFuZCBudWxsIGlmIGFsbCBjb250ZW50IGNvdWxkIGJlIHNraXBwZWQuXG4gICAgICovXG4gICAgc2tpcFRhaWxFZGdlcyhcbiAgICAgIG5vZGVDb250ZXh0OiBWdHJlZS5Ob2RlQ29udGV4dCxcbiAgICApOiBUYXNrLlJlc3VsdDxWdHJlZS5Ob2RlQ29udGV4dD47XG4gICAgbGF5b3V0RmxvYXRPckZvb3Rub3RlKFxuICAgICAgbm9kZUNvbnRleHQ6IFZ0cmVlLk5vZGVDb250ZXh0LFxuICAgICk6IFRhc2suUmVzdWx0PFZ0cmVlLk5vZGVDb250ZXh0PjtcbiAgICAvKipcbiAgICAgKiBMYXlvdXQgbmV4dCBwb3J0aW9uIG9mIHRoZSBzb3VyY2UuXG4gICAgICovXG4gICAgbGF5b3V0TmV4dChcbiAgICAgIG5vZGVDb250ZXh0OiBWdHJlZS5Ob2RlQ29udGV4dCxcbiAgICAgIGxlYWRpbmdFZGdlOiBib29sZWFuLFxuICAgICAgZm9yY2VkQnJlYWtWYWx1ZT86IHN0cmluZyB8IG51bGwsXG4gICAgKTogVGFzay5SZXN1bHQ8VnRyZWUuTm9kZUNvbnRleHQ+O1xuICAgIGNsZWFyT3ZlcmZsb3duVmlld05vZGVzKFxuICAgICAgbm9kZUNvbnRleHQ6IFZ0cmVlLk5vZGVDb250ZXh0LFxuICAgICAgcmVtb3ZlU2VsZjogYm9vbGVhbixcbiAgICApOiB2b2lkO1xuICAgIGluaXRHZW9tKCk6IHZvaWQ7XG4gICAgaW5pdCgpOiB2b2lkO1xuICAgIC8qKlxuICAgICAqIFNhdmUgdGhlIHBvdGVudGlhbCBicmVha2luZyBwb3NpdGlvbiBhdCB0aGUgZWRnZS4gU2hvdWxkLCBpbiBnZW5lcmFsLCBzYXZlXG4gICAgICogXCJhZnRlclwiIHBvc2l0aW9uIGJ1dCBvbmx5IGFmdGVyIHNraXBwaW5nIGFsbCBvZiB0aGUgXCJiZWZvcmVcIiBvbmVzIGFuZFxuICAgICAqIGdldHRpbmcgdG8gdGhlIG5vbi1lbXB0eSBjb250ZW50ICh0byBnZXQgYnJlYWtBdEVkZ2UgcmlnaHQpLlxuICAgICAqL1xuICAgIHNhdmVFZGdlQnJlYWtQb3NpdGlvbihcbiAgICAgIHBvc2l0aW9uOiBWdHJlZS5Ob2RlQ29udGV4dCxcbiAgICAgIGJyZWFrQXRFZGdlOiBzdHJpbmcgfCBudWxsLFxuICAgICAgb3ZlcmZsb3dzOiBib29sZWFuLFxuICAgICk6IHZvaWQ7XG4gICAgLyoqXG4gICAgICogQHBhcmFtIGNoZWNrUG9pbnRzIGFycmF5IG9mIGJyZWFraW5nIHBvaW50cyBmb3IgYnJlYWthYmxlIGJsb2NrXG4gICAgICovXG4gICAgc2F2ZUJveEJyZWFrUG9zaXRpb24oY2hlY2tQb2ludHM6IFZ0cmVlLk5vZGVDb250ZXh0W10pOiB2b2lkO1xuICAgIHVwZGF0ZU1heFJlYWNoZWRBZnRlckVkZ2UoYWZ0ZXJFZGdlOiBudW1iZXIpOiB2b2lkO1xuICAgIC8qKlxuICAgICAqIEBwYXJhbSBjaHVua1Bvc2l0aW9uIHN0YXJ0aW5nIHBvc2l0aW9uLlxuICAgICAqIEByZXR1cm4gaG9sZGluZyBlbmQgcG9zaXRpb24uXG4gICAgICovXG4gICAgbGF5b3V0KFxuICAgICAgY2h1bmtQb3NpdGlvbjogVnRyZWUuQ2h1bmtQb3NpdGlvbixcbiAgICAgIGxlYWRpbmdFZGdlOiBib29sZWFuLFxuICAgICAgYnJlYWtBZnRlcj86IHN0cmluZyB8IG51bGwsXG4gICAgKTogVGFzay5SZXN1bHQ8VnRyZWUuQ2h1bmtQb3NpdGlvbj47XG4gICAgaXNGdWxsV2l0aFBhZ2VGbG9hdHMoKTogYm9vbGVhbjtcbiAgICBnZXRNYXhCbG9ja1NpemVPZlBhZ2VGbG9hdHMoKTogbnVtYmVyO1xuICAgIGRvRmluaXNoQnJlYWtPZkZyYWdtZW50TGF5b3V0Q29uc3RyYWludHMobm9kZUNvbnRleHQpOiB2b2lkO1xuICAgIC8qKlxuICAgICAqIEBwYXJhbSBub2RlQ29udGV4dCBzdGFydGluZyBwb3NpdGlvbi5cbiAgICAgKiBAcmV0dXJuIGhvbGRpbmcgZW5kIHBvc2l0aW9uLlxuICAgICAqL1xuICAgIGRvTGF5b3V0KFxuICAgICAgbm9kZUNvbnRleHQ6IFZ0cmVlLk5vZGVDb250ZXh0LFxuICAgICAgbGVhZGluZ0VkZ2U6IGJvb2xlYW4sXG4gICAgICBicmVha0FmdGVyPzogc3RyaW5nIHwgbnVsbCxcbiAgICApOiBUYXNrLlJlc3VsdDx7XG4gICAgICBub2RlQ29udGV4dDogVnRyZWUuTm9kZUNvbnRleHQ7XG4gICAgICBvdmVyZmxvd25Ob2RlQ29udGV4dDogVnRyZWUuTm9kZUNvbnRleHQ7XG4gICAgfT47XG4gICAgLyoqXG4gICAgICogUmUtbGF5b3V0IGFscmVhZHkgbGFpZC1vdXQgY2h1bmtzLiBSZXR1cm4gdGhlIHBvc2l0aW9uIG9mIHRoZSBsYXN0IGZsb3cgaWZcbiAgICAgKiB0aGVyZSBpcyBhbiBvdmVyZmxvdy5cbiAgICAgKiBUT0RPOiBkZWFsIHdpdGggY2h1bmtzIHRoYXQgZGlkIG5vdCBmaXQgYXQgYWxsLlxuICAgICAqIEByZXR1cm4gaG9sZGluZyBlbmQgcG9zaXRpb24uXG4gICAgICovXG4gICAgcmVkb0xheW91dCgpOiBUYXNrLlJlc3VsdDxWdHJlZS5DaHVua1Bvc2l0aW9uPjtcbiAgICBzYXZlRGlzdGFuY2VUb0Jsb2NrRW5kRmxvYXRzKCk6IHZvaWQ7XG4gICAgY29sbGVjdEVsZW1lbnRzT2Zmc2V0KCk6IFJlcGV0aXRpdmVFbGVtZW50LkVsZW1lbnRzT2Zmc2V0W107XG4gIH1cblxuICBleHBvcnQgdHlwZSBTaW5nbGVQYWdlRmxvYXRMYXlvdXRSZXN1bHQgPSB7XG4gICAgZmxvYXRBcmVhOiBQYWdlRmxvYXRBcmVhIHwgbnVsbDtcbiAgICBwYWdlRmxvYXRGcmFnbWVudDogUGFnZUZsb2F0cy5QYWdlRmxvYXRGcmFnbWVudCB8IG51bGw7XG4gICAgbmV3UG9zaXRpb246IFZ0cmVlLkNodW5rUG9zaXRpb24gfCBudWxsO1xuICB9O1xuXG4gIC8qKlxuICAgKiBicmVha2luZyBwb2ludCByZXNvbHZlciBmb3IgVGV4dCBOb2RlLlxuICAgKi9cbiAgZXhwb3J0IGludGVyZmFjZSBUZXh0Tm9kZUJyZWFrZXIge1xuICAgIGJyZWFrVGV4dE5vZGUoXG4gICAgICB0ZXh0Tm9kZTogVGV4dCxcbiAgICAgIG5vZGVDb250ZXh0OiBWdHJlZS5Ob2RlQ29udGV4dCxcbiAgICAgIGxvdzogbnVtYmVyLFxuICAgICAgY2hlY2tQb2ludHM6IFZ0cmVlLk5vZGVDb250ZXh0W10sXG4gICAgICBjaGVja3BvaW50SW5kZXg6IG51bWJlcixcbiAgICAgIGZvcmNlOiBib29sZWFuLFxuICAgICk6IFZ0cmVlLk5vZGVDb250ZXh0O1xuICAgIGJyZWFrQWZ0ZXJTb2Z0SHlwaGVuKFxuICAgICAgdGV4dE5vZGU6IFRleHQsXG4gICAgICB0ZXh0OiBzdHJpbmcsXG4gICAgICB2aWV3SW5kZXg6IG51bWJlcixcbiAgICAgIG5vZGVDb250ZXh0OiBWdHJlZS5Ob2RlQ29udGV4dCxcbiAgICApOiBudW1iZXI7XG4gICAgYnJlYWtBZnRlck90aGVyQ2hhcmFjdGVyKFxuICAgICAgdGV4dE5vZGU6IFRleHQsXG4gICAgICB0ZXh0OiBzdHJpbmcsXG4gICAgICB2aWV3SW5kZXg6IG51bWJlcixcbiAgICAgIG5vZGVDb250ZXh0OiBWdHJlZS5Ob2RlQ29udGV4dCxcbiAgICApOiBudW1iZXI7XG4gICAgdXBkYXRlTm9kZUNvbnRleHQoXG4gICAgICBub2RlQ29udGV4dDogVnRyZWUuTm9kZUNvbnRleHQsXG4gICAgICB2aWV3SW5kZXg6IG51bWJlcixcbiAgICAgIHRleHROb2RlOiBUZXh0LFxuICAgICk6IFZ0cmVlLk5vZGVDb250ZXh0O1xuICB9XG5cbiAgZXhwb3J0IGludGVyZmFjZSBMYXlvdXRNb2RlIHtcbiAgICBkb0xheW91dChcbiAgICAgIG5vZGVDb250ZXh0OiBWdHJlZS5Ob2RlQ29udGV4dCxcbiAgICAgIGNvbHVtbjogTGF5b3V0LkNvbHVtbixcbiAgICApOiBUYXNrLlJlc3VsdDxWdHJlZS5Ob2RlQ29udGV4dD47XG4gICAgYWNjZXB0KG5vZGVDb250ZXh0OiBWdHJlZS5Ob2RlQ29udGV4dCwgY29sdW1uOiBMYXlvdXQuQ29sdW1uKTogYm9vbGVhbjtcbiAgICBwb3N0TGF5b3V0KFxuICAgICAgcG9zaXRpb25BZnRlcjogVnRyZWUuTm9kZUNvbnRleHQsXG4gICAgICBpbml0aWFsUG9zaXRpb246IFZ0cmVlLk5vZGVDb250ZXh0LFxuICAgICAgY29sdW1uOiBMYXlvdXQuQ29sdW1uLFxuICAgICAgYWNjZXB0ZWQ6IGJvb2xlYW4sXG4gICAgKTogYm9vbGVhbjtcbiAgfVxuXG4gIGV4cG9ydCBpbnRlcmZhY2UgUGFnZUZsb2F0QXJlYSBleHRlbmRzIENvbHVtbiB7XG4gICAgYWRqdXN0Q29udGVudFJlbGF0aXZlU2l6ZTogYm9vbGVhbjtcbiAgICByZWFkb25seSBmbG9hdFNpZGU6IHN0cmluZztcbiAgICByZWFkb25seSBwYXJlbnRDb250YWluZXI6IFZ0cmVlLkNvbnRhaW5lcjtcblxuICAgIGNvbnZlcnRQZXJjZW50YWdlU2l6ZXNUb1B4KHRhcmdldDogRWxlbWVudCk6IHZvaWQ7XG4gICAgZml4RmxvYXRTaXplQW5kUG9zaXRpb24obm9kZUNvbnRleHQ6IFZ0cmVlLk5vZGVDb250ZXh0KTogdm9pZDtcbiAgICBnZXRDb250ZW50SW5saW5lU2l6ZSgpOiBudW1iZXI7XG4gIH1cbn1cblxuZXhwb3J0IG5hbWVzcGFjZSBMYXlvdXRQcm9jZXNzb3Ige1xuICBleHBvcnQgaW50ZXJmYWNlIEJsb2NrRm9ybWF0dGluZ0NvbnRleHQgZXh0ZW5kcyBWdHJlZS5Gb3JtYXR0aW5nQ29udGV4dCB7fVxuXG4gIGV4cG9ydCBmdW5jdGlvbiBpc0luc3RhbmNlT2ZCbG9ja0Zvcm1hdHRpbmdDb250ZXh0KFxuICAgIG9iamVjdDogVnRyZWUuRm9ybWF0dGluZ0NvbnRleHQsXG4gICk6IG9iamVjdCBpcyBCbG9ja0Zvcm1hdHRpbmdDb250ZXh0IHtcbiAgICByZXR1cm4gb2JqZWN0ICYmIG9iamVjdC5mb3JtYXR0aW5nQ29udGV4dFR5cGUgPT09IFwiQmxvY2tcIjtcbiAgfVxufVxuXG5leHBvcnQgbmFtZXNwYWNlIE5ldCB7XG4gIGV4cG9ydCB0eXBlIFJlc3BvbnNlID0ge1xuICAgIHN0YXR1czogbnVtYmVyO1xuICAgIHN0YXR1c1RleHQ6IHN0cmluZyB8IG51bGw7XG4gICAgdXJsOiBzdHJpbmc7XG4gICAgY29udGVudFR5cGU6IHN0cmluZyB8IG51bGw7XG4gICAgcmVzcG9uc2VUZXh0OiBzdHJpbmcgfCBudWxsO1xuICAgIHJlc3BvbnNlWE1MOiBEb2N1bWVudDtcbiAgICByZXNwb25zZUJsb2I6IEJsb2I7XG4gIH07XG5cbiAgZXhwb3J0IGludGVyZmFjZSBSZXNvdXJjZVN0b3JlPFJlc291cmNlPiB7XG4gICAgcmVzb3VyY2VzOiB7IFtrZXk6IHN0cmluZ106IFJlc291cmNlIH07XG4gICAgZmV0Y2hlcnM6IHsgW2tleTogc3RyaW5nXTogVGFza1V0aWwuRmV0Y2hlcjxSZXNvdXJjZT4gfTtcbiAgICByZWFkb25seSBwYXJzZXI6IChcbiAgICAgIHAxOiBSZXNwb25zZSxcbiAgICAgIHAyOiBSZXNvdXJjZVN0b3JlPFJlc291cmNlPixcbiAgICApID0+IFRhc2suUmVzdWx0PFJlc291cmNlPjtcbiAgICByZWFkb25seSB0eXBlOiBYTUxIdHRwUmVxdWVzdFJlc3BvbnNlVHlwZTtcblxuICAgIC8qKlxuICAgICAqIEByZXR1cm4gcmVzb3VyY2UgZm9yIHRoZSBnaXZlbiBVUkxcbiAgICAgKi9cbiAgICBsb2FkKFxuICAgICAgdXJsOiBzdHJpbmcsXG4gICAgICBvcHRfcmVxdWlyZWQ/OiBib29sZWFuLFxuICAgICAgb3B0X21lc3NhZ2U/OiBzdHJpbmcsXG4gICAgKTogVGFzay5SZXN1bHQ8UmVzb3VyY2U+O1xuICAgIC8qKlxuICAgICAqIEByZXR1cm4gZmV0Y2hlciBmb3IgdGhlIHJlc291cmNlIGZvciB0aGUgZ2l2ZW4gVVJMXG4gICAgICovXG4gICAgZmV0Y2goXG4gICAgICB1cmw6IHN0cmluZyxcbiAgICAgIG9wdF9yZXF1aXJlZD86IGJvb2xlYW4sXG4gICAgICBvcHRfbWVzc2FnZT86IHN0cmluZyxcbiAgICApOiBUYXNrVXRpbC5GZXRjaGVyPFJlc291cmNlPjtcbiAgICBnZXQodXJsOiBzdHJpbmcpOiBYbWxEb2MuWE1MRG9jSG9sZGVyO1xuICAgIGRlbGV0ZSh1cmw6IHN0cmluZyk6IHZvaWQ7XG4gIH1cbn1cblxuZXhwb3J0IG5hbWVzcGFjZSBQYWdlRmxvYXRzIHtcbiAgLyoqXG4gICAqIEBlbnVtIHtzdHJpbmd9XG4gICAqL1xuICBleHBvcnQgZW51bSBGbG9hdFJlZmVyZW5jZSB7XG4gICAgSU5MSU5FID0gXCJpbmxpbmVcIixcbiAgICBDT0xVTU4gPSBcImNvbHVtblwiLFxuICAgIFJFR0lPTiA9IFwicmVnaW9uXCIsXG4gICAgUEFHRSA9IFwicGFnZVwiLFxuICB9XG5cbiAgZXhwb3J0IHR5cGUgUGFnZUZsb2F0SUQgPSBzdHJpbmc7XG5cbiAgZXhwb3J0IGludGVyZmFjZSBQYWdlRmxvYXQge1xuICAgIG9yZGVyOiBudW1iZXIgfCBudWxsO1xuICAgIGlkOiBQYWdlRmxvYXRJRCB8IG51bGw7XG4gICAgcmVhZG9ubHkgbm9kZVBvc2l0aW9uOiBWdHJlZS5Ob2RlUG9zaXRpb247XG4gICAgcmVhZG9ubHkgZmxvYXRSZWZlcmVuY2U6IEZsb2F0UmVmZXJlbmNlO1xuICAgIHJlYWRvbmx5IGZsb2F0U2lkZTogc3RyaW5nO1xuICAgIHJlYWRvbmx5IGNsZWFyU2lkZTogc3RyaW5nIHwgbnVsbDtcbiAgICByZWFkb25seSBmbG93TmFtZTogc3RyaW5nO1xuICAgIHJlYWRvbmx5IGZsb2F0TWluV3JhcEJsb2NrOiBDc3MuTnVtZXJpYyB8IG51bGw7XG5cbiAgICBnZXRPcmRlcigpOiBudW1iZXI7XG4gICAgZ2V0SWQoKTogUGFnZUZsb2F0SUQ7XG4gICAgaXNBbGxvd2VkT25Db250ZXh0KHBhZ2VGbG9hdExheW91dENvbnRleHQ6IFBhZ2VGbG9hdExheW91dENvbnRleHQpOiBib29sZWFuO1xuICAgIGlzQWxsb3dlZFRvUHJlY2VkZShvdGhlcjogUGFnZUZsb2F0KTogYm9vbGVhbjtcbiAgfVxuXG4gIGV4cG9ydCBpbnRlcmZhY2UgUGFnZUZsb2F0RnJhZ21lbnQge1xuICAgIHJlYWRvbmx5IGZsb2F0UmVmZXJlbmNlOiBGbG9hdFJlZmVyZW5jZTtcbiAgICByZWFkb25seSBmbG9hdFNpZGU6IHN0cmluZztcbiAgICByZWFkb25seSBjb250aW51YXRpb25zOiBQYWdlRmxvYXRDb250aW51YXRpb25bXTtcbiAgICByZWFkb25seSBhcmVhOiBWdHJlZS5Db250YWluZXI7XG4gICAgcmVhZG9ubHkgY29udGludWVzOiBib29sZWFuO1xuXG4gICAgaGFzRmxvYXQoZmxvYXQ6IFBhZ2VGbG9hdCk6IGJvb2xlYW47XG4gICAgZmluZE5vdEFsbG93ZWRGbG9hdChjb250ZXh0OiBQYWdlRmxvYXRMYXlvdXRDb250ZXh0KTogUGFnZUZsb2F0IHwgbnVsbDtcbiAgICBnZXRPdXRlclNoYXBlKCk6IEdlb21ldHJ5VXRpbC5TaGFwZTtcbiAgICBnZXRPdXRlclJlY3QoKTogR2VvbWV0cnlVdGlsLlJlY3Q7XG4gICAgZ2V0T3JkZXIoKTogbnVtYmVyO1xuICAgIHNob3VsZEJlU3Rhc2hlZEJlZm9yZShmbG9hdDogUGFnZUZsb2F0KTogYm9vbGVhbjtcbiAgICBhZGRDb250aW51YXRpb25zKGNvbnRpbnVhdGlvbnM6IFBhZ2VGbG9hdENvbnRpbnVhdGlvbltdKTogdm9pZDtcbiAgICBnZXRGbG93TmFtZSgpOiBzdHJpbmc7XG4gIH1cblxuICBleHBvcnQgaW50ZXJmYWNlIFBhZ2VGbG9hdENvbnRpbnVhdGlvbiB7XG4gICAgcmVhZG9ubHkgZmxvYXQ6IFBhZ2VGbG9hdDtcbiAgICByZWFkb25seSBub2RlUG9zaXRpb246IFZ0cmVlLk5vZGVQb3NpdGlvbjtcblxuICAgIGVxdWFscyhvdGhlcjogUGFnZUZsb2F0Q29udGludWF0aW9uIHwgbnVsbCk6IGJvb2xlYW47XG4gIH1cblxuICBleHBvcnQgdHlwZSBQYWdlRmxvYXRQbGFjZW1lbnRDb25kaXRpb24gPSB7XG4gICAgW2tleTogc3RyaW5nXTogYm9vbGVhbjtcbiAgfTtcblxuICBleHBvcnQgaW50ZXJmYWNlIFBhZ2VGbG9hdExheW91dENvbnRleHQge1xuICAgIHdyaXRpbmdNb2RlOiBDc3MuVmFsO1xuICAgIGRpcmVjdGlvbjogQ3NzLlZhbDtcbiAgICBmbG9hdEZyYWdtZW50czogUGFnZUZsb2F0RnJhZ21lbnRbXTtcbiAgICByZWFkb25seSBwYXJlbnQ6IFBhZ2VGbG9hdExheW91dENvbnRleHQ7XG4gICAgcmVhZG9ubHkgZmxvd05hbWU6IHN0cmluZyB8IG51bGw7XG4gICAgcmVhZG9ubHkgZ2VuZXJhdGluZ05vZGVQb3NpdGlvbjogVnRyZWUuTm9kZVBvc2l0aW9uIHwgbnVsbDtcblxuICAgIGdldENvbnRhaW5lcihmbG9hdFJlZmVyZW5jZT86IEZsb2F0UmVmZXJlbmNlKTogVnRyZWUuQ29udGFpbmVyO1xuICAgIHNldENvbnRhaW5lcihjb250YWluZXI6IFZ0cmVlLkNvbnRhaW5lcik7XG4gICAgYWRkUGFnZUZsb2F0KGZsb2F0OiBQYWdlRmxvYXQpOiB2b2lkO1xuICAgIGdldFBhZ2VGbG9hdExheW91dENvbnRleHQoXG4gICAgICBmbG9hdFJlZmVyZW5jZTogRmxvYXRSZWZlcmVuY2UsXG4gICAgKTogUGFnZUZsb2F0TGF5b3V0Q29udGV4dDtcbiAgICBmaW5kUGFnZUZsb2F0QnlOb2RlUG9zaXRpb24oXG4gICAgICBub2RlUG9zaXRpb246IFZ0cmVlLk5vZGVQb3NpdGlvbixcbiAgICApOiBQYWdlRmxvYXQgfCBudWxsO1xuICAgIGlzRm9yYmlkZGVuKGZsb2F0OiBQYWdlRmxvYXQpOiBib29sZWFuO1xuICAgIGFkZFBhZ2VGbG9hdEZyYWdtZW50KFxuICAgICAgZmxvYXRGcmFnbWVudDogUGFnZUZsb2F0RnJhZ21lbnQsXG4gICAgICBkb250SW52YWxpZGF0ZT86IGJvb2xlYW4sXG4gICAgKTogdm9pZDtcbiAgICByZW1vdmVQYWdlRmxvYXRGcmFnbWVudChcbiAgICAgIGZsb2F0RnJhZ21lbnQ6IFBhZ2VGbG9hdEZyYWdtZW50LFxuICAgICAgZG9udEludmFsaWRhdGU/OiBib29sZWFuLFxuICAgICk6IHZvaWQ7XG4gICAgZmluZFBhZ2VGbG9hdEZyYWdtZW50KGZsb2F0OiBQYWdlRmxvYXQpOiBQYWdlRmxvYXRGcmFnbWVudCB8IG51bGw7XG4gICAgaGFzRmxvYXRGcmFnbWVudHMoY29uZGl0aW9uPzogKHAxOiBQYWdlRmxvYXRGcmFnbWVudCkgPT4gYm9vbGVhbik6IGJvb2xlYW47XG4gICAgaGFzQ29udGludWluZ0Zsb2F0RnJhZ21lbnRzSW5GbG93KGZsb3dOYW1lOiBzdHJpbmcpOiBib29sZWFuO1xuICAgIHJlZ2lzdGVyUGFnZUZsb2F0QW5jaG9yKGZsb2F0OiBQYWdlRmxvYXQsIGFuY2hvclZpZXdOb2RlOiBOb2RlKTogdm9pZDtcbiAgICBjb2xsZWN0UGFnZUZsb2F0QW5jaG9ycygpOiBhbnk7XG4gICAgaXNBbmNob3JBbHJlYWR5QXBwZWFyZWQoZmxvYXRJZDogUGFnZUZsb2F0SUQpOiBib29sZWFuO1xuICAgIGRlZmVyUGFnZUZsb2F0KGNvbnRpbnVhdGlvbjogUGFnZUZsb2F0Q29udGludWF0aW9uKTogdm9pZDtcbiAgICBoYXNQcmVjZWRpbmdGbG9hdHNEZWZlcnJlZFRvTmV4dChcbiAgICAgIGZsb2F0OiBQYWdlRmxvYXQsXG4gICAgICBpZ25vcmVSZWZlcmVuY2U/OiBib29sZWFuLFxuICAgICk6IGJvb2xlYW47XG4gICAgZ2V0TGFzdEZvbGxvd2luZ0Zsb2F0SW5GcmFnbWVudHMoZmxvYXQ6IFBhZ2VGbG9hdCk6IFBhZ2VGbG9hdCB8IG51bGw7XG4gICAgZ2V0RGVmZXJyZWRQYWdlRmxvYXRDb250aW51YXRpb25zKFxuICAgICAgZmxvd05hbWU/OiBzdHJpbmcgfCBudWxsLFxuICAgICk6IFBhZ2VGbG9hdENvbnRpbnVhdGlvbltdO1xuICAgIGdldFBhZ2VGbG9hdENvbnRpbnVhdGlvbnNEZWZlcnJlZFRvTmV4dChcbiAgICAgIGZsb3dOYW1lPzogc3RyaW5nIHwgbnVsbCxcbiAgICApOiBQYWdlRmxvYXRDb250aW51YXRpb25bXTtcbiAgICBnZXRGbG9hdHNEZWZlcnJlZFRvTmV4dEluQ2hpbGRDb250ZXh0cygpOiBQYWdlRmxvYXRbXTtcbiAgICBjaGVja0FuZEZvcmJpZE5vdEFsbG93ZWRGbG9hdCgpOiBib29sZWFuO1xuICAgIGNoZWNrQW5kRm9yYmlkRmxvYXRGb2xsb3dpbmdEZWZlcnJlZEZsb2F0KCk6IGJvb2xlYW47XG4gICAgZmluaXNoKCk6IHZvaWQ7XG4gICAgaGFzU2FtZUNvbnRhaW5lckFzKG90aGVyOiBQYWdlRmxvYXRMYXlvdXRDb250ZXh0KTogYm9vbGVhbjtcbiAgICBpbnZhbGlkYXRlKCk6IHZvaWQ7XG4gICAgZGV0YWNoQ2hpbGRyZW4oKTogUGFnZUZsb2F0TGF5b3V0Q29udGV4dFtdO1xuICAgIGF0dGFjaENoaWxkcmVuKGNoaWxkcmVuOiBQYWdlRmxvYXRMYXlvdXRDb250ZXh0W10pOiB2b2lkO1xuICAgIGlzSW52YWxpZGF0ZWQoKTogYm9vbGVhbjtcbiAgICB2YWxpZGF0ZSgpOiB2b2lkO1xuICAgIHJlbW92ZUVuZEZsb2F0RnJhZ21lbnRzKGZsb2F0U2lkZTogc3RyaW5nKTogdm9pZDtcbiAgICBzdGFzaEVuZEZsb2F0RnJhZ21lbnRzKGZsb2F0OiBQYWdlRmxvYXQpOiB2b2lkO1xuICAgIHJlc3RvcmVTdGFzaGVkRnJhZ21lbnRzKGZsb2F0UmVmZXJlbmNlOiBGbG9hdFJlZmVyZW5jZSk6IHZvaWQ7XG4gICAgZGlzY2FyZFN0YXNoZWRGcmFnbWVudHMoZmxvYXRSZWZlcmVuY2U6IEZsb2F0UmVmZXJlbmNlKTogdm9pZDtcbiAgICBnZXRTdGFzaGVkRmxvYXRGcmFnbWVudHMoXG4gICAgICBmbG9hdFJlZmVyZW5jZTogRmxvYXRSZWZlcmVuY2UsXG4gICAgKTogUGFnZUZsb2F0RnJhZ21lbnRbXTtcbiAgICAvKipcbiAgICAgKiBAcGFyYW0gYW5jaG9yRWRnZSBOdWxsIGluZGljYXRlcyB0aGF0IHRoZSBhbmNob3IgaXMgbm90IGluIHRoZSBjdXJyZW50XG4gICAgICogICAgIGNvbnRhaW5lci5cbiAgICAgKiBAcmV0dXJuIExvZ2ljYWwgZmxvYXQgc2lkZSAoc25hcC1ibG9jayBpcyByZXNvbHZlZCB3aGVuIGluaXQ9ZmFsc2UpLiBOdWxsXG4gICAgICogICAgIGluZGljYXRlcyB0aGF0IHRoZSBmbG9hdCBhcmVhIGRvZXMgbm90IGZpdCBpbnNpZGUgdGhlIGNvbnRhaW5lclxuICAgICAqL1xuICAgIHNldEZsb2F0QXJlYURpbWVuc2lvbnMoXG4gICAgICBhcmVhOiBMYXlvdXQuUGFnZUZsb2F0QXJlYSxcbiAgICAgIGZsb2F0UmVmZXJlbmNlOiBGbG9hdFJlZmVyZW5jZSxcbiAgICAgIGZsb2F0U2lkZTogc3RyaW5nLFxuICAgICAgYW5jaG9yRWRnZTogbnVtYmVyIHwgbnVsbCxcbiAgICAgIGluaXQ6IGJvb2xlYW4sXG4gICAgICBmb3JjZTogYm9vbGVhbixcbiAgICAgIGNvbmRpdGlvbjogUGFnZUZsb2F0UGxhY2VtZW50Q29uZGl0aW9uLFxuICAgICk6IHN0cmluZyB8IG51bGw7XG4gICAgZ2V0RmxvYXRGcmFnbWVudEV4Y2x1c2lvbnMoKTogR2VvbWV0cnlVdGlsLlNoYXBlW107XG4gICAgZ2V0TWF4UmVhY2hlZEFmdGVyRWRnZSgpOiBudW1iZXI7XG4gICAgZ2V0QmxvY2tTdGFydEVkZ2VPZkJsb2NrRW5kRmxvYXRzKCk6IG51bWJlcjtcbiAgICBnZXRQYWdlRmxvYXRDbGVhckVkZ2UoY2xlYXI6IHN0cmluZywgY29sdW1uOiBMYXlvdXQuQ29sdW1uKTogbnVtYmVyO1xuICAgIGdldFBhZ2VGbG9hdFBsYWNlbWVudENvbmRpdGlvbihcbiAgICAgIGZsb2F0OiBQYWdlRmxvYXQsXG4gICAgICBmbG9hdFNpZGU6IHN0cmluZyxcbiAgICAgIGNsZWFyU2lkZTogc3RyaW5nIHwgbnVsbCxcbiAgICApOiBQYWdlRmxvYXRQbGFjZW1lbnRDb25kaXRpb247XG4gICAgZ2V0TGF5b3V0Q29uc3RyYWludHMoKTogTGF5b3V0LkxheW91dENvbnN0cmFpbnRbXTtcbiAgICBhZGRMYXlvdXRDb25zdHJhaW50KFxuICAgICAgbGF5b3V0Q29uc3RyYWludDogTGF5b3V0LkxheW91dENvbnN0cmFpbnQsXG4gICAgICBmbG9hdFJlZmVyZW5jZTogRmxvYXRSZWZlcmVuY2UsXG4gICAgKTogdm9pZDtcbiAgICBnZXRNYXhCbG9ja1NpemVPZlBhZ2VGbG9hdHMoKTogbnVtYmVyO1xuICAgIGxvY2soKTogdm9pZDtcbiAgICB1bmxvY2soKTogdm9pZDtcbiAgICBpc0xvY2tlZCgpOiBib29sZWFuO1xuICB9XG5cbiAgZXhwb3J0IGludGVyZmFjZSBQYWdlRmxvYXRMYXlvdXRTdHJhdGVneSB7XG4gICAgYXBwbGllc1RvTm9kZUNvbnRleHQobm9kZUNvbnRleHQ6IFZ0cmVlLk5vZGVDb250ZXh0KTogYm9vbGVhbjtcbiAgICBhcHBsaWVzVG9GbG9hdChmbG9hdDogUGFnZUZsb2F0KTogYm9vbGVhbjtcbiAgICBjcmVhdGVQYWdlRmxvYXQoXG4gICAgICBub2RlQ29udGV4dDogVnRyZWUuTm9kZUNvbnRleHQsXG4gICAgICBwYWdlRmxvYXRMYXlvdXRDb250ZXh0OiBQYWdlRmxvYXRMYXlvdXRDb250ZXh0LFxuICAgICAgY29sdW1uOiBMYXlvdXQuQ29sdW1uLFxuICAgICk6IFRhc2suUmVzdWx0PFBhZ2VGbG9hdD47XG4gICAgY3JlYXRlUGFnZUZsb2F0RnJhZ21lbnQoXG4gICAgICBjb250aW51YXRpb25zOiBQYWdlRmxvYXRDb250aW51YXRpb25bXSxcbiAgICAgIGZsb2F0U2lkZTogc3RyaW5nLFxuICAgICAgZmxvYXRBcmVhOiBMYXlvdXQuUGFnZUZsb2F0QXJlYSxcbiAgICAgIGNvbnRpbnVlczogYm9vbGVhbixcbiAgICApOiBQYWdlRmxvYXRGcmFnbWVudDtcbiAgICBmaW5kUGFnZUZsb2F0RnJhZ21lbnQoXG4gICAgICBmbG9hdDogUGFnZUZsb2F0LFxuICAgICAgcGFnZUZsb2F0TGF5b3V0Q29udGV4dDogUGFnZUZsb2F0TGF5b3V0Q29udGV4dCxcbiAgICApOiBQYWdlRmxvYXRGcmFnbWVudCB8IG51bGw7XG4gICAgYWRqdXN0UGFnZUZsb2F0QXJlYShcbiAgICAgIGZsb2F0QXJlYTogTGF5b3V0LlBhZ2VGbG9hdEFyZWEsXG4gICAgICBmbG9hdENvbnRhaW5lcjogVnRyZWUuQ29udGFpbmVyLFxuICAgICAgY29sdW1uOiBMYXlvdXQuQ29sdW1uLFxuICAgICk7XG4gICAgZm9yYmlkKGZsb2F0OiBQYWdlRmxvYXQsIHBhZ2VGbG9hdExheW91dENvbnRleHQ6IFBhZ2VGbG9hdExheW91dENvbnRleHQpO1xuICB9XG59XG5cbmV4cG9ydCBuYW1lc3BhY2UgU2VsZWN0b3JzIHtcbiAgZXhwb3J0IGludGVyZmFjZSBBZnRlcklmQ29udGludWVzIHtcbiAgICByZWFkb25seSBzb3VyY2VOb2RlOiBFbGVtZW50O1xuICAgIHJlYWRvbmx5IHN0eWxlcjogUHNldWRvRWxlbWVudC5Qc2V1ZG9lbGVtZW50U3R5bGVyO1xuXG4gICAgY3JlYXRlRWxlbWVudChcbiAgICAgIGNvbHVtbjogTGF5b3V0LkNvbHVtbixcbiAgICAgIHBhcmVudE5vZGVDb250ZXh0OiBWdHJlZS5Ob2RlQ29udGV4dCxcbiAgICApOiBUYXNrLlJlc3VsdDxFbGVtZW50PjtcbiAgfVxuXG4gIGV4cG9ydCBpbnRlcmZhY2UgQWZ0ZXJJZkNvbnRpbnVlc0xheW91dENvbnN0cmFpbnRcbiAgICBleHRlbmRzIExheW91dC5GcmFnbWVudExheW91dENvbnN0cmFpbnQge1xuICAgIG5vZGVDb250ZXh0OiBWdHJlZS5Ob2RlQ29udGV4dDtcbiAgICBhZnRlcklmQ29udGludWVzOiBBZnRlcklmQ29udGludWVzO1xuICAgIHBzZXVkb0VsZW1lbnRIZWlnaHQ6IG51bWJlcjtcblxuICAgIGdldFJlcGV0aXRpdmVFbGVtZW50cygpOiBBZnRlcklmQ29udGludWVzRWxlbWVudHNPZmZzZXQ7XG4gIH1cblxuICBleHBvcnQgZnVuY3Rpb24gaXNJbnN0YW5jZU9mQWZ0ZXJJZkNvbnRpbnVlc0xheW91dENvbnN0cmFpbnQoXG4gICAgb2JqZWN0OiBMYXlvdXQuRnJhZ21lbnRMYXlvdXRDb25zdHJhaW50LFxuICApOiBvYmplY3QgaXMgQWZ0ZXJJZkNvbnRpbnVlc0xheW91dENvbnN0cmFpbnQge1xuICAgIHJldHVybiBvYmplY3QgJiYgb2JqZWN0LmZsYWdtZW50TGF5b3V0Q29uc3RyYWludFR5cGUgPT0gXCJBZnRlcklmQ29udGludWVcIjtcbiAgfVxuXG4gIGV4cG9ydCBpbnRlcmZhY2UgQWZ0ZXJJZkNvbnRpbnVlc0VsZW1lbnRzT2Zmc2V0XG4gICAgZXh0ZW5kcyBSZXBldGl0aXZlRWxlbWVudC5FbGVtZW50c09mZnNldCB7XG4gICAgbm9kZUNvbnRleHQ6IFZ0cmVlLk5vZGVDb250ZXh0O1xuICAgIHBzZXVkb0VsZW1lbnRIZWlnaHQ6IG51bWJlcjtcblxuICAgIGFmZmVjdFRvKG5vZGVDb250ZXh0OiBWdHJlZS5Ob2RlQ29udGV4dCk6IGJvb2xlYW47XG4gIH1cbn1cblxuZXhwb3J0IG5hbWVzcGFjZSBQc2V1ZG9FbGVtZW50IHtcbiAgZXhwb3J0IGludGVyZmFjZSBQc2V1ZG9lbGVtZW50U3R5bGVyIGV4dGVuZHMgQ3NzU3R5bGVyLkFic3RyYWN0U3R5bGVyIHtcbiAgICBjb250ZW50UHJvY2Vzc2VkOiB7IFtrZXk6IHN0cmluZ106IGJvb2xlYW4gfTtcbiAgICByZWFkb25seSBlbGVtZW50OiBFbGVtZW50O1xuICAgIHN0eWxlOiBDc3NDYXNjYWRlLkVsZW1lbnRTdHlsZTtcbiAgICBzdHlsZXI6IENzc1N0eWxlci5BYnN0cmFjdFN0eWxlcjtcbiAgICByZWFkb25seSBjb250ZXh0OiBFeHBycy5Db250ZXh0O1xuICAgIHJlYWRvbmx5IGV4cHJDb250ZW50TGlzdGVuZXI6IFZ0cmVlLkV4cHJDb250ZW50TGlzdGVuZXI7XG4gIH1cbn1cblxuZXhwb3J0IG5hbWVzcGFjZSBSZXBldGl0aXZlRWxlbWVudCB7XG4gIGV4cG9ydCBpbnRlcmZhY2UgUmVwZXRpdGl2ZUVsZW1lbnRzT3duZXJGb3JtYXR0aW5nQ29udGV4dFxuICAgIGV4dGVuZHMgVnRyZWUuRm9ybWF0dGluZ0NvbnRleHQge1xuICAgIGlzUm9vdDogYm9vbGVhbjtcbiAgICByZXBldGl0aXZlRWxlbWVudHM6IFJlcGV0aXRpdmVFbGVtZW50cztcbiAgICByZWFkb25seSBwYXJlbnQ6IFZ0cmVlLkZvcm1hdHRpbmdDb250ZXh0O1xuICAgIHJlYWRvbmx5IHJvb3RTb3VyY2VOb2RlOiBFbGVtZW50O1xuICAgIGdldFJlcGV0aXRpdmVFbGVtZW50cygpOiBSZXBldGl0aXZlRWxlbWVudHM7XG4gICAgZ2V0Um9vdFZpZXdOb2RlKHBvc2l0aW9uOiBWdHJlZS5Ob2RlQ29udGV4dCk6IEVsZW1lbnQgfCBudWxsO1xuICAgIGdldFJvb3ROb2RlQ29udGV4dChcbiAgICAgIG5vZGVDb250ZXh0OiBWdHJlZS5Ob2RlQ29udGV4dCxcbiAgICApOiBWdHJlZS5Ob2RlQ29udGV4dCB8IG51bGw7XG4gICAgaW5pdGlhbGl6ZVJlcGV0aXRpdmVFbGVtZW50cyh2ZXJ0aWNhbDogYm9vbGVhbik6IHZvaWQ7XG4gIH1cblxuICBleHBvcnQgZnVuY3Rpb24gaXNJbnN0YW5jZU9mUmVwZXRpdGl2ZUVsZW1lbnRzT3duZXJGb3JtYXR0aW5nQ29udGV4dChcbiAgICBvYmplY3Q6IFZ0cmVlLkZvcm1hdHRpbmdDb250ZXh0LFxuICApOiBvYmplY3QgaXMgUmVwZXRpdGl2ZUVsZW1lbnRzT3duZXJGb3JtYXR0aW5nQ29udGV4dCB7XG4gICAgaWYgKCFvYmplY3QpIHtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gICAgY29uc3QgdHlwZSA9IG9iamVjdC5mb3JtYXR0aW5nQ29udGV4dFR5cGU7XG4gICAgcmV0dXJuIChcbiAgICAgIHR5cGUgPT09IFwiUmVwZXRpdGl2ZUVsZW1lbnRzT3duZXJcIiB8fFxuICAgICAgVGFibGUuaXNJbnN0YW5jZU9mVGFibGVGb3JtYXR0aW5nQ29udGV4dChvYmplY3QpXG4gICAgKTsgLy8gc3Vic2V0XG4gIH1cblxuICBleHBvcnQgaW50ZXJmYWNlIEVsZW1lbnRzT2Zmc2V0IHtcbiAgICBjYWxjdWxhdGVPZmZzZXQobm9kZUNvbnRleHQ6IFZ0cmVlLk5vZGVDb250ZXh0KTogbnVtYmVyO1xuICAgIGNhbGN1bGF0ZU1pbmltdW1PZmZzZXQobm9kZUNvbnRleHQ6IFZ0cmVlLk5vZGVDb250ZXh0KTogbnVtYmVyO1xuICB9XG5cbiAgZXhwb3J0IGludGVyZmFjZSBSZXBldGl0aXZlRWxlbWVudHMgZXh0ZW5kcyBFbGVtZW50c09mZnNldCB7XG4gICAgaXNTa2lwSGVhZGVyOiBib29sZWFuO1xuICAgIGlzU2tpcEZvb3RlcjogYm9vbGVhbjtcbiAgICBlbmFibGVTa2lwcGluZ0Zvb3RlcjogYm9vbGVhbjtcbiAgICBlbmFibGVTa2lwcGluZ0hlYWRlcjogYm9vbGVhbjtcbiAgICBkb25lSW5pdGlhbExheW91dDogYm9vbGVhbjtcbiAgICBmaXJzdENvbnRlbnRTb3VyY2VOb2RlOiBFbGVtZW50IHwgbnVsbDtcbiAgICBsYXN0Q29udGVudFNvdXJjZU5vZGU6IEVsZW1lbnQgfCBudWxsO1xuICAgIGFsbG93SW5zZXJ0OiBib29sZWFuO1xuICAgIGFsbG93SW5zZXJ0UmVwZWF0aXRpdmVFbGVtZW50czogYm9vbGVhbjtcbiAgICBvd25lclNvdXJjZU5vZGU6IEVsZW1lbnQ7XG5cbiAgICBzZXRIZWFkZXJOb2RlQ29udGV4dChub2RlQ29udGV4dDogVnRyZWUuTm9kZUNvbnRleHQpOiB2b2lkO1xuICAgIHNldEZvb3Rlck5vZGVDb250ZXh0KG5vZGVDb250ZXh0OiBWdHJlZS5Ob2RlQ29udGV4dCk6IHZvaWQ7XG4gICAgdXBkYXRlSGVpZ2h0KGNvbHVtbjogTGF5b3V0LkNvbHVtbik6IHZvaWQ7XG4gICAgcHJlcGFyZUxheW91dEZyYWdtZW50KCk6IHZvaWQ7XG4gICAgYXBwZW5kSGVhZGVyVG9GcmFnbWVudChcbiAgICAgIHJvb3ROb2RlQ29udGV4dDogVnRyZWUuTm9kZUNvbnRleHQsXG4gICAgICBmaXJzdENoaWxkOiBOb2RlIHwgbnVsbCxcbiAgICAgIGNvbHVtbjogTGF5b3V0LkNvbHVtbixcbiAgICApOiBUYXNrLlJlc3VsdDxib29sZWFuPjtcbiAgICBhcHBlbmRGb290ZXJUb0ZyYWdtZW50KFxuICAgICAgcm9vdE5vZGVDb250ZXh0OiBWdHJlZS5Ob2RlQ29udGV4dCxcbiAgICAgIGZpcnN0Q2hpbGQ6IE5vZGUgfCBudWxsLFxuICAgICAgY29sdW1uOiBMYXlvdXQuQ29sdW1uLFxuICAgICk6IFRhc2suUmVzdWx0PGJvb2xlYW4+O1xuICAgIGFwcGVuZEVsZW1lbnRUb0ZyYWdtZW50KFxuICAgICAgbm9kZVBvc2l0aW9uOiBWdHJlZS5Ob2RlUG9zaXRpb24sXG4gICAgICByb290Tm9kZUNvbnRleHQ6IFZ0cmVlLk5vZGVDb250ZXh0LFxuICAgICAgZmlyc3RDaGlsZDogTm9kZSB8IG51bGwsXG4gICAgICBjb2x1bW46IExheW91dC5Db2x1bW4sXG4gICAgKTogVGFzay5SZXN1bHQ8Ym9vbGVhbj47XG4gICAgbW92ZUNoaWxkcmVuKGZyb206IEVsZW1lbnQsIHRvOiBFbGVtZW50LCBmaXJzdENoaWxkOiBOb2RlIHwgbnVsbCk6IHZvaWQ7XG4gICAgaXNBZnRlckxhc3RDb250ZW50KG5vZGVDb250ZXh0OiBWdHJlZS5Ob2RlQ29udGV4dCk6IGJvb2xlYW47XG4gICAgaXNGaXJzdENvbnRlbnROb2RlKG5vZGVDb250ZXh0OiBWdHJlZS5Ob2RlQ29udGV4dCk6IGJvb2xlYW47XG4gICAgaXNFbmFibGVUb1VwZGF0ZVN0YXRlKCk6IGJvb2xlYW47XG4gICAgdXBkYXRlU3RhdGUoKTogdm9pZDtcbiAgICBwcmV2ZW50U2tpcHBpbmdIZWFkZXIoKTogdm9pZDtcbiAgICBwcmV2ZW50U2tpcHBpbmdGb290ZXIoKTogdm9pZDtcbiAgICBpc0hlYWRlclJlZ2lzdGVyZWQoKTogYm9vbGVhbjtcbiAgICBpc0Zvb3RlclJlZ2lzdGVyZWQoKTogYm9vbGVhbjtcbiAgICBpc0hlYWRlclNvdXJjZU5vZGUobm9kZTogTm9kZSk6IGJvb2xlYW47XG4gICAgaXNGb290ZXJTb3VyY2VOb2RlKG5vZGU6IE5vZGUpOiBib29sZWFuO1xuICB9XG5cbiAgZXhwb3J0IGludGVyZmFjZSBSZXBldGl0aXZlRWxlbWVudHNPd25lckxheW91dENvbnN0cmFpbnRcbiAgICBleHRlbmRzIExheW91dC5GcmFnbWVudExheW91dENvbnN0cmFpbnQge1xuICAgIGdldFJlcGV0aXRpdmVFbGVtZW50cygpOiBSZXBldGl0aXZlRWxlbWVudHM7XG4gIH1cblxuICBleHBvcnQgZnVuY3Rpb24gaXNJbnN0YW5jZU9mUmVwZXRpdGl2ZUVsZW1lbnRzT3duZXJMYXlvdXRDb25zdHJhaW50KFxuICAgIG9iamVjdDogTGF5b3V0LkZyYWdtZW50TGF5b3V0Q29uc3RyYWludCxcbiAgKTogb2JqZWN0IGlzIFJlcGV0aXRpdmVFbGVtZW50c093bmVyTGF5b3V0Q29uc3RyYWludCB7XG4gICAgaWYgKCFvYmplY3QpIHtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gICAgY29uc3QgdHlwZSA9IG9iamVjdC5mbGFnbWVudExheW91dENvbnN0cmFpbnRUeXBlO1xuICAgIHJldHVybiAoXG4gICAgICB0eXBlID09PSBcIlJlcGV0aXRpdmVFbGVtZW50c093bmVyXCIgfHxcbiAgICAgIFRhYmxlLmlzSW5zdGFuY2VPZlRhYmxlUm93TGF5b3V0Q29uc3RyYWludChvYmplY3QpXG4gICAgKTsgLy8gc3Vic2V0XG4gIH1cbn1cblxuZXhwb3J0IG5hbWVzcGFjZSBUYWJsZSB7XG4gIGV4cG9ydCBpbnRlcmZhY2UgVGFibGVGb3JtYXR0aW5nQ29udGV4dFxuICAgIGV4dGVuZHMgUmVwZXRpdGl2ZUVsZW1lbnQuUmVwZXRpdGl2ZUVsZW1lbnRzT3duZXJGb3JtYXR0aW5nQ29udGV4dCB7XG4gICAgLy8gRklYTUVcbiAgfVxuXG4gIGV4cG9ydCBmdW5jdGlvbiBpc0luc3RhbmNlT2ZUYWJsZUZvcm1hdHRpbmdDb250ZXh0KFxuICAgIG9iamVjdDogVnRyZWUuRm9ybWF0dGluZ0NvbnRleHQsXG4gICk6IG9iamVjdCBpcyBUYWJsZUZvcm1hdHRpbmdDb250ZXh0IHtcbiAgICByZXR1cm4gb2JqZWN0ICYmIG9iamVjdC5mb3JtYXR0aW5nQ29udGV4dFR5cGUgPT09IFwiVGFibGVcIjtcbiAgfVxuXG4gIGV4cG9ydCBpbnRlcmZhY2UgVGFibGVSb3dMYXlvdXRDb25zdHJhaW50XG4gICAgZXh0ZW5kcyBSZXBldGl0aXZlRWxlbWVudC5SZXBldGl0aXZlRWxlbWVudHNPd25lckxheW91dENvbnN0cmFpbnQge1xuICAgIGNlbGxGcmFnbWVudExheW91dENvbnN0cmFpbnRzOiB7XG4gICAgICBjb25zdHJhaW50czogTGF5b3V0LkZyYWdtZW50TGF5b3V0Q29uc3RyYWludFtdO1xuICAgICAgYnJlYWtQb3NpdGlvbjogVnRyZWUuTm9kZUNvbnRleHQ7XG4gICAgfVtdO1xuXG4gICAgcmVtb3ZlRHVtbXlSb3dOb2Rlcyhub2RlQ29udGV4dDogVnRyZWUuTm9kZUNvbnRleHQpOiB2b2lkO1xuICAgIGdldEVsZW1lbnRzT2Zmc2V0c0ZvclRhYmxlQ2VsbChcbiAgICAgIGNvbHVtbjogTGF5b3V0LkNvbHVtbixcbiAgICApOiBSZXBldGl0aXZlRWxlbWVudC5FbGVtZW50c09mZnNldFtdO1xuICB9XG5cbiAgZXhwb3J0IGZ1bmN0aW9uIGlzSW5zdGFuY2VPZlRhYmxlUm93TGF5b3V0Q29uc3RyYWludChcbiAgICBvYmplY3Q6IExheW91dC5GcmFnbWVudExheW91dENvbnN0cmFpbnQsXG4gICk6IG9iamVjdCBpcyBUYWJsZVJvd0xheW91dENvbnN0cmFpbnQge1xuICAgIHJldHVybiBvYmplY3QgJiYgb2JqZWN0LmZsYWdtZW50TGF5b3V0Q29uc3RyYWludFR5cGUgPT09IFwiVGFibGVSb3dcIjtcbiAgfVxufVxuXG5leHBvcnQgbmFtZXNwYWNlIFZ0cmVlIHtcbiAgZXhwb3J0IHR5cGUgQ2xpZW50UmVjdCA9IHtcbiAgICBsZWZ0OiBudW1iZXI7XG4gICAgdG9wOiBudW1iZXI7XG4gICAgcmlnaHQ6IG51bWJlcjtcbiAgICBib3R0b206IG51bWJlcjtcbiAgICB3aWR0aDogbnVtYmVyO1xuICAgIGhlaWdodDogbnVtYmVyO1xuICB9O1xuXG4gIC8qKlxuICAgKiBJbnRlcmZhY2UgdG8gcmVhZCB0aGUgcG9zaXRpb24gYXNzaWduZWQgdG8gdGhlIGVsZW1lbnRzIGFuZCByYW5nZXMgYnkgdGhlXG4gICAqIGJyb3dzZXIuXG4gICAqL1xuICBleHBvcnQgaW50ZXJmYWNlIENsaWVudExheW91dCB7XG4gICAgZ2V0UmFuZ2VDbGllbnRSZWN0cyhyYW5nZTogUmFuZ2UpOiBDbGllbnRSZWN0W107XG4gICAgZ2V0RWxlbWVudENsaWVudFJlY3QoZWxlbWVudDogRWxlbWVudCk6IENsaWVudFJlY3Q7XG4gICAgLyoqXG4gICAgICogQHJldHVybiBlbGVtZW50J3MgY29tcHV0ZWQgc3R5bGVcbiAgICAgKi9cbiAgICBnZXRFbGVtZW50Q29tcHV0ZWRTdHlsZShlbGVtZW50OiBFbGVtZW50KTogQ1NTU3R5bGVEZWNsYXJhdGlvbjtcbiAgfVxuXG4gIC8qKlxuICAgKiBTdHlsaW5nLCBjcmVhdGluZyBhIHNpbmdsZSBub2RlJ3MgdmlldywgZXRjLlxuICAgKi9cbiAgZXhwb3J0IGludGVyZmFjZSBMYXlvdXRDb250ZXh0IHtcbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGEgZnVuY3Rpb25hbGx5IGVxdWl2YWxlbnQsIGJ1dCB1bmluaXRpYWxpemVkIGxheW91dCBjb250ZXh0LFxuICAgICAqIHN1aXRhYmxlIGZvciBidWlsZGluZyBhIHNlcGFyYXRlIGNvbHVtbi5cbiAgICAgKi9cbiAgICBjbG9uZSgpOiBMYXlvdXRDb250ZXh0O1xuICAgIC8qKlxuICAgICAqIFNldCB0aGUgY3VycmVudCBzb3VyY2Ugbm9kZSBhbmQgY3JlYXRlIGEgdmlldy4gUGFyYW1ldGVyIGZpcnN0VGltZVxuICAgICAqIGlzIHRydWUgKGFuZCBwb3NzaWJseSBvZmZzZXRJbk5vZGUgPiAwKSBpZiBub2RlIHdhcyBicm9rZW4gb25cbiAgICAgKiB0aGUgcHJldmlvdXMgcGFnZS5cbiAgICAgKiBAcmV0dXJuIHRydWUgaWYgY2hpbGRyZW4gc2hvdWxkIGJlIHByb2Nlc3NlZCBhcyB3ZWxsXG4gICAgICovXG4gICAgc2V0Q3VycmVudChcbiAgICAgIG5vZGVDb250ZXh0OiBOb2RlQ29udGV4dCxcbiAgICAgIGZpcnN0VGltZTogYm9vbGVhbixcbiAgICAgIGF0VW5mb3JjZWRCcmVhaz86IGJvb2xlYW4sXG4gICAgKTogVGFzay5SZXN1bHQ8Ym9vbGVhbj47XG4gICAgLyoqXG4gICAgICogU2V0IHRoZSBjb250YWluZXIgZWxlbWVudCB0aGF0IGhvbGRzIHZpZXcgZWxlbWVudHMgcHJvZHVjZWQgZnJvbSB0aGVcbiAgICAgKiBzb3VyY2UuXG4gICAgICovXG4gICAgc2V0Vmlld1Jvb3Qodmlld1Jvb3Q6IEVsZW1lbnQsIGlzRm9vdG5vdGU6IGJvb2xlYW4pO1xuICAgIC8qKlxuICAgICAqIE1vdmVzIHRvIHRoZSBuZXh0IHZpZXcgbm9kZSwgY3JlYXRpbmcgaXQgYW5kIGFwcGVuZGluZyBpdCB0byB0aGUgdmlldyB0cmVlXG4gICAgICogaWYgbmVlZGVkLlxuICAgICAqIEByZXR1cm4gdGhhdCBjb3JyZXNwb25kcyB0byB0aGUgbmV4dCB2aWV3IG5vZGVcbiAgICAgKi9cbiAgICBuZXh0SW5UcmVlKFxuICAgICAgbm9kZUNvbnRleHQ6IE5vZGVDb250ZXh0LFxuICAgICAgYXRVbmZvcmNlZEJyZWFrPzogYm9vbGVhbixcbiAgICApOiBUYXNrLlJlc3VsdDxOb2RlQ29udGV4dD47XG4gICAgLyoqXG4gICAgICogQXBwbHkgcHNldWRvLWVsZW1lbnQgc3R5bGVzIChpZiBhbnkpLlxuICAgICAqIEBwYXJhbSB0YXJnZXQgZWxlbWVudCB0byBhcHBseSBzdHlsZXMgdG9cbiAgICAgKi9cbiAgICBhcHBseVBzZXVkb2VsZW1lbnRTdHlsZShcbiAgICAgIG5vZGVDb250ZXh0OiBOb2RlQ29udGV4dCxcbiAgICAgIHBzZXVkb05hbWU6IHN0cmluZyxcbiAgICAgIHRhcmdldDogRWxlbWVudCxcbiAgICApOiB2b2lkO1xuICAgIC8qKlxuICAgICAqIEFwcGx5IHN0eWxlcyB0byBmb290bm90ZSBjb250YWluZXIuXG4gICAgICogQHBhcmFtIHRhcmdldCBlbGVtZW50IHRvIGFwcGx5IHN0eWxlcyB0b1xuICAgICAqIEByZXR1cm4gdmVydGljYWxcbiAgICAgKi9cbiAgICBhcHBseUZvb3Rub3RlU3R5bGUoXG4gICAgICB2ZXJ0aWNhbDogYm9vbGVhbixcbiAgICAgIHJ0bDogYm9vbGVhbixcbiAgICAgIHRhcmdldDogRWxlbWVudCxcbiAgICApOiBib29sZWFuO1xuICAgIC8qKlxuICAgICAqIFBlZWwgb2ZmIGlubmVybW9zdCBmaXJzdC1YWFggcHNldWRvZWxlbWVudCwgY3JlYXRlIGFuZCBjcmVhdGUgdmlldyBub2Rlc1xuICAgICAqIGFmdGVyIHRoZSBlbmQgb2YgdGhhdCBwc2V1ZG9lbGVtZW50LlxuICAgICAqL1xuICAgIHBlZWxPZmYoXG4gICAgICBub2RlQ29udGV4dDogTm9kZUNvbnRleHQsXG4gICAgICBub2RlT2Zmc2V0OiBudW1iZXIsXG4gICAgKTogVGFzay5SZXN1bHQ8Tm9kZUNvbnRleHQ+O1xuICAgIC8qKlxuICAgICAqIFByb2Nlc3MgYSBibG9jay1lbmQgZWRnZSBvZiBhIGZyYWdtZW50ZWQgYmxvY2suXG4gICAgICovXG4gICAgcHJvY2Vzc0ZyYWdtZW50ZWRCbG9ja0VkZ2Uobm9kZUNvbnRleHQ6IE5vZGVDb250ZXh0KTtcbiAgICBjb252ZXJ0TGVuZ3RoVG9QeChcbiAgICAgIG51bWVyaWM6IENzcy5OdW1lcmljLFxuICAgICAgdmlld05vZGU6IE5vZGUsXG4gICAgICBjbGllbnRMYXlvdXQ6IENsaWVudExheW91dCxcbiAgICApOiBudW1iZXIgfCBDc3MuTnVtZXJpYztcbiAgICAvKipcbiAgICAgKiBSZXR1cm5zIGlmIHR3byBOb2RlUG9zaXRpb25zIHJlcHJlc2VudHMgdGhlIHNhbWUgcG9zaXRpb24gaW4gdGhlIGRvY3VtZW50LlxuICAgICAqL1xuICAgIGlzU2FtZU5vZGVQb3NpdGlvbihcbiAgICAgIG5vZGVQb3NpdGlvbjE6IE5vZGVQb3NpdGlvbixcbiAgICAgIG5vZGVQb3NpdGlvbjI6IE5vZGVQb3NpdGlvbixcbiAgICApOiBib29sZWFuO1xuICAgIGFkZEV2ZW50TGlzdGVuZXIoXG4gICAgICB0eXBlOiBzdHJpbmcsXG4gICAgICBsaXN0ZW5lcjogQmFzZS5FdmVudExpc3RlbmVyLFxuICAgICAgY2FwdHVyZT86IGJvb2xlYW4sXG4gICAgKTogdm9pZDtcbiAgICByZW1vdmVFdmVudExpc3RlbmVyKFxuICAgICAgdHlwZTogc3RyaW5nLFxuICAgICAgbGlzdGVuZXI6IEJhc2UuRXZlbnRMaXN0ZW5lcixcbiAgICAgIGNhcHR1cmU/OiBib29sZWFuLFxuICAgICk6IHZvaWQ7XG4gICAgZGlzcGF0Y2hFdmVudChldnQ6IEJhc2UuRXZlbnQpOiB2b2lkO1xuICB9XG5cbiAgLyoqXG4gICAqIEZvcm1hdHRpbmcgY29udGV4dC5cbiAgICovXG4gIGV4cG9ydCBpbnRlcmZhY2UgRm9ybWF0dGluZ0NvbnRleHQge1xuICAgIGZvcm1hdHRpbmdDb250ZXh0VHlwZTogRm9ybWF0dGluZ0NvbnRleHRUeXBlO1xuICAgIGdldE5hbWUoKTogc3RyaW5nO1xuICAgIGlzRmlyc3RUaW1lKG5vZGVDb250ZXh0OiBOb2RlQ29udGV4dCwgZmlyc3RUaW1lOiBib29sZWFuKTogYm9vbGVhbjtcbiAgICBnZXRQYXJlbnQoKTogRm9ybWF0dGluZ0NvbnRleHQ7XG4gICAgc2F2ZVN0YXRlKCk6IGFueTtcbiAgICByZXN0b3JlU3RhdGUoc3RhdGU6IGFueSk7XG4gIH1cblxuICBleHBvcnQgdHlwZSBOb2RlUG9zaXRpb25TdGVwID0ge1xuICAgIG5vZGU6IE5vZGU7XG4gICAgc2hhZG93VHlwZTogU2hhZG93VHlwZTtcbiAgICBzaGFkb3dDb250ZXh0OiBTaGFkb3dDb250ZXh0IHwgbnVsbDtcbiAgICBub2RlU2hhZG93OiBTaGFkb3dDb250ZXh0IHwgbnVsbDtcbiAgICBzaGFkb3dTaWJsaW5nOiBOb2RlUG9zaXRpb25TdGVwIHwgbnVsbDtcbiAgICBmb3JtYXR0aW5nQ29udGV4dDogRm9ybWF0dGluZ0NvbnRleHQgfCBudWxsO1xuICAgIGZyYWdtZW50SW5kZXg6IG51bWJlcjtcbiAgfTtcblxuICBleHBvcnQgdHlwZSBOb2RlUG9zaXRpb24gPSB7XG4gICAgc3RlcHM6IE5vZGVQb3NpdGlvblN0ZXBbXTtcbiAgICBvZmZzZXRJbk5vZGU6IG51bWJlcjtcbiAgICBhZnRlcjogYm9vbGVhbjtcbiAgICBwcmVwcm9jZXNzZWRUZXh0Q29udGVudDogRGlmZi5DaGFuZ2VbXSB8IG51bGw7XG4gIH07XG5cbiAgLyoqXG4gICAqIEhhbmRsaW5nIG9mIHB1cmVseSB3aGl0ZXNwYWNlIHNlcXVlbmNlcyBiZXR3ZWVuIGJsb2Nrc1xuICAgKiBAZW51bSB7bnVtYmVyfVxuICAgKi9cbiAgZXhwb3J0IGVudW0gV2hpdGVzcGFjZSB7XG4gICAgLyoqXG4gICAgICogV2hpdGVzcGFjZSBzZXF1ZW5jZSBiZXR3ZWVuIGJsb2NrcyBpcyBpZ25vcmVkXG4gICAgICovXG4gICAgSUdOT1JFLFxuICAgIC8qKlxuICAgICAqIFdoaXRlc3BhY2Ugc2VxdWVuY2UgYmV0d2VlbiBibG9ja3MgaXMgaWdub3JlZCB1bmxlc3MgaXQgY29udGFpbmVzIG5ld2xpbmVcbiAgICAgKi9cbiAgICBORVdMSU5FLFxuICAgIC8qKlxuICAgICAqIFdoaXRlc3BhY2Ugc2VxdWVuY2UgYmV0d2VlbiBibG9ja3MgaXMgcHJlc2VydmVkXG4gICAgICovXG4gICAgUFJFU0VSVkUsXG4gIH1cblxuICBleHBvcnQgaW50ZXJmYWNlIENvbnRhaW5lciB7XG4gICAgbGVmdDogbnVtYmVyO1xuICAgIHRvcDogbnVtYmVyO1xuICAgIG1hcmdpbkxlZnQ6IG51bWJlcjtcbiAgICBtYXJnaW5SaWdodDogbnVtYmVyO1xuICAgIG1hcmdpblRvcDogbnVtYmVyO1xuICAgIG1hcmdpbkJvdHRvbTogbnVtYmVyO1xuICAgIGJvcmRlckxlZnQ6IG51bWJlcjtcbiAgICBib3JkZXJSaWdodDogbnVtYmVyO1xuICAgIGJvcmRlclRvcDogbnVtYmVyO1xuICAgIGJvcmRlckJvdHRvbTogbnVtYmVyO1xuICAgIHBhZGRpbmdMZWZ0OiBudW1iZXI7XG4gICAgcGFkZGluZ1JpZ2h0OiBudW1iZXI7XG4gICAgcGFkZGluZ1RvcDogbnVtYmVyO1xuICAgIHBhZGRpbmdCb3R0b206IG51bWJlcjtcbiAgICB3aWR0aDogbnVtYmVyO1xuICAgIGhlaWdodDogbnVtYmVyO1xuICAgIG9yaWdpblg6IG51bWJlcjtcbiAgICBvcmlnaW5ZOiBudW1iZXI7XG4gICAgZXhjbHVzaW9uczogR2VvbWV0cnlVdGlsLlNoYXBlW107XG4gICAgaW5uZXJTaGFwZTogR2VvbWV0cnlVdGlsLlNoYXBlO1xuICAgIGNvbXB1dGVkQmxvY2tTaXplOiBudW1iZXI7XG4gICAgc25hcFdpZHRoOiBudW1iZXI7XG4gICAgc25hcEhlaWdodDogbnVtYmVyO1xuICAgIHNuYXBPZmZzZXRYOiBudW1iZXI7XG4gICAgc25hcE9mZnNldFk6IG51bWJlcjtcbiAgICB2ZXJ0aWNhbDogYm9vbGVhbjsgLy8gdmVydGljYWwgd3JpdGluZ1xuICAgIGVsZW1lbnQ6IEVsZW1lbnQ7XG5cbiAgICBnZXRJbnNldFRvcCgpOiBudW1iZXI7XG4gICAgZ2V0SW5zZXRCb3R0b20oKTogbnVtYmVyO1xuICAgIGdldEluc2V0TGVmdCgpOiBudW1iZXI7XG4gICAgZ2V0SW5zZXRSaWdodCgpOiBudW1iZXI7XG4gICAgZ2V0SW5zZXRCZWZvcmUoKTogbnVtYmVyO1xuICAgIGdldEluc2V0QWZ0ZXIoKTogbnVtYmVyO1xuICAgIGdldEluc2V0U3RhcnQoKTogbnVtYmVyO1xuICAgIGdldEluc2V0RW5kKCk6IG51bWJlcjtcbiAgICBnZXRCZWZvcmVFZGdlKGJveDogQ2xpZW50UmVjdCk6IG51bWJlcjtcbiAgICBnZXRBZnRlckVkZ2UoYm94OiBDbGllbnRSZWN0KTogbnVtYmVyO1xuICAgIGdldFN0YXJ0RWRnZShib3g6IENsaWVudFJlY3QpOiBudW1iZXI7XG4gICAgZ2V0RW5kRWRnZShib3g6IENsaWVudFJlY3QpOiBudW1iZXI7XG4gICAgZ2V0SW5saW5lU2l6ZShib3g6IENsaWVudFJlY3QpOiBudW1iZXI7XG4gICAgZ2V0Qm94U2l6ZShib3g6IENsaWVudFJlY3QpOiBudW1iZXI7XG4gICAgZ2V0Qm94RGlyKCk6IG51bWJlcjtcbiAgICBnZXRJbmxpbmVEaXIoKTogbnVtYmVyO1xuICAgIGNvcHlGcm9tKG90aGVyOiBDb250YWluZXIpOiB2b2lkO1xuICAgIHNldFZlcnRpY2FsUG9zaXRpb24odG9wOiBudW1iZXIsIGhlaWdodDogbnVtYmVyKTogdm9pZDtcbiAgICBzZXRIb3Jpem9udGFsUG9zaXRpb24obGVmdDogbnVtYmVyLCB3aWR0aDogbnVtYmVyKTogdm9pZDtcbiAgICBzZXRCbG9ja1Bvc2l0aW9uKHN0YXJ0OiBudW1iZXIsIGV4dGVudDogbnVtYmVyKTogdm9pZDtcbiAgICBzZXRJbmxpbmVQb3NpdGlvbihzdGFydDogbnVtYmVyLCBleHRlbnQ6IG51bWJlcik6IHZvaWQ7XG4gICAgY2xlYXIoKTogdm9pZDtcbiAgICBnZXRJbm5lclNoYXBlKCk6IEdlb21ldHJ5VXRpbC5TaGFwZTtcbiAgICBnZXRJbm5lclJlY3QoKTogR2VvbWV0cnlVdGlsLlJlY3Q7XG4gICAgZ2V0UGFkZGluZ1JlY3QoKTogR2VvbWV0cnlVdGlsLlJlY3Q7XG4gICAgZ2V0T3V0ZXJTaGFwZShcbiAgICAgIG91dGVyU2hhcGVQcm9wOiBDc3MuVmFsLFxuICAgICAgY29udGV4dDogRXhwcnMuQ29udGV4dCxcbiAgICApOiBHZW9tZXRyeVV0aWwuU2hhcGU7XG4gICAgZ2V0T3V0ZXJSZWN0KCk6IEdlb21ldHJ5VXRpbC5SZWN0O1xuICB9XG5cbiAgLyoqXG4gICAqIEBlbnVtIHtudW1iZXJ9XG4gICAqL1xuICBleHBvcnQgZW51bSBTaGFkb3dUeXBlIHtcbiAgICBOT05FLFxuICAgIENPTlRFTlQsXG4gICAgUk9PVExFU1MsXG4gICAgUk9PVEVELFxuICB9XG5cbiAgLyoqXG4gICAqIERhdGEgYWJvdXQgc2hhZG93IHRyZWUgaW5zdGFuY2UuXG4gICAqL1xuICBleHBvcnQgaW50ZXJmYWNlIFNoYWRvd0NvbnRleHQge1xuICAgIHJlYWRvbmx5IG93bmVyOiBFbGVtZW50O1xuICAgIHJlYWRvbmx5IHJvb3Q6IEVsZW1lbnQ7XG4gICAgcmVhZG9ubHkgeG1sZG9jOiBYbWxEb2MuWE1MRG9jSG9sZGVyO1xuICAgIHJlYWRvbmx5IHBhcmVudFNoYWRvdzogU2hhZG93Q29udGV4dDtcbiAgICBzdWJTaGFkb3c6IFNoYWRvd0NvbnRleHQ7XG4gICAgcmVhZG9ubHkgdHlwZTogVnRyZWUuU2hhZG93VHlwZTtcbiAgICByZWFkb25seSBzdHlsZXI6IG9iamVjdDtcblxuICAgIGVxdWFscyhvdGhlcjogU2hhZG93Q29udGV4dCk6IGJvb2xlYW47XG4gIH1cblxuICAvKipcbiAgICogSW5mb3JtYXRpb24gYWJvdXQgOmZpcnN0LWxldHRlciBvciA6Zmlyc3QtbGluZSBwc2V1ZG9lbGVtZW50c1xuICAgKiBAcGFyYW0gY291bnQgMCAtIGZpcnN0LWxldHRlciwgMSBvciBtb3JlIC0gZmlyc3QgbGluZShzKVxuICAgKi9cbiAgZXhwb3J0IGludGVyZmFjZSBGaXJzdFBzZXVkbyB7XG4gICAgcmVhZG9ubHkgb3V0ZXI6IEZpcnN0UHNldWRvO1xuICAgIHJlYWRvbmx5IGNvdW50OiBudW1iZXI7XG4gIH1cblxuICAvKipcbiAgICogTm9kZUNvbnRleHQgcmVwcmVzZW50cyBhIHBvc2l0aW9uIGluIHRoZSBkb2N1bWVudCArIGxheW91dC1yZWxhdGVkXG4gICAqIGluZm9ybWF0aW9uIGF0dGFjaGVkIHRvIGl0LiBXaGVuIGFmdGVyPWZhbHNlIGFuZCBvZmZzZXRJbk5vZGU9MCwgdGhlXG4gICAqIHBvc2l0aW9uIGlzIGluc2lkZSB0aGUgZWxlbWVudCAobm9kZSksIGJ1dCBqdXN0IGJlZm9yZSBpdHMgZmlyc3QgY2hpbGQuXG4gICAqIFdoZW4gb2Zmc2V0SW5Ob2RlPjAgaXQgcmVwcmVzZW50cyBvZmZzZXQgaW4gdGhlIHRleHR1YWwgY29udGVudCBvZiB0aGVcbiAgICogbm9kZS4gV2hlbiBhZnRlcj10cnVlIGl0IHJlcHJlc2VudHMgcG9zaXRpb24gcmlnaHQgYWZ0ZXIgdGhlIGxhc3QgY2hpbGRcbiAgICogb2YgdGhlIG5vZGUuIGJveE9mZnNldCBpcyBpbmNyZW1lbnRlZCBieSAxIGZvciBhbnkgdmFsaWQgbm9kZSBwb3NpdGlvbi5cbiAgICovXG4gIGV4cG9ydCBpbnRlcmZhY2UgTm9kZUNvbnRleHQge1xuICAgIC8vIHBvc2l0aW9uIGl0c2VsZlxuICAgIG9mZnNldEluTm9kZTogbnVtYmVyO1xuICAgIGFmdGVyOiBib29sZWFuO1xuICAgIHNoYWRvd1R5cGU6IFNoYWRvd1R5cGU7IC8vIHBhcmVudCdzIHNoYWRvdyB0eXBlXG4gICAgc2hhZG93Q29udGV4dDogVnRyZWUuU2hhZG93Q29udGV4dDtcbiAgICBub2RlU2hhZG93OiBWdHJlZS5TaGFkb3dDb250ZXh0O1xuICAgIHNoYWRvd1NpYmxpbmc6IE5vZGVDb250ZXh0OyAvLyBuZXh0IFwic2libGluZ1wiIGluIHRoZSBzaGFkb3cgdHJlZVxuICAgIC8vIG90aGVyIHN0dWZmXG4gICAgc2hhcmVkOiBib29sZWFuO1xuICAgIGlubGluZTogYm9vbGVhbjtcbiAgICBvdmVyZmxvdzogYm9vbGVhbjtcbiAgICBicmVha1BlbmFsdHk6IG51bWJlcjtcbiAgICBkaXNwbGF5OiBzdHJpbmcgfCBudWxsO1xuICAgIGZsb2F0UmVmZXJlbmNlOiBQYWdlRmxvYXRzLkZsb2F0UmVmZXJlbmNlO1xuICAgIGZsb2F0U2lkZTogc3RyaW5nIHwgbnVsbDtcbiAgICBjbGVhclNpZGU6IHN0cmluZyB8IG51bGw7XG4gICAgZmxvYXRNaW5XcmFwQmxvY2s6IENzcy5OdW1lcmljIHwgbnVsbDtcbiAgICBjb2x1bW5TcGFuOiBDc3MuVmFsIHwgbnVsbDtcbiAgICB2ZXJ0aWNhbEFsaWduOiBzdHJpbmc7XG4gICAgY2FwdGlvblNpZGU6IHN0cmluZztcbiAgICBpbmxpbmVCb3JkZXJTcGFjaW5nOiBudW1iZXI7XG4gICAgYmxvY2tCb3JkZXJTcGFjaW5nOiBudW1iZXI7XG4gICAgZmxleENvbnRhaW5lcjogYm9vbGVhbjtcbiAgICB3aGl0ZXNwYWNlOiBXaGl0ZXNwYWNlO1xuICAgIGh5cGhlbmF0ZUNoYXJhY3Rlcjogc3RyaW5nIHwgbnVsbDtcbiAgICBicmVha1dvcmQ6IGJvb2xlYW47XG4gICAgZXN0YWJsaXNoZXNCRkM6IGJvb2xlYW47XG4gICAgY29udGFpbmluZ0Jsb2NrRm9yQWJzb2x1dGU6IGJvb2xlYW47XG4gICAgYnJlYWtCZWZvcmU6IHN0cmluZyB8IG51bGw7XG4gICAgYnJlYWtBZnRlcjogc3RyaW5nIHwgbnVsbDtcbiAgICB2aWV3Tm9kZTogTm9kZTtcbiAgICBjbGVhclNwYWNlcjogTm9kZTtcbiAgICBpbmhlcml0ZWRQcm9wczogeyBba2V5OiBzdHJpbmddOiBudW1iZXIgfCBzdHJpbmcgfCBDc3MuVmFsIH07XG4gICAgdmVydGljYWw6IGJvb2xlYW47XG4gICAgZGlyZWN0aW9uOiBzdHJpbmc7XG4gICAgZmlyc3RQc2V1ZG86IEZpcnN0UHNldWRvO1xuICAgIGxhbmc6IHN0cmluZyB8IG51bGw7XG4gICAgcHJlcHJvY2Vzc2VkVGV4dENvbnRlbnQ6IERpZmYuQ2hhbmdlW10gfCBudWxsO1xuICAgIGZvcm1hdHRpbmdDb250ZXh0OiBGb3JtYXR0aW5nQ29udGV4dDtcbiAgICByZXBlYXRPbkJyZWFrOiBzdHJpbmcgfCBudWxsO1xuICAgIHBsdWdpblByb3BzOiB7XG4gICAgICBba2V5OiBzdHJpbmddOiBzdHJpbmcgfCBudW1iZXIgfCB1bmRlZmluZWQgfCBudWxsIHwgKG51bWJlciB8IG51bGwpW107XG4gICAgfTtcbiAgICBmcmFnbWVudEluZGV4OiBudW1iZXI7XG4gICAgYWZ0ZXJJZkNvbnRpbnVlczogU2VsZWN0b3JzLkFmdGVySWZDb250aW51ZXM7XG4gICAgZm9vdG5vdGVQb2xpY3k6IENzcy5JZGVudCB8IG51bGw7XG5cbiAgICBzb3VyY2VOb2RlOiBOb2RlO1xuICAgIHBhcmVudDogTm9kZUNvbnRleHQ7XG4gICAgYm94T2Zmc2V0OiBudW1iZXI7XG5cbiAgICByZXNldFZpZXcoKTogdm9pZDtcbiAgICBtb2RpZnkoKTogTm9kZUNvbnRleHQ7XG4gICAgY29weSgpOiBOb2RlQ29udGV4dDtcbiAgICBjbG9uZSgpOiBOb2RlQ29udGV4dDtcbiAgICB0b05vZGVQb3NpdGlvblN0ZXAoKTogTm9kZVBvc2l0aW9uU3RlcDtcbiAgICB0b05vZGVQb3NpdGlvbigpOiBOb2RlUG9zaXRpb247XG4gICAgaXNJbnNpZGVCRkMoKTogYm9vbGVhbjtcbiAgICBnZXRDb250YWluaW5nQmxvY2tGb3JBYnNvbHV0ZSgpOiBOb2RlQ29udGV4dDtcbiAgICAvKipcbiAgICAgKiBXYWxrIHVwIE5vZGVDb250ZXh0IHRyZWUgKHN0YXJ0aW5nIGZyb20gaXRzZWxmKSBhbmQgY2FsbCB0aGUgY2FsbGJhY2sgZm9yXG4gICAgICogZWFjaCBibG9jay5cbiAgICAgKi9cbiAgICB3YWxrVXBCbG9ja3MoY2FsbGJhY2s6IChwMTogTm9kZUNvbnRleHQpID0+IGFueSk6IHZvaWQ7XG4gICAgYmVsb25nc1RvKGZvcm1hdHRpbmdDb250ZXh0OiBGb3JtYXR0aW5nQ29udGV4dCk6IGJvb2xlYW47XG4gIH1cblxuICBleHBvcnQgaW50ZXJmYWNlIENodW5rUG9zaXRpb24ge1xuICAgIGZsb2F0czogTm9kZVBvc2l0aW9uW107XG4gICAgcHJpbWFyeTogTm9kZVBvc2l0aW9uO1xuXG4gICAgY2xvbmUoKTogQ2h1bmtQb3NpdGlvbjtcbiAgICBpc1NhbWVQb3NpdGlvbihvdGhlcjogQ2h1bmtQb3NpdGlvbik6IGJvb2xlYW47XG4gIH1cblxuICBleHBvcnQgdHlwZSBFeHByQ29udGVudExpc3RlbmVyID0gKFxuICAgIHAxOiBFeHBycy5WYWwsXG4gICAgcDI6IHN0cmluZyxcbiAgICBwMzogRG9jdW1lbnQsXG4gICkgPT4gTm9kZSB8IG51bGw7XG59XG5cbmV4cG9ydCBuYW1lc3BhY2UgWG1sRG9jIHtcbiAgZXhwb3J0IGludGVyZmFjZSBYTUxEb2NIb2xkZXIge1xuICAgIGxhbmc6IHN0cmluZyB8IG51bGw7XG4gICAgdG90YWxPZmZzZXQ6IG51bWJlcjtcbiAgICByb290OiBFbGVtZW50O1xuICAgIGJvZHk6IEVsZW1lbnQ7XG4gICAgaGVhZDogRWxlbWVudDtcbiAgICBsYXN0OiBFbGVtZW50O1xuICAgIGxhc3RPZmZzZXQ6IG51bWJlcjtcbiAgICBpZE1hcDogeyBba2V5OiBzdHJpbmddOiBFbGVtZW50IH07XG4gICAgcmVhZG9ubHkgc3RvcmU6IFhNTERvY1N0b3JlO1xuICAgIHJlYWRvbmx5IHVybDogc3RyaW5nO1xuICAgIHJlYWRvbmx5IGRvY3VtZW50OiBEb2N1bWVudDtcblxuICAgIGRvYygpOiBOb2RlTGlzdDtcbiAgICBnZXRFbGVtZW50T2Zmc2V0KGVsZW1lbnQ6IEVsZW1lbnQpOiBudW1iZXI7XG4gICAgZ2V0Tm9kZU9mZnNldChzcmNOb2RlOiBOb2RlLCBvZmZzZXRJbk5vZGU6IG51bWJlciwgYWZ0ZXI6IGJvb2xlYW4pOiBudW1iZXI7XG4gICAgZ2V0VG90YWxPZmZzZXQoKTogbnVtYmVyO1xuICAgIC8qKlxuICAgICAqIEByZXR1cm4gbGFzdCBub2RlIHN1Y2ggdGhhdCBpdHMgb2Zmc2V0IGlzIGxlc3Mgb3IgZXF1YWwgdG8gdGhlIGdpdmVuXG4gICAgICovXG4gICAgZ2V0Tm9kZUJ5T2Zmc2V0KG9mZnNldDogbnVtYmVyKTogTm9kZTtcbiAgICAvKipcbiAgICAgKiBHZXQgZWxlbWVudCBieSBVUkwgaW4gdGhlIHNvdXJjZSBkb2N1bWVudChzKS4gVVJMIG11c3QgYmUgaW4gZWl0aGVyICcjaWQnXG4gICAgICogb3IgJ3VybCNpZCcgZm9ybS5cbiAgICAgKi9cbiAgICBnZXRFbGVtZW50KHVybDogc3RyaW5nKTogRWxlbWVudCB8IG51bGw7XG4gIH1cblxuICBleHBvcnQgaW50ZXJmYWNlIFByZWRpY2F0ZSB7XG4gICAgcmVhZG9ubHkgZm46IChwMTogTm9kZSkgPT4gYm9vbGVhbjtcblxuICAgIGNoZWNrKG5vZGU6IE5vZGUpOiBib29sZWFuO1xuICAgIHdpdGhBdHRyaWJ1dGUobmFtZTogc3RyaW5nLCB2YWx1ZTogc3RyaW5nKTogUHJlZGljYXRlO1xuICAgIHdpdGhDaGlsZChuYW1lOiBzdHJpbmcsIG9wdF9jaGlsZFByZWRpY2F0ZT86IFByZWRpY2F0ZSk6IFByZWRpY2F0ZTtcbiAgfVxuXG4gIGV4cG9ydCBpbnRlcmZhY2UgTm9kZUxpc3Qge1xuICAgIHJlYWRvbmx5IG5vZGVzOiBOb2RlW107XG5cbiAgICBhc0FycmF5KCk6IE5vZGVbXTtcbiAgICBzaXplKCk6IG51bWJlcjtcbiAgICAvKipcbiAgICAgKiBGaWx0ZXIgd2l0aCBwcmVkaWNhdGVcbiAgICAgKi9cbiAgICBwcmVkaWNhdGUocHI6IFByZWRpY2F0ZSk6IE5vZGVMaXN0O1xuICAgIGZvckVhY2hOb2RlKGZuOiAocDE6IE5vZGUsIHAyOiAocDE6IE5vZGUpID0+IHZvaWQpID0+IHZvaWQpOiBOb2RlTGlzdDtcbiAgICBmb3JFYWNoPFQ+KGZuOiAocDE6IE5vZGUpID0+IFQpOiBUW107XG4gICAgZm9yRWFjaE5vbk51bGw8VD4oZm46IChwMTogTm9kZSkgPT4gVCk6IFRbXTtcbiAgICBjaGlsZCh0YWc6IHN0cmluZyk6IE5vZGVMaXN0O1xuICAgIGNoaWxkRWxlbWVudHMoKTogTm9kZUxpc3Q7XG4gICAgYXR0cmlidXRlKG5hbWU6IHN0cmluZyk6IChzdHJpbmcgfCBudWxsKVtdO1xuICAgIHRleHRDb250ZW50KCk6IChzdHJpbmcgfCBudWxsKVtdO1xuICB9XG5cbiAgZXhwb3J0IHR5cGUgWE1MRG9jU3RvcmUgPSBOZXQuUmVzb3VyY2VTdG9yZTxYTUxEb2NIb2xkZXI+O1xufVxuIiwiLyoqXG4gKiBDb3B5cmlnaHQgMjAxNiBUcmltLW1hcmtzIEluYy5cbiAqIENvcHlyaWdodCAyMDE5IFZpdmxpb3N0eWxlIEZvdW5kYXRpb25cbiAqXG4gKiBWaXZsaW9zdHlsZS5qcyBpcyBmcmVlIHNvZnR3YXJlOiB5b3UgY2FuIHJlZGlzdHJpYnV0ZSBpdCBhbmQvb3IgbW9kaWZ5XG4gKiBpdCB1bmRlciB0aGUgdGVybXMgb2YgdGhlIEdOVSBBZmZlcm8gR2VuZXJhbCBQdWJsaWMgTGljZW5zZSBhcyBwdWJsaXNoZWQgYnlcbiAqIHRoZSBGcmVlIFNvZnR3YXJlIEZvdW5kYXRpb24sIGVpdGhlciB2ZXJzaW9uIDMgb2YgdGhlIExpY2Vuc2UsIG9yXG4gKiAoYXQgeW91ciBvcHRpb24pIGFueSBsYXRlciB2ZXJzaW9uLlxuICpcbiAqIFZpdmxpb3N0eWxlLmpzIGlzIGRpc3RyaWJ1dGVkIGluIHRoZSBob3BlIHRoYXQgaXQgd2lsbCBiZSB1c2VmdWwsXG4gKiBidXQgV0lUSE9VVCBBTlkgV0FSUkFOVFk7IHdpdGhvdXQgZXZlbiB0aGUgaW1wbGllZCB3YXJyYW50eSBvZlxuICogTUVSQ0hBTlRBQklMSVRZIG9yIEZJVE5FU1MgRk9SIEEgUEFSVElDVUxBUiBQVVJQT1NFLiAgU2VlIHRoZVxuICogR05VIEFmZmVybyBHZW5lcmFsIFB1YmxpYyBMaWNlbnNlIGZvciBtb3JlIGRldGFpbHMuXG4gKlxuICogWW91IHNob3VsZCBoYXZlIHJlY2VpdmVkIGEgY29weSBvZiB0aGUgR05VIEFmZmVybyBHZW5lcmFsIFB1YmxpYyBMaWNlbnNlXG4gKiBhbG9uZyB3aXRoIFZpdmxpb3N0eWxlLmpzLiAgSWYgbm90LCBzZWUgPGh0dHA6Ly93d3cuZ251Lm9yZy9saWNlbnNlcy8+LlxuICpcbiAqIEBmaWxlb3ZlcnZpZXcgRGlmZiB1dGlsaXR5XG4gKi9cblxuaW1wb3J0IGZhc3RkaWZmIGZyb20gXCJmYXN0LWRpZmZcIjtcblxuZXhwb3J0IHR5cGUgQ2hhbmdlID0gKG51bWJlciB8IHN0cmluZylbXTtcblxuZXhwb3J0IGZ1bmN0aW9uIGRpZmZDaGFycyhvcmlnaW5hbFRleHQ6IHN0cmluZywgbmV3VGV4dDogc3RyaW5nKTogQ2hhbmdlW10ge1xuICByZXR1cm4gZmFzdGRpZmYob3JpZ2luYWxUZXh0LCBuZXdUZXh0LCAwKTtcbn1cblxuLyoqXG4gKiBAcmV0dXJucyBzdHJpbmdcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHJlc3RvcmVPcmlnaW5hbFRleHQoY2hhbmdlczogQ2hhbmdlW10pOiBhbnkge1xuICByZXR1cm4gY2hhbmdlcy5yZWR1Y2UoKHJlc3VsdCwgaXRlbSkgPT4ge1xuICAgIGlmIChpdGVtWzBdID09PSBmYXN0ZGlmZi5JTlNFUlQpIHtcbiAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfVxuICAgIHJldHVybiByZXN1bHQgKyBpdGVtWzFdO1xuICB9LCBcIlwiKTtcbn1cblxuLyoqXG4gKiBAcmV0dXJucyBzdHJpbmdcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHJlc3RvcmVOZXdUZXh0KGNoYW5nZXM6IENoYW5nZVtdKTogYW55IHtcbiAgcmV0dXJuIGNoYW5nZXMucmVkdWNlKChyZXN1bHQsIGl0ZW0pID0+IHtcbiAgICBpZiAoaXRlbVswXSA9PT0gZmFzdGRpZmYuREVMRVRFKSB7XG4gICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH1cbiAgICByZXR1cm4gcmVzdWx0ICsgaXRlbVsxXTtcbiAgfSwgXCJcIik7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiByZXNvbHZlTmV3SW5kZXgoY2hhbmdlczogQ2hhbmdlW10sIG9sZEluZGV4OiBudW1iZXIpOiBudW1iZXIge1xuICByZXR1cm4gcmVzb2x2ZUluZGV4KGNoYW5nZXMsIG9sZEluZGV4LCAxKTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHJlc29sdmVPcmlnaW5hbEluZGV4KFxuICBjaGFuZ2VzOiBDaGFuZ2VbXSxcbiAgbmV3SW5kZXg6IG51bWJlcixcbik6IG51bWJlciB7XG4gIHJldHVybiByZXNvbHZlSW5kZXgoY2hhbmdlcywgbmV3SW5kZXgsIC0xKTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHJlc29sdmVJbmRleChcbiAgY2hhbmdlczogQ2hhbmdlW10sXG4gIGluZGV4OiBudW1iZXIsXG4gIGNvZWY6IG51bWJlcixcbik6IG51bWJlciB7XG4gIGxldCBkaWZmID0gMDtcbiAgbGV0IGN1cnJlbnQgPSAwO1xuICBjaGFuZ2VzLnNvbWUoKGNoYW5nZSkgPT4ge1xuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgKGNoYW5nZVsxXSBhcyBzdHJpbmcpLmxlbmd0aDsgaSsrKSB7XG4gICAgICBzd2l0Y2ggKChjaGFuZ2VbMF0gYXMgbnVtYmVyKSAqIGNvZWYpIHtcbiAgICAgICAgY2FzZSBmYXN0ZGlmZi5JTlNFUlQ6XG4gICAgICAgICAgZGlmZisrO1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICBjYXNlIGZhc3RkaWZmLkRFTEVURTpcbiAgICAgICAgICBkaWZmLS07XG4gICAgICAgICAgY3VycmVudCsrO1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICBjYXNlIGZhc3RkaWZmLkVRVUFMOlxuICAgICAgICAgIGN1cnJlbnQrKztcbiAgICAgICAgICBicmVhaztcbiAgICAgIH1cbiAgICAgIGlmIChjdXJyZW50ID4gaW5kZXgpIHtcbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiBmYWxzZTtcbiAgfSk7XG4gIHJldHVybiBNYXRoLm1heChNYXRoLm1pbihpbmRleCwgY3VycmVudCAtIDEpICsgZGlmZiwgMCk7XG59XG4iLCIvKipcbiAqIENvcHlyaWdodCAyMDE5IFZpdmxpb3N0eWxlIEZvdW5kYXRpb25cbiAqXG4gKiBWaXZsaW9zdHlsZS5qcyBpcyBmcmVlIHNvZnR3YXJlOiB5b3UgY2FuIHJlZGlzdHJpYnV0ZSBpdCBhbmQvb3IgbW9kaWZ5XG4gKiBpdCB1bmRlciB0aGUgdGVybXMgb2YgdGhlIEdOVSBBZmZlcm8gR2VuZXJhbCBQdWJsaWMgTGljZW5zZSBhcyBwdWJsaXNoZWQgYnlcbiAqIHRoZSBGcmVlIFNvZnR3YXJlIEZvdW5kYXRpb24sIGVpdGhlciB2ZXJzaW9uIDMgb2YgdGhlIExpY2Vuc2UsIG9yXG4gKiAoYXQgeW91ciBvcHRpb24pIGFueSBsYXRlciB2ZXJzaW9uLlxuICpcbiAqIFZpdmxpb3N0eWxlLmpzIGlzIGRpc3RyaWJ1dGVkIGluIHRoZSBob3BlIHRoYXQgaXQgd2lsbCBiZSB1c2VmdWwsXG4gKiBidXQgV0lUSE9VVCBBTlkgV0FSUkFOVFk7IHdpdGhvdXQgZXZlbiB0aGUgaW1wbGllZCB3YXJyYW50eSBvZlxuICogTUVSQ0hBTlRBQklMSVRZIG9yIEZJVE5FU1MgRk9SIEEgUEFSVElDVUxBUiBQVVJQT1NFLiAgU2VlIHRoZVxuICogR05VIEFmZmVybyBHZW5lcmFsIFB1YmxpYyBMaWNlbnNlIGZvciBtb3JlIGRldGFpbHMuXG4gKlxuICogWW91IHNob3VsZCBoYXZlIHJlY2VpdmVkIGEgY29weSBvZiB0aGUgR05VIEFmZmVybyBHZW5lcmFsIFB1YmxpYyBMaWNlbnNlXG4gKiBhbG9uZyB3aXRoIFZpdmxpb3N0eWxlLmpzLiAgSWYgbm90LCBzZWUgPGh0dHA6Ly93d3cuZ251Lm9yZy9saWNlbnNlcy8+LlxuICpcbiAqIEBmaWxlb3ZlcnZpZXcgUHNldWRvRWxlbWVudCAtIENTUyBwc2V1ZG8gZWxlbWVudHMuXG4gKi9cbmltcG9ydCAqIGFzIEJhc2UgZnJvbSBcIi4vYmFzZVwiO1xuaW1wb3J0ICogYXMgQ3NzIGZyb20gXCIuL2Nzc1wiO1xuaW1wb3J0ICogYXMgQ3NzQ2FzY2FkZSBmcm9tIFwiLi9jc3MtY2FzY2FkZVwiO1xuaW1wb3J0ICogYXMgQ3NzU3R5bGVyIGZyb20gXCIuL2Nzcy1zdHlsZXJcIjtcbmltcG9ydCAqIGFzIEV4cHJzIGZyb20gXCIuL2V4cHJzXCI7XG5pbXBvcnQgKiBhcyBWdHJlZSBmcm9tIFwiLi92dHJlZVwiO1xuaW1wb3J0IHsgUHNldWRvRWxlbWVudCB9IGZyb20gXCIuL3R5cGVzXCI7XG5cbmV4cG9ydCBjb25zdCBkb2N1bWVudCA9IG5ldyBET01QYXJzZXIoKS5wYXJzZUZyb21TdHJpbmcoXG4gIGA8cm9vdCB4bWxucz1cIiR7QmFzZS5OUy5TSEFET1d9XCIvPmAsXG4gIFwidGV4dC94bWxcIixcbik7XG5cbi8qKlxuICogUHNldWRvZWxlbWVudCBuYW1lcyBpbiB0aGUgb3JkZXIgdGhleSBzaG91bGQgYmUgaW5zZXJ0ZWQgaW4gdGhlIHNoYWRvdyBET00sXG4gKiBlbXB0eSBzdHJpbmcgaXMgdGhlIHBsYWNlIHdoZXJlIHRoZSBlbGVtZW50J3MgRE9NIGNoaWxkcmVuIGFyZSBwcm9jZXNzZWQuXG4gKi9cbmV4cG9ydCBjb25zdCBwc2V1ZG9OYW1lcyA9IFtcbiAgXCJmb290bm90ZS1tYXJrZXJcIixcbiAgXCJmaXJzdC01LWxpbmVzXCIsXG4gIFwiZmlyc3QtNC1saW5lc1wiLFxuICBcImZpcnN0LTMtbGluZXNcIixcbiAgXCJmaXJzdC0yLWxpbmVzXCIsXG4gIFwiZmlyc3QtbGluZVwiLFxuICBcImZpcnN0LWxldHRlclwiLFxuICBcImJlZm9yZVwiLFxuICBcIlwiLFxuICAvKiBjb250ZW50ICovXG4gIFwiYWZ0ZXJcIixcbl07XG5cbmV4cG9ydCBjb25zdCBQU0VVRE9fQVRUUiA9IFwiZGF0YS1hZGFwdC1wc2V1ZG9cIjtcblxuZXhwb3J0IGZ1bmN0aW9uIGdldFBzZXVkb05hbWUoZWxlbWVudDogRWxlbWVudCk6IHN0cmluZyB7XG4gIHJldHVybiBlbGVtZW50LmdldEF0dHJpYnV0ZShQU0VVRE9fQVRUUikgfHwgXCJcIjtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHNldFBzZXVkb05hbWUoZWxlbWVudDogRWxlbWVudCwgbmFtZTogc3RyaW5nKTogdm9pZCB7XG4gIGVsZW1lbnQuc2V0QXR0cmlidXRlKFBTRVVET19BVFRSLCBuYW1lKTtcbn1cblxuZXhwb3J0IGNsYXNzIFBzZXVkb2VsZW1lbnRTdHlsZXIgaW1wbGVtZW50cyBQc2V1ZG9FbGVtZW50LlBzZXVkb2VsZW1lbnRTdHlsZXIge1xuICBjb250ZW50UHJvY2Vzc2VkOiB7IFtrZXk6IHN0cmluZ106IGJvb2xlYW4gfSA9IHt9O1xuXG4gIC8vIGFmdGVyIGNvbnRlbnQ6IHVwZGF0ZSBzdHlsZVxuXG4gIGNvbnN0cnVjdG9yKFxuICAgIHB1YmxpYyByZWFkb25seSBlbGVtZW50OiBFbGVtZW50LFxuICAgIHB1YmxpYyBzdHlsZTogQ3NzQ2FzY2FkZS5FbGVtZW50U3R5bGUsXG4gICAgcHVibGljIHN0eWxlcjogQ3NzU3R5bGVyLkFic3RyYWN0U3R5bGVyLFxuICAgIHB1YmxpYyByZWFkb25seSBjb250ZXh0OiBFeHBycy5Db250ZXh0LFxuICAgIHB1YmxpYyByZWFkb25seSBleHByQ29udGVudExpc3RlbmVyOiBWdHJlZS5FeHByQ29udGVudExpc3RlbmVyLFxuICApIHt9XG5cbiAgLyoqXG4gICAqIEBvdmVycmlkZVxuICAgKi9cbiAgZ2V0U3R5bGUoZWxlbWVudDogRWxlbWVudCwgZGVlcDogYm9vbGVhbik6IENzc0Nhc2NhZGUuRWxlbWVudFN0eWxlIHtcbiAgICBjb25zdCBwc2V1ZG9OYW1lID0gZ2V0UHNldWRvTmFtZShlbGVtZW50KTtcbiAgICBpZiAodGhpcy5zdHlsZXIgJiYgcHNldWRvTmFtZSAmJiBwc2V1ZG9OYW1lLm1hdGNoKC9hZnRlciQvKSkge1xuICAgICAgdGhpcy5zdHlsZSA9IHRoaXMuc3R5bGVyLmdldFN0eWxlKHRoaXMuZWxlbWVudCwgdHJ1ZSk7XG4gICAgICB0aGlzLnN0eWxlciA9IG51bGw7XG4gICAgfVxuICAgIGNvbnN0IHBzZXVkb01hcCA9IENzc0Nhc2NhZGUuZ2V0U3R5bGVNYXAodGhpcy5zdHlsZSwgXCJfcHNldWRvc1wiKTtcbiAgICBjb25zdCBzdHlsZSA9IHBzZXVkb01hcFtwc2V1ZG9OYW1lXSB8fCAoe30gYXMgQ3NzQ2FzY2FkZS5FbGVtZW50U3R5bGUpO1xuICAgIGlmIChwc2V1ZG9OYW1lLm1hdGNoKC9eZmlyc3QtLykgJiYgIXN0eWxlW1wieC1maXJzdC1wc2V1ZG9cIl0pIHtcbiAgICAgIGxldCBuZXN0ID0gMTtcbiAgICAgIGxldCByOiBSZWdFeHBNYXRjaEFycmF5O1xuICAgICAgaWYgKHBzZXVkb05hbWUgPT0gXCJmaXJzdC1sZXR0ZXJcIikge1xuICAgICAgICBuZXN0ID0gMDtcbiAgICAgIH0gZWxzZSBpZiAoKHIgPSBwc2V1ZG9OYW1lLm1hdGNoKC9eZmlyc3QtKFswLTldKyktbGluZXMkLykpICE9IG51bGwpIHtcbiAgICAgICAgbmVzdCA9IChyWzFdIGFzIGFueSkgLSAwO1xuICAgICAgfVxuICAgICAgc3R5bGVbXCJ4LWZpcnN0LXBzZXVkb1wiXSA9IG5ldyBDc3NDYXNjYWRlLkNhc2NhZGVWYWx1ZShcbiAgICAgICAgbmV3IENzcy5JbnQobmVzdCksXG4gICAgICAgIDAsXG4gICAgICApO1xuICAgIH1cbiAgICByZXR1cm4gc3R5bGU7XG4gIH1cblxuICAvKipcbiAgICogQG92ZXJyaWRlXG4gICAqL1xuICBwcm9jZXNzQ29udGVudChlbGVtZW50OiBFbGVtZW50LCBzdHlsZXM6IHsgW2tleTogc3RyaW5nXTogQ3NzLlZhbCB9KSB7XG4gICAgY29uc3QgcHNldWRvTmFtZSA9IGdldFBzZXVkb05hbWUoZWxlbWVudCk7XG4gICAgaWYgKCF0aGlzLmNvbnRlbnRQcm9jZXNzZWRbcHNldWRvTmFtZV0pIHtcbiAgICAgIHRoaXMuY29udGVudFByb2Nlc3NlZFtwc2V1ZG9OYW1lXSA9IHRydWU7XG4gICAgICBjb25zdCBjb250ZW50VmFsID0gc3R5bGVzW1wiY29udGVudFwiXTtcbiAgICAgIGlmIChjb250ZW50VmFsKSB7XG4gICAgICAgIGlmIChWdHJlZS5ub25Ucml2aWFsQ29udGVudChjb250ZW50VmFsKSkge1xuICAgICAgICAgIGNvbnRlbnRWYWwudmlzaXQoXG4gICAgICAgICAgICBuZXcgVnRyZWUuQ29udGVudFByb3BlcnR5SGFuZGxlcihcbiAgICAgICAgICAgICAgZWxlbWVudCxcbiAgICAgICAgICAgICAgdGhpcy5jb250ZXh0LFxuICAgICAgICAgICAgICBjb250ZW50VmFsLFxuICAgICAgICAgICAgICB0aGlzLmV4cHJDb250ZW50TGlzdGVuZXIsXG4gICAgICAgICAgICApLFxuICAgICAgICAgICk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gIH1cbn1cbiIsIi8qKlxuICogQ29weXJpZ2h0IDIwMTMgR29vZ2xlLCBJbmMuXG4gKiBDb3B5cmlnaHQgMjAxNSBUcmltLW1hcmtzIEluYy5cbiAqIENvcHlyaWdodCAyMDE5IFZpdmxpb3N0eWxlIEZvdW5kYXRpb25cbiAqXG4gKiBWaXZsaW9zdHlsZS5qcyBpcyBmcmVlIHNvZnR3YXJlOiB5b3UgY2FuIHJlZGlzdHJpYnV0ZSBpdCBhbmQvb3IgbW9kaWZ5XG4gKiBpdCB1bmRlciB0aGUgdGVybXMgb2YgdGhlIEdOVSBBZmZlcm8gR2VuZXJhbCBQdWJsaWMgTGljZW5zZSBhcyBwdWJsaXNoZWQgYnlcbiAqIHRoZSBGcmVlIFNvZnR3YXJlIEZvdW5kYXRpb24sIGVpdGhlciB2ZXJzaW9uIDMgb2YgdGhlIExpY2Vuc2UsIG9yXG4gKiAoYXQgeW91ciBvcHRpb24pIGFueSBsYXRlciB2ZXJzaW9uLlxuICpcbiAqIFZpdmxpb3N0eWxlLmpzIGlzIGRpc3RyaWJ1dGVkIGluIHRoZSBob3BlIHRoYXQgaXQgd2lsbCBiZSB1c2VmdWwsXG4gKiBidXQgV0lUSE9VVCBBTlkgV0FSUkFOVFk7IHdpdGhvdXQgZXZlbiB0aGUgaW1wbGllZCB3YXJyYW50eSBvZlxuICogTUVSQ0hBTlRBQklMSVRZIG9yIEZJVE5FU1MgRk9SIEEgUEFSVElDVUxBUiBQVVJQT1NFLiAgU2VlIHRoZVxuICogR05VIEFmZmVybyBHZW5lcmFsIFB1YmxpYyBMaWNlbnNlIGZvciBtb3JlIGRldGFpbHMuXG4gKlxuICogWW91IHNob3VsZCBoYXZlIHJlY2VpdmVkIGEgY29weSBvZiB0aGUgR05VIEFmZmVybyBHZW5lcmFsIFB1YmxpYyBMaWNlbnNlXG4gKiBhbG9uZyB3aXRoIFZpdmxpb3N0eWxlLmpzLiAgSWYgbm90LCBzZWUgPGh0dHA6Ly93d3cuZ251Lm9yZy9saWNlbnNlcy8+LlxuICpcbiAqIEBmaWxlb3ZlcnZpZXcgVnRyZWUgLSBCYXNpYyB2aWV3IHRyZWUgZGF0YSBzdHJ1Y3R1cmVzIGFuZCBzdXBwb3J0IHV0aWxpdGllcy5cbiAqL1xuaW1wb3J0ICogYXMgQmFzZSBmcm9tIFwiLi9iYXNlXCI7XG5pbXBvcnQgKiBhcyBDb25zdGFudHMgZnJvbSBcIi4vY29uc3RhbnRzXCI7XG5pbXBvcnQgKiBhcyBDc3MgZnJvbSBcIi4vY3NzXCI7XG5pbXBvcnQgKiBhcyBDc3NQYXJzZXIgZnJvbSBcIi4vY3NzLXBhcnNlclwiO1xuaW1wb3J0ICogYXMgQ3NzUHJvcCBmcm9tIFwiLi9jc3MtcHJvcFwiO1xuaW1wb3J0ICogYXMgQ3NzVG9rZW5pemVyIGZyb20gXCIuL2Nzcy10b2tlbml6ZXJcIjtcbmltcG9ydCAqIGFzIERpZmYgZnJvbSBcIi4vZGlmZlwiO1xuaW1wb3J0ICogYXMgRXhwcnMgZnJvbSBcIi4vZXhwcnNcIjtcbmltcG9ydCAqIGFzIEdlb21ldHJ5VXRpbCBmcm9tIFwiLi9nZW9tZXRyeS11dGlsXCI7XG5pbXBvcnQgKiBhcyBUYXNrVXRpbCBmcm9tIFwiLi90YXNrLXV0aWxcIjtcbmltcG9ydCB7IGFzc2VydCB9IGZyb20gXCIuL2Fzc2VydHNcIjtcbmltcG9ydCB7IFBhZ2VGbG9hdHMsIFNlbGVjdG9ycywgVnRyZWUsIFhtbERvYyB9IGZyb20gXCIuL3R5cGVzXCI7XG5pbXBvcnQgeyBQc2V1ZG9lbGVtZW50U3R5bGVyIH0gZnJvbSBcIi4vcHNldWRvLWVsZW1lbnRcIjtcblxuZXhwb3J0IGNvbnN0IGRlbGF5ZWRQcm9wcyA9IHtcbiAgdHJhbnNmb3JtOiB0cnVlLFxuICBcInRyYW5zZm9ybS1vcmlnaW5cIjogdHJ1ZSxcbn07XG5cbmV4cG9ydCBjb25zdCBkZWxheWVkUHJvcHNJZlJlbGF0aXZlUG9zaXRpb25lZCA9IHtcbiAgdG9wOiB0cnVlLFxuICBib3R0b206IHRydWUsXG4gIGxlZnQ6IHRydWUsXG4gIHJpZ2h0OiB0cnVlLFxufTtcblxuZXhwb3J0IGNsYXNzIERlbGF5ZWRJdGVtIHtcbiAgY29uc3RydWN0b3IoXG4gICAgcHVibGljIHRhcmdldDogRWxlbWVudCxcbiAgICBwdWJsaWMgbmFtZTogc3RyaW5nLFxuICAgIHB1YmxpYyB2YWx1ZTogQ3NzLlZhbCxcbiAgKSB7fVxufVxuXG5leHBvcnQgdHlwZSBQYWdlSHlwZXJsaW5rRXZlbnQgPSB7XG4gIHR5cGU6IHN0cmluZztcbiAgdGFyZ2V0O1xuICBjdXJyZW50VGFyZ2V0O1xuICBhbmNob3JFbGVtZW50OiBFbGVtZW50O1xuICBocmVmOiBzdHJpbmc7XG59O1xuXG5leHBvcnQgdHlwZSBUcmlnZ2VyID0ge1xuICBvYnNlcnZlcjogc3RyaW5nO1xuICBldmVudDogc3RyaW5nO1xuICBhY3Rpb246IHN0cmluZztcbiAgcmVmOiBzdHJpbmc7XG59O1xuXG5leHBvcnQgY29uc3QgYWN0aW9ucyA9IHtcbiAgc2hvdzogZnVuY3Rpb24gKG9iaikge1xuICAgIG9iai5zdHlsZS52aXNpYmlsaXR5ID0gXCJ2aXNpYmxlXCI7XG4gIH0sXG4gIGhpZGU6IGZ1bmN0aW9uIChvYmopIHtcbiAgICBvYmouc3R5bGUudmlzaWJpbGl0eSA9IFwiaGlkZGVuXCI7XG4gIH0sXG4gIHBsYXk6IGZ1bmN0aW9uIChvYmopIHtcbiAgICBvYmouY3VycmVudFRpbWUgPSAwO1xuICAgIG9iai5wbGF5KCk7XG4gIH0sXG4gIHBhdXNlOiBmdW5jdGlvbiAob2JqKSB7XG4gICAgb2JqLnBhdXNlKCk7XG4gIH0sXG4gIHJlc3VtZTogZnVuY3Rpb24gKG9iaikge1xuICAgIG9iai5wbGF5KCk7XG4gIH0sXG4gIG11dGU6IGZ1bmN0aW9uIChvYmopIHtcbiAgICBvYmoubXV0ZWQgPSB0cnVlO1xuICB9LFxuICB1bm11dGU6IGZ1bmN0aW9uIChvYmopIHtcbiAgICBvYmoubXV0ZWQgPSBmYWxzZTtcbiAgfSxcbn07XG5cbmV4cG9ydCBmdW5jdGlvbiBtYWtlTGlzdGVuZXIoXG4gIHJlZnM6IEVsZW1lbnRbXSxcbiAgYWN0aW9uOiBzdHJpbmcsXG4pOiBFdmVudExpc3RlbmVyIHwgbnVsbCB7XG4gIGNvbnN0IGFjdGlvbkZuID0gYWN0aW9uc1thY3Rpb25dO1xuICBpZiAoYWN0aW9uRm4pIHtcbiAgICByZXR1cm4gKCkgPT4ge1xuICAgICAgZm9yIChsZXQgayA9IDA7IGsgPCByZWZzLmxlbmd0aDsgaysrKSB7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgYWN0aW9uRm4ocmVmc1trXSk7XG4gICAgICAgIH0gY2F0Y2ggKGVycikge31cbiAgICAgIH1cbiAgICB9O1xuICB9XG4gIHJldHVybiBudWxsO1xufVxuXG5leHBvcnQgY2xhc3MgUGFnZSBleHRlbmRzIEJhc2UuU2ltcGxlRXZlbnRUYXJnZXQge1xuICBwcml2YXRlIHN0YXRpYyBBVVRPX1BBR0VfV0lEVEhfQVRUUklCVVRFOiBzdHJpbmcgPVxuICAgIFwiZGF0YS12aXZsaW9zdHlsZS1hdXRvLXBhZ2Utd2lkdGhcIjtcbiAgcHJpdmF0ZSBzdGF0aWMgQVVUT19QQUdFX0hFSUdIVF9BVFRSSUJVVEU6IHN0cmluZyA9XG4gICAgXCJkYXRhLXZpdmxpb3N0eWxlLWF1dG8tcGFnZS1oZWlnaHRcIjtcbiAgcGFnZUFyZWFFbGVtZW50OiBIVE1MRWxlbWVudCB8IG51bGwgPSBudWxsO1xuICBkZWxheWVkSXRlbXM6IERlbGF5ZWRJdGVtW10gPSBbXTtcbiAgaHJlZkhhbmRsZXI6IChlOiBFdmVudCkgPT4gdm9pZDtcbiAgZWxlbWVudHNCeUlkOiB7IFtrZXk6IHN0cmluZ106IEVsZW1lbnRbXSB9ID0ge307XG4gIGRpbWVuc2lvbnM6IHsgd2lkdGg6IG51bWJlcjsgaGVpZ2h0OiBudW1iZXIgfSA9IHsgd2lkdGg6IDAsIGhlaWdodDogMCB9O1xuICBpc0ZpcnN0UGFnZTogYm9vbGVhbiA9IGZhbHNlO1xuICBpc0xhc3RQYWdlOiBib29sZWFuID0gZmFsc2U7XG4gIGlzQXV0b1BhZ2VXaWR0aDogYm9vbGVhbiA9IHRydWU7XG4gIGlzQXV0b1BhZ2VIZWlnaHQ6IGJvb2xlYW4gPSB0cnVlO1xuICBzcGluZUluZGV4OiBudW1iZXIgPSAwO1xuICBwb3NpdGlvbjogTGF5b3V0UG9zaXRpb24gPSBudWxsO1xuICBvZmZzZXQ6IG51bWJlciA9IC0xO1xuICBzaWRlOiBDb25zdGFudHMuUGFnZVNpZGUgfCBudWxsID0gbnVsbDtcbiAgZmV0Y2hlcnM6IFRhc2tVdGlsLkZldGNoZXI8e30+W10gPSBbXTtcbiAgbWFyZ2luQm94ZXM6IHtcbiAgICB0b3A6IHsgW2tleTogc3RyaW5nXTogQ29udGFpbmVyIH07XG4gICAgYm90dG9tOiB7IFtrZXk6IHN0cmluZ106IENvbnRhaW5lciB9O1xuICAgIGxlZnQ6IHsgW2tleTogc3RyaW5nXTogQ29udGFpbmVyIH07XG4gICAgcmlnaHQ6IHsgW2tleTogc3RyaW5nXTogQ29udGFpbmVyIH07XG4gIH0gPSB7IHRvcDoge30sIGJvdHRvbToge30sIGxlZnQ6IHt9LCByaWdodDoge30gfTtcblxuICBjb25zdHJ1Y3RvcihcbiAgICBwdWJsaWMgcmVhZG9ubHkgY29udGFpbmVyOiBIVE1MRWxlbWVudCxcbiAgICBwdWJsaWMgcmVhZG9ubHkgYmxlZWRCb3g6IEhUTUxFbGVtZW50LFxuICApIHtcbiAgICBzdXBlcigpO1xuICAgIHRoaXMuaHJlZkhhbmRsZXIgPSAoZTogRXZlbnQpID0+IHtcbiAgICAgIGNvbnN0IGFuY2hvckVsZW1lbnQgPSBlLmN1cnJlbnRUYXJnZXQgYXMgRWxlbWVudDtcbiAgICAgIGNvbnN0IGhyZWYgPVxuICAgICAgICBhbmNob3JFbGVtZW50LmdldEF0dHJpYnV0ZShcImhyZWZcIikgfHxcbiAgICAgICAgYW5jaG9yRWxlbWVudC5nZXRBdHRyaWJ1dGVOUyhCYXNlLk5TLlhMSU5LLCBcImhyZWZcIik7XG4gICAgICBpZiAoaHJlZikge1xuICAgICAgICBjb25zdCBldnQgPSB7XG4gICAgICAgICAgdHlwZTogXCJoeXBlcmxpbmtcIixcbiAgICAgICAgICB0YXJnZXQ6IG51bGwsXG4gICAgICAgICAgY3VycmVudFRhcmdldDogbnVsbCxcbiAgICAgICAgICBhbmNob3JFbGVtZW50LFxuICAgICAgICAgIGhyZWYsXG4gICAgICAgICAgcHJldmVudERlZmF1bHQoKSB7XG4gICAgICAgICAgICBlLnByZXZlbnREZWZhdWx0KCk7XG4gICAgICAgICAgfSxcbiAgICAgICAgfTtcbiAgICAgICAgdGhpcy5kaXNwYXRjaEV2ZW50KGV2dCk7XG4gICAgICB9XG4gICAgfTtcbiAgfVxuXG4gIHNldEF1dG9QYWdlV2lkdGgoaXNBdXRvOiBib29sZWFuKSB7XG4gICAgdGhpcy5pc0F1dG9QYWdlV2lkdGggPSBpc0F1dG87XG4gICAgaWYgKGlzQXV0bykge1xuICAgICAgdGhpcy5jb250YWluZXIuc2V0QXR0cmlidXRlKFBhZ2UuQVVUT19QQUdFX1dJRFRIX0FUVFJJQlVURSwgXCJ0cnVlXCIpO1xuICAgIH0gZWxzZSB7XG4gICAgICB0aGlzLmNvbnRhaW5lci5yZW1vdmVBdHRyaWJ1dGUoUGFnZS5BVVRPX1BBR0VfV0lEVEhfQVRUUklCVVRFKTtcbiAgICB9XG4gIH1cblxuICBzZXRBdXRvUGFnZUhlaWdodChpc0F1dG86IGJvb2xlYW4pIHtcbiAgICB0aGlzLmlzQXV0b1BhZ2VIZWlnaHQgPSBpc0F1dG87XG4gICAgaWYgKGlzQXV0bykge1xuICAgICAgdGhpcy5jb250YWluZXIuc2V0QXR0cmlidXRlKFBhZ2UuQVVUT19QQUdFX0hFSUdIVF9BVFRSSUJVVEUsIFwidHJ1ZVwiKTtcbiAgICB9IGVsc2Uge1xuICAgICAgdGhpcy5jb250YWluZXIucmVtb3ZlQXR0cmlidXRlKFBhZ2UuQVVUT19QQUdFX0hFSUdIVF9BVFRSSUJVVEUpO1xuICAgIH1cbiAgfVxuXG4gIHJlZ2lzdGVyRWxlbWVudFdpdGhJZChlbGVtZW50OiBFbGVtZW50LCBpZDogc3RyaW5nKSB7XG4gICAgY29uc3QgYXJyID0gdGhpcy5lbGVtZW50c0J5SWRbaWRdO1xuICAgIGlmICghYXJyKSB7XG4gICAgICB0aGlzLmVsZW1lbnRzQnlJZFtpZF0gPSBbZWxlbWVudF07XG4gICAgfSBlbHNlIHtcbiAgICAgIGFyci5wdXNoKGVsZW1lbnQpO1xuICAgIH1cbiAgfVxuXG4gIGZpbmlzaCh0cmlnZ2VyczogVHJpZ2dlcltdLCBjbGllbnRMYXlvdXQ6IENsaWVudExheW91dCk6IHZvaWQge1xuICAgIC8vIFJlbW92ZSBJRCBvZiBlbGVtZW50cyB3aGljaCBldmVudHVhbGx5IGRpZCBub3QgZml0IGluIHRoZSBwYWdlXG4gICAgLy8gKFNvbWUgbm9kZXMgbWF5IGhhdmUgYmVlbiByZW1vdmVkIGFmdGVyIHJlZ2lzdHJhdGlvbiBpZiB0aGV5IGRpZCBub3QgZml0XG4gICAgLy8gaW4gdGhlIHBhZ2UpXG4gICAgT2JqZWN0LmtleXModGhpcy5lbGVtZW50c0J5SWQpLmZvckVhY2goKGlkKSA9PiB7XG4gICAgICBjb25zdCBlbGVtcyA9IHRoaXMuZWxlbWVudHNCeUlkW2lkXTtcbiAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgZWxlbXMubGVuZ3RoOyApIHtcbiAgICAgICAgaWYgKHRoaXMuY29udGFpbmVyLmNvbnRhaW5zKGVsZW1zW2ldKSkge1xuICAgICAgICAgIGkrKztcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBlbGVtcy5zcGxpY2UoaSwgMSk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIGlmIChlbGVtcy5sZW5ndGggPT09IDApIHtcbiAgICAgICAgZGVsZXRlIHRoaXMuZWxlbWVudHNCeUlkW2lkXTtcbiAgICAgIH1cbiAgICB9KTtcbiAgICBjb25zdCBsaXN0ID0gdGhpcy5kZWxheWVkSXRlbXM7XG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCBsaXN0Lmxlbmd0aDsgaSsrKSB7XG4gICAgICBjb25zdCBpdGVtID0gbGlzdFtpXTtcbiAgICAgIGlmIChcbiAgICAgICAgaXRlbS50YXJnZXQgPT09IHRoaXMuY29udGFpbmVyICYmXG4gICAgICAgIGl0ZW0ubmFtZSA9PT0gXCJ0cmFuc2Zvcm1cIiAmJlxuICAgICAgICAhdGhpcy5pc0F1dG9QYWdlV2lkdGggJiZcbiAgICAgICAgIXRoaXMuaXNBdXRvUGFnZUhlaWdodFxuICAgICAgKSB7XG4gICAgICAgIC8vIFdoZW4gZml4ZWQgcGFnZSBzaXplIGlzIHNwZWNpZmllZCwgY2FuY2VsIHRoZSB0cmFuc2Zvcm0gcHJvcGVydHlcbiAgICAgICAgLy8gc2V0IGF0IE9QRlZpZXcubWFrZVBhZ2UoKSBmb3IgdGhlIHNwZWNpZmllZCB2aWV3cG9ydCBzaXplXG4gICAgICAgIC8vIChlLmcuIGA8bWV0YSBuYW1lPVwidmlld3BvcnRcIiBjb250ZW50PVwid2lkdGg9MTMwNywgaGVpZ2h0PTE5MjBcIi8+YClcbiAgICAgICAgLy8gdG8gYXZvaWQgd3JvbmcgcGFnZSByZXNpemluZy5cbiAgICAgICAgY29udGludWU7XG4gICAgICB9XG4gICAgICBCYXNlLnNldENTU1Byb3BlcnR5KGl0ZW0udGFyZ2V0LCBpdGVtLm5hbWUsIGl0ZW0udmFsdWUudG9TdHJpbmcoKSk7XG4gICAgfVxuXG4gICAgLy8gdXNlIHNpemUgb2YgdGhlIGNvbnRhaW5lciBvZiB0aGUgUGFnZU1hc3Rlckluc3RhbmNlXG4gICAgY29uc3QgcmVjdCA9IGNsaWVudExheW91dC5nZXRFbGVtZW50Q2xpZW50UmVjdCh0aGlzLmNvbnRhaW5lcik7XG4gICAgdGhpcy5kaW1lbnNpb25zLndpZHRoID0gcmVjdC53aWR0aDtcbiAgICB0aGlzLmRpbWVuc2lvbnMuaGVpZ2h0ID0gcmVjdC5oZWlnaHQ7XG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCB0cmlnZ2Vycy5sZW5ndGg7IGkrKykge1xuICAgICAgY29uc3QgdHJpZ2dlciA9IHRyaWdnZXJzW2ldO1xuICAgICAgY29uc3QgcmVmcyA9IHRoaXMuZWxlbWVudHNCeUlkW3RyaWdnZXIucmVmXTtcbiAgICAgIGNvbnN0IG9ic2VydmVycyA9IHRoaXMuZWxlbWVudHNCeUlkW3RyaWdnZXIub2JzZXJ2ZXJdO1xuICAgICAgaWYgKHJlZnMgJiYgb2JzZXJ2ZXJzKSB7XG4gICAgICAgIGNvbnN0IGxpc3RlbmVyID0gbWFrZUxpc3RlbmVyKHJlZnMsIHRyaWdnZXIuYWN0aW9uKTtcbiAgICAgICAgaWYgKGxpc3RlbmVyKSB7XG4gICAgICAgICAgZm9yIChsZXQgayA9IDA7IGsgPCBvYnNlcnZlcnMubGVuZ3RoOyBrKyspIHtcbiAgICAgICAgICAgIG9ic2VydmVyc1trXS5hZGRFdmVudExpc3RlbmVyKHRyaWdnZXIuZXZlbnQsIGxpc3RlbmVyLCBmYWxzZSk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgLyoqXG4gICAqIFpvb20gcGFnZS5cbiAgICogQHBhcmFtIHNjYWxlIEZhY3RvciB0byB3aGljaCB0aGUgcGFnZSB3aWxsIGJlIHNjYWxlZC5cbiAgICovXG4gIHpvb20oc2NhbGU6IG51bWJlcikge1xuICAgIEJhc2Uuc2V0Q1NTUHJvcGVydHkodGhpcy5jb250YWluZXIsIFwidHJhbnNmb3JtXCIsIGBzY2FsZSgke3NjYWxlfSlgKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBSZXR1cm5zIHRoZSBwYWdlIGFyZWEgZWxlbWVudC5cbiAgICovXG4gIGdldFBhZ2VBcmVhRWxlbWVudCgpOiBIVE1MRWxlbWVudCB7XG4gICAgcmV0dXJuIHRoaXMucGFnZUFyZWFFbGVtZW50IHx8IHRoaXMuY29udGFpbmVyO1xuICB9XG59XG5cbmV4cG9ydCB0eXBlIFNwcmVhZCA9IHtcbiAgbGVmdDogUGFnZTtcbiAgcmlnaHQ6IFBhZ2U7XG59O1xuXG4vKipcbiAqIE1hcmtzIGFuIGVsZW1lbnQgYXMgXCJzcGVjaWFsXCIuIEl0IHNob3VsZCBub3QgYmUgdXNlZCBpbiBiYm94IGNhbGN1bGF0aW9ucy5cbiAqL1xuZXhwb3J0IGNvbnN0IFNQRUNJQUxfQVRUUiA9IFwiZGF0YS1hZGFwdC1zcGVjXCI7XG5cbmV4cG9ydCBjb25zdCBXaGl0ZXNwYWNlID0gVnRyZWUuV2hpdGVzcGFjZTtcbmV4cG9ydCB0eXBlIFdoaXRlc3BhY2UgPSBWdHJlZS5XaGl0ZXNwYWNlOyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIG5vLXJlZGVjbGFyZVxuXG4vKipcbiAqIFJlc29sdmVzIFdoaXRlc3BhY2UgdmFsdWUgZnJvbSBhIHZhbHVlIG9mICd3aGl0ZS1zcGFjZScgcHJvcGVydHlcbiAqIEBwYXJhbSB3aGl0ZXNwYWNlIFRoZSB2YWx1ZSBvZiAnd2hpdGUtc3BhY2UnIHByb3BlcnR5XG4gKi9cbmV4cG9ydCBmdW5jdGlvbiB3aGl0ZXNwYWNlRnJvbVByb3BlcnR5VmFsdWUoXG4gIHdoaXRlc3BhY2U6IHN0cmluZyxcbik6IFdoaXRlc3BhY2UgfCBudWxsIHtcbiAgc3dpdGNoICh3aGl0ZXNwYWNlKSB7XG4gICAgY2FzZSBcIm5vcm1hbFwiOlxuICAgIGNhc2UgXCJub3dyYXBcIjpcbiAgICAgIHJldHVybiBXaGl0ZXNwYWNlLklHTk9SRTtcbiAgICBjYXNlIFwicHJlLWxpbmVcIjpcbiAgICAgIHJldHVybiBXaGl0ZXNwYWNlLk5FV0xJTkU7XG4gICAgY2FzZSBcInByZVwiOlxuICAgIGNhc2UgXCJwcmUtd3JhcFwiOlxuICAgICAgcmV0dXJuIFdoaXRlc3BhY2UuUFJFU0VSVkU7XG4gICAgZGVmYXVsdDpcbiAgICAgIHJldHVybiBudWxsO1xuICB9XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBjYW5JZ25vcmUobm9kZTogTm9kZSwgd2hpdGVzcGFjZTogV2hpdGVzcGFjZSk6IGJvb2xlYW4ge1xuICBpZiAobm9kZS5ub2RlVHlwZSA9PSAxKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG4gIGNvbnN0IHRleHQgPSBub2RlLnRleHRDb250ZW50O1xuICBzd2l0Y2ggKHdoaXRlc3BhY2UpIHtcbiAgICBjYXNlIFdoaXRlc3BhY2UuSUdOT1JFOlxuICAgICAgcmV0dXJuICEhdGV4dC5tYXRjaCgvXlxccyokLyk7XG4gICAgY2FzZSBXaGl0ZXNwYWNlLk5FV0xJTkU6XG4gICAgICByZXR1cm4gISF0ZXh0Lm1hdGNoKC9eWyBcXHRcXGZdKiQvKTtcbiAgICBjYXNlIFdoaXRlc3BhY2UuUFJFU0VSVkU6XG4gICAgICByZXR1cm4gdGV4dC5sZW5ndGggPT0gMDtcbiAgfVxuICB0aHJvdyBuZXcgRXJyb3IoYFVuZXhwZWN0ZWQgd2hpdGVzcGFjZTogJHt3aGl0ZXNwYWNlfWApO1xufVxuXG5leHBvcnQgY2xhc3MgRmxvdyB7XG4gIGZvcmNlZEJyZWFrT2Zmc2V0cyA9IFtdIGFzIG51bWJlcltdO1xuICBmb3JtYXR0aW5nQ29udGV4dDogRm9ybWF0dGluZ0NvbnRleHQgfCBudWxsID0gbnVsbDtcblxuICBjb25zdHJ1Y3RvcihcbiAgICBwdWJsaWMgcmVhZG9ubHkgZmxvd05hbWU6IHN0cmluZyxcbiAgICBwdWJsaWMgcmVhZG9ubHkgcGFyZW50Rmxvd05hbWU6IHN0cmluZyB8IG51bGwsXG4gICkge31cbn1cblxuZXhwb3J0IGNsYXNzIEZsb3dDaHVuayB7XG4gIHN0YXJ0UGFnZTogbnVtYmVyID0gLTE7XG5cbiAgY29uc3RydWN0b3IoXG4gICAgcHVibGljIGZsb3dOYW1lOiBzdHJpbmcsXG4gICAgcHVibGljIGVsZW1lbnQ6IEVsZW1lbnQsXG4gICAgcHVibGljIHN0YXJ0T2Zmc2V0OiBudW1iZXIsXG4gICAgcHVibGljIHByaW9yaXR5OiBudW1iZXIsXG4gICAgcHVibGljIGxpbmdlcjogbnVtYmVyLFxuICAgIHB1YmxpYyBleGNsdXNpdmU6IGJvb2xlYW4sXG4gICAgcHVibGljIHJlcGVhdGVkOiBib29sZWFuLFxuICAgIHB1YmxpYyBsYXN0OiBib29sZWFuLFxuICAgIHB1YmxpYyBicmVha0JlZm9yZTogc3RyaW5nIHwgbnVsbCxcbiAgKSB7fVxuXG4gIGlzQmV0dGVyKG90aGVyOiBGbG93Q2h1bmspOiBib29sZWFuIHtcbiAgICBpZiAoIXRoaXMuZXhjbHVzaXZlKSB7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICAgIGlmICghb3RoZXIuZXhjbHVzaXZlKSB7XG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG4gICAgaWYgKHRoaXMucHJpb3JpdHkgPiBvdGhlci5wcmlvcml0eSkge1xuICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuICAgIHJldHVybiB0aGlzLmxhc3Q7XG4gIH1cbn1cblxuZXhwb3J0IHR5cGUgQ2xpZW50UmVjdCA9IFZ0cmVlLkNsaWVudFJlY3Q7XG5cbmV4cG9ydCBmdW5jdGlvbiBjbGllbnRyZWN0SW5jcmVhc2luZ1RvcChcbiAgcjE6IENsaWVudFJlY3QsXG4gIHIyOiBDbGllbnRSZWN0LFxuKTogbnVtYmVyIHtcbiAgcmV0dXJuIHIxLnRvcCAtIHIyLnRvcDtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGNsaWVudHJlY3REZWNyZWFzaW5nUmlnaHQoXG4gIHIxOiBDbGllbnRSZWN0LFxuICByMjogQ2xpZW50UmVjdCxcbik6IG51bWJlciB7XG4gIHJldHVybiByMi5yaWdodCAtIHIxLnJpZ2h0O1xufVxuXG4vKipcbiAqIEludGVyZmFjZSB0byByZWFkIHRoZSBwb3NpdGlvbiBhc3NpZ25lZCB0byB0aGUgZWxlbWVudHMgYW5kIHJhbmdlcyBieSB0aGVcbiAqIGJyb3dzZXIuXG4gKi9cbmV4cG9ydCB0eXBlIENsaWVudExheW91dCA9IFZ0cmVlLkNsaWVudExheW91dDtcblxuLyoqXG4gKiBTdHlsaW5nLCBjcmVhdGluZyBhIHNpbmdsZSBub2RlJ3MgdmlldywgZXRjLlxuICovXG5leHBvcnQgdHlwZSBMYXlvdXRDb250ZXh0ID0gVnRyZWUuTGF5b3V0Q29udGV4dDtcblxuLyoqXG4gKiBGb3JtYXR0aW5nIGNvbnRleHQuXG4gKi9cbmV4cG9ydCB0eXBlIEZvcm1hdHRpbmdDb250ZXh0ID0gVnRyZWUuRm9ybWF0dGluZ0NvbnRleHQ7XG5cbmV4cG9ydCBmdW5jdGlvbiBlYWNoQW5jZXN0b3JGb3JtYXR0aW5nQ29udGV4dChcbiAgbm9kZUNvbnRleHQ6IE5vZGVDb250ZXh0LFxuICBjYWxsYmFjazogKHAxOiBGb3JtYXR0aW5nQ29udGV4dCkgPT4gYW55LFxuKTogdm9pZCB7XG4gIGlmICghbm9kZUNvbnRleHQpIHtcbiAgICByZXR1cm47XG4gIH1cbiAgZm9yIChsZXQgZmMgPSBub2RlQ29udGV4dC5mb3JtYXR0aW5nQ29udGV4dDsgZmM7IGZjID0gZmMuZ2V0UGFyZW50KCkpIHtcbiAgICBjYWxsYmFjayhmYyk7XG4gIH1cbn1cblxuZXhwb3J0IHR5cGUgTm9kZVBvc2l0aW9uU3RlcCA9IFZ0cmVlLk5vZGVQb3NpdGlvblN0ZXA7XG5cbmV4cG9ydCBmdW5jdGlvbiBpc1NhbWVOb2RlUG9zaXRpb25TdGVwKFxuICBucHMxOiBOb2RlUG9zaXRpb25TdGVwLFxuICBucHMyOiBOb2RlUG9zaXRpb25TdGVwLFxuKTogYm9vbGVhbiB7XG4gIGlmIChucHMxID09PSBucHMyKSB7XG4gICAgcmV0dXJuIHRydWU7XG4gIH1cbiAgaWYgKCFucHMxIHx8ICFucHMyKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG4gIHJldHVybiAoXG4gICAgbnBzMS5ub2RlID09PSBucHMyLm5vZGUgJiZcbiAgICBucHMxLnNoYWRvd1R5cGUgPT09IG5wczIuc2hhZG93VHlwZSAmJlxuICAgIGlzU2FtZVNoYWRvd0NvbnRleHQobnBzMS5zaGFkb3dDb250ZXh0LCBucHMyLnNoYWRvd0NvbnRleHQpICYmXG4gICAgaXNTYW1lU2hhZG93Q29udGV4dChucHMxLm5vZGVTaGFkb3csIG5wczIubm9kZVNoYWRvdykgJiZcbiAgICBpc1NhbWVOb2RlUG9zaXRpb25TdGVwKG5wczEuc2hhZG93U2libGluZywgbnBzMi5zaGFkb3dTaWJsaW5nKVxuICApO1xufVxuXG5leHBvcnQgdHlwZSBOb2RlUG9zaXRpb24gPSBWdHJlZS5Ob2RlUG9zaXRpb247XG5cbmV4cG9ydCBmdW5jdGlvbiBpc1NhbWVOb2RlUG9zaXRpb24oXG4gIG5wMTogTm9kZVBvc2l0aW9uIHwgbnVsbCxcbiAgbnAyOiBOb2RlUG9zaXRpb24gfCBudWxsLFxuKTogYm9vbGVhbiB7XG4gIGlmIChucDEgPT09IG5wMikge1xuICAgIHJldHVybiB0cnVlO1xuICB9XG4gIGlmICghbnAxIHx8ICFucDIpIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cbiAgaWYgKFxuICAgIG5wMS5vZmZzZXRJbk5vZGUgIT09IG5wMi5vZmZzZXRJbk5vZGUgfHxcbiAgICBucDEuYWZ0ZXIgIT09IG5wMi5hZnRlciB8fFxuICAgIG5wMS5zdGVwcy5sZW5ndGggIT09IG5wMi5zdGVwcy5sZW5ndGhcbiAgKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG4gIGZvciAobGV0IGkgPSAwOyBpIDwgbnAxLnN0ZXBzLmxlbmd0aDsgaSsrKSB7XG4gICAgaWYgKCFpc1NhbWVOb2RlUG9zaXRpb25TdGVwKG5wMS5zdGVwc1tpXSwgbnAyLnN0ZXBzW2ldKSkge1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgfVxuICByZXR1cm4gdHJ1ZTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIG5ld05vZGVQb3NpdGlvbkZyb21Ob2RlKG5vZGU6IE5vZGUpOiBOb2RlUG9zaXRpb24ge1xuICBjb25zdCBzdGVwOiBOb2RlUG9zaXRpb25TdGVwID0ge1xuICAgIG5vZGUsXG4gICAgc2hhZG93VHlwZTogU2hhZG93VHlwZS5OT05FLFxuICAgIHNoYWRvd0NvbnRleHQ6IG51bGwsXG4gICAgbm9kZVNoYWRvdzogbnVsbCxcbiAgICBzaGFkb3dTaWJsaW5nOiBudWxsLFxuICAgIGZvcm1hdHRpbmdDb250ZXh0OiBudWxsLFxuICAgIGZyYWdtZW50SW5kZXg6IDAsXG4gIH07XG4gIHJldHVybiB7XG4gICAgc3RlcHM6IFtzdGVwXSxcbiAgICBvZmZzZXRJbk5vZGU6IDAsXG4gICAgYWZ0ZXI6IGZhbHNlLFxuICAgIHByZXByb2Nlc3NlZFRleHRDb250ZW50OiBudWxsLFxuICB9O1xufVxuXG5leHBvcnQgZnVuY3Rpb24gbmV3Tm9kZVBvc2l0aW9uRnJvbU5vZGVDb250ZXh0KFxuICBub2RlQ29udGV4dDogVnRyZWUuTm9kZUNvbnRleHQsXG4gIGluaXRpYWxGcmFnbWVudEluZGV4OiBudW1iZXIgfCBudWxsLFxuKTogTm9kZVBvc2l0aW9uIHtcbiAgY29uc3Qgc3RlcDogTm9kZVBvc2l0aW9uU3RlcCA9IHtcbiAgICBub2RlOiBub2RlQ29udGV4dC5zb3VyY2VOb2RlLFxuICAgIHNoYWRvd1R5cGU6IFNoYWRvd1R5cGUuTk9ORSxcbiAgICBzaGFkb3dDb250ZXh0OiBub2RlQ29udGV4dC5zaGFkb3dDb250ZXh0LFxuICAgIG5vZGVTaGFkb3c6IG51bGwsXG4gICAgc2hhZG93U2libGluZzogbnVsbCxcbiAgICBmb3JtYXR0aW5nQ29udGV4dDogbnVsbCxcbiAgICBmcmFnbWVudEluZGV4OlxuICAgICAgaW5pdGlhbEZyYWdtZW50SW5kZXggIT0gbnVsbFxuICAgICAgICA/IGluaXRpYWxGcmFnbWVudEluZGV4XG4gICAgICAgIDogbm9kZUNvbnRleHQuZnJhZ21lbnRJbmRleCxcbiAgfTtcbiAgcmV0dXJuIHtcbiAgICBzdGVwczogW3N0ZXBdLFxuICAgIG9mZnNldEluTm9kZTogMCxcbiAgICBhZnRlcjogZmFsc2UsXG4gICAgcHJlcHJvY2Vzc2VkVGV4dENvbnRlbnQ6IG5vZGVDb250ZXh0LnByZXByb2Nlc3NlZFRleHRDb250ZW50LFxuICB9O1xufVxuXG5leHBvcnQgZnVuY3Rpb24gbWFrZU5vZGVDb250ZXh0RnJvbU5vZGVQb3NpdGlvblN0ZXAoXG4gIHN0ZXA6IE5vZGVQb3NpdGlvblN0ZXAsXG4gIHBhcmVudDogVnRyZWUuTm9kZUNvbnRleHQsXG4pOiBOb2RlQ29udGV4dCB7XG4gIGNvbnN0IG5vZGVDb250ZXh0ID0gbmV3IE5vZGVDb250ZXh0KHN0ZXAubm9kZSwgcGFyZW50IGFzIE5vZGVDb250ZXh0LCAwKTtcbiAgbm9kZUNvbnRleHQuc2hhZG93VHlwZSA9IHN0ZXAuc2hhZG93VHlwZTtcbiAgbm9kZUNvbnRleHQuc2hhZG93Q29udGV4dCA9IHN0ZXAuc2hhZG93Q29udGV4dDtcbiAgbm9kZUNvbnRleHQubm9kZVNoYWRvdyA9IHN0ZXAubm9kZVNoYWRvdztcbiAgbm9kZUNvbnRleHQuc2hhZG93U2libGluZyA9IHN0ZXAuc2hhZG93U2libGluZ1xuICAgID8gbWFrZU5vZGVDb250ZXh0RnJvbU5vZGVQb3NpdGlvblN0ZXAoc3RlcC5zaGFkb3dTaWJsaW5nLCBwYXJlbnQuY29weSgpKVxuICAgIDogbnVsbDtcbiAgbm9kZUNvbnRleHQuZm9ybWF0dGluZ0NvbnRleHQgPSBzdGVwLmZvcm1hdHRpbmdDb250ZXh0O1xuICBub2RlQ29udGV4dC5mcmFnbWVudEluZGV4ID0gc3RlcC5mcmFnbWVudEluZGV4ICsgMTtcbiAgcmV0dXJuIG5vZGVDb250ZXh0O1xufVxuXG5leHBvcnQgY29uc3QgU2hhZG93VHlwZSA9IFZ0cmVlLlNoYWRvd1R5cGU7XG5leHBvcnQgdHlwZSBTaGFkb3dUeXBlID0gVnRyZWUuU2hhZG93VHlwZTsgLy8gZXNsaW50LWRpc2FibGUtbGluZSBuby1yZWRlY2xhcmVcblxuLyoqXG4gKiBEYXRhIGFib3V0IHNoYWRvdyB0cmVlIGluc3RhbmNlLlxuICovXG5leHBvcnQgY2xhc3MgU2hhZG93Q29udGV4dCBpbXBsZW1lbnRzIFZ0cmVlLlNoYWRvd0NvbnRleHQge1xuICBzdWJTaGFkb3c6IFNoYWRvd0NvbnRleHQgPSBudWxsO1xuXG4gIGNvbnN0cnVjdG9yKFxuICAgIHB1YmxpYyByZWFkb25seSBvd25lcjogRWxlbWVudCxcbiAgICBwdWJsaWMgcmVhZG9ubHkgcm9vdDogRWxlbWVudCxcbiAgICBwdWJsaWMgcmVhZG9ubHkgeG1sZG9jOiBYbWxEb2MuWE1MRG9jSG9sZGVyLFxuICAgIHB1YmxpYyByZWFkb25seSBwYXJlbnRTaGFkb3c6IFNoYWRvd0NvbnRleHQsXG4gICAgc3VwZXJTaGFkb3c6IFNoYWRvd0NvbnRleHQsXG4gICAgcHVibGljIHJlYWRvbmx5IHR5cGU6IFNoYWRvd1R5cGUsXG4gICAgcHVibGljIHJlYWRvbmx5IHN0eWxlcjogb2JqZWN0LFxuICApIHtcbiAgICBpZiAoc3VwZXJTaGFkb3cpIHtcbiAgICAgIHN1cGVyU2hhZG93LnN1YlNoYWRvdyA9IHRoaXM7XG4gICAgfVxuICB9XG5cbiAgZXF1YWxzKG90aGVyOiBTaGFkb3dDb250ZXh0KTogYm9vbGVhbiB7XG4gICAgaWYgKCFvdGhlcikge1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgICByZXR1cm4gKFxuICAgICAgdGhpcy5vd25lciA9PT0gb3RoZXIub3duZXIgJiZcbiAgICAgIHRoaXMueG1sZG9jID09PSBvdGhlci54bWxkb2MgJiZcbiAgICAgIHRoaXMudHlwZSA9PT0gb3RoZXIudHlwZSAmJlxuICAgICAgaXNTYW1lU2hhZG93Q29udGV4dCh0aGlzLnBhcmVudFNoYWRvdywgb3RoZXIucGFyZW50U2hhZG93KVxuICAgICk7XG4gIH1cbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGlzU2FtZVNoYWRvd0NvbnRleHQoXG4gIHNjMTogU2hhZG93Q29udGV4dCxcbiAgc2MyOiBTaGFkb3dDb250ZXh0LFxuKTogYm9vbGVhbiB7XG4gIHJldHVybiBzYzEgPT09IHNjMiB8fCAoISFzYzEgJiYgISFzYzIgJiYgc2MxLmVxdWFscyhzYzIpKTtcbn1cblxuLyoqXG4gKiBJbmZvcm1hdGlvbiBhYm91dCA6Zmlyc3QtbGV0dGVyIG9yIDpmaXJzdC1saW5lIHBzZXVkb2VsZW1lbnRzXG4gKiBAcGFyYW0gY291bnQgMCAtIGZpcnN0LWxldHRlciwgMSBvciBtb3JlIC0gZmlyc3QgbGluZShzKVxuICovXG5leHBvcnQgY2xhc3MgRmlyc3RQc2V1ZG8gaW1wbGVtZW50cyBWdHJlZS5GaXJzdFBzZXVkbyB7XG4gIGNvbnN0cnVjdG9yKFxuICAgIHB1YmxpYyByZWFkb25seSBvdXRlcjogRmlyc3RQc2V1ZG8sXG4gICAgcHVibGljIHJlYWRvbmx5IGNvdW50OiBudW1iZXIsXG4gICkge31cbn1cblxuLyoqXG4gKiBOb2RlQ29udGV4dCByZXByZXNlbnRzIGEgcG9zaXRpb24gaW4gdGhlIGRvY3VtZW50ICsgbGF5b3V0LXJlbGF0ZWRcbiAqIGluZm9ybWF0aW9uIGF0dGFjaGVkIHRvIGl0LiBXaGVuIGFmdGVyPWZhbHNlIGFuZCBvZmZzZXRJbk5vZGU9MCwgdGhlXG4gKiBwb3NpdGlvbiBpcyBpbnNpZGUgdGhlIGVsZW1lbnQgKG5vZGUpLCBidXQganVzdCBiZWZvcmUgaXRzIGZpcnN0IGNoaWxkLlxuICogV2hlbiBvZmZzZXRJbk5vZGU+MCBpdCByZXByZXNlbnRzIG9mZnNldCBpbiB0aGUgdGV4dHVhbCBjb250ZW50IG9mIHRoZVxuICogbm9kZS4gV2hlbiBhZnRlcj10cnVlIGl0IHJlcHJlc2VudHMgcG9zaXRpb24gcmlnaHQgYWZ0ZXIgdGhlIGxhc3QgY2hpbGRcbiAqIG9mIHRoZSBub2RlLiBib3hPZmZzZXQgaXMgaW5jcmVtZW50ZWQgYnkgMSBmb3IgYW55IHZhbGlkIG5vZGUgcG9zaXRpb24uXG4gKi9cbmV4cG9ydCBjbGFzcyBOb2RlQ29udGV4dCBpbXBsZW1lbnRzIFZ0cmVlLk5vZGVDb250ZXh0IHtcbiAgLy8gcG9zaXRpb24gaXRzZWxmXG4gIG9mZnNldEluTm9kZTogbnVtYmVyID0gMDtcbiAgYWZ0ZXI6IGJvb2xlYW4gPSBmYWxzZTtcbiAgc2hhZG93VHlwZTogU2hhZG93VHlwZTtcblxuICAvLyBwYXJlbnQncyBzaGFkb3cgdHlwZVxuICBzaGFkb3dDb250ZXh0OiBTaGFkb3dDb250ZXh0O1xuICBub2RlU2hhZG93OiBTaGFkb3dDb250ZXh0ID0gbnVsbDtcbiAgc2hhZG93U2libGluZzogTm9kZUNvbnRleHQgPSBudWxsO1xuXG4gIC8vIG5leHQgXCJzaWJsaW5nXCIgaW4gdGhlIHNoYWRvdyB0cmVlXG4gIC8vIG90aGVyIHN0dWZmXG4gIHNoYXJlZDogYm9vbGVhbiA9IGZhbHNlO1xuICBpbmxpbmU6IGJvb2xlYW4gPSB0cnVlO1xuICBvdmVyZmxvdzogYm9vbGVhbiA9IGZhbHNlO1xuICBicmVha1BlbmFsdHk6IG51bWJlcjtcbiAgZGlzcGxheTogc3RyaW5nIHwgbnVsbCA9IG51bGw7XG4gIGZsb2F0UmVmZXJlbmNlOiBQYWdlRmxvYXRzLkZsb2F0UmVmZXJlbmNlO1xuICBmbG9hdFNpZGU6IHN0cmluZyB8IG51bGwgPSBudWxsO1xuICBjbGVhclNpZGU6IHN0cmluZyB8IG51bGwgPSBudWxsO1xuICBmbG9hdE1pbldyYXBCbG9jazogQ3NzLk51bWVyaWMgfCBudWxsID0gbnVsbDtcbiAgY29sdW1uU3BhbjogQ3NzLlZhbCB8IG51bGwgPSBudWxsO1xuICB2ZXJ0aWNhbEFsaWduOiBzdHJpbmcgPSBcImJhc2VsaW5lXCI7XG4gIGNhcHRpb25TaWRlOiBzdHJpbmcgPSBcInRvcFwiO1xuICBpbmxpbmVCb3JkZXJTcGFjaW5nOiBudW1iZXIgPSAwO1xuICBibG9ja0JvcmRlclNwYWNpbmc6IG51bWJlciA9IDA7XG4gIGZsZXhDb250YWluZXI6IGJvb2xlYW4gPSBmYWxzZTtcbiAgd2hpdGVzcGFjZTogV2hpdGVzcGFjZTtcbiAgaHlwaGVuYXRlQ2hhcmFjdGVyOiBzdHJpbmcgfCBudWxsO1xuICBicmVha1dvcmQ6IGJvb2xlYW47XG4gIGVzdGFibGlzaGVzQkZDOiBib29sZWFuID0gZmFsc2U7XG4gIGNvbnRhaW5pbmdCbG9ja0ZvckFic29sdXRlOiBib29sZWFuID0gZmFsc2U7XG4gIGJyZWFrQmVmb3JlOiBzdHJpbmcgfCBudWxsID0gbnVsbDtcbiAgYnJlYWtBZnRlcjogc3RyaW5nIHwgbnVsbCA9IG51bGw7XG4gIHZpZXdOb2RlOiBOb2RlID0gbnVsbDtcbiAgY2xlYXJTcGFjZXI6IE5vZGUgPSBudWxsO1xuICBpbmhlcml0ZWRQcm9wczogeyBba2V5OiBzdHJpbmddOiBudW1iZXIgfCBzdHJpbmcgfCBDc3MuVmFsIH07XG4gIHZlcnRpY2FsOiBib29sZWFuO1xuICBkaXJlY3Rpb246IHN0cmluZztcbiAgZmlyc3RQc2V1ZG86IEZpcnN0UHNldWRvO1xuICBsYW5nOiBzdHJpbmcgfCBudWxsID0gbnVsbDtcbiAgcHJlcHJvY2Vzc2VkVGV4dENvbnRlbnQ6IERpZmYuQ2hhbmdlW10gfCBudWxsID0gbnVsbDtcbiAgZm9ybWF0dGluZ0NvbnRleHQ6IEZvcm1hdHRpbmdDb250ZXh0O1xuICByZXBlYXRPbkJyZWFrOiBzdHJpbmcgfCBudWxsID0gbnVsbDtcbiAgcGx1Z2luUHJvcHM6IHtcbiAgICBba2V5OiBzdHJpbmddOiBzdHJpbmcgfCBudW1iZXIgfCB1bmRlZmluZWQgfCBudWxsIHwgKG51bWJlciB8IG51bGwpW107XG4gIH0gPSB7fTtcbiAgZnJhZ21lbnRJbmRleDogbnVtYmVyID0gMTtcbiAgYWZ0ZXJJZkNvbnRpbnVlczogU2VsZWN0b3JzLkFmdGVySWZDb250aW51ZXMgPSBudWxsO1xuICBmb290bm90ZVBvbGljeTogQ3NzLklkZW50IHwgbnVsbCA9IG51bGw7XG5cbiAgY29uc3RydWN0b3IoXG4gICAgcHVibGljIHNvdXJjZU5vZGU6IE5vZGUsXG4gICAgcHVibGljIHBhcmVudDogTm9kZUNvbnRleHQsXG4gICAgcHVibGljIGJveE9mZnNldDogbnVtYmVyLFxuICApIHtcbiAgICB0aGlzLnNoYWRvd1R5cGUgPSBTaGFkb3dUeXBlLk5PTkU7XG4gICAgdGhpcy5zaGFkb3dDb250ZXh0ID0gcGFyZW50ID8gcGFyZW50LnNoYWRvd0NvbnRleHQgOiBudWxsO1xuICAgIHRoaXMuYnJlYWtQZW5hbHR5ID0gcGFyZW50ID8gcGFyZW50LmJyZWFrUGVuYWx0eSA6IDA7XG4gICAgdGhpcy5mbG9hdFJlZmVyZW5jZSA9IFBhZ2VGbG9hdHMuRmxvYXRSZWZlcmVuY2UuSU5MSU5FO1xuICAgIHRoaXMud2hpdGVzcGFjZSA9IHBhcmVudCA/IHBhcmVudC53aGl0ZXNwYWNlIDogV2hpdGVzcGFjZS5JR05PUkU7XG4gICAgdGhpcy5oeXBoZW5hdGVDaGFyYWN0ZXIgPSBwYXJlbnQgPyBwYXJlbnQuaHlwaGVuYXRlQ2hhcmFjdGVyIDogbnVsbDtcbiAgICB0aGlzLmJyZWFrV29yZCA9IHBhcmVudCA/IHBhcmVudC5icmVha1dvcmQgOiBmYWxzZTtcbiAgICB0aGlzLmluaGVyaXRlZFByb3BzID0gcGFyZW50ID8gcGFyZW50LmluaGVyaXRlZFByb3BzIDoge307XG4gICAgdGhpcy52ZXJ0aWNhbCA9IHBhcmVudCA/IHBhcmVudC52ZXJ0aWNhbCA6IGZhbHNlO1xuICAgIHRoaXMuZGlyZWN0aW9uID0gcGFyZW50ID8gcGFyZW50LmRpcmVjdGlvbiA6IFwibHRyXCI7XG4gICAgdGhpcy5maXJzdFBzZXVkbyA9IHBhcmVudCA/IHBhcmVudC5maXJzdFBzZXVkbyA6IG51bGw7XG4gICAgdGhpcy5mb3JtYXR0aW5nQ29udGV4dCA9IHBhcmVudCA/IHBhcmVudC5mb3JtYXR0aW5nQ29udGV4dCA6IG51bGw7XG4gIH1cblxuICByZXNldFZpZXcoKTogdm9pZCB7XG4gICAgdGhpcy5pbmxpbmUgPSB0cnVlO1xuICAgIHRoaXMuYnJlYWtQZW5hbHR5ID0gdGhpcy5wYXJlbnQgPyB0aGlzLnBhcmVudC5icmVha1BlbmFsdHkgOiAwO1xuICAgIHRoaXMudmlld05vZGUgPSBudWxsO1xuICAgIHRoaXMuY2xlYXJTcGFjZXIgPSBudWxsO1xuICAgIHRoaXMub2Zmc2V0SW5Ob2RlID0gMDtcbiAgICB0aGlzLmFmdGVyID0gZmFsc2U7XG4gICAgdGhpcy5kaXNwbGF5ID0gbnVsbDtcbiAgICB0aGlzLmZsb2F0UmVmZXJlbmNlID0gUGFnZUZsb2F0cy5GbG9hdFJlZmVyZW5jZS5JTkxJTkU7XG4gICAgdGhpcy5mbG9hdFNpZGUgPSBudWxsO1xuICAgIHRoaXMuY2xlYXJTaWRlID0gbnVsbDtcbiAgICB0aGlzLmZsb2F0TWluV3JhcEJsb2NrID0gbnVsbDtcbiAgICB0aGlzLmNvbHVtblNwYW4gPSBudWxsO1xuICAgIHRoaXMudmVydGljYWxBbGlnbiA9IFwiYmFzZWxpbmVcIjtcbiAgICB0aGlzLmZsZXhDb250YWluZXIgPSBmYWxzZTtcbiAgICB0aGlzLndoaXRlc3BhY2UgPSB0aGlzLnBhcmVudCA/IHRoaXMucGFyZW50LndoaXRlc3BhY2UgOiBXaGl0ZXNwYWNlLklHTk9SRTtcbiAgICB0aGlzLmh5cGhlbmF0ZUNoYXJhY3RlciA9IHRoaXMucGFyZW50XG4gICAgICA/IHRoaXMucGFyZW50Lmh5cGhlbmF0ZUNoYXJhY3RlclxuICAgICAgOiBudWxsO1xuICAgIHRoaXMuYnJlYWtXb3JkID0gdGhpcy5wYXJlbnQgPyB0aGlzLnBhcmVudC5icmVha1dvcmQgOiBmYWxzZTtcbiAgICB0aGlzLmJyZWFrQmVmb3JlID0gbnVsbDtcbiAgICB0aGlzLmJyZWFrQWZ0ZXIgPSBudWxsO1xuICAgIHRoaXMubm9kZVNoYWRvdyA9IG51bGw7XG4gICAgdGhpcy5lc3RhYmxpc2hlc0JGQyA9IGZhbHNlO1xuICAgIHRoaXMuY29udGFpbmluZ0Jsb2NrRm9yQWJzb2x1dGUgPSBmYWxzZTtcbiAgICB0aGlzLnZlcnRpY2FsID0gdGhpcy5wYXJlbnQgPyB0aGlzLnBhcmVudC52ZXJ0aWNhbCA6IGZhbHNlO1xuICAgIHRoaXMubm9kZVNoYWRvdyA9IG51bGw7XG4gICAgdGhpcy5wcmVwcm9jZXNzZWRUZXh0Q29udGVudCA9IG51bGw7XG4gICAgdGhpcy5mb3JtYXR0aW5nQ29udGV4dCA9IHRoaXMucGFyZW50ID8gdGhpcy5wYXJlbnQuZm9ybWF0dGluZ0NvbnRleHQgOiBudWxsO1xuICAgIHRoaXMucmVwZWF0T25CcmVhayA9IG51bGw7XG4gICAgdGhpcy5wbHVnaW5Qcm9wcyA9IHt9O1xuICAgIHRoaXMuZnJhZ21lbnRJbmRleCA9IDE7XG4gICAgdGhpcy5hZnRlcklmQ29udGludWVzID0gbnVsbDtcbiAgICB0aGlzLmZvb3Rub3RlUG9saWN5ID0gbnVsbDtcbiAgfVxuXG4gIHByaXZhdGUgY2xvbmVJdGVtKCk6IE5vZGVDb250ZXh0IHtcbiAgICBjb25zdCBucCA9IG5ldyBOb2RlQ29udGV4dCh0aGlzLnNvdXJjZU5vZGUsIHRoaXMucGFyZW50LCB0aGlzLmJveE9mZnNldCk7XG4gICAgbnAub2Zmc2V0SW5Ob2RlID0gdGhpcy5vZmZzZXRJbk5vZGU7XG4gICAgbnAuYWZ0ZXIgPSB0aGlzLmFmdGVyO1xuICAgIG5wLm5vZGVTaGFkb3cgPSB0aGlzLm5vZGVTaGFkb3c7XG4gICAgbnAuc2hhZG93VHlwZSA9IHRoaXMuc2hhZG93VHlwZTtcbiAgICBucC5zaGFkb3dDb250ZXh0ID0gdGhpcy5zaGFkb3dDb250ZXh0O1xuICAgIG5wLnNoYWRvd1NpYmxpbmcgPSB0aGlzLnNoYWRvd1NpYmxpbmc7XG4gICAgbnAuaW5saW5lID0gdGhpcy5pbmxpbmU7XG4gICAgbnAuYnJlYWtQZW5hbHR5ID0gdGhpcy5icmVha1BlbmFsdHk7XG4gICAgbnAuZGlzcGxheSA9IHRoaXMuZGlzcGxheTtcbiAgICBucC5mbG9hdFJlZmVyZW5jZSA9IHRoaXMuZmxvYXRSZWZlcmVuY2U7XG4gICAgbnAuZmxvYXRTaWRlID0gdGhpcy5mbG9hdFNpZGU7XG4gICAgbnAuY2xlYXJTaWRlID0gdGhpcy5jbGVhclNpZGU7XG4gICAgbnAuZmxvYXRNaW5XcmFwQmxvY2sgPSB0aGlzLmZsb2F0TWluV3JhcEJsb2NrO1xuICAgIG5wLmNvbHVtblNwYW4gPSB0aGlzLmNvbHVtblNwYW47XG4gICAgbnAudmVydGljYWxBbGlnbiA9IHRoaXMudmVydGljYWxBbGlnbjtcbiAgICBucC5jYXB0aW9uU2lkZSA9IHRoaXMuY2FwdGlvblNpZGU7XG4gICAgbnAuaW5saW5lQm9yZGVyU3BhY2luZyA9IHRoaXMuaW5saW5lQm9yZGVyU3BhY2luZztcbiAgICBucC5ibG9ja0JvcmRlclNwYWNpbmcgPSB0aGlzLmJsb2NrQm9yZGVyU3BhY2luZztcbiAgICBucC5lc3RhYmxpc2hlc0JGQyA9IHRoaXMuZXN0YWJsaXNoZXNCRkM7XG4gICAgbnAuY29udGFpbmluZ0Jsb2NrRm9yQWJzb2x1dGUgPSB0aGlzLmNvbnRhaW5pbmdCbG9ja0ZvckFic29sdXRlO1xuICAgIG5wLmZsZXhDb250YWluZXIgPSB0aGlzLmZsZXhDb250YWluZXI7XG4gICAgbnAud2hpdGVzcGFjZSA9IHRoaXMud2hpdGVzcGFjZTtcbiAgICBucC5oeXBoZW5hdGVDaGFyYWN0ZXIgPSB0aGlzLmh5cGhlbmF0ZUNoYXJhY3RlcjtcbiAgICBucC5icmVha1dvcmQgPSB0aGlzLmJyZWFrV29yZDtcbiAgICBucC5icmVha0JlZm9yZSA9IHRoaXMuYnJlYWtCZWZvcmU7XG4gICAgbnAuYnJlYWtBZnRlciA9IHRoaXMuYnJlYWtBZnRlcjtcbiAgICBucC52aWV3Tm9kZSA9IHRoaXMudmlld05vZGU7XG4gICAgbnAuY2xlYXJTcGFjZXIgPSB0aGlzLmNsZWFyU3BhY2VyO1xuICAgIG5wLmZpcnN0UHNldWRvID0gdGhpcy5maXJzdFBzZXVkbztcbiAgICBucC52ZXJ0aWNhbCA9IHRoaXMudmVydGljYWw7XG4gICAgbnAub3ZlcmZsb3cgPSB0aGlzLm92ZXJmbG93O1xuICAgIG5wLnByZXByb2Nlc3NlZFRleHRDb250ZW50ID0gdGhpcy5wcmVwcm9jZXNzZWRUZXh0Q29udGVudDtcbiAgICBucC5mb3JtYXR0aW5nQ29udGV4dCA9IHRoaXMuZm9ybWF0dGluZ0NvbnRleHQ7XG4gICAgbnAucmVwZWF0T25CcmVhayA9IHRoaXMucmVwZWF0T25CcmVhaztcbiAgICBucC5wbHVnaW5Qcm9wcyA9IE9iamVjdC5jcmVhdGUodGhpcy5wbHVnaW5Qcm9wcyk7XG4gICAgbnAuZnJhZ21lbnRJbmRleCA9IHRoaXMuZnJhZ21lbnRJbmRleDtcbiAgICBucC5hZnRlcklmQ29udGludWVzID0gdGhpcy5hZnRlcklmQ29udGludWVzO1xuICAgIG5wLmZvb3Rub3RlUG9saWN5ID0gdGhpcy5mb290bm90ZVBvbGljeTtcbiAgICByZXR1cm4gbnA7XG4gIH1cblxuICBtb2RpZnkoKTogTm9kZUNvbnRleHQge1xuICAgIGlmICghdGhpcy5zaGFyZWQpIHtcbiAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cbiAgICByZXR1cm4gdGhpcy5jbG9uZUl0ZW0oKTtcbiAgfVxuXG4gIGNvcHkoKTogTm9kZUNvbnRleHQge1xuICAgIGxldCBucDogTm9kZUNvbnRleHQgPSB0aGlzO1xuICAgIGRvIHtcbiAgICAgIGlmIChucC5zaGFyZWQpIHtcbiAgICAgICAgYnJlYWs7XG4gICAgICB9XG4gICAgICBucC5zaGFyZWQgPSB0cnVlO1xuICAgICAgbnAgPSBucC5wYXJlbnQ7XG4gICAgfSB3aGlsZSAobnApO1xuICAgIHJldHVybiB0aGlzO1xuICB9XG5cbiAgY2xvbmUoKTogTm9kZUNvbnRleHQge1xuICAgIGNvbnN0IG5wID0gdGhpcy5jbG9uZUl0ZW0oKTtcbiAgICBsZXQgbnBjID0gbnA7XG4gICAgbGV0IG5wcDogTm9kZUNvbnRleHQ7XG4gICAgd2hpbGUgKChucHAgPSBucGMucGFyZW50KSAhPSBudWxsKSB7XG4gICAgICBucHAgPSBucHAuY2xvbmVJdGVtKCk7XG4gICAgICBucGMucGFyZW50ID0gbnBwO1xuICAgICAgbnBjID0gbnBwO1xuICAgIH1cbiAgICByZXR1cm4gbnA7XG4gIH1cblxuICB0b05vZGVQb3NpdGlvblN0ZXAoKTogTm9kZVBvc2l0aW9uU3RlcCB7XG4gICAgcmV0dXJuIHtcbiAgICAgIG5vZGU6IHRoaXMuc291cmNlTm9kZSxcbiAgICAgIHNoYWRvd1R5cGU6IHRoaXMuc2hhZG93VHlwZSxcbiAgICAgIHNoYWRvd0NvbnRleHQ6IHRoaXMuc2hhZG93Q29udGV4dCxcbiAgICAgIG5vZGVTaGFkb3c6IHRoaXMubm9kZVNoYWRvdyxcbiAgICAgIHNoYWRvd1NpYmxpbmc6IHRoaXMuc2hhZG93U2libGluZ1xuICAgICAgICA/IHRoaXMuc2hhZG93U2libGluZy50b05vZGVQb3NpdGlvblN0ZXAoKVxuICAgICAgICA6IG51bGwsXG4gICAgICBmb3JtYXR0aW5nQ29udGV4dDogdGhpcy5mb3JtYXR0aW5nQ29udGV4dCxcbiAgICAgIGZyYWdtZW50SW5kZXg6IHRoaXMuZnJhZ21lbnRJbmRleCxcbiAgICB9O1xuICB9XG5cbiAgdG9Ob2RlUG9zaXRpb24oKTogTm9kZVBvc2l0aW9uIHtcbiAgICBsZXQgbmM6IE5vZGVDb250ZXh0ID0gdGhpcztcbiAgICBjb25zdCBzdGVwcyA9IFtdO1xuXG4gICAgLy8gRml4IGZvciBpc3N1ZSAjNzAzXG4gICAgaWYgKFxuICAgICAgbmMuc2hhZG93VHlwZSA9PT0gVnRyZWUuU2hhZG93VHlwZS5ST09UTEVTUyAmJlxuICAgICAgKG5jLmZsb2F0UmVmZXJlbmNlICE9PSBQYWdlRmxvYXRzLkZsb2F0UmVmZXJlbmNlLklOTElORSB8fFxuICAgICAgICBuYy5mbG9hdFNpZGUgPT09IFwiZm9vdG5vdGVcIikgJiZcbiAgICAgIG5jLnNoYWRvd0NvbnRleHQuc3R5bGVyIGluc3RhbmNlb2YgUHNldWRvZWxlbWVudFN0eWxlclxuICAgICkge1xuICAgICAgbmMgPSBuYy5wYXJlbnQ7XG4gICAgfVxuXG4gICAgZG8ge1xuICAgICAgLy8gV2UgbmVlZCBmdWxseSBcInBlZWxlZFwiIHBhdGgsIHNvIGRvbid0IHJlY29yZCBmaXJzdC1YWFggcHNldWRvZWxlbWVudFxuICAgICAgLy8gY29udGFpbmVyc1xuICAgICAgaWYgKFxuICAgICAgICAhbmMuZmlyc3RQc2V1ZG8gfHxcbiAgICAgICAgIW5jLnBhcmVudCB8fFxuICAgICAgICBuYy5wYXJlbnQuZmlyc3RQc2V1ZG8gPT09IG5jLmZpcnN0UHNldWRvXG4gICAgICApIHtcbiAgICAgICAgc3RlcHMucHVzaChuYy50b05vZGVQb3NpdGlvblN0ZXAoKSk7XG4gICAgICB9XG4gICAgICBuYyA9IG5jLnBhcmVudDtcbiAgICB9IHdoaWxlIChuYyk7XG4gICAgY29uc3QgYWN0dWFsT2Zmc2V0SW5Ob2RlID0gdGhpcy5wcmVwcm9jZXNzZWRUZXh0Q29udGVudFxuICAgICAgPyBEaWZmLnJlc29sdmVPcmlnaW5hbEluZGV4KFxuICAgICAgICAgIHRoaXMucHJlcHJvY2Vzc2VkVGV4dENvbnRlbnQsXG4gICAgICAgICAgdGhpcy5vZmZzZXRJbk5vZGUsXG4gICAgICAgIClcbiAgICAgIDogdGhpcy5vZmZzZXRJbk5vZGU7XG4gICAgcmV0dXJuIHtcbiAgICAgIHN0ZXBzLFxuICAgICAgb2Zmc2V0SW5Ob2RlOiBhY3R1YWxPZmZzZXRJbk5vZGUsXG4gICAgICBhZnRlcjogdGhpcy5hZnRlcixcbiAgICAgIHByZXByb2Nlc3NlZFRleHRDb250ZW50OiB0aGlzLnByZXByb2Nlc3NlZFRleHRDb250ZW50LFxuICAgIH07XG4gIH1cblxuICBpc0luc2lkZUJGQygpOiBib29sZWFuIHtcbiAgICBsZXQgcGFyZW50ID0gdGhpcy5wYXJlbnQ7XG4gICAgd2hpbGUgKHBhcmVudCkge1xuICAgICAgaWYgKHBhcmVudC5lc3RhYmxpc2hlc0JGQykge1xuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgIH1cbiAgICAgIHBhcmVudCA9IHBhcmVudC5wYXJlbnQ7XG4gICAgfVxuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuXG4gIGdldENvbnRhaW5pbmdCbG9ja0ZvckFic29sdXRlKCk6IE5vZGVDb250ZXh0IHtcbiAgICBsZXQgcGFyZW50ID0gdGhpcy5wYXJlbnQ7XG4gICAgd2hpbGUgKHBhcmVudCkge1xuICAgICAgaWYgKHBhcmVudC5jb250YWluaW5nQmxvY2tGb3JBYnNvbHV0ZSkge1xuICAgICAgICByZXR1cm4gcGFyZW50O1xuICAgICAgfVxuICAgICAgcGFyZW50ID0gcGFyZW50LnBhcmVudDtcbiAgICB9XG4gICAgcmV0dXJuIG51bGw7XG4gIH1cblxuICAvKipcbiAgICogV2FsayB1cCBOb2RlQ29udGV4dCB0cmVlIChzdGFydGluZyBmcm9tIGl0c2VsZikgYW5kIGNhbGwgdGhlIGNhbGxiYWNrIGZvclxuICAgKiBlYWNoIGJsb2NrLlxuICAgKi9cbiAgd2Fsa1VwQmxvY2tzKGNhbGxiYWNrOiAocDE6IE5vZGVDb250ZXh0KSA9PiBhbnkpIHtcbiAgICBsZXQgbm9kZUNvbnRleHQ6IE5vZGVDb250ZXh0ID0gdGhpcztcbiAgICB3aGlsZSAobm9kZUNvbnRleHQpIHtcbiAgICAgIGlmICghbm9kZUNvbnRleHQuaW5saW5lKSB7XG4gICAgICAgIGNhbGxiYWNrKG5vZGVDb250ZXh0KTtcbiAgICAgIH1cbiAgICAgIG5vZGVDb250ZXh0ID0gbm9kZUNvbnRleHQucGFyZW50O1xuICAgIH1cbiAgfVxuXG4gIGJlbG9uZ3NUbyhmb3JtYXR0aW5nQ29udGV4dDogRm9ybWF0dGluZ0NvbnRleHQpOiBib29sZWFuIHtcbiAgICByZXR1cm4gKFxuICAgICAgdGhpcy5mb3JtYXR0aW5nQ29udGV4dCA9PT0gZm9ybWF0dGluZ0NvbnRleHQgJiZcbiAgICAgICEhdGhpcy5wYXJlbnQgJiZcbiAgICAgIHRoaXMucGFyZW50LmZvcm1hdHRpbmdDb250ZXh0ID09PSBmb3JtYXR0aW5nQ29udGV4dFxuICAgICk7XG4gIH1cbn1cblxuZXhwb3J0IGNsYXNzIENodW5rUG9zaXRpb24gaW1wbGVtZW50cyBWdHJlZS5DaHVua1Bvc2l0aW9uIHtcbiAgZmxvYXRzOiBOb2RlUG9zaXRpb25bXSA9IG51bGw7XG5cbiAgY29uc3RydWN0b3IocHVibGljIHByaW1hcnk6IE5vZGVQb3NpdGlvbikge31cblxuICBjbG9uZSgpOiBDaHVua1Bvc2l0aW9uIHtcbiAgICBjb25zdCByZXN1bHQgPSBuZXcgQ2h1bmtQb3NpdGlvbih0aGlzLnByaW1hcnkpO1xuICAgIGlmICh0aGlzLmZsb2F0cykge1xuICAgICAgcmVzdWx0LmZsb2F0cyA9IFtdO1xuICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCB0aGlzLmZsb2F0cy5sZW5ndGg7ICsraSkge1xuICAgICAgICByZXN1bHQuZmxvYXRzW2ldID0gdGhpcy5mbG9hdHNbaV07XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiByZXN1bHQ7XG4gIH1cblxuICBpc1NhbWVQb3NpdGlvbihvdGhlcjogQ2h1bmtQb3NpdGlvbik6IGJvb2xlYW4ge1xuICAgIGlmICghb3RoZXIpIHtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gICAgaWYgKHRoaXMgPT09IG90aGVyKSB7XG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG4gICAgaWYgKCFpc1NhbWVOb2RlUG9zaXRpb24odGhpcy5wcmltYXJ5LCBvdGhlci5wcmltYXJ5KSkge1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgICBpZiAodGhpcy5mbG9hdHMpIHtcbiAgICAgIGlmICghb3RoZXIuZmxvYXRzIHx8IHRoaXMuZmxvYXRzLmxlbmd0aCAhPT0gb3RoZXIuZmxvYXRzLmxlbmd0aCkge1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICB9XG4gICAgICBmb3IgKGxldCBpID0gMDsgaSA8IHRoaXMuZmxvYXRzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIGlmICghaXNTYW1lTm9kZVBvc2l0aW9uKHRoaXMuZmxvYXRzW2ldLCBvdGhlci5mbG9hdHNbaV0pKSB7XG4gICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfSBlbHNlIGlmIChvdGhlci5mbG9hdHMpIHtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gICAgcmV0dXJuIHRydWU7XG4gIH1cbn1cblxuZXhwb3J0IGNsYXNzIEZsb3dDaHVua1Bvc2l0aW9uIHtcbiAgY29uc3RydWN0b3IoXG4gICAgcHVibGljIGNodW5rUG9zaXRpb246IENodW5rUG9zaXRpb24sXG4gICAgcHVibGljIHJlYWRvbmx5IGZsb3dDaHVuazogRmxvd0NodW5rLFxuICApIHt9XG5cbiAgY2xvbmUoKTogRmxvd0NodW5rUG9zaXRpb24ge1xuICAgIHJldHVybiBuZXcgRmxvd0NodW5rUG9zaXRpb24odGhpcy5jaHVua1Bvc2l0aW9uLmNsb25lKCksIHRoaXMuZmxvd0NodW5rKTtcbiAgfVxuXG4gIGlzU2FtZVBvc2l0aW9uKG90aGVyOiBGbG93Q2h1bmtQb3NpdGlvbik6IGJvb2xlYW4ge1xuICAgIHJldHVybiAoXG4gICAgICAhIW90aGVyICYmXG4gICAgICAodGhpcyA9PT0gb3RoZXIgfHwgdGhpcy5jaHVua1Bvc2l0aW9uLmlzU2FtZVBvc2l0aW9uKG90aGVyLmNodW5rUG9zaXRpb24pKVxuICAgICk7XG4gIH1cbn1cblxuZXhwb3J0IGNsYXNzIEZsb3dQb3NpdGlvbiB7XG4gIHBvc2l0aW9uczogRmxvd0NodW5rUG9zaXRpb25bXSA9IFtdO1xuICBzdGFydFNpZGU6IHN0cmluZyA9IFwiYW55XCI7XG4gIGJyZWFrQWZ0ZXI6IHN0cmluZyB8IG51bGwgPSBudWxsO1xuXG4gIGNsb25lKCk6IEZsb3dQb3NpdGlvbiB7XG4gICAgY29uc3QgbmV3ZnAgPSBuZXcgRmxvd1Bvc2l0aW9uKCk7XG4gICAgY29uc3QgYXJyID0gdGhpcy5wb3NpdGlvbnM7XG4gICAgY29uc3QgbmV3YXJyID0gbmV3ZnAucG9zaXRpb25zO1xuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgYXJyLmxlbmd0aDsgaSsrKSB7XG4gICAgICBuZXdhcnJbaV0gPSBhcnJbaV0uY2xvbmUoKTtcbiAgICB9XG4gICAgbmV3ZnAuc3RhcnRTaWRlID0gdGhpcy5zdGFydFNpZGU7XG4gICAgbmV3ZnAuYnJlYWtBZnRlciA9IHRoaXMuYnJlYWtBZnRlcjtcbiAgICByZXR1cm4gbmV3ZnA7XG4gIH1cblxuICBpc1NhbWVQb3NpdGlvbihvdGhlcjogRmxvd1Bvc2l0aW9uKTogYm9vbGVhbiB7XG4gICAgaWYgKHRoaXMgPT09IG90aGVyKSB7XG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG4gICAgaWYgKCFvdGhlciB8fCB0aGlzLnBvc2l0aW9ucy5sZW5ndGggIT09IG90aGVyLnBvc2l0aW9ucy5sZW5ndGgpIHtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCB0aGlzLnBvc2l0aW9ucy5sZW5ndGg7IGkrKykge1xuICAgICAgaWYgKCF0aGlzLnBvc2l0aW9uc1tpXS5pc1NhbWVQb3NpdGlvbihvdGhlci5wb3NpdGlvbnNbaV0pKSB7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIHRydWU7XG4gIH1cblxuICBoYXNDb250ZW50KG9mZnNldDogbnVtYmVyKTogYm9vbGVhbiB7XG4gICAgcmV0dXJuIChcbiAgICAgIHRoaXMucG9zaXRpb25zLmxlbmd0aCA+IDAgJiZcbiAgICAgIHRoaXMucG9zaXRpb25zWzBdLmZsb3dDaHVuay5zdGFydE9mZnNldCA8PSBvZmZzZXRcbiAgICApO1xuICB9XG59XG5cbmV4cG9ydCBjbGFzcyBMYXlvdXRQb3NpdGlvbiB7XG4gIC8qKlxuICAgKiBPbmUtYmFzZWQsIGluY3JlbWVudGVkIGJlZm9yZSBsYXlvdXQuXG4gICAqL1xuICBwYWdlOiBudW1iZXIgPSAwO1xuICBmbG93czogeyBba2V5OiBzdHJpbmddOiBGbG93IH0gPSB7fTtcbiAgZmxvd1Bvc2l0aW9uczogeyBba2V5OiBzdHJpbmddOiBGbG93UG9zaXRpb24gfSA9IHt9O1xuXG4gIC8qKlxuICAgKiBmbG93UG9zaXRpb25zIGlzIGJ1aWx0IHVwIHRvIHRoaXMgb2Zmc2V0LlxuICAgKi9cbiAgaGlnaGVzdFNlZW5PZmZzZXQ6IG51bWJlciA9IDA7XG5cbiAgLy8gRklYTUU6IFRoaXMgcHJvcGVydGllcyBzZWVtIHRvIGJlIG5vdCB1c2VkXG4gIGhpZ2hlc3RTZWVuTm9kZTogTm9kZTtcbiAgbG9va3VwUG9zaXRpb25PZmZzZXQ6IG51bWJlcjtcblxuICBjbG9uZSgpOiBMYXlvdXRQb3NpdGlvbiB7XG4gICAgY29uc3QgbmV3Y3AgPSBuZXcgTGF5b3V0UG9zaXRpb24oKTtcbiAgICBuZXdjcC5wYWdlID0gdGhpcy5wYWdlO1xuICAgIG5ld2NwLmhpZ2hlc3RTZWVuTm9kZSA9IHRoaXMuaGlnaGVzdFNlZW5Ob2RlO1xuICAgIG5ld2NwLmhpZ2hlc3RTZWVuT2Zmc2V0ID0gdGhpcy5oaWdoZXN0U2Vlbk9mZnNldDtcbiAgICBuZXdjcC5sb29rdXBQb3NpdGlvbk9mZnNldCA9IHRoaXMubG9va3VwUG9zaXRpb25PZmZzZXQ7XG4gICAgbmV3Y3AuZmxvd3MgPSB0aGlzLmZsb3dzO1xuICAgIGZvciAoY29uc3QgbmFtZSBpbiB0aGlzLmZsb3dQb3NpdGlvbnMpIHtcbiAgICAgIG5ld2NwLmZsb3dQb3NpdGlvbnNbbmFtZV0gPSB0aGlzLmZsb3dQb3NpdGlvbnNbbmFtZV0uY2xvbmUoKTtcbiAgICB9XG4gICAgcmV0dXJuIG5ld2NwO1xuICB9XG5cbiAgaXNTYW1lUG9zaXRpb24ob3RoZXI6IExheW91dFBvc2l0aW9uKTogYm9vbGVhbiB7XG4gICAgaWYgKHRoaXMgPT09IG90aGVyKSB7XG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG4gICAgaWYgKFxuICAgICAgIW90aGVyIHx8XG4gICAgICB0aGlzLnBhZ2UgIT09IG90aGVyLnBhZ2UgfHxcbiAgICAgIHRoaXMuaGlnaGVzdFNlZW5PZmZzZXQgIT09IG90aGVyLmhpZ2hlc3RTZWVuT2Zmc2V0XG4gICAgKSB7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICAgIGNvbnN0IHRoaXNGbG93TmFtZXMgPSBPYmplY3Qua2V5cyh0aGlzLmZsb3dQb3NpdGlvbnMpO1xuICAgIGNvbnN0IG90aGVyRmxvd05hbWVzID0gT2JqZWN0LmtleXMob3RoZXIuZmxvd1Bvc2l0aW9ucyk7XG4gICAgaWYgKHRoaXNGbG93TmFtZXMubGVuZ3RoICE9PSBvdGhlckZsb3dOYW1lcy5sZW5ndGgpIHtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gICAgZm9yIChjb25zdCBmbG93TmFtZSBvZiB0aGlzRmxvd05hbWVzKSB7XG4gICAgICBpZiAoXG4gICAgICAgICF0aGlzLmZsb3dQb3NpdGlvbnNbZmxvd05hbWVdLmlzU2FtZVBvc2l0aW9uKFxuICAgICAgICAgIG90aGVyLmZsb3dQb3NpdGlvbnNbZmxvd05hbWVdLFxuICAgICAgICApXG4gICAgICApIHtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gdHJ1ZTtcbiAgfVxuXG4gIC8qKlxuICAgKiBAcGFyYW0gbmFtZSBmbG93IG5hbWUuXG4gICAqL1xuICBoYXNDb250ZW50KG5hbWU6IHN0cmluZywgb2Zmc2V0OiBudW1iZXIpOiBib29sZWFuIHtcbiAgICBjb25zdCBmbG93UG9zID0gdGhpcy5mbG93UG9zaXRpb25zW25hbWVdO1xuICAgIGlmICghZmxvd1Bvcykge1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgICByZXR1cm4gZmxvd1Bvcy5oYXNDb250ZW50KG9mZnNldCk7XG4gIH1cblxuICBzdGFydFNpZGVPZkZsb3cobmFtZTogc3RyaW5nKTogc3RyaW5nIHtcbiAgICBjb25zdCBmbG93UG9zID0gdGhpcy5mbG93UG9zaXRpb25zW25hbWVdO1xuICAgIGlmICghZmxvd1Bvcykge1xuICAgICAgcmV0dXJuIFwiYW55XCI7XG4gICAgfVxuICAgIHJldHVybiBmbG93UG9zLnN0YXJ0U2lkZTtcbiAgfVxuXG4gIGZpcnN0Rmxvd0NodW5rT2ZGbG93KG5hbWU6IHN0cmluZyk6IEZsb3dDaHVuayB8IG51bGwge1xuICAgIGNvbnN0IGZsb3dQb3MgPSB0aGlzLmZsb3dQb3NpdGlvbnNbbmFtZV07XG4gICAgaWYgKCFmbG93UG9zKSB7XG4gICAgICByZXR1cm4gbnVsbDtcbiAgICB9XG4gICAgY29uc3QgZmxvd0NodW5rUG9zaXRpb24gPSBmbG93UG9zLnBvc2l0aW9uc1swXTtcbiAgICBpZiAoIWZsb3dDaHVua1Bvc2l0aW9uKSB7XG4gICAgICByZXR1cm4gbnVsbDtcbiAgICB9XG4gICAgcmV0dXJuIGZsb3dDaHVua1Bvc2l0aW9uLmZsb3dDaHVuaztcbiAgfVxufVxuXG5leHBvcnQgY2xhc3MgQ29udGFpbmVyIGltcGxlbWVudHMgVnRyZWUuQ29udGFpbmVyIHtcbiAgbGVmdDogbnVtYmVyID0gMDtcbiAgdG9wOiBudW1iZXIgPSAwO1xuICBtYXJnaW5MZWZ0OiBudW1iZXIgPSAwO1xuICBtYXJnaW5SaWdodDogbnVtYmVyID0gMDtcbiAgbWFyZ2luVG9wOiBudW1iZXIgPSAwO1xuICBtYXJnaW5Cb3R0b206IG51bWJlciA9IDA7XG4gIGJvcmRlckxlZnQ6IG51bWJlciA9IDA7XG4gIGJvcmRlclJpZ2h0OiBudW1iZXIgPSAwO1xuICBib3JkZXJUb3A6IG51bWJlciA9IDA7XG4gIGJvcmRlckJvdHRvbTogbnVtYmVyID0gMDtcbiAgcGFkZGluZ0xlZnQ6IG51bWJlciA9IDA7XG4gIHBhZGRpbmdSaWdodDogbnVtYmVyID0gMDtcbiAgcGFkZGluZ1RvcDogbnVtYmVyID0gMDtcbiAgcGFkZGluZ0JvdHRvbTogbnVtYmVyID0gMDtcbiAgd2lkdGg6IG51bWJlciA9IDA7XG4gIGhlaWdodDogbnVtYmVyID0gMDtcbiAgb3JpZ2luWDogbnVtYmVyID0gMDtcbiAgb3JpZ2luWTogbnVtYmVyID0gMDtcbiAgZXhjbHVzaW9uczogR2VvbWV0cnlVdGlsLlNoYXBlW10gPSBudWxsO1xuICBpbm5lclNoYXBlOiBHZW9tZXRyeVV0aWwuU2hhcGUgPSBudWxsO1xuICBjb21wdXRlZEJsb2NrU2l6ZTogbnVtYmVyID0gMDtcbiAgc25hcFdpZHRoOiBudW1iZXIgPSAwO1xuICBzbmFwSGVpZ2h0OiBudW1iZXIgPSAwO1xuICBzbmFwT2Zmc2V0WDogbnVtYmVyID0gMDtcbiAgc25hcE9mZnNldFk6IG51bWJlciA9IDA7XG4gIHZlcnRpY2FsOiBib29sZWFuID0gZmFsc2U7IC8vIHZlcnRpY2FsIHdyaXRpbmdcblxuICBjb25zdHJ1Y3RvcihwdWJsaWMgZWxlbWVudDogRWxlbWVudCkge31cblxuICBnZXRJbnNldFRvcCgpIHtcbiAgICByZXR1cm4gdGhpcy5tYXJnaW5Ub3AgKyB0aGlzLmJvcmRlclRvcCArIHRoaXMucGFkZGluZ1RvcDtcbiAgfVxuXG4gIGdldEluc2V0Qm90dG9tKCkge1xuICAgIHJldHVybiB0aGlzLm1hcmdpbkJvdHRvbSArIHRoaXMuYm9yZGVyQm90dG9tICsgdGhpcy5wYWRkaW5nQm90dG9tO1xuICB9XG5cbiAgZ2V0SW5zZXRMZWZ0KCkge1xuICAgIHJldHVybiB0aGlzLm1hcmdpbkxlZnQgKyB0aGlzLmJvcmRlckxlZnQgKyB0aGlzLnBhZGRpbmdMZWZ0O1xuICB9XG5cbiAgZ2V0SW5zZXRSaWdodCgpIHtcbiAgICByZXR1cm4gdGhpcy5tYXJnaW5SaWdodCArIHRoaXMuYm9yZGVyUmlnaHQgKyB0aGlzLnBhZGRpbmdSaWdodDtcbiAgfVxuXG4gIGdldEluc2V0QmVmb3JlKCkge1xuICAgIGlmICh0aGlzLnZlcnRpY2FsKSB7XG4gICAgICByZXR1cm4gdGhpcy5nZXRJbnNldFJpZ2h0KCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiB0aGlzLmdldEluc2V0VG9wKCk7XG4gICAgfVxuICB9XG5cbiAgZ2V0SW5zZXRBZnRlcigpIHtcbiAgICBpZiAodGhpcy52ZXJ0aWNhbCkge1xuICAgICAgcmV0dXJuIHRoaXMuZ2V0SW5zZXRMZWZ0KCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiB0aGlzLmdldEluc2V0Qm90dG9tKCk7XG4gICAgfVxuICB9XG5cbiAgZ2V0SW5zZXRTdGFydCgpIHtcbiAgICBpZiAodGhpcy52ZXJ0aWNhbCkge1xuICAgICAgcmV0dXJuIHRoaXMuZ2V0SW5zZXRUb3AoKTtcbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuIHRoaXMuZ2V0SW5zZXRMZWZ0KCk7XG4gICAgfVxuICB9XG5cbiAgZ2V0SW5zZXRFbmQoKSB7XG4gICAgaWYgKHRoaXMudmVydGljYWwpIHtcbiAgICAgIHJldHVybiB0aGlzLmdldEluc2V0Qm90dG9tKCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiB0aGlzLmdldEluc2V0UmlnaHQoKTtcbiAgICB9XG4gIH1cblxuICBnZXRCZWZvcmVFZGdlKGJveDogQ2xpZW50UmVjdCk6IG51bWJlciB7XG4gICAgcmV0dXJuIHRoaXMudmVydGljYWwgPyBib3gucmlnaHQgOiBib3gudG9wO1xuICB9XG5cbiAgZ2V0QWZ0ZXJFZGdlKGJveDogQ2xpZW50UmVjdCk6IG51bWJlciB7XG4gICAgcmV0dXJuIHRoaXMudmVydGljYWwgPyBib3gubGVmdCA6IGJveC5ib3R0b207XG4gIH1cblxuICBnZXRTdGFydEVkZ2UoYm94OiBDbGllbnRSZWN0KTogbnVtYmVyIHtcbiAgICByZXR1cm4gdGhpcy52ZXJ0aWNhbCA/IGJveC50b3AgOiBib3gubGVmdDtcbiAgfVxuXG4gIGdldEVuZEVkZ2UoYm94OiBDbGllbnRSZWN0KTogbnVtYmVyIHtcbiAgICByZXR1cm4gdGhpcy52ZXJ0aWNhbCA/IGJveC5ib3R0b20gOiBib3gucmlnaHQ7XG4gIH1cblxuICBnZXRJbmxpbmVTaXplKGJveDogQ2xpZW50UmVjdCk6IG51bWJlciB7XG4gICAgcmV0dXJuIHRoaXMudmVydGljYWwgPyBib3guYm90dG9tIC0gYm94LnRvcCA6IGJveC5yaWdodCAtIGJveC5sZWZ0O1xuICB9XG5cbiAgZ2V0Qm94U2l6ZShib3g6IENsaWVudFJlY3QpOiBudW1iZXIge1xuICAgIHJldHVybiB0aGlzLnZlcnRpY2FsID8gYm94LnJpZ2h0IC0gYm94LmxlZnQgOiBib3guYm90dG9tIC0gYm94LnRvcDtcbiAgfVxuXG4gIGdldEJveERpcigpOiBudW1iZXIge1xuICAgIHJldHVybiB0aGlzLnZlcnRpY2FsID8gLTEgOiAxO1xuICB9XG5cbiAgZ2V0SW5saW5lRGlyKCk6IG51bWJlciB7XG4gICAgcmV0dXJuIDE7XG4gIH1cblxuICBjb3B5RnJvbShvdGhlcjogQ29udGFpbmVyKTogdm9pZCB7XG4gICAgdGhpcy5lbGVtZW50ID0gb3RoZXIuZWxlbWVudDtcbiAgICB0aGlzLmxlZnQgPSBvdGhlci5sZWZ0O1xuICAgIHRoaXMudG9wID0gb3RoZXIudG9wO1xuICAgIHRoaXMubWFyZ2luTGVmdCA9IG90aGVyLm1hcmdpbkxlZnQ7XG4gICAgdGhpcy5tYXJnaW5SaWdodCA9IG90aGVyLm1hcmdpblJpZ2h0O1xuICAgIHRoaXMubWFyZ2luVG9wID0gb3RoZXIubWFyZ2luVG9wO1xuICAgIHRoaXMubWFyZ2luQm90dG9tID0gb3RoZXIubWFyZ2luQm90dG9tO1xuICAgIHRoaXMuYm9yZGVyTGVmdCA9IG90aGVyLmJvcmRlckxlZnQ7XG4gICAgdGhpcy5ib3JkZXJSaWdodCA9IG90aGVyLmJvcmRlclJpZ2h0O1xuICAgIHRoaXMuYm9yZGVyVG9wID0gb3RoZXIuYm9yZGVyVG9wO1xuICAgIHRoaXMuYm9yZGVyQm90dG9tID0gb3RoZXIuYm9yZGVyQm90dG9tO1xuICAgIHRoaXMucGFkZGluZ0xlZnQgPSBvdGhlci5wYWRkaW5nTGVmdDtcbiAgICB0aGlzLnBhZGRpbmdSaWdodCA9IG90aGVyLnBhZGRpbmdSaWdodDtcbiAgICB0aGlzLnBhZGRpbmdUb3AgPSBvdGhlci5wYWRkaW5nVG9wO1xuICAgIHRoaXMucGFkZGluZ0JvdHRvbSA9IG90aGVyLnBhZGRpbmdCb3R0b207XG4gICAgdGhpcy53aWR0aCA9IG90aGVyLndpZHRoO1xuICAgIHRoaXMuaGVpZ2h0ID0gb3RoZXIuaGVpZ2h0O1xuICAgIHRoaXMub3JpZ2luWCA9IG90aGVyLm9yaWdpblg7XG4gICAgdGhpcy5vcmlnaW5ZID0gb3RoZXIub3JpZ2luWTtcbiAgICB0aGlzLmlubmVyU2hhcGUgPSBvdGhlci5pbm5lclNoYXBlO1xuICAgIHRoaXMuZXhjbHVzaW9ucyA9IG90aGVyLmV4Y2x1c2lvbnM7XG4gICAgdGhpcy5jb21wdXRlZEJsb2NrU2l6ZSA9IG90aGVyLmNvbXB1dGVkQmxvY2tTaXplO1xuICAgIHRoaXMuc25hcFdpZHRoID0gb3RoZXIuc25hcFdpZHRoO1xuICAgIHRoaXMuc25hcEhlaWdodCA9IG90aGVyLnNuYXBIZWlnaHQ7XG4gICAgdGhpcy52ZXJ0aWNhbCA9IG90aGVyLnZlcnRpY2FsO1xuICB9XG5cbiAgc2V0VmVydGljYWxQb3NpdGlvbih0b3A6IG51bWJlciwgaGVpZ2h0OiBudW1iZXIpOiB2b2lkIHtcbiAgICB0aGlzLnRvcCA9IHRvcDtcbiAgICB0aGlzLmhlaWdodCA9IGhlaWdodDtcbiAgICBCYXNlLnNldENTU1Byb3BlcnR5KHRoaXMuZWxlbWVudCwgXCJ0b3BcIiwgYCR7dG9wfXB4YCk7XG4gICAgQmFzZS5zZXRDU1NQcm9wZXJ0eSh0aGlzLmVsZW1lbnQsIFwiaGVpZ2h0XCIsIGAke2hlaWdodH1weGApO1xuICB9XG5cbiAgc2V0SG9yaXpvbnRhbFBvc2l0aW9uKGxlZnQ6IG51bWJlciwgd2lkdGg6IG51bWJlcik6IHZvaWQge1xuICAgIHRoaXMubGVmdCA9IGxlZnQ7XG4gICAgdGhpcy53aWR0aCA9IHdpZHRoO1xuICAgIEJhc2Uuc2V0Q1NTUHJvcGVydHkodGhpcy5lbGVtZW50LCBcImxlZnRcIiwgYCR7bGVmdH1weGApO1xuICAgIEJhc2Uuc2V0Q1NTUHJvcGVydHkodGhpcy5lbGVtZW50LCBcIndpZHRoXCIsIGAke3dpZHRofXB4YCk7XG4gIH1cblxuICBzZXRCbG9ja1Bvc2l0aW9uKHN0YXJ0OiBudW1iZXIsIGV4dGVudDogbnVtYmVyKTogdm9pZCB7XG4gICAgaWYgKHRoaXMudmVydGljYWwpIHtcbiAgICAgIHRoaXMuc2V0SG9yaXpvbnRhbFBvc2l0aW9uKHN0YXJ0ICsgZXh0ZW50ICogdGhpcy5nZXRCb3hEaXIoKSwgZXh0ZW50KTtcbiAgICB9IGVsc2Uge1xuICAgICAgdGhpcy5zZXRWZXJ0aWNhbFBvc2l0aW9uKHN0YXJ0LCBleHRlbnQpO1xuICAgIH1cbiAgfVxuXG4gIHNldElubGluZVBvc2l0aW9uKHN0YXJ0OiBudW1iZXIsIGV4dGVudDogbnVtYmVyKTogdm9pZCB7XG4gICAgaWYgKHRoaXMudmVydGljYWwpIHtcbiAgICAgIHRoaXMuc2V0VmVydGljYWxQb3NpdGlvbihzdGFydCwgZXh0ZW50KTtcbiAgICB9IGVsc2Uge1xuICAgICAgdGhpcy5zZXRIb3Jpem9udGFsUG9zaXRpb24oc3RhcnQsIGV4dGVudCk7XG4gICAgfVxuICB9XG5cbiAgY2xlYXIoKSB7XG4gICAgY29uc3QgcGFyZW50ID0gdGhpcy5lbGVtZW50O1xuICAgIGxldCBjOiBOb2RlO1xuICAgIHdoaWxlICgoYyA9IHBhcmVudC5sYXN0Q2hpbGQpKSB7XG4gICAgICBwYXJlbnQucmVtb3ZlQ2hpbGQoYyk7XG4gICAgfVxuICB9XG5cbiAgZ2V0SW5uZXJTaGFwZSgpOiBHZW9tZXRyeVV0aWwuU2hhcGUge1xuICAgIGNvbnN0IHJlY3QgPSB0aGlzLmdldElubmVyUmVjdCgpO1xuICAgIGlmICh0aGlzLmlubmVyU2hhcGUpIHtcbiAgICAgIHJldHVybiB0aGlzLmlubmVyU2hhcGUud2l0aE9mZnNldChyZWN0LngxLCByZWN0LnkxKTtcbiAgICB9XG4gICAgcmV0dXJuIEdlb21ldHJ5VXRpbC5zaGFwZUZvclJlY3QocmVjdC54MSwgcmVjdC55MSwgcmVjdC54MiwgcmVjdC55Mik7XG4gIH1cblxuICBnZXRJbm5lclJlY3QoKTogR2VvbWV0cnlVdGlsLlJlY3Qge1xuICAgIGNvbnN0IG9mZnNldFggPSB0aGlzLm9yaWdpblggKyB0aGlzLmxlZnQgKyB0aGlzLmdldEluc2V0TGVmdCgpO1xuICAgIGNvbnN0IG9mZnNldFkgPSB0aGlzLm9yaWdpblkgKyB0aGlzLnRvcCArIHRoaXMuZ2V0SW5zZXRUb3AoKTtcbiAgICByZXR1cm4gbmV3IEdlb21ldHJ5VXRpbC5SZWN0KFxuICAgICAgb2Zmc2V0WCxcbiAgICAgIG9mZnNldFksXG4gICAgICBvZmZzZXRYICsgdGhpcy53aWR0aCxcbiAgICAgIG9mZnNldFkgKyB0aGlzLmhlaWdodCxcbiAgICApO1xuICB9XG5cbiAgZ2V0UGFkZGluZ1JlY3QoKTogR2VvbWV0cnlVdGlsLlJlY3Qge1xuICAgIGNvbnN0IHBhZGRpbmdYID1cbiAgICAgIHRoaXMub3JpZ2luWCArIHRoaXMubGVmdCArIHRoaXMubWFyZ2luTGVmdCArIHRoaXMuYm9yZGVyTGVmdDtcbiAgICBjb25zdCBwYWRkaW5nWSA9IHRoaXMub3JpZ2luWSArIHRoaXMudG9wICsgdGhpcy5tYXJnaW5Ub3AgKyB0aGlzLmJvcmRlclRvcDtcbiAgICBjb25zdCBwYWRkaW5nV2lkdGggPSB0aGlzLnBhZGRpbmdMZWZ0ICsgdGhpcy53aWR0aCArIHRoaXMucGFkZGluZ1JpZ2h0O1xuICAgIGNvbnN0IHBhZGRpbmdIZWlnaHQgPSB0aGlzLnBhZGRpbmdUb3AgKyB0aGlzLmhlaWdodCArIHRoaXMucGFkZGluZ0JvdHRvbTtcbiAgICByZXR1cm4gbmV3IEdlb21ldHJ5VXRpbC5SZWN0KFxuICAgICAgcGFkZGluZ1gsXG4gICAgICBwYWRkaW5nWSxcbiAgICAgIHBhZGRpbmdYICsgcGFkZGluZ1dpZHRoLFxuICAgICAgcGFkZGluZ1kgKyBwYWRkaW5nSGVpZ2h0LFxuICAgICk7XG4gIH1cblxuICBnZXRPdXRlclNoYXBlKFxuICAgIG91dGVyU2hhcGVQcm9wOiBDc3MuVmFsLFxuICAgIGNvbnRleHQ6IEV4cHJzLkNvbnRleHQsXG4gICk6IEdlb21ldHJ5VXRpbC5TaGFwZSB7XG4gICAgY29uc3QgcmVjdCA9IHRoaXMuZ2V0T3V0ZXJSZWN0KCk7XG4gICAgcmV0dXJuIENzc1Byb3AudG9TaGFwZShcbiAgICAgIG91dGVyU2hhcGVQcm9wLFxuICAgICAgcmVjdC54MSxcbiAgICAgIHJlY3QueTEsXG4gICAgICByZWN0LngyIC0gcmVjdC54MSxcbiAgICAgIHJlY3QueTIgLSByZWN0LnkxLFxuICAgICAgY29udGV4dCxcbiAgICApO1xuICB9XG5cbiAgZ2V0T3V0ZXJSZWN0KCk6IEdlb21ldHJ5VXRpbC5SZWN0IHtcbiAgICBjb25zdCBvdXRlclggPSB0aGlzLm9yaWdpblggKyB0aGlzLmxlZnQ7XG4gICAgY29uc3Qgb3V0ZXJZID0gdGhpcy5vcmlnaW5ZICsgdGhpcy50b3A7XG4gICAgY29uc3Qgb3V0ZXJXaWR0aCA9IHRoaXMuZ2V0SW5zZXRMZWZ0KCkgKyB0aGlzLndpZHRoICsgdGhpcy5nZXRJbnNldFJpZ2h0KCk7XG4gICAgY29uc3Qgb3V0ZXJIZWlnaHQgPVxuICAgICAgdGhpcy5nZXRJbnNldFRvcCgpICsgdGhpcy5oZWlnaHQgKyB0aGlzLmdldEluc2V0Qm90dG9tKCk7XG4gICAgcmV0dXJuIG5ldyBHZW9tZXRyeVV0aWwuUmVjdChcbiAgICAgIG91dGVyWCxcbiAgICAgIG91dGVyWSxcbiAgICAgIG91dGVyWCArIG91dGVyV2lkdGgsXG4gICAgICBvdXRlclkgKyBvdXRlckhlaWdodCxcbiAgICApO1xuICB9XG59XG5cbmV4cG9ydCB0eXBlIEV4cHJDb250ZW50TGlzdGVuZXIgPSBWdHJlZS5FeHByQ29udGVudExpc3RlbmVyO1xuXG5leHBvcnQgY2xhc3MgQ29udGVudFByb3BlcnR5SGFuZGxlciBleHRlbmRzIENzcy5WaXNpdG9yIHtcbiAgY29uc3RydWN0b3IoXG4gICAgcHVibGljIHJlYWRvbmx5IGVsZW06IEVsZW1lbnQsXG4gICAgcHVibGljIHJlYWRvbmx5IGNvbnRleHQ6IEV4cHJzLkNvbnRleHQsXG4gICAgcHVibGljIHJlYWRvbmx5IHJvb3RDb250ZW50VmFsdWU6IENzcy5WYWwsXG4gICAgcHVibGljIHJlYWRvbmx5IGV4cHJDb250ZW50TGlzdGVuZXI6IEV4cHJDb250ZW50TGlzdGVuZXIsXG4gICkge1xuICAgIHN1cGVyKCk7XG4gIH1cblxuICBwcml2YXRlIHZpc2l0U3RySW5uZXIoc3RyOiBzdHJpbmcsIG5vZGU/OiBOb2RlIHwgbnVsbCkge1xuICAgIGlmICghbm9kZSkge1xuICAgICAgbm9kZSA9IHRoaXMuZWxlbS5vd25lckRvY3VtZW50LmNyZWF0ZVRleHROb2RlKHN0cik7XG4gICAgfVxuICAgIHRoaXMuZWxlbS5hcHBlbmRDaGlsZChub2RlKTtcbiAgfVxuXG4gIC8qKiBAb3ZlcnJpZGUgKi9cbiAgdmlzaXRTdHIoc3RyOiBDc3MuU3RyKTogQ3NzLlZhbCB7XG4gICAgdGhpcy52aXNpdFN0cklubmVyKHN0ci5zdHIpO1xuICAgIHJldHVybiBudWxsO1xuICB9XG5cbiAgLyoqIEBvdmVycmlkZSAqL1xuICB2aXNpdFVSTCh1cmw6IENzcy5VUkwpOiBDc3MuVmFsIHtcbiAgICBpZiAoKHRoaXMucm9vdENvbnRlbnRWYWx1ZSBhcyBhbnkpLnVybCkge1xuICAgICAgdGhpcy5lbGVtLnNldEF0dHJpYnV0ZShcInNyY1wiLCB1cmwudXJsKTtcbiAgICB9IGVsc2Uge1xuICAgICAgY29uc3QgaW1nID0gdGhpcy5lbGVtLm93bmVyRG9jdW1lbnQuY3JlYXRlRWxlbWVudE5TKEJhc2UuTlMuWEhUTUwsIFwiaW1nXCIpO1xuICAgICAgaW1nLnNldEF0dHJpYnV0ZShcInNyY1wiLCB1cmwudXJsKTtcbiAgICAgIHRoaXMuZWxlbS5hcHBlbmRDaGlsZChpbWcpO1xuICAgIH1cbiAgICByZXR1cm4gbnVsbDtcbiAgfVxuXG4gIC8qKiBAb3ZlcnJpZGUgKi9cbiAgdmlzaXRTcGFjZUxpc3QobGlzdDogQ3NzLlNwYWNlTGlzdCk6IENzcy5WYWwge1xuICAgIHRoaXMudmlzaXRWYWx1ZXMobGlzdC52YWx1ZXMpO1xuICAgIHJldHVybiBudWxsO1xuICB9XG5cbiAgLyoqIEBvdmVycmlkZSAqL1xuICB2aXNpdEV4cHIoZXhwcjogQ3NzLkV4cHIpOiBDc3MuVmFsIHtcbiAgICBjb25zdCBleCA9IGV4cHIudG9FeHByKCk7XG4gICAgbGV0IHZhbCA9IGV4LmV2YWx1YXRlKHRoaXMuY29udGV4dCk7XG4gICAgaWYgKHR5cGVvZiB2YWwgPT09IFwic3RyaW5nXCIpIHtcbiAgICAgIGlmIChleCBpbnN0YW5jZW9mIEV4cHJzLk5hbWVkKSB7XG4gICAgICAgIC8vIEZvciBlbnYocHViLXRpdGxlKSBhbmQgZW52KGRvYy10aXRsZSlcbiAgICAgICAgLy8gTmVlZCB0byB1bnF1b3RlIHRoZSByZXN1bHQuIFRvIGJlIGNvbnNpc3RlbnQgd2l0aCBjc3NwYXJzZS5ldmFsdWF0ZUV4cHJUb0NTUygpXG4gICAgICAgIHZhbCA9IENzc1BhcnNlci5wYXJzZVZhbHVlKFxuICAgICAgICAgIGV4LnNjb3BlLFxuICAgICAgICAgIG5ldyBDc3NUb2tlbml6ZXIuVG9rZW5pemVyKHZhbCwgbnVsbCksXG4gICAgICAgICAgXCJcIixcbiAgICAgICAgKS5zdHJpbmdWYWx1ZSgpO1xuICAgICAgfVxuICAgICAgYXNzZXJ0KHRoaXMuZWxlbS5vd25lckRvY3VtZW50KTtcbiAgICAgIGNvbnN0IG5vZGUgPSB0aGlzLmV4cHJDb250ZW50TGlzdGVuZXIoZXgsIHZhbCwgdGhpcy5lbGVtLm93bmVyRG9jdW1lbnQpO1xuICAgICAgdGhpcy52aXNpdFN0cklubmVyKHZhbCwgbm9kZSk7XG4gICAgfVxuICAgIHJldHVybiBudWxsO1xuICB9XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBub25Ucml2aWFsQ29udGVudCh2YWw6IENzcy5WYWwpOiBib29sZWFuIHtcbiAgcmV0dXJuIChcbiAgICB2YWwgIT0gbnVsbCAmJlxuICAgIHZhbCAhPT0gQ3NzLmlkZW50Lm5vcm1hbCAmJlxuICAgIHZhbCAhPT0gQ3NzLmlkZW50Lm5vbmUgJiZcbiAgICB2YWwgIT09IENzcy5pZGVudC5pbmhlcml0XG4gICk7XG59XG4iLCIvKipcbiAqIENvcHlyaWdodCAyMDEzIEdvb2dsZSwgSW5jLlxuICogQ29weXJpZ2h0IDIwMTUgVHJpbS1tYXJrcyBJbmMuXG4gKiBDb3B5cmlnaHQgMjAxOSBWaXZsaW9zdHlsZSBGb3VuZGF0aW9uXG4gKlxuICogVml2bGlvc3R5bGUuanMgaXMgZnJlZSBzb2Z0d2FyZTogeW91IGNhbiByZWRpc3RyaWJ1dGUgaXQgYW5kL29yIG1vZGlmeVxuICogaXQgdW5kZXIgdGhlIHRlcm1zIG9mIHRoZSBHTlUgQWZmZXJvIEdlbmVyYWwgUHVibGljIExpY2Vuc2UgYXMgcHVibGlzaGVkIGJ5XG4gKiB0aGUgRnJlZSBTb2Z0d2FyZSBGb3VuZGF0aW9uLCBlaXRoZXIgdmVyc2lvbiAzIG9mIHRoZSBMaWNlbnNlLCBvclxuICogKGF0IHlvdXIgb3B0aW9uKSBhbnkgbGF0ZXIgdmVyc2lvbi5cbiAqXG4gKiBWaXZsaW9zdHlsZS5qcyBpcyBkaXN0cmlidXRlZCBpbiB0aGUgaG9wZSB0aGF0IGl0IHdpbGwgYmUgdXNlZnVsLFxuICogYnV0IFdJVEhPVVQgQU5ZIFdBUlJBTlRZOyB3aXRob3V0IGV2ZW4gdGhlIGltcGxpZWQgd2FycmFudHkgb2ZcbiAqIE1FUkNIQU5UQUJJTElUWSBvciBGSVRORVNTIEZPUiBBIFBBUlRJQ1VMQVIgUFVSUE9TRS4gIFNlZSB0aGVcbiAqIEdOVSBBZmZlcm8gR2VuZXJhbCBQdWJsaWMgTGljZW5zZSBmb3IgbW9yZSBkZXRhaWxzLlxuICpcbiAqIFlvdSBzaG91bGQgaGF2ZSByZWNlaXZlZCBhIGNvcHkgb2YgdGhlIEdOVSBBZmZlcm8gR2VuZXJhbCBQdWJsaWMgTGljZW5zZVxuICogYWxvbmcgd2l0aCBWaXZsaW9zdHlsZS5qcy4gIElmIG5vdCwgc2VlIDxodHRwOi8vd3d3LmdudS5vcmcvbGljZW5zZXMvPi5cbiAqXG4gKiBAZmlsZW92ZXJ2aWV3IENzc0Nhc2NhZGUgLSBDU1MgQ2FzY2FkZS5cbiAqL1xuaW1wb3J0ICogYXMgQXNzZXJ0cyBmcm9tIFwiLi9hc3NlcnRzXCI7XG5pbXBvcnQgKiBhcyBCYXNlIGZyb20gXCIuL2Jhc2VcIjtcbmltcG9ydCAqIGFzIENzcyBmcm9tIFwiLi9jc3NcIjtcbmltcG9ydCAqIGFzIENzc1BhcnNlciBmcm9tIFwiLi9jc3MtcGFyc2VyXCI7XG5pbXBvcnQgKiBhcyBDc3NQcm9wIGZyb20gXCIuL2Nzcy1wcm9wXCI7XG5pbXBvcnQgKiBhcyBDc3NUb2tlbml6ZXIgZnJvbSBcIi4vY3NzLXRva2VuaXplclwiO1xuaW1wb3J0ICogYXMgQ3NzVmFsaWRhdG9yIGZyb20gXCIuL2Nzcy12YWxpZGF0b3JcIjtcbmltcG9ydCAqIGFzIEV4cHJzIGZyb20gXCIuL2V4cHJzXCI7XG5pbXBvcnQgKiBhcyBMb2dnaW5nIGZyb20gXCIuL2xvZ2dpbmdcIjtcbmltcG9ydCAqIGFzIE1hdGNoZXJzIGZyb20gXCIuL21hdGNoZXJzXCI7XG5pbXBvcnQgKiBhcyBQbHVnaW4gZnJvbSBcIi4vcGx1Z2luXCI7XG5pbXBvcnQgKiBhcyBWdHJlZSBmcm9tIFwiLi92dHJlZVwiO1xuaW1wb3J0IHsgQ3NzQ2FzY2FkZSB9IGZyb20gXCIuL3R5cGVzXCI7XG5cbmV4cG9ydCBpbnRlcmZhY2UgRWxlbWVudFN0eWxlIGV4dGVuZHMgQ3NzQ2FzY2FkZS5FbGVtZW50U3R5bGUge31cblxuZXhwb3J0IGNvbnN0IGluaGVyaXRlZFByb3BzID0ge1xuICBhemltdXRoOiB0cnVlLFxuICBcImJvcmRlci1jb2xsYXBzZVwiOiB0cnVlLFxuICBcImJvcmRlci1zcGFjaW5nXCI6IHRydWUsXG4gIFwiY2FwdGlvbi1zaWRlXCI6IHRydWUsXG4gIFwiY2xpcC1ydWxlXCI6IHRydWUsXG4gIGNvbG9yOiB0cnVlLFxuICBcImNvbG9yLWludGVycG9sYXRpb25cIjogdHJ1ZSxcbiAgXCJjb2xvci1yZW5kZXJpbmdcIjogdHJ1ZSxcbiAgY3Vyc29yOiB0cnVlLFxuICBkaXJlY3Rpb246IHRydWUsXG4gIGVsZXZhdGlvbjogdHJ1ZSxcbiAgXCJlbXB0eS1jZWxsc1wiOiB0cnVlLFxuICBmaWxsOiB0cnVlLFxuICBcImZpbGwtb3BhY2l0eVwiOiB0cnVlLFxuICBcImZpbGwtcnVsZVwiOiB0cnVlLFxuICBcImZvbnQta2VybmluZ1wiOiB0cnVlLFxuICBcImZvbnQtc2l6ZVwiOiB0cnVlLFxuICBcImZvbnQtc2l6ZS1hZGp1c3RcIjogdHJ1ZSxcbiAgXCJmb250LWZhbWlseVwiOiB0cnVlLFxuICBcImZvbnQtZmVhdHVyZS1zZXR0aW5nc1wiOiB0cnVlLFxuICBcImZvbnQtc3R5bGVcIjogdHJ1ZSxcbiAgXCJmb250LXN0cmV0Y2hcIjogdHJ1ZSxcbiAgXCJmb250LXZhcmlhbnRcIjogdHJ1ZSxcbiAgXCJmb250LXdlaWdodFwiOiB0cnVlLFxuICBcImdseXBoLW9yaWVudGF0aW9uLXZlcnRpY2FsXCI6IHRydWUsXG4gIGh5cGhlbnM6IHRydWUsXG4gIFwiaHlwaGVuYXRlLWNoYXJhY3RlclwiOiB0cnVlLFxuICBcImh5cGhlbmF0ZS1saW1pdC1jaGFyc1wiOiB0cnVlLFxuICBcImh5cGhlbmF0ZS1saW1pdC1sYXN0XCI6IHRydWUsXG4gIFwiaW1hZ2UtcmVuZGVyaW5nXCI6IHRydWUsXG4gIFwiaW1hZ2UtcmVzb2x1dGlvblwiOiB0cnVlLFxuICBcImxldHRlci1zcGFjaW5nXCI6IHRydWUsXG4gIFwibGluZS1icmVha1wiOiB0cnVlLFxuICBcImxpbmUtaGVpZ2h0XCI6IHRydWUsXG4gIFwibGlzdC1zdHlsZS1pbWFnZVwiOiB0cnVlLFxuICBcImxpc3Qtc3R5bGUtcG9zaXRpb25cIjogdHJ1ZSxcbiAgXCJsaXN0LXN0eWxlLXR5cGVcIjogdHJ1ZSxcbiAgbWFya2VyOiB0cnVlLFxuICBcIm1hcmtlci1lbmRcIjogdHJ1ZSxcbiAgXCJtYXJrZXItbWlkXCI6IHRydWUsXG4gIFwibWFya2VyLXN0YXJ0XCI6IHRydWUsXG4gIG9ycGhhbnM6IHRydWUsXG4gIFwib3ZlcmZsb3ctd3JhcFwiOiB0cnVlLFxuICBcInBhaW50LW9yZGVyXCI6IHRydWUsXG4gIFwicG9pbnRlci1ldmVudHNcIjogdHJ1ZSxcbiAgXCJwaXRjaC1yYW5nZVwiOiB0cnVlLFxuICBxdW90ZXM6IHRydWUsXG4gIHJpY2huZXNzOiB0cnVlLFxuICBcInJ1YnktYWxpZ25cIjogdHJ1ZSxcbiAgXCJydWJ5LXBvc2l0aW9uXCI6IHRydWUsXG4gIFwic3BlYWstaGVhZGVyXCI6IHRydWUsXG4gIFwic3BlYWstbnVtZXJhbFwiOiB0cnVlLFxuICBcInNwZWFrLXB1bmN0dWF0aW9uXCI6IHRydWUsXG4gIFwic3BlZWNoLXJhdGVcIjogdHJ1ZSxcbiAgXCJzaGFwZS1yZW5kZXJpbmdcIjogdHJ1ZSxcbiAgc3RyZXNzOiB0cnVlLFxuICBzdHJva2U6IHRydWUsXG4gIFwic3Ryb2tlLWRhc2hhcnJheVwiOiB0cnVlLFxuICBcInN0cm9rZS1kYXNob2Zmc2V0XCI6IHRydWUsXG4gIFwic3Ryb2tlLWxpbmVjYXBcIjogdHJ1ZSxcbiAgXCJzdHJva2UtbGluZWpvaW5cIjogdHJ1ZSxcbiAgXCJzdHJva2UtbWl0ZXJsaW1pdFwiOiB0cnVlLFxuICBcInN0cm9rZS1vcGFjaXR5XCI6IHRydWUsXG4gIFwic3Ryb2tlLXdpZHRoXCI6IHRydWUsXG4gIFwidGFiLXNpemVcIjogdHJ1ZSxcbiAgXCJ0ZXh0LWFsaWduXCI6IHRydWUsXG4gIFwidGV4dC1hbGlnbi1sYXN0XCI6IHRydWUsXG4gIFwidGV4dC1hbmNob3JcIjogdHJ1ZSxcbiAgXCJ0ZXh0LWRlY29yYXRpb24tc2tpcFwiOiB0cnVlLFxuICBcInRleHQtZW1waGFzaXMtY29sb3JcIjogdHJ1ZSxcbiAgXCJ0ZXh0LWVtcGhhc2lzLXBvc2l0aW9uXCI6IHRydWUsXG4gIFwidGV4dC1lbXBoYXNpcy1zdHlsZVwiOiB0cnVlLFxuICBcInRleHQtY29tYmluZS11cHJpZ2h0XCI6IHRydWUsXG4gIFwidGV4dC1pbmRlbnRcIjogdHJ1ZSxcbiAgXCJ0ZXh0LWp1c3RpZnlcIjogdHJ1ZSxcbiAgXCJ0ZXh0LXJlbmRlcmluZ1wiOiB0cnVlLFxuICBcInRleHQtc2l6ZS1hZGp1c3RcIjogdHJ1ZSxcbiAgXCJ0ZXh0LXRyYW5zZm9ybVwiOiB0cnVlLFxuICBcInRleHQtdW5kZXJsaW5lLXBvc2l0aW9uXCI6IHRydWUsXG4gIHZpc2liaWxpdHk6IHRydWUsXG4gIFwidm9pY2UtZmFtaWx5XCI6IHRydWUsXG4gIHZvbHVtZTogdHJ1ZSxcbiAgXCJ3aGl0ZS1zcGFjZVwiOiB0cnVlLFxuICB3aWRvd3M6IHRydWUsXG4gIFwid29yZC1icmVha1wiOiB0cnVlLFxuICBcIndvcmQtc3BhY2luZ1wiOiB0cnVlLFxuICBcIndvcmQtd3JhcFwiOiB0cnVlLFxuICBcIndyaXRpbmctbW9kZVwiOiB0cnVlLFxufTtcblxuZXhwb3J0IGNvbnN0IHBvbHlmaWxsZWRJbmhlcml0ZWRQcm9wcyA9IFtcbiAgXCJib3gtZGVjb3JhdGlvbi1icmVha1wiLFxuICAvLyBUT0RPOiBib3gtZGVjb3JhdGlvbi1ibG9jayBzaG91bGQgbm90IGJlIGluaGVyaXRlZC5cbiAgLy8gaHR0cHM6Ly9naXRodWIuY29tL3Zpdmxpb3N0eWxlL3Zpdmxpb3N0eWxlLmpzL2lzc3Vlcy8yNTlcbiAgXCJpbWFnZS1yZXNvbHV0aW9uXCIsXG4gIFwib3JwaGFuc1wiLFxuICBcIndpZG93c1wiLFxuXTtcblxuZXhwb3J0IGZ1bmN0aW9uIGdldFBvbHlmaWxsZWRJbmhlcml0ZWRQcm9wcygpOiBzdHJpbmdbXSB7XG4gIGNvbnN0IGhvb2tzOiBQbHVnaW4uUG9seWZpbGxlZEluaGVyaXRlZFByb3BzSG9va1tdID0gUGx1Z2luLmdldEhvb2tzRm9yTmFtZShcbiAgICBQbHVnaW4uSE9PS1MuUE9MWUZJTExFRF9JTkhFUklURURfUFJPUFMsXG4gICk7XG4gIHJldHVybiBob29rcy5yZWR1Y2UoXG4gICAgKHByb3BzLCBmKSA9PiBwcm9wcy5jb25jYXQoZigpKSxcbiAgICBbXS5jb25jYXQocG9seWZpbGxlZEluaGVyaXRlZFByb3BzKSxcbiAgKTtcbn1cblxuZXhwb3J0IGNvbnN0IHN1cHBvcnRlZE5hbWVzcGFjZXMgPSB7XG4gIFwiaHR0cDovL3d3dy5pZHBmLm9yZy8yMDA3L29wc1wiOiB0cnVlLFxuICBcImh0dHA6Ly93d3cudzMub3JnLzE5OTkveGh0bWxcIjogdHJ1ZSxcbiAgXCJodHRwOi8vd3d3LnczLm9yZy8yMDAwL3N2Z1wiOiB0cnVlLFxufTtcblxuZXhwb3J0IGNvbnN0IGNvdXBsZWRQYXR0ZXJucyA9IFtcbiAgXCJtYXJnaW4tJVwiLFxuICBcInBhZGRpbmctJVwiLFxuICBcImJvcmRlci0lLXdpZHRoXCIsXG4gIFwiYm9yZGVyLSUtc3R5bGVcIixcbiAgXCJib3JkZXItJS1jb2xvclwiLFxuICBcIiVcIixcbl07XG5cbmV4cG9ydCBjb25zdCBjb3VwbGVkRXh0ZW50UGF0dGVybnMgPSBbXCJtYXgtJVwiLCBcIm1pbi0lXCIsIFwiJVwiXTtcblxuZXhwb3J0IGNvbnN0IGdlb21OYW1lczogeyBba2V5OiBzdHJpbmddOiBib29sZWFuIH0gPSAoKCkgPT4ge1xuICBjb25zdCBzaWRlcyA9IFtcImxlZnRcIiwgXCJyaWdodFwiLCBcInRvcFwiLCBcImJvdHRvbVwiXTtcbiAgY29uc3QgbmFtZXMgPSB7XG4gICAgd2lkdGg6IHRydWUsXG4gICAgaGVpZ2h0OiB0cnVlLFxuICAgIFwibWF4LXdpZHRoXCI6IHRydWUsXG4gICAgXCJtYXgtaGVpZ2h0XCI6IHRydWUsXG4gICAgXCJtaW4td2lkdGhcIjogdHJ1ZSxcbiAgICBcIm1pbi1oZWlnaHRcIjogdHJ1ZSxcbiAgfTtcbiAgZm9yIChsZXQgaSA9IDA7IGkgPCBjb3VwbGVkUGF0dGVybnMubGVuZ3RoOyBpKyspIHtcbiAgICBmb3IgKGxldCBrID0gMDsgayA8IHNpZGVzLmxlbmd0aDsgaysrKSB7XG4gICAgICBjb25zdCBuYW1lID0gY291cGxlZFBhdHRlcm5zW2ldLnJlcGxhY2UoXCIlXCIsIHNpZGVzW2tdKTtcbiAgICAgIG5hbWVzW25hbWVdID0gdHJ1ZTtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIG5hbWVzO1xufSkoKTtcblxuZXhwb3J0IGZ1bmN0aW9uIGJ1aWxkQ291cGxpbmdNYXAoXG4gIHNpZGVNYXA6IHsgW2tleTogc3RyaW5nXTogc3RyaW5nIH0sXG4gIGV4dGVudE1hcDogeyBba2V5OiBzdHJpbmddOiBzdHJpbmcgfSxcbik6IHsgW2tleTogc3RyaW5nXTogc3RyaW5nIH0ge1xuICBjb25zdCBtYXAgPSB7fTtcbiAgZm9yIChjb25zdCBwYXR0ZXJuIG9mIGNvdXBsZWRQYXR0ZXJucykge1xuICAgIGZvciAoY29uc3Qgc2lkZSBpbiBzaWRlTWFwKSB7XG4gICAgICBjb25zdCBuYW1lMSA9IHBhdHRlcm4ucmVwbGFjZShcIiVcIiwgc2lkZSk7XG4gICAgICBjb25zdCBuYW1lMiA9IHBhdHRlcm4ucmVwbGFjZShcIiVcIiwgc2lkZU1hcFtzaWRlXSk7XG4gICAgICBtYXBbbmFtZTFdID0gbmFtZTI7XG4gICAgICBtYXBbbmFtZTJdID0gbmFtZTE7XG4gICAgfVxuICB9XG4gIGZvciAoY29uc3QgZXh0ZW50UGF0dGVybiBvZiBjb3VwbGVkRXh0ZW50UGF0dGVybnMpIHtcbiAgICBmb3IgKGNvbnN0IGV4dGVudCBpbiBleHRlbnRNYXApIHtcbiAgICAgIGNvbnN0IG5hbWUxID0gZXh0ZW50UGF0dGVybi5yZXBsYWNlKFwiJVwiLCBleHRlbnQpO1xuICAgICAgY29uc3QgbmFtZTIgPSBleHRlbnRQYXR0ZXJuLnJlcGxhY2UoXCIlXCIsIGV4dGVudE1hcFtleHRlbnRdKTtcbiAgICAgIG1hcFtuYW1lMV0gPSBuYW1lMjtcbiAgICAgIG1hcFtuYW1lMl0gPSBuYW1lMTtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIG1hcDtcbn1cblxuZXhwb3J0IGNvbnN0IGNvdXBsaW5nTWFwVmVydCA9IGJ1aWxkQ291cGxpbmdNYXAoXG4gIHtcbiAgICBcImJsb2NrLXN0YXJ0XCI6IFwicmlnaHRcIixcbiAgICBcImJsb2NrLWVuZFwiOiBcImxlZnRcIixcbiAgICBcImlubGluZS1zdGFydFwiOiBcInRvcFwiLFxuICAgIFwiaW5saW5lLWVuZFwiOiBcImJvdHRvbVwiLFxuICB9LFxuICB7IFwiYmxvY2stc2l6ZVwiOiBcIndpZHRoXCIsIFwiaW5saW5lLXNpemVcIjogXCJoZWlnaHRcIiB9LFxuKTtcblxuZXhwb3J0IGNvbnN0IGNvdXBsaW5nTWFwSG9yID0gYnVpbGRDb3VwbGluZ01hcChcbiAge1xuICAgIFwiYmxvY2stc3RhcnRcIjogXCJ0b3BcIixcbiAgICBcImJsb2NrLWVuZFwiOiBcImJvdHRvbVwiLFxuICAgIFwiaW5saW5lLXN0YXJ0XCI6IFwibGVmdFwiLFxuICAgIFwiaW5saW5lLWVuZFwiOiBcInJpZ2h0XCIsXG4gIH0sXG4gIHsgXCJibG9jay1zaXplXCI6IFwiaGVpZ2h0XCIsIFwiaW5saW5lLXNpemVcIjogXCJ3aWR0aFwiIH0sXG4pO1xuXG5leHBvcnQgY29uc3QgY291cGxpbmdNYXBWZXJ0UnRsID0gYnVpbGRDb3VwbGluZ01hcChcbiAge1xuICAgIFwiYmxvY2stc3RhcnRcIjogXCJyaWdodFwiLFxuICAgIFwiYmxvY2stZW5kXCI6IFwibGVmdFwiLFxuICAgIFwiaW5saW5lLXN0YXJ0XCI6IFwiYm90dG9tXCIsXG4gICAgXCJpbmxpbmUtZW5kXCI6IFwidG9wXCIsXG4gIH0sXG4gIHsgXCJibG9jay1zaXplXCI6IFwid2lkdGhcIiwgXCJpbmxpbmUtc2l6ZVwiOiBcImhlaWdodFwiIH0sXG4pO1xuXG5leHBvcnQgY29uc3QgY291cGxpbmdNYXBIb3JSdGwgPSBidWlsZENvdXBsaW5nTWFwKFxuICB7XG4gICAgXCJibG9jay1zdGFydFwiOiBcInRvcFwiLFxuICAgIFwiYmxvY2stZW5kXCI6IFwiYm90dG9tXCIsXG4gICAgXCJpbmxpbmUtc3RhcnRcIjogXCJyaWdodFwiLFxuICAgIFwiaW5saW5lLWVuZFwiOiBcImxlZnRcIixcbiAgfSxcbiAgeyBcImJsb2NrLXNpemVcIjogXCJoZWlnaHRcIiwgXCJpbmxpbmUtc2l6ZVwiOiBcIndpZHRoXCIgfSxcbik7XG5cbmV4cG9ydCBjbGFzcyBDYXNjYWRlVmFsdWUge1xuICBjb25zdHJ1Y3RvcihcbiAgICBwdWJsaWMgcmVhZG9ubHkgdmFsdWU6IENzcy5WYWwsXG4gICAgcHVibGljIHJlYWRvbmx5IHByaW9yaXR5OiBudW1iZXIsXG4gICkge31cblxuICBnZXRCYXNlVmFsdWUoKTogQ2FzY2FkZVZhbHVlIHtcbiAgICByZXR1cm4gdGhpcztcbiAgfVxuXG4gIGZpbHRlclZhbHVlKHZpc2l0b3I6IENzcy5WaXNpdG9yKTogQ2FzY2FkZVZhbHVlIHtcbiAgICBjb25zdCB2YWx1ZSA9IHRoaXMudmFsdWUudmlzaXQodmlzaXRvcik7XG4gICAgaWYgKHZhbHVlID09PSB0aGlzLnZhbHVlKSB7XG4gICAgICByZXR1cm4gdGhpcztcbiAgICB9XG4gICAgcmV0dXJuIG5ldyBDYXNjYWRlVmFsdWUodmFsdWUsIHRoaXMucHJpb3JpdHkpO1xuICB9XG5cbiAgaW5jcmVhc2VTcGVjaWZpY2l0eShzcGVjaWZpY2l0eTogbnVtYmVyKTogQ2FzY2FkZVZhbHVlIHtcbiAgICBpZiAoc3BlY2lmaWNpdHkgPT0gMCkge1xuICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuICAgIHJldHVybiBuZXcgQ2FzY2FkZVZhbHVlKHRoaXMudmFsdWUsIHRoaXMucHJpb3JpdHkgKyBzcGVjaWZpY2l0eSk7XG4gIH1cblxuICBldmFsdWF0ZShjb250ZXh0OiBFeHBycy5Db250ZXh0LCBwcm9wTmFtZTogc3RyaW5nKTogQ3NzLlZhbCB7XG4gICAgcmV0dXJuIENzc1BhcnNlci5ldmFsdWF0ZUNTU1RvQ1NTKGNvbnRleHQsIHRoaXMudmFsdWUsIHByb3BOYW1lKTtcbiAgfVxuXG4gIGlzRW5hYmxlZChjb250ZXh0OiBFeHBycy5Db250ZXh0KTogYm9vbGVhbiB7XG4gICAgcmV0dXJuIHRydWU7XG4gIH1cbn1cblxuLyoqXG4gKiBJbnRlcm5hbCBzdWJjbGFzcyBvZiBDYXNjYWRlVmFsdWUuIFNob3VsZCBuZXZlciBiZSBzZWVuIG91dHNpZGUgb2YgdGhlXG4gKiBjYXNjYWRlIGVuZ2luZS5cbiAqL1xuZXhwb3J0IGNsYXNzIENvbmRpdGlvbmFsQ2FzY2FkZVZhbHVlIGV4dGVuZHMgQ2FzY2FkZVZhbHVlIHtcbiAgY29uc3RydWN0b3IoXG4gICAgdmFsdWU6IENzcy5WYWwsXG4gICAgcHJpb3JpdHk6IG51bWJlcixcbiAgICBwdWJsaWMgcmVhZG9ubHkgY29uZGl0aW9uOiBFeHBycy5WYWwsXG4gICkge1xuICAgIHN1cGVyKHZhbHVlLCBwcmlvcml0eSk7XG4gIH1cblxuICAvKipcbiAgICogQG92ZXJyaWRlXG4gICAqL1xuICBnZXRCYXNlVmFsdWUoKTogQ2FzY2FkZVZhbHVlIHtcbiAgICByZXR1cm4gbmV3IENhc2NhZGVWYWx1ZSh0aGlzLnZhbHVlLCB0aGlzLnByaW9yaXR5KTtcbiAgfVxuXG4gIC8qKlxuICAgKiBAb3ZlcnJpZGVcbiAgICovXG4gIGZpbHRlclZhbHVlKHZpc2l0b3I6IENzcy5WaXNpdG9yKTogQ2FzY2FkZVZhbHVlIHtcbiAgICBjb25zdCB2YWx1ZSA9IHRoaXMudmFsdWUudmlzaXQodmlzaXRvcik7XG4gICAgaWYgKHZhbHVlID09PSB0aGlzLnZhbHVlKSB7XG4gICAgICByZXR1cm4gdGhpcztcbiAgICB9XG4gICAgcmV0dXJuIG5ldyBDb25kaXRpb25hbENhc2NhZGVWYWx1ZSh2YWx1ZSwgdGhpcy5wcmlvcml0eSwgdGhpcy5jb25kaXRpb24pO1xuICB9XG5cbiAgLyoqXG4gICAqIEBvdmVycmlkZVxuICAgKi9cbiAgaW5jcmVhc2VTcGVjaWZpY2l0eShzcGVjaWZpY2l0eTogbnVtYmVyKTogQ2FzY2FkZVZhbHVlIHtcbiAgICBpZiAoc3BlY2lmaWNpdHkgPT0gMCkge1xuICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuICAgIHJldHVybiBuZXcgQ29uZGl0aW9uYWxDYXNjYWRlVmFsdWUoXG4gICAgICB0aGlzLnZhbHVlLFxuICAgICAgdGhpcy5wcmlvcml0eSArIHNwZWNpZmljaXR5LFxuICAgICAgdGhpcy5jb25kaXRpb24sXG4gICAgKTtcbiAgfVxuXG4gIGlzRW5hYmxlZChjb250ZXh0OiBFeHBycy5Db250ZXh0KTogYm9vbGVhbiB7XG4gICAgcmV0dXJuICEhdGhpcy5jb25kaXRpb24uZXZhbHVhdGUoY29udGV4dCk7XG4gIH1cbn1cblxuLyoqXG4gKiBAcGFyYW0gdHYgY3VycmVudCB2YWx1ZSAoY2Fubm90IGJlIGNvbmRpdGlvbmFsKVxuICogQHBhcmFtIGF2IGNhc2NhZGVkIHZhbHVlIChjYW4gYmUgY29uZGl0aW9uYWwpXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBjYXNjYWRlVmFsdWVzKFxuICBjb250ZXh0OiBFeHBycy5Db250ZXh0LFxuICB0djogQ2FzY2FkZVZhbHVlLFxuICBhdjogQ2FzY2FkZVZhbHVlLFxuKTogQ2FzY2FkZVZhbHVlIHtcbiAgaWYgKCh0diA9PSBudWxsIHx8IGF2LnByaW9yaXR5ID4gdHYucHJpb3JpdHkpICYmIGF2LmlzRW5hYmxlZChjb250ZXh0KSkge1xuICAgIHJldHVybiBhdi5nZXRCYXNlVmFsdWUoKTtcbiAgfVxuICByZXR1cm4gdHY7XG59XG5cbmV4cG9ydCB0eXBlIEVsZW1lbnRTdHlsZU1hcCA9IHtcbiAgW2tleTogc3RyaW5nXTogRWxlbWVudFN0eWxlO1xufTtcblxuZXhwb3J0IGNvbnN0IFNQRUNJQUxTID0ge1xuICBcInJlZ2lvbi1pZFwiOiB0cnVlLFxuICBcImZyYWdtZW50LXNlbGVjdG9yLWlkXCI6IHRydWUsXG59O1xuXG5leHBvcnQgZnVuY3Rpb24gaXNTcGVjaWFsTmFtZShuYW1lOiBzdHJpbmcpOiBib29sZWFuIHtcbiAgcmV0dXJuICEhU1BFQ0lBTFNbbmFtZV07XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBpc01hcE5hbWUobmFtZTogc3RyaW5nKTogYm9vbGVhbiB7XG4gIHJldHVybiBuYW1lLmNoYXJBdCgwKSA9PSBcIl9cIjtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGlzUHJvcE5hbWUobmFtZTogc3RyaW5nKTogYm9vbGVhbiB7XG4gIHJldHVybiBuYW1lLmNoYXJBdCgwKSAhPSBcIl9cIiAmJiAhU1BFQ0lBTFNbbmFtZV07XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBpc0luaGVyaXRlZChuYW1lOiBzdHJpbmcpOiBib29sZWFuIHtcbiAgcmV0dXJuICEhaW5oZXJpdGVkUHJvcHNbbmFtZV07XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBnZXRQcm9wKHN0eWxlOiBFbGVtZW50U3R5bGUsIG5hbWU6IHN0cmluZyk6IENhc2NhZGVWYWx1ZSB7XG4gIHJldHVybiBzdHlsZVtuYW1lXSBhcyBDYXNjYWRlVmFsdWU7XG59XG5cbi8qKlxuICogQHJldHVybiB2b2lkXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBzZXRQcm9wKFxuICBzdHlsZTogRWxlbWVudFN0eWxlLFxuICBuYW1lOiBzdHJpbmcsXG4gIHZhbHVlOiBDYXNjYWRlVmFsdWUsXG4pOiBhbnkge1xuICBpZiAoIXZhbHVlKSB7XG4gICAgZGVsZXRlIHN0eWxlW25hbWVdO1xuICB9IGVsc2Uge1xuICAgIHN0eWxlW25hbWVdID0gdmFsdWU7XG4gIH1cbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGdldFN0eWxlTWFwKFxuICBzdHlsZTogRWxlbWVudFN0eWxlLFxuICBuYW1lOiBzdHJpbmcsXG4pOiBFbGVtZW50U3R5bGVNYXAge1xuICByZXR1cm4gc3R5bGVbbmFtZV0gYXMgRWxlbWVudFN0eWxlTWFwO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gZ2V0TXV0YWJsZVN0eWxlTWFwKFxuICBzdHlsZTogRWxlbWVudFN0eWxlLFxuICBuYW1lOiBzdHJpbmcsXG4pOiBFbGVtZW50U3R5bGVNYXAge1xuICBsZXQgciA9IHN0eWxlW25hbWVdIGFzIEVsZW1lbnRTdHlsZU1hcDtcbiAgaWYgKCFyKSB7XG4gICAgciA9IHt9O1xuICAgIHN0eWxlW25hbWVdID0gcjtcbiAgfVxuICByZXR1cm4gcjtcbn1cblxuZXhwb3J0IGNvbnN0IGdldFZpZXdDb25kaXRpb25hbFN0eWxlTWFwID0gKFxuICBzdHlsZTogRWxlbWVudFN0eWxlLFxuKTogeyBtYXRjaGVyOiBNYXRjaGVycy5NYXRjaGVyOyBzdHlsZXM6IEVsZW1lbnRTdHlsZU1hcCB9W10gPT4ge1xuICBsZXQgciA9IHN0eWxlW1wiX3ZpZXdDb25kaXRpb25hbFN0eWxlc1wiXSBhcyB7XG4gICAgbWF0Y2hlcjogTWF0Y2hlcnMuTWF0Y2hlcjtcbiAgICBzdHlsZXM6IEVsZW1lbnRTdHlsZU1hcDtcbiAgfVtdO1xuICBpZiAoIXIpIHtcbiAgICByID0gW107XG4gICAgc3R5bGVbXCJfdmlld0NvbmRpdGlvbmFsU3R5bGVzXCJdID0gcjtcbiAgfVxuICByZXR1cm4gcjtcbn07XG5cbmV4cG9ydCBmdW5jdGlvbiBnZXRTcGVjaWFsKHN0eWxlOiBFbGVtZW50U3R5bGUsIG5hbWU6IHN0cmluZyk6IENhc2NhZGVWYWx1ZVtdIHtcbiAgcmV0dXJuIHN0eWxlW25hbWVdIGFzIENhc2NhZGVWYWx1ZVtdO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gZ2V0TXV0YWJsZVNwZWNpYWwoXG4gIHN0eWxlOiBFbGVtZW50U3R5bGUsXG4gIG5hbWU6IHN0cmluZyxcbik6IENhc2NhZGVWYWx1ZVtdIHtcbiAgbGV0IHIgPSBzdHlsZVtuYW1lXSBhcyBDYXNjYWRlVmFsdWVbXTtcbiAgaWYgKCFyKSB7XG4gICAgciA9IFtdO1xuICAgIHN0eWxlW25hbWVdID0gcjtcbiAgfVxuICByZXR1cm4gcjtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIG1lcmdlSW4oXG4gIGNvbnRleHQ6IEV4cHJzLkNvbnRleHQsXG4gIHRhcmdldDogRWxlbWVudFN0eWxlLFxuICBzdHlsZTogRWxlbWVudFN0eWxlLFxuICBzcGVjaWZpY2l0eTogbnVtYmVyLFxuICBwc2V1ZG9lbGVtZW50OiBzdHJpbmcgfCBudWxsLFxuICByZWdpb25JZDogc3RyaW5nIHwgbnVsbCxcbiAgdmlld0NvbmRpdGlvbk1hdGNoZXI6IE1hdGNoZXJzLk1hdGNoZXIgfCBudWxsLFxuKTogdm9pZCB7XG4gIGNvbnN0IGhpZXJhcmNoeSA9IFtcbiAgICB7IGlkOiBwc2V1ZG9lbGVtZW50LCBzdHlsZUtleTogXCJfcHNldWRvc1wiIH0sXG4gICAgeyBpZDogcmVnaW9uSWQsIHN0eWxlS2V5OiBcIl9yZWdpb25zXCIgfSxcbiAgXTtcbiAgaGllcmFyY2h5LmZvckVhY2goKGl0ZW0pID0+IHtcbiAgICBpZiAoaXRlbS5pZCkge1xuICAgICAgY29uc3Qgc3R5bGVNYXAgPSBnZXRNdXRhYmxlU3R5bGVNYXAodGFyZ2V0LCBpdGVtLnN0eWxlS2V5KTtcbiAgICAgIHRhcmdldCA9IHN0eWxlTWFwW2l0ZW0uaWRdO1xuICAgICAgaWYgKCF0YXJnZXQpIHtcbiAgICAgICAgdGFyZ2V0ID0ge30gYXMgRWxlbWVudFN0eWxlO1xuICAgICAgICBzdHlsZU1hcFtpdGVtLmlkXSA9IHRhcmdldDtcbiAgICAgIH1cbiAgICB9XG4gIH0pO1xuICBpZiAodmlld0NvbmRpdGlvbk1hdGNoZXIpIHtcbiAgICBjb25zdCBzdHlsZU1hcCA9IGdldFZpZXdDb25kaXRpb25hbFN0eWxlTWFwKHRhcmdldCk7XG4gICAgdGFyZ2V0ID0ge30gYXMgRWxlbWVudFN0eWxlO1xuICAgIHN0eWxlTWFwLnB1c2goe1xuICAgICAgc3R5bGVzOiB0YXJnZXQgYXMgRWxlbWVudFN0eWxlTWFwLFxuICAgICAgbWF0Y2hlcjogdmlld0NvbmRpdGlvbk1hdGNoZXIsXG4gICAgfSk7XG4gIH1cbiAgZm9yIChjb25zdCBwcm9wIGluIHN0eWxlKSB7XG4gICAgaWYgKGlzTWFwTmFtZShwcm9wKSkge1xuICAgICAgY29udGludWU7XG4gICAgfVxuICAgIGlmIChpc1NwZWNpYWxOYW1lKHByb3ApKSB7XG4gICAgICAvLyBzcGVjaWFsIHByb3BlcnRpZXM6IGxpc3Qgb2YgYWxsIGFzc2lnbmVkIHZhbHVlc1xuICAgICAgY29uc3QgYXMgPSBnZXRTcGVjaWFsKHN0eWxlLCBwcm9wKTtcbiAgICAgIGNvbnN0IHRzID0gZ2V0TXV0YWJsZVNwZWNpYWwodGFyZ2V0LCBwcm9wKTtcbiAgICAgIEFycmF5LnByb3RvdHlwZS5wdXNoLmFwcGx5KHRzLCBhcyk7XG4gICAgfSBlbHNlIHtcbiAgICAgIC8vIHJlZ3VsYXIgcHJvcGVydGllczogaGlnaGVyIHByaW9yaXR5IHdpbnNcbiAgICAgIGNvbnN0IGF2ID0gZ2V0UHJvcChzdHlsZSwgcHJvcCkuaW5jcmVhc2VTcGVjaWZpY2l0eShzcGVjaWZpY2l0eSk7XG4gICAgICBjb25zdCB0diA9IGdldFByb3AodGFyZ2V0LCBwcm9wKTtcbiAgICAgIHNldFByb3AodGFyZ2V0LCBwcm9wLCBjYXNjYWRlVmFsdWVzKGNvbnRleHQsIHR2LCBhdikpO1xuICAgIH1cbiAgfVxufVxuXG5leHBvcnQgZnVuY3Rpb24gbWVyZ2VBbGwoXG4gIGNvbnRleHQ6IEV4cHJzLkNvbnRleHQsXG4gIHN0eWxlczogRWxlbWVudFN0eWxlW10sXG4pOiBFbGVtZW50U3R5bGUge1xuICBjb25zdCB0YXJnZXQgPSB7fSBhcyBFbGVtZW50U3R5bGU7XG4gIGZvciAobGV0IGsgPSAwOyBrIDwgc3R5bGVzLmxlbmd0aDsgaysrKSB7XG4gICAgbWVyZ2VJbihjb250ZXh0LCB0YXJnZXQsIHN0eWxlc1trXSwgMCwgbnVsbCwgbnVsbCwgbnVsbCk7XG4gIH1cbiAgcmV0dXJuIHRhcmdldDtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGNoYWluQWN0aW9ucyhcbiAgY2hhaW46IENoYWluZWRBY3Rpb25bXSxcbiAgYWN0aW9uOiBDYXNjYWRlQWN0aW9uLFxuKTogQ2FzY2FkZUFjdGlvbiB7XG4gIGlmIChjaGFpbi5sZW5ndGggPiAwKSB7XG4gICAgY2hhaW4uc29ydCgoYSwgYikgPT4gYi5nZXRQcmlvcml0eSgpIC0gYS5nZXRQcmlvcml0eSgpKTtcbiAgICBsZXQgY2hhaW5lZDogQ2hhaW5lZEFjdGlvbiB8IG51bGwgPSBudWxsO1xuICAgIGZvciAobGV0IGkgPSBjaGFpbi5sZW5ndGggLSAxOyBpID49IDA7IGktLSkge1xuICAgICAgY2hhaW5lZCA9IGNoYWluW2ldO1xuICAgICAgY2hhaW5lZC5jaGFpbmVkID0gYWN0aW9uO1xuICAgICAgYWN0aW9uID0gY2hhaW5lZDtcbiAgICB9XG4gICAgcmV0dXJuIGNoYWluZWQ7XG4gIH1cbiAgcmV0dXJuIGFjdGlvbjtcbn1cblxuZXhwb3J0IGNsYXNzIEluaGVyaXRhbmNlVmlzaXRvciBleHRlbmRzIENzcy5GaWx0ZXJWaXNpdG9yIHtcbiAgcHJvcE5hbWU6IHN0cmluZyA9IFwiXCI7XG5cbiAgY29uc3RydWN0b3IoXG4gICAgcHVibGljIHJlYWRvbmx5IHByb3BzOiBFbGVtZW50U3R5bGUsXG4gICAgcHVibGljIHJlYWRvbmx5IGNvbnRleHQ6IEV4cHJzLkNvbnRleHQsXG4gICkge1xuICAgIHN1cGVyKCk7XG4gIH1cblxuICBzZXRQcm9wTmFtZShuYW1lOiBzdHJpbmcpOiB2b2lkIHtcbiAgICB0aGlzLnByb3BOYW1lID0gbmFtZTtcbiAgfVxuXG4gIHByaXZhdGUgZ2V0Rm9udFNpemUoKSB7XG4gICAgY29uc3QgY2FzY3ZhbCA9IGdldFByb3AodGhpcy5wcm9wcywgXCJmb250LXNpemVcIik7XG4gICAgY29uc3QgbiA9IGNhc2N2YWwudmFsdWUgYXMgQ3NzLk51bWVyaWM7XG4gICAgaWYgKCFFeHBycy5pc0Fic29sdXRlTGVuZ3RoVW5pdChuLnVuaXQpKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoXCJVbmV4cGVjdGVkIHN0YXRlXCIpO1xuICAgIH1cbiAgICByZXR1cm4gbi5udW0gKiBFeHBycy5kZWZhdWx0VW5pdFNpemVzW24udW5pdF07XG4gIH1cblxuICAvKipcbiAgICogQG92ZXJyaWRlXG4gICAqL1xuICB2aXNpdE51bWVyaWMobnVtZXJpYzogQ3NzLk51bWVyaWMpOiBDc3MuVmFsIHtcbiAgICBBc3NlcnRzLmFzc2VydCh0aGlzLmNvbnRleHQpO1xuICAgIGlmICh0aGlzLnByb3BOYW1lID09PSBcImZvbnQtc2l6ZVwiKSB7XG4gICAgICByZXR1cm4gY29udmVydEZvbnRTaXplVG9QeChudW1lcmljLCB0aGlzLmdldEZvbnRTaXplKCksIHRoaXMuY29udGV4dCk7XG4gICAgfSBlbHNlIGlmIChcbiAgICAgIG51bWVyaWMudW5pdCA9PSBcImVtXCIgfHxcbiAgICAgIG51bWVyaWMudW5pdCA9PSBcImV4XCIgfHxcbiAgICAgIG51bWVyaWMudW5pdCA9PSBcInJlbVwiXG4gICAgKSB7XG4gICAgICByZXR1cm4gY29udmVydEZvbnRSZWxhdGl2ZUxlbmd0aFRvUHgoXG4gICAgICAgIG51bWVyaWMsXG4gICAgICAgIHRoaXMuZ2V0Rm9udFNpemUoKSxcbiAgICAgICAgdGhpcy5jb250ZXh0LFxuICAgICAgKTtcbiAgICB9IGVsc2UgaWYgKG51bWVyaWMudW5pdCA9PSBcIiVcIikge1xuICAgICAgaWYgKHRoaXMucHJvcE5hbWUgPT09IFwibGluZS1oZWlnaHRcIikge1xuICAgICAgICByZXR1cm4gbnVtZXJpYztcbiAgICAgIH1cbiAgICAgIGNvbnN0IHVuaXQgPSB0aGlzLnByb3BOYW1lLm1hdGNoKC9oZWlnaHR8Xih0b3B8Ym90dG9tKSQvKSA/IFwidmhcIiA6IFwidndcIjtcbiAgICAgIHJldHVybiBuZXcgQ3NzLk51bWVyaWMobnVtZXJpYy5udW0sIHVuaXQpO1xuICAgIH1cbiAgICByZXR1cm4gbnVtZXJpYztcbiAgfVxuXG4gIC8qKlxuICAgKiBAb3ZlcnJpZGVcbiAgICovXG4gIHZpc2l0RXhwcihleHByOiBDc3MuRXhwcik6IENzcy5WYWwge1xuICAgIGlmICh0aGlzLnByb3BOYW1lID09IFwiZm9udC1zaXplXCIpIHtcbiAgICAgIGNvbnN0IHZhbCA9IENzc1BhcnNlci5ldmFsdWF0ZUNTU1RvQ1NTKHRoaXMuY29udGV4dCwgZXhwciwgdGhpcy5wcm9wTmFtZSk7XG4gICAgICByZXR1cm4gdmFsLnZpc2l0KHRoaXMpO1xuICAgIH1cbiAgICByZXR1cm4gZXhwcjtcbiAgfVxufVxuXG5leHBvcnQgZnVuY3Rpb24gY29udmVydEZvbnRSZWxhdGl2ZUxlbmd0aFRvUHgoXG4gIG51bWVyaWM6IENzcy5OdW1lcmljLFxuICBiYXNlRm9udFNpemU6IG51bWJlcixcbiAgY29udGV4dDogRXhwcnMuQ29udGV4dCxcbik6IENzcy5OdW1lcmljIHtcbiAgY29uc3QgdW5pdCA9IG51bWVyaWMudW5pdDtcbiAgY29uc3QgbnVtID0gbnVtZXJpYy5udW07XG4gIGlmICh1bml0ID09PSBcImVtXCIgfHwgdW5pdCA9PT0gXCJleFwiKSB7XG4gICAgY29uc3QgcmF0aW8gPSBFeHBycy5kZWZhdWx0VW5pdFNpemVzW3VuaXRdIC8gRXhwcnMuZGVmYXVsdFVuaXRTaXplc1tcImVtXCJdO1xuICAgIHJldHVybiBuZXcgQ3NzLk51bWVyaWMobnVtICogcmF0aW8gKiBiYXNlRm9udFNpemUsIFwicHhcIik7XG4gIH0gZWxzZSBpZiAodW5pdCA9PT0gXCJyZW1cIikge1xuICAgIHJldHVybiBuZXcgQ3NzLk51bWVyaWMobnVtICogY29udGV4dC5mb250U2l6ZSgpLCBcInB4XCIpO1xuICB9IGVsc2Uge1xuICAgIHJldHVybiBudW1lcmljO1xuICB9XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBjb252ZXJ0Rm9udFNpemVUb1B4KFxuICBudW1lcmljOiBDc3MuTnVtZXJpYyxcbiAgcGFyZW50Rm9udFNpemU6IG51bWJlcixcbiAgY29udGV4dDogRXhwcnMuQ29udGV4dCxcbik6IENzcy5OdW1lcmljIHtcbiAgbnVtZXJpYyA9IGNvbnZlcnRGb250UmVsYXRpdmVMZW5ndGhUb1B4KG51bWVyaWMsIHBhcmVudEZvbnRTaXplLCBjb250ZXh0KTtcbiAgY29uc3QgdW5pdCA9IG51bWVyaWMudW5pdDtcbiAgY29uc3QgbnVtID0gbnVtZXJpYy5udW07XG4gIGlmICh1bml0ID09PSBcInB4XCIpIHtcbiAgICByZXR1cm4gbnVtZXJpYztcbiAgfSBlbHNlIGlmICh1bml0ID09PSBcIiVcIikge1xuICAgIHJldHVybiBuZXcgQ3NzLk51bWVyaWMoKG51bSAvIDEwMCkgKiBwYXJlbnRGb250U2l6ZSwgXCJweFwiKTtcbiAgfSBlbHNlIHtcbiAgICByZXR1cm4gbmV3IENzcy5OdW1lcmljKG51bSAqIGNvbnRleHQucXVlcnlVbml0U2l6ZSh1bml0LCBmYWxzZSksIFwicHhcIik7XG4gIH1cbn1cblxuZXhwb3J0IHR5cGUgQWN0aW9uVGFibGUgPSB7XG4gIFtrZXk6IHN0cmluZ106IENhc2NhZGVBY3Rpb247XG59O1xuXG5leHBvcnQgY2xhc3MgQ2FzY2FkZUFjdGlvbiB7XG4gIGFwcGx5KGNhc2NhZGVJbnN0YW5jZTogQ2FzY2FkZUluc3RhbmNlKTogdm9pZCB7fVxuXG4gIG1lcmdlV2l0aChvdGhlcjogQ2FzY2FkZUFjdGlvbik6IENhc2NhZGVBY3Rpb24ge1xuICAgIHJldHVybiBuZXcgQ29tcG91bmRBY3Rpb24oW3RoaXMsIG90aGVyXSk7XG4gIH1cblxuICBjbG9uZSgpOiBDYXNjYWRlQWN0aW9uIHtcbiAgICAvLyBNdXRhYmxlIGFjdGlvbnMgd2lsbCBvdmVycmlkZVxuICAgIHJldHVybiB0aGlzO1xuICB9XG59XG5cbmV4cG9ydCBjbGFzcyBDb25kaXRpb25JdGVtQWN0aW9uIGV4dGVuZHMgQ2FzY2FkZUFjdGlvbiB7XG4gIGNvbnN0cnVjdG9yKHB1YmxpYyByZWFkb25seSBjb25kaXRpb25JdGVtOiBDb25kaXRpb25JdGVtKSB7XG4gICAgc3VwZXIoKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBAb3ZlcnJpZGVcbiAgICovXG4gIGFwcGx5KGNhc2NhZGVJbnN0YW5jZTogQ2FzY2FkZUluc3RhbmNlKTogdm9pZCB7XG4gICAgY2FzY2FkZUluc3RhbmNlLnB1c2hDb25kaXRpb25JdGVtKFxuICAgICAgdGhpcy5jb25kaXRpb25JdGVtLmZyZXNoKGNhc2NhZGVJbnN0YW5jZSksXG4gICAgKTtcbiAgfVxufVxuXG5leHBvcnQgY2xhc3MgQ29tcG91bmRBY3Rpb24gZXh0ZW5kcyBDYXNjYWRlQWN0aW9uIHtcbiAgY29uc3RydWN0b3IocHVibGljIHJlYWRvbmx5IGxpc3Q6IENhc2NhZGVBY3Rpb25bXSkge1xuICAgIHN1cGVyKCk7XG4gIH1cblxuICAvKipcbiAgICogQG92ZXJyaWRlXG4gICAqL1xuICBhcHBseShjYXNjYWRlSW5zdGFuY2U6IENhc2NhZGVJbnN0YW5jZSk6IHZvaWQge1xuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgdGhpcy5saXN0Lmxlbmd0aDsgaSsrKSB7XG4gICAgICB0aGlzLmxpc3RbaV0uYXBwbHkoY2FzY2FkZUluc3RhbmNlKTtcbiAgICB9XG4gIH1cblxuICAvKipcbiAgICogQG92ZXJyaWRlXG4gICAqL1xuICBtZXJnZVdpdGgob3RoZXI6IENhc2NhZGVBY3Rpb24pOiBDYXNjYWRlQWN0aW9uIHtcbiAgICB0aGlzLmxpc3QucHVzaChvdGhlcik7XG4gICAgcmV0dXJuIHRoaXM7XG4gIH1cblxuICAvKipcbiAgICogQG92ZXJyaWRlXG4gICAqL1xuICBjbG9uZSgpOiBDYXNjYWRlQWN0aW9uIHtcbiAgICByZXR1cm4gbmV3IENvbXBvdW5kQWN0aW9uKFtdLmNvbmNhdCh0aGlzLmxpc3QpKTtcbiAgfVxufVxuXG5leHBvcnQgY2xhc3MgQXBwbHlSdWxlQWN0aW9uIGV4dGVuZHMgQ2FzY2FkZUFjdGlvbiB7XG4gIGNvbnN0cnVjdG9yKFxuICAgIHB1YmxpYyByZWFkb25seSBzdHlsZTogRWxlbWVudFN0eWxlLFxuICAgIHB1YmxpYyByZWFkb25seSBzcGVjaWZpY2l0eTogbnVtYmVyLFxuICAgIHB1YmxpYyByZWFkb25seSBwc2V1ZG9lbGVtZW50OiBzdHJpbmcgfCBudWxsLFxuICAgIHB1YmxpYyByZWFkb25seSByZWdpb25JZDogc3RyaW5nIHwgbnVsbCxcbiAgICBwdWJsaWMgcmVhZG9ubHkgdmlld0NvbmRpdGlvbklkOiBzdHJpbmcgfCBudWxsLFxuICApIHtcbiAgICBzdXBlcigpO1xuICB9XG5cbiAgLyoqXG4gICAqIEBvdmVycmlkZVxuICAgKi9cbiAgYXBwbHkoY2FzY2FkZUluc3RhbmNlOiBDYXNjYWRlSW5zdGFuY2UpOiB2b2lkIHtcbiAgICBtZXJnZUluKFxuICAgICAgY2FzY2FkZUluc3RhbmNlLmNvbnRleHQsXG4gICAgICBjYXNjYWRlSW5zdGFuY2UuY3VycmVudFN0eWxlLFxuICAgICAgdGhpcy5zdHlsZSxcbiAgICAgIHRoaXMuc3BlY2lmaWNpdHksXG4gICAgICB0aGlzLnBzZXVkb2VsZW1lbnQsXG4gICAgICB0aGlzLnJlZ2lvbklkLFxuICAgICAgY2FzY2FkZUluc3RhbmNlLmJ1aWxkVmlld0NvbmRpdGlvbk1hdGNoZXIodGhpcy52aWV3Q29uZGl0aW9uSWQpLFxuICAgICk7XG4gIH1cbn1cblxuZXhwb3J0IGNsYXNzIENoYWluZWRBY3Rpb24gZXh0ZW5kcyBDYXNjYWRlQWN0aW9uIHtcbiAgY2hhaW5lZDogQ2FzY2FkZUFjdGlvbiA9IG51bGw7XG5cbiAgY29uc3RydWN0b3IoKSB7XG4gICAgc3VwZXIoKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBAb3ZlcnJpZGVcbiAgICovXG4gIGFwcGx5KGNhc2NhZGVJbnN0YW5jZTogQ2FzY2FkZUluc3RhbmNlKTogdm9pZCB7XG4gICAgdGhpcy5jaGFpbmVkLmFwcGx5KGNhc2NhZGVJbnN0YW5jZSk7XG4gIH1cblxuICBnZXRQcmlvcml0eSgpOiBudW1iZXIge1xuICAgIHJldHVybiAwO1xuICB9XG5cbiAgbWFrZVByaW1hcnkoY2FzY2FkZTogQ2FzY2FkZSk6IGJvb2xlYW4ge1xuICAgIC8vIGNhbm5vdCBiZSBtYWRlIHByaW1hcnlcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cbn1cblxuZXhwb3J0IGNsYXNzIENoZWNrQ2xhc3NBY3Rpb24gZXh0ZW5kcyBDaGFpbmVkQWN0aW9uIHtcbiAgY29uc3RydWN0b3IocHVibGljIHJlYWRvbmx5IGNsYXNzTmFtZTogc3RyaW5nKSB7XG4gICAgc3VwZXIoKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBAb3ZlcnJpZGVcbiAgICovXG4gIGFwcGx5KGNhc2NhZGVJbnN0YW5jZTogQ2FzY2FkZUluc3RhbmNlKTogdm9pZCB7XG4gICAgaWYgKGNhc2NhZGVJbnN0YW5jZS5jdXJyZW50Q2xhc3NOYW1lcy5pbmNsdWRlcyh0aGlzLmNsYXNzTmFtZSkpIHtcbiAgICAgIHRoaXMuY2hhaW5lZC5hcHBseShjYXNjYWRlSW5zdGFuY2UpO1xuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAgKiBAb3ZlcnJpZGVcbiAgICovXG4gIGdldFByaW9yaXR5KCk6IG51bWJlciB7XG4gICAgcmV0dXJuIDEwO1xuICB9XG4gIC8vIGNsYXNzIHNob3VsZCBiZSBjaGVja2VkIGFmdGVyIGlkXG5cbiAgLyoqXG4gICAqIEBvdmVycmlkZVxuICAgKi9cbiAgbWFrZVByaW1hcnkoY2FzY2FkZTogQ2FzY2FkZSk6IGJvb2xlYW4ge1xuICAgIGlmICh0aGlzLmNoYWluZWQpIHtcbiAgICAgIGNhc2NhZGUuaW5zZXJ0SW5UYWJsZShjYXNjYWRlLmNsYXNzZXMsIHRoaXMuY2xhc3NOYW1lLCB0aGlzLmNoYWluZWQpO1xuICAgIH1cbiAgICByZXR1cm4gdHJ1ZTtcbiAgfVxufVxuXG5leHBvcnQgY2xhc3MgQ2hlY2tJZEFjdGlvbiBleHRlbmRzIENoYWluZWRBY3Rpb24ge1xuICBjb25zdHJ1Y3RvcihwdWJsaWMgcmVhZG9ubHkgaWQ6IHN0cmluZykge1xuICAgIHN1cGVyKCk7XG4gIH1cblxuICAvKipcbiAgICogQG92ZXJyaWRlXG4gICAqL1xuICBhcHBseShjYXNjYWRlSW5zdGFuY2U6IENhc2NhZGVJbnN0YW5jZSk6IHZvaWQge1xuICAgIGlmIChcbiAgICAgIGNhc2NhZGVJbnN0YW5jZS5jdXJyZW50SWQgPT0gdGhpcy5pZCB8fFxuICAgICAgY2FzY2FkZUluc3RhbmNlLmN1cnJlbnRYbWxJZCA9PSB0aGlzLmlkXG4gICAgKSB7XG4gICAgICB0aGlzLmNoYWluZWQuYXBwbHkoY2FzY2FkZUluc3RhbmNlKTtcbiAgICB9XG4gIH1cblxuICAvKipcbiAgICogQG92ZXJyaWRlXG4gICAqL1xuICBnZXRQcmlvcml0eSgpOiBudW1iZXIge1xuICAgIHJldHVybiAxMTtcbiAgfVxuICAvLyBpZCBzaG91bGQgYmUgY2hlY2tlZCBhZnRlciA6cm9vdFxuXG4gIC8qKlxuICAgKiBAb3ZlcnJpZGVcbiAgICovXG4gIG1ha2VQcmltYXJ5KGNhc2NhZGU6IENhc2NhZGUpOiBib29sZWFuIHtcbiAgICBpZiAodGhpcy5jaGFpbmVkKSB7XG4gICAgICBjYXNjYWRlLmluc2VydEluVGFibGUoY2FzY2FkZS5pZHMsIHRoaXMuaWQsIHRoaXMuY2hhaW5lZCk7XG4gICAgfVxuICAgIHJldHVybiB0cnVlO1xuICB9XG59XG5cbmV4cG9ydCBjbGFzcyBDaGVja0xvY2FsTmFtZUFjdGlvbiBleHRlbmRzIENoYWluZWRBY3Rpb24ge1xuICBjb25zdHJ1Y3RvcihwdWJsaWMgcmVhZG9ubHkgbG9jYWxOYW1lOiBzdHJpbmcpIHtcbiAgICBzdXBlcigpO1xuICB9XG5cbiAgLyoqXG4gICAqIEBvdmVycmlkZVxuICAgKi9cbiAgYXBwbHkoY2FzY2FkZUluc3RhbmNlOiBDYXNjYWRlSW5zdGFuY2UpOiB2b2lkIHtcbiAgICBpZiAoY2FzY2FkZUluc3RhbmNlLmN1cnJlbnRMb2NhbE5hbWUgPT0gdGhpcy5sb2NhbE5hbWUpIHtcbiAgICAgIHRoaXMuY2hhaW5lZC5hcHBseShjYXNjYWRlSW5zdGFuY2UpO1xuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAgKiBAb3ZlcnJpZGVcbiAgICovXG4gIGdldFByaW9yaXR5KCk6IG51bWJlciB7XG4gICAgcmV0dXJuIDg7XG4gIH1cbiAgLy8gdGFnIGlzIGEgcHJldHR5IGdvb2QgdGhpbmcgdG8gY2hlY2ssIGFmdGVyIGVwdWI6dHlwZVxuXG4gIC8qKlxuICAgKiBAb3ZlcnJpZGVcbiAgICovXG4gIG1ha2VQcmltYXJ5KGNhc2NhZGU6IENhc2NhZGUpOiBib29sZWFuIHtcbiAgICBpZiAodGhpcy5jaGFpbmVkKSB7XG4gICAgICBjYXNjYWRlLmluc2VydEluVGFibGUoY2FzY2FkZS50YWdzLCB0aGlzLmxvY2FsTmFtZSwgdGhpcy5jaGFpbmVkKTtcbiAgICB9XG4gICAgcmV0dXJuIHRydWU7XG4gIH1cbn1cblxuZXhwb3J0IGNsYXNzIENoZWNrTlNUYWdBY3Rpb24gZXh0ZW5kcyBDaGFpbmVkQWN0aW9uIHtcbiAgY29uc3RydWN0b3IocHVibGljIHJlYWRvbmx5IG5zOiBzdHJpbmcsIHB1YmxpYyByZWFkb25seSBsb2NhbE5hbWU6IHN0cmluZykge1xuICAgIHN1cGVyKCk7XG4gIH1cblxuICAvKipcbiAgICogQG92ZXJyaWRlXG4gICAqL1xuICBhcHBseShjYXNjYWRlSW5zdGFuY2U6IENhc2NhZGVJbnN0YW5jZSk6IHZvaWQge1xuICAgIGlmIChcbiAgICAgIGNhc2NhZGVJbnN0YW5jZS5jdXJyZW50TG9jYWxOYW1lID09IHRoaXMubG9jYWxOYW1lICYmXG4gICAgICBjYXNjYWRlSW5zdGFuY2UuY3VycmVudE5hbWVzcGFjZSA9PSB0aGlzLm5zXG4gICAgKSB7XG4gICAgICB0aGlzLmNoYWluZWQuYXBwbHkoY2FzY2FkZUluc3RhbmNlKTtcbiAgICB9XG4gIH1cblxuICAvKipcbiAgICogQG92ZXJyaWRlXG4gICAqL1xuICBnZXRQcmlvcml0eSgpOiBudW1iZXIge1xuICAgIHJldHVybiA4O1xuICB9XG4gIC8vIHRhZyBpcyBhIHByZXR0eSBnb29kIHRoaW5nIHRvIGNoZWNrLCBhZnRlciBlcHViOnR5cGVcblxuICAvKipcbiAgICogQG92ZXJyaWRlXG4gICAqL1xuICBtYWtlUHJpbWFyeShjYXNjYWRlOiBDYXNjYWRlKTogYm9vbGVhbiB7XG4gICAgaWYgKHRoaXMuY2hhaW5lZCkge1xuICAgICAgbGV0IHByZWZpeCA9IGNhc2NhZGUubnNQcmVmaXhbdGhpcy5uc107XG4gICAgICBpZiAoIXByZWZpeCkge1xuICAgICAgICBwcmVmaXggPSBgbnMke2Nhc2NhZGUubnNDb3VudCsrfTpgO1xuICAgICAgICBjYXNjYWRlLm5zUHJlZml4W3RoaXMubnNdID0gcHJlZml4O1xuICAgICAgfVxuICAgICAgY29uc3QgbnNUYWcgPSBwcmVmaXggKyB0aGlzLmxvY2FsTmFtZTtcbiAgICAgIGNhc2NhZGUuaW5zZXJ0SW5UYWJsZShjYXNjYWRlLm5zdGFncywgbnNUYWcsIHRoaXMuY2hhaW5lZCk7XG4gICAgfVxuICAgIHJldHVybiB0cnVlO1xuICB9XG59XG5cbmV4cG9ydCBjbGFzcyBDaGVja1RhcmdldEVwdWJUeXBlQWN0aW9uIGV4dGVuZHMgQ2hhaW5lZEFjdGlvbiB7XG4gIGNvbnN0cnVjdG9yKHB1YmxpYyByZWFkb25seSBlcHViVHlwZVBhdHQ6IFJlZ0V4cCkge1xuICAgIHN1cGVyKCk7XG4gIH1cblxuICAvKipcbiAgICogQG92ZXJyaWRlXG4gICAqL1xuICBhcHBseShjYXNjYWRlSW5zdGFuY2U6IENhc2NhZGVJbnN0YW5jZSk6IHZvaWQge1xuICAgIGNvbnN0IGVsZW0gPSBjYXNjYWRlSW5zdGFuY2UuY3VycmVudEVsZW1lbnQ7XG4gICAgaWYgKGVsZW0gJiYgY2FzY2FkZUluc3RhbmNlLmN1cnJlbnRMb2NhbE5hbWUgPT0gXCJhXCIpIHtcbiAgICAgIGNvbnN0IGhyZWYgPSBlbGVtLmdldEF0dHJpYnV0ZShcImhyZWZcIik7XG4gICAgICBpZiAoaHJlZiAmJiBocmVmLm1hdGNoKC9eIy8pKSB7XG4gICAgICAgIGNvbnN0IGlkID0gaHJlZi5zdWJzdHJpbmcoMSk7XG4gICAgICAgIGNvbnN0IHRhcmdldCA9IGVsZW0ub3duZXJEb2N1bWVudC5nZXRFbGVtZW50QnlJZChpZCk7XG4gICAgICAgIGlmICh0YXJnZXQpIHtcbiAgICAgICAgICBjb25zdCBlcHViVHlwZSA9IHRhcmdldC5nZXRBdHRyaWJ1dGVOUyhCYXNlLk5TLmVwdWIsIFwidHlwZVwiKTtcbiAgICAgICAgICBpZiAoZXB1YlR5cGUgJiYgZXB1YlR5cGUubWF0Y2godGhpcy5lcHViVHlwZVBhdHQpKSB7XG4gICAgICAgICAgICB0aGlzLmNoYWluZWQuYXBwbHkoY2FzY2FkZUluc3RhbmNlKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gIH1cbn1cblxuZXhwb3J0IGNsYXNzIENoZWNrTmFtZXNwYWNlQWN0aW9uIGV4dGVuZHMgQ2hhaW5lZEFjdGlvbiB7XG4gIGNvbnN0cnVjdG9yKHB1YmxpYyByZWFkb25seSBuczogc3RyaW5nKSB7XG4gICAgc3VwZXIoKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBAb3ZlcnJpZGVcbiAgICovXG4gIGFwcGx5KGNhc2NhZGVJbnN0YW5jZTogQ2FzY2FkZUluc3RhbmNlKTogdm9pZCB7XG4gICAgaWYgKGNhc2NhZGVJbnN0YW5jZS5jdXJyZW50TmFtZXNwYWNlID09IHRoaXMubnMpIHtcbiAgICAgIHRoaXMuY2hhaW5lZC5hcHBseShjYXNjYWRlSW5zdGFuY2UpO1xuICAgIH1cbiAgfVxufVxuXG5leHBvcnQgY2xhc3MgQ2hlY2tBdHRyaWJ1dGVQcmVzZW50QWN0aW9uIGV4dGVuZHMgQ2hhaW5lZEFjdGlvbiB7XG4gIGNvbnN0cnVjdG9yKHB1YmxpYyByZWFkb25seSBuczogc3RyaW5nLCBwdWJsaWMgcmVhZG9ubHkgbmFtZTogc3RyaW5nKSB7XG4gICAgc3VwZXIoKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBAb3ZlcnJpZGVcbiAgICovXG4gIGFwcGx5KGNhc2NhZGVJbnN0YW5jZTogQ2FzY2FkZUluc3RhbmNlKTogdm9pZCB7XG4gICAgaWYgKFxuICAgICAgY2FzY2FkZUluc3RhbmNlLmN1cnJlbnRFbGVtZW50ICYmXG4gICAgICBjYXNjYWRlSW5zdGFuY2UuY3VycmVudEVsZW1lbnQuaGFzQXR0cmlidXRlTlModGhpcy5ucywgdGhpcy5uYW1lKVxuICAgICkge1xuICAgICAgdGhpcy5jaGFpbmVkLmFwcGx5KGNhc2NhZGVJbnN0YW5jZSk7XG4gICAgfVxuICB9XG59XG5cbmV4cG9ydCBjbGFzcyBDaGVja0F0dHJpYnV0ZUVxQWN0aW9uIGV4dGVuZHMgQ2hhaW5lZEFjdGlvbiB7XG4gIGNvbnN0cnVjdG9yKFxuICAgIHB1YmxpYyByZWFkb25seSBuczogc3RyaW5nLFxuICAgIHB1YmxpYyByZWFkb25seSBuYW1lOiBzdHJpbmcsXG4gICAgcHVibGljIHJlYWRvbmx5IHZhbHVlOiBzdHJpbmcsXG4gICkge1xuICAgIHN1cGVyKCk7XG4gIH1cblxuICAvKipcbiAgICogQG92ZXJyaWRlXG4gICAqL1xuICBhcHBseShjYXNjYWRlSW5zdGFuY2U6IENhc2NhZGVJbnN0YW5jZSk6IHZvaWQge1xuICAgIGlmIChcbiAgICAgIGNhc2NhZGVJbnN0YW5jZS5jdXJyZW50RWxlbWVudCAmJlxuICAgICAgY2FzY2FkZUluc3RhbmNlLmN1cnJlbnRFbGVtZW50LmdldEF0dHJpYnV0ZU5TKHRoaXMubnMsIHRoaXMubmFtZSkgPT1cbiAgICAgICAgdGhpcy52YWx1ZVxuICAgICkge1xuICAgICAgdGhpcy5jaGFpbmVkLmFwcGx5KGNhc2NhZGVJbnN0YW5jZSk7XG4gICAgfVxuICB9XG5cbiAgLyoqXG4gICAqIEBvdmVycmlkZVxuICAgKi9cbiAgZ2V0UHJpb3JpdHkoKTogbnVtYmVyIHtcbiAgICBpZiAodGhpcy5uYW1lID09IFwidHlwZVwiICYmIHRoaXMubnMgPT0gQmFzZS5OUy5lcHViKSB7XG4gICAgICByZXR1cm4gOTsgLy8gZXB1Yjp0eXBlIGlzIGEgcHJldHR5IGdvb2QgdGhpbmcgdG8gY2hlY2tcbiAgICB9XG4gICAgcmV0dXJuIDA7XG4gIH1cblxuICAvKipcbiAgICogQG92ZXJyaWRlXG4gICAqL1xuICBtYWtlUHJpbWFyeShjYXNjYWRlOiBDYXNjYWRlKTogYm9vbGVhbiB7XG4gICAgaWYgKHRoaXMubmFtZSA9PSBcInR5cGVcIiAmJiB0aGlzLm5zID09IEJhc2UuTlMuZXB1Yikge1xuICAgICAgaWYgKHRoaXMuY2hhaW5lZCkge1xuICAgICAgICBjYXNjYWRlLmluc2VydEluVGFibGUoY2FzY2FkZS5lcHVidHlwZXMsIHRoaXMudmFsdWUsIHRoaXMuY2hhaW5lZCk7XG4gICAgICB9XG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG59XG5cbmV4cG9ydCBjbGFzcyBDaGVja05hbWVzcGFjZVN1cHBvcnRlZEFjdGlvbiBleHRlbmRzIENoYWluZWRBY3Rpb24ge1xuICBjb25zdHJ1Y3RvcihwdWJsaWMgcmVhZG9ubHkgbnM6IHN0cmluZywgcHVibGljIHJlYWRvbmx5IG5hbWU6IHN0cmluZykge1xuICAgIHN1cGVyKCk7XG4gIH1cblxuICAvKipcbiAgICogQG92ZXJyaWRlXG4gICAqL1xuICBhcHBseShjYXNjYWRlSW5zdGFuY2U6IENhc2NhZGVJbnN0YW5jZSk6IHZvaWQge1xuICAgIGlmIChjYXNjYWRlSW5zdGFuY2UuY3VycmVudEVsZW1lbnQpIHtcbiAgICAgIGNvbnN0IG5zID0gY2FzY2FkZUluc3RhbmNlLmN1cnJlbnRFbGVtZW50LmdldEF0dHJpYnV0ZU5TKFxuICAgICAgICB0aGlzLm5zLFxuICAgICAgICB0aGlzLm5hbWUsXG4gICAgICApO1xuICAgICAgaWYgKG5zICYmIHN1cHBvcnRlZE5hbWVzcGFjZXNbbnNdKSB7XG4gICAgICAgIHRoaXMuY2hhaW5lZC5hcHBseShjYXNjYWRlSW5zdGFuY2UpO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAgKiBAb3ZlcnJpZGVcbiAgICovXG4gIGdldFByaW9yaXR5KCk6IG51bWJlciB7XG4gICAgcmV0dXJuIDA7XG4gIH1cblxuICAvKipcbiAgICogQG92ZXJyaWRlXG4gICAqL1xuICBtYWtlUHJpbWFyeShjYXNjYWRlOiBDYXNjYWRlKTogYm9vbGVhbiB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG59XG5cbmV4cG9ydCBjbGFzcyBDaGVja0F0dHJpYnV0ZVJlZ0V4cEFjdGlvbiBleHRlbmRzIENoYWluZWRBY3Rpb24ge1xuICBjb25zdHJ1Y3RvcihcbiAgICBwdWJsaWMgcmVhZG9ubHkgbnM6IHN0cmluZyxcbiAgICBwdWJsaWMgcmVhZG9ubHkgbmFtZTogc3RyaW5nLFxuICAgIHB1YmxpYyByZWFkb25seSByZWdleHA6IFJlZ0V4cCxcbiAgKSB7XG4gICAgc3VwZXIoKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBAb3ZlcnJpZGVcbiAgICovXG4gIGFwcGx5KGNhc2NhZGVJbnN0YW5jZTogQ2FzY2FkZUluc3RhbmNlKTogdm9pZCB7XG4gICAgaWYgKGNhc2NhZGVJbnN0YW5jZS5jdXJyZW50RWxlbWVudCkge1xuICAgICAgY29uc3QgYXR0ciA9IGNhc2NhZGVJbnN0YW5jZS5jdXJyZW50RWxlbWVudC5nZXRBdHRyaWJ1dGVOUyhcbiAgICAgICAgdGhpcy5ucyxcbiAgICAgICAgdGhpcy5uYW1lLFxuICAgICAgKTtcbiAgICAgIGlmIChhdHRyICYmIGF0dHIubWF0Y2godGhpcy5yZWdleHApKSB7XG4gICAgICAgIHRoaXMuY2hhaW5lZC5hcHBseShjYXNjYWRlSW5zdGFuY2UpO1xuICAgICAgfVxuICAgIH1cbiAgfVxufVxuXG5leHBvcnQgY2xhc3MgQ2hlY2tMYW5nQWN0aW9uIGV4dGVuZHMgQ2hhaW5lZEFjdGlvbiB7XG4gIGNvbnN0cnVjdG9yKHB1YmxpYyByZWFkb25seSBsYW5nUmVnRXhwOiBSZWdFeHApIHtcbiAgICBzdXBlcigpO1xuICB9XG5cbiAgLyoqXG4gICAqIEBvdmVycmlkZVxuICAgKi9cbiAgYXBwbHkoY2FzY2FkZUluc3RhbmNlOiBDYXNjYWRlSW5zdGFuY2UpOiB2b2lkIHtcbiAgICBpZiAoY2FzY2FkZUluc3RhbmNlLmxhbmcubWF0Y2godGhpcy5sYW5nUmVnRXhwKSkge1xuICAgICAgdGhpcy5jaGFpbmVkLmFwcGx5KGNhc2NhZGVJbnN0YW5jZSk7XG4gICAgfVxuICB9XG59XG5cbmV4cG9ydCBjbGFzcyBJc0ZpcnN0QWN0aW9uIGV4dGVuZHMgQ2hhaW5lZEFjdGlvbiB7XG4gIGNvbnN0cnVjdG9yKCkge1xuICAgIHN1cGVyKCk7XG4gIH1cblxuICAvKipcbiAgICogQG92ZXJyaWRlXG4gICAqL1xuICBhcHBseShjYXNjYWRlSW5zdGFuY2U6IENhc2NhZGVJbnN0YW5jZSk6IHZvaWQge1xuICAgIGlmIChjYXNjYWRlSW5zdGFuY2UuaXNGaXJzdCkge1xuICAgICAgdGhpcy5jaGFpbmVkLmFwcGx5KGNhc2NhZGVJbnN0YW5jZSk7XG4gICAgfVxuICB9XG5cbiAgLyoqXG4gICAqIEBvdmVycmlkZVxuICAgKi9cbiAgZ2V0UHJpb3JpdHkoKTogbnVtYmVyIHtcbiAgICByZXR1cm4gNjtcbiAgfVxufVxuXG5leHBvcnQgY2xhc3MgSXNSb290QWN0aW9uIGV4dGVuZHMgQ2hhaW5lZEFjdGlvbiB7XG4gIGNvbnN0cnVjdG9yKCkge1xuICAgIHN1cGVyKCk7XG4gIH1cblxuICAvKipcbiAgICogQG92ZXJyaWRlXG4gICAqL1xuICBhcHBseShjYXNjYWRlSW5zdGFuY2U6IENhc2NhZGVJbnN0YW5jZSk6IHZvaWQge1xuICAgIGlmIChjYXNjYWRlSW5zdGFuY2UuaXNSb290KSB7XG4gICAgICB0aGlzLmNoYWluZWQuYXBwbHkoY2FzY2FkZUluc3RhbmNlKTtcbiAgICB9XG4gIH1cblxuICAvKipcbiAgICogQG92ZXJyaWRlXG4gICAqL1xuICBnZXRQcmlvcml0eSgpOiBudW1iZXIge1xuICAgIHJldHVybiAxMjsgLy8gOnJvb3QgaXMgdGhlIGZpcnN0IHRoaW5nIHRvIGNoZWNrXG4gIH1cbn1cblxuZXhwb3J0IGNsYXNzIElzTnRoQWN0aW9uIGV4dGVuZHMgQ2hhaW5lZEFjdGlvbiB7XG4gIGNvbnN0cnVjdG9yKHB1YmxpYyByZWFkb25seSBhOiBudW1iZXIsIHB1YmxpYyByZWFkb25seSBiOiBudW1iZXIpIHtcbiAgICBzdXBlcigpO1xuICB9XG5cbiAgLyoqXG4gICAqIENoZWNrZXMgd2hldGhlciBnaXZlbiBvcmRlciBjYW4gYmUgcmVwcmVzZW50ZWQgYXMgYW4rYiB3aXRoIGEgbm9uLW5lZ2F0aXZlXG4gICAqIGludGVyZ2VyIG5cbiAgICovXG4gIHByb3RlY3RlZCBtYXRjaEFOUGx1c0Iob3JkZXI6IG51bWJlcik6IGJvb2xlYW4ge1xuICAgIHJldHVybiBNYXRjaGVycy5tYXRjaEFOUGx1c0Iob3JkZXIsIHRoaXMuYSwgdGhpcy5iKTtcbiAgfVxufVxuXG5leHBvcnQgY2xhc3MgSXNOdGhTaWJsaW5nQWN0aW9uIGV4dGVuZHMgSXNOdGhBY3Rpb24ge1xuICBjb25zdHJ1Y3RvcihhOiBudW1iZXIsIGI6IG51bWJlcikge1xuICAgIHN1cGVyKGEsIGIpO1xuICB9XG5cbiAgLyoqXG4gICAqIEBvdmVycmlkZVxuICAgKi9cbiAgYXBwbHkoY2FzY2FkZUluc3RhbmNlOiBDYXNjYWRlSW5zdGFuY2UpOiB2b2lkIHtcbiAgICBpZiAodGhpcy5tYXRjaEFOUGx1c0IoY2FzY2FkZUluc3RhbmNlLmN1cnJlbnRTaWJsaW5nT3JkZXIpKSB7XG4gICAgICB0aGlzLmNoYWluZWQuYXBwbHkoY2FzY2FkZUluc3RhbmNlKTtcbiAgICB9XG4gIH1cblxuICAvKipcbiAgICogQG92ZXJyaWRlXG4gICAqL1xuICBnZXRQcmlvcml0eSgpOiBudW1iZXIge1xuICAgIHJldHVybiA1O1xuICB9XG59XG5cbmV4cG9ydCBjbGFzcyBJc050aFNpYmxpbmdPZlR5cGVBY3Rpb24gZXh0ZW5kcyBJc050aEFjdGlvbiB7XG4gIGNvbnN0cnVjdG9yKGE6IG51bWJlciwgYjogbnVtYmVyKSB7XG4gICAgc3VwZXIoYSwgYik7XG4gIH1cblxuICAvKipcbiAgICogQG92ZXJyaWRlXG4gICAqL1xuICBhcHBseShjYXNjYWRlSW5zdGFuY2U6IENhc2NhZGVJbnN0YW5jZSk6IHZvaWQge1xuICAgIGNvbnN0IG9yZGVyID1cbiAgICAgIGNhc2NhZGVJbnN0YW5jZS5jdXJyZW50U2libGluZ1R5cGVDb3VudHNbXG4gICAgICAgIGNhc2NhZGVJbnN0YW5jZS5jdXJyZW50TmFtZXNwYWNlXG4gICAgICBdW2Nhc2NhZGVJbnN0YW5jZS5jdXJyZW50TG9jYWxOYW1lXTtcbiAgICBpZiAodGhpcy5tYXRjaEFOUGx1c0Iob3JkZXIpKSB7XG4gICAgICB0aGlzLmNoYWluZWQuYXBwbHkoY2FzY2FkZUluc3RhbmNlKTtcbiAgICB9XG4gIH1cblxuICAvKipcbiAgICogQG92ZXJyaWRlXG4gICAqL1xuICBnZXRQcmlvcml0eSgpOiBudW1iZXIge1xuICAgIHJldHVybiA1O1xuICB9XG59XG5cbmV4cG9ydCBjbGFzcyBJc050aExhc3RTaWJsaW5nQWN0aW9uIGV4dGVuZHMgSXNOdGhBY3Rpb24ge1xuICBjb25zdHJ1Y3RvcihhOiBudW1iZXIsIGI6IG51bWJlcikge1xuICAgIHN1cGVyKGEsIGIpO1xuICB9XG5cbiAgLyoqXG4gICAqIEBvdmVycmlkZVxuICAgKi9cbiAgYXBwbHkoY2FzY2FkZUluc3RhbmNlOiBDYXNjYWRlSW5zdGFuY2UpOiB2b2lkIHtcbiAgICBsZXQgb3JkZXIgPSBjYXNjYWRlSW5zdGFuY2UuY3VycmVudEZvbGxvd2luZ1NpYmxpbmdPcmRlcjtcbiAgICBpZiAob3JkZXIgPT09IG51bGwpIHtcbiAgICAgIG9yZGVyID0gY2FzY2FkZUluc3RhbmNlLmN1cnJlbnRGb2xsb3dpbmdTaWJsaW5nT3JkZXIgPVxuICAgICAgICBjYXNjYWRlSW5zdGFuY2UuY3VycmVudEVsZW1lbnQucGFyZW50Tm9kZS5jaGlsZEVsZW1lbnRDb3VudCAtXG4gICAgICAgIGNhc2NhZGVJbnN0YW5jZS5jdXJyZW50U2libGluZ09yZGVyICtcbiAgICAgICAgMTtcbiAgICB9XG4gICAgaWYgKHRoaXMubWF0Y2hBTlBsdXNCKG9yZGVyKSkge1xuICAgICAgdGhpcy5jaGFpbmVkLmFwcGx5KGNhc2NhZGVJbnN0YW5jZSk7XG4gICAgfVxuICB9XG5cbiAgLyoqXG4gICAqIEBvdmVycmlkZVxuICAgKi9cbiAgZ2V0UHJpb3JpdHkoKTogbnVtYmVyIHtcbiAgICByZXR1cm4gNDtcbiAgfVxufVxuXG5leHBvcnQgY2xhc3MgSXNOdGhMYXN0U2libGluZ09mVHlwZUFjdGlvbiBleHRlbmRzIElzTnRoQWN0aW9uIHtcbiAgY29uc3RydWN0b3IoYTogbnVtYmVyLCBiOiBudW1iZXIpIHtcbiAgICBzdXBlcihhLCBiKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBAb3ZlcnJpZGVcbiAgICovXG4gIGFwcGx5KGNhc2NhZGVJbnN0YW5jZTogQ2FzY2FkZUluc3RhbmNlKTogdm9pZCB7XG4gICAgY29uc3QgY291bnRzID0gY2FzY2FkZUluc3RhbmNlLmN1cnJlbnRGb2xsb3dpbmdTaWJsaW5nVHlwZUNvdW50cztcbiAgICBpZiAoIWNvdW50c1tjYXNjYWRlSW5zdGFuY2UuY3VycmVudE5hbWVzcGFjZV0pIHtcbiAgICAgIGxldCBlbGVtID0gY2FzY2FkZUluc3RhbmNlLmN1cnJlbnRFbGVtZW50O1xuICAgICAgZG8ge1xuICAgICAgICBjb25zdCBucyA9IGVsZW0ubmFtZXNwYWNlVVJJO1xuICAgICAgICBjb25zdCBsb2NhbE5hbWUgPSBlbGVtLmxvY2FsTmFtZTtcbiAgICAgICAgbGV0IG5zQ291bnRzID0gY291bnRzW25zXTtcbiAgICAgICAgaWYgKCFuc0NvdW50cykge1xuICAgICAgICAgIG5zQ291bnRzID0gY291bnRzW25zXSA9IHt9O1xuICAgICAgICB9XG4gICAgICAgIG5zQ291bnRzW2xvY2FsTmFtZV0gPSAobnNDb3VudHNbbG9jYWxOYW1lXSB8fCAwKSArIDE7XG4gICAgICB9IHdoaWxlICgoZWxlbSA9IGVsZW0ubmV4dEVsZW1lbnRTaWJsaW5nKSk7XG4gICAgfVxuICAgIGlmIChcbiAgICAgIHRoaXMubWF0Y2hBTlBsdXNCKFxuICAgICAgICBjb3VudHNbY2FzY2FkZUluc3RhbmNlLmN1cnJlbnROYW1lc3BhY2VdW1xuICAgICAgICAgIGNhc2NhZGVJbnN0YW5jZS5jdXJyZW50TG9jYWxOYW1lXG4gICAgICAgIF0sXG4gICAgICApXG4gICAgKSB7XG4gICAgICB0aGlzLmNoYWluZWQuYXBwbHkoY2FzY2FkZUluc3RhbmNlKTtcbiAgICB9XG4gIH1cblxuICAvKipcbiAgICogQG92ZXJyaWRlXG4gICAqL1xuICBnZXRQcmlvcml0eSgpOiBudW1iZXIge1xuICAgIHJldHVybiA0O1xuICB9XG59XG5cbmV4cG9ydCBjbGFzcyBJc0VtcHR5QWN0aW9uIGV4dGVuZHMgQ2hhaW5lZEFjdGlvbiB7XG4gIGNvbnN0cnVjdG9yKCkge1xuICAgIHN1cGVyKCk7XG4gIH1cblxuICAvKipcbiAgICogQG92ZXJyaWRlXG4gICAqL1xuICBhcHBseShjYXNjYWRlSW5zdGFuY2U6IENhc2NhZGVJbnN0YW5jZSk6IHZvaWQge1xuICAgIGxldCBub2RlOiBOb2RlIHwgbnVsbCA9IGNhc2NhZGVJbnN0YW5jZS5jdXJyZW50RWxlbWVudC5maXJzdENoaWxkO1xuICAgIHdoaWxlIChub2RlKSB7XG4gICAgICBzd2l0Y2ggKG5vZGUubm9kZVR5cGUpIHtcbiAgICAgICAgY2FzZSBOb2RlLkVMRU1FTlRfTk9ERTpcbiAgICAgICAgICByZXR1cm47XG4gICAgICAgIGNhc2UgTm9kZS5URVhUX05PREU6XG4gICAgICAgICAgaWYgKChub2RlIGFzIFRleHQpLmxlbmd0aCA+IDApIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICB9XG4gICAgICB9XG4gICAgICBub2RlID0gbm9kZS5uZXh0U2libGluZztcbiAgICB9XG4gICAgdGhpcy5jaGFpbmVkLmFwcGx5KGNhc2NhZGVJbnN0YW5jZSk7XG4gIH1cblxuICAvKipcbiAgICogQG92ZXJyaWRlXG4gICAqL1xuICBnZXRQcmlvcml0eSgpOiBudW1iZXIge1xuICAgIHJldHVybiA0O1xuICB9XG59XG5cbmV4cG9ydCBjbGFzcyBJc0VuYWJsZWRBY3Rpb24gZXh0ZW5kcyBDaGFpbmVkQWN0aW9uIHtcbiAgY29uc3RydWN0b3IoKSB7XG4gICAgc3VwZXIoKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBAb3ZlcnJpZGVcbiAgICovXG4gIGFwcGx5KGNhc2NhZGVJbnN0YW5jZTogQ2FzY2FkZUluc3RhbmNlKTogdm9pZCB7XG4gICAgY29uc3QgZWxlbSA9IGNhc2NhZGVJbnN0YW5jZS5jdXJyZW50RWxlbWVudDtcbiAgICBpZiAoKGVsZW0gYXMgYW55KS5kaXNhYmxlZCA9PT0gZmFsc2UpIHtcbiAgICAgIHRoaXMuY2hhaW5lZC5hcHBseShjYXNjYWRlSW5zdGFuY2UpO1xuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAgKiBAb3ZlcnJpZGVcbiAgICovXG4gIGdldFByaW9yaXR5KCk6IG51bWJlciB7XG4gICAgcmV0dXJuIDU7XG4gIH1cbn1cblxuZXhwb3J0IGNsYXNzIElzRGlzYWJsZWRBY3Rpb24gZXh0ZW5kcyBDaGFpbmVkQWN0aW9uIHtcbiAgY29uc3RydWN0b3IoKSB7XG4gICAgc3VwZXIoKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBAb3ZlcnJpZGVcbiAgICovXG4gIGFwcGx5KGNhc2NhZGVJbnN0YW5jZTogQ2FzY2FkZUluc3RhbmNlKTogdm9pZCB7XG4gICAgY29uc3QgZWxlbSA9IGNhc2NhZGVJbnN0YW5jZS5jdXJyZW50RWxlbWVudDtcbiAgICBpZiAoKGVsZW0gYXMgYW55KS5kaXNhYmxlZCA9PT0gdHJ1ZSkge1xuICAgICAgdGhpcy5jaGFpbmVkLmFwcGx5KGNhc2NhZGVJbnN0YW5jZSk7XG4gICAgfVxuICB9XG5cbiAgLyoqXG4gICAqIEBvdmVycmlkZVxuICAgKi9cbiAgZ2V0UHJpb3JpdHkoKTogbnVtYmVyIHtcbiAgICByZXR1cm4gNTtcbiAgfVxufVxuXG5leHBvcnQgY2xhc3MgSXNDaGVja2VkQWN0aW9uIGV4dGVuZHMgQ2hhaW5lZEFjdGlvbiB7XG4gIGNvbnN0cnVjdG9yKCkge1xuICAgIHN1cGVyKCk7XG4gIH1cblxuICAvKipcbiAgICogQG92ZXJyaWRlXG4gICAqL1xuICBhcHBseShjYXNjYWRlSW5zdGFuY2U6IENhc2NhZGVJbnN0YW5jZSk6IHZvaWQge1xuICAgIGNvbnN0IGVsZW0gPSBjYXNjYWRlSW5zdGFuY2UuY3VycmVudEVsZW1lbnQ7XG4gICAgaWYgKChlbGVtIGFzIGFueSkuc2VsZWN0ZWQgPT09IHRydWUgfHwgKGVsZW0gYXMgYW55KS5jaGVja2VkID09PSB0cnVlKSB7XG4gICAgICB0aGlzLmNoYWluZWQuYXBwbHkoY2FzY2FkZUluc3RhbmNlKTtcbiAgICB9XG4gIH1cblxuICAvKipcbiAgICogQG92ZXJyaWRlXG4gICAqL1xuICBnZXRQcmlvcml0eSgpOiBudW1iZXIge1xuICAgIHJldHVybiA1O1xuICB9XG59XG5cbmV4cG9ydCBjbGFzcyBDaGVja0NvbmRpdGlvbkFjdGlvbiBleHRlbmRzIENoYWluZWRBY3Rpb24ge1xuICBjb25zdHJ1Y3RvcihwdWJsaWMgcmVhZG9ubHkgY29uZGl0aW9uOiBzdHJpbmcpIHtcbiAgICBzdXBlcigpO1xuICB9XG5cbiAgLyoqXG4gICAqIEBvdmVycmlkZVxuICAgKi9cbiAgYXBwbHkoY2FzY2FkZUluc3RhbmNlOiBDYXNjYWRlSW5zdGFuY2UpOiB2b2lkIHtcbiAgICBpZiAoY2FzY2FkZUluc3RhbmNlLmNvbmRpdGlvbnNbdGhpcy5jb25kaXRpb25dKSB7XG4gICAgICB0cnkge1xuICAgICAgICBjYXNjYWRlSW5zdGFuY2UuZGVwZW5kZW50Q29uZGl0aW9ucy5wdXNoKHRoaXMuY29uZGl0aW9uKTtcbiAgICAgICAgdGhpcy5jaGFpbmVkLmFwcGx5KGNhc2NhZGVJbnN0YW5jZSk7XG4gICAgICB9IGZpbmFsbHkge1xuICAgICAgICBjYXNjYWRlSW5zdGFuY2UuZGVwZW5kZW50Q29uZGl0aW9ucy5wb3AoKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICAvKipcbiAgICogQG92ZXJyaWRlXG4gICAqL1xuICBnZXRQcmlvcml0eSgpOiBudW1iZXIge1xuICAgIHJldHVybiA1O1xuICB9XG59XG5cbmV4cG9ydCBjbGFzcyBDaGVja0FwcGxpZWRBY3Rpb24gZXh0ZW5kcyBDYXNjYWRlQWN0aW9uIHtcbiAgYXBwbGllZCA9IGZhbHNlO1xuXG4gIGNvbnN0cnVjdG9yKCkge1xuICAgIHN1cGVyKCk7XG4gIH1cblxuICAvKipcbiAgICogQG92ZXJyaWRlXG4gICAqL1xuICBhcHBseShjYXNjYWRlSW5zdGFuY2U6IENhc2NhZGVJbnN0YW5jZSk6IHZvaWQge1xuICAgIHRoaXMuYXBwbGllZCA9IHRydWU7XG4gIH1cblxuICAvKipcbiAgICogQG92ZXJyaWRlXG4gICAqL1xuICBjbG9uZSgpOiBDYXNjYWRlQWN0aW9uIHtcbiAgICBjb25zdCBjbG9uZWQgPSBuZXcgQ2hlY2tBcHBsaWVkQWN0aW9uKCk7XG4gICAgY2xvbmVkLmFwcGxpZWQgPSB0aGlzLmFwcGxpZWQ7XG4gICAgcmV0dXJuIGNsb25lZDtcbiAgfVxufVxuXG5leHBvcnQgY2xhc3MgTmVnYXRlQWN0aW9uc1NldCBleHRlbmRzIENoYWluZWRBY3Rpb24ge1xuICBjaGVja0FwcGxpZWRBY3Rpb246IENoZWNrQXBwbGllZEFjdGlvbjtcbiAgZmlyc3RBY3Rpb246IENhc2NhZGVBY3Rpb247XG5cbiAgY29uc3RydWN0b3IobGlzdDogQ2hhaW5lZEFjdGlvbltdKSB7XG4gICAgc3VwZXIoKTtcbiAgICB0aGlzLmNoZWNrQXBwbGllZEFjdGlvbiA9IG5ldyBDaGVja0FwcGxpZWRBY3Rpb24oKTtcbiAgICB0aGlzLmZpcnN0QWN0aW9uID0gY2hhaW5BY3Rpb25zKGxpc3QsIHRoaXMuY2hlY2tBcHBsaWVkQWN0aW9uKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBAb3ZlcnJpZGVcbiAgICovXG4gIGFwcGx5KGNhc2NhZGVJbnN0YW5jZTogQ2FzY2FkZUluc3RhbmNlKTogdm9pZCB7XG4gICAgdGhpcy5maXJzdEFjdGlvbi5hcHBseShjYXNjYWRlSW5zdGFuY2UpO1xuICAgIGlmICghdGhpcy5jaGVja0FwcGxpZWRBY3Rpb24uYXBwbGllZCkge1xuICAgICAgdGhpcy5jaGFpbmVkLmFwcGx5KGNhc2NhZGVJbnN0YW5jZSk7XG4gICAgfVxuICAgIHRoaXMuY2hlY2tBcHBsaWVkQWN0aW9uLmFwcGxpZWQgPSBmYWxzZTtcbiAgfVxuXG4gIC8qKlxuICAgKiBAb3ZlcnJpZGVcbiAgICovXG4gIGdldFByaW9yaXR5KCk6IG51bWJlciB7XG4gICAgcmV0dXJuICh0aGlzLmZpcnN0QWN0aW9uIGFzIENoYWluZWRBY3Rpb24pLmdldFByaW9yaXR5KCk7XG4gIH1cbn1cblxuLyoqXG4gKiBBbiBvYmplY3QgdGhhdCBpcyBub3RpZmllZCBhcyBlbGVtZW50cyBhcmUgcHVzaGVkIGFuZCBwb3BwZWQgYW5kIHR5cGljYWxseVxuICogY29udHJvbHMgYSBcIm5hbWVkIGNvbmRpdGlvblwiICh3aGljaCBpcyBhIGNvdW50IGFzc29jaWF0ZWQgd2l0aCBhIG5hbWUpLlxuICovXG5leHBvcnQgaW50ZXJmYWNlIENvbmRpdGlvbkl0ZW0ge1xuICAvKipcbiAgICogUmV0dXJucyBhIFwiZnJlc2hcIiBjb3B5IG9mIHRoaXMgaXRlbS4gTWF5IGJlIHRoaXMgaWYgaW1tdXRhYmxlLlxuICAgKi9cbiAgZnJlc2goY2FzY2FkZUluc3RhbmNlOiBDYXNjYWRlSW5zdGFuY2UpOiBDb25kaXRpb25JdGVtO1xuXG4gIC8qKlxuICAgKiBEZXB0aCBpcyAwIGZvciBlbGVtZW50IGl0c2VsZiBhbmQgaXRzIHNpYmxpbmdzLCAxIGZvciBkaXJlY3QgY2hpbGRyZW4gYW5kXG4gICAqIC0xIGZvciB0aGUgcGFyZW50LlxuICAgKi9cbiAgcHVzaChjYXNjYWRlSW5zdGFuY2U6IENhc2NhZGVJbnN0YW5jZSwgZGVwdGg6IG51bWJlcik6IGJvb2xlYW47XG5cbiAgLyoqXG4gICAqIEByZXR1cm4gcmV0dXJuIHRydWUgaWYgbm8gbW9yZSBub3RpZmljYXRpb25zIGFyZSBkZXNpcmVkXG4gICAqL1xuICBwb3AoY2FzY2FkZUluc3RhbmNlOiBDYXNjYWRlSW5zdGFuY2UsIGRlcHRoOiBudW1iZXIpOiBib29sZWFuO1xufVxuXG5leHBvcnQgY2xhc3MgQWJzdHJhY3RDb25kaXRpb25JdGVtIHtcbiAgY29uc3RydWN0b3IoXG4gICAgcHVibGljIHJlYWRvbmx5IGNvbmRpdGlvbjogc3RyaW5nLFxuICAgIHB1YmxpYyByZWFkb25seSB2aWV3Q29uZGl0aW9uSWQ6IHN0cmluZyB8IG51bGwsXG4gICAgcHVibGljIHJlYWRvbmx5IHZpZXdDb25kaXRpb246IE1hdGNoZXJzLk1hdGNoZXIsXG4gICkge31cblxuICBpbmNyZW1lbnQoY2FzY2FkZUluc3RhbmNlOiBDYXNjYWRlSW5zdGFuY2UpIHtcbiAgICBjYXNjYWRlSW5zdGFuY2UuaW5jcmVtZW50KHRoaXMuY29uZGl0aW9uLCB0aGlzLnZpZXdDb25kaXRpb24pO1xuICB9XG5cbiAgZGVjcmVtZW50KGNhc2NhZGVJbnN0YW5jZTogQ2FzY2FkZUluc3RhbmNlKSB7XG4gICAgY2FzY2FkZUluc3RhbmNlLmRlY3JlbWVudCh0aGlzLmNvbmRpdGlvbiwgdGhpcy52aWV3Q29uZGl0aW9uKTtcbiAgfVxuXG4gIGJ1aWxkVmlld0NvbmRpdGlvbk1hdGNoZXIoXG4gICAgY2FzY2FkZUluc3RhbmNlOiBDYXNjYWRlSW5zdGFuY2UsXG4gICk6IE1hdGNoZXJzLk1hdGNoZXIge1xuICAgIHJldHVybiBjYXNjYWRlSW5zdGFuY2UuYnVpbGRWaWV3Q29uZGl0aW9uTWF0Y2hlcih0aGlzLnZpZXdDb25kaXRpb25JZCk7XG4gIH1cbn1cblxuZXhwb3J0IGNsYXNzIERlc2NlbmRhbnRDb25kaXRpb25JdGVtXG4gIGV4dGVuZHMgQWJzdHJhY3RDb25kaXRpb25JdGVtXG4gIGltcGxlbWVudHMgQ29uZGl0aW9uSXRlbSB7XG4gIGNvbnN0cnVjdG9yKFxuICAgIGNvbmRpdGlvbjogc3RyaW5nLFxuICAgIHZpZXdDb25kaXRpb25JZDogc3RyaW5nIHwgbnVsbCxcbiAgICB2aWV3Q29uZGl0aW9uOiBNYXRjaGVycy5NYXRjaGVyLFxuICApIHtcbiAgICBzdXBlcihjb25kaXRpb24sIHZpZXdDb25kaXRpb25JZCwgdmlld0NvbmRpdGlvbik7XG4gIH1cblxuICAvKipcbiAgICogQG92ZXJyaWRlXG4gICAqL1xuICBmcmVzaChjYXNjYWRlSW5zdGFuY2U6IENhc2NhZGVJbnN0YW5jZSk6IENvbmRpdGlvbkl0ZW0ge1xuICAgIHJldHVybiBuZXcgRGVzY2VuZGFudENvbmRpdGlvbkl0ZW0oXG4gICAgICB0aGlzLmNvbmRpdGlvbixcbiAgICAgIHRoaXMudmlld0NvbmRpdGlvbklkLFxuICAgICAgdGhpcy5idWlsZFZpZXdDb25kaXRpb25NYXRjaGVyKGNhc2NhZGVJbnN0YW5jZSksXG4gICAgKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBAb3ZlcnJpZGVcbiAgICovXG4gIHB1c2goY2FzY2FkZUluc3RhbmNlOiBDYXNjYWRlSW5zdGFuY2UsIGRlcHRoOiBudW1iZXIpOiBib29sZWFuIHtcbiAgICBpZiAoZGVwdGggPT0gMCkge1xuICAgICAgdGhpcy5pbmNyZW1lbnQoY2FzY2FkZUluc3RhbmNlKTtcbiAgICB9XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG5cbiAgLyoqXG4gICAqIEBvdmVycmlkZVxuICAgKi9cbiAgcG9wKGNhc2NhZGVJbnN0YW5jZTogQ2FzY2FkZUluc3RhbmNlLCBkZXB0aDogbnVtYmVyKTogYm9vbGVhbiB7XG4gICAgaWYgKGRlcHRoID09IDApIHtcbiAgICAgIHRoaXMuZGVjcmVtZW50KGNhc2NhZGVJbnN0YW5jZSk7XG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG59XG5cbmV4cG9ydCBjbGFzcyBDaGlsZENvbmRpdGlvbkl0ZW1cbiAgZXh0ZW5kcyBBYnN0cmFjdENvbmRpdGlvbkl0ZW1cbiAgaW1wbGVtZW50cyBDb25kaXRpb25JdGVtIHtcbiAgY29uc3RydWN0b3IoXG4gICAgY29uZGl0aW9uOiBzdHJpbmcsXG4gICAgdmlld0NvbmRpdGlvbklkOiBzdHJpbmcgfCBudWxsLFxuICAgIHZpZXdDb25kaXRpb246IE1hdGNoZXJzLk1hdGNoZXIsXG4gICkge1xuICAgIHN1cGVyKGNvbmRpdGlvbiwgdmlld0NvbmRpdGlvbklkLCB2aWV3Q29uZGl0aW9uKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBAb3ZlcnJpZGVcbiAgICovXG4gIGZyZXNoKGNhc2NhZGVJbnN0YW5jZTogQ2FzY2FkZUluc3RhbmNlKTogQ29uZGl0aW9uSXRlbSB7XG4gICAgcmV0dXJuIG5ldyBDaGlsZENvbmRpdGlvbkl0ZW0oXG4gICAgICB0aGlzLmNvbmRpdGlvbixcbiAgICAgIHRoaXMudmlld0NvbmRpdGlvbklkLFxuICAgICAgdGhpcy5idWlsZFZpZXdDb25kaXRpb25NYXRjaGVyKGNhc2NhZGVJbnN0YW5jZSksXG4gICAgKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBAb3ZlcnJpZGVcbiAgICovXG4gIHB1c2goY2FzY2FkZUluc3RhbmNlOiBDYXNjYWRlSW5zdGFuY2UsIGRlcHRoOiBudW1iZXIpOiBib29sZWFuIHtcbiAgICBpZiAoZGVwdGggPT0gMCkge1xuICAgICAgdGhpcy5pbmNyZW1lbnQoY2FzY2FkZUluc3RhbmNlKTtcbiAgICB9IGVsc2UgaWYgKGRlcHRoID09IDEpIHtcbiAgICAgIHRoaXMuZGVjcmVtZW50KGNhc2NhZGVJbnN0YW5jZSk7XG4gICAgfVxuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuXG4gIC8qKlxuICAgKiBAb3ZlcnJpZGVcbiAgICovXG4gIHBvcChjYXNjYWRlSW5zdGFuY2U6IENhc2NhZGVJbnN0YW5jZSwgZGVwdGg6IG51bWJlcik6IGJvb2xlYW4ge1xuICAgIGlmIChkZXB0aCA9PSAwKSB7XG4gICAgICB0aGlzLmRlY3JlbWVudChjYXNjYWRlSW5zdGFuY2UpO1xuICAgICAgcmV0dXJuIHRydWU7XG4gICAgfSBlbHNlIGlmIChkZXB0aCA9PSAxKSB7XG4gICAgICB0aGlzLmluY3JlbWVudChjYXNjYWRlSW5zdGFuY2UpO1xuICAgIH1cbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cbn1cblxuZXhwb3J0IGNsYXNzIEFkamFjZW50U2libGluZ0NvbmRpdGlvbkl0ZW1cbiAgZXh0ZW5kcyBBYnN0cmFjdENvbmRpdGlvbkl0ZW1cbiAgaW1wbGVtZW50cyBDb25kaXRpb25JdGVtIHtcbiAgZmlyZWQ6IGJvb2xlYW4gPSBmYWxzZTtcblxuICBjb25zdHJ1Y3RvcihcbiAgICBjb25kaXRpb246IHN0cmluZyxcbiAgICB2aWV3Q29uZGl0aW9uSWQ6IHN0cmluZyB8IG51bGwsXG4gICAgdmlld0NvbmRpdGlvbjogTWF0Y2hlcnMuTWF0Y2hlcixcbiAgKSB7XG4gICAgc3VwZXIoY29uZGl0aW9uLCB2aWV3Q29uZGl0aW9uSWQsIHZpZXdDb25kaXRpb24pO1xuICB9XG5cbiAgLyoqXG4gICAqIEBvdmVycmlkZVxuICAgKi9cbiAgZnJlc2goY2FzY2FkZUluc3RhbmNlOiBDYXNjYWRlSW5zdGFuY2UpOiBDb25kaXRpb25JdGVtIHtcbiAgICByZXR1cm4gbmV3IEFkamFjZW50U2libGluZ0NvbmRpdGlvbkl0ZW0oXG4gICAgICB0aGlzLmNvbmRpdGlvbixcbiAgICAgIHRoaXMudmlld0NvbmRpdGlvbklkLFxuICAgICAgdGhpcy5idWlsZFZpZXdDb25kaXRpb25NYXRjaGVyKGNhc2NhZGVJbnN0YW5jZSksXG4gICAgKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBAb3ZlcnJpZGVcbiAgICovXG4gIHB1c2goY2FzY2FkZUluc3RhbmNlOiBDYXNjYWRlSW5zdGFuY2UsIGRlcHRoOiBudW1iZXIpOiBib29sZWFuIHtcbiAgICBpZiAodGhpcy5maXJlZCkge1xuICAgICAgdGhpcy5kZWNyZW1lbnQoY2FzY2FkZUluc3RhbmNlKTtcbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cblxuICAvKipcbiAgICogQG92ZXJyaWRlXG4gICAqL1xuICBwb3AoY2FzY2FkZUluc3RhbmNlOiBDYXNjYWRlSW5zdGFuY2UsIGRlcHRoOiBudW1iZXIpOiBib29sZWFuIHtcbiAgICBpZiAodGhpcy5maXJlZCkge1xuICAgICAgdGhpcy5kZWNyZW1lbnQoY2FzY2FkZUluc3RhbmNlKTtcbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cbiAgICBpZiAoZGVwdGggPT0gMCkge1xuICAgICAgLy8gTGVhdmluZyBlbGVtZW50IHRoYXQgdHJpZ2dlcmVkIHRoaXMgaXRlbS5cbiAgICAgIHRoaXMuZmlyZWQgPSB0cnVlO1xuICAgICAgdGhpcy5pbmNyZW1lbnQoY2FzY2FkZUluc3RhbmNlKTtcbiAgICB9XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG59XG5cbmV4cG9ydCBjbGFzcyBGb2xsb3dpbmdTaWJsaW5nQ29uZGl0aW9uSXRlbVxuICBleHRlbmRzIEFic3RyYWN0Q29uZGl0aW9uSXRlbVxuICBpbXBsZW1lbnRzIENvbmRpdGlvbkl0ZW0ge1xuICBmaXJlZDogYm9vbGVhbiA9IGZhbHNlO1xuXG4gIGNvbnN0cnVjdG9yKFxuICAgIGNvbmRpdGlvbjogc3RyaW5nLFxuICAgIHZpZXdDb25kaXRpb25JZDogc3RyaW5nIHwgbnVsbCxcbiAgICB2aWV3Q29uZGl0aW9uOiBNYXRjaGVycy5NYXRjaGVyLFxuICApIHtcbiAgICBzdXBlcihjb25kaXRpb24sIHZpZXdDb25kaXRpb25JZCwgdmlld0NvbmRpdGlvbik7XG4gIH1cblxuICAvKipcbiAgICogQG92ZXJyaWRlXG4gICAqL1xuICBmcmVzaChjYXNjYWRlSW5zdGFuY2U6IENhc2NhZGVJbnN0YW5jZSk6IENvbmRpdGlvbkl0ZW0ge1xuICAgIHJldHVybiBuZXcgRm9sbG93aW5nU2libGluZ0NvbmRpdGlvbkl0ZW0oXG4gICAgICB0aGlzLmNvbmRpdGlvbixcbiAgICAgIHRoaXMudmlld0NvbmRpdGlvbklkLFxuICAgICAgdGhpcy5idWlsZFZpZXdDb25kaXRpb25NYXRjaGVyKGNhc2NhZGVJbnN0YW5jZSksXG4gICAgKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBAb3ZlcnJpZGVcbiAgICovXG4gIHB1c2goY2FzY2FkZUluc3RhbmNlOiBDYXNjYWRlSW5zdGFuY2UsIGRlcHRoOiBudW1iZXIpOiBib29sZWFuIHtcbiAgICBpZiAodGhpcy5maXJlZCkge1xuICAgICAgaWYgKGRlcHRoID09IC0xKSB7XG4gICAgICAgIHRoaXMuaW5jcmVtZW50KGNhc2NhZGVJbnN0YW5jZSk7XG4gICAgICB9IGVsc2UgaWYgKGRlcHRoID09IDApIHtcbiAgICAgICAgdGhpcy5kZWNyZW1lbnQoY2FzY2FkZUluc3RhbmNlKTtcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG5cbiAgLyoqXG4gICAqIEBvdmVycmlkZVxuICAgKi9cbiAgcG9wKGNhc2NhZGVJbnN0YW5jZTogQ2FzY2FkZUluc3RhbmNlLCBkZXB0aDogbnVtYmVyKTogYm9vbGVhbiB7XG4gICAgaWYgKHRoaXMuZmlyZWQpIHtcbiAgICAgIGlmIChkZXB0aCA9PSAtMSkge1xuICAgICAgICB0aGlzLmRlY3JlbWVudChjYXNjYWRlSW5zdGFuY2UpO1xuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgIH0gZWxzZSBpZiAoZGVwdGggPT0gMCkge1xuICAgICAgICB0aGlzLmluY3JlbWVudChjYXNjYWRlSW5zdGFuY2UpO1xuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICBpZiAoZGVwdGggPT0gMCkge1xuICAgICAgICAvLyBMZWF2aW5nIGVsZW1lbnQgdGhhdCB0cmlnZ2VyZWQgdGhpcyBpdGVtLlxuICAgICAgICB0aGlzLmZpcmVkID0gdHJ1ZTtcbiAgICAgICAgdGhpcy5pbmNyZW1lbnQoY2FzY2FkZUluc3RhbmNlKTtcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG59XG5cbi8qKlxuICogTm90IGEgdHJ1ZSBjb25kaXRpb24gaXRlbSwgdGhpcyBjbGFzcyBtYW5hZ2VzIHByb3BlciBoYW5kbGluZyBvZiBcImFmdGVyXCJcbiAqIHBzZXVkb2VsZW1lbnQuXG4gKi9cbmV4cG9ydCBjbGFzcyBBZnRlclBzZXVkb2VsZW1lbnRJdGVtIGltcGxlbWVudHMgQ29uZGl0aW9uSXRlbSB7XG4gIGNvbnN0cnVjdG9yKFxuICAgIHB1YmxpYyByZWFkb25seSBhZnRlcnByb3A6IEVsZW1lbnRTdHlsZSxcbiAgICBwdWJsaWMgcmVhZG9ubHkgZWxlbWVudDogRWxlbWVudCxcbiAgKSB7fVxuXG4gIC8qKlxuICAgKiBAb3ZlcnJpZGVcbiAgICovXG4gIGZyZXNoKGNhc2NhZGVJbnN0YW5jZTogQ2FzY2FkZUluc3RhbmNlKTogQ29uZGl0aW9uSXRlbSB7XG4gICAgcmV0dXJuIHRoaXM7XG4gIH1cblxuICAvKipcbiAgICogQG92ZXJyaWRlXG4gICAqL1xuICBwdXNoKGNhc2NhZGVJbnN0YW5jZTogQ2FzY2FkZUluc3RhbmNlLCBkZXB0aDogbnVtYmVyKTogYm9vbGVhbiB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG5cbiAgLyoqXG4gICAqIEBvdmVycmlkZVxuICAgKi9cbiAgcG9wKGNhc2NhZGVJbnN0YW5jZTogQ2FzY2FkZUluc3RhbmNlLCBkZXB0aDogbnVtYmVyKTogYm9vbGVhbiB7XG4gICAgaWYgKGRlcHRoID09IDApIHtcbiAgICAgIGNhc2NhZGVJbnN0YW5jZS5wcm9jZXNzUHNldWRvZWxlbWVudFByb3BzKHRoaXMuYWZ0ZXJwcm9wLCB0aGlzLmVsZW1lbnQpO1xuICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuICAgIHJldHVybiBmYWxzZTtcbiAgfVxufVxuXG4vKipcbiAqIE5vdCBhIHRydWUgY29uZGl0aW9uIGl0ZW0sIHRoaXMgY2xhc3MgcmVzdG9yZXMgY3VycmVudCBsYW5ndWFnZS5cbiAqL1xuZXhwb3J0IGNsYXNzIFJlc3RvcmVMYW5nSXRlbSBpbXBsZW1lbnRzIENvbmRpdGlvbkl0ZW0ge1xuICBjb25zdHJ1Y3RvcihwdWJsaWMgcmVhZG9ubHkgbGFuZzogc3RyaW5nKSB7fVxuXG4gIC8qKlxuICAgKiBAb3ZlcnJpZGVcbiAgICovXG4gIGZyZXNoKGNhc2NhZGVJbnN0YW5jZTogQ2FzY2FkZUluc3RhbmNlKTogQ29uZGl0aW9uSXRlbSB7XG4gICAgcmV0dXJuIHRoaXM7XG4gIH1cblxuICAvKipcbiAgICogQG92ZXJyaWRlXG4gICAqL1xuICBwdXNoKGNhc2NhZGVJbnN0YW5jZTogQ2FzY2FkZUluc3RhbmNlLCBkZXB0aDogbnVtYmVyKTogYm9vbGVhbiB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG5cbiAgLyoqXG4gICAqIEBvdmVycmlkZVxuICAgKi9cbiAgcG9wKGNhc2NhZGVJbnN0YW5jZTogQ2FzY2FkZUluc3RhbmNlLCBkZXB0aDogbnVtYmVyKTogYm9vbGVhbiB7XG4gICAgaWYgKGRlcHRoID09IDApIHtcbiAgICAgIGNhc2NhZGVJbnN0YW5jZS5sYW5nID0gdGhpcy5sYW5nO1xuICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuICAgIHJldHVybiBmYWxzZTtcbiAgfVxufVxuXG4vKipcbiAqIE5vdCBhIHRydWUgY29uZGl0aW9uIGl0ZW0sIHRoaXMgY2xhc3MgbWFuYWdlcyBpbmhlcml0YW5jZSBvZiBxdW90ZXMgcHJvcGVydHlcbiAqL1xuZXhwb3J0IGNsYXNzIFF1b3Rlc1Njb3BlSXRlbSBpbXBsZW1lbnRzIENvbmRpdGlvbkl0ZW0ge1xuICBjb25zdHJ1Y3RvcihwdWJsaWMgcmVhZG9ubHkgb2xkUXVvdGVzOiBDc3MuU3RyW10pIHt9XG5cbiAgLyoqXG4gICAqIEBvdmVycmlkZVxuICAgKi9cbiAgZnJlc2goY2FzY2FkZUluc3RhbmNlOiBDYXNjYWRlSW5zdGFuY2UpOiBDb25kaXRpb25JdGVtIHtcbiAgICByZXR1cm4gdGhpcztcbiAgfVxuXG4gIC8qKlxuICAgKiBAb3ZlcnJpZGVcbiAgICovXG4gIHB1c2goY2FzY2FkZUluc3RhbmNlOiBDYXNjYWRlSW5zdGFuY2UsIGRlcHRoOiBudW1iZXIpOiBib29sZWFuIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cblxuICAvKipcbiAgICogQG92ZXJyaWRlXG4gICAqL1xuICBwb3AoY2FzY2FkZUluc3RhbmNlOiBDYXNjYWRlSW5zdGFuY2UsIGRlcHRoOiBudW1iZXIpOiBib29sZWFuIHtcbiAgICBpZiAoZGVwdGggPT0gMCkge1xuICAgICAgY2FzY2FkZUluc3RhbmNlLnF1b3RlcyA9IHRoaXMub2xkUXVvdGVzO1xuICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuICAgIHJldHVybiBmYWxzZTtcbiAgfVxufVxuZXhwb3J0IHR5cGUgQ291bnRlclZhbHVlcyA9IHtcbiAgW2tleTogc3RyaW5nXTogbnVtYmVyW107XG59O1xuXG5leHBvcnQgaW50ZXJmYWNlIENvdW50ZXJMaXN0ZW5lciB7XG4gIGNvdW50ZXJzT2ZJZChpZDogc3RyaW5nLCBjb3VudGVyczogQ291bnRlclZhbHVlcyk7XG5cbiAgZ2V0RXhwckNvbnRlbnRMaXN0ZW5lcigpOiBWdHJlZS5FeHByQ29udGVudExpc3RlbmVyO1xufVxuXG5leHBvcnQgaW50ZXJmYWNlIENvdW50ZXJSZXNvbHZlciB7XG4gIHNldFN0eWxlcihzdHlsZXI6IGFueSk6IHZvaWQ7XG5cbiAgLyoqXG4gICAqIFJldHVybnMgYW4gRXhwcnMuVmFsLCB3aG9zZSB2YWx1ZSBpcyBjYWxjdWxhdGVkIGF0IHRoZSBsYXlvdXQgdGltZSBieVxuICAgKiByZXRyaWV2aW5nIHRoZSBpbm5lcm1vc3QgcGFnZS1iYXNlZCBjb3VudGVyIChudWxsIGlmIGl0IGRvZXMgbm90IGV4aXN0KSBieVxuICAgKiBpdHMgbmFtZSBhbmQgZm9ybWF0dGluZyB0aGUgdmFsdWUgaW50byBhIHN0cmluZy5cbiAgICogQHBhcmFtIG5hbWUgTmFtZSBvZiB0aGUgcGFnZS1iYXNlZCBjb3VudGVyIHRvIGJlIHJldHJpZXZlZFxuICAgKiBAcGFyYW0gZm9ybWF0IEEgZnVuY3Rpb24gdGhhdCBmb3JtYXRzIHRoZSBjb3VudGVyIHZhbHVlIGludG8gYSBzdHJpbmdcbiAgICovXG4gIGdldFBhZ2VDb3VudGVyVmFsKFxuICAgIG5hbWU6IHN0cmluZyxcbiAgICBmb3JtYXQ6IChwMTogbnVtYmVyIHwgbnVsbCkgPT4gc3RyaW5nLFxuICApOiBFeHBycy5WYWw7XG5cbiAgLyoqXG4gICAqIFJldHVybnMgYW4gRXhwcnMuVmFsLCB3aG9zZSB2YWx1ZSBpcyBjYWxjdWxhdGVkIGF0IHRoZSBsYXlvdXQgdGltZSBieVxuICAgKiByZXRyaWV2aW5nIHRoZSBwYWdlLWJhc2VkIGNvdW50ZXJzIGJ5IGl0cyBuYW1lIGFuZCBmb3JtYXR0aW5nIHRoZSB2YWx1ZXNcbiAgICogaW50byBhIHN0cmluZy5cbiAgICogQHBhcmFtIG5hbWUgTmFtZSBvZiB0aGUgcGFnZS1iYXNlZCBjb3VudGVycyB0byBiZSByZXRyaWV2ZWRcbiAgICogQHBhcmFtIGZvcm1hdCBBIGZ1bmN0aW9uIHRoYXQgZm9ybWF0cyB0aGUgY291bnRlciB2YWx1ZXMgKHBhc3NlZCBhcyBhblxuICAgKiAgICAgYXJyYXkgb3JkZXJlZCBieSB0aGUgbmVzdGluZyBkZXB0aCB3aXRoIHRoZSBvdXRlcm1vc3QgY291bnRlciBmaXJzdCBhbmRcbiAgICogICAgIHRoZSBpbm5lcm1vc3QgbGFzdCkgaW50byBhIHN0cmluZ1xuICAgKi9cbiAgZ2V0UGFnZUNvdW50ZXJzVmFsKG5hbWU6IHN0cmluZywgZm9ybWF0OiAocDE6IG51bWJlcltdKSA9PiBzdHJpbmcpOiBFeHBycy5WYWw7XG5cbiAgZ2V0VGFyZ2V0Q291bnRlclZhbChcbiAgICB1cmw6IHN0cmluZyxcbiAgICBuYW1lOiBzdHJpbmcsXG4gICAgZm9ybWF0OiAocDE6IG51bWJlciB8IG51bGwpID0+IHN0cmluZyxcbiAgKTogRXhwcnMuVmFsO1xuXG4gIGdldFRhcmdldENvdW50ZXJzVmFsKFxuICAgIHVybDogc3RyaW5nLFxuICAgIG5hbWU6IHN0cmluZyxcbiAgICBmb3JtYXQ6IChwMTogbnVtYmVyW10pID0+IHN0cmluZyxcbiAgKTogRXhwcnMuVmFsO1xuXG4gIC8qKlxuICAgKiBHZXQgdmFsdWUgb2YgdGhlIENTUyBzdHJpbmcoKSBmdW5jdGlvblxuICAgKiBodHRwczovL2RyYWZ0cy5jc3N3Zy5vcmcvY3NzLWdjcG0tMy8jdXNpbmctbmFtZWQtc3RyaW5nc1xuICAgKi9cbiAgZ2V0TmFtZWRTdHJpbmdWYWwobmFtZTogc3RyaW5nLCByZXRyaWV2ZVBvc2l0aW9uOiBzdHJpbmcpOiBFeHBycy5WYWw7XG5cbiAgLyoqXG4gICAqIFNldCBuYW1lZCBzdHJpbmcgZm9yIHRoZSBDU1Mgc3RyaW5nLXNldCBwcm9wZXJ0eVxuICAgKiBodHRwczovL2RyYWZ0cy5jc3N3Zy5vcmcvY3NzLWdjcG0tMy8jc2V0dGluZy1uYW1lZC1zdHJpbmdzLXRoZS1zdHJpbmctc2V0LXByb1xuICAgKi9cbiAgc2V0TmFtZWRTdHJpbmcoXG4gICAgbmFtZTogc3RyaW5nLFxuICAgIHN0cmluZ1ZhbHVlOiBzdHJpbmcsXG4gICAgY2FzY2FkZUluc3RhbmNlOiBDYXNjYWRlSW5zdGFuY2UsXG4gICk6IHZvaWQ7XG59XG5cbmV4cG9ydCBjbGFzcyBBdHRyVmFsdWVGaWx0ZXJWaXNpdG9yIGV4dGVuZHMgQ3NzLkZpbHRlclZpc2l0b3Ige1xuICBjb25zdHJ1Y3RvcihwdWJsaWMgZWxlbWVudDogRWxlbWVudCkge1xuICAgIHN1cGVyKCk7XG4gIH1cblxuICBwcml2YXRlIGNyZWF0ZVZhbHVlRnJvbVN0cmluZyhzdHI6IHN0cmluZyB8IG51bGwsIHR5cGU6IHN0cmluZyk6IENzcy5WYWwge1xuICAgIHN3aXRjaCAodHlwZSkge1xuICAgICAgY2FzZSBcInVybFwiOlxuICAgICAgICBpZiAoc3RyKSB7XG4gICAgICAgICAgcmV0dXJuIG5ldyBDc3MuVVJMKHN0cik7IC8vIFRPRE8gc2hvdWxkIGNvbnZlcnQgdG8gYWJzb2x1dGUgcGF0aFxuICAgICAgICB9XG4gICAgICAgIHJldHVybiBuZXcgQ3NzLlVSTChcImFib3V0OmludmFsaWRcIik7XG4gICAgICBjYXNlIFwic3RyaW5nXCI6XG4gICAgICBkZWZhdWx0OlxuICAgICAgICBpZiAoc3RyKSB7XG4gICAgICAgICAgcmV0dXJuIG5ldyBDc3MuU3RyKHN0cik7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIG5ldyBDc3MuU3RyKFwiXCIpO1xuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAgKiBAb3ZlcnJpZGVcbiAgICovXG4gIHZpc2l0RnVuYyhmdW5jOiBDc3MuRnVuYyk6IENzcy5WYWwge1xuICAgIGlmIChmdW5jLm5hbWUgIT09IFwiYXR0clwiKSB7XG4gICAgICByZXR1cm4gc3VwZXIudmlzaXRGdW5jKGZ1bmMpO1xuICAgIH1cbiAgICBsZXQgdHlwZSA9IFwic3RyaW5nXCI7XG4gICAgbGV0IGF0dHJpYnV0ZU5hbWU6IHN0cmluZyB8IG51bGwgPSBudWxsO1xuICAgIGxldCBkZWZhdWx0VmFsdWU6IENzcy5WYWwgPSBudWxsO1xuICAgIGlmIChmdW5jLnZhbHVlc1swXSBpbnN0YW5jZW9mIENzcy5TcGFjZUxpc3QpIHtcbiAgICAgIGNvbnN0IHZhbHVlcyA9IChmdW5jLnZhbHVlc1swXSBhcyBDc3MuU3BhY2VMaXN0KS52YWx1ZXM7XG4gICAgICBpZiAodmFsdWVzLmxlbmd0aCA+PSAyKSB7XG4gICAgICAgIHR5cGUgPSB2YWx1ZXNbMV0uc3RyaW5nVmFsdWUoKTtcbiAgICAgIH1cbiAgICAgIGF0dHJpYnV0ZU5hbWUgPSB2YWx1ZXNbMF0uc3RyaW5nVmFsdWUoKTtcbiAgICB9IGVsc2Uge1xuICAgICAgYXR0cmlidXRlTmFtZSA9IGZ1bmMudmFsdWVzWzBdLnN0cmluZ1ZhbHVlKCk7XG4gICAgfVxuICAgIGlmIChmdW5jLnZhbHVlcy5sZW5ndGggPiAxKSB7XG4gICAgICBkZWZhdWx0VmFsdWUgPSB0aGlzLmNyZWF0ZVZhbHVlRnJvbVN0cmluZyhcbiAgICAgICAgZnVuYy52YWx1ZXNbMV0uc3RyaW5nVmFsdWUoKSxcbiAgICAgICAgdHlwZSxcbiAgICAgICk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGRlZmF1bHRWYWx1ZSA9IHRoaXMuY3JlYXRlVmFsdWVGcm9tU3RyaW5nKG51bGwsIHR5cGUpO1xuICAgIH1cbiAgICBpZiAodGhpcy5lbGVtZW50ICYmIHRoaXMuZWxlbWVudC5oYXNBdHRyaWJ1dGUoYXR0cmlidXRlTmFtZSkpIHtcbiAgICAgIHJldHVybiB0aGlzLmNyZWF0ZVZhbHVlRnJvbVN0cmluZyhcbiAgICAgICAgdGhpcy5lbGVtZW50LmdldEF0dHJpYnV0ZShhdHRyaWJ1dGVOYW1lKSxcbiAgICAgICAgdHlwZSxcbiAgICAgICk7XG4gICAgfVxuICAgIHJldHVybiBkZWZhdWx0VmFsdWU7XG4gIH1cbn1cblxuLyoqXG4gKiBHZXQgY29uY2F0ZW5hdGVkIHN0cmluZyB2YWx1ZSBmcm9tIENTUyBgc3RyaW5nLXNldGAgYW5kIGBjb250ZW50YCBwcm9wZXJ0eVxuICovXG5mdW5jdGlvbiBnZXRTdHJpbmdWYWx1ZUZyb21Dc3NDb250ZW50VmFsKHZhbDogQ3NzLlZhbCk6IHN0cmluZyB7XG4gIC8vIFdoZW4gdGhpcyBmdW5jdGlvbiBpcyBjYWxsZWQsIENTUyBgY29udGVudCgpYCwgYGF0dHIoKWAsIGBjb3VudGVyKClgXG4gIC8vIHZhbHVlcyBhcmUgYWxyZWFkeSByZXNvbHZlZCB0byBzdHJpbmdzIHZhbHVlcy4gUmVtYWluaW5nIG5vbi1zdHJpbmcgdmFsdWVzXG4gIC8vIGFyZSBpZ25vcmVkLlxuICBpZiAoVnRyZWUubm9uVHJpdmlhbENvbnRlbnQodmFsKSkge1xuICAgIGlmICh2YWwgaW5zdGFuY2VvZiBDc3MuU3RyKSB7XG4gICAgICByZXR1cm4gdmFsLnN0cmluZ1ZhbHVlKCk7XG4gICAgfVxuICAgIGlmICh2YWwgaW5zdGFuY2VvZiBDc3MuU3BhY2VMaXN0KSB7XG4gICAgICByZXR1cm4gdmFsLnZhbHVlcy5tYXAoKHYpID0+IGdldFN0cmluZ1ZhbHVlRnJvbUNzc0NvbnRlbnRWYWwodikpLmpvaW4oXCJcIik7XG4gICAgfVxuICB9XG4gIHJldHVybiBcIlwiO1xufVxuXG5leHBvcnQgY2xhc3MgQ29udGVudFByb3BWaXNpdG9yIGV4dGVuZHMgQ3NzLkZpbHRlclZpc2l0b3Ige1xuICBjb25zdHJ1Y3RvcihcbiAgICBwdWJsaWMgY2FzY2FkZTogQ2FzY2FkZUluc3RhbmNlLFxuICAgIHB1YmxpYyBlbGVtZW50OiBFbGVtZW50LFxuICAgIHB1YmxpYyByZWFkb25seSBjb3VudGVyUmVzb2x2ZXI6IENvdW50ZXJSZXNvbHZlcixcbiAgKSB7XG4gICAgc3VwZXIoKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBAb3ZlcnJpZGVcbiAgICovXG4gIHZpc2l0SWRlbnQoaWRlbnQ6IENzcy5JZGVudCk6IENzcy5WYWwge1xuICAgIGNvbnN0IGNhc2NhZGUgPSB0aGlzLmNhc2NhZGU7XG4gICAgY29uc3QgcXVvdGVzID0gY2FzY2FkZS5xdW90ZXM7XG4gICAgY29uc3QgbWF4RGVwdGggPSBNYXRoLmZsb29yKHF1b3Rlcy5sZW5ndGggLyAyKSAtIDE7XG4gICAgc3dpdGNoIChpZGVudC5uYW1lKSB7XG4gICAgICBjYXNlIFwib3Blbi1xdW90ZVwiOiB7XG4gICAgICAgIGNvbnN0IHJlc3VsdCA9IHF1b3Rlc1syICogTWF0aC5taW4obWF4RGVwdGgsIGNhc2NhZGUucXVvdGVEZXB0aCldO1xuICAgICAgICBjYXNjYWRlLnF1b3RlRGVwdGgrKztcbiAgICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICAgIH1cbiAgICAgIGNhc2UgXCJjbG9zZS1xdW90ZVwiOlxuICAgICAgICBpZiAoY2FzY2FkZS5xdW90ZURlcHRoID4gMCkge1xuICAgICAgICAgIGNhc2NhZGUucXVvdGVEZXB0aC0tO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBxdW90ZXNbMiAqIE1hdGgubWluKG1heERlcHRoLCBjYXNjYWRlLnF1b3RlRGVwdGgpICsgMV07XG4gICAgICBjYXNlIFwibm8tb3Blbi1xdW90ZVwiOlxuICAgICAgICBjYXNjYWRlLnF1b3RlRGVwdGgrKztcbiAgICAgICAgcmV0dXJuIG5ldyBDc3MuU3RyKFwiXCIpO1xuICAgICAgY2FzZSBcIm5vLWNsb3NlLXF1b3RlXCI6XG4gICAgICAgIGlmIChjYXNjYWRlLnF1b3RlRGVwdGggPiAwKSB7XG4gICAgICAgICAgY2FzY2FkZS5xdW90ZURlcHRoLS07XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIG5ldyBDc3MuU3RyKFwiXCIpO1xuICAgIH1cbiAgICByZXR1cm4gaWRlbnQ7XG4gIH1cblxuICBwcml2YXRlIGZvcm1hdChudW06IG51bWJlciwgdHlwZTogc3RyaW5nKTogc3RyaW5nIHtcbiAgICBsZXQgdXBwZXIgPSBmYWxzZTsgLy8gdHlwZSA9PSBcImFybWVuaWFuXCI7XG4gICAgLy8gY29udGVudC1jb3VudGVyLTEwLnhodCBhc3N1bWVzIGFybWVuaWFuIGlzIHVwcGVyY2FzZSwgZW5hYmxlIGlmIGRlc2lyZWRcblxuICAgIGxldCBsb3dlciA9IGZhbHNlO1xuICAgIGxldCByOiBSZWdFeHBNYXRjaEFycmF5O1xuICAgIGlmICgociA9IHR5cGUubWF0Y2goL151cHBlci0oLiopLykpICE9IG51bGwpIHtcbiAgICAgIHVwcGVyID0gdHJ1ZTtcbiAgICAgIHR5cGUgPSByWzFdO1xuICAgIH0gZWxzZSBpZiAoKHIgPSB0eXBlLm1hdGNoKC9ebG93ZXItKC4qKS8pKSAhPSBudWxsKSB7XG4gICAgICBsb3dlciA9IHRydWU7XG4gICAgICB0eXBlID0gclsxXTtcbiAgICB9XG4gICAgbGV0IHJlc3VsdCA9IFwiXCI7XG4gICAgaWYgKGFkZGl0aXZlTnVtYmVyaW5nW3R5cGVdKSB7XG4gICAgICByZXN1bHQgPSBhZGRpdGl2ZUZvcm1hdChhZGRpdGl2ZU51bWJlcmluZ1t0eXBlXSwgbnVtKTtcbiAgICB9IGVsc2UgaWYgKGFscGhhYmV0aWNOdW1iZXJpbmdbdHlwZV0pIHtcbiAgICAgIHJlc3VsdCA9IGFscGhhYmV0aWNGb3JtYXQoYWxwaGFiZXRpY051bWJlcmluZ1t0eXBlXSwgbnVtKTtcbiAgICB9IGVsc2UgaWYgKGZpeGVkW3R5cGVdICE9IG51bGwpIHtcbiAgICAgIHJlc3VsdCA9IGZpeGVkW3R5cGVdO1xuICAgIH0gZWxzZSBpZiAodHlwZSA9PSBcImRlY2ltYWwtbGVhZGluZy16ZXJvXCIpIHtcbiAgICAgIHJlc3VsdCA9IGAke251bX1gO1xuICAgICAgaWYgKHJlc3VsdC5sZW5ndGggPT0gMSkge1xuICAgICAgICByZXN1bHQgPSBgMCR7cmVzdWx0fWA7XG4gICAgICB9XG4gICAgfSBlbHNlIGlmICh0eXBlID09IFwiY2prLWlkZW9ncmFwaGljXCIgfHwgdHlwZSA9PSBcInRyYWQtY2hpbmVzZS1pbmZvcm1hbFwiKSB7XG4gICAgICByZXN1bHQgPSBjaGluZXNlQ291bnRlcihudW0sIGNoaW5lc2VUcmFkSW5mb3JtYWwpO1xuICAgIH0gZWxzZSB7XG4gICAgICByZXN1bHQgPSBgJHtudW19YDtcbiAgICB9XG4gICAgaWYgKHVwcGVyKSB7XG4gICAgICByZXR1cm4gcmVzdWx0LnRvVXBwZXJDYXNlKCk7XG4gICAgfVxuICAgIGlmIChsb3dlcikge1xuICAgICAgcmV0dXJuIHJlc3VsdC50b0xvd2VyQ2FzZSgpO1xuICAgIH1cbiAgICByZXR1cm4gcmVzdWx0O1xuICB9XG5cbiAgdmlzaXRGdW5jQ291bnRlcih2YWx1ZXM6IENzcy5WYWxbXSk6IENzcy5WYWwge1xuICAgIGNvbnN0IGNvdW50ZXJOYW1lID0gdmFsdWVzWzBdLnRvU3RyaW5nKCk7XG4gICAgY29uc3QgdHlwZSA9IHZhbHVlcy5sZW5ndGggPiAxID8gdmFsdWVzWzFdLnN0cmluZ1ZhbHVlKCkgOiBcImRlY2ltYWxcIjtcbiAgICBjb25zdCBhcnIgPSB0aGlzLmNhc2NhZGUuY291bnRlcnNbY291bnRlck5hbWVdO1xuICAgIGlmIChhcnIgJiYgYXJyLmxlbmd0aCkge1xuICAgICAgY29uc3QgbnVtdmFsID0gKGFyciAmJiBhcnIubGVuZ3RoICYmIGFyclthcnIubGVuZ3RoIC0gMV0pIHx8IDA7XG4gICAgICByZXR1cm4gbmV3IENzcy5TdHIodGhpcy5mb3JtYXQobnVtdmFsLCB0eXBlKSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGNvbnN0IGMgPSBuZXcgQ3NzLkV4cHIoXG4gICAgICAgIHRoaXMuY291bnRlclJlc29sdmVyLmdldFBhZ2VDb3VudGVyVmFsKGNvdW50ZXJOYW1lLCAobnVtdmFsKSA9PlxuICAgICAgICAgIHRoaXMuZm9ybWF0KG51bXZhbCB8fCAwLCB0eXBlKSxcbiAgICAgICAgKSxcbiAgICAgICk7XG4gICAgICByZXR1cm4gbmV3IENzcy5TcGFjZUxpc3QoW2NdKTtcbiAgICB9XG4gIH1cblxuICB2aXNpdEZ1bmNDb3VudGVycyh2YWx1ZXM6IENzcy5WYWxbXSk6IENzcy5WYWwge1xuICAgIGNvbnN0IGNvdW50ZXJOYW1lID0gdmFsdWVzWzBdLnRvU3RyaW5nKCk7XG4gICAgY29uc3Qgc2VwYXJhdG9yID0gdmFsdWVzWzFdLnN0cmluZ1ZhbHVlKCk7XG4gICAgY29uc3QgdHlwZSA9IHZhbHVlcy5sZW5ndGggPiAyID8gdmFsdWVzWzJdLnN0cmluZ1ZhbHVlKCkgOiBcImRlY2ltYWxcIjtcbiAgICBjb25zdCBhcnIgPSB0aGlzLmNhc2NhZGUuY291bnRlcnNbY291bnRlck5hbWVdO1xuICAgIGNvbnN0IHNiID0gbmV3IEJhc2UuU3RyaW5nQnVmZmVyKCk7XG4gICAgaWYgKGFyciAmJiBhcnIubGVuZ3RoKSB7XG4gICAgICBmb3IgKGxldCBpID0gMDsgaSA8IGFyci5sZW5ndGg7IGkrKykge1xuICAgICAgICBpZiAoaSA+IDApIHtcbiAgICAgICAgICBzYi5hcHBlbmQoc2VwYXJhdG9yKTtcbiAgICAgICAgfVxuICAgICAgICBzYi5hcHBlbmQodGhpcy5mb3JtYXQoYXJyW2ldLCB0eXBlKSk7XG4gICAgICB9XG4gICAgfVxuICAgIGNvbnN0IGMgPSBuZXcgQ3NzLkV4cHIoXG4gICAgICB0aGlzLmNvdW50ZXJSZXNvbHZlci5nZXRQYWdlQ291bnRlcnNWYWwoY291bnRlck5hbWUsIChudW12YWxzKSA9PiB7XG4gICAgICAgIGNvbnN0IHBhcnRzID0gW10gYXMgc3RyaW5nW107XG4gICAgICAgIGlmIChudW12YWxzLmxlbmd0aCkge1xuICAgICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgbnVtdmFscy5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgcGFydHMucHVzaCh0aGlzLmZvcm1hdChudW12YWxzW2ldLCB0eXBlKSk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGNvbnN0IGVsZW1lbnRDb3VudGVycyA9IHNiLnRvU3RyaW5nKCk7XG4gICAgICAgIGlmIChlbGVtZW50Q291bnRlcnMubGVuZ3RoKSB7XG4gICAgICAgICAgcGFydHMucHVzaChlbGVtZW50Q291bnRlcnMpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChwYXJ0cy5sZW5ndGgpIHtcbiAgICAgICAgICByZXR1cm4gcGFydHMuam9pbihzZXBhcmF0b3IpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHJldHVybiB0aGlzLmZvcm1hdCgwLCB0eXBlKTtcbiAgICAgICAgfVxuICAgICAgfSksXG4gICAgKTtcbiAgICByZXR1cm4gbmV3IENzcy5TcGFjZUxpc3QoW2NdKTtcbiAgfVxuXG4gIHZpc2l0RnVuY1RhcmdldENvdW50ZXIodmFsdWVzOiBDc3MuVmFsW10pOiBDc3MuVmFsIHtcbiAgICBjb25zdCB0YXJnZXRVcmwgPSB2YWx1ZXNbMF07XG4gICAgbGV0IHRhcmdldFVybFN0cjogc3RyaW5nO1xuICAgIGlmICh0YXJnZXRVcmwgaW5zdGFuY2VvZiBDc3MuVVJMKSB7XG4gICAgICB0YXJnZXRVcmxTdHIgPSB0YXJnZXRVcmwudXJsO1xuICAgIH0gZWxzZSB7XG4gICAgICB0YXJnZXRVcmxTdHIgPSB0YXJnZXRVcmwuc3RyaW5nVmFsdWUoKTtcbiAgICB9XG4gICAgY29uc3QgY291bnRlck5hbWUgPSB2YWx1ZXNbMV0udG9TdHJpbmcoKTtcbiAgICBjb25zdCB0eXBlID0gdmFsdWVzLmxlbmd0aCA+IDIgPyB2YWx1ZXNbMl0uc3RyaW5nVmFsdWUoKSA6IFwiZGVjaW1hbFwiO1xuICAgIGNvbnN0IGMgPSBuZXcgQ3NzLkV4cHIoXG4gICAgICB0aGlzLmNvdW50ZXJSZXNvbHZlci5nZXRUYXJnZXRDb3VudGVyVmFsKFxuICAgICAgICB0YXJnZXRVcmxTdHIsXG4gICAgICAgIGNvdW50ZXJOYW1lLFxuICAgICAgICAobnVtdmFsKSA9PiB0aGlzLmZvcm1hdChudW12YWwgfHwgMCwgdHlwZSksXG4gICAgICApLFxuICAgICk7XG4gICAgcmV0dXJuIG5ldyBDc3MuU3BhY2VMaXN0KFtjXSk7XG4gIH1cblxuICB2aXNpdEZ1bmNUYXJnZXRDb3VudGVycyh2YWx1ZXM6IENzcy5WYWxbXSk6IENzcy5WYWwge1xuICAgIGNvbnN0IHRhcmdldFVybCA9IHZhbHVlc1swXTtcbiAgICBsZXQgdGFyZ2V0VXJsU3RyOiBzdHJpbmc7XG4gICAgaWYgKHRhcmdldFVybCBpbnN0YW5jZW9mIENzcy5VUkwpIHtcbiAgICAgIHRhcmdldFVybFN0ciA9IHRhcmdldFVybC51cmw7XG4gICAgfSBlbHNlIHtcbiAgICAgIHRhcmdldFVybFN0ciA9IHRhcmdldFVybC5zdHJpbmdWYWx1ZSgpO1xuICAgIH1cbiAgICBjb25zdCBjb3VudGVyTmFtZSA9IHZhbHVlc1sxXS50b1N0cmluZygpO1xuICAgIGNvbnN0IHNlcGFyYXRvciA9IHZhbHVlc1syXS5zdHJpbmdWYWx1ZSgpO1xuICAgIGNvbnN0IHR5cGUgPSB2YWx1ZXMubGVuZ3RoID4gMyA/IHZhbHVlc1szXS5zdHJpbmdWYWx1ZSgpIDogXCJkZWNpbWFsXCI7XG4gICAgY29uc3QgYyA9IG5ldyBDc3MuRXhwcihcbiAgICAgIHRoaXMuY291bnRlclJlc29sdmVyLmdldFRhcmdldENvdW50ZXJzVmFsKFxuICAgICAgICB0YXJnZXRVcmxTdHIsXG4gICAgICAgIGNvdW50ZXJOYW1lLFxuICAgICAgICAobnVtdmFscykgPT4ge1xuICAgICAgICAgIGNvbnN0IHBhcnRzID0gbnVtdmFscy5tYXAoKG51bXZhbCkgPT4gdGhpcy5mb3JtYXQobnVtdmFsLCB0eXBlKSk7XG4gICAgICAgICAgaWYgKHBhcnRzLmxlbmd0aCkge1xuICAgICAgICAgICAgcmV0dXJuIHBhcnRzLmpvaW4oc2VwYXJhdG9yKTtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMuZm9ybWF0KDAsIHR5cGUpO1xuICAgICAgICAgIH1cbiAgICAgICAgfSxcbiAgICAgICksXG4gICAgKTtcbiAgICByZXR1cm4gbmV3IENzcy5TcGFjZUxpc3QoW2NdKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBDU1MgYHN0cmluZygpYCBmdW5jdGlvblxuICAgKiBodHRwczovL2RyYWZ0cy5jc3N3Zy5vcmcvY3NzLWdjcG0tMy8jdXNpbmctbmFtZWQtc3RyaW5nc1xuICAgKi9cbiAgdmlzaXRGdW5jU3RyaW5nKHZhbHVlczogQ3NzLlZhbFtdKTogQ3NzLlZhbCB7XG4gICAgY29uc3QgbmFtZSA9IHZhbHVlcy5sZW5ndGggPiAwID8gdmFsdWVzWzBdLnN0cmluZ1ZhbHVlKCkgOiBcIlwiO1xuICAgIGNvbnN0IHJldHJpZXZlUG9zaXRpb24gPVxuICAgICAgdmFsdWVzLmxlbmd0aCA+IDEgPyB2YWx1ZXNbMV0uc3RyaW5nVmFsdWUoKSA6IFwiZmlyc3RcIjtcbiAgICBjb25zdCBjID0gbmV3IENzcy5FeHByKFxuICAgICAgdGhpcy5jb3VudGVyUmVzb2x2ZXIuZ2V0TmFtZWRTdHJpbmdWYWwobmFtZSwgcmV0cmlldmVQb3NpdGlvbiksXG4gICAgKTtcbiAgICByZXR1cm4gbmV3IENzcy5TcGFjZUxpc3QoW2NdKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBDU1MgYGNvbnRlbnQoKWAgZnVuY3Rpb25cbiAgICogaHR0cHM6Ly9kcmFmdHMuY3Nzd2cub3JnL2Nzcy1nY3BtLTMvI2NvbnRlbnQtZnVuY3Rpb24taGVhZGVyXG4gICAqL1xuICB2aXNpdEZ1bmNDb250ZW50KHZhbHVlczogQ3NzLlZhbFtdKTogQ3NzLlZhbCB7XG4gICAgY29uc3QgcHNldWRvTmFtZSA9IHZhbHVlcy5sZW5ndGggPiAwID8gdmFsdWVzWzBdLnN0cmluZ1ZhbHVlKCkgOiBcInRleHRcIjtcbiAgICBsZXQgc3RyaW5nVmFsdWUgPSBcIlwiO1xuICAgIHN3aXRjaCAocHNldWRvTmFtZSkge1xuICAgICAgY2FzZSBcInRleHRcIjpcbiAgICAgIGNhc2UgXCJmaXJzdC1sZXR0ZXJcIjpcbiAgICAgICAgc3RyaW5nVmFsdWUgPSB0aGlzLmVsZW1lbnQudGV4dENvbnRlbnQudHJpbSgpLnJlcGxhY2UoL1xccysvZywgXCIgXCIpO1xuICAgICAgICBpZiAocHNldWRvTmFtZSA9PT0gXCJmaXJzdC1sZXR0ZXJcIikge1xuICAgICAgICAgIGNvbnN0IHIgPSBzdHJpbmdWYWx1ZS5tYXRjaChCYXNlLmZpcnN0TGV0dGVyUGF0dGVybik7XG4gICAgICAgICAgc3RyaW5nVmFsdWUgPSByID8gclswXSA6IFwiXCI7XG4gICAgICAgIH1cbiAgICAgICAgYnJlYWs7XG4gICAgICBjYXNlIFwiYmVmb3JlXCI6XG4gICAgICBjYXNlIFwiYWZ0ZXJcIjpcbiAgICAgICAge1xuICAgICAgICAgIGNvbnN0IHBzZXVkb3MgPSBnZXRTdHlsZU1hcCh0aGlzLmNhc2NhZGUuY3VycmVudFN0eWxlLCBcIl9wc2V1ZG9zXCIpO1xuICAgICAgICAgIGNvbnN0IHZhbDogQ3NzLlZhbCA9IHBzZXVkb3M/Lltwc2V1ZG9OYW1lXT8uW1wiY29udGVudFwiXT8udmFsdWU7XG4gICAgICAgICAgc3RyaW5nVmFsdWUgPSBnZXRTdHJpbmdWYWx1ZUZyb21Dc3NDb250ZW50VmFsKHZhbCk7XG4gICAgICAgIH1cbiAgICAgICAgYnJlYWs7XG4gICAgfVxuICAgIHJldHVybiBuZXcgQ3NzLlN0cihzdHJpbmdWYWx1ZSk7XG4gIH1cblxuICAvKipcbiAgICogQG92ZXJyaWRlXG4gICAqL1xuICB2aXNpdEZ1bmMoZnVuYzogQ3NzLkZ1bmMpOiBDc3MuVmFsIHtcbiAgICBzd2l0Y2ggKGZ1bmMubmFtZSkge1xuICAgICAgY2FzZSBcImNvdW50ZXJcIjpcbiAgICAgICAgaWYgKGZ1bmMudmFsdWVzLmxlbmd0aCA8PSAyKSB7XG4gICAgICAgICAgcmV0dXJuIHRoaXMudmlzaXRGdW5jQ291bnRlcihmdW5jLnZhbHVlcyk7XG4gICAgICAgIH1cbiAgICAgICAgYnJlYWs7XG4gICAgICBjYXNlIFwiY291bnRlcnNcIjpcbiAgICAgICAgaWYgKGZ1bmMudmFsdWVzLmxlbmd0aCA8PSAzKSB7XG4gICAgICAgICAgcmV0dXJuIHRoaXMudmlzaXRGdW5jQ291bnRlcnMoZnVuYy52YWx1ZXMpO1xuICAgICAgICB9XG4gICAgICAgIGJyZWFrO1xuICAgICAgY2FzZSBcInRhcmdldC1jb3VudGVyXCI6XG4gICAgICAgIGlmIChmdW5jLnZhbHVlcy5sZW5ndGggPD0gMykge1xuICAgICAgICAgIHJldHVybiB0aGlzLnZpc2l0RnVuY1RhcmdldENvdW50ZXIoZnVuYy52YWx1ZXMpO1xuICAgICAgICB9XG4gICAgICAgIGJyZWFrO1xuICAgICAgY2FzZSBcInRhcmdldC1jb3VudGVyc1wiOlxuICAgICAgICBpZiAoZnVuYy52YWx1ZXMubGVuZ3RoIDw9IDQpIHtcbiAgICAgICAgICByZXR1cm4gdGhpcy52aXNpdEZ1bmNUYXJnZXRDb3VudGVycyhmdW5jLnZhbHVlcyk7XG4gICAgICAgIH1cbiAgICAgICAgYnJlYWs7XG4gICAgICBjYXNlIFwic3RyaW5nXCI6XG4gICAgICAgIGlmIChmdW5jLnZhbHVlcy5sZW5ndGggPD0gMikge1xuICAgICAgICAgIHJldHVybiB0aGlzLnZpc2l0RnVuY1N0cmluZyhmdW5jLnZhbHVlcyk7XG4gICAgICAgIH1cbiAgICAgICAgYnJlYWs7XG4gICAgICBjYXNlIFwiY29udGVudFwiOlxuICAgICAgICBpZiAoZnVuYy52YWx1ZXMubGVuZ3RoIDw9IDEpIHtcbiAgICAgICAgICByZXR1cm4gdGhpcy52aXNpdEZ1bmNDb250ZW50KGZ1bmMudmFsdWVzKTtcbiAgICAgICAgfVxuICAgICAgICBicmVhaztcbiAgICB9XG4gICAgTG9nZ2luZy5sb2dnZXIud2FybihcIkVfQ1NTX0NPTlRFTlRfUFJPUDpcIiwgZnVuYy50b1N0cmluZygpKTtcbiAgICByZXR1cm4gbmV3IENzcy5TdHIoXCJcIik7XG4gIH1cbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHJvbWFuKG51bTogbnVtYmVyKTogc3RyaW5nIHtcbiAgaWYgKG51bSA8PSAwIHx8IG51bSAhPSBNYXRoLnJvdW5kKG51bSkgfHwgbnVtID4gMzk5OSkge1xuICAgIHJldHVybiBcIlwiO1xuICB9XG4gIGNvbnN0IGRpZ2l0cyA9IFtcIklcIiwgXCJWXCIsIFwiWFwiLCBcIkxcIiwgXCJDXCIsIFwiRFwiLCBcIk1cIl07XG4gIGxldCBvZmZzZXQgPSAwO1xuICBsZXQgYWNjID0gXCJcIjtcbiAgd2hpbGUgKG51bSA+IDApIHtcbiAgICBsZXQgZGlnaXQgPSBudW0gJSAxMDtcbiAgICBudW0gPSAobnVtIC0gZGlnaXQpIC8gMTA7XG4gICAgbGV0IHJlc3VsdCA9IFwiXCI7XG4gICAgaWYgKGRpZ2l0ID09IDkpIHtcbiAgICAgIHJlc3VsdCArPSBkaWdpdHNbb2Zmc2V0XSArIGRpZ2l0c1tvZmZzZXQgKyAyXTtcbiAgICB9IGVsc2UgaWYgKGRpZ2l0ID09IDQpIHtcbiAgICAgIHJlc3VsdCArPSBkaWdpdHNbb2Zmc2V0XSArIGRpZ2l0c1tvZmZzZXQgKyAxXTtcbiAgICB9IGVsc2Uge1xuICAgICAgaWYgKGRpZ2l0ID49IDUpIHtcbiAgICAgICAgcmVzdWx0ICs9IGRpZ2l0c1tvZmZzZXQgKyAxXTtcbiAgICAgICAgZGlnaXQgLT0gNTtcbiAgICAgIH1cbiAgICAgIHdoaWxlIChkaWdpdCA+IDApIHtcbiAgICAgICAgcmVzdWx0ICs9IGRpZ2l0c1tvZmZzZXRdO1xuICAgICAgICBkaWdpdC0tO1xuICAgICAgfVxuICAgIH1cbiAgICBhY2MgPSByZXN1bHQgKyBhY2M7XG4gICAgb2Zmc2V0ICs9IDI7XG4gIH1cbiAgcmV0dXJuIGFjYztcbn1cblxuZXhwb3J0IGNvbnN0IGFkZGl0aXZlTnVtYmVyaW5nID0ge1xuICByb21hbjogW1xuICAgIDQ5OTksXG4gICAgMTAwMCxcbiAgICBcIk1cIixcbiAgICA5MDAsXG4gICAgXCJDTVwiLFxuICAgIDUwMCxcbiAgICBcIkRcIixcbiAgICA0MDAsXG4gICAgXCJDRFwiLFxuICAgIDEwMCxcbiAgICBcIkNcIixcbiAgICA5MCxcbiAgICBcIlhDXCIsXG4gICAgNTAsXG4gICAgXCJMXCIsXG4gICAgNDAsXG4gICAgXCJYTFwiLFxuICAgIDEwLFxuICAgIFwiWFwiLFxuICAgIDksXG4gICAgXCJJWFwiLFxuICAgIDUsXG4gICAgXCJWXCIsXG4gICAgNCxcbiAgICBcIklWXCIsXG4gICAgMSxcbiAgICBcIklcIixcbiAgXSxcbiAgYXJtZW5pYW46IFtcbiAgICA5OTk5LFxuICAgIDkwMDAsXG4gICAgXCJcXHUwNTg0XCIsXG4gICAgODAwMCxcbiAgICBcIlxcdTA1ODNcIixcbiAgICA3MDAwLFxuICAgIFwiXFx1MDU4MlwiLFxuICAgIDYwMDAsXG4gICAgXCJcXHUwNTgxXCIsXG4gICAgNTAwMCxcbiAgICBcIlxcdTA1ODBcIixcbiAgICA0MDAwLFxuICAgIFwiXFx1MDU3ZlwiLFxuICAgIDMwMDAsXG4gICAgXCJcXHUwNTdlXCIsXG4gICAgMjAwMCxcbiAgICBcIlxcdTA1N2RcIixcbiAgICAxMDAwLFxuICAgIFwiXFx1MDU3Y1wiLFxuICAgIDkwMCxcbiAgICBcIlxcdTA1N2JcIixcbiAgICA4MDAsXG4gICAgXCJcXHUwNTdhXCIsXG4gICAgNzAwLFxuICAgIFwiXFx1MDU3OVwiLFxuICAgIDYwMCxcbiAgICBcIlxcdTA1NzhcIixcbiAgICA1MDAsXG4gICAgXCJcXHUwNTc3XCIsXG4gICAgNDAwLFxuICAgIFwiXFx1MDU3NlwiLFxuICAgIDMwMCxcbiAgICBcIlxcdTA1NzVcIixcbiAgICAyMDAsXG4gICAgXCJcXHUwNTc0XCIsXG4gICAgMTAwLFxuICAgIFwiXFx1MDU3M1wiLFxuICAgIDkwLFxuICAgIFwiXFx1MDU3MlwiLFxuICAgIDgwLFxuICAgIFwiXFx1MDU3MVwiLFxuICAgIDcwLFxuICAgIFwiXFx1MDU3MFwiLFxuICAgIDYwLFxuICAgIFwiXFx1MDU2ZlwiLFxuICAgIDUwLFxuICAgIFwiXFx1MDU2ZVwiLFxuICAgIDQwLFxuICAgIFwiXFx1MDU2ZFwiLFxuICAgIDMwLFxuICAgIFwiXFx1MDU2Y1wiLFxuICAgIDIwLFxuICAgIFwiXFx1MDU2YlwiLFxuICAgIDEwLFxuICAgIFwiXFx1MDU2YVwiLFxuICAgIDksXG4gICAgXCJcXHUwNTY5XCIsXG4gICAgOCxcbiAgICBcIlxcdTA1NjhcIixcbiAgICA3LFxuICAgIFwiXFx1MDU2N1wiLFxuICAgIDYsXG4gICAgXCJcXHUwNTY2XCIsXG4gICAgNSxcbiAgICBcIlxcdTA1NjVcIixcbiAgICA0LFxuICAgIFwiXFx1MDU2NFwiLFxuICAgIDMsXG4gICAgXCJcXHUwNTYzXCIsXG4gICAgMixcbiAgICBcIlxcdTA1NjJcIixcbiAgICAxLFxuICAgIFwiXFx1MDU2MVwiLFxuICBdLFxuICBnZW9yZ2lhbjogW1xuICAgIDE5OTk5LFxuICAgIDEwMDAwLFxuICAgIFwiXFx1MTBmNVwiLFxuICAgIDkwMDAsXG4gICAgXCJcXHUxMGYwXCIsXG4gICAgODAwMCxcbiAgICBcIlxcdTEwZWZcIixcbiAgICA3MDAwLFxuICAgIFwiXFx1MTBmNFwiLFxuICAgIDYwMDAsXG4gICAgXCJcXHUxMGVlXCIsXG4gICAgNTAwMCxcbiAgICBcIlxcdTEwZWRcIixcbiAgICA0MDAwLFxuICAgIFwiXFx1MTBlY1wiLFxuICAgIDMwMDAsXG4gICAgXCJcXHUxMGViXCIsXG4gICAgMjAwMCxcbiAgICBcIlxcdTEwZWFcIixcbiAgICAxMDAwLFxuICAgIFwiXFx1MTBlOVwiLFxuICAgIDkwMCxcbiAgICBcIlxcdTEwZThcIixcbiAgICA4MDAsXG4gICAgXCJcXHUxMGU3XCIsXG4gICAgNzAwLFxuICAgIFwiXFx1MTBlNlwiLFxuICAgIDYwMCxcbiAgICBcIlxcdTEwZTVcIixcbiAgICA1MDAsXG4gICAgXCJcXHUxMGU0XCIsXG4gICAgNDAwLFxuICAgIFwiXFx1MTBmM1wiLFxuICAgIDMwMCxcbiAgICBcIlxcdTEwZTJcIixcbiAgICAyMDAsXG4gICAgXCJcXHUxMGUxXCIsXG4gICAgMTAwLFxuICAgIFwiXFx1MTBlMFwiLFxuICAgIDkwLFxuICAgIFwiXFx1MTBkZlwiLFxuICAgIDgwLFxuICAgIFwiXFx1MTBkZVwiLFxuICAgIDcwLFxuICAgIFwiXFx1MTBkZFwiLFxuICAgIDYwLFxuICAgIFwiXFx1MTBmMlwiLFxuICAgIDUwLFxuICAgIFwiXFx1MTBkY1wiLFxuICAgIDQwLFxuICAgIFwiXFx1MTBkYlwiLFxuICAgIDMwLFxuICAgIFwiXFx1MTBkYVwiLFxuICAgIDIwLFxuICAgIFwiXFx1MTBkOVwiLFxuICAgIDEwLFxuICAgIFwiXFx1MTBkOFwiLFxuICAgIDksXG4gICAgXCJcXHUxMGQ3XCIsXG4gICAgOCxcbiAgICBcIlxcdTEwZjFcIixcbiAgICA3LFxuICAgIFwiXFx1MTBkNlwiLFxuICAgIDYsXG4gICAgXCJcXHUxMGQ1XCIsXG4gICAgNSxcbiAgICBcIlxcdTEwZDRcIixcbiAgICA0LFxuICAgIFwiXFx1MTBkM1wiLFxuICAgIDMsXG4gICAgXCJcXHUxMGQyXCIsXG4gICAgMixcbiAgICBcIlxcdTEwZDFcIixcbiAgICAxLFxuICAgIFwiXFx1MTBkMFwiLFxuICBdLFxuICBoZWJyZXc6IFtcbiAgICA5OTksXG4gICAgNDAwLFxuICAgIFwiXFx1MDVlYVwiLFxuICAgIDMwMCxcbiAgICBcIlxcdTA1ZTlcIixcbiAgICAyMDAsXG4gICAgXCJcXHUwNWU4XCIsXG4gICAgMTAwLFxuICAgIFwiXFx1MDVlN1wiLFxuICAgIDkwLFxuICAgIFwiXFx1MDVlNlwiLFxuICAgIDgwLFxuICAgIFwiXFx1MDVlNFwiLFxuICAgIDcwLFxuICAgIFwiXFx1MDVlMlwiLFxuICAgIDYwLFxuICAgIFwiXFx1MDVlMVwiLFxuICAgIDUwLFxuICAgIFwiXFx1MDVlMFwiLFxuICAgIDQwLFxuICAgIFwiXFx1MDVkZVwiLFxuICAgIDMwLFxuICAgIFwiXFx1MDVkY1wiLFxuICAgIDIwLFxuICAgIFwiXFx1MDVkYlwiLFxuICAgIDE5LFxuICAgIFwiXFx1MDVkOVxcdTA1ZDhcIixcbiAgICAxOCxcbiAgICBcIlxcdTA1ZDlcXHUwNWQ3XCIsXG4gICAgMTcsXG4gICAgXCJcXHUwNWQ5XFx1MDVkNlwiLFxuICAgIDE2LFxuICAgIFwiXFx1MDVkOFxcdTA1ZDZcIixcbiAgICAxNSxcbiAgICBcIlxcdTA1ZDhcXHUwNWQ1XCIsXG4gICAgMTAsXG4gICAgXCJcXHUwNWQ5XCIsXG4gICAgOSxcbiAgICBcIlxcdTA1ZDhcIixcbiAgICA4LFxuICAgIFwiXFx1MDVkN1wiLFxuICAgIDcsXG4gICAgXCJcXHUwNWQ2XCIsXG4gICAgNixcbiAgICBcIlxcdTA1ZDVcIixcbiAgICA1LFxuICAgIFwiXFx1MDVkNFwiLFxuICAgIDQsXG4gICAgXCJcXHUwNWQzXCIsXG4gICAgMyxcbiAgICBcIlxcdTA1ZDJcIixcbiAgICAyLFxuICAgIFwiXFx1MDVkMVwiLFxuICAgIDEsXG4gICAgXCJcXHUwNWQwXCIsXG4gIF0sXG59O1xuXG5leHBvcnQgY29uc3QgYWxwaGFiZXRpY051bWJlcmluZyA9IHtcbiAgbGF0aW46IFwiYS16XCIsXG4gIGFscGhhOiBcImEtelwiLFxuICBncmVlazogXCJcXHUwM2IxLVxcdTAzYzFcXHUwM2MzLVxcdTAzYzlcIixcbiAgcnVzc2lhbjogXCJcXHUwNDMwLVxcdTA0MzhcXHUwNDNhLVxcdTA0NDlcXHUwNDRkLVxcdTA0NGZcIixcbn07XG5cbmV4cG9ydCBjb25zdCBmaXhlZCA9IHtcbiAgc3F1YXJlOiBcIlxcdTI1YTBcIixcbiAgZGlzYzogXCJcXHUyMDIyXCIsXG4gIGNpcmNsZTogXCJcXHUyNWU2XCIsXG4gIG5vbmU6IFwiXCIsXG59O1xuXG5leHBvcnQgZnVuY3Rpb24gYWRkaXRpdmVGb3JtYXQoZW50cmllczogYW55W10sIG51bTogbnVtYmVyKTogc3RyaW5nIHtcbiAgY29uc3QgbWF4ID0gZW50cmllc1swXSBhcyBudW1iZXI7XG4gIGlmIChudW0gPiBtYXggfHwgbnVtIDw9IDAgfHwgbnVtICE9IE1hdGgucm91bmQobnVtKSkge1xuICAgIHJldHVybiBcIlwiO1xuICB9XG4gIGxldCByZXN1bHQgPSBcIlwiO1xuICBmb3IgKGxldCBpID0gMTsgaSA8IGVudHJpZXMubGVuZ3RoOyBpICs9IDIpIHtcbiAgICBjb25zdCB2YWx1ZSA9IGVudHJpZXNbaV0gYXMgbnVtYmVyO1xuICAgIGxldCBjb3VudCA9IE1hdGguZmxvb3IobnVtIC8gdmFsdWUpO1xuICAgIGlmIChjb3VudCA+IDIwKSB7XG4gICAgICByZXR1cm4gXCJcIjtcbiAgICB9XG4gICAgbnVtIC09IGNvdW50ICogdmFsdWU7XG4gICAgd2hpbGUgKGNvdW50ID4gMCkge1xuICAgICAgcmVzdWx0ICs9IGVudHJpZXNbaSArIDFdO1xuICAgICAgY291bnQtLTtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIHJlc3VsdDtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGV4cGFuZEFscGhhYmV0KHN0cjogc3RyaW5nKTogc3RyaW5nW10gfCBudWxsIHtcbiAgY29uc3QgYXJyID0gW107XG4gIGxldCBpID0gMDtcbiAgd2hpbGUgKGkgPCBzdHIubGVuZ3RoKSB7XG4gICAgaWYgKHN0ci5zdWJzdHIoaSArIDEsIDEpID09IFwiLVwiKSB7XG4gICAgICBjb25zdCBmaXJzdCA9IHN0ci5jaGFyQ29kZUF0KGkpO1xuICAgICAgY29uc3QgbGFzdCA9IHN0ci5jaGFyQ29kZUF0KGkgKyAyKTtcbiAgICAgIGkgKz0gMztcbiAgICAgIGZvciAobGV0IGsgPSBmaXJzdDsgayA8PSBsYXN0OyBrKyspIHtcbiAgICAgICAgYXJyLnB1c2goU3RyaW5nLmZyb21DaGFyQ29kZShrKSk7XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIGFyci5wdXNoKHN0ci5zdWJzdHIoaSsrLCAxKSk7XG4gICAgfVxuICB9XG4gIHJldHVybiBhcnI7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBhbHBoYWJldGljRm9ybWF0KGFscGhhYmV0U3RyOiBzdHJpbmcsIG51bTogbnVtYmVyKTogc3RyaW5nIHtcbiAgaWYgKG51bSA8PSAwIHx8IG51bSAhPSBNYXRoLnJvdW5kKG51bSkpIHtcbiAgICByZXR1cm4gXCJcIjtcbiAgfVxuICBjb25zdCBhbHBoYWJldCA9IGV4cGFuZEFscGhhYmV0KGFscGhhYmV0U3RyKTtcbiAgbGV0IHJlc3VsdCA9IFwiXCI7XG4gIGRvIHtcbiAgICBudW0tLTtcbiAgICBjb25zdCBkaWdpdCA9IG51bSAlIGFscGhhYmV0Lmxlbmd0aDtcbiAgICByZXN1bHQgPSBhbHBoYWJldFtkaWdpdF0gKyByZXN1bHQ7XG4gICAgbnVtID0gKG51bSAtIGRpZ2l0KSAvIGFscGhhYmV0Lmxlbmd0aDtcbiAgfSB3aGlsZSAobnVtID4gMCk7XG4gIHJldHVybiByZXN1bHQ7XG59XG5cbmV4cG9ydCB0eXBlIENoaW5lc2VOdW1iZXJpbmcgPSB7XG4gIGRpZ2l0czogc3RyaW5nO1xuICBtYXJrZXJzOiBzdHJpbmc7XG4gIG5lZ2F0aXZlOiBzdHJpbmc7XG4gIGZvcm1hbDogYm9vbGVhbjtcbn07XG5cbi8qKlxuICogRnJvbSBodHRwOi8vd3d3LnczLm9yZy9UUi9jc3MzLWxpc3RzL1xuICovXG5leHBvcnQgY29uc3QgY2hpbmVzZVRyYWRJbmZvcm1hbDogQ2hpbmVzZU51bWJlcmluZyA9IHtcbiAgZm9ybWFsOiBmYWxzZSxcbiAgZGlnaXRzOiBcIlxcdTk2ZjZcXHU0ZTAwXFx1NGU4Y1xcdTRlMDlcXHU1NmRiXFx1NGU5NFxcdTUxNmRcXHU0ZTAzXFx1NTE2YlxcdTRlNWRcIixcbiAgbWFya2VyczogXCJcXHU1MzQxXFx1NzY3ZVxcdTUzNDNcIixcbiAgbmVnYXRpdmU6IFwiXFx1OGNhMFwiLFxufTtcblxuZXhwb3J0IGZ1bmN0aW9uIGNoaW5lc2VDb3VudGVyKFxuICBudW06IG51bWJlcixcbiAgbnVtYmVyaW5nOiBDaGluZXNlTnVtYmVyaW5nLFxuKTogc3RyaW5nIHtcbiAgaWYgKG51bSA+IDk5OTkgfHwgbnVtIDwgLTk5OTkpIHtcbiAgICByZXR1cm4gYCR7bnVtfWA7IC8vIFRPRE86IHNob3VsZCBiZSBjamstZGVjaW1hbFxuICB9XG4gIGlmIChudW0gPT0gMCkge1xuICAgIHJldHVybiBudW1iZXJpbmcuZGlnaXRzLmNoYXJBdCgwKTtcbiAgfVxuICBjb25zdCByZXMgPSBuZXcgQmFzZS5TdHJpbmdCdWZmZXIoKTtcbiAgaWYgKG51bSA8IDApIHtcbiAgICByZXMuYXBwZW5kKG51bWJlcmluZy5uZWdhdGl2ZSk7XG4gICAgbnVtID0gLW51bTtcbiAgfVxuICBpZiAobnVtIDwgMTApIHtcbiAgICByZXMuYXBwZW5kKG51bWJlcmluZy5kaWdpdHMuY2hhckF0KG51bSkpO1xuICB9IGVsc2UgaWYgKCFudW1iZXJpbmcuZm9ybWFsICYmIG51bSA8PSAxOSkge1xuICAgIHJlcy5hcHBlbmQobnVtYmVyaW5nLm1hcmtlcnMuY2hhckF0KDApKTtcbiAgICBpZiAobnVtICE9IDApIHtcbiAgICAgIHJlcy5hcHBlbmQobnVtYmVyaW5nLmRpZ2l0cy5jaGFyQXQobnVtIC0gMTApKTtcbiAgICB9XG4gIH0gZWxzZSB7XG4gICAgY29uc3QgdGhvdXNhbmRzID0gTWF0aC5mbG9vcihudW0gLyAxMDAwKTtcbiAgICBpZiAodGhvdXNhbmRzKSB7XG4gICAgICByZXMuYXBwZW5kKG51bWJlcmluZy5kaWdpdHMuY2hhckF0KHRob3VzYW5kcykpO1xuICAgICAgcmVzLmFwcGVuZChudW1iZXJpbmcubWFya2Vycy5jaGFyQXQoMikpO1xuICAgIH1cbiAgICBjb25zdCBodW5kcmVkcyA9IE1hdGguZmxvb3IobnVtIC8gMTAwKSAlIDEwO1xuICAgIGlmIChodW5kcmVkcykge1xuICAgICAgcmVzLmFwcGVuZChudW1iZXJpbmcuZGlnaXRzLmNoYXJBdChodW5kcmVkcykpO1xuICAgICAgcmVzLmFwcGVuZChudW1iZXJpbmcubWFya2Vycy5jaGFyQXQoMSkpO1xuICAgIH1cbiAgICBjb25zdCB0ZW5zID0gTWF0aC5mbG9vcihudW0gLyAxMCkgJSAxMDtcbiAgICBpZiAodGVucykge1xuICAgICAgcmVzLmFwcGVuZChudW1iZXJpbmcuZGlnaXRzLmNoYXJBdCh0ZW5zKSk7XG4gICAgICByZXMuYXBwZW5kKG51bWJlcmluZy5tYXJrZXJzLmNoYXJBdCgwKSk7XG4gICAgfVxuICAgIGNvbnN0IG9uZXMgPSBudW0gJSAxMDtcbiAgICBpZiAob25lcykge1xuICAgICAgcmVzLmFwcGVuZChudW1iZXJpbmcuZGlnaXRzLmNoYXJBdChvbmVzKSk7XG4gICAgfVxuICB9XG5cbiAgLy8gcmVzLmFwcGVuZChcIlxcdTMwMDFcIik7XG4gIHJldHVybiByZXMudG9TdHJpbmcoKTtcbn1cblxuLyoqXG4gKiBGaXR0aW5nIG9yZGVyIGFuZCBzcGVjaWZpY2l0eSBpbiB0aGUgc2FtZSBudW1iZXIuIE9yZGVyIGlzIHJlY29yZGVkIGluIHRoZVxuICogZnJhY3Rpb25hbCBwYXJ0LiBTZWxlY3QgdmFsdWUgc28gdGhhdFxuICpcbiAqICAgMHg3RkZGRkZGRiAhPSAweDdGRkZGRkZGICsgT1JERVJfSU5DUkVNRU5UXG4gKlxuICovXG5leHBvcnQgY29uc3QgT1JERVJfSU5DUkVNRU5UID0gMSAvIDEwNDg1NzY7XG5cbmV4cG9ydCBmdW5jdGlvbiBjb3B5VGFibGUoc3JjOiBBY3Rpb25UYWJsZSwgZHN0OiBBY3Rpb25UYWJsZSk6IHZvaWQge1xuICBmb3IgKGNvbnN0IG4gaW4gc3JjKSB7XG4gICAgZHN0W25dID0gc3JjW25dLmNsb25lKCk7XG4gIH1cbn1cblxuZXhwb3J0IGNsYXNzIENhc2NhZGUge1xuICBuc0NvdW50OiBudW1iZXIgPSAwO1xuICBuc1ByZWZpeDogeyBba2V5OiBzdHJpbmddOiBzdHJpbmcgfSA9IHt9O1xuICB0YWdzOiBBY3Rpb25UYWJsZSA9IHt9O1xuICBuc3RhZ3M6IEFjdGlvblRhYmxlID0ge307XG4gIGVwdWJ0eXBlczogQWN0aW9uVGFibGUgPSB7fTtcbiAgY2xhc3NlczogQWN0aW9uVGFibGUgPSB7fTtcbiAgaWRzOiBBY3Rpb25UYWJsZSA9IHt9O1xuICBwYWdldHlwZXM6IEFjdGlvblRhYmxlID0ge307XG4gIG9yZGVyOiBudW1iZXIgPSAwO1xuXG4gIGNsb25lKCk6IENhc2NhZGUge1xuICAgIGNvbnN0IHIgPSBuZXcgQ2FzY2FkZSgpO1xuICAgIHIubnNDb3VudCA9IHRoaXMubnNDb3VudDtcbiAgICBmb3IgKGNvbnN0IHAgaW4gdGhpcy5uc1ByZWZpeCkge1xuICAgICAgci5uc1ByZWZpeFtwXSA9IHRoaXMubnNQcmVmaXhbcF07XG4gICAgfVxuICAgIGNvcHlUYWJsZSh0aGlzLnRhZ3MsIHIudGFncyk7XG4gICAgY29weVRhYmxlKHRoaXMubnN0YWdzLCByLm5zdGFncyk7XG4gICAgY29weVRhYmxlKHRoaXMuZXB1YnR5cGVzLCByLmVwdWJ0eXBlcyk7XG4gICAgY29weVRhYmxlKHRoaXMuY2xhc3Nlcywgci5jbGFzc2VzKTtcbiAgICBjb3B5VGFibGUodGhpcy5pZHMsIHIuaWRzKTtcbiAgICBjb3B5VGFibGUodGhpcy5wYWdldHlwZXMsIHIucGFnZXR5cGVzKTtcbiAgICByLm9yZGVyID0gdGhpcy5vcmRlcjtcbiAgICByZXR1cm4gcjtcbiAgfVxuXG4gIGluc2VydEluVGFibGUodGFibGU6IEFjdGlvblRhYmxlLCBrZXk6IHN0cmluZywgYWN0aW9uOiBDYXNjYWRlQWN0aW9uKTogdm9pZCB7XG4gICAgY29uc3QgYSA9IHRhYmxlW2tleV07XG4gICAgaWYgKGEpIHtcbiAgICAgIGFjdGlvbiA9IGEubWVyZ2VXaXRoKGFjdGlvbik7XG4gICAgfVxuICAgIHRhYmxlW2tleV0gPSBhY3Rpb247XG4gIH1cblxuICBjcmVhdGVJbnN0YW5jZShcbiAgICBjb250ZXh0OiBFeHBycy5Db250ZXh0LFxuICAgIGNvdW50ZXJMaXN0ZW5lcjogQ291bnRlckxpc3RlbmVyLFxuICAgIGNvdW50ZXJSZXNvbHZlcjogQ291bnRlclJlc29sdmVyLFxuICAgIGxhbmcsXG4gICk6IENhc2NhZGVJbnN0YW5jZSB7XG4gICAgcmV0dXJuIG5ldyBDYXNjYWRlSW5zdGFuY2UoXG4gICAgICB0aGlzLFxuICAgICAgY29udGV4dCxcbiAgICAgIGNvdW50ZXJMaXN0ZW5lcixcbiAgICAgIGNvdW50ZXJSZXNvbHZlcixcbiAgICAgIGxhbmcsXG4gICAgKTtcbiAgfVxuXG4gIG5leHRPcmRlcigpOiBudW1iZXIge1xuICAgIHJldHVybiAodGhpcy5vcmRlciArPSBPUkRFUl9JTkNSRU1FTlQpO1xuICB9XG59XG5cbmV4cG9ydCBjbGFzcyBDYXNjYWRlSW5zdGFuY2Uge1xuICBjb2RlOiBDYXNjYWRlO1xuICBzdGFjayA9IFtbXSwgW11dIGFzIENvbmRpdGlvbkl0ZW1bXVtdO1xuICBjb25kaXRpb25zID0ge30gYXMgeyBba2V5OiBzdHJpbmddOiBudW1iZXIgfTtcbiAgY3VycmVudEVsZW1lbnQ6IEVsZW1lbnQgfCBudWxsID0gbnVsbDtcbiAgY3VycmVudEVsZW1lbnRPZmZzZXQ6IG51bWJlciB8IG51bGwgPSBudWxsO1xuICBjdXJyZW50U3R5bGU6IEVsZW1lbnRTdHlsZSB8IG51bGwgPSBudWxsO1xuICBjdXJyZW50Q2xhc3NOYW1lczogc3RyaW5nW10gfCBudWxsID0gbnVsbDtcbiAgY3VycmVudExvY2FsTmFtZTogc3RyaW5nID0gXCJcIjtcbiAgY3VycmVudE5hbWVzcGFjZTogc3RyaW5nID0gXCJcIjtcbiAgY3VycmVudElkOiBzdHJpbmcgPSBcIlwiO1xuICBjdXJyZW50WG1sSWQ6IHN0cmluZyA9IFwiXCI7XG4gIGN1cnJlbnROU1RhZzogc3RyaW5nID0gXCJcIjtcbiAgY3VycmVudEVwdWJUeXBlczogc3RyaW5nW10gfCBudWxsID0gbnVsbDtcbiAgY3VycmVudFBhZ2VUeXBlOiBzdHJpbmcgfCBudWxsID0gbnVsbDtcbiAgaXNGaXJzdDogYm9vbGVhbiA9IHRydWU7XG4gIGlzUm9vdDogYm9vbGVhbiA9IHRydWU7XG4gIGNvdW50ZXJzOiBDb3VudGVyVmFsdWVzID0ge307XG4gIGNvdW50ZXJTY29waW5nOiB7IFtrZXk6IHN0cmluZ106IGJvb2xlYW4gfVtdID0gW3t9XTtcbiAgcXVvdGVzOiBDc3MuU3RyW107XG4gIHF1b3RlRGVwdGg6IG51bWJlciA9IDA7XG4gIGxhbmc6IHN0cmluZyA9IFwiXCI7XG4gIHNpYmxpbmdPcmRlclN0YWNrOiBudW1iZXJbXSA9IFswXTtcbiAgY3VycmVudFNpYmxpbmdPcmRlcjogbnVtYmVyID0gMDtcbiAgc2libGluZ1R5cGVDb3VudHNTdGFjazogeyBba2V5OiBzdHJpbmddOiB7IFtrZXk6IHN0cmluZ106IG51bWJlciB9IH1bXSA9IFt7fV07XG4gIGN1cnJlbnRTaWJsaW5nVHlwZUNvdW50czogeyBba2V5OiBzdHJpbmddOiB7IFtrZXk6IHN0cmluZ106IG51bWJlciB9IH07XG4gIGN1cnJlbnRGb2xsb3dpbmdTaWJsaW5nT3JkZXI6IG51bWJlciB8IG51bGwgPSBudWxsO1xuICBmb2xsb3dpbmdTaWJsaW5nT3JkZXJTdGFjazogKG51bWJlciB8IG51bGwpW107XG4gIGZvbGxvd2luZ1NpYmxpbmdUeXBlQ291bnRzU3RhY2s6IHtcbiAgICBba2V5OiBzdHJpbmddOiB7IFtrZXk6IHN0cmluZ106IG51bWJlciB9O1xuICB9W10gPSBbe31dO1xuICBjdXJyZW50Rm9sbG93aW5nU2libGluZ1R5cGVDb3VudHM6IHtcbiAgICBba2V5OiBzdHJpbmddOiB7IFtrZXk6IHN0cmluZ106IG51bWJlciB9O1xuICB9O1xuICB2aWV3Q29uZGl0aW9uczogeyBba2V5OiBzdHJpbmddOiBNYXRjaGVycy5NYXRjaGVyW10gfSA9IHt9O1xuICBkZXBlbmRlbnRDb25kaXRpb25zOiBzdHJpbmdbXSA9IFtdO1xuICBlbGVtZW50U3RhY2s6IEVsZW1lbnRbXTtcblxuICBjb25zdHJ1Y3RvcihcbiAgICBjYXNjYWRlOiBDYXNjYWRlLFxuICAgIHB1YmxpYyByZWFkb25seSBjb250ZXh0OiBFeHBycy5Db250ZXh0LFxuICAgIHB1YmxpYyByZWFkb25seSBjb3VudGVyTGlzdGVuZXI6IENvdW50ZXJMaXN0ZW5lcixcbiAgICBwdWJsaWMgcmVhZG9ubHkgY291bnRlclJlc29sdmVyOiBDb3VudGVyUmVzb2x2ZXIsXG4gICAgbGFuZzogc3RyaW5nLFxuICApIHtcbiAgICB0aGlzLmNvZGUgPSBjYXNjYWRlO1xuICAgIHRoaXMucXVvdGVzID0gW1xuICAgICAgbmV3IENzcy5TdHIoXCJcXHUyMDFjXCIpLFxuICAgICAgbmV3IENzcy5TdHIoXCJcXHUyMDFkXCIpLFxuICAgICAgbmV3IENzcy5TdHIoXCJcXHUyMDE4XCIpLFxuICAgICAgbmV3IENzcy5TdHIoXCJcXHUyMDE5XCIpLFxuICAgIF07XG4gICAgdGhpcy5jdXJyZW50U2libGluZ1R5cGVDb3VudHMgPSB0aGlzLnNpYmxpbmdUeXBlQ291bnRzU3RhY2tbMF07XG4gICAgdGhpcy5mb2xsb3dpbmdTaWJsaW5nT3JkZXJTdGFjayA9IFt0aGlzLmN1cnJlbnRGb2xsb3dpbmdTaWJsaW5nT3JkZXJdO1xuICAgIHRoaXMuY3VycmVudEZvbGxvd2luZ1NpYmxpbmdUeXBlQ291bnRzID0gdGhpcy5zaWJsaW5nVHlwZUNvdW50c1N0YWNrWzBdO1xuICAgIGlmIChWSVZMSU9TVFlMRV9ERUJVRykge1xuICAgICAgdGhpcy5lbGVtZW50U3RhY2sgPSBbXTtcbiAgICB9XG4gIH1cblxuICBwdXNoQ29uZGl0aW9uSXRlbShpdGVtOiBDb25kaXRpb25JdGVtKTogdm9pZCB7XG4gICAgdGhpcy5zdGFja1t0aGlzLnN0YWNrLmxlbmd0aCAtIDFdLnB1c2goaXRlbSk7XG4gIH1cblxuICBpbmNyZW1lbnQoY29uZGl0aW9uOiBzdHJpbmcsIHZpZXdDb25kaXRpb246IE1hdGNoZXJzLk1hdGNoZXIpOiB2b2lkIHtcbiAgICB0aGlzLmNvbmRpdGlvbnNbY29uZGl0aW9uXSA9ICh0aGlzLmNvbmRpdGlvbnNbY29uZGl0aW9uXSB8fCAwKSArIDE7XG4gICAgaWYgKCF2aWV3Q29uZGl0aW9uKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIGlmICh0aGlzLnZpZXdDb25kaXRpb25zW2NvbmRpdGlvbl0pIHtcbiAgICAgIHRoaXMudmlld0NvbmRpdGlvbnNbY29uZGl0aW9uXS5wdXNoKHZpZXdDb25kaXRpb24pO1xuICAgIH0gZWxzZSB7XG4gICAgICB0aGlzLnZpZXdDb25kaXRpb25zW2NvbmRpdGlvbl0gPSBbdmlld0NvbmRpdGlvbl07XG4gICAgfVxuICB9XG5cbiAgZGVjcmVtZW50KGNvbmRpdGlvbjogc3RyaW5nLCB2aWV3Q29uZGl0aW9uOiBNYXRjaGVycy5NYXRjaGVyKTogdm9pZCB7XG4gICAgdGhpcy5jb25kaXRpb25zW2NvbmRpdGlvbl0tLTtcbiAgICBpZiAoIXRoaXMudmlld0NvbmRpdGlvbnNbY29uZGl0aW9uXSkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICB0aGlzLnZpZXdDb25kaXRpb25zW2NvbmRpdGlvbl0gPSB0aGlzLnZpZXdDb25kaXRpb25zW2NvbmRpdGlvbl0uZmlsdGVyKFxuICAgICAgKGl0ZW0pID0+IGl0ZW0gIT09IHZpZXdDb25kaXRpb24sXG4gICAgKTtcbiAgICBpZiAodGhpcy52aWV3Q29uZGl0aW9uc1tjb25kaXRpb25dLmxlbmd0aCA9PT0gMCkge1xuICAgICAgZGVsZXRlIHRoaXMudmlld0NvbmRpdGlvbnNbY29uZGl0aW9uXTtcbiAgICB9XG4gIH1cblxuICBidWlsZFZpZXdDb25kaXRpb25NYXRjaGVyKHZpZXdDb25kaXRpb25JZDogc3RyaW5nIHwgbnVsbCk6IE1hdGNoZXJzLk1hdGNoZXIge1xuICAgIGxldCBtYXRjaGVyOiBNYXRjaGVycy5NYXRjaGVyID0gbnVsbDtcbiAgICBpZiAodmlld0NvbmRpdGlvbklkKSB7XG4gICAgICBBc3NlcnRzLmFzc2VydCh0aGlzLmN1cnJlbnRFbGVtZW50T2Zmc2V0KTtcbiAgICAgIG1hdGNoZXIgPSBNYXRjaGVycy5NYXRjaGVyQnVpbGRlci5idWlsZFZpZXdDb25kaXRpb25NYXRjaGVyKFxuICAgICAgICB0aGlzLmN1cnJlbnRFbGVtZW50T2Zmc2V0LFxuICAgICAgICB2aWV3Q29uZGl0aW9uSWQsXG4gICAgICApO1xuICAgIH1cbiAgICBjb25zdCBkZXBlbmRlbnRDb25kaXRpb25NYXRjaGVycyA9IHRoaXMuZGVwZW5kZW50Q29uZGl0aW9uc1xuICAgICAgLm1hcCgoY29uZGl0aW9uSWQpID0+IHtcbiAgICAgICAgY29uc3QgY29uZGl0aW9ucyA9IHRoaXMudmlld0NvbmRpdGlvbnNbY29uZGl0aW9uSWRdO1xuICAgICAgICBpZiAoY29uZGl0aW9ucyAmJiBjb25kaXRpb25zLmxlbmd0aCA+IDApIHtcbiAgICAgICAgICByZXR1cm4gY29uZGl0aW9ucy5sZW5ndGggPT09IDFcbiAgICAgICAgICAgID8gY29uZGl0aW9uc1swXVxuICAgICAgICAgICAgOiBNYXRjaGVycy5NYXRjaGVyQnVpbGRlci5idWlsZEFueU1hdGNoZXIoW10uY29uY2F0KGNvbmRpdGlvbnMpKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgICAgfVxuICAgICAgfSlcbiAgICAgIC5maWx0ZXIoKGl0ZW0pID0+IGl0ZW0pO1xuICAgIGlmIChkZXBlbmRlbnRDb25kaXRpb25NYXRjaGVycy5sZW5ndGggPD0gMCkge1xuICAgICAgcmV0dXJuIG1hdGNoZXI7XG4gICAgfVxuICAgIGlmIChtYXRjaGVyID09PSBudWxsKSB7XG4gICAgICByZXR1cm4gZGVwZW5kZW50Q29uZGl0aW9uTWF0Y2hlcnMubGVuZ3RoID09PSAxXG4gICAgICAgID8gZGVwZW5kZW50Q29uZGl0aW9uTWF0Y2hlcnNbMF1cbiAgICAgICAgOiBNYXRjaGVycy5NYXRjaGVyQnVpbGRlci5idWlsZEFsbE1hdGNoZXIoZGVwZW5kZW50Q29uZGl0aW9uTWF0Y2hlcnMpO1xuICAgIH1cbiAgICByZXR1cm4gTWF0Y2hlcnMuTWF0Y2hlckJ1aWxkZXIuYnVpbGRBbGxNYXRjaGVyKFxuICAgICAgW21hdGNoZXJdLmNvbmNhdChkZXBlbmRlbnRDb25kaXRpb25NYXRjaGVycyksXG4gICAgKTtcbiAgfVxuXG4gIGFwcGx5QWN0aW9uKHRhYmxlOiBBY3Rpb25UYWJsZSwga2V5OiBzdHJpbmcpOiB2b2lkIHtcbiAgICBjb25zdCBhY3Rpb24gPSB0YWJsZVtrZXldO1xuICAgIGlmIChhY3Rpb24pIHtcbiAgICAgIGFjdGlvbi5hcHBseSh0aGlzKTtcbiAgICB9XG4gIH1cblxuICBwdXNoUnVsZShcbiAgICBjbGFzc2VzOiBzdHJpbmdbXSxcbiAgICBwYWdlVHlwZTogc3RyaW5nIHwgbnVsbCxcbiAgICBiYXNlU3R5bGU6IEVsZW1lbnRTdHlsZSxcbiAgKTogdm9pZCB7XG4gICAgdGhpcy5jdXJyZW50RWxlbWVudCA9IG51bGw7XG4gICAgdGhpcy5jdXJyZW50RWxlbWVudE9mZnNldCA9IG51bGw7XG4gICAgdGhpcy5jdXJyZW50U3R5bGUgPSBiYXNlU3R5bGU7XG4gICAgdGhpcy5jdXJyZW50TmFtZXNwYWNlID0gXCJcIjtcbiAgICB0aGlzLmN1cnJlbnRMb2NhbE5hbWUgPSBcIlwiO1xuICAgIHRoaXMuY3VycmVudElkID0gXCJcIjtcbiAgICB0aGlzLmN1cnJlbnRYbWxJZCA9IFwiXCI7XG4gICAgdGhpcy5jdXJyZW50Q2xhc3NOYW1lcyA9IGNsYXNzZXM7XG4gICAgdGhpcy5jdXJyZW50TlNUYWcgPSBcIlwiO1xuICAgIHRoaXMuY3VycmVudEVwdWJUeXBlcyA9IEVNUFRZO1xuICAgIHRoaXMuY3VycmVudFBhZ2VUeXBlID0gcGFnZVR5cGU7XG4gICAgdGhpcy5hcHBseUFjdGlvbnMoKTtcbiAgfVxuXG4gIGRlZmluZUNvdW50ZXIoY291bnRlck5hbWU6IHN0cmluZywgdmFsdWU6IG51bWJlcikge1xuICAgIGlmICh0aGlzLmNvdW50ZXJzW2NvdW50ZXJOYW1lXSkge1xuICAgICAgdGhpcy5jb3VudGVyc1tjb3VudGVyTmFtZV0ucHVzaCh2YWx1ZSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHRoaXMuY291bnRlcnNbY291bnRlck5hbWVdID0gW3ZhbHVlXTtcbiAgICB9XG4gICAgbGV0IHNjb3BpbmcgPSB0aGlzLmNvdW50ZXJTY29waW5nW3RoaXMuY291bnRlclNjb3BpbmcubGVuZ3RoIC0gMV07XG4gICAgaWYgKCFzY29waW5nKSB7XG4gICAgICBzY29waW5nID0ge307XG4gICAgICB0aGlzLmNvdW50ZXJTY29waW5nW3RoaXMuY291bnRlclNjb3BpbmcubGVuZ3RoIC0gMV0gPSBzY29waW5nO1xuICAgIH1cbiAgICBzY29waW5nW2NvdW50ZXJOYW1lXSA9IHRydWU7XG4gIH1cblxuICBwdXNoQ291bnRlcnMocHJvcHM6IEVsZW1lbnRTdHlsZSk6IHZvaWQge1xuICAgIGxldCBkaXNwbGF5VmFsID0gQ3NzLmlkZW50LmlubGluZTtcbiAgICBjb25zdCBkaXNwbGF5ID0gcHJvcHNbXCJkaXNwbGF5XCJdO1xuICAgIGlmIChkaXNwbGF5KSB7XG4gICAgICBkaXNwbGF5VmFsID0gZGlzcGxheS5ldmFsdWF0ZSh0aGlzLmNvbnRleHQpO1xuICAgIH1cbiAgICBsZXQgcmVzZXRNYXA6IHsgW2tleTogc3RyaW5nXTogbnVtYmVyIH0gPSBudWxsO1xuICAgIGxldCBpbmNyZW1lbnRNYXA6IHsgW2tleTogc3RyaW5nXTogbnVtYmVyIH0gPSBudWxsO1xuICAgIGxldCBzZXRNYXA6IHsgW2tleTogc3RyaW5nXTogbnVtYmVyIH0gPSBudWxsO1xuICAgIGNvbnN0IHJlc2V0ID0gcHJvcHNbXCJjb3VudGVyLXJlc2V0XCJdO1xuICAgIGlmIChyZXNldCkge1xuICAgICAgY29uc3QgcmVzZXRWYWwgPSByZXNldC5ldmFsdWF0ZSh0aGlzLmNvbnRleHQpO1xuICAgICAgaWYgKHJlc2V0VmFsKSB7XG4gICAgICAgIHJlc2V0TWFwID0gQ3NzUHJvcC50b0NvdW50ZXJzKHJlc2V0VmFsLCB0cnVlKTtcbiAgICAgIH1cbiAgICB9XG4gICAgY29uc3Qgc2V0ID0gcHJvcHNbXCJjb3VudGVyLXNldFwiXTtcbiAgICBpZiAoc2V0KSB7XG4gICAgICBjb25zdCBzZXRWYWwgPSBzZXQuZXZhbHVhdGUodGhpcy5jb250ZXh0KTtcbiAgICAgIGlmIChzZXRWYWwpIHtcbiAgICAgICAgc2V0TWFwID0gQ3NzUHJvcC50b0NvdW50ZXJzKHNldFZhbCwgZmFsc2UpO1xuICAgICAgfVxuICAgIH1cbiAgICBjb25zdCBpbmNyZW1lbnQgPSBwcm9wc1tcImNvdW50ZXItaW5jcmVtZW50XCJdO1xuICAgIGlmIChpbmNyZW1lbnQpIHtcbiAgICAgIGNvbnN0IGluY3JlbWVudFZhbCA9IGluY3JlbWVudC5ldmFsdWF0ZSh0aGlzLmNvbnRleHQpO1xuICAgICAgaWYgKGluY3JlbWVudFZhbCkge1xuICAgICAgICBpbmNyZW1lbnRNYXAgPSBDc3NQcm9wLnRvQ291bnRlcnMoaW5jcmVtZW50VmFsLCBmYWxzZSk7XG4gICAgICB9XG4gICAgfVxuICAgIGlmIChcbiAgICAgICh0aGlzLmN1cnJlbnRMb2NhbE5hbWUgPT0gXCJvbFwiIHx8IHRoaXMuY3VycmVudExvY2FsTmFtZSA9PSBcInVsXCIpICYmXG4gICAgICB0aGlzLmN1cnJlbnROYW1lc3BhY2UgPT0gQmFzZS5OUy5YSFRNTFxuICAgICkge1xuICAgICAgaWYgKCFyZXNldE1hcCkge1xuICAgICAgICByZXNldE1hcCA9IHt9O1xuICAgICAgfVxuICAgICAgcmVzZXRNYXBbXCJ1YS1saXN0LWl0ZW1cIl0gPSAoKHRoaXMuY3VycmVudEVsZW1lbnQgYXMgYW55KT8uc3RhcnQgPz8gMSkgLSAxO1xuICAgIH1cbiAgICBpZiAoZGlzcGxheVZhbCA9PT0gQ3NzLmlkZW50Lmxpc3RfaXRlbSkge1xuICAgICAgaWYgKCFpbmNyZW1lbnRNYXApIHtcbiAgICAgICAgaW5jcmVtZW50TWFwID0ge307XG4gICAgICB9XG4gICAgICBpbmNyZW1lbnRNYXBbXCJ1YS1saXN0LWl0ZW1cIl0gPSAxO1xuICAgICAgaWYgKFxuICAgICAgICAvXlxccypbLStdP1xcZC8udGVzdCh0aGlzLmN1cnJlbnRFbGVtZW50Py5nZXRBdHRyaWJ1dGUoXCJ2YWx1ZVwiKSA/PyBcIlwiKVxuICAgICAgKSB7XG4gICAgICAgIGlmICghcmVzZXRNYXApIHtcbiAgICAgICAgICByZXNldE1hcCA9IHt9O1xuICAgICAgICB9XG4gICAgICAgIHJlc2V0TWFwW1widWEtbGlzdC1pdGVtXCJdID0gKHRoaXMuY3VycmVudEVsZW1lbnQgYXMgYW55KS52YWx1ZSAtIDE7XG4gICAgICB9XG4gICAgfVxuICAgIGlmIChyZXNldE1hcCkge1xuICAgICAgZm9yIChjb25zdCByZXNldENvdW50ZXJOYW1lIGluIHJlc2V0TWFwKSB7XG4gICAgICAgIHRoaXMuZGVmaW5lQ291bnRlcihyZXNldENvdW50ZXJOYW1lLCByZXNldE1hcFtyZXNldENvdW50ZXJOYW1lXSk7XG4gICAgICB9XG4gICAgfVxuICAgIGlmIChzZXRNYXApIHtcbiAgICAgIGZvciAoY29uc3Qgc2V0Q291bnRlck5hbWUgaW4gc2V0TWFwKSB7XG4gICAgICAgIGlmICghdGhpcy5jb3VudGVyc1tzZXRDb3VudGVyTmFtZV0pIHtcbiAgICAgICAgICB0aGlzLmRlZmluZUNvdW50ZXIoc2V0Q291bnRlck5hbWUsIHNldE1hcFtzZXRDb3VudGVyTmFtZV0pO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGNvbnN0IGNvdW50ZXJWYWx1ZXMgPSB0aGlzLmNvdW50ZXJzW3NldENvdW50ZXJOYW1lXTtcbiAgICAgICAgICBjb3VudGVyVmFsdWVzW2NvdW50ZXJWYWx1ZXMubGVuZ3RoIC0gMV0gPSBzZXRNYXBbc2V0Q291bnRlck5hbWVdO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICAgIGlmIChpbmNyZW1lbnRNYXApIHtcbiAgICAgIGZvciAoY29uc3QgaW5jcmVtZW50Q291bnRlck5hbWUgaW4gaW5jcmVtZW50TWFwKSB7XG4gICAgICAgIGlmICghdGhpcy5jb3VudGVyc1tpbmNyZW1lbnRDb3VudGVyTmFtZV0pIHtcbiAgICAgICAgICB0aGlzLmRlZmluZUNvdW50ZXIoaW5jcmVtZW50Q291bnRlck5hbWUsIDApO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IGNvdW50ZXJWYWx1ZXMgPSB0aGlzLmNvdW50ZXJzW2luY3JlbWVudENvdW50ZXJOYW1lXTtcbiAgICAgICAgY291bnRlclZhbHVlc1tjb3VudGVyVmFsdWVzLmxlbmd0aCAtIDFdICs9XG4gICAgICAgICAgaW5jcmVtZW50TWFwW2luY3JlbWVudENvdW50ZXJOYW1lXTtcbiAgICAgIH1cbiAgICB9XG4gICAgaWYgKGRpc3BsYXlWYWwgPT09IENzcy5pZGVudC5saXN0X2l0ZW0pIHtcbiAgICAgIGNvbnN0IGxpc3RJdGVtQ291bnRzID0gdGhpcy5jb3VudGVyc1tcInVhLWxpc3QtaXRlbVwiXTtcbiAgICAgIGNvbnN0IGxpc3RJdGVtQ291bnQgPSBsaXN0SXRlbUNvdW50c1tsaXN0SXRlbUNvdW50cy5sZW5ndGggLSAxXTtcbiAgICAgIHByb3BzW1widWEtbGlzdC1pdGVtLWNvdW50XCJdID0gbmV3IENhc2NhZGVWYWx1ZShcbiAgICAgICAgbmV3IENzcy5OdW0obGlzdEl0ZW1Db3VudCksXG4gICAgICAgIDAsXG4gICAgICApO1xuICAgIH1cbiAgICB0aGlzLmNvdW50ZXJTY29waW5nLnB1c2gobnVsbCk7XG4gIH1cblxuICBwb3BDb3VudGVycygpOiB2b2lkIHtcbiAgICBjb25zdCBzY29waW5nID0gdGhpcy5jb3VudGVyU2NvcGluZy5wb3AoKTtcbiAgICBpZiAoc2NvcGluZykge1xuICAgICAgZm9yIChjb25zdCBjb3VudGVyTmFtZSBpbiBzY29waW5nKSB7XG4gICAgICAgIGNvbnN0IGFyciA9IHRoaXMuY291bnRlcnNbY291bnRlck5hbWVdO1xuICAgICAgICBpZiAoYXJyKSB7XG4gICAgICAgICAgaWYgKGFyci5sZW5ndGggPT0gMSkge1xuICAgICAgICAgICAgZGVsZXRlIHRoaXMuY291bnRlcnNbY291bnRlck5hbWVdO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBhcnIucG9wKCk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgLyoqXG4gICAqIFByb2Nlc3MgQ1NTIHN0cmluZy1zZXQgcHJvcGVydHlcbiAgICogaHR0cHM6Ly9kcmFmdHMuY3Nzd2cub3JnL2Nzcy1nY3BtLTMvI3NldHRpbmctbmFtZWQtc3RyaW5ncy10aGUtc3RyaW5nLXNldC1wcm9cbiAgICovXG4gIHNldE5hbWVkU3RyaW5ncyhwcm9wczogRWxlbWVudFN0eWxlKTogdm9pZCB7XG4gICAgbGV0IHN0cmluZ1NldDogQ2FzY2FkZVZhbHVlID0gcHJvcHNbXCJzdHJpbmctc2V0XCJdO1xuICAgIGlmICghc3RyaW5nU2V0KSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIHN0cmluZ1NldCA9IHN0cmluZ1NldC5maWx0ZXJWYWx1ZShcbiAgICAgIG5ldyBDb250ZW50UHJvcFZpc2l0b3IodGhpcywgdGhpcy5jdXJyZW50RWxlbWVudCwgdGhpcy5jb3VudGVyUmVzb2x2ZXIpLFxuICAgICk7XG4gICAgY29uc3Qgc2V0cyA9XG4gICAgICBzdHJpbmdTZXQudmFsdWUgaW5zdGFuY2VvZiBDc3MuQ29tbWFMaXN0XG4gICAgICAgID8gc3RyaW5nU2V0LnZhbHVlLnZhbHVlc1xuICAgICAgICA6IFtzdHJpbmdTZXQudmFsdWVdO1xuXG4gICAgZm9yIChjb25zdCBzZXQgb2Ygc2V0cykge1xuICAgICAgaWYgKHNldCBpbnN0YW5jZW9mIENzcy5TcGFjZUxpc3QpIHtcbiAgICAgICAgY29uc3QgbmFtZSA9IHNldC52YWx1ZXNbMF0uc3RyaW5nVmFsdWUoKTtcbiAgICAgICAgY29uc3Qgc3RyaW5nVmFsdWUgPSBzZXQudmFsdWVzXG4gICAgICAgICAgLnNsaWNlKDEpXG4gICAgICAgICAgLm1hcCgodikgPT4gZ2V0U3RyaW5nVmFsdWVGcm9tQ3NzQ29udGVudFZhbCh2KSlcbiAgICAgICAgICAuam9pbihcIlwiKTtcbiAgICAgICAgdGhpcy5jb3VudGVyUmVzb2x2ZXIuc2V0TmFtZWRTdHJpbmcobmFtZSwgc3RyaW5nVmFsdWUsIHRoaXMpO1xuICAgICAgfVxuICAgIH1cbiAgICBkZWxldGUgcHJvcHNbXCJzdHJpbmctc2V0XCJdO1xuICB9XG5cbiAgcHJvY2Vzc1BzZXVkb2VsZW1lbnRQcm9wcyhwc2V1ZG9wcm9wczogRWxlbWVudFN0eWxlLCBlbGVtZW50OiBFbGVtZW50KTogdm9pZCB7XG4gICAgdGhpcy5wdXNoQ291bnRlcnMocHNldWRvcHJvcHMpO1xuICAgIGlmIChwc2V1ZG9wcm9wc1tcImNvbnRlbnRcIl0pIHtcbiAgICAgIHBzZXVkb3Byb3BzW1wiY29udGVudFwiXSA9IHBzZXVkb3Byb3BzW1wiY29udGVudFwiXS5maWx0ZXJWYWx1ZShcbiAgICAgICAgbmV3IENvbnRlbnRQcm9wVmlzaXRvcih0aGlzLCBlbGVtZW50LCB0aGlzLmNvdW50ZXJSZXNvbHZlciksXG4gICAgICApO1xuICAgIH1cbiAgICB0aGlzLnBvcENvdW50ZXJzKCk7XG4gIH1cblxuICBwdXNoRWxlbWVudChcbiAgICBlbGVtZW50OiBFbGVtZW50LFxuICAgIGJhc2VTdHlsZTogRWxlbWVudFN0eWxlLFxuICAgIGVsZW1lbnRPZmZzZXQ6IG51bWJlcixcbiAgKTogdm9pZCB7XG4gICAgaWYgKFZJVkxJT1NUWUxFX0RFQlVHKSB7XG4gICAgICB0aGlzLmVsZW1lbnRTdGFjay5wdXNoKGVsZW1lbnQpO1xuICAgIH1cblxuICAgIC8vIGRvIG5vdCBhcHBseSBwYWdlIHJ1bGVzXG4gICAgdGhpcy5jdXJyZW50UGFnZVR5cGUgPSBudWxsO1xuICAgIHRoaXMuY3VycmVudEVsZW1lbnQgPSBlbGVtZW50O1xuICAgIHRoaXMuY3VycmVudEVsZW1lbnRPZmZzZXQgPSBlbGVtZW50T2Zmc2V0O1xuICAgIHRoaXMuY3VycmVudFN0eWxlID0gYmFzZVN0eWxlO1xuICAgIHRoaXMuY3VycmVudE5hbWVzcGFjZSA9IGVsZW1lbnQubmFtZXNwYWNlVVJJO1xuICAgIHRoaXMuY3VycmVudExvY2FsTmFtZSA9IGVsZW1lbnQubG9jYWxOYW1lO1xuICAgIGNvbnN0IHByZWZpeCA9IHRoaXMuY29kZS5uc1ByZWZpeFt0aGlzLmN1cnJlbnROYW1lc3BhY2VdO1xuICAgIGlmIChwcmVmaXgpIHtcbiAgICAgIHRoaXMuY3VycmVudE5TVGFnID0gcHJlZml4ICsgdGhpcy5jdXJyZW50TG9jYWxOYW1lO1xuICAgIH0gZWxzZSB7XG4gICAgICB0aGlzLmN1cnJlbnROU1RhZyA9IFwiXCI7XG4gICAgfVxuICAgIHRoaXMuY3VycmVudElkID0gZWxlbWVudC5nZXRBdHRyaWJ1dGUoXCJpZFwiKTtcbiAgICB0aGlzLmN1cnJlbnRYbWxJZCA9IGVsZW1lbnQuZ2V0QXR0cmlidXRlTlMoQmFzZS5OUy5YTUwsIFwiaWRcIik7XG4gICAgY29uc3QgY2xhc3NlcyA9IGVsZW1lbnQuZ2V0QXR0cmlidXRlKFwiY2xhc3NcIik7XG4gICAgaWYgKGNsYXNzZXMpIHtcbiAgICAgIHRoaXMuY3VycmVudENsYXNzTmFtZXMgPSBjbGFzc2VzLnNwbGl0KC9cXHMrLyk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHRoaXMuY3VycmVudENsYXNzTmFtZXMgPSBFTVBUWTtcbiAgICB9XG4gICAgY29uc3QgdHlwZXMgPSBlbGVtZW50LmdldEF0dHJpYnV0ZU5TKEJhc2UuTlMuZXB1YiwgXCJ0eXBlXCIpO1xuICAgIGlmICh0eXBlcykge1xuICAgICAgdGhpcy5jdXJyZW50RXB1YlR5cGVzID0gdHlwZXMuc3BsaXQoL1xccysvKTtcbiAgICB9IGVsc2Uge1xuICAgICAgdGhpcy5jdXJyZW50RXB1YlR5cGVzID0gRU1QVFk7XG4gICAgfVxuICAgIGNvbnN0IGxhbmcgPSBCYXNlLmdldExhbmdBdHRyaWJ1dGUoZWxlbWVudCk7XG4gICAgaWYgKGxhbmcpIHtcbiAgICAgIHRoaXMuc3RhY2tbdGhpcy5zdGFjay5sZW5ndGggLSAxXS5wdXNoKG5ldyBSZXN0b3JlTGFuZ0l0ZW0odGhpcy5sYW5nKSk7XG4gICAgICB0aGlzLmxhbmcgPSBsYW5nLnRvTG93ZXJDYXNlKCk7XG4gICAgfVxuICAgIGNvbnN0IGlzUm9vdCA9IHRoaXMuaXNSb290O1xuICAgIGNvbnN0IHNpYmxpbmdPcmRlclN0YWNrID0gdGhpcy5zaWJsaW5nT3JkZXJTdGFjaztcbiAgICB0aGlzLmN1cnJlbnRTaWJsaW5nT3JkZXIgPSArK3NpYmxpbmdPcmRlclN0YWNrW1xuICAgICAgc2libGluZ09yZGVyU3RhY2subGVuZ3RoIC0gMVxuICAgIF07XG4gICAgc2libGluZ09yZGVyU3RhY2sucHVzaCgwKTtcbiAgICBjb25zdCBzaWJsaW5nVHlwZUNvdW50c1N0YWNrID0gdGhpcy5zaWJsaW5nVHlwZUNvdW50c1N0YWNrO1xuICAgIGNvbnN0IGN1cnJlbnRTaWJsaW5nVHlwZUNvdW50cyA9ICh0aGlzLmN1cnJlbnRTaWJsaW5nVHlwZUNvdW50cyA9XG4gICAgICBzaWJsaW5nVHlwZUNvdW50c1N0YWNrW3NpYmxpbmdUeXBlQ291bnRzU3RhY2subGVuZ3RoIC0gMV0pO1xuICAgIGxldCBjdXJyZW50TmFtZXNwYWNlVHlwZUNvdW50cyA9XG4gICAgICBjdXJyZW50U2libGluZ1R5cGVDb3VudHNbdGhpcy5jdXJyZW50TmFtZXNwYWNlXTtcbiAgICBpZiAoIWN1cnJlbnROYW1lc3BhY2VUeXBlQ291bnRzKSB7XG4gICAgICBjdXJyZW50TmFtZXNwYWNlVHlwZUNvdW50cyA9IGN1cnJlbnRTaWJsaW5nVHlwZUNvdW50c1tcbiAgICAgICAgdGhpcy5jdXJyZW50TmFtZXNwYWNlXG4gICAgICBdID0ge307XG4gICAgfVxuICAgIGN1cnJlbnROYW1lc3BhY2VUeXBlQ291bnRzW3RoaXMuY3VycmVudExvY2FsTmFtZV0gPVxuICAgICAgKGN1cnJlbnROYW1lc3BhY2VUeXBlQ291bnRzW3RoaXMuY3VycmVudExvY2FsTmFtZV0gfHwgMCkgKyAxO1xuICAgIHNpYmxpbmdUeXBlQ291bnRzU3RhY2sucHVzaCh7fSk7XG4gICAgY29uc3QgZm9sbG93aW5nU2libGluZ09yZGVyU3RhY2sgPSB0aGlzLmZvbGxvd2luZ1NpYmxpbmdPcmRlclN0YWNrO1xuICAgIGlmIChcbiAgICAgIGZvbGxvd2luZ1NpYmxpbmdPcmRlclN0YWNrW2ZvbGxvd2luZ1NpYmxpbmdPcmRlclN0YWNrLmxlbmd0aCAtIDFdICE9PSBudWxsXG4gICAgKSB7XG4gICAgICB0aGlzLmN1cnJlbnRGb2xsb3dpbmdTaWJsaW5nT3JkZXIgPSAtLWZvbGxvd2luZ1NpYmxpbmdPcmRlclN0YWNrW1xuICAgICAgICBmb2xsb3dpbmdTaWJsaW5nT3JkZXJTdGFjay5sZW5ndGggLSAxXG4gICAgICBdO1xuICAgIH0gZWxzZSB7XG4gICAgICB0aGlzLmN1cnJlbnRGb2xsb3dpbmdTaWJsaW5nT3JkZXIgPSBudWxsO1xuICAgIH1cbiAgICBmb2xsb3dpbmdTaWJsaW5nT3JkZXJTdGFjay5wdXNoKG51bGwpO1xuICAgIGNvbnN0IGZvbGxvd2luZ1NpYmxpbmdUeXBlQ291bnRzU3RhY2sgPSB0aGlzXG4gICAgICAuZm9sbG93aW5nU2libGluZ1R5cGVDb3VudHNTdGFjaztcbiAgICBjb25zdCBjdXJyZW50Rm9sbG93aW5nU2libGluZ1R5cGVDb3VudHMgPSAodGhpcy5jdXJyZW50Rm9sbG93aW5nU2libGluZ1R5cGVDb3VudHMgPVxuICAgICAgZm9sbG93aW5nU2libGluZ1R5cGVDb3VudHNTdGFja1tcbiAgICAgICAgZm9sbG93aW5nU2libGluZ1R5cGVDb3VudHNTdGFjay5sZW5ndGggLSAxXG4gICAgICBdKTtcbiAgICBpZiAoXG4gICAgICBjdXJyZW50Rm9sbG93aW5nU2libGluZ1R5cGVDb3VudHMgJiZcbiAgICAgIGN1cnJlbnRGb2xsb3dpbmdTaWJsaW5nVHlwZUNvdW50c1t0aGlzLmN1cnJlbnROYW1lc3BhY2VdXG4gICAgKSB7XG4gICAgICBjdXJyZW50Rm9sbG93aW5nU2libGluZ1R5cGVDb3VudHNbdGhpcy5jdXJyZW50TmFtZXNwYWNlXVtcbiAgICAgICAgdGhpcy5jdXJyZW50TG9jYWxOYW1lXG4gICAgICBdLS07XG4gICAgfVxuICAgIGZvbGxvd2luZ1NpYmxpbmdUeXBlQ291bnRzU3RhY2sucHVzaCh7fSk7XG4gICAgdGhpcy5hcHBseUFjdGlvbnMoKTtcbiAgICB0aGlzLmFwcGx5QXR0ckZpbHRlcihlbGVtZW50KTtcbiAgICBjb25zdCBxdW90ZXNDYXNjID0gYmFzZVN0eWxlW1wicXVvdGVzXCJdO1xuICAgIGxldCBpdGVtVG9QdXNoTGFzdDogUXVvdGVzU2NvcGVJdGVtIHwgbnVsbCA9IG51bGw7XG4gICAgaWYgKHF1b3Rlc0Nhc2MpIHtcbiAgICAgIGNvbnN0IHF1b3Rlc1ZhbCA9IHF1b3Rlc0Nhc2MuZXZhbHVhdGUodGhpcy5jb250ZXh0KTtcbiAgICAgIGlmIChxdW90ZXNWYWwpIHtcbiAgICAgICAgaXRlbVRvUHVzaExhc3QgPSBuZXcgUXVvdGVzU2NvcGVJdGVtKHRoaXMucXVvdGVzKTtcbiAgICAgICAgaWYgKHF1b3Rlc1ZhbCA9PT0gQ3NzLmlkZW50Lm5vbmUpIHtcbiAgICAgICAgICB0aGlzLnF1b3RlcyA9IFtuZXcgQ3NzLlN0cihcIlwiKSwgbmV3IENzcy5TdHIoXCJcIildO1xuICAgICAgICB9IGVsc2UgaWYgKHF1b3Rlc1ZhbCBpbnN0YW5jZW9mIENzcy5TcGFjZUxpc3QpIHtcbiAgICAgICAgICB0aGlzLnF1b3RlcyA9IChxdW90ZXNWYWwgYXMgQ3NzLlNwYWNlTGlzdCkudmFsdWVzIGFzIENzcy5TdHJbXTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgICB0aGlzLnB1c2hDb3VudGVycyh0aGlzLmN1cnJlbnRTdHlsZSk7XG4gICAgY29uc3QgaWQgPVxuICAgICAgdGhpcy5jdXJyZW50SWQgfHwgdGhpcy5jdXJyZW50WG1sSWQgfHwgZWxlbWVudC5nZXRBdHRyaWJ1dGUoXCJuYW1lXCIpIHx8IFwiXCI7XG4gICAgaWYgKGlzUm9vdCB8fCBpZCkge1xuICAgICAgY29uc3QgY291bnRlcnM6IENvdW50ZXJWYWx1ZXMgPSB7fTtcbiAgICAgIE9iamVjdC5rZXlzKHRoaXMuY291bnRlcnMpLmZvckVhY2goKG5hbWUpID0+IHtcbiAgICAgICAgY291bnRlcnNbbmFtZV0gPSBBcnJheS5mcm9tKHRoaXMuY291bnRlcnNbbmFtZV0pO1xuICAgICAgfSk7XG4gICAgICB0aGlzLmNvdW50ZXJMaXN0ZW5lci5jb3VudGVyc09mSWQoaWQsIGNvdW50ZXJzKTtcbiAgICB9XG4gICAgY29uc3QgcHNldWRvcyA9IGdldFN0eWxlTWFwKHRoaXMuY3VycmVudFN0eWxlLCBcIl9wc2V1ZG9zXCIpO1xuICAgIGlmIChwc2V1ZG9zKSB7XG4gICAgICBsZXQgYmVmb3JlID0gdHJ1ZTtcbiAgICAgIGZvciAoY29uc3QgcHNldWRvTmFtZSBvZiBwc2V1ZG9OYW1lcykge1xuICAgICAgICBpZiAoIXBzZXVkb05hbWUpIHtcbiAgICAgICAgICAvLyBjb250ZW50XG4gICAgICAgICAgYmVmb3JlID0gZmFsc2U7XG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgcHNldWRvUHJvcHMgPSBwc2V1ZG9zW3BzZXVkb05hbWVdO1xuICAgICAgICBpZiAocHNldWRvUHJvcHMpIHtcbiAgICAgICAgICBpZiAoYmVmb3JlKSB7XG4gICAgICAgICAgICB0aGlzLnByb2Nlc3NQc2V1ZG9lbGVtZW50UHJvcHMocHNldWRvUHJvcHMsIGVsZW1lbnQpO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICB0aGlzLnN0YWNrW3RoaXMuc3RhY2subGVuZ3RoIC0gMl0ucHVzaChcbiAgICAgICAgICAgICAgbmV3IEFmdGVyUHNldWRvZWxlbWVudEl0ZW0ocHNldWRvUHJvcHMsIGVsZW1lbnQpLFxuICAgICAgICAgICAgKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG5cbiAgICAvLyBwcm9jZXNzIENTUyBzdHJpbmctc2V0IHByb3BlcnR5XG4gICAgdGhpcy5zZXROYW1lZFN0cmluZ3ModGhpcy5jdXJyZW50U3R5bGUpO1xuXG4gICAgaWYgKGl0ZW1Ub1B1c2hMYXN0KSB7XG4gICAgICB0aGlzLnN0YWNrW3RoaXMuc3RhY2subGVuZ3RoIC0gMl0ucHVzaChpdGVtVG9QdXNoTGFzdCk7XG4gICAgfVxuICB9XG5cbiAgcHJpdmF0ZSBhcHBseUF0dHJGaWx0ZXJJbm5lcih2aXNpdG9yLCBlbGVtZW50U3R5bGUpOiB2b2lkIHtcbiAgICBmb3IgKGNvbnN0IHByb3BOYW1lIGluIGVsZW1lbnRTdHlsZSkge1xuICAgICAgaWYgKGlzUHJvcE5hbWUocHJvcE5hbWUpKSB7XG4gICAgICAgIGVsZW1lbnRTdHlsZVtwcm9wTmFtZV0gPSBlbGVtZW50U3R5bGVbcHJvcE5hbWVdLmZpbHRlclZhbHVlKHZpc2l0b3IpO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIHByaXZhdGUgYXBwbHlBdHRyRmlsdGVyKGVsZW1lbnQpOiB2b2lkIHtcbiAgICBjb25zdCB2aXNpdG9yID0gbmV3IEF0dHJWYWx1ZUZpbHRlclZpc2l0b3IoZWxlbWVudCk7XG4gICAgY29uc3QgY3VycmVudFN0eWxlID0gdGhpcy5jdXJyZW50U3R5bGU7XG4gICAgY29uc3QgcHNldWRvTWFwID0gZ2V0U3R5bGVNYXAoY3VycmVudFN0eWxlLCBcIl9wc2V1ZG9zXCIpO1xuICAgIGZvciAoY29uc3QgcHNldWRvTmFtZSBpbiBwc2V1ZG9NYXApIHtcbiAgICAgIHRoaXMuYXBwbHlBdHRyRmlsdGVySW5uZXIodmlzaXRvciwgcHNldWRvTWFwW3BzZXVkb05hbWVdKTtcbiAgICB9XG4gICAgdGhpcy5hcHBseUF0dHJGaWx0ZXJJbm5lcih2aXNpdG9yLCBjdXJyZW50U3R5bGUpO1xuICB9XG5cbiAgcHJpdmF0ZSBhcHBseUFjdGlvbnMoKTogdm9pZCB7XG4gICAgbGV0IGk6IG51bWJlcjtcbiAgICBmb3IgKGkgPSAwOyBpIDwgdGhpcy5jdXJyZW50Q2xhc3NOYW1lcy5sZW5ndGg7IGkrKykge1xuICAgICAgdGhpcy5hcHBseUFjdGlvbih0aGlzLmNvZGUuY2xhc3NlcywgdGhpcy5jdXJyZW50Q2xhc3NOYW1lc1tpXSk7XG4gICAgfVxuICAgIGZvciAoaSA9IDA7IGkgPCB0aGlzLmN1cnJlbnRFcHViVHlwZXMubGVuZ3RoOyBpKyspIHtcbiAgICAgIHRoaXMuYXBwbHlBY3Rpb24odGhpcy5jb2RlLmVwdWJ0eXBlcywgdGhpcy5jdXJyZW50RXB1YlR5cGVzW2ldKTtcbiAgICB9XG4gICAgdGhpcy5hcHBseUFjdGlvbih0aGlzLmNvZGUuaWRzLCB0aGlzLmN1cnJlbnRJZCk7XG4gICAgdGhpcy5hcHBseUFjdGlvbih0aGlzLmNvZGUudGFncywgdGhpcy5jdXJyZW50TG9jYWxOYW1lKTtcbiAgICBpZiAodGhpcy5jdXJyZW50TG9jYWxOYW1lICE9IFwiXCIpIHtcbiAgICAgIC8vIFVuaXZlcnNhbCBzZWxlY3RvciBkb2VzIG5vdCBhcHBseSB0byBwYWdlLW1hc3Rlci1yZWxhdGVkIHJ1bGVzLlxuICAgICAgdGhpcy5hcHBseUFjdGlvbih0aGlzLmNvZGUudGFncywgXCIqXCIpO1xuICAgIH1cbiAgICB0aGlzLmFwcGx5QWN0aW9uKHRoaXMuY29kZS5uc3RhZ3MsIHRoaXMuY3VycmVudE5TVGFnKTtcblxuICAgIC8vIEFwcGx5IHBhZ2UgcnVsZXMgb25seSB3aGVuIGN1cnJlbnRQYWdlVHlwZSBpcyBub3QgbnVsbFxuICAgIGlmICh0aGlzLmN1cnJlbnRQYWdlVHlwZSAhPT0gbnVsbCkge1xuICAgICAgdGhpcy5hcHBseUFjdGlvbih0aGlzLmNvZGUucGFnZXR5cGVzLCB0aGlzLmN1cnJlbnRQYWdlVHlwZSk7XG5cbiAgICAgIC8vIFdlIHJlcHJlc2VudCBwYWdlIHJ1bGVzIHdpdGhvdXQgc2VsZWN0b3JzIGJ5ICosIHRob3VnaCBpdCBpcyBpbGxlZ2FsIGluXG4gICAgICAvLyBDU1NcbiAgICAgIHRoaXMuYXBwbHlBY3Rpb24odGhpcy5jb2RlLnBhZ2V0eXBlcywgXCIqXCIpO1xuICAgIH1cblxuICAgIHRoaXMuc3RhY2sucHVzaChbXSk7XG4gICAgZm9yIChsZXQgZGVwdGggPSAxOyBkZXB0aCA+PSAtMTsgLS1kZXB0aCkge1xuICAgICAgY29uc3QgbGlzdCA9IHRoaXMuc3RhY2tbdGhpcy5zdGFjay5sZW5ndGggLSBkZXB0aCAtIDJdO1xuICAgICAgaSA9IDA7XG4gICAgICB3aGlsZSAoaSA8IGxpc3QubGVuZ3RoKSB7XG4gICAgICAgIGlmIChsaXN0W2ldLnB1c2godGhpcywgZGVwdGgpKSB7XG4gICAgICAgICAgLy8gZG9uZVxuICAgICAgICAgIGxpc3Quc3BsaWNlKGksIDEpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGkrKztcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgICB0aGlzLmlzRmlyc3QgPSB0cnVlO1xuICAgIHRoaXMuaXNSb290ID0gZmFsc2U7XG4gIH1cblxuICBwcml2YXRlIHBvcCgpOiB2b2lkIHtcbiAgICBmb3IgKGxldCBkZXB0aCA9IDE7IGRlcHRoID49IC0xOyAtLWRlcHRoKSB7XG4gICAgICBjb25zdCBsaXN0ID0gdGhpcy5zdGFja1t0aGlzLnN0YWNrLmxlbmd0aCAtIGRlcHRoIC0gMl07XG4gICAgICBsZXQgaSA9IDA7XG4gICAgICB3aGlsZSAoaSA8IGxpc3QubGVuZ3RoKSB7XG4gICAgICAgIGlmIChsaXN0W2ldLnBvcCh0aGlzLCBkZXB0aCkpIHtcbiAgICAgICAgICAvLyBkb25lXG4gICAgICAgICAgbGlzdC5zcGxpY2UoaSwgMSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgaSsrO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICAgIHRoaXMuc3RhY2sucG9wKCk7XG4gICAgdGhpcy5pc0ZpcnN0ID0gZmFsc2U7XG4gIH1cblxuICBwb3BSdWxlKCk6IHZvaWQge1xuICAgIHRoaXMucG9wKCk7XG4gIH1cblxuICBwb3BFbGVtZW50KGVsZW1lbnQ6IEVsZW1lbnQpOiB2b2lkIHtcbiAgICBpZiAoVklWTElPU1RZTEVfREVCVUcpIHtcbiAgICAgIGNvbnN0IGUgPSB0aGlzLmVsZW1lbnRTdGFjay5wb3AoKTtcbiAgICAgIGlmIChlICE9PSBlbGVtZW50KSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcihcIkludmFsaWQgY2FsbCB0byBwb3BFbGVtZW50XCIpO1xuICAgICAgfVxuICAgIH1cbiAgICB0aGlzLnNpYmxpbmdPcmRlclN0YWNrLnBvcCgpO1xuICAgIHRoaXMuc2libGluZ1R5cGVDb3VudHNTdGFjay5wb3AoKTtcbiAgICB0aGlzLmZvbGxvd2luZ1NpYmxpbmdPcmRlclN0YWNrLnBvcCgpO1xuICAgIHRoaXMuZm9sbG93aW5nU2libGluZ1R5cGVDb3VudHNTdGFjay5wb3AoKTtcbiAgICB0aGlzLnBvcCgpO1xuICAgIHRoaXMucG9wQ291bnRlcnMoKTtcbiAgfVxufVxuXG5leHBvcnQgY29uc3QgRU1QVFkgPSBbXTtcblxuLyoqXG4gKiBQc2V1ZG9lbGVtZW50IG5hbWVzIGluIHRoZSBvcmRlciB0aGV5IHNob3VsZCBiZSBwcm9jZXNzZWQsIGVtcHR5IHN0cmluZyBpc1xuICogdGhlIHBsYWNlIHdoZXJlIHRoZSBlbGVtZW50J3MgRE9NIGNoaWxkcmVuIGFyZSBwcm9jZXNzZWQuXG4gKi9cbmV4cG9ydCBjb25zdCBwc2V1ZG9OYW1lcyA9IFtcbiAgXCJiZWZvcmVcIixcbiAgXCJ0cmFuc2NsdXNpb24tYmVmb3JlXCIsXG4gIFwiZm9vdG5vdGUtY2FsbFwiLFxuICBcImZvb3Rub3RlLW1hcmtlclwiLFxuICBcImlubmVyXCIsXG4gIFwiZmlyc3QtbGV0dGVyXCIsXG4gIFwiZmlyc3QtbGluZVwiLFxuICBcIlwiLFxuICAvKiBjb250ZW50ICovXG4gIFwidHJhbnNjbHVzaW9uLWFmdGVyXCIsXG4gIFwiYWZ0ZXJcIixcbl07XG5cbi8qKlxuICogQGVudW0ge251bWJlcn1cbiAqL1xuZXhwb3J0IGVudW0gUGFyc2VTdGF0ZSB7XG4gIFRPUCxcbiAgU0VMRUNUT1IsXG4gIFJVTEUsXG59XG5cbi8qKlxuICogQ2FzY2FkZSBmb3IgYmFzZSBVc2VyIEFnZW50IHN0eWxlc2hlZXQuXG4gKi9cbmV4cG9ydCBsZXQgdWFCYXNlQ2FzY2FkZTogQ2FzY2FkZSA9IG51bGw7XG5leHBvcnQgZnVuY3Rpb24gc2V0VUFCYXNlQ2FzY2FkZSh2YWx1ZTogQ2FzY2FkZSk6IHZvaWQge1xuICB1YUJhc2VDYXNjYWRlID0gdmFsdWU7XG59XG5cbi8vLS0tLS0tLS0tLS0tLSBwYXJzaW5nIC0tLS0tLS0tLS0tLVxuZXhwb3J0IGNsYXNzIENhc2NhZGVQYXJzZXJIYW5kbGVyXG4gIGV4dGVuZHMgQ3NzUGFyc2VyLlNsYXZlUGFyc2VySGFuZGxlclxuICBpbXBsZW1lbnRzIENzc1ZhbGlkYXRvci5Qcm9wZXJ0eVJlY2VpdmVyIHtcbiAgY2hhaW46IENoYWluZWRBY3Rpb25bXSA9IG51bGw7XG4gIHNwZWNpZmljaXR5OiBudW1iZXIgPSAwO1xuICBlbGVtZW50U3R5bGU6IEVsZW1lbnRTdHlsZSA9IG51bGw7XG4gIGNvbmRpdGlvbkNvdW50OiBudW1iZXIgPSAwO1xuICBwc2V1ZG9lbGVtZW50OiBzdHJpbmcgfCBudWxsID0gbnVsbDtcbiAgZm9vdG5vdGVDb250ZW50OiBib29sZWFuID0gZmFsc2U7XG4gIGNhc2NhZGU6IENhc2NhZGU7XG4gIHN0YXRlOiBQYXJzZVN0YXRlO1xuICB2aWV3Q29uZGl0aW9uSWQ6IHN0cmluZyB8IG51bGwgPSBudWxsO1xuICBpbnNpZGVTZWxlY3RvclJ1bGU6IFBhcnNlU3RhdGU7XG5cbiAgY29uc3RydWN0b3IoXG4gICAgc2NvcGU6IEV4cHJzLkxleGljYWxTY29wZSxcbiAgICBvd25lcjogQ3NzUGFyc2VyLkRpc3BhdGNoUGFyc2VySGFuZGxlcixcbiAgICBwdWJsaWMgcmVhZG9ubHkgY29uZGl0aW9uOiBFeHBycy5WYWwsXG4gICAgcGFyZW50OiBDYXNjYWRlUGFyc2VySGFuZGxlcixcbiAgICBwdWJsaWMgcmVhZG9ubHkgcmVnaW9uSWQ6IHN0cmluZyB8IG51bGwsXG4gICAgcHVibGljIHJlYWRvbmx5IHZhbGlkYXRvclNldDogQ3NzVmFsaWRhdG9yLlZhbGlkYXRvclNldCxcbiAgICB0b3BMZXZlbDogYm9vbGVhbixcbiAgKSB7XG4gICAgc3VwZXIoc2NvcGUsIG93bmVyLCB0b3BMZXZlbCk7XG4gICAgdGhpcy5jYXNjYWRlID0gcGFyZW50XG4gICAgICA/IHBhcmVudC5jYXNjYWRlXG4gICAgICA6IHVhQmFzZUNhc2NhZGVcbiAgICAgID8gdWFCYXNlQ2FzY2FkZS5jbG9uZSgpXG4gICAgICA6IG5ldyBDYXNjYWRlKCk7XG4gICAgdGhpcy5zdGF0ZSA9IFBhcnNlU3RhdGUuVE9QO1xuICB9XG5cbiAgcHJvdGVjdGVkIGluc2VydE5vblByaW1hcnkoYWN0aW9uOiBDYXNjYWRlQWN0aW9uKTogdm9pZCB7XG4gICAgdGhpcy5jYXNjYWRlLmluc2VydEluVGFibGUodGhpcy5jYXNjYWRlLnRhZ3MsIFwiKlwiLCBhY3Rpb24pO1xuICB9XG5cbiAgcHJvY2Vzc0NoYWluKGFjdGlvbjogQ2FzY2FkZUFjdGlvbik6IHZvaWQge1xuICAgIGNvbnN0IGNoYWluZWQgPSBjaGFpbkFjdGlvbnModGhpcy5jaGFpbiwgYWN0aW9uKTtcbiAgICBpZiAoXG4gICAgICBjaGFpbmVkICE9PSBhY3Rpb24gJiZcbiAgICAgIChjaGFpbmVkIGFzIENoYWluZWRBY3Rpb24pLm1ha2VQcmltYXJ5KHRoaXMuY2FzY2FkZSlcbiAgICApIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgdGhpcy5pbnNlcnROb25QcmltYXJ5KGNoYWluZWQpO1xuICB9XG5cbiAgaXNJbnNpZGVTZWxlY3RvclJ1bGUobW5lbW9uaWNzOiBzdHJpbmcpOiBib29sZWFuIHtcbiAgICBpZiAodGhpcy5zdGF0ZSAhPSBQYXJzZVN0YXRlLlRPUCkge1xuICAgICAgdGhpcy5yZXBvcnRBbmRTa2lwKG1uZW1vbmljcyk7XG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG5cbiAgLyoqXG4gICAqIEBvdmVycmlkZVxuICAgKi9cbiAgdGFnU2VsZWN0b3IobnM6IHN0cmluZyB8IG51bGwsIG5hbWU6IHN0cmluZyB8IG51bGwpOiB2b2lkIHtcbiAgICBpZiAoIW5hbWUgJiYgIW5zKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIHRoaXMuc3BlY2lmaWNpdHkgKz0gMTtcbiAgICBpZiAobmFtZSAmJiBucykge1xuICAgICAgdGhpcy5jaGFpbi5wdXNoKG5ldyBDaGVja05TVGFnQWN0aW9uKG5zLCBuYW1lLnRvTG93ZXJDYXNlKCkpKTtcbiAgICB9IGVsc2UgaWYgKG5hbWUpIHtcbiAgICAgIHRoaXMuY2hhaW4ucHVzaChuZXcgQ2hlY2tMb2NhbE5hbWVBY3Rpb24obmFtZS50b0xvd2VyQ2FzZSgpKSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHRoaXMuY2hhaW4ucHVzaChuZXcgQ2hlY2tOYW1lc3BhY2VBY3Rpb24obnMgYXMgc3RyaW5nKSk7XG4gICAgfVxuICB9XG5cbiAgLyoqXG4gICAqIEBvdmVycmlkZVxuICAgKi9cbiAgY2xhc3NTZWxlY3RvcihuYW1lOiBzdHJpbmcpOiB2b2lkIHtcbiAgICBpZiAodGhpcy5wc2V1ZG9lbGVtZW50KSB7XG4gICAgICBMb2dnaW5nLmxvZ2dlci53YXJuKGA6OiR7dGhpcy5wc2V1ZG9lbGVtZW50fWAsIGBmb2xsb3dlZCBieSAuJHtuYW1lfWApO1xuICAgICAgdGhpcy5jaGFpbi5wdXNoKG5ldyBDaGVja0NvbmRpdGlvbkFjdGlvbihcIlwiKSk7IC8vIGFsd2F5cyBmYWlsc1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICB0aGlzLnNwZWNpZmljaXR5ICs9IDI1NjtcbiAgICB0aGlzLmNoYWluLnB1c2gobmV3IENoZWNrQ2xhc3NBY3Rpb24obmFtZSkpO1xuICB9XG5cbiAgLyoqXG4gICAqIEBvdmVycmlkZVxuICAgKi9cbiAgcHNldWRvY2xhc3NTZWxlY3RvcihuYW1lOiBzdHJpbmcsIHBhcmFtczogKG51bWJlciB8IHN0cmluZylbXSk6IHZvaWQge1xuICAgIGlmICh0aGlzLnBzZXVkb2VsZW1lbnQpIHtcbiAgICAgIExvZ2dpbmcubG9nZ2VyLndhcm4oYDo6JHt0aGlzLnBzZXVkb2VsZW1lbnR9YCwgYGZvbGxvd2VkIGJ5IDoke25hbWV9YCk7XG4gICAgICB0aGlzLmNoYWluLnB1c2gobmV3IENoZWNrQ29uZGl0aW9uQWN0aW9uKFwiXCIpKTsgLy8gYWx3YXlzIGZhaWxzXG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIHN3aXRjaCAobmFtZS50b0xvd2VyQ2FzZSgpKSB7XG4gICAgICBjYXNlIFwiZW5hYmxlZFwiOlxuICAgICAgICB0aGlzLmNoYWluLnB1c2gobmV3IElzRW5hYmxlZEFjdGlvbigpKTtcbiAgICAgICAgYnJlYWs7XG4gICAgICBjYXNlIFwiZGlzYWJsZWRcIjpcbiAgICAgICAgdGhpcy5jaGFpbi5wdXNoKG5ldyBJc0Rpc2FibGVkQWN0aW9uKCkpO1xuICAgICAgICBicmVhaztcbiAgICAgIGNhc2UgXCJjaGVja2VkXCI6XG4gICAgICAgIHRoaXMuY2hhaW4ucHVzaChuZXcgSXNDaGVja2VkQWN0aW9uKCkpO1xuICAgICAgICBicmVhaztcbiAgICAgIGNhc2UgXCJyb290XCI6XG4gICAgICAgIHRoaXMuY2hhaW4ucHVzaChuZXcgSXNSb290QWN0aW9uKCkpO1xuICAgICAgICBicmVhaztcbiAgICAgIGNhc2UgXCJsaW5rXCI6XG4gICAgICAgIHRoaXMuY2hhaW4ucHVzaChuZXcgQ2hlY2tMb2NhbE5hbWVBY3Rpb24oXCJhXCIpKTtcbiAgICAgICAgdGhpcy5jaGFpbi5wdXNoKG5ldyBDaGVja0F0dHJpYnV0ZVByZXNlbnRBY3Rpb24oXCJcIiwgXCJocmVmXCIpKTtcbiAgICAgICAgYnJlYWs7XG4gICAgICBjYXNlIFwiLWFkYXB0LWhyZWYtZXB1Yi10eXBlXCI6XG4gICAgICBjYXNlIFwiaHJlZi1lcHViLXR5cGVcIjpcbiAgICAgICAgaWYgKHBhcmFtcyAmJiBwYXJhbXMubGVuZ3RoID09IDEgJiYgdHlwZW9mIHBhcmFtc1swXSA9PSBcInN0cmluZ1wiKSB7XG4gICAgICAgICAgY29uc3QgdmFsdWUgPSBwYXJhbXNbMF0gYXMgc3RyaW5nO1xuICAgICAgICAgIGNvbnN0IHBhdHQgPSBuZXcgUmVnRXhwKGAoXnxzKSR7QmFzZS5lc2NhcGVSZWdFeHAodmFsdWUpfShcXCR8cylgKTtcbiAgICAgICAgICB0aGlzLmNoYWluLnB1c2gobmV3IENoZWNrVGFyZ2V0RXB1YlR5cGVBY3Rpb24ocGF0dCkpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHRoaXMuY2hhaW4ucHVzaChuZXcgQ2hlY2tDb25kaXRpb25BY3Rpb24oXCJcIikpOyAvLyBhbHdheXMgZmFpbHNcbiAgICAgICAgfVxuICAgICAgICBicmVhaztcbiAgICAgIGNhc2UgXCItYWRhcHQtZm9vdG5vdGUtY29udGVudFwiOlxuICAgICAgY2FzZSBcImZvb3Rub3RlLWNvbnRlbnRcIjpcbiAgICAgICAgLy8gY29udGVudCBpbnNpZGUgdGhlIGZvb3Rub3RlXG4gICAgICAgIHRoaXMuZm9vdG5vdGVDb250ZW50ID0gdHJ1ZTtcbiAgICAgICAgYnJlYWs7XG4gICAgICBjYXNlIFwidmlzaXRlZFwiOlxuICAgICAgY2FzZSBcImFjdGl2ZVwiOlxuICAgICAgY2FzZSBcImhvdmVyXCI6XG4gICAgICBjYXNlIFwiZm9jdXNcIjpcbiAgICAgICAgdGhpcy5jaGFpbi5wdXNoKG5ldyBDaGVja0NvbmRpdGlvbkFjdGlvbihcIlwiKSk7IC8vIGFsd2F5cyBmYWlsc1xuICAgICAgICBicmVhaztcbiAgICAgIGNhc2UgXCJsYW5nXCI6XG4gICAgICAgIGlmIChwYXJhbXMgJiYgcGFyYW1zLmxlbmd0aCA9PSAxICYmIHR5cGVvZiBwYXJhbXNbMF0gPT0gXCJzdHJpbmdcIikge1xuICAgICAgICAgIGNvbnN0IGxhbmdWYWx1ZSA9IHBhcmFtc1swXSBhcyBzdHJpbmc7XG4gICAgICAgICAgdGhpcy5jaGFpbi5wdXNoKFxuICAgICAgICAgICAgbmV3IENoZWNrTGFuZ0FjdGlvbihcbiAgICAgICAgICAgICAgbmV3IFJlZ0V4cChcbiAgICAgICAgICAgICAgICBgXiR7QmFzZS5lc2NhcGVSZWdFeHAobGFuZ1ZhbHVlLnRvTG93ZXJDYXNlKCkpfShcXCR8LSlgLFxuICAgICAgICAgICAgICApLFxuICAgICAgICAgICAgKSxcbiAgICAgICAgICApO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHRoaXMuY2hhaW4ucHVzaChuZXcgQ2hlY2tDb25kaXRpb25BY3Rpb24oXCJcIikpOyAvLyBhbHdheXMgZmFpc1xuICAgICAgICB9XG4gICAgICAgIGJyZWFrO1xuICAgICAgY2FzZSBcIm50aC1jaGlsZFwiOlxuICAgICAgY2FzZSBcIm50aC1sYXN0LWNoaWxkXCI6XG4gICAgICBjYXNlIFwibnRoLW9mLXR5cGVcIjpcbiAgICAgIGNhc2UgXCJudGgtbGFzdC1vZi10eXBlXCI6IHtcbiAgICAgICAgY29uc3QgQWN0aW9uQ2xhc3MgPSBudGhTZWxlY3RvckFjdGlvbkNsYXNzZXNbbmFtZS50b0xvd2VyQ2FzZSgpXTtcbiAgICAgICAgaWYgKHBhcmFtcyAmJiBwYXJhbXMubGVuZ3RoID09IDIpIHtcbiAgICAgICAgICB0aGlzLmNoYWluLnB1c2goXG4gICAgICAgICAgICBuZXcgQWN0aW9uQ2xhc3MocGFyYW1zWzBdIGFzIG51bWJlciwgcGFyYW1zWzFdIGFzIG51bWJlciksXG4gICAgICAgICAgKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICB0aGlzLmNoYWluLnB1c2gobmV3IENoZWNrQ29uZGl0aW9uQWN0aW9uKFwiXCIpKTsgLy8gYWx3YXlzIGZhaWxzXG4gICAgICAgIH1cbiAgICAgICAgYnJlYWs7XG4gICAgICB9XG4gICAgICBjYXNlIFwiZmlyc3QtY2hpbGRcIjpcbiAgICAgICAgdGhpcy5jaGFpbi5wdXNoKG5ldyBJc0ZpcnN0QWN0aW9uKCkpO1xuICAgICAgICBicmVhaztcbiAgICAgIGNhc2UgXCJsYXN0LWNoaWxkXCI6XG4gICAgICAgIHRoaXMuY2hhaW4ucHVzaChuZXcgSXNOdGhMYXN0U2libGluZ0FjdGlvbigwLCAxKSk7XG4gICAgICAgIGJyZWFrO1xuICAgICAgY2FzZSBcImZpcnN0LW9mLXR5cGVcIjpcbiAgICAgICAgdGhpcy5jaGFpbi5wdXNoKG5ldyBJc050aFNpYmxpbmdPZlR5cGVBY3Rpb24oMCwgMSkpO1xuICAgICAgICBicmVhaztcbiAgICAgIGNhc2UgXCJsYXN0LW9mLXR5cGVcIjpcbiAgICAgICAgdGhpcy5jaGFpbi5wdXNoKG5ldyBJc050aExhc3RTaWJsaW5nT2ZUeXBlQWN0aW9uKDAsIDEpKTtcbiAgICAgICAgYnJlYWs7XG4gICAgICBjYXNlIFwib25seS1jaGlsZFwiOlxuICAgICAgICB0aGlzLmNoYWluLnB1c2gobmV3IElzRmlyc3RBY3Rpb24oKSk7XG4gICAgICAgIHRoaXMuY2hhaW4ucHVzaChuZXcgSXNOdGhMYXN0U2libGluZ0FjdGlvbigwLCAxKSk7XG4gICAgICAgIGJyZWFrO1xuICAgICAgY2FzZSBcIm9ubHktb2YtdHlwZVwiOlxuICAgICAgICB0aGlzLmNoYWluLnB1c2gobmV3IElzTnRoU2libGluZ09mVHlwZUFjdGlvbigwLCAxKSk7XG4gICAgICAgIHRoaXMuY2hhaW4ucHVzaChuZXcgSXNOdGhMYXN0U2libGluZ09mVHlwZUFjdGlvbigwLCAxKSk7XG4gICAgICAgIGJyZWFrO1xuICAgICAgY2FzZSBcImVtcHR5XCI6XG4gICAgICAgIHRoaXMuY2hhaW4ucHVzaChuZXcgSXNFbXB0eUFjdGlvbigpKTtcbiAgICAgICAgYnJlYWs7XG4gICAgICBjYXNlIFwiYmVmb3JlXCI6XG4gICAgICBjYXNlIFwiYWZ0ZXJcIjpcbiAgICAgIGNhc2UgXCJmaXJzdC1saW5lXCI6XG4gICAgICBjYXNlIFwiZmlyc3QtbGV0dGVyXCI6XG4gICAgICAgIHRoaXMucHNldWRvZWxlbWVudFNlbGVjdG9yKG5hbWUsIHBhcmFtcyk7XG4gICAgICAgIHJldHVybjtcbiAgICAgIGRlZmF1bHQ6XG4gICAgICAgIExvZ2dpbmcubG9nZ2VyLndhcm4oYHVua25vd24gcHNldWRvLWNsYXNzIHNlbGVjdG9yOiAke25hbWV9YCk7XG4gICAgICAgIHRoaXMuY2hhaW4ucHVzaChuZXcgQ2hlY2tDb25kaXRpb25BY3Rpb24oXCJcIikpOyAvLyBhbHdheXMgZmFpbHNcbiAgICAgICAgYnJlYWs7XG4gICAgfVxuICAgIHRoaXMuc3BlY2lmaWNpdHkgKz0gMjU2O1xuICB9XG5cbiAgLyoqXG4gICAqIEBvdmVycmlkZVxuICAgKi9cbiAgcHNldWRvZWxlbWVudFNlbGVjdG9yKG5hbWU6IHN0cmluZywgcGFyYW1zOiAobnVtYmVyIHwgc3RyaW5nKVtdKTogdm9pZCB7XG4gICAgc3dpdGNoIChuYW1lKSB7XG4gICAgICBjYXNlIFwiYmVmb3JlXCI6XG4gICAgICBjYXNlIFwiYWZ0ZXJcIjpcbiAgICAgIGNhc2UgXCJmaXJzdC1saW5lXCI6XG4gICAgICBjYXNlIFwiZmlyc3QtbGV0dGVyXCI6XG4gICAgICBjYXNlIFwiZm9vdG5vdGUtY2FsbFwiOlxuICAgICAgY2FzZSBcImZvb3Rub3RlLW1hcmtlclwiOlxuICAgICAgY2FzZSBcImlubmVyXCI6XG4gICAgICBjYXNlIFwiYWZ0ZXItaWYtY29udGludWVzXCI6XG4gICAgICAgIGlmICghdGhpcy5wc2V1ZG9lbGVtZW50KSB7XG4gICAgICAgICAgdGhpcy5wc2V1ZG9lbGVtZW50ID0gbmFtZTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBMb2dnaW5nLmxvZ2dlci53YXJuKFxuICAgICAgICAgICAgYERvdWJsZSBwc2V1ZG9lbGVtZW50IDo6JHt0aGlzLnBzZXVkb2VsZW1lbnR9Ojoke25hbWV9YCxcbiAgICAgICAgICApO1xuICAgICAgICAgIHRoaXMuY2hhaW4ucHVzaChuZXcgQ2hlY2tDb25kaXRpb25BY3Rpb24oXCJcIikpOyAvLyBhbHdheXMgZmFpbHNcbiAgICAgICAgfVxuICAgICAgICBicmVhaztcbiAgICAgIGNhc2UgXCJmaXJzdC1uLWxpbmVzXCI6XG4gICAgICAgIGlmIChwYXJhbXMgJiYgcGFyYW1zLmxlbmd0aCA9PSAxICYmIHR5cGVvZiBwYXJhbXNbMF0gPT0gXCJudW1iZXJcIikge1xuICAgICAgICAgIGNvbnN0IG4gPSBNYXRoLnJvdW5kKHBhcmFtc1swXSBhcyBudW1iZXIpO1xuICAgICAgICAgIGlmIChuID4gMCAmJiBuID09IHBhcmFtc1swXSkge1xuICAgICAgICAgICAgaWYgKCF0aGlzLnBzZXVkb2VsZW1lbnQpIHtcbiAgICAgICAgICAgICAgdGhpcy5wc2V1ZG9lbGVtZW50ID0gYGZpcnN0LSR7bn0tbGluZXNgO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgTG9nZ2luZy5sb2dnZXIud2FybihcbiAgICAgICAgICAgICAgICBgRG91YmxlIHBzZXVkb2VsZW1lbnQgOjoke3RoaXMucHNldWRvZWxlbWVudH06OiR7bmFtZX1gLFxuICAgICAgICAgICAgICApO1xuICAgICAgICAgICAgICB0aGlzLmNoYWluLnB1c2gobmV3IENoZWNrQ29uZGl0aW9uQWN0aW9uKFwiXCIpKTsgLy8gYWx3YXlzIGZhaWxzXG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5jaGFpbi5wdXNoKG5ldyBDaGVja0NvbmRpdGlvbkFjdGlvbihcIlwiKSk7IC8vIGFsd2F5cyBmYWlsc1xuICAgICAgICBicmVhaztcbiAgICAgIGNhc2UgXCJudGgtZnJhZ21lbnRcIjpcbiAgICAgICAgaWYgKHBhcmFtcyAmJiBwYXJhbXMubGVuZ3RoID09IDIpIHtcbiAgICAgICAgICB0aGlzLnZpZXdDb25kaXRpb25JZCA9IGBORlNfJHtwYXJhbXNbMF19XyR7cGFyYW1zWzFdfWA7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgdGhpcy5jaGFpbi5wdXNoKG5ldyBDaGVja0NvbmRpdGlvbkFjdGlvbihcIlwiKSk7IC8vIGFsd2F5cyBmYWlsc1xuICAgICAgICB9XG4gICAgICAgIGJyZWFrO1xuICAgICAgZGVmYXVsdDpcbiAgICAgICAgTG9nZ2luZy5sb2dnZXIud2FybihgVW5yZWNvZ25pemVkIHBzZXVkb2VsZW1lbnQ6IDo6JHtuYW1lfWApO1xuICAgICAgICB0aGlzLmNoYWluLnB1c2gobmV3IENoZWNrQ29uZGl0aW9uQWN0aW9uKFwiXCIpKTsgLy8gYWx3YXlzIGZhaWxzXG4gICAgICAgIGJyZWFrO1xuICAgIH1cbiAgICB0aGlzLnNwZWNpZmljaXR5ICs9IDE7XG4gIH1cblxuICAvKipcbiAgICogQG92ZXJyaWRlXG4gICAqL1xuICBpZFNlbGVjdG9yKGlkOiBzdHJpbmcpOiB2b2lkIHtcbiAgICB0aGlzLnNwZWNpZmljaXR5ICs9IDY1NTM2O1xuICAgIHRoaXMuY2hhaW4ucHVzaChuZXcgQ2hlY2tJZEFjdGlvbihpZCkpO1xuICB9XG5cbiAgLyoqXG4gICAqIEBvdmVycmlkZVxuICAgKi9cbiAgYXR0cmlidXRlU2VsZWN0b3IoXG4gICAgbnM6IHN0cmluZyxcbiAgICBuYW1lOiBzdHJpbmcsXG4gICAgb3A6IENzc1Rva2VuaXplci5Ub2tlblR5cGUsXG4gICAgdmFsdWU6IHN0cmluZyB8IG51bGwsXG4gICk6IHZvaWQge1xuICAgIHRoaXMuc3BlY2lmaWNpdHkgKz0gMjU2O1xuICAgIG5hbWUgPSBuYW1lLnRvTG93ZXJDYXNlKCk7XG4gICAgdmFsdWUgPSB2YWx1ZSB8fCBcIlwiO1xuICAgIGxldCBhY3Rpb247XG4gICAgc3dpdGNoIChvcCkge1xuICAgICAgY2FzZSBDc3NUb2tlbml6ZXIuVG9rZW5UeXBlLkVPRjpcbiAgICAgICAgYWN0aW9uID0gbmV3IENoZWNrQXR0cmlidXRlUHJlc2VudEFjdGlvbihucywgbmFtZSk7XG4gICAgICAgIGJyZWFrO1xuICAgICAgY2FzZSBDc3NUb2tlbml6ZXIuVG9rZW5UeXBlLkVROlxuICAgICAgICBhY3Rpb24gPSBuZXcgQ2hlY2tBdHRyaWJ1dGVFcUFjdGlvbihucywgbmFtZSwgdmFsdWUpO1xuICAgICAgICBicmVhaztcbiAgICAgIGNhc2UgQ3NzVG9rZW5pemVyLlRva2VuVHlwZS5USUxERV9FUTpcbiAgICAgICAgaWYgKCF2YWx1ZSB8fCB2YWx1ZS5tYXRjaCgvXFxzLykpIHtcbiAgICAgICAgICBhY3Rpb24gPSBuZXcgQ2hlY2tDb25kaXRpb25BY3Rpb24oXCJcIik7IC8vIGFsd2F5cyBmYWlsc1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGFjdGlvbiA9IG5ldyBDaGVja0F0dHJpYnV0ZVJlZ0V4cEFjdGlvbihcbiAgICAgICAgICAgIG5zLFxuICAgICAgICAgICAgbmFtZSxcbiAgICAgICAgICAgIG5ldyBSZWdFeHAoYChefFxcXFxzKSR7QmFzZS5lc2NhcGVSZWdFeHAodmFsdWUpfShcXCR8XFxcXHMpYCksXG4gICAgICAgICAgKTtcbiAgICAgICAgfVxuICAgICAgICBicmVhaztcbiAgICAgIGNhc2UgQ3NzVG9rZW5pemVyLlRva2VuVHlwZS5CQVJfRVE6XG4gICAgICAgIGFjdGlvbiA9IG5ldyBDaGVja0F0dHJpYnV0ZVJlZ0V4cEFjdGlvbihcbiAgICAgICAgICBucyxcbiAgICAgICAgICBuYW1lLFxuICAgICAgICAgIG5ldyBSZWdFeHAoYF4ke0Jhc2UuZXNjYXBlUmVnRXhwKHZhbHVlKX0oXFwkfC0pYCksXG4gICAgICAgICk7XG4gICAgICAgIGJyZWFrO1xuICAgICAgY2FzZSBDc3NUb2tlbml6ZXIuVG9rZW5UeXBlLkhBVF9FUTpcbiAgICAgICAgaWYgKCF2YWx1ZSkge1xuICAgICAgICAgIGFjdGlvbiA9IG5ldyBDaGVja0NvbmRpdGlvbkFjdGlvbihcIlwiKTsgLy8gYWx3YXlzIGZhaWxzXG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgYWN0aW9uID0gbmV3IENoZWNrQXR0cmlidXRlUmVnRXhwQWN0aW9uKFxuICAgICAgICAgICAgbnMsXG4gICAgICAgICAgICBuYW1lLFxuICAgICAgICAgICAgbmV3IFJlZ0V4cChgXiR7QmFzZS5lc2NhcGVSZWdFeHAodmFsdWUpfWApLFxuICAgICAgICAgICk7XG4gICAgICAgIH1cbiAgICAgICAgYnJlYWs7XG4gICAgICBjYXNlIENzc1Rva2VuaXplci5Ub2tlblR5cGUuRE9MTEFSX0VROlxuICAgICAgICBpZiAoIXZhbHVlKSB7XG4gICAgICAgICAgYWN0aW9uID0gbmV3IENoZWNrQ29uZGl0aW9uQWN0aW9uKFwiXCIpOyAvLyBhbHdheXMgZmFpbHNcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBhY3Rpb24gPSBuZXcgQ2hlY2tBdHRyaWJ1dGVSZWdFeHBBY3Rpb24oXG4gICAgICAgICAgICBucyxcbiAgICAgICAgICAgIG5hbWUsXG4gICAgICAgICAgICBuZXcgUmVnRXhwKGAke0Jhc2UuZXNjYXBlUmVnRXhwKHZhbHVlKX1cXCRgKSxcbiAgICAgICAgICApO1xuICAgICAgICB9XG4gICAgICAgIGJyZWFrO1xuICAgICAgY2FzZSBDc3NUb2tlbml6ZXIuVG9rZW5UeXBlLlNUQVJfRVE6XG4gICAgICAgIGlmICghdmFsdWUpIHtcbiAgICAgICAgICBhY3Rpb24gPSBuZXcgQ2hlY2tDb25kaXRpb25BY3Rpb24oXCJcIik7IC8vIGFsd2F5cyBmYWlsc1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGFjdGlvbiA9IG5ldyBDaGVja0F0dHJpYnV0ZVJlZ0V4cEFjdGlvbihcbiAgICAgICAgICAgIG5zLFxuICAgICAgICAgICAgbmFtZSxcbiAgICAgICAgICAgIG5ldyBSZWdFeHAoQmFzZS5lc2NhcGVSZWdFeHAodmFsdWUpKSxcbiAgICAgICAgICApO1xuICAgICAgICB9XG4gICAgICAgIGJyZWFrO1xuICAgICAgY2FzZSBDc3NUb2tlbml6ZXIuVG9rZW5UeXBlLkNPTF9DT0w6XG4gICAgICAgIGlmICh2YWx1ZSA9PSBcInN1cHBvcnRlZFwiKSB7XG4gICAgICAgICAgYWN0aW9uID0gbmV3IENoZWNrTmFtZXNwYWNlU3VwcG9ydGVkQWN0aW9uKG5zLCBuYW1lKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBMb2dnaW5nLmxvZ2dlci53YXJuKFwiVW5zdXBwb3J0ZWQgOjogYXR0ciBzZWxlY3RvciBvcDpcIiwgdmFsdWUpO1xuICAgICAgICAgIGFjdGlvbiA9IG5ldyBDaGVja0NvbmRpdGlvbkFjdGlvbihcIlwiKTsgLy8gYWx3YXlzIGZhaWxzXG4gICAgICAgIH1cbiAgICAgICAgYnJlYWs7XG4gICAgICBkZWZhdWx0OlxuICAgICAgICBMb2dnaW5nLmxvZ2dlci53YXJuKFwiVW5zdXBwb3J0ZWQgYXR0ciBzZWxlY3RvcjpcIiwgb3ApO1xuICAgICAgICBhY3Rpb24gPSBuZXcgQ2hlY2tDb25kaXRpb25BY3Rpb24oXCJcIik7IC8vIGFsd2F5cyBmYWlsc1xuICAgIH1cbiAgICB0aGlzLmNoYWluLnB1c2goYWN0aW9uKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBAb3ZlcnJpZGVcbiAgICovXG4gIGRlc2NlbmRhbnRTZWxlY3RvcigpOiB2b2lkIHtcbiAgICBjb25zdCBjb25kaXRpb24gPSBgZCR7Y29uZGl0aW9uQ291bnQrK31gO1xuICAgIHRoaXMucHJvY2Vzc0NoYWluKFxuICAgICAgbmV3IENvbmRpdGlvbkl0ZW1BY3Rpb24oXG4gICAgICAgIG5ldyBEZXNjZW5kYW50Q29uZGl0aW9uSXRlbShjb25kaXRpb24sIHRoaXMudmlld0NvbmRpdGlvbklkLCBudWxsKSxcbiAgICAgICksXG4gICAgKTtcbiAgICB0aGlzLmNoYWluID0gW25ldyBDaGVja0NvbmRpdGlvbkFjdGlvbihjb25kaXRpb24pXTtcbiAgICB0aGlzLnZpZXdDb25kaXRpb25JZCA9IG51bGw7XG4gIH1cblxuICAvKipcbiAgICogQG92ZXJyaWRlXG4gICAqL1xuICBjaGlsZFNlbGVjdG9yKCk6IHZvaWQge1xuICAgIGNvbnN0IGNvbmRpdGlvbiA9IGBjJHtjb25kaXRpb25Db3VudCsrfWA7XG4gICAgdGhpcy5wcm9jZXNzQ2hhaW4oXG4gICAgICBuZXcgQ29uZGl0aW9uSXRlbUFjdGlvbihcbiAgICAgICAgbmV3IENoaWxkQ29uZGl0aW9uSXRlbShjb25kaXRpb24sIHRoaXMudmlld0NvbmRpdGlvbklkLCBudWxsKSxcbiAgICAgICksXG4gICAgKTtcbiAgICB0aGlzLmNoYWluID0gW25ldyBDaGVja0NvbmRpdGlvbkFjdGlvbihjb25kaXRpb24pXTtcbiAgICB0aGlzLnZpZXdDb25kaXRpb25JZCA9IG51bGw7XG4gIH1cblxuICAvKipcbiAgICogQG92ZXJyaWRlXG4gICAqL1xuICBhZGphY2VudFNpYmxpbmdTZWxlY3RvcigpOiB2b2lkIHtcbiAgICBjb25zdCBjb25kaXRpb24gPSBgYSR7Y29uZGl0aW9uQ291bnQrK31gO1xuICAgIHRoaXMucHJvY2Vzc0NoYWluKFxuICAgICAgbmV3IENvbmRpdGlvbkl0ZW1BY3Rpb24oXG4gICAgICAgIG5ldyBBZGphY2VudFNpYmxpbmdDb25kaXRpb25JdGVtKGNvbmRpdGlvbiwgdGhpcy52aWV3Q29uZGl0aW9uSWQsIG51bGwpLFxuICAgICAgKSxcbiAgICApO1xuICAgIHRoaXMuY2hhaW4gPSBbbmV3IENoZWNrQ29uZGl0aW9uQWN0aW9uKGNvbmRpdGlvbildO1xuICAgIHRoaXMudmlld0NvbmRpdGlvbklkID0gbnVsbDtcbiAgfVxuXG4gIC8qKlxuICAgKiBAb3ZlcnJpZGVcbiAgICovXG4gIGZvbGxvd2luZ1NpYmxpbmdTZWxlY3RvcigpOiB2b2lkIHtcbiAgICBjb25zdCBjb25kaXRpb24gPSBgZiR7Y29uZGl0aW9uQ291bnQrK31gO1xuICAgIHRoaXMucHJvY2Vzc0NoYWluKFxuICAgICAgbmV3IENvbmRpdGlvbkl0ZW1BY3Rpb24oXG4gICAgICAgIG5ldyBGb2xsb3dpbmdTaWJsaW5nQ29uZGl0aW9uSXRlbShcbiAgICAgICAgICBjb25kaXRpb24sXG4gICAgICAgICAgdGhpcy52aWV3Q29uZGl0aW9uSWQsXG4gICAgICAgICAgbnVsbCxcbiAgICAgICAgKSxcbiAgICAgICksXG4gICAgKTtcbiAgICB0aGlzLmNoYWluID0gW25ldyBDaGVja0NvbmRpdGlvbkFjdGlvbihjb25kaXRpb24pXTtcbiAgICB0aGlzLnZpZXdDb25kaXRpb25JZCA9IG51bGw7XG4gIH1cblxuICAvKipcbiAgICogQG92ZXJyaWRlXG4gICAqL1xuICBuZXh0U2VsZWN0b3IoKTogdm9pZCB7XG4gICAgdGhpcy5maW5pc2hDaGFpbigpO1xuICAgIHRoaXMucHNldWRvZWxlbWVudCA9IG51bGw7XG4gICAgdGhpcy5mb290bm90ZUNvbnRlbnQgPSBmYWxzZTtcbiAgICB0aGlzLnNwZWNpZmljaXR5ID0gMDtcbiAgICB0aGlzLmNoYWluID0gW107XG4gIH1cblxuICAvKipcbiAgICogQG92ZXJyaWRlXG4gICAqL1xuICBzdGFydFNlbGVjdG9yUnVsZSgpOiB2b2lkIHtcbiAgICBpZiAodGhpcy5pc0luc2lkZVNlbGVjdG9yUnVsZShcIkVfQ1NTX1VORVhQRUNURURfU0VMRUNUT1JcIikpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgdGhpcy5zdGF0ZSA9IFBhcnNlU3RhdGUuU0VMRUNUT1I7XG4gICAgdGhpcy5lbGVtZW50U3R5bGUgPSB7fSBhcyBFbGVtZW50U3R5bGU7XG4gICAgdGhpcy5wc2V1ZG9lbGVtZW50ID0gbnVsbDtcbiAgICB0aGlzLnNwZWNpZmljaXR5ID0gMDtcbiAgICB0aGlzLmZvb3Rub3RlQ29udGVudCA9IGZhbHNlO1xuICAgIHRoaXMuY2hhaW4gPSBbXTtcbiAgfVxuXG4gIC8qKlxuICAgKiBAb3ZlcnJpZGVcbiAgICovXG4gIGVycm9yKG1uZW1vbmljczogc3RyaW5nLCB0b2tlbjogQ3NzVG9rZW5pemVyLlRva2VuKTogdm9pZCB7XG4gICAgc3VwZXIuZXJyb3IobW5lbW9uaWNzLCB0b2tlbik7XG4gICAgaWYgKHRoaXMuc3RhdGUgPT0gUGFyc2VTdGF0ZS5TRUxFQ1RPUikge1xuICAgICAgdGhpcy5zdGF0ZSA9IFBhcnNlU3RhdGUuVE9QO1xuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAgKiBAb3ZlcnJpZGVcbiAgICovXG4gIHN0YXJ0U3R5bGVzaGVldChmbGF2b3I6IENzc1BhcnNlci5TdHlsZXNoZWV0Rmxhdm9yKTogdm9pZCB7XG4gICAgc3VwZXIuc3RhcnRTdHlsZXNoZWV0KGZsYXZvcik7XG4gICAgdGhpcy5zdGF0ZSA9IFBhcnNlU3RhdGUuVE9QO1xuICB9XG5cbiAgLyoqXG4gICAqIEBvdmVycmlkZVxuICAgKi9cbiAgc3RhcnRSdWxlQm9keSgpOiB2b2lkIHtcbiAgICB0aGlzLmZpbmlzaENoYWluKCk7XG4gICAgc3VwZXIuc3RhcnRSdWxlQm9keSgpO1xuICAgIGlmICh0aGlzLnN0YXRlID09IFBhcnNlU3RhdGUuU0VMRUNUT1IpIHtcbiAgICAgIHRoaXMuc3RhdGUgPSBQYXJzZVN0YXRlLlRPUDtcbiAgICB9XG4gIH1cblxuICAvKipcbiAgICogQG92ZXJyaWRlXG4gICAqL1xuICBlbmRSdWxlKCk6IHZvaWQge1xuICAgIHN1cGVyLmVuZFJ1bGUoKTtcbiAgICB0aGlzLmluc2lkZVNlbGVjdG9yUnVsZSA9IFBhcnNlU3RhdGUuVE9QO1xuICB9XG5cbiAgZmluaXNoQ2hhaW4oKTogdm9pZCB7XG4gICAgaWYgKHRoaXMuY2hhaW4pIHtcbiAgICAgIGNvbnN0IHNwZWNpZmljaXR5OiBudW1iZXIgPSB0aGlzLnNwZWNpZmljaXR5ICsgdGhpcy5jYXNjYWRlLm5leHRPcmRlcigpO1xuICAgICAgdGhpcy5wcm9jZXNzQ2hhaW4odGhpcy5tYWtlQXBwbHlSdWxlQWN0aW9uKHNwZWNpZmljaXR5KSk7XG4gICAgICB0aGlzLmNoYWluID0gbnVsbDtcbiAgICAgIHRoaXMucHNldWRvZWxlbWVudCA9IG51bGw7XG4gICAgICB0aGlzLnZpZXdDb25kaXRpb25JZCA9IG51bGw7XG4gICAgICB0aGlzLmZvb3Rub3RlQ29udGVudCA9IGZhbHNlO1xuICAgICAgdGhpcy5zcGVjaWZpY2l0eSA9IDA7XG4gICAgfVxuICB9XG5cbiAgcHJvdGVjdGVkIG1ha2VBcHBseVJ1bGVBY3Rpb24oc3BlY2lmaWNpdHk6IG51bWJlcik6IEFwcGx5UnVsZUFjdGlvbiB7XG4gICAgbGV0IHJlZ2lvbklkID0gdGhpcy5yZWdpb25JZDtcbiAgICBpZiAodGhpcy5mb290bm90ZUNvbnRlbnQpIHtcbiAgICAgIGlmIChyZWdpb25JZCkge1xuICAgICAgICByZWdpb25JZCA9IFwieHh4LWJvZ3VzLXh4eFwiO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcmVnaW9uSWQgPSBcImZvb3Rub3RlXCI7XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiBuZXcgQXBwbHlSdWxlQWN0aW9uKFxuICAgICAgdGhpcy5lbGVtZW50U3R5bGUsXG4gICAgICBzcGVjaWZpY2l0eSxcbiAgICAgIHRoaXMucHNldWRvZWxlbWVudCxcbiAgICAgIHJlZ2lvbklkLFxuICAgICAgdGhpcy52aWV3Q29uZGl0aW9uSWQsXG4gICAgKTtcbiAgfVxuXG4gIHNwZWNpYWwobmFtZTogc3RyaW5nLCB2YWx1ZTogQ3NzLlZhbCkge1xuICAgIGxldCB2YWw6IENhc2NhZGVWYWx1ZTtcbiAgICBpZiAoIXRoaXMuY29uZGl0aW9uKSB7XG4gICAgICB2YWwgPSBuZXcgQ2FzY2FkZVZhbHVlKHZhbHVlLCAwKTtcbiAgICB9IGVsc2Uge1xuICAgICAgdmFsID0gbmV3IENvbmRpdGlvbmFsQ2FzY2FkZVZhbHVlKHZhbHVlLCAwLCB0aGlzLmNvbmRpdGlvbik7XG4gICAgfVxuICAgIGNvbnN0IGFyciA9IGdldE11dGFibGVTcGVjaWFsKHRoaXMuZWxlbWVudFN0eWxlLCBuYW1lKTtcbiAgICBhcnIucHVzaCh2YWwpO1xuICB9XG5cbiAgLyoqXG4gICAqIEBvdmVycmlkZVxuICAgKi9cbiAgcHJvcGVydHkobmFtZTogc3RyaW5nLCB2YWx1ZTogQ3NzLlZhbCwgaW1wb3J0YW50OiBib29sZWFuKTogdm9pZCB7XG4gICAgdGhpcy52YWxpZGF0b3JTZXQudmFsaWRhdGVQcm9wZXJ0eUFuZEhhbmRsZVNob3J0aGFuZChcbiAgICAgIG5hbWUsXG4gICAgICB2YWx1ZSxcbiAgICAgIGltcG9ydGFudCxcbiAgICAgIHRoaXMsXG4gICAgKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBAb3ZlcnJpZGVcbiAgICovXG4gIGludmFsaWRQcm9wZXJ0eVZhbHVlKG5hbWU6IHN0cmluZywgdmFsdWU6IENzcy5WYWwpOiB2b2lkIHtcbiAgICB0aGlzLnJlcG9ydChgRV9JTlZBTElEX1BST1BFUlRZX1ZBTFVFICR7bmFtZX06ICR7dmFsdWUudG9TdHJpbmcoKX1gKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBAb3ZlcnJpZGVcbiAgICovXG4gIHVua25vd25Qcm9wZXJ0eShuYW1lOiBzdHJpbmcsIHZhbHVlOiBDc3MuVmFsKTogdm9pZCB7XG4gICAgdGhpcy5yZXBvcnQoYEVfSU5WQUxJRF9QUk9QRVJUWSAke25hbWV9OiAke3ZhbHVlLnRvU3RyaW5nKCl9YCk7XG4gIH1cblxuICAvKipcbiAgICogQG92ZXJyaWRlXG4gICAqL1xuICBzaW1wbGVQcm9wZXJ0eShuYW1lOiBzdHJpbmcsIHZhbHVlOiBDc3MuVmFsLCBpbXBvcnRhbnQpOiB2b2lkIHtcbiAgICBpZiAoXG4gICAgICBuYW1lID09IFwiZGlzcGxheVwiICYmXG4gICAgICAodmFsdWUgPT09IENzcy5pZGVudC5vZWJfcGFnZV9oZWFkIHx8IHZhbHVlID09PSBDc3MuaWRlbnQub2ViX3BhZ2VfZm9vdClcbiAgICApIHtcbiAgICAgIHRoaXMuc2ltcGxlUHJvcGVydHkoXG4gICAgICAgIFwiZmxvdy1vcHRpb25zXCIsXG4gICAgICAgIG5ldyBDc3MuU3BhY2VMaXN0KFtDc3MuaWRlbnQuZXhjbHVzaXZlLCBDc3MuaWRlbnQuX3N0YXRpY10pLFxuICAgICAgICBpbXBvcnRhbnQsXG4gICAgICApO1xuICAgICAgdGhpcy5zaW1wbGVQcm9wZXJ0eShcImZsb3ctaW50b1wiLCB2YWx1ZSwgaW1wb3J0YW50KTtcbiAgICAgIHZhbHVlID0gQ3NzLmlkZW50LmJsb2NrO1xuICAgIH1cbiAgICBjb25zdCBob29rcyA9IFBsdWdpbi5nZXRIb29rc0Zvck5hbWUoXCJTSU1QTEVfUFJPUEVSVFlcIik7XG4gICAgaG9va3MuZm9yRWFjaCgoaG9vaykgPT4ge1xuICAgICAgY29uc3Qgb3JpZ2luYWwgPSB7IG5hbWU6IG5hbWUsIHZhbHVlOiB2YWx1ZSwgaW1wb3J0YW50OiBpbXBvcnRhbnQgfTtcbiAgICAgIGNvbnN0IGNvbnZlcnRlZCA9IGhvb2sob3JpZ2luYWwpO1xuICAgICAgbmFtZSA9IGNvbnZlcnRlZFtcIm5hbWVcIl07XG4gICAgICB2YWx1ZSA9IGNvbnZlcnRlZFtcInZhbHVlXCJdO1xuICAgICAgaW1wb3J0YW50ID0gY29udmVydGVkW1wiaW1wb3J0YW50XCJdO1xuICAgIH0pO1xuICAgIGNvbnN0IHNwZWNpZmljaXR5ID0gaW1wb3J0YW50XG4gICAgICA/IHRoaXMuZ2V0SW1wb3J0YW50U3BlY2lmaWNpdHkoKVxuICAgICAgOiB0aGlzLmdldEJhc2VTcGVjaWZpY2l0eSgpO1xuICAgIGNvbnN0IGNhc2N2YWwgPSB0aGlzLmNvbmRpdGlvblxuICAgICAgPyBuZXcgQ29uZGl0aW9uYWxDYXNjYWRlVmFsdWUodmFsdWUsIHNwZWNpZmljaXR5LCB0aGlzLmNvbmRpdGlvbilcbiAgICAgIDogbmV3IENhc2NhZGVWYWx1ZSh2YWx1ZSwgc3BlY2lmaWNpdHkpO1xuICAgIHNldFByb3AodGhpcy5lbGVtZW50U3R5bGUsIG5hbWUsIGNhc2N2YWwpO1xuICB9XG5cbiAgZmluaXNoKCk6IENhc2NhZGUge1xuICAgIHJldHVybiB0aGlzLmNhc2NhZGU7XG4gIH1cblxuICAvKipcbiAgICogQG92ZXJyaWRlXG4gICAqL1xuICBzdGFydEZ1bmNXaXRoU2VsZWN0b3IoZnVuY05hbWU6IHN0cmluZyk6IHZvaWQge1xuICAgIHN3aXRjaCAoZnVuY05hbWUpIHtcbiAgICAgIGNhc2UgXCJub3RcIjoge1xuICAgICAgICBjb25zdCBub3RQYXJzZXJIYW5kbGVyID0gbmV3IE5vdFBhcmFtZXRlclBhcnNlckhhbmRsZXIodGhpcyk7XG4gICAgICAgIG5vdFBhcnNlckhhbmRsZXIuc3RhcnRTZWxlY3RvclJ1bGUoKTtcbiAgICAgICAgdGhpcy5vd25lci5wdXNoSGFuZGxlcihub3RQYXJzZXJIYW5kbGVyKTtcbiAgICAgICAgYnJlYWs7XG4gICAgICB9XG4gICAgICBkZWZhdWx0OlxuICAgICAgICAvLyBUT0RPXG4gICAgICAgIGJyZWFrO1xuICAgIH1cbiAgfVxufVxuXG5leHBvcnQgY29uc3QgbnRoU2VsZWN0b3JBY3Rpb25DbGFzc2VzOiB7IFtrZXk6IHN0cmluZ106IHR5cGVvZiBJc050aEFjdGlvbiB9ID0ge1xuICBcIm50aC1jaGlsZFwiOiBJc050aFNpYmxpbmdBY3Rpb24sXG4gIFwibnRoLW9mLXR5cGVcIjogSXNOdGhTaWJsaW5nT2ZUeXBlQWN0aW9uLFxuICBcIm50aC1sYXN0LWNoaWxkXCI6IElzTnRoTGFzdFNpYmxpbmdBY3Rpb24sXG4gIFwibnRoLWxhc3Qtb2YtdHlwZVwiOiBJc050aExhc3RTaWJsaW5nT2ZUeXBlQWN0aW9uLFxufTtcblxuZXhwb3J0IGxldCBjb25kaXRpb25Db3VudDogbnVtYmVyID0gMDtcblxuZXhwb3J0IGNsYXNzIE5vdFBhcmFtZXRlclBhcnNlckhhbmRsZXIgZXh0ZW5kcyBDYXNjYWRlUGFyc2VySGFuZGxlciB7XG4gIHBhcmVudENoYWluOiBDaGFpbmVkQWN0aW9uW107XG5cbiAgY29uc3RydWN0b3IocHVibGljIHJlYWRvbmx5IHBhcmVudDogQ2FzY2FkZVBhcnNlckhhbmRsZXIpIHtcbiAgICBzdXBlcihcbiAgICAgIHBhcmVudC5zY29wZSxcbiAgICAgIHBhcmVudC5vd25lcixcbiAgICAgIHBhcmVudC5jb25kaXRpb24sXG4gICAgICBwYXJlbnQsXG4gICAgICBwYXJlbnQucmVnaW9uSWQsXG4gICAgICBwYXJlbnQudmFsaWRhdG9yU2V0LFxuICAgICAgZmFsc2UsXG4gICAgKTtcbiAgICB0aGlzLnBhcmVudENoYWluID0gcGFyZW50LmNoYWluO1xuICB9XG5cbiAgLyoqXG4gICAqIEBvdmVycmlkZVxuICAgKi9cbiAgc3RhcnRGdW5jV2l0aFNlbGVjdG9yKGZ1bmNOYW1lOiBzdHJpbmcpOiB2b2lkIHtcbiAgICBpZiAoZnVuY05hbWUgPT0gXCJub3RcIikge1xuICAgICAgdGhpcy5yZXBvcnRBbmRTa2lwKFwiRV9DU1NfVU5FWFBFQ1RFRF9OT1RcIik7XG4gICAgfVxuICB9XG5cbiAgLyoqXG4gICAqIEBvdmVycmlkZVxuICAgKi9cbiAgc3RhcnRSdWxlQm9keSgpOiB2b2lkIHtcbiAgICB0aGlzLnJlcG9ydEFuZFNraXAoXCJFX0NTU19VTkVYUEVDVEVEX1JVTEVfQk9EWVwiKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBAb3ZlcnJpZGVcbiAgICovXG4gIG5leHRTZWxlY3RvcigpOiB2b2lkIHtcbiAgICB0aGlzLnJlcG9ydEFuZFNraXAoXCJFX0NTU19VTkVYUEVDVEVEX05FWFRfU0VMRUNUT1JcIik7XG4gIH1cblxuICAvKipcbiAgICogQG92ZXJyaWRlXG4gICAqL1xuICBlbmRGdW5jV2l0aFNlbGVjdG9yKCk6IHZvaWQge1xuICAgIGlmICh0aGlzLmNoYWluICYmIHRoaXMuY2hhaW4ubGVuZ3RoID4gMCkge1xuICAgICAgdGhpcy5wYXJlbnRDaGFpbi5wdXNoKG5ldyBOZWdhdGVBY3Rpb25zU2V0KHRoaXMuY2hhaW4pKTtcbiAgICB9XG4gICAgdGhpcy5wYXJlbnQuc3BlY2lmaWNpdHkgKz0gdGhpcy5zcGVjaWZpY2l0eTtcbiAgICB0aGlzLm93bmVyLnBvcEhhbmRsZXIoKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBAb3ZlcnJpZGVcbiAgICovXG4gIGVycm9yKG1uZW1vbmljczogc3RyaW5nLCB0b2tlbjogQ3NzVG9rZW5pemVyLlRva2VuKTogdm9pZCB7XG4gICAgc3VwZXIuZXJyb3IobW5lbW9uaWNzLCB0b2tlbik7XG4gICAgdGhpcy5vd25lci5wb3BIYW5kbGVyKCk7XG4gIH1cbn1cblxuLyoqXG4gKiBAb3ZlcnJpZGVcbiAqL1xuZXhwb3J0IGNsYXNzIERlZmluZVBhcnNlckhhbmRsZXIgZXh0ZW5kcyBDc3NQYXJzZXIuU2xhdmVQYXJzZXJIYW5kbGVyIHtcbiAgY29uc3RydWN0b3IoXG4gICAgc2NvcGU6IEV4cHJzLkxleGljYWxTY29wZSxcbiAgICBvd25lcjogQ3NzUGFyc2VyLkRpc3BhdGNoUGFyc2VySGFuZGxlcixcbiAgKSB7XG4gICAgc3VwZXIoc2NvcGUsIG93bmVyLCBmYWxzZSk7XG4gIH1cblxuICAvKipcbiAgICogQG92ZXJyaWRlXG4gICAqL1xuICBwcm9wZXJ0eShuYW1lOiBzdHJpbmcsIHZhbHVlOiBDc3MuVmFsLCBpbXBvcnRhbnQ6IGJvb2xlYW4pOiB2b2lkIHtcbiAgICBpZiAodGhpcy5zY29wZS52YWx1ZXNbbmFtZV0pIHtcbiAgICAgIHRoaXMuZXJyb3IoYEVfQ1NTX05BTUVfUkVERUZJTkVEICR7bmFtZX1gLCB0aGlzLmdldEN1cnJlbnRUb2tlbigpKTtcbiAgICB9IGVsc2Uge1xuICAgICAgY29uc3QgdW5pdCA9IG5hbWUubWF0Y2goL2hlaWdodHxeKHRvcHxib3R0b20pJC8pID8gXCJ2aFwiIDogXCJ2d1wiO1xuICAgICAgY29uc3QgZGltID0gbmV3IEV4cHJzLk51bWVyaWModGhpcy5zY29wZSwgMTAwLCB1bml0KTtcbiAgICAgIHRoaXMuc2NvcGUuZGVmaW5lTmFtZShuYW1lLCB2YWx1ZS50b0V4cHIodGhpcy5zY29wZSwgZGltKSk7XG4gICAgfVxuICB9XG59XG5cbmV4cG9ydCBjbGFzcyBQcm9wU2V0UGFyc2VySGFuZGxlclxuICBleHRlbmRzIENzc1BhcnNlci5TbGF2ZVBhcnNlckhhbmRsZXJcbiAgaW1wbGVtZW50cyBDc3NWYWxpZGF0b3IuUHJvcGVydHlSZWNlaXZlciB7XG4gIG9yZGVyOiBudW1iZXI7XG5cbiAgY29uc3RydWN0b3IoXG4gICAgc2NvcGU6IEV4cHJzLkxleGljYWxTY29wZSxcbiAgICBvd25lcjogQ3NzUGFyc2VyLkRpc3BhdGNoUGFyc2VySGFuZGxlcixcbiAgICBwdWJsaWMgcmVhZG9ubHkgY29uZGl0aW9uOiBFeHBycy5WYWwsXG4gICAgcHVibGljIHJlYWRvbmx5IGVsZW1lbnRTdHlsZTogRWxlbWVudFN0eWxlLFxuICAgIHB1YmxpYyByZWFkb25seSB2YWxpZGF0b3JTZXQ6IENzc1ZhbGlkYXRvci5WYWxpZGF0b3JTZXQsXG4gICkge1xuICAgIHN1cGVyKHNjb3BlLCBvd25lciwgZmFsc2UpO1xuICAgIHRoaXMub3JkZXIgPSAwO1xuICB9XG5cbiAgLyoqXG4gICAqIEBvdmVycmlkZVxuICAgKi9cbiAgcHJvcGVydHkobmFtZTogc3RyaW5nLCB2YWx1ZTogQ3NzLlZhbCwgaW1wb3J0YW50OiBib29sZWFuKTogdm9pZCB7XG4gICAgaWYgKGltcG9ydGFudCkge1xuICAgICAgTG9nZ2luZy5sb2dnZXIud2FybihcIkVfSU1QT1JUQU5UX05PVF9BTExPV0VEXCIpO1xuICAgIH0gZWxzZSB7XG4gICAgICB0aGlzLnZhbGlkYXRvclNldC52YWxpZGF0ZVByb3BlcnR5QW5kSGFuZGxlU2hvcnRoYW5kKFxuICAgICAgICBuYW1lLFxuICAgICAgICB2YWx1ZSxcbiAgICAgICAgaW1wb3J0YW50LFxuICAgICAgICB0aGlzLFxuICAgICAgKTtcbiAgICB9XG4gIH1cblxuICAvKipcbiAgICogQG92ZXJyaWRlXG4gICAqL1xuICBpbnZhbGlkUHJvcGVydHlWYWx1ZShuYW1lOiBzdHJpbmcsIHZhbHVlOiBDc3MuVmFsKTogdm9pZCB7XG4gICAgTG9nZ2luZy5sb2dnZXIud2FybihcbiAgICAgIFwiRV9JTlZBTElEX1BST1BFUlRZX1ZBTFVFXCIsXG4gICAgICBgJHtuYW1lfTpgLFxuICAgICAgdmFsdWUudG9TdHJpbmcoKSxcbiAgICApO1xuICB9XG5cbiAgLyoqXG4gICAqIEBvdmVycmlkZVxuICAgKi9cbiAgdW5rbm93blByb3BlcnR5KG5hbWU6IHN0cmluZywgdmFsdWU6IENzcy5WYWwpOiB2b2lkIHtcbiAgICBMb2dnaW5nLmxvZ2dlci53YXJuKFwiRV9JTlZBTElEX1BST1BFUlRZXCIsIGAke25hbWV9OmAsIHZhbHVlLnRvU3RyaW5nKCkpO1xuICB9XG5cbiAgLyoqXG4gICAqIEBvdmVycmlkZVxuICAgKi9cbiAgc2ltcGxlUHJvcGVydHkobmFtZTogc3RyaW5nLCB2YWx1ZTogQ3NzLlZhbCwgaW1wb3J0YW50KTogdm9pZCB7XG4gICAgbGV0IHNwZWNpZmljaXR5ID0gaW1wb3J0YW50XG4gICAgICA/IHRoaXMuZ2V0SW1wb3J0YW50U3BlY2lmaWNpdHkoKVxuICAgICAgOiB0aGlzLmdldEJhc2VTcGVjaWZpY2l0eSgpO1xuICAgIHNwZWNpZmljaXR5ICs9IHRoaXMub3JkZXI7XG4gICAgdGhpcy5vcmRlciArPSBPUkRFUl9JTkNSRU1FTlQ7XG4gICAgY29uc3QgYXYgPSB0aGlzLmNvbmRpdGlvblxuICAgICAgPyBuZXcgQ29uZGl0aW9uYWxDYXNjYWRlVmFsdWUodmFsdWUsIHNwZWNpZmljaXR5LCB0aGlzLmNvbmRpdGlvbilcbiAgICAgIDogbmV3IENhc2NhZGVWYWx1ZSh2YWx1ZSwgc3BlY2lmaWNpdHkpO1xuICAgIHNldFByb3AodGhpcy5lbGVtZW50U3R5bGUsIG5hbWUsIGF2KTtcbiAgfVxufVxuXG5leHBvcnQgY2xhc3MgUHJvcGVydHlQYXJzZXJIYW5kbGVyXG4gIGV4dGVuZHMgQ3NzUGFyc2VyLkVycm9ySGFuZGxlclxuICBpbXBsZW1lbnRzIENzc1ZhbGlkYXRvci5Qcm9wZXJ0eVJlY2VpdmVyIHtcbiAgZWxlbWVudFN0eWxlID0ge30gYXMgRWxlbWVudFN0eWxlO1xuICBvcmRlcjogbnVtYmVyID0gMDtcblxuICBjb25zdHJ1Y3RvcihcbiAgICBzY29wZTogRXhwcnMuTGV4aWNhbFNjb3BlLFxuICAgIHB1YmxpYyByZWFkb25seSB2YWxpZGF0b3JTZXQ6IENzc1ZhbGlkYXRvci5WYWxpZGF0b3JTZXQsXG4gICkge1xuICAgIHN1cGVyKHNjb3BlKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBAb3ZlcnJpZGVcbiAgICovXG4gIHByb3BlcnR5KG5hbWU6IHN0cmluZywgdmFsdWU6IENzcy5WYWwsIGltcG9ydGFudDogYm9vbGVhbik6IHZvaWQge1xuICAgIHRoaXMudmFsaWRhdG9yU2V0LnZhbGlkYXRlUHJvcGVydHlBbmRIYW5kbGVTaG9ydGhhbmQoXG4gICAgICBuYW1lLFxuICAgICAgdmFsdWUsXG4gICAgICBpbXBvcnRhbnQsXG4gICAgICB0aGlzLFxuICAgICk7XG4gIH1cblxuICAvKipcbiAgICogQG92ZXJyaWRlXG4gICAqL1xuICBpbnZhbGlkUHJvcGVydHlWYWx1ZShuYW1lOiBzdHJpbmcsIHZhbHVlOiBDc3MuVmFsKTogdm9pZCB7XG4gICAgTG9nZ2luZy5sb2dnZXIud2FybihcbiAgICAgIFwiRV9JTlZBTElEX1BST1BFUlRZX1ZBTFVFXCIsXG4gICAgICBgJHtuYW1lfTpgLFxuICAgICAgdmFsdWUudG9TdHJpbmcoKSxcbiAgICApO1xuICB9XG5cbiAgLyoqXG4gICAqIEBvdmVycmlkZVxuICAgKi9cbiAgdW5rbm93blByb3BlcnR5KG5hbWU6IHN0cmluZywgdmFsdWU6IENzcy5WYWwpOiB2b2lkIHtcbiAgICBMb2dnaW5nLmxvZ2dlci53YXJuKFwiRV9JTlZBTElEX1BST1BFUlRZXCIsIGAke25hbWV9OmAsIHZhbHVlLnRvU3RyaW5nKCkpO1xuICB9XG5cbiAgLyoqXG4gICAqIEBvdmVycmlkZVxuICAgKi9cbiAgc2ltcGxlUHJvcGVydHkobmFtZTogc3RyaW5nLCB2YWx1ZTogQ3NzLlZhbCwgaW1wb3J0YW50KTogdm9pZCB7XG4gICAgbGV0IHNwZWNpZmljaXR5ID0gaW1wb3J0YW50XG4gICAgICA/IENzc1BhcnNlci5TUEVDSUZJQ0lUWV9TVFlMRV9JTVBPUlRBTlRcbiAgICAgIDogQ3NzUGFyc2VyLlNQRUNJRklDSVRZX1NUWUxFO1xuICAgIHNwZWNpZmljaXR5ICs9IHRoaXMub3JkZXI7XG4gICAgdGhpcy5vcmRlciArPSBPUkRFUl9JTkNSRU1FTlQ7XG4gICAgY29uc3QgY2FzY3ZhbCA9IG5ldyBDYXNjYWRlVmFsdWUodmFsdWUsIHNwZWNpZmljaXR5KTtcbiAgICBzZXRQcm9wKHRoaXMuZWxlbWVudFN0eWxlLCBuYW1lLCBjYXNjdmFsKTtcbiAgfVxufVxuXG5leHBvcnQgZnVuY3Rpb24gZm9yRWFjaFZpZXdDb25kaXRpb25hbFN0eWxlcyhcbiAgc3R5bGU6IEVsZW1lbnRTdHlsZSxcbiAgY2FsbGJhY2s6IChwMTogRWxlbWVudFN0eWxlKSA9PiBhbnksXG4pOiB2b2lkIHtcbiAgY29uc3Qgdmlld0NvbmRpdGlvbmFsU3R5bGVzID0gZ2V0Vmlld0NvbmRpdGlvbmFsU3R5bGVNYXAoc3R5bGUpO1xuICBpZiAoIXZpZXdDb25kaXRpb25hbFN0eWxlcykge1xuICAgIHJldHVybjtcbiAgfVxuICB2aWV3Q29uZGl0aW9uYWxTdHlsZXMuZm9yRWFjaCgoZW50cnkpID0+IHtcbiAgICBpZiAoIWVudHJ5Lm1hdGNoZXIubWF0Y2hlcygpKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIGNhbGxiYWNrKGVudHJ5LnN0eWxlcyk7XG4gIH0pO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gbWVyZ2VWaWV3Q29uZGl0aW9uYWxTdHlsZXMoXG4gIGNhc2NNYXA6IHsgW2tleTogc3RyaW5nXTogQ2FzY2FkZVZhbHVlIH0sXG4gIGNvbnRleHQ6IEV4cHJzLkNvbnRleHQsXG4gIHN0eWxlOiBFbGVtZW50U3R5bGUsXG4pOiB2b2lkIHtcbiAgZm9yRWFjaFZpZXdDb25kaXRpb25hbFN0eWxlcyhzdHlsZSwgKHZpZXdDb25kaXRpb25hbFN0eWxlcykgPT4ge1xuICAgIG1lcmdlU3R5bGUoY2FzY01hcCwgdmlld0NvbmRpdGlvbmFsU3R5bGVzLCBjb250ZXh0KTtcbiAgfSk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBwYXJzZVN0eWxlQXR0cmlidXRlKFxuICBzY29wZTogRXhwcnMuTGV4aWNhbFNjb3BlLFxuICB2YWxpZGF0b3JTZXQ6IENzc1ZhbGlkYXRvci5WYWxpZGF0b3JTZXQsXG4gIGJhc2VVUkw6IHN0cmluZyxcbiAgc3R5bGVBdHRyVmFsdWU6IHN0cmluZyxcbik6IEVsZW1lbnRTdHlsZSB7XG4gIGNvbnN0IGhhbmRsZXIgPSBuZXcgUHJvcGVydHlQYXJzZXJIYW5kbGVyKHNjb3BlLCB2YWxpZGF0b3JTZXQpO1xuICBjb25zdCB0b2tlbml6ZXIgPSBuZXcgQ3NzVG9rZW5pemVyLlRva2VuaXplcihzdHlsZUF0dHJWYWx1ZSwgaGFuZGxlcik7XG4gIHRyeSB7XG4gICAgQ3NzUGFyc2VyLnBhcnNlU3R5bGVBdHRyaWJ1dGUodG9rZW5pemVyLCBoYW5kbGVyLCBiYXNlVVJMKTtcbiAgfSBjYXRjaCAoZXJyKSB7XG4gICAgTG9nZ2luZy5sb2dnZXIud2FybihlcnIsIFwiU3R5bGUgYXR0cmlidXRlIHBhcnNlIGVycm9yOlwiKTtcbiAgfVxuICByZXR1cm4gaGFuZGxlci5lbGVtZW50U3R5bGU7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBpc1ZlcnRpY2FsKFxuICBjYXNjYWRlZDogeyBba2V5OiBzdHJpbmddOiBDYXNjYWRlVmFsdWUgfSxcbiAgY29udGV4dDogRXhwcnMuQ29udGV4dCxcbiAgdmVydGljYWw6IGJvb2xlYW4sXG4pOiBib29sZWFuIHtcbiAgY29uc3Qgd3JpdGluZ01vZGVDYXNjID0gY2FzY2FkZWRbXCJ3cml0aW5nLW1vZGVcIl07XG4gIGlmICh3cml0aW5nTW9kZUNhc2MpIHtcbiAgICBjb25zdCB3cml0aW5nTW9kZSA9IHdyaXRpbmdNb2RlQ2FzYy5ldmFsdWF0ZShjb250ZXh0LCBcIndyaXRpbmctbW9kZVwiKTtcbiAgICBpZiAod3JpdGluZ01vZGUgJiYgd3JpdGluZ01vZGUgIT09IENzcy5pZGVudC5pbmhlcml0KSB7XG4gICAgICByZXR1cm4gd3JpdGluZ01vZGUgPT09IENzcy5pZGVudC52ZXJ0aWNhbF9ybDtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIHZlcnRpY2FsO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gaXNSdGwoXG4gIGNhc2NhZGVkOiB7IFtrZXk6IHN0cmluZ106IENhc2NhZGVWYWx1ZSB9LFxuICBjb250ZXh0OiBFeHBycy5Db250ZXh0LFxuICBydGw6IGJvb2xlYW4sXG4pOiBib29sZWFuIHtcbiAgY29uc3QgZGlyZWN0aW9uQ2FzYyA9IGNhc2NhZGVkW1wiZGlyZWN0aW9uXCJdO1xuICBpZiAoZGlyZWN0aW9uQ2FzYykge1xuICAgIGNvbnN0IGRpcmVjdGlvbiA9IGRpcmVjdGlvbkNhc2MuZXZhbHVhdGUoY29udGV4dCwgXCJkaXJlY3Rpb25cIik7XG4gICAgaWYgKGRpcmVjdGlvbiAmJiBkaXJlY3Rpb24gIT09IENzcy5pZGVudC5pbmhlcml0KSB7XG4gICAgICByZXR1cm4gZGlyZWN0aW9uID09PSBDc3MuaWRlbnQucnRsO1xuICAgIH1cbiAgfVxuICByZXR1cm4gcnRsO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gZmxhdHRlbkNhc2NhZGVkU3R5bGUoXG4gIHN0eWxlOiBFbGVtZW50U3R5bGUsXG4gIGNvbnRleHQ6IEV4cHJzLkNvbnRleHQsXG4gIHJlZ2lvbklkczogc3RyaW5nW10sXG4gIGlzRm9vdG5vdGU6IGJvb2xlYW4sXG4gIG5vZGVDb250ZXh0OiBWdHJlZS5Ob2RlQ29udGV4dCxcbik6IHsgW2tleTogc3RyaW5nXTogQ2FzY2FkZVZhbHVlIH0ge1xuICBjb25zdCBjYXNjTWFwID0ge30gYXMgeyBba2V5OiBzdHJpbmddOiBDYXNjYWRlVmFsdWUgfTtcbiAgZm9yIChjb25zdCBuIGluIHN0eWxlKSB7XG4gICAgaWYgKGlzUHJvcE5hbWUobikpIHtcbiAgICAgIGNhc2NNYXBbbl0gPSBnZXRQcm9wKHN0eWxlLCBuKTtcbiAgICB9XG4gIH1cbiAgbWVyZ2VWaWV3Q29uZGl0aW9uYWxTdHlsZXMoY2FzY01hcCwgY29udGV4dCwgc3R5bGUpO1xuICBmb3JFYWNoU3R5bGVzSW5SZWdpb24oXG4gICAgc3R5bGUsXG4gICAgcmVnaW9uSWRzLFxuICAgIGlzRm9vdG5vdGUsXG4gICAgKHJlZ2lvbklkLCByZWdpb25TdHlsZSkgPT4ge1xuICAgICAgbWVyZ2VTdHlsZShjYXNjTWFwLCByZWdpb25TdHlsZSwgY29udGV4dCk7XG4gICAgICBtZXJnZVZpZXdDb25kaXRpb25hbFN0eWxlcyhjYXNjTWFwLCBjb250ZXh0LCByZWdpb25TdHlsZSk7XG4gICAgfSxcbiAgKTtcbiAgcmV0dXJuIGNhc2NNYXA7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBmb3JFYWNoU3R5bGVzSW5SZWdpb24oXG4gIHN0eWxlOiBFbGVtZW50U3R5bGUsXG4gIHJlZ2lvbklkczogc3RyaW5nW10sXG4gIGlzRm9vdG5vdGU6IGJvb2xlYW4sXG4gIGNhbGxiYWNrOiAocDE6IHN0cmluZywgcDI6IEVsZW1lbnRTdHlsZSkgPT4gYW55LFxuKTogdm9pZCB7XG4gIGNvbnN0IHJlZ2lvbnMgPSBnZXRTdHlsZU1hcChzdHlsZSwgXCJfcmVnaW9uc1wiKTtcbiAgaWYgKChyZWdpb25JZHMgfHwgaXNGb290bm90ZSkgJiYgcmVnaW9ucykge1xuICAgIGlmIChpc0Zvb3Rub3RlKSB7XG4gICAgICBjb25zdCBmb290bm90ZVJlZ2lvbiA9IFtcImZvb3Rub3RlXCJdO1xuICAgICAgaWYgKCFyZWdpb25JZHMpIHtcbiAgICAgICAgcmVnaW9uSWRzID0gZm9vdG5vdGVSZWdpb247XG4gICAgICB9IGVsc2Uge1xuICAgICAgICByZWdpb25JZHMgPSByZWdpb25JZHMuY29uY2F0KGZvb3Rub3RlUmVnaW9uKTtcbiAgICAgIH1cbiAgICB9XG4gICAgZm9yIChjb25zdCByZWdpb25JZCBvZiByZWdpb25JZHMpIHtcbiAgICAgIGNvbnN0IHJlZ2lvblN0eWxlID0gcmVnaW9uc1tyZWdpb25JZF07XG4gICAgICBpZiAocmVnaW9uU3R5bGUpIHtcbiAgICAgICAgY2FsbGJhY2socmVnaW9uSWQsIHJlZ2lvblN0eWxlKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cbn1cblxuZXhwb3J0IGZ1bmN0aW9uIG1lcmdlU3R5bGUoXG4gIHRvOiB7IFtrZXk6IHN0cmluZ106IENhc2NhZGVWYWx1ZSB9LFxuICBmcm9tOiBFbGVtZW50U3R5bGUsXG4gIGNvbnRleHQ6IEV4cHJzLkNvbnRleHQsXG4pOiB2b2lkIHtcbiAgZm9yIChjb25zdCBwcm9wZXJ0eSBpbiBmcm9tKSB7XG4gICAgaWYgKGlzUHJvcE5hbWUocHJvcGVydHkpKSB7XG4gICAgICBjb25zdCBuZXdWYWwgPSBnZXRQcm9wKGZyb20sIHByb3BlcnR5KTtcbiAgICAgIGNvbnN0IG9sZFZhbCA9IHRvW3Byb3BlcnR5XTtcbiAgICAgIHRvW3Byb3BlcnR5XSA9IGNhc2NhZGVWYWx1ZXMoY29udGV4dCwgb2xkVmFsLCBuZXdWYWwgYXMgQ2FzY2FkZVZhbHVlKTtcbiAgICB9XG4gIH1cbn1cblxuLyoqXG4gKiBDb252ZXJ0IGxvZ2ljYWwgcHJvcGVydGllcyB0byBwaHlzaWNhbCBvbmVzLCB0YWtpbmcgc3BlY2lmaWNpdHkgaW50byBhY2NvdW50LlxuICogQHBhcmFtIHNyYyBTb3VyY2UgcHJvcGVydGllcyBtYXBcbiAqIEBwYXJhbSBkZXN0IERlc3RpbmF0aW9uIG1hcFxuICogQHBhcmFtIHRyYW5zZm9ybSBJZiBzdXBwbGllZCwgcHJvcGVydHkgdmFsdWVzIGFyZSB0cmFuc2Zvcm1lZCBieSB0aGlzXG4gKiAgICAgZnVuY3Rpb24gYmVmb3JlIGluc2VydGVkIGludG8gdGhlIGRlc3RpbmF0aW9uIG1hcC4gVGhlIGZpcnN0IHBhcmFtZXRlciBpc1xuICogICAgIHRoZSBwcm9wZXJ0eSBuYW1lIGFuZCB0aGUgc2Vjb25kIG9uZSBpcyB0aGUgcHJvcGVydHkgdmFsdWUuXG4gKiBAdGVtcGxhdGUgVFxuICovXG5leHBvcnQgY29uc3QgY29udmVydFRvUGh5c2ljYWwgPSA8VD4oXG4gIHNyYzogeyBba2V5OiBzdHJpbmddOiBDYXNjYWRlVmFsdWUgfSxcbiAgZGVzdDogeyBba2V5OiBzdHJpbmddOiBUIH0sXG4gIHZlcnRpY2FsOiBib29sZWFuLFxuICBydGw6IGJvb2xlYW4sXG4gIHRyYW5zZm9ybTogKHAxOiBzdHJpbmcsIHAyOiBDYXNjYWRlVmFsdWUpID0+IFQsXG4pID0+IHtcbiAgY29uc3QgY291cGxpbmdNYXAgPSB2ZXJ0aWNhbFxuICAgID8gcnRsXG4gICAgICA/IGNvdXBsaW5nTWFwVmVydFJ0bFxuICAgICAgOiBjb3VwbGluZ01hcFZlcnRcbiAgICA6IHJ0bFxuICAgID8gY291cGxpbmdNYXBIb3JSdGxcbiAgICA6IGNvdXBsaW5nTWFwSG9yO1xuICBmb3IgKGNvbnN0IHByb3BOYW1lIGluIHNyYykge1xuICAgIGlmIChzcmMuaGFzT3duUHJvcGVydHkocHJvcE5hbWUpKSB7XG4gICAgICBjb25zdCBjYXNjVmFsID0gc3JjW3Byb3BOYW1lXTtcbiAgICAgIGlmICghY2FzY1ZhbCkge1xuICAgICAgICBjb250aW51ZTtcbiAgICAgIH1cbiAgICAgIGNvbnN0IGNvdXBsZWROYW1lID0gY291cGxpbmdNYXBbcHJvcE5hbWVdO1xuICAgICAgbGV0IHRhcmdldE5hbWU6IHN0cmluZztcbiAgICAgIGlmIChjb3VwbGVkTmFtZSkge1xuICAgICAgICBjb25zdCBjb3VwbGVkQ2FzY1ZhbCA9IHNyY1tjb3VwbGVkTmFtZV07XG4gICAgICAgIGlmIChjb3VwbGVkQ2FzY1ZhbCAmJiBjb3VwbGVkQ2FzY1ZhbC5wcmlvcml0eSA+IGNhc2NWYWwucHJpb3JpdHkpIHtcbiAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgfVxuICAgICAgICB0YXJnZXROYW1lID0gZ2VvbU5hbWVzW2NvdXBsZWROYW1lXSA/IGNvdXBsZWROYW1lIDogcHJvcE5hbWU7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB0YXJnZXROYW1lID0gcHJvcE5hbWU7XG4gICAgICB9XG4gICAgICBkZXN0W3RhcmdldE5hbWVdID0gdHJhbnNmb3JtKHByb3BOYW1lLCBjYXNjVmFsKTtcbiAgICB9XG4gIH1cbn07XG4iLCIvKipcbiAqIENvcHlyaWdodCAyMDE1IFRyaW0tbWFya3MgSW5jLlxuICogQ29weXJpZ2h0IDIwMTkgVml2bGlvc3R5bGUgRm91bmRhdGlvblxuICpcbiAqIFZpdmxpb3N0eWxlLmpzIGlzIGZyZWUgc29mdHdhcmU6IHlvdSBjYW4gcmVkaXN0cmlidXRlIGl0IGFuZC9vciBtb2RpZnlcbiAqIGl0IHVuZGVyIHRoZSB0ZXJtcyBvZiB0aGUgR05VIEFmZmVybyBHZW5lcmFsIFB1YmxpYyBMaWNlbnNlIGFzIHB1Ymxpc2hlZCBieVxuICogdGhlIEZyZWUgU29mdHdhcmUgRm91bmRhdGlvbiwgZWl0aGVyIHZlcnNpb24gMyBvZiB0aGUgTGljZW5zZSwgb3JcbiAqIChhdCB5b3VyIG9wdGlvbikgYW55IGxhdGVyIHZlcnNpb24uXG4gKlxuICogVml2bGlvc3R5bGUuanMgaXMgZGlzdHJpYnV0ZWQgaW4gdGhlIGhvcGUgdGhhdCBpdCB3aWxsIGJlIHVzZWZ1bCxcbiAqIGJ1dCBXSVRIT1VUIEFOWSBXQVJSQU5UWTsgd2l0aG91dCBldmVuIHRoZSBpbXBsaWVkIHdhcnJhbnR5IG9mXG4gKiBNRVJDSEFOVEFCSUxJVFkgb3IgRklUTkVTUyBGT1IgQSBQQVJUSUNVTEFSIFBVUlBPU0UuICBTZWUgdGhlXG4gKiBHTlUgQWZmZXJvIEdlbmVyYWwgUHVibGljIExpY2Vuc2UgZm9yIG1vcmUgZGV0YWlscy5cbiAqXG4gKiBZb3Ugc2hvdWxkIGhhdmUgcmVjZWl2ZWQgYSBjb3B5IG9mIHRoZSBHTlUgQWZmZXJvIEdlbmVyYWwgUHVibGljIExpY2Vuc2VcbiAqIGFsb25nIHdpdGggVml2bGlvc3R5bGUuanMuICBJZiBub3QsIHNlZSA8aHR0cDovL3d3dy5nbnUub3JnL2xpY2Vuc2VzLz4uXG4gKlxuICogQGZpbGVvdmVydmlldyBDc3NMb2dpY2FsVXRpbCAtIFV0aWxpdGllcyByZWxhdGVkIHRvIENTUyBMb2dpY2FsIFByb3BlcnRpZXMgYW5kIFZhbHVlcyBodHRwczovL2RyYWZ0cy5jc3N3Zy5vcmcvY3NzLWxvZ2ljYWwvXG4gKi9cbnR5cGUgQ29udmVyc2lvbk1hcCA9IHtcbiAgcmVnZXhwOiBSZWdFeHA7XG4gIHRvOiBzdHJpbmc7XG59O1xuXG5mdW5jdGlvbiBjcmVhdGVSZWdFeHBNYXAoXG4gIHZhbHVlTWFwczoge1xuICAgIFtrZXk6IHN0cmluZ106IHsgW2tleTogc3RyaW5nXTogeyBsb2dpY2FsOiBzdHJpbmc7IHBoeXNpY2FsOiBzdHJpbmcgfVtdIH07XG4gIH0sXG4gIHRvUGh5c2ljYWw6IGJvb2xlYW4sXG4pOiB7IFtrZXk6IHN0cmluZ106IHsgW2tleTogc3RyaW5nXTogQ29udmVyc2lvbk1hcFtdIH0gfSB7XG4gIGNvbnN0IG1hcCA9IHt9O1xuICBPYmplY3Qua2V5cyh2YWx1ZU1hcHMgYXMgb2JqZWN0KS5mb3JFYWNoKCh3cml0aW5nTW9kZSkgPT4ge1xuICAgIGNvbnN0IGRlc3QgPSAobWFwW3dyaXRpbmdNb2RlXSA9IHt9KTtcbiAgICBjb25zdCBzcmMgPSB2YWx1ZU1hcHNbd3JpdGluZ01vZGVdO1xuICAgIE9iamVjdC5rZXlzKHNyYyBhcyBvYmplY3QpLmZvckVhY2goKGRpcmVjdGlvbikgPT4ge1xuICAgICAgZGVzdFtkaXJlY3Rpb25dID0gc3JjW2RpcmVjdGlvbl0ubWFwKChwKSA9PiB7XG4gICAgICAgIGNvbnN0IGZyb20gPSB0b1BoeXNpY2FsID8gcC5sb2dpY2FsIDogcC5waHlzaWNhbDtcbiAgICAgICAgY29uc3QgdG8gPSB0b1BoeXNpY2FsID8gcC5waHlzaWNhbCA6IHAubG9naWNhbDtcbiAgICAgICAgcmV0dXJuIHsgcmVnZXhwOiBuZXcgUmVnRXhwKGAoLT8pJHtmcm9tfSgtPylgKSwgdG86IGBcXCQxJHt0b31cXCQyYCB9O1xuICAgICAgfSk7XG4gICAgfSk7XG4gIH0pO1xuICByZXR1cm4gbWFwO1xufVxuXG5mdW5jdGlvbiBjb252ZXJ0KFxuICB2YWx1ZTogc3RyaW5nLFxuICB3cml0aW5nTW9kZTogc3RyaW5nLFxuICBkaXJlY3Rpb246IHN0cmluZyB8IG51bGwsXG4gIG1hcHM6IHsgW2tleTogc3RyaW5nXTogeyBba2V5OiBzdHJpbmddOiBDb252ZXJzaW9uTWFwW10gfSB9LFxuKTogc3RyaW5nIHtcbiAgY29uc3QgbWFwczIgPSBtYXBzW3dyaXRpbmdNb2RlXTtcbiAgaWYgKCFtYXBzMikge1xuICAgIHRocm93IG5ldyBFcnJvcihgdW5rbm93biB3cml0aW5nLW1vZGU6ICR7d3JpdGluZ01vZGV9YCk7XG4gIH1cbiAgY29uc3QgbWFwID0gbWFwczJbZGlyZWN0aW9uIHx8IFwibHRyXCJdO1xuICBpZiAoIW1hcCkge1xuICAgIHRocm93IG5ldyBFcnJvcihgdW5rbm93biBkaXJlY3Rpb246ICR7ZGlyZWN0aW9ufWApO1xuICB9XG4gIGZvciAoY29uc3QgcCBvZiBtYXApIHtcbiAgICBjb25zdCByZXBsYWNlZCA9IHZhbHVlLnJlcGxhY2UocC5yZWdleHAsIHAudG8pO1xuICAgIGlmIChyZXBsYWNlZCAhPT0gdmFsdWUpIHtcbiAgICAgIHJldHVybiByZXBsYWNlZDtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIHZhbHVlO1xufVxuY29uc3QgdmFsdWVzOiB7XG4gIFtrZXk6IHN0cmluZ106IHsgW2tleTogc3RyaW5nXTogeyBsb2dpY2FsOiBzdHJpbmc7IHBoeXNpY2FsOiBzdHJpbmcgfVtdIH07XG59ID0ge1xuICBcImhvcml6b250YWwtdGJcIjoge1xuICAgIGx0cjogW1xuICAgICAgeyBsb2dpY2FsOiBcImlubGluZS1zdGFydFwiLCBwaHlzaWNhbDogXCJsZWZ0XCIgfSxcbiAgICAgIHsgbG9naWNhbDogXCJpbmxpbmUtZW5kXCIsIHBoeXNpY2FsOiBcInJpZ2h0XCIgfSxcbiAgICAgIHsgbG9naWNhbDogXCJibG9jay1zdGFydFwiLCBwaHlzaWNhbDogXCJ0b3BcIiB9LFxuICAgICAgeyBsb2dpY2FsOiBcImJsb2NrLWVuZFwiLCBwaHlzaWNhbDogXCJib3R0b21cIiB9LFxuICAgICAgeyBsb2dpY2FsOiBcImlubGluZS1zaXplXCIsIHBoeXNpY2FsOiBcIndpZHRoXCIgfSxcbiAgICAgIHsgbG9naWNhbDogXCJibG9jay1zaXplXCIsIHBoeXNpY2FsOiBcImhlaWdodFwiIH0sXG4gICAgXSxcbiAgICBydGw6IFtcbiAgICAgIHsgbG9naWNhbDogXCJpbmxpbmUtc3RhcnRcIiwgcGh5c2ljYWw6IFwicmlnaHRcIiB9LFxuICAgICAgeyBsb2dpY2FsOiBcImlubGluZS1lbmRcIiwgcGh5c2ljYWw6IFwibGVmdFwiIH0sXG4gICAgICB7IGxvZ2ljYWw6IFwiYmxvY2stc3RhcnRcIiwgcGh5c2ljYWw6IFwidG9wXCIgfSxcbiAgICAgIHsgbG9naWNhbDogXCJibG9jay1lbmRcIiwgcGh5c2ljYWw6IFwiYm90dG9tXCIgfSxcbiAgICAgIHsgbG9naWNhbDogXCJpbmxpbmUtc2l6ZVwiLCBwaHlzaWNhbDogXCJ3aWR0aFwiIH0sXG4gICAgICB7IGxvZ2ljYWw6IFwiYmxvY2stc2l6ZVwiLCBwaHlzaWNhbDogXCJoZWlnaHRcIiB9LFxuICAgIF0sXG4gIH0sXG4gIFwidmVydGljYWwtcmxcIjoge1xuICAgIGx0cjogW1xuICAgICAgeyBsb2dpY2FsOiBcImlubGluZS1zdGFydFwiLCBwaHlzaWNhbDogXCJ0b3BcIiB9LFxuICAgICAgeyBsb2dpY2FsOiBcImlubGluZS1lbmRcIiwgcGh5c2ljYWw6IFwiYm90dG9tXCIgfSxcbiAgICAgIHsgbG9naWNhbDogXCJibG9jay1zdGFydFwiLCBwaHlzaWNhbDogXCJyaWdodFwiIH0sXG4gICAgICB7IGxvZ2ljYWw6IFwiYmxvY2stZW5kXCIsIHBoeXNpY2FsOiBcImxlZnRcIiB9LFxuICAgICAgeyBsb2dpY2FsOiBcImlubGluZS1zaXplXCIsIHBoeXNpY2FsOiBcImhlaWdodFwiIH0sXG4gICAgICB7IGxvZ2ljYWw6IFwiYmxvY2stc2l6ZVwiLCBwaHlzaWNhbDogXCJ3aWR0aFwiIH0sXG4gICAgXSxcbiAgICBydGw6IFtcbiAgICAgIHsgbG9naWNhbDogXCJpbmxpbmUtc3RhcnRcIiwgcGh5c2ljYWw6IFwiYm90dG9tXCIgfSxcbiAgICAgIHsgbG9naWNhbDogXCJpbmxpbmUtZW5kXCIsIHBoeXNpY2FsOiBcInRvcFwiIH0sXG4gICAgICB7IGxvZ2ljYWw6IFwiYmxvY2stc3RhcnRcIiwgcGh5c2ljYWw6IFwicmlnaHRcIiB9LFxuICAgICAgeyBsb2dpY2FsOiBcImJsb2NrLWVuZFwiLCBwaHlzaWNhbDogXCJsZWZ0XCIgfSxcbiAgICAgIHsgbG9naWNhbDogXCJpbmxpbmUtc2l6ZVwiLCBwaHlzaWNhbDogXCJoZWlnaHRcIiB9LFxuICAgICAgeyBsb2dpY2FsOiBcImJsb2NrLXNpemVcIiwgcGh5c2ljYWw6IFwid2lkdGhcIiB9LFxuICAgIF0sXG4gIH0sXG4gIFwidmVydGljYWwtbHJcIjoge1xuICAgIGx0cjogW1xuICAgICAgeyBsb2dpY2FsOiBcImlubGluZS1zdGFydFwiLCBwaHlzaWNhbDogXCJ0b3BcIiB9LFxuICAgICAgeyBsb2dpY2FsOiBcImlubGluZS1lbmRcIiwgcGh5c2ljYWw6IFwiYm90dG9tXCIgfSxcbiAgICAgIHsgbG9naWNhbDogXCJibG9jay1zdGFydFwiLCBwaHlzaWNhbDogXCJsZWZ0XCIgfSxcbiAgICAgIHsgbG9naWNhbDogXCJibG9jay1lbmRcIiwgcGh5c2ljYWw6IFwicmlnaHRcIiB9LFxuICAgICAgeyBsb2dpY2FsOiBcImlubGluZS1zaXplXCIsIHBoeXNpY2FsOiBcImhlaWdodFwiIH0sXG4gICAgICB7IGxvZ2ljYWw6IFwiYmxvY2stc2l6ZVwiLCBwaHlzaWNhbDogXCJ3aWR0aFwiIH0sXG4gICAgXSxcbiAgICBydGw6IFtcbiAgICAgIHsgbG9naWNhbDogXCJpbmxpbmUtc3RhcnRcIiwgcGh5c2ljYWw6IFwiYm90dG9tXCIgfSxcbiAgICAgIHsgbG9naWNhbDogXCJpbmxpbmUtZW5kXCIsIHBoeXNpY2FsOiBcInRvcFwiIH0sXG4gICAgICB7IGxvZ2ljYWw6IFwiYmxvY2stc3RhcnRcIiwgcGh5c2ljYWw6IFwibGVmdFwiIH0sXG4gICAgICB7IGxvZ2ljYWw6IFwiYmxvY2stZW5kXCIsIHBoeXNpY2FsOiBcInJpZ2h0XCIgfSxcbiAgICAgIHsgbG9naWNhbDogXCJpbmxpbmUtc2l6ZVwiLCBwaHlzaWNhbDogXCJoZWlnaHRcIiB9LFxuICAgICAgeyBsb2dpY2FsOiBcImJsb2NrLXNpemVcIiwgcGh5c2ljYWw6IFwid2lkdGhcIiB9LFxuICAgIF0sXG4gIH0sXG59O1xuY29uc3QgdG9QaHlzaWNhbE1hcHMgPSBjcmVhdGVSZWdFeHBNYXAodmFsdWVzLCB0cnVlKTtcblxuZXhwb3J0IGZ1bmN0aW9uIHRvUGh5c2ljYWwoXG4gIHZhbHVlOiBzdHJpbmcsXG4gIHdyaXRpbmdNb2RlOiBzdHJpbmcsXG4gIGRpcmVjdGlvbj86IHN0cmluZyB8IG51bGwsXG4pOiBzdHJpbmcge1xuICByZXR1cm4gY29udmVydCh2YWx1ZSwgd3JpdGluZ01vZGUsIGRpcmVjdGlvbiB8fCBudWxsLCB0b1BoeXNpY2FsTWFwcyk7XG59XG5jb25zdCB0b0xvZ2ljYWxNYXBzID0gY3JlYXRlUmVnRXhwTWFwKHZhbHVlcywgZmFsc2UpO1xuXG5leHBvcnQgZnVuY3Rpb24gdG9Mb2dpY2FsKFxuICB2YWx1ZTogc3RyaW5nLFxuICB3cml0aW5nTW9kZTogc3RyaW5nLFxuICBkaXJlY3Rpb24/OiBzdHJpbmcgfCBudWxsLFxuKTogc3RyaW5nIHtcbiAgcmV0dXJuIGNvbnZlcnQodmFsdWUsIHdyaXRpbmdNb2RlLCBkaXJlY3Rpb24gfHwgbnVsbCwgdG9Mb2dpY2FsTWFwcyk7XG59XG5jb25zdCBsaW5lUmVsYXRpdmVWYWx1ZXM6IHtcbiAgW2tleTogc3RyaW5nXTogeyBsb2dpY2FsOiBzdHJpbmc7IHBoeXNpY2FsOiBzdHJpbmcgfVtdO1xufSA9IHtcbiAgXCJob3Jpem9udGFsLXRiXCI6IFtcbiAgICB7IGxvZ2ljYWw6IFwibGluZS1sZWZ0XCIsIHBoeXNpY2FsOiBcImxlZnRcIiB9LFxuICAgIHsgbG9naWNhbDogXCJsaW5lLXJpZ2h0XCIsIHBoeXNpY2FsOiBcInJpZ2h0XCIgfSxcbiAgICB7IGxvZ2ljYWw6IFwib3ZlclwiLCBwaHlzaWNhbDogXCJ0b3BcIiB9LFxuICAgIHsgbG9naWNhbDogXCJ1bmRlclwiLCBwaHlzaWNhbDogXCJib3R0b21cIiB9LFxuICBdLFxuICBcInZlcnRpY2FsLXJsXCI6IFtcbiAgICB7IGxvZ2ljYWw6IFwibGluZS1sZWZ0XCIsIHBoeXNpY2FsOiBcInRvcFwiIH0sXG4gICAgeyBsb2dpY2FsOiBcImxpbmUtcmlnaHRcIiwgcGh5c2ljYWw6IFwiYm90dG9tXCIgfSxcbiAgICB7IGxvZ2ljYWw6IFwib3ZlclwiLCBwaHlzaWNhbDogXCJyaWdodFwiIH0sXG4gICAgeyBsb2dpY2FsOiBcInVuZGVyXCIsIHBoeXNpY2FsOiBcImxlZnRcIiB9LFxuICBdLFxuICBcInZlcnRpY2FsLWxyXCI6IFtcbiAgICB7IGxvZ2ljYWw6IFwibGluZS1sZWZ0XCIsIHBoeXNpY2FsOiBcInRvcFwiIH0sXG4gICAgeyBsb2dpY2FsOiBcImxpbmUtcmlnaHRcIiwgcGh5c2ljYWw6IFwiYm90dG9tXCIgfSxcbiAgICB7IGxvZ2ljYWw6IFwib3ZlclwiLCBwaHlzaWNhbDogXCJyaWdodFwiIH0sXG4gICAgeyBsb2dpY2FsOiBcInVuZGVyXCIsIHBoeXNpY2FsOiBcImxlZnRcIiB9LFxuICBdLFxufTtcblxuZXhwb3J0IGZ1bmN0aW9uIHRvTGluZVJlbGF0aXZlKHZhbHVlOiBzdHJpbmcsIHdyaXRpbmdNb2RlOiBzdHJpbmcpOiBzdHJpbmcge1xuICBjb25zdCBtYXBzID0gbGluZVJlbGF0aXZlVmFsdWVzW3dyaXRpbmdNb2RlXTtcbiAgaWYgKCFtYXBzKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKGB1bmtub3duIHdyaXRpbmctbW9kZTogJHt3cml0aW5nTW9kZX1gKTtcbiAgfVxuICBmb3IgKGxldCBpID0gMDsgaSA8IG1hcHMubGVuZ3RoOyBpKyspIHtcbiAgICBpZiAobWFwc1tpXS5waHlzaWNhbCA9PT0gdmFsdWUpIHtcbiAgICAgIHJldHVybiBtYXBzW2ldLmxvZ2ljYWw7XG4gICAgfVxuICB9XG4gIHJldHVybiB2YWx1ZTtcbn1cbiIsIi8qKlxuICogQ29weXJpZ2h0IDIwMTUgVHJpbS1tYXJrcyBJbmMuXG4gKiBDb3B5cmlnaHQgMjAxOSBWaXZsaW9zdHlsZSBGb3VuZGF0aW9uXG4gKlxuICogVml2bGlvc3R5bGUuanMgaXMgZnJlZSBzb2Z0d2FyZTogeW91IGNhbiByZWRpc3RyaWJ1dGUgaXQgYW5kL29yIG1vZGlmeVxuICogaXQgdW5kZXIgdGhlIHRlcm1zIG9mIHRoZSBHTlUgQWZmZXJvIEdlbmVyYWwgUHVibGljIExpY2Vuc2UgYXMgcHVibGlzaGVkIGJ5XG4gKiB0aGUgRnJlZSBTb2Z0d2FyZSBGb3VuZGF0aW9uLCBlaXRoZXIgdmVyc2lvbiAzIG9mIHRoZSBMaWNlbnNlLCBvclxuICogKGF0IHlvdXIgb3B0aW9uKSBhbnkgbGF0ZXIgdmVyc2lvbi5cbiAqXG4gKiBWaXZsaW9zdHlsZS5qcyBpcyBkaXN0cmlidXRlZCBpbiB0aGUgaG9wZSB0aGF0IGl0IHdpbGwgYmUgdXNlZnVsLFxuICogYnV0IFdJVEhPVVQgQU5ZIFdBUlJBTlRZOyB3aXRob3V0IGV2ZW4gdGhlIGltcGxpZWQgd2FycmFudHkgb2ZcbiAqIE1FUkNIQU5UQUJJTElUWSBvciBGSVRORVNTIEZPUiBBIFBBUlRJQ1VMQVIgUFVSUE9TRS4gIFNlZSB0aGVcbiAqIEdOVSBBZmZlcm8gR2VuZXJhbCBQdWJsaWMgTGljZW5zZSBmb3IgbW9yZSBkZXRhaWxzLlxuICpcbiAqIFlvdSBzaG91bGQgaGF2ZSByZWNlaXZlZCBhIGNvcHkgb2YgdGhlIEdOVSBBZmZlcm8gR2VuZXJhbCBQdWJsaWMgTGljZW5zZVxuICogYWxvbmcgd2l0aCBWaXZsaW9zdHlsZS5qcy4gIElmIG5vdCwgc2VlIDxodHRwOi8vd3d3LmdudS5vcmcvbGljZW5zZXMvPi5cbiAqXG4gKiBAZmlsZW92ZXJ2aWV3IFNpemluZyAtIENTUyBJbnRyaW5zaWMgJiBFeHRyaW5zaWMgU2l6aW5nXG4gKi9cbmltcG9ydCAqIGFzIEJhc2UgZnJvbSBcIi4vYmFzZVwiO1xuaW1wb3J0ICogYXMgVnRyZWUgZnJvbSBcIi4vdnRyZWVcIjtcblxuLyoqXG4gKiBCb3ggc2l6ZXMgZGVmaW5lZCBpbiBjc3Mtc2l6aW5nLlxuICogQGVudW0ge3N0cmluZ31cbiAqL1xuZXhwb3J0IGVudW0gU2l6ZSB7XG4gIEZJTExfQVZBSUxBQkxFX0lOTElORV9TSVpFID0gXCJmaWxsLWF2YWlsYWJsZSBpbmxpbmUgc2l6ZVwiLFxuICBGSUxMX0FWQUlMQUJMRV9CTE9DS19TSVpFID0gXCJmaWxsLWF2YWlsYWJsZSBibG9jayBzaXplXCIsXG4gIEZJTExfQVZBSUxBQkxFX1dJRFRIID0gXCJmaWxsLWF2YWlsYWJsZSB3aWR0aFwiLFxuICBGSUxMX0FWQUlMQUJMRV9IRUlHSFQgPSBcImZpbGwtYXZhaWxhYmxlIGhlaWdodFwiLFxuICBNQVhfQ09OVEVOVF9JTkxJTkVfU0laRSA9IFwibWF4LWNvbnRlbnQgaW5saW5lIHNpemVcIixcbiAgTUFYX0NPTlRFTlRfQkxPQ0tfU0laRSA9IFwibWF4LWNvbnRlbnQgYmxvY2sgc2l6ZVwiLFxuICBNQVhfQ09OVEVOVF9XSURUSCA9IFwibWF4LWNvbnRlbnQgd2lkdGhcIixcbiAgTUFYX0NPTlRFTlRfSEVJR0hUID0gXCJtYXgtY29udGVudCBoZWlnaHRcIixcbiAgTUlOX0NPTlRFTlRfSU5MSU5FX1NJWkUgPSBcIm1pbi1jb250ZW50IGlubGluZSBzaXplXCIsXG4gIE1JTl9DT05URU5UX0JMT0NLX1NJWkUgPSBcIm1pbi1jb250ZW50IGJsb2NrIHNpemVcIixcbiAgTUlOX0NPTlRFTlRfV0lEVEggPSBcIm1pbi1jb250ZW50IHdpZHRoXCIsXG4gIE1JTl9DT05URU5UX0hFSUdIVCA9IFwibWluLWNvbnRlbnQgaGVpZ2h0XCIsXG4gIEZJVF9DT05URU5UX0lOTElORV9TSVpFID0gXCJmaXQtY29udGVudCBpbmxpbmUgc2l6ZVwiLFxuICBGSVRfQ09OVEVOVF9CTE9DS19TSVpFID0gXCJmaXQtY29udGVudCBibG9jayBzaXplXCIsXG4gIEZJVF9DT05URU5UX1dJRFRIID0gXCJmaXQtY29udGVudCB3aWR0aFwiLFxuICBGSVRfQ09OVEVOVF9IRUlHSFQgPSBcImZpdC1jb250ZW50IGhlaWdodFwiLFxufVxuXG4vKipcbiAqIEdldCBzcGVjaWZpZWQgc2l6ZXMgZm9yIHRoZSBlbGVtZW50LlxuICovXG5leHBvcnQgZnVuY3Rpb24gZ2V0U2l6ZShcbiAgY2xpZW50TGF5b3V0OiBWdHJlZS5DbGllbnRMYXlvdXQsXG4gIGVsZW1lbnQ6IEVsZW1lbnQsXG4gIHNpemVzOiBTaXplW10sXG4pOiB7IFtrZXkgaW4gU2l6ZV06IG51bWJlciB9IHtcbiAgY29uc3Qgb3JpZ2luYWwgPSB7XG4gICAgZGlzcGxheTogKGVsZW1lbnQgYXMgYW55KS5zdHlsZS5kaXNwbGF5LFxuICAgIHBvc2l0aW9uOiAoZWxlbWVudCBhcyBhbnkpLnN0eWxlLnBvc2l0aW9uLFxuICAgIHdpZHRoOiAoZWxlbWVudCBhcyBhbnkpLnN0eWxlLndpZHRoIGFzIHN0cmluZyxcbiAgICBtYXhXaWR0aDogKGVsZW1lbnQgYXMgYW55KS5zdHlsZS5tYXhXaWR0aCBhcyBzdHJpbmcsXG4gICAgbWluV2lkdGg6IChlbGVtZW50IGFzIGFueSkuc3R5bGUubWluV2lkdGggYXMgc3RyaW5nLFxuICAgIGhlaWdodDogKGVsZW1lbnQgYXMgYW55KS5zdHlsZS5oZWlnaHQgYXMgc3RyaW5nLFxuICAgIG1heEhlaWdodDogKGVsZW1lbnQgYXMgYW55KS5zdHlsZS5tYXhIZWlnaHQgYXMgc3RyaW5nLFxuICAgIG1pbkhlaWdodDogKGVsZW1lbnQgYXMgYW55KS5zdHlsZS5taW5IZWlnaHQgYXMgc3RyaW5nLFxuICB9O1xuICBjb25zdCBkb2MgPSBlbGVtZW50Lm93bmVyRG9jdW1lbnQ7XG4gIGNvbnN0IHBhcmVudCA9IGVsZW1lbnQucGFyZW50Tm9kZTtcblxuICAvLyB3cmFwIHRoZSBlbGVtZW50IHdpdGggYSBkdW1teSBjb250YWluZXIgZWxlbWVudFxuICBjb25zdCBjb250YWluZXIgPSBkb2MuY3JlYXRlRWxlbWVudChcImRpdlwiKTtcbiAgQmFzZS5zZXRDU1NQcm9wZXJ0eShjb250YWluZXIsIFwicG9zaXRpb25cIiwgb3JpZ2luYWwucG9zaXRpb24pO1xuICBwYXJlbnQuaW5zZXJ0QmVmb3JlKGNvbnRhaW5lciwgZWxlbWVudCk7XG4gIGNvbnRhaW5lci5hcHBlbmRDaGlsZChlbGVtZW50KTtcbiAgQmFzZS5zZXRDU1NQcm9wZXJ0eShlbGVtZW50LCBcIndpZHRoXCIsIFwiYXV0b1wiKTtcbiAgQmFzZS5zZXRDU1NQcm9wZXJ0eShlbGVtZW50LCBcIm1heC13aWR0aFwiLCBcIm5vbmVcIik7XG4gIEJhc2Uuc2V0Q1NTUHJvcGVydHkoZWxlbWVudCwgXCJtaW4td2lkdGhcIiwgXCIwXCIpO1xuICBCYXNlLnNldENTU1Byb3BlcnR5KGVsZW1lbnQsIFwiaGVpZ2h0XCIsIFwiYXV0b1wiKTtcbiAgQmFzZS5zZXRDU1NQcm9wZXJ0eShlbGVtZW50LCBcIm1heC1oZWlnaHRcIiwgXCJub25lXCIpO1xuICBCYXNlLnNldENTU1Byb3BlcnR5KGVsZW1lbnQsIFwibWluLWhlaWdodFwiLCBcIjBcIik7XG5cbiAgZnVuY3Rpb24gZ2V0Q29tcHV0ZWRWYWx1ZShuYW1lOiBzdHJpbmcpOiBzdHJpbmcge1xuICAgIHJldHVybiBjbGllbnRMYXlvdXQuZ2V0RWxlbWVudENvbXB1dGVkU3R5bGUoZWxlbWVudCkuZ2V0UHJvcGVydHlWYWx1ZShuYW1lKTtcbiAgfVxuICBjb25zdCB3cml0aW5nTW9kZVByb3BlcnR5ID0gQmFzZS5nZXRQcmVmaXhlZFByb3BlcnR5TmFtZXMoXCJ3cml0aW5nLW1vZGVcIik7XG4gIGNvbnN0IHdyaXRpbmdNb2RlVmFsdWUgPVxuICAgICh3cml0aW5nTW9kZVByb3BlcnR5ID8gZ2V0Q29tcHV0ZWRWYWx1ZSh3cml0aW5nTW9kZVByb3BlcnR5WzBdKSA6IG51bGwpIHx8XG4gICAgZ2V0Q29tcHV0ZWRWYWx1ZShcIndyaXRpbmctbW9kZVwiKTtcbiAgY29uc3QgaXNWZXJ0aWNhbCA9XG4gICAgd3JpdGluZ01vZGVWYWx1ZSA9PT0gXCJ2ZXJ0aWNhbC1ybFwiIHx8XG4gICAgd3JpdGluZ01vZGVWYWx1ZSA9PT0gXCJ0Yi1ybFwiIHx8XG4gICAgd3JpdGluZ01vZGVWYWx1ZSA9PT0gXCJ2ZXJ0aWNhbC1sclwiIHx8XG4gICAgd3JpdGluZ01vZGVWYWx1ZSA9PT0gXCJ0Yi1sclwiO1xuICBjb25zdCBpbmxpbmVTaXplTmFtZSA9IGlzVmVydGljYWwgPyBcImhlaWdodFwiIDogXCJ3aWR0aFwiO1xuICBjb25zdCBibG9ja1NpemVOYW1lID0gaXNWZXJ0aWNhbCA/IFwid2lkdGhcIiA6IFwiaGVpZ2h0XCI7XG5cbiAgZnVuY3Rpb24gZ2V0RmlsbEF2YWlsYWJsZUlubGluZSgpOiBzdHJpbmcge1xuICAgIEJhc2Uuc2V0Q1NTUHJvcGVydHkoZWxlbWVudCwgXCJkaXNwbGF5XCIsIFwiYmxvY2tcIik7XG4gICAgQmFzZS5zZXRDU1NQcm9wZXJ0eShlbGVtZW50LCBcInBvc2l0aW9uXCIsIFwic3RhdGljXCIpO1xuICAgIHJldHVybiBnZXRDb21wdXRlZFZhbHVlKGlubGluZVNpemVOYW1lKTtcbiAgfVxuXG4gIC8vIElubGluZSBzaXplIG9mIGFuIGlubGluZS1ibG9jayBlbGVtZW50IGlzIHRoZSBmaXQtY29udGVudFxuICAvLyAoc2hyaW5rLXRvLWZpdCkgaW5saW5lIHNpemUuXG4gIGZ1bmN0aW9uIGdldE1heENvbnRlbnRJbmxpbmUoKTogc3RyaW5nIHtcbiAgICBCYXNlLnNldENTU1Byb3BlcnR5KGVsZW1lbnQsIFwiZGlzcGxheVwiLCBcImlubGluZS1ibG9ja1wiKTtcblxuICAgIC8vIFdoZW4gdGhlIGF2YWlsYWJsZSBpbmxpbmUgc2l6ZSBpcyBzdWZmaWNpZW50bHkgbGFyZ2UsIHRoZSBmaXQtY29udGVudFxuICAgIC8vIGlubGluZSBzaXplIGVxdWFscyB0byB0aGUgbWF4LWNvbnRlbnQgaW5saW5lIHNpemUuXG4gICAgQmFzZS5zZXRDU1NQcm9wZXJ0eShjb250YWluZXIsIGlubGluZVNpemVOYW1lLCBcIjk5OTk5OTk5cHhcIik7IC8vICdzdWZmaWNpZW50bHkgbGFyZ2UnIHZhbHVlXG4gICAgY29uc3QgciA9IGdldENvbXB1dGVkVmFsdWUoaW5saW5lU2l6ZU5hbWUpO1xuICAgIEJhc2Uuc2V0Q1NTUHJvcGVydHkoY29udGFpbmVyLCBpbmxpbmVTaXplTmFtZSwgXCJcIik7XG4gICAgcmV0dXJuIHI7XG4gIH1cblxuICBmdW5jdGlvbiBnZXRNaW5Db250ZW50SW5saW5lKCk6IHN0cmluZyB7XG4gICAgQmFzZS5zZXRDU1NQcm9wZXJ0eShlbGVtZW50LCBcImRpc3BsYXlcIiwgXCJpbmxpbmUtYmxvY2tcIik7XG5cbiAgICAvLyBXaGVuIHRoZSBhdmFpbGFibGUgaW5saW5lIHNpemUgaXMgemVybywgdGhlIGZpdC1jb250ZW50IGlubGluZSBzaXplXG4gICAgLy8gZXF1YWxzIHRvIHRoZSBtaW4tY29udGVudCBpbmxpbmUgc2l6ZS5cbiAgICBCYXNlLnNldENTU1Byb3BlcnR5KGNvbnRhaW5lciwgaW5saW5lU2l6ZU5hbWUsIFwiMFwiKTtcbiAgICBjb25zdCByID0gZ2V0Q29tcHV0ZWRWYWx1ZShpbmxpbmVTaXplTmFtZSk7XG4gICAgQmFzZS5zZXRDU1NQcm9wZXJ0eShjb250YWluZXIsIGlubGluZVNpemVOYW1lLCBcIlwiKTtcbiAgICByZXR1cm4gcjtcbiAgfVxuXG4gIGZ1bmN0aW9uIGdldEZpdENvbnRlbnRJbmxpbmUoKTogc3RyaW5nIHtcbiAgICBjb25zdCBmaWxsQXZhaWxhYmxlSW5saW5lID0gZ2V0RmlsbEF2YWlsYWJsZUlubGluZSgpO1xuICAgIGNvbnN0IG1pbkNvbnRlbnRJbmxpbmUgPSBnZXRNaW5Db250ZW50SW5saW5lKCk7XG4gICAgY29uc3QgcGFyc2VkRmlsbEF2YWlsYWJsZSA9IHBhcnNlRmxvYXQoZmlsbEF2YWlsYWJsZUlubGluZSk7XG4gICAgaWYgKHBhcnNlZEZpbGxBdmFpbGFibGUgPD0gcGFyc2VGbG9hdChtaW5Db250ZW50SW5saW5lKSkge1xuICAgICAgcmV0dXJuIG1pbkNvbnRlbnRJbmxpbmU7XG4gICAgfSBlbHNlIHtcbiAgICAgIGNvbnN0IG1heENvbnRlbnRJbmxpbmUgPSBnZXRNYXhDb250ZW50SW5saW5lKCk7XG4gICAgICBpZiAocGFyc2VkRmlsbEF2YWlsYWJsZSA8PSBwYXJzZUZsb2F0KG1heENvbnRlbnRJbmxpbmUpKSB7XG4gICAgICAgIHJldHVybiBmaWxsQXZhaWxhYmxlSW5saW5lO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcmV0dXJuIG1heENvbnRlbnRJbmxpbmU7XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgZnVuY3Rpb24gZ2V0SWRlYWxCbG9jaygpOiBzdHJpbmcge1xuICAgIHJldHVybiBnZXRDb21wdXRlZFZhbHVlKGJsb2NrU2l6ZU5hbWUpO1xuICB9XG5cbiAgZnVuY3Rpb24gZ2V0RmlsbEF2YWlsYWJsZUJsb2NrKCk6IHN0cmluZyB7XG4gICAgdGhyb3cgbmV3IEVycm9yKFwiR2V0dGluZyBmaWxsLWF2YWlsYWJsZSBibG9jayBzaXplIGlzIG5vdCBpbXBsZW1lbnRlZFwiKTtcbiAgfVxuICBjb25zdCByZXN1bHQgPSB7fSBhcyB7IFtrZXkgaW4gU2l6ZV06IG51bWJlciB9O1xuICBzaXplcy5mb3JFYWNoKChzaXplKSA9PiB7XG4gICAgbGV0IHI6IHN0cmluZztcbiAgICBzd2l0Y2ggKHNpemUpIHtcbiAgICAgIGNhc2UgU2l6ZS5GSUxMX0FWQUlMQUJMRV9JTkxJTkVfU0laRTpcbiAgICAgICAgciA9IGdldEZpbGxBdmFpbGFibGVJbmxpbmUoKTtcbiAgICAgICAgYnJlYWs7XG4gICAgICBjYXNlIFNpemUuTUFYX0NPTlRFTlRfSU5MSU5FX1NJWkU6XG4gICAgICAgIHIgPSBnZXRNYXhDb250ZW50SW5saW5lKCk7XG4gICAgICAgIGJyZWFrO1xuICAgICAgY2FzZSBTaXplLk1JTl9DT05URU5UX0lOTElORV9TSVpFOlxuICAgICAgICByID0gZ2V0TWluQ29udGVudElubGluZSgpO1xuICAgICAgICBicmVhaztcbiAgICAgIGNhc2UgU2l6ZS5GSVRfQ09OVEVOVF9JTkxJTkVfU0laRTpcbiAgICAgICAgciA9IGdldEZpdENvbnRlbnRJbmxpbmUoKTtcbiAgICAgICAgYnJlYWs7XG4gICAgICBjYXNlIFNpemUuRklMTF9BVkFJTEFCTEVfQkxPQ0tfU0laRTpcbiAgICAgICAgciA9IGdldEZpbGxBdmFpbGFibGVCbG9jaygpO1xuICAgICAgICBicmVhaztcbiAgICAgIGNhc2UgU2l6ZS5NQVhfQ09OVEVOVF9CTE9DS19TSVpFOlxuICAgICAgY2FzZSBTaXplLk1JTl9DT05URU5UX0JMT0NLX1NJWkU6XG4gICAgICBjYXNlIFNpemUuRklUX0NPTlRFTlRfQkxPQ0tfU0laRTpcbiAgICAgICAgciA9IGdldElkZWFsQmxvY2soKTtcbiAgICAgICAgYnJlYWs7XG4gICAgICBjYXNlIFNpemUuRklMTF9BVkFJTEFCTEVfV0lEVEg6XG4gICAgICAgIHIgPSBpc1ZlcnRpY2FsID8gZ2V0RmlsbEF2YWlsYWJsZUJsb2NrKCkgOiBnZXRGaWxsQXZhaWxhYmxlSW5saW5lKCk7XG4gICAgICAgIGJyZWFrO1xuICAgICAgY2FzZSBTaXplLkZJTExfQVZBSUxBQkxFX0hFSUdIVDpcbiAgICAgICAgciA9IGlzVmVydGljYWwgPyBnZXRGaWxsQXZhaWxhYmxlSW5saW5lKCkgOiBnZXRGaWxsQXZhaWxhYmxlQmxvY2soKTtcbiAgICAgICAgYnJlYWs7XG4gICAgICBjYXNlIFNpemUuTUFYX0NPTlRFTlRfV0lEVEg6XG4gICAgICAgIHIgPSBpc1ZlcnRpY2FsID8gZ2V0SWRlYWxCbG9jaygpIDogZ2V0TWF4Q29udGVudElubGluZSgpO1xuICAgICAgICBicmVhaztcbiAgICAgIGNhc2UgU2l6ZS5NQVhfQ09OVEVOVF9IRUlHSFQ6XG4gICAgICAgIHIgPSBpc1ZlcnRpY2FsID8gZ2V0TWF4Q29udGVudElubGluZSgpIDogZ2V0SWRlYWxCbG9jaygpO1xuICAgICAgICBicmVhaztcbiAgICAgIGNhc2UgU2l6ZS5NSU5fQ09OVEVOVF9XSURUSDpcbiAgICAgICAgciA9IGlzVmVydGljYWwgPyBnZXRJZGVhbEJsb2NrKCkgOiBnZXRNaW5Db250ZW50SW5saW5lKCk7XG4gICAgICAgIGJyZWFrO1xuICAgICAgY2FzZSBTaXplLk1JTl9DT05URU5UX0hFSUdIVDpcbiAgICAgICAgciA9IGlzVmVydGljYWwgPyBnZXRNaW5Db250ZW50SW5saW5lKCkgOiBnZXRJZGVhbEJsb2NrKCk7XG4gICAgICAgIGJyZWFrO1xuICAgICAgY2FzZSBTaXplLkZJVF9DT05URU5UX1dJRFRIOlxuICAgICAgICByID0gaXNWZXJ0aWNhbCA/IGdldElkZWFsQmxvY2soKSA6IGdldEZpdENvbnRlbnRJbmxpbmUoKTtcbiAgICAgICAgYnJlYWs7XG4gICAgICBjYXNlIFNpemUuRklUX0NPTlRFTlRfSEVJR0hUOlxuICAgICAgICByID0gaXNWZXJ0aWNhbCA/IGdldEZpdENvbnRlbnRJbmxpbmUoKSA6IGdldElkZWFsQmxvY2soKTtcbiAgICAgICAgYnJlYWs7XG4gICAgfVxuICAgIHJlc3VsdFtzaXplXSA9IHBhcnNlRmxvYXQocik7XG4gICAgQmFzZS5zZXRDU1NQcm9wZXJ0eShlbGVtZW50LCBcInBvc2l0aW9uXCIsIG9yaWdpbmFsLnBvc2l0aW9uKTtcbiAgICBCYXNlLnNldENTU1Byb3BlcnR5KGVsZW1lbnQsIFwiZGlzcGxheVwiLCBvcmlnaW5hbC5kaXNwbGF5KTtcbiAgfSk7XG4gIEJhc2Uuc2V0Q1NTUHJvcGVydHkoZWxlbWVudCwgXCJ3aWR0aFwiLCBvcmlnaW5hbC53aWR0aCk7XG4gIEJhc2Uuc2V0Q1NTUHJvcGVydHkoZWxlbWVudCwgXCJtYXgtd2lkdGhcIiwgb3JpZ2luYWwubWF4V2lkdGgpO1xuICBCYXNlLnNldENTU1Byb3BlcnR5KGVsZW1lbnQsIFwibWluLXdpZHRoXCIsIG9yaWdpbmFsLm1pbldpZHRoKTtcbiAgQmFzZS5zZXRDU1NQcm9wZXJ0eShlbGVtZW50LCBcImhlaWdodFwiLCBvcmlnaW5hbC5oZWlnaHQpO1xuICBCYXNlLnNldENTU1Byb3BlcnR5KGVsZW1lbnQsIFwibWF4LWhlaWdodFwiLCBvcmlnaW5hbC5tYXhIZWlnaHQpO1xuICBCYXNlLnNldENTU1Byb3BlcnR5KGVsZW1lbnQsIFwibWluLWhlaWdodFwiLCBvcmlnaW5hbC5taW5IZWlnaHQpO1xuICBwYXJlbnQuaW5zZXJ0QmVmb3JlKGVsZW1lbnQsIGNvbnRhaW5lcik7XG4gIHBhcmVudC5yZW1vdmVDaGlsZChjb250YWluZXIpO1xuICByZXR1cm4gcmVzdWx0O1xufVxuIiwiLyoqXG4gKiBDb3B5cmlnaHQgMjAxNSBUcmltLW1hcmtzIEluYy5cbiAqIENvcHlyaWdodCAyMDE5IFZpdmxpb3N0eWxlIEZvdW5kYXRpb25cbiAqXG4gKiBWaXZsaW9zdHlsZS5qcyBpcyBmcmVlIHNvZnR3YXJlOiB5b3UgY2FuIHJlZGlzdHJpYnV0ZSBpdCBhbmQvb3IgbW9kaWZ5XG4gKiBpdCB1bmRlciB0aGUgdGVybXMgb2YgdGhlIEdOVSBBZmZlcm8gR2VuZXJhbCBQdWJsaWMgTGljZW5zZSBhcyBwdWJsaXNoZWQgYnlcbiAqIHRoZSBGcmVlIFNvZnR3YXJlIEZvdW5kYXRpb24sIGVpdGhlciB2ZXJzaW9uIDMgb2YgdGhlIExpY2Vuc2UsIG9yXG4gKiAoYXQgeW91ciBvcHRpb24pIGFueSBsYXRlciB2ZXJzaW9uLlxuICpcbiAqIFZpdmxpb3N0eWxlLmpzIGlzIGRpc3RyaWJ1dGVkIGluIHRoZSBob3BlIHRoYXQgaXQgd2lsbCBiZSB1c2VmdWwsXG4gKiBidXQgV0lUSE9VVCBBTlkgV0FSUkFOVFk7IHdpdGhvdXQgZXZlbiB0aGUgaW1wbGllZCB3YXJyYW50eSBvZlxuICogTUVSQ0hBTlRBQklMSVRZIG9yIEZJVE5FU1MgRk9SIEEgUEFSVElDVUxBUiBQVVJQT1NFLiAgU2VlIHRoZVxuICogR05VIEFmZmVybyBHZW5lcmFsIFB1YmxpYyBMaWNlbnNlIGZvciBtb3JlIGRldGFpbHMuXG4gKlxuICogWW91IHNob3VsZCBoYXZlIHJlY2VpdmVkIGEgY29weSBvZiB0aGUgR05VIEFmZmVybyBHZW5lcmFsIFB1YmxpYyBMaWNlbnNlXG4gKiBhbG9uZyB3aXRoIFZpdmxpb3N0eWxlLmpzLiAgSWYgbm90LCBzZWUgPGh0dHA6Ly93d3cuZ251Lm9yZy9saWNlbnNlcy8+LlxuICpcbiAqIEBmaWxlb3ZlcnZpZXcgUGFnZUZsb2F0cyAtIENTUyBQYWdlIEZsb2F0c1xuICovXG5pbXBvcnQgKiBhcyBBc3NlcnRzIGZyb20gXCIuL2Fzc2VydHNcIjtcbmltcG9ydCAqIGFzIENzcyBmcm9tIFwiLi9jc3NcIjtcbmltcG9ydCAqIGFzIEdlb21ldHJ5VXRpbCBmcm9tIFwiLi9nZW9tZXRyeS11dGlsXCI7XG5pbXBvcnQgKiBhcyBMb2dnaW5nIGZyb20gXCIuL2xvZ2dpbmdcIjtcbmltcG9ydCAqIGFzIENzc0xvZ2ljYWxVdGlsIGZyb20gXCIuL2Nzcy1sb2dpY2FsLXV0aWxcIjtcbmltcG9ydCAqIGFzIFNpemluZyBmcm9tIFwiLi9zaXppbmdcIjtcbmltcG9ydCAqIGFzIFRhc2sgZnJvbSBcIi4vdGFza1wiO1xuaW1wb3J0ICogYXMgVnRyZWVJbXBsIGZyb20gXCIuL3Z0cmVlXCI7XG5pbXBvcnQgeyBMYXlvdXQgYXMgTGF5b3V0VHlwZSwgUGFnZUZsb2F0cywgVnRyZWUgfSBmcm9tIFwiLi90eXBlc1wiO1xuXG5leHBvcnQgY29uc3QgRmxvYXRSZWZlcmVuY2UgPSBQYWdlRmxvYXRzLkZsb2F0UmVmZXJlbmNlO1xuZXhwb3J0IHR5cGUgRmxvYXRSZWZlcmVuY2UgPSBQYWdlRmxvYXRzLkZsb2F0UmVmZXJlbmNlOyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIG5vLXJlZGVjbGFyZVxuXG50eXBlIFBhZ2VGbG9hdElEID0gUGFnZUZsb2F0cy5QYWdlRmxvYXRJRDtcblxuZXhwb3J0IGZ1bmN0aW9uIGZsb2F0UmVmZXJlbmNlT2Yoc3RyOiBzdHJpbmcpOiBGbG9hdFJlZmVyZW5jZSB7XG4gIHN3aXRjaCAoc3RyKSB7XG4gICAgY2FzZSBcImlubGluZVwiOlxuICAgICAgcmV0dXJuIEZsb2F0UmVmZXJlbmNlLklOTElORTtcbiAgICBjYXNlIFwiY29sdW1uXCI6XG4gICAgICByZXR1cm4gRmxvYXRSZWZlcmVuY2UuQ09MVU1OO1xuICAgIGNhc2UgXCJyZWdpb25cIjpcbiAgICAgIHJldHVybiBGbG9hdFJlZmVyZW5jZS5SRUdJT047XG4gICAgY2FzZSBcInBhZ2VcIjpcbiAgICAgIHJldHVybiBGbG9hdFJlZmVyZW5jZS5QQUdFO1xuICAgIGRlZmF1bHQ6XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoYFVua25vd24gZmxvYXQtcmVmZXJlbmNlOiAke3N0cn1gKTtcbiAgfVxufVxuXG5leHBvcnQgZnVuY3Rpb24gaXNQYWdlRmxvYXQoZmxvYXRSZWZlcmVuY2U6IEZsb2F0UmVmZXJlbmNlKTogYm9vbGVhbiB7XG4gIHN3aXRjaCAoZmxvYXRSZWZlcmVuY2UpIHtcbiAgICBjYXNlIEZsb2F0UmVmZXJlbmNlLklOTElORTpcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICBjYXNlIEZsb2F0UmVmZXJlbmNlLkNPTFVNTjpcbiAgICBjYXNlIEZsb2F0UmVmZXJlbmNlLlJFR0lPTjpcbiAgICBjYXNlIEZsb2F0UmVmZXJlbmNlLlBBR0U6XG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICBkZWZhdWx0OlxuICAgICAgdGhyb3cgbmV3IEVycm9yKGBVbmtub3duIGZsb2F0LXJlZmVyZW5jZTogJHtmbG9hdFJlZmVyZW5jZX1gKTtcbiAgfVxufVxuXG4vKipcbiAqIEludGVycHJldCBhIGZsb2F0IHZhbHVlIHdpdGggdGhlIHdyaXRpbmctbW9kZSBhbmQgZGlyZWN0aW9uIGFzc3VtaW5nIHRoZVxuICogZmxvYXQtcmVmZXJlbmNlIGlzIGlubGluZSBhbmQgcmV0dXJucyBcImxlZnRcIiBvciBcInJpZ2h0XCIuXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiByZXNvbHZlSW5saW5lRmxvYXREaXJlY3Rpb24oXG4gIGZsb2F0U2lkZTogc3RyaW5nLFxuICB2ZXJ0aWNhbDogYm9vbGVhbixcbiAgZGlyZWN0aW9uOiBzdHJpbmcsXG4pOiBzdHJpbmcge1xuICBjb25zdCB3cml0aW5nTW9kZSA9IHZlcnRpY2FsID8gXCJ2ZXJ0aWNhbC1ybFwiIDogXCJob3Jpem9udGFsLXRiXCI7XG4gIGlmIChmbG9hdFNpZGUgPT09IFwidG9wXCIgfHwgZmxvYXRTaWRlID09PSBcImJvdHRvbVwiKSB7XG4gICAgZmxvYXRTaWRlID0gQ3NzTG9naWNhbFV0aWwudG9Mb2dpY2FsKGZsb2F0U2lkZSwgd3JpdGluZ01vZGUsIGRpcmVjdGlvbik7XG4gIH1cbiAgaWYgKGZsb2F0U2lkZSA9PT0gXCJibG9jay1zdGFydFwiKSB7XG4gICAgZmxvYXRTaWRlID0gXCJpbmxpbmUtc3RhcnRcIjtcbiAgfVxuICBpZiAoZmxvYXRTaWRlID09PSBcImJsb2NrLWVuZFwiKSB7XG4gICAgZmxvYXRTaWRlID0gXCJpbmxpbmUtZW5kXCI7XG4gIH1cbiAgaWYgKGZsb2F0U2lkZSA9PT0gXCJpbmxpbmUtc3RhcnRcIiB8fCBmbG9hdFNpZGUgPT09IFwiaW5saW5lLWVuZFwiKSB7XG4gICAgY29uc3QgcGh5c2ljYWxWYWx1ZSA9IENzc0xvZ2ljYWxVdGlsLnRvUGh5c2ljYWwoXG4gICAgICBmbG9hdFNpZGUsXG4gICAgICB3cml0aW5nTW9kZSxcbiAgICAgIGRpcmVjdGlvbixcbiAgICApO1xuICAgIGNvbnN0IGxpbmVSZWxhdGl2ZVZhbHVlID0gQ3NzTG9naWNhbFV0aWwudG9MaW5lUmVsYXRpdmUoXG4gICAgICBwaHlzaWNhbFZhbHVlLFxuICAgICAgd3JpdGluZ01vZGUsXG4gICAgKTtcbiAgICBpZiAobGluZVJlbGF0aXZlVmFsdWUgPT09IFwibGluZS1sZWZ0XCIpIHtcbiAgICAgIGZsb2F0U2lkZSA9IFwibGVmdFwiO1xuICAgIH0gZWxzZSBpZiAobGluZVJlbGF0aXZlVmFsdWUgPT09IFwibGluZS1yaWdodFwiKSB7XG4gICAgICBmbG9hdFNpZGUgPSBcInJpZ2h0XCI7XG4gICAgfVxuICB9XG4gIGlmIChmbG9hdFNpZGUgIT09IFwibGVmdFwiICYmIGZsb2F0U2lkZSAhPT0gXCJyaWdodFwiKSB7XG4gICAgTG9nZ2luZy5sb2dnZXIud2FybihgSW52YWxpZCBmbG9hdCB2YWx1ZTogJHtmbG9hdFNpZGV9LiBGYWxsYmFjayB0byBsZWZ0LmApO1xuICAgIGZsb2F0U2lkZSA9IFwibGVmdFwiO1xuICB9XG4gIHJldHVybiBmbG9hdFNpZGU7XG59XG5cbmV4cG9ydCBjbGFzcyBQYWdlRmxvYXQgaW1wbGVtZW50cyBQYWdlRmxvYXRzLlBhZ2VGbG9hdCB7XG4gIG9yZGVyOiBudW1iZXIgfCBudWxsID0gbnVsbDtcbiAgaWQ6IFBhZ2VGbG9hdElEIHwgbnVsbCA9IG51bGw7XG5cbiAgY29uc3RydWN0b3IoXG4gICAgcHVibGljIHJlYWRvbmx5IG5vZGVQb3NpdGlvbjogVnRyZWUuTm9kZVBvc2l0aW9uLFxuICAgIHB1YmxpYyByZWFkb25seSBmbG9hdFJlZmVyZW5jZTogRmxvYXRSZWZlcmVuY2UsXG4gICAgcHVibGljIHJlYWRvbmx5IGZsb2F0U2lkZTogc3RyaW5nLFxuICAgIHB1YmxpYyByZWFkb25seSBjbGVhclNpZGU6IHN0cmluZyB8IG51bGwsXG4gICAgcHVibGljIHJlYWRvbmx5IGZsb3dOYW1lOiBzdHJpbmcsXG4gICAgcHVibGljIHJlYWRvbmx5IGZsb2F0TWluV3JhcEJsb2NrOiBDc3MuTnVtZXJpYyB8IG51bGwsXG4gICkge31cblxuICBnZXRPcmRlcigpOiBudW1iZXIge1xuICAgIGlmICh0aGlzLm9yZGVyID09PSBudWxsKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoXCJUaGUgcGFnZSBmbG9hdCBpcyBub3QgeWV0IGFkZGVkXCIpO1xuICAgIH1cbiAgICByZXR1cm4gdGhpcy5vcmRlcjtcbiAgfVxuXG4gIGdldElkKCk6IFBhZ2VGbG9hdElEIHtcbiAgICBpZiAoIXRoaXMuaWQpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcihcIlRoZSBwYWdlIGZsb2F0IGlzIG5vdCB5ZXQgYWRkZWRcIik7XG4gICAgfVxuICAgIHJldHVybiB0aGlzLmlkO1xuICB9XG5cbiAgaXNBbGxvd2VkT25Db250ZXh0KHBhZ2VGbG9hdExheW91dENvbnRleHQ6IFBhZ2VGbG9hdExheW91dENvbnRleHQpOiBib29sZWFuIHtcbiAgICByZXR1cm4gcGFnZUZsb2F0TGF5b3V0Q29udGV4dC5pc0FuY2hvckFscmVhZHlBcHBlYXJlZCh0aGlzLmdldElkKCkpO1xuICB9XG5cbiAgaXNBbGxvd2VkVG9QcmVjZWRlKG90aGVyOiBQYWdlRmxvYXQpOiBib29sZWFuIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cbn1cblxuZXhwb3J0IGNsYXNzIFBhZ2VGbG9hdFN0b3JlIHtcbiAgcHJpdmF0ZSBmbG9hdHM6IFBhZ2VGbG9hdFtdID0gW107XG4gIHByaXZhdGUgbmV4dFBhZ2VGbG9hdEluZGV4OiBudW1iZXIgPSAwO1xuXG4gIHByaXZhdGUgbmV4dE9yZGVyKCk6IG51bWJlciB7XG4gICAgcmV0dXJuIHRoaXMubmV4dFBhZ2VGbG9hdEluZGV4Kys7XG4gIH1cblxuICBwcml2YXRlIGNyZWF0ZVBhZ2VGbG9hdElkKG9yZGVyOiBudW1iZXIpOiBQYWdlRmxvYXRJRCB7XG4gICAgcmV0dXJuIGBwZiR7b3JkZXJ9YDtcbiAgfVxuXG4gIGFkZFBhZ2VGbG9hdChmbG9hdDogUGFnZUZsb2F0KSB7XG4gICAgY29uc3QgaW5kZXggPSB0aGlzLmZsb2F0cy5maW5kSW5kZXgoKGYpID0+XG4gICAgICBWdHJlZUltcGwuaXNTYW1lTm9kZVBvc2l0aW9uKGYubm9kZVBvc2l0aW9uLCBmbG9hdC5ub2RlUG9zaXRpb24pLFxuICAgICk7XG4gICAgaWYgKGluZGV4ID49IDApIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcihcbiAgICAgICAgXCJBIHBhZ2UgZmxvYXQgd2l0aCB0aGUgc2FtZSBzb3VyY2Ugbm9kZSBpcyBhbHJlYWR5IHJlZ2lzdGVyZWRcIixcbiAgICAgICk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGNvbnN0IG9yZGVyID0gKGZsb2F0Lm9yZGVyID0gdGhpcy5uZXh0T3JkZXIoKSk7XG4gICAgICBmbG9hdC5pZCA9IHRoaXMuY3JlYXRlUGFnZUZsb2F0SWQob3JkZXIpO1xuICAgICAgdGhpcy5mbG9hdHMucHVzaChmbG9hdCk7XG4gICAgfVxuICB9XG5cbiAgZmluZFBhZ2VGbG9hdEJ5Tm9kZVBvc2l0aW9uKFxuICAgIG5vZGVQb3NpdGlvbjogVnRyZWUuTm9kZVBvc2l0aW9uLFxuICApOiBQYWdlRmxvYXQgfCBudWxsIHtcbiAgICBjb25zdCBpbmRleCA9IHRoaXMuZmxvYXRzLmZpbmRJbmRleCgoZikgPT5cbiAgICAgIFZ0cmVlSW1wbC5pc1NhbWVOb2RlUG9zaXRpb24oZi5ub2RlUG9zaXRpb24sIG5vZGVQb3NpdGlvbiksXG4gICAgKTtcbiAgICByZXR1cm4gaW5kZXggPj0gMCA/IHRoaXMuZmxvYXRzW2luZGV4XSA6IG51bGw7XG4gIH1cblxuICBmaW5kUGFnZUZsb2F0QnlJZChpZDogUGFnZUZsb2F0SUQpIHtcbiAgICBjb25zdCBpbmRleCA9IHRoaXMuZmxvYXRzLmZpbmRJbmRleCgoZikgPT4gZi5pZCA9PT0gaWQpO1xuICAgIHJldHVybiBpbmRleCA+PSAwID8gdGhpcy5mbG9hdHNbaW5kZXhdIDogbnVsbDtcbiAgfVxufVxuXG4vKipcbiAqIEBwYXJhbSBjb250aW51ZXMgUmVwcmVzZW50cyB3aGV0aGVyIHRoZSBmbG9hdCBpcyBmcmFnbWVudGVkIGFuZCBjb250aW51ZXNcbiAqICAgICBhZnRlciB0aGlzIGZyYWdtZW50XG4gKi9cbmV4cG9ydCBjbGFzcyBQYWdlRmxvYXRGcmFnbWVudCBpbXBsZW1lbnRzIFBhZ2VGbG9hdHMuUGFnZUZsb2F0RnJhZ21lbnQge1xuICBjb25zdHJ1Y3RvcihcbiAgICBwdWJsaWMgcmVhZG9ubHkgZmxvYXRSZWZlcmVuY2U6IEZsb2F0UmVmZXJlbmNlLFxuICAgIHB1YmxpYyByZWFkb25seSBmbG9hdFNpZGU6IHN0cmluZyxcbiAgICBwdWJsaWMgcmVhZG9ubHkgY29udGludWF0aW9uczogUGFnZUZsb2F0Q29udGludWF0aW9uW10sXG4gICAgcHVibGljIHJlYWRvbmx5IGFyZWE6IFZ0cmVlLkNvbnRhaW5lcixcbiAgICBwdWJsaWMgcmVhZG9ubHkgY29udGludWVzOiBib29sZWFuLFxuICApIHt9XG5cbiAgaGFzRmxvYXQoZmxvYXQ6IFBhZ2VGbG9hdCk6IGJvb2xlYW4ge1xuICAgIHJldHVybiB0aGlzLmNvbnRpbnVhdGlvbnMuc29tZSgoYykgPT4gYy5mbG9hdCA9PT0gZmxvYXQpO1xuICB9XG5cbiAgZmluZE5vdEFsbG93ZWRGbG9hdChjb250ZXh0OiBQYWdlRmxvYXRMYXlvdXRDb250ZXh0KTogUGFnZUZsb2F0IHwgbnVsbCB7XG4gICAgZm9yIChsZXQgaSA9IHRoaXMuY29udGludWF0aW9ucy5sZW5ndGggLSAxOyBpID49IDA7IGktLSkge1xuICAgICAgY29uc3QgZiA9IHRoaXMuY29udGludWF0aW9uc1tpXS5mbG9hdDtcbiAgICAgIGlmICghZi5pc0FsbG93ZWRPbkNvbnRleHQoY29udGV4dCkpIHtcbiAgICAgICAgcmV0dXJuIGY7XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiBudWxsO1xuICB9XG5cbiAgZ2V0T3V0ZXJTaGFwZSgpOiBHZW9tZXRyeVV0aWwuU2hhcGUge1xuICAgIHJldHVybiB0aGlzLmFyZWEuZ2V0T3V0ZXJTaGFwZShudWxsLCBudWxsKTtcbiAgfVxuXG4gIGdldE91dGVyUmVjdCgpOiBHZW9tZXRyeVV0aWwuUmVjdCB7XG4gICAgcmV0dXJuIHRoaXMuYXJlYS5nZXRPdXRlclJlY3QoKTtcbiAgfVxuXG4gIGdldE9yZGVyKCk6IG51bWJlciB7XG4gICAgY29uc3QgZmxvYXRzID0gdGhpcy5jb250aW51YXRpb25zLm1hcCgoYykgPT4gYy5mbG9hdCk7XG4gICAgcmV0dXJuIE1hdGgubWluLmFwcGx5KFxuICAgICAgbnVsbCxcbiAgICAgIGZsb2F0cy5tYXAoKGYpID0+IGYuZ2V0T3JkZXIoKSksXG4gICAgKTtcbiAgfVxuXG4gIHNob3VsZEJlU3Rhc2hlZEJlZm9yZShmbG9hdDogUGFnZUZsb2F0KTogYm9vbGVhbiB7XG4gICAgcmV0dXJuIHRoaXMuZ2V0T3JkZXIoKSA8IGZsb2F0LmdldE9yZGVyKCk7XG4gIH1cblxuICBhZGRDb250aW51YXRpb25zKGNvbnRpbnVhdGlvbnM6IFBhZ2VGbG9hdENvbnRpbnVhdGlvbltdKSB7XG4gICAgY29udGludWF0aW9ucy5mb3JFYWNoKChjKSA9PiB7XG4gICAgICB0aGlzLmNvbnRpbnVhdGlvbnMucHVzaChjKTtcbiAgICB9KTtcbiAgfVxuXG4gIGdldEZsb3dOYW1lKCk6IHN0cmluZyB7XG4gICAgY29uc3QgZmxvd05hbWUgPSB0aGlzLmNvbnRpbnVhdGlvbnNbMF0uZmxvYXQuZmxvd05hbWU7XG4gICAgQXNzZXJ0cy5hc3NlcnQoXG4gICAgICB0aGlzLmNvbnRpbnVhdGlvbnMuZXZlcnkoKGMpID0+IGMuZmxvYXQuZmxvd05hbWUgPT09IGZsb3dOYW1lKSxcbiAgICApO1xuICAgIHJldHVybiBmbG93TmFtZTtcbiAgfVxufVxuXG5leHBvcnQgY2xhc3MgUGFnZUZsb2F0Q29udGludWF0aW9uIGltcGxlbWVudHMgUGFnZUZsb2F0cy5QYWdlRmxvYXRDb250aW51YXRpb24ge1xuICBjb25zdHJ1Y3RvcihcbiAgICBwdWJsaWMgcmVhZG9ubHkgZmxvYXQ6IFBhZ2VGbG9hdCxcbiAgICBwdWJsaWMgcmVhZG9ubHkgbm9kZVBvc2l0aW9uOiBWdHJlZS5Ob2RlUG9zaXRpb24sXG4gICkge31cblxuICBlcXVhbHMob3RoZXI6IFBhZ2VGbG9hdENvbnRpbnVhdGlvbiB8IG51bGwpOiBib29sZWFuIHtcbiAgICBpZiAoIW90aGVyKSB7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICAgIGlmICh0aGlzID09PSBvdGhlcikge1xuICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuICAgIHJldHVybiAoXG4gICAgICB0aGlzLmZsb2F0ID09PSBvdGhlci5mbG9hdCAmJlxuICAgICAgVnRyZWVJbXBsLmlzU2FtZU5vZGVQb3NpdGlvbih0aGlzLm5vZGVQb3NpdGlvbiwgb3RoZXIubm9kZVBvc2l0aW9uKVxuICAgICk7XG4gIH1cbn1cblxuZXhwb3J0IHR5cGUgUGFnZUZsb2F0UGxhY2VtZW50Q29uZGl0aW9uID0gUGFnZUZsb2F0cy5QYWdlRmxvYXRQbGFjZW1lbnRDb25kaXRpb247XG5cbi8qKlxuICogQHBhcmFtIGdlbmVyYXRpbmdOb2RlUG9zaXRpb24gU291cmNlIE5vZGVQb3NpdGlvbiBnZW5lcmF0aW5nIHRoZSBjb250ZXh0LlxuICogICAgIFNwZWNpZnkgd2hlbiBhIGNvbHVtbiBjb250ZXh0IGlzIGdlbmVyYXRlZCBieSBhIG5vbi1yb290IGVsZW1lbnQgKGZvclxuICogICAgIGV4YW1wbGUgcGFnZSBmbG9hdHMpXG4gKi9cbmV4cG9ydCBjbGFzcyBQYWdlRmxvYXRMYXlvdXRDb250ZXh0XG4gIGltcGxlbWVudHMgUGFnZUZsb2F0cy5QYWdlRmxvYXRMYXlvdXRDb250ZXh0IHtcbiAgcHJpdmF0ZSBjaGlsZHJlbjogUGFnZUZsb2F0TGF5b3V0Q29udGV4dFtdID0gW107XG4gIHdyaXRpbmdNb2RlOiBDc3MuVmFsO1xuICBkaXJlY3Rpb246IENzcy5WYWw7XG4gIHByaXZhdGUgaW52YWxpZGF0ZWQ6IGJvb2xlYW4gPSBmYWxzZTtcbiAgcHJpdmF0ZSBmbG9hdFN0b3JlOiBQYWdlRmxvYXRTdG9yZTtcbiAgcHJpdmF0ZSBmb3JiaWRkZW5GbG9hdHM6IFBhZ2VGbG9hdElEW10gPSBbXTtcbiAgZmxvYXRGcmFnbWVudHM6IFBhZ2VGbG9hdEZyYWdtZW50W10gPSBbXTtcbiAgcHJpdmF0ZSBzdGFzaGVkRmxvYXRGcmFnbWVudHM6IFBhZ2VGbG9hdEZyYWdtZW50W10gPSBbXTtcbiAgcHJpdmF0ZSBmbG9hdEFuY2hvcnM6IHsgW2tleSBpbiBQYWdlRmxvYXRJRF06IE5vZGUgfSA9IHt9O1xuICBwcml2YXRlIGZsb2F0c0RlZmVycmVkVG9OZXh0OiBQYWdlRmxvYXRDb250aW51YXRpb25bXSA9IFtdO1xuICBwcml2YXRlIGZsb2F0c0RlZmVycmVkRnJvbVByZXZpb3VzOiBQYWdlRmxvYXRDb250aW51YXRpb25bXTtcbiAgcHJpdmF0ZSBsYXlvdXRDb25zdHJhaW50czogTGF5b3V0VHlwZS5MYXlvdXRDb25zdHJhaW50W10gPSBbXTtcbiAgcHJpdmF0ZSBsb2NrZWQ6IGJvb2xlYW4gPSBmYWxzZTtcblxuICBjb25zdHJ1Y3RvcihcbiAgICBwdWJsaWMgcmVhZG9ubHkgcGFyZW50OiBQYWdlRmxvYXRMYXlvdXRDb250ZXh0LFxuICAgIHByaXZhdGUgcmVhZG9ubHkgZmxvYXRSZWZlcmVuY2U6IEZsb2F0UmVmZXJlbmNlIHwgbnVsbCxcbiAgICBwcml2YXRlIGNvbnRhaW5lcjogVnRyZWUuQ29udGFpbmVyLFxuICAgIHB1YmxpYyByZWFkb25seSBmbG93TmFtZTogc3RyaW5nIHwgbnVsbCxcbiAgICBwdWJsaWMgcmVhZG9ubHkgZ2VuZXJhdGluZ05vZGVQb3NpdGlvbjogVnRyZWUuTm9kZVBvc2l0aW9uIHwgbnVsbCxcbiAgICB3cml0aW5nTW9kZTogQ3NzLlZhbCB8IG51bGwsXG4gICAgZGlyZWN0aW9uOiBDc3MuVmFsIHwgbnVsbCxcbiAgKSB7XG4gICAgaWYgKHBhcmVudCkge1xuICAgICAgcGFyZW50LmNoaWxkcmVuLnB1c2godGhpcyk7XG4gICAgfVxuICAgIHRoaXMud3JpdGluZ01vZGUgPVxuICAgICAgd3JpdGluZ01vZGUgfHwgKHBhcmVudCAmJiBwYXJlbnQud3JpdGluZ01vZGUpIHx8IENzcy5pZGVudC5ob3Jpem9udGFsX3RiO1xuICAgIHRoaXMuZGlyZWN0aW9uID0gZGlyZWN0aW9uIHx8IChwYXJlbnQgJiYgcGFyZW50LmRpcmVjdGlvbikgfHwgQ3NzLmlkZW50Lmx0cjtcbiAgICB0aGlzLmZsb2F0U3RvcmUgPSBwYXJlbnQgPyBwYXJlbnQuZmxvYXRTdG9yZSA6IG5ldyBQYWdlRmxvYXRTdG9yZSgpO1xuICAgIGNvbnN0IHByZXZpb3VzU2libGluZyA9IHRoaXMuZ2V0UHJldmlvdXNTaWJsaW5nKCk7XG4gICAgdGhpcy5mbG9hdHNEZWZlcnJlZEZyb21QcmV2aW91cyA9IHByZXZpb3VzU2libGluZ1xuICAgICAgPyBbXS5jb25jYXQocHJldmlvdXNTaWJsaW5nLmZsb2F0c0RlZmVycmVkVG9OZXh0KVxuICAgICAgOiBbXTtcbiAgfVxuXG4gIHByaXZhdGUgZ2V0UGFyZW50KGZsb2F0UmVmZXJlbmNlOiBGbG9hdFJlZmVyZW5jZSk6IFBhZ2VGbG9hdExheW91dENvbnRleHQge1xuICAgIGlmICghdGhpcy5wYXJlbnQpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcihgTm8gUGFnZUZsb2F0TGF5b3V0Q29udGV4dCBmb3IgJHtmbG9hdFJlZmVyZW5jZX1gKTtcbiAgICB9XG4gICAgcmV0dXJuIHRoaXMucGFyZW50O1xuICB9XG5cbiAgcHJpdmF0ZSBnZXRQcmV2aW91c1NpYmxpbmdPZihcbiAgICBjaGlsZDogUGFnZUZsb2F0TGF5b3V0Q29udGV4dCB8IG51bGwsXG4gICAgZmxvYXRSZWZlcmVuY2U6IEZsb2F0UmVmZXJlbmNlIHwgbnVsbCxcbiAgICBmbG93TmFtZTogc3RyaW5nIHwgbnVsbCxcbiAgICBnZW5lcmF0aW5nTm9kZVBvc2l0aW9uOiBWdHJlZS5Ob2RlUG9zaXRpb24gfCBudWxsLFxuICApOiBQYWdlRmxvYXRMYXlvdXRDb250ZXh0IHwgbnVsbCB7XG4gICAgbGV0IGluZGV4ID0gdGhpcy5jaGlsZHJlbi5pbmRleE9mKGNoaWxkIGFzIFBhZ2VGbG9hdExheW91dENvbnRleHQpO1xuICAgIGlmIChpbmRleCA8IDApIHtcbiAgICAgIGluZGV4ID0gdGhpcy5jaGlsZHJlbi5sZW5ndGg7XG4gICAgfVxuICAgIGZvciAobGV0IGkgPSBpbmRleCAtIDE7IGkgPj0gMDsgaS0tKSB7XG4gICAgICBsZXQgcmVzdWx0ID0gdGhpcy5jaGlsZHJlbltpXTtcbiAgICAgIGlmIChcbiAgICAgICAgcmVzdWx0LmZsb2F0UmVmZXJlbmNlID09PSBmbG9hdFJlZmVyZW5jZSAmJlxuICAgICAgICByZXN1bHQuZmxvd05hbWUgPT09IGZsb3dOYW1lICYmXG4gICAgICAgIFZ0cmVlSW1wbC5pc1NhbWVOb2RlUG9zaXRpb24oXG4gICAgICAgICAgcmVzdWx0LmdlbmVyYXRpbmdOb2RlUG9zaXRpb24sXG4gICAgICAgICAgZ2VuZXJhdGluZ05vZGVQb3NpdGlvbixcbiAgICAgICAgKVxuICAgICAgKSB7XG4gICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICByZXN1bHQgPSByZXN1bHQuZ2V0UHJldmlvdXNTaWJsaW5nT2YoXG4gICAgICAgICAgbnVsbCxcbiAgICAgICAgICBmbG9hdFJlZmVyZW5jZSxcbiAgICAgICAgICBmbG93TmFtZSxcbiAgICAgICAgICBnZW5lcmF0aW5nTm9kZVBvc2l0aW9uLFxuICAgICAgICApO1xuICAgICAgICBpZiAocmVzdWx0KSB7XG4gICAgICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gbnVsbDtcbiAgfVxuXG4gIHByaXZhdGUgZ2V0UHJldmlvdXNTaWJsaW5nKCk6IFBhZ2VGbG9hdExheW91dENvbnRleHQgfCBudWxsIHtcbiAgICBsZXQgY2hpbGQ6IFBhZ2VGbG9hdExheW91dENvbnRleHQgPSB0aGlzO1xuICAgIGxldCBwYXJlbnQgPSB0aGlzLnBhcmVudDtcbiAgICBsZXQgcmVzdWx0OiBQYWdlRmxvYXRMYXlvdXRDb250ZXh0O1xuICAgIHdoaWxlIChwYXJlbnQpIHtcbiAgICAgIHJlc3VsdCA9IHBhcmVudC5nZXRQcmV2aW91c1NpYmxpbmdPZihcbiAgICAgICAgY2hpbGQsXG4gICAgICAgIHRoaXMuZmxvYXRSZWZlcmVuY2UsXG4gICAgICAgIHRoaXMuZmxvd05hbWUsXG4gICAgICAgIHRoaXMuZ2VuZXJhdGluZ05vZGVQb3NpdGlvbixcbiAgICAgICk7XG4gICAgICBpZiAocmVzdWx0KSB7XG4gICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgICB9XG4gICAgICBjaGlsZCA9IHBhcmVudDtcbiAgICAgIHBhcmVudCA9IHBhcmVudC5wYXJlbnQ7XG4gICAgfVxuICAgIHJldHVybiBudWxsO1xuICB9XG5cbiAgZ2V0Q29udGFpbmVyKGZsb2F0UmVmZXJlbmNlPzogRmxvYXRSZWZlcmVuY2UpOiBWdHJlZS5Db250YWluZXIge1xuICAgIGlmICghZmxvYXRSZWZlcmVuY2UgfHwgZmxvYXRSZWZlcmVuY2UgPT09IHRoaXMuZmxvYXRSZWZlcmVuY2UpIHtcbiAgICAgIHJldHVybiB0aGlzLmNvbnRhaW5lcjtcbiAgICB9XG4gICAgcmV0dXJuIHRoaXMuZ2V0UGFyZW50KGZsb2F0UmVmZXJlbmNlKS5nZXRDb250YWluZXIoZmxvYXRSZWZlcmVuY2UpO1xuICB9XG5cbiAgc2V0Q29udGFpbmVyKGNvbnRhaW5lcjogVnRyZWUuQ29udGFpbmVyKSB7XG4gICAgdGhpcy5jb250YWluZXIgPSBjb250YWluZXI7XG4gICAgdGhpcy5yZWF0dGFjaEZsb2F0RnJhZ21lbnRzKCk7XG4gIH1cblxuICBhZGRQYWdlRmxvYXQoZmxvYXQ6IFBhZ2VGbG9hdCkge1xuICAgIHRoaXMuZmxvYXRTdG9yZS5hZGRQYWdlRmxvYXQoZmxvYXQpO1xuICB9XG5cbiAgZ2V0UGFnZUZsb2F0TGF5b3V0Q29udGV4dChcbiAgICBmbG9hdFJlZmVyZW5jZTogRmxvYXRSZWZlcmVuY2UsXG4gICk6IFBhZ2VGbG9hdExheW91dENvbnRleHQge1xuICAgIGlmIChmbG9hdFJlZmVyZW5jZSA9PT0gdGhpcy5mbG9hdFJlZmVyZW5jZSkge1xuICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuICAgIHJldHVybiB0aGlzLmdldFBhcmVudChmbG9hdFJlZmVyZW5jZSkuZ2V0UGFnZUZsb2F0TGF5b3V0Q29udGV4dChcbiAgICAgIGZsb2F0UmVmZXJlbmNlLFxuICAgICk7XG4gIH1cblxuICBmaW5kUGFnZUZsb2F0QnlOb2RlUG9zaXRpb24oXG4gICAgbm9kZVBvc2l0aW9uOiBWdHJlZS5Ob2RlUG9zaXRpb24sXG4gICk6IFBhZ2VGbG9hdCB8IG51bGwge1xuICAgIHJldHVybiB0aGlzLmZsb2F0U3RvcmUuZmluZFBhZ2VGbG9hdEJ5Tm9kZVBvc2l0aW9uKG5vZGVQb3NpdGlvbik7XG4gIH1cblxuICBwcml2YXRlIGZvcmJpZChmbG9hdDogUGFnZUZsb2F0KSB7XG4gICAgY29uc3QgaWQgPSBmbG9hdC5nZXRJZCgpO1xuICAgIGNvbnN0IGZsb2F0UmVmZXJlbmNlID0gZmxvYXQuZmxvYXRSZWZlcmVuY2U7XG4gICAgaWYgKGZsb2F0UmVmZXJlbmNlID09PSB0aGlzLmZsb2F0UmVmZXJlbmNlKSB7XG4gICAgICBpZiAoIXRoaXMuZm9yYmlkZGVuRmxvYXRzLmluY2x1ZGVzKGlkKSkge1xuICAgICAgICB0aGlzLmZvcmJpZGRlbkZsb2F0cy5wdXNoKGlkKTtcbiAgICAgICAgY29uc3Qgc3RyYXRlZ3kgPSBuZXcgUGFnZUZsb2F0TGF5b3V0U3RyYXRlZ3lSZXNvbHZlcigpLmZpbmRCeUZsb2F0KFxuICAgICAgICAgIGZsb2F0LFxuICAgICAgICApO1xuICAgICAgICBzdHJhdGVneS5mb3JiaWQoZmxvYXQsIHRoaXMpO1xuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICBjb25zdCBwYXJlbnQgPSB0aGlzLmdldFBhcmVudChmbG9hdFJlZmVyZW5jZSk7XG4gICAgICBwYXJlbnQuZm9yYmlkKGZsb2F0KTtcbiAgICB9XG4gIH1cblxuICBpc0ZvcmJpZGRlbihmbG9hdDogUGFnZUZsb2F0KTogYm9vbGVhbiB7XG4gICAgY29uc3QgaWQgPSBmbG9hdC5nZXRJZCgpO1xuICAgIGNvbnN0IGZsb2F0UmVmZXJlbmNlID0gZmxvYXQuZmxvYXRSZWZlcmVuY2U7XG4gICAgaWYgKGZsb2F0UmVmZXJlbmNlID09PSB0aGlzLmZsb2F0UmVmZXJlbmNlKSB7XG4gICAgICByZXR1cm4gdGhpcy5mb3JiaWRkZW5GbG9hdHMuaW5jbHVkZXMoaWQpO1xuICAgIH0gZWxzZSB7XG4gICAgICBjb25zdCBwYXJlbnQgPSB0aGlzLmdldFBhcmVudChmbG9hdFJlZmVyZW5jZSk7XG4gICAgICByZXR1cm4gcGFyZW50LmlzRm9yYmlkZGVuKGZsb2F0KTtcbiAgICB9XG4gIH1cblxuICBhZGRQYWdlRmxvYXRGcmFnbWVudChcbiAgICBmbG9hdEZyYWdtZW50OiBQYWdlRmxvYXRGcmFnbWVudCxcbiAgICBkb250SW52YWxpZGF0ZT86IGJvb2xlYW4sXG4gICkge1xuICAgIGNvbnN0IGZsb2F0UmVmZXJlbmNlID0gZmxvYXRGcmFnbWVudC5mbG9hdFJlZmVyZW5jZTtcbiAgICBpZiAoZmxvYXRSZWZlcmVuY2UgIT09IHRoaXMuZmxvYXRSZWZlcmVuY2UpIHtcbiAgICAgIGNvbnN0IHBhcmVudCA9IHRoaXMuZ2V0UGFyZW50KGZsb2F0UmVmZXJlbmNlKTtcbiAgICAgIHBhcmVudC5hZGRQYWdlRmxvYXRGcmFnbWVudChmbG9hdEZyYWdtZW50LCBkb250SW52YWxpZGF0ZSk7XG4gICAgfSBlbHNlIGlmICghdGhpcy5mbG9hdEZyYWdtZW50cy5pbmNsdWRlcyhmbG9hdEZyYWdtZW50KSkge1xuICAgICAgdGhpcy5mbG9hdEZyYWdtZW50cy5wdXNoKGZsb2F0RnJhZ21lbnQpO1xuICAgICAgdGhpcy5mbG9hdEZyYWdtZW50cy5zb3J0KChmcjEsIGZyMikgPT4gZnIxLmdldE9yZGVyKCkgLSBmcjIuZ2V0T3JkZXIoKSk7XG4gICAgfVxuICAgIGlmICghZG9udEludmFsaWRhdGUpIHtcbiAgICAgIHRoaXMuaW52YWxpZGF0ZSgpO1xuICAgIH1cbiAgfVxuXG4gIHJlbW92ZVBhZ2VGbG9hdEZyYWdtZW50KFxuICAgIGZsb2F0RnJhZ21lbnQ6IFBhZ2VGbG9hdEZyYWdtZW50LFxuICAgIGRvbnRJbnZhbGlkYXRlPzogYm9vbGVhbixcbiAgKSB7XG4gICAgY29uc3QgZmxvYXRSZWZlcmVuY2UgPSBmbG9hdEZyYWdtZW50LmZsb2F0UmVmZXJlbmNlO1xuICAgIGlmIChmbG9hdFJlZmVyZW5jZSAhPT0gdGhpcy5mbG9hdFJlZmVyZW5jZSkge1xuICAgICAgY29uc3QgcGFyZW50ID0gdGhpcy5nZXRQYXJlbnQoZmxvYXRSZWZlcmVuY2UpO1xuICAgICAgcGFyZW50LnJlbW92ZVBhZ2VGbG9hdEZyYWdtZW50KGZsb2F0RnJhZ21lbnQsIGRvbnRJbnZhbGlkYXRlKTtcbiAgICB9IGVsc2Uge1xuICAgICAgY29uc3QgaW5kZXggPSB0aGlzLmZsb2F0RnJhZ21lbnRzLmluZGV4T2YoZmxvYXRGcmFnbWVudCk7XG4gICAgICBpZiAoaW5kZXggPj0gMCkge1xuICAgICAgICBjb25zdCBmcmFnbWVudCA9IHRoaXMuZmxvYXRGcmFnbWVudHMuc3BsaWNlKGluZGV4LCAxKVswXTtcbiAgICAgICAgY29uc3QgZWxlbWVudCA9IGZyYWdtZW50LmFyZWEgJiYgZnJhZ21lbnQuYXJlYS5lbGVtZW50O1xuICAgICAgICBpZiAoZWxlbWVudCAmJiBlbGVtZW50LnBhcmVudE5vZGUpIHtcbiAgICAgICAgICBlbGVtZW50LnBhcmVudE5vZGUucmVtb3ZlQ2hpbGQoZWxlbWVudCk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKCFkb250SW52YWxpZGF0ZSkge1xuICAgICAgICAgIHRoaXMuaW52YWxpZGF0ZSgpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgZmluZFBhZ2VGbG9hdEZyYWdtZW50KGZsb2F0OiBQYWdlRmxvYXQpOiBQYWdlRmxvYXRGcmFnbWVudCB8IG51bGwge1xuICAgIGlmIChmbG9hdC5mbG9hdFJlZmVyZW5jZSAhPT0gdGhpcy5mbG9hdFJlZmVyZW5jZSkge1xuICAgICAgY29uc3QgcGFyZW50ID0gdGhpcy5nZXRQYXJlbnQoZmxvYXQuZmxvYXRSZWZlcmVuY2UpO1xuICAgICAgcmV0dXJuIHBhcmVudC5maW5kUGFnZUZsb2F0RnJhZ21lbnQoZmxvYXQpO1xuICAgIH1cbiAgICBjb25zdCBpbmRleCA9IHRoaXMuZmxvYXRGcmFnbWVudHMuZmluZEluZGV4KChmKSA9PiBmLmhhc0Zsb2F0KGZsb2F0KSk7XG4gICAgaWYgKGluZGV4ID49IDApIHtcbiAgICAgIHJldHVybiB0aGlzLmZsb2F0RnJhZ21lbnRzW2luZGV4XTtcbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuIG51bGw7XG4gICAgfVxuICB9XG5cbiAgaGFzRmxvYXRGcmFnbWVudHMoY29uZGl0aW9uPzogKHAxOiBQYWdlRmxvYXRGcmFnbWVudCkgPT4gYm9vbGVhbik6IGJvb2xlYW4ge1xuICAgIGlmICh0aGlzLmZsb2F0RnJhZ21lbnRzLmxlbmd0aCA+IDApIHtcbiAgICAgIGlmICghY29uZGl0aW9uIHx8IHRoaXMuZmxvYXRGcmFnbWVudHMuc29tZShjb25kaXRpb24pKSB7XG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgfVxuICAgIH1cbiAgICBpZiAodGhpcy5wYXJlbnQpIHtcbiAgICAgIHJldHVybiB0aGlzLnBhcmVudC5oYXNGbG9hdEZyYWdtZW50cyhjb25kaXRpb24pO1xuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICB9XG5cbiAgaGFzQ29udGludWluZ0Zsb2F0RnJhZ21lbnRzSW5GbG93KGZsb3dOYW1lOiBzdHJpbmcpOiBib29sZWFuIHtcbiAgICByZXR1cm4gdGhpcy5oYXNGbG9hdEZyYWdtZW50cyhcbiAgICAgIChmcmFnbWVudCkgPT4gZnJhZ21lbnQuY29udGludWVzICYmIGZyYWdtZW50LmdldEZsb3dOYW1lKCkgPT09IGZsb3dOYW1lLFxuICAgICk7XG4gIH1cblxuICByZWdpc3RlclBhZ2VGbG9hdEFuY2hvcihmbG9hdDogUGFnZUZsb2F0LCBhbmNob3JWaWV3Tm9kZTogTm9kZSkge1xuICAgIHRoaXMuZmxvYXRBbmNob3JzW2Zsb2F0LmdldElkKCldID0gYW5jaG9yVmlld05vZGU7XG4gIH1cblxuICBjb2xsZWN0UGFnZUZsb2F0QW5jaG9ycygpIHtcbiAgICBjb25zdCBhbmNob3JzID0gT2JqZWN0LmFzc2lnbih7fSwgdGhpcy5mbG9hdEFuY2hvcnMpO1xuICAgIHJldHVybiB0aGlzLmNoaWxkcmVuLnJlZHVjZShcbiAgICAgIChwcmV2LCBjaGlsZCkgPT4gT2JqZWN0LmFzc2lnbihwcmV2LCBjaGlsZC5jb2xsZWN0UGFnZUZsb2F0QW5jaG9ycygpKSxcbiAgICAgIGFuY2hvcnMsXG4gICAgKTtcbiAgfVxuXG4gIGlzQW5jaG9yQWxyZWFkeUFwcGVhcmVkKGZsb2F0SWQ6IFBhZ2VGbG9hdElEKSB7XG4gICAgY29uc3QgZGVmZXJyZWRGbG9hdHMgPSB0aGlzLmdldERlZmVycmVkUGFnZUZsb2F0Q29udGludWF0aW9ucygpO1xuICAgIGlmIChkZWZlcnJlZEZsb2F0cy5zb21lKChjb250KSA9PiBjb250LmZsb2F0LmdldElkKCkgPT09IGZsb2F0SWQpKSB7XG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG4gICAgY29uc3QgZmxvYXRBbmNob3JzID0gdGhpcy5jb2xsZWN0UGFnZUZsb2F0QW5jaG9ycygpO1xuICAgIGNvbnN0IGFuY2hvclZpZXdOb2RlID0gZmxvYXRBbmNob3JzW2Zsb2F0SWRdO1xuICAgIGlmICghYW5jaG9yVmlld05vZGUpIHtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gICAgaWYgKHRoaXMuY29udGFpbmVyICYmIHRoaXMuY29udGFpbmVyLmVsZW1lbnQpIHtcbiAgICAgIHJldHVybiB0aGlzLmNvbnRhaW5lci5lbGVtZW50LmNvbnRhaW5zKGFuY2hvclZpZXdOb2RlKTtcbiAgICB9XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG5cbiAgZGVmZXJQYWdlRmxvYXQoY29udGludWF0aW9uOiBQYWdlRmxvYXRDb250aW51YXRpb24pIHtcbiAgICBjb25zdCBmbG9hdCA9IGNvbnRpbnVhdGlvbi5mbG9hdDtcbiAgICBpZiAoZmxvYXQuZmxvYXRSZWZlcmVuY2UgPT09IHRoaXMuZmxvYXRSZWZlcmVuY2UpIHtcbiAgICAgIGNvbnN0IGluZGV4ID0gdGhpcy5mbG9hdHNEZWZlcnJlZFRvTmV4dC5maW5kSW5kZXgoXG4gICAgICAgIChjKSA9PiBjLmZsb2F0ID09PSBmbG9hdCxcbiAgICAgICk7XG4gICAgICBpZiAoaW5kZXggPj0gMCkge1xuICAgICAgICB0aGlzLmZsb2F0c0RlZmVycmVkVG9OZXh0LnNwbGljZShpbmRleCwgMSwgY29udGludWF0aW9uKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHRoaXMuZmxvYXRzRGVmZXJyZWRUb05leHQucHVzaChjb250aW51YXRpb24pO1xuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICBjb25zdCBwYXJlbnQgPSB0aGlzLmdldFBhcmVudChmbG9hdC5mbG9hdFJlZmVyZW5jZSk7XG4gICAgICBwYXJlbnQuZGVmZXJQYWdlRmxvYXQoY29udGludWF0aW9uKTtcbiAgICB9XG4gIH1cblxuICBoYXNQcmVjZWRpbmdGbG9hdHNEZWZlcnJlZFRvTmV4dChcbiAgICBmbG9hdDogUGFnZUZsb2F0LFxuICAgIGlnbm9yZVJlZmVyZW5jZT86IGJvb2xlYW4sXG4gICk6IGJvb2xlYW4ge1xuICAgIGlmICghaWdub3JlUmVmZXJlbmNlICYmIGZsb2F0LmZsb2F0UmVmZXJlbmNlICE9PSB0aGlzLmZsb2F0UmVmZXJlbmNlKSB7XG4gICAgICByZXR1cm4gdGhpcy5nZXRQYXJlbnQoXG4gICAgICAgIGZsb2F0LmZsb2F0UmVmZXJlbmNlLFxuICAgICAgKS5oYXNQcmVjZWRpbmdGbG9hdHNEZWZlcnJlZFRvTmV4dChmbG9hdCwgZmFsc2UpO1xuICAgIH1cbiAgICBjb25zdCBvcmRlciA9IGZsb2F0LmdldE9yZGVyKCk7XG4gICAgY29uc3QgaGFzUHJlY2VkaW5nRmxvYXRzRGVmZXJyZWRUb05leHQgPSB0aGlzLmZsb2F0c0RlZmVycmVkVG9OZXh0LnNvbWUoXG4gICAgICAoYykgPT4gYy5mbG9hdC5nZXRPcmRlcigpIDwgb3JkZXIgJiYgIWZsb2F0LmlzQWxsb3dlZFRvUHJlY2VkZShjLmZsb2F0KSxcbiAgICApO1xuICAgIGlmIChoYXNQcmVjZWRpbmdGbG9hdHNEZWZlcnJlZFRvTmV4dCkge1xuICAgICAgcmV0dXJuIHRydWU7XG4gICAgfSBlbHNlIGlmICh0aGlzLnBhcmVudCkge1xuICAgICAgcmV0dXJuIHRoaXMucGFyZW50Lmhhc1ByZWNlZGluZ0Zsb2F0c0RlZmVycmVkVG9OZXh0KGZsb2F0LCB0cnVlKTtcbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgfVxuXG4gIGdldExhc3RGb2xsb3dpbmdGbG9hdEluRnJhZ21lbnRzKGZsb2F0OiBQYWdlRmxvYXQpOiBQYWdlRmxvYXQgfCBudWxsIHtcbiAgICBjb25zdCBvcmRlciA9IGZsb2F0LmdldE9yZGVyKCk7XG4gICAgbGV0IGxhc3RGb2xsb3dpbmc6IFBhZ2VGbG9hdCA9IG51bGw7XG4gICAgdGhpcy5mbG9hdEZyYWdtZW50cy5mb3JFYWNoKChmcmFnbWVudCkgPT4ge1xuICAgICAgZnJhZ21lbnQuY29udGludWF0aW9ucy5mb3JFYWNoKChjKSA9PiB7XG4gICAgICAgIGNvbnN0IGYgPSBjLmZsb2F0O1xuICAgICAgICBjb25zdCBvID0gZi5nZXRPcmRlcigpO1xuICAgICAgICBpZiAobyA+IG9yZGVyICYmICghbGFzdEZvbGxvd2luZyB8fCBvID4gbGFzdEZvbGxvd2luZy5nZXRPcmRlcigpKSkge1xuICAgICAgICAgIGxhc3RGb2xsb3dpbmcgPSBmO1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgICB9KTtcbiAgICBpZiAodGhpcy5wYXJlbnQpIHtcbiAgICAgIGNvbnN0IGxhc3RGb2xsb3dpbmdPZlBhcmVudCA9IHRoaXMucGFyZW50LmdldExhc3RGb2xsb3dpbmdGbG9hdEluRnJhZ21lbnRzKFxuICAgICAgICBmbG9hdCxcbiAgICAgICk7XG4gICAgICBpZiAoXG4gICAgICAgIGxhc3RGb2xsb3dpbmdPZlBhcmVudCAmJlxuICAgICAgICAoIWxhc3RGb2xsb3dpbmcgfHxcbiAgICAgICAgICBsYXN0Rm9sbG93aW5nT2ZQYXJlbnQuZ2V0T3JkZXIoKSA+IGxhc3RGb2xsb3dpbmcuZ2V0T3JkZXIoKSlcbiAgICAgICkge1xuICAgICAgICBsYXN0Rm9sbG93aW5nID0gbGFzdEZvbGxvd2luZ09mUGFyZW50O1xuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gbGFzdEZvbGxvd2luZztcbiAgfVxuXG4gIGdldERlZmVycmVkUGFnZUZsb2F0Q29udGludWF0aW9ucyhcbiAgICBmbG93TmFtZT86IHN0cmluZyB8IG51bGwsXG4gICk6IFBhZ2VGbG9hdENvbnRpbnVhdGlvbltdIHtcbiAgICBmbG93TmFtZSA9IGZsb3dOYW1lIHx8IHRoaXMuZmxvd05hbWU7XG4gICAgbGV0IHJlc3VsdCA9IHRoaXMuZmxvYXRzRGVmZXJyZWRGcm9tUHJldmlvdXMuZmlsdGVyKFxuICAgICAgKGNvbnQpID0+ICFmbG93TmFtZSB8fCBjb250LmZsb2F0LmZsb3dOYW1lID09PSBmbG93TmFtZSxcbiAgICApO1xuICAgIGlmICh0aGlzLnBhcmVudCkge1xuICAgICAgcmVzdWx0ID0gdGhpcy5wYXJlbnRcbiAgICAgICAgLmdldERlZmVycmVkUGFnZUZsb2F0Q29udGludWF0aW9ucyhmbG93TmFtZSlcbiAgICAgICAgLmNvbmNhdChyZXN1bHQpO1xuICAgIH1cbiAgICByZXR1cm4gcmVzdWx0LnNvcnQoKGMxLCBjMikgPT4gYzEuZmxvYXQuZ2V0T3JkZXIoKSAtIGMyLmZsb2F0LmdldE9yZGVyKCkpO1xuICB9XG5cbiAgZ2V0UGFnZUZsb2F0Q29udGludWF0aW9uc0RlZmVycmVkVG9OZXh0KFxuICAgIGZsb3dOYW1lPzogc3RyaW5nIHwgbnVsbCxcbiAgKTogUGFnZUZsb2F0Q29udGludWF0aW9uW10ge1xuICAgIGZsb3dOYW1lID0gZmxvd05hbWUgfHwgdGhpcy5mbG93TmFtZTtcbiAgICBjb25zdCByZXN1bHQgPSB0aGlzLmZsb2F0c0RlZmVycmVkVG9OZXh0LmZpbHRlcihcbiAgICAgIChjb250KSA9PiAhZmxvd05hbWUgfHwgY29udC5mbG9hdC5mbG93TmFtZSA9PT0gZmxvd05hbWUsXG4gICAgKTtcbiAgICBpZiAodGhpcy5wYXJlbnQpIHtcbiAgICAgIHJldHVybiB0aGlzLnBhcmVudFxuICAgICAgICAuZ2V0UGFnZUZsb2F0Q29udGludWF0aW9uc0RlZmVycmVkVG9OZXh0KGZsb3dOYW1lKVxuICAgICAgICAuY29uY2F0KHJlc3VsdCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfVxuICB9XG5cbiAgZ2V0RmxvYXRzRGVmZXJyZWRUb05leHRJbkNoaWxkQ29udGV4dHMoKTogUGFnZUZsb2F0W10ge1xuICAgIGxldCByZXN1bHQgPSBbXTtcbiAgICBjb25zdCBkb25lID0gW107XG4gICAgZm9yIChsZXQgaSA9IHRoaXMuY2hpbGRyZW4ubGVuZ3RoIC0gMTsgaSA+PSAwOyBpLS0pIHtcbiAgICAgIGNvbnN0IGNoaWxkID0gdGhpcy5jaGlsZHJlbltpXTtcbiAgICAgIGlmIChkb25lLmluY2x1ZGVzKGNoaWxkLmZsb3dOYW1lKSkge1xuICAgICAgICBjb250aW51ZTtcbiAgICAgIH1cbiAgICAgIGRvbmUucHVzaChjaGlsZC5mbG93TmFtZSk7XG4gICAgICByZXN1bHQgPSByZXN1bHQuY29uY2F0KGNoaWxkLmZsb2F0c0RlZmVycmVkVG9OZXh0Lm1hcCgoYykgPT4gYy5mbG9hdCkpO1xuICAgICAgcmVzdWx0ID0gcmVzdWx0LmNvbmNhdChjaGlsZC5nZXRGbG9hdHNEZWZlcnJlZFRvTmV4dEluQ2hpbGRDb250ZXh0cygpKTtcbiAgICB9XG4gICAgcmV0dXJuIHJlc3VsdDtcbiAgfVxuXG4gIGNoZWNrQW5kRm9yYmlkTm90QWxsb3dlZEZsb2F0KCk6IGJvb2xlYW4ge1xuICAgIGlmICh0aGlzLmNoZWNrQW5kRm9yYmlkRmxvYXRGb2xsb3dpbmdEZWZlcnJlZEZsb2F0KCkpIHtcbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cbiAgICBmb3IgKGxldCBpID0gdGhpcy5mbG9hdEZyYWdtZW50cy5sZW5ndGggLSAxOyBpID49IDA7IGktLSkge1xuICAgICAgY29uc3QgZnJhZ21lbnQgPSB0aGlzLmZsb2F0RnJhZ21lbnRzW2ldO1xuICAgICAgY29uc3Qgbm90QWxsb3dlZEZsb2F0ID0gZnJhZ21lbnQuZmluZE5vdEFsbG93ZWRGbG9hdCh0aGlzKTtcbiAgICAgIGlmIChub3RBbGxvd2VkRmxvYXQpIHtcbiAgICAgICAgaWYgKHRoaXMubG9ja2VkKSB7XG4gICAgICAgICAgdGhpcy5pbnZhbGlkYXRlKCk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgdGhpcy5yZW1vdmVQYWdlRmxvYXRGcmFnbWVudChmcmFnbWVudCk7XG4gICAgICAgICAgdGhpcy5mb3JiaWQobm90QWxsb3dlZEZsb2F0KTtcblxuICAgICAgICAgIC8vIElmIHRoZSByZW1vdmVkIGZsb2F0IGlzIGEgYmxvY2stZW5kL2lubGluZS1lbmQgZmxvYXQsXG4gICAgICAgICAgLy8gd2Ugc2hvdWxkIHJlLWxheW91dCBwcmVjZWRpbmcgZmxvYXRzIHdpdGggdGhlIHNhbWUgZmxvYXQgZGlyZWN0aW9uLlxuICAgICAgICAgIHRoaXMucmVtb3ZlRW5kRmxvYXRGcmFnbWVudHMoZnJhZ21lbnQuZmxvYXRTaWRlKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgIH1cbiAgICB9XG4gICAgaWYgKHRoaXMuZmxvYXRSZWZlcmVuY2UgPT09IEZsb2F0UmVmZXJlbmNlLlJFR0lPTiAmJiB0aGlzLnBhcmVudC5sb2NrZWQpIHtcbiAgICAgIHJldHVybiB0aGlzLnBhcmVudC5jaGVja0FuZEZvcmJpZE5vdEFsbG93ZWRGbG9hdCgpO1xuICAgIH1cbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cblxuICBjaGVja0FuZEZvcmJpZEZsb2F0Rm9sbG93aW5nRGVmZXJyZWRGbG9hdCgpOiBib29sZWFuIHtcbiAgICBjb25zdCBkZWZlcnJlZEZsb2F0cyA9IHRoaXMuZ2V0RmxvYXRzRGVmZXJyZWRUb05leHRJbkNoaWxkQ29udGV4dHMoKTtcbiAgICBjb25zdCBmbG9hdHNJbkZyYWdtZW50cyA9IHRoaXMuZmxvYXRGcmFnbWVudHMucmVkdWNlKFxuICAgICAgKHIsIGZyKSA9PiByLmNvbmNhdChmci5jb250aW51YXRpb25zLm1hcCgoYykgPT4gYy5mbG9hdCkpLFxuICAgICAgW10sXG4gICAgKTtcbiAgICBmbG9hdHNJbkZyYWdtZW50cy5zb3J0KChmMSwgZjIpID0+IGYyLmdldE9yZGVyKCkgLSBmMS5nZXRPcmRlcigpKTtcbiAgICBmb3IgKGNvbnN0IGZsb2F0IG9mIGZsb2F0c0luRnJhZ21lbnRzKSB7XG4gICAgICBjb25zdCBvcmRlciA9IGZsb2F0LmdldE9yZGVyKCk7XG4gICAgICBpZiAoXG4gICAgICAgIGRlZmVycmVkRmxvYXRzLnNvbWUoXG4gICAgICAgICAgKGQpID0+ICFmbG9hdC5pc0FsbG93ZWRUb1ByZWNlZGUoZCkgJiYgb3JkZXIgPiBkLmdldE9yZGVyKCksXG4gICAgICAgIClcbiAgICAgICkge1xuICAgICAgICBpZiAodGhpcy5sb2NrZWQpIHtcbiAgICAgICAgICB0aGlzLmludmFsaWRhdGUoKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICB0aGlzLmZvcmJpZChmbG9hdCk7XG4gICAgICAgICAgY29uc3QgZnJhZ21lbnQgPSB0aGlzLmZpbmRQYWdlRmxvYXRGcmFnbWVudChmbG9hdCk7XG4gICAgICAgICAgQXNzZXJ0cy5hc3NlcnQoZnJhZ21lbnQpO1xuICAgICAgICAgIHRoaXMucmVtb3ZlUGFnZUZsb2F0RnJhZ21lbnQoZnJhZ21lbnQpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cblxuICBmaW5pc2goKSB7XG4gICAgaWYgKHRoaXMuY2hlY2tBbmRGb3JiaWROb3RBbGxvd2VkRmxvYXQoKSkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBmb3IgKGxldCBpID0gdGhpcy5mbG9hdHNEZWZlcnJlZFRvTmV4dC5sZW5ndGggLSAxOyBpID49IDA7IGktLSkge1xuICAgICAgY29uc3QgY29udGludWF0aW9uID0gdGhpcy5mbG9hdHNEZWZlcnJlZFRvTmV4dFtpXTtcbiAgICAgIGlmICghY29udGludWF0aW9uLmZsb2F0LmlzQWxsb3dlZE9uQ29udGV4dCh0aGlzKSkge1xuICAgICAgICBpZiAodGhpcy5sb2NrZWQpIHtcbiAgICAgICAgICB0aGlzLmludmFsaWRhdGUoKTtcbiAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5mbG9hdHNEZWZlcnJlZFRvTmV4dC5zcGxpY2UoaSwgMSk7XG4gICAgICB9XG4gICAgfVxuICAgIHRoaXMuZmxvYXRzRGVmZXJyZWRGcm9tUHJldmlvdXMuZm9yRWFjaCgoY29udGludWF0aW9uKSA9PiB7XG4gICAgICBpZiAoXG4gICAgICAgIHRoaXMuZmxvYXRzRGVmZXJyZWRUb05leHQuZmluZEluZGV4KChjKSA9PiBjb250aW51YXRpb24uZXF1YWxzKGMpKSA+PSAwXG4gICAgICApIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuICAgICAgaWYgKHRoaXMuZmxvYXRGcmFnbWVudHMuc29tZSgoZikgPT4gZi5oYXNGbG9hdChjb250aW51YXRpb24uZmxvYXQpKSkge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG4gICAgICB0aGlzLmZsb2F0c0RlZmVycmVkVG9OZXh0LnB1c2goY29udGludWF0aW9uKTtcbiAgICB9KTtcbiAgfVxuXG4gIGhhc1NhbWVDb250YWluZXJBcyhvdGhlcjogUGFnZUZsb2F0TGF5b3V0Q29udGV4dCk6IGJvb2xlYW4ge1xuICAgIHJldHVybiAoXG4gICAgICAhIXRoaXMuY29udGFpbmVyICYmXG4gICAgICAhIW90aGVyLmNvbnRhaW5lciAmJlxuICAgICAgdGhpcy5jb250YWluZXIuZWxlbWVudCA9PT0gb3RoZXIuY29udGFpbmVyLmVsZW1lbnRcbiAgICApO1xuICB9XG5cbiAgaW52YWxpZGF0ZSgpIHtcbiAgICB0aGlzLmludmFsaWRhdGVkID0gdHJ1ZTtcbiAgICBpZiAodGhpcy5sb2NrZWQpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgaWYgKHRoaXMuY29udGFpbmVyKSB7XG4gICAgICB0aGlzLmNoaWxkcmVuLmZvckVhY2goKGNoaWxkKSA9PiB7XG4gICAgICAgIC8vIFNpbmNlIHRoZSBzYW1lIGNvbnRhaW5lciBlbGVtZW50IGlzIHNoYXJlZCBieSBhIHJlZ2lvbiBwYWdlIGZsb2F0XG4gICAgICAgIC8vIGxheW91dCBjb250ZXh0IGFuZCBhIGNvbHVtbiBwYWdlIGZsb2F0IGxheW91dCBjb250ZXh0IGluIGEgc2luZ2xlXG4gICAgICAgIC8vIGNvbHVtbiByZWdpb24sIHZpZXcgZWxlbWVudHMgb2YgZmxvYXQgZnJhZ21lbnRzIG9mIHRoZSBjaGlsZCAoY29sdW1uKVxuICAgICAgICAvLyBjb250ZXh0IG5lZWQgdG8gYmUgcmVtb3ZlZCBoZXJlLlxuICAgICAgICBpZiAodGhpcy5oYXNTYW1lQ29udGFpbmVyQXMoY2hpbGQpKSB7XG4gICAgICAgICAgY2hpbGQuZmxvYXRGcmFnbWVudHMuZm9yRWFjaCgoZnJhZ21lbnQpID0+IHtcbiAgICAgICAgICAgIGNvbnN0IGVsZW0gPSBmcmFnbWVudC5hcmVhLmVsZW1lbnQ7XG4gICAgICAgICAgICBpZiAoZWxlbSAmJiBlbGVtLnBhcmVudE5vZGUpIHtcbiAgICAgICAgICAgICAgZWxlbS5wYXJlbnROb2RlLnJlbW92ZUNoaWxkKGVsZW0pO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgICAgIHRoaXMuY29udGFpbmVyLmNsZWFyKCk7XG4gICAgfVxuICAgIHRoaXMuY2hpbGRyZW4uZm9yRWFjaCgoY2hpbGQpID0+IHtcbiAgICAgIGNoaWxkLmxheW91dENvbnN0cmFpbnRzLnNwbGljZSgwKTtcbiAgICB9KTtcbiAgICB0aGlzLmNoaWxkcmVuLnNwbGljZSgwKTtcbiAgICBPYmplY3Qua2V5cyh0aGlzLmZsb2F0QW5jaG9ycykuZm9yRWFjaCgoaykgPT4ge1xuICAgICAgZGVsZXRlIHRoaXMuZmxvYXRBbmNob3JzW2tdO1xuICAgIH0pO1xuICB9XG5cbiAgZGV0YWNoQ2hpbGRyZW4oKTogUGFnZUZsb2F0TGF5b3V0Q29udGV4dFtdIHtcbiAgICBjb25zdCBjaGlsZHJlbiA9IHRoaXMuY2hpbGRyZW4uc3BsaWNlKDApO1xuICAgIGNoaWxkcmVuLmZvckVhY2goKGNoaWxkKSA9PiB7XG4gICAgICBjaGlsZC5mbG9hdEZyYWdtZW50cy5mb3JFYWNoKChmcmFnbWVudCkgPT4ge1xuICAgICAgICBjb25zdCBlbGVtID0gZnJhZ21lbnQuYXJlYS5lbGVtZW50O1xuICAgICAgICBpZiAoZWxlbSAmJiBlbGVtLnBhcmVudE5vZGUpIHtcbiAgICAgICAgICBlbGVtLnBhcmVudE5vZGUucmVtb3ZlQ2hpbGQoZWxlbSk7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgIH0pO1xuICAgIHJldHVybiBjaGlsZHJlbjtcbiAgfVxuXG4gIGF0dGFjaENoaWxkcmVuKGNoaWxkcmVuOiBQYWdlRmxvYXRMYXlvdXRDb250ZXh0W10pIHtcbiAgICBjaGlsZHJlbi5mb3JFYWNoKChjaGlsZCkgPT4ge1xuICAgICAgdGhpcy5jaGlsZHJlbi5wdXNoKGNoaWxkKTtcbiAgICAgIGNoaWxkLnJlYXR0YWNoRmxvYXRGcmFnbWVudHMoKTtcbiAgICB9KTtcbiAgfVxuXG4gIGlzSW52YWxpZGF0ZWQoKSB7XG4gICAgcmV0dXJuIHRoaXMuaW52YWxpZGF0ZWQgfHwgKCEhdGhpcy5wYXJlbnQgJiYgdGhpcy5wYXJlbnQuaXNJbnZhbGlkYXRlZCgpKTtcbiAgfVxuXG4gIHZhbGlkYXRlKCkge1xuICAgIHRoaXMuaW52YWxpZGF0ZWQgPSBmYWxzZTtcbiAgfVxuXG4gIHByaXZhdGUgdG9Mb2dpY2FsKHNpZGU6IHN0cmluZyk6IHN0cmluZyB7XG4gICAgY29uc3Qgd3JpdGluZ01vZGUgPSB0aGlzLndyaXRpbmdNb2RlLnRvU3RyaW5nKCk7XG4gICAgY29uc3QgZGlyZWN0aW9uID0gdGhpcy5kaXJlY3Rpb24udG9TdHJpbmcoKTtcbiAgICByZXR1cm4gQ3NzTG9naWNhbFV0aWwudG9Mb2dpY2FsKHNpZGUsIHdyaXRpbmdNb2RlLCBkaXJlY3Rpb24pO1xuICB9XG5cbiAgcHJpdmF0ZSB0b1BoeXNpY2FsKHNpZGU6IHN0cmluZyk6IHN0cmluZyB7XG4gICAgY29uc3Qgd3JpdGluZ01vZGUgPSB0aGlzLndyaXRpbmdNb2RlLnRvU3RyaW5nKCk7XG4gICAgY29uc3QgZGlyZWN0aW9uID0gdGhpcy5kaXJlY3Rpb24udG9TdHJpbmcoKTtcbiAgICByZXR1cm4gQ3NzTG9naWNhbFV0aWwudG9QaHlzaWNhbChzaWRlLCB3cml0aW5nTW9kZSwgZGlyZWN0aW9uKTtcbiAgfVxuXG4gIHJlbW92ZUVuZEZsb2F0RnJhZ21lbnRzKGZsb2F0U2lkZTogc3RyaW5nKSB7XG4gICAgY29uc3QgbG9naWNhbEZsb2F0U2lkZSA9IHRoaXMudG9Mb2dpY2FsKGZsb2F0U2lkZSk7XG4gICAgaWYgKGxvZ2ljYWxGbG9hdFNpZGUgPT09IFwiYmxvY2stZW5kXCIgfHwgbG9naWNhbEZsb2F0U2lkZSA9PT0gXCJpbmxpbmUtZW5kXCIpIHtcbiAgICAgIGxldCBpID0gMDtcbiAgICAgIHdoaWxlIChpIDwgdGhpcy5mbG9hdEZyYWdtZW50cy5sZW5ndGgpIHtcbiAgICAgICAgY29uc3QgZnJhZ21lbnQgPSB0aGlzLmZsb2F0RnJhZ21lbnRzW2ldO1xuICAgICAgICBjb25zdCBsb2dpY2FsRmxvYXRTaWRlMiA9IHRoaXMudG9Mb2dpY2FsKGZyYWdtZW50LmZsb2F0U2lkZSk7XG4gICAgICAgIGlmIChsb2dpY2FsRmxvYXRTaWRlMiA9PT0gbG9naWNhbEZsb2F0U2lkZSkge1xuICAgICAgICAgIHRoaXMucmVtb3ZlUGFnZUZsb2F0RnJhZ21lbnQoZnJhZ21lbnQpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGkrKztcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIHN0YXNoRW5kRmxvYXRGcmFnbWVudHMoZmxvYXQ6IFBhZ2VGbG9hdCkge1xuICAgIGNvbnN0IGZsb2F0UmVmZXJlbmNlID0gZmxvYXQuZmxvYXRSZWZlcmVuY2U7XG4gICAgaWYgKGZsb2F0UmVmZXJlbmNlICE9PSB0aGlzLmZsb2F0UmVmZXJlbmNlKSB7XG4gICAgICB0aGlzLmdldFBhcmVudChmbG9hdFJlZmVyZW5jZSkuc3Rhc2hFbmRGbG9hdEZyYWdtZW50cyhmbG9hdCk7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIGNvbnN0IGxvZ2ljYWxGbG9hdFNpZGUgPSB0aGlzLnRvTG9naWNhbChmbG9hdC5mbG9hdFNpZGUpO1xuICAgIGlmIChcbiAgICAgIGxvZ2ljYWxGbG9hdFNpZGUgPT09IFwiYmxvY2stZW5kXCIgfHxcbiAgICAgIGxvZ2ljYWxGbG9hdFNpZGUgPT09IFwic25hcC1ibG9ja1wiIHx8XG4gICAgICBsb2dpY2FsRmxvYXRTaWRlID09PSBcImlubGluZS1lbmRcIlxuICAgICkge1xuICAgICAgbGV0IGkgPSAwO1xuICAgICAgd2hpbGUgKGkgPCB0aGlzLmZsb2F0RnJhZ21lbnRzLmxlbmd0aCkge1xuICAgICAgICBjb25zdCBmcmFnbWVudCA9IHRoaXMuZmxvYXRGcmFnbWVudHNbaV07XG4gICAgICAgIGNvbnN0IGZyYWdtZW50RmxvYXRTaWRlID0gdGhpcy50b0xvZ2ljYWwoZnJhZ21lbnQuZmxvYXRTaWRlKTtcbiAgICAgICAgaWYgKFxuICAgICAgICAgIChmcmFnbWVudEZsb2F0U2lkZSA9PT0gbG9naWNhbEZsb2F0U2lkZSB8fFxuICAgICAgICAgICAgKGxvZ2ljYWxGbG9hdFNpZGUgPT09IFwic25hcC1ibG9ja1wiICYmXG4gICAgICAgICAgICAgIGZyYWdtZW50RmxvYXRTaWRlID09PSBcImJsb2NrLWVuZFwiKSkgJiZcbiAgICAgICAgICBmcmFnbWVudC5zaG91bGRCZVN0YXNoZWRCZWZvcmUoZmxvYXQpXG4gICAgICAgICkge1xuICAgICAgICAgIHRoaXMuc3Rhc2hlZEZsb2F0RnJhZ21lbnRzLnB1c2goZnJhZ21lbnQpO1xuICAgICAgICAgIHRoaXMuZmxvYXRGcmFnbWVudHMuc3BsaWNlKGksIDEpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGkrKztcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIHJlc3RvcmVTdGFzaGVkRnJhZ21lbnRzKGZsb2F0UmVmZXJlbmNlOiBGbG9hdFJlZmVyZW5jZSkge1xuICAgIGlmIChmbG9hdFJlZmVyZW5jZSAhPT0gdGhpcy5mbG9hdFJlZmVyZW5jZSkge1xuICAgICAgdGhpcy5nZXRQYXJlbnQoZmxvYXRSZWZlcmVuY2UpLnJlc3RvcmVTdGFzaGVkRnJhZ21lbnRzKGZsb2F0UmVmZXJlbmNlKTtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgdGhpcy5zdGFzaGVkRmxvYXRGcmFnbWVudHMuZm9yRWFjaCgoc3Rhc2hlZCkgPT4ge1xuICAgICAgdGhpcy5hZGRQYWdlRmxvYXRGcmFnbWVudChzdGFzaGVkLCB0cnVlKTtcbiAgICB9KTtcbiAgICB0aGlzLnN0YXNoZWRGbG9hdEZyYWdtZW50cy5zcGxpY2UoMCk7XG4gIH1cblxuICBkaXNjYXJkU3Rhc2hlZEZyYWdtZW50cyhmbG9hdFJlZmVyZW5jZTogRmxvYXRSZWZlcmVuY2UpIHtcbiAgICBpZiAoZmxvYXRSZWZlcmVuY2UgIT09IHRoaXMuZmxvYXRSZWZlcmVuY2UpIHtcbiAgICAgIHRoaXMuZ2V0UGFyZW50KGZsb2F0UmVmZXJlbmNlKS5kaXNjYXJkU3Rhc2hlZEZyYWdtZW50cyhmbG9hdFJlZmVyZW5jZSk7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIHRoaXMuc3Rhc2hlZEZsb2F0RnJhZ21lbnRzLnNwbGljZSgwKTtcbiAgfVxuXG4gIGdldFN0YXNoZWRGbG9hdEZyYWdtZW50cyhcbiAgICBmbG9hdFJlZmVyZW5jZTogRmxvYXRSZWZlcmVuY2UsXG4gICk6IFBhZ2VGbG9hdEZyYWdtZW50W10ge1xuICAgIGlmIChmbG9hdFJlZmVyZW5jZSA9PT0gdGhpcy5mbG9hdFJlZmVyZW5jZSkge1xuICAgICAgcmV0dXJuIHRoaXMuc3Rhc2hlZEZsb2F0RnJhZ21lbnRzXG4gICAgICAgIC5jb25jYXQoKVxuICAgICAgICAuc29ydCgoZnIxLCBmcjIpID0+IGZyMi5nZXRPcmRlcigpIC0gZnIxLmdldE9yZGVyKCkpOyAvLyByZXR1cm4gaW4gcmV2ZXJzZSBvcmRlclxuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gdGhpcy5nZXRQYXJlbnQoZmxvYXRSZWZlcmVuY2UpLmdldFN0YXNoZWRGbG9hdEZyYWdtZW50cyhcbiAgICAgICAgZmxvYXRSZWZlcmVuY2UsXG4gICAgICApO1xuICAgIH1cbiAgfVxuXG4gIHByaXZhdGUgZ2V0TGltaXRWYWx1ZShcbiAgICBzaWRlOiBzdHJpbmcsXG4gICAgbGF5b3V0Q29udGV4dDogVnRyZWUuTGF5b3V0Q29udGV4dCxcbiAgICBjbGllbnRMYXlvdXQ6IFZ0cmVlLkNsaWVudExheW91dCxcbiAgICBjb25kaXRpb24/OiAocDE6IFBhZ2VGbG9hdEZyYWdtZW50LCBwMjogUGFnZUZsb2F0TGF5b3V0Q29udGV4dCkgPT4gYm9vbGVhbixcbiAgKTogbnVtYmVyIHtcbiAgICBBc3NlcnRzLmFzc2VydCh0aGlzLmNvbnRhaW5lcik7XG4gICAgY29uc3QgbG9naWNhbFNpZGUgPSB0aGlzLnRvTG9naWNhbChzaWRlKTtcbiAgICBjb25zdCBwaHlzaWNhbFNpZGUgPSB0aGlzLnRvUGh5c2ljYWwoc2lkZSk7XG4gICAgY29uc3QgbGltaXQgPSB0aGlzLmdldExpbWl0VmFsdWVJbm5lcihcbiAgICAgIGxvZ2ljYWxTaWRlLFxuICAgICAgbGF5b3V0Q29udGV4dCxcbiAgICAgIGNsaWVudExheW91dCxcbiAgICAgIGNvbmRpdGlvbixcbiAgICApO1xuICAgIGlmICh0aGlzLnBhcmVudCAmJiB0aGlzLnBhcmVudC5jb250YWluZXIpIHtcbiAgICAgIGNvbnN0IHBhcmVudExpbWl0ID0gdGhpcy5wYXJlbnQuZ2V0TGltaXRWYWx1ZShcbiAgICAgICAgcGh5c2ljYWxTaWRlLFxuICAgICAgICBsYXlvdXRDb250ZXh0LFxuICAgICAgICBjbGllbnRMYXlvdXQsXG4gICAgICAgIGNvbmRpdGlvbixcbiAgICAgICk7XG4gICAgICBzd2l0Y2ggKHBoeXNpY2FsU2lkZSkge1xuICAgICAgICBjYXNlIFwidG9wXCI6XG4gICAgICAgICAgcmV0dXJuIE1hdGgubWF4KGxpbWl0LCBwYXJlbnRMaW1pdCk7XG4gICAgICAgIGNhc2UgXCJsZWZ0XCI6XG4gICAgICAgICAgcmV0dXJuIE1hdGgubWF4KGxpbWl0LCBwYXJlbnRMaW1pdCk7XG4gICAgICAgIGNhc2UgXCJib3R0b21cIjpcbiAgICAgICAgICByZXR1cm4gTWF0aC5taW4obGltaXQsIHBhcmVudExpbWl0KTtcbiAgICAgICAgY2FzZSBcInJpZ2h0XCI6XG4gICAgICAgICAgcmV0dXJuIE1hdGgubWluKGxpbWl0LCBwYXJlbnRMaW1pdCk7XG4gICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgQXNzZXJ0cy5mYWlsKFwiU2hvdWxkIGJlIHVucmVhY2hhYmxlXCIpO1xuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gbGltaXQ7XG4gIH1cblxuICBwcml2YXRlIGdldExpbWl0VmFsdWVJbm5lcihcbiAgICBsb2dpY2FsU2lkZTogc3RyaW5nLFxuICAgIGxheW91dENvbnRleHQ6IFZ0cmVlLkxheW91dENvbnRleHQsXG4gICAgY2xpZW50TGF5b3V0OiBWdHJlZS5DbGllbnRMYXlvdXQsXG4gICAgY29uZGl0aW9uPzogKHAxOiBQYWdlRmxvYXRGcmFnbWVudCwgcDI6IFBhZ2VGbG9hdExheW91dENvbnRleHQpID0+IGJvb2xlYW4sXG4gICk6IG51bWJlciB7XG4gICAgQXNzZXJ0cy5hc3NlcnQodGhpcy5jb250YWluZXIpO1xuICAgIGNvbnN0IGxpbWl0cyA9IHRoaXMuZ2V0TGltaXRWYWx1ZXNJbm5lcihcbiAgICAgIGxheW91dENvbnRleHQsXG4gICAgICBjbGllbnRMYXlvdXQsXG4gICAgICBjb25kaXRpb24sXG4gICAgKTtcbiAgICBzd2l0Y2ggKGxvZ2ljYWxTaWRlKSB7XG4gICAgICBjYXNlIFwiYmxvY2stc3RhcnRcIjpcbiAgICAgICAgcmV0dXJuIHRoaXMuY29udGFpbmVyLnZlcnRpY2FsID8gbGltaXRzLnJpZ2h0IDogbGltaXRzLnRvcDtcbiAgICAgIGNhc2UgXCJibG9jay1lbmRcIjpcbiAgICAgICAgcmV0dXJuIHRoaXMuY29udGFpbmVyLnZlcnRpY2FsID8gbGltaXRzLmxlZnQgOiBsaW1pdHMuYm90dG9tO1xuICAgICAgY2FzZSBcImlubGluZS1zdGFydFwiOlxuICAgICAgICByZXR1cm4gdGhpcy5jb250YWluZXIudmVydGljYWwgPyBsaW1pdHMudG9wIDogbGltaXRzLmxlZnQ7XG4gICAgICBjYXNlIFwiaW5saW5lLWVuZFwiOlxuICAgICAgICByZXR1cm4gdGhpcy5jb250YWluZXIudmVydGljYWwgPyBsaW1pdHMuYm90dG9tIDogbGltaXRzLnJpZ2h0O1xuICAgICAgZGVmYXVsdDpcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKGBVbmtub3duIGxvZ2ljYWwgc2lkZTogJHtsb2dpY2FsU2lkZX1gKTtcbiAgICB9XG4gIH1cblxuICBwcml2YXRlIGdldExpbWl0VmFsdWVzSW5uZXIoXG4gICAgbGF5b3V0Q29udGV4dDogVnRyZWUuTGF5b3V0Q29udGV4dCxcbiAgICBjbGllbnRMYXlvdXQ6IFZ0cmVlLkNsaWVudExheW91dCxcbiAgICBjb25kaXRpb24/OiAocDE6IFBhZ2VGbG9hdEZyYWdtZW50LCBwMjogUGFnZUZsb2F0TGF5b3V0Q29udGV4dCkgPT4gYm9vbGVhbixcbiAgKToge1xuICAgIHRvcDogbnVtYmVyO1xuICAgIGxlZnQ6IG51bWJlcjtcbiAgICBib3R0b206IG51bWJlcjtcbiAgICByaWdodDogbnVtYmVyO1xuICAgIGZsb2F0TWluV3JhcEJsb2NrU3RhcnQ6IG51bWJlcjtcbiAgICBmbG9hdE1pbldyYXBCbG9ja0VuZDogbnVtYmVyO1xuICB9IHtcbiAgICBBc3NlcnRzLmFzc2VydCh0aGlzLmNvbnRhaW5lcik7XG4gICAgY29uc3Qgb2Zmc2V0WCA9IHRoaXMuY29udGFpbmVyLm9yaWdpblg7XG4gICAgY29uc3Qgb2Zmc2V0WSA9IHRoaXMuY29udGFpbmVyLm9yaWdpblk7XG4gICAgY29uc3QgcGFkZGluZ1JlY3QgPSB0aGlzLmNvbnRhaW5lci5nZXRQYWRkaW5nUmVjdCgpO1xuICAgIGxldCBsaW1pdHMgPSB7XG4gICAgICB0b3A6IHBhZGRpbmdSZWN0LnkxIC0gb2Zmc2V0WSxcbiAgICAgIGxlZnQ6IHBhZGRpbmdSZWN0LngxIC0gb2Zmc2V0WCxcbiAgICAgIGJvdHRvbTogcGFkZGluZ1JlY3QueTIgLSBvZmZzZXRZLFxuICAgICAgcmlnaHQ6IHBhZGRpbmdSZWN0LngyIC0gb2Zmc2V0WCxcbiAgICAgIGZsb2F0TWluV3JhcEJsb2NrU3RhcnQ6IDAsXG4gICAgICBmbG9hdE1pbldyYXBCbG9ja0VuZDogMCxcbiAgICB9O1xuXG4gICAgZnVuY3Rpb24gcmVzb2x2ZUxlbmd0aFBlcmNlbnRhZ2UobnVtZXJpYywgdmlld05vZGUsIGNvbnRhaW5lckxlbmd0aCkge1xuICAgICAgaWYgKG51bWVyaWMudW5pdCA9PT0gXCIlXCIpIHtcbiAgICAgICAgcmV0dXJuIChjb250YWluZXJMZW5ndGggKiBudW1lcmljLm51bSkgLyAxMDA7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICByZXR1cm4gbGF5b3V0Q29udGV4dC5jb252ZXJ0TGVuZ3RoVG9QeChudW1lcmljLCB2aWV3Tm9kZSwgY2xpZW50TGF5b3V0KTtcbiAgICAgIH1cbiAgICB9XG4gICAgY29uc3QgZnJhZ21lbnRzID0gdGhpcy5mbG9hdEZyYWdtZW50cztcbiAgICBpZiAoZnJhZ21lbnRzLmxlbmd0aCA+IDApIHtcbiAgICAgIGxpbWl0cyA9IGZyYWdtZW50cy5yZWR1Y2UoKGwsIGYpID0+IHtcbiAgICAgICAgaWYgKGNvbmRpdGlvbiAmJiAhY29uZGl0aW9uKGYsIHRoaXMpKSB7XG4gICAgICAgICAgcmV0dXJuIGw7XG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgbG9naWNhbEZsb2F0U2lkZSA9IHRoaXMudG9Mb2dpY2FsKGYuZmxvYXRTaWRlKTtcbiAgICAgICAgY29uc3QgYXJlYSA9IGYuYXJlYTtcbiAgICAgICAgY29uc3QgZmxvYXRNaW5XcmFwQmxvY2sgPSBmLmNvbnRpbnVhdGlvbnNbMF0uZmxvYXQuZmxvYXRNaW5XcmFwQmxvY2s7XG4gICAgICAgIGxldCB0b3AgPSBsLnRvcDtcbiAgICAgICAgbGV0IGxlZnQgPSBsLmxlZnQ7XG4gICAgICAgIGxldCBib3R0b20gPSBsLmJvdHRvbTtcbiAgICAgICAgbGV0IHJpZ2h0ID0gbC5yaWdodDtcbiAgICAgICAgbGV0IGZsb2F0TWluV3JhcEJsb2NrU3RhcnQgPSBsLmZsb2F0TWluV3JhcEJsb2NrU3RhcnQ7XG4gICAgICAgIGxldCBmbG9hdE1pbldyYXBCbG9ja0VuZCA9IGwuZmxvYXRNaW5XcmFwQmxvY2tFbmQ7XG4gICAgICAgIHN3aXRjaCAobG9naWNhbEZsb2F0U2lkZSkge1xuICAgICAgICAgIGNhc2UgXCJpbmxpbmUtc3RhcnRcIjpcbiAgICAgICAgICAgIGlmIChhcmVhLnZlcnRpY2FsKSB7XG4gICAgICAgICAgICAgIHRvcCA9IE1hdGgubWF4KHRvcCwgYXJlYS50b3AgKyBhcmVhLmhlaWdodCk7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICBsZWZ0ID0gTWF0aC5tYXgobGVmdCwgYXJlYS5sZWZ0ICsgYXJlYS53aWR0aCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgICBjYXNlIFwiYmxvY2stc3RhcnRcIjpcbiAgICAgICAgICAgIGlmIChhcmVhLnZlcnRpY2FsKSB7XG4gICAgICAgICAgICAgIGlmIChmbG9hdE1pbldyYXBCbG9jayAmJiBhcmVhLmxlZnQgPCByaWdodCkge1xuICAgICAgICAgICAgICAgIGZsb2F0TWluV3JhcEJsb2NrU3RhcnQgPSByZXNvbHZlTGVuZ3RoUGVyY2VudGFnZShcbiAgICAgICAgICAgICAgICAgIGZsb2F0TWluV3JhcEJsb2NrLFxuICAgICAgICAgICAgICAgICAgKGFyZWEgYXMgYW55KS5yb290Vmlld05vZGVzWzBdLFxuICAgICAgICAgICAgICAgICAgcGFkZGluZ1JlY3QueDIgLSBwYWRkaW5nUmVjdC54MSxcbiAgICAgICAgICAgICAgICApIGFzIG51bWJlcjtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICByaWdodCA9IE1hdGgubWluKHJpZ2h0LCBhcmVhLmxlZnQpO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgaWYgKGZsb2F0TWluV3JhcEJsb2NrICYmIGFyZWEudG9wICsgYXJlYS5oZWlnaHQgPiB0b3ApIHtcbiAgICAgICAgICAgICAgICBmbG9hdE1pbldyYXBCbG9ja1N0YXJ0ID0gcmVzb2x2ZUxlbmd0aFBlcmNlbnRhZ2UoXG4gICAgICAgICAgICAgICAgICBmbG9hdE1pbldyYXBCbG9jayxcbiAgICAgICAgICAgICAgICAgIChhcmVhIGFzIGFueSkucm9vdFZpZXdOb2Rlc1swXSxcbiAgICAgICAgICAgICAgICAgIHBhZGRpbmdSZWN0LnkyIC0gcGFkZGluZ1JlY3QueTEsXG4gICAgICAgICAgICAgICAgKSBhcyBudW1iZXI7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgdG9wID0gTWF0aC5tYXgodG9wLCBhcmVhLnRvcCArIGFyZWEuaGVpZ2h0KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgIGNhc2UgXCJpbmxpbmUtZW5kXCI6XG4gICAgICAgICAgICBpZiAoYXJlYS52ZXJ0aWNhbCkge1xuICAgICAgICAgICAgICBib3R0b20gPSBNYXRoLm1pbihib3R0b20sIGFyZWEudG9wKTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgIHJpZ2h0ID0gTWF0aC5taW4ocmlnaHQsIGFyZWEubGVmdCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgICBjYXNlIFwiYmxvY2stZW5kXCI6XG4gICAgICAgICAgICBpZiAoYXJlYS52ZXJ0aWNhbCkge1xuICAgICAgICAgICAgICBpZiAoZmxvYXRNaW5XcmFwQmxvY2sgJiYgYXJlYS5sZWZ0ICsgYXJlYS53aWR0aCA+IGxlZnQpIHtcbiAgICAgICAgICAgICAgICBmbG9hdE1pbldyYXBCbG9ja0VuZCA9IHJlc29sdmVMZW5ndGhQZXJjZW50YWdlKFxuICAgICAgICAgICAgICAgICAgZmxvYXRNaW5XcmFwQmxvY2ssXG4gICAgICAgICAgICAgICAgICAoYXJlYSBhcyBhbnkpLnJvb3RWaWV3Tm9kZXNbMF0sXG4gICAgICAgICAgICAgICAgICBwYWRkaW5nUmVjdC54MiAtIHBhZGRpbmdSZWN0LngxLFxuICAgICAgICAgICAgICAgICkgYXMgbnVtYmVyO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIGxlZnQgPSBNYXRoLm1heChsZWZ0LCBhcmVhLmxlZnQgKyBhcmVhLndpZHRoKTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgIGlmIChmbG9hdE1pbldyYXBCbG9jayAmJiBhcmVhLnRvcCA8IGJvdHRvbSkge1xuICAgICAgICAgICAgICAgIGZsb2F0TWluV3JhcEJsb2NrRW5kID0gcmVzb2x2ZUxlbmd0aFBlcmNlbnRhZ2UoXG4gICAgICAgICAgICAgICAgICBmbG9hdE1pbldyYXBCbG9jayxcbiAgICAgICAgICAgICAgICAgIChhcmVhIGFzIGFueSkucm9vdFZpZXdOb2Rlc1swXSxcbiAgICAgICAgICAgICAgICAgIHBhZGRpbmdSZWN0LnkyIC0gcGFkZGluZ1JlY3QueTEsXG4gICAgICAgICAgICAgICAgKSBhcyBudW1iZXI7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgYm90dG9tID0gTWF0aC5taW4oYm90dG9tLCBhcmVhLnRvcCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKGBVbmtub3duIGxvZ2ljYWwgZmxvYXQgc2lkZTogJHtsb2dpY2FsRmxvYXRTaWRlfWApO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgdG9wLFxuICAgICAgICAgIGxlZnQsXG4gICAgICAgICAgYm90dG9tLFxuICAgICAgICAgIHJpZ2h0LFxuICAgICAgICAgIGZsb2F0TWluV3JhcEJsb2NrU3RhcnQsXG4gICAgICAgICAgZmxvYXRNaW5XcmFwQmxvY2tFbmQsXG4gICAgICAgIH07XG4gICAgICB9LCBsaW1pdHMpO1xuICAgIH1cbiAgICBsaW1pdHMubGVmdCArPSBvZmZzZXRYO1xuICAgIGxpbWl0cy5yaWdodCArPSBvZmZzZXRYO1xuICAgIGxpbWl0cy50b3AgKz0gb2Zmc2V0WTtcbiAgICBsaW1pdHMuYm90dG9tICs9IG9mZnNldFk7XG4gICAgcmV0dXJuIGxpbWl0cztcbiAgfVxuXG4gIC8qKlxuICAgKiBAcGFyYW0gYW5jaG9yRWRnZSBOdWxsIGluZGljYXRlcyB0aGF0IHRoZSBhbmNob3IgaXMgbm90IGluIHRoZSBjdXJyZW50XG4gICAqICAgICBjb250YWluZXIuXG4gICAqIEByZXR1cm4gTG9naWNhbCBmbG9hdCBzaWRlIChzbmFwLWJsb2NrIGlzIHJlc29sdmVkIHdoZW4gaW5pdD1mYWxzZSkuIE51bGxcbiAgICogICAgIGluZGljYXRlcyB0aGF0IHRoZSBmbG9hdCBhcmVhIGRvZXMgbm90IGZpdCBpbnNpZGUgdGhlIGNvbnRhaW5lclxuICAgKi9cbiAgc2V0RmxvYXRBcmVhRGltZW5zaW9ucyhcbiAgICBhcmVhOiBMYXlvdXRUeXBlLlBhZ2VGbG9hdEFyZWEsXG4gICAgZmxvYXRSZWZlcmVuY2U6IEZsb2F0UmVmZXJlbmNlLFxuICAgIGZsb2F0U2lkZTogc3RyaW5nLFxuICAgIGFuY2hvckVkZ2U6IG51bWJlciB8IG51bGwsXG4gICAgaW5pdDogYm9vbGVhbixcbiAgICBmb3JjZTogYm9vbGVhbixcbiAgICBjb25kaXRpb246IFBhZ2VGbG9hdFBsYWNlbWVudENvbmRpdGlvbixcbiAgKTogc3RyaW5nIHwgbnVsbCB7XG4gICAgaWYgKGZsb2F0UmVmZXJlbmNlICE9PSB0aGlzLmZsb2F0UmVmZXJlbmNlKSB7XG4gICAgICBjb25zdCBwYXJlbnQgPSB0aGlzLmdldFBhcmVudChmbG9hdFJlZmVyZW5jZSk7XG4gICAgICByZXR1cm4gcGFyZW50LnNldEZsb2F0QXJlYURpbWVuc2lvbnMoXG4gICAgICAgIGFyZWEsXG4gICAgICAgIGZsb2F0UmVmZXJlbmNlLFxuICAgICAgICBmbG9hdFNpZGUsXG4gICAgICAgIGFuY2hvckVkZ2UsXG4gICAgICAgIGluaXQsXG4gICAgICAgIGZvcmNlLFxuICAgICAgICBjb25kaXRpb24sXG4gICAgICApO1xuICAgIH1cbiAgICBsZXQgbG9naWNhbEZsb2F0U2lkZSA9IHRoaXMudG9Mb2dpY2FsKGZsb2F0U2lkZSk7XG4gICAgaWYgKGxvZ2ljYWxGbG9hdFNpZGUgPT09IFwic25hcC1ibG9ja1wiKSB7XG4gICAgICBpZiAoIWNvbmRpdGlvbltcImJsb2NrLXN0YXJ0XCJdICYmICFjb25kaXRpb25bXCJibG9jay1lbmRcIl0pIHtcbiAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIGlmICghY29uZGl0aW9uW2xvZ2ljYWxGbG9hdFNpZGVdKSB7XG4gICAgICAgIHJldHVybiBudWxsO1xuICAgICAgfVxuICAgIH1cbiAgICBBc3NlcnRzLmFzc2VydChhcmVhLmNsaWVudExheW91dCk7XG4gICAgbGV0IGJsb2NrU3RhcnQgPSB0aGlzLmdldExpbWl0VmFsdWUoXG4gICAgICBcImJsb2NrLXN0YXJ0XCIsXG4gICAgICBhcmVhLmxheW91dENvbnRleHQsXG4gICAgICBhcmVhLmNsaWVudExheW91dCxcbiAgICApO1xuICAgIGxldCBibG9ja0VuZCA9IHRoaXMuZ2V0TGltaXRWYWx1ZShcbiAgICAgIFwiYmxvY2stZW5kXCIsXG4gICAgICBhcmVhLmxheW91dENvbnRleHQsXG4gICAgICBhcmVhLmNsaWVudExheW91dCxcbiAgICApO1xuICAgIGxldCBpbmxpbmVTdGFydCA9IHRoaXMuZ2V0TGltaXRWYWx1ZShcbiAgICAgIFwiaW5saW5lLXN0YXJ0XCIsXG4gICAgICBhcmVhLmxheW91dENvbnRleHQsXG4gICAgICBhcmVhLmNsaWVudExheW91dCxcbiAgICApO1xuICAgIGxldCBpbmxpbmVFbmQgPSB0aGlzLmdldExpbWl0VmFsdWUoXG4gICAgICBcImlubGluZS1lbmRcIixcbiAgICAgIGFyZWEubGF5b3V0Q29udGV4dCxcbiAgICAgIGFyZWEuY2xpZW50TGF5b3V0LFxuICAgICk7XG4gICAgY29uc3QgYmxvY2tPZmZzZXQgPSBhcmVhLnZlcnRpY2FsID8gYXJlYS5vcmlnaW5YIDogYXJlYS5vcmlnaW5ZO1xuICAgIGNvbnN0IGlubGluZU9mZnNldCA9IGFyZWEudmVydGljYWwgPyBhcmVhLm9yaWdpblkgOiBhcmVhLm9yaWdpblg7XG4gICAgYmxvY2tTdGFydCA9IGFyZWEudmVydGljYWxcbiAgICAgID8gTWF0aC5taW4oXG4gICAgICAgICAgYmxvY2tTdGFydCxcbiAgICAgICAgICBhcmVhLmxlZnQgK1xuICAgICAgICAgICAgYXJlYS5nZXRJbnNldExlZnQoKSArXG4gICAgICAgICAgICBhcmVhLndpZHRoICtcbiAgICAgICAgICAgIGFyZWEuZ2V0SW5zZXRSaWdodCgpICtcbiAgICAgICAgICAgIGJsb2NrT2Zmc2V0LFxuICAgICAgICApXG4gICAgICA6IE1hdGgubWF4KGJsb2NrU3RhcnQsIGFyZWEudG9wICsgYmxvY2tPZmZzZXQpO1xuICAgIGJsb2NrRW5kID0gYXJlYS52ZXJ0aWNhbFxuICAgICAgPyBNYXRoLm1heChibG9ja0VuZCwgYXJlYS5sZWZ0ICsgYmxvY2tPZmZzZXQpXG4gICAgICA6IE1hdGgubWluKFxuICAgICAgICAgIGJsb2NrRW5kLFxuICAgICAgICAgIGFyZWEudG9wICtcbiAgICAgICAgICAgIGFyZWEuZ2V0SW5zZXRUb3AoKSArXG4gICAgICAgICAgICBhcmVhLmhlaWdodCArXG4gICAgICAgICAgICBhcmVhLmdldEluc2V0Qm90dG9tKCkgK1xuICAgICAgICAgICAgYmxvY2tPZmZzZXQsXG4gICAgICAgICk7XG5cbiAgICBmdW5jdGlvbiBsaW1pdEJsb2NrU3RhcnRFbmRWYWx1ZVdpdGhPcGVuUmVjdChnZXRSZWN0LCByZWN0KSB7XG4gICAgICBsZXQgb3BlblJlY3QgPSBnZXRSZWN0KGFyZWEuYmFuZHMsIHJlY3QpO1xuICAgICAgaWYgKG9wZW5SZWN0KSB7XG4gICAgICAgIGlmIChhcmVhLnZlcnRpY2FsKSB7XG4gICAgICAgICAgb3BlblJlY3QgPSBHZW9tZXRyeVV0aWwudW5yb3RhdGVCb3gob3BlblJlY3QpO1xuICAgICAgICB9XG4gICAgICAgIGJsb2NrU3RhcnQgPSBhcmVhLnZlcnRpY2FsXG4gICAgICAgICAgPyBNYXRoLm1pbihibG9ja1N0YXJ0LCBvcGVuUmVjdC54MilcbiAgICAgICAgICA6IE1hdGgubWF4KGJsb2NrU3RhcnQsIG9wZW5SZWN0LnkxKTtcbiAgICAgICAgYmxvY2tFbmQgPSBhcmVhLnZlcnRpY2FsXG4gICAgICAgICAgPyBNYXRoLm1heChibG9ja0VuZCwgb3BlblJlY3QueDEpXG4gICAgICAgICAgOiBNYXRoLm1pbihibG9ja0VuZCwgb3BlblJlY3QueTIpO1xuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHJldHVybiBmb3JjZTtcbiAgICAgIH1cbiAgICB9XG4gICAgbGV0IGJsb2NrU2l6ZTogbnVtYmVyO1xuICAgIGxldCBpbmxpbmVTaXplOiBudW1iZXI7XG4gICAgbGV0IG91dGVyQmxvY2tTaXplOiBudW1iZXI7XG4gICAgbGV0IG91dGVySW5saW5lU2l6ZTogbnVtYmVyO1xuICAgIGlmIChpbml0KSB7XG4gICAgICBjb25zdCByZWN0ID0gYXJlYS52ZXJ0aWNhbFxuICAgICAgICA/IEdlb21ldHJ5VXRpbC5yb3RhdGVCb3goXG4gICAgICAgICAgICBuZXcgR2VvbWV0cnlVdGlsLlJlY3QoYmxvY2tFbmQsIGlubGluZVN0YXJ0LCBibG9ja1N0YXJ0LCBpbmxpbmVFbmQpLFxuICAgICAgICAgIClcbiAgICAgICAgOiBuZXcgR2VvbWV0cnlVdGlsLlJlY3QoaW5saW5lU3RhcnQsIGJsb2NrU3RhcnQsIGlubGluZUVuZCwgYmxvY2tFbmQpO1xuICAgICAgaWYgKFxuICAgICAgICBsb2dpY2FsRmxvYXRTaWRlID09PSBcImJsb2NrLXN0YXJ0XCIgfHxcbiAgICAgICAgbG9naWNhbEZsb2F0U2lkZSA9PT0gXCJzbmFwLWJsb2NrXCIgfHxcbiAgICAgICAgbG9naWNhbEZsb2F0U2lkZSA9PT0gXCJpbmxpbmUtc3RhcnRcIlxuICAgICAgKSB7XG4gICAgICAgIGlmIChcbiAgICAgICAgICAhbGltaXRCbG9ja1N0YXJ0RW5kVmFsdWVXaXRoT3BlblJlY3QoXG4gICAgICAgICAgICBHZW9tZXRyeVV0aWwuZmluZFVwcGVybW9zdEZ1bGx5T3BlblJlY3QsXG4gICAgICAgICAgICByZWN0LFxuICAgICAgICAgIClcbiAgICAgICAgKSB7XG4gICAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIGlmIChcbiAgICAgICAgbG9naWNhbEZsb2F0U2lkZSA9PT0gXCJibG9jay1lbmRcIiB8fFxuICAgICAgICBsb2dpY2FsRmxvYXRTaWRlID09PSBcInNuYXAtYmxvY2tcIiB8fFxuICAgICAgICBsb2dpY2FsRmxvYXRTaWRlID09PSBcImlubGluZS1lbmRcIlxuICAgICAgKSB7XG4gICAgICAgIGlmIChcbiAgICAgICAgICAhbGltaXRCbG9ja1N0YXJ0RW5kVmFsdWVXaXRoT3BlblJlY3QoXG4gICAgICAgICAgICBHZW9tZXRyeVV0aWwuZmluZEJvdHRvbW1vc3RGdWxseU9wZW5SZWN0LFxuICAgICAgICAgICAgcmVjdCxcbiAgICAgICAgICApXG4gICAgICAgICkge1xuICAgICAgICAgIHJldHVybiBudWxsO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICBvdXRlckJsb2NrU2l6ZSA9IChibG9ja0VuZCAtIGJsb2NrU3RhcnQpICogYXJlYS5nZXRCb3hEaXIoKTtcbiAgICAgIGJsb2NrU2l6ZSA9IG91dGVyQmxvY2tTaXplIC0gYXJlYS5nZXRJbnNldEJlZm9yZSgpIC0gYXJlYS5nZXRJbnNldEFmdGVyKCk7XG4gICAgICBvdXRlcklubGluZVNpemUgPSBpbmxpbmVFbmQgLSBpbmxpbmVTdGFydDtcbiAgICAgIGlubGluZVNpemUgPSBvdXRlcklubGluZVNpemUgLSBhcmVhLmdldEluc2V0U3RhcnQoKSAtIGFyZWEuZ2V0SW5zZXRFbmQoKTtcbiAgICAgIGlmICghZm9yY2UgJiYgKGJsb2NrU2l6ZSA8PSAwIHx8IGlubGluZVNpemUgPD0gMCkpIHtcbiAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIGJsb2NrU2l6ZSA9IGFyZWEuY29tcHV0ZWRCbG9ja1NpemU7XG4gICAgICBvdXRlckJsb2NrU2l6ZSA9IGJsb2NrU2l6ZSArIGFyZWEuZ2V0SW5zZXRCZWZvcmUoKSArIGFyZWEuZ2V0SW5zZXRBZnRlcigpO1xuICAgICAgY29uc3QgYXZhaWxhYmxlQmxvY2tTaXplID0gKGJsb2NrRW5kIC0gYmxvY2tTdGFydCkgKiBhcmVhLmdldEJveERpcigpO1xuICAgICAgaWYgKGxvZ2ljYWxGbG9hdFNpZGUgPT09IFwic25hcC1ibG9ja1wiKSB7XG4gICAgICAgIGlmIChhbmNob3JFZGdlID09PSBudWxsKSB7XG4gICAgICAgICAgLy8gRGVmZXJyZWQgZnJvbSBwcmV2aW91cyBjb250YWluZXJcbiAgICAgICAgICBsb2dpY2FsRmxvYXRTaWRlID0gXCJibG9jay1zdGFydFwiO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGNvbnN0IGNvbnRhaW5lclJlY3QgPSB0aGlzLmNvbnRhaW5lci5nZXRQYWRkaW5nUmVjdCgpO1xuICAgICAgICAgIGNvbnN0IGZyb21TdGFydCA9XG4gICAgICAgICAgICB0aGlzLmNvbnRhaW5lci5nZXRCb3hEaXIoKSAqXG4gICAgICAgICAgICAoYW5jaG9yRWRnZSAtXG4gICAgICAgICAgICAgICh0aGlzLmNvbnRhaW5lci52ZXJ0aWNhbCA/IGNvbnRhaW5lclJlY3QueDIgOiBjb250YWluZXJSZWN0LnkxKSk7XG4gICAgICAgICAgY29uc3QgZnJvbUVuZCA9XG4gICAgICAgICAgICB0aGlzLmNvbnRhaW5lci5nZXRCb3hEaXIoKSAqXG4gICAgICAgICAgICAoKHRoaXMuY29udGFpbmVyLnZlcnRpY2FsID8gY29udGFpbmVyUmVjdC54MSA6IGNvbnRhaW5lclJlY3QueTIpIC1cbiAgICAgICAgICAgICAgYW5jaG9yRWRnZSAtXG4gICAgICAgICAgICAgIG91dGVyQmxvY2tTaXplKTtcbiAgICAgICAgICBpZiAoZnJvbVN0YXJ0IDw9IGZyb21FbmQpIHtcbiAgICAgICAgICAgIGxvZ2ljYWxGbG9hdFNpZGUgPSBcImJsb2NrLXN0YXJ0XCI7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGxvZ2ljYWxGbG9hdFNpZGUgPSBcImJsb2NrLWVuZFwiO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBpZiAoIWNvbmRpdGlvbltsb2dpY2FsRmxvYXRTaWRlXSkge1xuICAgICAgICAgIGlmIChjb25kaXRpb25bXCJibG9jay1lbmRcIl0pIHtcbiAgICAgICAgICAgIGxvZ2ljYWxGbG9hdFNpZGUgPSBcImJsb2NrLWVuZFwiO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIGlmICghZm9yY2UgJiYgYXZhaWxhYmxlQmxvY2tTaXplIDwgb3V0ZXJCbG9ja1NpemUpIHtcbiAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICB9XG4gICAgICBpZiAoXG4gICAgICAgIGxvZ2ljYWxGbG9hdFNpZGUgPT09IFwiaW5saW5lLXN0YXJ0XCIgfHxcbiAgICAgICAgbG9naWNhbEZsb2F0U2lkZSA9PT0gXCJpbmxpbmUtZW5kXCJcbiAgICAgICkge1xuICAgICAgICBpbmxpbmVTaXplID0gU2l6aW5nLmdldFNpemUoYXJlYS5jbGllbnRMYXlvdXQsIGFyZWEuZWxlbWVudCwgW1xuICAgICAgICAgIFNpemluZy5TaXplLkZJVF9DT05URU5UX0lOTElORV9TSVpFLFxuICAgICAgICBdKVtTaXppbmcuU2l6ZS5GSVRfQ09OVEVOVF9JTkxJTkVfU0laRV07XG4gICAgICB9IGVsc2UgaWYgKGFyZWEuYWRqdXN0Q29udGVudFJlbGF0aXZlU2l6ZSkge1xuICAgICAgICBpbmxpbmVTaXplID0gYXJlYS5nZXRDb250ZW50SW5saW5lU2l6ZSgpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgaW5saW5lU2l6ZSA9IGFyZWEudmVydGljYWwgPyBhcmVhLmhlaWdodCA6IGFyZWEud2lkdGg7XG4gICAgICB9XG4gICAgICBvdXRlcklubGluZVNpemUgPSBpbmxpbmVTaXplICsgYXJlYS5nZXRJbnNldFN0YXJ0KCkgKyBhcmVhLmdldEluc2V0RW5kKCk7XG4gICAgICBjb25zdCBhdmFpbGFibGVJbmxpbmVTaXplID0gaW5saW5lRW5kIC0gaW5saW5lU3RhcnQ7XG4gICAgICBpZiAoIWZvcmNlICYmIGF2YWlsYWJsZUlubGluZVNpemUgPCBvdXRlcklubGluZVNpemUpIHtcbiAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICB9XG4gICAgfVxuICAgIGJsb2NrU3RhcnQgLT0gYmxvY2tPZmZzZXQ7XG4gICAgYmxvY2tFbmQgLT0gYmxvY2tPZmZzZXQ7XG4gICAgaW5saW5lU3RhcnQgLT0gaW5saW5lT2Zmc2V0O1xuICAgIGlubGluZUVuZCAtPSBpbmxpbmVPZmZzZXQ7XG4gICAgc3dpdGNoIChsb2dpY2FsRmxvYXRTaWRlKSB7XG4gICAgICBjYXNlIFwiaW5saW5lLXN0YXJ0XCI6XG4gICAgICBjYXNlIFwiYmxvY2stc3RhcnRcIjpcbiAgICAgIGNhc2UgXCJzbmFwLWJsb2NrXCI6XG4gICAgICAgIGFyZWEuc2V0SW5saW5lUG9zaXRpb24oaW5saW5lU3RhcnQsIGlubGluZVNpemUpO1xuICAgICAgICBhcmVhLnNldEJsb2NrUG9zaXRpb24oYmxvY2tTdGFydCwgYmxvY2tTaXplKTtcbiAgICAgICAgYnJlYWs7XG4gICAgICBjYXNlIFwiaW5saW5lLWVuZFwiOlxuICAgICAgY2FzZSBcImJsb2NrLWVuZFwiOlxuICAgICAgICBhcmVhLnNldElubGluZVBvc2l0aW9uKGlubGluZUVuZCAtIG91dGVySW5saW5lU2l6ZSwgaW5saW5lU2l6ZSk7XG4gICAgICAgIGFyZWEuc2V0QmxvY2tQb3NpdGlvbihcbiAgICAgICAgICBibG9ja0VuZCAtIG91dGVyQmxvY2tTaXplICogYXJlYS5nZXRCb3hEaXIoKSxcbiAgICAgICAgICBibG9ja1NpemUsXG4gICAgICAgICk7XG4gICAgICAgIGJyZWFrO1xuICAgICAgZGVmYXVsdDpcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKGB1bmtub3duIGZsb2F0IGRpcmVjdGlvbjogJHtmbG9hdFNpZGV9YCk7XG4gICAgfVxuICAgIHJldHVybiBsb2dpY2FsRmxvYXRTaWRlO1xuICB9XG5cbiAgZ2V0RmxvYXRGcmFnbWVudEV4Y2x1c2lvbnMoKTogR2VvbWV0cnlVdGlsLlNoYXBlW10ge1xuICAgIGNvbnN0IHJlc3VsdCA9IHRoaXMuZmxvYXRGcmFnbWVudHMubWFwKChmcmFnbWVudCkgPT5cbiAgICAgIGZyYWdtZW50LmdldE91dGVyU2hhcGUoKSxcbiAgICApO1xuICAgIGlmICh0aGlzLnBhcmVudCkge1xuICAgICAgcmV0dXJuIHRoaXMucGFyZW50LmdldEZsb2F0RnJhZ21lbnRFeGNsdXNpb25zKCkuY29uY2F0KHJlc3VsdCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfVxuICB9XG5cbiAgcHJpdmF0ZSByZWF0dGFjaEZsb2F0RnJhZ21lbnRzKCkge1xuICAgIGNvbnN0IHBhcmVudCA9IHRoaXMuY29udGFpbmVyLmVsZW1lbnQgJiYgdGhpcy5jb250YWluZXIuZWxlbWVudC5wYXJlbnROb2RlO1xuICAgIGlmIChwYXJlbnQpIHtcbiAgICAgIHRoaXMuZmxvYXRGcmFnbWVudHMuZm9yRWFjaCgoZnJhZ21lbnQpID0+IHtcbiAgICAgICAgcGFyZW50LmFwcGVuZENoaWxkKGZyYWdtZW50LmFyZWEuZWxlbWVudCk7XG4gICAgICB9KTtcbiAgICB9XG4gIH1cblxuICBnZXRNYXhSZWFjaGVkQWZ0ZXJFZGdlKCk6IG51bWJlciB7XG4gICAgY29uc3QgaXNWZXJ0aWNhbCA9IHRoaXMuZ2V0Q29udGFpbmVyKCkudmVydGljYWw7XG4gICAgcmV0dXJuIHRoaXMuZmxvYXRGcmFnbWVudHMucmVkdWNlKFxuICAgICAgKGVkZ2UsIGZyYWdtZW50KSA9PiB7XG4gICAgICAgIGNvbnN0IHJlY3QgPSBmcmFnbWVudC5nZXRPdXRlclJlY3QoKTtcbiAgICAgICAgaWYgKGlzVmVydGljYWwpIHtcbiAgICAgICAgICByZXR1cm4gTWF0aC5taW4oZWRnZSwgcmVjdC54MSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgcmV0dXJuIE1hdGgubWF4KGVkZ2UsIHJlY3QueTIpO1xuICAgICAgICB9XG4gICAgICB9LFxuICAgICAgaXNWZXJ0aWNhbCA/IEluZmluaXR5IDogMCxcbiAgICApO1xuICB9XG5cbiAgZ2V0QmxvY2tTdGFydEVkZ2VPZkJsb2NrRW5kRmxvYXRzKCk6IG51bWJlciB7XG4gICAgY29uc3QgaXNWZXJ0aWNhbCA9IHRoaXMuZ2V0Q29udGFpbmVyKCkudmVydGljYWw7XG4gICAgcmV0dXJuIHRoaXMuZmxvYXRGcmFnbWVudHNcbiAgICAgIC5maWx0ZXIoKGZyYWdtZW50KSA9PiBmcmFnbWVudC5mbG9hdFNpZGUgPT09IFwiYmxvY2stZW5kXCIpXG4gICAgICAucmVkdWNlKFxuICAgICAgICAoZWRnZSwgZnJhZ21lbnQpID0+IHtcbiAgICAgICAgICBjb25zdCByZWN0ID0gZnJhZ21lbnQuZ2V0T3V0ZXJSZWN0KCk7XG4gICAgICAgICAgaWYgKGlzVmVydGljYWwpIHtcbiAgICAgICAgICAgIHJldHVybiBNYXRoLm1heChlZGdlLCByZWN0LngyKTtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgcmV0dXJuIE1hdGgubWluKGVkZ2UsIHJlY3QueTEpO1xuICAgICAgICAgIH1cbiAgICAgICAgfSxcbiAgICAgICAgaXNWZXJ0aWNhbCA/IDAgOiBJbmZpbml0eSxcbiAgICAgICk7XG4gIH1cblxuICBnZXRQYWdlRmxvYXRDbGVhckVkZ2UoY2xlYXI6IHN0cmluZywgY29sdW1uOiBMYXlvdXRUeXBlLkNvbHVtbik6IG51bWJlciB7XG4gICAgZnVuY3Rpb24gaXNDb250aW51YXRpb25PZkFscmVhZHlBcHBlYXJlZEZsb2F0KGNvbnRleHQpIHtcbiAgICAgIHJldHVybiAoY29udGludWF0aW9uKSA9PlxuICAgICAgICBjb250ZXh0LmlzQW5jaG9yQWxyZWFkeUFwcGVhcmVkKGNvbnRpbnVhdGlvbi5mbG9hdC5nZXRJZCgpKTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBpc0ZyYWdtZW50V2l0aEFscmVhZHlBcHBlYXJlZEZsb2F0KGZyYWdtZW50LCBjb250ZXh0KSB7XG4gICAgICByZXR1cm4gZnJhZ21lbnQuY29udGludWF0aW9ucy5zb21lKFxuICAgICAgICBpc0NvbnRpbnVhdGlvbk9mQWxyZWFkeUFwcGVhcmVkRmxvYXQoY29udGV4dCksXG4gICAgICApO1xuICAgIH1cbiAgICBjb25zdCBjb2x1bW5SZWN0ID0gY29sdW1uLmdldFBhZGRpbmdSZWN0KCk7XG4gICAgY29uc3QgY29sdW1uQmxvY2tFbmQgPSBjb2x1bW4udmVydGljYWwgPyBjb2x1bW5SZWN0LngxIDogY29sdW1uUmVjdC55MjtcbiAgICBsZXQgY29udGV4dDogUGFnZUZsb2F0TGF5b3V0Q29udGV4dCA9IHRoaXM7XG4gICAgd2hpbGUgKGNvbnRleHQpIHtcbiAgICAgIGlmIChcbiAgICAgICAgY29udGV4dC5mbG9hdHNEZWZlcnJlZFRvTmV4dC5zb21lKFxuICAgICAgICAgIGlzQ29udGludWF0aW9uT2ZBbHJlYWR5QXBwZWFyZWRGbG9hdChjb250ZXh0KSxcbiAgICAgICAgKVxuICAgICAgKSB7XG4gICAgICAgIHJldHVybiBjb2x1bW5CbG9ja0VuZDtcbiAgICAgIH1cbiAgICAgIGNvbnRleHQgPSBjb250ZXh0LnBhcmVudDtcbiAgICB9XG4gICAgQXNzZXJ0cy5hc3NlcnQoY29sdW1uLmNsaWVudExheW91dCk7XG4gICAgY29uc3QgYmxvY2tTdGFydExpbWl0ID0gdGhpcy5nZXRMaW1pdFZhbHVlKFxuICAgICAgXCJibG9jay1zdGFydFwiLFxuICAgICAgY29sdW1uLmxheW91dENvbnRleHQsXG4gICAgICBjb2x1bW4uY2xpZW50TGF5b3V0LFxuICAgICAgaXNGcmFnbWVudFdpdGhBbHJlYWR5QXBwZWFyZWRGbG9hdCxcbiAgICApO1xuICAgIGNvbnN0IGJsb2NrRW5kTGltaXQgPSB0aGlzLmdldExpbWl0VmFsdWUoXG4gICAgICBcImJsb2NrLWVuZFwiLFxuICAgICAgY29sdW1uLmxheW91dENvbnRleHQsXG4gICAgICBjb2x1bW4uY2xpZW50TGF5b3V0LFxuICAgICAgaXNGcmFnbWVudFdpdGhBbHJlYWR5QXBwZWFyZWRGbG9hdCxcbiAgICApO1xuICAgIGlmIChcbiAgICAgIGJsb2NrRW5kTGltaXQgKiBjb2x1bW4uZ2V0Qm94RGlyKCkgPFxuICAgICAgY29sdW1uQmxvY2tFbmQgKiBjb2x1bW4uZ2V0Qm94RGlyKClcbiAgICApIHtcbiAgICAgIHJldHVybiBjb2x1bW5CbG9ja0VuZDtcbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuIGJsb2NrU3RhcnRMaW1pdDtcbiAgICB9XG4gIH1cblxuICBnZXRQYWdlRmxvYXRQbGFjZW1lbnRDb25kaXRpb24oXG4gICAgZmxvYXQ6IFBhZ2VGbG9hdCxcbiAgICBmbG9hdFNpZGU6IHN0cmluZyxcbiAgICBjbGVhclNpZGU6IHN0cmluZyB8IG51bGwsXG4gICk6IFBhZ2VGbG9hdFBsYWNlbWVudENvbmRpdGlvbiB7XG4gICAgaWYgKGZsb2F0LmZsb2F0UmVmZXJlbmNlICE9PSB0aGlzLmZsb2F0UmVmZXJlbmNlKSB7XG4gICAgICBjb25zdCBwYXJlbnQgPSB0aGlzLmdldFBhcmVudChmbG9hdC5mbG9hdFJlZmVyZW5jZSk7XG4gICAgICByZXR1cm4gcGFyZW50LmdldFBhZ2VGbG9hdFBsYWNlbWVudENvbmRpdGlvbihmbG9hdCwgZmxvYXRTaWRlLCBjbGVhclNpZGUpO1xuICAgIH1cbiAgICBjb25zdCByZXN1bHQ6IFBhZ2VGbG9hdFBsYWNlbWVudENvbmRpdGlvbiA9IHtcbiAgICAgIFwiYmxvY2stc3RhcnRcIjogdHJ1ZSxcbiAgICAgIFwiYmxvY2stZW5kXCI6IHRydWUsXG4gICAgICBcImlubGluZS1zdGFydFwiOiB0cnVlLFxuICAgICAgXCJpbmxpbmUtZW5kXCI6IHRydWUsXG4gICAgfTtcbiAgICBpZiAoIWNsZWFyU2lkZSkge1xuICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9XG4gICAgY29uc3QgbG9naWNhbEZsb2F0U2lkZSA9IHRoaXMudG9Mb2dpY2FsKGZsb2F0U2lkZSk7XG4gICAgY29uc3QgbG9naWNhbENsZWFyU2lkZSA9IHRoaXMudG9Mb2dpY2FsKGNsZWFyU2lkZSk7XG4gICAgbGV0IGxvZ2ljYWxTaWRlczogc3RyaW5nW107XG4gICAgaWYgKGxvZ2ljYWxDbGVhclNpZGUgPT09IFwiYWxsXCIpIHtcbiAgICAgIGxvZ2ljYWxTaWRlcyA9IFtcImJsb2NrLXN0YXJ0XCIsIFwiYmxvY2stZW5kXCIsIFwiaW5saW5lLXN0YXJ0XCIsIFwiaW5saW5lLWVuZFwiXTtcbiAgICB9IGVsc2UgaWYgKGxvZ2ljYWxDbGVhclNpZGUgPT09IFwiYm90aFwiKSB7XG4gICAgICBsb2dpY2FsU2lkZXMgPSBbXCJpbmxpbmUtc3RhcnRcIiwgXCJpbmxpbmUtZW5kXCJdO1xuICAgIH0gZWxzZSBpZiAobG9naWNhbENsZWFyU2lkZSA9PT0gXCJzYW1lXCIpIHtcbiAgICAgIGlmIChsb2dpY2FsRmxvYXRTaWRlID09PSBcInNuYXAtYmxvY2tcIikge1xuICAgICAgICBsb2dpY2FsU2lkZXMgPSBbXCJibG9jay1zdGFydFwiLCBcImJsb2NrLWVuZFwiXTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGxvZ2ljYWxTaWRlcyA9IFtsb2dpY2FsRmxvYXRTaWRlXTtcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgbG9naWNhbFNpZGVzID0gW2xvZ2ljYWxDbGVhclNpZGVdO1xuICAgIH1cbiAgICBjb25zdCBmbG9hdE9yZGVyID0gZmxvYXQuZ2V0T3JkZXIoKTtcblxuICAgIGZ1bmN0aW9uIGlzUHJlY2VkaW5nRnJhZ21lbnQoXG4gICAgICBzaWRlOiBzdHJpbmcsXG4gICAgKTogKHAxOiBQYWdlRmxvYXRGcmFnbWVudCkgPT4gYm9vbGVhbiB7XG4gICAgICByZXR1cm4gKGZyYWdtZW50KSA9PlxuICAgICAgICBmcmFnbWVudC5mbG9hdFNpZGUgPT09IHNpZGUgJiYgZnJhZ21lbnQuZ2V0T3JkZXIoKSA8IGZsb2F0T3JkZXI7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gaGFzUHJlY2VkaW5nRnJhZ21lbnRJbkNoaWxkcmVuKFxuICAgICAgY29udGV4dDogUGFnZUZsb2F0TGF5b3V0Q29udGV4dCxcbiAgICAgIHNpZGU6IHN0cmluZyxcbiAgICApOiBib29sZWFuIHtcbiAgICAgIHJldHVybiBjb250ZXh0LmNoaWxkcmVuLnNvbWUoXG4gICAgICAgIChjaGlsZCkgPT5cbiAgICAgICAgICBjaGlsZC5mbG9hdEZyYWdtZW50cy5zb21lKGlzUHJlY2VkaW5nRnJhZ21lbnQoc2lkZSkpIHx8XG4gICAgICAgICAgaGFzUHJlY2VkaW5nRnJhZ21lbnRJbkNoaWxkcmVuKGNoaWxkLCBzaWRlKSxcbiAgICAgICk7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gaGFzUHJlY2VkaW5nRnJhZ21lbnRJblBhcmVudHMoXG4gICAgICBjb250ZXh0OiBQYWdlRmxvYXRMYXlvdXRDb250ZXh0LFxuICAgICAgc2lkZTogc3RyaW5nLFxuICAgICk6IGJvb2xlYW4ge1xuICAgICAgY29uc3QgcGFyZW50ID0gY29udGV4dC5wYXJlbnQ7XG4gICAgICByZXR1cm4gKFxuICAgICAgICAhIXBhcmVudCAmJlxuICAgICAgICAocGFyZW50LmZsb2F0RnJhZ21lbnRzLnNvbWUoaXNQcmVjZWRpbmdGcmFnbWVudChzaWRlKSkgfHxcbiAgICAgICAgICBoYXNQcmVjZWRpbmdGcmFnbWVudEluUGFyZW50cyhwYXJlbnQsIHNpZGUpKVxuICAgICAgKTtcbiAgICB9XG4gICAgbG9naWNhbFNpZGVzLmZvckVhY2goKHNpZGUpID0+IHtcbiAgICAgIHN3aXRjaCAoc2lkZSkge1xuICAgICAgICBjYXNlIFwiYmxvY2stc3RhcnRcIjpcbiAgICAgICAgY2FzZSBcImlubGluZS1zdGFydFwiOlxuICAgICAgICAgIHJlc3VsdFtzaWRlXSA9ICFoYXNQcmVjZWRpbmdGcmFnbWVudEluQ2hpbGRyZW4odGhpcywgc2lkZSk7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIGNhc2UgXCJibG9jay1lbmRcIjpcbiAgICAgICAgY2FzZSBcImlubGluZS1lbmRcIjpcbiAgICAgICAgICByZXN1bHRbc2lkZV0gPSAhaGFzUHJlY2VkaW5nRnJhZ21lbnRJblBhcmVudHModGhpcywgc2lkZSk7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgdGhyb3cgbmV3IEVycm9yKGBVbmV4cGVjdGVkIHNpZGU6ICR7c2lkZX1gKTtcbiAgICAgIH1cbiAgICB9KTtcbiAgICByZXR1cm4gcmVzdWx0O1xuICB9XG5cbiAgZ2V0TGF5b3V0Q29uc3RyYWludHMoKTogTGF5b3V0VHlwZS5MYXlvdXRDb25zdHJhaW50W10ge1xuICAgIGNvbnN0IGNvbnN0cmFpbnRzID0gdGhpcy5wYXJlbnQgPyB0aGlzLnBhcmVudC5nZXRMYXlvdXRDb25zdHJhaW50cygpIDogW107XG4gICAgcmV0dXJuIGNvbnN0cmFpbnRzLmNvbmNhdCh0aGlzLmxheW91dENvbnN0cmFpbnRzKTtcbiAgfVxuXG4gIGFkZExheW91dENvbnN0cmFpbnQoXG4gICAgbGF5b3V0Q29uc3RyYWludDogTGF5b3V0VHlwZS5MYXlvdXRDb25zdHJhaW50LFxuICAgIGZsb2F0UmVmZXJlbmNlOiBGbG9hdFJlZmVyZW5jZSxcbiAgKSB7XG4gICAgaWYgKGZsb2F0UmVmZXJlbmNlID09PSB0aGlzLmZsb2F0UmVmZXJlbmNlKSB7XG4gICAgICB0aGlzLmxheW91dENvbnN0cmFpbnRzLnB1c2gobGF5b3V0Q29uc3RyYWludCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHRoaXMuZ2V0UGFyZW50KGZsb2F0UmVmZXJlbmNlKS5hZGRMYXlvdXRDb25zdHJhaW50KFxuICAgICAgICBsYXlvdXRDb25zdHJhaW50LFxuICAgICAgICBmbG9hdFJlZmVyZW5jZSxcbiAgICAgICk7XG4gICAgfVxuICB9XG5cbiAgaXNDb2x1bW5GdWxsV2l0aFBhZ2VGbG9hdHMoY29sdW1uOiBMYXlvdXRUeXBlLkNvbHVtbik6IGJvb2xlYW4ge1xuICAgIGNvbnN0IGxheW91dENvbnRleHQgPSBjb2x1bW4ubGF5b3V0Q29udGV4dDtcbiAgICBjb25zdCBjbGllbnRMYXlvdXQgPSBjb2x1bW4uY2xpZW50TGF5b3V0O1xuICAgIEFzc2VydHMuYXNzZXJ0KGNsaWVudExheW91dCk7XG4gICAgbGV0IGNvbnRleHQ6IFBhZ2VGbG9hdExheW91dENvbnRleHQgPSB0aGlzO1xuICAgIGxldCBsaW1pdHM6IHtcbiAgICAgIHRvcDogbnVtYmVyO1xuICAgICAgbGVmdDogbnVtYmVyO1xuICAgICAgYm90dG9tOiBudW1iZXI7XG4gICAgICByaWdodDogbnVtYmVyO1xuICAgICAgZmxvYXRNaW5XcmFwQmxvY2tTdGFydDogbnVtYmVyO1xuICAgICAgZmxvYXRNaW5XcmFwQmxvY2tFbmQ6IG51bWJlcjtcbiAgICB9ID0gbnVsbDtcbiAgICB3aGlsZSAoY29udGV4dCAmJiBjb250ZXh0LmNvbnRhaW5lcikge1xuICAgICAgY29uc3QgbCA9IGNvbnRleHQuZ2V0TGltaXRWYWx1ZXNJbm5lcihsYXlvdXRDb250ZXh0LCBjbGllbnRMYXlvdXQpO1xuICAgICAgaWYgKGxpbWl0cykge1xuICAgICAgICBpZiAoY29sdW1uLnZlcnRpY2FsKSB7XG4gICAgICAgICAgaWYgKGwucmlnaHQgPCBsaW1pdHMucmlnaHQpIHtcbiAgICAgICAgICAgIGxpbWl0cy5yaWdodCA9IGwucmlnaHQ7XG4gICAgICAgICAgICBsaW1pdHMuZmxvYXRNaW5XcmFwQmxvY2tTdGFydCA9IGwuZmxvYXRNaW5XcmFwQmxvY2tTdGFydDtcbiAgICAgICAgICB9XG4gICAgICAgICAgaWYgKGwubGVmdCA+IGxpbWl0cy5sZWZ0KSB7XG4gICAgICAgICAgICBsaW1pdHMubGVmdCA9IGwubGVmdDtcbiAgICAgICAgICAgIGxpbWl0cy5mbG9hdE1pbldyYXBCbG9ja0VuZCA9IGwuZmxvYXRNaW5XcmFwQmxvY2tFbmQ7XG4gICAgICAgICAgfVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGlmIChsLnRvcCA+IGxpbWl0cy50b3ApIHtcbiAgICAgICAgICAgIGxpbWl0cy50b3AgPSBsLnRvcDtcbiAgICAgICAgICAgIGxpbWl0cy5mbG9hdE1pbldyYXBCbG9ja1N0YXJ0ID0gbC5mbG9hdE1pbldyYXBCbG9ja1N0YXJ0O1xuICAgICAgICAgIH1cbiAgICAgICAgICBpZiAobC5ib3R0b20gPCBsaW1pdHMuYm90dG9tKSB7XG4gICAgICAgICAgICBsaW1pdHMuYm90dG9tID0gbC5ib3R0b207XG4gICAgICAgICAgICBsaW1pdHMuZmxvYXRNaW5XcmFwQmxvY2tFbmQgPSBsLmZsb2F0TWluV3JhcEJsb2NrRW5kO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgbGltaXRzID0gbDtcbiAgICAgIH1cbiAgICAgIGNvbnRleHQgPSBjb250ZXh0LnBhcmVudDtcbiAgICB9XG4gICAgY29uc3QgZmxvYXRNaW5XcmFwQmxvY2sgPSBNYXRoLm1heChcbiAgICAgIGxpbWl0cy5mbG9hdE1pbldyYXBCbG9ja1N0YXJ0LFxuICAgICAgbGltaXRzLmZsb2F0TWluV3JhcEJsb2NrRW5kLFxuICAgICk7XG4gICAgY29uc3QgYmxvY2tTcGFjZSA9IGNvbHVtbi52ZXJ0aWNhbFxuICAgICAgPyBsaW1pdHMucmlnaHQgLSBsaW1pdHMubGVmdFxuICAgICAgOiBsaW1pdHMuYm90dG9tIC0gbGltaXRzLnRvcDtcbiAgICByZXR1cm4gYmxvY2tTcGFjZSA8PSBmbG9hdE1pbldyYXBCbG9jaztcbiAgfVxuXG4gIGdldE1heEJsb2NrU2l6ZU9mUGFnZUZsb2F0cygpOiBudW1iZXIge1xuICAgIGNvbnN0IGlzVmVydGljYWwgPSB0aGlzLmdldENvbnRhaW5lcigpLnZlcnRpY2FsO1xuICAgIGlmICghdGhpcy5mbG9hdEZyYWdtZW50cy5sZW5ndGgpIHtcbiAgICAgIHJldHVybiAwO1xuICAgIH1cbiAgICByZXR1cm4gTWF0aC5tYXguYXBwbHkoXG4gICAgICBudWxsLFxuICAgICAgdGhpcy5mbG9hdEZyYWdtZW50cy5tYXAoKGZyYWdtZW50KSA9PiB7XG4gICAgICAgIGNvbnN0IGFyZWEgPSBmcmFnbWVudC5hcmVhO1xuICAgICAgICBpZiAoaXNWZXJ0aWNhbCkge1xuICAgICAgICAgIHJldHVybiBhcmVhLndpZHRoO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHJldHVybiBhcmVhLmhlaWdodDtcbiAgICAgICAgfVxuICAgICAgfSksXG4gICAgKTtcbiAgfVxuXG4gIGxvY2soKSB7XG4gICAgdGhpcy5sb2NrZWQgPSB0cnVlO1xuICB9XG5cbiAgdW5sb2NrKCkge1xuICAgIHRoaXMubG9ja2VkID0gZmFsc2U7XG4gIH1cblxuICBpc0xvY2tlZCgpOiBib29sZWFuIHtcbiAgICByZXR1cm4gdGhpcy5sb2NrZWQ7XG4gIH1cbn1cblxuZXhwb3J0IGludGVyZmFjZSBQYWdlRmxvYXRMYXlvdXRTdHJhdGVneVxuICBleHRlbmRzIFBhZ2VGbG9hdHMuUGFnZUZsb2F0TGF5b3V0U3RyYXRlZ3kge31cblxuY29uc3QgcGFnZUZsb2F0TGF5b3V0U3RyYXRlZ2llczogUGFnZUZsb2F0TGF5b3V0U3RyYXRlZ3lbXSA9IFtdO1xuXG5leHBvcnQgY2xhc3MgUGFnZUZsb2F0TGF5b3V0U3RyYXRlZ3lSZXNvbHZlciB7XG4gIHN0YXRpYyByZWdpc3RlcihzdHJhdGVneTogUGFnZUZsb2F0TGF5b3V0U3RyYXRlZ3kpIHtcbiAgICBwYWdlRmxvYXRMYXlvdXRTdHJhdGVnaWVzLnB1c2goc3RyYXRlZ3kpO1xuICB9XG5cbiAgZmluZEJ5Tm9kZUNvbnRleHQobm9kZUNvbnRleHQ6IFZ0cmVlLk5vZGVDb250ZXh0KTogUGFnZUZsb2F0TGF5b3V0U3RyYXRlZ3kge1xuICAgIGZvciAobGV0IGkgPSBwYWdlRmxvYXRMYXlvdXRTdHJhdGVnaWVzLmxlbmd0aCAtIDE7IGkgPj0gMDsgaS0tKSB7XG4gICAgICBjb25zdCBzdHJhdGVneSA9IHBhZ2VGbG9hdExheW91dFN0cmF0ZWdpZXNbaV07XG4gICAgICBpZiAoc3RyYXRlZ3kuYXBwbGllc1RvTm9kZUNvbnRleHQobm9kZUNvbnRleHQpKSB7XG4gICAgICAgIHJldHVybiBzdHJhdGVneTtcbiAgICAgIH1cbiAgICB9XG4gICAgdGhyb3cgbmV3IEVycm9yKGBObyBQYWdlRmxvYXRMYXlvdXRTdHJhdGVneSBmb3VuZCBmb3IgJHtub2RlQ29udGV4dH1gKTtcbiAgfVxuXG4gIGZpbmRCeUZsb2F0KGZsb2F0OiBQYWdlRmxvYXQpOiBQYWdlRmxvYXRMYXlvdXRTdHJhdGVneSB7XG4gICAgZm9yIChsZXQgaSA9IHBhZ2VGbG9hdExheW91dFN0cmF0ZWdpZXMubGVuZ3RoIC0gMTsgaSA+PSAwOyBpLS0pIHtcbiAgICAgIGNvbnN0IHN0cmF0ZWd5ID0gcGFnZUZsb2F0TGF5b3V0U3RyYXRlZ2llc1tpXTtcbiAgICAgIGlmIChzdHJhdGVneS5hcHBsaWVzVG9GbG9hdChmbG9hdCkpIHtcbiAgICAgICAgcmV0dXJuIHN0cmF0ZWd5O1xuICAgICAgfVxuICAgIH1cbiAgICB0aHJvdyBuZXcgRXJyb3IoYE5vIFBhZ2VGbG9hdExheW91dFN0cmF0ZWd5IGZvdW5kIGZvciAke2Zsb2F0fWApO1xuICB9XG59XG5cbmV4cG9ydCBjbGFzcyBOb3JtYWxQYWdlRmxvYXRMYXlvdXRTdHJhdGVneSBpbXBsZW1lbnRzIFBhZ2VGbG9hdExheW91dFN0cmF0ZWd5IHtcbiAgLyoqXG4gICAqIEBvdmVycmlkZVxuICAgKi9cbiAgYXBwbGllc1RvTm9kZUNvbnRleHQobm9kZUNvbnRleHQ6IFZ0cmVlLk5vZGVDb250ZXh0KTogYm9vbGVhbiB7XG4gICAgcmV0dXJuIGlzUGFnZUZsb2F0KG5vZGVDb250ZXh0LmZsb2F0UmVmZXJlbmNlKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBAb3ZlcnJpZGVcbiAgICovXG4gIGFwcGxpZXNUb0Zsb2F0KGZsb2F0OiBQYWdlRmxvYXQpOiBib29sZWFuIHtcbiAgICByZXR1cm4gdHJ1ZTtcbiAgfVxuXG4gIC8qKlxuICAgKiBAb3ZlcnJpZGVcbiAgICovXG4gIGNyZWF0ZVBhZ2VGbG9hdChcbiAgICBub2RlQ29udGV4dDogVnRyZWUuTm9kZUNvbnRleHQsXG4gICAgcGFnZUZsb2F0TGF5b3V0Q29udGV4dDogUGFnZUZsb2F0TGF5b3V0Q29udGV4dCxcbiAgICBjb2x1bW46IExheW91dFR5cGUuQ29sdW1uLFxuICApOiBUYXNrLlJlc3VsdDxQYWdlRmxvYXQ+IHtcbiAgICBsZXQgZmxvYXRSZWZlcmVuY2UgPSBub2RlQ29udGV4dC5mbG9hdFJlZmVyZW5jZTtcbiAgICBBc3NlcnRzLmFzc2VydChub2RlQ29udGV4dC5mbG9hdFNpZGUpO1xuICAgIGNvbnN0IGZsb2F0U2lkZTogc3RyaW5nID0gbm9kZUNvbnRleHQuZmxvYXRTaWRlO1xuICAgIGNvbnN0IG5vZGVQb3NpdGlvbiA9IG5vZGVDb250ZXh0LnRvTm9kZVBvc2l0aW9uKCk7XG4gICAgcmV0dXJuIGNvbHVtblxuICAgICAgLnJlc29sdmVGbG9hdFJlZmVyZW5jZUZyb21Db2x1bW5TcGFuKFxuICAgICAgICBmbG9hdFJlZmVyZW5jZSxcbiAgICAgICAgbm9kZUNvbnRleHQuY29sdW1uU3BhbixcbiAgICAgICAgbm9kZUNvbnRleHQsXG4gICAgICApXG4gICAgICAudGhlbkFzeW5jKChyZWYpID0+IHtcbiAgICAgICAgZmxvYXRSZWZlcmVuY2UgPSByZWY7XG4gICAgICAgIEFzc2VydHMuYXNzZXJ0KHBhZ2VGbG9hdExheW91dENvbnRleHQuZmxvd05hbWUpO1xuICAgICAgICBjb25zdCBmbG9hdCA9IG5ldyBQYWdlRmxvYXQoXG4gICAgICAgICAgbm9kZVBvc2l0aW9uLFxuICAgICAgICAgIGZsb2F0UmVmZXJlbmNlLFxuICAgICAgICAgIGZsb2F0U2lkZSxcbiAgICAgICAgICBub2RlQ29udGV4dC5jbGVhclNpZGUsXG4gICAgICAgICAgcGFnZUZsb2F0TGF5b3V0Q29udGV4dC5mbG93TmFtZSxcbiAgICAgICAgICBub2RlQ29udGV4dC5mbG9hdE1pbldyYXBCbG9jayxcbiAgICAgICAgKTtcbiAgICAgICAgcGFnZUZsb2F0TGF5b3V0Q29udGV4dC5hZGRQYWdlRmxvYXQoZmxvYXQpO1xuICAgICAgICByZXR1cm4gVGFzay5uZXdSZXN1bHQoZmxvYXQpO1xuICAgICAgfSk7XG4gIH1cblxuICAvKipcbiAgICogQG92ZXJyaWRlXG4gICAqL1xuICBjcmVhdGVQYWdlRmxvYXRGcmFnbWVudChcbiAgICBjb250aW51YXRpb25zOiBQYWdlRmxvYXRDb250aW51YXRpb25bXSxcbiAgICBmbG9hdFNpZGU6IHN0cmluZyxcbiAgICBmbG9hdEFyZWE6IExheW91dFR5cGUuUGFnZUZsb2F0QXJlYSxcbiAgICBjb250aW51ZXM6IGJvb2xlYW4sXG4gICk6IFBhZ2VGbG9hdEZyYWdtZW50IHtcbiAgICBjb25zdCBmID0gY29udGludWF0aW9uc1swXS5mbG9hdDtcbiAgICByZXR1cm4gbmV3IFBhZ2VGbG9hdEZyYWdtZW50KFxuICAgICAgZi5mbG9hdFJlZmVyZW5jZSxcbiAgICAgIGZsb2F0U2lkZSxcbiAgICAgIGNvbnRpbnVhdGlvbnMsXG4gICAgICBmbG9hdEFyZWEsXG4gICAgICBjb250aW51ZXMsXG4gICAgKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBAb3ZlcnJpZGVcbiAgICovXG4gIGZpbmRQYWdlRmxvYXRGcmFnbWVudChcbiAgICBmbG9hdDogUGFnZUZsb2F0LFxuICAgIHBhZ2VGbG9hdExheW91dENvbnRleHQ6IFBhZ2VGbG9hdExheW91dENvbnRleHQsXG4gICk6IFBhZ2VGbG9hdEZyYWdtZW50IHwgbnVsbCB7XG4gICAgcmV0dXJuIHBhZ2VGbG9hdExheW91dENvbnRleHQuZmluZFBhZ2VGbG9hdEZyYWdtZW50KGZsb2F0KTtcbiAgfVxuXG4gIC8qKlxuICAgKiBAb3ZlcnJpZGVcbiAgICovXG4gIGFkanVzdFBhZ2VGbG9hdEFyZWEoXG4gICAgZmxvYXRBcmVhOiBMYXlvdXRUeXBlLlBhZ2VGbG9hdEFyZWEsXG4gICAgZmxvYXRDb250YWluZXI6IFZ0cmVlLkNvbnRhaW5lcixcbiAgICBjb2x1bW46IExheW91dFR5cGUuQ29sdW1uLFxuICApIHt9XG5cbiAgLyoqXG4gICAqIEBvdmVycmlkZVxuICAgKi9cbiAgZm9yYmlkKGZsb2F0OiBQYWdlRmxvYXQsIHBhZ2VGbG9hdExheW91dENvbnRleHQ6IFBhZ2VGbG9hdExheW91dENvbnRleHQpIHt9XG59XG5cblBhZ2VGbG9hdExheW91dFN0cmF0ZWd5UmVzb2x2ZXIucmVnaXN0ZXIobmV3IE5vcm1hbFBhZ2VGbG9hdExheW91dFN0cmF0ZWd5KCkpO1xuIiwiLyoqXG4gKiBDb3B5cmlnaHQgMjAxNyBUcmltLW1hcmtzIEluYy5cbiAqIENvcHlyaWdodCAyMDE5IFZpdmxpb3N0eWxlIEZvdW5kYXRpb25cbiAqXG4gKiBWaXZsaW9zdHlsZS5qcyBpcyBmcmVlIHNvZnR3YXJlOiB5b3UgY2FuIHJlZGlzdHJpYnV0ZSBpdCBhbmQvb3IgbW9kaWZ5XG4gKiBpdCB1bmRlciB0aGUgdGVybXMgb2YgdGhlIEdOVSBBZmZlcm8gR2VuZXJhbCBQdWJsaWMgTGljZW5zZSBhcyBwdWJsaXNoZWQgYnlcbiAqIHRoZSBGcmVlIFNvZnR3YXJlIEZvdW5kYXRpb24sIGVpdGhlciB2ZXJzaW9uIDMgb2YgdGhlIExpY2Vuc2UsIG9yXG4gKiAoYXQgeW91ciBvcHRpb24pIGFueSBsYXRlciB2ZXJzaW9uLlxuICpcbiAqIFZpdmxpb3N0eWxlLmpzIGlzIGRpc3RyaWJ1dGVkIGluIHRoZSBob3BlIHRoYXQgaXQgd2lsbCBiZSB1c2VmdWwsXG4gKiBidXQgV0lUSE9VVCBBTlkgV0FSUkFOVFk7IHdpdGhvdXQgZXZlbiB0aGUgaW1wbGllZCB3YXJyYW50eSBvZlxuICogTUVSQ0hBTlRBQklMSVRZIG9yIEZJVE5FU1MgRk9SIEEgUEFSVElDVUxBUiBQVVJQT1NFLiAgU2VlIHRoZVxuICogR05VIEFmZmVybyBHZW5lcmFsIFB1YmxpYyBMaWNlbnNlIGZvciBtb3JlIGRldGFpbHMuXG4gKlxuICogWW91IHNob3VsZCBoYXZlIHJlY2VpdmVkIGEgY29weSBvZiB0aGUgR05VIEFmZmVybyBHZW5lcmFsIFB1YmxpYyBMaWNlbnNlXG4gKiBhbG9uZyB3aXRoIFZpdmxpb3N0eWxlLmpzLiAgSWYgbm90LCBzZWUgPGh0dHA6Ly93d3cuZ251Lm9yZy9saWNlbnNlcy8+LlxuICpcbiAqIEBmaWxlb3ZlcnZpZXcgRm9vdG5vdGVzXG4gKi9cbmltcG9ydCAqIGFzIEFzc2VydHMgZnJvbSBcIi4vYXNzZXJ0c1wiO1xuaW1wb3J0ICogYXMgQ3NzIGZyb20gXCIuL2Nzc1wiO1xuaW1wb3J0ICogYXMgUGFnZUZsb2F0cyBmcm9tIFwiLi9wYWdlLWZsb2F0c1wiO1xuaW1wb3J0ICogYXMgVGFzayBmcm9tIFwiLi90YXNrXCI7XG5pbXBvcnQgKiBhcyBWdHJlZSBmcm9tIFwiLi92dHJlZVwiO1xuaW1wb3J0IHsgTGF5b3V0IH0gZnJvbSBcIi4vdHlwZXNcIjtcblxuY29uc3QgUGFnZUZsb2F0RnJhZ21lbnQgPSBQYWdlRmxvYXRzLlBhZ2VGbG9hdEZyYWdtZW50O1xuXG5leHBvcnQgY2xhc3MgRm9vdG5vdGUgZXh0ZW5kcyBQYWdlRmxvYXRzLlBhZ2VGbG9hdCB7XG4gIGNvbnN0cnVjdG9yKFxuICAgIG5vZGVQb3NpdGlvbjogVnRyZWUuTm9kZVBvc2l0aW9uLFxuICAgIGZsb2F0UmVmZXJlbmNlOiBQYWdlRmxvYXRzLkZsb2F0UmVmZXJlbmNlLFxuICAgIGZsb3dOYW1lOiBzdHJpbmcsXG4gICAgcHVibGljIHJlYWRvbmx5IGZvb3Rub3RlUG9saWN5OiBDc3MuSWRlbnQgfCBudWxsLFxuICAgIGZsb2F0TWluV3JhcEJsb2NrOiBDc3MuTnVtZXJpYyB8IG51bGwsXG4gICkge1xuICAgIHN1cGVyKFxuICAgICAgbm9kZVBvc2l0aW9uLFxuICAgICAgZmxvYXRSZWZlcmVuY2UsXG4gICAgICBcImJsb2NrLWVuZFwiLFxuICAgICAgbnVsbCxcbiAgICAgIGZsb3dOYW1lLFxuICAgICAgZmxvYXRNaW5XcmFwQmxvY2ssXG4gICAgKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBAb3ZlcnJpZGVcbiAgICovXG4gIGlzQWxsb3dlZFRvUHJlY2VkZShvdGhlcjogUGFnZUZsb2F0cy5QYWdlRmxvYXQpOiBib29sZWFuIHtcbiAgICByZXR1cm4gIShvdGhlciBpbnN0YW5jZW9mIEZvb3Rub3RlKTtcbiAgfVxufVxuXG4vKipcbiAqIEBleHRlbmRzIFBhZ2VGbG9hdEZyYWdtZW50XG4gKi9cbmV4cG9ydCBjbGFzcyBGb290bm90ZUZyYWdtZW50IGV4dGVuZHMgUGFnZUZsb2F0RnJhZ21lbnQge1xuICBjb25zdHJ1Y3RvcihcbiAgICBmbG9hdFJlZmVyZW5jZTogUGFnZUZsb2F0cy5GbG9hdFJlZmVyZW5jZSxcbiAgICBjb250aW51YXRpb25zOiBQYWdlRmxvYXRzLlBhZ2VGbG9hdENvbnRpbnVhdGlvbltdLFxuICAgIGFyZWE6IFZ0cmVlLkNvbnRhaW5lcixcbiAgICBjb250aW51ZXM6IGJvb2xlYW4sXG4gICkge1xuICAgIHN1cGVyKGZsb2F0UmVmZXJlbmNlLCBcImJsb2NrLWVuZFwiLCBjb250aW51YXRpb25zLCBhcmVhLCBjb250aW51ZXMpO1xuICB9XG5cbiAgLyoqXG4gICAqIEBvdmVycmlkZVxuICAgKi9cbiAgZ2V0T3JkZXIoKTogbnVtYmVyIHtcbiAgICByZXR1cm4gSW5maW5pdHk7XG4gIH1cblxuICAvKipcbiAgICogQG92ZXJyaWRlXG4gICAqL1xuICBzaG91bGRCZVN0YXNoZWRCZWZvcmUoZmxvYXQ6IFBhZ2VGbG9hdHMuUGFnZUZsb2F0KTogYm9vbGVhbiB7XG4gICAgaWYgKGZsb2F0IGluc3RhbmNlb2YgRm9vdG5vdGUpIHtcbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gdGhpcy5nZXRPcmRlcigpIDwgZmxvYXQuZ2V0T3JkZXIoKTtcbiAgICB9XG4gIH1cbn1cblxuZXhwb3J0IGNsYXNzIExpbmVGb290bm90ZVBvbGljeUxheW91dENvbnN0cmFpbnRcbiAgaW1wbGVtZW50cyBMYXlvdXQuTGF5b3V0Q29uc3RyYWludCB7XG4gIGNvbnN0cnVjdG9yKHB1YmxpYyByZWFkb25seSBmb290bm90ZTogRm9vdG5vdGUpIHt9XG5cbiAgYWxsb3dMYXlvdXQobm9kZUNvbnRleHQ6IFZ0cmVlLk5vZGVDb250ZXh0KTogYm9vbGVhbiB7XG4gICAgY29uc3Qgbm9kZVBvc2l0aW9uID0gbm9kZUNvbnRleHQudG9Ob2RlUG9zaXRpb24oKTtcbiAgICByZXR1cm4gIVZ0cmVlLmlzU2FtZU5vZGVQb3NpdGlvbihub2RlUG9zaXRpb24sIHRoaXMuZm9vdG5vdGUubm9kZVBvc2l0aW9uKTtcbiAgfVxufVxuXG5leHBvcnQgY2xhc3MgRm9vdG5vdGVMYXlvdXRTdHJhdGVneVxuICBpbXBsZW1lbnRzIFBhZ2VGbG9hdHMuUGFnZUZsb2F0TGF5b3V0U3RyYXRlZ3kge1xuICAvKipcbiAgICogQG92ZXJyaWRlXG4gICAqL1xuICBhcHBsaWVzVG9Ob2RlQ29udGV4dChub2RlQ29udGV4dDogVnRyZWUuTm9kZUNvbnRleHQpOiBib29sZWFuIHtcbiAgICByZXR1cm4gbm9kZUNvbnRleHQuZmxvYXRTaWRlID09PSBcImZvb3Rub3RlXCI7XG4gIH1cblxuICAvKipcbiAgICogQG92ZXJyaWRlXG4gICAqL1xuICBhcHBsaWVzVG9GbG9hdChmbG9hdDogUGFnZUZsb2F0cy5QYWdlRmxvYXQpOiBib29sZWFuIHtcbiAgICByZXR1cm4gZmxvYXQgaW5zdGFuY2VvZiBGb290bm90ZTtcbiAgfVxuXG4gIC8qKlxuICAgKiBAb3ZlcnJpZGVcbiAgICovXG4gIGNyZWF0ZVBhZ2VGbG9hdChcbiAgICBub2RlQ29udGV4dDogVnRyZWUuTm9kZUNvbnRleHQsXG4gICAgcGFnZUZsb2F0TGF5b3V0Q29udGV4dDogUGFnZUZsb2F0cy5QYWdlRmxvYXRMYXlvdXRDb250ZXh0LFxuICAgIGNvbHVtbjogTGF5b3V0LkNvbHVtbixcbiAgKTogVGFzay5SZXN1bHQ8UGFnZUZsb2F0cy5QYWdlRmxvYXQ+IHtcbiAgICBsZXQgZmxvYXRSZWZlcmVuY2UgPSBQYWdlRmxvYXRzLkZsb2F0UmVmZXJlbmNlLlJFR0lPTjtcblxuICAgIC8vIElmIHRoZSByZWdpb24gY29udGV4dCBoYXMgdGhlIHNhbWUgY29udGFpbmVyIGFzIHRoZSBwYWdlIGNvbnRleHQsXG4gICAgLy8gdXNlIHRoZSBwYWdlIGNvbnRleHQgYXMgdGhlIGNvbnRleHQgZm9yIHRoZSBmb290bm90ZS5cbiAgICBjb25zdCByZWdpb25Db250ZXh0ID0gcGFnZUZsb2F0TGF5b3V0Q29udGV4dC5nZXRQYWdlRmxvYXRMYXlvdXRDb250ZXh0KFxuICAgICAgZmxvYXRSZWZlcmVuY2UsXG4gICAgKTtcbiAgICBjb25zdCBwYWdlQ29udGV4dCA9IHBhZ2VGbG9hdExheW91dENvbnRleHQuZ2V0UGFnZUZsb2F0TGF5b3V0Q29udGV4dChcbiAgICAgIFBhZ2VGbG9hdHMuRmxvYXRSZWZlcmVuY2UuUEFHRSxcbiAgICApO1xuICAgIGlmIChwYWdlQ29udGV4dC5oYXNTYW1lQ29udGFpbmVyQXMocmVnaW9uQ29udGV4dCkpIHtcbiAgICAgIGZsb2F0UmVmZXJlbmNlID0gUGFnZUZsb2F0cy5GbG9hdFJlZmVyZW5jZS5QQUdFO1xuICAgIH1cbiAgICBjb25zdCBub2RlUG9zaXRpb24gPSBub2RlQ29udGV4dC50b05vZGVQb3NpdGlvbigpO1xuICAgIEFzc2VydHMuYXNzZXJ0KHBhZ2VGbG9hdExheW91dENvbnRleHQuZmxvd05hbWUpO1xuICAgIGNvbnN0IGZsb2F0OiBQYWdlRmxvYXRzLlBhZ2VGbG9hdCA9IG5ldyBGb290bm90ZShcbiAgICAgIG5vZGVQb3NpdGlvbixcbiAgICAgIGZsb2F0UmVmZXJlbmNlLFxuICAgICAgcGFnZUZsb2F0TGF5b3V0Q29udGV4dC5mbG93TmFtZSxcbiAgICAgIG5vZGVDb250ZXh0LmZvb3Rub3RlUG9saWN5LFxuICAgICAgbm9kZUNvbnRleHQuZmxvYXRNaW5XcmFwQmxvY2ssXG4gICAgKTtcbiAgICBwYWdlRmxvYXRMYXlvdXRDb250ZXh0LmFkZFBhZ2VGbG9hdChmbG9hdCk7XG4gICAgcmV0dXJuIFRhc2submV3UmVzdWx0KGZsb2F0KTtcbiAgfVxuXG4gIC8qKlxuICAgKiBAb3ZlcnJpZGVcbiAgICovXG4gIGNyZWF0ZVBhZ2VGbG9hdEZyYWdtZW50KFxuICAgIGNvbnRpbnVhdGlvbnM6IFBhZ2VGbG9hdHMuUGFnZUZsb2F0Q29udGludWF0aW9uW10sXG4gICAgZmxvYXRTaWRlOiBzdHJpbmcsXG4gICAgZmxvYXRBcmVhOiBMYXlvdXQuUGFnZUZsb2F0QXJlYSxcbiAgICBjb250aW51ZXM6IGJvb2xlYW4sXG4gICk6IFBhZ2VGbG9hdHMuUGFnZUZsb2F0RnJhZ21lbnQge1xuICAgIGNvbnN0IGYgPSBjb250aW51YXRpb25zWzBdLmZsb2F0O1xuICAgIHJldHVybiBuZXcgRm9vdG5vdGVGcmFnbWVudChcbiAgICAgIGYuZmxvYXRSZWZlcmVuY2UsXG4gICAgICBjb250aW51YXRpb25zLFxuICAgICAgZmxvYXRBcmVhLFxuICAgICAgY29udGludWVzLFxuICAgICk7XG4gIH1cblxuICAvKipcbiAgICogQG92ZXJyaWRlXG4gICAqL1xuICBmaW5kUGFnZUZsb2F0RnJhZ21lbnQoXG4gICAgZmxvYXQ6IFBhZ2VGbG9hdHMuUGFnZUZsb2F0LFxuICAgIHBhZ2VGbG9hdExheW91dENvbnRleHQ6IFBhZ2VGbG9hdHMuUGFnZUZsb2F0TGF5b3V0Q29udGV4dCxcbiAgKTogUGFnZUZsb2F0cy5QYWdlRmxvYXRGcmFnbWVudCB8IG51bGwge1xuICAgIGNvbnN0IGNvbnRleHQgPSBwYWdlRmxvYXRMYXlvdXRDb250ZXh0LmdldFBhZ2VGbG9hdExheW91dENvbnRleHQoXG4gICAgICBmbG9hdC5mbG9hdFJlZmVyZW5jZSxcbiAgICApO1xuICAgIGNvbnN0IGZyYWdtZW50cyA9IGNvbnRleHQuZmxvYXRGcmFnbWVudHMuZmlsdGVyKFxuICAgICAgKGZyKSA9PiBmciBpbnN0YW5jZW9mIEZvb3Rub3RlRnJhZ21lbnQsXG4gICAgKTtcbiAgICBBc3NlcnRzLmFzc2VydChmcmFnbWVudHMubGVuZ3RoIDw9IDEpO1xuICAgIHJldHVybiBmcmFnbWVudHNbMF0gfHwgbnVsbDtcbiAgfVxuXG4gIC8qKlxuICAgKiBAb3ZlcnJpZGVcbiAgICovXG4gIGFkanVzdFBhZ2VGbG9hdEFyZWEoXG4gICAgZmxvYXRBcmVhOiBMYXlvdXQuUGFnZUZsb2F0QXJlYSxcbiAgICBmbG9hdENvbnRhaW5lcjogVnRyZWUuQ29udGFpbmVyLFxuICAgIGNvbHVtbjogTGF5b3V0LkNvbHVtbixcbiAgKSB7XG4gICAgZmxvYXRBcmVhLmlzRm9vdG5vdGUgPSB0cnVlO1xuICAgIGZsb2F0QXJlYS5hZGp1c3RDb250ZW50UmVsYXRpdmVTaXplID0gZmFsc2U7XG4gICAgY29uc3QgZWxlbWVudCA9IGZsb2F0QXJlYS5lbGVtZW50O1xuICAgIEFzc2VydHMuYXNzZXJ0KGVsZW1lbnQpO1xuICAgIGZsb2F0QXJlYS52ZXJ0aWNhbCA9IGNvbHVtbi5sYXlvdXRDb250ZXh0LmFwcGx5Rm9vdG5vdGVTdHlsZShcbiAgICAgIGZsb2F0Q29udGFpbmVyLnZlcnRpY2FsLFxuICAgICAgKGNvbHVtbi5sYXlvdXRDb250ZXh0IGFzIGFueSkubm9kZUNvbnRleHQgJiZcbiAgICAgICAgKGNvbHVtbi5sYXlvdXRDb250ZXh0IGFzIGFueSkubm9kZUNvbnRleHQuZGlyZWN0aW9uID09PSBcInJ0bFwiLFxuICAgICAgZWxlbWVudCxcbiAgICApO1xuICAgIGZsb2F0QXJlYS5jb252ZXJ0UGVyY2VudGFnZVNpemVzVG9QeChlbGVtZW50KTtcbiAgICBjb2x1bW4uc2V0Q29tcHV0ZWRJbnNldHMoZWxlbWVudCwgZmxvYXRBcmVhKTtcbiAgICBjb2x1bW4uc2V0Q29tcHV0ZWRXaWR0aEFuZEhlaWdodChlbGVtZW50LCBmbG9hdEFyZWEpO1xuICB9XG5cbiAgLyoqXG4gICAqIEBvdmVycmlkZVxuICAgKi9cbiAgZm9yYmlkKFxuICAgIGZsb2F0OiBQYWdlRmxvYXRzLlBhZ2VGbG9hdCxcbiAgICBwYWdlRmxvYXRMYXlvdXRDb250ZXh0OiBQYWdlRmxvYXRzLlBhZ2VGbG9hdExheW91dENvbnRleHQsXG4gICkge1xuICAgIGNvbnN0IGZvb3Rub3RlID0gZmxvYXQgYXMgRm9vdG5vdGU7XG4gICAgc3dpdGNoIChmb290bm90ZS5mb290bm90ZVBvbGljeSkge1xuICAgICAgY2FzZSBDc3MuaWRlbnQubGluZToge1xuICAgICAgICBjb25zdCBjb25zdHJhaW50ID0gbmV3IExpbmVGb290bm90ZVBvbGljeUxheW91dENvbnN0cmFpbnQoZm9vdG5vdGUpO1xuICAgICAgICBwYWdlRmxvYXRMYXlvdXRDb250ZXh0LmFkZExheW91dENvbnN0cmFpbnQoXG4gICAgICAgICAgY29uc3RyYWludCxcbiAgICAgICAgICBmb290bm90ZS5mbG9hdFJlZmVyZW5jZSxcbiAgICAgICAgKTtcbiAgICAgICAgYnJlYWs7XG4gICAgICB9XG4gICAgfVxuICB9XG59XG5cblBhZ2VGbG9hdHMuUGFnZUZsb2F0TGF5b3V0U3RyYXRlZ3lSZXNvbHZlci5yZWdpc3RlcihcbiAgbmV3IEZvb3Rub3RlTGF5b3V0U3RyYXRlZ3koKSxcbik7XG4iLCIvKipcbiAqIENvcHlyaWdodCAyMDE2IFRyaW0tbWFya3MgSW5jLlxuICogQ29weXJpZ2h0IDIwMTkgVml2bGlvc3R5bGUgRm91bmRhdGlvblxuICpcbiAqIFZpdmxpb3N0eWxlLmpzIGlzIGZyZWUgc29mdHdhcmU6IHlvdSBjYW4gcmVkaXN0cmlidXRlIGl0IGFuZC9vciBtb2RpZnlcbiAqIGl0IHVuZGVyIHRoZSB0ZXJtcyBvZiB0aGUgR05VIEFmZmVybyBHZW5lcmFsIFB1YmxpYyBMaWNlbnNlIGFzIHB1Ymxpc2hlZCBieVxuICogdGhlIEZyZWUgU29mdHdhcmUgRm91bmRhdGlvbiwgZWl0aGVyIHZlcnNpb24gMyBvZiB0aGUgTGljZW5zZSwgb3JcbiAqIChhdCB5b3VyIG9wdGlvbikgYW55IGxhdGVyIHZlcnNpb24uXG4gKlxuICogVml2bGlvc3R5bGUuanMgaXMgZGlzdHJpYnV0ZWQgaW4gdGhlIGhvcGUgdGhhdCBpdCB3aWxsIGJlIHVzZWZ1bCxcbiAqIGJ1dCBXSVRIT1VUIEFOWSBXQVJSQU5UWTsgd2l0aG91dCBldmVuIHRoZSBpbXBsaWVkIHdhcnJhbnR5IG9mXG4gKiBNRVJDSEFOVEFCSUxJVFkgb3IgRklUTkVTUyBGT1IgQSBQQVJUSUNVTEFSIFBVUlBPU0UuICBTZWUgdGhlXG4gKiBHTlUgQWZmZXJvIEdlbmVyYWwgUHVibGljIExpY2Vuc2UgZm9yIG1vcmUgZGV0YWlscy5cbiAqXG4gKiBZb3Ugc2hvdWxkIGhhdmUgcmVjZWl2ZWQgYSBjb3B5IG9mIHRoZSBHTlUgQWZmZXJvIEdlbmVyYWwgUHVibGljIExpY2Vuc2VcbiAqIGFsb25nIHdpdGggVml2bGlvc3R5bGUuanMuICBJZiBub3QsIHNlZSA8aHR0cDovL3d3dy5nbnUub3JnL2xpY2Vuc2VzLz4uXG4gKlxuICogQGZpbGVvdmVydmlldyBCcmVhayAtIENvbnRyb2wgZnJhZ21lbnRhdGlvbi5cbiAqL1xuaW1wb3J0ICogYXMgQ3NzIGZyb20gXCIuL2Nzc1wiO1xuaW1wb3J0ICogYXMgUGx1Z2luIGZyb20gXCIuL3BsdWdpblwiO1xuXG4vKipcbiAqIENvbnZlcnQgb2xkIHBhZ2UtYnJlYWstKiBwcm9wZXJ0aWVzIHRvIGJyZWFrLSogcHJvcGVydGllcyB3aXRoIGFwcHJvcHJpYXRlXG4gKiB2YWx1ZXMgYXMgc3BlY2lmaWVkIGJ5IENTUyBGcmFnbWVudGF0aW9uIG1vZHVsZTpcbiAqIGh0dHBzOi8vZHJhZnRzLmNzc3dnLm9yZy9jc3MtYnJlYWsvI3BhZ2UtYnJlYWstcHJvcGVydGllc1xuICovXG5leHBvcnQgZnVuY3Rpb24gY29udmVydFBhZ2VCcmVha0FsaWFzZXMob3JpZ2luYWw6IHtcbiAgbmFtZTogc3RyaW5nO1xuICB2YWx1ZTogQ3NzLlZhbDtcbiAgaW1wb3J0YW50OiBib29sZWFuO1xufSk6IHsgbmFtZTogc3RyaW5nOyB2YWx1ZTogQ3NzLlZhbDsgaW1wb3J0YW50OiBib29sZWFuIH0ge1xuICBjb25zdCBuYW1lID0gb3JpZ2luYWxbXCJuYW1lXCJdO1xuICBjb25zdCB2YWx1ZSA9IG9yaWdpbmFsW1widmFsdWVcIl07XG4gIHN3aXRjaCAobmFtZSkge1xuICAgIGNhc2UgXCJwYWdlLWJyZWFrLWJlZm9yZVwiOlxuICAgIGNhc2UgXCJwYWdlLWJyZWFrLWFmdGVyXCI6XG4gICAgY2FzZSBcInBhZ2UtYnJlYWstaW5zaWRlXCI6XG4gICAgICByZXR1cm4ge1xuICAgICAgICBuYW1lOiBuYW1lLnJlcGxhY2UoL15wYWdlLS8sIFwiXCIpLFxuICAgICAgICB2YWx1ZTogdmFsdWUgPT09IENzcy5pZGVudC5hbHdheXMgPyBDc3MuaWRlbnQucGFnZSA6IHZhbHVlLFxuICAgICAgICBpbXBvcnRhbnQ6IG9yaWdpbmFsW1wiaW1wb3J0YW50XCJdLFxuICAgICAgfTtcbiAgICBkZWZhdWx0OlxuICAgICAgcmV0dXJuIG9yaWdpbmFsO1xuICB9XG59XG5cbmV4cG9ydCBjb25zdCBmb3JjZWRCcmVha1ZhbHVlczogeyBba2V5OiBzdHJpbmddOiBib29sZWFuIHwgbnVsbCB9ID0ge1xuICBwYWdlOiB0cnVlLFxuICBsZWZ0OiB0cnVlLFxuICByaWdodDogdHJ1ZSxcbiAgcmVjdG86IHRydWUsXG4gIHZlcnNvOiB0cnVlLFxuICBjb2x1bW46IHRydWUsXG4gIHJlZ2lvbjogdHJ1ZSxcbn07XG5cbi8qKlxuICogUmV0dXJucyBpZiB0aGUgdmFsdWUgaXMgb25lIG9mIHRoZSBmb3JjZWQgYnJlYWsgdmFsdWVzLlxuICogQHBhcmFtIHZhbHVlIFRoZSBicmVhayB2YWx1ZSB0byBiZSBqdWRnZWQuIFRyZWF0cyBudWxsIGFzICdhdXRvJy5cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGlzRm9yY2VkQnJlYWtWYWx1ZSh2YWx1ZTogc3RyaW5nIHwgbnVsbCk6IGJvb2xlYW4ge1xuICByZXR1cm4gISFmb3JjZWRCcmVha1ZhbHVlc1t2YWx1ZV07XG59XG5cbmV4cG9ydCBjb25zdCBzcHJlYWRCcmVha1ZhbHVlczogeyBba2V5OiBzdHJpbmddOiBib29sZWFuIHwgbnVsbCB9ID0ge1xuICBsZWZ0OiB0cnVlLFxuICByaWdodDogdHJ1ZSxcbiAgcmVjdG86IHRydWUsXG4gIHZlcnNvOiB0cnVlLFxufTtcblxuLyoqXG4gKiBSZXR1cm5zIGlmIHRoZSB2YWx1ZSBpcyBvbmUgb2YgbGVmdC9yaWdodC9yZWN0by92ZXJzbyB2YWx1ZXMuXG4gKiBAcGFyYW0gdmFsdWUgVGhlIGJyZWFrIHZhbHVlIHRvIGJlIGp1ZGdlZC4gVHJlYXRzIG51bGwgYXMgJ2F1dG8nLlxuICovXG5leHBvcnQgZnVuY3Rpb24gaXNTcHJlYWRCcmVha1ZhbHVlKHZhbHVlOiBzdHJpbmcgfCBudWxsKTogYm9vbGVhbiB7XG4gIHJldHVybiAhIXNwcmVhZEJyZWFrVmFsdWVzW3ZhbHVlXTtcbn1cblxuZXhwb3J0IGNvbnN0IGF2b2lkQnJlYWtWYWx1ZXM6IHsgW2tleTogc3RyaW5nXTogYm9vbGVhbiB8IG51bGwgfSA9IHtcbiAgYXZvaWQ6IHRydWUsXG4gIFwiYXZvaWQtcGFnZVwiOiB0cnVlLFxuICBcImF2b2lkLWNvbHVtblwiOiB0cnVlLFxuICBcImF2b2lkLXJlZ2lvblwiOiB0cnVlLFxufTtcblxuLyoqXG4gKiBSZXR1cm5zIGlmIHRoZSB2YWx1ZSBpcyBvbmUgb2YgdGhlIGF2b2lkIGJyZWFrIHZhbHVlcy5cbiAqIEBwYXJhbSB2YWx1ZSBUaGUgYnJlYWsgdmFsdWUgdG8gYmUganVkZ2VkLiBUcmVhdHMgbnVsbCBhcyAnYXV0bycuXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBpc0F2b2lkQnJlYWtWYWx1ZSh2YWx1ZTogc3RyaW5nIHwgbnVsbCk6IGJvb2xlYW4ge1xuICByZXR1cm4gISFhdm9pZEJyZWFrVmFsdWVzW3ZhbHVlXTtcbn1cblxuLyoqXG4gKiBSZXNvbHZlcyB0aGUgZWZmZWN0aXZlIGJyZWFrIHZhbHVlIGdpdmVuIHR3byBicmVhayB2YWx1ZXMgYXQgYSBzaW5nbGUgYnJlYWtcbiAqIHBvaW50LiBUaGUgb3JkZXIgb2YgdGhlIGFyZ3VtZW50cyBhcmUgcmVsZXZhbnQsIHNpbmNlIGEgdmFsdWUgc3BlY2lmaWVkIG9uXG4gKiB0aGUgbGF0dGVyIGVsZW1lbnQgdGFrZXMgcHJlY2VkZW5jZSBvdmVyIG9uZSBvbiB0aGUgZm9ybWVyLiBBIGZvcmNlZCBicmVha1xuICogdmFsdWUgaXMgY2hvc2VuIGlmIHByZXNlbnQuIE90aGVyd2lzZSwgYW4gYXZvaWQgYnJlYWsgdmFsdWUgaXMgY2hvc2VuIGlmXG4gKiBwcmVzZW50LiBTZWUgQ1NTIEZyYWdtZW50YXRpb24gTW9kdWxlIGZvciB0aGUgcnVsZTpcbiAqICBodHRwczovL2RyYWZ0cy5jc3N3Zy5vcmcvY3NzLWJyZWFrLyNmb3JjZWQtYnJlYWtzXG4gKiAgaHR0cHM6Ly9kcmFmdHMuY3Nzd2cub3JnL2Nzcy1icmVhay8jdW5mb3JjZWQtYnJlYWtzXG4gKiBOb3RlIHRoYXQgdGhvdWdoIHRoZSBzcGVjIHJlcXVpcmVzIHRvIGhvbm9yIG11bHRpcGxlIGJyZWFrIHZhbHVlcyBhdCBhIHNpbmdsZVxuICogYnJlYWsgcG9pbnQsIHRoZSBjdXJyZW50IGltcGxlbWVudGF0aW9uIGNob29zZSBvbmUgb2YgdGhlbSBhbmQgZGlzY2FyZCB0aGVcbiAqIG90aGVycy5cbiAqIEBwYXJhbSBmaXJzdCBUaGUgYnJlYWsgdmFsdWUgc3BlY2lmaWVkIG9uIHRoZSBmb3JtZXIgZWxlbWVudC4gbnVsbCBtZWFuc1xuICogICAgICdhdXRvJyAobm90IHNwZWNpZmllZClcbiAqIEBwYXJhbSBzZWNvbmQgVGhlIGJyZWFrIHZhbHVlIHNwZWNpZmllZCBvbiB0aGUgbGF0dGVyIGVsZW1lbnQuIG51bGwgbWVhbnNcbiAqICAgICAnYXV0bycgKG5vdCBzcGVjaWZpZWQpXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiByZXNvbHZlRWZmZWN0aXZlQnJlYWtWYWx1ZShcbiAgZmlyc3Q6IHN0cmluZyB8IG51bGwsXG4gIHNlY29uZDogc3RyaW5nIHwgbnVsbCxcbik6IHN0cmluZyB8IG51bGwge1xuICBpZiAoIWZpcnN0KSB7XG4gICAgcmV0dXJuIHNlY29uZDtcbiAgfSBlbHNlIGlmICghc2Vjb25kKSB7XG4gICAgcmV0dXJuIGZpcnN0O1xuICB9IGVsc2UgaWYgKGlzU3ByZWFkQnJlYWtWYWx1ZShzZWNvbmQpKSB7XG4gICAgcmV0dXJuIHNlY29uZDtcbiAgfSBlbHNlIGlmIChpc1NwcmVhZEJyZWFrVmFsdWUoZmlyc3QpKSB7XG4gICAgcmV0dXJuIGZpcnN0O1xuICB9IGVsc2Uge1xuICAgIGNvbnN0IGZpcnN0SXNGb3JjZWRCcmVha1ZhbHVlID0gaXNGb3JjZWRCcmVha1ZhbHVlKGZpcnN0KTtcbiAgICBjb25zdCBzZWNvbmRJc0ZvcmNlZEJyZWFrVmFsdWUgPSBpc0ZvcmNlZEJyZWFrVmFsdWUoc2Vjb25kKTtcbiAgICBpZiAoZmlyc3RJc0ZvcmNlZEJyZWFrVmFsdWUgJiYgc2Vjb25kSXNGb3JjZWRCcmVha1ZhbHVlKSB7XG4gICAgICBzd2l0Y2ggKHNlY29uZCkge1xuICAgICAgICBjYXNlIFwiY29sdW1uXCI6XG4gICAgICAgICAgLy8gXCJjb2x1bW5cIiBpcyB0aGUgd2Vha2VzdCB2YWx1ZVxuICAgICAgICAgIHJldHVybiBmaXJzdDtcbiAgICAgICAgY2FzZSBcInJlZ2lvblwiOlxuICAgICAgICAgIC8vIFwicmVnaW9uXCIgaXMgc3Ryb25nZXIgdGhhbiBcImNvbHVtblwiIGJ1dCB3ZWFrZXIgdGhhbiBwYWdlXG4gICAgICAgICAgLy8gdmFsdWVzXG4gICAgICAgICAgcmV0dXJuIGZpcnN0ID09PSBcImNvbHVtblwiID8gc2Vjb25kIDogZmlyc3Q7XG4gICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgLy8gcGFnZSB2YWx1ZXMgYXJlIHN0cm9uZ2VzdFxuICAgICAgICAgIHJldHVybiBzZWNvbmQ7XG4gICAgICB9XG4gICAgfSBlbHNlIGlmIChzZWNvbmRJc0ZvcmNlZEJyZWFrVmFsdWUpIHtcbiAgICAgIHJldHVybiBzZWNvbmQ7XG4gICAgfSBlbHNlIGlmIChmaXJzdElzRm9yY2VkQnJlYWtWYWx1ZSkge1xuICAgICAgcmV0dXJuIGZpcnN0O1xuICAgIH0gZWxzZSBpZiAoaXNBdm9pZEJyZWFrVmFsdWUoc2Vjb25kKSkge1xuICAgICAgcmV0dXJuIHNlY29uZDtcbiAgICB9IGVsc2UgaWYgKGlzQXZvaWRCcmVha1ZhbHVlKGZpcnN0KSkge1xuICAgICAgcmV0dXJuIGZpcnN0O1xuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gc2Vjb25kO1xuICAgIH1cbiAgfVxufVxuXG5leHBvcnQgZnVuY3Rpb24gYnJlYWtWYWx1ZVRvU3RhcnRTaWRlVmFsdWUoYnJlYWtWYWx1ZTogc3RyaW5nIHwgbnVsbCk6IHN0cmluZyB7XG4gIHN3aXRjaCAoYnJlYWtWYWx1ZSkge1xuICAgIGNhc2UgXCJsZWZ0XCI6XG4gICAgY2FzZSBcInJpZ2h0XCI6XG4gICAgY2FzZSBcInJlY3RvXCI6XG4gICAgY2FzZSBcInZlcnNvXCI6XG4gICAgICByZXR1cm4gYnJlYWtWYWx1ZTtcbiAgICBkZWZhdWx0OlxuICAgICAgcmV0dXJuIFwiYW55XCI7XG4gIH1cbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHN0YXJ0U2lkZVZhbHVlVG9CcmVha1ZhbHVlKFxuICBzdGFydFNpZGVWYWx1ZTogc3RyaW5nLFxuKTogc3RyaW5nIHwgbnVsbCB7XG4gIHN3aXRjaCAoc3RhcnRTaWRlVmFsdWUpIHtcbiAgICBjYXNlIFwibGVmdFwiOlxuICAgIGNhc2UgXCJyaWdodFwiOlxuICAgIGNhc2UgXCJyZWN0b1wiOlxuICAgIGNhc2UgXCJ2ZXJzb1wiOlxuICAgICAgcmV0dXJuIHN0YXJ0U2lkZVZhbHVlO1xuICAgIGRlZmF1bHQ6XG4gICAgICByZXR1cm4gbnVsbDtcbiAgfVxufVxuXG5QbHVnaW4ucmVnaXN0ZXJIb29rKFwiU0lNUExFX1BST1BFUlRZXCIsIGNvbnZlcnRQYWdlQnJlYWtBbGlhc2VzKTtcbiIsIi8qKlxuICogQ29weXJpZ2h0IDIwMTkgVml2bGlvc3R5bGUgRm91bmRhdGlvblxuICpcbiAqIFZpdmxpb3N0eWxlLmpzIGlzIGZyZWUgc29mdHdhcmU6IHlvdSBjYW4gcmVkaXN0cmlidXRlIGl0IGFuZC9vciBtb2RpZnlcbiAqIGl0IHVuZGVyIHRoZSB0ZXJtcyBvZiB0aGUgR05VIEFmZmVybyBHZW5lcmFsIFB1YmxpYyBMaWNlbnNlIGFzIHB1Ymxpc2hlZCBieVxuICogdGhlIEZyZWUgU29mdHdhcmUgRm91bmRhdGlvbiwgZWl0aGVyIHZlcnNpb24gMyBvZiB0aGUgTGljZW5zZSwgb3JcbiAqIChhdCB5b3VyIG9wdGlvbikgYW55IGxhdGVyIHZlcnNpb24uXG4gKlxuICogVml2bGlvc3R5bGUuanMgaXMgZGlzdHJpYnV0ZWQgaW4gdGhlIGhvcGUgdGhhdCBpdCB3aWxsIGJlIHVzZWZ1bCxcbiAqIGJ1dCBXSVRIT1VUIEFOWSBXQVJSQU5UWTsgd2l0aG91dCBldmVuIHRoZSBpbXBsaWVkIHdhcnJhbnR5IG9mXG4gKiBNRVJDSEFOVEFCSUxJVFkgb3IgRklUTkVTUyBGT1IgQSBQQVJUSUNVTEFSIFBVUlBPU0UuICBTZWUgdGhlXG4gKiBHTlUgQWZmZXJvIEdlbmVyYWwgUHVibGljIExpY2Vuc2UgZm9yIG1vcmUgZGV0YWlscy5cbiAqXG4gKiBZb3Ugc2hvdWxkIGhhdmUgcmVjZWl2ZWQgYSBjb3B5IG9mIHRoZSBHTlUgQWZmZXJvIEdlbmVyYWwgUHVibGljIExpY2Vuc2VcbiAqIGFsb25nIHdpdGggVml2bGlvc3R5bGUuanMuICBJZiBub3QsIHNlZSA8aHR0cDovL3d3dy5nbnUub3JnL2xpY2Vuc2VzLz4uXG4gKlxuICogQGZpbGVvdmVydmlldyBMYXlvdXRIZWxwZXIgLSBIZWxwZXIgZnVuY3Rpb25zIG9mIExheW91dC5cbiAqL1xuaW1wb3J0ICogYXMgQmFzZSBmcm9tIFwiLi9iYXNlXCI7XG5pbXBvcnQgKiBhcyBMb2dnaW5nIGZyb20gXCIuL2xvZ2dpbmdcIjtcbmltcG9ydCAqIGFzIFZ0cmVlSW1wbCBmcm9tIFwiLi92dHJlZVwiO1xuaW1wb3J0IHsgTGF5b3V0LCBWdHJlZSB9IGZyb20gXCIuL3R5cGVzXCI7XG5cbi8qKlxuICogVGhvdWdoIG1ldGhvZCB1c2VkIHRvIGJlIHVzZWQgYXMgYSB3b3JrYXJvdW5kIGZvciBDaHJvbWUgYnVnLCBpdCBzZWVtcyB0aGF0XG4gKiB0aGUgYnVnIGhhcyBiZWVuIGFscmVhZHkgZml4ZWQ6XG4gKiAgIGh0dHBzOi8vYnVncy5jaHJvbWl1bS5vcmcvcC9jaHJvbWl1bS9pc3N1ZXMvZGV0YWlsP2lkPTI5NzgwOFxuICogV2Ugbm93IHVzZSB0aGlzIG1ldGhvZCBhcyBhIHdvcmthcm91bmQgZm9yIEZpcmVmb3ggYnVnOlxuICogICBodHRwczovL2J1Z3ppbGxhLm1vemlsbGEub3JnL3Nob3dfYnVnLmNnaT9pZD0xMTU5MzA5XG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBmaXhCb3hlc0Zvck5vZGUoXG4gIGNsaWVudExheW91dDogVnRyZWUuQ2xpZW50TGF5b3V0LFxuICBib3hlczogVnRyZWUuQ2xpZW50UmVjdFtdLFxuICBub2RlOiBOb2RlLFxuKTogVnRyZWUuQ2xpZW50UmVjdFtdIHtcbiAgY29uc3QgZnVsbFJhbmdlID0gbm9kZS5vd25lckRvY3VtZW50LmNyZWF0ZVJhbmdlKCk7XG4gIGZ1bGxSYW5nZS5zZXRTdGFydChub2RlLCAwKTtcbiAgZnVsbFJhbmdlLnNldEVuZChub2RlLCBub2RlLnRleHRDb250ZW50Lmxlbmd0aCk7XG4gIGNvbnN0IGZ1bGxCb3hlcyA9IGNsaWVudExheW91dC5nZXRSYW5nZUNsaWVudFJlY3RzKGZ1bGxSYW5nZSk7XG4gIGNvbnN0IHJlc3VsdCA9IFtdO1xuICBmb3IgKGNvbnN0IGJveCBvZiBib3hlcykge1xuICAgIGxldCBrOiBudW1iZXI7XG4gICAgZm9yIChrID0gMDsgayA8IGZ1bGxCb3hlcy5sZW5ndGg7IGsrKykge1xuICAgICAgY29uc3QgZnVsbEJveCA9IGZ1bGxCb3hlc1trXTtcbiAgICAgIGlmIChcbiAgICAgICAgYm94LnRvcCA+PSBmdWxsQm94LnRvcCAmJlxuICAgICAgICBib3guYm90dG9tIDw9IGZ1bGxCb3guYm90dG9tICYmXG4gICAgICAgIE1hdGguYWJzKGJveC5sZWZ0IC0gZnVsbEJveC5sZWZ0KSA8IDFcbiAgICAgICkge1xuICAgICAgICByZXN1bHQucHVzaCh7XG4gICAgICAgICAgdG9wOiBib3gudG9wLFxuICAgICAgICAgIGxlZnQ6IGZ1bGxCb3gubGVmdCxcbiAgICAgICAgICBib3R0b206IGJveC5ib3R0b20sXG4gICAgICAgICAgcmlnaHQ6IGZ1bGxCb3gucmlnaHQsXG4gICAgICAgIH0pO1xuICAgICAgICBicmVhaztcbiAgICAgIH1cbiAgICB9XG4gICAgaWYgKGsgPT0gZnVsbEJveGVzLmxlbmd0aCkge1xuICAgICAgTG9nZ2luZy5sb2dnZXIud2FybihcIkNvdWxkIG5vdCBmaXggY2hhcmFjdGVyIGJveFwiKTtcbiAgICAgIHJlc3VsdC5wdXNoKGJveCk7XG4gICAgfVxuICB9XG4gIHJldHVybiByZXN1bHQ7XG59XG5cbi8qKlxuICogQ2FsY3VsYXRlIHRoZSBwb3NpdGlvbiBvZiB0aGUgXCJhZnRlclwiIGVkZ2UgaW4gdGhlIGJsb2NrLXByb2dyZXNzaW9uXG4gKiBkaW1lbnNpb24uIFJldHVybiAwIGlmIHBvc2l0aW9uIHdhcyBkZXRlcm1pbmVkIHN1Y2Nlc3NmdWxseSBhbmQgcmV0dXJuXG4gKiBub24temVybyBpZiBwb3NpdGlvbiBjb3VsZCBub3QgYmUgZGV0ZXJtaW5lZCBhbmQgdGhlIG5vZGUgc2hvdWxkIGJlXG4gKiBjb25zaWRlcmVkIHplcm8taGVpZ2h0LlxuICovXG5leHBvcnQgZnVuY3Rpb24gY2FsY3VsYXRlRWRnZShcbiAgbm9kZUNvbnRleHQ6IFZ0cmVlLk5vZGVDb250ZXh0LFxuICBjbGllbnRMYXlvdXQ6IFZ0cmVlLkNsaWVudExheW91dCxcbiAgZXh0cmFPZmZzZXQ6IG51bWJlcixcbiAgdmVydGljYWw6IGJvb2xlYW4sXG4pOiBudW1iZXIge1xuICBjb25zdCBub2RlID0gbm9kZUNvbnRleHQudmlld05vZGU7XG4gIGlmICghbm9kZSkge1xuICAgIHJldHVybiBOYU47XG4gIH1cbiAgaWYgKG5vZGUubm9kZVR5cGUgPT0gMSkge1xuICAgIGlmIChub2RlQ29udGV4dC5hZnRlciB8fCAhbm9kZUNvbnRleHQuaW5saW5lKSB7XG4gICAgICBjb25zdCBjYm94ID0gY2xpZW50TGF5b3V0LmdldEVsZW1lbnRDbGllbnRSZWN0KG5vZGUgYXMgRWxlbWVudCk7XG4gICAgICBpZiAoY2JveC5yaWdodCA+PSBjYm94LmxlZnQgJiYgY2JveC5ib3R0b20gPj0gY2JveC50b3ApIHtcbiAgICAgICAgaWYgKG5vZGVDb250ZXh0LmFmdGVyKSB7XG4gICAgICAgICAgcmV0dXJuIHZlcnRpY2FsID8gY2JveC5sZWZ0IDogY2JveC5ib3R0b207XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgcmV0dXJuIHZlcnRpY2FsID8gY2JveC5yaWdodCA6IGNib3gudG9wO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiBOYU47XG4gIH0gZWxzZSB7XG4gICAgbGV0IGVkZ2UgPSBOYU47XG4gICAgY29uc3QgcmFuZ2UgPSBub2RlLm93bmVyRG9jdW1lbnQuY3JlYXRlUmFuZ2UoKTtcbiAgICBjb25zdCBsZW5ndGggPSBub2RlLnRleHRDb250ZW50Lmxlbmd0aDtcbiAgICBpZiAoIWxlbmd0aCkge1xuICAgICAgcmV0dXJuIE5hTjtcbiAgICB9XG4gICAgaWYgKG5vZGVDb250ZXh0LmFmdGVyKSB7XG4gICAgICBleHRyYU9mZnNldCArPSBsZW5ndGg7XG4gICAgfVxuICAgIGlmIChleHRyYU9mZnNldCA+PSBsZW5ndGgpIHtcbiAgICAgIGV4dHJhT2Zmc2V0ID0gbGVuZ3RoIC0gMTtcbiAgICB9XG4gICAgcmFuZ2Uuc2V0U3RhcnQobm9kZSwgZXh0cmFPZmZzZXQpO1xuICAgIHJhbmdlLnNldEVuZChub2RlLCBleHRyYU9mZnNldCArIDEpO1xuICAgIGxldCBib3hlcyA9IGNsaWVudExheW91dC5nZXRSYW5nZUNsaWVudFJlY3RzKHJhbmdlKTtcbiAgICBpZiAodmVydGljYWwgJiYgQmFzZS5jaGVja1ZlcnRpY2FsQkJveEJ1Zyhkb2N1bWVudC5ib2R5KSkge1xuICAgICAgYm94ZXMgPSBmaXhCb3hlc0Zvck5vZGUoY2xpZW50TGF5b3V0LCBib3hlcywgbm9kZSk7XG4gICAgfVxuICAgIGxldCBtYXhTaXplID0gMDtcblxuICAgIC8vIEdldCBmaXJzdCBvZiB0aGUgd2lkZXN0IGJveGVzICh3b3JrcyBhcm91bmQgQ2hyb21lIHJlc3VsdHMgZm9yIHNvZnRcbiAgICAvLyBoeXBoZW5zKS5cbiAgICBmb3IgKGNvbnN0IGJveCBvZiBib3hlcykge1xuICAgICAgY29uc3QgYm94U2l6ZSA9IHZlcnRpY2FsID8gYm94LmJvdHRvbSAtIGJveC50b3AgOiBib3gucmlnaHQgLSBib3gubGVmdDtcbiAgICAgIGlmIChcbiAgICAgICAgYm94LnJpZ2h0ID4gYm94LmxlZnQgJiZcbiAgICAgICAgYm94LmJvdHRvbSA+IGJveC50b3AgJiZcbiAgICAgICAgKGlzTmFOKGVkZ2UpIHx8IGJveFNpemUgPiBtYXhTaXplKVxuICAgICAgKSB7XG4gICAgICAgIGVkZ2UgPSB2ZXJ0aWNhbCA/IGJveC5sZWZ0IDogYm94LmJvdHRvbTtcbiAgICAgICAgbWF4U2l6ZSA9IGJveFNpemU7XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiBlZGdlO1xuICB9XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBnZXRFbGVtZW50SGVpZ2h0KFxuICBlbGVtZW50OiBFbGVtZW50LFxuICBjb2x1bW46IExheW91dC5Db2x1bW4sXG4gIHZlcnRpY2FsOiBib29sZWFuLFxuKTogbnVtYmVyIHtcbiAgY29uc3QgcmVjdCA9IGNvbHVtbi5jbGllbnRMYXlvdXQuZ2V0RWxlbWVudENsaWVudFJlY3QoZWxlbWVudCk7XG4gIGNvbnN0IG1hcmdpbiA9IGNvbHVtbi5nZXRDb21wdXRlZE1hcmdpbihlbGVtZW50KTtcbiAgcmV0dXJuIHZlcnRpY2FsXG4gICAgPyByZWN0W1wid2lkdGhcIl0gKyBtYXJnaW5bXCJsZWZ0XCJdICsgbWFyZ2luW1wicmlnaHRcIl1cbiAgICA6IHJlY3RbXCJoZWlnaHRcIl0gKyBtYXJnaW5bXCJ0b3BcIl0gKyBtYXJnaW5bXCJib3R0b21cIl07XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBpc09ycGhhbihub2RlOiBOb2RlKTogYm9vbGVhbiB7XG4gIHdoaWxlIChub2RlKSB7XG4gICAgaWYgKG5vZGUucGFyZW50Tm9kZSA9PT0gbm9kZS5vd25lckRvY3VtZW50KSB7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICAgIG5vZGUgPSBub2RlLnBhcmVudE5vZGU7XG4gIH1cbiAgcmV0dXJuIHRydWU7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiByZW1vdmVGb2xsb3dpbmdTaWJsaW5ncyhcbiAgcGFyZW50Tm9kZTogTm9kZSxcbiAgdmlld05vZGU6IE5vZGUsXG4pOiB2b2lkIHtcbiAgaWYgKCFwYXJlbnROb2RlKSB7XG4gICAgcmV0dXJuO1xuICB9XG4gIGxldCBsYXN0Q2hpbGQ6IE5vZGU7XG4gIHdoaWxlICgobGFzdENoaWxkID0gcGFyZW50Tm9kZS5sYXN0Q2hpbGQpICE9IHZpZXdOb2RlKSB7XG4gICAgcGFyZW50Tm9kZS5yZW1vdmVDaGlsZChsYXN0Q2hpbGQpO1xuICB9XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBpc1NwZWNpYWwoZTogRWxlbWVudCk6IGJvb2xlYW4ge1xuICByZXR1cm4gISFlLmdldEF0dHJpYnV0ZShWdHJlZUltcGwuU1BFQ0lBTF9BVFRSKTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGlzU3BlY2lhbE5vZGVDb250ZXh0KG5vZGVDb250ZXh0OiBWdHJlZS5Ob2RlQ29udGV4dCk6IGJvb2xlYW4ge1xuICBpZiAoIW5vZGVDb250ZXh0KSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG4gIGNvbnN0IHZpZXdOb2RlID0gbm9kZUNvbnRleHQudmlld05vZGU7XG4gIGlmICh2aWV3Tm9kZSAmJiB2aWV3Tm9kZS5ub2RlVHlwZSA9PT0gMSkge1xuICAgIHJldHVybiBpc1NwZWNpYWwodmlld05vZGUgYXMgRWxlbWVudCk7XG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG59XG4iLCIvKipcbiAqIENvcHlyaWdodCAyMDE5IFZpdmxpb3N0eWxlIEZvdW5kYXRpb25cbiAqXG4gKiBWaXZsaW9zdHlsZS5qcyBpcyBmcmVlIHNvZnR3YXJlOiB5b3UgY2FuIHJlZGlzdHJpYnV0ZSBpdCBhbmQvb3IgbW9kaWZ5XG4gKiBpdCB1bmRlciB0aGUgdGVybXMgb2YgdGhlIEdOVSBBZmZlcm8gR2VuZXJhbCBQdWJsaWMgTGljZW5zZSBhcyBwdWJsaXNoZWQgYnlcbiAqIHRoZSBGcmVlIFNvZnR3YXJlIEZvdW5kYXRpb24sIGVpdGhlciB2ZXJzaW9uIDMgb2YgdGhlIExpY2Vuc2UsIG9yXG4gKiAoYXQgeW91ciBvcHRpb24pIGFueSBsYXRlciB2ZXJzaW9uLlxuICpcbiAqIFZpdmxpb3N0eWxlLmpzIGlzIGRpc3RyaWJ1dGVkIGluIHRoZSBob3BlIHRoYXQgaXQgd2lsbCBiZSB1c2VmdWwsXG4gKiBidXQgV0lUSE9VVCBBTlkgV0FSUkFOVFk7IHdpdGhvdXQgZXZlbiB0aGUgaW1wbGllZCB3YXJyYW50eSBvZlxuICogTUVSQ0hBTlRBQklMSVRZIG9yIEZJVE5FU1MgRk9SIEEgUEFSVElDVUxBUiBQVVJQT1NFLiAgU2VlIHRoZVxuICogR05VIEFmZmVybyBHZW5lcmFsIFB1YmxpYyBMaWNlbnNlIGZvciBtb3JlIGRldGFpbHMuXG4gKlxuICogWW91IHNob3VsZCBoYXZlIHJlY2VpdmVkIGEgY29weSBvZiB0aGUgR05VIEFmZmVybyBHZW5lcmFsIFB1YmxpYyBMaWNlbnNlXG4gKiBhbG9uZyB3aXRoIFZpdmxpb3N0eWxlLmpzLiAgSWYgbm90LCBzZWUgPGh0dHA6Ly93d3cuZ251Lm9yZy9saWNlbnNlcy8+LlxuICpcbiAqIEBmaWxlb3ZlcnZpZXcgQnJlYWtQb3NpdGlvbiAtIERlZmluaXRpb25zIG9mIEJyZWFrUG9zaXRpb24uXG4gKi9cbmltcG9ydCAqIGFzIEJyZWFrIGZyb20gXCIuL2JyZWFrXCI7XG5pbXBvcnQgKiBhcyBMYXlvdXRIZWxwZXIgZnJvbSBcIi4vbGF5b3V0LWhlbHBlclwiO1xuaW1wb3J0IHsgTGF5b3V0LCBSZXBldGl0aXZlRWxlbWVudCwgVnRyZWUgfSBmcm9tIFwiLi90eXBlc1wiO1xuXG4vKipcbiAqIFBvdGVudGlhbCBicmVha2luZyBwb3NpdGlvbi5cbiAqL1xuZXhwb3J0IHR5cGUgQnJlYWtQb3NpdGlvbiA9IExheW91dC5CcmVha1Bvc2l0aW9uO1xuXG5leHBvcnQgYWJzdHJhY3QgY2xhc3MgQWJzdHJhY3RCcmVha1Bvc2l0aW9uXG4gIGltcGxlbWVudHMgTGF5b3V0LkFic3RyYWN0QnJlYWtQb3NpdGlvbiB7XG4gIGFic3RyYWN0IGZpbmRBY2NlcHRhYmxlQnJlYWsoXG4gICAgY29sdW1uOiBMYXlvdXQuQ29sdW1uLFxuICAgIHBlbmFsdHk6IG51bWJlcixcbiAgKTogVnRyZWUuTm9kZUNvbnRleHQ7XG5cbiAgYWJzdHJhY3QgZ2V0TWluQnJlYWtQZW5hbHR5KCk6IG51bWJlcjtcblxuICBjYWxjdWxhdGVPZmZzZXQoY29sdW1uKTogeyBjdXJyZW50OiBudW1iZXI7IG1pbmltdW06IG51bWJlciB9IHtcbiAgICByZXR1cm4gY2FsY3VsYXRlT2Zmc2V0KFxuICAgICAgdGhpcy5nZXROb2RlQ29udGV4dCgpLFxuICAgICAgY29sdW1uLmNvbGxlY3RFbGVtZW50c09mZnNldCgpLFxuICAgICk7XG4gIH1cblxuICAvKipcbiAgICogQG92ZXJyaWRlXG4gICAqL1xuICBicmVha1Bvc2l0aW9uQ2hvc2VuKGNvbHVtbjogTGF5b3V0LkNvbHVtbik6IHZvaWQge31cblxuICBnZXROb2RlQ29udGV4dCgpOiBWdHJlZS5Ob2RlQ29udGV4dCB7XG4gICAgcmV0dXJuIG51bGw7XG4gIH1cbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGNhbGN1bGF0ZU9mZnNldChcbiAgbm9kZUNvbnRleHQ6IFZ0cmVlLk5vZGVDb250ZXh0LFxuICBlbGVtZW50c09mZnNldHM6IFJlcGV0aXRpdmVFbGVtZW50LkVsZW1lbnRzT2Zmc2V0W10sXG4pOiB7IGN1cnJlbnQ6IG51bWJlcjsgbWluaW11bTogbnVtYmVyIH0ge1xuICByZXR1cm4ge1xuICAgIGN1cnJlbnQ6IGVsZW1lbnRzT2Zmc2V0cy5yZWR1Y2UoXG4gICAgICAodmFsLCByZXBldGl0aXZlRWxlbWVudCkgPT5cbiAgICAgICAgdmFsICsgcmVwZXRpdGl2ZUVsZW1lbnQuY2FsY3VsYXRlT2Zmc2V0KG5vZGVDb250ZXh0KSxcbiAgICAgIDAsXG4gICAgKSxcbiAgICBtaW5pbXVtOiBlbGVtZW50c09mZnNldHMucmVkdWNlKFxuICAgICAgKHZhbCwgcmVwZXRpdGl2ZUVsZW1lbnQpID0+XG4gICAgICAgIHZhbCArIHJlcGV0aXRpdmVFbGVtZW50LmNhbGN1bGF0ZU1pbmltdW1PZmZzZXQobm9kZUNvbnRleHQpLFxuICAgICAgMCxcbiAgICApLFxuICB9O1xufVxuXG4vKipcbiAqIFBvdGVudGlhbCBlZGdlIGJyZWFraW5nIHBvc2l0aW9uLlxuICovXG5leHBvcnQgY2xhc3MgRWRnZUJyZWFrUG9zaXRpb25cbiAgZXh0ZW5kcyBBYnN0cmFjdEJyZWFrUG9zaXRpb25cbiAgaW1wbGVtZW50cyBMYXlvdXQuRWRnZUJyZWFrUG9zaXRpb24ge1xuICBvdmVyZmxvd0lmUmVwZXRpdGl2ZUVsZW1lbnRzRHJvcHBlZDogYm9vbGVhbjtcbiAgcHJvdGVjdGVkIGlzRWRnZVVwZGF0ZWQ6IGJvb2xlYW4gPSBmYWxzZTtcbiAgcHJpdmF0ZSBlZGdlOiBudW1iZXIgPSAwO1xuXG4gIGNvbnN0cnVjdG9yKFxuICAgIHB1YmxpYyByZWFkb25seSBwb3NpdGlvbjogVnRyZWUuTm9kZUNvbnRleHQsXG4gICAgcHVibGljIHJlYWRvbmx5IGJyZWFrT25FZGdlOiBzdHJpbmcgfCBudWxsLFxuICAgIHB1YmxpYyBvdmVyZmxvd3M6IGJvb2xlYW4sXG4gICAgcHVibGljIHJlYWRvbmx5IGNvbXB1dGVkQmxvY2tTaXplOiBudW1iZXIsXG4gICkge1xuICAgIHN1cGVyKCk7XG4gICAgdGhpcy5vdmVyZmxvd0lmUmVwZXRpdGl2ZUVsZW1lbnRzRHJvcHBlZCA9IG92ZXJmbG93cztcbiAgfVxuXG4gIC8qKlxuICAgKiBAb3ZlcnJpZGVcbiAgICovXG4gIGZpbmRBY2NlcHRhYmxlQnJlYWsoXG4gICAgY29sdW1uOiBMYXlvdXQuQ29sdW1uLFxuICAgIHBlbmFsdHk6IG51bWJlcixcbiAgKTogVnRyZWUuTm9kZUNvbnRleHQge1xuICAgIHRoaXMudXBkYXRlT3ZlcmZsb3dzKGNvbHVtbik7XG4gICAgaWYgKHBlbmFsdHkgPCB0aGlzLmdldE1pbkJyZWFrUGVuYWx0eSgpKSB7XG4gICAgICByZXR1cm4gbnVsbDtcbiAgICB9XG4gICAgcmV0dXJuIGNvbHVtbi5maW5kRWRnZUJyZWFrUG9zaXRpb24odGhpcyk7XG4gIH1cblxuICAvKipcbiAgICogQG92ZXJyaWRlXG4gICAqL1xuICBnZXRNaW5CcmVha1BlbmFsdHkoKTogbnVtYmVyIHtcbiAgICBpZiAoIXRoaXMuaXNFZGdlVXBkYXRlZCkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKFwiRWRnZUJyZWFrUG9zaXRpb24ucHJvdG90eXBlLnVwZGF0ZUVkZ2Ugbm90IGNhbGxlZFwiKTtcbiAgICB9XG4gICAgY29uc3QgcHJlZmVyRHJvcHBpbmcgPVxuICAgICAgdGhpcy5pc0ZpcnN0Q29udGVudE9mUmVwZXRpdGl2ZUVsZW1lbnRzT3duZXIoKSAmJlxuICAgICAgIXRoaXMub3ZlcmZsb3dJZlJlcGV0aXRpdmVFbGVtZW50c0Ryb3BwZWQ7XG4gICAgcmV0dXJuIChcbiAgICAgIChCcmVhay5pc0F2b2lkQnJlYWtWYWx1ZSh0aGlzLmJyZWFrT25FZGdlKSA/IDEgOiAwKSArXG4gICAgICAodGhpcy5vdmVyZmxvd3MgJiYgIXByZWZlckRyb3BwaW5nID8gMyA6IDApICtcbiAgICAgICh0aGlzLnBvc2l0aW9uLnBhcmVudCA/IHRoaXMucG9zaXRpb24ucGFyZW50LmJyZWFrUGVuYWx0eSA6IDApXG4gICAgKTtcbiAgfVxuXG4gIHByaXZhdGUgdXBkYXRlRWRnZShjb2x1bW46IExheW91dC5Db2x1bW4pIHtcbiAgICBjb25zdCBjbG9uZWRQYWRkaW5nQm9yZGVyID0gY29sdW1uLmNhbGN1bGF0ZUNsb25lZFBhZGRpbmdCb3JkZXIoXG4gICAgICB0aGlzLnBvc2l0aW9uLFxuICAgICk7XG4gICAgdGhpcy5lZGdlID1cbiAgICAgIExheW91dEhlbHBlci5jYWxjdWxhdGVFZGdlKFxuICAgICAgICB0aGlzLnBvc2l0aW9uLFxuICAgICAgICBjb2x1bW4uY2xpZW50TGF5b3V0LFxuICAgICAgICAwLFxuICAgICAgICBjb2x1bW4udmVydGljYWwsXG4gICAgICApICsgY2xvbmVkUGFkZGluZ0JvcmRlcjtcbiAgICB0aGlzLmlzRWRnZVVwZGF0ZWQgPSB0cnVlO1xuICB9XG5cbiAgcHJpdmF0ZSB1cGRhdGVPdmVyZmxvd3MoY29sdW1uOiBMYXlvdXQuQ29sdW1uKSB7XG4gICAgaWYgKCF0aGlzLmlzRWRnZVVwZGF0ZWQpIHtcbiAgICAgIHRoaXMudXBkYXRlRWRnZShjb2x1bW4pO1xuICAgIH1cbiAgICBjb25zdCBlZGdlID0gdGhpcy5lZGdlO1xuICAgIGNvbnN0IG9mZnNldHMgPSB0aGlzLmNhbGN1bGF0ZU9mZnNldChjb2x1bW4pO1xuICAgIHRoaXMub3ZlcmZsb3dJZlJlcGV0aXRpdmVFbGVtZW50c0Ryb3BwZWQgPSBjb2x1bW4uaXNPdmVyZmxvd24oXG4gICAgICBlZGdlICsgKGNvbHVtbi52ZXJ0aWNhbCA/IC0xIDogMSkgKiBvZmZzZXRzLm1pbmltdW0sXG4gICAgKTtcbiAgICB0aGlzLm92ZXJmbG93cyA9IHRoaXMucG9zaXRpb24ub3ZlcmZsb3cgPSBjb2x1bW4uaXNPdmVyZmxvd24oXG4gICAgICBlZGdlICsgKGNvbHVtbi52ZXJ0aWNhbCA/IC0xIDogMSkgKiBvZmZzZXRzLmN1cnJlbnQsXG4gICAgKTtcbiAgfVxuXG4gIC8qKiBAb3ZlcnJpZGUgKi9cbiAgZ2V0Tm9kZUNvbnRleHQoKTogVnRyZWUuTm9kZUNvbnRleHQge1xuICAgIHJldHVybiB0aGlzLnBvc2l0aW9uO1xuICB9XG5cbiAgcHJpdmF0ZSBpc0ZpcnN0Q29udGVudE9mUmVwZXRpdGl2ZUVsZW1lbnRzT3duZXIoKTogYm9vbGVhbiB7XG4gICAgY29uc3Qgbm9kZUNvbnRleHQgPSB0aGlzLmdldE5vZGVDb250ZXh0KCk7XG4gICAgaWYgKCFub2RlQ29udGV4dCB8fCAhbm9kZUNvbnRleHQucGFyZW50KSB7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICAgIGNvbnN0IHsgZm9ybWF0dGluZ0NvbnRleHQgfSA9IG5vZGVDb250ZXh0LnBhcmVudDtcbiAgICBpZiAoXG4gICAgICAhUmVwZXRpdGl2ZUVsZW1lbnQuaXNJbnN0YW5jZU9mUmVwZXRpdGl2ZUVsZW1lbnRzT3duZXJGb3JtYXR0aW5nQ29udGV4dChcbiAgICAgICAgZm9ybWF0dGluZ0NvbnRleHQsXG4gICAgICApXG4gICAgKSB7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuXG4gICAgY29uc3QgcmVwZXRpdGl2ZUVsZW1lbnRzID0gZm9ybWF0dGluZ0NvbnRleHQuZ2V0UmVwZXRpdGl2ZUVsZW1lbnRzKCk7XG4gICAgaWYgKCFyZXBldGl0aXZlRWxlbWVudHMpIHtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gICAgcmV0dXJuIHJlcGV0aXRpdmVFbGVtZW50cy5pc0ZpcnN0Q29udGVudE5vZGUobm9kZUNvbnRleHQpO1xuICB9XG59XG4iLCIvKipcbiAqIENvcHlyaWdodCAyMDE2IFRyaW0tbWFya3MgSW5jLlxuICogQ29weXJpZ2h0IDIwMTkgVml2bGlvc3R5bGUgRm91bmRhdGlvblxuICpcbiAqIFZpdmxpb3N0eWxlLmpzIGlzIGZyZWUgc29mdHdhcmU6IHlvdSBjYW4gcmVkaXN0cmlidXRlIGl0IGFuZC9vciBtb2RpZnlcbiAqIGl0IHVuZGVyIHRoZSB0ZXJtcyBvZiB0aGUgR05VIEFmZmVybyBHZW5lcmFsIFB1YmxpYyBMaWNlbnNlIGFzIHB1Ymxpc2hlZCBieVxuICogdGhlIEZyZWUgU29mdHdhcmUgRm91bmRhdGlvbiwgZWl0aGVyIHZlcnNpb24gMyBvZiB0aGUgTGljZW5zZSwgb3JcbiAqIChhdCB5b3VyIG9wdGlvbikgYW55IGxhdGVyIHZlcnNpb24uXG4gKlxuICogVml2bGlvc3R5bGUuanMgaXMgZGlzdHJpYnV0ZWQgaW4gdGhlIGhvcGUgdGhhdCBpdCB3aWxsIGJlIHVzZWZ1bCxcbiAqIGJ1dCBXSVRIT1VUIEFOWSBXQVJSQU5UWTsgd2l0aG91dCBldmVuIHRoZSBpbXBsaWVkIHdhcnJhbnR5IG9mXG4gKiBNRVJDSEFOVEFCSUxJVFkgb3IgRklUTkVTUyBGT1IgQSBQQVJUSUNVTEFSIFBVUlBPU0UuICBTZWUgdGhlXG4gKiBHTlUgQWZmZXJvIEdlbmVyYWwgUHVibGljIExpY2Vuc2UgZm9yIG1vcmUgZGV0YWlscy5cbiAqXG4gKiBZb3Ugc2hvdWxkIGhhdmUgcmVjZWl2ZWQgYSBjb3B5IG9mIHRoZSBHTlUgQWZmZXJvIEdlbmVyYWwgUHVibGljIExpY2Vuc2VcbiAqIGFsb25nIHdpdGggVml2bGlvc3R5bGUuanMuICBJZiBub3QsIHNlZSA8aHR0cDovL3d3dy5nbnUub3JnL2xpY2Vuc2VzLz4uXG4gKlxuICogQGZpbGVvdmVydmlldyBEaXNwbGF5IC0gQ1NTIERpc3BsYXkgTW9kdWxlXG4gKi9cbmltcG9ydCAqIGFzIENzcyBmcm9tIFwiLi9jc3NcIjtcblxuZXhwb3J0IGNvbnN0IEZMT1dfUk9PVF9BVFRSID0gXCJkYXRhLXZpdmxpb3N0eWxlLWZsb3ctcm9vdFwiO1xuXG5leHBvcnQgZnVuY3Rpb24gaXNGbG93Um9vdChlbGVtZW50OiBFbGVtZW50KTogYm9vbGVhbiB7XG4gIHJldHVybiBlbGVtZW50LmdldEF0dHJpYnV0ZShGTE9XX1JPT1RfQVRUUikgPT09IFwidHJ1ZVwiO1xufVxuXG4vKipcbiAqICdCbG9ja2lmeScgYSBkaXNwbGF5IHZhbHVlLlxuICogY2YuIGh0dHBzOi8vZHJhZnRzLmNzc3dnLm9yZy9jc3MtZGlzcGxheS8jdHJhbnNmb3JtYXRpb25zXG4gKiAgICAgaHR0cHM6Ly9kcmFmdHMuY3Nzd2cub3JnL2NzczIvdmlzdXJlbi5odG1sI2Rpcy1wb3MtZmxvXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBibG9ja2lmeShkaXNwbGF5OiBDc3MuSWRlbnQpOiBDc3MuSWRlbnQge1xuICBjb25zdCBkaXNwbGF5U3RyID0gZGlzcGxheS50b1N0cmluZygpO1xuICBsZXQgYmxvY2tpZmllZFN0cjogc3RyaW5nO1xuICBzd2l0Y2ggKGRpc3BsYXlTdHIpIHtcbiAgICBjYXNlIFwiaW5saW5lLWZsZXhcIjpcbiAgICAgIGJsb2NraWZpZWRTdHIgPSBcImZsZXhcIjtcbiAgICAgIGJyZWFrO1xuICAgIGNhc2UgXCJpbmxpbmUtZ3JpZFwiOlxuICAgICAgYmxvY2tpZmllZFN0ciA9IFwiZ3JpZFwiO1xuICAgICAgYnJlYWs7XG4gICAgY2FzZSBcImlubGluZS10YWJsZVwiOlxuICAgICAgYmxvY2tpZmllZFN0ciA9IFwidGFibGVcIjtcbiAgICAgIGJyZWFrO1xuICAgIGNhc2UgXCJpbmxpbmVcIjpcbiAgICBjYXNlIFwidGFibGUtcm93LWdyb3VwXCI6XG4gICAgY2FzZSBcInRhYmxlLWNvbHVtblwiOlxuICAgIGNhc2UgXCJ0YWJsZS1jb2x1bW4tZ3JvdXBcIjpcbiAgICBjYXNlIFwidGFibGUtaGVhZGVyLWdyb3VwXCI6XG4gICAgY2FzZSBcInRhYmxlLWZvb3Rlci1ncm91cFwiOlxuICAgIGNhc2UgXCJ0YWJsZS1yb3dcIjpcbiAgICBjYXNlIFwidGFibGUtY2VsbFwiOlxuICAgIGNhc2UgXCJ0YWJsZS1jYXB0aW9uXCI6XG4gICAgY2FzZSBcImlubGluZS1ibG9ja1wiOlxuICAgICAgYmxvY2tpZmllZFN0ciA9IFwiYmxvY2tcIjtcbiAgICAgIGJyZWFrO1xuICAgIGRlZmF1bHQ6XG4gICAgICBibG9ja2lmaWVkU3RyID0gZGlzcGxheVN0cjtcbiAgfVxuICByZXR1cm4gQ3NzLmdldE5hbWUoYmxvY2tpZmllZFN0cik7XG59XG5cbi8qKlxuICogSnVkZ2UgaWYgdGhlIGdlbmVyYXRlZCBib3ggaXMgYWJzb2x1dGVseSBwb3NpdGlvbmVkLlxuICovXG5leHBvcnQgZnVuY3Rpb24gaXNBYnNvbHV0ZWx5UG9zaXRpb25lZChwb3NpdGlvbjogQ3NzLklkZW50KTogYm9vbGVhbiB7XG4gIHJldHVybiBwb3NpdGlvbiA9PT0gQ3NzLmlkZW50LmFic29sdXRlIHx8IHBvc2l0aW9uID09PSBDc3MuaWRlbnQuZml4ZWQ7XG59XG5cbi8qKlxuICogR2V0IGNvbXB1dGVkIHZhbHVlcyBvZiBkaXNwbGF5LCBwb3NpdGlvbiBhbmQgZmxvYXQuXG4gKiBjZi4gaHR0cHM6Ly9kcmFmdHMuY3Nzd2cub3JnL2Nzcy1kaXNwbGF5LyN0cmFuc2Zvcm1hdGlvbnNcbiAqICAgICBodHRwczovL2RyYWZ0cy5jc3N3Zy5vcmcvY3NzMi92aXN1cmVuLmh0bWwjZGlzLXBvcy1mbG9cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGdldENvbXB1dGVkRGlzbGF5VmFsdWUoXG4gIGRpc3BsYXk6IENzcy5JZGVudCxcbiAgcG9zaXRpb246IENzcy5JZGVudCxcbiAgZmxvYXQ6IENzcy5JZGVudCxcbiAgaXNSb290OiBib29sZWFuLFxuKTogeyBkaXNwbGF5OiBDc3MuSWRlbnQ7IHBvc2l0aW9uOiBDc3MuSWRlbnQ7IGZsb2F0OiBDc3MuSWRlbnQgfSB7XG4gIGlmIChkaXNwbGF5ID09PSBDc3MuaWRlbnQubm9uZSkge1xuICAgIC8vIG5vIG5lZWQgdG8gY29udmVydCB2YWx1ZXMgd2hlbiAnZGlzcGxheScgaXMgJ25vbmUnXG4gIH0gZWxzZSBpZiAoaXNBYnNvbHV0ZWx5UG9zaXRpb25lZChwb3NpdGlvbikpIHtcbiAgICBmbG9hdCA9IENzcy5pZGVudC5ub25lO1xuICAgIGRpc3BsYXkgPSBibG9ja2lmeShkaXNwbGF5KTtcbiAgfSBlbHNlIGlmICgoZmxvYXQgJiYgZmxvYXQgIT09IENzcy5pZGVudC5ub25lKSB8fCBpc1Jvb3QpIHtcbiAgICBkaXNwbGF5ID0gYmxvY2tpZnkoZGlzcGxheSk7XG4gIH1cbiAgcmV0dXJuIHsgZGlzcGxheSwgcG9zaXRpb24sIGZsb2F0IH07XG59XG5cbi8qKlxuICogSnVkZ2VzIGlmIHRoZSBnZW5lcmF0ZWQgYm94IGlzIGJsb2NrLlxuICovXG5leHBvcnQgZnVuY3Rpb24gaXNCbG9jayhcbiAgZGlzcGxheTogQ3NzLklkZW50LFxuICBwb3NpdGlvbjogQ3NzLklkZW50LFxuICBmbG9hdDogQ3NzLklkZW50LFxuICBpc1Jvb3Q6IGJvb2xlYW4sXG4pOiBib29sZWFuIHtcbiAgcmV0dXJuIChcbiAgICBnZXRDb21wdXRlZERpc2xheVZhbHVlKGRpc3BsYXksIHBvc2l0aW9uLCBmbG9hdCwgaXNSb290KS5kaXNwbGF5ID09PVxuICAgIENzcy5pZGVudC5ibG9ja1xuICApO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gaXNJbmxpbmVMZXZlbChkaXNwbGF5OiBDc3MuSWRlbnQpOiBib29sZWFuIHtcbiAgc3dpdGNoIChkaXNwbGF5LnRvU3RyaW5nKCkpIHtcbiAgICBjYXNlIFwiaW5saW5lXCI6XG4gICAgY2FzZSBcImlubGluZS1ibG9ja1wiOlxuICAgIGNhc2UgXCJpbmxpbmUtbGlzdC1pdGVtXCI6XG4gICAgY2FzZSBcImlubGluZS1mbGV4XCI6XG4gICAgY2FzZSBcImlubGluZS1ncmlkXCI6XG4gICAgY2FzZSBcInJ1YnlcIjpcbiAgICBjYXNlIFwiaW5saW5lLXRhYmxlXCI6XG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICBkZWZhdWx0OlxuICAgICAgcmV0dXJuIGZhbHNlO1xuICB9XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBpc1J1YnlJbnRlcm5hbERpc3BsYXkoZGlzcGxheTogQ3NzLklkZW50KTogYm9vbGVhbiB7XG4gIHN3aXRjaCAoZGlzcGxheS50b1N0cmluZygpKSB7XG4gICAgY2FzZSBcInJ1YnktYmFzZVwiOlxuICAgIGNhc2UgXCJydWJ5LXRleHRcIjpcbiAgICBjYXNlIFwicnVieS1iYXNlLWNvbnRhaW5lclwiOlxuICAgIGNhc2UgXCJydWJ5LXRleHQtY29udGFpbmVyXCI6XG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICBkZWZhdWx0OlxuICAgICAgcmV0dXJuIGZhbHNlO1xuICB9XG59XG5cbi8qKlxuICogSnVkZ2VzIGlmIHRoZSBnZW5lcmF0ZWQgYm94IGVzdGFibGlzaGVzIGEgbmV3IGJsb2NrIGZvcm1hdHRpbmcgY29udGV4dC5cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGVzdGFibGlzaGVzQkZDKFxuICBkaXNwbGF5OiBDc3MuSWRlbnQsXG4gIHBvc2l0aW9uOiBDc3MuSWRlbnQsXG4gIGZsb2F0OiBDc3MuSWRlbnQsXG4gIG92ZXJmbG93OiBDc3MuSWRlbnQsXG4gIHdyaXRpbmdNb2RlPzogQ3NzLklkZW50LFxuICBwYXJlbnRXcml0aW5nTW9kZT86IENzcy5JZGVudCxcbiAgaXNGbG93Um9vdD86IGJvb2xlYW4sXG4pOiBib29sZWFuIHtcbiAgd3JpdGluZ01vZGUgPSB3cml0aW5nTW9kZSB8fCBwYXJlbnRXcml0aW5nTW9kZSB8fCBDc3MuaWRlbnQuaG9yaXpvbnRhbF90YjtcbiAgcmV0dXJuIChcbiAgICAhIWlzRmxvd1Jvb3QgfHxcbiAgICAoISFmbG9hdCAmJiBmbG9hdCAhPT0gQ3NzLmlkZW50Lm5vbmUpIHx8XG4gICAgaXNBYnNvbHV0ZWx5UG9zaXRpb25lZChwb3NpdGlvbikgfHxcbiAgICBkaXNwbGF5ID09PSBDc3MuaWRlbnQuaW5saW5lX2Jsb2NrIHx8XG4gICAgZGlzcGxheSA9PT0gQ3NzLmlkZW50LnRhYmxlX2NlbGwgfHxcbiAgICBkaXNwbGF5ID09PSBDc3MuaWRlbnQudGFibGVfY2FwdGlvbiB8fFxuICAgIGRpc3BsYXkgPT0gQ3NzLmlkZW50LmZsZXggfHxcbiAgICAoKGRpc3BsYXkgPT09IENzcy5pZGVudC5ibG9jayB8fCBkaXNwbGF5ID09PSBDc3MuaWRlbnQubGlzdF9pdGVtKSAmJlxuICAgICAgISFvdmVyZmxvdyAmJlxuICAgICAgb3ZlcmZsb3cgIT09IENzcy5pZGVudC52aXNpYmxlKSB8fFxuICAgICghIXBhcmVudFdyaXRpbmdNb2RlICYmIHdyaXRpbmdNb2RlICE9PSBwYXJlbnRXcml0aW5nTW9kZSlcbiAgKTtcbn1cblxuLyoqXG4gKiBKdWRnZXMgaWYgdGhlIGdlbmVyYXRlZCBib3ggZXN0YWJsaXNoZXMgYSBjb250YWluaW5nIGJsb2NrIGZvciBkZXNjZW5kYW50XG4gKiBib3hlcyB3aXRoICdwb3NpdGlvbjogYWJzb2x1dGUnLlxuICovXG5leHBvcnQgZnVuY3Rpb24gZXN0YWJsaXNoZXNDQkZvckFic29sdXRlKHBvc2l0aW9uOiBDc3MuSWRlbnQpOiBib29sZWFuIHtcbiAgcmV0dXJuIChcbiAgICBwb3NpdGlvbiA9PT0gQ3NzLmlkZW50LnJlbGF0aXZlIHx8XG4gICAgcG9zaXRpb24gPT09IENzcy5pZGVudC5hYnNvbHV0ZSB8fFxuICAgIHBvc2l0aW9uID09PSBDc3MuaWRlbnQuZml4ZWRcbiAgKTtcbn1cbiIsIi8qKlxuICogQ29weXJpZ2h0IDIwMTkgVml2bGlvc3R5bGUgRm91bmRhdGlvblxuICpcbiAqIFZpdmxpb3N0eWxlLmpzIGlzIGZyZWUgc29mdHdhcmU6IHlvdSBjYW4gcmVkaXN0cmlidXRlIGl0IGFuZC9vciBtb2RpZnlcbiAqIGl0IHVuZGVyIHRoZSB0ZXJtcyBvZiB0aGUgR05VIEFmZmVybyBHZW5lcmFsIFB1YmxpYyBMaWNlbnNlIGFzIHB1Ymxpc2hlZCBieVxuICogdGhlIEZyZWUgU29mdHdhcmUgRm91bmRhdGlvbiwgZWl0aGVyIHZlcnNpb24gMyBvZiB0aGUgTGljZW5zZSwgb3JcbiAqIChhdCB5b3VyIG9wdGlvbikgYW55IGxhdGVyIHZlcnNpb24uXG4gKlxuICogVml2bGlvc3R5bGUuanMgaXMgZGlzdHJpYnV0ZWQgaW4gdGhlIGhvcGUgdGhhdCBpdCB3aWxsIGJlIHVzZWZ1bCxcbiAqIGJ1dCBXSVRIT1VUIEFOWSBXQVJSQU5UWTsgd2l0aG91dCBldmVuIHRoZSBpbXBsaWVkIHdhcnJhbnR5IG9mXG4gKiBNRVJDSEFOVEFCSUxJVFkgb3IgRklUTkVTUyBGT1IgQSBQQVJUSUNVTEFSIFBVUlBPU0UuICBTZWUgdGhlXG4gKiBHTlUgQWZmZXJvIEdlbmVyYWwgUHVibGljIExpY2Vuc2UgZm9yIG1vcmUgZGV0YWlscy5cbiAqXG4gKiBZb3Ugc2hvdWxkIGhhdmUgcmVjZWl2ZWQgYSBjb3B5IG9mIHRoZSBHTlUgQWZmZXJvIEdlbmVyYWwgUHVibGljIExpY2Vuc2VcbiAqIGFsb25nIHdpdGggVml2bGlvc3R5bGUuanMuICBJZiBub3QsIHNlZSA8aHR0cDovL3d3dy5nbnUub3JnL2xpY2Vuc2VzLz4uXG4gKlxuICogQGZpbGVvdmVydmlldyBMYXlvdXRQcm9jZXNzb3IgLSBEZWZpbml0aW9ucyBvZiBMYXlvdXRQcm9jZXNzb3IuXG4gKi9cbmltcG9ydCAqIGFzIEJyZWFrUG9zaXRpb24gZnJvbSBcIi4vYnJlYWstcG9zaXRpb25cIjtcbmltcG9ydCAqIGFzIERpc3BsYXkgZnJvbSBcIi4vZGlzcGxheVwiO1xuaW1wb3J0ICogYXMgTGF5b3V0SGVscGVyIGZyb20gXCIuL2xheW91dC1oZWxwZXJcIjtcbmltcG9ydCAqIGFzIFBsdWdpbiBmcm9tIFwiLi9wbHVnaW5cIjtcbmltcG9ydCAqIGFzIFRhc2sgZnJvbSBcIi4vdGFza1wiO1xuaW1wb3J0IHsgRm9ybWF0dGluZ0NvbnRleHRUeXBlLCBMYXlvdXQsIExheW91dFByb2Nlc3NvciwgVnRyZWUgfSBmcm9tIFwiLi90eXBlc1wiO1xuXG4vKipcbiAqIFByb2Nlc3NvciBkb2luZyBzb21lIHNwZWNpYWwgbGF5b3V0IChlLmcuIHRhYmxlIGxheW91dClcbiAqL1xuLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXJlZGVjbGFyZVxuZXhwb3J0IGludGVyZmFjZSBMYXlvdXRQcm9jZXNzb3Ige1xuICAvKipcbiAgICogRG8gYWN0dWFsIGxheW91dCBpbiB0aGUgY29sdW1uIHN0YXJ0aW5nIGZyb20gZ2l2ZW4gTm9kZUNvbnRleHQuXG4gICAqL1xuICBsYXlvdXQoXG4gICAgbm9kZUNvbnRleHQ6IFZ0cmVlLk5vZGVDb250ZXh0LFxuICAgIGNvbHVtbjogTGF5b3V0LkNvbHVtbixcbiAgICBsZWFkaW5nRWRnZTogYm9vbGVhbixcbiAgKTogVGFzay5SZXN1bHQ8VnRyZWUuTm9kZUNvbnRleHQ+O1xuXG4gIC8qKlxuICAgKiBQb3RlbnRpYWwgZWRnZSBicmVha2luZyBwb3NpdGlvbi5cbiAgICovXG4gIGNyZWF0ZUVkZ2VCcmVha1Bvc2l0aW9uKFxuICAgIHBvc2l0aW9uOiBWdHJlZS5Ob2RlQ29udGV4dCxcbiAgICBicmVha09uRWRnZTogc3RyaW5nIHwgbnVsbCxcbiAgICBvdmVyZmxvd3M6IGJvb2xlYW4sXG4gICAgY29sdW1uQmxvY2tTaXplOiBudW1iZXIsXG4gICk6IExheW91dC5CcmVha1Bvc2l0aW9uO1xuXG4gIC8qKlxuICAgKiBwcm9jZXNzIG5vZGVjb250ZXh0IGF0IHRoZSBzdGFydCBvZiBhIG5vbiBpbmxpbmUgZWxlbWVudC5cbiAgICogQHJldHVybiByZXR1cm4gdHJ1ZSBpZiB5b3Ugc2tpcCB0aGUgc3Vic2VxdWVudCBub2Rlc1xuICAgKi9cbiAgc3RhcnROb25JbmxpbmVFbGVtZW50Tm9kZShub2RlQ29udGV4dDogVnRyZWUuTm9kZUNvbnRleHQpOiBib29sZWFuO1xuXG4gIC8qKlxuICAgKiBwcm9jZXNzIG5vZGVjb250ZXh0IGFmdGVyIGEgbm9uIGlubGluZSBlbGVtZW50LlxuICAgKiBAcmV0dXJuIHJldHVybiB0cnVlIGlmIHlvdSBza2lwIHRoZSBzdWJzZXF1ZW50IG5vZGVzXG4gICAqL1xuICBhZnRlck5vbklubGluZUVsZW1lbnROb2RlKFxuICAgIG5vZGVDb250ZXh0OiBWdHJlZS5Ob2RlQ29udGV4dCxcbiAgICBzdG9wQXRPdmVyZmxvdzogYm9vbGVhbixcbiAgKTogYm9vbGVhbjtcblxuICAvKipcbiAgICogQHJldHVybiBob2xpbmcgdHJ1ZVxuICAgKi9cbiAgZmluaXNoQnJlYWsoXG4gICAgY29sdW1uOiBMYXlvdXQuQ29sdW1uLFxuICAgIG5vZGVDb250ZXh0OiBWdHJlZS5Ob2RlQ29udGV4dCxcbiAgICBmb3JjZVJlbW92ZVNlbGY6IGJvb2xlYW4sXG4gICAgZW5kT2ZDb2x1bW46IGJvb2xlYW4sXG4gICk6IFRhc2suUmVzdWx0PGJvb2xlYW4+O1xuXG4gIGNsZWFyT3ZlcmZsb3duVmlld05vZGVzKFxuICAgIGNvbHVtbjogTGF5b3V0LkNvbHVtbixcbiAgICBwYXJlbnROb2RlQ29udGV4dDogVnRyZWUuTm9kZUNvbnRleHQsXG4gICAgbm9kZUNvbnRleHQ6IFZ0cmVlLk5vZGVDb250ZXh0LFxuICAgIHJlbW92ZVNlbGY6IGJvb2xlYW4sXG4gICk7XG59XG5cbi8qKlxuICogUmVzb2x2ZXIgZmluZGluZyBhbiBhcHByb3ByaWF0ZSBMYXlvdXRQcm9jZXNzb3IgZ2l2ZW4gYSBmb3JtYXR0aW5nIGNvbnRleHRcbiAqL1xuZXhwb3J0IGNsYXNzIExheW91dFByb2Nlc3NvclJlc29sdmVyIHtcbiAgLyoqXG4gICAqIEZpbmQgTGF5b3V0UHJvY2Vzc29yIGNvcnJlc3BvbmRpbmcgdG8gZ2l2ZW4gZm9ybWF0dGluZyBjb250ZXh0LlxuICAgKi9cbiAgZmluZChmb3JtYXR0aW5nQ29udGV4dDogVnRyZWUuRm9ybWF0dGluZ0NvbnRleHQpOiBMYXlvdXRQcm9jZXNzb3Ige1xuICAgIGNvbnN0IGhvb2tzOiBQbHVnaW4uUmVzb2x2ZUxheW91dFByb2Nlc3Nvckhvb2tbXSA9IFBsdWdpbi5nZXRIb29rc0Zvck5hbWUoXG4gICAgICBQbHVnaW4uSE9PS1MuUkVTT0xWRV9MQVlPVVRfUFJPQ0VTU09SLFxuICAgICk7XG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCBob29rcy5sZW5ndGg7IGkrKykge1xuICAgICAgY29uc3QgcHJvY2Vzc29yID0gaG9va3NbaV0oZm9ybWF0dGluZ0NvbnRleHQpO1xuICAgICAgaWYgKHByb2Nlc3Nvcikge1xuICAgICAgICByZXR1cm4gcHJvY2Vzc29yO1xuICAgICAgfVxuICAgIH1cbiAgICB0aHJvdyBuZXcgRXJyb3IoXG4gICAgICBgTm8gcHJvY2Vzc29yIGZvdW5kIGZvciBhIGZvcm1hdHRpbmcgY29udGV4dDogJHtmb3JtYXR0aW5nQ29udGV4dC5nZXROYW1lKCl9YCxcbiAgICApO1xuICB9XG59XG5cbmV4cG9ydCBjbGFzcyBCbG9ja0xheW91dFByb2Nlc3NvciBpbXBsZW1lbnRzIExheW91dFByb2Nlc3NvciB7XG4gIC8qKlxuICAgKiBAb3ZlcnJpZGVcbiAgICovXG4gIGxheW91dChcbiAgICBub2RlQ29udGV4dDogVnRyZWUuTm9kZUNvbnRleHQsXG4gICAgY29sdW1uOiBMYXlvdXQuQ29sdW1uLFxuICAgIGxlYWRpbmdFZGdlOiBib29sZWFuLFxuICApOiBUYXNrLlJlc3VsdDxWdHJlZS5Ob2RlQ29udGV4dD4ge1xuICAgIGlmIChjb2x1bW4uaXNGbG9hdE5vZGVDb250ZXh0KG5vZGVDb250ZXh0KSkge1xuICAgICAgcmV0dXJuIGNvbHVtbi5sYXlvdXRGbG9hdE9yRm9vdG5vdGUobm9kZUNvbnRleHQpO1xuICAgIH0gZWxzZSBpZiAoY29sdW1uLmlzQnJlYWthYmxlKG5vZGVDb250ZXh0KSkge1xuICAgICAgcmV0dXJuIGNvbHVtbi5sYXlvdXRCcmVha2FibGVCbG9jayhub2RlQ29udGV4dCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiBjb2x1bW4ubGF5b3V0VW5icmVha2FibGUobm9kZUNvbnRleHQpO1xuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAgKiBAb3ZlcnJpZGVcbiAgICovXG4gIGNyZWF0ZUVkZ2VCcmVha1Bvc2l0aW9uKFxuICAgIHBvc2l0aW9uOiBWdHJlZS5Ob2RlQ29udGV4dCxcbiAgICBicmVha09uRWRnZTogc3RyaW5nIHwgbnVsbCxcbiAgICBvdmVyZmxvd3M6IGJvb2xlYW4sXG4gICAgY29sdW1uQmxvY2tTaXplOiBudW1iZXIsXG4gICk6IExheW91dC5CcmVha1Bvc2l0aW9uIHtcbiAgICByZXR1cm4gbmV3IEJyZWFrUG9zaXRpb24uRWRnZUJyZWFrUG9zaXRpb24oXG4gICAgICBwb3NpdGlvbi5jb3B5KCksXG4gICAgICBicmVha09uRWRnZSxcbiAgICAgIG92ZXJmbG93cyxcbiAgICAgIGNvbHVtbkJsb2NrU2l6ZSxcbiAgICApO1xuICB9XG5cbiAgLyoqXG4gICAqIEBvdmVycmlkZVxuICAgKi9cbiAgc3RhcnROb25JbmxpbmVFbGVtZW50Tm9kZShub2RlQ29udGV4dDogVnRyZWUuTm9kZUNvbnRleHQpOiBib29sZWFuIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cblxuICAvKipcbiAgICogQG92ZXJyaWRlXG4gICAqL1xuICBhZnRlck5vbklubGluZUVsZW1lbnROb2RlKFxuICAgIG5vZGVDb250ZXh0OiBWdHJlZS5Ob2RlQ29udGV4dCxcbiAgICBzdG9wQXRPdmVyZmxvdzogYm9vbGVhbixcbiAgKTogYm9vbGVhbiB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG5cbiAgLyoqXG4gICAqIEBvdmVycmlkZVxuICAgKi9cbiAgY2xlYXJPdmVyZmxvd25WaWV3Tm9kZXMoXG4gICAgY29sdW1uOiBMYXlvdXQuQ29sdW1uLFxuICAgIHBhcmVudE5vZGVDb250ZXh0OiBWdHJlZS5Ob2RlQ29udGV4dCxcbiAgICBub2RlQ29udGV4dDogVnRyZWUuTm9kZUNvbnRleHQsXG4gICAgcmVtb3ZlU2VsZjogYm9vbGVhbixcbiAgKSB7XG4gICAgaWYgKCFub2RlQ29udGV4dC52aWV3Tm9kZSkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBpZiAoIW5vZGVDb250ZXh0LnZpZXdOb2RlLnBhcmVudE5vZGUpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgY29uc3QgcGFyZW50Tm9kZSA9IG5vZGVDb250ZXh0LnZpZXdOb2RlLnBhcmVudE5vZGU7XG4gICAgTGF5b3V0SGVscGVyLnJlbW92ZUZvbGxvd2luZ1NpYmxpbmdzKHBhcmVudE5vZGUsIG5vZGVDb250ZXh0LnZpZXdOb2RlKTtcbiAgICBpZiAocmVtb3ZlU2VsZikge1xuICAgICAgcGFyZW50Tm9kZS5yZW1vdmVDaGlsZChub2RlQ29udGV4dC52aWV3Tm9kZSk7XG4gICAgfVxuICB9XG5cbiAgLyoqXG4gICAqIEByZXR1cm4gaG9saW5nIHRydWVcbiAgICogQG92ZXJyaWRlXG4gICAqL1xuICBmaW5pc2hCcmVhayhcbiAgICBjb2x1bW46IExheW91dC5Db2x1bW4sXG4gICAgbm9kZUNvbnRleHQ6IFZ0cmVlLk5vZGVDb250ZXh0LFxuICAgIGZvcmNlUmVtb3ZlU2VsZjogYm9vbGVhbixcbiAgICBlbmRPZkNvbHVtbjogYm9vbGVhbixcbiAgKTogVGFzay5SZXN1bHQ8Ym9vbGVhbj4ge1xuICAgIGNvbnN0IHJlbW92ZVNlbGYgPVxuICAgICAgZm9yY2VSZW1vdmVTZWxmIHx8XG4gICAgICAobm9kZUNvbnRleHQudmlld05vZGUgIT0gbnVsbCAmJlxuICAgICAgICBub2RlQ29udGV4dC52aWV3Tm9kZS5ub2RlVHlwZSA9PSAxICYmXG4gICAgICAgICFub2RlQ29udGV4dC5hZnRlcik7XG4gICAgY29sdW1uLmNsZWFyT3ZlcmZsb3duVmlld05vZGVzKG5vZGVDb250ZXh0LCByZW1vdmVTZWxmKTtcbiAgICBpZiAoZW5kT2ZDb2x1bW4pIHtcbiAgICAgIGNvbHVtbi5maXhKdXN0aWZpY2F0aW9uSWZOZWVkZWQobm9kZUNvbnRleHQsIHRydWUpO1xuICAgICAgY29sdW1uLmxheW91dENvbnRleHQucHJvY2Vzc0ZyYWdtZW50ZWRCbG9ja0VkZ2UoXG4gICAgICAgIHJlbW92ZVNlbGYgPyBub2RlQ29udGV4dCA6IG5vZGVDb250ZXh0LnBhcmVudCxcbiAgICAgICk7XG4gICAgfVxuICAgIHJldHVybiBUYXNrLm5ld1Jlc3VsdCh0cnVlKTtcbiAgfVxufVxuXG5leHBvcnQgY2xhc3MgQmxvY2tGb3JtYXR0aW5nQ29udGV4dFxuICBpbXBsZW1lbnRzIExheW91dFByb2Nlc3Nvci5CbG9ja0Zvcm1hdHRpbmdDb250ZXh0IHtcbiAgZm9ybWF0dGluZ0NvbnRleHRUeXBlOiBGb3JtYXR0aW5nQ29udGV4dFR5cGUgPSBcIkJsb2NrXCI7XG5cbiAgY29uc3RydWN0b3IocHJpdmF0ZSByZWFkb25seSBwYXJlbnQ6IFZ0cmVlLkZvcm1hdHRpbmdDb250ZXh0KSB7fVxuXG4gIC8qKlxuICAgKiBAb3ZlcnJpZGVcbiAgICovXG4gIGdldE5hbWUoKTogc3RyaW5nIHtcbiAgICByZXR1cm4gXCJCbG9jayBmb3JtYXR0aW5nIGNvbnRleHQgKEJsb2NrRm9ybWF0dGluZ0NvbnRleHQpXCI7XG4gIH1cblxuICAvKipcbiAgICogQG92ZXJyaWRlXG4gICAqL1xuICBpc0ZpcnN0VGltZShub2RlQ29udGV4dDogVnRyZWUuTm9kZUNvbnRleHQsIGZpcnN0VGltZTogYm9vbGVhbik6IGJvb2xlYW4ge1xuICAgIHJldHVybiBmaXJzdFRpbWU7XG4gIH1cblxuICAvKipcbiAgICogQG92ZXJyaWRlXG4gICAqL1xuICBnZXRQYXJlbnQoKTogVnRyZWUuRm9ybWF0dGluZ0NvbnRleHQge1xuICAgIHJldHVybiB0aGlzLnBhcmVudDtcbiAgfVxuXG4gIC8qKiBAb3ZlcnJpZGUgKi9cbiAgc2F2ZVN0YXRlKCk6IGFueSB7fVxuXG4gIC8qKiBAb3ZlcnJpZGUgKi9cbiAgcmVzdG9yZVN0YXRlKHN0YXRlOiBhbnkpIHt9XG59XG5cbmV4cG9ydCBjb25zdCBibG9ja0xheW91dFByb2Nlc3NvciA9IG5ldyBCbG9ja0xheW91dFByb2Nlc3NvcigpO1xuXG5leHBvcnQgY29uc3QgaXNJbnN0YW5jZU9mQmxvY2tGb3JtYXR0aW5nQ29udGV4dCA9XG4gIExheW91dFByb2Nlc3Nvci5pc0luc3RhbmNlT2ZCbG9ja0Zvcm1hdHRpbmdDb250ZXh0O1xuXG5QbHVnaW4ucmVnaXN0ZXJIb29rKFxuICBQbHVnaW4uSE9PS1MuUkVTT0xWRV9GT1JNQVRUSU5HX0NPTlRFWFQsXG4gIChub2RlQ29udGV4dCwgZmlyc3RUaW1lLCBkaXNwbGF5LCBwb3NpdGlvbiwgZmxvYXRTaWRlLCBpc1Jvb3QpID0+IHtcbiAgICBjb25zdCBwYXJlbnQgPSBub2RlQ29udGV4dC5wYXJlbnQ7XG4gICAgaWYgKCFwYXJlbnQgJiYgbm9kZUNvbnRleHQuZm9ybWF0dGluZ0NvbnRleHQpIHtcbiAgICAgIHJldHVybiBudWxsO1xuICAgIH0gZWxzZSBpZiAoXG4gICAgICBwYXJlbnQgJiZcbiAgICAgIG5vZGVDb250ZXh0LmZvcm1hdHRpbmdDb250ZXh0ICE9PSBwYXJlbnQuZm9ybWF0dGluZ0NvbnRleHRcbiAgICApIHtcbiAgICAgIHJldHVybiBudWxsO1xuICAgIH0gZWxzZSBpZiAoXG4gICAgICBub2RlQ29udGV4dC5lc3RhYmxpc2hlc0JGQyB8fFxuICAgICAgKCFub2RlQ29udGV4dC5mb3JtYXR0aW5nQ29udGV4dCAmJlxuICAgICAgICBEaXNwbGF5LmlzQmxvY2soZGlzcGxheSwgcG9zaXRpb24sIGZsb2F0U2lkZSwgaXNSb290KSlcbiAgICApIHtcbiAgICAgIHJldHVybiBuZXcgQmxvY2tGb3JtYXR0aW5nQ29udGV4dChcbiAgICAgICAgcGFyZW50ID8gcGFyZW50LmZvcm1hdHRpbmdDb250ZXh0IDogbnVsbCxcbiAgICAgICk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiBudWxsO1xuICAgIH1cbiAgfSxcbik7XG5cblBsdWdpbi5yZWdpc3Rlckhvb2soXG4gIFBsdWdpbi5IT09LUy5SRVNPTFZFX0xBWU9VVF9QUk9DRVNTT1IsXG4gIChmb3JtYXR0aW5nQ29udGV4dCkgPT4ge1xuICAgIGlmIChmb3JtYXR0aW5nQ29udGV4dCBpbnN0YW5jZW9mIEJsb2NrRm9ybWF0dGluZ0NvbnRleHQpIHtcbiAgICAgIHJldHVybiBibG9ja0xheW91dFByb2Nlc3NvcjtcbiAgICB9XG4gICAgcmV0dXJuIG51bGw7XG4gIH0sXG4pO1xuIiwiLyoqXG4gKiBDb3B5cmlnaHQgMjAxOSBWaXZsaW9zdHlsZSBGb3VuZGF0aW9uXG4gKlxuICogVml2bGlvc3R5bGUuanMgaXMgZnJlZSBzb2Z0d2FyZTogeW91IGNhbiByZWRpc3RyaWJ1dGUgaXQgYW5kL29yIG1vZGlmeVxuICogaXQgdW5kZXIgdGhlIHRlcm1zIG9mIHRoZSBHTlUgQWZmZXJvIEdlbmVyYWwgUHVibGljIExpY2Vuc2UgYXMgcHVibGlzaGVkIGJ5XG4gKiB0aGUgRnJlZSBTb2Z0d2FyZSBGb3VuZGF0aW9uLCBlaXRoZXIgdmVyc2lvbiAzIG9mIHRoZSBMaWNlbnNlLCBvclxuICogKGF0IHlvdXIgb3B0aW9uKSBhbnkgbGF0ZXIgdmVyc2lvbi5cbiAqXG4gKiBWaXZsaW9zdHlsZS5qcyBpcyBkaXN0cmlidXRlZCBpbiB0aGUgaG9wZSB0aGF0IGl0IHdpbGwgYmUgdXNlZnVsLFxuICogYnV0IFdJVEhPVVQgQU5ZIFdBUlJBTlRZOyB3aXRob3V0IGV2ZW4gdGhlIGltcGxpZWQgd2FycmFudHkgb2ZcbiAqIE1FUkNIQU5UQUJJTElUWSBvciBGSVRORVNTIEZPUiBBIFBBUlRJQ1VMQVIgUFVSUE9TRS4gIFNlZSB0aGVcbiAqIEdOVSBBZmZlcm8gR2VuZXJhbCBQdWJsaWMgTGljZW5zZSBmb3IgbW9yZSBkZXRhaWxzLlxuICpcbiAqIFlvdSBzaG91bGQgaGF2ZSByZWNlaXZlZCBhIGNvcHkgb2YgdGhlIEdOVSBBZmZlcm8gR2VuZXJhbCBQdWJsaWMgTGljZW5zZVxuICogYWxvbmcgd2l0aCBWaXZsaW9zdHlsZS5qcy4gIElmIG5vdCwgc2VlIDxodHRwOi8vd3d3LmdudS5vcmcvbGljZW5zZXMvPi5cbiAqXG4gKiBAZmlsZW92ZXJ2aWV3IExheW91dFJldHJ5ZXJzIC0gRGVmaW5pdGlvbnMgb2YgTGF5b3V0UmV0cnllci5cbiAqL1xuaW1wb3J0ICogYXMgQXNzZXJ0cyBmcm9tIFwiLi9hc3NlcnRzXCI7XG5pbXBvcnQgKiBhcyBUYXNrIGZyb20gXCIuL3Rhc2tcIjtcbmltcG9ydCB7IExheW91dCwgVnRyZWUgfSBmcm9tIFwiLi90eXBlc1wiO1xuXG4vKipcbiAqIEBhYnN0cmFjdFxuICovXG5leHBvcnQgYWJzdHJhY3QgY2xhc3MgQWJzdHJhY3RMYXlvdXRSZXRyeWVyIHtcbiAgaW5pdGlhbEJyZWFrUG9zaXRpb25zOiBMYXlvdXQuQnJlYWtQb3NpdGlvbltdID0gbnVsbDtcbiAgaW5pdGlhbFN0YXRlT2ZGb3JtYXR0aW5nQ29udGV4dDogVnRyZWUuTm9kZUNvbnRleHQgPSBudWxsO1xuICBpbml0aWFsUG9zaXRpb246IFZ0cmVlLk5vZGVDb250ZXh0O1xuICBpbml0aWFsRnJhZ21lbnRMYXlvdXRDb25zdHJhaW50czogTGF5b3V0LkZyYWdtZW50TGF5b3V0Q29uc3RyYWludFtdO1xuXG4gIGxheW91dChcbiAgICBub2RlQ29udGV4dDogVnRyZWUuTm9kZUNvbnRleHQsXG4gICAgY29sdW1uOiBMYXlvdXQuQ29sdW1uLFxuICApOiBUYXNrLlJlc3VsdDxWdHJlZS5Ob2RlQ29udGV4dD4ge1xuICAgIHRoaXMucHJlcGFyZUxheW91dChub2RlQ29udGV4dCwgY29sdW1uKTtcbiAgICByZXR1cm4gdGhpcy50cnlMYXlvdXQobm9kZUNvbnRleHQsIGNvbHVtbik7XG4gIH1cblxuICBwcml2YXRlIHRyeUxheW91dChcbiAgICBub2RlQ29udGV4dDogVnRyZWUuTm9kZUNvbnRleHQsXG4gICAgY29sdW1uOiBMYXlvdXQuQ29sdW1uLFxuICApOiBUYXNrLlJlc3VsdDxWdHJlZS5Ob2RlQ29udGV4dD4ge1xuICAgIGNvbnN0IGZyYW1lID0gVGFzay5uZXdGcmFtZTxWdHJlZS5Ob2RlQ29udGV4dD4oXG4gICAgICBcIkFic3RyYWN0TGF5b3V0UmV0cnllci50cnlMYXlvdXRcIixcbiAgICApO1xuICAgIHRoaXMuc2F2ZVN0YXRlKG5vZGVDb250ZXh0LCBjb2x1bW4pO1xuICAgIGNvbnN0IG1vZGUgPSB0aGlzLnJlc29sdmVMYXlvdXRNb2RlKG5vZGVDb250ZXh0KTtcbiAgICBtb2RlLmRvTGF5b3V0KG5vZGVDb250ZXh0LCBjb2x1bW4pLnRoZW4oKHBvc2l0aW9uQWZ0ZXIpID0+IHtcbiAgICAgIGxldCBhY2NlcHRlZCA9IG1vZGUuYWNjZXB0KHBvc2l0aW9uQWZ0ZXIsIGNvbHVtbik7XG4gICAgICBhY2NlcHRlZCA9IG1vZGUucG9zdExheW91dChcbiAgICAgICAgcG9zaXRpb25BZnRlcixcbiAgICAgICAgdGhpcy5pbml0aWFsUG9zaXRpb24sXG4gICAgICAgIGNvbHVtbixcbiAgICAgICAgYWNjZXB0ZWQsXG4gICAgICApO1xuICAgICAgaWYgKGFjY2VwdGVkKSB7XG4gICAgICAgIGZyYW1lLmZpbmlzaChwb3NpdGlvbkFmdGVyKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIEFzc2VydHMuYXNzZXJ0KHRoaXMuaW5pdGlhbFBvc2l0aW9uKTtcbiAgICAgICAgdGhpcy5jbGVhck5vZGVzKHRoaXMuaW5pdGlhbFBvc2l0aW9uKTtcbiAgICAgICAgdGhpcy5yZXN0b3JlU3RhdGUobm9kZUNvbnRleHQsIGNvbHVtbik7XG4gICAgICAgIHRoaXMudHJ5TGF5b3V0KHRoaXMuaW5pdGlhbFBvc2l0aW9uLCBjb2x1bW4pLnRoZW5GaW5pc2goZnJhbWUpO1xuICAgICAgfVxuICAgIH0pO1xuICAgIHJldHVybiBmcmFtZS5yZXN1bHQoKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBAYWJzdHJhY3RcbiAgICovXG4gIGFic3RyYWN0IHJlc29sdmVMYXlvdXRNb2RlKG5vZGVDb250ZXh0OiBWdHJlZS5Ob2RlQ29udGV4dCk6IExheW91dC5MYXlvdXRNb2RlO1xuXG4gIHByZXBhcmVMYXlvdXQobm9kZUNvbnRleHQ6IFZ0cmVlLk5vZGVDb250ZXh0LCBjb2x1bW46IExheW91dC5Db2x1bW4pIHt9XG5cbiAgY2xlYXJOb2Rlcyhpbml0aWFsUG9zaXRpb246IFZ0cmVlLk5vZGVDb250ZXh0KSB7XG4gICAgY29uc3Qgdmlld05vZGUgPVxuICAgICAgaW5pdGlhbFBvc2l0aW9uLnZpZXdOb2RlIHx8IGluaXRpYWxQb3NpdGlvbi5wYXJlbnQudmlld05vZGU7XG4gICAgbGV0IGNoaWxkOiBOb2RlO1xuICAgIHdoaWxlICgoY2hpbGQgPSB2aWV3Tm9kZS5sYXN0Q2hpbGQpKSB7XG4gICAgICB2aWV3Tm9kZS5yZW1vdmVDaGlsZChjaGlsZCk7XG4gICAgfVxuICAgIGxldCBzaWJsaW5nOiBOb2RlO1xuICAgIHdoaWxlICgoc2libGluZyA9IHZpZXdOb2RlLm5leHRTaWJsaW5nKSkge1xuICAgICAgc2libGluZy5wYXJlbnROb2RlLnJlbW92ZUNoaWxkKHNpYmxpbmcpO1xuICAgIH1cbiAgfVxuXG4gIHNhdmVTdGF0ZShub2RlQ29udGV4dDogVnRyZWUuTm9kZUNvbnRleHQsIGNvbHVtbjogTGF5b3V0LkNvbHVtbikge1xuICAgIHRoaXMuaW5pdGlhbFBvc2l0aW9uID0gbm9kZUNvbnRleHQuY29weSgpO1xuICAgIHRoaXMuaW5pdGlhbEJyZWFrUG9zaXRpb25zID0gW10uY29uY2F0KGNvbHVtbi5icmVha1Bvc2l0aW9ucyk7XG4gICAgdGhpcy5pbml0aWFsRnJhZ21lbnRMYXlvdXRDb25zdHJhaW50cyA9IFtdLmNvbmNhdChcbiAgICAgIGNvbHVtbi5mcmFnbWVudExheW91dENvbnN0cmFpbnRzLFxuICAgICk7XG4gICAgaWYgKG5vZGVDb250ZXh0LmZvcm1hdHRpbmdDb250ZXh0KSB7XG4gICAgICB0aGlzLmluaXRpYWxTdGF0ZU9mRm9ybWF0dGluZ0NvbnRleHQgPSBub2RlQ29udGV4dC5mb3JtYXR0aW5nQ29udGV4dC5zYXZlU3RhdGUoKTtcbiAgICB9XG4gIH1cblxuICByZXN0b3JlU3RhdGUobm9kZUNvbnRleHQ6IFZ0cmVlLk5vZGVDb250ZXh0LCBjb2x1bW46IExheW91dC5Db2x1bW4pIHtcbiAgICBjb2x1bW4uYnJlYWtQb3NpdGlvbnMgPSB0aGlzLmluaXRpYWxCcmVha1Bvc2l0aW9ucztcbiAgICBjb2x1bW4uZnJhZ21lbnRMYXlvdXRDb25zdHJhaW50cyA9IHRoaXMuaW5pdGlhbEZyYWdtZW50TGF5b3V0Q29uc3RyYWludHM7XG4gICAgaWYgKG5vZGVDb250ZXh0LmZvcm1hdHRpbmdDb250ZXh0KSB7XG4gICAgICBub2RlQ29udGV4dC5mb3JtYXR0aW5nQ29udGV4dC5yZXN0b3JlU3RhdGUoXG4gICAgICAgIHRoaXMuaW5pdGlhbFN0YXRlT2ZGb3JtYXR0aW5nQ29udGV4dCxcbiAgICAgICk7XG4gICAgfVxuICB9XG59XG4iLCIvKipcbiAqIENvcHlyaWdodCAyMDE2IFRyaW0tbWFya3MgSW5jLlxuICogQ29weXJpZ2h0IDIwMTkgVml2bGlvc3R5bGUgRm91bmRhdGlvblxuICpcbiAqIFZpdmxpb3N0eWxlLmpzIGlzIGZyZWUgc29mdHdhcmU6IHlvdSBjYW4gcmVkaXN0cmlidXRlIGl0IGFuZC9vciBtb2RpZnlcbiAqIGl0IHVuZGVyIHRoZSB0ZXJtcyBvZiB0aGUgR05VIEFmZmVybyBHZW5lcmFsIFB1YmxpYyBMaWNlbnNlIGFzIHB1Ymxpc2hlZCBieVxuICogdGhlIEZyZWUgU29mdHdhcmUgRm91bmRhdGlvbiwgZWl0aGVyIHZlcnNpb24gMyBvZiB0aGUgTGljZW5zZSwgb3JcbiAqIChhdCB5b3VyIG9wdGlvbikgYW55IGxhdGVyIHZlcnNpb24uXG4gKlxuICogVml2bGlvc3R5bGUuanMgaXMgZGlzdHJpYnV0ZWQgaW4gdGhlIGhvcGUgdGhhdCBpdCB3aWxsIGJlIHVzZWZ1bCxcbiAqIGJ1dCBXSVRIT1VUIEFOWSBXQVJSQU5UWTsgd2l0aG91dCBldmVuIHRoZSBpbXBsaWVkIHdhcnJhbnR5IG9mXG4gKiBNRVJDSEFOVEFCSUxJVFkgb3IgRklUTkVTUyBGT1IgQSBQQVJUSUNVTEFSIFBVUlBPU0UuICBTZWUgdGhlXG4gKiBHTlUgQWZmZXJvIEdlbmVyYWwgUHVibGljIExpY2Vuc2UgZm9yIG1vcmUgZGV0YWlscy5cbiAqXG4gKiBZb3Ugc2hvdWxkIGhhdmUgcmVjZWl2ZWQgYSBjb3B5IG9mIHRoZSBHTlUgQWZmZXJvIEdlbmVyYWwgUHVibGljIExpY2Vuc2VcbiAqIGFsb25nIHdpdGggVml2bGlvc3R5bGUuanMuICBJZiBub3QsIHNlZSA8aHR0cDovL3d3dy5nbnUub3JnL2xpY2Vuc2VzLz4uXG4gKlxuICogQGZpbGVvdmVydmlldyBMYXlvdXRVdGlsIC0gVXRpbGl0aWVzIHJlbGF0ZWQgdG8gbGF5b3V0LlxuICovXG5pbXBvcnQgKiBhcyBCcmVhayBmcm9tIFwiLi9icmVha1wiO1xuaW1wb3J0ICogYXMgVGFzayBmcm9tIFwiLi90YXNrXCI7XG5pbXBvcnQgKiBhcyBWdHJlZUltcGwgZnJvbSBcIi4vdnRyZWVcIjtcbmltcG9ydCB7IExheW91dCwgVnRyZWUgfSBmcm9tIFwiLi90eXBlc1wiO1xuXG5leHBvcnQgdHlwZSBMYXlvdXRJdGVyYXRvclN0YXRlID0ge1xuICBub2RlQ29udGV4dDogVnRyZWUuTm9kZUNvbnRleHQ7XG4gIGF0VW5mb3JjZWRCcmVhazogYm9vbGVhbjtcbiAgYnJlYWs6IGJvb2xlYW47XG4gIGxlYWRpbmdFZGdlPzogYm9vbGVhbjtcbiAgYnJlYWtBdFRoZUVkZ2U/OiBzdHJpbmcgfCBudWxsO1xuICBvblN0YXJ0RWRnZXM/OiBib29sZWFuO1xuICBsZWFkaW5nRWRnZUNvbnRleHRzPzogVnRyZWUuTm9kZUNvbnRleHRbXTtcbiAgbGFzdEFmdGVyTm9kZUNvbnRleHQ/OiBWdHJlZS5Ob2RlQ29udGV4dCB8IG51bGw7XG59O1xuXG5leHBvcnQgY2xhc3MgTGF5b3V0SXRlcmF0b3JTdHJhdGVneSB7XG4gIGluaXRpYWxTdGF0ZShpbml0aWFsTm9kZUNvbnRleHQ6IFZ0cmVlLk5vZGVDb250ZXh0KTogTGF5b3V0SXRlcmF0b3JTdGF0ZSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIG5vZGVDb250ZXh0OiBpbml0aWFsTm9kZUNvbnRleHQsXG4gICAgICBhdFVuZm9yY2VkQnJlYWs6IGZhbHNlLFxuICAgICAgYnJlYWs6IGZhbHNlLFxuICAgIH07XG4gIH1cblxuICBzdGFydE5vbkRpc3BsYXlhYmxlTm9kZShcbiAgICBzdGF0ZTogTGF5b3V0SXRlcmF0b3JTdGF0ZSxcbiAgKTogdm9pZCB8IFRhc2suUmVzdWx0PGJvb2xlYW4+IHt9XG5cbiAgYWZ0ZXJOb25EaXNwbGF5YWJsZU5vZGUoXG4gICAgc3RhdGU6IExheW91dEl0ZXJhdG9yU3RhdGUsXG4gICk6IHZvaWQgfCBUYXNrLlJlc3VsdDxib29sZWFuPiB7fVxuXG4gIHN0YXJ0SWdub3JlZFRleHROb2RlKFxuICAgIHN0YXRlOiBMYXlvdXRJdGVyYXRvclN0YXRlLFxuICApOiB2b2lkIHwgVGFzay5SZXN1bHQ8Ym9vbGVhbj4ge31cblxuICBhZnRlcklnbm9yZWRUZXh0Tm9kZShcbiAgICBzdGF0ZTogTGF5b3V0SXRlcmF0b3JTdGF0ZSxcbiAgKTogdm9pZCB8IFRhc2suUmVzdWx0PGJvb2xlYW4+IHt9XG5cbiAgc3RhcnROb25FbGVtZW50Tm9kZShcbiAgICBzdGF0ZTogTGF5b3V0SXRlcmF0b3JTdGF0ZSxcbiAgKTogdm9pZCB8IFRhc2suUmVzdWx0PGJvb2xlYW4+IHt9XG5cbiAgYWZ0ZXJOb25FbGVtZW50Tm9kZShcbiAgICBzdGF0ZTogTGF5b3V0SXRlcmF0b3JTdGF0ZSxcbiAgKTogdm9pZCB8IFRhc2suUmVzdWx0PGJvb2xlYW4+IHt9XG5cbiAgc3RhcnRJbmxpbmVFbGVtZW50Tm9kZShcbiAgICBzdGF0ZTogTGF5b3V0SXRlcmF0b3JTdGF0ZSxcbiAgKTogdm9pZCB8IFRhc2suUmVzdWx0PGJvb2xlYW4+IHt9XG5cbiAgYWZ0ZXJJbmxpbmVFbGVtZW50Tm9kZShcbiAgICBzdGF0ZTogTGF5b3V0SXRlcmF0b3JTdGF0ZSxcbiAgKTogdm9pZCB8IFRhc2suUmVzdWx0PGJvb2xlYW4+IHt9XG5cbiAgc3RhcnROb25JbmxpbmVFbGVtZW50Tm9kZShcbiAgICBzdGF0ZTogTGF5b3V0SXRlcmF0b3JTdGF0ZSxcbiAgKTogdm9pZCB8IFRhc2suUmVzdWx0PGJvb2xlYW4+IHt9XG5cbiAgYWZ0ZXJOb25JbmxpbmVFbGVtZW50Tm9kZShcbiAgICBzdGF0ZTogTGF5b3V0SXRlcmF0b3JTdGF0ZSxcbiAgKTogdm9pZCB8IFRhc2suUmVzdWx0PGJvb2xlYW4+IHt9XG5cbiAgZmluaXNoKHN0YXRlOiBMYXlvdXRJdGVyYXRvclN0YXRlKTogdm9pZCB8IFRhc2suUmVzdWx0PGJvb2xlYW4+IHt9XG59XG5cbmV4cG9ydCBjbGFzcyBMYXlvdXRJdGVyYXRvciB7XG4gIGNvbnN0cnVjdG9yKFxuICAgIHByaXZhdGUgcmVhZG9ubHkgc3RyYXRlZ3k6IExheW91dEl0ZXJhdG9yU3RyYXRlZ3ksXG4gICAgcHJpdmF0ZSByZWFkb25seSBsYXlvdXRDb250ZXh0OiBWdHJlZS5MYXlvdXRDb250ZXh0LFxuICApIHt9XG5cbiAgaXRlcmF0ZShcbiAgICBpbml0aWFsTm9kZUNvbnRleHQ6IFZ0cmVlLk5vZGVDb250ZXh0LFxuICApOiBUYXNrLlJlc3VsdDxWdHJlZS5Ob2RlQ29udGV4dD4ge1xuICAgIGNvbnN0IHN0cmF0ZWd5ID0gdGhpcy5zdHJhdGVneTtcbiAgICBjb25zdCBzdGF0ZSA9IHN0cmF0ZWd5LmluaXRpYWxTdGF0ZShpbml0aWFsTm9kZUNvbnRleHQpO1xuICAgIGNvbnN0IGZyYW1lOiBUYXNrLkZyYW1lPFZ0cmVlLk5vZGVDb250ZXh0PiA9IFRhc2submV3RnJhbWUoXG4gICAgICBcIkxheW91dEl0ZXJhdG9yXCIsXG4gICAgKTtcbiAgICBmcmFtZVxuICAgICAgLmxvb3BXaXRoRnJhbWUoKGxvb3BGcmFtZSkgPT4ge1xuICAgICAgICBsZXQgcjogdm9pZCB8IFRhc2suUmVzdWx0PGJvb2xlYW4+O1xuICAgICAgICB3aGlsZSAoc3RhdGUubm9kZUNvbnRleHQpIHtcbiAgICAgICAgICBpZiAoIXN0YXRlLm5vZGVDb250ZXh0LnZpZXdOb2RlKSB7XG4gICAgICAgICAgICBpZiAoc3RhdGUubm9kZUNvbnRleHQuYWZ0ZXIpIHtcbiAgICAgICAgICAgICAgciA9IHN0cmF0ZWd5LmFmdGVyTm9uRGlzcGxheWFibGVOb2RlKHN0YXRlKTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgIHIgPSBzdHJhdGVneS5zdGFydE5vbkRpc3BsYXlhYmxlTm9kZShzdGF0ZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSBlbHNlIGlmIChzdGF0ZS5ub2RlQ29udGV4dC52aWV3Tm9kZS5ub2RlVHlwZSAhPT0gMSkge1xuICAgICAgICAgICAgaWYgKFxuICAgICAgICAgICAgICBWdHJlZUltcGwuY2FuSWdub3JlKFxuICAgICAgICAgICAgICAgIHN0YXRlLm5vZGVDb250ZXh0LnZpZXdOb2RlLFxuICAgICAgICAgICAgICAgIHN0YXRlLm5vZGVDb250ZXh0LndoaXRlc3BhY2UsXG4gICAgICAgICAgICAgIClcbiAgICAgICAgICAgICkge1xuICAgICAgICAgICAgICBpZiAoc3RhdGUubm9kZUNvbnRleHQuYWZ0ZXIpIHtcbiAgICAgICAgICAgICAgICByID0gc3RyYXRlZ3kuYWZ0ZXJJZ25vcmVkVGV4dE5vZGUoc3RhdGUpO1xuICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIHIgPSBzdHJhdGVneS5zdGFydElnbm9yZWRUZXh0Tm9kZShzdGF0ZSk7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgIGlmIChzdGF0ZS5ub2RlQ29udGV4dC5hZnRlcikge1xuICAgICAgICAgICAgICAgIHIgPSBzdHJhdGVneS5hZnRlck5vbkVsZW1lbnROb2RlKHN0YXRlKTtcbiAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICByID0gc3RyYXRlZ3kuc3RhcnROb25FbGVtZW50Tm9kZShzdGF0ZSk7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgaWYgKHN0YXRlLm5vZGVDb250ZXh0LmlubGluZSkge1xuICAgICAgICAgICAgICBpZiAoc3RhdGUubm9kZUNvbnRleHQuYWZ0ZXIpIHtcbiAgICAgICAgICAgICAgICByID0gc3RyYXRlZ3kuYWZ0ZXJJbmxpbmVFbGVtZW50Tm9kZShzdGF0ZSk7XG4gICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgciA9IHN0cmF0ZWd5LnN0YXJ0SW5saW5lRWxlbWVudE5vZGUoc3RhdGUpO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICBpZiAoc3RhdGUubm9kZUNvbnRleHQuYWZ0ZXIpIHtcbiAgICAgICAgICAgICAgICByID0gc3RyYXRlZ3kuYWZ0ZXJOb25JbmxpbmVFbGVtZW50Tm9kZShzdGF0ZSk7XG4gICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgciA9IHN0cmF0ZWd5LnN0YXJ0Tm9uSW5saW5lRWxlbWVudE5vZGUoc3RhdGUpO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICAgIGNvbnN0IGNvbnQgPSByICYmIHIuaXNQZW5kaW5nKCkgPyByIDogVGFzay5uZXdSZXN1bHQodHJ1ZSk7XG4gICAgICAgICAgY29uc3QgbmV4dFJlc3VsdCA9IGNvbnQudGhlbkFzeW5jKCgpID0+IHtcbiAgICAgICAgICAgIGlmIChzdGF0ZS5icmVhaykge1xuICAgICAgICAgICAgICByZXR1cm4gVGFzay5uZXdSZXN1bHQobnVsbCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5sYXlvdXRDb250ZXh0Lm5leHRJblRyZWUoXG4gICAgICAgICAgICAgIHN0YXRlLm5vZGVDb250ZXh0LFxuICAgICAgICAgICAgICBzdGF0ZS5hdFVuZm9yY2VkQnJlYWssXG4gICAgICAgICAgICApO1xuICAgICAgICAgIH0pO1xuICAgICAgICAgIGlmIChuZXh0UmVzdWx0LmlzUGVuZGluZygpKSB7XG4gICAgICAgICAgICBuZXh0UmVzdWx0LnRoZW4oKG5leHROb2RlQ29udGV4dCkgPT4ge1xuICAgICAgICAgICAgICBpZiAoc3RhdGUuYnJlYWspIHtcbiAgICAgICAgICAgICAgICBsb29wRnJhbWUuYnJlYWtMb29wKCk7XG4gICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgc3RhdGUubm9kZUNvbnRleHQgPSBuZXh0Tm9kZUNvbnRleHQ7XG4gICAgICAgICAgICAgICAgbG9vcEZyYW1lLmNvbnRpbnVlTG9vcCgpO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICB9IGVsc2UgaWYgKHN0YXRlLmJyZWFrKSB7XG4gICAgICAgICAgICBsb29wRnJhbWUuYnJlYWtMb29wKCk7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHN0YXRlLm5vZGVDb250ZXh0ID0gbmV4dFJlc3VsdC5nZXQoKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgc3RyYXRlZ3kuZmluaXNoKHN0YXRlKTtcbiAgICAgICAgbG9vcEZyYW1lLmJyZWFrTG9vcCgpO1xuICAgICAgfSlcbiAgICAgIC50aGVuKCgpID0+IHtcbiAgICAgICAgZnJhbWUuZmluaXNoKHN0YXRlLm5vZGVDb250ZXh0KTtcbiAgICAgIH0pO1xuICAgIHJldHVybiBmcmFtZS5yZXN1bHQoKTtcbiAgfVxufVxuXG5leHBvcnQgY2xhc3MgRWRnZVNraXBwZXIgZXh0ZW5kcyBMYXlvdXRJdGVyYXRvclN0cmF0ZWd5IHtcbiAgY29uc3RydWN0b3IocHJvdGVjdGVkIHJlYWRvbmx5IGxlYWRpbmdFZGdlPzogYm9vbGVhbikge1xuICAgIHN1cGVyKCk7XG4gIH1cblxuICBzdGFydE5vbklubGluZUJveChzdGF0ZTogTGF5b3V0SXRlcmF0b3JTdGF0ZSk6IHZvaWQgfCBUYXNrLlJlc3VsdDxib29sZWFuPiB7fVxuXG4gIGVuZEVtcHR5Tm9uSW5saW5lQm94KFxuICAgIHN0YXRlOiBMYXlvdXRJdGVyYXRvclN0YXRlLFxuICApOiB2b2lkIHwgVGFzay5SZXN1bHQ8Ym9vbGVhbj4ge31cblxuICBlbmROb25JbmxpbmVCb3goc3RhdGU6IExheW91dEl0ZXJhdG9yU3RhdGUpOiB2b2lkIHwgVGFzay5SZXN1bHQ8Ym9vbGVhbj4ge31cblxuICBpbml0aWFsU3RhdGUoaW5pdGlhbE5vZGVDb250ZXh0OiBWdHJlZS5Ob2RlQ29udGV4dCk6IExheW91dEl0ZXJhdG9yU3RhdGUge1xuICAgIHJldHVybiB7XG4gICAgICBub2RlQ29udGV4dDogaW5pdGlhbE5vZGVDb250ZXh0LFxuICAgICAgYXRVbmZvcmNlZEJyZWFrOiAhIXRoaXMubGVhZGluZ0VkZ2UgJiYgaW5pdGlhbE5vZGVDb250ZXh0LmFmdGVyLFxuICAgICAgYnJlYWs6IGZhbHNlLFxuICAgICAgbGVhZGluZ0VkZ2U6IHRoaXMubGVhZGluZ0VkZ2UsXG4gICAgICBicmVha0F0VGhlRWRnZTogbnVsbCxcbiAgICAgIG9uU3RhcnRFZGdlczogZmFsc2UsXG4gICAgICBsZWFkaW5nRWRnZUNvbnRleHRzOiBbXSxcbiAgICAgIGxhc3RBZnRlck5vZGVDb250ZXh0OiBudWxsLFxuICAgIH07XG4gIH1cblxuICAvKipcbiAgICogQHJldHVybiBSZXR1cm5zIHRydWUgaWYgYSBmb3JjZWQgYnJlYWsgb2NjdXJzLlxuICAgKi9cbiAgcHJvY2Vzc0ZvcmNlZEJyZWFrKFxuICAgIHN0YXRlOiBMYXlvdXRJdGVyYXRvclN0YXRlLFxuICAgIGNvbHVtbjogTGF5b3V0LkNvbHVtbixcbiAgKTogYm9vbGVhbiB7XG4gICAgY29uc3QgbmVlZEZvcmNlZEJyZWFrID1cbiAgICAgICFzdGF0ZS5sZWFkaW5nRWRnZSAmJiBCcmVhay5pc0ZvcmNlZEJyZWFrVmFsdWUoc3RhdGUuYnJlYWtBdFRoZUVkZ2UpO1xuICAgIGlmIChuZWVkRm9yY2VkQnJlYWspIHtcbiAgICAgIGNvbnN0IG5vZGVDb250ZXh0ID0gKHN0YXRlLm5vZGVDb250ZXh0ID1cbiAgICAgICAgc3RhdGUubGVhZGluZ0VkZ2VDb250ZXh0c1swXSB8fCBzdGF0ZS5ub2RlQ29udGV4dCk7XG4gICAgICBub2RlQ29udGV4dC52aWV3Tm9kZS5wYXJlbnROb2RlLnJlbW92ZUNoaWxkKG5vZGVDb250ZXh0LnZpZXdOb2RlKTtcbiAgICAgIGNvbHVtbi5wYWdlQnJlYWtUeXBlID0gc3RhdGUuYnJlYWtBdFRoZUVkZ2U7XG4gICAgfVxuICAgIHJldHVybiBuZWVkRm9yY2VkQnJlYWs7XG4gIH1cblxuICAvKipcbiAgICogQHJldHVybiBSZXR1cm5zIHRydWUgaWYgdGhlIG5vZGUgb3ZlcmZsb3dzIHRoZSBjb2x1bW4uXG4gICAqL1xuICBzYXZlRWRnZUFuZFByb2Nlc3NPdmVyZmxvdyhcbiAgICBzdGF0ZTogTGF5b3V0SXRlcmF0b3JTdGF0ZSxcbiAgICBjb2x1bW46IExheW91dC5Db2x1bW4sXG4gICk6IGJvb2xlYW4ge1xuICAgIGNvbnN0IG92ZXJmbG93ID0gY29sdW1uLmNoZWNrT3ZlcmZsb3dBbmRTYXZlRWRnZUFuZEJyZWFrUG9zaXRpb24oXG4gICAgICBzdGF0ZS5sYXN0QWZ0ZXJOb2RlQ29udGV4dCxcbiAgICAgIG51bGwsXG4gICAgICB0cnVlLFxuICAgICAgc3RhdGUuYnJlYWtBdFRoZUVkZ2UsXG4gICAgKTtcbiAgICBpZiAob3ZlcmZsb3cpIHtcbiAgICAgIHN0YXRlLm5vZGVDb250ZXh0ID0gKFxuICAgICAgICBzdGF0ZS5sYXN0QWZ0ZXJOb2RlQ29udGV4dCB8fCBzdGF0ZS5ub2RlQ29udGV4dFxuICAgICAgKS5tb2RpZnkoKTtcbiAgICAgIHN0YXRlLm5vZGVDb250ZXh0Lm92ZXJmbG93ID0gdHJ1ZTtcbiAgICB9XG4gICAgcmV0dXJuIG92ZXJmbG93O1xuICB9XG5cbiAgLyoqXG4gICAqIEByZXR1cm5zIFJldHVybnMgdHJ1ZSBpZiB0aGUgbGF5b3V0IGNvbnN0cmFpbnQgaXMgdmlvbGF0ZWQuXG4gICAqL1xuICBwcm9jZXNzTGF5b3V0Q29uc3RyYWludChcbiAgICBzdGF0ZTogTGF5b3V0SXRlcmF0b3JTdGF0ZSxcbiAgICBsYXlvdXRDb25zdHJhaW50OiBMYXlvdXQuTGF5b3V0Q29uc3RyYWludCxcbiAgICBjb2x1bW46IExheW91dC5Db2x1bW4sXG4gICk6IGJvb2xlYW4ge1xuICAgIGxldCBub2RlQ29udGV4dCA9IHN0YXRlLm5vZGVDb250ZXh0O1xuICAgIGNvbnN0IHZpb2xhdGVDb25zdHJhaW50ID0gIWxheW91dENvbnN0cmFpbnQuYWxsb3dMYXlvdXQobm9kZUNvbnRleHQpO1xuICAgIGlmICh2aW9sYXRlQ29uc3RyYWludCkge1xuICAgICAgY29sdW1uLmNoZWNrT3ZlcmZsb3dBbmRTYXZlRWRnZUFuZEJyZWFrUG9zaXRpb24oXG4gICAgICAgIHN0YXRlLmxhc3RBZnRlck5vZGVDb250ZXh0LFxuICAgICAgICBudWxsLFxuICAgICAgICBmYWxzZSxcbiAgICAgICAgc3RhdGUuYnJlYWtBdFRoZUVkZ2UsXG4gICAgICApO1xuICAgICAgbm9kZUNvbnRleHQgPSBzdGF0ZS5ub2RlQ29udGV4dCA9IG5vZGVDb250ZXh0Lm1vZGlmeSgpO1xuICAgICAgbm9kZUNvbnRleHQub3ZlcmZsb3cgPSB0cnVlO1xuICAgIH1cbiAgICByZXR1cm4gdmlvbGF0ZUNvbnN0cmFpbnQ7XG4gIH1cblxuICAvKipcbiAgICogQG92ZXJyaWRlXG4gICAqL1xuICBzdGFydE5vbkVsZW1lbnROb2RlKHN0YXRlOiBMYXlvdXRJdGVyYXRvclN0YXRlKTogdm9pZCB8IFRhc2suUmVzdWx0PGJvb2xlYW4+IHtcbiAgICBzdGF0ZS5vblN0YXJ0RWRnZXMgPSBmYWxzZTtcbiAgfVxuXG4gIC8qKlxuICAgKiBAb3ZlcnJpZGVcbiAgICovXG4gIHN0YXJ0Tm9uSW5saW5lRWxlbWVudE5vZGUoXG4gICAgc3RhdGU6IExheW91dEl0ZXJhdG9yU3RhdGUsXG4gICk6IHZvaWQgfCBUYXNrLlJlc3VsdDxib29sZWFuPiB7XG4gICAgc3RhdGUubGVhZGluZ0VkZ2VDb250ZXh0cy5wdXNoKHN0YXRlLm5vZGVDb250ZXh0LmNvcHkoKSk7XG4gICAgc3RhdGUuYnJlYWtBdFRoZUVkZ2UgPSBCcmVhay5yZXNvbHZlRWZmZWN0aXZlQnJlYWtWYWx1ZShcbiAgICAgIHN0YXRlLmJyZWFrQXRUaGVFZGdlLFxuICAgICAgc3RhdGUubm9kZUNvbnRleHQuYnJlYWtCZWZvcmUsXG4gICAgKTtcbiAgICBzdGF0ZS5vblN0YXJ0RWRnZXMgPSB0cnVlO1xuICAgIHJldHVybiB0aGlzLnN0YXJ0Tm9uSW5saW5lQm94KHN0YXRlKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBAb3ZlcnJpZGVcbiAgICovXG4gIGFmdGVyTm9uSW5saW5lRWxlbWVudE5vZGUoXG4gICAgc3RhdGU6IExheW91dEl0ZXJhdG9yU3RhdGUsXG4gICk6IHZvaWQgfCBUYXNrLlJlc3VsdDxib29sZWFuPiB7XG4gICAgbGV0IHI6IHZvaWQgfCBUYXNrLlJlc3VsdDxib29sZWFuPjtcbiAgICBsZXQgY29udDogVGFzay5SZXN1bHQ8Ym9vbGVhbj47XG4gICAgaWYgKHN0YXRlLm9uU3RhcnRFZGdlcykge1xuICAgICAgciA9IHRoaXMuZW5kRW1wdHlOb25JbmxpbmVCb3goc3RhdGUpO1xuICAgICAgY29udCA9IHIgJiYgci5pc1BlbmRpbmcoKSA/IHIgOiBUYXNrLm5ld1Jlc3VsdCh0cnVlKTtcbiAgICAgIGNvbnQgPSBjb250LnRoZW5Bc3luYygoKSA9PiB7XG4gICAgICAgIGlmICghc3RhdGUuYnJlYWspIHtcbiAgICAgICAgICBzdGF0ZS5sZWFkaW5nRWRnZUNvbnRleHRzID0gW107XG4gICAgICAgICAgc3RhdGUubGVhZGluZ0VkZ2UgPSBmYWxzZTtcbiAgICAgICAgICBzdGF0ZS5hdFVuZm9yY2VkQnJlYWsgPSBmYWxzZTtcbiAgICAgICAgICBzdGF0ZS5icmVha0F0VGhlRWRnZSA9IG51bGw7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIFRhc2submV3UmVzdWx0KHRydWUpO1xuICAgICAgfSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHIgPSB0aGlzLmVuZE5vbklubGluZUJveChzdGF0ZSk7XG4gICAgICBjb250ID0gciAmJiByLmlzUGVuZGluZygpID8gciA6IFRhc2submV3UmVzdWx0KHRydWUpO1xuICAgIH1cbiAgICByZXR1cm4gY29udC50aGVuQXN5bmMoKCkgPT4ge1xuICAgICAgaWYgKCFzdGF0ZS5icmVhaykge1xuICAgICAgICBzdGF0ZS5vblN0YXJ0RWRnZXMgPSBmYWxzZTtcbiAgICAgICAgc3RhdGUubGFzdEFmdGVyTm9kZUNvbnRleHQgPSBzdGF0ZS5ub2RlQ29udGV4dC5jb3B5KCk7XG4gICAgICAgIHN0YXRlLmJyZWFrQXRUaGVFZGdlID0gQnJlYWsucmVzb2x2ZUVmZmVjdGl2ZUJyZWFrVmFsdWUoXG4gICAgICAgICAgc3RhdGUuYnJlYWtBdFRoZUVkZ2UsXG4gICAgICAgICAgc3RhdGUubm9kZUNvbnRleHQuYnJlYWtBZnRlcixcbiAgICAgICAgKTtcbiAgICAgIH1cbiAgICAgIHJldHVybiBUYXNrLm5ld1Jlc3VsdCh0cnVlKTtcbiAgICB9KTtcbiAgfVxufVxuIiwiLyoqXG4gKiBDb3B5cmlnaHQgMjAxOSBWaXZsaW9zdHlsZSBGb3VuZGF0aW9uXG4gKlxuICogVml2bGlvc3R5bGUuanMgaXMgZnJlZSBzb2Z0d2FyZTogeW91IGNhbiByZWRpc3RyaWJ1dGUgaXQgYW5kL29yIG1vZGlmeVxuICogaXQgdW5kZXIgdGhlIHRlcm1zIG9mIHRoZSBHTlUgQWZmZXJvIEdlbmVyYWwgUHVibGljIExpY2Vuc2UgYXMgcHVibGlzaGVkIGJ5XG4gKiB0aGUgRnJlZSBTb2Z0d2FyZSBGb3VuZGF0aW9uLCBlaXRoZXIgdmVyc2lvbiAzIG9mIHRoZSBMaWNlbnNlLCBvclxuICogKGF0IHlvdXIgb3B0aW9uKSBhbnkgbGF0ZXIgdmVyc2lvbi5cbiAqXG4gKiBWaXZsaW9zdHlsZS5qcyBpcyBkaXN0cmlidXRlZCBpbiB0aGUgaG9wZSB0aGF0IGl0IHdpbGwgYmUgdXNlZnVsLFxuICogYnV0IFdJVEhPVVQgQU5ZIFdBUlJBTlRZOyB3aXRob3V0IGV2ZW4gdGhlIGltcGxpZWQgd2FycmFudHkgb2ZcbiAqIE1FUkNIQU5UQUJJTElUWSBvciBGSVRORVNTIEZPUiBBIFBBUlRJQ1VMQVIgUFVSUE9TRS4gIFNlZSB0aGVcbiAqIEdOVSBBZmZlcm8gR2VuZXJhbCBQdWJsaWMgTGljZW5zZSBmb3IgbW9yZSBkZXRhaWxzLlxuICpcbiAqIFlvdSBzaG91bGQgaGF2ZSByZWNlaXZlZCBhIGNvcHkgb2YgdGhlIEdOVSBBZmZlcm8gR2VuZXJhbCBQdWJsaWMgTGljZW5zZVxuICogYWxvbmcgd2l0aCBWaXZsaW9zdHlsZS5qcy4gIElmIG5vdCwgc2VlIDxodHRwOi8vd3d3LmdudS5vcmcvbGljZW5zZXMvPi5cbiAqXG4gKiBAZmlsZW92ZXJ2aWV3IFNoYXJlZCAtIEdsb2JhbCB2YXJpYWJsZXMgb2YgVml2bGlvc3R5bGUuanNcbiAqL1xuaW1wb3J0IHsgUmVwZXRpdGl2ZUVsZW1lbnQgfSBmcm9tIFwiLi90eXBlc1wiO1xuXG5leHBvcnQgbGV0IHJlcGV0aXRpdmVFbGVtZW50c0NhY2hlOiB7XG4gIHJvb3Q6IEVsZW1lbnQ7XG4gIGVsZW1lbnRzOiBSZXBldGl0aXZlRWxlbWVudC5SZXBldGl0aXZlRWxlbWVudHM7XG59W10gPSBbXTtcblxuZXhwb3J0IGZ1bmN0aW9uIGNsZWFyUmVwZXRpdGl2ZUVsZW1lbnRzQ2FjaGUoKTogdm9pZCB7XG4gIHJlcGV0aXRpdmVFbGVtZW50c0NhY2hlID0gW107XG59XG4iLCIvKipcbiAqIENvcHlyaWdodCAyMDEzIEdvb2dsZSwgSW5jLlxuICogQ29weXJpZ2h0IDIwMTUgVHJpbS1tYXJrcyBJbmMuXG4gKiBDb3B5cmlnaHQgMjAxOSBWaXZsaW9zdHlsZSBGb3VuZGF0aW9uXG4gKlxuICogVml2bGlvc3R5bGUuanMgaXMgZnJlZSBzb2Z0d2FyZTogeW91IGNhbiByZWRpc3RyaWJ1dGUgaXQgYW5kL29yIG1vZGlmeVxuICogaXQgdW5kZXIgdGhlIHRlcm1zIG9mIHRoZSBHTlUgQWZmZXJvIEdlbmVyYWwgUHVibGljIExpY2Vuc2UgYXMgcHVibGlzaGVkIGJ5XG4gKiB0aGUgRnJlZSBTb2Z0d2FyZSBGb3VuZGF0aW9uLCBlaXRoZXIgdmVyc2lvbiAzIG9mIHRoZSBMaWNlbnNlLCBvclxuICogKGF0IHlvdXIgb3B0aW9uKSBhbnkgbGF0ZXIgdmVyc2lvbi5cbiAqXG4gKiBWaXZsaW9zdHlsZS5qcyBpcyBkaXN0cmlidXRlZCBpbiB0aGUgaG9wZSB0aGF0IGl0IHdpbGwgYmUgdXNlZnVsLFxuICogYnV0IFdJVEhPVVQgQU5ZIFdBUlJBTlRZOyB3aXRob3V0IGV2ZW4gdGhlIGltcGxpZWQgd2FycmFudHkgb2ZcbiAqIE1FUkNIQU5UQUJJTElUWSBvciBGSVRORVNTIEZPUiBBIFBBUlRJQ1VMQVIgUFVSUE9TRS4gIFNlZSB0aGVcbiAqIEdOVSBBZmZlcm8gR2VuZXJhbCBQdWJsaWMgTGljZW5zZSBmb3IgbW9yZSBkZXRhaWxzLlxuICpcbiAqIFlvdSBzaG91bGQgaGF2ZSByZWNlaXZlZCBhIGNvcHkgb2YgdGhlIEdOVSBBZmZlcm8gR2VuZXJhbCBQdWJsaWMgTGljZW5zZVxuICogYWxvbmcgd2l0aCBWaXZsaW9zdHlsZS5qcy4gIElmIG5vdCwgc2VlIDxodHRwOi8vd3d3LmdudS5vcmcvbGljZW5zZXMvPi5cbiAqXG4gKiBAZmlsZW92ZXJ2aWV3IExheW91dCAtIEZpbGxzIGEgY29sdW1uIHdpdGggc3R5bGVkIGNvbnRlbnQuXG4gKiBUaGlzIGZpbGUgZG9lcyBub3QgY29tbXVuaWNhdGUgd2l0aCB0aGUgc3R5bGluZyBzeXN0ZW0gZGlyZWN0bHkuXG4gKiBJbnN0ZWFkIGl0IGdvZXMgdGhyb3VnaCB0aGUgbGF5b3V0IGludGVyZmFjZSB0aGF0IGdpdmVzIGl0IG9uZSB2aWV3IHRyZWVcbiAqIG5vZGUgYXQgYSB0aW1lLlxuICovXG5pbXBvcnQgKiBhcyBMYXlvdXRSZXRyeWVycyBmcm9tIFwiLi9sYXlvdXQtcmV0cnllcnNcIjtcbmltcG9ydCAqIGFzIEFzc2VydHMgZnJvbSBcIi4vYXNzZXJ0c1wiO1xuaW1wb3J0ICogYXMgU2hhcmVkIGZyb20gXCIuL3NoYXJlZFwiO1xuaW1wb3J0ICogYXMgU2l6aW5nIGZyb20gXCIuL3NpemluZ1wiO1xuaW1wb3J0ICogYXMgQnJlYWsgZnJvbSBcIi4vYnJlYWtcIjtcbmltcG9ydCAqIGFzIExvZ2dpbmcgZnJvbSBcIi4vbG9nZ2luZ1wiO1xuaW1wb3J0ICogYXMgRGlmZiBmcm9tIFwiLi9kaWZmXCI7XG5pbXBvcnQgKiBhcyBCYXNlIGZyb20gXCIuL2Jhc2VcIjtcbmltcG9ydCAqIGFzIEJyZWFrUG9zaXRpb24gZnJvbSBcIi4vYnJlYWstcG9zaXRpb25cIjtcbmltcG9ydCAqIGFzIENzcyBmcm9tIFwiLi9jc3NcIjtcbmltcG9ydCAqIGFzIEdlb21ldHJ5VXRpbCBmcm9tIFwiLi9nZW9tZXRyeS11dGlsXCI7XG5pbXBvcnQgKiBhcyBMYXlvdXRIZWxwZXIgZnJvbSBcIi4vbGF5b3V0LWhlbHBlclwiO1xuaW1wb3J0ICogYXMgTGF5b3V0UHJvY2Vzc29yIGZyb20gXCIuL2xheW91dC1wcm9jZXNzb3JcIjtcbmltcG9ydCAqIGFzIFBhZ2VGbG9hdHMgZnJvbSBcIi4vcGFnZS1mbG9hdHNcIjtcbmltcG9ydCAqIGFzIFBsdWdpbiBmcm9tIFwiLi9wbHVnaW5cIjtcbmltcG9ydCAqIGFzIE1hdGNoZXJzIGZyb20gXCIuL21hdGNoZXJzXCI7XG5pbXBvcnQgKiBhcyBQc2V1ZG9FbGVtZW50IGZyb20gXCIuL3BzZXVkby1lbGVtZW50XCI7XG5pbXBvcnQgKiBhcyBUYXNrIGZyb20gXCIuL3Rhc2tcIjtcbmltcG9ydCAqIGFzIFZnZW4gZnJvbSBcIi4vdmdlblwiO1xuaW1wb3J0ICogYXMgVnRyZWVJbXBsIGZyb20gXCIuL3Z0cmVlXCI7XG5pbXBvcnQge1xuICBGcmFnbWVudExheW91dENvbnN0cmFpbnRUeXBlLFxuICBMYXlvdXQsXG4gIFJlcGV0aXRpdmVFbGVtZW50LFxuICBTZWxlY3RvcnMsXG4gIFRhYmxlLFxuICBWdHJlZSxcbn0gZnJvbSBcIi4vdHlwZXNcIjtcblxuZXhwb3J0IGNvbnN0IGlzSW5zdGFuY2VPZkFmdGVySWZDb250aW51ZXNMYXlvdXRDb25zdHJhaW50ID1cbiAgU2VsZWN0b3JzLmlzSW5zdGFuY2VPZkFmdGVySWZDb250aW51ZXNMYXlvdXRDb25zdHJhaW50O1xuZXhwb3J0IGNvbnN0IHJlZ2lzdGVyRnJhZ21lbnRJbmRleCA9XG4gIE1hdGNoZXJzLk50aEZyYWdtZW50TWF0Y2hlci5yZWdpc3RlckZyYWdtZW50SW5kZXg7XG5leHBvcnQgY29uc3QgY2xlYXJGcmFnbWVudEluZGljZXMgPVxuICBNYXRjaGVycy5OdGhGcmFnbWVudE1hdGNoZXIuY2xlYXJGcmFnbWVudEluZGljZXM7XG5cbmV4cG9ydCBjbGFzcyBBZnRlcklmQ29udGludWVzIGltcGxlbWVudHMgU2VsZWN0b3JzLkFmdGVySWZDb250aW51ZXMge1xuICBjb25zdHJ1Y3RvcihcbiAgICBwdWJsaWMgcmVhZG9ubHkgc291cmNlTm9kZTogRWxlbWVudCxcbiAgICBwdWJsaWMgcmVhZG9ubHkgc3R5bGVyOiBQc2V1ZG9FbGVtZW50LlBzZXVkb2VsZW1lbnRTdHlsZXIsXG4gICkge31cblxuICBjcmVhdGVFbGVtZW50KFxuICAgIGNvbHVtbjogTGF5b3V0LkNvbHVtbixcbiAgICBwYXJlbnROb2RlQ29udGV4dDogVnRyZWUuTm9kZUNvbnRleHQsXG4gICk6IFRhc2suUmVzdWx0PEVsZW1lbnQ+IHtcbiAgICBjb25zdCBkb2MgPSBwYXJlbnROb2RlQ29udGV4dC52aWV3Tm9kZS5vd25lckRvY3VtZW50O1xuICAgIGNvbnN0IHZpZXdSb290ID0gZG9jLmNyZWF0ZUVsZW1lbnQoXCJkaXZcIik7XG4gICAgY29uc3QgcHNldWRvQ29sdW1uID0gbmV3IFBzZXVkb0NvbHVtbihjb2x1bW4sIHZpZXdSb290LCBwYXJlbnROb2RlQ29udGV4dCk7XG4gICAgY29uc3QgaW5pdGlhbFBhZ2VCcmVha1R5cGUgPSBwc2V1ZG9Db2x1bW4uZ2V0Q29sdW1uKCkucGFnZUJyZWFrVHlwZTtcbiAgICBwc2V1ZG9Db2x1bW4uZ2V0Q29sdW1uKCkucGFnZUJyZWFrVHlwZSA9IG51bGw7XG4gICAgcmV0dXJuIHBzZXVkb0NvbHVtblxuICAgICAgLmxheW91dCh0aGlzLmNyZWF0ZU5vZGVQb3NpdGlvbkZvclBzZXVkb0VsZW1lbnQoKSwgdHJ1ZSlcbiAgICAgIC50aGVuQXN5bmMoKCkgPT4ge1xuICAgICAgICB0aGlzLnN0eWxlci5jb250ZW50UHJvY2Vzc2VkW1wiYWZ0ZXItaWYtY29udGludWVzXCJdID0gZmFsc2U7XG4gICAgICAgIHBzZXVkb0NvbHVtbi5nZXRDb2x1bW4oKS5wYWdlQnJlYWtUeXBlID0gaW5pdGlhbFBhZ2VCcmVha1R5cGU7XG4gICAgICAgIGNvbnN0IHBzZXVkb0VsZW1lbnQgPSB2aWV3Um9vdC5maXJzdENoaWxkIGFzIEVsZW1lbnQ7XG4gICAgICAgIEJhc2Uuc2V0Q1NTUHJvcGVydHkocHNldWRvRWxlbWVudCwgXCJkaXNwbGF5XCIsIFwiYmxvY2tcIik7XG4gICAgICAgIHJldHVybiBUYXNrLm5ld1Jlc3VsdChwc2V1ZG9FbGVtZW50KTtcbiAgICAgIH0pO1xuICB9XG5cbiAgcHJpdmF0ZSBjcmVhdGVOb2RlUG9zaXRpb25Gb3JQc2V1ZG9FbGVtZW50KCk6IFZ0cmVlLkNodW5rUG9zaXRpb24ge1xuICAgIGNvbnN0IHNvdXJjZU5vZGUgPSBQc2V1ZG9FbGVtZW50LmRvY3VtZW50LmNyZWF0ZUVsZW1lbnROUyhcbiAgICAgIEJhc2UuTlMuWEhUTUwsXG4gICAgICBcImRpdlwiLFxuICAgICk7XG4gICAgUHNldWRvRWxlbWVudC5zZXRQc2V1ZG9OYW1lKHNvdXJjZU5vZGUsIFwiYWZ0ZXItaWYtY29udGludWVzXCIpO1xuICAgIGNvbnN0IHNoYWRvd0NvbnRleHQgPSB0aGlzLmNyZWF0ZVNoYWRvd0NvbnRleHQoc291cmNlTm9kZSk7XG4gICAgY29uc3Qgc3RlcCA9IHtcbiAgICAgIG5vZGU6IHNvdXJjZU5vZGUsXG4gICAgICBzaGFkb3dUeXBlOiBzaGFkb3dDb250ZXh0LnR5cGUsXG4gICAgICBzaGFkb3dDb250ZXh0LFxuICAgICAgbm9kZVNoYWRvdzogbnVsbCxcbiAgICAgIHNoYWRvd1NpYmxpbmc6IG51bGwsXG4gICAgfTtcbiAgICBjb25zdCBub2RlUG9zaXRpb24gPSB7XG4gICAgICBzdGVwczogW3N0ZXBdLFxuICAgICAgb2Zmc2V0SW5Ob2RlOiAwLFxuICAgICAgYWZ0ZXI6IGZhbHNlLFxuICAgICAgcHJlcHJvY2Vzc2VkVGV4dENvbnRlbnQ6IG51bGwsXG4gICAgfTtcbiAgICByZXR1cm4gbmV3IFZ0cmVlSW1wbC5DaHVua1Bvc2l0aW9uKG5vZGVQb3NpdGlvbiBhcyBhbnkpO1xuICB9XG5cbiAgcHJpdmF0ZSBjcmVhdGVTaGFkb3dDb250ZXh0KHJvb3Q6IEVsZW1lbnQpOiBWdHJlZS5TaGFkb3dDb250ZXh0IHtcbiAgICByZXR1cm4gbmV3IFZ0cmVlSW1wbC5TaGFkb3dDb250ZXh0KFxuICAgICAgdGhpcy5zb3VyY2VOb2RlLFxuICAgICAgcm9vdCxcbiAgICAgIG51bGwsXG4gICAgICBudWxsLFxuICAgICAgbnVsbCxcbiAgICAgIFZ0cmVlLlNoYWRvd1R5cGUuUk9PVEVELFxuICAgICAgdGhpcy5zdHlsZXIsXG4gICAgKTtcbiAgfVxufVxuXG5leHBvcnQgY2xhc3MgQWZ0ZXJJZkNvbnRpbnVlc0xheW91dENvbnN0cmFpbnRcbiAgaW1wbGVtZW50cyBTZWxlY3RvcnMuQWZ0ZXJJZkNvbnRpbnVlc0xheW91dENvbnN0cmFpbnQge1xuICBmbGFnbWVudExheW91dENvbnN0cmFpbnRUeXBlOiBGcmFnbWVudExheW91dENvbnN0cmFpbnRUeXBlID1cbiAgICBcIkFmdGVySWZDb250aW51ZVwiO1xuXG4gIGNvbnN0cnVjdG9yKFxuICAgIHB1YmxpYyBub2RlQ29udGV4dDogVnRyZWUuTm9kZUNvbnRleHQsXG4gICAgcHVibGljIGFmdGVySWZDb250aW51ZXM6IFNlbGVjdG9ycy5BZnRlcklmQ29udGludWVzLFxuICAgIHB1YmxpYyBwc2V1ZG9FbGVtZW50SGVpZ2h0OiBudW1iZXIsXG4gICkge31cblxuICAvKiogQG92ZXJyaWRlICovXG4gIGFsbG93TGF5b3V0KFxuICAgIG5vZGVDb250ZXh0OiBWdHJlZS5Ob2RlQ29udGV4dCxcbiAgICBvdmVyZmxvd25Ob2RlQ29udGV4dDogVnRyZWUuTm9kZUNvbnRleHQsXG4gICAgY29sdW1uOiBMYXlvdXQuQ29sdW1uLFxuICApOiBib29sZWFuIHtcbiAgICBpZiAoXG4gICAgICAob3ZlcmZsb3duTm9kZUNvbnRleHQgJiYgIW5vZGVDb250ZXh0KSB8fFxuICAgICAgKG5vZGVDb250ZXh0ICYmIG5vZGVDb250ZXh0Lm92ZXJmbG93KVxuICAgICkge1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG4gIH1cblxuICAvKiogQG92ZXJyaWRlICovXG4gIG5leHRDYW5kaWRhdGUobm9kZUNvbnRleHQ6IFZ0cmVlLk5vZGVDb250ZXh0KTogYm9vbGVhbiB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG5cbiAgLyoqIEBvdmVycmlkZSAqL1xuICBwb3N0TGF5b3V0KFxuICAgIGFsbG93ZWQ6IGJvb2xlYW4sXG4gICAgcG9zaXRpb25BZnRlcjogVnRyZWUuTm9kZUNvbnRleHQsXG4gICAgaW5pdGlhbFBvc2l0aW9uOiBWdHJlZS5Ob2RlQ29udGV4dCxcbiAgICBjb2x1bW46IExheW91dC5Db2x1bW4sXG4gICkge31cblxuICAvKiogQG92ZXJyaWRlICovXG4gIGZpbmlzaEJyZWFrKFxuICAgIG5vZGVDb250ZXh0OiBWdHJlZS5Ob2RlQ29udGV4dCxcbiAgICBjb2x1bW46IExheW91dC5Db2x1bW4sXG4gICk6IFRhc2suUmVzdWx0PGJvb2xlYW4+IHtcbiAgICBpZiAoIXRoaXMuZ2V0UmVwZXRpdGl2ZUVsZW1lbnRzKCkuYWZmZWN0VG8obm9kZUNvbnRleHQpKSB7XG4gICAgICByZXR1cm4gVGFzay5uZXdSZXN1bHQodHJ1ZSk7XG4gICAgfVxuICAgIHJldHVybiB0aGlzLmFmdGVySWZDb250aW51ZXNcbiAgICAgIC5jcmVhdGVFbGVtZW50KGNvbHVtbiwgdGhpcy5ub2RlQ29udGV4dClcbiAgICAgIC50aGVuQXN5bmMoKGVsZW1lbnQpID0+IHtcbiAgICAgICAgdGhpcy5ub2RlQ29udGV4dC52aWV3Tm9kZS5hcHBlbmRDaGlsZChlbGVtZW50KTtcbiAgICAgICAgcmV0dXJuIFRhc2submV3UmVzdWx0KHRydWUpO1xuICAgICAgfSk7XG4gIH1cblxuICBnZXRSZXBldGl0aXZlRWxlbWVudHMoKSB7XG4gICAgcmV0dXJuIG5ldyBBZnRlcklmQ29udGludWVzRWxlbWVudHNPZmZzZXQoXG4gICAgICB0aGlzLm5vZGVDb250ZXh0LFxuICAgICAgdGhpcy5wc2V1ZG9FbGVtZW50SGVpZ2h0LFxuICAgICk7XG4gIH1cblxuICAvKiogQG92ZXJyaWRlICovXG4gIGVxdWFsc1RvKGNvbnN0cmFpbnQ6IExheW91dC5GcmFnbWVudExheW91dENvbnN0cmFpbnQpOiBib29sZWFuIHtcbiAgICBpZiAoIShjb25zdHJhaW50IGluc3RhbmNlb2YgQWZ0ZXJJZkNvbnRpbnVlc0xheW91dENvbnN0cmFpbnQpKSB7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICAgIHJldHVybiAoXG4gICAgICB0aGlzLmFmdGVySWZDb250aW51ZXMgPT1cbiAgICAgIChjb25zdHJhaW50IGFzIEFmdGVySWZDb250aW51ZXNMYXlvdXRDb25zdHJhaW50KS5hZnRlcklmQ29udGludWVzXG4gICAgKTtcbiAgfVxuXG4gIC8qKiBAb3ZlcnJpZGUgKi9cbiAgZ2V0UHJpb3JpdHlPZkZpbmlzaEJyZWFrKCk6IG51bWJlciB7XG4gICAgcmV0dXJuIDk7XG4gIH1cbn1cblxuZXhwb3J0IGNsYXNzIEFmdGVySWZDb250aW51ZXNFbGVtZW50c09mZnNldFxuICBpbXBsZW1lbnRzIFNlbGVjdG9ycy5BZnRlcklmQ29udGludWVzRWxlbWVudHNPZmZzZXQge1xuICBjb25zdHJ1Y3RvcihwdWJsaWMgbm9kZUNvbnRleHQsIHB1YmxpYyBwc2V1ZG9FbGVtZW50SGVpZ2h0KSB7fVxuXG4gIC8qKiBAb3ZlcnJpZGUgKi9cbiAgY2FsY3VsYXRlT2Zmc2V0KG5vZGVDb250ZXh0OiBWdHJlZS5Ob2RlQ29udGV4dCk6IG51bWJlciB7XG4gICAgaWYgKCF0aGlzLmFmZmVjdFRvKG5vZGVDb250ZXh0KSkge1xuICAgICAgcmV0dXJuIDA7XG4gICAgfVxuICAgIHJldHVybiB0aGlzLnBzZXVkb0VsZW1lbnRIZWlnaHQ7XG4gIH1cblxuICAvKiogQG92ZXJyaWRlICovXG4gIGNhbGN1bGF0ZU1pbmltdW1PZmZzZXQobm9kZUNvbnRleHQ6IFZ0cmVlLk5vZGVDb250ZXh0KTogbnVtYmVyIHtcbiAgICByZXR1cm4gdGhpcy5jYWxjdWxhdGVPZmZzZXQobm9kZUNvbnRleHQpO1xuICB9XG5cbiAgYWZmZWN0VG8obm9kZUNvbnRleHQ6IFZ0cmVlLk5vZGVDb250ZXh0KTogYm9vbGVhbiB7XG4gICAgaWYgKCFub2RlQ29udGV4dCkge1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgICBjb25zdCBzb3VyY2VOb2RlID0gbm9kZUNvbnRleHQuc2hhZG93Q29udGV4dFxuICAgICAgPyBub2RlQ29udGV4dC5zaGFkb3dDb250ZXh0Lm93bmVyXG4gICAgICA6IG5vZGVDb250ZXh0LnNvdXJjZU5vZGU7XG4gICAgaWYgKHNvdXJjZU5vZGUgPT09IHRoaXMubm9kZUNvbnRleHQuc291cmNlTm9kZSkge1xuICAgICAgcmV0dXJuICEhbm9kZUNvbnRleHQuYWZ0ZXI7XG4gICAgfVxuICAgIGZvciAobGV0IG4gPSBzb3VyY2VOb2RlLnBhcmVudE5vZGU7IG47IG4gPSBuLnBhcmVudE5vZGUpIHtcbiAgICAgIGlmIChuID09PSB0aGlzLm5vZGVDb250ZXh0LnNvdXJjZU5vZGUpIHtcbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiBmYWxzZTtcbiAgfVxufVxuXG5mdW5jdGlvbiBwcm9jZXNzQWZ0ZXJJZkNvbnRpbnVlc09mTm9kZUNvbnRleHQoXG4gIG5vZGVDb250ZXh0OiBWdHJlZS5Ob2RlQ29udGV4dCxcbiAgY29sdW1uOiBMYXlvdXQuQ29sdW1uLFxuKTogVGFzay5SZXN1bHQ8VnRyZWUuTm9kZUNvbnRleHQ+IHtcbiAgaWYgKFxuICAgICFub2RlQ29udGV4dCB8fFxuICAgICFub2RlQ29udGV4dC5hZnRlcklmQ29udGludWVzIHx8XG4gICAgbm9kZUNvbnRleHQuYWZ0ZXIgfHxcbiAgICBjb2x1bW4uaXNGbG9hdE5vZGVDb250ZXh0KG5vZGVDb250ZXh0KVxuICApIHtcbiAgICByZXR1cm4gVGFzay5uZXdSZXN1bHQobm9kZUNvbnRleHQpO1xuICB9XG4gIGNvbnN0IGFmdGVySWZDb250aW51ZXMgPSBub2RlQ29udGV4dC5hZnRlcklmQ29udGludWVzO1xuICByZXR1cm4gYWZ0ZXJJZkNvbnRpbnVlc1xuICAgIC5jcmVhdGVFbGVtZW50KGNvbHVtbiwgbm9kZUNvbnRleHQpXG4gICAgLnRoZW5Bc3luYygocHNldWRvRWxlbWVudCkgPT4ge1xuICAgICAgQXNzZXJ0cy5hc3NlcnQobm9kZUNvbnRleHQgIT09IG51bGwpO1xuICAgICAgY29uc3QgcHNldWRvRWxlbWVudEhlaWdodCA9IGNhbGN1bGF0ZVBzZXVkb0VsZW1lbnRIZWlnaHQoXG4gICAgICAgIG5vZGVDb250ZXh0LFxuICAgICAgICBjb2x1bW4sXG4gICAgICAgIHBzZXVkb0VsZW1lbnQsXG4gICAgICApO1xuICAgICAgY29sdW1uLmZyYWdtZW50TGF5b3V0Q29uc3RyYWludHMucHVzaChcbiAgICAgICAgbmV3IEFmdGVySWZDb250aW51ZXNMYXlvdXRDb25zdHJhaW50KFxuICAgICAgICAgIG5vZGVDb250ZXh0IGFzIFZ0cmVlLk5vZGVDb250ZXh0LFxuICAgICAgICAgIGFmdGVySWZDb250aW51ZXMsXG4gICAgICAgICAgcHNldWRvRWxlbWVudEhlaWdodCxcbiAgICAgICAgKSxcbiAgICAgICk7XG4gICAgICByZXR1cm4gVGFzay5uZXdSZXN1bHQobm9kZUNvbnRleHQpO1xuICAgIH0pO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gcHJvY2Vzc0FmdGVySWZDb250aW51ZXMoXG4gIHJlc3VsdDogVGFzay5SZXN1bHQ8VnRyZWUuTm9kZUNvbnRleHQ+LFxuICBjb2x1bW46IExheW91dC5Db2x1bW4sXG4pOiBUYXNrLlJlc3VsdDxWdHJlZS5Ob2RlQ29udGV4dD4ge1xuICByZXR1cm4gcmVzdWx0LnRoZW5Bc3luYygobm9kZUNvbnRleHQpID0+XG4gICAgcHJvY2Vzc0FmdGVySWZDb250aW51ZXNPZk5vZGVDb250ZXh0KG5vZGVDb250ZXh0LCBjb2x1bW4pLFxuICApO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gcHJvY2Vzc0FmdGVySWZDb250aW51ZXNPZkFuY2VzdG9ycyhcbiAgbm9kZUNvbnRleHQ6IFZ0cmVlLk5vZGVDb250ZXh0LFxuICBjb2x1bW46IExheW91dC5Db2x1bW4sXG4pOiBUYXNrLlJlc3VsdDxib29sZWFuPiB7XG4gIGNvbnN0IGZyYW1lOiBUYXNrLkZyYW1lPGJvb2xlYW4+ID0gVGFzay5uZXdGcmFtZShcbiAgICBcInByb2Nlc3NBZnRlcklmQ29udGludWVzT2ZBbmNlc3RvcnNcIixcbiAgKTtcbiAgbGV0IGN1cnJlbnQ6IFZ0cmVlLk5vZGVDb250ZXh0ID0gbm9kZUNvbnRleHQ7XG4gIGZyYW1lXG4gICAgLmxvb3AoKCkgPT4ge1xuICAgICAgaWYgKGN1cnJlbnQgIT09IG51bGwpIHtcbiAgICAgICAgY29uc3QgcmVzdWx0ID0gcHJvY2Vzc0FmdGVySWZDb250aW51ZXNPZk5vZGVDb250ZXh0KGN1cnJlbnQsIGNvbHVtbik7XG4gICAgICAgIGN1cnJlbnQgPSBjdXJyZW50LnBhcmVudDtcbiAgICAgICAgcmV0dXJuIHJlc3VsdC50aGVuUmV0dXJuKHRydWUpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcmV0dXJuIFRhc2submV3UmVzdWx0KGZhbHNlKTtcbiAgICAgIH1cbiAgICB9KVxuICAgIC50aGVuKCgpID0+IHtcbiAgICAgIGZyYW1lLmZpbmlzaCh0cnVlKTtcbiAgICB9KTtcbiAgcmV0dXJuIGZyYW1lLnJlc3VsdCgpO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gY2FsY3VsYXRlUHNldWRvRWxlbWVudEhlaWdodChcbiAgbm9kZUNvbnRleHQ6IFZ0cmVlLk5vZGVDb250ZXh0LFxuICBjb2x1bW46IExheW91dC5Db2x1bW4sXG4gIHBzZXVkb0VsZW1lbnQ6IEVsZW1lbnQsXG4pOiBudW1iZXIge1xuICBjb25zdCBwYXJlbnROb2RlID0gbm9kZUNvbnRleHQudmlld05vZGUgYXMgRWxlbWVudDtcbiAgcGFyZW50Tm9kZS5hcHBlbmRDaGlsZChwc2V1ZG9FbGVtZW50KTtcbiAgY29uc3QgaGVpZ2h0ID0gTGF5b3V0SGVscGVyLmdldEVsZW1lbnRIZWlnaHQoXG4gICAgcHNldWRvRWxlbWVudCxcbiAgICBjb2x1bW4sXG4gICAgbm9kZUNvbnRleHQudmVydGljYWwsXG4gICk7XG4gIHBhcmVudE5vZGUucmVtb3ZlQ2hpbGQocHNldWRvRWxlbWVudCk7XG4gIHJldHVybiBoZWlnaHQ7XG59XG5cbmV4cG9ydCBjb25zdCBtZWRpYVRhZ3MgPSB7XG4gIGltZzogdHJ1ZSxcbiAgc3ZnOiB0cnVlLFxuICBhdWRpbzogdHJ1ZSxcbiAgdmlkZW86IHRydWUsXG59O1xuXG4vKipcbiAqIFJlcHJlc2VudHMgYSBjb25zdHJhaW50IG9uIGxheW91dFxuICovXG5leHBvcnQgdHlwZSBMYXlvdXRDb25zdHJhaW50ID0gTGF5b3V0LkxheW91dENvbnN0cmFpbnQ7XG5cbi8qKlxuICogUmVwcmVzZW50cyBhIGNvbnN0cmFpbnQgdGhhdCBhbGxvd3MgbGF5b3V0IGlmIGFsbCB0aGUgY29uc3RyYWludHMgaXQgY29udGFpbnNcbiAqIGFsbG93IGxheW91dC5cbiAqL1xuZXhwb3J0IGNsYXNzIEFsbExheW91dENvbnN0cmFpbnQgaW1wbGVtZW50cyBMYXlvdXRDb25zdHJhaW50IHtcbiAgY29uc3RydWN0b3IocHVibGljIHJlYWRvbmx5IGNvbnN0cmFpbnRzOiBMYXlvdXRDb25zdHJhaW50W10pIHt9XG5cbiAgLyoqXG4gICAqIEBvdmVycmlkZVxuICAgKi9cbiAgYWxsb3dMYXlvdXQobm9kZUNvbnRleHQ6IFZ0cmVlLk5vZGVDb250ZXh0KTogYm9vbGVhbiB7XG4gICAgcmV0dXJuIHRoaXMuY29uc3RyYWludHMuZXZlcnkoKGMpID0+IGMuYWxsb3dMYXlvdXQobm9kZUNvbnRleHQpKTtcbiAgfVxufVxuXG4vKipcbiAqIFJlcHJlc2VudHMgY29uc3RyYWludHMgb24gbGF5aW5nIG91dCBmcmFnbWVudHNcbiAqL1xuZXhwb3J0IHR5cGUgRnJhZ21lbnRMYXlvdXRDb25zdHJhaW50ID0gTGF5b3V0LkZyYWdtZW50TGF5b3V0Q29uc3RyYWludDtcblxuZXhwb3J0IHR5cGUgQnJlYWtQb3NpdGlvbkFuZE5vZGVDb250ZXh0ID0gTGF5b3V0LkJyZWFrUG9zaXRpb25BbmROb2RlQ29udGV4dDtcblxuLyoqXG4gKiBQb3RlbnRpYWwgYnJlYWtpbmcgcG9zaXRpb24gaW5zaWRlIENTUyBib3ggKGJldHdlZW4gbGluZXMpLlxuICogQHBhcmFtIGNoZWNrUG9pbnRzIGFycmF5IG9mIGJyZWFraW5nIHBvaW50cyBmb3IgYnJlYWthYmxlIGJsb2NrXG4gKi9cbmV4cG9ydCBjbGFzcyBCb3hCcmVha1Bvc2l0aW9uXG4gIGV4dGVuZHMgQnJlYWtQb3NpdGlvbi5BYnN0cmFjdEJyZWFrUG9zaXRpb25cbiAgaW1wbGVtZW50cyBMYXlvdXQuQm94QnJlYWtQb3NpdGlvbiB7XG4gIHByaXZhdGUgYWxyZWFkeUV2YWx1YXRlZDogYm9vbGVhbiA9IGZhbHNlO1xuICBicmVha05vZGVDb250ZXh0OiBWdHJlZS5Ob2RlQ29udGV4dCA9IG51bGw7XG5cbiAgY29uc3RydWN0b3IoXG4gICAgcHVibGljIHJlYWRvbmx5IGNoZWNrUG9pbnRzOiBWdHJlZS5Ob2RlQ29udGV4dFtdLFxuICAgIHB1YmxpYyByZWFkb25seSBwZW5hbHR5OiBudW1iZXIsXG4gICkge1xuICAgIHN1cGVyKCk7XG4gIH1cblxuICAvKipcbiAgICogQG92ZXJyaWRlXG4gICAqL1xuICBmaW5kQWNjZXB0YWJsZUJyZWFrKGNvbHVtbjogQ29sdW1uLCBwZW5hbHR5OiBudW1iZXIpOiBWdHJlZS5Ob2RlQ29udGV4dCB7XG4gICAgaWYgKHBlbmFsdHkgPCB0aGlzLmdldE1pbkJyZWFrUGVuYWx0eSgpKSB7XG4gICAgICByZXR1cm4gbnVsbDtcbiAgICB9XG4gICAgaWYgKCF0aGlzLmFscmVhZHlFdmFsdWF0ZWQpIHtcbiAgICAgIHRoaXMuYnJlYWtOb2RlQ29udGV4dCA9IGNvbHVtbi5maW5kQm94QnJlYWtQb3NpdGlvbih0aGlzLCBwZW5hbHR5ID4gMCk7XG4gICAgICB0aGlzLmFscmVhZHlFdmFsdWF0ZWQgPSB0cnVlO1xuICAgIH1cbiAgICByZXR1cm4gdGhpcy5icmVha05vZGVDb250ZXh0O1xuICB9XG5cbiAgLyoqXG4gICAqIEBvdmVycmlkZVxuICAgKi9cbiAgZ2V0TWluQnJlYWtQZW5hbHR5KCk6IG51bWJlciB7XG4gICAgcmV0dXJuIHRoaXMucGVuYWx0eTtcbiAgfVxuXG4gIC8qKiBAb3ZlcnJpZGUgKi9cbiAgZ2V0Tm9kZUNvbnRleHQoKTogVnRyZWUuTm9kZUNvbnRleHQge1xuICAgIHJldHVybiB0aGlzLmFscmVhZHlFdmFsdWF0ZWRcbiAgICAgID8gdGhpcy5icmVha05vZGVDb250ZXh0XG4gICAgICA6IHRoaXMuY2hlY2tQb2ludHNbdGhpcy5jaGVja1BvaW50cy5sZW5ndGggLSAxXTtcbiAgfVxufVxuXG5leHBvcnQgZnVuY3Rpb24gdmFsaWRhdGVDaGVja1BvaW50cyhjaGVja1BvaW50czogVnRyZWUuTm9kZUNvbnRleHRbXSk6IHZvaWQge1xuICBmb3IgKGxldCBpID0gMTsgaSA8IGNoZWNrUG9pbnRzLmxlbmd0aDsgaSsrKSB7XG4gICAgY29uc3QgY3AwID0gY2hlY2tQb2ludHNbaSAtIDFdO1xuICAgIGNvbnN0IGNwMSA9IGNoZWNrUG9pbnRzW2ldO1xuICAgIGlmIChjcDAgPT09IGNwMSkge1xuICAgICAgTG9nZ2luZy5sb2dnZXIud2FybihcInZhbGlkYXRlQ2hlY2tQb2ludHM6IGR1cGxpY2F0ZSBlbnRyeVwiKTtcbiAgICB9IGVsc2UgaWYgKGNwMC5ib3hPZmZzZXQgPj0gY3AxLmJveE9mZnNldCkge1xuICAgICAgTG9nZ2luZy5sb2dnZXIud2FybihcInZhbGlkYXRlQ2hlY2tQb2ludHM6IGluY29ycmVjdCBib3hPZmZzZXRcIik7XG4gICAgfSBlbHNlIGlmIChjcDAuc291cmNlTm9kZSA9PSBjcDEuc291cmNlTm9kZSkge1xuICAgICAgaWYgKGNwMS5hZnRlcikge1xuICAgICAgICBpZiAoY3AwLmFmdGVyKSB7XG4gICAgICAgICAgTG9nZ2luZy5sb2dnZXIud2FybihcInZhbGlkYXRlQ2hlY2tQb2ludHM6IGR1cGxpY2F0ZSBhZnRlciBwb2ludHNcIik7XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGlmICghY3AwLmFmdGVyKSB7XG4gICAgICAgICAgaWYgKFxuICAgICAgICAgICAgY3AxLmJveE9mZnNldCAtIGNwMC5ib3hPZmZzZXQgIT1cbiAgICAgICAgICAgIGNwMS5vZmZzZXRJbk5vZGUgLSBjcDAub2Zmc2V0SW5Ob2RlXG4gICAgICAgICAgKSB7XG4gICAgICAgICAgICBMb2dnaW5nLmxvZ2dlci53YXJuKFxuICAgICAgICAgICAgICBcInZhbGlkYXRlQ2hlY2tQb2ludHM6IGJveE9mZnNldCBpbmNvbnNpc3RlbnQgd2l0aCBvZmZzZXRJbk5vZGVcIixcbiAgICAgICAgICAgICk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICB9XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBpc1NwZWNpYWxJbmxpbmVEaXNwbGF5KGRpc3BsYXk6IHN0cmluZyk6IGJvb2xlYW4ge1xuICBzd2l0Y2ggKGRpc3BsYXkpIHtcbiAgICBjYXNlIFwicnVieVwiOlxuICAgIGNhc2UgXCJpbmxpbmUtYmxvY2tcIjpcbiAgICBjYXNlIFwiaW5saW5lLWZsZXhcIjpcbiAgICBjYXNlIFwiaW5saW5lLWdyaWRcIjpcbiAgICBjYXNlIFwiaW5saW5lLWxpc3QtaXRlbVwiOlxuICAgIGNhc2UgXCJpbmxpbmUtdGFibGVcIjpcbiAgICAgIHJldHVybiB0cnVlO1xuICB9XG4gIHJldHVybiBmYWxzZTtcbn1cblxuZXhwb3J0IGNsYXNzIENvbHVtbiBleHRlbmRzIFZ0cmVlSW1wbC5Db250YWluZXIgaW1wbGVtZW50cyBMYXlvdXQuQ29sdW1uIHtcbiAgbGFzdDogTm9kZTtcbiAgdmlld0RvY3VtZW50OiBEb2N1bWVudDtcbiAgZmxvd1Jvb3RGb3JtYXR0aW5nQ29udGV4dDogVnRyZWUuRm9ybWF0dGluZ0NvbnRleHQgPSBudWxsO1xuICBpc0Zsb2F0OiBib29sZWFuID0gZmFsc2U7XG4gIGlzRm9vdG5vdGU6IGJvb2xlYW4gPSBmYWxzZTtcbiAgc3RhcnRFZGdlOiBudW1iZXIgPSAwO1xuICBlbmRFZGdlOiBudW1iZXIgPSAwO1xuICBiZWZvcmVFZGdlOiBudW1iZXIgPSAwO1xuICBhZnRlckVkZ2U6IG51bWJlciA9IDA7XG4gIGZvb3Rub3RlRWRnZTogbnVtYmVyID0gMDtcbiAgYm94OiBHZW9tZXRyeVV0aWwuUmVjdCA9IG51bGw7XG4gIGNodW5rUG9zaXRpb25zOiBWdHJlZS5DaHVua1Bvc2l0aW9uW10gPSBudWxsO1xuICBiYW5kczogR2VvbWV0cnlVdGlsLkJhbmRbXSA9IG51bGw7XG4gIG92ZXJmbG93bjogYm9vbGVhbiA9IGZhbHNlO1xuICBicmVha1Bvc2l0aW9uczogQnJlYWtQb3NpdGlvbi5CcmVha1Bvc2l0aW9uW10gPSBudWxsO1xuICBwYWdlQnJlYWtUeXBlOiBzdHJpbmcgfCBudWxsID0gbnVsbDtcbiAgZm9yY2VOb25maXR0aW5nOiBib29sZWFuID0gdHJ1ZTtcbiAgbGVmdEZsb2F0RWRnZTogbnVtYmVyID0gMDsgLy8gYm90dG9tIG9mIHRoZSBib3R0b21tb3N0IGxlZnQgZmxvYXRcbiAgcmlnaHRGbG9hdEVkZ2U6IG51bWJlciA9IDA7IC8vIGJvdHRvbSBvZiB0aGUgYm90dG9tbW9zdCByaWdodCBmbG9hdFxuICBib3R0b21tb3N0RmxvYXRUb3A6IG51bWJlciA9IDA7IC8vIFRvcCBvZiB0aGUgYm90dG9tbW9zdCBmbG9hdFxuICBzdG9wQXRPdmVyZmxvdzogYm9vbGVhbiA9IHRydWU7XG4gIGxhc3RBZnRlclBvc2l0aW9uOiBWdHJlZS5Ob2RlUG9zaXRpb24gfCBudWxsID0gbnVsbDtcbiAgZnJhZ21lbnRMYXlvdXRDb25zdHJhaW50czogRnJhZ21lbnRMYXlvdXRDb25zdHJhaW50W10gPSBbXTtcbiAgcHNldWRvUGFyZW50OiBDb2x1bW4gPSBudWxsO1xuICBub2RlQ29udGV4dE92ZXJmbG93aW5nRHVlVG9SZXBldGl0aXZlRWxlbWVudHM6IFZ0cmVlLk5vZGVDb250ZXh0IHwgbnVsbCA9IG51bGw7XG4gIGJsb2NrRGlzdGFuY2VUb0Jsb2NrRW5kRmxvYXRzOiBudW1iZXIgPSBOYU47XG4gIGNvbXB1dGVkQmxvY2tTaXplOiBudW1iZXI7XG5cbiAgY29uc3RydWN0b3IoXG4gICAgZWxlbWVudDogRWxlbWVudCxcbiAgICBwdWJsaWMgbGF5b3V0Q29udGV4dDogVnRyZWUuTGF5b3V0Q29udGV4dCxcbiAgICBwdWJsaWMgY2xpZW50TGF5b3V0OiBWdHJlZS5DbGllbnRMYXlvdXQsXG4gICAgcHVibGljIHJlYWRvbmx5IGxheW91dENvbnN0cmFpbnQ6IExheW91dENvbnN0cmFpbnQsXG4gICAgcHVibGljIHJlYWRvbmx5IHBhZ2VGbG9hdExheW91dENvbnRleHQ6IFBhZ2VGbG9hdHMuUGFnZUZsb2F0TGF5b3V0Q29udGV4dCxcbiAgKSB7XG4gICAgc3VwZXIoZWxlbWVudCk7XG4gICAgdGhpcy5sYXN0ID0gZWxlbWVudC5sYXN0Q2hpbGQ7XG4gICAgdGhpcy52aWV3RG9jdW1lbnQgPSBlbGVtZW50Lm93bmVyRG9jdW1lbnQ7XG4gICAgcGFnZUZsb2F0TGF5b3V0Q29udGV4dC5zZXRDb250YWluZXIodGhpcyk7XG4gIH1cblxuICBnZXRUb3BFZGdlKCk6IG51bWJlciB7XG4gICAgcmV0dXJuIHRoaXMudmVydGljYWwgPyB0aGlzLnN0YXJ0RWRnZSA6IHRoaXMuYmVmb3JlRWRnZTtcbiAgfVxuXG4gIGdldEJvdHRvbUVkZ2UoKTogbnVtYmVyIHtcbiAgICByZXR1cm4gdGhpcy52ZXJ0aWNhbCA/IHRoaXMuZW5kRWRnZSA6IHRoaXMuYWZ0ZXJFZGdlO1xuICB9XG5cbiAgZ2V0TGVmdEVkZ2UoKTogbnVtYmVyIHtcbiAgICByZXR1cm4gdGhpcy52ZXJ0aWNhbCA/IHRoaXMuYWZ0ZXJFZGdlIDogdGhpcy5zdGFydEVkZ2U7XG4gIH1cblxuICBnZXRSaWdodEVkZ2UoKTogbnVtYmVyIHtcbiAgICByZXR1cm4gdGhpcy52ZXJ0aWNhbCA/IHRoaXMuYmVmb3JlRWRnZSA6IHRoaXMuZW5kRWRnZTtcbiAgfVxuXG4gIGlzRmxvYXROb2RlQ29udGV4dChub2RlQ29udGV4dDogVnRyZWUuTm9kZUNvbnRleHQpOiBib29sZWFuIHtcbiAgICByZXR1cm4gISFub2RlQ29udGV4dC5mbG9hdFNpZGUgJiYgKCF0aGlzLmlzRmxvYXQgfHwgISFub2RlQ29udGV4dC5wYXJlbnQpO1xuICB9XG5cbiAgc3RvcEJ5T3ZlcmZsb3cobm9kZUNvbnRleHQ6IFZ0cmVlLk5vZGVDb250ZXh0KTogYm9vbGVhbiB7XG4gICAgcmV0dXJuIHRoaXMuc3RvcEF0T3ZlcmZsb3cgJiYgISFub2RlQ29udGV4dCAmJiBub2RlQ29udGV4dC5vdmVyZmxvdztcbiAgfVxuXG4gIGlzT3ZlcmZsb3duKGVkZ2U6IG51bWJlcik6IGJvb2xlYW4ge1xuICAgIGlmICh0aGlzLnZlcnRpY2FsKSB7XG4gICAgICByZXR1cm4gZWRnZSA8IHRoaXMuZm9vdG5vdGVFZGdlO1xuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gZWRnZSA+IHRoaXMuZm9vdG5vdGVFZGdlO1xuICAgIH1cbiAgfVxuXG4gIGdldEV4Y2x1c2lvbnMoKTogR2VvbWV0cnlVdGlsLlNoYXBlW10ge1xuICAgIGNvbnN0IHBhZ2VGbG9hdEV4Y2x1c2lvbnMgPSB0aGlzLnBhZ2VGbG9hdExheW91dENvbnRleHQuZ2V0RmxvYXRGcmFnbWVudEV4Y2x1c2lvbnMoKTtcbiAgICByZXR1cm4gdGhpcy5leGNsdXNpb25zLmNvbmNhdChwYWdlRmxvYXRFeGNsdXNpb25zKTtcbiAgfVxuXG4gIG9wZW5BbGxWaWV3cyhwb3NpdGlvbjogVnRyZWUuTm9kZVBvc2l0aW9uKTogVGFzay5SZXN1bHQ8VnRyZWUuTm9kZUNvbnRleHQ+IHtcbiAgICBjb25zdCBmcmFtZTogVGFzay5GcmFtZTxWdHJlZS5Ob2RlQ29udGV4dD4gPSBUYXNrLm5ld0ZyYW1lKFwib3BlbkFsbFZpZXdzXCIpO1xuICAgIGNvbnN0IHN0ZXBzID0gcG9zaXRpb24uc3RlcHM7XG4gICAgdGhpcy5sYXlvdXRDb250ZXh0LnNldFZpZXdSb290KHRoaXMuZWxlbWVudCwgdGhpcy5pc0Zvb3Rub3RlKTtcbiAgICBsZXQgc3RlcEluZGV4ID0gc3RlcHMubGVuZ3RoIC0gMTtcbiAgICBsZXQgbm9kZUNvbnRleHQ6IFZ0cmVlLk5vZGVDb250ZXh0ID0gbnVsbDtcbiAgICBmcmFtZVxuICAgICAgLmxvb3AoKCkgPT4ge1xuICAgICAgICB3aGlsZSAoc3RlcEluZGV4ID49IDApIHtcbiAgICAgICAgICBjb25zdCBwcmV2Q29udGV4dCA9IG5vZGVDb250ZXh0O1xuICAgICAgICAgIGNvbnN0IHN0ZXAgPSBzdGVwc1tzdGVwSW5kZXhdO1xuICAgICAgICAgIG5vZGVDb250ZXh0ID0gVnRyZWVJbXBsLm1ha2VOb2RlQ29udGV4dEZyb21Ob2RlUG9zaXRpb25TdGVwKFxuICAgICAgICAgICAgc3RlcCxcbiAgICAgICAgICAgIHByZXZDb250ZXh0LFxuICAgICAgICAgICk7XG4gICAgICAgICAgaWYgKFxuICAgICAgICAgICAgc3RlcEluZGV4ID09PSBzdGVwcy5sZW5ndGggLSAxICYmXG4gICAgICAgICAgICAhbm9kZUNvbnRleHQuZm9ybWF0dGluZ0NvbnRleHRcbiAgICAgICAgICApIHtcbiAgICAgICAgICAgIG5vZGVDb250ZXh0LmZvcm1hdHRpbmdDb250ZXh0ID0gdGhpcy5mbG93Um9vdEZvcm1hdHRpbmdDb250ZXh0O1xuICAgICAgICAgIH1cbiAgICAgICAgICBpZiAoc3RlcEluZGV4ID09IDApIHtcbiAgICAgICAgICAgIG5vZGVDb250ZXh0Lm9mZnNldEluTm9kZSA9IHRoaXMuY2FsY3VsYXRlT2Zmc2V0SW5Ob2RlRm9yTm9kZUNvbnRleHQoXG4gICAgICAgICAgICAgIHBvc2l0aW9uLFxuICAgICAgICAgICAgKTtcbiAgICAgICAgICAgIG5vZGVDb250ZXh0LmFmdGVyID0gcG9zaXRpb24uYWZ0ZXI7XG4gICAgICAgICAgICBub2RlQ29udGV4dC5wcmVwcm9jZXNzZWRUZXh0Q29udGVudCA9XG4gICAgICAgICAgICAgIHBvc2l0aW9uLnByZXByb2Nlc3NlZFRleHRDb250ZW50O1xuICAgICAgICAgICAgaWYgKG5vZGVDb250ZXh0LmFmdGVyKSB7XG4gICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgICBjb25zdCByID0gdGhpcy5sYXlvdXRDb250ZXh0LnNldEN1cnJlbnQoXG4gICAgICAgICAgICBub2RlQ29udGV4dCxcbiAgICAgICAgICAgIHN0ZXBJbmRleCA9PSAwICYmIG5vZGVDb250ZXh0Lm9mZnNldEluTm9kZSA9PSAwLFxuICAgICAgICAgICk7XG4gICAgICAgICAgc3RlcEluZGV4LS07XG4gICAgICAgICAgaWYgKHIuaXNQZW5kaW5nKCkpIHtcbiAgICAgICAgICAgIHJldHVybiByO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gVGFzay5uZXdSZXN1bHQoZmFsc2UpO1xuICAgICAgfSlcbiAgICAgIC50aGVuKCgpID0+IHtcbiAgICAgICAgQXNzZXJ0cy5hc3NlcnQobm9kZUNvbnRleHQpO1xuICAgICAgICBmcmFtZS5maW5pc2gobm9kZUNvbnRleHQpO1xuICAgICAgfSk7XG4gICAgcmV0dXJuIGZyYW1lLnJlc3VsdCgpO1xuICB9XG5cbiAgY2FsY3VsYXRlT2Zmc2V0SW5Ob2RlRm9yTm9kZUNvbnRleHQocG9zaXRpb246IFZ0cmVlLk5vZGVQb3NpdGlvbik6IG51bWJlciB7XG4gICAgcmV0dXJuIHBvc2l0aW9uLnByZXByb2Nlc3NlZFRleHRDb250ZW50XG4gICAgICA/IERpZmYucmVzb2x2ZU5ld0luZGV4KFxuICAgICAgICAgIHBvc2l0aW9uLnByZXByb2Nlc3NlZFRleHRDb250ZW50LFxuICAgICAgICAgIHBvc2l0aW9uLm9mZnNldEluTm9kZSxcbiAgICAgICAgKVxuICAgICAgOiBwb3NpdGlvbi5vZmZzZXRJbk5vZGU7XG4gIH1cblxuICAvKipcbiAgICogQHBhcmFtIGNvdW50IGZpcnN0LVhYWCBuZXN0aW5nIGlkZW50aWZpZXJcbiAgICovXG4gIG1heWJlUGVlbE9mZihcbiAgICBwb3NpdGlvbjogVnRyZWUuTm9kZUNvbnRleHQsXG4gICAgY291bnQ6IG51bWJlcixcbiAgKTogVGFzay5SZXN1bHQ8VnRyZWUuTm9kZUNvbnRleHQ+IHtcbiAgICBpZiAoXG4gICAgICBwb3NpdGlvbi5maXJzdFBzZXVkbyAmJlxuICAgICAgcG9zaXRpb24uaW5saW5lICYmXG4gICAgICAhcG9zaXRpb24uYWZ0ZXIgJiZcbiAgICAgIHBvc2l0aW9uLmZpcnN0UHNldWRvLmNvdW50ID09IDBcbiAgICApIHtcbiAgICAgIC8vIGZpcnN0IGNoYXJcbiAgICAgIGlmIChwb3NpdGlvbi52aWV3Tm9kZS5ub2RlVHlwZSAhPSAxKSB7XG4gICAgICAgIGNvbnN0IHRleHQgPSBwb3NpdGlvbi52aWV3Tm9kZS50ZXh0Q29udGVudDtcbiAgICAgICAgY29uc3QgciA9IHRleHQubWF0Y2goQmFzZS5maXJzdExldHRlclBhdHRlcm4pO1xuICAgICAgICByZXR1cm4gdGhpcy5sYXlvdXRDb250ZXh0LnBlZWxPZmYocG9zaXRpb24sIHIgPyByWzBdLmxlbmd0aCA6IDApO1xuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gVGFzay5uZXdSZXN1bHQocG9zaXRpb24pIGFzIFRhc2suUmVzdWx0PFZ0cmVlLk5vZGVDb250ZXh0PjtcbiAgfVxuXG4gIC8qKlxuICAgKiBCdWlsZHMgdGhlIHZpZXcgdW50aWwgYSBDU1MgYm94IGVkZ2UgaXMgcmVhY2hlZC5cbiAgICogQHBhcmFtIHBvc2l0aW9uIHN0YXJ0IHNvdXJjZSBwb3NpdGlvbi5cbiAgICogQHBhcmFtIGNoZWNrUG9pbnRzIGFycmF5IHRvIGFwcGVuZCBwb3NzaWJsZSBicmVha2luZyBwb2ludHMuXG4gICAqIEByZXR1cm4gaG9sZGluZyBib3ggZWRnZSBwb3NpdGlvbiByZWFjaGVkIG9yIG51bGwgaWYgdGhlIHNvdXJjZSBpcyBleGhhdXN0ZWQuXG4gICAqL1xuICBidWlsZFZpZXdUb05leHRCbG9ja0VkZ2UoXG4gICAgcG9zaXRpb246IFZ0cmVlLk5vZGVDb250ZXh0LFxuICAgIGNoZWNrUG9pbnRzOiBWdHJlZS5Ob2RlQ29udGV4dFtdLFxuICApOiBUYXNrLlJlc3VsdDxWdHJlZS5Ob2RlQ29udGV4dD4ge1xuICAgIGxldCB2aW9sYXRlQ29uc3RyYWludCA9IGZhbHNlO1xuICAgIGNvbnN0IGZyYW1lOiBUYXNrLkZyYW1lPFZ0cmVlLk5vZGVDb250ZXh0PiA9IFRhc2submV3RnJhbWUoXG4gICAgICBcImJ1aWxkVmlld1RvTmV4dEJsb2NrRWRnZVwiLFxuICAgICk7XG4gICAgZnJhbWVcbiAgICAgIC5sb29wV2l0aEZyYW1lKChib2R5RnJhbWUpID0+IHtcbiAgICAgICAgaWYgKHBvc2l0aW9uLnZpZXdOb2RlICYmICFMYXlvdXRIZWxwZXIuaXNTcGVjaWFsTm9kZUNvbnRleHQocG9zaXRpb24pKSB7XG4gICAgICAgICAgY2hlY2tQb2ludHMucHVzaChwb3NpdGlvbi5jb3B5KCkpO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMubWF5YmVQZWVsT2ZmKHBvc2l0aW9uLCAwKS50aGVuKChwb3NpdGlvbjFQYXJhbSkgPT4ge1xuICAgICAgICAgIGNvbnN0IHBvc2l0aW9uMSA9IHBvc2l0aW9uMVBhcmFtIGFzIFZ0cmVlLk5vZGVDb250ZXh0O1xuICAgICAgICAgIGlmIChwb3NpdGlvbjEgIT09IHBvc2l0aW9uKSB7XG4gICAgICAgICAgICBwb3NpdGlvbiA9IHBvc2l0aW9uMTtcbiAgICAgICAgICAgIGlmICghTGF5b3V0SGVscGVyLmlzU3BlY2lhbE5vZGVDb250ZXh0KHBvc2l0aW9uKSkge1xuICAgICAgICAgICAgICBjaGVja1BvaW50cy5wdXNoKHBvc2l0aW9uLmNvcHkoKSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICAgIHRoaXMubmV4dEluVHJlZShwb3NpdGlvbikudGhlbigocG9zaXRpb25QYXJhbSkgPT4ge1xuICAgICAgICAgICAgcG9zaXRpb24gPSBwb3NpdGlvblBhcmFtIGFzIFZ0cmVlLk5vZGVDb250ZXh0O1xuICAgICAgICAgICAgaWYgKCFwb3NpdGlvbikge1xuICAgICAgICAgICAgICAvLyBFeGl0IHRoZSBsb29wXG4gICAgICAgICAgICAgIGJvZHlGcmFtZS5icmVha0xvb3AoKTtcbiAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKFxuICAgICAgICAgICAgICB2aW9sYXRlQ29uc3RyYWludCB8fFxuICAgICAgICAgICAgICAhdGhpcy5sYXlvdXRDb25zdHJhaW50LmFsbG93TGF5b3V0KHBvc2l0aW9uKVxuICAgICAgICAgICAgKSB7XG4gICAgICAgICAgICAgIHZpb2xhdGVDb25zdHJhaW50ID0gdHJ1ZTtcbiAgICAgICAgICAgICAgcG9zaXRpb24gPSBwb3NpdGlvbi5tb2RpZnkoKTtcbiAgICAgICAgICAgICAgcG9zaXRpb24ub3ZlcmZsb3cgPSB0cnVlO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKHRoaXMuaXNGbG9hdE5vZGVDb250ZXh0KHBvc2l0aW9uKSAmJiAhdGhpcy52ZXJ0aWNhbCkge1xuICAgICAgICAgICAgICB0aGlzLmxheW91dEZsb2F0T3JGb290bm90ZShwb3NpdGlvbikudGhlbigocG9zaXRpb25QYXJhbSkgPT4ge1xuICAgICAgICAgICAgICAgIHBvc2l0aW9uID0gcG9zaXRpb25QYXJhbSBhcyBWdHJlZS5Ob2RlQ29udGV4dDtcbiAgICAgICAgICAgICAgICBpZiAodGhpcy5wYWdlRmxvYXRMYXlvdXRDb250ZXh0LmlzSW52YWxpZGF0ZWQoKSkge1xuICAgICAgICAgICAgICAgICAgcG9zaXRpb24gPSBudWxsO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBpZiAoIXBvc2l0aW9uKSB7XG4gICAgICAgICAgICAgICAgICBib2R5RnJhbWUuYnJlYWtMb29wKCk7XG4gICAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGJvZHlGcmFtZS5jb250aW51ZUxvb3AoKTtcbiAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKCFwb3NpdGlvbi5pbmxpbmUpIHtcbiAgICAgICAgICAgICAgLy8gRXhpdCB0aGUgbG9vcFxuICAgICAgICAgICAgICBib2R5RnJhbWUuYnJlYWtMb29wKCk7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAvLyBDb250aW51ZSB0aGUgbG9vcFxuICAgICAgICAgICAgICBib2R5RnJhbWUuY29udGludWVMb29wKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSk7XG4gICAgICAgIH0pO1xuICAgICAgfSlcbiAgICAgIC50aGVuKCgpID0+IHtcbiAgICAgICAgZnJhbWUuZmluaXNoKHBvc2l0aW9uKTtcbiAgICAgIH0pO1xuICAgIHJldHVybiBmcmFtZS5yZXN1bHQoKTtcbiAgfVxuXG4gIG5leHRJblRyZWUoXG4gICAgcG9zaXRpb246IFZ0cmVlLk5vZGVDb250ZXh0LFxuICAgIGF0VW5mb3JjZWRCcmVhaz86IGJvb2xlYW4sXG4gICk6IFRhc2suUmVzdWx0PFZ0cmVlLk5vZGVDb250ZXh0PiB7XG4gICAgY29uc3QgY29udCA9IHRoaXMubGF5b3V0Q29udGV4dC5uZXh0SW5UcmVlKHBvc2l0aW9uLCBhdFVuZm9yY2VkQnJlYWspO1xuICAgIHJldHVybiBwcm9jZXNzQWZ0ZXJJZkNvbnRpbnVlcyhjb250LCB0aGlzKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBCdWlsZHMgdGhlIHZpZXcgZm9yIGEgc2luZ2xlIHVuYnJlYWthYmxlIGVsZW1lbnQuXG4gICAqIEBwYXJhbSBwb3NpdGlvbiBzdGFydCBzb3VyY2UgcG9zaXRpb24uXG4gICAqIEByZXR1cm4gaG9sZGluZyBib3ggZWRnZSBwb3NpdGlvbiByZWFjaGVkIG9yIG51bGwgaWYgdGhlIHNvdXJjZSBpcyBleGhhdXN0ZWQuXG4gICAqL1xuICBidWlsZERlZXBFbGVtZW50VmlldyhcbiAgICBwb3NpdGlvbjogVnRyZWUuTm9kZUNvbnRleHQsXG4gICk6IFRhc2suUmVzdWx0PFZ0cmVlLk5vZGVDb250ZXh0PiB7XG4gICAgaWYgKCFwb3NpdGlvbi52aWV3Tm9kZSkge1xuICAgICAgcmV0dXJuIFRhc2submV3UmVzdWx0KHBvc2l0aW9uKTtcbiAgICB9XG4gICAgbGV0IGNoZWNrUG9pbnRzOiBWdHJlZS5Ob2RlQ29udGV4dFtdID0gW107XG4gICAgY29uc3Qgc291cmNlTm9kZSA9IHBvc2l0aW9uLnNvdXJjZU5vZGU7XG4gICAgY29uc3QgZnJhbWU6IFRhc2suRnJhbWU8VnRyZWUuTm9kZUNvbnRleHQ+ID0gVGFzay5uZXdGcmFtZShcbiAgICAgIFwiYnVpbGREZWVwRWxlbWVudFZpZXdcIixcbiAgICApO1xuXG4gICAgLy8gVE9ETzogZW5kIHRoZSBsb29wIGJhc2VkIG9uIGRlcHRoLCBub3Qgc291cmNlTm9kZSBjb21wYXJpc29uXG4gICAgZnJhbWVcbiAgICAgIC5sb29wV2l0aEZyYW1lKChib2R5RnJhbWUpID0+IHtcbiAgICAgICAgaWYgKFxuICAgICAgICAgIHBvc2l0aW9uLnZpZXdOb2RlICYmXG4gICAgICAgICAgcG9zaXRpb24uaW5saW5lICYmXG4gICAgICAgICAgIUxheW91dEhlbHBlci5pc1NwZWNpYWxOb2RlQ29udGV4dChwb3NpdGlvbilcbiAgICAgICAgKSB7XG4gICAgICAgICAgY2hlY2tQb2ludHMucHVzaChwb3NpdGlvbi5jb3B5KCkpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGlmIChjaGVja1BvaW50cy5sZW5ndGggPiAwKSB7XG4gICAgICAgICAgICB0aGlzLnBvc3RMYXlvdXRCbG9jayhwb3NpdGlvbiwgY2hlY2tQb2ludHMpO1xuICAgICAgICAgIH1cbiAgICAgICAgICBjaGVja1BvaW50cyA9IFtdO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMubWF5YmVQZWVsT2ZmKHBvc2l0aW9uLCAwKS50aGVuKChwb3NpdGlvbjFQYXJhbSkgPT4ge1xuICAgICAgICAgIGNvbnN0IHBvc2l0aW9uMSA9IHBvc2l0aW9uMVBhcmFtIGFzIFZ0cmVlLk5vZGVDb250ZXh0O1xuICAgICAgICAgIGlmIChwb3NpdGlvbjEgIT09IHBvc2l0aW9uKSB7XG4gICAgICAgICAgICBsZXQgcCA9IHBvc2l0aW9uMTtcbiAgICAgICAgICAgIHdoaWxlIChwICYmIHAuc291cmNlTm9kZSAhPSBzb3VyY2VOb2RlKSB7XG4gICAgICAgICAgICAgIHAgPSBwLnBhcmVudDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChwID09IG51bGwpIHtcbiAgICAgICAgICAgICAgLy8gb3V0c2lkZSBvZiB0aGUgc3VidHJlZVxuICAgICAgICAgICAgICBwb3NpdGlvbiA9IHBvc2l0aW9uMTtcbiAgICAgICAgICAgICAgYm9keUZyYW1lLmJyZWFrTG9vcCgpO1xuICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoIUxheW91dEhlbHBlci5pc1NwZWNpYWxOb2RlQ29udGV4dChwb3NpdGlvbjEpKSB7XG4gICAgICAgICAgICAgIGNoZWNrUG9pbnRzLnB1c2gocG9zaXRpb24xLmNvcHkoKSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICAgIHRoaXMubmV4dEluVHJlZShwb3NpdGlvbjEpLnRoZW4oKHBvc2l0aW9uUGFyYW0pID0+IHtcbiAgICAgICAgICAgIHBvc2l0aW9uID0gcG9zaXRpb25QYXJhbSBhcyBWdHJlZS5Ob2RlQ29udGV4dDtcbiAgICAgICAgICAgIGlmICghcG9zaXRpb24gfHwgcG9zaXRpb24uc291cmNlTm9kZSA9PSBzb3VyY2VOb2RlKSB7XG4gICAgICAgICAgICAgIGJvZHlGcmFtZS5icmVha0xvb3AoKTtcbiAgICAgICAgICAgIH0gZWxzZSBpZiAoIXRoaXMubGF5b3V0Q29uc3RyYWludC5hbGxvd0xheW91dChwb3NpdGlvbikpIHtcbiAgICAgICAgICAgICAgcG9zaXRpb24gPSBwb3NpdGlvbi5tb2RpZnkoKTtcbiAgICAgICAgICAgICAgcG9zaXRpb24ub3ZlcmZsb3cgPSB0cnVlO1xuICAgICAgICAgICAgICBpZiAodGhpcy5zdG9wQXRPdmVyZmxvdykge1xuICAgICAgICAgICAgICAgIGJvZHlGcmFtZS5icmVha0xvb3AoKTtcbiAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICBib2R5RnJhbWUuY29udGludWVMb29wKCk7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgIGJvZHlGcmFtZS5jb250aW51ZUxvb3AoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9KTtcbiAgICAgICAgfSk7XG4gICAgICB9KVxuICAgICAgLnRoZW4oKCkgPT4ge1xuICAgICAgICBpZiAoY2hlY2tQb2ludHMubGVuZ3RoID4gMCkge1xuICAgICAgICAgIHRoaXMucG9zdExheW91dEJsb2NrKHBvc2l0aW9uLCBjaGVja1BvaW50cyk7XG4gICAgICAgIH1cbiAgICAgICAgZnJhbWUuZmluaXNoKHBvc2l0aW9uKTtcbiAgICAgIH0pO1xuICAgIHJldHVybiBmcmFtZS5yZXN1bHQoKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBDcmVhdGUgYSBzaW5nbGUgZmxvYXRpbmcgZWxlbWVudCAoZm9yIGV4Y2x1c2lvbiBhcmVhcykuXG4gICAqIEBwYXJhbSByZWYgY29udGFpbmVyJ3MgY2hpbGQgdG8gaW5zZXJ0IGZsb2F0IGJlZm9yZSAoY2FuIGJlIG51bGwpLlxuICAgKiBAcGFyYW0gc2lkZSBmbG9hdCBzaWRlIChcImxlZnRcIiBvciBcInJpZ2h0XCIpLlxuICAgKiBAcGFyYW0gd2lkdGggZmxvYXQgaW5saW5lIGRpbWVuc2lvbi5cbiAgICogQHBhcmFtIGhlaWdodCBmbG9hdCBib3ggcHJvZ3Jlc3Npb24gZGltZW5zaW9uLlxuICAgKiBAcmV0dXJuIG5ld2x5IGNyZWF0ZWQgZmxvYXQgZWxlbWVudC5cbiAgICovXG4gIGNyZWF0ZUZsb2F0KHJlZjogTm9kZSwgc2lkZTogc3RyaW5nLCB3aWR0aDogbnVtYmVyLCBoZWlnaHQ6IG51bWJlcik6IEVsZW1lbnQge1xuICAgIGNvbnN0IGRpdiA9IHRoaXMudmlld0RvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIik7XG4gICAgaWYgKHRoaXMudmVydGljYWwpIHtcbiAgICAgIGlmIChoZWlnaHQgPj0gdGhpcy5oZWlnaHQpIHtcbiAgICAgICAgaGVpZ2h0IC09IDAuMTtcbiAgICAgIH1cbiAgICAgIEJhc2Uuc2V0Q1NTUHJvcGVydHkoZGl2LCBcImhlaWdodFwiLCBgJHt3aWR0aH1weGApO1xuICAgICAgQmFzZS5zZXRDU1NQcm9wZXJ0eShkaXYsIFwid2lkdGhcIiwgYCR7aGVpZ2h0fXB4YCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGlmICh3aWR0aCA+PSB0aGlzLndpZHRoKSB7XG4gICAgICAgIHdpZHRoIC09IDAuMTtcbiAgICAgIH1cbiAgICAgIEJhc2Uuc2V0Q1NTUHJvcGVydHkoZGl2LCBcIndpZHRoXCIsIGAke3dpZHRofXB4YCk7XG4gICAgICBCYXNlLnNldENTU1Byb3BlcnR5KGRpdiwgXCJoZWlnaHRcIiwgYCR7aGVpZ2h0fXB4YCk7XG4gICAgfVxuICAgIEJhc2Uuc2V0Q1NTUHJvcGVydHkoZGl2LCBcImZsb2F0XCIsIHNpZGUpO1xuICAgIEJhc2Uuc2V0Q1NTUHJvcGVydHkoZGl2LCBcImNsZWFyXCIsIHNpZGUpO1xuXG4gICAgLy8gZW5hYmxlIHRvIHZpc3VhbGl6ZVxuICAgIC8vIEJhc2Uuc2V0Q1NTUHJvcGVydHkoZGl2LCBcImJhY2tncm91bmQtY29sb3JcIiwgXCIjNTBGMEZGXCIpO1xuICAgIHRoaXMuZWxlbWVudC5pbnNlcnRCZWZvcmUoZGl2LCByZWYpO1xuICAgIHJldHVybiBkaXY7XG4gIH1cblxuICAvKipcbiAgICogUmVtb3ZlIGFsbCB0aGUgZXhjbHVzaW9uIGZsb2F0cy5cbiAgICovXG4gIGtpbGxGbG9hdHMoKTogdm9pZCB7XG4gICAgbGV0IGM6IE5vZGUgPSB0aGlzLmVsZW1lbnQuZmlyc3RDaGlsZDtcbiAgICB3aGlsZSAoYykge1xuICAgICAgY29uc3QgbmMgPSBjLm5leHRTaWJsaW5nO1xuICAgICAgaWYgKGMubm9kZVR5cGUgPT0gMSkge1xuICAgICAgICBjb25zdCBlID0gYyBhcyBIVE1MRWxlbWVudDtcbiAgICAgICAgY29uc3QgZiA9IGUuc3R5bGUuY3NzRmxvYXQ7XG4gICAgICAgIGlmIChmID09IFwibGVmdFwiIHx8IGYgPT0gXCJyaWdodFwiKSB7XG4gICAgICAgICAgdGhpcy5lbGVtZW50LnJlbW92ZUNoaWxkKGUpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICBjID0gbmM7XG4gICAgfVxuICB9XG5cbiAgLyoqXG4gICAqIENyZWF0ZSBleGNsdXNpb24gZmxvYXRzIGZvciBhIGNvbHVtbi5cbiAgICovXG4gIGNyZWF0ZUZsb2F0cygpOiB2b2lkIHtcbiAgICBjb25zdCByZWYgPSB0aGlzLmVsZW1lbnQuZmlyc3RDaGlsZDtcbiAgICBjb25zdCBiYW5kcyA9IHRoaXMuYmFuZHM7XG4gICAgY29uc3QgeDEgPSB0aGlzLnZlcnRpY2FsID8gdGhpcy5nZXRUb3BFZGdlKCkgOiB0aGlzLmdldExlZnRFZGdlKCk7XG4gICAgY29uc3QgeDIgPSB0aGlzLnZlcnRpY2FsID8gdGhpcy5nZXRCb3R0b21FZGdlKCkgOiB0aGlzLmdldFJpZ2h0RWRnZSgpO1xuICAgIGZvciAoY29uc3QgYmFuZCBvZiBiYW5kcykge1xuICAgICAgY29uc3QgaGVpZ2h0ID0gYmFuZC55MiAtIGJhbmQueTE7XG4gICAgICBiYW5kLmxlZnQgPSB0aGlzLmNyZWF0ZUZsb2F0KHJlZiwgXCJsZWZ0XCIsIGJhbmQueDEgLSB4MSwgaGVpZ2h0KTtcbiAgICAgIGJhbmQucmlnaHQgPSB0aGlzLmNyZWF0ZUZsb2F0KHJlZiwgXCJyaWdodFwiLCB4MiAtIGJhbmQueDIsIGhlaWdodCk7XG4gICAgfVxuICB9XG5cbiAgLyoqXG4gICAqIEBwYXJhbSBub2RlQ29udGV4dCBwb3NpdGlvbiBhZnRlciB0aGUgYmxvY2tcbiAgICogQHBhcmFtIGNoZWNrUG9pbnRzIGFycmF5IG9mIHBvc3NpYmxlIGJyZWFraW5nIHBvaW50cy5cbiAgICogQHBhcmFtIGluZGV4IGluZGV4IG9mIHRoZSBicmVha2luZyBwb2ludFxuICAgKiBAcGFyYW0gYm94T2Zmc2V0IGJveCBvZmZzZXRcbiAgICogQHJldHVybiBlZGdlIHBvc2l0aW9uXG4gICAqL1xuICBjYWxjdWxhdGVFZGdlKFxuICAgIG5vZGVDb250ZXh0OiBWdHJlZS5Ob2RlQ29udGV4dCxcbiAgICBjaGVja1BvaW50czogVnRyZWUuTm9kZUNvbnRleHRbXSxcbiAgICBpbmRleDogbnVtYmVyLFxuICAgIGJveE9mZnNldDogbnVtYmVyLFxuICApOiBudW1iZXIge1xuICAgIGxldCBlZGdlOiBudW1iZXI7XG4gICAgaWYgKG5vZGVDb250ZXh0ICYmIExheW91dEhlbHBlci5pc09ycGhhbihub2RlQ29udGV4dC52aWV3Tm9kZSkpIHtcbiAgICAgIHJldHVybiBOYU47XG4gICAgfSBlbHNlIGlmIChub2RlQ29udGV4dCAmJiBub2RlQ29udGV4dC5hZnRlciAmJiAhbm9kZUNvbnRleHQuaW5saW5lKSB7XG4gICAgICBlZGdlID0gTGF5b3V0SGVscGVyLmNhbGN1bGF0ZUVkZ2UoXG4gICAgICAgIG5vZGVDb250ZXh0LFxuICAgICAgICB0aGlzLmNsaWVudExheW91dCxcbiAgICAgICAgMCxcbiAgICAgICAgdGhpcy52ZXJ0aWNhbCxcbiAgICAgICk7XG4gICAgICBpZiAoIWlzTmFOKGVkZ2UpKSB7XG4gICAgICAgIHJldHVybiBlZGdlO1xuICAgICAgfVxuICAgIH1cbiAgICBub2RlQ29udGV4dCA9IGNoZWNrUG9pbnRzW2luZGV4XTtcbiAgICBsZXQgb2Zmc2V0ID0gYm94T2Zmc2V0IC0gbm9kZUNvbnRleHQuYm94T2Zmc2V0O1xuICAgIHdoaWxlICh0cnVlKSB7XG4gICAgICBlZGdlID0gTGF5b3V0SGVscGVyLmNhbGN1bGF0ZUVkZ2UoXG4gICAgICAgIG5vZGVDb250ZXh0LFxuICAgICAgICB0aGlzLmNsaWVudExheW91dCxcbiAgICAgICAgb2Zmc2V0LFxuICAgICAgICB0aGlzLnZlcnRpY2FsLFxuICAgICAgKTtcbiAgICAgIGlmICghaXNOYU4oZWRnZSkpIHtcbiAgICAgICAgcmV0dXJuIGVkZ2U7XG4gICAgICB9XG4gICAgICBpZiAob2Zmc2V0ID4gMCkge1xuICAgICAgICBvZmZzZXQtLTtcbiAgICAgICAgY29udGludWU7XG4gICAgICB9XG4gICAgICBpbmRleC0tO1xuICAgICAgaWYgKGluZGV4IDwgMCkge1xuICAgICAgICByZXR1cm4gdGhpcy5iZWZvcmVFZGdlO1xuICAgICAgfVxuICAgICAgbm9kZUNvbnRleHQgPSBjaGVja1BvaW50c1tpbmRleF07XG4gICAgICBpZiAobm9kZUNvbnRleHQudmlld05vZGUubm9kZVR5cGUgIT0gMSkge1xuICAgICAgICBvZmZzZXQgPSBub2RlQ29udGV4dC52aWV3Tm9kZS50ZXh0Q29udGVudC5sZW5ndGg7XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgLyoqXG4gICAqIFBhcnNlIENTUyBjb21wdXRlZCBsZW5ndGggKGluIHBpeGVscylcbiAgICogQHBhcmFtIHZhbCBDU1MgbGVuZ3RoIGluIFwicHhcIiB1bml0cyBvciBhIG51bWJlci5cbiAgICogQHJldHVybiB2YWx1ZSBpbiBwaXhlbHMgb3IgMCBpZiBub3QgcGFyc2FibGVcbiAgICovXG4gIHBhcnNlQ29tcHV0ZWRMZW5ndGgodmFsOiBzdHJpbmcgfCBudW1iZXIpOiBudW1iZXIge1xuICAgIGlmICh0eXBlb2YgdmFsID09IFwibnVtYmVyXCIpIHtcbiAgICAgIHJldHVybiB2YWw7XG4gICAgfVxuICAgIGNvbnN0IHIgPSB2YWwubWF0Y2goL14oLT9bMC05XSooXFwuWzAtOV0qKT8pcHgkLyk7XG4gICAgaWYgKHIpIHtcbiAgICAgIHJldHVybiBwYXJzZUZsb2F0KHJbMF0pO1xuICAgIH1cbiAgICByZXR1cm4gMDtcbiAgfVxuXG4gIC8qKlxuICAgKiBSZWFkcyBlbGVtZW50J3MgY29tcHV0ZWQgQ1NTIG1hcmdpbi5cbiAgICovXG4gIGdldENvbXB1dGVkTWFyZ2luKGVsZW1lbnQ6IEVsZW1lbnQpOiBHZW9tZXRyeVV0aWwuSW5zZXRzIHtcbiAgICBjb25zdCBzdHlsZSA9IHRoaXMuY2xpZW50TGF5b3V0LmdldEVsZW1lbnRDb21wdXRlZFN0eWxlKGVsZW1lbnQpO1xuICAgIGNvbnN0IGluc2V0cyA9IG5ldyBHZW9tZXRyeVV0aWwuSW5zZXRzKDAsIDAsIDAsIDApO1xuICAgIGlmIChzdHlsZSkge1xuICAgICAgaW5zZXRzLmxlZnQgPSB0aGlzLnBhcnNlQ29tcHV0ZWRMZW5ndGgoc3R5bGUubWFyZ2luTGVmdCk7XG4gICAgICBpbnNldHMudG9wID0gdGhpcy5wYXJzZUNvbXB1dGVkTGVuZ3RoKHN0eWxlLm1hcmdpblRvcCk7XG4gICAgICBpbnNldHMucmlnaHQgPSB0aGlzLnBhcnNlQ29tcHV0ZWRMZW5ndGgoc3R5bGUubWFyZ2luUmlnaHQpO1xuICAgICAgaW5zZXRzLmJvdHRvbSA9IHRoaXMucGFyc2VDb21wdXRlZExlbmd0aChzdHlsZS5tYXJnaW5Cb3R0b20pO1xuICAgIH1cbiAgICByZXR1cm4gaW5zZXRzO1xuICB9XG5cbiAgLyoqXG4gICAqIFJlYWRzIGVsZW1lbnQncyBjb21wdXRlZCBwYWRkaW5nICsgYm9yZGVycy5cbiAgICovXG4gIGdldENvbXB1dGVkUGFkZGluZ0JvcmRlcihlbGVtZW50OiBFbGVtZW50KTogR2VvbWV0cnlVdGlsLkluc2V0cyB7XG4gICAgY29uc3Qgc3R5bGUgPSB0aGlzLmNsaWVudExheW91dC5nZXRFbGVtZW50Q29tcHV0ZWRTdHlsZShlbGVtZW50KTtcbiAgICBjb25zdCBpbnNldHMgPSBuZXcgR2VvbWV0cnlVdGlsLkluc2V0cygwLCAwLCAwLCAwKTtcbiAgICBpZiAoc3R5bGUpIHtcbiAgICAgIGluc2V0cy5sZWZ0ID1cbiAgICAgICAgdGhpcy5wYXJzZUNvbXB1dGVkTGVuZ3RoKHN0eWxlLmJvcmRlckxlZnRXaWR0aCkgK1xuICAgICAgICB0aGlzLnBhcnNlQ29tcHV0ZWRMZW5ndGgoc3R5bGUucGFkZGluZ0xlZnQpO1xuICAgICAgaW5zZXRzLnRvcCA9XG4gICAgICAgIHRoaXMucGFyc2VDb21wdXRlZExlbmd0aChzdHlsZS5ib3JkZXJUb3BXaWR0aCkgK1xuICAgICAgICB0aGlzLnBhcnNlQ29tcHV0ZWRMZW5ndGgoc3R5bGUucGFkZGluZ1RvcCk7XG4gICAgICBpbnNldHMucmlnaHQgPVxuICAgICAgICB0aGlzLnBhcnNlQ29tcHV0ZWRMZW5ndGgoc3R5bGUuYm9yZGVyUmlnaHRXaWR0aCkgK1xuICAgICAgICB0aGlzLnBhcnNlQ29tcHV0ZWRMZW5ndGgoc3R5bGUucGFkZGluZ1JpZ2h0KTtcbiAgICAgIGluc2V0cy5ib3R0b20gPVxuICAgICAgICB0aGlzLnBhcnNlQ29tcHV0ZWRMZW5ndGgoc3R5bGUuYm9yZGVyQm90dG9tV2lkdGgpICtcbiAgICAgICAgdGhpcy5wYXJzZUNvbXB1dGVkTGVuZ3RoKHN0eWxlLnBhZGRpbmdCb3R0b20pO1xuICAgIH1cbiAgICByZXR1cm4gaW5zZXRzO1xuICB9XG5cbiAgLyoqXG4gICAqIFJlYWRzIGVsZW1lbnQncyBjb21wdXRlZCBDU1MgaW5zZXRzKG1hcmdpbnMgKyBib3JkZXIgKyBwYWRkaW5nIG9yIG1hcmdpbnMgOlxuICAgKiBkZXBlbmRzIG9uIGJveC1zaXppbmcpXG4gICAqL1xuICBnZXRDb21wdXRlZEluc2V0cyhlbGVtZW50OiBFbGVtZW50KTogR2VvbWV0cnlVdGlsLkluc2V0cyB7XG4gICAgY29uc3Qgc3R5bGUgPSB0aGlzLmNsaWVudExheW91dC5nZXRFbGVtZW50Q29tcHV0ZWRTdHlsZShlbGVtZW50KTtcbiAgICBjb25zdCBpbnNldHMgPSBuZXcgR2VvbWV0cnlVdGlsLkluc2V0cygwLCAwLCAwLCAwKTtcbiAgICBpZiAoc3R5bGUpIHtcbiAgICAgIGlmIChzdHlsZS5ib3hTaXppbmcgPT0gXCJib3JkZXItYm94XCIpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuZ2V0Q29tcHV0ZWRNYXJnaW4oZWxlbWVudCk7XG4gICAgICB9XG4gICAgICBpbnNldHMubGVmdCA9XG4gICAgICAgIHRoaXMucGFyc2VDb21wdXRlZExlbmd0aChzdHlsZS5tYXJnaW5MZWZ0KSArXG4gICAgICAgIHRoaXMucGFyc2VDb21wdXRlZExlbmd0aChzdHlsZS5ib3JkZXJMZWZ0V2lkdGgpICtcbiAgICAgICAgdGhpcy5wYXJzZUNvbXB1dGVkTGVuZ3RoKHN0eWxlLnBhZGRpbmdMZWZ0KTtcbiAgICAgIGluc2V0cy50b3AgPVxuICAgICAgICB0aGlzLnBhcnNlQ29tcHV0ZWRMZW5ndGgoc3R5bGUubWFyZ2luVG9wKSArXG4gICAgICAgIHRoaXMucGFyc2VDb21wdXRlZExlbmd0aChzdHlsZS5ib3JkZXJUb3BXaWR0aCkgK1xuICAgICAgICB0aGlzLnBhcnNlQ29tcHV0ZWRMZW5ndGgoc3R5bGUucGFkZGluZ1RvcCk7XG4gICAgICBpbnNldHMucmlnaHQgPVxuICAgICAgICB0aGlzLnBhcnNlQ29tcHV0ZWRMZW5ndGgoc3R5bGUubWFyZ2luUmlnaHQpICtcbiAgICAgICAgdGhpcy5wYXJzZUNvbXB1dGVkTGVuZ3RoKHN0eWxlLmJvcmRlclJpZ2h0V2lkdGgpICtcbiAgICAgICAgdGhpcy5wYXJzZUNvbXB1dGVkTGVuZ3RoKHN0eWxlLnBhZGRpbmdSaWdodCk7XG4gICAgICBpbnNldHMuYm90dG9tID1cbiAgICAgICAgdGhpcy5wYXJzZUNvbXB1dGVkTGVuZ3RoKHN0eWxlLm1hcmdpbkJvdHRvbSkgK1xuICAgICAgICB0aGlzLnBhcnNlQ29tcHV0ZWRMZW5ndGgoc3R5bGUuYm9yZGVyQm90dG9tV2lkdGgpICtcbiAgICAgICAgdGhpcy5wYXJzZUNvbXB1dGVkTGVuZ3RoKHN0eWxlLnBhZGRpbmdCb3R0b20pO1xuICAgIH1cbiAgICByZXR1cm4gaW5zZXRzO1xuICB9XG5cbiAgLyoqXG4gICAqIFNldCBlbGVtZW50J3MgY29tcHV0ZWQgQ1NTIGluc2V0cyB0byBDb2x1bW4gQ29udGFpbmVyXG4gICAqL1xuICBzZXRDb21wdXRlZEluc2V0cyhlbGVtZW50OiBFbGVtZW50LCBjb250YWluZXI6IENvbHVtbikge1xuICAgIGNvbnN0IHN0eWxlID0gdGhpcy5jbGllbnRMYXlvdXQuZ2V0RWxlbWVudENvbXB1dGVkU3R5bGUoZWxlbWVudCk7XG4gICAgaWYgKHN0eWxlKSB7XG4gICAgICBjb250YWluZXIubWFyZ2luTGVmdCA9IHRoaXMucGFyc2VDb21wdXRlZExlbmd0aChzdHlsZS5tYXJnaW5MZWZ0KTtcbiAgICAgIGNvbnRhaW5lci5ib3JkZXJMZWZ0ID0gdGhpcy5wYXJzZUNvbXB1dGVkTGVuZ3RoKHN0eWxlLmJvcmRlckxlZnRXaWR0aCk7XG4gICAgICBjb250YWluZXIucGFkZGluZ0xlZnQgPSB0aGlzLnBhcnNlQ29tcHV0ZWRMZW5ndGgoc3R5bGUucGFkZGluZ0xlZnQpO1xuICAgICAgY29udGFpbmVyLm1hcmdpblRvcCA9IHRoaXMucGFyc2VDb21wdXRlZExlbmd0aChzdHlsZS5tYXJnaW5Ub3ApO1xuICAgICAgY29udGFpbmVyLmJvcmRlclRvcCA9IHRoaXMucGFyc2VDb21wdXRlZExlbmd0aChzdHlsZS5ib3JkZXJUb3BXaWR0aCk7XG4gICAgICBjb250YWluZXIucGFkZGluZ1RvcCA9IHRoaXMucGFyc2VDb21wdXRlZExlbmd0aChzdHlsZS5wYWRkaW5nVG9wKTtcbiAgICAgIGNvbnRhaW5lci5tYXJnaW5SaWdodCA9IHRoaXMucGFyc2VDb21wdXRlZExlbmd0aChzdHlsZS5tYXJnaW5SaWdodCk7XG4gICAgICBjb250YWluZXIuYm9yZGVyUmlnaHQgPSB0aGlzLnBhcnNlQ29tcHV0ZWRMZW5ndGgoc3R5bGUuYm9yZGVyUmlnaHRXaWR0aCk7XG4gICAgICBjb250YWluZXIucGFkZGluZ1JpZ2h0ID0gdGhpcy5wYXJzZUNvbXB1dGVkTGVuZ3RoKHN0eWxlLnBhZGRpbmdSaWdodCk7XG4gICAgICBjb250YWluZXIubWFyZ2luQm90dG9tID0gdGhpcy5wYXJzZUNvbXB1dGVkTGVuZ3RoKHN0eWxlLm1hcmdpbkJvdHRvbSk7XG4gICAgICBjb250YWluZXIuYm9yZGVyQm90dG9tID0gdGhpcy5wYXJzZUNvbXB1dGVkTGVuZ3RoKFxuICAgICAgICBzdHlsZS5ib3JkZXJCb3R0b21XaWR0aCxcbiAgICAgICk7XG4gICAgICBjb250YWluZXIucGFkZGluZ0JvdHRvbSA9IHRoaXMucGFyc2VDb21wdXRlZExlbmd0aChzdHlsZS5wYWRkaW5nQm90dG9tKTtcbiAgICB9XG4gIH1cblxuICAvKipcbiAgICogU2V0IGVsZW1lbnQncyBjb21wdXRlZCB3aWR0aCBhbmQgaGVpZ2h0IHRvIENvbHVtbiBDb250YWluZXJcbiAgICovXG4gIHNldENvbXB1dGVkV2lkdGhBbmRIZWlnaHQoZWxlbWVudDogRWxlbWVudCwgY29udGFpbmVyOiBDb2x1bW4pIHtcbiAgICBjb25zdCBzdHlsZSA9IHRoaXMuY2xpZW50TGF5b3V0LmdldEVsZW1lbnRDb21wdXRlZFN0eWxlKGVsZW1lbnQpO1xuICAgIGlmIChzdHlsZSkge1xuICAgICAgY29udGFpbmVyLndpZHRoID0gdGhpcy5wYXJzZUNvbXB1dGVkTGVuZ3RoKHN0eWxlLndpZHRoKTtcbiAgICAgIGNvbnRhaW5lci5oZWlnaHQgPSB0aGlzLnBhcnNlQ29tcHV0ZWRMZW5ndGgoc3R5bGUuaGVpZ2h0KTtcbiAgICB9XG4gIH1cblxuICAvKipcbiAgICogTGF5b3V0IGEgc2luZ2xlIHVuYnJlYWthYmxlIGVsZW1lbnQuXG4gICAqL1xuICBsYXlvdXRVbmJyZWFrYWJsZShcbiAgICBub2RlQ29udGV4dEluOiBWdHJlZS5Ob2RlQ29udGV4dCxcbiAgKTogVGFzay5SZXN1bHQ8VnRyZWUuTm9kZUNvbnRleHQ+IHtcbiAgICByZXR1cm4gdGhpcy5idWlsZERlZXBFbGVtZW50Vmlldyhub2RlQ29udGV4dEluKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBMYXlvdXQgYSBzaW5nbGUgZmxvYXQgZWxlbWVudC5cbiAgICovXG4gIGxheW91dEZsb2F0KG5vZGVDb250ZXh0OiBWdHJlZS5Ob2RlQ29udGV4dCk6IFRhc2suUmVzdWx0PFZ0cmVlLk5vZGVDb250ZXh0PiB7XG4gICAgY29uc3QgZnJhbWU6IFRhc2suRnJhbWU8VnRyZWUuTm9kZUNvbnRleHQ+ID0gVGFzay5uZXdGcmFtZShcImxheW91dEZsb2F0XCIpO1xuICAgIGNvbnN0IGVsZW1lbnQgPSBub2RlQ29udGV4dC52aWV3Tm9kZSBhcyBFbGVtZW50O1xuICAgIGNvbnN0IGZsb2F0U2lkZSA9IG5vZGVDb250ZXh0LmZsb2F0U2lkZSBhcyBzdHJpbmc7XG4gICAgQmFzZS5zZXRDU1NQcm9wZXJ0eShlbGVtZW50LCBcImZsb2F0XCIsIFwibm9uZVwiKTtcbiAgICBCYXNlLnNldENTU1Byb3BlcnR5KGVsZW1lbnQsIFwiZGlzcGxheVwiLCBcImlubGluZS1ibG9ja1wiKTtcbiAgICBCYXNlLnNldENTU1Byb3BlcnR5KGVsZW1lbnQsIFwidmVydGljYWwtYWxpZ25cIiwgXCJ0b3BcIik7XG4gICAgdGhpcy5idWlsZERlZXBFbGVtZW50Vmlldyhub2RlQ29udGV4dCkudGhlbigobm9kZUNvbnRleHRBZnRlcikgPT4ge1xuICAgICAgY29uc3QgZmxvYXRCQm94ID0gdGhpcy5jbGllbnRMYXlvdXQuZ2V0RWxlbWVudENsaWVudFJlY3QoZWxlbWVudCk7XG4gICAgICBjb25zdCBtYXJnaW4gPSB0aGlzLmdldENvbXB1dGVkTWFyZ2luKGVsZW1lbnQpO1xuICAgICAgbGV0IGZsb2F0Qm94ID0gbmV3IEdlb21ldHJ5VXRpbC5SZWN0KFxuICAgICAgICBmbG9hdEJCb3gubGVmdCAtIG1hcmdpbi5sZWZ0LFxuICAgICAgICBmbG9hdEJCb3gudG9wIC0gbWFyZ2luLnRvcCxcbiAgICAgICAgZmxvYXRCQm94LnJpZ2h0ICsgbWFyZ2luLnJpZ2h0LFxuICAgICAgICBmbG9hdEJCb3guYm90dG9tICsgbWFyZ2luLmJvdHRvbSxcbiAgICAgICk7XG4gICAgICBsZXQgeDEgPSB0aGlzLnN0YXJ0RWRnZTtcbiAgICAgIGxldCB4MiA9IHRoaXMuZW5kRWRnZTtcbiAgICAgIGxldCBwYXJlbnQgPSBub2RlQ29udGV4dC5wYXJlbnQ7XG4gICAgICB3aGlsZSAocGFyZW50ICYmIHBhcmVudC5pbmxpbmUpIHtcbiAgICAgICAgcGFyZW50ID0gcGFyZW50LnBhcmVudDtcbiAgICAgIH1cbiAgICAgIGlmIChwYXJlbnQpIHtcbiAgICAgICAgLy8gUG9zaXRpb24gaXQgYXQgdGhlIHBhcmVudCBlbGVtZW50J3MgZWRnZS5cbiAgICAgICAgLy8gV2UgbmVlZCB0byBnZXQgdGhlIGVkZ2Ugb2YgdGhlIHBhcmVudCdzIGNvbnRlbnQgYXJlYSwgY2FsbGluZ1xuICAgICAgICAvLyBnZXRFbGVtZW50Q2xpZW50UmVjdCB3aWxsIGFsc28gZ2l2ZSB1cyBib3JkZXJzLiBBdm9pZCBpdCBieSBjcmVhdGluZ1xuICAgICAgICAvLyBhIHRlbXBvcmFyeSBlbGVtZW50IGFuZCB1c2luZyBpdCBmb3IgbWVhc3VybWVudC5cbiAgICAgICAgY29uc3QgcHJvYmUgPSBwYXJlbnQudmlld05vZGUub3duZXJEb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiZGl2XCIpO1xuICAgICAgICBwcm9iZS5zdHlsZS5sZWZ0ID0gXCIwcHhcIjtcbiAgICAgICAgcHJvYmUuc3R5bGUudG9wID0gXCIwcHhcIjtcbiAgICAgICAgaWYgKHRoaXMudmVydGljYWwpIHtcbiAgICAgICAgICBwcm9iZS5zdHlsZS5ib3R0b20gPSBcIjBweFwiO1xuICAgICAgICAgIHByb2JlLnN0eWxlLndpZHRoID0gXCIxcHhcIjtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBwcm9iZS5zdHlsZS5yaWdodCA9IFwiMHB4XCI7XG4gICAgICAgICAgcHJvYmUuc3R5bGUuaGVpZ2h0ID0gXCIxcHhcIjtcbiAgICAgICAgfVxuICAgICAgICBwYXJlbnQudmlld05vZGUuYXBwZW5kQ2hpbGQocHJvYmUpO1xuICAgICAgICBjb25zdCBwYXJlbnRCb3ggPSB0aGlzLmNsaWVudExheW91dC5nZXRFbGVtZW50Q2xpZW50UmVjdChwcm9iZSk7XG4gICAgICAgIHgxID0gTWF0aC5tYXgodGhpcy5nZXRTdGFydEVkZ2UocGFyZW50Qm94KSwgeDEpO1xuICAgICAgICB4MiA9IE1hdGgubWluKHRoaXMuZ2V0RW5kRWRnZShwYXJlbnRCb3gpLCB4Mik7XG4gICAgICAgIHBhcmVudC52aWV3Tm9kZS5yZW1vdmVDaGlsZChwcm9iZSk7XG4gICAgICAgIGNvbnN0IGZsb2F0Qm94TWVhc3VyZSA9IHRoaXMudmVydGljYWxcbiAgICAgICAgICA/IGZsb2F0Qm94LnkyIC0gZmxvYXRCb3gueTFcbiAgICAgICAgICA6IGZsb2F0Qm94LngyIC0gZmxvYXRCb3gueDE7XG4gICAgICAgIGlmIChmbG9hdFNpZGUgPT0gXCJsZWZ0XCIpIHtcbiAgICAgICAgICB4MiA9IE1hdGgubWF4KHgyLCB4MSArIGZsb2F0Qm94TWVhc3VyZSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgeDEgPSBNYXRoLm1pbih4MSwgeDIgLSBmbG9hdEJveE1lYXN1cmUpO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gTW92ZSB0aGUgZmxvYXQgYmVsb3cgdGhlIGJsb2NrIHBhcmVudC5cbiAgICAgICAgLy8gT3RoZXJ3aXNlLCBpZiB0aGUgZmxvYXQgaXMgYXR0YWNoZWQgdG8gYW4gaW5saW5lIGJveCB3aXRoICdwb3NpdGlvbjpcbiAgICAgICAgLy8gcmVsYXRpdmUnLCB0aGUgYWJzb2x1dGUgcG9zaXRpb25pbmcgb2YgdGhlIGZsb2F0IGdldHMgYnJva2VuLCBzaW5jZVxuICAgICAgICAvLyB0aGUgaW5saW5lIHBhcmVudCBjYW4gYmUgcHVzaGVkIGhvcml6b250YWxseSBieSBleGNsdXNpb24gZmxvYXRzXG4gICAgICAgIC8vIGFmdGVyIHRoZSBsYXlvdXQgb2YgdGhlIGZsb2F0IGlzIGRvbmUuXG4gICAgICAgIHBhcmVudC52aWV3Tm9kZS5hcHBlbmRDaGlsZChub2RlQ29udGV4dC52aWV3Tm9kZSk7XG4gICAgICB9XG5cbiAgICAgIC8vIGJveCBpcyByb3RhdGVkIGZvciB2ZXJ0aWNhbCBvcmllbnRhdGlvblxuICAgICAgbGV0IGJveCA9IG5ldyBHZW9tZXRyeVV0aWwuUmVjdChcbiAgICAgICAgeDEsXG4gICAgICAgIHRoaXMuZ2V0Qm94RGlyKCkgKiB0aGlzLmJlZm9yZUVkZ2UsXG4gICAgICAgIHgyLFxuICAgICAgICB0aGlzLmdldEJveERpcigpICogdGhpcy5hZnRlckVkZ2UsXG4gICAgICApO1xuICAgICAgbGV0IGZsb2F0SG9yQm94ID0gZmxvYXRCb3g7XG4gICAgICBpZiAodGhpcy52ZXJ0aWNhbCkge1xuICAgICAgICBmbG9hdEhvckJveCA9IEdlb21ldHJ5VXRpbC5yb3RhdGVCb3goZmxvYXRCb3gpO1xuICAgICAgfVxuICAgICAgY29uc3QgZGlyID0gdGhpcy5nZXRCb3hEaXIoKTtcbiAgICAgIGlmIChmbG9hdEhvckJveC55MSA8IHRoaXMuYm90dG9tbW9zdEZsb2F0VG9wICogZGlyKSB7XG4gICAgICAgIGNvbnN0IGJveEV4dGVudCA9IGZsb2F0SG9yQm94LnkyIC0gZmxvYXRIb3JCb3gueTE7XG4gICAgICAgIGZsb2F0SG9yQm94LnkxID0gdGhpcy5ib3R0b21tb3N0RmxvYXRUb3AgKiBkaXI7XG4gICAgICAgIGZsb2F0SG9yQm94LnkyID0gZmxvYXRIb3JCb3gueTEgKyBib3hFeHRlbnQ7XG4gICAgICB9XG4gICAgICBHZW9tZXRyeVV0aWwucG9zaXRpb25GbG9hdChib3gsIHRoaXMuYmFuZHMsIGZsb2F0SG9yQm94LCBmbG9hdFNpZGUpO1xuICAgICAgaWYgKHRoaXMudmVydGljYWwpIHtcbiAgICAgICAgZmxvYXRCb3ggPSBHZW9tZXRyeVV0aWwudW5yb3RhdGVCb3goZmxvYXRIb3JCb3gpO1xuICAgICAgfVxuICAgICAgY29uc3QgaW5zZXRzID0gdGhpcy5nZXRDb21wdXRlZEluc2V0cyhlbGVtZW50KTtcbiAgICAgIEJhc2Uuc2V0Q1NTUHJvcGVydHkoXG4gICAgICAgIGVsZW1lbnQsXG4gICAgICAgIFwid2lkdGhcIixcbiAgICAgICAgYCR7ZmxvYXRCb3gueDIgLSBmbG9hdEJveC54MSAtIGluc2V0cy5sZWZ0IC0gaW5zZXRzLnJpZ2h0fXB4YCxcbiAgICAgICk7XG4gICAgICBCYXNlLnNldENTU1Byb3BlcnR5KFxuICAgICAgICBlbGVtZW50LFxuICAgICAgICBcImhlaWdodFwiLFxuICAgICAgICBgJHtmbG9hdEJveC55MiAtIGZsb2F0Qm94LnkxIC0gaW5zZXRzLnRvcCAtIGluc2V0cy5ib3R0b219cHhgLFxuICAgICAgKTtcbiAgICAgIEJhc2Uuc2V0Q1NTUHJvcGVydHkoZWxlbWVudCwgXCJwb3NpdGlvblwiLCBcImFic29sdXRlXCIpO1xuICAgICAgQXNzZXJ0cy5hc3NlcnQobm9kZUNvbnRleHQuZGlzcGxheSk7XG4gICAgICBCYXNlLnNldENTU1Byb3BlcnR5KGVsZW1lbnQsIFwiZGlzcGxheVwiLCBub2RlQ29udGV4dC5kaXNwbGF5KTtcbiAgICAgIGxldCBvZmZzZXRzO1xuICAgICAgbGV0IGNvbnRhaW5pbmdCbG9ja0ZvckFic29sdXRlOiBWdHJlZS5Ob2RlQ29udGV4dCA9IG51bGw7XG4gICAgICBpZiAocGFyZW50KSB7XG4gICAgICAgIGlmIChwYXJlbnQuY29udGFpbmluZ0Jsb2NrRm9yQWJzb2x1dGUpIHtcbiAgICAgICAgICBjb250YWluaW5nQmxvY2tGb3JBYnNvbHV0ZSA9IHBhcmVudDtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBjb250YWluaW5nQmxvY2tGb3JBYnNvbHV0ZSA9IHBhcmVudC5nZXRDb250YWluaW5nQmxvY2tGb3JBYnNvbHV0ZSgpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICBpZiAoY29udGFpbmluZ0Jsb2NrRm9yQWJzb2x1dGUpIHtcbiAgICAgICAgY29uc3QgcHJvYmUgPSBjb250YWluaW5nQmxvY2tGb3JBYnNvbHV0ZS52aWV3Tm9kZS5vd25lckRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXG4gICAgICAgICAgXCJkaXZcIixcbiAgICAgICAgKTtcbiAgICAgICAgcHJvYmUuc3R5bGUucG9zaXRpb24gPSBcImFic29sdXRlXCI7XG4gICAgICAgIGlmIChjb250YWluaW5nQmxvY2tGb3JBYnNvbHV0ZS52ZXJ0aWNhbCkge1xuICAgICAgICAgIHByb2JlLnN0eWxlLnJpZ2h0ID0gXCIwXCI7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgcHJvYmUuc3R5bGUubGVmdCA9IFwiMFwiO1xuICAgICAgICB9XG4gICAgICAgIHByb2JlLnN0eWxlLnRvcCA9IFwiMFwiO1xuICAgICAgICBjb250YWluaW5nQmxvY2tGb3JBYnNvbHV0ZS52aWV3Tm9kZS5hcHBlbmRDaGlsZChwcm9iZSk7XG4gICAgICAgIG9mZnNldHMgPSB0aGlzLmNsaWVudExheW91dC5nZXRFbGVtZW50Q2xpZW50UmVjdChwcm9iZSk7XG4gICAgICAgIGNvbnRhaW5pbmdCbG9ja0ZvckFic29sdXRlLnZpZXdOb2RlLnJlbW92ZUNoaWxkKHByb2JlKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIG9mZnNldHMgPSB7XG4gICAgICAgICAgbGVmdDogdGhpcy5nZXRMZWZ0RWRnZSgpIC0gdGhpcy5wYWRkaW5nTGVmdCxcbiAgICAgICAgICByaWdodDogdGhpcy5nZXRSaWdodEVkZ2UoKSArIHRoaXMucGFkZGluZ1JpZ2h0LFxuICAgICAgICAgIHRvcDogdGhpcy5nZXRUb3BFZGdlKCkgLSB0aGlzLnBhZGRpbmdUb3AsXG4gICAgICAgIH07XG4gICAgICB9XG4gICAgICBpZiAoXG4gICAgICAgIGNvbnRhaW5pbmdCbG9ja0ZvckFic29sdXRlXG4gICAgICAgICAgPyBjb250YWluaW5nQmxvY2tGb3JBYnNvbHV0ZS52ZXJ0aWNhbFxuICAgICAgICAgIDogdGhpcy52ZXJ0aWNhbFxuICAgICAgKSB7XG4gICAgICAgIEJhc2Uuc2V0Q1NTUHJvcGVydHkoXG4gICAgICAgICAgZWxlbWVudCxcbiAgICAgICAgICBcInJpZ2h0XCIsXG4gICAgICAgICAgYCR7b2Zmc2V0cy5yaWdodCAtIGZsb2F0Qm94LngyfXB4YCxcbiAgICAgICAgKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIEJhc2Uuc2V0Q1NTUHJvcGVydHkoZWxlbWVudCwgXCJsZWZ0XCIsIGAke2Zsb2F0Qm94LngxIC0gb2Zmc2V0cy5sZWZ0fXB4YCk7XG4gICAgICB9XG4gICAgICBCYXNlLnNldENTU1Byb3BlcnR5KGVsZW1lbnQsIFwidG9wXCIsIGAke2Zsb2F0Qm94LnkxIC0gb2Zmc2V0cy50b3B9cHhgKTtcbiAgICAgIGlmIChub2RlQ29udGV4dC5jbGVhclNwYWNlcikge1xuICAgICAgICBub2RlQ29udGV4dC5jbGVhclNwYWNlci5wYXJlbnROb2RlLnJlbW92ZUNoaWxkKG5vZGVDb250ZXh0LmNsZWFyU3BhY2VyKTtcbiAgICAgICAgbm9kZUNvbnRleHQuY2xlYXJTcGFjZXIgPSBudWxsO1xuICAgICAgfVxuICAgICAgY29uc3QgZmxvYXRCb3hFZGdlID0gdGhpcy52ZXJ0aWNhbCA/IGZsb2F0Qm94LngxIDogZmxvYXRCb3gueTI7XG4gICAgICBjb25zdCBmbG9hdEJveFRvcCA9IHRoaXMudmVydGljYWwgPyBmbG9hdEJveC54MiA6IGZsb2F0Qm94LnkxO1xuXG4gICAgICAvLyBUT0RPOiBzdWJ0cmFjdCBhZnRlciBtYXJnaW4gd2hlbiBkZXRlcm1pbmluZyBvdmVyZmxvdy5cbiAgICAgIGlmICghdGhpcy5pc092ZXJmbG93bihmbG9hdEJveEVkZ2UpIHx8IHRoaXMuYnJlYWtQb3NpdGlvbnMubGVuZ3RoID09IDApIHtcbiAgICAgICAgLy8gbm8gb3ZlcmZsb3dcbiAgICAgICAgdGhpcy5raWxsRmxvYXRzKCk7XG4gICAgICAgIGJveCA9IG5ldyBHZW9tZXRyeVV0aWwuUmVjdChcbiAgICAgICAgICB0aGlzLmdldExlZnRFZGdlKCksXG4gICAgICAgICAgdGhpcy5nZXRUb3BFZGdlKCksXG4gICAgICAgICAgdGhpcy5nZXRSaWdodEVkZ2UoKSxcbiAgICAgICAgICB0aGlzLmdldEJvdHRvbUVkZ2UoKSxcbiAgICAgICAgKTtcbiAgICAgICAgaWYgKHRoaXMudmVydGljYWwpIHtcbiAgICAgICAgICBib3ggPSBHZW9tZXRyeVV0aWwucm90YXRlQm94KGJveCk7XG4gICAgICAgIH1cbiAgICAgICAgR2VvbWV0cnlVdGlsLmFkZEZsb2F0VG9CYW5kcyhcbiAgICAgICAgICBib3gsXG4gICAgICAgICAgdGhpcy5iYW5kcyxcbiAgICAgICAgICBmbG9hdEhvckJveCxcbiAgICAgICAgICBudWxsLFxuICAgICAgICAgIGZsb2F0U2lkZSxcbiAgICAgICAgKTtcbiAgICAgICAgdGhpcy5jcmVhdGVGbG9hdHMoKTtcbiAgICAgICAgaWYgKGZsb2F0U2lkZSA9PSBcImxlZnRcIikge1xuICAgICAgICAgIHRoaXMubGVmdEZsb2F0RWRnZSA9IGZsb2F0Qm94RWRnZTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICB0aGlzLnJpZ2h0RmxvYXRFZGdlID0gZmxvYXRCb3hFZGdlO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuYm90dG9tbW9zdEZsb2F0VG9wID0gZmxvYXRCb3hUb3A7XG4gICAgICAgIHRoaXMudXBkYXRlTWF4UmVhY2hlZEFmdGVyRWRnZShmbG9hdEJveEVkZ2UpO1xuICAgICAgICBmcmFtZS5maW5pc2gobm9kZUNvbnRleHRBZnRlcik7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBub2RlQ29udGV4dCA9IG5vZGVDb250ZXh0Lm1vZGlmeSgpO1xuICAgICAgICBub2RlQ29udGV4dC5vdmVyZmxvdyA9IHRydWU7XG4gICAgICAgIGZyYW1lLmZpbmlzaChub2RlQ29udGV4dCk7XG4gICAgICB9XG4gICAgfSk7XG4gICAgcmV0dXJuIGZyYW1lLnJlc3VsdCgpO1xuICB9XG5cbiAgc2V0dXBGbG9hdEFyZWEoXG4gICAgYXJlYTogUGFnZUZsb2F0QXJlYSxcbiAgICBmbG9hdFJlZmVyZW5jZTogUGFnZUZsb2F0cy5GbG9hdFJlZmVyZW5jZSxcbiAgICBmbG9hdFNpZGU6IHN0cmluZyxcbiAgICBhbmNob3JFZGdlOiBudW1iZXIgfCBudWxsLFxuICAgIHN0cmF0ZWd5OiBQYWdlRmxvYXRzLlBhZ2VGbG9hdExheW91dFN0cmF0ZWd5LFxuICAgIGNvbmRpdGlvbjogUGFnZUZsb2F0cy5QYWdlRmxvYXRQbGFjZW1lbnRDb25kaXRpb24sXG4gICk6IGJvb2xlYW4ge1xuICAgIGNvbnN0IGZsb2F0TGF5b3V0Q29udGV4dCA9IHRoaXMucGFnZUZsb2F0TGF5b3V0Q29udGV4dDtcbiAgICBjb25zdCBmbG9hdENvbnRhaW5lciA9IGZsb2F0TGF5b3V0Q29udGV4dC5nZXRDb250YWluZXIoZmxvYXRSZWZlcmVuY2UpO1xuICAgIGNvbnN0IGVsZW1lbnQgPSBhcmVhLmVsZW1lbnQ7XG4gICAgZmxvYXRDb250YWluZXIuZWxlbWVudC5wYXJlbnROb2RlLmFwcGVuZENoaWxkKGVsZW1lbnQpO1xuICAgIGFyZWEuaXNGbG9hdCA9IHRydWU7XG4gICAgYXJlYS5vcmlnaW5YID0gZmxvYXRDb250YWluZXIub3JpZ2luWDtcbiAgICBhcmVhLm9yaWdpblkgPSBmbG9hdENvbnRhaW5lci5vcmlnaW5ZO1xuICAgIGFyZWEudmVydGljYWwgPSBmbG9hdENvbnRhaW5lci52ZXJ0aWNhbDtcbiAgICBhcmVhLm1hcmdpbkxlZnQgPSBhcmVhLm1hcmdpblJpZ2h0ID0gYXJlYS5tYXJnaW5Ub3AgPSBhcmVhLm1hcmdpbkJvdHRvbSA9IDA7XG4gICAgYXJlYS5ib3JkZXJMZWZ0ID0gYXJlYS5ib3JkZXJSaWdodCA9IGFyZWEuYm9yZGVyVG9wID0gYXJlYS5ib3JkZXJCb3R0b20gPSAwO1xuICAgIGFyZWEucGFkZGluZ0xlZnQgPSBhcmVhLnBhZGRpbmdSaWdodCA9IGFyZWEucGFkZGluZ1RvcCA9IGFyZWEucGFkZGluZ0JvdHRvbSA9IDA7XG4gICAgYXJlYS5leGNsdXNpb25zID0gKGZsb2F0Q29udGFpbmVyLmV4Y2x1c2lvbnMgfHwgW10pLmNvbmNhdCgpO1xuICAgIGFyZWEuZm9yY2VOb25maXR0aW5nID0gIWZsb2F0TGF5b3V0Q29udGV4dC5oYXNGbG9hdEZyYWdtZW50cygpO1xuICAgIGFyZWEuaW5uZXJTaGFwZSA9IG51bGw7XG4gICAgY29uc3QgY29udGFpbmluZ0Jsb2NrUmVjdCA9IGZsb2F0Q29udGFpbmVyLmdldFBhZGRpbmdSZWN0KCk7XG4gICAgYXJlYS5zZXRIb3Jpem9udGFsUG9zaXRpb24oXG4gICAgICBjb250YWluaW5nQmxvY2tSZWN0LngxIC0gZmxvYXRDb250YWluZXIub3JpZ2luWCxcbiAgICAgIGNvbnRhaW5pbmdCbG9ja1JlY3QueDIgLSBjb250YWluaW5nQmxvY2tSZWN0LngxLFxuICAgICk7XG4gICAgYXJlYS5zZXRWZXJ0aWNhbFBvc2l0aW9uKFxuICAgICAgY29udGFpbmluZ0Jsb2NrUmVjdC55MSAtIGZsb2F0Q29udGFpbmVyLm9yaWdpblksXG4gICAgICBjb250YWluaW5nQmxvY2tSZWN0LnkyIC0gY29udGFpbmluZ0Jsb2NrUmVjdC55MSxcbiAgICApO1xuICAgIHN0cmF0ZWd5LmFkanVzdFBhZ2VGbG9hdEFyZWEoYXJlYSwgZmxvYXRDb250YWluZXIsIHRoaXMpO1xuXG4gICAgLy8gQ2FsY3VsYXRlIGJhbmRzIGZyb20gdGhlIGV4Y2x1c2lvbnMgYmVmb3JlIHNldHRpbmcgZmxvYXQgYXJlYSBkaW1lbnNpb25zXG4gICAgYXJlYS5pbml0KCk7XG4gICAgY29uc3QgZml0V2l0aGluQ29udGFpbmVyID0gISFmbG9hdExheW91dENvbnRleHQuc2V0RmxvYXRBcmVhRGltZW5zaW9ucyhcbiAgICAgIGFyZWEsXG4gICAgICBmbG9hdFJlZmVyZW5jZSxcbiAgICAgIGZsb2F0U2lkZSxcbiAgICAgIGFuY2hvckVkZ2UsXG4gICAgICB0cnVlLFxuICAgICAgIWZsb2F0TGF5b3V0Q29udGV4dC5oYXNGbG9hdEZyYWdtZW50cygpLFxuICAgICAgY29uZGl0aW9uLFxuICAgICk7XG4gICAgaWYgKGZpdFdpdGhpbkNvbnRhaW5lcikge1xuICAgICAgLy8gTmV3IGRpbWVuc2lvbnMgaGF2ZSBiZWVuIHNldCwgcmVtb3ZlIGV4Y2x1c2lvbiBmbG9hdHMgYW5kIHJlLWluaXRcbiAgICAgIGFyZWEua2lsbEZsb2F0cygpO1xuICAgICAgYXJlYS5pbml0KCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGZsb2F0Q29udGFpbmVyLmVsZW1lbnQucGFyZW50Tm9kZS5yZW1vdmVDaGlsZChlbGVtZW50KTtcbiAgICB9XG4gICAgcmV0dXJuIGZpdFdpdGhpbkNvbnRhaW5lcjtcbiAgfVxuXG4gIGNyZWF0ZVBhZ2VGbG9hdEFyZWEoXG4gICAgZmxvYXQ6IFBhZ2VGbG9hdHMuUGFnZUZsb2F0IHwgbnVsbCxcbiAgICBmbG9hdFNpZGU6IHN0cmluZyxcbiAgICBhbmNob3JFZGdlOiBudW1iZXIgfCBudWxsLFxuICAgIHN0cmF0ZWd5OiBQYWdlRmxvYXRzLlBhZ2VGbG9hdExheW91dFN0cmF0ZWd5LFxuICAgIGNvbmRpdGlvbjogUGFnZUZsb2F0cy5QYWdlRmxvYXRQbGFjZW1lbnRDb25kaXRpb24sXG4gICk6IFBhZ2VGbG9hdEFyZWEgfCBudWxsIHtcbiAgICBjb25zdCBmbG9hdEFyZWFFbGVtZW50ID0gdGhpcy5lbGVtZW50Lm93bmVyRG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImRpdlwiKTtcbiAgICBCYXNlLnNldENTU1Byb3BlcnR5KGZsb2F0QXJlYUVsZW1lbnQsIFwicG9zaXRpb25cIiwgXCJhYnNvbHV0ZVwiKTtcbiAgICBjb25zdCBwYXJlbnRQYWdlRmxvYXRMYXlvdXRDb250ZXh0ID0gdGhpcy5wYWdlRmxvYXRMYXlvdXRDb250ZXh0LmdldFBhZ2VGbG9hdExheW91dENvbnRleHQoXG4gICAgICBmbG9hdC5mbG9hdFJlZmVyZW5jZSxcbiAgICApO1xuXG4gICAgLy8gVE9ETzogZXN0YWJsaXNoIGhvdyB0byBzcGVjaWZ5IGFuIGFwcHJvcHJpYXRlIGdlbmVyYXRpbmcgZWxlbWVudCBmb3IgdGhlXG4gICAgLy8gbmV3IHBhZ2UgZmxvYXQgbGF5b3V0IGNvbnRleHRcbiAgICBjb25zdCBwYWdlRmxvYXRMYXlvdXRDb250ZXh0ID0gbmV3IFBhZ2VGbG9hdHMuUGFnZUZsb2F0TGF5b3V0Q29udGV4dChcbiAgICAgIG51bGwsXG4gICAgICBQYWdlRmxvYXRzLkZsb2F0UmVmZXJlbmNlLkNPTFVNTixcbiAgICAgIG51bGwsXG4gICAgICB0aGlzLnBhZ2VGbG9hdExheW91dENvbnRleHQuZmxvd05hbWUsXG4gICAgICBmbG9hdC5ub2RlUG9zaXRpb24sXG4gICAgICBudWxsLFxuICAgICAgbnVsbCxcbiAgICApO1xuICAgIGNvbnN0IHBhcmVudENvbnRhaW5lciA9IHBhcmVudFBhZ2VGbG9hdExheW91dENvbnRleHQuZ2V0Q29udGFpbmVyKCk7XG4gICAgY29uc3QgZmxvYXRBcmVhID0gbmV3IFBhZ2VGbG9hdEFyZWEoXG4gICAgICBmbG9hdFNpZGUsXG4gICAgICBmbG9hdEFyZWFFbGVtZW50LFxuICAgICAgdGhpcy5sYXlvdXRDb250ZXh0LmNsb25lKCksXG4gICAgICB0aGlzLmNsaWVudExheW91dCxcbiAgICAgIHRoaXMubGF5b3V0Q29uc3RyYWludCxcbiAgICAgIHBhZ2VGbG9hdExheW91dENvbnRleHQsXG4gICAgICBwYXJlbnRDb250YWluZXIsXG4gICAgKTtcbiAgICBwYWdlRmxvYXRMYXlvdXRDb250ZXh0LnNldENvbnRhaW5lcihmbG9hdEFyZWEpO1xuICAgIGlmIChcbiAgICAgIHRoaXMuc2V0dXBGbG9hdEFyZWEoXG4gICAgICAgIGZsb2F0QXJlYSxcbiAgICAgICAgZmxvYXQuZmxvYXRSZWZlcmVuY2UsXG4gICAgICAgIGZsb2F0U2lkZSxcbiAgICAgICAgYW5jaG9yRWRnZSxcbiAgICAgICAgc3RyYXRlZ3ksXG4gICAgICAgIGNvbmRpdGlvbixcbiAgICAgIClcbiAgICApIHtcbiAgICAgIHJldHVybiBmbG9hdEFyZWE7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiBudWxsO1xuICAgIH1cbiAgfVxuXG4gIGxheW91dFNpbmdsZVBhZ2VGbG9hdEZyYWdtZW50KFxuICAgIGNvbnRpbnVhdGlvbnM6IFBhZ2VGbG9hdHMuUGFnZUZsb2F0Q29udGludWF0aW9uW10sXG4gICAgZmxvYXRTaWRlOiBzdHJpbmcsXG4gICAgY2xlYXJTaWRlOiBzdHJpbmcgfCBudWxsLFxuICAgIGFsbG93RnJhZ21lbnRlZDogYm9vbGVhbixcbiAgICBzdHJhdGVneTogUGFnZUZsb2F0cy5QYWdlRmxvYXRMYXlvdXRTdHJhdGVneSxcbiAgICBhbmNob3JFZGdlOiBudW1iZXIgfCBudWxsLFxuICAgIHBhZ2VGbG9hdEZyYWdtZW50PzogUGFnZUZsb2F0cy5QYWdlRmxvYXRGcmFnbWVudCB8IG51bGwsXG4gICk6IFRhc2suUmVzdWx0PFNpbmdsZVBhZ2VGbG9hdExheW91dFJlc3VsdD4ge1xuICAgIGNvbnN0IGNvbnRleHQgPSB0aGlzLnBhZ2VGbG9hdExheW91dENvbnRleHQ7XG4gICAgY29uc3Qgb3JpZ2luYWxDb250aW51YXRpb25zID0gcGFnZUZsb2F0RnJhZ21lbnRcbiAgICAgID8gcGFnZUZsb2F0RnJhZ21lbnQuY29udGludWF0aW9uc1xuICAgICAgOiBbXTtcbiAgICBjb250aW51YXRpb25zID0gb3JpZ2luYWxDb250aW51YXRpb25zLmNvbmNhdChjb250aW51YXRpb25zKTtcbiAgICBjb25zdCBmaXJzdEZsb2F0ID0gY29udGludWF0aW9uc1swXS5mbG9hdDtcbiAgICBjb25zdCBjb25kaXRpb24gPSBjb250ZXh0LmdldFBhZ2VGbG9hdFBsYWNlbWVudENvbmRpdGlvbihcbiAgICAgIGZpcnN0RmxvYXQsXG4gICAgICBmbG9hdFNpZGUsXG4gICAgICBjbGVhclNpZGUsXG4gICAgKTtcbiAgICBjb25zdCBmbG9hdEFyZWEgPSB0aGlzLmNyZWF0ZVBhZ2VGbG9hdEFyZWEoXG4gICAgICBmaXJzdEZsb2F0LFxuICAgICAgZmxvYXRTaWRlLFxuICAgICAgYW5jaG9yRWRnZSxcbiAgICAgIHN0cmF0ZWd5LFxuICAgICAgY29uZGl0aW9uLFxuICAgICk7XG4gICAgY29uc3QgcmVzdWx0OiBTaW5nbGVQYWdlRmxvYXRMYXlvdXRSZXN1bHQgPSB7XG4gICAgICBmbG9hdEFyZWEsXG4gICAgICBwYWdlRmxvYXRGcmFnbWVudDogbnVsbCxcbiAgICAgIG5ld1Bvc2l0aW9uOiBudWxsLFxuICAgIH07XG4gICAgaWYgKCFmbG9hdEFyZWEpIHtcbiAgICAgIHJldHVybiBUYXNrLm5ld1Jlc3VsdChyZXN1bHQpO1xuICAgIH1cbiAgICBjb25zdCBmcmFtZSA9IFRhc2submV3RnJhbWU8U2luZ2xlUGFnZUZsb2F0TGF5b3V0UmVzdWx0PihcbiAgICAgIFwibGF5b3V0U2luZ2xlUGFnZUZsb2F0RnJhZ21lbnRcIixcbiAgICApO1xuICAgIGxldCBmYWlsZWQgPSBmYWxzZTtcbiAgICBsZXQgaSA9IDA7XG4gICAgZnJhbWVcbiAgICAgIC5sb29wV2l0aEZyYW1lKChsb29wRnJhbWUpID0+IHtcbiAgICAgICAgaWYgKGkgPj0gY29udGludWF0aW9ucy5sZW5ndGgpIHtcbiAgICAgICAgICBsb29wRnJhbWUuYnJlYWtMb29wKCk7XG4gICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IGMgPSBjb250aW51YXRpb25zW2ldO1xuICAgICAgICBjb25zdCBmbG9hdENodW5rUG9zaXRpb24gPSBuZXcgVnRyZWVJbXBsLkNodW5rUG9zaXRpb24oYy5ub2RlUG9zaXRpb24pO1xuICAgICAgICBmbG9hdEFyZWEubGF5b3V0KGZsb2F0Q2h1bmtQb3NpdGlvbiwgdHJ1ZSkudGhlbigobmV3UG9zaXRpb24pID0+IHtcbiAgICAgICAgICByZXN1bHQubmV3UG9zaXRpb24gPSBuZXdQb3NpdGlvbjtcbiAgICAgICAgICBpZiAoIW5ld1Bvc2l0aW9uIHx8IGFsbG93RnJhZ21lbnRlZCkge1xuICAgICAgICAgICAgaSsrO1xuICAgICAgICAgICAgbG9vcEZyYW1lLmNvbnRpbnVlTG9vcCgpO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBmYWlsZWQgPSB0cnVlO1xuICAgICAgICAgICAgbG9vcEZyYW1lLmJyZWFrTG9vcCgpO1xuICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgICB9KVxuICAgICAgLnRoZW4oKCkgPT4ge1xuICAgICAgICBpZiAoIWZhaWxlZCkge1xuICAgICAgICAgIEFzc2VydHMuYXNzZXJ0KGZsb2F0QXJlYSk7XG4gICAgICAgICAgY29uc3QgbG9naWNhbEZsb2F0U2lkZSA9IGNvbnRleHQuc2V0RmxvYXRBcmVhRGltZW5zaW9ucyhcbiAgICAgICAgICAgIGZsb2F0QXJlYSxcbiAgICAgICAgICAgIGZpcnN0RmxvYXQuZmxvYXRSZWZlcmVuY2UsXG4gICAgICAgICAgICBmbG9hdFNpZGUsXG4gICAgICAgICAgICBhbmNob3JFZGdlLFxuICAgICAgICAgICAgZmFsc2UsXG4gICAgICAgICAgICBhbGxvd0ZyYWdtZW50ZWQsXG4gICAgICAgICAgICBjb25kaXRpb24sXG4gICAgICAgICAgKTtcbiAgICAgICAgICBpZiAoIWxvZ2ljYWxGbG9hdFNpZGUpIHtcbiAgICAgICAgICAgIGZhaWxlZCA9IHRydWU7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGNvbnN0IG5ld0ZyYWdtZW50ID0gc3RyYXRlZ3kuY3JlYXRlUGFnZUZsb2F0RnJhZ21lbnQoXG4gICAgICAgICAgICAgIGNvbnRpbnVhdGlvbnMsXG4gICAgICAgICAgICAgIGxvZ2ljYWxGbG9hdFNpZGUsXG4gICAgICAgICAgICAgIGZsb2F0QXJlYSxcbiAgICAgICAgICAgICAgISFyZXN1bHQubmV3UG9zaXRpb24sXG4gICAgICAgICAgICApO1xuICAgICAgICAgICAgY29udGV4dC5hZGRQYWdlRmxvYXRGcmFnbWVudChuZXdGcmFnbWVudCwgdHJ1ZSk7XG4gICAgICAgICAgICByZXN1bHQucGFnZUZsb2F0RnJhZ21lbnQgPSBuZXdGcmFnbWVudDtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgZnJhbWUuZmluaXNoKHJlc3VsdCk7XG4gICAgICB9KTtcbiAgICByZXR1cm4gZnJhbWUucmVzdWx0KCk7XG4gIH1cblxuICBsYXlvdXRQYWdlRmxvYXRJbm5lcihcbiAgICBjb250aW51YXRpb246IFBhZ2VGbG9hdHMuUGFnZUZsb2F0Q29udGludWF0aW9uLFxuICAgIHN0cmF0ZWd5OiBQYWdlRmxvYXRzLlBhZ2VGbG9hdExheW91dFN0cmF0ZWd5LFxuICAgIGFuY2hvckVkZ2U6IG51bWJlciB8IG51bGwsXG4gICAgcGFnZUZsb2F0RnJhZ21lbnQ/OiBQYWdlRmxvYXRzLlBhZ2VGbG9hdEZyYWdtZW50LFxuICApOiBUYXNrLlJlc3VsdDxib29sZWFuPiB7XG4gICAgY29uc3QgY29udGV4dCA9IHRoaXMucGFnZUZsb2F0TGF5b3V0Q29udGV4dDtcbiAgICBjb25zdCBmbG9hdCA9IGNvbnRpbnVhdGlvbi5mbG9hdDtcbiAgICBjb250ZXh0LnN0YXNoRW5kRmxvYXRGcmFnbWVudHMoZmxvYXQpO1xuXG4gICAgZnVuY3Rpb24gY2FuY2VsTGF5b3V0KGZsb2F0QXJlYSwgcGFnZUZsb2F0RnJhZ21lbnQpIHtcbiAgICAgIGlmIChwYWdlRmxvYXRGcmFnbWVudCkge1xuICAgICAgICBjb250ZXh0LnJlbW92ZVBhZ2VGbG9hdEZyYWdtZW50KHBhZ2VGbG9hdEZyYWdtZW50LCB0cnVlKTtcbiAgICAgIH0gZWxzZSBpZiAoZmxvYXRBcmVhKSB7XG4gICAgICAgIGZsb2F0QXJlYS5lbGVtZW50LnBhcmVudE5vZGUucmVtb3ZlQ2hpbGQoZmxvYXRBcmVhLmVsZW1lbnQpO1xuICAgICAgfVxuICAgICAgY29udGV4dC5yZXN0b3JlU3Rhc2hlZEZyYWdtZW50cyhmbG9hdC5mbG9hdFJlZmVyZW5jZSk7XG4gICAgICBjb250ZXh0LmRlZmVyUGFnZUZsb2F0KGNvbnRpbnVhdGlvbik7XG4gICAgfVxuICAgIGNvbnN0IGZyYW1lOiBUYXNrLkZyYW1lPGJvb2xlYW4+ID0gVGFzay5uZXdGcmFtZShcImxheW91dFBhZ2VGbG9hdElubmVyXCIpO1xuICAgIHRoaXMubGF5b3V0U2luZ2xlUGFnZUZsb2F0RnJhZ21lbnQoXG4gICAgICBbY29udGludWF0aW9uXSxcbiAgICAgIGZsb2F0LmZsb2F0U2lkZSxcbiAgICAgIGZsb2F0LmNsZWFyU2lkZSxcbiAgICAgICFjb250ZXh0Lmhhc0Zsb2F0RnJhZ21lbnRzKCksXG4gICAgICBzdHJhdGVneSxcbiAgICAgIGFuY2hvckVkZ2UsXG4gICAgICBwYWdlRmxvYXRGcmFnbWVudCxcbiAgICApLnRoZW4oKHJlc3VsdCkgPT4ge1xuICAgICAgY29uc3QgZmxvYXRBcmVhID0gcmVzdWx0LmZsb2F0QXJlYTtcbiAgICAgIGNvbnN0IG5ld0ZyYWdtZW50ID0gcmVzdWx0LnBhZ2VGbG9hdEZyYWdtZW50O1xuICAgICAgY29uc3QgbmV3UG9zaXRpb24gPSByZXN1bHQubmV3UG9zaXRpb247XG4gICAgICBpZiAobmV3RnJhZ21lbnQpIHtcbiAgICAgICAgdGhpcy5sYXlvdXRTdGFzaGVkUGFnZUZsb2F0cyhmbG9hdC5mbG9hdFJlZmVyZW5jZSwgW1xuICAgICAgICAgIHBhZ2VGbG9hdEZyYWdtZW50LFxuICAgICAgICBdKS50aGVuKChzdWNjZXNzKSA9PiB7XG4gICAgICAgICAgaWYgKHN1Y2Nlc3MpIHtcbiAgICAgICAgICAgIC8vIEFkZCBhZ2FpbiB0byBpbnZhbGlkYXRlIHRoZSBjb250ZXh0XG4gICAgICAgICAgICBBc3NlcnRzLmFzc2VydChuZXdGcmFnbWVudCk7XG4gICAgICAgICAgICBjb250ZXh0LmFkZFBhZ2VGbG9hdEZyYWdtZW50KG5ld0ZyYWdtZW50KTtcbiAgICAgICAgICAgIGNvbnRleHQuZGlzY2FyZFN0YXNoZWRGcmFnbWVudHMoZmxvYXQuZmxvYXRSZWZlcmVuY2UpO1xuICAgICAgICAgICAgaWYgKG5ld1Bvc2l0aW9uKSB7XG4gICAgICAgICAgICAgIGNvbnN0IGNvbnRpbnVhdGlvbiA9IG5ldyBQYWdlRmxvYXRzLlBhZ2VGbG9hdENvbnRpbnVhdGlvbihcbiAgICAgICAgICAgICAgICBmbG9hdCxcbiAgICAgICAgICAgICAgICBuZXdQb3NpdGlvbi5wcmltYXJ5LFxuICAgICAgICAgICAgICApO1xuICAgICAgICAgICAgICBjb250ZXh0LmRlZmVyUGFnZUZsb2F0KGNvbnRpbnVhdGlvbik7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBmcmFtZS5maW5pc2godHJ1ZSk7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGNhbmNlbExheW91dChmbG9hdEFyZWEsIG5ld0ZyYWdtZW50KTtcbiAgICAgICAgICAgIGZyYW1lLmZpbmlzaChmYWxzZSk7XG4gICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGNhbmNlbExheW91dChmbG9hdEFyZWEsIG5ld0ZyYWdtZW50KTtcbiAgICAgICAgZnJhbWUuZmluaXNoKGZhbHNlKTtcbiAgICAgIH1cbiAgICB9KTtcbiAgICByZXR1cm4gZnJhbWUucmVzdWx0KCk7XG4gIH1cblxuICAvKipcbiAgICogQHJldHVybnMgUmVwcmVzZW50cyBpZiB0aGUgbGF5b3V0IHdhcyBzdWNjZWVkZWQgb3Igbm90XG4gICAqL1xuICBwcml2YXRlIGxheW91dFN0YXNoZWRQYWdlRmxvYXRzKFxuICAgIGZsb2F0UmVmZXJlbmNlOiBQYWdlRmxvYXRzLkZsb2F0UmVmZXJlbmNlLFxuICAgIGV4Y2x1ZGVkOiBQYWdlRmxvYXRzLlBhZ2VGbG9hdEZyYWdtZW50W10sXG4gICk6IFRhc2suUmVzdWx0PGJvb2xlYW4+IHtcbiAgICBjb25zdCBjb250ZXh0ID0gdGhpcy5wYWdlRmxvYXRMYXlvdXRDb250ZXh0O1xuICAgIGNvbnN0IHN0YXNoZWRGbG9hdEZyYWdtZW50cyA9IGNvbnRleHQuZ2V0U3Rhc2hlZEZsb2F0RnJhZ21lbnRzKFxuICAgICAgZmxvYXRSZWZlcmVuY2UsXG4gICAgKTtcbiAgICBjb25zdCBuZXdGbG9hdEFyZWFzID0gW107XG4gICAgY29uc3QgbmV3RnJhZ21lbnRzID0gW107XG4gICAgbGV0IGZhaWxlZCA9IGZhbHNlO1xuICAgIGNvbnN0IGZyYW1lID0gVGFzay5uZXdGcmFtZTxib29sZWFuPihcImxheW91dFN0YXNoZWRQYWdlRmxvYXRzXCIpO1xuICAgIGxldCBpID0gMDtcbiAgICBmcmFtZVxuICAgICAgLmxvb3BXaXRoRnJhbWUoKGxvb3BGcmFtZSkgPT4ge1xuICAgICAgICBpZiAoaSA+PSBzdGFzaGVkRmxvYXRGcmFnbWVudHMubGVuZ3RoKSB7XG4gICAgICAgICAgbG9vcEZyYW1lLmJyZWFrTG9vcCgpO1xuICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCBzdGFzaGVkRnJhZ21lbnQgPSBzdGFzaGVkRmxvYXRGcmFnbWVudHNbaV07XG4gICAgICAgIGlmIChleGNsdWRlZC5pbmNsdWRlcyhzdGFzaGVkRnJhZ21lbnQpKSB7XG4gICAgICAgICAgaSsrO1xuICAgICAgICAgIGxvb3BGcmFtZS5jb250aW51ZUxvb3AoKTtcbiAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgY29uc3Qgc3RyYXRlZ3kgPSBuZXcgUGFnZUZsb2F0cy5QYWdlRmxvYXRMYXlvdXRTdHJhdGVneVJlc29sdmVyKCkuZmluZEJ5RmxvYXQoXG4gICAgICAgICAgc3Rhc2hlZEZyYWdtZW50LmNvbnRpbnVhdGlvbnNbMF0uZmxvYXQsXG4gICAgICAgICk7XG5cbiAgICAgICAgLy8gVmFsdWUgb2YgJ2NsZWFyJyBpcyBpcnJlbGV2YW50IHdoZW4gbGF5aW5nIG91dCBzdGFzaGVkIGZsb2F0c1xuICAgICAgICAvLyBzaW5jZSB3aGV0aGVyIHRoZSAnY2xlYXInIHZhbHVlIGFsbG93cyBwbGFjaW5nIHRoZSBmbG9hdFxuICAgICAgICAvLyBoZXJlIGlzIGFscmVhZHkgcmVzb2x2ZWQuXG4gICAgICAgIHRoaXMubGF5b3V0U2luZ2xlUGFnZUZsb2F0RnJhZ21lbnQoXG4gICAgICAgICAgc3Rhc2hlZEZyYWdtZW50LmNvbnRpbnVhdGlvbnMsXG4gICAgICAgICAgc3Rhc2hlZEZyYWdtZW50LmZsb2F0U2lkZSxcbiAgICAgICAgICBudWxsLFxuICAgICAgICAgIGZhbHNlLFxuICAgICAgICAgIHN0cmF0ZWd5LFxuICAgICAgICAgIG51bGwsXG4gICAgICAgICkudGhlbigocmVzdWx0KSA9PiB7XG4gICAgICAgICAgY29uc3QgZmxvYXRBcmVhID0gcmVzdWx0LmZsb2F0QXJlYTtcbiAgICAgICAgICBpZiAoZmxvYXRBcmVhKSB7XG4gICAgICAgICAgICBuZXdGbG9hdEFyZWFzLnB1c2goZmxvYXRBcmVhKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgY29uc3QgZnJhZ21lbnQgPSByZXN1bHQucGFnZUZsb2F0RnJhZ21lbnQ7XG4gICAgICAgICAgaWYgKGZyYWdtZW50KSB7XG4gICAgICAgICAgICBuZXdGcmFnbWVudHMucHVzaChmcmFnbWVudCk7XG4gICAgICAgICAgICBpKys7XG4gICAgICAgICAgICBsb29wRnJhbWUuY29udGludWVMb29wKCk7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGZhaWxlZCA9IHRydWU7XG4gICAgICAgICAgICBsb29wRnJhbWUuYnJlYWtMb29wKCk7XG4gICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICAgIH0pXG4gICAgICAudGhlbigoKSA9PiB7XG4gICAgICAgIGlmIChmYWlsZWQpIHtcbiAgICAgICAgICBuZXdGcmFnbWVudHMuZm9yRWFjaCgoZnJhZ21lbnQpID0+IHtcbiAgICAgICAgICAgIGNvbnRleHQucmVtb3ZlUGFnZUZsb2F0RnJhZ21lbnQoZnJhZ21lbnQsIHRydWUpO1xuICAgICAgICAgIH0pO1xuICAgICAgICAgIG5ld0Zsb2F0QXJlYXMuZm9yRWFjaCgoYXJlYSkgPT4ge1xuICAgICAgICAgICAgY29uc3QgZWxlbSA9IGFyZWEuZWxlbWVudDtcbiAgICAgICAgICAgIGlmIChlbGVtICYmIGVsZW0ucGFyZW50Tm9kZSkge1xuICAgICAgICAgICAgICBlbGVtLnBhcmVudE5vZGUucmVtb3ZlQ2hpbGQoZWxlbSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgc3Rhc2hlZEZsb2F0RnJhZ21lbnRzLmZvckVhY2goKGZyYWdtZW50KSA9PiB7XG4gICAgICAgICAgICBjb25zdCBlbGVtID0gZnJhZ21lbnQuYXJlYS5lbGVtZW50O1xuICAgICAgICAgICAgaWYgKGVsZW0gJiYgZWxlbS5wYXJlbnROb2RlKSB7XG4gICAgICAgICAgICAgIGVsZW0ucGFyZW50Tm9kZS5yZW1vdmVDaGlsZChlbGVtKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgICAgICBmcmFtZS5maW5pc2goIWZhaWxlZCk7XG4gICAgICB9KTtcbiAgICByZXR1cm4gZnJhbWUucmVzdWx0KCk7XG4gIH1cblxuICBzZXRGbG9hdEFuY2hvclZpZXdOb2RlKG5vZGVDb250ZXh0OiBWdHJlZS5Ob2RlQ29udGV4dCk6IFZ0cmVlLk5vZGVDb250ZXh0IHtcbiAgICBjb25zdCBwYXJlbnQgPSBub2RlQ29udGV4dC52aWV3Tm9kZS5wYXJlbnROb2RlO1xuICAgIGNvbnN0IGFuY2hvciA9IHBhcmVudC5vd25lckRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJzcGFuXCIpO1xuICAgIGFuY2hvci5zZXRBdHRyaWJ1dGUoVnRyZWVJbXBsLlNQRUNJQUxfQVRUUiwgXCIxXCIpO1xuICAgIGlmIChub2RlQ29udGV4dC5mbG9hdFNpZGUgPT09IFwiZm9vdG5vdGVcIikge1xuICAgICAgLy8gRGVmYXVsdHMgZm9yIGZvb3Rub3RlLWNhbGwsIGNhbiBiZSBvdmVycmlkZW4gYnkgdGhlIHN0eWxlc2hlZXQuXG4gICAgICB0aGlzLmxheW91dENvbnRleHQuYXBwbHlQc2V1ZG9lbGVtZW50U3R5bGUoXG4gICAgICAgIG5vZGVDb250ZXh0LFxuICAgICAgICBcImZvb3Rub3RlLWNhbGxcIixcbiAgICAgICAgYW5jaG9yLFxuICAgICAgKTtcbiAgICB9XG4gICAgcGFyZW50LmFwcGVuZENoaWxkKGFuY2hvcik7XG4gICAgcGFyZW50LnJlbW92ZUNoaWxkKG5vZGVDb250ZXh0LnZpZXdOb2RlKTtcbiAgICBjb25zdCBub2RlQ29udGV4dEFmdGVyID0gbm9kZUNvbnRleHQubW9kaWZ5KCk7XG4gICAgbm9kZUNvbnRleHRBZnRlci5hZnRlciA9IHRydWU7XG4gICAgbm9kZUNvbnRleHRBZnRlci52aWV3Tm9kZSA9IGFuY2hvcjtcbiAgICByZXR1cm4gbm9kZUNvbnRleHRBZnRlcjtcbiAgfVxuXG4gIHJlc29sdmVGbG9hdFJlZmVyZW5jZUZyb21Db2x1bW5TcGFuKFxuICAgIGZsb2F0UmVmZXJlbmNlOiBQYWdlRmxvYXRzLkZsb2F0UmVmZXJlbmNlLFxuICAgIGNvbHVtblNwYW46IENzcy5WYWwsXG4gICAgbm9kZUNvbnRleHQ6IFZ0cmVlLk5vZGVDb250ZXh0LFxuICApOiBUYXNrLlJlc3VsdDxQYWdlRmxvYXRzLkZsb2F0UmVmZXJlbmNlPiB7XG4gICAgY29uc3QgZnJhbWUgPSBUYXNrLm5ld0ZyYW1lKFxuICAgICAgXCJyZXNvbHZlRmxvYXRSZWZlcmVuY2VGcm9tQ29sdW1uU3BhblwiLFxuICAgICkgYXMgVGFzay5GcmFtZTxQYWdlRmxvYXRzLkZsb2F0UmVmZXJlbmNlPjtcbiAgICBjb25zdCBjb2x1bW5Db250ZXh0ID0gdGhpcy5wYWdlRmxvYXRMYXlvdXRDb250ZXh0O1xuICAgIGNvbnN0IHJlZ2lvbkNvbnRleHQgPSBjb2x1bW5Db250ZXh0LmdldFBhZ2VGbG9hdExheW91dENvbnRleHQoXG4gICAgICBQYWdlRmxvYXRzLkZsb2F0UmVmZXJlbmNlLlJFR0lPTixcbiAgICApO1xuICAgIGNvbnN0IGlzUmVnaW9uV2lkZXIgPVxuICAgICAgY29sdW1uQ29udGV4dC5nZXRDb250YWluZXIoKS53aWR0aCA8IHJlZ2lvbkNvbnRleHQuZ2V0Q29udGFpbmVyKCkud2lkdGg7XG4gICAgaWYgKGlzUmVnaW9uV2lkZXIgJiYgZmxvYXRSZWZlcmVuY2UgPT09IFBhZ2VGbG9hdHMuRmxvYXRSZWZlcmVuY2UuQ09MVU1OKSB7XG4gICAgICBpZiAoY29sdW1uU3BhbiA9PT0gQ3NzLmlkZW50LmF1dG8pIHtcbiAgICAgICAgdGhpcy5idWlsZERlZXBFbGVtZW50Vmlldyhub2RlQ29udGV4dC5jb3B5KCkpLnRoZW4oKHBvc2l0aW9uKSA9PiB7XG4gICAgICAgICAgY29uc3QgZWxlbWVudCA9IHBvc2l0aW9uLnZpZXdOb2RlIGFzIEVsZW1lbnQ7XG4gICAgICAgICAgbGV0IGlubGluZVNpemUgPSBTaXppbmcuZ2V0U2l6ZSh0aGlzLmNsaWVudExheW91dCwgZWxlbWVudCwgW1xuICAgICAgICAgICAgU2l6aW5nLlNpemUuTUlOX0NPTlRFTlRfSU5MSU5FX1NJWkUsXG4gICAgICAgICAgXSlbU2l6aW5nLlNpemUuTUlOX0NPTlRFTlRfSU5MSU5FX1NJWkVdO1xuICAgICAgICAgIGNvbnN0IG1hcmdpbiA9IHRoaXMuZ2V0Q29tcHV0ZWRNYXJnaW4oZWxlbWVudCk7XG4gICAgICAgICAgaWYgKHRoaXMudmVydGljYWwpIHtcbiAgICAgICAgICAgIGlubGluZVNpemUgKz0gbWFyZ2luLnRvcCArIG1hcmdpbi5ib3R0b207XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGlubGluZVNpemUgKz0gbWFyZ2luLmxlZnQgKyBtYXJnaW4ucmlnaHQ7XG4gICAgICAgICAgfVxuICAgICAgICAgIGlmIChpbmxpbmVTaXplID4gdGhpcy53aWR0aCkge1xuICAgICAgICAgICAgZnJhbWUuZmluaXNoKFBhZ2VGbG9hdHMuRmxvYXRSZWZlcmVuY2UuUkVHSU9OKTtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgZnJhbWUuZmluaXNoKGZsb2F0UmVmZXJlbmNlKTtcbiAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgICAgfSBlbHNlIGlmIChjb2x1bW5TcGFuID09PSBDc3MuaWRlbnQuYWxsKSB7XG4gICAgICAgIGZyYW1lLmZpbmlzaChQYWdlRmxvYXRzLkZsb2F0UmVmZXJlbmNlLlJFR0lPTik7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBmcmFtZS5maW5pc2goZmxvYXRSZWZlcmVuY2UpO1xuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICBmcmFtZS5maW5pc2goZmxvYXRSZWZlcmVuY2UpO1xuICAgIH1cbiAgICByZXR1cm4gZnJhbWUucmVzdWx0KCk7XG4gIH1cblxuICBsYXlvdXRQYWdlRmxvYXQoXG4gICAgbm9kZUNvbnRleHQ6IFZ0cmVlLk5vZGVDb250ZXh0LFxuICApOiBUYXNrLlJlc3VsdDxWdHJlZS5Ob2RlQ29udGV4dD4ge1xuICAgIGNvbnN0IGNvbnRleHQgPSB0aGlzLnBhZ2VGbG9hdExheW91dENvbnRleHQ7XG4gICAgY29uc3Qgc3RyYXRlZ3kgPSBuZXcgUGFnZUZsb2F0cy5QYWdlRmxvYXRMYXlvdXRTdHJhdGVneVJlc29sdmVyKCkuZmluZEJ5Tm9kZUNvbnRleHQoXG4gICAgICBub2RlQ29udGV4dCxcbiAgICApO1xuICAgIGxldCBjb250OiBUYXNrLlJlc3VsdDxQYWdlRmxvYXRzLlBhZ2VGbG9hdD47XG4gICAgY29uc3QgZmxvYXQgPSBjb250ZXh0LmZpbmRQYWdlRmxvYXRCeU5vZGVQb3NpdGlvbihcbiAgICAgIG5vZGVDb250ZXh0LnRvTm9kZVBvc2l0aW9uKCksXG4gICAgKTtcbiAgICBpZiAoIWZsb2F0KSB7XG4gICAgICBjb250ID0gc3RyYXRlZ3kuY3JlYXRlUGFnZUZsb2F0KG5vZGVDb250ZXh0LCBjb250ZXh0LCB0aGlzKTtcbiAgICB9IGVsc2Uge1xuICAgICAgY29udCA9IFRhc2submV3UmVzdWx0KGZsb2F0KTtcbiAgICB9XG4gICAgcmV0dXJuIGNvbnQudGhlbkFzeW5jKChmbG9hdCkgPT4ge1xuICAgICAgY29uc3Qgbm9kZVBvc2l0aW9uID0gVnRyZWVJbXBsLm5ld05vZGVQb3NpdGlvbkZyb21Ob2RlQ29udGV4dChcbiAgICAgICAgbm9kZUNvbnRleHQsXG4gICAgICAgIDAsXG4gICAgICApO1xuICAgICAgY29uc3Qgbm9kZUNvbnRleHRBZnRlciA9IHRoaXMuc2V0RmxvYXRBbmNob3JWaWV3Tm9kZShub2RlQ29udGV4dCk7XG4gICAgICBjb25zdCBwYWdlRmxvYXRGcmFnbWVudCA9IHN0cmF0ZWd5LmZpbmRQYWdlRmxvYXRGcmFnbWVudChmbG9hdCwgY29udGV4dCk7XG4gICAgICBjb25zdCBjb250aW51YXRpb24gPSBuZXcgUGFnZUZsb2F0cy5QYWdlRmxvYXRDb250aW51YXRpb24oXG4gICAgICAgIGZsb2F0LFxuICAgICAgICBub2RlUG9zaXRpb24sXG4gICAgICApO1xuICAgICAgaWYgKHBhZ2VGbG9hdEZyYWdtZW50ICYmIHBhZ2VGbG9hdEZyYWdtZW50Lmhhc0Zsb2F0KGZsb2F0KSkge1xuICAgICAgICBjb250ZXh0LnJlZ2lzdGVyUGFnZUZsb2F0QW5jaG9yKGZsb2F0LCBub2RlQ29udGV4dEFmdGVyLnZpZXdOb2RlKTtcbiAgICAgICAgcmV0dXJuIFRhc2submV3UmVzdWx0KG5vZGVDb250ZXh0QWZ0ZXIgYXMgVnRyZWUuTm9kZUNvbnRleHQpO1xuICAgICAgfSBlbHNlIGlmIChcbiAgICAgICAgY29udGV4dC5pc0ZvcmJpZGRlbihmbG9hdCkgfHxcbiAgICAgICAgY29udGV4dC5oYXNQcmVjZWRpbmdGbG9hdHNEZWZlcnJlZFRvTmV4dChmbG9hdClcbiAgICAgICkge1xuICAgICAgICBjb250ZXh0LmRlZmVyUGFnZUZsb2F0KGNvbnRpbnVhdGlvbik7XG4gICAgICAgIGNvbnRleHQucmVnaXN0ZXJQYWdlRmxvYXRBbmNob3IoZmxvYXQsIG5vZGVDb250ZXh0QWZ0ZXIudmlld05vZGUpO1xuICAgICAgICByZXR1cm4gVGFzay5uZXdSZXN1bHQobm9kZUNvbnRleHRBZnRlciBhcyBWdHJlZS5Ob2RlQ29udGV4dCk7XG4gICAgICB9IGVsc2UgaWYgKHRoaXMubm9kZUNvbnRleHRPdmVyZmxvd2luZ0R1ZVRvUmVwZXRpdGl2ZUVsZW1lbnRzKSB7XG4gICAgICAgIHJldHVybiBUYXNrLm5ld1Jlc3VsdChudWxsKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGNvbnN0IGVkZ2UgPSBMYXlvdXRIZWxwZXIuY2FsY3VsYXRlRWRnZShcbiAgICAgICAgICBub2RlQ29udGV4dEFmdGVyLFxuICAgICAgICAgIHRoaXMuY2xpZW50TGF5b3V0LFxuICAgICAgICAgIDAsXG4gICAgICAgICAgdGhpcy52ZXJ0aWNhbCxcbiAgICAgICAgKTtcbiAgICAgICAgaWYgKHRoaXMuaXNPdmVyZmxvd24oZWRnZSkpIHtcbiAgICAgICAgICByZXR1cm4gVGFzay5uZXdSZXN1bHQobm9kZUNvbnRleHRBZnRlcik7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgcmV0dXJuIHRoaXMubGF5b3V0UGFnZUZsb2F0SW5uZXIoXG4gICAgICAgICAgICBjb250aW51YXRpb24sXG4gICAgICAgICAgICBzdHJhdGVneSxcbiAgICAgICAgICAgIGVkZ2UsXG4gICAgICAgICAgICBwYWdlRmxvYXRGcmFnbWVudCxcbiAgICAgICAgICApLnRoZW5Bc3luYygoc3VjY2VzcykgPT4ge1xuICAgICAgICAgICAgQXNzZXJ0cy5hc3NlcnQoZmxvYXQpO1xuICAgICAgICAgICAgaWYgKCFzdWNjZXNzKSB7XG4gICAgICAgICAgICAgIGNvbnRleHQucmVnaXN0ZXJQYWdlRmxvYXRBbmNob3IoZmxvYXQsIG5vZGVDb250ZXh0QWZ0ZXIudmlld05vZGUpO1xuICAgICAgICAgICAgICByZXR1cm4gVGFzay5uZXdSZXN1bHQobm9kZUNvbnRleHRBZnRlcik7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICByZXR1cm4gVGFzay5uZXdSZXN1bHQobnVsbCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9KTtcbiAgfVxuXG4gIGNyZWF0ZUp1c3RpZmljYXRpb25BZGp1c3RtZW50RWxlbWVudChcbiAgICBpbnNlcnRpb25Qb2ludDogTm9kZSxcbiAgICBkb2M6IERvY3VtZW50LFxuICAgIHBhcmVudE5vZGU6IE5vZGUsXG4gICAgdmVydGljYWw6IGJvb2xlYW4sXG4gICk6IEhUTUxFbGVtZW50IHtcbiAgICBjb25zdCBzcGFuID0gZG9jLmNyZWF0ZUVsZW1lbnQoXCJzcGFuXCIpIGFzIEhUTUxFbGVtZW50O1xuICAgIHNwYW4uc3R5bGUudmlzaWJpbGl0eSA9IFwiaGlkZGVuXCI7XG4gICAgc3Bhbi5zdHlsZS52ZXJ0aWNhbEFsaWduID0gXCJ0b3BcIjtcbiAgICBzcGFuLnNldEF0dHJpYnV0ZShWdHJlZUltcGwuU1BFQ0lBTF9BVFRSLCBcIjFcIik7XG4gICAgY29uc3QgaW5uZXIgPSBkb2MuY3JlYXRlRWxlbWVudChcInNwYW5cIikgYXMgSFRNTEVsZW1lbnQ7XG4gICAgaW5uZXIuc3R5bGUuZm9udFNpemUgPSBcIjBcIjtcbiAgICBpbm5lci5zdHlsZS5saW5lSGVpZ2h0ID0gXCIwXCI7XG4gICAgaW5uZXIudGV4dENvbnRlbnQgPSBcIiAjXCI7XG4gICAgc3Bhbi5hcHBlbmRDaGlsZChpbm5lcik7XG5cbiAgICAvLyBNZWFzdXJlIGlubGluZS1zdGFydCBhbmQgaW5saW5lLWVuZCBlZGdlIHBvc2l0aW9ucyBvZiB0aGUgbGluZSBib3gsXG4gICAgLy8gdGFraW5nIChleGNsdXNpb24pIGZsb2F0cyBpbnRvIGNvbnNpZGVyYXRpb25cbiAgICBzcGFuLnN0eWxlLmRpc3BsYXkgPSBcImJsb2NrXCI7XG4gICAgc3Bhbi5zdHlsZS50ZXh0SW5kZW50ID0gXCIwXCI7XG4gICAgc3Bhbi5zdHlsZS50ZXh0QWxpZ24gPSBcImxlZnRcIjtcbiAgICBwYXJlbnROb2RlLmluc2VydEJlZm9yZShzcGFuLCBpbnNlcnRpb25Qb2ludCk7XG4gICAgY29uc3QgbGVmdFBvcyA9IHRoaXMuY2xpZW50TGF5b3V0LmdldEVsZW1lbnRDbGllbnRSZWN0KGlubmVyKTtcbiAgICBzcGFuLnN0eWxlLnRleHRBbGlnbiA9IFwicmlnaHRcIjtcbiAgICBjb25zdCByaWdodFBvcyA9IHRoaXMuY2xpZW50TGF5b3V0LmdldEVsZW1lbnRDbGllbnRSZWN0KGlubmVyKTtcbiAgICBzcGFuLnN0eWxlLnRleHRBbGlnbiA9IFwiXCI7XG4gICAgaWYgKEJhc2UuY2hlY2tJbmxpbmVCbG9ja0p1c3RpZmljYXRpb25CdWcoZG9jdW1lbnQuYm9keSkpIHtcbiAgICAgIC8vIEZvciBDaHJvbWVcbiAgICAgIHNwYW4uc3R5bGUuZGlzcGxheSA9IFwiaW5saW5lXCI7XG4gICAgfSBlbHNlIHtcbiAgICAgIC8vIEZvciBGaXJlZm94LCBFZGdlIGFuZCBJRVxuICAgICAgc3Bhbi5zdHlsZS5kaXNwbGF5ID0gXCJpbmxpbmUtYmxvY2tcIjtcbiAgICB9XG4gICAgY29uc3QgcGFkZGluZyA9IHZlcnRpY2FsXG4gICAgICA/IHJpZ2h0UG9zLnRvcCAtIGxlZnRQb3MudG9wXG4gICAgICA6IHJpZ2h0UG9zLmxlZnQgLSBsZWZ0UG9zLmxlZnQ7XG4gICAgY29uc3QgcGFkZGluZ1N0ciA9IHBhZGRpbmcgPj0gMSA/IGAke3BhZGRpbmcgLSAxfXB4YCA6IFwiMTAwJVwiO1xuICAgIGlmICh2ZXJ0aWNhbCkge1xuICAgICAgc3Bhbi5zdHlsZS5wYWRkaW5nVG9wID0gcGFkZGluZ1N0cjtcbiAgICB9IGVsc2Uge1xuICAgICAgc3Bhbi5zdHlsZS5wYWRkaW5nTGVmdCA9IHBhZGRpbmdTdHI7XG4gICAgfVxuICAgIHJldHVybiBzcGFuO1xuICB9XG5cbiAgYWRkQW5kQWRqdXN0SnVzdGlmaWNhdGlvbkVsZW1lbnQoXG4gICAgbm9kZUNvbnRleHQ6IFZ0cmVlLk5vZGVDb250ZXh0LFxuICAgIGluc2VydEFmdGVyOiBib29sZWFuLFxuICAgIG5vZGU6IE5vZGUsXG4gICAgaW5zZXJ0aW9uUG9pbnQ6IE5vZGUsXG4gICAgZG9jOiBEb2N1bWVudCxcbiAgICBwYXJlbnROb2RlOiBOb2RlLFxuICApOiBIVE1MRWxlbWVudCB7XG4gICAgZml4SnVzdGlmaWNhdGlvbk9uSHlwaGVuKG5vZGVDb250ZXh0LCBpbnNlcnRBZnRlciwgbm9kZSwgaW5zZXJ0aW9uUG9pbnQpO1xuICAgIHJldHVybiB0aGlzLmNyZWF0ZUp1c3RpZmljYXRpb25BZGp1c3RtZW50RWxlbWVudChcbiAgICAgIGluc2VydGlvblBvaW50LFxuICAgICAgZG9jLFxuICAgICAgcGFyZW50Tm9kZSxcbiAgICAgIG5vZGVDb250ZXh0LnZlcnRpY2FsLFxuICAgICk7XG4gIH1cblxuICBjb21wZW5zYXRlSnVzdGlmaWNhdGlvbkxpbmVIZWlnaHQoXG4gICAgc3BhbjogRWxlbWVudCxcbiAgICBicjogRWxlbWVudCxcbiAgICBub2RlQ29udGV4dDogVnRyZWUuTm9kZUNvbnRleHQsXG4gICkge1xuICAgIGNvbnN0IHNwYW5SZWN0ID0gdGhpcy5jbGllbnRMYXlvdXQuZ2V0RWxlbWVudENsaWVudFJlY3Qoc3Bhbik7XG4gICAgY29uc3QgYnJSZWN0ID0gdGhpcy5jbGllbnRMYXlvdXQuZ2V0RWxlbWVudENsaWVudFJlY3QoYnIpO1xuICAgIGlmIChub2RlQ29udGV4dC52ZXJ0aWNhbCkge1xuICAgICAgKGJyIGFzIEhUTUxFbGVtZW50KS5zdHlsZS5tYXJnaW5SaWdodCA9IGAke1xuICAgICAgICBiclJlY3QucmlnaHQgLSBzcGFuUmVjdC5yaWdodFxuICAgICAgfXB4YDtcbiAgICAgIChiciBhcyBIVE1MRWxlbWVudCkuc3R5bGUud2lkdGggPSBcIjBweFwiO1xuICAgIH0gZWxzZSB7XG4gICAgICAoYnIgYXMgSFRNTEVsZW1lbnQpLnN0eWxlLm1hcmdpblRvcCA9IGAke3NwYW5SZWN0LnRvcCAtIGJyUmVjdC50b3B9cHhgO1xuICAgICAgKGJyIGFzIEhUTUxFbGVtZW50KS5zdHlsZS5oZWlnaHQgPSBcIjBweFwiO1xuICAgIH1cbiAgICBici5zZXRBdHRyaWJ1dGUoVnRyZWVJbXBsLlNQRUNJQUxfQVRUUiwgXCIxXCIpO1xuICB9XG5cbiAgLyoqXG4gICAqIEZpeCBqdXN0aWZpY2F0aW9uIG9mIHRoZSBsYXN0IGxpbmUgb2YgdGV4dCBicm9rZW4gYWNyb3NzIHBhZ2VzIChpZlxuICAgKiBuZWVkZWQpLlxuICAgKi9cbiAgZml4SnVzdGlmaWNhdGlvbklmTmVlZGVkKFxuICAgIG5vZGVDb250ZXh0OiBWdHJlZS5Ob2RlQ29udGV4dCxcbiAgICBlbmRPZkNvbHVtbjogYm9vbGVhbixcbiAgKTogdm9pZCB7XG4gICAgaWYgKG5vZGVDb250ZXh0LmFmdGVyICYmICFub2RlQ29udGV4dC5pbmxpbmUpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgaWYgKGVuZE9mQ29sdW1uKSB7XG4gICAgICBsZXQgdGV4dEFsaWduID0gXCJcIjtcbiAgICAgIGZvciAoXG4gICAgICAgIGxldCBwYXJlbnQgPSBub2RlQ29udGV4dC5wYXJlbnQ7XG4gICAgICAgIHBhcmVudCAmJiAhdGV4dEFsaWduO1xuICAgICAgICBwYXJlbnQgPSBwYXJlbnQucGFyZW50XG4gICAgICApIHtcbiAgICAgICAgaWYgKCFwYXJlbnQuaW5saW5lICYmIHBhcmVudC52aWV3Tm9kZSkge1xuICAgICAgICAgIHRleHRBbGlnbiA9IChwYXJlbnQudmlld05vZGUgYXMgSFRNTEVsZW1lbnQpLnN0eWxlLnRleHRBbGlnbjtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgaWYgKHRleHRBbGlnbiAhPT0gXCJqdXN0aWZ5XCIpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuICAgIH1cbiAgICBjb25zdCBub2RlID0gbm9kZUNvbnRleHQudmlld05vZGU7XG4gICAgY29uc3QgZG9jID0gbm9kZS5vd25lckRvY3VtZW50O1xuICAgIGNvbnN0IGluc2VydEFmdGVyID1cbiAgICAgIGVuZE9mQ29sdW1uICYmIChub2RlQ29udGV4dC5hZnRlciB8fCBub2RlLm5vZGVUeXBlICE9IDEpO1xuICAgIGxldCBpbnNlcnRpb25Qb2ludCA9IGluc2VydEFmdGVyID8gbm9kZS5uZXh0U2libGluZyA6IG5vZGU7XG4gICAgaWYgKGluc2VydGlvblBvaW50ICYmICFpbnNlcnRpb25Qb2ludC5wYXJlbnROb2RlKSB7XG4gICAgICAvLyBQb3NzaWJsZSBpZiByZW1vdmVTZWxmID0gZmFsc2UgaW4gZmluaXNoQnJlYWsoKVxuICAgICAgaW5zZXJ0aW9uUG9pbnQgPSBudWxsO1xuICAgIH1cbiAgICBjb25zdCBwYXJlbnROb2RlID1cbiAgICAgIG5vZGUucGFyZW50Tm9kZSB8fCAobm9kZUNvbnRleHQucGFyZW50ICYmIG5vZGVDb250ZXh0LnBhcmVudC52aWV3Tm9kZSk7XG4gICAgaWYgKCFwYXJlbnROb2RlKSB7XG4gICAgICAvLyBQb3NzaWJsZSBpZiBub3RoaW5nIHdhcyBhZGRlZCB0byB0aGUgY29sdW1uXG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIGNvbnN0IHNwYW4gPSB0aGlzLmFkZEFuZEFkanVzdEp1c3RpZmljYXRpb25FbGVtZW50KFxuICAgICAgbm9kZUNvbnRleHQsXG4gICAgICBpbnNlcnRBZnRlcixcbiAgICAgIG5vZGUsXG4gICAgICBpbnNlcnRpb25Qb2ludCxcbiAgICAgIGRvYyxcbiAgICAgIHBhcmVudE5vZGUsXG4gICAgKTtcbiAgICBpZiAoIWVuZE9mQ29sdW1uKSB7XG4gICAgICBjb25zdCBiciA9IGRvYy5jcmVhdGVFbGVtZW50KFwiZGl2XCIpIGFzIEhUTUxFbGVtZW50O1xuICAgICAgcGFyZW50Tm9kZS5pbnNlcnRCZWZvcmUoYnIsIGluc2VydGlvblBvaW50KTtcbiAgICAgIHRoaXMuY29tcGVuc2F0ZUp1c3RpZmljYXRpb25MaW5lSGVpZ2h0KHNwYW4sIGJyLCBub2RlQ29udGV4dCk7XG4gICAgfVxuICB9XG5cbiAgcHJvY2Vzc0xpbmVTdHlsaW5nKFxuICAgIG5vZGVDb250ZXh0OiBWdHJlZS5Ob2RlQ29udGV4dCxcbiAgICByZXNOb2RlQ29udGV4dDogVnRyZWUuTm9kZUNvbnRleHQsXG4gICAgY2hlY2tQb2ludHM6IFZ0cmVlLk5vZGVDb250ZXh0W10sXG4gICk6IFRhc2suUmVzdWx0PFZ0cmVlLk5vZGVDb250ZXh0PiB7XG4gICAgY29uc3QgZnJhbWU6IFRhc2suRnJhbWU8VnRyZWUuTm9kZUNvbnRleHQ+ID0gVGFzay5uZXdGcmFtZShcbiAgICAgIFwicHJvY2Vzc0xpbmVTdHlsaW5nXCIsXG4gICAgKTtcbiAgICBpZiAoVklWTElPU1RZTEVfREVCVUcpIHtcbiAgICAgIHZhbGlkYXRlQ2hlY2tQb2ludHMoY2hlY2tQb2ludHMpO1xuICAgIH1cbiAgICBsZXQgbGFzdENoZWNrUG9pbnRzID0gY2hlY2tQb2ludHMuY29uY2F0KFtdKTsgLy8gbWFrZSBhIGNvcHlcbiAgICBjaGVja1BvaW50cy5zcGxpY2UoMCwgY2hlY2tQb2ludHMubGVuZ3RoKTsgLy8gbWFrZSBlbXB0eVxuICAgIGxldCB0b3RhbExpbmVDb3VudCA9IDA7XG4gICAgbGV0IGZpcnN0UHNldWRvID0gbm9kZUNvbnRleHQuZmlyc3RQc2V1ZG87IC8vIDpmaXJzdC1sZXR0ZXIgaXMgbm90IHByb2Nlc3NlZCBoZXJlXG4gICAgaWYgKGZpcnN0UHNldWRvLmNvdW50ID09IDApIHtcbiAgICAgIGZpcnN0UHNldWRvID0gZmlyc3RQc2V1ZG8ub3V0ZXI7IC8vIG1vdmUgdG8gbGluZSBwc2V1ZG9lbGVtZW50IChpZiBhbnkpXG4gICAgfVxuICAgIGZyYW1lXG4gICAgICAubG9vcFdpdGhGcmFtZSgobG9vcEZyYW1lKSA9PiB7XG4gICAgICAgIGlmICghZmlyc3RQc2V1ZG8pIHtcbiAgICAgICAgICBsb29wRnJhbWUuYnJlYWtMb29wKCk7XG4gICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IGxpbmVQb3NpdGlvbnMgPSB0aGlzLmZpbmRMaW5lUG9zaXRpb25zKGxhc3RDaGVja1BvaW50cyk7XG4gICAgICAgIGNvbnN0IGNvdW50ID0gZmlyc3RQc2V1ZG8uY291bnQgLSB0b3RhbExpbmVDb3VudDtcbiAgICAgICAgaWYgKGxpbmVQb3NpdGlvbnMubGVuZ3RoIDw9IGNvdW50KSB7XG4gICAgICAgICAgbG9vcEZyYW1lLmJyZWFrTG9vcCgpO1xuICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCBsaW5lQnJlYWsgPSB0aGlzLmZpbmRBY2NlcHRhYmxlQnJlYWtJbnNpZGUoXG4gICAgICAgICAgbGFzdENoZWNrUG9pbnRzLFxuICAgICAgICAgIGxpbmVQb3NpdGlvbnNbY291bnQgLSAxXSxcbiAgICAgICAgICB0cnVlLFxuICAgICAgICApO1xuICAgICAgICBpZiAobGluZUJyZWFrID09IG51bGwpIHtcbiAgICAgICAgICBsb29wRnJhbWUuYnJlYWtMb29wKCk7XG4gICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuZmluaXNoQnJlYWsobGluZUJyZWFrLCBmYWxzZSwgZmFsc2UpLnRoZW4oKCkgPT4ge1xuICAgICAgICAgIHRvdGFsTGluZUNvdW50ICs9IGNvdW50O1xuICAgICAgICAgIHRoaXMubGF5b3V0Q29udGV4dFxuICAgICAgICAgICAgLnBlZWxPZmYobGluZUJyZWFrLCAwKVxuICAgICAgICAgICAgLnRoZW4oKHJlc05vZGVDb250ZXh0UGFyYW0pID0+IHtcbiAgICAgICAgICAgICAgbm9kZUNvbnRleHQgPSByZXNOb2RlQ29udGV4dFBhcmFtO1xuICAgICAgICAgICAgICB0aGlzLmZpeEp1c3RpZmljYXRpb25JZk5lZWRlZChub2RlQ29udGV4dCwgZmFsc2UpO1xuICAgICAgICAgICAgICBmaXJzdFBzZXVkbyA9IG5vZGVDb250ZXh0LmZpcnN0UHNldWRvO1xuICAgICAgICAgICAgICBsYXN0Q2hlY2tQb2ludHMgPSBbXTsgLy8gV2lwZSBvdXQgbGluZSBicmVha3MgaW5zaWRlIHBzZXVkb2VsZW1lbnRzXG4gICAgICAgICAgICAgIHRoaXMuYnVpbGRWaWV3VG9OZXh0QmxvY2tFZGdlKG5vZGVDb250ZXh0LCBsYXN0Q2hlY2tQb2ludHMpLnRoZW4oXG4gICAgICAgICAgICAgICAgKHJlc05vZGVDb250ZXh0UGFyYW0pID0+IHtcbiAgICAgICAgICAgICAgICAgIHJlc05vZGVDb250ZXh0ID0gcmVzTm9kZUNvbnRleHRQYXJhbTtcbiAgICAgICAgICAgICAgICAgIGxvb3BGcmFtZS5jb250aW51ZUxvb3AoKTtcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICApO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIH0pO1xuICAgICAgfSlcbiAgICAgIC50aGVuKCgpID0+IHtcbiAgICAgICAgQXJyYXkucHJvdG90eXBlLnB1c2guYXBwbHkoY2hlY2tQb2ludHMsIGxhc3RDaGVja1BvaW50cyk7XG4gICAgICAgIGlmIChWSVZMSU9TVFlMRV9ERUJVRykge1xuICAgICAgICAgIHZhbGlkYXRlQ2hlY2tQb2ludHMoY2hlY2tQb2ludHMpO1xuICAgICAgICB9XG4gICAgICAgIGZyYW1lLmZpbmlzaChyZXNOb2RlQ29udGV4dCk7XG4gICAgICB9KTtcbiAgICByZXR1cm4gZnJhbWUucmVzdWx0KCk7XG4gIH1cblxuICBpc0xvbmVJbWFnZShjaGVja1BvaW50czogVnRyZWUuTm9kZUNvbnRleHRbXSk6IGJvb2xlYW4ge1xuICAgIGlmIChjaGVja1BvaW50cy5sZW5ndGggIT0gMiAmJiB0aGlzLmJyZWFrUG9zaXRpb25zLmxlbmd0aCA+IDApIHtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gICAgcmV0dXJuIChcbiAgICAgIGNoZWNrUG9pbnRzWzBdLnNvdXJjZU5vZGUgPT0gY2hlY2tQb2ludHNbMV0uc291cmNlTm9kZSAmJlxuICAgICAgbWVkaWFUYWdzWyhjaGVja1BvaW50c1swXS5zb3VyY2VOb2RlIGFzIEVsZW1lbnQpLmxvY2FsTmFtZV1cbiAgICApO1xuICB9XG5cbiAgZ2V0VHJhaWxpbmdNYXJnaW5FZGdlQWRqdXN0bWVudChcbiAgICB0cmFpbGluZ0VkZ2VDb250ZXh0czogVnRyZWUuTm9kZUNvbnRleHRbXSxcbiAgKTogbnVtYmVyIHtcbiAgICAvLyBNYXJnaW5zIHB1c2ggdGhlIGNvbXB1dGVkIGhlaWdodCwgYnV0IGFyZSBub3QgY291bnRlZCBhcyBvdmVyZmxvdy4gV2VcbiAgICAvLyBuZWVkIHRvIGZpbmQgdGhlIG92ZXJhbGwgY29sbGFwc2VkIG1hcmdpbiBmcm9tIGFsbCBlbmNsb3NlZCBibG9ja3MuXG4gICAgbGV0IG1heFBvcyA9IDA7XG4gICAgbGV0IG1pbk5lZyA9IDA7XG4gICAgZm9yIChsZXQgaSA9IHRyYWlsaW5nRWRnZUNvbnRleHRzLmxlbmd0aCAtIDE7IGkgPj0gMDsgaS0tKSB7XG4gICAgICBjb25zdCBub2RlQ29udGV4dCA9IHRyYWlsaW5nRWRnZUNvbnRleHRzW2ldO1xuICAgICAgaWYgKFxuICAgICAgICAhbm9kZUNvbnRleHQuYWZ0ZXIgfHxcbiAgICAgICAgIW5vZGVDb250ZXh0LnZpZXdOb2RlIHx8XG4gICAgICAgIG5vZGVDb250ZXh0LnZpZXdOb2RlLm5vZGVUeXBlICE9IDFcbiAgICAgICkge1xuICAgICAgICBicmVhaztcbiAgICAgIH1cbiAgICAgIGNvbnN0IG1hcmdpbiA9IHRoaXMuZ2V0Q29tcHV0ZWRNYXJnaW4obm9kZUNvbnRleHQudmlld05vZGUgYXMgRWxlbWVudCk7XG4gICAgICBjb25zdCBtID0gdGhpcy52ZXJ0aWNhbCA/IC1tYXJnaW4ubGVmdCA6IG1hcmdpbi5ib3R0b207XG4gICAgICBpZiAobSA+IDApIHtcbiAgICAgICAgbWF4UG9zID0gTWF0aC5tYXgobWF4UG9zLCBtKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIG1pbk5lZyA9IE1hdGgubWluKG1pbk5lZywgbSk7XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiBtYXhQb3MgLSBtaW5OZWc7XG4gIH1cblxuICAvKipcbiAgICogTGF5b3V0IGEgc2luZ2xlIENTUyBib3guXG4gICAqL1xuICBsYXlvdXRCcmVha2FibGVCbG9jayhcbiAgICBub2RlQ29udGV4dDogVnRyZWUuTm9kZUNvbnRleHQsXG4gICk6IFRhc2suUmVzdWx0PFZ0cmVlLk5vZGVDb250ZXh0PiB7XG4gICAgY29uc3QgZnJhbWU6IFRhc2suRnJhbWU8VnRyZWUuTm9kZUNvbnRleHQ+ID0gVGFzay5uZXdGcmFtZShcbiAgICAgIFwibGF5b3V0QnJlYWthYmxlQmxvY2tcIixcbiAgICApO1xuICAgIGNvbnN0IGNoZWNrUG9pbnRzOiBWdHJlZS5Ob2RlQ29udGV4dFtdID0gW107XG4gICAgdGhpcy5idWlsZFZpZXdUb05leHRCbG9ja0VkZ2Uobm9kZUNvbnRleHQsIGNoZWNrUG9pbnRzKS50aGVuKFxuICAgICAgKHJlc05vZGVDb250ZXh0KSA9PiB7XG4gICAgICAgIC8vIGF0IHRoaXMgcG9pbnQgYSBzaW5nbGUgYmxvY2sgd2FzIGFwcGVuZGVkIHRvIHRoZSBjb2x1bW5cbiAgICAgICAgLy8gZmxvd1Bvc2l0aW9uIGlzIGVpdGhlciBudWxsIG9yXG4gICAgICAgIC8vICAtIGlmICFhZnRlcjogY29udGFpbnMgdmlldyBmb3IgdGhlIG5leHQgYmxvY2sgZWxlbWVudFxuICAgICAgICAvLyAgLSBpZiBhZnRlcjogY29udGFpbnMgdmlldyBmb3IgdGhlIGVuY2xvc2luZyBibG9jayBlbGVtZW50XG4gICAgICAgIGNvbnN0IGNoZWNrUG9pbnRJbmRleCA9IGNoZWNrUG9pbnRzLmxlbmd0aCAtIDE7XG4gICAgICAgIGlmIChjaGVja1BvaW50SW5kZXggPCAwKSB7XG4gICAgICAgICAgZnJhbWUuZmluaXNoKHJlc05vZGVDb250ZXh0KTtcbiAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cblxuICAgICAgICAvLyBSZWNvcmQgdGhlIGhlaWdodFxuICAgICAgICAvLyBUT0RPOiBzaG91bGQgdGhpcyBiZSBkb25lIGFmdGVyIGZpcnN0LWxpbmUgY2FsY3VsYXRpb24/XG4gICAgICAgIGxldCBlZGdlID0gdGhpcy5jYWxjdWxhdGVFZGdlKFxuICAgICAgICAgIHJlc05vZGVDb250ZXh0LFxuICAgICAgICAgIGNoZWNrUG9pbnRzLFxuICAgICAgICAgIGNoZWNrUG9pbnRJbmRleCxcbiAgICAgICAgICBjaGVja1BvaW50c1tjaGVja1BvaW50SW5kZXhdLmJveE9mZnNldCxcbiAgICAgICAgKTtcbiAgICAgICAgbGV0IG92ZXJmbG93biA9IGZhbHNlO1xuICAgICAgICBpZiAoXG4gICAgICAgICAgIXJlc05vZGVDb250ZXh0IHx8XG4gICAgICAgICAgIUxheW91dEhlbHBlci5pc09ycGhhbihyZXNOb2RlQ29udGV4dC52aWV3Tm9kZSlcbiAgICAgICAgKSB7XG4gICAgICAgICAgY29uc3Qgb2Zmc2V0cyA9IEJyZWFrUG9zaXRpb24uY2FsY3VsYXRlT2Zmc2V0KFxuICAgICAgICAgICAgcmVzTm9kZUNvbnRleHQsXG4gICAgICAgICAgICB0aGlzLmNvbGxlY3RFbGVtZW50c09mZnNldCgpLFxuICAgICAgICAgICk7XG4gICAgICAgICAgb3ZlcmZsb3duID0gdGhpcy5pc092ZXJmbG93bihcbiAgICAgICAgICAgIGVkZ2UgKyAodGhpcy52ZXJ0aWNhbCA/IC0xIDogMSkgKiBvZmZzZXRzLm1pbmltdW0sXG4gICAgICAgICAgKTtcbiAgICAgICAgICBpZiAoXG4gICAgICAgICAgICB0aGlzLmlzT3ZlcmZsb3duKFxuICAgICAgICAgICAgICBlZGdlICsgKHRoaXMudmVydGljYWwgPyAtMSA6IDEpICogb2Zmc2V0cy5jdXJyZW50LFxuICAgICAgICAgICAgKSAmJlxuICAgICAgICAgICAgIXRoaXMubm9kZUNvbnRleHRPdmVyZmxvd2luZ0R1ZVRvUmVwZXRpdGl2ZUVsZW1lbnRzXG4gICAgICAgICAgKSB7XG4gICAgICAgICAgICB0aGlzLm5vZGVDb250ZXh0T3ZlcmZsb3dpbmdEdWVUb1JlcGV0aXRpdmVFbGVtZW50cyA9IHJlc05vZGVDb250ZXh0O1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBpZiAocmVzTm9kZUNvbnRleHQgPT0gbnVsbCkge1xuICAgICAgICAgIGVkZ2UgKz0gdGhpcy5nZXRUcmFpbGluZ01hcmdpbkVkZ2VBZGp1c3RtZW50KGNoZWNrUG9pbnRzKTtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLnVwZGF0ZU1heFJlYWNoZWRBZnRlckVkZ2UoZWRnZSk7XG4gICAgICAgIGxldCBsaW5lQ29udDogVGFzay5SZXN1bHQ8VnRyZWUuTm9kZUNvbnRleHQ+O1xuICAgICAgICBpZiAobm9kZUNvbnRleHQuZmlyc3RQc2V1ZG8pIHtcbiAgICAgICAgICAvLyBwb3NzaWJseSBuZWVkIHRvIGRlYWwgd2l0aCA6Zmlyc3QtbGluZSBhbmQgZnJpZW5kc1xuICAgICAgICAgIGxpbmVDb250ID0gdGhpcy5wcm9jZXNzTGluZVN0eWxpbmcoXG4gICAgICAgICAgICBub2RlQ29udGV4dCxcbiAgICAgICAgICAgIHJlc05vZGVDb250ZXh0LFxuICAgICAgICAgICAgY2hlY2tQb2ludHMsXG4gICAgICAgICAgKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBsaW5lQ29udCA9IFRhc2submV3UmVzdWx0KHJlc05vZGVDb250ZXh0KTtcbiAgICAgICAgfVxuICAgICAgICBsaW5lQ29udC50aGVuKChub2RlQ29udGV4dCkgPT4ge1xuICAgICAgICAgIHRoaXMucG9zdExheW91dEJsb2NrKG5vZGVDb250ZXh0LCBjaGVja1BvaW50cyk7XG4gICAgICAgICAgaWYgKGNoZWNrUG9pbnRzLmxlbmd0aCA+IDApIHtcbiAgICAgICAgICAgIHRoaXMuc2F2ZUJveEJyZWFrUG9zaXRpb24oY2hlY2tQb2ludHMpO1xuXG4gICAgICAgICAgICAvLyBUT0RPOiBob3cgdG8gc2lnbmFsIG92ZXJmbG93IGluIHRoZSBsYXN0IHBhZ2FyZ2FwaD8/P1xuICAgICAgICAgICAgaWYgKG92ZXJmbG93biAmJiAhdGhpcy5pc0xvbmVJbWFnZShjaGVja1BvaW50cykgJiYgbm9kZUNvbnRleHQpIHtcbiAgICAgICAgICAgICAgbm9kZUNvbnRleHQgPSBub2RlQ29udGV4dC5tb2RpZnkoKTtcbiAgICAgICAgICAgICAgbm9kZUNvbnRleHQub3ZlcmZsb3cgPSB0cnVlO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgICBmcmFtZS5maW5pc2gobm9kZUNvbnRleHQpO1xuICAgICAgICB9KTtcbiAgICAgIH0sXG4gICAgKTtcbiAgICByZXR1cm4gZnJhbWUucmVzdWx0KCk7XG4gIH1cblxuICBwb3N0TGF5b3V0QmxvY2soXG4gICAgbm9kZUNvbnRleHQ6IFZ0cmVlLk5vZGVDb250ZXh0LFxuICAgIGNoZWNrUG9pbnRzOiBWdHJlZS5Ob2RlQ29udGV4dFtdLFxuICApIHtcbiAgICBjb25zdCBob29rczogUGx1Z2luLlBvc3RMYXlvdXRCbG9ja0hvb2tbXSA9IFBsdWdpbi5nZXRIb29rc0Zvck5hbWUoXG4gICAgICBQbHVnaW4uSE9PS1MuUE9TVF9MQVlPVVRfQkxPQ0ssXG4gICAgKTtcbiAgICBob29rcy5mb3JFYWNoKChob29rKSA9PiB7XG4gICAgICBob29rKG5vZGVDb250ZXh0LCBjaGVja1BvaW50cywgdGhpcyk7XG4gICAgfSk7XG4gIH1cblxuICBmaW5kRW5kT2ZMaW5lKFxuICAgIGxpbmVQb3NpdGlvbjogbnVtYmVyLFxuICAgIGNoZWNrUG9pbnRzOiBWdHJlZS5Ob2RlQ29udGV4dFtdLFxuICAgIGlzVXBkYXRlTWF4UmVhY2hlZEFmdGVyRWRnZTogYm9vbGVhbixcbiAgKToge1xuICAgIG5vZGVDb250ZXh0OiBWdHJlZS5Ob2RlQ29udGV4dDtcbiAgICBpbmRleDogbnVtYmVyO1xuICAgIGNoZWNrUG9pbnRJbmRleDogbnVtYmVyO1xuICB9IHtcbiAgICBpZiAoVklWTElPU1RZTEVfREVCVUcpIHtcbiAgICAgIHZhbGlkYXRlQ2hlY2tQb2ludHMoY2hlY2tQb2ludHMpO1xuICAgIH1cblxuICAgIC8vIFdvcmthcm91bmQgZm9yIEJsaW5rIG5vdCByZXR1cm5pbmcgY29ycmVjdCBmcmFjdGlvbmFsIHZhbHVlcyBmb3JcbiAgICAvLyBSYW5nZS5nZXRDbGllbnRSZWN0cy5cbiAgICAvLyBodHRwczovL2J1Z3MuY2hyb21pdW0ub3JnL3AvY2hyb21pdW0vaXNzdWVzL2RldGFpbD9pZD02Mjk4MjhcbiAgICBjb25zdCBlZmZlY3RpdmVMaW5lUG9zaXRpb24gPSB0aGlzLnZlcnRpY2FsXG4gICAgICA/IGxpbmVQb3NpdGlvbiAtIDFcbiAgICAgIDogbGluZVBvc2l0aW9uICsgMTtcblxuICAgIC8vIGZpbmQgdGhlIGZpcnN0IGNoYXJhY3RlciB3aGljaCBpcyBvdXRcbiAgICBsZXQgbG93Q1AgPSAwO1xuICAgIGxldCBsb3cgPSBjaGVja1BvaW50c1swXS5ib3hPZmZzZXQ7XG4gICAgbGV0IGxvdzEgPSBsb3dDUDtcbiAgICBsZXQgaGlnaENQID0gY2hlY2tQb2ludHMubGVuZ3RoIC0gMTtcbiAgICBsZXQgaGlnaCA9IGNoZWNrUG9pbnRzW2hpZ2hDUF0uYm94T2Zmc2V0O1xuICAgIGxldCBtaWQ6IG51bWJlcjtcbiAgICB3aGlsZSAobG93IDwgaGlnaCkge1xuICAgICAgbWlkID0gbG93ICsgTWF0aC5jZWlsKChoaWdoIC0gbG93KSAvIDIpO1xuXG4gICAgICAvLyBmaW5kIHRoZSBub2RlIHdoaWNoIGNvbnRhaW5zIG1pZCBpbmRleFxuICAgICAgbG93MSA9IGxvd0NQO1xuICAgICAgbGV0IGhpZ2gxID0gaGlnaENQO1xuICAgICAgd2hpbGUgKGxvdzEgPCBoaWdoMSkge1xuICAgICAgICBjb25zdCBtaWQxID0gbG93MSArIE1hdGguY2VpbCgoaGlnaDEgLSBsb3cxKSAvIDIpO1xuICAgICAgICBpZiAoY2hlY2tQb2ludHNbbWlkMV0uYm94T2Zmc2V0ID4gbWlkKSB7XG4gICAgICAgICAgaGlnaDEgPSBtaWQxIC0gMTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBsb3cxID0gbWlkMTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgY29uc3QgZWRnZSA9IHRoaXMuY2FsY3VsYXRlRWRnZShudWxsLCBjaGVja1BvaW50cywgbG93MSwgbWlkKTtcbiAgICAgIGlmIChcbiAgICAgICAgdGhpcy52ZXJ0aWNhbFxuICAgICAgICAgID8gZWRnZSA8PSBlZmZlY3RpdmVMaW5lUG9zaXRpb25cbiAgICAgICAgICA6IGVkZ2UgPj0gZWZmZWN0aXZlTGluZVBvc2l0aW9uXG4gICAgICApIHtcbiAgICAgICAgaGlnaCA9IG1pZCAtIDE7XG4gICAgICAgIHdoaWxlIChjaGVja1BvaW50c1tsb3cxXS5ib3hPZmZzZXQgPT0gbWlkKSB7XG4gICAgICAgICAgbG93MS0tO1xuICAgICAgICB9XG4gICAgICAgIGhpZ2hDUCA9IGxvdzE7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBpZiAoaXNVcGRhdGVNYXhSZWFjaGVkQWZ0ZXJFZGdlKSB7XG4gICAgICAgICAgdGhpcy51cGRhdGVNYXhSZWFjaGVkQWZ0ZXJFZGdlKGVkZ2UpO1xuICAgICAgICB9XG4gICAgICAgIGxvdyA9IG1pZDtcbiAgICAgICAgbG93Q1AgPSBsb3cxO1xuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4ge1xuICAgICAgbm9kZUNvbnRleHQ6IGNoZWNrUG9pbnRzW2xvdzFdLFxuICAgICAgaW5kZXg6IGxvdyxcbiAgICAgIGNoZWNrUG9pbnRJbmRleDogbG93MSxcbiAgICB9O1xuICB9XG5cbiAgZmluZEFjY2VwdGFibGVCcmVha0luc2lkZShcbiAgICBjaGVja1BvaW50czogVnRyZWUuTm9kZUNvbnRleHRbXSxcbiAgICBlZGdlUG9zaXRpb246IG51bWJlcixcbiAgICBmb3JjZTogYm9vbGVhbixcbiAgKTogVnRyZWUuTm9kZUNvbnRleHQge1xuICAgIGNvbnN0IHBvc2l0aW9uID0gdGhpcy5maW5kRW5kT2ZMaW5lKGVkZ2VQb3NpdGlvbiwgY2hlY2tQb2ludHMsIHRydWUpO1xuICAgIGxldCBub2RlQ29udGV4dCA9IHBvc2l0aW9uLm5vZGVDb250ZXh0O1xuICAgIGNvbnN0IHZpZXdOb2RlID0gbm9kZUNvbnRleHQudmlld05vZGU7XG4gICAgaWYgKHZpZXdOb2RlLm5vZGVUeXBlICE9IDEpIHtcbiAgICAgIGNvbnN0IHRleHROb2RlID0gdmlld05vZGUgYXMgVGV4dDtcbiAgICAgIGNvbnN0IHRleHROb2RlQnJlYWtlciA9IHRoaXMucmVzb2x2ZVRleHROb2RlQnJlYWtlcihub2RlQ29udGV4dCk7XG4gICAgICBub2RlQ29udGV4dCA9IHRleHROb2RlQnJlYWtlci5icmVha1RleHROb2RlKFxuICAgICAgICB0ZXh0Tm9kZSxcbiAgICAgICAgbm9kZUNvbnRleHQsXG4gICAgICAgIHBvc2l0aW9uLmluZGV4LFxuICAgICAgICBjaGVja1BvaW50cyxcbiAgICAgICAgcG9zaXRpb24uY2hlY2tQb2ludEluZGV4LFxuICAgICAgICBmb3JjZSxcbiAgICAgICk7XG4gICAgfVxuICAgIHRoaXMuY2xlYXJPdmVyZmxvd25WaWV3Tm9kZXMobm9kZUNvbnRleHQsIGZhbHNlKTtcbiAgICByZXR1cm4gbm9kZUNvbnRleHQ7XG4gIH1cblxuICByZXNvbHZlVGV4dE5vZGVCcmVha2VyKG5vZGVDb250ZXh0OiBWdHJlZS5Ob2RlQ29udGV4dCk6IFRleHROb2RlQnJlYWtlciB7XG4gICAgY29uc3QgaG9va3M6IFBsdWdpbi5SZXNvbHZlVGV4dE5vZGVCcmVha2VySG9va1tdID0gUGx1Z2luLmdldEhvb2tzRm9yTmFtZShcbiAgICAgIFBsdWdpbi5IT09LUy5SRVNPTFZFX1RFWFRfTk9ERV9CUkVBS0VSLFxuICAgICk7XG4gICAgcmV0dXJuIGhvb2tzLnJlZHVjZShcbiAgICAgIChwcmV2LCBob29rKSA9PiBob29rKG5vZGVDb250ZXh0KSB8fCBwcmV2LFxuICAgICAgVGV4dE5vZGVCcmVha2VyLmluc3RhbmNlLFxuICAgICk7XG4gIH1cblxuICAvKipcbiAgICogUmVhZCByYW5nZXMgc2tpcHBpbmcgc3BlY2lhbCBlbG1lbnRzXG4gICAqL1xuICBnZXRSYW5nZUJveGVzKHN0YXJ0OiBOb2RlLCBlbmQ6IE5vZGUpOiBWdHJlZS5DbGllbnRSZWN0W10ge1xuICAgIGNvbnN0IGFyciA9IFtdO1xuICAgIGNvbnN0IHJhbmdlID0gc3RhcnQub3duZXJEb2N1bWVudC5jcmVhdGVSYW5nZSgpO1xuICAgIGxldCB3ZW50VXAgPSBmYWxzZTtcbiAgICBsZXQgbm9kZSA9IHN0YXJ0O1xuICAgIGxldCBsYXN0R29vZDogTm9kZSA9IG51bGw7XG4gICAgbGV0IGhhdmVTdGFydCA9IGZhbHNlO1xuICAgIGxldCBlbmROb3RSZWFjaGVkID0gdHJ1ZTtcbiAgICB3aGlsZSAoZW5kTm90UmVhY2hlZCkge1xuICAgICAgbGV0IHNlZWtSYW5nZSA9IHRydWU7XG4gICAgICBkbyB7XG4gICAgICAgIGxldCBuZXh0OiBOb2RlID0gbnVsbDtcbiAgICAgICAgaWYgKG5vZGUgPT0gZW5kKSB7XG4gICAgICAgICAgaWYgKGVuZC5ub2RlVHlwZSA9PT0gMSkge1xuICAgICAgICAgICAgLy8gSWYgZW5kIGlzIGFuIGVsZW1lbnQsIGNvbnRpbnVlIHRyYXZlcnNpbmcgaXRzIGNoaWxkcmVuIHRvIGZpbmRcbiAgICAgICAgICAgIC8vIHRoZSBsYXN0IHRleHQgbm9kZSBpbnNpZGUgaXQuIEZpbmlzaCB3aGVuIGVuZCBoYXMgbm8gY2hpbGQgb3JcbiAgICAgICAgICAgIC8vIHdoZW4gY2FtZSBiYWNrIGZyb20gaXRzIGNoaWxkcmVuICh3ZW50VXA9PXRydWUpLlxuICAgICAgICAgICAgZW5kTm90UmVhY2hlZCA9ICEoIWVuZC5maXJzdENoaWxkIHx8IHdlbnRVcCk7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGVuZE5vdFJlYWNoZWQgPSBmYWxzZTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgaWYgKG5vZGUubm9kZVR5cGUgIT0gMSkge1xuICAgICAgICAgIGlmICghaGF2ZVN0YXJ0KSB7XG4gICAgICAgICAgICByYW5nZS5zZXRTdGFydEJlZm9yZShub2RlKTtcbiAgICAgICAgICAgIGhhdmVTdGFydCA9IHRydWU7XG4gICAgICAgICAgfVxuICAgICAgICAgIGxhc3RHb29kID0gbm9kZTtcbiAgICAgICAgfSBlbHNlIGlmICh3ZW50VXApIHtcbiAgICAgICAgICB3ZW50VXAgPSBmYWxzZTtcbiAgICAgICAgfSBlbHNlIGlmIChMYXlvdXRIZWxwZXIuaXNTcGVjaWFsKG5vZGUgYXMgRWxlbWVudCkpIHtcbiAgICAgICAgICAvLyBTa2lwIHNwZWNpYWxcbiAgICAgICAgICBzZWVrUmFuZ2UgPSAhaGF2ZVN0YXJ0O1xuICAgICAgICB9IGVsc2UgaWYgKFxuICAgICAgICAgIChub2RlIGFzIEVsZW1lbnQpLmxvY2FsTmFtZSA9PSBcInJ1YnlcIiB8fFxuICAgICAgICAgIGlzU3BlY2lhbElubGluZURpc3BsYXkoXG4gICAgICAgICAgICB0aGlzLmNsaWVudExheW91dC5nZXRFbGVtZW50Q29tcHV0ZWRTdHlsZShub2RlIGFzIEVsZW1lbnQpLmRpc3BsYXksXG4gICAgICAgICAgKVxuICAgICAgICApIHtcbiAgICAgICAgICAvLyBydWJ5LCBpbmxpbmUtYmxvY2ssIGV0Yy5cbiAgICAgICAgICBzZWVrUmFuZ2UgPSAhaGF2ZVN0YXJ0O1xuICAgICAgICAgIGlmIChzZWVrUmFuZ2UpIHtcbiAgICAgICAgICAgIHJhbmdlLnNldFN0YXJ0QmVmb3JlKG5vZGUpO1xuICAgICAgICAgICAgaGF2ZVN0YXJ0ID0gdHJ1ZTtcbiAgICAgICAgICAgIGxhc3RHb29kID0gbm9kZTtcbiAgICAgICAgICB9XG4gICAgICAgICAgaWYgKG5vZGUuY29udGFpbnMoZW5kKSkge1xuICAgICAgICAgICAgZW5kTm90UmVhY2hlZCA9IGZhbHNlO1xuICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBuZXh0ID0gbm9kZS5maXJzdENoaWxkO1xuICAgICAgICB9XG4gICAgICAgIGlmICghbmV4dCkge1xuICAgICAgICAgIG5leHQgPSBub2RlLm5leHRTaWJsaW5nO1xuICAgICAgICAgIGlmICghbmV4dCkge1xuICAgICAgICAgICAgd2VudFVwID0gdHJ1ZTtcbiAgICAgICAgICAgIG5leHQgPSBub2RlLnBhcmVudE5vZGU7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIG5vZGUgPSBuZXh0O1xuICAgICAgfSB3aGlsZSAoc2Vla1JhbmdlICYmIGVuZE5vdFJlYWNoZWQpO1xuICAgICAgaWYgKGhhdmVTdGFydCkge1xuICAgICAgICByYW5nZS5zZXRFbmRBZnRlcihsYXN0R29vZCk7XG4gICAgICAgIGNvbnN0IGJveExpc3QgPSB0aGlzLmNsaWVudExheW91dC5nZXRSYW5nZUNsaWVudFJlY3RzKHJhbmdlKTtcbiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBib3hMaXN0Lmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgYXJyLnB1c2goYm94TGlzdFtpXSk7XG4gICAgICAgIH1cbiAgICAgICAgaGF2ZVN0YXJ0ID0gZmFsc2U7XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiBhcnI7XG4gIH1cblxuICAvKipcbiAgICogR2l2ZSBibG9jaydzIGluaXRpYWwgYW5kIGZpbmFsIG5vZGVzLCBmaW5kIHBvc2l0aW9ucyBvZiB0aGUgbGluZSBib3R0b21zLlxuICAgKiBUaGlzIGlzLCBvZiBjb3Vyc2UsIHNvbWV3aGF0IGhhY2t5IGltcGxlbWVudGF0aW9uLlxuICAgKiBAcmV0dXJuIHBvc2l0aW9uIG9mIGxpbmUgYnJlYWtzXG4gICAqL1xuICBmaW5kTGluZVBvc2l0aW9ucyhjaGVja1BvaW50czogVnRyZWUuTm9kZUNvbnRleHRbXSk6IG51bWJlcltdIHtcbiAgICBjb25zdCBMT1dfT1ZFUkxBUCA9IDAuMjtcbiAgICBjb25zdCBNSURfT1ZFUkxBUCA9IDAuNjtcbiAgICBjb25zdCBwb3NpdGlvbnMgPSBbXTtcbiAgICBjb25zdCBib3hlcyA9IHRoaXMuZ2V0UmFuZ2VCb3hlcyhcbiAgICAgIGNoZWNrUG9pbnRzWzBdLnZpZXdOb2RlLFxuICAgICAgY2hlY2tQb2ludHNbY2hlY2tQb2ludHMubGVuZ3RoIC0gMV0udmlld05vZGUsXG4gICAgKTtcbiAgICBib3hlcy5zb3J0KFxuICAgICAgdGhpcy52ZXJ0aWNhbFxuICAgICAgICA/IFZ0cmVlSW1wbC5jbGllbnRyZWN0RGVjcmVhc2luZ1JpZ2h0XG4gICAgICAgIDogVnRyZWVJbXBsLmNsaWVudHJlY3RJbmNyZWFzaW5nVG9wLFxuICAgICk7XG4gICAgbGV0IGxpbmVCZWZvcmUgPSAwO1xuICAgIGxldCBsaW5lQWZ0ZXIgPSAwO1xuICAgIGxldCBsaW5lRW5kID0gMDtcbiAgICBsZXQgbGluZUxlbmd0aCA9IDA7XG4gICAgbGV0IGkgPSAwO1xuICAgIGNvbnN0IGRpciA9IHRoaXMuZ2V0Qm94RGlyKCk7XG4gICAgd2hpbGUgKHRydWUpIHtcbiAgICAgIGlmIChpIDwgYm94ZXMubGVuZ3RoKSB7XG4gICAgICAgIGNvbnN0IGJveCA9IGJveGVzW2ldO1xuICAgICAgICBsZXQgb3ZlcmxhcCA9IDE7XG4gICAgICAgIGlmIChsaW5lTGVuZ3RoID4gMCkge1xuICAgICAgICAgIGNvbnN0IGJveFNpemUgPSBNYXRoLm1heCh0aGlzLmdldEJveFNpemUoYm94KSwgMSk7XG4gICAgICAgICAgaWYgKGRpciAqIHRoaXMuZ2V0QmVmb3JlRWRnZShib3gpIDwgZGlyICogbGluZUJlZm9yZSkge1xuICAgICAgICAgICAgb3ZlcmxhcCA9IChkaXIgKiAodGhpcy5nZXRBZnRlckVkZ2UoYm94KSAtIGxpbmVCZWZvcmUpKSAvIGJveFNpemU7XG4gICAgICAgICAgfSBlbHNlIGlmIChkaXIgKiB0aGlzLmdldEFmdGVyRWRnZShib3gpID4gZGlyICogbGluZUFmdGVyKSB7XG4gICAgICAgICAgICBvdmVybGFwID0gKGRpciAqIChsaW5lQWZ0ZXIgLSB0aGlzLmdldEJlZm9yZUVkZ2UoYm94KSkpIC8gYm94U2l6ZTtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgb3ZlcmxhcCA9IDE7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGlmIChcbiAgICAgICAgICBsaW5lTGVuZ3RoID09IDAgfHxcbiAgICAgICAgICBvdmVybGFwID49IE1JRF9PVkVSTEFQIHx8XG4gICAgICAgICAgKG92ZXJsYXAgPj0gTE9XX09WRVJMQVAgJiYgdGhpcy5nZXRTdGFydEVkZ2UoYm94KSA+PSBsaW5lRW5kIC0gMSlcbiAgICAgICAgKSB7XG4gICAgICAgICAgbGluZUVuZCA9IHRoaXMuZ2V0RW5kRWRnZShib3gpO1xuICAgICAgICAgIGlmICh0aGlzLnZlcnRpY2FsKSB7XG4gICAgICAgICAgICBsaW5lQmVmb3JlID1cbiAgICAgICAgICAgICAgbGluZUxlbmd0aCA9PSAwID8gYm94LnJpZ2h0IDogTWF0aC5tYXgobGluZUJlZm9yZSwgYm94LnJpZ2h0KTtcbiAgICAgICAgICAgIGxpbmVBZnRlciA9XG4gICAgICAgICAgICAgIGxpbmVMZW5ndGggPT0gMCA/IGJveC5sZWZ0IDogTWF0aC5taW4obGluZUFmdGVyLCBib3gubGVmdCk7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGxpbmVCZWZvcmUgPVxuICAgICAgICAgICAgICBsaW5lTGVuZ3RoID09IDAgPyBib3gudG9wIDogTWF0aC5taW4obGluZUJlZm9yZSwgYm94LnRvcCk7XG4gICAgICAgICAgICBsaW5lQWZ0ZXIgPVxuICAgICAgICAgICAgICBsaW5lTGVuZ3RoID09IDAgPyBib3guYm90dG9tIDogTWF0aC5tYXgobGluZUFmdGVyLCBib3guYm90dG9tKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgbGluZUxlbmd0aCsrO1xuICAgICAgICAgIGkrKztcbiAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICAvLyBBZGQgbGluZVxuICAgICAgaWYgKGxpbmVMZW5ndGggPiAwKSB7XG4gICAgICAgIHBvc2l0aW9ucy5wdXNoKGxpbmVBZnRlcik7XG4gICAgICAgIGxpbmVMZW5ndGggPSAwO1xuICAgICAgfVxuICAgICAgaWYgKGkgPj0gYm94ZXMubGVuZ3RoKSB7XG4gICAgICAgIGJyZWFrO1xuICAgICAgfVxuICAgIH1cbiAgICBwb3NpdGlvbnMuc29ydChCYXNlLm51bWJlckNvbXBhcmUpO1xuICAgIGlmICh0aGlzLnZlcnRpY2FsKSB7XG4gICAgICBwb3NpdGlvbnMucmV2ZXJzZSgpO1xuICAgIH1cbiAgICByZXR1cm4gcG9zaXRpb25zO1xuICB9XG5cbiAgY2FsY3VsYXRlQ2xvbmVkUGFkZGluZ0JvcmRlcihub2RlQ29udGV4dDogVnRyZWUuTm9kZUNvbnRleHQpOiBudW1iZXIge1xuICAgIGxldCBjbG9uZWRQYWRkaW5nQm9yZGVyID0gMDtcbiAgICBub2RlQ29udGV4dC53YWxrVXBCbG9ja3MoKGJsb2NrKSA9PiB7XG4gICAgICBpZiAoYmxvY2suaW5oZXJpdGVkUHJvcHNbXCJib3gtZGVjb3JhdGlvbi1icmVha1wiXSA9PT0gXCJjbG9uZVwiKSB7XG4gICAgICAgIEFzc2VydHMuYXNzZXJ0KGJsb2NrLnZpZXdOb2RlIGluc3RhbmNlb2YgRWxlbWVudCk7XG4gICAgICAgIGNvbnN0IHBhZGRpbmdCb3JkZXJzID0gdGhpcy5nZXRDb21wdXRlZFBhZGRpbmdCb3JkZXIoXG4gICAgICAgICAgYmxvY2sudmlld05vZGUgYXMgRWxlbWVudCxcbiAgICAgICAgKTtcbiAgICAgICAgY2xvbmVkUGFkZGluZ0JvcmRlciArPSBibG9jay52ZXJ0aWNhbFxuICAgICAgICAgID8gLXBhZGRpbmdCb3JkZXJzLmxlZnRcbiAgICAgICAgICA6IHBhZGRpbmdCb3JkZXJzLmJvdHRvbTtcbiAgICAgICAgaWYgKGJsb2NrLmRpc3BsYXkgPT09IFwidGFibGVcIikge1xuICAgICAgICAgIGNsb25lZFBhZGRpbmdCb3JkZXIgKz0gYmxvY2suYmxvY2tCb3JkZXJTcGFjaW5nO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfSk7XG4gICAgcmV0dXJuIGNsb25lZFBhZGRpbmdCb3JkZXI7XG4gIH1cblxuICBwcml2YXRlIGdldE9mZnNldEJ5UmVwZXRpdGl2ZUVsZW1lbnRzKFxuICAgIGJwPzogQnJlYWtQb3NpdGlvbi5CcmVha1Bvc2l0aW9uLFxuICApOiBudW1iZXIge1xuICAgIGxldCBvZmZzZXQ6IHsgY3VycmVudDogbnVtYmVyOyBtaW5pbXVtOiBudW1iZXIgfTtcbiAgICBpZiAoYnApIHtcbiAgICAgIG9mZnNldCA9IGJwLmNhbGN1bGF0ZU9mZnNldCh0aGlzKTtcbiAgICB9IGVsc2Uge1xuICAgICAgb2Zmc2V0ID0gQnJlYWtQb3NpdGlvbi5jYWxjdWxhdGVPZmZzZXQoXG4gICAgICAgIG51bGwsXG4gICAgICAgIHRoaXMuY29sbGVjdEVsZW1lbnRzT2Zmc2V0KCksXG4gICAgICApO1xuICAgIH1cbiAgICByZXR1cm4gb2Zmc2V0LmN1cnJlbnQ7XG4gIH1cblxuICBmaW5kQm94QnJlYWtQb3NpdGlvbihcbiAgICBicDogQm94QnJlYWtQb3NpdGlvbixcbiAgICBmb3JjZTogYm9vbGVhbixcbiAgKTogVnRyZWUuTm9kZUNvbnRleHQge1xuICAgIGNvbnN0IGNoZWNrUG9pbnRzID0gYnAuY2hlY2tQb2ludHM7XG4gICAgbGV0IGJsb2NrID0gY2hlY2tQb2ludHNbMF07XG4gICAgd2hpbGUgKGJsb2NrLnBhcmVudCAmJiBibG9jay5pbmxpbmUpIHtcbiAgICAgIGJsb2NrID0gYmxvY2sucGFyZW50O1xuICAgIH1cbiAgICBsZXQgd2lkb3dzOiBudW1iZXI7XG4gICAgbGV0IG9ycGhhbnM6IG51bWJlcjtcbiAgICBpZiAoZm9yY2UpIHtcbiAgICAgIC8vIExhc3QgcmVzb3J0LCBpZ25vcmUgd2lkb3dzL29ycGhhbnNcbiAgICAgIHdpZG93cyA9IDE7XG4gICAgICBvcnBoYW5zID0gMTtcbiAgICB9IGVsc2Uge1xuICAgICAgLy8gR2V0IHdpZG93cy9vcnBoYW5zIHNldHRpbmdzIGZyb20gdGhlIGJsb2NrIGVsZW1lbnRcbiAgICAgIHdpZG93cyA9IE1hdGgubWF4KFxuICAgICAgICAoKGJsb2NrLmluaGVyaXRlZFByb3BzW1wid2lkb3dzXCJdIGFzIG51bWJlcikgfHwgMikgLSAwLFxuICAgICAgICAxLFxuICAgICAgKTtcbiAgICAgIG9ycGhhbnMgPSBNYXRoLm1heChcbiAgICAgICAgKChibG9jay5pbmhlcml0ZWRQcm9wc1tcIm9ycGhhbnNcIl0gYXMgbnVtYmVyKSB8fCAyKSAtIDAsXG4gICAgICAgIDEsXG4gICAgICApO1xuICAgIH1cblxuICAgIC8vIEluIGNhc2Ugb2YgYm94LWRlY29yYXRpb24tYnJlYWs6IGNsb25lLCB3aWR0aCAob3IgaGVpZ2h0IGluIHZlcnRpY2FsXG4gICAgLy8gd3JpdGluZyBtb2RlKSBvZiBjbG9uZWQgcGFkZGluZ3MgYW5kIGJvcmRlcnMgc2hvdWxkIGJlIHRha2VuIGludG9cbiAgICAvLyBhY2NvdW50LlxuICAgIGNvbnN0IGNsb25lZFBhZGRpbmdCb3JkZXIgPSB0aGlzLmNhbGN1bGF0ZUNsb25lZFBhZGRpbmdCb3JkZXIoYmxvY2spO1xuXG4gICAgLy8gU2VsZWN0IHRoZSBmaXJzdCBvdmVyZmxvd2luZyBsaW5lIGJyZWFrIHBvc2l0aW9uXG4gICAgY29uc3QgbGluZVBvc2l0aW9ucyA9IHRoaXMuZmluZExpbmVQb3NpdGlvbnMoY2hlY2tQb2ludHMpO1xuICAgIGxldCBlZGdlID0gdGhpcy5mb290bm90ZUVkZ2UgLSBjbG9uZWRQYWRkaW5nQm9yZGVyO1xuICAgIGNvbnN0IGRpciA9IHRoaXMuZ2V0Qm94RGlyKCk7XG4gICAgY29uc3QgcmVwZXRpdGl2ZUVsZW1lbnRzT2Zmc2V0ID0gdGhpcy5nZXRPZmZzZXRCeVJlcGV0aXRpdmVFbGVtZW50cyhicCk7XG4gICAgZWRnZSAtPSBkaXIgKiByZXBldGl0aXZlRWxlbWVudHNPZmZzZXQ7XG5cbiAgICAvLyBJZiBhbiBcIm92ZXJmbG93aW5nXCIgY2hlY2twb2ludCAoZS5nLiBub3QgYWxsb3dlZCBieSBMYXlvdXRDb25zdHJhaW50KVxuICAgIC8vIGV4aXN0cyBiZWZvcmUgdGhlIGVkZ2UsIGEgbGluZSBjb250YWluaW5nIHRoZSBjaGVja3BvaW50IHNob3VsZCBiZVxuICAgIC8vIGRlZmVycmVkIHRvIHRoZSBuZXh0IGNvbHVtbi5cbiAgICBjb25zdCBmaXJzdE92ZXJmbG93aW5nID0gdGhpcy5maW5kRmlyc3RPdmVyZmxvd2luZ0VkZ2VBbmRDaGVja1BvaW50KFxuICAgICAgY2hlY2tQb2ludHMsXG4gICAgKTtcbiAgICBpZiAoaXNOYU4oZmlyc3RPdmVyZmxvd2luZy5lZGdlKSkge1xuICAgICAgZmlyc3RPdmVyZmxvd2luZy5lZGdlID0gZGlyICogSW5maW5pdHk7XG4gICAgfVxuICAgIGxldCBsaW5lSW5kZXggPSBCYXNlLmJpbmFyeVNlYXJjaChsaW5lUG9zaXRpb25zLmxlbmd0aCwgKGkpID0+IHtcbiAgICAgIGNvbnN0IHAgPSBsaW5lUG9zaXRpb25zW2ldO1xuICAgICAgcmV0dXJuIHRoaXMudmVydGljYWxcbiAgICAgICAgPyBwIDwgZWRnZSB8fCBwIDw9IGZpcnN0T3ZlcmZsb3dpbmcuZWRnZVxuICAgICAgICA6IHAgPiBlZGdlIHx8IHAgPj0gZmlyc3RPdmVyZmxvd2luZy5lZGdlO1xuICAgIH0pO1xuXG4gICAgLy8gSWYgbm8gYnJlYWsgcG9pbnQgaXMgZm91bmQgZHVlIHRvIHRoZSBcIm92ZXJmbG93aW5nXCIgY2hlY2twb2ludCxcbiAgICAvLyBnaXZlIHVwIGRlZmVycmluZyBhIGxpbmUgY29udGFpbmluZyB0aGUgY2hlY2twb2ludCBhbmQgdHJ5IHRvIGN1dCB0aGVcbiAgICAvLyBsaW5lIGp1c3QgYmVmb3JlIGl0LlxuICAgIGNvbnN0IGZvcmNlQ3V0QmVmb3JlT3ZlcmZsb3dpbmcgPSBsaW5lSW5kZXggPD0gMDtcbiAgICBpZiAoZm9yY2VDdXRCZWZvcmVPdmVyZmxvd2luZykge1xuICAgICAgbGluZUluZGV4ID0gQmFzZS5iaW5hcnlTZWFyY2gobGluZVBvc2l0aW9ucy5sZW5ndGgsIChpKSA9PlxuICAgICAgICB0aGlzLnZlcnRpY2FsID8gbGluZVBvc2l0aW9uc1tpXSA8IGVkZ2UgOiBsaW5lUG9zaXRpb25zW2ldID4gZWRnZSxcbiAgICAgICk7XG4gICAgfVxuXG4gICAgLy8gRmlyc3QgZWRnZSBhZnRlciB0aGUgb25lIHRoYXQgYm90aCBmaXRzIGFuZCBzYXRpc2ZpZXMgd2lkb3dzIGNvbnN0cmFpbnQuXG4gICAgbGluZUluZGV4ID0gTWF0aC5taW4obGluZVBvc2l0aW9ucy5sZW5ndGggLSB3aWRvd3MsIGxpbmVJbmRleCk7XG4gICAgaWYgKGxpbmVJbmRleCA8IG9ycGhhbnMpIHtcbiAgICAgIC8vIE5vdCBlbm91Z2ggbGluZXMgdG8gc2F0aXNmeSBvcnBoYW5zIGNvbnN0cmFpbnQsIGNhbm5vdCBicmVhayBoZXJlLlxuICAgICAgcmV0dXJuIG51bGw7XG4gICAgfVxuICAgIGVkZ2UgPSBsaW5lUG9zaXRpb25zW2xpbmVJbmRleCAtIDFdO1xuICAgIGxldCBub2RlQ29udGV4dDogVnRyZWUuTm9kZUNvbnRleHQ7XG4gICAgaWYgKGZvcmNlQ3V0QmVmb3JlT3ZlcmZsb3dpbmcpIHtcbiAgICAgIG5vZGVDb250ZXh0ID0gZmlyc3RPdmVyZmxvd2luZy5jaGVja1BvaW50O1xuICAgIH0gZWxzZSB7XG4gICAgICBub2RlQ29udGV4dCA9IHRoaXMuZmluZEFjY2VwdGFibGVCcmVha0luc2lkZShicC5jaGVja1BvaW50cywgZWRnZSwgZm9yY2UpO1xuICAgIH1cbiAgICBpZiAobm9kZUNvbnRleHQpIHtcbiAgICAgIC8vIFdoZW4gbGluZS1oZWlnaHQgaXMgc21hbGwsIHRoZSBlZGdlIGNhbGN1bGF0ZWQgYWJvdmUgKHVzaW5nIFJhbmdlKVxuICAgICAgLy8gY2FuIGJlIGxhcmdlciB0aGFuIHRoZSBlZGdlIG9mIHRoZSBibG9jayBjb250YWluZXIgY29udGFpbmluZyB0aGUgdGV4dC5cbiAgICAgIC8vIFdlIHVwZGF0ZSB0aGUgZWRnZSBieSBtZWFzdXJpbmcgdGhlIGJsb2NrIGVkZ2UuXG4gICAgICBjb25zdCBibG9ja0VkZ2UgPSB0aGlzLmdldEFmdGVyRWRnZU9mQmxvY2tDb250YWluZXIobm9kZUNvbnRleHQpO1xuICAgICAgaWYgKCFpc05hTihibG9ja0VkZ2UpICYmIGJsb2NrRWRnZSA8IGVkZ2UpIHtcbiAgICAgICAgZWRnZSA9IGJsb2NrRWRnZTtcbiAgICAgIH1cbiAgICAgIHRoaXMuY29tcHV0ZWRCbG9ja1NpemUgPVxuICAgICAgICBkaXIgKiAoZWRnZSAtIHRoaXMuYmVmb3JlRWRnZSkgKyByZXBldGl0aXZlRWxlbWVudHNPZmZzZXQ7XG4gICAgfVxuICAgIHJldHVybiBub2RlQ29udGV4dDtcbiAgfVxuXG4gIGdldEFmdGVyRWRnZU9mQmxvY2tDb250YWluZXIobm9kZUNvbnRleHQ6IFZ0cmVlLk5vZGVDb250ZXh0KTogbnVtYmVyIHtcbiAgICBsZXQgYmxvY2tQYXJlbnQgPSBub2RlQ29udGV4dDtcbiAgICBkbyB7XG4gICAgICBibG9ja1BhcmVudCA9IGJsb2NrUGFyZW50LnBhcmVudDtcbiAgICB9IHdoaWxlIChibG9ja1BhcmVudCAmJiBibG9ja1BhcmVudC5pbmxpbmUpO1xuICAgIGlmIChibG9ja1BhcmVudCkge1xuICAgICAgYmxvY2tQYXJlbnQgPSBibG9ja1BhcmVudC5jb3B5KCkubW9kaWZ5KCk7XG4gICAgICBibG9ja1BhcmVudC5hZnRlciA9IHRydWU7XG4gICAgICByZXR1cm4gTGF5b3V0SGVscGVyLmNhbGN1bGF0ZUVkZ2UoXG4gICAgICAgIGJsb2NrUGFyZW50LFxuICAgICAgICB0aGlzLmNsaWVudExheW91dCxcbiAgICAgICAgMCxcbiAgICAgICAgdGhpcy52ZXJ0aWNhbCxcbiAgICAgICk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiBOYU47XG4gICAgfVxuICB9XG5cbiAgZmluZEZpcnN0T3ZlcmZsb3dpbmdFZGdlQW5kQ2hlY2tQb2ludChcbiAgICBjaGVja1BvaW50czogVnRyZWUuTm9kZUNvbnRleHRbXSxcbiAgKTogeyBlZGdlOiBudW1iZXI7IGNoZWNrUG9pbnQ6IFZ0cmVlLk5vZGVDb250ZXh0IHwgbnVsbCB9IHtcbiAgICBjb25zdCBpbmRleCA9IGNoZWNrUG9pbnRzLmZpbmRJbmRleCgoY3ApID0+IGNwLm92ZXJmbG93KTtcbiAgICBpZiAoaW5kZXggPCAwKSB7XG4gICAgICByZXR1cm4geyBlZGdlOiBOYU4sIGNoZWNrUG9pbnQ6IG51bGwgfTtcbiAgICB9XG4gICAgY29uc3QgY3AgPSBjaGVja1BvaW50c1tpbmRleF07XG4gICAgcmV0dXJuIHtcbiAgICAgIGVkZ2U6IHRoaXMuY2FsY3VsYXRlRWRnZShudWxsLCBjaGVja1BvaW50cywgaW5kZXgsIGNwLmJveE9mZnNldCksXG4gICAgICBjaGVja1BvaW50OiBjcCxcbiAgICB9O1xuICB9XG5cbiAgZmluZEVkZ2VCcmVha1Bvc2l0aW9uKFxuICAgIGJwOiBCcmVha1Bvc2l0aW9uLkVkZ2VCcmVha1Bvc2l0aW9uLFxuICApOiBWdHJlZS5Ob2RlQ29udGV4dCB7XG4gICAgdGhpcy5jb21wdXRlZEJsb2NrU2l6ZSA9XG4gICAgICBicC5jb21wdXRlZEJsb2NrU2l6ZSArIHRoaXMuZ2V0T2Zmc2V0QnlSZXBldGl0aXZlRWxlbWVudHMoYnApO1xuICAgIHJldHVybiBicC5wb3NpdGlvbjtcbiAgfVxuXG4gIC8qKlxuICAgKiBGaW5hbGl6ZSBhIGxpbmUgYnJlYWsuXG4gICAqIEByZXR1cm4gaG9saW5nIHRydWVcbiAgICovXG4gIGZpbmlzaEJyZWFrKFxuICAgIG5vZGVDb250ZXh0OiBWdHJlZS5Ob2RlQ29udGV4dCxcbiAgICBmb3JjZVJlbW92ZVNlbGY6IGJvb2xlYW4sXG4gICAgZW5kT2ZDb2x1bW46IGJvb2xlYW4sXG4gICk6IFRhc2suUmVzdWx0PGJvb2xlYW4+IHtcbiAgICBBc3NlcnRzLmFzc2VydChub2RlQ29udGV4dC5mb3JtYXR0aW5nQ29udGV4dCk7XG4gICAgY29uc3QgbGF5b3V0UHJvY2Vzc29yID0gbmV3IExheW91dFByb2Nlc3Nvci5MYXlvdXRQcm9jZXNzb3JSZXNvbHZlcigpLmZpbmQoXG4gICAgICBub2RlQ29udGV4dC5mb3JtYXR0aW5nQ29udGV4dCxcbiAgICApO1xuICAgIGxldCByZXN1bHQgPSBsYXlvdXRQcm9jZXNzb3IuZmluaXNoQnJlYWsoXG4gICAgICB0aGlzLFxuICAgICAgbm9kZUNvbnRleHQsXG4gICAgICBmb3JjZVJlbW92ZVNlbGYsXG4gICAgICBlbmRPZkNvbHVtbixcbiAgICApO1xuICAgIGlmICghcmVzdWx0KSB7XG4gICAgICByZXN1bHQgPSBMYXlvdXRQcm9jZXNzb3IuYmxvY2tMYXlvdXRQcm9jZXNzb3IuZmluaXNoQnJlYWsoXG4gICAgICAgIHRoaXMsXG4gICAgICAgIG5vZGVDb250ZXh0LFxuICAgICAgICBmb3JjZVJlbW92ZVNlbGYsXG4gICAgICAgIGVuZE9mQ29sdW1uLFxuICAgICAgKTtcbiAgICB9XG4gICAgcmV0dXJuIHJlc3VsdDtcbiAgfVxuXG4gIGZpbmRBY2NlcHRhYmxlQnJlYWtQb3NpdGlvbigpOiBCcmVha1Bvc2l0aW9uQW5kTm9kZUNvbnRleHQge1xuICAgIGxldCBicDogTGF5b3V0LkJyZWFrUG9zaXRpb24gPSBudWxsO1xuICAgIGxldCBub2RlQ29udGV4dDogVnRyZWUuTm9kZUNvbnRleHQgPSBudWxsO1xuICAgIGxldCBwZW5hbHR5ID0gMDtcbiAgICBsZXQgbmV4dFBlbmFsdHkgPSAwO1xuICAgIGRvIHtcbiAgICAgIHBlbmFsdHkgPSBuZXh0UGVuYWx0eTtcbiAgICAgIG5leHRQZW5hbHR5ID0gTnVtYmVyLk1BWF9WQUxVRTtcbiAgICAgIGZvciAoXG4gICAgICAgIGxldCBpID0gdGhpcy5icmVha1Bvc2l0aW9ucy5sZW5ndGggLSAxO1xuICAgICAgICBpID49IDAgJiYgIW5vZGVDb250ZXh0O1xuICAgICAgICAtLWlcbiAgICAgICkge1xuICAgICAgICBicCA9IHRoaXMuYnJlYWtQb3NpdGlvbnNbaV07XG4gICAgICAgIG5vZGVDb250ZXh0ID0gYnAuZmluZEFjY2VwdGFibGVCcmVhayh0aGlzLCBwZW5hbHR5KTtcbiAgICAgICAgY29uc3QgbWluUGVuYWx0eSA9IGJwLmdldE1pbkJyZWFrUGVuYWx0eSgpO1xuICAgICAgICBpZiAobWluUGVuYWx0eSA+IHBlbmFsdHkpIHtcbiAgICAgICAgICBuZXh0UGVuYWx0eSA9IE1hdGgubWluKG5leHRQZW5hbHR5LCBtaW5QZW5hbHR5KTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0gd2hpbGUgKFxuICAgICAgLy8gRG9uJ3QgbmVlZCB0byBmaW5kIGEgbm9uLW9wdGltYWwgYnJlYWsgcG9zaXRpb24gaWZcbiAgICAgIC8vIGZvcmNlTm9uZml0dGluZz1mYWxzZVxuICAgICAgbmV4dFBlbmFsdHkgPiBwZW5hbHR5ICYmXG4gICAgICAhbm9kZUNvbnRleHQgJiZcbiAgICAgIHRoaXMuZm9yY2VOb25maXR0aW5nXG4gICAgKTtcbiAgICByZXR1cm4geyBicmVha1Bvc2l0aW9uOiBub2RlQ29udGV4dCA/IGJwIDogbnVsbCwgbm9kZUNvbnRleHQgfTtcbiAgfVxuXG4gIGRvRmluaXNoQnJlYWsoXG4gICAgbm9kZUNvbnRleHQ6IFZ0cmVlLk5vZGVDb250ZXh0LFxuICAgIG92ZXJmbG93bk5vZGVDb250ZXh0OiBWdHJlZS5Ob2RlQ29udGV4dCxcbiAgICBpbml0aWFsTm9kZUNvbnRleHQ6IFZ0cmVlLk5vZGVDb250ZXh0LFxuICAgIGluaXRpYWxDb21wdXRlZEJsb2NrU2l6ZTogbnVtYmVyLFxuICApOiBUYXNrLlJlc3VsdDxWdHJlZS5Ob2RlQ29udGV4dD4ge1xuICAgIGlmIChcbiAgICAgIHRoaXMucGFnZUZsb2F0TGF5b3V0Q29udGV4dC5pc0ludmFsaWRhdGVkKCkgfHxcbiAgICAgIHRoaXMucGFnZUJyZWFrVHlwZSB8fFxuICAgICAgIW92ZXJmbG93bk5vZGVDb250ZXh0XG4gICAgKSB7XG4gICAgICByZXR1cm4gVGFzay5uZXdSZXN1bHQobm9kZUNvbnRleHQpO1xuICAgIH1cbiAgICBjb25zdCBmcmFtZTogVGFzay5GcmFtZTxWdHJlZS5Ob2RlQ29udGV4dD4gPSBUYXNrLm5ld0ZyYW1lKFwiZG9GaW5pc2hCcmVha1wiKTtcbiAgICBsZXQgZm9yY2VSZW1vdmVTZWxmID0gZmFsc2U7XG4gICAgaWYgKCFub2RlQ29udGV4dCkge1xuICAgICAgLy8gTGFzdCByZXNvcnRcbiAgICAgIGlmICh0aGlzLmZvcmNlTm9uZml0dGluZykge1xuICAgICAgICBMb2dnaW5nLmxvZ2dlci53YXJuKFwiQ291bGQgbm90IGZpbmQgYW55IHBhZ2UgYnJlYWtzPyEhXCIpO1xuICAgICAgICB0aGlzLnNraXBUYWlsRWRnZXMob3ZlcmZsb3duTm9kZUNvbnRleHQpLnRoZW4oKG5vZGVDb250ZXh0KSA9PiB7XG4gICAgICAgICAgaWYgKG5vZGVDb250ZXh0KSB7XG4gICAgICAgICAgICBub2RlQ29udGV4dCA9IG5vZGVDb250ZXh0Lm1vZGlmeSgpO1xuICAgICAgICAgICAgbm9kZUNvbnRleHQub3ZlcmZsb3cgPSBmYWxzZTtcbiAgICAgICAgICAgIHRoaXMuZmluaXNoQnJlYWsobm9kZUNvbnRleHQsIGZvcmNlUmVtb3ZlU2VsZiwgdHJ1ZSkudGhlbigoKSA9PiB7XG4gICAgICAgICAgICAgIGZyYW1lLmZpbmlzaChub2RlQ29udGV4dCk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgZnJhbWUuZmluaXNoKG5vZGVDb250ZXh0KTtcbiAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgICAgICByZXR1cm4gZnJhbWUucmVzdWx0KCk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBub2RlQ29udGV4dCA9IGluaXRpYWxOb2RlQ29udGV4dDtcbiAgICAgICAgZm9yY2VSZW1vdmVTZWxmID0gdHJ1ZTtcbiAgICAgICAgdGhpcy5jb21wdXRlZEJsb2NrU2l6ZSA9IGluaXRpYWxDb21wdXRlZEJsb2NrU2l6ZTtcbiAgICAgIH1cbiAgICB9XG4gICAgdGhpcy5maW5pc2hCcmVhayhub2RlQ29udGV4dCwgZm9yY2VSZW1vdmVTZWxmLCB0cnVlKS50aGVuKCgpID0+IHtcbiAgICAgIGZyYW1lLmZpbmlzaChub2RlQ29udGV4dCk7XG4gICAgfSk7XG4gICAgcmV0dXJuIGZyYW1lLnJlc3VsdCgpO1xuICB9XG5cbiAgLyoqXG4gICAqIERldGVybWluZXMgaWYgYSBwYWdlIGJyZWFrIGlzIGFjY2VwdGFibGUgYXQgdGhpcyBwb3NpdGlvblxuICAgKi9cbiAgaXNCcmVha2FibGUoZmxvd1Bvc2l0aW9uOiBWdHJlZS5Ob2RlQ29udGV4dCk6IGJvb2xlYW4ge1xuICAgIGlmIChmbG93UG9zaXRpb24uYWZ0ZXIpIHtcbiAgICAgIHJldHVybiB0cnVlOyAvLyBtYXkgYmUgYW4gZW1wdHkgYmxvY2tcbiAgICB9XG4gICAgc3dpdGNoIChmbG93UG9zaXRpb24uc291cmNlTm9kZS5uYW1lc3BhY2VVUkkpIHtcbiAgICAgIGNhc2UgQmFzZS5OUy5TVkc6XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gICAgcmV0dXJuICFmbG93UG9zaXRpb24uZmxleENvbnRhaW5lcjtcbiAgfVxuXG4gIC8qKlxuICAgKiBEZXRlcm1pbmVzIGlmIGFuIGluZGVudCB2YWx1ZSBpcyB6ZXJvXG4gICAqL1xuICB6ZXJvSW5kZW50KHZhbDogc3RyaW5nIHwgbnVtYmVyKTogYm9vbGVhbiB7XG4gICAgY29uc3QgcyA9IHZhbC50b1N0cmluZygpO1xuICAgIHJldHVybiBzID09IFwiXCIgfHwgcyA9PSBcImF1dG9cIiB8fCAhIXMubWF0Y2goL14wKyguMCopP1teMC05XS8pO1xuICB9XG5cbiAgLyoqXG4gICAqIEByZXR1cm4gdHJ1ZSBpZiBvdmVyZmxvd3NcbiAgICovXG4gIGNoZWNrT3ZlcmZsb3dBbmRTYXZlRWRnZShcbiAgICBub2RlQ29udGV4dDogVnRyZWUuTm9kZUNvbnRleHQsXG4gICAgdHJhaWxpbmdFZGdlQ29udGV4dHM6IFZ0cmVlLk5vZGVDb250ZXh0W10sXG4gICk6IGJvb2xlYW4ge1xuICAgIGlmICghbm9kZUNvbnRleHQpIHtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gICAgaWYgKExheW91dEhlbHBlci5pc09ycGhhbihub2RlQ29udGV4dC52aWV3Tm9kZSkpIHtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gICAgbGV0IGVkZ2UgPSBMYXlvdXRIZWxwZXIuY2FsY3VsYXRlRWRnZShcbiAgICAgIG5vZGVDb250ZXh0LFxuICAgICAgdGhpcy5jbGllbnRMYXlvdXQsXG4gICAgICAwLFxuICAgICAgdGhpcy52ZXJ0aWNhbCxcbiAgICApO1xuICAgIGNvbnN0IG9mZnNldHMgPSBCcmVha1Bvc2l0aW9uLmNhbGN1bGF0ZU9mZnNldChcbiAgICAgIG5vZGVDb250ZXh0LFxuICAgICAgdGhpcy5jb2xsZWN0RWxlbWVudHNPZmZzZXQoKSxcbiAgICApO1xuICAgIGNvbnN0IG92ZXJmbG93biA9IHRoaXMuaXNPdmVyZmxvd24oXG4gICAgICBlZGdlICsgKHRoaXMudmVydGljYWwgPyAtMSA6IDEpICogb2Zmc2V0cy5taW5pbXVtLFxuICAgICk7XG4gICAgaWYgKFxuICAgICAgdGhpcy5pc092ZXJmbG93bihlZGdlICsgKHRoaXMudmVydGljYWwgPyAtMSA6IDEpICogb2Zmc2V0cy5jdXJyZW50KSAmJlxuICAgICAgIXRoaXMubm9kZUNvbnRleHRPdmVyZmxvd2luZ0R1ZVRvUmVwZXRpdGl2ZUVsZW1lbnRzXG4gICAgKSB7XG4gICAgICB0aGlzLm5vZGVDb250ZXh0T3ZlcmZsb3dpbmdEdWVUb1JlcGV0aXRpdmVFbGVtZW50cyA9IG5vZGVDb250ZXh0O1xuICAgIH0gZWxzZSBpZiAodHJhaWxpbmdFZGdlQ29udGV4dHMpIHtcbiAgICAgIC8vIElmIHRoZSBlZGdlIGRvZXMgbm90IG92ZXJmbG93IGFkZCB0aGUgdHJhaWxpbmcgbWFyZ2luLCB3aGljaCBpc1xuICAgICAgLy8gdHJ1bmNhdGVkIHRvIHRoZSByZW1haW5pbmcgZnJhZ21lbnRhaW5lciBleHRlbnQuXG4gICAgICBjb25zdCBtYXJnaW5FZGdlID1cbiAgICAgICAgZWRnZSArIHRoaXMuZ2V0VHJhaWxpbmdNYXJnaW5FZGdlQWRqdXN0bWVudCh0cmFpbGluZ0VkZ2VDb250ZXh0cyk7XG4gICAgICBjb25zdCBmb290bm90ZUVkZ2UgPVxuICAgICAgICB0aGlzLmZvb3Rub3RlRWRnZSAtIHRoaXMuZ2V0Qm94RGlyKCkgKiBvZmZzZXRzLmN1cnJlbnQ7XG4gICAgICBlZGdlID0gdGhpcy52ZXJ0aWNhbFxuICAgICAgICA/IE1hdGgubWluKGVkZ2UsIE1hdGgubWF4KG1hcmdpbkVkZ2UsIGZvb3Rub3RlRWRnZSkpXG4gICAgICAgIDogTWF0aC5tYXgoZWRnZSwgTWF0aC5taW4obWFyZ2luRWRnZSwgZm9vdG5vdGVFZGdlKSk7XG4gICAgfVxuICAgIHRoaXMudXBkYXRlTWF4UmVhY2hlZEFmdGVyRWRnZShlZGdlKTtcbiAgICByZXR1cm4gb3ZlcmZsb3duO1xuICB9XG5cbiAgLyoqXG4gICAqIFNhdmUgYSBwb3NzaWJsZSBwYWdlIGJyZWFrIHBvc2l0aW9uIG9uIGEgQ1NTIGJsb2NrIGVkZ2UuIENoZWNrIGlmIGl0XG4gICAqIG92ZXJmbG93cy5cbiAgICogQHJldHVybiB0cnVlIGlmIG92ZXJmbG93c1xuICAgKi9cbiAgY2hlY2tPdmVyZmxvd0FuZFNhdmVFZGdlQW5kQnJlYWtQb3NpdGlvbihcbiAgICBub2RlQ29udGV4dDogVnRyZWUuTm9kZUNvbnRleHQsXG4gICAgdHJhaWxpbmdFZGdlQ29udGV4dHM6IFZ0cmVlLk5vZGVDb250ZXh0W10sXG4gICAgc2F2ZUV2ZW5PdmVyZmxvd246IGJvb2xlYW4sXG4gICAgYnJlYWtBdFRoZUVkZ2U6IHN0cmluZyB8IG51bGwsXG4gICk6IGJvb2xlYW4ge1xuICAgIGlmICghbm9kZUNvbnRleHQpIHtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gICAgaWYgKExheW91dEhlbHBlci5pc09ycGhhbihub2RlQ29udGV4dC52aWV3Tm9kZSkpIHtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gICAgY29uc3Qgb3ZlcmZsb3duID0gdGhpcy5jaGVja092ZXJmbG93QW5kU2F2ZUVkZ2UoXG4gICAgICBub2RlQ29udGV4dCxcbiAgICAgIHRyYWlsaW5nRWRnZUNvbnRleHRzLFxuICAgICk7XG4gICAgaWYgKHNhdmVFdmVuT3ZlcmZsb3duIHx8ICFvdmVyZmxvd24pIHtcbiAgICAgIHRoaXMuc2F2ZUVkZ2VCcmVha1Bvc2l0aW9uKG5vZGVDb250ZXh0LCBicmVha0F0VGhlRWRnZSwgb3ZlcmZsb3duKTtcbiAgICB9XG4gICAgcmV0dXJuIG92ZXJmbG93bjtcbiAgfVxuXG4gIGFwcGx5Q2xlYXJhbmNlKG5vZGVDb250ZXh0OiBWdHJlZS5Ob2RlQ29udGV4dCk6IGJvb2xlYW4ge1xuICAgIGlmICghbm9kZUNvbnRleHQudmlld05vZGUucGFyZW50Tm9kZSkge1xuICAgICAgLy8gQ2Fubm90IGRvIGNlcmFsYW5jZSBmb3Igbm9kZXMgd2l0aG91dCBwYXJlbnRzXG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuXG4gICAgLy8gbWVhc3VyZSB3aGVyZSB0aGUgZWRnZSBvZiB0aGUgZWxlbWVudCB3b3VsZCBiZSB3aXRob3V0IGNsZWFyYW5jZVxuICAgIGNvbnN0IG1hcmdpbiA9IHRoaXMuZ2V0Q29tcHV0ZWRNYXJnaW4obm9kZUNvbnRleHQudmlld05vZGUgYXMgRWxlbWVudCk7XG4gICAgY29uc3Qgc3BhY2VyID0gbm9kZUNvbnRleHQudmlld05vZGUub3duZXJEb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiZGl2XCIpO1xuICAgIGlmICh0aGlzLnZlcnRpY2FsKSB7XG4gICAgICBzcGFjZXIuc3R5bGUuYm90dG9tID0gXCIwcHhcIjtcbiAgICAgIHNwYWNlci5zdHlsZS53aWR0aCA9IFwiMXB4XCI7XG4gICAgICBzcGFjZXIuc3R5bGUubWFyZ2luUmlnaHQgPSBgJHttYXJnaW4ucmlnaHR9cHhgO1xuICAgIH0gZWxzZSB7XG4gICAgICBzcGFjZXIuc3R5bGUucmlnaHQgPSBcIjBweFwiO1xuICAgICAgc3BhY2VyLnN0eWxlLmhlaWdodCA9IFwiMXB4XCI7XG4gICAgICBzcGFjZXIuc3R5bGUubWFyZ2luVG9wID0gYCR7bWFyZ2luLnRvcH1weGA7XG4gICAgfVxuICAgIG5vZGVDb250ZXh0LnZpZXdOb2RlLnBhcmVudE5vZGUuaW5zZXJ0QmVmb3JlKHNwYWNlciwgbm9kZUNvbnRleHQudmlld05vZGUpO1xuICAgIGxldCBzcGFjZXJCb3ggPSB0aGlzLmNsaWVudExheW91dC5nZXRFbGVtZW50Q2xpZW50UmVjdChzcGFjZXIpO1xuICAgIGNvbnN0IGVkZ2UgPSB0aGlzLmdldEJlZm9yZUVkZ2Uoc3BhY2VyQm94KTtcbiAgICBjb25zdCBkaXIgPSB0aGlzLmdldEJveERpcigpO1xuICAgIGNvbnN0IGNsZWFyID0gbm9kZUNvbnRleHQuY2xlYXJTaWRlO1xuICAgIGxldCBjbGVhckVkZ2UgPSAtdGhpcy5nZXRCb3hEaXIoKSAqIEluZmluaXR5O1xuICAgIGlmIChjbGVhciA9PT0gXCJhbGxcIikge1xuICAgICAgY2xlYXJFZGdlID0gdGhpcy5wYWdlRmxvYXRMYXlvdXRDb250ZXh0LmdldFBhZ2VGbG9hdENsZWFyRWRnZShcbiAgICAgICAgY2xlYXIsXG4gICAgICAgIHRoaXMsXG4gICAgICApO1xuICAgIH1cbiAgICBzd2l0Y2ggKGNsZWFyKSB7XG4gICAgICBjYXNlIFwibGVmdFwiOlxuICAgICAgICBjbGVhckVkZ2UgPSBkaXIgKiBNYXRoLm1heChjbGVhckVkZ2UgKiBkaXIsIHRoaXMubGVmdEZsb2F0RWRnZSAqIGRpcik7XG4gICAgICAgIGJyZWFrO1xuICAgICAgY2FzZSBcInJpZ2h0XCI6XG4gICAgICAgIGNsZWFyRWRnZSA9IGRpciAqIE1hdGgubWF4KGNsZWFyRWRnZSAqIGRpciwgdGhpcy5yaWdodEZsb2F0RWRnZSAqIGRpcik7XG4gICAgICAgIGJyZWFrO1xuICAgICAgZGVmYXVsdDpcbiAgICAgICAgY2xlYXJFZGdlID1cbiAgICAgICAgICBkaXIgKlxuICAgICAgICAgIE1hdGgubWF4KFxuICAgICAgICAgICAgY2xlYXJFZGdlICogZGlyLFxuICAgICAgICAgICAgTWF0aC5tYXgodGhpcy5yaWdodEZsb2F0RWRnZSAqIGRpciwgdGhpcy5sZWZ0RmxvYXRFZGdlICogZGlyKSxcbiAgICAgICAgICApO1xuICAgIH1cblxuICAgIC8vIGVkZ2UgaG9sZHMgdGhlIHBvc2l0aW9uIHdoZXJlIGVsZW1lbnQgYm9yZGVyIFwiYmVmb3JlXCIgZWRnZSB3aWxsIGJlXG4gICAgLy8gd2l0aG91dCBjbGVhcmFuY2UuIGNsZWFyRWRnZSBpcyB0aGUgXCJhZnRlclwiIGVkZ2Ugb2YgdGhlIGZsb2F0IHRvIGNsZWFyLlxuICAgIGlmIChlZGdlICogZGlyID49IGNsZWFyRWRnZSAqIGRpcikge1xuICAgICAgLy8gTm8gbmVlZCBmb3IgY2xlYXJhbmNlXG4gICAgICBub2RlQ29udGV4dC52aWV3Tm9kZS5wYXJlbnROb2RlLnJlbW92ZUNoaWxkKHNwYWNlcik7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfSBlbHNlIHtcbiAgICAgIC8vIE5lZWQgc29tZSBjbGVhcmFuY2UsIGRldGVybWluZSBob3cgbXVjaC4gQWRkIHRoZSBjbGVhcmFuY2Ugbm9kZSxcbiAgICAgIC8vIG1lYXN1cmUgaXRzIGFmdGVyIGVkZ2UgYW5kIGFkanVzdCBhZnRlciBtYXJnaW4gKHJlcXVpcmVkIGR1ZSB0b1xuICAgICAgLy8gcG9zc2libGUgbWFyZ2luIGNvbGxhcHNlIGJlZm9yZSBjbGVhcmFuY2Ugd2FzIGludHJvZHVjZWQpLlxuICAgICAgY29uc3QgaGVpZ2h0ID0gTWF0aC5tYXgoMSwgKGNsZWFyRWRnZSAtIGVkZ2UpICogZGlyKTtcbiAgICAgIGlmICh0aGlzLnZlcnRpY2FsKSB7XG4gICAgICAgIHNwYWNlci5zdHlsZS53aWR0aCA9IGAke2hlaWdodH1weGA7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBzcGFjZXIuc3R5bGUuaGVpZ2h0ID0gYCR7aGVpZ2h0fXB4YDtcbiAgICAgIH1cbiAgICAgIHNwYWNlckJveCA9IHRoaXMuY2xpZW50TGF5b3V0LmdldEVsZW1lbnRDbGllbnRSZWN0KHNwYWNlcik7XG4gICAgICBjb25zdCBhZnRlckVkZ2UgPSB0aGlzLmdldEFmdGVyRWRnZShzcGFjZXJCb3gpO1xuICAgICAgaWYgKHRoaXMudmVydGljYWwpIHtcbiAgICAgICAgbGV0IHdBZGogPSBhZnRlckVkZ2UgKyBtYXJnaW4ucmlnaHQgLSBjbGVhckVkZ2U7XG4gICAgICAgIGlmICh3QWRqID4gMCA9PSBtYXJnaW4ucmlnaHQgPj0gMCkge1xuICAgICAgICAgIC8vIEluIGFkZGl0aW9uIHRvIGNvbGxhcHNlZCBwb3J0aW9uXG4gICAgICAgICAgd0FkaiArPSBtYXJnaW4ucmlnaHQ7XG4gICAgICAgIH1cbiAgICAgICAgc3BhY2VyLnN0eWxlLm1hcmdpbkxlZnQgPSBgJHt3QWRqfXB4YDtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGxldCBoQWRqID0gY2xlYXJFZGdlIC0gKGFmdGVyRWRnZSArIG1hcmdpbi50b3ApO1xuICAgICAgICBpZiAoaEFkaiA+IDAgPT0gbWFyZ2luLnRvcCA+PSAwKSB7XG4gICAgICAgICAgLy8gSW4gYWRkaXRpb24gdG8gY29sbGFwc2VkIHBvcnRpb25cbiAgICAgICAgICBoQWRqICs9IG1hcmdpbi50b3A7XG4gICAgICAgIH1cbiAgICAgICAgc3BhY2VyLnN0eWxlLm1hcmdpbkJvdHRvbSA9IGAke2hBZGp9cHhgO1xuICAgICAgfVxuICAgICAgbm9kZUNvbnRleHQuY2xlYXJTcGFjZXIgPSBzcGFjZXI7XG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG4gIH1cblxuICBpc0JGQyhmb3JtYXR0aW5nQ29udGV4dDogVnRyZWUuRm9ybWF0dGluZ0NvbnRleHQpOiBib29sZWFuIHtcbiAgICBpZiAoTGF5b3V0UHJvY2Vzc29yLmlzSW5zdGFuY2VPZkJsb2NrRm9ybWF0dGluZ0NvbnRleHQoZm9ybWF0dGluZ0NvbnRleHQpKSB7XG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG4gICAgaWYgKFxuICAgICAgUmVwZXRpdGl2ZUVsZW1lbnQuaXNJbnN0YW5jZU9mUmVwZXRpdGl2ZUVsZW1lbnRzT3duZXJGb3JtYXR0aW5nQ29udGV4dChcbiAgICAgICAgZm9ybWF0dGluZ0NvbnRleHQsXG4gICAgICApXG4gICAgKSB7XG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG5cbiAgLyoqXG4gICAqIFNraXBzIHBvc2l0aW9ucyB1bnRpbCBlaXRoZXIgdGhlIHN0YXJ0IG9mIHVuYnJlYWthYmxlIGJsb2NrIG9yIGlubGluZVxuICAgKiBjb250ZW50LiBBbHNvIHNldHMgYnJlYWtCZWZvcmUgb24gdGhlIHJlc3VsdCBjb21iaW5pbmcgYnJlYWstYmVmb3JlIGFuZFxuICAgKiBicmVhay1hZnRlciBwcm9wZXJ0aWVzIGZyb20gYWxsIGVsZW1lbnRzIHRoYXQgbWVldCBhdCB0aGUgZWRnZS5cbiAgICovXG4gIHNraXBFZGdlcyhcbiAgICBub2RlQ29udGV4dDogVnRyZWUuTm9kZUNvbnRleHQsXG4gICAgbGVhZGluZ0VkZ2U6IGJvb2xlYW4sXG4gICAgZm9yY2VkQnJlYWtWYWx1ZTogc3RyaW5nIHwgbnVsbCxcbiAgKTogVGFzay5SZXN1bHQ8VnRyZWUuTm9kZUNvbnRleHQ+IHtcbiAgICBjb25zdCBmYyA9IG5vZGVDb250ZXh0LmFmdGVyXG4gICAgICA/IG5vZGVDb250ZXh0LnBhcmVudCAmJiBub2RlQ29udGV4dC5wYXJlbnQuZm9ybWF0dGluZ0NvbnRleHRcbiAgICAgIDogbm9kZUNvbnRleHQuZm9ybWF0dGluZ0NvbnRleHQ7XG4gICAgaWYgKGZjICYmICF0aGlzLmlzQkZDKGZjKSkge1xuICAgICAgcmV0dXJuIFRhc2submV3UmVzdWx0KG5vZGVDb250ZXh0KTtcbiAgICB9XG4gICAgY29uc3QgZnJhbWU6IFRhc2suRnJhbWU8VnRyZWUuTm9kZUNvbnRleHQ+ID0gVGFzay5uZXdGcmFtZShcInNraXBFZGdlc1wiKTtcblxuICAgIC8vIElmIGEgZm9yY2VkIGJyZWFrIG9jY3VycmVkIGF0IHRoZSBlbmQgb2YgdGhlIHByZXZpb3VzIGNvbHVtbixcbiAgICAvLyBub2RlQ29udGV4dC5hZnRlciBzaG91bGQgYmUgZmFsc2UuXG4gICAgbGV0IGF0VW5mb3JjZWRCcmVhayA9XG4gICAgICAhZm9yY2VkQnJlYWtWYWx1ZSAmJiBsZWFkaW5nRWRnZSAmJiBub2RlQ29udGV4dCAmJiBub2RlQ29udGV4dC5hZnRlcjtcbiAgICBsZXQgYnJlYWtBdFRoZUVkZ2UgPSBmb3JjZWRCcmVha1ZhbHVlO1xuICAgIGxldCBsYXN0QWZ0ZXJOb2RlQ29udGV4dDogVnRyZWUuTm9kZUNvbnRleHQgPSBudWxsO1xuICAgIGxldCBsZWFkaW5nRWRnZUNvbnRleHRzOiBWdHJlZS5Ob2RlQ29udGV4dFtdID0gW107XG4gICAgbGV0IHRyYWlsaW5nRWRnZUNvbnRleHRzOiBWdHJlZS5Ob2RlQ29udGV4dFtdID0gW107XG4gICAgbGV0IG9uU3RhcnRFZGdlcyA9IGZhbHNlO1xuXG4gICAgZnVuY3Rpb24gbmVlZEZvcmNlZEJyZWFrKCkge1xuICAgICAgLy8gbGVhZGluZ0VkZ2U9dHJ1ZSBtZWFucyB0aGF0IHdlIGFyZSBhdCB0aGUgYmVnaW5uaW5nIG9mIHRoZSBuZXcgY29sdW1uXG4gICAgICAvLyBhbmQgaGVuY2UgbXVzdCBhdm9pZCBhIGJyZWFrIChPdGhlcndpc2UgbGVhZGluZyB0byBhbiBpbmZpbml0ZSBsb29wKVxuICAgICAgcmV0dXJuIChcbiAgICAgICAgISFmb3JjZWRCcmVha1ZhbHVlIHx8XG4gICAgICAgICghbGVhZGluZ0VkZ2UgJiYgQnJlYWsuaXNGb3JjZWRCcmVha1ZhbHVlKGJyZWFrQXRUaGVFZGdlKSlcbiAgICAgICk7XG4gICAgfVxuXG4gICAgY29uc3QgcHJvY2Vzc0ZvcmNlZEJyZWFrID0gKCkgPT4ge1xuICAgICAgbm9kZUNvbnRleHQgPSBsZWFkaW5nRWRnZUNvbnRleHRzWzBdIHx8IG5vZGVDb250ZXh0O1xuICAgICAgbm9kZUNvbnRleHQudmlld05vZGUucGFyZW50Tm9kZS5yZW1vdmVDaGlsZChub2RlQ29udGV4dC52aWV3Tm9kZSk7XG4gICAgICB0aGlzLnBhZ2VCcmVha1R5cGUgPSBicmVha0F0VGhlRWRnZTtcbiAgICB9O1xuXG4gICAgZnJhbWVcbiAgICAgIC5sb29wV2l0aEZyYW1lKChsb29wRnJhbWUpID0+IHtcbiAgICAgICAgd2hpbGUgKG5vZGVDb250ZXh0KSB7XG4gICAgICAgICAgQXNzZXJ0cy5hc3NlcnQobm9kZUNvbnRleHQuZm9ybWF0dGluZ0NvbnRleHQpO1xuICAgICAgICAgIGNvbnN0IGxheW91dFByb2Nlc3NvciA9IG5ldyBMYXlvdXRQcm9jZXNzb3IuTGF5b3V0UHJvY2Vzc29yUmVzb2x2ZXIoKS5maW5kKFxuICAgICAgICAgICAgbm9kZUNvbnRleHQuZm9ybWF0dGluZ0NvbnRleHQsXG4gICAgICAgICAgKTtcblxuICAgICAgICAgIC8vIEEgY29kZSBibG9jayB0byBiZSBhYmxlIHRvIHVzZSBicmVhay4gQnJlYWsgbW92ZXMgdG8gdGhlIG5leHRcbiAgICAgICAgICAvLyBub2RlIHBvc2l0aW9uLlxuICAgICAgICAgIGRvIHtcbiAgICAgICAgICAgIGlmICghbm9kZUNvbnRleHQudmlld05vZGUpIHtcbiAgICAgICAgICAgICAgLy8gTm9uLWRpc3BsYXlhYmxlIGNvbnRlbnQsIHNraXBcbiAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAobm9kZUNvbnRleHQuaW5saW5lICYmIG5vZGVDb250ZXh0LnZpZXdOb2RlLm5vZGVUeXBlICE9IDEpIHtcbiAgICAgICAgICAgICAgaWYgKFxuICAgICAgICAgICAgICAgIFZ0cmVlSW1wbC5jYW5JZ25vcmUoXG4gICAgICAgICAgICAgICAgICBub2RlQ29udGV4dC52aWV3Tm9kZSxcbiAgICAgICAgICAgICAgICAgIG5vZGVDb250ZXh0LndoaXRlc3BhY2UsXG4gICAgICAgICAgICAgICAgKVxuICAgICAgICAgICAgICApIHtcbiAgICAgICAgICAgICAgICAvLyBJZ25vcmFibGUgdGV4dCBjb250ZW50LCBza2lwXG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgaWYgKCFub2RlQ29udGV4dC5hZnRlcikge1xuICAgICAgICAgICAgICAgIC8vIExlYWRpbmcgZWRnZSBvZiBub24tZW1wdHkgYmxvY2sgLT4gZmluaXNoZWQgZ29pbmcgdGhyb3VnaFxuICAgICAgICAgICAgICAgIC8vIGFsbCBzdGFydGluZyBlZGdlcyBvZiB0aGUgYm94XG4gICAgICAgICAgICAgICAgaWYgKG5lZWRGb3JjZWRCcmVhaygpKSB7XG4gICAgICAgICAgICAgICAgICBwcm9jZXNzRm9yY2VkQnJlYWsoKTtcbiAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKFxuICAgICAgICAgICAgICAgICAgdGhpcy5jaGVja092ZXJmbG93QW5kU2F2ZUVkZ2VBbmRCcmVha1Bvc2l0aW9uKFxuICAgICAgICAgICAgICAgICAgICBsYXN0QWZ0ZXJOb2RlQ29udGV4dCxcbiAgICAgICAgICAgICAgICAgICAgbnVsbCxcbiAgICAgICAgICAgICAgICAgICAgdHJ1ZSxcbiAgICAgICAgICAgICAgICAgICAgYnJlYWtBdFRoZUVkZ2UsXG4gICAgICAgICAgICAgICAgICApXG4gICAgICAgICAgICAgICAgKSB7XG4gICAgICAgICAgICAgICAgICBub2RlQ29udGV4dCA9ICh0aGlzLnN0b3BBdE92ZXJmbG93XG4gICAgICAgICAgICAgICAgICAgID8gbGFzdEFmdGVyTm9kZUNvbnRleHQgfHwgbm9kZUNvbnRleHRcbiAgICAgICAgICAgICAgICAgICAgOiBub2RlQ29udGV4dFxuICAgICAgICAgICAgICAgICAgKS5tb2RpZnkoKTtcbiAgICAgICAgICAgICAgICAgIG5vZGVDb250ZXh0Lm92ZXJmbG93ID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgbm9kZUNvbnRleHQgPSBub2RlQ29udGV4dC5tb2RpZnkoKTtcbiAgICAgICAgICAgICAgICAgIG5vZGVDb250ZXh0LmJyZWFrQmVmb3JlID0gYnJlYWtBdFRoZUVkZ2U7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGxvb3BGcmFtZS5icmVha0xvb3AoKTtcbiAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmICghbm9kZUNvbnRleHQuYWZ0ZXIpIHtcbiAgICAgICAgICAgICAgaWYgKGxheW91dFByb2Nlc3Nvcikge1xuICAgICAgICAgICAgICAgIGlmIChsYXlvdXRQcm9jZXNzb3Iuc3RhcnROb25JbmxpbmVFbGVtZW50Tm9kZShub2RlQ29udGV4dCkpIHtcbiAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICBpZiAobm9kZUNvbnRleHQuY2xlYXJTaWRlKSB7XG4gICAgICAgICAgICAgICAgLy8gY2xlYXJcbiAgICAgICAgICAgICAgICBpZiAoXG4gICAgICAgICAgICAgICAgICB0aGlzLmFwcGx5Q2xlYXJhbmNlKG5vZGVDb250ZXh0KSAmJlxuICAgICAgICAgICAgICAgICAgbGVhZGluZ0VkZ2UgJiZcbiAgICAgICAgICAgICAgICAgIHRoaXMuYnJlYWtQb3NpdGlvbnMubGVuZ3RoID09PSAwXG4gICAgICAgICAgICAgICAgKSB7XG4gICAgICAgICAgICAgICAgICB0aGlzLnNhdmVFZGdlQnJlYWtQb3NpdGlvbihcbiAgICAgICAgICAgICAgICAgICAgbm9kZUNvbnRleHQuY29weSgpLFxuICAgICAgICAgICAgICAgICAgICBicmVha0F0VGhlRWRnZSxcbiAgICAgICAgICAgICAgICAgICAgZmFsc2UsXG4gICAgICAgICAgICAgICAgICApO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICBpZiAoXG4gICAgICAgICAgICAgICAgIXRoaXMuaXNCRkMobm9kZUNvbnRleHQuZm9ybWF0dGluZ0NvbnRleHQpIHx8XG4gICAgICAgICAgICAgICAgUmVwZXRpdGl2ZUVsZW1lbnQuaXNJbnN0YW5jZU9mUmVwZXRpdGl2ZUVsZW1lbnRzT3duZXJGb3JtYXR0aW5nQ29udGV4dChcbiAgICAgICAgICAgICAgICAgIG5vZGVDb250ZXh0LmZvcm1hdHRpbmdDb250ZXh0LFxuICAgICAgICAgICAgICAgICkgfHxcbiAgICAgICAgICAgICAgICB0aGlzLmlzRmxvYXROb2RlQ29udGV4dChub2RlQ29udGV4dCkgfHxcbiAgICAgICAgICAgICAgICBub2RlQ29udGV4dC5mbGV4Q29udGFpbmVyXG4gICAgICAgICAgICAgICkge1xuICAgICAgICAgICAgICAgIC8vIG5ldyBmb3JtYXR0aW5nIGNvbnRleHQsIG9yIGZsb2F0IG9yIGZsZXggY29udGFpbmVyXG4gICAgICAgICAgICAgICAgLy8gKHVuYnJlYWthYmxlKVxuICAgICAgICAgICAgICAgIGxlYWRpbmdFZGdlQ29udGV4dHMucHVzaChub2RlQ29udGV4dC5jb3B5KCkpO1xuICAgICAgICAgICAgICAgIGJyZWFrQXRUaGVFZGdlID0gQnJlYWsucmVzb2x2ZUVmZmVjdGl2ZUJyZWFrVmFsdWUoXG4gICAgICAgICAgICAgICAgICBicmVha0F0VGhlRWRnZSxcbiAgICAgICAgICAgICAgICAgIG5vZGVDb250ZXh0LmJyZWFrQmVmb3JlLFxuICAgICAgICAgICAgICAgICk7XG5cbiAgICAgICAgICAgICAgICAvLyBjaGVjayBpZiBhIGZvcmNlZCBicmVhayBtdXN0IG9jY3VyIGJlZm9yZSB0aGUgYmxvY2suXG4gICAgICAgICAgICAgICAgaWYgKG5lZWRGb3JjZWRCcmVhaygpKSB7XG4gICAgICAgICAgICAgICAgICBwcm9jZXNzRm9yY2VkQnJlYWsoKTtcbiAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKFxuICAgICAgICAgICAgICAgICAgdGhpcy5jaGVja092ZXJmbG93QW5kU2F2ZUVkZ2VBbmRCcmVha1Bvc2l0aW9uKFxuICAgICAgICAgICAgICAgICAgICBsYXN0QWZ0ZXJOb2RlQ29udGV4dCxcbiAgICAgICAgICAgICAgICAgICAgbnVsbCxcbiAgICAgICAgICAgICAgICAgICAgdHJ1ZSxcbiAgICAgICAgICAgICAgICAgICAgYnJlYWtBdFRoZUVkZ2UsXG4gICAgICAgICAgICAgICAgICApIHx8XG4gICAgICAgICAgICAgICAgICAhdGhpcy5sYXlvdXRDb25zdHJhaW50LmFsbG93TGF5b3V0KG5vZGVDb250ZXh0KVxuICAgICAgICAgICAgICAgICkge1xuICAgICAgICAgICAgICAgICAgLy8gb3ZlcmZsb3dcbiAgICAgICAgICAgICAgICAgIG5vZGVDb250ZXh0ID0gKHRoaXMuc3RvcEF0T3ZlcmZsb3dcbiAgICAgICAgICAgICAgICAgICAgPyBsYXN0QWZ0ZXJOb2RlQ29udGV4dCB8fCBub2RlQ29udGV4dFxuICAgICAgICAgICAgICAgICAgICA6IG5vZGVDb250ZXh0XG4gICAgICAgICAgICAgICAgICApLm1vZGlmeSgpO1xuICAgICAgICAgICAgICAgICAgbm9kZUNvbnRleHQub3ZlcmZsb3cgPSB0cnVlO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBsb29wRnJhbWUuYnJlYWtMb29wKCk7XG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAobm9kZUNvbnRleHQudmlld05vZGUubm9kZVR5cGUgIT0gMSkge1xuICAgICAgICAgICAgICAvLyBub3QgYW4gZWxlbWVudFxuICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGNvbnN0IHN0eWxlID0gKG5vZGVDb250ZXh0LnZpZXdOb2RlIGFzIEhUTUxFbGVtZW50KS5zdHlsZTtcbiAgICAgICAgICAgIGlmIChub2RlQ29udGV4dC5hZnRlcikge1xuICAgICAgICAgICAgICAvLyBTa2lwIGFuIGVtcHR5IGlubGluZSBib3ggYXQgdGhlIHN0YXJ0IG9mIGEgYmxvY2tcbiAgICAgICAgICAgICAgLy8gKEFuIGFub255bW91cyBibG9jayBjb25zaXN0aW5nIGVudGlyZWx5IG9mXG4gICAgICAgICAgICAgIC8vIGNvbGxhcHNpYmxlIHdoaXRlIHNwYWNlIGlzIHJlbW92ZWQgZnJvbSB0aGUgcmVuZGVyaW5nIHRyZWUpXG4gICAgICAgICAgICAgIGlmIChub2RlQ29udGV4dC5pbmxpbmUpIHtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICBpZiAobGF5b3V0UHJvY2Vzc29yKSB7XG4gICAgICAgICAgICAgICAgaWYgKFxuICAgICAgICAgICAgICAgICAgbGF5b3V0UHJvY2Vzc29yLmFmdGVyTm9uSW5saW5lRWxlbWVudE5vZGUoXG4gICAgICAgICAgICAgICAgICAgIG5vZGVDb250ZXh0LFxuICAgICAgICAgICAgICAgICAgICB0aGlzLnN0b3BBdE92ZXJmbG93LFxuICAgICAgICAgICAgICAgICAgKVxuICAgICAgICAgICAgICAgICkge1xuICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgLy8gVHJhaWxpbmcgZWRnZVxuICAgICAgICAgICAgICBpZiAob25TdGFydEVkZ2VzKSB7XG4gICAgICAgICAgICAgICAgLy8gZmluaXNoZWQgZ29pbmcgdGhyb3VnaCBhbGwgc3RhcnRpbmcgZWRnZXMgb2YgdGhlIGJveC5cbiAgICAgICAgICAgICAgICAvLyBjaGVjayBpZiBhIGZvcmNlZCBicmVhayBtdXN0IG9jY3VyIGJlZm9yZSB0aGUgYmxvY2suXG4gICAgICAgICAgICAgICAgaWYgKG5lZWRGb3JjZWRCcmVhaygpKSB7XG4gICAgICAgICAgICAgICAgICBwcm9jZXNzRm9yY2VkQnJlYWsoKTtcbiAgICAgICAgICAgICAgICAgIGxvb3BGcmFtZS5icmVha0xvb3AoKTtcbiAgICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAvLyBzaW5jZSBhIGJyZWFrIGRpZCBub3Qgb2NjdXIsIG1vdmUgdG8gdGhlIG5leHQgZWRnZS4gdGhpc1xuICAgICAgICAgICAgICAgIC8vIGVkZ2UgaXMgbm8gbG9uZ2VyIHRoZSBsZWFkaW5nIGVkZ2UuXG4gICAgICAgICAgICAgICAgbGVhZGluZ0VkZ2VDb250ZXh0cyA9IFtdO1xuICAgICAgICAgICAgICAgIGxlYWRpbmdFZGdlID0gZmFsc2U7XG4gICAgICAgICAgICAgICAgYXRVbmZvcmNlZEJyZWFrID0gZmFsc2U7XG4gICAgICAgICAgICAgICAgYnJlYWtBdFRoZUVkZ2UgPSBudWxsO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIG9uU3RhcnRFZGdlcyA9IGZhbHNlOyAvLyB3ZSBhcmUgbm93IG9uIGVuZCBlZGdlcy5cbiAgICAgICAgICAgICAgbGFzdEFmdGVyTm9kZUNvbnRleHQgPSBub2RlQ29udGV4dC5jb3B5KCk7XG4gICAgICAgICAgICAgIHRyYWlsaW5nRWRnZUNvbnRleHRzLnB1c2gobGFzdEFmdGVyTm9kZUNvbnRleHQpO1xuICAgICAgICAgICAgICBicmVha0F0VGhlRWRnZSA9IEJyZWFrLnJlc29sdmVFZmZlY3RpdmVCcmVha1ZhbHVlKFxuICAgICAgICAgICAgICAgIGJyZWFrQXRUaGVFZGdlLFxuICAgICAgICAgICAgICAgIG5vZGVDb250ZXh0LmJyZWFrQWZ0ZXIsXG4gICAgICAgICAgICAgICk7XG4gICAgICAgICAgICAgIGlmIChcbiAgICAgICAgICAgICAgICBzdHlsZSAmJlxuICAgICAgICAgICAgICAgICEoXG4gICAgICAgICAgICAgICAgICB0aGlzLnplcm9JbmRlbnQoc3R5bGUucGFkZGluZ0JvdHRvbSkgJiZcbiAgICAgICAgICAgICAgICAgIHRoaXMuemVyb0luZGVudChzdHlsZS5ib3JkZXJCb3R0b21XaWR0aClcbiAgICAgICAgICAgICAgICApXG4gICAgICAgICAgICAgICkge1xuICAgICAgICAgICAgICAgIC8vIE5vbi16ZXJvIHRyYWlsaW5nIGluc2V0LlxuICAgICAgICAgICAgICAgIC8vIE1hcmdpbnMgZG9uJ3QgY29sbGFwc2UgYWNyb3NzIG5vbi16ZXJvIGJvcmRlcnMgYW5kXG4gICAgICAgICAgICAgICAgLy8gcGFkZGluZ3MuXG4gICAgICAgICAgICAgICAgdHJhaWxpbmdFZGdlQ29udGV4dHMgPSBbbGFzdEFmdGVyTm9kZUNvbnRleHRdO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAvLyBMZWFkaW5nIGVkZ2VcbiAgICAgICAgICAgICAgbGVhZGluZ0VkZ2VDb250ZXh0cy5wdXNoKG5vZGVDb250ZXh0LmNvcHkoKSk7XG4gICAgICAgICAgICAgIGJyZWFrQXRUaGVFZGdlID0gQnJlYWsucmVzb2x2ZUVmZmVjdGl2ZUJyZWFrVmFsdWUoXG4gICAgICAgICAgICAgICAgYnJlYWtBdFRoZUVkZ2UsXG4gICAgICAgICAgICAgICAgbm9kZUNvbnRleHQuYnJlYWtCZWZvcmUsXG4gICAgICAgICAgICAgICk7XG4gICAgICAgICAgICAgIGlmICghdGhpcy5sYXlvdXRDb25zdHJhaW50LmFsbG93TGF5b3V0KG5vZGVDb250ZXh0KSkge1xuICAgICAgICAgICAgICAgIHRoaXMuY2hlY2tPdmVyZmxvd0FuZFNhdmVFZGdlQW5kQnJlYWtQb3NpdGlvbihcbiAgICAgICAgICAgICAgICAgIGxhc3RBZnRlck5vZGVDb250ZXh0LFxuICAgICAgICAgICAgICAgICAgbnVsbCxcbiAgICAgICAgICAgICAgICAgICF0aGlzLnN0b3BBdE92ZXJmbG93LFxuICAgICAgICAgICAgICAgICAgYnJlYWtBdFRoZUVkZ2UsXG4gICAgICAgICAgICAgICAgKTtcbiAgICAgICAgICAgICAgICBub2RlQ29udGV4dCA9IG5vZGVDb250ZXh0Lm1vZGlmeSgpO1xuICAgICAgICAgICAgICAgIG5vZGVDb250ZXh0Lm92ZXJmbG93ID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICBpZiAodGhpcy5zdG9wQXRPdmVyZmxvdykge1xuICAgICAgICAgICAgICAgICAgbG9vcEZyYW1lLmJyZWFrTG9vcCgpO1xuICAgICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICBjb25zdCB2aWV3VGFnID0gKG5vZGVDb250ZXh0LnZpZXdOb2RlIGFzIEVsZW1lbnQpLmxvY2FsTmFtZTtcbiAgICAgICAgICAgICAgaWYgKG1lZGlhVGFnc1t2aWV3VGFnXSkge1xuICAgICAgICAgICAgICAgIC8vIGVsZW1lbnRzIHRoYXQgaGF2ZSBpbmhlcmVudCBjb250ZW50XG4gICAgICAgICAgICAgICAgLy8gY2hlY2sgaWYgYSBmb3JjZWQgYnJlYWsgbXVzdCBvY2N1ciBiZWZvcmUgdGhlIGJsb2NrLlxuICAgICAgICAgICAgICAgIGlmIChuZWVkRm9yY2VkQnJlYWsoKSkge1xuICAgICAgICAgICAgICAgICAgcHJvY2Vzc0ZvcmNlZEJyZWFrKCk7XG4gICAgICAgICAgICAgICAgfSBlbHNlIGlmIChcbiAgICAgICAgICAgICAgICAgIHRoaXMuY2hlY2tPdmVyZmxvd0FuZFNhdmVFZGdlQW5kQnJlYWtQb3NpdGlvbihcbiAgICAgICAgICAgICAgICAgICAgbGFzdEFmdGVyTm9kZUNvbnRleHQsXG4gICAgICAgICAgICAgICAgICAgIG51bGwsXG4gICAgICAgICAgICAgICAgICAgIHRydWUsXG4gICAgICAgICAgICAgICAgICAgIGJyZWFrQXRUaGVFZGdlLFxuICAgICAgICAgICAgICAgICAgKVxuICAgICAgICAgICAgICAgICkge1xuICAgICAgICAgICAgICAgICAgLy8gb3ZlcmZsb3dcbiAgICAgICAgICAgICAgICAgIG5vZGVDb250ZXh0ID0gKHRoaXMuc3RvcEF0T3ZlcmZsb3dcbiAgICAgICAgICAgICAgICAgICAgPyBsYXN0QWZ0ZXJOb2RlQ29udGV4dCB8fCBub2RlQ29udGV4dFxuICAgICAgICAgICAgICAgICAgICA6IG5vZGVDb250ZXh0XG4gICAgICAgICAgICAgICAgICApLm1vZGlmeSgpO1xuICAgICAgICAgICAgICAgICAgbm9kZUNvbnRleHQub3ZlcmZsb3cgPSB0cnVlO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBsb29wRnJhbWUuYnJlYWtMb29wKCk7XG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIGlmIChcbiAgICAgICAgICAgICAgICBzdHlsZSAmJlxuICAgICAgICAgICAgICAgICEoXG4gICAgICAgICAgICAgICAgICB0aGlzLnplcm9JbmRlbnQoc3R5bGUucGFkZGluZ1RvcCkgJiZcbiAgICAgICAgICAgICAgICAgIHRoaXMuemVyb0luZGVudChzdHlsZS5ib3JkZXJUb3BXaWR0aClcbiAgICAgICAgICAgICAgICApXG4gICAgICAgICAgICAgICkge1xuICAgICAgICAgICAgICAgIC8vIE5vbi16ZXJvIGxlYWRpbmcgaW5zZXRcbiAgICAgICAgICAgICAgICBhdFVuZm9yY2VkQnJlYWsgPSBmYWxzZTtcbiAgICAgICAgICAgICAgICB0cmFpbGluZ0VkZ2VDb250ZXh0cyA9IFtdO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIG9uU3RhcnRFZGdlcyA9IHRydWU7IC8vIHdlIGFyZSBub3cgb24gc3RhcnRpbmcgZWRnZXMuXG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSB3aGlsZSAoZmFsc2UpOyAvLyBFbmQgb2YgYmxvY2sgb2YgY29kZSB0byB1c2UgYnJlYWtcblxuICAgICAgICAgIGNvbnN0IG5leHRSZXN1bHQgPSB0aGlzLm5leHRJblRyZWUobm9kZUNvbnRleHQsIGF0VW5mb3JjZWRCcmVhayk7XG4gICAgICAgICAgaWYgKG5leHRSZXN1bHQuaXNQZW5kaW5nKCkpIHtcbiAgICAgICAgICAgIG5leHRSZXN1bHQudGhlbigobm9kZUNvbnRleHRQYXJhbSkgPT4ge1xuICAgICAgICAgICAgICBub2RlQ29udGV4dCA9IG5vZGVDb250ZXh0UGFyYW07XG4gICAgICAgICAgICAgIGxvb3BGcmFtZS5jb250aW51ZUxvb3AoKTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBub2RlQ29udGV4dCA9IG5leHRSZXN1bHQuZ2V0KCk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgaWYgKFxuICAgICAgICAgIHRoaXMuY2hlY2tPdmVyZmxvd0FuZFNhdmVFZGdlQW5kQnJlYWtQb3NpdGlvbihcbiAgICAgICAgICAgIGxhc3RBZnRlck5vZGVDb250ZXh0LFxuICAgICAgICAgICAgdHJhaWxpbmdFZGdlQ29udGV4dHMsXG4gICAgICAgICAgICAhdGhpcy5zdG9wQXRPdmVyZmxvdyxcbiAgICAgICAgICAgIGJyZWFrQXRUaGVFZGdlLFxuICAgICAgICAgIClcbiAgICAgICAgKSB7XG4gICAgICAgICAgaWYgKGxhc3RBZnRlck5vZGVDb250ZXh0ICYmIHRoaXMuc3RvcEF0T3ZlcmZsb3cpIHtcbiAgICAgICAgICAgIG5vZGVDb250ZXh0ID0gbGFzdEFmdGVyTm9kZUNvbnRleHQubW9kaWZ5KCk7XG4gICAgICAgICAgICBub2RlQ29udGV4dC5vdmVyZmxvdyA9IHRydWU7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIC8vIFRPRE86IHdoYXQgdG8gcmV0dXJuIGhlcmU/P1xuICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIGlmIChCcmVhay5pc0ZvcmNlZEJyZWFrVmFsdWUoYnJlYWtBdFRoZUVkZ2UpKSB7XG4gICAgICAgICAgdGhpcy5wYWdlQnJlYWtUeXBlID0gYnJlYWtBdFRoZUVkZ2U7XG4gICAgICAgIH1cbiAgICAgICAgbG9vcEZyYW1lLmJyZWFrTG9vcCgpO1xuICAgICAgfSlcbiAgICAgIC50aGVuKCgpID0+IHtcbiAgICAgICAgaWYgKGxhc3RBZnRlck5vZGVDb250ZXh0KSB7XG4gICAgICAgICAgdGhpcy5sYXN0QWZ0ZXJQb3NpdGlvbiA9IGxhc3RBZnRlck5vZGVDb250ZXh0LnRvTm9kZVBvc2l0aW9uKCk7XG4gICAgICAgIH1cbiAgICAgICAgZnJhbWUuZmluaXNoKG5vZGVDb250ZXh0KTtcbiAgICAgIH0pO1xuICAgIHJldHVybiBmcmFtZS5yZXN1bHQoKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBTa2lwcyBub24tcmVuZGVyYWJsZSBwb3NpdGlvbnMgdW50aWwgaXQgaGl0cyB0aGUgZW5kIG9mIHRoZSBmbG93IG9yIHNvbWVcbiAgICogcmVuZGVyYWJsZSBjb250ZW50LiBSZXR1cm5zIHRoZSBub2RlQ29udGV4dCB0aGF0IHdhcyBwYXNzZWQgaW4gaWYgc29tZVxuICAgKiBjb250ZW50IHJlbWFpbnMgYW5kIG51bGwgaWYgYWxsIGNvbnRlbnQgY291bGQgYmUgc2tpcHBlZC5cbiAgICovXG4gIHNraXBUYWlsRWRnZXMoXG4gICAgbm9kZUNvbnRleHQ6IFZ0cmVlLk5vZGVDb250ZXh0LFxuICApOiBUYXNrLlJlc3VsdDxWdHJlZS5Ob2RlQ29udGV4dD4ge1xuICAgIGxldCByZXN1bHROb2RlQ29udGV4dCA9IG5vZGVDb250ZXh0LmNvcHkoKTtcbiAgICBjb25zdCBmcmFtZTogVGFzay5GcmFtZTxWdHJlZS5Ob2RlQ29udGV4dD4gPSBUYXNrLm5ld0ZyYW1lKFwic2tpcEVkZ2VzXCIpO1xuICAgIGxldCBicmVha0F0VGhlRWRnZTogc3RyaW5nIHwgbnVsbCA9IG51bGw7XG4gICAgbGV0IG9uU3RhcnRFZGdlcyA9IGZhbHNlO1xuICAgIGZyYW1lXG4gICAgICAubG9vcFdpdGhGcmFtZSgobG9vcEZyYW1lKSA9PiB7XG4gICAgICAgIHdoaWxlIChub2RlQ29udGV4dCkge1xuICAgICAgICAgIC8vIEEgY29kZSBibG9jayB0byBiZSBhYmxlIHRvIHVzZSBicmVhay4gQnJlYWsgbW92ZXMgdG8gdGhlIG5leHRcbiAgICAgICAgICAvLyBub2RlIHBvc2l0aW9uLlxuICAgICAgICAgIGRvIHtcbiAgICAgICAgICAgIGlmICghbm9kZUNvbnRleHQudmlld05vZGUpIHtcbiAgICAgICAgICAgICAgLy8gTm9uLWRpc3BsYXlhYmxlIGNvbnRlbnQsIHNraXBcbiAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAobm9kZUNvbnRleHQuaW5saW5lICYmIG5vZGVDb250ZXh0LnZpZXdOb2RlLm5vZGVUeXBlICE9IDEpIHtcbiAgICAgICAgICAgICAgaWYgKFxuICAgICAgICAgICAgICAgIFZ0cmVlSW1wbC5jYW5JZ25vcmUoXG4gICAgICAgICAgICAgICAgICBub2RlQ29udGV4dC52aWV3Tm9kZSxcbiAgICAgICAgICAgICAgICAgIG5vZGVDb250ZXh0LndoaXRlc3BhY2UsXG4gICAgICAgICAgICAgICAgKVxuICAgICAgICAgICAgICApIHtcbiAgICAgICAgICAgICAgICAvLyBJZ25vcmFibGUgdGV4dCBjb250ZW50LCBza2lwXG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgaWYgKCFub2RlQ29udGV4dC5hZnRlcikge1xuICAgICAgICAgICAgICAgIC8vIExlYWRpbmcgZWRnZSBvZiBub24tZW1wdHkgYmxvY2sgLT4gZmluaXNoZWQgZ29pbmcgdGhyb3VnaFxuICAgICAgICAgICAgICAgIC8vIGFsbCBzdGFydGluZyBlZGdlcyBvZiB0aGUgYm94XG4gICAgICAgICAgICAgICAgaWYgKEJyZWFrLmlzRm9yY2VkQnJlYWtWYWx1ZShicmVha0F0VGhlRWRnZSkpIHtcbiAgICAgICAgICAgICAgICAgIHRoaXMucGFnZUJyZWFrVHlwZSA9IGJyZWFrQXRUaGVFZGdlO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBsb29wRnJhbWUuYnJlYWtMb29wKCk7XG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoIW5vZGVDb250ZXh0LmFmdGVyKSB7XG4gICAgICAgICAgICAgIGlmIChcbiAgICAgICAgICAgICAgICB0aGlzLmlzRmxvYXROb2RlQ29udGV4dChub2RlQ29udGV4dCkgfHxcbiAgICAgICAgICAgICAgICBub2RlQ29udGV4dC5mbGV4Q29udGFpbmVyXG4gICAgICAgICAgICAgICkge1xuICAgICAgICAgICAgICAgIC8vIGZsb2F0IG9yIGZsZXggY29udGFpbmVyICh1bmJyZWFrYWJsZSlcbiAgICAgICAgICAgICAgICBicmVha0F0VGhlRWRnZSA9IEJyZWFrLnJlc29sdmVFZmZlY3RpdmVCcmVha1ZhbHVlKFxuICAgICAgICAgICAgICAgICAgYnJlYWtBdFRoZUVkZ2UsXG4gICAgICAgICAgICAgICAgICBub2RlQ29udGV4dC5icmVha0JlZm9yZSxcbiAgICAgICAgICAgICAgICApO1xuXG4gICAgICAgICAgICAgICAgLy8gY2hlY2sgaWYgYSBmb3JjZWQgYnJlYWsgbXVzdCBvY2N1ciBiZWZvcmUgdGhlIGJsb2NrLlxuICAgICAgICAgICAgICAgIGlmIChCcmVhay5pc0ZvcmNlZEJyZWFrVmFsdWUoYnJlYWtBdFRoZUVkZ2UpKSB7XG4gICAgICAgICAgICAgICAgICB0aGlzLnBhZ2VCcmVha1R5cGUgPSBicmVha0F0VGhlRWRnZTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgbG9vcEZyYW1lLmJyZWFrTG9vcCgpO1xuICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKG5vZGVDb250ZXh0LnZpZXdOb2RlLm5vZGVUeXBlICE9IDEpIHtcbiAgICAgICAgICAgICAgLy8gbm90IGFuIGVsZW1lbnRcbiAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjb25zdCBzdHlsZSA9IChub2RlQ29udGV4dC52aWV3Tm9kZSBhcyBIVE1MRWxlbWVudCkuc3R5bGU7XG4gICAgICAgICAgICBpZiAobm9kZUNvbnRleHQuYWZ0ZXIpIHtcbiAgICAgICAgICAgICAgLy8gVHJhaWxpbmcgZWRnZVxuICAgICAgICAgICAgICBpZiAob25TdGFydEVkZ2VzKSB7XG4gICAgICAgICAgICAgICAgLy8gZmluaXNoZWQgZ29pbmcgdGhyb3VnaCBhbGwgc3RhcnRpbmcgZWRnZXMgb2YgdGhlIGJveC5cbiAgICAgICAgICAgICAgICAvLyBjaGVjayBpZiBhIGZvcmNlZCBicmVhayBtdXN0IG9jY3VyIGJlZm9yZSB0aGUgYmxvY2suXG4gICAgICAgICAgICAgICAgaWYgKEJyZWFrLmlzRm9yY2VkQnJlYWtWYWx1ZShicmVha0F0VGhlRWRnZSkpIHtcbiAgICAgICAgICAgICAgICAgIHRoaXMucGFnZUJyZWFrVHlwZSA9IGJyZWFrQXRUaGVFZGdlO1xuICAgICAgICAgICAgICAgICAgbG9vcEZyYW1lLmJyZWFrTG9vcCgpO1xuICAgICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIC8vIHNpbmNlIGEgYnJlYWsgZGlkIG5vdCBvY2N1ciwgbW92ZSB0byB0aGUgbmV4dCBlZGdlLlxuICAgICAgICAgICAgICAgIGJyZWFrQXRUaGVFZGdlID0gbnVsbDtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICBvblN0YXJ0RWRnZXMgPSBmYWxzZTsgLy8gd2UgYXJlIG5vdyBvbiBlbmQgZWRnZXMuXG4gICAgICAgICAgICAgIGJyZWFrQXRUaGVFZGdlID0gQnJlYWsucmVzb2x2ZUVmZmVjdGl2ZUJyZWFrVmFsdWUoXG4gICAgICAgICAgICAgICAgYnJlYWtBdFRoZUVkZ2UsXG4gICAgICAgICAgICAgICAgbm9kZUNvbnRleHQuYnJlYWtBZnRlcixcbiAgICAgICAgICAgICAgKTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgIC8vIExlYWRpbmcgZWRnZVxuICAgICAgICAgICAgICBicmVha0F0VGhlRWRnZSA9IEJyZWFrLnJlc29sdmVFZmZlY3RpdmVCcmVha1ZhbHVlKFxuICAgICAgICAgICAgICAgIGJyZWFrQXRUaGVFZGdlLFxuICAgICAgICAgICAgICAgIG5vZGVDb250ZXh0LmJyZWFrQmVmb3JlLFxuICAgICAgICAgICAgICApO1xuICAgICAgICAgICAgICBjb25zdCB2aWV3VGFnID0gKG5vZGVDb250ZXh0LnZpZXdOb2RlIGFzIEVsZW1lbnQpLmxvY2FsTmFtZTtcbiAgICAgICAgICAgICAgaWYgKG1lZGlhVGFnc1t2aWV3VGFnXSkge1xuICAgICAgICAgICAgICAgIC8vIGVsZW1lbnRzIHRoYXQgaGF2ZSBpbmhlcmVudCBjb250ZW50XG4gICAgICAgICAgICAgICAgLy8gY2hlY2sgaWYgYSBmb3JjZWQgYnJlYWsgbXVzdCBvY2N1ciBiZWZvcmUgdGhlIGJsb2NrLlxuICAgICAgICAgICAgICAgIGlmIChCcmVhay5pc0ZvcmNlZEJyZWFrVmFsdWUoYnJlYWtBdFRoZUVkZ2UpKSB7XG4gICAgICAgICAgICAgICAgICB0aGlzLnBhZ2VCcmVha1R5cGUgPSBicmVha0F0VGhlRWRnZTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgbG9vcEZyYW1lLmJyZWFrTG9vcCgpO1xuICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICBpZiAoXG4gICAgICAgICAgICAgICAgc3R5bGUgJiZcbiAgICAgICAgICAgICAgICAhKFxuICAgICAgICAgICAgICAgICAgdGhpcy56ZXJvSW5kZW50KHN0eWxlLnBhZGRpbmdUb3ApICYmXG4gICAgICAgICAgICAgICAgICB0aGlzLnplcm9JbmRlbnQoc3R5bGUuYm9yZGVyVG9wV2lkdGgpXG4gICAgICAgICAgICAgICAgKVxuICAgICAgICAgICAgICApIHtcbiAgICAgICAgICAgICAgICAvLyBOb24temVybyBsZWFkaW5nIGluc2V0XG4gICAgICAgICAgICAgICAgbG9vcEZyYW1lLmJyZWFrTG9vcCgpO1xuICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgb25TdGFydEVkZ2VzID0gdHJ1ZTsgLy8gd2UgYXJlIG5vdyBvbiBzdGFydGluZyBlZGdlcy5cbiAgICAgICAgICB9IHdoaWxlIChmYWxzZSk7IC8vIEVuZCBvZiBibG9jayBvZiBjb2RlIHRvIHVzZSBicmVha1xuXG4gICAgICAgICAgY29uc3QgbmV4dFJlc3VsdCA9IHRoaXMubGF5b3V0Q29udGV4dC5uZXh0SW5UcmVlKG5vZGVDb250ZXh0KTtcbiAgICAgICAgICBpZiAobmV4dFJlc3VsdC5pc1BlbmRpbmcoKSkge1xuICAgICAgICAgICAgbmV4dFJlc3VsdC50aGVuKChub2RlQ29udGV4dFBhcmFtKSA9PiB7XG4gICAgICAgICAgICAgIG5vZGVDb250ZXh0ID0gbm9kZUNvbnRleHRQYXJhbTtcbiAgICAgICAgICAgICAgbG9vcEZyYW1lLmNvbnRpbnVlTG9vcCgpO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIG5vZGVDb250ZXh0ID0gbmV4dFJlc3VsdC5nZXQoKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmVzdWx0Tm9kZUNvbnRleHQgPSBudWxsO1xuICAgICAgICBsb29wRnJhbWUuYnJlYWtMb29wKCk7XG4gICAgICB9KVxuICAgICAgLnRoZW4oKCkgPT4ge1xuICAgICAgICBmcmFtZS5maW5pc2gocmVzdWx0Tm9kZUNvbnRleHQpO1xuICAgICAgfSk7XG4gICAgcmV0dXJuIGZyYW1lLnJlc3VsdCgpO1xuICB9XG5cbiAgbGF5b3V0RmxvYXRPckZvb3Rub3RlKFxuICAgIG5vZGVDb250ZXh0OiBWdHJlZS5Ob2RlQ29udGV4dCxcbiAgKTogVGFzay5SZXN1bHQ8VnRyZWUuTm9kZUNvbnRleHQ+IHtcbiAgICBpZiAoXG4gICAgICBQYWdlRmxvYXRzLmlzUGFnZUZsb2F0KG5vZGVDb250ZXh0LmZsb2F0UmVmZXJlbmNlKSB8fFxuICAgICAgbm9kZUNvbnRleHQuZmxvYXRTaWRlID09PSBcImZvb3Rub3RlXCJcbiAgICApIHtcbiAgICAgIHJldHVybiB0aGlzLmxheW91dFBhZ2VGbG9hdChub2RlQ29udGV4dCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiB0aGlzLmxheW91dEZsb2F0KG5vZGVDb250ZXh0KTtcbiAgICB9XG4gIH1cblxuICAvKipcbiAgICogTGF5b3V0IG5leHQgcG9ydGlvbiBvZiB0aGUgc291cmNlLlxuICAgKi9cbiAgbGF5b3V0TmV4dChcbiAgICBub2RlQ29udGV4dDogVnRyZWUuTm9kZUNvbnRleHQsXG4gICAgbGVhZGluZ0VkZ2U6IGJvb2xlYW4sXG4gICAgZm9yY2VkQnJlYWtWYWx1ZT86IHN0cmluZyB8IG51bGwsXG4gICk6IFRhc2suUmVzdWx0PFZ0cmVlLk5vZGVDb250ZXh0PiB7XG4gICAgY29uc3QgZnJhbWU6IFRhc2suRnJhbWU8VnRyZWUuTm9kZUNvbnRleHQ+ID0gVGFzay5uZXdGcmFtZShcImxheW91dE5leHRcIik7XG4gICAgdGhpcy5za2lwRWRnZXMobm9kZUNvbnRleHQsIGxlYWRpbmdFZGdlLCBmb3JjZWRCcmVha1ZhbHVlIHx8IG51bGwpLnRoZW4oXG4gICAgICAobm9kZUNvbnRleHRQYXJhbSkgPT4ge1xuICAgICAgICBub2RlQ29udGV4dCA9IG5vZGVDb250ZXh0UGFyYW0gYXMgVnRyZWUuTm9kZUNvbnRleHQ7XG4gICAgICAgIGlmIChcbiAgICAgICAgICAhbm9kZUNvbnRleHQgfHxcbiAgICAgICAgICB0aGlzLnBhZ2VCcmVha1R5cGUgfHxcbiAgICAgICAgICB0aGlzLnN0b3BCeU92ZXJmbG93KG5vZGVDb250ZXh0KVxuICAgICAgICApIHtcbiAgICAgICAgICAvLyBmaW5pc2hlZCBhbGwgY29udGVudCwgZXhwbGljaXQgcGFnZSBicmVhayBvciBvdmVyZmxvdyAoYXV0b21hdGljXG4gICAgICAgICAgLy8gcGFnZSBicmVhaylcbiAgICAgICAgICBmcmFtZS5maW5pc2gobm9kZUNvbnRleHQpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGNvbnN0IGZvcm1hdHRpbmdDb250ZXh0ID0gbm9kZUNvbnRleHQuZm9ybWF0dGluZ0NvbnRleHQ7XG4gICAgICAgICAgQXNzZXJ0cy5hc3NlcnQoZm9ybWF0dGluZ0NvbnRleHQpO1xuICAgICAgICAgIGNvbnN0IGxheW91dFByb2Nlc3NvciA9IG5ldyBMYXlvdXRQcm9jZXNzb3IuTGF5b3V0UHJvY2Vzc29yUmVzb2x2ZXIoKS5maW5kKFxuICAgICAgICAgICAgZm9ybWF0dGluZ0NvbnRleHQsXG4gICAgICAgICAgKTtcbiAgICAgICAgICBsYXlvdXRQcm9jZXNzb3JcbiAgICAgICAgICAgIC5sYXlvdXQobm9kZUNvbnRleHQsIHRoaXMsIGxlYWRpbmdFZGdlKVxuICAgICAgICAgICAgLnRoZW5GaW5pc2goZnJhbWUpO1xuICAgICAgICB9XG4gICAgICB9LFxuICAgICk7XG4gICAgcmV0dXJuIGZyYW1lLnJlc3VsdCgpO1xuICB9XG5cbiAgY2xlYXJPdmVyZmxvd25WaWV3Tm9kZXMoXG4gICAgbm9kZUNvbnRleHQ6IFZ0cmVlLk5vZGVDb250ZXh0LFxuICAgIHJlbW92ZVNlbGY6IGJvb2xlYW4sXG4gICk6IHZvaWQge1xuICAgIGlmICghbm9kZUNvbnRleHQpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgZm9yIChcbiAgICAgIGxldCBwYXJlbnQgPSBub2RlQ29udGV4dC5wYXJlbnQ7XG4gICAgICBub2RlQ29udGV4dDtcbiAgICAgIG5vZGVDb250ZXh0ID0gcGFyZW50LCBwYXJlbnQgPSBwYXJlbnQgPyBwYXJlbnQucGFyZW50IDogbnVsbFxuICAgICkge1xuICAgICAgY29uc3QgZm9ybWF0dGluZ0NvbnRleHQgPSAocGFyZW50IHx8IG5vZGVDb250ZXh0KS5mb3JtYXR0aW5nQ29udGV4dDtcbiAgICAgIEFzc2VydHMuYXNzZXJ0KGZvcm1hdHRpbmdDb250ZXh0KTtcbiAgICAgIGNvbnN0IGxheW91dFByb2Nlc3NvciA9IG5ldyBMYXlvdXRQcm9jZXNzb3IuTGF5b3V0UHJvY2Vzc29yUmVzb2x2ZXIoKS5maW5kKFxuICAgICAgICBmb3JtYXR0aW5nQ29udGV4dCxcbiAgICAgICk7XG4gICAgICBsYXlvdXRQcm9jZXNzb3IuY2xlYXJPdmVyZmxvd25WaWV3Tm9kZXMoXG4gICAgICAgIHRoaXMsXG4gICAgICAgIHBhcmVudCxcbiAgICAgICAgbm9kZUNvbnRleHQsXG4gICAgICAgIHJlbW92ZVNlbGYsXG4gICAgICApO1xuICAgICAgcmVtb3ZlU2VsZiA9IGZhbHNlO1xuICAgIH1cbiAgfVxuXG4gIGluaXRHZW9tKCk6IHZvaWQge1xuICAgIC8vIFRPRE86IHdlIHNob3VsZCBiZSBhYmxlIHRvIGF2b2lkIHF1ZXJ5aW5nIHRoZSBsYXlvdXQgZW5naW5lIGF0IHRoaXNcbiAgICAvLyBwb2ludC4gQ3JlYXRlIGFuIGVsZW1lbnQgdGhhdCBmaWxscyB0aGUgY29udGVudCBhcmVhIGFuZCBxdWVyeSBpdHMgc2l6ZS5cbiAgICAvLyBDYWxsaW5nIGdldEVsZW1lbnRDbGllbnRSZWN0IG9uIHRoZSBjb250YWluZXIgZWxlbWVudCBpbmNsdWRlcyBlbGVtZW50XG4gICAgLy8gcGFkZGluZyB3aGljaCBpcyB3cm9uZyBmb3Igb3VyIHB1cnBvc2VzLlxuICAgIGNvbnN0IHByb2JlID0gdGhpcy5lbGVtZW50Lm93bmVyRG9jdW1lbnQuY3JlYXRlRWxlbWVudChcbiAgICAgIFwiZGl2XCIsXG4gICAgKSBhcyBIVE1MRWxlbWVudDtcbiAgICBwcm9iZS5zdHlsZS5wb3NpdGlvbiA9IFwiYWJzb2x1dGVcIjtcbiAgICBwcm9iZS5zdHlsZS50b3AgPSBgJHt0aGlzLnBhZGRpbmdUb3B9cHhgO1xuICAgIHByb2JlLnN0eWxlLnJpZ2h0ID0gYCR7dGhpcy5wYWRkaW5nUmlnaHR9cHhgO1xuICAgIHByb2JlLnN0eWxlLmJvdHRvbSA9IGAke3RoaXMucGFkZGluZ0JvdHRvbX1weGA7XG4gICAgcHJvYmUuc3R5bGUubGVmdCA9IGAke3RoaXMucGFkZGluZ0xlZnR9cHhgO1xuICAgIHRoaXMuZWxlbWVudC5hcHBlbmRDaGlsZChwcm9iZSk7XG4gICAgY29uc3QgY29sdW1uQkJveCA9IHRoaXMuY2xpZW50TGF5b3V0LmdldEVsZW1lbnRDbGllbnRSZWN0KHByb2JlKTtcbiAgICB0aGlzLmVsZW1lbnQucmVtb3ZlQ2hpbGQocHJvYmUpO1xuICAgIGNvbnN0IG9mZnNldFggPSB0aGlzLm9yaWdpblggKyB0aGlzLmxlZnQgKyB0aGlzLmdldEluc2V0TGVmdCgpO1xuICAgIGNvbnN0IG9mZnNldFkgPSB0aGlzLm9yaWdpblkgKyB0aGlzLnRvcCArIHRoaXMuZ2V0SW5zZXRUb3AoKTtcbiAgICB0aGlzLmJveCA9IG5ldyBHZW9tZXRyeVV0aWwuUmVjdChcbiAgICAgIG9mZnNldFgsXG4gICAgICBvZmZzZXRZLFxuICAgICAgb2Zmc2V0WCArIHRoaXMud2lkdGgsXG4gICAgICBvZmZzZXRZICsgdGhpcy5oZWlnaHQsXG4gICAgKTtcbiAgICB0aGlzLnN0YXJ0RWRnZSA9IGNvbHVtbkJCb3hcbiAgICAgID8gdGhpcy52ZXJ0aWNhbFxuICAgICAgICA/IGNvbHVtbkJCb3gudG9wXG4gICAgICAgIDogY29sdW1uQkJveC5sZWZ0XG4gICAgICA6IDA7XG4gICAgdGhpcy5lbmRFZGdlID0gY29sdW1uQkJveFxuICAgICAgPyB0aGlzLnZlcnRpY2FsXG4gICAgICAgID8gY29sdW1uQkJveC5ib3R0b21cbiAgICAgICAgOiBjb2x1bW5CQm94LnJpZ2h0XG4gICAgICA6IDA7XG4gICAgdGhpcy5iZWZvcmVFZGdlID0gY29sdW1uQkJveFxuICAgICAgPyB0aGlzLnZlcnRpY2FsXG4gICAgICAgID8gY29sdW1uQkJveC5yaWdodFxuICAgICAgICA6IGNvbHVtbkJCb3gudG9wXG4gICAgICA6IDA7XG4gICAgdGhpcy5hZnRlckVkZ2UgPSBjb2x1bW5CQm94XG4gICAgICA/IHRoaXMudmVydGljYWxcbiAgICAgICAgPyBjb2x1bW5CQm94LmxlZnRcbiAgICAgICAgOiBjb2x1bW5CQm94LmJvdHRvbVxuICAgICAgOiAwO1xuICAgIHRoaXMubGVmdEZsb2F0RWRnZSA9IHRoaXMuYmVmb3JlRWRnZTtcbiAgICB0aGlzLnJpZ2h0RmxvYXRFZGdlID0gdGhpcy5iZWZvcmVFZGdlO1xuICAgIHRoaXMuYm90dG9tbW9zdEZsb2F0VG9wID0gdGhpcy5iZWZvcmVFZGdlO1xuICAgIHRoaXMuZm9vdG5vdGVFZGdlID0gdGhpcy5hZnRlckVkZ2U7XG4gICAgdGhpcy5iYW5kcyA9IEdlb21ldHJ5VXRpbC5zaGFwZXNUb0JhbmRzKFxuICAgICAgdGhpcy5ib3gsXG4gICAgICBbdGhpcy5nZXRJbm5lclNoYXBlKCldLFxuICAgICAgdGhpcy5nZXRFeGNsdXNpb25zKCksXG4gICAgICA4LFxuICAgICAgdGhpcy5zbmFwSGVpZ2h0LFxuICAgICAgdGhpcy52ZXJ0aWNhbCxcbiAgICApO1xuICAgIHRoaXMuY3JlYXRlRmxvYXRzKCk7XG4gIH1cblxuICBpbml0KCk6IHZvaWQge1xuICAgIHRoaXMuY2h1bmtQb3NpdGlvbnMgPSBbXTtcbiAgICBCYXNlLnNldENTU1Byb3BlcnR5KHRoaXMuZWxlbWVudCwgXCJ3aWR0aFwiLCBgJHt0aGlzLndpZHRofXB4YCk7XG4gICAgQmFzZS5zZXRDU1NQcm9wZXJ0eSh0aGlzLmVsZW1lbnQsIFwiaGVpZ2h0XCIsIGAke3RoaXMuaGVpZ2h0fXB4YCk7XG4gICAgdGhpcy5pbml0R2VvbSgpO1xuICAgIHRoaXMuY29tcHV0ZWRCbG9ja1NpemUgPSAwO1xuICAgIHRoaXMub3ZlcmZsb3duID0gZmFsc2U7XG4gICAgdGhpcy5wYWdlQnJlYWtUeXBlID0gbnVsbDtcbiAgICB0aGlzLmxhc3RBZnRlclBvc2l0aW9uID0gbnVsbDtcbiAgfVxuXG4gIC8qKlxuICAgKiBTYXZlIHRoZSBwb3RlbnRpYWwgYnJlYWtpbmcgcG9zaXRpb24gYXQgdGhlIGVkZ2UuIFNob3VsZCwgaW4gZ2VuZXJhbCwgc2F2ZVxuICAgKiBcImFmdGVyXCIgcG9zaXRpb24gYnV0IG9ubHkgYWZ0ZXIgc2tpcHBpbmcgYWxsIG9mIHRoZSBcImJlZm9yZVwiIG9uZXMgYW5kXG4gICAqIGdldHRpbmcgdG8gdGhlIG5vbi1lbXB0eSBjb250ZW50ICh0byBnZXQgYnJlYWtBdEVkZ2UgcmlnaHQpLlxuICAgKi9cbiAgc2F2ZUVkZ2VCcmVha1Bvc2l0aW9uKFxuICAgIHBvc2l0aW9uOiBWdHJlZS5Ob2RlQ29udGV4dCxcbiAgICBicmVha0F0RWRnZTogc3RyaW5nIHwgbnVsbCxcbiAgICBvdmVyZmxvd3M6IGJvb2xlYW4sXG4gICk6IHZvaWQge1xuICAgIEFzc2VydHMuYXNzZXJ0KHBvc2l0aW9uLmZvcm1hdHRpbmdDb250ZXh0KTtcbiAgICBjb25zdCBjb3B5ID0gcG9zaXRpb24uY29weSgpO1xuICAgIGNvbnN0IGxheW91dFByb2Nlc3NvciA9IG5ldyBMYXlvdXRQcm9jZXNzb3IuTGF5b3V0UHJvY2Vzc29yUmVzb2x2ZXIoKS5maW5kKFxuICAgICAgcG9zaXRpb24uZm9ybWF0dGluZ0NvbnRleHQsXG4gICAgKTtcbiAgICBjb25zdCBjbG9uZWRQYWRkaW5nQm9yZGVyID0gdGhpcy5jYWxjdWxhdGVDbG9uZWRQYWRkaW5nQm9yZGVyKGNvcHkpO1xuICAgIGNvbnN0IGJwID0gbGF5b3V0UHJvY2Vzc29yLmNyZWF0ZUVkZ2VCcmVha1Bvc2l0aW9uKFxuICAgICAgY29weSxcbiAgICAgIGJyZWFrQXRFZGdlLFxuICAgICAgb3ZlcmZsb3dzLFxuICAgICAgdGhpcy5jb21wdXRlZEJsb2NrU2l6ZSArIGNsb25lZFBhZGRpbmdCb3JkZXIsXG4gICAgKTtcbiAgICB0aGlzLmJyZWFrUG9zaXRpb25zLnB1c2goYnApO1xuICB9XG5cbiAgLyoqXG4gICAqIEBwYXJhbSBjaGVja1BvaW50cyBhcnJheSBvZiBicmVha2luZyBwb2ludHMgZm9yIGJyZWFrYWJsZSBibG9ja1xuICAgKi9cbiAgc2F2ZUJveEJyZWFrUG9zaXRpb24oY2hlY2tQb2ludHM6IFZ0cmVlLk5vZGVDb250ZXh0W10pOiB2b2lkIHtcbiAgICBjb25zdCBwZW5hbHR5ID0gY2hlY2tQb2ludHNbMF0uYnJlYWtQZW5hbHR5O1xuICAgIGNvbnN0IGJwID0gbmV3IEJveEJyZWFrUG9zaXRpb24oY2hlY2tQb2ludHMsIHBlbmFsdHkpO1xuICAgIHRoaXMuYnJlYWtQb3NpdGlvbnMucHVzaChicCk7XG4gIH1cblxuICB1cGRhdGVNYXhSZWFjaGVkQWZ0ZXJFZGdlKGFmdGVyRWRnZTogbnVtYmVyKSB7XG4gICAgaWYgKCFpc05hTihhZnRlckVkZ2UpKSB7XG4gICAgICBjb25zdCBzaXplID0gdGhpcy5nZXRCb3hEaXIoKSAqIChhZnRlckVkZ2UgLSB0aGlzLmJlZm9yZUVkZ2UpO1xuICAgICAgdGhpcy5jb21wdXRlZEJsb2NrU2l6ZSA9IE1hdGgubWF4KHNpemUsIHRoaXMuY29tcHV0ZWRCbG9ja1NpemUpO1xuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAgKiBAcGFyYW0gY2h1bmtQb3NpdGlvbiBzdGFydGluZyBwb3NpdGlvbi5cbiAgICogQHJldHVybiBob2xkaW5nIGVuZCBwb3NpdGlvbi5cbiAgICovXG4gIGxheW91dChcbiAgICBjaHVua1Bvc2l0aW9uOiBWdHJlZS5DaHVua1Bvc2l0aW9uLFxuICAgIGxlYWRpbmdFZGdlOiBib29sZWFuLFxuICAgIGJyZWFrQWZ0ZXI/OiBzdHJpbmcgfCBudWxsLFxuICApOiBUYXNrLlJlc3VsdDxWdHJlZS5DaHVua1Bvc2l0aW9uPiB7XG4gICAgdGhpcy5jaHVua1Bvc2l0aW9ucy5wdXNoKGNodW5rUG9zaXRpb24pOyAvLyBTbyB3ZSBjYW4gcmUtbGF5b3V0IHRoaXMgY29sdW1uIGxhdGVyXG4gICAgaWYgKGNodW5rUG9zaXRpb24ucHJpbWFyeS5hZnRlcikge1xuICAgICAgdGhpcy5sYXN0QWZ0ZXJQb3NpdGlvbiA9IGNodW5rUG9zaXRpb24ucHJpbWFyeTtcbiAgICB9XG4gICAgaWYgKHRoaXMuc3RvcEF0T3ZlcmZsb3cgJiYgdGhpcy5vdmVyZmxvd24pIHtcbiAgICAgIHJldHVybiBUYXNrLm5ld1Jlc3VsdChjaHVua1Bvc2l0aW9uIGFzIFZ0cmVlLkNodW5rUG9zaXRpb24pO1xuICAgIH1cbiAgICBpZiAodGhpcy5pc0Z1bGxXaXRoUGFnZUZsb2F0cygpKSB7XG4gICAgICBpZiAoXG4gICAgICAgIGNodW5rUG9zaXRpb24ucHJpbWFyeS5hZnRlciAmJlxuICAgICAgICBjaHVua1Bvc2l0aW9uLnByaW1hcnkuc3RlcHMubGVuZ3RoID09PSAxXG4gICAgICApIHtcbiAgICAgICAgLy8gRW5kIG9mIGNvbnRlbnRzXG4gICAgICAgIHJldHVybiBUYXNrLm5ld1Jlc3VsdChudWxsIGFzIFZ0cmVlLkNodW5rUG9zaXRpb24pO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcmV0dXJuIFRhc2submV3UmVzdWx0KGNodW5rUG9zaXRpb24gYXMgVnRyZWUuQ2h1bmtQb3NpdGlvbik7XG4gICAgICB9XG4gICAgfVxuICAgIGNvbnN0IGZyYW1lOiBUYXNrLkZyYW1lPFZ0cmVlLkNodW5rUG9zaXRpb24+ID0gVGFzay5uZXdGcmFtZShcImxheW91dFwiKTtcblxuICAgIC8vIC0tLS0tLSBzdGFydCB0aGUgY29sdW1uIC0tLS0tLS0tLS0tXG4gICAgdGhpcy5vcGVuQWxsVmlld3MoY2h1bmtQb3NpdGlvbi5wcmltYXJ5KS50aGVuKChub2RlQ29udGV4dCkgPT4ge1xuICAgICAgbGV0IGluaXRpYWxOb2RlQ29udGV4dDogVnRyZWUuTm9kZUNvbnRleHQgPSBudWxsO1xuICAgICAgaWYgKG5vZGVDb250ZXh0LnZpZXdOb2RlKSB7XG4gICAgICAgIGluaXRpYWxOb2RlQ29udGV4dCA9IG5vZGVDb250ZXh0LmNvcHkoKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGNvbnN0IG5leHRJblRyZWVMaXN0ZW5lciA9IChldnQpID0+IHtcbiAgICAgICAgICBpZiAoZXZ0Lm5vZGVDb250ZXh0LnZpZXdOb2RlKSB7XG4gICAgICAgICAgICBpbml0aWFsTm9kZUNvbnRleHQgPSBldnQubm9kZUNvbnRleHQ7XG4gICAgICAgICAgICB0aGlzLmxheW91dENvbnRleHQucmVtb3ZlRXZlbnRMaXN0ZW5lcihcbiAgICAgICAgICAgICAgXCJuZXh0SW5UcmVlXCIsXG4gICAgICAgICAgICAgIG5leHRJblRyZWVMaXN0ZW5lcixcbiAgICAgICAgICAgICk7XG4gICAgICAgICAgfVxuICAgICAgICB9O1xuICAgICAgICB0aGlzLmxheW91dENvbnRleHQuYWRkRXZlbnRMaXN0ZW5lcihcIm5leHRJblRyZWVcIiwgbmV4dEluVHJlZUxpc3RlbmVyKTtcbiAgICAgIH1cbiAgICAgIGNvbnN0IHJldHJ5ZXIgPSBuZXcgQ29sdW1uTGF5b3V0UmV0cnllcihsZWFkaW5nRWRnZSwgYnJlYWtBZnRlcik7XG4gICAgICByZXRyeWVyLmxheW91dChub2RlQ29udGV4dCwgdGhpcykudGhlbigobm9kZUNvbnRleHRQYXJhbSkgPT4ge1xuICAgICAgICB0aGlzLmRvRmluaXNoQnJlYWsoXG4gICAgICAgICAgbm9kZUNvbnRleHRQYXJhbSxcbiAgICAgICAgICByZXRyeWVyLmNvbnRleHQub3ZlcmZsb3duTm9kZUNvbnRleHQsXG4gICAgICAgICAgaW5pdGlhbE5vZGVDb250ZXh0LFxuICAgICAgICAgIHJldHJ5ZXIuaW5pdGlhbENvbXB1dGVkQmxvY2tTaXplLFxuICAgICAgICApLnRoZW4oKHBvc2l0aW9uQWZ0ZXIpID0+IHtcbiAgICAgICAgICBsZXQgY29udDogVGFzay5SZXN1bHQ8Ym9vbGVhbj4gPSBudWxsO1xuICAgICAgICAgIGlmICghdGhpcy5wc2V1ZG9QYXJlbnQpIHtcbiAgICAgICAgICAgIGNvbnQgPSB0aGlzLmRvRmluaXNoQnJlYWtPZkZyYWdtZW50TGF5b3V0Q29uc3RyYWludHMocG9zaXRpb25BZnRlcik7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGNvbnQgPSBUYXNrLm5ld1Jlc3VsdChudWxsKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgY29udC50aGVuKCgpID0+IHtcbiAgICAgICAgICAgIGlmICh0aGlzLnBhZ2VGbG9hdExheW91dENvbnRleHQuaXNJbnZhbGlkYXRlZCgpKSB7XG4gICAgICAgICAgICAgIGZyYW1lLmZpbmlzaChudWxsKTtcbiAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKCFwb3NpdGlvbkFmdGVyKSB7XG4gICAgICAgICAgICAgIGZyYW1lLmZpbmlzaChudWxsKTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgIHRoaXMub3ZlcmZsb3duID0gdHJ1ZTtcbiAgICAgICAgICAgICAgY29uc3QgcmVzdWx0ID0gbmV3IFZ0cmVlSW1wbC5DaHVua1Bvc2l0aW9uKFxuICAgICAgICAgICAgICAgIHBvc2l0aW9uQWZ0ZXIudG9Ob2RlUG9zaXRpb24oKSxcbiAgICAgICAgICAgICAgKTtcbiAgICAgICAgICAgICAgZnJhbWUuZmluaXNoKHJlc3VsdCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSk7XG4gICAgICAgIH0pO1xuICAgICAgfSk7XG4gICAgfSk7XG4gICAgcmV0dXJuIGZyYW1lLnJlc3VsdCgpO1xuICB9XG5cbiAgaXNGdWxsV2l0aFBhZ2VGbG9hdHMoKTogYm9vbGVhbiB7XG4gICAgcmV0dXJuIHRoaXMucGFnZUZsb2F0TGF5b3V0Q29udGV4dC5pc0NvbHVtbkZ1bGxXaXRoUGFnZUZsb2F0cyh0aGlzKTtcbiAgfVxuXG4gIGdldE1heEJsb2NrU2l6ZU9mUGFnZUZsb2F0cygpOiBudW1iZXIge1xuICAgIHJldHVybiB0aGlzLnBhZ2VGbG9hdExheW91dENvbnRleHQuZ2V0TWF4QmxvY2tTaXplT2ZQYWdlRmxvYXRzKCk7XG4gIH1cblxuICBkb0ZpbmlzaEJyZWFrT2ZGcmFnbWVudExheW91dENvbnN0cmFpbnRzKFxuICAgIG5vZGVDb250ZXh0OiBWdHJlZS5Ob2RlQ29udGV4dCxcbiAgKTogVGFzay5SZXN1bHQ8Ym9vbGVhbj4ge1xuICAgIGNvbnN0IGZyYW1lOiBUYXNrLkZyYW1lPGJvb2xlYW4+ID0gVGFzay5uZXdGcmFtZShcbiAgICAgIFwiZG9GaW5pc2hCcmVha09mRnJhZ21lbnRMYXlvdXRDb25zdHJhaW50c1wiLFxuICAgICk7XG4gICAgY29uc3Qgc29ydGVkRnJhZ21lbnRMYXlvdXRDb25zdHJhaW50cyA9IFtdLmNvbmNhdChcbiAgICAgIHRoaXMuZnJhZ21lbnRMYXlvdXRDb25zdHJhaW50cyxcbiAgICApO1xuICAgIHNvcnRlZEZyYWdtZW50TGF5b3V0Q29uc3RyYWludHMuc29ydChcbiAgICAgIChhLCBiKSA9PiBhLmdldFByaW9yaXR5T2ZGaW5pc2hCcmVhaygpIC0gYi5nZXRQcmlvcml0eU9mRmluaXNoQnJlYWsoKSxcbiAgICApO1xuICAgIGxldCBpID0gMDtcbiAgICBmcmFtZVxuICAgICAgLmxvb3AoKCkgPT4ge1xuICAgICAgICBpZiAoaSA8IHNvcnRlZEZyYWdtZW50TGF5b3V0Q29uc3RyYWludHMubGVuZ3RoKSB7XG4gICAgICAgICAgY29uc3QgcmVzdWx0ID0gc29ydGVkRnJhZ21lbnRMYXlvdXRDb25zdHJhaW50c1tpKytdLmZpbmlzaEJyZWFrKFxuICAgICAgICAgICAgbm9kZUNvbnRleHQsXG4gICAgICAgICAgICB0aGlzLFxuICAgICAgICAgICk7XG4gICAgICAgICAgcmV0dXJuIHJlc3VsdC50aGVuUmV0dXJuKHRydWUpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHJldHVybiBUYXNrLm5ld1Jlc3VsdChmYWxzZSk7XG4gICAgICAgIH1cbiAgICAgIH0pXG4gICAgICAudGhlbigoKSA9PiB7XG4gICAgICAgIGZyYW1lLmZpbmlzaCh0cnVlKTtcbiAgICAgIH0pO1xuICAgIHJldHVybiBmcmFtZS5yZXN1bHQoKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBAcGFyYW0gbm9kZUNvbnRleHQgc3RhcnRpbmcgcG9zaXRpb24uXG4gICAqIEByZXR1cm4gaG9sZGluZyBlbmQgcG9zaXRpb24uXG4gICAqL1xuICBkb0xheW91dChcbiAgICBub2RlQ29udGV4dDogVnRyZWUuTm9kZUNvbnRleHQsXG4gICAgbGVhZGluZ0VkZ2U6IGJvb2xlYW4sXG4gICAgYnJlYWtBZnRlcj86IHN0cmluZyB8IG51bGwsXG4gICk6IFRhc2suUmVzdWx0PHtcbiAgICBub2RlQ29udGV4dDogVnRyZWUuTm9kZUNvbnRleHQ7XG4gICAgb3ZlcmZsb3duTm9kZUNvbnRleHQ6IFZ0cmVlLk5vZGVDb250ZXh0O1xuICB9PiB7XG4gICAgY29uc3QgZnJhbWU6IFRhc2suRnJhbWU8e1xuICAgICAgbm9kZUNvbnRleHQ6IFZ0cmVlLk5vZGVDb250ZXh0O1xuICAgICAgb3ZlcmZsb3duTm9kZUNvbnRleHQ6IFZ0cmVlLk5vZGVDb250ZXh0O1xuICAgIH0+ID0gVGFzay5uZXdGcmFtZShcImRvTGF5b3V0XCIpO1xuICAgIGxldCBvdmVyZmxvd25Ob2RlQ29udGV4dDogVnRyZWUuTm9kZUNvbnRleHQgPSBudWxsO1xuXG4gICAgLy8gLS0tLS0tIGluaXQgYmFja3RyYWNraW5nIGxpc3QgLS0tLS1cbiAgICB0aGlzLmJyZWFrUG9zaXRpb25zID0gW107XG4gICAgdGhpcy5ub2RlQ29udGV4dE92ZXJmbG93aW5nRHVlVG9SZXBldGl0aXZlRWxlbWVudHMgPSBudWxsO1xuXG4gICAgLy8gLS0tLS0tLSBmaWxsIHRoZSBjb2x1bW4gLS0tLS0tLS0tLS0tLVxuICAgIGZyYW1lXG4gICAgICAubG9vcFdpdGhGcmFtZSgobG9vcEZyYW1lKSA9PiB7XG4gICAgICAgIHdoaWxlIChub2RlQ29udGV4dCkge1xuICAgICAgICAgIC8vIGZpbGwgYSBzaW5nbGUgYmxvY2tcbiAgICAgICAgICBsZXQgcGVuZGluZyA9IHRydWU7XG4gICAgICAgICAgdGhpcy5sYXlvdXROZXh0KG5vZGVDb250ZXh0LCBsZWFkaW5nRWRnZSwgYnJlYWtBZnRlciB8fCBudWxsKS50aGVuKFxuICAgICAgICAgICAgKG5vZGVDb250ZXh0UGFyYW0pID0+IHtcbiAgICAgICAgICAgICAgbGVhZGluZ0VkZ2UgPSBmYWxzZTtcbiAgICAgICAgICAgICAgYnJlYWtBZnRlciA9IG51bGw7XG4gICAgICAgICAgICAgIGlmIChcbiAgICAgICAgICAgICAgICB0aGlzLm5vZGVDb250ZXh0T3ZlcmZsb3dpbmdEdWVUb1JlcGV0aXRpdmVFbGVtZW50cyAmJlxuICAgICAgICAgICAgICAgIHRoaXMuc3RvcEF0T3ZlcmZsb3dcbiAgICAgICAgICAgICAgKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5wYWdlQnJlYWtUeXBlID0gbnVsbDtcbiAgICAgICAgICAgICAgICBub2RlQ29udGV4dCA9IHRoaXNcbiAgICAgICAgICAgICAgICAgIC5ub2RlQ29udGV4dE92ZXJmbG93aW5nRHVlVG9SZXBldGl0aXZlRWxlbWVudHM7XG4gICAgICAgICAgICAgICAgbm9kZUNvbnRleHQub3ZlcmZsb3cgPSB0cnVlO1xuICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIG5vZGVDb250ZXh0ID0gbm9kZUNvbnRleHRQYXJhbTtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICBpZiAodGhpcy5wYWdlRmxvYXRMYXlvdXRDb250ZXh0LmlzSW52YWxpZGF0ZWQoKSkge1xuICAgICAgICAgICAgICAgIGxvb3BGcmFtZS5icmVha0xvb3AoKTtcbiAgICAgICAgICAgICAgfSBlbHNlIGlmICh0aGlzLnBhZ2VCcmVha1R5cGUpIHtcbiAgICAgICAgICAgICAgICAvLyBleHBsaWNpdCBwYWdlIGJyZWFrXG4gICAgICAgICAgICAgICAgbG9vcEZyYW1lLmJyZWFrTG9vcCgpOyAvLyBMb29wIGVuZFxuICAgICAgICAgICAgICB9IGVsc2UgaWYgKG5vZGVDb250ZXh0ICYmIHRoaXMuc3RvcEJ5T3ZlcmZsb3cobm9kZUNvbnRleHQpKSB7XG4gICAgICAgICAgICAgICAgLy8gb3ZlcmZsb3cgKGltcGxpY2l0IHBhZ2UgYnJlYWspOiBiYWNrIHVwIGFuZCBmaW5kIGFcbiAgICAgICAgICAgICAgICAvLyBwYWdlIGJyZWFrXG4gICAgICAgICAgICAgICAgb3ZlcmZsb3duTm9kZUNvbnRleHQgPSBub2RlQ29udGV4dDtcbiAgICAgICAgICAgICAgICBjb25zdCBicCA9IHRoaXMuZmluZEFjY2VwdGFibGVCcmVha1Bvc2l0aW9uKCk7XG4gICAgICAgICAgICAgICAgbm9kZUNvbnRleHQgPSBicC5ub2RlQ29udGV4dDtcbiAgICAgICAgICAgICAgICBpZiAoYnAuYnJlYWtQb3NpdGlvbikge1xuICAgICAgICAgICAgICAgICAgYnAuYnJlYWtQb3NpdGlvbi5icmVha1Bvc2l0aW9uQ2hvc2VuKHRoaXMpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBsb29wRnJhbWUuYnJlYWtMb29wKCk7IC8vIExvb3AgZW5kXG4gICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgaWYgKHBlbmRpbmcpIHtcbiAgICAgICAgICAgICAgICAgIC8vIFN5bmMgY2FzZVxuICAgICAgICAgICAgICAgICAgcGVuZGluZyA9IGZhbHNlO1xuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAvLyBBc3luYyBjYXNlXG4gICAgICAgICAgICAgICAgICBsb29wRnJhbWUuY29udGludWVMb29wKCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICk7XG4gICAgICAgICAgaWYgKHBlbmRpbmcpIHtcbiAgICAgICAgICAgIC8vIEFzeW5jIGNhc2UgYW5kIGxvb3AgZW5kXG4gICAgICAgICAgICBwZW5kaW5nID0gZmFsc2U7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgLy8gU3luYyBjYXNlXG4gICAgICAgIHRoaXMuY29tcHV0ZWRCbG9ja1NpemUgKz0gdGhpcy5nZXRPZmZzZXRCeVJlcGV0aXRpdmVFbGVtZW50cygpO1xuICAgICAgICBsb29wRnJhbWUuYnJlYWtMb29wKCk7XG4gICAgICB9KVxuICAgICAgLnRoZW4oKCkgPT4ge1xuICAgICAgICBmcmFtZS5maW5pc2goeyBub2RlQ29udGV4dCwgb3ZlcmZsb3duTm9kZUNvbnRleHQgfSk7XG4gICAgICB9KTtcbiAgICByZXR1cm4gZnJhbWUucmVzdWx0KCk7XG4gIH1cblxuICAvKipcbiAgICogUmUtbGF5b3V0IGFscmVhZHkgbGFpZC1vdXQgY2h1bmtzLiBSZXR1cm4gdGhlIHBvc2l0aW9uIG9mIHRoZSBsYXN0IGZsb3cgaWZcbiAgICogdGhlcmUgaXMgYW4gb3ZlcmZsb3cuXG4gICAqIFRPRE86IGRlYWwgd2l0aCBjaHVua3MgdGhhdCBkaWQgbm90IGZpdCBhdCBhbGwuXG4gICAqIEByZXR1cm4gaG9sZGluZyBlbmQgcG9zaXRpb24uXG4gICAqL1xuICByZWRvTGF5b3V0KCk6IFRhc2suUmVzdWx0PFZ0cmVlLkNodW5rUG9zaXRpb24+IHtcbiAgICBjb25zdCBjaHVua1Bvc2l0aW9ucyA9IHRoaXMuY2h1bmtQb3NpdGlvbnM7XG4gICAgbGV0IGxhc3Q6IE5vZGUgPSB0aGlzLmVsZW1lbnQubGFzdENoaWxkO1xuICAgIHdoaWxlIChsYXN0ICE9IHRoaXMubGFzdCkge1xuICAgICAgY29uc3QgcHJldiA9IGxhc3QucHJldmlvdXNTaWJsaW5nO1xuICAgICAgaWYgKFxuICAgICAgICAhKFxuICAgICAgICAgIHRoaXMuZWxlbWVudCA9PT0gbGFzdC5wYXJlbnROb2RlICYmXG4gICAgICAgICAgKHRoaXMubGF5b3V0Q29udGV4dCBhcyBWZ2VuLlZpZXdGYWN0b3J5KS5pc1BzZXVkb2VsZW1lbnQobGFzdClcbiAgICAgICAgKVxuICAgICAgKSB7XG4gICAgICAgIHRoaXMuZWxlbWVudC5yZW1vdmVDaGlsZChsYXN0KTtcbiAgICAgIH1cbiAgICAgIGxhc3QgPSBwcmV2O1xuICAgIH1cbiAgICB0aGlzLmtpbGxGbG9hdHMoKTtcbiAgICB0aGlzLmluaXQoKTtcbiAgICBjb25zdCBmcmFtZTogVGFzay5GcmFtZTxWdHJlZS5DaHVua1Bvc2l0aW9uPiA9IFRhc2submV3RnJhbWUoXCJyZWRvTGF5b3V0XCIpO1xuICAgIGxldCBpID0gMDtcbiAgICBsZXQgcmVzOiBWdHJlZS5DaHVua1Bvc2l0aW9uID0gbnVsbDtcbiAgICBsZXQgbGVhZGluZ0VkZ2UgPSB0cnVlO1xuICAgIGZyYW1lXG4gICAgICAubG9vcFdpdGhGcmFtZSgobG9vcEZyYW1lKSA9PiB7XG4gICAgICAgIGlmIChpIDwgY2h1bmtQb3NpdGlvbnMubGVuZ3RoKSB7XG4gICAgICAgICAgY29uc3QgY2h1bmtQb3NpdGlvbiA9IGNodW5rUG9zaXRpb25zW2krK107XG4gICAgICAgICAgdGhpcy5sYXlvdXQoY2h1bmtQb3NpdGlvbiwgbGVhZGluZ0VkZ2UpLnRoZW4oKHBvcykgPT4ge1xuICAgICAgICAgICAgbGVhZGluZ0VkZ2UgPSBmYWxzZTtcbiAgICAgICAgICAgIGlmIChwb3MpIHtcbiAgICAgICAgICAgICAgcmVzID0gcG9zO1xuICAgICAgICAgICAgICBsb29wRnJhbWUuYnJlYWtMb29wKCk7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICBsb29wRnJhbWUuY29udGludWVMb29wKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSk7XG4gICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIGxvb3BGcmFtZS5icmVha0xvb3AoKTtcbiAgICAgIH0pXG4gICAgICAudGhlbigoKSA9PiB7XG4gICAgICAgIGZyYW1lLmZpbmlzaChyZXMpO1xuICAgICAgfSk7XG4gICAgcmV0dXJuIGZyYW1lLnJlc3VsdCgpO1xuICB9XG5cbiAgc2F2ZURpc3RhbmNlVG9CbG9ja0VuZEZsb2F0cygpIHtcbiAgICBjb25zdCBibG9ja1N0YXJ0RWRnZU9mQmxvY2tFbmRGbG9hdHMgPSB0aGlzLnBhZ2VGbG9hdExheW91dENvbnRleHQuZ2V0QmxvY2tTdGFydEVkZ2VPZkJsb2NrRW5kRmxvYXRzKCk7XG4gICAgaWYgKFxuICAgICAgYmxvY2tTdGFydEVkZ2VPZkJsb2NrRW5kRmxvYXRzID4gMCAmJlxuICAgICAgaXNGaW5pdGUoYmxvY2tTdGFydEVkZ2VPZkJsb2NrRW5kRmxvYXRzKVxuICAgICkge1xuICAgICAgdGhpcy5ibG9ja0Rpc3RhbmNlVG9CbG9ja0VuZEZsb2F0cyA9XG4gICAgICAgIHRoaXMuZ2V0Qm94RGlyKCkgKlxuICAgICAgICAoYmxvY2tTdGFydEVkZ2VPZkJsb2NrRW5kRmxvYXRzIC1cbiAgICAgICAgICB0aGlzLmJlZm9yZUVkZ2UgLVxuICAgICAgICAgIHRoaXMuY29tcHV0ZWRCbG9ja1NpemUpO1xuICAgIH1cbiAgfVxuXG4gIGNvbGxlY3RFbGVtZW50c09mZnNldCgpOiBSZXBldGl0aXZlRWxlbWVudC5FbGVtZW50c09mZnNldFtdIHtcbiAgICBjb25zdCByZXBldGl0aXZlRWxlbWVudHM6IFJlcGV0aXRpdmVFbGVtZW50LkVsZW1lbnRzT2Zmc2V0W10gPSBbXTtcbiAgICBmb3IgKGxldCBjdXJyZW50OiBDb2x1bW4gPSB0aGlzOyBjdXJyZW50OyBjdXJyZW50ID0gY3VycmVudC5wc2V1ZG9QYXJlbnQpIHtcbiAgICAgIGN1cnJlbnQuZnJhZ21lbnRMYXlvdXRDb25zdHJhaW50cy5mb3JFYWNoKChjb25zdHJhaW50KSA9PiB7XG4gICAgICAgIGlmIChcbiAgICAgICAgICBSZXBldGl0aXZlRWxlbWVudC5pc0luc3RhbmNlT2ZSZXBldGl0aXZlRWxlbWVudHNPd25lckxheW91dENvbnN0cmFpbnQoXG4gICAgICAgICAgICBjb25zdHJhaW50LFxuICAgICAgICAgIClcbiAgICAgICAgKSB7XG4gICAgICAgICAgY29uc3QgcmVwZXRpdGl2ZUVsZW1lbnQgPSBjb25zdHJhaW50LmdldFJlcGV0aXRpdmVFbGVtZW50cygpO1xuICAgICAgICAgIHJlcGV0aXRpdmVFbGVtZW50cy5wdXNoKHJlcGV0aXRpdmVFbGVtZW50KTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoXG4gICAgICAgICAgU2VsZWN0b3JzLmlzSW5zdGFuY2VPZkFmdGVySWZDb250aW51ZXNMYXlvdXRDb25zdHJhaW50KGNvbnN0cmFpbnQpXG4gICAgICAgICkge1xuICAgICAgICAgIGNvbnN0IHJlcGV0aXRpdmVFbGVtZW50ID0gY29uc3RyYWludC5nZXRSZXBldGl0aXZlRWxlbWVudHMoKTtcbiAgICAgICAgICByZXBldGl0aXZlRWxlbWVudHMucHVzaChyZXBldGl0aXZlRWxlbWVudCk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKFRhYmxlLmlzSW5zdGFuY2VPZlRhYmxlUm93TGF5b3V0Q29uc3RyYWludChjb25zdHJhaW50KSkge1xuICAgICAgICAgIGNvbnN0cmFpbnRcbiAgICAgICAgICAgIC5nZXRFbGVtZW50c09mZnNldHNGb3JUYWJsZUNlbGwodGhpcylcbiAgICAgICAgICAgIC5mb3JFYWNoKChyZXBldGl0aXZlRWxlbWVudCkgPT4ge1xuICAgICAgICAgICAgICByZXBldGl0aXZlRWxlbWVudHMucHVzaChyZXBldGl0aXZlRWxlbWVudCk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgfVxuICAgIHJldHVybiByZXBldGl0aXZlRWxlbWVudHM7XG4gIH1cbn1cblxuLyoqXG4gKiBSZXByZXNlbnRzIGEgXCJwc2V1ZG9cIi1jb2x1bW4gbmVzdGVkIGluc2lkZSBhIHJlYWwgY29sdW1uLlxuICogVGhpcyBjbGFzcyBpcyBjcmVhdGVkIHRvIGhhbmRsZSBwYXJhbGxlbCBmcmFnbWVudGVkIGZsb3dzIChlLmcuIHRhYmxlIGNvbHVtbnNcbiAqIGluIGEgc2luZ2xlIHRhYmxlIHJvdykuIEEgcHNldWRvLWNvbHVtbiBiZWhhdmVzIGluIHRoZSBzYW1lIHdheSBhcyB0aGVcbiAqIG9yaWdpbmFsIGNvbHVtbiwgc2hhcmluZyBpdHMgcHJvcGVydGllcy4gUHJvcGVydHkgY2hhbmdlcyBvbiB0aGVcbiAqIHBzZXVkby1jb2x1bW4gYXJlIG5vdCBwcm9wYWdhdGVkIHRvIHRoZSBvcmlnaW5hbCBjb2x1bW4uIFRoZSBMYXlvdXRDb250ZXh0IG9mXG4gKiB0aGUgb3JpZ2luYWwgY29sdW1uIGlzIGFsc28gY2xvbmVkIGFuZCB1c2VkIGJ5IHRoZSBwc2V1ZG8tY29sdW1uLCBub3QgdG9cbiAqIHByb3BhZ2F0ZSBzdGF0ZSBjaGFuZ2VzIG9mIHRoZSBMYXlvdXRDb250ZXh0IGNhdXNlZCBieSB0aGUgcHNldWRvLWNvbHVtbi5cbiAqIEBwYXJhbSBjb2x1bW4gVGhlIG9yaWdpbmFsIChwYXJlbnQpIGNvbHVtblxuICogQHBhcmFtIHZpZXdSb290IFJvb3QgZWxlbWVudCBmb3IgdGhlIHBzZXVkby1jb2x1bW4sIGkuZS4sIHRoZSByb290IG9mIHRoZVxuICogICAgIGZyYWdtZW50ZWQgZmxvdy5cbiAqIEBwYXJhbSBwYXJlbnROb2RlQ29udGV4dCBBIE5vZGVDb250ZXh0IGdlbmVyYXRpbmcgdGhpcyBQc2V1ZG9Db2x1bW5cbiAqL1xuZXhwb3J0IGNsYXNzIFBzZXVkb0NvbHVtbiB7XG4gIHN0YXJ0Tm9kZUNvbnRleHRzOiBWdHJlZS5Ob2RlQ29udGV4dFtdID0gW107XG4gIHByaXZhdGUgY29sdW1uOiBMYXlvdXQuQ29sdW1uO1xuICBjb25zdHJ1Y3RvcihcbiAgICBjb2x1bW46IExheW91dC5Db2x1bW4sXG4gICAgdmlld1Jvb3Q6IEVsZW1lbnQsXG4gICAgcGFyZW50Tm9kZUNvbnRleHQ6IFZ0cmVlLk5vZGVDb250ZXh0LFxuICApIHtcbiAgICB0aGlzLmNvbHVtbiA9IE9iamVjdC5jcmVhdGUoY29sdW1uKSBhcyBMYXlvdXQuQ29sdW1uO1xuICAgIHRoaXMuY29sdW1uLmVsZW1lbnQgPSB2aWV3Um9vdDtcbiAgICB0aGlzLmNvbHVtbi5sYXlvdXRDb250ZXh0ID0gY29sdW1uLmxheW91dENvbnRleHQuY2xvbmUoKTtcbiAgICB0aGlzLmNvbHVtbi5zdG9wQXRPdmVyZmxvdyA9IGZhbHNlO1xuICAgIHRoaXMuY29sdW1uLmZsb3dSb290Rm9ybWF0dGluZ0NvbnRleHQgPSBwYXJlbnROb2RlQ29udGV4dC5mb3JtYXR0aW5nQ29udGV4dDtcbiAgICB0aGlzLmNvbHVtbi5wc2V1ZG9QYXJlbnQgPSBjb2x1bW47XG4gICAgY29uc3QgcGFyZW50Q2xvbmVkUGFkZGluZ0JvcmRlciA9IHRoaXMuY29sdW1uLmNhbGN1bGF0ZUNsb25lZFBhZGRpbmdCb3JkZXIoXG4gICAgICBwYXJlbnROb2RlQ29udGV4dCxcbiAgICApO1xuICAgIHRoaXMuY29sdW1uLmZvb3Rub3RlRWRnZSA9XG4gICAgICB0aGlzLmNvbHVtbi5mb290bm90ZUVkZ2UgLSBwYXJlbnRDbG9uZWRQYWRkaW5nQm9yZGVyO1xuICAgIGNvbnN0IHBzZXVkb0NvbHVtbiA9IHRoaXM7XG4gICAgdGhpcy5jb2x1bW4ub3BlbkFsbFZpZXdzID0gZnVuY3Rpb24gKHBvc2l0aW9uKSB7XG4gICAgICByZXR1cm4gQ29sdW1uLnByb3RvdHlwZS5vcGVuQWxsVmlld3NcbiAgICAgICAgLmNhbGwodGhpcywgcG9zaXRpb24pXG4gICAgICAgIC50aGVuQXN5bmMoKHJlc3VsdCkgPT4ge1xuICAgICAgICAgIHBzZXVkb0NvbHVtbi5zdGFydE5vZGVDb250ZXh0cy5wdXNoKHJlc3VsdC5jb3B5KCkpO1xuICAgICAgICAgIHJldHVybiBUYXNrLm5ld1Jlc3VsdChyZXN1bHQpO1xuICAgICAgICB9KTtcbiAgICB9O1xuICB9XG4gIC8qKlxuICAgKiBAcGFyYW0gY2h1bmtQb3NpdGlvbiBzdGFydGluZyBwb3NpdGlvbi5cbiAgICogQHJldHVybiBob2xkaW5nIGVuZCBwb3NpdGlvbi5cbiAgICovXG4gIGxheW91dChcbiAgICBjaHVua1Bvc2l0aW9uOiBWdHJlZS5DaHVua1Bvc2l0aW9uLFxuICAgIGxlYWRpbmdFZGdlOiBib29sZWFuLFxuICApOiBUYXNrLlJlc3VsdDxWdHJlZS5DaHVua1Bvc2l0aW9uPiB7XG4gICAgcmV0dXJuIHRoaXMuY29sdW1uLmxheW91dChjaHVua1Bvc2l0aW9uLCBsZWFkaW5nRWRnZSk7XG4gIH1cbiAgZmluZEFjY2VwdGFibGVCcmVha1Bvc2l0aW9uKFxuICAgIGFsbG93QnJlYWtBdFN0YXJ0UG9zaXRpb246IGJvb2xlYW4sXG4gICk6IExheW91dC5CcmVha1Bvc2l0aW9uQW5kTm9kZUNvbnRleHQge1xuICAgIGNvbnN0IHAgPSB0aGlzLmNvbHVtbi5maW5kQWNjZXB0YWJsZUJyZWFrUG9zaXRpb24oKTtcbiAgICBpZiAoYWxsb3dCcmVha0F0U3RhcnRQb3NpdGlvbikge1xuICAgICAgY29uc3Qgc3RhcnROb2RlQ29udGV4dCA9IHRoaXMuc3RhcnROb2RlQ29udGV4dHNbMF0uY29weSgpO1xuICAgICAgY29uc3QgYnAgPSBuZXcgQnJlYWtQb3NpdGlvbi5FZGdlQnJlYWtQb3NpdGlvbihcbiAgICAgICAgc3RhcnROb2RlQ29udGV4dCxcbiAgICAgICAgbnVsbCxcbiAgICAgICAgc3RhcnROb2RlQ29udGV4dC5vdmVyZmxvdyxcbiAgICAgICAgMCxcbiAgICAgICk7XG4gICAgICBicC5maW5kQWNjZXB0YWJsZUJyZWFrKHRoaXMuY29sdW1uLCAwKTtcbiAgICAgIGlmICghcC5ub2RlQ29udGV4dCkge1xuICAgICAgICByZXR1cm4geyBicmVha1Bvc2l0aW9uOiBicCwgbm9kZUNvbnRleHQ6IHN0YXJ0Tm9kZUNvbnRleHQgfTtcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIHA7XG4gIH1cbiAgLyoqXG4gICAqIEByZXR1cm4gaG9saW5nIHRydWVcbiAgICovXG4gIGZpbmlzaEJyZWFrKFxuICAgIG5vZGVDb250ZXh0OiBWdHJlZS5Ob2RlQ29udGV4dCxcbiAgICBmb3JjZVJlbW92ZVNlbGY6IGJvb2xlYW4sXG4gICAgZW5kT2ZDb2x1bW46IGJvb2xlYW4sXG4gICk6IFRhc2suUmVzdWx0PGJvb2xlYW4+IHtcbiAgICByZXR1cm4gdGhpcy5jb2x1bW4uZmluaXNoQnJlYWsobm9kZUNvbnRleHQsIGZvcmNlUmVtb3ZlU2VsZiwgZW5kT2ZDb2x1bW4pO1xuICB9XG4gIGRvRmluaXNoQnJlYWtPZkZyYWdtZW50TGF5b3V0Q29uc3RyYWludHMocG9zaXRpb25BZnRlcjogVnRyZWUuTm9kZUNvbnRleHQpIHtcbiAgICB0aGlzLmNvbHVtbi5kb0ZpbmlzaEJyZWFrT2ZGcmFnbWVudExheW91dENvbnN0cmFpbnRzKHBvc2l0aW9uQWZ0ZXIpO1xuICB9XG4gIGlzU3RhcnROb2RlQ29udGV4dChub2RlQ29udGV4dDogVnRyZWUuTm9kZUNvbnRleHQpOiBib29sZWFuIHtcbiAgICBjb25zdCBzdGFydE5vZGVDb250ZXh0ID0gdGhpcy5zdGFydE5vZGVDb250ZXh0c1swXTtcbiAgICByZXR1cm4gKFxuICAgICAgc3RhcnROb2RlQ29udGV4dC52aWV3Tm9kZSA9PT0gbm9kZUNvbnRleHQudmlld05vZGUgJiZcbiAgICAgIHN0YXJ0Tm9kZUNvbnRleHQuYWZ0ZXIgPT09IG5vZGVDb250ZXh0LmFmdGVyICYmXG4gICAgICBzdGFydE5vZGVDb250ZXh0Lm9mZnNldEluTm9kZSA9PT0gbm9kZUNvbnRleHQub2Zmc2V0SW5Ob2RlXG4gICAgKTtcbiAgfVxuICBpc0xhc3RBZnRlck5vZGVDb250ZXh0KG5vZGVDb250ZXh0OiBWdHJlZS5Ob2RlQ29udGV4dCk6IGJvb2xlYW4ge1xuICAgIHJldHVybiBWdHJlZUltcGwuaXNTYW1lTm9kZVBvc2l0aW9uKFxuICAgICAgbm9kZUNvbnRleHQudG9Ob2RlUG9zaXRpb24oKSxcbiAgICAgIHRoaXMuY29sdW1uLmxhc3RBZnRlclBvc2l0aW9uLFxuICAgICk7XG4gIH1cbiAgZ2V0Q29sdW1uRWxlbWVudCgpOiBFbGVtZW50IHtcbiAgICByZXR1cm4gdGhpcy5jb2x1bW4uZWxlbWVudDtcbiAgfVxuICBnZXRDb2x1bW4oKTogTGF5b3V0LkNvbHVtbiB7XG4gICAgcmV0dXJuIHRoaXMuY29sdW1uO1xuICB9XG59XG5cbmV4cG9ydCB0eXBlIFNpbmdsZVBhZ2VGbG9hdExheW91dFJlc3VsdCA9IExheW91dC5TaW5nbGVQYWdlRmxvYXRMYXlvdXRSZXN1bHQ7XG5cbmV4cG9ydCBmdW5jdGlvbiBmaXhKdXN0aWZpY2F0aW9uT25IeXBoZW4oXG4gIG5vZGVDb250ZXh0OiBWdHJlZS5Ob2RlQ29udGV4dCxcbiAgaW5zZXJ0QWZ0ZXI6IGJvb2xlYW4sXG4gIG5vZGU6IE5vZGUsXG4gIGluc2VydGlvblBvaW50OiBOb2RlLFxuKTogdm9pZCB7XG4gIGlmIChCYXNlLmNoZWNrU29mdFdyYXBPcHBvcnR1bml0eUFmdGVySHlwaGVuQnVnKGRvY3VtZW50LmJvZHkpKSB7XG4gICAgY29uc3QgaHlwaGVuQ2hhciA9IHJlc29sdmVIeXBoZW5hdGVDaGFyYWN0ZXIobm9kZUNvbnRleHQpO1xuICAgIGNvbnN0IHByZXZTaWJsaW5nID0gaW5zZXJ0QWZ0ZXIgPyBub2RlIDogbm9kZS5wcmV2aW91c1NpYmxpbmc7XG4gICAgY29uc3QgcHJldlRleHQgPSBwcmV2U2libGluZyA/IHByZXZTaWJsaW5nLnRleHRDb250ZW50IDogXCJcIjtcbiAgICBpZiAocHJldlRleHQuY2hhckF0KHByZXZUZXh0Lmxlbmd0aCAtIDEpID09PSBoeXBoZW5DaGFyKSB7XG4gICAgICBjb25zdCBkb2MgPSBub2RlLm93bmVyRG9jdW1lbnQ7XG4gICAgICBjb25zdCBwYXJlbnQgPSBub2RlLnBhcmVudE5vZGU7XG4gICAgICBpZiAoQmFzZS5jaGVja1NvZnRXcmFwT3Bwb3J0dW5pdHlCeVdickJ1Zyhkb2N1bWVudC5ib2R5KSkge1xuICAgICAgICAvLyBGb3IgSUVcbiAgICAgICAgcGFyZW50Lmluc2VydEJlZm9yZShkb2MuY3JlYXRlVGV4dE5vZGUoXCIgXCIpLCBpbnNlcnRpb25Qb2ludCk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICAvLyBGb3IgRWRnZVxuICAgICAgICBwYXJlbnQuaW5zZXJ0QmVmb3JlKGRvYy5jcmVhdGVFbGVtZW50KFwid2JyXCIpLCBpbnNlcnRpb25Qb2ludCk7XG4gICAgICB9XG4gICAgfVxuICB9XG59XG5cbi8qKlxuICogYnJlYWtpbmcgcG9pbnQgcmVzb2x2ZXIgZm9yIFRleHQgTm9kZS5cbiAqL1xuZXhwb3J0IGNsYXNzIFRleHROb2RlQnJlYWtlciBpbXBsZW1lbnRzIExheW91dC5UZXh0Tm9kZUJyZWFrZXIge1xuICBicmVha1RleHROb2RlKFxuICAgIHRleHROb2RlOiBUZXh0LFxuICAgIG5vZGVDb250ZXh0OiBWdHJlZS5Ob2RlQ29udGV4dCxcbiAgICBsb3c6IG51bWJlcixcbiAgICBjaGVja1BvaW50czogVnRyZWUuTm9kZUNvbnRleHRbXSxcbiAgICBjaGVja3BvaW50SW5kZXg6IG51bWJlcixcbiAgICBmb3JjZTogYm9vbGVhbixcbiAgKTogVnRyZWUuTm9kZUNvbnRleHQge1xuICAgIGlmIChub2RlQ29udGV4dC5hZnRlcikge1xuICAgICAgbm9kZUNvbnRleHQub2Zmc2V0SW5Ob2RlID0gdGV4dE5vZGUubGVuZ3RoO1xuICAgIH0gZWxzZSB7XG4gICAgICAvLyBDaGFyYWN0ZXIgd2l0aCBpbmRleCBsb3cgaXMgdGhlIGxhc3Qgb25lIHRoYXQgZml0cy5cbiAgICAgIGxldCB2aWV3SW5kZXggPSBsb3cgLSBub2RlQ29udGV4dC5ib3hPZmZzZXQ7XG4gICAgICBjb25zdCB0ZXh0ID0gdGV4dE5vZGUuZGF0YTtcbiAgICAgIGlmICh0ZXh0LmNoYXJDb2RlQXQodmlld0luZGV4KSA9PSAxNzMpIHtcbiAgICAgICAgdmlld0luZGV4ID0gdGhpcy5icmVha0FmdGVyU29mdEh5cGhlbihcbiAgICAgICAgICB0ZXh0Tm9kZSxcbiAgICAgICAgICB0ZXh0LFxuICAgICAgICAgIHZpZXdJbmRleCxcbiAgICAgICAgICBub2RlQ29udGV4dCxcbiAgICAgICAgKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHZpZXdJbmRleCA9IHRoaXMuYnJlYWtBZnRlck90aGVyQ2hhcmFjdGVyKFxuICAgICAgICAgIHRleHROb2RlLFxuICAgICAgICAgIHRleHQsXG4gICAgICAgICAgdmlld0luZGV4LFxuICAgICAgICAgIG5vZGVDb250ZXh0LFxuICAgICAgICApO1xuICAgICAgfVxuICAgICAgaWYgKHZpZXdJbmRleCA+IDApIHtcbiAgICAgICAgbm9kZUNvbnRleHQgPSB0aGlzLnVwZGF0ZU5vZGVDb250ZXh0KG5vZGVDb250ZXh0LCB2aWV3SW5kZXgsIHRleHROb2RlKTtcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIG5vZGVDb250ZXh0O1xuICB9XG5cbiAgYnJlYWtBZnRlclNvZnRIeXBoZW4oXG4gICAgdGV4dE5vZGU6IFRleHQsXG4gICAgdGV4dDogc3RyaW5nLFxuICAgIHZpZXdJbmRleDogbnVtYmVyLFxuICAgIG5vZGVDb250ZXh0OiBWdHJlZS5Ob2RlQ29udGV4dCxcbiAgKTogbnVtYmVyIHtcbiAgICAvLyBjb252ZXJ0IHRyYWlsaW5nIHNvZnQgaHlwaGVuIHRvIGEgcmVhbCBoeXBoZW5cbiAgICB0ZXh0Tm9kZS5yZXBsYWNlRGF0YShcbiAgICAgIHZpZXdJbmRleCxcbiAgICAgIHRleHQubGVuZ3RoIC0gdmlld0luZGV4LFxuICAgICAgIW5vZGVDb250ZXh0LmJyZWFrV29yZCA/IHJlc29sdmVIeXBoZW5hdGVDaGFyYWN0ZXIobm9kZUNvbnRleHQpIDogXCJcIixcbiAgICApO1xuICAgIHJldHVybiB2aWV3SW5kZXggKyAxO1xuICB9XG5cbiAgYnJlYWtBZnRlck90aGVyQ2hhcmFjdGVyKFxuICAgIHRleHROb2RlOiBUZXh0LFxuICAgIHRleHQ6IHN0cmluZyxcbiAgICB2aWV3SW5kZXg6IG51bWJlcixcbiAgICBub2RlQ29udGV4dDogVnRyZWUuTm9kZUNvbnRleHQsXG4gICk6IG51bWJlciB7XG4gICAgLy8ga2VlcCB0aGUgdHJhaWxpbmcgY2hhcmFjdGVyIChpdCBtYXkgYmUgYSBzcGFjZSBvciBub3QpXG4gICAgY29uc3QgY2gwID0gdGV4dC5jaGFyQXQodmlld0luZGV4KTtcbiAgICB2aWV3SW5kZXgrKztcbiAgICBjb25zdCBjaDEgPSB0ZXh0LmNoYXJBdCh2aWV3SW5kZXgpO1xuXG4gICAgLy8gSWYgYXV0b21hdGljIGh5cGhlbiB3YXMgaW5zZXJ0ZWQgaGVyZSwgYWRkIGEgcmVhbCBoeXBoZW4uXG4gICAgdGV4dE5vZGUucmVwbGFjZURhdGEoXG4gICAgICB2aWV3SW5kZXgsXG4gICAgICB0ZXh0Lmxlbmd0aCAtIHZpZXdJbmRleCxcbiAgICAgICFub2RlQ29udGV4dC5icmVha1dvcmQgJiYgQmFzZS5pc0xldHRlcihjaDApICYmIEJhc2UuaXNMZXR0ZXIoY2gxKVxuICAgICAgICA/IHJlc29sdmVIeXBoZW5hdGVDaGFyYWN0ZXIobm9kZUNvbnRleHQpXG4gICAgICAgIDogXCJcIixcbiAgICApO1xuICAgIHJldHVybiB2aWV3SW5kZXg7XG4gIH1cblxuICB1cGRhdGVOb2RlQ29udGV4dChcbiAgICBub2RlQ29udGV4dDogVnRyZWUuTm9kZUNvbnRleHQsXG4gICAgdmlld0luZGV4OiBudW1iZXIsXG4gICAgdGV4dE5vZGU6IFRleHQsXG4gICk6IFZ0cmVlLk5vZGVDb250ZXh0IHtcbiAgICBub2RlQ29udGV4dCA9IG5vZGVDb250ZXh0Lm1vZGlmeSgpO1xuICAgIG5vZGVDb250ZXh0Lm9mZnNldEluTm9kZSArPSB2aWV3SW5kZXg7XG4gICAgbm9kZUNvbnRleHQuYnJlYWtCZWZvcmUgPSBudWxsO1xuICAgIHJldHVybiBub2RlQ29udGV4dDtcbiAgfVxuXG4gIHN0YXRpYyBpbnN0YW5jZTogVGV4dE5vZGVCcmVha2VyO1xufVxuVGV4dE5vZGVCcmVha2VyLmluc3RhbmNlID0gbmV3IFRleHROb2RlQnJlYWtlcigpO1xuXG5leHBvcnQgZnVuY3Rpb24gcmVzb2x2ZUh5cGhlbmF0ZUNoYXJhY3RlcihcbiAgbm9kZUNvbnRleHQ6IFZ0cmVlLk5vZGVDb250ZXh0LFxuKTogc3RyaW5nIHtcbiAgcmV0dXJuIChcbiAgICBub2RlQ29udGV4dC5oeXBoZW5hdGVDaGFyYWN0ZXIgfHxcbiAgICAobm9kZUNvbnRleHQucGFyZW50ICYmIG5vZGVDb250ZXh0LnBhcmVudC5oeXBoZW5hdGVDaGFyYWN0ZXIpIHx8XG4gICAgXCItXCJcbiAgKTtcbn1cblxuZXhwb3J0IGNsYXNzIENvbHVtbkxheW91dFJldHJ5ZXIgZXh0ZW5kcyBMYXlvdXRSZXRyeWVycy5BYnN0cmFjdExheW91dFJldHJ5ZXIge1xuICBicmVha0FmdGVyOiBzdHJpbmcgfCBudWxsO1xuICBwcml2YXRlIGluaXRpYWxQYWdlQnJlYWtUeXBlOiBzdHJpbmcgfCBudWxsID0gbnVsbDtcbiAgaW5pdGlhbENvbXB1dGVkQmxvY2tTaXplOiBudW1iZXIgPSAwO1xuICBwcml2YXRlIGluaXRpYWxPdmVyZmxvd246IGJvb2xlYW4gPSBmYWxzZTtcbiAgY29udGV4dDogeyBvdmVyZmxvd25Ob2RlQ29udGV4dDogVnRyZWUuTm9kZUNvbnRleHQgfSA9IHtcbiAgICBvdmVyZmxvd25Ob2RlQ29udGV4dDogbnVsbCxcbiAgfTtcblxuICBjb25zdHJ1Y3RvcihcbiAgICBwdWJsaWMgcmVhZG9ubHkgbGVhZGluZ0VkZ2U6IGJvb2xlYW4sXG4gICAgYnJlYWtBZnRlcj86IHN0cmluZyB8IG51bGwsXG4gICkge1xuICAgIHN1cGVyKCk7XG4gICAgdGhpcy5icmVha0FmdGVyID0gYnJlYWtBZnRlciB8fCBudWxsO1xuICB9XG5cbiAgLyoqXG4gICAqIEBvdmVycmlkZVxuICAgKi9cbiAgcmVzb2x2ZUxheW91dE1vZGUobm9kZUNvbnRleHQ6IFZ0cmVlLk5vZGVDb250ZXh0KTogTGF5b3V0LkxheW91dE1vZGUge1xuICAgIHJldHVybiBuZXcgRGVmYXVsdExheW91dE1vZGUoXG4gICAgICB0aGlzLmxlYWRpbmdFZGdlLFxuICAgICAgdGhpcy5icmVha0FmdGVyLFxuICAgICAgdGhpcy5jb250ZXh0LFxuICAgICk7XG4gIH1cblxuICAvKipcbiAgICogQG92ZXJyaWRlXG4gICAqL1xuICBwcmVwYXJlTGF5b3V0KG5vZGVDb250ZXh0OiBWdHJlZS5Ob2RlQ29udGV4dCwgY29sdW1uOiBMYXlvdXQuQ29sdW1uKSB7XG4gICAgY29sdW1uLmZyYWdtZW50TGF5b3V0Q29uc3RyYWludHMgPSBbXTtcbiAgICBpZiAoIWNvbHVtbi5wc2V1ZG9QYXJlbnQpIHtcbiAgICAgIFNoYXJlZC5jbGVhclJlcGV0aXRpdmVFbGVtZW50c0NhY2hlKCk7XG4gICAgfVxuICB9XG5cbiAgLyoqXG4gICAqIEBvdmVycmlkZVxuICAgKi9cbiAgY2xlYXJOb2Rlcyhpbml0aWFsUG9zaXRpb246IFZ0cmVlLk5vZGVDb250ZXh0KSB7XG4gICAgc3VwZXIuY2xlYXJOb2Rlcyhpbml0aWFsUG9zaXRpb24pO1xuICAgIGxldCBub2RlQ29udGV4dCA9IGluaXRpYWxQb3NpdGlvbjtcbiAgICB3aGlsZSAobm9kZUNvbnRleHQpIHtcbiAgICAgIGNvbnN0IHZpZXdOb2RlID0gbm9kZUNvbnRleHQudmlld05vZGU7XG4gICAgICBpZiAodmlld05vZGUpIHtcbiAgICAgICAgTGF5b3V0SGVscGVyLnJlbW92ZUZvbGxvd2luZ1NpYmxpbmdzKHZpZXdOb2RlLnBhcmVudE5vZGUsIHZpZXdOb2RlKTtcbiAgICAgIH1cbiAgICAgIG5vZGVDb250ZXh0ID0gbm9kZUNvbnRleHQucGFyZW50O1xuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAgKiBAb3ZlcnJpZGVcbiAgICovXG4gIHNhdmVTdGF0ZShub2RlQ29udGV4dDogVnRyZWUuTm9kZUNvbnRleHQsIGNvbHVtbjogTGF5b3V0LkNvbHVtbikge1xuICAgIHN1cGVyLnNhdmVTdGF0ZShub2RlQ29udGV4dCwgY29sdW1uKTtcbiAgICB0aGlzLmluaXRpYWxQYWdlQnJlYWtUeXBlID0gY29sdW1uLnBhZ2VCcmVha1R5cGU7XG4gICAgdGhpcy5pbml0aWFsQ29tcHV0ZWRCbG9ja1NpemUgPSBjb2x1bW4uY29tcHV0ZWRCbG9ja1NpemU7XG4gICAgdGhpcy5pbml0aWFsT3ZlcmZsb3duID0gY29sdW1uLm92ZXJmbG93bjtcbiAgfVxuXG4gIC8qKlxuICAgKiBAb3ZlcnJpZGVcbiAgICovXG4gIHJlc3RvcmVTdGF0ZShub2RlQ29udGV4dDogVnRyZWUuTm9kZUNvbnRleHQsIGNvbHVtbjogTGF5b3V0LkNvbHVtbikge1xuICAgIHN1cGVyLnJlc3RvcmVTdGF0ZShub2RlQ29udGV4dCwgY29sdW1uKTtcbiAgICBjb2x1bW4ucGFnZUJyZWFrVHlwZSA9IHRoaXMuaW5pdGlhbFBhZ2VCcmVha1R5cGU7XG4gICAgY29sdW1uLmNvbXB1dGVkQmxvY2tTaXplID0gdGhpcy5pbml0aWFsQ29tcHV0ZWRCbG9ja1NpemU7XG4gICAgY29sdW1uLm92ZXJmbG93biA9IHRoaXMuaW5pdGlhbE92ZXJmbG93bjtcbiAgfVxufVxuXG5leHBvcnQgY2xhc3MgRGVmYXVsdExheW91dE1vZGUgaW1wbGVtZW50cyBMYXlvdXQuTGF5b3V0TW9kZSB7XG4gIGNvbnN0cnVjdG9yKFxuICAgIHB1YmxpYyByZWFkb25seSBsZWFkaW5nRWRnZTogYm9vbGVhbixcbiAgICBwdWJsaWMgcmVhZG9ubHkgYnJlYWtBZnRlcjogc3RyaW5nIHwgbnVsbCxcbiAgICBwdWJsaWMgcmVhZG9ubHkgY29udGV4dDogeyBvdmVyZmxvd25Ob2RlQ29udGV4dDogVnRyZWUuTm9kZUNvbnRleHQgfSxcbiAgKSB7fVxuXG4gIC8qKlxuICAgKiBAb3ZlcnJpZGVcbiAgICovXG4gIGRvTGF5b3V0KFxuICAgIG5vZGVDb250ZXh0OiBWdHJlZS5Ob2RlQ29udGV4dCxcbiAgICBjb2x1bW46IExheW91dC5Db2x1bW4sXG4gICk6IFRhc2suUmVzdWx0PFZ0cmVlLk5vZGVDb250ZXh0PiB7XG4gICAgY29uc3QgZnJhbWU6IFRhc2suRnJhbWU8VnRyZWUuTm9kZUNvbnRleHQ+ID0gVGFzay5uZXdGcmFtZShcbiAgICAgIFwiRGVmYXVsdExheW91dE1vZGUuZG9MYXlvdXRcIixcbiAgICApO1xuXG4gICAgcHJvY2Vzc0FmdGVySWZDb250aW51ZXNPZkFuY2VzdG9ycyhub2RlQ29udGV4dCwgY29sdW1uKS50aGVuKCgpID0+IHtcbiAgICAgIGNvbHVtblxuICAgICAgICAuZG9MYXlvdXQobm9kZUNvbnRleHQsIHRoaXMubGVhZGluZ0VkZ2UsIHRoaXMuYnJlYWtBZnRlcilcbiAgICAgICAgLnRoZW4oKHJlc3VsdCkgPT4ge1xuICAgICAgICAgIHRoaXMuY29udGV4dC5vdmVyZmxvd25Ob2RlQ29udGV4dCA9IHJlc3VsdC5vdmVyZmxvd25Ob2RlQ29udGV4dDtcbiAgICAgICAgICBmcmFtZS5maW5pc2gocmVzdWx0Lm5vZGVDb250ZXh0KTtcbiAgICAgICAgfSk7XG4gICAgfSk7XG4gICAgcmV0dXJuIGZyYW1lLnJlc3VsdCgpO1xuICB9XG5cbiAgLyoqXG4gICAqIEBvdmVycmlkZVxuICAgKi9cbiAgYWNjZXB0KG5vZGVDb250ZXh0OiBWdHJlZS5Ob2RlQ29udGV4dCwgY29sdW1uOiBMYXlvdXQuQ29sdW1uKTogYm9vbGVhbiB7XG4gICAgaWYgKGNvbHVtbi5wYWdlRmxvYXRMYXlvdXRDb250ZXh0LmlzSW52YWxpZGF0ZWQoKSB8fCBjb2x1bW4ucGFnZUJyZWFrVHlwZSkge1xuICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuICAgIGlmIChjb2x1bW4uZnJhZ21lbnRMYXlvdXRDb25zdHJhaW50cy5sZW5ndGggPD0gMCkge1xuICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuICAgIHJldHVybiBjb2x1bW4uZnJhZ21lbnRMYXlvdXRDb25zdHJhaW50cy5ldmVyeSgoY29uc3RyYWludCkgPT5cbiAgICAgIGNvbnN0cmFpbnQuYWxsb3dMYXlvdXQoXG4gICAgICAgIG5vZGVDb250ZXh0LFxuICAgICAgICB0aGlzLmNvbnRleHQub3ZlcmZsb3duTm9kZUNvbnRleHQsXG4gICAgICAgIGNvbHVtbixcbiAgICAgICksXG4gICAgKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBAb3ZlcnJpZGVcbiAgICovXG4gIHBvc3RMYXlvdXQoXG4gICAgcG9zaXRpb25BZnRlcjogVnRyZWUuTm9kZUNvbnRleHQsXG4gICAgaW5pdGlhbFBvc2l0aW9uOiBWdHJlZS5Ob2RlQ29udGV4dCxcbiAgICBjb2x1bW46IExheW91dC5Db2x1bW4sXG4gICAgYWNjZXB0ZWQ6IGJvb2xlYW4sXG4gICk6IGJvb2xlYW4ge1xuICAgIGlmICghYWNjZXB0ZWQpIHtcbiAgICAgIGNvbnN0IGhhc05leHRDYW5kaWRhdGUgPSBjb2x1bW4uZnJhZ21lbnRMYXlvdXRDb25zdHJhaW50cy5zb21lKFxuICAgICAgICAoY29uc3RyYWludCkgPT4gY29uc3RyYWludC5uZXh0Q2FuZGlkYXRlKHBvc2l0aW9uQWZ0ZXIpLFxuICAgICAgKTtcblxuICAgICAgLy8gSWYgdGhlcmUgaXMgbm8gbmV4dCBjYW5kaWRhdGUsIHdlIGFjY2VwdCB0aGUgY3VycmVudCBsYXlvdXQgdHJpYWwuXG4gICAgICAvLyBMYXRlciBDb2x1bW4jZG9GaW5pc2hCcmVhayBkZWNpZGVzIHdoZXRoZXIgdGhlIG92ZXJmbG93aW5nIGNvbnRlbnRcbiAgICAgIC8vIHNob3VsZCBiZSBwbGFjZWQgYXMgaXMgb3IgYmUgZGVmZXJyZWQgdG8gdGhlIG5leHQgY29sdW1uLFxuICAgICAgLy8gZGVwZW5kaW5nIG9uIHRoZSB2YWx1ZSBvZiBDb2x1bW4jZm9yY2VOb25maXR0aW5nLlxuICAgICAgYWNjZXB0ZWQgPSAhaGFzTmV4dENhbmRpZGF0ZTtcbiAgICB9XG4gICAgY29sdW1uLmZyYWdtZW50TGF5b3V0Q29uc3RyYWludHMuZm9yRWFjaCgoY29uc3RyYWludCkgPT4ge1xuICAgICAgY29uc3RyYWludC5wb3N0TGF5b3V0KGFjY2VwdGVkLCBwb3NpdGlvbkFmdGVyLCBpbml0aWFsUG9zaXRpb24sIGNvbHVtbik7XG4gICAgfSk7XG4gICAgcmV0dXJuIGFjY2VwdGVkO1xuICB9XG59XG5cbmV4cG9ydCBjbGFzcyBQYWdlRmxvYXRBcmVhIGV4dGVuZHMgQ29sdW1uIGltcGxlbWVudHMgTGF5b3V0LlBhZ2VGbG9hdEFyZWEge1xuICBwcml2YXRlIHJvb3RWaWV3Tm9kZXM6IEVsZW1lbnRbXSA9IFtdO1xuICBwcml2YXRlIGZsb2F0TWFyZ2luczogR2VvbWV0cnlVdGlsLkluc2V0c1tdID0gW107XG4gIGFkanVzdENvbnRlbnRSZWxhdGl2ZVNpemU6IGJvb2xlYW4gPSB0cnVlO1xuXG4gIGNvbnN0cnVjdG9yKFxuICAgIHB1YmxpYyByZWFkb25seSBmbG9hdFNpZGU6IHN0cmluZyxcbiAgICBlbGVtZW50OiBFbGVtZW50LFxuICAgIGxheW91dENvbnRleHQ6IFZ0cmVlLkxheW91dENvbnRleHQsXG4gICAgY2xpZW50TGF5b3V0OiBWdHJlZS5DbGllbnRMYXlvdXQsXG4gICAgbGF5b3V0Q29uc3RyYWludDogTGF5b3V0Q29uc3RyYWludCxcbiAgICBwYWdlRmxvYXRMYXlvdXRDb250ZXh0OiBQYWdlRmxvYXRzLlBhZ2VGbG9hdExheW91dENvbnRleHQsXG4gICAgcHVibGljIHJlYWRvbmx5IHBhcmVudENvbnRhaW5lcjogVnRyZWUuQ29udGFpbmVyLFxuICApIHtcbiAgICBzdXBlcihcbiAgICAgIGVsZW1lbnQsXG4gICAgICBsYXlvdXRDb250ZXh0LFxuICAgICAgY2xpZW50TGF5b3V0LFxuICAgICAgbGF5b3V0Q29uc3RyYWludCxcbiAgICAgIHBhZ2VGbG9hdExheW91dENvbnRleHQsXG4gICAgKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBAb3ZlcnJpZGVcbiAgICovXG4gIG9wZW5BbGxWaWV3cyhwb3NpdGlvbjogVnRyZWUuTm9kZVBvc2l0aW9uKTogVGFzay5SZXN1bHQ8VnRyZWUuTm9kZUNvbnRleHQ+IHtcbiAgICByZXR1cm4gc3VwZXIub3BlbkFsbFZpZXdzKHBvc2l0aW9uKS50aGVuQXN5bmMoKG5vZGVDb250ZXh0KSA9PiB7XG4gICAgICBpZiAobm9kZUNvbnRleHQpIHtcbiAgICAgICAgdGhpcy5maXhGbG9hdFNpemVBbmRQb3NpdGlvbihub2RlQ29udGV4dCk7XG4gICAgICB9XG4gICAgICByZXR1cm4gVGFzay5uZXdSZXN1bHQobm9kZUNvbnRleHQpO1xuICAgIH0pO1xuICB9XG5cbiAgY29udmVydFBlcmNlbnRhZ2VTaXplc1RvUHgodGFyZ2V0OiBFbGVtZW50KSB7XG4gICAgY29uc3QgY29udGFpbmluZ0Jsb2NrUmVjdCA9IHRoaXMucGFyZW50Q29udGFpbmVyLmdldFBhZGRpbmdSZWN0KCk7XG4gICAgY29uc3QgcmVmV2lkdGggPSBjb250YWluaW5nQmxvY2tSZWN0LngyIC0gY29udGFpbmluZ0Jsb2NrUmVjdC54MTtcbiAgICBjb25zdCByZWZIZWlnaHQgPSBjb250YWluaW5nQmxvY2tSZWN0LnkyIC0gY29udGFpbmluZ0Jsb2NrUmVjdC55MTtcblxuICAgIGZ1bmN0aW9uIGNvbnZlcnRQZXJjZW50YWdlVG9QeChwcm9wczogc3RyaW5nW10sIHJlZlZhbHVlOiBudW1iZXIpIHtcbiAgICAgIHByb3BzLmZvckVhY2goKHByb3BOYW1lKSA9PiB7XG4gICAgICAgIGNvbnN0IHZhbHVlU3RyaW5nID0gQmFzZS5nZXRDU1NQcm9wZXJ0eSh0YXJnZXQsIHByb3BOYW1lKTtcbiAgICAgICAgaWYgKHZhbHVlU3RyaW5nICYmIHZhbHVlU3RyaW5nLmNoYXJBdCh2YWx1ZVN0cmluZy5sZW5ndGggLSAxKSA9PT0gXCIlXCIpIHtcbiAgICAgICAgICBjb25zdCBwZXJjZW50YWdlVmFsdWUgPSBwYXJzZUZsb2F0KHZhbHVlU3RyaW5nKTtcbiAgICAgICAgICBjb25zdCB2YWx1ZSA9IChyZWZWYWx1ZSAqIHBlcmNlbnRhZ2VWYWx1ZSkgLyAxMDA7XG4gICAgICAgICAgQmFzZS5zZXRDU1NQcm9wZXJ0eSh0YXJnZXQsIHByb3BOYW1lLCBgJHt2YWx1ZX1weGApO1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgICB9XG4gICAgY29udmVydFBlcmNlbnRhZ2VUb1B4KFtcIndpZHRoXCIsIFwibWF4LXdpZHRoXCIsIFwibWluLXdpZHRoXCJdLCByZWZXaWR0aCk7XG4gICAgY29udmVydFBlcmNlbnRhZ2VUb1B4KFtcImhlaWdodFwiLCBcIm1heC1oZWlnaHRcIiwgXCJtaW4taGVpZ2h0XCJdLCByZWZIZWlnaHQpO1xuICAgIGNvbnZlcnRQZXJjZW50YWdlVG9QeChcbiAgICAgIFtcbiAgICAgICAgXCJtYXJnaW4tdG9wXCIsXG4gICAgICAgIFwibWFyZ2luLXJpZ2h0XCIsXG4gICAgICAgIFwibWFyZ2luLWJvdHRvbVwiLFxuICAgICAgICBcIm1hcmdpbi1sZWZ0XCIsXG4gICAgICAgIFwicGFkZGluZy10b3BcIixcbiAgICAgICAgXCJwYWRkaW5nLXJpZ2h0XCIsXG4gICAgICAgIFwicGFkZGluZy1ib3R0b21cIixcbiAgICAgICAgXCJwYWRkaW5nLWxlZnRcIixcbiAgICAgIF0sXG4gICAgICB0aGlzLnZlcnRpY2FsID8gcmVmSGVpZ2h0IDogcmVmV2lkdGgsXG4gICAgKTtcbiAgICBbXCJtYXJnaW4tdG9wXCIsIFwibWFyZ2luLXJpZ2h0XCIsIFwibWFyZ2luLWJvdHRvbVwiLCBcIm1hcmdpbi1sZWZ0XCJdLmZvckVhY2goXG4gICAgICAocHJvcE5hbWUpID0+IHtcbiAgICAgICAgY29uc3QgdmFsdWUgPSBCYXNlLmdldENTU1Byb3BlcnR5KHRhcmdldCwgcHJvcE5hbWUpO1xuICAgICAgICBpZiAodmFsdWUgPT09IFwiYXV0b1wiKSB7XG4gICAgICAgICAgQmFzZS5zZXRDU1NQcm9wZXJ0eSh0YXJnZXQsIHByb3BOYW1lLCBcIjBcIik7XG4gICAgICAgIH1cbiAgICAgIH0sXG4gICAgKTtcbiAgfVxuXG4gIGZpeEZsb2F0U2l6ZUFuZFBvc2l0aW9uKG5vZGVDb250ZXh0OiBWdHJlZS5Ob2RlQ29udGV4dCkge1xuICAgIHdoaWxlIChub2RlQ29udGV4dC5wYXJlbnQpIHtcbiAgICAgIG5vZGVDb250ZXh0ID0gbm9kZUNvbnRleHQucGFyZW50O1xuICAgIH1cbiAgICBBc3NlcnRzLmFzc2VydChub2RlQ29udGV4dC52aWV3Tm9kZS5ub2RlVHlwZSA9PT0gMSk7XG4gICAgY29uc3Qgcm9vdFZpZXdOb2RlID0gbm9kZUNvbnRleHQudmlld05vZGUgYXMgRWxlbWVudDtcbiAgICB0aGlzLnJvb3RWaWV3Tm9kZXMucHVzaChyb290Vmlld05vZGUpO1xuICAgIGlmICh0aGlzLmFkanVzdENvbnRlbnRSZWxhdGl2ZVNpemUpIHtcbiAgICAgIHRoaXMuY29udmVydFBlcmNlbnRhZ2VTaXplc1RvUHgocm9vdFZpZXdOb2RlKTtcbiAgICB9XG4gICAgdGhpcy5mbG9hdE1hcmdpbnMucHVzaCh0aGlzLmdldENvbXB1dGVkTWFyZ2luKHJvb3RWaWV3Tm9kZSkpO1xuICAgIGlmICh0aGlzLmFkanVzdENvbnRlbnRSZWxhdGl2ZVNpemUpIHtcbiAgICAgIGNvbnN0IGZsb2F0U2lkZSA9IHRoaXMuZmxvYXRTaWRlO1xuICAgICAgY29uc3QgaXNWZXJ0aWNhbCA9IHRoaXMucGFyZW50Q29udGFpbmVyLnZlcnRpY2FsO1xuICAgICAgaWYgKGlzVmVydGljYWwpIHtcbiAgICAgICAgaWYgKGZsb2F0U2lkZSA9PT0gXCJibG9jay1lbmRcIiB8fCBmbG9hdFNpZGUgPT09IFwibGVmdFwiKSB7XG4gICAgICAgICAgY29uc3QgaGVpZ2h0ID0gQmFzZS5nZXRDU1NQcm9wZXJ0eShyb290Vmlld05vZGUsIFwiaGVpZ2h0XCIpO1xuICAgICAgICAgIGlmIChoZWlnaHQgIT09IFwiXCIgJiYgaGVpZ2h0ICE9PSBcImF1dG9cIikge1xuICAgICAgICAgICAgQmFzZS5zZXRDU1NQcm9wZXJ0eShyb290Vmlld05vZGUsIFwibWFyZ2luLXRvcFwiLCBcImF1dG9cIik7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBpZiAoZmxvYXRTaWRlID09PSBcImJsb2NrLWVuZFwiIHx8IGZsb2F0U2lkZSA9PT0gXCJib3R0b21cIikge1xuICAgICAgICAgIGNvbnN0IHdpZHRoID0gQmFzZS5nZXRDU1NQcm9wZXJ0eShyb290Vmlld05vZGUsIFwid2lkdGhcIik7XG4gICAgICAgICAgaWYgKHdpZHRoICE9PSBcIlwiICYmIHdpZHRoICE9PSBcImF1dG9cIikge1xuICAgICAgICAgICAgQmFzZS5zZXRDU1NQcm9wZXJ0eShyb290Vmlld05vZGUsIFwibWFyZ2luLWxlZnRcIiwgXCJhdXRvXCIpO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIGdldENvbnRlbnRJbmxpbmVTaXplKCk6IG51bWJlciB7XG4gICAgcmV0dXJuIE1hdGgubWF4LmFwcGx5KFxuICAgICAgbnVsbCxcbiAgICAgIHRoaXMucm9vdFZpZXdOb2Rlcy5tYXAoKHIsIGkpID0+IHtcbiAgICAgICAgY29uc3QgYm94ID0gdGhpcy5jbGllbnRMYXlvdXQuZ2V0RWxlbWVudENsaWVudFJlY3Qocik7XG4gICAgICAgIGNvbnN0IG1hcmdpbiA9IHRoaXMuZmxvYXRNYXJnaW5zW2ldO1xuICAgICAgICByZXR1cm4gdGhpcy52ZXJ0aWNhbFxuICAgICAgICAgID8gbWFyZ2luLnRvcCArIGJveC5oZWlnaHQgKyBtYXJnaW4uYm90dG9tXG4gICAgICAgICAgOiBtYXJnaW4ubGVmdCArIGJveC53aWR0aCArIG1hcmdpbi5yaWdodDtcbiAgICAgIH0pLFxuICAgICk7XG4gIH1cbn1cbiIsIi8qKlxuICogQ29weXJpZ2h0IDIwMTYgVHJpbS1tYXJrcyBJbmMuXG4gKiBDb3B5cmlnaHQgMjAxOSBWaXZsaW9zdHlsZSBGb3VuZGF0aW9uXG4gKlxuICogVml2bGlvc3R5bGUuanMgaXMgZnJlZSBzb2Z0d2FyZTogeW91IGNhbiByZWRpc3RyaWJ1dGUgaXQgYW5kL29yIG1vZGlmeVxuICogaXQgdW5kZXIgdGhlIHRlcm1zIG9mIHRoZSBHTlUgQWZmZXJvIEdlbmVyYWwgUHVibGljIExpY2Vuc2UgYXMgcHVibGlzaGVkIGJ5XG4gKiB0aGUgRnJlZSBTb2Z0d2FyZSBGb3VuZGF0aW9uLCBlaXRoZXIgdmVyc2lvbiAzIG9mIHRoZSBMaWNlbnNlLCBvclxuICogKGF0IHlvdXIgb3B0aW9uKSBhbnkgbGF0ZXIgdmVyc2lvbi5cbiAqXG4gKiBWaXZsaW9zdHlsZS5qcyBpcyBkaXN0cmlidXRlZCBpbiB0aGUgaG9wZSB0aGF0IGl0IHdpbGwgYmUgdXNlZnVsLFxuICogYnV0IFdJVEhPVVQgQU5ZIFdBUlJBTlRZOyB3aXRob3V0IGV2ZW4gdGhlIGltcGxpZWQgd2FycmFudHkgb2ZcbiAqIE1FUkNIQU5UQUJJTElUWSBvciBGSVRORVNTIEZPUiBBIFBBUlRJQ1VMQVIgUFVSUE9TRS4gIFNlZSB0aGVcbiAqIEdOVSBBZmZlcm8gR2VuZXJhbCBQdWJsaWMgTGljZW5zZSBmb3IgbW9yZSBkZXRhaWxzLlxuICpcbiAqIFlvdSBzaG91bGQgaGF2ZSByZWNlaXZlZCBhIGNvcHkgb2YgdGhlIEdOVSBBZmZlcm8gR2VuZXJhbCBQdWJsaWMgTGljZW5zZVxuICogYWxvbmcgd2l0aCBWaXZsaW9zdHlsZS5qcy4gIElmIG5vdCwgc2VlIDxodHRwOi8vd3d3LmdudS5vcmcvbGljZW5zZXMvPi5cbiAqXG4gKiBAZmlsZW92ZXJ2aWV3IFJlcGV0aXRpdmVFbGVtZW50IC0gRWxlbWVudHMgcmVwZWF0ZWQgaW4gZXZlcnkgZnJhZ21lbnRcbiAqIGJ5IHJlcGVhdC1vbi1icmVhayBwcm9wZXJ0eS5cbiAqL1xuaW1wb3J0ICogYXMgQXNzZXJ0cyBmcm9tIFwiLi9hc3NlcnRzXCI7XG5pbXBvcnQgKiBhcyBMYXlvdXRIZWxwZXIgZnJvbSBcIi4vbGF5b3V0LWhlbHBlclwiO1xuaW1wb3J0ICogYXMgTGF5b3V0UHJvY2Vzc29yIGZyb20gXCIuL2xheW91dC1wcm9jZXNzb3JcIjtcbmltcG9ydCAqIGFzIExheW91dFJldHJ5ZXJzIGZyb20gXCIuL2xheW91dC1yZXRyeWVyc1wiO1xuaW1wb3J0ICogYXMgTGF5b3V0VXRpbCBmcm9tIFwiLi9sYXlvdXQtdXRpbFwiO1xuaW1wb3J0ICogYXMgUGx1Z2luIGZyb20gXCIuL3BsdWdpblwiO1xuaW1wb3J0ICogYXMgU2hhcmVkIGZyb20gXCIuL3NoYXJlZFwiO1xuaW1wb3J0ICogYXMgVGFzayBmcm9tIFwiLi90YXNrXCI7XG5pbXBvcnQgKiBhcyBWdHJlZUltcGwgZnJvbSBcIi4vdnRyZWVcIjtcbmltcG9ydCAqIGFzIExheW91dCBmcm9tIFwiLi9sYXlvdXRcIjtcbmltcG9ydCB7XG4gIEZvcm1hdHRpbmdDb250ZXh0VHlwZSxcbiAgRnJhZ21lbnRMYXlvdXRDb25zdHJhaW50VHlwZSxcbiAgTGF5b3V0IGFzIExheW91dFR5cGUsXG4gIFJlcGV0aXRpdmVFbGVtZW50LFxuICBUYWJsZSxcbiAgVnRyZWUsXG59IGZyb20gXCIuL3R5cGVzXCI7XG5cbmV4cG9ydCBjbGFzcyBSZXBldGl0aXZlRWxlbWVudHNPd25lckZvcm1hdHRpbmdDb250ZXh0XG4gIGltcGxlbWVudHMgUmVwZXRpdGl2ZUVsZW1lbnQuUmVwZXRpdGl2ZUVsZW1lbnRzT3duZXJGb3JtYXR0aW5nQ29udGV4dCB7XG4gIGZvcm1hdHRpbmdDb250ZXh0VHlwZTogRm9ybWF0dGluZ0NvbnRleHRUeXBlID0gXCJSZXBldGl0aXZlRWxlbWVudHNPd25lclwiO1xuICBpc1Jvb3Q6IGJvb2xlYW4gPSBmYWxzZTtcbiAgcmVwZXRpdGl2ZUVsZW1lbnRzOiBSZXBldGl0aXZlRWxlbWVudC5SZXBldGl0aXZlRWxlbWVudHMgPSBudWxsO1xuXG4gIGNvbnN0cnVjdG9yKFxuICAgIHB1YmxpYyByZWFkb25seSBwYXJlbnQ6IFZ0cmVlLkZvcm1hdHRpbmdDb250ZXh0LFxuICAgIHB1YmxpYyByZWFkb25seSByb290U291cmNlTm9kZTogRWxlbWVudCxcbiAgKSB7fVxuXG4gIC8qKlxuICAgKiBAb3ZlcnJpZGVcbiAgICovXG4gIGdldE5hbWUoKTogc3RyaW5nIHtcbiAgICByZXR1cm4gXCJSZXBldGl0aXZlIGVsZW1lbnRzIG93bmVyIGZvcm1hdHRpbmcgY29udGV4dCAoUmVwZXRpdGl2ZUVsZW1lbnRzT3duZXJGb3JtYXR0aW5nQ29udGV4dClcIjtcbiAgfVxuXG4gIC8qKlxuICAgKiBAb3ZlcnJpZGVcbiAgICovXG4gIGlzRmlyc3RUaW1lKG5vZGVDb250ZXh0OiBWdHJlZS5Ob2RlQ29udGV4dCwgZmlyc3RUaW1lOiBib29sZWFuKTogYm9vbGVhbiB7XG4gICAgcmV0dXJuIGZpcnN0VGltZTtcbiAgfVxuXG4gIC8qKlxuICAgKiBAb3ZlcnJpZGVcbiAgICovXG4gIGdldFBhcmVudCgpOiBWdHJlZS5Gb3JtYXR0aW5nQ29udGV4dCB7XG4gICAgcmV0dXJuIHRoaXMucGFyZW50O1xuICB9XG5cbiAgZ2V0UmVwZXRpdGl2ZUVsZW1lbnRzKCk6IFJlcGV0aXRpdmVFbGVtZW50LlJlcGV0aXRpdmVFbGVtZW50cyB7XG4gICAgcmV0dXJuIHRoaXMucmVwZXRpdGl2ZUVsZW1lbnRzO1xuICB9XG5cbiAgZ2V0Um9vdFZpZXdOb2RlKHBvc2l0aW9uOiBWdHJlZS5Ob2RlQ29udGV4dCk6IEVsZW1lbnQgfCBudWxsIHtcbiAgICBjb25zdCByb290ID0gdGhpcy5nZXRSb290Tm9kZUNvbnRleHQocG9zaXRpb24pO1xuICAgIHJldHVybiByb290ID8gKHJvb3Qudmlld05vZGUgYXMgRWxlbWVudCkgOiBudWxsO1xuICB9XG5cbiAgZ2V0Um9vdE5vZGVDb250ZXh0KG5vZGVDb250ZXh0OiBWdHJlZS5Ob2RlQ29udGV4dCk6IFZ0cmVlLk5vZGVDb250ZXh0IHwgbnVsbCB7XG4gICAgZG8ge1xuICAgICAgaWYgKFxuICAgICAgICAhbm9kZUNvbnRleHQuYmVsb25nc1RvKHRoaXMpICYmXG4gICAgICAgIG5vZGVDb250ZXh0LnNvdXJjZU5vZGUgPT09IHRoaXMucm9vdFNvdXJjZU5vZGVcbiAgICAgICkge1xuICAgICAgICByZXR1cm4gbm9kZUNvbnRleHQ7XG4gICAgICB9XG4gICAgfSB3aGlsZSAoKG5vZGVDb250ZXh0ID0gbm9kZUNvbnRleHQucGFyZW50KSk7XG4gICAgcmV0dXJuIG51bGw7XG4gIH1cblxuICBpbml0aWFsaXplUmVwZXRpdGl2ZUVsZW1lbnRzKHZlcnRpY2FsOiBib29sZWFuKSB7XG4gICAgaWYgKHRoaXMucmVwZXRpdGl2ZUVsZW1lbnRzKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIGNvbnN0IGZvdW5kID0gU2hhcmVkLnJlcGV0aXRpdmVFbGVtZW50c0NhY2hlLnNvbWUoKGVudHJ5KSA9PiB7XG4gICAgICBpZiAoZW50cnkucm9vdCA9PT0gdGhpcy5yb290U291cmNlTm9kZSkge1xuICAgICAgICB0aGlzLnJlcGV0aXRpdmVFbGVtZW50cyA9IGVudHJ5LmVsZW1lbnRzO1xuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgIH1cbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9KTtcbiAgICBpZiAoIWZvdW5kKSB7XG4gICAgICB0aGlzLnJlcGV0aXRpdmVFbGVtZW50cyA9IG5ldyBSZXBldGl0aXZlRWxlbWVudHMoXG4gICAgICAgIHZlcnRpY2FsLFxuICAgICAgICB0aGlzLnJvb3RTb3VyY2VOb2RlLFxuICAgICAgKTtcbiAgICAgIFNoYXJlZC5yZXBldGl0aXZlRWxlbWVudHNDYWNoZS5wdXNoKHtcbiAgICAgICAgcm9vdDogdGhpcy5yb290U291cmNlTm9kZSxcbiAgICAgICAgZWxlbWVudHM6IHRoaXMucmVwZXRpdGl2ZUVsZW1lbnRzLFxuICAgICAgfSk7XG4gICAgfVxuICB9XG5cbiAgLyoqIEBvdmVycmlkZSAqL1xuICBzYXZlU3RhdGUoKTogYW55IHt9XG5cbiAgLyoqIEBvdmVycmlkZSAqL1xuICByZXN0b3JlU3RhdGUoc3RhdGU6IGFueSkge31cbn1cblxuZXhwb3J0IHR5cGUgRWxlbWVudHNPZmZzZXQgPSBSZXBldGl0aXZlRWxlbWVudC5FbGVtZW50c09mZnNldDtcblxuZXhwb3J0IGNsYXNzIFJlcGV0aXRpdmVFbGVtZW50c1xuICBpbXBsZW1lbnRzIFJlcGV0aXRpdmVFbGVtZW50LlJlcGV0aXRpdmVFbGVtZW50cyB7XG4gIHByaXZhdGUgaGVhZGVyU291cmNlTm9kZTogRWxlbWVudCB8IG51bGwgPSBudWxsO1xuICBwcml2YXRlIGZvb3RlclNvdXJjZU5vZGU6IEVsZW1lbnQgfCBudWxsID0gbnVsbDtcbiAgcHJpdmF0ZSBoZWFkZXJWaWV3Tm9kZTogRWxlbWVudCB8IG51bGwgPSBudWxsO1xuICBwcml2YXRlIGZvb3RlclZpZXdOb2RlOiBFbGVtZW50IHwgbnVsbCA9IG51bGw7XG4gIHByaXZhdGUgaGVhZGVyTm9kZVBvc2l0aW9uOiBWdHJlZS5Ob2RlUG9zaXRpb24gfCBudWxsID0gbnVsbDtcbiAgcHJpdmF0ZSBmb290ZXJOb2RlUG9zaXRpb246IFZ0cmVlLk5vZGVQb3NpdGlvbiB8IG51bGwgPSBudWxsO1xuICBwcml2YXRlIGhlYWRlckhlaWdodDogbnVtYmVyID0gMDtcbiAgcHJpdmF0ZSBmb290ZXJIZWlnaHQ6IG51bWJlciA9IDA7XG4gIGlzU2tpcEhlYWRlcjogYm9vbGVhbiA9IGZhbHNlO1xuICBpc1NraXBGb290ZXI6IGJvb2xlYW4gPSBmYWxzZTtcbiAgZW5hYmxlU2tpcHBpbmdGb290ZXI6IGJvb2xlYW4gPSB0cnVlO1xuICBlbmFibGVTa2lwcGluZ0hlYWRlcjogYm9vbGVhbiA9IHRydWU7XG4gIGRvbmVJbml0aWFsTGF5b3V0OiBib29sZWFuID0gZmFsc2U7XG4gIGZpcnN0Q29udGVudFNvdXJjZU5vZGU6IEVsZW1lbnQgfCBudWxsID0gbnVsbDtcbiAgbGFzdENvbnRlbnRTb3VyY2VOb2RlOiBFbGVtZW50IHwgbnVsbCA9IG51bGw7XG4gIHByaXZhdGUgYWZmZWN0ZWROb2RlQ2FjaGU6IHtcbiAgICBub2RlQ29udGV4dDogVnRyZWUuTm9kZUNvbnRleHQ7XG4gICAgcmVzdWx0OiBib29sZWFuO1xuICB9W10gPSBbXTtcbiAgcHJpdmF0ZSBhZnRlckxhc3RDb250ZW50Tm9kZUNhY2hlOiB7XG4gICAgbm9kZUNvbnRleHQ6IFZ0cmVlLk5vZGVDb250ZXh0O1xuICAgIHJlc3VsdDogYm9vbGVhbjtcbiAgfVtdID0gW107XG4gIGFsbG93SW5zZXJ0OiBib29sZWFuID0gZmFsc2U7XG4gIGFsbG93SW5zZXJ0UmVwZWF0aXRpdmVFbGVtZW50czogYm9vbGVhbjtcblxuICBjb25zdHJ1Y3RvcihcbiAgICBwcml2YXRlIHJlYWRvbmx5IHZlcnRpY2FsOiBib29sZWFuLFxuICAgIHB1YmxpYyBvd25lclNvdXJjZU5vZGU6IEVsZW1lbnQsXG4gICkge31cblxuICBzZXRIZWFkZXJOb2RlQ29udGV4dChub2RlQ29udGV4dDogVnRyZWUuTm9kZUNvbnRleHQpIHtcbiAgICBpZiAodGhpcy5oZWFkZXJOb2RlUG9zaXRpb24pIHtcbiAgICAgIHJldHVybjsgLy8gdXNlIGZpcnN0IG9uZS5cbiAgICB9XG4gICAgdGhpcy5oZWFkZXJOb2RlUG9zaXRpb24gPSBWdHJlZUltcGwubmV3Tm9kZVBvc2l0aW9uRnJvbU5vZGVDb250ZXh0KFxuICAgICAgbm9kZUNvbnRleHQsXG4gICAgICAwLFxuICAgICk7XG4gICAgdGhpcy5oZWFkZXJTb3VyY2VOb2RlID0gbm9kZUNvbnRleHQuc291cmNlTm9kZSBhcyBFbGVtZW50O1xuICAgIHRoaXMuaGVhZGVyVmlld05vZGUgPSBub2RlQ29udGV4dC52aWV3Tm9kZSBhcyBFbGVtZW50O1xuICB9XG5cbiAgc2V0Rm9vdGVyTm9kZUNvbnRleHQobm9kZUNvbnRleHQ6IFZ0cmVlLk5vZGVDb250ZXh0KSB7XG4gICAgaWYgKHRoaXMuZm9vdGVyTm9kZVBvc2l0aW9uKSB7XG4gICAgICByZXR1cm47IC8vIHVzZSBmaXJzdCBvbmUuXG4gICAgfVxuICAgIHRoaXMuZm9vdGVyTm9kZVBvc2l0aW9uID0gVnRyZWVJbXBsLm5ld05vZGVQb3NpdGlvbkZyb21Ob2RlQ29udGV4dChcbiAgICAgIG5vZGVDb250ZXh0LFxuICAgICAgMCxcbiAgICApO1xuICAgIHRoaXMuZm9vdGVyU291cmNlTm9kZSA9IG5vZGVDb250ZXh0LnNvdXJjZU5vZGUgYXMgRWxlbWVudDtcbiAgICB0aGlzLmZvb3RlclZpZXdOb2RlID0gbm9kZUNvbnRleHQudmlld05vZGUgYXMgRWxlbWVudDtcbiAgfVxuXG4gIHVwZGF0ZUhlaWdodChjb2x1bW46IExheW91dFR5cGUuQ29sdW1uKSB7XG4gICAgaWYgKHRoaXMuaGVhZGVyVmlld05vZGUpIHtcbiAgICAgIHRoaXMuaGVhZGVySGVpZ2h0ID0gTGF5b3V0SGVscGVyLmdldEVsZW1lbnRIZWlnaHQoXG4gICAgICAgIHRoaXMuaGVhZGVyVmlld05vZGUsXG4gICAgICAgIGNvbHVtbixcbiAgICAgICAgdGhpcy52ZXJ0aWNhbCxcbiAgICAgICk7XG4gICAgICB0aGlzLmhlYWRlclZpZXdOb2RlID0gbnVsbDtcbiAgICB9XG4gICAgaWYgKHRoaXMuZm9vdGVyVmlld05vZGUpIHtcbiAgICAgIHRoaXMuZm9vdGVySGVpZ2h0ID0gTGF5b3V0SGVscGVyLmdldEVsZW1lbnRIZWlnaHQoXG4gICAgICAgIHRoaXMuZm9vdGVyVmlld05vZGUsXG4gICAgICAgIGNvbHVtbixcbiAgICAgICAgdGhpcy52ZXJ0aWNhbCxcbiAgICAgICk7XG4gICAgICB0aGlzLmZvb3RlclZpZXdOb2RlID0gbnVsbDtcbiAgICB9XG4gIH1cblxuICBwcmVwYXJlTGF5b3V0RnJhZ21lbnQoKSB7XG4gICAgdGhpcy5pc1NraXBIZWFkZXIgPSB0aGlzLmlzU2tpcEZvb3RlciA9IGZhbHNlO1xuICAgIHRoaXMuZW5hYmxlU2tpcHBpbmdGb290ZXIgPSB0cnVlO1xuICAgIHRoaXMuZW5hYmxlU2tpcHBpbmdIZWFkZXIgPSB0cnVlO1xuICB9XG5cbiAgYXBwZW5kSGVhZGVyVG9GcmFnbWVudChcbiAgICByb290Tm9kZUNvbnRleHQ6IFZ0cmVlLk5vZGVDb250ZXh0LFxuICAgIGZpcnN0Q2hpbGQ6IE5vZGUgfCBudWxsLFxuICAgIGNvbHVtbjogTGF5b3V0VHlwZS5Db2x1bW4sXG4gICk6IFRhc2suUmVzdWx0PGJvb2xlYW4+IHtcbiAgICBpZiAoIXRoaXMuaGVhZGVyTm9kZVBvc2l0aW9uIHx8IHRoaXMuaXNTa2lwSGVhZGVyKSB7XG4gICAgICByZXR1cm4gVGFzay5uZXdSZXN1bHQodHJ1ZSk7XG4gICAgfVxuICAgIHJldHVybiB0aGlzLmFwcGVuZEVsZW1lbnRUb0ZyYWdtZW50KFxuICAgICAgdGhpcy5oZWFkZXJOb2RlUG9zaXRpb24sXG4gICAgICByb290Tm9kZUNvbnRleHQsXG4gICAgICBmaXJzdENoaWxkLFxuICAgICAgY29sdW1uLFxuICAgICk7XG4gIH1cblxuICBhcHBlbmRGb290ZXJUb0ZyYWdtZW50KFxuICAgIHJvb3ROb2RlQ29udGV4dDogVnRyZWUuTm9kZUNvbnRleHQsXG4gICAgZmlyc3RDaGlsZDogTm9kZSB8IG51bGwsXG4gICAgY29sdW1uOiBMYXlvdXRUeXBlLkNvbHVtbixcbiAgKTogVGFzay5SZXN1bHQ8Ym9vbGVhbj4ge1xuICAgIGlmICghdGhpcy5mb290ZXJOb2RlUG9zaXRpb24gfHwgdGhpcy5pc1NraXBGb290ZXIpIHtcbiAgICAgIHJldHVybiBUYXNrLm5ld1Jlc3VsdCh0cnVlKTtcbiAgICB9XG4gICAgcmV0dXJuIHRoaXMuYXBwZW5kRWxlbWVudFRvRnJhZ21lbnQoXG4gICAgICB0aGlzLmZvb3Rlck5vZGVQb3NpdGlvbixcbiAgICAgIHJvb3ROb2RlQ29udGV4dCxcbiAgICAgIGZpcnN0Q2hpbGQsXG4gICAgICBjb2x1bW4sXG4gICAgKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBAcmV0dXJuXG4gICAqL1xuICBhcHBlbmRFbGVtZW50VG9GcmFnbWVudChcbiAgICBub2RlUG9zaXRpb246IFZ0cmVlLk5vZGVQb3NpdGlvbixcbiAgICByb290Tm9kZUNvbnRleHQ6IFZ0cmVlLk5vZGVDb250ZXh0LFxuICAgIGZpcnN0Q2hpbGQ6IE5vZGUgfCBudWxsLFxuICAgIGNvbHVtbjogTGF5b3V0VHlwZS5Db2x1bW4sXG4gICk6IFRhc2suUmVzdWx0PGJvb2xlYW4+IHtcbiAgICBjb25zdCBkb2MgPSByb290Tm9kZUNvbnRleHQudmlld05vZGUub3duZXJEb2N1bWVudDtcbiAgICBjb25zdCByb290Vmlld05vZGUgPSByb290Tm9kZUNvbnRleHQudmlld05vZGUgYXMgRWxlbWVudDtcbiAgICBjb25zdCB2aWV3Um9vdCA9IGRvYy5jcmVhdGVFbGVtZW50KFwiZGl2XCIpO1xuICAgIHJvb3RWaWV3Tm9kZS5hcHBlbmRDaGlsZCh2aWV3Um9vdCk7XG4gICAgY29uc3QgcHNldWRvQ29sdW1uID0gbmV3IExheW91dC5Qc2V1ZG9Db2x1bW4oXG4gICAgICBjb2x1bW4sXG4gICAgICB2aWV3Um9vdCxcbiAgICAgIHJvb3ROb2RlQ29udGV4dCxcbiAgICApO1xuICAgIGNvbnN0IGluaXRpYWxQYWdlQnJlYWtUeXBlID0gcHNldWRvQ29sdW1uLmdldENvbHVtbigpLnBhZ2VCcmVha1R5cGU7XG4gICAgcHNldWRvQ29sdW1uLmdldENvbHVtbigpLnBhZ2VCcmVha1R5cGUgPSBudWxsO1xuICAgIHRoaXMuYWxsb3dJbnNlcnRSZXBlYXRpdGl2ZUVsZW1lbnRzID0gdHJ1ZTtcbiAgICByZXR1cm4gcHNldWRvQ29sdW1uXG4gICAgICAubGF5b3V0KG5ldyBWdHJlZUltcGwuQ2h1bmtQb3NpdGlvbihub2RlUG9zaXRpb24pLCB0cnVlKVxuICAgICAgLnRoZW5Bc3luYygoKSA9PiB7XG4gICAgICAgIHRoaXMuYWxsb3dJbnNlcnRSZXBlYXRpdGl2ZUVsZW1lbnRzID0gZmFsc2U7XG4gICAgICAgIHJvb3RWaWV3Tm9kZS5yZW1vdmVDaGlsZCh2aWV3Um9vdCk7XG4gICAgICAgIHRoaXMubW92ZUNoaWxkcmVuKHZpZXdSb290LCByb290Vmlld05vZGUsIGZpcnN0Q2hpbGQpO1xuICAgICAgICBwc2V1ZG9Db2x1bW4uZ2V0Q29sdW1uKCkucGFnZUJyZWFrVHlwZSA9IGluaXRpYWxQYWdlQnJlYWtUeXBlO1xuICAgICAgICByZXR1cm4gVGFzay5uZXdSZXN1bHQodHJ1ZSk7XG4gICAgICB9KTtcbiAgfVxuXG4gIG1vdmVDaGlsZHJlbihmcm9tOiBFbGVtZW50LCB0bzogRWxlbWVudCwgZmlyc3RDaGlsZDogTm9kZSB8IG51bGwpIHtcbiAgICBpZiAoIXRvKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIHdoaWxlIChmcm9tLmZpcnN0Q2hpbGQpIHtcbiAgICAgIGNvbnN0IGNoaWxkID0gZnJvbS5maXJzdENoaWxkO1xuICAgICAgZnJvbS5yZW1vdmVDaGlsZChjaGlsZCk7XG4gICAgICAoY2hpbGQgYXMgRWxlbWVudCkuc2V0QXR0cmlidXRlKFZ0cmVlSW1wbC5TUEVDSUFMX0FUVFIsIFwiMVwiKTtcbiAgICAgIGlmIChmaXJzdENoaWxkKSB7XG4gICAgICAgIHRvLmluc2VydEJlZm9yZShjaGlsZCwgZmlyc3RDaGlsZCk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB0by5hcHBlbmRDaGlsZChjaGlsZCk7XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgLyoqIEBvdmVycmlkZSAqL1xuICBjYWxjdWxhdGVPZmZzZXQobm9kZUNvbnRleHQ6IFZ0cmVlLk5vZGVDb250ZXh0KTogbnVtYmVyIHtcbiAgICBsZXQgb2Zmc2V0ID0gMDtcbiAgICBpZiAobm9kZUNvbnRleHQgJiYgIXRoaXMuYWZmZWN0VG8obm9kZUNvbnRleHQpKSB7XG4gICAgICByZXR1cm4gb2Zmc2V0O1xuICAgIH1cbiAgICBpZiAoXG4gICAgICAhdGhpcy5pc1NraXBGb290ZXIgfHxcbiAgICAgIChub2RlQ29udGV4dCAmJiB0aGlzLmlzQWZ0ZXJMYXN0Q29udGVudChub2RlQ29udGV4dCkpXG4gICAgKSB7XG4gICAgICBvZmZzZXQgKz0gdGhpcy5mb290ZXJIZWlnaHQ7XG4gICAgfVxuICAgIGlmICghdGhpcy5pc1NraXBIZWFkZXIpIHtcbiAgICAgIG9mZnNldCArPSB0aGlzLmhlYWRlckhlaWdodDtcbiAgICB9XG4gICAgcmV0dXJuIG9mZnNldDtcbiAgfVxuXG4gIC8qKiBAb3ZlcnJpZGUgKi9cbiAgY2FsY3VsYXRlTWluaW11bU9mZnNldChub2RlQ29udGV4dDogVnRyZWUuTm9kZUNvbnRleHQpOiBudW1iZXIge1xuICAgIGxldCBvZmZzZXQgPSAwO1xuICAgIGlmIChub2RlQ29udGV4dCAmJiAhdGhpcy5hZmZlY3RUbyhub2RlQ29udGV4dCkpIHtcbiAgICAgIHJldHVybiBvZmZzZXQ7XG4gICAgfVxuICAgIGlmIChub2RlQ29udGV4dCAmJiB0aGlzLmlzQWZ0ZXJMYXN0Q29udGVudChub2RlQ29udGV4dCkpIHtcbiAgICAgIG9mZnNldCArPSB0aGlzLmZvb3RlckhlaWdodDtcbiAgICB9XG4gICAgaWYgKCF0aGlzLmVuYWJsZVNraXBwaW5nSGVhZGVyKSB7XG4gICAgICBvZmZzZXQgKz0gdGhpcy5oZWFkZXJIZWlnaHQ7XG4gICAgfVxuICAgIHJldHVybiBvZmZzZXQ7XG4gIH1cblxuICBpc0FmdGVyTGFzdENvbnRlbnQobm9kZUNvbnRleHQ6IFZ0cmVlLk5vZGVDb250ZXh0KTogYm9vbGVhbiB7XG4gICAgcmV0dXJuIHRoaXMuZmluZFJlc3VsdEZyb21DYWNoZShcbiAgICAgIG5vZGVDb250ZXh0LFxuICAgICAgdGhpcy5hZnRlckxhc3RDb250ZW50Tm9kZUNhY2hlLFxuICAgICAgKG5jKSA9PlxuICAgICAgICB0aGlzLmlzQWZ0ZXJOb2RlQ29udGV4dE9mKFxuICAgICAgICAgIHRoaXMubGFzdENvbnRlbnRTb3VyY2VOb2RlIGFzIEVsZW1lbnQsXG4gICAgICAgICAgbm9kZUNvbnRleHQsXG4gICAgICAgICAgZmFsc2UsXG4gICAgICAgICksXG4gICAgKTtcbiAgfVxuXG4gIHByaXZhdGUgYWZmZWN0VG8obm9kZUNvbnRleHQ6IFZ0cmVlLk5vZGVDb250ZXh0KTogYm9vbGVhbiB7XG4gICAgcmV0dXJuIHRoaXMuZmluZFJlc3VsdEZyb21DYWNoZShub2RlQ29udGV4dCwgdGhpcy5hZmZlY3RlZE5vZGVDYWNoZSwgKG5jKSA9PlxuICAgICAgdGhpcy5pc0FmdGVyTm9kZUNvbnRleHRPZih0aGlzLm93bmVyU291cmNlTm9kZSwgbm9kZUNvbnRleHQsIHRydWUpLFxuICAgICk7XG4gIH1cblxuICBwcml2YXRlIGZpbmRSZXN1bHRGcm9tQ2FjaGUoXG4gICAgbm9kZUNvbnRleHQ6IFZ0cmVlLk5vZGVDb250ZXh0LFxuICAgIGNhY2hlOiB7IG5vZGVDb250ZXh0OiBWdHJlZS5Ob2RlQ29udGV4dDsgcmVzdWx0OiBib29sZWFuIH1bXSxcbiAgICBjYWxjdWxhdG9yOiAocDE6IFZ0cmVlLk5vZGVDb250ZXh0KSA9PiBib29sZWFuLFxuICApOiBib29sZWFuIHtcbiAgICBjb25zdCBjYWNoZUVudHJ5ID0gY2FjaGUuZmlsdGVyKFxuICAgICAgKGNhY2hlKSA9PlxuICAgICAgICBjYWNoZS5ub2RlQ29udGV4dC5zb3VyY2VOb2RlID09PSBub2RlQ29udGV4dC5zb3VyY2VOb2RlICYmXG4gICAgICAgIGNhY2hlLm5vZGVDb250ZXh0LmFmdGVyID09PSBub2RlQ29udGV4dC5hZnRlcixcbiAgICApO1xuICAgIGlmIChjYWNoZUVudHJ5Lmxlbmd0aCA+IDApIHtcbiAgICAgIHJldHVybiBjYWNoZUVudHJ5WzBdLnJlc3VsdDtcbiAgICB9IGVsc2Uge1xuICAgICAgY29uc3QgcmVzdWx0ID0gY2FsY3VsYXRvcihub2RlQ29udGV4dCk7XG4gICAgICBjYWNoZS5wdXNoKHsgbm9kZUNvbnRleHQsIHJlc3VsdCB9KTtcbiAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfVxuICB9XG5cbiAgcHJpdmF0ZSBpc0FmdGVyTm9kZUNvbnRleHRPZihcbiAgICBub2RlOiBFbGVtZW50LFxuICAgIG5vZGVDb250ZXh0OiBWdHJlZS5Ob2RlQ29udGV4dCxcbiAgICBpbmNsdWRlQ2hpbGRyZW46IGJvb2xlYW4sXG4gICk6IGJvb2xlYW4ge1xuICAgIGNvbnN0IHBhcmVudHNPZk5vZGUgPSBbXTtcbiAgICBmb3IgKGxldCBuOiBOb2RlIHwgbnVsbCA9IG5vZGU7IG47IG4gPSBuLnBhcmVudE5vZGUpIHtcbiAgICAgIGlmIChub2RlQ29udGV4dC5zb3VyY2VOb2RlID09PSBuKSB7XG4gICAgICAgIHJldHVybiBub2RlQ29udGV4dC5hZnRlcjtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHBhcmVudHNPZk5vZGUucHVzaChuKTtcbiAgICAgIH1cbiAgICB9XG4gICAgZm9yIChcbiAgICAgIGxldCBjdXJyZW50UGFyZW50OiBOb2RlIHwgbnVsbCA9IG5vZGVDb250ZXh0LnNvdXJjZU5vZGU7XG4gICAgICBjdXJyZW50UGFyZW50O1xuICAgICAgY3VycmVudFBhcmVudCA9IGN1cnJlbnRQYXJlbnQucGFyZW50Tm9kZVxuICAgICkge1xuICAgICAgY29uc3QgaW5kZXggPSBwYXJlbnRzT2ZOb2RlLmluZGV4T2YoY3VycmVudFBhcmVudCk7XG4gICAgICBpZiAoaW5kZXggPj0gMCkge1xuICAgICAgICByZXR1cm4gaW5jbHVkZUNoaWxkcmVuID8gaW5kZXggPT09IDAgOiBmYWxzZTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGZvciAoXG4gICAgICAgICAgbGV0IGN1cnJlbnQ6IEVsZW1lbnQgfCBudWxsID0gY3VycmVudFBhcmVudCBhcyBFbGVtZW50O1xuICAgICAgICAgIGN1cnJlbnQ7XG4gICAgICAgICAgY3VycmVudCA9IGN1cnJlbnQucHJldmlvdXNFbGVtZW50U2libGluZ1xuICAgICAgICApIHtcbiAgICAgICAgICBpZiAocGFyZW50c09mTm9kZS5pbmNsdWRlcyhjdXJyZW50KSkge1xuICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiBub2RlQ29udGV4dC5hZnRlcjtcbiAgfVxuXG4gIGlzRmlyc3RDb250ZW50Tm9kZShub2RlQ29udGV4dDogVnRyZWUuTm9kZUNvbnRleHQpOiBib29sZWFuIHtcbiAgICByZXR1cm4gKFxuICAgICAgbm9kZUNvbnRleHQgJiYgdGhpcy5maXJzdENvbnRlbnRTb3VyY2VOb2RlID09PSBub2RlQ29udGV4dC5zb3VyY2VOb2RlXG4gICAgKTtcbiAgfVxuXG4gIGlzRW5hYmxlVG9VcGRhdGVTdGF0ZSgpOiBib29sZWFuIHtcbiAgICBpZiAoXG4gICAgICAoIXRoaXMuaXNTa2lwRm9vdGVyICYmXG4gICAgICAgIHRoaXMuZW5hYmxlU2tpcHBpbmdGb290ZXIgJiZcbiAgICAgICAgdGhpcy5mb290ZXJOb2RlUG9zaXRpb24pIHx8XG4gICAgICAoIXRoaXMuaXNTa2lwSGVhZGVyICYmXG4gICAgICAgIHRoaXMuZW5hYmxlU2tpcHBpbmdIZWFkZXIgJiZcbiAgICAgICAgdGhpcy5oZWFkZXJOb2RlUG9zaXRpb24pXG4gICAgKSB7XG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgfVxuXG4gIHVwZGF0ZVN0YXRlKCkge1xuICAgIGlmIChcbiAgICAgICF0aGlzLmlzU2tpcEZvb3RlciAmJlxuICAgICAgdGhpcy5lbmFibGVTa2lwcGluZ0Zvb3RlciAmJlxuICAgICAgdGhpcy5mb290ZXJOb2RlUG9zaXRpb25cbiAgICApIHtcbiAgICAgIHRoaXMuaXNTa2lwRm9vdGVyID0gdHJ1ZTtcbiAgICB9IGVsc2UgaWYgKFxuICAgICAgIXRoaXMuaXNTa2lwSGVhZGVyICYmXG4gICAgICB0aGlzLmVuYWJsZVNraXBwaW5nSGVhZGVyICYmXG4gICAgICB0aGlzLmhlYWRlck5vZGVQb3NpdGlvblxuICAgICkge1xuICAgICAgdGhpcy5pc1NraXBIZWFkZXIgPSB0cnVlO1xuICAgIH1cbiAgfVxuXG4gIHByZXZlbnRTa2lwcGluZ0hlYWRlcigpIHtcbiAgICB0aGlzLmlzU2tpcEhlYWRlciA9IGZhbHNlO1xuICAgIHRoaXMuZW5hYmxlU2tpcHBpbmdIZWFkZXIgPSBmYWxzZTtcbiAgfVxuXG4gIHByZXZlbnRTa2lwcGluZ0Zvb3RlcigpIHtcbiAgICB0aGlzLmlzU2tpcEZvb3RlciA9IGZhbHNlO1xuICAgIHRoaXMuZW5hYmxlU2tpcHBpbmdGb290ZXIgPSBmYWxzZTtcbiAgfVxuXG4gIGlzSGVhZGVyUmVnaXN0ZXJlZCgpOiBib29sZWFuIHtcbiAgICByZXR1cm4gISF0aGlzLmhlYWRlck5vZGVQb3NpdGlvbjtcbiAgfVxuXG4gIGlzRm9vdGVyUmVnaXN0ZXJlZCgpOiBib29sZWFuIHtcbiAgICByZXR1cm4gISF0aGlzLmZvb3Rlck5vZGVQb3NpdGlvbjtcbiAgfVxuXG4gIGlzSGVhZGVyU291cmNlTm9kZShub2RlOiBOb2RlKTogYm9vbGVhbiB7XG4gICAgcmV0dXJuIHRoaXMuaGVhZGVyU291cmNlTm9kZSA9PT0gbm9kZTtcbiAgfVxuXG4gIGlzRm9vdGVyU291cmNlTm9kZShub2RlOiBOb2RlKTogYm9vbGVhbiB7XG4gICAgcmV0dXJuIHRoaXMuZm9vdGVyU291cmNlTm9kZSA9PT0gbm9kZTtcbiAgfVxufVxuXG4vKipcbiAqIEBhYnN0cmFjdFxuICovXG5leHBvcnQgYWJzdHJhY3QgY2xhc3MgTGF5b3V0RW50aXJlQmxvY2sgaW1wbGVtZW50cyBMYXlvdXRUeXBlLkxheW91dE1vZGUge1xuICBjb25zdHJ1Y3RvcihcbiAgICBwdWJsaWMgZm9ybWF0dGluZ0NvbnRleHQ6IFJlcGV0aXRpdmVFbGVtZW50LlJlcGV0aXRpdmVFbGVtZW50c093bmVyRm9ybWF0dGluZ0NvbnRleHQsXG4gICkge31cblxuICAvKipcbiAgICogQG92ZXJyaWRlXG4gICAqL1xuICBhYnN0cmFjdCBkb0xheW91dChcbiAgICBub2RlQ29udGV4dDogVnRyZWUuTm9kZUNvbnRleHQsXG4gICAgY29sdW1uOiBMYXlvdXRUeXBlLkNvbHVtbixcbiAgKTogVGFzay5SZXN1bHQ8VnRyZWUuTm9kZUNvbnRleHQ+O1xuXG4gIC8qKlxuICAgKiBAb3ZlcnJpZGVcbiAgICovXG4gIGFjY2VwdChub2RlQ29udGV4dDogVnRyZWUuTm9kZUNvbnRleHQsIGNvbHVtbjogTGF5b3V0VHlwZS5Db2x1bW4pOiBib29sZWFuIHtcbiAgICByZXR1cm4gISFub2RlQ29udGV4dDtcbiAgfVxuXG4gIC8qKlxuICAgKiBAb3ZlcnJpZGVcbiAgICovXG4gIHBvc3RMYXlvdXQoXG4gICAgcG9zaXRpb25BZnRlcjogVnRyZWUuTm9kZUNvbnRleHQsXG4gICAgaW5pdGlhbFBvc2l0aW9uOiBWdHJlZS5Ob2RlQ29udGV4dCxcbiAgICBjb2x1bW46IExheW91dFR5cGUuQ29sdW1uLFxuICAgIGFjY2VwdGVkOiBib29sZWFuLFxuICApOiBib29sZWFuIHtcbiAgICBjb25zdCByZXBldGl0aXZlRWxlbWVudHMgPSB0aGlzLmZvcm1hdHRpbmdDb250ZXh0LmdldFJlcGV0aXRpdmVFbGVtZW50cygpO1xuICAgIGlmIChyZXBldGl0aXZlRWxlbWVudHMpIHtcbiAgICAgIEFzc2VydHMuYXNzZXJ0KGNvbHVtbi5jbGllbnRMYXlvdXQpO1xuICAgICAgaWYgKCFyZXBldGl0aXZlRWxlbWVudHMuZG9uZUluaXRpYWxMYXlvdXQpIHtcbiAgICAgICAgcmVwZXRpdGl2ZUVsZW1lbnRzLnVwZGF0ZUhlaWdodChjb2x1bW4pO1xuICAgICAgICByZXBldGl0aXZlRWxlbWVudHMuZG9uZUluaXRpYWxMYXlvdXQgPSB0cnVlO1xuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gYWNjZXB0ZWQ7XG4gIH1cbn1cblxuLyoqXG4gKiBAYWJzdHJhY3RcbiAqL1xuZXhwb3J0IGFic3RyYWN0IGNsYXNzIExheW91dEZyYWdtZW50ZWRCbG9jayBpbXBsZW1lbnRzIExheW91dFR5cGUuTGF5b3V0TW9kZSB7XG4gIGNvbnN0cnVjdG9yKFxuICAgIHB1YmxpYyBmb3JtYXR0aW5nQ29udGV4dDogUmVwZXRpdGl2ZUVsZW1lbnQuUmVwZXRpdGl2ZUVsZW1lbnRzT3duZXJGb3JtYXR0aW5nQ29udGV4dCxcbiAgKSB7fVxuXG4gIC8qKlxuICAgKiBAb3ZlcnJpZGVcbiAgICovXG4gIGFic3RyYWN0IGRvTGF5b3V0KFxuICAgIG5vZGVDb250ZXh0OiBWdHJlZS5Ob2RlQ29udGV4dCxcbiAgICBjb2x1bW46IExheW91dFR5cGUuQ29sdW1uLFxuICApOiBUYXNrLlJlc3VsdDxWdHJlZS5Ob2RlQ29udGV4dD47XG5cbiAgLyoqXG4gICAqIEBvdmVycmlkZVxuICAgKi9cbiAgYWNjZXB0KG5vZGVDb250ZXh0OiBWdHJlZS5Ob2RlQ29udGV4dCwgY29sdW1uOiBMYXlvdXRUeXBlLkNvbHVtbik6IGJvb2xlYW4ge1xuICAgIHJldHVybiB0cnVlO1xuICB9XG5cbiAgLyoqXG4gICAqIEBvdmVycmlkZVxuICAgKi9cbiAgcG9zdExheW91dChcbiAgICBwb3NpdGlvbkFmdGVyOiBWdHJlZS5Ob2RlQ29udGV4dCxcbiAgICBpbml0aWFsUG9zaXRpb246IFZ0cmVlLk5vZGVDb250ZXh0LFxuICAgIGNvbHVtbjogTGF5b3V0VHlwZS5Db2x1bW4sXG4gICAgYWNjZXB0ZWQ6IGJvb2xlYW4sXG4gICk6IGJvb2xlYW4ge1xuICAgIHJldHVybiBhY2NlcHRlZDtcbiAgfVxufVxuXG5leHBvcnQgY2xhc3MgTGF5b3V0RW50aXJlT3duZXJCbG9jayBleHRlbmRzIExheW91dEVudGlyZUJsb2NrIHtcbiAgY29uc3RydWN0b3IoXG4gICAgZm9ybWF0dGluZ0NvbnRleHQ6IFJlcGV0aXRpdmVFbGVtZW50LlJlcGV0aXRpdmVFbGVtZW50c093bmVyRm9ybWF0dGluZ0NvbnRleHQsXG4gICAgcHVibGljIHJlYWRvbmx5IHByb2Nlc3NvcjogUmVwZXRpdGl2ZUVsZW1lbnRzT3duZXJMYXlvdXRQcm9jZXNzb3IsXG4gICkge1xuICAgIHN1cGVyKGZvcm1hdHRpbmdDb250ZXh0KTtcbiAgfVxuXG4gIC8qKlxuICAgKiBAb3ZlcnJpZGVcbiAgICovXG4gIGRvTGF5b3V0KFxuICAgIG5vZGVDb250ZXh0OiBWdHJlZS5Ob2RlQ29udGV4dCxcbiAgICBjb2x1bW46IExheW91dFR5cGUuQ29sdW1uLFxuICApOiBUYXNrLlJlc3VsdDxWdHJlZS5Ob2RlQ29udGV4dD4ge1xuICAgIC8vIEZJWE1FOiBMYXlvdXRFbnRpcmVCbG9jay5wcm90b3R5cGUuZG9MYXlvdXQgaXMgdW5kZWZpbmVkIGJlY2F1c2UgaXQncyBhYnN0cmFjdCBtZXRob2QuXG4gICAgLy8gICAgICAgIFByb2JhYmx5LCByZW1vdmluZyB0aGlzIGNhbGwgaXMgb2suXG4gICAgLy8gTGF5b3V0RW50aXJlQmxvY2sucHJvdG90eXBlLmRvTGF5b3V0LmNhbGwodGhpcywgbm9kZUNvbnRleHQsIGNvbHVtbik7XG4gICAgcmV0dXJuIHRoaXMucHJvY2Vzc29yLmRvSW5pdGlhbExheW91dChub2RlQ29udGV4dCwgY29sdW1uKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBAb3ZlcnJpZGVcbiAgICovXG4gIGFjY2VwdChub2RlQ29udGV4dDogVnRyZWUuTm9kZUNvbnRleHQsIGNvbHVtbjogTGF5b3V0VHlwZS5Db2x1bW4pOiBib29sZWFuIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cbn1cblxuZXhwb3J0IGNsYXNzIExheW91dEZyYWdtZW50ZWRPd25lckJsb2NrIGV4dGVuZHMgTGF5b3V0RnJhZ21lbnRlZEJsb2NrIHtcbiAgY29uc3RydWN0b3IoXG4gICAgZm9ybWF0dGluZ0NvbnRleHQ6IFJlcGV0aXRpdmVFbGVtZW50LlJlcGV0aXRpdmVFbGVtZW50c093bmVyRm9ybWF0dGluZ0NvbnRleHQsXG4gICAgcHVibGljIHJlYWRvbmx5IHByb2Nlc3NvcjogUmVwZXRpdGl2ZUVsZW1lbnRzT3duZXJMYXlvdXRQcm9jZXNzb3IsXG4gICkge1xuICAgIHN1cGVyKGZvcm1hdHRpbmdDb250ZXh0KTtcbiAgfVxuXG4gIC8qKlxuICAgKiBAb3ZlcnJpZGVcbiAgICovXG4gIGRvTGF5b3V0KFxuICAgIG5vZGVDb250ZXh0OiBWdHJlZS5Ob2RlQ29udGV4dCxcbiAgICBjb2x1bW46IExheW91dFR5cGUuQ29sdW1uLFxuICApOiBUYXNrLlJlc3VsdDxWdHJlZS5Ob2RlQ29udGV4dD4ge1xuICAgIGlmICghbm9kZUNvbnRleHQuYmVsb25nc1RvKHRoaXMuZm9ybWF0dGluZ0NvbnRleHQpICYmICFub2RlQ29udGV4dC5hZnRlcikge1xuICAgICAgY29sdW1uLmZyYWdtZW50TGF5b3V0Q29uc3RyYWludHMudW5zaGlmdChcbiAgICAgICAgbmV3IFJlcGV0aXRpdmVFbGVtZW50c093bmVyTGF5b3V0Q29uc3RyYWludChub2RlQ29udGV4dCksXG4gICAgICApO1xuICAgIH1cbiAgICByZXR1cm4gdGhpcy5wcm9jZXNzb3IuZG9MYXlvdXQobm9kZUNvbnRleHQsIGNvbHVtbik7XG4gIH1cbn1cblxuZXhwb3J0IGNsYXNzIFJlcGV0aXRpdmVFbGVtZW50c093bmVyTGF5b3V0Q29uc3RyYWludFxuICBpbXBsZW1lbnRzIFJlcGV0aXRpdmVFbGVtZW50LlJlcGV0aXRpdmVFbGVtZW50c093bmVyTGF5b3V0Q29uc3RyYWludCB7XG4gIGZsYWdtZW50TGF5b3V0Q29uc3RyYWludFR5cGU6IEZyYWdtZW50TGF5b3V0Q29uc3RyYWludFR5cGUgPVxuICAgIFwiUmVwZXRpdGl2ZUVsZW1lbnRzT3duZXJcIjtcbiAgbm9kZUNvbnRleHQ6IFZ0cmVlLk5vZGVDb250ZXh0O1xuXG4gIGNvbnN0cnVjdG9yKG5vZGVDb250ZXh0OiBWdHJlZS5Ob2RlQ29udGV4dCkge1xuICAgIGNvbnN0IGZvcm1hdHRpbmdDb250ZXh0ID0gZ2V0UmVwZXRpdGl2ZUVsZW1lbnRzT3duZXJGb3JtYXR0aW5nQ29udGV4dChcbiAgICAgIG5vZGVDb250ZXh0LmZvcm1hdHRpbmdDb250ZXh0LFxuICAgICk7XG4gICAgdGhpcy5ub2RlQ29udGV4dCA9IGZvcm1hdHRpbmdDb250ZXh0LmdldFJvb3ROb2RlQ29udGV4dChub2RlQ29udGV4dCk7XG4gIH1cblxuICAvKiogQG92ZXJyaWRlICovXG4gIGFsbG93TGF5b3V0KFxuICAgIG5vZGVDb250ZXh0OiBWdHJlZS5Ob2RlQ29udGV4dCxcbiAgICBvdmVyZmxvd25Ob2RlQ29udGV4dDogVnRyZWUuTm9kZUNvbnRleHQsXG4gICAgY29sdW1uOiBMYXlvdXRUeXBlLkNvbHVtbixcbiAgKTogYm9vbGVhbiB7XG4gICAgY29uc3QgcmVwZXRpdGl2ZUVsZW1lbnRzID0gdGhpcy5nZXRSZXBldGl0aXZlRWxlbWVudHMoKTtcbiAgICBpZiAoIXJlcGV0aXRpdmVFbGVtZW50cykge1xuICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuICAgIGlmIChMYXlvdXRIZWxwZXIuaXNPcnBoYW4odGhpcy5ub2RlQ29udGV4dC52aWV3Tm9kZSkpIHtcbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cbiAgICBpZiAoIXJlcGV0aXRpdmVFbGVtZW50cy5pc0VuYWJsZVRvVXBkYXRlU3RhdGUoKSkge1xuICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuICAgIGlmIChcbiAgICAgIChvdmVyZmxvd25Ob2RlQ29udGV4dCAmJiAhbm9kZUNvbnRleHQpIHx8XG4gICAgICAobm9kZUNvbnRleHQgJiYgbm9kZUNvbnRleHQub3ZlcmZsb3cpXG4gICAgKSB7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cbiAgfVxuXG4gIC8qKiBAb3ZlcnJpZGUgKi9cbiAgbmV4dENhbmRpZGF0ZShub2RlQ29udGV4dDogVnRyZWUuTm9kZUNvbnRleHQpOiBib29sZWFuIHtcbiAgICBjb25zdCByZXBldGl0aXZlRWxlbWVudHMgPSB0aGlzLmdldFJlcGV0aXRpdmVFbGVtZW50cygpO1xuICAgIGlmICghcmVwZXRpdGl2ZUVsZW1lbnRzKSB7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICAgIGlmIChyZXBldGl0aXZlRWxlbWVudHMuaXNFbmFibGVUb1VwZGF0ZVN0YXRlKCkpIHtcbiAgICAgIHJlcGV0aXRpdmVFbGVtZW50cy51cGRhdGVTdGF0ZSgpO1xuICAgICAgcmV0dXJuIHRydWU7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gIH1cblxuICAvKiogQG92ZXJyaWRlICovXG4gIHBvc3RMYXlvdXQoXG4gICAgYWxsb3dlZDogYm9vbGVhbixcbiAgICBwb3NpdGlvbkFmdGVyOiBWdHJlZS5Ob2RlQ29udGV4dCxcbiAgICBpbml0aWFsUG9zaXRpb246IFZ0cmVlLk5vZGVDb250ZXh0LFxuICAgIGNvbHVtbjogTGF5b3V0VHlwZS5Db2x1bW4sXG4gICkge1xuICAgIGNvbnN0IHJlcGV0aXRpdmVFbGVtZW50cyA9IHRoaXMuZ2V0UmVwZXRpdGl2ZUVsZW1lbnRzKCk7XG4gICAgaWYgKCFyZXBldGl0aXZlRWxlbWVudHMpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgaWYgKGFsbG93ZWQpIHtcbiAgICAgIGlmIChjb2x1bW4uc3RvcEF0T3ZlcmZsb3cpIHtcbiAgICAgICAgaWYgKFxuICAgICAgICAgIHBvc2l0aW9uQWZ0ZXIgPT0gbnVsbCB8fFxuICAgICAgICAgIHJlcGV0aXRpdmVFbGVtZW50cy5pc0FmdGVyTGFzdENvbnRlbnQocG9zaXRpb25BZnRlcilcbiAgICAgICAgKSB7XG4gICAgICAgICAgcmVwZXRpdGl2ZUVsZW1lbnRzLnByZXZlbnRTa2lwcGluZ0Zvb3RlcigpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgLyoqIEBvdmVycmlkZSAqL1xuICBmaW5pc2hCcmVhayhcbiAgICBub2RlQ29udGV4dDogVnRyZWUuTm9kZUNvbnRleHQsXG4gICAgY29sdW1uOiBMYXlvdXRUeXBlLkNvbHVtbixcbiAgKTogVGFzay5SZXN1bHQ8Ym9vbGVhbj4ge1xuICAgIGNvbnN0IGZvcm1hdHRpbmdDb250ZXh0ID0gZ2V0UmVwZXRpdGl2ZUVsZW1lbnRzT3duZXJGb3JtYXR0aW5nQ29udGV4dChcbiAgICAgIHRoaXMubm9kZUNvbnRleHQuZm9ybWF0dGluZ0NvbnRleHQsXG4gICAgKTtcbiAgICBjb25zdCByZXBldGl0aXZlRWxlbWVudHMgPSB0aGlzLmdldFJlcGV0aXRpdmVFbGVtZW50cygpO1xuICAgIGlmICghcmVwZXRpdGl2ZUVsZW1lbnRzKSB7XG4gICAgICByZXR1cm4gVGFzay5uZXdSZXN1bHQodHJ1ZSk7XG4gICAgfVxuICAgIGNvbnN0IHJvb3ROb2RlQ29udGV4dCA9IHRoaXMubm9kZUNvbnRleHQ7XG4gICAgcmV0dXJuIGFwcGVuZEhlYWRlcihmb3JtYXR0aW5nQ29udGV4dCwgcm9vdE5vZGVDb250ZXh0LCBjb2x1bW4pLnRoZW5Bc3luYyhcbiAgICAgICgpID0+XG4gICAgICAgIGFwcGVuZEZvb3Rlcihmb3JtYXR0aW5nQ29udGV4dCwgcm9vdE5vZGVDb250ZXh0LCBjb2x1bW4pLnRoZW5Bc3luYyhcbiAgICAgICAgICAoKSA9PiB7XG4gICAgICAgICAgICByZXBldGl0aXZlRWxlbWVudHMucHJlcGFyZUxheW91dEZyYWdtZW50KCk7XG4gICAgICAgICAgICByZXR1cm4gVGFzay5uZXdSZXN1bHQodHJ1ZSk7XG4gICAgICAgICAgfSxcbiAgICAgICAgKSxcbiAgICApO1xuICB9XG5cbiAgZ2V0UmVwZXRpdGl2ZUVsZW1lbnRzKCk6IFJlcGV0aXRpdmVFbGVtZW50LlJlcGV0aXRpdmVFbGVtZW50cyB7XG4gICAgY29uc3QgZm9ybWF0dGluZ0NvbnRleHQgPSBnZXRSZXBldGl0aXZlRWxlbWVudHNPd25lckZvcm1hdHRpbmdDb250ZXh0KFxuICAgICAgdGhpcy5ub2RlQ29udGV4dC5mb3JtYXR0aW5nQ29udGV4dCxcbiAgICApO1xuICAgIHJldHVybiBmb3JtYXR0aW5nQ29udGV4dC5nZXRSZXBldGl0aXZlRWxlbWVudHMoKTtcbiAgfVxuXG4gIC8qKiBAb3ZlcnJpZGUgKi9cbiAgZXF1YWxzVG8oY29uc3RyYWludDogTGF5b3V0VHlwZS5GcmFnbWVudExheW91dENvbnN0cmFpbnQpOiBib29sZWFuIHtcbiAgICBpZiAoIShjb25zdHJhaW50IGluc3RhbmNlb2YgUmVwZXRpdGl2ZUVsZW1lbnRzT3duZXJMYXlvdXRDb25zdHJhaW50KSkge1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgICByZXR1cm4gKFxuICAgICAgZ2V0UmVwZXRpdGl2ZUVsZW1lbnRzT3duZXJGb3JtYXR0aW5nQ29udGV4dChcbiAgICAgICAgdGhpcy5ub2RlQ29udGV4dC5mb3JtYXR0aW5nQ29udGV4dCxcbiAgICAgICkgPT09XG4gICAgICBnZXRSZXBldGl0aXZlRWxlbWVudHNPd25lckZvcm1hdHRpbmdDb250ZXh0KFxuICAgICAgICBjb25zdHJhaW50Lm5vZGVDb250ZXh0LmZvcm1hdHRpbmdDb250ZXh0LFxuICAgICAgKVxuICAgICk7XG4gIH1cblxuICAvKiogQG92ZXJyaWRlICovXG4gIGdldFByaW9yaXR5T2ZGaW5pc2hCcmVhaygpOiBudW1iZXIge1xuICAgIHJldHVybiAxMDtcbiAgfVxufVxuXG5leHBvcnQgY2xhc3MgUmVwZXRpdGl2ZUVsZW1lbnRzT3duZXJMYXlvdXRSZXRyeWVyIGV4dGVuZHMgTGF5b3V0UmV0cnllcnMuQWJzdHJhY3RMYXlvdXRSZXRyeWVyIHtcbiAgY29uc3RydWN0b3IoXG4gICAgcHVibGljIHJlYWRvbmx5IGZvcm1hdHRpbmdDb250ZXh0OiBSZXBldGl0aXZlRWxlbWVudC5SZXBldGl0aXZlRWxlbWVudHNPd25lckZvcm1hdHRpbmdDb250ZXh0LFxuICAgIHByaXZhdGUgcmVhZG9ubHkgcHJvY2Vzc29yOiBSZXBldGl0aXZlRWxlbWVudHNPd25lckxheW91dFByb2Nlc3NvcixcbiAgKSB7XG4gICAgc3VwZXIoKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBAb3ZlcnJpZGVcbiAgICovXG4gIHJlc29sdmVMYXlvdXRNb2RlKG5vZGVDb250ZXh0OiBWdHJlZS5Ob2RlQ29udGV4dCk6IExheW91dFR5cGUuTGF5b3V0TW9kZSB7XG4gICAgY29uc3QgcmVwZXRpdGl2ZUVsZW1lbnRzID0gdGhpcy5mb3JtYXR0aW5nQ29udGV4dC5nZXRSZXBldGl0aXZlRWxlbWVudHMoKTtcbiAgICBpZiAoXG4gICAgICAhbm9kZUNvbnRleHQuYmVsb25nc1RvKHRoaXMuZm9ybWF0dGluZ0NvbnRleHQpICYmXG4gICAgICAhcmVwZXRpdGl2ZUVsZW1lbnRzLmRvbmVJbml0aWFsTGF5b3V0XG4gICAgKSB7XG4gICAgICByZXR1cm4gbmV3IExheW91dEVudGlyZU93bmVyQmxvY2sodGhpcy5mb3JtYXR0aW5nQ29udGV4dCwgdGhpcy5wcm9jZXNzb3IpO1xuICAgIH0gZWxzZSB7XG4gICAgICBpZiAoXG4gICAgICAgICFub2RlQ29udGV4dC5iZWxvbmdzVG8odGhpcy5mb3JtYXR0aW5nQ29udGV4dCkgJiZcbiAgICAgICAgIW5vZGVDb250ZXh0LmFmdGVyXG4gICAgICApIHtcbiAgICAgICAgaWYgKHJlcGV0aXRpdmVFbGVtZW50cykge1xuICAgICAgICAgIHJlcGV0aXRpdmVFbGVtZW50cy5wcmV2ZW50U2tpcHBpbmdIZWFkZXIoKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgcmV0dXJuIG5ldyBMYXlvdXRGcmFnbWVudGVkT3duZXJCbG9jayhcbiAgICAgICAgdGhpcy5mb3JtYXR0aW5nQ29udGV4dCxcbiAgICAgICAgdGhpcy5wcm9jZXNzb3IsXG4gICAgICApO1xuICAgIH1cbiAgfVxufVxuXG5leHBvcnQgY2xhc3MgRW50aXJlQmxvY2tMYXlvdXRTdHJhdGVneSBleHRlbmRzIExheW91dFV0aWwuRWRnZVNraXBwZXIge1xuICBjb25zdHJ1Y3RvcihcbiAgICBwdWJsaWMgcmVhZG9ubHkgZm9ybWF0dGluZ0NvbnRleHQ6IFJlcGV0aXRpdmVFbGVtZW50LlJlcGV0aXRpdmVFbGVtZW50c093bmVyRm9ybWF0dGluZ0NvbnRleHQsXG4gICAgcHVibGljIHJlYWRvbmx5IGNvbHVtbjogTGF5b3V0VHlwZS5Db2x1bW4sXG4gICkge1xuICAgIHN1cGVyKCk7XG4gIH1cblxuICAvKipcbiAgICogQG92ZXJyaWRlXG4gICAqL1xuICBzdGFydE5vbklubGluZUVsZW1lbnROb2RlKFxuICAgIHN0YXRlOiBMYXlvdXRVdGlsLkxheW91dEl0ZXJhdG9yU3RhdGUsXG4gICk6IHZvaWQgfCBUYXNrLlJlc3VsdDxib29sZWFuPiB7XG4gICAgY29uc3QgZm9ybWF0dGluZ0NvbnRleHQgPSB0aGlzLmZvcm1hdHRpbmdDb250ZXh0O1xuICAgIGNvbnN0IG5vZGVDb250ZXh0ID0gc3RhdGUubm9kZUNvbnRleHQ7XG4gICAgY29uc3QgcmVwZXRpdGl2ZUVsZW1lbnRzID0gZm9ybWF0dGluZ0NvbnRleHQuZ2V0UmVwZXRpdGl2ZUVsZW1lbnRzKCk7XG4gICAgaWYgKFxuICAgICAgbm9kZUNvbnRleHQucGFyZW50ICYmXG4gICAgICBmb3JtYXR0aW5nQ29udGV4dC5yb290U291cmNlTm9kZSA9PT0gbm9kZUNvbnRleHQucGFyZW50LnNvdXJjZU5vZGVcbiAgICApIHtcbiAgICAgIHN3aXRjaCAobm9kZUNvbnRleHQucmVwZWF0T25CcmVhaykge1xuICAgICAgICBjYXNlIFwiaGVhZGVyXCI6XG4gICAgICAgICAgaWYgKCFyZXBldGl0aXZlRWxlbWVudHMuaXNIZWFkZXJSZWdpc3RlcmVkKCkpIHtcbiAgICAgICAgICAgIHJlcGV0aXRpdmVFbGVtZW50cy5zZXRIZWFkZXJOb2RlQ29udGV4dChub2RlQ29udGV4dCk7XG4gICAgICAgICAgICByZXR1cm4gVGFzay5uZXdSZXN1bHQodHJ1ZSk7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIG5vZGVDb250ZXh0LnJlcGVhdE9uQnJlYWsgPSBcIm5vbmVcIjtcbiAgICAgICAgICB9XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIGNhc2UgXCJmb290ZXJcIjpcbiAgICAgICAgICBpZiAoIXJlcGV0aXRpdmVFbGVtZW50cy5pc0Zvb3RlclJlZ2lzdGVyZWQoKSkge1xuICAgICAgICAgICAgcmVwZXRpdGl2ZUVsZW1lbnRzLnNldEZvb3Rlck5vZGVDb250ZXh0KG5vZGVDb250ZXh0KTtcbiAgICAgICAgICAgIHJldHVybiBUYXNrLm5ld1Jlc3VsdCh0cnVlKTtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgbm9kZUNvbnRleHQucmVwZWF0T25CcmVhayA9IFwibm9uZVwiO1xuICAgICAgICAgIH1cbiAgICAgICAgICBicmVhaztcbiAgICAgIH1cbiAgICAgIGlmICghcmVwZXRpdGl2ZUVsZW1lbnRzLmZpcnN0Q29udGVudFNvdXJjZU5vZGUpIHtcbiAgICAgICAgcmVwZXRpdGl2ZUVsZW1lbnRzLmZpcnN0Q29udGVudFNvdXJjZU5vZGUgPSBub2RlQ29udGV4dC5zb3VyY2VOb2RlIGFzIEVsZW1lbnQ7XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiBMYXlvdXRVdGlsLkVkZ2VTa2lwcGVyLnByb3RvdHlwZS5zdGFydE5vbklubGluZUVsZW1lbnROb2RlLmNhbGwoXG4gICAgICB0aGlzLFxuICAgICAgc3RhdGUsXG4gICAgKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBAb3ZlcnJpZGVcbiAgICovXG4gIGFmdGVyTm9uSW5saW5lRWxlbWVudE5vZGUoXG4gICAgc3RhdGU6IExheW91dFV0aWwuTGF5b3V0SXRlcmF0b3JTdGF0ZSxcbiAgKTogdm9pZCB8IFRhc2suUmVzdWx0PGJvb2xlYW4+IHtcbiAgICBjb25zdCBmb3JtYXR0aW5nQ29udGV4dCA9IHRoaXMuZm9ybWF0dGluZ0NvbnRleHQ7XG4gICAgY29uc3Qgbm9kZUNvbnRleHQgPSBzdGF0ZS5ub2RlQ29udGV4dDtcbiAgICBpZiAobm9kZUNvbnRleHQuc291cmNlTm9kZSA9PT0gZm9ybWF0dGluZ0NvbnRleHQucm9vdFNvdXJjZU5vZGUpIHtcbiAgICAgIGZvcm1hdHRpbmdDb250ZXh0LmdldFJlcGV0aXRpdmVFbGVtZW50cygpLmxhc3RDb250ZW50U291cmNlTm9kZSA9XG4gICAgICAgIHN0YXRlLmxhc3RBZnRlck5vZGVDb250ZXh0ICYmXG4gICAgICAgIChzdGF0ZS5sYXN0QWZ0ZXJOb2RlQ29udGV4dC5zb3VyY2VOb2RlIGFzIEVsZW1lbnQpO1xuICAgICAgc3RhdGUuYnJlYWsgPSB0cnVlO1xuICAgIH1cbiAgICBpZiAoXG4gICAgICBub2RlQ29udGV4dC5yZXBlYXRPbkJyZWFrID09PSBcImhlYWRlclwiIHx8XG4gICAgICBub2RlQ29udGV4dC5yZXBlYXRPbkJyZWFrID09PSBcImZvb3RlclwiXG4gICAgKSB7XG4gICAgICByZXR1cm4gVGFzay5uZXdSZXN1bHQodHJ1ZSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiBMYXlvdXRVdGlsLkVkZ2VTa2lwcGVyLnByb3RvdHlwZS5hZnRlck5vbklubGluZUVsZW1lbnROb2RlLmNhbGwoXG4gICAgICAgIHRoaXMsXG4gICAgICAgIHN0YXRlLFxuICAgICAgKTtcbiAgICB9XG4gIH1cbn1cblxuZXhwb3J0IGNsYXNzIEZyYWdtZW50ZWRCbG9ja0xheW91dFN0cmF0ZWd5IGV4dGVuZHMgTGF5b3V0VXRpbC5FZGdlU2tpcHBlciB7XG4gIGNvbnN0cnVjdG9yKFxuICAgIHB1YmxpYyByZWFkb25seSBmb3JtYXR0aW5nQ29udGV4dDogUmVwZXRpdGl2ZUVsZW1lbnRzT3duZXJGb3JtYXR0aW5nQ29udGV4dCxcbiAgICBwdWJsaWMgcmVhZG9ubHkgY29sdW1uOiBMYXlvdXRUeXBlLkNvbHVtbixcbiAgKSB7XG4gICAgc3VwZXIoKTtcbiAgfVxufVxuXG5leHBvcnQgY2xhc3MgUmVwZXRpdGl2ZUVsZW1lbnRzT3duZXJMYXlvdXRQcm9jZXNzb3JcbiAgZXh0ZW5kcyBMYXlvdXRQcm9jZXNzb3IuQmxvY2tMYXlvdXRQcm9jZXNzb3JcbiAgaW1wbGVtZW50cyBMYXlvdXRQcm9jZXNzb3IuTGF5b3V0UHJvY2Vzc29yIHtcbiAgbGF5b3V0KFxuICAgIG5vZGVDb250ZXh0OiBWdHJlZS5Ob2RlQ29udGV4dCxcbiAgICBjb2x1bW46IExheW91dFR5cGUuQ29sdW1uLFxuICAgIGxlYWRpbmdFZGdlOiBib29sZWFuLFxuICApOiBUYXNrLlJlc3VsdDxWdHJlZS5Ob2RlQ29udGV4dD4ge1xuICAgIGlmIChjb2x1bW4uaXNGbG9hdE5vZGVDb250ZXh0KG5vZGVDb250ZXh0KSkge1xuICAgICAgcmV0dXJuIGNvbHVtbi5sYXlvdXRGbG9hdE9yRm9vdG5vdGUobm9kZUNvbnRleHQpO1xuICAgIH1cbiAgICBjb25zdCBmb3JtYXR0aW5nQ29udGV4dCA9IGdldFJlcGV0aXRpdmVFbGVtZW50c093bmVyRm9ybWF0dGluZ0NvbnRleHQoXG4gICAgICBub2RlQ29udGV4dC5mb3JtYXR0aW5nQ29udGV4dCxcbiAgICApO1xuICAgIGNvbnN0IHJvb3RWaWV3Tm9kZSA9IGZvcm1hdHRpbmdDb250ZXh0LmdldFJvb3RWaWV3Tm9kZShub2RlQ29udGV4dCk7XG4gICAgaWYgKCFyb290Vmlld05vZGUpIHtcbiAgICAgIHJldHVybiBjb2x1bW4uYnVpbGREZWVwRWxlbWVudFZpZXcobm9kZUNvbnRleHQpO1xuICAgIH0gZWxzZSB7XG4gICAgICBpZiAobGVhZGluZ0VkZ2UpIHtcbiAgICAgICAgYXBwZW5kSGVhZGVyVG9BbmNlc3RvcnMobm9kZUNvbnRleHQucGFyZW50LCBjb2x1bW4pO1xuICAgICAgfVxuICAgICAgaWYgKCFub2RlQ29udGV4dC5iZWxvbmdzVG8oZm9ybWF0dGluZ0NvbnRleHQpKSB7XG4gICAgICAgIHJldHVybiBuZXcgUmVwZXRpdGl2ZUVsZW1lbnRzT3duZXJMYXlvdXRSZXRyeWVyKFxuICAgICAgICAgIGZvcm1hdHRpbmdDb250ZXh0LFxuICAgICAgICAgIHRoaXMsXG4gICAgICAgICkubGF5b3V0KG5vZGVDb250ZXh0LCBjb2x1bW4pO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcmV0dXJuIExheW91dFByb2Nlc3Nvci5CbG9ja0xheW91dFByb2Nlc3Nvci5wcm90b3R5cGUubGF5b3V0LmNhbGwoXG4gICAgICAgICAgdGhpcyxcbiAgICAgICAgICBub2RlQ29udGV4dCxcbiAgICAgICAgICBjb2x1bW4sXG4gICAgICAgICAgbGVhZGluZ0VkZ2UsXG4gICAgICAgICk7XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgc3RhcnROb25JbmxpbmVFbGVtZW50Tm9kZShub2RlQ29udGV4dDogVnRyZWUuTm9kZUNvbnRleHQpOiBib29sZWFuIHtcbiAgICBjb25zdCBmb3JtYXR0aW5nQ29udGV4dCA9IGdldFJlcGV0aXRpdmVFbGVtZW50c093bmVyRm9ybWF0dGluZ0NvbnRleHRPck51bGwoXG4gICAgICBub2RlQ29udGV4dCxcbiAgICApO1xuICAgIGNvbnN0IHJlcGV0aXRpdmVFbGVtZW50cyA9IGZvcm1hdHRpbmdDb250ZXh0LmdldFJlcGV0aXRpdmVFbGVtZW50cygpO1xuICAgIGlmICghcmVwZXRpdGl2ZUVsZW1lbnRzKSB7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICAgIGlmIChcbiAgICAgICFyZXBldGl0aXZlRWxlbWVudHMuYWxsb3dJbnNlcnRSZXBlYXRpdGl2ZUVsZW1lbnRzICYmXG4gICAgICAocmVwZXRpdGl2ZUVsZW1lbnRzLmlzSGVhZGVyU291cmNlTm9kZShub2RlQ29udGV4dC5zb3VyY2VOb2RlKSB8fFxuICAgICAgICByZXBldGl0aXZlRWxlbWVudHMuaXNGb290ZXJTb3VyY2VOb2RlKG5vZGVDb250ZXh0LnNvdXJjZU5vZGUpKVxuICAgICkge1xuICAgICAgbm9kZUNvbnRleHQudmlld05vZGUucGFyZW50Tm9kZS5yZW1vdmVDaGlsZChub2RlQ29udGV4dC52aWV3Tm9kZSk7XG4gICAgfVxuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuXG4gIGRvSW5pdGlhbExheW91dChcbiAgICBub2RlQ29udGV4dDogVnRyZWUuTm9kZUNvbnRleHQsXG4gICAgY29sdW1uOiBMYXlvdXRUeXBlLkNvbHVtbixcbiAgKTogVGFzay5SZXN1bHQ8VnRyZWUuTm9kZUNvbnRleHQ+IHtcbiAgICBjb25zdCBmb3JtYXR0aW5nQ29udGV4dCA9IGdldFJlcGV0aXRpdmVFbGVtZW50c093bmVyRm9ybWF0dGluZ0NvbnRleHQoXG4gICAgICBub2RlQ29udGV4dC5mb3JtYXR0aW5nQ29udGV4dCxcbiAgICApO1xuICAgIGNvbnN0IGZyYW1lID0gVGFzay5uZXdGcmFtZTxWdHJlZS5Ob2RlQ29udGV4dD4oXG4gICAgICBcIkJsb2NrTGF5b3V0UHJvY2Vzc29yLmRvSW5pdGlhbExheW91dFwiLFxuICAgICk7XG4gICAgdGhpcy5sYXlvdXRFbnRpcmVCbG9jayhub2RlQ29udGV4dCwgY29sdW1uKS50aGVuRmluaXNoKGZyYW1lKTtcbiAgICByZXR1cm4gZnJhbWUucmVzdWx0KCk7XG4gIH1cblxuICBwcml2YXRlIGxheW91dEVudGlyZUJsb2NrKFxuICAgIG5vZGVDb250ZXh0OiBWdHJlZS5Ob2RlQ29udGV4dCxcbiAgICBjb2x1bW46IExheW91dFR5cGUuQ29sdW1uLFxuICApOiBUYXNrLlJlc3VsdDxWdHJlZS5Ob2RlQ29udGV4dD4ge1xuICAgIGNvbnN0IGZvcm1hdHRpbmdDb250ZXh0ID0gZ2V0UmVwZXRpdGl2ZUVsZW1lbnRzT3duZXJGb3JtYXR0aW5nQ29udGV4dChcbiAgICAgIG5vZGVDb250ZXh0LmZvcm1hdHRpbmdDb250ZXh0LFxuICAgICk7XG4gICAgY29uc3Qgc3RyYXRlZ3kgPSBuZXcgRW50aXJlQmxvY2tMYXlvdXRTdHJhdGVneShmb3JtYXR0aW5nQ29udGV4dCwgY29sdW1uKTtcbiAgICBjb25zdCBpdGVyYXRvciA9IG5ldyBMYXlvdXRVdGlsLkxheW91dEl0ZXJhdG9yKFxuICAgICAgc3RyYXRlZ3ksXG4gICAgICBjb2x1bW4ubGF5b3V0Q29udGV4dCxcbiAgICApO1xuICAgIHJldHVybiBpdGVyYXRvci5pdGVyYXRlKG5vZGVDb250ZXh0KTtcbiAgfVxuXG4gIGRvTGF5b3V0KFxuICAgIG5vZGVDb250ZXh0OiBWdHJlZS5Ob2RlQ29udGV4dCxcbiAgICBjb2x1bW46IExheW91dFR5cGUuQ29sdW1uLFxuICApOiBUYXNrLlJlc3VsdDxWdHJlZS5Ob2RlQ29udGV4dD4ge1xuICAgIGNvbnN0IGZvcm1hdHRpbmdDb250ZXh0ID0gZ2V0UmVwZXRpdGl2ZUVsZW1lbnRzT3duZXJGb3JtYXR0aW5nQ29udGV4dChcbiAgICAgIG5vZGVDb250ZXh0LmZvcm1hdHRpbmdDb250ZXh0LFxuICAgICk7XG4gICAgY29uc3QgZnJhbWU6IFRhc2suRnJhbWU8VnRyZWUuTm9kZUNvbnRleHQ+ID0gVGFzay5uZXdGcmFtZShcImRvTGF5b3V0XCIpO1xuICAgIGNvbnN0IGNvbnQgPSBjb2x1bW4ubGF5b3V0Q29udGV4dC5uZXh0SW5UcmVlKG5vZGVDb250ZXh0LCBmYWxzZSk7XG4gICAgTGF5b3V0LnByb2Nlc3NBZnRlcklmQ29udGludWVzKGNvbnQsIGNvbHVtbikudGhlbigocmVzTm9kZUNvbnRleHQpID0+IHtcbiAgICAgIGxldCBuZXh0Tm9kZUNvbnRleHQgPSByZXNOb2RlQ29udGV4dDtcbiAgICAgIGZyYW1lXG4gICAgICAgIC5sb29wV2l0aEZyYW1lKChsb29wRnJhbWUpID0+IHtcbiAgICAgICAgICB3aGlsZSAobmV4dE5vZGVDb250ZXh0KSB7XG4gICAgICAgICAgICBsZXQgcGVuZGluZyA9IHRydWU7XG4gICAgICAgICAgICBjb2x1bW5cbiAgICAgICAgICAgICAgLmxheW91dE5leHQobmV4dE5vZGVDb250ZXh0LCBmYWxzZSlcbiAgICAgICAgICAgICAgLnRoZW4oKG5vZGVDb250ZXh0UGFyYW0pID0+IHtcbiAgICAgICAgICAgICAgICBuZXh0Tm9kZUNvbnRleHQgPSBub2RlQ29udGV4dFBhcmFtO1xuICAgICAgICAgICAgICAgIGlmIChjb2x1bW4ucGFnZUZsb2F0TGF5b3V0Q29udGV4dC5pc0ludmFsaWRhdGVkKCkpIHtcbiAgICAgICAgICAgICAgICAgIGxvb3BGcmFtZS5icmVha0xvb3AoKTtcbiAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKGNvbHVtbi5wYWdlQnJlYWtUeXBlKSB7XG4gICAgICAgICAgICAgICAgICBsb29wRnJhbWUuYnJlYWtMb29wKCk7IC8vIExvb3AgZW5kXG4gICAgICAgICAgICAgICAgfSBlbHNlIGlmIChcbiAgICAgICAgICAgICAgICAgIG5leHROb2RlQ29udGV4dCAmJlxuICAgICAgICAgICAgICAgICAgY29sdW1uLnN0b3BCeU92ZXJmbG93KG5leHROb2RlQ29udGV4dClcbiAgICAgICAgICAgICAgICApIHtcbiAgICAgICAgICAgICAgICAgIGxvb3BGcmFtZS5icmVha0xvb3AoKTsgLy8gTG9vcCBlbmRcbiAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKFxuICAgICAgICAgICAgICAgICAgbmV4dE5vZGVDb250ZXh0ICYmXG4gICAgICAgICAgICAgICAgICBuZXh0Tm9kZUNvbnRleHQuYWZ0ZXIgJiZcbiAgICAgICAgICAgICAgICAgIG5leHROb2RlQ29udGV4dC5zb3VyY2VOb2RlID09IGZvcm1hdHRpbmdDb250ZXh0LnJvb3RTb3VyY2VOb2RlXG4gICAgICAgICAgICAgICAgKSB7XG4gICAgICAgICAgICAgICAgICBsb29wRnJhbWUuYnJlYWtMb29wKCk7IC8vIExvb3AgZW5kXG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgIGlmIChwZW5kaW5nKSB7XG4gICAgICAgICAgICAgICAgICAgIC8vIFN5bmMgY2FzZVxuICAgICAgICAgICAgICAgICAgICBwZW5kaW5nID0gZmFsc2U7XG4gICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAvLyBBc3luYyBjYXNlXG4gICAgICAgICAgICAgICAgICAgIGxvb3BGcmFtZS5jb250aW51ZUxvb3AoKTtcbiAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgaWYgKHBlbmRpbmcpIHtcbiAgICAgICAgICAgICAgLy8gQXN5bmMgY2FzZSBhbmQgbG9vcCBlbmRcbiAgICAgICAgICAgICAgcGVuZGluZyA9IGZhbHNlO1xuICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgLy8gU3luYyBjYXNlXG4gICAgICAgICAgbG9vcEZyYW1lLmJyZWFrTG9vcCgpO1xuICAgICAgICB9KVxuICAgICAgICAudGhlbigoKSA9PiB7XG4gICAgICAgICAgZnJhbWUuZmluaXNoKG5leHROb2RlQ29udGV4dCk7XG4gICAgICAgIH0pO1xuICAgIH0pO1xuICAgIHJldHVybiBmcmFtZS5yZXN1bHQoKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBAb3ZlcnJpZGVcbiAgICovXG4gIGZpbmlzaEJyZWFrKFxuICAgIGNvbHVtbjogTGF5b3V0VHlwZS5Db2x1bW4sXG4gICAgbm9kZUNvbnRleHQ6IFZ0cmVlLk5vZGVDb250ZXh0LFxuICAgIGZvcmNlUmVtb3ZlU2VsZjogYm9vbGVhbixcbiAgICBlbmRPZkNvbHVtbjogYm9vbGVhbixcbiAgKTogVGFzay5SZXN1bHQ8Ym9vbGVhbj4gfCBudWxsIHtcbiAgICByZXR1cm4gTGF5b3V0UHJvY2Vzc29yLkJsb2NrTGF5b3V0UHJvY2Vzc29yLnByb3RvdHlwZS5maW5pc2hCcmVhay5jYWxsKFxuICAgICAgdGhpcyxcbiAgICAgIGNvbHVtbixcbiAgICAgIG5vZGVDb250ZXh0LFxuICAgICAgZm9yY2VSZW1vdmVTZWxmLFxuICAgICAgZW5kT2ZDb2x1bW4sXG4gICAgKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBAb3ZlcnJpZGVcbiAgICovXG4gIGNsZWFyT3ZlcmZsb3duVmlld05vZGVzKFxuICAgIGNvbHVtbjogTGF5b3V0VHlwZS5Db2x1bW4sXG4gICAgcGFyZW50Tm9kZUNvbnRleHQ6IFZ0cmVlLk5vZGVDb250ZXh0LFxuICAgIG5vZGVDb250ZXh0OiBWdHJlZS5Ob2RlQ29udGV4dCxcbiAgICByZW1vdmVTZWxmOiBib29sZWFuLFxuICApIHtcbiAgICBMYXlvdXRQcm9jZXNzb3IuQmxvY2tMYXlvdXRQcm9jZXNzb3IucHJvdG90eXBlLmNsZWFyT3ZlcmZsb3duVmlld05vZGVzKFxuICAgICAgY29sdW1uLFxuICAgICAgcGFyZW50Tm9kZUNvbnRleHQsXG4gICAgICBub2RlQ29udGV4dCxcbiAgICAgIHJlbW92ZVNlbGYsXG4gICAgKTtcbiAgfVxufVxuXG5mdW5jdGlvbiBlYWNoQW5jZXN0b3JOb2RlQ29udGV4dChcbiAgbm9kZUNvbnRleHQ6IFZ0cmVlLk5vZGVDb250ZXh0LFxuICBjYWxsYmFjazogKFxuICAgIHAxOiBSZXBldGl0aXZlRWxlbWVudHNPd25lckZvcm1hdHRpbmdDb250ZXh0LFxuICAgIHAyOiBWdHJlZS5Ob2RlQ29udGV4dCxcbiAgKSA9PiBhbnksXG4pOiB2b2lkIHtcbiAgZm9yIChsZXQgbmMgPSBub2RlQ29udGV4dDsgbmM7IG5jID0gbmMucGFyZW50KSB7XG4gICAgY29uc3QgZm9ybWF0dGluZ0NvbnRleHQgPSBuYy5mb3JtYXR0aW5nQ29udGV4dDtcbiAgICBpZiAoXG4gICAgICBmb3JtYXR0aW5nQ29udGV4dCAmJlxuICAgICAgZm9ybWF0dGluZ0NvbnRleHQgaW5zdGFuY2VvZiBSZXBldGl0aXZlRWxlbWVudHNPd25lckZvcm1hdHRpbmdDb250ZXh0ICYmXG4gICAgICAhbmMuYmVsb25nc1RvKGZvcm1hdHRpbmdDb250ZXh0KVxuICAgICkge1xuICAgICAgY2FsbGJhY2soZm9ybWF0dGluZ0NvbnRleHQsIG5jKTtcbiAgICB9XG4gIH1cbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGFwcGVuZEhlYWRlclRvQW5jZXN0b3JzKFxuICBub2RlQ29udGV4dDogVnRyZWUuTm9kZUNvbnRleHQsXG4gIGNvbHVtbjogTGF5b3V0VHlwZS5Db2x1bW4sXG4pOiB2b2lkIHtcbiAgaWYgKCFub2RlQ29udGV4dCkge1xuICAgIHJldHVybjtcbiAgfVxuICBlYWNoQW5jZXN0b3JOb2RlQ29udGV4dChcbiAgICBub2RlQ29udGV4dC5hZnRlciA/IG5vZGVDb250ZXh0LnBhcmVudCA6IG5vZGVDb250ZXh0LFxuICAgIChmb3JtYXR0aW5nQ29udGV4dCwgbmMpID0+IHtcbiAgICAgIGlmIChUYWJsZS5pc0luc3RhbmNlT2ZUYWJsZUZvcm1hdHRpbmdDb250ZXh0KGZvcm1hdHRpbmdDb250ZXh0KSkge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG4gICAgICBjb2x1bW4uZnJhZ21lbnRMYXlvdXRDb25zdHJhaW50cy5wdXNoKFxuICAgICAgICBuZXcgUmVwZXRpdGl2ZUVsZW1lbnRzT3duZXJMYXlvdXRDb25zdHJhaW50KG5jKSxcbiAgICAgICk7XG4gICAgfSxcbiAgKTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGFwcGVuZEhlYWRlcihcbiAgZm9ybWF0dGluZ0NvbnRleHQ6IFJlcGV0aXRpdmVFbGVtZW50LlJlcGV0aXRpdmVFbGVtZW50c093bmVyRm9ybWF0dGluZ0NvbnRleHQsXG4gIG5vZGVDb250ZXh0OiBWdHJlZS5Ob2RlQ29udGV4dCxcbiAgY29sdW1uOiBMYXlvdXRUeXBlLkNvbHVtbixcbik6IFRhc2suUmVzdWx0PGJvb2xlYW4+IHtcbiAgY29uc3QgcmVwZXRpdGl2ZUVsZW1lbnRzID0gZm9ybWF0dGluZ0NvbnRleHQuZ2V0UmVwZXRpdGl2ZUVsZW1lbnRzKCk7XG4gIGlmIChyZXBldGl0aXZlRWxlbWVudHMpIHtcbiAgICBjb25zdCByb290Tm9kZUNvbnRleHQgPSBmb3JtYXR0aW5nQ29udGV4dC5nZXRSb290Tm9kZUNvbnRleHQobm9kZUNvbnRleHQpO1xuICAgIGlmIChyb290Tm9kZUNvbnRleHQudmlld05vZGUpIHtcbiAgICAgIGNvbnN0IGZpcnN0Q2hpbGQgPSByb290Tm9kZUNvbnRleHQudmlld05vZGUuZmlyc3RDaGlsZDtcbiAgICAgIHJldHVybiByZXBldGl0aXZlRWxlbWVudHMuYXBwZW5kSGVhZGVyVG9GcmFnbWVudChcbiAgICAgICAgcm9vdE5vZGVDb250ZXh0LFxuICAgICAgICBmaXJzdENoaWxkLFxuICAgICAgICBjb2x1bW4sXG4gICAgICApO1xuICAgIH1cbiAgfVxuICByZXR1cm4gVGFzay5uZXdSZXN1bHQodHJ1ZSk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBhcHBlbmRGb290ZXIoXG4gIGZvcm1hdHRpbmdDb250ZXh0OiBSZXBldGl0aXZlRWxlbWVudC5SZXBldGl0aXZlRWxlbWVudHNPd25lckZvcm1hdHRpbmdDb250ZXh0LFxuICBub2RlQ29udGV4dDogVnRyZWUuTm9kZUNvbnRleHQsXG4gIGNvbHVtbjogTGF5b3V0VHlwZS5Db2x1bW4sXG4pOiBUYXNrLlJlc3VsdDxib29sZWFuPiB7XG4gIGNvbnN0IHJlcGV0aXRpdmVFbGVtZW50cyA9IGZvcm1hdHRpbmdDb250ZXh0LmdldFJlcGV0aXRpdmVFbGVtZW50cygpO1xuICBpZiAocmVwZXRpdGl2ZUVsZW1lbnRzKSB7XG4gICAgaWYgKCFyZXBldGl0aXZlRWxlbWVudHMuaXNTa2lwRm9vdGVyKSB7XG4gICAgICBjb25zdCByb290Tm9kZUNvbnRleHQgPSBmb3JtYXR0aW5nQ29udGV4dC5nZXRSb290Tm9kZUNvbnRleHQobm9kZUNvbnRleHQpO1xuICAgICAgaWYgKHJvb3ROb2RlQ29udGV4dC52aWV3Tm9kZSkge1xuICAgICAgICByZXR1cm4gcmVwZXRpdGl2ZUVsZW1lbnRzLmFwcGVuZEZvb3RlclRvRnJhZ21lbnQoXG4gICAgICAgICAgcm9vdE5vZGVDb250ZXh0LFxuICAgICAgICAgIG51bGwsXG4gICAgICAgICAgY29sdW1uLFxuICAgICAgICApO1xuICAgICAgfVxuICAgIH1cbiAgfVxuICByZXR1cm4gVGFzay5uZXdSZXN1bHQodHJ1ZSk7XG59XG5cbmZ1bmN0aW9uIGdldFJlcGV0aXRpdmVFbGVtZW50c093bmVyRm9ybWF0dGluZ0NvbnRleHRPck51bGwoXG4gIG5vZGVDb250ZXh0OiBWdHJlZS5Ob2RlQ29udGV4dCxcbik6IFJlcGV0aXRpdmVFbGVtZW50LlJlcGV0aXRpdmVFbGVtZW50c093bmVyRm9ybWF0dGluZ0NvbnRleHQgfCBudWxsIHtcbiAgY29uc3QgZm9ybWF0dGluZ0NvbnRleHQgPSBub2RlQ29udGV4dC5mb3JtYXR0aW5nQ29udGV4dDtcbiAgaWYgKCFmb3JtYXR0aW5nQ29udGV4dCkge1xuICAgIHJldHVybiBudWxsO1xuICB9XG4gIGlmIChcbiAgICAhKGZvcm1hdHRpbmdDb250ZXh0IGluc3RhbmNlb2YgUmVwZXRpdGl2ZUVsZW1lbnRzT3duZXJGb3JtYXR0aW5nQ29udGV4dClcbiAgKSB7XG4gICAgcmV0dXJuIG51bGw7XG4gIH1cbiAgcmV0dXJuIGZvcm1hdHRpbmdDb250ZXh0O1xufVxuXG5mdW5jdGlvbiBnZXRSZXBldGl0aXZlRWxlbWVudHNPd25lckZvcm1hdHRpbmdDb250ZXh0KFxuICBmb3JtYXR0aW5nQ29udGV4dDogVnRyZWUuRm9ybWF0dGluZ0NvbnRleHQsXG4pOiBSZXBldGl0aXZlRWxlbWVudC5SZXBldGl0aXZlRWxlbWVudHNPd25lckZvcm1hdHRpbmdDb250ZXh0IHtcbiAgQXNzZXJ0cy5hc3NlcnQoXG4gICAgZm9ybWF0dGluZ0NvbnRleHQgaW5zdGFuY2VvZiBSZXBldGl0aXZlRWxlbWVudHNPd25lckZvcm1hdHRpbmdDb250ZXh0LFxuICApO1xuICByZXR1cm4gZm9ybWF0dGluZ0NvbnRleHQgYXMgUmVwZXRpdGl2ZUVsZW1lbnQuUmVwZXRpdGl2ZUVsZW1lbnRzT3duZXJGb3JtYXR0aW5nQ29udGV4dDtcbn1cblxuY29uc3QgcmVwZXRpdGl2ZUxheW91dFByb2Nlc3NvciA9IG5ldyBSZXBldGl0aXZlRWxlbWVudHNPd25lckxheW91dFByb2Nlc3NvcigpO1xuXG5QbHVnaW4ucmVnaXN0ZXJIb29rKFxuICBQbHVnaW4uSE9PS1MuUkVTT0xWRV9MQVlPVVRfUFJPQ0VTU09SLFxuICAoZm9ybWF0dGluZ0NvbnRleHQpID0+IHtcbiAgICBpZiAoXG4gICAgICBmb3JtYXR0aW5nQ29udGV4dCBpbnN0YW5jZW9mIFJlcGV0aXRpdmVFbGVtZW50c093bmVyRm9ybWF0dGluZ0NvbnRleHQgJiZcbiAgICAgICFUYWJsZS5pc0luc3RhbmNlT2ZUYWJsZUZvcm1hdHRpbmdDb250ZXh0KGZvcm1hdHRpbmdDb250ZXh0KVxuICAgICkge1xuICAgICAgcmV0dXJuIHJlcGV0aXRpdmVMYXlvdXRQcm9jZXNzb3I7XG4gICAgfVxuICAgIHJldHVybiBudWxsO1xuICB9LFxuKTtcbiIsIi8qKlxuICogQ29weXJpZ2h0IDIwMTYgVHJpbS1tYXJrcyBJbmMuXG4gKiBDb3B5cmlnaHQgMjAxOSBWaXZsaW9zdHlsZSBGb3VuZGF0aW9uXG4gKlxuICogVml2bGlvc3R5bGUuanMgaXMgZnJlZSBzb2Z0d2FyZTogeW91IGNhbiByZWRpc3RyaWJ1dGUgaXQgYW5kL29yIG1vZGlmeVxuICogaXQgdW5kZXIgdGhlIHRlcm1zIG9mIHRoZSBHTlUgQWZmZXJvIEdlbmVyYWwgUHVibGljIExpY2Vuc2UgYXMgcHVibGlzaGVkIGJ5XG4gKiB0aGUgRnJlZSBTb2Z0d2FyZSBGb3VuZGF0aW9uLCBlaXRoZXIgdmVyc2lvbiAzIG9mIHRoZSBMaWNlbnNlLCBvclxuICogKGF0IHlvdXIgb3B0aW9uKSBhbnkgbGF0ZXIgdmVyc2lvbi5cbiAqXG4gKiBWaXZsaW9zdHlsZS5qcyBpcyBkaXN0cmlidXRlZCBpbiB0aGUgaG9wZSB0aGF0IGl0IHdpbGwgYmUgdXNlZnVsLFxuICogYnV0IFdJVEhPVVQgQU5ZIFdBUlJBTlRZOyB3aXRob3V0IGV2ZW4gdGhlIGltcGxpZWQgd2FycmFudHkgb2ZcbiAqIE1FUkNIQU5UQUJJTElUWSBvciBGSVRORVNTIEZPUiBBIFBBUlRJQ1VMQVIgUFVSUE9TRS4gIFNlZSB0aGVcbiAqIEdOVSBBZmZlcm8gR2VuZXJhbCBQdWJsaWMgTGljZW5zZSBmb3IgbW9yZSBkZXRhaWxzLlxuICpcbiAqIFlvdSBzaG91bGQgaGF2ZSByZWNlaXZlZCBhIGNvcHkgb2YgdGhlIEdOVSBBZmZlcm8gR2VuZXJhbCBQdWJsaWMgTGljZW5zZVxuICogYWxvbmcgd2l0aCBWaXZsaW9zdHlsZS5qcy4gIElmIG5vdCwgc2VlIDxodHRwOi8vd3d3LmdudS5vcmcvbGljZW5zZXMvPi5cbiAqXG4gKiBAZmlsZW92ZXJ2aWV3IFRhYmxlIC0gVGFibGUgZm9ybWF0dGluZyBjb250ZXh0IGFuZCBsYXlvdXQuXG4gKi9cbmltcG9ydCAqIGFzIEFzc2VydHMgZnJvbSBcIi4vYXNzZXJ0c1wiO1xuaW1wb3J0ICogYXMgQmFzZSBmcm9tIFwiLi9iYXNlXCI7XG5pbXBvcnQgKiBhcyBCcmVha1Bvc2l0aW9uIGZyb20gXCIuL2JyZWFrLXBvc2l0aW9uXCI7XG5pbXBvcnQgKiBhcyBDc3MgZnJvbSBcIi4vY3NzXCI7XG5pbXBvcnQgKiBhcyBMYXlvdXRIZWxwZXIgZnJvbSBcIi4vbGF5b3V0LWhlbHBlclwiO1xuaW1wb3J0ICogYXMgTGF5b3V0UHJvY2Vzc29yIGZyb20gXCIuL2xheW91dC1wcm9jZXNzb3JcIjtcbmltcG9ydCAqIGFzIExheW91dFJldHJ5ZXJzIGZyb20gXCIuL2xheW91dC1yZXRyeWVyc1wiO1xuaW1wb3J0ICogYXMgTGF5b3V0VXRpbCBmcm9tIFwiLi9sYXlvdXQtdXRpbFwiO1xuaW1wb3J0ICogYXMgUGx1Z2luIGZyb20gXCIuL3BsdWdpblwiO1xuaW1wb3J0ICogYXMgUmVwZXRpdGl2ZUVsZW1lbnRJbXBsIGZyb20gXCIuL3JlcGV0aXRpdmUtZWxlbWVudFwiO1xuaW1wb3J0ICogYXMgVGFzayBmcm9tIFwiLi90YXNrXCI7XG5pbXBvcnQgKiBhcyBWZ2VuIGZyb20gXCIuL3ZnZW5cIjtcbmltcG9ydCAqIGFzIFZ0cmVlSW1wbCBmcm9tIFwiLi92dHJlZVwiO1xuaW1wb3J0ICogYXMgTGF5b3V0IGZyb20gXCIuL2xheW91dFwiO1xuaW1wb3J0IHtcbiAgRm9ybWF0dGluZ0NvbnRleHRUeXBlLFxuICBGcmFnbWVudExheW91dENvbnN0cmFpbnRUeXBlLFxuICBMYXlvdXQgYXMgTGF5b3V0VHlwZSxcbiAgUmVwZXRpdGl2ZUVsZW1lbnQsXG4gIFRhYmxlLFxuICBWdHJlZSxcbn0gZnJvbSBcIi4vdHlwZXNcIjtcblxuZXhwb3J0IGNsYXNzIFRhYmxlUm93IHtcbiAgY2VsbHM6IFRhYmxlQ2VsbFtdID0gW107XG5cbiAgY29uc3RydWN0b3IoXG4gICAgcHVibGljIHJlYWRvbmx5IHJvd0luZGV4OiBudW1iZXIsXG4gICAgcHVibGljIHJlYWRvbmx5IHNvdXJjZU5vZGU6IE5vZGUsXG4gICkge31cblxuICBhZGRDZWxsKGNlbGw6IFRhYmxlQ2VsbCkge1xuICAgIHRoaXMuY2VsbHMucHVzaChjZWxsKTtcbiAgfVxuXG4gIGdldE1pbmltdW1IZWlnaHQoKTogbnVtYmVyIHtcbiAgICByZXR1cm4gTWF0aC5taW4uYXBwbHkoXG4gICAgICBudWxsLFxuICAgICAgdGhpcy5jZWxscy5tYXAoKGMpID0+IGMuaGVpZ2h0KSxcbiAgICApO1xuICB9XG59XG5cbmV4cG9ydCBjbGFzcyBUYWJsZUNlbGwge1xuICB2aWV3RWxlbWVudDogRWxlbWVudCB8IG51bGw7XG4gIGNvbFNwYW46IG51bWJlcjtcbiAgcm93U3BhbjogbnVtYmVyO1xuICBoZWlnaHQ6IG51bWJlciA9IDA7XG4gIGFuY2hvclNsb3Q6IFRhYmxlU2xvdCA9IG51bGw7XG5cbiAgY29uc3RydWN0b3IoXG4gICAgcHVibGljIHJlYWRvbmx5IHJvd0luZGV4OiBudW1iZXIsXG4gICAgcHVibGljIHJlYWRvbmx5IGNvbHVtbkluZGV4OiBudW1iZXIsXG4gICAgdmlld0VsZW1lbnQ6IEVsZW1lbnQsXG4gICkge1xuICAgIHRoaXMudmlld0VsZW1lbnQgPSB2aWV3RWxlbWVudDtcbiAgICB0aGlzLmNvbFNwYW4gPSAodmlld0VsZW1lbnQgYXMgSFRNTFRhYmxlQ2VsbEVsZW1lbnQpLmNvbFNwYW4gfHwgMTtcbiAgICB0aGlzLnJvd1NwYW4gPSAodmlld0VsZW1lbnQgYXMgSFRNTFRhYmxlQ2VsbEVsZW1lbnQpLnJvd1NwYW4gfHwgMTtcbiAgfVxuXG4gIHNldEhlaWdodChoZWlnaHQ6IG51bWJlcikge1xuICAgIHRoaXMuaGVpZ2h0ID0gaGVpZ2h0O1xuICB9XG5cbiAgc2V0QW5jaG9yU2xvdChzbG90OiBUYWJsZVNsb3QpIHtcbiAgICB0aGlzLmFuY2hvclNsb3QgPSBzbG90O1xuICB9XG59XG5cbmV4cG9ydCBjbGFzcyBUYWJsZVNsb3Qge1xuICBjb25zdHJ1Y3RvcihcbiAgICBwdWJsaWMgcmVhZG9ubHkgcm93SW5kZXg6IG51bWJlcixcbiAgICBwdWJsaWMgcmVhZG9ubHkgY29sdW1uSW5kZXg6IG51bWJlcixcbiAgICBwdWJsaWMgcmVhZG9ubHkgY2VsbDogVGFibGVDZWxsLFxuICApIHt9XG59XG5cbmV4cG9ydCBjbGFzcyBUYWJsZUNlbGxGcmFnbWVudCB7XG4gIHBzZXVkb0NvbHVtbjogTGF5b3V0LlBzZXVkb0NvbHVtbjtcbiAgZW1wdHk6IGJvb2xlYW4gPSBmYWxzZTtcblxuICBjb25zdHJ1Y3RvcihcbiAgICBwdWJsaWMgcmVhZG9ubHkgY29sdW1uOiBMYXlvdXQuQ29sdW1uLFxuICAgIHBzZXVkb0NvbHVtbkNvbnRhaW5lcjogRWxlbWVudCxcbiAgICBwdWJsaWMgcmVhZG9ubHkgY2VsbE5vZGVDb250ZXh0OiBWdHJlZS5Ob2RlQ29udGV4dCxcbiAgKSB7XG4gICAgdGhpcy5wc2V1ZG9Db2x1bW4gPSBuZXcgTGF5b3V0LlBzZXVkb0NvbHVtbihcbiAgICAgIGNvbHVtbixcbiAgICAgIHBzZXVkb0NvbHVtbkNvbnRhaW5lcixcbiAgICAgIGNlbGxOb2RlQ29udGV4dCxcbiAgICApO1xuICB9XG5cbiAgZmluZEFjY2VwdGFibGVCcmVha1Bvc2l0aW9uKCk6IExheW91dC5CcmVha1Bvc2l0aW9uQW5kTm9kZUNvbnRleHQge1xuICAgIGNvbnN0IGVsZW1lbnQgPSB0aGlzLmNlbGxOb2RlQ29udGV4dC52aWV3Tm9kZSBhcyBFbGVtZW50O1xuICAgIGNvbnN0IHZlcnRpY2FsQWxpZ24gPSB0aGlzLmNlbGxOb2RlQ29udGV4dC52ZXJ0aWNhbEFsaWduO1xuICAgIGlmICh2ZXJ0aWNhbEFsaWduID09PSBcIm1pZGRsZVwiIHx8IHZlcnRpY2FsQWxpZ24gPT09IFwiYm90dG9tXCIpIHtcbiAgICAgIEJhc2Uuc2V0Q1NTUHJvcGVydHkoZWxlbWVudCwgXCJ2ZXJ0aWNhbC1hbGlnblwiLCBcInRvcFwiKTtcbiAgICB9XG4gICAgY29uc3QgYnAgPSB0aGlzLnBzZXVkb0NvbHVtbi5maW5kQWNjZXB0YWJsZUJyZWFrUG9zaXRpb24odHJ1ZSk7XG4gICAgQmFzZS5zZXRDU1NQcm9wZXJ0eShlbGVtZW50LCBcInZlcnRpY2FsLWFsaWduXCIsIHZlcnRpY2FsQWxpZ24pO1xuICAgIHJldHVybiBicDtcbiAgfVxufVxuXG5leHBvcnQgY2xhc3MgVGFibGVDYXB0aW9uVmlldyB7XG4gIGNvbnN0cnVjdG9yKFxuICAgIHB1YmxpYyByZWFkb25seSB2aWV3Tm9kZTogRWxlbWVudCxcbiAgICBwdWJsaWMgcmVhZG9ubHkgc2lkZTogc3RyaW5nLFxuICApIHt9XG59XG5cbmV4cG9ydCBjbGFzcyBCZXR3ZWVuVGFibGVSb3dCcmVha1Bvc2l0aW9uIGV4dGVuZHMgQnJlYWtQb3NpdGlvbi5FZGdlQnJlYWtQb3NpdGlvbiB7XG4gIHByaXZhdGUgZm9ybWF0dGluZ0NvbnRleHQ6IFRhYmxlRm9ybWF0dGluZ0NvbnRleHQ7XG5cbiAgYWNjZXB0YWJsZUNlbGxCcmVha1Bvc2l0aW9uczogTGF5b3V0LkJyZWFrUG9zaXRpb25BbmROb2RlQ29udGV4dFtdID0gbnVsbDtcbiAgcHJpdmF0ZSByb3dJbmRleDogbnVtYmVyIHwgbnVsbCA9IG51bGw7XG5cbiAgY29uc3RydWN0b3IoXG4gICAgcG9zaXRpb246IFZ0cmVlLk5vZGVDb250ZXh0LFxuICAgIGJyZWFrT25FZGdlOiBzdHJpbmcgfCBudWxsLFxuICAgIG92ZXJmbG93czogYm9vbGVhbixcbiAgICBjb2x1bW5CbG9ja1NpemU6IG51bWJlcixcbiAgKSB7XG4gICAgc3VwZXIocG9zaXRpb24sIGJyZWFrT25FZGdlLCBvdmVyZmxvd3MsIGNvbHVtbkJsb2NrU2l6ZSk7XG4gICAgdGhpcy5mb3JtYXR0aW5nQ29udGV4dCA9IHBvc2l0aW9uLmZvcm1hdHRpbmdDb250ZXh0IGFzIFRhYmxlRm9ybWF0dGluZ0NvbnRleHQ7XG4gIH1cblxuICAvKipcbiAgICogQG92ZXJyaWRlXG4gICAqL1xuICBmaW5kQWNjZXB0YWJsZUJyZWFrKFxuICAgIGNvbHVtbjogTGF5b3V0LkNvbHVtbixcbiAgICBwZW5hbHR5OiBudW1iZXIsXG4gICk6IFZ0cmVlLk5vZGVDb250ZXh0IHtcbiAgICBjb25zdCBicmVha05vZGVDb250ZXh0ID0gc3VwZXIuZmluZEFjY2VwdGFibGVCcmVhayhjb2x1bW4sIHBlbmFsdHkpO1xuICAgIGlmIChwZW5hbHR5IDwgdGhpcy5nZXRNaW5CcmVha1BlbmFsdHkoKSkge1xuICAgICAgcmV0dXJuIG51bGw7XG4gICAgfVxuICAgIGNvbnN0IGFsbENlbGxzQnJlYWthYmxlID0gdGhpcy5nZXRBY2NlcHRhYmxlQ2VsbEJyZWFrUG9zaXRpb25zKCkuZXZlcnkoXG4gICAgICAoYnApID0+ICEhYnAubm9kZUNvbnRleHQsXG4gICAgKTtcbiAgICBpZiAoYWxsQ2VsbHNCcmVha2FibGUpIHtcbiAgICAgIHJldHVybiBicmVha05vZGVDb250ZXh0O1xuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gbnVsbDtcbiAgICB9XG4gIH1cblxuICAvKipcbiAgICogQG92ZXJyaWRlXG4gICAqL1xuICBnZXRNaW5CcmVha1BlbmFsdHkoKTogbnVtYmVyIHtcbiAgICBsZXQgcGVuYWx0eSA9IHN1cGVyLmdldE1pbkJyZWFrUGVuYWx0eSgpO1xuICAgIHRoaXMuZ2V0QWNjZXB0YWJsZUNlbGxCcmVha1Bvc2l0aW9ucygpLmZvckVhY2goKGJwKSA9PiB7XG4gICAgICBwZW5hbHR5ICs9IGJwLmJyZWFrUG9zaXRpb24uZ2V0TWluQnJlYWtQZW5hbHR5KCk7XG4gICAgfSk7XG4gICAgcmV0dXJuIHBlbmFsdHk7XG4gIH1cblxuICBnZXRBY2NlcHRhYmxlQ2VsbEJyZWFrUG9zaXRpb25zKCk6IExheW91dC5CcmVha1Bvc2l0aW9uQW5kTm9kZUNvbnRleHRbXSB7XG4gICAgaWYgKCF0aGlzLmFjY2VwdGFibGVDZWxsQnJlYWtQb3NpdGlvbnMpIHtcbiAgICAgIGNvbnN0IGZvcm1hdHRpbmdDb250ZXh0ID0gdGhpcy5mb3JtYXR0aW5nQ29udGV4dDtcbiAgICAgIGNvbnN0IGNlbGxGcmFnbWVudHMgPSB0aGlzLmdldENlbGxGcmFnbWVudHMoKTtcbiAgICAgIHRoaXMuYWNjZXB0YWJsZUNlbGxCcmVha1Bvc2l0aW9ucyA9IGNlbGxGcmFnbWVudHMubWFwKChjZWxsRnJhZ21lbnQpID0+XG4gICAgICAgIGNlbGxGcmFnbWVudC5maW5kQWNjZXB0YWJsZUJyZWFrUG9zaXRpb24oKSxcbiAgICAgICk7XG4gICAgfVxuICAgIHJldHVybiB0aGlzLmFjY2VwdGFibGVDZWxsQnJlYWtQb3NpdGlvbnM7XG4gIH1cblxuICBwcml2YXRlIGdldFJvd0luZGV4KCk6IG51bWJlciB7XG4gICAgaWYgKHRoaXMucm93SW5kZXggIT0gbnVsbCkge1xuICAgICAgcmV0dXJuIHRoaXMucm93SW5kZXg7XG4gICAgfVxuICAgIHJldHVybiAodGhpcy5yb3dJbmRleCA9IHRoaXMuZm9ybWF0dGluZ0NvbnRleHQuZmluZFJvd0luZGV4QnlTb3VyY2VOb2RlKFxuICAgICAgdGhpcy5wb3NpdGlvbi5zb3VyY2VOb2RlLFxuICAgICkpO1xuICB9XG5cbiAgcHJpdmF0ZSBnZXRDZWxsRnJhZ21lbnRzKCkge1xuICAgIHJldHVybiB0aGlzLmZvcm1hdHRpbmdDb250ZXh0XG4gICAgICAuZ2V0Um93U3Bhbm5pbmdDZWxsc092ZXJmbG93aW5nVGhlUm93KHRoaXMuZ2V0Um93SW5kZXgoKSlcbiAgICAgIC5tYXAoXG4gICAgICAgIHRoaXMuZm9ybWF0dGluZ0NvbnRleHQuZ2V0Q2VsbEZyYWdtZW50T2ZDZWxsLFxuICAgICAgICB0aGlzLmZvcm1hdHRpbmdDb250ZXh0LFxuICAgICAgKTtcbiAgfVxufVxuXG5leHBvcnQgY2xhc3MgSW5zaWRlVGFibGVSb3dCcmVha1Bvc2l0aW9uIGV4dGVuZHMgQnJlYWtQb3NpdGlvbi5BYnN0cmFjdEJyZWFrUG9zaXRpb24ge1xuICBhY2NlcHRhYmxlQ2VsbEJyZWFrUG9zaXRpb25zOiBMYXlvdXQuQnJlYWtQb3NpdGlvbkFuZE5vZGVDb250ZXh0W10gPSBudWxsO1xuXG4gIGNvbnN0cnVjdG9yKFxuICAgIHB1YmxpYyByZWFkb25seSByb3dJbmRleDogbnVtYmVyLFxuICAgIHB1YmxpYyByZWFkb25seSBiZWZvcmVOb2RlQ29udGV4dDogVnRyZWUuTm9kZUNvbnRleHQsXG4gICAgcHVibGljIHJlYWRvbmx5IGZvcm1hdHRpbmdDb250ZXh0OiBUYWJsZUZvcm1hdHRpbmdDb250ZXh0LFxuICApIHtcbiAgICBzdXBlcigpO1xuICB9XG5cbiAgLyoqXG4gICAqIEBvdmVycmlkZVxuICAgKi9cbiAgZmluZEFjY2VwdGFibGVCcmVhayhcbiAgICBjb2x1bW46IExheW91dC5Db2x1bW4sXG4gICAgcGVuYWx0eTogbnVtYmVyLFxuICApOiBWdHJlZS5Ob2RlQ29udGV4dCB7XG4gICAgaWYgKHBlbmFsdHkgPCB0aGlzLmdldE1pbkJyZWFrUGVuYWx0eSgpKSB7XG4gICAgICByZXR1cm4gbnVsbDtcbiAgICB9XG4gICAgY29uc3QgY2VsbEZyYWdtZW50cyA9IHRoaXMuZ2V0Q2VsbEZyYWdtZW50cygpO1xuICAgIGNvbnN0IGFjY2VwdGFibGVDZWxsQnJlYWtQb3NpdGlvbnMgPSB0aGlzLmdldEFjY2VwdGFibGVDZWxsQnJlYWtQb3NpdGlvbnMoKTtcbiAgICBjb25zdCBhbGxDZWxsc0JyZWFrYWJsZSA9XG4gICAgICBhY2NlcHRhYmxlQ2VsbEJyZWFrUG9zaXRpb25zLmV2ZXJ5KChicCkgPT4gISFicC5ub2RlQ29udGV4dCkgJiZcbiAgICAgIGFjY2VwdGFibGVDZWxsQnJlYWtQb3NpdGlvbnMuc29tZSgoYnAsIGluZGV4KSA9PiB7XG4gICAgICAgIGNvbnN0IHBzZXVkb0NvbHVtbiA9IGNlbGxGcmFnbWVudHNbaW5kZXhdLnBzZXVkb0NvbHVtbjtcbiAgICAgICAgY29uc3Qgbm9kZUNvbnRleHQgPSBicC5ub2RlQ29udGV4dDtcbiAgICAgICAgcmV0dXJuIChcbiAgICAgICAgICAhcHNldWRvQ29sdW1uLmlzU3RhcnROb2RlQ29udGV4dChub2RlQ29udGV4dCkgJiZcbiAgICAgICAgICAhcHNldWRvQ29sdW1uLmlzTGFzdEFmdGVyTm9kZUNvbnRleHQobm9kZUNvbnRleHQpXG4gICAgICAgICk7XG4gICAgICB9KTtcbiAgICB0aGlzLmJlZm9yZU5vZGVDb250ZXh0Lm92ZXJmbG93ID0gYWNjZXB0YWJsZUNlbGxCcmVha1Bvc2l0aW9ucy5zb21lKFxuICAgICAgKGJwKSA9PiBicC5ub2RlQ29udGV4dCAmJiBicC5ub2RlQ29udGV4dC5vdmVyZmxvdyxcbiAgICApO1xuICAgIGlmIChhbGxDZWxsc0JyZWFrYWJsZSkge1xuICAgICAgcmV0dXJuIHRoaXMuYmVmb3JlTm9kZUNvbnRleHQ7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiBudWxsO1xuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAgKiBAb3ZlcnJpZGVcbiAgICovXG4gIGdldE1pbkJyZWFrUGVuYWx0eSgpOiBudW1iZXIge1xuICAgIGNvbnN0IGZvcm1hdHRpbmdDb250ZXh0ID0gdGhpcy5mb3JtYXR0aW5nQ29udGV4dDtcbiAgICBjb25zdCByb3cgPSBmb3JtYXR0aW5nQ29udGV4dC5nZXRSb3dCeUluZGV4KHRoaXMucm93SW5kZXgpO1xuICAgIGxldCBwZW5hbHR5ID0gMDtcbiAgICBpZiAoIWZvcm1hdHRpbmdDb250ZXh0LmlzRnJlZWx5RnJhZ21lbnRhYmxlUm93KHJvdykpIHtcbiAgICAgIHBlbmFsdHkgKz0gMTA7XG4gICAgfVxuICAgIHRoaXMuZ2V0QWNjZXB0YWJsZUNlbGxCcmVha1Bvc2l0aW9ucygpLmZvckVhY2goKGJwKSA9PiB7XG4gICAgICBwZW5hbHR5ICs9IGJwLmJyZWFrUG9zaXRpb24uZ2V0TWluQnJlYWtQZW5hbHR5KCk7XG4gICAgfSk7XG4gICAgcmV0dXJuIHBlbmFsdHk7XG4gIH1cblxuICBnZXRBY2NlcHRhYmxlQ2VsbEJyZWFrUG9zaXRpb25zKCk6IExheW91dC5CcmVha1Bvc2l0aW9uQW5kTm9kZUNvbnRleHRbXSB7XG4gICAgaWYgKCF0aGlzLmFjY2VwdGFibGVDZWxsQnJlYWtQb3NpdGlvbnMpIHtcbiAgICAgIGNvbnN0IGNlbGxGcmFnbWVudHMgPSB0aGlzLmdldENlbGxGcmFnbWVudHMoKTtcbiAgICAgIHRoaXMuYWNjZXB0YWJsZUNlbGxCcmVha1Bvc2l0aW9ucyA9IGNlbGxGcmFnbWVudHMubWFwKChjZWxsRnJhZ21lbnQpID0+XG4gICAgICAgIGNlbGxGcmFnbWVudC5maW5kQWNjZXB0YWJsZUJyZWFrUG9zaXRpb24oKSxcbiAgICAgICk7XG4gICAgfVxuICAgIHJldHVybiB0aGlzLmFjY2VwdGFibGVDZWxsQnJlYWtQb3NpdGlvbnM7XG4gIH1cblxuICBwcml2YXRlIGdldENlbGxGcmFnbWVudHMoKSB7XG4gICAgcmV0dXJuIHRoaXMuZm9ybWF0dGluZ0NvbnRleHRcbiAgICAgIC5nZXRDZWxsc0ZhbGxpbmdPblJvdyh0aGlzLnJvd0luZGV4KVxuICAgICAgLm1hcChcbiAgICAgICAgdGhpcy5mb3JtYXR0aW5nQ29udGV4dC5nZXRDZWxsRnJhZ21lbnRPZkNlbGwsXG4gICAgICAgIHRoaXMuZm9ybWF0dGluZ0NvbnRleHQsXG4gICAgICApO1xuICB9XG59XG5cbmV4cG9ydCB0eXBlIEJyb2tlblRhYmxlQ2VsbFBvc2l0aW9uID0ge1xuICBjZWxsTm9kZVBvc2l0aW9uOiBWdHJlZS5Ob2RlUG9zaXRpb247XG4gIGJyZWFrQ2h1bmtQb3NpdGlvbjogVnRyZWUuQ2h1bmtQb3NpdGlvbjtcbiAgY2VsbDogVGFibGVDZWxsO1xufTtcblxuLyoqXG4gKiBAcGFyYW0gdGFibGVTb3VyY2VOb2RlIFNvdXJjZSBub2RlIG9mIHRoZSB0YWJsZVxuICovXG5leHBvcnQgY2xhc3MgVGFibGVGb3JtYXR0aW5nQ29udGV4dFxuICBleHRlbmRzIFJlcGV0aXRpdmVFbGVtZW50SW1wbC5SZXBldGl0aXZlRWxlbWVudHNPd25lckZvcm1hdHRpbmdDb250ZXh0XG4gIGltcGxlbWVudHMgVGFibGUuVGFibGVGb3JtYXR0aW5nQ29udGV4dCB7XG4gIGZvcm1hdHRpbmdDb250ZXh0VHlwZTogRm9ybWF0dGluZ0NvbnRleHRUeXBlID0gXCJUYWJsZVwiO1xuICB2ZXJ0aWNhbDogYm9vbGVhbiA9IGZhbHNlO1xuICBjb2x1bW5Db3VudDogbnVtYmVyID0gLTE7XG4gIHRhYmxlV2lkdGg6IG51bWJlciA9IDA7XG4gIGNhcHRpb25zOiBUYWJsZUNhcHRpb25WaWV3W10gPSBbXTtcbiAgY29sR3JvdXBzOiBEb2N1bWVudEZyYWdtZW50IHwgbnVsbCA9IG51bGw7XG4gIGNvbFdpZHRoczogbnVtYmVyW10gfCBudWxsID0gbnVsbDtcbiAgaW5saW5lQm9yZGVyU3BhY2luZzogbnVtYmVyID0gMDtcbiAgcm93czogVGFibGVSb3dbXSA9IFtdO1xuICBzbG90czogVGFibGVTbG90W11bXSA9IFtdO1xuICBjZWxsRnJhZ21lbnRzOiBUYWJsZUNlbGxGcmFnbWVudFtdW10gPSBbXTtcbiAgbGFzdFJvd1ZpZXdOb2RlOiBFbGVtZW50IHwgbnVsbCA9IG51bGw7XG4gIGNlbGxCcmVha1Bvc2l0aW9uczogQnJva2VuVGFibGVDZWxsUG9zaXRpb25bXSA9IFtdO1xuICByZXBldGl0aXZlRWxlbWVudHM6IFJlcGV0aXRpdmVFbGVtZW50LlJlcGV0aXRpdmVFbGVtZW50cyB8IG51bGwgPSBudWxsO1xuXG4gIGNvbnN0cnVjdG9yKFxuICAgIHBhcmVudDogVnRyZWUuRm9ybWF0dGluZ0NvbnRleHQsXG4gICAgcHVibGljIHJlYWRvbmx5IHRhYmxlU291cmNlTm9kZTogRWxlbWVudCxcbiAgKSB7XG4gICAgc3VwZXIocGFyZW50LCB0YWJsZVNvdXJjZU5vZGUpO1xuICB9XG5cbiAgLyoqXG4gICAqIEBvdmVycmlkZVxuICAgKi9cbiAgZ2V0TmFtZSgpOiBzdHJpbmcge1xuICAgIHJldHVybiBcIlRhYmxlIGZvcm1hdHRpbmcgY29udGV4dCAoVGFibGUuVGFibGVGb3JtYXR0aW5nQ29udGV4dClcIjtcbiAgfVxuXG4gIC8qKlxuICAgKiBAb3ZlcnJpZGVcbiAgICovXG4gIGlzRmlyc3RUaW1lKG5vZGVDb250ZXh0OiBWdHJlZS5Ob2RlQ29udGV4dCwgZmlyc3RUaW1lOiBib29sZWFuKTogYm9vbGVhbiB7XG4gICAgaWYgKCFmaXJzdFRpbWUpIHtcbiAgICAgIHJldHVybiBmaXJzdFRpbWU7XG4gICAgfVxuICAgIHN3aXRjaCAobm9kZUNvbnRleHQuZGlzcGxheSkge1xuICAgICAgY2FzZSBcInRhYmxlLXJvd1wiOlxuICAgICAgICByZXR1cm4gdGhpcy5jZWxsQnJlYWtQb3NpdGlvbnMubGVuZ3RoID09PSAwO1xuICAgICAgY2FzZSBcInRhYmxlLWNlbGxcIjpcbiAgICAgICAgcmV0dXJuICF0aGlzLmNlbGxCcmVha1Bvc2l0aW9ucy5zb21lKFxuICAgICAgICAgIChwKSA9PiBwLmNlbGxOb2RlUG9zaXRpb24uc3RlcHNbMF0ubm9kZSA9PT0gbm9kZUNvbnRleHQuc291cmNlTm9kZSxcbiAgICAgICAgKTtcbiAgICAgIGRlZmF1bHQ6XG4gICAgICAgIHJldHVybiBmaXJzdFRpbWU7XG4gICAgfVxuICB9XG5cbiAgLyoqXG4gICAqIEBvdmVycmlkZVxuICAgKi9cbiAgZ2V0UGFyZW50KCk6IFZ0cmVlLkZvcm1hdHRpbmdDb250ZXh0IHtcbiAgICByZXR1cm4gdGhpcy5wYXJlbnQ7XG4gIH1cblxuICBmaW5pc2hGcmFnbWVudCgpIHtcbiAgICB0aGlzLmNlbGxGcmFnbWVudHMgPSBbXTtcbiAgfVxuXG4gIGFkZFJvdyhyb3dJbmRleDogbnVtYmVyLCByb3c6IFRhYmxlUm93KSB7XG4gICAgdGhpcy5yb3dzW3Jvd0luZGV4XSA9IHJvdztcbiAgfVxuXG4gIGdldFJvd1Nsb3RzKHJvd0luZGV4OiBudW1iZXIpOiBUYWJsZVNsb3RbXSB7XG4gICAgbGV0IHJvd1Nsb3RzID0gdGhpcy5zbG90c1tyb3dJbmRleF07XG4gICAgaWYgKCFyb3dTbG90cykge1xuICAgICAgcm93U2xvdHMgPSB0aGlzLnNsb3RzW3Jvd0luZGV4XSA9IFtdO1xuICAgIH1cbiAgICByZXR1cm4gcm93U2xvdHM7XG4gIH1cblxuICBhZGRDZWxsKHJvd0luZGV4OiBudW1iZXIsIGNlbGw6IFRhYmxlQ2VsbCkge1xuICAgIGxldCByb3cgPSB0aGlzLnJvd3Nbcm93SW5kZXhdO1xuICAgIGlmICghcm93KSB7XG4gICAgICB0aGlzLmFkZFJvdyhyb3dJbmRleCwgbmV3IFRhYmxlUm93KHJvd0luZGV4LCBudWxsKSk7XG4gICAgICByb3cgPSB0aGlzLnJvd3Nbcm93SW5kZXhdO1xuICAgIH1cbiAgICBBc3NlcnRzLmFzc2VydChyb3cpO1xuICAgIHJvdy5hZGRDZWxsKGNlbGwpO1xuICAgIGNvbnN0IHJvd1VwcGVyID0gcm93SW5kZXggKyBjZWxsLnJvd1NwYW47XG4gICAgbGV0IHJvd1Nsb3RzID0gdGhpcy5nZXRSb3dTbG90cyhyb3dJbmRleCk7XG4gICAgbGV0IHN0YXJ0Q29sSW5kZXggPSAwO1xuICAgIHdoaWxlIChyb3dTbG90c1tzdGFydENvbEluZGV4XSkge1xuICAgICAgc3RhcnRDb2xJbmRleCsrO1xuICAgIH1cbiAgICBmb3IgKDsgcm93SW5kZXggPCByb3dVcHBlcjsgcm93SW5kZXgrKykge1xuICAgICAgcm93U2xvdHMgPSB0aGlzLmdldFJvd1Nsb3RzKHJvd0luZGV4KTtcbiAgICAgIGZvciAobGV0IGkgPSBzdGFydENvbEluZGV4OyBpIDwgc3RhcnRDb2xJbmRleCArIGNlbGwuY29sU3BhbjsgaSsrKSB7XG4gICAgICAgIGNvbnN0IHNsb3QgPSAocm93U2xvdHNbaV0gPSBuZXcgVGFibGVTbG90KHJvd0luZGV4LCBpLCBjZWxsKSk7XG4gICAgICAgIGlmICghY2VsbC5hbmNob3JTbG90KSB7XG4gICAgICAgICAgY2VsbC5zZXRBbmNob3JTbG90KHNsb3QpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgZ2V0Um93QnlJbmRleChpbmRleDogbnVtYmVyKTogVGFibGVSb3cge1xuICAgIGNvbnN0IHJvdyA9IHRoaXMucm93c1tpbmRleF07XG4gICAgQXNzZXJ0cy5hc3NlcnQocm93KTtcbiAgICByZXR1cm4gcm93O1xuICB9XG5cbiAgZmluZFJvd0luZGV4QnlTb3VyY2VOb2RlKHNvdXJjZU5vZGU6IE5vZGUpOiBudW1iZXIge1xuICAgIHJldHVybiB0aGlzLnJvd3MuZmluZEluZGV4KChyb3cpID0+IHNvdXJjZU5vZGUgPT09IHJvdy5zb3VyY2VOb2RlKTtcbiAgfVxuXG4gIGFkZENlbGxGcmFnbWVudChcbiAgICByb3dJbmRleDogbnVtYmVyLFxuICAgIGNvbHVtbkluZGV4OiBudW1iZXIsXG4gICAgY2VsbEZyYWdtZW50OiBUYWJsZUNlbGxGcmFnbWVudCxcbiAgKSB7XG4gICAgbGV0IGxpc3QgPSB0aGlzLmNlbGxGcmFnbWVudHNbcm93SW5kZXhdO1xuICAgIGlmICghbGlzdCkge1xuICAgICAgbGlzdCA9IHRoaXMuY2VsbEZyYWdtZW50c1tyb3dJbmRleF0gPSBbXTtcbiAgICB9XG4gICAgbGlzdFtjb2x1bW5JbmRleF0gPSBjZWxsRnJhZ21lbnQ7XG4gIH1cblxuICBnZXRDZWxsc0ZhbGxpbmdPblJvdyhyb3dJbmRleDogbnVtYmVyKTogVGFibGVDZWxsW10ge1xuICAgIGNvbnN0IHJvd1Nsb3RzID0gdGhpcy5nZXRSb3dTbG90cyhyb3dJbmRleCk7XG4gICAgcmV0dXJuIHJvd1Nsb3RzLnJlZHVjZSgodW5pcXVlQ2VsbHMsIHNsb3QpID0+IHtcbiAgICAgIGlmIChzbG90LmNlbGwgIT09IHVuaXF1ZUNlbGxzW3VuaXF1ZUNlbGxzLmxlbmd0aCAtIDFdKSB7XG4gICAgICAgIHJldHVybiB1bmlxdWVDZWxscy5jb25jYXQoc2xvdC5jZWxsKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHJldHVybiB1bmlxdWVDZWxscztcbiAgICAgIH1cbiAgICB9LCBbXSk7XG4gIH1cblxuICBnZXRSb3dTcGFubmluZ0NlbGxzT3ZlcmZsb3dpbmdUaGVSb3cocm93SW5kZXg6IG51bWJlcik6IFRhYmxlQ2VsbFtdIHtcbiAgICByZXR1cm4gdGhpcy5nZXRDZWxsc0ZhbGxpbmdPblJvdyhyb3dJbmRleCkuZmlsdGVyKFxuICAgICAgKGNlbGwpID0+IGNlbGwucm93SW5kZXggKyBjZWxsLnJvd1NwYW4gLSAxID4gcm93SW5kZXgsXG4gICAgKTtcbiAgfVxuXG4gIGdldENlbGxGcmFnbWVudE9mQ2VsbChjZWxsOiBUYWJsZUNlbGwpOiBUYWJsZUNlbGxGcmFnbWVudCB7XG4gICAgcmV0dXJuIChcbiAgICAgIHRoaXMuY2VsbEZyYWdtZW50c1tjZWxsLnJvd0luZGV4XSAmJlxuICAgICAgdGhpcy5jZWxsRnJhZ21lbnRzW2NlbGwucm93SW5kZXhdW2NlbGwuY29sdW1uSW5kZXhdXG4gICAgKTtcbiAgfVxuXG4gIGlzRnJlZWx5RnJhZ21lbnRhYmxlUm93KHJvdzogVGFibGVSb3cpOiBib29sZWFuIHtcbiAgICByZXR1cm4gcm93LmdldE1pbmltdW1IZWlnaHQoKSA+IHRoaXMudGFibGVXaWR0aCAvIDI7XG4gIH1cblxuICBnZXRDb2x1bW5Db3VudCgpOiBudW1iZXIge1xuICAgIGlmICh0aGlzLmNvbHVtbkNvdW50IDwgMCkge1xuICAgICAgdGhpcy5jb2x1bW5Db3VudCA9IE1hdGgubWF4LmFwcGx5KFxuICAgICAgICBudWxsLFxuICAgICAgICB0aGlzLnJvd3MubWFwKChyb3cpID0+XG4gICAgICAgICAgcm93LmNlbGxzLnJlZHVjZSgoc3VtLCBjKSA9PiBzdW0gKyBjLmNvbFNwYW4sIDApLFxuICAgICAgICApLFxuICAgICAgKTtcbiAgICB9XG4gICAgcmV0dXJuIHRoaXMuY29sdW1uQ291bnQ7XG4gIH1cblxuICB1cGRhdGVDZWxsU2l6ZXMoY2xpZW50TGF5b3V0OiBWdHJlZS5DbGllbnRMYXlvdXQpIHtcbiAgICB0aGlzLnJvd3MuZm9yRWFjaCgocm93KSA9PiB7XG4gICAgICByb3cuY2VsbHMuZm9yRWFjaCgoY2VsbCkgPT4ge1xuICAgICAgICBjb25zdCByZWN0ID0gY2xpZW50TGF5b3V0LmdldEVsZW1lbnRDbGllbnRSZWN0KFxuICAgICAgICAgIGNlbGwudmlld0VsZW1lbnQgYXMgRWxlbWVudCxcbiAgICAgICAgKTtcbiAgICAgICAgY2VsbC52aWV3RWxlbWVudCA9IG51bGw7XG4gICAgICAgIGNlbGwuc2V0SGVpZ2h0KHRoaXMudmVydGljYWwgPyByZWN0W1wid2lkdGhcIl0gOiByZWN0W1wiaGVpZ2h0XCJdKTtcbiAgICAgIH0pO1xuICAgIH0pO1xuICB9XG5cbiAgLyoqXG4gICAqIEByZXR1cm4gcG9zaXRpb25cbiAgICovXG4gIGZpbmRDZWxsRnJvbUNvbHVtbihcbiAgICBjb2x1bW46IExheW91dC5Db2x1bW4sXG4gICk6IHsgcm93SW5kZXg6IG51bWJlcjsgY29sdW1uSW5kZXg6IG51bWJlciB9IHwgbnVsbCB7XG4gICAgaWYgKCFjb2x1bW4pIHtcbiAgICAgIHJldHVybiBudWxsO1xuICAgIH1cbiAgICBsZXQgdGFibGVDZWxsOiBUYWJsZUNlbGwgPSBudWxsO1xuICAgIGxldCByb3cgPSAwO1xuICAgIGxldCBjb2wgPSAwO1xuICAgIGxvb3A6IGZvciAocm93ID0gMDsgcm93IDwgdGhpcy5jZWxsRnJhZ21lbnRzLmxlbmd0aDsgcm93KyspIHtcbiAgICAgIGlmICghdGhpcy5jZWxsRnJhZ21lbnRzW3Jvd10pIHtcbiAgICAgICAgY29udGludWU7XG4gICAgICB9XG4gICAgICBmb3IgKGNvbCA9IDA7IGNvbCA8IHRoaXMuY2VsbEZyYWdtZW50c1tyb3ddLmxlbmd0aDsgY29sKyspIHtcbiAgICAgICAgaWYgKCF0aGlzLmNlbGxGcmFnbWVudHNbcm93XVtjb2xdKSB7XG4gICAgICAgICAgY29udGludWU7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGNvbHVtbiA9PT0gdGhpcy5jZWxsRnJhZ21lbnRzW3Jvd11bY29sXS5wc2V1ZG9Db2x1bW4uZ2V0Q29sdW1uKCkpIHtcbiAgICAgICAgICB0YWJsZUNlbGwgPSB0aGlzLnJvd3Nbcm93XS5jZWxsc1tjb2xdO1xuICAgICAgICAgIGJyZWFrIGxvb3A7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gICAgaWYgKCF0YWJsZUNlbGwpIHtcbiAgICAgIHJldHVybiBudWxsO1xuICAgIH1cbiAgICBmb3IgKDsgcm93IDwgdGhpcy5zbG90cy5sZW5ndGg7IHJvdysrKSB7XG4gICAgICBmb3IgKDsgY29sIDwgdGhpcy5zbG90c1tyb3ddLmxlbmd0aDsgY29sKyspIHtcbiAgICAgICAgY29uc3Qgc2xvdCA9IHRoaXMuc2xvdHNbcm93XVtjb2xdO1xuICAgICAgICBpZiAoc2xvdC5jZWxsID09PSB0YWJsZUNlbGwpIHtcbiAgICAgICAgICByZXR1cm4geyByb3dJbmRleDogc2xvdC5yb3dJbmRleCwgY29sdW1uSW5kZXg6IHNsb3QuY29sdW1uSW5kZXggfTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gbnVsbDtcbiAgfVxuXG4gIGNvbGxlY3RFbGVtZW50c09mZnNldE9mVXBwZXJDZWxscyhcbiAgICBwb3NpdGlvbjogeyByb3dJbmRleDogbnVtYmVyOyBjb2x1bW5JbmRleDogbnVtYmVyIH0gfCBudWxsLFxuICApOiBSZXBldGl0aXZlRWxlbWVudC5FbGVtZW50c09mZnNldFtdIHtcbiAgICBjb25zdCBjb2xsZWN0ZWQgPSBbXTtcbiAgICByZXR1cm4gdGhpcy5zbG90cy5yZWR1Y2UoKHJlcGV0aXRpdmVFbGVtZW50cywgcm93LCBpbmRleCkgPT4ge1xuICAgICAgaWYgKGluZGV4ID49IHBvc2l0aW9uLnJvd0luZGV4KSB7XG4gICAgICAgIHJldHVybiByZXBldGl0aXZlRWxlbWVudHM7XG4gICAgICB9XG4gICAgICBjb25zdCBjZWxsRnJhZ21lbnQgPVxuICAgICAgICByb3dbcG9zaXRpb24uY29sdW1uSW5kZXhdICYmXG4gICAgICAgIHRoaXMuZ2V0Q2VsbEZyYWdtZW50T2ZDZWxsKHJvd1twb3NpdGlvbi5jb2x1bW5JbmRleF0uY2VsbCk7XG4gICAgICBpZiAoIWNlbGxGcmFnbWVudCB8fCBjb2xsZWN0ZWQuaW5jbHVkZXMoY2VsbEZyYWdtZW50KSkge1xuICAgICAgICByZXR1cm4gcmVwZXRpdGl2ZUVsZW1lbnRzO1xuICAgICAgfVxuICAgICAgdGhpcy5jb2xsZWN0RWxlbWVudHNPZmZzZXRGcm9tQ29sdW1uKFxuICAgICAgICBjZWxsRnJhZ21lbnQucHNldWRvQ29sdW1uLmdldENvbHVtbigpLFxuICAgICAgICByZXBldGl0aXZlRWxlbWVudHMsXG4gICAgICApO1xuICAgICAgY29sbGVjdGVkLnB1c2goY2VsbEZyYWdtZW50KTtcbiAgICAgIHJldHVybiByZXBldGl0aXZlRWxlbWVudHM7XG4gICAgfSwgW10gYXMgUmVwZXRpdGl2ZUVsZW1lbnQuRWxlbWVudHNPZmZzZXRbXSk7XG4gIH1cblxuICBjb2xsZWN0RWxlbWVudHNPZmZzZXRPZkhpZ2hlc3RDb2x1bW4oKTogUmVwZXRpdGl2ZUVsZW1lbnQuRWxlbWVudHNPZmZzZXRbXSB7XG4gICAgY29uc3QgZWxlbWVudHNJbkNvbHVtbiA9IFtdO1xuICAgIHRoaXMucm93cy5mb3JFYWNoKChyb3cpID0+IHtcbiAgICAgIHJvdy5jZWxscy5mb3JFYWNoKChjZWxsLCBpbmRleCkgPT4ge1xuICAgICAgICBpZiAoIWVsZW1lbnRzSW5Db2x1bW5baW5kZXhdKSB7XG4gICAgICAgICAgZWxlbWVudHNJbkNvbHVtbltpbmRleF0gPSB7IGNvbGxlY3RlZDogW10sIGVsZW1lbnRzOiBbXSB9O1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IHN0YXRlID0gZWxlbWVudHNJbkNvbHVtbltpbmRleF07XG4gICAgICAgIGNvbnN0IGNlbGxGcmFnbWVudCA9IHRoaXMuZ2V0Q2VsbEZyYWdtZW50T2ZDZWxsKGNlbGwpO1xuICAgICAgICBpZiAoIWNlbGxGcmFnbWVudCB8fCBzdGF0ZS5jb2xsZWN0ZWQuaW5jbHVkZXMoY2VsbEZyYWdtZW50KSkge1xuICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLmNvbGxlY3RFbGVtZW50c09mZnNldEZyb21Db2x1bW4oXG4gICAgICAgICAgY2VsbEZyYWdtZW50LnBzZXVkb0NvbHVtbi5nZXRDb2x1bW4oKSxcbiAgICAgICAgICBzdGF0ZS5lbGVtZW50cyxcbiAgICAgICAgKTtcbiAgICAgICAgc3RhdGUuY29sbGVjdGVkLnB1c2goY2VsbEZyYWdtZW50KTtcbiAgICAgIH0pO1xuICAgIH0pO1xuICAgIHJldHVybiBbXG4gICAgICBuZXcgRWxlbWVudHNPZmZzZXRPZlRhYmxlQ2VsbChcbiAgICAgICAgZWxlbWVudHNJbkNvbHVtbi5tYXAoKGVudHJ5KSA9PiBlbnRyeS5lbGVtZW50cyksXG4gICAgICApLFxuICAgIF07XG4gIH1cblxuICBwcml2YXRlIGNvbGxlY3RFbGVtZW50c09mZnNldEZyb21Db2x1bW4oXG4gICAgY29sdW1uOiBMYXlvdXRUeXBlLkNvbHVtbixcbiAgICByZXBldGl0aXZlRWxlbWVudHM6IFJlcGV0aXRpdmVFbGVtZW50LkVsZW1lbnRzT2Zmc2V0W10sXG4gICkge1xuICAgIGNvbHVtbi5mcmFnbWVudExheW91dENvbnN0cmFpbnRzLmZvckVhY2goKGNvbnN0cmFpbnQpID0+IHtcbiAgICAgIGlmIChcbiAgICAgICAgUmVwZXRpdGl2ZUVsZW1lbnQuaXNJbnN0YW5jZU9mUmVwZXRpdGl2ZUVsZW1lbnRzT3duZXJMYXlvdXRDb25zdHJhaW50KFxuICAgICAgICAgIGNvbnN0cmFpbnQsXG4gICAgICAgIClcbiAgICAgICkge1xuICAgICAgICBjb25zdCByZXBldGl0aXZlRWxlbWVudCA9IGNvbnN0cmFpbnQuZ2V0UmVwZXRpdGl2ZUVsZW1lbnRzKCk7XG4gICAgICAgIHJlcGV0aXRpdmVFbGVtZW50cy5wdXNoKHJlcGV0aXRpdmVFbGVtZW50KTtcbiAgICAgIH1cbiAgICAgIGlmIChUYWJsZS5pc0luc3RhbmNlT2ZUYWJsZVJvd0xheW91dENvbnN0cmFpbnQoY29uc3RyYWludCkpIHtcbiAgICAgICAgY29uc3RyYWludFxuICAgICAgICAgIC5nZXRFbGVtZW50c09mZnNldHNGb3JUYWJsZUNlbGwobnVsbClcbiAgICAgICAgICAuZm9yRWFjaCgocmVwZXRpdGl2ZUVsZW1lbnQpID0+IHtcbiAgICAgICAgICAgIHJlcGV0aXRpdmVFbGVtZW50cy5wdXNoKHJlcGV0aXRpdmVFbGVtZW50KTtcbiAgICAgICAgICB9KTtcbiAgICAgIH1cbiAgICB9KTtcbiAgfVxuXG4gIC8qKiBAb3ZlcnJpZGUgKi9cbiAgc2F2ZVN0YXRlKCk6IGFueSB7XG4gICAgcmV0dXJuIFtdLmNvbmNhdCh0aGlzLmNlbGxCcmVha1Bvc2l0aW9ucyk7XG4gIH1cblxuICAvKiogQG92ZXJyaWRlICovXG4gIHJlc3RvcmVTdGF0ZShzdGF0ZTogYW55KSB7XG4gICAgdGhpcy5jZWxsQnJlYWtQb3NpdGlvbnMgPSBzdGF0ZSBhcyBCcm9rZW5UYWJsZUNlbGxQb3NpdGlvbltdO1xuICB9XG59XG5cbmV4cG9ydCBjbGFzcyBFbGVtZW50c09mZnNldE9mVGFibGVDZWxsXG4gIGltcGxlbWVudHMgUmVwZXRpdGl2ZUVsZW1lbnQuRWxlbWVudHNPZmZzZXQge1xuICBjb25zdHJ1Y3RvcihcbiAgICBwdWJsaWMgcmVhZG9ubHkgcmVwZWF0aXRpdmVFbGVtZW50c0luQ29sdW1uczogUmVwZXRpdGl2ZUVsZW1lbnQuRWxlbWVudHNPZmZzZXRbXVtdLFxuICApIHt9XG5cbiAgLyoqIEBvdmVycmlkZSAqL1xuICBjYWxjdWxhdGVPZmZzZXQobm9kZUNvbnRleHQ6IFZ0cmVlLk5vZGVDb250ZXh0KTogbnVtYmVyIHtcbiAgICByZXR1cm4gdGhpcy5jYWxjdWxhdGVNYXhPZmZzZXRPZkNvbHVtbihcbiAgICAgIG5vZGVDb250ZXh0LFxuICAgICAgKG9mZnNldHMpID0+IG9mZnNldHMuY3VycmVudCxcbiAgICApO1xuICB9XG5cbiAgLyoqIEBvdmVycmlkZSAqL1xuICBjYWxjdWxhdGVNaW5pbXVtT2Zmc2V0KG5vZGVDb250ZXh0OiBWdHJlZS5Ob2RlQ29udGV4dCk6IG51bWJlciB7XG4gICAgcmV0dXJuIHRoaXMuY2FsY3VsYXRlTWF4T2Zmc2V0T2ZDb2x1bW4oXG4gICAgICBub2RlQ29udGV4dCxcbiAgICAgIChvZmZzZXRzKSA9PiBvZmZzZXRzLm1pbmltdW0sXG4gICAgKTtcbiAgfVxuXG4gIHByaXZhdGUgY2FsY3VsYXRlTWF4T2Zmc2V0T2ZDb2x1bW4obm9kZUNvbnRleHQsIHJlc29sdmVyKSB7XG4gICAgbGV0IG1heE9mZnNldCA9IDA7XG4gICAgdGhpcy5yZXBlYXRpdGl2ZUVsZW1lbnRzSW5Db2x1bW5zLmZvckVhY2goKHJlcGV0aXRpdmVFbGVtZW50cykgPT4ge1xuICAgICAgY29uc3Qgb2Zmc2V0cyA9IEJyZWFrUG9zaXRpb24uY2FsY3VsYXRlT2Zmc2V0KFxuICAgICAgICBub2RlQ29udGV4dCxcbiAgICAgICAgcmVwZXRpdGl2ZUVsZW1lbnRzLFxuICAgICAgKTtcbiAgICAgIG1heE9mZnNldCA9IE1hdGgubWF4KG1heE9mZnNldCwgcmVzb2x2ZXIob2Zmc2V0cykpO1xuICAgIH0pO1xuICAgIHJldHVybiBtYXhPZmZzZXQ7XG4gIH1cbn1cblxuZnVuY3Rpb24gZ2V0VGFibGVGb3JtYXR0aW5nQ29udGV4dChcbiAgZm9ybWF0dGluZ0NvbnRleHQ6IFZ0cmVlLkZvcm1hdHRpbmdDb250ZXh0LFxuKTogVGFibGVGb3JtYXR0aW5nQ29udGV4dCB7XG4gIEFzc2VydHMuYXNzZXJ0KGZvcm1hdHRpbmdDb250ZXh0IGluc3RhbmNlb2YgVGFibGVGb3JtYXR0aW5nQ29udGV4dCk7XG4gIHJldHVybiBmb3JtYXR0aW5nQ29udGV4dCBhcyBUYWJsZUZvcm1hdHRpbmdDb250ZXh0O1xufVxuXG5mdW5jdGlvbiBpc1RhYmxlUm93R3JvdXBpbmcoZGlzcGxheTogc3RyaW5nIHwgbnVsbCk6IGJvb2xlYW4ge1xuICByZXR1cm4gKFxuICAgIGRpc3BsYXkgPT09IFwidGFibGUtcm93LWdyb3VwXCIgfHxcbiAgICBkaXNwbGF5ID09PSBcInRhYmxlLWhlYWRlci1ncm91cFwiIHx8XG4gICAgZGlzcGxheSA9PT0gXCJ0YWJsZS1mb290ZXItZ3JvdXBcIlxuICApO1xufVxuXG5mdW5jdGlvbiBpc1RhYmxlUm9vdChkaXNwbGF5OiBzdHJpbmcgfCBudWxsKTogYm9vbGVhbiB7XG4gIHJldHVybiBkaXNwbGF5ID09PSBcInRhYmxlXCIgfHwgZGlzcGxheSA9PT0gXCJpbmxpbmUtdGFibGVcIjtcbn1cblxuZnVuY3Rpb24gaXNWYWxpZFBhcmVudE9mVGFibGVSb3coZGlzcGxheTogc3RyaW5nIHwgbnVsbCk6IGJvb2xlYW4ge1xuICByZXR1cm4gaXNUYWJsZVJvd0dyb3VwaW5nKGRpc3BsYXkpIHx8IGlzVGFibGVSb290KGRpc3BsYXkpO1xufVxuXG5mdW5jdGlvbiBza2lwTmVzdGVkVGFibGUoXG4gIHN0YXRlOiBMYXlvdXRVdGlsLkxheW91dEl0ZXJhdG9yU3RhdGUsXG4gIGZvcm1hdHRpbmdDb250ZXh0OiBUYWJsZUZvcm1hdHRpbmdDb250ZXh0LFxuICBjb2x1bW46IExheW91dC5Db2x1bW4sXG4pOiBUYXNrLlJlc3VsdDxib29sZWFuPiB8IG51bGwge1xuICBjb25zdCBub2RlQ29udGV4dCA9IHN0YXRlLm5vZGVDb250ZXh0O1xuICBjb25zdCBkaXNwbGF5ID0gbm9kZUNvbnRleHQuZGlzcGxheTtcbiAgY29uc3QgcGFyZW50RGlzcGxheSA9IG5vZGVDb250ZXh0LnBhcmVudCA/IG5vZGVDb250ZXh0LnBhcmVudC5kaXNwbGF5IDogbnVsbDtcblxuICAvLyBJcyBpbmxpbmUtdGFibGUgbmVzdGVkIGluIGFub3RoZXIgdGFibGU/XG4gIGxldCBpc05lc3RlZElubGluZVRhYmxlID0gZmFsc2U7XG4gIGlmIChcbiAgICBwYXJlbnREaXNwbGF5ID09PSBcImlubGluZS10YWJsZVwiICYmXG4gICAgIShub2RlQ29udGV4dC5mb3JtYXR0aW5nQ29udGV4dCBpbnN0YW5jZW9mIFRhYmxlRm9ybWF0dGluZ0NvbnRleHQpXG4gICkge1xuICAgIGZvciAobGV0IG5jID0gbm9kZUNvbnRleHQucGFyZW50OyBuYzsgbmMgPSBuYy5wYXJlbnQpIHtcbiAgICAgIGlmIChuYy5mb3JtYXR0aW5nQ29udGV4dCBpbnN0YW5jZW9mIFRhYmxlRm9ybWF0dGluZ0NvbnRleHQpIHtcbiAgICAgICAgaXNOZXN0ZWRJbmxpbmVUYWJsZSA9IG5jLmZvcm1hdHRpbmdDb250ZXh0ID09PSBmb3JtYXR0aW5nQ29udGV4dDtcbiAgICAgICAgYnJlYWs7XG4gICAgICB9XG4gICAgfVxuICB9XG4gIGNvbnN0IGlzTmVzdGVkVGFibGUgPVxuICAgIGlzTmVzdGVkSW5saW5lVGFibGUgfHxcbiAgICAoZGlzcGxheSA9PT0gXCJ0YWJsZS1yb3dcIiAmJiAhaXNWYWxpZFBhcmVudE9mVGFibGVSb3cocGFyZW50RGlzcGxheSkpIHx8XG4gICAgKGRpc3BsYXkgPT09IFwidGFibGUtY2VsbFwiICYmXG4gICAgICBwYXJlbnREaXNwbGF5ICE9PSBcInRhYmxlLXJvd1wiICYmXG4gICAgICAhaXNWYWxpZFBhcmVudE9mVGFibGVSb3cocGFyZW50RGlzcGxheSkpIHx8XG4gICAgKG5vZGVDb250ZXh0LmZvcm1hdHRpbmdDb250ZXh0IGluc3RhbmNlb2YgVGFibGVGb3JtYXR0aW5nQ29udGV4dCAmJlxuICAgICAgbm9kZUNvbnRleHQuZm9ybWF0dGluZ0NvbnRleHQgIT09IGZvcm1hdHRpbmdDb250ZXh0KTtcbiAgaWYgKGlzTmVzdGVkVGFibGUpIHtcbiAgICByZXR1cm4gY29sdW1uXG4gICAgICAuYnVpbGREZWVwRWxlbWVudFZpZXcobm9kZUNvbnRleHQpXG4gICAgICAudGhlbkFzeW5jKChub2RlQ29udGV4dEFmdGVyKSA9PiB7XG4gICAgICAgIHN0YXRlLm5vZGVDb250ZXh0ID0gbm9kZUNvbnRleHRBZnRlcjtcbiAgICAgICAgcmV0dXJuIFRhc2submV3UmVzdWx0KHRydWUpO1xuICAgICAgfSk7XG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuIG51bGw7XG4gIH1cbn1cblxuZXhwb3J0IGNsYXNzIEVudGlyZVRhYmxlTGF5b3V0U3RyYXRlZ3kgZXh0ZW5kcyBMYXlvdXRVdGlsLkVkZ2VTa2lwcGVyIHtcbiAgcm93SW5kZXg6IG51bWJlciA9IC0xO1xuICBjb2x1bW5JbmRleDogbnVtYmVyID0gMDtcbiAgaW5Sb3c6IGJvb2xlYW4gPSBmYWxzZTtcbiAgY2hlY2tQb2ludHM6IFZ0cmVlLk5vZGVDb250ZXh0W10gPSBbXTtcbiAgaW5IZWFkZXJPckZvb3RlcjogYm9vbGVhbiA9IGZhbHNlO1xuXG4gIGNvbnN0cnVjdG9yKFxuICAgIHB1YmxpYyByZWFkb25seSBmb3JtYXR0aW5nQ29udGV4dDogVGFibGVGb3JtYXR0aW5nQ29udGV4dCxcbiAgICBwdWJsaWMgcmVhZG9ubHkgY29sdW1uOiBMYXlvdXQuQ29sdW1uLFxuICApIHtcbiAgICBzdXBlcigpO1xuICB9XG5cbiAgLyoqXG4gICAqIEBvdmVycmlkZVxuICAgKi9cbiAgc3RhcnROb25JbmxpbmVFbGVtZW50Tm9kZShcbiAgICBzdGF0ZTogTGF5b3V0VXRpbC5MYXlvdXRJdGVyYXRvclN0YXRlLFxuICApOiB2b2lkIHwgVGFzay5SZXN1bHQ8Ym9vbGVhbj4ge1xuICAgIGNvbnN0IGZvcm1hdHRpbmdDb250ZXh0ID0gdGhpcy5mb3JtYXR0aW5nQ29udGV4dDtcbiAgICBjb25zdCByID0gc2tpcE5lc3RlZFRhYmxlKHN0YXRlLCBmb3JtYXR0aW5nQ29udGV4dCwgdGhpcy5jb2x1bW4pO1xuICAgIGlmIChyKSB7XG4gICAgICByZXR1cm4gcjtcbiAgICB9XG4gICAgdGhpcy5wb3N0TGF5b3V0QmxvY2tDb250ZW50cyhzdGF0ZSk7XG4gICAgY29uc3Qgbm9kZUNvbnRleHQgPSBzdGF0ZS5ub2RlQ29udGV4dDtcbiAgICBjb25zdCBkaXNwbGF5ID0gbm9kZUNvbnRleHQuZGlzcGxheTtcbiAgICBjb25zdCByZXBldGl0aXZlRWxlbWVudHMgPSBmb3JtYXR0aW5nQ29udGV4dC5nZXRSZXBldGl0aXZlRWxlbWVudHMoKTtcbiAgICBzd2l0Y2ggKGRpc3BsYXkpIHtcbiAgICAgIGNhc2UgXCJ0YWJsZVwiOlxuICAgICAgICBmb3JtYXR0aW5nQ29udGV4dC5pbmxpbmVCb3JkZXJTcGFjaW5nID0gbm9kZUNvbnRleHQuaW5saW5lQm9yZGVyU3BhY2luZztcbiAgICAgICAgYnJlYWs7XG4gICAgICBjYXNlIFwidGFibGUtY2FwdGlvblwiOiB7XG4gICAgICAgIGNvbnN0IGNhcHRpb25WaWV3ID0gbmV3IFRhYmxlQ2FwdGlvblZpZXcoXG4gICAgICAgICAgbm9kZUNvbnRleHQudmlld05vZGUgYXMgRWxlbWVudCxcbiAgICAgICAgICBub2RlQ29udGV4dC5jYXB0aW9uU2lkZSxcbiAgICAgICAgKTtcbiAgICAgICAgZm9ybWF0dGluZ0NvbnRleHQuY2FwdGlvbnMucHVzaChjYXB0aW9uVmlldyk7XG4gICAgICAgIGJyZWFrO1xuICAgICAgfVxuICAgICAgY2FzZSBcInRhYmxlLWhlYWRlci1ncm91cFwiOlxuICAgICAgICBpZiAoIXJlcGV0aXRpdmVFbGVtZW50cy5pc0hlYWRlclJlZ2lzdGVyZWQoKSkge1xuICAgICAgICAgIHRoaXMuaW5IZWFkZXJPckZvb3RlciA9IHRydWU7XG4gICAgICAgICAgcmVwZXRpdGl2ZUVsZW1lbnRzLnNldEhlYWRlck5vZGVDb250ZXh0KG5vZGVDb250ZXh0KTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gVGFzay5uZXdSZXN1bHQodHJ1ZSk7XG4gICAgICBjYXNlIFwidGFibGUtZm9vdGVyLWdyb3VwXCI6XG4gICAgICAgIGlmICghcmVwZXRpdGl2ZUVsZW1lbnRzLmlzRm9vdGVyUmVnaXN0ZXJlZCgpKSB7XG4gICAgICAgICAgdGhpcy5pbkhlYWRlck9yRm9vdGVyID0gdHJ1ZTtcbiAgICAgICAgICByZXBldGl0aXZlRWxlbWVudHMuc2V0Rm9vdGVyTm9kZUNvbnRleHQobm9kZUNvbnRleHQpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBUYXNrLm5ld1Jlc3VsdCh0cnVlKTtcbiAgICAgIGNhc2UgXCJ0YWJsZS1yb3dcIjpcbiAgICAgICAgaWYgKCF0aGlzLmluSGVhZGVyT3JGb290ZXIpIHtcbiAgICAgICAgICB0aGlzLmluUm93ID0gdHJ1ZTtcbiAgICAgICAgICB0aGlzLnJvd0luZGV4Kys7XG4gICAgICAgICAgQXNzZXJ0cy5hc3NlcnQobm9kZUNvbnRleHQuc291cmNlTm9kZSk7XG4gICAgICAgICAgdGhpcy5jb2x1bW5JbmRleCA9IDA7XG4gICAgICAgICAgZm9ybWF0dGluZ0NvbnRleHQuYWRkUm93KFxuICAgICAgICAgICAgdGhpcy5yb3dJbmRleCxcbiAgICAgICAgICAgIG5ldyBUYWJsZVJvdyh0aGlzLnJvd0luZGV4LCBub2RlQ29udGV4dC5zb3VyY2VOb2RlKSxcbiAgICAgICAgICApO1xuICAgICAgICAgIGlmICghcmVwZXRpdGl2ZUVsZW1lbnRzLmZpcnN0Q29udGVudFNvdXJjZU5vZGUpIHtcbiAgICAgICAgICAgIHJlcGV0aXRpdmVFbGVtZW50cy5maXJzdENvbnRlbnRTb3VyY2VOb2RlID0gbm9kZUNvbnRleHQuc291cmNlTm9kZSBhcyBFbGVtZW50O1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBicmVhaztcbiAgICB9XG4gICAgcmV0dXJuIHN1cGVyLnN0YXJ0Tm9uSW5saW5lRWxlbWVudE5vZGUoc3RhdGUpO1xuICB9XG5cbiAgLyoqXG4gICAqIEBvdmVycmlkZVxuICAgKi9cbiAgYWZ0ZXJOb25JbmxpbmVFbGVtZW50Tm9kZShcbiAgICBzdGF0ZTogTGF5b3V0VXRpbC5MYXlvdXRJdGVyYXRvclN0YXRlLFxuICApOiB2b2lkIHwgVGFzay5SZXN1bHQ8Ym9vbGVhbj4ge1xuICAgIGNvbnN0IGZvcm1hdHRpbmdDb250ZXh0ID0gdGhpcy5mb3JtYXR0aW5nQ29udGV4dDtcbiAgICBjb25zdCBub2RlQ29udGV4dCA9IHN0YXRlLm5vZGVDb250ZXh0O1xuICAgIGNvbnN0IGRpc3BsYXkgPSBub2RlQ29udGV4dC5kaXNwbGF5O1xuICAgIGNvbnN0IGNsaWVudExheW91dCA9IHRoaXMuY29sdW1uLmNsaWVudExheW91dDtcbiAgICB0aGlzLnBvc3RMYXlvdXRCbG9ja0NvbnRlbnRzKHN0YXRlKTtcbiAgICBpZiAobm9kZUNvbnRleHQuc291cmNlTm9kZSA9PT0gZm9ybWF0dGluZ0NvbnRleHQudGFibGVTb3VyY2VOb2RlKSB7XG4gICAgICBjb25zdCBjb21wdXRlZFN0eWxlID0gY2xpZW50TGF5b3V0LmdldEVsZW1lbnRDb21wdXRlZFN0eWxlKFxuICAgICAgICBmb3JtYXR0aW5nQ29udGV4dC5nZXRSb290Vmlld05vZGUobm9kZUNvbnRleHQpIGFzIEVsZW1lbnQsXG4gICAgICApO1xuICAgICAgZm9ybWF0dGluZ0NvbnRleHQudGFibGVXaWR0aCA9IHBhcnNlRmxvYXQoXG4gICAgICAgIGNvbXB1dGVkU3R5bGVbZm9ybWF0dGluZ0NvbnRleHQudmVydGljYWwgPyBcImhlaWdodFwiIDogXCJ3aWR0aFwiXSxcbiAgICAgICk7XG4gICAgICBmb3JtYXR0aW5nQ29udGV4dC5nZXRSZXBldGl0aXZlRWxlbWVudHMoKS5sYXN0Q29udGVudFNvdXJjZU5vZGUgPVxuICAgICAgICBzdGF0ZS5sYXN0QWZ0ZXJOb2RlQ29udGV4dCAmJlxuICAgICAgICAoc3RhdGUubGFzdEFmdGVyTm9kZUNvbnRleHQuc291cmNlTm9kZSBhcyBFbGVtZW50KTtcbiAgICAgIHN0YXRlLmJyZWFrID0gdHJ1ZTtcbiAgICB9IGVsc2Uge1xuICAgICAgc3dpdGNoIChkaXNwbGF5KSB7XG4gICAgICAgIGNhc2UgXCJ0YWJsZS1oZWFkZXItZ3JvdXBcIjpcbiAgICAgICAgY2FzZSBcInRhYmxlLWZvb3Rlci1ncm91cFwiOlxuICAgICAgICAgIGlmICh0aGlzLmluSGVhZGVyT3JGb290ZXIpIHtcbiAgICAgICAgICAgIHRoaXMuaW5IZWFkZXJPckZvb3RlciA9IGZhbHNlO1xuICAgICAgICAgICAgcmV0dXJuIFRhc2submV3UmVzdWx0KHRydWUpO1xuICAgICAgICAgIH1cbiAgICAgICAgICBicmVhaztcbiAgICAgICAgY2FzZSBcInRhYmxlLXJvd1wiOlxuICAgICAgICAgIGlmICghdGhpcy5pbkhlYWRlck9yRm9vdGVyKSB7XG4gICAgICAgICAgICBmb3JtYXR0aW5nQ29udGV4dC5sYXN0Um93Vmlld05vZGUgPSBub2RlQ29udGV4dC52aWV3Tm9kZSBhcyBFbGVtZW50O1xuICAgICAgICAgICAgdGhpcy5pblJvdyA9IGZhbHNlO1xuICAgICAgICAgIH1cbiAgICAgICAgICBicmVhaztcbiAgICAgICAgY2FzZSBcInRhYmxlLWNlbGxcIjpcbiAgICAgICAgICBpZiAoIXRoaXMuaW5IZWFkZXJPckZvb3Rlcikge1xuICAgICAgICAgICAgaWYgKCF0aGlzLmluUm93KSB7XG4gICAgICAgICAgICAgIHRoaXMucm93SW5kZXgrKztcbiAgICAgICAgICAgICAgdGhpcy5jb2x1bW5JbmRleCA9IDA7XG4gICAgICAgICAgICAgIHRoaXMuaW5Sb3cgPSB0cnVlO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY29uc3QgZWxlbSA9IG5vZGVDb250ZXh0LnZpZXdOb2RlIGFzIEVsZW1lbnQ7XG4gICAgICAgICAgICBmb3JtYXR0aW5nQ29udGV4dC5hZGRDZWxsKFxuICAgICAgICAgICAgICB0aGlzLnJvd0luZGV4LFxuICAgICAgICAgICAgICBuZXcgVGFibGVDZWxsKHRoaXMucm93SW5kZXgsIHRoaXMuY29sdW1uSW5kZXgsIGVsZW0pLFxuICAgICAgICAgICAgKTtcbiAgICAgICAgICAgIHRoaXMuY29sdW1uSW5kZXgrKztcbiAgICAgICAgICB9XG4gICAgICAgICAgYnJlYWs7XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiBzdXBlci5hZnRlck5vbklubGluZUVsZW1lbnROb2RlKHN0YXRlKTtcbiAgfVxuXG4gIC8qKiBAb3ZlcnJpZGUgKi9cbiAgc3RhcnROb25FbGVtZW50Tm9kZShcbiAgICBzdGF0ZTogTGF5b3V0VXRpbC5MYXlvdXRJdGVyYXRvclN0YXRlLFxuICApOiB2b2lkIHwgVGFzay5SZXN1bHQ8Ym9vbGVhbj4ge1xuICAgIHRoaXMucmVnaXN0ZXJDaGVja1BvaW50KHN0YXRlKTtcbiAgfVxuXG4gIC8qKiBAb3ZlcnJpZGUgKi9cbiAgYWZ0ZXJOb25FbGVtZW50Tm9kZShcbiAgICBzdGF0ZTogTGF5b3V0VXRpbC5MYXlvdXRJdGVyYXRvclN0YXRlLFxuICApOiB2b2lkIHwgVGFzay5SZXN1bHQ8Ym9vbGVhbj4ge1xuICAgIHRoaXMucmVnaXN0ZXJDaGVja1BvaW50KHN0YXRlKTtcbiAgfVxuXG4gIC8qKiBAb3ZlcnJpZGUgKi9cbiAgc3RhcnRJbmxpbmVFbGVtZW50Tm9kZShcbiAgICBzdGF0ZTogTGF5b3V0VXRpbC5MYXlvdXRJdGVyYXRvclN0YXRlLFxuICApOiB2b2lkIHwgVGFzay5SZXN1bHQ8Ym9vbGVhbj4ge1xuICAgIHRoaXMucmVnaXN0ZXJDaGVja1BvaW50KHN0YXRlKTtcbiAgfVxuXG4gIC8qKiBAb3ZlcnJpZGUgKi9cbiAgYWZ0ZXJJbmxpbmVFbGVtZW50Tm9kZShcbiAgICBzdGF0ZTogTGF5b3V0VXRpbC5MYXlvdXRJdGVyYXRvclN0YXRlLFxuICApOiB2b2lkIHwgVGFzay5SZXN1bHQ8Ym9vbGVhbj4ge1xuICAgIHRoaXMucmVnaXN0ZXJDaGVja1BvaW50KHN0YXRlKTtcbiAgfVxuXG4gIHJlZ2lzdGVyQ2hlY2tQb2ludChzdGF0ZTogTGF5b3V0VXRpbC5MYXlvdXRJdGVyYXRvclN0YXRlKSB7XG4gICAgY29uc3Qgbm9kZUNvbnRleHQgPSBzdGF0ZS5ub2RlQ29udGV4dDtcbiAgICBpZiAoXG4gICAgICBub2RlQ29udGV4dCAmJlxuICAgICAgbm9kZUNvbnRleHQudmlld05vZGUgJiZcbiAgICAgICFMYXlvdXRIZWxwZXIuaXNTcGVjaWFsTm9kZUNvbnRleHQobm9kZUNvbnRleHQpXG4gICAgKSB7XG4gICAgICB0aGlzLmNoZWNrUG9pbnRzLnB1c2gobm9kZUNvbnRleHQuY2xvbmUoKSk7XG4gICAgfVxuICB9XG5cbiAgcG9zdExheW91dEJsb2NrQ29udGVudHMoc3RhdGU6IExheW91dFV0aWwuTGF5b3V0SXRlcmF0b3JTdGF0ZSkge1xuICAgIGlmICh0aGlzLmNoZWNrUG9pbnRzLmxlbmd0aCA+IDApIHtcbiAgICAgIHRoaXMuY29sdW1uLnBvc3RMYXlvdXRCbG9jayhzdGF0ZS5ub2RlQ29udGV4dCwgdGhpcy5jaGVja1BvaW50cyk7XG4gICAgfVxuICAgIHRoaXMuY2hlY2tQb2ludHMgPSBbXTtcbiAgfVxufVxuXG5leHBvcnQgY2xhc3MgVGFibGVMYXlvdXRTdHJhdGVneSBleHRlbmRzIExheW91dFV0aWwuRWRnZVNraXBwZXIge1xuICBwcml2YXRlIHN0YXRpYyBpZ25vcmVMaXN0OiB7IFtrZXk6IHN0cmluZ106IGJvb2xlYW4gfSA9IHtcbiAgICBcInRhYmxlLWNhcHRpb25cIjogdHJ1ZSxcbiAgICBcInRhYmxlLWNvbHVtbi1ncm91cFwiOiB0cnVlLFxuICAgIFwidGFibGUtY29sdW1uXCI6IHRydWUsXG4gIH07XG4gIGluUm93OiBib29sZWFuID0gZmFsc2U7XG4gIGN1cnJlbnRSb3dJbmRleDogbnVtYmVyID0gLTE7XG4gIGN1cnJlbnRDb2x1bW5JbmRleDogbnVtYmVyID0gMDtcbiAgb3JpZ2luYWxTdG9wQXRPdmVyZmxvdzogYm9vbGVhbjtcbiAgaW5IZWFkZXI6IGJvb2xlYW47XG4gIGluRm9vdGVyOiBib29sZWFuO1xuXG4gIGNvbnN0cnVjdG9yKFxuICAgIHB1YmxpYyByZWFkb25seSBmb3JtYXR0aW5nQ29udGV4dDogVGFibGVGb3JtYXR0aW5nQ29udGV4dCxcbiAgICBwdWJsaWMgcmVhZG9ubHkgY29sdW1uOiBMYXlvdXQuQ29sdW1uLFxuICApIHtcbiAgICBzdXBlcih0cnVlKTtcbiAgICB0aGlzLm9yaWdpbmFsU3RvcEF0T3ZlcmZsb3cgPSBjb2x1bW4uc3RvcEF0T3ZlcmZsb3c7XG4gICAgY29sdW1uLnN0b3BBdE92ZXJmbG93ID0gZmFsc2U7XG4gIH1cblxuICByZXNldENvbHVtbigpIHtcbiAgICB0aGlzLmNvbHVtbi5zdG9wQXRPdmVyZmxvdyA9IHRoaXMub3JpZ2luYWxTdG9wQXRPdmVyZmxvdztcbiAgfVxuXG4gIGdldENvbFNwYW5uaW5nQ2VsbFdpZHRoKGNlbGw6IFRhYmxlQ2VsbCk6IG51bWJlciB7XG4gICAgY29uc3QgY29sV2lkdGhzID0gdGhpcy5mb3JtYXR0aW5nQ29udGV4dC5jb2xXaWR0aHM7XG4gICAgQXNzZXJ0cy5hc3NlcnQoY29sV2lkdGhzKTtcbiAgICBsZXQgd2lkdGggPSAwO1xuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgY2VsbC5jb2xTcGFuOyBpKyspIHtcbiAgICAgIHdpZHRoICs9IGNvbFdpZHRoc1tjZWxsLmFuY2hvclNsb3QuY29sdW1uSW5kZXggKyBpXTtcbiAgICB9XG4gICAgd2lkdGggKz0gdGhpcy5mb3JtYXR0aW5nQ29udGV4dC5pbmxpbmVCb3JkZXJTcGFjaW5nICogKGNlbGwuY29sU3BhbiAtIDEpO1xuICAgIHJldHVybiB3aWR0aDtcbiAgfVxuXG4gIGxheW91dENlbGwoXG4gICAgY2VsbDogVGFibGVDZWxsLFxuICAgIGNlbGxOb2RlQ29udGV4dDogVnRyZWUuTm9kZUNvbnRleHQsXG4gICAgc3RhcnRDaHVua1Bvc2l0aW9uOiBWdHJlZS5DaHVua1Bvc2l0aW9uLFxuICApOiBUYXNrLlJlc3VsdDxib29sZWFuPiB7XG4gICAgY29uc3Qgcm93SW5kZXggPSBjZWxsLnJvd0luZGV4O1xuICAgIGNvbnN0IGNvbHVtbkluZGV4ID0gY2VsbC5jb2x1bW5JbmRleDtcbiAgICBjb25zdCBjb2xTcGFuID0gY2VsbC5jb2xTcGFuO1xuICAgIGNvbnN0IGNlbGxWaWV3Tm9kZSA9IGNlbGxOb2RlQ29udGV4dC52aWV3Tm9kZSBhcyBFbGVtZW50O1xuICAgIGNvbnN0IHZlcnRpY2FsQWxpZ24gPSBjZWxsTm9kZUNvbnRleHQudmVydGljYWxBbGlnbjtcbiAgICBpZiAoY29sU3BhbiA+IDEpIHtcbiAgICAgIEJhc2Uuc2V0Q1NTUHJvcGVydHkoY2VsbFZpZXdOb2RlLCBcImJveC1zaXppbmdcIiwgXCJib3JkZXItYm94XCIpO1xuICAgICAgQmFzZS5zZXRDU1NQcm9wZXJ0eShcbiAgICAgICAgY2VsbFZpZXdOb2RlLFxuICAgICAgICB0aGlzLmZvcm1hdHRpbmdDb250ZXh0LnZlcnRpY2FsID8gXCJoZWlnaHRcIiA6IFwid2lkdGhcIixcbiAgICAgICAgYCR7dGhpcy5nZXRDb2xTcGFubmluZ0NlbGxXaWR0aChjZWxsKX1weGAsXG4gICAgICApO1xuICAgIH1cbiAgICBjb25zdCBwc2V1ZG9Db2x1bW5Db250YWluZXIgPSBjZWxsVmlld05vZGUub3duZXJEb2N1bWVudC5jcmVhdGVFbGVtZW50KFxuICAgICAgXCJkaXZcIixcbiAgICApO1xuICAgIGNlbGxWaWV3Tm9kZS5hcHBlbmRDaGlsZChwc2V1ZG9Db2x1bW5Db250YWluZXIpO1xuICAgIGNvbnN0IGNlbGxGcmFnbWVudCA9IG5ldyBUYWJsZUNlbGxGcmFnbWVudChcbiAgICAgIHRoaXMuY29sdW1uLFxuICAgICAgcHNldWRvQ29sdW1uQ29udGFpbmVyLFxuICAgICAgY2VsbE5vZGVDb250ZXh0LFxuICAgICk7XG4gICAgdGhpcy5mb3JtYXR0aW5nQ29udGV4dC5hZGRDZWxsRnJhZ21lbnQocm93SW5kZXgsIGNvbHVtbkluZGV4LCBjZWxsRnJhZ21lbnQpO1xuICAgIGlmIChcbiAgICAgIHN0YXJ0Q2h1bmtQb3NpdGlvbi5wcmltYXJ5LnN0ZXBzLmxlbmd0aCA9PT0gMSAmJlxuICAgICAgc3RhcnRDaHVua1Bvc2l0aW9uLnByaW1hcnkuYWZ0ZXJcbiAgICApIHtcbiAgICAgIC8vIENvbnRlbnRzIG9mIHRoZSBjZWxsIGhhdmUgZW5kZWQgaW4gdGhlIHByZXZpb3VzIGZyYWdtZW50XG4gICAgICBjZWxsRnJhZ21lbnQuZW1wdHkgPSB0cnVlO1xuICAgIH1cbiAgICByZXR1cm4gY2VsbEZyYWdtZW50LnBzZXVkb0NvbHVtblxuICAgICAgLmxheW91dChzdGFydENodW5rUG9zaXRpb24sIHRydWUpXG4gICAgICAudGhlblJldHVybih0cnVlKTtcbiAgfVxuXG4gIGhhc0Jyb2tlbkNlbGxBdFNsb3Qoc2xvdEluZGV4KTogYm9vbGVhbiB7XG4gICAgY29uc3QgY2VsbEJyZWFrUG9zaXRpb24gPSB0aGlzLmZvcm1hdHRpbmdDb250ZXh0LmNlbGxCcmVha1Bvc2l0aW9uc1swXTtcbiAgICBpZiAoY2VsbEJyZWFrUG9zaXRpb24pIHtcbiAgICAgIHJldHVybiBjZWxsQnJlYWtQb3NpdGlvbi5jZWxsLmFuY2hvclNsb3QuY29sdW1uSW5kZXggPT09IHNsb3RJbmRleDtcbiAgICB9XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG5cbiAgcHJpdmF0ZSBleHRyYWN0Um93U3Bhbm5pbmdDZWxsQnJlYWtQb3NpdGlvbnMoKTogQnJva2VuVGFibGVDZWxsUG9zaXRpb25bXVtdIHtcbiAgICBjb25zdCBjZWxsQnJlYWtQb3NpdGlvbnMgPSB0aGlzLmZvcm1hdHRpbmdDb250ZXh0LmNlbGxCcmVha1Bvc2l0aW9ucztcbiAgICBpZiAoY2VsbEJyZWFrUG9zaXRpb25zLmxlbmd0aCA9PT0gMCkge1xuICAgICAgcmV0dXJuIFtdO1xuICAgIH1cbiAgICBjb25zdCByb3dTcGFubmluZ0NlbGxCcmVha1Bvc2l0aW9ucyA9IFtdO1xuICAgIGxldCBpID0gMDtcbiAgICBkbyB7XG4gICAgICBjb25zdCBwID0gY2VsbEJyZWFrUG9zaXRpb25zW2ldO1xuICAgICAgY29uc3Qgcm93SW5kZXggPSBwLmNlbGwucm93SW5kZXg7XG4gICAgICBpZiAocm93SW5kZXggPCB0aGlzLmN1cnJlbnRSb3dJbmRleCkge1xuICAgICAgICBsZXQgYXJyID0gcm93U3Bhbm5pbmdDZWxsQnJlYWtQb3NpdGlvbnNbcm93SW5kZXhdO1xuICAgICAgICBpZiAoIWFycikge1xuICAgICAgICAgIGFyciA9IHJvd1NwYW5uaW5nQ2VsbEJyZWFrUG9zaXRpb25zW3Jvd0luZGV4XSA9IFtdO1xuICAgICAgICB9XG4gICAgICAgIGFyci5wdXNoKHApO1xuICAgICAgICBjZWxsQnJlYWtQb3NpdGlvbnMuc3BsaWNlKGksIDEpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgaSsrO1xuICAgICAgfVxuICAgIH0gd2hpbGUgKGkgPCBjZWxsQnJlYWtQb3NpdGlvbnMubGVuZ3RoKTtcbiAgICByZXR1cm4gcm93U3Bhbm5pbmdDZWxsQnJlYWtQb3NpdGlvbnM7XG4gIH1cblxuICBsYXlvdXRSb3dTcGFubmluZ0NlbGxzRnJvbVByZXZpb3VzRnJhZ21lbnQoXG4gICAgc3RhdGU6IExheW91dFV0aWwuTGF5b3V0SXRlcmF0b3JTdGF0ZSxcbiAgKTogVGFzay5SZXN1bHQ8Ym9vbGVhbj4ge1xuICAgIGNvbnN0IGZvcm1hdHRpbmdDb250ZXh0ID0gdGhpcy5mb3JtYXR0aW5nQ29udGV4dDtcbiAgICBjb25zdCByb3dTcGFubmluZ0NlbGxCcmVha1Bvc2l0aW9ucyA9IHRoaXMuZXh0cmFjdFJvd1NwYW5uaW5nQ2VsbEJyZWFrUG9zaXRpb25zKCk7XG4gICAgY29uc3Qgcm93Q291bnQgPSByb3dTcGFubmluZ0NlbGxCcmVha1Bvc2l0aW9ucy5yZWR1Y2UoKHMpID0+IHMgKyAxLCAwKTtcbiAgICBpZiAocm93Q291bnQgPT09IDApIHtcbiAgICAgIHJldHVybiBUYXNrLm5ld1Jlc3VsdCh0cnVlKTtcbiAgICB9XG4gICAgY29uc3QgbGF5b3V0Q29udGV4dCA9IHRoaXMuY29sdW1uLmxheW91dENvbnRleHQ7XG4gICAgY29uc3QgY3VycmVudFJvdyA9IHN0YXRlLm5vZGVDb250ZXh0O1xuICAgIGN1cnJlbnRSb3cudmlld05vZGUucGFyZW50Tm9kZS5yZW1vdmVDaGlsZChjdXJyZW50Um93LnZpZXdOb2RlKTtcbiAgICBjb25zdCBmcmFtZSA9IFRhc2submV3RnJhbWU8Ym9vbGVhbj4oXG4gICAgICBcImxheW91dFJvd1NwYW5uaW5nQ2VsbHNGcm9tUHJldmlvdXNGcmFnbWVudFwiLFxuICAgICk7XG4gICAgbGV0IGNvbnQgPSBUYXNrLm5ld1Jlc3VsdCh0cnVlKTtcbiAgICBsZXQgc3Bhbm5pbmdDZWxsUm93SW5kZXggPSAwO1xuICAgIGNvbnN0IG9jY3VwaWVkU2xvdEluZGljZXMgPSBbXTtcbiAgICByb3dTcGFubmluZ0NlbGxCcmVha1Bvc2l0aW9ucy5mb3JFYWNoKChyb3dDZWxsQnJlYWtQb3NpdGlvbnMpID0+IHtcbiAgICAgIGNvbnQgPSBjb250LnRoZW5Bc3luYygoKSA9PiB7XG4gICAgICAgIC8vIElzIGl0IGFsd2F5cyBjb3JyZWN0IHRvIGFzc3VtZSBzdGVwc1sxXSB0byBiZSB0aGUgcm93P1xuICAgICAgICBjb25zdCByb3dOb2RlQ29udGV4dCA9IFZ0cmVlSW1wbC5tYWtlTm9kZUNvbnRleHRGcm9tTm9kZVBvc2l0aW9uU3RlcChcbiAgICAgICAgICByb3dDZWxsQnJlYWtQb3NpdGlvbnNbMF0uY2VsbE5vZGVQb3NpdGlvbi5zdGVwc1sxXSxcbiAgICAgICAgICBjdXJyZW50Um93LnBhcmVudCxcbiAgICAgICAgKTtcbiAgICAgICAgcmV0dXJuIGxheW91dENvbnRleHQuc2V0Q3VycmVudChyb3dOb2RlQ29udGV4dCwgZmFsc2UpLnRoZW5Bc3luYygoKSA9PiB7XG4gICAgICAgICAgbGV0IGNvbnQxID0gVGFzay5uZXdSZXN1bHQodHJ1ZSk7XG4gICAgICAgICAgbGV0IGNvbHVtbkluZGV4ID0gMDtcblxuICAgICAgICAgIGZ1bmN0aW9uIGFkZER1bW15Q2VsbFVudGlsKHVwcGVyQ29sdW1uSW5kZXgpIHtcbiAgICAgICAgICAgIHdoaWxlIChjb2x1bW5JbmRleCA8IHVwcGVyQ29sdW1uSW5kZXgpIHtcbiAgICAgICAgICAgICAgaWYgKCFvY2N1cGllZFNsb3RJbmRpY2VzLmluY2x1ZGVzKGNvbHVtbkluZGV4KSkge1xuICAgICAgICAgICAgICAgIGNvbnN0IGR1bW15ID0gcm93Tm9kZUNvbnRleHQudmlld05vZGUub3duZXJEb2N1bWVudC5jcmVhdGVFbGVtZW50KFxuICAgICAgICAgICAgICAgICAgXCJ0ZFwiLFxuICAgICAgICAgICAgICAgICk7XG4gICAgICAgICAgICAgICAgQmFzZS5zZXRDU1NQcm9wZXJ0eShkdW1teSwgXCJwYWRkaW5nXCIsIFwiMFwiKTtcbiAgICAgICAgICAgICAgICByb3dOb2RlQ29udGV4dC52aWV3Tm9kZS5hcHBlbmRDaGlsZChkdW1teSk7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgY29sdW1uSW5kZXgrKztcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgICAgcm93Q2VsbEJyZWFrUG9zaXRpb25zLmZvckVhY2goKGNlbGxCcmVha1Bvc2l0aW9uKSA9PiB7XG4gICAgICAgICAgICBjb250MSA9IGNvbnQxLnRoZW5Bc3luYygoKSA9PiB7XG4gICAgICAgICAgICAgIGNvbnN0IGNlbGwgPSBjZWxsQnJlYWtQb3NpdGlvbi5jZWxsO1xuICAgICAgICAgICAgICBhZGREdW1teUNlbGxVbnRpbChjZWxsLmFuY2hvclNsb3QuY29sdW1uSW5kZXgpO1xuICAgICAgICAgICAgICBjb25zdCBjZWxsTm9kZVBvc2l0aW9uID0gY2VsbEJyZWFrUG9zaXRpb24uY2VsbE5vZGVQb3NpdGlvbjtcbiAgICAgICAgICAgICAgY29uc3QgY2VsbE5vZGVDb250ZXh0ID0gVnRyZWVJbXBsLm1ha2VOb2RlQ29udGV4dEZyb21Ob2RlUG9zaXRpb25TdGVwKFxuICAgICAgICAgICAgICAgIGNlbGxOb2RlUG9zaXRpb24uc3RlcHNbMF0sXG4gICAgICAgICAgICAgICAgcm93Tm9kZUNvbnRleHQsXG4gICAgICAgICAgICAgICk7XG4gICAgICAgICAgICAgIGNlbGxOb2RlQ29udGV4dC5vZmZzZXRJbk5vZGUgPSBjZWxsTm9kZVBvc2l0aW9uLm9mZnNldEluTm9kZTtcbiAgICAgICAgICAgICAgY2VsbE5vZGVDb250ZXh0LmFmdGVyID0gY2VsbE5vZGVQb3NpdGlvbi5hZnRlcjtcbiAgICAgICAgICAgICAgY2VsbE5vZGVDb250ZXh0LmZyYWdtZW50SW5kZXggPVxuICAgICAgICAgICAgICAgIGNlbGxOb2RlUG9zaXRpb24uc3RlcHNbMF0uZnJhZ21lbnRJbmRleCArIDE7XG4gICAgICAgICAgICAgIHJldHVybiBsYXlvdXRDb250ZXh0XG4gICAgICAgICAgICAgICAgLnNldEN1cnJlbnQoY2VsbE5vZGVDb250ZXh0LCBmYWxzZSlcbiAgICAgICAgICAgICAgICAudGhlbkFzeW5jKCgpID0+IHtcbiAgICAgICAgICAgICAgICAgIGNvbnN0IGJyZWFrQ2h1bmtQb3NpdGlvbiA9XG4gICAgICAgICAgICAgICAgICAgIGNlbGxCcmVha1Bvc2l0aW9uLmJyZWFrQ2h1bmtQb3NpdGlvbjtcbiAgICAgICAgICAgICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgY2VsbC5jb2xTcGFuOyBpKyspIHtcbiAgICAgICAgICAgICAgICAgICAgb2NjdXBpZWRTbG90SW5kaWNlcy5wdXNoKGNvbHVtbkluZGV4ICsgaSk7XG4gICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICBjb2x1bW5JbmRleCArPSBjZWxsLmNvbFNwYW47XG4gICAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5sYXlvdXRDZWxsKFxuICAgICAgICAgICAgICAgICAgICBjZWxsLFxuICAgICAgICAgICAgICAgICAgICBjZWxsTm9kZUNvbnRleHQsXG4gICAgICAgICAgICAgICAgICAgIGJyZWFrQ2h1bmtQb3NpdGlvbixcbiAgICAgICAgICAgICAgICAgICkudGhlbkFzeW5jKCgpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgKGNlbGxOb2RlQ29udGV4dC52aWV3Tm9kZSBhcyBIVE1MVGFibGVDZWxsRWxlbWVudCkucm93U3BhbiA9XG4gICAgICAgICAgICAgICAgICAgICAgY2VsbC5yb3dJbmRleCArXG4gICAgICAgICAgICAgICAgICAgICAgY2VsbC5yb3dTcGFuIC1cbiAgICAgICAgICAgICAgICAgICAgICB0aGlzLmN1cnJlbnRSb3dJbmRleCArXG4gICAgICAgICAgICAgICAgICAgICAgcm93Q291bnQgLVxuICAgICAgICAgICAgICAgICAgICAgIHNwYW5uaW5nQ2VsbFJvd0luZGV4O1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gVGFzay5uZXdSZXN1bHQodHJ1ZSk7XG4gICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgIH0pO1xuICAgICAgICAgIHJldHVybiBjb250MS50aGVuQXN5bmMoKCkgPT4ge1xuICAgICAgICAgICAgYWRkRHVtbXlDZWxsVW50aWwoZm9ybWF0dGluZ0NvbnRleHQuZ2V0Q29sdW1uQ291bnQoKSk7XG4gICAgICAgICAgICBzcGFubmluZ0NlbGxSb3dJbmRleCsrO1xuICAgICAgICAgICAgcmV0dXJuIFRhc2submV3UmVzdWx0KHRydWUpO1xuICAgICAgICAgIH0pO1xuICAgICAgICB9KTtcbiAgICAgIH0pO1xuICAgIH0pO1xuICAgIGNvbnQudGhlbigoKSA9PiB7XG4gICAgICBsYXlvdXRDb250ZXh0XG4gICAgICAgIC5zZXRDdXJyZW50KGN1cnJlbnRSb3csIHRydWUsIHN0YXRlLmF0VW5mb3JjZWRCcmVhaylcbiAgICAgICAgLnRoZW4oKCkgPT4ge1xuICAgICAgICAgIGZyYW1lLmZpbmlzaCh0cnVlKTtcbiAgICAgICAgfSk7XG4gICAgfSk7XG4gICAgcmV0dXJuIGZyYW1lLnJlc3VsdCgpO1xuICB9XG5cbiAgc3RhcnRUYWJsZVJvdyhzdGF0ZTogTGF5b3V0VXRpbC5MYXlvdXRJdGVyYXRvclN0YXRlKTogVGFzay5SZXN1bHQ8Ym9vbGVhbj4ge1xuICAgIGlmICh0aGlzLmluSGVhZGVyIHx8IHRoaXMuaW5Gb290ZXIpIHtcbiAgICAgIHJldHVybiBUYXNrLm5ld1Jlc3VsdCh0cnVlKTtcbiAgICB9XG4gICAgY29uc3Qgbm9kZUNvbnRleHQgPSBzdGF0ZS5ub2RlQ29udGV4dDtcbiAgICBjb25zdCBmb3JtYXR0aW5nQ29udGV4dCA9IHRoaXMuZm9ybWF0dGluZ0NvbnRleHQ7XG4gICAgaWYgKHRoaXMuY3VycmVudFJvd0luZGV4IDwgMCkge1xuICAgICAgQXNzZXJ0cy5hc3NlcnQobm9kZUNvbnRleHQuc291cmNlTm9kZSk7XG4gICAgICB0aGlzLmN1cnJlbnRSb3dJbmRleCA9IGZvcm1hdHRpbmdDb250ZXh0LmZpbmRSb3dJbmRleEJ5U291cmNlTm9kZShcbiAgICAgICAgbm9kZUNvbnRleHQuc291cmNlTm9kZSxcbiAgICAgICk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHRoaXMuY3VycmVudFJvd0luZGV4Kys7XG4gICAgfVxuICAgIHRoaXMuY3VycmVudENvbHVtbkluZGV4ID0gMDtcbiAgICB0aGlzLmluUm93ID0gdHJ1ZTtcbiAgICByZXR1cm4gdGhpcy5sYXlvdXRSb3dTcGFubmluZ0NlbGxzRnJvbVByZXZpb3VzRnJhZ21lbnQoc3RhdGUpLnRoZW5Bc3luYyhcbiAgICAgICgpID0+IHtcbiAgICAgICAgdGhpcy5yZWdpc3RlckNlbGxGcmFnbWVudEluZGV4KCk7XG4gICAgICAgIGNvbnN0IG92ZXJmbG93biA9IHRoaXMuY29sdW1uLmNoZWNrT3ZlcmZsb3dBbmRTYXZlRWRnZUFuZEJyZWFrUG9zaXRpb24oXG4gICAgICAgICAgc3RhdGUubGFzdEFmdGVyTm9kZUNvbnRleHQsXG4gICAgICAgICAgbnVsbCxcbiAgICAgICAgICB0cnVlLFxuICAgICAgICAgIHN0YXRlLmJyZWFrQXRUaGVFZGdlLFxuICAgICAgICApO1xuICAgICAgICBpZiAoXG4gICAgICAgICAgb3ZlcmZsb3duICYmXG4gICAgICAgICAgZm9ybWF0dGluZ0NvbnRleHQuZ2V0Um93U3Bhbm5pbmdDZWxsc092ZXJmbG93aW5nVGhlUm93KFxuICAgICAgICAgICAgdGhpcy5jdXJyZW50Um93SW5kZXggLSAxLFxuICAgICAgICAgICkubGVuZ3RoID09PSAwXG4gICAgICAgICkge1xuICAgICAgICAgIHRoaXMucmVzZXRDb2x1bW4oKTtcbiAgICAgICAgICBub2RlQ29udGV4dC5vdmVyZmxvdyA9IHRydWU7XG4gICAgICAgICAgc3RhdGUuYnJlYWsgPSB0cnVlO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBUYXNrLm5ld1Jlc3VsdCh0cnVlKTtcbiAgICAgIH0sXG4gICAgKTtcbiAgfVxuXG4gIHByaXZhdGUgcmVnaXN0ZXJDZWxsRnJhZ21lbnRJbmRleCgpIHtcbiAgICBjb25zdCBjZWxscyA9IHRoaXMuZm9ybWF0dGluZ0NvbnRleHQuZ2V0Um93QnlJbmRleCh0aGlzLmN1cnJlbnRSb3dJbmRleClcbiAgICAgIC5jZWxscztcbiAgICBjZWxscy5mb3JFYWNoKChjZWxsKSA9PiB7XG4gICAgICBjb25zdCBjZWxsQnJlYWtQb3NpdGlvbiA9IHRoaXMuZm9ybWF0dGluZ0NvbnRleHQuY2VsbEJyZWFrUG9zaXRpb25zW1xuICAgICAgICBjZWxsLmNvbHVtbkluZGV4XG4gICAgICBdO1xuICAgICAgaWYgKFxuICAgICAgICBjZWxsQnJlYWtQb3NpdGlvbiAmJlxuICAgICAgICBjZWxsQnJlYWtQb3NpdGlvbi5jZWxsLmFuY2hvclNsb3QuY29sdW1uSW5kZXggPT1cbiAgICAgICAgICBjZWxsLmFuY2hvclNsb3QuY29sdW1uSW5kZXhcbiAgICAgICkge1xuICAgICAgICBjb25zdCB0ZE5vZGVTdGVwID0gY2VsbEJyZWFrUG9zaXRpb24uY2VsbE5vZGVQb3NpdGlvbi5zdGVwc1swXTtcbiAgICAgICAgY29uc3Qgb2Zmc2V0ID0gKHRoaXMuY29sdW1uXG4gICAgICAgICAgLmxheW91dENvbnRleHQgYXMgVmdlbi5WaWV3RmFjdG9yeSkueG1sZG9jLmdldEVsZW1lbnRPZmZzZXQoXG4gICAgICAgICAgdGROb2RlU3RlcC5ub2RlIGFzIEVsZW1lbnQsXG4gICAgICAgICk7XG4gICAgICAgIExheW91dC5yZWdpc3RlckZyYWdtZW50SW5kZXgob2Zmc2V0LCB0ZE5vZGVTdGVwLmZyYWdtZW50SW5kZXggKyAxLCAxKTtcbiAgICAgIH1cbiAgICB9KTtcbiAgfVxuXG4gIHN0YXJ0VGFibGVDZWxsKHN0YXRlOiBMYXlvdXRVdGlsLkxheW91dEl0ZXJhdG9yU3RhdGUpOiBUYXNrLlJlc3VsdDxib29sZWFuPiB7XG4gICAgaWYgKHRoaXMuaW5IZWFkZXIgfHwgdGhpcy5pbkZvb3Rlcikge1xuICAgICAgcmV0dXJuIFRhc2submV3UmVzdWx0KHRydWUpO1xuICAgIH1cbiAgICBjb25zdCBub2RlQ29udGV4dCA9IHN0YXRlLm5vZGVDb250ZXh0O1xuICAgIGlmICghdGhpcy5pblJvdykge1xuICAgICAgaWYgKHRoaXMuY3VycmVudFJvd0luZGV4IDwgMCkge1xuICAgICAgICB0aGlzLmN1cnJlbnRSb3dJbmRleCA9IDA7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB0aGlzLmN1cnJlbnRSb3dJbmRleCsrO1xuICAgICAgfVxuICAgICAgdGhpcy5jdXJyZW50Q29sdW1uSW5kZXggPSAwO1xuICAgICAgdGhpcy5pblJvdyA9IHRydWU7XG4gICAgfVxuICAgIGNvbnN0IGNlbGwgPSB0aGlzLmZvcm1hdHRpbmdDb250ZXh0LmdldFJvd0J5SW5kZXgodGhpcy5jdXJyZW50Um93SW5kZXgpXG4gICAgICAuY2VsbHNbdGhpcy5jdXJyZW50Q29sdW1uSW5kZXhdO1xuICAgIGNvbnN0IGFmdGVyTm9kZUNvbnRleHQgPSBub2RlQ29udGV4dC5jb3B5KCkubW9kaWZ5KCk7XG4gICAgYWZ0ZXJOb2RlQ29udGV4dC5hZnRlciA9IHRydWU7XG4gICAgc3RhdGUubm9kZUNvbnRleHQgPSBhZnRlck5vZGVDb250ZXh0O1xuICAgIGNvbnN0IGZyYW1lID0gVGFzay5uZXdGcmFtZTxib29sZWFuPihcInN0YXJ0VGFibGVDZWxsXCIpO1xuICAgIGxldCBjb250OiBUYXNrLlJlc3VsdDxWdHJlZS5DaHVua1Bvc2l0aW9uPjtcbiAgICBpZiAodGhpcy5oYXNCcm9rZW5DZWxsQXRTbG90KGNlbGwuYW5jaG9yU2xvdC5jb2x1bW5JbmRleCkpIHtcbiAgICAgIGNvbnN0IGNlbGxCcmVha1Bvc2l0aW9uID0gdGhpcy5mb3JtYXR0aW5nQ29udGV4dC5jZWxsQnJlYWtQb3NpdGlvbnMuc2hpZnQoKTtcbiAgICAgIG5vZGVDb250ZXh0LmZyYWdtZW50SW5kZXggPVxuICAgICAgICBjZWxsQnJlYWtQb3NpdGlvbi5jZWxsTm9kZVBvc2l0aW9uLnN0ZXBzWzBdLmZyYWdtZW50SW5kZXggKyAxO1xuICAgICAgY29udCA9IFRhc2submV3UmVzdWx0KGNlbGxCcmVha1Bvc2l0aW9uLmJyZWFrQ2h1bmtQb3NpdGlvbik7XG4gICAgfSBlbHNlIHtcbiAgICAgIGNvbnQgPSB0aGlzLmNvbHVtblxuICAgICAgICAubmV4dEluVHJlZShub2RlQ29udGV4dCwgc3RhdGUuYXRVbmZvcmNlZEJyZWFrKVxuICAgICAgICAudGhlbkFzeW5jKChuZXh0Tm9kZUNvbnRleHQpID0+IHtcbiAgICAgICAgICBpZiAobmV4dE5vZGVDb250ZXh0LnZpZXdOb2RlKSB7XG4gICAgICAgICAgICBub2RlQ29udGV4dC52aWV3Tm9kZS5yZW1vdmVDaGlsZChuZXh0Tm9kZUNvbnRleHQudmlld05vZGUpO1xuICAgICAgICAgIH1cbiAgICAgICAgICBjb25zdCBzdGFydE5vZGVQb3NpdGlvbiA9IFZ0cmVlSW1wbC5uZXdOb2RlUG9zaXRpb25Gcm9tTm9kZUNvbnRleHQoXG4gICAgICAgICAgICBuZXh0Tm9kZUNvbnRleHQsXG4gICAgICAgICAgICAwLFxuICAgICAgICAgICk7XG4gICAgICAgICAgcmV0dXJuIFRhc2submV3UmVzdWx0KG5ldyBWdHJlZUltcGwuQ2h1bmtQb3NpdGlvbihzdGFydE5vZGVQb3NpdGlvbikpO1xuICAgICAgICB9KTtcbiAgICB9XG4gICAgY29udC50aGVuKChzdGFydENodW5rUG9zaXRpb24pID0+IHtcbiAgICAgIEFzc2VydHMuYXNzZXJ0KG5vZGVDb250ZXh0KTtcbiAgICAgIHRoaXMubGF5b3V0Q2VsbChjZWxsLCBub2RlQ29udGV4dCwgc3RhcnRDaHVua1Bvc2l0aW9uKS50aGVuKCgpID0+IHtcbiAgICAgICAgdGhpcy5hZnRlck5vbklubGluZUVsZW1lbnROb2RlKHN0YXRlKTtcbiAgICAgICAgdGhpcy5jdXJyZW50Q29sdW1uSW5kZXgrKztcbiAgICAgICAgZnJhbWUuZmluaXNoKHRydWUpO1xuICAgICAgfSk7XG4gICAgfSk7XG4gICAgcmV0dXJuIGZyYW1lLnJlc3VsdCgpO1xuICB9XG5cbiAgc3RhcnROb25JbmxpbmVCb3goXG4gICAgc3RhdGU6IExheW91dFV0aWwuTGF5b3V0SXRlcmF0b3JTdGF0ZSxcbiAgKTogVGFzay5SZXN1bHQ8Ym9vbGVhbj4ge1xuICAgIGNvbnN0IHIgPSBza2lwTmVzdGVkVGFibGUoXG4gICAgICBzdGF0ZSxcbiAgICAgIGdldFRhYmxlRm9ybWF0dGluZ0NvbnRleHQodGhpcy5mb3JtYXR0aW5nQ29udGV4dCksXG4gICAgICB0aGlzLmNvbHVtbixcbiAgICApO1xuICAgIGlmIChyKSB7XG4gICAgICByZXR1cm4gcjtcbiAgICB9XG4gICAgY29uc3Qgbm9kZUNvbnRleHQgPSBzdGF0ZS5ub2RlQ29udGV4dDtcbiAgICBjb25zdCByZXBldGl0aXZlRWxlbWVudHMgPSB0aGlzLmZvcm1hdHRpbmdDb250ZXh0LmdldFJlcGV0aXRpdmVFbGVtZW50cygpO1xuICAgIGNvbnN0IGRpc3BsYXkgPSBub2RlQ29udGV4dC5kaXNwbGF5O1xuICAgIGlmIChcbiAgICAgIGRpc3BsYXkgPT09IFwidGFibGUtaGVhZGVyLWdyb3VwXCIgJiZcbiAgICAgIHJlcGV0aXRpdmVFbGVtZW50cyAmJlxuICAgICAgcmVwZXRpdGl2ZUVsZW1lbnRzLmlzSGVhZGVyU291cmNlTm9kZShub2RlQ29udGV4dC5zb3VyY2VOb2RlKVxuICAgICkge1xuICAgICAgdGhpcy5pbkhlYWRlciA9IHRydWU7XG4gICAgICByZXR1cm4gVGFzay5uZXdSZXN1bHQodHJ1ZSk7XG4gICAgfSBlbHNlIGlmIChcbiAgICAgIGRpc3BsYXkgPT09IFwidGFibGUtZm9vdGVyLWdyb3VwXCIgJiZcbiAgICAgIHJlcGV0aXRpdmVFbGVtZW50cyAmJlxuICAgICAgcmVwZXRpdGl2ZUVsZW1lbnRzLmlzRm9vdGVyU291cmNlTm9kZShub2RlQ29udGV4dC5zb3VyY2VOb2RlKVxuICAgICkge1xuICAgICAgdGhpcy5pbkZvb3RlciA9IHRydWU7XG4gICAgICByZXR1cm4gVGFzay5uZXdSZXN1bHQodHJ1ZSk7XG4gICAgfSBlbHNlIGlmIChkaXNwbGF5ID09PSBcInRhYmxlLXJvd1wiKSB7XG4gICAgICByZXR1cm4gdGhpcy5zdGFydFRhYmxlUm93KHN0YXRlKTtcbiAgICB9IGVsc2UgaWYgKGRpc3BsYXkgPT09IFwidGFibGUtY2VsbFwiKSB7XG4gICAgICByZXR1cm4gdGhpcy5zdGFydFRhYmxlQ2VsbChzdGF0ZSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiBUYXNrLm5ld1Jlc3VsdCh0cnVlKTtcbiAgICB9XG4gIH1cblxuICBlbmROb25JbmxpbmVCb3goc3RhdGU6IExheW91dFV0aWwuTGF5b3V0SXRlcmF0b3JTdGF0ZSk6IFRhc2suUmVzdWx0PGJvb2xlYW4+IHtcbiAgICBjb25zdCBub2RlQ29udGV4dCA9IHN0YXRlLm5vZGVDb250ZXh0O1xuICAgIGNvbnN0IGRpc3BsYXkgPSBub2RlQ29udGV4dC5kaXNwbGF5O1xuICAgIGlmIChkaXNwbGF5ID09PSBcInRhYmxlLXJvd1wiKSB7XG4gICAgICB0aGlzLmluUm93ID0gZmFsc2U7XG4gICAgICBpZiAoIXRoaXMuaW5IZWFkZXIgJiYgIXRoaXMuaW5Gb290ZXIpIHtcbiAgICAgICAgY29uc3QgYmVmb3JlTm9kZUNvbnRleHQgPSBub2RlQ29udGV4dC5jb3B5KCkubW9kaWZ5KCk7XG4gICAgICAgIGJlZm9yZU5vZGVDb250ZXh0LmFmdGVyID0gZmFsc2U7XG4gICAgICAgIGNvbnN0IGJwID0gbmV3IEluc2lkZVRhYmxlUm93QnJlYWtQb3NpdGlvbihcbiAgICAgICAgICB0aGlzLmN1cnJlbnRSb3dJbmRleCxcbiAgICAgICAgICBiZWZvcmVOb2RlQ29udGV4dCxcbiAgICAgICAgICB0aGlzLmZvcm1hdHRpbmdDb250ZXh0LFxuICAgICAgICApO1xuICAgICAgICB0aGlzLmNvbHVtbi5icmVha1Bvc2l0aW9ucy5wdXNoKGJwKTtcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIFRhc2submV3UmVzdWx0KHRydWUpO1xuICB9XG5cbiAgYWZ0ZXJOb25JbmxpbmVFbGVtZW50Tm9kZShcbiAgICBzdGF0ZTogTGF5b3V0VXRpbC5MYXlvdXRJdGVyYXRvclN0YXRlLFxuICApOiB2b2lkIHwgVGFzay5SZXN1bHQ8Ym9vbGVhbj4ge1xuICAgIGNvbnN0IG5vZGVDb250ZXh0ID0gc3RhdGUubm9kZUNvbnRleHQ7XG4gICAgY29uc3QgcmVwZXRpdGl2ZUVsZW1lbnRzID0gdGhpcy5mb3JtYXR0aW5nQ29udGV4dC5nZXRSZXBldGl0aXZlRWxlbWVudHMoKTtcbiAgICBjb25zdCBkaXNwbGF5ID0gbm9kZUNvbnRleHQuZGlzcGxheTtcbiAgICBpZiAoZGlzcGxheSA9PT0gXCJ0YWJsZS1oZWFkZXItZ3JvdXBcIikge1xuICAgICAgaWYgKFxuICAgICAgICByZXBldGl0aXZlRWxlbWVudHMgJiZcbiAgICAgICAgIXJlcGV0aXRpdmVFbGVtZW50cy5hbGxvd0luc2VydFJlcGVhdGl0aXZlRWxlbWVudHMgJiZcbiAgICAgICAgcmVwZXRpdGl2ZUVsZW1lbnRzLmlzSGVhZGVyU291cmNlTm9kZShub2RlQ29udGV4dC5zb3VyY2VOb2RlKVxuICAgICAgKSB7XG4gICAgICAgIHRoaXMuaW5IZWFkZXIgPSBmYWxzZTtcbiAgICAgICAgbm9kZUNvbnRleHQudmlld05vZGUucGFyZW50Tm9kZS5yZW1vdmVDaGlsZChub2RlQ29udGV4dC52aWV3Tm9kZSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBCYXNlLnNldENTU1Byb3BlcnR5KFxuICAgICAgICAgIG5vZGVDb250ZXh0LnZpZXdOb2RlIGFzIEVsZW1lbnQsXG4gICAgICAgICAgXCJkaXNwbGF5XCIsXG4gICAgICAgICAgXCJ0YWJsZS1yb3ctZ3JvdXBcIixcbiAgICAgICAgKTtcbiAgICAgIH1cbiAgICB9IGVsc2UgaWYgKGRpc3BsYXkgPT09IFwidGFibGUtZm9vdGVyLWdyb3VwXCIpIHtcbiAgICAgIGlmIChcbiAgICAgICAgcmVwZXRpdGl2ZUVsZW1lbnRzICYmXG4gICAgICAgICFyZXBldGl0aXZlRWxlbWVudHMuYWxsb3dJbnNlcnRSZXBlYXRpdGl2ZUVsZW1lbnRzICYmXG4gICAgICAgIHJlcGV0aXRpdmVFbGVtZW50cy5pc0Zvb3RlclNvdXJjZU5vZGUobm9kZUNvbnRleHQuc291cmNlTm9kZSlcbiAgICAgICkge1xuICAgICAgICB0aGlzLmluRm9vdGVyID0gZmFsc2U7XG4gICAgICAgIG5vZGVDb250ZXh0LnZpZXdOb2RlLnBhcmVudE5vZGUucmVtb3ZlQ2hpbGQobm9kZUNvbnRleHQudmlld05vZGUpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgQmFzZS5zZXRDU1NQcm9wZXJ0eShcbiAgICAgICAgICBub2RlQ29udGV4dC52aWV3Tm9kZSBhcyBFbGVtZW50LFxuICAgICAgICAgIFwiZGlzcGxheVwiLFxuICAgICAgICAgIFwidGFibGUtcm93LWdyb3VwXCIsXG4gICAgICAgICk7XG4gICAgICB9XG4gICAgfVxuICAgIGlmIChkaXNwbGF5ICYmIFRhYmxlTGF5b3V0U3RyYXRlZ3kuaWdub3JlTGlzdFtkaXNwbGF5XSkge1xuICAgICAgbm9kZUNvbnRleHQudmlld05vZGUucGFyZW50Tm9kZS5yZW1vdmVDaGlsZChub2RlQ29udGV4dC52aWV3Tm9kZSk7XG4gICAgfSBlbHNlIGlmIChcbiAgICAgIG5vZGVDb250ZXh0LnNvdXJjZU5vZGUgPT09IHRoaXMuZm9ybWF0dGluZ0NvbnRleHQudGFibGVTb3VyY2VOb2RlXG4gICAgKSB7XG4gICAgICBub2RlQ29udGV4dC5vdmVyZmxvdyA9IHRoaXMuY29sdW1uLmNoZWNrT3ZlcmZsb3dBbmRTYXZlRWRnZShcbiAgICAgICAgbm9kZUNvbnRleHQsXG4gICAgICAgIG51bGwsXG4gICAgICApO1xuICAgICAgdGhpcy5yZXNldENvbHVtbigpO1xuICAgICAgc3RhdGUuYnJlYWsgPSB0cnVlO1xuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gc3VwZXIuYWZ0ZXJOb25JbmxpbmVFbGVtZW50Tm9kZShzdGF0ZSk7XG4gICAgfVxuICAgIHJldHVybiBUYXNrLm5ld1Jlc3VsdCh0cnVlKTtcbiAgfVxufVxuXG50eXBlIFRhYmxlTGF5b3V0T3B0aW9uID0ge1xuICBjYWxjdWxhdGVCcmVha1Bvc2l0aW9uc0luc2lkZTogYm9vbGVhbjtcbn07XG5jb25zdCB0YWJsZUxheW91dE9wdGlvbkNhY2hlOiB7XG4gIHJvb3Q6IE5vZGU7XG4gIHRhYmxlTGF5b3V0T3B0aW9uOiBUYWJsZUxheW91dE9wdGlvbjtcbn1bXSA9IFtdO1xuXG5mdW5jdGlvbiBnZXRUYWJsZUxheW91dE9wdGlvbihcbiAgdGFibGVSb290U291cmNlTm9kZTogTm9kZSxcbik6IFRhYmxlTGF5b3V0T3B0aW9uIHwgbnVsbCB7XG4gIGNvbnN0IGkgPSB0YWJsZUxheW91dE9wdGlvbkNhY2hlLmZpbmRJbmRleChcbiAgICAoYykgPT4gYy5yb290ID09PSB0YWJsZVJvb3RTb3VyY2VOb2RlLFxuICApO1xuICBjb25zdCBwYWlyID0gdGFibGVMYXlvdXRPcHRpb25DYWNoZVtpXTtcbiAgcmV0dXJuIHBhaXIgPyBwYWlyLnRhYmxlTGF5b3V0T3B0aW9uIDogbnVsbDtcbn1cblxuZnVuY3Rpb24gY2xlYXJUYWJsZUxheW91dE9wdGlvbkNhY2hlKHRhYmxlUm9vdFNvdXJjZU5vZGU6IE5vZGUpOiB2b2lkIHtcbiAgY29uc3QgaSA9IHRhYmxlTGF5b3V0T3B0aW9uQ2FjaGUuZmluZEluZGV4KFxuICAgIChjKSA9PiBjLnJvb3QgPT09IHRhYmxlUm9vdFNvdXJjZU5vZGUsXG4gICk7XG4gIGlmIChpID49IDApIHtcbiAgICB0YWJsZUxheW91dE9wdGlvbkNhY2hlLnNwbGljZShpLCAxKTtcbiAgfVxufVxuXG5leHBvcnQgY2xhc3MgVGFibGVMYXlvdXRQcm9jZXNzb3IgaW1wbGVtZW50cyBMYXlvdXRQcm9jZXNzb3IuTGF5b3V0UHJvY2Vzc29yIHtcbiAgcHJpdmF0ZSBsYXlvdXRFbnRpcmVUYWJsZShcbiAgICBub2RlQ29udGV4dDogVnRyZWUuTm9kZUNvbnRleHQsXG4gICAgY29sdW1uOiBMYXlvdXQuQ29sdW1uLFxuICApOiBUYXNrLlJlc3VsdDxWdHJlZS5Ob2RlQ29udGV4dD4ge1xuICAgIGNvbnN0IGZvcm1hdHRpbmdDb250ZXh0ID0gZ2V0VGFibGVGb3JtYXR0aW5nQ29udGV4dChcbiAgICAgIG5vZGVDb250ZXh0LmZvcm1hdHRpbmdDb250ZXh0LFxuICAgICk7XG4gICAgY29uc3Qgc3RyYXRlZ3kgPSBuZXcgRW50aXJlVGFibGVMYXlvdXRTdHJhdGVneShmb3JtYXR0aW5nQ29udGV4dCwgY29sdW1uKTtcbiAgICBjb25zdCBpdGVyYXRvciA9IG5ldyBMYXlvdXRVdGlsLkxheW91dEl0ZXJhdG9yKFxuICAgICAgc3RyYXRlZ3ksXG4gICAgICBjb2x1bW4ubGF5b3V0Q29udGV4dCxcbiAgICApO1xuICAgIHJldHVybiBpdGVyYXRvci5pdGVyYXRlKG5vZGVDb250ZXh0KTtcbiAgfVxuXG4gIHByaXZhdGUgZ2V0Q29sdW1uV2lkdGhzKFxuICAgIGxhc3RSb3c6IEVsZW1lbnQsXG4gICAgY29sdW1uQ291bnQ6IG51bWJlcixcbiAgICB2ZXJ0aWNhbDogYm9vbGVhbixcbiAgICBjbGllbnRMYXlvdXQ6IFZ0cmVlLkNsaWVudExheW91dCxcbiAgKTogbnVtYmVyW10ge1xuICAgIGNvbnN0IGRvYyA9IGxhc3RSb3cub3duZXJEb2N1bWVudDtcbiAgICBjb25zdCBkdW1teVJvdyA9IGRvYy5jcmVhdGVFbGVtZW50KFwidHJcIik7XG4gICAgY29uc3QgZHVtbXlDZWxscyA9IFtdO1xuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgY29sdW1uQ291bnQ7IGkrKykge1xuICAgICAgY29uc3QgY2VsbCA9IGRvYy5jcmVhdGVFbGVtZW50KFwidGRcIik7XG4gICAgICBkdW1teVJvdy5hcHBlbmRDaGlsZChjZWxsKTtcbiAgICAgIGR1bW15Q2VsbHMucHVzaChjZWxsKTtcbiAgICB9XG4gICAgbGFzdFJvdy5wYXJlbnROb2RlLmluc2VydEJlZm9yZShkdW1teVJvdywgbGFzdFJvdy5uZXh0U2libGluZyk7XG4gICAgY29uc3QgY29sV2lkdGhzID0gZHVtbXlDZWxscy5tYXAoKGNlbGwpID0+IHtcbiAgICAgIGNvbnN0IHJlY3QgPSBjbGllbnRMYXlvdXQuZ2V0RWxlbWVudENsaWVudFJlY3QoY2VsbCk7XG4gICAgICByZXR1cm4gdmVydGljYWwgPyByZWN0W1wiaGVpZ2h0XCJdIDogcmVjdFtcIndpZHRoXCJdO1xuICAgIH0pO1xuICAgIGxhc3RSb3cucGFyZW50Tm9kZS5yZW1vdmVDaGlsZChkdW1teVJvdyk7XG4gICAgcmV0dXJuIGNvbFdpZHRocztcbiAgfVxuXG4gIHByaXZhdGUgZ2V0Q29sR3JvdXBFbGVtZW50cyh0YWJsZUVsZW1lbnQ6IEVsZW1lbnQpOiBFbGVtZW50W10ge1xuICAgIGNvbnN0IGNvbEdyb3VwcyA9IFtdO1xuICAgIGxldCBjaGlsZCA9IHRhYmxlRWxlbWVudC5maXJzdEVsZW1lbnRDaGlsZDtcbiAgICB3aGlsZSAoY2hpbGQpIHtcbiAgICAgIGlmIChjaGlsZC5sb2NhbE5hbWUgPT09IFwiY29sZ3JvdXBcIikge1xuICAgICAgICBjb2xHcm91cHMucHVzaChjaGlsZCk7XG4gICAgICB9XG4gICAgICBjaGlsZCA9IGNoaWxkLm5leHRFbGVtZW50U2libGluZztcbiAgICB9XG4gICAgcmV0dXJuIGNvbEdyb3VwcztcbiAgfVxuXG4gIHByaXZhdGUgbm9ybWFsaXplQW5kR2V0Q29sRWxlbWVudHMoY29sR3JvdXBzOiBFbGVtZW50W10pOiBFbGVtZW50W10ge1xuICAgIGNvbnN0IGNvbHMgPSBbXTtcbiAgICBjb2xHcm91cHMuZm9yRWFjaCgoY29sR3JvdXApID0+IHtcbiAgICAgIC8vIFJlcGxhY2UgY29sZ3JvdXBbc3Bhbj1uXSB3aXRoIGNvbGdyb3VwIHdpdGggbiBjb2wgZWxlbWVudHNcbiAgICAgIGxldCBzcGFuID0gKGNvbEdyb3VwIGFzIGFueSkuc3BhbjtcbiAgICAgIGNvbEdyb3VwLnJlbW92ZUF0dHJpYnV0ZShcInNwYW5cIik7XG4gICAgICBsZXQgY29sID0gY29sR3JvdXAuZmlyc3RFbGVtZW50Q2hpbGQ7XG4gICAgICB3aGlsZSAoY29sKSB7XG4gICAgICAgIGlmIChjb2wubG9jYWxOYW1lID09PSBcImNvbFwiKSB7XG4gICAgICAgICAgLy8gUmVwbGFjZSBjb2xbc3Bhbj1uXSB3aXRoIG4gY29sIGVsZW1lbnRzXG4gICAgICAgICAgbGV0IHMgPSAoY29sIGFzIGFueSkuc3BhbjtcbiAgICAgICAgICBjb2wucmVtb3ZlQXR0cmlidXRlKFwic3BhblwiKTtcbiAgICAgICAgICBzcGFuIC09IHM7XG4gICAgICAgICAgd2hpbGUgKHMtLSA+IDEpIHtcbiAgICAgICAgICAgIGNvbnN0IGNsb25lZCA9IGNvbC5jbG9uZU5vZGUodHJ1ZSk7XG4gICAgICAgICAgICBjb2xHcm91cC5pbnNlcnRCZWZvcmUoY2xvbmVkLCBjb2wpO1xuICAgICAgICAgICAgY29scy5wdXNoKGNsb25lZCk7XG4gICAgICAgICAgfVxuICAgICAgICAgIGNvbHMucHVzaChjb2wpO1xuICAgICAgICB9XG4gICAgICAgIGNvbCA9IGNvbC5uZXh0RWxlbWVudFNpYmxpbmc7XG4gICAgICB9XG4gICAgICB3aGlsZSAoc3Bhbi0tID4gMCkge1xuICAgICAgICBjb2wgPSBjb2xHcm91cC5vd25lckRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJjb2xcIik7XG4gICAgICAgIGNvbEdyb3VwLmFwcGVuZENoaWxkKGNvbCk7XG4gICAgICAgIGNvbHMucHVzaChjb2wpO1xuICAgICAgfVxuICAgIH0pO1xuICAgIHJldHVybiBjb2xzO1xuICB9XG5cbiAgcHJpdmF0ZSBhZGRNaXNzaW5nQ29sRWxlbWVudHMoXG4gICAgY29sczogRWxlbWVudFtdLFxuICAgIGNvbEdyb3VwczogRWxlbWVudFtdLFxuICAgIGNvbHVtbkNvdW50OiBudW1iZXIsXG4gICAgdGFibGVFbGVtZW50OiBFbGVtZW50LFxuICApIHtcbiAgICBpZiAoY29scy5sZW5ndGggPCBjb2x1bW5Db3VudCkge1xuICAgICAgY29uc3QgY29sR3JvdXAgPSB0YWJsZUVsZW1lbnQub3duZXJEb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiY29sZ3JvdXBcIik7XG4gICAgICBjb2xHcm91cHMucHVzaChjb2xHcm91cCk7XG4gICAgICBmb3IgKGxldCBpID0gY29scy5sZW5ndGg7IGkgPCBjb2x1bW5Db3VudDsgaSsrKSB7XG4gICAgICAgIGNvbnN0IGNvbCA9IHRhYmxlRWxlbWVudC5vd25lckRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJjb2xcIik7XG4gICAgICAgIGNvbEdyb3VwLmFwcGVuZENoaWxkKGNvbCk7XG4gICAgICAgIGNvbHMucHVzaChjb2wpO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAgKiBNZWFzdXJlIHdpZHRoIG9mIGNvbHVtbnMgYW5kIG5vcm1hbGl6ZSBjb2xncm91cCBhbmQgY29sIGVsZW1lbnRzIHNvIHRoYXRcbiAgICogZWFjaCBjb2x1bW4gaGFzIGEgY29ycmVzcG9uZGluZyBjb2wgZWxlbWVudCB3aXRoIHRoZSB3aWR0aCBzcGVjaWZpZWQuXG4gICAqL1xuICBub3JtYWxpemVDb2xHcm91cHMoXG4gICAgZm9ybWF0dGluZ0NvbnRleHQ6IFRhYmxlRm9ybWF0dGluZ0NvbnRleHQsXG4gICAgdGFibGVFbGVtZW50OiBFbGVtZW50LFxuICAgIGNvbHVtbjogTGF5b3V0LkNvbHVtbixcbiAgKSB7XG4gICAgY29uc3QgdmVydGljYWwgPSBmb3JtYXR0aW5nQ29udGV4dC52ZXJ0aWNhbDtcbiAgICBjb25zdCBsYXN0Um93ID0gZm9ybWF0dGluZ0NvbnRleHQubGFzdFJvd1ZpZXdOb2RlO1xuICAgIGlmICghbGFzdFJvdykge1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBBc3NlcnRzLmFzc2VydChsYXN0Um93KTtcbiAgICBmb3JtYXR0aW5nQ29udGV4dC5sYXN0Um93Vmlld05vZGUgPSBudWxsO1xuICAgIGNvbnN0IGRvYyA9IGxhc3RSb3cub3duZXJEb2N1bWVudDtcbiAgICBjb25zdCBmcmFnbWVudCA9IGRvYy5jcmVhdGVEb2N1bWVudEZyYWdtZW50KCk7XG5cbiAgICAvLyBDb3VudCBjb2x1bW5zXG4gICAgY29uc3QgY29sdW1uQ291bnQgPSBmb3JtYXR0aW5nQ29udGV4dC5nZXRDb2x1bW5Db3VudCgpO1xuICAgIGlmICghKGNvbHVtbkNvdW50ID4gMCkpIHtcbiAgICAgIGZvcm1hdHRpbmdDb250ZXh0LmNvbEdyb3VwcyA9IGZyYWdtZW50O1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIC8vIE1lYXN1cmUgY29sdW1uIHdpZHRoc1xuICAgIGNvbnN0IGNvbFdpZHRocyA9IChmb3JtYXR0aW5nQ29udGV4dC5jb2xXaWR0aHMgPSB0aGlzLmdldENvbHVtbldpZHRocyhcbiAgICAgIGxhc3RSb3csXG4gICAgICBjb2x1bW5Db3VudCxcbiAgICAgIHZlcnRpY2FsLFxuICAgICAgY29sdW1uLmNsaWVudExheW91dCxcbiAgICApKTtcblxuICAgIC8vIE5vcm1hbGl6ZSBjb2xncm91cCBhbmQgY29sIGVsZW1lbnRzXG4gICAgY29uc3QgY29sR3JvdXBzID0gdGhpcy5nZXRDb2xHcm91cEVsZW1lbnRzKHRhYmxlRWxlbWVudCk7XG4gICAgY29uc3QgY29scyA9IHRoaXMubm9ybWFsaXplQW5kR2V0Q29sRWxlbWVudHMoY29sR3JvdXBzKTtcblxuICAgIC8vIEFkZCBtaXNzaW5nIGNvbCBlbGVtZW50cyBmb3IgcmVtYWluaW5nIGNvbHVtbnNcbiAgICB0aGlzLmFkZE1pc3NpbmdDb2xFbGVtZW50cyhjb2xzLCBjb2xHcm91cHMsIGNvbHVtbkNvdW50LCB0YWJsZUVsZW1lbnQpO1xuXG4gICAgLy8gQXNzaWduIHdpZHRoIHRvIGNvbCBlbGVtZW50c1xuICAgIGNvbHMuZm9yRWFjaCgoY29sLCBpKSA9PiB7XG4gICAgICBCYXNlLnNldENTU1Byb3BlcnR5KFxuICAgICAgICBjb2wsXG4gICAgICAgIHZlcnRpY2FsID8gXCJoZWlnaHRcIiA6IFwid2lkdGhcIixcbiAgICAgICAgYCR7Y29sV2lkdGhzW2ldfXB4YCxcbiAgICAgICk7XG4gICAgfSk7XG4gICAgY29sR3JvdXBzLmZvckVhY2goKGNvbEdyb3VwKSA9PiB7XG4gICAgICBmcmFnbWVudC5hcHBlbmRDaGlsZChjb2xHcm91cC5jbG9uZU5vZGUodHJ1ZSkpO1xuICAgIH0pO1xuICAgIGZvcm1hdHRpbmdDb250ZXh0LmNvbEdyb3VwcyA9IGZyYWdtZW50O1xuICB9XG5cbiAgZG9Jbml0aWFsTGF5b3V0KFxuICAgIG5vZGVDb250ZXh0OiBWdHJlZS5Ob2RlQ29udGV4dCxcbiAgICBjb2x1bW46IExheW91dC5Db2x1bW4sXG4gICk6IFRhc2suUmVzdWx0PFZ0cmVlLk5vZGVDb250ZXh0PiB7XG4gICAgY29uc3QgZm9ybWF0dGluZ0NvbnRleHQgPSBnZXRUYWJsZUZvcm1hdHRpbmdDb250ZXh0KFxuICAgICAgbm9kZUNvbnRleHQuZm9ybWF0dGluZ0NvbnRleHQsXG4gICAgKTtcbiAgICBmb3JtYXR0aW5nQ29udGV4dC52ZXJ0aWNhbCA9IG5vZGVDb250ZXh0LnZlcnRpY2FsO1xuICAgIGZvcm1hdHRpbmdDb250ZXh0LmluaXRpYWxpemVSZXBldGl0aXZlRWxlbWVudHMobm9kZUNvbnRleHQudmVydGljYWwpO1xuICAgIEFzc2VydHMuYXNzZXJ0KG5vZGVDb250ZXh0LnNvdXJjZU5vZGUpO1xuICAgIGNvbnN0IHRhYmxlTGF5b3V0T3B0aW9uID0gZ2V0VGFibGVMYXlvdXRPcHRpb24obm9kZUNvbnRleHQuc291cmNlTm9kZSk7XG4gICAgY2xlYXJUYWJsZUxheW91dE9wdGlvbkNhY2hlKG5vZGVDb250ZXh0LnNvdXJjZU5vZGUpO1xuICAgIGNvbnN0IGZyYW1lID0gVGFzay5uZXdGcmFtZTxWdHJlZS5Ob2RlQ29udGV4dD4oXG4gICAgICBcIlRhYmxlTGF5b3V0UHJvY2Vzc29yLmRvSW5pdGlhbExheW91dFwiLFxuICAgICk7XG4gICAgY29uc3QgaW5pdGlhbE5vZGVDb250ZXh0ID0gbm9kZUNvbnRleHQuY29weSgpO1xuICAgIHRoaXMubGF5b3V0RW50aXJlVGFibGUobm9kZUNvbnRleHQsIGNvbHVtbikudGhlbigobm9kZUNvbnRleHRBZnRlcikgPT4ge1xuICAgICAgY29uc3QgdGFibGVFbGVtZW50ID0gbm9kZUNvbnRleHRBZnRlci52aWV3Tm9kZSBhcyBFbGVtZW50O1xuICAgICAgY29uc3QgdGFibGVCQm94ID0gY29sdW1uLmNsaWVudExheW91dC5nZXRFbGVtZW50Q2xpZW50UmVjdCh0YWJsZUVsZW1lbnQpO1xuICAgICAgbGV0IGVkZ2UgPSBjb2x1bW4udmVydGljYWwgPyB0YWJsZUJCb3gubGVmdCA6IHRhYmxlQkJveC5ib3R0b207XG4gICAgICBlZGdlICs9XG4gICAgICAgIChjb2x1bW4udmVydGljYWwgPyAtMSA6IDEpICpcbiAgICAgICAgQnJlYWtQb3NpdGlvbi5jYWxjdWxhdGVPZmZzZXQoXG4gICAgICAgICAgbm9kZUNvbnRleHQsXG4gICAgICAgICAgY29sdW1uLmNvbGxlY3RFbGVtZW50c09mZnNldCgpLFxuICAgICAgICApLmN1cnJlbnQ7XG4gICAgICBpZiAoXG4gICAgICAgICFjb2x1bW4uaXNPdmVyZmxvd24oZWRnZSkgJiZcbiAgICAgICAgKCF0YWJsZUxheW91dE9wdGlvbiB8fCAhdGFibGVMYXlvdXRPcHRpb24uY2FsY3VsYXRlQnJlYWtQb3NpdGlvbnNJbnNpZGUpXG4gICAgICApIHtcbiAgICAgICAgY29sdW1uLmJyZWFrUG9zaXRpb25zLnB1c2goXG4gICAgICAgICAgbmV3IEVudGlyZVRhYmxlQnJlYWtQb3NpdGlvbihpbml0aWFsTm9kZUNvbnRleHQpLFxuICAgICAgICApO1xuICAgICAgICBmcmFtZS5maW5pc2gobm9kZUNvbnRleHRBZnRlcik7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cbiAgICAgIHRoaXMubm9ybWFsaXplQ29sR3JvdXBzKGZvcm1hdHRpbmdDb250ZXh0LCB0YWJsZUVsZW1lbnQsIGNvbHVtbik7XG4gICAgICBmb3JtYXR0aW5nQ29udGV4dC51cGRhdGVDZWxsU2l6ZXMoY29sdW1uLmNsaWVudExheW91dCk7XG4gICAgICBmcmFtZS5maW5pc2gobnVsbCk7XG4gICAgfSk7XG4gICAgcmV0dXJuIGZyYW1lLnJlc3VsdCgpO1xuICB9XG5cbiAgYWRkQ2FwdGlvbnMoXG4gICAgZm9ybWF0dGluZ0NvbnRleHQ6IFRhYmxlRm9ybWF0dGluZ0NvbnRleHQsXG4gICAgcm9vdFZpZXdOb2RlOiBFbGVtZW50LFxuICAgIGZpcnN0Q2hpbGQ6IE5vZGUgfCBudWxsLFxuICApIHtcbiAgICBjb25zdCBjYXB0aW9ucyA9IGZvcm1hdHRpbmdDb250ZXh0LmNhcHRpb25zO1xuICAgIGNhcHRpb25zLmZvckVhY2goKGNhcHRpb24sIGkpID0+IHtcbiAgICAgIGlmIChjYXB0aW9uKSB7XG4gICAgICAgIHJvb3RWaWV3Tm9kZS5pbnNlcnRCZWZvcmUoY2FwdGlvbi52aWV3Tm9kZSwgZmlyc3RDaGlsZCk7XG4gICAgICAgIGlmIChjYXB0aW9uLnNpZGUgPT09IFwidG9wXCIpIHtcbiAgICAgICAgICBjYXB0aW9uc1tpXSA9IG51bGw7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9KTtcbiAgfVxuXG4gIGFkZENvbEdyb3VwcyhcbiAgICBmb3JtYXR0aW5nQ29udGV4dDogVGFibGVGb3JtYXR0aW5nQ29udGV4dCxcbiAgICByb290Vmlld05vZGU6IEVsZW1lbnQsXG4gICAgZmlyc3RDaGlsZDogTm9kZSB8IG51bGwsXG4gICkge1xuICAgIGlmIChcbiAgICAgIGZvcm1hdHRpbmdDb250ZXh0LmNvbEdyb3VwcyAmJlxuICAgICAgdGhpcy5nZXRDb2xHcm91cEVsZW1lbnRzKHJvb3RWaWV3Tm9kZSkubGVuZ3RoID09PSAwXG4gICAgKSB7XG4gICAgICByb290Vmlld05vZGUuaW5zZXJ0QmVmb3JlKFxuICAgICAgICBmb3JtYXR0aW5nQ29udGV4dC5jb2xHcm91cHMuY2xvbmVOb2RlKHRydWUpLFxuICAgICAgICBmaXJzdENoaWxkLFxuICAgICAgKTtcbiAgICB9XG4gIH1cblxuICByZW1vdmVDb2xHcm91cHMoXG4gICAgZm9ybWF0dGluZ0NvbnRleHQ6IFRhYmxlRm9ybWF0dGluZ0NvbnRleHQsXG4gICAgcm9vdFZpZXdOb2RlOiBFbGVtZW50LFxuICApIHtcbiAgICBpZiAoZm9ybWF0dGluZ0NvbnRleHQuY29sR3JvdXBzICYmIHJvb3RWaWV3Tm9kZSkge1xuICAgICAgY29uc3QgY29sR3JvdXBzID0gdGhpcy5nZXRDb2xHcm91cEVsZW1lbnRzKHJvb3RWaWV3Tm9kZSk7XG4gICAgICBpZiAoY29sR3JvdXBzKSB7XG4gICAgICAgIGNvbEdyb3Vwcy5mb3JFYWNoKChjb2xHcm91cCkgPT4ge1xuICAgICAgICAgIHJvb3RWaWV3Tm9kZS5yZW1vdmVDaGlsZChjb2xHcm91cCk7XG4gICAgICAgIH0pO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIGRvTGF5b3V0KFxuICAgIG5vZGVDb250ZXh0OiBWdHJlZS5Ob2RlQ29udGV4dCxcbiAgICBjb2x1bW46IExheW91dC5Db2x1bW4sXG4gICk6IFRhc2suUmVzdWx0PFZ0cmVlLk5vZGVDb250ZXh0PiB7XG4gICAgY29uc3QgZm9ybWF0dGluZ0NvbnRleHQgPSBnZXRUYWJsZUZvcm1hdHRpbmdDb250ZXh0KFxuICAgICAgbm9kZUNvbnRleHQuZm9ybWF0dGluZ0NvbnRleHQsXG4gICAgKTtcbiAgICBjb25zdCByb290Vmlld05vZGUgPSBmb3JtYXR0aW5nQ29udGV4dC5nZXRSb290Vmlld05vZGUoXG4gICAgICBub2RlQ29udGV4dCxcbiAgICApIGFzIEVsZW1lbnQ7XG4gICAgY29uc3QgZmlyc3RDaGlsZCA9IHJvb3RWaWV3Tm9kZS5maXJzdENoaWxkO1xuICAgIHRoaXMuYWRkQ2FwdGlvbnMoZm9ybWF0dGluZ0NvbnRleHQsIHJvb3RWaWV3Tm9kZSwgZmlyc3RDaGlsZCk7XG4gICAgdGhpcy5hZGRDb2xHcm91cHMoZm9ybWF0dGluZ0NvbnRleHQsIHJvb3RWaWV3Tm9kZSwgZmlyc3RDaGlsZCk7XG4gICAgY29uc3Qgc3RyYXRlZ3kgPSBuZXcgVGFibGVMYXlvdXRTdHJhdGVneShmb3JtYXR0aW5nQ29udGV4dCwgY29sdW1uKTtcbiAgICBjb25zdCBpdGVyYXRvciA9IG5ldyBMYXlvdXRVdGlsLkxheW91dEl0ZXJhdG9yKFxuICAgICAgc3RyYXRlZ3ksXG4gICAgICBjb2x1bW4ubGF5b3V0Q29udGV4dCxcbiAgICApO1xuICAgIGNvbnN0IGZyYW1lID0gVGFzay5uZXdGcmFtZTxWdHJlZS5Ob2RlQ29udGV4dD4oXG4gICAgICBcIlRhYmxlRm9ybWF0dGluZ0NvbnRleHQuZG9MYXlvdXRcIixcbiAgICApO1xuICAgIGl0ZXJhdG9yLml0ZXJhdGUobm9kZUNvbnRleHQpLnRoZW5GaW5pc2goZnJhbWUpO1xuICAgIHJldHVybiBmcmFtZS5yZXN1bHQoKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBAb3ZlcnJpZGVcbiAgICovXG4gIGxheW91dChcbiAgICBub2RlQ29udGV4dDogVnRyZWUuTm9kZUNvbnRleHQsXG4gICAgY29sdW1uOiBMYXlvdXQuQ29sdW1uLFxuICAgIGxlYWRpbmdFZGdlOiBib29sZWFuLFxuICApOiBUYXNrLlJlc3VsdDxWdHJlZS5Ob2RlQ29udGV4dD4ge1xuICAgIGNvbnN0IGZvcm1hdHRpbmdDb250ZXh0ID0gZ2V0VGFibGVGb3JtYXR0aW5nQ29udGV4dChcbiAgICAgIG5vZGVDb250ZXh0LmZvcm1hdHRpbmdDb250ZXh0LFxuICAgICk7XG4gICAgY29uc3Qgcm9vdFZpZXdOb2RlID0gZm9ybWF0dGluZ0NvbnRleHQuZ2V0Um9vdFZpZXdOb2RlKG5vZGVDb250ZXh0KTtcbiAgICBpZiAoIXJvb3RWaWV3Tm9kZSkge1xuICAgICAgcmV0dXJuIGNvbHVtbi5idWlsZERlZXBFbGVtZW50Vmlldyhub2RlQ29udGV4dCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGlmIChsZWFkaW5nRWRnZSkge1xuICAgICAgICBSZXBldGl0aXZlRWxlbWVudEltcGwuYXBwZW5kSGVhZGVyVG9BbmNlc3RvcnMoXG4gICAgICAgICAgbm9kZUNvbnRleHQucGFyZW50LFxuICAgICAgICAgIGNvbHVtbixcbiAgICAgICAgKTtcbiAgICAgIH1cbiAgICAgIHJldHVybiBuZXcgTGF5b3V0UmV0cnllcihmb3JtYXR0aW5nQ29udGV4dCwgdGhpcykubGF5b3V0KFxuICAgICAgICBub2RlQ29udGV4dCxcbiAgICAgICAgY29sdW1uLFxuICAgICAgKTtcbiAgICB9XG4gIH1cblxuICAvKipcbiAgICogQG92ZXJyaWRlXG4gICAqL1xuICBjcmVhdGVFZGdlQnJlYWtQb3NpdGlvbihcbiAgICBwb3NpdGlvbjogVnRyZWUuTm9kZUNvbnRleHQsXG4gICAgYnJlYWtPbkVkZ2U6IHN0cmluZyB8IG51bGwsXG4gICAgb3ZlcmZsb3dzOiBib29sZWFuLFxuICAgIGNvbHVtbkJsb2NrU2l6ZTogbnVtYmVyLFxuICApOiBMYXlvdXRUeXBlLkJyZWFrUG9zaXRpb24ge1xuICAgIHJldHVybiBuZXcgQmV0d2VlblRhYmxlUm93QnJlYWtQb3NpdGlvbihcbiAgICAgIHBvc2l0aW9uLFxuICAgICAgYnJlYWtPbkVkZ2UsXG4gICAgICBvdmVyZmxvd3MsXG4gICAgICBjb2x1bW5CbG9ja1NpemUsXG4gICAgKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBAb3ZlcnJpZGVcbiAgICovXG4gIHN0YXJ0Tm9uSW5saW5lRWxlbWVudE5vZGUobm9kZUNvbnRleHQ6IFZ0cmVlLk5vZGVDb250ZXh0KTogYm9vbGVhbiB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG5cbiAgLyoqXG4gICAqIEBvdmVycmlkZVxuICAgKi9cbiAgYWZ0ZXJOb25JbmxpbmVFbGVtZW50Tm9kZShcbiAgICBub2RlQ29udGV4dDogVnRyZWUuTm9kZUNvbnRleHQsXG4gICAgc3RvcEF0T3ZlcmZsb3c6IGJvb2xlYW4sXG4gICk6IGJvb2xlYW4ge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuXG4gIC8qKlxuICAgKiBAb3ZlcnJpZGVcbiAgICovXG4gIGZpbmlzaEJyZWFrKFxuICAgIGNvbHVtbjogTGF5b3V0LkNvbHVtbixcbiAgICBub2RlQ29udGV4dDogVnRyZWUuTm9kZUNvbnRleHQsXG4gICAgZm9yY2VSZW1vdmVTZWxmOiBib29sZWFuLFxuICAgIGVuZE9mQ29sdW1uOiBib29sZWFuLFxuICApOiBUYXNrLlJlc3VsdDxib29sZWFuPiB7XG4gICAgY29uc3QgZm9ybWF0dGluZ0NvbnRleHQgPSBnZXRUYWJsZUZvcm1hdHRpbmdDb250ZXh0KFxuICAgICAgbm9kZUNvbnRleHQuZm9ybWF0dGluZ0NvbnRleHQsXG4gICAgKTtcbiAgICBpZiAobm9kZUNvbnRleHQuZGlzcGxheSA9PT0gXCJ0YWJsZS1yb3dcIikge1xuICAgICAgQXNzZXJ0cy5hc3NlcnQobm9kZUNvbnRleHQuc291cmNlTm9kZSk7XG4gICAgICBjb25zdCByb3dJbmRleCA9IGZvcm1hdHRpbmdDb250ZXh0LmZpbmRSb3dJbmRleEJ5U291cmNlTm9kZShcbiAgICAgICAgbm9kZUNvbnRleHQuc291cmNlTm9kZSxcbiAgICAgICk7XG4gICAgICBmb3JtYXR0aW5nQ29udGV4dC5jZWxsQnJlYWtQb3NpdGlvbnMgPSBbXTtcbiAgICAgIGxldCBjZWxsczogVGFibGVDZWxsW107XG4gICAgICBpZiAoIW5vZGVDb250ZXh0LmFmdGVyKSB7XG4gICAgICAgIGNlbGxzID0gZm9ybWF0dGluZ0NvbnRleHQuZ2V0Q2VsbHNGYWxsaW5nT25Sb3cocm93SW5kZXgpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgY2VsbHMgPSBmb3JtYXR0aW5nQ29udGV4dC5nZXRSb3dTcGFubmluZ0NlbGxzT3ZlcmZsb3dpbmdUaGVSb3coXG4gICAgICAgICAgcm93SW5kZXgsXG4gICAgICAgICk7XG4gICAgICB9XG4gICAgICBpZiAoY2VsbHMubGVuZ3RoKSB7XG4gICAgICAgIGNvbnN0IGZyYW1lID0gVGFzay5uZXdGcmFtZTxib29sZWFuPihcbiAgICAgICAgICBcIlRhYmxlTGF5b3V0UHJvY2Vzc29yLmZpbmlzaEJyZWFrXCIsXG4gICAgICAgICk7XG4gICAgICAgIGxldCBpID0gMDtcbiAgICAgICAgZnJhbWVcbiAgICAgICAgICAubG9vcFdpdGhGcmFtZSgobG9vcEZyYW1lKSA9PiB7XG4gICAgICAgICAgICBpZiAoaSA9PT0gY2VsbHMubGVuZ3RoKSB7XG4gICAgICAgICAgICAgIGxvb3BGcmFtZS5icmVha0xvb3AoKTtcbiAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY29uc3QgY2VsbCA9IGNlbGxzW2krK107XG4gICAgICAgICAgICBjb25zdCBjZWxsRnJhZ21lbnQgPSBmb3JtYXR0aW5nQ29udGV4dC5nZXRDZWxsRnJhZ21lbnRPZkNlbGwoY2VsbCk7XG4gICAgICAgICAgICBjb25zdCBicmVha05vZGVDb250ZXh0ID0gY2VsbEZyYWdtZW50LmZpbmRBY2NlcHRhYmxlQnJlYWtQb3NpdGlvbigpXG4gICAgICAgICAgICAgIC5ub2RlQ29udGV4dDtcbiAgICAgICAgICAgIEFzc2VydHMuYXNzZXJ0KGJyZWFrTm9kZUNvbnRleHQpO1xuICAgICAgICAgICAgY29uc3QgY2VsbE5vZGVDb250ZXh0ID0gY2VsbEZyYWdtZW50LmNlbGxOb2RlQ29udGV4dDtcbiAgICAgICAgICAgIGNvbnN0IGNlbGxOb2RlUG9zaXRpb24gPSBjZWxsTm9kZUNvbnRleHQudG9Ob2RlUG9zaXRpb24oKTtcbiAgICAgICAgICAgIGNvbnN0IGJyZWFrQ2h1bmtQb3NpdGlvbiA9IG5ldyBWdHJlZUltcGwuQ2h1bmtQb3NpdGlvbihcbiAgICAgICAgICAgICAgYnJlYWtOb2RlQ29udGV4dC50b05vZGVQb3NpdGlvbigpLFxuICAgICAgICAgICAgKTtcbiAgICAgICAgICAgIGZvcm1hdHRpbmdDb250ZXh0LmNlbGxCcmVha1Bvc2l0aW9ucy5wdXNoKHtcbiAgICAgICAgICAgICAgY2VsbE5vZGVQb3NpdGlvbixcbiAgICAgICAgICAgICAgYnJlYWtDaHVua1Bvc2l0aW9uLFxuICAgICAgICAgICAgICBjZWxsLFxuICAgICAgICAgICAgfSBhcyBCcm9rZW5UYWJsZUNlbGxQb3NpdGlvbik7XG4gICAgICAgICAgICBjb25zdCBjZWxsVmlld05vZGUgPSBjZWxsTm9kZUNvbnRleHQudmlld05vZGUgYXMgSFRNTFRhYmxlQ2VsbEVsZW1lbnQ7XG4gICAgICAgICAgICBjZWxsRnJhZ21lbnQuY29sdW1uLmxheW91dENvbnRleHQucHJvY2Vzc0ZyYWdtZW50ZWRCbG9ja0VkZ2UoXG4gICAgICAgICAgICAgIGNlbGxGcmFnbWVudC5jZWxsTm9kZUNvbnRleHQsXG4gICAgICAgICAgICApO1xuICAgICAgICAgICAgaWYgKHJvd0luZGV4IDwgY2VsbC5yb3dJbmRleCArIGNlbGwucm93U3BhbiAtIDEpIHtcbiAgICAgICAgICAgICAgY2VsbFZpZXdOb2RlLnJvd1NwYW4gPSByb3dJbmRleCAtIGNlbGwucm93SW5kZXggKyAxO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKCFjZWxsRnJhZ21lbnQuZW1wdHkpIHtcbiAgICAgICAgICAgICAgY2VsbEZyYWdtZW50LnBzZXVkb0NvbHVtblxuICAgICAgICAgICAgICAgIC5maW5pc2hCcmVhayhicmVha05vZGVDb250ZXh0LCBmYWxzZSwgdHJ1ZSlcbiAgICAgICAgICAgICAgICAudGhlbigoKSA9PiB7XG4gICAgICAgICAgICAgICAgICBBc3NlcnRzLmFzc2VydChjZWxsRnJhZ21lbnQpO1xuICAgICAgICAgICAgICAgICAgYWRqdXN0Q2VsbEhlaWdodChcbiAgICAgICAgICAgICAgICAgICAgY2VsbEZyYWdtZW50LFxuICAgICAgICAgICAgICAgICAgICBmb3JtYXR0aW5nQ29udGV4dCxcbiAgICAgICAgICAgICAgICAgICAgYnJlYWtOb2RlQ29udGV4dCxcbiAgICAgICAgICAgICAgICAgICk7XG4gICAgICAgICAgICAgICAgICBsb29wRnJhbWUuY29udGludWVMb29wKCk7XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICBsb29wRnJhbWUuY29udGludWVMb29wKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSlcbiAgICAgICAgICAudGhlbigoKSA9PiB7XG4gICAgICAgICAgICBjb2x1bW4uY2xlYXJPdmVyZmxvd25WaWV3Tm9kZXMobm9kZUNvbnRleHQsIGZhbHNlKTtcbiAgICAgICAgICAgIGNvbHVtbi5sYXlvdXRDb250ZXh0LnByb2Nlc3NGcmFnbWVudGVkQmxvY2tFZGdlKG5vZGVDb250ZXh0KTtcbiAgICAgICAgICAgIGZvcm1hdHRpbmdDb250ZXh0LmZpbmlzaEZyYWdtZW50KCk7XG4gICAgICAgICAgICBmcmFtZS5maW5pc2godHJ1ZSk7XG4gICAgICAgICAgfSk7XG4gICAgICAgIHJldHVybiBmcmFtZS5yZXN1bHQoKTtcbiAgICAgIH1cbiAgICB9XG4gICAgZm9ybWF0dGluZ0NvbnRleHQuZmluaXNoRnJhZ21lbnQoKTtcbiAgICByZXR1cm4gTGF5b3V0UHJvY2Vzc29yLmJsb2NrTGF5b3V0UHJvY2Vzc29yLmZpbmlzaEJyZWFrKFxuICAgICAgY29sdW1uLFxuICAgICAgbm9kZUNvbnRleHQsXG4gICAgICBmb3JjZVJlbW92ZVNlbGYsXG4gICAgICBlbmRPZkNvbHVtbixcbiAgICApO1xuICB9XG5cbiAgLyoqIEBvdmVycmlkZSAqL1xuICBjbGVhck92ZXJmbG93blZpZXdOb2RlcyhcbiAgICBjb2x1bW46IExheW91dC5Db2x1bW4sXG4gICAgcGFyZW50Tm9kZUNvbnRleHQ6IFZ0cmVlLk5vZGVDb250ZXh0LFxuICAgIG5vZGVDb250ZXh0OiBWdHJlZS5Ob2RlQ29udGV4dCxcbiAgICByZW1vdmVTZWxmOiBib29sZWFuLFxuICApIHtcbiAgICBMYXlvdXRQcm9jZXNzb3IuQmxvY2tMYXlvdXRQcm9jZXNzb3IucHJvdG90eXBlLmNsZWFyT3ZlcmZsb3duVmlld05vZGVzKFxuICAgICAgY29sdW1uLFxuICAgICAgcGFyZW50Tm9kZUNvbnRleHQsXG4gICAgICBub2RlQ29udGV4dCxcbiAgICAgIHJlbW92ZVNlbGYsXG4gICAgKTtcbiAgfVxufVxuXG5mdW5jdGlvbiBhZGp1c3RDZWxsSGVpZ2h0KFxuICBjZWxsRnJhZ21lbnQ6IFRhYmxlQ2VsbEZyYWdtZW50LFxuICBmb3JtYXR0aW5nQ29udGV4dDogVGFibGVGb3JtYXR0aW5nQ29udGV4dCxcbiAgYnJlYWtOb2RlQ29udGV4dDogVnRyZWUuTm9kZUNvbnRleHQsXG4pOiB2b2lkIHtcbiAgY29uc3QgcmVwZXRpdGl2ZUVsZW1lbnRzID0gZm9ybWF0dGluZ0NvbnRleHQuZ2V0UmVwZXRpdGl2ZUVsZW1lbnRzKCk7XG4gIGlmICghcmVwZXRpdGl2ZUVsZW1lbnRzKSB7XG4gICAgcmV0dXJuO1xuICB9XG4gIGNvbnN0IHZlcnRpY2FsID0gZm9ybWF0dGluZ0NvbnRleHQudmVydGljYWw7XG4gIGNvbnN0IGNvbHVtbiA9IGNlbGxGcmFnbWVudC5jb2x1bW47XG4gIGNvbnN0IGNlbGxDb250ZW50RWxlbWVudCA9IGNlbGxGcmFnbWVudC5wc2V1ZG9Db2x1bW4uZ2V0Q29sdW1uRWxlbWVudCgpO1xuICBjb25zdCBjZWxsRWxlbWVudCA9IGNlbGxGcmFnbWVudC5jZWxsTm9kZUNvbnRleHQudmlld05vZGUgYXMgRWxlbWVudDtcbiAgY29uc3QgY2VsbEVsZW1lbnRSZWN0ID0gY29sdW1uLmNsaWVudExheW91dC5nZXRFbGVtZW50Q2xpZW50UmVjdChjZWxsRWxlbWVudCk7XG4gIGNvbnN0IHBhZGRpbmcgPSBjb2x1bW4uZ2V0Q29tcHV0ZWRQYWRkaW5nQm9yZGVyKGNlbGxFbGVtZW50KTtcbiAgaWYgKHZlcnRpY2FsKSB7XG4gICAgY29uc3Qgd2lkdGggPVxuICAgICAgY2VsbEVsZW1lbnRSZWN0LnJpZ2h0IC1cbiAgICAgIGNvbHVtbi5mb290bm90ZUVkZ2UgLVxuICAgICAgcmVwZXRpdGl2ZUVsZW1lbnRzLmNhbGN1bGF0ZU9mZnNldChicmVha05vZGVDb250ZXh0KSAtXG4gICAgICBwYWRkaW5nLnJpZ2h0O1xuICAgIEJhc2Uuc2V0Q1NTUHJvcGVydHkoY2VsbENvbnRlbnRFbGVtZW50LCBcIm1heC13aWR0aFwiLCBgJHt3aWR0aH1weGApO1xuICB9IGVsc2Uge1xuICAgIGNvbnN0IGhlaWdodCA9XG4gICAgICBjb2x1bW4uZm9vdG5vdGVFZGdlIC1cbiAgICAgIHJlcGV0aXRpdmVFbGVtZW50cy5jYWxjdWxhdGVPZmZzZXQoYnJlYWtOb2RlQ29udGV4dCkgLVxuICAgICAgY2VsbEVsZW1lbnRSZWN0LnRvcCAtXG4gICAgICBwYWRkaW5nLnRvcDtcbiAgICBCYXNlLnNldENTU1Byb3BlcnR5KGNlbGxDb250ZW50RWxlbWVudCwgXCJtYXgtaGVpZ2h0XCIsIGAke2hlaWdodH1weGApO1xuICB9XG4gIEJhc2Uuc2V0Q1NTUHJvcGVydHkoY2VsbENvbnRlbnRFbGVtZW50LCBcIm92ZXJmbG93XCIsIFwiaGlkZGVuXCIpO1xufVxuXG5leHBvcnQgY2xhc3MgTGF5b3V0UmV0cnllciBleHRlbmRzIExheW91dFJldHJ5ZXJzLkFic3RyYWN0TGF5b3V0UmV0cnllciB7XG4gIGNvbnN0cnVjdG9yKFxuICAgIHByaXZhdGUgdGFibGVGb3JtYXR0aW5nQ29udGV4dDogVGFibGVGb3JtYXR0aW5nQ29udGV4dCxcbiAgICBwcml2YXRlIHJlYWRvbmx5IHByb2Nlc3NvcjogVGFibGVMYXlvdXRQcm9jZXNzb3IsXG4gICkge1xuICAgIHN1cGVyKCk7XG4gIH1cblxuICAvKipcbiAgICogQG92ZXJyaWRlXG4gICAqL1xuICByZXNvbHZlTGF5b3V0TW9kZShub2RlQ29udGV4dDogVnRyZWUuTm9kZUNvbnRleHQpOiBMYXlvdXRUeXBlLkxheW91dE1vZGUge1xuICAgIGNvbnN0IHJlcGV0aXRpdmVFbGVtZW50cyA9IHRoaXMudGFibGVGb3JtYXR0aW5nQ29udGV4dC5nZXRSZXBldGl0aXZlRWxlbWVudHMoKTtcbiAgICBpZiAoIXJlcGV0aXRpdmVFbGVtZW50cyB8fCAhcmVwZXRpdGl2ZUVsZW1lbnRzLmRvbmVJbml0aWFsTGF5b3V0KSB7XG4gICAgICByZXR1cm4gbmV3IExheW91dEVudGlyZVRhYmxlKHRoaXMudGFibGVGb3JtYXR0aW5nQ29udGV4dCwgdGhpcy5wcm9jZXNzb3IpO1xuICAgIH0gZWxzZSB7XG4gICAgICBpZiAoXG4gICAgICAgIG5vZGVDb250ZXh0LnNvdXJjZU5vZGUgPT09XG4gICAgICAgICAgdGhpcy50YWJsZUZvcm1hdHRpbmdDb250ZXh0LnRhYmxlU291cmNlTm9kZSAmJlxuICAgICAgICAhbm9kZUNvbnRleHQuYWZ0ZXJcbiAgICAgICkge1xuICAgICAgICBpZiAocmVwZXRpdGl2ZUVsZW1lbnRzKSB7XG4gICAgICAgICAgcmVwZXRpdGl2ZUVsZW1lbnRzLnByZXZlbnRTa2lwcGluZ0hlYWRlcigpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICByZXR1cm4gbmV3IExheW91dEZyYWdtZW50ZWRUYWJsZShcbiAgICAgICAgdGhpcy50YWJsZUZvcm1hdHRpbmdDb250ZXh0LFxuICAgICAgICB0aGlzLnByb2Nlc3NvcixcbiAgICAgICk7XG4gICAgfVxuICB9XG5cbiAgLyoqXG4gICAqIEBvdmVycmlkZVxuICAgKi9cbiAgY2xlYXJOb2Rlcyhpbml0aWFsUG9zaXRpb246IFZ0cmVlLk5vZGVDb250ZXh0KSB7XG4gICAgc3VwZXIuY2xlYXJOb2Rlcyhpbml0aWFsUG9zaXRpb24pO1xuICAgIGNvbnN0IHJvb3RWaWV3Tm9kZSA9IHRoaXMudGFibGVGb3JtYXR0aW5nQ29udGV4dC5nZXRSb290Vmlld05vZGUoXG4gICAgICBpbml0aWFsUG9zaXRpb24sXG4gICAgKTtcbiAgICB0aGlzLnByb2Nlc3Nvci5yZW1vdmVDb2xHcm91cHModGhpcy50YWJsZUZvcm1hdHRpbmdDb250ZXh0LCByb290Vmlld05vZGUpO1xuICB9XG5cbiAgLyoqXG4gICAqIEBvdmVycmlkZVxuICAgKi9cbiAgcmVzdG9yZVN0YXRlKG5vZGVDb250ZXh0OiBWdHJlZS5Ob2RlQ29udGV4dCwgY29sdW1uOiBMYXlvdXQuQ29sdW1uKSB7XG4gICAgc3VwZXIucmVzdG9yZVN0YXRlKG5vZGVDb250ZXh0LCBjb2x1bW4pO1xuICAgIHRoaXMudGFibGVGb3JtYXR0aW5nQ29udGV4dC5maW5pc2hGcmFnbWVudCgpO1xuICB9XG59XG5cbmV4cG9ydCBjbGFzcyBMYXlvdXRFbnRpcmVUYWJsZSBleHRlbmRzIFJlcGV0aXRpdmVFbGVtZW50SW1wbC5MYXlvdXRFbnRpcmVCbG9jayB7XG4gIGNvbnN0cnVjdG9yKFxuICAgIGZvcm1hdHRpbmdDb250ZXh0OiBUYWJsZUZvcm1hdHRpbmdDb250ZXh0LFxuICAgIHB1YmxpYyByZWFkb25seSBwcm9jZXNzb3I6IFRhYmxlTGF5b3V0UHJvY2Vzc29yLFxuICApIHtcbiAgICBzdXBlcihmb3JtYXR0aW5nQ29udGV4dCk7XG4gIH1cblxuICAvKipcbiAgICogQG92ZXJyaWRlXG4gICAqL1xuICBkb0xheW91dChcbiAgICBub2RlQ29udGV4dDogVnRyZWUuTm9kZUNvbnRleHQsXG4gICAgY29sdW1uOiBMYXlvdXQuQ29sdW1uLFxuICApOiBUYXNrLlJlc3VsdDxWdHJlZS5Ob2RlQ29udGV4dD4ge1xuICAgIHJldHVybiB0aGlzLnByb2Nlc3Nvci5kb0luaXRpYWxMYXlvdXQobm9kZUNvbnRleHQsIGNvbHVtbik7XG4gIH1cbn1cblxuZXhwb3J0IGNsYXNzIEVudGlyZVRhYmxlQnJlYWtQb3NpdGlvbiBleHRlbmRzIEJyZWFrUG9zaXRpb24uRWRnZUJyZWFrUG9zaXRpb24ge1xuICBjb25zdHJ1Y3Rvcih0YWJsZU5vZGVDb250ZXh0OiBWdHJlZS5Ob2RlQ29udGV4dCkge1xuICAgIHN1cGVyKHRhYmxlTm9kZUNvbnRleHQsIG51bGwsIHRhYmxlTm9kZUNvbnRleHQub3ZlcmZsb3csIDApO1xuICB9XG5cbiAgLyoqXG4gICAqIEBvdmVycmlkZVxuICAgKi9cbiAgZ2V0TWluQnJlYWtQZW5hbHR5KCk6IG51bWJlciB7XG4gICAgaWYgKCF0aGlzLmlzRWRnZVVwZGF0ZWQpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcihcIkVkZ2VCcmVha1Bvc2l0aW9uLnByb3RvdHlwZS51cGRhdGVFZGdlIG5vdCBjYWxsZWRcIik7XG4gICAgfVxuICAgIHJldHVybiAoXG4gICAgICAodGhpcy5vdmVyZmxvd3MgPyAzIDogMCkgK1xuICAgICAgKHRoaXMucG9zaXRpb24ucGFyZW50ID8gdGhpcy5wb3NpdGlvbi5wYXJlbnQuYnJlYWtQZW5hbHR5IDogMClcbiAgICApO1xuICB9XG5cbiAgLyoqXG4gICAqIEBvdmVycmlkZVxuICAgKi9cbiAgYnJlYWtQb3NpdGlvbkNob3Nlbihjb2x1bW46IExheW91dC5Db2x1bW4pOiB2b2lkIHtcbiAgICBjb2x1bW4uZnJhZ21lbnRMYXlvdXRDb25zdHJhaW50cy5wdXNoKFxuICAgICAgbmV3IEVudGlyZVRhYmxlTGF5b3V0Q29uc3RyYWludCh0aGlzLnBvc2l0aW9uLnNvdXJjZU5vZGUpLFxuICAgICk7XG4gIH1cbn1cblxuZXhwb3J0IGNsYXNzIEVudGlyZVRhYmxlTGF5b3V0Q29uc3RyYWludFxuICBpbXBsZW1lbnRzIExheW91dC5GcmFnbWVudExheW91dENvbnN0cmFpbnQge1xuICBmbGFnbWVudExheW91dENvbnN0cmFpbnRUeXBlOiBGcmFnbWVudExheW91dENvbnN0cmFpbnRUeXBlID0gXCJFbnRpcmVUYWJsZVwiO1xuXG4gIGNvbnN0cnVjdG9yKHB1YmxpYyB0YWJsZVJvb3ROb2RlOiBOb2RlKSB7fVxuXG4gIC8qKlxuICAgKiBAb3ZlcnJpZGVcbiAgICovXG4gIGFsbG93TGF5b3V0KFxuICAgIG5vZGVDb250ZXh0OiBWdHJlZS5Ob2RlQ29udGV4dCxcbiAgICBvdmVyZmxvd25Ob2RlQ29udGV4dDogVnRyZWUuTm9kZUNvbnRleHQsXG4gICAgY29sdW1uOiBMYXlvdXQuQ29sdW1uLFxuICApOiBib29sZWFuIHtcbiAgICAvLyBJZiB0aGUgbm9kZUNvbnRleHQgb3ZlcmZsb3dzLCBhbnkgRW50aXJlVGFibGVMYXlvdXRDb25zdHJhaW50IHNob3VsZCBub3RcbiAgICAvLyBiZSByZWdpc3RlcmVkIGluIHRoZSBmaXJzdCBwbGFjZS4gU2VlXG4gICAgLy8gVGFibGVMYXlvdXRQcm9jZXNzb3IucHJvdG90eXBlLmRvSW5pdGlhbExheW91dC5cbiAgICBBc3NlcnRzLmFzc2VydCghbm9kZUNvbnRleHQub3ZlcmZsb3cpO1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuXG4gIC8qKlxuICAgKiBAb3ZlcnJpZGVcbiAgICovXG4gIG5leHRDYW5kaWRhdGUobm9kZUNvbnRleHQ6IFZ0cmVlLk5vZGVDb250ZXh0KTogYm9vbGVhbiB7XG4gICAgcmV0dXJuIHRydWU7XG4gIH1cblxuICAvKipcbiAgICogQG92ZXJyaWRlXG4gICAqL1xuICBwb3N0TGF5b3V0KFxuICAgIGFsbG93ZWQ6IGJvb2xlYW4sXG4gICAgcG9zaXRpb25BZnRlcjogVnRyZWUuTm9kZUNvbnRleHQsXG4gICAgaW5pdGlhbFBvc2l0aW9uOiBWdHJlZS5Ob2RlQ29udGV4dCxcbiAgICBjb2x1bW46IExheW91dC5Db2x1bW4sXG4gICkge1xuICAgIEFzc2VydHMuYXNzZXJ0KHBvc2l0aW9uQWZ0ZXIuc291cmNlTm9kZSk7XG4gICAgdGFibGVMYXlvdXRPcHRpb25DYWNoZS5wdXNoKHtcbiAgICAgIHJvb3Q6IHBvc2l0aW9uQWZ0ZXIuc291cmNlTm9kZSxcbiAgICAgIHRhYmxlTGF5b3V0T3B0aW9uOiB7XG4gICAgICAgIGNhbGN1bGF0ZUJyZWFrUG9zaXRpb25zSW5zaWRlOiB0cnVlLFxuICAgICAgfSBhcyBUYWJsZUxheW91dE9wdGlvbixcbiAgICB9KTtcbiAgfVxuXG4gIC8qKlxuICAgKiBAb3ZlcnJpZGVcbiAgICovXG4gIGZpbmlzaEJyZWFrKFxuICAgIG5vZGVDb250ZXh0OiBWdHJlZS5Ob2RlQ29udGV4dCxcbiAgICBjb2x1bW46IExheW91dC5Db2x1bW4sXG4gICk6IFRhc2suUmVzdWx0PGJvb2xlYW4+IHtcbiAgICByZXR1cm4gVGFzay5uZXdSZXN1bHQodHJ1ZSk7XG4gIH1cblxuICAvKipcbiAgICogQG92ZXJyaWRlXG4gICAqL1xuICBlcXVhbHNUbyhjb25zdHJhaW50OiBMYXlvdXQuRnJhZ21lbnRMYXlvdXRDb25zdHJhaW50KTogYm9vbGVhbiB7XG4gICAgcmV0dXJuIChcbiAgICAgIGNvbnN0cmFpbnQgaW5zdGFuY2VvZiBFbnRpcmVUYWJsZUxheW91dENvbnN0cmFpbnQgJiZcbiAgICAgIGNvbnN0cmFpbnQudGFibGVSb290Tm9kZSA9PT0gdGhpcy50YWJsZVJvb3ROb2RlXG4gICAgKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBAb3ZlcnJpZGVcbiAgICovXG4gIGdldFByaW9yaXR5T2ZGaW5pc2hCcmVhaygpOiBudW1iZXIge1xuICAgIHJldHVybiAwO1xuICB9XG59XG5cbmV4cG9ydCBjbGFzcyBMYXlvdXRGcmFnbWVudGVkVGFibGUgZXh0ZW5kcyBSZXBldGl0aXZlRWxlbWVudEltcGwuTGF5b3V0RnJhZ21lbnRlZEJsb2NrIHtcbiAgY29uc3RydWN0b3IoXG4gICAgZm9ybWF0dGluZ0NvbnRleHQ6IFRhYmxlRm9ybWF0dGluZ0NvbnRleHQsXG4gICAgcHVibGljIHJlYWRvbmx5IHByb2Nlc3NvcjogVGFibGVMYXlvdXRQcm9jZXNzb3IsXG4gICkge1xuICAgIHN1cGVyKGZvcm1hdHRpbmdDb250ZXh0KTtcbiAgfVxuXG4gIC8qKlxuICAgKiBAb3ZlcnJpZGVcbiAgICovXG4gIGRvTGF5b3V0KFxuICAgIG5vZGVDb250ZXh0OiBWdHJlZS5Ob2RlQ29udGV4dCxcbiAgICBjb2x1bW46IExheW91dC5Db2x1bW4sXG4gICk6IFRhc2suUmVzdWx0PFZ0cmVlLk5vZGVDb250ZXh0PiB7XG4gICAgY29uc3QgcmVwZXRpdGl2ZUVsZW1lbnRzID0gdGhpcy5mb3JtYXR0aW5nQ29udGV4dC5nZXRSZXBldGl0aXZlRWxlbWVudHMoKTtcbiAgICBpZiAoXG4gICAgICByZXBldGl0aXZlRWxlbWVudHMgJiZcbiAgICAgICFyZXBldGl0aXZlRWxlbWVudHMuaXNBZnRlckxhc3RDb250ZW50KG5vZGVDb250ZXh0KVxuICAgICkge1xuICAgICAgY29uc3QgY29uc3RyYWludCA9IG5ldyBUYWJsZVJvd0xheW91dENvbnN0cmFpbnQobm9kZUNvbnRleHQpO1xuICAgICAgaWYgKFxuICAgICAgICAhY29sdW1uLmZyYWdtZW50TGF5b3V0Q29uc3RyYWludHMuc29tZSgoYykgPT4gY29uc3RyYWludC5lcXVhbHNUbyhjKSlcbiAgICAgICkge1xuICAgICAgICBjb2x1bW4uZnJhZ21lbnRMYXlvdXRDb25zdHJhaW50cy51bnNoaWZ0KGNvbnN0cmFpbnQpO1xuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gdGhpcy5wcm9jZXNzb3IuZG9MYXlvdXQobm9kZUNvbnRleHQsIGNvbHVtbik7XG4gIH1cbn1cblxuZXhwb3J0IGNsYXNzIFRhYmxlUm93TGF5b3V0Q29uc3RyYWludFxuICBleHRlbmRzIFJlcGV0aXRpdmVFbGVtZW50SW1wbC5SZXBldGl0aXZlRWxlbWVudHNPd25lckxheW91dENvbnN0cmFpbnRcbiAgaW1wbGVtZW50cyBUYWJsZS5UYWJsZVJvd0xheW91dENvbnN0cmFpbnQge1xuICBmbGFnbWVudExheW91dENvbnN0cmFpbnRUeXBlOiBGcmFnbWVudExheW91dENvbnN0cmFpbnRUeXBlID0gXCJUYWJsZVJvd1wiO1xuICBjZWxsRnJhZ21lbnRMYXlvdXRDb25zdHJhaW50czoge1xuICAgIGNvbnN0cmFpbnRzOiBMYXlvdXQuRnJhZ21lbnRMYXlvdXRDb25zdHJhaW50W107XG4gICAgYnJlYWtQb3NpdGlvbjogVnRyZWUuTm9kZUNvbnRleHQ7XG4gIH1bXSA9IFtdO1xuXG4gIGNvbnN0cnVjdG9yKG5vZGVDb250ZXh0OiBWdHJlZS5Ob2RlQ29udGV4dCkge1xuICAgIHN1cGVyKG5vZGVDb250ZXh0KTtcbiAgfVxuXG4gIC8qKiBAb3ZlcnJpZGUgKi9cbiAgYWxsb3dMYXlvdXQoXG4gICAgbm9kZUNvbnRleHQ6IFZ0cmVlLk5vZGVDb250ZXh0LFxuICAgIG92ZXJmbG93bk5vZGVDb250ZXh0OiBWdHJlZS5Ob2RlQ29udGV4dCxcbiAgICBjb2x1bW46IExheW91dC5Db2x1bW4sXG4gICk6IGJvb2xlYW4ge1xuICAgIGNvbnN0IHJlcGV0aXRpdmVFbGVtZW50cyA9IHRoaXMuZ2V0UmVwZXRpdGl2ZUVsZW1lbnRzKCk7XG4gICAgaWYgKCFyZXBldGl0aXZlRWxlbWVudHMpIHtcbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cbiAgICBpZiAoY29sdW1uLnBzZXVkb1BhcmVudCkge1xuICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuICAgIGlmIChMYXlvdXRIZWxwZXIuaXNPcnBoYW4odGhpcy5ub2RlQ29udGV4dC52aWV3Tm9kZSkpIHtcbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cbiAgICBpZiAoIXJlcGV0aXRpdmVFbGVtZW50cy5pc0VuYWJsZVRvVXBkYXRlU3RhdGUoKSkge1xuICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuICAgIGlmIChcbiAgICAgIChvdmVyZmxvd25Ob2RlQ29udGV4dCAmJiAhbm9kZUNvbnRleHQpIHx8XG4gICAgICAobm9kZUNvbnRleHQgJiYgbm9kZUNvbnRleHQub3ZlcmZsb3cpXG4gICAgKSB7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cbiAgfVxuXG4gIC8qKiBAb3ZlcnJpZGUgKi9cbiAgbmV4dENhbmRpZGF0ZShub2RlQ29udGV4dDogVnRyZWUuTm9kZUNvbnRleHQpOiBib29sZWFuIHtcbiAgICBjb25zdCBmb3JtYXR0aW5nQ29udGV4dCA9IGdldFRhYmxlRm9ybWF0dGluZ0NvbnRleHQoXG4gICAgICB0aGlzLm5vZGVDb250ZXh0LmZvcm1hdHRpbmdDb250ZXh0LFxuICAgICk7XG4gICAgY29uc3QgY2VsbEZyYWdtZW50Q29uc3RyYWludHMgPSB0aGlzLmNvbGxlY3RDZWxsRnJhZ21lbnRMYXlvdXRDb25zdHJhaW50cyhcbiAgICAgIG5vZGVDb250ZXh0LFxuICAgICAgZm9ybWF0dGluZ0NvbnRleHQsXG4gICAgKTtcbiAgICBpZiAoXG4gICAgICBjZWxsRnJhZ21lbnRDb25zdHJhaW50cy5zb21lKChlbnRyeSkgPT5cbiAgICAgICAgZW50cnkuY29uc3RyYWludHMuc29tZSgoY29uc3RyYWludCkgPT5cbiAgICAgICAgICBjb25zdHJhaW50Lm5leHRDYW5kaWRhdGUobm9kZUNvbnRleHQpLFxuICAgICAgICApLFxuICAgICAgKVxuICAgICkge1xuICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuICAgIHJldHVybiBzdXBlci5uZXh0Q2FuZGlkYXRlKG5vZGVDb250ZXh0KTtcbiAgfVxuXG4gIC8qKiBAb3ZlcnJpZGUgKi9cbiAgcG9zdExheW91dChcbiAgICBhbGxvd2VkOiBib29sZWFuLFxuICAgIHBvc2l0aW9uQWZ0ZXI6IFZ0cmVlLk5vZGVDb250ZXh0LFxuICAgIGluaXRpYWxQb3NpdGlvbjogVnRyZWUuTm9kZUNvbnRleHQsXG4gICAgY29sdW1uOiBMYXlvdXQuQ29sdW1uLFxuICApIHtcbiAgICBjb25zdCBmb3JtYXR0aW5nQ29udGV4dCA9IGdldFRhYmxlRm9ybWF0dGluZ0NvbnRleHQoXG4gICAgICB0aGlzLm5vZGVDb250ZXh0LmZvcm1hdHRpbmdDb250ZXh0LFxuICAgICk7XG4gICAgdGhpcy5jZWxsRnJhZ21lbnRMYXlvdXRDb25zdHJhaW50cyA9IHRoaXMuY29sbGVjdENlbGxGcmFnbWVudExheW91dENvbnN0cmFpbnRzKFxuICAgICAgcG9zaXRpb25BZnRlcixcbiAgICAgIGZvcm1hdHRpbmdDb250ZXh0LFxuICAgICk7XG4gICAgdGhpcy5jZWxsRnJhZ21lbnRMYXlvdXRDb25zdHJhaW50cy5mb3JFYWNoKChlbnRyeSkgPT4ge1xuICAgICAgZW50cnkuY29uc3RyYWludHMuZm9yRWFjaCgoY29uc3RyYWludCkgPT4ge1xuICAgICAgICBjb25zdHJhaW50LnBvc3RMYXlvdXQoXG4gICAgICAgICAgYWxsb3dlZCxcbiAgICAgICAgICBlbnRyeS5icmVha1Bvc2l0aW9uLFxuICAgICAgICAgIGluaXRpYWxQb3NpdGlvbixcbiAgICAgICAgICBjb2x1bW4sXG4gICAgICAgICk7XG4gICAgICB9KTtcbiAgICB9KTtcbiAgICBpZiAoIWFsbG93ZWQpIHtcbiAgICAgIGNvbnN0IHJvb3RWaWV3Tm9kZSA9IGZvcm1hdHRpbmdDb250ZXh0LmdldFJvb3RWaWV3Tm9kZSh0aGlzLm5vZGVDb250ZXh0KTtcbiAgICAgIG5ldyBUYWJsZUxheW91dFByb2Nlc3NvcigpLnJlbW92ZUNvbEdyb3VwcyhcbiAgICAgICAgZm9ybWF0dGluZ0NvbnRleHQsXG4gICAgICAgIHJvb3RWaWV3Tm9kZSBhcyBFbGVtZW50LFxuICAgICAgKTtcbiAgICAgIHRoaXMucmVtb3ZlRHVtbXlSb3dOb2Rlcyhpbml0aWFsUG9zaXRpb24pO1xuICAgIH1cbiAgICBzdXBlci5wb3N0TGF5b3V0KGFsbG93ZWQsIHBvc2l0aW9uQWZ0ZXIsIGluaXRpYWxQb3NpdGlvbiwgY29sdW1uKTtcbiAgfVxuXG4gIC8qKiBAb3ZlcnJpZGUgKi9cbiAgZmluaXNoQnJlYWsoXG4gICAgbm9kZUNvbnRleHQ6IFZ0cmVlLk5vZGVDb250ZXh0LFxuICAgIGNvbHVtbjogTGF5b3V0LkNvbHVtbixcbiAgKTogVGFzay5SZXN1bHQ8Ym9vbGVhbj4ge1xuICAgIGNvbnN0IGZvcm1hdHRpbmdDb250ZXh0ID0gZ2V0VGFibGVGb3JtYXR0aW5nQ29udGV4dChcbiAgICAgIHRoaXMubm9kZUNvbnRleHQuZm9ybWF0dGluZ0NvbnRleHQsXG4gICAgKTtcbiAgICBjb25zdCBmcmFtZTogVGFzay5GcmFtZTxib29sZWFuPiA9IFRhc2submV3RnJhbWUoXCJmaW5pc2hCcmVha1wiKTtcbiAgICBjb25zdCBjb25zdHJhaW50cyA9IHRoaXMuY2VsbEZyYWdtZW50TGF5b3V0Q29uc3RyYWludHMucmVkdWNlKFxuICAgICAgKGFycmF5LCBlbnRyeSkgPT5cbiAgICAgICAgYXJyYXkuY29uY2F0KFxuICAgICAgICAgIGVudHJ5LmNvbnN0cmFpbnRzLm1hcCgoY29uc3RyYWludCkgPT4gKHtcbiAgICAgICAgICAgIGNvbnN0cmFpbnQsXG4gICAgICAgICAgICBicmVha1Bvc2l0aW9uOiBlbnRyeS5icmVha1Bvc2l0aW9uLFxuICAgICAgICAgIH0pKSxcbiAgICAgICAgKSxcbiAgICAgIFtdLFxuICAgICk7XG4gICAgbGV0IGkgPSAwO1xuICAgIGZyYW1lXG4gICAgICAubG9vcCgoKSA9PiB7XG4gICAgICAgIGlmIChpIDwgY29uc3RyYWludHMubGVuZ3RoKSB7XG4gICAgICAgICAgY29uc3QgZW50cnkgPSBjb25zdHJhaW50c1tpKytdO1xuICAgICAgICAgIHJldHVybiBlbnRyeS5jb25zdHJhaW50XG4gICAgICAgICAgICAuZmluaXNoQnJlYWsoZW50cnkuYnJlYWtQb3NpdGlvbiwgY29sdW1uKVxuICAgICAgICAgICAgLnRoZW5SZXR1cm4odHJ1ZSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgcmV0dXJuIFRhc2submV3UmVzdWx0KGZhbHNlKTtcbiAgICAgICAgfVxuICAgICAgfSlcbiAgICAgIC50aGVuKCgpID0+IHtcbiAgICAgICAgZnJhbWUuZmluaXNoKHRydWUpO1xuICAgICAgfSk7XG4gICAgcmV0dXJuIGZyYW1lXG4gICAgICAucmVzdWx0KClcbiAgICAgIC50aGVuQXN5bmMoKCkgPT4gc3VwZXIuZmluaXNoQnJlYWsobm9kZUNvbnRleHQsIGNvbHVtbikpO1xuICB9XG5cbiAgcmVtb3ZlRHVtbXlSb3dOb2Rlcyhub2RlQ29udGV4dDogVnRyZWUuTm9kZUNvbnRleHQpIHtcbiAgICBpZiAoXG4gICAgICAhbm9kZUNvbnRleHQgfHxcbiAgICAgIG5vZGVDb250ZXh0LmRpc3BsYXkgIT09IFwidGFibGUtcm93XCIgfHxcbiAgICAgICFub2RlQ29udGV4dC52aWV3Tm9kZVxuICAgICkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICB3aGlsZSAoKG5vZGVDb250ZXh0LnZpZXdOb2RlIGFzIEVsZW1lbnQpLnByZXZpb3VzRWxlbWVudFNpYmxpbmcpIHtcbiAgICAgIGNvbnN0IGR1bW15Tm9kZSA9IChub2RlQ29udGV4dC52aWV3Tm9kZSBhcyBFbGVtZW50KVxuICAgICAgICAucHJldmlvdXNFbGVtZW50U2libGluZztcbiAgICAgIGlmIChkdW1teU5vZGUucGFyZW50Tm9kZSkge1xuICAgICAgICBkdW1teU5vZGUucGFyZW50Tm9kZS5yZW1vdmVDaGlsZChkdW1teU5vZGUpO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIHByaXZhdGUgY29sbGVjdENlbGxGcmFnbWVudExheW91dENvbnN0cmFpbnRzKFxuICAgIG5vZGVDb250ZXh0OiBWdHJlZS5Ob2RlQ29udGV4dCxcbiAgICBmb3JtYXR0aW5nQ29udGV4dDogVGFibGVGb3JtYXR0aW5nQ29udGV4dCxcbiAgKToge1xuICAgIGNvbnN0cmFpbnRzOiBMYXlvdXQuRnJhZ21lbnRMYXlvdXRDb25zdHJhaW50W107XG4gICAgYnJlYWtQb3NpdGlvbjogVnRyZWUuTm9kZUNvbnRleHQ7XG4gIH1bXSB7XG4gICAgcmV0dXJuIHRoaXMuZ2V0Q2VsbEZyYWdlbW50cyhub2RlQ29udGV4dCwgZm9ybWF0dGluZ0NvbnRleHQpLm1hcChcbiAgICAgIChlbnRyeSkgPT4gKHtcbiAgICAgICAgY29uc3RyYWludHM6IGVudHJ5LmZyYWdtZW50LnBzZXVkb0NvbHVtbi5nZXRDb2x1bW4oKVxuICAgICAgICAgIC5mcmFnbWVudExheW91dENvbnN0cmFpbnRzLFxuICAgICAgICBicmVha1Bvc2l0aW9uOiBlbnRyeS5icmVha1Bvc2l0aW9uLFxuICAgICAgfSksXG4gICAgKTtcbiAgfVxuXG4gIHByaXZhdGUgZ2V0Q2VsbEZyYWdlbW50cyhcbiAgICBub2RlQ29udGV4dDogVnRyZWUuTm9kZUNvbnRleHQsXG4gICAgZm9ybWF0dGluZ0NvbnRleHQ6IFRhYmxlRm9ybWF0dGluZ0NvbnRleHQsXG4gICk6IHsgZnJhZ21lbnQ6IFRhYmxlQ2VsbEZyYWdtZW50OyBicmVha1Bvc2l0aW9uOiBWdHJlZS5Ob2RlQ29udGV4dCB9W10ge1xuICAgIGxldCByb3dJbmRleCA9IE51bWJlci5NQVhfVkFMVUU7XG4gICAgaWYgKG5vZGVDb250ZXh0ICYmIG5vZGVDb250ZXh0LmRpc3BsYXkgPT09IFwidGFibGUtcm93XCIpIHtcbiAgICAgIEFzc2VydHMuYXNzZXJ0KG5vZGVDb250ZXh0LnNvdXJjZU5vZGUpO1xuICAgICAgcm93SW5kZXggPVxuICAgICAgICBmb3JtYXR0aW5nQ29udGV4dC5maW5kUm93SW5kZXhCeVNvdXJjZU5vZGUobm9kZUNvbnRleHQuc291cmNlTm9kZSkgKyAxO1xuICAgIH1cbiAgICByb3dJbmRleCA9IE1hdGgubWluKGZvcm1hdHRpbmdDb250ZXh0LmNlbGxGcmFnbWVudHMubGVuZ3RoLCByb3dJbmRleCk7XG4gICAgY29uc3QgY2VsbEZyYWdtZW50cyA9IFtdO1xuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgcm93SW5kZXg7IGkrKykge1xuICAgICAgaWYgKCFmb3JtYXR0aW5nQ29udGV4dC5jZWxsRnJhZ21lbnRzW2ldKSB7XG4gICAgICAgIGNvbnRpbnVlO1xuICAgICAgfVxuICAgICAgZm9ybWF0dGluZ0NvbnRleHQuY2VsbEZyYWdtZW50c1tpXS5mb3JFYWNoKChjZWxsRnJhZ21lbnQpID0+IHtcbiAgICAgICAgaWYgKCFjZWxsRnJhZ21lbnQpIHtcbiAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgY2VsbEZyYWdtZW50cy5wdXNoKHtcbiAgICAgICAgICBmcmFnbWVudDogY2VsbEZyYWdtZW50LFxuICAgICAgICAgIGJyZWFrUG9zaXRpb246IGNlbGxGcmFnbWVudC5maW5kQWNjZXB0YWJsZUJyZWFrUG9zaXRpb24oKS5ub2RlQ29udGV4dCxcbiAgICAgICAgfSk7XG4gICAgICB9KTtcbiAgICB9XG4gICAgcmV0dXJuIGNlbGxGcmFnbWVudHM7XG4gIH1cblxuICBnZXRFbGVtZW50c09mZnNldHNGb3JUYWJsZUNlbGwoXG4gICAgY29sdW1uOiBMYXlvdXQuQ29sdW1uLFxuICApOiBSZXBldGl0aXZlRWxlbWVudC5FbGVtZW50c09mZnNldFtdIHtcbiAgICBjb25zdCBmb3JtYXR0aW5nQ29udGV4dCA9IGdldFRhYmxlRm9ybWF0dGluZ0NvbnRleHQoXG4gICAgICB0aGlzLm5vZGVDb250ZXh0LmZvcm1hdHRpbmdDb250ZXh0LFxuICAgICk7XG4gICAgY29uc3QgcG9zaXRpb24gPSBmb3JtYXR0aW5nQ29udGV4dC5maW5kQ2VsbEZyb21Db2x1bW4oY29sdW1uKTtcbiAgICBpZiAocG9zaXRpb24pIHtcbiAgICAgIHJldHVybiBmb3JtYXR0aW5nQ29udGV4dC5jb2xsZWN0RWxlbWVudHNPZmZzZXRPZlVwcGVyQ2VsbHMocG9zaXRpb24pO1xuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gZm9ybWF0dGluZ0NvbnRleHQuY29sbGVjdEVsZW1lbnRzT2Zmc2V0T2ZIaWdoZXN0Q29sdW1uKCk7XG4gICAgfVxuICB9XG5cbiAgLyoqIEBvdmVycmlkZSAqL1xuICBlcXVhbHNUbyhjb25zdHJhaW50OiBMYXlvdXQuRnJhZ21lbnRMYXlvdXRDb25zdHJhaW50KTogYm9vbGVhbiB7XG4gICAgaWYgKCEoY29uc3RyYWludCBpbnN0YW5jZW9mIFRhYmxlUm93TGF5b3V0Q29uc3RyYWludCkpIHtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gICAgcmV0dXJuIChcbiAgICAgIGdldFRhYmxlRm9ybWF0dGluZ0NvbnRleHQodGhpcy5ub2RlQ29udGV4dC5mb3JtYXR0aW5nQ29udGV4dCkgPT09XG4gICAgICBnZXRUYWJsZUZvcm1hdHRpbmdDb250ZXh0KGNvbnN0cmFpbnQubm9kZUNvbnRleHQuZm9ybWF0dGluZ0NvbnRleHQpXG4gICAgKTtcbiAgfVxufVxuXG5jb25zdCB0YWJsZUxheW91dFByb2Nlc3NvciA9IG5ldyBUYWJsZUxheW91dFByb2Nlc3NvcigpO1xuXG5mdW5jdGlvbiByZXNvbHZlRm9ybWF0dGluZ0NvbnRleHRIb29rKFxuICBub2RlQ29udGV4dDogVnRyZWUuTm9kZUNvbnRleHQsXG4gIGZpcnN0VGltZTogYm9vbGVhbixcbiAgZGlzcGxheTogQ3NzLklkZW50LFxuICBwb3NpdGlvbjogQ3NzLklkZW50LFxuICBmbG9hdFNpZGU6IENzcy5JZGVudCxcbiAgaXNSb290OiBib29sZWFuLFxuKTogVGFibGVGb3JtYXR0aW5nQ29udGV4dCB8IG51bGwge1xuICBpZiAoIWZpcnN0VGltZSkge1xuICAgIHJldHVybiBudWxsO1xuICB9XG4gIGlmIChkaXNwbGF5ID09PSBDc3MuaWRlbnQudGFibGUpIHtcbiAgICBjb25zdCBwYXJlbnQgPSBub2RlQ29udGV4dC5wYXJlbnQ7XG4gICAgcmV0dXJuIG5ldyBUYWJsZUZvcm1hdHRpbmdDb250ZXh0KFxuICAgICAgcGFyZW50ID8gcGFyZW50LmZvcm1hdHRpbmdDb250ZXh0IDogbnVsbCxcbiAgICAgIG5vZGVDb250ZXh0LnNvdXJjZU5vZGUgYXMgRWxlbWVudCxcbiAgICApO1xuICB9XG4gIHJldHVybiBudWxsO1xufVxuXG5mdW5jdGlvbiByZXNvbHZlTGF5b3V0UHJvY2Vzc29yKFxuICBmb3JtYXR0aW5nQ29udGV4dCxcbik6IFRhYmxlTGF5b3V0UHJvY2Vzc29yIHwgbnVsbCB7XG4gIGlmIChmb3JtYXR0aW5nQ29udGV4dCBpbnN0YW5jZW9mIFRhYmxlRm9ybWF0dGluZ0NvbnRleHQpIHtcbiAgICByZXR1cm4gdGFibGVMYXlvdXRQcm9jZXNzb3I7XG4gIH1cbiAgcmV0dXJuIG51bGw7XG59XG5cblBsdWdpbi5yZWdpc3Rlckhvb2soXG4gIFBsdWdpbi5IT09LUy5SRVNPTFZFX0ZPUk1BVFRJTkdfQ09OVEVYVCxcbiAgcmVzb2x2ZUZvcm1hdHRpbmdDb250ZXh0SG9vayxcbik7XG5cblBsdWdpbi5yZWdpc3Rlckhvb2soXG4gIFBsdWdpbi5IT09LUy5SRVNPTFZFX0xBWU9VVF9QUk9DRVNTT1IsXG4gIHJlc29sdmVMYXlvdXRQcm9jZXNzb3IsXG4pO1xuIiwiLyoqXG4gKiBDb3B5cmlnaHQgMjAxNyBUcmltLW1hcmtzIEluYy5cbiAqIENvcHlyaWdodCAyMDE5IFZpdmxpb3N0eWxlIEZvdW5kYXRpb25cbiAqXG4gKiBWaXZsaW9zdHlsZS5qcyBpcyBmcmVlIHNvZnR3YXJlOiB5b3UgY2FuIHJlZGlzdHJpYnV0ZSBpdCBhbmQvb3IgbW9kaWZ5XG4gKiBpdCB1bmRlciB0aGUgdGVybXMgb2YgdGhlIEdOVSBBZmZlcm8gR2VuZXJhbCBQdWJsaWMgTGljZW5zZSBhcyBwdWJsaXNoZWQgYnlcbiAqIHRoZSBGcmVlIFNvZnR3YXJlIEZvdW5kYXRpb24sIGVpdGhlciB2ZXJzaW9uIDMgb2YgdGhlIExpY2Vuc2UsIG9yXG4gKiAoYXQgeW91ciBvcHRpb24pIGFueSBsYXRlciB2ZXJzaW9uLlxuICpcbiAqIFZpdmxpb3N0eWxlLmpzIGlzIGRpc3RyaWJ1dGVkIGluIHRoZSBob3BlIHRoYXQgaXQgd2lsbCBiZSB1c2VmdWwsXG4gKiBidXQgV0lUSE9VVCBBTlkgV0FSUkFOVFk7IHdpdGhvdXQgZXZlbiB0aGUgaW1wbGllZCB3YXJyYW50eSBvZlxuICogTUVSQ0hBTlRBQklMSVRZIG9yIEZJVE5FU1MgRk9SIEEgUEFSVElDVUxBUiBQVVJQT1NFLiAgU2VlIHRoZVxuICogR05VIEFmZmVybyBHZW5lcmFsIFB1YmxpYyBMaWNlbnNlIGZvciBtb3JlIGRldGFpbHMuXG4gKlxuICogWW91IHNob3VsZCBoYXZlIHJlY2VpdmVkIGEgY29weSBvZiB0aGUgR05VIEFmZmVybyBHZW5lcmFsIFB1YmxpYyBMaWNlbnNlXG4gKiBhbG9uZyB3aXRoIFZpdmxpb3N0eWxlLmpzLiAgSWYgbm90LCBzZWUgPGh0dHA6Ly93d3cuZ251Lm9yZy9saWNlbnNlcy8+LlxuICpcbiAqIEBmaWxlb3ZlcnZpZXcgTWF0aFV0aWwgLSBNYXRoIHV0aWxpdGllc1xuICovXG5leHBvcnQgZnVuY3Rpb24gbWVhbihhcnJheTogbnVtYmVyW10pOiBudW1iZXIge1xuICByZXR1cm4gYXJyYXkucmVkdWNlKChwcmV2LCBjdXJyKSA9PiBwcmV2ICsgY3VyciwgMCkgLyBhcnJheS5sZW5ndGg7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiB2YXJpYW5jZShhcnJheTogbnVtYmVyW10pOiBudW1iZXIge1xuICBjb25zdCBtZWFuVmFsdWUgPSBtZWFuKGFycmF5KTtcbiAgcmV0dXJuIG1lYW4oXG4gICAgYXJyYXkubWFwKCh4KSA9PiB7XG4gICAgICBjb25zdCBkID0geCAtIG1lYW5WYWx1ZTtcbiAgICAgIHJldHVybiBkICogZDtcbiAgICB9KSxcbiAgKTtcbn1cbiIsIi8qKlxuICogQ29weXJpZ2h0IDIwMTcgVHJpbS1tYXJrcyBJbmMuXG4gKiBDb3B5cmlnaHQgMjAxOSBWaXZsaW9zdHlsZSBGb3VuZGF0aW9uXG4gKlxuICogVml2bGlvc3R5bGUuanMgaXMgZnJlZSBzb2Z0d2FyZTogeW91IGNhbiByZWRpc3RyaWJ1dGUgaXQgYW5kL29yIG1vZGlmeVxuICogaXQgdW5kZXIgdGhlIHRlcm1zIG9mIHRoZSBHTlUgQWZmZXJvIEdlbmVyYWwgUHVibGljIExpY2Vuc2UgYXMgcHVibGlzaGVkIGJ5XG4gKiB0aGUgRnJlZSBTb2Z0d2FyZSBGb3VuZGF0aW9uLCBlaXRoZXIgdmVyc2lvbiAzIG9mIHRoZSBMaWNlbnNlLCBvclxuICogKGF0IHlvdXIgb3B0aW9uKSBhbnkgbGF0ZXIgdmVyc2lvbi5cbiAqXG4gKiBWaXZsaW9zdHlsZS5qcyBpcyBkaXN0cmlidXRlZCBpbiB0aGUgaG9wZSB0aGF0IGl0IHdpbGwgYmUgdXNlZnVsLFxuICogYnV0IFdJVEhPVVQgQU5ZIFdBUlJBTlRZOyB3aXRob3V0IGV2ZW4gdGhlIGltcGxpZWQgd2FycmFudHkgb2ZcbiAqIE1FUkNIQU5UQUJJTElUWSBvciBGSVRORVNTIEZPUiBBIFBBUlRJQ1VMQVIgUFVSUE9TRS4gIFNlZSB0aGVcbiAqIEdOVSBBZmZlcm8gR2VuZXJhbCBQdWJsaWMgTGljZW5zZSBmb3IgbW9yZSBkZXRhaWxzLlxuICpcbiAqIFlvdSBzaG91bGQgaGF2ZSByZWNlaXZlZCBhIGNvcHkgb2YgdGhlIEdOVSBBZmZlcm8gR2VuZXJhbCBQdWJsaWMgTGljZW5zZVxuICogYWxvbmcgd2l0aCBWaXZsaW9zdHlsZS5qcy4gIElmIG5vdCwgc2VlIDxodHRwOi8vd3d3LmdudS5vcmcvbGljZW5zZXMvPi5cbiAqXG4gKiBAZmlsZW92ZXJ2aWV3IENvbHVtbnMgLSBDb250cm9sIGNvbHVtbiBsYXlvdXQuXG4gKi9cbmltcG9ydCAqIGFzIEFzc2VydHMgZnJvbSBcIi4vYXNzZXJ0c1wiO1xuaW1wb3J0ICogYXMgQ3NzIGZyb20gXCIuL2Nzc1wiO1xuaW1wb3J0ICogYXMgTWF0aFV0aWwgZnJvbSBcIi4vbWF0aC11dGlsXCI7XG5pbXBvcnQgKiBhcyBQYWdlRmxvYXRzIGZyb20gXCIuL3BhZ2UtZmxvYXRzXCI7XG5pbXBvcnQgKiBhcyBUYXNrIGZyb20gXCIuL3Rhc2tcIjtcbmltcG9ydCAqIGFzIFZ0cmVlIGZyb20gXCIuL3Z0cmVlXCI7XG5pbXBvcnQgeyBMYXlvdXQgfSBmcm9tIFwiLi90eXBlc1wiO1xuXG5leHBvcnQgdHlwZSBDb2x1bW5MYXlvdXRSZXN1bHQgPSB7XG4gIGNvbHVtbnM6IExheW91dC5Db2x1bW5bXTtcbiAgcG9zaXRpb246IFZ0cmVlLkxheW91dFBvc2l0aW9uO1xuICBjb2x1bW5QYWdlRmxvYXRMYXlvdXRDb250ZXh0cz86IFBhZ2VGbG9hdHMuUGFnZUZsb2F0TGF5b3V0Q29udGV4dFtdO1xufTtcblxuZXhwb3J0IHR5cGUgQ29sdW1uR2VuZXJhdG9yID0gKCkgPT4gVGFzay5SZXN1bHQ8Q29sdW1uTGF5b3V0UmVzdWx0IHwgbnVsbD47XG5cbmV4cG9ydCBjbGFzcyBDb2x1bW5CYWxhbmNpbmdUcmlhbFJlc3VsdCB7XG4gIGNvbnN0cnVjdG9yKFxuICAgIHB1YmxpYyByZWFkb25seSBsYXlvdXRSZXN1bHQ6IENvbHVtbkxheW91dFJlc3VsdCxcbiAgICBwdWJsaWMgcmVhZG9ubHkgcGVuYWx0eTogbnVtYmVyLFxuICApIHt9XG59XG5cbmZ1bmN0aW9uIGdldEJsb2NrU2l6ZShjb250YWluZXI6IFZ0cmVlLkNvbnRhaW5lcik6IG51bWJlciB7XG4gIGlmIChjb250YWluZXIudmVydGljYWwpIHtcbiAgICByZXR1cm4gY29udGFpbmVyLndpZHRoO1xuICB9IGVsc2Uge1xuICAgIHJldHVybiBjb250YWluZXIuaGVpZ2h0O1xuICB9XG59XG5cbmZ1bmN0aW9uIHNldEJsb2NrU2l6ZShjb250YWluZXI6IFZ0cmVlLkNvbnRhaW5lciwgc2l6ZTogbnVtYmVyKSB7XG4gIGlmIChjb250YWluZXIudmVydGljYWwpIHtcbiAgICBjb250YWluZXIud2lkdGggPSBzaXplO1xuICB9IGVsc2Uge1xuICAgIGNvbnRhaW5lci5oZWlnaHQgPSBzaXplO1xuICB9XG59XG5cbmV4cG9ydCBhYnN0cmFjdCBjbGFzcyBDb2x1bW5CYWxhbmNlciB7XG4gIG9yaWdpbmFsQ29udGFpbmVyQmxvY2tTaXplOiBudW1iZXI7XG5cbiAgY29uc3RydWN0b3IoXG4gICAgcHVibGljIHJlYWRvbmx5IGxheW91dENvbnRhaW5lcjogVnRyZWUuQ29udGFpbmVyLFxuICAgIHB1YmxpYyByZWFkb25seSBjb2x1bW5HZW5lcmF0b3I6IENvbHVtbkdlbmVyYXRvcixcbiAgICBwdWJsaWMgcmVhZG9ubHkgcmVnaW9uUGFnZUZsb2F0TGF5b3V0Q29udGV4dDogUGFnZUZsb2F0cy5QYWdlRmxvYXRMYXlvdXRDb250ZXh0LFxuICApIHtcbiAgICB0aGlzLm9yaWdpbmFsQ29udGFpbmVyQmxvY2tTaXplID0gZ2V0QmxvY2tTaXplKGxheW91dENvbnRhaW5lcik7XG4gIH1cblxuICBiYWxhbmNlQ29sdW1ucyhcbiAgICBsYXlvdXRSZXN1bHQ6IENvbHVtbkxheW91dFJlc3VsdCxcbiAgKTogVGFzay5SZXN1bHQ8Q29sdW1uTGF5b3V0UmVzdWx0PiB7XG4gICAgY29uc3QgZnJhbWU6IFRhc2suRnJhbWU8Q29sdW1uTGF5b3V0UmVzdWx0PiA9IFRhc2submV3RnJhbWUoXG4gICAgICBcIkNvbHVtbkJhbGFuY2VyI2JhbGFuY2VDb2x1bW5zXCIsXG4gICAgKTtcbiAgICB0aGlzLnByZUJhbGFuY2UobGF5b3V0UmVzdWx0KTtcbiAgICB0aGlzLnNhdmVQYWdlRmxvYXRMYXlvdXRDb250ZXh0cyhsYXlvdXRSZXN1bHQpO1xuICAgIHRoaXMubGF5b3V0Q29udGFpbmVyLmNsZWFyKCk7XG4gICAgY29uc3QgY2FuZGlkYXRlcyA9IFt0aGlzLmNyZWF0ZVRyaWFsUmVzdWx0KGxheW91dFJlc3VsdCldO1xuICAgIGZyYW1lXG4gICAgICAubG9vcFdpdGhGcmFtZSgobG9vcEZyYW1lKSA9PiB7XG4gICAgICAgIGlmICghdGhpcy5oYXNOZXh0Q2FuZGlkYXRlKGNhbmRpZGF0ZXMpKSB7XG4gICAgICAgICAgbG9vcEZyYW1lLmJyZWFrTG9vcCgpO1xuICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLnVwZGF0ZUNvbmRpdGlvbihjYW5kaWRhdGVzKTtcbiAgICAgICAgdGhpcy5jb2x1bW5HZW5lcmF0b3IoKS50aGVuKChsYXlvdXRSZXN1bHQpID0+IHtcbiAgICAgICAgICB0aGlzLnNhdmVQYWdlRmxvYXRMYXlvdXRDb250ZXh0cyhsYXlvdXRSZXN1bHQpO1xuICAgICAgICAgIHRoaXMubGF5b3V0Q29udGFpbmVyLmNsZWFyKCk7XG4gICAgICAgICAgaWYgKCFsYXlvdXRSZXN1bHQpIHtcbiAgICAgICAgICAgIGxvb3BGcmFtZS5icmVha0xvb3AoKTtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICB9XG4gICAgICAgICAgY2FuZGlkYXRlcy5wdXNoKHRoaXMuY3JlYXRlVHJpYWxSZXN1bHQobGF5b3V0UmVzdWx0KSk7XG4gICAgICAgICAgbG9vcEZyYW1lLmNvbnRpbnVlTG9vcCgpO1xuICAgICAgICB9KTtcbiAgICAgIH0pXG4gICAgICAudGhlbigoKSA9PiB7XG4gICAgICAgIGNvbnN0IHJlc3VsdCA9IGNhbmRpZGF0ZXMucmVkdWNlKFxuICAgICAgICAgIChwcmV2LCBjdXJyKSA9PiAoY3Vyci5wZW5hbHR5IDwgcHJldi5wZW5hbHR5ID8gY3VyciA6IHByZXYpLFxuICAgICAgICAgIGNhbmRpZGF0ZXNbMF0sXG4gICAgICAgICk7XG4gICAgICAgIHRoaXMucmVzdG9yZUNvbnRlbnRzKHJlc3VsdC5sYXlvdXRSZXN1bHQpO1xuICAgICAgICB0aGlzLnBvc3RCYWxhbmNlKCk7XG4gICAgICAgIGZyYW1lLmZpbmlzaChyZXN1bHQubGF5b3V0UmVzdWx0KTtcbiAgICAgIH0pO1xuICAgIHJldHVybiBmcmFtZS5yZXN1bHQoKTtcbiAgfVxuXG4gIHByaXZhdGUgY3JlYXRlVHJpYWxSZXN1bHQoXG4gICAgbGF5b3V0UmVzdWx0OiBDb2x1bW5MYXlvdXRSZXN1bHQsXG4gICk6IENvbHVtbkJhbGFuY2luZ1RyaWFsUmVzdWx0IHtcbiAgICBjb25zdCBwZW5hbHR5ID0gdGhpcy5jYWxjdWxhdGVQZW5hbHR5KGxheW91dFJlc3VsdCk7XG4gICAgcmV0dXJuIG5ldyBDb2x1bW5CYWxhbmNpbmdUcmlhbFJlc3VsdChsYXlvdXRSZXN1bHQsIHBlbmFsdHkpO1xuICB9XG5cbiAgcHJvdGVjdGVkIHByZUJhbGFuY2UobGF5b3V0UmVzdWx0OiBDb2x1bW5MYXlvdXRSZXN1bHQpIHt9XG5cbiAgcHJvdGVjdGVkIGFic3RyYWN0IGNhbGN1bGF0ZVBlbmFsdHkobGF5b3V0UmVzdWx0OiBDb2x1bW5MYXlvdXRSZXN1bHQpOiBudW1iZXI7XG5cbiAgcHJvdGVjdGVkIGFic3RyYWN0IGhhc05leHRDYW5kaWRhdGUoXG4gICAgY2FuZGlkYXRlczogQ29sdW1uQmFsYW5jaW5nVHJpYWxSZXN1bHRbXSxcbiAgKTogYm9vbGVhbjtcblxuICBwcm90ZWN0ZWQgYWJzdHJhY3QgdXBkYXRlQ29uZGl0aW9uKFxuICAgIGNhbmRpZGF0ZXM6IENvbHVtbkJhbGFuY2luZ1RyaWFsUmVzdWx0W10sXG4gICk6IHZvaWQ7XG5cbiAgcHJvdGVjdGVkIHBvc3RCYWxhbmNlKCkge1xuICAgIHNldEJsb2NrU2l6ZSh0aGlzLmxheW91dENvbnRhaW5lciwgdGhpcy5vcmlnaW5hbENvbnRhaW5lckJsb2NrU2l6ZSk7XG4gIH1cblxuICBzYXZlUGFnZUZsb2F0TGF5b3V0Q29udGV4dHMobGF5b3V0UmVzdWx0OiBDb2x1bW5MYXlvdXRSZXN1bHQgfCBudWxsKSB7XG4gICAgY29uc3QgY2hpbGRyZW4gPSB0aGlzLnJlZ2lvblBhZ2VGbG9hdExheW91dENvbnRleHQuZGV0YWNoQ2hpbGRyZW4oKTtcbiAgICBpZiAobGF5b3V0UmVzdWx0KSB7XG4gICAgICBsYXlvdXRSZXN1bHQuY29sdW1uUGFnZUZsb2F0TGF5b3V0Q29udGV4dHMgPSBjaGlsZHJlbjtcbiAgICB9XG4gIH1cblxuICBwcml2YXRlIHJlc3RvcmVDb250ZW50cyhuZXdMYXlvdXRSZXN1bHQ6IENvbHVtbkxheW91dFJlc3VsdCkge1xuICAgIGNvbnN0IHBhcmVudCA9IHRoaXMubGF5b3V0Q29udGFpbmVyLmVsZW1lbnQ7XG4gICAgbmV3TGF5b3V0UmVzdWx0LmNvbHVtbnMuZm9yRWFjaCgoYykgPT4ge1xuICAgICAgcGFyZW50LmFwcGVuZENoaWxkKGMuZWxlbWVudCk7XG4gICAgfSk7XG4gICAgQXNzZXJ0cy5hc3NlcnQobmV3TGF5b3V0UmVzdWx0LmNvbHVtblBhZ2VGbG9hdExheW91dENvbnRleHRzKTtcbiAgICB0aGlzLnJlZ2lvblBhZ2VGbG9hdExheW91dENvbnRleHQuYXR0YWNoQ2hpbGRyZW4oXG4gICAgICBuZXdMYXlvdXRSZXN1bHQuY29sdW1uUGFnZUZsb2F0TGF5b3V0Q29udGV4dHMsXG4gICAgKTtcbiAgfVxufVxuY29uc3QgQ09MVU1OX0xFTkdUSF9TVEVQID0gMTtcblxuZXhwb3J0IGZ1bmN0aW9uIGNhblJlZHVjZUNvbnRhaW5lclNpemUoXG4gIGNhbmRpZGF0ZXM6IENvbHVtbkJhbGFuY2luZ1RyaWFsUmVzdWx0W10sXG4pOiBib29sZWFuIHtcbiAgY29uc3QgbGFzdENhbmRpZGF0ZSA9IGNhbmRpZGF0ZXNbY2FuZGlkYXRlcy5sZW5ndGggLSAxXTtcbiAgaWYgKGxhc3RDYW5kaWRhdGUucGVuYWx0eSA9PT0gMCkge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuICBjb25zdCBzZWNvbmRMYXN0Q2FuZGlkYXRlID0gY2FuZGlkYXRlc1tjYW5kaWRhdGVzLmxlbmd0aCAtIDJdO1xuICBpZiAoXG4gICAgc2Vjb25kTGFzdENhbmRpZGF0ZSAmJlxuICAgIGxhc3RDYW5kaWRhdGUucGVuYWx0eSA+PSBzZWNvbmRMYXN0Q2FuZGlkYXRlLnBlbmFsdHlcbiAgKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG4gIGNvbnN0IGNvbHVtbnMgPSBsYXN0Q2FuZGlkYXRlLmxheW91dFJlc3VsdC5jb2x1bW5zO1xuICBjb25zdCBtYXhDb2x1bW5CbG9ja1NpemUgPSBNYXRoLm1heC5hcHBseShcbiAgICBudWxsLFxuICAgIGNvbHVtbnMubWFwKChjKSA9PiBjLmNvbXB1dGVkQmxvY2tTaXplKSxcbiAgKTtcbiAgY29uc3QgbWF4UGFnZUZsb2F0QmxvY2tTaXplID0gTWF0aC5tYXguYXBwbHkoXG4gICAgbnVsbCxcbiAgICBjb2x1bW5zLm1hcCgoYykgPT4gYy5nZXRNYXhCbG9ja1NpemVPZlBhZ2VGbG9hdHMoKSksXG4gICk7XG4gIHJldHVybiBtYXhDb2x1bW5CbG9ja1NpemUgPiBtYXhQYWdlRmxvYXRCbG9ja1NpemUgKyBDT0xVTU5fTEVOR1RIX1NURVA7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiByZWR1Y2VDb250YWluZXJTaXplKFxuICBjYW5kaWRhdGVzOiBDb2x1bW5CYWxhbmNpbmdUcmlhbFJlc3VsdFtdLFxuICBjb250YWluZXI6IFZ0cmVlLkNvbnRhaW5lcixcbik6IHZvaWQge1xuICBjb25zdCBjb2x1bW5zID0gY2FuZGlkYXRlc1tjYW5kaWRhdGVzLmxlbmd0aCAtIDFdLmxheW91dFJlc3VsdC5jb2x1bW5zO1xuICBjb25zdCBtYXhDb2x1bW5CbG9ja1NpemUgPSBNYXRoLm1heC5hcHBseShcbiAgICBudWxsLFxuICAgIGNvbHVtbnMubWFwKChjKSA9PiB7XG4gICAgICBpZiAoIWlzTmFOKGMuYmxvY2tEaXN0YW5jZVRvQmxvY2tFbmRGbG9hdHMpKSB7XG4gICAgICAgIHJldHVybiAoXG4gICAgICAgICAgYy5jb21wdXRlZEJsb2NrU2l6ZSAtXG4gICAgICAgICAgYy5ibG9ja0Rpc3RhbmNlVG9CbG9ja0VuZEZsb2F0cyArXG4gICAgICAgICAgQ09MVU1OX0xFTkdUSF9TVEVQXG4gICAgICAgICk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICByZXR1cm4gYy5jb21wdXRlZEJsb2NrU2l6ZTtcbiAgICAgIH1cbiAgICB9KSxcbiAgKTtcbiAgY29uc3QgbmV3RWRnZSA9IG1heENvbHVtbkJsb2NrU2l6ZSAtIENPTFVNTl9MRU5HVEhfU1RFUDtcbiAgaWYgKG5ld0VkZ2UgPCBnZXRCbG9ja1NpemUoY29udGFpbmVyKSkge1xuICAgIHNldEJsb2NrU2l6ZShjb250YWluZXIsIG5ld0VkZ2UpO1xuICB9IGVsc2Uge1xuICAgIHNldEJsb2NrU2l6ZShjb250YWluZXIsIGdldEJsb2NrU2l6ZShjb250YWluZXIpIC0gMSk7XG4gIH1cbn1cblxuZXhwb3J0IGNsYXNzIEJhbGFuY2VMYXN0Q29sdW1uQmFsYW5jZXIgZXh0ZW5kcyBDb2x1bW5CYWxhbmNlciB7XG4gIG9yaWdpbmFsUG9zaXRpb246IFZ0cmVlLkxheW91dFBvc2l0aW9uIHwgbnVsbCA9IG51bGw7XG4gIGZvdW5kVXBwZXJCb3VuZDogYm9vbGVhbiA9IGZhbHNlO1xuXG4gIGNvbnN0cnVjdG9yKFxuICAgIGNvbHVtbkdlbmVyYXRvcjogQ29sdW1uR2VuZXJhdG9yLFxuICAgIHJlZ2lvblBhZ2VGbG9hdExheW91dENvbnRleHQsXG4gICAgbGF5b3V0Q29udGFpbmVyOiBWdHJlZS5Db250YWluZXIsXG4gICAgcHVibGljIHJlYWRvbmx5IGNvbHVtbkNvdW50OiBudW1iZXIsXG4gICkge1xuICAgIHN1cGVyKGxheW91dENvbnRhaW5lciwgY29sdW1uR2VuZXJhdG9yLCByZWdpb25QYWdlRmxvYXRMYXlvdXRDb250ZXh0KTtcbiAgfVxuXG4gIC8qKlxuICAgKiBAb3ZlcnJpZGVcbiAgICovXG4gIHByZUJhbGFuY2UobGF5b3V0UmVzdWx0OiBDb2x1bW5MYXlvdXRSZXN1bHQpIHtcbiAgICBjb25zdCBjb2x1bW5zID0gbGF5b3V0UmVzdWx0LmNvbHVtbnM7XG4gICAgY29uc3QgdG90YWxCbG9ja1NpemUgPSBjb2x1bW5zLnJlZHVjZShcbiAgICAgIChwcmV2LCBjKSA9PiBwcmV2ICsgYy5jb21wdXRlZEJsb2NrU2l6ZSxcbiAgICAgIDAsXG4gICAgKTtcbiAgICBzZXRCbG9ja1NpemUodGhpcy5sYXlvdXRDb250YWluZXIsIHRvdGFsQmxvY2tTaXplIC8gdGhpcy5jb2x1bW5Db3VudCk7XG4gICAgdGhpcy5vcmlnaW5hbFBvc2l0aW9uID0gbGF5b3V0UmVzdWx0LnBvc2l0aW9uO1xuICB9XG5cbiAgcHJpdmF0ZSBjaGVja1Bvc2l0aW9uKHBvc2l0aW9uOiBWdHJlZS5MYXlvdXRQb3NpdGlvbiB8IG51bGwpOiBib29sZWFuIHtcbiAgICBpZiAodGhpcy5vcmlnaW5hbFBvc2l0aW9uKSB7XG4gICAgICByZXR1cm4gdGhpcy5vcmlnaW5hbFBvc2l0aW9uLmlzU2FtZVBvc2l0aW9uKHBvc2l0aW9uKTtcbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuIHBvc2l0aW9uID09PSBudWxsO1xuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAgKiBAb3ZlcnJpZGVcbiAgICovXG4gIGNhbGN1bGF0ZVBlbmFsdHkobGF5b3V0UmVzdWx0OiBDb2x1bW5MYXlvdXRSZXN1bHQpOiBudW1iZXIge1xuICAgIGlmICghdGhpcy5jaGVja1Bvc2l0aW9uKGxheW91dFJlc3VsdC5wb3NpdGlvbikpIHtcbiAgICAgIHJldHVybiBJbmZpbml0eTtcbiAgICB9XG4gICAgY29uc3QgY29sdW1ucyA9IGxheW91dFJlc3VsdC5jb2x1bW5zO1xuICAgIGlmIChpc0xhc3RDb2x1bW5Mb25nZXJUaGFuQW55T3RoZXJDb2x1bW4oY29sdW1ucykpIHtcbiAgICAgIHJldHVybiBJbmZpbml0eTtcbiAgICB9XG4gICAgcmV0dXJuIE1hdGgubWF4LmFwcGx5KFxuICAgICAgbnVsbCxcbiAgICAgIGNvbHVtbnMubWFwKChjKSA9PiBjLmNvbXB1dGVkQmxvY2tTaXplKSxcbiAgICApO1xuICB9XG5cbiAgLyoqXG4gICAqIEBvdmVycmlkZVxuICAgKi9cbiAgaGFzTmV4dENhbmRpZGF0ZShjYW5kaWRhdGVzOiBDb2x1bW5CYWxhbmNpbmdUcmlhbFJlc3VsdFtdKTogYm9vbGVhbiB7XG4gICAgaWYgKGNhbmRpZGF0ZXMubGVuZ3RoID09PSAxKSB7XG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9IGVsc2UgaWYgKHRoaXMuZm91bmRVcHBlckJvdW5kKSB7XG4gICAgICByZXR1cm4gY2FuUmVkdWNlQ29udGFpbmVyU2l6ZShjYW5kaWRhdGVzKTtcbiAgICB9IGVsc2Uge1xuICAgICAgY29uc3QgbGFzdENhbmRpZGF0ZSA9IGNhbmRpZGF0ZXNbY2FuZGlkYXRlcy5sZW5ndGggLSAxXTtcbiAgICAgIGlmICh0aGlzLmNoZWNrUG9zaXRpb24obGFzdENhbmRpZGF0ZS5sYXlvdXRSZXN1bHQucG9zaXRpb24pKSB7XG4gICAgICAgIGlmIChcbiAgICAgICAgICAhaXNMYXN0Q29sdW1uTG9uZ2VyVGhhbkFueU90aGVyQ29sdW1uKFxuICAgICAgICAgICAgbGFzdENhbmRpZGF0ZS5sYXlvdXRSZXN1bHQuY29sdW1ucyxcbiAgICAgICAgICApXG4gICAgICAgICkge1xuICAgICAgICAgIHRoaXMuZm91bmRVcHBlckJvdW5kID0gdHJ1ZTtcbiAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgcmV0dXJuIChcbiAgICAgICAgZ2V0QmxvY2tTaXplKHRoaXMubGF5b3V0Q29udGFpbmVyKSA8IHRoaXMub3JpZ2luYWxDb250YWluZXJCbG9ja1NpemVcbiAgICAgICk7XG4gICAgfVxuICB9XG5cbiAgLyoqXG4gICAqIEBvdmVycmlkZVxuICAgKi9cbiAgdXBkYXRlQ29uZGl0aW9uKGNhbmRpZGF0ZXM6IENvbHVtbkJhbGFuY2luZ1RyaWFsUmVzdWx0W10pOiB2b2lkIHtcbiAgICBpZiAodGhpcy5mb3VuZFVwcGVyQm91bmQpIHtcbiAgICAgIHJlZHVjZUNvbnRhaW5lclNpemUoY2FuZGlkYXRlcywgdGhpcy5sYXlvdXRDb250YWluZXIpO1xuICAgIH0gZWxzZSB7XG4gICAgICBjb25zdCBuZXdFZGdlID0gTWF0aC5taW4oXG4gICAgICAgIHRoaXMub3JpZ2luYWxDb250YWluZXJCbG9ja1NpemUsXG4gICAgICAgIGdldEJsb2NrU2l6ZSh0aGlzLmxheW91dENvbnRhaW5lcikgK1xuICAgICAgICAgIHRoaXMub3JpZ2luYWxDb250YWluZXJCbG9ja1NpemUgKiAwLjEsXG4gICAgICApO1xuICAgICAgc2V0QmxvY2tTaXplKHRoaXMubGF5b3V0Q29udGFpbmVyLCBuZXdFZGdlKTtcbiAgICB9XG4gIH1cbn1cblxuZnVuY3Rpb24gaXNMYXN0Q29sdW1uTG9uZ2VyVGhhbkFueU90aGVyQ29sdW1uKFxuICBjb2x1bW5zOiBMYXlvdXQuQ29sdW1uW10sXG4pOiBib29sZWFuIHtcbiAgaWYgKGNvbHVtbnMubGVuZ3RoIDw9IDEpIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cbiAgY29uc3QgbGFzdENvbHVtbkJsb2NrU2l6ZSA9IGNvbHVtbnNbY29sdW1ucy5sZW5ndGggLSAxXS5jb21wdXRlZEJsb2NrU2l6ZTtcbiAgY29uc3Qgb3RoZXJDb2x1bW5zID0gY29sdW1ucy5zbGljZSgwLCBjb2x1bW5zLmxlbmd0aCAtIDEpO1xuICByZXR1cm4gb3RoZXJDb2x1bW5zLmV2ZXJ5KChjKSA9PiBsYXN0Q29sdW1uQmxvY2tTaXplID4gYy5jb21wdXRlZEJsb2NrU2l6ZSk7XG59XG5cbmV4cG9ydCBjbGFzcyBCYWxhbmNlTm9uTGFzdENvbHVtbkJhbGFuY2VyIGV4dGVuZHMgQ29sdW1uQmFsYW5jZXIge1xuICBjb25zdHJ1Y3RvcihcbiAgICBjb2x1bW5HZW5lcmF0b3I6IENvbHVtbkdlbmVyYXRvcixcbiAgICByZWdpb25QYWdlRmxvYXRMYXlvdXRDb250ZXh0LFxuICAgIGxheW91dENvbnRhaW5lcjogVnRyZWUuQ29udGFpbmVyLFxuICApIHtcbiAgICBzdXBlcihsYXlvdXRDb250YWluZXIsIGNvbHVtbkdlbmVyYXRvciwgcmVnaW9uUGFnZUZsb2F0TGF5b3V0Q29udGV4dCk7XG4gIH1cblxuICAvKipcbiAgICogQG92ZXJyaWRlXG4gICAqL1xuICBjYWxjdWxhdGVQZW5hbHR5KGxheW91dFJlc3VsdDogQ29sdW1uTGF5b3V0UmVzdWx0KTogbnVtYmVyIHtcbiAgICBpZiAobGF5b3V0UmVzdWx0LmNvbHVtbnMuZXZlcnkoKGMpID0+IGMuY29tcHV0ZWRCbG9ja1NpemUgPT09IDApKSB7XG4gICAgICByZXR1cm4gSW5maW5pdHk7XG4gICAgfVxuICAgIGNvbnN0IGNvbXB1dGVkQmxvY2tTaXplcyA9IGxheW91dFJlc3VsdC5jb2x1bW5zXG4gICAgICAuZmlsdGVyKChjKSA9PiAhYy5wYWdlQnJlYWtUeXBlKVxuICAgICAgLm1hcCgoYykgPT4gYy5jb21wdXRlZEJsb2NrU2l6ZSk7XG4gICAgcmV0dXJuIE1hdGhVdGlsLnZhcmlhbmNlKGNvbXB1dGVkQmxvY2tTaXplcyk7XG4gIH1cblxuICAvKipcbiAgICogQG92ZXJyaWRlXG4gICAqL1xuICBoYXNOZXh0Q2FuZGlkYXRlKGNhbmRpZGF0ZXM6IENvbHVtbkJhbGFuY2luZ1RyaWFsUmVzdWx0W10pOiBib29sZWFuIHtcbiAgICByZXR1cm4gY2FuUmVkdWNlQ29udGFpbmVyU2l6ZShjYW5kaWRhdGVzKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBAb3ZlcnJpZGVcbiAgICovXG4gIHVwZGF0ZUNvbmRpdGlvbihjYW5kaWRhdGVzOiBDb2x1bW5CYWxhbmNpbmdUcmlhbFJlc3VsdFtdKTogdm9pZCB7XG4gICAgcmVkdWNlQ29udGFpbmVyU2l6ZShjYW5kaWRhdGVzLCB0aGlzLmxheW91dENvbnRhaW5lcik7XG4gIH1cbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGNyZWF0ZUNvbHVtbkJhbGFuY2VyKFxuICBjb2x1bW5Db3VudDogbnVtYmVyLFxuICBjb2x1bW5GaWxsOiBDc3MuSWRlbnQsXG4gIGNvbHVtbkdlbmVyYXRvcjogQ29sdW1uR2VuZXJhdG9yLFxuICByZWdpb25QYWdlRmxvYXRMYXlvdXRDb250ZXh0OiBQYWdlRmxvYXRzLlBhZ2VGbG9hdExheW91dENvbnRleHQsXG4gIGxheW91dENvbnRhaW5lcjogVnRyZWUuQ29udGFpbmVyLFxuICBjb2x1bW5zOiBMYXlvdXQuQ29sdW1uW10sXG4gIGZsb3dQb3NpdGlvbjogVnRyZWUuRmxvd1Bvc2l0aW9uLFxuKTogQ29sdW1uQmFsYW5jZXIgfCBudWxsIHtcbiAgaWYgKGNvbHVtbkZpbGwgPT09IENzcy5pZGVudC5hdXRvKSB7XG4gICAgcmV0dXJuIG51bGw7XG4gIH0gZWxzZSB7XG4gICAgLy8gVE9ETzogaG93IHRvIGhhbmRsZSBhIGNhc2Ugd2hlcmUgbm8gbW9yZSBpbi1mbG93IGNvbnRlbnRzIGJ1dCBzb21lXG4gICAgLy8gcGFnZSBmbG9hdHNcbiAgICBjb25zdCBub01vcmVDb250ZW50ID0gZmxvd1Bvc2l0aW9uLnBvc2l0aW9ucy5sZW5ndGggPT09IDA7XG4gICAgY29uc3QgbGFzdENvbHVtbiA9IGNvbHVtbnNbY29sdW1ucy5sZW5ndGggLSAxXTtcbiAgICBjb25zdCBpc0xhc3RDb2x1bW5Gb3JjZUJyb2tlbiA9ICEhKGxhc3RDb2x1bW4gJiYgbGFzdENvbHVtbi5wYWdlQnJlYWtUeXBlKTtcbiAgICBpZiAobm9Nb3JlQ29udGVudCB8fCBpc0xhc3RDb2x1bW5Gb3JjZUJyb2tlbikge1xuICAgICAgcmV0dXJuIG5ldyBCYWxhbmNlTGFzdENvbHVtbkJhbGFuY2VyKFxuICAgICAgICBjb2x1bW5HZW5lcmF0b3IsXG4gICAgICAgIHJlZ2lvblBhZ2VGbG9hdExheW91dENvbnRleHQsXG4gICAgICAgIGxheW91dENvbnRhaW5lcixcbiAgICAgICAgY29sdW1uQ291bnQsXG4gICAgICApO1xuICAgIH0gZWxzZSBpZiAoY29sdW1uRmlsbCA9PT0gQ3NzLmlkZW50LmJhbGFuY2VfYWxsKSB7XG4gICAgICByZXR1cm4gbmV3IEJhbGFuY2VOb25MYXN0Q29sdW1uQmFsYW5jZXIoXG4gICAgICAgIGNvbHVtbkdlbmVyYXRvcixcbiAgICAgICAgcmVnaW9uUGFnZUZsb2F0TGF5b3V0Q29udGV4dCxcbiAgICAgICAgbGF5b3V0Q29udGFpbmVyLFxuICAgICAgKTtcbiAgICB9IGVsc2Uge1xuICAgICAgQXNzZXJ0cy5hc3NlcnQoY29sdW1uRmlsbCA9PT0gQ3NzLmlkZW50LmJhbGFuY2UpO1xuICAgICAgcmV0dXJuIG51bGw7XG4gICAgfVxuICB9XG59XG4iLCIvKipcbiAqIENvcHlyaWdodCAyMDEzIEdvb2dsZSwgSW5jLlxuICogQ29weXJpZ2h0IDIwMTUgVHJpbS1tYXJrcyBJbmMuXG4gKiBDb3B5cmlnaHQgMjAxOSBWaXZsaW9zdHlsZSBGb3VuZGF0aW9uXG4gKlxuICogVml2bGlvc3R5bGUuanMgaXMgZnJlZSBzb2Z0d2FyZTogeW91IGNhbiByZWRpc3RyaWJ1dGUgaXQgYW5kL29yIG1vZGlmeVxuICogaXQgdW5kZXIgdGhlIHRlcm1zIG9mIHRoZSBHTlUgQWZmZXJvIEdlbmVyYWwgUHVibGljIExpY2Vuc2UgYXMgcHVibGlzaGVkIGJ5XG4gKiB0aGUgRnJlZSBTb2Z0d2FyZSBGb3VuZGF0aW9uLCBlaXRoZXIgdmVyc2lvbiAzIG9mIHRoZSBMaWNlbnNlLCBvclxuICogKGF0IHlvdXIgb3B0aW9uKSBhbnkgbGF0ZXIgdmVyc2lvbi5cbiAqXG4gKiBWaXZsaW9zdHlsZS5qcyBpcyBkaXN0cmlidXRlZCBpbiB0aGUgaG9wZSB0aGF0IGl0IHdpbGwgYmUgdXNlZnVsLFxuICogYnV0IFdJVEhPVVQgQU5ZIFdBUlJBTlRZOyB3aXRob3V0IGV2ZW4gdGhlIGltcGxpZWQgd2FycmFudHkgb2ZcbiAqIE1FUkNIQU5UQUJJTElUWSBvciBGSVRORVNTIEZPUiBBIFBBUlRJQ1VMQVIgUFVSUE9TRS4gIFNlZSB0aGVcbiAqIEdOVSBBZmZlcm8gR2VuZXJhbCBQdWJsaWMgTGljZW5zZSBmb3IgbW9yZSBkZXRhaWxzLlxuICpcbiAqIFlvdSBzaG91bGQgaGF2ZSByZWNlaXZlZCBhIGNvcHkgb2YgdGhlIEdOVSBBZmZlcm8gR2VuZXJhbCBQdWJsaWMgTGljZW5zZVxuICogYWxvbmcgd2l0aCBWaXZsaW9zdHlsZS5qcy4gIElmIG5vdCwgc2VlIDxodHRwOi8vd3d3LmdudS5vcmcvbGljZW5zZXMvPi5cbiAqXG4gKiBAZmlsZW92ZXJ2aWV3IENzc1ZhbGlkYXRvciAtIFBhcnNlIHZhbGlkYXRpb24gcnVsZXMgKHZhbGlkYXRpb24udHh0KSwgdmFsaWRhdGVcbiAqIHByb3BlcnRpZXMgYW5kIHNob3J0aGFuZHMuXG4gKi9cbmltcG9ydCAqIGFzIENzcyBmcm9tIFwiLi9jc3NcIjtcbmltcG9ydCAqIGFzIENzc1BhcnNlciBmcm9tIFwiLi9jc3MtcGFyc2VyXCI7XG5pbXBvcnQgKiBhcyBDc3NUb2tlbml6ZXIgZnJvbSBcIi4vY3NzLXRva2VuaXplclwiO1xuaW1wb3J0ICogYXMgTG9nZ2luZyBmcm9tIFwiLi9sb2dnaW5nXCI7XG5pbXBvcnQgeyBWYWxpZGF0aW9uVHh0IH0gZnJvbSBcIi4vYXNzZXRzXCI7XG5cbmV4cG9ydCBpbnRlcmZhY2UgUHJvcGVydHlSZWNlaXZlciB7XG4gIHVua25vd25Qcm9wZXJ0eShuYW1lOiBzdHJpbmcsIHZhbHVlOiBDc3MuVmFsKTogdm9pZDtcblxuICBpbnZhbGlkUHJvcGVydHlWYWx1ZShuYW1lOiBzdHJpbmcsIHZhbHVlOiBDc3MuVmFsKTogdm9pZDtcblxuICBzaW1wbGVQcm9wZXJ0eShuYW1lOiBzdHJpbmcsIHZhbHVlOiBDc3MuVmFsLCBpbXBvcnRhbnQpOiB2b2lkO1xufVxuXG5leHBvcnQgY2xhc3MgTm9kZSB7XG4gIHN1Y2Nlc3M6IE5vZGUgPSBudWxsO1xuICBmYWlsdXJlOiBOb2RlID0gbnVsbDtcbiAgY29kZTogbnVtYmVyID0gMDtcblxuICBjb25zdHJ1Y3RvcihwdWJsaWMgdmFsaWRhdG9yOiBQcm9wZXJ0eVZhbGlkYXRvcikge31cblxuICBpc1NwZWNpYWwoKTogYm9vbGVhbiB7XG4gICAgcmV0dXJuIHRoaXMuY29kZSAhPSAwO1xuICB9XG5cbiAgbWFya0FzU3RhcnRHcm91cCgpOiB2b2lkIHtcbiAgICB0aGlzLmNvZGUgPSAtMTtcbiAgfVxuXG4gIGlzU3RhcnRHcm91cCgpOiBib29sZWFuIHtcbiAgICByZXR1cm4gdGhpcy5jb2RlID09IC0xO1xuICB9XG5cbiAgbWFya0FzRW5kR3JvdXAoKTogdm9pZCB7XG4gICAgdGhpcy5jb2RlID0gLTI7XG4gIH1cblxuICBpc0VuZEdyb3VwKCk6IGJvb2xlYW4ge1xuICAgIHJldHVybiB0aGlzLmNvZGUgPT0gLTI7XG4gIH1cblxuICBtYXJrQXNTdGFydEFsdGVybmF0ZShpbmRleDogbnVtYmVyKTogdm9pZCB7XG4gICAgdGhpcy5jb2RlID0gMiAqIGluZGV4ICsgMTtcbiAgfVxuXG4gIGlzU3RhcnRBbHRlcm5hdGUoKTogYm9vbGVhbiB7XG4gICAgcmV0dXJuIHRoaXMuY29kZSA+IDAgJiYgdGhpcy5jb2RlICUgMiAhPSAwO1xuICB9XG5cbiAgbWFya0FzRW5kQWx0ZXJuYXRlKGluZGV4OiBudW1iZXIpOiB2b2lkIHtcbiAgICB0aGlzLmNvZGUgPSAyICogaW5kZXggKyAyO1xuICB9XG5cbiAgaXNFbmRBbHRlcm5hdGUoKTogYm9vbGVhbiB7XG4gICAgcmV0dXJuIHRoaXMuY29kZSA+IDAgJiYgdGhpcy5jb2RlICUgMiA9PSAwO1xuICB9XG5cbiAgZ2V0QWx0ZXJuYXRlKCk6IG51bWJlciB7XG4gICAgcmV0dXJuIE1hdGguZmxvb3IoKHRoaXMuY29kZSAtIDEpIC8gMik7XG4gIH1cbn1cblxuZXhwb3J0IGNsYXNzIENvbm5lY3Rpb24ge1xuICB3aGF0OiBudW1iZXIgPSAtMTtcblxuICBjb25zdHJ1Y3RvcihwdWJsaWMgd2hlcmU6IG51bWJlciwgcHVibGljIHN1Y2Nlc3M6IGJvb2xlYW4pIHt9XG59XG5cbi8qKlxuICogQGVudW0ge251bWJlcn1cbiAqL1xuZXhwb3J0IGVudW0gQWRkIHtcbiAgRk9MTE9XID0gMSxcbiAgT1BUSU9OQUwsXG4gIFJFUEVBVEVELFxuICBBTFRFUk5BVEUsXG59XG5cbi8qKlxuICogQSBjbGFzcyB0byBidWlsZCBhIGxpc3QgdmFsaWRhdG9yIGZyb20gb3RoZXIgdmFsaWRhdG9ycy5cbiAqL1xuZXhwb3J0IGNsYXNzIFZhbGlkYXRpbmdHcm91cCB7XG4gIG5vZGVzOiBOb2RlW10gPSBbXTtcbiAgY29ubmVjdGlvbnM6IENvbm5lY3Rpb25bXSA9IFtdO1xuICBtYXRjaDogbnVtYmVyW10gPSBbXTsgLy8gY29ubmVjdG9yIGluZGljaWVzXG4gIG5vbWF0Y2g6IG51bWJlcltdID0gW107IC8vIGNvbm5lY3RvciBpbmRpY2llc1xuICBlcnJvcjogbnVtYmVyW10gPSBbXTsgLy8gY29ubmVjdG9yIGluZGljaWVzXG4gIGVtcHR5SGVhZDogYm9vbGVhbiA9IHRydWU7XG5cbiAgY29ubmVjdChhcnI6IG51bWJlcltdLCBub2RlSW5kZXg6IG51bWJlcik6IHZvaWQge1xuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgYXJyLmxlbmd0aDsgaSsrKSB7XG4gICAgICB0aGlzLmNvbm5lY3Rpb25zW2FycltpXV0ud2hhdCA9IG5vZGVJbmRleDtcbiAgICB9XG4gICAgYXJyLnNwbGljZSgwLCBhcnIubGVuZ3RoKTtcbiAgfVxuXG4gIGNsb25lKCk6IFZhbGlkYXRpbmdHcm91cCB7XG4gICAgY29uc3QgZ3JvdXAgPSBuZXcgVmFsaWRhdGluZ0dyb3VwKCk7XG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCB0aGlzLm5vZGVzLmxlbmd0aDsgaSsrKSB7XG4gICAgICBjb25zdCBub2RlID0gdGhpcy5ub2Rlc1tpXTtcbiAgICAgIGNvbnN0IGNsb25lZE5vZGUgPSBuZXcgTm9kZShub2RlLnZhbGlkYXRvcik7XG4gICAgICBjbG9uZWROb2RlLmNvZGUgPSBub2RlLmNvZGU7XG4gICAgICBncm91cC5ub2Rlcy5wdXNoKGNsb25lZE5vZGUpO1xuICAgIH1cbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IHRoaXMuY29ubmVjdGlvbnMubGVuZ3RoOyBpKyspIHtcbiAgICAgIGNvbnN0IGNvbm5lY3Rpb24gPSB0aGlzLmNvbm5lY3Rpb25zW2ldO1xuICAgICAgY29uc3QgZ3JvdXBDb25uZWN0aW9uID0gbmV3IENvbm5lY3Rpb24oXG4gICAgICAgIGNvbm5lY3Rpb24ud2hlcmUsXG4gICAgICAgIGNvbm5lY3Rpb24uc3VjY2VzcyxcbiAgICAgICk7XG4gICAgICBncm91cENvbm5lY3Rpb24ud2hhdCA9IGNvbm5lY3Rpb24ud2hhdDtcbiAgICAgIGdyb3VwLmNvbm5lY3Rpb25zLnB1c2goZ3JvdXBDb25uZWN0aW9uKTtcbiAgICB9XG4gICAgZ3JvdXAubWF0Y2gucHVzaCguLi50aGlzLm1hdGNoKTtcbiAgICBncm91cC5ub21hdGNoLnB1c2goLi4udGhpcy5ub21hdGNoKTtcbiAgICBncm91cC5lcnJvci5wdXNoKC4uLnRoaXMuZXJyb3IpO1xuICAgIHJldHVybiBncm91cDtcbiAgfVxuXG4gIC8qKlxuICAgKiBBZGQgXCJzcGVjaWFsXCIgdmFsaWRhdGlvbiBub2RlIHRvIGEgZ2l2ZW4gYXJyYXkgKG1hdGNoLCBub21hdGNoLCBvciBlcnJvcikuXG4gICAqIEBwYXJhbSBzdGFydCBpZiB0aGlzIGEgc3RhcnQgb3IgdGhlIGVuZCBvZiBhIGNsYXVzZS9ncm91cFxuICAgKiBAcGFyYW0gY2xhdXNlIDAgaW5kaWNhdGVzIGdyb3VwIHN0YXJ0L2VuZCwgb3RoZXJ3aXNlIGNsYXVzZSBpbmRleFxuICAgKi9cbiAgcHJpdmF0ZSBhZGRTcGVjaWFsVG9BcnIoYXJyOiBudW1iZXJbXSwgc3RhcnQ6IGJvb2xlYW4sIGNsYXVzZTogbnVtYmVyKTogdm9pZCB7XG4gICAgY29uc3QgaW5kZXggPSB0aGlzLm5vZGVzLmxlbmd0aDtcbiAgICBjb25zdCBub2RlID0gbmV3IE5vZGUoQUxXQVlTX0ZBSUwpO1xuICAgIGlmIChjbGF1c2UgPj0gMCkge1xuICAgICAgaWYgKHN0YXJ0KSB7XG4gICAgICAgIG5vZGUubWFya0FzU3RhcnRBbHRlcm5hdGUoY2xhdXNlKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIG5vZGUubWFya0FzRW5kQWx0ZXJuYXRlKGNsYXVzZSk7XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIGlmIChzdGFydCkge1xuICAgICAgICBub2RlLm1hcmtBc1N0YXJ0R3JvdXAoKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIG5vZGUubWFya0FzRW5kR3JvdXAoKTtcbiAgICAgIH1cbiAgICB9XG4gICAgdGhpcy5ub2Rlcy5wdXNoKG5vZGUpO1xuICAgIHRoaXMuY29ubmVjdChhcnIsIGluZGV4KTtcbiAgICBjb25zdCBzdWNjZXNzID0gbmV3IENvbm5lY3Rpb24oaW5kZXgsIHRydWUpO1xuICAgIGNvbnN0IGZhaWx1cmUgPSBuZXcgQ29ubmVjdGlvbihpbmRleCwgZmFsc2UpO1xuICAgIGFyci5wdXNoKHRoaXMuY29ubmVjdGlvbnMubGVuZ3RoKTtcbiAgICB0aGlzLmNvbm5lY3Rpb25zLnB1c2goZmFpbHVyZSk7XG4gICAgYXJyLnB1c2godGhpcy5jb25uZWN0aW9ucy5sZW5ndGgpO1xuICAgIHRoaXMuY29ubmVjdGlvbnMucHVzaChzdWNjZXNzKTtcbiAgfVxuXG4gIGVuZFNwZWNpYWxHcm91cCgpOiB2b2lkIHtcbiAgICBjb25zdCBhcnJzID0gW3RoaXMubWF0Y2gsIHRoaXMubm9tYXRjaCwgdGhpcy5lcnJvcl07XG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCBhcnJzLmxlbmd0aDsgaSsrKSB7XG4gICAgICB0aGlzLmFkZFNwZWNpYWxUb0FycihhcnJzW2ldLCBmYWxzZSwgLTEpO1xuICAgIH1cbiAgfVxuXG4gIHN0YXJ0U3BlY2lhbEdyb3VwKCk6IHZvaWQge1xuICAgIGlmICh0aGlzLm5vZGVzLmxlbmd0aCkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKFwiaW52YWxpZCBjYWxsXCIpO1xuICAgIH1cbiAgICB0aGlzLmFkZFNwZWNpYWxUb0Fycih0aGlzLm1hdGNoLCB0cnVlLCAtMSk7XG4gIH1cblxuICBlbmRDbGF1c2UoY2xhdXNlOiBudW1iZXIpOiB2b2lkIHtcbiAgICB0aGlzLmFkZFNwZWNpYWxUb0Fycih0aGlzLm1hdGNoLCBmYWxzZSwgY2xhdXNlKTtcbiAgfVxuXG4gIHN0YXJ0Q2xhdXNlKGNsYXVzZTogbnVtYmVyKTogdm9pZCB7XG4gICAgaWYgKHRoaXMubm9kZXMubGVuZ3RoKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoXCJpbnZhbGlkIGNhbGxcIik7XG4gICAgfVxuICAgIGNvbnN0IG5vZGUgPSBuZXcgTm9kZShBTFdBWVNfRkFJTCk7XG4gICAgbm9kZS5tYXJrQXNTdGFydEFsdGVybmF0ZShjbGF1c2UpO1xuICAgIHRoaXMubm9kZXMucHVzaChub2RlKTtcbiAgICBjb25zdCBzdWNjZXNzID0gbmV3IENvbm5lY3Rpb24oMCwgdHJ1ZSk7XG4gICAgY29uc3QgZmFpbHVyZSA9IG5ldyBDb25uZWN0aW9uKDAsIGZhbHNlKTtcbiAgICB0aGlzLm5vbWF0Y2gucHVzaCh0aGlzLmNvbm5lY3Rpb25zLmxlbmd0aCk7XG4gICAgdGhpcy5jb25uZWN0aW9ucy5wdXNoKGZhaWx1cmUpO1xuICAgIHRoaXMubWF0Y2gucHVzaCh0aGlzLmNvbm5lY3Rpb25zLmxlbmd0aCk7XG4gICAgdGhpcy5jb25uZWN0aW9ucy5wdXNoKHN1Y2Nlc3MpO1xuICB9XG5cbiAgYWRkUHJpbWl0aXZlKHZhbGlkYXRvcjogUHJvcGVydHlWYWxpZGF0b3IpOiB2b2lkIHtcbiAgICBjb25zdCBpbmRleCA9IHRoaXMubm9kZXMubGVuZ3RoO1xuICAgIHRoaXMubm9kZXMucHVzaChuZXcgTm9kZSh2YWxpZGF0b3IpKTtcbiAgICBjb25zdCBzdWNjZXNzID0gbmV3IENvbm5lY3Rpb24oaW5kZXgsIHRydWUpO1xuICAgIGNvbnN0IGZhaWx1cmUgPSBuZXcgQ29ubmVjdGlvbihpbmRleCwgZmFsc2UpO1xuICAgIHRoaXMuY29ubmVjdCh0aGlzLm1hdGNoLCBpbmRleCk7XG4gICAgaWYgKHRoaXMuZW1wdHlIZWFkKSB7XG4gICAgICAvLyBpZiBkaWQgbm90IHZhbGlkYXRlIC0+IG5vIG1hdGNoXG4gICAgICB0aGlzLm5vbWF0Y2gucHVzaCh0aGlzLmNvbm5lY3Rpb25zLmxlbmd0aCk7XG4gICAgICB0aGlzLmVtcHR5SGVhZCA9IGZhbHNlO1xuICAgIH0gZWxzZSB7XG4gICAgICAvLyBpZiBkaWQgbm90IHZhbGlkYXRlIC0+IGZhaWx1cmVcbiAgICAgIHRoaXMuZXJyb3IucHVzaCh0aGlzLmNvbm5lY3Rpb25zLmxlbmd0aCk7XG4gICAgfVxuICAgIHRoaXMuY29ubmVjdGlvbnMucHVzaChmYWlsdXJlKTtcbiAgICB0aGlzLm1hdGNoLnB1c2godGhpcy5jb25uZWN0aW9ucy5sZW5ndGgpO1xuICAgIHRoaXMuY29ubmVjdGlvbnMucHVzaChzdWNjZXNzKTtcbiAgfVxuXG4gIGlzU2ltcGxlKCk6IGJvb2xlYW4ge1xuICAgIHJldHVybiB0aGlzLm5vZGVzLmxlbmd0aCA9PSAxICYmICF0aGlzLm5vZGVzWzBdLmlzU3BlY2lhbCgpO1xuICB9XG5cbiAgaXNQcmltaXRpdmUoKTogYm9vbGVhbiB7XG4gICAgcmV0dXJuIChcbiAgICAgIHRoaXMuaXNTaW1wbGUoKSAmJiB0aGlzLm5vZGVzWzBdLnZhbGlkYXRvciBpbnN0YW5jZW9mIFByaW1pdGl2ZVZhbGlkYXRvclxuICAgICk7XG4gIH1cblxuICBhZGRHcm91cChncm91cDogVmFsaWRhdGluZ0dyb3VwLCBob3c6IEFkZCk6IHZvaWQge1xuICAgIGlmIChncm91cC5ub2Rlcy5sZW5ndGggPT0gMCkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBjb25zdCBpbmRleCA9IHRoaXMubm9kZXMubGVuZ3RoO1xuXG4gICAgLy8gb3B0aW1pemF0aW9uIGZvciBhbHRlcm5hdGUgcHJpbWl0aXZlIHZhbGlkYXRvcnNcbiAgICBpZiAoXG4gICAgICBob3cgPT0gQWRkLkFMVEVSTkFURSAmJlxuICAgICAgaW5kZXggPT0gMSAmJlxuICAgICAgZ3JvdXAuaXNQcmltaXRpdmUoKSAmJlxuICAgICAgdGhpcy5pc1ByaW1pdGl2ZSgpXG4gICAgKSB7XG4gICAgICB0aGlzLm5vZGVzWzBdLnZhbGlkYXRvciA9ICh0aGlzLm5vZGVzWzBdXG4gICAgICAgIC52YWxpZGF0b3IgYXMgUHJpbWl0aXZlVmFsaWRhdG9yKS5jb21iaW5lKFxuICAgICAgICBncm91cC5ub2Rlc1swXS52YWxpZGF0b3IgYXMgUHJpbWl0aXZlVmFsaWRhdG9yLFxuICAgICAgKTtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCBncm91cC5ub2Rlcy5sZW5ndGg7IGkrKykge1xuICAgICAgdGhpcy5ub2Rlcy5wdXNoKGdyb3VwLm5vZGVzW2ldKTtcbiAgICB9XG5cbiAgICAvLyBub2Rlc1tpbmRleF0gaXMgZ3JvdXAgc3RhcnRcbiAgICBpZiAoaG93ID09IEFkZC5BTFRFUk5BVEUpIHtcbiAgICAgIHRoaXMuZW1wdHlIZWFkID0gdHJ1ZTtcbiAgICAgIHRoaXMuY29ubmVjdCh0aGlzLm5vbWF0Y2gsIGluZGV4KTtcbiAgICB9IGVsc2Uge1xuICAgICAgdGhpcy5jb25uZWN0KHRoaXMubWF0Y2gsIGluZGV4KTtcbiAgICB9XG4gICAgY29uc3QgY29ubmVjdGlvbkluZGV4ID0gdGhpcy5jb25uZWN0aW9ucy5sZW5ndGg7XG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCBncm91cC5jb25uZWN0aW9ucy5sZW5ndGg7IGkrKykge1xuICAgICAgY29uc3QgY29ubmVjdGlvbiA9IGdyb3VwLmNvbm5lY3Rpb25zW2ldO1xuICAgICAgY29ubmVjdGlvbi53aGVyZSArPSBpbmRleDtcbiAgICAgIGlmIChjb25uZWN0aW9uLndoYXQgPj0gMCkge1xuICAgICAgICBjb25uZWN0aW9uLndoYXQgKz0gaW5kZXg7XG4gICAgICB9XG4gICAgICB0aGlzLmNvbm5lY3Rpb25zLnB1c2goY29ubmVjdGlvbik7XG4gICAgfVxuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgZ3JvdXAubWF0Y2gubGVuZ3RoOyBpKyspIHtcbiAgICAgIHRoaXMubWF0Y2gucHVzaChncm91cC5tYXRjaFtpXSArIGNvbm5lY3Rpb25JbmRleCk7XG4gICAgfVxuICAgIGlmIChob3cgPT0gQWRkLlJFUEVBVEVEKSB7XG4gICAgICB0aGlzLmNvbm5lY3QodGhpcy5tYXRjaCwgaW5kZXgpO1xuICAgIH1cbiAgICBpZiAoaG93ID09IEFkZC5PUFRJT05BTCB8fCBob3cgPT0gQWRkLlJFUEVBVEVEKSB7XG4gICAgICBmb3IgKGxldCBpID0gMDsgaSA8IGdyb3VwLm5vbWF0Y2gubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgdGhpcy5tYXRjaC5wdXNoKGdyb3VwLm5vbWF0Y2hbaV0gKyBjb25uZWN0aW9uSW5kZXgpO1xuICAgICAgfVxuICAgIH0gZWxzZSBpZiAodGhpcy5lbXB0eUhlYWQpIHtcbiAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgZ3JvdXAubm9tYXRjaC5sZW5ndGg7IGkrKykge1xuICAgICAgICB0aGlzLm5vbWF0Y2gucHVzaChncm91cC5ub21hdGNoW2ldICsgY29ubmVjdGlvbkluZGV4KTtcbiAgICAgIH1cbiAgICAgIHRoaXMuZW1wdHlIZWFkID0gZ3JvdXAuZW1wdHlIZWFkO1xuICAgIH0gZWxzZSB7XG4gICAgICBmb3IgKGxldCBpID0gMDsgaSA8IGdyb3VwLm5vbWF0Y2gubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgdGhpcy5lcnJvci5wdXNoKGdyb3VwLm5vbWF0Y2hbaV0gKyBjb25uZWN0aW9uSW5kZXgpO1xuICAgICAgfVxuICAgIH1cbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IGdyb3VwLmVycm9yLmxlbmd0aDsgaSsrKSB7XG4gICAgICB0aGlzLmVycm9yLnB1c2goZ3JvdXAuZXJyb3JbaV0gKyBjb25uZWN0aW9uSW5kZXgpO1xuICAgIH1cblxuICAgIC8vIGludmFsaWRhdGUgZ3JvdXBcbiAgICBncm91cC5ub2RlcyA9IG51bGw7XG4gICAgZ3JvdXAuY29ubmVjdGlvbnMgPSBudWxsO1xuICB9XG5cbiAgLyoqXG4gICAqIEByZXR1cm4gaG93XG4gICAqL1xuICBmaW5pc2goc3VjY2Vzc1Rlcm1pbmFsOiBOb2RlLCBmYWlsVGVybWluYWw6IE5vZGUpOiBOb2RlIHtcbiAgICBjb25zdCBpbmRleCA9IHRoaXMubm9kZXMubGVuZ3RoO1xuICAgIHRoaXMubm9kZXMucHVzaChzdWNjZXNzVGVybWluYWwpO1xuICAgIHRoaXMubm9kZXMucHVzaChmYWlsVGVybWluYWwpO1xuICAgIHRoaXMuY29ubmVjdCh0aGlzLm1hdGNoLCBpbmRleCk7XG4gICAgdGhpcy5jb25uZWN0KHRoaXMubm9tYXRjaCwgaW5kZXggKyAxKTtcbiAgICB0aGlzLmNvbm5lY3QodGhpcy5lcnJvciwgaW5kZXggKyAxKTtcbiAgICBmb3IgKGNvbnN0IGNvbm5lY3Rpb24gb2YgdGhpcy5jb25uZWN0aW9ucykge1xuICAgICAgaWYgKGNvbm5lY3Rpb24uc3VjY2Vzcykge1xuICAgICAgICB0aGlzLm5vZGVzW2Nvbm5lY3Rpb24ud2hlcmVdLnN1Y2Nlc3MgPSB0aGlzLm5vZGVzW2Nvbm5lY3Rpb24ud2hhdF07XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB0aGlzLm5vZGVzW2Nvbm5lY3Rpb24ud2hlcmVdLmZhaWx1cmUgPSB0aGlzLm5vZGVzW2Nvbm5lY3Rpb24ud2hhdF07XG4gICAgICB9XG4gICAgfVxuXG4gICAgLy8gbWFrZSBzdXJlIHRoYXQgb3VyIGRhdGEgc3RydWN0dXJlIGlzIGNvcnJlY3RcbiAgICBmb3IgKGxldCBqID0gMDsgaiA8IGluZGV4OyBqKyspIHtcbiAgICAgIGlmICh0aGlzLm5vZGVzW2pdLmZhaWx1cmUgPT0gbnVsbCB8fCB0aGlzLm5vZGVzW2pdLnN1Y2Nlc3MgPT0gbnVsbCkge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJJbnZhbGlkIHZhbGlkYXRvciBzdGF0ZVwiKTtcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIHRoaXMubm9kZXNbMF07XG4gIH1cbn1cblxuZXhwb3J0IGNvbnN0IEFMTE9XX0VNUFRZID0gMTtcblxuZXhwb3J0IGNvbnN0IEFMTE9XX1NUUiA9IDI7XG5cbmV4cG9ydCBjb25zdCBBTExPV19JREVOVCA9IDQ7XG5cbmV4cG9ydCBjb25zdCBBTExPV19QT1NfTlVNRVJJQyA9IDg7XG5cbmV4cG9ydCBjb25zdCBBTExPV19QT1NfTlVNID0gMTY7XG5cbmV4cG9ydCBjb25zdCBBTExPV19QT1NfSU5UID0gMzI7XG5cbmV4cG9ydCBjb25zdCBBTExPV19DT0xPUiA9IDY0O1xuXG5leHBvcnQgY29uc3QgQUxMT1dfVVJMID0gMTI4O1xuXG5leHBvcnQgY29uc3QgQUxMT1dfTkVHQVRJVkUgPSAyNTY7XG5cbmV4cG9ydCBjb25zdCBBTExPV19aRVJPID0gNTEyO1xuXG5leHBvcnQgY29uc3QgQUxMT1dfWkVST19QRVJDRU5UID0gMTAyNDtcblxuZXhwb3J0IGNvbnN0IEFMTE9XX1NMQVNIID0gMjA0ODtcblxuZXhwb3J0IHR5cGUgVmFsdWVNYXAgPSB7XG4gIFtrZXk6IHN0cmluZ106IENzcy5WYWw7XG59O1xuXG4vKipcbiAqIEFic3RyYWN0IGNsYXNzIHRvIHZhbGlkYXRlIHNpbXBsZSBDU1MgcHJvcGVydHkgdmFsdWUgKG5vdCBhIHNob3J0aGFuZClcbiAqL1xuZXhwb3J0IGNsYXNzIFByb3BlcnR5VmFsaWRhdG9yIGV4dGVuZHMgQ3NzLlZpc2l0b3Ige1xuICBjb25zdHJ1Y3RvcigpIHtcbiAgICBzdXBlcigpO1xuICB9XG5cbiAgLyoqXG4gICAqIFZhbGlkYXRlIGEgc3Vic2VxdWVuY2Ugb2YgdGhlIGdpdmVuIHZhbHVlcyBmcm9tIHRoZSBnaXZlbiBpbmRleC4gUmV0dXJuIHRoZVxuICAgKiBsaXN0IG9mIG1hdGNoZWQgdmFsdWVzIG9yIG51bGwgaWYgdGhlcmUgaXMgbm8gbWF0Y2guXG4gICAqL1xuICB2YWxpZGF0ZUZvclNob3J0aGFuZCh2YWx1ZXM6IENzcy5WYWxbXSwgaW5kZXg6IG51bWJlcik6IENzcy5WYWxbXSB7XG4gICAgY29uc3QgcnZhbCA9IHZhbHVlc1tpbmRleF0udmlzaXQodGhpcyk7XG4gICAgaWYgKHJ2YWwpIHtcbiAgICAgIHJldHVybiBbcnZhbF07XG4gICAgfVxuICAgIHJldHVybiBudWxsO1xuICB9XG59XG5cbi8qKlxuICogVmFsaWRhdGUgYSBwcmltaXRpdmUgQ1NTIHZhbHVlIChub3QgYSBsaXN0IG9yIGZ1bmN0aW9uKS5cbiAqIEBwYXJhbSBhbGxvd2VkIG1hc2sgb2YgQUxMT1dfKioqIGNvbnN0YW50cy5cbiAqL1xuZXhwb3J0IGNsYXNzIFByaW1pdGl2ZVZhbGlkYXRvciBleHRlbmRzIFByb3BlcnR5VmFsaWRhdG9yIHtcbiAgY29uc3RydWN0b3IoXG4gICAgcHVibGljIHJlYWRvbmx5IGFsbG93ZWQ6IG51bWJlcixcbiAgICBwdWJsaWMgcmVhZG9ubHkgaWRlbnRzOiBWYWx1ZU1hcCxcbiAgICBwdWJsaWMgcmVhZG9ubHkgdW5pdHM6IFZhbHVlTWFwLFxuICApIHtcbiAgICBzdXBlcigpO1xuICB9XG5cbiAgLyoqXG4gICAqIEBvdmVycmlkZVxuICAgKi9cbiAgdmlzaXRFbXB0eShlbXB0eTogQ3NzLlZhbCk6IENzcy5WYWwge1xuICAgIGlmICh0aGlzLmFsbG93ZWQgJiBBTExPV19FTVBUWSkge1xuICAgICAgcmV0dXJuIGVtcHR5O1xuICAgIH1cbiAgICByZXR1cm4gbnVsbDtcbiAgfVxuXG4gIC8qKlxuICAgKiBAb3ZlcnJpZGVcbiAgICovXG4gIHZpc2l0U2xhc2goc2xhc2g6IENzcy5WYWwpOiBDc3MuVmFsIHtcbiAgICBpZiAodGhpcy5hbGxvd2VkICYgQUxMT1dfU0xBU0gpIHtcbiAgICAgIHJldHVybiBzbGFzaDtcbiAgICB9XG4gICAgcmV0dXJuIG51bGw7XG4gIH1cblxuICAvKipcbiAgICogQG92ZXJyaWRlXG4gICAqL1xuICB2aXNpdFN0cihzdHI6IENzcy5TdHIpOiBDc3MuVmFsIHtcbiAgICBpZiAodGhpcy5hbGxvd2VkICYgQUxMT1dfU1RSKSB7XG4gICAgICByZXR1cm4gc3RyO1xuICAgIH1cbiAgICByZXR1cm4gbnVsbDtcbiAgfVxuXG4gIC8qKlxuICAgKiBAb3ZlcnJpZGVcbiAgICovXG4gIHZpc2l0SWRlbnQoaWRlbnQ6IENzcy5JZGVudCk6IENzcy5WYWwge1xuICAgIGNvbnN0IHZhbCA9IHRoaXMuaWRlbnRzW2lkZW50Lm5hbWUudG9Mb3dlckNhc2UoKV07XG4gICAgaWYgKHZhbCkge1xuICAgICAgcmV0dXJuIHZhbDtcbiAgICB9XG4gICAgaWYgKHRoaXMuYWxsb3dlZCAmIEFMTE9XX0lERU5UKSB7XG4gICAgICByZXR1cm4gaWRlbnQ7XG4gICAgfVxuICAgIHJldHVybiBudWxsO1xuICB9XG5cbiAgLyoqXG4gICAqIEBvdmVycmlkZVxuICAgKi9cbiAgdmlzaXROdW1lcmljKG51bWVyaWM6IENzcy5OdW1lcmljKTogQ3NzLlZhbCB7XG4gICAgaWYgKG51bWVyaWMubnVtID09IDAgJiYgISh0aGlzLmFsbG93ZWQgJiBBTExPV19aRVJPKSkge1xuICAgICAgaWYgKG51bWVyaWMudW5pdCA9PSBcIiVcIiAmJiB0aGlzLmFsbG93ZWQgJiBBTExPV19aRVJPX1BFUkNFTlQpIHtcbiAgICAgICAgcmV0dXJuIG51bWVyaWM7XG4gICAgICB9XG4gICAgICByZXR1cm4gbnVsbDtcbiAgICB9XG4gICAgaWYgKG51bWVyaWMubnVtIDwgMCAmJiAhKHRoaXMuYWxsb3dlZCAmIEFMTE9XX05FR0FUSVZFKSkge1xuICAgICAgcmV0dXJuIG51bGw7XG4gICAgfVxuICAgIGlmICh0aGlzLnVuaXRzW251bWVyaWMudW5pdF0pIHtcbiAgICAgIHJldHVybiBudW1lcmljO1xuICAgIH1cbiAgICByZXR1cm4gbnVsbDtcbiAgfVxuXG4gIC8qKlxuICAgKiBAb3ZlcnJpZGVcbiAgICovXG4gIHZpc2l0TnVtKG51bTogQ3NzLk51bSk6IENzcy5WYWwge1xuICAgIGlmIChudW0ubnVtID09IDApIHtcbiAgICAgIHJldHVybiB0aGlzLmFsbG93ZWQgJiBBTExPV19aRVJPID8gbnVtIDogbnVsbDtcbiAgICB9XG4gICAgaWYgKG51bS5udW0gPD0gMCAmJiAhKHRoaXMuYWxsb3dlZCAmIEFMTE9XX05FR0FUSVZFKSkge1xuICAgICAgcmV0dXJuIG51bGw7XG4gICAgfVxuICAgIGlmICh0aGlzLmFsbG93ZWQgJiBBTExPV19QT1NfTlVNKSB7XG4gICAgICByZXR1cm4gbnVtO1xuICAgIH1cbiAgICByZXR1cm4gbnVsbDtcbiAgfVxuXG4gIC8qKlxuICAgKiBAb3ZlcnJpZGVcbiAgICovXG4gIHZpc2l0SW50KG51bTogQ3NzLkludCk6IENzcy5WYWwge1xuICAgIGlmIChudW0ubnVtID09IDApIHtcbiAgICAgIHJldHVybiB0aGlzLmFsbG93ZWQgJiBBTExPV19aRVJPID8gbnVtIDogbnVsbDtcbiAgICB9XG4gICAgaWYgKG51bS5udW0gPD0gMCAmJiAhKHRoaXMuYWxsb3dlZCAmIEFMTE9XX05FR0FUSVZFKSkge1xuICAgICAgcmV0dXJuIG51bGw7XG4gICAgfVxuICAgIGlmICh0aGlzLmFsbG93ZWQgJiAoQUxMT1dfUE9TX0lOVCB8IEFMTE9XX1BPU19OVU0pKSB7XG4gICAgICByZXR1cm4gbnVtO1xuICAgIH1cbiAgICBjb25zdCB2YWwgPSB0aGlzLmlkZW50c1tgJHtudW0ubnVtfWBdO1xuICAgIGlmICh2YWwpIHtcbiAgICAgIHJldHVybiB2YWw7XG4gICAgfVxuICAgIHJldHVybiBudWxsO1xuICB9XG5cbiAgLyoqXG4gICAqIEBvdmVycmlkZVxuICAgKi9cbiAgdmlzaXRDb2xvcihjb2xvcjogQ3NzLkNvbG9yKTogQ3NzLlZhbCB7XG4gICAgaWYgKHRoaXMuYWxsb3dlZCAmIEFMTE9XX0NPTE9SKSB7XG4gICAgICByZXR1cm4gY29sb3I7XG4gICAgfVxuICAgIHJldHVybiBudWxsO1xuICB9XG5cbiAgLyoqXG4gICAqIEBvdmVycmlkZVxuICAgKi9cbiAgdmlzaXRVUkwodXJsOiBDc3MuVVJMKTogQ3NzLlZhbCB7XG4gICAgaWYgKHRoaXMuYWxsb3dlZCAmIEFMTE9XX1VSTCkge1xuICAgICAgcmV0dXJuIHVybDtcbiAgICB9XG4gICAgcmV0dXJuIG51bGw7XG4gIH1cblxuICAvKipcbiAgICogQG92ZXJyaWRlXG4gICAqL1xuICB2aXNpdFNwYWNlTGlzdChsaXN0OiBDc3MuU3BhY2VMaXN0KTogQ3NzLlZhbCB7XG4gICAgcmV0dXJuIG51bGw7XG4gIH1cblxuICAvKipcbiAgICogQG92ZXJyaWRlXG4gICAqL1xuICB2aXNpdENvbW1hTGlzdChsaXN0OiBDc3MuQ29tbWFMaXN0KTogQ3NzLlZhbCB7XG4gICAgcmV0dXJuIG51bGw7XG4gIH1cblxuICAvKipcbiAgICogQG92ZXJyaWRlXG4gICAqL1xuICB2aXNpdEZ1bmMoZnVuYzogQ3NzLkZ1bmMpOiBDc3MuVmFsIHtcbiAgICByZXR1cm4gbnVsbDtcbiAgfVxuXG4gIC8qKlxuICAgKiBAb3ZlcnJpZGVcbiAgICovXG4gIHZpc2l0RXhwcihleHByOiBDc3MuRXhwcik6IENzcy5WYWwge1xuICAgIGlmICh0aGlzLmFsbG93ZWQgJiAweDdmZSkge1xuICAgICAgLy8gQUxMT1dfU1RSfEFMTE9XX0lERU5UfC4uLnxBTExPV19aRVJPX1BFUkNFTlRcbiAgICAgIHJldHVybiBleHByO1xuICAgIH1cbiAgICByZXR1cm4gbnVsbDtcbiAgfVxuXG4gIGNvbWJpbmUob3RoZXI6IFByaW1pdGl2ZVZhbGlkYXRvcik6IFByaW1pdGl2ZVZhbGlkYXRvciB7XG4gICAgY29uc3QgaWRlbnRzOiBWYWx1ZU1hcCA9IHt9O1xuICAgIGNvbnN0IHVuaXRzOiBWYWx1ZU1hcCA9IHt9O1xuICAgIGZvciAoY29uc3QgaWRlbnQgaW4gdGhpcy5pZGVudHMpIHtcbiAgICAgIGlkZW50c1tpZGVudF0gPSB0aGlzLmlkZW50c1tpZGVudF07XG4gICAgfVxuICAgIGZvciAoY29uc3QgaWRlbnQgaW4gb3RoZXIuaWRlbnRzKSB7XG4gICAgICBpZGVudHNbaWRlbnRdID0gb3RoZXIuaWRlbnRzW2lkZW50XTtcbiAgICB9XG4gICAgZm9yIChjb25zdCB1bml0IGluIHRoaXMudW5pdHMpIHtcbiAgICAgIHVuaXRzW3VuaXRdID0gdGhpcy51bml0c1t1bml0XTtcbiAgICB9XG4gICAgZm9yIChjb25zdCB1bml0IGluIG90aGVyLnVuaXRzKSB7XG4gICAgICB1bml0c1t1bml0XSA9IG90aGVyLnVuaXRzW3VuaXRdO1xuICAgIH1cbiAgICByZXR1cm4gbmV3IFByaW1pdGl2ZVZhbGlkYXRvcih0aGlzLmFsbG93ZWQgfCBvdGhlci5hbGxvd2VkLCBpZGVudHMsIHVuaXRzKTtcbiAgfVxufVxuXG5jb25zdCBOT19JREVOVFMgPSB7fTtcblxuZXhwb3J0IGNvbnN0IEFMV0FZU19GQUlMID0gbmV3IFByaW1pdGl2ZVZhbGlkYXRvcigwLCBOT19JREVOVFMsIE5PX0lERU5UUyk7XG5cbi8qKlxuICogQmFzZSBjbGFzcyBmb3IgbGlzdCB2YWxpZGF0aW9uLlxuICovXG5leHBvcnQgY2xhc3MgTGlzdFZhbGlkYXRvciBleHRlbmRzIFByb3BlcnR5VmFsaWRhdG9yIHtcbiAgc3VjY2Vzc1Rlcm1pbmFsOiBOb2RlO1xuICBmYWlsdXJlVGVybWluYWw6IE5vZGU7XG4gIGZpcnN0OiBOb2RlO1xuXG4gIGNvbnN0cnVjdG9yKGdyb3VwOiBWYWxpZGF0aW5nR3JvdXApIHtcbiAgICBzdXBlcigpO1xuICAgIHRoaXMuc3VjY2Vzc1Rlcm1pbmFsID0gbmV3IE5vZGUobnVsbCk7XG4gICAgdGhpcy5mYWlsdXJlVGVybWluYWwgPSBuZXcgTm9kZShudWxsKTtcbiAgICB0aGlzLmZpcnN0ID0gZ3JvdXAuZmluaXNoKHRoaXMuc3VjY2Vzc1Rlcm1pbmFsLCB0aGlzLmZhaWx1cmVUZXJtaW5hbCk7XG4gIH1cblxuICB2YWxpZGF0ZUxpc3QoYXJyOiBDc3MuVmFsW10sIHNsaWNlOiBib29sZWFuLCBzdGFydEluZGV4OiBudW1iZXIpOiBDc3MuVmFsW10ge1xuICAgIGxldCBvdXQ6IENzcy5WYWxbXSA9IHNsaWNlID8gW10gOiBhcnI7XG4gICAgbGV0IGN1cnJlbnQgPSB0aGlzLmZpcnN0O1xuICAgIGxldCBpbmRleCA9IHN0YXJ0SW5kZXg7XG4gICAgbGV0IGFsdGVybmF0aXZlU3RhY2s6IHN0cmluZ1tdW10gPSBudWxsO1xuICAgIGxldCBhbHRlcm5hdGl2ZXM6IHN0cmluZ1tdID0gbnVsbDtcbiAgICB3aGlsZSAoXG4gICAgICBjdXJyZW50ICE9PSB0aGlzLnN1Y2Nlc3NUZXJtaW5hbCAmJlxuICAgICAgY3VycmVudCAhPT0gdGhpcy5mYWlsdXJlVGVybWluYWxcbiAgICApIHtcbiAgICAgIGlmIChpbmRleCA+PSBhcnIubGVuZ3RoKSB7XG4gICAgICAgIGN1cnJlbnQgPSBjdXJyZW50LmZhaWx1cmU7XG4gICAgICAgIGNvbnRpbnVlO1xuICAgICAgfVxuICAgICAgY29uc3QgaW52YWwgPSBhcnJbaW5kZXhdO1xuICAgICAgbGV0IG91dHZhbCA9IGludmFsO1xuICAgICAgaWYgKGN1cnJlbnQuaXNTcGVjaWFsKCkpIHtcbiAgICAgICAgbGV0IHN1Y2Nlc3MgPSB0cnVlO1xuICAgICAgICBpZiAoY3VycmVudC5pc1N0YXJ0R3JvdXAoKSkge1xuICAgICAgICAgIGlmIChhbHRlcm5hdGl2ZVN0YWNrKSB7XG4gICAgICAgICAgICBhbHRlcm5hdGl2ZVN0YWNrLnB1c2goYWx0ZXJuYXRpdmVzKTtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgYWx0ZXJuYXRpdmVTdGFjayA9IFthbHRlcm5hdGl2ZXNdO1xuICAgICAgICAgIH1cbiAgICAgICAgICBhbHRlcm5hdGl2ZXMgPSBbXTtcbiAgICAgICAgfSBlbHNlIGlmIChjdXJyZW50LmlzRW5kR3JvdXAoKSkge1xuICAgICAgICAgIGlmIChhbHRlcm5hdGl2ZVN0YWNrLmxlbmd0aCA+IDApIHtcbiAgICAgICAgICAgIGFsdGVybmF0aXZlcyA9IGFsdGVybmF0aXZlU3RhY2sucG9wKCk7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGFsdGVybmF0aXZlcyA9IG51bGw7XG4gICAgICAgICAgfVxuICAgICAgICB9IGVsc2UgaWYgKGN1cnJlbnQuaXNFbmRBbHRlcm5hdGUoKSkge1xuICAgICAgICAgIGFsdGVybmF0aXZlc1tjdXJyZW50LmdldEFsdGVybmF0ZSgpXSA9IFwidGFrZW5cIjtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBzdWNjZXNzID0gYWx0ZXJuYXRpdmVzW2N1cnJlbnQuZ2V0QWx0ZXJuYXRlKCldID09IG51bGw7XG4gICAgICAgIH1cbiAgICAgICAgY3VycmVudCA9IHN1Y2Nlc3MgPyBjdXJyZW50LnN1Y2Nlc3MgOiBjdXJyZW50LmZhaWx1cmU7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBpZiAoXG4gICAgICAgICAgaW5kZXggPT0gMCAmJlxuICAgICAgICAgICFzbGljZSAmJlxuICAgICAgICAgIGN1cnJlbnQudmFsaWRhdG9yIGluc3RhbmNlb2YgU3BhY2VMaXN0VmFsaWRhdG9yICYmXG4gICAgICAgICAgdGhpcyBpbnN0YW5jZW9mIFNwYWNlTGlzdFZhbGlkYXRvclxuICAgICAgICApIHtcbiAgICAgICAgICAvLyBTcGVjaWFsIG5lc3RpbmcgY2FzZTogdmFsaWRhdGUgdGhlIGlucHV0IHNwYWNlIGxpc3QgYXMgYSB3aG9sZS5cbiAgICAgICAgICBvdXR2YWwgPSBuZXcgQ3NzLlNwYWNlTGlzdChhcnIpLnZpc2l0KGN1cnJlbnQudmFsaWRhdG9yKTtcbiAgICAgICAgICBpZiAob3V0dmFsKSB7XG4gICAgICAgICAgICBpbmRleCA9IGFyci5sZW5ndGg7XG4gICAgICAgICAgICBjdXJyZW50ID0gY3VycmVudC5zdWNjZXNzO1xuICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgICAgfVxuICAgICAgICB9IGVsc2UgaWYgKFxuICAgICAgICAgIGluZGV4ID09IDAgJiZcbiAgICAgICAgICAhc2xpY2UgJiZcbiAgICAgICAgICBjdXJyZW50LnZhbGlkYXRvciBpbnN0YW5jZW9mIENvbW1hTGlzdFZhbGlkYXRvciAmJlxuICAgICAgICAgIHRoaXMgaW5zdGFuY2VvZiBTcGFjZUxpc3RWYWxpZGF0b3JcbiAgICAgICAgKSB7XG4gICAgICAgICAgLy8gU3BlY2lhbCBuZXN0aW5nIGNhc2U6IHZhbGlkYXRlIHRoZSBpbnB1dCBjb21tYSBsaXN0IGFzIGEgd2hvbGUuXG4gICAgICAgICAgb3V0dmFsID0gbmV3IENzcy5Db21tYUxpc3QoYXJyKS52aXNpdChjdXJyZW50LnZhbGlkYXRvcik7XG4gICAgICAgICAgaWYgKG91dHZhbCkge1xuICAgICAgICAgICAgaW5kZXggPSBhcnIubGVuZ3RoO1xuICAgICAgICAgICAgY3VycmVudCA9IGN1cnJlbnQuc3VjY2VzcztcbiAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBvdXR2YWwgPSBpbnZhbC52aXNpdChjdXJyZW50LnZhbGlkYXRvcik7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKCFvdXR2YWwpIHtcbiAgICAgICAgICBjdXJyZW50ID0gY3VycmVudC5mYWlsdXJlO1xuICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICB9XG4gICAgICAgIGlmIChvdXR2YWwgIT09IGludmFsICYmIGFyciA9PT0gb3V0KSB7XG4gICAgICAgICAgLy8gc3RhcnRJbmRleCBpcyB6ZXJvIGhlcmVcbiAgICAgICAgICBvdXQgPSBbXTtcbiAgICAgICAgICBmb3IgKGxldCBrID0gMDsgayA8IGluZGV4OyBrKyspIHtcbiAgICAgICAgICAgIG91dFtrXSA9IGFycltrXTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGFyciAhPT0gb3V0KSB7XG4gICAgICAgICAgb3V0W2luZGV4IC0gc3RhcnRJbmRleF0gPSBvdXR2YWw7XG4gICAgICAgIH1cbiAgICAgICAgaW5kZXgrKztcbiAgICAgICAgY3VycmVudCA9IGN1cnJlbnQuc3VjY2VzcztcbiAgICAgIH1cbiAgICB9XG4gICAgaWYgKGN1cnJlbnQgPT09IHRoaXMuc3VjY2Vzc1Rlcm1pbmFsKSB7XG4gICAgICBpZiAoc2xpY2UgPyBvdXQubGVuZ3RoID4gMCA6IGluZGV4ID09IGFyci5sZW5ndGgpIHtcbiAgICAgICAgcmV0dXJuIG91dDtcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIG51bGw7XG4gIH1cblxuICB2YWxpZGF0ZVNpbmdsZShpbnZhbDogQ3NzLlZhbCk6IENzcy5WYWwge1xuICAgIC8vIG5vIG5lZWQgdG8gd29ycnkgYWJvdXQgXCJzcGVjaWFsc1wiXG4gICAgbGV0IG91dHZhbDogQ3NzLlZhbCA9IG51bGw7XG4gICAgbGV0IGN1cnJlbnQgPSB0aGlzLmZpcnN0O1xuICAgIHdoaWxlIChcbiAgICAgIGN1cnJlbnQgIT09IHRoaXMuc3VjY2Vzc1Rlcm1pbmFsICYmXG4gICAgICBjdXJyZW50ICE9PSB0aGlzLmZhaWx1cmVUZXJtaW5hbFxuICAgICkge1xuICAgICAgaWYgKCFpbnZhbCkge1xuICAgICAgICBjdXJyZW50ID0gY3VycmVudC5mYWlsdXJlO1xuICAgICAgICBjb250aW51ZTtcbiAgICAgIH1cbiAgICAgIGlmIChjdXJyZW50LmlzU3BlY2lhbCgpKSB7XG4gICAgICAgIGN1cnJlbnQgPSBjdXJyZW50LnN1Y2Nlc3M7XG4gICAgICAgIGNvbnRpbnVlO1xuICAgICAgfVxuICAgICAgb3V0dmFsID0gaW52YWwudmlzaXQoY3VycmVudC52YWxpZGF0b3IpO1xuICAgICAgaWYgKCFvdXR2YWwpIHtcbiAgICAgICAgY3VycmVudCA9IGN1cnJlbnQuZmFpbHVyZTtcbiAgICAgICAgY29udGludWU7XG4gICAgICB9XG4gICAgICBpbnZhbCA9IG51bGw7XG4gICAgICBjdXJyZW50ID0gY3VycmVudC5zdWNjZXNzO1xuICAgIH1cbiAgICBpZiAoY3VycmVudCA9PT0gdGhpcy5zdWNjZXNzVGVybWluYWwpIHtcbiAgICAgIHJldHVybiBvdXR2YWw7XG4gICAgfVxuICAgIHJldHVybiBudWxsO1xuICB9XG5cbiAgLyoqXG4gICAqIEBvdmVycmlkZVxuICAgKi9cbiAgdmlzaXRFbXB0eShlbXB0eTogQ3NzLlZhbCk6IENzcy5WYWwge1xuICAgIHJldHVybiB0aGlzLnZhbGlkYXRlU2luZ2xlKGVtcHR5KTtcbiAgfVxuXG4gIC8qKlxuICAgKiBAb3ZlcnJpZGVcbiAgICovXG4gIHZpc2l0U2xhc2goc2xhc2g6IENzcy5WYWwpOiBDc3MuVmFsIHtcbiAgICByZXR1cm4gdGhpcy52YWxpZGF0ZVNpbmdsZShzbGFzaCk7XG4gIH1cblxuICAvKipcbiAgICogQG92ZXJyaWRlXG4gICAqL1xuICB2aXNpdFN0cihzdHI6IENzcy5TdHIpOiBDc3MuVmFsIHtcbiAgICByZXR1cm4gdGhpcy52YWxpZGF0ZVNpbmdsZShzdHIpO1xuICB9XG5cbiAgLyoqXG4gICAqIEBvdmVycmlkZVxuICAgKi9cbiAgdmlzaXRJZGVudChpZGVudDogQ3NzLklkZW50KTogQ3NzLlZhbCB7XG4gICAgcmV0dXJuIHRoaXMudmFsaWRhdGVTaW5nbGUoaWRlbnQpO1xuICB9XG5cbiAgLyoqXG4gICAqIEBvdmVycmlkZVxuICAgKi9cbiAgdmlzaXROdW1lcmljKG51bWVyaWM6IENzcy5OdW1lcmljKTogQ3NzLlZhbCB7XG4gICAgcmV0dXJuIHRoaXMudmFsaWRhdGVTaW5nbGUobnVtZXJpYyk7XG4gIH1cblxuICAvKipcbiAgICogQG92ZXJyaWRlXG4gICAqL1xuICB2aXNpdE51bShudW06IENzcy5OdW0pOiBDc3MuVmFsIHtcbiAgICByZXR1cm4gdGhpcy52YWxpZGF0ZVNpbmdsZShudW0pO1xuICB9XG5cbiAgLyoqXG4gICAqIEBvdmVycmlkZVxuICAgKi9cbiAgdmlzaXRJbnQobnVtOiBDc3MuSW50KTogQ3NzLlZhbCB7XG4gICAgcmV0dXJuIHRoaXMudmFsaWRhdGVTaW5nbGUobnVtKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBAb3ZlcnJpZGVcbiAgICovXG4gIHZpc2l0Q29sb3IoY29sb3I6IENzcy5Db2xvcik6IENzcy5WYWwge1xuICAgIHJldHVybiB0aGlzLnZhbGlkYXRlU2luZ2xlKGNvbG9yKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBAb3ZlcnJpZGVcbiAgICovXG4gIHZpc2l0VVJMKHVybDogQ3NzLlVSTCk6IENzcy5WYWwge1xuICAgIHJldHVybiB0aGlzLnZhbGlkYXRlU2luZ2xlKHVybCk7XG4gIH1cblxuICAvKipcbiAgICogQG92ZXJyaWRlXG4gICAqL1xuICB2aXNpdFNwYWNlTGlzdChsaXN0OiBDc3MuU3BhY2VMaXN0KTogQ3NzLlZhbCB7XG4gICAgcmV0dXJuIG51bGw7XG4gIH1cblxuICAvKipcbiAgICogQG92ZXJyaWRlXG4gICAqL1xuICB2aXNpdENvbW1hTGlzdChsaXN0OiBDc3MuQ29tbWFMaXN0KTogQ3NzLlZhbCB7XG4gICAgcmV0dXJuIG51bGw7XG4gIH1cblxuICAvKipcbiAgICogQG92ZXJyaWRlXG4gICAqL1xuICB2aXNpdEZ1bmMoZnVuYzogQ3NzLkZ1bmMpOiBDc3MuVmFsIHtcbiAgICByZXR1cm4gdGhpcy52YWxpZGF0ZVNpbmdsZShmdW5jKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBAb3ZlcnJpZGVcbiAgICovXG4gIHZpc2l0RXhwcihleHByOiBDc3MuRXhwcik6IENzcy5WYWwge1xuICAgIHJldHVybiBudWxsO1xuICB9XG59XG5cbmV4cG9ydCBjbGFzcyBTcGFjZUxpc3RWYWxpZGF0b3IgZXh0ZW5kcyBMaXN0VmFsaWRhdG9yIHtcbiAgY29uc3RydWN0b3IoZ3JvdXA6IFZhbGlkYXRpbmdHcm91cCkge1xuICAgIHN1cGVyKGdyb3VwKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBAb3ZlcnJpZGVcbiAgICovXG4gIHZpc2l0U3BhY2VMaXN0KGxpc3Q6IENzcy5TcGFjZUxpc3QpOiBDc3MuVmFsIHtcbiAgICBjb25zdCBhcnIgPSB0aGlzLnZhbGlkYXRlTGlzdChsaXN0LnZhbHVlcywgZmFsc2UsIDApO1xuICAgIGlmIChhcnIgPT09IGxpc3QudmFsdWVzKSB7XG4gICAgICByZXR1cm4gbGlzdDtcbiAgICB9XG4gICAgaWYgKCFhcnIpIHtcbiAgICAgIHJldHVybiBudWxsO1xuICAgIH1cbiAgICByZXR1cm4gbmV3IENzcy5TcGFjZUxpc3QoYXJyKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBAb3ZlcnJpZGVcbiAgICovXG4gIHZpc2l0Q29tbWFMaXN0KGxpc3Q6IENzcy5Db21tYUxpc3QpOiBDc3MuVmFsIHtcbiAgICAvLyBTcGVjaWFsIENhc2UgOiBJc3N1ZSAjMTU2XG4gICAgbGV0IG5vZGUgPSB0aGlzLmZpcnN0O1xuICAgIGxldCBoYXNDb21tYUxpc3RWYWxpZGF0b3IgPSBmYWxzZTtcbiAgICB3aGlsZSAobm9kZSkge1xuICAgICAgaWYgKG5vZGUudmFsaWRhdG9yIGluc3RhbmNlb2YgQ29tbWFMaXN0VmFsaWRhdG9yKSB7XG4gICAgICAgIGhhc0NvbW1hTGlzdFZhbGlkYXRvciA9IHRydWU7XG4gICAgICAgIGJyZWFrO1xuICAgICAgfVxuICAgICAgbm9kZSA9IG5vZGUuZmFpbHVyZTtcbiAgICB9XG4gICAgaWYgKGhhc0NvbW1hTGlzdFZhbGlkYXRvcikge1xuICAgICAgY29uc3QgYXJyID0gdGhpcy52YWxpZGF0ZUxpc3QobGlzdC52YWx1ZXMsIGZhbHNlLCAwKTtcbiAgICAgIGlmIChhcnIgPT09IGxpc3QudmFsdWVzKSB7XG4gICAgICAgIHJldHVybiBsaXN0O1xuICAgICAgfVxuICAgICAgaWYgKCFhcnIpIHtcbiAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICB9XG4gICAgICByZXR1cm4gbmV3IENzcy5Db21tYUxpc3QoYXJyKTtcbiAgICB9XG4gICAgcmV0dXJuIG51bGw7XG4gIH1cblxuICAvKipcbiAgICogQG92ZXJyaWRlXG4gICAqL1xuICB2YWxpZGF0ZUZvclNob3J0aGFuZCh2YWx1ZXM6IENzcy5WYWxbXSwgaW5kZXg6IG51bWJlcik6IENzcy5WYWxbXSB7XG4gICAgcmV0dXJuIHRoaXMudmFsaWRhdGVMaXN0KHZhbHVlcywgdHJ1ZSwgaW5kZXgpO1xuICB9XG59XG5cbmV4cG9ydCBjbGFzcyBDb21tYUxpc3RWYWxpZGF0b3IgZXh0ZW5kcyBMaXN0VmFsaWRhdG9yIHtcbiAgY29uc3RydWN0b3IoZ3JvdXA6IFZhbGlkYXRpbmdHcm91cCkge1xuICAgIHN1cGVyKGdyb3VwKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBAb3ZlcnJpZGVcbiAgICovXG4gIHZpc2l0U3BhY2VMaXN0KGxpc3Q6IENzcy5TcGFjZUxpc3QpOiBDc3MuVmFsIHtcbiAgICByZXR1cm4gdGhpcy52YWxpZGF0ZVNpbmdsZShsaXN0KTtcbiAgfVxuXG4gIC8qKlxuICAgKiBAb3ZlcnJpZGVcbiAgICovXG4gIHZpc2l0Q29tbWFMaXN0KGxpc3Q6IENzcy5Db21tYUxpc3QpOiBDc3MuVmFsIHtcbiAgICBjb25zdCBhcnIgPSB0aGlzLnZhbGlkYXRlTGlzdChsaXN0LnZhbHVlcywgZmFsc2UsIDApO1xuICAgIGlmIChhcnIgPT09IGxpc3QudmFsdWVzKSB7XG4gICAgICByZXR1cm4gbGlzdDtcbiAgICB9XG4gICAgaWYgKCFhcnIpIHtcbiAgICAgIHJldHVybiBudWxsO1xuICAgIH1cbiAgICByZXR1cm4gbmV3IENzcy5Db21tYUxpc3QoYXJyKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBAb3ZlcnJpZGVcbiAgICovXG4gIHZhbGlkYXRlRm9yU2hvcnRoYW5kKHZhbHVlczogQ3NzLlZhbFtdLCBpbmRleDogbnVtYmVyKTogQ3NzLlZhbFtdIHtcbiAgICBsZXQgY3VycmVudCA9IHRoaXMuZmlyc3Q7XG4gICAgbGV0IHJ2YWw6IENzcy5WYWxbXTtcbiAgICB3aGlsZSAoY3VycmVudCAhPT0gdGhpcy5mYWlsdXJlVGVybWluYWwpIHtcbiAgICAgIHJ2YWwgPSBjdXJyZW50LnZhbGlkYXRvci52YWxpZGF0ZUZvclNob3J0aGFuZCh2YWx1ZXMsIGluZGV4KTtcbiAgICAgIGlmIChydmFsKSB7XG4gICAgICAgIHJldHVybiBydmFsO1xuICAgICAgfVxuICAgICAgY3VycmVudCA9IGN1cnJlbnQuZmFpbHVyZTtcbiAgICB9XG4gICAgcmV0dXJuIG51bGw7XG4gIH1cbn1cblxuZXhwb3J0IGNsYXNzIEZ1bmNWYWxpZGF0b3IgZXh0ZW5kcyBMaXN0VmFsaWRhdG9yIHtcbiAgY29uc3RydWN0b3IocHVibGljIHJlYWRvbmx5IG5hbWU6IHN0cmluZywgZ3JvdXA6IFZhbGlkYXRpbmdHcm91cCkge1xuICAgIHN1cGVyKGdyb3VwKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBAb3ZlcnJpZGVcbiAgICovXG4gIHZhbGlkYXRlU2luZ2xlKGludmFsOiBDc3MuVmFsKTogQ3NzLlZhbCB7XG4gICAgcmV0dXJuIG51bGw7XG4gIH1cblxuICAvKipcbiAgICogQG92ZXJyaWRlXG4gICAqL1xuICB2aXNpdEZ1bmMoZnVuYzogQ3NzLkZ1bmMpOiBDc3MuVmFsIHtcbiAgICBpZiAoZnVuYy5uYW1lLnRvTG93ZXJDYXNlKCkgIT0gdGhpcy5uYW1lKSB7XG4gICAgICByZXR1cm4gbnVsbDtcbiAgICB9XG4gICAgY29uc3QgYXJyID0gdGhpcy52YWxpZGF0ZUxpc3QoZnVuYy52YWx1ZXMsIGZhbHNlLCAwKTtcbiAgICBpZiAoYXJyID09PSBmdW5jLnZhbHVlcykge1xuICAgICAgcmV0dXJuIGZ1bmM7XG4gICAgfVxuICAgIGlmICghYXJyKSB7XG4gICAgICByZXR1cm4gbnVsbDtcbiAgICB9XG4gICAgcmV0dXJuIG5ldyBDc3MuRnVuYyhmdW5jLm5hbWUsIGFycik7XG4gIH1cbn1cblxuLy8tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSBTaG9ydGhhbmRzXG4vLy0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuZXhwb3J0IGNsYXNzIFNob3J0aGFuZFN5bnRheE5vZGUge1xuICAvKipcbiAgICogQHJldHVybiBuZXcgaW5kZXguXG4gICAqL1xuICB0cnlQYXJzZShcbiAgICB2YWx1ZXM6IENzcy5WYWxbXSxcbiAgICBpbmRleDogbnVtYmVyLFxuICAgIHNob3J0aGFuZFZhbGlkYXRvcjogU2hvcnRoYW5kVmFsaWRhdG9yLFxuICApOiBudW1iZXIge1xuICAgIHJldHVybiBpbmRleDtcbiAgfVxuXG4gIHN1Y2Nlc3MocnZhbDogQ3NzLlZhbCwgc2hvcnRoYW5kVmFsaWRhdG9yOiBTaG9ydGhhbmRWYWxpZGF0b3IpOiB2b2lkIHt9XG59XG5cbmV4cG9ydCBjbGFzcyBTaG9ydGhhbmRTeW50YXhQcm9wZXJ0eSBleHRlbmRzIFNob3J0aGFuZFN5bnRheE5vZGUge1xuICB2YWxpZGF0b3I6IFByb3BlcnR5VmFsaWRhdG9yO1xuXG4gIGNvbnN0cnVjdG9yKHZhbGlkYXRvclNldDogVmFsaWRhdG9yU2V0LCBwdWJsaWMgcmVhZG9ubHkgbmFtZTogc3RyaW5nKSB7XG4gICAgc3VwZXIoKTtcbiAgICB0aGlzLnZhbGlkYXRvciA9IHZhbGlkYXRvclNldC52YWxpZGF0b3JzW3RoaXMubmFtZV07XG4gIH1cblxuICAvKipcbiAgICogQG92ZXJyaWRlXG4gICAqL1xuICB0cnlQYXJzZShcbiAgICB2YWx1ZXM6IENzcy5WYWxbXSxcbiAgICBpbmRleDogbnVtYmVyLFxuICAgIHNob3J0aGFuZFZhbGlkYXRvcjogU2hvcnRoYW5kVmFsaWRhdG9yLFxuICApOiBudW1iZXIge1xuICAgIGlmIChzaG9ydGhhbmRWYWxpZGF0b3IudmFsdWVzW3RoaXMubmFtZV0pIHtcbiAgICAgIHJldHVybiBpbmRleDtcbiAgICB9XG4gICAgY29uc3QgcnZhbHMgPSB0aGlzLnZhbGlkYXRvci52YWxpZGF0ZUZvclNob3J0aGFuZCh2YWx1ZXMsIGluZGV4KTtcbiAgICBpZiAocnZhbHMpIHtcbiAgICAgIGNvbnN0IGxlbiA9IHJ2YWxzLmxlbmd0aDtcbiAgICAgIGNvbnN0IHJ2YWwgPSBsZW4gPiAxID8gbmV3IENzcy5TcGFjZUxpc3QocnZhbHMpIDogcnZhbHNbMF07XG4gICAgICB0aGlzLnN1Y2Nlc3MocnZhbCwgc2hvcnRoYW5kVmFsaWRhdG9yKTtcbiAgICAgIHJldHVybiBpbmRleCArIGxlbjtcbiAgICB9XG4gICAgcmV0dXJuIGluZGV4O1xuICB9XG5cbiAgLyoqXG4gICAqIEBvdmVycmlkZVxuICAgKi9cbiAgc3VjY2VzcyhydmFsOiBDc3MuVmFsLCBzaG9ydGhhbmRWYWxpZGF0b3I6IFNob3J0aGFuZFZhbGlkYXRvcik6IHZvaWQge1xuICAgIHNob3J0aGFuZFZhbGlkYXRvci52YWx1ZXNbdGhpcy5uYW1lXSA9IHJ2YWw7XG4gIH1cbn1cblxuZXhwb3J0IGNsYXNzIFNob3J0aGFuZFN5bnRheFByb3BlcnR5TiBleHRlbmRzIFNob3J0aGFuZFN5bnRheFByb3BlcnR5IHtcbiAgY29uc3RydWN0b3IodmFsaWRhdG9yU2V0OiBWYWxpZGF0b3JTZXQsIHB1YmxpYyByZWFkb25seSBuYW1lczogc3RyaW5nW10pIHtcbiAgICBzdXBlcih2YWxpZGF0b3JTZXQsIG5hbWVzWzBdKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBAb3ZlcnJpZGVcbiAgICovXG4gIHN1Y2Nlc3MocnZhbDogQ3NzLlZhbCwgc2hvcnRoYW5kVmFsaWRhdG9yOiBTaG9ydGhhbmRWYWxpZGF0b3IpOiB2b2lkIHtcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IHRoaXMubmFtZXMubGVuZ3RoOyBpKyspIHtcbiAgICAgIHNob3J0aGFuZFZhbGlkYXRvci52YWx1ZXNbdGhpcy5uYW1lc1tpXV0gPSBydmFsO1xuICAgIH1cbiAgfVxufVxuXG5leHBvcnQgY2xhc3MgU2hvcnRoYW5kU3ludGF4Q29tcG91bmQgZXh0ZW5kcyBTaG9ydGhhbmRTeW50YXhOb2RlIHtcbiAgY29uc3RydWN0b3IoXG4gICAgcHVibGljIHJlYWRvbmx5IG5vZGVzOiBTaG9ydGhhbmRTeW50YXhOb2RlW10sXG4gICAgcHVibGljIHJlYWRvbmx5IHNsYXNoOiBib29sZWFuLFxuICApIHtcbiAgICBzdXBlcigpO1xuICB9XG5cbiAgLyoqXG4gICAqIEBvdmVycmlkZVxuICAgKi9cbiAgdHJ5UGFyc2UoXG4gICAgdmFsdWVzOiBDc3MuVmFsW10sXG4gICAgaW5kZXg6IG51bWJlcixcbiAgICBzaG9ydGhhbmRWYWxpZGF0b3I6IFNob3J0aGFuZFZhbGlkYXRvcixcbiAgKTogbnVtYmVyIHtcbiAgICBjb25zdCBpbmRleDAgPSBpbmRleDtcbiAgICBpZiAodGhpcy5zbGFzaCkge1xuICAgICAgaWYgKHZhbHVlc1tpbmRleF0gPT0gQ3NzLnNsYXNoKSB7XG4gICAgICAgIGlmICgrK2luZGV4ID09IHZhbHVlcy5sZW5ndGgpIHtcbiAgICAgICAgICByZXR1cm4gaW5kZXgwO1xuICAgICAgICB9XG4gICAgICB9IGVsc2Uge1xuICAgICAgICByZXR1cm4gaW5kZXgwO1xuICAgICAgfVxuICAgIH1cbiAgICBsZXQgbmV3SW5kZXggPSB0aGlzLm5vZGVzWzBdLnRyeVBhcnNlKHZhbHVlcywgaW5kZXgsIHNob3J0aGFuZFZhbGlkYXRvcik7XG4gICAgaWYgKG5ld0luZGV4ID09IGluZGV4KSB7XG4gICAgICByZXR1cm4gaW5kZXgwO1xuICAgIH1cbiAgICBpbmRleCA9IG5ld0luZGV4O1xuICAgIGZvciAobGV0IGkgPSAxOyBpIDwgdGhpcy5ub2Rlcy5sZW5ndGggJiYgaW5kZXggPCB2YWx1ZXMubGVuZ3RoOyBpKyspIHtcbiAgICAgIG5ld0luZGV4ID0gdGhpcy5ub2Rlc1tpXS50cnlQYXJzZSh2YWx1ZXMsIGluZGV4LCBzaG9ydGhhbmRWYWxpZGF0b3IpO1xuICAgICAgaWYgKG5ld0luZGV4ID09IGluZGV4KSB7XG4gICAgICAgIGJyZWFrO1xuICAgICAgfVxuICAgICAgaW5kZXggPSBuZXdJbmRleDtcbiAgICB9XG4gICAgcmV0dXJuIGluZGV4O1xuICB9XG59XG5cbmV4cG9ydCBjbGFzcyBTaG9ydGhhbmRWYWxpZGF0b3IgZXh0ZW5kcyBDc3MuVmlzaXRvciB7XG4gIHN5bnRheDogU2hvcnRoYW5kU3ludGF4Tm9kZVtdID0gbnVsbDtcbiAgcHJvcExpc3Q6IHN0cmluZ1tdID0gbnVsbDtcbiAgZXJyb3I6IGJvb2xlYW4gPSBmYWxzZTtcbiAgdmFsdWVzOiBWYWx1ZU1hcCA9IHt9O1xuICB2YWxpZGF0b3JTZXQ6IFZhbGlkYXRvclNldCA9IG51bGw7XG5cbiAgc2V0T3duZXIodmFsaWRhdG9yU2V0OiBWYWxpZGF0b3JTZXQpIHtcbiAgICB0aGlzLnZhbGlkYXRvclNldCA9IHZhbGlkYXRvclNldDtcbiAgfVxuXG4gIHN5bnRheE5vZGVGb3JQcm9wZXJ0eShuYW1lOiBzdHJpbmcpOiBTaG9ydGhhbmRTeW50YXhOb2RlIHtcbiAgICByZXR1cm4gbmV3IFNob3J0aGFuZFN5bnRheFByb3BlcnR5KHRoaXMudmFsaWRhdG9yU2V0LCBuYW1lKTtcbiAgfVxuXG4gIGNsb25lKCk6IHRoaXMge1xuICAgIGNvbnN0IG90aGVyID0gbmV3ICh0aGlzLmNvbnN0cnVjdG9yIGFzIGFueSkoKTtcbiAgICBvdGhlci5zeW50YXggPSB0aGlzLnN5bnRheDtcbiAgICBvdGhlci5wcm9wTGlzdCA9IHRoaXMucHJvcExpc3Q7XG4gICAgb3RoZXIudmFsaWRhdG9yU2V0ID0gdGhpcy52YWxpZGF0b3JTZXQ7XG4gICAgcmV0dXJuIG90aGVyO1xuICB9XG5cbiAgaW5pdChzeW50YXg6IFNob3J0aGFuZFN5bnRheE5vZGVbXSwgcHJvcExpc3Q6IHN0cmluZ1tdKTogdm9pZCB7XG4gICAgdGhpcy5zeW50YXggPSBzeW50YXg7XG4gICAgdGhpcy5wcm9wTGlzdCA9IHByb3BMaXN0O1xuICB9XG5cbiAgZmluaXNoKGltcG9ydGFudDogYm9vbGVhbiwgcmVjZWl2ZXI6IFByb3BlcnR5UmVjZWl2ZXIpOiBib29sZWFuIHtcbiAgICBpZiAoIXRoaXMuZXJyb3IpIHtcbiAgICAgIGZvciAoY29uc3QgbmFtZSBvZiB0aGlzLnByb3BMaXN0KSB7XG4gICAgICAgIHJlY2VpdmVyLnNpbXBsZVByb3BlcnR5KFxuICAgICAgICAgIG5hbWUsXG4gICAgICAgICAgdGhpcy52YWx1ZXNbbmFtZV0gfHwgdGhpcy52YWxpZGF0b3JTZXQuZGVmYXVsdFZhbHVlc1tuYW1lXSxcbiAgICAgICAgICBpbXBvcnRhbnQsXG4gICAgICAgICk7XG4gICAgICB9XG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG5cbiAgcHJvcGFnYXRlSW5oZXJpdChpbXBvcnRhbnQ6IGJvb2xlYW4sIHJlY2VpdmVyOiBQcm9wZXJ0eVJlY2VpdmVyKTogdm9pZCB7XG4gICAgZm9yIChjb25zdCBuYW1lIG9mIHRoaXMucHJvcExpc3QpIHtcbiAgICAgIHJlY2VpdmVyLnNpbXBsZVByb3BlcnR5KG5hbWUsIENzcy5pZGVudC5pbmhlcml0LCBpbXBvcnRhbnQpO1xuICAgIH1cbiAgfVxuXG4gIHZhbGlkYXRlTGlzdChsaXN0OiBDc3MuVmFsW10pOiBudW1iZXIge1xuICAgIHRoaXMuZXJyb3IgPSB0cnVlO1xuICAgIHJldHVybiAwO1xuICB9XG5cbiAgdmFsaWRhdGVTaW5nbGUodmFsOiBDc3MuVmFsKTogQ3NzLlZhbCB7XG4gICAgdGhpcy52YWxpZGF0ZUxpc3QoW3ZhbF0pO1xuICAgIHJldHVybiBudWxsO1xuICB9XG5cbiAgLyoqXG4gICAqIEBvdmVycmlkZVxuICAgKi9cbiAgdmlzaXRFbXB0eShlbXB0eTogQ3NzLlZhbCk6IENzcy5WYWwge1xuICAgIHJldHVybiB0aGlzLnZhbGlkYXRlU2luZ2xlKGVtcHR5KTtcbiAgfVxuXG4gIC8qKlxuICAgKiBAb3ZlcnJpZGVcbiAgICovXG4gIHZpc2l0U3RyKHN0cjogQ3NzLlN0cik6IENzcy5WYWwge1xuICAgIHJldHVybiB0aGlzLnZhbGlkYXRlU2luZ2xlKHN0cik7XG4gIH1cblxuICAvKipcbiAgICogQG92ZXJyaWRlXG4gICAqL1xuICB2aXNpdElkZW50KGlkZW50OiBDc3MuSWRlbnQpOiBDc3MuVmFsIHtcbiAgICByZXR1cm4gdGhpcy52YWxpZGF0ZVNpbmdsZShpZGVudCk7XG4gIH1cblxuICAvKipcbiAgICogQG92ZXJyaWRlXG4gICAqL1xuICB2aXNpdE51bWVyaWMobnVtZXJpYzogQ3NzLk51bWVyaWMpOiBDc3MuVmFsIHtcbiAgICByZXR1cm4gdGhpcy52YWxpZGF0ZVNpbmdsZShudW1lcmljKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBAb3ZlcnJpZGVcbiAgICovXG4gIHZpc2l0TnVtKG51bTogQ3NzLk51bSk6IENzcy5WYWwge1xuICAgIHJldHVybiB0aGlzLnZhbGlkYXRlU2luZ2xlKG51bSk7XG4gIH1cblxuICAvKipcbiAgICogQG92ZXJyaWRlXG4gICAqL1xuICB2aXNpdEludChudW06IENzcy5JbnQpOiBDc3MuVmFsIHtcbiAgICByZXR1cm4gdGhpcy52YWxpZGF0ZVNpbmdsZShudW0pO1xuICB9XG5cbiAgLyoqXG4gICAqIEBvdmVycmlkZVxuICAgKi9cbiAgdmlzaXRDb2xvcihjb2xvcjogQ3NzLkNvbG9yKTogQ3NzLlZhbCB7XG4gICAgcmV0dXJuIHRoaXMudmFsaWRhdGVTaW5nbGUoY29sb3IpO1xuICB9XG5cbiAgLyoqXG4gICAqIEBvdmVycmlkZVxuICAgKi9cbiAgdmlzaXRVUkwodXJsOiBDc3MuVVJMKTogQ3NzLlZhbCB7XG4gICAgcmV0dXJuIHRoaXMudmFsaWRhdGVTaW5nbGUodXJsKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBAb3ZlcnJpZGVcbiAgICovXG4gIHZpc2l0U3BhY2VMaXN0KGxpc3Q6IENzcy5TcGFjZUxpc3QpOiBDc3MuVmFsIHtcbiAgICB0aGlzLnZhbGlkYXRlTGlzdChsaXN0LnZhbHVlcyk7XG4gICAgcmV0dXJuIG51bGw7XG4gIH1cblxuICAvKipcbiAgICogQG92ZXJyaWRlXG4gICAqL1xuICB2aXNpdENvbW1hTGlzdChsaXN0OiBDc3MuQ29tbWFMaXN0KTogQ3NzLlZhbCB7XG4gICAgdGhpcy5lcnJvciA9IHRydWU7XG4gICAgcmV0dXJuIG51bGw7XG4gIH1cblxuICAvKipcbiAgICogQG92ZXJyaWRlXG4gICAqL1xuICB2aXNpdEZ1bmMoZnVuYzogQ3NzLkZ1bmMpOiBDc3MuVmFsIHtcbiAgICByZXR1cm4gdGhpcy52YWxpZGF0ZVNpbmdsZShmdW5jKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBAb3ZlcnJpZGVcbiAgICovXG4gIHZpc2l0RXhwcihleHByOiBDc3MuRXhwcik6IENzcy5WYWwge1xuICAgIHRoaXMuZXJyb3IgPSB0cnVlO1xuICAgIHJldHVybiBudWxsO1xuICB9XG59XG5cbmV4cG9ydCBjbGFzcyBTaW1wbGVTaG9ydGhhbmRWYWxpZGF0b3IgZXh0ZW5kcyBTaG9ydGhhbmRWYWxpZGF0b3Ige1xuICBjb25zdHJ1Y3RvcigpIHtcbiAgICBzdXBlcigpO1xuICB9XG5cbiAgLyoqXG4gICAqIEBvdmVycmlkZVxuICAgKi9cbiAgdmFsaWRhdGVMaXN0KGxpc3Q6IENzcy5WYWxbXSk6IG51bWJlciB7XG4gICAgbGV0IGluZGV4ID0gMDtcbiAgICBsZXQgaSA9IDA7XG4gICAgd2hpbGUgKGluZGV4IDwgbGlzdC5sZW5ndGgpIHtcbiAgICAgIGNvbnN0IG5ld0luZGV4ID0gdGhpcy5zeW50YXhbaV0udHJ5UGFyc2UobGlzdCwgaW5kZXgsIHRoaXMpO1xuICAgICAgaWYgKG5ld0luZGV4ID4gaW5kZXgpIHtcbiAgICAgICAgaW5kZXggPSBuZXdJbmRleDtcbiAgICAgICAgaSA9IDA7XG4gICAgICAgIGNvbnRpbnVlO1xuICAgICAgfVxuICAgICAgaWYgKCsraSA9PSB0aGlzLnN5bnRheC5sZW5ndGgpIHtcbiAgICAgICAgdGhpcy5lcnJvciA9IHRydWU7XG4gICAgICAgIGJyZWFrO1xuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gaW5kZXg7XG4gIH1cbn1cblxuZXhwb3J0IGNsYXNzIEluc2V0c1Nob3J0aGFuZFZhbGlkYXRvciBleHRlbmRzIFNob3J0aGFuZFZhbGlkYXRvciB7XG4gIGNvbnN0cnVjdG9yKCkge1xuICAgIHN1cGVyKCk7XG4gIH1cblxuICAvKipcbiAgICogQG92ZXJyaWRlXG4gICAqL1xuICB2YWxpZGF0ZUxpc3QobGlzdDogQ3NzLlZhbFtdKTogbnVtYmVyIHtcbiAgICBpZiAobGlzdC5sZW5ndGggPiB0aGlzLnN5bnRheC5sZW5ndGggfHwgbGlzdC5sZW5ndGggPT0gMCkge1xuICAgICAgdGhpcy5lcnJvciA9IHRydWU7XG4gICAgICByZXR1cm4gMDtcbiAgICB9XG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCB0aGlzLnN5bnRheC5sZW5ndGg7IGkrKykge1xuICAgICAgbGV0IGluZGV4ID0gaTtcbiAgICAgIHdoaWxlIChpbmRleCA+PSBsaXN0Lmxlbmd0aCkge1xuICAgICAgICBpbmRleCA9IGluZGV4ID09IDEgPyAwIDogaW5kZXggLSAyO1xuICAgICAgfVxuICAgICAgaWYgKHRoaXMuc3ludGF4W2ldLnRyeVBhcnNlKGxpc3QsIGluZGV4LCB0aGlzKSAhPSBpbmRleCArIDEpIHtcbiAgICAgICAgdGhpcy5lcnJvciA9IHRydWU7XG4gICAgICAgIHJldHVybiAwO1xuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gbGlzdC5sZW5ndGg7XG4gIH1cblxuICBjcmVhdGVTeW50YXhOb2RlKCk6IFNob3J0aGFuZFN5bnRheFByb3BlcnR5TiB7XG4gICAgcmV0dXJuIG5ldyBTaG9ydGhhbmRTeW50YXhQcm9wZXJ0eU4odGhpcy52YWxpZGF0b3JTZXQsIHRoaXMucHJvcExpc3QpO1xuICB9XG59XG5cbmV4cG9ydCBjbGFzcyBJbnNldHNTbGFzaFNob3J0aGFuZFZhbGlkYXRvciBleHRlbmRzIFNob3J0aGFuZFZhbGlkYXRvciB7XG4gIGNvbnN0cnVjdG9yKCkge1xuICAgIHN1cGVyKCk7XG4gIH1cblxuICAvKipcbiAgICogQG92ZXJyaWRlXG4gICAqL1xuICB2YWxpZGF0ZUxpc3QobGlzdDogQ3NzLlZhbFtdKTogbnVtYmVyIHtcbiAgICBsZXQgc2xhc2hJbmRleCA9IGxpc3QubGVuZ3RoO1xuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgbGlzdC5sZW5ndGg7IGkrKykge1xuICAgICAgaWYgKGxpc3RbaV0gPT09IENzcy5zbGFzaCkge1xuICAgICAgICBzbGFzaEluZGV4ID0gaTtcbiAgICAgICAgYnJlYWs7XG4gICAgICB9XG4gICAgfVxuICAgIGlmIChzbGFzaEluZGV4ID4gdGhpcy5zeW50YXgubGVuZ3RoIHx8IGxpc3QubGVuZ3RoID09IDApIHtcbiAgICAgIHRoaXMuZXJyb3IgPSB0cnVlO1xuICAgICAgcmV0dXJuIDA7XG4gICAgfVxuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgdGhpcy5zeW50YXgubGVuZ3RoOyBpKyspIHtcbiAgICAgIGxldCBpbmRleDAgPSBpO1xuICAgICAgd2hpbGUgKGluZGV4MCA+PSBzbGFzaEluZGV4KSB7XG4gICAgICAgIGluZGV4MCA9IGluZGV4MCA9PSAxID8gMCA6IGluZGV4MCAtIDI7XG4gICAgICB9XG4gICAgICBsZXQgaW5kZXgxOiBudW1iZXI7XG4gICAgICBpZiAoc2xhc2hJbmRleCArIDEgPCBsaXN0Lmxlbmd0aCkge1xuICAgICAgICBpbmRleDEgPSBzbGFzaEluZGV4ICsgaSArIDE7XG4gICAgICAgIHdoaWxlIChpbmRleDEgPj0gbGlzdC5sZW5ndGgpIHtcbiAgICAgICAgICBpbmRleDEgPSBpbmRleDEgLSAoaW5kZXgxID09IHNsYXNoSW5kZXggKyAyID8gMSA6IDIpO1xuICAgICAgICB9XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBpbmRleDEgPSBpbmRleDA7XG4gICAgICB9XG4gICAgICBjb25zdCB2YWxzID0gW2xpc3RbaW5kZXgwXSwgbGlzdFtpbmRleDFdXTtcbiAgICAgIGlmICh0aGlzLnN5bnRheFtpXS50cnlQYXJzZSh2YWxzLCAwLCB0aGlzKSAhPSAyKSB7XG4gICAgICAgIHRoaXMuZXJyb3IgPSB0cnVlO1xuICAgICAgICByZXR1cm4gMDtcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIGxpc3QubGVuZ3RoO1xuICB9XG59XG5cbmV4cG9ydCBjbGFzcyBDb21tYVNob3J0aGFuZFZhbGlkYXRvciBleHRlbmRzIFNpbXBsZVNob3J0aGFuZFZhbGlkYXRvciB7XG4gIGNvbnN0cnVjdG9yKCkge1xuICAgIHN1cGVyKCk7XG4gIH1cblxuICBtZXJnZUluKGFjYzogeyBba2V5OiBzdHJpbmddOiBDc3MuVmFsW10gfSwgdmFsdWVzOiBWYWx1ZU1hcCkge1xuICAgIGZvciAoY29uc3QgbmFtZSBvZiB0aGlzLnByb3BMaXN0KSB7XG4gICAgICBjb25zdCB2YWwgPSB2YWx1ZXNbbmFtZV0gfHwgdGhpcy52YWxpZGF0b3JTZXQuZGVmYXVsdFZhbHVlc1tuYW1lXTtcbiAgICAgIGxldCBhcnIgPSBhY2NbbmFtZV07XG4gICAgICBpZiAoIWFycikge1xuICAgICAgICBhcnIgPSBbXTtcbiAgICAgICAgYWNjW25hbWVdID0gYXJyO1xuICAgICAgfVxuICAgICAgYXJyLnB1c2godmFsKTtcbiAgICB9XG4gIH1cblxuICAvKipcbiAgICogQG92ZXJyaWRlXG4gICAqL1xuICB2aXNpdENvbW1hTGlzdChsaXN0OiBDc3MuQ29tbWFMaXN0KTogQ3NzLlZhbCB7XG4gICAgY29uc3QgYWNjOiB7IFtrZXk6IHN0cmluZ106IENzcy5WYWxbXSB9ID0ge307XG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCBsaXN0LnZhbHVlcy5sZW5ndGg7IGkrKykge1xuICAgICAgdGhpcy52YWx1ZXMgPSB7fTtcbiAgICAgIGlmIChsaXN0LnZhbHVlc1tpXSBpbnN0YW5jZW9mIENzcy5Db21tYUxpc3QpIHtcbiAgICAgICAgdGhpcy5lcnJvciA9IHRydWU7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBsaXN0LnZhbHVlc1tpXS52aXNpdCh0aGlzKTtcbiAgICAgICAgdGhpcy5tZXJnZUluKGFjYywgdGhpcy52YWx1ZXMpO1xuICAgICAgICBpZiAodGhpcy52YWx1ZXNbXCJiYWNrZ3JvdW5kLWNvbG9yXCJdICYmIGkgIT0gbGlzdC52YWx1ZXMubGVuZ3RoIC0gMSkge1xuICAgICAgICAgIHRoaXMuZXJyb3IgPSB0cnVlO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICBpZiAodGhpcy5lcnJvcikge1xuICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgIH1cbiAgICB9XG4gICAgdGhpcy52YWx1ZXMgPSB7fTtcbiAgICBmb3IgKGNvbnN0IG5hbWUgaW4gYWNjKSB7XG4gICAgICBpZiAobmFtZSA9PSBcImJhY2tncm91bmQtY29sb3JcIikge1xuICAgICAgICB0aGlzLnZhbHVlc1tuYW1lXSA9IGFjY1tuYW1lXS5wb3AoKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHRoaXMudmFsdWVzW25hbWVdID0gbmV3IENzcy5Db21tYUxpc3QoYWNjW25hbWVdKTtcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIG51bGw7XG4gIH1cbn1cblxuZXhwb3J0IGNsYXNzIEZvbnRTaG9ydGhhbmRWYWxpZGF0b3IgZXh0ZW5kcyBTaW1wbGVTaG9ydGhhbmRWYWxpZGF0b3Ige1xuICBjb25zdHJ1Y3RvcigpIHtcbiAgICBzdXBlcigpO1xuICB9XG5cbiAgLyoqXG4gICAqIEBvdmVycmlkZVxuICAgKi9cbiAgaW5pdChzeW50YXg6IFNob3J0aGFuZFN5bnRheE5vZGVbXSwgcHJvcExpc3Q6IHN0cmluZ1tdKTogdm9pZCB7XG4gICAgc3VwZXIuaW5pdChzeW50YXgsIHByb3BMaXN0KTtcbiAgICB0aGlzLnByb3BMaXN0LnB1c2goXCJmb250LWZhbWlseVwiLCBcImxpbmUtaGVpZ2h0XCIsIFwiZm9udC1zaXplXCIpO1xuICB9XG5cbiAgLyoqXG4gICAqIEBvdmVycmlkZVxuICAgKi9cbiAgdmFsaWRhdGVMaXN0KGxpc3Q6IENzcy5WYWxbXSk6IG51bWJlciB7XG4gICAgbGV0IGluZGV4ID0gc3VwZXIudmFsaWRhdGVMaXN0KGxpc3QpO1xuXG4gICAgLy8gbXVzdCBhdCBsZWFzdCBoYXZlIGZvbnQtc2l6ZSBhbmQgZm9udC1mYW1pbHkgYXQgdGhlIGVuZFxuICAgIGlmIChpbmRleCArIDIgPiBsaXN0Lmxlbmd0aCkge1xuICAgICAgdGhpcy5lcnJvciA9IHRydWU7XG4gICAgICByZXR1cm4gaW5kZXg7XG4gICAgfVxuICAgIHRoaXMuZXJyb3IgPSBmYWxzZTtcbiAgICBjb25zdCB2YWxpZGF0b3JzID0gdGhpcy52YWxpZGF0b3JTZXQudmFsaWRhdG9ycztcbiAgICBpZiAoIWxpc3RbaW5kZXhdLnZpc2l0KHZhbGlkYXRvcnNbXCJmb250LXNpemVcIl0pKSB7XG4gICAgICB0aGlzLmVycm9yID0gdHJ1ZTtcbiAgICAgIHJldHVybiBpbmRleDtcbiAgICB9XG4gICAgdGhpcy52YWx1ZXNbXCJmb250LXNpemVcIl0gPSBsaXN0W2luZGV4KytdO1xuICAgIGlmIChsaXN0W2luZGV4XSA9PT0gQ3NzLnNsYXNoKSB7XG4gICAgICBpbmRleCsrO1xuXG4gICAgICAvLyBtdXN0IGF0IGxlYXN0IGhhdmUgbGluZS1oZWlnaHQgYW5kIGZvbnQtZmFtaWx5IGF0IHRoZSBlbmRcbiAgICAgIGlmIChpbmRleCArIDIgPiBsaXN0Lmxlbmd0aCkge1xuICAgICAgICB0aGlzLmVycm9yID0gdHJ1ZTtcbiAgICAgICAgcmV0dXJuIGluZGV4O1xuICAgICAgfVxuICAgICAgaWYgKCFsaXN0W2luZGV4XS52aXNpdCh2YWxpZGF0b3JzW1wibGluZS1oZWlnaHRcIl0pKSB7XG4gICAgICAgIHRoaXMuZXJyb3IgPSB0cnVlO1xuICAgICAgICByZXR1cm4gaW5kZXg7XG4gICAgICB9XG4gICAgICB0aGlzLnZhbHVlc1tcImxpbmUtaGVpZ2h0XCJdID0gbGlzdFtpbmRleCsrXTtcbiAgICB9XG4gICAgY29uc3QgZm9udEZhbWlseSA9XG4gICAgICBpbmRleCA9PSBsaXN0Lmxlbmd0aCAtIDFcbiAgICAgICAgPyBsaXN0W2luZGV4XVxuICAgICAgICA6IG5ldyBDc3MuU3BhY2VMaXN0KGxpc3Quc2xpY2UoaW5kZXgsIGxpc3QubGVuZ3RoKSk7XG4gICAgaWYgKCFmb250RmFtaWx5LnZpc2l0KHZhbGlkYXRvcnNbXCJmb250LWZhbWlseVwiXSkpIHtcbiAgICAgIHRoaXMuZXJyb3IgPSB0cnVlO1xuICAgICAgcmV0dXJuIGluZGV4O1xuICAgIH1cbiAgICB0aGlzLnZhbHVlc1tcImZvbnQtZmFtaWx5XCJdID0gZm9udEZhbWlseTtcbiAgICByZXR1cm4gbGlzdC5sZW5ndGg7XG4gIH1cblxuICAvKipcbiAgICogQG92ZXJyaWRlXG4gICAqL1xuICB2aXNpdENvbW1hTGlzdChsaXN0OiBDc3MuQ29tbWFMaXN0KTogQ3NzLlZhbCB7XG4gICAgbGlzdC52YWx1ZXNbMF0udmlzaXQodGhpcyk7XG4gICAgaWYgKHRoaXMuZXJyb3IpIHtcbiAgICAgIHJldHVybiBudWxsO1xuICAgIH1cbiAgICBjb25zdCBmYW1pbHlMaXN0ID0gW3RoaXMudmFsdWVzW1wiZm9udC1mYW1pbHlcIl1dO1xuICAgIGZvciAobGV0IGkgPSAxOyBpIDwgbGlzdC52YWx1ZXMubGVuZ3RoOyBpKyspIHtcbiAgICAgIGZhbWlseUxpc3QucHVzaChsaXN0LnZhbHVlc1tpXSk7XG4gICAgfVxuICAgIGNvbnN0IGZhbWlseSA9IG5ldyBDc3MuQ29tbWFMaXN0KGZhbWlseUxpc3QpO1xuICAgIGlmICghZmFtaWx5LnZpc2l0KHRoaXMudmFsaWRhdG9yU2V0LnZhbGlkYXRvcnNbXCJmb250LWZhbWlseVwiXSkpIHtcbiAgICAgIHRoaXMuZXJyb3IgPSB0cnVlO1xuICAgIH0gZWxzZSB7XG4gICAgICB0aGlzLnZhbHVlc1tcImZvbnQtZmFtaWx5XCJdID0gZmFtaWx5O1xuICAgIH1cbiAgICByZXR1cm4gbnVsbDtcbiAgfVxuXG4gIC8qKlxuICAgKiBAb3ZlcnJpZGVcbiAgICovXG4gIHZpc2l0SWRlbnQoaWRlbnQ6IENzcy5JZGVudCk6IENzcy5WYWwge1xuICAgIGNvbnN0IHByb3BzID0gdGhpcy52YWxpZGF0b3JTZXQuc3lzdGVtRm9udHNbaWRlbnQubmFtZV07XG4gICAgaWYgKHByb3BzKSB7XG4gICAgICBmb3IgKGNvbnN0IG5hbWUgaW4gcHJvcHMpIHtcbiAgICAgICAgdGhpcy52YWx1ZXNbbmFtZV0gPSBwcm9wc1tuYW1lXTtcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgdGhpcy5lcnJvciA9IHRydWU7XG4gICAgfVxuICAgIHJldHVybiBudWxsO1xuICB9XG59XG5cbmV4cG9ydCBjb25zdCBzaG9ydGhhbmRWYWxpZGF0b3JzOiB7XG4gIFtrZXk6IHN0cmluZ106IHR5cGVvZiBTaG9ydGhhbmRWYWxpZGF0b3I7XG59ID0ge1xuICBTSU1QTEU6IFNpbXBsZVNob3J0aGFuZFZhbGlkYXRvcixcbiAgSU5TRVRTOiBJbnNldHNTaG9ydGhhbmRWYWxpZGF0b3IsXG4gIElOU0VUU19TTEFTSDogSW5zZXRzU2xhc2hTaG9ydGhhbmRWYWxpZGF0b3IsXG4gIENPTU1BOiBDb21tYVNob3J0aGFuZFZhbGlkYXRvcixcbiAgRk9OVDogRm9udFNob3J0aGFuZFZhbGlkYXRvcixcbn07XG5cbi8vLS0tLSB2YWxpZGF0aW9uIGdyYW1tYXIgcGFyc2VyIGFuZCBwdWJsaWMgcHJvcGVydHkgdmFsaWRhdG9yXG4vLy0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuXG4vKipcbiAqIE9iamVjdCB0aGF0IHZhbGlkYXRlcyBzaW1wbGUgYW5kIHNob3J0aGFuZCBwcm9wZXJ0aWVzLCBicmVha2luZyB1cCBzaG9ydGhhbmRcbiAqIHByb3BlcnRpZXMgaW50byBjb3JyZXNwb25kaW5nIHNpbXBsZSBvbmVzLCBhbHNvIHN0cmlwcGluZyBwcm9wZXJ0eSBwcmVmaXhlcy5cbiAqL1xuZXhwb3J0IGNsYXNzIFZhbGlkYXRvclNldCB7XG4gIHZhbGlkYXRvcnM6IHsgW2tleTogc3RyaW5nXTogUHJvcGVydHlWYWxpZGF0b3IgfSA9IHt9O1xuICBwcmVmaXhlczogeyBba2V5OiBzdHJpbmddOiB7IFtrZXk6IHN0cmluZ106IGJvb2xlYW4gfSB9ID0ge307XG4gIGRlZmF1bHRWYWx1ZXM6IFZhbHVlTWFwID0ge307XG4gIG5hbWVkVmFsaWRhdG9yczogeyBba2V5OiBzdHJpbmddOiBWYWxpZGF0aW5nR3JvdXAgfSA9IHt9O1xuICBzeXN0ZW1Gb250czogeyBba2V5OiBzdHJpbmddOiBWYWx1ZU1hcCB9ID0ge307XG4gIHNob3J0aGFuZHM6IHsgW2tleTogc3RyaW5nXTogU2hvcnRoYW5kVmFsaWRhdG9yIH0gPSB7fTtcbiAgbGF5b3V0UHJvcHM6IFZhbHVlTWFwID0ge307XG4gIGJhY2tncm91bmRQcm9wczogVmFsdWVNYXAgPSB7fTtcblxuICBwcml2YXRlIGFkZFJlcGxhY2VtZW50KFxuICAgIHZhbDogVmFsaWRhdGluZ0dyb3VwLFxuICAgIHRva2VuOiBDc3NUb2tlbml6ZXIuVG9rZW4sXG4gICk6IFZhbGlkYXRpbmdHcm91cCB7XG4gICAgbGV0IGNzc3ZhbDogQ3NzLlZhbDtcbiAgICBpZiAodG9rZW4udHlwZSA9PSBDc3NUb2tlbml6ZXIuVG9rZW5UeXBlLk5VTUVSSUMpIHtcbiAgICAgIGNzc3ZhbCA9IG5ldyBDc3MuTnVtZXJpYyh0b2tlbi5udW0sIHRva2VuLnRleHQpO1xuICAgIH0gZWxzZSBpZiAodG9rZW4udHlwZSA9PSBDc3NUb2tlbml6ZXIuVG9rZW5UeXBlLkhBU0gpIHtcbiAgICAgIGNzc3ZhbCA9IENzc1BhcnNlci5jb2xvckZyb21IYXNoKHRva2VuLnRleHQpO1xuICAgIH0gZWxzZSBpZiAodG9rZW4udHlwZSA9PSBDc3NUb2tlbml6ZXIuVG9rZW5UeXBlLklERU5UKSB7XG4gICAgICBjc3N2YWwgPSBDc3MuZ2V0TmFtZSh0b2tlbi50ZXh0KTtcbiAgICB9IGVsc2Uge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKFwidW5leHBlY3RlZCByZXBsYWNlbWVudFwiKTtcbiAgICB9XG4gICAgaWYgKHZhbC5pc1ByaW1pdGl2ZSgpKSB7XG4gICAgICBjb25zdCB2YWxpZGF0b3IgPSB2YWwubm9kZXNbMF0udmFsaWRhdG9yIGFzIFByaW1pdGl2ZVZhbGlkYXRvcjtcbiAgICAgIGNvbnN0IGlkZW50cyA9IHZhbGlkYXRvci5pZGVudHM7XG4gICAgICBmb3IgKGNvbnN0IGlkZW50IGluIGlkZW50cykge1xuICAgICAgICBpZGVudHNbaWRlbnRdID0gY3NzdmFsO1xuICAgICAgfVxuICAgICAgcmV0dXJuIHZhbDtcbiAgICB9XG4gICAgdGhyb3cgbmV3IEVycm9yKFwidW5leHBlY3RlZCByZXBsYWNlbWVudFwiKTtcbiAgfVxuXG4gIHByaXZhdGUgbmV3R3JvdXAob3A6IHN0cmluZywgdmFsczogVmFsaWRhdGluZ0dyb3VwW10pOiBWYWxpZGF0aW5nR3JvdXAge1xuICAgIGNvbnN0IGdyb3VwID0gbmV3IFZhbGlkYXRpbmdHcm91cCgpO1xuICAgIGlmIChvcCA9PSBcInx8XCIpIHtcbiAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgdmFscy5sZW5ndGg7IGkrKykge1xuICAgICAgICBjb25zdCBzdWJncm91cCA9IG5ldyBWYWxpZGF0aW5nR3JvdXAoKTtcbiAgICAgICAgc3ViZ3JvdXAuc3RhcnRDbGF1c2UoaSk7XG4gICAgICAgIHN1Ymdyb3VwLmFkZEdyb3VwKHZhbHNbaV0sIEFkZC5GT0xMT1cpO1xuICAgICAgICBzdWJncm91cC5lbmRDbGF1c2UoaSk7XG4gICAgICAgIGdyb3VwLmFkZEdyb3VwKHN1Ymdyb3VwLCBpID09IDAgPyBBZGQuRk9MTE9XIDogQWRkLkFMVEVSTkFURSk7XG4gICAgICB9XG4gICAgICBjb25zdCBvdXRlciA9IG5ldyBWYWxpZGF0aW5nR3JvdXAoKTtcbiAgICAgIG91dGVyLnN0YXJ0U3BlY2lhbEdyb3VwKCk7XG4gICAgICBvdXRlci5hZGRHcm91cChncm91cCwgQWRkLlJFUEVBVEVEKTtcbiAgICAgIG91dGVyLmVuZFNwZWNpYWxHcm91cCgpO1xuICAgICAgcmV0dXJuIG91dGVyO1xuICAgIH0gZWxzZSB7XG4gICAgICBsZXQgaG93OiBBZGQ7XG4gICAgICBzd2l0Y2ggKG9wKSB7XG4gICAgICAgIGNhc2UgXCIgXCI6XG4gICAgICAgICAgaG93ID0gQWRkLkZPTExPVztcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgY2FzZSBcInxcIjpcbiAgICAgICAgY2FzZSBcInx8XCI6XG4gICAgICAgICAgaG93ID0gQWRkLkFMVEVSTkFURTtcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJ1bmV4cGVjdGVkIG9wXCIpO1xuICAgICAgfVxuICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCB2YWxzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIGdyb3VwLmFkZEdyb3VwKHZhbHNbaV0sIGkgPT0gMCA/IEFkZC5GT0xMT1cgOiBob3cpO1xuICAgICAgfVxuICAgICAgcmV0dXJuIGdyb3VwO1xuICAgIH1cbiAgfVxuXG4gIHByaXZhdGUgYWRkQ291bnRzKFxuICAgIHZhbDogVmFsaWRhdGluZ0dyb3VwLFxuICAgIG1pbjogbnVtYmVyLFxuICAgIG1heDogbnVtYmVyLFxuICApOiBWYWxpZGF0aW5nR3JvdXAge1xuICAgIGNvbnN0IGdyb3VwID0gbmV3IFZhbGlkYXRpbmdHcm91cCgpO1xuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgbWluOyBpKyspIHtcbiAgICAgIGdyb3VwLmFkZEdyb3VwKHZhbC5jbG9uZSgpLCBBZGQuRk9MTE9XKTtcbiAgICB9XG4gICAgaWYgKG1heCA9PSBOdW1iZXIuUE9TSVRJVkVfSU5GSU5JVFkpIHtcbiAgICAgIGdyb3VwLmFkZEdyb3VwKHZhbCwgQWRkLlJFUEVBVEVEKTtcbiAgICB9IGVsc2Uge1xuICAgICAgZm9yIChsZXQgaSA9IG1pbjsgaSA8IG1heDsgaSsrKSB7XG4gICAgICAgIGdyb3VwLmFkZEdyb3VwKHZhbC5jbG9uZSgpLCBBZGQuT1BUSU9OQUwpO1xuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gZ3JvdXA7XG4gIH1cblxuICBwcml2YXRlIHByaW1pdGl2ZSh2YWxpZGF0b3I6IFByb3BlcnR5VmFsaWRhdG9yKTogVmFsaWRhdGluZ0dyb3VwIHtcbiAgICBjb25zdCBncm91cCA9IG5ldyBWYWxpZGF0aW5nR3JvdXAoKTtcbiAgICBncm91cC5hZGRQcmltaXRpdmUodmFsaWRhdG9yKTtcbiAgICByZXR1cm4gZ3JvdXA7XG4gIH1cblxuICBwcml2YXRlIG5ld0Z1bmMoZm46IHN0cmluZywgdmFsOiBWYWxpZGF0aW5nR3JvdXApOiBWYWxpZGF0aW5nR3JvdXAge1xuICAgIGxldCB2YWxpZGF0b3I6IFByb3BlcnR5VmFsaWRhdG9yO1xuICAgIHN3aXRjaCAoZm4pIHtcbiAgICAgIGNhc2UgXCJDT01NQVwiOlxuICAgICAgICB2YWxpZGF0b3IgPSBuZXcgQ29tbWFMaXN0VmFsaWRhdG9yKHZhbCk7XG4gICAgICAgIGJyZWFrO1xuICAgICAgY2FzZSBcIlNQQUNFXCI6XG4gICAgICAgIHZhbGlkYXRvciA9IG5ldyBTcGFjZUxpc3RWYWxpZGF0b3IodmFsKTtcbiAgICAgICAgYnJlYWs7XG4gICAgICBkZWZhdWx0OlxuICAgICAgICB2YWxpZGF0b3IgPSBuZXcgRnVuY1ZhbGlkYXRvcihmbi50b0xvd2VyQ2FzZSgpLCB2YWwpO1xuICAgICAgICBicmVhaztcbiAgICB9XG4gICAgcmV0dXJuIHRoaXMucHJpbWl0aXZlKHZhbGlkYXRvcik7XG4gIH1cblxuICBpbml0QnVpbHRJblZhbGlkYXRvcnMoKTogdm9pZCB7XG4gICAgdGhpcy5uYW1lZFZhbGlkYXRvcnNbXCJIQVNIQ09MT1JcIl0gPSB0aGlzLnByaW1pdGl2ZShcbiAgICAgIG5ldyBQcmltaXRpdmVWYWxpZGF0b3IoQUxMT1dfQ09MT1IsIE5PX0lERU5UUywgTk9fSURFTlRTKSxcbiAgICApO1xuICAgIHRoaXMubmFtZWRWYWxpZGF0b3JzW1wiUE9TX0lOVFwiXSA9IHRoaXMucHJpbWl0aXZlKFxuICAgICAgbmV3IFByaW1pdGl2ZVZhbGlkYXRvcihBTExPV19QT1NfSU5ULCBOT19JREVOVFMsIE5PX0lERU5UUyksXG4gICAgKTtcbiAgICB0aGlzLm5hbWVkVmFsaWRhdG9yc1tcIlBPU19OVU1cIl0gPSB0aGlzLnByaW1pdGl2ZShcbiAgICAgIG5ldyBQcmltaXRpdmVWYWxpZGF0b3IoQUxMT1dfUE9TX05VTSwgTk9fSURFTlRTLCBOT19JREVOVFMpLFxuICAgICk7XG4gICAgdGhpcy5uYW1lZFZhbGlkYXRvcnNbXCJQT1NfUEVSQ0VOVEFHRVwiXSA9IHRoaXMucHJpbWl0aXZlKFxuICAgICAgbmV3IFByaW1pdGl2ZVZhbGlkYXRvcihBTExPV19QT1NfTlVNRVJJQywgTk9fSURFTlRTLCB7IFwiJVwiOiBDc3MuZW1wdHkgfSksXG4gICAgKTtcbiAgICB0aGlzLm5hbWVkVmFsaWRhdG9yc1tcIk5FR0FUSVZFXCJdID0gdGhpcy5wcmltaXRpdmUoXG4gICAgICBuZXcgUHJpbWl0aXZlVmFsaWRhdG9yKEFMTE9XX05FR0FUSVZFLCBOT19JREVOVFMsIE5PX0lERU5UUyksXG4gICAgKTtcbiAgICB0aGlzLm5hbWVkVmFsaWRhdG9yc1tcIlpFUk9cIl0gPSB0aGlzLnByaW1pdGl2ZShcbiAgICAgIG5ldyBQcmltaXRpdmVWYWxpZGF0b3IoQUxMT1dfWkVSTywgTk9fSURFTlRTLCBOT19JREVOVFMpLFxuICAgICk7XG4gICAgdGhpcy5uYW1lZFZhbGlkYXRvcnNbXCJaRVJPX1BFUkNFTlRBR0VcIl0gPSB0aGlzLnByaW1pdGl2ZShcbiAgICAgIG5ldyBQcmltaXRpdmVWYWxpZGF0b3IoQUxMT1dfWkVST19QRVJDRU5ULCBOT19JREVOVFMsIE5PX0lERU5UUyksXG4gICAgKTtcbiAgICB0aGlzLm5hbWVkVmFsaWRhdG9yc1tcIlBPU19MRU5HVEhcIl0gPSB0aGlzLnByaW1pdGl2ZShcbiAgICAgIG5ldyBQcmltaXRpdmVWYWxpZGF0b3IoQUxMT1dfUE9TX05VTUVSSUMsIE5PX0lERU5UUywge1xuICAgICAgICBlbTogQ3NzLmVtcHR5LFxuICAgICAgICBleDogQ3NzLmVtcHR5LFxuICAgICAgICBjaDogQ3NzLmVtcHR5LFxuICAgICAgICByZW06IENzcy5lbXB0eSxcbiAgICAgICAgdnc6IENzcy5lbXB0eSxcbiAgICAgICAgdmg6IENzcy5lbXB0eSxcbiAgICAgICAgdmk6IENzcy5lbXB0eSxcbiAgICAgICAgdmI6IENzcy5lbXB0eSxcbiAgICAgICAgdm1pbjogQ3NzLmVtcHR5LFxuICAgICAgICB2bWF4OiBDc3MuZW1wdHksXG4gICAgICAgIHB2dzogQ3NzLmVtcHR5LFxuICAgICAgICBwdmg6IENzcy5lbXB0eSxcbiAgICAgICAgcHZpOiBDc3MuZW1wdHksXG4gICAgICAgIHB2YjogQ3NzLmVtcHR5LFxuICAgICAgICBwdm1pbjogQ3NzLmVtcHR5LFxuICAgICAgICBwdm1heDogQ3NzLmVtcHR5LFxuICAgICAgICBjbTogQ3NzLmVtcHR5LFxuICAgICAgICBtbTogQ3NzLmVtcHR5LFxuICAgICAgICBpbjogQ3NzLmVtcHR5LFxuICAgICAgICBweDogQ3NzLmVtcHR5LFxuICAgICAgICBwdDogQ3NzLmVtcHR5LFxuICAgICAgICBwYzogQ3NzLmVtcHR5LFxuICAgICAgICBxOiBDc3MuZW1wdHksXG4gICAgICB9KSxcbiAgICApO1xuICAgIHRoaXMubmFtZWRWYWxpZGF0b3JzW1wiUE9TX0FOR0xFXCJdID0gdGhpcy5wcmltaXRpdmUoXG4gICAgICBuZXcgUHJpbWl0aXZlVmFsaWRhdG9yKEFMTE9XX1BPU19OVU1FUklDLCBOT19JREVOVFMsIHtcbiAgICAgICAgZGVnOiBDc3MuZW1wdHksXG4gICAgICAgIGdyYWQ6IENzcy5lbXB0eSxcbiAgICAgICAgcmFkOiBDc3MuZW1wdHksXG4gICAgICAgIHR1cm46IENzcy5lbXB0eSxcbiAgICAgIH0pLFxuICAgICk7XG4gICAgdGhpcy5uYW1lZFZhbGlkYXRvcnNbXCJQT1NfVElNRVwiXSA9IHRoaXMucHJpbWl0aXZlKFxuICAgICAgbmV3IFByaW1pdGl2ZVZhbGlkYXRvcihBTExPV19QT1NfTlVNRVJJQywgTk9fSURFTlRTLCB7XG4gICAgICAgIHM6IENzcy5lbXB0eSxcbiAgICAgICAgbXM6IENzcy5lbXB0eSxcbiAgICAgIH0pLFxuICAgICk7XG4gICAgdGhpcy5uYW1lZFZhbGlkYXRvcnNbXCJGUkVRVUVOQ1lcIl0gPSB0aGlzLnByaW1pdGl2ZShcbiAgICAgIG5ldyBQcmltaXRpdmVWYWxpZGF0b3IoQUxMT1dfUE9TX05VTUVSSUMsIE5PX0lERU5UUywge1xuICAgICAgICBIejogQ3NzLmVtcHR5LFxuICAgICAgICBrSHo6IENzcy5lbXB0eSxcbiAgICAgIH0pLFxuICAgICk7XG4gICAgdGhpcy5uYW1lZFZhbGlkYXRvcnNbXCJSRVNPTFVUSU9OXCJdID0gdGhpcy5wcmltaXRpdmUoXG4gICAgICBuZXcgUHJpbWl0aXZlVmFsaWRhdG9yKEFMTE9XX1BPU19OVU1FUklDLCBOT19JREVOVFMsIHtcbiAgICAgICAgZHBpOiBDc3MuZW1wdHksXG4gICAgICAgIGRwY206IENzcy5lbXB0eSxcbiAgICAgICAgZHBweDogQ3NzLmVtcHR5LFxuICAgICAgfSksXG4gICAgKTtcbiAgICB0aGlzLm5hbWVkVmFsaWRhdG9yc1tcIlVSSVwiXSA9IHRoaXMucHJpbWl0aXZlKFxuICAgICAgbmV3IFByaW1pdGl2ZVZhbGlkYXRvcihBTExPV19VUkwsIE5PX0lERU5UUywgTk9fSURFTlRTKSxcbiAgICApO1xuICAgIHRoaXMubmFtZWRWYWxpZGF0b3JzW1wiSURFTlRcIl0gPSB0aGlzLnByaW1pdGl2ZShcbiAgICAgIG5ldyBQcmltaXRpdmVWYWxpZGF0b3IoQUxMT1dfSURFTlQsIE5PX0lERU5UUywgTk9fSURFTlRTKSxcbiAgICApO1xuICAgIHRoaXMubmFtZWRWYWxpZGF0b3JzW1wiU1RSSU5HXCJdID0gdGhpcy5wcmltaXRpdmUoXG4gICAgICBuZXcgUHJpbWl0aXZlVmFsaWRhdG9yKEFMTE9XX1NUUiwgTk9fSURFTlRTLCBOT19JREVOVFMpLFxuICAgICk7XG4gICAgdGhpcy5uYW1lZFZhbGlkYXRvcnNbXCJTTEFTSFwiXSA9IHRoaXMucHJpbWl0aXZlKFxuICAgICAgbmV3IFByaW1pdGl2ZVZhbGlkYXRvcihBTExPV19TTEFTSCwgTk9fSURFTlRTLCBOT19JREVOVFMpLFxuICAgICk7XG4gICAgY29uc3Qgc3RkZm9udCA9IHsgXCJmb250LWZhbWlseVwiOiBDc3MuZ2V0TmFtZShcInNhbnMtc2VyaWZcIikgfTtcbiAgICB0aGlzLnN5c3RlbUZvbnRzW1wiY2FwdGlvblwiXSA9IHN0ZGZvbnQ7XG4gICAgdGhpcy5zeXN0ZW1Gb250c1tcImljb25cIl0gPSBzdGRmb250O1xuICAgIHRoaXMuc3lzdGVtRm9udHNbXCJtZW51XCJdID0gc3RkZm9udDtcbiAgICB0aGlzLnN5c3RlbUZvbnRzW1wibWVzc2FnZS1ib3hcIl0gPSBzdGRmb250O1xuICAgIHRoaXMuc3lzdGVtRm9udHNbXCJzbWFsbC1jYXB0aW9uXCJdID0gc3RkZm9udDtcbiAgICB0aGlzLnN5c3RlbUZvbnRzW1wic3RhdHVzLWJhclwiXSA9IHN0ZGZvbnQ7XG4gIH1cblxuICBwcml2YXRlIGlzQnVpbHRJbihuYW1lOiBzdHJpbmcpOiBib29sZWFuIHtcbiAgICByZXR1cm4gISFuYW1lLm1hdGNoKC9eW0EtWl8wLTldKyQvKTtcbiAgfVxuXG4gIHByaXZhdGUgcmVhZE5hbWVBbmRQcmVmaXhlcyhcbiAgICB0b2s6IENzc1Rva2VuaXplci5Ub2tlbml6ZXIsXG4gICAgc2VjdGlvbjogbnVtYmVyLFxuICApOiBzdHJpbmcgfCBudWxsIHtcbiAgICBsZXQgdG9rZW4gPSB0b2sudG9rZW4oKTtcbiAgICBpZiAodG9rZW4udHlwZSA9PSBDc3NUb2tlbml6ZXIuVG9rZW5UeXBlLkVPRikge1xuICAgICAgLy8gRmluaXNoZWQgbm9ybWFsbHlcbiAgICAgIHJldHVybiBudWxsO1xuICAgIH1cbiAgICBjb25zdCBydWxlUHJlZml4ZXM6IHsgW2tleTogc3RyaW5nXTogYm9vbGVhbiB9ID0geyBcIlwiOiB0cnVlIH07XG4gICAgaWYgKHRva2VuLnR5cGUgPT0gQ3NzVG9rZW5pemVyLlRva2VuVHlwZS5PX0JSSykge1xuICAgICAgZG8ge1xuICAgICAgICB0b2suY29uc3VtZSgpO1xuICAgICAgICB0b2tlbiA9IHRvay50b2tlbigpO1xuICAgICAgICBpZiAodG9rZW4udHlwZSAhPSBDc3NUb2tlbml6ZXIuVG9rZW5UeXBlLklERU5UKSB7XG4gICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiUHJlZml4IG5hbWUgZXhwZWN0ZWRcIik7XG4gICAgICAgIH1cbiAgICAgICAgcnVsZVByZWZpeGVzW3Rva2VuLnRleHRdID0gdHJ1ZTtcbiAgICAgICAgdG9rLmNvbnN1bWUoKTtcbiAgICAgICAgdG9rZW4gPSB0b2sudG9rZW4oKTtcbiAgICAgIH0gd2hpbGUgKHRva2VuLnR5cGUgPT0gQ3NzVG9rZW5pemVyLlRva2VuVHlwZS5DT01NQSk7XG4gICAgICBpZiAodG9rZW4udHlwZSAhPSBDc3NUb2tlbml6ZXIuVG9rZW5UeXBlLkNfQlJLKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcihcIiddJyBleHBlY3RlZFwiKTtcbiAgICAgIH1cbiAgICAgIHRvay5jb25zdW1lKCk7XG4gICAgICB0b2tlbiA9IHRvay50b2tlbigpO1xuICAgIH1cbiAgICBpZiAodG9rZW4udHlwZSAhPSBDc3NUb2tlbml6ZXIuVG9rZW5UeXBlLklERU5UKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoXCJQcm9wZXJ0eSBuYW1lIGV4cGVjdGVkXCIpO1xuICAgIH1cbiAgICBpZiAoc2VjdGlvbiA9PSAyID8gdG9rZW4udGV4dCA9PSBcIlNIT1JUSEFORFNcIiA6IHRva2VuLnRleHQgPT0gXCJERUZBVUxUU1wiKSB7XG4gICAgICB0b2suY29uc3VtZSgpO1xuICAgICAgcmV0dXJuIG51bGw7XG4gICAgfVxuICAgIGNvbnN0IG5hbWUgPSB0b2tlbi50ZXh0O1xuICAgIHRvay5jb25zdW1lKCk7XG4gICAgaWYgKHNlY3Rpb24gIT0gMikge1xuICAgICAgaWYgKHRvay50b2tlbigpLnR5cGUgIT0gQ3NzVG9rZW5pemVyLlRva2VuVHlwZS5FUSkge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCInPScgZXhwZWN0ZWRcIik7XG4gICAgICB9XG4gICAgICBpZiAoIXRoaXMuaXNCdWlsdEluKG5hbWUpKSB7XG4gICAgICAgIHRoaXMucHJlZml4ZXNbbmFtZV0gPSBydWxlUHJlZml4ZXM7XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIGlmICh0b2sudG9rZW4oKS50eXBlICE9IENzc1Rva2VuaXplci5Ub2tlblR5cGUuQ09MT04pIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiJzonIGV4cGVjdGVkXCIpO1xuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gbmFtZTtcbiAgfVxuXG4gIHByaXZhdGUgcGFyc2VWYWxpZGF0b3JzKHRvazogQ3NzVG9rZW5pemVyLlRva2VuaXplcik6IHZvaWQge1xuICAgIHdoaWxlICh0cnVlKSB7XG4gICAgICBjb25zdCBydWxlTmFtZSA9IHRoaXMucmVhZE5hbWVBbmRQcmVmaXhlcyh0b2ssIDEpO1xuICAgICAgaWYgKCFydWxlTmFtZSkge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG4gICAgICBsZXQgdmFsczogVmFsaWRhdGluZ0dyb3VwW10gPSBbXTtcbiAgICAgIGNvbnN0IHN0YWNrID0gW107XG4gICAgICBsZXQgb3AgPSBcIlwiO1xuICAgICAgbGV0IHZhbDogVmFsaWRhdGluZ0dyb3VwO1xuICAgICAgbGV0IGV4cGVjdHZhbCA9IHRydWU7XG4gICAgICBjb25zdCByZWR1Y2UgPSAoKTogVmFsaWRhdGluZ0dyb3VwID0+IHtcbiAgICAgICAgaWYgKHZhbHMubGVuZ3RoID09IDApIHtcbiAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJObyB2YWx1ZXNcIik7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHZhbHMubGVuZ3RoID09IDEpIHtcbiAgICAgICAgICByZXR1cm4gdmFsc1swXTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdGhpcy5uZXdHcm91cChvcCwgdmFscyk7XG4gICAgICB9O1xuICAgICAgY29uc3Qgc2V0b3AgPSAoY3Vycm9wOiBzdHJpbmcpOiB2b2lkID0+IHtcbiAgICAgICAgaWYgKGV4cGVjdHZhbCkge1xuICAgICAgICAgIHRocm93IG5ldyBFcnJvcihgJyR7Y3Vycm9wfSc6IHVuZXhwZWN0ZWRgKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAob3AgJiYgb3AgIT0gY3Vycm9wKSB7XG4gICAgICAgICAgdGhyb3cgbmV3IEVycm9yKGBtaXhlZCBvcGVyYXRvcnM6ICcke2N1cnJvcH0nIGFuZCAnJHtvcH0nYCk7XG4gICAgICAgIH1cbiAgICAgICAgb3AgPSBjdXJyb3A7XG4gICAgICAgIGV4cGVjdHZhbCA9IHRydWU7XG4gICAgICB9O1xuICAgICAgbGV0IHJlc3VsdDogVmFsaWRhdGluZ0dyb3VwID0gbnVsbDtcbiAgICAgIHdoaWxlICghcmVzdWx0KSB7XG4gICAgICAgIHRvay5jb25zdW1lKCk7XG4gICAgICAgIGxldCB0b2tlbiA9IHRvay50b2tlbigpO1xuICAgICAgICBzd2l0Y2ggKHRva2VuLnR5cGUpIHtcbiAgICAgICAgICBjYXNlIENzc1Rva2VuaXplci5Ub2tlblR5cGUuSURFTlQ6XG4gICAgICAgICAgICBpZiAoIWV4cGVjdHZhbCkge1xuICAgICAgICAgICAgICBzZXRvcChcIiBcIik7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAodGhpcy5pc0J1aWx0SW4odG9rZW4udGV4dCkpIHtcbiAgICAgICAgICAgICAgY29uc3QgYnVpbHRJbiA9IHRoaXMubmFtZWRWYWxpZGF0b3JzW3Rva2VuLnRleHRdO1xuICAgICAgICAgICAgICBpZiAoIWJ1aWx0SW4pIHtcbiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoYCcke3Rva2VuLnRleHR9JyB1bmV4cGVjdGVkYCk7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgdmFscy5wdXNoKGJ1aWx0SW4uY2xvbmUoKSk7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICBjb25zdCBpZGVudHMgPSB7fTtcbiAgICAgICAgICAgICAgaWRlbnRzW3Rva2VuLnRleHQudG9Mb3dlckNhc2UoKV0gPSBDc3MuZ2V0TmFtZSh0b2tlbi50ZXh0KTtcbiAgICAgICAgICAgICAgdmFscy5wdXNoKFxuICAgICAgICAgICAgICAgIHRoaXMucHJpbWl0aXZlKG5ldyBQcmltaXRpdmVWYWxpZGF0b3IoMCwgaWRlbnRzLCBOT19JREVOVFMpKSxcbiAgICAgICAgICAgICAgKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGV4cGVjdHZhbCA9IGZhbHNlO1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgY2FzZSBDc3NUb2tlbml6ZXIuVG9rZW5UeXBlLklOVDoge1xuICAgICAgICAgICAgY29uc3QgaWRlbnRzID0ge307XG4gICAgICAgICAgICBpZGVudHNbYCR7dG9rZW4ubnVtfWBdID0gbmV3IENzcy5JbnQodG9rZW4ubnVtKTtcbiAgICAgICAgICAgIHZhbHMucHVzaChcbiAgICAgICAgICAgICAgdGhpcy5wcmltaXRpdmUobmV3IFByaW1pdGl2ZVZhbGlkYXRvcigwLCBpZGVudHMsIE5PX0lERU5UUykpLFxuICAgICAgICAgICAgKTtcbiAgICAgICAgICAgIGV4cGVjdHZhbCA9IGZhbHNlO1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgfVxuICAgICAgICAgIGNhc2UgQ3NzVG9rZW5pemVyLlRva2VuVHlwZS5CQVI6XG4gICAgICAgICAgICBzZXRvcChcInxcIik7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgICBjYXNlIENzc1Rva2VuaXplci5Ub2tlblR5cGUuQkFSX0JBUjpcbiAgICAgICAgICAgIHNldG9wKFwifHxcIik7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgICBjYXNlIENzc1Rva2VuaXplci5Ub2tlblR5cGUuT19CUks6XG4gICAgICAgICAgICBpZiAoIWV4cGVjdHZhbCkge1xuICAgICAgICAgICAgICBzZXRvcChcIiBcIik7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBzdGFjay5wdXNoKHsgdmFscywgb3AsIGI6IFwiW1wiIH0pO1xuICAgICAgICAgICAgb3AgPSBcIlwiO1xuICAgICAgICAgICAgdmFscyA9IFtdO1xuICAgICAgICAgICAgZXhwZWN0dmFsID0gdHJ1ZTtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgIGNhc2UgQ3NzVG9rZW5pemVyLlRva2VuVHlwZS5GVU5DOlxuICAgICAgICAgICAgaWYgKCFleHBlY3R2YWwpIHtcbiAgICAgICAgICAgICAgc2V0b3AoXCIgXCIpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgc3RhY2sucHVzaCh7IHZhbHMsIG9wLCBiOiBcIihcIiwgZm46IHRva2VuLnRleHQgfSk7XG4gICAgICAgICAgICBvcCA9IFwiXCI7XG4gICAgICAgICAgICB2YWxzID0gW107XG4gICAgICAgICAgICBleHBlY3R2YWwgPSB0cnVlO1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgY2FzZSBDc3NUb2tlbml6ZXIuVG9rZW5UeXBlLkNfQlJLOiB7XG4gICAgICAgICAgICB2YWwgPSByZWR1Y2UoKTtcbiAgICAgICAgICAgIGNvbnN0IG9wZW4gPSBzdGFjay5wb3AoKTtcbiAgICAgICAgICAgIGlmIChvcGVuLmIgIT0gXCJbXCIpIHtcbiAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiJ10nIHVuZXhwZWN0ZWRcIik7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB2YWxzID0gb3Blbi52YWxzO1xuICAgICAgICAgICAgdmFscy5wdXNoKHZhbCk7XG4gICAgICAgICAgICBvcCA9IG9wZW4ub3A7XG4gICAgICAgICAgICBleHBlY3R2YWwgPSBmYWxzZTtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgIH1cbiAgICAgICAgICBjYXNlIENzc1Rva2VuaXplci5Ub2tlblR5cGUuQ19QQVI6IHtcbiAgICAgICAgICAgIHZhbCA9IHJlZHVjZSgpO1xuICAgICAgICAgICAgY29uc3Qgb3BlbiA9IHN0YWNrLnBvcCgpO1xuICAgICAgICAgICAgaWYgKG9wZW4uYiAhPSBcIihcIikge1xuICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCInKScgdW5leHBlY3RlZFwiKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHZhbHMgPSBvcGVuLnZhbHM7XG4gICAgICAgICAgICB2YWxzLnB1c2godGhpcy5uZXdGdW5jKG9wZW4uZm4sIHZhbCkpO1xuICAgICAgICAgICAgb3AgPSBvcGVuLm9wO1xuICAgICAgICAgICAgZXhwZWN0dmFsID0gZmFsc2U7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgICB9XG4gICAgICAgICAgY2FzZSBDc3NUb2tlbml6ZXIuVG9rZW5UeXBlLkNPTE9OOlxuICAgICAgICAgICAgaWYgKGV4cGVjdHZhbCkge1xuICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCInOicgdW5leHBlY3RlZFwiKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHRvay5jb25zdW1lKCk7XG4gICAgICAgICAgICB2YWxzLnB1c2godGhpcy5hZGRSZXBsYWNlbWVudCh2YWxzLnBvcCgpLCB0b2sudG9rZW4oKSkpO1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgY2FzZSBDc3NUb2tlbml6ZXIuVG9rZW5UeXBlLlFNQVJLOlxuICAgICAgICAgICAgaWYgKGV4cGVjdHZhbCkge1xuICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCInPycgdW5leHBlY3RlZFwiKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHZhbHMucHVzaCh0aGlzLmFkZENvdW50cyh2YWxzLnBvcCgpLCAwLCAxKSk7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgICBjYXNlIENzc1Rva2VuaXplci5Ub2tlblR5cGUuU1RBUjpcbiAgICAgICAgICAgIGlmIChleHBlY3R2YWwpIHtcbiAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiJyonIHVuZXhwZWN0ZWRcIik7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB2YWxzLnB1c2godGhpcy5hZGRDb3VudHModmFscy5wb3AoKSwgMCwgTnVtYmVyLlBPU0lUSVZFX0lORklOSVRZKSk7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgICBjYXNlIENzc1Rva2VuaXplci5Ub2tlblR5cGUuUExVUzpcbiAgICAgICAgICAgIGlmIChleHBlY3R2YWwpIHtcbiAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiJysnIHVuZXhwZWN0ZWRcIik7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB2YWxzLnB1c2godGhpcy5hZGRDb3VudHModmFscy5wb3AoKSwgMSwgTnVtYmVyLlBPU0lUSVZFX0lORklOSVRZKSk7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgICBjYXNlIENzc1Rva2VuaXplci5Ub2tlblR5cGUuT19CUkM6IHtcbiAgICAgICAgICAgIHRvay5jb25zdW1lKCk7XG4gICAgICAgICAgICB0b2tlbiA9IHRvay50b2tlbigpO1xuICAgICAgICAgICAgaWYgKHRva2VuLnR5cGUgIT0gQ3NzVG9rZW5pemVyLlRva2VuVHlwZS5JTlQpIHtcbiAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiPGludD4gZXhwZWN0ZWRcIik7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjb25zdCBtaW4gPSB0b2tlbi5udW07XG4gICAgICAgICAgICBsZXQgbWF4ID0gbWluO1xuICAgICAgICAgICAgdG9rLmNvbnN1bWUoKTtcbiAgICAgICAgICAgIHRva2VuID0gdG9rLnRva2VuKCk7XG4gICAgICAgICAgICBpZiAodG9rZW4udHlwZSA9PSBDc3NUb2tlbml6ZXIuVG9rZW5UeXBlLkNPTU1BKSB7XG4gICAgICAgICAgICAgIHRvay5jb25zdW1lKCk7XG4gICAgICAgICAgICAgIHRva2VuID0gdG9rLnRva2VuKCk7XG4gICAgICAgICAgICAgIGlmICh0b2tlbi50eXBlICE9IENzc1Rva2VuaXplci5Ub2tlblR5cGUuSU5UKSB7XG4gICAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiPGludD4gZXhwZWN0ZWRcIik7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgbWF4ID0gdG9rZW4ubnVtO1xuICAgICAgICAgICAgICB0b2suY29uc3VtZSgpO1xuICAgICAgICAgICAgICB0b2tlbiA9IHRvay50b2tlbigpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKHRva2VuLnR5cGUgIT0gQ3NzVG9rZW5pemVyLlRva2VuVHlwZS5DX0JSQykge1xuICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCInfScgZXhwZWN0ZWRcIik7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB2YWxzLnB1c2godGhpcy5hZGRDb3VudHModmFscy5wb3AoKSwgbWluLCBtYXgpKTtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgIH1cbiAgICAgICAgICBjYXNlIENzc1Rva2VuaXplci5Ub2tlblR5cGUuU0VNSUNPTDpcbiAgICAgICAgICAgIHJlc3VsdCA9IHJlZHVjZSgpO1xuICAgICAgICAgICAgaWYgKHN0YWNrLmxlbmd0aCA+IDApIHtcbiAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKGB1bmNsb3NlZCAnJHtzdGFjay5wb3AoKS5ifSdgKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJ1bmV4cGVjdGVkIHRva2VuXCIpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICB0b2suY29uc3VtZSgpO1xuICAgICAgaWYgKHRoaXMuaXNCdWlsdEluKHJ1bGVOYW1lKSkge1xuICAgICAgICB0aGlzLm5hbWVkVmFsaWRhdG9yc1tydWxlTmFtZV0gPSByZXN1bHQ7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBpZiAocmVzdWx0LmlzU2ltcGxlKCkpIHtcbiAgICAgICAgICB0aGlzLnZhbGlkYXRvcnNbcnVsZU5hbWVdID0gcmVzdWx0Lm5vZGVzWzBdLnZhbGlkYXRvcjtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICB0aGlzLnZhbGlkYXRvcnNbcnVsZU5hbWVdID0gbmV3IFNwYWNlTGlzdFZhbGlkYXRvcihyZXN1bHQpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgcHJpdmF0ZSBwYXJzZURlZmF1bHRzKHRvazogQ3NzVG9rZW5pemVyLlRva2VuaXplcik6IHZvaWQge1xuICAgIHdoaWxlICh0cnVlKSB7XG4gICAgICBjb25zdCBwcm9wTmFtZSA9IHRoaXMucmVhZE5hbWVBbmRQcmVmaXhlcyh0b2ssIDIpO1xuICAgICAgaWYgKCFwcm9wTmFtZSkge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG4gICAgICBjb25zdCB2YWxzOiBDc3MuVmFsW10gPSBbXTtcbiAgICAgIHdoaWxlICh0cnVlKSB7XG4gICAgICAgIHRvay5jb25zdW1lKCk7XG4gICAgICAgIGNvbnN0IHRva2VuID0gdG9rLnRva2VuKCk7XG4gICAgICAgIGlmICh0b2tlbi50eXBlID09IENzc1Rva2VuaXplci5Ub2tlblR5cGUuU0VNSUNPTCkge1xuICAgICAgICAgIHRvay5jb25zdW1lKCk7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cbiAgICAgICAgc3dpdGNoICh0b2tlbi50eXBlKSB7XG4gICAgICAgICAgY2FzZSBDc3NUb2tlbml6ZXIuVG9rZW5UeXBlLklERU5UOlxuICAgICAgICAgICAgdmFscy5wdXNoKENzcy5nZXROYW1lKHRva2VuLnRleHQpKTtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgIGNhc2UgQ3NzVG9rZW5pemVyLlRva2VuVHlwZS5OVU06XG4gICAgICAgICAgICB2YWxzLnB1c2gobmV3IENzcy5OdW0odG9rZW4ubnVtKSk7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgICBjYXNlIENzc1Rva2VuaXplci5Ub2tlblR5cGUuSU5UOlxuICAgICAgICAgICAgdmFscy5wdXNoKG5ldyBDc3MuSW50KHRva2VuLm51bSkpO1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgY2FzZSBDc3NUb2tlbml6ZXIuVG9rZW5UeXBlLk5VTUVSSUM6XG4gICAgICAgICAgICB2YWxzLnB1c2gobmV3IENzcy5OdW1lcmljKHRva2VuLm51bSwgdG9rZW4udGV4dCkpO1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcInVuZXhwZWN0ZWQgdG9rZW5cIik7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIHRoaXMuZGVmYXVsdFZhbHVlc1twcm9wTmFtZV0gPVxuICAgICAgICB2YWxzLmxlbmd0aCA+IDEgPyBuZXcgQ3NzLlNwYWNlTGlzdCh2YWxzKSA6IHZhbHNbMF07XG4gICAgfVxuICB9XG5cbiAgcHJpdmF0ZSBwYXJzZVNob3J0aGFuZHModG9rOiBDc3NUb2tlbml6ZXIuVG9rZW5pemVyKTogdm9pZCB7XG4gICAgd2hpbGUgKHRydWUpIHtcbiAgICAgIGNvbnN0IHJ1bGVOYW1lID0gdGhpcy5yZWFkTmFtZUFuZFByZWZpeGVzKHRvaywgMyk7XG4gICAgICBpZiAoIXJ1bGVOYW1lKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cbiAgICAgIGxldCB0b2tlbiA9IHRvay5udGhUb2tlbigxKTtcbiAgICAgIGxldCBzaG9ydGhhbmRWYWxpZGF0b3I6IFNob3J0aGFuZFZhbGlkYXRvcjtcbiAgICAgIGlmIChcbiAgICAgICAgdG9rZW4udHlwZSA9PSBDc3NUb2tlbml6ZXIuVG9rZW5UeXBlLklERU5UICYmXG4gICAgICAgIHNob3J0aGFuZFZhbGlkYXRvcnNbdG9rZW4udGV4dF1cbiAgICAgICkge1xuICAgICAgICBzaG9ydGhhbmRWYWxpZGF0b3IgPSBuZXcgc2hvcnRoYW5kVmFsaWRhdG9yc1t0b2tlbi50ZXh0XSgpO1xuICAgICAgICB0b2suY29uc3VtZSgpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgc2hvcnRoYW5kVmFsaWRhdG9yID0gbmV3IFNpbXBsZVNob3J0aGFuZFZhbGlkYXRvcigpO1xuICAgICAgfVxuICAgICAgc2hvcnRoYW5kVmFsaWRhdG9yLnNldE93bmVyKHRoaXMpO1xuICAgICAgbGV0IHJlc3VsdCA9IGZhbHNlO1xuICAgICAgbGV0IHN5bnRheDogU2hvcnRoYW5kU3ludGF4Tm9kZVtdID0gW107XG4gICAgICBsZXQgc2xhc2ggPSBmYWxzZTtcbiAgICAgIGNvbnN0IHN0YWNrID0gW107XG4gICAgICBjb25zdCBwcm9wTGlzdCA9IFtdO1xuICAgICAgd2hpbGUgKCFyZXN1bHQpIHtcbiAgICAgICAgdG9rLmNvbnN1bWUoKTtcbiAgICAgICAgdG9rZW4gPSB0b2sudG9rZW4oKTtcbiAgICAgICAgc3dpdGNoICh0b2tlbi50eXBlKSB7XG4gICAgICAgICAgY2FzZSBDc3NUb2tlbml6ZXIuVG9rZW5UeXBlLklERU5UOlxuICAgICAgICAgICAgaWYgKHRoaXMudmFsaWRhdG9yc1t0b2tlbi50ZXh0XSkge1xuICAgICAgICAgICAgICBzeW50YXgucHVzaChzaG9ydGhhbmRWYWxpZGF0b3Iuc3ludGF4Tm9kZUZvclByb3BlcnR5KHRva2VuLnRleHQpKTtcbiAgICAgICAgICAgICAgcHJvcExpc3QucHVzaCh0b2tlbi50ZXh0KTtcbiAgICAgICAgICAgIH0gZWxzZSBpZiAoXG4gICAgICAgICAgICAgIHRoaXMuc2hvcnRoYW5kc1t0b2tlbi50ZXh0XSBpbnN0YW5jZW9mIEluc2V0c1Nob3J0aGFuZFZhbGlkYXRvclxuICAgICAgICAgICAgKSB7XG4gICAgICAgICAgICAgIGNvbnN0IGluc2V0U2hvcnRoYW5kID0gdGhpcy5zaG9ydGhhbmRzW1xuICAgICAgICAgICAgICAgIHRva2VuLnRleHRcbiAgICAgICAgICAgICAgXSBhcyBJbnNldHNTaG9ydGhhbmRWYWxpZGF0b3I7XG4gICAgICAgICAgICAgIHN5bnRheC5wdXNoKGluc2V0U2hvcnRoYW5kLmNyZWF0ZVN5bnRheE5vZGUoKSk7XG4gICAgICAgICAgICAgIHByb3BMaXN0LnB1c2goLi4uaW5zZXRTaG9ydGhhbmQucHJvcExpc3QpO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFxuICAgICAgICAgICAgICAgIGAnJHt0b2tlbi50ZXh0fScgaXMgbmVpdGhlciBhIHNpbXBsZSBwcm9wZXJ0eSBub3IgYW4gaW5zZXQgc2hvcnRoYW5kYCxcbiAgICAgICAgICAgICAgKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgIGNhc2UgQ3NzVG9rZW5pemVyLlRva2VuVHlwZS5TTEFTSDpcbiAgICAgICAgICAgIGlmIChzeW50YXgubGVuZ3RoID4gMCB8fCBzbGFzaCkge1xuICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJ1bmV4cGVjdGVkIHNsYXNoXCIpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgc2xhc2ggPSB0cnVlO1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgY2FzZSBDc3NUb2tlbml6ZXIuVG9rZW5UeXBlLk9fQlJLOlxuICAgICAgICAgICAgc3RhY2sucHVzaCh7IHNsYXNoLCBzeW50YXggfSk7XG4gICAgICAgICAgICBzeW50YXggPSBbXTtcbiAgICAgICAgICAgIHNsYXNoID0gZmFsc2U7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgICBjYXNlIENzc1Rva2VuaXplci5Ub2tlblR5cGUuQ19CUks6IHtcbiAgICAgICAgICAgIGNvbnN0IGNvbXBvdW5kID0gbmV3IFNob3J0aGFuZFN5bnRheENvbXBvdW5kKHN5bnRheCwgc2xhc2gpO1xuICAgICAgICAgICAgY29uc3QgaXRlbSA9IHN0YWNrLnBvcCgpO1xuICAgICAgICAgICAgc3ludGF4ID0gaXRlbS5zeW50YXg7XG4gICAgICAgICAgICBzbGFzaCA9IGl0ZW0uc2xhc2g7XG4gICAgICAgICAgICBzeW50YXgucHVzaChjb21wb3VuZCk7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgICB9XG4gICAgICAgICAgY2FzZSBDc3NUb2tlbml6ZXIuVG9rZW5UeXBlLlNFTUlDT0w6XG4gICAgICAgICAgICByZXN1bHQgPSB0cnVlO1xuICAgICAgICAgICAgdG9rLmNvbnN1bWUoKTtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJ1bmV4cGVjdGVkIHRva2VuXCIpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICBzaG9ydGhhbmRWYWxpZGF0b3IuaW5pdChzeW50YXgsIHByb3BMaXN0KTtcbiAgICAgIHRoaXMuc2hvcnRoYW5kc1tydWxlTmFtZV0gPSBzaG9ydGhhbmRWYWxpZGF0b3I7XG4gICAgfVxuICB9XG5cbiAgcGFyc2UodGV4dDogc3RyaW5nKTogdm9pZCB7XG4gICAgLy8gTm90IGFzIHJvYnVzdCBhcyBDU1MgcGFyc2VyLlxuICAgIGNvbnN0IHRvayA9IG5ldyBDc3NUb2tlbml6ZXIuVG9rZW5pemVyKHRleHQsIG51bGwpO1xuICAgIHRoaXMucGFyc2VWYWxpZGF0b3JzKHRvayk7XG4gICAgdGhpcy5wYXJzZURlZmF1bHRzKHRvayk7XG4gICAgdGhpcy5wYXJzZVNob3J0aGFuZHModG9rKTtcbiAgICB0aGlzLmJhY2tncm91bmRQcm9wcyA9IHRoaXMubWFrZVByb3BTZXQoW1wiYmFja2dyb3VuZFwiXSk7XG4gICAgdGhpcy5sYXlvdXRQcm9wcyA9IHRoaXMubWFrZVByb3BTZXQoW1xuICAgICAgXCJtYXJnaW5cIixcbiAgICAgIFwiYm9yZGVyXCIsXG4gICAgICBcInBhZGRpbmdcIixcbiAgICAgIFwiY29sdW1uc1wiLFxuICAgICAgXCJjb2x1bW4tZ2FwXCIsXG4gICAgICBcImNvbHVtbi1ydWxlXCIsXG4gICAgICBcImNvbHVtbi1maWxsXCIsXG4gICAgXSk7XG4gIH1cblxuICBtYWtlUHJvcFNldChwcm9wTGlzdDogc3RyaW5nW10pOiBWYWx1ZU1hcCB7XG4gICAgY29uc3QgbWFwOiBWYWx1ZU1hcCA9IHt9O1xuICAgIGZvciAoY29uc3QgcHJvcCBvZiBwcm9wTGlzdCkge1xuICAgICAgY29uc3Qgc2hvcnRoYW5kID0gdGhpcy5zaG9ydGhhbmRzW3Byb3BdO1xuICAgICAgY29uc3QgbGlzdCA9IHNob3J0aGFuZCA/IHNob3J0aGFuZC5wcm9wTGlzdCA6IFtwcm9wXTtcbiAgICAgIGZvciAoY29uc3QgcG5hbWUgb2YgbGlzdCkge1xuICAgICAgICBjb25zdCBwdmFsID0gdGhpcy5kZWZhdWx0VmFsdWVzW3BuYW1lXTtcbiAgICAgICAgaWYgKCFwdmFsKSB7XG4gICAgICAgICAgTG9nZ2luZy5sb2dnZXIud2FybihcIlVua25vd24gcHJvcGVydHkgaW4gbWFrZVByb3BTZXQ6XCIsIHBuYW1lKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBtYXBbcG5hbWVdID0gcHZhbDtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gbWFwO1xuICB9XG5cbiAgdmFsaWRhdGVQcm9wZXJ0eUFuZEhhbmRsZVNob3J0aGFuZChcbiAgICBuYW1lOiBzdHJpbmcsXG4gICAgdmFsdWU6IENzcy5WYWwsXG4gICAgaW1wb3J0YW50OiBib29sZWFuLFxuICAgIHJlY2VpdmVyOiBQcm9wZXJ0eVJlY2VpdmVyLFxuICApOiB2b2lkIHtcbiAgICBsZXQgcHJlZml4ID0gXCJcIjtcbiAgICBjb25zdCBvcmlnTmFtZSA9IG5hbWU7XG4gICAgbmFtZSA9IG5hbWUudG9Mb3dlckNhc2UoKTtcbiAgICBjb25zdCByID0gbmFtZS5tYXRjaCgvXi0oW2Etel0rKS0oWy1hLXowLTldKykkLyk7XG4gICAgaWYgKHIpIHtcbiAgICAgIHByZWZpeCA9IHJbMV07XG4gICAgICBuYW1lID0gclsyXTtcbiAgICB9XG4gICAgY29uc3QgcHggPSB0aGlzLnByZWZpeGVzW25hbWVdO1xuICAgIGlmICghcHggfHwgIXB4W3ByZWZpeF0pIHtcbiAgICAgIHJlY2VpdmVyLnVua25vd25Qcm9wZXJ0eShvcmlnTmFtZSwgdmFsdWUpO1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBjb25zdCB2YWxpZGF0b3IgPSB0aGlzLnZhbGlkYXRvcnNbbmFtZV07XG4gICAgaWYgKHZhbGlkYXRvcikge1xuICAgICAgY29uc3QgcnZhbHVlID1cbiAgICAgICAgdmFsdWUgPT09IENzcy5pZGVudC5pbmhlcml0IHx8IHZhbHVlLmlzRXhwcigpXG4gICAgICAgICAgPyB2YWx1ZVxuICAgICAgICAgIDogdmFsdWUudmlzaXQodmFsaWRhdG9yKTtcbiAgICAgIGlmIChydmFsdWUpIHtcbiAgICAgICAgcmVjZWl2ZXIuc2ltcGxlUHJvcGVydHkobmFtZSwgcnZhbHVlLCBpbXBvcnRhbnQpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcmVjZWl2ZXIuaW52YWxpZFByb3BlcnR5VmFsdWUob3JpZ05hbWUsIHZhbHVlKTtcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgY29uc3Qgc2hvcnRoYW5kID0gdGhpcy5zaG9ydGhhbmRzW25hbWVdLmNsb25lKCk7XG4gICAgICBpZiAodmFsdWUgPT09IENzcy5pZGVudC5pbmhlcml0KSB7XG4gICAgICAgIHNob3J0aGFuZC5wcm9wYWdhdGVJbmhlcml0KGltcG9ydGFudCwgcmVjZWl2ZXIpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdmFsdWUudmlzaXQoc2hvcnRoYW5kKTtcbiAgICAgICAgaWYgKCFzaG9ydGhhbmQuZmluaXNoKGltcG9ydGFudCwgcmVjZWl2ZXIpKSB7XG4gICAgICAgICAgcmVjZWl2ZXIuaW52YWxpZFByb3BlcnR5VmFsdWUob3JpZ05hbWUsIHZhbHVlKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgfVxufVxuXG5leHBvcnQgZnVuY3Rpb24gYmFzZVZhbGlkYXRvclNldCgpOiBWYWxpZGF0b3JTZXQge1xuICBjb25zdCB2YWxpZGF0b3JTZXQgPSBuZXcgVmFsaWRhdG9yU2V0KCk7XG4gIHZhbGlkYXRvclNldC5pbml0QnVpbHRJblZhbGlkYXRvcnMoKTtcbiAgdmFsaWRhdG9yU2V0LnBhcnNlKFZhbGlkYXRpb25UeHQpO1xuICByZXR1cm4gdmFsaWRhdG9yU2V0O1xufVxuIiwiLyoqXG4gKiBDb3B5cmlnaHQgMjAxMyBHb29nbGUsIEluYy5cbiAqIENvcHlyaWdodCAyMDE1IFRyaW0tbWFya3MgSW5jLlxuICogQ29weXJpZ2h0IDIwMTkgVml2bGlvc3R5bGUgRm91bmRhdGlvblxuICpcbiAqIFZpdmxpb3N0eWxlLmpzIGlzIGZyZWUgc29mdHdhcmU6IHlvdSBjYW4gcmVkaXN0cmlidXRlIGl0IGFuZC9vciBtb2RpZnlcbiAqIGl0IHVuZGVyIHRoZSB0ZXJtcyBvZiB0aGUgR05VIEFmZmVybyBHZW5lcmFsIFB1YmxpYyBMaWNlbnNlIGFzIHB1Ymxpc2hlZCBieVxuICogdGhlIEZyZWUgU29mdHdhcmUgRm91bmRhdGlvbiwgZWl0aGVyIHZlcnNpb24gMyBvZiB0aGUgTGljZW5zZSwgb3JcbiAqIChhdCB5b3VyIG9wdGlvbikgYW55IGxhdGVyIHZlcnNpb24uXG4gKlxuICogVml2bGlvc3R5bGUuanMgaXMgZGlzdHJpYnV0ZWQgaW4gdGhlIGhvcGUgdGhhdCBpdCB3aWxsIGJlIHVzZWZ1bCxcbiAqIGJ1dCBXSVRIT1VUIEFOWSBXQVJSQU5UWTsgd2l0aG91dCBldmVuIHRoZSBpbXBsaWVkIHdhcnJhbnR5IG9mXG4gKiBNRVJDSEFOVEFCSUxJVFkgb3IgRklUTkVTUyBGT1IgQSBQQVJUSUNVTEFSIFBVUlBPU0UuICBTZWUgdGhlXG4gKiBHTlUgQWZmZXJvIEdlbmVyYWwgUHVibGljIExpY2Vuc2UgZm9yIG1vcmUgZGV0YWlscy5cbiAqXG4gKiBZb3Ugc2hvdWxkIGhhdmUgcmVjZWl2ZWQgYSBjb3B5IG9mIHRoZSBHTlUgQWZmZXJvIEdlbmVyYWwgUHVibGljIExpY2Vuc2VcbiAqIGFsb25nIHdpdGggVml2bGlvc3R5bGUuanMuICBJZiBub3QsIHNlZSA8aHR0cDovL3d3dy5nbnUub3JnL2xpY2Vuc2VzLz4uXG4gKlxuICogQGZpbGVvdmVydmlldyBDc3NTdHlsZXIgLSBBcHBseSBDU1MgY2FzY2FkZSB0byBhIGRvY3VtZW50IGluY3JlbWVudGFsbHkgYW5kXG4gKiBjYWNoZSB0aGUgcmVzdWx0LlxuICovXG5pbXBvcnQgKiBhcyBBc3NlcnRzIGZyb20gXCIuL2Fzc2VydHNcIjtcbmltcG9ydCAqIGFzIEJhc2UgZnJvbSBcIi4vYmFzZVwiO1xuaW1wb3J0ICogYXMgQnJlYWsgZnJvbSBcIi4vYnJlYWtcIjtcbmltcG9ydCAqIGFzIENzcyBmcm9tIFwiLi9jc3NcIjtcbmltcG9ydCAqIGFzIENzc0Nhc2NhZGUgZnJvbSBcIi4vY3NzLWNhc2NhZGVcIjtcbmltcG9ydCAqIGFzIENzc1BhcnNlciBmcm9tIFwiLi9jc3MtcGFyc2VyXCI7XG5pbXBvcnQgKiBhcyBDc3NQcm9wIGZyb20gXCIuL2Nzcy1wcm9wXCI7XG5pbXBvcnQgKiBhcyBDc3NWYWxpZGF0b3IgZnJvbSBcIi4vY3NzLXZhbGlkYXRvclwiO1xuaW1wb3J0ICogYXMgRGlzcGxheSBmcm9tIFwiLi9kaXNwbGF5XCI7XG5pbXBvcnQgKiBhcyBFeHBycyBmcm9tIFwiLi9leHByc1wiO1xuaW1wb3J0ICogYXMgVnRyZWUgZnJvbSBcIi4vdnRyZWVcIjtcbmltcG9ydCB7IENzc1N0eWxlciwgWG1sRG9jIH0gZnJvbSBcIi4vdHlwZXNcIjtcblxuZXhwb3J0IGNsYXNzIFNsaXBSYW5nZSB7XG4gIGVuZFN0dWNrRml4ZWQ6IG51bWJlcjtcbiAgZW5kRml4ZWQ6IG51bWJlcjtcbiAgZW5kU2xpcHBlZDogbnVtYmVyO1xuXG4gIGNvbnN0cnVjdG9yKGVuZFN0dWNrRml4ZWQsIGVuZEZpeGVkLCBlbmRTbGlwcGVkKSB7XG4gICAgdGhpcy5lbmRTdHVja0ZpeGVkID0gZW5kU3R1Y2tGaXhlZDtcbiAgICB0aGlzLmVuZEZpeGVkID0gZW5kRml4ZWQ7XG4gICAgdGhpcy5lbmRTbGlwcGVkID0gZW5kU2xpcHBlZDtcbiAgfVxufVxuXG4vKipcbiAqIE1hcHMgYWxsIGludHMgaW4gYSByYW5nZSAoXCJmaXhlZFwiKSB0byBpbnRzIHdpdGggc2xpcHBhZ2UgKFwic2xpcHBlZFwiKVxuICovXG5leHBvcnQgY2xhc3MgU2xpcE1hcCB7XG4gIG1hcCA9IFtdIGFzIFNsaXBSYW5nZVtdO1xuXG4gIGdldE1heEZpeGVkKCk6IG51bWJlciB7XG4gICAgaWYgKHRoaXMubWFwLmxlbmd0aCA9PSAwKSB7XG4gICAgICByZXR1cm4gMDtcbiAgICB9XG4gICAgY29uc3QgcmFuZ2UgPSB0aGlzLm1hcFt0aGlzLm1hcC5sZW5ndGggLSAxXTtcbiAgICByZXR1cm4gcmFuZ2UuZW5kRml4ZWQ7XG4gIH1cblxuICBnZXRNYXhTbGlwcGVkKCk6IG51bWJlciB7XG4gICAgaWYgKHRoaXMubWFwLmxlbmd0aCA9PSAwKSB7XG4gICAgICByZXR1cm4gMDtcbiAgICB9XG4gICAgY29uc3QgcmFuZ2UgPSB0aGlzLm1hcFt0aGlzLm1hcC5sZW5ndGggLSAxXTtcbiAgICByZXR1cm4gcmFuZ2UuZW5kU2xpcHBlZDtcbiAgfVxuXG4gIGFkZFN0dWNrUmFuZ2UoZW5kRml4ZWQ6IG51bWJlcik6IHZvaWQge1xuICAgIGlmICh0aGlzLm1hcC5sZW5ndGggPT0gMCkge1xuICAgICAgdGhpcy5tYXAucHVzaChuZXcgU2xpcFJhbmdlKGVuZEZpeGVkLCBlbmRGaXhlZCwgZW5kRml4ZWQpKTtcbiAgICB9IGVsc2Uge1xuICAgICAgY29uc3QgcmFuZ2UgPSB0aGlzLm1hcFt0aGlzLm1hcC5sZW5ndGggLSAxXTtcbiAgICAgIGNvbnN0IGVuZFNsaXBwZWQgPSByYW5nZS5lbmRTbGlwcGVkICsgZW5kRml4ZWQgLSByYW5nZS5lbmRGaXhlZDtcbiAgICAgIGlmIChyYW5nZS5lbmRGaXhlZCA9PSByYW5nZS5lbmRTdHVja0ZpeGVkKSB7XG4gICAgICAgIHJhbmdlLmVuZEZpeGVkID0gZW5kRml4ZWQ7XG4gICAgICAgIHJhbmdlLmVuZFN0dWNrRml4ZWQgPSBlbmRGaXhlZDtcbiAgICAgICAgcmFuZ2UuZW5kU2xpcHBlZCA9IGVuZFNsaXBwZWQ7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB0aGlzLm1hcC5wdXNoKG5ldyBTbGlwUmFuZ2UoZW5kRml4ZWQsIGVuZEZpeGVkLCBlbmRTbGlwcGVkKSk7XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgYWRkU2xpcHBlZFJhbmdlKGVuZEZpeGVkOiBudW1iZXIpOiB2b2lkIHtcbiAgICBpZiAodGhpcy5tYXAubGVuZ3RoID09IDApIHtcbiAgICAgIHRoaXMubWFwLnB1c2gobmV3IFNsaXBSYW5nZShlbmRGaXhlZCwgMCwgMCkpO1xuICAgIH0gZWxzZSB7XG4gICAgICB0aGlzLm1hcFt0aGlzLm1hcC5sZW5ndGggLSAxXS5lbmRGaXhlZCA9IGVuZEZpeGVkO1xuICAgIH1cbiAgfVxuXG4gIHNsaXBwZWRCeUZpeGVkKGZpeGVkOiBudW1iZXIpOiBudW1iZXIge1xuICAgIGNvbnN0IGluZGV4ID0gQmFzZS5iaW5hcnlTZWFyY2goXG4gICAgICB0aGlzLm1hcC5sZW5ndGgsXG4gICAgICAoaW5kZXgpID0+IGZpeGVkIDw9IHRoaXMubWFwW2luZGV4XS5lbmRGaXhlZCxcbiAgICApO1xuICAgIGNvbnN0IHJhbmdlID0gdGhpcy5tYXBbaW5kZXhdO1xuICAgIHJldHVybiByYW5nZS5lbmRTbGlwcGVkIC0gTWF0aC5tYXgoMCwgcmFuZ2UuZW5kU3R1Y2tGaXhlZCAtIGZpeGVkKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBTbWFsbGVzdCBmaXhlZCBmb3IgYSBnaXZlbiBzbGlwcGVkLlxuICAgKi9cbiAgZml4ZWRCeVNsaXBwZWQoc2xpcHBlZDogbnVtYmVyKTogbnVtYmVyIHtcbiAgICBjb25zdCBpbmRleCA9IEJhc2UuYmluYXJ5U2VhcmNoKFxuICAgICAgdGhpcy5tYXAubGVuZ3RoLFxuICAgICAgKGluZGV4KSA9PiBzbGlwcGVkIDw9IHRoaXMubWFwW2luZGV4XS5lbmRTbGlwcGVkLFxuICAgICk7XG4gICAgY29uc3QgcmFuZ2UgPSB0aGlzLm1hcFtpbmRleF07XG4gICAgcmV0dXJuIHJhbmdlLmVuZFN0dWNrRml4ZWQgLSAocmFuZ2UuZW5kU2xpcHBlZCAtIHNsaXBwZWQpO1xuICB9XG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgRmxvd0xpc3RlbmVyIHtcbiAgLyoqXG4gICAqIEByZXR1cm4gdm9pZFxuICAgKi9cbiAgZW5jb3VudGVyZWRGbG93Q2h1bmsoZmxvd0NodW5rOiBWdHJlZS5GbG93Q2h1bmssIGZsb3c6IFZ0cmVlLkZsb3cpOiBhbnk7XG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgQWJzdHJhY3RTdHlsZXIgZXh0ZW5kcyBDc3NTdHlsZXIuQWJzdHJhY3RTdHlsZXIge31cblxuLyoqXG4gKiBSZXByZXNlbnQgYSBib3ggZ2VuZXJhdGVkIGJ5IGEgKHBzZXVkbyllbGVtZW50LiBXaGVuIGNvbnN0cnVjdGVkLCBhIGJveFxuICogY29ycmVzcG9uZGluZyB0byBgOjpiZWZvcmVgIHBzZXVkb2VsZW1lbnQgaXMgYWxzbyBjb25zdHJ1Y3RlZCBhbmQgc3RvcmVkIGluXG4gKiBgYmVmb3JlQm94YCBwcm9wZXJ0eSwgd2hlcmVhcyBvbmUgY29ycmVzcG9uZGluZyBgOjphZnRlcmAgcHNldWRvZWxlbWVudCBpc1xuICogbm90IGNvbnN0cnVjdGVkIGFuZCBgYWZ0ZXJCb3hgIHByb3BlcnR5IGlzIGBudWxsYC4gYGFmdGVyQm94YCBpcyBjb25zdHJ1Y3RlZFxuICogYnkgYGJ1aWxkQWZ0ZXJQc2V1ZG9FbGVtZW50Qm94YCBtZXRob2QuXG4gKiBAcGFyYW0gc3R5bGUgQ2FzY2FkZWQgc3R5bGUgdmFsdWVzIGZvciB0aGUgYm94LlxuICogQHBhcmFtIG9mZnNldCBUaGUgc3RhcnQgb2Zmc2V0IG9mIHRoZSBib3guIEl0IGNvaW5jaWRlcyB3aXRoIHRoZSBzdGFydCBvZmZzZXRcbiAqICAgICBvZiB0aGUgZWxlbWVudCBpZiB0aGUgYm94IGlzIGdlbmVyYXRlZCBieSB0aGUgZWxlbWVudCBvciB0aGUgYDo6YmVmb3JlYFxuICogICAgIHBzZXVkb2VsZW1lbnQuIFdoZW4gdGhlIGJveCBjb3JyZXNwb25kcyB0byB0aGUgYDo6YWZ0ZXJgIHBzZXVkb2VsZW1lbnQsXG4gKiAgICAgdGhlIG9mZnNldCBpcyBqdXN0IGFmdGVyIHRoZSBjb250ZW50IGJlZm9yZSB0aGUgYDo6YWZ0ZXJgIHBzZXVkb2VsZW1lbnQuXG4gKiBAcGFyYW0gaXNSb290IFRydWUgaWYgdGhlIGJveCBpcyBnZW5lcmF0ZWQgYnkgdGhlIHJvb3QgZWxlbWVudCAobm90XG4gKiAgICAgcHNldWRvZWxlbWVudCkuXG4gKiBAcGFyYW0gZmxvd0NodW5rIEZsb3dDaHVuayB0byB3aGljaCB0aGUgYm94IGJlbG9uZ3MgdG8uXG4gKiBAcGFyYW0gYXRCbG9ja1N0YXJ0IFRydWUgaWYgdGhlIGJveCBpcyByaWdodCBhZnRlciB0aGUgYmxvY2sgc3RhcnQgZWRnZS5cbiAqIEBwYXJhbSBhdEZsb3dTdGFydCBUcnVlIGlmIHRoZSBib3ggaXMgcmlnaHQgYWZ0ZXIgdGhlIGZsb3cgc3RhcnQuXG4gKiBAcGFyYW0gaXNQYXJlbnRCb3hEaXNwbGF5ZWQgVHJ1ZSBpZiB0aGUgcGFyZW50IGJveCBoYXMgYSBkaXNwbGF5ZWQgYm94LlxuICovXG5leHBvcnQgY2xhc3MgQm94IHtcbiAgZmxvd05hbWU6IHN0cmluZztcbiAgaXNCbG9ja1ZhbHVlOiBib29sZWFuIHwgbnVsbCA9IG51bGw7XG4gIGhhc0JveFZhbHVlOiBib29sZWFuIHwgbnVsbCA9IG51bGw7XG4gIHN0eWxlVmFsdWVzID0ge30gYXMgeyBba2V5OiBzdHJpbmddOiBDc3MuVmFsIH07XG4gIGJlZm9yZUJveDogQm94ID0gbnVsbDtcbiAgYWZ0ZXJCb3g6IEJveCA9IG51bGw7XG4gIGJyZWFrQmVmb3JlOiBzdHJpbmcgfCBudWxsID0gbnVsbDtcblxuICBjb25zdHJ1Y3RvcihcbiAgICBwdWJsaWMgcmVhZG9ubHkgY29udGV4dDogRXhwcnMuQ29udGV4dCxcbiAgICBwdWJsaWMgcmVhZG9ubHkgc3R5bGU6IENzc0Nhc2NhZGUuRWxlbWVudFN0eWxlLFxuICAgIHB1YmxpYyByZWFkb25seSBvZmZzZXQ6IG51bWJlcixcbiAgICBwdWJsaWMgcmVhZG9ubHkgaXNSb290OiBib29sZWFuLFxuICAgIHB1YmxpYyByZWFkb25seSBmbG93Q2h1bms6IFZ0cmVlLkZsb3dDaHVuayxcbiAgICBwdWJsaWMgcmVhZG9ubHkgYXRCbG9ja1N0YXJ0OiBib29sZWFuLFxuICAgIHB1YmxpYyByZWFkb25seSBhdEZsb3dTdGFydDogYm9vbGVhbixcbiAgICBwdWJsaWMgcmVhZG9ubHkgaXNQYXJlbnRCb3hEaXNwbGF5ZWQ6IGJvb2xlYW4sXG4gICkge1xuICAgIHRoaXMuZmxvd05hbWUgPSBmbG93Q2h1bmsuZmxvd05hbWU7XG4gICAgaWYgKHRoaXMuaGFzQm94KCkpIHtcbiAgICAgIGNvbnN0IHBzZXVkb01hcCA9IHN0eWxlW1wiX3BzZXVkb3NcIl07XG4gICAgICBpZiAocHNldWRvTWFwKSB7XG4gICAgICAgIGlmIChwc2V1ZG9NYXBbXCJiZWZvcmVcIl0pIHtcbiAgICAgICAgICBjb25zdCBiZWZvcmVCb3ggPSBuZXcgQm94KFxuICAgICAgICAgICAgY29udGV4dCxcbiAgICAgICAgICAgIHBzZXVkb01hcFtcImJlZm9yZVwiXSxcbiAgICAgICAgICAgIG9mZnNldCxcbiAgICAgICAgICAgIGZhbHNlLFxuICAgICAgICAgICAgZmxvd0NodW5rLFxuICAgICAgICAgICAgdGhpcy5pc0Jsb2NrKCksXG4gICAgICAgICAgICBhdEZsb3dTdGFydCxcbiAgICAgICAgICAgIHRydWUsXG4gICAgICAgICAgKTtcbiAgICAgICAgICBjb25zdCBiZWZvcmVDb250ZW50ID0gYmVmb3JlQm94LnN0eWxlVmFsdWUoXCJjb250ZW50XCIpO1xuICAgICAgICAgIGlmIChWdHJlZS5ub25Ucml2aWFsQ29udGVudChiZWZvcmVDb250ZW50KSkge1xuICAgICAgICAgICAgdGhpcy5iZWZvcmVCb3ggPSBiZWZvcmVCb3g7XG4gICAgICAgICAgICB0aGlzLmJyZWFrQmVmb3JlID0gYmVmb3JlQm94LmJyZWFrQmVmb3JlO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgICB0aGlzLmJyZWFrQmVmb3JlID0gQnJlYWsucmVzb2x2ZUVmZmVjdGl2ZUJyZWFrVmFsdWUoXG4gICAgICB0aGlzLmdldEJyZWFrVmFsdWUoXCJiZWZvcmVcIiksXG4gICAgICB0aGlzLmJyZWFrQmVmb3JlLFxuICAgICk7XG4gICAgaWYgKHRoaXMuYXRGbG93U3RhcnQgJiYgQnJlYWsuaXNGb3JjZWRCcmVha1ZhbHVlKHRoaXMuYnJlYWtCZWZvcmUpKSB7XG4gICAgICBmbG93Q2h1bmsuYnJlYWtCZWZvcmUgPSBCcmVhay5yZXNvbHZlRWZmZWN0aXZlQnJlYWtWYWx1ZShcbiAgICAgICAgZmxvd0NodW5rLmJyZWFrQmVmb3JlLFxuICAgICAgICB0aGlzLmJyZWFrQmVmb3JlLFxuICAgICAgKTtcbiAgICB9XG4gIH1cblxuICAvKipcbiAgICogQnVpbGQgYSBib3ggY29ycmVzcG9uZGluZyB0byBgOjphZnRlcmAgcHNldWRvZWxlbWVudCBhbmQgc3RvcmVzIGl0IGluXG4gICAqIGBhZnRlckJveGAgcHJvcGVydHkuXG4gICAqIEBwYXJhbSBvZmZzZXQgVGhlIHN0YXJ0IG9mZnNldCBvZiB0aGUgYDo6YWZ0ZXJgIHBzZXVkb2VsZW1lbnQgYm94LCB3aGljaCBpc1xuICAgKiAgICAganVzdCBhZnRlciB0aGUgY29udGVudCBiZWZvcmUgdGhlIGA6OmFmdGVyYCBwc2V1ZG9lbGVtZW50LlxuICAgKiBAcGFyYW0gYXRCbG9ja1N0YXJ0IFRydWUgaWYgdGhlIGJveCBpcyByaWdodCBhZnRlciB0aGUgYmxvY2sgc3RhcnQgZWRnZS5cbiAgICogQHBhcmFtIGF0Rmxvd1N0YXJ0IFRydWUgaWYgdGhlIGJveCBpcyByaWdodCBhZnRlciB0aGUgZmxvdyBzdGFydC5cbiAgICovXG4gIGJ1aWxkQWZ0ZXJQc2V1ZG9FbGVtZW50Qm94KFxuICAgIG9mZnNldDogbnVtYmVyLFxuICAgIGF0QmxvY2tTdGFydDogYm9vbGVhbixcbiAgICBhdEZsb3dTdGFydDogYm9vbGVhbixcbiAgKSB7XG4gICAgaWYgKHRoaXMuaGFzQm94KCkpIHtcbiAgICAgIGNvbnN0IHBzZXVkb01hcCA9IHRoaXMuc3R5bGVbXCJfcHNldWRvc1wiXTtcbiAgICAgIGlmIChwc2V1ZG9NYXApIHtcbiAgICAgICAgaWYgKHBzZXVkb01hcFtcImFmdGVyXCJdKSB7XG4gICAgICAgICAgY29uc3QgYWZ0ZXJCb3ggPSBuZXcgQm94KFxuICAgICAgICAgICAgdGhpcy5jb250ZXh0LFxuICAgICAgICAgICAgcHNldWRvTWFwW1wiYWZ0ZXJcIl0sXG4gICAgICAgICAgICBvZmZzZXQsXG4gICAgICAgICAgICBmYWxzZSxcbiAgICAgICAgICAgIHRoaXMuZmxvd0NodW5rLFxuICAgICAgICAgICAgYXRCbG9ja1N0YXJ0LFxuICAgICAgICAgICAgYXRGbG93U3RhcnQsXG4gICAgICAgICAgICB0cnVlLFxuICAgICAgICAgICk7XG4gICAgICAgICAgY29uc3QgYWZ0ZXJDb250ZW50ID0gYWZ0ZXJCb3guc3R5bGVWYWx1ZShcImNvbnRlbnRcIik7XG4gICAgICAgICAgaWYgKFZ0cmVlLm5vblRyaXZpYWxDb250ZW50KGFmdGVyQ29udGVudCkpIHtcbiAgICAgICAgICAgIHRoaXMuYWZ0ZXJCb3ggPSBhZnRlckJveDtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICBzdHlsZVZhbHVlKG5hbWU6IHN0cmluZywgZGVmYXVsdFZhbHVlPzogQ3NzLlZhbCk6IENzcy5WYWwgfCBudWxsIHtcbiAgICBpZiAoIShuYW1lIGluIHRoaXMuc3R5bGVWYWx1ZXMpKSB7XG4gICAgICBjb25zdCBjdiA9IHRoaXMuc3R5bGVbbmFtZV07XG4gICAgICB0aGlzLnN0eWxlVmFsdWVzW25hbWVdID0gY3ZcbiAgICAgICAgPyBjdi5ldmFsdWF0ZSh0aGlzLmNvbnRleHQsIG5hbWUpXG4gICAgICAgIDogZGVmYXVsdFZhbHVlIHx8IG51bGw7XG4gICAgfVxuICAgIHJldHVybiB0aGlzLnN0eWxlVmFsdWVzW25hbWVdO1xuICB9XG5cbiAgZGlzcGxheVZhbHVlKCk6IENzcy5WYWwge1xuICAgIHJldHVybiB0aGlzLnN0eWxlVmFsdWUoXCJkaXNwbGF5XCIsIENzcy5pZGVudC5pbmxpbmUpO1xuICB9XG5cbiAgaXNCbG9jaygpOiBib29sZWFuIHtcbiAgICBpZiAodGhpcy5pc0Jsb2NrVmFsdWUgPT09IG51bGwpIHtcbiAgICAgIGNvbnN0IGRpc3BsYXkgPSB0aGlzLmRpc3BsYXlWYWx1ZSgpIGFzIENzcy5JZGVudDtcbiAgICAgIGNvbnN0IHBvc2l0aW9uID0gdGhpcy5zdHlsZVZhbHVlKFwicG9zaXRpb25cIikgYXMgQ3NzLklkZW50O1xuICAgICAgY29uc3QgZmxvYXQgPSB0aGlzLnN0eWxlVmFsdWUoXCJmbG9hdFwiKSBhcyBDc3MuSWRlbnQ7XG4gICAgICB0aGlzLmlzQmxvY2tWYWx1ZSA9IERpc3BsYXkuaXNCbG9jayhcbiAgICAgICAgZGlzcGxheSxcbiAgICAgICAgcG9zaXRpb24sXG4gICAgICAgIGZsb2F0LFxuICAgICAgICB0aGlzLmlzUm9vdCxcbiAgICAgICk7XG4gICAgfVxuICAgIHJldHVybiB0aGlzLmlzQmxvY2tWYWx1ZTtcbiAgfVxuXG4gIGhhc0JveCgpOiBib29sZWFuIHtcbiAgICBpZiAodGhpcy5oYXNCb3hWYWx1ZSA9PT0gbnVsbCkge1xuICAgICAgdGhpcy5oYXNCb3hWYWx1ZSA9XG4gICAgICAgIHRoaXMuaXNQYXJlbnRCb3hEaXNwbGF5ZWQgJiYgdGhpcy5kaXNwbGF5VmFsdWUoKSAhPT0gQ3NzLmlkZW50Lm5vbmU7XG4gICAgfVxuICAgIHJldHVybiB0aGlzLmhhc0JveFZhbHVlO1xuICB9XG5cbiAgZ2V0QnJlYWtWYWx1ZShlZGdlOiBzdHJpbmcpOiBzdHJpbmcgfCBudWxsIHtcbiAgICBsZXQgYnJlYWtWYWx1ZTogc3RyaW5nIHwgbnVsbCA9IG51bGw7XG4gICAgaWYgKHRoaXMuaXNCbG9jaygpKSB7XG4gICAgICBjb25zdCB2YWwgPSB0aGlzLnN0eWxlVmFsdWUoYGJyZWFrLSR7ZWRnZX1gKTtcbiAgICAgIGlmICh2YWwpIHtcbiAgICAgICAgYnJlYWtWYWx1ZSA9IHZhbC50b1N0cmluZygpO1xuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gYnJlYWtWYWx1ZTtcbiAgfVxufVxuXG4vKipcbiAqIE1hbmFnZXMgYm94ZXMgZ2VuZXJhdGVkIGJ5IGVsZW1lbnRzIGFzIGEgc3RhY2suXG4gKi9cbmV4cG9ydCBjbGFzcyBCb3hTdGFjayB7XG4gIHN0YWNrID0gW10gYXMgQm94W107XG4gIGF0QmxvY2tTdGFydDogYm9vbGVhbiA9IHRydWU7IC8vIGluZGljYXRlcyBpZiB0aGUgbmV4dCBwdXNoZWQgYm94IHdpbGwgYmUgYXQgdGhlIGJsb2NrIHN0YXJ0XG4gIGF0Rmxvd1N0YXJ0OiBib29sZWFuID0gdHJ1ZTsgLy8gaW5kaWNhdGVzIGlmIHRoZSBuZXh0IHB1c2hlZCBib3ggd2lsbCBiZSBhdCB0aGUgZmxvdyBzdGFydFxuICBhdFN0YXJ0U3RhY2sgPSBbXSBhcyB7IGF0QmxvY2tTdGFydDogYm9vbGVhbjsgYXRGbG93U3RhcnQ6IGJvb2xlYW4gfVtdOyAvLyBwdXNoZWQgd2hlbiBhIG5ldyBmbG93IHN0YXJ0c1xuXG4gIGNvbnN0cnVjdG9yKHB1YmxpYyByZWFkb25seSBjb250ZXh0OiBFeHBycy5Db250ZXh0KSB7fVxuXG4gIC8qKlxuICAgKiBSZXR1cm5zIGlmIHRoZSBzdGFjayBpcyBlbXB0eS5cbiAgICovXG4gIGVtcHR5KCk6IGJvb2xlYW4ge1xuICAgIHJldHVybiB0aGlzLnN0YWNrLmxlbmd0aCA9PT0gMDtcbiAgfVxuXG4gIC8qKlxuICAgKiBSZXR1cm5zIHRoZSBsYXN0IGJveCBpbiB0aGUgc3RhY2suXG4gICAqL1xuICBsYXN0Qm94KCk6IEJveCB8IHVuZGVmaW5lZCB7XG4gICAgcmV0dXJuIHRoaXMuc3RhY2tbdGhpcy5zdGFjay5sZW5ndGggLSAxXTtcbiAgfVxuXG4gIC8qKlxuICAgKiBSZXR1cm5zIHRoZSBmbG93IG5hbWUgb2YgdGhlIGxhc3QgYm94IGluIHRoZSBzdGFjay5cbiAgICovXG4gIGxhc3RGbG93TmFtZSgpOiBzdHJpbmcgfCBudWxsIHtcbiAgICBjb25zdCBsYXN0Qm94ID0gdGhpcy5sYXN0Qm94KCk7XG4gICAgcmV0dXJuIGxhc3RCb3ggPyBsYXN0Qm94LmZsb3dDaHVuay5mbG93TmFtZSA6IG51bGw7XG4gIH1cblxuICAvKipcbiAgICogUmV0dXJucyBpZiB0aGUgbGFzdCBib3ggaW4gdGhlIHN0YWNrIGlzIGRpc3BsYXllZC5cbiAgICovXG4gIGlzQ3VycmVudEJveERpc3BsYXllZCgpOiBib29sZWFuIHtcbiAgICByZXR1cm4gdGhpcy5zdGFjay5ldmVyeSgoYm94KSA9PiBib3guZGlzcGxheVZhbHVlKCkgIT09IENzcy5pZGVudC5ub25lKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBDcmVhdGUgYSBuZXcgYm94IGFuZCBwdXNoIGl0IHRvIHRoZSBzdGFjay5cbiAgICogQHBhcmFtIHN0eWxlIENhc2NhZGVkIHN0eWxlIHZhbHVlcyBmb3IgdGhlIGJveC5cbiAgICogQHBhcmFtIG9mZnNldCBUaGUgc3RhcnQgb2Zmc2V0IG9mIHRoZSBib3guXG4gICAqIEBwYXJhbSBpc1Jvb3QgVHJ1ZSBpZiB0aGUgYm94IGlzIGdlbmVyYXRlZCBieSB0aGUgcm9vdCBlbGVtZW50XG4gICAqIEBwYXJhbSBuZXdGbG93Q2h1bmsgU3BlY2lmeSBpZiB0aGUgZWxlbWVudCBpcyBhIGZsb3cgZWxlbWVudCAoaS5lLiB0aGVcbiAgICogICAgIGVsZW1lbnQgaXMgc3BlY2lmaWVkIGEgbmV3IGBmbG93LWludG9gIHZhbHVlKVxuICAgKi9cbiAgcHVzaChcbiAgICBzdHlsZTogQ3NzQ2FzY2FkZS5FbGVtZW50U3R5bGUsXG4gICAgb2Zmc2V0OiBudW1iZXIsXG4gICAgaXNSb290OiBib29sZWFuLFxuICAgIG5ld0Zsb3dDaHVuaz86IFZ0cmVlLkZsb3dDaHVuayxcbiAgKTogQm94IHtcbiAgICBjb25zdCBsYXN0Qm94ID0gdGhpcy5sYXN0Qm94KCk7XG4gICAgaWYgKG5ld0Zsb3dDaHVuayAmJiBsYXN0Qm94ICYmIG5ld0Zsb3dDaHVuay5mbG93TmFtZSAhPT0gbGFzdEJveC5mbG93TmFtZSkge1xuICAgICAgdGhpcy5hdFN0YXJ0U3RhY2sucHVzaCh7XG4gICAgICAgIGF0QmxvY2tTdGFydDogdGhpcy5hdEJsb2NrU3RhcnQsXG4gICAgICAgIGF0Rmxvd1N0YXJ0OiB0aGlzLmF0Rmxvd1N0YXJ0LFxuICAgICAgfSk7XG4gICAgfVxuICAgIGNvbnN0IGZsb3dDaHVuayA9IG5ld0Zsb3dDaHVuayB8fCBsYXN0Qm94LmZsb3dDaHVuaztcbiAgICBjb25zdCBpc0F0Rmxvd1N0YXJ0ID0gdGhpcy5hdEZsb3dTdGFydCB8fCAhIW5ld0Zsb3dDaHVuaztcbiAgICBjb25zdCBpc1BhcmVudEJveERpc3BsYXllZCA9IHRoaXMuaXNDdXJyZW50Qm94RGlzcGxheWVkKCk7XG4gICAgY29uc3QgYm94ID0gbmV3IEJveChcbiAgICAgIHRoaXMuY29udGV4dCxcbiAgICAgIHN0eWxlLFxuICAgICAgb2Zmc2V0LFxuICAgICAgaXNSb290LFxuICAgICAgZmxvd0NodW5rLFxuICAgICAgaXNBdEZsb3dTdGFydCB8fCB0aGlzLmF0QmxvY2tTdGFydCxcbiAgICAgIGlzQXRGbG93U3RhcnQsXG4gICAgICBpc1BhcmVudEJveERpc3BsYXllZCxcbiAgICApO1xuICAgIHRoaXMuc3RhY2sucHVzaChib3gpO1xuICAgIHRoaXMuYXRCbG9ja1N0YXJ0ID0gYm94Lmhhc0JveCgpXG4gICAgICA/ICFib3guYmVmb3JlQm94ICYmIGJveC5pc0Jsb2NrKClcbiAgICAgIDogdGhpcy5hdEJsb2NrU3RhcnQ7XG4gICAgdGhpcy5hdEZsb3dTdGFydCA9IGJveC5oYXNCb3goKVxuICAgICAgPyAhYm94LmJlZm9yZUJveCAmJiBpc0F0Rmxvd1N0YXJ0XG4gICAgICA6IHRoaXMuYXRGbG93U3RhcnQ7XG4gICAgcmV0dXJuIGJveDtcbiAgfVxuXG4gIGVuY291bnRlcmVkVGV4dE5vZGUobm9kZTogTm9kZSkge1xuICAgIGNvbnN0IGJveCA9IHRoaXMubGFzdEJveCgpO1xuICAgIGlmICgodGhpcy5hdEJsb2NrU3RhcnQgfHwgdGhpcy5hdEZsb3dTdGFydCkgJiYgYm94Lmhhc0JveCgpKSB7XG4gICAgICBjb25zdCB3aGl0ZXNwYWNlVmFsdWUgPSBib3hcbiAgICAgICAgLnN0eWxlVmFsdWUoXCJ3aGl0ZS1zcGFjZVwiLCBDc3MuaWRlbnQubm9ybWFsKVxuICAgICAgICAudG9TdHJpbmcoKTtcbiAgICAgIGNvbnN0IHdoaXRlc3BhY2UgPSBWdHJlZS53aGl0ZXNwYWNlRnJvbVByb3BlcnR5VmFsdWUod2hpdGVzcGFjZVZhbHVlKTtcbiAgICAgIEFzc2VydHMuYXNzZXJ0KHdoaXRlc3BhY2UgIT09IG51bGwpO1xuICAgICAgaWYgKCFWdHJlZS5jYW5JZ25vcmUobm9kZSwgd2hpdGVzcGFjZSkpIHtcbiAgICAgICAgdGhpcy5hdEJsb2NrU3RhcnQgPSBmYWxzZTtcbiAgICAgICAgdGhpcy5hdEZsb3dTdGFydCA9IGZhbHNlO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAgKiBQb3AgdGhlIGxhc3QgYm94LlxuICAgKi9cbiAgcG9wKG9mZnNldDogbnVtYmVyKTogQm94IHtcbiAgICBjb25zdCBib3ggPSB0aGlzLnN0YWNrLnBvcCgpO1xuICAgIGJveC5idWlsZEFmdGVyUHNldWRvRWxlbWVudEJveChvZmZzZXQsIHRoaXMuYXRCbG9ja1N0YXJ0LCB0aGlzLmF0Rmxvd1N0YXJ0KTtcbiAgICBpZiAodGhpcy5hdEZsb3dTdGFydCAmJiBib3guYWZ0ZXJCb3gpIHtcbiAgICAgIGNvbnN0IGJyZWFrQmVmb3JlID0gYm94LmFmdGVyQm94LmdldEJyZWFrVmFsdWUoXCJiZWZvcmVcIik7XG4gICAgICBib3guZmxvd0NodW5rLmJyZWFrQmVmb3JlID0gQnJlYWsucmVzb2x2ZUVmZmVjdGl2ZUJyZWFrVmFsdWUoXG4gICAgICAgIGJveC5mbG93Q2h1bmsuYnJlYWtCZWZvcmUsXG4gICAgICAgIGJyZWFrQmVmb3JlLFxuICAgICAgKTtcbiAgICB9XG4gICAgY29uc3QgcGFyZW50ID0gdGhpcy5sYXN0Qm94KCk7XG4gICAgaWYgKHBhcmVudCkge1xuICAgICAgaWYgKHBhcmVudC5mbG93TmFtZSA9PT0gYm94LmZsb3dOYW1lKSB7XG4gICAgICAgIGlmIChib3guaGFzQm94KCkpIHtcbiAgICAgICAgICB0aGlzLmF0QmxvY2tTdGFydCA9IHRoaXMuYXRGbG93U3RhcnQgPSBmYWxzZTtcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgY29uc3QgYXRTdGFydCA9IHRoaXMuYXRTdGFydFN0YWNrLnBvcCgpO1xuICAgICAgICB0aGlzLmF0QmxvY2tTdGFydCA9IGF0U3RhcnQuYXRCbG9ja1N0YXJ0O1xuICAgICAgICB0aGlzLmF0Rmxvd1N0YXJ0ID0gYXRTdGFydC5hdEZsb3dTdGFydDtcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIGJveDtcbiAgfVxuXG4gIC8qKlxuICAgKiBGaW5kIHRoZSBzdGFydCBvZmZzZXQgb2YgdGhlIG5lYXJlc3QgYmxvY2sgc3RhcnQgZWRnZSB0byB3aGljaCB0aGVcbiAgICogYGJyZWFrLWJlZm9yZWAgdmFsdWUgb2YgdGhlIGJveCBzaG91bGQgYmUgcHJvcGFnYXRlZC4gVGhpcyBtZXRob2QgY2FuIGJlXG4gICAqIGNhbGxlZCB3aGVuIGFmdGVyIHB1c2hpbmcgdGhlIGJveCBpbnRvIHRoZSBzdGFjayBvciBhZnRlciBwb3BwaW5nIHRoZSBib3hcbiAgICogb3V0IG9mIHRoZSBzdGFjay5cbiAgICovXG4gIG5lYXJlc3RCbG9ja1N0YXJ0T2Zmc2V0KGJveDogQm94KTogbnVtYmVyIHtcbiAgICBpZiAoIWJveC5hdEJsb2NrU3RhcnQpIHtcbiAgICAgIHJldHVybiBib3gub2Zmc2V0O1xuICAgIH1cbiAgICBsZXQgaSA9IHRoaXMuc3RhY2subGVuZ3RoIC0gMTtcbiAgICBsZXQgcGFyZW50ID0gdGhpcy5zdGFja1tpXTtcblxuICAgIC8vIFdoZW4gY2FsbGVkIGp1c3QgYWZ0ZXIgdGhlIGJveCBpcyBwb3BwZWQgb3V0LCB0aGUgbGFzdCBib3ggaW4gdGhlIHN0YWNrXG4gICAgLy8gaXMgZGlmZmVyZW50IGZyb20gdGhlIGJveCBhbmQgaXQgaXMgdGhlIHBhcmVudCBvZiB0aGUgYm94LiBXaGVuIGNhbGxlZFxuICAgIC8vIGFmdGVyIHRoZSBib3ggaXMgcHVzaGVkLCB0aGUgbGFzdCBib3ggaW4gdGhlIHN0YWNrIGlzIGlkZW50aWNhbCB0byB0aGVcbiAgICAvLyBib3ggYW5kIHRoZSBwYXJlbnQgb2YgdGhlIGJveCBpcyBhIGJveCByaWdodCBiZWZvcmUgdGhlIHNwZWNpZmllZCBib3guXG4gICAgaWYgKHBhcmVudCA9PT0gYm94KSB7XG4gICAgICBpLS07XG4gICAgICBwYXJlbnQgPSB0aGlzLnN0YWNrW2ldO1xuICAgIH1cbiAgICB3aGlsZSAoaSA+PSAwKSB7XG4gICAgICBpZiAocGFyZW50LmZsb3dOYW1lICE9PSBib3guZmxvd05hbWUpIHtcbiAgICAgICAgcmV0dXJuIGJveC5vZmZzZXQ7XG4gICAgICB9XG4gICAgICBpZiAoIXBhcmVudC5hdEJsb2NrU3RhcnQpIHtcbiAgICAgICAgcmV0dXJuIHBhcmVudC5vZmZzZXQ7XG4gICAgICB9XG4gICAgICBpZiAocGFyZW50LmlzUm9vdCkge1xuICAgICAgICByZXR1cm4gcGFyZW50Lm9mZnNldDtcbiAgICAgIH1cbiAgICAgIGJveCA9IHBhcmVudDtcbiAgICAgIHBhcmVudCA9IHRoaXMuc3RhY2tbLS1pXTtcbiAgICB9XG4gICAgdGhyb3cgbmV3IEVycm9yKFwiTm8gYmxvY2sgc3RhcnQgb2Zmc2V0IGZvdW5kIVwiKTtcbiAgfVxufVxuXG5leHBvcnQgY2xhc3MgU3R5bGVyIGltcGxlbWVudHMgQWJzdHJhY3RTdHlsZXIge1xuICByb290OiBFbGVtZW50O1xuICBjYXNjYWRlSG9sZGVyOiBDc3NDYXNjYWRlLkNhc2NhZGU7XG4gIGxhc3Q6IE5vZGU7XG4gIHJvb3RTdHlsZSA9IHt9IGFzIENzc0Nhc2NhZGUuRWxlbWVudFN0eWxlO1xuICBzdHlsZU1hcDogeyBba2V5OiBzdHJpbmddOiBDc3NDYXNjYWRlLkVsZW1lbnRTdHlsZSB9ID0ge307XG4gIGZsb3dzID0ge30gYXMgeyBba2V5OiBzdHJpbmddOiBWdHJlZS5GbG93IH07XG4gIGZsb3dDaHVua3MgPSBbXSBhcyBWdHJlZS5GbG93Q2h1bmtbXTtcbiAgZmxvd0xpc3RlbmVyOiBGbG93TGlzdGVuZXIgPSBudWxsO1xuICBmbG93VG9SZWFjaDogc3RyaW5nIHwgbnVsbCA9IG51bGw7XG4gIGlkVG9SZWFjaDogc3RyaW5nIHwgbnVsbCA9IG51bGw7XG4gIGNhc2NhZGU6IENzc0Nhc2NhZGUuQ2FzY2FkZUluc3RhbmNlO1xuICBvZmZzZXRNYXA6IFNsaXBNYXA7XG4gIHByaW1hcnk6IGJvb2xlYW4gPSB0cnVlO1xuICBwcmltYXJ5U3RhY2sgPSBbXSBhcyBib29sZWFuW107XG4gIHJvb3RCYWNrZ3JvdW5kQXNzaWduZWQ6IGJvb2xlYW4gPSBmYWxzZTtcbiAgcm9vdExheW91dEFzc2lnbmVkOiBib29sZWFuID0gZmFsc2U7XG4gIGxhc3RPZmZzZXQ6IG51bWJlcjtcbiAgYnJlYWtCZWZvcmVWYWx1ZXMgPSB7fSBhcyB7IFtrZXk6IG51bWJlcl06IHN0cmluZyB8IG51bGwgfTtcbiAgYm94U3RhY2s6IEJveFN0YWNrO1xuICBib2R5UmVhY2hlZDogYm9vbGVhbiA9IHRydWU7XG5cbiAgY29uc3RydWN0b3IoXG4gICAgcHVibGljIHJlYWRvbmx5IHhtbGRvYzogWG1sRG9jLlhNTERvY0hvbGRlcixcbiAgICBjYXNjYWRlOiBDc3NDYXNjYWRlLkNhc2NhZGUsXG4gICAgcHVibGljIHJlYWRvbmx5IHNjb3BlOiBFeHBycy5MZXhpY2FsU2NvcGUsXG4gICAgcHVibGljIHJlYWRvbmx5IGNvbnRleHQ6IEV4cHJzLkNvbnRleHQsXG4gICAgcHVibGljIHJlYWRvbmx5IHByaW1hcnlGbG93czogeyBba2V5OiBzdHJpbmddOiBib29sZWFuIH0sXG4gICAgcHVibGljIHJlYWRvbmx5IHZhbGlkYXRvclNldDogQ3NzVmFsaWRhdG9yLlZhbGlkYXRvclNldCxcbiAgICBwdWJsaWMgcmVhZG9ubHkgY291bnRlckxpc3RlbmVyOiBDc3NDYXNjYWRlLkNvdW50ZXJMaXN0ZW5lcixcbiAgICBjb3VudGVyUmVzb2x2ZXI6IENzc0Nhc2NhZGUuQ291bnRlclJlc29sdmVyLFxuICApIHtcbiAgICB0aGlzLnJvb3QgPSB4bWxkb2Mucm9vdDtcbiAgICB0aGlzLmNhc2NhZGVIb2xkZXIgPSBjYXNjYWRlO1xuICAgIHRoaXMubGFzdCA9IHRoaXMucm9vdDtcbiAgICB0aGlzLmNhc2NhZGUgPSBjYXNjYWRlLmNyZWF0ZUluc3RhbmNlKFxuICAgICAgY29udGV4dCxcbiAgICAgIGNvdW50ZXJMaXN0ZW5lcixcbiAgICAgIGNvdW50ZXJSZXNvbHZlcixcbiAgICAgIHhtbGRvYy5sYW5nLFxuICAgICk7XG4gICAgdGhpcy5vZmZzZXRNYXAgPSBuZXcgU2xpcE1hcCgpO1xuICAgIGNvbnN0IHJvb3RPZmZzZXQgPSB4bWxkb2MuZ2V0RWxlbWVudE9mZnNldCh0aGlzLnJvb3QpO1xuICAgIHRoaXMubGFzdE9mZnNldCA9IHJvb3RPZmZzZXQ7XG4gICAgdGhpcy5ib3hTdGFjayA9IG5ldyBCb3hTdGFjayhjb250ZXh0KTtcbiAgICB0aGlzLm9mZnNldE1hcC5hZGRTdHVja1JhbmdlKHJvb3RPZmZzZXQpO1xuICAgIGNvbnN0IHN0eWxlID0gdGhpcy5nZXRBdHRyU3R5bGUodGhpcy5yb290KTtcbiAgICB0aGlzLmNhc2NhZGUucHVzaEVsZW1lbnQodGhpcy5yb290LCBzdHlsZSwgcm9vdE9mZnNldCk7XG4gICAgdGhpcy5wb3N0cHJvY2Vzc1RvcFN0eWxlKHN0eWxlLCBmYWxzZSk7XG4gICAgc3dpdGNoICh0aGlzLnJvb3QubmFtZXNwYWNlVVJJKSB7XG4gICAgICBjYXNlIEJhc2UuTlMuWEhUTUw6XG4gICAgICAgIHRoaXMuYm9keVJlYWNoZWQgPSBmYWxzZTtcbiAgICAgICAgYnJlYWs7XG4gICAgfVxuICAgIHRoaXMucHJpbWFyeVN0YWNrLnB1c2godHJ1ZSk7XG4gICAgdGhpcy5zdHlsZU1hcCA9IHt9O1xuICAgIHRoaXMuc3R5bGVNYXBbYGUke3Jvb3RPZmZzZXR9YF0gPSBzdHlsZTtcbiAgICB0aGlzLmxhc3RPZmZzZXQrKztcbiAgICB0aGlzLnJlcGxheUZsb3dFbGVtZW50c0Zyb21PZmZzZXQoLTEpO1xuICB9XG5cbiAgaGFzUHJvcChcbiAgICBzdHlsZTogQ3NzQ2FzY2FkZS5FbGVtZW50U3R5bGUsXG4gICAgbWFwOiBDc3NWYWxpZGF0b3IuVmFsdWVNYXAsXG4gICAgbmFtZTogc3RyaW5nLFxuICApOiBib29sZWFuIHtcbiAgICBjb25zdCBjYXNjVmFsID0gc3R5bGVbbmFtZV07XG4gICAgcmV0dXJuIGNhc2NWYWwgJiYgY2FzY1ZhbC5ldmFsdWF0ZSh0aGlzLmNvbnRleHQpICE9PSBtYXBbbmFtZV07XG4gIH1cblxuICB0cmFuc2ZlclByb3BzVG9Sb290KFxuICAgIHNyY1N0eWxlOiBDc3NDYXNjYWRlLkVsZW1lbnRTdHlsZSxcbiAgICBtYXA6IENzc1ZhbGlkYXRvci5WYWx1ZU1hcCxcbiAgKTogdm9pZCB7XG4gICAgZm9yIChjb25zdCBwbmFtZSBpbiBtYXApIHtcbiAgICAgIGNvbnN0IGNhc2N2YWwgPSBzcmNTdHlsZVtwbmFtZV07XG4gICAgICBpZiAoY2FzY3ZhbCkge1xuICAgICAgICB0aGlzLnJvb3RTdHlsZVtwbmFtZV0gPSBjYXNjdmFsO1xuICAgICAgICBkZWxldGUgc3JjU3R5bGVbcG5hbWVdO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgY29uc3QgdmFsID0gbWFwW3BuYW1lXTtcbiAgICAgICAgaWYgKHZhbCkge1xuICAgICAgICAgIHRoaXMucm9vdFN0eWxlW3BuYW1lXSA9IG5ldyBDc3NDYXNjYWRlLkNhc2NhZGVWYWx1ZShcbiAgICAgICAgICAgIHZhbCxcbiAgICAgICAgICAgIENzc1BhcnNlci5TUEVDSUZJQ0lUWV9BVVRIT1IsXG4gICAgICAgICAgKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAgKiBUcmFuc2ZlciBwcm9wZXJ0aWVzIHRoYXQgc2hvdWxkIGJlIGFwcGxpZWQgb24gdGhlIGNvbnRhaW5lciAocGFydGl0aW9uKVxuICAgKiBsZXZlbCB0byB0aGlzLnJvb3RTdHlsZS5cbiAgICogQHBhcmFtIGVsZW1TdHlsZSAoc291cmNlKSBlbGVtZW50IHN0eWxlXG4gICAqL1xuICBwb3N0cHJvY2Vzc1RvcFN0eWxlKFxuICAgIGVsZW1TdHlsZTogQ3NzQ2FzY2FkZS5FbGVtZW50U3R5bGUsXG4gICAgaXNCb2R5OiBib29sZWFuLFxuICApOiB2b2lkIHtcbiAgICBbXCJ3cml0aW5nLW1vZGVcIiwgXCJkaXJlY3Rpb25cIl0uZm9yRWFjaCgocHJvcE5hbWUpID0+IHtcbiAgICAgIGlmIChlbGVtU3R5bGVbcHJvcE5hbWVdICYmICEoaXNCb2R5ICYmIHRoaXMucm9vdFN0eWxlW3Byb3BOYW1lXSkpIHtcbiAgICAgICAgLy8gQ29weSBpdCBvdmVyLCBidXQga2VlcCBpdCBhdCB0aGUgcm9vdCBlbGVtZW50IGFzIHdlbGwuXG4gICAgICAgIHRoaXMucm9vdFN0eWxlW3Byb3BOYW1lXSA9IGVsZW1TdHlsZVtwcm9wTmFtZV07XG4gICAgICB9XG4gICAgfSk7XG4gICAgaWYgKCF0aGlzLnJvb3RCYWNrZ3JvdW5kQXNzaWduZWQpIHtcbiAgICAgIGNvbnN0IGJhY2tncm91bmRDb2xvciA9IHRoaXMuaGFzUHJvcChcbiAgICAgICAgZWxlbVN0eWxlLFxuICAgICAgICB0aGlzLnZhbGlkYXRvclNldC5iYWNrZ3JvdW5kUHJvcHMsXG4gICAgICAgIFwiYmFja2dyb3VuZC1jb2xvclwiLFxuICAgICAgKVxuICAgICAgICA/IGVsZW1TdHlsZVtcImJhY2tncm91bmQtY29sb3JcIl0uZXZhbHVhdGUodGhpcy5jb250ZXh0KVxuICAgICAgICA6IChudWxsIGFzIENzcy5WYWwpO1xuICAgICAgY29uc3QgYmFja2dyb3VuZEltYWdlID0gdGhpcy5oYXNQcm9wKFxuICAgICAgICBlbGVtU3R5bGUsXG4gICAgICAgIHRoaXMudmFsaWRhdG9yU2V0LmJhY2tncm91bmRQcm9wcyxcbiAgICAgICAgXCJiYWNrZ3JvdW5kLWltYWdlXCIsXG4gICAgICApXG4gICAgICAgID8gZWxlbVN0eWxlW1wiYmFja2dyb3VuZC1pbWFnZVwiXS5ldmFsdWF0ZSh0aGlzLmNvbnRleHQpXG4gICAgICAgIDogKG51bGwgYXMgQ3NzLlZhbCk7XG4gICAgICBpZiAoXG4gICAgICAgIChiYWNrZ3JvdW5kQ29sb3IgJiYgYmFja2dyb3VuZENvbG9yICE9PSBDc3MuaWRlbnQuaW5oZXJpdCkgfHxcbiAgICAgICAgKGJhY2tncm91bmRJbWFnZSAmJiBiYWNrZ3JvdW5kSW1hZ2UgIT09IENzcy5pZGVudC5pbmhlcml0KVxuICAgICAgKSB7XG4gICAgICAgIHRoaXMudHJhbnNmZXJQcm9wc1RvUm9vdChlbGVtU3R5bGUsIHRoaXMudmFsaWRhdG9yU2V0LmJhY2tncm91bmRQcm9wcyk7XG4gICAgICAgIHRoaXMucm9vdEJhY2tncm91bmRBc3NpZ25lZCA9IHRydWU7XG4gICAgICB9XG4gICAgfVxuICAgIGlmICghdGhpcy5yb290TGF5b3V0QXNzaWduZWQpIHtcbiAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgY29sdW1uUHJvcHMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgaWYgKFxuICAgICAgICAgIHRoaXMuaGFzUHJvcChlbGVtU3R5bGUsIHRoaXMudmFsaWRhdG9yU2V0LmxheW91dFByb3BzLCBjb2x1bW5Qcm9wc1tpXSlcbiAgICAgICAgKSB7XG4gICAgICAgICAgdGhpcy50cmFuc2ZlclByb3BzVG9Sb290KGVsZW1TdHlsZSwgdGhpcy52YWxpZGF0b3JTZXQubGF5b3V0UHJvcHMpO1xuICAgICAgICAgIHRoaXMucm9vdExheW91dEFzc2lnbmVkID0gdHJ1ZTtcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgICBpZiAoIWlzQm9keSkge1xuICAgICAgY29uc3QgZm9udFNpemUgPSBlbGVtU3R5bGVbXCJmb250LXNpemVcIl07XG4gICAgICBpZiAoZm9udFNpemUpIHtcbiAgICAgICAgY29uc3QgdmFsID0gZm9udFNpemUuZXZhbHVhdGUodGhpcy5jb250ZXh0KTtcbiAgICAgICAgbGV0IHB4ID0gdmFsLm51bTtcbiAgICAgICAgc3dpdGNoICh2YWwudW5pdCkge1xuICAgICAgICAgIGNhc2UgXCJlbVwiOlxuICAgICAgICAgIGNhc2UgXCJyZW1cIjpcbiAgICAgICAgICAgIHB4ICo9IHRoaXMuY29udGV4dC5pbml0aWFsRm9udFNpemU7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgICBjYXNlIFwiZXhcIjpcbiAgICAgICAgICAgIHB4ICo9XG4gICAgICAgICAgICAgICh0aGlzLmNvbnRleHQuaW5pdGlhbEZvbnRTaXplICogRXhwcnMuZGVmYXVsdFVuaXRTaXplc1tcImV4XCJdKSAvXG4gICAgICAgICAgICAgIEV4cHJzLmRlZmF1bHRVbml0U2l6ZXNbXCJlbVwiXTtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgIGNhc2UgXCIlXCI6XG4gICAgICAgICAgICBweCAqPSB0aGlzLmNvbnRleHQuaW5pdGlhbEZvbnRTaXplIC8gMTAwO1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgZGVmYXVsdDoge1xuICAgICAgICAgICAgY29uc3QgdW5pdFNpemUgPSBFeHBycy5kZWZhdWx0VW5pdFNpemVzW3ZhbC51bml0XTtcbiAgICAgICAgICAgIGlmICh1bml0U2l6ZSkge1xuICAgICAgICAgICAgICBweCAqPSB1bml0U2l6ZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5jb250ZXh0LnJvb3RGb250U2l6ZSA9IHB4O1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIGdldFRvcENvbnRhaW5lclN0eWxlKCk6IENzc0Nhc2NhZGUuRWxlbWVudFN0eWxlIHtcbiAgICBsZXQgb2Zmc2V0ID0gMDtcbiAgICB3aGlsZSAoIXRoaXMuYm9keVJlYWNoZWQpIHtcbiAgICAgIG9mZnNldCArPSA1MDAwO1xuICAgICAgaWYgKHRoaXMuc3R5bGVVbnRpbChvZmZzZXQsIDApID09IE51bWJlci5QT1NJVElWRV9JTkZJTklUWSkge1xuICAgICAgICBicmVhaztcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIHRoaXMucm9vdFN0eWxlO1xuICB9XG5cbiAgZ2V0QXR0clN0eWxlKGVsZW06IEVsZW1lbnQpOiBDc3NDYXNjYWRlLkVsZW1lbnRTdHlsZSB7XG4gICAgLy8gc2tpcCBjYXNlcyBpbiB3aGljaCBlbGVtZW50cyBmb3IgWE1MIG90aGVyIHRoYW4gSFRNTCBvciBTVkdcbiAgICAvLyBoYXZlICdzdHlsZScgYXR0cmlidXRlIG5vdCBmb3IgQ1NTIGRlY2xhcmF0aW9uXG4gICAgaWYgKChlbGVtIGFzIGFueSkuc3R5bGUgaW5zdGFuY2VvZiBDU1NTdHlsZURlY2xhcmF0aW9uKSB7XG4gICAgICBjb25zdCBzdHlsZUF0dHJWYWx1ZSA9IGVsZW0uZ2V0QXR0cmlidXRlKFwic3R5bGVcIik7XG4gICAgICBpZiAoc3R5bGVBdHRyVmFsdWUpIHtcbiAgICAgICAgcmV0dXJuIENzc0Nhc2NhZGUucGFyc2VTdHlsZUF0dHJpYnV0ZShcbiAgICAgICAgICB0aGlzLnNjb3BlLFxuICAgICAgICAgIHRoaXMudmFsaWRhdG9yU2V0LFxuICAgICAgICAgIHRoaXMueG1sZG9jLnVybCxcbiAgICAgICAgICBzdHlsZUF0dHJWYWx1ZSxcbiAgICAgICAgKTtcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIHt9IGFzIENzc0Nhc2NhZGUuRWxlbWVudFN0eWxlO1xuICB9XG5cbiAgLyoqXG4gICAqIEByZXR1cm4gY3VycmVudGx5IHJlYWNoZWQgb2Zmc2V0XG4gICAqL1xuICBnZXRSZWFjaGVkT2Zmc2V0KCk6IG51bWJlciB7XG4gICAgcmV0dXJuIHRoaXMubGFzdE9mZnNldDtcbiAgfVxuXG4gIC8qKlxuICAgKiBSZXBsYXkgZmxvdyBlbGVtZW50cyB0aGF0IHdlcmUgZW5jb3VudGVyZWQgc2luY2UgdGhlIGdpdmVuIG9mZnNldFxuICAgKi9cbiAgcmVwbGF5Rmxvd0VsZW1lbnRzRnJvbU9mZnNldChvZmZzZXQ6IG51bWJlcik6IHZvaWQge1xuICAgIGlmIChvZmZzZXQgPj0gdGhpcy5sYXN0T2Zmc2V0KSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIGNvbnN0IGNvbnRleHQgPSB0aGlzLmNvbnRleHQ7XG4gICAgY29uc3Qgcm9vdE9mZnNldCA9IHRoaXMueG1sZG9jLmdldEVsZW1lbnRPZmZzZXQodGhpcy5yb290KTtcbiAgICBpZiAob2Zmc2V0IDwgcm9vdE9mZnNldCkge1xuICAgICAgY29uc3Qgcm9vdFN0eWxlID0gdGhpcy5nZXRTdHlsZSh0aGlzLnJvb3QsIGZhbHNlKTtcbiAgICAgIEFzc2VydHMuYXNzZXJ0KHJvb3RTdHlsZSk7XG4gICAgICBjb25zdCBmbG93TmFtZSA9IENzc0Nhc2NhZGUuZ2V0UHJvcChyb290U3R5bGUsIFwiZmxvdy1pbnRvXCIpO1xuICAgICAgY29uc3QgZmxvd05hbWVTdHIgPSBmbG93TmFtZVxuICAgICAgICA/IGZsb3dOYW1lLmV2YWx1YXRlKGNvbnRleHQsIFwiZmxvdy1pbnRvXCIpLnRvU3RyaW5nKClcbiAgICAgICAgOiBcImJvZHlcIjtcbiAgICAgIGNvbnN0IG5ld0Zsb3dDaHVuayA9IHRoaXMuZW5jb3VudGVyZWRGbG93RWxlbWVudChcbiAgICAgICAgZmxvd05hbWVTdHIsXG4gICAgICAgIHJvb3RTdHlsZSxcbiAgICAgICAgdGhpcy5yb290LFxuICAgICAgICByb290T2Zmc2V0LFxuICAgICAgKTtcbiAgICAgIGlmICh0aGlzLmJveFN0YWNrLmVtcHR5KCkpIHtcbiAgICAgICAgdGhpcy5ib3hTdGFjay5wdXNoKHJvb3RTdHlsZSwgcm9vdE9mZnNldCwgdHJ1ZSwgbmV3Rmxvd0NodW5rKTtcbiAgICAgIH1cbiAgICB9XG4gICAgbGV0IG5vZGUgPSB0aGlzLnhtbGRvYy5nZXROb2RlQnlPZmZzZXQob2Zmc2V0KTtcbiAgICBsZXQgbm9kZU9mZnNldCA9IHRoaXMueG1sZG9jLmdldE5vZGVPZmZzZXQobm9kZSwgMCwgZmFsc2UpO1xuICAgIGlmIChub2RlT2Zmc2V0ID49IHRoaXMubGFzdE9mZnNldCkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICB3aGlsZSAodHJ1ZSkge1xuICAgICAgaWYgKG5vZGUubm9kZVR5cGUgIT0gMSkge1xuICAgICAgICBub2RlT2Zmc2V0ICs9IG5vZGUudGV4dENvbnRlbnQubGVuZ3RoO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgY29uc3QgZWxlbSA9IG5vZGUgYXMgRWxlbWVudDtcbiAgICAgICAgaWYgKFZJVkxJT1NUWUxFX0RFQlVHKSB7XG4gICAgICAgICAgaWYgKG5vZGVPZmZzZXQgIT0gdGhpcy54bWxkb2MuZ2V0RWxlbWVudE9mZnNldChlbGVtKSkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiSW5jb25zaXN0ZW50IG9mZnNldFwiKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgY29uc3Qgc3R5bGUgPSB0aGlzLmdldFN0eWxlKGVsZW0sIGZhbHNlKTtcbiAgICAgICAgY29uc3QgZmxvd05hbWUgPSBzdHlsZVtcImZsb3ctaW50b1wiXTtcbiAgICAgICAgaWYgKGZsb3dOYW1lKSB7XG4gICAgICAgICAgY29uc3QgZmxvd05hbWVTdHIgPSBmbG93TmFtZVxuICAgICAgICAgICAgLmV2YWx1YXRlKGNvbnRleHQsIFwiZmxvdy1pbnRvXCIpXG4gICAgICAgICAgICAudG9TdHJpbmcoKTtcbiAgICAgICAgICB0aGlzLmVuY291bnRlcmVkRmxvd0VsZW1lbnQoZmxvd05hbWVTdHIsIHN0eWxlLCBlbGVtLCBub2RlT2Zmc2V0KTtcbiAgICAgICAgfVxuICAgICAgICBub2RlT2Zmc2V0Kys7XG4gICAgICB9XG4gICAgICBpZiAobm9kZU9mZnNldCA+PSB0aGlzLmxhc3RPZmZzZXQpIHtcbiAgICAgICAgYnJlYWs7XG4gICAgICB9XG4gICAgICBsZXQgbmV4dDogTm9kZSA9IG5vZGUuZmlyc3RDaGlsZDtcbiAgICAgIGlmIChuZXh0ID09IG51bGwpIHtcbiAgICAgICAgd2hpbGUgKHRydWUpIHtcbiAgICAgICAgICBuZXh0ID0gbm9kZS5uZXh0U2libGluZztcbiAgICAgICAgICBpZiAobmV4dCkge1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgfVxuICAgICAgICAgIG5vZGUgPSBub2RlLnBhcmVudE5vZGU7XG4gICAgICAgICAgaWYgKG5vZGUgPT09IHRoaXMucm9vdCkge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgbm9kZSA9IG5leHQ7XG4gICAgfVxuICB9XG5cbiAgcmVzZXRGbG93Q2h1bmtTdHJlYW0oZmxvd0xpc3RlbmVyOiBGbG93TGlzdGVuZXIpOiB2b2lkIHtcbiAgICB0aGlzLmZsb3dMaXN0ZW5lciA9IGZsb3dMaXN0ZW5lcjtcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IHRoaXMuZmxvd0NodW5rcy5sZW5ndGg7IGkrKykge1xuICAgICAgdGhpcy5mbG93TGlzdGVuZXIuZW5jb3VudGVyZWRGbG93Q2h1bmsoXG4gICAgICAgIHRoaXMuZmxvd0NodW5rc1tpXSxcbiAgICAgICAgdGhpcy5mbG93c1t0aGlzLmZsb3dDaHVua3NbaV0uZmxvd05hbWVdLFxuICAgICAgKTtcbiAgICB9XG4gIH1cblxuICBzdHlsZVVudGlsRmxvd0lzUmVhY2hlZChmbG93TmFtZTogc3RyaW5nKSB7XG4gICAgdGhpcy5mbG93VG9SZWFjaCA9IGZsb3dOYW1lO1xuICAgIGxldCBvZmZzZXQgPSAwO1xuICAgIHdoaWxlICh0cnVlKSB7XG4gICAgICBpZiAodGhpcy5mbG93VG9SZWFjaCA9PSBudWxsKSB7XG4gICAgICAgIGJyZWFrO1xuICAgICAgfVxuICAgICAgb2Zmc2V0ICs9IDUwMDA7XG4gICAgICBpZiAodGhpcy5zdHlsZVVudGlsKG9mZnNldCwgMCkgPT0gTnVtYmVyLlBPU0lUSVZFX0lORklOSVRZKSB7XG4gICAgICAgIGJyZWFrO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIHN0eWxlVW50aWxJZElzUmVhY2hlZChpZDogc3RyaW5nKSB7XG4gICAgaWYgKCFpZCkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICB0aGlzLmlkVG9SZWFjaCA9IGlkO1xuICAgIGxldCBvZmZzZXQgPSAwO1xuICAgIHdoaWxlICh0cnVlKSB7XG4gICAgICBpZiAoIXRoaXMuaWRUb1JlYWNoKSB7XG4gICAgICAgIGJyZWFrO1xuICAgICAgfVxuICAgICAgb2Zmc2V0ICs9IDUwMDA7XG4gICAgICBpZiAodGhpcy5zdHlsZVVudGlsKG9mZnNldCwgMCkgPT09IE51bWJlci5QT1NJVElWRV9JTkZJTklUWSkge1xuICAgICAgICBicmVhaztcbiAgICAgIH1cbiAgICB9XG4gICAgdGhpcy5pZFRvUmVhY2ggPSBudWxsO1xuICB9XG5cbiAgcHJpdmF0ZSBlbmNvdW50ZXJlZEZsb3dFbGVtZW50KFxuICAgIGZsb3dOYW1lOiBzdHJpbmcsXG4gICAgc3R5bGU6IENzc0Nhc2NhZGUuRWxlbWVudFN0eWxlLFxuICAgIGVsZW06IEVsZW1lbnQsXG4gICAgc3RhcnRPZmZzZXQ6IG51bWJlcixcbiAgKTogVnRyZWUuRmxvd0NodW5rIHtcbiAgICBsZXQgcHJpb3JpdHkgPSAwO1xuICAgIGxldCBsaW5nZXIgPSBOdW1iZXIuUE9TSVRJVkVfSU5GSU5JVFk7XG4gICAgbGV0IGV4Y2x1c2l2ZSA9IGZhbHNlO1xuICAgIGxldCByZXBlYXRlZCA9IGZhbHNlO1xuICAgIGxldCBsYXN0ID0gZmFsc2U7XG4gICAgY29uc3Qgb3B0aW9uc0NWID0gc3R5bGVbXCJmbG93LW9wdGlvbnNcIl07XG4gICAgaWYgKG9wdGlvbnNDVikge1xuICAgICAgY29uc3Qgb3B0aW9ucyA9IENzc1Byb3AudG9TZXQoXG4gICAgICAgIG9wdGlvbnNDVi5ldmFsdWF0ZSh0aGlzLmNvbnRleHQsIFwiZmxvdy1vcHRpb25zXCIpLFxuICAgICAgKTtcbiAgICAgIGV4Y2x1c2l2ZSA9ICEhb3B0aW9uc1tcImV4Y2x1c2l2ZVwiXTtcbiAgICAgIHJlcGVhdGVkID0gISFvcHRpb25zW1wic3RhdGljXCJdO1xuICAgICAgbGFzdCA9ICEhb3B0aW9uc1tcImxhc3RcIl07XG4gICAgfVxuICAgIGNvbnN0IGxpbmdlckNWID0gc3R5bGVbXCJmbG93LWxpbmdlclwiXTtcbiAgICBpZiAobGluZ2VyQ1YpIHtcbiAgICAgIGxpbmdlciA9IENzc1Byb3AudG9JbnQoXG4gICAgICAgIGxpbmdlckNWLmV2YWx1YXRlKHRoaXMuY29udGV4dCwgXCJmbG93LWxpbmdlclwiKSxcbiAgICAgICAgTnVtYmVyLlBPU0lUSVZFX0lORklOSVRZLFxuICAgICAgKTtcbiAgICB9XG4gICAgY29uc3QgcHJpb3JpdHlDViA9IHN0eWxlW1wiZmxvdy1wcmlvcml0eVwiXTtcbiAgICBpZiAocHJpb3JpdHlDVikge1xuICAgICAgcHJpb3JpdHkgPSBDc3NQcm9wLnRvSW50KFxuICAgICAgICBwcmlvcml0eUNWLmV2YWx1YXRlKHRoaXMuY29udGV4dCwgXCJmbG93LXByaW9yaXR5XCIpLFxuICAgICAgICAwLFxuICAgICAgKTtcbiAgICB9XG4gICAgY29uc3QgYnJlYWtCZWZvcmUgPSB0aGlzLmJyZWFrQmVmb3JlVmFsdWVzW3N0YXJ0T2Zmc2V0XSB8fCBudWxsO1xuICAgIGxldCBmbG93ID0gdGhpcy5mbG93c1tmbG93TmFtZV07XG4gICAgaWYgKCFmbG93KSB7XG4gICAgICBjb25zdCBwYXJlbnRGbG93TmFtZSA9IHRoaXMuYm94U3RhY2subGFzdEZsb3dOYW1lKCk7XG4gICAgICBmbG93ID0gdGhpcy5mbG93c1tmbG93TmFtZV0gPSBuZXcgVnRyZWUuRmxvdyhmbG93TmFtZSwgcGFyZW50Rmxvd05hbWUpO1xuICAgIH1cbiAgICBjb25zdCBmbG93Q2h1bmsgPSBuZXcgVnRyZWUuRmxvd0NodW5rKFxuICAgICAgZmxvd05hbWUsXG4gICAgICBlbGVtLFxuICAgICAgc3RhcnRPZmZzZXQsXG4gICAgICBwcmlvcml0eSxcbiAgICAgIGxpbmdlcixcbiAgICAgIGV4Y2x1c2l2ZSxcbiAgICAgIHJlcGVhdGVkLFxuICAgICAgbGFzdCxcbiAgICAgIGJyZWFrQmVmb3JlLFxuICAgICk7XG4gICAgdGhpcy5mbG93Q2h1bmtzLnB1c2goZmxvd0NodW5rKTtcbiAgICBpZiAodGhpcy5mbG93VG9SZWFjaCA9PSBmbG93TmFtZSkge1xuICAgICAgdGhpcy5mbG93VG9SZWFjaCA9IG51bGw7XG4gICAgfVxuICAgIGlmICh0aGlzLmZsb3dMaXN0ZW5lcikge1xuICAgICAgdGhpcy5mbG93TGlzdGVuZXIuZW5jb3VudGVyZWRGbG93Q2h1bmsoZmxvd0NodW5rLCBmbG93KTtcbiAgICB9XG4gICAgcmV0dXJuIGZsb3dDaHVuaztcbiAgfVxuXG4gIHJlZ2lzdGVyRm9yY2VkQnJlYWtPZmZzZXQoXG4gICAgYnJlYWtWYWx1ZTogc3RyaW5nIHwgbnVsbCxcbiAgICBvZmZzZXQ6IG51bWJlcixcbiAgICBmbG93TmFtZTogc3RyaW5nLFxuICApIHtcbiAgICBpZiAoQnJlYWsuaXNGb3JjZWRCcmVha1ZhbHVlKGJyZWFrVmFsdWUpKSB7XG4gICAgICBjb25zdCBmb3JjZWRCcmVha09mZnNldHMgPSB0aGlzLmZsb3dzW2Zsb3dOYW1lXS5mb3JjZWRCcmVha09mZnNldHM7XG4gICAgICBpZiAoXG4gICAgICAgIGZvcmNlZEJyZWFrT2Zmc2V0cy5sZW5ndGggPT09IDAgfHxcbiAgICAgICAgZm9yY2VkQnJlYWtPZmZzZXRzW2ZvcmNlZEJyZWFrT2Zmc2V0cy5sZW5ndGggLSAxXSA8IG9mZnNldFxuICAgICAgKSB7XG4gICAgICAgIGZvcmNlZEJyZWFrT2Zmc2V0cy5wdXNoKG9mZnNldCk7XG4gICAgICB9XG4gICAgfVxuICAgIGNvbnN0IHByZXZpb3VzVmFsdWUgPSB0aGlzLmJyZWFrQmVmb3JlVmFsdWVzW29mZnNldF07XG4gICAgdGhpcy5icmVha0JlZm9yZVZhbHVlc1tvZmZzZXRdID0gQnJlYWsucmVzb2x2ZUVmZmVjdGl2ZUJyZWFrVmFsdWUoXG4gICAgICBwcmV2aW91c1ZhbHVlLFxuICAgICAgYnJlYWtWYWx1ZSxcbiAgICApO1xuICB9XG5cbiAgLyoqXG4gICAqIEBwYXJhbSBzdGFydE9mZnNldCBjdXJyZW50IHBvc2l0aW9uIGluIHRoZSBkb2N1bWVudFxuICAgKiBAcGFyYW0gbG9va3VwIGxvb2t1cCB3aW5kb3cgc2l6ZSBmb3IgdGhlIG5leHQgcGFnZVxuICAgKiBAcmV0dXJuIGxvb2t1cCBvZmZzZXQgaW4gdGhlIGRvY3VtZW50IGZvciB0aGUgbmV4dCBwYWdlXG4gICAqL1xuICBzdHlsZVVudGlsKHN0YXJ0T2Zmc2V0OiBudW1iZXIsIGxvb2t1cDogbnVtYmVyKTogbnVtYmVyIHtcbiAgICBsZXQgdGFyZ2V0U2xpcHBlZE9mZnNldCA9IC0xO1xuICAgIGxldCBzbGlwcGVkT2Zmc2V0OiBudW1iZXI7XG4gICAgaWYgKHN0YXJ0T2Zmc2V0IDw9IHRoaXMubGFzdE9mZnNldCkge1xuICAgICAgc2xpcHBlZE9mZnNldCA9IHRoaXMub2Zmc2V0TWFwLnNsaXBwZWRCeUZpeGVkKHN0YXJ0T2Zmc2V0KTtcbiAgICAgIHRhcmdldFNsaXBwZWRPZmZzZXQgPSBzbGlwcGVkT2Zmc2V0ICsgbG9va3VwO1xuICAgICAgaWYgKHRhcmdldFNsaXBwZWRPZmZzZXQgPCB0aGlzLm9mZnNldE1hcC5nZXRNYXhTbGlwcGVkKCkpIHtcbiAgICAgICAgLy8gZ290IHRvIHRoZSBkZXNpcmVkIHBvaW50XG4gICAgICAgIHJldHVybiB0aGlzLm9mZnNldE1hcC5maXhlZEJ5U2xpcHBlZCh0YXJnZXRTbGlwcGVkT2Zmc2V0KTtcbiAgICAgIH1cbiAgICB9XG4gICAgaWYgKHRoaXMubGFzdCA9PSBudWxsKSB7XG4gICAgICByZXR1cm4gTnVtYmVyLlBPU0lUSVZFX0lORklOSVRZO1xuICAgIH1cbiAgICBjb25zdCBjb250ZXh0ID0gdGhpcy5jb250ZXh0O1xuICAgIHdoaWxlICh0cnVlKSB7XG4gICAgICBsZXQgbmV4dDogTm9kZSA9IHRoaXMubGFzdC5maXJzdENoaWxkO1xuICAgICAgaWYgKG5leHQgPT0gbnVsbCkge1xuICAgICAgICB3aGlsZSAodHJ1ZSkge1xuICAgICAgICAgIGlmICh0aGlzLmxhc3Qubm9kZVR5cGUgPT0gMSkge1xuICAgICAgICAgICAgdGhpcy5jYXNjYWRlLnBvcEVsZW1lbnQodGhpcy5sYXN0IGFzIEVsZW1lbnQpO1xuICAgICAgICAgICAgdGhpcy5wcmltYXJ5ID0gdGhpcy5wcmltYXJ5U3RhY2sucG9wKCk7XG4gICAgICAgICAgICBjb25zdCBib3ggPSB0aGlzLmJveFN0YWNrLnBvcCh0aGlzLmxhc3RPZmZzZXQpO1xuICAgICAgICAgICAgbGV0IGJyZWFrQWZ0ZXI6IHN0cmluZyB8IG51bGwgPSBudWxsO1xuICAgICAgICAgICAgaWYgKGJveC5hZnRlckJveCkge1xuICAgICAgICAgICAgICBjb25zdCBhZnRlclBzZXVkb0JyZWFrQmVmb3JlID0gYm94LmFmdGVyQm94LmdldEJyZWFrVmFsdWUoXG4gICAgICAgICAgICAgICAgXCJiZWZvcmVcIixcbiAgICAgICAgICAgICAgKTtcbiAgICAgICAgICAgICAgdGhpcy5yZWdpc3RlckZvcmNlZEJyZWFrT2Zmc2V0KFxuICAgICAgICAgICAgICAgIGFmdGVyUHNldWRvQnJlYWtCZWZvcmUsXG4gICAgICAgICAgICAgICAgYm94LmFmdGVyQm94LmF0QmxvY2tTdGFydFxuICAgICAgICAgICAgICAgICAgPyB0aGlzLmJveFN0YWNrLm5lYXJlc3RCbG9ja1N0YXJ0T2Zmc2V0KGJveClcbiAgICAgICAgICAgICAgICAgIDogYm94LmFmdGVyQm94Lm9mZnNldCxcbiAgICAgICAgICAgICAgICBib3guZmxvd05hbWUsXG4gICAgICAgICAgICAgICk7XG4gICAgICAgICAgICAgIGJyZWFrQWZ0ZXIgPSBib3guYWZ0ZXJCb3guZ2V0QnJlYWtWYWx1ZShcImFmdGVyXCIpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgYnJlYWtBZnRlciA9IEJyZWFrLnJlc29sdmVFZmZlY3RpdmVCcmVha1ZhbHVlKFxuICAgICAgICAgICAgICBicmVha0FmdGVyLFxuICAgICAgICAgICAgICBib3guZ2V0QnJlYWtWYWx1ZShcImFmdGVyXCIpLFxuICAgICAgICAgICAgKTtcbiAgICAgICAgICAgIHRoaXMucmVnaXN0ZXJGb3JjZWRCcmVha09mZnNldChcbiAgICAgICAgICAgICAgYnJlYWtBZnRlcixcbiAgICAgICAgICAgICAgdGhpcy5sYXN0T2Zmc2V0LFxuICAgICAgICAgICAgICBib3guZmxvd05hbWUsXG4gICAgICAgICAgICApO1xuICAgICAgICAgIH1cbiAgICAgICAgICBuZXh0ID0gdGhpcy5sYXN0Lm5leHRTaWJsaW5nO1xuICAgICAgICAgIGlmIChuZXh0KSB7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgICB9XG4gICAgICAgICAgdGhpcy5sYXN0ID0gdGhpcy5sYXN0LnBhcmVudE5vZGU7XG4gICAgICAgICAgaWYgKHRoaXMubGFzdCA9PT0gdGhpcy5yb290KSB7XG4gICAgICAgICAgICB0aGlzLmxhc3QgPSBudWxsO1xuICAgICAgICAgICAgaWYgKHN0YXJ0T2Zmc2V0IDwgdGhpcy5sYXN0T2Zmc2V0KSB7XG4gICAgICAgICAgICAgIGlmICh0YXJnZXRTbGlwcGVkT2Zmc2V0IDwgMCkge1xuICAgICAgICAgICAgICAgIHNsaXBwZWRPZmZzZXQgPSB0aGlzLm9mZnNldE1hcC5zbGlwcGVkQnlGaXhlZChzdGFydE9mZnNldCk7XG4gICAgICAgICAgICAgICAgdGFyZ2V0U2xpcHBlZE9mZnNldCA9IHNsaXBwZWRPZmZzZXQgKyBsb29rdXA7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgaWYgKHRhcmdldFNsaXBwZWRPZmZzZXQgPD0gdGhpcy5vZmZzZXRNYXAuZ2V0TWF4U2xpcHBlZCgpKSB7XG4gICAgICAgICAgICAgICAgLy8gZ290IHRvIHRoZSBkZXNpcmVkIHBvaW50XG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMub2Zmc2V0TWFwLmZpeGVkQnlTbGlwcGVkKHRhcmdldFNsaXBwZWRPZmZzZXQpO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gTnVtYmVyLlBPU0lUSVZFX0lORklOSVRZO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgdGhpcy5sYXN0ID0gbmV4dDtcbiAgICAgIGlmICh0aGlzLmxhc3Qubm9kZVR5cGUgIT0gMSkge1xuICAgICAgICB0aGlzLmxhc3RPZmZzZXQgKz0gdGhpcy5sYXN0LnRleHRDb250ZW50Lmxlbmd0aDtcbiAgICAgICAgdGhpcy5ib3hTdGFjay5lbmNvdW50ZXJlZFRleHROb2RlKHRoaXMubGFzdCk7XG4gICAgICAgIGlmICh0aGlzLnByaW1hcnkpIHtcbiAgICAgICAgICB0aGlzLm9mZnNldE1hcC5hZGRTdHVja1JhbmdlKHRoaXMubGFzdE9mZnNldCk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgdGhpcy5vZmZzZXRNYXAuYWRkU2xpcHBlZFJhbmdlKHRoaXMubGFzdE9mZnNldCk7XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGNvbnN0IGVsZW0gPSB0aGlzLmxhc3QgYXMgRWxlbWVudDtcbiAgICAgICAgY29uc3Qgc3R5bGUgPSB0aGlzLmdldEF0dHJTdHlsZShlbGVtKTtcbiAgICAgICAgdGhpcy5wcmltYXJ5U3RhY2sucHVzaCh0aGlzLnByaW1hcnkpO1xuICAgICAgICB0aGlzLmNhc2NhZGUucHVzaEVsZW1lbnQoZWxlbSwgc3R5bGUsIHRoaXMubGFzdE9mZnNldCk7XG4gICAgICAgIGNvbnN0IGlkID1cbiAgICAgICAgICBlbGVtLmdldEF0dHJpYnV0ZShcImlkXCIpIHx8IGVsZW0uZ2V0QXR0cmlidXRlTlMoQmFzZS5OUy5YTUwsIFwiaWRcIik7XG4gICAgICAgIGlmIChpZCAmJiBpZCA9PT0gdGhpcy5pZFRvUmVhY2gpIHtcbiAgICAgICAgICB0aGlzLmlkVG9SZWFjaCA9IG51bGw7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKFxuICAgICAgICAgICF0aGlzLmJvZHlSZWFjaGVkICYmXG4gICAgICAgICAgZWxlbS5sb2NhbE5hbWUgPT0gXCJib2R5XCIgJiZcbiAgICAgICAgICBlbGVtLnBhcmVudE5vZGUgPT0gdGhpcy5yb290XG4gICAgICAgICkge1xuICAgICAgICAgIHRoaXMucG9zdHByb2Nlc3NUb3BTdHlsZShzdHlsZSwgdHJ1ZSk7XG4gICAgICAgICAgdGhpcy5ib2R5UmVhY2hlZCA9IHRydWU7XG4gICAgICAgIH1cbiAgICAgICAgbGV0IGJveDogQm94O1xuICAgICAgICBjb25zdCBmbG93TmFtZSA9IHN0eWxlW1wiZmxvdy1pbnRvXCJdO1xuICAgICAgICBpZiAoZmxvd05hbWUpIHtcbiAgICAgICAgICBjb25zdCBmbG93TmFtZVN0ciA9IGZsb3dOYW1lXG4gICAgICAgICAgICAuZXZhbHVhdGUoY29udGV4dCwgXCJmbG93LWludG9cIilcbiAgICAgICAgICAgIC50b1N0cmluZygpO1xuICAgICAgICAgIGNvbnN0IG5ld0Zsb3dDaHVuayA9IHRoaXMuZW5jb3VudGVyZWRGbG93RWxlbWVudChcbiAgICAgICAgICAgIGZsb3dOYW1lU3RyLFxuICAgICAgICAgICAgc3R5bGUsXG4gICAgICAgICAgICBlbGVtLFxuICAgICAgICAgICAgdGhpcy5sYXN0T2Zmc2V0LFxuICAgICAgICAgICk7XG4gICAgICAgICAgdGhpcy5wcmltYXJ5ID0gISF0aGlzLnByaW1hcnlGbG93c1tmbG93TmFtZVN0cl07XG4gICAgICAgICAgYm94ID0gdGhpcy5ib3hTdGFjay5wdXNoKFxuICAgICAgICAgICAgc3R5bGUsXG4gICAgICAgICAgICB0aGlzLmxhc3RPZmZzZXQsXG4gICAgICAgICAgICBlbGVtID09PSB0aGlzLnJvb3QsXG4gICAgICAgICAgICBuZXdGbG93Q2h1bmssXG4gICAgICAgICAgKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBib3ggPSB0aGlzLmJveFN0YWNrLnB1c2goc3R5bGUsIHRoaXMubGFzdE9mZnNldCwgZWxlbSA9PT0gdGhpcy5yb290KTtcblxuICAgICAgICAgIC8vIEZvciBub3QgaWdub3JpbmcgYnJlYWstYmVmb3JlIG9uIDpyb290IChpc3N1ZSAjNjY2KVxuICAgICAgICAgIGlmIChlbGVtID09PSB0aGlzLnhtbGRvYy5ib2R5KSB7XG4gICAgICAgICAgICBib3guYnJlYWtCZWZvcmUgPSBCcmVhay5yZXNvbHZlRWZmZWN0aXZlQnJlYWtWYWx1ZShcbiAgICAgICAgICAgICAgYm94LmZsb3dDaHVuay5icmVha0JlZm9yZSxcbiAgICAgICAgICAgICAgYm94LmJyZWFrQmVmb3JlLFxuICAgICAgICAgICAgKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgYmxvY2tTdGFydE9mZnNldCA9IHRoaXMuYm94U3RhY2submVhcmVzdEJsb2NrU3RhcnRPZmZzZXQoYm94KTtcbiAgICAgICAgdGhpcy5yZWdpc3RlckZvcmNlZEJyZWFrT2Zmc2V0KFxuICAgICAgICAgIGJveC5icmVha0JlZm9yZSxcbiAgICAgICAgICBibG9ja1N0YXJ0T2Zmc2V0LFxuICAgICAgICAgIGJveC5mbG93TmFtZSxcbiAgICAgICAgKTtcbiAgICAgICAgaWYgKGJveC5iZWZvcmVCb3gpIHtcbiAgICAgICAgICBjb25zdCBiZWZvcmVQc2V1ZG9CcmVha0FmdGVyID0gYm94LmJlZm9yZUJveC5nZXRCcmVha1ZhbHVlKFwiYWZ0ZXJcIik7XG4gICAgICAgICAgdGhpcy5yZWdpc3RlckZvcmNlZEJyZWFrT2Zmc2V0KFxuICAgICAgICAgICAgYmVmb3JlUHNldWRvQnJlYWtBZnRlcixcbiAgICAgICAgICAgIGJveC5iZWZvcmVCb3guYXRCbG9ja1N0YXJ0ID8gYmxvY2tTdGFydE9mZnNldCA6IGJveC5vZmZzZXQsXG4gICAgICAgICAgICBib3guZmxvd05hbWUsXG4gICAgICAgICAgKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAodGhpcy5wcmltYXJ5KSB7XG4gICAgICAgICAgaWYgKGJveC5kaXNwbGF5VmFsdWUoKSA9PT0gQ3NzLmlkZW50Lm5vbmUpIHtcbiAgICAgICAgICAgIHRoaXMucHJpbWFyeSA9IGZhbHNlO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBpZiAoVklWTElPU1RZTEVfREVCVUcpIHtcbiAgICAgICAgICBjb25zdCBvZmZzZXQgPSB0aGlzLnhtbGRvYy5nZXRFbGVtZW50T2Zmc2V0KHRoaXMubGFzdCBhcyBFbGVtZW50KTtcbiAgICAgICAgICBpZiAob2Zmc2V0ICE9IHRoaXMubGFzdE9mZnNldCkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiSW5jb25zaXN0ZW50IG9mZnNldFwiKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5zdHlsZU1hcFtgZSR7dGhpcy5sYXN0T2Zmc2V0fWBdID0gc3R5bGU7XG4gICAgICAgIHRoaXMubGFzdE9mZnNldCsrO1xuICAgICAgICBpZiAodGhpcy5wcmltYXJ5KSB7XG4gICAgICAgICAgdGhpcy5vZmZzZXRNYXAuYWRkU3R1Y2tSYW5nZSh0aGlzLmxhc3RPZmZzZXQpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHRoaXMub2Zmc2V0TWFwLmFkZFNsaXBwZWRSYW5nZSh0aGlzLmxhc3RPZmZzZXQpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChzdGFydE9mZnNldCA8IHRoaXMubGFzdE9mZnNldCkge1xuICAgICAgICAgIGlmICh0YXJnZXRTbGlwcGVkT2Zmc2V0IDwgMCkge1xuICAgICAgICAgICAgc2xpcHBlZE9mZnNldCA9IHRoaXMub2Zmc2V0TWFwLnNsaXBwZWRCeUZpeGVkKHN0YXJ0T2Zmc2V0KTtcbiAgICAgICAgICAgIHRhcmdldFNsaXBwZWRPZmZzZXQgPSBzbGlwcGVkT2Zmc2V0ICsgbG9va3VwO1xuICAgICAgICAgIH1cbiAgICAgICAgICBpZiAodGFyZ2V0U2xpcHBlZE9mZnNldCA8PSB0aGlzLm9mZnNldE1hcC5nZXRNYXhTbGlwcGVkKCkpIHtcbiAgICAgICAgICAgIC8vIGdvdCB0byB0aGUgZGVzaXJlZCBwb2ludFxuICAgICAgICAgICAgcmV0dXJuIHRoaXMub2Zmc2V0TWFwLmZpeGVkQnlTbGlwcGVkKHRhcmdldFNsaXBwZWRPZmZzZXQpO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAgKiBAb3ZlcnJpZGVcbiAgICovXG4gIGdldFN0eWxlKGVsZW1lbnQ6IEVsZW1lbnQsIGRlZXA6IGJvb2xlYW4pOiBDc3NDYXNjYWRlLkVsZW1lbnRTdHlsZSB7XG4gICAgbGV0IG9mZnNldCA9IHRoaXMueG1sZG9jLmdldEVsZW1lbnRPZmZzZXQoZWxlbWVudCk7XG4gICAgY29uc3Qga2V5ID0gYGUke29mZnNldH1gO1xuICAgIGlmIChkZWVwKSB7XG4gICAgICBvZmZzZXQgPSB0aGlzLnhtbGRvYy5nZXROb2RlT2Zmc2V0KGVsZW1lbnQsIDAsIHRydWUpO1xuICAgIH1cbiAgICBpZiAodGhpcy5sYXN0T2Zmc2V0IDw9IG9mZnNldCkge1xuICAgICAgdGhpcy5zdHlsZVVudGlsKG9mZnNldCwgMCk7XG4gICAgfVxuICAgIHJldHVybiB0aGlzLnN0eWxlTWFwW2tleV07XG4gIH1cblxuICAvKipcbiAgICogQG92ZXJyaWRlXG4gICAqL1xuICBwcm9jZXNzQ29udGVudChlbGVtZW50OiBFbGVtZW50LCBzdHlsZXM6IHsgW2tleTogc3RyaW5nXTogQ3NzLlZhbCB9KSB7fVxufVxuXG5leHBvcnQgY29uc3QgY29sdW1uUHJvcHMgPSBbXCJjb2x1bW4tY291bnRcIiwgXCJjb2x1bW4td2lkdGhcIiwgXCJjb2x1bW4tZmlsbFwiXTtcbiIsIi8qKlxuICogQ29weXJpZ2h0IDIwMTMgR29vZ2xlLCBJbmMuXG4gKiBDb3B5cmlnaHQgMjAxNSBUcmltLW1hcmtzIEluYy5cbiAqIENvcHlyaWdodCAyMDE5IFZpdmxpb3N0eWxlIEZvdW5kYXRpb25cbiAqXG4gKiBWaXZsaW9zdHlsZS5qcyBpcyBmcmVlIHNvZnR3YXJlOiB5b3UgY2FuIHJlZGlzdHJpYnV0ZSBpdCBhbmQvb3IgbW9kaWZ5XG4gKiBpdCB1bmRlciB0aGUgdGVybXMgb2YgdGhlIEdOVSBBZmZlcm8gR2VuZXJhbCBQdWJsaWMgTGljZW5zZSBhcyBwdWJsaXNoZWQgYnlcbiAqIHRoZSBGcmVlIFNvZnR3YXJlIEZvdW5kYXRpb24sIGVpdGhlciB2ZXJzaW9uIDMgb2YgdGhlIExpY2Vuc2UsIG9yXG4gKiAoYXQgeW91ciBvcHRpb24pIGFueSBsYXRlciB2ZXJzaW9uLlxuICpcbiAqIFZpdmxpb3N0eWxlLmpzIGlzIGRpc3RyaWJ1dGVkIGluIHRoZSBob3BlIHRoYXQgaXQgd2lsbCBiZSB1c2VmdWwsXG4gKiBidXQgV0lUSE9VVCBBTlkgV0FSUkFOVFk7IHdpdGhvdXQgZXZlbiB0aGUgaW1wbGllZCB3YXJyYW50eSBvZlxuICogTUVSQ0hBTlRBQklMSVRZIG9yIEZJVE5FU1MgRk9SIEEgUEFSVElDVUxBUiBQVVJQT1NFLiAgU2VlIHRoZVxuICogR05VIEFmZmVybyBHZW5lcmFsIFB1YmxpYyBMaWNlbnNlIGZvciBtb3JlIGRldGFpbHMuXG4gKlxuICogWW91IHNob3VsZCBoYXZlIHJlY2VpdmVkIGEgY29weSBvZiB0aGUgR05VIEFmZmVybyBHZW5lcmFsIFB1YmxpYyBMaWNlbnNlXG4gKiBhbG9uZyB3aXRoIFZpdmxpb3N0eWxlLmpzLiAgSWYgbm90LCBzZWUgPGh0dHA6Ly93d3cuZ251Lm9yZy9saWNlbnNlcy8+LlxuICpcbiAqIEBmaWxlb3ZlcnZpZXcgRm9udCAtIERlYWwgd2l0aCBlbWJlZGRlZCBmb250cy5cbiAqL1xuaW1wb3J0ICogYXMgQmFzZSBmcm9tIFwiLi9iYXNlXCI7XG5pbXBvcnQgKiBhcyBDc3MgZnJvbSBcIi4vY3NzXCI7XG5pbXBvcnQgKiBhcyBDc3NDYXNjYWRlIGZyb20gXCIuL2Nzcy1jYXNjYWRlXCI7XG5pbXBvcnQgKiBhcyBFeHBycyBmcm9tIFwiLi9leHByc1wiO1xuaW1wb3J0ICogYXMgTG9nZ2luZyBmcm9tIFwiLi9sb2dnaW5nXCI7XG5pbXBvcnQgKiBhcyBOZXQgZnJvbSBcIi4vbmV0XCI7XG5pbXBvcnQgKiBhcyBUYXNrIGZyb20gXCIuL3Rhc2tcIjtcbmltcG9ydCAqIGFzIFRhc2tVdGlsIGZyb20gXCIuL3Rhc2stdXRpbFwiO1xuXG5leHBvcnQgY29uc3QgdHJhaXRQcm9wczogeyBba2V5OiBzdHJpbmddOiBDc3MuVmFsIH0gPSB7XG4gIFwiZm9udC1zdHlsZVwiOiBDc3MuaWRlbnQubm9ybWFsLFxuICBcImZvbnQtdmFyaWFudFwiOiBDc3MuaWRlbnQubm9ybWFsLFxuICBcImZvbnQtd2VpZ2h0XCI6IENzcy5pZGVudC5ub3JtYWwsXG59O1xuXG5leHBvcnQgY29uc3QgYm9ndXNGb250RGF0YSA9IGBPVFRPJHtuZXcgRGF0ZSgpLnZhbHVlT2YoKX1gO1xuXG5leHBvcnQgbGV0IGJvZ3VzRm9udENvdW50ZXI6IG51bWJlciA9IDE7XG5cbmV4cG9ydCBmdW5jdGlvbiBtYWtlRm9udFRyYWl0S2V5KHByb3BlcnRpZXM6IHtcbiAgW2tleTogc3RyaW5nXTogQ3NzLlZhbDtcbn0pOiBzdHJpbmcge1xuICBjb25zdCBzYiA9IG5ldyBCYXNlLlN0cmluZ0J1ZmZlcigpO1xuICBmb3IgKGNvbnN0IHByb3AgaW4gdHJhaXRQcm9wcykge1xuICAgIHNiLmFwcGVuZChcIiBcIik7XG4gICAgc2IuYXBwZW5kKHByb3BlcnRpZXNbcHJvcF0udG9TdHJpbmcoKSk7XG4gIH1cbiAgcmV0dXJuIHNiLnRvU3RyaW5nKCk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBmaWxsRGVmYXVsdHMocHJvcGVydGllczogeyBba2V5OiBzdHJpbmddOiBDc3MuVmFsIH0pOiB2b2lkIHtcbiAgZm9yIChjb25zdCBwcm9wIGluIHRyYWl0UHJvcHMpIHtcbiAgICBpZiAoIXByb3BlcnRpZXNbcHJvcF0pIHtcbiAgICAgIHByb3BlcnRpZXNbcHJvcF0gPSB0cmFpdFByb3BzW3Byb3BdO1xuICAgIH1cbiAgfVxufVxuXG5leHBvcnQgZnVuY3Rpb24gcHJlcGFyZVByb3BlcnRpZXMoXG4gIHByb3BlcnRpZXM6IENzc0Nhc2NhZGUuRWxlbWVudFN0eWxlLFxuICBjb250ZXh0OiBFeHBycy5Db250ZXh0LFxuKTogeyBba2V5OiBzdHJpbmddOiBDc3MuVmFsIH0ge1xuICBjb25zdCByZXN1bHQgPSB7fSBhcyB7IFtrZXk6IHN0cmluZ106IENzcy5WYWwgfTtcbiAgZm9yIChjb25zdCBwcm9wIGluIHByb3BlcnRpZXMpIHtcbiAgICByZXN1bHRbcHJvcF0gPSBDc3NDYXNjYWRlLmdldFByb3AocHJvcGVydGllcywgcHJvcCkuZXZhbHVhdGUoY29udGV4dCwgcHJvcCk7XG4gIH1cbiAgZmlsbERlZmF1bHRzKHJlc3VsdCk7XG4gIHJldHVybiByZXN1bHQ7XG59XG5cbi8qKlxuICogQSBmb250IGRlY2xhcmVkIGluIGEgZm9udC1mYWNlIHJ1bGUuXG4gKi9cbmV4cG9ydCBjbGFzcyBGYWNlIHtcbiAgZm9udFRyYWl0S2V5OiBzdHJpbmc7XG4gIHNyYzogc3RyaW5nIHwgbnVsbDtcbiAgYmxvYlVSTHM6IHN0cmluZ1tdID0gW107XG4gIGJsb2JzOiBCbG9iW10gPSBbXTtcbiAgZmFtaWx5OiBzdHJpbmcgfCBudWxsO1xuXG4gIGNvbnN0cnVjdG9yKHB1YmxpYyByZWFkb25seSBwcm9wZXJ0aWVzOiB7IFtrZXk6IHN0cmluZ106IENzcy5WYWwgfSkge1xuICAgIHRoaXMuZm9udFRyYWl0S2V5ID0gbWFrZUZvbnRUcmFpdEtleSh0aGlzLnByb3BlcnRpZXMpO1xuICAgIHRoaXMuc3JjID0gdGhpcy5wcm9wZXJ0aWVzW1wic3JjXCJdXG4gICAgICA/IHRoaXMucHJvcGVydGllc1tcInNyY1wiXS50b1N0cmluZygpXG4gICAgICA6IG51bGw7XG4gICAgY29uc3QgZmFtaWx5ID0gdGhpcy5wcm9wZXJ0aWVzW1wiZm9udC1mYW1pbHlcIl07XG4gICAgdGhpcy5mYW1pbHkgPSBmYW1pbHkgPyBmYW1pbHkuc3RyaW5nVmFsdWUoKSA6IG51bGw7XG4gIH1cblxuICAvKipcbiAgICogQ2hlY2sgaWYgZm9udCB0cmFpdHMgYXJlIHRoZSBzYW1lIGZvciB0d28gZm9udCBmYWNlc1xuICAgKi9cbiAgdHJhaXRzRXF1YWwob3RoZXI6IEZhY2UpOiBib29sZWFuIHtcbiAgICByZXR1cm4gdGhpcy5mb250VHJhaXRLZXkgPT0gb3RoZXIuZm9udFRyYWl0S2V5O1xuICB9XG5cbiAgLyoqXG4gICAqIENyZWF0ZSBcImF0XCIgZm9udC1mYWNlIHJ1bGUuXG4gICAqL1xuICBtYWtlQXRSdWxlKHNyYzogc3RyaW5nLCBmb250Qnl0ZXM6IEJsb2IpOiBzdHJpbmcge1xuICAgIGNvbnN0IHNiID0gbmV3IEJhc2UuU3RyaW5nQnVmZmVyKCk7XG4gICAgc2IuYXBwZW5kKFwiQGZvbnQtZmFjZSB7XFxuICBmb250LWZhbWlseTogXCIpO1xuICAgIHNiLmFwcGVuZCh0aGlzLmZhbWlseSBhcyBzdHJpbmcpO1xuICAgIHNiLmFwcGVuZChcIjtcXG4gIFwiKTtcbiAgICBmb3IgKGNvbnN0IHByb3AgaW4gdHJhaXRQcm9wcykge1xuICAgICAgc2IuYXBwZW5kKHByb3ApO1xuICAgICAgc2IuYXBwZW5kKFwiOiBcIik7XG4gICAgICB0aGlzLnByb3BlcnRpZXNbcHJvcF0uYXBwZW5kVG8oc2IsIHRydWUpO1xuICAgICAgc2IuYXBwZW5kKFwiO1xcbiAgXCIpO1xuICAgIH1cbiAgICBpZiAoZm9udEJ5dGVzKSB7XG4gICAgICBzYi5hcHBlbmQoJ3NyYzogdXJsKFwiJyk7XG4gICAgICBjb25zdCBibG9iVVJMID0gTmV0LmNyZWF0ZU9iamVjdFVSTChmb250Qnl0ZXMpO1xuICAgICAgc2IuYXBwZW5kKGJsb2JVUkwpO1xuICAgICAgdGhpcy5ibG9iVVJMcy5wdXNoKGJsb2JVUkwpO1xuICAgICAgdGhpcy5ibG9icy5wdXNoKGZvbnRCeXRlcyk7XG4gICAgICBzYi5hcHBlbmQoJ1wiKScpO1xuICAgIH0gZWxzZSB7XG4gICAgICBzYi5hcHBlbmQoXCJzcmM6IFwiKTtcbiAgICAgIHNiLmFwcGVuZChzcmMpO1xuICAgIH1cbiAgICBzYi5hcHBlbmQoXCI7XFxufVxcblwiKTtcbiAgICByZXR1cm4gc2IudG9TdHJpbmcoKTtcbiAgfVxufVxuXG4vKipcbiAqIFNldCBvZiB0aGUgZm9udHMgZGVjbGFyZWQgaW4gYWxsIHN0eWxlc2hlZXRzIG9mIGEgZG9jdW1lbnQuXG4gKiBAcGFyYW0gZGVvYmZ1c2NhdG9yIGZ1bmN0aW9uXG4gKiAgICAgdGhhdCB0YWtlcyB1cmwgYW5kIHJldHVybnMgZGF0YSBkZW9iZnVzY2F0b3JcbiAqL1xuZXhwb3J0IGNsYXNzIERvY3VtZW50RmFjZXMge1xuICAvKipcbiAgICogTWFwcyBzb3VyY2UgZm9udCBmYW1pbHkgbmFtZXMgdG8gdGhlIGZhbWlseSBuYW1lcyB1c2VkIGluIHRoZSBIVE1MIHZpZXcuXG4gICAqL1xuICBmYW1pbHlNYXAgPSB7fSBhcyB7IFtrZXk6IHN0cmluZ106IHN0cmluZyB9O1xuXG4gIGNvbnN0cnVjdG9yKFxuICAgIHB1YmxpYyByZWFkb25seSBkZW9iZnVzY2F0b3I6XG4gICAgICB8ICgocDE6IHN0cmluZykgPT4gKChwMTogQmxvYikgPT4gVGFzay5SZXN1bHQ8QmxvYj4pIHwgbnVsbClcbiAgICAgIHwgbnVsbCxcbiAgKSB7fVxuXG4gIHJlZ2lzdGVyRmFtaWx5KHNyY0ZhY2U6IEZhY2UsIHZpZXdGYWNlOiBGYWNlKTogdm9pZCB7XG4gICAgY29uc3Qgc3JjRmFtaWx5ID0gc3JjRmFjZS5mYW1pbHkgYXMgc3RyaW5nO1xuICAgIGNvbnN0IHZpZXdGYW1pbHlGcm9tU3JjID0gdGhpcy5mYW1pbHlNYXBbc3JjRmFtaWx5XTtcbiAgICBjb25zdCB2aWV3RmFtaWx5RnJvbVZpZXcgPSB2aWV3RmFjZS5mYW1pbHk7XG4gICAgaWYgKHZpZXdGYW1pbHlGcm9tU3JjKSB7XG4gICAgICBpZiAodmlld0ZhbWlseUZyb21TcmMgIT0gdmlld0ZhbWlseUZyb21WaWV3KSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcihgRV9GT05UX0ZBTUlMWV9JTkNPTlNJU1RFTlQgJHtzcmNGYWNlLmZhbWlseX1gKTtcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgdGhpcy5mYW1pbHlNYXBbc3JjRmFtaWx5XSA9IHZpZXdGYW1pbHlGcm9tVmlldyBhcyBzdHJpbmc7XG4gICAgfVxuICB9XG5cbiAgZmlsdGVyRm9udEZhbWlseSh2YWw6IENzcy5WYWwpOiBDc3MuVmFsIHtcbiAgICBpZiAodmFsIGluc3RhbmNlb2YgQ3NzLkNvbW1hTGlzdCkge1xuICAgICAgY29uc3QgbGlzdCA9ICh2YWwgYXMgQ3NzLkNvbW1hTGlzdCkudmFsdWVzO1xuICAgICAgY29uc3QgbmV3VmFsdWVzID0gW10gYXMgQ3NzLlZhbFtdO1xuICAgICAgZm9yIChjb25zdCB2IG9mIGxpc3QpIHtcbiAgICAgICAgY29uc3QgciA9IHRoaXMuZmFtaWx5TWFwW3Yuc3RyaW5nVmFsdWUoKV07XG4gICAgICAgIGlmIChyKSB7XG4gICAgICAgICAgbmV3VmFsdWVzLnB1c2goQ3NzLmdldE5hbWUocikpO1xuICAgICAgICB9XG4gICAgICAgIG5ld1ZhbHVlcy5wdXNoKHYpO1xuICAgICAgfVxuICAgICAgcmV0dXJuIG5ldyBDc3MuQ29tbWFMaXN0KG5ld1ZhbHVlcyk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGNvbnN0IHJmID0gdGhpcy5mYW1pbHlNYXBbdmFsLnN0cmluZ1ZhbHVlKCldO1xuICAgICAgaWYgKHJmKSB7XG4gICAgICAgIHJldHVybiBuZXcgQ3NzLkNvbW1hTGlzdChbQ3NzLmdldE5hbWUocmYpLCB2YWxdKTtcbiAgICAgIH1cbiAgICAgIHJldHVybiB2YWw7XG4gICAgfVxuICB9XG59XG5cbi8qKlxuICogT2JqZWN0IHRoYXQgbG9hZHMgZm9udHMgaW4gYSBkb2N1bWVudCBhbmQgYWxsb2NhdGVzIGZvbnQgZmFtaWxpZXMgZm9yIHRoZW1cbiAqIGluIHRoZSB2aWV3IGRvY3VtZW50XG4gKiBAcGFyYW0gaGVhZCB3aGVyZSB0byBhZGQgc3R5bGVzIGluIHRoZSB2aWV3IGRvY3VtZW50IChub3JtYWxseSBoZWFkIGVsZW1lbnQpXG4gKiBAcGFyYW0gYm9keSB3aGVyZSB0byBwcm9iZSB0ZXh0IGluIHRoZSB2aWV3IGRvY3VtZW50IChub3JtYWxseSBib2R5IGVsZW1lbnQpXG4gKi9cbmV4cG9ydCBjbGFzcyBNYXBwZXIge1xuICAvKipcbiAgICogTWFwcyBGYWNlLnNyYyB0byBhbiBlbnRyeSBmb3IgYW4gYWxyZWFkeS1sb2FkZWQgZm9udC5cbiAgICovXG4gIHNyY1VSTE1hcDogeyBba2V5OiBzdHJpbmddOiBUYXNrVXRpbC5GZXRjaGVyPEZhY2U+IH0gPSB7fTtcbiAgZmFtaWx5UHJlZml4OiBzdHJpbmc7XG4gIGZhbWlseUNvdW50ZXI6IG51bWJlciA9IDA7XG5cbiAgY29uc3RydWN0b3IoXG4gICAgcHVibGljIHJlYWRvbmx5IGhlYWQ6IEVsZW1lbnQsXG4gICAgcHVibGljIHJlYWRvbmx5IGJvZHk6IEVsZW1lbnQsXG4gICAgb3B0X2ZhbWlseVByZWZpeD86IHN0cmluZyxcbiAgKSB7XG4gICAgdGhpcy5mYW1pbHlQcmVmaXggPSBvcHRfZmFtaWx5UHJlZml4IHx8IFwiRm50X1wiO1xuICB9XG5cbiAgZ2V0Vmlld0ZvbnRGYW1pbHkoc3JjRmFjZTogRmFjZSwgZG9jdW1lbnRGYWNlczogRG9jdW1lbnRGYWNlcyk6IHN0cmluZyB7XG4gICAgY29uc3Qgc3JjRmFtaWx5ID0gc3JjRmFjZS5mYW1pbHkgYXMgc3RyaW5nO1xuICAgIGxldCB2aWV3RmFtaWx5ID0gZG9jdW1lbnRGYWNlcy5mYW1pbHlNYXBbc3JjRmFtaWx5XTtcbiAgICBpZiAodmlld0ZhbWlseSkge1xuICAgICAgcmV0dXJuIHZpZXdGYW1pbHk7XG4gICAgfVxuICAgIHZpZXdGYW1pbHkgPSB0aGlzLmZhbWlseVByZWZpeCArICsrdGhpcy5mYW1pbHlDb3VudGVyO1xuICAgIGRvY3VtZW50RmFjZXMuZmFtaWx5TWFwW3NyY0ZhbWlseV0gPSB2aWV3RmFtaWx5O1xuICAgIHJldHVybiB2aWV3RmFtaWx5O1xuICB9XG5cbiAgLyoqXG4gICAqIEBwYXJhbSBmb250Qnl0ZXMgZGVvYmZ1c2NhdGVkIGZvbnQgYnl0ZXMgKGlmIGRlb2JmdXNjYXRpb24gaXMgbmVlZGVkKVxuICAgKi9cbiAgcHJpdmF0ZSBpbml0Rm9udChcbiAgICBzcmNGYWNlOiBGYWNlLFxuICAgIGZvbnRCeXRlczogQmxvYixcbiAgICBkb2N1bWVudEZhY2VzOiBEb2N1bWVudEZhY2VzLFxuICApOiBUYXNrLlJlc3VsdDxGYWNlPiB7XG4gICAgY29uc3QgZnJhbWU6IFRhc2suRnJhbWU8RmFjZT4gPSBUYXNrLm5ld0ZyYW1lKFwiaW5pdEZvbnRcIik7XG4gICAgY29uc3Qgc3JjID0gc3JjRmFjZS5zcmMgYXMgc3RyaW5nO1xuICAgIGNvbnN0IHByb3BzID0ge30gYXMgeyBba2V5OiBzdHJpbmddOiBDc3MuVmFsIH07XG4gICAgZm9yIChjb25zdCBwcm9wIGluIHRyYWl0UHJvcHMpIHtcbiAgICAgIHByb3BzW3Byb3BdID0gc3JjRmFjZS5wcm9wZXJ0aWVzW3Byb3BdO1xuICAgIH1cbiAgICBjb25zdCBmb250RmFtaWx5ID0gdGhpcy5nZXRWaWV3Rm9udEZhbWlseShzcmNGYWNlLCBkb2N1bWVudEZhY2VzKTtcbiAgICBwcm9wc1tcImZvbnQtZmFtaWx5XCJdID0gQ3NzLmdldE5hbWUoZm9udEZhbWlseSk7XG4gICAgY29uc3Qgdmlld0ZvbnRGYWNlID0gbmV3IEZhY2UocHJvcHMpO1xuICAgIGNvbnN0IHByb2JlID0gdGhpcy5ib2R5Lm93bmVyRG9jdW1lbnQuY3JlYXRlRWxlbWVudChcInNwYW5cIik7XG4gICAgcHJvYmUudGV4dENvbnRlbnQgPSBcIk1cIjtcbiAgICBjb25zdCBraWxsVGltZSA9IG5ldyBEYXRlKCkudmFsdWVPZigpICsgMTAwMDtcbiAgICBjb25zdCBzdHlsZSA9IHRoaXMuaGVhZC5vd25lckRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJzdHlsZVwiKTtcbiAgICBjb25zdCBib2d1c0RhdGEgPSBib2d1c0ZvbnREYXRhICsgYm9ndXNGb250Q291bnRlcisrO1xuICAgIHN0eWxlLnRleHRDb250ZW50ID0gdmlld0ZvbnRGYWNlLm1ha2VBdFJ1bGUoXCJcIiwgTmV0Lm1ha2VCbG9iKFtib2d1c0RhdGFdKSk7XG4gICAgdGhpcy5oZWFkLmFwcGVuZENoaWxkKHN0eWxlKTtcbiAgICBjb25zdCBwcm9iZUNvbnQgPSB0aGlzLmJvZHkub3duZXJEb2N1bWVudC5jcmVhdGVFbGVtZW50KFwic3BhblwiKTtcbiAgICBwcm9iZUNvbnQuc3R5bGUud2lkdGggPSBcIjBcIjtcbiAgICBwcm9iZUNvbnQuc3R5bGUuaGVpZ2h0ID0gXCIwXCI7XG4gICAgcHJvYmVDb250LnN0eWxlLm92ZXJmbG93ID0gXCJoaWRkZW5cIjtcbiAgICBwcm9iZUNvbnQuYXBwZW5kQ2hpbGQocHJvYmUpO1xuICAgIHRoaXMuYm9keS5hcHBlbmRDaGlsZChwcm9iZUNvbnQpO1xuICAgIHByb2JlLnN0eWxlLnZpc2liaWxpdHkgPSBcImhpZGRlblwiO1xuICAgIHByb2JlLnN0eWxlLmZvbnRGYW1pbHkgPSBmb250RmFtaWx5O1xuICAgIGZvciAoY29uc3QgcG5hbWUgaW4gdHJhaXRQcm9wcykge1xuICAgICAgQmFzZS5zZXRDU1NQcm9wZXJ0eShwcm9iZSwgcG5hbWUsIHByb3BzW3BuYW1lXS50b1N0cmluZygpKTtcbiAgICB9XG4gICAgY29uc3QgcmVjdCA9IHByb2JlLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpO1xuICAgIGNvbnN0IGluaXRXaWR0aCA9IHJlY3QucmlnaHQgLSByZWN0LmxlZnQ7XG4gICAgY29uc3QgaW5pdEhlaWdodCA9IHJlY3QuYm90dG9tIC0gcmVjdC50b3A7XG4gICAgc3R5bGUudGV4dENvbnRlbnQgPSB2aWV3Rm9udEZhY2UubWFrZUF0UnVsZShzcmMsIGZvbnRCeXRlcyk7XG4gICAgTG9nZ2luZy5sb2dnZXIuaW5mbyhcIlN0YXJ0aW5nIHRvIGxvYWQgZm9udDpcIiwgc3JjKTtcbiAgICBsZXQgbG9hZGVkID0gZmFsc2U7XG4gICAgZnJhbWVcbiAgICAgIC5sb29wKCgpID0+IHtcbiAgICAgICAgY29uc3QgcmVjdCA9IHByb2JlLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpO1xuICAgICAgICBjb25zdCBjdXJyV2lkdGggPSByZWN0LnJpZ2h0IC0gcmVjdC5sZWZ0O1xuICAgICAgICBjb25zdCBjdXJySGVpZ2h0ID0gcmVjdC5ib3R0b20gLSByZWN0LnRvcDtcbiAgICAgICAgaWYgKGluaXRXaWR0aCAhPSBjdXJyV2lkdGggfHwgaW5pdEhlaWdodCAhPSBjdXJySGVpZ2h0KSB7XG4gICAgICAgICAgbG9hZGVkID0gdHJ1ZTtcbiAgICAgICAgICByZXR1cm4gVGFzay5uZXdSZXN1bHQoZmFsc2UpO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IGN1cnJUaW1lID0gbmV3IERhdGUoKS52YWx1ZU9mKCk7XG4gICAgICAgIGlmIChjdXJyVGltZSA+IGtpbGxUaW1lKSB7XG4gICAgICAgICAgcmV0dXJuIFRhc2submV3UmVzdWx0KGZhbHNlKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gZnJhbWUuc2xlZXAoMTApO1xuICAgICAgfSlcbiAgICAgIC50aGVuKCgpID0+IHtcbiAgICAgICAgaWYgKGxvYWRlZCkge1xuICAgICAgICAgIExvZ2dpbmcubG9nZ2VyLmluZm8oXCJMb2FkZWQgZm9udDpcIiwgc3JjKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBMb2dnaW5nLmxvZ2dlci53YXJuKFwiRmFpbGVkIHRvIGxvYWQgZm9udDpcIiwgc3JjKTtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLmJvZHkucmVtb3ZlQ2hpbGQocHJvYmVDb250KTtcbiAgICAgICAgZnJhbWUuZmluaXNoKHZpZXdGb250RmFjZSk7XG4gICAgICB9KTtcbiAgICByZXR1cm4gZnJhbWUucmVzdWx0KCk7XG4gIH1cblxuICBsb2FkRm9udChcbiAgICBzcmNGYWNlOiBGYWNlLFxuICAgIGRvY3VtZW50RmFjZXM6IERvY3VtZW50RmFjZXMsXG4gICk6IFRhc2tVdGlsLkZldGNoZXI8RmFjZT4ge1xuICAgIGNvbnN0IHNyYyA9IHNyY0ZhY2Uuc3JjIGFzIHN0cmluZztcbiAgICBsZXQgZmV0Y2hlciA9IHRoaXMuc3JjVVJMTWFwW3NyY107XG4gICAgaWYgKGZldGNoZXIpIHtcbiAgICAgIGZldGNoZXIucGlnZ3liYWNrKCh2aWV3RmFjZVBhcmFtKSA9PiB7XG4gICAgICAgIGNvbnN0IHZpZXdGYWNlID0gdmlld0ZhY2VQYXJhbSBhcyBGYWNlO1xuICAgICAgICBpZiAoIXZpZXdGYWNlLnRyYWl0c0VxdWFsKHNyY0ZhY2UpKSB7XG4gICAgICAgICAgTG9nZ2luZy5sb2dnZXIud2FybihcIkVfRk9OVF9GQUNFX0lOQ09NUEFUSUJMRVwiLCBzcmNGYWNlLnNyYyk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgZG9jdW1lbnRGYWNlcy5yZWdpc3RlckZhbWlseShzcmNGYWNlLCB2aWV3RmFjZSk7XG4gICAgICAgICAgTG9nZ2luZy5sb2dnZXIud2FybihcIkZvdW5kIGFscmVhZHktbG9hZGVkIGZvbnQ6XCIsIHNyYyk7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgIH0gZWxzZSB7XG4gICAgICBmZXRjaGVyID0gbmV3IFRhc2tVdGlsLkZldGNoZXIoKCkgPT4ge1xuICAgICAgICBjb25zdCBmcmFtZTogVGFzay5GcmFtZTxGYWNlPiA9IFRhc2submV3RnJhbWUoXCJsb2FkRm9udFwiKTtcbiAgICAgICAgY29uc3QgZGVvYmZ1c2NhdG9yID0gZG9jdW1lbnRGYWNlcy5kZW9iZnVzY2F0b3JcbiAgICAgICAgICA/IGRvY3VtZW50RmFjZXMuZGVvYmZ1c2NhdG9yKHNyYylcbiAgICAgICAgICA6IG51bGw7XG4gICAgICAgIGlmIChkZW9iZnVzY2F0b3IpIHtcbiAgICAgICAgICBOZXQuYWpheChzcmMsIE5ldC5YTUxIdHRwUmVxdWVzdFJlc3BvbnNlVHlwZS5CTE9CKS50aGVuKCh4aHIpID0+IHtcbiAgICAgICAgICAgIGlmICgheGhyLnJlc3BvbnNlQmxvYikge1xuICAgICAgICAgICAgICBmcmFtZS5maW5pc2gobnVsbCk7XG4gICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGRlb2JmdXNjYXRvcih4aHIucmVzcG9uc2VCbG9iKS50aGVuKChmb250Qnl0ZXMpID0+IHtcbiAgICAgICAgICAgICAgdGhpcy5pbml0Rm9udChzcmNGYWNlLCBmb250Qnl0ZXMsIGRvY3VtZW50RmFjZXMpLnRoZW5GaW5pc2goXG4gICAgICAgICAgICAgICAgZnJhbWUsXG4gICAgICAgICAgICAgICk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICB9KTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICB0aGlzLmluaXRGb250KHNyY0ZhY2UsIG51bGwsIGRvY3VtZW50RmFjZXMpLnRoZW5GaW5pc2goZnJhbWUpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBmcmFtZS5yZXN1bHQoKTtcbiAgICAgIH0sIGBsb2FkRm9udCAke3NyY31gKTtcbiAgICAgIHRoaXMuc3JjVVJMTWFwW3NyY10gPSBmZXRjaGVyO1xuICAgICAgZmV0Y2hlci5zdGFydCgpO1xuICAgIH1cbiAgICByZXR1cm4gZmV0Y2hlcjtcbiAgfVxuXG4gIGZpbmRPckxvYWRGb250cyhcbiAgICBzcmNGYWNlczogRmFjZVtdLFxuICAgIGRvY3VtZW50RmFjZXM6IERvY3VtZW50RmFjZXMsXG4gICk6IFRhc2suUmVzdWx0PGJvb2xlYW4+IHtcbiAgICBjb25zdCBmZXRjaGVycyA9IFtdIGFzIFRhc2tVdGlsLkZldGNoZXI8RmFjZT5bXTtcbiAgICBmb3IgKGNvbnN0IHNyY0ZhY2Ugb2Ygc3JjRmFjZXMpIHtcbiAgICAgIGlmICghc3JjRmFjZS5zcmMgfHwgIXNyY0ZhY2UuZmFtaWx5KSB7XG4gICAgICAgIExvZ2dpbmcubG9nZ2VyLndhcm4oXCJFX0ZPTlRfRkFDRV9JTlZBTElEXCIpO1xuICAgICAgICBjb250aW51ZTtcbiAgICAgIH1cbiAgICAgIGZldGNoZXJzLnB1c2godGhpcy5sb2FkRm9udChzcmNGYWNlLCBkb2N1bWVudEZhY2VzKSk7XG4gICAgfVxuICAgIHJldHVybiBUYXNrVXRpbC53YWl0Rm9yRmV0Y2hlcnMoZmV0Y2hlcnMpO1xuICB9XG59XG4iLCIvKipcbiAqIENvcHlyaWdodCAyMDEzIEdvb2dsZSwgSW5jLlxuICogQ29weXJpZ2h0IDIwMTUgVHJpbS1tYXJrcyBJbmMuXG4gKiBDb3B5cmlnaHQgMjAxOSBWaXZsaW9zdHlsZSBGb3VuZGF0aW9uXG4gKlxuICogVml2bGlvc3R5bGUuanMgaXMgZnJlZSBzb2Z0d2FyZTogeW91IGNhbiByZWRpc3RyaWJ1dGUgaXQgYW5kL29yIG1vZGlmeVxuICogaXQgdW5kZXIgdGhlIHRlcm1zIG9mIHRoZSBHTlUgQWZmZXJvIEdlbmVyYWwgUHVibGljIExpY2Vuc2UgYXMgcHVibGlzaGVkIGJ5XG4gKiB0aGUgRnJlZSBTb2Z0d2FyZSBGb3VuZGF0aW9uLCBlaXRoZXIgdmVyc2lvbiAzIG9mIHRoZSBMaWNlbnNlLCBvclxuICogKGF0IHlvdXIgb3B0aW9uKSBhbnkgbGF0ZXIgdmVyc2lvbi5cbiAqXG4gKiBWaXZsaW9zdHlsZS5qcyBpcyBkaXN0cmlidXRlZCBpbiB0aGUgaG9wZSB0aGF0IGl0IHdpbGwgYmUgdXNlZnVsLFxuICogYnV0IFdJVEhPVVQgQU5ZIFdBUlJBTlRZOyB3aXRob3V0IGV2ZW4gdGhlIGltcGxpZWQgd2FycmFudHkgb2ZcbiAqIE1FUkNIQU5UQUJJTElUWSBvciBGSVRORVNTIEZPUiBBIFBBUlRJQ1VMQVIgUFVSUE9TRS4gIFNlZSB0aGVcbiAqIEdOVSBBZmZlcm8gR2VuZXJhbCBQdWJsaWMgTGljZW5zZSBmb3IgbW9yZSBkZXRhaWxzLlxuICpcbiAqIFlvdSBzaG91bGQgaGF2ZSByZWNlaXZlZCBhIGNvcHkgb2YgdGhlIEdOVSBBZmZlcm8gR2VuZXJhbCBQdWJsaWMgTGljZW5zZVxuICogYWxvbmcgd2l0aCBWaXZsaW9zdHlsZS5qcy4gIElmIG5vdCwgc2VlIDxodHRwOi8vd3d3LmdudS5vcmcvbGljZW5zZXMvPi5cbiAqXG4gKiBAZmlsZW92ZXJ2aWV3IFBhZ2VNYXN0ZXIgLSBEZWFsIHdpdGggcGFnZSBtYXN0ZXJzLCBwYXJ0aXRpb24gZ3JvdXBzLCBhbmQgcGFydGl0aW9ucy5cbiAqL1xuaW1wb3J0ICogYXMgQmFzZSBmcm9tIFwiLi9iYXNlXCI7XG5pbXBvcnQgKiBhcyBDc3MgZnJvbSBcIi4vY3NzXCI7XG5pbXBvcnQgKiBhcyBDc3NDYXNjYWRlIGZyb20gXCIuL2Nzcy1jYXNjYWRlXCI7XG5pbXBvcnQgKiBhcyBDc3NQYXJzZXIgZnJvbSBcIi4vY3NzLXBhcnNlclwiO1xuaW1wb3J0ICogYXMgQ3NzVmFsaWRhdG9yIGZyb20gXCIuL2Nzcy12YWxpZGF0b3JcIjtcbmltcG9ydCAqIGFzIEV4cHJzIGZyb20gXCIuL2V4cHJzXCI7XG5pbXBvcnQgKiBhcyBGb250IGZyb20gXCIuL2ZvbnRcIjtcbmltcG9ydCAqIGFzIFZ0cmVlIGZyb20gXCIuL3Z0cmVlXCI7XG5cbmV4cG9ydCBsZXQga2V5Q291bnQ6IG51bWJlciA9IDE7XG5cbi8qKlxuICogUmVwcmVzZW50IGFuIGF0LXJ1bGUgd2hpY2ggY3JlYXRlcyBhIHBhZ2UtbGV2ZWwgQ1NTIGJveCAocGFnZS1tYXN0ZXIsXG4gKiBwYXJ0aXRpb24sIGFuZCBwYXJ0aXRpb24tZ3JvdXApLlxuICovXG5leHBvcnQgYWJzdHJhY3QgY2xhc3MgUGFnZUJveDxcbiAgSSBleHRlbmRzIFBhZ2VCb3hJbnN0YW5jZSA9IFBhZ2VCb3hJbnN0YW5jZTxhbnk+XG4+IHtcbiAgLy8gc3R5bGVzIHNwZWNpZmllZCBpbiB0aGUgYXQtcnVsZVxuICBzcGVjaWZpZWQ6IENzc0Nhc2NhZGUuRWxlbWVudFN0eWxlID0ge307XG4gIGNoaWxkcmVuOiBQYWdlQm94W10gPSBbXTtcbiAgcGFnZU1hc3RlcjogUGFnZU1hc3RlciA9IG51bGw7XG4gIGluZGV4OiBudW1iZXIgPSAwO1xuICBrZXk6IHN0cmluZztcblxuICBwcm90ZWN0ZWQgX3Njb3BlOiBFeHBycy5MZXhpY2FsU2NvcGU7XG5cbiAgZ2V0IHNjb3BlKCk6IEV4cHJzLkxleGljYWxTY29wZSB7XG4gICAgcmV0dXJuIHRoaXMuX3Njb3BlO1xuICB9XG5cbiAgY29uc3RydWN0b3IoXG4gICAgc2NvcGU6IEV4cHJzLkxleGljYWxTY29wZSxcbiAgICBwdWJsaWMgcmVhZG9ubHkgbmFtZTogc3RyaW5nIHwgbnVsbCxcbiAgICBwdWJsaWMgcmVhZG9ubHkgcHNldWRvTmFtZTogc3RyaW5nIHwgbnVsbCxcbiAgICBwdWJsaWMgcmVhZG9ubHkgY2xhc3Nlczogc3RyaW5nW10sXG4gICAgcHVibGljIHJlYWRvbmx5IHBhcmVudDogUGFnZUJveCxcbiAgKSB7XG4gICAgdGhpcy5fc2NvcGUgPSBzY29wZTtcbiAgICB0aGlzLmtleSA9IGBwJHtrZXlDb3VudCsrfWA7XG4gICAgaWYgKHBhcmVudCkge1xuICAgICAgdGhpcy5pbmRleCA9IHBhcmVudC5jaGlsZHJlbi5sZW5ndGg7XG4gICAgICBwYXJlbnQuY2hpbGRyZW4ucHVzaCh0aGlzKTtcbiAgICB9XG4gIH1cblxuICBjcmVhdGVJbnN0YW5jZShwYXJlbnRJbnN0YW5jZTogUGFnZUJveEluc3RhbmNlKTogUGFnZUJveEluc3RhbmNlIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoXCJFX1VORVhQRUNURURfQ0FMTFwiKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBDbG9uZSB0aGUgUGFnZUJveC5cbiAgICogQHBhcmFtIHBhcmFtIHBhcmVudDogVGhlIHBhcmVudCBvZiB0aGUgY2xvbmVkIFBhZ2VCb3guXG4gICAqICAgICBwc2V1ZG9OYW1lOiBBc3NpZ24gdGhpcyB2YWx1ZSBhcyB0aGUgcHNldWRvTmFtZSBvZiB0aGUgY2xvbmVkIFBhZ2VCb3guXG4gICAqL1xuICBjbG9uZShwYXJhbTogeyBwYXJlbnQ/OiBQYWdlQm94OyBwc2V1ZG9OYW1lPzogc3RyaW5nIH0pOiBQYWdlQm94PEk+IHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoXCJFX1VORVhQRUNURURfQ0FMTFwiKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBDb3B5ICdzcGVjaWZpZWQnIHByb3BlcnRpZXMgdG8gYW5vdGhlciBpbnN0YW5jZS5cbiAgICogQHBhcmFtIGRlc3QgVGhlIFBhZ2VCb3ggaW50byB3aGljaCAnc3BlY2lmaWVkJyBwcm9wZXJ0aWVzIGFyZSBjb3BpZWRcbiAgICovXG4gIHByb3RlY3RlZCBjb3B5U3BlY2lmaWVkKGRlc3Q6IFBhZ2VCb3gpIHtcbiAgICBjb25zdCBzcGVjaWZpZWQgPSB0aGlzLnNwZWNpZmllZDtcbiAgICBjb25zdCBkZXN0U3BlY2lmaWVkID0gZGVzdC5zcGVjaWZpZWQ7XG4gICAgZm9yIChjb25zdCBwcm9wIGluIHNwZWNpZmllZCkge1xuICAgICAgaWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChzcGVjaWZpZWQsIHByb3ApKSB7XG4gICAgICAgIGRlc3RTcGVjaWZpZWRbcHJvcF0gPSBzcGVjaWZpZWRbcHJvcF07XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgLyoqXG4gICAqIENsb25lIGNoaWxkcmVuIHdpdGggdGhlIHNwZWNpZmllZCBQYWdlQm94IGFzIHRoZWlyIHBhcmVudC5cbiAgICovXG4gIHByb3RlY3RlZCBjbG9uZUNoaWxkcmVuKHBhcmVudDogUGFnZUJveCkge1xuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgdGhpcy5jaGlsZHJlbi5sZW5ndGg7IGkrKykge1xuICAgICAgLy8gdGhlIGNsb25lZCBjaGlsZCBpcyBhZGRlZCB0byBwYXJlbnQuY2hpbGRyZW4gaW4gdGhlIGNoaWxkIGNvbnN0cnVjdG9yLlxuICAgICAgdGhpcy5jaGlsZHJlbltpXS5jbG9uZSh7IHBhcmVudCB9KTtcbiAgICB9XG4gIH1cbn1cblxuLyoqXG4gKiBQYXJlbnQgb2YgYWxsIHBhZ2UgbWFzdGVyc1xuICovXG5leHBvcnQgY2xhc3MgUm9vdFBhZ2VCb3ggZXh0ZW5kcyBQYWdlQm94PFJvb3RQYWdlQm94SW5zdGFuY2U+IHtcbiAgY29uc3RydWN0b3Ioc2NvcGU6IEV4cHJzLkxleGljYWxTY29wZSkge1xuICAgIHN1cGVyKHNjb3BlLCBudWxsLCBudWxsLCBbXSwgbnVsbCk7XG4gICAgdGhpcy5zcGVjaWZpZWRbXCJ3aWR0aFwiXSA9IG5ldyBDc3NDYXNjYWRlLkNhc2NhZGVWYWx1ZShDc3MuZnVsbFdpZHRoLCAwKTtcbiAgICB0aGlzLnNwZWNpZmllZFtcImhlaWdodFwiXSA9IG5ldyBDc3NDYXNjYWRlLkNhc2NhZGVWYWx1ZShDc3MuZnVsbEhlaWdodCwgMCk7XG4gIH1cbn1cblxuZXhwb3J0IGNsYXNzIFBhZ2VNYXN0ZXJTY29wZSBleHRlbmRzIEV4cHJzLkxleGljYWxTY29wZSB7XG4gIGNvbnN0cnVjdG9yKHNjb3BlOiBFeHBycy5MZXhpY2FsU2NvcGUsIHB1YmxpYyBwYWdlTWFzdGVyOiBQYWdlTWFzdGVyKSB7XG4gICAgc3VwZXIoc2NvcGUsIHJlc29sdmVyKTtcbiAgICBjb25zdCBzZWxmID0gdGhpcztcbiAgICBmdW5jdGlvbiByZXNvbHZlcihxdWFsaWZpZWROYW1lLCBpc0Z1bmMpIHtcbiAgICAgIGNvbnN0IHIgPSBxdWFsaWZpZWROYW1lLm1hdGNoKC9eKFteLl0rKVxcLihbXi5dKykkLyk7XG4gICAgICBpZiAocikge1xuICAgICAgICBjb25zdCBrZXkgPSBzZWxmLnBhZ2VNYXN0ZXIua2V5TWFwW3JbMV1dO1xuICAgICAgICBpZiAoa2V5KSB7XG4gICAgICAgICAgY29uc3QgaG9sZGVyID0gdGhpcyBhcyBJbnN0YW5jZUhvbGRlcjtcbiAgICAgICAgICBjb25zdCBib3hJbnN0YW5jZSA9IGhvbGRlci5sb29rdXBJbnN0YW5jZShrZXkpO1xuICAgICAgICAgIGlmIChib3hJbnN0YW5jZSkge1xuICAgICAgICAgICAgaWYgKGlzRnVuYykge1xuICAgICAgICAgICAgICByZXR1cm4gYm94SW5zdGFuY2UucmVzb2x2ZUZ1bmMoclsyXSk7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICByZXR1cm4gYm94SW5zdGFuY2UucmVzb2x2ZU5hbWUoclsyXSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG4gICAgICByZXR1cm4gbnVsbDtcbiAgICB9XG4gIH1cbn1cblxuLyoqXG4gKiBSZXByZXNlbnQgYSBwYWdlLW1hc3RlciBydWxlXG4gKi9cbmV4cG9ydCBjbGFzcyBQYWdlTWFzdGVyPFxuICBJIGV4dGVuZHMgUGFnZU1hc3Rlckluc3RhbmNlID0gUGFnZU1hc3Rlckluc3RhbmNlPGFueT5cbj4gZXh0ZW5kcyBQYWdlQm94PEk+IHtcbiAgcGFnZU1hc3RlcjogUGFnZU1hc3RlcjtcbiAga2V5TWFwOiB7IFtrZXk6IHN0cmluZ106IHN0cmluZyB9ID0ge307XG5cbiAgY29uc3RydWN0b3IoXG4gICAgc2NvcGU6IEV4cHJzLkxleGljYWxTY29wZSxcbiAgICBuYW1lOiBzdHJpbmcgfCBudWxsLFxuICAgIHBzZXVkb05hbWU6IHN0cmluZyB8IG51bGwsXG4gICAgY2xhc3Nlczogc3RyaW5nW10sXG4gICAgcGFyZW50OiBSb290UGFnZUJveCxcbiAgICBwdWJsaWMgcmVhZG9ubHkgY29uZGl0aW9uOiBFeHBycy5WYWwsXG4gICAgcHVibGljIHJlYWRvbmx5IHNwZWNpZmljaXR5OiBudW1iZXIsXG4gICkge1xuICAgIHN1cGVyKHNjb3BlLCBuYW1lLCBwc2V1ZG9OYW1lLCBjbGFzc2VzLCBwYXJlbnQpO1xuICAgIC8vIGlmIFBhZ2VNYXN0ZXJTY29wZSBvYmplY3QgaXMgcGFzc2VkLCB1c2UgKHNoYXJlKSBpdC5cbiAgICBpZiAoIShzY29wZSBpbnN0YW5jZW9mIFBhZ2VNYXN0ZXJTY29wZSkpIHtcbiAgICAgIHRoaXMuX3Njb3BlID0gbmV3IFBhZ2VNYXN0ZXJTY29wZShzY29wZSwgdGhpcyk7XG4gICAgfVxuICAgIHRoaXMucGFnZU1hc3RlciA9IHRoaXM7XG4gICAgdGhpcy5zcGVjaWZpZWRbXCJ3aWR0aFwiXSA9IG5ldyBDc3NDYXNjYWRlLkNhc2NhZGVWYWx1ZShDc3MuZnVsbFdpZHRoLCAwKTtcbiAgICB0aGlzLnNwZWNpZmllZFtcImhlaWdodFwiXSA9IG5ldyBDc3NDYXNjYWRlLkNhc2NhZGVWYWx1ZShDc3MuZnVsbEhlaWdodCwgMCk7XG4gICAgdGhpcy5zcGVjaWZpZWRbXCJ3cmFwLWZsb3dcIl0gPSBuZXcgQ3NzQ2FzY2FkZS5DYXNjYWRlVmFsdWUoXG4gICAgICBDc3MuaWRlbnQuYXV0byxcbiAgICAgIDAsXG4gICAgKTtcbiAgICB0aGlzLnNwZWNpZmllZFtcInBvc2l0aW9uXCJdID0gbmV3IENzc0Nhc2NhZGUuQ2FzY2FkZVZhbHVlKFxuICAgICAgQ3NzLmlkZW50LnJlbGF0aXZlLFxuICAgICAgMCxcbiAgICApO1xuICAgIHRoaXMuc3BlY2lmaWVkW1wib3ZlcmZsb3dcIl0gPSBuZXcgQ3NzQ2FzY2FkZS5DYXNjYWRlVmFsdWUoXG4gICAgICBDc3MuaWRlbnQudmlzaWJsZSxcbiAgICAgIDAsXG4gICAgKTtcblxuICAgIC8vIFNoaWZ0IDFweCB0byB3b3JrYXJvdW5kIENocm9tZSBwcmludGluZyBidWdcbiAgICAvLyB0aGlzLnNwZWNpZmllZFtcInRvcFwiXSA9IG5ldyBDc3NDYXNjYWRlLkNhc2NhZGVWYWx1ZShuZXcgQ3NzLk51bWVyaWMoLTEsIFwicHhcIiksIDApO1xuICB9XG5cbiAgLyoqXG4gICAqIEBvdmVycmlkZVxuICAgKi9cbiAgY3JlYXRlSW5zdGFuY2UocGFyZW50SW5zdGFuY2UpOiBQYWdlQm94SW5zdGFuY2Uge1xuICAgIHJldHVybiBuZXcgUGFnZU1hc3Rlckluc3RhbmNlKHBhcmVudEluc3RhbmNlLCB0aGlzKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBAb3ZlcnJpZGVcbiAgICovXG4gIGNsb25lKHBhcmFtKTogUGFnZU1hc3RlciB7XG4gICAgLy8gVGhlIGNsb25lZCBwYWdlIG1hc3RlciBzaGFyZXMgdGhlIHNhbWUgc2NvcGUgb2JqZWN0IHdpdGggdGhlIG9yaWdpbmFsXG4gICAgLy8gb25lLlxuICAgIGNvbnN0IGNsb25lZCA9IG5ldyBQYWdlTWFzdGVyKFxuICAgICAgdGhpcy5zY29wZSxcbiAgICAgIHRoaXMubmFtZSxcbiAgICAgIHBhcmFtLnBzZXVkb05hbWUgfHwgdGhpcy5wc2V1ZG9OYW1lLFxuICAgICAgdGhpcy5jbGFzc2VzLFxuICAgICAgdGhpcy5wYXJlbnQgYXMgUm9vdFBhZ2VCb3gsXG4gICAgICB0aGlzLmNvbmRpdGlvbixcbiAgICAgIHRoaXMuc3BlY2lmaWNpdHksXG4gICAgKTtcbiAgICB0aGlzLmNvcHlTcGVjaWZpZWQoY2xvbmVkKTtcbiAgICB0aGlzLmNsb25lQ2hpbGRyZW4oY2xvbmVkKTtcbiAgICByZXR1cm4gY2xvbmVkO1xuICB9XG5cbiAgLyoqXG4gICAqIFBvaW50IHRoZSBwYWdlTWFzdGVyIHJlZmVyZW5jZSBpbiB0aGUgUGFnZU1hc3RlclNjb3BlIHRvIHRoZSBjdXJyZW50IHBhZ2VcbiAgICogbWFzdGVyLiBUaGlzIGlzIG5lZWRlZCB3aGVuIGEgcGFnZSBtYXN0ZXIgaXMgY2xvbmVkIGFuZCBzaGFyZXMgYSBjb21tb25cbiAgICogc2NvcGUgd2l0aCB0aGUgb3JpZ2luYWwgcGFnZSBtYXN0ZXIuIFNpbmNlIGV2ZXJ5IEV4cHJzLlZhbCB3aGljaCB0aGVcbiAgICogcGFnZSBtYXN0ZXIgaG9sZHMgaGFzIGEgcmVmZXJlbmNlIHRvIHRoZSBzY29wZSBhbmQgdXNlcyBpdCBmb3IgdmFyaWFibGVcbiAgICogcmVzb2x1dGlvbiwgdGhpcyByZWZlcmVuY2UgbXVzdCBiZSB1cGRhdGVkIHByb3Blcmx5IGJlZm9yZSB0aGUgcGFnZSBtYXN0ZXJcbiAgICogaW5zdGFuY2UgaXMgdXNlZC5cbiAgICovXG4gIHJlc2V0U2NvcGUoKSB7XG4gICAgKHRoaXMuc2NvcGUgYXMgYW55KS5wYWdlTWFzdGVyID0gdGhpcztcbiAgfVxufVxuXG4vKipcbiAqIFJlcHJlc2VudCBhIHBhcnRpdGlvbi1ncm91cCBydWxlXG4gKi9cbmV4cG9ydCBjbGFzcyBQYXJ0aXRpb25Hcm91cCBleHRlbmRzIFBhZ2VCb3g8UGFydGl0aW9uR3JvdXBJbnN0YW5jZT4ge1xuICBwYWdlTWFzdGVyOiBQYWdlTWFzdGVyO1xuXG4gIGNvbnN0cnVjdG9yKFxuICAgIHNjb3BlOiBFeHBycy5MZXhpY2FsU2NvcGUsXG4gICAgbmFtZTogc3RyaW5nIHwgbnVsbCxcbiAgICBwc2V1ZG9OYW1lOiBzdHJpbmcgfCBudWxsLFxuICAgIGNsYXNzZXM6IHN0cmluZ1tdLFxuICAgIHBhcmVudDogUGFnZUJveCxcbiAgKSB7XG4gICAgc3VwZXIoc2NvcGUsIG5hbWUsIHBzZXVkb05hbWUsIGNsYXNzZXMsIHBhcmVudCk7XG4gICAgdGhpcy5wYWdlTWFzdGVyID0gcGFyZW50LnBhZ2VNYXN0ZXI7XG4gICAgaWYgKG5hbWUpIHtcbiAgICAgIHRoaXMucGFnZU1hc3Rlci5rZXlNYXBbbmFtZV0gPSB0aGlzLmtleTtcbiAgICB9XG4gICAgdGhpcy5zcGVjaWZpZWRbXCJ3cmFwLWZsb3dcIl0gPSBuZXcgQ3NzQ2FzY2FkZS5DYXNjYWRlVmFsdWUoXG4gICAgICBDc3MuaWRlbnQuYXV0byxcbiAgICAgIDAsXG4gICAgKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBAb3ZlcnJpZGVcbiAgICovXG4gIGNyZWF0ZUluc3RhbmNlKHBhcmVudEluc3RhbmNlOiBQYWdlQm94SW5zdGFuY2UpOiBQYWdlQm94SW5zdGFuY2Uge1xuICAgIHJldHVybiBuZXcgUGFydGl0aW9uR3JvdXBJbnN0YW5jZShwYXJlbnRJbnN0YW5jZSwgdGhpcyk7XG4gIH1cblxuICAvKipcbiAgICogQG92ZXJyaWRlXG4gICAqL1xuICBjbG9uZShwYXJhbSk6IFBhcnRpdGlvbkdyb3VwIHtcbiAgICBjb25zdCBjbG9uZWQgPSBuZXcgUGFydGl0aW9uR3JvdXAoXG4gICAgICBwYXJhbS5wYXJlbnQuc2NvcGUsXG4gICAgICB0aGlzLm5hbWUsXG4gICAgICB0aGlzLnBzZXVkb05hbWUsXG4gICAgICB0aGlzLmNsYXNzZXMsXG4gICAgICBwYXJhbS5wYXJlbnQsXG4gICAgKTtcbiAgICB0aGlzLmNvcHlTcGVjaWZpZWQoY2xvbmVkKTtcbiAgICB0aGlzLmNsb25lQ2hpbGRyZW4oY2xvbmVkKTtcbiAgICByZXR1cm4gY2xvbmVkO1xuICB9XG59XG5cbi8qKlxuICogUmVwcmVzZW50IGEgcGFydGl0aW9uIHJ1bGVcbiAqL1xuZXhwb3J0IGNsYXNzIFBhcnRpdGlvbjxcbiAgSSBleHRlbmRzIFBhcnRpdGlvbkluc3RhbmNlID0gUGFydGl0aW9uSW5zdGFuY2Vcbj4gZXh0ZW5kcyBQYWdlQm94PEk+IHtcbiAgcGFnZU1hc3RlcjogUGFnZU1hc3RlcjtcblxuICBjb25zdHJ1Y3RvcihcbiAgICBzY29wZTogRXhwcnMuTGV4aWNhbFNjb3BlLFxuICAgIG5hbWU6IHN0cmluZyB8IG51bGwsXG4gICAgcHNldWRvTmFtZTogc3RyaW5nIHwgbnVsbCxcbiAgICBjbGFzc2VzOiBzdHJpbmdbXSxcbiAgICBwYXJlbnQ6IFBhZ2VCb3gsXG4gICkge1xuICAgIHN1cGVyKHNjb3BlLCBuYW1lLCBwc2V1ZG9OYW1lLCBjbGFzc2VzLCBwYXJlbnQpO1xuICAgIHRoaXMucGFnZU1hc3RlciA9IHBhcmVudC5wYWdlTWFzdGVyO1xuICAgIGlmIChuYW1lKSB7XG4gICAgICB0aGlzLnBhZ2VNYXN0ZXIua2V5TWFwW25hbWVdID0gdGhpcy5rZXk7XG4gICAgfVxuICB9XG5cbiAgLyoqXG4gICAqIEBvdmVycmlkZVxuICAgKi9cbiAgY3JlYXRlSW5zdGFuY2UocGFyZW50SW5zdGFuY2UpOiBQYWdlQm94SW5zdGFuY2Uge1xuICAgIHJldHVybiBuZXcgUGFydGl0aW9uSW5zdGFuY2UocGFyZW50SW5zdGFuY2UsIHRoaXMpO1xuICB9XG5cbiAgLyoqXG4gICAqIEBvdmVycmlkZVxuICAgKi9cbiAgY2xvbmUocGFyYW0pOiBQYXJ0aXRpb24ge1xuICAgIGNvbnN0IGNsb25lZCA9IG5ldyBQYXJ0aXRpb24oXG4gICAgICBwYXJhbS5wYXJlbnQuc2NvcGUsXG4gICAgICB0aGlzLm5hbWUsXG4gICAgICB0aGlzLnBzZXVkb05hbWUsXG4gICAgICB0aGlzLmNsYXNzZXMsXG4gICAgICBwYXJhbS5wYXJlbnQsXG4gICAgKTtcbiAgICB0aGlzLmNvcHlTcGVjaWZpZWQoY2xvbmVkKTtcbiAgICB0aGlzLmNsb25lQ2hpbGRyZW4oY2xvbmVkKTtcbiAgICByZXR1cm4gY2xvbmVkO1xuICB9XG59XG5cbi8vLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSBJbnN0YW5jZSAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuXG4vKipcbiAqIEBwYXJhbSBkZWYgZGVmYXVsdCB2YWx1ZVxuICovXG5leHBvcnQgZnVuY3Rpb24gdG9FeHBySWRlbnQoXG4gIHNjb3BlOiBFeHBycy5MZXhpY2FsU2NvcGUsXG4gIHZhbDogQ3NzLlZhbCxcbiAgZGVmOiBzdHJpbmcsXG4pOiBFeHBycy5WYWwge1xuICBpZiAoIXZhbCkge1xuICAgIHJldHVybiBuZXcgRXhwcnMuQ29uc3Qoc2NvcGUsIGRlZik7XG4gIH1cbiAgcmV0dXJuIHZhbC50b0V4cHIoc2NvcGUsIHNjb3BlLnplcm8pO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gdG9FeHByQXV0byhcbiAgc2NvcGU6IEV4cHJzLkxleGljYWxTY29wZSxcbiAgdmFsOiBDc3MuVmFsLFxuICByZWY6IEV4cHJzLlZhbCxcbik6IEV4cHJzLlZhbCB7XG4gIGlmICghdmFsIHx8IHZhbCA9PT0gQ3NzLmlkZW50LmF1dG8pIHtcbiAgICByZXR1cm4gbnVsbDtcbiAgfVxuICByZXR1cm4gdmFsLnRvRXhwcihzY29wZSwgcmVmKTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHRvRXhwck5vcm1hbChcbiAgc2NvcGU6IEV4cHJzLkxleGljYWxTY29wZSxcbiAgdmFsOiBDc3MuVmFsLFxuICByZWY6IEV4cHJzLlZhbCxcbik6IEV4cHJzLlZhbCB7XG4gIGlmICghdmFsIHx8IHZhbCA9PT0gQ3NzLmlkZW50Lm5vcm1hbCkge1xuICAgIHJldHVybiBudWxsO1xuICB9XG4gIHJldHVybiB2YWwudG9FeHByKHNjb3BlLCByZWYpO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gdG9FeHByWmVybyhcbiAgc2NvcGU6IEV4cHJzLkxleGljYWxTY29wZSxcbiAgdmFsOiBDc3MuVmFsLFxuICByZWY6IEV4cHJzLlZhbCxcbik6IEV4cHJzLlZhbCB7XG4gIGlmICghdmFsIHx8IHZhbCA9PT0gQ3NzLmlkZW50LmF1dG8pIHtcbiAgICByZXR1cm4gc2NvcGUuemVybztcbiAgfVxuICByZXR1cm4gdmFsLnRvRXhwcihzY29wZSwgcmVmKTtcbn1cblxuLyoqXG4gKiBJZiB0aGUgdmFsdWUgaXMgbm90IHNwZWNpZmllZCAobnVsbCksIHJldHVybnMgemVyby5cbiAqIElmIHRoZSB2YWx1ZSBpcyAnYXV0bycsIHJldHVybnMgbnVsbC5cbiAqIE90aGVyd2lzZSwgcmV0dXJuIHRoZSB2YWx1ZSBpdHNlbGYuXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiB0b0V4cHJaZXJvQXV0byhcbiAgc2NvcGU6IEV4cHJzLkxleGljYWxTY29wZSxcbiAgdmFsOiBDc3MuVmFsLFxuICByZWY6IEV4cHJzLlZhbCxcbik6IEV4cHJzLlZhbCB7XG4gIGlmICghdmFsKSB7XG4gICAgcmV0dXJuIHNjb3BlLnplcm87XG4gIH0gZWxzZSBpZiAodmFsID09PSBDc3MuaWRlbnQuYXV0bykge1xuICAgIHJldHVybiBudWxsO1xuICB9IGVsc2Uge1xuICAgIHJldHVybiB2YWwudG9FeHByKHNjb3BlLCByZWYpO1xuICB9XG59XG5cbmV4cG9ydCBmdW5jdGlvbiB0b0V4cHJaZXJvQm9yZGVyKFxuICBzY29wZTogRXhwcnMuTGV4aWNhbFNjb3BlLFxuICB2YWw6IENzcy5WYWwsXG4gIHN0eWxlVmFsOiBDc3MuVmFsLFxuICByZWY6IEV4cHJzLlZhbCxcbik6IEV4cHJzLlZhbCB7XG4gIGlmICghdmFsIHx8IHN0eWxlVmFsID09PSBDc3MuaWRlbnQubm9uZSkge1xuICAgIHJldHVybiBzY29wZS56ZXJvO1xuICB9XG4gIHJldHVybiB2YWwudG9FeHByKHNjb3BlLCByZWYpO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gdG9FeHByQm9vbChcbiAgc2NvcGU6IEV4cHJzLkxleGljYWxTY29wZSxcbiAgdmFsOiBDc3MuVmFsLFxuICBkZWY6IEV4cHJzLlZhbCxcbik6IEV4cHJzLlZhbCB7XG4gIGlmICghdmFsKSB7XG4gICAgcmV0dXJuIGRlZjtcbiAgfVxuICBpZiAodmFsID09PSBDc3MuaWRlbnQuX3RydWUpIHtcbiAgICByZXR1cm4gc2NvcGUuX3RydWU7XG4gIH1cbiAgaWYgKHZhbCA9PT0gQ3NzLmlkZW50Ll9mYWxzZSkge1xuICAgIHJldHVybiBzY29wZS5fZmFsc2U7XG4gIH1cbiAgcmV0dXJuIHZhbC50b0V4cHIoc2NvcGUsIHNjb3BlLnplcm8pO1xufVxuXG5leHBvcnQgaW50ZXJmYWNlIEluc3RhbmNlSG9sZGVyIGV4dGVuZHMgRXhwcnMuQ29udGV4dCB7XG4gIHJlZ2lzdGVySW5zdGFuY2Uoa2V5OiBzdHJpbmcsIGluc3RhbmNlOiBQYWdlQm94SW5zdGFuY2UpOiB2b2lkO1xuXG4gIC8qKlxuICAgKiBAcmV0dXJuIGluc3RhbmNlXG4gICAqL1xuICBsb29rdXBJbnN0YW5jZShrZXk6IHN0cmluZyk6IFBhZ2VCb3hJbnN0YW5jZTtcbn1cblxuZXhwb3J0IGNsYXNzIFBhZ2VCb3hJbnN0YW5jZTxQIGV4dGVuZHMgUGFnZUJveCA9IFBhZ2VCb3g8YW55Pj4ge1xuICAvKipcbiAgICogY2FzY2FkZWQgc3R5bGVzLCBnZW9tZXRyaWMgb25lcyBjb252ZXJ0ZWQgdG8gQ3NzLkV4cHJcbiAgICovXG4gIHByb3RlY3RlZCBjYXNjYWRlZDogQ3NzQ2FzY2FkZS5FbGVtZW50U3R5bGUgPSB7fTtcbiAgc3R5bGU6IHsgW2tleTogc3RyaW5nXTogQ3NzLlZhbCB9ID0ge307XG4gIHByaXZhdGUgYXV0b1dpZHRoOiBFeHBycy5OYXRpdmUgPSBudWxsO1xuICBwcml2YXRlIGF1dG9IZWlnaHQ6IEV4cHJzLk5hdGl2ZSA9IG51bGw7XG4gIGNoaWxkcmVuOiBQYWdlQm94SW5zdGFuY2VbXSA9IFtdO1xuICBpc0F1dG9XaWR0aDogYm9vbGVhbiA9IGZhbHNlO1xuICBpc0F1dG9IZWlnaHQ6IGJvb2xlYW4gPSBmYWxzZTtcbiAgaXNUb3BEZXBlbmRlbnRPbkF1dG9IZWlnaHQ6IGJvb2xlYW4gPSBmYWxzZTtcbiAgaXNSaWdodERlcGVuZGVudE9uQXV0b1dpZHRoOiBib29sZWFuID0gZmFsc2U7XG4gIHByaXZhdGUgY2FsY3VsYXRlZFdpZHRoOiBudW1iZXIgPSAwO1xuICBwcml2YXRlIGNhbGN1bGF0ZWRIZWlnaHQ6IG51bWJlciA9IDA7XG4gIHBhZ2VNYXN0ZXJJbnN0YW5jZTogUGFnZU1hc3Rlckluc3RhbmNlID0gbnVsbDtcbiAgbmFtZWRWYWx1ZXM6IHsgW2tleTogc3RyaW5nXTogRXhwcnMuVmFsIH0gPSB7fTtcbiAgbmFtZWRGdW5jczogeyBba2V5OiBzdHJpbmddOiBFeHBycy5WYWwgfSA9IHt9O1xuICB2ZXJ0aWNhbDogYm9vbGVhbiA9IGZhbHNlO1xuICBydGw6IGJvb2xlYW4gPSBmYWxzZTtcbiAgc3VwcHJlc3NFbXB0eUJveEdlbmVyYXRpb246IGJvb2xlYW4gPSBmYWxzZTtcblxuICBjb25zdHJ1Y3RvcihcbiAgICBwdWJsaWMgcmVhZG9ubHkgcGFyZW50SW5zdGFuY2U6IFBhZ2VCb3hJbnN0YW5jZSxcbiAgICBwdWJsaWMgcmVhZG9ubHkgcGFnZUJveDogUCxcbiAgKSB7XG4gICAgaWYgKHBhcmVudEluc3RhbmNlKSB7XG4gICAgICBwYXJlbnRJbnN0YW5jZS5jaGlsZHJlbi5wdXNoKHRoaXMpO1xuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAgKiBSZXNldCBpbmZvcm1hdGlvbiByZWxhdGVkIHRvIGxheW91dC5cbiAgICovXG4gIHJlc2V0KCkge1xuICAgIHRoaXMuY2FsY3VsYXRlZFdpZHRoID0gMDtcbiAgICB0aGlzLmNhbGN1bGF0ZWRIZWlnaHQgPSAwO1xuICB9XG5cbiAgcHJpdmF0ZSBhZGROYW1lZFZhbHVlcyhuYW1lMTogc3RyaW5nLCBuYW1lMjogc3RyaW5nKTogRXhwcnMuVmFsIHtcbiAgICBjb25zdCB2MSA9IHRoaXMucmVzb2x2ZU5hbWUobmFtZTEpO1xuICAgIGNvbnN0IHYyID0gdGhpcy5yZXNvbHZlTmFtZShuYW1lMik7XG4gICAgaWYgKCF2MSB8fCAhdjIpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcihcIkVfSU5URVJOQUxcIik7XG4gICAgfVxuICAgIHJldHVybiBFeHBycy5hZGQodGhpcy5wYWdlQm94LnNjb3BlLCB2MSwgdjIpO1xuICB9XG5cbiAgcmVzb2x2ZU5hbWUobmFtZTogc3RyaW5nKTogRXhwcnMuVmFsIHtcbiAgICBsZXQgZXhwciA9IHRoaXMubmFtZWRWYWx1ZXNbbmFtZV07XG4gICAgaWYgKGV4cHIpIHtcbiAgICAgIHJldHVybiBleHByO1xuICAgIH1cbiAgICBjb25zdCB2YWwgPSB0aGlzLnN0eWxlW25hbWVdO1xuICAgIGlmICh2YWwpIHtcbiAgICAgIGV4cHIgPSB2YWwudG9FeHByKHRoaXMucGFnZUJveC5zY29wZSwgdGhpcy5wYWdlQm94LnNjb3BlLnplcm8pO1xuICAgIH1cbiAgICBzd2l0Y2ggKG5hbWUpIHtcbiAgICAgIGNhc2UgXCJtYXJnaW4tbGVmdC1lZGdlXCI6XG4gICAgICAgIGV4cHIgPSB0aGlzLnJlc29sdmVOYW1lKFwibGVmdFwiKTtcbiAgICAgICAgYnJlYWs7XG4gICAgICBjYXNlIFwibWFyZ2luLXRvcC1lZGdlXCI6XG4gICAgICAgIGV4cHIgPSB0aGlzLnJlc29sdmVOYW1lKFwidG9wXCIpO1xuICAgICAgICBicmVhaztcbiAgICAgIGNhc2UgXCJtYXJnaW4tcmlnaHQtZWRnZVwiOlxuICAgICAgICBleHByID0gdGhpcy5hZGROYW1lZFZhbHVlcyhcImJvcmRlci1yaWdodC1lZGdlXCIsIFwibWFyZ2luLXJpZ2h0XCIpO1xuICAgICAgICBicmVhaztcbiAgICAgIGNhc2UgXCJtYXJnaW4tYm90dG9tLWVkZ2VcIjpcbiAgICAgICAgZXhwciA9IHRoaXMuYWRkTmFtZWRWYWx1ZXMoXCJib3JkZXItYm90dG9tLWVkZ2VcIiwgXCJtYXJnaW4tYm90dG9tXCIpO1xuICAgICAgICBicmVhaztcbiAgICAgIGNhc2UgXCJib3JkZXItbGVmdC1lZGdlXCI6XG4gICAgICAgIGV4cHIgPSB0aGlzLmFkZE5hbWVkVmFsdWVzKFwibWFyZ2luLWxlZnQtZWRnZVwiLCBcIm1hcmdpbi1sZWZ0XCIpO1xuICAgICAgICBicmVhaztcbiAgICAgIGNhc2UgXCJib3JkZXItdG9wLWVkZ2VcIjpcbiAgICAgICAgZXhwciA9IHRoaXMuYWRkTmFtZWRWYWx1ZXMoXCJtYXJnaW4tdG9wLWVkZ2VcIiwgXCJtYXJnaW4tdG9wXCIpO1xuICAgICAgICBicmVhaztcbiAgICAgIGNhc2UgXCJib3JkZXItcmlnaHQtZWRnZVwiOlxuICAgICAgICBleHByID0gdGhpcy5hZGROYW1lZFZhbHVlcyhcInBhZGRpbmctcmlnaHQtZWRnZVwiLCBcImJvcmRlci1yaWdodC13aWR0aFwiKTtcbiAgICAgICAgYnJlYWs7XG4gICAgICBjYXNlIFwiYm9yZGVyLWJvdHRvbS1lZGdlXCI6XG4gICAgICAgIGV4cHIgPSB0aGlzLmFkZE5hbWVkVmFsdWVzKFxuICAgICAgICAgIFwicGFkZGluZy1ib3R0b20tZWRnZVwiLFxuICAgICAgICAgIFwiYm9yZGVyLWJvdHRvbS13aWR0aFwiLFxuICAgICAgICApO1xuICAgICAgICBicmVhaztcbiAgICAgIGNhc2UgXCJwYWRkaW5nLWxlZnQtZWRnZVwiOlxuICAgICAgICBleHByID0gdGhpcy5hZGROYW1lZFZhbHVlcyhcImJvcmRlci1sZWZ0LWVkZ2VcIiwgXCJib3JkZXItbGVmdC13aWR0aFwiKTtcbiAgICAgICAgYnJlYWs7XG4gICAgICBjYXNlIFwicGFkZGluZy10b3AtZWRnZVwiOlxuICAgICAgICBleHByID0gdGhpcy5hZGROYW1lZFZhbHVlcyhcImJvcmRlci10b3AtZWRnZVwiLCBcImJvcmRlci10b3Atd2lkdGhcIik7XG4gICAgICAgIGJyZWFrO1xuICAgICAgY2FzZSBcInBhZGRpbmctcmlnaHQtZWRnZVwiOlxuICAgICAgICBleHByID0gdGhpcy5hZGROYW1lZFZhbHVlcyhcInJpZ2h0LWVkZ2VcIiwgXCJwYWRkaW5nLXJpZ2h0XCIpO1xuICAgICAgICBicmVhaztcbiAgICAgIGNhc2UgXCJwYWRkaW5nLWJvdHRvbS1lZGdlXCI6XG4gICAgICAgIGV4cHIgPSB0aGlzLmFkZE5hbWVkVmFsdWVzKFwiYm90dG9tLWVkZ2VcIiwgXCJwYWRkaW5nLWJvdHRvbVwiKTtcbiAgICAgICAgYnJlYWs7XG4gICAgICBjYXNlIFwibGVmdC1lZGdlXCI6XG4gICAgICAgIGV4cHIgPSB0aGlzLmFkZE5hbWVkVmFsdWVzKFwicGFkZGluZy1sZWZ0LWVkZ2VcIiwgXCJwYWRkaW5nLWxlZnRcIik7XG4gICAgICAgIGJyZWFrO1xuICAgICAgY2FzZSBcInRvcC1lZGdlXCI6XG4gICAgICAgIGV4cHIgPSB0aGlzLmFkZE5hbWVkVmFsdWVzKFwicGFkZGluZy10b3AtZWRnZVwiLCBcInBhZGRpbmctdG9wXCIpO1xuICAgICAgICBicmVhaztcbiAgICAgIGNhc2UgXCJyaWdodC1lZGdlXCI6XG4gICAgICAgIGV4cHIgPSB0aGlzLmFkZE5hbWVkVmFsdWVzKFwibGVmdC1lZGdlXCIsIFwid2lkdGhcIik7XG4gICAgICAgIGJyZWFrO1xuICAgICAgY2FzZSBcImJvdHRvbS1lZGdlXCI6XG4gICAgICAgIGV4cHIgPSB0aGlzLmFkZE5hbWVkVmFsdWVzKFwidG9wLWVkZ2VcIiwgXCJoZWlnaHRcIik7XG4gICAgICAgIGJyZWFrO1xuICAgIH1cbiAgICBpZiAoIWV4cHIpIHtcbiAgICAgIGxldCBhbHROYW1lOiBzdHJpbmc7XG4gICAgICBpZiAobmFtZSA9PSBcImV4dGVudFwiKSB7XG4gICAgICAgIGFsdE5hbWUgPSB0aGlzLnZlcnRpY2FsID8gXCJ3aWR0aFwiIDogXCJoZWlnaHRcIjtcbiAgICAgIH0gZWxzZSBpZiAobmFtZSA9PSBcIm1lYXN1cmVcIikge1xuICAgICAgICBhbHROYW1lID0gdGhpcy52ZXJ0aWNhbCA/IFwiaGVpZ2h0XCIgOiBcIndpZHRoXCI7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBjb25zdCBtYXAgPSB0aGlzLnZlcnRpY2FsXG4gICAgICAgICAgPyBDc3NDYXNjYWRlLmNvdXBsaW5nTWFwVmVydFxuICAgICAgICAgIDogQ3NzQ2FzY2FkZS5jb3VwbGluZ01hcEhvcjtcbiAgICAgICAgYWx0TmFtZSA9IG5hbWU7XG4gICAgICAgIGZvciAoY29uc3Qga2V5IGluIG1hcCkge1xuICAgICAgICAgIGFsdE5hbWUgPSBhbHROYW1lLnJlcGxhY2Uoa2V5LCBtYXBba2V5XSk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIGlmIChhbHROYW1lICE9IG5hbWUpIHtcbiAgICAgICAgZXhwciA9IHRoaXMucmVzb2x2ZU5hbWUoYWx0TmFtZSk7XG4gICAgICB9XG4gICAgfVxuICAgIGlmIChleHByKSB7XG4gICAgICB0aGlzLm5hbWVkVmFsdWVzW25hbWVdID0gZXhwcjtcbiAgICB9XG4gICAgcmV0dXJuIGV4cHI7XG4gIH1cblxuICByZXNvbHZlRnVuYyhuYW1lKSB7XG4gICAgbGV0IGV4cHIgPSB0aGlzLm5hbWVkRnVuY3NbbmFtZV07XG4gICAgaWYgKGV4cHIpIHtcbiAgICAgIHJldHVybiBleHByO1xuICAgIH1cbiAgICBzd2l0Y2ggKG5hbWUpIHtcbiAgICAgIGNhc2UgXCJjb2x1bW5zXCI6IHtcbiAgICAgICAgLy8gbWluKGNvdW50LGNvbHVtbi1jb3VudCkgKiAoY29sdW1uLXdpZHRoICsgY29sdW1uLWdhcCkgLSBjb2x1bW4tZ2FwXG4gICAgICAgIGNvbnN0IHNjb3BlID0gdGhpcy5wYWdlQm94LnNjb3BlO1xuICAgICAgICBjb25zdCBjb3VudCA9IG5ldyBFeHBycy5QYXJhbShzY29wZSwgMCk7XG4gICAgICAgIGNvbnN0IGNvbHVtbkNvdW50ID0gdGhpcy5yZXNvbHZlTmFtZShcImNvbHVtbi1jb3VudFwiKTtcbiAgICAgICAgY29uc3QgY29sdW1uV2lkdGggPSB0aGlzLnJlc29sdmVOYW1lKFwiY29sdW1uLXdpZHRoXCIpO1xuICAgICAgICBjb25zdCBjb2x1bW5HYXAgPSB0aGlzLnJlc29sdmVOYW1lKFwiY29sdW1uLWdhcFwiKTtcbiAgICAgICAgZXhwciA9IEV4cHJzLnN1YihcbiAgICAgICAgICBzY29wZSxcbiAgICAgICAgICBFeHBycy5tdWwoXG4gICAgICAgICAgICBzY29wZSxcbiAgICAgICAgICAgIG5ldyBFeHBycy5DYWxsKHNjb3BlLCBcIm1pblwiLCBbY291bnQsIGNvbHVtbkNvdW50XSksXG4gICAgICAgICAgICBFeHBycy5hZGQoc2NvcGUsIGNvbHVtbldpZHRoLCBjb2x1bW5HYXApLFxuICAgICAgICAgICksXG4gICAgICAgICAgY29sdW1uR2FwLFxuICAgICAgICApO1xuICAgICAgICBicmVhaztcbiAgICAgIH1cbiAgICB9XG4gICAgaWYgKGV4cHIpIHtcbiAgICAgIHRoaXMubmFtZWRGdW5jc1tuYW1lXSA9IGV4cHI7XG4gICAgfVxuICAgIHJldHVybiBleHByO1xuICB9XG5cbiAgcHJpdmF0ZSBpbml0RW5hYmxlZCgpOiB2b2lkIHtcbiAgICBjb25zdCBzY29wZSA9IHRoaXMucGFnZUJveC5zY29wZTtcbiAgICBjb25zdCBzdHlsZSA9IHRoaXMuc3R5bGU7XG4gICAgbGV0IGVuYWJsZWQgPSB0b0V4cHJCb29sKHNjb3BlLCBzdHlsZVtcImVuYWJsZWRcIl0sIHNjb3BlLl90cnVlKTtcbiAgICBjb25zdCBwYWdlID0gdG9FeHByQXV0byhzY29wZSwgc3R5bGVbXCJwYWdlXCJdLCBzY29wZS56ZXJvKTtcbiAgICBpZiAocGFnZSkge1xuICAgICAgY29uc3QgY3VycmVudFBhZ2UgPSBuZXcgRXhwcnMuTmFtZWQoc2NvcGUsIFwicGFnZS1udW1iZXJcIik7XG4gICAgICBlbmFibGVkID0gRXhwcnMuYW5kKFxuICAgICAgICBzY29wZSxcbiAgICAgICAgZW5hYmxlZCxcbiAgICAgICAgbmV3IEV4cHJzLkVxKHNjb3BlLCBwYWdlLCBjdXJyZW50UGFnZSksXG4gICAgICApO1xuICAgIH1cbiAgICBjb25zdCBtaW5QYWdlV2lkdGggPSB0b0V4cHJBdXRvKHNjb3BlLCBzdHlsZVtcIm1pbi1wYWdlLXdpZHRoXCJdLCBzY29wZS56ZXJvKTtcbiAgICBpZiAobWluUGFnZVdpZHRoKSB7XG4gICAgICBlbmFibGVkID0gRXhwcnMuYW5kKFxuICAgICAgICBzY29wZSxcbiAgICAgICAgZW5hYmxlZCxcbiAgICAgICAgbmV3IEV4cHJzLkdlKHNjb3BlLCBuZXcgRXhwcnMuTmFtZWQoc2NvcGUsIFwicGFnZS13aWR0aFwiKSwgbWluUGFnZVdpZHRoKSxcbiAgICAgICk7XG4gICAgfVxuICAgIGNvbnN0IG1pblBhZ2VIZWlnaHQgPSB0b0V4cHJBdXRvKFxuICAgICAgc2NvcGUsXG4gICAgICBzdHlsZVtcIm1pbi1wYWdlLWhlaWdodFwiXSxcbiAgICAgIHNjb3BlLnplcm8sXG4gICAgKTtcbiAgICBpZiAobWluUGFnZUhlaWdodCkge1xuICAgICAgZW5hYmxlZCA9IEV4cHJzLmFuZChcbiAgICAgICAgc2NvcGUsXG4gICAgICAgIGVuYWJsZWQsXG4gICAgICAgIG5ldyBFeHBycy5HZShcbiAgICAgICAgICBzY29wZSxcbiAgICAgICAgICBuZXcgRXhwcnMuTmFtZWQoc2NvcGUsIFwicGFnZS1oZWlnaHRcIiksXG4gICAgICAgICAgbWluUGFnZUhlaWdodCxcbiAgICAgICAgKSxcbiAgICAgICk7XG4gICAgfVxuICAgIGVuYWJsZWQgPSB0aGlzLmJveFNwZWNpZmljRW5hYmxlZChlbmFibGVkKTtcbiAgICBzdHlsZVtcImVuYWJsZWRcIl0gPSBuZXcgQ3NzLkV4cHIoZW5hYmxlZCk7XG4gIH1cblxuICBwcm90ZWN0ZWQgYm94U3BlY2lmaWNFbmFibGVkKGVuYWJsZWQ6IEV4cHJzLlZhbCk6IEV4cHJzLlZhbCB7XG4gICAgcmV0dXJuIGVuYWJsZWQ7XG4gIH1cblxuICBwcm90ZWN0ZWQgaW5pdEhvcml6b250YWwoKTogdm9pZCB7XG4gICAgY29uc3Qgc2NvcGUgPSB0aGlzLnBhZ2VCb3guc2NvcGU7XG4gICAgY29uc3Qgc3R5bGUgPSB0aGlzLnN0eWxlO1xuICAgIGNvbnN0IHBhcmVudFdpZHRoID0gdGhpcy5wYXJlbnRJbnN0YW5jZVxuICAgICAgPyB0aGlzLnBhcmVudEluc3RhbmNlLnN0eWxlW1wid2lkdGhcIl0udG9FeHByKHNjb3BlLCBudWxsKVxuICAgICAgOiBudWxsO1xuICAgIGxldCBsZWZ0ID0gdG9FeHByQXV0byhzY29wZSwgc3R5bGVbXCJsZWZ0XCJdLCBwYXJlbnRXaWR0aCk7XG4gICAgbGV0IG1hcmdpbkxlZnQgPSB0b0V4cHJBdXRvKHNjb3BlLCBzdHlsZVtcIm1hcmdpbi1sZWZ0XCJdLCBwYXJlbnRXaWR0aCk7XG4gICAgY29uc3QgYm9yZGVyTGVmdFdpZHRoID0gdG9FeHByWmVyb0JvcmRlcihcbiAgICAgIHNjb3BlLFxuICAgICAgc3R5bGVbXCJib3JkZXItbGVmdC13aWR0aFwiXSxcbiAgICAgIHN0eWxlW1wiYm9yZGVyLWxlZnQtc3R5bGVcIl0sXG4gICAgICBwYXJlbnRXaWR0aCxcbiAgICApO1xuICAgIGNvbnN0IHBhZGRpbmdMZWZ0ID0gdG9FeHByWmVybyhzY29wZSwgc3R5bGVbXCJwYWRkaW5nLWxlZnRcIl0sIHBhcmVudFdpZHRoKTtcbiAgICBsZXQgd2lkdGggPSB0b0V4cHJBdXRvKHNjb3BlLCBzdHlsZVtcIndpZHRoXCJdLCBwYXJlbnRXaWR0aCk7XG4gICAgbGV0IG1heFdpZHRoID0gdG9FeHByQXV0byhzY29wZSwgc3R5bGVbXCJtYXgtd2lkdGhcIl0sIHBhcmVudFdpZHRoKTtcbiAgICBjb25zdCBwYWRkaW5nUmlnaHQgPSB0b0V4cHJaZXJvKHNjb3BlLCBzdHlsZVtcInBhZGRpbmctcmlnaHRcIl0sIHBhcmVudFdpZHRoKTtcbiAgICBjb25zdCBib3JkZXJSaWdodFdpZHRoID0gdG9FeHByWmVyb0JvcmRlcihcbiAgICAgIHNjb3BlLFxuICAgICAgc3R5bGVbXCJib3JkZXItcmlnaHQtd2lkdGhcIl0sXG4gICAgICBzdHlsZVtcImJvcmRlci1yaWdodC1zdHlsZVwiXSxcbiAgICAgIHBhcmVudFdpZHRoLFxuICAgICk7XG4gICAgbGV0IG1hcmdpblJpZ2h0ID0gdG9FeHByQXV0byhzY29wZSwgc3R5bGVbXCJtYXJnaW4tcmlnaHRcIl0sIHBhcmVudFdpZHRoKTtcbiAgICBsZXQgcmlnaHQgPSB0b0V4cHJBdXRvKHNjb3BlLCBzdHlsZVtcInJpZ2h0XCJdLCBwYXJlbnRXaWR0aCk7XG4gICAgY29uc3QgbGVmdEJQID0gRXhwcnMuYWRkKHNjb3BlLCBib3JkZXJMZWZ0V2lkdGgsIHBhZGRpbmdMZWZ0KTtcbiAgICBjb25zdCByaWdodEJQID0gRXhwcnMuYWRkKHNjb3BlLCBib3JkZXJMZWZ0V2lkdGgsIHBhZGRpbmdSaWdodCk7XG4gICAgaWYgKGxlZnQgJiYgcmlnaHQgJiYgd2lkdGgpIHtcbiAgICAgIGxldCBleHRyYSA9IEV4cHJzLnN1YihcbiAgICAgICAgc2NvcGUsXG4gICAgICAgIHBhcmVudFdpZHRoLFxuICAgICAgICBFeHBycy5hZGQoXG4gICAgICAgICAgc2NvcGUsXG4gICAgICAgICAgd2lkdGgsXG4gICAgICAgICAgRXhwcnMuYWRkKHNjb3BlLCBFeHBycy5hZGQoc2NvcGUsIGxlZnQsIGxlZnRCUCksIHJpZ2h0QlApLFxuICAgICAgICApLFxuICAgICAgKTtcbiAgICAgIGlmICghbWFyZ2luTGVmdCkge1xuICAgICAgICBleHRyYSA9IEV4cHJzLnN1YihzY29wZSwgZXh0cmEsIHJpZ2h0KTtcbiAgICAgICAgaWYgKCFtYXJnaW5SaWdodCkge1xuICAgICAgICAgIG1hcmdpbkxlZnQgPSBFeHBycy5tdWwoc2NvcGUsIGV4dHJhLCBuZXcgRXhwcnMuQ29uc3Qoc2NvcGUsIDAuNSkpO1xuICAgICAgICAgIG1hcmdpblJpZ2h0ID0gbWFyZ2luTGVmdDtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBtYXJnaW5MZWZ0ID0gRXhwcnMuc3ViKHNjb3BlLCBleHRyYSwgbWFyZ2luUmlnaHQpO1xuICAgICAgICB9XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBpZiAoIW1hcmdpblJpZ2h0KSB7XG4gICAgICAgICAgbWFyZ2luUmlnaHQgPSBFeHBycy5zdWIoXG4gICAgICAgICAgICBzY29wZSxcbiAgICAgICAgICAgIGV4dHJhLFxuICAgICAgICAgICAgRXhwcnMuYWRkKHNjb3BlLCByaWdodCwgbWFyZ2luTGVmdCksXG4gICAgICAgICAgKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAvLyBvdmVyY29uc3RyYWludFxuICAgICAgICAgIHJpZ2h0ID0gRXhwcnMuc3ViKHNjb3BlLCBleHRyYSwgbWFyZ2luUmlnaHQpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIGlmICghbWFyZ2luTGVmdCkge1xuICAgICAgICBtYXJnaW5MZWZ0ID0gc2NvcGUuemVybztcbiAgICAgIH1cbiAgICAgIGlmICghbWFyZ2luUmlnaHQpIHtcbiAgICAgICAgbWFyZ2luUmlnaHQgPSBzY29wZS56ZXJvO1xuICAgICAgfVxuICAgICAgaWYgKCFsZWZ0ICYmICFyaWdodCAmJiAhd2lkdGgpIHtcbiAgICAgICAgbGVmdCA9IHNjb3BlLnplcm87XG4gICAgICB9XG4gICAgICBpZiAoIWxlZnQgJiYgIXdpZHRoKSB7XG4gICAgICAgIHdpZHRoID0gdGhpcy5hdXRvV2lkdGg7XG4gICAgICAgIHRoaXMuaXNBdXRvV2lkdGggPSB0cnVlO1xuICAgICAgfSBlbHNlIGlmICghbGVmdCAmJiAhcmlnaHQpIHtcbiAgICAgICAgbGVmdCA9IHNjb3BlLnplcm87XG4gICAgICB9IGVsc2UgaWYgKCF3aWR0aCAmJiAhcmlnaHQpIHtcbiAgICAgICAgd2lkdGggPSB0aGlzLmF1dG9XaWR0aDtcbiAgICAgICAgdGhpcy5pc0F1dG9XaWR0aCA9IHRydWU7XG4gICAgICB9XG4gICAgICBjb25zdCByZW1haW5zID0gRXhwcnMuc3ViKFxuICAgICAgICBzY29wZSxcbiAgICAgICAgcGFyZW50V2lkdGgsXG4gICAgICAgIEV4cHJzLmFkZChcbiAgICAgICAgICBzY29wZSxcbiAgICAgICAgICBFeHBycy5hZGQoc2NvcGUsIG1hcmdpbkxlZnQsIGxlZnRCUCksXG4gICAgICAgICAgRXhwcnMuYWRkKHNjb3BlLCBtYXJnaW5SaWdodCwgcmlnaHRCUCksXG4gICAgICAgICksXG4gICAgICApO1xuICAgICAgaWYgKHRoaXMuaXNBdXRvV2lkdGgpIHtcbiAgICAgICAgaWYgKCFtYXhXaWR0aCkge1xuICAgICAgICAgIC8vIFRPRE86IGhhbmRsZSB0aGUgY2FzZSB3aGVuIHJpZ2h0L2xlZnQgZGVwZW5kcyBvbiB3aWR0aFxuICAgICAgICAgIG1heFdpZHRoID0gRXhwcnMuc3ViKHNjb3BlLCByZW1haW5zLCBsZWZ0ID8gbGVmdCA6IHJpZ2h0KTtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIEZvciBtdWx0aS1jb2x1bW4gbGF5b3V0LCB3aWR0aCBpcyBtYXgtd2lkdGguXG4gICAgICAgIGlmIChcbiAgICAgICAgICAhdGhpcy52ZXJ0aWNhbCAmJlxuICAgICAgICAgICh0b0V4cHJBdXRvKHNjb3BlLCBzdHlsZVtcImNvbHVtbi13aWR0aFwiXSwgbnVsbCkgfHxcbiAgICAgICAgICAgIHRvRXhwckF1dG8oc2NvcGUsIHN0eWxlW1wiY29sdW1uLWNvdW50XCJdLCBudWxsKSlcbiAgICAgICAgKSB7XG4gICAgICAgICAgd2lkdGggPSBtYXhXaWR0aDtcbiAgICAgICAgICB0aGlzLmlzQXV0b1dpZHRoID0gZmFsc2U7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIGlmICghbGVmdCkge1xuICAgICAgICBsZWZ0ID0gRXhwcnMuc3ViKHNjb3BlLCByZW1haW5zLCBFeHBycy5hZGQoc2NvcGUsIHJpZ2h0LCB3aWR0aCkpO1xuICAgICAgfSBlbHNlIGlmICghd2lkdGgpIHtcbiAgICAgICAgd2lkdGggPSBFeHBycy5zdWIoc2NvcGUsIHJlbWFpbnMsIEV4cHJzLmFkZChzY29wZSwgbGVmdCwgcmlnaHQpKTtcbiAgICAgIH0gZWxzZSBpZiAoIXJpZ2h0KSB7XG4gICAgICAgIHJpZ2h0ID0gRXhwcnMuc3ViKHNjb3BlLCByZW1haW5zLCBFeHBycy5hZGQoc2NvcGUsIGxlZnQsIHdpZHRoKSk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgLy8gc25hcC13aWR0aCBpcyBpbmhlcml0ZWRcbiAgICBjb25zdCBzbmFwV2lkdGhWYWwgPVxuICAgICAgc3R5bGVbXCJzbmFwLXdpZHRoXCJdIHx8XG4gICAgICAodGhpcy5wYXJlbnRJbnN0YW5jZSA/IHRoaXMucGFyZW50SW5zdGFuY2Uuc3R5bGVbXCJzbmFwLXdpZHRoXCJdIDogbnVsbCk7XG4gICAgY29uc3Qgc25hcFdpZHRoID0gdG9FeHByWmVybyhzY29wZSwgc25hcFdpZHRoVmFsLCBwYXJlbnRXaWR0aCk7XG4gICAgc3R5bGVbXCJsZWZ0XCJdID0gbmV3IENzcy5FeHByKGxlZnQpO1xuICAgIHN0eWxlW1wibWFyZ2luLWxlZnRcIl0gPSBuZXcgQ3NzLkV4cHIobWFyZ2luTGVmdCk7XG4gICAgc3R5bGVbXCJib3JkZXItbGVmdC13aWR0aFwiXSA9IG5ldyBDc3MuRXhwcihib3JkZXJMZWZ0V2lkdGgpO1xuICAgIHN0eWxlW1wicGFkZGluZy1sZWZ0XCJdID0gbmV3IENzcy5FeHByKHBhZGRpbmdMZWZ0KTtcbiAgICBzdHlsZVtcIndpZHRoXCJdID0gbmV3IENzcy5FeHByKHdpZHRoKTtcbiAgICBzdHlsZVtcIm1heC13aWR0aFwiXSA9IG5ldyBDc3MuRXhwcihtYXhXaWR0aCA/IG1heFdpZHRoIDogd2lkdGgpO1xuICAgIHN0eWxlW1wicGFkZGluZy1yaWdodFwiXSA9IG5ldyBDc3MuRXhwcihwYWRkaW5nUmlnaHQpO1xuICAgIHN0eWxlW1wiYm9yZGVyLXJpZ2h0LXdpZHRoXCJdID0gbmV3IENzcy5FeHByKGJvcmRlclJpZ2h0V2lkdGgpO1xuICAgIHN0eWxlW1wibWFyZ2luLXJpZ2h0XCJdID0gbmV3IENzcy5FeHByKG1hcmdpblJpZ2h0KTtcbiAgICBzdHlsZVtcInJpZ2h0XCJdID0gbmV3IENzcy5FeHByKHJpZ2h0KTtcbiAgICBzdHlsZVtcInNuYXAtd2lkdGhcIl0gPSBuZXcgQ3NzLkV4cHIoc25hcFdpZHRoKTtcbiAgfVxuXG4gIHByb3RlY3RlZCBpbml0VmVydGljYWwoKTogdm9pZCB7XG4gICAgY29uc3Qgc2NvcGUgPSB0aGlzLnBhZ2VCb3guc2NvcGU7XG4gICAgY29uc3Qgc3R5bGUgPSB0aGlzLnN0eWxlO1xuICAgIGNvbnN0IHBhcmVudFdpZHRoID0gdGhpcy5wYXJlbnRJbnN0YW5jZVxuICAgICAgPyB0aGlzLnBhcmVudEluc3RhbmNlLnN0eWxlW1wid2lkdGhcIl0udG9FeHByKHNjb3BlLCBudWxsKVxuICAgICAgOiBudWxsO1xuICAgIGNvbnN0IHBhcmVudEhlaWdodCA9IHRoaXMucGFyZW50SW5zdGFuY2VcbiAgICAgID8gdGhpcy5wYXJlbnRJbnN0YW5jZS5zdHlsZVtcImhlaWdodFwiXS50b0V4cHIoc2NvcGUsIG51bGwpXG4gICAgICA6IG51bGw7XG4gICAgbGV0IHRvcCA9IHRvRXhwckF1dG8oc2NvcGUsIHN0eWxlW1widG9wXCJdLCBwYXJlbnRIZWlnaHQpO1xuICAgIGxldCBtYXJnaW5Ub3AgPSB0b0V4cHJBdXRvKHNjb3BlLCBzdHlsZVtcIm1hcmdpbi10b3BcIl0sIHBhcmVudFdpZHRoKTtcbiAgICBjb25zdCBib3JkZXJUb3BXaWR0aCA9IHRvRXhwclplcm9Cb3JkZXIoXG4gICAgICBzY29wZSxcbiAgICAgIHN0eWxlW1wiYm9yZGVyLXRvcC13aWR0aFwiXSxcbiAgICAgIHN0eWxlW1wiYm9yZGVyLXRvcC1zdHlsZVwiXSxcbiAgICAgIHBhcmVudFdpZHRoLFxuICAgICk7XG4gICAgY29uc3QgcGFkZGluZ1RvcCA9IHRvRXhwclplcm8oc2NvcGUsIHN0eWxlW1wicGFkZGluZy10b3BcIl0sIHBhcmVudFdpZHRoKTtcbiAgICBsZXQgaGVpZ2h0ID0gdG9FeHByQXV0byhzY29wZSwgc3R5bGVbXCJoZWlnaHRcIl0sIHBhcmVudEhlaWdodCk7XG4gICAgbGV0IG1heEhlaWdodCA9IHRvRXhwckF1dG8oc2NvcGUsIHN0eWxlW1wibWF4LWhlaWdodFwiXSwgcGFyZW50SGVpZ2h0KTtcbiAgICBjb25zdCBwYWRkaW5nQm90dG9tID0gdG9FeHByWmVybyhcbiAgICAgIHNjb3BlLFxuICAgICAgc3R5bGVbXCJwYWRkaW5nLWJvdHRvbVwiXSxcbiAgICAgIHBhcmVudFdpZHRoLFxuICAgICk7XG4gICAgY29uc3QgYm9yZGVyQm90dG9tV2lkdGggPSB0b0V4cHJaZXJvQm9yZGVyKFxuICAgICAgc2NvcGUsXG4gICAgICBzdHlsZVtcImJvcmRlci1ib3R0b20td2lkdGhcIl0sXG4gICAgICBzdHlsZVtcImJvcmRlci1ib3R0b20tc3R5bGVcIl0sXG4gICAgICBwYXJlbnRXaWR0aCxcbiAgICApO1xuICAgIGxldCBtYXJnaW5Cb3R0b20gPSB0b0V4cHJBdXRvKHNjb3BlLCBzdHlsZVtcIm1hcmdpbi1ib3R0b21cIl0sIHBhcmVudFdpZHRoKTtcbiAgICBsZXQgYm90dG9tID0gdG9FeHByQXV0byhzY29wZSwgc3R5bGVbXCJib3R0b21cIl0sIHBhcmVudEhlaWdodCk7XG4gICAgY29uc3QgdG9wQlAgPSBFeHBycy5hZGQoc2NvcGUsIGJvcmRlclRvcFdpZHRoLCBwYWRkaW5nVG9wKTtcbiAgICBjb25zdCBib3R0b21CUCA9IEV4cHJzLmFkZChzY29wZSwgYm9yZGVyQm90dG9tV2lkdGgsIHBhZGRpbmdCb3R0b20pO1xuICAgIGlmICh0b3AgJiYgYm90dG9tICYmIGhlaWdodCkge1xuICAgICAgbGV0IGV4dHJhID0gRXhwcnMuc3ViKFxuICAgICAgICBzY29wZSxcbiAgICAgICAgcGFyZW50SGVpZ2h0LFxuICAgICAgICBFeHBycy5hZGQoXG4gICAgICAgICAgc2NvcGUsXG4gICAgICAgICAgaGVpZ2h0LFxuICAgICAgICAgIEV4cHJzLmFkZChzY29wZSwgRXhwcnMuYWRkKHNjb3BlLCB0b3AsIHRvcEJQKSwgYm90dG9tQlApLFxuICAgICAgICApLFxuICAgICAgKTtcbiAgICAgIGlmICghbWFyZ2luVG9wKSB7XG4gICAgICAgIGV4dHJhID0gRXhwcnMuc3ViKHNjb3BlLCBleHRyYSwgYm90dG9tKTtcbiAgICAgICAgaWYgKCFtYXJnaW5Cb3R0b20pIHtcbiAgICAgICAgICBtYXJnaW5Ub3AgPSBFeHBycy5tdWwoc2NvcGUsIGV4dHJhLCBuZXcgRXhwcnMuQ29uc3Qoc2NvcGUsIDAuNSkpO1xuICAgICAgICAgIG1hcmdpbkJvdHRvbSA9IG1hcmdpblRvcDtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBtYXJnaW5Ub3AgPSBFeHBycy5zdWIoc2NvcGUsIGV4dHJhLCBtYXJnaW5Cb3R0b20pO1xuICAgICAgICB9XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBpZiAoIW1hcmdpbkJvdHRvbSkge1xuICAgICAgICAgIG1hcmdpbkJvdHRvbSA9IEV4cHJzLnN1YihcbiAgICAgICAgICAgIHNjb3BlLFxuICAgICAgICAgICAgZXh0cmEsXG4gICAgICAgICAgICBFeHBycy5hZGQoc2NvcGUsIGJvdHRvbSwgbWFyZ2luVG9wKSxcbiAgICAgICAgICApO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIC8vIG92ZXJjb25zdHJhaW50XG4gICAgICAgICAgYm90dG9tID0gRXhwcnMuc3ViKHNjb3BlLCBleHRyYSwgbWFyZ2luVG9wKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICBpZiAoIW1hcmdpblRvcCkge1xuICAgICAgICBtYXJnaW5Ub3AgPSBzY29wZS56ZXJvO1xuICAgICAgfVxuICAgICAgaWYgKCFtYXJnaW5Cb3R0b20pIHtcbiAgICAgICAgbWFyZ2luQm90dG9tID0gc2NvcGUuemVybztcbiAgICAgIH1cbiAgICAgIGlmICghdG9wICYmICFib3R0b20gJiYgIWhlaWdodCkge1xuICAgICAgICB0b3AgPSBzY29wZS56ZXJvO1xuICAgICAgfVxuICAgICAgaWYgKCF0b3AgJiYgIWhlaWdodCkge1xuICAgICAgICBoZWlnaHQgPSB0aGlzLmF1dG9IZWlnaHQ7XG4gICAgICAgIHRoaXMuaXNBdXRvSGVpZ2h0ID0gdHJ1ZTtcbiAgICAgIH0gZWxzZSBpZiAoIXRvcCAmJiAhYm90dG9tKSB7XG4gICAgICAgIHRvcCA9IHNjb3BlLnplcm87XG4gICAgICB9IGVsc2UgaWYgKCFoZWlnaHQgJiYgIWJvdHRvbSkge1xuICAgICAgICBoZWlnaHQgPSB0aGlzLmF1dG9IZWlnaHQ7XG4gICAgICAgIHRoaXMuaXNBdXRvSGVpZ2h0ID0gdHJ1ZTtcbiAgICAgIH1cbiAgICAgIGNvbnN0IHJlbWFpbnMgPSBFeHBycy5zdWIoXG4gICAgICAgIHNjb3BlLFxuICAgICAgICBwYXJlbnRIZWlnaHQsXG4gICAgICAgIEV4cHJzLmFkZChcbiAgICAgICAgICBzY29wZSxcbiAgICAgICAgICBFeHBycy5hZGQoc2NvcGUsIG1hcmdpblRvcCwgdG9wQlApLFxuICAgICAgICAgIEV4cHJzLmFkZChzY29wZSwgbWFyZ2luQm90dG9tLCBib3R0b21CUCksXG4gICAgICAgICksXG4gICAgICApO1xuICAgICAgaWYgKHRoaXMuaXNBdXRvSGVpZ2h0KSB7XG4gICAgICAgIGlmICghbWF4SGVpZ2h0KSB7XG4gICAgICAgICAgLy8gVE9ETzogaGFuZGxlIHRoZSBjYXNlIHdoZW4gdG9wL2JvdHRvbSBkZXBlbmRzIG9uIGhlaWdodFxuICAgICAgICAgIG1heEhlaWdodCA9IEV4cHJzLnN1YihzY29wZSwgcmVtYWlucywgdG9wID8gdG9wIDogYm90dG9tKTtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIEZvciBtdWx0aS1jb2x1bW4gbGF5b3V0IGluIHZlcnRpY2FsIHdyaXRpbmcsIGhlaWdodCBpcyBtYXgtaGVpZ2h0LlxuICAgICAgICBpZiAoXG4gICAgICAgICAgdGhpcy52ZXJ0aWNhbCAmJlxuICAgICAgICAgICh0b0V4cHJBdXRvKHNjb3BlLCBzdHlsZVtcImNvbHVtbi13aWR0aFwiXSwgbnVsbCkgfHxcbiAgICAgICAgICAgIHRvRXhwckF1dG8oc2NvcGUsIHN0eWxlW1wiY29sdW1uLWNvdW50XCJdLCBudWxsKSlcbiAgICAgICAgKSB7XG4gICAgICAgICAgaGVpZ2h0ID0gbWF4SGVpZ2h0O1xuICAgICAgICAgIHRoaXMuaXNBdXRvSGVpZ2h0ID0gZmFsc2U7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIGlmICghdG9wKSB7XG4gICAgICAgIHRvcCA9IEV4cHJzLnN1YihzY29wZSwgcmVtYWlucywgRXhwcnMuYWRkKHNjb3BlLCBib3R0b20sIGhlaWdodCkpO1xuICAgICAgfSBlbHNlIGlmICghaGVpZ2h0KSB7XG4gICAgICAgIGhlaWdodCA9IEV4cHJzLnN1YihzY29wZSwgcmVtYWlucywgRXhwcnMuYWRkKHNjb3BlLCBib3R0b20sIHRvcCkpO1xuICAgICAgfSBlbHNlIGlmICghYm90dG9tKSB7XG4gICAgICAgIGJvdHRvbSA9IEV4cHJzLnN1YihzY29wZSwgcmVtYWlucywgRXhwcnMuYWRkKHNjb3BlLCB0b3AsIGhlaWdodCkpO1xuICAgICAgfVxuICAgIH1cblxuICAgIC8vIHNuYXAtaGVpZ2h0IGlzIGluaGVyaXRlZFxuICAgIGNvbnN0IHNuYXBIZWlnaHRWYWwgPVxuICAgICAgc3R5bGVbXCJzbmFwLWhlaWdodFwiXSB8fFxuICAgICAgKHRoaXMucGFyZW50SW5zdGFuY2UgPyB0aGlzLnBhcmVudEluc3RhbmNlLnN0eWxlW1wic25hcC1oZWlnaHRcIl0gOiBudWxsKTtcbiAgICBjb25zdCBzbmFwSGVpZ2h0ID0gdG9FeHByWmVybyhzY29wZSwgc25hcEhlaWdodFZhbCwgcGFyZW50V2lkdGgpO1xuICAgIHN0eWxlW1widG9wXCJdID0gbmV3IENzcy5FeHByKHRvcCk7XG4gICAgc3R5bGVbXCJtYXJnaW4tdG9wXCJdID0gbmV3IENzcy5FeHByKG1hcmdpblRvcCk7XG4gICAgc3R5bGVbXCJib3JkZXItdG9wLXdpZHRoXCJdID0gbmV3IENzcy5FeHByKGJvcmRlclRvcFdpZHRoKTtcbiAgICBzdHlsZVtcInBhZGRpbmctdG9wXCJdID0gbmV3IENzcy5FeHByKHBhZGRpbmdUb3ApO1xuICAgIHN0eWxlW1wiaGVpZ2h0XCJdID0gbmV3IENzcy5FeHByKGhlaWdodCk7XG4gICAgc3R5bGVbXCJtYXgtaGVpZ2h0XCJdID0gbmV3IENzcy5FeHByKG1heEhlaWdodCA/IG1heEhlaWdodCA6IGhlaWdodCk7XG4gICAgc3R5bGVbXCJwYWRkaW5nLWJvdHRvbVwiXSA9IG5ldyBDc3MuRXhwcihwYWRkaW5nQm90dG9tKTtcbiAgICBzdHlsZVtcImJvcmRlci1ib3R0b20td2lkdGhcIl0gPSBuZXcgQ3NzLkV4cHIoYm9yZGVyQm90dG9tV2lkdGgpO1xuICAgIHN0eWxlW1wibWFyZ2luLWJvdHRvbVwiXSA9IG5ldyBDc3MuRXhwcihtYXJnaW5Cb3R0b20pO1xuICAgIHN0eWxlW1wiYm90dG9tXCJdID0gbmV3IENzcy5FeHByKGJvdHRvbSk7XG4gICAgc3R5bGVbXCJzbmFwLWhlaWdodFwiXSA9IG5ldyBDc3MuRXhwcihzbmFwSGVpZ2h0KTtcbiAgfVxuXG4gIHByaXZhdGUgaW5pdENvbHVtbnMoKTogdm9pZCB7XG4gICAgY29uc3Qgc2NvcGUgPSB0aGlzLnBhZ2VCb3guc2NvcGU7XG4gICAgY29uc3Qgc3R5bGUgPSB0aGlzLnN0eWxlO1xuICAgIGNvbnN0IHdpZHRoID0gdG9FeHByQXV0byhcbiAgICAgIHNjb3BlLFxuICAgICAgc3R5bGVbdGhpcy52ZXJ0aWNhbCA/IFwiaGVpZ2h0XCIgOiBcIndpZHRoXCJdLFxuICAgICAgbnVsbCxcbiAgICApO1xuICAgIGxldCBjb2x1bW5XaWR0aCA9IHRvRXhwckF1dG8oc2NvcGUsIHN0eWxlW1wiY29sdW1uLXdpZHRoXCJdLCB3aWR0aCk7XG4gICAgbGV0IGNvbHVtbkNvdW50ID0gdG9FeHByQXV0byhzY29wZSwgc3R5bGVbXCJjb2x1bW4tY291bnRcIl0sIG51bGwpO1xuICAgIGxldCBjb2x1bW5HYXAgPSB0b0V4cHJOb3JtYWwoc2NvcGUsIHN0eWxlW1wiY29sdW1uLWdhcFwiXSwgbnVsbCk7XG4gICAgaWYgKCFjb2x1bW5HYXApIHtcbiAgICAgIGNvbHVtbkdhcCA9IG5ldyBFeHBycy5OdW1lcmljKHNjb3BlLCAxLCBcImVtXCIpO1xuICAgIH1cbiAgICBpZiAoY29sdW1uV2lkdGggJiYgIWNvbHVtbkNvdW50KSB7XG4gICAgICBjb2x1bW5Db3VudCA9IG5ldyBFeHBycy5DYWxsKHNjb3BlLCBcImZsb29yXCIsIFtcbiAgICAgICAgRXhwcnMuZGl2KFxuICAgICAgICAgIHNjb3BlLFxuICAgICAgICAgIEV4cHJzLmFkZChzY29wZSwgd2lkdGgsIGNvbHVtbkdhcCksXG4gICAgICAgICAgRXhwcnMuYWRkKHNjb3BlLCBjb2x1bW5XaWR0aCwgY29sdW1uR2FwKSxcbiAgICAgICAgKSxcbiAgICAgIF0pO1xuICAgICAgY29sdW1uQ291bnQgPSBuZXcgRXhwcnMuQ2FsbChzY29wZSwgXCJtYXhcIiwgW3Njb3BlLm9uZSwgY29sdW1uQ291bnRdKTtcbiAgICB9XG4gICAgaWYgKCFjb2x1bW5Db3VudCkge1xuICAgICAgY29sdW1uQ291bnQgPSBzY29wZS5vbmU7XG4gICAgfVxuICAgIGNvbHVtbldpZHRoID0gRXhwcnMuc3ViKFxuICAgICAgc2NvcGUsXG4gICAgICBFeHBycy5kaXYoc2NvcGUsIEV4cHJzLmFkZChzY29wZSwgd2lkdGgsIGNvbHVtbkdhcCksIGNvbHVtbkNvdW50KSxcbiAgICAgIGNvbHVtbkdhcCxcbiAgICApO1xuICAgIHN0eWxlW1wiY29sdW1uLXdpZHRoXCJdID0gbmV3IENzcy5FeHByKGNvbHVtbldpZHRoKTtcbiAgICBzdHlsZVtcImNvbHVtbi1jb3VudFwiXSA9IG5ldyBDc3MuRXhwcihjb2x1bW5Db3VudCk7XG4gICAgc3R5bGVbXCJjb2x1bW4tZ2FwXCJdID0gbmV3IENzcy5FeHByKGNvbHVtbkdhcCk7XG4gIH1cblxuICBwcml2YXRlIGRlcGVuZHMoXG4gICAgcHJvcE5hbWU6IHN0cmluZyxcbiAgICB2YWw6IEV4cHJzLlZhbCxcbiAgICBjb250ZXh0OiBFeHBycy5Db250ZXh0LFxuICApOiBib29sZWFuIHtcbiAgICByZXR1cm4gdGhpcy5zdHlsZVtwcm9wTmFtZV1cbiAgICAgIC50b0V4cHIodGhpcy5wYWdlQm94LnNjb3BlLCBudWxsKVxuICAgICAgLmRlcGVuZCh2YWwsIGNvbnRleHQpO1xuICB9XG5cbiAgcHJpdmF0ZSBpbml0KGNvbnRleHQ6IEV4cHJzLkNvbnRleHQpOiB2b2lkIHtcbiAgICAvLyBJZiBjb250ZXh0IGRvZXMgbm90IGltcGxlbWVudCBJbnN0YW5jZUhvbGRlciB3ZSB3b3VsZCBub3QgYmUgYWJsZSB0b1xuICAgIC8vIHJlc29sdmUgXCJwYXJ0aXRpb24ucHJvcGVydHlcIiBuYW1lcyBsYXRlci5cbiAgICBjb25zdCBob2xkZXIgPSBjb250ZXh0IGFzIEluc3RhbmNlSG9sZGVyO1xuICAgIGhvbGRlci5yZWdpc3Rlckluc3RhbmNlKHRoaXMucGFnZUJveC5rZXksIHRoaXMpO1xuICAgIGNvbnN0IHNjb3BlID0gdGhpcy5wYWdlQm94LnNjb3BlO1xuICAgIGNvbnN0IHN0eWxlID0gdGhpcy5zdHlsZTtcbiAgICBjb25zdCByZWdpb25JZHMgPSB0aGlzLnBhcmVudEluc3RhbmNlXG4gICAgICA/IHRoaXMucGFyZW50SW5zdGFuY2UuZ2V0QWN0aXZlUmVnaW9ucyhjb250ZXh0KVxuICAgICAgOiBudWxsO1xuICAgIGNvbnN0IGNhc2NNYXAgPSBDc3NDYXNjYWRlLmZsYXR0ZW5DYXNjYWRlZFN0eWxlKFxuICAgICAgdGhpcy5jYXNjYWRlZCxcbiAgICAgIGNvbnRleHQsXG4gICAgICByZWdpb25JZHMsXG4gICAgICBmYWxzZSxcbiAgICAgIG51bGwsXG4gICAgKTtcbiAgICB0aGlzLnZlcnRpY2FsID0gQ3NzQ2FzY2FkZS5pc1ZlcnRpY2FsKFxuICAgICAgY2FzY01hcCxcbiAgICAgIGNvbnRleHQsXG4gICAgICB0aGlzLnBhcmVudEluc3RhbmNlID8gdGhpcy5wYXJlbnRJbnN0YW5jZS52ZXJ0aWNhbCA6IGZhbHNlLFxuICAgICk7XG4gICAgdGhpcy5ydGwgPSBDc3NDYXNjYWRlLmlzUnRsKFxuICAgICAgY2FzY01hcCxcbiAgICAgIGNvbnRleHQsXG4gICAgICB0aGlzLnBhcmVudEluc3RhbmNlID8gdGhpcy5wYXJlbnRJbnN0YW5jZS5ydGwgOiBmYWxzZSxcbiAgICApO1xuICAgIENzc0Nhc2NhZGUuY29udmVydFRvUGh5c2ljYWwoXG4gICAgICBjYXNjTWFwLFxuICAgICAgc3R5bGUsXG4gICAgICB0aGlzLnZlcnRpY2FsLFxuICAgICAgdGhpcy5ydGwsXG4gICAgICAobmFtZSwgY2FzY1ZhbCkgPT4gY2FzY1ZhbC52YWx1ZSxcbiAgICApO1xuICAgIHRoaXMuYXV0b1dpZHRoID0gbmV3IEV4cHJzLk5hdGl2ZShcbiAgICAgIHNjb3BlLFxuICAgICAgKCkgPT4gdGhpcy5jYWxjdWxhdGVkV2lkdGgsXG4gICAgICBcImF1dG9XaWR0aFwiLFxuICAgICk7XG4gICAgdGhpcy5hdXRvSGVpZ2h0ID0gbmV3IEV4cHJzLk5hdGl2ZShcbiAgICAgIHNjb3BlLFxuICAgICAgKCkgPT4gdGhpcy5jYWxjdWxhdGVkSGVpZ2h0LFxuICAgICAgXCJhdXRvSGVpZ2h0XCIsXG4gICAgKTtcbiAgICB0aGlzLmluaXRIb3Jpem9udGFsKCk7XG4gICAgdGhpcy5pbml0VmVydGljYWwoKTtcbiAgICB0aGlzLmluaXRDb2x1bW5zKCk7XG4gICAgdGhpcy5pbml0RW5hYmxlZCgpO1xuICB9XG5cbiAgZ2V0UHJvcChjb250ZXh0OiBFeHBycy5Db250ZXh0LCBuYW1lOiBzdHJpbmcpOiBDc3MuVmFsIHtcbiAgICBsZXQgdmFsID0gdGhpcy5zdHlsZVtuYW1lXTtcbiAgICBpZiAodmFsKSB7XG4gICAgICB2YWwgPSBDc3NQYXJzZXIuZXZhbHVhdGVDU1NUb0NTUyhjb250ZXh0LCB2YWwsIG5hbWUpO1xuICAgIH1cbiAgICByZXR1cm4gdmFsO1xuICB9XG5cbiAgZ2V0UHJvcEFzTnVtYmVyKGNvbnRleHQ6IEV4cHJzLkNvbnRleHQsIG5hbWU6IHN0cmluZyk6IG51bWJlciB7XG4gICAgbGV0IHZhbCA9IHRoaXMuc3R5bGVbbmFtZV07XG4gICAgaWYgKHZhbCkge1xuICAgICAgdmFsID0gQ3NzUGFyc2VyLmV2YWx1YXRlQ1NTVG9DU1MoY29udGV4dCwgdmFsLCBuYW1lKTtcbiAgICB9XG4gICAgcmV0dXJuIENzcy50b051bWJlcih2YWwsIGNvbnRleHQpO1xuICB9XG5cbiAgZ2V0U3BlY2lhbChjb250ZXh0OiBFeHBycy5Db250ZXh0LCBuYW1lOiBzdHJpbmcpOiBDc3MuVmFsW10ge1xuICAgIGNvbnN0IGFyciA9IENzc0Nhc2NhZGUuZ2V0U3BlY2lhbCh0aGlzLmNhc2NhZGVkLCBuYW1lKTtcbiAgICBpZiAoYXJyKSB7XG4gICAgICBjb25zdCByZXN1bHQgPSBbXSBhcyBDc3MuVmFsW107XG4gICAgICBmb3IgKGxldCBpID0gMDsgaSA8IGFyci5sZW5ndGg7IGkrKykge1xuICAgICAgICBjb25zdCB2ID0gYXJyW2ldLmV2YWx1YXRlKGNvbnRleHQsIFwiXCIpO1xuICAgICAgICBpZiAodiAmJiB2ICE9PSBDc3MuZW1wdHkpIHtcbiAgICAgICAgICByZXN1bHQucHVzaCh2KTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgaWYgKHJlc3VsdC5sZW5ndGgpIHtcbiAgICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIG51bGw7XG4gIH1cblxuICBnZXRBY3RpdmVSZWdpb25zKGNvbnRleHQ6IEV4cHJzLkNvbnRleHQpOiBzdHJpbmdbXSB7XG4gICAgY29uc3QgYXJyID0gdGhpcy5nZXRTcGVjaWFsKGNvbnRleHQsIFwicmVnaW9uLWlkXCIpO1xuICAgIGlmIChhcnIpIHtcbiAgICAgIGNvbnN0IHJlc3VsdCA9IFtdIGFzIHN0cmluZ1tdO1xuICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBhcnIubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgcmVzdWx0W2ldID0gYXJyW2ldLnRvU3RyaW5nKCk7XG4gICAgICB9XG4gICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH1cbiAgICByZXR1cm4gbnVsbDtcbiAgfVxuXG4gIHByb3BhZ2F0ZVByb3BlcnR5KFxuICAgIGNvbnRleHQ6IEV4cHJzLkNvbnRleHQsXG4gICAgY29udGFpbmVyOiBWdHJlZS5Db250YWluZXIsXG4gICAgbmFtZTogc3RyaW5nLFxuICAgIGRvY0ZhY2VzOiBGb250LkRvY3VtZW50RmFjZXMsXG4gICk6IHZvaWQge1xuICAgIHRoaXMucHJvcGFnYXRlUHJvcGVydHlUb0VsZW1lbnQoY29udGV4dCwgY29udGFpbmVyLmVsZW1lbnQsIG5hbWUsIGRvY0ZhY2VzKTtcbiAgfVxuXG4gIHByb3BhZ2F0ZVByb3BlcnR5VG9FbGVtZW50KFxuICAgIGNvbnRleHQ6IEV4cHJzLkNvbnRleHQsXG4gICAgZWxlbWVudDogRWxlbWVudCxcbiAgICBuYW1lOiBzdHJpbmcsXG4gICAgZG9jRmFjZXM6IEZvbnQuRG9jdW1lbnRGYWNlcyxcbiAgKTogdm9pZCB7XG4gICAgbGV0IHZhbCA9IHRoaXMuZ2V0UHJvcChjb250ZXh0LCBuYW1lKTtcbiAgICBpZiAodmFsKSB7XG4gICAgICBpZiAoXG4gICAgICAgIHZhbC5pc051bWVyaWMoKSAmJlxuICAgICAgICBFeHBycy5uZWVkVW5pdENvbnZlcnNpb24oKHZhbCBhcyBDc3MuTnVtZXJpYykudW5pdClcbiAgICAgICkge1xuICAgICAgICB2YWwgPSBDc3MuY29udmVydE51bWVyaWNUb1B4KHZhbCwgY29udGV4dCk7XG4gICAgICB9XG4gICAgICBpZiAobmFtZSA9PT0gXCJmb250LWZhbWlseVwiKSB7XG4gICAgICAgIHZhbCA9IGRvY0ZhY2VzLmZpbHRlckZvbnRGYW1pbHkodmFsKTtcbiAgICAgIH1cbiAgICAgIEJhc2Uuc2V0Q1NTUHJvcGVydHkoZWxlbWVudCwgbmFtZSwgdmFsLnRvU3RyaW5nKCkpO1xuICAgIH1cbiAgfVxuXG4gIHByb3BhZ2F0ZURlbGF5ZWRQcm9wZXJ0eShcbiAgICBjb250ZXh0OiBFeHBycy5Db250ZXh0LFxuICAgIGNvbnRhaW5lcjogVnRyZWUuQ29udGFpbmVyLFxuICAgIG5hbWU6IHN0cmluZyxcbiAgICBkZWxheWVkSXRlbXM6IFZ0cmVlLkRlbGF5ZWRJdGVtW10sXG4gICk6IHZvaWQge1xuICAgIGNvbnN0IHZhbCA9IHRoaXMuZ2V0UHJvcChjb250ZXh0LCBuYW1lKTtcbiAgICBpZiAodmFsKSB7XG4gICAgICBkZWxheWVkSXRlbXMucHVzaChuZXcgVnRyZWUuRGVsYXllZEl0ZW0oY29udGFpbmVyLmVsZW1lbnQsIG5hbWUsIHZhbCkpO1xuICAgIH1cbiAgfVxuXG4gIGFzc2lnbkxlZnRQb3NpdGlvbihjb250ZXh0OiBFeHBycy5Db250ZXh0LCBjb250YWluZXI6IFZ0cmVlLkNvbnRhaW5lcik6IHZvaWQge1xuICAgIGNvbnN0IGxlZnQgPSB0aGlzLmdldFByb3BBc051bWJlcihjb250ZXh0LCBcImxlZnRcIik7XG4gICAgY29uc3QgbWFyZ2luTGVmdCA9IHRoaXMuZ2V0UHJvcEFzTnVtYmVyKGNvbnRleHQsIFwibWFyZ2luLWxlZnRcIik7XG4gICAgY29uc3QgcGFkZGluZ0xlZnQgPSB0aGlzLmdldFByb3BBc051bWJlcihjb250ZXh0LCBcInBhZGRpbmctbGVmdFwiKTtcbiAgICBjb25zdCBib3JkZXJMZWZ0V2lkdGggPSB0aGlzLmdldFByb3BBc051bWJlcihjb250ZXh0LCBcImJvcmRlci1sZWZ0LXdpZHRoXCIpO1xuICAgIGNvbnN0IHdpZHRoID0gdGhpcy5nZXRQcm9wQXNOdW1iZXIoY29udGV4dCwgXCJ3aWR0aFwiKTtcbiAgICBjb250YWluZXIuc2V0SG9yaXpvbnRhbFBvc2l0aW9uKGxlZnQsIHdpZHRoKTtcbiAgICBCYXNlLnNldENTU1Byb3BlcnR5KGNvbnRhaW5lci5lbGVtZW50LCBcIm1hcmdpbi1sZWZ0XCIsIGAke21hcmdpbkxlZnR9cHhgKTtcbiAgICBCYXNlLnNldENTU1Byb3BlcnR5KGNvbnRhaW5lci5lbGVtZW50LCBcInBhZGRpbmctbGVmdFwiLCBgJHtwYWRkaW5nTGVmdH1weGApO1xuICAgIEJhc2Uuc2V0Q1NTUHJvcGVydHkoXG4gICAgICBjb250YWluZXIuZWxlbWVudCxcbiAgICAgIFwiYm9yZGVyLWxlZnQtd2lkdGhcIixcbiAgICAgIGAke2JvcmRlckxlZnRXaWR0aH1weGAsXG4gICAgKTtcbiAgICBjb250YWluZXIubWFyZ2luTGVmdCA9IG1hcmdpbkxlZnQ7XG4gICAgY29udGFpbmVyLmJvcmRlckxlZnQgPSBib3JkZXJMZWZ0V2lkdGg7XG4gICAgY29udGFpbmVyLnBhZGRpbmdMZWZ0ID0gcGFkZGluZ0xlZnQ7XG4gIH1cblxuICBhc3NpZ25SaWdodFBvc2l0aW9uKFxuICAgIGNvbnRleHQ6IEV4cHJzLkNvbnRleHQsXG4gICAgY29udGFpbmVyOiBWdHJlZS5Db250YWluZXIsXG4gICk6IHZvaWQge1xuICAgIGNvbnN0IHJpZ2h0ID0gdGhpcy5nZXRQcm9wQXNOdW1iZXIoY29udGV4dCwgXCJyaWdodFwiKTtcbiAgICBjb25zdCBzbmFwV2lkdGggPSB0aGlzLmdldFByb3BBc051bWJlcihjb250ZXh0LCBcInNuYXAtaGVpZ2h0XCIpO1xuICAgIGNvbnN0IG1hcmdpblJpZ2h0ID0gdGhpcy5nZXRQcm9wQXNOdW1iZXIoY29udGV4dCwgXCJtYXJnaW4tcmlnaHRcIik7XG4gICAgbGV0IHBhZGRpbmdSaWdodCA9IHRoaXMuZ2V0UHJvcEFzTnVtYmVyKGNvbnRleHQsIFwicGFkZGluZy1yaWdodFwiKTtcbiAgICBjb25zdCBib3JkZXJSaWdodFdpZHRoID0gdGhpcy5nZXRQcm9wQXNOdW1iZXIoXG4gICAgICBjb250ZXh0LFxuICAgICAgXCJib3JkZXItcmlnaHQtd2lkdGhcIixcbiAgICApO1xuICAgIEJhc2Uuc2V0Q1NTUHJvcGVydHkoY29udGFpbmVyLmVsZW1lbnQsIFwibWFyZ2luLXJpZ2h0XCIsIGAke21hcmdpblJpZ2h0fXB4YCk7XG4gICAgQmFzZS5zZXRDU1NQcm9wZXJ0eShcbiAgICAgIGNvbnRhaW5lci5lbGVtZW50LFxuICAgICAgXCJwYWRkaW5nLXJpZ2h0XCIsXG4gICAgICBgJHtwYWRkaW5nUmlnaHR9cHhgLFxuICAgICk7XG4gICAgQmFzZS5zZXRDU1NQcm9wZXJ0eShcbiAgICAgIGNvbnRhaW5lci5lbGVtZW50LFxuICAgICAgXCJib3JkZXItcmlnaHQtd2lkdGhcIixcbiAgICAgIGAke2JvcmRlclJpZ2h0V2lkdGh9cHhgLFxuICAgICk7XG4gICAgY29udGFpbmVyLm1hcmdpblJpZ2h0ID0gbWFyZ2luUmlnaHQ7XG4gICAgY29udGFpbmVyLmJvcmRlclJpZ2h0ID0gYm9yZGVyUmlnaHRXaWR0aDtcbiAgICBpZiAodGhpcy52ZXJ0aWNhbCAmJiBzbmFwV2lkdGggPiAwKSB7XG4gICAgICBjb25zdCB4cG9zID0gcmlnaHQgKyBjb250YWluZXIuZ2V0SW5zZXRSaWdodCgpO1xuICAgICAgY29uc3QgciA9IHhwb3MgLSBNYXRoLmZsb29yKHhwb3MgLyBzbmFwV2lkdGgpICogc25hcFdpZHRoO1xuICAgICAgaWYgKHIgPiAwKSB7XG4gICAgICAgIGNvbnRhaW5lci5zbmFwT2Zmc2V0WCA9IHNuYXBXaWR0aCAtIHI7XG4gICAgICAgIHBhZGRpbmdSaWdodCArPSBjb250YWluZXIuc25hcE9mZnNldFg7XG4gICAgICB9XG4gICAgfVxuICAgIGNvbnRhaW5lci5wYWRkaW5nUmlnaHQgPSBwYWRkaW5nUmlnaHQ7XG4gICAgY29udGFpbmVyLnNuYXBXaWR0aCA9IHNuYXBXaWR0aDtcbiAgfVxuXG4gIGFzc2lnblRvcFBvc2l0aW9uKGNvbnRleHQ6IEV4cHJzLkNvbnRleHQsIGNvbnRhaW5lcjogVnRyZWUuQ29udGFpbmVyKTogdm9pZCB7XG4gICAgY29uc3Qgc25hcEhlaWdodCA9IHRoaXMuZ2V0UHJvcEFzTnVtYmVyKGNvbnRleHQsIFwic25hcC1oZWlnaHRcIik7XG4gICAgY29uc3QgdG9wID0gdGhpcy5nZXRQcm9wQXNOdW1iZXIoY29udGV4dCwgXCJ0b3BcIik7XG4gICAgY29uc3QgbWFyZ2luVG9wID0gdGhpcy5nZXRQcm9wQXNOdW1iZXIoY29udGV4dCwgXCJtYXJnaW4tdG9wXCIpO1xuICAgIGxldCBwYWRkaW5nVG9wID0gdGhpcy5nZXRQcm9wQXNOdW1iZXIoY29udGV4dCwgXCJwYWRkaW5nLXRvcFwiKTtcbiAgICBjb25zdCBib3JkZXJUb3BXaWR0aCA9IHRoaXMuZ2V0UHJvcEFzTnVtYmVyKGNvbnRleHQsIFwiYm9yZGVyLXRvcC13aWR0aFwiKTtcbiAgICBjb250YWluZXIudG9wID0gdG9wO1xuICAgIGNvbnRhaW5lci5tYXJnaW5Ub3AgPSBtYXJnaW5Ub3A7XG4gICAgY29udGFpbmVyLmJvcmRlclRvcCA9IGJvcmRlclRvcFdpZHRoO1xuICAgIGNvbnRhaW5lci5zbmFwSGVpZ2h0ID0gc25hcEhlaWdodDtcbiAgICBpZiAoIXRoaXMudmVydGljYWwgJiYgc25hcEhlaWdodCA+IDApIHtcbiAgICAgIGNvbnN0IHlwb3MgPSB0b3AgKyBjb250YWluZXIuZ2V0SW5zZXRUb3AoKTtcbiAgICAgIGNvbnN0IHIgPSB5cG9zIC0gTWF0aC5mbG9vcih5cG9zIC8gc25hcEhlaWdodCkgKiBzbmFwSGVpZ2h0O1xuICAgICAgaWYgKHIgPiAwKSB7XG4gICAgICAgIGNvbnRhaW5lci5zbmFwT2Zmc2V0WSA9IHNuYXBIZWlnaHQgLSByO1xuICAgICAgICBwYWRkaW5nVG9wICs9IGNvbnRhaW5lci5zbmFwT2Zmc2V0WTtcbiAgICAgIH1cbiAgICB9XG4gICAgY29udGFpbmVyLnBhZGRpbmdUb3AgPSBwYWRkaW5nVG9wO1xuICAgIEJhc2Uuc2V0Q1NTUHJvcGVydHkoY29udGFpbmVyLmVsZW1lbnQsIFwidG9wXCIsIGAke3RvcH1weGApO1xuICAgIEJhc2Uuc2V0Q1NTUHJvcGVydHkoY29udGFpbmVyLmVsZW1lbnQsIFwibWFyZ2luLXRvcFwiLCBgJHttYXJnaW5Ub3B9cHhgKTtcbiAgICBCYXNlLnNldENTU1Byb3BlcnR5KGNvbnRhaW5lci5lbGVtZW50LCBcInBhZGRpbmctdG9wXCIsIGAke3BhZGRpbmdUb3B9cHhgKTtcbiAgICBCYXNlLnNldENTU1Byb3BlcnR5KFxuICAgICAgY29udGFpbmVyLmVsZW1lbnQsXG4gICAgICBcImJvcmRlci10b3Atd2lkdGhcIixcbiAgICAgIGAke2JvcmRlclRvcFdpZHRofXB4YCxcbiAgICApO1xuICB9XG5cbiAgYXNzaWduQm90dG9tUG9zaXRpb24oXG4gICAgY29udGV4dDogRXhwcnMuQ29udGV4dCxcbiAgICBjb250YWluZXI6IFZ0cmVlLkNvbnRhaW5lcixcbiAgKTogdm9pZCB7XG4gICAgY29uc3QgbWFyZ2luQm90dG9tID0gdGhpcy5nZXRQcm9wQXNOdW1iZXIoY29udGV4dCwgXCJtYXJnaW4tYm90dG9tXCIpO1xuICAgIGNvbnN0IHBhZGRpbmdCb3R0b20gPSB0aGlzLmdldFByb3BBc051bWJlcihjb250ZXh0LCBcInBhZGRpbmctYm90dG9tXCIpO1xuICAgIGNvbnN0IGJvcmRlckJvdHRvbVdpZHRoID0gdGhpcy5nZXRQcm9wQXNOdW1iZXIoXG4gICAgICBjb250ZXh0LFxuICAgICAgXCJib3JkZXItYm90dG9tLXdpZHRoXCIsXG4gICAgKTtcbiAgICBjb25zdCBoZWlnaHQgPVxuICAgICAgdGhpcy5nZXRQcm9wQXNOdW1iZXIoY29udGV4dCwgXCJoZWlnaHRcIikgLSBjb250YWluZXIuc25hcE9mZnNldFk7XG4gICAgQmFzZS5zZXRDU1NQcm9wZXJ0eShjb250YWluZXIuZWxlbWVudCwgXCJoZWlnaHRcIiwgYCR7aGVpZ2h0fXB4YCk7XG4gICAgQmFzZS5zZXRDU1NQcm9wZXJ0eShcbiAgICAgIGNvbnRhaW5lci5lbGVtZW50LFxuICAgICAgXCJtYXJnaW4tYm90dG9tXCIsXG4gICAgICBgJHttYXJnaW5Cb3R0b219cHhgLFxuICAgICk7XG4gICAgQmFzZS5zZXRDU1NQcm9wZXJ0eShcbiAgICAgIGNvbnRhaW5lci5lbGVtZW50LFxuICAgICAgXCJwYWRkaW5nLWJvdHRvbVwiLFxuICAgICAgYCR7cGFkZGluZ0JvdHRvbX1weGAsXG4gICAgKTtcbiAgICBCYXNlLnNldENTU1Byb3BlcnR5KFxuICAgICAgY29udGFpbmVyLmVsZW1lbnQsXG4gICAgICBcImJvcmRlci1ib3R0b20td2lkdGhcIixcbiAgICAgIGAke2JvcmRlckJvdHRvbVdpZHRofXB4YCxcbiAgICApO1xuICAgIGNvbnRhaW5lci5oZWlnaHQgPSBoZWlnaHQgLSBjb250YWluZXIuc25hcE9mZnNldFk7XG4gICAgY29udGFpbmVyLm1hcmdpbkJvdHRvbSA9IG1hcmdpbkJvdHRvbTtcbiAgICBjb250YWluZXIuYm9yZGVyQm90dG9tID0gYm9yZGVyQm90dG9tV2lkdGg7XG4gICAgY29udGFpbmVyLnBhZGRpbmdCb3R0b20gPSBwYWRkaW5nQm90dG9tO1xuICB9XG5cbiAgYXNzaWduQmVmb3JlUG9zaXRpb24oXG4gICAgY29udGV4dDogRXhwcnMuQ29udGV4dCxcbiAgICBjb250YWluZXI6IFZ0cmVlLkNvbnRhaW5lcixcbiAgKTogdm9pZCB7XG4gICAgaWYgKHRoaXMudmVydGljYWwpIHtcbiAgICAgIHRoaXMuYXNzaWduUmlnaHRQb3NpdGlvbihjb250ZXh0LCBjb250YWluZXIpO1xuICAgIH0gZWxzZSB7XG4gICAgICB0aGlzLmFzc2lnblRvcFBvc2l0aW9uKGNvbnRleHQsIGNvbnRhaW5lcik7XG4gICAgfVxuICB9XG5cbiAgYXNzaWduQWZ0ZXJQb3NpdGlvbihcbiAgICBjb250ZXh0OiBFeHBycy5Db250ZXh0LFxuICAgIGNvbnRhaW5lcjogVnRyZWUuQ29udGFpbmVyLFxuICApOiB2b2lkIHtcbiAgICBpZiAodGhpcy52ZXJ0aWNhbCkge1xuICAgICAgdGhpcy5hc3NpZ25MZWZ0UG9zaXRpb24oY29udGV4dCwgY29udGFpbmVyKTtcbiAgICB9IGVsc2Uge1xuICAgICAgdGhpcy5hc3NpZ25Cb3R0b21Qb3NpdGlvbihjb250ZXh0LCBjb250YWluZXIpO1xuICAgIH1cbiAgfVxuXG4gIGFzc2lnblN0YXJ0RW5kUG9zaXRpb24oXG4gICAgY29udGV4dDogRXhwcnMuQ29udGV4dCxcbiAgICBjb250YWluZXI6IFZ0cmVlLkNvbnRhaW5lcixcbiAgKTogdm9pZCB7XG4gICAgaWYgKHRoaXMudmVydGljYWwpIHtcbiAgICAgIHRoaXMuYXNzaWduVG9wUG9zaXRpb24oY29udGV4dCwgY29udGFpbmVyKTtcbiAgICAgIHRoaXMuYXNzaWduQm90dG9tUG9zaXRpb24oY29udGV4dCwgY29udGFpbmVyKTtcbiAgICB9IGVsc2Uge1xuICAgICAgdGhpcy5hc3NpZ25SaWdodFBvc2l0aW9uKGNvbnRleHQsIGNvbnRhaW5lcik7XG4gICAgICB0aGlzLmFzc2lnbkxlZnRQb3NpdGlvbihjb250ZXh0LCBjb250YWluZXIpO1xuICAgIH1cbiAgfVxuXG4gIHNpemVXaXRoTWF4SGVpZ2h0KGNvbnRleHQ6IEV4cHJzLkNvbnRleHQsIGNvbnRhaW5lcjogVnRyZWUuQ29udGFpbmVyKTogdm9pZCB7XG4gICAgQmFzZS5zZXRDU1NQcm9wZXJ0eShjb250YWluZXIuZWxlbWVudCwgXCJib3JkZXItdG9wLXdpZHRoXCIsIFwiMHB4XCIpO1xuICAgIGxldCBoZWlnaHQgPSB0aGlzLmdldFByb3BBc051bWJlcihjb250ZXh0LCBcIm1heC1oZWlnaHRcIik7XG4gICAgaWYgKHRoaXMuaXNUb3BEZXBlbmRlbnRPbkF1dG9IZWlnaHQpIHtcbiAgICAgIGNvbnRhaW5lci5zZXRWZXJ0aWNhbFBvc2l0aW9uKDAsIGhlaWdodCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHRoaXMuYXNzaWduVG9wUG9zaXRpb24oY29udGV4dCwgY29udGFpbmVyKTtcbiAgICAgIGhlaWdodCAtPSBjb250YWluZXIuc25hcE9mZnNldFk7XG4gICAgICBjb250YWluZXIuaGVpZ2h0ID0gaGVpZ2h0O1xuICAgICAgQmFzZS5zZXRDU1NQcm9wZXJ0eShjb250YWluZXIuZWxlbWVudCwgXCJoZWlnaHRcIiwgYCR7aGVpZ2h0fXB4YCk7XG4gICAgfVxuICB9XG5cbiAgc2l6ZVdpdGhNYXhXaWR0aChjb250ZXh0OiBFeHBycy5Db250ZXh0LCBjb250YWluZXI6IFZ0cmVlLkNvbnRhaW5lcik6IHZvaWQge1xuICAgIEJhc2Uuc2V0Q1NTUHJvcGVydHkoY29udGFpbmVyLmVsZW1lbnQsIFwiYm9yZGVyLWxlZnQtd2lkdGhcIiwgXCIwcHhcIik7XG4gICAgbGV0IHdpZHRoID0gdGhpcy5nZXRQcm9wQXNOdW1iZXIoY29udGV4dCwgXCJtYXgtd2lkdGhcIik7XG4gICAgaWYgKHRoaXMuaXNSaWdodERlcGVuZGVudE9uQXV0b1dpZHRoKSB7XG4gICAgICBjb250YWluZXIuc2V0SG9yaXpvbnRhbFBvc2l0aW9uKDAsIHdpZHRoKTtcbiAgICB9IGVsc2Uge1xuICAgICAgdGhpcy5hc3NpZ25SaWdodFBvc2l0aW9uKGNvbnRleHQsIGNvbnRhaW5lcik7XG4gICAgICB3aWR0aCAtPSBjb250YWluZXIuc25hcE9mZnNldFg7XG4gICAgICBjb250YWluZXIud2lkdGggPSB3aWR0aDtcbiAgICAgIGNvbnN0IHJpZ2h0ID0gdGhpcy5nZXRQcm9wQXNOdW1iZXIoY29udGV4dCwgXCJyaWdodFwiKTtcbiAgICAgIEJhc2Uuc2V0Q1NTUHJvcGVydHkoY29udGFpbmVyLmVsZW1lbnQsIFwicmlnaHRcIiwgYCR7cmlnaHR9cHhgKTtcbiAgICAgIEJhc2Uuc2V0Q1NTUHJvcGVydHkoY29udGFpbmVyLmVsZW1lbnQsIFwid2lkdGhcIiwgYCR7d2lkdGh9cHhgKTtcbiAgICB9XG4gIH1cblxuICBwcmVwYXJlQ29udGFpbmVyKFxuICAgIGNvbnRleHQ6IEV4cHJzLkNvbnRleHQsXG4gICAgY29udGFpbmVyOiBWdHJlZS5Db250YWluZXIsXG4gICAgcGFnZTogVnRyZWUuUGFnZSxcbiAgICBkb2NGYWNlczogRm9udC5Eb2N1bWVudEZhY2VzLFxuICAgIGNsaWVudExheW91dDogVnRyZWUuQ2xpZW50TGF5b3V0LFxuICApOiB2b2lkIHtcbiAgICBpZiAoIXRoaXMucGFyZW50SW5zdGFuY2UgfHwgdGhpcy52ZXJ0aWNhbCAhPSB0aGlzLnBhcmVudEluc3RhbmNlLnZlcnRpY2FsKSB7XG4gICAgICBCYXNlLnNldENTU1Byb3BlcnR5KFxuICAgICAgICBjb250YWluZXIuZWxlbWVudCxcbiAgICAgICAgXCJ3cml0aW5nLW1vZGVcIixcbiAgICAgICAgdGhpcy52ZXJ0aWNhbCA/IFwidmVydGljYWwtcmxcIiA6IFwiaG9yaXpvbnRhbC10YlwiLFxuICAgICAgKTtcbiAgICB9XG4gICAgaWYgKHRoaXMudmVydGljYWwgPyB0aGlzLmlzQXV0b1dpZHRoIDogdGhpcy5pc0F1dG9IZWlnaHQpIHtcbiAgICAgIGlmICh0aGlzLnZlcnRpY2FsKSB7XG4gICAgICAgIHRoaXMuc2l6ZVdpdGhNYXhXaWR0aChjb250ZXh0LCBjb250YWluZXIpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdGhpcy5zaXplV2l0aE1heEhlaWdodChjb250ZXh0LCBjb250YWluZXIpO1xuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICB0aGlzLmFzc2lnbkJlZm9yZVBvc2l0aW9uKGNvbnRleHQsIGNvbnRhaW5lcik7XG4gICAgICB0aGlzLmFzc2lnbkFmdGVyUG9zaXRpb24oY29udGV4dCwgY29udGFpbmVyKTtcbiAgICB9XG4gICAgaWYgKHRoaXMudmVydGljYWwgPyB0aGlzLmlzQXV0b0hlaWdodCA6IHRoaXMuaXNBdXRvV2lkdGgpIHtcbiAgICAgIGlmICh0aGlzLnZlcnRpY2FsKSB7XG4gICAgICAgIHRoaXMuc2l6ZVdpdGhNYXhIZWlnaHQoY29udGV4dCwgY29udGFpbmVyKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHRoaXMuc2l6ZVdpdGhNYXhXaWR0aChjb250ZXh0LCBjb250YWluZXIpO1xuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICB0aGlzLmFzc2lnblN0YXJ0RW5kUG9zaXRpb24oY29udGV4dCwgY29udGFpbmVyKTtcbiAgICB9XG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCBwYXNzUHJlUHJvcGVydGllcy5sZW5ndGg7IGkrKykge1xuICAgICAgdGhpcy5wcm9wYWdhdGVQcm9wZXJ0eShcbiAgICAgICAgY29udGV4dCxcbiAgICAgICAgY29udGFpbmVyLFxuICAgICAgICBwYXNzUHJlUHJvcGVydGllc1tpXSxcbiAgICAgICAgZG9jRmFjZXMsXG4gICAgICApO1xuICAgIH1cbiAgfVxuXG4gIHRyYW5zZmVyQ29udGVudFByb3BzKFxuICAgIGNvbnRleHQ6IEV4cHJzLkNvbnRleHQsXG4gICAgY29udGFpbmVyOiBWdHJlZS5Db250YWluZXIsXG4gICAgcGFnZTogVnRyZWUuUGFnZSxcbiAgICBkb2NGYWNlczogRm9udC5Eb2N1bWVudEZhY2VzLFxuICApOiB2b2lkIHtcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IHBhc3NDb250ZW50UHJvcGVydGllcy5sZW5ndGg7IGkrKykge1xuICAgICAgdGhpcy5wcm9wYWdhdGVQcm9wZXJ0eShcbiAgICAgICAgY29udGV4dCxcbiAgICAgICAgY29udGFpbmVyLFxuICAgICAgICBwYXNzQ29udGVudFByb3BlcnRpZXNbaV0sXG4gICAgICAgIGRvY0ZhY2VzLFxuICAgICAgKTtcbiAgICB9XG4gIH1cblxuICB0cmFuc2ZlclNpbmdsVXJpQ29udGVudFByb3BzKFxuICAgIGNvbnRleHQ6IEV4cHJzLkNvbnRleHQsXG4gICAgZWxlbWVudDogRWxlbWVudCxcbiAgICBkb2NGYWNlczogRm9udC5Eb2N1bWVudEZhY2VzLFxuICApOiB2b2lkIHtcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IHBhc3NTaW5nbGVVcmlDb250ZW50UHJvcGVydGllcy5sZW5ndGg7IGkrKykge1xuICAgICAgdGhpcy5wcm9wYWdhdGVQcm9wZXJ0eVRvRWxlbWVudChcbiAgICAgICAgY29udGV4dCxcbiAgICAgICAgZWxlbWVudCxcbiAgICAgICAgcGFzc1NpbmdsZVVyaUNvbnRlbnRQcm9wZXJ0aWVzW2ldLFxuICAgICAgICBkb2NGYWNlcyxcbiAgICAgICk7XG4gICAgfVxuICB9XG5cbiAgLyoqXG4gICAqIEBwYXJhbSBjb2x1bW4gKG51bGwgd2hlbiBjb250ZW50IGNvbWVzIGZyb20gdGhlIGNvbnRlbnQgcHJvcGVydHkpXG4gICAqL1xuICBmaW5pc2hDb250YWluZXIoXG4gICAgY29udGV4dDogRXhwcnMuQ29udGV4dCxcbiAgICBjb250YWluZXI6IFZ0cmVlLkNvbnRhaW5lcixcbiAgICBwYWdlOiBWdHJlZS5QYWdlLFxuICAgIGNvbHVtbjogVnRyZWUuQ29udGFpbmVyLFxuICAgIGNvbHVtbkNvdW50OiBudW1iZXIsXG4gICAgY2xpZW50TGF5b3V0OiBWdHJlZS5DbGllbnRMYXlvdXQsXG4gICAgZG9jRmFjZXM6IEZvbnQuRG9jdW1lbnRGYWNlcyxcbiAgKTogdm9pZCB7XG4gICAgaWYgKHRoaXMudmVydGljYWwpIHtcbiAgICAgIHRoaXMuY2FsY3VsYXRlZFdpZHRoID1cbiAgICAgICAgY29udGFpbmVyLmNvbXB1dGVkQmxvY2tTaXplICsgY29udGFpbmVyLnNuYXBPZmZzZXRYO1xuICAgIH0gZWxzZSB7XG4gICAgICB0aGlzLmNhbGN1bGF0ZWRIZWlnaHQgPVxuICAgICAgICBjb250YWluZXIuY29tcHV0ZWRCbG9ja1NpemUgKyBjb250YWluZXIuc25hcE9mZnNldFk7XG4gICAgfVxuICAgIGNvbnN0IHJlYWRIZWlnaHQgPSAodGhpcy52ZXJ0aWNhbCB8fCAhY29sdW1uKSAmJiB0aGlzLmlzQXV0b0hlaWdodDtcbiAgICBjb25zdCByZWFkV2lkdGggPSAoIXRoaXMudmVydGljYWwgfHwgIWNvbHVtbikgJiYgdGhpcy5pc0F1dG9XaWR0aDtcbiAgICBsZXQgYmJveDogVnRyZWUuQ2xpZW50UmVjdCA9IG51bGw7XG4gICAgaWYgKHJlYWRXaWR0aCB8fCByZWFkSGVpZ2h0KSB7XG4gICAgICBpZiAocmVhZFdpZHRoKSB7XG4gICAgICAgIEJhc2Uuc2V0Q1NTUHJvcGVydHkoY29udGFpbmVyLmVsZW1lbnQsIFwid2lkdGhcIiwgXCJhdXRvXCIpO1xuICAgICAgfVxuICAgICAgaWYgKHJlYWRIZWlnaHQpIHtcbiAgICAgICAgQmFzZS5zZXRDU1NQcm9wZXJ0eShjb250YWluZXIuZWxlbWVudCwgXCJoZWlnaHRcIiwgXCJhdXRvXCIpO1xuICAgICAgfVxuICAgICAgYmJveCA9IGNsaWVudExheW91dC5nZXRFbGVtZW50Q2xpZW50UmVjdChcbiAgICAgICAgY29sdW1uID8gY29sdW1uLmVsZW1lbnQgOiBjb250YWluZXIuZWxlbWVudCxcbiAgICAgICk7XG4gICAgICBpZiAocmVhZFdpZHRoKSB7XG4gICAgICAgIHRoaXMuY2FsY3VsYXRlZFdpZHRoID0gTWF0aC5jZWlsKFxuICAgICAgICAgIGJib3gucmlnaHQgLVxuICAgICAgICAgICAgYmJveC5sZWZ0IC1cbiAgICAgICAgICAgIGNvbnRhaW5lci5wYWRkaW5nTGVmdCAtXG4gICAgICAgICAgICBjb250YWluZXIuYm9yZGVyTGVmdCAtXG4gICAgICAgICAgICBjb250YWluZXIucGFkZGluZ1JpZ2h0IC1cbiAgICAgICAgICAgIGNvbnRhaW5lci5ib3JkZXJSaWdodCxcbiAgICAgICAgKTtcbiAgICAgICAgaWYgKHRoaXMudmVydGljYWwpIHtcbiAgICAgICAgICB0aGlzLmNhbGN1bGF0ZWRXaWR0aCArPSBjb250YWluZXIuc25hcE9mZnNldFg7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIGlmIChyZWFkSGVpZ2h0KSB7XG4gICAgICAgIHRoaXMuY2FsY3VsYXRlZEhlaWdodCA9XG4gICAgICAgICAgYmJveC5ib3R0b20gLVxuICAgICAgICAgIGJib3gudG9wIC1cbiAgICAgICAgICBjb250YWluZXIucGFkZGluZ1RvcCAtXG4gICAgICAgICAgY29udGFpbmVyLmJvcmRlclRvcCAtXG4gICAgICAgICAgY29udGFpbmVyLnBhZGRpbmdCb3R0b20gLVxuICAgICAgICAgIGNvbnRhaW5lci5ib3JkZXJCb3R0b207XG4gICAgICAgIGlmICghdGhpcy52ZXJ0aWNhbCkge1xuICAgICAgICAgIHRoaXMuY2FsY3VsYXRlZEhlaWdodCArPSBjb250YWluZXIuc25hcE9mZnNldFk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gICAgaWYgKHRoaXMudmVydGljYWwgPyB0aGlzLmlzQXV0b0hlaWdodCA6IHRoaXMuaXNBdXRvV2lkdGgpIHtcbiAgICAgIHRoaXMuYXNzaWduU3RhcnRFbmRQb3NpdGlvbihjb250ZXh0LCBjb250YWluZXIpO1xuICAgIH1cbiAgICBpZiAodGhpcy52ZXJ0aWNhbCA/IHRoaXMuaXNBdXRvV2lkdGggOiB0aGlzLmlzQXV0b0hlaWdodCkge1xuICAgICAgaWYgKFxuICAgICAgICB0aGlzLnZlcnRpY2FsXG4gICAgICAgICAgPyB0aGlzLmlzUmlnaHREZXBlbmRlbnRPbkF1dG9XaWR0aFxuICAgICAgICAgIDogdGhpcy5pc1RvcERlcGVuZGVudE9uQXV0b0hlaWdodFxuICAgICAgKSB7XG4gICAgICAgIHRoaXMuYXNzaWduQmVmb3JlUG9zaXRpb24oY29udGV4dCwgY29udGFpbmVyKTtcbiAgICAgIH1cbiAgICAgIHRoaXMuYXNzaWduQWZ0ZXJQb3NpdGlvbihjb250ZXh0LCBjb250YWluZXIpO1xuICAgIH1cbiAgICBpZiAoY29sdW1uQ291bnQgPiAxKSB7XG4gICAgICBjb25zdCBydWxlV2lkdGggPSB0aGlzLmdldFByb3BBc051bWJlcihjb250ZXh0LCBcImNvbHVtbi1ydWxlLXdpZHRoXCIpO1xuICAgICAgY29uc3QgcnVsZVN0eWxlID0gdGhpcy5nZXRQcm9wKGNvbnRleHQsIFwiY29sdW1uLXJ1bGUtc3R5bGVcIik7XG4gICAgICBjb25zdCBydWxlQ29sb3IgPSB0aGlzLmdldFByb3AoY29udGV4dCwgXCJjb2x1bW4tcnVsZS1jb2xvclwiKTtcbiAgICAgIGlmIChcbiAgICAgICAgcnVsZVdpZHRoID4gMCAmJlxuICAgICAgICBydWxlU3R5bGUgJiZcbiAgICAgICAgcnVsZVN0eWxlICE9IENzcy5pZGVudC5ub25lICYmXG4gICAgICAgIHJ1bGVDb2xvciAhPSBDc3MuaWRlbnQudHJhbnNwYXJlbnRcbiAgICAgICkge1xuICAgICAgICBjb25zdCBjb2x1bW5HYXAgPSB0aGlzLmdldFByb3BBc051bWJlcihjb250ZXh0LCBcImNvbHVtbi1nYXBcIik7XG4gICAgICAgIGNvbnN0IGNvbnRhaW5lclNpemUgPSB0aGlzLnZlcnRpY2FsXG4gICAgICAgICAgPyBjb250YWluZXIuaGVpZ2h0XG4gICAgICAgICAgOiBjb250YWluZXIud2lkdGg7XG4gICAgICAgIGNvbnN0IGJvcmRlciA9IHRoaXMudmVydGljYWwgPyBcImJvcmRlci10b3BcIiA6IFwiYm9yZGVyLWxlZnRcIjtcbiAgICAgICAgZm9yIChsZXQgaSA9IDE7IGkgPCBjb2x1bW5Db3VudDsgaSsrKSB7XG4gICAgICAgICAgY29uc3QgcG9zID1cbiAgICAgICAgICAgICgoY29udGFpbmVyU2l6ZSArIGNvbHVtbkdhcCkgKiBpKSAvIGNvbHVtbkNvdW50IC1cbiAgICAgICAgICAgIGNvbHVtbkdhcCAvIDIgK1xuICAgICAgICAgICAgY29udGFpbmVyLnBhZGRpbmdMZWZ0IC1cbiAgICAgICAgICAgIHJ1bGVXaWR0aCAvIDI7XG4gICAgICAgICAgY29uc3Qgc2l6ZSA9XG4gICAgICAgICAgICBjb250YWluZXIuaGVpZ2h0ICsgY29udGFpbmVyLnBhZGRpbmdUb3AgKyBjb250YWluZXIucGFkZGluZ0JvdHRvbTtcbiAgICAgICAgICBjb25zdCBydWxlID0gY29udGFpbmVyLmVsZW1lbnQub3duZXJEb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiZGl2XCIpO1xuICAgICAgICAgIEJhc2Uuc2V0Q1NTUHJvcGVydHkocnVsZSwgXCJwb3NpdGlvblwiLCBcImFic29sdXRlXCIpO1xuICAgICAgICAgIEJhc2Uuc2V0Q1NTUHJvcGVydHkocnVsZSwgdGhpcy52ZXJ0aWNhbCA/IFwibGVmdFwiIDogXCJ0b3BcIiwgXCIwcHhcIik7XG4gICAgICAgICAgQmFzZS5zZXRDU1NQcm9wZXJ0eShydWxlLCB0aGlzLnZlcnRpY2FsID8gXCJ0b3BcIiA6IFwibGVmdFwiLCBgJHtwb3N9cHhgKTtcbiAgICAgICAgICBCYXNlLnNldENTU1Byb3BlcnR5KHJ1bGUsIHRoaXMudmVydGljYWwgPyBcImhlaWdodFwiIDogXCJ3aWR0aFwiLCBcIjBweFwiKTtcbiAgICAgICAgICBCYXNlLnNldENTU1Byb3BlcnR5KFxuICAgICAgICAgICAgcnVsZSxcbiAgICAgICAgICAgIHRoaXMudmVydGljYWwgPyBcIndpZHRoXCIgOiBcImhlaWdodFwiLFxuICAgICAgICAgICAgYCR7c2l6ZX1weGAsXG4gICAgICAgICAgKTtcbiAgICAgICAgICBCYXNlLnNldENTU1Byb3BlcnR5KFxuICAgICAgICAgICAgcnVsZSxcbiAgICAgICAgICAgIGJvcmRlcixcbiAgICAgICAgICAgIGAke3J1bGVXaWR0aH1weCAke3J1bGVTdHlsZS50b1N0cmluZygpfSR7XG4gICAgICAgICAgICAgIHJ1bGVDb2xvciA/IGAgJHtydWxlQ29sb3IudG9TdHJpbmcoKX1gIDogXCJcIlxuICAgICAgICAgICAgfWAsXG4gICAgICAgICAgKTtcbiAgICAgICAgICBjb250YWluZXIuZWxlbWVudC5pbnNlcnRCZWZvcmUocnVsZSwgY29udGFpbmVyLmVsZW1lbnQuZmlyc3RDaGlsZCk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCBwYXNzUG9zdFByb3BlcnRpZXMubGVuZ3RoOyBpKyspIHtcbiAgICAgIHRoaXMucHJvcGFnYXRlUHJvcGVydHkoXG4gICAgICAgIGNvbnRleHQsXG4gICAgICAgIGNvbnRhaW5lcixcbiAgICAgICAgcGFzc1Bvc3RQcm9wZXJ0aWVzW2ldLFxuICAgICAgICBkb2NGYWNlcyxcbiAgICAgICk7XG4gICAgfVxuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgZGVsYXllZFByb3BlcnRpZXMubGVuZ3RoOyBpKyspIHtcbiAgICAgIHRoaXMucHJvcGFnYXRlRGVsYXllZFByb3BlcnR5KFxuICAgICAgICBjb250ZXh0LFxuICAgICAgICBjb250YWluZXIsXG4gICAgICAgIGRlbGF5ZWRQcm9wZXJ0aWVzW2ldLFxuICAgICAgICBwYWdlLmRlbGF5ZWRJdGVtcyxcbiAgICAgICk7XG4gICAgfVxuICB9XG5cbiAgYXBwbHlDYXNjYWRlQW5kSW5pdChcbiAgICBjYXNjYWRlOiBDc3NDYXNjYWRlLkNhc2NhZGVJbnN0YW5jZSxcbiAgICBkb2NFbGVtZW50U3R5bGU6IENzc0Nhc2NhZGUuRWxlbWVudFN0eWxlLFxuICApOiB2b2lkIHtcbiAgICBjb25zdCBzdHlsZSA9IHRoaXMuY2FzY2FkZWQ7XG4gICAgY29uc3Qgc3BlY2lmaWVkID0gdGhpcy5wYWdlQm94LnNwZWNpZmllZDtcbiAgICBmb3IgKGNvbnN0IG5hbWUgaW4gc3BlY2lmaWVkKSB7XG4gICAgICBpZiAoQ3NzQ2FzY2FkZS5pc1Byb3BOYW1lKG5hbWUpKSB7XG4gICAgICAgIENzc0Nhc2NhZGUuc2V0UHJvcChzdHlsZSwgbmFtZSwgQ3NzQ2FzY2FkZS5nZXRQcm9wKHNwZWNpZmllZCwgbmFtZSkpO1xuICAgICAgfVxuICAgIH1cbiAgICBpZiAodGhpcy5wYWdlQm94LnBzZXVkb05hbWUgPT0gdXNlckFnZW50UGFnZU1hc3RlclBzZXVkbykge1xuICAgICAgZm9yIChjb25zdCBuYW1lIGluIGRvY0VsZW1lbnRTdHlsZSkge1xuICAgICAgICBpZiAobmFtZS5tYXRjaCgvXmJhY2tncm91bmQtLykgfHwgbmFtZSA9PSBcIndyaXRpbmctbW9kZVwiKSB7XG4gICAgICAgICAgc3R5bGVbbmFtZV0gPSBkb2NFbGVtZW50U3R5bGVbbmFtZV07XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gICAgaWYgKHRoaXMucGFnZUJveC5wc2V1ZG9OYW1lID09IFwibGF5b3V0LWhvc3RcIikge1xuICAgICAgZm9yIChjb25zdCBuYW1lIGluIGRvY0VsZW1lbnRTdHlsZSkge1xuICAgICAgICBpZiAoIW5hbWUubWF0Y2goL15iYWNrZ3JvdW5kLS8pICYmIG5hbWUgIT0gXCJ3cml0aW5nLW1vZGVcIikge1xuICAgICAgICAgIHN0eWxlW25hbWVdID0gZG9jRWxlbWVudFN0eWxlW25hbWVdO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICAgIGNhc2NhZGUucHVzaFJ1bGUodGhpcy5wYWdlQm94LmNsYXNzZXMsIG51bGwsIHN0eWxlKTtcbiAgICBpZiAoc3R5bGVbXCJjb250ZW50XCJdKSB7XG4gICAgICBzdHlsZVtcImNvbnRlbnRcIl0gPSBzdHlsZVtcImNvbnRlbnRcIl0uZmlsdGVyVmFsdWUoXG4gICAgICAgIG5ldyBDc3NDYXNjYWRlLkNvbnRlbnRQcm9wVmlzaXRvcihcbiAgICAgICAgICBjYXNjYWRlLFxuICAgICAgICAgIG51bGwsXG4gICAgICAgICAgY2FzY2FkZS5jb3VudGVyUmVzb2x2ZXIsXG4gICAgICAgICksXG4gICAgICApO1xuICAgIH1cbiAgICB0aGlzLmluaXQoY2FzY2FkZS5jb250ZXh0KTtcbiAgICBmb3IgKGNvbnN0IGNoaWxkIG9mIHRoaXMucGFnZUJveC5jaGlsZHJlbikge1xuICAgICAgY29uc3QgY2hpbGRJbnN0YW5jZSA9IGNoaWxkLmNyZWF0ZUluc3RhbmNlKHRoaXMpO1xuICAgICAgY2hpbGRJbnN0YW5jZS5hcHBseUNhc2NhZGVBbmRJbml0KGNhc2NhZGUsIGRvY0VsZW1lbnRTdHlsZSk7XG4gICAgfVxuICAgIGNhc2NhZGUucG9wUnVsZSgpO1xuICB9XG5cbiAgcmVzb2x2ZUF1dG9TaXppbmcoY29udGV4dDogRXhwcnMuQ29udGV4dCk6IHZvaWQge1xuICAgIC8vIGFsbCBpbXBsaWNpdCBkZXBlbmRlbmNpZXMgYXJlIHNldCB1cCBhdCB0aGlzIHBvaW50XG4gICAgaWYgKHRoaXMuaXNBdXRvV2lkdGgpIHtcbiAgICAgIHRoaXMuaXNSaWdodERlcGVuZGVudE9uQXV0b1dpZHRoID1cbiAgICAgICAgdGhpcy5kZXBlbmRzKFwicmlnaHRcIiwgdGhpcy5hdXRvV2lkdGgsIGNvbnRleHQpIHx8XG4gICAgICAgIHRoaXMuZGVwZW5kcyhcIm1hcmdpbi1yaWdodFwiLCB0aGlzLmF1dG9XaWR0aCwgY29udGV4dCkgfHxcbiAgICAgICAgdGhpcy5kZXBlbmRzKFwiYm9yZGVyLXJpZ2h0LXdpZHRoXCIsIHRoaXMuYXV0b1dpZHRoLCBjb250ZXh0KSB8fFxuICAgICAgICB0aGlzLmRlcGVuZHMoXCJwYWRkaW5nLXJpZ2h0XCIsIHRoaXMuYXV0b1dpZHRoLCBjb250ZXh0KTtcbiAgICB9XG4gICAgaWYgKHRoaXMuaXNBdXRvSGVpZ2h0KSB7XG4gICAgICB0aGlzLmlzVG9wRGVwZW5kZW50T25BdXRvSGVpZ2h0ID1cbiAgICAgICAgdGhpcy5kZXBlbmRzKFwidG9wXCIsIHRoaXMuYXV0b0hlaWdodCwgY29udGV4dCkgfHxcbiAgICAgICAgdGhpcy5kZXBlbmRzKFwibWFyZ2luLXRvcFwiLCB0aGlzLmF1dG9IZWlnaHQsIGNvbnRleHQpIHx8XG4gICAgICAgIHRoaXMuZGVwZW5kcyhcImJvcmRlci10b3Atd2lkdGhcIiwgdGhpcy5hdXRvSGVpZ2h0LCBjb250ZXh0KSB8fFxuICAgICAgICB0aGlzLmRlcGVuZHMoXCJwYWRkaW5nLXRvcFwiLCB0aGlzLmF1dG9IZWlnaHQsIGNvbnRleHQpO1xuICAgIH1cbiAgICBmb3IgKGNvbnN0IGNoaWxkSW5zdGFuY2Ugb2YgdGhpcy5jaGlsZHJlbikge1xuICAgICAgY2hpbGRJbnN0YW5jZS5yZXNvbHZlQXV0b1NpemluZyhjb250ZXh0KTtcbiAgICB9XG4gIH1cbn1cblxuLyoqXG4gKiBQcm9wZXJ0aWVzIHRoYXQgYXJlIHBhc3NlZCB0aHJvdWdoIGJlZm9yZSB0aGUgbGF5b3V0LlxuICovXG5leHBvcnQgY29uc3QgcGFzc1ByZVByb3BlcnRpZXMgPSBbXG4gIFwiYm9yZGVyLWxlZnQtc3R5bGVcIixcbiAgXCJib3JkZXItcmlnaHQtc3R5bGVcIixcbiAgXCJib3JkZXItdG9wLXN0eWxlXCIsXG4gIFwiYm9yZGVyLWJvdHRvbS1zdHlsZVwiLFxuICBcImJvcmRlci1sZWZ0LWNvbG9yXCIsXG4gIFwiYm9yZGVyLXJpZ2h0LWNvbG9yXCIsXG4gIFwiYm9yZGVyLXRvcC1jb2xvclwiLFxuICBcImJvcmRlci1ib3R0b20tY29sb3JcIixcbiAgXCJvdXRsaW5lLXN0eWxlXCIsXG4gIFwib3V0bGluZS1jb2xvclwiLFxuICBcIm91dGxpbmUtd2lkdGhcIixcbiAgXCJvdmVyZmxvd1wiLFxuICBcInZpc2liaWxpdHlcIixcbl07XG5cbi8qKlxuICogUHJvcGVydGllcyB0aGF0IGFyZSBwYXNzZWQgdGhyb3VnaCBhZnRlciB0aGUgbGF5b3V0LlxuICovXG5leHBvcnQgY29uc3QgcGFzc1Bvc3RQcm9wZXJ0aWVzID0gW1xuICBcImJvcmRlci10b3AtbGVmdC1yYWRpdXNcIixcbiAgXCJib3JkZXItdG9wLXJpZ2h0LXJhZGl1c1wiLFxuICBcImJvcmRlci1ib3R0b20tcmlnaHQtcmFkaXVzXCIsXG4gIFwiYm9yZGVyLWJvdHRvbS1sZWZ0LXJhZGl1c1wiLFxuICBcImJvcmRlci1pbWFnZS1zb3VyY2VcIixcbiAgXCJib3JkZXItaW1hZ2Utc2xpY2VcIixcbiAgXCJib3JkZXItaW1hZ2Utd2lkdGhcIixcbiAgXCJib3JkZXItaW1hZ2Utb3V0c2V0XCIsXG4gIFwiYm9yZGVyLWltYWdlLXJlcGVhdFwiLFxuICBcImJhY2tncm91bmQtYXR0YWNobWVudFwiLFxuICBcImJhY2tncm91bmQtY29sb3JcIixcbiAgXCJiYWNrZ3JvdW5kLWltYWdlXCIsXG4gIFwiYmFja2dyb3VuZC1yZXBlYXRcIixcbiAgXCJiYWNrZ3JvdW5kLXBvc2l0aW9uXCIsXG4gIFwiYmFja2dyb3VuZC1jbGlwXCIsXG4gIFwiYmFja2dyb3VuZC1vcmlnaW5cIixcbiAgXCJiYWNrZ3JvdW5kLXNpemVcIixcbiAgXCJvcGFjaXR5XCIsXG4gIFwiei1pbmRleFwiLFxuICBcImJhY2tncm91bmQtYmxlbmQtbW9kZVwiLFxuICBcImlzb2xhdGlvblwiLFxuICBcIm1peC1ibGVuZC1tb2RlXCIsXG4gIFwiZmlsdGVyXCIsXG5dO1xuXG4vKipcbiAqIE9ubHkgcGFzc2VkIHdoZW4gdGhlcmUgaXMgY29udGVudCBhc3NpZ25lZCBieSB0aGUgY29udGVudCBwcm9wZXJ0eS5cbiAqL1xuZXhwb3J0IGNvbnN0IHBhc3NDb250ZW50UHJvcGVydGllcyA9IFtcbiAgXCJjb2xvclwiLFxuICBcImZvbnQtZmFtaWx5XCIsXG4gIFwiZm9udC1zaXplXCIsXG4gIFwiZm9udC1zdHlsZVwiLFxuICBcImZvbnQtd2VpZ2h0XCIsXG4gIFwiZm9udC12YXJpYW50XCIsXG4gIFwibGluZS1oZWlnaHRcIixcbiAgXCJsZXR0ZXItc3BhY2luZ1wiLFxuICBcInRleHQtYWxpZ25cIixcbiAgXCJ0ZXh0LWRlY29yYXRpb25cIixcbiAgXCJ0ZXh0LWluZGVudFwiLFxuICBcInRleHQtdHJhbnNmb3JtXCIsXG4gIFwid2hpdGUtc3BhY2VcIixcbiAgXCJ3b3JkLXNwYWNpbmdcIixcbiAgXCJmb250LWZlYXR1cmUtc2V0dGluZ3NcIixcbiAgXCJmb250LWtlcm5pbmdcIixcbiAgXCJmb250LXNpemUtYWRqdXN0XCIsXG4gIFwiZm9udC12YXJpYW50LWVhc3QtYXNpYW5cIixcbiAgXCJmb250LXN0cmV0Y2hcIixcbiAgXCJ0ZXh0LWRlY29yYXRpb24tY29sb3JcIixcbiAgXCJ0ZXh0LWRlY29yYXRpb24tbGluZVwiLFxuICBcInRleHQtZGVjb3JhdGlvbi1za2lwXCIsXG4gIFwidGV4dC1kZWNvcmF0aW9uLXN0eWxlXCIsXG4gIFwidGV4dC1lbXBoYXNpc1wiLFxuICBcInRleHQtZW1waGFzaXMtY29sb3JcIixcbiAgXCJ0ZXh0LWVtcGhhc2lzLXBvc2l0aW9uXCIsXG4gIFwidGV4dC1lbXBoYXNpcy1zdHlsZVwiLFxuICBcInRleHQtc2hhZG93XCIsXG4gIFwidGV4dC11bmRlcmxpbmUtcG9zaXRpb25cIixcbl07XG5cbmV4cG9ydCBjb25zdCBwYXNzU2luZ2xlVXJpQ29udGVudFByb3BlcnRpZXMgPSBbXG4gIFwid2lkdGhcIixcbiAgXCJoZWlnaHRcIixcbiAgXCJpbWFnZS1yZXNvbHV0aW9uXCIsXG4gIFwib2JqZWN0LWZpdFwiLFxuICBcIm9iamVjdC1wb3NpdGlvblwiLFxuXTtcblxuZXhwb3J0IGNvbnN0IGRlbGF5ZWRQcm9wZXJ0aWVzID0gW1widHJhbnNmb3JtXCIsIFwidHJhbnNmb3JtLW9yaWdpblwiXTtcblxuZXhwb3J0IGNvbnN0IHVzZXJBZ2VudFBhZ2VNYXN0ZXJQc2V1ZG8gPSBcImJhY2tncm91bmQtaG9zdFwiO1xuXG5leHBvcnQgY2xhc3MgUm9vdFBhZ2VCb3hJbnN0YW5jZSBleHRlbmRzIFBhZ2VCb3hJbnN0YW5jZTxSb290UGFnZUJveD4ge1xuICBjb25zdHJ1Y3RvcihwYWdlQm94OiBSb290UGFnZUJveCkge1xuICAgIHN1cGVyKG51bGwsIHBhZ2VCb3gpO1xuICB9XG5cbiAgLyoqXG4gICAqIEBvdmVycmlkZVxuICAgKi9cbiAgYXBwbHlDYXNjYWRlQW5kSW5pdChcbiAgICBjYXNjYWRlOiBDc3NDYXNjYWRlLkNhc2NhZGVJbnN0YW5jZSxcbiAgICBkb2NFbGVtZW50U3R5bGU6IENzc0Nhc2NhZGUuRWxlbWVudFN0eWxlLFxuICApOiB2b2lkIHtcbiAgICBzdXBlci5hcHBseUNhc2NhZGVBbmRJbml0KGNhc2NhZGUsIGRvY0VsZW1lbnRTdHlsZSk7XG5cbiAgICAvLyBTb3J0IHBhZ2UgbWFzdGVycyB1c2luZyBvcmRlciBhbmQgc3BlY2lmaWNpdHkuXG4gICAgY29uc3QgcGFnZU1hc3RlcnMgPSB0aGlzLmNoaWxkcmVuO1xuICAgIChwYWdlTWFzdGVycyBhcyBQYWdlTWFzdGVySW5zdGFuY2VbXSkuc29ydChcbiAgICAgIChhLCBiKSA9PlxuICAgICAgICAoYi5wYWdlQm94IGFzIGFueSkuc3BlY2lmaWNpdHkgLSAoYS5wYWdlQm94IGFzIGFueSkuc3BlY2lmaWNpdHkgfHwgLy8gcHJvYmFibHkgY2F1c2UgTmFOXG4gICAgICAgIGEucGFnZUJveC5pbmRleCAtIGIucGFnZUJveC5pbmRleCxcbiAgICApO1xuICB9XG59XG5cbmV4cG9ydCBjbGFzcyBQYWdlTWFzdGVySW5zdGFuY2U8XG4gIFAgZXh0ZW5kcyBQYWdlTWFzdGVyID0gUGFnZU1hc3RlcjxQYWdlTWFzdGVySW5zdGFuY2U8YW55Pj5cbj4gZXh0ZW5kcyBQYWdlQm94SW5zdGFuY2U8UD4ge1xuICBwYWdlTWFzdGVySW5zdGFuY2U6IFBhZ2VNYXN0ZXJJbnN0YW5jZTtcblxuICBjb25zdHJ1Y3RvcihwYXJlbnRJbnN0YW5jZTogUGFnZUJveEluc3RhbmNlLCBwYWdlQm94OiBQKSB7XG4gICAgc3VwZXIocGFyZW50SW5zdGFuY2UsIHBhZ2VCb3gpO1xuICAgIHRoaXMucGFnZU1hc3Rlckluc3RhbmNlID0gdGhpcztcbiAgfVxuXG4gIC8qKlxuICAgKiBAb3ZlcnJpZGVcbiAgICovXG4gIGJveFNwZWNpZmljRW5hYmxlZChlbmFibGVkOiBFeHBycy5WYWwpOiBFeHBycy5WYWwge1xuICAgIGNvbnN0IHBhZ2VNYXN0ZXIgPSB0aGlzLnBhZ2VCb3gucGFnZU1hc3RlcjtcbiAgICBpZiAocGFnZU1hc3Rlci5jb25kaXRpb24pIHtcbiAgICAgIGVuYWJsZWQgPSBFeHBycy5hbmQocGFnZU1hc3Rlci5zY29wZSwgZW5hYmxlZCwgcGFnZU1hc3Rlci5jb25kaXRpb24pO1xuICAgIH1cbiAgICByZXR1cm4gZW5hYmxlZDtcbiAgfVxuXG4gIC8qKlxuICAgKiBDYWxsZWQgYWZ0ZXIgbGF5b3V0IG9mIGNvbnRlbnRzIG9mIHRoZSBwYWdlIGhhcyBkb25lIHRvIGFkanVzdCB0aGUgb3ZlcmFsbFxuICAgKiBwYWdlIGxheW91dC4gT3ZlcnJpZGUgaW4gc3ViY2xhc3Nlcy5cbiAgICovXG4gIGFkanVzdFBhZ2VMYXlvdXQoXG4gICAgY29udGV4dDogRXhwcnMuQ29udGV4dCxcbiAgICBwYWdlOiBWdHJlZS5QYWdlLFxuICAgIGNsaWVudExheW91dDogVnRyZWUuQ2xpZW50TGF5b3V0LFxuICApIHt9XG59XG5cbmV4cG9ydCBjbGFzcyBQYXJ0aXRpb25Hcm91cEluc3RhbmNlIGV4dGVuZHMgUGFnZUJveEluc3RhbmNlPFBhcnRpdGlvbkdyb3VwPiB7XG4gIHBhZ2VNYXN0ZXJJbnN0YW5jZTogUGFnZU1hc3Rlckluc3RhbmNlO1xuXG4gIGNvbnN0cnVjdG9yKHBhcmVudEluc3RhbmNlOiBQYWdlQm94SW5zdGFuY2UsIHBhZ2VCb3g6IFBhZ2VCb3gpIHtcbiAgICBzdXBlcihwYXJlbnRJbnN0YW5jZSwgcGFnZUJveCk7XG4gICAgdGhpcy5wYWdlTWFzdGVySW5zdGFuY2UgPSBwYXJlbnRJbnN0YW5jZS5wYWdlTWFzdGVySW5zdGFuY2U7XG4gIH1cbn1cblxuZXhwb3J0IGNsYXNzIFBhcnRpdGlvbkluc3RhbmNlPFxuICBQIGV4dGVuZHMgUGFydGl0aW9uID0gUGFydGl0aW9uPFBhcnRpdGlvbkluc3RhbmNlPGFueT4+XG4+IGV4dGVuZHMgUGFnZUJveEluc3RhbmNlPFA+IHtcbiAgcGFnZU1hc3Rlckluc3RhbmNlOiBQYWdlTWFzdGVySW5zdGFuY2U7XG5cbiAgY29uc3RydWN0b3IocGFyZW50SW5zdGFuY2U6IFBhZ2VCb3hJbnN0YW5jZSwgcGFnZUJveDogUCkge1xuICAgIHN1cGVyKHBhcmVudEluc3RhbmNlLCBwYWdlQm94KTtcbiAgICB0aGlzLnBhZ2VNYXN0ZXJJbnN0YW5jZSA9IHBhcmVudEluc3RhbmNlLnBhZ2VNYXN0ZXJJbnN0YW5jZTtcbiAgfVxuXG4gIHByb2Nlc3NQYXJ0aXRpb25MaXN0KFxuICAgIGVuYWJsZWQ6IEV4cHJzLlZhbCxcbiAgICBsaXN0VmFsOiBDc3MuVmFsLFxuICAgIGNvbmZsaWN0aW5nOiBib29sZWFuLFxuICApOiBFeHBycy5WYWwge1xuICAgIGxldCBsaXN0OiBDc3MuVmFsW10gPSBudWxsO1xuICAgIGlmIChsaXN0VmFsIGluc3RhbmNlb2YgQ3NzLklkZW50KSB7XG4gICAgICBsaXN0ID0gW2xpc3RWYWxdO1xuICAgIH1cbiAgICBpZiAobGlzdFZhbCBpbnN0YW5jZW9mIENzcy5Db21tYUxpc3QpIHtcbiAgICAgIGxpc3QgPSAobGlzdFZhbCBhcyBDc3MuQ29tbWFMaXN0KS52YWx1ZXM7XG4gICAgfVxuICAgIGlmIChsaXN0KSB7XG4gICAgICBjb25zdCBzY29wZSA9IHRoaXMucGFnZUJveC5zY29wZTtcbiAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgbGlzdC5sZW5ndGg7IGkrKykge1xuICAgICAgICBpZiAobGlzdFtpXSBpbnN0YW5jZW9mIENzcy5JZGVudCkge1xuICAgICAgICAgIGNvbnN0IHFuYW1lID0gRXhwcnMubWFrZVF1YWxpZmllZE5hbWUoXG4gICAgICAgICAgICAobGlzdFtpXSBhcyBDc3MuSWRlbnQpLm5hbWUsXG4gICAgICAgICAgICBcImVuYWJsZWRcIixcbiAgICAgICAgICApO1xuICAgICAgICAgIGxldCB0ZXJtOiBFeHBycy5WYWwgPSBuZXcgRXhwcnMuTmFtZWQoc2NvcGUsIHFuYW1lKTtcbiAgICAgICAgICBpZiAoY29uZmxpY3RpbmcpIHtcbiAgICAgICAgICAgIHRlcm0gPSBuZXcgRXhwcnMuTm90KHNjb3BlLCB0ZXJtKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgZW5hYmxlZCA9IEV4cHJzLmFuZChzY29wZSwgZW5hYmxlZCwgdGVybSk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIGVuYWJsZWQ7XG4gIH1cblxuICAvKipcbiAgICogQG92ZXJyaWRlXG4gICAqL1xuICBib3hTcGVjaWZpY0VuYWJsZWQoZW5hYmxlZDogRXhwcnMuVmFsKTogRXhwcnMuVmFsIHtcbiAgICBjb25zdCBzY29wZSA9IHRoaXMucGFnZUJveC5zY29wZTtcbiAgICBjb25zdCBzdHlsZSA9IHRoaXMuc3R5bGU7XG4gICAgY29uc3QgcmVxdWlyZWQgPVxuICAgICAgdG9FeHByQm9vbChzY29wZSwgc3R5bGVbXCJyZXF1aXJlZFwiXSwgc2NvcGUuX2ZhbHNlKSAhPT0gc2NvcGUuX2ZhbHNlO1xuICAgIGlmIChyZXF1aXJlZCB8fCB0aGlzLmlzQXV0b0hlaWdodCkge1xuICAgICAgY29uc3QgZmxvd05hbWUgPSB0b0V4cHJJZGVudChzY29wZSwgc3R5bGVbXCJmbG93LWZyb21cIl0sIFwiYm9keVwiKTtcbiAgICAgIGNvbnN0IGhhc0NvbnRlbnQgPSBuZXcgRXhwcnMuQ2FsbChzY29wZSwgXCJoYXMtY29udGVudFwiLCBbZmxvd05hbWVdKTtcbiAgICAgIGVuYWJsZWQgPSBFeHBycy5hbmQoc2NvcGUsIGVuYWJsZWQsIGhhc0NvbnRlbnQpO1xuICAgIH1cbiAgICBlbmFibGVkID0gdGhpcy5wcm9jZXNzUGFydGl0aW9uTGlzdChcbiAgICAgIGVuYWJsZWQsXG4gICAgICBzdHlsZVtcInJlcXVpcmVkLXBhcnRpdGlvbnNcIl0sXG4gICAgICBmYWxzZSxcbiAgICApO1xuICAgIGVuYWJsZWQgPSB0aGlzLnByb2Nlc3NQYXJ0aXRpb25MaXN0KFxuICAgICAgZW5hYmxlZCxcbiAgICAgIHN0eWxlW1wiY29uZmxpY3RpbmctcGFydGl0aW9uc1wiXSxcbiAgICAgIHRydWUsXG4gICAgKTtcbiAgICBpZiAocmVxdWlyZWQpIHtcbiAgICAgIGNvbnN0IHBtRW5hYmxlZFZhbCA9IHRoaXMucGFnZU1hc3Rlckluc3RhbmNlLnN0eWxlW1wiZW5hYmxlZFwiXTtcbiAgICAgIGxldCBwbUVuYWJsZWQgPSBwbUVuYWJsZWRWYWxcbiAgICAgICAgPyBwbUVuYWJsZWRWYWwudG9FeHByKHNjb3BlLCBudWxsKVxuICAgICAgICA6IHNjb3BlLl90cnVlO1xuICAgICAgcG1FbmFibGVkID0gRXhwcnMuYW5kKHNjb3BlLCBwbUVuYWJsZWQsIGVuYWJsZWQpO1xuICAgICAgdGhpcy5wYWdlTWFzdGVySW5zdGFuY2Uuc3R5bGVbXCJlbmFibGVkXCJdID0gbmV3IENzcy5FeHByKHBtRW5hYmxlZCk7XG4gICAgfVxuICAgIHJldHVybiBlbmFibGVkO1xuICB9XG5cbiAgLyoqXG4gICAqIEBvdmVycmlkZVxuICAgKi9cbiAgcHJlcGFyZUNvbnRhaW5lcihcbiAgICBjb250ZXh0OiBFeHBycy5Db250ZXh0LFxuICAgIGNvbnRhaW5lcjogVnRyZWUuQ29udGFpbmVyLFxuICAgIHBhZ2U6IFZ0cmVlLlBhZ2UsXG4gICAgZG9jRmFjZXM6IEZvbnQuRG9jdW1lbnRGYWNlcyxcbiAgICBjbGllbnRMYXlvdXQ6IFZ0cmVlLkNsaWVudExheW91dCxcbiAgKTogdm9pZCB7XG4gICAgQmFzZS5zZXRDU1NQcm9wZXJ0eShjb250YWluZXIuZWxlbWVudCwgXCJvdmVyZmxvd1wiLCBcImhpZGRlblwiKTsgLy8gZGVmYXVsdCB2YWx1ZVxuICAgIHN1cGVyLnByZXBhcmVDb250YWluZXIoY29udGV4dCwgY29udGFpbmVyLCBwYWdlLCBkb2NGYWNlcywgY2xpZW50TGF5b3V0KTtcbiAgfVxufVxuXG4vLy0tLS0tLS0tLS0tLS0tLS0tLS0tLSBwYXJzaW5nIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG5leHBvcnQgY2xhc3MgUGFnZUJveFBhcnNlckhhbmRsZXJcbiAgZXh0ZW5kcyBDc3NQYXJzZXIuU2xhdmVQYXJzZXJIYW5kbGVyXG4gIGltcGxlbWVudHMgQ3NzVmFsaWRhdG9yLlByb3BlcnR5UmVjZWl2ZXIge1xuICBjb25zdHJ1Y3RvcihcbiAgICBzY29wZTogRXhwcnMuTGV4aWNhbFNjb3BlLFxuICAgIG93bmVyOiBDc3NQYXJzZXIuRGlzcGF0Y2hQYXJzZXJIYW5kbGVyLFxuICAgIHB1YmxpYyByZWFkb25seSB0YXJnZXQ6IFBhZ2VCb3gsXG4gICAgcHVibGljIHJlYWRvbmx5IHZhbGlkYXRvclNldDogQ3NzVmFsaWRhdG9yLlZhbGlkYXRvclNldCxcbiAgKSB7XG4gICAgc3VwZXIoc2NvcGUsIG93bmVyLCBmYWxzZSk7XG4gIH1cblxuICAvKipcbiAgICogQG92ZXJyaWRlXG4gICAqL1xuICBwcm9wZXJ0eShuYW1lOiBzdHJpbmcsIHZhbHVlOiBDc3MuVmFsLCBpbXBvcnRhbnQ6IGJvb2xlYW4pOiB2b2lkIHtcbiAgICB0aGlzLnZhbGlkYXRvclNldC52YWxpZGF0ZVByb3BlcnR5QW5kSGFuZGxlU2hvcnRoYW5kKFxuICAgICAgbmFtZSxcbiAgICAgIHZhbHVlLFxuICAgICAgaW1wb3J0YW50LFxuICAgICAgdGhpcyxcbiAgICApO1xuICB9XG5cbiAgLyoqXG4gICAqIEBvdmVycmlkZVxuICAgKi9cbiAgdW5rbm93blByb3BlcnR5KG5hbWU6IHN0cmluZywgdmFsdWU6IENzcy5WYWwpOiB2b2lkIHtcbiAgICB0aGlzLnJlcG9ydChgRV9JTlZBTElEX1BST1BFUlRZICR7bmFtZX06ICR7dmFsdWUudG9TdHJpbmcoKX1gKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBAb3ZlcnJpZGVcbiAgICovXG4gIGludmFsaWRQcm9wZXJ0eVZhbHVlKG5hbWU6IHN0cmluZywgdmFsdWU6IENzcy5WYWwpOiB2b2lkIHtcbiAgICB0aGlzLnJlcG9ydChgRV9JTlZBTElEX1BST1BFUlRZX1ZBTFVFICR7bmFtZX06ICR7dmFsdWUudG9TdHJpbmcoKX1gKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBAb3ZlcnJpZGVcbiAgICovXG4gIHNpbXBsZVByb3BlcnR5KG5hbWU6IHN0cmluZywgdmFsdWU6IENzcy5WYWwsIGltcG9ydGFudCk6IHZvaWQge1xuICAgIHRoaXMudGFyZ2V0LnNwZWNpZmllZFtuYW1lXSA9IG5ldyBDc3NDYXNjYWRlLkNhc2NhZGVWYWx1ZShcbiAgICAgIHZhbHVlLFxuICAgICAgaW1wb3J0YW50XG4gICAgICAgID8gQ3NzUGFyc2VyLlNQRUNJRklDSVRZX1NUWUxFXG4gICAgICAgIDogQ3NzUGFyc2VyLlNQRUNJRklDSVRZX1NUWUxFX0lNUE9SVEFOVCxcbiAgICApO1xuICB9XG59XG5cbmV4cG9ydCBjbGFzcyBQYXJ0aXRpb25QYXJzZXJIYW5kbGVyIGV4dGVuZHMgUGFnZUJveFBhcnNlckhhbmRsZXIge1xuICBjb25zdHJ1Y3RvcihcbiAgICBzY29wZTogRXhwcnMuTGV4aWNhbFNjb3BlLFxuICAgIG93bmVyOiBDc3NQYXJzZXIuRGlzcGF0Y2hQYXJzZXJIYW5kbGVyLFxuICAgIHRhcmdldDogUGFydGl0aW9uLFxuICAgIHZhbGlkYXRvclNldDogQ3NzVmFsaWRhdG9yLlZhbGlkYXRvclNldCxcbiAgKSB7XG4gICAgc3VwZXIoc2NvcGUsIG93bmVyLCB0YXJnZXQsIHZhbGlkYXRvclNldCk7XG4gIH1cbn1cblxuZXhwb3J0IGNsYXNzIFBhcnRpdGlvbkdyb3VwUGFyc2VySGFuZGxlciBleHRlbmRzIFBhZ2VCb3hQYXJzZXJIYW5kbGVyIHtcbiAgY29uc3RydWN0b3IoXG4gICAgc2NvcGU6IEV4cHJzLkxleGljYWxTY29wZSxcbiAgICBvd25lcjogQ3NzUGFyc2VyLkRpc3BhdGNoUGFyc2VySGFuZGxlcixcbiAgICB0YXJnZXQ6IFBhcnRpdGlvbkdyb3VwLFxuICAgIHZhbGlkYXRvclNldDogQ3NzVmFsaWRhdG9yLlZhbGlkYXRvclNldCxcbiAgKSB7XG4gICAgc3VwZXIoc2NvcGUsIG93bmVyLCB0YXJnZXQsIHZhbGlkYXRvclNldCk7XG4gICAgdGFyZ2V0LnNwZWNpZmllZFtcIndpZHRoXCJdID0gbmV3IENzc0Nhc2NhZGUuQ2FzY2FkZVZhbHVlKFxuICAgICAgQ3NzLmh1bmRyZWRQZXJjZW50LFxuICAgICAgMCxcbiAgICApO1xuICAgIHRhcmdldC5zcGVjaWZpZWRbXCJoZWlnaHRcIl0gPSBuZXcgQ3NzQ2FzY2FkZS5DYXNjYWRlVmFsdWUoXG4gICAgICBDc3MuaHVuZHJlZFBlcmNlbnQsXG4gICAgICAwLFxuICAgICk7XG4gIH1cblxuICAvKipcbiAgICogQG92ZXJyaWRlXG4gICAqL1xuICBzdGFydFBhcnRpdGlvblJ1bGUoXG4gICAgbmFtZTogc3RyaW5nIHwgbnVsbCxcbiAgICBwc2V1ZG9OYW1lOiBzdHJpbmcgfCBudWxsLFxuICAgIGNsYXNzZXM6IHN0cmluZ1tdLFxuICApOiB2b2lkIHtcbiAgICBjb25zdCBwYXJ0aXRpb24gPSBuZXcgUGFydGl0aW9uKFxuICAgICAgdGhpcy5zY29wZSxcbiAgICAgIG5hbWUsXG4gICAgICBwc2V1ZG9OYW1lLFxuICAgICAgY2xhc3NlcyxcbiAgICAgIHRoaXMudGFyZ2V0LFxuICAgICk7XG4gICAgY29uc3QgaGFuZGxlciA9IG5ldyBQYXJ0aXRpb25QYXJzZXJIYW5kbGVyKFxuICAgICAgdGhpcy5zY29wZSxcbiAgICAgIHRoaXMub3duZXIsXG4gICAgICBwYXJ0aXRpb24sXG4gICAgICB0aGlzLnZhbGlkYXRvclNldCxcbiAgICApO1xuICAgIHRoaXMub3duZXIucHVzaEhhbmRsZXIoaGFuZGxlcik7XG4gIH1cblxuICAvKipcbiAgICogQG92ZXJyaWRlXG4gICAqL1xuICBzdGFydFBhcnRpdGlvbkdyb3VwUnVsZShcbiAgICBuYW1lOiBzdHJpbmcgfCBudWxsLFxuICAgIHBzZXVkb05hbWU6IHN0cmluZyB8IG51bGwsXG4gICAgY2xhc3Nlczogc3RyaW5nW10sXG4gICk6IHZvaWQge1xuICAgIGNvbnN0IHBhcnRpdGlvbkdyb3VwID0gbmV3IFBhcnRpdGlvbkdyb3VwKFxuICAgICAgdGhpcy5zY29wZSxcbiAgICAgIG5hbWUsXG4gICAgICBwc2V1ZG9OYW1lLFxuICAgICAgY2xhc3NlcyxcbiAgICAgIHRoaXMudGFyZ2V0LFxuICAgICk7XG4gICAgY29uc3QgaGFuZGxlciA9IG5ldyBQYXJ0aXRpb25Hcm91cFBhcnNlckhhbmRsZXIoXG4gICAgICB0aGlzLnNjb3BlLFxuICAgICAgdGhpcy5vd25lcixcbiAgICAgIHBhcnRpdGlvbkdyb3VwLFxuICAgICAgdGhpcy52YWxpZGF0b3JTZXQsXG4gICAgKTtcbiAgICB0aGlzLm93bmVyLnB1c2hIYW5kbGVyKGhhbmRsZXIpO1xuICB9XG59XG5cbmV4cG9ydCBjbGFzcyBQYWdlTWFzdGVyUGFyc2VySGFuZGxlciBleHRlbmRzIFBhZ2VCb3hQYXJzZXJIYW5kbGVyIHtcbiAgY29uc3RydWN0b3IoXG4gICAgc2NvcGU6IEV4cHJzLkxleGljYWxTY29wZSxcbiAgICBvd25lcjogQ3NzUGFyc2VyLkRpc3BhdGNoUGFyc2VySGFuZGxlcixcbiAgICB0YXJnZXQ6IFBhZ2VNYXN0ZXIsXG4gICAgdmFsaWRhdG9yU2V0OiBDc3NWYWxpZGF0b3IuVmFsaWRhdG9yU2V0LFxuICApIHtcbiAgICBzdXBlcihzY29wZSwgb3duZXIsIHRhcmdldCwgdmFsaWRhdG9yU2V0KTtcbiAgfVxuXG4gIC8qKlxuICAgKiBAb3ZlcnJpZGVcbiAgICovXG4gIHN0YXJ0UGFydGl0aW9uUnVsZShcbiAgICBuYW1lOiBzdHJpbmcgfCBudWxsLFxuICAgIHBzZXVkb05hbWU6IHN0cmluZyB8IG51bGwsXG4gICAgY2xhc3Nlczogc3RyaW5nW10sXG4gICk6IHZvaWQge1xuICAgIGNvbnN0IHBhcnRpdGlvbiA9IG5ldyBQYXJ0aXRpb24oXG4gICAgICB0aGlzLnNjb3BlLFxuICAgICAgbmFtZSxcbiAgICAgIHBzZXVkb05hbWUsXG4gICAgICBjbGFzc2VzLFxuICAgICAgdGhpcy50YXJnZXQsXG4gICAgKTtcbiAgICBjb25zdCBoYW5kbGVyID0gbmV3IFBhcnRpdGlvblBhcnNlckhhbmRsZXIoXG4gICAgICB0aGlzLnNjb3BlLFxuICAgICAgdGhpcy5vd25lcixcbiAgICAgIHBhcnRpdGlvbixcbiAgICAgIHRoaXMudmFsaWRhdG9yU2V0LFxuICAgICk7XG4gICAgdGhpcy5vd25lci5wdXNoSGFuZGxlcihoYW5kbGVyKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBAb3ZlcnJpZGVcbiAgICovXG4gIHN0YXJ0UGFydGl0aW9uR3JvdXBSdWxlKFxuICAgIG5hbWU6IHN0cmluZyB8IG51bGwsXG4gICAgcHNldWRvTmFtZTogc3RyaW5nIHwgbnVsbCxcbiAgICBjbGFzc2VzOiBzdHJpbmdbXSxcbiAgKTogdm9pZCB7XG4gICAgY29uc3QgcGFydGl0aW9uR3JvdXAgPSBuZXcgUGFydGl0aW9uR3JvdXAoXG4gICAgICB0aGlzLnNjb3BlLFxuICAgICAgbmFtZSxcbiAgICAgIHBzZXVkb05hbWUsXG4gICAgICBjbGFzc2VzLFxuICAgICAgdGhpcy50YXJnZXQsXG4gICAgKTtcbiAgICBjb25zdCBoYW5kbGVyID0gbmV3IFBhcnRpdGlvbkdyb3VwUGFyc2VySGFuZGxlcihcbiAgICAgIHRoaXMuc2NvcGUsXG4gICAgICB0aGlzLm93bmVyLFxuICAgICAgcGFydGl0aW9uR3JvdXAsXG4gICAgICB0aGlzLnZhbGlkYXRvclNldCxcbiAgICApO1xuICAgIHRoaXMub3duZXIucHVzaEhhbmRsZXIoaGFuZGxlcik7XG4gIH1cbn1cbiIsIi8qKlxuICogQ29weXJpZ2h0IDIwMTUgVHJpbS1tYXJrcyBJbmMuXG4gKiBDb3B5cmlnaHQgMjAxOSBWaXZsaW9zdHlsZSBGb3VuZGF0aW9uXG4gKlxuICogVml2bGlvc3R5bGUuanMgaXMgZnJlZSBzb2Z0d2FyZTogeW91IGNhbiByZWRpc3RyaWJ1dGUgaXQgYW5kL29yIG1vZGlmeVxuICogaXQgdW5kZXIgdGhlIHRlcm1zIG9mIHRoZSBHTlUgQWZmZXJvIEdlbmVyYWwgUHVibGljIExpY2Vuc2UgYXMgcHVibGlzaGVkIGJ5XG4gKiB0aGUgRnJlZSBTb2Z0d2FyZSBGb3VuZGF0aW9uLCBlaXRoZXIgdmVyc2lvbiAzIG9mIHRoZSBMaWNlbnNlLCBvclxuICogKGF0IHlvdXIgb3B0aW9uKSBhbnkgbGF0ZXIgdmVyc2lvbi5cbiAqXG4gKiBWaXZsaW9zdHlsZS5qcyBpcyBkaXN0cmlidXRlZCBpbiB0aGUgaG9wZSB0aGF0IGl0IHdpbGwgYmUgdXNlZnVsLFxuICogYnV0IFdJVEhPVVQgQU5ZIFdBUlJBTlRZOyB3aXRob3V0IGV2ZW4gdGhlIGltcGxpZWQgd2FycmFudHkgb2ZcbiAqIE1FUkNIQU5UQUJJTElUWSBvciBGSVRORVNTIEZPUiBBIFBBUlRJQ1VMQVIgUFVSUE9TRS4gIFNlZSB0aGVcbiAqIEdOVSBBZmZlcm8gR2VuZXJhbCBQdWJsaWMgTGljZW5zZSBmb3IgbW9yZSBkZXRhaWxzLlxuICpcbiAqIFlvdSBzaG91bGQgaGF2ZSByZWNlaXZlZCBhIGNvcHkgb2YgdGhlIEdOVSBBZmZlcm8gR2VuZXJhbCBQdWJsaWMgTGljZW5zZVxuICogYWxvbmcgd2l0aCBWaXZsaW9zdHlsZS5qcy4gIElmIG5vdCwgc2VlIDxodHRwOi8vd3d3LmdudS5vcmcvbGljZW5zZXMvPi5cbiAqXG4gKiBAZmlsZW92ZXJ2aWV3IENzc1BhZ2UgLSBgQHBhZ2VgIHJ1bGUgKENTUyBQYWdlZCBNZWRpYSkgc3VwcG9ydCBodHRwczovL2RyYWZ0cy5jc3N3Zy5vcmcvY3NzLXBhZ2UvXG4gKi9cbmltcG9ydCAqIGFzIEFzc2VydHMgZnJvbSBcIi4vYXNzZXJ0c1wiO1xuaW1wb3J0ICogYXMgQmFzZSBmcm9tIFwiLi9iYXNlXCI7XG5pbXBvcnQgKiBhcyBDb25zdGFudHMgZnJvbSBcIi4vY29uc3RhbnRzXCI7XG5pbXBvcnQgKiBhcyBDc3MgZnJvbSBcIi4vY3NzXCI7XG5pbXBvcnQgKiBhcyBDc3NDYXNjYWRlIGZyb20gXCIuL2Nzcy1jYXNjYWRlXCI7XG5pbXBvcnQgKiBhcyBDc3NQYXJzZXIgZnJvbSBcIi4vY3NzLXBhcnNlclwiO1xuaW1wb3J0ICogYXMgQ3NzVmFsaWRhdG9yIGZyb20gXCIuL2Nzcy12YWxpZGF0b3JcIjtcbmltcG9ydCAqIGFzIEV4cHJzIGZyb20gXCIuL2V4cHJzXCI7XG5pbXBvcnQgKiBhcyBGb250IGZyb20gXCIuL2ZvbnRcIjtcbmltcG9ydCAqIGFzIFBhZ2VNYXN0ZXIgZnJvbSBcIi4vcGFnZS1tYXN0ZXJcIjtcbmltcG9ydCAqIGFzIFNpemluZyBmcm9tIFwiLi9zaXppbmdcIjtcbmltcG9ydCAqIGFzIFZ0cmVlIGZyb20gXCIuL3Z0cmVlXCI7XG5cbi8qKlxuICogUmVzb2x2ZSBwYWdlIHByb2dyZXNzaW9uIGRpcmVjdGlvbiBmcm9tIHdyaXRpbmctbW9kZSBhbmQgZGlyZWN0aW9uLlxuICovXG5leHBvcnQgZnVuY3Rpb24gcmVzb2x2ZVBhZ2VQcm9ncmVzc2lvbihcbiAgc3R5bGU6IENzc0Nhc2NhZGUuRWxlbWVudFN0eWxlLFxuKTogQ29uc3RhbnRzLlBhZ2VQcm9ncmVzc2lvbiB7XG4gIGxldCB3cml0aW5nTW9kZSA9IHN0eWxlW1wid3JpdGluZy1tb2RlXCJdO1xuICB3cml0aW5nTW9kZSA9IHdyaXRpbmdNb2RlICYmIHdyaXRpbmdNb2RlLnZhbHVlO1xuICBsZXQgZGlyZWN0aW9uID0gc3R5bGVbXCJkaXJlY3Rpb25cIl07XG4gIGRpcmVjdGlvbiA9IGRpcmVjdGlvbiAmJiBkaXJlY3Rpb24udmFsdWU7XG4gIGlmIChcbiAgICB3cml0aW5nTW9kZSA9PT0gQ3NzLmlkZW50LnZlcnRpY2FsX2xyIHx8XG4gICAgKHdyaXRpbmdNb2RlICE9PSBDc3MuaWRlbnQudmVydGljYWxfcmwgJiYgZGlyZWN0aW9uICE9PSBDc3MuaWRlbnQucnRsKVxuICApIHtcbiAgICByZXR1cm4gQ29uc3RhbnRzLlBhZ2VQcm9ncmVzc2lvbi5MVFI7XG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuIENvbnN0YW50cy5QYWdlUHJvZ3Jlc3Npb24uUlRMO1xuICB9XG59XG5leHBvcnQgdHlwZSBQYWdlU2l6ZSA9IHtcbiAgd2lkdGg6IENzcy5OdW1lcmljO1xuICBoZWlnaHQ6IENzcy5OdW1lcmljO1xufTtcblxuLyoqXG4gKiBOYW1lZCBwYWdlIHNpemVzLlxuICovXG5leHBvcnQgY29uc3QgcGFnZVNpemVzOiB7IFtrZXk6IHN0cmluZ106IFBhZ2VTaXplIH0gPSB7XG4gIGE1OiB7IHdpZHRoOiBuZXcgQ3NzLk51bWVyaWMoMTQ4LCBcIm1tXCIpLCBoZWlnaHQ6IG5ldyBDc3MuTnVtZXJpYygyMTAsIFwibW1cIikgfSxcbiAgYTQ6IHsgd2lkdGg6IG5ldyBDc3MuTnVtZXJpYygyMTAsIFwibW1cIiksIGhlaWdodDogbmV3IENzcy5OdW1lcmljKDI5NywgXCJtbVwiKSB9LFxuICBhMzogeyB3aWR0aDogbmV3IENzcy5OdW1lcmljKDI5NywgXCJtbVwiKSwgaGVpZ2h0OiBuZXcgQ3NzLk51bWVyaWMoNDIwLCBcIm1tXCIpIH0sXG4gIGI1OiB7IHdpZHRoOiBuZXcgQ3NzLk51bWVyaWMoMTc2LCBcIm1tXCIpLCBoZWlnaHQ6IG5ldyBDc3MuTnVtZXJpYygyNTAsIFwibW1cIikgfSxcbiAgYjQ6IHsgd2lkdGg6IG5ldyBDc3MuTnVtZXJpYygyNTAsIFwibW1cIiksIGhlaWdodDogbmV3IENzcy5OdW1lcmljKDM1MywgXCJtbVwiKSB9LFxuICBcImppcy1iNVwiOiB7XG4gICAgd2lkdGg6IG5ldyBDc3MuTnVtZXJpYygxODIsIFwibW1cIiksXG4gICAgaGVpZ2h0OiBuZXcgQ3NzLk51bWVyaWMoMjU3LCBcIm1tXCIpLFxuICB9LFxuICBcImppcy1iNFwiOiB7XG4gICAgd2lkdGg6IG5ldyBDc3MuTnVtZXJpYygyNTcsIFwibW1cIiksXG4gICAgaGVpZ2h0OiBuZXcgQ3NzLk51bWVyaWMoMzY0LCBcIm1tXCIpLFxuICB9LFxuICBsZXR0ZXI6IHtcbiAgICB3aWR0aDogbmV3IENzcy5OdW1lcmljKDguNSwgXCJpblwiKSxcbiAgICBoZWlnaHQ6IG5ldyBDc3MuTnVtZXJpYygxMSwgXCJpblwiKSxcbiAgfSxcbiAgbGVnYWw6IHtcbiAgICB3aWR0aDogbmV3IENzcy5OdW1lcmljKDguNSwgXCJpblwiKSxcbiAgICBoZWlnaHQ6IG5ldyBDc3MuTnVtZXJpYygxNCwgXCJpblwiKSxcbiAgfSxcbiAgbGVkZ2VyOiB7XG4gICAgd2lkdGg6IG5ldyBDc3MuTnVtZXJpYygxMSwgXCJpblwiKSxcbiAgICBoZWlnaHQ6IG5ldyBDc3MuTnVtZXJpYygxNywgXCJpblwiKSxcbiAgfSxcbn07XG5cbi8qKlxuICogRGVmYXVsdCB2YWx1ZSBmb3IgbGluZSB3aWR0aCBvZiBwcmludGVyIG1hcmtzXG4gKi9cbmV4cG9ydCBjb25zdCBkZWZhdWx0UHJpbnRlck1hcmtMaW5lV2lkdGg6IENzcy5OdW1lcmljID0gbmV3IENzcy5OdW1lcmljKFxuICAwLjI0LFxuICBcInB0XCIsXG4pO1xuXG4vKipcbiAqIERlZmF1bHQgdmFsdWUgZm9yIGRpc3RhbmNlIGJldHdlZW4gYW4gZWRnZSBvZiB0aGUgcGFnZSBhbmQgcHJpbnRlciBtYXJrc1xuICovXG5leHBvcnQgY29uc3QgZGVmYXVsdFByaW50ZXJNYXJrT2Zmc2V0OiBDc3MuTnVtZXJpYyA9IG5ldyBDc3MuTnVtZXJpYygzLCBcIm1tXCIpO1xuXG4vKipcbiAqIERlZmF1bHQgdmFsdWUgZm9yIGxpbmUgbGVuZ3RoIG9mIHRoZSAoc2hvcnRlcikgbGluZSBvZiBhIGNyb3AgbWFyayBhbmQgdGhlXG4gKiBzaG9ydGVyIGxpbmUgb2YgYSBjcm9zcyBtYXJrXG4gKi9cbmV4cG9ydCBjb25zdCBkZWZhdWx0UHJpbnRlck1hcmtMaW5lTGVuZ3RoOiBDc3MuTnVtZXJpYyA9IG5ldyBDc3MuTnVtZXJpYyhcbiAgMTAsXG4gIFwibW1cIixcbik7XG5cbi8qKlxuICogRGVmYXVsdCB2YWx1ZSBmb3IgYmxlZWQgb2Zmc2V0ICg9IGRlZmF1bHRQcmludGVyTWFya09mZnNldCArXG4gKiBkZWZhdWx0UHJpbnRlck1hcmtMaW5lTGVuZ3RoKVxuICovXG5leHBvcnQgY29uc3QgZGVmYXVsdEJsZWVkT2Zmc2V0OiBDc3MuTnVtZXJpYyA9IG5ldyBDc3MuTnVtZXJpYygzICsgMTAsIFwibW1cIik7XG5cbmV4cG9ydCB0eXBlIFBhZ2VTaXplQW5kQmxlZWQgPSB7XG4gIHdpZHRoOiBDc3MuTnVtZXJpYztcbiAgaGVpZ2h0OiBDc3MuTnVtZXJpYztcbiAgYmxlZWQ6IENzcy5OdW1lcmljO1xuICBibGVlZE9mZnNldDogQ3NzLk51bWVyaWM7XG59O1xuXG5leHBvcnQgZnVuY3Rpb24gcmVzb2x2ZVBhZ2VTaXplQW5kQmxlZWQoc3R5bGU6IHtcbiAgW2tleTogc3RyaW5nXTogQ3NzQ2FzY2FkZS5DYXNjYWRlVmFsdWU7XG59KTogUGFnZVNpemVBbmRCbGVlZCB7XG4gIC8vIGRlZmF1bHQgdmFsdWUgKGZpdCB0byB2aWV3cG9ydCwgbm8gYmxlZWQpXG4gIGNvbnN0IHBhZ2VTaXplQW5kQmxlZWQ6IFBhZ2VTaXplQW5kQmxlZWQgPSB7XG4gICAgd2lkdGg6IENzcy5mdWxsV2lkdGgsXG4gICAgaGVpZ2h0OiBDc3MuZnVsbEhlaWdodCxcbiAgICBibGVlZDogQ3NzLm51bWVyaWNaZXJvLFxuICAgIGJsZWVkT2Zmc2V0OiBDc3MubnVtZXJpY1plcm8sXG4gIH07XG4gIGNvbnN0IHNpemU6IENzc0Nhc2NhZGUuQ2FzY2FkZVZhbHVlID0gc3R5bGVbXCJzaXplXCJdO1xuXG4gIGlmICghc2l6ZSB8fCBzaXplLnZhbHVlID09PSBDc3MuaWRlbnQuYXV0bykge1xuICAgIC8vIGlmIHNpemUgaXMgYXV0bywgZml0IHRvIHRoZSB2aWV3cG9ydCAodXNlIGRlZmF1bHQgdmFsdWUpXG4gIH0gZWxzZSB7XG4gICAgLyoqICF0eXBlIHshQ3NzLlZhbH0gKi9cbiAgICBjb25zdCB2YWx1ZSA9IHNpemUudmFsdWU7XG4gICAgbGV0IHZhbDE6IENzcy5WYWw7XG4gICAgbGV0IHZhbDI6IENzcy5WYWw7XG4gICAgaWYgKHZhbHVlLmlzU3BhY2VMaXN0KCkpIHtcbiAgICAgIHZhbDEgPSAodmFsdWUgYXMgQ3NzLlNwYWNlTGlzdCkudmFsdWVzWzBdO1xuICAgICAgdmFsMiA9ICh2YWx1ZSBhcyBDc3MuU3BhY2VMaXN0KS52YWx1ZXNbMV07XG4gICAgfSBlbHNlIHtcbiAgICAgIHZhbDEgPSB2YWx1ZTtcbiAgICAgIHZhbDIgPSBudWxsO1xuICAgIH1cbiAgICBpZiAodmFsMS5pc051bWVyaWMoKSkge1xuICAgICAgLy8gPGxlbmd0aD57MSwyfVxuICAgICAgcGFnZVNpemVBbmRCbGVlZC53aWR0aCA9IHZhbDEgYXMgQ3NzLk51bWVyaWM7XG4gICAgICBwYWdlU2l6ZUFuZEJsZWVkLmhlaWdodCA9ICh2YWwyIHx8IHZhbDEpIGFzIENzcy5OdW1lcmljO1xuICAgIH0gZWxzZSB7XG4gICAgICAvLyA8cGFnZS1zaXplPiB8fCBbIHBvcnRyYWl0IHwgbGFuZHNjYXBlIF1cbiAgICAgIGNvbnN0IHMgPVxuICAgICAgICAodmFsMSBhcyBhbnkpLm5hbWUgJiYgcGFnZVNpemVzWyh2YWwxIGFzIENzcy5JZGVudCkubmFtZS50b0xvd2VyQ2FzZSgpXTtcbiAgICAgIGlmICghcykge1xuICAgICAgICAvLyBwb3J0cmFpdCBvciBsYW5kc2NhcGUgaXMgc3BlY2lmaWVkIGFsb25lLiBmYWxsYmFjayB0byBmaXQgdG8gdGhlXG4gICAgICAgIC8vIHZpZXdwb3J0ICh1c2UgZGVmYXVsdCB2YWx1ZSlcbiAgICAgIH0gZWxzZSBpZiAodmFsMiAmJiB2YWwyID09PSBDc3MuaWRlbnQubGFuZHNjYXBlKSB7XG4gICAgICAgIC8vIHN3YXBcbiAgICAgICAgcGFnZVNpemVBbmRCbGVlZC53aWR0aCA9IHMuaGVpZ2h0O1xuICAgICAgICBwYWdlU2l6ZUFuZEJsZWVkLmhlaWdodCA9IHMud2lkdGg7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICAvLyByZXR1cm4ge1xuICAgICAgICBwYWdlU2l6ZUFuZEJsZWVkLndpZHRoID0gcy53aWR0aDtcbiAgICAgICAgcGFnZVNpemVBbmRCbGVlZC5oZWlnaHQgPSBzLmhlaWdodDtcbiAgICAgIH1cbiAgICB9XG4gIH1cbiAgY29uc3QgbWFya3MgPSBzdHlsZVtcIm1hcmtzXCJdO1xuICBpZiAobWFya3MgJiYgbWFya3MudmFsdWUgIT09IENzcy5pZGVudC5ub25lKSB7XG4gICAgcGFnZVNpemVBbmRCbGVlZC5ibGVlZE9mZnNldCA9IGRlZmF1bHRCbGVlZE9mZnNldDtcbiAgfVxuICBjb25zdCBibGVlZCA9IHN0eWxlW1wiYmxlZWRcIl07XG4gIGlmICghYmxlZWQgfHwgYmxlZWQudmFsdWUgPT09IENzcy5pZGVudC5hdXRvKSB7XG4gICAgLy8gXCIoJ2F1dG8nIHZhbHVlKSBDb21wdXRlcyB0byA2cHQgaWYgbWFya3MgaGFzIGNyb3AgYW5kIHRvIHplcm9cbiAgICAvLyBvdGhlcndpc2UuXCIgaHR0cHM6Ly9kcmFmdHMuY3Nzd2cub3JnL2Nzcy1wYWdlLyN2YWxkZWYtcGFnZS1ibGVlZC1hdXRvXG4gICAgaWYgKG1hcmtzKSB7XG4gICAgICBsZXQgaGFzQ3JvcCA9IGZhbHNlO1xuICAgICAgaWYgKG1hcmtzLnZhbHVlLmlzU3BhY2VMaXN0KCkpIHtcbiAgICAgICAgaGFzQ3JvcCA9IChtYXJrcy52YWx1ZSBhcyBDc3MuU3BhY2VMaXN0KS52YWx1ZXMuc29tZShcbiAgICAgICAgICAodikgPT4gdiA9PT0gQ3NzLmlkZW50LmNyb3AsXG4gICAgICAgICk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBoYXNDcm9wID0gbWFya3MudmFsdWUgPT09IENzcy5pZGVudC5jcm9wO1xuICAgICAgfVxuICAgICAgaWYgKGhhc0Nyb3ApIHtcbiAgICAgICAgcGFnZVNpemVBbmRCbGVlZC5ibGVlZCA9IG5ldyBDc3MuTnVtZXJpYyg2LCBcInB0XCIpO1xuICAgICAgfVxuICAgIH1cbiAgfSBlbHNlIGlmIChibGVlZC52YWx1ZSAmJiBibGVlZC52YWx1ZS5pc051bWVyaWMoKSkge1xuICAgIHBhZ2VTaXplQW5kQmxlZWQuYmxlZWQgPSBibGVlZC52YWx1ZSBhcyBDc3MuTnVtZXJpYztcbiAgfVxuICByZXR1cm4gcGFnZVNpemVBbmRCbGVlZDtcbn1cblxuZXhwb3J0IHR5cGUgRXZhbHVhdGVkUGFnZVNpemVBbmRCbGVlZCA9IHtcbiAgcGFnZVdpZHRoOiBudW1iZXI7XG4gIHBhZ2VIZWlnaHQ6IG51bWJlcjtcbiAgYmxlZWQ6IG51bWJlcjtcbiAgYmxlZWRPZmZzZXQ6IG51bWJlcjtcbiAgY3JvcE9mZnNldDogbnVtYmVyO1xufTtcblxuLyoqXG4gKiBFdmFsdWF0ZSBhY3R1YWwgcGFnZSB3aWR0aCwgaGVpZ2h0IGFuZCBibGVlZCBmcm9tIHN0eWxlIHNwZWNpZmllZCBpbiBwYWdlXG4gKiBjb250ZXh0LlxuICovXG5leHBvcnQgZnVuY3Rpb24gZXZhbHVhdGVQYWdlU2l6ZUFuZEJsZWVkKFxuICBwYWdlU2l6ZUFuZEJsZWVkOiBQYWdlU2l6ZUFuZEJsZWVkLFxuICBjb250ZXh0OiBFeHBycy5Db250ZXh0LFxuKTogRXZhbHVhdGVkUGFnZVNpemVBbmRCbGVlZCB7XG4gIGNvbnN0IGV2YWx1YXRlZCA9IHt9IGFzIEV2YWx1YXRlZFBhZ2VTaXplQW5kQmxlZWQ7XG4gIGNvbnN0IGJsZWVkID1cbiAgICBwYWdlU2l6ZUFuZEJsZWVkLmJsZWVkLm51bSAqXG4gICAgY29udGV4dC5xdWVyeVVuaXRTaXplKHBhZ2VTaXplQW5kQmxlZWQuYmxlZWQudW5pdCwgZmFsc2UpO1xuICBjb25zdCBibGVlZE9mZnNldCA9XG4gICAgcGFnZVNpemVBbmRCbGVlZC5ibGVlZE9mZnNldC5udW0gKlxuICAgIGNvbnRleHQucXVlcnlVbml0U2l6ZShwYWdlU2l6ZUFuZEJsZWVkLmJsZWVkT2Zmc2V0LnVuaXQsIGZhbHNlKTtcbiAgY29uc3QgY3JvcE9mZnNldCA9IGJsZWVkICsgYmxlZWRPZmZzZXQ7XG4gIGNvbnN0IHdpZHRoID0gcGFnZVNpemVBbmRCbGVlZC53aWR0aDtcbiAgaWYgKHdpZHRoID09PSBDc3MuZnVsbFdpZHRoKSB7XG4gICAgaWYgKGNvbnRleHQucHJlZi5kZWZhdWx0UGFwZXJTaXplKSB7XG4gICAgICBldmFsdWF0ZWQucGFnZVdpZHRoID1cbiAgICAgICAgY29udGV4dC5wcmVmLmRlZmF1bHRQYXBlclNpemUud2lkdGggKlxuICAgICAgICBjb250ZXh0LnF1ZXJ5VW5pdFNpemUoXCJweFwiLCBmYWxzZSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGV2YWx1YXRlZC5wYWdlV2lkdGggPVxuICAgICAgICAoY29udGV4dC5wcmVmLnNwcmVhZFZpZXdcbiAgICAgICAgICA/IE1hdGguZmxvb3IoY29udGV4dC52aWV3cG9ydFdpZHRoIC8gMikgLSBjb250ZXh0LnByZWYucGFnZUJvcmRlclxuICAgICAgICAgIDogY29udGV4dC52aWV3cG9ydFdpZHRoKSAtXG4gICAgICAgIGNyb3BPZmZzZXQgKiAyO1xuICAgIH1cbiAgfSBlbHNlIHtcbiAgICBldmFsdWF0ZWQucGFnZVdpZHRoID0gd2lkdGgubnVtICogY29udGV4dC5xdWVyeVVuaXRTaXplKHdpZHRoLnVuaXQsIGZhbHNlKTtcbiAgfVxuICBjb25zdCBoZWlnaHQgPSBwYWdlU2l6ZUFuZEJsZWVkLmhlaWdodDtcbiAgaWYgKGhlaWdodCA9PT0gQ3NzLmZ1bGxIZWlnaHQpIHtcbiAgICBpZiAoY29udGV4dC5wcmVmLmRlZmF1bHRQYXBlclNpemUpIHtcbiAgICAgIGV2YWx1YXRlZC5wYWdlSGVpZ2h0ID1cbiAgICAgICAgY29udGV4dC5wcmVmLmRlZmF1bHRQYXBlclNpemUuaGVpZ2h0ICpcbiAgICAgICAgY29udGV4dC5xdWVyeVVuaXRTaXplKFwicHhcIiwgZmFsc2UpO1xuICAgIH0gZWxzZSB7XG4gICAgICBldmFsdWF0ZWQucGFnZUhlaWdodCA9IGNvbnRleHQudmlld3BvcnRIZWlnaHQgLSBjcm9wT2Zmc2V0ICogMjtcbiAgICB9XG4gIH0gZWxzZSB7XG4gICAgZXZhbHVhdGVkLnBhZ2VIZWlnaHQgPVxuICAgICAgaGVpZ2h0Lm51bSAqIGNvbnRleHQucXVlcnlVbml0U2l6ZShoZWlnaHQudW5pdCwgZmFsc2UpO1xuICB9XG4gIGV2YWx1YXRlZC5ibGVlZCA9IGJsZWVkO1xuICBldmFsdWF0ZWQuYmxlZWRPZmZzZXQgPSBibGVlZE9mZnNldDtcbiAgZXZhbHVhdGVkLmNyb3BPZmZzZXQgPSBjcm9wT2Zmc2V0O1xuICByZXR1cm4gZXZhbHVhdGVkO1xufVxuXG4vKipcbiAqIENyZWF0ZSBhbiAnc3ZnJyBlbGVtZW50IGZvciBhIHByaW50ZXIgbWFyay5cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGNyZWF0ZVByaW50ZXJNYXJrU3ZnKFxuICBkb2M6IERvY3VtZW50LFxuICB3aWR0aDogbnVtYmVyLFxuICBoZWlnaHQ6IG51bWJlcixcbik6IEVsZW1lbnQge1xuICBjb25zdCBtYXJrID0gZG9jLmNyZWF0ZUVsZW1lbnROUyhCYXNlLk5TLlNWRywgXCJzdmdcIik7XG4gIG1hcmsuc2V0QXR0cmlidXRlKFwid2lkdGhcIiwgd2lkdGgpO1xuICBtYXJrLnNldEF0dHJpYnV0ZShcImhlaWdodFwiLCBoZWlnaHQpO1xuICBtYXJrLnN0eWxlLnBvc2l0aW9uID0gXCJhYnNvbHV0ZVwiO1xuICByZXR1cm4gbWFyaztcbn1cblxuLyoqXG4gKiBDcmVhdGUgYW4gU1ZHIGVsZW1lbnQgZm9yIGEgcHJpbnRlciBtYXJrIGxpbmUuXG4gKiBAcGFyYW0gZWxlbWVudFR5cGUgU3BlY2lmaWVzIHdoaWNoIHR5cGUgb2YgZWxlbWVudCB0byBjcmVhdGUuIERlZmF1bHQgdmFsdWVcbiAqICAgICBpcyBcInBvbHlsaW5lXCIuXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBjcmVhdGVQcmludGVyTWFya0VsZW1lbnQoXG4gIGRvYzogRG9jdW1lbnQsXG4gIGxpbmVXaWR0aDogbnVtYmVyLFxuICBlbGVtZW50VHlwZT86IHN0cmluZyxcbik6IEVsZW1lbnQge1xuICBlbGVtZW50VHlwZSA9IGVsZW1lbnRUeXBlIHx8IFwicG9seWxpbmVcIjtcbiAgY29uc3QgbGluZSA9IGRvYy5jcmVhdGVFbGVtZW50TlMoQmFzZS5OUy5TVkcsIGVsZW1lbnRUeXBlKTtcbiAgbGluZS5zZXRBdHRyaWJ1dGUoXCJzdHJva2VcIiwgXCJibGFja1wiKTtcbiAgbGluZS5zZXRBdHRyaWJ1dGUoXCJzdHJva2Utd2lkdGhcIiwgbGluZVdpZHRoKTtcbiAgbGluZS5zZXRBdHRyaWJ1dGUoXCJmaWxsXCIsIFwibm9uZVwiKTtcbiAgcmV0dXJuIGxpbmU7XG59XG5cbi8qKlxuICogUG9zaXRpb24gb2YgYSBjb3JuZXIgbWFya1xuICogQGVudW0ge3N0cmluZ31cbiAqL1xuZXhwb3J0IGVudW0gQ29ybmVyTWFya1Bvc2l0aW9uIHtcbiAgVE9QX0xFRlQgPSBcInRvcCBsZWZ0XCIsXG4gIFRPUF9SSUdIVCA9IFwidG9wIHJpZ2h0XCIsXG4gIEJPVFRPTV9MRUZUID0gXCJib3R0b20gbGVmdFwiLFxuICBCT1RUT01fUklHSFQgPSBcImJvdHRvbSByaWdodFwiLFxufVxuXG4vKipcbiAqIENyZWF0ZSBhIGNvcm5lciBtYXJrLlxuICovXG5leHBvcnQgZnVuY3Rpb24gY3JlYXRlQ29ybmVyTWFyayhcbiAgZG9jOiBEb2N1bWVudCxcbiAgcG9zaXRpb246IENvcm5lck1hcmtQb3NpdGlvbixcbiAgbGluZVdpZHRoOiBudW1iZXIsXG4gIGNyb3BNYXJrTGluZUxlbmd0aDogbnVtYmVyLFxuICBibGVlZDogbnVtYmVyLFxuICBvZmZzZXQ6IG51bWJlcixcbik6IEVsZW1lbnQge1xuICBsZXQgYmxlZWRNYXJrTGluZUxlbmd0aCA9IGNyb3BNYXJrTGluZUxlbmd0aDtcblxuICAvLyBibGVlZCBtYXJrIGxpbmUgc2hvdWxkIGJlIGxvbmdlciB0aGFuIGJsZWVkICsgMm1tXG4gIGlmIChibGVlZE1hcmtMaW5lTGVuZ3RoIDw9IGJsZWVkICsgMiAqIEV4cHJzLmRlZmF1bHRVbml0U2l6ZXNbXCJtbVwiXSkge1xuICAgIGJsZWVkTWFya0xpbmVMZW5ndGggPSBibGVlZCArIGNyb3BNYXJrTGluZUxlbmd0aCAvIDI7XG4gIH1cbiAgY29uc3QgbWF4TGluZUxlbmd0aCA9IE1hdGgubWF4KGNyb3BNYXJrTGluZUxlbmd0aCwgYmxlZWRNYXJrTGluZUxlbmd0aCk7XG4gIGNvbnN0IHN2Z1dpZHRoID0gYmxlZWQgKyBtYXhMaW5lTGVuZ3RoICsgbGluZVdpZHRoIC8gMjtcbiAgY29uc3QgbWFyayA9IGNyZWF0ZVByaW50ZXJNYXJrU3ZnKGRvYywgc3ZnV2lkdGgsIHN2Z1dpZHRoKTtcbiAgbGV0IHBvaW50czEgPSBbXG4gICAgWzAsIGJsZWVkICsgY3JvcE1hcmtMaW5lTGVuZ3RoXSxcbiAgICBbY3JvcE1hcmtMaW5lTGVuZ3RoLCBibGVlZCArIGNyb3BNYXJrTGluZUxlbmd0aF0sXG4gICAgW2Nyb3BNYXJrTGluZUxlbmd0aCwgYmxlZWQgKyBjcm9wTWFya0xpbmVMZW5ndGggLSBibGVlZE1hcmtMaW5lTGVuZ3RoXSxcbiAgXTtcblxuICAvLyByZWZsZWN0IHdpdGggcmVzcGVjdCB0byB5PXhcbiAgbGV0IHBvaW50czIgPSBwb2ludHMxLm1hcCgocCkgPT4gW3BbMV0sIHBbMF1dKTtcbiAgaWYgKFxuICAgIHBvc2l0aW9uID09PSBDb3JuZXJNYXJrUG9zaXRpb24uVE9QX1JJR0hUIHx8XG4gICAgcG9zaXRpb24gPT09IENvcm5lck1hcmtQb3NpdGlvbi5CT1RUT01fUklHSFRcbiAgKSB7XG4gICAgLy8gcmVmbGVjdCB3aXRoIHJlc3BlY3QgdG8gYSB2ZXJ0aWNhbCBheGlzXG4gICAgcG9pbnRzMSA9IHBvaW50czEubWFwKChwKSA9PiBbYmxlZWQgKyBtYXhMaW5lTGVuZ3RoIC0gcFswXSwgcFsxXV0pO1xuICAgIHBvaW50czIgPSBwb2ludHMyLm1hcCgocCkgPT4gW2JsZWVkICsgbWF4TGluZUxlbmd0aCAtIHBbMF0sIHBbMV1dKTtcbiAgfVxuICBpZiAoXG4gICAgcG9zaXRpb24gPT09IENvcm5lck1hcmtQb3NpdGlvbi5CT1RUT01fTEVGVCB8fFxuICAgIHBvc2l0aW9uID09PSBDb3JuZXJNYXJrUG9zaXRpb24uQk9UVE9NX1JJR0hUXG4gICkge1xuICAgIC8vIHJlZmxlY3Qgd2l0aCByZXNwZWN0IHRvIGEgdmVydGljYWwgYXhpc1xuICAgIHBvaW50czEgPSBwb2ludHMxLm1hcCgocCkgPT4gW3BbMF0sIGJsZWVkICsgbWF4TGluZUxlbmd0aCAtIHBbMV1dKTtcbiAgICBwb2ludHMyID0gcG9pbnRzMi5tYXAoKHApID0+IFtwWzBdLCBibGVlZCArIG1heExpbmVMZW5ndGggLSBwWzFdXSk7XG4gIH1cbiAgY29uc3QgbGluZTEgPSBjcmVhdGVQcmludGVyTWFya0VsZW1lbnQoZG9jLCBsaW5lV2lkdGgpO1xuICBsaW5lMS5zZXRBdHRyaWJ1dGUoXCJwb2ludHNcIiwgcG9pbnRzMS5tYXAoKHApID0+IHAuam9pbihcIixcIikpLmpvaW4oXCIgXCIpKTtcbiAgbWFyay5hcHBlbmRDaGlsZChsaW5lMSk7XG4gIGNvbnN0IGxpbmUyID0gY3JlYXRlUHJpbnRlck1hcmtFbGVtZW50KGRvYywgbGluZVdpZHRoKTtcbiAgbGluZTIuc2V0QXR0cmlidXRlKFwicG9pbnRzXCIsIHBvaW50czIubWFwKChwKSA9PiBwLmpvaW4oXCIsXCIpKS5qb2luKFwiIFwiKSk7XG4gIG1hcmsuYXBwZW5kQ2hpbGQobGluZTIpO1xuICBwb3NpdGlvbi5zcGxpdChcIiBcIikuZm9yRWFjaCgoc2lkZSkgPT4ge1xuICAgIChtYXJrIGFzIGFueSkuc3R5bGVbc2lkZV0gPSBgJHtvZmZzZXR9cHhgO1xuICB9KTtcbiAgcmV0dXJuIG1hcms7XG59XG5cbi8qKlxuICogUG9zaXRpb24gb2YgYSBjcm9zcyBtYXJrXG4gKiBAZW51bSB7c3RyaW5nfVxuICovXG5leHBvcnQgZW51bSBDcm9zc01hcmtQb3NpdGlvbiB7XG4gIFRPUCA9IFwidG9wXCIsXG4gIEJPVFRPTSA9IFwiYm90dG9tXCIsXG4gIExFRlQgPSBcImxlZnRcIixcbiAgUklHSFQgPSBcInJpZ2h0XCIsXG59XG5cbi8qKlxuICogQ3JlYXRlIGEgY3Jvc3MgbWFyay5cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGNyZWF0ZUNyb3NzTWFyayhcbiAgZG9jOiBEb2N1bWVudCxcbiAgcG9zaXRpb246IENyb3NzTWFya1Bvc2l0aW9uLFxuICBsaW5lV2lkdGg6IG51bWJlcixcbiAgbGluZUxlbmd0aDogbnVtYmVyLFxuICBvZmZzZXQ6IG51bWJlcixcbik6IEVsZW1lbnQge1xuICBjb25zdCBsb25nTGluZUxlbmd0aCA9IGxpbmVMZW5ndGggKiAyO1xuICBsZXQgd2lkdGg6IG51bWJlcjtcbiAgbGV0IGhlaWdodDogbnVtYmVyO1xuICBpZiAoXG4gICAgcG9zaXRpb24gPT09IENyb3NzTWFya1Bvc2l0aW9uLlRPUCB8fFxuICAgIHBvc2l0aW9uID09PSBDcm9zc01hcmtQb3NpdGlvbi5CT1RUT01cbiAgKSB7XG4gICAgd2lkdGggPSBsb25nTGluZUxlbmd0aDtcbiAgICBoZWlnaHQgPSBsaW5lTGVuZ3RoO1xuICB9IGVsc2Uge1xuICAgIHdpZHRoID0gbGluZUxlbmd0aDtcbiAgICBoZWlnaHQgPSBsb25nTGluZUxlbmd0aDtcbiAgfVxuICBjb25zdCBtYXJrID0gY3JlYXRlUHJpbnRlck1hcmtTdmcoZG9jLCB3aWR0aCwgaGVpZ2h0KTtcbiAgY29uc3QgaG9yaXpvbnRhbExpbmUgPSBjcmVhdGVQcmludGVyTWFya0VsZW1lbnQoZG9jLCBsaW5lV2lkdGgpO1xuICBob3Jpem9udGFsTGluZS5zZXRBdHRyaWJ1dGUoXG4gICAgXCJwb2ludHNcIixcbiAgICBgMCwke2hlaWdodCAvIDJ9ICR7d2lkdGh9LCR7aGVpZ2h0IC8gMn1gLFxuICApO1xuICBtYXJrLmFwcGVuZENoaWxkKGhvcml6b250YWxMaW5lKTtcbiAgY29uc3QgdmVydGljYWxMaW5lID0gY3JlYXRlUHJpbnRlck1hcmtFbGVtZW50KGRvYywgbGluZVdpZHRoKTtcbiAgdmVydGljYWxMaW5lLnNldEF0dHJpYnV0ZShcInBvaW50c1wiLCBgJHt3aWR0aCAvIDJ9LDAgJHt3aWR0aCAvIDJ9LCR7aGVpZ2h0fWApO1xuICBtYXJrLmFwcGVuZENoaWxkKHZlcnRpY2FsTGluZSk7XG4gIGNvbnN0IGNpcmNsZSA9IGNyZWF0ZVByaW50ZXJNYXJrRWxlbWVudChkb2MsIGxpbmVXaWR0aCwgXCJjaXJjbGVcIik7XG4gIGNpcmNsZS5zZXRBdHRyaWJ1dGUoXCJjeFwiLCB3aWR0aCAvIDIpO1xuICBjaXJjbGUuc2V0QXR0cmlidXRlKFwiY3lcIiwgaGVpZ2h0IC8gMik7XG4gIGNpcmNsZS5zZXRBdHRyaWJ1dGUoXCJyXCIsIGxpbmVMZW5ndGggLyA0KTtcbiAgbWFyay5hcHBlbmRDaGlsZChjaXJjbGUpO1xuICBsZXQgb3Bwb3NpdGU6IENyb3NzTWFya1Bvc2l0aW9uO1xuICBzd2l0Y2ggKHBvc2l0aW9uKSB7XG4gICAgY2FzZSBDcm9zc01hcmtQb3NpdGlvbi5UT1A6XG4gICAgICBvcHBvc2l0ZSA9IENyb3NzTWFya1Bvc2l0aW9uLkJPVFRPTTtcbiAgICAgIGJyZWFrO1xuICAgIGNhc2UgQ3Jvc3NNYXJrUG9zaXRpb24uQk9UVE9NOlxuICAgICAgb3Bwb3NpdGUgPSBDcm9zc01hcmtQb3NpdGlvbi5UT1A7XG4gICAgICBicmVhaztcbiAgICBjYXNlIENyb3NzTWFya1Bvc2l0aW9uLkxFRlQ6XG4gICAgICBvcHBvc2l0ZSA9IENyb3NzTWFya1Bvc2l0aW9uLlJJR0hUO1xuICAgICAgYnJlYWs7XG4gICAgY2FzZSBDcm9zc01hcmtQb3NpdGlvbi5SSUdIVDpcbiAgICAgIG9wcG9zaXRlID0gQ3Jvc3NNYXJrUG9zaXRpb24uTEVGVDtcbiAgICAgIGJyZWFrO1xuICB9XG4gIE9iamVjdC5rZXlzKENyb3NzTWFya1Bvc2l0aW9uKS5mb3JFYWNoKChrZXkpID0+IHtcbiAgICBjb25zdCBzaWRlID0gQ3Jvc3NNYXJrUG9zaXRpb25ba2V5XTtcbiAgICBpZiAoc2lkZSA9PT0gcG9zaXRpb24pIHtcbiAgICAgIChtYXJrIGFzIGFueSkuc3R5bGVbc2lkZV0gPSBgJHtvZmZzZXR9cHhgO1xuICAgIH0gZWxzZSBpZiAoc2lkZSAhPT0gb3Bwb3NpdGUpIHtcbiAgICAgIChtYXJrIGFzIGFueSkuc3R5bGVbc2lkZV0gPSBcIjBcIjtcbiAgICAgIChtYXJrIGFzIGFueSkuc3R5bGVbYG1hcmdpbi0ke3NpZGV9YF0gPSBcImF1dG9cIjtcbiAgICB9XG4gIH0pO1xuICByZXR1cm4gbWFyaztcbn1cblxuLyoqXG4gKiBBZGQgcHJpbnRlciBtYXJrcyB0byB0aGUgcGFnZS5cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGFkZFByaW50ZXJNYXJrcyhcbiAgY2FzY2FkZWRQYWdlU3R5bGU6IENzc0Nhc2NhZGUuRWxlbWVudFN0eWxlLFxuICBldmFsdWF0ZWRQYWdlU2l6ZUFuZEJsZWVkOiBFdmFsdWF0ZWRQYWdlU2l6ZUFuZEJsZWVkLFxuICBwYWdlOiBWdHJlZS5QYWdlLFxuICBjb250ZXh0OiBFeHBycy5Db250ZXh0LFxuKTogdm9pZCB7XG4gIGxldCBjcm9wID0gZmFsc2U7XG4gIGxldCBjcm9zcyA9IGZhbHNlO1xuICBjb25zdCBtYXJrcyA9IGNhc2NhZGVkUGFnZVN0eWxlW1wibWFya3NcIl07XG4gIGlmIChtYXJrcykge1xuICAgIGNvbnN0IHZhbHVlID0gbWFya3MudmFsdWU7XG4gICAgaWYgKHZhbHVlLmlzU3BhY2VMaXN0KCkpIHtcbiAgICAgIHZhbHVlLnZhbHVlcy5mb3JFYWNoKCh2KSA9PiB7XG4gICAgICAgIGlmICh2ID09PSBDc3MuaWRlbnQuY3JvcCkge1xuICAgICAgICAgIGNyb3AgPSB0cnVlO1xuICAgICAgICB9IGVsc2UgaWYgKHYgPT09IENzcy5pZGVudC5jcm9zcykge1xuICAgICAgICAgIGNyb3NzID0gdHJ1ZTtcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgfSBlbHNlIGlmICh2YWx1ZSA9PT0gQ3NzLmlkZW50LmNyb3ApIHtcbiAgICAgIGNyb3AgPSB0cnVlO1xuICAgIH0gZWxzZSBpZiAodmFsdWUgPT09IENzcy5pZGVudC5jcm9zcykge1xuICAgICAgY3Jvc3MgPSB0cnVlO1xuICAgIH1cbiAgfVxuICBpZiAoIWNyb3AgJiYgIWNyb3NzKSB7XG4gICAgcmV0dXJuO1xuICB9XG4gIGNvbnN0IGNvbnRhaW5lciA9IHBhZ2UuY29udGFpbmVyO1xuICBjb25zdCBkb2MgPSBjb250YWluZXIub3duZXJEb2N1bWVudCBhcyBEb2N1bWVudDtcbiAgQXNzZXJ0cy5hc3NlcnQoZG9jKTtcbiAgY29uc3QgYmxlZWQgPSBldmFsdWF0ZWRQYWdlU2l6ZUFuZEJsZWVkLmJsZWVkO1xuICBjb25zdCBsaW5lV2lkdGggPSBDc3MudG9OdW1iZXIoZGVmYXVsdFByaW50ZXJNYXJrTGluZVdpZHRoLCBjb250ZXh0KTtcbiAgY29uc3QgcHJpbnRlck1hcmtPZmZzZXQgPSBDc3MudG9OdW1iZXIoZGVmYXVsdFByaW50ZXJNYXJrT2Zmc2V0LCBjb250ZXh0KTtcbiAgY29uc3QgbGluZUxlbmd0aCA9IENzcy50b051bWJlcihkZWZhdWx0UHJpbnRlck1hcmtMaW5lTGVuZ3RoLCBjb250ZXh0KTtcblxuICBpZiAoYmxlZWQpIHtcbiAgICBjb25zdCBiZ2NvbG9yID0gY2FzY2FkZWRQYWdlU3R5bGVbXCJiYWNrZ3JvdW5kLWNvbG9yXCJdO1xuICAgIGlmIChiZ2NvbG9yICYmIGJnY29sb3IudmFsdWUpIHtcbiAgICAgIHBhZ2UuYmxlZWRCb3guc3R5bGUuYmFja2dyb3VuZENvbG9yID0gYmdjb2xvci52YWx1ZS5zdHJpbmdWYWx1ZSgpO1xuICAgIH1cbiAgfVxuXG4gIC8vIGNvcm5lciBtYXJrc1xuICBpZiAoY3JvcCkge1xuICAgIE9iamVjdC5rZXlzKENvcm5lck1hcmtQb3NpdGlvbikuZm9yRWFjaCgoa2V5KSA9PiB7XG4gICAgICBjb25zdCBwb3NpdGlvbiA9IENvcm5lck1hcmtQb3NpdGlvbltrZXldO1xuICAgICAgY29uc3QgbWFyayA9IGNyZWF0ZUNvcm5lck1hcmsoXG4gICAgICAgIGRvYyxcbiAgICAgICAgcG9zaXRpb24sXG4gICAgICAgIGxpbmVXaWR0aCxcbiAgICAgICAgbGluZUxlbmd0aCxcbiAgICAgICAgYmxlZWQsXG4gICAgICAgIHByaW50ZXJNYXJrT2Zmc2V0LFxuICAgICAgKTtcbiAgICAgIGNvbnRhaW5lci5hcHBlbmRDaGlsZChtYXJrKTtcbiAgICB9KTtcbiAgfVxuXG4gIC8vIGNyb3NzIG1hcmtzXG4gIGlmIChjcm9zcykge1xuICAgIE9iamVjdC5rZXlzKENyb3NzTWFya1Bvc2l0aW9uKS5mb3JFYWNoKChrZXkpID0+IHtcbiAgICAgIGNvbnN0IHBvc2l0aW9uID0gQ3Jvc3NNYXJrUG9zaXRpb25ba2V5XTtcbiAgICAgIGNvbnN0IG1hcmsgPSBjcmVhdGVDcm9zc01hcmsoXG4gICAgICAgIGRvYyxcbiAgICAgICAgcG9zaXRpb24sXG4gICAgICAgIGxpbmVXaWR0aCxcbiAgICAgICAgbGluZUxlbmd0aCxcbiAgICAgICAgcHJpbnRlck1hcmtPZmZzZXQsXG4gICAgICApO1xuICAgICAgY29udGFpbmVyLmFwcGVuZENoaWxkKG1hcmspO1xuICAgIH0pO1xuICB9XG59XG5cbi8qKlxuICogUHJvcGVydGllcyB0cmFuc2ZlcmVkIGZyb20gdGhlIFBhZ2VSdWxlTWFzdGVyIHRvIHRoZSBQYWdlUnVsZVBhcnRpdGlvblxuICovXG5leHBvcnQgY29uc3QgcHJvcGVydGllc0FwcGxpZWRUb1BhcnRpdGlvbiA9ICgoKSA9PiB7XG4gIGNvbnN0IHNpZGVzID0gW1xuICAgIFwibGVmdFwiLFxuICAgIFwicmlnaHRcIixcbiAgICBcInRvcFwiLFxuICAgIFwiYm90dG9tXCIsXG4gICAgXCJiZWZvcmVcIixcbiAgICBcImFmdGVyXCIsXG4gICAgXCJzdGFydFwiLFxuICAgIFwiZW5kXCIsXG4gICAgXCJibG9jay1zdGFydFwiLFxuICAgIFwiYmxvY2stZW5kXCIsXG4gICAgXCJpbmxpbmUtc3RhcnRcIixcbiAgICBcImlubGluZS1lbmRcIixcbiAgXTtcbiAgY29uc3QgcHJvcHMgPSB7XG4gICAgd2lkdGg6IHRydWUsXG4gICAgaGVpZ2h0OiB0cnVlLFxuICAgIFwiYmxvY2stc2l6ZVwiOiB0cnVlLFxuICAgIFwiaW5saW5lLXNpemVcIjogdHJ1ZSxcbiAgICBtYXJnaW46IHRydWUsXG4gICAgcGFkZGluZzogdHJ1ZSxcbiAgICBib3JkZXI6IHRydWUsXG4gICAgb3V0bGluZTogdHJ1ZSxcbiAgICBcIm91dGxpbmUtd2lkdGhcIjogdHJ1ZSxcbiAgICBcIm91dGxpbmUtc3R5bGVcIjogdHJ1ZSxcbiAgICBcIm91dGxpbmUtY29sb3JcIjogdHJ1ZSxcbiAgfTtcbiAgc2lkZXMuZm9yRWFjaCgoc2lkZSkgPT4ge1xuICAgIHByb3BzW2BtYXJnaW4tJHtzaWRlfWBdID0gdHJ1ZTtcbiAgICBwcm9wc1tgcGFkZGluZy0ke3NpZGV9YF0gPSB0cnVlO1xuICAgIHByb3BzW2Bib3JkZXItJHtzaWRlfS13aWR0aGBdID0gdHJ1ZTtcbiAgICBwcm9wc1tgYm9yZGVyLSR7c2lkZX0tc3R5bGVgXSA9IHRydWU7XG4gICAgcHJvcHNbYGJvcmRlci0ke3NpZGV9LWNvbG9yYF0gPSB0cnVlO1xuICB9KTtcbiAgcmV0dXJuIHByb3BzO1xufSkoKTtcblxuLyoqXG4gKiBSZXByZXNlbnRzIHBvc2l0aW9uIG9mIGEgbWFyZ2luIGJveCBhbG9uZyB0aGUgdmFyaWFibGUgZGltZW5zaW9uIG9mIHRoZSBwYWdlLlxuICogU1RBUlQgYW5kIEVORCBjYW4gYmUgaW50ZXJwcmV0ZWQgYXMgJ2lubGluZS1zdGFydCcgYW5kICdpbmxpbmUtZW5kJyBpblxuICogaG9yaXpvbnRhbCBhbmQgdmVydGljYWwgd3JpdGluZyBtb2Rlcy4gRm9yIGV4YW1wbGUsIGZvciB0b3AgbWFyZ2luIGJveGVzXG4gKiAoQHRvcC1sZWZ0LWNvcm5lciwgQHRvcC1sZWZ0LCBAdG9wLWNlbnRlciwgQHRvcC1yaWdodCwgQHRvcC1yaWdodC1jb3JuZXIpLFxuICogQHRvcC1sZWZ0IGNvcnJlc3BvbmRzIHRvIFNUQVJULCBAdG9wLWNlbnRlciB0byBDRU5URVIsIGFuZCBAdG9wLXJpZ2h0IHRvIEVORC5cbiAqIFRoZSBjb3JuZXIgYm94ZXMgKEB0b3AtbGVmdC1jb3JuZXIgYW5kIEB0b3AtcmlnaHQtY29ybmVyKSBoYXZlIGEgJ251bGwnXG4gKiBwb3NpdGlvbi5cbiAqIEBlbnVtIHtzdHJpbmd9XG4gKi9cbmV4cG9ydCBlbnVtIE1hcmdpbkJveFBvc2l0aW9uQWxvbmdWYXJpYWJsZURpbWVuc2lvbiB7XG4gIFNUQVJUID0gXCJzdGFydFwiLFxuICBDRU5URVIgPSBcImNlbnRlclwiLFxuICBFTkQgPSBcImVuZFwiLFxufVxuXG5leHBvcnQgdHlwZSBQYWdlTWFyZ2luQm94SW5mb3JtYXRpb24gPSB7XG4gIG9yZGVyOiBudW1iZXI7XG4gIGlzSW5Ub3BSb3c6IGJvb2xlYW47XG4gIGlzSW5Cb3R0b21Sb3c6IGJvb2xlYW47XG4gIGlzSW5MZWZ0Q29sdW1uOiBib29sZWFuO1xuICBpc0luUmlnaHRDb2x1bW46IGJvb2xlYW47XG4gIHBvc2l0aW9uQWxvbmdWYXJpYWJsZURpbWVuc2lvbjogTWFyZ2luQm94UG9zaXRpb25BbG9uZ1ZhcmlhYmxlRGltZW5zaW9uO1xufTtcblxuLyoqXG4gKiBQYWdlLW1hcmdpbiBib3hlcy5cbiAqIEBkaWN0XG4gKi9cbmV4cG9ydCBjb25zdCBwYWdlTWFyZ2luQm94ZXM6IHsgW2tleTogc3RyaW5nXTogUGFnZU1hcmdpbkJveEluZm9ybWF0aW9uIH0gPSB7XG4gIFwidG9wLWxlZnQtY29ybmVyXCI6IHtcbiAgICBvcmRlcjogMSxcbiAgICBpc0luVG9wUm93OiB0cnVlLFxuICAgIGlzSW5Cb3R0b21Sb3c6IGZhbHNlLFxuICAgIGlzSW5MZWZ0Q29sdW1uOiB0cnVlLFxuICAgIGlzSW5SaWdodENvbHVtbjogdHJ1ZSxcbiAgICBwb3NpdGlvbkFsb25nVmFyaWFibGVEaW1lbnNpb246IG51bGwsXG4gIH0sXG4gIFwidG9wLWxlZnRcIjoge1xuICAgIG9yZGVyOiAyLFxuICAgIGlzSW5Ub3BSb3c6IHRydWUsXG4gICAgaXNJbkJvdHRvbVJvdzogZmFsc2UsXG4gICAgaXNJbkxlZnRDb2x1bW46IGZhbHNlLFxuICAgIGlzSW5SaWdodENvbHVtbjogZmFsc2UsXG4gICAgcG9zaXRpb25BbG9uZ1ZhcmlhYmxlRGltZW5zaW9uOlxuICAgICAgTWFyZ2luQm94UG9zaXRpb25BbG9uZ1ZhcmlhYmxlRGltZW5zaW9uLlNUQVJULFxuICB9LFxuICBcInRvcC1jZW50ZXJcIjoge1xuICAgIG9yZGVyOiAzLFxuICAgIGlzSW5Ub3BSb3c6IHRydWUsXG4gICAgaXNJbkJvdHRvbVJvdzogZmFsc2UsXG4gICAgaXNJbkxlZnRDb2x1bW46IGZhbHNlLFxuICAgIGlzSW5SaWdodENvbHVtbjogZmFsc2UsXG4gICAgcG9zaXRpb25BbG9uZ1ZhcmlhYmxlRGltZW5zaW9uOlxuICAgICAgTWFyZ2luQm94UG9zaXRpb25BbG9uZ1ZhcmlhYmxlRGltZW5zaW9uLkNFTlRFUixcbiAgfSxcbiAgXCJ0b3AtcmlnaHRcIjoge1xuICAgIG9yZGVyOiA0LFxuICAgIGlzSW5Ub3BSb3c6IHRydWUsXG4gICAgaXNJbkJvdHRvbVJvdzogZmFsc2UsXG4gICAgaXNJbkxlZnRDb2x1bW46IGZhbHNlLFxuICAgIGlzSW5SaWdodENvbHVtbjogZmFsc2UsXG4gICAgcG9zaXRpb25BbG9uZ1ZhcmlhYmxlRGltZW5zaW9uOiBNYXJnaW5Cb3hQb3NpdGlvbkFsb25nVmFyaWFibGVEaW1lbnNpb24uRU5ELFxuICB9LFxuICBcInRvcC1yaWdodC1jb3JuZXJcIjoge1xuICAgIG9yZGVyOiA1LFxuICAgIGlzSW5Ub3BSb3c6IHRydWUsXG4gICAgaXNJbkJvdHRvbVJvdzogZmFsc2UsXG4gICAgaXNJbkxlZnRDb2x1bW46IGZhbHNlLFxuICAgIGlzSW5SaWdodENvbHVtbjogdHJ1ZSxcbiAgICBwb3NpdGlvbkFsb25nVmFyaWFibGVEaW1lbnNpb246IG51bGwsXG4gIH0sXG4gIFwicmlnaHQtdG9wXCI6IHtcbiAgICBvcmRlcjogNixcbiAgICBpc0luVG9wUm93OiBmYWxzZSxcbiAgICBpc0luQm90dG9tUm93OiBmYWxzZSxcbiAgICBpc0luTGVmdENvbHVtbjogZmFsc2UsXG4gICAgaXNJblJpZ2h0Q29sdW1uOiB0cnVlLFxuICAgIHBvc2l0aW9uQWxvbmdWYXJpYWJsZURpbWVuc2lvbjpcbiAgICAgIE1hcmdpbkJveFBvc2l0aW9uQWxvbmdWYXJpYWJsZURpbWVuc2lvbi5TVEFSVCxcbiAgfSxcbiAgXCJyaWdodC1taWRkbGVcIjoge1xuICAgIG9yZGVyOiA3LFxuICAgIGlzSW5Ub3BSb3c6IGZhbHNlLFxuICAgIGlzSW5Cb3R0b21Sb3c6IGZhbHNlLFxuICAgIGlzSW5MZWZ0Q29sdW1uOiBmYWxzZSxcbiAgICBpc0luUmlnaHRDb2x1bW46IHRydWUsXG4gICAgcG9zaXRpb25BbG9uZ1ZhcmlhYmxlRGltZW5zaW9uOlxuICAgICAgTWFyZ2luQm94UG9zaXRpb25BbG9uZ1ZhcmlhYmxlRGltZW5zaW9uLkNFTlRFUixcbiAgfSxcbiAgXCJyaWdodC1ib3R0b21cIjoge1xuICAgIG9yZGVyOiA4LFxuICAgIGlzSW5Ub3BSb3c6IGZhbHNlLFxuICAgIGlzSW5Cb3R0b21Sb3c6IGZhbHNlLFxuICAgIGlzSW5MZWZ0Q29sdW1uOiBmYWxzZSxcbiAgICBpc0luUmlnaHRDb2x1bW46IHRydWUsXG4gICAgcG9zaXRpb25BbG9uZ1ZhcmlhYmxlRGltZW5zaW9uOiBNYXJnaW5Cb3hQb3NpdGlvbkFsb25nVmFyaWFibGVEaW1lbnNpb24uRU5ELFxuICB9LFxuICBcImJvdHRvbS1yaWdodC1jb3JuZXJcIjoge1xuICAgIG9yZGVyOiA5LFxuICAgIGlzSW5Ub3BSb3c6IGZhbHNlLFxuICAgIGlzSW5Cb3R0b21Sb3c6IHRydWUsXG4gICAgaXNJbkxlZnRDb2x1bW46IGZhbHNlLFxuICAgIGlzSW5SaWdodENvbHVtbjogdHJ1ZSxcbiAgICBwb3NpdGlvbkFsb25nVmFyaWFibGVEaW1lbnNpb246IG51bGwsXG4gIH0sXG4gIFwiYm90dG9tLXJpZ2h0XCI6IHtcbiAgICBvcmRlcjogMTAsXG4gICAgaXNJblRvcFJvdzogZmFsc2UsXG4gICAgaXNJbkJvdHRvbVJvdzogdHJ1ZSxcbiAgICBpc0luTGVmdENvbHVtbjogZmFsc2UsXG4gICAgaXNJblJpZ2h0Q29sdW1uOiBmYWxzZSxcbiAgICBwb3NpdGlvbkFsb25nVmFyaWFibGVEaW1lbnNpb246IE1hcmdpbkJveFBvc2l0aW9uQWxvbmdWYXJpYWJsZURpbWVuc2lvbi5FTkQsXG4gIH0sXG4gIFwiYm90dG9tLWNlbnRlclwiOiB7XG4gICAgb3JkZXI6IDExLFxuICAgIGlzSW5Ub3BSb3c6IGZhbHNlLFxuICAgIGlzSW5Cb3R0b21Sb3c6IHRydWUsXG4gICAgaXNJbkxlZnRDb2x1bW46IGZhbHNlLFxuICAgIGlzSW5SaWdodENvbHVtbjogZmFsc2UsXG4gICAgcG9zaXRpb25BbG9uZ1ZhcmlhYmxlRGltZW5zaW9uOlxuICAgICAgTWFyZ2luQm94UG9zaXRpb25BbG9uZ1ZhcmlhYmxlRGltZW5zaW9uLkNFTlRFUixcbiAgfSxcbiAgXCJib3R0b20tbGVmdFwiOiB7XG4gICAgb3JkZXI6IDEyLFxuICAgIGlzSW5Ub3BSb3c6IGZhbHNlLFxuICAgIGlzSW5Cb3R0b21Sb3c6IHRydWUsXG4gICAgaXNJbkxlZnRDb2x1bW46IGZhbHNlLFxuICAgIGlzSW5SaWdodENvbHVtbjogZmFsc2UsXG4gICAgcG9zaXRpb25BbG9uZ1ZhcmlhYmxlRGltZW5zaW9uOlxuICAgICAgTWFyZ2luQm94UG9zaXRpb25BbG9uZ1ZhcmlhYmxlRGltZW5zaW9uLlNUQVJULFxuICB9LFxuICBcImJvdHRvbS1sZWZ0LWNvcm5lclwiOiB7XG4gICAgb3JkZXI6IDEzLFxuICAgIGlzSW5Ub3BSb3c6IGZhbHNlLFxuICAgIGlzSW5Cb3R0b21Sb3c6IHRydWUsXG4gICAgaXNJbkxlZnRDb2x1bW46IHRydWUsXG4gICAgaXNJblJpZ2h0Q29sdW1uOiBmYWxzZSxcbiAgICBwb3NpdGlvbkFsb25nVmFyaWFibGVEaW1lbnNpb246IG51bGwsXG4gIH0sXG4gIFwibGVmdC1ib3R0b21cIjoge1xuICAgIG9yZGVyOiAxNCxcbiAgICBpc0luVG9wUm93OiBmYWxzZSxcbiAgICBpc0luQm90dG9tUm93OiBmYWxzZSxcbiAgICBpc0luTGVmdENvbHVtbjogdHJ1ZSxcbiAgICBpc0luUmlnaHRDb2x1bW46IGZhbHNlLFxuICAgIHBvc2l0aW9uQWxvbmdWYXJpYWJsZURpbWVuc2lvbjogTWFyZ2luQm94UG9zaXRpb25BbG9uZ1ZhcmlhYmxlRGltZW5zaW9uLkVORCxcbiAgfSxcbiAgXCJsZWZ0LW1pZGRsZVwiOiB7XG4gICAgb3JkZXI6IDE1LFxuICAgIGlzSW5Ub3BSb3c6IGZhbHNlLFxuICAgIGlzSW5Cb3R0b21Sb3c6IGZhbHNlLFxuICAgIGlzSW5MZWZ0Q29sdW1uOiB0cnVlLFxuICAgIGlzSW5SaWdodENvbHVtbjogZmFsc2UsXG4gICAgcG9zaXRpb25BbG9uZ1ZhcmlhYmxlRGltZW5zaW9uOlxuICAgICAgTWFyZ2luQm94UG9zaXRpb25BbG9uZ1ZhcmlhYmxlRGltZW5zaW9uLkNFTlRFUixcbiAgfSxcbiAgXCJsZWZ0LXRvcFwiOiB7XG4gICAgb3JkZXI6IDE2LFxuICAgIGlzSW5Ub3BSb3c6IGZhbHNlLFxuICAgIGlzSW5Cb3R0b21Sb3c6IGZhbHNlLFxuICAgIGlzSW5MZWZ0Q29sdW1uOiB0cnVlLFxuICAgIGlzSW5SaWdodENvbHVtbjogZmFsc2UsXG4gICAgcG9zaXRpb25BbG9uZ1ZhcmlhYmxlRGltZW5zaW9uOlxuICAgICAgTWFyZ2luQm94UG9zaXRpb25BbG9uZ1ZhcmlhYmxlRGltZW5zaW9uLlNUQVJULFxuICB9LFxufTtcblxuLyoqXG4gKiBOYW1lcyBmb3IgcGFnZS1tYXJnaW4gYm94ZXMgb3JkZXIgaW4gdGhlIGRlZmF1bHQgcGFpbnRpbmcgb3JkZXIuXG4gKi9cbmV4cG9ydCBjb25zdCBwYWdlTWFyZ2luQm94TmFtZXM6IHN0cmluZ1tdID0gKCgpID0+IHtcbiAgY29uc3QgYm94ZXMgPSBwYWdlTWFyZ2luQm94ZXM7XG4gIHJldHVybiBPYmplY3Qua2V5cyhib3hlcykuc29ydCgoYSwgYikgPT4gYm94ZXNbYV0ub3JkZXIgLSBib3hlc1tiXS5vcmRlcik7XG59KSgpO1xuXG4vKipcbiAqIEluZGljYXRlcyB0aGF0IHRoZSBwYWdlIG1hc3RlciBpcyBnZW5lcmF0ZWQgZm9yIGBAcGFnZWAgcnVsZXMuXG4gKi9cbmV4cG9ydCBjb25zdCBwYWdlUnVsZU1hc3RlclBzZXVkb05hbWUgPSBcInZpdmxpb3N0eWxlLXBhZ2UtcnVsZS1tYXN0ZXJcIjtcblxuLyoqXG4gKiBLZXkgZm9yIHByb3BlcnRpZXMgaW4gbWFyZ2luIGNvbnRleHRzLlxuICogU3R5bGVzIGluIG1hcmdpbiBjb250ZXh0cyBhcmUgc3RvcmVkIGluIHBhZ2VTdHlsZVtcIl9tYXJnaW5Cb3hlc1wiXVsobWFyZ2luXG4gKiBib3gncyBuYW1lKV0uXG4gKi9cbmV4cG9ydCBjb25zdCBtYXJnaW5Cb3hlc0tleTogc3RyaW5nID0gXCJfbWFyZ2luQm94ZXNcIjtcblxuLyoqXG4gKiBSZXByZXNlbnQgYSBwYWdlIG1hc3RlciBnZW5lcmF0ZWQgZm9yIGBAcGFnZWAgcnVsZXNcbiAqIEBwYXJhbSBzdHlsZSBDYXNjYWRlZCBzdHlsZSBmb3IgYEBwYWdlYCBydWxlc1xuICovXG5leHBvcnQgY2xhc3MgUGFnZVJ1bGVNYXN0ZXIgZXh0ZW5kcyBQYWdlTWFzdGVyLlBhZ2VNYXN0ZXI8UGFnZVJ1bGVNYXN0ZXJJbnN0YW5jZT4ge1xuICBwcml2YXRlIGJvZHlQYXJ0aXRpb25LZXk6IHN0cmluZztcbiAgcHJpdmF0ZSBwYWdlTWFyZ2luQm94ZXMgPSB7fSBhcyB7XG4gICAgW2tleTogc3RyaW5nXTogUGFnZU1hcmdpbkJveFBhcnRpdGlvbjtcbiAgfTtcblxuICBjb25zdHJ1Y3RvcihcbiAgICBzY29wZTogRXhwcnMuTGV4aWNhbFNjb3BlLFxuICAgIHBhcmVudDogUGFnZU1hc3Rlci5Sb290UGFnZUJveCxcbiAgICBzdHlsZTogQ3NzQ2FzY2FkZS5FbGVtZW50U3R5bGUsXG4gICkge1xuICAgIHN1cGVyKHNjb3BlLCBudWxsLCBwYWdlUnVsZU1hc3RlclBzZXVkb05hbWUsIFtdLCBwYXJlbnQsIG51bGwsIDApO1xuICAgIGNvbnN0IHBhZ2VTaXplID0gcmVzb2x2ZVBhZ2VTaXplQW5kQmxlZWQoc3R5bGUgYXMgYW55KTtcbiAgICBjb25zdCBwYXJ0aXRpb24gPSBuZXcgUGFnZVJ1bGVQYXJ0aXRpb24odGhpcy5zY29wZSwgdGhpcywgc3R5bGUsIHBhZ2VTaXplKTtcbiAgICB0aGlzLmJvZHlQYXJ0aXRpb25LZXkgPSBwYXJ0aXRpb24ua2V5O1xuICAgIHRoaXMuY3JlYXRlUGFnZU1hcmdpbkJveGVzKHN0eWxlKTtcbiAgICB0aGlzLmFwcGx5U3BlY2lmaWVkKHN0eWxlLCBwYWdlU2l6ZSk7XG4gIH1cblxuICAvKipcbiAgICogQ3JlYXRlIHBhZ2UtbWFyZ2luIGJveGVzXG4gICAqL1xuICBjcmVhdGVQYWdlTWFyZ2luQm94ZXMoc3R5bGU6IENzc0Nhc2NhZGUuRWxlbWVudFN0eWxlKSB7XG4gICAgY29uc3QgbWFyZ2luQm94ZXNNYXAgPSBzdHlsZVttYXJnaW5Cb3hlc0tleV07XG4gICAgaWYgKG1hcmdpbkJveGVzTWFwKSB7XG4gICAgICBwYWdlTWFyZ2luQm94TmFtZXMuZm9yRWFjaCgobmFtZSkgPT4ge1xuICAgICAgICBpZiAobWFyZ2luQm94ZXNNYXBbbmFtZV0pIHtcbiAgICAgICAgICB0aGlzLnBhZ2VNYXJnaW5Cb3hlc1tuYW1lXSA9IG5ldyBQYWdlTWFyZ2luQm94UGFydGl0aW9uKFxuICAgICAgICAgICAgdGhpcy5zY29wZSxcbiAgICAgICAgICAgIHRoaXMsXG4gICAgICAgICAgICBuYW1lLFxuICAgICAgICAgICAgc3R5bGUsXG4gICAgICAgICAgKTtcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgfVxuICB9XG5cbiAgLyoqXG4gICAqIFRyYW5zZmVyIGNhc2NhZGVkIHN0eWxlIGZvciBgQHBhZ2VgIHJ1bGVzIHRvICdzcGVjaWZpZWQnIHN0eWxlIG9mIHRoaXNcbiAgICogUGFnZUJveFxuICAgKi9cbiAgcHJpdmF0ZSBhcHBseVNwZWNpZmllZChzdHlsZTogQ3NzQ2FzY2FkZS5FbGVtZW50U3R5bGUsIHBhZ2VTaXplOiBQYWdlU2l6ZSkge1xuICAgIHRoaXMuc3BlY2lmaWVkW1wicG9zaXRpb25cIl0gPSBuZXcgQ3NzQ2FzY2FkZS5DYXNjYWRlVmFsdWUoXG4gICAgICBDc3MuaWRlbnQucmVsYXRpdmUsXG4gICAgICAwLFxuICAgICk7XG4gICAgdGhpcy5zcGVjaWZpZWRbXCJ3aWR0aFwiXSA9IG5ldyBDc3NDYXNjYWRlLkNhc2NhZGVWYWx1ZShwYWdlU2l6ZS53aWR0aCwgMCk7XG4gICAgdGhpcy5zcGVjaWZpZWRbXCJoZWlnaHRcIl0gPSBuZXcgQ3NzQ2FzY2FkZS5DYXNjYWRlVmFsdWUocGFnZVNpemUuaGVpZ2h0LCAwKTtcbiAgICBmb3IgKGNvbnN0IG5hbWUgaW4gc3R5bGUpIHtcbiAgICAgIGlmICghcHJvcGVydGllc0FwcGxpZWRUb1BhcnRpdGlvbltuYW1lXSAmJiBuYW1lICE9PSBcImJhY2tncm91bmQtY2xpcFwiKSB7XG4gICAgICAgIHRoaXMuc3BlY2lmaWVkW25hbWVdID0gc3R5bGVbbmFtZV07XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgLyoqXG4gICAqIEBvdmVycmlkZVxuICAgKi9cbiAgY3JlYXRlSW5zdGFuY2UocGFyZW50SW5zdGFuY2UpOiBQYWdlUnVsZU1hc3Rlckluc3RhbmNlIHtcbiAgICByZXR1cm4gbmV3IFBhZ2VSdWxlTWFzdGVySW5zdGFuY2UocGFyZW50SW5zdGFuY2UsIHRoaXMpO1xuICB9XG59XG5cbi8qKlxuICogUmVwcmVzZW50IGEgcGFydGl0aW9uIHBsYWNlZCBpbiBhIFBhZ2VSdWxlTWFzdGVyXG4gKiBAcGFyYW0gc3R5bGUgQ2FzY2FkZWQgc3R5bGUgZm9yIGBAcGFnZWAgcnVsZXNcbiAqL1xuZXhwb3J0IGNsYXNzIFBhZ2VSdWxlUGFydGl0aW9uIGV4dGVuZHMgUGFnZU1hc3Rlci5QYXJ0aXRpb248UGFnZVJ1bGVQYXJ0aXRpb25JbnN0YW5jZT4ge1xuICBjb25zdHJ1Y3RvcihcbiAgICBzY29wZTogRXhwcnMuTGV4aWNhbFNjb3BlLFxuICAgIHBhcmVudDogUGFnZVJ1bGVNYXN0ZXIsXG4gICAgc3R5bGU6IENzc0Nhc2NhZGUuRWxlbWVudFN0eWxlLFxuICAgIHB1YmxpYyByZWFkb25seSBwYWdlU2l6ZTogUGFnZVNpemUsXG4gICkge1xuICAgIHN1cGVyKHNjb3BlLCBudWxsLCBudWxsLCBbXSwgcGFyZW50KTtcbiAgICB0aGlzLnNwZWNpZmllZFtcInotaW5kZXhcIl0gPSBuZXcgQ3NzQ2FzY2FkZS5DYXNjYWRlVmFsdWUobmV3IENzcy5JbnQoMCksIDApO1xuICAgIHRoaXMuYXBwbHlTcGVjaWZpZWQoc3R5bGUpO1xuICB9XG5cbiAgLyoqXG4gICAqIFRyYW5zZmVyIGNhc2NhZGVkIHN0eWxlIGZvciBgQHBhZ2VgIHJ1bGVzIHRvICdzcGVjaWZpZWQnIHN0eWxlIG9mIHRoaXNcbiAgICogUGFnZUJveFxuICAgKi9cbiAgcHJpdmF0ZSBhcHBseVNwZWNpZmllZChzdHlsZTogQ3NzQ2FzY2FkZS5FbGVtZW50U3R5bGUpIHtcbiAgICB0aGlzLnNwZWNpZmllZFtcImZsb3ctZnJvbVwiXSA9IG5ldyBDc3NDYXNjYWRlLkNhc2NhZGVWYWx1ZShcbiAgICAgIENzcy5nZXROYW1lKFwiYm9keVwiKSxcbiAgICAgIDAsXG4gICAgKTtcblxuICAgIC8vIFVzZSBhYnNvbHV0ZSBwb3NpdGlvbmluZyBzbyB0aGF0IHRoaXMgcGFydGl0aW9uJ3MgbWFyZ2lucyBkb24ndCBjb2xsYXBzZVxuICAgIC8vIHdpdGggaXRzIHBhcmVudCdzIG1hcmdpbnNcbiAgICB0aGlzLnNwZWNpZmllZFtcInBvc2l0aW9uXCJdID0gbmV3IENzc0Nhc2NhZGUuQ2FzY2FkZVZhbHVlKFxuICAgICAgQ3NzLmlkZW50LmFic29sdXRlLFxuICAgICAgMCxcbiAgICApO1xuICAgIHRoaXMuc3BlY2lmaWVkW1wib3ZlcmZsb3dcIl0gPSBuZXcgQ3NzQ2FzY2FkZS5DYXNjYWRlVmFsdWUoXG4gICAgICBDc3MuaWRlbnQudmlzaWJsZSxcbiAgICAgIDAsXG4gICAgKTtcbiAgICBmb3IgKGNvbnN0IHByb3AgaW4gcHJvcGVydGllc0FwcGxpZWRUb1BhcnRpdGlvbikge1xuICAgICAgaWYgKHByb3BlcnRpZXNBcHBsaWVkVG9QYXJ0aXRpb24uaGFzT3duUHJvcGVydHkocHJvcCkpIHtcbiAgICAgICAgdGhpcy5zcGVjaWZpZWRbcHJvcF0gPSBzdHlsZVtwcm9wXTtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICAvKipcbiAgICogQG92ZXJyaWRlXG4gICAqL1xuICBjcmVhdGVJbnN0YW5jZShwYXJlbnRJbnN0YW5jZSk6IFBhZ2VNYXN0ZXIuUGFnZUJveEluc3RhbmNlIHtcbiAgICByZXR1cm4gbmV3IFBhZ2VSdWxlUGFydGl0aW9uSW5zdGFuY2UocGFyZW50SW5zdGFuY2UsIHRoaXMpO1xuICB9XG59XG5cbi8qKlxuICogUmVwcmVzZW50IGEgcGFydGl0aW9uIGZvciBhIHBhZ2UtbWFyZ2luIGJveFxuICovXG5leHBvcnQgY2xhc3MgUGFnZU1hcmdpbkJveFBhcnRpdGlvbiBleHRlbmRzIFBhZ2VNYXN0ZXIuUGFydGl0aW9uPFBhZ2VNYXJnaW5Cb3hQYXJ0aXRpb25JbnN0YW5jZT4ge1xuICBjb25zdHJ1Y3RvcihcbiAgICBzY29wZTogRXhwcnMuTGV4aWNhbFNjb3BlLFxuICAgIHBhcmVudDogUGFnZVJ1bGVNYXN0ZXIsXG4gICAgcHVibGljIHJlYWRvbmx5IG1hcmdpbkJveE5hbWU6IHN0cmluZyxcbiAgICBzdHlsZTogQ3NzQ2FzY2FkZS5FbGVtZW50U3R5bGUsXG4gICkge1xuICAgIHN1cGVyKHNjb3BlLCBudWxsLCBudWxsLCBbXSwgcGFyZW50KTtcbiAgICB0aGlzLmFwcGx5U3BlY2lmaWVkKHN0eWxlKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBUcmFuc2ZlciBjYXNjYWRlZCBzdHlsZSBmb3IgYEBwYWdlYCBydWxlcyB0byAnc3BlY2lmaWVkJyBzdHlsZSBvZiB0aGlzXG4gICAqIFBhZ2VNYXJnaW5Cb3hcbiAgICovXG4gIGFwcGx5U3BlY2lmaWVkKHN0eWxlOiBDc3NDYXNjYWRlLkVsZW1lbnRTdHlsZSkge1xuICAgIGNvbnN0IG93blN0eWxlID0gc3R5bGVbbWFyZ2luQm94ZXNLZXldW1xuICAgICAgdGhpcy5tYXJnaW5Cb3hOYW1lXG4gICAgXSBhcyBDc3NDYXNjYWRlLkVsZW1lbnRTdHlsZTtcblxuICAgIC8vIEluaGVyaXQgcHJvcGVydGllcyBpbiB0aGUgcGFnZSBjb250ZXh0IHRvIHRoZSBwYWdlLW1hcmdpbiBjb250ZXh0XG4gICAgZm9yIChjb25zdCBwcm9wIGluIHN0eWxlKSB7XG4gICAgICBjb25zdCB2YWwgPSBzdHlsZVtwcm9wXSBhcyBDc3NDYXNjYWRlLkNhc2NhZGVWYWx1ZTtcbiAgICAgIGNvbnN0IG93blZhbCA9IG93blN0eWxlW3Byb3BdIGFzIENzc0Nhc2NhZGUuQ2FzY2FkZVZhbHVlO1xuICAgICAgaWYgKFxuICAgICAgICBDc3NDYXNjYWRlLmluaGVyaXRlZFByb3BzW3Byb3BdIHx8XG4gICAgICAgIChvd25WYWwgJiYgb3duVmFsLnZhbHVlID09PSBDc3MuaWRlbnQuaW5oZXJpdClcbiAgICAgICkge1xuICAgICAgICB0aGlzLnNwZWNpZmllZFtwcm9wXSA9IHZhbDtcbiAgICAgIH1cbiAgICB9XG4gICAgZm9yIChjb25zdCBwcm9wIGluIG93blN0eWxlKSB7XG4gICAgICBpZiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKG93blN0eWxlLCBwcm9wKSkge1xuICAgICAgICBjb25zdCB2YWwgPSBvd25TdHlsZVtwcm9wXSBhcyBDc3NDYXNjYWRlLkNhc2NhZGVWYWx1ZTtcbiAgICAgICAgaWYgKHZhbCAmJiB2YWwudmFsdWUgIT09IENzcy5pZGVudC5pbmhlcml0KSB7XG4gICAgICAgICAgdGhpcy5zcGVjaWZpZWRbcHJvcF0gPSB2YWw7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICAvKipcbiAgICogQG92ZXJyaWRlXG4gICAqL1xuICBjcmVhdGVJbnN0YW5jZShwYXJlbnRJbnN0YW5jZSk6IFBhZ2VNYXN0ZXIuUGFnZUJveEluc3RhbmNlIHtcbiAgICByZXR1cm4gbmV3IFBhZ2VNYXJnaW5Cb3hQYXJ0aXRpb25JbnN0YW5jZShwYXJlbnRJbnN0YW5jZSwgdGhpcyk7XG4gIH1cbn1cblxuLy8tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tIEluc3RhbmNlIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG5leHBvcnQgdHlwZSBQYWdlQXJlYURpbWVuc2lvbiA9IHtcbiAgYm9yZGVyQm94V2lkdGg6IEV4cHJzLlZhbDtcbiAgYm9yZGVyQm94SGVpZ2h0OiBFeHBycy5WYWw7XG4gIG1hcmdpblRvcDogRXhwcnMuVmFsO1xuICBtYXJnaW5Cb3R0b206IEV4cHJzLlZhbDtcbiAgbWFyZ2luTGVmdDogRXhwcnMuVmFsO1xuICBtYXJnaW5SaWdodDogRXhwcnMuVmFsO1xufTtcblxuZXhwb3J0IGNsYXNzIFBhZ2VSdWxlTWFzdGVySW5zdGFuY2UgZXh0ZW5kcyBQYWdlTWFzdGVyLlBhZ2VNYXN0ZXJJbnN0YW5jZTxQYWdlUnVsZU1hc3Rlcj4ge1xuICBwYWdlQXJlYURpbWVuc2lvbjogUGFnZUFyZWFEaW1lbnNpb24gfCBudWxsID0gbnVsbDtcbiAgcGFnZU1hcmdpbkJveEluc3RhbmNlczoge1xuICAgIFtrZXk6IHN0cmluZ106IFBhZ2VNYXJnaW5Cb3hQYXJ0aXRpb25JbnN0YW5jZTtcbiAgfSA9IHt9O1xuXG4gIGNvbnN0cnVjdG9yKFxuICAgIHBhcmVudEluc3RhbmNlOiBQYWdlTWFzdGVyLlBhZ2VCb3hJbnN0YW5jZSxcbiAgICBwYWdlUnVsZU1hc3RlcjogUGFnZVJ1bGVNYXN0ZXIsXG4gICkge1xuICAgIHN1cGVyKHBhcmVudEluc3RhbmNlLCBwYWdlUnVsZU1hc3Rlcik7XG4gIH1cblxuICAvKipcbiAgICogQG92ZXJyaWRlXG4gICAqL1xuICBhcHBseUNhc2NhZGVBbmRJbml0KFxuICAgIGNhc2NhZGU6IENzc0Nhc2NhZGUuQ2FzY2FkZUluc3RhbmNlLFxuICAgIGRvY0VsZW1lbnRTdHlsZTogQ3NzQ2FzY2FkZS5FbGVtZW50U3R5bGUsXG4gICk6IHZvaWQge1xuICAgIGNvbnN0IHN0eWxlID0gdGhpcy5jYXNjYWRlZDtcbiAgICBmb3IgKGNvbnN0IG5hbWUgaW4gZG9jRWxlbWVudFN0eWxlKSB7XG4gICAgICBpZiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKGRvY0VsZW1lbnRTdHlsZSwgbmFtZSkpIHtcbiAgICAgICAgc3dpdGNoIChuYW1lKSB7XG4gICAgICAgICAgY2FzZSBcIndyaXRpbmctbW9kZVwiOlxuICAgICAgICAgIGNhc2UgXCJkaXJlY3Rpb25cIjpcbiAgICAgICAgICAgIHN0eWxlW25hbWVdID0gZG9jRWxlbWVudFN0eWxlW25hbWVdO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICAgIHN1cGVyLmFwcGx5Q2FzY2FkZUFuZEluaXQoY2FzY2FkZSwgZG9jRWxlbWVudFN0eWxlKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBAb3ZlcnJpZGVcbiAgICovXG4gIGluaXRIb3Jpem9udGFsKCk6IHZvaWQge1xuICAgIGNvbnN0IHN0eWxlID0gdGhpcy5zdHlsZTtcbiAgICBzdHlsZVtcImxlZnRcIl0gPSBDc3MubnVtZXJpY1plcm87XG4gICAgc3R5bGVbXCJtYXJnaW4tbGVmdFwiXSA9IENzcy5udW1lcmljWmVybztcbiAgICBzdHlsZVtcImJvcmRlci1sZWZ0LXdpZHRoXCJdID0gQ3NzLm51bWVyaWNaZXJvO1xuICAgIHN0eWxlW1wicGFkZGluZy1sZWZ0XCJdID0gQ3NzLm51bWVyaWNaZXJvO1xuICAgIHN0eWxlW1wicGFkZGluZy1yaWdodFwiXSA9IENzcy5udW1lcmljWmVybztcbiAgICBzdHlsZVtcImJvcmRlci1yaWdodC13aWR0aFwiXSA9IENzcy5udW1lcmljWmVybztcbiAgICBzdHlsZVtcIm1hcmdpbi1yaWdodFwiXSA9IENzcy5udW1lcmljWmVybztcbiAgICBzdHlsZVtcInJpZ2h0XCJdID0gQ3NzLm51bWVyaWNaZXJvO1xuICB9XG5cbiAgLyoqXG4gICAqIEBvdmVycmlkZVxuICAgKi9cbiAgaW5pdFZlcnRpY2FsKCk6IHZvaWQge1xuICAgIGNvbnN0IHN0eWxlID0gdGhpcy5zdHlsZTtcblxuICAgIC8vIFNoaWZ0IDFweCB0byB3b3JrYXJvdW5kIENocm9tZSBwcmludGluZyBidWdcbiAgICAvLyBzdHlsZVtcInRvcFwiXSA9IG5ldyBDc3MuTnVtZXJpYygtMSwgXCJweFwiKTtcbiAgICBzdHlsZVtcInRvcFwiXSA9IENzcy5udW1lcmljWmVybztcbiAgICBzdHlsZVtcIm1hcmdpbi10b3BcIl0gPSBDc3MubnVtZXJpY1plcm87XG4gICAgc3R5bGVbXCJib3JkZXItdG9wLXdpZHRoXCJdID0gQ3NzLm51bWVyaWNaZXJvO1xuICAgIHN0eWxlW1wicGFkZGluZy10b3BcIl0gPSBDc3MubnVtZXJpY1plcm87XG4gICAgc3R5bGVbXCJwYWRkaW5nLWJvdHRvbVwiXSA9IENzcy5udW1lcmljWmVybztcbiAgICBzdHlsZVtcImJvcmRlci1ib3R0b20td2lkdGhcIl0gPSBDc3MubnVtZXJpY1plcm87XG4gICAgc3R5bGVbXCJtYXJnaW4tYm90dG9tXCJdID0gQ3NzLm51bWVyaWNaZXJvO1xuICAgIHN0eWxlW1wiYm90dG9tXCJdID0gQ3NzLm51bWVyaWNaZXJvO1xuICB9XG5cbiAgc2V0UGFnZUFyZWFEaW1lbnNpb24oZGltOiBQYWdlQXJlYURpbWVuc2lvbikge1xuICAgIHRoaXMucGFnZUFyZWFEaW1lbnNpb24gPSBkaW07XG4gICAgY29uc3Qgc3R5bGUgPSB0aGlzLnN0eWxlO1xuICAgIHN0eWxlW1wid2lkdGhcIl0gPSBuZXcgQ3NzLkV4cHIoZGltLmJvcmRlckJveFdpZHRoKTtcbiAgICBzdHlsZVtcImhlaWdodFwiXSA9IG5ldyBDc3MuRXhwcihkaW0uYm9yZGVyQm94SGVpZ2h0KTtcbiAgICBzdHlsZVtcInBhZGRpbmctbGVmdFwiXSA9IG5ldyBDc3MuRXhwcihkaW0ubWFyZ2luTGVmdCk7XG4gICAgc3R5bGVbXCJwYWRkaW5nLXJpZ2h0XCJdID0gbmV3IENzcy5FeHByKGRpbS5tYXJnaW5SaWdodCk7XG4gICAgc3R5bGVbXCJwYWRkaW5nLXRvcFwiXSA9IG5ldyBDc3MuRXhwcihkaW0ubWFyZ2luVG9wKTtcbiAgICBzdHlsZVtcInBhZGRpbmctYm90dG9tXCJdID0gbmV3IENzcy5FeHByKGRpbS5tYXJnaW5Cb3R0b20pO1xuICB9XG5cbiAgLyoqXG4gICAqIEBvdmVycmlkZVxuICAgKi9cbiAgYWRqdXN0UGFnZUxheW91dChcbiAgICBjb250ZXh0OiBFeHBycy5Db250ZXh0LFxuICAgIHBhZ2U6IFZ0cmVlLlBhZ2UsXG4gICAgY2xpZW50TGF5b3V0OiBWdHJlZS5DbGllbnRMYXlvdXQsXG4gICkge1xuICAgIGNvbnN0IG1hcmdpbkJveENvbnRhaW5lcnMgPSBwYWdlLm1hcmdpbkJveGVzO1xuICAgIGNvbnN0IGhvcml6b250YWxEaW1lbnNpb25zID0ge1xuICAgICAgc3RhcnQ6IHRoaXMucGFnZUFyZWFEaW1lbnNpb24ubWFyZ2luTGVmdCxcbiAgICAgIGVuZDogdGhpcy5wYWdlQXJlYURpbWVuc2lvbi5tYXJnaW5SaWdodCxcbiAgICAgIGV4dGVudDogdGhpcy5wYWdlQXJlYURpbWVuc2lvbi5ib3JkZXJCb3hXaWR0aCxcbiAgICB9O1xuICAgIGNvbnN0IHZlcnRpY2FsRGltZW5zaW9ucyA9IHtcbiAgICAgIHN0YXJ0OiB0aGlzLnBhZ2VBcmVhRGltZW5zaW9uLm1hcmdpblRvcCxcbiAgICAgIGVuZDogdGhpcy5wYWdlQXJlYURpbWVuc2lvbi5tYXJnaW5Cb3R0b20sXG4gICAgICBleHRlbnQ6IHRoaXMucGFnZUFyZWFEaW1lbnNpb24uYm9yZGVyQm94SGVpZ2h0LFxuICAgIH07XG4gICAgdGhpcy5zaXplTWFyZ2luQm94ZXNBbG9uZ1ZhcmlhYmxlRGltZW5zaW9uKFxuICAgICAgbWFyZ2luQm94Q29udGFpbmVycy50b3AsXG4gICAgICB0cnVlLFxuICAgICAgaG9yaXpvbnRhbERpbWVuc2lvbnMsXG4gICAgICBjb250ZXh0LFxuICAgICAgY2xpZW50TGF5b3V0LFxuICAgICk7XG4gICAgdGhpcy5zaXplTWFyZ2luQm94ZXNBbG9uZ1ZhcmlhYmxlRGltZW5zaW9uKFxuICAgICAgbWFyZ2luQm94Q29udGFpbmVycy5ib3R0b20sXG4gICAgICB0cnVlLFxuICAgICAgaG9yaXpvbnRhbERpbWVuc2lvbnMsXG4gICAgICBjb250ZXh0LFxuICAgICAgY2xpZW50TGF5b3V0LFxuICAgICk7XG4gICAgdGhpcy5zaXplTWFyZ2luQm94ZXNBbG9uZ1ZhcmlhYmxlRGltZW5zaW9uKFxuICAgICAgbWFyZ2luQm94Q29udGFpbmVycy5sZWZ0LFxuICAgICAgZmFsc2UsXG4gICAgICB2ZXJ0aWNhbERpbWVuc2lvbnMsXG4gICAgICBjb250ZXh0LFxuICAgICAgY2xpZW50TGF5b3V0LFxuICAgICk7XG4gICAgdGhpcy5zaXplTWFyZ2luQm94ZXNBbG9uZ1ZhcmlhYmxlRGltZW5zaW9uKFxuICAgICAgbWFyZ2luQm94Q29udGFpbmVycy5yaWdodCxcbiAgICAgIGZhbHNlLFxuICAgICAgdmVydGljYWxEaW1lbnNpb25zLFxuICAgICAgY29udGV4dCxcbiAgICAgIGNsaWVudExheW91dCxcbiAgICApO1xuICB9XG5cbiAgLyoqXG4gICAqIERldGVybWluZSBhbmQgc2V0IG1hcmdpbiBib3hlcycgc2l6ZXMgYWxvbmcgdmFyaWFibGUgZGltZW5zaW9uIHVzaW5nIGFuXG4gICAqIGFsZ29yaXRobSBzcGVjaWZpZWQgaW4gQ1NTIFBhZ2VkIE1lZGlhIHNwZWMuXG4gICAqIEBwYXJhbSBtYXJnaW5Cb3hDb250YWluZXJzIENvbnRhaW5lcnMgY29ycmVzcG9uZGluZyB0byB0aGUgdGFyZ2V0IG1hcmdpblxuICAgKiAgICAgYm94ZXMgaW4gb25lIHBhZ2UgZWRnZSAodG9wLCBib3R0b20sIGxlZnQsIHJpZ2h0KVxuICAgKiBAcGFyYW0gaXNIb3Jpem9udGFsIEluZGljYXRlcyBpZiB0aGUgdGFyZ2V0IG1hcmdpbiBib3hlcyBhcmUgb24gdGhlXG4gICAqICAgICBob3Jpem9udGFsIGVkZ2UgKHRvcCBvciBib3R0b20pIG9yIG5vdCAobGVmdCBvciByaWdodCkuXG4gICAqIEBwYXJhbSBkaW1lbnNpb25zIFBhZ2UgZGltZW5zaW9ucy4gc3RhcnQ6IG1hcmdpbi1sZWZ0IG9yIG1hcmdpbi10b3AuIGVuZDpcbiAgICogICAgIG1hcmdpbi1yaWdodCBvciBtYXJnaW4tYm90dG9tLiBleHRlbnQ6IGJvcmRlci1ib3ggd2lkdGggb3IgaGVpZ2h0IG9mXG4gICAqICAgICB0aGUgcGFnZSBhcmVhICg9IGF2YWlsYWJsZSB3aWR0aCBvciBoZWlnaHQgZm9yIHRoZSB0YXJnZXQgbWFyZ2luIGJveGVzKVxuICAgKi9cbiAgcHJpdmF0ZSBzaXplTWFyZ2luQm94ZXNBbG9uZ1ZhcmlhYmxlRGltZW5zaW9uKFxuICAgIG1hcmdpbkJveENvbnRhaW5lcnM6IHsgW2tleTogc3RyaW5nXTogVnRyZWUuQ29udGFpbmVyIH0sXG4gICAgaXNIb3Jpem9udGFsOiBib29sZWFuLFxuICAgIGRpbWVuc2lvbnM6IHsgc3RhcnQ6IEV4cHJzLlZhbDsgZW5kOiBFeHBycy5WYWw7IGV4dGVudDogRXhwcnMuVmFsIH0sXG4gICAgY29udGV4dDogRXhwcnMuQ29udGV4dCxcbiAgICBjbGllbnRMYXlvdXQ6IFZ0cmVlLkNsaWVudExheW91dCxcbiAgKSB7XG4gICAgY29uc3QgU1RBUlQgPSBNYXJnaW5Cb3hQb3NpdGlvbkFsb25nVmFyaWFibGVEaW1lbnNpb24uU1RBUlQ7XG4gICAgY29uc3QgQ0VOVEVSID0gTWFyZ2luQm94UG9zaXRpb25BbG9uZ1ZhcmlhYmxlRGltZW5zaW9uLkNFTlRFUjtcbiAgICBjb25zdCBFTkQgPSBNYXJnaW5Cb3hQb3NpdGlvbkFsb25nVmFyaWFibGVEaW1lbnNpb24uRU5EO1xuXG4gICAgLy8gcHJlcGFyZSBwYXJhbWV0ZXJzXG4gICAgY29uc3Qgc2NvcGUgPSB0aGlzLnBhZ2VCb3guc2NvcGU7XG4gICAgY29uc3QgY29udGFpbmVyczoge1xuICAgICAgW2tleSBpbiBNYXJnaW5Cb3hQb3NpdGlvbkFsb25nVmFyaWFibGVEaW1lbnNpb25dPzogVnRyZWUuQ29udGFpbmVyO1xuICAgIH0gPSB7fTtcbiAgICBjb25zdCBib3hJbnN0YW5jZXM6IHtcbiAgICAgIFtrZXkgaW4gTWFyZ2luQm94UG9zaXRpb25BbG9uZ1ZhcmlhYmxlRGltZW5zaW9uXT86IFBhZ2VNYXJnaW5Cb3hQYXJ0aXRpb25JbnN0YW5jZTtcbiAgICB9ID0ge307XG4gICAgY29uc3QgYm94UGFyYW1zOiB7XG4gICAgICBba2V5IGluIE1hcmdpbkJveFBvc2l0aW9uQWxvbmdWYXJpYWJsZURpbWVuc2lvbl0/OiBNYXJnaW5Cb3hTaXppbmdQYXJhbTtcbiAgICB9ID0ge307XG4gICAgZm9yIChjb25zdCBuYW1lIGluIG1hcmdpbkJveENvbnRhaW5lcnMpIHtcbiAgICAgIGNvbnN0IGJveEluZm8gPSBwYWdlTWFyZ2luQm94ZXNbbmFtZV07XG4gICAgICBpZiAoYm94SW5mbykge1xuICAgICAgICBjb25zdCBjb250YWluZXIgPSBtYXJnaW5Cb3hDb250YWluZXJzW25hbWVdO1xuICAgICAgICBjb25zdCBib3hJbnN0YW5jZSA9IHRoaXMucGFnZU1hcmdpbkJveEluc3RhbmNlc1tuYW1lXTtcbiAgICAgICAgY29uc3QgYm94UGFyYW0gPSBuZXcgU2luZ2xlQm94TWFyZ2luQm94U2l6aW5nUGFyYW0oXG4gICAgICAgICAgY29udGFpbmVyLFxuICAgICAgICAgIChib3hJbnN0YW5jZSBhcyBhbnkpLnN0eWxlLFxuICAgICAgICAgIGlzSG9yaXpvbnRhbCxcbiAgICAgICAgICBzY29wZSxcbiAgICAgICAgICBjbGllbnRMYXlvdXQsXG4gICAgICAgICk7XG4gICAgICAgIGNvbnRhaW5lcnNbYm94SW5mby5wb3NpdGlvbkFsb25nVmFyaWFibGVEaW1lbnNpb25dID0gY29udGFpbmVyO1xuICAgICAgICBib3hJbnN0YW5jZXNbYm94SW5mby5wb3NpdGlvbkFsb25nVmFyaWFibGVEaW1lbnNpb25dID0gYm94SW5zdGFuY2U7XG4gICAgICAgIGJveFBhcmFtc1tib3hJbmZvLnBvc2l0aW9uQWxvbmdWYXJpYWJsZURpbWVuc2lvbl0gPSBib3hQYXJhbTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICAvLyBkZXRlcm1pbmUgc2l6ZXNcbiAgICBjb25zdCBldmFsdWF0ZWREaW0gPSB7XG4gICAgICBzdGFydDogZGltZW5zaW9ucy5zdGFydC5ldmFsdWF0ZShjb250ZXh0KSBhcyBudW1iZXIsXG4gICAgICBlbmQ6IGRpbWVuc2lvbnMuZW5kLmV2YWx1YXRlKGNvbnRleHQpIGFzIG51bWJlcixcbiAgICAgIGV4dGVudDogZGltZW5zaW9ucy5leHRlbnQuZXZhbHVhdGUoY29udGV4dCkgYXMgbnVtYmVyLFxuICAgIH07XG4gICAgbGV0IHNpemVzID0gdGhpcy5nZXRTaXplc09mTWFyZ2luQm94ZXNBbG9uZ1ZhcmlhYmxlRGltZW5zaW9uKFxuICAgICAgYm94UGFyYW1zLFxuICAgICAgZXZhbHVhdGVkRGltLmV4dGVudCxcbiAgICApO1xuICAgIGxldCBuZWVkUmVjYWxjdWxhdGU6IGJvb2xlYW4gPSBmYWxzZTtcblxuICAgIC8vIENoZWNrIG1heC13aWR0aC9tYXgtaGVpZ2h0XG4gICAgY29uc3QgbWF4T3V0ZXJTaXplczoge1xuICAgICAgW2tleSBpbiBNYXJnaW5Cb3hQb3NpdGlvbkFsb25nVmFyaWFibGVEaW1lbnNpb25dPzogbnVtYmVyO1xuICAgIH0gPSB7fTtcbiAgICBPYmplY3Qua2V5cyhjb250YWluZXJzKS5mb3JFYWNoKChuKSA9PiB7XG4gICAgICBjb25zdCBuYW1lID0gbiBhcyBNYXJnaW5Cb3hQb3NpdGlvbkFsb25nVmFyaWFibGVEaW1lbnNpb247XG4gICAgICBjb25zdCBtYXhTaXplID0gUGFnZU1hc3Rlci50b0V4cHJBdXRvKFxuICAgICAgICBzY29wZSxcbiAgICAgICAgYm94SW5zdGFuY2VzW25hbWVdLnN0eWxlW2lzSG9yaXpvbnRhbCA/IFwibWF4LXdpZHRoXCIgOiBcIm1heC1oZWlnaHRcIl0sXG4gICAgICAgIGRpbWVuc2lvbnMuZXh0ZW50LFxuICAgICAgKTtcbiAgICAgIGlmIChtYXhTaXplKSB7XG4gICAgICAgIGNvbnN0IGV2YWx1YXRlZE1heFNpemUgPSBtYXhTaXplLmV2YWx1YXRlKGNvbnRleHQpIGFzIG51bWJlcjtcbiAgICAgICAgaWYgKHNpemVzW25hbWVdID4gZXZhbHVhdGVkTWF4U2l6ZSkge1xuICAgICAgICAgIGNvbnN0IHAgPSAoYm94UGFyYW1zW25hbWVdID0gbmV3IEZpeGVkU2l6ZU1hcmdpbkJveFNpemluZ1BhcmFtKFxuICAgICAgICAgICAgY29udGFpbmVyc1tuYW1lXSxcbiAgICAgICAgICAgIGJveEluc3RhbmNlc1tuYW1lXS5zdHlsZSxcbiAgICAgICAgICAgIGlzSG9yaXpvbnRhbCxcbiAgICAgICAgICAgIHNjb3BlLFxuICAgICAgICAgICAgY2xpZW50TGF5b3V0LFxuICAgICAgICAgICAgZXZhbHVhdGVkTWF4U2l6ZSxcbiAgICAgICAgICApKTtcbiAgICAgICAgICBtYXhPdXRlclNpemVzW25hbWVdID0gcC5nZXRPdXRlclNpemUoKTtcbiAgICAgICAgICBuZWVkUmVjYWxjdWxhdGUgPSB0cnVlO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfSk7XG4gICAgaWYgKG5lZWRSZWNhbGN1bGF0ZSkge1xuICAgICAgc2l6ZXMgPSB0aGlzLmdldFNpemVzT2ZNYXJnaW5Cb3hlc0Fsb25nVmFyaWFibGVEaW1lbnNpb24oXG4gICAgICAgIGJveFBhcmFtcyxcbiAgICAgICAgZXZhbHVhdGVkRGltLmV4dGVudCxcbiAgICAgICk7XG4gICAgICBuZWVkUmVjYWxjdWxhdGUgPSBmYWxzZTtcbiAgICAgIFtTVEFSVCwgQ0VOVEVSLCBFTkRdLmZvckVhY2goKG5hbWUpID0+IHtcbiAgICAgICAgc2l6ZXNbbmFtZV0gPSBtYXhPdXRlclNpemVzW25hbWVdIHx8IHNpemVzW25hbWVdO1xuICAgICAgfSk7XG4gICAgfVxuXG4gICAgLy8gQ2hlY2sgbWluLXdpZHRoL21pbi1oZWlnaHRcbiAgICBjb25zdCBtaW5PdXRlclNpemVzOiB7XG4gICAgICBba2V5IGluIE1hcmdpbkJveFBvc2l0aW9uQWxvbmdWYXJpYWJsZURpbWVuc2lvbl0/OiBudW1iZXI7XG4gICAgfSA9IHt9O1xuICAgIE9iamVjdC5rZXlzKGNvbnRhaW5lcnMpLmZvckVhY2goKG4pID0+IHtcbiAgICAgIGNvbnN0IG5hbWUgPSBuIGFzIE1hcmdpbkJveFBvc2l0aW9uQWxvbmdWYXJpYWJsZURpbWVuc2lvbjtcbiAgICAgIGNvbnN0IG1pblNpemUgPSBQYWdlTWFzdGVyLnRvRXhwckF1dG8oXG4gICAgICAgIHNjb3BlLFxuICAgICAgICBib3hJbnN0YW5jZXNbbmFtZV0uc3R5bGVbaXNIb3Jpem9udGFsID8gXCJtaW4td2lkdGhcIiA6IFwibWluLWhlaWdodFwiXSxcbiAgICAgICAgZGltZW5zaW9ucy5leHRlbnQsXG4gICAgICApO1xuICAgICAgaWYgKG1pblNpemUpIHtcbiAgICAgICAgY29uc3QgZXZhbHVhdGVkTWluU2l6ZSA9IG1pblNpemUuZXZhbHVhdGUoY29udGV4dCkgYXMgbnVtYmVyO1xuICAgICAgICBpZiAoc2l6ZXNbbmFtZV0gPCBldmFsdWF0ZWRNaW5TaXplKSB7XG4gICAgICAgICAgY29uc3QgcCA9IChib3hQYXJhbXNbbmFtZV0gPSBuZXcgRml4ZWRTaXplTWFyZ2luQm94U2l6aW5nUGFyYW0oXG4gICAgICAgICAgICBjb250YWluZXJzW25hbWVdLFxuICAgICAgICAgICAgYm94SW5zdGFuY2VzW25hbWVdLnN0eWxlLFxuICAgICAgICAgICAgaXNIb3Jpem9udGFsLFxuICAgICAgICAgICAgc2NvcGUsXG4gICAgICAgICAgICBjbGllbnRMYXlvdXQsXG4gICAgICAgICAgICBldmFsdWF0ZWRNaW5TaXplLFxuICAgICAgICAgICkpO1xuICAgICAgICAgIG1pbk91dGVyU2l6ZXNbbmFtZV0gPSBwLmdldE91dGVyU2l6ZSgpO1xuICAgICAgICAgIG5lZWRSZWNhbGN1bGF0ZSA9IHRydWU7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9KTtcbiAgICBpZiAobmVlZFJlY2FsY3VsYXRlKSB7XG4gICAgICBzaXplcyA9IHRoaXMuZ2V0U2l6ZXNPZk1hcmdpbkJveGVzQWxvbmdWYXJpYWJsZURpbWVuc2lvbihcbiAgICAgICAgYm94UGFyYW1zLFxuICAgICAgICBldmFsdWF0ZWREaW0uZXh0ZW50LFxuICAgICAgKTtcbiAgICAgIFtTVEFSVCwgQ0VOVEVSLCBFTkRdLmZvckVhY2goKG5hbWUpID0+IHtcbiAgICAgICAgc2l6ZXNbbmFtZV0gPSBtaW5PdXRlclNpemVzW25hbWVdIHx8IHNpemVzW25hbWVdO1xuICAgICAgfSk7XG4gICAgfVxuXG4gICAgLy8gc2V0IHNpemVzXG4gICAgY29uc3QgZW5kRWRnZSA9IGV2YWx1YXRlZERpbS5zdGFydCArIGV2YWx1YXRlZERpbS5leHRlbnQ7XG4gICAgY29uc3Qgc3RhcnRFbmRTdW0gPVxuICAgICAgZXZhbHVhdGVkRGltLnN0YXJ0ICsgKGV2YWx1YXRlZERpbS5zdGFydCArIGV2YWx1YXRlZERpbS5leHRlbnQpO1xuICAgIFtTVEFSVCwgQ0VOVEVSLCBFTkRdLmZvckVhY2goKG5hbWUpID0+IHtcbiAgICAgIGNvbnN0IG91dGVyU2l6ZSA9IHNpemVzW25hbWVdO1xuICAgICAgaWYgKG91dGVyU2l6ZSkge1xuICAgICAgICBjb25zdCBjb250YWluZXIgPSBjb250YWluZXJzW25hbWVdO1xuICAgICAgICBsZXQgb2Zmc2V0ID0gMDtcbiAgICAgICAgc3dpdGNoIChuYW1lKSB7XG4gICAgICAgICAgY2FzZSBTVEFSVDpcbiAgICAgICAgICAgIG9mZnNldCA9IGlzSG9yaXpvbnRhbCA/IGNvbnRhaW5lci5sZWZ0IDogY29udGFpbmVyLnRvcDtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgIGNhc2UgQ0VOVEVSOlxuICAgICAgICAgICAgb2Zmc2V0ID0gKHN0YXJ0RW5kU3VtIC0gb3V0ZXJTaXplKSAvIDI7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgICBjYXNlIEVORDpcbiAgICAgICAgICAgIG9mZnNldCA9IGVuZEVkZ2UgLSBvdXRlclNpemU7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuICAgICAgICBpZiAoaXNIb3Jpem9udGFsKSB7XG4gICAgICAgICAgY29udGFpbmVyLnNldEhvcml6b250YWxQb3NpdGlvbihcbiAgICAgICAgICAgIG9mZnNldCxcbiAgICAgICAgICAgIG91dGVyU2l6ZSAtIGNvbnRhaW5lci5nZXRJbnNldExlZnQoKSAtIGNvbnRhaW5lci5nZXRJbnNldFJpZ2h0KCksXG4gICAgICAgICAgKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBjb250YWluZXIuc2V0VmVydGljYWxQb3NpdGlvbihcbiAgICAgICAgICAgIG9mZnNldCxcbiAgICAgICAgICAgIG91dGVyU2l6ZSAtIGNvbnRhaW5lci5nZXRJbnNldFRvcCgpIC0gY29udGFpbmVyLmdldEluc2V0Qm90dG9tKCksXG4gICAgICAgICAgKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0pO1xuICB9XG5cbiAgcHJpdmF0ZSBnZXRTaXplc09mTWFyZ2luQm94ZXNBbG9uZ1ZhcmlhYmxlRGltZW5zaW9uKFxuICAgIGJveFBhcmFtczoge1xuICAgICAgW2tleSBpbiBNYXJnaW5Cb3hQb3NpdGlvbkFsb25nVmFyaWFibGVEaW1lbnNpb25dPzogTWFyZ2luQm94U2l6aW5nUGFyYW07XG4gICAgfSxcbiAgICBhdmFpbGFibGVTaXplOiBudW1iZXIsXG4gICk6IHsgW2tleSBpbiBNYXJnaW5Cb3hQb3NpdGlvbkFsb25nVmFyaWFibGVEaW1lbnNpb25dPzogbnVtYmVyIH0ge1xuICAgIGNvbnN0IHN0YXJ0Qm94UGFyYW0gPVxuICAgICAgYm94UGFyYW1zW01hcmdpbkJveFBvc2l0aW9uQWxvbmdWYXJpYWJsZURpbWVuc2lvbi5TVEFSVF07XG4gICAgY29uc3QgY2VudGVyQm94UGFyYW0gPVxuICAgICAgYm94UGFyYW1zW01hcmdpbkJveFBvc2l0aW9uQWxvbmdWYXJpYWJsZURpbWVuc2lvbi5DRU5URVJdO1xuICAgIGNvbnN0IGVuZEJveFBhcmFtID0gYm94UGFyYW1zW01hcmdpbkJveFBvc2l0aW9uQWxvbmdWYXJpYWJsZURpbWVuc2lvbi5FTkRdO1xuICAgIGNvbnN0IHNpemVzOiB7XG4gICAgICBba2V5IGluIE1hcmdpbkJveFBvc2l0aW9uQWxvbmdWYXJpYWJsZURpbWVuc2lvbl0/OiBudW1iZXI7XG4gICAgfSA9IHt9O1xuICAgIGlmICghY2VudGVyQm94UGFyYW0pIHtcbiAgICAgIGNvbnN0IHN0YXJ0RW5kU2l6ZXMgPSB0aGlzLmRpc3RyaWJ1dGVBdXRvTWFyZ2luQm94U2l6ZXMoXG4gICAgICAgIHN0YXJ0Qm94UGFyYW0sXG4gICAgICAgIGVuZEJveFBhcmFtLFxuICAgICAgICBhdmFpbGFibGVTaXplLFxuICAgICAgKTtcbiAgICAgIGlmIChzdGFydEVuZFNpemVzLnhTaXplKSB7XG4gICAgICAgIHNpemVzW01hcmdpbkJveFBvc2l0aW9uQWxvbmdWYXJpYWJsZURpbWVuc2lvbi5TVEFSVF0gPVxuICAgICAgICAgIHN0YXJ0RW5kU2l6ZXMueFNpemU7XG4gICAgICB9XG4gICAgICBpZiAoc3RhcnRFbmRTaXplcy55U2l6ZSkge1xuICAgICAgICBzaXplc1tNYXJnaW5Cb3hQb3NpdGlvbkFsb25nVmFyaWFibGVEaW1lbnNpb24uRU5EXSA9XG4gICAgICAgICAgc3RhcnRFbmRTaXplcy55U2l6ZTtcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgY29uc3QgcGFyYW1zID0gW3N0YXJ0Qm94UGFyYW0sIGVuZEJveFBhcmFtXS5maWx0ZXIoKHApID0+IHApO1xuICAgICAgY29uc3Qgc3RhcnRFbmRCb3hQYXJhbSA9IHBhcmFtcy5sZW5ndGhcbiAgICAgICAgPyBuZXcgTXVsdGlwbGVCb3hlc01hcmdpbkJveFNpemluZ1BhcmFtKHBhcmFtcylcbiAgICAgICAgOiBudWxsO1xuICAgICAgY29uc3QgY2VudGVyU2l6ZXMgPSB0aGlzLmRpc3RyaWJ1dGVBdXRvTWFyZ2luQm94U2l6ZXMoXG4gICAgICAgIGNlbnRlckJveFBhcmFtLFxuICAgICAgICBzdGFydEVuZEJveFBhcmFtLFxuICAgICAgICBhdmFpbGFibGVTaXplLFxuICAgICAgKTtcbiAgICAgIGlmIChjZW50ZXJTaXplcy54U2l6ZSkge1xuICAgICAgICBzaXplc1tNYXJnaW5Cb3hQb3NpdGlvbkFsb25nVmFyaWFibGVEaW1lbnNpb24uQ0VOVEVSXSA9XG4gICAgICAgICAgY2VudGVyU2l6ZXMueFNpemU7XG4gICAgICB9XG4gICAgICBjb25zdCBjZW50ZXJTaXplID0gY2VudGVyU2l6ZXMueFNpemUgfHwgY2VudGVyQm94UGFyYW0uZ2V0T3V0ZXJTaXplKCk7XG4gICAgICBjb25zdCBzdGFydEVuZEF1dG9TaXplID0gKGF2YWlsYWJsZVNpemUgLSBjZW50ZXJTaXplKSAvIDI7XG4gICAgICBpZiAoc3RhcnRCb3hQYXJhbSAmJiBzdGFydEJveFBhcmFtLmhhc0F1dG9TaXplKCkpIHtcbiAgICAgICAgc2l6ZXNbTWFyZ2luQm94UG9zaXRpb25BbG9uZ1ZhcmlhYmxlRGltZW5zaW9uLlNUQVJUXSA9IHN0YXJ0RW5kQXV0b1NpemU7XG4gICAgICB9XG4gICAgICBpZiAoZW5kQm94UGFyYW0gJiYgZW5kQm94UGFyYW0uaGFzQXV0b1NpemUoKSkge1xuICAgICAgICBzaXplc1tNYXJnaW5Cb3hQb3NpdGlvbkFsb25nVmFyaWFibGVEaW1lbnNpb24uRU5EXSA9IHN0YXJ0RW5kQXV0b1NpemU7XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiBzaXplcztcbiAgfVxuXG4gIC8qKlxuICAgKiBEaXN0cmlidXRlIGF1dG8gbWFyZ2luIHNpemVzIGFtb25nIHR3byBtYXJnaW4gYm94ZXMgdXNpbmcgYW4gYWxnb3JpdGhtXG4gICAqIHNwZWNpZmllZCBpbiBDU1MgUGFnZWQgTWVkaWEgc3BlYy5cbiAgICogQHBhcmFtIHggUGFyYW1ldGVyIGZvciB0aGUgZmlyc3QgbWFyZ2luIGJveC4gbnVsbCBpZiB0aGUgYm94IGlzIG5vdFxuICAgKiAgICAgZ2VuZXJhdGVkLlxuICAgKiBAcGFyYW0geSBQYXJhbWV0ZXIgZm9yIHRoZSBzZWNvbmQgbWFyZ2luIGJveC4gbnVsbCBpZiB0aGUgYm94IGlzIG5vdFxuICAgKiAgICAgZ2VuZXJhdGVkLlxuICAgKiBAcGFyYW0gYXZhaWxhYmxlU2l6ZSBBdmFpbGFibGUgc2l6ZSBmb3IgdGhlIG1hcmdpbiBib3hlcy5cbiAgICogQHJldHVybnMgRGV0ZXJtaW5lZCBzaXplcyBmb3IgdGhlIHR3byBib3hlcy4gRWFjaCB2YWx1ZSBpcyBwcmVzZW50IG9ubHlcbiAgICogICAgIHdoZW4gdGhlIHNpemUgb2YgdGhlIGNvcnJlc3BvbmRpbmcgYm94IGlzICdhdXRvJy5cbiAgICovXG4gIHByaXZhdGUgZGlzdHJpYnV0ZUF1dG9NYXJnaW5Cb3hTaXplcyhcbiAgICB4OiBNYXJnaW5Cb3hTaXppbmdQYXJhbSxcbiAgICB5OiBNYXJnaW5Cb3hTaXppbmdQYXJhbSxcbiAgICBhdmFpbGFibGVTaXplOiBudW1iZXIsXG4gICk6IHsgeFNpemU6IG51bWJlciB8IG51bGw7IHlTaXplOiBudW1iZXIgfCBudWxsIH0ge1xuICAgIGNvbnN0IHJlc3VsdDogeyB4U2l6ZTogbnVtYmVyIHwgbnVsbDsgeVNpemU6IG51bWJlciB8IG51bGwgfSA9IHtcbiAgICAgIHhTaXplOiBudWxsLFxuICAgICAgeVNpemU6IG51bGwsXG4gICAgfTtcbiAgICBpZiAoeCAmJiB5KSB7XG4gICAgICBpZiAoeC5oYXNBdXRvU2l6ZSgpICYmIHkuaGFzQXV0b1NpemUoKSkge1xuICAgICAgICBjb25zdCB4T3V0ZXJNYXhDb250ZW50U2l6ZSA9IHguZ2V0T3V0ZXJNYXhDb250ZW50U2l6ZSgpO1xuICAgICAgICBjb25zdCB5T3V0ZXJNYXhDb250ZW50U2l6ZSA9IHkuZ2V0T3V0ZXJNYXhDb250ZW50U2l6ZSgpO1xuICAgICAgICBpZiAoeE91dGVyTWF4Q29udGVudFNpemUgPiAwICYmIHlPdXRlck1heENvbnRlbnRTaXplID4gMCkge1xuICAgICAgICAgIGNvbnN0IG1heENvbnRlbnRTaXplU3VtID0geE91dGVyTWF4Q29udGVudFNpemUgKyB5T3V0ZXJNYXhDb250ZW50U2l6ZTtcbiAgICAgICAgICBpZiAobWF4Q29udGVudFNpemVTdW0gPCBhdmFpbGFibGVTaXplKSB7XG4gICAgICAgICAgICByZXN1bHQueFNpemUgPVxuICAgICAgICAgICAgICAoYXZhaWxhYmxlU2l6ZSAqIHhPdXRlck1heENvbnRlbnRTaXplKSAvIG1heENvbnRlbnRTaXplU3VtO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBjb25zdCB4T3V0ZXJNaW5Db250ZW50U2l6ZSA9IHguZ2V0T3V0ZXJNaW5Db250ZW50U2l6ZSgpO1xuICAgICAgICAgICAgY29uc3QgeU91dGVyTWluQ29udGVudFNpemUgPSB5LmdldE91dGVyTWluQ29udGVudFNpemUoKTtcbiAgICAgICAgICAgIGNvbnN0IG1pbkNvbnRlbnRTaXplU3VtID1cbiAgICAgICAgICAgICAgeE91dGVyTWluQ29udGVudFNpemUgKyB5T3V0ZXJNaW5Db250ZW50U2l6ZTtcbiAgICAgICAgICAgIGlmIChtaW5Db250ZW50U2l6ZVN1bSA8IGF2YWlsYWJsZVNpemUpIHtcbiAgICAgICAgICAgICAgcmVzdWx0LnhTaXplID1cbiAgICAgICAgICAgICAgICB4T3V0ZXJNaW5Db250ZW50U2l6ZSArXG4gICAgICAgICAgICAgICAgKChhdmFpbGFibGVTaXplIC0gbWluQ29udGVudFNpemVTdW0pICpcbiAgICAgICAgICAgICAgICAgICh4T3V0ZXJNYXhDb250ZW50U2l6ZSAtIHhPdXRlck1pbkNvbnRlbnRTaXplKSkgL1xuICAgICAgICAgICAgICAgICAgKG1heENvbnRlbnRTaXplU3VtIC0gbWluQ29udGVudFNpemVTdW0pO1xuICAgICAgICAgICAgfSBlbHNlIGlmIChtaW5Db250ZW50U2l6ZVN1bSA+IDApIHtcbiAgICAgICAgICAgICAgcmVzdWx0LnhTaXplID1cbiAgICAgICAgICAgICAgICAoYXZhaWxhYmxlU2l6ZSAqIHhPdXRlck1pbkNvbnRlbnRTaXplKSAvIG1pbkNvbnRlbnRTaXplU3VtO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgICBpZiAocmVzdWx0LnhTaXplID4gMCkge1xuICAgICAgICAgICAgcmVzdWx0LnlTaXplID0gYXZhaWxhYmxlU2l6ZSAtIHJlc3VsdC54U2l6ZTtcbiAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSBpZiAoeE91dGVyTWF4Q29udGVudFNpemUgPiAwKSB7XG4gICAgICAgICAgcmVzdWx0LnhTaXplID0gYXZhaWxhYmxlU2l6ZTtcbiAgICAgICAgfSBlbHNlIGlmICh5T3V0ZXJNYXhDb250ZW50U2l6ZSA+IDApIHtcbiAgICAgICAgICByZXN1bHQueVNpemUgPSBhdmFpbGFibGVTaXplO1xuICAgICAgICB9XG4gICAgICB9IGVsc2UgaWYgKHguaGFzQXV0b1NpemUoKSkge1xuICAgICAgICByZXN1bHQueFNpemUgPSBNYXRoLm1heChhdmFpbGFibGVTaXplIC0geS5nZXRPdXRlclNpemUoKSwgMCk7XG4gICAgICB9IGVsc2UgaWYgKHkuaGFzQXV0b1NpemUoKSkge1xuICAgICAgICByZXN1bHQueVNpemUgPSBNYXRoLm1heChhdmFpbGFibGVTaXplIC0geC5nZXRPdXRlclNpemUoKSwgMCk7XG4gICAgICB9XG4gICAgfSBlbHNlIGlmICh4KSB7XG4gICAgICBpZiAoeC5oYXNBdXRvU2l6ZSgpKSB7XG4gICAgICAgIHJlc3VsdC54U2l6ZSA9IGF2YWlsYWJsZVNpemU7XG4gICAgICB9XG4gICAgfSBlbHNlIGlmICh5KSB7XG4gICAgICBpZiAoeS5oYXNBdXRvU2l6ZSgpKSB7XG4gICAgICAgIHJlc3VsdC55U2l6ZSA9IGF2YWlsYWJsZVNpemU7XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiByZXN1bHQ7XG4gIH1cblxuICAvKipcbiAgICogQG92ZXJyaWRlXG4gICAqL1xuICBwcmVwYXJlQ29udGFpbmVyKFxuICAgIGNvbnRleHQ6IEV4cHJzLkNvbnRleHQsXG4gICAgY29udGFpbmVyOiBWdHJlZS5Db250YWluZXIsXG4gICAgcGFnZTogVnRyZWUuUGFnZSxcbiAgICBkb2NGYWNlczogRm9udC5Eb2N1bWVudEZhY2VzLFxuICAgIGNsaWVudExheW91dDogVnRyZWUuQ2xpZW50TGF5b3V0LFxuICApOiB2b2lkIHtcbiAgICBzdXBlci5wcmVwYXJlQ29udGFpbmVyKGNvbnRleHQsIGNvbnRhaW5lciwgcGFnZSwgZG9jRmFjZXMsIGNsaWVudExheW91dCk7XG5cbiAgICAvLyBBZGQgYW4gYXR0cmlidXRlIHRvIHRoZSBlbGVtZW50IHNvIHRoYXQgaXQgY2FuIGJlIHJlZmVyZWQgZnJvbSBleHRlcm5hbFxuICAgIC8vIHN0eWxlIHNoZWV0cy5cbiAgICBjb250YWluZXIuZWxlbWVudC5zZXRBdHRyaWJ1dGUoXCJkYXRhLXZpdmxpb3N0eWxlLXBhZ2UtYm94XCIsIHRydWUpO1xuICB9XG59XG5cbi8qKlxuICogSW50ZXJmYWNlIHVzZWQgZm9yIHBhcmFtZXRlcnMgcGFzc2VkIHRvIGRpc3RyaWJ1dGVBdXRvTWFyZ2luQm94U2l6ZXMgbWV0aG9kLlxuICovXG5pbnRlcmZhY2UgTWFyZ2luQm94U2l6aW5nUGFyYW0ge1xuICBoYXNBdXRvU2l6ZSgpOiBib29sZWFuO1xuXG4gIGdldE91dGVyTWF4Q29udGVudFNpemUoKTogbnVtYmVyO1xuXG4gIGdldE91dGVyTWluQ29udGVudFNpemUoKTogbnVtYmVyO1xuXG4gIGdldE91dGVyU2l6ZSgpOiBudW1iZXI7XG59XG5cbi8qKlxuICogTWFyZ2luQm94U2l6aW5nUGFyYW0gZm9yIGEgc2luZ2xlIHBhZ2UtbWFyZ2luIGJveC5cbiAqIEBwYXJhbSBjb250YWluZXIgQSBjb250YWluZXIgY29ycmVzcG9uZGluZyB0byB0aGUgdGFyZ2V0IG1hcmdpbiBib3guXG4gKiBAcGFyYW0gc3R5bGUgU3R5bGVzIHNwZWNpZmllZCB0byB0aGUgdGFyZ2V0IG1hcmdpbiBib3guXG4gKi9cbmNsYXNzIFNpbmdsZUJveE1hcmdpbkJveFNpemluZ1BhcmFtIGltcGxlbWVudHMgTWFyZ2luQm94U2l6aW5nUGFyYW0ge1xuICBwcml2YXRlIGhhc0F1dG9TaXplXzogYm9vbGVhbjtcbiAgcHJpdmF0ZSBzaXplOiB7IFtrZXkgaW4gU2l6aW5nLlNpemVdOiBudW1iZXIgfSB8IG51bGwgPSBudWxsO1xuXG4gIGNvbnN0cnVjdG9yKFxuICAgIHByb3RlY3RlZCByZWFkb25seSBjb250YWluZXI6IFZ0cmVlLkNvbnRhaW5lcixcbiAgICBzdHlsZTogeyBba2V5OiBzdHJpbmddOiBDc3MuVmFsIH0sXG4gICAgcHJvdGVjdGVkIHJlYWRvbmx5IGlzSG9yaXpvbnRhbDogYm9vbGVhbixcbiAgICBzY29wZTogRXhwcnMuTGV4aWNhbFNjb3BlLFxuICAgIHByaXZhdGUgcmVhZG9ubHkgY2xpZW50TGF5b3V0OiBWdHJlZS5DbGllbnRMYXlvdXQsXG4gICkge1xuICAgIHRoaXMuaGFzQXV0b1NpemVfID0gIVBhZ2VNYXN0ZXIudG9FeHByQXV0byhcbiAgICAgIHNjb3BlLFxuICAgICAgc3R5bGVbaXNIb3Jpem9udGFsID8gXCJ3aWR0aFwiIDogXCJoZWlnaHRcIl0sXG4gICAgICBuZXcgRXhwcnMuTnVtZXJpYyhzY29wZSwgMCwgXCJweFwiKSxcbiAgICApO1xuICB9XG5cbiAgLyoqXG4gICAqICBAb3ZlcnJpZGVcbiAgICovXG4gIGhhc0F1dG9TaXplKCk6IGJvb2xlYW4ge1xuICAgIHJldHVybiB0aGlzLmhhc0F1dG9TaXplXztcbiAgfVxuXG4gIHByaXZhdGUgZ2V0U2l6ZSgpOiB7IFtrZXkgaW4gU2l6aW5nLlNpemVdOiBudW1iZXIgfSB7XG4gICAgaWYgKCF0aGlzLnNpemUpIHtcbiAgICAgIGNvbnN0IHNpemVzID0gdGhpcy5pc0hvcml6b250YWxcbiAgICAgICAgPyBbU2l6aW5nLlNpemUuTUFYX0NPTlRFTlRfV0lEVEgsIFNpemluZy5TaXplLk1JTl9DT05URU5UX1dJRFRIXVxuICAgICAgICA6IFtTaXppbmcuU2l6ZS5NQVhfQ09OVEVOVF9IRUlHSFQsIFNpemluZy5TaXplLk1JTl9DT05URU5UX0hFSUdIVF07XG4gICAgICB0aGlzLnNpemUgPSBTaXppbmcuZ2V0U2l6ZShcbiAgICAgICAgdGhpcy5jbGllbnRMYXlvdXQsXG4gICAgICAgIHRoaXMuY29udGFpbmVyLmVsZW1lbnQsXG4gICAgICAgIHNpemVzLFxuICAgICAgKTtcbiAgICB9XG4gICAgcmV0dXJuIHRoaXMuc2l6ZTtcbiAgfVxuXG4gIC8qKlxuICAgKiBAb3ZlcnJpZGVcbiAgICovXG4gIGdldE91dGVyTWF4Q29udGVudFNpemUoKTogbnVtYmVyIHtcbiAgICBjb25zdCBzaXplID0gdGhpcy5nZXRTaXplKCk7XG4gICAgaWYgKHRoaXMuaXNIb3Jpem9udGFsKSB7XG4gICAgICByZXR1cm4gKFxuICAgICAgICB0aGlzLmNvbnRhaW5lci5nZXRJbnNldExlZnQoKSArXG4gICAgICAgIHNpemVbU2l6aW5nLlNpemUuTUFYX0NPTlRFTlRfV0lEVEhdICtcbiAgICAgICAgdGhpcy5jb250YWluZXIuZ2V0SW5zZXRSaWdodCgpXG4gICAgICApO1xuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gKFxuICAgICAgICB0aGlzLmNvbnRhaW5lci5nZXRJbnNldFRvcCgpICtcbiAgICAgICAgc2l6ZVtTaXppbmcuU2l6ZS5NQVhfQ09OVEVOVF9IRUlHSFRdICtcbiAgICAgICAgdGhpcy5jb250YWluZXIuZ2V0SW5zZXRCb3R0b20oKVxuICAgICAgKTtcbiAgICB9XG4gIH1cblxuICAvKipcbiAgICogQG92ZXJyaWRlXG4gICAqL1xuICBnZXRPdXRlck1pbkNvbnRlbnRTaXplKCk6IG51bWJlciB7XG4gICAgY29uc3Qgc2l6ZSA9IHRoaXMuZ2V0U2l6ZSgpO1xuICAgIGlmICh0aGlzLmlzSG9yaXpvbnRhbCkge1xuICAgICAgcmV0dXJuIChcbiAgICAgICAgdGhpcy5jb250YWluZXIuZ2V0SW5zZXRMZWZ0KCkgK1xuICAgICAgICBzaXplW1NpemluZy5TaXplLk1JTl9DT05URU5UX1dJRFRIXSArXG4gICAgICAgIHRoaXMuY29udGFpbmVyLmdldEluc2V0UmlnaHQoKVxuICAgICAgKTtcbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuIChcbiAgICAgICAgdGhpcy5jb250YWluZXIuZ2V0SW5zZXRUb3AoKSArXG4gICAgICAgIHNpemVbU2l6aW5nLlNpemUuTUlOX0NPTlRFTlRfSEVJR0hUXSArXG4gICAgICAgIHRoaXMuY29udGFpbmVyLmdldEluc2V0Qm90dG9tKClcbiAgICAgICk7XG4gICAgfVxuICB9XG5cbiAgLyoqXG4gICAqIEBvdmVycmlkZVxuICAgKi9cbiAgZ2V0T3V0ZXJTaXplKCk6IG51bWJlciB7XG4gICAgaWYgKHRoaXMuaXNIb3Jpem9udGFsKSB7XG4gICAgICByZXR1cm4gKFxuICAgICAgICB0aGlzLmNvbnRhaW5lci5nZXRJbnNldExlZnQoKSArXG4gICAgICAgIHRoaXMuY29udGFpbmVyLndpZHRoICtcbiAgICAgICAgdGhpcy5jb250YWluZXIuZ2V0SW5zZXRSaWdodCgpXG4gICAgICApO1xuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gKFxuICAgICAgICB0aGlzLmNvbnRhaW5lci5nZXRJbnNldFRvcCgpICtcbiAgICAgICAgdGhpcy5jb250YWluZXIuaGVpZ2h0ICtcbiAgICAgICAgdGhpcy5jb250YWluZXIuZ2V0SW5zZXRCb3R0b20oKVxuICAgICAgKTtcbiAgICB9XG4gIH1cbn1cblxuLyoqXG4gKiBNYXJnaW5Cb3hTaXppbmdQYXJhbSB3aXRoIHdoaWNoIG11bHRpcGxlIG1hcmdpbiBib3hlcyBhcmUgdHJlYXRlZCBhcyBvbmVcbiAqIG1hcmdpbiBib3guIEVhY2ggbWV0aG9kIHF1ZXJ5aW5nIGEgZGltZW5zaW9uIHJldHVybnMgdGhlIG1heGltdW0gb2YgdGhlIGJveGVzXG4gKiBtdWx0aXBsaWVkIGJ5IHRoZSBudW1iZXIgb2YgdGhlIGJveGVzLlxuICogQHBhcmFtIHBhcmFtcyBNYXJnaW5Cb3hTaXppbmdQYXJhbSdzIG9mIHRoZSB0YXJnZXQgbWFyZ2luIGJveGVzLlxuICovXG5jbGFzcyBNdWx0aXBsZUJveGVzTWFyZ2luQm94U2l6aW5nUGFyYW0gaW1wbGVtZW50cyBNYXJnaW5Cb3hTaXppbmdQYXJhbSB7XG4gIGNvbnN0cnVjdG9yKHByaXZhdGUgcmVhZG9ubHkgcGFyYW1zOiBNYXJnaW5Cb3hTaXppbmdQYXJhbVtdKSB7fVxuXG4gIC8qKlxuICAgKiBAb3ZlcnJpZGVcbiAgICovXG4gIGhhc0F1dG9TaXplKCk6IGJvb2xlYW4ge1xuICAgIHJldHVybiB0aGlzLnBhcmFtcy5zb21lKChwKSA9PiBwLmhhc0F1dG9TaXplKCkpO1xuICB9XG5cbiAgLyoqXG4gICAqICBAb3ZlcnJpZGVcbiAgICovXG4gIGdldE91dGVyTWF4Q29udGVudFNpemUoKTogbnVtYmVyIHtcbiAgICBjb25zdCBzaXplcyA9IHRoaXMucGFyYW1zLm1hcCgocCkgPT4gcC5nZXRPdXRlck1heENvbnRlbnRTaXplKCkpO1xuICAgIHJldHVybiBNYXRoLm1heC5hcHBseShudWxsLCBzaXplcykgKiBzaXplcy5sZW5ndGg7XG4gIH1cblxuICAvKipcbiAgICogIEBvdmVycmlkZVxuICAgKi9cbiAgZ2V0T3V0ZXJNaW5Db250ZW50U2l6ZSgpOiBudW1iZXIge1xuICAgIGNvbnN0IHNpemVzID0gdGhpcy5wYXJhbXMubWFwKChwKSA9PiBwLmdldE91dGVyTWluQ29udGVudFNpemUoKSk7XG4gICAgcmV0dXJuIE1hdGgubWF4LmFwcGx5KG51bGwsIHNpemVzKSAqIHNpemVzLmxlbmd0aDtcbiAgfVxuXG4gIC8qKlxuICAgKiAgQG92ZXJyaWRlXG4gICAqL1xuICBnZXRPdXRlclNpemUoKTogbnVtYmVyIHtcbiAgICBjb25zdCBzaXplcyA9IHRoaXMucGFyYW1zLm1hcCgocCkgPT4gcC5nZXRPdXRlclNpemUoKSk7XG4gICAgcmV0dXJuIE1hdGgubWF4LmFwcGx5KG51bGwsIHNpemVzKSAqIHNpemVzLmxlbmd0aDtcbiAgfVxufVxuXG4vKipcbiAqIE1hcmdpbkJveFNpemluZ1BhcmFtIGZvciBhIHNpbmdsZSBwYWdlLW1hcmdpbiBib3ggd2l0aCBhIGZpeGVkIHNpemUgYWxvbmcgdGhlXG4gKiB2YXJpYWJsZSBkaW1lbnNpb24uXG4gKiBAcGFyYW0gY29udGFpbmVyIEEgY29udGFpbmVyIGNvcnJlc3BvbmRpbmcgdG8gdGhlIHRhcmdldCBtYXJnaW4gYm94LlxuICogQHBhcmFtIHN0eWxlIFN0eWxlcyBzcGVjaWZpZWQgdG8gdGhlIHRhcmdldCBtYXJnaW4gYm94LlxuICogQHBhcmFtIHNpemUgVGhlIGZpeGVkIHNpemUgKHdpZHRoIG9yIGhlaWdodCkgYWxvbmcgdGhlIHZhcmlhYmxlIGRpbWVuc2lvbi5cbiAqL1xuY2xhc3MgRml4ZWRTaXplTWFyZ2luQm94U2l6aW5nUGFyYW0gZXh0ZW5kcyBTaW5nbGVCb3hNYXJnaW5Cb3hTaXppbmdQYXJhbSB7XG4gIHByaXZhdGUgZml4ZWRTaXplOiBudW1iZXI7XG5cbiAgY29uc3RydWN0b3IoXG4gICAgY29udGFpbmVyOiBWdHJlZS5Db250YWluZXIsXG4gICAgc3R5bGU6IHsgW2tleTogc3RyaW5nXTogQ3NzLlZhbCB9LFxuICAgIGlzSG9yaXpvbnRhbDogYm9vbGVhbixcbiAgICBzY29wZTogRXhwcnMuTGV4aWNhbFNjb3BlLFxuICAgIGNsaWVudExheW91dDogVnRyZWUuQ2xpZW50TGF5b3V0LFxuICAgIHNpemU6IG51bWJlcixcbiAgKSB7XG4gICAgc3VwZXIoY29udGFpbmVyLCBzdHlsZSwgaXNIb3Jpem9udGFsLCBzY29wZSwgY2xpZW50TGF5b3V0KTtcbiAgICB0aGlzLmZpeGVkU2l6ZSA9IHNpemU7XG4gIH1cblxuICAvKipcbiAgICogQG92ZXJyaWRlXG4gICAqL1xuICBoYXNBdXRvU2l6ZSgpOiBib29sZWFuIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cblxuICAvKipcbiAgICogIEBvdmVycmlkZVxuICAgKi9cbiAgZ2V0T3V0ZXJNYXhDb250ZW50U2l6ZSgpOiBudW1iZXIge1xuICAgIHJldHVybiB0aGlzLmdldE91dGVyU2l6ZSgpO1xuICB9XG5cbiAgLyoqXG4gICAqICBAb3ZlcnJpZGVcbiAgICovXG4gIGdldE91dGVyTWluQ29udGVudFNpemUoKTogbnVtYmVyIHtcbiAgICByZXR1cm4gdGhpcy5nZXRPdXRlclNpemUoKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBAb3ZlcnJpZGVcbiAgICovXG4gIGdldE91dGVyU2l6ZSgpOiBudW1iZXIge1xuICAgIGlmICh0aGlzLmlzSG9yaXpvbnRhbCkge1xuICAgICAgcmV0dXJuIChcbiAgICAgICAgdGhpcy5jb250YWluZXIuZ2V0SW5zZXRMZWZ0KCkgK1xuICAgICAgICB0aGlzLmZpeGVkU2l6ZSArXG4gICAgICAgIHRoaXMuY29udGFpbmVyLmdldEluc2V0UmlnaHQoKVxuICAgICAgKTtcbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuIChcbiAgICAgICAgdGhpcy5jb250YWluZXIuZ2V0SW5zZXRUb3AoKSArXG4gICAgICAgIHRoaXMuZml4ZWRTaXplICtcbiAgICAgICAgdGhpcy5jb250YWluZXIuZ2V0SW5zZXRCb3R0b20oKVxuICAgICAgKTtcbiAgICB9XG4gIH1cbn1cblxuZXhwb3J0IGNsYXNzIFBhZ2VSdWxlUGFydGl0aW9uSW5zdGFuY2UgZXh0ZW5kcyBQYWdlTWFzdGVyLlBhcnRpdGlvbkluc3RhbmNlPFBhZ2VSdWxlUGFydGl0aW9uPiB7XG4gIGJvcmRlckJveFdpZHRoOiBFeHBycy5WYWwgPSBudWxsO1xuICBib3JkZXJCb3hIZWlnaHQ6IEV4cHJzLlZhbCA9IG51bGw7XG4gIG1hcmdpblRvcDogRXhwcnMuVmFsID0gbnVsbDtcbiAgbWFyZ2luUmlnaHQ6IEV4cHJzLlZhbCA9IG51bGw7XG4gIG1hcmdpbkJvdHRvbTogRXhwcnMuVmFsID0gbnVsbDtcbiAgbWFyZ2luTGVmdDogRXhwcnMuVmFsID0gbnVsbDtcblxuICBjb25zdHJ1Y3RvcihcbiAgICBwYXJlbnRJbnN0YW5jZTogUGFnZU1hc3Rlci5QYWdlQm94SW5zdGFuY2UsXG4gICAgcGFnZVJ1bGVQYXJ0aXRpb246IFBhZ2VSdWxlUGFydGl0aW9uLFxuICApIHtcbiAgICBzdXBlcihwYXJlbnRJbnN0YW5jZSwgcGFnZVJ1bGVQYXJ0aXRpb24pO1xuICB9XG5cbiAgLyoqXG4gICAqIEBvdmVycmlkZVxuICAgKi9cbiAgYXBwbHlDYXNjYWRlQW5kSW5pdChcbiAgICBjYXNjYWRlOiBDc3NDYXNjYWRlLkNhc2NhZGVJbnN0YW5jZSxcbiAgICBkb2NFbGVtZW50U3R5bGU6IENzc0Nhc2NhZGUuRWxlbWVudFN0eWxlLFxuICApOiB2b2lkIHtcbiAgICBjb25zdCBzdHlsZSA9IHRoaXMuY2FzY2FkZWQ7XG4gICAgZm9yIChjb25zdCBuYW1lIGluIGRvY0VsZW1lbnRTdHlsZSkge1xuICAgICAgaWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChkb2NFbGVtZW50U3R5bGUsIG5hbWUpKSB7XG4gICAgICAgIGlmIChuYW1lLm1hdGNoKC9eY29sdW1uLiokLykgfHwgbmFtZS5tYXRjaCgvXmJhY2tncm91bmQtLykpIHtcbiAgICAgICAgICBzdHlsZVtuYW1lXSA9IGRvY0VsZW1lbnRTdHlsZVtuYW1lXTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgICBzdXBlci5hcHBseUNhc2NhZGVBbmRJbml0KGNhc2NhZGUsIGRvY0VsZW1lbnRTdHlsZSk7XG4gICAgY29uc3QgcGFnZVJ1bGVNYXN0ZXJJbnN0YW5jZSA9IHRoaXNcbiAgICAgIC5wYXJlbnRJbnN0YW5jZSBhcyBQYWdlUnVsZU1hc3Rlckluc3RhbmNlO1xuICAgIHBhZ2VSdWxlTWFzdGVySW5zdGFuY2Uuc2V0UGFnZUFyZWFEaW1lbnNpb24oe1xuICAgICAgYm9yZGVyQm94V2lkdGg6IHRoaXMuYm9yZGVyQm94V2lkdGgsXG4gICAgICBib3JkZXJCb3hIZWlnaHQ6IHRoaXMuYm9yZGVyQm94SGVpZ2h0LFxuICAgICAgbWFyZ2luVG9wOiB0aGlzLm1hcmdpblRvcCxcbiAgICAgIG1hcmdpblJpZ2h0OiB0aGlzLm1hcmdpblJpZ2h0LFxuICAgICAgbWFyZ2luQm90dG9tOiB0aGlzLm1hcmdpbkJvdHRvbSxcbiAgICAgIG1hcmdpbkxlZnQ6IHRoaXMubWFyZ2luTGVmdCxcbiAgICB9KTtcbiAgfVxuXG4gIC8qKlxuICAgKiBAb3ZlcnJpZGVcbiAgICovXG4gIGluaXRIb3Jpem9udGFsKCk6IHZvaWQge1xuICAgIGNvbnN0IGRpbSA9IHRoaXMucmVzb2x2ZVBhZ2VCb3hEaW1lbnNpb25zKHtcbiAgICAgIHN0YXJ0OiBcImxlZnRcIixcbiAgICAgIGVuZDogXCJyaWdodFwiLFxuICAgICAgZXh0ZW50OiBcIndpZHRoXCIsXG4gICAgfSk7XG4gICAgdGhpcy5ib3JkZXJCb3hXaWR0aCA9IGRpbS5ib3JkZXJCb3hFeHRlbnQ7XG4gICAgdGhpcy5tYXJnaW5MZWZ0ID0gZGltLm1hcmdpblN0YXJ0O1xuICAgIHRoaXMubWFyZ2luUmlnaHQgPSBkaW0ubWFyZ2luRW5kO1xuICB9XG5cbiAgLyoqXG4gICAqIEBvdmVycmlkZVxuICAgKi9cbiAgaW5pdFZlcnRpY2FsKCk6IHZvaWQge1xuICAgIGNvbnN0IGRpbSA9IHRoaXMucmVzb2x2ZVBhZ2VCb3hEaW1lbnNpb25zKHtcbiAgICAgIHN0YXJ0OiBcInRvcFwiLFxuICAgICAgZW5kOiBcImJvdHRvbVwiLFxuICAgICAgZXh0ZW50OiBcImhlaWdodFwiLFxuICAgIH0pO1xuICAgIHRoaXMuYm9yZGVyQm94SGVpZ2h0ID0gZGltLmJvcmRlckJveEV4dGVudDtcbiAgICB0aGlzLm1hcmdpblRvcCA9IGRpbS5tYXJnaW5TdGFydDtcbiAgICB0aGlzLm1hcmdpbkJvdHRvbSA9IGRpbS5tYXJnaW5FbmQ7XG4gIH1cblxuICAvKipcbiAgICogQ2FsY3VsYXRlIHBhZ2UgZGltZW5zaW9ucyBhcyBzcGVjaWZpZWQgaW4gQ1NTIFBhZ2VkIE1lZGlhXG4gICAqIChodHRwOi8vZGV2LnczLm9yZy9jc3N3Zy9jc3MtcGFnZS8jcGFnZS1tb2RlbCkgUGFnZSBib3JkZXIgYm94IGV4dGVudCBhbmRcbiAgICogbWFyZ2lucy4gU2luY2UgdGhlIGNvbnRhaW5pbmcgYmxvY2sgY2FuIGJlIHJlc2l6ZWQgaW4gdGhlIG92ZXItY29uc3RyYWluZWRcbiAgICogY2FzZSwgdGhlIHN1bSBvZiB0aGVzZSB2YWx1ZXMgaXMgbm90IG5lY2Vzc2FyaWx5IHNhbWUgdG8gdGhlIG9yaWdpbmFsIHBhZ2VcbiAgICogZGltZW5zaW9uIHNwZWNpZmllZCBpbiB0aGUgcGFnZSBhdC1ydWxlcy5cbiAgICovXG4gIHByaXZhdGUgcmVzb2x2ZVBhZ2VCb3hEaW1lbnNpb25zKG5hbWVzOiB7XG4gICAgc3RhcnQ6IHN0cmluZztcbiAgICBlbmQ6IHN0cmluZztcbiAgICBleHRlbnQ6IHN0cmluZztcbiAgfSk6IHtcbiAgICBib3JkZXJCb3hFeHRlbnQ6IEV4cHJzLlZhbDtcbiAgICBtYXJnaW5TdGFydDogRXhwcnMuVmFsO1xuICAgIG1hcmdpbkVuZDogRXhwcnMuVmFsO1xuICB9IHtcbiAgICBjb25zdCBzdHlsZSA9IHRoaXMuc3R5bGU7XG4gICAgY29uc3QgcGFnZVNpemUgPSB0aGlzLnBhZ2VCb3gucGFnZVNpemU7XG4gICAgY29uc3Qgc2NvcGUgPSB0aGlzLnBhZ2VCb3guc2NvcGU7XG4gICAgY29uc3Qgc3RhcnRTaWRlID0gbmFtZXMuc3RhcnQ7XG4gICAgY29uc3QgZW5kU2lkZSA9IG5hbWVzLmVuZDtcbiAgICBjb25zdCBleHRlbnROYW1lID0gbmFtZXMuZXh0ZW50O1xuICAgIGNvbnN0IHBhZ2VFeHRlbnQgPSBwYWdlU2l6ZVtleHRlbnROYW1lXS50b0V4cHIoc2NvcGUsIG51bGwpO1xuICAgIGxldCBleHRlbnQgPSBQYWdlTWFzdGVyLnRvRXhwckF1dG8oc2NvcGUsIHN0eWxlW2V4dGVudE5hbWVdLCBwYWdlRXh0ZW50KTtcbiAgICBsZXQgbWFyZ2luU3RhcnQgPSBQYWdlTWFzdGVyLnRvRXhwckF1dG8oXG4gICAgICBzY29wZSxcbiAgICAgIHN0eWxlW2BtYXJnaW4tJHtzdGFydFNpZGV9YF0sXG4gICAgICBwYWdlRXh0ZW50LFxuICAgICk7XG4gICAgbGV0IG1hcmdpbkVuZCA9IFBhZ2VNYXN0ZXIudG9FeHByQXV0byhcbiAgICAgIHNjb3BlLFxuICAgICAgc3R5bGVbYG1hcmdpbi0ke2VuZFNpZGV9YF0sXG4gICAgICBwYWdlRXh0ZW50LFxuICAgICk7XG4gICAgY29uc3QgcGFkZGluZ1N0YXJ0ID0gUGFnZU1hc3Rlci50b0V4cHJaZXJvKFxuICAgICAgc2NvcGUsXG4gICAgICBzdHlsZVtgcGFkZGluZy0ke3N0YXJ0U2lkZX1gXSxcbiAgICAgIHBhZ2VFeHRlbnQsXG4gICAgKTtcbiAgICBjb25zdCBwYWRkaW5nRW5kID0gUGFnZU1hc3Rlci50b0V4cHJaZXJvKFxuICAgICAgc2NvcGUsXG4gICAgICBzdHlsZVtgcGFkZGluZy0ke2VuZFNpZGV9YF0sXG4gICAgICBwYWdlRXh0ZW50LFxuICAgICk7XG4gICAgY29uc3QgYm9yZGVyU3RhcnRXaWR0aCA9IFBhZ2VNYXN0ZXIudG9FeHByWmVyb0JvcmRlcihcbiAgICAgIHNjb3BlLFxuICAgICAgc3R5bGVbYGJvcmRlci0ke3N0YXJ0U2lkZX0td2lkdGhgXSxcbiAgICAgIHN0eWxlW2Bib3JkZXItJHtzdGFydFNpZGV9LXN0eWxlYF0sXG4gICAgICBwYWdlRXh0ZW50LFxuICAgICk7XG4gICAgY29uc3QgYm9yZGVyRW5kV2lkdGggPSBQYWdlTWFzdGVyLnRvRXhwclplcm9Cb3JkZXIoXG4gICAgICBzY29wZSxcbiAgICAgIHN0eWxlW2Bib3JkZXItJHtlbmRTaWRlfS13aWR0aGBdLFxuICAgICAgc3R5bGVbYGJvcmRlci0ke2VuZFNpZGV9LXN0eWxlYF0sXG4gICAgICBwYWdlRXh0ZW50LFxuICAgICk7XG4gICAgbGV0IHJlbWFpbnMgPSBFeHBycy5zdWIoXG4gICAgICBzY29wZSxcbiAgICAgIHBhZ2VFeHRlbnQsXG4gICAgICBFeHBycy5hZGQoXG4gICAgICAgIHNjb3BlLFxuICAgICAgICBFeHBycy5hZGQoc2NvcGUsIGJvcmRlclN0YXJ0V2lkdGgsIHBhZGRpbmdTdGFydCksXG4gICAgICAgIEV4cHJzLmFkZChzY29wZSwgYm9yZGVyRW5kV2lkdGgsIHBhZGRpbmdFbmQpLFxuICAgICAgKSxcbiAgICApO1xuXG4gICAgLy8gVGhlIGRpbWVuc2lvbnMgYXJlIGNhbGN1bGF0ZWQgYXMgZm9yIGEgbm9uLXJlcGxhY2VkIGJsb2NrIGVsZW1lbnQgaW5cbiAgICAvLyBub3JtYWwgZmxvdyAoaHR0cDovL3d3dy53My5vcmcvVFIvQ1NTMjEvdmlzdWRldC5odG1sI2Jsb2Nrd2lkdGgpXG4gICAgaWYgKCFleHRlbnQpIHtcbiAgICAgIGlmICghbWFyZ2luU3RhcnQpIHtcbiAgICAgICAgbWFyZ2luU3RhcnQgPSBzY29wZS56ZXJvO1xuICAgICAgfVxuICAgICAgaWYgKCFtYXJnaW5FbmQpIHtcbiAgICAgICAgbWFyZ2luRW5kID0gc2NvcGUuemVybztcbiAgICAgIH1cbiAgICAgIGV4dGVudCA9IEV4cHJzLnN1YihcbiAgICAgICAgc2NvcGUsXG4gICAgICAgIHJlbWFpbnMsXG4gICAgICAgIEV4cHJzLmFkZChzY29wZSwgbWFyZ2luU3RhcnQsIG1hcmdpbkVuZCksXG4gICAgICApO1xuICAgIH0gZWxzZSB7XG4gICAgICByZW1haW5zID0gRXhwcnMuc3ViKHNjb3BlLCByZW1haW5zLCBleHRlbnQpO1xuICAgICAgaWYgKCFtYXJnaW5TdGFydCAmJiAhbWFyZ2luRW5kKSB7XG4gICAgICAgIG1hcmdpblN0YXJ0ID0gRXhwcnMubXVsKHNjb3BlLCByZW1haW5zLCBuZXcgRXhwcnMuQ29uc3Qoc2NvcGUsIDAuNSkpO1xuICAgICAgICBtYXJnaW5FbmQgPSBtYXJnaW5TdGFydDtcbiAgICAgIH0gZWxzZSBpZiAobWFyZ2luU3RhcnQpIHtcbiAgICAgICAgbWFyZ2luRW5kID0gRXhwcnMuc3ViKHNjb3BlLCByZW1haW5zLCBtYXJnaW5TdGFydCk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBtYXJnaW5TdGFydCA9IEV4cHJzLnN1YihzY29wZSwgcmVtYWlucywgbWFyZ2luRW5kKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICAvLyBUT0RPIG92ZXItY29uc3RyYWluZWQgY2FzZVxuICAgIC8vIFwiaWYgdGhlIHZhbHVlcyBhcmUgb3Zlci1jb25zdHJhaW5lZCwgaW5zdGVhZCBvZiBpZ25vcmluZyBhbnkgbWFyZ2lucywgdGhlXG4gICAgLy8gY29udGFpbmluZyBibG9jayBpcyByZXNpemVkIHRvIGNvaW5jaWRlIHdpdGggdGhlIG1hcmdpbiBlZGdlcyBvZiB0aGUgcGFnZVxuICAgIC8vIGJveC5cIiAoQ1NTIFBhZ2VkIE1lZGlhIGh0dHA6Ly9kZXYudzMub3JnL2Nzc3dnL2Nzcy1wYWdlLyNwYWdlLW1vZGVsKVxuICAgIHN0eWxlW3N0YXJ0U2lkZV0gPSBuZXcgQ3NzLkV4cHIobWFyZ2luU3RhcnQpO1xuICAgIHN0eWxlW2VuZFNpZGVdID0gbmV3IENzcy5FeHByKG1hcmdpbkVuZCk7XG4gICAgc3R5bGVbYG1hcmdpbi0ke3N0YXJ0U2lkZX1gXSA9IENzcy5udW1lcmljWmVybztcbiAgICBzdHlsZVtgbWFyZ2luLSR7ZW5kU2lkZX1gXSA9IENzcy5udW1lcmljWmVybztcbiAgICBzdHlsZVtgcGFkZGluZy0ke3N0YXJ0U2lkZX1gXSA9IG5ldyBDc3MuRXhwcihwYWRkaW5nU3RhcnQpO1xuICAgIHN0eWxlW2BwYWRkaW5nLSR7ZW5kU2lkZX1gXSA9IG5ldyBDc3MuRXhwcihwYWRkaW5nRW5kKTtcbiAgICBzdHlsZVtgYm9yZGVyLSR7c3RhcnRTaWRlfS13aWR0aGBdID0gbmV3IENzcy5FeHByKGJvcmRlclN0YXJ0V2lkdGgpO1xuICAgIHN0eWxlW2Bib3JkZXItJHtlbmRTaWRlfS13aWR0aGBdID0gbmV3IENzcy5FeHByKGJvcmRlckVuZFdpZHRoKTtcbiAgICBzdHlsZVtleHRlbnROYW1lXSA9IG5ldyBDc3MuRXhwcihleHRlbnQpO1xuICAgIHN0eWxlW2BtYXgtJHtleHRlbnROYW1lfWBdID0gbmV3IENzcy5FeHByKGV4dGVudCk7XG4gICAgcmV0dXJuIHtcbiAgICAgIGJvcmRlckJveEV4dGVudDogRXhwcnMuc3ViKFxuICAgICAgICBzY29wZSxcbiAgICAgICAgcGFnZUV4dGVudCxcbiAgICAgICAgRXhwcnMuYWRkKHNjb3BlLCBtYXJnaW5TdGFydCwgbWFyZ2luRW5kKSxcbiAgICAgICksXG4gICAgICBtYXJnaW5TdGFydCxcbiAgICAgIG1hcmdpbkVuZCxcbiAgICB9O1xuICB9XG5cbiAgLyoqXG4gICAqIEBvdmVycmlkZVxuICAgKi9cbiAgcHJlcGFyZUNvbnRhaW5lcihcbiAgICBjb250ZXh0OiBFeHBycy5Db250ZXh0LFxuICAgIGNvbnRhaW5lcjogVnRyZWUuQ29udGFpbmVyLFxuICAgIHBhZ2U6IFZ0cmVlLlBhZ2UsXG4gICAgZG9jRmFjZXM6IEZvbnQuRG9jdW1lbnRGYWNlcyxcbiAgICBjbGllbnRMYXlvdXQ6IFZ0cmVlLkNsaWVudExheW91dCxcbiAgKTogdm9pZCB7XG4gICAgc3VwZXIucHJlcGFyZUNvbnRhaW5lcihjb250ZXh0LCBjb250YWluZXIsIHBhZ2UsIGRvY0ZhY2VzLCBjbGllbnRMYXlvdXQpO1xuICAgIHBhZ2UucGFnZUFyZWFFbGVtZW50ID0gY29udGFpbmVyLmVsZW1lbnQgYXMgSFRNTEVsZW1lbnQ7XG5cbiAgICAvLyBTZXQgcGFnZSBhcmVhIHNpemUgZm9yIHZ3L3ZoIHVuaXQgY2FsY3VsYXRpb25cbiAgICBjb250ZXh0LnBhZ2VBcmVhV2lkdGggPSBwYXJzZUZsb2F0KHBhZ2UucGFnZUFyZWFFbGVtZW50LnN0eWxlLndpZHRoKTtcbiAgICBjb250ZXh0LnBhZ2VBcmVhSGVpZ2h0ID0gcGFyc2VGbG9hdChwYWdlLnBhZ2VBcmVhRWxlbWVudC5zdHlsZS5oZWlnaHQpO1xuICB9XG59XG5cbmV4cG9ydCBjbGFzcyBQYWdlTWFyZ2luQm94UGFydGl0aW9uSW5zdGFuY2UgZXh0ZW5kcyBQYWdlTWFzdGVyLlBhcnRpdGlvbkluc3RhbmNlPFBhZ2VNYXJnaW5Cb3hQYXJ0aXRpb24+IHtcbiAgYm94SW5mbzogUGFnZU1hcmdpbkJveEluZm9ybWF0aW9uO1xuICBzdXBwcmVzc0VtcHR5Qm94R2VuZXJhdGlvbjogYm9vbGVhbiA9IHRydWU7XG5cbiAgY29uc3RydWN0b3IoXG4gICAgcGFyZW50SW5zdGFuY2U6IFBhZ2VNYXN0ZXIuUGFnZUJveEluc3RhbmNlLFxuICAgIHBhZ2VNYXJnaW5Cb3hQYXJ0aXRpb246IFBhZ2VNYXJnaW5Cb3hQYXJ0aXRpb24sXG4gICkge1xuICAgIHN1cGVyKHBhcmVudEluc3RhbmNlLCBwYWdlTWFyZ2luQm94UGFydGl0aW9uKTtcbiAgICBjb25zdCBuYW1lID0gcGFnZU1hcmdpbkJveFBhcnRpdGlvbi5tYXJnaW5Cb3hOYW1lO1xuICAgIHRoaXMuYm94SW5mbyA9IHBhZ2VNYXJnaW5Cb3hlc1tuYW1lXTtcbiAgICBjb25zdCBwYWdlUnVsZU1hc3Rlckluc3RhbmNlID0gcGFyZW50SW5zdGFuY2UgYXMgUGFnZVJ1bGVNYXN0ZXJJbnN0YW5jZTtcbiAgICBwYWdlUnVsZU1hc3Rlckluc3RhbmNlLnBhZ2VNYXJnaW5Cb3hJbnN0YW5jZXNbbmFtZV0gPSB0aGlzO1xuICB9XG5cbiAgLyoqXG4gICAqIEBvdmVycmlkZVxuICAgKi9cbiAgcHJlcGFyZUNvbnRhaW5lcihcbiAgICBjb250ZXh0OiBFeHBycy5Db250ZXh0LFxuICAgIGNvbnRhaW5lcjogVnRyZWUuQ29udGFpbmVyLFxuICAgIHBhZ2U6IFZ0cmVlLlBhZ2UsXG4gICAgZG9jRmFjZXM6IEZvbnQuRG9jdW1lbnRGYWNlcyxcbiAgICBjbGllbnRMYXlvdXQ6IFZ0cmVlLkNsaWVudExheW91dCxcbiAgKTogdm9pZCB7XG4gICAgdGhpcy5hcHBseVZlcnRpY2FsQWxpZ24oY29udGV4dCwgY29udGFpbmVyLmVsZW1lbnQpO1xuICAgIHN1cGVyLnByZXBhcmVDb250YWluZXIoY29udGV4dCwgY29udGFpbmVyLCBwYWdlLCBkb2NGYWNlcywgY2xpZW50TGF5b3V0KTtcbiAgfVxuXG4gIHByaXZhdGUgYXBwbHlWZXJ0aWNhbEFsaWduKGNvbnRleHQ6IEV4cHJzLkNvbnRleHQsIGVsZW1lbnQ6IEVsZW1lbnQpIHtcbiAgICBCYXNlLnNldENTU1Byb3BlcnR5KGVsZW1lbnQsIFwiZGlzcGxheVwiLCBcImZsZXhcIik7XG4gICAgY29uc3QgdmVydGljYWxBbGlnbjogQ3NzLlZhbCA9IHRoaXMuZ2V0UHJvcChjb250ZXh0LCBcInZlcnRpY2FsLWFsaWduXCIpO1xuICAgIGxldCBmbGV4QWxpZ246IHN0cmluZyB8IG51bGwgPSBudWxsO1xuICAgIGlmICh2ZXJ0aWNhbEFsaWduID09PSBDc3MuZ2V0TmFtZShcIm1pZGRsZVwiKSkge1xuICAgICAgZmxleEFsaWduID0gXCJjZW50ZXJcIjtcbiAgICB9IGVsc2UgaWYgKHZlcnRpY2FsQWxpZ24gPT09IENzcy5nZXROYW1lKFwidG9wXCIpKSB7XG4gICAgICBmbGV4QWxpZ24gPSBcImZsZXgtc3RhcnRcIjtcbiAgICB9IGVsc2UgaWYgKHZlcnRpY2FsQWxpZ24gPT09IENzcy5nZXROYW1lKFwiYm90dG9tXCIpKSB7XG4gICAgICBmbGV4QWxpZ24gPSBcImZsZXgtZW5kXCI7XG4gICAgfVxuICAgIGlmIChmbGV4QWxpZ24pIHtcbiAgICAgIEJhc2Uuc2V0Q1NTUHJvcGVydHkoXG4gICAgICAgIGVsZW1lbnQsXG4gICAgICAgIFwiZmxleC1mbG93XCIsXG4gICAgICAgIHRoaXMudmVydGljYWwgPyBcInJvd1wiIDogXCJjb2x1bW5cIixcbiAgICAgICk7XG4gICAgICBCYXNlLnNldENTU1Byb3BlcnR5KGVsZW1lbnQsIFwianVzdGlmeS1jb250ZW50XCIsIGZsZXhBbGlnbik7XG4gICAgfVxuICB9XG5cbiAgLyoqXG4gICAqIENhbGN1bGF0ZSBwYWdlLW1hcmdpbiBib3hlcyBwb3NpdGlvbnMgYWxvbmcgdGhlIHZhcmlhYmxlIGRpbWVuc2lvbiBvZiB0aGVcbiAgICogcGFnZS4gRm9yIENFTlRFUiBhbmQgRU5EIG1hcmdpbiBib3hlcywgdGhlIHBvc2l0aW9uIGlzIGNhbGN1bGF0ZWQgb25seSBpZlxuICAgKiB0aGUgZGltZW5zaW9uICh3aWR0aCBvciBoZWlnaHQpIGlzIG5vbi1hdXRvLCBzbyB0aGF0IGl0IGNhbiBiZSByZXNvbHZlZCBhdFxuICAgKiB0aGlzIHBvaW50LiBJZiB0aGUgZGltZW5zaW9uIGlzIGF1dG8sIHRoZSBjYWxjdWxhdGlvbiBpcyBkZWZmZXJlZC5cbiAgICovXG4gIHByaXZhdGUgcG9zaXRpb25BbG9uZ1ZhcmlhYmxlRGltZW5zaW9uKFxuICAgIG5hbWVzOiB7IHN0YXJ0OiBzdHJpbmc7IGVuZDogc3RyaW5nOyBleHRlbnQ6IHN0cmluZyB9LFxuICAgIGRpbTogUGFnZUFyZWFEaW1lbnNpb24gfCBudWxsLFxuICApOiB2b2lkIHtcbiAgICBjb25zdCBzdHlsZSA9IHRoaXMuc3R5bGU7XG4gICAgY29uc3Qgc2NvcGUgPSB0aGlzLnBhZ2VCb3guc2NvcGU7XG4gICAgY29uc3Qgc3RhcnRTaWRlID0gbmFtZXMuc3RhcnQ7XG4gICAgY29uc3QgZW5kU2lkZSA9IG5hbWVzLmVuZDtcbiAgICBjb25zdCBleHRlbnROYW1lID0gbmFtZXMuZXh0ZW50O1xuICAgIGNvbnN0IGlzSG9yaXpvbnRhbCA9IHN0YXJ0U2lkZSA9PT0gXCJsZWZ0XCI7XG4gICAgY29uc3QgYXZhaWxhYmxlRXh0ZW50ID0gaXNIb3Jpem9udGFsXG4gICAgICA/IGRpbS5ib3JkZXJCb3hXaWR0aFxuICAgICAgOiBkaW0uYm9yZGVyQm94SGVpZ2h0O1xuICAgIGNvbnN0IGV4dGVudCA9IFBhZ2VNYXN0ZXIudG9FeHByQXV0byhcbiAgICAgIHNjb3BlLFxuICAgICAgc3R5bGVbZXh0ZW50TmFtZV0sXG4gICAgICBhdmFpbGFibGVFeHRlbnQsXG4gICAgKTtcbiAgICBjb25zdCBzdGFydE9mZnNldCA9IGlzSG9yaXpvbnRhbCA/IGRpbS5tYXJnaW5MZWZ0IDogZGltLm1hcmdpblRvcDtcbiAgICBpZiAoXG4gICAgICB0aGlzLmJveEluZm8ucG9zaXRpb25BbG9uZ1ZhcmlhYmxlRGltZW5zaW9uID09PVxuICAgICAgTWFyZ2luQm94UG9zaXRpb25BbG9uZ1ZhcmlhYmxlRGltZW5zaW9uLlNUQVJUXG4gICAgKSB7XG4gICAgICBzdHlsZVtzdGFydFNpZGVdID0gbmV3IENzcy5FeHByKHN0YXJ0T2Zmc2V0KTtcbiAgICB9IGVsc2UgaWYgKGV4dGVudCkge1xuICAgICAgY29uc3QgbWFyZ2luU3RhcnQgPSBQYWdlTWFzdGVyLnRvRXhwclplcm8oXG4gICAgICAgIHNjb3BlLFxuICAgICAgICBzdHlsZVtgbWFyZ2luLSR7c3RhcnRTaWRlfWBdLFxuICAgICAgICBhdmFpbGFibGVFeHRlbnQsXG4gICAgICApO1xuICAgICAgY29uc3QgbWFyZ2luRW5kID0gUGFnZU1hc3Rlci50b0V4cHJaZXJvKFxuICAgICAgICBzY29wZSxcbiAgICAgICAgc3R5bGVbYG1hcmdpbi0ke2VuZFNpZGV9YF0sXG4gICAgICAgIGF2YWlsYWJsZUV4dGVudCxcbiAgICAgICk7XG4gICAgICBjb25zdCBwYWRkaW5nU3RhcnQgPSBQYWdlTWFzdGVyLnRvRXhwclplcm8oXG4gICAgICAgIHNjb3BlLFxuICAgICAgICBzdHlsZVtgcGFkZGluZy0ke3N0YXJ0U2lkZX1gXSxcbiAgICAgICAgYXZhaWxhYmxlRXh0ZW50LFxuICAgICAgKTtcbiAgICAgIGNvbnN0IHBhZGRpbmdFbmQgPSBQYWdlTWFzdGVyLnRvRXhwclplcm8oXG4gICAgICAgIHNjb3BlLFxuICAgICAgICBzdHlsZVtgcGFkZGluZy0ke2VuZFNpZGV9YF0sXG4gICAgICAgIGF2YWlsYWJsZUV4dGVudCxcbiAgICAgICk7XG4gICAgICBjb25zdCBib3JkZXJTdGFydFdpZHRoID0gUGFnZU1hc3Rlci50b0V4cHJaZXJvQm9yZGVyKFxuICAgICAgICBzY29wZSxcbiAgICAgICAgc3R5bGVbYGJvcmRlci0ke3N0YXJ0U2lkZX0td2lkdGhgXSxcbiAgICAgICAgc3R5bGVbYGJvcmRlci0ke3N0YXJ0U2lkZX0tc3R5bGVgXSxcbiAgICAgICAgYXZhaWxhYmxlRXh0ZW50LFxuICAgICAgKTtcbiAgICAgIGNvbnN0IGJvcmRlckVuZFdpZHRoID0gUGFnZU1hc3Rlci50b0V4cHJaZXJvQm9yZGVyKFxuICAgICAgICBzY29wZSxcbiAgICAgICAgc3R5bGVbYGJvcmRlci0ke2VuZFNpZGV9LXdpZHRoYF0sXG4gICAgICAgIHN0eWxlW2Bib3JkZXItJHtlbmRTaWRlfS1zdHlsZWBdLFxuICAgICAgICBhdmFpbGFibGVFeHRlbnQsXG4gICAgICApO1xuICAgICAgY29uc3Qgb3V0ZXJFeHRlbnQgPSBFeHBycy5hZGQoXG4gICAgICAgIHNjb3BlLFxuICAgICAgICBleHRlbnQsXG4gICAgICAgIEV4cHJzLmFkZChcbiAgICAgICAgICBzY29wZSxcbiAgICAgICAgICBFeHBycy5hZGQoc2NvcGUsIHBhZGRpbmdTdGFydCwgcGFkZGluZ0VuZCksXG4gICAgICAgICAgRXhwcnMuYWRkKFxuICAgICAgICAgICAgc2NvcGUsXG4gICAgICAgICAgICBFeHBycy5hZGQoc2NvcGUsIGJvcmRlclN0YXJ0V2lkdGgsIGJvcmRlckVuZFdpZHRoKSxcbiAgICAgICAgICAgIEV4cHJzLmFkZChzY29wZSwgbWFyZ2luU3RhcnQsIG1hcmdpbkVuZCksXG4gICAgICAgICAgKSxcbiAgICAgICAgKSxcbiAgICAgICk7XG4gICAgICBzd2l0Y2ggKHRoaXMuYm94SW5mby5wb3NpdGlvbkFsb25nVmFyaWFibGVEaW1lbnNpb24pIHtcbiAgICAgICAgY2FzZSBNYXJnaW5Cb3hQb3NpdGlvbkFsb25nVmFyaWFibGVEaW1lbnNpb24uQ0VOVEVSOlxuICAgICAgICAgIHN0eWxlW3N0YXJ0U2lkZV0gPSBuZXcgQ3NzLkV4cHIoXG4gICAgICAgICAgICBFeHBycy5hZGQoXG4gICAgICAgICAgICAgIHNjb3BlLFxuICAgICAgICAgICAgICBzdGFydE9mZnNldCxcbiAgICAgICAgICAgICAgRXhwcnMuZGl2KFxuICAgICAgICAgICAgICAgIHNjb3BlLFxuICAgICAgICAgICAgICAgIEV4cHJzLnN1YihzY29wZSwgYXZhaWxhYmxlRXh0ZW50LCBvdXRlckV4dGVudCksXG4gICAgICAgICAgICAgICAgbmV3IEV4cHJzLkNvbnN0KHNjb3BlLCAyKSxcbiAgICAgICAgICAgICAgKSxcbiAgICAgICAgICAgICksXG4gICAgICAgICAgKTtcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgY2FzZSBNYXJnaW5Cb3hQb3NpdGlvbkFsb25nVmFyaWFibGVEaW1lbnNpb24uRU5EOlxuICAgICAgICAgIHN0eWxlW3N0YXJ0U2lkZV0gPSBuZXcgQ3NzLkV4cHIoXG4gICAgICAgICAgICBFeHBycy5zdWIoXG4gICAgICAgICAgICAgIHNjb3BlLFxuICAgICAgICAgICAgICBFeHBycy5hZGQoc2NvcGUsIHN0YXJ0T2Zmc2V0LCBhdmFpbGFibGVFeHRlbnQpLFxuICAgICAgICAgICAgICBvdXRlckV4dGVudCxcbiAgICAgICAgICAgICksXG4gICAgICAgICAgKTtcbiAgICAgICAgICBicmVhaztcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICAvKipcbiAgICogQ2FsY3VsYXRlIHBhZ2UtbWFyZ2luIGJveGVzIHBvc2l0aW9ucyBhbG9uZyB0aGUgZml4ZWQgZGltZW5zaW9uIG9mIHRoZVxuICAgKiBwYWdlLlxuICAgKi9cbiAgcHJpdmF0ZSBwb3NpdGlvbkFuZFNpemVBbG9uZ0ZpeGVkRGltZW5zaW9uKFxuICAgIG5hbWVzOiB7IGluc2lkZTogc3RyaW5nOyBvdXRzaWRlOiBzdHJpbmc7IGV4dGVudDogc3RyaW5nIH0sXG4gICAgZGltOiBQYWdlQXJlYURpbWVuc2lvbiB8IG51bGwsXG4gICk6IHZvaWQge1xuICAgIGNvbnN0IHN0eWxlID0gdGhpcy5zdHlsZTtcbiAgICBjb25zdCBzY29wZSA9IHRoaXMucGFnZUJveC5zY29wZTtcbiAgICBjb25zdCBpbnNpZGVOYW1lID0gbmFtZXMuaW5zaWRlO1xuICAgIGNvbnN0IG91dHNpZGVOYW1lID0gbmFtZXMub3V0c2lkZTtcbiAgICBjb25zdCBleHRlbnROYW1lID0gbmFtZXMuZXh0ZW50O1xuICAgIGNvbnN0IHBhZ2VNYXJnaW4gPVxuICAgICAgZGltW1xuICAgICAgICBgbWFyZ2luJHtvdXRzaWRlTmFtZS5jaGFyQXQoMCkudG9VcHBlckNhc2UoKX0ke291dHNpZGVOYW1lLnN1YnN0cmluZyhcbiAgICAgICAgICAxLFxuICAgICAgICApfWBcbiAgICAgIF07XG4gICAgY29uc3QgbWFyZ2luSW5zaWRlID0gUGFnZU1hc3Rlci50b0V4cHJaZXJvQXV0byhcbiAgICAgIHNjb3BlLFxuICAgICAgc3R5bGVbYG1hcmdpbi0ke2luc2lkZU5hbWV9YF0sXG4gICAgICBwYWdlTWFyZ2luLFxuICAgICk7XG4gICAgY29uc3QgbWFyZ2luT3V0c2lkZSA9IFBhZ2VNYXN0ZXIudG9FeHByWmVyb0F1dG8oXG4gICAgICBzY29wZSxcbiAgICAgIHN0eWxlW2BtYXJnaW4tJHtvdXRzaWRlTmFtZX1gXSxcbiAgICAgIHBhZ2VNYXJnaW4sXG4gICAgKTtcbiAgICBjb25zdCBwYWRkaW5nSW5zaWRlID0gUGFnZU1hc3Rlci50b0V4cHJaZXJvKFxuICAgICAgc2NvcGUsXG4gICAgICBzdHlsZVtgcGFkZGluZy0ke2luc2lkZU5hbWV9YF0sXG4gICAgICBwYWdlTWFyZ2luLFxuICAgICk7XG4gICAgY29uc3QgcGFkZGluZ091dHNpZGUgPSBQYWdlTWFzdGVyLnRvRXhwclplcm8oXG4gICAgICBzY29wZSxcbiAgICAgIHN0eWxlW2BwYWRkaW5nLSR7b3V0c2lkZU5hbWV9YF0sXG4gICAgICBwYWdlTWFyZ2luLFxuICAgICk7XG4gICAgY29uc3QgYm9yZGVySW5zaWRlV2lkdGggPSBQYWdlTWFzdGVyLnRvRXhwclplcm9Cb3JkZXIoXG4gICAgICBzY29wZSxcbiAgICAgIHN0eWxlW2Bib3JkZXItJHtpbnNpZGVOYW1lfS13aWR0aGBdLFxuICAgICAgc3R5bGVbYGJvcmRlci0ke2luc2lkZU5hbWV9LXN0eWxlYF0sXG4gICAgICBwYWdlTWFyZ2luLFxuICAgICk7XG4gICAgY29uc3QgYm9yZGVyT3V0c2lkZVdpZHRoID0gUGFnZU1hc3Rlci50b0V4cHJaZXJvQm9yZGVyKFxuICAgICAgc2NvcGUsXG4gICAgICBzdHlsZVtgYm9yZGVyLSR7b3V0c2lkZU5hbWV9LXdpZHRoYF0sXG4gICAgICBzdHlsZVtgYm9yZGVyLSR7b3V0c2lkZU5hbWV9LXN0eWxlYF0sXG4gICAgICBwYWdlTWFyZ2luLFxuICAgICk7XG4gICAgY29uc3QgZXh0ZW50ID0gUGFnZU1hc3Rlci50b0V4cHJBdXRvKHNjb3BlLCBzdHlsZVtleHRlbnROYW1lXSwgcGFnZU1hcmdpbik7XG4gICAgbGV0IHJlc3VsdDoge1xuICAgICAgZXh0ZW50OiBFeHBycy5SZXN1bHQ7XG4gICAgICBtYXJnaW5JbnNpZGU6IEV4cHJzLlJlc3VsdDtcbiAgICAgIG1hcmdpbk91dHNpZGU6IEV4cHJzLlJlc3VsdDtcbiAgICB9ID0gbnVsbDtcblxuICAgIGZ1bmN0aW9uIGdldENvbXB1dGVkVmFsdWVzKFxuICAgICAgY29udGV4dDogRXhwcnMuQ29udGV4dCxcbiAgICApOiB7XG4gICAgICBleHRlbnQ6IEV4cHJzLlJlc3VsdCB8IG51bGw7XG4gICAgICBtYXJnaW5JbnNpZGU6IEV4cHJzLlJlc3VsdCB8IG51bGw7XG4gICAgICBtYXJnaW5PdXRzaWRlOiBFeHBycy5SZXN1bHQgfCBudWxsO1xuICAgIH0ge1xuICAgICAgaWYgKHJlc3VsdCkge1xuICAgICAgICByZXR1cm4gcmVzdWx0O1xuICAgICAgfVxuICAgICAgcmVzdWx0ID0ge1xuICAgICAgICBleHRlbnQ6IGV4dGVudCA/IGV4dGVudC5ldmFsdWF0ZShjb250ZXh0KSA6IG51bGwsXG4gICAgICAgIG1hcmdpbkluc2lkZTogbWFyZ2luSW5zaWRlID8gbWFyZ2luSW5zaWRlLmV2YWx1YXRlKGNvbnRleHQpIDogbnVsbCxcbiAgICAgICAgbWFyZ2luT3V0c2lkZTogbWFyZ2luT3V0c2lkZSA/IG1hcmdpbk91dHNpZGUuZXZhbHVhdGUoY29udGV4dCkgOiBudWxsLFxuICAgICAgfTtcbiAgICAgIGNvbnN0IHBhZ2VNYXJnaW5WYWx1ZSA9IHBhZ2VNYXJnaW4uZXZhbHVhdGUoY29udGV4dCk7XG4gICAgICBsZXQgYm9yZGVyQW5kUGFkZGluZyA9IDA7XG4gICAgICBbXG4gICAgICAgIGJvcmRlckluc2lkZVdpZHRoLFxuICAgICAgICBwYWRkaW5nSW5zaWRlLFxuICAgICAgICBwYWRkaW5nT3V0c2lkZSxcbiAgICAgICAgYm9yZGVyT3V0c2lkZVdpZHRoLFxuICAgICAgXS5mb3JFYWNoKCh4KSA9PiB7XG4gICAgICAgIGlmICh4KSB7XG4gICAgICAgICAgYm9yZGVyQW5kUGFkZGluZyArPSB4LmV2YWx1YXRlKGNvbnRleHQpIGFzIG51bWJlcjtcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgICBpZiAocmVzdWx0Lm1hcmdpbkluc2lkZSA9PT0gbnVsbCB8fCByZXN1bHQubWFyZ2luT3V0c2lkZSA9PT0gbnVsbCkge1xuICAgICAgICBjb25zdCB0b3RhbCA9XG4gICAgICAgICAgYm9yZGVyQW5kUGFkZGluZyArXG4gICAgICAgICAgKHJlc3VsdC5leHRlbnQgYXMgbnVtYmVyKSArXG4gICAgICAgICAgKHJlc3VsdC5tYXJnaW5JbnNpZGUgYXMgbnVtYmVyKSArXG4gICAgICAgICAgKHJlc3VsdC5tYXJnaW5PdXRzaWRlIGFzIG51bWJlcik7XG4gICAgICAgIGlmICh0b3RhbCA+IHBhZ2VNYXJnaW5WYWx1ZSkge1xuICAgICAgICAgIGlmIChyZXN1bHQubWFyZ2luSW5zaWRlID09PSBudWxsKSB7XG4gICAgICAgICAgICByZXN1bHQubWFyZ2luSW5zaWRlID0gMDtcbiAgICAgICAgICB9XG4gICAgICAgICAgaWYgKHJlc3VsdC5tYXJnaW5PdXRzaWRlID09PSBudWxsKSB7XG4gICAgICAgICAgICByZXN1bHQubWFyZ2luT3V0c2lkZSA9IDA7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG4gICAgICBpZiAoXG4gICAgICAgIHJlc3VsdC5leHRlbnQgIT09IG51bGwgJiZcbiAgICAgICAgcmVzdWx0Lm1hcmdpbkluc2lkZSAhPT0gbnVsbCAmJlxuICAgICAgICByZXN1bHQubWFyZ2luT3V0c2lkZSAhPT0gbnVsbFxuICAgICAgKSB7XG4gICAgICAgIC8vIG92ZXItY29uc3RyYWluZWRcbiAgICAgICAgcmVzdWx0Lm1hcmdpbk91dHNpZGUgPSBudWxsO1xuICAgICAgfVxuICAgICAgaWYgKFxuICAgICAgICByZXN1bHQuZXh0ZW50ID09PSBudWxsICYmXG4gICAgICAgIHJlc3VsdC5tYXJnaW5JbnNpZGUgIT09IG51bGwgJiZcbiAgICAgICAgcmVzdWx0Lm1hcmdpbk91dHNpZGUgIT09IG51bGxcbiAgICAgICkge1xuICAgICAgICByZXN1bHQuZXh0ZW50ID1cbiAgICAgICAgICBwYWdlTWFyZ2luVmFsdWUgLVxuICAgICAgICAgIGJvcmRlckFuZFBhZGRpbmcgLVxuICAgICAgICAgIChyZXN1bHQubWFyZ2luSW5zaWRlIGFzIG51bWJlcikgLVxuICAgICAgICAgIChyZXN1bHQubWFyZ2luT3V0c2lkZSBhcyBudW1iZXIpO1xuICAgICAgfSBlbHNlIGlmIChcbiAgICAgICAgcmVzdWx0LmV4dGVudCAhPT0gbnVsbCAmJlxuICAgICAgICAocmVzdWx0Lm1hcmdpbkluc2lkZSBhcyBudW1iZXIpID09PSBudWxsICYmXG4gICAgICAgIChyZXN1bHQubWFyZ2luT3V0c2lkZSBhcyBudW1iZXIpICE9PSBudWxsXG4gICAgICApIHtcbiAgICAgICAgcmVzdWx0Lm1hcmdpbkluc2lkZSA9XG4gICAgICAgICAgcGFnZU1hcmdpblZhbHVlIC1cbiAgICAgICAgICBib3JkZXJBbmRQYWRkaW5nIC1cbiAgICAgICAgICAocmVzdWx0LmV4dGVudCBhcyBudW1iZXIpIC1cbiAgICAgICAgICAocmVzdWx0Lm1hcmdpbk91dHNpZGUgYXMgbnVtYmVyKTtcbiAgICAgIH0gZWxzZSBpZiAoXG4gICAgICAgIHJlc3VsdC5leHRlbnQgIT09IG51bGwgJiZcbiAgICAgICAgcmVzdWx0Lm1hcmdpbkluc2lkZSAhPT0gbnVsbCAmJlxuICAgICAgICByZXN1bHQubWFyZ2luT3V0c2lkZSA9PT0gbnVsbFxuICAgICAgKSB7XG4gICAgICAgIHJlc3VsdC5tYXJnaW5PdXRzaWRlID1cbiAgICAgICAgICBwYWdlTWFyZ2luVmFsdWUgLVxuICAgICAgICAgIGJvcmRlckFuZFBhZGRpbmcgLVxuICAgICAgICAgIChyZXN1bHQuZXh0ZW50IGFzIG51bWJlcikgLVxuICAgICAgICAgIChyZXN1bHQubWFyZ2luSW5zaWRlIGFzIG51bWJlcik7XG4gICAgICB9IGVsc2UgaWYgKHJlc3VsdC5leHRlbnQgPT09IG51bGwpIHtcbiAgICAgICAgcmVzdWx0Lm1hcmdpbkluc2lkZSA9IHJlc3VsdC5tYXJnaW5PdXRzaWRlID0gMDtcbiAgICAgICAgcmVzdWx0LmV4dGVudCA9IHBhZ2VNYXJnaW5WYWx1ZSAtIGJvcmRlckFuZFBhZGRpbmc7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICByZXN1bHQubWFyZ2luSW5zaWRlID0gcmVzdWx0Lm1hcmdpbk91dHNpZGUgPVxuICAgICAgICAgIChwYWdlTWFyZ2luVmFsdWUgLSBib3JkZXJBbmRQYWRkaW5nIC0gKHJlc3VsdC5leHRlbnQgYXMgbnVtYmVyKSkgLyAyO1xuICAgICAgfVxuICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9XG4gICAgc3R5bGVbZXh0ZW50TmFtZV0gPSBuZXcgQ3NzLkV4cHIoXG4gICAgICBuZXcgRXhwcnMuTmF0aXZlKFxuICAgICAgICBzY29wZSxcbiAgICAgICAgZnVuY3Rpb24gKCkge1xuICAgICAgICAgIGNvbnN0IHZhbHVlID0gZ2V0Q29tcHV0ZWRWYWx1ZXModGhpcykuZXh0ZW50O1xuICAgICAgICAgIHJldHVybiB2YWx1ZSA9PT0gbnVsbCA/IDAgOiB2YWx1ZTtcbiAgICAgICAgfSxcbiAgICAgICAgZXh0ZW50TmFtZSxcbiAgICAgICksXG4gICAgKTtcbiAgICBzdHlsZVtgbWFyZ2luLSR7aW5zaWRlTmFtZX1gXSA9IG5ldyBDc3MuRXhwcihcbiAgICAgIG5ldyBFeHBycy5OYXRpdmUoXG4gICAgICAgIHNjb3BlLFxuICAgICAgICBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgY29uc3QgdmFsdWUgPSBnZXRDb21wdXRlZFZhbHVlcyh0aGlzKS5tYXJnaW5JbnNpZGU7XG4gICAgICAgICAgcmV0dXJuIHZhbHVlID09PSBudWxsID8gMCA6IHZhbHVlO1xuICAgICAgICB9LFxuICAgICAgICBgbWFyZ2luLSR7aW5zaWRlTmFtZX1gLFxuICAgICAgKSxcbiAgICApO1xuICAgIHN0eWxlW2BtYXJnaW4tJHtvdXRzaWRlTmFtZX1gXSA9IG5ldyBDc3MuRXhwcihcbiAgICAgIG5ldyBFeHBycy5OYXRpdmUoXG4gICAgICAgIHNjb3BlLFxuICAgICAgICBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgY29uc3QgdmFsdWUgPSBnZXRDb21wdXRlZFZhbHVlcyh0aGlzKS5tYXJnaW5PdXRzaWRlO1xuICAgICAgICAgIHJldHVybiB2YWx1ZSA9PT0gbnVsbCA/IDAgOiB2YWx1ZTtcbiAgICAgICAgfSxcbiAgICAgICAgYG1hcmdpbi0ke291dHNpZGVOYW1lfWAsXG4gICAgICApLFxuICAgICk7XG4gICAgaWYgKGluc2lkZU5hbWUgPT09IFwibGVmdFwiKSB7XG4gICAgICBzdHlsZVtcImxlZnRcIl0gPSBuZXcgQ3NzLkV4cHIoXG4gICAgICAgIEV4cHJzLmFkZChzY29wZSwgZGltLm1hcmdpbkxlZnQsIGRpbS5ib3JkZXJCb3hXaWR0aCksXG4gICAgICApO1xuICAgIH0gZWxzZSBpZiAoaW5zaWRlTmFtZSA9PT0gXCJ0b3BcIikge1xuICAgICAgc3R5bGVbXCJ0b3BcIl0gPSBuZXcgQ3NzLkV4cHIoXG4gICAgICAgIEV4cHJzLmFkZChzY29wZSwgZGltLm1hcmdpblRvcCwgZGltLmJvcmRlckJveEhlaWdodCksXG4gICAgICApO1xuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAgKiBAb3ZlcnJpZGVcbiAgICovXG4gIGluaXRIb3Jpem9udGFsKCk6IHZvaWQge1xuICAgIGNvbnN0IHBhZ2VSdWxlTWFzdGVySW5zdGFuY2UgPSB0aGlzXG4gICAgICAucGFyZW50SW5zdGFuY2UgYXMgUGFnZVJ1bGVNYXN0ZXJJbnN0YW5jZTtcbiAgICBjb25zdCBkaW0gPSBwYWdlUnVsZU1hc3Rlckluc3RhbmNlLnBhZ2VBcmVhRGltZW5zaW9uO1xuICAgIGlmICh0aGlzLmJveEluZm8uaXNJbkxlZnRDb2x1bW4pIHtcbiAgICAgIHRoaXMucG9zaXRpb25BbmRTaXplQWxvbmdGaXhlZERpbWVuc2lvbihcbiAgICAgICAgeyBpbnNpZGU6IFwicmlnaHRcIiwgb3V0c2lkZTogXCJsZWZ0XCIsIGV4dGVudDogXCJ3aWR0aFwiIH0sXG4gICAgICAgIGRpbSxcbiAgICAgICk7XG4gICAgfSBlbHNlIGlmICh0aGlzLmJveEluZm8uaXNJblJpZ2h0Q29sdW1uKSB7XG4gICAgICB0aGlzLnBvc2l0aW9uQW5kU2l6ZUFsb25nRml4ZWREaW1lbnNpb24oXG4gICAgICAgIHsgaW5zaWRlOiBcImxlZnRcIiwgb3V0c2lkZTogXCJyaWdodFwiLCBleHRlbnQ6IFwid2lkdGhcIiB9LFxuICAgICAgICBkaW0sXG4gICAgICApO1xuICAgIH0gZWxzZSB7XG4gICAgICB0aGlzLnBvc2l0aW9uQWxvbmdWYXJpYWJsZURpbWVuc2lvbihcbiAgICAgICAgeyBzdGFydDogXCJsZWZ0XCIsIGVuZDogXCJyaWdodFwiLCBleHRlbnQ6IFwid2lkdGhcIiB9LFxuICAgICAgICBkaW0sXG4gICAgICApO1xuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAgKiBAb3ZlcnJpZGVcbiAgICovXG4gIGluaXRWZXJ0aWNhbCgpOiB2b2lkIHtcbiAgICBjb25zdCBwYWdlUnVsZU1hc3Rlckluc3RhbmNlID0gdGhpc1xuICAgICAgLnBhcmVudEluc3RhbmNlIGFzIFBhZ2VSdWxlTWFzdGVySW5zdGFuY2U7XG4gICAgY29uc3QgZGltID0gcGFnZVJ1bGVNYXN0ZXJJbnN0YW5jZS5wYWdlQXJlYURpbWVuc2lvbjtcbiAgICBpZiAodGhpcy5ib3hJbmZvLmlzSW5Ub3BSb3cpIHtcbiAgICAgIHRoaXMucG9zaXRpb25BbmRTaXplQWxvbmdGaXhlZERpbWVuc2lvbihcbiAgICAgICAgeyBpbnNpZGU6IFwiYm90dG9tXCIsIG91dHNpZGU6IFwidG9wXCIsIGV4dGVudDogXCJoZWlnaHRcIiB9LFxuICAgICAgICBkaW0sXG4gICAgICApO1xuICAgIH0gZWxzZSBpZiAodGhpcy5ib3hJbmZvLmlzSW5Cb3R0b21Sb3cpIHtcbiAgICAgIHRoaXMucG9zaXRpb25BbmRTaXplQWxvbmdGaXhlZERpbWVuc2lvbihcbiAgICAgICAgeyBpbnNpZGU6IFwidG9wXCIsIG91dHNpZGU6IFwiYm90dG9tXCIsIGV4dGVudDogXCJoZWlnaHRcIiB9LFxuICAgICAgICBkaW0sXG4gICAgICApO1xuICAgIH0gZWxzZSB7XG4gICAgICB0aGlzLnBvc2l0aW9uQWxvbmdWYXJpYWJsZURpbWVuc2lvbihcbiAgICAgICAgeyBzdGFydDogXCJ0b3BcIiwgZW5kOiBcImJvdHRvbVwiLCBleHRlbnQ6IFwiaGVpZ2h0XCIgfSxcbiAgICAgICAgZGltLFxuICAgICAgKTtcbiAgICB9XG4gIH1cblxuICAvKipcbiAgICogQG92ZXJyaWRlXG4gICAqL1xuICBmaW5pc2hDb250YWluZXIoXG4gICAgY29udGV4dDogRXhwcnMuQ29udGV4dCxcbiAgICBjb250YWluZXI6IFZ0cmVlLkNvbnRhaW5lcixcbiAgICBwYWdlOiBWdHJlZS5QYWdlLFxuICAgIGNvbHVtbjogVnRyZWUuQ29udGFpbmVyLFxuICAgIGNvbHVtbkNvdW50OiBudW1iZXIsXG4gICAgY2xpZW50TGF5b3V0OiBWdHJlZS5DbGllbnRMYXlvdXQsXG4gICAgZG9jRmFjZXM6IEZvbnQuRG9jdW1lbnRGYWNlcyxcbiAgKTogdm9pZCB7XG4gICAgc3VwZXIuZmluaXNoQ29udGFpbmVyKFxuICAgICAgY29udGV4dCxcbiAgICAgIGNvbnRhaW5lcixcbiAgICAgIHBhZ2UsXG4gICAgICBjb2x1bW4sXG4gICAgICBjb2x1bW5Db3VudCxcbiAgICAgIGNsaWVudExheW91dCxcbiAgICAgIGRvY0ZhY2VzLFxuICAgICk7XG5cbiAgICAvLyBmaW5pc2hDb250YWluZXIgaXMgY2FsbGVkIG9ubHkgd2hlbiB0aGUgbWFyZ2luIGJveCBpcyBnZW5lcmF0ZWQuXG4gICAgLy8gSW4gdGhpcyBjYXNlLCBzdG9yZSB0aGUgZ2VuZXJhdGVkIGNvbnRhaW5lciBmb3IgdGhlIG1hcmdpbiBib3ggaW4gdGhlXG4gICAgLy8gcGFnZSBvYmplY3QuIChleGNlcHQgd2hlbiBpdCBpcyBhIGNvcm5lciBtYXJnaW4gYm94LCBiZWNhdXNlIHNpemUgb2YgYVxuICAgIC8vIGNvcm5lciBtYXJnaW4gYm94IGRvZXMgbm90IG5lZWQgdG8gYmUgYWRqdXN0ZWQgYWZ0ZXIgdGhlIGxheW91dClcbiAgICBjb25zdCBtYXJnaW5Cb3hlcyA9IHBhZ2UubWFyZ2luQm94ZXM7XG4gICAgY29uc3QgbmFtZSA9ICh0aGlzLnBhZ2VCb3ggYXMgYW55KS5tYXJnaW5Cb3hOYW1lO1xuICAgIGNvbnN0IGJveEluZm8gPSB0aGlzLmJveEluZm87XG4gICAgaWYgKCFib3hJbmZvLmlzSW5MZWZ0Q29sdW1uICYmICFib3hJbmZvLmlzSW5SaWdodENvbHVtbikge1xuICAgICAgaWYgKGJveEluZm8uaXNJblRvcFJvdykge1xuICAgICAgICBtYXJnaW5Cb3hlcy50b3BbbmFtZV0gPSBjb250YWluZXI7XG4gICAgICB9IGVsc2UgaWYgKGJveEluZm8uaXNJbkJvdHRvbVJvdykge1xuICAgICAgICBtYXJnaW5Cb3hlcy5ib3R0b21bbmFtZV0gPSBjb250YWluZXI7XG4gICAgICB9XG4gICAgfSBlbHNlIGlmICghYm94SW5mby5pc0luVG9wUm93ICYmICFib3hJbmZvLmlzSW5Cb3R0b21Sb3cpIHtcbiAgICAgIGlmIChib3hJbmZvLmlzSW5MZWZ0Q29sdW1uKSB7XG4gICAgICAgIG1hcmdpbkJveGVzLmxlZnRbbmFtZV0gPSBjb250YWluZXI7XG4gICAgICB9IGVsc2UgaWYgKGJveEluZm8uaXNJblJpZ2h0Q29sdW1uKSB7XG4gICAgICAgIG1hcmdpbkJveGVzLnJpZ2h0W25hbWVdID0gY29udGFpbmVyO1xuICAgICAgfVxuICAgIH1cbiAgfVxufVxuXG4vKipcbiAqIER5bmFtaWNhbGx5IGdlbmVyYXRlIGFuZCBtYW5hZ2UgcGFnZSBtYXN0ZXJzIGNvcnJlc3BvbmRpbmcgdG8gcGFnZSBhdC1ydWxlcy5cbiAqL1xuZXhwb3J0IGNsYXNzIFBhZ2VNYW5hZ2VyIHtcbiAgcHJpdmF0ZSBwYWdlTWFzdGVyQ2FjaGU6IGFueSA9IHt9IGFzIHtcbiAgICBba2V5OiBzdHJpbmddOiBQYWdlTWFzdGVyLlBhZ2VNYXN0ZXJJbnN0YW5jZTtcbiAgfTtcblxuICBjb25zdHJ1Y3RvcihcbiAgICBwcml2YXRlIHJlYWRvbmx5IGNhc2NhZGVJbnN0YW5jZTogQ3NzQ2FzY2FkZS5DYXNjYWRlSW5zdGFuY2UsXG4gICAgcHJpdmF0ZSByZWFkb25seSBwYWdlU2NvcGU6IEV4cHJzLkxleGljYWxTY29wZSxcbiAgICBwcml2YXRlIHJlYWRvbmx5IHJvb3RQYWdlQm94SW5zdGFuY2U6IFBhZ2VNYXN0ZXIuUm9vdFBhZ2VCb3hJbnN0YW5jZSxcbiAgICBwcml2YXRlIHJlYWRvbmx5IGNvbnRleHQ6IEV4cHJzLkNvbnRleHQsXG4gICAgcHJpdmF0ZSByZWFkb25seSBkb2NFbGVtZW50U3R5bGU6IENzc0Nhc2NhZGUuRWxlbWVudFN0eWxlLFxuICApIHtcbiAgICB0aGlzLmRlZmluZVBhZ2VQcm9ncmVzc2lvbigpO1xuICB9XG5cbiAgLyoqXG4gICAqIERldGVybWluZSB0aGUgcGFnZSBwcm9ncmVzc2lvbiBhbmQgZGVmaW5lIGxlZnQvcmlnaHQvcmVjdG8vdmVyc28gcGFnZXMuXG4gICAqL1xuICBwcml2YXRlIGRlZmluZVBhZ2VQcm9ncmVzc2lvbigpIHtcbiAgICAvLyBJZiBhIHBhZ2UgYnJlYWsgaXMgZm9yY2VkIGJlZm9yZSB0aGUgcm9vdCBlbGVtZW50LCByZWN0by92ZXJzbyBwYWdlc1xuICAgIC8vIGFyZSBubyBsb25nZXIgb2RkL2V2ZW4gcGFnZXMuIGxlZnQvcmlnaHQgYXJlIHJldmVyc2VkIHRvby5cbiAgICBjb25zdCBzY29wZSA9IHRoaXMucGFnZVNjb3BlO1xuICAgIGNvbnN0IHN0eWxlSW5zdGFuY2U6IGFueSAvKiBPcHMuU3R5bGVJbnN0YW5jZSAqLyA9IHRoaXMuY29udGV4dDtcbiAgICBjb25zdCBpc1ZlcnNvRmlyc3RQYWdlID0gc3R5bGVJbnN0YW5jZS5pc1ZlcnNvRmlyc3RQYWdlO1xuICAgIGNvbnN0IHBhZ2VOdW1iZXIgPSBuZXcgRXhwcnMuTmFtZWQoc2NvcGUsIFwicGFnZS1udW1iZXJcIik7XG4gICAgY29uc3QgaXNWZXJzb1BhZ2UgPSBuZXcgRXhwcnMuRXEoXG4gICAgICBzY29wZSxcbiAgICAgIG5ldyBFeHBycy5Nb2R1bG8oc2NvcGUsIHBhZ2VOdW1iZXIsIG5ldyBFeHBycy5Db25zdChzY29wZSwgMikpLFxuICAgICAgaXNWZXJzb0ZpcnN0UGFnZSA/IHNjb3BlLm9uZSA6IHNjb3BlLnplcm8sXG4gICAgKTtcbiAgICBzY29wZS5kZWZpbmVOYW1lKFwicmVjdG8tcGFnZVwiLCBuZXcgRXhwcnMuTm90KHNjb3BlLCBpc1ZlcnNvUGFnZSkpO1xuICAgIHNjb3BlLmRlZmluZU5hbWUoXCJ2ZXJzby1wYWdlXCIsIGlzVmVyc29QYWdlKTtcbiAgICBjb25zdCBwYWdlUHJvZ3Jlc3Npb24gPVxuICAgICAgc3R5bGVJbnN0YW5jZS5wYWdlUHJvZ3Jlc3Npb24gfHxcbiAgICAgIHJlc29sdmVQYWdlUHJvZ3Jlc3Npb24odGhpcy5kb2NFbGVtZW50U3R5bGUpO1xuICAgIGlmIChwYWdlUHJvZ3Jlc3Npb24gPT09IENvbnN0YW50cy5QYWdlUHJvZ3Jlc3Npb24uTFRSKSB7XG4gICAgICBzY29wZS5kZWZpbmVOYW1lKFwibGVmdC1wYWdlXCIsIGlzVmVyc29QYWdlKTtcbiAgICAgIHNjb3BlLmRlZmluZU5hbWUoXCJyaWdodC1wYWdlXCIsIG5ldyBFeHBycy5Ob3Qoc2NvcGUsIGlzVmVyc29QYWdlKSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHNjb3BlLmRlZmluZU5hbWUoXCJsZWZ0LXBhZ2VcIiwgbmV3IEV4cHJzLk5vdChzY29wZSwgaXNWZXJzb1BhZ2UpKTtcbiAgICAgIHNjb3BlLmRlZmluZU5hbWUoXCJyaWdodC1wYWdlXCIsIGlzVmVyc29QYWdlKTtcbiAgICB9XG4gIH1cblxuICAvKipcbiAgICogR2V0IGNhc2NhZGVkIHBhZ2Ugc3R5bGUgc3BlY2lmaWVkIGluIHBhZ2UgY29udGV4dCBmb3IgdGhlIGN1cnJlbnQgcGFnZS5cbiAgICovXG4gIGdldENhc2NhZGVkUGFnZVN0eWxlKCk6IENzc0Nhc2NhZGUuRWxlbWVudFN0eWxlIHtcbiAgICBjb25zdCBzdHlsZSA9IHt9IGFzIENzc0Nhc2NhZGUuRWxlbWVudFN0eWxlO1xuICAgIHRoaXMuY2FzY2FkZUluc3RhbmNlLnB1c2hSdWxlKFtdLCBcIlwiLCBzdHlsZSk7XG4gICAgdGhpcy5jYXNjYWRlSW5zdGFuY2UucG9wUnVsZSgpO1xuICAgIHJldHVybiBzdHlsZTtcbiAgfVxuXG4gIC8qKlxuICAgKiBSZXR1cm4gYSBQYWdlTWFzdGVySW5zdGFuY2Ugd2l0aCBwYWdlIHJ1bGVzIGFwcGxpZWQuIFJldHVybiBhIGNhY2hlZFxuICAgKiBpbnN0YW5jZSBpZiB0aGVyZSBhbHJlYWR5IGV4aXN0cyBvbmUgd2l0aCB0aGUgc2FtZSBzdHlsZXMuXG4gICAqIEBwYXJhbSBwYWdlTWFzdGVySW5zdGFuY2UgVGhlIG9yaWdpbmFsIHBhZ2UgbWFzdGVyIGluc3RhbmNlLlxuICAgKiBAcGFyYW0gY2FzY2FkZWRQYWdlU3R5bGUgQ2FzY2FkZWQgcGFnZSBzdHlsZSBzcGVjaWZpZWQgaW4gcGFnZSBjb250ZXh0LlxuICAgKi9cbiAgZ2V0UGFnZVJ1bGVQYWdlTWFzdGVyKFxuICAgIHBhZ2VNYXN0ZXJJbnN0YW5jZTogUGFnZU1hc3Rlci5QYWdlTWFzdGVySW5zdGFuY2UsXG4gICAgY2FzY2FkZWRQYWdlU3R5bGU6IENzc0Nhc2NhZGUuRWxlbWVudFN0eWxlLFxuICApOiBQYWdlTWFzdGVyLlBhZ2VNYXN0ZXJJbnN0YW5jZSB7XG4gICAgY29uc3QgcGFnZU1hc3RlciA9IHBhZ2VNYXN0ZXJJbnN0YW5jZS5wYWdlQm94IGFzIFBhZ2VNYXN0ZXIuUGFnZU1hc3RlcjtcblxuICAgIC8vIElmIG5vIHByb3BlcmllcyBhcmUgc3BlY2lmaWVkIGluIEBwYWdlIHJ1bGVzLCB1c2UgdGhlIG9yaWdpbmFsIHBhZ2VcbiAgICAvLyBtYXN0ZXIuXG4gICAgaWYgKE9iamVjdC5rZXlzKGNhc2NhZGVkUGFnZVN0eWxlKS5sZW5ndGggPT09IDApIHtcbiAgICAgIHBhZ2VNYXN0ZXIucmVzZXRTY29wZSgpO1xuICAgICAgcmV0dXJuIHBhZ2VNYXN0ZXJJbnN0YW5jZTtcbiAgICB9XG4gICAgY29uc3Qga2V5ID0gdGhpcy5tYWtlQ2FjaGVLZXkoY2FzY2FkZWRQYWdlU3R5bGUsIHBhZ2VNYXN0ZXIpO1xuICAgIGxldCBhcHBsaWVkID0gdGhpcy5wYWdlTWFzdGVyQ2FjaGVba2V5XTtcbiAgICBpZiAoIWFwcGxpZWQpIHtcbiAgICAgIGlmIChwYWdlTWFzdGVyLnBzZXVkb05hbWUgPT09IFBhZ2VNYXN0ZXIudXNlckFnZW50UGFnZU1hc3RlclBzZXVkbykge1xuICAgICAgICAvLyBJZiB0aGUgcGFzc2VkIHBhZ2UgbWFzdGVyIGlzIGEgVUEgcGFnZSBtYXN0ZXIsXG4gICAgICAgIC8vIGlnbm9yZSBpdCBhbmQgZ2VuZXJhdGUgYSBuZXcgcGFnZSBtYXN0ZXIgZnJvbSBAcGFnZSBydWxlcy5cbiAgICAgICAgYXBwbGllZCA9IHRoaXMuZ2VuZXJhdGVQYWdlUnVsZU1hc3RlcihjYXNjYWRlZFBhZ2VTdHlsZSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICAvLyBPdGhlcndpc2UgY2FzY2FkZSBzb21lIHByb3BlcnRpZXMgZnJvbSBAcGFnZSBydWxlcyB0byB0aGUgcGFnZVxuICAgICAgICAvLyBtYXN0ZXIuXG4gICAgICAgIGFwcGxpZWQgPSB0aGlzLmdlbmVyYXRlQ2FzY2FkZWRQYWdlTWFzdGVyKFxuICAgICAgICAgIGNhc2NhZGVkUGFnZVN0eWxlLFxuICAgICAgICAgIHBhZ2VNYXN0ZXIsXG4gICAgICAgICk7XG4gICAgICB9XG4gICAgICB0aGlzLnBhZ2VNYXN0ZXJDYWNoZVtrZXldID0gYXBwbGllZDtcbiAgICB9XG4gICAgYXBwbGllZC5wYWdlQm94LnJlc2V0U2NvcGUoKTtcbiAgICByZXR1cm4gYXBwbGllZDtcbiAgfVxuXG4gIC8qKlxuICAgKiBHZW5lcmF0ZSBhIGNhY2hlIGtleSBmcm9tIHRoZSBzcGVjaWZpZWQgc3R5bGVzIGFuZCB0aGUgb3JpZ2luYWwgcGFnZSBtYXN0ZXJcbiAgICoga2V5LlxuICAgKi9cbiAgcHJpdmF0ZSBtYWtlQ2FjaGVLZXkoXG4gICAgc3R5bGU6IENzc0Nhc2NhZGUuRWxlbWVudFN0eWxlLFxuICAgIHBhZ2VNYXN0ZXI6IFBhZ2VNYXN0ZXIuUGFnZU1hc3RlcixcbiAgKTogc3RyaW5nIHtcbiAgICBjb25zdCBwcm9wc1N0ciA9IHRoaXMubWFrZUNhc2NhZGVWYWx1ZU9iamVjdEtleShzdHlsZSk7XG4gICAgcmV0dXJuIGAke3BhZ2VNYXN0ZXIua2V5fV4ke3Byb3BzU3RyfWA7XG4gIH1cblxuICBwcml2YXRlIG1ha2VDYXNjYWRlVmFsdWVPYmplY3RLZXkob2JqZWN0OiBDc3NDYXNjYWRlLkVsZW1lbnRTdHlsZSk6IHN0cmluZyB7XG4gICAgY29uc3QgcHJvcHMgPSBbXSBhcyBzdHJpbmdbXTtcbiAgICBmb3IgKGNvbnN0IHByb3AgaW4gb2JqZWN0KSB7XG4gICAgICBpZiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKG9iamVjdCwgcHJvcCkpIHtcbiAgICAgICAgY29uc3QgdmFsID0gb2JqZWN0W3Byb3BdO1xuICAgICAgICBsZXQgc3RyOiBzdHJpbmc7XG4gICAgICAgIGlmICh2YWwgaW5zdGFuY2VvZiBDc3NDYXNjYWRlLkNhc2NhZGVWYWx1ZSkge1xuICAgICAgICAgIHN0ciA9IGAke3ZhbC52YWx1ZX1gO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHN0ciA9IHRoaXMubWFrZUNhc2NhZGVWYWx1ZU9iamVjdEtleSh2YWwpO1xuICAgICAgICB9XG4gICAgICAgIHByb3BzLnB1c2gocHJvcCArIHN0ciArICh2YWwucHJpb3JpdHkgfHwgXCJcIikpO1xuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gcHJvcHMuc29ydCgpLmpvaW4oXCJeXCIpO1xuICB9XG5cbiAgcHJpdmF0ZSBnZW5lcmF0ZVBhZ2VSdWxlTWFzdGVyKFxuICAgIHN0eWxlOiBDc3NDYXNjYWRlLkVsZW1lbnRTdHlsZSxcbiAgKTogUGFnZVJ1bGVNYXN0ZXJJbnN0YW5jZSB7XG4gICAgY29uc3QgcGFnZU1hc3RlciA9IG5ldyBQYWdlUnVsZU1hc3RlcihcbiAgICAgIHRoaXMucGFnZVNjb3BlLFxuICAgICAgdGhpcy5yb290UGFnZUJveEluc3RhbmNlLnBhZ2VCb3ggYXMgUGFnZU1hc3Rlci5Sb290UGFnZUJveCxcbiAgICAgIHN0eWxlLFxuICAgICk7XG4gICAgY29uc3QgcGFnZU1hc3Rlckluc3RhbmNlID0gcGFnZU1hc3Rlci5jcmVhdGVJbnN0YW5jZShcbiAgICAgIHRoaXMucm9vdFBhZ2VCb3hJbnN0YW5jZSxcbiAgICApO1xuXG4gICAgLy8gRG8gdGhlIHNhbWUgaW5pdGlhbGl6YXRpb24gYXMgaW4gT3BzLlN0eWxlSW5zdGFuY2UucHJvdG90eXBlLmluaXRcbiAgICBwYWdlTWFzdGVySW5zdGFuY2UuYXBwbHlDYXNjYWRlQW5kSW5pdChcbiAgICAgIHRoaXMuY2FzY2FkZUluc3RhbmNlLFxuICAgICAgdGhpcy5kb2NFbGVtZW50U3R5bGUsXG4gICAgKTtcbiAgICBwYWdlTWFzdGVySW5zdGFuY2UucmVzb2x2ZUF1dG9TaXppbmcodGhpcy5jb250ZXh0KTtcbiAgICByZXR1cm4gcGFnZU1hc3Rlckluc3RhbmNlO1xuICB9XG5cbiAgLyoqXG4gICAqIENhc2NhZGUgc29tZSBwcm9wZXJ0aWVzIGZyb20gYEBwYWdlYCBydWxlcyB0byBhIHBhZ2UgbWFzdGVyLlxuICAgKiBGb3Igbm93LCBvbmx5ICd3aWR0aCcgYW5kICdoZWlnaHQnIHJlc29sdmVkIGZyb20gJ3NpemUnIHZhbHVlIGFyZSBjYXNjYWRlZC5cbiAgICogQHBhcmFtIHN0eWxlIENhc2NhZGVkIHN0eWxlIGluIHRoZSBwYWdlIGNvbnRleHRcbiAgICogQHBhcmFtIHBhZ2VNYXN0ZXIgVGhlIG9yaWdpbmFsIHBhZ2UgbWFzdGVyXG4gICAqL1xuICBwcml2YXRlIGdlbmVyYXRlQ2FzY2FkZWRQYWdlTWFzdGVyKFxuICAgIHN0eWxlOiBDc3NDYXNjYWRlLkVsZW1lbnRTdHlsZSxcbiAgICBwYWdlTWFzdGVyOiBQYWdlTWFzdGVyLlBhZ2VNYXN0ZXIsXG4gICk6IFBhZ2VNYXN0ZXIuUGFnZU1hc3Rlckluc3RhbmNlIHtcbiAgICBjb25zdCBuZXdQYWdlTWFzdGVyID0gcGFnZU1hc3Rlci5jbG9uZSh7XG4gICAgICBwc2V1ZG9OYW1lOiBwYWdlUnVsZU1hc3RlclBzZXVkb05hbWUsXG4gICAgfSk7XG4gICAgY29uc3QgcGFnZU1hc3RlclN0eWxlID0gbmV3UGFnZU1hc3Rlci5zcGVjaWZpZWQ7XG4gICAgY29uc3Qgc2l6ZSA9IHN0eWxlW1wic2l6ZVwiXTtcbiAgICBpZiAoc2l6ZSkge1xuICAgICAgY29uc3QgcGFnZVNpemUgPSByZXNvbHZlUGFnZVNpemVBbmRCbGVlZChzdHlsZSBhcyBhbnkpO1xuICAgICAgY29uc3QgcHJpb3JpdHkgPSBzaXplLnByaW9yaXR5O1xuICAgICAgcGFnZU1hc3RlclN0eWxlW1wid2lkdGhcIl0gPSBDc3NDYXNjYWRlLmNhc2NhZGVWYWx1ZXMoXG4gICAgICAgIHRoaXMuY29udGV4dCxcbiAgICAgICAgcGFnZU1hc3RlclN0eWxlW1wid2lkdGhcIl0sXG4gICAgICAgIG5ldyBDc3NDYXNjYWRlLkNhc2NhZGVWYWx1ZShwYWdlU2l6ZS53aWR0aCwgcHJpb3JpdHkpLFxuICAgICAgKTtcbiAgICAgIHBhZ2VNYXN0ZXJTdHlsZVtcImhlaWdodFwiXSA9IENzc0Nhc2NhZGUuY2FzY2FkZVZhbHVlcyhcbiAgICAgICAgdGhpcy5jb250ZXh0LFxuICAgICAgICBwYWdlTWFzdGVyU3R5bGVbXCJoZWlnaHRcIl0sXG4gICAgICAgIG5ldyBDc3NDYXNjYWRlLkNhc2NhZGVWYWx1ZShwYWdlU2l6ZS5oZWlnaHQsIHByaW9yaXR5KSxcbiAgICAgICk7XG4gICAgfVxuXG4gICAgLy8gVHJhbnNmZXIgY291bnRlciBwcm9wZXJ0aWVzIHRvIHRoZSBwYWdlIHN0eWxlIHNvIHRoYXQgdGhlc2Ugc3BlY2lmaWVkIGluXG4gICAgLy8gdGhlIHBhZ2UgbWFzdGVyIGFyZSBhbHNvIGVmZmVjdGl2ZS4gTm90ZSB0aGF0IHRoZXNlIHZhbHVlcyAoaWYgc3BlY2lmaWVkKVxuICAgIC8vIGFsd2F5cyBvdmVycmlkZSB2YWx1ZXMgaW4gcGFnZSBjb250ZXh0cy5cbiAgICBbXCJjb3VudGVyLXJlc2V0XCIsIFwiY291bnRlci1pbmNyZW1lbnRcIl0uZm9yRWFjaCgobmFtZSkgPT4ge1xuICAgICAgaWYgKHBhZ2VNYXN0ZXJTdHlsZVtuYW1lXSkge1xuICAgICAgICBzdHlsZVtuYW1lXSA9IHBhZ2VNYXN0ZXJTdHlsZVtuYW1lXTtcbiAgICAgIH1cbiAgICB9KTtcbiAgICBjb25zdCBwYWdlTWFzdGVySW5zdGFuY2UgPSBuZXdQYWdlTWFzdGVyLmNyZWF0ZUluc3RhbmNlKFxuICAgICAgdGhpcy5yb290UGFnZUJveEluc3RhbmNlLFxuICAgICkgYXMgUGFnZU1hc3Rlci5QYWdlTWFzdGVySW5zdGFuY2U7XG5cbiAgICAvLyBEbyB0aGUgc2FtZSBpbml0aWFsaXphdGlvbiBhcyBpbiBPcHMuU3R5bGVJbnN0YW5jZS5wcm90b3R5cGUuaW5pdFxuICAgIHBhZ2VNYXN0ZXJJbnN0YW5jZS5hcHBseUNhc2NhZGVBbmRJbml0KFxuICAgICAgdGhpcy5jYXNjYWRlSW5zdGFuY2UsXG4gICAgICB0aGlzLmRvY0VsZW1lbnRTdHlsZSxcbiAgICApO1xuICAgIHBhZ2VNYXN0ZXJJbnN0YW5jZS5yZXNvbHZlQXV0b1NpemluZyh0aGlzLmNvbnRleHQpO1xuICAgIHJldHVybiBwYWdlTWFzdGVySW5zdGFuY2U7XG4gIH1cbn1cblxuZXhwb3J0IGNsYXNzIENoZWNrUGFnZVR5cGVBY3Rpb24gZXh0ZW5kcyBDc3NDYXNjYWRlLkNoYWluZWRBY3Rpb24ge1xuICBjb25zdHJ1Y3RvcihwdWJsaWMgcmVhZG9ubHkgcGFnZVR5cGU6IHN0cmluZykge1xuICAgIHN1cGVyKCk7XG4gIH1cblxuICAvKipcbiAgICogQG92ZXJyaWRlXG4gICAqL1xuICBhcHBseShjYXNjYWRlSW5zdGFuY2U6IENzc0Nhc2NhZGUuQ2FzY2FkZUluc3RhbmNlKTogdm9pZCB7XG4gICAgaWYgKGNhc2NhZGVJbnN0YW5jZS5jdXJyZW50UGFnZVR5cGUgPT09IHRoaXMucGFnZVR5cGUpIHtcbiAgICAgIHRoaXMuY2hhaW5lZC5hcHBseShjYXNjYWRlSW5zdGFuY2UpO1xuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAgKiBAb3ZlcnJpZGVcbiAgICovXG4gIGdldFByaW9yaXR5KCk6IG51bWJlciB7XG4gICAgcmV0dXJuIDM7XG4gIH1cblxuICAvKipcbiAgICogQG92ZXJyaWRlXG4gICAqL1xuICBtYWtlUHJpbWFyeShjYXNjYWRlOiBDc3NDYXNjYWRlLkNhc2NhZGUpOiBib29sZWFuIHtcbiAgICBpZiAodGhpcy5jaGFpbmVkKSB7XG4gICAgICBjYXNjYWRlLmluc2VydEluVGFibGUoY2FzY2FkZS5wYWdldHlwZXMsIHRoaXMucGFnZVR5cGUsIHRoaXMuY2hhaW5lZCk7XG4gICAgfVxuICAgIHJldHVybiB0cnVlO1xuICB9XG59XG5cbmV4cG9ydCBjbGFzcyBJc0ZpcnN0UGFnZUFjdGlvbiBleHRlbmRzIENzc0Nhc2NhZGUuQ2hhaW5lZEFjdGlvbiB7XG4gIGNvbnN0cnVjdG9yKHB1YmxpYyByZWFkb25seSBzY29wZTogRXhwcnMuTGV4aWNhbFNjb3BlKSB7XG4gICAgc3VwZXIoKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBAb3ZlcnJpZGVcbiAgICovXG4gIGFwcGx5KGNhc2NhZGVJbnN0YW5jZTogQ3NzQ2FzY2FkZS5DYXNjYWRlSW5zdGFuY2UpOiB2b2lkIHtcbiAgICBjb25zdCBwYWdlTnVtYmVyID0gbmV3IEV4cHJzLk5hbWVkKHRoaXMuc2NvcGUsIFwicGFnZS1udW1iZXJcIik7XG4gICAgaWYgKHBhZ2VOdW1iZXIuZXZhbHVhdGUoY2FzY2FkZUluc3RhbmNlLmNvbnRleHQpID09PSAxKSB7XG4gICAgICB0aGlzLmNoYWluZWQuYXBwbHkoY2FzY2FkZUluc3RhbmNlKTtcbiAgICB9XG4gIH1cblxuICAvKipcbiAgICogQG92ZXJyaWRlXG4gICAqL1xuICBnZXRQcmlvcml0eSgpOiBudW1iZXIge1xuICAgIHJldHVybiAyO1xuICB9XG59XG5cbmV4cG9ydCBjbGFzcyBJc0xlZnRQYWdlQWN0aW9uIGV4dGVuZHMgQ3NzQ2FzY2FkZS5DaGFpbmVkQWN0aW9uIHtcbiAgY29uc3RydWN0b3IocHVibGljIHJlYWRvbmx5IHNjb3BlOiBFeHBycy5MZXhpY2FsU2NvcGUpIHtcbiAgICBzdXBlcigpO1xuICB9XG5cbiAgLyoqXG4gICAqIEBvdmVycmlkZVxuICAgKi9cbiAgYXBwbHkoY2FzY2FkZUluc3RhbmNlOiBDc3NDYXNjYWRlLkNhc2NhZGVJbnN0YW5jZSk6IHZvaWQge1xuICAgIGNvbnN0IGxlZnRQYWdlID0gbmV3IEV4cHJzLk5hbWVkKHRoaXMuc2NvcGUsIFwibGVmdC1wYWdlXCIpO1xuICAgIGlmIChsZWZ0UGFnZS5ldmFsdWF0ZShjYXNjYWRlSW5zdGFuY2UuY29udGV4dCkpIHtcbiAgICAgIHRoaXMuY2hhaW5lZC5hcHBseShjYXNjYWRlSW5zdGFuY2UpO1xuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAgKiBAb3ZlcnJpZGVcbiAgICovXG4gIGdldFByaW9yaXR5KCk6IG51bWJlciB7XG4gICAgcmV0dXJuIDE7XG4gIH1cbn1cblxuZXhwb3J0IGNsYXNzIElzUmlnaHRQYWdlQWN0aW9uIGV4dGVuZHMgQ3NzQ2FzY2FkZS5DaGFpbmVkQWN0aW9uIHtcbiAgY29uc3RydWN0b3IocHVibGljIHJlYWRvbmx5IHNjb3BlOiBFeHBycy5MZXhpY2FsU2NvcGUpIHtcbiAgICBzdXBlcigpO1xuICB9XG5cbiAgLyoqXG4gICAqIEBvdmVycmlkZVxuICAgKi9cbiAgYXBwbHkoY2FzY2FkZUluc3RhbmNlOiBDc3NDYXNjYWRlLkNhc2NhZGVJbnN0YW5jZSk6IHZvaWQge1xuICAgIGNvbnN0IHJpZ2h0UGFnZSA9IG5ldyBFeHBycy5OYW1lZCh0aGlzLnNjb3BlLCBcInJpZ2h0LXBhZ2VcIik7XG4gICAgaWYgKHJpZ2h0UGFnZS5ldmFsdWF0ZShjYXNjYWRlSW5zdGFuY2UuY29udGV4dCkpIHtcbiAgICAgIHRoaXMuY2hhaW5lZC5hcHBseShjYXNjYWRlSW5zdGFuY2UpO1xuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAgKiBAb3ZlcnJpZGVcbiAgICovXG4gIGdldFByaW9yaXR5KCk6IG51bWJlciB7XG4gICAgcmV0dXJuIDE7XG4gIH1cbn1cblxuZXhwb3J0IGNsYXNzIElzUmVjdG9QYWdlQWN0aW9uIGV4dGVuZHMgQ3NzQ2FzY2FkZS5DaGFpbmVkQWN0aW9uIHtcbiAgY29uc3RydWN0b3IocHVibGljIHJlYWRvbmx5IHNjb3BlOiBFeHBycy5MZXhpY2FsU2NvcGUpIHtcbiAgICBzdXBlcigpO1xuICB9XG5cbiAgLyoqXG4gICAqIEBvdmVycmlkZVxuICAgKi9cbiAgYXBwbHkoY2FzY2FkZUluc3RhbmNlOiBDc3NDYXNjYWRlLkNhc2NhZGVJbnN0YW5jZSk6IHZvaWQge1xuICAgIGNvbnN0IHJlY3RvUGFnZSA9IG5ldyBFeHBycy5OYW1lZCh0aGlzLnNjb3BlLCBcInJlY3RvLXBhZ2VcIik7XG4gICAgaWYgKHJlY3RvUGFnZS5ldmFsdWF0ZShjYXNjYWRlSW5zdGFuY2UuY29udGV4dCkpIHtcbiAgICAgIHRoaXMuY2hhaW5lZC5hcHBseShjYXNjYWRlSW5zdGFuY2UpO1xuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAgKiBAb3ZlcnJpZGVcbiAgICovXG4gIGdldFByaW9yaXR5KCk6IG51bWJlciB7XG4gICAgcmV0dXJuIDE7XG4gIH1cbn1cblxuZXhwb3J0IGNsYXNzIElzVmVyc29QYWdlQWN0aW9uIGV4dGVuZHMgQ3NzQ2FzY2FkZS5DaGFpbmVkQWN0aW9uIHtcbiAgY29uc3RydWN0b3IocHVibGljIHJlYWRvbmx5IHNjb3BlOiBFeHBycy5MZXhpY2FsU2NvcGUpIHtcbiAgICBzdXBlcigpO1xuICB9XG5cbiAgLyoqXG4gICAqIEBvdmVycmlkZVxuICAgKi9cbiAgYXBwbHkoY2FzY2FkZUluc3RhbmNlOiBDc3NDYXNjYWRlLkNhc2NhZGVJbnN0YW5jZSk6IHZvaWQge1xuICAgIGNvbnN0IHZlcnNvUGFnZSA9IG5ldyBFeHBycy5OYW1lZCh0aGlzLnNjb3BlLCBcInZlcnNvLXBhZ2VcIik7XG4gICAgaWYgKHZlcnNvUGFnZS5ldmFsdWF0ZShjYXNjYWRlSW5zdGFuY2UuY29udGV4dCkpIHtcbiAgICAgIHRoaXMuY2hhaW5lZC5hcHBseShjYXNjYWRlSW5zdGFuY2UpO1xuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAgKiBAb3ZlcnJpZGVcbiAgICovXG4gIGdldFByaW9yaXR5KCk6IG51bWJlciB7XG4gICAgcmV0dXJuIDE7XG4gIH1cbn1cblxuZXhwb3J0IGNsYXNzIElzTnRoUGFnZUFjdGlvbiBleHRlbmRzIENzc0Nhc2NhZGUuSXNOdGhBY3Rpb24ge1xuICBjb25zdHJ1Y3RvcihcbiAgICBwdWJsaWMgcmVhZG9ubHkgc2NvcGU6IEV4cHJzLkxleGljYWxTY29wZSxcbiAgICBwdWJsaWMgcmVhZG9ubHkgYTogbnVtYmVyLFxuICAgIHB1YmxpYyByZWFkb25seSBiOiBudW1iZXIsXG4gICkge1xuICAgIHN1cGVyKGEsIGIpO1xuICB9XG5cbiAgLyoqXG4gICAqIEBvdmVycmlkZVxuICAgKi9cbiAgYXBwbHkoY2FzY2FkZUluc3RhbmNlOiBDc3NDYXNjYWRlLkNhc2NhZGVJbnN0YW5jZSk6IHZvaWQge1xuICAgIGNvbnN0IHN0eWxlSW5zdGFuY2U6IGFueSAvKiBPcHMuU3R5bGVJbnN0YW5jZSAqLyA9IGNhc2NhZGVJbnN0YW5jZS5jb250ZXh0O1xuICAgIGxldCBwYWdlTnVtYmVyID0gc3R5bGVJbnN0YW5jZS5sYXlvdXRQb3NpdGlvbkF0UGFnZVN0YXJ0LnBhZ2U7XG4gICAgaWYgKHN0eWxlSW5zdGFuY2UuYmxhbmtQYWdlQXRTdGFydCkge1xuICAgICAgcGFnZU51bWJlci0tO1xuICAgIH1cbiAgICBpZiAocGFnZU51bWJlciAmJiB0aGlzLm1hdGNoQU5QbHVzQihwYWdlTnVtYmVyKSkge1xuICAgICAgdGhpcy5jaGFpbmVkLmFwcGx5KGNhc2NhZGVJbnN0YW5jZSk7XG4gICAgfVxuICB9XG5cbiAgLyoqXG4gICAqIEBvdmVycmlkZVxuICAgKi9cbiAgZ2V0UHJpb3JpdHkoKTogbnVtYmVyIHtcbiAgICByZXR1cm4gMjtcbiAgfVxufVxuXG4vKipcbiAqIEFjdGlvbiBhcHBseWluZyBhbiBhdC1wYWdlIHJ1bGVcbiAqL1xuZXhwb3J0IGNsYXNzIEFwcGx5UGFnZVJ1bGVBY3Rpb24gZXh0ZW5kcyBDc3NDYXNjYWRlLkFwcGx5UnVsZUFjdGlvbiB7XG4gIGNvbnN0cnVjdG9yKHN0eWxlOiBDc3NDYXNjYWRlLkVsZW1lbnRTdHlsZSwgc3BlY2lmaWNpdHk6IG51bWJlcikge1xuICAgIHN1cGVyKHN0eWxlLCBzcGVjaWZpY2l0eSwgbnVsbCwgbnVsbCwgbnVsbCk7XG4gIH1cblxuICAvKipcbiAgICogQG92ZXJyaWRlXG4gICAqL1xuICBhcHBseShjYXNjYWRlSW5zdGFuY2U6IENzc0Nhc2NhZGUuQ2FzY2FkZUluc3RhbmNlKTogdm9pZCB7XG4gICAgbWVyZ2VJblBhZ2VSdWxlKFxuICAgICAgY2FzY2FkZUluc3RhbmNlLmNvbnRleHQsXG4gICAgICBjYXNjYWRlSW5zdGFuY2UuY3VycmVudFN0eWxlLFxuICAgICAgdGhpcy5zdHlsZSxcbiAgICAgIHRoaXMuc3BlY2lmaWNpdHksXG4gICAgICBjYXNjYWRlSW5zdGFuY2UsXG4gICAgKTtcbiAgfVxufVxuXG4vKipcbiAqIE1lcmdlIHBhZ2Ugc3R5bGVzLCBpbmNsdWRpbmcgc3R5bGVzIHNwZWNpZmllZCBvbiBwYWdlLW1hcmdpbiBib3hlcyxcbiAqIGNvbnNpZGVyaW5nIHNwZWNpZmljaXR5LiBJbnRlbmRlZCB0byBiZSB1c2VkIGluIHBsYWNlIG9mXG4gKiBDc3NDYXNjYWRlLm1lcmdlSW4sIHdoaWNoIGlzIGZvciBlbGVtZW50IHN0eWxlcy5cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIG1lcmdlSW5QYWdlUnVsZShcbiAgY29udGV4dDogRXhwcnMuQ29udGV4dCxcbiAgdGFyZ2V0OiBDc3NDYXNjYWRlLkVsZW1lbnRTdHlsZSxcbiAgc3R5bGU6IENzc0Nhc2NhZGUuRWxlbWVudFN0eWxlLFxuICBzcGVjaWZpY2l0eTogbnVtYmVyLFxuICBjYXNjYWRlSW5zdGFuY2U6IENzc0Nhc2NhZGUuQ2FzY2FkZUluc3RhbmNlLFxuKTogdm9pZCB7XG4gIENzc0Nhc2NhZGUubWVyZ2VJbihjb250ZXh0LCB0YXJnZXQsIHN0eWxlLCBzcGVjaWZpY2l0eSwgbnVsbCwgbnVsbCwgbnVsbCk7XG4gIGNvbnN0IG1hcmdpbkJveGVzID0gc3R5bGVbbWFyZ2luQm94ZXNLZXldO1xuICBpZiAobWFyZ2luQm94ZXMpIHtcbiAgICBjb25zdCB0YXJnZXRNYXAgPSBDc3NDYXNjYWRlLmdldE11dGFibGVTdHlsZU1hcCh0YXJnZXQsIG1hcmdpbkJveGVzS2V5KTtcbiAgICBmb3IgKGNvbnN0IGJveE5hbWUgaW4gbWFyZ2luQm94ZXMpIHtcbiAgICAgIGlmIChtYXJnaW5Cb3hlcy5oYXNPd25Qcm9wZXJ0eShib3hOYW1lKSkge1xuICAgICAgICBsZXQgdGFyZ2V0Qm94ID0gdGFyZ2V0TWFwW2JveE5hbWVdO1xuICAgICAgICBpZiAoIXRhcmdldEJveCkge1xuICAgICAgICAgIHRhcmdldEJveCA9IHt9IGFzIENzc0Nhc2NhZGUuRWxlbWVudFN0eWxlO1xuICAgICAgICAgIHRhcmdldE1hcFtib3hOYW1lXSA9IHRhcmdldEJveDtcbiAgICAgICAgfVxuICAgICAgICBDc3NDYXNjYWRlLm1lcmdlSW4oXG4gICAgICAgICAgY29udGV4dCxcbiAgICAgICAgICB0YXJnZXRCb3gsXG4gICAgICAgICAgbWFyZ2luQm94ZXNbYm94TmFtZV0sXG4gICAgICAgICAgc3BlY2lmaWNpdHksXG4gICAgICAgICAgbnVsbCxcbiAgICAgICAgICBudWxsLFxuICAgICAgICAgIG51bGwsXG4gICAgICAgICk7XG4gICAgICB9XG4gICAgfVxuICB9XG59XG5cbi8qKlxuICogUGFyc2VySGFuZGxlciBmb3IgYEBwYWdlYCBydWxlcy4gSXQgaGFuZGxlcyBwcm9wZXJ0aWVzIHNwZWNpZmllZCB3aXRoIHBhZ2VcbiAqIGNvbnRleHRzLiBJdCBhbHNvIGRvZXMgYmFzaWMgY2FzY2FkaW5nICh3aGljaCBjYW4gYmUgZG9uZSB3aXRob3V0IGluZm9ybWF0aW9uXG4gKiBvdGhlciB0aGFuIHRoZSBwYWdlIHJ1bGVzIHRoZW1zZWx2ZXMpIGFuZCBzdG9yZXMgdGhlIHJlc3VsdCBpbiBgcGFnZVByb3BzYFxuICogb2JqZWN0IGFzIGEgbWFwIGZyb20gcGFnZSBzZWxlY3RvcnMgdG8gc2V0cyBvZiBwcm9wZXJ0aWVzLiBUaGlzIHJlc3VsdCBpc1xuICogbGF0ZXIgdXNlZCBmb3IgYWRkaW5nIGBAcGFnZWAgcnVsZXMgdG8gdGhlIHJlYWwgRE9NLCB3aGljaCBhcmUgdGhlbiB1c2VkIGJ5XG4gKiB0aGUgUERGIHJlbmRlcmVyIChDaHJvbWl1bSkgdG8gZGV0ZXJtaW5lIHBhZ2Ugc2l6ZXMuXG4gKi9cbmV4cG9ydCBjbGFzcyBQYWdlUGFyc2VySGFuZGxlclxuICBleHRlbmRzIENzc0Nhc2NhZGUuQ2FzY2FkZVBhcnNlckhhbmRsZXJcbiAgaW1wbGVtZW50cyBDc3NWYWxpZGF0b3IuUHJvcGVydHlSZWNlaXZlciB7XG4gIHByaXZhdGUgY3VycmVudFBhZ2VTZWxlY3RvcnM6IHtcbiAgICBzZWxlY3RvcnM6IHN0cmluZ1tdIHwgbnVsbDtcbiAgICBzcGVjaWZpY2l0eTogbnVtYmVyO1xuICB9W10gPSBbXTtcbiAgcHJpdmF0ZSBjdXJyZW50TmFtZWRQYWdlU2VsZWN0b3I6IHN0cmluZyA9IFwiXCI7XG4gIHByaXZhdGUgY3VycmVudFBzZXVkb1BhZ2VDbGFzc1NlbGVjdG9yczogc3RyaW5nW10gPSBbXTtcblxuICBjb25zdHJ1Y3RvcihcbiAgICBzY29wZTogRXhwcnMuTGV4aWNhbFNjb3BlLFxuICAgIG93bmVyOiBDc3NQYXJzZXIuRGlzcGF0Y2hQYXJzZXJIYW5kbGVyLFxuICAgIHBhcmVudDogQ3NzQ2FzY2FkZS5DYXNjYWRlUGFyc2VySGFuZGxlcixcbiAgICB2YWxpZGF0b3JTZXQ6IENzc1ZhbGlkYXRvci5WYWxpZGF0b3JTZXQsXG4gICAgcHJpdmF0ZSByZWFkb25seSBwYWdlUHJvcHM6IHsgW2tleTogc3RyaW5nXTogQ3NzQ2FzY2FkZS5FbGVtZW50U3R5bGUgfSxcbiAgKSB7XG4gICAgc3VwZXIoc2NvcGUsIG93bmVyLCBudWxsLCBwYXJlbnQsIG51bGwsIHZhbGlkYXRvclNldCwgZmFsc2UpO1xuICB9XG5cbiAgLyoqXG4gICAqIEBvdmVycmlkZVxuICAgKi9cbiAgc3RhcnRQYWdlUnVsZSgpOiB2b2lkIHtcbiAgICB0aGlzLnN0YXJ0U2VsZWN0b3JSdWxlKCk7XG4gIH1cblxuICAvKipcbiAgICogQG92ZXJyaWRlXG4gICAqL1xuICB0YWdTZWxlY3Rvcihuczogc3RyaW5nIHwgbnVsbCwgbmFtZTogc3RyaW5nIHwgbnVsbCk6IHZvaWQge1xuICAgIEFzc2VydHMuYXNzZXJ0KG5hbWUpO1xuICAgIHRoaXMuY3VycmVudE5hbWVkUGFnZVNlbGVjdG9yID0gbmFtZTtcbiAgICBpZiAobmFtZSkge1xuICAgICAgdGhpcy5jaGFpbi5wdXNoKG5ldyBDaGVja1BhZ2VUeXBlQWN0aW9uKG5hbWUpKTtcbiAgICAgIHRoaXMuc3BlY2lmaWNpdHkgKz0gNjU1MzY7XG4gICAgfVxuICB9XG5cbiAgLyoqXG4gICAqIEBvdmVycmlkZVxuICAgKi9cbiAgcHNldWRvY2xhc3NTZWxlY3RvcihuYW1lOiBzdHJpbmcsIHBhcmFtczogKG51bWJlciB8IHN0cmluZylbXSk6IHZvaWQge1xuICAgIG5hbWUgPSBuYW1lLnRvTG93ZXJDYXNlKCk7XG4gICAgaWYgKHBhcmFtcykge1xuICAgICAgc3dpdGNoIChuYW1lKSB7XG4gICAgICAgIGNhc2UgXCJudGhcIjpcbiAgICAgICAgICB7XG4gICAgICAgICAgICBjb25zdCBbYSwgYl0gPSBwYXJhbXMgYXMgbnVtYmVyW107XG4gICAgICAgICAgICB0aGlzLmN1cnJlbnRQc2V1ZG9QYWdlQ2xhc3NTZWxlY3RvcnMucHVzaChcbiAgICAgICAgICAgICAgYDoke25hbWV9KCR7YX1uJHtiIDwgMCA/IGIgOiBcIitcIiArIGJ9KWAsXG4gICAgICAgICAgICApO1xuICAgICAgICAgICAgdGhpcy5jaGFpbi5wdXNoKG5ldyBJc050aFBhZ2VBY3Rpb24odGhpcy5zY29wZSwgYSwgYikpO1xuICAgICAgICAgICAgdGhpcy5zcGVjaWZpY2l0eSArPSAyNTY7XG4gICAgICAgICAgfVxuICAgICAgICAgIGJyZWFrO1xuICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgIHRoaXMucmVwb3J0QW5kU2tpcChcbiAgICAgICAgICAgIGBFX0lOVkFMSURfUEFHRV9TRUxFQ1RPUiA6JHtuYW1lfSgke3BhcmFtcy5qb2luKFwiXCIpfSlgLFxuICAgICAgICAgICk7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIHRoaXMuY3VycmVudFBzZXVkb1BhZ2VDbGFzc1NlbGVjdG9ycy5wdXNoKGA6JHtuYW1lfWApO1xuICAgICAgc3dpdGNoIChuYW1lKSB7XG4gICAgICAgIGNhc2UgXCJmaXJzdFwiOlxuICAgICAgICAgIHRoaXMuY2hhaW4ucHVzaChuZXcgSXNGaXJzdFBhZ2VBY3Rpb24odGhpcy5zY29wZSkpO1xuICAgICAgICAgIHRoaXMuc3BlY2lmaWNpdHkgKz0gMjU2O1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICBjYXNlIFwibGVmdFwiOlxuICAgICAgICAgIHRoaXMuY2hhaW4ucHVzaChuZXcgSXNMZWZ0UGFnZUFjdGlvbih0aGlzLnNjb3BlKSk7XG4gICAgICAgICAgdGhpcy5zcGVjaWZpY2l0eSArPSAxO1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICBjYXNlIFwicmlnaHRcIjpcbiAgICAgICAgICB0aGlzLmNoYWluLnB1c2gobmV3IElzUmlnaHRQYWdlQWN0aW9uKHRoaXMuc2NvcGUpKTtcbiAgICAgICAgICB0aGlzLnNwZWNpZmljaXR5ICs9IDE7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIGNhc2UgXCJyZWN0b1wiOlxuICAgICAgICAgIHRoaXMuY2hhaW4ucHVzaChuZXcgSXNSZWN0b1BhZ2VBY3Rpb24odGhpcy5zY29wZSkpO1xuICAgICAgICAgIHRoaXMuc3BlY2lmaWNpdHkgKz0gMTtcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgY2FzZSBcInZlcnNvXCI6XG4gICAgICAgICAgdGhpcy5jaGFpbi5wdXNoKG5ldyBJc1ZlcnNvUGFnZUFjdGlvbih0aGlzLnNjb3BlKSk7XG4gICAgICAgICAgdGhpcy5zcGVjaWZpY2l0eSArPSAxO1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgIHRoaXMucmVwb3J0QW5kU2tpcChgRV9JTlZBTElEX1BBR0VfU0VMRUNUT1IgOiR7bmFtZX1gKTtcbiAgICAgICAgICBicmVhaztcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICAvKipcbiAgICogU2F2ZSBjdXJyZW50bHkgcHJvY2Vzc2VkIHNlbGVjdG9yIGFuZCByZXNldCB2YXJpYWJsZXMuXG4gICAqL1xuICBwcml2YXRlIGZpbmlzaFNlbGVjdG9yKCkge1xuICAgIGxldCBzZWxlY3RvcnM6IHN0cmluZ1tdO1xuICAgIGlmIChcbiAgICAgICF0aGlzLmN1cnJlbnROYW1lZFBhZ2VTZWxlY3RvciAmJlxuICAgICAgIXRoaXMuY3VycmVudFBzZXVkb1BhZ2VDbGFzc1NlbGVjdG9ycy5sZW5ndGhcbiAgICApIHtcbiAgICAgIHNlbGVjdG9ycyA9IG51bGw7XG4gICAgfSBlbHNlIHtcbiAgICAgIHNlbGVjdG9ycyA9IFt0aGlzLmN1cnJlbnROYW1lZFBhZ2VTZWxlY3Rvcl0uY29uY2F0KFxuICAgICAgICB0aGlzLmN1cnJlbnRQc2V1ZG9QYWdlQ2xhc3NTZWxlY3RvcnMuc29ydCgpLFxuICAgICAgKTtcbiAgICB9XG4gICAgdGhpcy5jdXJyZW50UGFnZVNlbGVjdG9ycy5wdXNoKHtcbiAgICAgIHNlbGVjdG9ycyxcbiAgICAgIHNwZWNpZmljaXR5OiB0aGlzLnNwZWNpZmljaXR5LFxuICAgIH0pO1xuICAgIHRoaXMuY3VycmVudE5hbWVkUGFnZVNlbGVjdG9yID0gXCJcIjtcbiAgICB0aGlzLmN1cnJlbnRQc2V1ZG9QYWdlQ2xhc3NTZWxlY3RvcnMgPSBbXTtcbiAgfVxuXG4gIC8qKlxuICAgKiBAb3ZlcnJpZGVcbiAgICovXG4gIG5leHRTZWxlY3RvcigpOiB2b2lkIHtcbiAgICB0aGlzLmZpbmlzaFNlbGVjdG9yKCk7XG4gICAgc3VwZXIubmV4dFNlbGVjdG9yKCk7XG4gIH1cblxuICAvKipcbiAgICogQG92ZXJyaWRlXG4gICAqL1xuICBzdGFydFJ1bGVCb2R5KCk6IHZvaWQge1xuICAgIHRoaXMuZmluaXNoU2VsZWN0b3IoKTtcbiAgICBzdXBlci5zdGFydFJ1bGVCb2R5KCk7XG4gIH1cblxuICAvKipcbiAgICogQG92ZXJyaWRlXG4gICAqL1xuICBzaW1wbGVQcm9wZXJ0eShuYW1lOiBzdHJpbmcsIHZhbHVlOiBDc3MuVmFsLCBpbXBvcnRhbnQpOiB2b2lkIHtcbiAgICAvLyB3ZSBsaW1pdCAnYmxlZWQnIGFuZCAnbWFya3MnIHRvIGJlIGVmZmVjdGl2ZSBvbmx5IHdoZW4gc3BlY2lmaWVkIHdpdGhvdXRcbiAgICAvLyBwYWdlIHNlbGVjdG9yc1xuICAgIGlmIChcbiAgICAgIChuYW1lID09PSBcImJsZWVkXCIgfHwgbmFtZSA9PT0gXCJtYXJrc1wiKSAmJlxuICAgICAgIXRoaXMuY3VycmVudFBhZ2VTZWxlY3RvcnMuc29tZSgocykgPT4gcy5zZWxlY3RvcnMgPT09IG51bGwpXG4gICAgKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIHN1cGVyLnNpbXBsZVByb3BlcnR5KG5hbWUsIHZhbHVlLCBpbXBvcnRhbnQpO1xuICAgIGNvbnN0IGNhc2NWYWwgPSBDc3NDYXNjYWRlLmdldFByb3AodGhpcy5lbGVtZW50U3R5bGUsIG5hbWUpO1xuICAgIGNvbnN0IHBhZ2VQcm9wcyA9IHRoaXMucGFnZVByb3BzO1xuICAgIGlmIChuYW1lID09PSBcImJsZWVkXCIgfHwgbmFtZSA9PT0gXCJtYXJrc1wiKSB7XG4gICAgICBpZiAoIXBhZ2VQcm9wc1tcIlwiXSkge1xuICAgICAgICBwYWdlUHJvcHNbXCJcIl0gPSB7fSBhcyBDc3NDYXNjYWRlLkVsZW1lbnRTdHlsZTtcbiAgICAgIH1cblxuICAgICAgLy8gd2UgY2FuIHNpbXBseSBvdmVyd3JpdGUgd2l0aG91dCBjb25zaWRlcmluZyBzcGVjaWZpY2l0eVxuICAgICAgLy8gc2luY2UgJ2JsZWVkJyBhbmQgJ21hcmtzJyBhbHdheXMgY29tZSBmcm9tIGEgcGFnZSBydWxlIHdpdGhvdXQgcGFnZVxuICAgICAgLy8gc2VsZWN0b3JzLlxuICAgICAgT2JqZWN0LmtleXMocGFnZVByb3BzKS5mb3JFYWNoKChzZWxlY3RvcikgPT4ge1xuICAgICAgICBDc3NDYXNjYWRlLnNldFByb3AocGFnZVByb3BzW3NlbGVjdG9yXSwgbmFtZSwgY2FzY1ZhbCk7XG4gICAgICB9KTtcbiAgICB9IGVsc2UgaWYgKG5hbWUgPT09IFwic2l6ZVwiKSB7XG4gICAgICBjb25zdCBub1BhZ2VTZWxlY3RvclByb3BzID0gcGFnZVByb3BzW1wiXCJdO1xuICAgICAgdGhpcy5jdXJyZW50UGFnZVNlbGVjdG9ycy5mb3JFYWNoKChzKSA9PiB7XG4gICAgICAgIC8vIHVwZGF0ZSBzcGVjaWZpY2l0eSB0byByZWZsZWN0IHRoZSBzcGVjaWZpY2l0eSBvZiB0aGUgc2VsZWN0b3JcbiAgICAgICAgbGV0IHJlc3VsdCA9IG5ldyBDc3NDYXNjYWRlLkNhc2NhZGVWYWx1ZShcbiAgICAgICAgICBjYXNjVmFsLnZhbHVlLFxuICAgICAgICAgIGNhc2NWYWwucHJpb3JpdHkgKyBzLnNwZWNpZmljaXR5LFxuICAgICAgICApO1xuICAgICAgICBjb25zdCBzZWxlY3RvciA9IHMuc2VsZWN0b3JzID8gcy5zZWxlY3RvcnMuam9pbihcIlwiKSA6IFwiXCI7XG4gICAgICAgIGxldCBwcm9wcyA9IHBhZ2VQcm9wc1tzZWxlY3Rvcl07XG4gICAgICAgIGlmICghcHJvcHMpIHtcbiAgICAgICAgICAvLyBzaW5jZSBubyBwcm9wZXJ0aWVzIGZvciB0aGlzIHNlbGVjdG9yIGhhdmUgYmVlbiBzdG9yZWQgYmVmb3JlLFxuICAgICAgICAgIC8vIHdlIGNhbiBzaW1wbHkgc2V0IHRoZSAnc2l6ZScsICdibGVlZCcgYW5kICdtYXJrcycgcHJvcGVydGllcy5cbiAgICAgICAgICBwcm9wcyA9IHBhZ2VQcm9wc1tzZWxlY3Rvcl0gPSB7fSBhcyBDc3NDYXNjYWRlLkVsZW1lbnRTdHlsZTtcbiAgICAgICAgICBDc3NDYXNjYWRlLnNldFByb3AocHJvcHMsIG5hbWUsIHJlc3VsdCk7XG4gICAgICAgICAgaWYgKG5vUGFnZVNlbGVjdG9yUHJvcHMpIHtcbiAgICAgICAgICAgIFtcImJsZWVkXCIsIFwibWFya3NcIl0uZm9yRWFjaCgobikgPT4ge1xuICAgICAgICAgICAgICBpZiAobm9QYWdlU2VsZWN0b3JQcm9wc1tuXSkge1xuICAgICAgICAgICAgICAgIENzc0Nhc2NhZGUuc2V0UHJvcChwcm9wcywgbiwgbm9QYWdlU2VsZWN0b3JQcm9wc1tuXSk7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAvLyBjb25zaWRlciBzcGVjaWZpY2l0eSB3aGVuIHNldHRpbmcgJ3NpemUnIHByb3BlcnR5LlxuICAgICAgICAgIC8vIHdlIGRvbid0IGhhdmUgdG8gc2V0ICdibGVlZCcgYW5kICdtYXJrcycgc2luY2UgdGhleSBzaG91bGQgaGF2ZVxuICAgICAgICAgIC8vIGJlZW4gYWxyZWFkeSB1cGRhdGVkLlxuICAgICAgICAgIGNvbnN0IHByZXZDYXNjVmFsID0gQ3NzQ2FzY2FkZS5nZXRQcm9wKHByb3BzLCBuYW1lKTtcbiAgICAgICAgICByZXN1bHQgPSBwcmV2Q2FzY1ZhbFxuICAgICAgICAgICAgPyBDc3NDYXNjYWRlLmNhc2NhZGVWYWx1ZXMobnVsbCwgcmVzdWx0LCBwcmV2Q2FzY1ZhbClcbiAgICAgICAgICAgIDogcmVzdWx0O1xuICAgICAgICAgIENzc0Nhc2NhZGUuc2V0UHJvcChwcm9wcywgbmFtZSwgcmVzdWx0KTtcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgfVxuICB9XG5cbiAgLyoqXG4gICAqIEBvdmVycmlkZVxuICAgKi9cbiAgaW5zZXJ0Tm9uUHJpbWFyeShhY3Rpb246IENzc0Nhc2NhZGUuQ2FzY2FkZUFjdGlvbik6IHZvaWQge1xuICAgIC8vIFdlIHJlcHJlc2VudCBwYWdlIHJ1bGVzIHdpdGhvdXQgc2VsZWN0b3JzIGJ5ICosIHRob3VnaCBpdCBpcyBpbGxlZ2FsIGluXG4gICAgLy8gQ1NTXG4gICAgdGhpcy5jYXNjYWRlLmluc2VydEluVGFibGUodGhpcy5jYXNjYWRlLnBhZ2V0eXBlcywgXCIqXCIsIGFjdGlvbik7XG4gIH1cblxuICAvKipcbiAgICogQG92ZXJyaWRlXG4gICAqL1xuICBtYWtlQXBwbHlSdWxlQWN0aW9uKHNwZWNpZmljaXR5OiBudW1iZXIpOiBDc3NDYXNjYWRlLkFwcGx5UnVsZUFjdGlvbiB7XG4gICAgcmV0dXJuIG5ldyBBcHBseVBhZ2VSdWxlQWN0aW9uKHRoaXMuZWxlbWVudFN0eWxlLCBzcGVjaWZpY2l0eSk7XG4gIH1cblxuICAvKipcbiAgICogQG92ZXJyaWRlXG4gICAqL1xuICBzdGFydFBhZ2VNYXJnaW5Cb3hSdWxlKG5hbWU6IHN0cmluZyk6IHZvaWQge1xuICAgIGNvbnN0IG1hcmdpbkJveE1hcCA9IENzc0Nhc2NhZGUuZ2V0TXV0YWJsZVN0eWxlTWFwKFxuICAgICAgdGhpcy5lbGVtZW50U3R5bGUsXG4gICAgICBtYXJnaW5Cb3hlc0tleSxcbiAgICApO1xuICAgIGxldCBib3hTdHlsZSA9IG1hcmdpbkJveE1hcFtuYW1lXTtcbiAgICBpZiAoIWJveFN0eWxlKSB7XG4gICAgICBib3hTdHlsZSA9IHt9IGFzIENzc0Nhc2NhZGUuRWxlbWVudFN0eWxlO1xuICAgICAgbWFyZ2luQm94TWFwW25hbWVdID0gYm94U3R5bGU7XG4gICAgfVxuICAgIGNvbnN0IGhhbmRsZXIgPSBuZXcgUGFnZU1hcmdpbkJveFBhcnNlckhhbmRsZXIoXG4gICAgICB0aGlzLnNjb3BlLFxuICAgICAgdGhpcy5vd25lcixcbiAgICAgIHRoaXMudmFsaWRhdG9yU2V0LFxuICAgICAgYm94U3R5bGUsXG4gICAgKTtcbiAgICB0aGlzLm93bmVyLnB1c2hIYW5kbGVyKGhhbmRsZXIpO1xuICB9XG59XG5cbi8qKlxuICogUGFyc2VyIGhhbmRsZXIgZm9yIGEgcGFnZS1tYXJnaW4gYm94IHJ1bGUuXG4gKi9cbmV4cG9ydCBjbGFzcyBQYWdlTWFyZ2luQm94UGFyc2VySGFuZGxlclxuICBleHRlbmRzIENzc1BhcnNlci5TbGF2ZVBhcnNlckhhbmRsZXJcbiAgaW1wbGVtZW50cyBDc3NWYWxpZGF0b3IuUHJvcGVydHlSZWNlaXZlciB7XG4gIGNvbnN0cnVjdG9yKFxuICAgIHNjb3BlOiBFeHBycy5MZXhpY2FsU2NvcGUsXG4gICAgb3duZXI6IENzc1BhcnNlci5EaXNwYXRjaFBhcnNlckhhbmRsZXIsXG4gICAgcHVibGljIHJlYWRvbmx5IHZhbGlkYXRvclNldDogQ3NzVmFsaWRhdG9yLlZhbGlkYXRvclNldCxcbiAgICBwdWJsaWMgcmVhZG9ubHkgYm94U3R5bGU6IENzc0Nhc2NhZGUuRWxlbWVudFN0eWxlLFxuICApIHtcbiAgICBzdXBlcihzY29wZSwgb3duZXIsIGZhbHNlKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBAb3ZlcnJpZGVcbiAgICovXG4gIHByb3BlcnR5KG5hbWU6IHN0cmluZywgdmFsdWU6IENzcy5WYWwsIGltcG9ydGFudDogYm9vbGVhbik6IHZvaWQge1xuICAgIHRoaXMudmFsaWRhdG9yU2V0LnZhbGlkYXRlUHJvcGVydHlBbmRIYW5kbGVTaG9ydGhhbmQoXG4gICAgICBuYW1lLFxuICAgICAgdmFsdWUsXG4gICAgICBpbXBvcnRhbnQsXG4gICAgICB0aGlzLFxuICAgICk7XG4gIH1cblxuICAvKipcbiAgICogQG92ZXJyaWRlXG4gICAqL1xuICBpbnZhbGlkUHJvcGVydHlWYWx1ZShuYW1lOiBzdHJpbmcsIHZhbHVlOiBDc3MuVmFsKTogdm9pZCB7XG4gICAgdGhpcy5yZXBvcnQoYEVfSU5WQUxJRF9QUk9QRVJUWV9WQUxVRSAke25hbWV9OiAke3ZhbHVlLnRvU3RyaW5nKCl9YCk7XG4gIH1cblxuICAvKipcbiAgICogQG92ZXJyaWRlXG4gICAqL1xuICB1bmtub3duUHJvcGVydHkobmFtZTogc3RyaW5nLCB2YWx1ZTogQ3NzLlZhbCk6IHZvaWQge1xuICAgIHRoaXMucmVwb3J0KGBFX0lOVkFMSURfUFJPUEVSVFkgJHtuYW1lfTogJHt2YWx1ZS50b1N0cmluZygpfWApO1xuICB9XG5cbiAgLyoqXG4gICAqIEBvdmVycmlkZVxuICAgKi9cbiAgc2ltcGxlUHJvcGVydHkobmFtZTogc3RyaW5nLCB2YWx1ZTogQ3NzLlZhbCwgaW1wb3J0YW50KTogdm9pZCB7XG4gICAgY29uc3Qgc3BlY2lmaWNpdHkgPSBpbXBvcnRhbnRcbiAgICAgID8gdGhpcy5nZXRJbXBvcnRhbnRTcGVjaWZpY2l0eSgpXG4gICAgICA6IHRoaXMuZ2V0QmFzZVNwZWNpZmljaXR5KCk7XG4gICAgY29uc3QgY2FzY3ZhbCA9IG5ldyBDc3NDYXNjYWRlLkNhc2NhZGVWYWx1ZSh2YWx1ZSwgc3BlY2lmaWNpdHkpO1xuICAgIENzc0Nhc2NhZGUuc2V0UHJvcCh0aGlzLmJveFN0eWxlLCBuYW1lLCBjYXNjdmFsKTtcbiAgfVxufVxuIiwiLyoqXG4gKiBDb3B5cmlnaHQgMjAxNSBUcmltLW1hcmtzIEluYy5cbiAqIENvcHlyaWdodCAyMDE5IFZpdmxpb3N0eWxlIEZvdW5kYXRpb25cbiAqXG4gKiBWaXZsaW9zdHlsZS5qcyBpcyBmcmVlIHNvZnR3YXJlOiB5b3UgY2FuIHJlZGlzdHJpYnV0ZSBpdCBhbmQvb3IgbW9kaWZ5XG4gKiBpdCB1bmRlciB0aGUgdGVybXMgb2YgdGhlIEdOVSBBZmZlcm8gR2VuZXJhbCBQdWJsaWMgTGljZW5zZSBhcyBwdWJsaXNoZWQgYnlcbiAqIHRoZSBGcmVlIFNvZnR3YXJlIEZvdW5kYXRpb24sIGVpdGhlciB2ZXJzaW9uIDMgb2YgdGhlIExpY2Vuc2UsIG9yXG4gKiAoYXQgeW91ciBvcHRpb24pIGFueSBsYXRlciB2ZXJzaW9uLlxuICpcbiAqIFZpdmxpb3N0eWxlLmpzIGlzIGRpc3RyaWJ1dGVkIGluIHRoZSBob3BlIHRoYXQgaXQgd2lsbCBiZSB1c2VmdWwsXG4gKiBidXQgV0lUSE9VVCBBTlkgV0FSUkFOVFk7IHdpdGhvdXQgZXZlbiB0aGUgaW1wbGllZCB3YXJyYW50eSBvZlxuICogTUVSQ0hBTlRBQklMSVRZIG9yIEZJVE5FU1MgRk9SIEEgUEFSVElDVUxBUiBQVVJQT1NFLiAgU2VlIHRoZVxuICogR05VIEFmZmVybyBHZW5lcmFsIFB1YmxpYyBMaWNlbnNlIGZvciBtb3JlIGRldGFpbHMuXG4gKlxuICogWW91IHNob3VsZCBoYXZlIHJlY2VpdmVkIGEgY29weSBvZiB0aGUgR05VIEFmZmVybyBHZW5lcmFsIFB1YmxpYyBMaWNlbnNlXG4gKiBhbG9uZyB3aXRoIFZpdmxpb3N0eWxlLmpzLiAgSWYgbm90LCBzZWUgPGh0dHA6Ly93d3cuZ251Lm9yZy9saWNlbnNlcy8+LlxuICpcbiAqIEBmaWxlb3ZlcnZpZXcgVXJscyAtIFVSTCBVdGlsaXRpZXNcbiAqL1xuXG4vKipcbiAqIHRyYW5zZm9ybSBhbGwgdXJscyBpbiBhdHRyaWJ1dGVWYWx1ZSB1c2luZyBkb2N1bWVudFVSTFRyYW5zZm9ybWVyLlxuICpcbiAqIEByZXR1cm5zIHRyYW5zZm9ybWVkIGF0dHJpYnV0ZVZhbHVlXG4gKi9cblxuZXhwb3J0IGNvbnN0IHRyYW5zZm9ybVVSSXMgPSAoXG4gIGF0dHJpYnV0ZVZhbHVlLFxuICBiYXNlVXJsLFxuICBkb2N1bWVudFVSTFRyYW5zZm9ybWVyLFxuKSA9PlxuICBhdHRyaWJ1dGVWYWx1ZVxuICAgIC5yZXBsYWNlKFxuICAgICAgL1t1VV1bclJdW2xMXVxcKFxccypcIigoXFxcXChbXjAtOWEtZkEtRl0rfFswLTlhLWZBLUZdK1xccyopfFteXCJcXHJcXG5dKSspXCIvZ20sXG4gICAgICAobWF0Y2gsIG0xKSA9PlxuICAgICAgICBgdXJsKFwiJHtkb2N1bWVudFVSTFRyYW5zZm9ybWVyLnRyYW5zZm9ybVVSTChtMSwgYmFzZVVybCl9XCJgLFxuICAgIClcbiAgICAucmVwbGFjZShcbiAgICAgIC9bdVVdW3JSXVtsTF1cXChcXHMqJygoXFxcXChbXjAtOWEtZkEtRl0rfFswLTlhLWZBLUZdK1xccyopfFteJ1xcclxcbl0pKyknL2dtLFxuICAgICAgKG1hdGNoLCBtMSkgPT5cbiAgICAgICAgYHVybCgnJHtkb2N1bWVudFVSTFRyYW5zZm9ybWVyLnRyYW5zZm9ybVVSTChtMSwgYmFzZVVybCl9J2AsXG4gICAgKVxuICAgIC5yZXBsYWNlKFxuICAgICAgL1t1VV1bclJdW2xMXVxcKFxccyooKFxcXFwoW14wLTlhLWZBLUZdK3xbMC05YS1mQS1GXStcXHMqKXxbXlwiJ1xcclxcblxcKVxcc10pKykvZ20sXG4gICAgICAobWF0Y2gsIG0xKSA9PiBgdXJsKCR7ZG9jdW1lbnRVUkxUcmFuc2Zvcm1lci50cmFuc2Zvcm1VUkwobTEsIGJhc2VVcmwpfWAsXG4gICAgKTtcbiIsIi8qKlxuICogQ29weXJpZ2h0IDIwMTMgR29vZ2xlLCBJbmMuXG4gKiBDb3B5cmlnaHQgMjAxNSBUcmltLW1hcmtzIEluYy5cbiAqIENvcHlyaWdodCAyMDE5IFZpdmxpb3N0eWxlIEZvdW5kYXRpb25cbiAqXG4gKiBWaXZsaW9zdHlsZS5qcyBpcyBmcmVlIHNvZnR3YXJlOiB5b3UgY2FuIHJlZGlzdHJpYnV0ZSBpdCBhbmQvb3IgbW9kaWZ5XG4gKiBpdCB1bmRlciB0aGUgdGVybXMgb2YgdGhlIEdOVSBBZmZlcm8gR2VuZXJhbCBQdWJsaWMgTGljZW5zZSBhcyBwdWJsaXNoZWQgYnlcbiAqIHRoZSBGcmVlIFNvZnR3YXJlIEZvdW5kYXRpb24sIGVpdGhlciB2ZXJzaW9uIDMgb2YgdGhlIExpY2Vuc2UsIG9yXG4gKiAoYXQgeW91ciBvcHRpb24pIGFueSBsYXRlciB2ZXJzaW9uLlxuICpcbiAqIFZpdmxpb3N0eWxlLmpzIGlzIGRpc3RyaWJ1dGVkIGluIHRoZSBob3BlIHRoYXQgaXQgd2lsbCBiZSB1c2VmdWwsXG4gKiBidXQgV0lUSE9VVCBBTlkgV0FSUkFOVFk7IHdpdGhvdXQgZXZlbiB0aGUgaW1wbGllZCB3YXJyYW50eSBvZlxuICogTUVSQ0hBTlRBQklMSVRZIG9yIEZJVE5FU1MgRk9SIEEgUEFSVElDVUxBUiBQVVJQT1NFLiAgU2VlIHRoZVxuICogR05VIEFmZmVybyBHZW5lcmFsIFB1YmxpYyBMaWNlbnNlIGZvciBtb3JlIGRldGFpbHMuXG4gKlxuICogWW91IHNob3VsZCBoYXZlIHJlY2VpdmVkIGEgY29weSBvZiB0aGUgR05VIEFmZmVybyBHZW5lcmFsIFB1YmxpYyBMaWNlbnNlXG4gKiBhbG9uZyB3aXRoIFZpdmxpb3N0eWxlLmpzLiAgSWYgbm90LCBzZWUgPGh0dHA6Ly93d3cuZ251Lm9yZy9saWNlbnNlcy8+LlxuICpcbiAqIEBmaWxlb3ZlcnZpZXcgVmdlbiAtIFZpZXcgdHJlZSBnZW5lcmF0b3IuXG4gKi9cbmltcG9ydCAqIGFzIEFzc2VydHMgZnJvbSBcIi4vYXNzZXJ0c1wiO1xuaW1wb3J0ICogYXMgQmFzZSBmcm9tIFwiLi9iYXNlXCI7XG5pbXBvcnQgKiBhcyBCcmVhayBmcm9tIFwiLi9icmVha1wiO1xuaW1wb3J0ICogYXMgQ3NzIGZyb20gXCIuL2Nzc1wiO1xuaW1wb3J0ICogYXMgQ3NzQ2FzY2FkZSBmcm9tIFwiLi9jc3MtY2FzY2FkZVwiO1xuaW1wb3J0ICogYXMgQ3NzUHJvcCBmcm9tIFwiLi9jc3MtcHJvcFwiO1xuaW1wb3J0ICogYXMgQ3NzU3R5bGVyIGZyb20gXCIuL2Nzcy1zdHlsZXJcIjtcbmltcG9ydCAqIGFzIERpZmYgZnJvbSBcIi4vZGlmZlwiO1xuaW1wb3J0ICogYXMgRGlzcGxheSBmcm9tIFwiLi9kaXNwbGF5XCI7XG5pbXBvcnQgKiBhcyBFeHBycyBmcm9tIFwiLi9leHByc1wiO1xuaW1wb3J0ICogYXMgRm9udCBmcm9tIFwiLi9mb250XCI7XG5pbXBvcnQgKiBhcyBNYXRjaGVycyBmcm9tIFwiLi9tYXRjaGVyc1wiO1xuaW1wb3J0ICogYXMgUGFnZUZsb2F0cyBmcm9tIFwiLi9wYWdlLWZsb2F0c1wiO1xuaW1wb3J0ICogYXMgUGx1Z2luIGZyb20gXCIuL3BsdWdpblwiO1xuaW1wb3J0ICogYXMgUHNldWRvRWxlbWVudCBmcm9tIFwiLi9wc2V1ZG8tZWxlbWVudFwiO1xuaW1wb3J0ICogYXMgUmVwZXRpdGl2ZUVsZW1lbnQgZnJvbSBcIi4vcmVwZXRpdGl2ZS1lbGVtZW50XCI7XG5pbXBvcnQgKiBhcyBUYXNrIGZyb20gXCIuL3Rhc2tcIjtcbmltcG9ydCAqIGFzIFRhc2tVdGlsIGZyb20gXCIuL3Rhc2stdXRpbFwiO1xuaW1wb3J0ICogYXMgVXJscyBmcm9tIFwiLi91cmxzXCI7XG5pbXBvcnQgKiBhcyBWdHJlZSBmcm9tIFwiLi92dHJlZVwiO1xuaW1wb3J0ICogYXMgTGF5b3V0IGZyb20gXCIuL2xheW91dFwiO1xuaW1wb3J0IHsgWG1sRG9jIH0gZnJvbSBcIi4vdHlwZXNcIjtcblxuY29uc3QgbmFtZXNwYWNlUHJlZml4TWFwID0ge307XG5cbmV4cG9ydCBjb25zdCBmcm9udEVkZ2VCbGFja0xpc3RIb3I6IHsgW2tleTogc3RyaW5nXTogc3RyaW5nIH0gPSB7XG4gIFwidGV4dC1pbmRlbnRcIjogXCIwcHhcIixcbiAgXCJtYXJnaW4tdG9wXCI6IFwiMHB4XCIsXG4gIFwicGFkZGluZy10b3BcIjogXCIwcHhcIixcbiAgXCJib3JkZXItdG9wLXdpZHRoXCI6IFwiMHB4XCIsXG4gIFwiYm9yZGVyLXRvcC1zdHlsZVwiOiBcIm5vbmVcIixcbiAgXCJib3JkZXItdG9wLWNvbG9yXCI6IFwidHJhbnNwYXJlbnRcIixcbiAgXCJib3JkZXItdG9wLWxlZnQtcmFkaXVzXCI6IFwiMHB4XCIsXG4gIFwiYm9yZGVyLXRvcC1yaWdodC1yYWRpdXNcIjogXCIwcHhcIixcbn07XG5cbmV4cG9ydCBjb25zdCBmcm9udEVkZ2VCbGFja0xpc3RWZXJ0OiB7IFtrZXk6IHN0cmluZ106IHN0cmluZyB9ID0ge1xuICBcInRleHQtaW5kZW50XCI6IFwiMHB4XCIsXG4gIFwibWFyZ2luLXJpZ2h0XCI6IFwiMHB4XCIsXG4gIFwicGFkZGluZy1yaWdodFwiOiBcIjBweFwiLFxuICBcImJvcmRlci1yaWdodC13aWR0aFwiOiBcIjBweFwiLFxuICBcImJvcmRlci1yaWdodC1zdHlsZVwiOiBcIm5vbmVcIixcbiAgXCJib3JkZXItcmlnaHQtY29sb3JcIjogXCJ0cmFuc3BhcmVudFwiLFxuICBcImJvcmRlci10b3AtcmlnaHQtcmFkaXVzXCI6IFwiMHB4XCIsXG4gIFwiYm9yZGVyLWJvdHRvbS1yaWdodC1yYWRpdXNcIjogXCIwcHhcIixcbn07XG5cbmV4cG9ydCBjb25zdCBmcm9udEVkZ2VVbmZvcmNlZEJyZWFrQmxhY2tMaXN0SG9yOiB7IFtrZXk6IHN0cmluZ106IHN0cmluZyB9ID0ge1xuICBcIm1hcmdpbi10b3BcIjogXCIwcHhcIixcbn07XG5cbmV4cG9ydCBjb25zdCBmcm9udEVkZ2VVbmZvcmNlZEJyZWFrQmxhY2tMaXN0VmVydDogeyBba2V5OiBzdHJpbmddOiBzdHJpbmcgfSA9IHtcbiAgXCJtYXJnaW4tcmlnaHRcIjogXCIwcHhcIixcbn07XG5cbmV4cG9ydCB0eXBlIEN1c3RvbVJlbmRlcmVyID0gKFxuICBwMTogRWxlbWVudCxcbiAgcDI6IEVsZW1lbnQsXG4gIHAzOiB7IFtrZXk6IHN0cmluZ106IENzcy5WYWwgfSxcbikgPT4gVGFzay5SZXN1bHQ8RWxlbWVudD47XG5cbmV4cG9ydCBpbnRlcmZhY2UgQ3VzdG9tUmVuZGVyZXJGYWN0b3J5IHtcbiAgbWFrZUN1c3RvbVJlbmRlcmVyKHhtbGRvYzogWG1sRG9jLlhNTERvY0hvbGRlcik6IEN1c3RvbVJlbmRlcmVyO1xufVxuXG4vKipcbiAqIENyZWF0ZXMgYW4gZXB1YlJlYWRpbmdTeXN0ZW0gb2JqZWN0IGluIHRoZSBpZnJhbWUuY29udGVudFdpbmRvdy5uYXZpZ2F0b3JcbiAqIHdoZW4gbG9hZCBldmVudCBmaXJlcy5cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGluaXRJRnJhbWUoaWZyYW1lOiBIVE1MSUZyYW1lRWxlbWVudCk6IHZvaWQge1xuICBpZnJhbWUuYWRkRXZlbnRMaXN0ZW5lcihcbiAgICBcImxvYWRcIixcbiAgICAoKSA9PiB7XG4gICAgICBpZnJhbWUuY29udGVudFdpbmRvdy5uYXZpZ2F0b3JbXCJlcHViUmVhZGluZ1N5c3RlbVwiXSA9IHtcbiAgICAgICAgbmFtZTogXCJhZGFwdFwiLFxuICAgICAgICB2ZXJzaW9uOiBcIjAuMVwiLFxuICAgICAgICBsYXlvdXRTdHlsZTogXCJwYWdpbmF0ZWRcIixcbiAgICAgICAgaGFzRmVhdHVyZTogZnVuY3Rpb24gKG5hbWUsIHZlcnNpb24pIHtcbiAgICAgICAgICBzd2l0Y2ggKG5hbWUpIHtcbiAgICAgICAgICAgIGNhc2UgXCJtb3VzZS1ldmVudHNcIjpcbiAgICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgICAgfVxuICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgfSxcbiAgICAgIH07XG4gICAgfSxcbiAgICBmYWxzZSxcbiAgKTtcbn1cblxuZXhwb3J0IGludGVyZmFjZSBTdHlsZXJQcm9kdWNlciB7XG4gIGdldFN0eWxlckZvckRvYyh4bWxkb2M6IFhtbERvYy5YTUxEb2NIb2xkZXIpOiBDc3NTdHlsZXIuQWJzdHJhY3RTdHlsZXI7XG59XG5cbmV4cG9ydCBjbGFzcyBWaWV3RmFjdG9yeVxuICBleHRlbmRzIEJhc2UuU2ltcGxlRXZlbnRUYXJnZXRcbiAgaW1wbGVtZW50cyBWdHJlZS5MYXlvdXRDb250ZXh0IHtcbiAgcHJpdmF0ZSBzdGF0aWMgU1ZHX1VSTF9BVFRSSUJVVEVTOiBzdHJpbmdbXSA9IFtcbiAgICBcImNvbG9yLXByb2ZpbGVcIixcbiAgICBcImNsaXAtcGF0aFwiLFxuICAgIFwiY3Vyc29yXCIsXG4gICAgXCJmaWx0ZXJcIixcbiAgICBcIm1hcmtlclwiLFxuICAgIFwibWFya2VyLXN0YXJ0XCIsXG4gICAgXCJtYXJrZXItZW5kXCIsXG4gICAgXCJtYXJrZXItbWlkXCIsXG4gICAgXCJmaWxsXCIsXG4gICAgXCJzdHJva2VcIixcbiAgICBcIm1hc2tcIixcbiAgXTtcbiAgZG9jdW1lbnQ6IERvY3VtZW50O1xuICBleHByQ29udGVudExpc3RlbmVyOiBWdHJlZS5FeHByQ29udGVudExpc3RlbmVyO1xuXG4gIC8vIHByb3ZpZGVkIGJ5IGxheW91dFxuICBub2RlQ29udGV4dDogVnRyZWUuTm9kZUNvbnRleHQgfCBudWxsID0gbnVsbDtcbiAgdmlld1Jvb3Q6IEVsZW1lbnQgfCBudWxsID0gbnVsbDtcbiAgaXNGb290bm90ZTogYm9vbGVhbiA9IGZhbHNlO1xuICBzb3VyY2VOb2RlOiBOb2RlIHwgbnVsbCA9IG51bGw7XG4gIG9mZnNldEluTm9kZTogbnVtYmVyID0gMDtcblxuICAvLyBjb21wdXRlZFxuICAvLyBUT0RPOiBvbmx5IHNldCBpdCBvbiBOb2RlQ29udGV4dFxuICB2aWV3Tm9kZTogTm9kZSB8IG51bGwgPSBudWxsO1xuXG4gIGNvbnN0cnVjdG9yKFxuICAgIHB1YmxpYyByZWFkb25seSBmbG93TmFtZTogc3RyaW5nLFxuICAgIHB1YmxpYyByZWFkb25seSBjb250ZXh0OiBFeHBycy5Db250ZXh0LFxuICAgIHB1YmxpYyByZWFkb25seSB2aWV3cG9ydDogVmlld3BvcnQsXG4gICAgcHVibGljIHJlYWRvbmx5IHN0eWxlcjogQ3NzU3R5bGVyLlN0eWxlcixcbiAgICBwdWJsaWMgcmVhZG9ubHkgcmVnaW9uSWRzOiBzdHJpbmdbXSxcbiAgICBwdWJsaWMgcmVhZG9ubHkgeG1sZG9jOiBYbWxEb2MuWE1MRG9jSG9sZGVyLFxuICAgIHB1YmxpYyByZWFkb25seSBkb2NGYWNlczogRm9udC5Eb2N1bWVudEZhY2VzLFxuICAgIHB1YmxpYyByZWFkb25seSBmb290bm90ZVN0eWxlOiBDc3NDYXNjYWRlLkVsZW1lbnRTdHlsZSxcbiAgICBwdWJsaWMgcmVhZG9ubHkgc3R5bGVyUHJvZHVjZXI6IFN0eWxlclByb2R1Y2VyLFxuICAgIHB1YmxpYyByZWFkb25seSBwYWdlOiBWdHJlZS5QYWdlLFxuICAgIHB1YmxpYyByZWFkb25seSBjdXN0b21SZW5kZXJlcjogQ3VzdG9tUmVuZGVyZXIsXG4gICAgcHVibGljIHJlYWRvbmx5IGZhbGxiYWNrTWFwOiB7IFtrZXk6IHN0cmluZ106IHN0cmluZyB9LFxuICAgIHB1YmxpYyByZWFkb25seSBkb2N1bWVudFVSTFRyYW5zZm9ybWVyOiBCYXNlLkRvY3VtZW50VVJMVHJhbnNmb3JtZXIsXG4gICkge1xuICAgIHN1cGVyKCk7XG4gICAgdGhpcy5kb2N1bWVudCA9IHZpZXdwb3J0LmRvY3VtZW50O1xuICAgIHRoaXMuZXhwckNvbnRlbnRMaXN0ZW5lciA9IHN0eWxlci5jb3VudGVyTGlzdGVuZXIuZ2V0RXhwckNvbnRlbnRMaXN0ZW5lcigpO1xuICB9XG5cbiAgLyoqXG4gICAqIEBvdmVycmlkZVxuICAgKi9cbiAgY2xvbmUoKTogVnRyZWUuTGF5b3V0Q29udGV4dCB7XG4gICAgcmV0dXJuIG5ldyBWaWV3RmFjdG9yeShcbiAgICAgIHRoaXMuZmxvd05hbWUsXG4gICAgICB0aGlzLmNvbnRleHQsXG4gICAgICB0aGlzLnZpZXdwb3J0LFxuICAgICAgdGhpcy5zdHlsZXIsXG4gICAgICB0aGlzLnJlZ2lvbklkcyxcbiAgICAgIHRoaXMueG1sZG9jLFxuICAgICAgdGhpcy5kb2NGYWNlcyxcbiAgICAgIHRoaXMuZm9vdG5vdGVTdHlsZSxcbiAgICAgIHRoaXMuc3R5bGVyUHJvZHVjZXIsXG4gICAgICB0aGlzLnBhZ2UsXG4gICAgICB0aGlzLmN1c3RvbVJlbmRlcmVyLFxuICAgICAgdGhpcy5mYWxsYmFja01hcCxcbiAgICAgIHRoaXMuZG9jdW1lbnRVUkxUcmFuc2Zvcm1lcixcbiAgICApO1xuICB9XG5cbiAgY3JlYXRlUHNldWRvZWxlbWVudFNoYWRvdyhcbiAgICBlbGVtZW50OiBFbGVtZW50LFxuICAgIGlzUm9vdDogYm9vbGVhbixcbiAgICBjYXNjU3R5bGU6IENzc0Nhc2NhZGUuRWxlbWVudFN0eWxlLFxuICAgIGNvbXB1dGVkU3R5bGU6IHsgW2tleTogc3RyaW5nXTogQ3NzLlZhbCB9LFxuICAgIHN0eWxlcjogQ3NzU3R5bGVyLkFic3RyYWN0U3R5bGVyLFxuICAgIGNvbnRleHQ6IEV4cHJzLkNvbnRleHQsXG4gICAgcGFyZW50U2hhZG93OiBWdHJlZS5TaGFkb3dDb250ZXh0LFxuICAgIHN1YlNoYWRvdzogVnRyZWUuU2hhZG93Q29udGV4dCxcbiAgKTogVnRyZWUuU2hhZG93Q29udGV4dCB7XG4gICAgY29uc3QgcHNldWRvTWFwID0gdGhpcy5nZXRQc2V1ZG9NYXAoXG4gICAgICBjYXNjU3R5bGUsXG4gICAgICB0aGlzLnJlZ2lvbklkcyxcbiAgICAgIHRoaXMuaXNGb290bm90ZSxcbiAgICAgIHRoaXMubm9kZUNvbnRleHQsXG4gICAgICBjb250ZXh0LFxuICAgICk7XG4gICAgaWYgKCFwc2V1ZG9NYXApIHtcbiAgICAgIHJldHVybiBzdWJTaGFkb3c7XG4gICAgfVxuICAgIGNvbnN0IGFkZGVkTmFtZXMgPSBbXTtcbiAgICBjb25zdCByb290ID0gUHNldWRvRWxlbWVudC5kb2N1bWVudC5jcmVhdGVFbGVtZW50TlMoQmFzZS5OUy5TSEFET1csIFwicm9vdFwiKTtcbiAgICBsZXQgYXR0ID0gcm9vdDtcbiAgICBmb3IgKGNvbnN0IG5hbWUgb2YgUHNldWRvRWxlbWVudC5wc2V1ZG9OYW1lcykge1xuICAgICAgbGV0IGVsZW06IEVsZW1lbnQ7XG4gICAgICBpZiAobmFtZSkge1xuICAgICAgICBpZiAoIXBzZXVkb01hcFtuYW1lXSkge1xuICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICB9XG4gICAgICAgIGlmIChuYW1lID09IFwiZm9vdG5vdGUtbWFya2VyXCIgJiYgIShpc1Jvb3QgJiYgdGhpcy5pc0Zvb3Rub3RlKSkge1xuICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICB9XG4gICAgICAgIGlmIChuYW1lLm1hdGNoKC9eZmlyc3QtLykpIHtcbiAgICAgICAgICBjb25zdCBkaXNwbGF5ID0gY29tcHV0ZWRTdHlsZVtcImRpc3BsYXlcIl07XG4gICAgICAgICAgaWYgKCFkaXNwbGF5IHx8IGRpc3BsYXkgPT09IENzcy5pZGVudC5pbmxpbmUpIHtcbiAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBpZiAobmFtZSA9PT0gXCJiZWZvcmVcIiB8fCBuYW1lID09PSBcImFmdGVyXCIpIHtcbiAgICAgICAgICBjb25zdCBjb250ZW50ID0gcHNldWRvTWFwW25hbWVdW1wiY29udGVudFwiXTtcbiAgICAgICAgICBpZiAoXG4gICAgICAgICAgICAhY29udGVudCB8fFxuICAgICAgICAgICAgY29udGVudCA9PT0gQ3NzLmlkZW50Lm5vcm1hbCB8fFxuICAgICAgICAgICAgY29udGVudCA9PT0gQ3NzLmlkZW50Lm5vbmVcbiAgICAgICAgICApIHtcbiAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBhZGRlZE5hbWVzLnB1c2gobmFtZSk7XG4gICAgICAgIGVsZW0gPSBQc2V1ZG9FbGVtZW50LmRvY3VtZW50LmNyZWF0ZUVsZW1lbnROUyhCYXNlLk5TLlhIVE1MLCBcInNwYW5cIik7XG4gICAgICAgIFBzZXVkb0VsZW1lbnQuc2V0UHNldWRvTmFtZShlbGVtLCBuYW1lKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGVsZW0gPSBQc2V1ZG9FbGVtZW50LmRvY3VtZW50LmNyZWF0ZUVsZW1lbnROUyhcbiAgICAgICAgICBCYXNlLk5TLlNIQURPVyxcbiAgICAgICAgICBcImNvbnRlbnRcIixcbiAgICAgICAgKTtcbiAgICAgIH1cbiAgICAgIGF0dC5hcHBlbmRDaGlsZChlbGVtKTtcbiAgICAgIGlmIChuYW1lLm1hdGNoKC9eZmlyc3QtLykpIHtcbiAgICAgICAgYXR0ID0gZWxlbTtcbiAgICAgIH1cbiAgICB9XG4gICAgaWYgKCFhZGRlZE5hbWVzLmxlbmd0aCkge1xuICAgICAgcmV0dXJuIHN1YlNoYWRvdztcbiAgICB9XG4gICAgY29uc3Qgc2hhZG93U3R5bGVyID0gbmV3IFBzZXVkb0VsZW1lbnQuUHNldWRvZWxlbWVudFN0eWxlcihcbiAgICAgIGVsZW1lbnQsXG4gICAgICBjYXNjU3R5bGUsXG4gICAgICBzdHlsZXIsXG4gICAgICBjb250ZXh0LFxuICAgICAgdGhpcy5leHByQ29udGVudExpc3RlbmVyLFxuICAgICk7XG4gICAgcmV0dXJuIG5ldyBWdHJlZS5TaGFkb3dDb250ZXh0KFxuICAgICAgZWxlbWVudCxcbiAgICAgIHJvb3QsXG4gICAgICBudWxsLFxuICAgICAgcGFyZW50U2hhZG93LFxuICAgICAgc3ViU2hhZG93LFxuICAgICAgVnRyZWUuU2hhZG93VHlwZS5ST09UTEVTUyxcbiAgICAgIHNoYWRvd1N0eWxlcixcbiAgICApO1xuICB9XG5cbiAgZ2V0UHNldWRvTWFwKFxuICAgIGNhc2NTdHlsZTogQ3NzQ2FzY2FkZS5FbGVtZW50U3R5bGUsXG4gICAgcmVnaW9uSWRzOiBzdHJpbmdbXSxcbiAgICBpc0Zvb3Rub3RlOiBib29sZWFuLFxuICAgIG5vZGVDb250ZXh0OiBWdHJlZS5Ob2RlQ29udGV4dCxcbiAgICBjb250ZXh0OiBFeHBycy5Db250ZXh0LFxuICApIHtcbiAgICBjb25zdCBwc2V1ZG9NYXAgPSBDc3NDYXNjYWRlLmdldFN0eWxlTWFwKGNhc2NTdHlsZSwgXCJfcHNldWRvc1wiKTtcbiAgICBpZiAoIXBzZXVkb01hcCkge1xuICAgICAgcmV0dXJuIG51bGw7XG4gICAgfVxuICAgIGNvbnN0IGNvbXB1dGVkUHNldWRvU3R5bGVNYXAgPSB7fTtcbiAgICBmb3IgKGNvbnN0IGtleSBpbiBwc2V1ZG9NYXApIHtcbiAgICAgIGNvbnN0IGNvbXB1dGVkUHNldWRvU3R5bGUgPSAoY29tcHV0ZWRQc2V1ZG9TdHlsZU1hcFtrZXldID0ge30pO1xuICAgICAgQ3NzQ2FzY2FkZS5tZXJnZVN0eWxlKGNvbXB1dGVkUHNldWRvU3R5bGUsIHBzZXVkb01hcFtrZXldLCBjb250ZXh0KTtcbiAgICAgIENzc0Nhc2NhZGUubWVyZ2VWaWV3Q29uZGl0aW9uYWxTdHlsZXMoXG4gICAgICAgIGNvbXB1dGVkUHNldWRvU3R5bGUsXG4gICAgICAgIGNvbnRleHQsXG4gICAgICAgIHBzZXVkb01hcFtrZXldLFxuICAgICAgKTtcbiAgICAgIENzc0Nhc2NhZGUuZm9yRWFjaFN0eWxlc0luUmVnaW9uKFxuICAgICAgICBwc2V1ZG9NYXBba2V5XSxcbiAgICAgICAgcmVnaW9uSWRzLFxuICAgICAgICBpc0Zvb3Rub3RlLFxuICAgICAgICAocmVnaW9uSWQsIHJlZ2lvblN0eWxlKSA9PiB7XG4gICAgICAgICAgQ3NzQ2FzY2FkZS5tZXJnZVN0eWxlKGNvbXB1dGVkUHNldWRvU3R5bGUsIHJlZ2lvblN0eWxlLCBjb250ZXh0KTtcbiAgICAgICAgICBDc3NDYXNjYWRlLmZvckVhY2hWaWV3Q29uZGl0aW9uYWxTdHlsZXMoXG4gICAgICAgICAgICByZWdpb25TdHlsZSxcbiAgICAgICAgICAgICh2aWV3Q29uZGl0aW9uYWxTdHlsZXMpID0+IHtcbiAgICAgICAgICAgICAgQ3NzQ2FzY2FkZS5tZXJnZVN0eWxlKFxuICAgICAgICAgICAgICAgIGNvbXB1dGVkUHNldWRvU3R5bGUsXG4gICAgICAgICAgICAgICAgdmlld0NvbmRpdGlvbmFsU3R5bGVzLFxuICAgICAgICAgICAgICAgIGNvbnRleHQsXG4gICAgICAgICAgICAgICk7XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICk7XG4gICAgICAgIH0sXG4gICAgICApO1xuICAgIH1cbiAgICByZXR1cm4gY29tcHV0ZWRQc2V1ZG9TdHlsZU1hcDtcbiAgfVxuXG4gIGNyZWF0ZVJlZlNoYWRvdyhcbiAgICBocmVmOiBzdHJpbmcsXG4gICAgdHlwZTogVnRyZWUuU2hhZG93VHlwZSxcbiAgICBlbGVtZW50OiBFbGVtZW50LFxuICAgIHBhcmVudFNoYWRvdzogVnRyZWUuU2hhZG93Q29udGV4dCxcbiAgICBzdWJTaGFkb3c6IFZ0cmVlLlNoYWRvd0NvbnRleHQsXG4gICk6IFRhc2suUmVzdWx0PFZ0cmVlLlNoYWRvd0NvbnRleHQ+IHtcbiAgICBjb25zdCBmcmFtZTogVGFzay5GcmFtZTxWdHJlZS5TaGFkb3dDb250ZXh0PiA9IFRhc2submV3RnJhbWUoXG4gICAgICBcImNyZWF0ZVJlZlNoYWRvd1wiLFxuICAgICk7XG4gICAgdGhpcy54bWxkb2Muc3RvcmUubG9hZChocmVmKS50aGVuKChyZWZEb2NQYXJhbSkgPT4ge1xuICAgICAgY29uc3QgcmVmRG9jID0gcmVmRG9jUGFyYW07XG4gICAgICBpZiAocmVmRG9jKSB7XG4gICAgICAgIGNvbnN0IHJlZkVsZW1lbnQgPSByZWZEb2MuZ2V0RWxlbWVudChocmVmKTtcbiAgICAgICAgaWYgKHJlZkVsZW1lbnQpIHtcbiAgICAgICAgICBjb25zdCByZWZTdHlsZXIgPSB0aGlzLnN0eWxlclByb2R1Y2VyLmdldFN0eWxlckZvckRvYyhyZWZEb2MpO1xuICAgICAgICAgIHN1YlNoYWRvdyA9IG5ldyBWdHJlZS5TaGFkb3dDb250ZXh0KFxuICAgICAgICAgICAgZWxlbWVudCxcbiAgICAgICAgICAgIHJlZkVsZW1lbnQsXG4gICAgICAgICAgICByZWZEb2MsXG4gICAgICAgICAgICBwYXJlbnRTaGFkb3csXG4gICAgICAgICAgICBzdWJTaGFkb3csXG4gICAgICAgICAgICB0eXBlLFxuICAgICAgICAgICAgcmVmU3R5bGVyLFxuICAgICAgICAgICk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIGZyYW1lLmZpbmlzaChzdWJTaGFkb3cpO1xuICAgIH0pO1xuICAgIHJldHVybiBmcmFtZS5yZXN1bHQoKTtcbiAgfVxuXG4gIGNyZWF0ZVNoYWRvd3MoXG4gICAgZWxlbWVudDogRWxlbWVudCxcbiAgICBpc1Jvb3QsXG4gICAgY2FzY1N0eWxlOiBDc3NDYXNjYWRlLkVsZW1lbnRTdHlsZSxcbiAgICBjb21wdXRlZFN0eWxlOiB7IFtrZXk6IHN0cmluZ106IENzcy5WYWwgfSxcbiAgICBzdHlsZXI6IENzc1N0eWxlci5BYnN0cmFjdFN0eWxlcixcbiAgICBjb250ZXh0OiBFeHBycy5Db250ZXh0LFxuICAgIHNoYWRvd0NvbnRleHQ6IFZ0cmVlLlNoYWRvd0NvbnRleHQsXG4gICk6IFRhc2suUmVzdWx0PFZ0cmVlLlNoYWRvd0NvbnRleHQ+IHtcbiAgICBjb25zdCBmcmFtZTogVGFzay5GcmFtZTxWdHJlZS5TaGFkb3dDb250ZXh0PiA9IFRhc2submV3RnJhbWUoXG4gICAgICBcImNyZWF0ZVNoYWRvd3NcIixcbiAgICApO1xuICAgIGNvbnN0IHNoYWRvdzogVnRyZWUuU2hhZG93Q29udGV4dCA9IG51bGw7XG4gICAgY29uc3QgdGVtcGxhdGVVUkxWYWwgPSBjb21wdXRlZFN0eWxlW1widGVtcGxhdGVcIl07XG4gICAgbGV0IGNvbnQ6IFRhc2suUmVzdWx0PFZ0cmVlLlNoYWRvd0NvbnRleHQ+O1xuICAgIGlmICh0ZW1wbGF0ZVVSTFZhbCBpbnN0YW5jZW9mIENzcy5VUkwpIHtcbiAgICAgIGNvbnN0IHVybCA9ICh0ZW1wbGF0ZVVSTFZhbCBhcyBDc3MuVVJMKS51cmw7XG4gICAgICBjb250ID0gdGhpcy5jcmVhdGVSZWZTaGFkb3coXG4gICAgICAgIHVybCxcbiAgICAgICAgVnRyZWUuU2hhZG93VHlwZS5ST09UTEVTUyxcbiAgICAgICAgZWxlbWVudCxcbiAgICAgICAgc2hhZG93Q29udGV4dCxcbiAgICAgICAgc2hhZG93LFxuICAgICAgKTtcbiAgICB9IGVsc2Uge1xuICAgICAgY29udCA9IFRhc2submV3UmVzdWx0KHNoYWRvdyk7XG4gICAgfVxuICAgIGNvbnQudGhlbigoc2hhZG93KSA9PiB7XG4gICAgICBsZXQgY29udDE6IFRhc2suUmVzdWx0PFZ0cmVlLlNoYWRvd0NvbnRleHQ+ID0gbnVsbDtcbiAgICAgIGlmIChlbGVtZW50Lm5hbWVzcGFjZVVSSSA9PSBCYXNlLk5TLlNIQURPVykge1xuICAgICAgICBpZiAoZWxlbWVudC5sb2NhbE5hbWUgPT0gXCJpbmNsdWRlXCIpIHtcbiAgICAgICAgICBsZXQgaHJlZiA9IGVsZW1lbnQuZ2V0QXR0cmlidXRlKFwiaHJlZlwiKTtcbiAgICAgICAgICBsZXQgeG1sZG9jOiBYbWxEb2MuWE1MRG9jSG9sZGVyID0gbnVsbDtcbiAgICAgICAgICBpZiAoaHJlZikge1xuICAgICAgICAgICAgeG1sZG9jID0gc2hhZG93Q29udGV4dCA/IHNoYWRvd0NvbnRleHQueG1sZG9jIDogdGhpcy54bWxkb2M7XG4gICAgICAgICAgfSBlbHNlIGlmIChzaGFkb3dDb250ZXh0KSB7XG4gICAgICAgICAgICBpZiAoc2hhZG93Q29udGV4dC5vd25lci5uYW1lc3BhY2VVUkkgPT0gQmFzZS5OUy5YSFRNTCkge1xuICAgICAgICAgICAgICBocmVmID0gc2hhZG93Q29udGV4dC5vd25lci5nZXRBdHRyaWJ1dGUoXCJocmVmXCIpO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgaHJlZiA9IHNoYWRvd0NvbnRleHQub3duZXIuZ2V0QXR0cmlidXRlTlMoQmFzZS5OUy5YTElOSywgXCJocmVmXCIpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgeG1sZG9jID0gc2hhZG93Q29udGV4dC5wYXJlbnRTaGFkb3dcbiAgICAgICAgICAgICAgPyBzaGFkb3dDb250ZXh0LnBhcmVudFNoYWRvdy54bWxkb2NcbiAgICAgICAgICAgICAgOiB0aGlzLnhtbGRvYztcbiAgICAgICAgICB9XG4gICAgICAgICAgaWYgKGhyZWYpIHtcbiAgICAgICAgICAgIGhyZWYgPSBCYXNlLnJlc29sdmVVUkwoaHJlZiwgeG1sZG9jLnVybCk7XG4gICAgICAgICAgICBjb250MSA9IHRoaXMuY3JlYXRlUmVmU2hhZG93KFxuICAgICAgICAgICAgICBocmVmLFxuICAgICAgICAgICAgICBWdHJlZS5TaGFkb3dUeXBlLlJPT1RFRCxcbiAgICAgICAgICAgICAgZWxlbWVudCxcbiAgICAgICAgICAgICAgc2hhZG93Q29udGV4dCxcbiAgICAgICAgICAgICAgc2hhZG93LFxuICAgICAgICAgICAgKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIGlmIChjb250MSA9PSBudWxsKSB7XG4gICAgICAgIGNvbnQxID0gVGFzay5uZXdSZXN1bHQoc2hhZG93KTtcbiAgICAgIH1cbiAgICAgIGxldCBjb250MjogVGFzay5SZXN1bHQ8VnRyZWUuU2hhZG93Q29udGV4dD4gPSBudWxsO1xuICAgICAgY29udDEudGhlbigoc2hhZG93KSA9PiB7XG4gICAgICAgIGlmIChjb21wdXRlZFN0eWxlW1wiZGlzcGxheVwiXSA9PT0gQ3NzLmlkZW50LnRhYmxlX2NlbGwpIHtcbiAgICAgICAgICBjb25zdCB1cmwgPSBCYXNlLnJlc29sdmVVUkwoXG4gICAgICAgICAgICBcInVzZXItYWdlbnQueG1sI3RhYmxlLWNlbGxcIixcbiAgICAgICAgICAgIEJhc2UucmVzb3VyY2VCYXNlVVJMLFxuICAgICAgICAgICk7XG4gICAgICAgICAgY29udDIgPSB0aGlzLmNyZWF0ZVJlZlNoYWRvdyhcbiAgICAgICAgICAgIHVybCxcbiAgICAgICAgICAgIFZ0cmVlLlNoYWRvd1R5cGUuUk9PVExFU1MsXG4gICAgICAgICAgICBlbGVtZW50LFxuICAgICAgICAgICAgc2hhZG93Q29udGV4dCxcbiAgICAgICAgICAgIHNoYWRvdyxcbiAgICAgICAgICApO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGNvbnQyID0gVGFzay5uZXdSZXN1bHQoc2hhZG93KTtcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgICBjb250Mi50aGVuKChzaGFkb3cpID0+IHtcbiAgICAgICAgc2hhZG93ID0gdGhpcy5jcmVhdGVQc2V1ZG9lbGVtZW50U2hhZG93KFxuICAgICAgICAgIGVsZW1lbnQsXG4gICAgICAgICAgaXNSb290LFxuICAgICAgICAgIGNhc2NTdHlsZSxcbiAgICAgICAgICBjb21wdXRlZFN0eWxlLFxuICAgICAgICAgIHN0eWxlcixcbiAgICAgICAgICBjb250ZXh0LFxuICAgICAgICAgIHNoYWRvd0NvbnRleHQsXG4gICAgICAgICAgc2hhZG93LFxuICAgICAgICApO1xuICAgICAgICBmcmFtZS5maW5pc2goc2hhZG93KTtcbiAgICAgIH0pO1xuICAgIH0pO1xuICAgIHJldHVybiBmcmFtZS5yZXN1bHQoKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBAb3ZlcnJpZGVcbiAgICovXG4gIHNldFZpZXdSb290KHZpZXdSb290OiBFbGVtZW50LCBpc0Zvb3Rub3RlOiBib29sZWFuKSB7XG4gICAgdGhpcy52aWV3Um9vdCA9IHZpZXdSb290O1xuICAgIHRoaXMuaXNGb290bm90ZSA9IGlzRm9vdG5vdGU7XG4gIH1cblxuICAvKipcbiAgICogQHJldHVybiB2ZXJ0aWNhbFxuICAgKi9cbiAgY29tcHV0ZVN0eWxlKFxuICAgIHZlcnRpY2FsOiBib29sZWFuLFxuICAgIHJ0bDogYm9vbGVhbixcbiAgICBzdHlsZTogQ3NzQ2FzY2FkZS5FbGVtZW50U3R5bGUsXG4gICAgY29tcHV0ZWRTdHlsZTogeyBba2V5OiBzdHJpbmddOiBDc3MuVmFsIH0sXG4gICk6IGJvb2xlYW4ge1xuICAgIGNvbnN0IGNvbnRleHQgPSB0aGlzLmNvbnRleHQ7XG4gICAgY29uc3QgY2FzY01hcCA9IENzc0Nhc2NhZGUuZmxhdHRlbkNhc2NhZGVkU3R5bGUoXG4gICAgICBzdHlsZSxcbiAgICAgIGNvbnRleHQsXG4gICAgICB0aGlzLnJlZ2lvbklkcyxcbiAgICAgIHRoaXMuaXNGb290bm90ZSxcbiAgICAgIHRoaXMubm9kZUNvbnRleHQsXG4gICAgKTtcbiAgICB2ZXJ0aWNhbCA9IENzc0Nhc2NhZGUuaXNWZXJ0aWNhbChjYXNjTWFwLCBjb250ZXh0LCB2ZXJ0aWNhbCk7XG4gICAgcnRsID0gQ3NzQ2FzY2FkZS5pc1J0bChjYXNjTWFwLCBjb250ZXh0LCBydGwpO1xuICAgIENzc0Nhc2NhZGUuY29udmVydFRvUGh5c2ljYWwoXG4gICAgICBjYXNjTWFwLFxuICAgICAgY29tcHV0ZWRTdHlsZSxcbiAgICAgIHZlcnRpY2FsLFxuICAgICAgcnRsLFxuICAgICAgKG5hbWUsIGNhc2NWYWwpID0+IHtcbiAgICAgICAgbGV0IHZhbHVlID0gY2FzY1ZhbC5ldmFsdWF0ZShjb250ZXh0LCBuYW1lKTtcbiAgICAgICAgaWYgKG5hbWUgPT0gXCJmb250LWZhbWlseVwiKSB7XG4gICAgICAgICAgdmFsdWUgPSB0aGlzLmRvY0ZhY2VzLmZpbHRlckZvbnRGYW1pbHkodmFsdWUpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB2YWx1ZTtcbiAgICAgIH0sXG4gICAgKTtcblxuICAgIC8vIENvbXB1dGUgdmFsdWVzIG9mIGRpc3BsYXksIHBvc2l0aW9uIGFuZCBmbG9hdFxuICAgIGNvbnN0IHBvc2l0aW9uID0gY29tcHV0ZWRTdHlsZVtcInBvc2l0aW9uXCJdIGFzIENzcy5JZGVudDtcbiAgICBjb25zdCBmbG9hdCA9IGNvbXB1dGVkU3R5bGVbXCJmbG9hdFwiXSBhcyBDc3MuSWRlbnQ7XG4gICAgY29uc3QgZGlzcGxheVZhbHVlcyA9IERpc3BsYXkuZ2V0Q29tcHV0ZWREaXNsYXlWYWx1ZShcbiAgICAgIChjb21wdXRlZFN0eWxlW1wiZGlzcGxheVwiXSBhcyBDc3MuSWRlbnQpIHx8IENzcy5pZGVudC5pbmxpbmUsXG4gICAgICBwb3NpdGlvbixcbiAgICAgIGZsb2F0LFxuICAgICAgdGhpcy5zb3VyY2VOb2RlID09PSB0aGlzLnhtbGRvYy5yb290LFxuICAgICk7XG4gICAgW1wiZGlzcGxheVwiLCBcInBvc2l0aW9uXCIsIFwiZmxvYXRcIl0uZm9yRWFjaCgobmFtZSkgPT4ge1xuICAgICAgaWYgKGRpc3BsYXlWYWx1ZXNbbmFtZV0pIHtcbiAgICAgICAgY29tcHV0ZWRTdHlsZVtuYW1lXSA9IGRpc3BsYXlWYWx1ZXNbbmFtZV07XG4gICAgICB9XG4gICAgfSk7XG4gICAgcmV0dXJuIHZlcnRpY2FsO1xuICB9XG5cbiAgcHJpdmF0ZSBpbmhlcml0RnJvbVNvdXJjZVBhcmVudChcbiAgICBlbGVtZW50U3R5bGU6IENzc0Nhc2NhZGUuRWxlbWVudFN0eWxlLFxuICApOiB7IGxhbmc6IHN0cmluZyB8IG51bGw7IGVsZW1lbnRTdHlsZTogQ3NzQ2FzY2FkZS5FbGVtZW50U3R5bGUgfSB7XG4gICAgbGV0IG5vZGUgPSB0aGlzLm5vZGVDb250ZXh0LnNvdXJjZU5vZGU7XG4gICAgY29uc3Qgc3R5bGVzID0gW107XG4gICAgbGV0IGxhbmc6IHN0cmluZyB8IG51bGwgPSBudWxsO1xuXG4gICAgLy8gVE9ETzogdGhpcyBpcyBoYWNreS4gV2UgbmVlZCB0byByZWNvdmVyIHRoZSBwYXRoIHRocm91Z2ggdGhlIHNoYWRvd1xuICAgIC8vIHRyZWVzLCBidXQgd2UgZG8gbm90IGhhdmUgdGhlIGZ1bGwgc2hhZG93IHRyZWUgc3RydWN0dXJlIGF0IHRoaXMgcG9pbnQuXG4gICAgLy8gVGhpcyBjb2RlIGhhbmRsZXMgY29taW5nIG91dCBvZiB0aGUgc2hhZG93IHRyZWVzLCBidXQgZG9lcyBub3QgZ28gYmFjayBpblxuICAgIC8vICh0aHJvdWdoIHNoYWRvdzpjb250ZW50IGVsZW1lbnQpLlxuICAgIGxldCBzaGFkb3dDb250ZXh0ID0gdGhpcy5ub2RlQ29udGV4dC5zaGFkb3dDb250ZXh0O1xuICAgIGxldCBzdGVwcyA9IC0xO1xuICAgIHdoaWxlIChub2RlICYmIG5vZGUubm9kZVR5cGUgPT0gMSkge1xuICAgICAgY29uc3Qgc2hhZG93Um9vdCA9IHNoYWRvd0NvbnRleHQgJiYgc2hhZG93Q29udGV4dC5yb290ID09IG5vZGU7XG4gICAgICBpZiAoIXNoYWRvd1Jvb3QgfHwgc2hhZG93Q29udGV4dC50eXBlID09IFZ0cmVlLlNoYWRvd1R5cGUuUk9PVExFU1MpIHtcbiAgICAgICAgY29uc3Qgc3R5bGVyID0gc2hhZG93Q29udGV4dFxuICAgICAgICAgID8gKHNoYWRvd0NvbnRleHQuc3R5bGVyIGFzIENzc1N0eWxlci5BYnN0cmFjdFN0eWxlcilcbiAgICAgICAgICA6IHRoaXMuc3R5bGVyO1xuICAgICAgICBjb25zdCBub2RlU3R5bGUgPSBzdHlsZXIuZ2V0U3R5bGUobm9kZSBhcyBFbGVtZW50LCBmYWxzZSk7XG4gICAgICAgIHN0eWxlcy5wdXNoKG5vZGVTdHlsZSk7XG4gICAgICAgIGxhbmcgPSBsYW5nIHx8IEJhc2UuZ2V0TGFuZ0F0dHJpYnV0ZShub2RlIGFzIEVsZW1lbnQpO1xuICAgICAgfVxuICAgICAgaWYgKHNoYWRvd1Jvb3QpIHtcbiAgICAgICAgbm9kZSA9IHNoYWRvd0NvbnRleHQub3duZXI7XG4gICAgICAgIHNoYWRvd0NvbnRleHQgPSBzaGFkb3dDb250ZXh0LnBhcmVudFNoYWRvdztcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIG5vZGUgPSBub2RlLnBhcmVudE5vZGU7XG4gICAgICAgIHN0ZXBzKys7XG4gICAgICB9XG4gICAgfVxuICAgIGNvbnN0IGlzUm9vdCA9IHN0ZXBzID09PSAwO1xuICAgIGNvbnN0IGZvbnRTaXplID0gdGhpcy5jb250ZXh0LnF1ZXJ5VW5pdFNpemUoXCJlbVwiLCBpc1Jvb3QpO1xuICAgIGNvbnN0IHByb3BzID0ge1xuICAgICAgXCJmb250LXNpemVcIjogbmV3IENzc0Nhc2NhZGUuQ2FzY2FkZVZhbHVlKFxuICAgICAgICBuZXcgQ3NzLk51bWVyaWMoZm9udFNpemUsIFwicHhcIiksXG4gICAgICAgIDAsXG4gICAgICApLFxuICAgIH0gYXMgQ3NzQ2FzY2FkZS5FbGVtZW50U3R5bGU7XG4gICAgY29uc3QgaW5oZXJpdGFuY2VWaXNpdG9yID0gbmV3IENzc0Nhc2NhZGUuSW5oZXJpdGFuY2VWaXNpdG9yKFxuICAgICAgcHJvcHMsXG4gICAgICB0aGlzLmNvbnRleHQsXG4gICAgKTtcbiAgICBmb3IgKGxldCBpID0gc3R5bGVzLmxlbmd0aCAtIDE7IGkgPj0gMDsgLS1pKSB7XG4gICAgICBjb25zdCBzdHlsZSA9IHN0eWxlc1tpXTtcbiAgICAgIGNvbnN0IHByb3BMaXN0ID0gW107XG4gICAgICBmb3IgKGNvbnN0IHByb3BOYW1lIGluIHN0eWxlKSB7XG4gICAgICAgIGlmIChDc3NDYXNjYWRlLmlzSW5oZXJpdGVkKHByb3BOYW1lKSkge1xuICAgICAgICAgIHByb3BMaXN0LnB1c2gocHJvcE5hbWUpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICBwcm9wTGlzdC5zb3J0KENzcy5wcm9jZXNzaW5nT3JkZXJGbik7XG4gICAgICBmb3IgKGNvbnN0IG5hbWUgb2YgcHJvcExpc3QpIHtcbiAgICAgICAgaW5oZXJpdGFuY2VWaXNpdG9yLnNldFByb3BOYW1lKG5hbWUpO1xuICAgICAgICBjb25zdCB2YWx1ZSA9IENzc0Nhc2NhZGUuZ2V0UHJvcChzdHlsZSwgbmFtZSk7XG4gICAgICAgIGlmICh2YWx1ZS52YWx1ZSAhPT0gQ3NzLmlkZW50LmluaGVyaXQpIHtcbiAgICAgICAgICBwcm9wc1tuYW1lXSA9IHZhbHVlLmZpbHRlclZhbHVlKGluaGVyaXRhbmNlVmlzaXRvcik7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gICAgZm9yIChjb25zdCBzbmFtZSBpbiBlbGVtZW50U3R5bGUpIHtcbiAgICAgIGlmICghQ3NzQ2FzY2FkZS5pc0luaGVyaXRlZChzbmFtZSkpIHtcbiAgICAgICAgcHJvcHNbc25hbWVdID0gZWxlbWVudFN0eWxlW3NuYW1lXTtcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIHsgbGFuZywgZWxlbWVudFN0eWxlOiBwcm9wcyB9O1xuICB9XG5cbiAgcmVzb2x2ZVVSTCh1cmw6IHN0cmluZyk6IHN0cmluZyB7XG4gICAgdXJsID0gQmFzZS5yZXNvbHZlVVJMKHVybCwgdGhpcy54bWxkb2MudXJsKTtcbiAgICByZXR1cm4gdGhpcy5mYWxsYmFja01hcFt1cmxdIHx8IHVybDtcbiAgfVxuXG4gIGluaGVyaXRMYW5nQXR0cmlidXRlKCkge1xuICAgIHRoaXMubm9kZUNvbnRleHQubGFuZyA9XG4gICAgICBCYXNlLmdldExhbmdBdHRyaWJ1dGUodGhpcy5ub2RlQ29udGV4dC5zb3VyY2VOb2RlIGFzIEVsZW1lbnQpIHx8XG4gICAgICAodGhpcy5ub2RlQ29udGV4dC5wYXJlbnQgJiYgdGhpcy5ub2RlQ29udGV4dC5wYXJlbnQubGFuZykgfHxcbiAgICAgIHRoaXMubm9kZUNvbnRleHQubGFuZztcbiAgfVxuXG4gIHRyYW5zZmVyUG9seWZpbGxlZEluaGVyaXRlZFByb3BzKGNvbXB1dGVkU3R5bGU6IHsgW2tleTogc3RyaW5nXTogQ3NzLlZhbCB9KSB7XG4gICAgY29uc3QgcG9seWZpbGxlZEluaGVyaXRlZFByb3BzID0gQ3NzQ2FzY2FkZS5nZXRQb2x5ZmlsbGVkSW5oZXJpdGVkUHJvcHMoKS5maWx0ZXIoXG4gICAgICAobmFtZSkgPT4gY29tcHV0ZWRTdHlsZVtuYW1lXSxcbiAgICApO1xuICAgIGlmIChwb2x5ZmlsbGVkSW5oZXJpdGVkUHJvcHMubGVuZ3RoKSB7XG4gICAgICBsZXQgcHJvcHMgPSB0aGlzLm5vZGVDb250ZXh0LmluaGVyaXRlZFByb3BzO1xuICAgICAgaWYgKHRoaXMubm9kZUNvbnRleHQucGFyZW50KSB7XG4gICAgICAgIHByb3BzID0gdGhpcy5ub2RlQ29udGV4dC5pbmhlcml0ZWRQcm9wcyA9IHt9O1xuICAgICAgICBmb3IgKGNvbnN0IG4gaW4gdGhpcy5ub2RlQ29udGV4dC5wYXJlbnQuaW5oZXJpdGVkUHJvcHMpIHtcbiAgICAgICAgICBwcm9wc1tuXSA9IHRoaXMubm9kZUNvbnRleHQucGFyZW50LmluaGVyaXRlZFByb3BzW25dO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICBwb2x5ZmlsbGVkSW5oZXJpdGVkUHJvcHMuZm9yRWFjaCgobmFtZSkgPT4ge1xuICAgICAgICBjb25zdCB2YWx1ZSA9IGNvbXB1dGVkU3R5bGVbbmFtZV07XG4gICAgICAgIGlmICh2YWx1ZSkge1xuICAgICAgICAgIGlmICh2YWx1ZSBpbnN0YW5jZW9mIENzcy5JbnQpIHtcbiAgICAgICAgICAgIHByb3BzW25hbWVdID0gKHZhbHVlIGFzIENzcy5JbnQpLm51bTtcbiAgICAgICAgICB9IGVsc2UgaWYgKHZhbHVlIGluc3RhbmNlb2YgQ3NzLklkZW50KSB7XG4gICAgICAgICAgICBwcm9wc1tuYW1lXSA9ICh2YWx1ZSBhcyBDc3MuSWRlbnQpLm5hbWU7XG4gICAgICAgICAgfSBlbHNlIGlmICh2YWx1ZSBpbnN0YW5jZW9mIENzcy5OdW1lcmljKSB7XG4gICAgICAgICAgICBjb25zdCBudW1lcmljVmFsID0gdmFsdWUgYXMgQ3NzLk51bWVyaWM7XG4gICAgICAgICAgICBzd2l0Y2ggKG51bWVyaWNWYWwudW5pdCkge1xuICAgICAgICAgICAgICBjYXNlIFwiZHBpXCI6XG4gICAgICAgICAgICAgIGNhc2UgXCJkcGNtXCI6XG4gICAgICAgICAgICAgIGNhc2UgXCJkcHB4XCI6XG4gICAgICAgICAgICAgICAgcHJvcHNbbmFtZV0gPVxuICAgICAgICAgICAgICAgICAgbnVtZXJpY1ZhbC5udW0gKiBFeHBycy5kZWZhdWx0VW5pdFNpemVzW251bWVyaWNWYWwudW5pdF07XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHByb3BzW25hbWVdID0gdmFsdWU7XG4gICAgICAgICAgfVxuICAgICAgICAgIGRlbGV0ZSBjb21wdXRlZFN0eWxlW25hbWVdO1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgICB9XG4gIH1cblxuICByZXNvbHZlRm9ybWF0dGluZ0NvbnRleHQoXG4gICAgbm9kZUNvbnRleHQ6IFZ0cmVlLk5vZGVDb250ZXh0LFxuICAgIGZpcnN0VGltZTogYm9vbGVhbixcbiAgICBkaXNwbGF5OiBDc3MuSWRlbnQsXG4gICAgcG9zaXRpb246IENzcy5JZGVudCxcbiAgICBmbG9hdDogQ3NzLklkZW50LFxuICAgIGlzUm9vdDogYm9vbGVhbixcbiAgKSB7XG4gICAgY29uc3QgaG9va3M6IFBsdWdpbi5SZXNvbHZlRm9ybWF0dGluZ0NvbnRleHRIb29rW10gPSBQbHVnaW4uZ2V0SG9va3NGb3JOYW1lKFxuICAgICAgUGx1Z2luLkhPT0tTLlJFU09MVkVfRk9STUFUVElOR19DT05URVhULFxuICAgICk7XG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCBob29rcy5sZW5ndGg7IGkrKykge1xuICAgICAgY29uc3QgZm9ybWF0dGluZ0NvbnRleHQgPSBob29rc1tpXShcbiAgICAgICAgbm9kZUNvbnRleHQsXG4gICAgICAgIGZpcnN0VGltZSxcbiAgICAgICAgZGlzcGxheSxcbiAgICAgICAgcG9zaXRpb24sXG4gICAgICAgIGZsb2F0LFxuICAgICAgICBpc1Jvb3QsXG4gICAgICApO1xuICAgICAgaWYgKGZvcm1hdHRpbmdDb250ZXh0KSB7XG4gICAgICAgIG5vZGVDb250ZXh0LmZvcm1hdHRpbmdDb250ZXh0ID0gZm9ybWF0dGluZ0NvbnRleHQ7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICAvKipcbiAgICogQHJldHVybiBob2xkaW5nIHRydWUgaWYgY2hpbGRyZW4gc2hvdWxkIGJlIHByb2Nlc3NlZFxuICAgKi9cbiAgcHJpdmF0ZSBjcmVhdGVFbGVtZW50VmlldyhcbiAgICBmaXJzdFRpbWU6IGJvb2xlYW4sXG4gICAgYXRVbmZvcmNlZEJyZWFrOiBib29sZWFuLFxuICApOiBUYXNrLlJlc3VsdDxib29sZWFuPiB7XG4gICAgbGV0IG5lZWRUb1Byb2Nlc3NDaGlsZHJlbiA9IHRydWU7XG4gICAgY29uc3QgZnJhbWU6IFRhc2suRnJhbWU8Ym9vbGVhbj4gPSBUYXNrLm5ld0ZyYW1lKFwiY3JlYXRlRWxlbWVudFZpZXdcIik7XG5cbiAgICAvLyBGaWd1cmUgb3V0IGVsZW1lbnQncyBzdHlsZXNcbiAgICBsZXQgZWxlbWVudCA9IHRoaXMuc291cmNlTm9kZSBhcyBFbGVtZW50O1xuICAgIGNvbnN0IHN0eWxlciA9IHRoaXMubm9kZUNvbnRleHQuc2hhZG93Q29udGV4dFxuICAgICAgPyAodGhpcy5ub2RlQ29udGV4dC5zaGFkb3dDb250ZXh0LnN0eWxlciBhcyBDc3NTdHlsZXIuQWJzdHJhY3RTdHlsZXIpXG4gICAgICA6IHRoaXMuc3R5bGVyO1xuICAgIGxldCBlbGVtZW50U3R5bGUgPSBzdHlsZXIuZ2V0U3R5bGUoZWxlbWVudCwgZmFsc2UpO1xuICAgIGlmICghdGhpcy5ub2RlQ29udGV4dC5zaGFkb3dDb250ZXh0KSB7XG4gICAgICBjb25zdCBvZmZzZXQgPSB0aGlzLnhtbGRvYy5nZXRFbGVtZW50T2Zmc2V0KGVsZW1lbnQpO1xuICAgICAgTWF0Y2hlcnMuTnRoRnJhZ21lbnRNYXRjaGVyLnJlZ2lzdGVyRnJhZ21lbnRJbmRleChcbiAgICAgICAgb2Zmc2V0LFxuICAgICAgICB0aGlzLm5vZGVDb250ZXh0LmZyYWdtZW50SW5kZXgsXG4gICAgICAgIDAsXG4gICAgICApO1xuICAgIH1cbiAgICBjb25zdCBjb21wdXRlZFN0eWxlID0ge307XG4gICAgaWYgKCF0aGlzLm5vZGVDb250ZXh0LnBhcmVudCkge1xuICAgICAgY29uc3QgaW5oZXJpdGVkVmFsdWVzID0gdGhpcy5pbmhlcml0RnJvbVNvdXJjZVBhcmVudChlbGVtZW50U3R5bGUpO1xuICAgICAgZWxlbWVudFN0eWxlID0gaW5oZXJpdGVkVmFsdWVzLmVsZW1lbnRTdHlsZTtcbiAgICAgIHRoaXMubm9kZUNvbnRleHQubGFuZyA9IGluaGVyaXRlZFZhbHVlcy5sYW5nO1xuICAgIH1cbiAgICBjb25zdCBmbG9hdFJlZmVyZW5jZSA9XG4gICAgICBlbGVtZW50U3R5bGVbXCJmbG9hdC1yZWZlcmVuY2VcIl0gJiZcbiAgICAgIFBhZ2VGbG9hdHMuZmxvYXRSZWZlcmVuY2VPZihcbiAgICAgICAgZWxlbWVudFN0eWxlW1wiZmxvYXQtcmVmZXJlbmNlXCJdLnZhbHVlLnRvU3RyaW5nKCksXG4gICAgICApO1xuICAgIGlmIChcbiAgICAgIHRoaXMubm9kZUNvbnRleHQucGFyZW50ICYmXG4gICAgICBmbG9hdFJlZmVyZW5jZSAmJlxuICAgICAgUGFnZUZsb2F0cy5pc1BhZ2VGbG9hdChmbG9hdFJlZmVyZW5jZSlcbiAgICApIHtcbiAgICAgIC8vIFNpbmNlIGEgcGFnZSBmbG9hdCB3aWxsIGJlIGRldGFjaGVkIGZyb20gYSB2aWV3IG5vZGUgb2YgaXRzIHBhcmVudCxcbiAgICAgIC8vIGluaGVyaXRlZCBwcm9wZXJ0aWVzIG5lZWQgdG8gYmUgaW5oZXJpdGVkIGZyb20gaXRzIHNvdXJjZSBwYXJlbnQuXG4gICAgICBjb25zdCBpbmhlcml0ZWRWYWx1ZXMgPSB0aGlzLmluaGVyaXRGcm9tU291cmNlUGFyZW50KGVsZW1lbnRTdHlsZSk7XG4gICAgICBlbGVtZW50U3R5bGUgPSBpbmhlcml0ZWRWYWx1ZXMuZWxlbWVudFN0eWxlO1xuICAgICAgdGhpcy5ub2RlQ29udGV4dC5sYW5nID0gaW5oZXJpdGVkVmFsdWVzLmxhbmc7XG4gICAgfVxuICAgIHRoaXMubm9kZUNvbnRleHQudmVydGljYWwgPSB0aGlzLmNvbXB1dGVTdHlsZShcbiAgICAgIHRoaXMubm9kZUNvbnRleHQudmVydGljYWwsXG4gICAgICB0aGlzLm5vZGVDb250ZXh0LmRpcmVjdGlvbiA9PT0gXCJydGxcIixcbiAgICAgIGVsZW1lbnRTdHlsZSxcbiAgICAgIGNvbXB1dGVkU3R5bGUsXG4gICAgKTtcbiAgICBzdHlsZXIucHJvY2Vzc0NvbnRlbnQoZWxlbWVudCwgY29tcHV0ZWRTdHlsZSk7XG4gICAgdGhpcy50cmFuc2ZlclBvbHlmaWxsZWRJbmhlcml0ZWRQcm9wcyhjb21wdXRlZFN0eWxlKTtcbiAgICB0aGlzLmluaGVyaXRMYW5nQXR0cmlidXRlKCk7XG4gICAgaWYgKGNvbXB1dGVkU3R5bGVbXCJkaXJlY3Rpb25cIl0pIHtcbiAgICAgIHRoaXMubm9kZUNvbnRleHQuZGlyZWN0aW9uID0gY29tcHV0ZWRTdHlsZVtcImRpcmVjdGlvblwiXS50b1N0cmluZygpO1xuICAgIH1cblxuICAgIC8vIFNvcnQgb3V0IHRoZSBwcm9wZXJ0aWVzXG4gICAgY29uc3QgZmxvdyA9IGNvbXB1dGVkU3R5bGVbXCJmbG93LWludG9cIl07XG4gICAgaWYgKGZsb3cgJiYgZmxvdy50b1N0cmluZygpICE9IHRoaXMuZmxvd05hbWUpIHtcbiAgICAgIC8vIGZvcmVpZ24gZmxvdywgZG9uJ3QgY3JlYXRlIGEgdmlld1xuICAgICAgZnJhbWUuZmluaXNoKGZhbHNlKTtcbiAgICAgIHJldHVybiBmcmFtZS5yZXN1bHQoKTtcbiAgICB9XG4gICAgbGV0IGRpc3BsYXkgPSBjb21wdXRlZFN0eWxlW1wiZGlzcGxheVwiXTtcbiAgICBpZiAoZGlzcGxheSA9PT0gQ3NzLmlkZW50Lm5vbmUpIHtcbiAgICAgIC8vIG5vIGNvbnRlbnRcbiAgICAgIGZyYW1lLmZpbmlzaChmYWxzZSk7XG4gICAgICByZXR1cm4gZnJhbWUucmVzdWx0KCk7XG4gICAgfVxuICAgIGNvbnN0IGlzUm9vdCA9IHRoaXMubm9kZUNvbnRleHQucGFyZW50ID09IG51bGw7XG4gICAgdGhpcy5ub2RlQ29udGV4dC5mbGV4Q29udGFpbmVyID0gZGlzcGxheSA9PT0gQ3NzLmlkZW50LmZsZXg7XG4gICAgdGhpcy5jcmVhdGVTaGFkb3dzKFxuICAgICAgZWxlbWVudCxcbiAgICAgIGlzUm9vdCxcbiAgICAgIGVsZW1lbnRTdHlsZSxcbiAgICAgIGNvbXB1dGVkU3R5bGUsXG4gICAgICBzdHlsZXIsXG4gICAgICB0aGlzLmNvbnRleHQsXG4gICAgICB0aGlzLm5vZGVDb250ZXh0LnNoYWRvd0NvbnRleHQsXG4gICAgKS50aGVuKChzaGFkb3dQYXJhbSkgPT4ge1xuICAgICAgdGhpcy5ub2RlQ29udGV4dC5ub2RlU2hhZG93ID0gc2hhZG93UGFyYW07XG4gICAgICBjb25zdCBwb3NpdGlvbiA9IGNvbXB1dGVkU3R5bGVbXCJwb3NpdGlvblwiXTtcbiAgICAgIGxldCBmbG9hdFNpZGUgPSBjb21wdXRlZFN0eWxlW1wiZmxvYXRcIl07XG4gICAgICBsZXQgY2xlYXJTaWRlID0gY29tcHV0ZWRTdHlsZVtcImNsZWFyXCJdO1xuICAgICAgY29uc3Qgd3JpdGluZ01vZGUgPSB0aGlzLm5vZGVDb250ZXh0LnZlcnRpY2FsXG4gICAgICAgID8gQ3NzLmlkZW50LnZlcnRpY2FsX3JsXG4gICAgICAgIDogQ3NzLmlkZW50Lmhvcml6b250YWxfdGI7XG4gICAgICBjb25zdCBwYXJlbnRXcml0aW5nTW9kZSA9IHRoaXMubm9kZUNvbnRleHQucGFyZW50XG4gICAgICAgID8gdGhpcy5ub2RlQ29udGV4dC5wYXJlbnQudmVydGljYWxcbiAgICAgICAgICA/IENzcy5pZGVudC52ZXJ0aWNhbF9ybFxuICAgICAgICAgIDogQ3NzLmlkZW50Lmhvcml6b250YWxfdGJcbiAgICAgICAgOiB3cml0aW5nTW9kZTtcbiAgICAgIGNvbnN0IGlzRmxvd1Jvb3QgPSBEaXNwbGF5LmlzRmxvd1Jvb3QoZWxlbWVudCk7XG4gICAgICB0aGlzLm5vZGVDb250ZXh0LmVzdGFibGlzaGVzQkZDID0gRGlzcGxheS5lc3RhYmxpc2hlc0JGQyhcbiAgICAgICAgZGlzcGxheSxcbiAgICAgICAgcG9zaXRpb24sXG4gICAgICAgIGZsb2F0U2lkZSxcbiAgICAgICAgY29tcHV0ZWRTdHlsZVtcIm92ZXJmbG93XCJdLFxuICAgICAgICB3cml0aW5nTW9kZSxcbiAgICAgICAgcGFyZW50V3JpdGluZ01vZGUsXG4gICAgICAgIGlzRmxvd1Jvb3QsXG4gICAgICApO1xuICAgICAgdGhpcy5ub2RlQ29udGV4dC5jb250YWluaW5nQmxvY2tGb3JBYnNvbHV0ZSA9IERpc3BsYXkuZXN0YWJsaXNoZXNDQkZvckFic29sdXRlKFxuICAgICAgICBwb3NpdGlvbixcbiAgICAgICk7XG4gICAgICBpZiAoXG4gICAgICAgIHRoaXMubm9kZUNvbnRleHQuaXNJbnNpZGVCRkMoKSAmJlxuICAgICAgICBmbG9hdFNpZGUgIT09IENzcy5pZGVudC5mb290bm90ZSAmJlxuICAgICAgICAhKGZsb2F0UmVmZXJlbmNlICYmIFBhZ2VGbG9hdHMuaXNQYWdlRmxvYXQoZmxvYXRSZWZlcmVuY2UpKVxuICAgICAgKSB7XG4gICAgICAgIC8vIFdoZW4gdGhlIGVsZW1lbnQgaXMgYWxyZWFkeSBpbnNpZGUgYSBibG9jayBmb3JtYXR0aW5nIGNvbnRleHRcbiAgICAgICAgLy8gKGV4Y2VwdCBvbmUgZnJvbSB0aGUgcm9vdCksIGZsb2F0IGFuZCBjbGVhciBjYW4gYmUgY29udHJvbGxlZCBieVxuICAgICAgICAvLyB0aGUgYnJvd3NlciBhbmQgd2UgZG9uJ3QgbmVlZCB0byBjYXJlLlxuICAgICAgICBmbG9hdFNpZGUgPSBudWxsO1xuICAgICAgICBjbGVhclNpZGUgPSBudWxsO1xuICAgICAgfVxuICAgICAgbGV0IGZsb2F0aW5nID1cbiAgICAgICAgZmxvYXRTaWRlID09PSBDc3MuaWRlbnQubGVmdCB8fFxuICAgICAgICBmbG9hdFNpZGUgPT09IENzcy5pZGVudC5yaWdodCB8fFxuICAgICAgICBmbG9hdFNpZGUgPT09IENzcy5pZGVudC50b3AgfHxcbiAgICAgICAgZmxvYXRTaWRlID09PSBDc3MuaWRlbnQuYm90dG9tIHx8XG4gICAgICAgIGZsb2F0U2lkZSA9PT0gQ3NzLmlkZW50LmlubGluZV9zdGFydCB8fFxuICAgICAgICBmbG9hdFNpZGUgPT09IENzcy5pZGVudC5pbmxpbmVfZW5kIHx8XG4gICAgICAgIGZsb2F0U2lkZSA9PT0gQ3NzLmlkZW50LmJsb2NrX3N0YXJ0IHx8XG4gICAgICAgIGZsb2F0U2lkZSA9PT0gQ3NzLmlkZW50LmJsb2NrX2VuZCB8fFxuICAgICAgICBmbG9hdFNpZGUgPT09IENzcy5pZGVudC5zbmFwX2Jsb2NrIHx8XG4gICAgICAgIGZsb2F0U2lkZSA9PT0gQ3NzLmlkZW50LmZvb3Rub3RlO1xuICAgICAgaWYgKGZsb2F0U2lkZSkge1xuICAgICAgICAvLyBEb24ndCB3YW50IHRvIHNldCBpdCBpbiB2aWV3IERPTSBDU1MuXG4gICAgICAgIGRlbGV0ZSBjb21wdXRlZFN0eWxlW1wiZmxvYXRcIl07XG4gICAgICAgIGlmIChmbG9hdFNpZGUgPT09IENzcy5pZGVudC5mb290bm90ZSkge1xuICAgICAgICAgIGlmICh0aGlzLmlzRm9vdG5vdGUpIHtcbiAgICAgICAgICAgIC8vIE5vIGZvb3Rub3RlcyBpbnNpZGUgZm9vdG5vdGVzLiB0aGlzIGlzIG1vc3QgbGlrZWx5IHRoZSByb290XG4gICAgICAgICAgICAvLyBvZiB0aGUgZm9vdG5vdGUgYm9keSBiZWluZyByZW5kZXJlZCBpbiBmb290bm90ZSBhcmVhLiBUcmVhdFxuICAgICAgICAgICAgLy8gYXMgYmxvY2suXG4gICAgICAgICAgICBmbG9hdGluZyA9IGZhbHNlO1xuICAgICAgICAgICAgY29tcHV0ZWRTdHlsZVtcImRpc3BsYXlcIl0gPSBDc3MuaWRlbnQuYmxvY2s7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGNvbXB1dGVkU3R5bGVbXCJkaXNwbGF5XCJdID0gQ3NzLmlkZW50LmlubGluZTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIGlmIChjbGVhclNpZGUpIHtcbiAgICAgICAgaWYgKGNsZWFyU2lkZSA9PT0gQ3NzLmlkZW50LmluaGVyaXQpIHtcbiAgICAgICAgICBpZiAodGhpcy5ub2RlQ29udGV4dC5wYXJlbnQgJiYgdGhpcy5ub2RlQ29udGV4dC5wYXJlbnQuY2xlYXJTaWRlKSB7XG4gICAgICAgICAgICBjbGVhclNpZGUgPSBDc3MuZ2V0TmFtZSh0aGlzLm5vZGVDb250ZXh0LnBhcmVudC5jbGVhclNpZGUpO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBpZiAoXG4gICAgICAgICAgY2xlYXJTaWRlID09PSBDc3MuaWRlbnQubGVmdCB8fFxuICAgICAgICAgIGNsZWFyU2lkZSA9PT0gQ3NzLmlkZW50LnJpZ2h0IHx8XG4gICAgICAgICAgY2xlYXJTaWRlID09PSBDc3MuaWRlbnQudG9wIHx8XG4gICAgICAgICAgY2xlYXJTaWRlID09PSBDc3MuaWRlbnQuYm90dG9tIHx8XG4gICAgICAgICAgY2xlYXJTaWRlID09PSBDc3MuaWRlbnQuYm90aCB8fFxuICAgICAgICAgIGNsZWFyU2lkZSA9PT0gQ3NzLmlkZW50LmFsbCB8fFxuICAgICAgICAgIGNsZWFyU2lkZSA9PT0gQ3NzLmlkZW50LnNhbWVcbiAgICAgICAgKSB7XG4gICAgICAgICAgZGVsZXRlIGNvbXB1dGVkU3R5bGVbXCJjbGVhclwiXTtcbiAgICAgICAgICBpZiAoXG4gICAgICAgICAgICBjb21wdXRlZFN0eWxlW1wiZGlzcGxheVwiXSAmJlxuICAgICAgICAgICAgY29tcHV0ZWRTdHlsZVtcImRpc3BsYXlcIl0gIT0gQ3NzLmlkZW50LmlubGluZVxuICAgICAgICAgICkge1xuICAgICAgICAgICAgdGhpcy5ub2RlQ29udGV4dC5jbGVhclNpZGUgPSBjbGVhclNpZGUudG9TdHJpbmcoKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIGNvbnN0IGxpc3RJdGVtID1cbiAgICAgICAgZGlzcGxheSA9PT0gQ3NzLmlkZW50Lmxpc3RfaXRlbSAmJiBjb21wdXRlZFN0eWxlW1widWEtbGlzdC1pdGVtLWNvdW50XCJdO1xuICAgICAgaWYgKFxuICAgICAgICBmbG9hdGluZyB8fFxuICAgICAgICAoY29tcHV0ZWRTdHlsZVtcImJyZWFrLWluc2lkZVwiXSAmJlxuICAgICAgICAgIGNvbXB1dGVkU3R5bGVbXCJicmVhay1pbnNpZGVcIl0gIT09IENzcy5pZGVudC5hdXRvKVxuICAgICAgKSB7XG4gICAgICAgIHRoaXMubm9kZUNvbnRleHQuYnJlYWtQZW5hbHR5Kys7XG4gICAgICB9XG4gICAgICBpZiAoXG4gICAgICAgIGRpc3BsYXkgJiZcbiAgICAgICAgZGlzcGxheSAhPT0gQ3NzLmlkZW50LmlubGluZSAmJlxuICAgICAgICBEaXNwbGF5LmlzSW5saW5lTGV2ZWwoZGlzcGxheSlcbiAgICAgICkge1xuICAgICAgICAvLyBEb24ndCBicmVhayBpbnNpZGUgcnVieSwgaW5saW5lLWJsb2NrLCBldGMuXG4gICAgICAgIHRoaXMubm9kZUNvbnRleHQuYnJlYWtQZW5hbHR5Kys7XG4gICAgICB9XG4gICAgICB0aGlzLm5vZGVDb250ZXh0LmlubGluZSA9XG4gICAgICAgICghZmxvYXRpbmcgJiYgIWRpc3BsYXkpIHx8XG4gICAgICAgIERpc3BsYXkuaXNJbmxpbmVMZXZlbChkaXNwbGF5KSB8fFxuICAgICAgICBEaXNwbGF5LmlzUnVieUludGVybmFsRGlzcGxheShkaXNwbGF5KTtcbiAgICAgIHRoaXMubm9kZUNvbnRleHQuZGlzcGxheSA9IGRpc3BsYXkgPyBkaXNwbGF5LnRvU3RyaW5nKCkgOiBcImlubGluZVwiO1xuICAgICAgdGhpcy5ub2RlQ29udGV4dC5mbG9hdFNpZGUgPSBmbG9hdGluZyA/IGZsb2F0U2lkZS50b1N0cmluZygpIDogbnVsbDtcbiAgICAgIHRoaXMubm9kZUNvbnRleHQuZmxvYXRSZWZlcmVuY2UgPVxuICAgICAgICBmbG9hdFJlZmVyZW5jZSB8fCBQYWdlRmxvYXRzLkZsb2F0UmVmZXJlbmNlLklOTElORTtcbiAgICAgIHRoaXMubm9kZUNvbnRleHQuZmxvYXRNaW5XcmFwQmxvY2sgPVxuICAgICAgICBjb21wdXRlZFN0eWxlW1wiZmxvYXQtbWluLXdyYXAtYmxvY2tcIl0gfHwgbnVsbDtcbiAgICAgIHRoaXMubm9kZUNvbnRleHQuY29sdW1uU3BhbiA9IGNvbXB1dGVkU3R5bGVbXCJjb2x1bW4tc3BhblwiXTtcbiAgICAgIGlmICghdGhpcy5ub2RlQ29udGV4dC5pbmxpbmUpIHtcbiAgICAgICAgY29uc3QgYnJlYWtBZnRlciA9IGNvbXB1dGVkU3R5bGVbXCJicmVhay1hZnRlclwiXTtcbiAgICAgICAgaWYgKGJyZWFrQWZ0ZXIpIHtcbiAgICAgICAgICB0aGlzLm5vZGVDb250ZXh0LmJyZWFrQWZ0ZXIgPSBicmVha0FmdGVyLnRvU3RyaW5nKCk7XG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgYnJlYWtCZWZvcmUgPSBjb21wdXRlZFN0eWxlW1wiYnJlYWstYmVmb3JlXCJdO1xuICAgICAgICBpZiAoYnJlYWtCZWZvcmUpIHtcbiAgICAgICAgICB0aGlzLm5vZGVDb250ZXh0LmJyZWFrQmVmb3JlID0gYnJlYWtCZWZvcmUudG9TdHJpbmcoKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgdGhpcy5ub2RlQ29udGV4dC52ZXJ0aWNhbEFsaWduID1cbiAgICAgICAgKGNvbXB1dGVkU3R5bGVbXCJ2ZXJ0aWNhbC1hbGlnblwiXSAmJlxuICAgICAgICAgIGNvbXB1dGVkU3R5bGVbXCJ2ZXJ0aWNhbC1hbGlnblwiXS50b1N0cmluZygpKSB8fFxuICAgICAgICBcImJhc2VsaW5lXCI7XG4gICAgICB0aGlzLm5vZGVDb250ZXh0LmNhcHRpb25TaWRlID1cbiAgICAgICAgKGNvbXB1dGVkU3R5bGVbXCJjYXB0aW9uLXNpZGVcIl0gJiZcbiAgICAgICAgICBjb21wdXRlZFN0eWxlW1wiY2FwdGlvbi1zaWRlXCJdLnRvU3RyaW5nKCkpIHx8XG4gICAgICAgIFwidG9wXCI7XG4gICAgICBjb25zdCBib3JkZXJDb2xsYXBzZSA9IGNvbXB1dGVkU3R5bGVbXCJib3JkZXItY29sbGFwc2VcIl07XG4gICAgICBpZiAoIWJvcmRlckNvbGxhcHNlIHx8IGJvcmRlckNvbGxhcHNlID09PSBDc3MuZ2V0TmFtZShcInNlcGFyYXRlXCIpKSB7XG4gICAgICAgIGNvbnN0IGJvcmRlclNwYWNpbmcgPSBjb21wdXRlZFN0eWxlW1wiYm9yZGVyLXNwYWNpbmdcIl07XG4gICAgICAgIGxldCBpbmxpbmVCb3JkZXJTcGFjaW5nO1xuICAgICAgICBsZXQgYmxvY2tCb3JkZXJTcGFjaW5nO1xuICAgICAgICBpZiAoYm9yZGVyU3BhY2luZykge1xuICAgICAgICAgIGlmIChib3JkZXJTcGFjaW5nLmlzU3BhY2VMaXN0KCkpIHtcbiAgICAgICAgICAgIGlubGluZUJvcmRlclNwYWNpbmcgPSBib3JkZXJTcGFjaW5nLnZhbHVlc1swXTtcbiAgICAgICAgICAgIGJsb2NrQm9yZGVyU3BhY2luZyA9IGJvcmRlclNwYWNpbmcudmFsdWVzWzFdO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBpbmxpbmVCb3JkZXJTcGFjaW5nID0gYmxvY2tCb3JkZXJTcGFjaW5nID0gYm9yZGVyU3BhY2luZztcbiAgICAgICAgICB9XG4gICAgICAgICAgaWYgKGlubGluZUJvcmRlclNwYWNpbmcuaXNOdW1lcmljKCkpIHtcbiAgICAgICAgICAgIHRoaXMubm9kZUNvbnRleHQuaW5saW5lQm9yZGVyU3BhY2luZyA9IENzcy50b051bWJlcihcbiAgICAgICAgICAgICAgaW5saW5lQm9yZGVyU3BhY2luZyxcbiAgICAgICAgICAgICAgdGhpcy5jb250ZXh0LFxuICAgICAgICAgICAgKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgaWYgKGJsb2NrQm9yZGVyU3BhY2luZy5pc051bWVyaWMoKSkge1xuICAgICAgICAgICAgdGhpcy5ub2RlQ29udGV4dC5ibG9ja0JvcmRlclNwYWNpbmcgPSBDc3MudG9OdW1iZXIoXG4gICAgICAgICAgICAgIGJsb2NrQm9yZGVyU3BhY2luZyxcbiAgICAgICAgICAgICAgdGhpcy5jb250ZXh0LFxuICAgICAgICAgICAgKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIHRoaXMubm9kZUNvbnRleHQuZm9vdG5vdGVQb2xpY3kgPSBjb21wdXRlZFN0eWxlW1wiZm9vdG5vdGUtcG9saWN5XCJdO1xuICAgICAgY29uc3QgZmlyc3RQc2V1ZG8gPSBjb21wdXRlZFN0eWxlW1wieC1maXJzdC1wc2V1ZG9cIl07XG4gICAgICBpZiAoZmlyc3RQc2V1ZG8pIHtcbiAgICAgICAgY29uc3Qgb3V0ZXJQc2V1ZG8gPSB0aGlzLm5vZGVDb250ZXh0LnBhcmVudFxuICAgICAgICAgID8gdGhpcy5ub2RlQ29udGV4dC5wYXJlbnQuZmlyc3RQc2V1ZG9cbiAgICAgICAgICA6IG51bGw7XG4gICAgICAgIHRoaXMubm9kZUNvbnRleHQuZmlyc3RQc2V1ZG8gPSBuZXcgVnRyZWUuRmlyc3RQc2V1ZG8oXG4gICAgICAgICAgb3V0ZXJQc2V1ZG8sXG4gICAgICAgICAgLyoqIENzcy5JbnQgKi9cbiAgICAgICAgICBmaXJzdFBzZXVkby5udW0sXG4gICAgICAgICk7XG4gICAgICB9XG4gICAgICBpZiAoIXRoaXMubm9kZUNvbnRleHQuaW5saW5lKSB7XG4gICAgICAgIHRoaXMucHJvY2Vzc0FmdGVySWZjb250aW51ZXMoXG4gICAgICAgICAgZWxlbWVudCxcbiAgICAgICAgICBlbGVtZW50U3R5bGUsXG4gICAgICAgICAgc3R5bGVyLFxuICAgICAgICAgIHRoaXMuY29udGV4dCxcbiAgICAgICAgKTtcbiAgICAgIH1cbiAgICAgIGNvbnN0IHdoaXRlc3BhY2UgPSBjb21wdXRlZFN0eWxlW1wid2hpdGUtc3BhY2VcIl07XG4gICAgICBpZiAod2hpdGVzcGFjZSkge1xuICAgICAgICBjb25zdCB3aGl0ZXNwYWNlVmFsdWUgPSBWdHJlZS53aGl0ZXNwYWNlRnJvbVByb3BlcnR5VmFsdWUoXG4gICAgICAgICAgd2hpdGVzcGFjZS50b1N0cmluZygpLFxuICAgICAgICApO1xuICAgICAgICBpZiAod2hpdGVzcGFjZVZhbHVlICE9PSBudWxsKSB7XG4gICAgICAgICAgdGhpcy5ub2RlQ29udGV4dC53aGl0ZXNwYWNlID0gd2hpdGVzcGFjZVZhbHVlO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICBjb25zdCBoeXBoZW5hdGVDaGFyYWN0ZXIgPSBjb21wdXRlZFN0eWxlW1wiaHlwaGVuYXRlLWNoYXJhY3RlclwiXTtcbiAgICAgIGlmIChoeXBoZW5hdGVDaGFyYWN0ZXIgJiYgaHlwaGVuYXRlQ2hhcmFjdGVyICE9PSBDc3MuaWRlbnQuYXV0bykge1xuICAgICAgICB0aGlzLm5vZGVDb250ZXh0Lmh5cGhlbmF0ZUNoYXJhY3RlciA9IGh5cGhlbmF0ZUNoYXJhY3Rlci5zdHI7XG4gICAgICB9XG4gICAgICBjb25zdCB3b3JkQnJlYWsgPSBjb21wdXRlZFN0eWxlW1wid29yZC1icmVha1wiXTtcbiAgICAgIGNvbnN0IG92ZXJmbG93V3JhcCA9IGNvbXB1dGVkU3R5bGVbXCJvdmVyZmxvdy13cmFwXCJdIHx8IFtcIndvcmQtd3JhcFwiXTtcbiAgICAgIHRoaXMubm9kZUNvbnRleHQuYnJlYWtXb3JkID1cbiAgICAgICAgd29yZEJyZWFrID09PSBDc3MuaWRlbnQuYnJlYWtfYWxsIHx8XG4gICAgICAgIG92ZXJmbG93V3JhcCA9PT0gQ3NzLmlkZW50LmJyZWFrX3dvcmQ7XG5cbiAgICAgIC8vIFJlc29sdmUgZm9ybWF0dGluZyBjb250ZXh0XG4gICAgICB0aGlzLnJlc29sdmVGb3JtYXR0aW5nQ29udGV4dChcbiAgICAgICAgdGhpcy5ub2RlQ29udGV4dCxcbiAgICAgICAgZmlyc3RUaW1lLFxuICAgICAgICBkaXNwbGF5LFxuICAgICAgICBwb3NpdGlvbixcbiAgICAgICAgZmxvYXRTaWRlLFxuICAgICAgICBpc1Jvb3QsXG4gICAgICApO1xuICAgICAgaWYgKFxuICAgICAgICB0aGlzLm5vZGVDb250ZXh0LnBhcmVudCAmJlxuICAgICAgICB0aGlzLm5vZGVDb250ZXh0LnBhcmVudC5mb3JtYXR0aW5nQ29udGV4dFxuICAgICAgKSB7XG4gICAgICAgIGZpcnN0VGltZSA9IHRoaXMubm9kZUNvbnRleHQucGFyZW50LmZvcm1hdHRpbmdDb250ZXh0LmlzRmlyc3RUaW1lKFxuICAgICAgICAgIHRoaXMubm9kZUNvbnRleHQsXG4gICAgICAgICAgZmlyc3RUaW1lLFxuICAgICAgICApO1xuICAgICAgfVxuICAgICAgaWYgKCF0aGlzLm5vZGVDb250ZXh0LmlubGluZSkge1xuICAgICAgICB0aGlzLm5vZGVDb250ZXh0LnJlcGVhdE9uQnJlYWsgPSB0aGlzLnByb2Nlc3NSZXBlYXRPbkJyZWFrKFxuICAgICAgICAgIGNvbXB1dGVkU3R5bGUsXG4gICAgICAgICk7XG4gICAgICAgIHRoaXMuZmluZEFuZFByb2Nlc3NSZXBlYXRpbmdFbGVtZW50cyhlbGVtZW50LCBzdHlsZXIpO1xuICAgICAgfVxuXG4gICAgICAvLyBDcmVhdGUgdGhlIHZpZXcgZWxlbWVudFxuICAgICAgbGV0IGN1c3RvbSA9IGZhbHNlO1xuICAgICAgbGV0IGlubmVyOiBFbGVtZW50ID0gbnVsbDtcbiAgICAgIGNvbnN0IGZldGNoZXJzID0gW107XG4gICAgICBsZXQgbnMgPSBlbGVtZW50Lm5hbWVzcGFjZVVSSTtcbiAgICAgIGxldCB0YWcgPSBlbGVtZW50LmxvY2FsTmFtZTtcbiAgICAgIGlmIChucyA9PSBCYXNlLk5TLlhIVE1MKSB7XG4gICAgICAgIGlmIChcbiAgICAgICAgICB0YWcgPT0gXCJodG1sXCIgfHxcbiAgICAgICAgICB0YWcgPT0gXCJib2R5XCIgfHxcbiAgICAgICAgICB0YWcgPT0gXCJzY3JpcHRcIiB8fFxuICAgICAgICAgIHRhZyA9PSBcImxpbmtcIiB8fFxuICAgICAgICAgIHRhZyA9PSBcIm1ldGFcIlxuICAgICAgICApIHtcbiAgICAgICAgICB0YWcgPSBcImRpdlwiO1xuICAgICAgICB9IGVsc2UgaWYgKHRhZyA9PSBcInZpZGVfXCIpIHtcbiAgICAgICAgICB0YWcgPSBcInZpZGVvXCI7XG4gICAgICAgIH0gZWxzZSBpZiAodGFnID09IFwiYXVkaV9cIikge1xuICAgICAgICAgIHRhZyA9IFwiYXVkaW9cIjtcbiAgICAgICAgfSBlbHNlIGlmICh0YWcgPT0gXCJvYmplY3RcIikge1xuICAgICAgICAgIGN1c3RvbSA9ICEhdGhpcy5jdXN0b21SZW5kZXJlcjtcbiAgICAgICAgfVxuICAgICAgICBpZiAoZWxlbWVudC5nZXRBdHRyaWJ1dGUoUHNldWRvRWxlbWVudC5QU0VVRE9fQVRUUikpIHtcbiAgICAgICAgICBpZiAoXG4gICAgICAgICAgICBlbGVtZW50U3R5bGVbXCJjb250ZW50XCJdICYmXG4gICAgICAgICAgICBlbGVtZW50U3R5bGVbXCJjb250ZW50XCJdLnZhbHVlICYmXG4gICAgICAgICAgICBlbGVtZW50U3R5bGVbXCJjb250ZW50XCJdLnZhbHVlLnVybFxuICAgICAgICAgICkge1xuICAgICAgICAgICAgdGFnID0gXCJpbWdcIjtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSBpZiAobnMgPT0gQmFzZS5OUy5lcHViKSB7XG4gICAgICAgIHRhZyA9IFwic3BhblwiO1xuICAgICAgICBucyA9IEJhc2UuTlMuWEhUTUw7XG4gICAgICB9IGVsc2UgaWYgKG5zID09IEJhc2UuTlMuTkNYKSB7XG4gICAgICAgIG5zID0gQmFzZS5OUy5YSFRNTDtcbiAgICAgICAgaWYgKHRhZyA9PSBcIm5jeFwiIHx8IHRhZyA9PSBcIm5hdlBvaW50XCIpIHtcbiAgICAgICAgICB0YWcgPSBcImRpdlwiO1xuICAgICAgICB9IGVsc2UgaWYgKHRhZyA9PSBcIm5hdkxhYmVsXCIpIHtcbiAgICAgICAgICAvLyBDaGVhdCBoZXJlLiBUcmFuc2xhdGUgc291cmNlIHRvIEhUTUwsIHNvIGl0IHdpbGwgcGx1Z1xuICAgICAgICAgIC8vIGluIGludG8gdGhlIHJlc3Qgb2YgdGhlIHBpcGVsaW5lLlxuICAgICAgICAgIHRhZyA9IFwic3BhblwiO1xuICAgICAgICAgIGNvbnN0IG5hdlBhcmVudCA9IGVsZW1lbnQucGFyZW50Tm9kZTtcbiAgICAgICAgICBpZiAobmF2UGFyZW50KSB7XG4gICAgICAgICAgICAvLyBmaW5kIHRoZSBjb250ZW50IGVsZW1lbnRcbiAgICAgICAgICAgIGxldCBocmVmOiBzdHJpbmcgfCBudWxsID0gbnVsbDtcbiAgICAgICAgICAgIGZvciAobGV0IGM6IE5vZGUgPSBuYXZQYXJlbnQuZmlyc3RDaGlsZDsgYzsgYyA9IGMubmV4dFNpYmxpbmcpIHtcbiAgICAgICAgICAgICAgaWYgKGMubm9kZVR5cGUgIT0gMSkge1xuICAgICAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIGNvbnN0IGNoaWxkRWxlbWVudCA9IGMgYXMgRWxlbWVudDtcbiAgICAgICAgICAgICAgaWYgKFxuICAgICAgICAgICAgICAgIGNoaWxkRWxlbWVudC5uYW1lc3BhY2VVUkkgPT0gQmFzZS5OUy5OQ1ggJiZcbiAgICAgICAgICAgICAgICBjaGlsZEVsZW1lbnQubG9jYWxOYW1lID09IFwiY29udGVudFwiXG4gICAgICAgICAgICAgICkge1xuICAgICAgICAgICAgICAgIGhyZWYgPSBjaGlsZEVsZW1lbnQuZ2V0QXR0cmlidXRlKFwic3JjXCIpO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoaHJlZikge1xuICAgICAgICAgICAgICB0YWcgPSBcImFcIjtcbiAgICAgICAgICAgICAgZWxlbWVudCA9IGVsZW1lbnQub3duZXJEb2N1bWVudC5jcmVhdGVFbGVtZW50TlMobnMsIFwiYVwiKTtcbiAgICAgICAgICAgICAgZWxlbWVudC5zZXRBdHRyaWJ1dGUoXCJocmVmXCIsIGhyZWYpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICB0YWcgPSBcInNwYW5cIjtcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIGlmIChucyA9PSBCYXNlLk5TLlNIQURPVykge1xuICAgICAgICBucyA9IEJhc2UuTlMuWEhUTUw7XG4gICAgICAgIHRhZyA9IHRoaXMubm9kZUNvbnRleHQuaW5saW5lID8gXCJzcGFuXCIgOiBcImRpdlwiO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgY3VzdG9tID0gISF0aGlzLmN1c3RvbVJlbmRlcmVyO1xuICAgICAgfVxuICAgICAgaWYgKGxpc3RJdGVtKSB7XG4gICAgICAgIGlmIChmaXJzdFRpbWUpIHtcbiAgICAgICAgICB0YWcgPSBcImxpXCI7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgdGFnID0gXCJkaXZcIjtcbiAgICAgICAgICBkaXNwbGF5ID0gQ3NzLmlkZW50LmJsb2NrO1xuICAgICAgICAgIGNvbXB1dGVkU3R5bGVbXCJkaXNwbGF5XCJdID0gZGlzcGxheTtcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIGlmICh0YWcgPT0gXCJib2R5XCIgfHwgdGFnID09IFwibGlcIikge1xuICAgICAgICB0YWcgPSBcImRpdlwiO1xuICAgICAgfSBlbHNlIGlmICh0YWcgPT0gXCJxXCIpIHtcbiAgICAgICAgdGFnID0gXCJzcGFuXCI7XG4gICAgICB9IGVsc2UgaWYgKHRhZyA9PSBcImFcIikge1xuICAgICAgICBjb25zdCBocCA9IGNvbXB1dGVkU3R5bGVbXCJoeXBlcmxpbmstcHJvY2Vzc2luZ1wiXTtcbiAgICAgICAgaWYgKGhwICYmIGhwLnRvU3RyaW5nKCkgIT0gXCJub3JtYWxcIikge1xuICAgICAgICAgIHRhZyA9IFwic3BhblwiO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICBpZiAoY29tcHV0ZWRTdHlsZVtcImJlaGF2aW9yXCJdKSB7XG4gICAgICAgIGNvbnN0IGJlaGF2aW9yID0gY29tcHV0ZWRTdHlsZVtcImJlaGF2aW9yXCJdLnRvU3RyaW5nKCk7XG4gICAgICAgIGlmIChiZWhhdmlvciAhPSBcIm5vbmVcIiAmJiB0aGlzLmN1c3RvbVJlbmRlcmVyKSB7XG4gICAgICAgICAgY3VzdG9tID0gdHJ1ZTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgaWYgKFxuICAgICAgICAoZWxlbWVudCBhcyBIVE1MRWxlbWVudCkuZGF0YXNldCAmJlxuICAgICAgICBlbGVtZW50LmdldEF0dHJpYnV0ZShcImRhdGEtbWF0aC10eXBlc2V0XCIpID09PSBcInRydWVcIlxuICAgICAgKSB7XG4gICAgICAgIGN1c3RvbSA9IHRydWU7XG4gICAgICB9XG4gICAgICBsZXQgZWxlbVJlc3VsdDogVGFzay5SZXN1bHQ8RWxlbWVudD47XG4gICAgICBpZiAoY3VzdG9tKSB7XG4gICAgICAgIGNvbnN0IHBhcmVudE5vZGUgPSB0aGlzLm5vZGVDb250ZXh0LnBhcmVudFxuICAgICAgICAgID8gdGhpcy5ub2RlQ29udGV4dC5wYXJlbnQudmlld05vZGVcbiAgICAgICAgICA6IG51bGw7XG4gICAgICAgIGVsZW1SZXN1bHQgPSB0aGlzLmN1c3RvbVJlbmRlcmVyKFxuICAgICAgICAgIGVsZW1lbnQsXG4gICAgICAgICAgcGFyZW50Tm9kZSBhcyBFbGVtZW50LFxuICAgICAgICAgIGNvbXB1dGVkU3R5bGUsXG4gICAgICAgICk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBlbGVtUmVzdWx0ID0gVGFzay5uZXdSZXN1bHQobnVsbCk7XG4gICAgICB9XG4gICAgICBlbGVtUmVzdWx0LnRoZW4oKHJlc3VsdCkgPT4ge1xuICAgICAgICBpZiAocmVzdWx0KSB7XG4gICAgICAgICAgaWYgKGN1c3RvbSkge1xuICAgICAgICAgICAgbmVlZFRvUHJvY2Vzc0NoaWxkcmVuID1cbiAgICAgICAgICAgICAgcmVzdWx0LmdldEF0dHJpYnV0ZShcImRhdGEtYWRhcHQtcHJvY2Vzcy1jaGlsZHJlblwiKSA9PSBcInRydWVcIjtcbiAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgcmVzdWx0ID0gdGhpcy5jcmVhdGVFbGVtZW50KG5zLCB0YWcpO1xuICAgICAgICB9XG4gICAgICAgIGlmICh0YWcgPT0gXCJhXCIpIHtcbiAgICAgICAgICByZXN1bHQuYWRkRXZlbnRMaXN0ZW5lcihcImNsaWNrXCIsIHRoaXMucGFnZS5ocmVmSGFuZGxlciwgZmFsc2UpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChpbm5lcikge1xuICAgICAgICAgIHRoaXMuYXBwbHlQc2V1ZG9lbGVtZW50U3R5bGUodGhpcy5ub2RlQ29udGV4dCwgXCJpbm5lclwiLCBpbm5lcik7XG4gICAgICAgICAgcmVzdWx0LmFwcGVuZENoaWxkKGlubmVyKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoXG4gICAgICAgICAgcmVzdWx0LmxvY2FsTmFtZSA9PSBcImlmcmFtZVwiICYmXG4gICAgICAgICAgcmVzdWx0Lm5hbWVzcGFjZVVSSSA9PSBCYXNlLk5TLlhIVE1MXG4gICAgICAgICkge1xuICAgICAgICAgIGluaXRJRnJhbWUocmVzdWx0IGFzIEhUTUxJRnJhbWVFbGVtZW50KTtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCBpbWFnZVJlc29sdXRpb24gPSB0aGlzLm5vZGVDb250ZXh0LmluaGVyaXRlZFByb3BzW1xuICAgICAgICAgIFwiaW1hZ2UtcmVzb2x1dGlvblwiXG4gICAgICAgIF0gYXMgbnVtYmVyIHwgdW5kZWZpbmVkO1xuICAgICAgICBjb25zdCBpbWFnZXM6IHtcbiAgICAgICAgICBpbWFnZTogSFRNTEVsZW1lbnQ7XG4gICAgICAgICAgZWxlbWVudDogSFRNTEVsZW1lbnQ7XG4gICAgICAgICAgZmV0Y2hlcjogVGFza1V0aWwuRmV0Y2hlcjxzdHJpbmc+O1xuICAgICAgICB9W10gPSBbXTtcbiAgICAgICAgY29uc3QgY3NzV2lkdGggPSBjb21wdXRlZFN0eWxlW1wid2lkdGhcIl07XG4gICAgICAgIGNvbnN0IGNzc0hlaWdodCA9IGNvbXB1dGVkU3R5bGVbXCJoZWlnaHRcIl07XG4gICAgICAgIGNvbnN0IGF0dHJXaWR0aCA9IGVsZW1lbnQuZ2V0QXR0cmlidXRlKFwid2lkdGhcIik7XG4gICAgICAgIGNvbnN0IGF0dHJIZWlnaHQgPSBlbGVtZW50LmdldEF0dHJpYnV0ZShcImhlaWdodFwiKTtcbiAgICAgICAgY29uc3QgaGFzQXV0b1dpZHRoID1cbiAgICAgICAgICBjc3NXaWR0aCA9PT0gQ3NzLmlkZW50LmF1dG8gfHwgKCFjc3NXaWR0aCAmJiAhYXR0cldpZHRoKTtcbiAgICAgICAgY29uc3QgaGFzQXV0b0hlaWdodCA9XG4gICAgICAgICAgY3NzSGVpZ2h0ID09PSBDc3MuaWRlbnQuYXV0byB8fCAoIWNzc0hlaWdodCAmJiAhYXR0ckhlaWdodCk7XG4gICAgICAgIGNvbnN0IGF0dHJpYnV0ZXMgPSBlbGVtZW50LmF0dHJpYnV0ZXM7XG4gICAgICAgIGNvbnN0IGF0dHJpYnV0ZUNvdW50ID0gYXR0cmlidXRlcy5sZW5ndGg7XG4gICAgICAgIGxldCBkZWxheWVkU3JjOiBzdHJpbmcgfCBudWxsID0gbnVsbDtcbiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBhdHRyaWJ1dGVDb3VudDsgaSsrKSB7XG4gICAgICAgICAgY29uc3QgYXR0cmlidXRlID0gYXR0cmlidXRlc1tpXTtcbiAgICAgICAgICBjb25zdCBhdHRyaWJ1dGVOUyA9IGF0dHJpYnV0ZS5uYW1lc3BhY2VVUkk7XG4gICAgICAgICAgbGV0IGF0dHJpYnV0ZU5hbWUgPSBhdHRyaWJ1dGUubG9jYWxOYW1lO1xuICAgICAgICAgIGxldCBhdHRyaWJ1dGVWYWx1ZSA9IGF0dHJpYnV0ZS5ub2RlVmFsdWU7XG4gICAgICAgICAgaWYgKCFhdHRyaWJ1dGVOUykge1xuICAgICAgICAgICAgaWYgKGF0dHJpYnV0ZU5hbWUubWF0Y2goL15vbi8pKSB7XG4gICAgICAgICAgICAgIGNvbnRpbnVlOyAvLyBkb24ndCBwcm9wYWdhdGUgSmF2YVNjcmlwdCBjb2RlXG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoYXR0cmlidXRlTmFtZSA9PSBcInN0eWxlXCIpIHtcbiAgICAgICAgICAgICAgY29udGludWU7IC8vIHdlIGRvIHN0eWxpbmcgb3Vyc2VsdmVzXG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoYXR0cmlidXRlTmFtZSA9PSBcImlkXCIgfHwgYXR0cmlidXRlTmFtZSA9PSBcIm5hbWVcIikge1xuICAgICAgICAgICAgICAvLyBQcm9wYWdhdGUgdHJhbnNmb3JtZWQgaWRzIGFuZCBjb2xsZWN0IHRoZW0gb24gdGhlIHBhZ2VcbiAgICAgICAgICAgICAgLy8gKG9ubHkgZmlyc3QgdGltZSkuXG4gICAgICAgICAgICAgIGlmIChmaXJzdFRpbWUpIHtcbiAgICAgICAgICAgICAgICBhdHRyaWJ1dGVWYWx1ZSA9IHRoaXMuZG9jdW1lbnRVUkxUcmFuc2Zvcm1lci50cmFuc2Zvcm1GcmFnbWVudChcbiAgICAgICAgICAgICAgICAgIGF0dHJpYnV0ZVZhbHVlLFxuICAgICAgICAgICAgICAgICAgdGhpcy54bWxkb2MudXJsLFxuICAgICAgICAgICAgICAgICk7XG4gICAgICAgICAgICAgICAgcmVzdWx0LnNldEF0dHJpYnV0ZShhdHRyaWJ1dGVOYW1lLCBhdHRyaWJ1dGVWYWx1ZSk7XG4gICAgICAgICAgICAgICAgdGhpcy5wYWdlLnJlZ2lzdGVyRWxlbWVudFdpdGhJZChyZXN1bHQsIGF0dHJpYnV0ZVZhbHVlKTtcbiAgICAgICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAvLyBUT0RPOiB1bmRlcnN0YW5kIHRoZSBlbGVtZW50IHdlIGFyZSB3b3JraW5nIHdpdGguXG4gICAgICAgICAgICBpZiAoXG4gICAgICAgICAgICAgIGF0dHJpYnV0ZU5hbWUgPT0gXCJzcmNcIiB8fFxuICAgICAgICAgICAgICBhdHRyaWJ1dGVOYW1lID09IFwiaHJlZlwiIHx8XG4gICAgICAgICAgICAgIGF0dHJpYnV0ZU5hbWUgPT0gXCJwb3N0ZXJcIlxuICAgICAgICAgICAgKSB7XG4gICAgICAgICAgICAgIGF0dHJpYnV0ZVZhbHVlID0gdGhpcy5yZXNvbHZlVVJMKGF0dHJpYnV0ZVZhbHVlKTtcbiAgICAgICAgICAgICAgaWYgKGF0dHJpYnV0ZU5hbWUgPT09IFwiaHJlZlwiKSB7XG4gICAgICAgICAgICAgICAgYXR0cmlidXRlVmFsdWUgPSB0aGlzLmRvY3VtZW50VVJMVHJhbnNmb3JtZXIudHJhbnNmb3JtVVJMKFxuICAgICAgICAgICAgICAgICAgYXR0cmlidXRlVmFsdWUsXG4gICAgICAgICAgICAgICAgICB0aGlzLnhtbGRvYy51cmwsXG4gICAgICAgICAgICAgICAgKTtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSBlbHNlIGlmIChhdHRyaWJ1dGVOYW1lID09IFwic3Jjc2V0XCIpIHtcbiAgICAgICAgICAgICAgYXR0cmlidXRlVmFsdWUgPSBhdHRyaWJ1dGVWYWx1ZVxuICAgICAgICAgICAgICAgIC5zcGxpdChcIixcIilcbiAgICAgICAgICAgICAgICAubWFwKCh2YWx1ZSkgPT4gdGhpcy5yZXNvbHZlVVJMKHZhbHVlLnRyaW0oKSkpXG4gICAgICAgICAgICAgICAgLmpvaW4oXCIsXCIpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKFxuICAgICAgICAgICAgICBhdHRyaWJ1dGVOYW1lID09PSBcInBvc3RlclwiICYmXG4gICAgICAgICAgICAgIHRhZyA9PT0gXCJ2aWRlb1wiICYmXG4gICAgICAgICAgICAgIG5zID09PSBCYXNlLk5TLlhIVE1MICYmXG4gICAgICAgICAgICAgIGhhc0F1dG9XaWR0aCAmJlxuICAgICAgICAgICAgICBoYXNBdXRvSGVpZ2h0XG4gICAgICAgICAgICApIHtcbiAgICAgICAgICAgICAgY29uc3QgaW1hZ2UgPSBuZXcgSW1hZ2UoKTtcbiAgICAgICAgICAgICAgY29uc3QgZmV0Y2hlciA9IFRhc2tVdGlsLmxvYWRFbGVtZW50KGltYWdlLCBhdHRyaWJ1dGVWYWx1ZSk7XG4gICAgICAgICAgICAgIGZldGNoZXJzLnB1c2goZmV0Y2hlcik7XG4gICAgICAgICAgICAgIGltYWdlcy5wdXNoKHtcbiAgICAgICAgICAgICAgICBpbWFnZSxcbiAgICAgICAgICAgICAgICBlbGVtZW50OiByZXN1bHQgYXMgSFRNTEVsZW1lbnQsXG4gICAgICAgICAgICAgICAgZmV0Y2hlcixcbiAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSBlbHNlIGlmIChhdHRyaWJ1dGVOUyA9PSBcImh0dHA6Ly93d3cudzMub3JnLzIwMDAveG1sbnMvXCIpIHtcbiAgICAgICAgICAgIGNvbnRpbnVlOyAvLyBuYW1lc3BhY2UgZGVjbGFyYXRpb24gKGluIEZpcmVmb3gpXG4gICAgICAgICAgfSBlbHNlIGlmIChhdHRyaWJ1dGVOUyA9PSBCYXNlLk5TLlhMSU5LKSB7XG4gICAgICAgICAgICBpZiAoYXR0cmlidXRlTmFtZSA9PSBcImhyZWZcIikge1xuICAgICAgICAgICAgICBhdHRyaWJ1dGVWYWx1ZSA9IHRoaXMucmVzb2x2ZVVSTChhdHRyaWJ1dGVWYWx1ZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICAgIGlmIChucyA9PSBCYXNlLk5TLlNWRyAmJiAvXltBLVpcXC1dKyQvLnRlc3QoYXR0cmlidXRlTmFtZSkpIHtcbiAgICAgICAgICAgIC8vIFdvcmthcm91bmQgZm9yIEVkZ2UgYnVnXG4gICAgICAgICAgICAvLyBTZWVcbiAgICAgICAgICAgIC8vIGh0dHBzOi8vZGV2ZWxvcGVyLm1pY3Jvc29mdC5jb20vZW4tdXMvbWljcm9zb2Z0LWVkZ2UvcGxhdGZvcm0vaXNzdWVzLzU1NzkzMTEvXG4gICAgICAgICAgICBhdHRyaWJ1dGVOYW1lID0gYXR0cmlidXRlTmFtZS50b0xvd2VyQ2FzZSgpO1xuICAgICAgICAgIH1cbiAgICAgICAgICBpZiAodGhpcy5pc1NWR1VybEF0dHJpYnV0ZShhdHRyaWJ1dGVOYW1lKSkge1xuICAgICAgICAgICAgYXR0cmlidXRlVmFsdWUgPSBVcmxzLnRyYW5zZm9ybVVSSXMoXG4gICAgICAgICAgICAgIGF0dHJpYnV0ZVZhbHVlLFxuICAgICAgICAgICAgICB0aGlzLnhtbGRvYy51cmwsXG4gICAgICAgICAgICAgIHRoaXMuZG9jdW1lbnRVUkxUcmFuc2Zvcm1lcixcbiAgICAgICAgICAgICk7XG4gICAgICAgICAgfVxuICAgICAgICAgIGlmIChhdHRyaWJ1dGVOUykge1xuICAgICAgICAgICAgY29uc3QgYXR0cmlidXRlUHJlZml4ID0gbmFtZXNwYWNlUHJlZml4TWFwW2F0dHJpYnV0ZU5TXTtcbiAgICAgICAgICAgIGlmIChhdHRyaWJ1dGVQcmVmaXgpIHtcbiAgICAgICAgICAgICAgYXR0cmlidXRlTmFtZSA9IGAke2F0dHJpYnV0ZVByZWZpeH06JHthdHRyaWJ1dGVOYW1lfWA7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICAgIGlmIChcbiAgICAgICAgICAgIGF0dHJpYnV0ZU5hbWUgPT0gXCJzcmNcIiAmJlxuICAgICAgICAgICAgIWF0dHJpYnV0ZU5TICYmXG4gICAgICAgICAgICAodGFnID09IFwiaW1nXCIgfHwgdGFnID09IFwiaW5wdXRcIikgJiZcbiAgICAgICAgICAgIG5zID09IEJhc2UuTlMuWEhUTUxcbiAgICAgICAgICApIHtcbiAgICAgICAgICAgIC8vIEhUTUwgaW1nIGVsZW1lbnQgc2hvdWxkIHN0YXJ0IGxvYWRpbmcgb25seSBvbmNlIGFsbFxuICAgICAgICAgICAgLy8gYXR0cmlidXRlcyBhcmUgYXNzaWduZWQuXG4gICAgICAgICAgICBkZWxheWVkU3JjID0gYXR0cmlidXRlVmFsdWU7XG4gICAgICAgICAgfSBlbHNlIGlmIChcbiAgICAgICAgICAgIGF0dHJpYnV0ZU5hbWUgPT0gXCJocmVmXCIgJiZcbiAgICAgICAgICAgIHRhZyA9PSBcImltYWdlXCIgJiZcbiAgICAgICAgICAgIG5zID09IEJhc2UuTlMuU1ZHICYmXG4gICAgICAgICAgICBhdHRyaWJ1dGVOUyA9PSBCYXNlLk5TLlhMSU5LXG4gICAgICAgICAgKSB7XG4gICAgICAgICAgICB0aGlzLnBhZ2UuZmV0Y2hlcnMucHVzaChcbiAgICAgICAgICAgICAgVGFza1V0aWwubG9hZEVsZW1lbnQocmVzdWx0LCBhdHRyaWJ1dGVWYWx1ZSksXG4gICAgICAgICAgICApO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAvLyBXaGVuIHRoZSBkb2N1bWVudCBpcyBub3QgWE1MIGRvY3VtZW50IChlLmcuIG5vbi1YTUwgSFRNTClcbiAgICAgICAgICAgIC8vIGF0dHJpYnV0ZU5TIGNhbiBiZSBudWxsXG4gICAgICAgICAgICBpZiAoYXR0cmlidXRlTlMpIHtcbiAgICAgICAgICAgICAgcmVzdWx0LnNldEF0dHJpYnV0ZU5TKGF0dHJpYnV0ZU5TLCBhdHRyaWJ1dGVOYW1lLCBhdHRyaWJ1dGVWYWx1ZSk7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICByZXN1bHQuc2V0QXR0cmlidXRlKGF0dHJpYnV0ZU5hbWUsIGF0dHJpYnV0ZVZhbHVlKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGRlbGF5ZWRTcmMpIHtcbiAgICAgICAgICBjb25zdCBpbWFnZSA9IHRhZyA9PT0gXCJpbnB1dFwiID8gbmV3IEltYWdlKCkgOiByZXN1bHQ7XG4gICAgICAgICAgY29uc3QgaW1hZ2VGZXRjaGVyID0gVGFza1V0aWwubG9hZEVsZW1lbnQoaW1hZ2UsIGRlbGF5ZWRTcmMpO1xuICAgICAgICAgIGlmIChpbWFnZSAhPT0gcmVzdWx0KSB7XG4gICAgICAgICAgICAocmVzdWx0IGFzIEhUTUxJbWFnZUVsZW1lbnQpLnNyYyA9IGRlbGF5ZWRTcmM7XG4gICAgICAgICAgfVxuICAgICAgICAgIGlmICghaGFzQXV0b1dpZHRoICYmICFoYXNBdXRvSGVpZ2h0KSB7XG4gICAgICAgICAgICAvLyBObyBuZWVkIHRvIHdhaXQgZm9yIHRoZSBpbWFnZSwgZG9lcyBub3QgYWZmZWN0IGxheW91dFxuICAgICAgICAgICAgdGhpcy5wYWdlLmZldGNoZXJzLnB1c2goaW1hZ2VGZXRjaGVyKTtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgaWYgKFxuICAgICAgICAgICAgICBoYXNBdXRvV2lkdGggJiZcbiAgICAgICAgICAgICAgaGFzQXV0b0hlaWdodCAmJlxuICAgICAgICAgICAgICBpbWFnZVJlc29sdXRpb24gJiZcbiAgICAgICAgICAgICAgaW1hZ2VSZXNvbHV0aW9uICE9PSAxXG4gICAgICAgICAgICApIHtcbiAgICAgICAgICAgICAgaW1hZ2VzLnB1c2goe1xuICAgICAgICAgICAgICAgIGltYWdlOiBpbWFnZSBhcyBIVE1MRWxlbWVudCxcbiAgICAgICAgICAgICAgICBlbGVtZW50OiByZXN1bHQgYXMgSFRNTEVsZW1lbnQsXG4gICAgICAgICAgICAgICAgZmV0Y2hlcjogaW1hZ2VGZXRjaGVyLFxuICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGZldGNoZXJzLnB1c2goaW1hZ2VGZXRjaGVyKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgZGVsZXRlIGNvbXB1dGVkU3R5bGVbXCJjb250ZW50XCJdO1xuICAgICAgICBjb25zdCBsaXN0U3R5bGVJbWFnZSA9IGNvbXB1dGVkU3R5bGVbXCJsaXN0LXN0eWxlLWltYWdlXCJdO1xuICAgICAgICBpZiAobGlzdFN0eWxlSW1hZ2UgJiYgbGlzdFN0eWxlSW1hZ2UgaW5zdGFuY2VvZiBDc3MuVVJMKSB7XG4gICAgICAgICAgY29uc3QgbGlzdFN0eWxlVVJMID0gKGxpc3RTdHlsZUltYWdlIGFzIENzcy5VUkwpLnVybDtcbiAgICAgICAgICBmZXRjaGVycy5wdXNoKFRhc2tVdGlsLmxvYWRFbGVtZW50KG5ldyBJbWFnZSgpLCBsaXN0U3R5bGVVUkwpKTtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLnByZXByb2Nlc3NFbGVtZW50U3R5bGUoY29tcHV0ZWRTdHlsZSk7XG4gICAgICAgIHRoaXMuYXBwbHlDb21wdXRlZFN0eWxlcyhyZXN1bHQsIGNvbXB1dGVkU3R5bGUpO1xuICAgICAgICBpZiAoIXRoaXMubm9kZUNvbnRleHQuaW5saW5lKSB7XG4gICAgICAgICAgbGV0IGJsYWNrTGlzdDogeyBba2V5OiBzdHJpbmddOiBzdHJpbmcgfSA9IG51bGw7XG4gICAgICAgICAgaWYgKCFmaXJzdFRpbWUpIHtcbiAgICAgICAgICAgIGlmIChcbiAgICAgICAgICAgICAgdGhpcy5ub2RlQ29udGV4dC5pbmhlcml0ZWRQcm9wc1tcImJveC1kZWNvcmF0aW9uLWJyZWFrXCJdICE9PVxuICAgICAgICAgICAgICBcImNsb25lXCJcbiAgICAgICAgICAgICkge1xuICAgICAgICAgICAgICBibGFja0xpc3QgPSB0aGlzLm5vZGVDb250ZXh0LnZlcnRpY2FsXG4gICAgICAgICAgICAgICAgPyBmcm9udEVkZ2VCbGFja0xpc3RWZXJ0XG4gICAgICAgICAgICAgICAgOiBmcm9udEVkZ2VCbGFja0xpc3RIb3I7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAvLyBXaGVuIGJveC1kZWNvcmF0aW9uLWJyZWFrOiBjbG9uZSwgY2xvbmVkIG1hcmdpbnMgYXJlIGFsd2F5c1xuICAgICAgICAgICAgICAvLyB0cnVuY2F0ZWQgdG8gemVyby5cbiAgICAgICAgICAgICAgYmxhY2tMaXN0ID0gdGhpcy5ub2RlQ29udGV4dC52ZXJ0aWNhbFxuICAgICAgICAgICAgICAgID8gZnJvbnRFZGdlVW5mb3JjZWRCcmVha0JsYWNrTGlzdFZlcnRcbiAgICAgICAgICAgICAgICA6IGZyb250RWRnZVVuZm9yY2VkQnJlYWtCbGFja0xpc3RIb3I7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSBlbHNlIGlmIChhdFVuZm9yY2VkQnJlYWsgJiYgIXRoaXMuaXNBdEZvcmNlZEJyZWFrKCkpIHtcbiAgICAgICAgICAgIGJsYWNrTGlzdCA9IHRoaXMubm9kZUNvbnRleHQudmVydGljYWxcbiAgICAgICAgICAgICAgPyBmcm9udEVkZ2VVbmZvcmNlZEJyZWFrQmxhY2tMaXN0VmVydFxuICAgICAgICAgICAgICA6IGZyb250RWRnZVVuZm9yY2VkQnJlYWtCbGFja0xpc3RIb3I7XG4gICAgICAgICAgfVxuICAgICAgICAgIGlmIChibGFja0xpc3QpIHtcbiAgICAgICAgICAgIGZvciAoY29uc3QgcHJvcE5hbWUgaW4gYmxhY2tMaXN0KSB7XG4gICAgICAgICAgICAgIEJhc2Uuc2V0Q1NTUHJvcGVydHkocmVzdWx0LCBwcm9wTmFtZSwgYmxhY2tMaXN0W3Byb3BOYW1lXSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGlmIChsaXN0SXRlbSkge1xuICAgICAgICAgIHJlc3VsdC5zZXRBdHRyaWJ1dGUoXG4gICAgICAgICAgICBcInZhbHVlXCIsXG4gICAgICAgICAgICBjb21wdXRlZFN0eWxlW1widWEtbGlzdC1pdGVtLWNvdW50XCJdLnN0cmluZ1ZhbHVlKCksXG4gICAgICAgICAgKTtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLnZpZXdOb2RlID0gcmVzdWx0O1xuICAgICAgICBpZiAoZmV0Y2hlcnMubGVuZ3RoKSB7XG4gICAgICAgICAgVGFza1V0aWwud2FpdEZvckZldGNoZXJzKGZldGNoZXJzKS50aGVuKCgpID0+IHtcbiAgICAgICAgICAgIGlmIChpbWFnZVJlc29sdXRpb24gPiAwKSB7XG4gICAgICAgICAgICAgIHRoaXMubW9kaWZ5RWxlbURpbWVuc2lvbldpdGhJbWFnZVJlc29sdXRpb24oXG4gICAgICAgICAgICAgICAgaW1hZ2VzLFxuICAgICAgICAgICAgICAgIGltYWdlUmVzb2x1dGlvbixcbiAgICAgICAgICAgICAgICBjb21wdXRlZFN0eWxlLFxuICAgICAgICAgICAgICAgIHRoaXMubm9kZUNvbnRleHQudmVydGljYWwsXG4gICAgICAgICAgICAgICk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBmcmFtZS5maW5pc2gobmVlZFRvUHJvY2Vzc0NoaWxkcmVuKTtcbiAgICAgICAgICB9KTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBmcmFtZS50aW1lU2xpY2UoKS50aGVuKCgpID0+IHtcbiAgICAgICAgICAgIGZyYW1lLmZpbmlzaChuZWVkVG9Qcm9jZXNzQ2hpbGRyZW4pO1xuICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgICB9KTtcbiAgICByZXR1cm4gZnJhbWUucmVzdWx0KCk7XG4gIH1cblxuICAvKipcbiAgICogQ2hlY2sgaWYgdGhlIGN1cnJlbnQgcG9zaXRpb24gaXMgYXQgYSBmb3JjZWQgYnJlYWtcbiAgICogKEZpeCBmb3IgSXNzdWUgIzY5MClcbiAgICovXG4gIHByaXZhdGUgaXNBdEZvcmNlZEJyZWFrKCk6IGJvb2xlYW4ge1xuICAgIGZvciAoXG4gICAgICBsZXQgbm9kZUNvbnRleHQgPSB0aGlzLm5vZGVDb250ZXh0O1xuICAgICAgbm9kZUNvbnRleHQgJiYgIW5vZGVDb250ZXh0LmFmdGVyO1xuICAgICAgbm9kZUNvbnRleHQgPSBub2RlQ29udGV4dC5wYXJlbnRcbiAgICApIHtcbiAgICAgIGlmIChCcmVhay5pc0ZvcmNlZEJyZWFrVmFsdWUobm9kZUNvbnRleHQuYnJlYWtCZWZvcmUpKSB7XG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgfVxuICAgICAgaWYgKFxuICAgICAgICBub2RlQ29udGV4dC5wYXJlbnQgJiZcbiAgICAgICAgKG5vZGVDb250ZXh0LnBhcmVudC5zb3VyY2VOb2RlIGFzIEVsZW1lbnQpLmZpcnN0RWxlbWVudENoaWxkICE9PVxuICAgICAgICAgIG5vZGVDb250ZXh0LnNvdXJjZU5vZGVcbiAgICAgICkge1xuICAgICAgICBicmVhaztcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG5cbiAgcHJpdmF0ZSBwcm9jZXNzQWZ0ZXJJZmNvbnRpbnVlcyhcbiAgICBlbGVtZW50OiBFbGVtZW50LFxuICAgIGNhc2NTdHlsZTogQ3NzQ2FzY2FkZS5FbGVtZW50U3R5bGUsXG4gICAgc3R5bGVyOiBDc3NTdHlsZXIuQWJzdHJhY3RTdHlsZXIsXG4gICAgY29udGV4dDogRXhwcnMuQ29udGV4dCxcbiAgKSB7XG4gICAgY29uc3QgcHNldWRvTWFwID0gdGhpcy5nZXRQc2V1ZG9NYXAoXG4gICAgICBjYXNjU3R5bGUsXG4gICAgICB0aGlzLnJlZ2lvbklkcyxcbiAgICAgIHRoaXMuaXNGb290bm90ZSxcbiAgICAgIHRoaXMubm9kZUNvbnRleHQsXG4gICAgICBjb250ZXh0LFxuICAgICk7XG4gICAgaWYgKCFwc2V1ZG9NYXApIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgaWYgKFxuICAgICAgcHNldWRvTWFwW1wiYWZ0ZXItaWYtY29udGludWVzXCJdICYmXG4gICAgICBwc2V1ZG9NYXBbXCJhZnRlci1pZi1jb250aW51ZXNcIl1bXCJjb250ZW50XCJdXG4gICAgKSB7XG4gICAgICBjb25zdCBzaGFkb3dTdHlsZXIgPSBuZXcgUHNldWRvRWxlbWVudC5Qc2V1ZG9lbGVtZW50U3R5bGVyKFxuICAgICAgICBlbGVtZW50LFxuICAgICAgICBjYXNjU3R5bGUsXG4gICAgICAgIHN0eWxlcixcbiAgICAgICAgY29udGV4dCxcbiAgICAgICAgdGhpcy5leHByQ29udGVudExpc3RlbmVyLFxuICAgICAgKTtcbiAgICAgIHRoaXMubm9kZUNvbnRleHQuYWZ0ZXJJZkNvbnRpbnVlcyA9IG5ldyBMYXlvdXQuQWZ0ZXJJZkNvbnRpbnVlcyhcbiAgICAgICAgZWxlbWVudCxcbiAgICAgICAgc2hhZG93U3R5bGVyLFxuICAgICAgKTtcbiAgICB9XG4gIH1cblxuICAvKipcbiAgICogQHJldHVybiBpc1NWR1VybEF0dHJpYnV0ZVxuICAgKi9cbiAgaXNTVkdVcmxBdHRyaWJ1dGUoYXR0cmlidXRlTmFtZTogc3RyaW5nKTogYm9vbGVhbiB7XG4gICAgcmV0dXJuIFZpZXdGYWN0b3J5LlNWR19VUkxfQVRUUklCVVRFUy5pbmNsdWRlcyhhdHRyaWJ1dGVOYW1lLnRvTG93ZXJDYXNlKCkpO1xuICB9XG5cbiAgbW9kaWZ5RWxlbURpbWVuc2lvbldpdGhJbWFnZVJlc29sdXRpb24oXG4gICAgaW1hZ2VzOiB7XG4gICAgICBpbWFnZTogSFRNTEVsZW1lbnQ7XG4gICAgICBlbGVtZW50OiBIVE1MRWxlbWVudDtcbiAgICAgIGZldGNoZXI6IFRhc2tVdGlsLkZldGNoZXI8c3RyaW5nPjtcbiAgICB9W10sXG4gICAgaW1hZ2VSZXNvbHV0aW9uOiBudW1iZXIsXG4gICAgY29tcHV0ZWRTdHlsZTogeyBba2V5OiBzdHJpbmddOiBDc3MuVmFsIH0sXG4gICAgaXNWZXJ0aWNhbDogYm9vbGVhbixcbiAgKSB7XG4gICAgaW1hZ2VzLmZvckVhY2goKHBhcmFtKSA9PiB7XG4gICAgICBpZiAocGFyYW0uZmV0Y2hlci5nZXQoKS5nZXQoKSA9PT0gXCJsb2FkXCIpIHtcbiAgICAgICAgY29uc3QgaW1nID0gcGFyYW0uaW1hZ2U7XG4gICAgICAgIGxldCBzY2FsZWRXaWR0aCA9IChpbWcgYXMgSFRNTEltYWdlRWxlbWVudCkud2lkdGggLyBpbWFnZVJlc29sdXRpb247XG4gICAgICAgIGxldCBzY2FsZWRIZWlnaHQgPSAoaW1nIGFzIEhUTUxJbWFnZUVsZW1lbnQpLmhlaWdodCAvIGltYWdlUmVzb2x1dGlvbjtcbiAgICAgICAgY29uc3QgZWxlbSA9IHBhcmFtLmVsZW1lbnQ7XG4gICAgICAgIGlmIChzY2FsZWRXaWR0aCA+IDAgJiYgc2NhbGVkSGVpZ2h0ID4gMCkge1xuICAgICAgICAgIGlmIChjb21wdXRlZFN0eWxlW1wiYm94LXNpemluZ1wiXSA9PT0gQ3NzLmlkZW50LmJvcmRlcl9ib3gpIHtcbiAgICAgICAgICAgIGlmIChjb21wdXRlZFN0eWxlW1wiYm9yZGVyLWxlZnQtc3R5bGVcIl0gIT09IENzcy5pZGVudC5ub25lKSB7XG4gICAgICAgICAgICAgIHNjYWxlZFdpZHRoICs9IENzcy50b051bWJlcihcbiAgICAgICAgICAgICAgICBjb21wdXRlZFN0eWxlW1wiYm9yZGVyLWxlZnQtd2lkdGhcIl0sXG4gICAgICAgICAgICAgICAgdGhpcy5jb250ZXh0LFxuICAgICAgICAgICAgICApO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKGNvbXB1dGVkU3R5bGVbXCJib3JkZXItcmlnaHQtc3R5bGVcIl0gIT09IENzcy5pZGVudC5ub25lKSB7XG4gICAgICAgICAgICAgIHNjYWxlZFdpZHRoICs9IENzcy50b051bWJlcihcbiAgICAgICAgICAgICAgICBjb21wdXRlZFN0eWxlW1wiYm9yZGVyLXJpZ2h0LXdpZHRoXCJdLFxuICAgICAgICAgICAgICAgIHRoaXMuY29udGV4dCxcbiAgICAgICAgICAgICAgKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChjb21wdXRlZFN0eWxlW1wiYm9yZGVyLXRvcC1zdHlsZVwiXSAhPT0gQ3NzLmlkZW50Lm5vbmUpIHtcbiAgICAgICAgICAgICAgc2NhbGVkSGVpZ2h0ICs9IENzcy50b051bWJlcihcbiAgICAgICAgICAgICAgICBjb21wdXRlZFN0eWxlW1wiYm9yZGVyLXRvcC13aWR0aFwiXSxcbiAgICAgICAgICAgICAgICB0aGlzLmNvbnRleHQsXG4gICAgICAgICAgICAgICk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoY29tcHV0ZWRTdHlsZVtcImJvcmRlci1ib3R0b20tc3R5bGVcIl0gIT09IENzcy5pZGVudC5ub25lKSB7XG4gICAgICAgICAgICAgIHNjYWxlZEhlaWdodCArPSBDc3MudG9OdW1iZXIoXG4gICAgICAgICAgICAgICAgY29tcHV0ZWRTdHlsZVtcImJvcmRlci1ib3R0b20td2lkdGhcIl0sXG4gICAgICAgICAgICAgICAgdGhpcy5jb250ZXh0LFxuICAgICAgICAgICAgICApO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgICBpZiAoaW1hZ2VSZXNvbHV0aW9uID4gMSkge1xuICAgICAgICAgICAgY29uc3QgbWF4V2lkdGggPSBjb21wdXRlZFN0eWxlW1wibWF4LXdpZHRoXCJdIHx8IENzcy5pZGVudC5ub25lO1xuICAgICAgICAgICAgY29uc3QgbWF4SGVpZ2h0ID0gY29tcHV0ZWRTdHlsZVtcIm1heC1oZWlnaHRcIl0gfHwgQ3NzLmlkZW50Lm5vbmU7XG4gICAgICAgICAgICBpZiAobWF4V2lkdGggPT09IENzcy5pZGVudC5ub25lICYmIG1heEhlaWdodCA9PT0gQ3NzLmlkZW50Lm5vbmUpIHtcbiAgICAgICAgICAgICAgQmFzZS5zZXRDU1NQcm9wZXJ0eShlbGVtLCBcIm1heC13aWR0aFwiLCBgJHtzY2FsZWRXaWR0aH1weGApO1xuICAgICAgICAgICAgfSBlbHNlIGlmIChcbiAgICAgICAgICAgICAgbWF4V2lkdGggIT09IENzcy5pZGVudC5ub25lICYmXG4gICAgICAgICAgICAgIG1heEhlaWdodCA9PT0gQ3NzLmlkZW50Lm5vbmVcbiAgICAgICAgICAgICkge1xuICAgICAgICAgICAgICBCYXNlLnNldENTU1Byb3BlcnR5KGVsZW0sIFwid2lkdGhcIiwgYCR7c2NhbGVkV2lkdGh9cHhgKTtcbiAgICAgICAgICAgIH0gZWxzZSBpZiAoXG4gICAgICAgICAgICAgIG1heFdpZHRoID09PSBDc3MuaWRlbnQubm9uZSAmJlxuICAgICAgICAgICAgICBtYXhIZWlnaHQgIT09IENzcy5pZGVudC5ub25lXG4gICAgICAgICAgICApIHtcbiAgICAgICAgICAgICAgQmFzZS5zZXRDU1NQcm9wZXJ0eShlbGVtLCBcImhlaWdodFwiLCBgJHtzY2FsZWRIZWlnaHR9cHhgKTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgIC8vIG1heFdpZHRoICE9IG5vbmUgJiYgbWF4SGVpZ2h0ICE9IG5vbmVcbiAgICAgICAgICAgICAgQXNzZXJ0cy5hc3NlcnQobWF4V2lkdGguaXNOdW1lcmljKCkpO1xuICAgICAgICAgICAgICBBc3NlcnRzLmFzc2VydChtYXhIZWlnaHQuaXNOdW1lcmljKCkpO1xuICAgICAgICAgICAgICBjb25zdCBudW1lcmljTWF4V2lkdGggPSBtYXhXaWR0aCBhcyBDc3MuTnVtZXJpYztcbiAgICAgICAgICAgICAgY29uc3QgbnVtZXJpY01heEhlaWdodCA9IG1heEhlaWdodCBhcyBDc3MuTnVtZXJpYztcbiAgICAgICAgICAgICAgaWYgKG51bWVyaWNNYXhXaWR0aC51bml0ICE9PSBcIiVcIikge1xuICAgICAgICAgICAgICAgIEJhc2Uuc2V0Q1NTUHJvcGVydHkoXG4gICAgICAgICAgICAgICAgICBlbGVtLFxuICAgICAgICAgICAgICAgICAgXCJtYXgtd2lkdGhcIixcbiAgICAgICAgICAgICAgICAgIGAke01hdGgubWluKFxuICAgICAgICAgICAgICAgICAgICBzY2FsZWRXaWR0aCxcbiAgICAgICAgICAgICAgICAgICAgQ3NzLnRvTnVtYmVyKG51bWVyaWNNYXhXaWR0aCwgdGhpcy5jb250ZXh0KSxcbiAgICAgICAgICAgICAgICAgICl9cHhgLFxuICAgICAgICAgICAgICAgICk7XG4gICAgICAgICAgICAgIH0gZWxzZSBpZiAobnVtZXJpY01heEhlaWdodC51bml0ICE9PSBcIiVcIikge1xuICAgICAgICAgICAgICAgIEJhc2Uuc2V0Q1NTUHJvcGVydHkoXG4gICAgICAgICAgICAgICAgICBlbGVtLFxuICAgICAgICAgICAgICAgICAgXCJtYXgtaGVpZ2h0XCIsXG4gICAgICAgICAgICAgICAgICBgJHtNYXRoLm1pbihcbiAgICAgICAgICAgICAgICAgICAgc2NhbGVkSGVpZ2h0LFxuICAgICAgICAgICAgICAgICAgICBDc3MudG9OdW1iZXIobnVtZXJpY01heEhlaWdodCwgdGhpcy5jb250ZXh0KSxcbiAgICAgICAgICAgICAgICAgICl9cHhgLFxuICAgICAgICAgICAgICAgICk7XG4gICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgaWYgKGlzVmVydGljYWwpIHtcbiAgICAgICAgICAgICAgICAgIEJhc2Uuc2V0Q1NTUHJvcGVydHkoZWxlbSwgXCJoZWlnaHRcIiwgYCR7c2NhbGVkSGVpZ2h0fXB4YCk7XG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgIEJhc2Uuc2V0Q1NTUHJvcGVydHkoZWxlbSwgXCJ3aWR0aFwiLCBgJHtzY2FsZWRXaWR0aH1weGApO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgIH0gZWxzZSBpZiAoaW1hZ2VSZXNvbHV0aW9uIDwgMSkge1xuICAgICAgICAgICAgY29uc3QgbWluV2lkdGggPSBjb21wdXRlZFN0eWxlW1wibWluLXdpZHRoXCJdIHx8IENzcy5udW1lcmljWmVybztcbiAgICAgICAgICAgIGNvbnN0IG1pbkhlaWdodCA9IGNvbXB1dGVkU3R5bGVbXCJtaW4taGVpZ2h0XCJdIHx8IENzcy5udW1lcmljWmVybztcbiAgICAgICAgICAgIEFzc2VydHMuYXNzZXJ0KG1pbldpZHRoLmlzTnVtZXJpYygpKTtcbiAgICAgICAgICAgIEFzc2VydHMuYXNzZXJ0KG1pbldpZHRoLmlzTnVtZXJpYygpKTtcbiAgICAgICAgICAgIGNvbnN0IG51bWVyaWNNaW5XaWR0aCA9IG1pbldpZHRoIGFzIENzcy5OdW1lcmljO1xuICAgICAgICAgICAgY29uc3QgbnVtZXJpY01pbkhlaWdodCA9IG1pbkhlaWdodCBhcyBDc3MuTnVtZXJpYztcbiAgICAgICAgICAgIGlmIChudW1lcmljTWluV2lkdGgubnVtID09PSAwICYmIG51bWVyaWNNaW5IZWlnaHQubnVtID09PSAwKSB7XG4gICAgICAgICAgICAgIEJhc2Uuc2V0Q1NTUHJvcGVydHkoZWxlbSwgXCJtaW4td2lkdGhcIiwgYCR7c2NhbGVkV2lkdGh9cHhgKTtcbiAgICAgICAgICAgIH0gZWxzZSBpZiAoXG4gICAgICAgICAgICAgIG51bWVyaWNNaW5XaWR0aC5udW0gIT09IDAgJiZcbiAgICAgICAgICAgICAgbnVtZXJpY01pbkhlaWdodC5udW0gPT09IDBcbiAgICAgICAgICAgICkge1xuICAgICAgICAgICAgICBCYXNlLnNldENTU1Byb3BlcnR5KGVsZW0sIFwid2lkdGhcIiwgYCR7c2NhbGVkV2lkdGh9cHhgKTtcbiAgICAgICAgICAgIH0gZWxzZSBpZiAoXG4gICAgICAgICAgICAgIG51bWVyaWNNaW5XaWR0aC5udW0gPT09IDAgJiZcbiAgICAgICAgICAgICAgbnVtZXJpY01pbkhlaWdodC5udW0gIT09IDBcbiAgICAgICAgICAgICkge1xuICAgICAgICAgICAgICBCYXNlLnNldENTU1Byb3BlcnR5KGVsZW0sIFwiaGVpZ2h0XCIsIGAke3NjYWxlZEhlaWdodH1weGApO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgLy8gbWluV2lkdGggIT0gMCAmJiBtaW5IZWlnaHQgIT0gMFxuICAgICAgICAgICAgICBpZiAobnVtZXJpY01pbldpZHRoLnVuaXQgIT09IFwiJVwiKSB7XG4gICAgICAgICAgICAgICAgQmFzZS5zZXRDU1NQcm9wZXJ0eShcbiAgICAgICAgICAgICAgICAgIGVsZW0sXG4gICAgICAgICAgICAgICAgICBcIm1pbi13aWR0aFwiLFxuICAgICAgICAgICAgICAgICAgYCR7TWF0aC5tYXgoXG4gICAgICAgICAgICAgICAgICAgIHNjYWxlZFdpZHRoLFxuICAgICAgICAgICAgICAgICAgICBDc3MudG9OdW1iZXIobnVtZXJpY01pbldpZHRoLCB0aGlzLmNvbnRleHQpLFxuICAgICAgICAgICAgICAgICAgKX1weGAsXG4gICAgICAgICAgICAgICAgKTtcbiAgICAgICAgICAgICAgfSBlbHNlIGlmIChudW1lcmljTWluSGVpZ2h0LnVuaXQgIT09IFwiJVwiKSB7XG4gICAgICAgICAgICAgICAgQmFzZS5zZXRDU1NQcm9wZXJ0eShcbiAgICAgICAgICAgICAgICAgIGVsZW0sXG4gICAgICAgICAgICAgICAgICBcIm1pbi1oZWlnaHRcIixcbiAgICAgICAgICAgICAgICAgIGAke01hdGgubWF4KFxuICAgICAgICAgICAgICAgICAgICBzY2FsZWRIZWlnaHQsXG4gICAgICAgICAgICAgICAgICAgIENzcy50b051bWJlcihudW1lcmljTWluSGVpZ2h0LCB0aGlzLmNvbnRleHQpLFxuICAgICAgICAgICAgICAgICAgKX1weGAsXG4gICAgICAgICAgICAgICAgKTtcbiAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICBpZiAoaXNWZXJ0aWNhbCkge1xuICAgICAgICAgICAgICAgICAgQmFzZS5zZXRDU1NQcm9wZXJ0eShlbGVtLCBcImhlaWdodFwiLCBgJHtzY2FsZWRIZWlnaHR9cHhgKTtcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgQmFzZS5zZXRDU1NQcm9wZXJ0eShlbGVtLCBcIndpZHRoXCIsIGAke3NjYWxlZFdpZHRofXB4YCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG4gICAgfSk7XG4gIH1cblxuICBwcml2YXRlIHByZXByb2Nlc3NFbGVtZW50U3R5bGUoY29tcHV0ZWRTdHlsZTogeyBba2V5OiBzdHJpbmddOiBDc3MuVmFsIH0pIHtcbiAgICBjb25zdCBob29rczogUGx1Z2luLlByZVByb2Nlc3NFbGVtZW50U3R5bGVIb29rW10gPSBQbHVnaW4uZ2V0SG9va3NGb3JOYW1lKFxuICAgICAgUGx1Z2luLkhPT0tTLlBSRVBST0NFU1NfRUxFTUVOVF9TVFlMRSxcbiAgICApO1xuICAgIGhvb2tzLmZvckVhY2goKGhvb2spID0+IHtcbiAgICAgIGhvb2sodGhpcy5ub2RlQ29udGV4dCwgY29tcHV0ZWRTdHlsZSk7XG4gICAgfSk7XG4gIH1cblxuICBwcml2YXRlIGZpbmRBbmRQcm9jZXNzUmVwZWF0aW5nRWxlbWVudHMoXG4gICAgZWxlbWVudDogRWxlbWVudCxcbiAgICBzdHlsZXI6IENzc1N0eWxlci5BYnN0cmFjdFN0eWxlcixcbiAgKSB7XG4gICAgZm9yIChcbiAgICAgIGxldCBjaGlsZDogTm9kZSA9IGVsZW1lbnQuZmlyc3RDaGlsZDtcbiAgICAgIGNoaWxkO1xuICAgICAgY2hpbGQgPSBjaGlsZC5uZXh0U2libGluZ1xuICAgICkge1xuICAgICAgaWYgKGNoaWxkLm5vZGVUeXBlICE9PSAxKSB7XG4gICAgICAgIGNvbnRpbnVlO1xuICAgICAgfVxuICAgICAgY29uc3QgY29tcHV0ZWRTdHlsZSA9IHt9O1xuICAgICAgY29uc3QgZWxlbWVudFN0eWxlID0gc3R5bGVyLmdldFN0eWxlKGNoaWxkIGFzIEVsZW1lbnQsIGZhbHNlKTtcbiAgICAgIHRoaXMuY29tcHV0ZVN0eWxlKFxuICAgICAgICB0aGlzLm5vZGVDb250ZXh0LnZlcnRpY2FsLFxuICAgICAgICB0aGlzLm5vZGVDb250ZXh0LmRpcmVjdGlvbiA9PT0gXCJydGxcIixcbiAgICAgICAgZWxlbWVudFN0eWxlLFxuICAgICAgICBjb21wdXRlZFN0eWxlLFxuICAgICAgKTtcbiAgICAgIGNvbnN0IHByb2Nlc3NSZXBlYXRPbkJyZWFrID0gdGhpcy5wcm9jZXNzUmVwZWF0T25CcmVhayhjb21wdXRlZFN0eWxlKTtcbiAgICAgIGlmICghcHJvY2Vzc1JlcGVhdE9uQnJlYWspIHtcbiAgICAgICAgY29udGludWU7XG4gICAgICB9XG4gICAgICBpZiAoXG4gICAgICAgIHRoaXMubm9kZUNvbnRleHQuZm9ybWF0dGluZ0NvbnRleHQgaW5zdGFuY2VvZlxuICAgICAgICAgIFJlcGV0aXRpdmVFbGVtZW50LlJlcGV0aXRpdmVFbGVtZW50c093bmVyRm9ybWF0dGluZ0NvbnRleHQgJiZcbiAgICAgICAgIXRoaXMubm9kZUNvbnRleHQuYmVsb25nc1RvKHRoaXMubm9kZUNvbnRleHQuZm9ybWF0dGluZ0NvbnRleHQpXG4gICAgICApIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuICAgICAgY29uc3QgcGFyZW50ID0gdGhpcy5ub2RlQ29udGV4dC5wYXJlbnQ7XG4gICAgICBjb25zdCBwYXJlbnRGb3JtYXR0aW5nQ29udGV4dCA9IHBhcmVudCAmJiBwYXJlbnQuZm9ybWF0dGluZ0NvbnRleHQ7XG4gICAgICB0aGlzLm5vZGVDb250ZXh0LmZvcm1hdHRpbmdDb250ZXh0ID0gbmV3IFJlcGV0aXRpdmVFbGVtZW50LlJlcGV0aXRpdmVFbGVtZW50c093bmVyRm9ybWF0dGluZ0NvbnRleHQoXG4gICAgICAgIHBhcmVudEZvcm1hdHRpbmdDb250ZXh0LFxuICAgICAgICB0aGlzLm5vZGVDb250ZXh0LnNvdXJjZU5vZGUgYXMgRWxlbWVudCxcbiAgICAgICk7XG4gICAgICAodGhpcy5ub2RlQ29udGV4dFxuICAgICAgICAuZm9ybWF0dGluZ0NvbnRleHQgYXMgUmVwZXRpdGl2ZUVsZW1lbnQuUmVwZXRpdGl2ZUVsZW1lbnRzT3duZXJGb3JtYXR0aW5nQ29udGV4dCkuaW5pdGlhbGl6ZVJlcGV0aXRpdmVFbGVtZW50cyhcbiAgICAgICAgdGhpcy5ub2RlQ29udGV4dC52ZXJ0aWNhbCxcbiAgICAgICk7XG4gICAgICByZXR1cm47XG4gICAgfVxuICB9XG5cbiAgcHJpdmF0ZSBwcm9jZXNzUmVwZWF0T25CcmVhayhjb21wdXRlZFN0eWxlOiB7IFtrZXk6IHN0cmluZ106IENzcy5WYWwgfSkge1xuICAgIGxldCByZXBlYXRPbkJyZWFrID0gY29tcHV0ZWRTdHlsZVtcInJlcGVhdC1vbi1icmVha1wiXTtcbiAgICBpZiAocmVwZWF0T25CcmVhayAhPT0gQ3NzLmlkZW50Lm5vbmUpIHtcbiAgICAgIGlmIChyZXBlYXRPbkJyZWFrID09PSBDc3MuaWRlbnQuYXV0bykge1xuICAgICAgICBpZiAoY29tcHV0ZWRTdHlsZVtcImRpc3BsYXlcIl0gPT09IENzcy5pZGVudC50YWJsZV9oZWFkZXJfZ3JvdXApIHtcbiAgICAgICAgICByZXBlYXRPbkJyZWFrID0gQ3NzLmlkZW50LmhlYWRlcjtcbiAgICAgICAgfSBlbHNlIGlmIChjb21wdXRlZFN0eWxlW1wiZGlzcGxheVwiXSA9PT0gQ3NzLmlkZW50LnRhYmxlX2Zvb3Rlcl9ncm91cCkge1xuICAgICAgICAgIHJlcGVhdE9uQnJlYWsgPSBDc3MuaWRlbnQuZm9vdGVyO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHJlcGVhdE9uQnJlYWsgPSBDc3MuaWRlbnQubm9uZTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgaWYgKHJlcGVhdE9uQnJlYWsgJiYgcmVwZWF0T25CcmVhayAhPT0gQ3NzLmlkZW50Lm5vbmUpIHtcbiAgICAgICAgcmV0dXJuIHJlcGVhdE9uQnJlYWsudG9TdHJpbmcoKTtcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIG51bGw7XG4gIH1cblxuICBwcml2YXRlIGNyZWF0ZVRleHROb2RlVmlldygpOiBUYXNrLlJlc3VsdDxib29sZWFuPiB7XG4gICAgY29uc3QgZnJhbWU6IFRhc2suRnJhbWU8Ym9vbGVhbj4gPSBUYXNrLm5ld0ZyYW1lKFwiY3JlYXRlVGV4dE5vZGVWaWV3XCIpO1xuICAgIHRoaXMucHJlcHJvY2Vzc1RleHRDb250ZW50KCkudGhlbigoKSA9PiB7XG4gICAgICBjb25zdCBvZmZzZXRJbk5vZGUgPSB0aGlzLm9mZnNldEluTm9kZSB8fCAwO1xuICAgICAgY29uc3QgdGV4dENvbnRlbnQgPSBEaWZmLnJlc3RvcmVOZXdUZXh0KFxuICAgICAgICB0aGlzLm5vZGVDb250ZXh0LnByZXByb2Nlc3NlZFRleHRDb250ZW50LFxuICAgICAgKS5zdWJzdHIob2Zmc2V0SW5Ob2RlKTtcbiAgICAgIHRoaXMudmlld05vZGUgPSBkb2N1bWVudC5jcmVhdGVUZXh0Tm9kZSh0ZXh0Q29udGVudCk7XG4gICAgICBmcmFtZS5maW5pc2godHJ1ZSk7XG4gICAgfSk7XG4gICAgcmV0dXJuIGZyYW1lLnJlc3VsdCgpO1xuICB9XG5cbiAgcHJpdmF0ZSBwcmVwcm9jZXNzVGV4dENvbnRlbnQoKTogVGFzay5SZXN1bHQ8Ym9vbGVhbj4ge1xuICAgIGlmICh0aGlzLm5vZGVDb250ZXh0LnByZXByb2Nlc3NlZFRleHRDb250ZW50ICE9IG51bGwpIHtcbiAgICAgIHJldHVybiBUYXNrLm5ld1Jlc3VsdCh0cnVlKTtcbiAgICB9XG4gICAgbGV0IG9yaWdpbmw6IHN0cmluZztcbiAgICBsZXQgdGV4dENvbnRlbnQgPSAob3JpZ2lubCA9IHRoaXMuc291cmNlTm9kZS50ZXh0Q29udGVudCk7XG4gICAgY29uc3QgZnJhbWU6IFRhc2suRnJhbWU8Ym9vbGVhbj4gPSBUYXNrLm5ld0ZyYW1lKFwicHJlcHJvY2Vzc1RleHRDb250ZW50XCIpO1xuICAgIGNvbnN0IGhvb2tzOiBQbHVnaW4uUHJlUHJvY2Vzc1RleHRDb250ZW50SG9va1tdID0gUGx1Z2luLmdldEhvb2tzRm9yTmFtZShcbiAgICAgIFBsdWdpbi5IT09LUy5QUkVQUk9DRVNTX1RFWFRfQ09OVEVOVCxcbiAgICApO1xuICAgIGxldCBpbmRleCA9IDA7XG4gICAgZnJhbWVcbiAgICAgIC5sb29wKCgpID0+IHtcbiAgICAgICAgaWYgKGluZGV4ID49IGhvb2tzLmxlbmd0aCkge1xuICAgICAgICAgIHJldHVybiBUYXNrLm5ld1Jlc3VsdChmYWxzZSk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGhvb2tzW2luZGV4KytdKHRoaXMubm9kZUNvbnRleHQsIHRleHRDb250ZW50KS50aGVuQXN5bmMoXG4gICAgICAgICAgKHByb2Nlc3NlZFRleHQpID0+IHtcbiAgICAgICAgICAgIHRleHRDb250ZW50ID0gcHJvY2Vzc2VkVGV4dDtcbiAgICAgICAgICAgIHJldHVybiBUYXNrLm5ld1Jlc3VsdCh0cnVlKTtcbiAgICAgICAgICB9LFxuICAgICAgICApO1xuICAgICAgfSlcbiAgICAgIC50aGVuKCgpID0+IHtcbiAgICAgICAgdGhpcy5ub2RlQ29udGV4dC5wcmVwcm9jZXNzZWRUZXh0Q29udGVudCA9IERpZmYuZGlmZkNoYXJzKFxuICAgICAgICAgIG9yaWdpbmwsXG4gICAgICAgICAgdGV4dENvbnRlbnQsXG4gICAgICAgICk7XG4gICAgICAgIGZyYW1lLmZpbmlzaCh0cnVlKTtcbiAgICAgIH0pO1xuICAgIHJldHVybiBmcmFtZS5yZXN1bHQoKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBAcmV0dXJuIGhvbGRpbmcgdHJ1ZSBpZiBjaGlsZHJlbiBzaG91bGQgYmUgcHJvY2Vzc2VkXG4gICAqL1xuICBjcmVhdGVOb2RlVmlldyhcbiAgICBmaXJzdFRpbWU6IGJvb2xlYW4sXG4gICAgYXRVbmZvcmNlZEJyZWFrOiBib29sZWFuLFxuICApOiBUYXNrLlJlc3VsdDxib29sZWFuPiB7XG4gICAgY29uc3QgZnJhbWU6IFRhc2suRnJhbWU8Ym9vbGVhbj4gPSBUYXNrLm5ld0ZyYW1lKFwiY3JlYXRlTm9kZVZpZXdcIik7XG4gICAgbGV0IHJlc3VsdDogVGFzay5SZXN1bHQ8Ym9vbGVhbj47XG4gICAgbGV0IG5lZWRUb1Byb2Nlc3NDaGlsZHJlbiA9IHRydWU7XG4gICAgaWYgKHRoaXMuc291cmNlTm9kZS5ub2RlVHlwZSA9PSAxKSB7XG4gICAgICByZXN1bHQgPSB0aGlzLmNyZWF0ZUVsZW1lbnRWaWV3KGZpcnN0VGltZSwgYXRVbmZvcmNlZEJyZWFrKTtcbiAgICB9IGVsc2Uge1xuICAgICAgaWYgKHRoaXMuc291cmNlTm9kZS5ub2RlVHlwZSA9PSA4KSB7XG4gICAgICAgIHRoaXMudmlld05vZGUgPSBudWxsOyAvLyBjb21tZW50IG5vZGVcbiAgICAgICAgcmVzdWx0ID0gVGFzay5uZXdSZXN1bHQodHJ1ZSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICByZXN1bHQgPSB0aGlzLmNyZWF0ZVRleHROb2RlVmlldygpO1xuICAgICAgfVxuICAgIH1cbiAgICByZXN1bHQudGhlbigocHJvY2Vzc0NoaWxkcmVuKSA9PiB7XG4gICAgICBuZWVkVG9Qcm9jZXNzQ2hpbGRyZW4gPSBwcm9jZXNzQ2hpbGRyZW47XG4gICAgICB0aGlzLm5vZGVDb250ZXh0LnZpZXdOb2RlID0gdGhpcy52aWV3Tm9kZTtcbiAgICAgIGlmICh0aGlzLnZpZXdOb2RlKSB7XG4gICAgICAgIGNvbnN0IHBhcmVudCA9IHRoaXMubm9kZUNvbnRleHQucGFyZW50XG4gICAgICAgICAgPyB0aGlzLm5vZGVDb250ZXh0LnBhcmVudC52aWV3Tm9kZVxuICAgICAgICAgIDogdGhpcy52aWV3Um9vdDtcbiAgICAgICAgaWYgKHBhcmVudCkge1xuICAgICAgICAgIHBhcmVudC5hcHBlbmRDaGlsZCh0aGlzLnZpZXdOb2RlKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgZnJhbWUuZmluaXNoKG5lZWRUb1Byb2Nlc3NDaGlsZHJlbik7XG4gICAgfSk7XG4gICAgcmV0dXJuIGZyYW1lLnJlc3VsdCgpO1xuICB9XG5cbiAgLyoqXG4gICAqIEBvdmVycmlkZVxuICAgKi9cbiAgc2V0Q3VycmVudChcbiAgICBub2RlQ29udGV4dDogVnRyZWUuTm9kZUNvbnRleHQsXG4gICAgZmlyc3RUaW1lOiBib29sZWFuLFxuICAgIGF0VW5mb3JjZWRCcmVhaz86IGJvb2xlYW4sXG4gICk6IFRhc2suUmVzdWx0PGJvb2xlYW4+IHtcbiAgICB0aGlzLm5vZGVDb250ZXh0ID0gbm9kZUNvbnRleHQ7XG4gICAgaWYgKG5vZGVDb250ZXh0KSB7XG4gICAgICB0aGlzLnNvdXJjZU5vZGUgPSBub2RlQ29udGV4dC5zb3VyY2VOb2RlO1xuICAgICAgdGhpcy5vZmZzZXRJbk5vZGUgPSBub2RlQ29udGV4dC5vZmZzZXRJbk5vZGU7XG4gICAgfSBlbHNlIHtcbiAgICAgIHRoaXMuc291cmNlTm9kZSA9IG51bGw7XG4gICAgICB0aGlzLm9mZnNldEluTm9kZSA9IC0xO1xuICAgIH1cbiAgICB0aGlzLnZpZXdOb2RlID0gbnVsbDtcbiAgICBpZiAodGhpcy5ub2RlQ29udGV4dCkge1xuICAgICAgcmV0dXJuIHRoaXMuY3JlYXRlTm9kZVZpZXcoZmlyc3RUaW1lLCAhIWF0VW5mb3JjZWRCcmVhayk7XG4gICAgfVxuICAgIHJldHVybiBUYXNrLm5ld1Jlc3VsdCh0cnVlKTtcbiAgfVxuXG4gIHByb2Nlc3NTaGFkb3dDb250ZW50KHBvczogVnRyZWUuTm9kZUNvbnRleHQpOiBWdHJlZS5Ob2RlQ29udGV4dCB7XG4gICAgaWYgKFxuICAgICAgcG9zLnNoYWRvd0NvbnRleHQgPT0gbnVsbCB8fFxuICAgICAgKHBvcy5zb3VyY2VOb2RlIGFzIEVsZW1lbnQpLmxvY2FsTmFtZSAhPSBcImNvbnRlbnRcIiB8fFxuICAgICAgcG9zLnNvdXJjZU5vZGUubmFtZXNwYWNlVVJJICE9IEJhc2UuTlMuU0hBRE9XXG4gICAgKSB7XG4gICAgICByZXR1cm4gcG9zO1xuICAgIH1cbiAgICBjb25zdCBib3hPZmZzZXQgPSBwb3MuYm94T2Zmc2V0O1xuICAgIGNvbnN0IHNoYWRvdyA9IHBvcy5zaGFkb3dDb250ZXh0O1xuICAgIGNvbnN0IHBhcmVudCA9IHBvcy5wYXJlbnQ7XG5cbiAgICAvLyBjb250ZW50IHRoYXQgd2lsbCBiZSBpbnNlcnRlZFxuICAgIGxldCBjb250ZW50Tm9kZTogTm9kZTtcbiAgICBsZXQgY29udGVudFNoYWRvd1R5cGU6IFZ0cmVlLlNoYWRvd1R5cGU7XG4gICAgbGV0IGNvbnRlbnRTaGFkb3c6IFZ0cmVlLlNoYWRvd0NvbnRleHQ7XG4gICAgaWYgKHNoYWRvdy5zdWJTaGFkb3cpIHtcbiAgICAgIGNvbnRlbnRTaGFkb3cgPSBzaGFkb3cuc3ViU2hhZG93O1xuICAgICAgY29udGVudE5vZGUgPSBzaGFkb3cucm9vdDtcbiAgICAgIGNvbnRlbnRTaGFkb3dUeXBlID0gc2hhZG93LnR5cGU7XG4gICAgICBpZiAoY29udGVudFNoYWRvd1R5cGUgPT0gVnRyZWUuU2hhZG93VHlwZS5ST09UTEVTUykge1xuICAgICAgICBjb250ZW50Tm9kZSA9IGNvbnRlbnROb2RlLmZpcnN0Q2hpbGQ7XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIGNvbnRlbnRTaGFkb3cgPSBzaGFkb3cucGFyZW50U2hhZG93O1xuICAgICAgY29udGVudE5vZGUgPSBzaGFkb3cub3duZXIuZmlyc3RDaGlsZDtcbiAgICAgIGNvbnRlbnRTaGFkb3dUeXBlID0gVnRyZWUuU2hhZG93VHlwZS5ST09UTEVTUztcbiAgICB9XG4gICAgY29uc3QgbmV4dFNpYmxpbmcgPSBwb3Muc291cmNlTm9kZS5uZXh0U2libGluZztcbiAgICBpZiAobmV4dFNpYmxpbmcpIHtcbiAgICAgIHBvcy5zb3VyY2VOb2RlID0gbmV4dFNpYmxpbmc7XG4gICAgICBwb3MucmVzZXRWaWV3KCk7XG4gICAgfSBlbHNlIGlmIChwb3Muc2hhZG93U2libGluZykge1xuICAgICAgcG9zID0gcG9zLnNoYWRvd1NpYmxpbmc7XG4gICAgfSBlbHNlIGlmIChjb250ZW50Tm9kZSkge1xuICAgICAgcG9zID0gbnVsbDtcbiAgICB9IGVsc2Uge1xuICAgICAgcG9zID0gcG9zLnBhcmVudC5tb2RpZnkoKTtcbiAgICAgIHBvcy5hZnRlciA9IHRydWU7XG4gICAgfVxuICAgIGlmIChjb250ZW50Tm9kZSkge1xuICAgICAgY29uc3QgciA9IG5ldyBWdHJlZS5Ob2RlQ29udGV4dChjb250ZW50Tm9kZSwgcGFyZW50LCBib3hPZmZzZXQpO1xuICAgICAgci5zaGFkb3dDb250ZXh0ID0gY29udGVudFNoYWRvdztcbiAgICAgIHIuc2hhZG93VHlwZSA9IGNvbnRlbnRTaGFkb3dUeXBlO1xuICAgICAgci5zaGFkb3dTaWJsaW5nID0gcG9zO1xuICAgICAgcmV0dXJuIHI7XG4gICAgfVxuICAgIHBvcy5ib3hPZmZzZXQgPSBib3hPZmZzZXQ7XG4gICAgcmV0dXJuIHBvcztcbiAgfVxuXG4gIHByaXZhdGUgbmV4dFBvc2l0aW9uSW5UcmVlKHBvczogVnRyZWUuTm9kZUNvbnRleHQpOiBWdHJlZS5Ob2RlQ29udGV4dCB7XG4gICAgbGV0IGJveE9mZnNldCA9IHBvcy5ib3hPZmZzZXQgKyAxOyAvLyBvZmZzZXQgZm9yIHRoZSBuZXh0IHBvc2l0aW9uXG4gICAgaWYgKHBvcy5hZnRlcikge1xuICAgICAgLy8gcm9vdCwgdGhhdCB3YXMgdGhlIGxhc3QgcG9zc2libGUgcG9zaXRpb25cbiAgICAgIGlmICghcG9zLnBhcmVudCkge1xuICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgIH1cblxuICAgICAgLy8gd2UgYXJlIGRvbmUgd2l0aCB0aGlzIHNvdXJjZU5vZGUsIHNlZSBpZiB0aGVyZSBpcyBhIG5leHQgc2libGluZyxcbiAgICAgIC8vIHVubGVzcyB0aGlzIGlzIHRoZSByb290IG9mIHRoZSBzaGFkb3cgdHJlZVxuICAgICAgaWYgKHBvcy5zaGFkb3dUeXBlICE9IFZ0cmVlLlNoYWRvd1R5cGUuUk9PVEVEKSB7XG4gICAgICAgIGNvbnN0IG5leHQgPSBwb3Muc291cmNlTm9kZS5uZXh0U2libGluZztcbiAgICAgICAgaWYgKG5leHQpIHtcbiAgICAgICAgICBwb3MgPSBwb3MubW9kaWZ5KCk7XG5cbiAgICAgICAgICAvLyBrZWVwIHNoYWRvd1R5cGVcbiAgICAgICAgICBwb3MuYm94T2Zmc2V0ID0gYm94T2Zmc2V0O1xuICAgICAgICAgIHBvcy5zb3VyY2VOb2RlID0gbmV4dDtcbiAgICAgICAgICBwb3MucmVzZXRWaWV3KCk7XG4gICAgICAgICAgcmV0dXJuIHRoaXMucHJvY2Vzc1NoYWRvd0NvbnRlbnQocG9zKTtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICAvLyBpZiBubyB2aWFibGUgc2libGluZ3MsIGNoZWNrIGlmIHRoZXJlIGFyZSBzaGFkb3cgc2libGluZ3NcbiAgICAgIGlmIChwb3Muc2hhZG93U2libGluZykge1xuICAgICAgICAvLyBvdXIgbmV4dCBwb3NpdGlvbiBpcyB0aGUgZWxlbWVudCBhZnRlciBzaGFkb3c6Y29udGVudCBpbiB0aGUgcGFyZW50XG4gICAgICAgIC8vIHNoYWRvdyB0cmVlXG4gICAgICAgIHBvcyA9IHBvcy5zaGFkb3dTaWJsaW5nLm1vZGlmeSgpO1xuICAgICAgICBwb3MuYm94T2Zmc2V0ID0gYm94T2Zmc2V0O1xuICAgICAgICByZXR1cm4gcG9zO1xuICAgICAgfVxuXG4gICAgICAvLyBpZiBub3Qgcm9vdGxlc3Mgc2hhZG93LCBtb3ZlIHRvIHRoZSBcImFmdGVyXCIgcG9zaXRpb24gZm9yIHRoZSBwYXJlbnRcbiAgICAgIHBvcyA9IHBvcy5wYXJlbnQubW9kaWZ5KCk7XG4gICAgICBwb3MuYm94T2Zmc2V0ID0gYm94T2Zmc2V0O1xuICAgICAgcG9zLmFmdGVyID0gdHJ1ZTtcbiAgICAgIHJldHVybiBwb3M7XG4gICAgfSBlbHNlIHtcbiAgICAgIC8vIGFueSBzaGFkb3cgdHJlZXM/XG4gICAgICBpZiAocG9zLm5vZGVTaGFkb3cpIHtcbiAgICAgICAgbGV0IHNoYWRvd05vZGU6IE5vZGUgfCBudWxsID0gcG9zLm5vZGVTaGFkb3cucm9vdDtcbiAgICAgICAgaWYgKHBvcy5ub2RlU2hhZG93LnR5cGUgPT0gVnRyZWUuU2hhZG93VHlwZS5ST09UTEVTUykge1xuICAgICAgICAgIHNoYWRvd05vZGUgPSBzaGFkb3dOb2RlLmZpcnN0Q2hpbGQ7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHNoYWRvd05vZGUpIHtcbiAgICAgICAgICBjb25zdCBzciA9IG5ldyBWdHJlZS5Ob2RlQ29udGV4dChzaGFkb3dOb2RlLCBwb3MsIGJveE9mZnNldCk7XG4gICAgICAgICAgc3Iuc2hhZG93Q29udGV4dCA9IHBvcy5ub2RlU2hhZG93O1xuICAgICAgICAgIHNyLnNoYWRvd1R5cGUgPSBwb3Mubm9kZVNoYWRvdy50eXBlO1xuICAgICAgICAgIHJldHVybiB0aGlzLnByb2Nlc3NTaGFkb3dDb250ZW50KHNyKTtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICAvLyBhbnkgY2hpbGRyZW4/XG4gICAgICBjb25zdCBjaGlsZCA9IHBvcy5zb3VyY2VOb2RlLmZpcnN0Q2hpbGQ7XG4gICAgICBpZiAoY2hpbGQpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMucHJvY2Vzc1NoYWRvd0NvbnRlbnQoXG4gICAgICAgICAgbmV3IFZ0cmVlLk5vZGVDb250ZXh0KGNoaWxkLCBwb3MsIGJveE9mZnNldCksXG4gICAgICAgICk7XG4gICAgICB9XG5cbiAgICAgIC8vIG5vIGNoaWxkcmVuIC0gd2FzIHRoZXJlIHRleHQgY29udGVudD9cbiAgICAgIGlmIChwb3Muc291cmNlTm9kZS5ub2RlVHlwZSAhPSAxKSB7XG4gICAgICAgIGNvbnN0IGNvbnRlbnQgPSBEaWZmLnJlc3RvcmVOZXdUZXh0KHBvcy5wcmVwcm9jZXNzZWRUZXh0Q29udGVudCk7XG4gICAgICAgIGJveE9mZnNldCArPSBjb250ZW50Lmxlbmd0aCAtIDEgLSBwb3Mub2Zmc2V0SW5Ob2RlO1xuICAgICAgfVxuICAgICAgcG9zID0gcG9zLm1vZGlmeSgpO1xuICAgICAgcG9zLmJveE9mZnNldCA9IGJveE9mZnNldDtcbiAgICAgIHBvcy5hZnRlciA9IHRydWU7XG4gICAgICByZXR1cm4gcG9zO1xuICAgIH1cbiAgfVxuXG4gIGlzVHJhbnNjbHVzaW9uKFxuICAgIGVsZW1lbnQ6IEVsZW1lbnQsXG4gICAgZWxlbWVudFN0eWxlOiBDc3NDYXNjYWRlLkVsZW1lbnRTdHlsZSxcbiAgICB0cmFuc2NsdXNpb25UeXBlOiBzdHJpbmcgfCBudWxsLFxuICApIHtcbiAgICBjb25zdCBwcm9jID0gQ3NzQ2FzY2FkZS5nZXRQcm9wKGVsZW1lbnRTdHlsZSwgXCJoeXBlcmxpbmstcHJvY2Vzc2luZ1wiKTtcbiAgICBpZiAoIXByb2MpIHtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gICAgY29uc3QgcHJvcCA9IHByb2MuZXZhbHVhdGUodGhpcy5jb250ZXh0LCBcImh5cGVybGluay1wcm9jZXNzaW5nXCIpO1xuICAgIGlmICghcHJvcCkge1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgICByZXR1cm4gcHJvcC50b1N0cmluZygpID09IHRyYW5zY2x1c2lvblR5cGU7XG4gIH1cblxuICAvKipcbiAgICogQG92ZXJyaWRlXG4gICAqL1xuICBuZXh0SW5UcmVlKFxuICAgIHBvc2l0aW9uOiBWdHJlZS5Ob2RlQ29udGV4dCxcbiAgICBhdFVuZm9yY2VkQnJlYWs/OiBib29sZWFuLFxuICApOiBUYXNrLlJlc3VsdDxWdHJlZS5Ob2RlQ29udGV4dD4ge1xuICAgIGxldCBub2RlQ29udGV4dCA9IHRoaXMubmV4dFBvc2l0aW9uSW5UcmVlKHBvc2l0aW9uKTtcbiAgICBpZiAoIW5vZGVDb250ZXh0IHx8IG5vZGVDb250ZXh0LmFmdGVyKSB7XG4gICAgICByZXR1cm4gVGFzay5uZXdSZXN1bHQobm9kZUNvbnRleHQpO1xuICAgIH1cbiAgICBjb25zdCBmcmFtZTogVGFzay5GcmFtZTxWdHJlZS5Ob2RlQ29udGV4dD4gPSBUYXNrLm5ld0ZyYW1lKFwibmV4dEluVHJlZVwiKTtcbiAgICB0aGlzLnNldEN1cnJlbnQobm9kZUNvbnRleHQsIHRydWUsIGF0VW5mb3JjZWRCcmVhaykudGhlbihcbiAgICAgIChwcm9jZXNzQ2hpbGRyZW4pID0+IHtcbiAgICAgICAgaWYgKCFub2RlQ29udGV4dC52aWV3Tm9kZSB8fCAhcHJvY2Vzc0NoaWxkcmVuKSB7XG4gICAgICAgICAgbm9kZUNvbnRleHQgPSBub2RlQ29udGV4dC5tb2RpZnkoKTtcbiAgICAgICAgICBub2RlQ29udGV4dC5hZnRlciA9IHRydWU7IC8vIHNraXBcbiAgICAgICAgICBpZiAoIW5vZGVDb250ZXh0LnZpZXdOb2RlKSB7XG4gICAgICAgICAgICBub2RlQ29udGV4dC5pbmxpbmUgPSB0cnVlO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICB0aGlzLmRpc3BhdGNoRXZlbnQoeyB0eXBlOiBcIm5leHRJblRyZWVcIiwgbm9kZUNvbnRleHQgfSBhcyBhbnkpO1xuICAgICAgICBmcmFtZS5maW5pc2gobm9kZUNvbnRleHQpO1xuICAgICAgfSxcbiAgICApO1xuICAgIHJldHVybiBmcmFtZS5yZXN1bHQoKTtcbiAgfVxuXG4gIGFkZEltYWdlRmV0Y2hlcnMoYmc6IENzcy5WYWwpIHtcbiAgICBpZiAoYmcgaW5zdGFuY2VvZiBDc3MuQ29tbWFMaXN0KSB7XG4gICAgICBjb25zdCB2YWx1ZXMgPSAoYmcgYXMgQ3NzLkNvbW1hTGlzdCkudmFsdWVzO1xuICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCB2YWx1ZXMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgdGhpcy5hZGRJbWFnZUZldGNoZXJzKHZhbHVlc1tpXSk7XG4gICAgICB9XG4gICAgfSBlbHNlIGlmIChiZyBpbnN0YW5jZW9mIENzcy5VUkwpIHtcbiAgICAgIGNvbnN0IHVybCA9IChiZyBhcyBDc3MuVVJMKS51cmw7XG4gICAgICB0aGlzLnBhZ2UuZmV0Y2hlcnMucHVzaChUYXNrVXRpbC5sb2FkRWxlbWVudChuZXcgSW1hZ2UoKSwgdXJsKSk7XG4gICAgfVxuICB9XG5cbiAgYXBwbHlDb21wdXRlZFN0eWxlcyhcbiAgICB0YXJnZXQ6IEVsZW1lbnQsXG4gICAgY29tcHV0ZWRTdHlsZTogeyBba2V5OiBzdHJpbmddOiBDc3MuVmFsIH0sXG4gICkge1xuICAgIGNvbnN0IGJnID0gY29tcHV0ZWRTdHlsZVtcImJhY2tncm91bmQtaW1hZ2VcIl07XG4gICAgaWYgKGJnKSB7XG4gICAgICB0aGlzLmFkZEltYWdlRmV0Y2hlcnMoYmcpO1xuICAgIH1cbiAgICBjb25zdCBpc1JlbGF0aXZlUG9zaXRpb25lZCA9XG4gICAgICBjb21wdXRlZFN0eWxlW1wicG9zaXRpb25cIl0gPT09IENzcy5pZGVudC5yZWxhdGl2ZTtcbiAgICBmb3IgKGNvbnN0IHByb3BOYW1lIGluIGNvbXB1dGVkU3R5bGUpIHtcbiAgICAgIGlmIChwcm9wZXJ0aWVzTm90UGFzc2VkVG9ET01bcHJvcE5hbWVdKSB7XG4gICAgICAgIGNvbnRpbnVlO1xuICAgICAgfVxuICAgICAgbGV0IHZhbHVlID0gY29tcHV0ZWRTdHlsZVtwcm9wTmFtZV07XG4gICAgICB2YWx1ZSA9IHZhbHVlLnZpc2l0KFxuICAgICAgICBuZXcgQ3NzUHJvcC5VcmxUcmFuc2Zvcm1WaXNpdG9yKFxuICAgICAgICAgIHRoaXMueG1sZG9jLnVybCxcbiAgICAgICAgICB0aGlzLmRvY3VtZW50VVJMVHJhbnNmb3JtZXIsXG4gICAgICAgICksXG4gICAgICApO1xuICAgICAgaWYgKFxuICAgICAgICB2YWx1ZS5pc051bWVyaWMoKSAmJlxuICAgICAgICBFeHBycy5uZWVkVW5pdENvbnZlcnNpb24oKHZhbHVlIGFzIENzcy5OdW1lcmljKS51bml0KVxuICAgICAgKSB7XG4gICAgICAgIC8vIGZvbnQtc2l6ZSBmb3IgdGhlIHJvb3QgZWxlbWVudCBpcyBhbHJlYWR5IGNvbnZlcnRlZCB0byBweFxuICAgICAgICB2YWx1ZSA9IENzcy5jb252ZXJ0TnVtZXJpY1RvUHgodmFsdWUsIHRoaXMuY29udGV4dCk7XG4gICAgICB9XG4gICAgICBpZiAoXG4gICAgICAgIFZ0cmVlLmRlbGF5ZWRQcm9wc1twcm9wTmFtZV0gfHxcbiAgICAgICAgKGlzUmVsYXRpdmVQb3NpdGlvbmVkICYmXG4gICAgICAgICAgVnRyZWUuZGVsYXllZFByb3BzSWZSZWxhdGl2ZVBvc2l0aW9uZWRbcHJvcE5hbWVdKVxuICAgICAgKSB7XG4gICAgICAgIC8vIFNldCBpdCBhZnRlciBwYWdlIGxheW91dCBpcyBkb25lLlxuICAgICAgICB0aGlzLnBhZ2UuZGVsYXllZEl0ZW1zLnB1c2goXG4gICAgICAgICAgbmV3IFZ0cmVlLkRlbGF5ZWRJdGVtKHRhcmdldCwgcHJvcE5hbWUsIHZhbHVlKSxcbiAgICAgICAgKTtcbiAgICAgICAgY29udGludWU7XG4gICAgICB9XG4gICAgICBCYXNlLnNldENTU1Byb3BlcnR5KHRhcmdldCwgcHJvcE5hbWUsIHZhbHVlLnRvU3RyaW5nKCkpO1xuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAgKiBAb3ZlcnJpZGVcbiAgICovXG4gIGFwcGx5UHNldWRvZWxlbWVudFN0eWxlKFxuICAgIG5vZGVDb250ZXh0OiBWdHJlZS5Ob2RlQ29udGV4dCxcbiAgICBwc2V1ZG9OYW1lOiBzdHJpbmcsXG4gICAgdGFyZ2V0OiBFbGVtZW50LFxuICApOiB2b2lkIHtcbiAgICBpZiAobm9kZUNvbnRleHQuYWZ0ZXIpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgY29uc3QgZWxlbWVudCA9IHRoaXMuc291cmNlTm9kZSBhcyBFbGVtZW50O1xuICAgIGNvbnN0IHN0eWxlciA9IG5vZGVDb250ZXh0LnNoYWRvd0NvbnRleHRcbiAgICAgID8gKG5vZGVDb250ZXh0LnNoYWRvd0NvbnRleHQuc3R5bGVyIGFzIENzc1N0eWxlci5BYnN0cmFjdFN0eWxlcilcbiAgICAgIDogdGhpcy5zdHlsZXI7XG4gICAgbGV0IGVsZW1lbnRTdHlsZSA9IHN0eWxlci5nZXRTdHlsZShlbGVtZW50LCBmYWxzZSk7XG4gICAgY29uc3QgcHNldWRvTWFwID0gQ3NzQ2FzY2FkZS5nZXRTdHlsZU1hcChlbGVtZW50U3R5bGUsIFwiX3BzZXVkb3NcIik7XG4gICAgaWYgKCFwc2V1ZG9NYXApIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgZWxlbWVudFN0eWxlID0gcHNldWRvTWFwW3BzZXVkb05hbWVdO1xuICAgIGlmICghZWxlbWVudFN0eWxlKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIGNvbnN0IGNvbXB1dGVkU3R5bGUgPSB7fTtcbiAgICBub2RlQ29udGV4dC52ZXJ0aWNhbCA9IHRoaXMuY29tcHV0ZVN0eWxlKFxuICAgICAgbm9kZUNvbnRleHQudmVydGljYWwsXG4gICAgICBub2RlQ29udGV4dC5kaXJlY3Rpb24gPT09IFwicnRsXCIsXG4gICAgICBlbGVtZW50U3R5bGUsXG4gICAgICBjb21wdXRlZFN0eWxlLFxuICAgICk7XG4gICAgY29uc3QgY29udGVudCA9IGNvbXB1dGVkU3R5bGVbXCJjb250ZW50XCJdO1xuICAgIGlmIChWdHJlZS5ub25Ucml2aWFsQ29udGVudChjb250ZW50KSkge1xuICAgICAgY29udGVudC52aXNpdChcbiAgICAgICAgbmV3IFZ0cmVlLkNvbnRlbnRQcm9wZXJ0eUhhbmRsZXIoXG4gICAgICAgICAgdGFyZ2V0LFxuICAgICAgICAgIHRoaXMuY29udGV4dCxcbiAgICAgICAgICBjb250ZW50LFxuICAgICAgICAgIHRoaXMuZXhwckNvbnRlbnRMaXN0ZW5lcixcbiAgICAgICAgKSxcbiAgICAgICk7XG4gICAgICBkZWxldGUgY29tcHV0ZWRTdHlsZVtcImNvbnRlbnRcIl07XG4gICAgfVxuICAgIHRoaXMuYXBwbHlDb21wdXRlZFN0eWxlcyh0YXJnZXQsIGNvbXB1dGVkU3R5bGUpO1xuICB9XG5cbiAgLyoqXG4gICAqIEBvdmVycmlkZVxuICAgKi9cbiAgcGVlbE9mZihcbiAgICBub2RlQ29udGV4dDogVnRyZWUuTm9kZUNvbnRleHQsXG4gICAgbm9kZU9mZnNldDogbnVtYmVyLFxuICApOiBUYXNrLlJlc3VsdDxWdHJlZS5Ob2RlQ29udGV4dD4ge1xuICAgIGNvbnN0IGZyYW1lOiBUYXNrLkZyYW1lPFZ0cmVlLk5vZGVDb250ZXh0PiA9IFRhc2submV3RnJhbWUoXCJwZWVsT2ZmXCIpO1xuICAgIGNvbnN0IGZpcnN0UHNldWRvID0gbm9kZUNvbnRleHQuZmlyc3RQc2V1ZG87XG4gICAgbGV0IG9mZnNldEluTm9kZSA9IG5vZGVDb250ZXh0Lm9mZnNldEluTm9kZTtcbiAgICBjb25zdCBhZnRlciA9IG5vZGVDb250ZXh0LmFmdGVyO1xuICAgIGlmIChub2RlT2Zmc2V0ID4gMCkge1xuICAgICAgY29uc3QgdGV4dCA9IG5vZGVDb250ZXh0LnZpZXdOb2RlLnRleHRDb250ZW50O1xuICAgICAgbm9kZUNvbnRleHQudmlld05vZGUudGV4dENvbnRlbnQgPSB0ZXh0LnN1YnN0cigwLCBub2RlT2Zmc2V0KTtcbiAgICAgIG9mZnNldEluTm9kZSArPSBub2RlT2Zmc2V0O1xuICAgIH0gZWxzZSBpZiAoIWFmdGVyICYmIG5vZGVDb250ZXh0LnZpZXdOb2RlICYmIG9mZnNldEluTm9kZSA9PSAwKSB7XG4gICAgICBjb25zdCBwYXJlbnQgPSBub2RlQ29udGV4dC52aWV3Tm9kZS5wYXJlbnROb2RlO1xuICAgICAgaWYgKHBhcmVudCkge1xuICAgICAgICBwYXJlbnQucmVtb3ZlQ2hpbGQobm9kZUNvbnRleHQudmlld05vZGUpO1xuICAgICAgfVxuICAgIH1cbiAgICBjb25zdCBib3hPZmZzZXQgPSBub2RlQ29udGV4dC5ib3hPZmZzZXQgKyBub2RlT2Zmc2V0O1xuICAgIGNvbnN0IGFyciA9IFtdO1xuICAgIHdoaWxlIChub2RlQ29udGV4dC5maXJzdFBzZXVkbyA9PT0gZmlyc3RQc2V1ZG8pIHtcbiAgICAgIGFyci5wdXNoKG5vZGVDb250ZXh0KTtcbiAgICAgIG5vZGVDb250ZXh0ID0gbm9kZUNvbnRleHQucGFyZW50O1xuICAgIH1cbiAgICBsZXQgcG4gPSBhcnIucG9wKCk7IC8vIGNvbnRhaW5lciBmb3IgdGhhdCBwc2V1ZG9lbGVtZW50XG4gICAgbGV0IHNoYWRvd1NpYmxpbmcgPSBwbi5zaGFkb3dTaWJsaW5nO1xuICAgIGZyYW1lXG4gICAgICAubG9vcCgoKSA9PiB7XG4gICAgICAgIHdoaWxlIChhcnIubGVuZ3RoID4gMCkge1xuICAgICAgICAgIHBuID0gYXJyLnBvcCgpO1xuICAgICAgICAgIG5vZGVDb250ZXh0ID0gbmV3IFZ0cmVlLk5vZGVDb250ZXh0KFxuICAgICAgICAgICAgcG4uc291cmNlTm9kZSxcbiAgICAgICAgICAgIG5vZGVDb250ZXh0LFxuICAgICAgICAgICAgYm94T2Zmc2V0LFxuICAgICAgICAgICk7XG4gICAgICAgICAgaWYgKGFyci5sZW5ndGggPT0gMCkge1xuICAgICAgICAgICAgbm9kZUNvbnRleHQub2Zmc2V0SW5Ob2RlID0gb2Zmc2V0SW5Ob2RlO1xuICAgICAgICAgICAgbm9kZUNvbnRleHQuYWZ0ZXIgPSBhZnRlcjtcbiAgICAgICAgICB9XG4gICAgICAgICAgbm9kZUNvbnRleHQuc2hhZG93VHlwZSA9IHBuLnNoYWRvd1R5cGU7XG4gICAgICAgICAgKG5vZGVDb250ZXh0LnNoYWRvd0NvbnRleHQgPSBwbi5zaGFkb3dDb250ZXh0KSxcbiAgICAgICAgICAgIChub2RlQ29udGV4dC5ub2RlU2hhZG93ID0gcG4ubm9kZVNoYWRvdyk7XG4gICAgICAgICAgbm9kZUNvbnRleHQuc2hhZG93U2libGluZyA9IHBuLnNoYWRvd1NpYmxpbmdcbiAgICAgICAgICAgID8gcG4uc2hhZG93U2libGluZ1xuICAgICAgICAgICAgOiBzaGFkb3dTaWJsaW5nO1xuICAgICAgICAgIHNoYWRvd1NpYmxpbmcgPSBudWxsO1xuICAgICAgICAgIGNvbnN0IHJlc3VsdCA9IHRoaXMuc2V0Q3VycmVudChub2RlQ29udGV4dCwgZmFsc2UpO1xuICAgICAgICAgIGlmIChyZXN1bHQuaXNQZW5kaW5nKCkpIHtcbiAgICAgICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiBUYXNrLm5ld1Jlc3VsdChmYWxzZSk7XG4gICAgICB9KVxuICAgICAgLnRoZW4oKCkgPT4ge1xuICAgICAgICBmcmFtZS5maW5pc2gobm9kZUNvbnRleHQpO1xuICAgICAgfSk7XG4gICAgcmV0dXJuIGZyYW1lLnJlc3VsdCgpO1xuICB9XG5cbiAgY3JlYXRlRWxlbWVudChuczogc3RyaW5nLCB0YWc6IHN0cmluZyk6IEVsZW1lbnQge1xuICAgIGlmIChucyA9PSBCYXNlLk5TLlhIVE1MKSB7XG4gICAgICByZXR1cm4gdGhpcy5kb2N1bWVudC5jcmVhdGVFbGVtZW50KHRhZyk7XG4gICAgfVxuICAgIHJldHVybiB0aGlzLmRvY3VtZW50LmNyZWF0ZUVsZW1lbnROUyhucywgdGFnKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBAb3ZlcnJpZGVcbiAgICovXG4gIGFwcGx5Rm9vdG5vdGVTdHlsZShcbiAgICB2ZXJ0aWNhbDogYm9vbGVhbixcbiAgICBydGw6IGJvb2xlYW4sXG4gICAgdGFyZ2V0OiBFbGVtZW50LFxuICApOiBib29sZWFuIHtcbiAgICBjb25zdCBjb21wdXRlZFN0eWxlID0ge307XG4gICAgY29uc3QgcHNldWRvTWFwID0gQ3NzQ2FzY2FkZS5nZXRTdHlsZU1hcCh0aGlzLmZvb3Rub3RlU3R5bGUsIFwiX3BzZXVkb3NcIik7XG4gICAgdmVydGljYWwgPSB0aGlzLmNvbXB1dGVTdHlsZShcbiAgICAgIHZlcnRpY2FsLFxuICAgICAgcnRsLFxuICAgICAgdGhpcy5mb290bm90ZVN0eWxlLFxuICAgICAgY29tcHV0ZWRTdHlsZSxcbiAgICApO1xuICAgIGlmIChwc2V1ZG9NYXAgJiYgcHNldWRvTWFwW1wiYmVmb3JlXCJdKSB7XG4gICAgICBjb25zdCBjaGlsZENvbXB1dGVkU3R5bGUgPSB7fTtcbiAgICAgIGNvbnN0IHNwYW4gPSB0aGlzLmNyZWF0ZUVsZW1lbnQoQmFzZS5OUy5YSFRNTCwgXCJzcGFuXCIpO1xuICAgICAgUHNldWRvRWxlbWVudC5zZXRQc2V1ZG9OYW1lKHNwYW4sIFwiYmVmb3JlXCIpO1xuICAgICAgdGFyZ2V0LmFwcGVuZENoaWxkKHNwYW4pO1xuICAgICAgdGhpcy5jb21wdXRlU3R5bGUodmVydGljYWwsIHJ0bCwgcHNldWRvTWFwW1wiYmVmb3JlXCJdLCBjaGlsZENvbXB1dGVkU3R5bGUpO1xuICAgICAgZGVsZXRlIGNoaWxkQ29tcHV0ZWRTdHlsZVtcImNvbnRlbnRcIl07XG4gICAgICB0aGlzLmFwcGx5Q29tcHV0ZWRTdHlsZXMoc3BhbiwgY2hpbGRDb21wdXRlZFN0eWxlKTtcbiAgICB9XG4gICAgZGVsZXRlIGNvbXB1dGVkU3R5bGVbXCJjb250ZW50XCJdO1xuICAgIHRoaXMuYXBwbHlDb21wdXRlZFN0eWxlcyh0YXJnZXQsIGNvbXB1dGVkU3R5bGUpO1xuICAgIHJldHVybiB2ZXJ0aWNhbDtcbiAgfVxuXG4gIC8qKlxuICAgKiBAb3ZlcnJpZGVcbiAgICovXG4gIHByb2Nlc3NGcmFnbWVudGVkQmxvY2tFZGdlKG5vZGVDb250ZXh0OiBWdHJlZS5Ob2RlQ29udGV4dCkge1xuICAgIGlmIChub2RlQ29udGV4dCkge1xuICAgICAgbm9kZUNvbnRleHQud2Fsa1VwQmxvY2tzKChibG9jaykgPT4ge1xuICAgICAgICBjb25zdCBib3hEZWNvcmF0aW9uQnJlYWsgPSBibG9jay5pbmhlcml0ZWRQcm9wc1tcImJveC1kZWNvcmF0aW9uLWJyZWFrXCJdO1xuICAgICAgICBpZiAoIWJveERlY29yYXRpb25CcmVhayB8fCBib3hEZWNvcmF0aW9uQnJlYWsgPT09IFwic2xpY2VcIikge1xuICAgICAgICAgIGNvbnN0IGVsZW0gPSBibG9jay52aWV3Tm9kZSBhcyBFbGVtZW50O1xuICAgICAgICAgIEFzc2VydHMuYXNzZXJ0KGVsZW0gaW5zdGFuY2VvZiBFbGVtZW50KTtcbiAgICAgICAgICBpZiAoYmxvY2sudmVydGljYWwpIHtcbiAgICAgICAgICAgIEJhc2Uuc2V0Q1NTUHJvcGVydHkoZWxlbSwgXCJwYWRkaW5nLWxlZnRcIiwgXCIwXCIpO1xuICAgICAgICAgICAgQmFzZS5zZXRDU1NQcm9wZXJ0eShlbGVtLCBcImJvcmRlci1sZWZ0XCIsIFwibm9uZVwiKTtcbiAgICAgICAgICAgIEJhc2Uuc2V0Q1NTUHJvcGVydHkoZWxlbSwgXCJib3JkZXItdG9wLWxlZnQtcmFkaXVzXCIsIFwiMFwiKTtcbiAgICAgICAgICAgIEJhc2Uuc2V0Q1NTUHJvcGVydHkoZWxlbSwgXCJib3JkZXItYm90dG9tLWxlZnQtcmFkaXVzXCIsIFwiMFwiKTtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgQmFzZS5zZXRDU1NQcm9wZXJ0eShlbGVtLCBcInBhZGRpbmctYm90dG9tXCIsIFwiMFwiKTtcbiAgICAgICAgICAgIEJhc2Uuc2V0Q1NTUHJvcGVydHkoZWxlbSwgXCJib3JkZXItYm90dG9tXCIsIFwibm9uZVwiKTtcbiAgICAgICAgICAgIEJhc2Uuc2V0Q1NTUHJvcGVydHkoZWxlbSwgXCJib3JkZXItYm90dG9tLWxlZnQtcmFkaXVzXCIsIFwiMFwiKTtcbiAgICAgICAgICAgIEJhc2Uuc2V0Q1NTUHJvcGVydHkoZWxlbSwgXCJib3JkZXItYm90dG9tLXJpZ2h0LXJhZGl1c1wiLCBcIjBcIik7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9KTtcbiAgICB9XG4gIH1cblxuICAvKipcbiAgICogQG92ZXJyaWRlXG4gICAqL1xuICBjb252ZXJ0TGVuZ3RoVG9QeChcbiAgICBudW1lcmljOiBDc3MuTnVtZXJpYyxcbiAgICB2aWV3Tm9kZTogTm9kZSxcbiAgICBjbGllbnRMYXlvdXQ6IFZ0cmVlLkNsaWVudExheW91dCxcbiAgKTogbnVtYmVyIHwgQ3NzLk51bWVyaWMge1xuICAgIGNvbnN0IG51bSA9IG51bWVyaWMubnVtO1xuICAgIGNvbnN0IHVuaXQgPSBudW1lcmljLnVuaXQ7XG4gICAgaWYgKEV4cHJzLmlzRm9udFJlbGF0aXZlTGVuZ3RoVW5pdCh1bml0KSkge1xuICAgICAgbGV0IGVsZW0gPSB2aWV3Tm9kZTtcbiAgICAgIHdoaWxlIChlbGVtICYmIGVsZW0ubm9kZVR5cGUgIT09IDEpIHtcbiAgICAgICAgZWxlbSA9IGVsZW0ucGFyZW50Tm9kZTtcbiAgICAgIH1cbiAgICAgIEFzc2VydHMuYXNzZXJ0KGVsZW0pO1xuICAgICAgY29uc3QgZm9udFNpemUgPSBwYXJzZUZsb2F0KFxuICAgICAgICBjbGllbnRMYXlvdXQuZ2V0RWxlbWVudENvbXB1dGVkU3R5bGUoZWxlbSBhcyBFbGVtZW50KVtcImZvbnQtc2l6ZVwiXSxcbiAgICAgICk7XG4gICAgICBBc3NlcnRzLmFzc2VydCh0aGlzLmNvbnRleHQpO1xuICAgICAgcmV0dXJuIENzc0Nhc2NhZGUuY29udmVydEZvbnRSZWxhdGl2ZUxlbmd0aFRvUHgoXG4gICAgICAgIG51bWVyaWMsXG4gICAgICAgIGZvbnRTaXplLFxuICAgICAgICB0aGlzLmNvbnRleHQsXG4gICAgICApLm51bTtcbiAgICB9IGVsc2Uge1xuICAgICAgY29uc3QgdW5pdFNpemUgPSB0aGlzLmNvbnRleHQucXVlcnlVbml0U2l6ZSh1bml0LCBmYWxzZSk7XG4gICAgICBpZiAodW5pdFNpemUpIHtcbiAgICAgICAgcmV0dXJuIG51bSAqIHVuaXRTaXplO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcmV0dXJuIG51bWVyaWM7XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgLyoqXG4gICAqIFJldHVybnMgaWYgdHdvIE5vZGVQb3NpdGlvblN0ZXAgYXJlIGVxdWl2YWxlbnQuXG4gICAqL1xuICBpc1NhbWVOb2RlUG9zaXRpb25TdGVwKFxuICAgIHN0ZXAxOiBWdHJlZS5Ob2RlUG9zaXRpb25TdGVwLFxuICAgIHN0ZXAyOiBWdHJlZS5Ob2RlUG9zaXRpb25TdGVwLFxuICApOiBib29sZWFuIHtcbiAgICBpZiAoc3RlcDEuc2hhZG93Q29udGV4dCkge1xuICAgICAgaWYgKCFzdGVwMi5zaGFkb3dDb250ZXh0KSB7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgIH1cbiAgICAgIGNvbnN0IGVsZW0xID1cbiAgICAgICAgc3RlcDEubm9kZS5ub2RlVHlwZSA9PT0gMVxuICAgICAgICAgID8gKHN0ZXAxLm5vZGUgYXMgRWxlbWVudClcbiAgICAgICAgICA6IChzdGVwMS5ub2RlLnBhcmVudEVsZW1lbnQgYXMgRWxlbWVudCk7XG4gICAgICBjb25zdCBlbGVtMiA9XG4gICAgICAgIHN0ZXAyLm5vZGUubm9kZVR5cGUgPT09IDFcbiAgICAgICAgICA/IChzdGVwMi5ub2RlIGFzIEVsZW1lbnQpXG4gICAgICAgICAgOiAoc3RlcDIubm9kZS5wYXJlbnRFbGVtZW50IGFzIEVsZW1lbnQpO1xuICAgICAgcmV0dXJuIChcbiAgICAgICAgc3RlcDEuc2hhZG93Q29udGV4dC5vd25lciA9PT0gc3RlcDIuc2hhZG93Q29udGV4dC5vd25lciAmJlxuICAgICAgICBQc2V1ZG9FbGVtZW50LmdldFBzZXVkb05hbWUoZWxlbTEpID09PVxuICAgICAgICAgIFBzZXVkb0VsZW1lbnQuZ2V0UHNldWRvTmFtZShlbGVtMilcbiAgICAgICk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiBzdGVwMS5ub2RlID09PSBzdGVwMi5ub2RlO1xuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAgKiBAb3ZlcnJpZGVcbiAgICovXG4gIGlzU2FtZU5vZGVQb3NpdGlvbihcbiAgICBub2RlUG9zaXRpb24xOiBWdHJlZS5Ob2RlUG9zaXRpb24sXG4gICAgbm9kZVBvc2l0aW9uMjogVnRyZWUuTm9kZVBvc2l0aW9uLFxuICApOiBib29sZWFuIHtcbiAgICByZXR1cm4gKFxuICAgICAgbm9kZVBvc2l0aW9uMS5vZmZzZXRJbk5vZGUgPT09IG5vZGVQb3NpdGlvbjIub2Zmc2V0SW5Ob2RlICYmXG4gICAgICBub2RlUG9zaXRpb24xLmFmdGVyID09IG5vZGVQb3NpdGlvbjIuYWZ0ZXIgJiZcbiAgICAgIG5vZGVQb3NpdGlvbjEuc3RlcHMubGVuZ3RoID09PSBub2RlUG9zaXRpb24yLnN0ZXBzLmxlbmd0aCAmJlxuICAgICAgbm9kZVBvc2l0aW9uMS5zdGVwcy5ldmVyeSgoc3RlcDEsIGkpID0+IHtcbiAgICAgICAgY29uc3Qgc3RlcDIgPSBub2RlUG9zaXRpb24yLnN0ZXBzW2ldO1xuICAgICAgICByZXR1cm4gdGhpcy5pc1NhbWVOb2RlUG9zaXRpb25TdGVwKHN0ZXAxLCBzdGVwMik7XG4gICAgICB9KVxuICAgICk7XG4gIH1cblxuICBpc1BzZXVkb2VsZW1lbnQoZWxlbSkge1xuICAgIHJldHVybiAhIVBzZXVkb0VsZW1lbnQuZ2V0UHNldWRvTmFtZShlbGVtKTtcbiAgfVxufVxuXG5leHBvcnQgY29uc3QgcHJvcGVydGllc05vdFBhc3NlZFRvRE9NID0ge1xuICBcImJveC1kZWNvcmF0aW9uLWJyZWFrXCI6IHRydWUsXG4gIFwiZmxvYXQtbWluLXdyYXAtYmxvY2tcIjogdHJ1ZSxcbiAgXCJmbG9hdC1yZWZlcmVuY2VcIjogdHJ1ZSxcbiAgXCJmbG93LWludG9cIjogdHJ1ZSxcbiAgXCJmbG93LWxpbmdlclwiOiB0cnVlLFxuICBcImZsb3ctb3B0aW9uc1wiOiB0cnVlLFxuICBcImZsb3ctcHJpb3JpdHlcIjogdHJ1ZSxcbiAgXCJmb290bm90ZS1wb2xpY3lcIjogdHJ1ZSxcbiAgcGFnZTogdHJ1ZSxcbn07XG5cbmV4cG9ydCBjbGFzcyBEZWZhdWx0Q2xpZW50TGF5b3V0IGltcGxlbWVudHMgVnRyZWUuQ2xpZW50TGF5b3V0IHtcbiAgbGF5b3V0Qm94OiBFbGVtZW50O1xuICB3aW5kb3c6IFdpbmRvdztcblxuICBjb25zdHJ1Y3Rvcih2aWV3cG9ydDogVmlld3BvcnQpIHtcbiAgICB0aGlzLmxheW91dEJveCA9IHZpZXdwb3J0LmxheW91dEJveDtcbiAgICB0aGlzLndpbmRvdyA9IHZpZXdwb3J0LndpbmRvdztcbiAgfVxuXG4gIHByaXZhdGUgc3VidHJhY3RPZmZzZXRzKFxuICAgIHJlY3Q6IFZ0cmVlLkNsaWVudFJlY3QsXG4gICAgb3JpZ2luUmVjdDogVnRyZWUuQ2xpZW50UmVjdCxcbiAgKTogVnRyZWUuQ2xpZW50UmVjdCB7XG4gICAgY29uc3Qgdmlld3BvcnRMZWZ0ID0gb3JpZ2luUmVjdC5sZWZ0O1xuICAgIGNvbnN0IHZpZXdwb3J0VG9wID0gb3JpZ2luUmVjdC50b3A7XG4gICAgcmV0dXJuIHtcbiAgICAgIGxlZnQ6IHJlY3QubGVmdCAtIHZpZXdwb3J0TGVmdCxcbiAgICAgIHRvcDogcmVjdC50b3AgLSB2aWV3cG9ydFRvcCxcbiAgICAgIHJpZ2h0OiByZWN0LnJpZ2h0IC0gdmlld3BvcnRMZWZ0LFxuICAgICAgYm90dG9tOiByZWN0LmJvdHRvbSAtIHZpZXdwb3J0VG9wLFxuICAgICAgd2lkdGg6IHJlY3Qud2lkdGgsXG4gICAgICBoZWlnaHQ6IHJlY3QuaGVpZ2h0LFxuICAgIH0gYXMgVnRyZWUuQ2xpZW50UmVjdDtcbiAgfVxuXG4gIC8qKlxuICAgKiBAb3ZlcnJpZGVcbiAgICovXG4gIGdldFJhbmdlQ2xpZW50UmVjdHMocmFuZ2U6IFJhbmdlKTogQ2xpZW50UmVjdFtdIHtcbiAgICBjb25zdCByZWN0cyA9IHJhbmdlW1wiZ2V0Q2xpZW50UmVjdHNcIl0oKTtcbiAgICBjb25zdCBsYXlvdXRCb3hSZWN0ID0gdGhpcy5sYXlvdXRCb3guZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCk7XG4gICAgcmV0dXJuIEFycmF5LmZyb20ocmVjdHMpLm1hcCgocmVjdCkgPT5cbiAgICAgIHRoaXMuc3VidHJhY3RPZmZzZXRzKHJlY3QsIGxheW91dEJveFJlY3QpLFxuICAgICk7XG4gIH1cblxuICAvKipcbiAgICogQG92ZXJyaWRlXG4gICAqL1xuICBnZXRFbGVtZW50Q2xpZW50UmVjdChlbGVtZW50OiBFbGVtZW50KTogQ2xpZW50UmVjdCB7XG4gICAgY29uc3QgaHRtbEVsZW1lbnQgPSBlbGVtZW50IGFzIEhUTUxFbGVtZW50O1xuICAgIGNvbnN0IHJlY3QgPSBodG1sRWxlbWVudC5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKSBhcyBWdHJlZS5DbGllbnRSZWN0O1xuICAgIGNvbnN0IGxheW91dEJveFJlY3QgPSB0aGlzLmxheW91dEJveC5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKTtcbiAgICByZXR1cm4gdGhpcy5zdWJ0cmFjdE9mZnNldHMocmVjdCwgbGF5b3V0Qm94UmVjdCk7XG4gIH1cblxuICAvKipcbiAgICogQG92ZXJyaWRlXG4gICAqL1xuICBnZXRFbGVtZW50Q29tcHV0ZWRTdHlsZShlbGVtZW50OiBFbGVtZW50KTogQ1NTU3R5bGVEZWNsYXJhdGlvbiB7XG4gICAgcmV0dXJuIHRoaXMud2luZG93LmdldENvbXB1dGVkU3R5bGUoZWxlbWVudCwgbnVsbCk7XG4gIH1cbn1cblxuZXhwb3J0IGNsYXNzIFZpZXdwb3J0IHtcbiAgZG9jdW1lbnQ6IERvY3VtZW50O1xuICByb290OiBIVE1MRWxlbWVudDtcbiAgcHJpdmF0ZSBvdXRlclpvb21Cb3g6IEhUTUxFbGVtZW50O1xuICBjb250ZW50Q29udGFpbmVyOiBIVE1MRWxlbWVudDtcbiAgbGF5b3V0Qm94OiBFbGVtZW50O1xuICB3aWR0aDogbnVtYmVyO1xuICBoZWlnaHQ6IG51bWJlcjtcblxuICBjb25zdHJ1Y3RvcihcbiAgICBwdWJsaWMgcmVhZG9ubHkgd2luZG93OiBXaW5kb3csXG4gICAgcHVibGljIHJlYWRvbmx5IGZvbnRTaXplOiBudW1iZXIsXG4gICAgb3B0X3Jvb3Q/OiBIVE1MRWxlbWVudCxcbiAgICBvcHRfd2lkdGg/OiBudW1iZXIsXG4gICAgb3B0X2hlaWdodD86IG51bWJlcixcbiAgKSB7XG4gICAgdGhpcy5kb2N1bWVudCA9IHdpbmRvdy5kb2N1bWVudDtcbiAgICB0aGlzLnJvb3QgPSBvcHRfcm9vdCB8fCB0aGlzLmRvY3VtZW50LmJvZHk7XG4gICAgbGV0IG91dGVyWm9vbUJveCA9IHRoaXMucm9vdC5maXJzdEVsZW1lbnRDaGlsZDtcbiAgICBpZiAoIW91dGVyWm9vbUJveCkge1xuICAgICAgb3V0ZXJab29tQm94ID0gdGhpcy5kb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiZGl2XCIpO1xuICAgICAgb3V0ZXJab29tQm94LnNldEF0dHJpYnV0ZShcImRhdGEtdml2bGlvc3R5bGUtb3V0ZXItem9vbS1ib3hcIiwgXCJ0cnVlXCIpO1xuICAgICAgdGhpcy5yb290LmFwcGVuZENoaWxkKG91dGVyWm9vbUJveCk7XG4gICAgfVxuICAgIGxldCBjb250ZW50Q29udGFpbmVyID0gb3V0ZXJab29tQm94LmZpcnN0RWxlbWVudENoaWxkO1xuICAgIGlmICghY29udGVudENvbnRhaW5lcikge1xuICAgICAgY29udGVudENvbnRhaW5lciA9IHRoaXMuZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImRpdlwiKTtcbiAgICAgIGNvbnRlbnRDb250YWluZXIuc2V0QXR0cmlidXRlKFxuICAgICAgICBcImRhdGEtdml2bGlvc3R5bGUtc3ByZWFkLWNvbnRhaW5lclwiLFxuICAgICAgICBcInRydWVcIixcbiAgICAgICk7XG4gICAgICBvdXRlclpvb21Cb3guYXBwZW5kQ2hpbGQoY29udGVudENvbnRhaW5lcik7XG4gICAgfVxuICAgIGxldCBsYXlvdXRCb3ggPSBvdXRlclpvb21Cb3gubmV4dEVsZW1lbnRTaWJsaW5nO1xuICAgIGlmICghbGF5b3V0Qm94KSB7XG4gICAgICBsYXlvdXRCb3ggPSB0aGlzLmRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIik7XG4gICAgICBsYXlvdXRCb3guc2V0QXR0cmlidXRlKFwiZGF0YS12aXZsaW9zdHlsZS1sYXlvdXQtYm94XCIsIFwidHJ1ZVwiKTtcbiAgICAgIHRoaXMucm9vdC5hcHBlbmRDaGlsZChsYXlvdXRCb3gpO1xuICAgIH1cbiAgICB0aGlzLm91dGVyWm9vbUJveCA9IG91dGVyWm9vbUJveCBhcyBIVE1MRWxlbWVudDtcbiAgICB0aGlzLmNvbnRlbnRDb250YWluZXIgPSBjb250ZW50Q29udGFpbmVyIGFzIEhUTUxFbGVtZW50O1xuICAgIHRoaXMubGF5b3V0Qm94ID0gbGF5b3V0Qm94IGFzIEhUTUxFbGVtZW50O1xuICAgIGNvbnN0IGNsaWVudExheW91dCA9IG5ldyBEZWZhdWx0Q2xpZW50TGF5b3V0KHRoaXMpO1xuICAgIGNvbnN0IGNvbXB1dGVkU3R5bGUgPSBjbGllbnRMYXlvdXQuZ2V0RWxlbWVudENvbXB1dGVkU3R5bGUodGhpcy5yb290KTtcbiAgICB0aGlzLndpZHRoID1cbiAgICAgIG9wdF93aWR0aCB8fCBwYXJzZUZsb2F0KGNvbXB1dGVkU3R5bGVbXCJ3aWR0aFwiXSkgfHwgd2luZG93LmlubmVyV2lkdGg7XG4gICAgdGhpcy5oZWlnaHQgPVxuICAgICAgb3B0X2hlaWdodCB8fCBwYXJzZUZsb2F0KGNvbXB1dGVkU3R5bGVbXCJoZWlnaHRcIl0pIHx8IHdpbmRvdy5pbm5lckhlaWdodDtcbiAgfVxuXG4gIC8qKlxuICAgKiBSZXNldCB6b29tLlxuICAgKi9cbiAgcmVzZXRab29tKCkge1xuICAgIEJhc2Uuc2V0Q1NTUHJvcGVydHkodGhpcy5vdXRlclpvb21Cb3gsIFwid2lkdGhcIiwgXCJcIik7XG4gICAgQmFzZS5zZXRDU1NQcm9wZXJ0eSh0aGlzLm91dGVyWm9vbUJveCwgXCJoZWlnaHRcIiwgXCJcIik7XG4gICAgQmFzZS5zZXRDU1NQcm9wZXJ0eSh0aGlzLmNvbnRlbnRDb250YWluZXIsIFwid2lkdGhcIiwgXCJcIik7XG4gICAgQmFzZS5zZXRDU1NQcm9wZXJ0eSh0aGlzLmNvbnRlbnRDb250YWluZXIsIFwiaGVpZ2h0XCIsIFwiXCIpO1xuICAgIEJhc2Uuc2V0Q1NTUHJvcGVydHkodGhpcy5jb250ZW50Q29udGFpbmVyLCBcInRyYW5zZm9ybVwiLCBcIlwiKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBab29tIHZpZXdwb3J0LlxuICAgKiBAcGFyYW0gd2lkdGggT3ZlcmFsbCB3aWR0aCBvZiBjb250ZW50cyBiZWZvcmUgc2NhbGluZyAocHgpXG4gICAqIEBwYXJhbSBoZWlnaHQgT3ZlcmFsbCBoZWlnaHQgb2YgY29udGVudHMgYmVmb3JlIHNjYWxpbmcgKHB4KVxuICAgKiBAcGFyYW0gc2NhbGUgRmFjdG9yIHRvIHdoaWNoIHRoZSB2aWV3cG9ydCB3aWxsIGJlIHNjYWxlZC5cbiAgICovXG4gIHpvb20od2lkdGg6IG51bWJlciwgaGVpZ2h0OiBudW1iZXIsIHNjYWxlOiBudW1iZXIpIHtcbiAgICBCYXNlLnNldENTU1Byb3BlcnR5KHRoaXMub3V0ZXJab29tQm94LCBcIndpZHRoXCIsIGAke3dpZHRoICogc2NhbGV9cHhgKTtcbiAgICBCYXNlLnNldENTU1Byb3BlcnR5KHRoaXMub3V0ZXJab29tQm94LCBcImhlaWdodFwiLCBgJHtoZWlnaHQgKiBzY2FsZX1weGApO1xuICAgIEJhc2Uuc2V0Q1NTUHJvcGVydHkodGhpcy5jb250ZW50Q29udGFpbmVyLCBcIndpZHRoXCIsIGAke3dpZHRofXB4YCk7XG4gICAgQmFzZS5zZXRDU1NQcm9wZXJ0eSh0aGlzLmNvbnRlbnRDb250YWluZXIsIFwiaGVpZ2h0XCIsIGAke2hlaWdodH1weGApO1xuICAgIEJhc2Uuc2V0Q1NTUHJvcGVydHkodGhpcy5jb250ZW50Q29udGFpbmVyLCBcInRyYW5zZm9ybVwiLCBgc2NhbGUoJHtzY2FsZX0pYCk7XG4gIH1cblxuICAvKipcbiAgICogUmVtb3ZlIGFsbCBwYWdlcyBpbnNpZGUgdGhlIHZpZXdwb3J0LlxuICAgKi9cbiAgY2xlYXIoKSB7XG4gICAgY29uc3Qgcm9vdCA9IHRoaXMucm9vdDtcbiAgICB3aGlsZSAocm9vdC5sYXN0Q2hpbGQpIHtcbiAgICAgIHJvb3QucmVtb3ZlQ2hpbGQocm9vdC5sYXN0Q2hpbGQpO1xuICAgIH1cbiAgfVxufVxuIiwiLyoqXG4gKiBDb3B5cmlnaHQgMjAxMyBHb29nbGUsIEluYy5cbiAqIENvcHlyaWdodCAyMDE1IFRyaW0tbWFya3MgSW5jLlxuICogQ29weXJpZ2h0IDIwMTkgVml2bGlvc3R5bGUgRm91bmRhdGlvblxuICpcbiAqIFZpdmxpb3N0eWxlLmpzIGlzIGZyZWUgc29mdHdhcmU6IHlvdSBjYW4gcmVkaXN0cmlidXRlIGl0IGFuZC9vciBtb2RpZnlcbiAqIGl0IHVuZGVyIHRoZSB0ZXJtcyBvZiB0aGUgR05VIEFmZmVybyBHZW5lcmFsIFB1YmxpYyBMaWNlbnNlIGFzIHB1Ymxpc2hlZCBieVxuICogdGhlIEZyZWUgU29mdHdhcmUgRm91bmRhdGlvbiwgZWl0aGVyIHZlcnNpb24gMyBvZiB0aGUgTGljZW5zZSwgb3JcbiAqIChhdCB5b3VyIG9wdGlvbikgYW55IGxhdGVyIHZlcnNpb24uXG4gKlxuICogVml2bGlvc3R5bGUuanMgaXMgZGlzdHJpYnV0ZWQgaW4gdGhlIGhvcGUgdGhhdCBpdCB3aWxsIGJlIHVzZWZ1bCxcbiAqIGJ1dCBXSVRIT1VUIEFOWSBXQVJSQU5UWTsgd2l0aG91dCBldmVuIHRoZSBpbXBsaWVkIHdhcnJhbnR5IG9mXG4gKiBNRVJDSEFOVEFCSUxJVFkgb3IgRklUTkVTUyBGT1IgQSBQQVJUSUNVTEFSIFBVUlBPU0UuICBTZWUgdGhlXG4gKiBHTlUgQWZmZXJvIEdlbmVyYWwgUHVibGljIExpY2Vuc2UgZm9yIG1vcmUgZGV0YWlscy5cbiAqXG4gKiBZb3Ugc2hvdWxkIGhhdmUgcmVjZWl2ZWQgYSBjb3B5IG9mIHRoZSBHTlUgQWZmZXJvIEdlbmVyYWwgUHVibGljIExpY2Vuc2VcbiAqIGFsb25nIHdpdGggVml2bGlvc3R5bGUuanMuICBJZiBub3QsIHNlZSA8aHR0cDovL3d3dy5nbnUub3JnL2xpY2Vuc2VzLz4uXG4gKlxuICogQGZpbGVvdmVydmlldyBYbWxEb2MgLSBVdGlsaXR5IGZ1bmN0aW9ucyB0byB3b3JrIHdpdGggWE1MIChtb3N0bHkgWEhUTUwpXG4gKiBkb2N1bWVudHMuXG4gKi9cbmltcG9ydCAqIGFzIEJhc2UgZnJvbSBcIi4vYmFzZVwiO1xuaW1wb3J0ICogYXMgTmV0IGZyb20gXCIuL25ldFwiO1xuaW1wb3J0ICogYXMgVGFzayBmcm9tIFwiLi90YXNrXCI7XG5pbXBvcnQgeyBYbWxEb2MgfSBmcm9tIFwiLi90eXBlc1wiO1xuXG5leHBvcnQgdHlwZSBYTUxEb2NTdG9yZSA9IFhtbERvYy5YTUxEb2NTdG9yZTtcblxuZXhwb3J0IGNsYXNzIFhNTERvY0hvbGRlciBpbXBsZW1lbnRzIFhtbERvYy5YTUxEb2NIb2xkZXIge1xuICBsYW5nOiBzdHJpbmcgfCBudWxsID0gbnVsbDtcbiAgdG90YWxPZmZzZXQ6IG51bWJlciA9IC0xO1xuICByb290OiBFbGVtZW50O1xuICBib2R5OiBFbGVtZW50O1xuICBoZWFkOiBFbGVtZW50O1xuICBsYXN0OiBFbGVtZW50O1xuICBsYXN0T2Zmc2V0OiBudW1iZXIgPSAxO1xuICBpZE1hcDogeyBba2V5OiBzdHJpbmddOiBFbGVtZW50IH07XG5cbiAgY29uc3RydWN0b3IoXG4gICAgcHVibGljIHJlYWRvbmx5IHN0b3JlOiBYTUxEb2NTdG9yZSxcbiAgICBwdWJsaWMgcmVhZG9ubHkgdXJsOiBzdHJpbmcsXG4gICAgcHVibGljIHJlYWRvbmx5IGRvY3VtZW50OiBEb2N1bWVudCxcbiAgKSB7XG4gICAgdGhpcy5yb290ID0gZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50OyAvLyBodG1sIGVsZW1lbnRcbiAgICBsZXQgYm9keTogRWxlbWVudCA9IG51bGw7XG4gICAgbGV0IGhlYWQ6IEVsZW1lbnQgPSBudWxsO1xuICAgIGlmICh0aGlzLnJvb3QubmFtZXNwYWNlVVJJID09IEJhc2UuTlMuWEhUTUwpIHtcbiAgICAgIGZvciAoXG4gICAgICAgIGxldCBjaGlsZDogTm9kZSA9IHRoaXMucm9vdC5maXJzdENoaWxkO1xuICAgICAgICBjaGlsZDtcbiAgICAgICAgY2hpbGQgPSBjaGlsZC5uZXh0U2libGluZ1xuICAgICAgKSB7XG4gICAgICAgIGlmIChjaGlsZC5ub2RlVHlwZSAhPSAxKSB7XG4gICAgICAgICAgY29udGludWU7XG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgZWxlbSA9IGNoaWxkIGFzIEVsZW1lbnQ7XG4gICAgICAgIGlmIChlbGVtLm5hbWVzcGFjZVVSSSA9PSBCYXNlLk5TLlhIVE1MKSB7XG4gICAgICAgICAgc3dpdGNoIChlbGVtLmxvY2FsTmFtZSkge1xuICAgICAgICAgICAgY2FzZSBcImhlYWRcIjpcbiAgICAgICAgICAgICAgaGVhZCA9IGVsZW07XG4gICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgY2FzZSBcImJvZHlcIjpcbiAgICAgICAgICAgICAgYm9keSA9IGVsZW07XG4gICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgdGhpcy5sYW5nID0gdGhpcy5yb290LmdldEF0dHJpYnV0ZShcImxhbmdcIik7XG4gICAgfVxuICAgIHRoaXMuYm9keSA9IGJvZHkgYXMgRWxlbWVudDtcbiAgICB0aGlzLmhlYWQgPSBoZWFkIGFzIEVsZW1lbnQ7XG4gICAgdGhpcy5sYXN0ID0gdGhpcy5yb290O1xuICAgIHRoaXMubGFzdC5zZXRBdHRyaWJ1dGUoQmFzZS5FTEVNRU5UX09GRlNFVF9BVFRSLCBcIjBcIik7XG4gIH1cblxuICBkb2MoKTogWG1sRG9jLk5vZGVMaXN0IHtcbiAgICByZXR1cm4gbmV3IE5vZGVMaXN0KFt0aGlzLmRvY3VtZW50XSk7XG4gIH1cblxuICBnZXRFbGVtZW50T2Zmc2V0KGVsZW1lbnQ6IEVsZW1lbnQpOiBudW1iZXIge1xuICAgIGNvbnN0IG9mZnNldFN0ciA9IGVsZW1lbnQuZ2V0QXR0cmlidXRlKEJhc2UuRUxFTUVOVF9PRkZTRVRfQVRUUik7XG4gICAgaWYgKG9mZnNldFN0cikge1xuICAgICAgcmV0dXJuIHBhcnNlSW50KG9mZnNldFN0ciwgMTApO1xuICAgIH1cbiAgICBsZXQgb2Zmc2V0ID0gdGhpcy5sYXN0T2Zmc2V0O1xuICAgIGxldCBsYXN0OiBOb2RlIHwgbnVsbCA9IHRoaXMubGFzdDtcbiAgICB3aGlsZSAobGFzdCAhPSBlbGVtZW50KSB7XG4gICAgICBsZXQgbmV4dDogTm9kZSB8IG51bGwgPSBsYXN0LmZpcnN0Q2hpbGQ7XG4gICAgICBpZiAoIW5leHQpIHtcbiAgICAgICAgd2hpbGUgKHRydWUpIHtcbiAgICAgICAgICBuZXh0ID0gbGFzdC5uZXh0U2libGluZztcbiAgICAgICAgICBpZiAobmV4dCkge1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgfVxuICAgICAgICAgIGxhc3QgPSBsYXN0LnBhcmVudE5vZGU7XG4gICAgICAgICAgaWYgKGxhc3QgPT0gbnVsbCkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiSW50ZXJuYWwgZXJyb3JcIik7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG4gICAgICBsYXN0ID0gbmV4dDtcbiAgICAgIGlmIChuZXh0Lm5vZGVUeXBlID09IDEpIHtcbiAgICAgICAgY29uc3QgbmV4dEVsZW1lbnQgPSBuZXh0IGFzIEVsZW1lbnQ7XG4gICAgICAgIG5leHRFbGVtZW50LnNldEF0dHJpYnV0ZShCYXNlLkVMRU1FTlRfT0ZGU0VUX0FUVFIsIG9mZnNldC50b1N0cmluZygpKTtcbiAgICAgICAgKytvZmZzZXQ7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBvZmZzZXQgKz0gKG5leHQudGV4dENvbnRlbnQgYXMgc3RyaW5nKS5sZW5ndGg7XG4gICAgICB9XG4gICAgfVxuICAgIHRoaXMubGFzdE9mZnNldCA9IG9mZnNldDtcbiAgICB0aGlzLmxhc3QgPSBlbGVtZW50O1xuICAgIHJldHVybiBvZmZzZXQgLSAxO1xuICB9XG5cbiAgZ2V0Tm9kZU9mZnNldChzcmNOb2RlOiBOb2RlLCBvZmZzZXRJbk5vZGU6IG51bWJlciwgYWZ0ZXI6IGJvb2xlYW4pIHtcbiAgICBsZXQgZXh0cmFPZmZzZXQgPSAwO1xuICAgIGxldCBub2RlOiBOb2RlIHwgbnVsbCA9IHNyY05vZGU7XG4gICAgbGV0IHByZXY6IE5vZGUgfCBudWxsID0gbnVsbDtcbiAgICBpZiAobm9kZS5ub2RlVHlwZSA9PSAxKSB7XG4gICAgICAvLyBhZnRlciA9IHRydWUgaXMgb25seSB2YWxpZCBmb3IgZWxlbWVudHNcbiAgICAgIGlmICghYWZ0ZXIpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuZ2V0RWxlbWVudE9mZnNldChub2RlIGFzIEVsZW1lbnQpO1xuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICAvLyBvZmZzZXRJbk5vZGUgaXMgb25seSB2YWxpZCBmb3IgdGV4dCBub2Rlc1xuICAgICAgZXh0cmFPZmZzZXQgPSBvZmZzZXRJbk5vZGU7XG4gICAgICBwcmV2ID0gbm9kZS5wcmV2aW91c1NpYmxpbmc7XG4gICAgICBpZiAoIXByZXYpIHtcbiAgICAgICAgbm9kZSA9IG5vZGUucGFyZW50Tm9kZTtcbiAgICAgICAgZXh0cmFPZmZzZXQgKz0gMTtcbiAgICAgICAgcmV0dXJuIHRoaXMuZ2V0RWxlbWVudE9mZnNldChub2RlIGFzIEVsZW1lbnQpICsgZXh0cmFPZmZzZXQ7XG4gICAgICB9XG4gICAgICBub2RlID0gcHJldjtcbiAgICB9XG4gICAgd2hpbGUgKHRydWUpIHtcbiAgICAgIHdoaWxlIChub2RlLmxhc3RDaGlsZCkge1xuICAgICAgICBub2RlID0gbm9kZS5sYXN0Q2hpbGQ7XG4gICAgICB9XG4gICAgICBpZiAobm9kZS5ub2RlVHlwZSA9PSAxKSB7XG4gICAgICAgIC8vIGVtcHR5IGVsZW1lbnRcbiAgICAgICAgYnJlYWs7XG4gICAgICB9XG4gICAgICBleHRyYU9mZnNldCArPSAobm9kZS50ZXh0Q29udGVudCBhcyBzdHJpbmcpLmxlbmd0aDtcbiAgICAgIHByZXYgPSBub2RlLnByZXZpb3VzU2libGluZztcbiAgICAgIGlmICghcHJldikge1xuICAgICAgICBub2RlID0gbm9kZS5wYXJlbnROb2RlO1xuICAgICAgICBicmVhaztcbiAgICAgIH1cbiAgICAgIG5vZGUgPSBwcmV2O1xuICAgIH1cbiAgICBleHRyYU9mZnNldCArPSAxO1xuICAgIHJldHVybiB0aGlzLmdldEVsZW1lbnRPZmZzZXQobm9kZSBhcyBFbGVtZW50KSArIGV4dHJhT2Zmc2V0O1xuICB9XG5cbiAgZ2V0VG90YWxPZmZzZXQoKTogbnVtYmVyIHtcbiAgICBpZiAodGhpcy50b3RhbE9mZnNldCA8IDApIHtcbiAgICAgIHRoaXMudG90YWxPZmZzZXQgPSB0aGlzLmdldE5vZGVPZmZzZXQodGhpcy5yb290LCAwLCB0cnVlKTtcbiAgICB9XG4gICAgcmV0dXJuIHRoaXMudG90YWxPZmZzZXQ7XG4gIH1cblxuICAvKipcbiAgICogQHJldHVybiBsYXN0IG5vZGUgc3VjaCB0aGF0IGl0cyBvZmZzZXQgaXMgbGVzcyBvciBlcXVhbCB0byB0aGUgZ2l2ZW5cbiAgICovXG4gIGdldE5vZGVCeU9mZnNldChvZmZzZXQ6IG51bWJlcik6IE5vZGUge1xuICAgIGxldCBlbGVtZW50T2Zmc2V0OiBudW1iZXI7XG5cbiAgICAvLyBGaXJzdCwgZmluZCB0aGUgbGFzdCBlbGVtZW50IGluIHRoZSBkb2N1bWVudCwgc3VjaCB0aGF0XG4gICAgLy8gdGhpcy5nZXRFbGVtZW50T2Zmc2V0KGVsZW1lbnQpIDw9IG9mZnNldDsgaWYgb2ZmZXN0IG1hdGNoZXNcbiAgICAvLyBleGFjdGx5LCBqdXN0IHJldHVybiBpdC5cbiAgICBsZXQgZWxlbWVudCA9IHRoaXMucm9vdDtcbiAgICB3aGlsZSAodHJ1ZSkge1xuICAgICAgZWxlbWVudE9mZnNldCA9IHRoaXMuZ2V0RWxlbWVudE9mZnNldChlbGVtZW50KTtcbiAgICAgIGlmIChlbGVtZW50T2Zmc2V0ID49IG9mZnNldCkge1xuICAgICAgICByZXR1cm4gZWxlbWVudDtcbiAgICAgIH1cbiAgICAgIGNvbnN0IGNoaWxkcmVuID0gZWxlbWVudC5jaGlsZHJlbjsgLy8gRWxlbWVudCBjaGlsZHJlblxuICAgICAgaWYgKCFjaGlsZHJlbikge1xuICAgICAgICBicmVhaztcbiAgICAgIH1cbiAgICAgIGNvbnN0IGluZGV4ID0gQmFzZS5iaW5hcnlTZWFyY2goY2hpbGRyZW4ubGVuZ3RoLCAoaW5kZXgpID0+IHtcbiAgICAgICAgY29uc3QgY2hpbGQgPSBjaGlsZHJlbltpbmRleF07XG4gICAgICAgIGNvbnN0IGNoaWxkT2Zmc2V0ID0gdGhpcy5nZXRFbGVtZW50T2Zmc2V0KGNoaWxkKTtcbiAgICAgICAgcmV0dXJuIGNoaWxkT2Zmc2V0ID4gb2Zmc2V0O1xuICAgICAgfSk7XG4gICAgICBpZiAoaW5kZXggPT0gMCkge1xuICAgICAgICBicmVhaztcbiAgICAgIH1cbiAgICAgIGlmIChWSVZMSU9TVFlMRV9ERUJVRykge1xuICAgICAgICBpZiAoaW5kZXggPCBjaGlsZHJlbi5sZW5ndGgpIHtcbiAgICAgICAgICBjb25zdCBlbGVtT2Zmc2V0ID0gdGhpcy5nZXRFbGVtZW50T2Zmc2V0KGNoaWxkcmVuW2luZGV4XSk7XG4gICAgICAgICAgaWYgKGVsZW1PZmZzZXQgPD0gb2Zmc2V0KSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJDb25zaXN0ZW5jeSBjaGVjayBmYWlsZWQhXCIpO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgZWxlbWVudCA9IGNoaWxkcmVuW2luZGV4IC0gMV07XG4gICAgfVxuXG4gICAgLy8gTm93IHdlIGhhdmUgZWxlbWVudCB3aXRoIG9mZnNldCBsZXNzIHRoYW4gZGVzaXJlZC4gRmluZCBmb2xsb3dpbmdcbiAgICAvLyAobm9uLWVsZW1lbnQpIG5vZGUgd2l0aCB0aGUgcmlnaHQgb2Zmc2V0LlxuICAgIGxldCBub2RlT2Zmc2V0ID0gZWxlbWVudE9mZnNldCArIDE7XG4gICAgbGV0IG5vZGU6IE5vZGUgfCBudWxsID0gZWxlbWVudDtcbiAgICBsZXQgbmV4dDogTm9kZSB8IG51bGwgPSBub2RlLmZpcnN0Q2hpbGQgfHwgbm9kZS5uZXh0U2libGluZztcbiAgICBsZXQgbGFzdEdvb2Q6IE5vZGUgfCBudWxsID0gbnVsbDtcbiAgICB3aGlsZSAodHJ1ZSkge1xuICAgICAgaWYgKG5leHQpIHtcbiAgICAgICAgaWYgKG5leHQubm9kZVR5cGUgPT0gMSkge1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG4gICAgICAgIG5vZGUgPSBuZXh0O1xuICAgICAgICBsYXN0R29vZCA9IG5vZGU7XG4gICAgICAgIG5vZGVPZmZzZXQgKz0gKG5leHQudGV4dENvbnRlbnQgYXMgc3RyaW5nKS5sZW5ndGg7XG4gICAgICAgIGlmIChub2RlT2Zmc2V0ID4gb2Zmc2V0ICYmICEvXlxccyokLy50ZXN0KG5leHQudGV4dENvbnRlbnQpKSB7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIG5vZGUgPSBub2RlLnBhcmVudE5vZGU7XG4gICAgICAgIGlmICghbm9kZSkge1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICBuZXh0ID0gbm9kZS5uZXh0U2libGluZztcbiAgICB9XG4gICAgaWYgKG5leHQgJiYgbGFzdEdvb2QgJiYgL15cXHMqJC8udGVzdChsYXN0R29vZC50ZXh0Q29udGVudCkpIHtcbiAgICAgIC8vIHNraXAgd2hpdGUtc3BhY2UgdGV4dCBub2RlXG4gICAgICBsYXN0R29vZCA9IG5leHQ7XG4gICAgfVxuICAgIHJldHVybiBsYXN0R29vZCB8fCBlbGVtZW50O1xuICB9XG5cbiAgcHJpdmF0ZSBidWlsZElkTWFwKGU6IEVsZW1lbnQpOiB2b2lkIHtcbiAgICBjb25zdCBpZCA9IGUuZ2V0QXR0cmlidXRlKFwiaWRcIik7XG4gICAgaWYgKGlkICYmICF0aGlzLmlkTWFwW2lkXSkge1xuICAgICAgdGhpcy5pZE1hcFtpZF0gPSBlO1xuICAgIH1cbiAgICBjb25zdCB4bWxpZCA9IGUuZ2V0QXR0cmlidXRlTlMoQmFzZS5OUy5YTUwsIFwiaWRcIik7XG4gICAgaWYgKHhtbGlkICYmICF0aGlzLmlkTWFwW3htbGlkXSkge1xuICAgICAgdGhpcy5pZE1hcFt4bWxpZF0gPSBlO1xuICAgIH1cbiAgICBmb3IgKGxldCBjID0gZS5maXJzdEVsZW1lbnRDaGlsZDsgYzsgYyA9IGMubmV4dEVsZW1lbnRTaWJsaW5nKSB7XG4gICAgICB0aGlzLmJ1aWxkSWRNYXAoYyk7XG4gICAgfVxuICB9XG5cbiAgLyoqXG4gICAqIEdldCBlbGVtZW50IGJ5IFVSTCBpbiB0aGUgc291cmNlIGRvY3VtZW50KHMpLiBVUkwgbXVzdCBiZSBpbiBlaXRoZXIgJyNpZCdcbiAgICogb3IgJ3VybCNpZCcgZm9ybS5cbiAgICovXG4gIGdldEVsZW1lbnQodXJsOiBzdHJpbmcpOiBFbGVtZW50IHwgbnVsbCB7XG4gICAgY29uc3QgbSA9IHVybC5tYXRjaCgvKFteI10qKSMoLispJC8pO1xuICAgIGlmICghbSB8fCAobVsxXSAmJiBtWzFdICE9IHRoaXMudXJsKSkge1xuICAgICAgcmV0dXJuIG51bGw7XG4gICAgfVxuICAgIGNvbnN0IGlkID0gbVsyXTtcbiAgICBsZXQgcjogRWxlbWVudCA9IHRoaXMuZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoaWQpO1xuICAgIGlmICghciAmJiB0aGlzLmRvY3VtZW50LmdldEVsZW1lbnRzQnlOYW1lKSB7XG4gICAgICByID0gdGhpcy5kb2N1bWVudC5nZXRFbGVtZW50c0J5TmFtZShpZClbMF07XG4gICAgfVxuICAgIGlmICghcikge1xuICAgICAgaWYgKCF0aGlzLmlkTWFwKSB7XG4gICAgICAgIHRoaXMuaWRNYXAgPSB7fTtcbiAgICAgICAgdGhpcy5idWlsZElkTWFwKHRoaXMuZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50KTtcbiAgICAgIH1cbiAgICAgIHIgPSB0aGlzLmlkTWFwW2lkXTtcbiAgICB9XG4gICAgcmV0dXJuIHI7XG4gIH1cbn1cblxuLyoqXG4gKiBjZi4gaHR0cHM6Ly93M2MuZ2l0aHViLmlvL0RPTS1QYXJzaW5nLyN0aGUtZG9tcGFyc2VyLWludGVyZmFjZVxuICogQGVudW0ge3N0cmluZ31cbiAqL1xuZXhwb3J0IGVudW0gRE9NUGFyc2VyU3VwcG9ydGVkVHlwZSB7XG4gIFRFWFRfSFRNTCA9IFwidGV4dC9odG1sXCIsXG4gIFRFWFRfWE1MID0gXCJ0ZXh0L3htbFwiLFxuICBBUFBMSUNBVElPTl9YTUwgPSBcImFwcGxpY2F0aW9uL3htbFwiLFxuICBBUFBMSUNBVElPTl9YSFRNTF9YTUwgPSBcImFwcGxpY2F0aW9uL3hodG1sK3htbFwiLFxuICBJTUFHRV9TVkdfWE1MID0gXCJpbWFnZS9zdmcreG1sXCIsXG59XG5cbi8qKlxuICogUGFyc2VzIGEgc3RyaW5nIHdpdGggYSBET01QYXJzZXIgYW5kIHJldHVybnMgdGhlIGRvY3VtZW50LlxuICogSWYgYSBwYXJzZSBlcnJvciBvY2N1cnMsIHJldHVybiBudWxsLlxuICovXG5leHBvcnQgZnVuY3Rpb24gcGFyc2VBbmRSZXR1cm5OdWxsSWZFcnJvcihcbiAgc3RyOiBzdHJpbmcsXG4gIHR5cGU6IHN0cmluZyxcbiAgb3B0X3BhcnNlcj86IERPTVBhcnNlcixcbik6IERvY3VtZW50IHwgbnVsbCB7XG4gIGNvbnN0IHBhcnNlciA9IG9wdF9wYXJzZXIgfHwgbmV3IERPTVBhcnNlcigpO1xuICBsZXQgZG9jOiBEb2N1bWVudDtcbiAgdHJ5IHtcbiAgICBkb2MgPSBwYXJzZXIucGFyc2VGcm9tU3RyaW5nKHN0ciwgdHlwZSBhcyBET01QYXJzZXJTdXBwb3J0ZWRUeXBlKTtcbiAgfSBjYXRjaCAoZSkge31cbiAgaWYgKCFkb2MpIHtcbiAgICByZXR1cm4gbnVsbDtcbiAgfSBlbHNlIHtcbiAgICBjb25zdCBkb2NFbGVtZW50ID0gZG9jLmRvY3VtZW50RWxlbWVudDtcbiAgICBjb25zdCBlcnJvclRhZ05hbWUgPSBcInBhcnNlcmVycm9yXCI7XG4gICAgaWYgKGRvY0VsZW1lbnQubG9jYWxOYW1lID09PSBlcnJvclRhZ05hbWUpIHtcbiAgICAgIHJldHVybiBudWxsO1xuICAgIH0gZWxzZSB7XG4gICAgICBmb3IgKGxldCBjID0gZG9jRWxlbWVudC5maXJzdEVsZW1lbnRDaGlsZDsgYzsgYyA9IGMubmV4dEVsZW1lbnRTaWJsaW5nKSB7XG4gICAgICAgIGlmIChjLmxvY2FsTmFtZSA9PT0gZXJyb3JUYWdOYW1lKSB7XG4gICAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gIH1cbiAgcmV0dXJuIGRvYztcbn1cblxuLyoqXG4gKiBAcmV0dXJucyBudWxsIGlmIGNvbnRlbnRUeXBlIGNhbm5vdCBiZSBpbmZlcnJlZCBmcm9tIEhUVFAgaGVhZGVyIGFuZCBmaWxlXG4gKiAgICAgZXh0ZW5zaW9uXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiByZXNvbHZlQ29udGVudFR5cGUocmVzcG9uc2U6IE5ldC5SZXNwb25zZSk6IHN0cmluZyB8IG51bGwge1xuICBjb25zdCBjb250ZW50VHlwZSA9IHJlc3BvbnNlLmNvbnRlbnRUeXBlO1xuICBpZiAoY29udGVudFR5cGUpIHtcbiAgICBjb25zdCBzdXBwb3J0ZWRLZXlzID0gT2JqZWN0LmtleXMoRE9NUGFyc2VyU3VwcG9ydGVkVHlwZSk7XG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCBzdXBwb3J0ZWRLZXlzLmxlbmd0aDsgaSsrKSB7XG4gICAgICBpZiAoRE9NUGFyc2VyU3VwcG9ydGVkVHlwZVtzdXBwb3J0ZWRLZXlzW2ldXSA9PT0gY29udGVudFR5cGUpIHtcbiAgICAgICAgcmV0dXJuIGNvbnRlbnRUeXBlO1xuICAgICAgfVxuICAgIH1cbiAgICBpZiAoY29udGVudFR5cGUubWF0Y2goL1xcK3htbCQvKSkge1xuICAgICAgcmV0dXJuIERPTVBhcnNlclN1cHBvcnRlZFR5cGUuQVBQTElDQVRJT05fWE1MO1xuICAgIH1cbiAgfVxuICBjb25zdCBtYXRjaCA9IHJlc3BvbnNlLnVybC5tYXRjaCgvXFwuKFteLi9dKykkLyk7XG4gIGlmIChtYXRjaCkge1xuICAgIGNvbnN0IGV4dGVuc2lvbiA9IG1hdGNoWzFdO1xuICAgIHN3aXRjaCAoZXh0ZW5zaW9uKSB7XG4gICAgICBjYXNlIFwiaHRtbFwiOlxuICAgICAgY2FzZSBcImh0bVwiOlxuICAgICAgICByZXR1cm4gRE9NUGFyc2VyU3VwcG9ydGVkVHlwZS5URVhUX0hUTUw7XG4gICAgICBjYXNlIFwieGh0bWxcIjpcbiAgICAgIGNhc2UgXCJ4aHRcIjpcbiAgICAgICAgcmV0dXJuIERPTVBhcnNlclN1cHBvcnRlZFR5cGUuQVBQTElDQVRJT05fWEhUTUxfWE1MO1xuICAgICAgY2FzZSBcInN2Z1wiOlxuICAgICAgY2FzZSBcInN2Z3pcIjpcbiAgICAgICAgcmV0dXJuIERPTVBhcnNlclN1cHBvcnRlZFR5cGUuSU1BR0VfU1ZHX1hNTDtcbiAgICAgIGNhc2UgXCJvcGZcIjpcbiAgICAgIGNhc2UgXCJ4bWxcIjpcbiAgICAgICAgcmV0dXJuIERPTVBhcnNlclN1cHBvcnRlZFR5cGUuQVBQTElDQVRJT05fWE1MO1xuICAgIH1cbiAgfVxuICByZXR1cm4gbnVsbDtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHBhcnNlWE1MUmVzb3VyY2UoXG4gIHJlc3BvbnNlOiBOZXQuUmVzcG9uc2UsXG4gIHN0b3JlOiBYTUxEb2NTdG9yZSxcbik6IFRhc2suUmVzdWx0PFhtbERvYy5YTUxEb2NIb2xkZXI+IHtcbiAgbGV0IGRvYyA9IHJlc3BvbnNlLnJlc3BvbnNlWE1MO1xuICBpZiAoIWRvYykge1xuICAgIGNvbnN0IHBhcnNlciA9IG5ldyBET01QYXJzZXIoKTtcbiAgICBjb25zdCB0ZXh0ID0gcmVzcG9uc2UucmVzcG9uc2VUZXh0O1xuICAgIGlmICh0ZXh0KSB7XG4gICAgICBjb25zdCBjb250ZW50VHlwZSA9IHJlc29sdmVDb250ZW50VHlwZShyZXNwb25zZSk7XG4gICAgICBkb2MgPSBwYXJzZUFuZFJldHVybk51bGxJZkVycm9yKFxuICAgICAgICB0ZXh0LFxuICAgICAgICBjb250ZW50VHlwZSB8fCBET01QYXJzZXJTdXBwb3J0ZWRUeXBlLkFQUExJQ0FUSU9OX1hNTCxcbiAgICAgICAgcGFyc2VyLFxuICAgICAgKTtcblxuICAgICAgLy8gV2hlbiBjb250ZW50VHlwZSBjYW5ub3QgYmUgaW5mZXJyZWQgZnJvbSBIVFRQIGhlYWRlciBhbmQgZmlsZVxuICAgICAgLy8gZXh0ZW5zaW9uLCB3ZSB1c2Ugcm9vdCBlbGVtZW50J3MgdGFnIG5hbWUgdG8gaW5mZXIgdGhlIGNvbnRlbnRUeXBlLiBJZlxuICAgICAgLy8gaXQgaXMgaHRtbCBvciBzdmcsIHdlIHJlLXBhcnNlIHRoZSBzb3VyY2Ugd2l0aCBhbiBhcHByb3ByaWF0ZVxuICAgICAgLy8gY29udGVudFR5cGUuXG4gICAgICBpZiAoZG9jICYmICFjb250ZW50VHlwZSkge1xuICAgICAgICBjb25zdCByb290ID0gZG9jLmRvY3VtZW50RWxlbWVudDtcbiAgICAgICAgaWYgKHJvb3QubG9jYWxOYW1lLnRvTG93ZXJDYXNlKCkgPT09IFwiaHRtbFwiICYmICFyb290Lm5hbWVzcGFjZVVSSSkge1xuICAgICAgICAgIGRvYyA9IHBhcnNlQW5kUmV0dXJuTnVsbElmRXJyb3IoXG4gICAgICAgICAgICB0ZXh0LFxuICAgICAgICAgICAgRE9NUGFyc2VyU3VwcG9ydGVkVHlwZS5URVhUX0hUTUwsXG4gICAgICAgICAgICBwYXJzZXIsXG4gICAgICAgICAgKTtcbiAgICAgICAgfSBlbHNlIGlmIChcbiAgICAgICAgICByb290LmxvY2FsTmFtZS50b0xvd2VyQ2FzZSgpID09PSBcInN2Z1wiICYmXG4gICAgICAgICAgKGRvYyBhcyBhbnkpLmNvbnRlbnRUeXBlICE9PSBET01QYXJzZXJTdXBwb3J0ZWRUeXBlLklNQUdFX1NWR19YTUxcbiAgICAgICAgKSB7XG4gICAgICAgICAgZG9jID0gcGFyc2VBbmRSZXR1cm5OdWxsSWZFcnJvcihcbiAgICAgICAgICAgIHRleHQsXG4gICAgICAgICAgICBET01QYXJzZXJTdXBwb3J0ZWRUeXBlLklNQUdFX1NWR19YTUwsXG4gICAgICAgICAgICBwYXJzZXIsXG4gICAgICAgICAgKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgaWYgKCFkb2MpIHtcbiAgICAgICAgLy8gRmFsbGJhY2sgdG8gSFRNTCBwYXJzaW5nXG4gICAgICAgIGRvYyA9IHBhcnNlQW5kUmV0dXJuTnVsbElmRXJyb3IoXG4gICAgICAgICAgdGV4dCxcbiAgICAgICAgICBET01QYXJzZXJTdXBwb3J0ZWRUeXBlLlRFWFRfSFRNTCxcbiAgICAgICAgICBwYXJzZXIsXG4gICAgICAgICk7XG4gICAgICB9XG4gICAgfVxuICB9XG4gIGNvbnN0IHhtbGRvYyA9IGRvYyA/IG5ldyBYTUxEb2NIb2xkZXIoc3RvcmUsIHJlc3BvbnNlLnVybCwgZG9jKSA6IG51bGw7XG4gIHJldHVybiBUYXNrLm5ld1Jlc3VsdCh4bWxkb2MpO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gbmV3WE1MRG9jU3RvcmUoKTogWE1MRG9jU3RvcmUge1xuICByZXR1cm4gbmV3IE5ldC5SZXNvdXJjZVN0b3JlKFxuICAgIHBhcnNlWE1MUmVzb3VyY2UsXG4gICAgTmV0LlhNTEh0dHBSZXF1ZXN0UmVzcG9uc2VUeXBlLkRPQ1VNRU5ULFxuICApO1xufVxuXG5leHBvcnQgY2xhc3MgUHJlZGljYXRlIGltcGxlbWVudHMgWG1sRG9jLlByZWRpY2F0ZSB7XG4gIGNvbnN0cnVjdG9yKHB1YmxpYyByZWFkb25seSBmbjogKHAxOiBOb2RlKSA9PiBib29sZWFuKSB7fVxuXG4gIGNoZWNrKG5vZGU6IE5vZGUpOiBib29sZWFuIHtcbiAgICByZXR1cm4gdGhpcy5mbihub2RlKTtcbiAgfVxuXG4gIHdpdGhBdHRyaWJ1dGUobmFtZTogc3RyaW5nLCB2YWx1ZTogc3RyaW5nKTogUHJlZGljYXRlIHtcbiAgICByZXR1cm4gbmV3IFByZWRpY2F0ZShcbiAgICAgIChub2RlKSA9PlxuICAgICAgICB0aGlzLmNoZWNrKG5vZGUpICYmXG4gICAgICAgIG5vZGUubm9kZVR5cGUgPT0gMSAmJlxuICAgICAgICAobm9kZSBhcyBFbGVtZW50KS5nZXRBdHRyaWJ1dGUobmFtZSkgPT0gdmFsdWUsXG4gICAgKTtcbiAgfVxuXG4gIHdpdGhDaGlsZChuYW1lOiBzdHJpbmcsIG9wdF9jaGlsZFByZWRpY2F0ZT86IFByZWRpY2F0ZSk6IFByZWRpY2F0ZSB7XG4gICAgcmV0dXJuIG5ldyBQcmVkaWNhdGUoKG5vZGUpID0+IHtcbiAgICAgIGlmICghdGhpcy5jaGVjayhub2RlKSkge1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICB9XG4gICAgICBsZXQgbGlzdCA9IG5ldyBOb2RlTGlzdChbbm9kZV0pO1xuICAgICAgbGlzdCA9IGxpc3QuY2hpbGQobmFtZSk7XG4gICAgICBpZiAob3B0X2NoaWxkUHJlZGljYXRlKSB7XG4gICAgICAgIGxpc3QgPSBsaXN0LnByZWRpY2F0ZShvcHRfY2hpbGRQcmVkaWNhdGUpO1xuICAgICAgfVxuICAgICAgcmV0dXJuIGxpc3Quc2l6ZSgpID4gMDtcbiAgICB9KTtcbiAgfVxufVxuXG5leHBvcnQgY29uc3QgcHJlZGljYXRlID0gbmV3IFByZWRpY2F0ZSgobm9kZSkgPT4gdHJ1ZSk7XG5cbmV4cG9ydCBjbGFzcyBOb2RlTGlzdCBpbXBsZW1lbnRzIFhtbERvYy5Ob2RlTGlzdCB7XG4gIGNvbnN0cnVjdG9yKHB1YmxpYyByZWFkb25seSBub2RlczogTm9kZVtdKSB7fVxuXG4gIGFzQXJyYXkoKTogTm9kZVtdIHtcbiAgICByZXR1cm4gdGhpcy5ub2RlcztcbiAgfVxuXG4gIHNpemUoKTogbnVtYmVyIHtcbiAgICByZXR1cm4gdGhpcy5ub2Rlcy5sZW5ndGg7XG4gIH1cblxuICAvKipcbiAgICogRmlsdGVyIHdpdGggcHJlZGljYXRlXG4gICAqL1xuICBwcmVkaWNhdGUocHI6IFByZWRpY2F0ZSk6IE5vZGVMaXN0IHtcbiAgICBjb25zdCBhcnIgPSBbXTtcbiAgICBmb3IgKGNvbnN0IG4gb2YgdGhpcy5ub2Rlcykge1xuICAgICAgaWYgKHByLmNoZWNrKG4pKSB7XG4gICAgICAgIGFyci5wdXNoKG4pO1xuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gbmV3IE5vZGVMaXN0KGFycik7XG4gIH1cblxuICBmb3JFYWNoTm9kZShmbjogKHAxOiBOb2RlLCBwMjogKHAxOiBOb2RlKSA9PiB2b2lkKSA9PiB2b2lkKTogTm9kZUxpc3Qge1xuICAgIGNvbnN0IGFyciA9IFtdO1xuICAgIGNvbnN0IGFkZCA9IChuKSA9PiB7XG4gICAgICBhcnIucHVzaChuKTtcbiAgICB9O1xuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgdGhpcy5ub2Rlcy5sZW5ndGg7IGkrKykge1xuICAgICAgZm4odGhpcy5ub2Rlc1tpXSwgYWRkKTtcbiAgICB9XG4gICAgcmV0dXJuIG5ldyBOb2RlTGlzdChhcnIpO1xuICB9XG5cbiAgLyoqXG4gICAqIEB0ZW1wbGF0ZSBUXG4gICAqL1xuICBmb3JFYWNoPFQ+KGZuOiAocDE6IE5vZGUpID0+IFQpOiBUW10ge1xuICAgIGNvbnN0IGFyciA9IFtdO1xuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgdGhpcy5ub2Rlcy5sZW5ndGg7IGkrKykge1xuICAgICAgYXJyLnB1c2goZm4odGhpcy5ub2Rlc1tpXSkpO1xuICAgIH1cbiAgICByZXR1cm4gYXJyO1xuICB9XG5cbiAgLyoqXG4gICAqIEB0ZW1wbGF0ZSBUXG4gICAqL1xuICBmb3JFYWNoTm9uTnVsbDxUPihmbjogKHAxOiBOb2RlKSA9PiBUKTogVFtdIHtcbiAgICBjb25zdCBhcnIgPSBbXTtcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IHRoaXMubm9kZXMubGVuZ3RoOyBpKyspIHtcbiAgICAgIGNvbnN0IHQgPSBmbih0aGlzLm5vZGVzW2ldKTtcbiAgICAgIGlmICh0ICE9IG51bGwpIHtcbiAgICAgICAgYXJyLnB1c2godCk7XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiBhcnI7XG4gIH1cblxuICBjaGlsZCh0YWc6IHN0cmluZyk6IE5vZGVMaXN0IHtcbiAgICByZXR1cm4gdGhpcy5mb3JFYWNoTm9kZSgobm9kZSwgYWRkKSA9PiB7XG4gICAgICBmb3IgKGxldCBjOiBOb2RlID0gbm9kZS5maXJzdENoaWxkOyBjOyBjID0gYy5uZXh0U2libGluZykge1xuICAgICAgICBpZiAoYy5ub2RlVHlwZSA9PSAxICYmIChjIGFzIEVsZW1lbnQpLmxvY2FsTmFtZSA9PSB0YWcpIHtcbiAgICAgICAgICBhZGQoYyk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9KTtcbiAgfVxuXG4gIGNoaWxkRWxlbWVudHMoKTogTm9kZUxpc3Qge1xuICAgIHJldHVybiB0aGlzLmZvckVhY2hOb2RlKChub2RlLCBhZGQpID0+IHtcbiAgICAgIGZvciAobGV0IGM6IE5vZGUgPSBub2RlLmZpcnN0Q2hpbGQ7IGM7IGMgPSBjLm5leHRTaWJsaW5nKSB7XG4gICAgICAgIGlmIChjLm5vZGVUeXBlID09IDEpIHtcbiAgICAgICAgICBhZGQoYyk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9KTtcbiAgfVxuXG4gIGF0dHJpYnV0ZShuYW1lOiBzdHJpbmcpOiAoc3RyaW5nIHwgbnVsbClbXSB7XG4gICAgcmV0dXJuIHRoaXMuZm9yRWFjaE5vbk51bGwoKG5vZGUpID0+IHtcbiAgICAgIGlmIChub2RlLm5vZGVUeXBlID09IDEpIHtcbiAgICAgICAgcmV0dXJuIChub2RlIGFzIEVsZW1lbnQpLmdldEF0dHJpYnV0ZShuYW1lKTtcbiAgICAgIH1cbiAgICAgIHJldHVybiBudWxsO1xuICAgIH0pO1xuICB9XG5cbiAgdGV4dENvbnRlbnQoKTogKHN0cmluZyB8IG51bGwpW10ge1xuICAgIHJldHVybiB0aGlzLmZvckVhY2goKG5vZGUpID0+IG5vZGUudGV4dENvbnRlbnQpO1xuICB9XG59XG4iLCIvKipcbiAqIENvcHlyaWdodCAyMDEzIEdvb2dsZSwgSW5jLlxuICogQ29weXJpZ2h0IDIwMTUgVHJpbS1tYXJrcyBJbmMuXG4gKiBDb3B5cmlnaHQgMjAxOSBWaXZsaW9zdHlsZSBGb3VuZGF0aW9uXG4gKlxuICogVml2bGlvc3R5bGUuanMgaXMgZnJlZSBzb2Z0d2FyZTogeW91IGNhbiByZWRpc3RyaWJ1dGUgaXQgYW5kL29yIG1vZGlmeVxuICogaXQgdW5kZXIgdGhlIHRlcm1zIG9mIHRoZSBHTlUgQWZmZXJvIEdlbmVyYWwgUHVibGljIExpY2Vuc2UgYXMgcHVibGlzaGVkIGJ5XG4gKiB0aGUgRnJlZSBTb2Z0d2FyZSBGb3VuZGF0aW9uLCBlaXRoZXIgdmVyc2lvbiAzIG9mIHRoZSBMaWNlbnNlLCBvclxuICogKGF0IHlvdXIgb3B0aW9uKSBhbnkgbGF0ZXIgdmVyc2lvbi5cbiAqXG4gKiBWaXZsaW9zdHlsZS5qcyBpcyBkaXN0cmlidXRlZCBpbiB0aGUgaG9wZSB0aGF0IGl0IHdpbGwgYmUgdXNlZnVsLFxuICogYnV0IFdJVEhPVVQgQU5ZIFdBUlJBTlRZOyB3aXRob3V0IGV2ZW4gdGhlIGltcGxpZWQgd2FycmFudHkgb2ZcbiAqIE1FUkNIQU5UQUJJTElUWSBvciBGSVRORVNTIEZPUiBBIFBBUlRJQ1VMQVIgUFVSUE9TRS4gIFNlZSB0aGVcbiAqIEdOVSBBZmZlcm8gR2VuZXJhbCBQdWJsaWMgTGljZW5zZSBmb3IgbW9yZSBkZXRhaWxzLlxuICpcbiAqIFlvdSBzaG91bGQgaGF2ZSByZWNlaXZlZCBhIGNvcHkgb2YgdGhlIEdOVSBBZmZlcm8gR2VuZXJhbCBQdWJsaWMgTGljZW5zZVxuICogYWxvbmcgd2l0aCBWaXZsaW9zdHlsZS5qcy4gIElmIG5vdCwgc2VlIDxodHRwOi8vd3d3LmdudS5vcmcvbGljZW5zZXMvPi5cbiAqXG4gKiBAZmlsZW92ZXJ2aWV3IE9wcyAtIFJlbmRlciBFUFVCIGNvbnRlbnQgZmlsZXMgYnkgYXBwbHlpbmcgcGFnZSBtYXN0ZXJzLFxuICogc3R5bGluZyBhbmQgbGF5b3V0LlxuICovXG5pbXBvcnQgXCIuL2Zvb3Rub3Rlc1wiO1xuaW1wb3J0IFwiLi90YWJsZVwiO1xuaW1wb3J0ICogYXMgQXNzZXJ0cyBmcm9tIFwiLi9hc3NlcnRzXCI7XG5pbXBvcnQgKiBhcyBCYXNlIGZyb20gXCIuL2Jhc2VcIjtcbmltcG9ydCAqIGFzIEJyZWFrIGZyb20gXCIuL2JyZWFrXCI7XG5pbXBvcnQgKiBhcyBDb2x1bW5zIGZyb20gXCIuL2NvbHVtbnNcIjtcbmltcG9ydCAqIGFzIENvbnN0YW50cyBmcm9tIFwiLi9jb25zdGFudHNcIjtcbmltcG9ydCAqIGFzIENvdW50ZXJzIGZyb20gXCIuL2NvdW50ZXJzXCI7XG5pbXBvcnQgKiBhcyBDc3MgZnJvbSBcIi4vY3NzXCI7XG5pbXBvcnQgKiBhcyBDc3NDYXNjYWRlIGZyb20gXCIuL2Nzcy1jYXNjYWRlXCI7XG5pbXBvcnQgKiBhcyBDc3NQYXJzZXIgZnJvbSBcIi4vY3NzLXBhcnNlclwiO1xuaW1wb3J0ICogYXMgQ3NzUHJvcCBmcm9tIFwiLi9jc3MtcHJvcFwiO1xuaW1wb3J0ICogYXMgQ3NzU3R5bGVyIGZyb20gXCIuL2Nzcy1zdHlsZXJcIjtcbmltcG9ydCAqIGFzIENzc1Rva2VuaXplciBmcm9tIFwiLi9jc3MtdG9rZW5pemVyXCI7XG5pbXBvcnQgKiBhcyBDc3NWYWxpZGF0b3IgZnJvbSBcIi4vY3NzLXZhbGlkYXRvclwiO1xuaW1wb3J0ICogYXMgRXhwcnMgZnJvbSBcIi4vZXhwcnNcIjtcbmltcG9ydCAqIGFzIEZvbnQgZnJvbSBcIi4vZm9udFwiO1xuaW1wb3J0ICogYXMgR2VvbWV0cnlVdGlsIGZyb20gXCIuL2dlb21ldHJ5LXV0aWxcIjtcbmltcG9ydCAqIGFzIExheW91dCBmcm9tIFwiLi9sYXlvdXRcIjtcbmltcG9ydCAqIGFzIExheW91dFByb2Nlc3NvciBmcm9tIFwiLi9sYXlvdXQtcHJvY2Vzc29yXCI7XG5pbXBvcnQgKiBhcyBMb2dnaW5nIGZyb20gXCIuL2xvZ2dpbmdcIjtcbmltcG9ydCAqIGFzIE5ldCBmcm9tIFwiLi9uZXRcIjtcbmltcG9ydCAqIGFzIFBhZ2VGbG9hdHMgZnJvbSBcIi4vcGFnZS1mbG9hdHNcIjtcbmltcG9ydCAqIGFzIENzc1BhZ2UgZnJvbSBcIi4vY3NzLXBhZ2VcIjtcbmltcG9ydCAqIGFzIFBsdWdpbiBmcm9tIFwiLi9wbHVnaW5cIjtcbmltcG9ydCAqIGFzIFBhZ2VNYXN0ZXIgZnJvbSBcIi4vcGFnZS1tYXN0ZXJcIjtcbmltcG9ydCAqIGFzIFRhc2sgZnJvbSBcIi4vdGFza1wiO1xuaW1wb3J0ICogYXMgVGFza1V0aWwgZnJvbSBcIi4vdGFzay11dGlsXCI7XG5pbXBvcnQgKiBhcyBWZ2VuIGZyb20gXCIuL3ZnZW5cIjtcbmltcG9ydCAqIGFzIFZ0cmVlIGZyb20gXCIuL3Z0cmVlXCI7XG5pbXBvcnQgKiBhcyBYbWxEb2MgZnJvbSBcIi4veG1sLWRvY1wiO1xuaW1wb3J0IHsgTGF5b3V0IGFzIExheW91dFR5cGUgfSBmcm9tIFwiLi90eXBlc1wiO1xuaW1wb3J0IHsgVXNlckFnZW50QmFzZUNzcywgVXNlckFnZW50UGFnZUNzcyB9IGZyb20gXCIuL2Fzc2V0c1wiO1xuXG5leHBvcnQgY29uc3QgdWFTdHlsZXNoZWV0QmFzZUZldGNoZXI6IFRhc2tVdGlsLkZldGNoZXI8Ym9vbGVhbj4gPSBuZXcgVGFza1V0aWwuRmV0Y2hlcihcbiAgKCkgPT4ge1xuICAgIGNvbnN0IGZyYW1lOiBUYXNrLkZyYW1lPGJvb2xlYW4+ID0gVGFzay5uZXdGcmFtZShcInVhU3R5bGVzaGVldEJhc2VcIik7XG4gICAgY29uc3QgdmFsaWRhdG9yU2V0ID0gQ3NzVmFsaWRhdG9yLmJhc2VWYWxpZGF0b3JTZXQoKTtcbiAgICBjb25zdCB1cmwgPSBCYXNlLnJlc29sdmVVUkwoXCJ1c2VyLWFnZW50LWJhc2UuY3NzXCIsIEJhc2UucmVzb3VyY2VCYXNlVVJMKTtcbiAgICBjb25zdCBoYW5kbGVyID0gbmV3IENzc0Nhc2NhZGUuQ2FzY2FkZVBhcnNlckhhbmRsZXIoXG4gICAgICBudWxsLFxuICAgICAgbnVsbCxcbiAgICAgIG51bGwsXG4gICAgICBudWxsLFxuICAgICAgbnVsbCxcbiAgICAgIHZhbGlkYXRvclNldCxcbiAgICAgIHRydWUsXG4gICAgKTtcbiAgICBoYW5kbGVyLnN0YXJ0U3R5bGVzaGVldChDc3NQYXJzZXIuU3R5bGVzaGVldEZsYXZvci5VU0VSX0FHRU5UKTtcbiAgICBDc3NDYXNjYWRlLnNldFVBQmFzZUNhc2NhZGUoaGFuZGxlci5jYXNjYWRlKTtcbiAgICBDc3NQYXJzZXIucGFyc2VTdHlsZXNoZWV0RnJvbVRleHQoXG4gICAgICBVc2VyQWdlbnRCYXNlQ3NzLFxuICAgICAgaGFuZGxlcixcbiAgICAgIHVybCxcbiAgICAgIG51bGwsXG4gICAgICBudWxsLFxuICAgICkudGhlbkZpbmlzaChmcmFtZSk7XG4gICAgcmV0dXJuIGZyYW1lLnJlc3VsdCgpO1xuICB9LFxuICBcInVhU3R5bGVzaGVldEJhc2VGZXRjaGVyXCIsXG4pO1xuXG5leHBvcnQgZnVuY3Rpb24gbG9hZFVBQmFzZSgpOiBUYXNrLlJlc3VsdDxib29sZWFuPiB7XG4gIHJldHVybiB1YVN0eWxlc2hlZXRCYXNlRmV0Y2hlci5nZXQoKTtcbn1cblxuZXhwb3J0IHR5cGUgRm9udEZhY2UgPSB7XG4gIHByb3BlcnRpZXM6IENzc0Nhc2NhZGUuRWxlbWVudFN0eWxlO1xuICBjb25kaXRpb246IEV4cHJzLlZhbDtcbn07XG5cbmV4cG9ydCBjbGFzcyBTdHlsZSB7XG4gIGZvbnREZW9iZnVzY2F0b3I6XG4gICAgfCAoKHAxOiBzdHJpbmcpID0+ICgocDE6IEJsb2IpID0+IFRhc2suUmVzdWx0PEJsb2I+KSB8IG51bGwpXG4gICAgfCBudWxsO1xuICB2YWxpZGF0b3JTZXQ6IENzc1ZhbGlkYXRvci5WYWxpZGF0b3JTZXQ7XG5cbiAgY29uc3RydWN0b3IoXG4gICAgcHVibGljIHJlYWRvbmx5IHN0b3JlOiBPUFNEb2NTdG9yZSxcbiAgICBwdWJsaWMgcmVhZG9ubHkgcm9vdFNjb3BlOiBFeHBycy5MZXhpY2FsU2NvcGUsXG4gICAgcHVibGljIHJlYWRvbmx5IHBhZ2VTY29wZTogRXhwcnMuTGV4aWNhbFNjb3BlLFxuICAgIHB1YmxpYyByZWFkb25seSBjYXNjYWRlOiBDc3NDYXNjYWRlLkNhc2NhZGUsXG4gICAgcHVibGljIHJlYWRvbmx5IHJvb3RCb3g6IFBhZ2VNYXN0ZXIuUm9vdFBhZ2VCb3gsXG4gICAgcHVibGljIHJlYWRvbmx5IGZvbnRGYWNlczogRm9udEZhY2VbXSxcbiAgICBwdWJsaWMgcmVhZG9ubHkgZm9vdG5vdGVQcm9wczogQ3NzQ2FzY2FkZS5FbGVtZW50U3R5bGUsXG4gICAgcHVibGljIHJlYWRvbmx5IGZsb3dQcm9wczogeyBba2V5OiBzdHJpbmddOiBDc3NDYXNjYWRlLkVsZW1lbnRTdHlsZSB9LFxuICAgIHB1YmxpYyByZWFkb25seSB2aWV3cG9ydFByb3BzOiBDc3NDYXNjYWRlLkVsZW1lbnRTdHlsZVtdLFxuICAgIHB1YmxpYyByZWFkb25seSBwYWdlUHJvcHM6IHsgW2tleTogc3RyaW5nXTogQ3NzQ2FzY2FkZS5FbGVtZW50U3R5bGUgfSxcbiAgKSB7XG4gICAgdGhpcy5mb250RGVvYmZ1c2NhdG9yID0gc3RvcmUuZm9udERlb2JmdXNjYXRvcjtcbiAgICB0aGlzLnZhbGlkYXRvclNldCA9IHN0b3JlLnZhbGlkYXRvclNldDtcbiAgICB0aGlzLnBhZ2VTY29wZS5kZWZpbmVCdWlsdEluKFwiaGFzLWNvbnRlbnRcIiwgZnVuY3Rpb24gKG5hbWUpIHtcbiAgICAgIG5hbWUgPSBuYW1lIGFzIHN0cmluZztcbiAgICAgIGNvbnN0IHN0eWxlSW5zdGFuY2UgPSB0aGlzIGFzIFN0eWxlSW5zdGFuY2U7XG4gICAgICBjb25zdCBjcCA9IHN0eWxlSW5zdGFuY2UuY3VycmVudExheW91dFBvc2l0aW9uO1xuICAgICAgY29uc3QgZmxvd0NodW5rID0gY3AuZmlyc3RGbG93Q2h1bmtPZkZsb3cobmFtZSk7XG4gICAgICByZXR1cm4gKFxuICAgICAgICBzdHlsZUluc3RhbmNlLm1hdGNoUGFnZVNpZGUoY3Auc3RhcnRTaWRlT2ZGbG93KG5hbWUgYXMgc3RyaW5nKSkgJiZcbiAgICAgICAgY3AuaGFzQ29udGVudChuYW1lIGFzIHN0cmluZywgc3R5bGVJbnN0YW5jZS5sb29rdXBPZmZzZXQpICYmXG4gICAgICAgICEhZmxvd0NodW5rICYmXG4gICAgICAgICFzdHlsZUluc3RhbmNlLmZsb3dDaHVua0lzQWZ0ZXJQYXJlbnRGbG93Rm9yY2VkQnJlYWsoZmxvd0NodW5rKVxuICAgICAgKTtcbiAgICB9KTtcbiAgICB0aGlzLnBhZ2VTY29wZS5kZWZpbmVOYW1lKFxuICAgICAgXCJwYWdlLW51bWJlclwiLFxuICAgICAgbmV3IEV4cHJzLk5hdGl2ZShcbiAgICAgICAgdGhpcy5wYWdlU2NvcGUsXG4gICAgICAgIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICBjb25zdCBzdHlsZUluc3RhbmNlID0gdGhpcyBhcyBTdHlsZUluc3RhbmNlO1xuICAgICAgICAgIHJldHVybiAoXG4gICAgICAgICAgICBzdHlsZUluc3RhbmNlLnBhZ2VOdW1iZXJPZmZzZXQgK1xuICAgICAgICAgICAgc3R5bGVJbnN0YW5jZS5jdXJyZW50TGF5b3V0UG9zaXRpb24ucGFnZVxuICAgICAgICAgICk7XG4gICAgICAgIH0sXG4gICAgICAgIFwicGFnZS1udW1iZXJcIixcbiAgICAgICksXG4gICAgKTtcbiAgfVxuXG4gIHNpemVWaWV3cG9ydChcbiAgICB2aWV3cG9ydFdpZHRoOiBudW1iZXIsXG4gICAgdmlld3BvcnRIZWlnaHQ6IG51bWJlcixcbiAgICBmb250U2l6ZTogbnVtYmVyLFxuICAgIHByZWY/OiBFeHBycy5QcmVmZXJlbmNlcyxcbiAgKTogeyB3aWR0aDogbnVtYmVyOyBoZWlnaHQ6IG51bWJlcjsgZm9udFNpemU6IG51bWJlciB9IHtcbiAgICBpZiAodGhpcy52aWV3cG9ydFByb3BzLmxlbmd0aCkge1xuICAgICAgY29uc3QgY29udGV4dCA9IG5ldyBFeHBycy5Db250ZXh0KFxuICAgICAgICB0aGlzLnJvb3RTY29wZSxcbiAgICAgICAgdmlld3BvcnRXaWR0aCxcbiAgICAgICAgdmlld3BvcnRIZWlnaHQsXG4gICAgICAgIGZvbnRTaXplLFxuICAgICAgKTtcbiAgICAgIGNvbnN0IHZpZXdwb3J0UHJvcHMgPSBDc3NDYXNjYWRlLm1lcmdlQWxsKGNvbnRleHQsIHRoaXMudmlld3BvcnRQcm9wcyk7XG4gICAgICBjb25zdCB3aWR0aCA9IHZpZXdwb3J0UHJvcHNbXCJ3aWR0aFwiXTtcbiAgICAgIGNvbnN0IGhlaWdodCA9IHZpZXdwb3J0UHJvcHNbXCJoZWlnaHRcIl07XG4gICAgICBjb25zdCB0ZXh0Wm9vbSA9IHZpZXdwb3J0UHJvcHNbXCJ0ZXh0LXpvb21cIl07XG4gICAgICBsZXQgc2NhbGVGYWN0b3IgPSAxO1xuICAgICAgaWYgKCh3aWR0aCAmJiBoZWlnaHQpIHx8IHRleHRab29tKSB7XG4gICAgICAgIGNvbnN0IGRlZmF1bHRGb250U2l6ZSA9IEV4cHJzLmRlZmF1bHRVbml0U2l6ZXNbXCJlbVwiXTtcbiAgICAgICAgY29uc3Qgem9vbVZhbCA9IHRleHRab29tXG4gICAgICAgICAgPyB0ZXh0Wm9vbS5ldmFsdWF0ZShjb250ZXh0LCBcInRleHQtem9vbVwiKVxuICAgICAgICAgIDogbnVsbDtcbiAgICAgICAgaWYgKHpvb21WYWwgPT09IENzcy5pZGVudC5zY2FsZSkge1xuICAgICAgICAgIHNjYWxlRmFjdG9yID0gZGVmYXVsdEZvbnRTaXplIC8gZm9udFNpemU7XG4gICAgICAgICAgZm9udFNpemUgPSBkZWZhdWx0Rm9udFNpemU7XG4gICAgICAgICAgdmlld3BvcnRXaWR0aCAqPSBzY2FsZUZhY3RvcjtcbiAgICAgICAgICB2aWV3cG9ydEhlaWdodCAqPSBzY2FsZUZhY3RvcjtcbiAgICAgICAgfVxuICAgICAgICBpZiAod2lkdGggJiYgaGVpZ2h0KSB7XG4gICAgICAgICAgY29uc3Qgd2lkdGhWYWwgPSBDc3MudG9OdW1iZXIoXG4gICAgICAgICAgICB3aWR0aC5ldmFsdWF0ZShjb250ZXh0LCBcIndpZHRoXCIpLFxuICAgICAgICAgICAgY29udGV4dCxcbiAgICAgICAgICApO1xuICAgICAgICAgIGNvbnN0IGhlaWdodFZhbCA9IENzcy50b051bWJlcihcbiAgICAgICAgICAgIGhlaWdodC5ldmFsdWF0ZShjb250ZXh0LCBcImhlaWdodFwiKSxcbiAgICAgICAgICAgIGNvbnRleHQsXG4gICAgICAgICAgKTtcbiAgICAgICAgICBpZiAod2lkdGhWYWwgPiAwICYmIGhlaWdodFZhbCA+IDApIHtcbiAgICAgICAgICAgIGNvbnN0IHNwcmVhZFdpZHRoID1cbiAgICAgICAgICAgICAgcHJlZiAmJiBwcmVmLnNwcmVhZFZpZXdcbiAgICAgICAgICAgICAgICA/ICh3aWR0aFZhbCArIHByZWYucGFnZUJvcmRlcikgKiAyXG4gICAgICAgICAgICAgICAgOiB3aWR0aFZhbDtcbiAgICAgICAgICAgIHJldHVybiB7IHdpZHRoOiBzcHJlYWRXaWR0aCwgaGVpZ2h0OiBoZWlnaHRWYWwsIGZvbnRTaXplIH07XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiB7IHdpZHRoOiB2aWV3cG9ydFdpZHRoLCBoZWlnaHQ6IHZpZXdwb3J0SGVpZ2h0LCBmb250U2l6ZSB9O1xuICB9XG59XG5cbi8vLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuZXhwb3J0IGNsYXNzIFN0eWxlSW5zdGFuY2VcbiAgZXh0ZW5kcyBFeHBycy5Db250ZXh0XG4gIGltcGxlbWVudHNcbiAgICBDc3NTdHlsZXIuRmxvd0xpc3RlbmVyLFxuICAgIFBhZ2VNYXN0ZXIuSW5zdGFuY2VIb2xkZXIsXG4gICAgVmdlbi5TdHlsZXJQcm9kdWNlciB7XG4gIGxhbmc6IHN0cmluZyB8IG51bGw7XG4gIHByaW1hcnlGbG93cyA9IHsgYm9keTogdHJ1ZSB9IGFzIHsgW2tleTogc3RyaW5nXTogYm9vbGVhbiB9O1xuICByb290UGFnZUJveEluc3RhbmNlOiBQYWdlTWFzdGVyLlJvb3RQYWdlQm94SW5zdGFuY2UgPSBudWxsO1xuICBzdHlsZXI6IENzc1N0eWxlci5TdHlsZXIgPSBudWxsO1xuICBzdHlsZXJNYXA6IHsgW2tleTogc3RyaW5nXTogQ3NzU3R5bGVyLlN0eWxlciB9ID0gbnVsbDtcbiAgY3VycmVudExheW91dFBvc2l0aW9uOiBWdHJlZS5MYXlvdXRQb3NpdGlvbiA9IG51bGw7XG4gIGxheW91dFBvc2l0aW9uQXRQYWdlU3RhcnQ6IFZ0cmVlLkxheW91dFBvc2l0aW9uID0gbnVsbDtcbiAgbG9va3VwT2Zmc2V0OiBudW1iZXIgPSAwO1xuICBmYWNlczogRm9udC5Eb2N1bWVudEZhY2VzO1xuICBwYWdlQm94SW5zdGFuY2VzOiB7IFtrZXk6IHN0cmluZ106IFBhZ2VNYXN0ZXIuUGFnZUJveEluc3RhbmNlIH0gPSB7fTtcbiAgcGFnZU1hbmFnZXI6IENzc1BhZ2UuUGFnZU1hbmFnZXIgPSBudWxsO1xuICBwcml2YXRlIHJvb3RQYWdlRmxvYXRMYXlvdXRDb250ZXh0OiBQYWdlRmxvYXRzLlBhZ2VGbG9hdExheW91dENvbnRleHQ7XG4gIHBhZ2VCcmVha3M6IHsgW2tleTogc3RyaW5nXTogYm9vbGVhbiB9ID0ge307XG4gIHBhZ2VQcm9ncmVzc2lvbjogQ29uc3RhbnRzLlBhZ2VQcm9ncmVzc2lvbiB8IG51bGwgPSBudWxsO1xuICBpc1ZlcnNvRmlyc3RQYWdlOiBib29sZWFuID0gZmFsc2U7XG4gIGJsYW5rUGFnZUF0U3RhcnQ6IGJvb2xlYW4gPSBmYWxzZTtcbiAgcGFnZVNoZWV0U2l6ZTogeyBba2V5OiBzdHJpbmddOiB7IHdpZHRoOiBudW1iZXI7IGhlaWdodDogbnVtYmVyIH0gfSA9IHt9O1xuICBwYWdlU2hlZXRIZWlnaHQ6IG51bWJlciA9IDA7XG4gIHBhZ2VTaGVldFdpZHRoOiBudW1iZXIgPSAwO1xuICBhY3R1YWxQYWdlV2lkdGg6IG51bWJlcjtcbiAgYWN0dWFsUGFnZUhlaWdodDogbnVtYmVyO1xuXG4gIGNvbnN0cnVjdG9yKFxuICAgIHB1YmxpYyByZWFkb25seSBzdHlsZTogU3R5bGUsXG4gICAgcHVibGljIHJlYWRvbmx5IHhtbGRvYzogWG1sRG9jLlhNTERvY0hvbGRlcixcbiAgICBkZWZhdWx0TGFuZzogc3RyaW5nIHwgbnVsbCxcbiAgICBwdWJsaWMgcmVhZG9ubHkgdmlld3BvcnQ6IFZnZW4uVmlld3BvcnQsXG4gICAgcHVibGljIHJlYWRvbmx5IGNsaWVudExheW91dDogVnRyZWUuQ2xpZW50TGF5b3V0LFxuICAgIHB1YmxpYyByZWFkb25seSBmb250TWFwcGVyOiBGb250Lk1hcHBlcixcbiAgICBwdWJsaWMgcmVhZG9ubHkgY3VzdG9tUmVuZGVyZXI6IFZnZW4uQ3VzdG9tUmVuZGVyZXIsXG4gICAgcHVibGljIHJlYWRvbmx5IGZhbGxiYWNrTWFwOiB7IFtrZXk6IHN0cmluZ106IHN0cmluZyB9LFxuICAgIHB1YmxpYyByZWFkb25seSBwYWdlTnVtYmVyT2Zmc2V0OiBudW1iZXIsXG4gICAgcHVibGljIHJlYWRvbmx5IGRvY3VtZW50VVJMVHJhbnNmb3JtZXI6IEJhc2UuRG9jdW1lbnRVUkxUcmFuc2Zvcm1lcixcbiAgICBwdWJsaWMgcmVhZG9ubHkgY291bnRlclN0b3JlOiBDb3VudGVycy5Db3VudGVyU3RvcmUsXG4gICAgcGFnZVByb2dyZXNzaW9uPzogQ29uc3RhbnRzLlBhZ2VQcm9ncmVzc2lvbixcbiAgICBpc1ZlcnNvRmlyc3RQYWdlPzogYm9vbGVhbixcbiAgKSB7XG4gICAgc3VwZXIoc3R5bGUucm9vdFNjb3BlLCB2aWV3cG9ydC53aWR0aCwgdmlld3BvcnQuaGVpZ2h0LCB2aWV3cG9ydC5mb250U2l6ZSk7XG4gICAgdGhpcy5sYW5nID0geG1sZG9jLmxhbmcgfHwgZGVmYXVsdExhbmc7XG4gICAgdGhpcy5mYWNlcyA9IG5ldyBGb250LkRvY3VtZW50RmFjZXModGhpcy5zdHlsZS5mb250RGVvYmZ1c2NhdG9yKTtcbiAgICB0aGlzLnJvb3RQYWdlRmxvYXRMYXlvdXRDb250ZXh0ID0gbmV3IFBhZ2VGbG9hdHMuUGFnZUZsb2F0TGF5b3V0Q29udGV4dChcbiAgICAgIG51bGwsXG4gICAgICBudWxsLFxuICAgICAgbnVsbCxcbiAgICAgIG51bGwsXG4gICAgICBudWxsLFxuICAgICAgbnVsbCxcbiAgICAgIG51bGwsXG4gICAgKTtcbiAgICB0aGlzLnBhZ2VQcm9ncmVzc2lvbiA9IHBhZ2VQcm9ncmVzc2lvbiB8fCBudWxsO1xuICAgIHRoaXMuaXNWZXJzb0ZpcnN0UGFnZSA9ICEhaXNWZXJzb0ZpcnN0UGFnZTtcbiAgICBmb3IgKGNvbnN0IGZsb3dOYW1lIGluIHN0eWxlLmZsb3dQcm9wcykge1xuICAgICAgY29uc3QgZmxvd1N0eWxlID0gc3R5bGUuZmxvd1Byb3BzW2Zsb3dOYW1lXTtcbiAgICAgIGNvbnN0IGNvbnN1bWUgPSBDc3NDYXNjYWRlLmdldFByb3AoZmxvd1N0eWxlLCBcImZsb3ctY29uc3VtZVwiKTtcbiAgICAgIGlmIChjb25zdW1lKSB7XG4gICAgICAgIGNvbnN0IGNvbnN1bWVWYWwgPSBjb25zdW1lLmV2YWx1YXRlKHRoaXMsIFwiZmxvdy1jb25zdW1lXCIpO1xuICAgICAgICBpZiAoY29uc3VtZVZhbCA9PSBDc3MuaWRlbnQuYWxsKSB7XG4gICAgICAgICAgdGhpcy5wcmltYXJ5Rmxvd3NbZmxvd05hbWVdID0gdHJ1ZTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBkZWxldGUgdGhpcy5wcmltYXJ5Rmxvd3NbZmxvd05hbWVdO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgaW5pdCgpOiBUYXNrLlJlc3VsdDxib29sZWFuPiB7XG4gICAgY29uc3QgZnJhbWU6IFRhc2suRnJhbWU8Ym9vbGVhbj4gPSBUYXNrLm5ld0ZyYW1lKFwiU3R5bGVJbnN0YW5jZS5pbml0XCIpO1xuICAgIGNvbnN0IGNvdW50ZXJMaXN0ZW5lciA9IHRoaXMuY291bnRlclN0b3JlLmNyZWF0ZUNvdW50ZXJMaXN0ZW5lcihcbiAgICAgIHRoaXMueG1sZG9jLnVybCxcbiAgICApO1xuICAgIGNvbnN0IGNvdW50ZXJSZXNvbHZlciA9IHRoaXMuY291bnRlclN0b3JlLmNyZWF0ZUNvdW50ZXJSZXNvbHZlcihcbiAgICAgIHRoaXMueG1sZG9jLnVybCxcbiAgICAgIHRoaXMuc3R5bGUucm9vdFNjb3BlLFxuICAgICAgdGhpcy5zdHlsZS5wYWdlU2NvcGUsXG4gICAgKTtcbiAgICB0aGlzLnN0eWxlciA9IG5ldyBDc3NTdHlsZXIuU3R5bGVyKFxuICAgICAgdGhpcy54bWxkb2MsXG4gICAgICB0aGlzLnN0eWxlLmNhc2NhZGUsXG4gICAgICB0aGlzLnN0eWxlLnJvb3RTY29wZSxcbiAgICAgIHRoaXMsXG4gICAgICB0aGlzLnByaW1hcnlGbG93cyxcbiAgICAgIHRoaXMuc3R5bGUudmFsaWRhdG9yU2V0LFxuICAgICAgY291bnRlckxpc3RlbmVyLFxuICAgICAgY291bnRlclJlc29sdmVyLFxuICAgICk7XG4gICAgY291bnRlclJlc29sdmVyLnNldFN0eWxlcih0aGlzLnN0eWxlcik7XG4gICAgdGhpcy5zdHlsZXIucmVzZXRGbG93Q2h1bmtTdHJlYW0odGhpcyk7XG4gICAgdGhpcy5zdHlsZXJNYXAgPSB7fTtcbiAgICB0aGlzLnN0eWxlck1hcFt0aGlzLnhtbGRvYy51cmxdID0gdGhpcy5zdHlsZXI7XG4gICAgY29uc3QgZG9jRWxlbWVudFN0eWxlID0gdGhpcy5zdHlsZXIuZ2V0VG9wQ29udGFpbmVyU3R5bGUoKTtcbiAgICBpZiAoIXRoaXMucGFnZVByb2dyZXNzaW9uKSB7XG4gICAgICB0aGlzLnBhZ2VQcm9ncmVzc2lvbiA9IENzc1BhZ2UucmVzb2x2ZVBhZ2VQcm9ncmVzc2lvbihkb2NFbGVtZW50U3R5bGUpO1xuICAgIH1cblxuICAgIC8vIENoZWNrIHRoZSBzcHJlYWQgYnJlYWsgYXQgYmVnaW5uaW5nIG9mIGEgZG9jdW1lbnQgdGhhdCBtYXkgY2F1c2VcbiAgICAvLyB0aGUgZmlyc3QgcGFnZSB2ZXJzbyBzaWRlIG9yIGNhdXNlIGEgYmxhbmsgcGFnZSAoaXNzdWUgIzY2NilcbiAgICBpZiAoIXRoaXMubWF0Y2hTdGFydFBhZ2VTaWRlKHRoaXMuc3R5bGVyLmJyZWFrQmVmb3JlVmFsdWVzWzBdKSkge1xuICAgICAgaWYgKHRoaXMucGFnZU51bWJlck9mZnNldCA9PT0gMCkge1xuICAgICAgICB0aGlzLmlzVmVyc29GaXJzdFBhZ2UgPSB0cnVlO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdGhpcy5ibGFua1BhZ2VBdFN0YXJ0ID0gdHJ1ZTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBjb25zdCByb290Qm94ID0gdGhpcy5zdHlsZS5yb290Qm94O1xuICAgIHRoaXMucm9vdFBhZ2VCb3hJbnN0YW5jZSA9IG5ldyBQYWdlTWFzdGVyLlJvb3RQYWdlQm94SW5zdGFuY2Uocm9vdEJveCk7XG4gICAgY29uc3QgY2FzY2FkZUluc3RhbmNlID0gdGhpcy5zdHlsZS5jYXNjYWRlLmNyZWF0ZUluc3RhbmNlKFxuICAgICAgdGhpcyxcbiAgICAgIGNvdW50ZXJMaXN0ZW5lcixcbiAgICAgIGNvdW50ZXJSZXNvbHZlcixcbiAgICAgIHRoaXMubGFuZyxcbiAgICApO1xuICAgIHRoaXMucm9vdFBhZ2VCb3hJbnN0YW5jZS5hcHBseUNhc2NhZGVBbmRJbml0KFxuICAgICAgY2FzY2FkZUluc3RhbmNlLFxuICAgICAgZG9jRWxlbWVudFN0eWxlLFxuICAgICk7XG4gICAgdGhpcy5yb290UGFnZUJveEluc3RhbmNlLnJlc29sdmVBdXRvU2l6aW5nKHRoaXMpO1xuICAgIHRoaXMucGFnZU1hbmFnZXIgPSBuZXcgQ3NzUGFnZS5QYWdlTWFuYWdlcihcbiAgICAgIGNhc2NhZGVJbnN0YW5jZSxcbiAgICAgIHRoaXMuc3R5bGUucGFnZVNjb3BlLFxuICAgICAgdGhpcy5yb290UGFnZUJveEluc3RhbmNlLFxuICAgICAgdGhpcyxcbiAgICAgIGRvY0VsZW1lbnRTdHlsZSxcbiAgICApO1xuICAgIGNvbnN0IHNyY0ZhY2VzID0gW10gYXMgRm9udC5GYWNlW107XG4gICAgZm9yIChjb25zdCBmb250RmFjZSBvZiB0aGlzLnN0eWxlLmZvbnRGYWNlcykge1xuICAgICAgaWYgKGZvbnRGYWNlLmNvbmRpdGlvbiAmJiAhZm9udEZhY2UuY29uZGl0aW9uLmV2YWx1YXRlKHRoaXMpKSB7XG4gICAgICAgIGNvbnRpbnVlO1xuICAgICAgfVxuICAgICAgY29uc3QgcHJvcGVydGllcyA9IEZvbnQucHJlcGFyZVByb3BlcnRpZXMoZm9udEZhY2UucHJvcGVydGllcywgdGhpcyk7XG4gICAgICBjb25zdCBzcmNGYWNlID0gbmV3IEZvbnQuRmFjZShwcm9wZXJ0aWVzKTtcbiAgICAgIHNyY0ZhY2VzLnB1c2goc3JjRmFjZSk7XG4gICAgfVxuICAgIHRoaXMuZm9udE1hcHBlci5maW5kT3JMb2FkRm9udHMoc3JjRmFjZXMsIHRoaXMuZmFjZXMpLnRoZW5GaW5pc2goZnJhbWUpO1xuXG4gICAgLy8gRGV0ZXJtaW5lIHBhZ2Ugc2hlZXQgc2l6ZXMgY29ycmVzcG9uZGluZyB0byBwYWdlIHNlbGVjdG9yc1xuICAgIGNvbnN0IHBhZ2VQcm9wcyA9IHRoaXMuc3R5bGUucGFnZVByb3BzO1xuICAgIE9iamVjdC5rZXlzKHBhZ2VQcm9wcykuZm9yRWFjaCgoc2VsZWN0b3IpID0+IHtcbiAgICAgIGNvbnN0IHBhZ2VTaXplQW5kQmxlZWQgPSBDc3NQYWdlLmV2YWx1YXRlUGFnZVNpemVBbmRCbGVlZChcbiAgICAgICAgQ3NzUGFnZS5yZXNvbHZlUGFnZVNpemVBbmRCbGVlZChwYWdlUHJvcHNbc2VsZWN0b3JdIGFzIGFueSksXG4gICAgICAgIHRoaXMsXG4gICAgICApO1xuICAgICAgdGhpcy5wYWdlU2hlZXRTaXplW3NlbGVjdG9yXSA9IHtcbiAgICAgICAgd2lkdGg6IHBhZ2VTaXplQW5kQmxlZWQucGFnZVdpZHRoICsgcGFnZVNpemVBbmRCbGVlZC5jcm9wT2Zmc2V0ICogMixcbiAgICAgICAgaGVpZ2h0OiBwYWdlU2l6ZUFuZEJsZWVkLnBhZ2VIZWlnaHQgKyBwYWdlU2l6ZUFuZEJsZWVkLmNyb3BPZmZzZXQgKiAyLFxuICAgICAgfTtcbiAgICB9KTtcbiAgICByZXR1cm4gZnJhbWUucmVzdWx0KCk7XG4gIH1cblxuICBwcml2YXRlIG1hdGNoU3RhcnRQYWdlU2lkZShzaWRlOiBzdHJpbmcpOiBib29sZWFuIHtcbiAgICBjb25zdCBpc1JlY3RvU3RhcnQgPVxuICAgICAgdGhpcy5wYWdlTnVtYmVyT2Zmc2V0ICUgMiA9PSAodGhpcy5pc1ZlcnNvRmlyc3RQYWdlID8gMSA6IDApO1xuICAgIGNvbnN0IGlzTFRSID0gdGhpcy5wYWdlUHJvZ3Jlc3Npb24gPT0gQ29uc3RhbnRzLlBhZ2VQcm9ncmVzc2lvbi5MVFI7XG4gICAgc3dpdGNoIChzaWRlKSB7XG4gICAgICBjYXNlIFwibGVmdFwiOlxuICAgICAgICByZXR1cm4gaXNSZWN0b1N0YXJ0ICE9PSBpc0xUUjtcbiAgICAgIGNhc2UgXCJyaWdodFwiOlxuICAgICAgICByZXR1cm4gaXNSZWN0b1N0YXJ0ID09PSBpc0xUUjtcbiAgICAgIGNhc2UgXCJyZWN0b1wiOlxuICAgICAgICByZXR1cm4gaXNSZWN0b1N0YXJ0O1xuICAgICAgY2FzZSBcInZlcnNvXCI6XG4gICAgICAgIHJldHVybiAhaXNSZWN0b1N0YXJ0O1xuICAgICAgZGVmYXVsdDpcbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuICB9XG5cbiAgLyoqXG4gICAqIEBvdmVycmlkZVxuICAgKi9cbiAgZ2V0U3R5bGVyRm9yRG9jKHhtbGRvYzogWG1sRG9jLlhNTERvY0hvbGRlcik6IENzc1N0eWxlci5BYnN0cmFjdFN0eWxlciB7XG4gICAgbGV0IHN0eWxlciA9IHRoaXMuc3R5bGVyTWFwW3htbGRvYy51cmxdO1xuICAgIGlmICghc3R5bGVyKSB7XG4gICAgICBjb25zdCBzdHlsZSA9IHRoaXMuc3R5bGUuc3RvcmUuZ2V0U3R5bGVGb3JEb2MoeG1sZG9jKTtcblxuICAgICAgLy8gV2UgbmVlZCBhIHNlcGFyYXRlIGNvbnRlbnQsIHNvIHRoYXQgdmFyaWFibGVzIGNhbiBnZXQgcG90ZW50aWFsbHlcbiAgICAgIC8vIGRpZmZlcmVudCB2YWx1ZXMuXG4gICAgICBjb25zdCBjb250ZXh0ID0gbmV3IEV4cHJzLkNvbnRleHQoXG4gICAgICAgIHN0eWxlLnJvb3RTY29wZSxcbiAgICAgICAgdGhpcy5wYWdlV2lkdGgoKSxcbiAgICAgICAgdGhpcy5wYWdlSGVpZ2h0KCksXG4gICAgICAgIHRoaXMuaW5pdGlhbEZvbnRTaXplLFxuICAgICAgKTtcbiAgICAgIGNvbnN0IGNvdW50ZXJMaXN0ZW5lciA9IHRoaXMuY291bnRlclN0b3JlLmNyZWF0ZUNvdW50ZXJMaXN0ZW5lcihcbiAgICAgICAgeG1sZG9jLnVybCxcbiAgICAgICk7XG4gICAgICBjb25zdCBjb3VudGVyUmVzb2x2ZXIgPSB0aGlzLmNvdW50ZXJTdG9yZS5jcmVhdGVDb3VudGVyUmVzb2x2ZXIoXG4gICAgICAgIHhtbGRvYy51cmwsXG4gICAgICAgIHN0eWxlLnJvb3RTY29wZSxcbiAgICAgICAgc3R5bGUucGFnZVNjb3BlLFxuICAgICAgKTtcbiAgICAgIHN0eWxlciA9IG5ldyBDc3NTdHlsZXIuU3R5bGVyKFxuICAgICAgICB4bWxkb2MsXG4gICAgICAgIHN0eWxlLmNhc2NhZGUsXG4gICAgICAgIHN0eWxlLnJvb3RTY29wZSxcbiAgICAgICAgY29udGV4dCxcbiAgICAgICAgdGhpcy5wcmltYXJ5Rmxvd3MsXG4gICAgICAgIHN0eWxlLnZhbGlkYXRvclNldCxcbiAgICAgICAgY291bnRlckxpc3RlbmVyLFxuICAgICAgICBjb3VudGVyUmVzb2x2ZXIsXG4gICAgICApO1xuICAgICAgdGhpcy5zdHlsZXJNYXBbeG1sZG9jLnVybF0gPSBzdHlsZXI7XG4gICAgfVxuICAgIHJldHVybiBzdHlsZXI7XG4gIH1cblxuICAvKipcbiAgICogQG92ZXJyaWRlXG4gICAqL1xuICByZWdpc3Rlckluc3RhbmNlKGtleTogc3RyaW5nLCBpbnN0YW5jZTogUGFnZU1hc3Rlci5QYWdlQm94SW5zdGFuY2UpOiB2b2lkIHtcbiAgICB0aGlzLnBhZ2VCb3hJbnN0YW5jZXNba2V5XSA9IGluc3RhbmNlO1xuICB9XG5cbiAgLyoqXG4gICAqIEBvdmVycmlkZVxuICAgKi9cbiAgbG9va3VwSW5zdGFuY2Uoa2V5OiBzdHJpbmcpOiBQYWdlTWFzdGVyLlBhZ2VCb3hJbnN0YW5jZSB7XG4gICAgcmV0dXJuIHRoaXMucGFnZUJveEluc3RhbmNlc1trZXldO1xuICB9XG5cbiAgLyoqXG4gICAqIEBvdmVycmlkZVxuICAgKi9cbiAgZW5jb3VudGVyZWRGbG93Q2h1bmsoZmxvd0NodW5rOiBWdHJlZS5GbG93Q2h1bmssIGZsb3c6IFZ0cmVlLkZsb3cpOiBhbnkge1xuICAgIGNvbnN0IGNwID0gdGhpcy5jdXJyZW50TGF5b3V0UG9zaXRpb247XG4gICAgaWYgKGNwKSB7XG4gICAgICBpZiAoIWNwLmZsb3dzW2Zsb3dDaHVuay5mbG93TmFtZV0pIHtcbiAgICAgICAgY3AuZmxvd3NbZmxvd0NodW5rLmZsb3dOYW1lXSA9IGZsb3c7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBmbG93ID0gY3AuZmxvd3NbZmxvd0NodW5rLmZsb3dOYW1lXTtcbiAgICAgIH1cbiAgICAgIGxldCBmbG93UG9zaXRpb24gPSBjcC5mbG93UG9zaXRpb25zW2Zsb3dDaHVuay5mbG93TmFtZV07XG4gICAgICBpZiAoIWZsb3dQb3NpdGlvbikge1xuICAgICAgICBmbG93UG9zaXRpb24gPSBuZXcgVnRyZWUuRmxvd1Bvc2l0aW9uKCk7XG4gICAgICAgIGNwLmZsb3dQb3NpdGlvbnNbZmxvd0NodW5rLmZsb3dOYW1lXSA9IGZsb3dQb3NpdGlvbjtcbiAgICAgIH1cbiAgICAgIGNvbnN0IG5vZGVQb3NpdGlvbiA9IFZ0cmVlLm5ld05vZGVQb3NpdGlvbkZyb21Ob2RlKGZsb3dDaHVuay5lbGVtZW50KTtcbiAgICAgIGNvbnN0IGNodW5rUG9zaXRpb24gPSBuZXcgVnRyZWUuQ2h1bmtQb3NpdGlvbihub2RlUG9zaXRpb24pO1xuICAgICAgY29uc3QgZmxvd0NodW5rUG9zaXRpb24gPSBuZXcgVnRyZWUuRmxvd0NodW5rUG9zaXRpb24oXG4gICAgICAgIGNodW5rUG9zaXRpb24sXG4gICAgICAgIGZsb3dDaHVuayxcbiAgICAgICk7XG4gICAgICBmbG93UG9zaXRpb24ucG9zaXRpb25zLnB1c2goZmxvd0NodW5rUG9zaXRpb24pO1xuICAgIH1cbiAgfVxuXG4gIGdldENvbnN1bWVkT2Zmc2V0KGZsb3dQb3NpdGlvbjogVnRyZWUuRmxvd1Bvc2l0aW9uKTogbnVtYmVyIHtcbiAgICBsZXQgb2Zmc2V0ID0gTnVtYmVyLlBPU0lUSVZFX0lORklOSVRZO1xuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgZmxvd1Bvc2l0aW9uLnBvc2l0aW9ucy5sZW5ndGg7IGkrKykge1xuICAgICAgY29uc3QgcG9zID0gZmxvd1Bvc2l0aW9uLnBvc2l0aW9uc1tpXS5jaHVua1Bvc2l0aW9uLnByaW1hcnk7XG4gICAgICBsZXQgbm9kZSA9IHBvcy5zdGVwc1swXS5ub2RlO1xuICAgICAgbGV0IG9mZnNldEluTm9kZSA9IHBvcy5vZmZzZXRJbk5vZGU7XG4gICAgICBsZXQgYWZ0ZXIgPSBwb3MuYWZ0ZXI7XG4gICAgICBsZXQgayA9IDA7XG4gICAgICB3aGlsZSAobm9kZS5vd25lckRvY3VtZW50ICE9IHRoaXMueG1sZG9jLmRvY3VtZW50KSB7XG4gICAgICAgIGsrKztcbiAgICAgICAgbm9kZSA9IHBvcy5zdGVwc1trXS5ub2RlO1xuICAgICAgICBhZnRlciA9IGZhbHNlO1xuICAgICAgICBvZmZzZXRJbk5vZGUgPSAwO1xuICAgICAgfVxuICAgICAgY29uc3QgY2h1bmtPZmZzZXQgPSB0aGlzLnhtbGRvYy5nZXROb2RlT2Zmc2V0KG5vZGUsIG9mZnNldEluTm9kZSwgYWZ0ZXIpO1xuICAgICAgaWYgKGNodW5rT2Zmc2V0IDwgb2Zmc2V0KSB7XG4gICAgICAgIG9mZnNldCA9IGNodW5rT2Zmc2V0O1xuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gb2Zmc2V0O1xuICB9XG5cbiAgLyoqXG4gICAqIEBwYXJhbSBub0xvb2tBaGVhZCBEbyBub3QgbG9vayBhaGVhZCBlbGVtZW50cyB0aGF0IGFyZSBub3Qgc3R5bGVkIHlldFxuICAgKiBAcmV0dXJuIGRvY3VtZW50IG9mZnNldCBvZiB0aGUgZ2l2ZW4gbGF5b3V0UG9zaXRpb25cbiAgICovXG4gIGdldFBvc2l0aW9uKFxuICAgIGxheW91dFBvc2l0aW9uPzogVnRyZWUuTGF5b3V0UG9zaXRpb24sXG4gICAgbm9Mb29rQWhlYWQ/OiBib29sZWFuLFxuICApOiBudW1iZXIge1xuICAgIGlmICghbGF5b3V0UG9zaXRpb24pIHtcbiAgICAgIHJldHVybiAwO1xuICAgIH1cbiAgICBsZXQgY3VycmVudFBvc2l0aW9uID0gTnVtYmVyLlBPU0lUSVZFX0lORklOSVRZO1xuICAgIGZvciAoY29uc3QgZmxvd05hbWUgaW4gdGhpcy5wcmltYXJ5Rmxvd3MpIHtcbiAgICAgIGxldCBmbG93UG9zaXRpb24gPSBsYXlvdXRQb3NpdGlvbi5mbG93UG9zaXRpb25zW2Zsb3dOYW1lXTtcbiAgICAgIGlmIChcbiAgICAgICAgIW5vTG9va0FoZWFkICYmXG4gICAgICAgICghZmxvd1Bvc2l0aW9uIHx8IGZsb3dQb3NpdGlvbi5wb3NpdGlvbnMubGVuZ3RoID09IDApICYmXG4gICAgICAgIHRoaXMuY3VycmVudExheW91dFBvc2l0aW9uXG4gICAgICApIHtcbiAgICAgICAgdGhpcy5zdHlsZXIuc3R5bGVVbnRpbEZsb3dJc1JlYWNoZWQoZmxvd05hbWUpO1xuICAgICAgICBmbG93UG9zaXRpb24gPSB0aGlzLmN1cnJlbnRMYXlvdXRQb3NpdGlvbi5mbG93UG9zaXRpb25zW2Zsb3dOYW1lXTtcbiAgICAgICAgaWYgKGxheW91dFBvc2l0aW9uICE9IHRoaXMuY3VycmVudExheW91dFBvc2l0aW9uKSB7XG4gICAgICAgICAgaWYgKGZsb3dQb3NpdGlvbikge1xuICAgICAgICAgICAgZmxvd1Bvc2l0aW9uID0gZmxvd1Bvc2l0aW9uLmNsb25lKCk7XG4gICAgICAgICAgICBsYXlvdXRQb3NpdGlvbi5mbG93UG9zaXRpb25zW2Zsb3dOYW1lXSA9IGZsb3dQb3NpdGlvbjtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIGlmIChmbG93UG9zaXRpb24pIHtcbiAgICAgICAgY29uc3QgY29uc3VtZWRPZmZzZXQgPSB0aGlzLmdldENvbnN1bWVkT2Zmc2V0KGZsb3dQb3NpdGlvbik7XG4gICAgICAgIGlmIChjb25zdW1lZE9mZnNldCA8IGN1cnJlbnRQb3NpdGlvbikge1xuICAgICAgICAgIGN1cnJlbnRQb3NpdGlvbiA9IGNvbnN1bWVkT2Zmc2V0O1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiBjdXJyZW50UG9zaXRpb247XG4gIH1cblxuICBkdW1wTG9jYXRpb24ocG9zaXRpb24pIHtcbiAgICBMb2dnaW5nLmxvZ2dlci5kZWJ1ZyhcIkxvY2F0aW9uIC0gcGFnZVwiLCB0aGlzLmN1cnJlbnRMYXlvdXRQb3NpdGlvbi5wYWdlKTtcbiAgICBMb2dnaW5nLmxvZ2dlci5kZWJ1ZyhcIiAgY3VycmVudDpcIiwgcG9zaXRpb24pO1xuICAgIExvZ2dpbmcubG9nZ2VyLmRlYnVnKFwiICBsb29rdXA6XCIsIHRoaXMubG9va3VwT2Zmc2V0KTtcbiAgICBmb3IgKGNvbnN0IGZsb3dOYW1lIGluIHRoaXMuY3VycmVudExheW91dFBvc2l0aW9uLmZsb3dQb3NpdGlvbnMpIHtcbiAgICAgIGNvbnN0IGZsb3dQb3NpdGlvbiA9IHRoaXMuY3VycmVudExheW91dFBvc2l0aW9uLmZsb3dQb3NpdGlvbnNbZmxvd05hbWVdO1xuICAgICAgZm9yIChjb25zdCBwIG9mIGZsb3dQb3NpdGlvbi5wb3NpdGlvbnMpIHtcbiAgICAgICAgTG9nZ2luZy5sb2dnZXIuZGVidWcoXG4gICAgICAgICAgXCIgIENodW5rXCIsXG4gICAgICAgICAgYCR7Zmxvd05hbWV9OmAsXG4gICAgICAgICAgcC5mbG93Q2h1bmsuc3RhcnRPZmZzZXQsXG4gICAgICAgICk7XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgbWF0Y2hQYWdlU2lkZShzaWRlOiBzdHJpbmcpOiBib29sZWFuIHtcbiAgICBzd2l0Y2ggKHNpZGUpIHtcbiAgICAgIGNhc2UgXCJsZWZ0XCI6XG4gICAgICBjYXNlIFwicmlnaHRcIjpcbiAgICAgIGNhc2UgXCJyZWN0b1wiOlxuICAgICAgY2FzZSBcInZlcnNvXCI6XG4gICAgICAgIHJldHVybiBuZXcgRXhwcnMuTmFtZWQodGhpcy5zdHlsZS5wYWdlU2NvcGUsIGAke3NpZGV9LXBhZ2VgKS5ldmFsdWF0ZShcbiAgICAgICAgICB0aGlzLFxuICAgICAgICApIGFzIGJvb2xlYW47XG4gICAgICBkZWZhdWx0OlxuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG4gIH1cblxuICB1cGRhdGVTdGFydFNpZGUobGF5b3V0UG9zaXRpb246IFZ0cmVlLkxheW91dFBvc2l0aW9uKSB7XG4gICAgZm9yIChjb25zdCBuYW1lIGluIGxheW91dFBvc2l0aW9uLmZsb3dQb3NpdGlvbnMpIHtcbiAgICAgIGNvbnN0IGZsb3dQb3MgPSBsYXlvdXRQb3NpdGlvbi5mbG93UG9zaXRpb25zW25hbWVdO1xuICAgICAgaWYgKGZsb3dQb3MgJiYgZmxvd1Bvcy5wb3NpdGlvbnMubGVuZ3RoID4gMCkge1xuICAgICAgICBjb25zdCBmbG93Q2h1bmsgPSBmbG93UG9zLnBvc2l0aW9uc1swXS5mbG93Q2h1bms7XG4gICAgICAgIGlmICh0aGlzLmdldENvbnN1bWVkT2Zmc2V0KGZsb3dQb3MpID09PSBmbG93Q2h1bmsuc3RhcnRPZmZzZXQpIHtcbiAgICAgICAgICBjb25zdCBmbG93Q2h1bmtCcmVha0JlZm9yZSA9XG4gICAgICAgICAgICBmbG93UG9zLnBvc2l0aW9uc1swXS5mbG93Q2h1bmsuYnJlYWtCZWZvcmU7XG4gICAgICAgICAgY29uc3QgZmxvd0JyZWFrQWZ0ZXIgPSBCcmVhay5zdGFydFNpZGVWYWx1ZVRvQnJlYWtWYWx1ZShcbiAgICAgICAgICAgIGZsb3dQb3Muc3RhcnRTaWRlLFxuICAgICAgICAgICk7XG4gICAgICAgICAgZmxvd1Bvcy5zdGFydFNpZGUgPSBCcmVhay5icmVha1ZhbHVlVG9TdGFydFNpZGVWYWx1ZShcbiAgICAgICAgICAgIEJyZWFrLnJlc29sdmVFZmZlY3RpdmVCcmVha1ZhbHVlKFxuICAgICAgICAgICAgICBmbG93QnJlYWtBZnRlcixcbiAgICAgICAgICAgICAgZmxvd0NodW5rQnJlYWtCZWZvcmUsXG4gICAgICAgICAgICApLFxuICAgICAgICAgICk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICAvKipcbiAgICogQHBhcmFtIGNhc2NhZGVkUGFnZVN0eWxlIENhc2NhZGVkIHBhZ2Ugc3R5bGUgc3BlY2lmaWVkIGluIHBhZ2UgY29udGV4dFxuICAgKi9cbiAgc2VsZWN0UGFnZU1hc3RlcihcbiAgICBjYXNjYWRlZFBhZ2VTdHlsZTogQ3NzQ2FzY2FkZS5FbGVtZW50U3R5bGUsXG4gICk6IFBhZ2VNYXN0ZXIuUGFnZU1hc3Rlckluc3RhbmNlIHtcbiAgICBjb25zdCBjcCA9IHRoaXMuY3VycmVudExheW91dFBvc2l0aW9uO1xuXG4gICAgLy8gMy41LiBQYWdlIExheW91dCBQcm9jZXNzaW5nIE1vZGVsXG4gICAgLy8gMS4gRGV0ZXJtaW5lIGN1cnJlbnQgcG9zaXRpb24gaW4gdGhlIGRvY3VtZW50OiBGaW5kIHRoZSBtaW5pbWFsXG4gICAgLy8gY29uc3VtZWQtb2Zmc2V0IGZvciBhbGwgZWxlbWVudHMgbm90IGZ1bGx5LWNvbnN1bWVkIGluIGVhY2ggcHJpbWFyeSBmbG93LlxuICAgIC8vIEN1cnJlbnQgcG9zaXRpb24gaXMgbWF4aW11bSBvZiB0aGUgcmVzdWx0cyBhbW9uZyBhbGwgcHJpbWFyeSBmbG93cy5cbiAgICBjb25zdCBjdXJyZW50UG9zaXRpb24gPSB0aGlzLmdldFBvc2l0aW9uKGNwKTtcbiAgICBpZiAoY3VycmVudFBvc2l0aW9uID09IE51bWJlci5QT1NJVElWRV9JTkZJTklUWSkge1xuICAgICAgLy8gZW5kIG9mIHByaW1hcnkgY29udGVudCBpcyByZWFjaGVkXG4gICAgICByZXR1cm4gbnVsbDtcbiAgICB9XG5cbiAgICAvLyAyLiBQYWdlIG1hc3RlciBzZWxlY3Rpb246IGZvciBlYWNoIHBhZ2UgbWFzdGVyOlxuICAgIGNvbnN0IHBhZ2VNYXN0ZXJzID0gdGhpcy5yb290UGFnZUJveEluc3RhbmNlXG4gICAgICAuY2hpbGRyZW4gYXMgUGFnZU1hc3Rlci5QYWdlTWFzdGVySW5zdGFuY2VbXTtcbiAgICBsZXQgcGFnZU1hc3RlcjogUGFnZU1hc3Rlci5QYWdlTWFzdGVySW5zdGFuY2U7XG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCBwYWdlTWFzdGVycy5sZW5ndGg7IGkrKykge1xuICAgICAgcGFnZU1hc3RlciA9IHBhZ2VNYXN0ZXJzW2ldO1xuXG4gICAgICAvLyBTa2lwIGEgcGFnZSBtYXN0ZXIgZ2VuZXJhdGVkIGZvciBAcGFnZSBydWxlc1xuICAgICAgaWYgKHBhZ2VNYXN0ZXIucGFnZUJveC5wc2V1ZG9OYW1lID09PSBDc3NQYWdlLnBhZ2VSdWxlTWFzdGVyUHNldWRvTmFtZSkge1xuICAgICAgICBjb250aW51ZTtcbiAgICAgIH1cbiAgICAgIGxldCBjb2VmZiA9IDE7XG5cbiAgICAgIC8vIEEuIENhbGN1bGF0ZSBsb29rdXAgcG9zaXRpb24gdXNpbmcgY3VycmVudCBwb3NpdGlvbiBhbmQgdXRpbGl6YXRpb25cbiAgICAgIC8vIChzZWUgLWVwdWJ4LXV0aWxpemF0aW9uIHByb3BlcnR5KVxuICAgICAgY29uc3QgdXRpbGl6YXRpb24gPSBwYWdlTWFzdGVyLmdldFByb3AodGhpcywgXCJ1dGlsaXphdGlvblwiKTtcbiAgICAgIGlmICh1dGlsaXphdGlvbiAmJiB1dGlsaXphdGlvbi5pc051bSgpKSB7XG4gICAgICAgIGNvZWZmID0gKHV0aWxpemF0aW9uIGFzIENzcy5OdW0pLm51bTtcbiAgICAgIH1cbiAgICAgIGNvbnN0IGVtID0gdGhpcy5xdWVyeVVuaXRTaXplKFwiZW1cIiwgZmFsc2UpO1xuICAgICAgY29uc3QgcGFnZUFyZWEgPSB0aGlzLnBhZ2VXaWR0aCgpICogdGhpcy5wYWdlSGVpZ2h0KCk7XG4gICAgICBjb25zdCBsb29rdXAgPSBNYXRoLmNlaWwoKGNvZWZmICogcGFnZUFyZWEpIC8gKGVtICogZW0pKTtcblxuICAgICAgLy8gQi4gRGV0ZXJtaW5lIGVsZW1lbnQgZWxpZ2liaWxpdHkuIEVhY2ggZWxlbWVudCBpbiBhIGZsb3cgaXMgY29uc2lkZXJlZFxuICAgICAgLy8gZWxpZ2libGUgaWYgaXQgaXMgaXMgbm90IG1hcmtlZCBhcyBmdWxseSBjb25zdW1lZCBhbmQgaXQgY29tZXMgaW4gdGhlXG4gICAgICAvLyBkb2N1bWVudCBiZWZvcmUgdGhlIGxvb2t1cCBwb3NpdGlvbi4gRmVlZCBsb29rdXBPZmZzZXQgYW5kIGZsb3dcbiAgICAgIC8vIGF2YWlsYWJpbGl0eSBpbnRvIHRoZSBjb250ZXh0XG4gICAgICB0aGlzLmxvb2t1cE9mZnNldCA9IHRoaXMuc3R5bGVyLnN0eWxlVW50aWwoY3VycmVudFBvc2l0aW9uLCBsb29rdXApO1xuICAgICAgQXNzZXJ0cy5hc3NlcnQoY3ApO1xuICAgICAgdGhpcy51cGRhdGVTdGFydFNpZGUoY3ApO1xuXG4gICAgICAvLyB1cGRhdGUgbGF5b3V0UG9zaXRpb25BdFBhZ2VTdGFydCBzaW5jZSBzdGFydFNpZGUgb2YgRmxvd0NodW5rcyBtYXkgYmVcbiAgICAgIC8vIHVwZGF0ZWRcbiAgICAgIHRoaXMubGF5b3V0UG9zaXRpb25BdFBhZ2VTdGFydCA9IGNwLmNsb25lKCk7XG4gICAgICB0aGlzLmluaXRMaW5nZXJpbmcoKTtcbiAgICAgIHRoaXMuY2xlYXJTY29wZSh0aGlzLnN0eWxlLnBhZ2VTY29wZSk7XG5cbiAgICAgIC8vIEMuIERldGVybWluZSBjb250ZW50IGF2YWlsYWJpbGl0eS4gRmxvdyBoYXMgY29udGVudCBhdmFpbGFibGUgaWYgaXRcbiAgICAgIC8vIGNvbnRhaW5zIGVsaWdpYmxlIGVsZW1lbnRzLiBELiBEZXRlcm1pbmUgaWYgcGFnZSBtYXN0ZXIgaXMgZW5hYmxlZFxuICAgICAgLy8gdXNpbmcgcnVsZXMgaW4gU2VjdGlvbiAzLjQuN1xuICAgICAgY29uc3QgZW5hYmxlZCA9IHBhZ2VNYXN0ZXIuZ2V0UHJvcCh0aGlzLCBcImVuYWJsZWRcIik7XG5cbiAgICAgIC8vIEUuIEZpcnN0IGVuYWJsZWQgcGFnZSBtYXN0ZXIgaXMgdXNlZCBmb3IgdGhlIG5leHQgcGFnZVxuICAgICAgaWYgKCFlbmFibGVkIHx8IGVuYWJsZWQgPT09IENzcy5pZGVudC5fdHJ1ZSkge1xuICAgICAgICBpZiAoVklWTElPU1RZTEVfREVCVUcpIHtcbiAgICAgICAgICB0aGlzLmR1bXBMb2NhdGlvbihjdXJyZW50UG9zaXRpb24pO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gVGhlIGJsYW5rIHBhZ2UgY2F1c2VkIGJ5IGEgc3ByZWFkIGJyZWFrIGJldHdlZW4gdHdvIGRvY3VtZW50c1xuICAgICAgICAvLyBzaG91bGQgaGF2ZSBubyBtYXJnaW4gYm94IGNvbnRlbnQgKGlzc3VlICM2NjYpXG4gICAgICAgIGlmIChjcC5wYWdlID09PSAxICYmIHRoaXMuYmxhbmtQYWdlQXRTdGFydCkge1xuICAgICAgICAgIHBhZ2VNYXN0ZXIuc3R5bGUgPSB7fTsgLy8gY2xlYXIgcm9vdCBiYWNrZ3JvdW5kLWNvbG9yL2ltYWdlXG4gICAgICAgICAgY2FzY2FkZWRQYWdlU3R5bGUgPSB7fTsgLy8gY2xlYXIgbWFyZ2luIGJveGVzXG4gICAgICAgICAgLy8gVE9ETzogc3VwcG9ydCB0aGUgOmJsYW5rIHBhZ2Ugc2VsZWN0b3JcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIEFwcGx5IEBwYWdlIHJ1bGVzXG4gICAgICAgIHJldHVybiB0aGlzLnBhZ2VNYW5hZ2VyLmdldFBhZ2VSdWxlUGFnZU1hc3RlcihcbiAgICAgICAgICBwYWdlTWFzdGVyLFxuICAgICAgICAgIGNhc2NhZGVkUGFnZVN0eWxlLFxuICAgICAgICApO1xuICAgICAgfVxuICAgIH1cbiAgICB0aHJvdyBuZXcgRXJyb3IoXCJObyBlbmFibGVkIHBhZ2UgbWFzdGVyc1wiKTtcbiAgfVxuXG4gIGZsb3dDaHVua0lzQWZ0ZXJQYXJlbnRGbG93Rm9yY2VkQnJlYWsoZmxvd0NodW5rOiBWdHJlZS5GbG93Q2h1bmspOiBib29sZWFuIHtcbiAgICBjb25zdCBmbG93cyA9IHRoaXMubGF5b3V0UG9zaXRpb25BdFBhZ2VTdGFydC5mbG93cztcbiAgICBjb25zdCBwYXJlbnRGbG93TmFtZSA9IGZsb3dzW2Zsb3dDaHVuay5mbG93TmFtZV0ucGFyZW50Rmxvd05hbWU7XG4gICAgaWYgKHBhcmVudEZsb3dOYW1lKSB7XG4gICAgICBjb25zdCBzdGFydE9mZnNldCA9IGZsb3dDaHVuay5zdGFydE9mZnNldDtcbiAgICAgIGNvbnN0IGZvcmNlZEJyZWFrT2Zmc2V0cyA9IGZsb3dzW3BhcmVudEZsb3dOYW1lXS5mb3JjZWRCcmVha09mZnNldHM7XG4gICAgICBpZiAoIWZvcmNlZEJyZWFrT2Zmc2V0cy5sZW5ndGggfHwgc3RhcnRPZmZzZXQgPCBmb3JjZWRCcmVha09mZnNldHNbMF0pIHtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgfVxuICAgICAgY29uc3QgYnJlYWtPZmZzZXRCZWZvcmVTdGFydEluZGV4ID1cbiAgICAgICAgQmFzZS5iaW5hcnlTZWFyY2goXG4gICAgICAgICAgZm9yY2VkQnJlYWtPZmZzZXRzLmxlbmd0aCxcbiAgICAgICAgICAoaSkgPT4gZm9yY2VkQnJlYWtPZmZzZXRzW2ldID4gc3RhcnRPZmZzZXQsXG4gICAgICAgICkgLSAxO1xuICAgICAgY29uc3QgYnJlYWtPZmZzZXRCZWZvcmVTdGFydCA9XG4gICAgICAgIGZvcmNlZEJyZWFrT2Zmc2V0c1ticmVha09mZnNldEJlZm9yZVN0YXJ0SW5kZXhdO1xuICAgICAgY29uc3QgcGFyZW50Rmxvd1Bvc2l0aW9uID0gdGhpcy5sYXlvdXRQb3NpdGlvbkF0UGFnZVN0YXJ0LmZsb3dQb3NpdGlvbnNbXG4gICAgICAgIHBhcmVudEZsb3dOYW1lXG4gICAgICBdO1xuICAgICAgY29uc3QgcGFyZW50U3RhcnRPZmZzZXQgPSB0aGlzLmdldENvbnN1bWVkT2Zmc2V0KHBhcmVudEZsb3dQb3NpdGlvbik7XG4gICAgICBpZiAoYnJlYWtPZmZzZXRCZWZvcmVTdGFydCA8IHBhcmVudFN0YXJ0T2Zmc2V0KSB7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgIH1cbiAgICAgIGlmIChwYXJlbnRTdGFydE9mZnNldCA8IGJyZWFrT2Zmc2V0QmVmb3JlU3RhcnQpIHtcbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICB9XG5cbiAgICAgIC8vIFNwZWNpYWwgY2FzZTogcGFyZW50U3RhcnRPZmZzZXQgPT09IGJyZWFrT2Zmc2V0QmVmb3JlU3RhcnRcbiAgICAgIC8vIEluIHRoaXMgY2FzZSwgdGhlIGZsb3dDaHVuayBjYW4gYmUgdXNlZCBpZiB0aGUgc3RhcnQgc2lkZSBvZiB0aGUgcGFyZW50XG4gICAgICAvLyBmbG93IG1hdGNoZXMgdGhlIGN1cnJlbnQgcGFnZSBzaWRlLlxuICAgICAgcmV0dXJuICF0aGlzLm1hdGNoUGFnZVNpZGUocGFyZW50Rmxvd1Bvc2l0aW9uLnN0YXJ0U2lkZSk7XG4gICAgfVxuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuXG4gIHNldEZvcm1hdHRpbmdDb250ZXh0VG9Db2x1bW4oY29sdW1uOiBMYXlvdXRUeXBlLkNvbHVtbiwgZmxvd05hbWU6IHN0cmluZykge1xuICAgIGNvbnN0IGZsb3cgPSB0aGlzLmN1cnJlbnRMYXlvdXRQb3NpdGlvbi5mbG93c1tmbG93TmFtZV07XG4gICAgaWYgKCFmbG93LmZvcm1hdHRpbmdDb250ZXh0KSB7XG4gICAgICBmbG93LmZvcm1hdHRpbmdDb250ZXh0ID0gbmV3IExheW91dFByb2Nlc3Nvci5CbG9ja0Zvcm1hdHRpbmdDb250ZXh0KG51bGwpO1xuICAgIH1cbiAgICBjb2x1bW4uZmxvd1Jvb3RGb3JtYXR0aW5nQ29udGV4dCA9IGZsb3cuZm9ybWF0dGluZ0NvbnRleHQ7XG4gIH1cblxuICBsYXlvdXREZWZlcnJlZFBhZ2VGbG9hdHMoY29sdW1uOiBMYXlvdXRUeXBlLkNvbHVtbik6IFRhc2suUmVzdWx0PGJvb2xlYW4+IHtcbiAgICBjb25zdCBwYWdlRmxvYXRMYXlvdXRDb250ZXh0ID0gY29sdW1uLnBhZ2VGbG9hdExheW91dENvbnRleHQ7XG4gICAgY29uc3QgZGVmZXJyZWRGbG9hdHMgPSBwYWdlRmxvYXRMYXlvdXRDb250ZXh0LmdldERlZmVycmVkUGFnZUZsb2F0Q29udGludWF0aW9ucygpO1xuXG4gICAgLy8gRml4IGZvciBpc3N1ZSAjNjgxXG4gICAgLy8gUHJldmVudCBkZWZlcnJlZCBwYWdlIGZsb2F0cyBmcm9tIGFwcGVhcmluZyBpbiB0aGUgcHJlY2VkaW5nIHBhZ2VzLFxuICAgIC8vIGUuZy4sIGR1cmluZyByZS1sYXlvdXQgdGhlIFRPQyBwYWdlIHdpdGggdGFyZ2V0LWNvdW50ZXIoKSByZWZlcmVuY2luZ1xuICAgIC8vIGxhdGVyIHNlY3Rpb25zIGNvbnRhaW5pbmcgcGFnZSBmbG9hdHMuXG4gICAgaWYgKFxuICAgICAgZGVmZXJyZWRGbG9hdHMubGVuZ3RoICYmXG4gICAgICBkZWZlcnJlZEZsb2F0c1swXS5mbG9hdC5mbG9hdFJlZmVyZW5jZSA9PT0gXCJwYWdlXCJcbiAgICApIHtcbiAgICAgIGNvbnN0IGRlZmVycmVkRmxvYXROb2RlID1cbiAgICAgICAgZGVmZXJyZWRGbG9hdHNbMF0uZmxvYXQubm9kZVBvc2l0aW9uLnN0ZXBzWzBdLm5vZGU7XG4gICAgICBjb25zdCBkZWZlcnJlZEZsb2F0T2Zmc2V0ID1cbiAgICAgICAgZGVmZXJyZWRGbG9hdE5vZGUgJiZcbiAgICAgICAgdGhpcy54bWxkb2MuZ2V0Tm9kZU9mZnNldChkZWZlcnJlZEZsb2F0Tm9kZSwgMCwgZmFsc2UpO1xuICAgICAgY29uc3QgcGFnZVN0YXJ0UG9zID0gdGhpcy5sYXlvdXRQb3NpdGlvbkF0UGFnZVN0YXJ0LmZsb3dQb3NpdGlvbnMuYm9keTtcbiAgICAgIGNvbnN0IHBhZ2VTdGFydE9mZnNldCA9XG4gICAgICAgIHBhZ2VTdGFydFBvcyAmJiB0aGlzLmdldENvbnN1bWVkT2Zmc2V0KHBhZ2VTdGFydFBvcyk7XG4gICAgICBpZiAoXG4gICAgICAgIGRlZmVycmVkRmxvYXRPZmZzZXQgIT0gbnVsbCAmJlxuICAgICAgICBwYWdlU3RhcnRPZmZzZXQgIT0gbnVsbCAmJlxuICAgICAgICBkZWZlcnJlZEZsb2F0T2Zmc2V0ID4gcGFnZVN0YXJ0T2Zmc2V0XG4gICAgICApIHtcbiAgICAgICAgcmV0dXJuIFRhc2submV3UmVzdWx0KHRydWUpO1xuICAgICAgfVxuICAgIH1cblxuICAgIGNvbnN0IGZyYW1lID0gVGFzay5uZXdGcmFtZTxib29sZWFuPihcImxheW91dERlZmVycmVkUGFnZUZsb2F0c1wiKTtcbiAgICBsZXQgaW52YWxpZGF0ZWQgPSBmYWxzZTtcbiAgICBsZXQgaSA9IDA7XG4gICAgZnJhbWVcbiAgICAgIC5sb29wV2l0aEZyYW1lKChsb29wRnJhbWUpID0+IHtcbiAgICAgICAgaWYgKGkgPT09IGRlZmVycmVkRmxvYXRzLmxlbmd0aCkge1xuICAgICAgICAgIGxvb3BGcmFtZS5icmVha0xvb3AoKTtcbiAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgY29udGludWF0aW9uID0gZGVmZXJyZWRGbG9hdHNbaSsrXTtcbiAgICAgICAgY29uc3QgZmxvYXQgPSBjb250aW51YXRpb24uZmxvYXQ7XG4gICAgICAgIGNvbnN0IHN0cmF0ZWd5ID0gbmV3IFBhZ2VGbG9hdHMuUGFnZUZsb2F0TGF5b3V0U3RyYXRlZ3lSZXNvbHZlcigpLmZpbmRCeUZsb2F0KFxuICAgICAgICAgIGZsb2F0LFxuICAgICAgICApO1xuICAgICAgICBjb25zdCBwYWdlRmxvYXRGcmFnbWVudCA9IHN0cmF0ZWd5LmZpbmRQYWdlRmxvYXRGcmFnbWVudChcbiAgICAgICAgICBmbG9hdCxcbiAgICAgICAgICBwYWdlRmxvYXRMYXlvdXRDb250ZXh0LFxuICAgICAgICApO1xuICAgICAgICBpZiAocGFnZUZsb2F0RnJhZ21lbnQgJiYgcGFnZUZsb2F0RnJhZ21lbnQuaGFzRmxvYXQoZmxvYXQpKSB7XG4gICAgICAgICAgbG9vcEZyYW1lLmNvbnRpbnVlTG9vcCgpO1xuICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfSBlbHNlIGlmIChcbiAgICAgICAgICBwYWdlRmxvYXRMYXlvdXRDb250ZXh0LmlzRm9yYmlkZGVuKGZsb2F0KSB8fFxuICAgICAgICAgIHBhZ2VGbG9hdExheW91dENvbnRleHQuaGFzUHJlY2VkaW5nRmxvYXRzRGVmZXJyZWRUb05leHQoZmxvYXQpXG4gICAgICAgICkge1xuICAgICAgICAgIHBhZ2VGbG9hdExheW91dENvbnRleHQuZGVmZXJQYWdlRmxvYXQoY29udGludWF0aW9uKTtcbiAgICAgICAgICBsb29wRnJhbWUuYnJlYWtMb29wKCk7XG4gICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIGNvbHVtblxuICAgICAgICAgIC5sYXlvdXRQYWdlRmxvYXRJbm5lcihjb250aW51YXRpb24sIHN0cmF0ZWd5LCBudWxsLCBwYWdlRmxvYXRGcmFnbWVudClcbiAgICAgICAgICAudGhlbigoc3VjY2VzcykgPT4ge1xuICAgICAgICAgICAgaWYgKCFzdWNjZXNzKSB7XG4gICAgICAgICAgICAgIGxvb3BGcmFtZS5icmVha0xvb3AoKTtcbiAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY29uc3QgcGFyZW50SW52YWxpZGF0ZWQgPSBwYWdlRmxvYXRMYXlvdXRDb250ZXh0LnBhcmVudC5pc0ludmFsaWRhdGVkKCk7XG4gICAgICAgICAgICBpZiAocGFyZW50SW52YWxpZGF0ZWQpIHtcbiAgICAgICAgICAgICAgbG9vcEZyYW1lLmJyZWFrTG9vcCgpO1xuICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICB9IGVsc2UgaWYgKFxuICAgICAgICAgICAgICBwYWdlRmxvYXRMYXlvdXRDb250ZXh0LmlzSW52YWxpZGF0ZWQoKSAmJlxuICAgICAgICAgICAgICAhcGFyZW50SW52YWxpZGF0ZWRcbiAgICAgICAgICAgICkge1xuICAgICAgICAgICAgICBpbnZhbGlkYXRlZCA9IHRydWU7XG4gICAgICAgICAgICAgIHBhZ2VGbG9hdExheW91dENvbnRleHQudmFsaWRhdGUoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGxvb3BGcmFtZS5jb250aW51ZUxvb3AoKTtcbiAgICAgICAgICB9KTtcbiAgICAgIH0pXG4gICAgICAudGhlbigoKSA9PiB7XG4gICAgICAgIGlmIChpbnZhbGlkYXRlZCkge1xuICAgICAgICAgIHBhZ2VGbG9hdExheW91dENvbnRleHQuaW52YWxpZGF0ZSgpO1xuICAgICAgICB9XG4gICAgICAgIGZyYW1lLmZpbmlzaCh0cnVlKTtcbiAgICAgIH0pO1xuICAgIHJldHVybiBmcmFtZS5yZXN1bHQoKTtcbiAgfVxuXG4gIGdldExhc3RBZnRlclBvc2l0aW9uSWZEZWZlcnJlZEZsb2F0c0V4aXN0cyhcbiAgICBjb2x1bW46IExheW91dFR5cGUuQ29sdW1uLFxuICAgIG5ld1Bvc2l0aW9uOiBWdHJlZS5DaHVua1Bvc2l0aW9uIHwgbnVsbCxcbiAgKTogVnRyZWUuQ2h1bmtQb3NpdGlvbiB8IG51bGwge1xuICAgIGNvbnN0IHBhZ2VGbG9hdExheW91dENvbnRleHQgPSBjb2x1bW4ucGFnZUZsb2F0TGF5b3V0Q29udGV4dDtcbiAgICBjb25zdCBkZWZlcnJlZEZsb2F0cyA9IHBhZ2VGbG9hdExheW91dENvbnRleHQuZ2V0UGFnZUZsb2F0Q29udGludWF0aW9uc0RlZmVycmVkVG9OZXh0KCk7XG4gICAgaWYgKGRlZmVycmVkRmxvYXRzLmxlbmd0aCA+IDApIHtcbiAgICAgIGlmIChjb2x1bW4ubGFzdEFmdGVyUG9zaXRpb24pIHtcbiAgICAgICAgbGV0IHJlc3VsdDogVnRyZWUuQ2h1bmtQb3NpdGlvbjtcbiAgICAgICAgaWYgKG5ld1Bvc2l0aW9uKSB7XG4gICAgICAgICAgLy8gTmVlZCBvdmVyZmxvd24gZm9vdG5vdGVzIG93bmVkIGJ5IG5ld1Bvc2l0aW9uXG4gICAgICAgICAgcmVzdWx0ID0gbmV3UG9zaXRpb24uY2xvbmUoKTtcbiAgICAgICAgICByZXN1bHQucHJpbWFyeSA9IGNvbHVtbi5sYXN0QWZ0ZXJQb3NpdGlvbjtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICByZXN1bHQgPSBuZXcgVnRyZWUuQ2h1bmtQb3NpdGlvbihjb2x1bW4ubGFzdEFmdGVyUG9zaXRpb24pO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBBc3NlcnRzLmFzc2VydChcImNvbHVtbi5sYXN0QWZ0ZXJQb3NpdGlvbiA9PT0gbnVsbFwiKTtcbiAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiBudWxsO1xuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAgKiBAcmV0dXJuIGhvbGRpbmcgdHJ1ZVxuICAgKi9cbiAgbGF5b3V0Q29sdW1uKFxuICAgIGNvbHVtbjogTGF5b3V0VHlwZS5Db2x1bW4sXG4gICAgZmxvd05hbWU6IHN0cmluZyxcbiAgKTogVGFzay5SZXN1bHQ8Ym9vbGVhbj4ge1xuICAgIGNvbnN0IGZsb3dQb3NpdGlvbiA9IHRoaXMuY3VycmVudExheW91dFBvc2l0aW9uLmZsb3dQb3NpdGlvbnNbZmxvd05hbWVdO1xuICAgIGlmICghZmxvd1Bvc2l0aW9uIHx8ICF0aGlzLm1hdGNoUGFnZVNpZGUoZmxvd1Bvc2l0aW9uLnN0YXJ0U2lkZSkpIHtcbiAgICAgIHJldHVybiBUYXNrLm5ld1Jlc3VsdCh0cnVlKTtcbiAgICB9XG4gICAgZmxvd1Bvc2l0aW9uLnN0YXJ0U2lkZSA9IFwiYW55XCI7XG4gICAgdGhpcy5zZXRGb3JtYXR0aW5nQ29udGV4dFRvQ29sdW1uKGNvbHVtbiwgZmxvd05hbWUpO1xuICAgIGNvbHVtbi5pbml0KCk7XG4gICAgaWYgKHRoaXMucHJpbWFyeUZsb3dzW2Zsb3dOYW1lXSAmJiBjb2x1bW4uYmFuZHMubGVuZ3RoID4gMCkge1xuICAgICAgLy8gSW4gZ2VuZXJhbCwgd2UgZm9yY2Ugbm9uLWZpdHRpbmcgY29udGVudC4gRXhjZXB0aW9uIGlzIG9ubHkgZm9yIHByaW1hcnlcbiAgICAgIC8vIGZsb3cgY29sdW1ucyB0aGF0IGhhdmUgZXhjbHVzaW9ucy5cbiAgICAgIGNvbHVtbi5mb3JjZU5vbmZpdHRpbmcgPSBmYWxzZTtcbiAgICB9XG4gICAgY29uc3QgZnJhbWU6IFRhc2suRnJhbWU8Ym9vbGVhbj4gPSBUYXNrLm5ld0ZyYW1lKFwibGF5b3V0Q29sdW1uXCIpO1xuICAgIHRoaXMubGF5b3V0RGVmZXJyZWRQYWdlRmxvYXRzKGNvbHVtbikudGhlbigoKSA9PiB7XG4gICAgICBpZiAoY29sdW1uLnBhZ2VGbG9hdExheW91dENvbnRleHQuaXNJbnZhbGlkYXRlZCgpKSB7XG4gICAgICAgIGZyYW1lLmZpbmlzaCh0cnVlKTtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuXG4gICAgICAvLyBSZWNvcmQgaW5kaWNlcyBvZiByZXBlYXRlZCBwb3NpdGlvbnMgYW5kIHJlbW92ZWQgcG9zaXRpb25zXG4gICAgICBjb25zdCByZXBlYXRlZEluZGljZXMgPSBbXSBhcyBudW1iZXJbXTtcbiAgICAgIGNvbnN0IHJlbW92ZWRJbmRpY2VzID0gW10gYXMgbnVtYmVyW107XG4gICAgICBsZXQgbGVhZGluZ0VkZ2UgPSB0cnVlO1xuICAgICAgZnJhbWVcbiAgICAgICAgLmxvb3BXaXRoRnJhbWUoKGxvb3BGcmFtZSkgPT4ge1xuICAgICAgICAgIGlmIChcbiAgICAgICAgICAgIGNvbHVtbi5wYWdlRmxvYXRMYXlvdXRDb250ZXh0Lmhhc0NvbnRpbnVpbmdGbG9hdEZyYWdtZW50c0luRmxvdyhcbiAgICAgICAgICAgICAgZmxvd05hbWUsXG4gICAgICAgICAgICApXG4gICAgICAgICAgKSB7XG4gICAgICAgICAgICBsb29wRnJhbWUuYnJlYWtMb29wKCk7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgfVxuICAgICAgICAgIHdoaWxlIChmbG93UG9zaXRpb24ucG9zaXRpb25zLmxlbmd0aCAtIHJlbW92ZWRJbmRpY2VzLmxlbmd0aCA+IDApIHtcbiAgICAgICAgICAgIGxldCBpbmRleCA9IDA7XG5cbiAgICAgICAgICAgIC8vIFNraXAgYWxsIHJlbW92ZWQgcG9zaXRpb25zXG4gICAgICAgICAgICB3aGlsZSAocmVtb3ZlZEluZGljZXMuaW5jbHVkZXMoaW5kZXgpKSB7XG4gICAgICAgICAgICAgIGluZGV4Kys7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBsZXQgc2VsZWN0ZWQgPSBmbG93UG9zaXRpb24ucG9zaXRpb25zW2luZGV4XTtcbiAgICAgICAgICAgIGlmIChcbiAgICAgICAgICAgICAgc2VsZWN0ZWQuZmxvd0NodW5rLnN0YXJ0T2Zmc2V0ID4gdGhpcy5sb29rdXBPZmZzZXQgfHxcbiAgICAgICAgICAgICAgdGhpcy5mbG93Q2h1bmtJc0FmdGVyUGFyZW50Rmxvd0ZvcmNlZEJyZWFrKHNlbGVjdGVkLmZsb3dDaHVuaylcbiAgICAgICAgICAgICkge1xuICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGZvciAobGV0IGsgPSBpbmRleCArIDE7IGsgPCBmbG93UG9zaXRpb24ucG9zaXRpb25zLmxlbmd0aDsgaysrKSB7XG4gICAgICAgICAgICAgIGlmIChyZW1vdmVkSW5kaWNlcy5pbmNsdWRlcyhrKSkge1xuICAgICAgICAgICAgICAgIGNvbnRpbnVlOyAvLyBTa2lwIHJlbW92ZWQgcG9zaXRpb25zXG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgY29uc3QgYWx0ID0gZmxvd1Bvc2l0aW9uLnBvc2l0aW9uc1trXTtcbiAgICAgICAgICAgICAgaWYgKFxuICAgICAgICAgICAgICAgIGFsdC5mbG93Q2h1bmsuc3RhcnRPZmZzZXQgPiB0aGlzLmxvb2t1cE9mZnNldCB8fFxuICAgICAgICAgICAgICAgIHRoaXMuZmxvd0NodW5rSXNBZnRlclBhcmVudEZsb3dGb3JjZWRCcmVhayhhbHQuZmxvd0NodW5rKVxuICAgICAgICAgICAgICApIHtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICBpZiAoYWx0LmZsb3dDaHVuay5pc0JldHRlcihzZWxlY3RlZC5mbG93Q2h1bmspKSB7XG4gICAgICAgICAgICAgICAgc2VsZWN0ZWQgPSBhbHQ7XG4gICAgICAgICAgICAgICAgaW5kZXggPSBrO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjb25zdCBmbG93Q2h1bmsgPSBzZWxlY3RlZC5mbG93Q2h1bms7XG4gICAgICAgICAgICBsZXQgcGVuZGluZyA9IHRydWU7XG4gICAgICAgICAgICBjb2x1bW5cbiAgICAgICAgICAgICAgLmxheW91dChcbiAgICAgICAgICAgICAgICBzZWxlY3RlZC5jaHVua1Bvc2l0aW9uLFxuICAgICAgICAgICAgICAgIGxlYWRpbmdFZGdlLFxuICAgICAgICAgICAgICAgIGZsb3dQb3NpdGlvbi5icmVha0FmdGVyLFxuICAgICAgICAgICAgICApXG4gICAgICAgICAgICAgIC50aGVuKChuZXdQb3NpdGlvbikgPT4ge1xuICAgICAgICAgICAgICAgIGlmIChjb2x1bW4ucGFnZUZsb2F0TGF5b3V0Q29udGV4dC5pc0ludmFsaWRhdGVkKCkpIHtcbiAgICAgICAgICAgICAgICAgIGxvb3BGcmFtZS5icmVha0xvb3AoKTtcbiAgICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgbGVhZGluZ0VkZ2UgPSBmYWxzZTtcblxuICAgICAgICAgICAgICAgIC8vIHN0YXRpYzoga2VlcCBpbiB0aGUgZmxvd1xuICAgICAgICAgICAgICAgIGlmIChcbiAgICAgICAgICAgICAgICAgIHNlbGVjdGVkLmZsb3dDaHVuay5yZXBlYXRlZCAmJlxuICAgICAgICAgICAgICAgICAgKG5ld1Bvc2l0aW9uID09PSBudWxsIHx8IGZsb3dDaHVuay5leGNsdXNpdmUpXG4gICAgICAgICAgICAgICAgKSB7XG4gICAgICAgICAgICAgICAgICByZXBlYXRlZEluZGljZXMucHVzaChpbmRleCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGlmIChmbG93Q2h1bmsuZXhjbHVzaXZlKSB7XG4gICAgICAgICAgICAgICAgICAvLyBleGNsdXNpdmUsIG9ubHkgY2FuIGhhdmUgb25lLCByZW1vdmUgZnJvbSB0aGUgZmxvdyBldmVuXG4gICAgICAgICAgICAgICAgICAvLyBpZiBpdCBkaWQgbm90IGZpdFxuICAgICAgICAgICAgICAgICAgcmVtb3ZlZEluZGljZXMucHVzaChpbmRleCk7XG4gICAgICAgICAgICAgICAgICBsb29wRnJhbWUuYnJlYWtMb29wKCk7XG4gICAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgIC8vIG5vdCBleGNsdXNpdmVcbiAgICAgICAgICAgICAgICAgIGNvbnN0IGVuZE9mQ29sdW1uID0gISFuZXdQb3NpdGlvbiB8fCAhIWNvbHVtbi5wYWdlQnJlYWtUeXBlO1xuICAgICAgICAgICAgICAgICAgY29uc3QgbGFzdEFmdGVyUG9zaXRpb24gPSB0aGlzLmdldExhc3RBZnRlclBvc2l0aW9uSWZEZWZlcnJlZEZsb2F0c0V4aXN0cyhcbiAgICAgICAgICAgICAgICAgICAgY29sdW1uLFxuICAgICAgICAgICAgICAgICAgICBuZXdQb3NpdGlvbixcbiAgICAgICAgICAgICAgICAgICk7XG4gICAgICAgICAgICAgICAgICBpZiAoY29sdW1uLnBhZ2VCcmVha1R5cGUgJiYgbGFzdEFmdGVyUG9zaXRpb24pIHtcbiAgICAgICAgICAgICAgICAgICAgc2VsZWN0ZWQuY2h1bmtQb3NpdGlvbiA9IGxhc3RBZnRlclBvc2l0aW9uO1xuXG4gICAgICAgICAgICAgICAgICAgIC8vIFRPRE8gcHJvcGFnYXRlIHBhZ2VCcmVha1R5cGVcbiAgICAgICAgICAgICAgICAgICAgZmxvd1Bvc2l0aW9uLmJyZWFrQWZ0ZXIgPSBjb2x1bW4ucGFnZUJyZWFrVHlwZTtcbiAgICAgICAgICAgICAgICAgICAgY29sdW1uLnBhZ2VCcmVha1R5cGUgPSBudWxsO1xuICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgLy8gZ28gdG8gdGhlIG5leHQgZWxlbWVudCBpbiB0aGUgZmxvd1xuICAgICAgICAgICAgICAgICAgICByZW1vdmVkSW5kaWNlcy5wdXNoKGluZGV4KTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKG5ld1Bvc2l0aW9uIHx8IGxhc3RBZnRlclBvc2l0aW9uKSB7XG4gICAgICAgICAgICAgICAgICAgICAgLy8gZGlkIG5vdCBmaXQgY29tcGxldGVseVxuICAgICAgICAgICAgICAgICAgICAgIHNlbGVjdGVkLmNodW5rUG9zaXRpb24gPSBuZXdQb3NpdGlvbiB8fCBsYXN0QWZ0ZXJQb3NpdGlvbjtcbiAgICAgICAgICAgICAgICAgICAgICByZXBlYXRlZEluZGljZXMucHVzaChpbmRleCk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgaWYgKGNvbHVtbi5wYWdlQnJlYWtUeXBlKSB7XG4gICAgICAgICAgICAgICAgICAgICAgLy8gZm9yY2VkIGJyZWFrXG4gICAgICAgICAgICAgICAgICAgICAgZmxvd1Bvc2l0aW9uLnN0YXJ0U2lkZSA9IEJyZWFrLmJyZWFrVmFsdWVUb1N0YXJ0U2lkZVZhbHVlKFxuICAgICAgICAgICAgICAgICAgICAgICAgY29sdW1uLnBhZ2VCcmVha1R5cGUsXG4gICAgICAgICAgICAgICAgICAgICAgKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgaWYgKGVuZE9mQ29sdW1uKSB7XG4gICAgICAgICAgICAgICAgICAgIGxvb3BGcmFtZS5icmVha0xvb3AoKTtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIC8vIFNpbmNlIGF0IGxlYXN0IG9uZSBmbG93Q2h1bmsgaGFzIGJlZW4gcGxhY2VkIGluIHRoZVxuICAgICAgICAgICAgICAgIC8vIGNvbHVtbiwgdGhlIG5leHQgZmxvd0NodW5rIG9mIHRoZSBmbG93IGNhbiBiZSBkZWZlcnJlZCB0b1xuICAgICAgICAgICAgICAgIC8vIHRoZSBuZXh0IHBhcnRpdGlvbiBpZiB0aGVyZSBpcyBub3QgZW5vdWdoIHNwYWNlIGluIHRoZVxuICAgICAgICAgICAgICAgIC8vIGN1cnJlbnQgcGFydGl0aW9uLlxuICAgICAgICAgICAgICAgIGNvbHVtbi5mb3JjZU5vbmZpdHRpbmcgPSBmYWxzZTtcbiAgICAgICAgICAgICAgICBpZiAocGVuZGluZykge1xuICAgICAgICAgICAgICAgICAgLy8gU3luYyByZXN1bHRcbiAgICAgICAgICAgICAgICAgIHBlbmRpbmcgPSBmYWxzZTtcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgLy8gQXN5bmMgcmVzdWx0XG4gICAgICAgICAgICAgICAgICBsb29wRnJhbWUuY29udGludWVMb29wKCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIGlmIChwZW5kaW5nKSB7XG4gICAgICAgICAgICAgIC8vIEFzeW5jIHJlc3VsdFxuICAgICAgICAgICAgICBwZW5kaW5nID0gZmFsc2U7XG4gICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG5cbiAgICAgICAgICAvLyBTeW5jIHJlc3VsdFxuICAgICAgICAgIGxvb3BGcmFtZS5icmVha0xvb3AoKTtcbiAgICAgICAgfSlcbiAgICAgICAgLnRoZW4oKCkgPT4ge1xuICAgICAgICAgIGlmICghY29sdW1uLnBhZ2VGbG9hdExheW91dENvbnRleHQuaXNJbnZhbGlkYXRlZCgpKSB7XG4gICAgICAgICAgICAvLyBLZWVwIHBvc2l0aW9ucyByZXBlYXRlZCBvciBub3QgcmVtb3ZlZFxuICAgICAgICAgICAgZmxvd1Bvc2l0aW9uLnBvc2l0aW9ucyA9IGZsb3dQb3NpdGlvbi5wb3NpdGlvbnMuZmlsdGVyKFxuICAgICAgICAgICAgICAocG9zLCBpKSA9PlxuICAgICAgICAgICAgICAgIHJlcGVhdGVkSW5kaWNlcy5pbmNsdWRlcyhpKSB8fCAhcmVtb3ZlZEluZGljZXMuaW5jbHVkZXMoaSksXG4gICAgICAgICAgICApO1xuICAgICAgICAgICAgaWYgKGZsb3dQb3NpdGlvbi5icmVha0FmdGVyID09PSBcImNvbHVtblwiKSB7XG4gICAgICAgICAgICAgIGZsb3dQb3NpdGlvbi5icmVha0FmdGVyID0gbnVsbDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGNvbHVtbi5zYXZlRGlzdGFuY2VUb0Jsb2NrRW5kRmxvYXRzKCk7XG4gICAgICAgICAgICBjb25zdCBlZGdlID0gY29sdW1uLnBhZ2VGbG9hdExheW91dENvbnRleHQuZ2V0TWF4UmVhY2hlZEFmdGVyRWRnZSgpO1xuICAgICAgICAgICAgY29sdW1uLnVwZGF0ZU1heFJlYWNoZWRBZnRlckVkZ2UoZWRnZSk7XG4gICAgICAgICAgfVxuICAgICAgICAgIGZyYW1lLmZpbmlzaCh0cnVlKTtcbiAgICAgICAgfSk7XG4gICAgfSk7XG4gICAgcmV0dXJuIGZyYW1lLnJlc3VsdCgpO1xuICB9XG5cbiAgY3JlYXRlTGF5b3V0Q29uc3RyYWludChcbiAgICBwYWdlRmxvYXRMYXlvdXRDb250ZXh0OiBQYWdlRmxvYXRzLlBhZ2VGbG9hdExheW91dENvbnRleHQsXG4gICk6IExheW91dFR5cGUuTGF5b3V0Q29uc3RyYWludCB7XG4gICAgY29uc3QgcGFnZUluZGV4ID0gdGhpcy5jdXJyZW50TGF5b3V0UG9zaXRpb24ucGFnZSAtIDE7XG4gICAgY29uc3QgY291bnRlckNvbnN0cmFpbnQgPSB0aGlzLmNvdW50ZXJTdG9yZS5jcmVhdGVMYXlvdXRDb25zdHJhaW50KFxuICAgICAgcGFnZUluZGV4LFxuICAgICk7XG4gICAgcmV0dXJuIG5ldyBMYXlvdXQuQWxsTGF5b3V0Q29uc3RyYWludChcbiAgICAgIFtjb3VudGVyQ29uc3RyYWludF0uY29uY2F0KHBhZ2VGbG9hdExheW91dENvbnRleHQuZ2V0TGF5b3V0Q29uc3RyYWludHMoKSksXG4gICAgKTtcbiAgfVxuXG4gIHByaXZhdGUgY3JlYXRlQW5kTGF5b3V0Q29sdW1uKFxuICAgIGJveEluc3RhbmNlOiBQYWdlTWFzdGVyLlBhZ2VCb3hJbnN0YW5jZSxcbiAgICBvZmZzZXRYOiBudW1iZXIsXG4gICAgb2Zmc2V0WTogbnVtYmVyLFxuICAgIGV4Y2x1c2lvbnM6IEdlb21ldHJ5VXRpbC5TaGFwZVtdLFxuICAgIGxheW91dENvbnRhaW5lcjogVnRyZWUuQ29udGFpbmVyLFxuICAgIGN1cnJlbnRDb2x1bW5JbmRleDogbnVtYmVyLFxuICAgIGZsb3dOYW1lU3RyOiBzdHJpbmcsXG4gICAgcmVnaW9uUGFnZUZsb2F0TGF5b3V0Q29udGV4dDogUGFnZUZsb2F0cy5QYWdlRmxvYXRMYXlvdXRDb250ZXh0LFxuICAgIGNvbHVtbkNvdW50OiBudW1iZXIsXG4gICAgY29sdW1uR2FwOiBudW1iZXIsXG4gICAgY29sdW1uV2lkdGg6IG51bWJlcixcbiAgICBpbm5lclNoYXBlOiBHZW9tZXRyeVV0aWwuU2hhcGUsXG4gICAgbGF5b3V0Q29udGV4dDogVnRyZWUuTGF5b3V0Q29udGV4dCxcbiAgICBmb3JjZU5vbkZpdHRpbmc6IGJvb2xlYW4sXG4gICk6IFRhc2suUmVzdWx0PExheW91dFR5cGUuQ29sdW1uPiB7XG4gICAgY29uc3QgZG9udEFwcGx5RXhjbHVzaW9ucyA9IGJveEluc3RhbmNlLnZlcnRpY2FsXG4gICAgICA/IGJveEluc3RhbmNlLmlzQXV0b1dpZHRoICYmIGJveEluc3RhbmNlLmlzUmlnaHREZXBlbmRlbnRPbkF1dG9XaWR0aFxuICAgICAgOiBib3hJbnN0YW5jZS5pc0F1dG9IZWlnaHQgJiYgYm94SW5zdGFuY2UuaXNUb3BEZXBlbmRlbnRPbkF1dG9IZWlnaHQ7XG4gICAgY29uc3QgYm94Q29udGFpbmVyID0gbGF5b3V0Q29udGFpbmVyLmVsZW1lbnQ7XG4gICAgY29uc3QgY29sdW1uUGFnZUZsb2F0TGF5b3V0Q29udGV4dCA9IG5ldyBQYWdlRmxvYXRzLlBhZ2VGbG9hdExheW91dENvbnRleHQoXG4gICAgICByZWdpb25QYWdlRmxvYXRMYXlvdXRDb250ZXh0LFxuICAgICAgUGFnZUZsb2F0cy5GbG9hdFJlZmVyZW5jZS5DT0xVTU4sXG4gICAgICBudWxsLFxuICAgICAgZmxvd05hbWVTdHIsXG4gICAgICBudWxsLFxuICAgICAgbnVsbCxcbiAgICAgIG51bGwsXG4gICAgKTtcbiAgICBjb25zdCBwb3NpdGlvbkF0Q29sdW1uU3RhcnQgPSB0aGlzLmN1cnJlbnRMYXlvdXRQb3NpdGlvbi5jbG9uZSgpO1xuICAgIGNvbnN0IGZyYW1lOiBUYXNrLkZyYW1lPExheW91dFR5cGUuQ29sdW1uPiA9IFRhc2submV3RnJhbWUoXG4gICAgICBcImNyZWF0ZUFuZExheW91dENvbHVtblwiLFxuICAgICk7XG4gICAgbGV0IGNvbHVtbjogTGF5b3V0VHlwZS5Db2x1bW47XG4gICAgZnJhbWVcbiAgICAgIC5sb29wV2l0aEZyYW1lKChsb29wRnJhbWUpID0+IHtcbiAgICAgICAgY29uc3QgbGF5b3V0Q29uc3RyYWludCA9IHRoaXMuY3JlYXRlTGF5b3V0Q29uc3RyYWludChcbiAgICAgICAgICBjb2x1bW5QYWdlRmxvYXRMYXlvdXRDb250ZXh0LFxuICAgICAgICApO1xuICAgICAgICBpZiAoY29sdW1uQ291bnQgPiAxKSB7XG4gICAgICAgICAgY29uc3QgY29sdW1uQ29udGFpbmVyID0gdGhpcy52aWV3cG9ydC5kb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiZGl2XCIpO1xuICAgICAgICAgIEJhc2Uuc2V0Q1NTUHJvcGVydHkoY29sdW1uQ29udGFpbmVyLCBcInBvc2l0aW9uXCIsIFwiYWJzb2x1dGVcIik7XG4gICAgICAgICAgYm94Q29udGFpbmVyLmFwcGVuZENoaWxkKGNvbHVtbkNvbnRhaW5lcik7XG4gICAgICAgICAgY29sdW1uID0gbmV3IExheW91dC5Db2x1bW4oXG4gICAgICAgICAgICBjb2x1bW5Db250YWluZXIsXG4gICAgICAgICAgICBsYXlvdXRDb250ZXh0LFxuICAgICAgICAgICAgdGhpcy5jbGllbnRMYXlvdXQsXG4gICAgICAgICAgICBsYXlvdXRDb25zdHJhaW50LFxuICAgICAgICAgICAgY29sdW1uUGFnZUZsb2F0TGF5b3V0Q29udGV4dCxcbiAgICAgICAgICApO1xuICAgICAgICAgIGNvbHVtbi5mb3JjZU5vbmZpdHRpbmcgPSBmb3JjZU5vbkZpdHRpbmc7XG4gICAgICAgICAgY29sdW1uLnZlcnRpY2FsID0gbGF5b3V0Q29udGFpbmVyLnZlcnRpY2FsO1xuICAgICAgICAgIGNvbHVtbi5zbmFwSGVpZ2h0ID0gbGF5b3V0Q29udGFpbmVyLnNuYXBIZWlnaHQ7XG4gICAgICAgICAgY29sdW1uLnNuYXBXaWR0aCA9IGxheW91dENvbnRhaW5lci5zbmFwV2lkdGg7XG4gICAgICAgICAgaWYgKGxheW91dENvbnRhaW5lci52ZXJ0aWNhbCkge1xuICAgICAgICAgICAgY29uc3QgY29sdW1uWSA9XG4gICAgICAgICAgICAgIGN1cnJlbnRDb2x1bW5JbmRleCAqIChjb2x1bW5XaWR0aCArIGNvbHVtbkdhcCkgK1xuICAgICAgICAgICAgICBsYXlvdXRDb250YWluZXIucGFkZGluZ1RvcDtcbiAgICAgICAgICAgIGNvbHVtbi5zZXRIb3Jpem9udGFsUG9zaXRpb24oXG4gICAgICAgICAgICAgIGxheW91dENvbnRhaW5lci5wYWRkaW5nTGVmdCxcbiAgICAgICAgICAgICAgbGF5b3V0Q29udGFpbmVyLndpZHRoLFxuICAgICAgICAgICAgKTtcbiAgICAgICAgICAgIGNvbHVtbi5zZXRWZXJ0aWNhbFBvc2l0aW9uKGNvbHVtblksIGNvbHVtbldpZHRoKTtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgY29uc3QgY29sdW1uWCA9XG4gICAgICAgICAgICAgIGN1cnJlbnRDb2x1bW5JbmRleCAqIChjb2x1bW5XaWR0aCArIGNvbHVtbkdhcCkgK1xuICAgICAgICAgICAgICBsYXlvdXRDb250YWluZXIucGFkZGluZ0xlZnQ7XG4gICAgICAgICAgICBjb2x1bW4uc2V0VmVydGljYWxQb3NpdGlvbihcbiAgICAgICAgICAgICAgbGF5b3V0Q29udGFpbmVyLnBhZGRpbmdUb3AsXG4gICAgICAgICAgICAgIGxheW91dENvbnRhaW5lci5oZWlnaHQsXG4gICAgICAgICAgICApO1xuICAgICAgICAgICAgY29sdW1uLnNldEhvcml6b250YWxQb3NpdGlvbihjb2x1bW5YLCBjb2x1bW5XaWR0aCk7XG4gICAgICAgICAgfVxuICAgICAgICAgIGNvbHVtbi5vcmlnaW5YID0gb2Zmc2V0WDtcbiAgICAgICAgICBjb2x1bW4ub3JpZ2luWSA9IG9mZnNldFk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgY29sdW1uID0gbmV3IExheW91dC5Db2x1bW4oXG4gICAgICAgICAgICBib3hDb250YWluZXIsXG4gICAgICAgICAgICBsYXlvdXRDb250ZXh0LFxuICAgICAgICAgICAgdGhpcy5jbGllbnRMYXlvdXQsXG4gICAgICAgICAgICBsYXlvdXRDb25zdHJhaW50LFxuICAgICAgICAgICAgY29sdW1uUGFnZUZsb2F0TGF5b3V0Q29udGV4dCxcbiAgICAgICAgICApO1xuICAgICAgICAgIGNvbHVtbi5jb3B5RnJvbShsYXlvdXRDb250YWluZXIpO1xuICAgICAgICB9XG4gICAgICAgIGNvbHVtbi5leGNsdXNpb25zID0gZG9udEFwcGx5RXhjbHVzaW9ucyA/IFtdIDogZXhjbHVzaW9ucy5jb25jYXQoKTtcbiAgICAgICAgY29sdW1uLmlubmVyU2hhcGUgPSBpbm5lclNoYXBlO1xuICAgICAgICBjb2x1bW5QYWdlRmxvYXRMYXlvdXRDb250ZXh0LnNldENvbnRhaW5lcihjb2x1bW4pO1xuICAgICAgICBpZiAoY29sdW1uLndpZHRoID49IDApIHtcbiAgICAgICAgICAvLyBjb2x1bW4uZWxlbWVudC5zdHlsZS5vdXRsaW5lID0gXCIxcHggZG90dGVkIGdyZWVuXCI7XG4gICAgICAgICAgdGhpcy5sYXlvdXRDb2x1bW4oY29sdW1uLCBmbG93TmFtZVN0cikudGhlbigoKSA9PiB7XG4gICAgICAgICAgICBpZiAoIWNvbHVtblBhZ2VGbG9hdExheW91dENvbnRleHQuaXNJbnZhbGlkYXRlZCgpKSB7XG4gICAgICAgICAgICAgIGNvbHVtblBhZ2VGbG9hdExheW91dENvbnRleHQuZmluaXNoKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoXG4gICAgICAgICAgICAgIGNvbHVtbi5wYWdlRmxvYXRMYXlvdXRDb250ZXh0LmlzSW52YWxpZGF0ZWQoKSAmJlxuICAgICAgICAgICAgICAhcmVnaW9uUGFnZUZsb2F0TGF5b3V0Q29udGV4dC5pc0ludmFsaWRhdGVkKClcbiAgICAgICAgICAgICkge1xuICAgICAgICAgICAgICBjb2x1bW4ucGFnZUZsb2F0TGF5b3V0Q29udGV4dC52YWxpZGF0ZSgpO1xuICAgICAgICAgICAgICB0aGlzLmN1cnJlbnRMYXlvdXRQb3NpdGlvbiA9IHBvc2l0aW9uQXRDb2x1bW5TdGFydC5jbG9uZSgpO1xuICAgICAgICAgICAgICBpZiAoY29sdW1uLmVsZW1lbnQgIT09IGJveENvbnRhaW5lcikge1xuICAgICAgICAgICAgICAgIGJveENvbnRhaW5lci5yZW1vdmVDaGlsZChjb2x1bW4uZWxlbWVudCk7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgbG9vcEZyYW1lLmNvbnRpbnVlTG9vcCgpO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgbG9vcEZyYW1lLmJyZWFrTG9vcCgpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH0pO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGNvbHVtblBhZ2VGbG9hdExheW91dENvbnRleHQuZmluaXNoKCk7XG4gICAgICAgICAgbG9vcEZyYW1lLmJyZWFrTG9vcCgpO1xuICAgICAgICB9XG4gICAgICB9KVxuICAgICAgLnRoZW4oKCkgPT4ge1xuICAgICAgICBmcmFtZS5maW5pc2goY29sdW1uKTtcbiAgICAgIH0pO1xuICAgIHJldHVybiBmcmFtZS5yZXN1bHQoKTtcbiAgfVxuXG4gIHNldFBhZ2VQYWdlRmxvYXRMYXlvdXRDb250ZXh0Q29udGFpbmVyKFxuICAgIHBhZ2VQYWdlRmxvYXRMYXlvdXRDb250ZXh0OiBQYWdlRmxvYXRzLlBhZ2VGbG9hdExheW91dENvbnRleHQsXG4gICAgYm94SW5zdGFuY2U6IFBhZ2VNYXN0ZXIuUGFnZUJveEluc3RhbmNlLFxuICAgIGxheW91dENvbnRhaW5lcjogVnRyZWUuQ29udGFpbmVyLFxuICApIHtcbiAgICBpZiAoXG4gICAgICBib3hJbnN0YW5jZSBpbnN0YW5jZW9mIENzc1BhZ2UuUGFnZVJ1bGVQYXJ0aXRpb25JbnN0YW5jZSB8fFxuICAgICAgKGJveEluc3RhbmNlIGluc3RhbmNlb2YgUGFnZU1hc3Rlci5QYWdlTWFzdGVySW5zdGFuY2UgJiZcbiAgICAgICAgIShib3hJbnN0YW5jZSBpbnN0YW5jZW9mIENzc1BhZ2UuUGFnZVJ1bGVNYXN0ZXJJbnN0YW5jZSkpXG4gICAgKSB7XG4gICAgICBwYWdlUGFnZUZsb2F0TGF5b3V0Q29udGV4dC5zZXRDb250YWluZXIobGF5b3V0Q29udGFpbmVyKTtcbiAgICB9XG4gIH1cblxuICBnZXRSZWdpb25QYWdlRmxvYXRMYXlvdXRDb250ZXh0KFxuICAgIHBhZ2VQYWdlRmxvYXRMYXlvdXRDb250ZXh0OiBQYWdlRmxvYXRzLlBhZ2VGbG9hdExheW91dENvbnRleHQsXG4gICAgYm94SW5zdGFuY2U6IFBhZ2VNYXN0ZXIuUGFnZUJveEluc3RhbmNlLFxuICAgIGxheW91dENvbnRhaW5lcjogVnRyZWUuQ29udGFpbmVyLFxuICAgIGZsb3dOYW1lOiBzdHJpbmcsXG4gICk6IFBhZ2VGbG9hdHMuUGFnZUZsb2F0TGF5b3V0Q29udGV4dCB7XG4gICAgQXNzZXJ0cy5hc3NlcnQoYm94SW5zdGFuY2UgaW5zdGFuY2VvZiBQYWdlTWFzdGVyLlBhcnRpdGlvbkluc3RhbmNlKTtcbiAgICBjb25zdCB3cml0aW5nTW9kZSA9IGJveEluc3RhbmNlLmdldFByb3AodGhpcywgXCJ3cml0aW5nLW1vZGVcIikgfHwgbnVsbDtcbiAgICBjb25zdCBkaXJlY3Rpb24gPSBib3hJbnN0YW5jZS5nZXRQcm9wKHRoaXMsIFwiZGlyZWN0aW9uXCIpIHx8IG51bGw7XG4gICAgcmV0dXJuIG5ldyBQYWdlRmxvYXRzLlBhZ2VGbG9hdExheW91dENvbnRleHQoXG4gICAgICBwYWdlUGFnZUZsb2F0TGF5b3V0Q29udGV4dCxcbiAgICAgIFBhZ2VGbG9hdHMuRmxvYXRSZWZlcmVuY2UuUkVHSU9OLFxuICAgICAgbGF5b3V0Q29udGFpbmVyLFxuICAgICAgZmxvd05hbWUsXG4gICAgICBudWxsLFxuICAgICAgd3JpdGluZ01vZGUsXG4gICAgICBkaXJlY3Rpb24sXG4gICAgKTtcbiAgfVxuXG4gIGxheW91dEZsb3dDb2x1bW5zV2l0aEJhbGFuY2luZyhcbiAgICBwYWdlOiBWdHJlZS5QYWdlLFxuICAgIGJveEluc3RhbmNlOiBQYWdlTWFzdGVyLlBhZ2VCb3hJbnN0YW5jZSxcbiAgICBvZmZzZXRYOiBudW1iZXIsXG4gICAgb2Zmc2V0WTogbnVtYmVyLFxuICAgIGV4Y2x1c2lvbnM6IEdlb21ldHJ5VXRpbC5TaGFwZVtdLFxuICAgIHBhZ2VQYWdlRmxvYXRMYXlvdXRDb250ZXh0OiBQYWdlRmxvYXRzLlBhZ2VGbG9hdExheW91dENvbnRleHQsXG4gICAgbGF5b3V0Q29udGFpbmVyOiBWdHJlZS5Db250YWluZXIsXG4gICAgZmxvd05hbWVTdHI6IHN0cmluZyxcbiAgICBjb2x1bW5Db3VudDogbnVtYmVyLFxuICApOiBUYXNrLlJlc3VsdDxMYXlvdXRUeXBlLkNvbHVtbltdPiB7XG4gICAgY29uc3QgcG9zaXRpb25BdENvbnRhaW5lclN0YXJ0ID0gdGhpcy5jdXJyZW50TGF5b3V0UG9zaXRpb24uY2xvbmUoKTtcbiAgICBjb25zdCByZWdpb25QYWdlRmxvYXRMYXlvdXRDb250ZXh0ID0gdGhpcy5nZXRSZWdpb25QYWdlRmxvYXRMYXlvdXRDb250ZXh0KFxuICAgICAgcGFnZVBhZ2VGbG9hdExheW91dENvbnRleHQsXG4gICAgICBib3hJbnN0YW5jZSxcbiAgICAgIGxheW91dENvbnRhaW5lcixcbiAgICAgIGZsb3dOYW1lU3RyLFxuICAgICk7XG4gICAgbGV0IGlzRmlyc3RUaW1lID0gdHJ1ZTtcblxuICAgIGNvbnN0IGxheW91dENvbHVtbnMgPSAoKSA9PiB7XG4gICAgICB0aGlzLmN1cnJlbnRMYXlvdXRQb3NpdGlvbiA9IHBvc2l0aW9uQXRDb250YWluZXJTdGFydC5jbG9uZSgpO1xuICAgICAgcmV0dXJuIHRoaXMubGF5b3V0Rmxvd0NvbHVtbnMoXG4gICAgICAgIHBhZ2UsXG4gICAgICAgIGJveEluc3RhbmNlLFxuICAgICAgICBvZmZzZXRYLFxuICAgICAgICBvZmZzZXRZLFxuICAgICAgICBleGNsdXNpb25zLFxuICAgICAgICBwYWdlUGFnZUZsb2F0TGF5b3V0Q29udGV4dCxcbiAgICAgICAgcmVnaW9uUGFnZUZsb2F0TGF5b3V0Q29udGV4dCxcbiAgICAgICAgbGF5b3V0Q29udGFpbmVyLFxuICAgICAgICBmbG93TmFtZVN0cixcbiAgICAgICAgY29sdW1uQ291bnQsXG4gICAgICAgIGlzRmlyc3RUaW1lLFxuICAgICAgKS50aGVuQXN5bmMoKGNvbHVtbnMpID0+IHtcbiAgICAgICAgaWYgKGNvbHVtbnMpIHtcbiAgICAgICAgICByZXR1cm4gVGFzay5uZXdSZXN1bHQoe1xuICAgICAgICAgICAgY29sdW1ucyxcbiAgICAgICAgICAgIHBvc2l0aW9uOiB0aGlzLmN1cnJlbnRMYXlvdXRQb3NpdGlvbixcbiAgICAgICAgICB9KTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICByZXR1cm4gVGFzay5uZXdSZXN1bHQobnVsbCk7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgIH07XG5cbiAgICByZXR1cm4gbGF5b3V0Q29sdW1ucygpLnRoZW5Bc3luYygoZ2VuZXJhdG9yUmVzdWx0KSA9PiB7XG4gICAgICBpZiAoIWdlbmVyYXRvclJlc3VsdCkge1xuICAgICAgICByZXR1cm4gVGFzay5uZXdSZXN1bHQobnVsbCk7XG4gICAgICB9XG4gICAgICBpZiAoY29sdW1uQ291bnQgPD0gMSkge1xuICAgICAgICByZXR1cm4gVGFzay5uZXdSZXN1bHQoZ2VuZXJhdG9yUmVzdWx0LmNvbHVtbnMpO1xuICAgICAgfVxuICAgICAgY29uc3QgY29sdW1uRmlsbCA9XG4gICAgICAgIChib3hJbnN0YW5jZS5nZXRQcm9wKHRoaXMsIFwiY29sdW1uLWZpbGxcIikgYXMgQ3NzLklkZW50KSB8fFxuICAgICAgICBDc3MuaWRlbnQuYmFsYW5jZTtcbiAgICAgIGNvbnN0IGZsb3dQb3NpdGlvbiA9IHRoaXMuY3VycmVudExheW91dFBvc2l0aW9uLmZsb3dQb3NpdGlvbnNbXG4gICAgICAgIGZsb3dOYW1lU3RyXG4gICAgICBdO1xuICAgICAgQXNzZXJ0cy5hc3NlcnQoZmxvd1Bvc2l0aW9uKTtcbiAgICAgIGNvbnN0IGNvbHVtbkJhbGFuY2VyID0gQ29sdW1ucy5jcmVhdGVDb2x1bW5CYWxhbmNlcihcbiAgICAgICAgY29sdW1uQ291bnQsXG4gICAgICAgIGNvbHVtbkZpbGwsXG4gICAgICAgIGxheW91dENvbHVtbnMsXG4gICAgICAgIHJlZ2lvblBhZ2VGbG9hdExheW91dENvbnRleHQsXG4gICAgICAgIGxheW91dENvbnRhaW5lcixcbiAgICAgICAgZ2VuZXJhdG9yUmVzdWx0LmNvbHVtbnMsXG4gICAgICAgIGZsb3dQb3NpdGlvbixcbiAgICAgICk7XG4gICAgICBpZiAoIWNvbHVtbkJhbGFuY2VyKSB7XG4gICAgICAgIHJldHVybiBUYXNrLm5ld1Jlc3VsdChnZW5lcmF0b3JSZXN1bHQuY29sdW1ucyk7XG4gICAgICB9XG4gICAgICBpc0ZpcnN0VGltZSA9IGZhbHNlO1xuICAgICAgcGFnZVBhZ2VGbG9hdExheW91dENvbnRleHQubG9jaygpO1xuICAgICAgcmVnaW9uUGFnZUZsb2F0TGF5b3V0Q29udGV4dC5sb2NrKCk7XG4gICAgICByZXR1cm4gY29sdW1uQmFsYW5jZXJcbiAgICAgICAgLmJhbGFuY2VDb2x1bW5zKGdlbmVyYXRvclJlc3VsdClcbiAgICAgICAgLnRoZW5Bc3luYygocmVzdWx0KSA9PiB7XG4gICAgICAgICAgcGFnZVBhZ2VGbG9hdExheW91dENvbnRleHQudW5sb2NrKCk7XG4gICAgICAgICAgcGFnZVBhZ2VGbG9hdExheW91dENvbnRleHQudmFsaWRhdGUoKTtcbiAgICAgICAgICByZWdpb25QYWdlRmxvYXRMYXlvdXRDb250ZXh0LnVubG9jaygpO1xuICAgICAgICAgIHRoaXMuY3VycmVudExheW91dFBvc2l0aW9uID0gcmVzdWx0LnBvc2l0aW9uO1xuICAgICAgICAgIHJldHVybiBUYXNrLm5ld1Jlc3VsdChyZXN1bHQuY29sdW1ucyk7XG4gICAgICAgIH0pO1xuICAgIH0pO1xuICB9XG5cbiAgbGF5b3V0Rmxvd0NvbHVtbnMoXG4gICAgcGFnZTogVnRyZWUuUGFnZSxcbiAgICBib3hJbnN0YW5jZTogUGFnZU1hc3Rlci5QYWdlQm94SW5zdGFuY2UsXG4gICAgb2Zmc2V0WDogbnVtYmVyLFxuICAgIG9mZnNldFk6IG51bWJlcixcbiAgICBleGNsdXNpb25zOiBHZW9tZXRyeVV0aWwuU2hhcGVbXSxcbiAgICBwYWdlUGFnZUZsb2F0TGF5b3V0Q29udGV4dDogUGFnZUZsb2F0cy5QYWdlRmxvYXRMYXlvdXRDb250ZXh0LFxuICAgIHJlZ2lvblBhZ2VGbG9hdExheW91dENvbnRleHQ6IFBhZ2VGbG9hdHMuUGFnZUZsb2F0TGF5b3V0Q29udGV4dCxcbiAgICBsYXlvdXRDb250YWluZXI6IFZ0cmVlLkNvbnRhaW5lcixcbiAgICBmbG93TmFtZVN0cjogc3RyaW5nLFxuICAgIGNvbHVtbkNvdW50OiBudW1iZXIsXG4gICAgZm9yY2VOb25GaXR0aW5nOiBib29sZWFuLFxuICApOiBUYXNrLlJlc3VsdDxMYXlvdXRUeXBlLkNvbHVtbltdIHwgbnVsbD4ge1xuICAgIGNvbnN0IGZyYW1lOiBUYXNrLkZyYW1lPExheW91dFR5cGUuQ29sdW1uW10gfCBudWxsPiA9IFRhc2submV3RnJhbWUoXG4gICAgICBcImxheW91dEZsb3dDb2x1bW5zXCIsXG4gICAgKTtcbiAgICBjb25zdCBwb3NpdGlvbkF0Q29udGFpbmVyU3RhcnQgPSB0aGlzLmN1cnJlbnRMYXlvdXRQb3NpdGlvbi5jbG9uZSgpO1xuICAgIGNvbnN0IGNvbHVtbkdhcCA9IGJveEluc3RhbmNlLmdldFByb3BBc051bWJlcih0aGlzLCBcImNvbHVtbi1nYXBcIik7XG5cbiAgICAvLyBEb24ndCBxdWVyeSBjb2x1bW5XaWR0aCB3aGVuIGl0J3Mgbm90IG5lZWRlZCwgc28gdGhhdCB3aWR0aCBjYWxjdWxhdGlvblxuICAgIC8vIGNhbiBiZSBkZWxheWVkIGZvciB3aWR0aDogYXV0byBjb2x1bW5zLlxuICAgIGNvbnN0IGNvbHVtbldpZHRoID1cbiAgICAgIGNvbHVtbkNvdW50ID4gMVxuICAgICAgICA/IGJveEluc3RhbmNlLmdldFByb3BBc051bWJlcih0aGlzLCBcImNvbHVtbi13aWR0aFwiKVxuICAgICAgICA6IGxheW91dENvbnRhaW5lci53aWR0aDtcbiAgICBjb25zdCByZWdpb25JZHMgPSBib3hJbnN0YW5jZS5nZXRBY3RpdmVSZWdpb25zKHRoaXMpO1xuICAgIGNvbnN0IGlubmVyU2hhcGVWYWwgPSBib3hJbnN0YW5jZS5nZXRQcm9wKHRoaXMsIFwic2hhcGUtaW5zaWRlXCIpO1xuICAgIGNvbnN0IGlubmVyU2hhcGUgPSBDc3NQcm9wLnRvU2hhcGUoXG4gICAgICBpbm5lclNoYXBlVmFsLFxuICAgICAgMCxcbiAgICAgIDAsXG4gICAgICBsYXlvdXRDb250YWluZXIud2lkdGgsXG4gICAgICBsYXlvdXRDb250YWluZXIuaGVpZ2h0LFxuICAgICAgdGhpcyxcbiAgICApO1xuICAgIGNvbnN0IGxheW91dENvbnRleHQgPSBuZXcgVmdlbi5WaWV3RmFjdG9yeShcbiAgICAgIGZsb3dOYW1lU3RyLFxuICAgICAgdGhpcyxcbiAgICAgIHRoaXMudmlld3BvcnQsXG4gICAgICB0aGlzLnN0eWxlcixcbiAgICAgIHJlZ2lvbklkcyxcbiAgICAgIHRoaXMueG1sZG9jLFxuICAgICAgdGhpcy5mYWNlcyxcbiAgICAgIHRoaXMuc3R5bGUuZm9vdG5vdGVQcm9wcyxcbiAgICAgIHRoaXMsXG4gICAgICBwYWdlLFxuICAgICAgdGhpcy5jdXN0b21SZW5kZXJlcixcbiAgICAgIHRoaXMuZmFsbGJhY2tNYXAsXG4gICAgICB0aGlzLmRvY3VtZW50VVJMVHJhbnNmb3JtZXIsXG4gICAgKTtcbiAgICBsZXQgY29sdW1uSW5kZXggPSAwO1xuICAgIGxldCBjb2x1bW46IExheW91dFR5cGUuQ29sdW1uID0gbnVsbDtcbiAgICBsZXQgY29sdW1uczogTGF5b3V0VHlwZS5Db2x1bW5bXSA9IFtdO1xuICAgIGZyYW1lXG4gICAgICAubG9vcFdpdGhGcmFtZSgobG9vcEZyYW1lKSA9PiB7XG4gICAgICAgIHRoaXMuY3JlYXRlQW5kTGF5b3V0Q29sdW1uKFxuICAgICAgICAgIGJveEluc3RhbmNlLFxuICAgICAgICAgIG9mZnNldFgsXG4gICAgICAgICAgb2Zmc2V0WSxcbiAgICAgICAgICBleGNsdXNpb25zLFxuICAgICAgICAgIGxheW91dENvbnRhaW5lcixcbiAgICAgICAgICBjb2x1bW5JbmRleCsrLFxuICAgICAgICAgIGZsb3dOYW1lU3RyLFxuICAgICAgICAgIHJlZ2lvblBhZ2VGbG9hdExheW91dENvbnRleHQsXG4gICAgICAgICAgY29sdW1uQ291bnQsXG4gICAgICAgICAgY29sdW1uR2FwLFxuICAgICAgICAgIGNvbHVtbldpZHRoLFxuICAgICAgICAgIGlubmVyU2hhcGUsXG4gICAgICAgICAgbGF5b3V0Q29udGV4dCxcbiAgICAgICAgICBmb3JjZU5vbkZpdHRpbmcsXG4gICAgICAgICkudGhlbigoYykgPT4ge1xuICAgICAgICAgIGlmIChwYWdlUGFnZUZsb2F0TGF5b3V0Q29udGV4dC5pc0ludmFsaWRhdGVkKCkpIHtcbiAgICAgICAgICAgIGNvbHVtbnMgPSBudWxsO1xuICAgICAgICAgICAgbG9vcEZyYW1lLmJyZWFrTG9vcCgpO1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgIH1cbiAgICAgICAgICBjb25zdCBmb3JjZWRSZWdpb25CcmVhayA9XG4gICAgICAgICAgICAhIWMucGFnZUJyZWFrVHlwZSAmJiBjLnBhZ2VCcmVha1R5cGUgIT09IFwiY29sdW1uXCI7XG4gICAgICAgICAgaWYgKFxuICAgICAgICAgICAgKGZvcmNlZFJlZ2lvbkJyZWFrIHx8IGNvbHVtbkluZGV4ID09PSBjb2x1bW5Db3VudCkgJiZcbiAgICAgICAgICAgICFyZWdpb25QYWdlRmxvYXRMYXlvdXRDb250ZXh0LmlzSW52YWxpZGF0ZWQoKVxuICAgICAgICAgICkge1xuICAgICAgICAgICAgcmVnaW9uUGFnZUZsb2F0TGF5b3V0Q29udGV4dC5maW5pc2goKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgaWYgKHJlZ2lvblBhZ2VGbG9hdExheW91dENvbnRleHQuaXNJbnZhbGlkYXRlZCgpKSB7XG4gICAgICAgICAgICBjb2x1bW5JbmRleCA9IDA7XG4gICAgICAgICAgICB0aGlzLmN1cnJlbnRMYXlvdXRQb3NpdGlvbiA9IHBvc2l0aW9uQXRDb250YWluZXJTdGFydC5jbG9uZSgpO1xuICAgICAgICAgICAgcmVnaW9uUGFnZUZsb2F0TGF5b3V0Q29udGV4dC52YWxpZGF0ZSgpO1xuICAgICAgICAgICAgaWYgKHJlZ2lvblBhZ2VGbG9hdExheW91dENvbnRleHQuaXNMb2NrZWQoKSkge1xuICAgICAgICAgICAgICBjb2x1bW5zID0gbnVsbDtcbiAgICAgICAgICAgICAgbG9vcEZyYW1lLmJyZWFrTG9vcCgpO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgbG9vcEZyYW1lLmNvbnRpbnVlTG9vcCgpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgIH1cbiAgICAgICAgICBjb2x1bW4gPSBjO1xuICAgICAgICAgIGNvbHVtbnNbY29sdW1uSW5kZXggLSAxXSA9IGNvbHVtbjtcbiAgICAgICAgICBpZiAoY29sdW1uLnBhZ2VCcmVha1R5cGUpIHtcbiAgICAgICAgICAgIGlmIChjb2x1bW4ucGFnZUJyZWFrVHlwZSAhPSBcImNvbHVtblwiKSB7XG4gICAgICAgICAgICAgIC8vIHNraXAgcmVtYWluaW5nIGNvbHVtbnNcbiAgICAgICAgICAgICAgY29sdW1uSW5kZXggPSBjb2x1bW5Db3VudDtcbiAgICAgICAgICAgICAgaWYgKGNvbHVtbi5wYWdlQnJlYWtUeXBlICE9IFwicmVnaW9uXCIpIHtcbiAgICAgICAgICAgICAgICAvLyBza2lwIHJlbWFpbmluZyByZWdpb25zXG4gICAgICAgICAgICAgICAgdGhpcy5wYWdlQnJlYWtzW2Zsb3dOYW1lU3RyXSA9IHRydWU7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgICAgaWYgKGNvbHVtbkluZGV4IDwgY29sdW1uQ291bnQpIHtcbiAgICAgICAgICAgIGxvb3BGcmFtZS5jb250aW51ZUxvb3AoKTtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgbG9vcEZyYW1lLmJyZWFrTG9vcCgpO1xuICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgICB9KVxuICAgICAgLnRoZW4oKCkgPT4ge1xuICAgICAgICBmcmFtZS5maW5pc2goY29sdW1ucyk7XG4gICAgICB9KTtcbiAgICByZXR1cm4gZnJhbWUucmVzdWx0KCk7XG4gIH1cblxuICAvKipcbiAgICogQHJldHVybiBob2xkaW5nIHRydWVcbiAgICovXG4gIGxheW91dENvbnRhaW5lcihcbiAgICBwYWdlOiBWdHJlZS5QYWdlLFxuICAgIGJveEluc3RhbmNlOiBQYWdlTWFzdGVyLlBhZ2VCb3hJbnN0YW5jZSxcbiAgICBwYXJlbnRDb250YWluZXI6IEhUTUxFbGVtZW50LFxuICAgIG9mZnNldFg6IG51bWJlcixcbiAgICBvZmZzZXRZOiBudW1iZXIsXG4gICAgZXhjbHVzaW9uczogR2VvbWV0cnlVdGlsLlNoYXBlW10sXG4gICAgcGFnZVBhZ2VGbG9hdExheW91dENvbnRleHQ6IFBhZ2VGbG9hdHMuUGFnZUZsb2F0TGF5b3V0Q29udGV4dCxcbiAgKTogVGFzay5SZXN1bHQ8Ym9vbGVhbj4ge1xuICAgIGJveEluc3RhbmNlLnJlc2V0KCk7XG4gICAgY29uc3QgZW5hYmxlZCA9IGJveEluc3RhbmNlLmdldFByb3AodGhpcywgXCJlbmFibGVkXCIpO1xuICAgIGlmIChlbmFibGVkICYmIGVuYWJsZWQgIT09IENzcy5pZGVudC5fdHJ1ZSkge1xuICAgICAgcmV0dXJuIFRhc2submV3UmVzdWx0KHRydWUpO1xuICAgIH1cbiAgICBjb25zdCBmcmFtZTogVGFzay5GcmFtZTxib29sZWFuPiA9IFRhc2submV3RnJhbWUoXCJsYXlvdXRDb250YWluZXJcIik7XG4gICAgY29uc3Qgd3JhcEZsb3cgPSBib3hJbnN0YW5jZS5nZXRQcm9wKHRoaXMsIFwid3JhcC1mbG93XCIpO1xuICAgIGNvbnN0IGRvbnRFeGNsdWRlID0gd3JhcEZsb3cgPT09IENzcy5pZGVudC5hdXRvO1xuICAgIGNvbnN0IGZsb3dOYW1lID0gYm94SW5zdGFuY2UuZ2V0UHJvcCh0aGlzLCBcImZsb3ctZnJvbVwiKTtcbiAgICBjb25zdCBib3hDb250YWluZXIgPSB0aGlzLnZpZXdwb3J0LmRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIik7XG4gICAgY29uc3QgcG9zaXRpb24gPSBib3hJbnN0YW5jZS5nZXRQcm9wKHRoaXMsIFwicG9zaXRpb25cIik7XG4gICAgQmFzZS5zZXRDU1NQcm9wZXJ0eShcbiAgICAgIGJveENvbnRhaW5lcixcbiAgICAgIFwicG9zaXRpb25cIixcbiAgICAgIHBvc2l0aW9uID8gKHBvc2l0aW9uIGFzIGFueSkubmFtZSA6IFwiYWJzb2x1dGVcIixcbiAgICApO1xuXG4gICAgLy8gVGhlIC1lcHVieC1wYWdlLW1hc3RlciBwYXJ0aXRpb25zIGFyZSBsYWlkIG91dCBpbiB0aGUgcmV2ZXJzZSBvcmRlclxuICAgIC8vIChzZWUgdGhlIHNwZWMgaHR0cDovL2lkcGYub3JnL2VwdWIvcGd0LyApLFxuICAgIC8vIGJ1dCBmb3IgY3NzLXBhZ2UgcnVsZXMsIG5vdyB1c2UgZm9yd2FyZCBvcmRlciwgaS5lLiwgdGhlIHBhZ2UtYXJlYSBmaXJzdC5cbiAgICAvLyBUaGlzIGlzIG5lY2Vzc2FyeSBmb3IgcnVubmluZyBoZWFkZXJzIG5hbWVkIHN0cmluZ3Mgc3VwcG9ydC5cbiAgICBjb25zdCBmb3J3YXJkT3JkZXJJbkxheW91dCA9XG4gICAgICBib3hJbnN0YW5jZSBpbnN0YW5jZW9mIENzc1BhZ2UuUGFnZVJ1bGVNYXN0ZXJJbnN0YW5jZTtcbiAgICBjb25zdCBmb3J3YXJkT3JkZXJJblRyZWUgPVxuICAgICAgYm94SW5zdGFuY2UgaW5zdGFuY2VvZiBQYWdlTWFzdGVyLlBhcnRpdGlvbkluc3RhbmNlO1xuXG4gICAgaWYgKGZvcndhcmRPcmRlckluVHJlZSkge1xuICAgICAgcGFyZW50Q29udGFpbmVyLmFwcGVuZENoaWxkKGJveENvbnRhaW5lcik7XG4gICAgfSBlbHNlIHtcbiAgICAgIHBhcmVudENvbnRhaW5lci5pbnNlcnRCZWZvcmUoYm94Q29udGFpbmVyLCBwYXJlbnRDb250YWluZXIuZmlyc3RDaGlsZCk7XG4gICAgfVxuXG4gICAgbGV0IGxheW91dENvbnRhaW5lciA9IG5ldyBWdHJlZS5Db250YWluZXIoYm94Q29udGFpbmVyKTtcbiAgICBsYXlvdXRDb250YWluZXIudmVydGljYWwgPSBib3hJbnN0YW5jZS52ZXJ0aWNhbDtcbiAgICBsYXlvdXRDb250YWluZXIuZXhjbHVzaW9ucyA9IGV4Y2x1c2lvbnM7XG4gICAgYm94SW5zdGFuY2UucHJlcGFyZUNvbnRhaW5lcihcbiAgICAgIHRoaXMsXG4gICAgICBsYXlvdXRDb250YWluZXIsXG4gICAgICBwYWdlLFxuICAgICAgdGhpcy5mYWNlcyxcbiAgICAgIHRoaXMuY2xpZW50TGF5b3V0LFxuICAgICk7XG4gICAgbGF5b3V0Q29udGFpbmVyLm9yaWdpblggPSBvZmZzZXRYO1xuICAgIGxheW91dENvbnRhaW5lci5vcmlnaW5ZID0gb2Zmc2V0WTtcbiAgICBvZmZzZXRYICs9XG4gICAgICBsYXlvdXRDb250YWluZXIubGVmdCArXG4gICAgICBsYXlvdXRDb250YWluZXIubWFyZ2luTGVmdCArXG4gICAgICBsYXlvdXRDb250YWluZXIuYm9yZGVyTGVmdDtcbiAgICBvZmZzZXRZICs9XG4gICAgICBsYXlvdXRDb250YWluZXIudG9wICtcbiAgICAgIGxheW91dENvbnRhaW5lci5tYXJnaW5Ub3AgK1xuICAgICAgbGF5b3V0Q29udGFpbmVyLmJvcmRlclRvcDtcbiAgICB0aGlzLnNldFBhZ2VQYWdlRmxvYXRMYXlvdXRDb250ZXh0Q29udGFpbmVyKFxuICAgICAgcGFnZVBhZ2VGbG9hdExheW91dENvbnRleHQsXG4gICAgICBib3hJbnN0YW5jZSxcbiAgICAgIGxheW91dENvbnRhaW5lcixcbiAgICApO1xuICAgIGxldCBjb250OiBUYXNrLlJlc3VsdDxib29sZWFuPjtcbiAgICBsZXQgcmVtb3ZlZCA9IGZhbHNlO1xuICAgIGlmICghZmxvd05hbWUgfHwgIWZsb3dOYW1lLmlzSWRlbnQoKSkge1xuICAgICAgY29uc3QgY29udGVudFZhbCA9IGJveEluc3RhbmNlLmdldFByb3AodGhpcywgXCJjb250ZW50XCIpO1xuICAgICAgaWYgKGNvbnRlbnRWYWwgJiYgVnRyZWUubm9uVHJpdmlhbENvbnRlbnQoY29udGVudFZhbCkpIHtcbiAgICAgICAgbGV0IGlubmVyQ29udGFpbmVyVGFnID0gXCJzcGFuXCI7XG4gICAgICAgIGlmICgoY29udGVudFZhbCBhcyBhbnkpLnVybCkge1xuICAgICAgICAgIGlubmVyQ29udGFpbmVyVGFnID0gXCJpbWdcIjtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCBpbm5lckNvbnRhaW5lciA9IHRoaXMudmlld3BvcnQuZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcbiAgICAgICAgICBpbm5lckNvbnRhaW5lclRhZyxcbiAgICAgICAgKTtcbiAgICAgICAgY29udGVudFZhbC52aXNpdChcbiAgICAgICAgICBuZXcgVnRyZWUuQ29udGVudFByb3BlcnR5SGFuZGxlcihcbiAgICAgICAgICAgIGlubmVyQ29udGFpbmVyLFxuICAgICAgICAgICAgdGhpcyxcbiAgICAgICAgICAgIGNvbnRlbnRWYWwsXG4gICAgICAgICAgICB0aGlzLmNvdW50ZXJTdG9yZS5nZXRFeHByQ29udGVudExpc3RlbmVyKCksXG4gICAgICAgICAgKSxcbiAgICAgICAgKTtcbiAgICAgICAgYm94Q29udGFpbmVyLmFwcGVuZENoaWxkKGlubmVyQ29udGFpbmVyKTtcbiAgICAgICAgaWYgKGlubmVyQ29udGFpbmVyVGFnID09IFwiaW1nXCIpIHtcbiAgICAgICAgICBib3hJbnN0YW5jZS50cmFuc2ZlclNpbmdsVXJpQ29udGVudFByb3BzKFxuICAgICAgICAgICAgdGhpcyxcbiAgICAgICAgICAgIGlubmVyQ29udGFpbmVyLFxuICAgICAgICAgICAgdGhpcy5mYWNlcyxcbiAgICAgICAgICApO1xuICAgICAgICB9XG4gICAgICAgIGJveEluc3RhbmNlLnRyYW5zZmVyQ29udGVudFByb3BzKFxuICAgICAgICAgIHRoaXMsXG4gICAgICAgICAgbGF5b3V0Q29udGFpbmVyLFxuICAgICAgICAgIHBhZ2UsXG4gICAgICAgICAgdGhpcy5mYWNlcyxcbiAgICAgICAgKTtcbiAgICAgIH0gZWxzZSBpZiAoYm94SW5zdGFuY2Uuc3VwcHJlc3NFbXB0eUJveEdlbmVyYXRpb24pIHtcbiAgICAgICAgcGFyZW50Q29udGFpbmVyLnJlbW92ZUNoaWxkKGJveENvbnRhaW5lcik7XG4gICAgICAgIHJlbW92ZWQgPSB0cnVlO1xuICAgICAgfVxuICAgICAgaWYgKCFyZW1vdmVkKSB7XG4gICAgICAgIGJveEluc3RhbmNlLmZpbmlzaENvbnRhaW5lcihcbiAgICAgICAgICB0aGlzLFxuICAgICAgICAgIGxheW91dENvbnRhaW5lcixcbiAgICAgICAgICBwYWdlLFxuICAgICAgICAgIG51bGwsXG4gICAgICAgICAgMSxcbiAgICAgICAgICB0aGlzLmNsaWVudExheW91dCxcbiAgICAgICAgICB0aGlzLmZhY2VzLFxuICAgICAgICApO1xuICAgICAgfVxuICAgICAgY29udCA9IFRhc2submV3UmVzdWx0KHRydWUpO1xuICAgIH0gZWxzZSBpZiAoIXRoaXMucGFnZUJyZWFrc1tmbG93TmFtZS50b1N0cmluZygpXSkge1xuICAgICAgY29uc3QgaW5uZXJGcmFtZTogVGFzay5GcmFtZTxib29sZWFuPiA9IFRhc2submV3RnJhbWUoXG4gICAgICAgIFwibGF5b3V0Q29udGFpbmVyLmlubmVyXCIsXG4gICAgICApO1xuICAgICAgY29uc3QgZmxvd05hbWVTdHIgPSBmbG93TmFtZS50b1N0cmluZygpO1xuXG4gICAgICAvLyBmb3Igbm93IG9ubHkgYSBzaW5nbGUgY29sdW1uIGluIHZlcnRpY2FsIGNhc2VcbiAgICAgIGNvbnN0IGNvbHVtbkNvdW50ID0gYm94SW5zdGFuY2UuZ2V0UHJvcEFzTnVtYmVyKHRoaXMsIFwiY29sdW1uLWNvdW50XCIpO1xuICAgICAgdGhpcy5sYXlvdXRGbG93Q29sdW1uc1dpdGhCYWxhbmNpbmcoXG4gICAgICAgIHBhZ2UsXG4gICAgICAgIGJveEluc3RhbmNlLFxuICAgICAgICBvZmZzZXRYLFxuICAgICAgICBvZmZzZXRZLFxuICAgICAgICBleGNsdXNpb25zLFxuICAgICAgICBwYWdlUGFnZUZsb2F0TGF5b3V0Q29udGV4dCxcbiAgICAgICAgbGF5b3V0Q29udGFpbmVyLFxuICAgICAgICBmbG93TmFtZVN0cixcbiAgICAgICAgY29sdW1uQ291bnQsXG4gICAgICApLnRoZW4oKGNvbHVtbnMpID0+IHtcbiAgICAgICAgaWYgKCFwYWdlUGFnZUZsb2F0TGF5b3V0Q29udGV4dC5pc0ludmFsaWRhdGVkKCkpIHtcbiAgICAgICAgICBjb25zdCBjb2x1bW4gPSBjb2x1bW5zWzBdO1xuICAgICAgICAgIEFzc2VydHMuYXNzZXJ0KGNvbHVtbik7XG4gICAgICAgICAgaWYgKGNvbHVtbi5lbGVtZW50ID09PSBib3hDb250YWluZXIpIHtcbiAgICAgICAgICAgIGxheW91dENvbnRhaW5lciA9IGNvbHVtbjtcbiAgICAgICAgICB9XG4gICAgICAgICAgbGF5b3V0Q29udGFpbmVyLmNvbXB1dGVkQmxvY2tTaXplID0gTWF0aC5tYXguYXBwbHkoXG4gICAgICAgICAgICBudWxsLFxuICAgICAgICAgICAgY29sdW1ucy5tYXAoKGMpID0+IGMuY29tcHV0ZWRCbG9ja1NpemUpLFxuICAgICAgICAgICk7XG4gICAgICAgICAgYm94SW5zdGFuY2UuZmluaXNoQ29udGFpbmVyKFxuICAgICAgICAgICAgdGhpcyxcbiAgICAgICAgICAgIGxheW91dENvbnRhaW5lcixcbiAgICAgICAgICAgIHBhZ2UsXG4gICAgICAgICAgICBjb2x1bW4sXG4gICAgICAgICAgICBjb2x1bW5Db3VudCxcbiAgICAgICAgICAgIHRoaXMuY2xpZW50TGF5b3V0LFxuICAgICAgICAgICAgdGhpcy5mYWNlcyxcbiAgICAgICAgICApO1xuICAgICAgICAgIGNvbnN0IGZsb3dQb3NpdGlvbiA9IHRoaXMuY3VycmVudExheW91dFBvc2l0aW9uLmZsb3dQb3NpdGlvbnNbXG4gICAgICAgICAgICBmbG93TmFtZVN0clxuICAgICAgICAgIF07XG4gICAgICAgICAgaWYgKGZsb3dQb3NpdGlvbiAmJiBmbG93UG9zaXRpb24uYnJlYWtBZnRlciA9PT0gXCJyZWdpb25cIikge1xuICAgICAgICAgICAgZmxvd1Bvc2l0aW9uLmJyZWFrQWZ0ZXIgPSBudWxsO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBpbm5lckZyYW1lLmZpbmlzaCh0cnVlKTtcbiAgICAgIH0pO1xuICAgICAgY29udCA9IGlubmVyRnJhbWUucmVzdWx0KCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGlmICghcGFnZVBhZ2VGbG9hdExheW91dENvbnRleHQuaXNJbnZhbGlkYXRlZCgpKSB7XG4gICAgICAgIGJveEluc3RhbmNlLmZpbmlzaENvbnRhaW5lcihcbiAgICAgICAgICB0aGlzLFxuICAgICAgICAgIGxheW91dENvbnRhaW5lcixcbiAgICAgICAgICBwYWdlLFxuICAgICAgICAgIG51bGwsXG4gICAgICAgICAgMSxcbiAgICAgICAgICB0aGlzLmNsaWVudExheW91dCxcbiAgICAgICAgICB0aGlzLmZhY2VzLFxuICAgICAgICApO1xuICAgICAgfVxuICAgICAgY29udCA9IFRhc2submV3UmVzdWx0KHRydWUpO1xuICAgIH1cbiAgICBjb250LnRoZW4oKCkgPT4ge1xuICAgICAgaWYgKHBhZ2VQYWdlRmxvYXRMYXlvdXRDb250ZXh0LmlzSW52YWxpZGF0ZWQoKSkge1xuICAgICAgICBmcmFtZS5maW5pc2godHJ1ZSk7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cbiAgICAgIGlmIChcbiAgICAgICAgIWJveEluc3RhbmNlLmlzQXV0b0hlaWdodCB8fFxuICAgICAgICBNYXRoLmZsb29yKGxheW91dENvbnRhaW5lci5jb21wdXRlZEJsb2NrU2l6ZSkgPiAwXG4gICAgICApIHtcbiAgICAgICAgaWYgKCFyZW1vdmVkICYmICFkb250RXhjbHVkZSkge1xuICAgICAgICAgIGNvbnN0IG91dGVyU2hhcGVQcm9wID0gYm94SW5zdGFuY2UuZ2V0UHJvcCh0aGlzLCBcInNoYXBlLW91dHNpZGVcIik7XG4gICAgICAgICAgY29uc3Qgb3V0ZXJTaGFwZSA9IGxheW91dENvbnRhaW5lci5nZXRPdXRlclNoYXBlKFxuICAgICAgICAgICAgb3V0ZXJTaGFwZVByb3AsXG4gICAgICAgICAgICB0aGlzLFxuICAgICAgICAgICk7XG5cbiAgICAgICAgICAvLyBUaG91Z2ggaXQgc2VlbXMgdGhhdCBMU2hhcGVGbG9hdEJ1ZyBzdGlsbCBleGlzdHMgaW4gRmlyZWZveCwgaXRcbiAgICAgICAgICAvLyBhcHBhcmVudGx5IGRvZXMgbm90IG9jY3VyIG9uIGV4Y2x1c2lvbiBmbG9hdHMuIFNlZSB0aGUgdGVzdCBmaWxlOlxuICAgICAgICAgIC8vIHRlc3QvZmlsZXMvY29sdW1uLWJyZWFrLWJ1Zy5odG1sXG4gICAgICAgICAgLy8gaWYgKEJhc2UuY2hlY2tMU2hhcGVGbG9hdEJ1Zyh0aGlzLnZpZXdwb3J0LnJvb3QpKSB7XG4gICAgICAgICAgLy8gXHQvLyBTaW1wbGlzdGljIGJ1ZyB3b3JrYXJvdW5kOiBhZGQgYSBjb3B5IG9mIHRoZSBzaGFwZSB0cmFuc2xhdGVkIHVwLlxuICAgICAgICAgIC8vICAgICBleGNsdXNpb25zLnB1c2gob3V0ZXJTaGFwZS53aXRoT2Zmc2V0KDAsIC0xLjI1ICogdGhpcy5xdWVyeVVuaXRTaXplKFwiZW1cIiwgZmFsc2UpKSk7XG4gICAgICAgICAgLy8gfVxuICAgICAgICAgIGV4Y2x1c2lvbnMucHVzaChvdXRlclNoYXBlKTtcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIGlmIChib3hJbnN0YW5jZS5jaGlsZHJlbi5sZW5ndGggPT0gMCkge1xuICAgICAgICBwYXJlbnRDb250YWluZXIucmVtb3ZlQ2hpbGQoYm94Q29udGFpbmVyKTtcbiAgICAgICAgZnJhbWUuZmluaXNoKHRydWUpO1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG4gICAgICBsZXQgaSA9IGZvcndhcmRPcmRlckluTGF5b3V0ID8gMCA6IGJveEluc3RhbmNlLmNoaWxkcmVuLmxlbmd0aCAtIDE7XG4gICAgICBmcmFtZVxuICAgICAgICAubG9vcCgoKSA9PiB7XG4gICAgICAgICAgd2hpbGUgKGkgPj0gMCAmJiBpIDwgYm94SW5zdGFuY2UuY2hpbGRyZW4ubGVuZ3RoKSB7XG4gICAgICAgICAgICBjb25zdCBjaGlsZCA9XG4gICAgICAgICAgICAgIGJveEluc3RhbmNlLmNoaWxkcmVuW2ZvcndhcmRPcmRlckluTGF5b3V0ID8gaSsrIDogaS0tXTtcbiAgICAgICAgICAgIGNvbnN0IHIgPSB0aGlzLmxheW91dENvbnRhaW5lcihcbiAgICAgICAgICAgICAgcGFnZSxcbiAgICAgICAgICAgICAgY2hpbGQsXG4gICAgICAgICAgICAgIGJveENvbnRhaW5lciBhcyBIVE1MRWxlbWVudCxcbiAgICAgICAgICAgICAgb2Zmc2V0WCxcbiAgICAgICAgICAgICAgb2Zmc2V0WSxcbiAgICAgICAgICAgICAgZXhjbHVzaW9ucyxcbiAgICAgICAgICAgICAgcGFnZVBhZ2VGbG9hdExheW91dENvbnRleHQsXG4gICAgICAgICAgICApO1xuICAgICAgICAgICAgaWYgKHIuaXNQZW5kaW5nKCkpIHtcbiAgICAgICAgICAgICAgcmV0dXJuIHIudGhlbkFzeW5jKCgpID0+XG4gICAgICAgICAgICAgICAgVGFzay5uZXdSZXN1bHQoIXBhZ2VQYWdlRmxvYXRMYXlvdXRDb250ZXh0LmlzSW52YWxpZGF0ZWQoKSksXG4gICAgICAgICAgICAgICk7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKHBhZ2VQYWdlRmxvYXRMYXlvdXRDb250ZXh0LmlzSW52YWxpZGF0ZWQoKSkge1xuICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgICAgcmV0dXJuIFRhc2submV3UmVzdWx0KGZhbHNlKTtcbiAgICAgICAgfSlcbiAgICAgICAgLnRoZW4oKCkgPT4ge1xuICAgICAgICAgIGZyYW1lLmZpbmlzaCh0cnVlKTtcbiAgICAgICAgfSk7XG4gICAgfSk7XG4gICAgcmV0dXJuIGZyYW1lLnJlc3VsdCgpO1xuICB9XG5cbiAgcHJvY2Vzc0xpbmdlcigpOiB2b2lkIHtcbiAgICBjb25zdCBwYWdlTnVtYmVyID0gdGhpcy5jdXJyZW50TGF5b3V0UG9zaXRpb24ucGFnZTtcbiAgICBmb3IgKGNvbnN0IGZsb3dOYW1lIGluIHRoaXMuY3VycmVudExheW91dFBvc2l0aW9uLmZsb3dQb3NpdGlvbnMpIHtcbiAgICAgIGNvbnN0IGZsb3dQb3NpdGlvbiA9IHRoaXMuY3VycmVudExheW91dFBvc2l0aW9uLmZsb3dQb3NpdGlvbnNbZmxvd05hbWVdO1xuICAgICAgZm9yIChsZXQgaSA9IGZsb3dQb3NpdGlvbi5wb3NpdGlvbnMubGVuZ3RoIC0gMTsgaSA+PSAwOyBpLS0pIHtcbiAgICAgICAgY29uc3QgcG9zID0gZmxvd1Bvc2l0aW9uLnBvc2l0aW9uc1tpXTtcbiAgICAgICAgaWYgKFxuICAgICAgICAgIHBvcy5mbG93Q2h1bmsuc3RhcnRQYWdlID49IDAgJiZcbiAgICAgICAgICBwb3MuZmxvd0NodW5rLnN0YXJ0UGFnZSArIHBvcy5mbG93Q2h1bmsubGluZ2VyIC0gMSA8PSBwYWdlTnVtYmVyXG4gICAgICAgICkge1xuICAgICAgICAgIGZsb3dQb3NpdGlvbi5wb3NpdGlvbnMuc3BsaWNlKGksIDEpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgaW5pdExpbmdlcmluZygpOiB2b2lkIHtcbiAgICBjb25zdCBwYWdlTnVtYmVyID0gdGhpcy5jdXJyZW50TGF5b3V0UG9zaXRpb24ucGFnZTtcbiAgICBmb3IgKGNvbnN0IGZsb3dOYW1lIGluIHRoaXMuY3VycmVudExheW91dFBvc2l0aW9uLmZsb3dQb3NpdGlvbnMpIHtcbiAgICAgIGNvbnN0IGZsb3dQb3NpdGlvbiA9IHRoaXMuY3VycmVudExheW91dFBvc2l0aW9uLmZsb3dQb3NpdGlvbnNbZmxvd05hbWVdO1xuICAgICAgZm9yIChsZXQgaSA9IGZsb3dQb3NpdGlvbi5wb3NpdGlvbnMubGVuZ3RoIC0gMTsgaSA+PSAwOyBpLS0pIHtcbiAgICAgICAgY29uc3QgcG9zID0gZmxvd1Bvc2l0aW9uLnBvc2l0aW9uc1tpXTtcbiAgICAgICAgaWYgKFxuICAgICAgICAgIHBvcy5mbG93Q2h1bmsuc3RhcnRQYWdlIDwgMCAmJlxuICAgICAgICAgIHBvcy5mbG93Q2h1bmsuc3RhcnRPZmZzZXQgPCB0aGlzLmxvb2t1cE9mZnNldFxuICAgICAgICApIHtcbiAgICAgICAgICBwb3MuZmxvd0NodW5rLnN0YXJ0UGFnZSA9IHBhZ2VOdW1iZXI7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICBub01vcmVQcmltYXJ5Rmxvd3MoY3A6IFZ0cmVlLkxheW91dFBvc2l0aW9uKTogYm9vbGVhbiB7XG4gICAgZm9yIChjb25zdCBmbG93TmFtZSBpbiB0aGlzLnByaW1hcnlGbG93cykge1xuICAgICAgY29uc3QgZmxvd1Bvc2l0aW9uID0gY3AuZmxvd1Bvc2l0aW9uc1tmbG93TmFtZV07XG4gICAgICBpZiAoZmxvd1Bvc2l0aW9uICYmIGZsb3dQb3NpdGlvbi5wb3NpdGlvbnMubGVuZ3RoID4gMCkge1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiB0cnVlO1xuICB9XG5cbiAgbGF5b3V0TmV4dFBhZ2UoXG4gICAgcGFnZTogVnRyZWUuUGFnZSxcbiAgICBjcD86IFZ0cmVlLkxheW91dFBvc2l0aW9uLFxuICApOiBUYXNrLlJlc3VsdDxWdHJlZS5MYXlvdXRQb3NpdGlvbj4ge1xuICAgIC8vIFRPQyBib3ggaXMgc3BlY2lhbCBwYWdlIGNvbnRhaW5lciwgbm8gcGFnaW5hdGlvblxuICAgIGNvbnN0IGlzVG9jQm94ID0gcGFnZS5jb250YWluZXIgPT09IHBhZ2UuYmxlZWRCb3g7XG5cbiAgICB0aGlzLnBhZ2VCcmVha3MgPSB7fTtcbiAgICBpZiAoY3ApIHtcbiAgICAgIHRoaXMuY3VycmVudExheW91dFBvc2l0aW9uID0gY3AuY2xvbmUoKTtcbiAgICAgIHRoaXMuc3R5bGVyLnJlcGxheUZsb3dFbGVtZW50c0Zyb21PZmZzZXQoY3AuaGlnaGVzdFNlZW5PZmZzZXQpO1xuICAgIH0gZWxzZSB7XG4gICAgICB0aGlzLmN1cnJlbnRMYXlvdXRQb3NpdGlvbiA9IG5ldyBWdHJlZS5MYXlvdXRQb3NpdGlvbigpO1xuICAgICAgdGhpcy5zdHlsZXIucmVwbGF5Rmxvd0VsZW1lbnRzRnJvbU9mZnNldCgtMSk7XG4gICAgfVxuICAgIGlmICh0aGlzLmxhbmcpIHtcbiAgICAgIHBhZ2UuYmxlZWRCb3guc2V0QXR0cmlidXRlKFwibGFuZ1wiLCB0aGlzLmxhbmcpO1xuICAgIH1cbiAgICBjcCA9IHRoaXMuY3VycmVudExheW91dFBvc2l0aW9uO1xuICAgIGNwLnBhZ2UrKztcbiAgICB0aGlzLmNsZWFyU2NvcGUodGhpcy5zdHlsZS5wYWdlU2NvcGUpO1xuICAgIHRoaXMubGF5b3V0UG9zaXRpb25BdFBhZ2VTdGFydCA9IGNwLmNsb25lKCk7XG5cbiAgICAvLyBSZXNvbHZlIHBhZ2Ugc2l6ZSBiZWZvcmUgcGFnZSBtYXN0ZXIgc2VsZWN0aW9uLlxuICAgIGNvbnN0IGNhc2NhZGVkUGFnZVN0eWxlID0gaXNUb2NCb3hcbiAgICAgID8gKHt9IGFzIENzc0Nhc2NhZGUuRWxlbWVudFN0eWxlKVxuICAgICAgOiB0aGlzLnBhZ2VNYW5hZ2VyLmdldENhc2NhZGVkUGFnZVN0eWxlKCk7XG4gICAgY29uc3QgcGFnZU1hc3RlciA9IHRoaXMuc2VsZWN0UGFnZU1hc3RlcihjYXNjYWRlZFBhZ2VTdHlsZSk7XG4gICAgaWYgKCFwYWdlTWFzdGVyKSB7XG4gICAgICAvLyBlbmQgb2YgcHJpbWFyeSBjb250ZW50XG4gICAgICByZXR1cm4gVGFzay5uZXdSZXN1bHQobnVsbCBhcyBWdHJlZS5MYXlvdXRQb3NpdGlvbik7XG4gICAgfVxuICAgIGxldCBibGVlZEJveFBhZGRpbmdFZGdlID0gMDtcbiAgICBpZiAoIWlzVG9jQm94KSB7XG4gICAgICBwYWdlLnNldEF1dG9QYWdlV2lkdGgoXG4gICAgICAgIHBhZ2VNYXN0ZXIucGFnZUJveC5zcGVjaWZpZWRbXCJ3aWR0aFwiXS52YWx1ZSA9PT0gQ3NzLmZ1bGxXaWR0aCxcbiAgICAgICk7XG4gICAgICBwYWdlLnNldEF1dG9QYWdlSGVpZ2h0KFxuICAgICAgICBwYWdlTWFzdGVyLnBhZ2VCb3guc3BlY2lmaWVkW1wiaGVpZ2h0XCJdLnZhbHVlID09PSBDc3MuZnVsbEhlaWdodCxcbiAgICAgICk7XG4gICAgICB0aGlzLmNvdW50ZXJTdG9yZS5zZXRDdXJyZW50UGFnZShwYWdlKTtcbiAgICAgIHRoaXMuY291bnRlclN0b3JlLnVwZGF0ZVBhZ2VDb3VudGVycyhjYXNjYWRlZFBhZ2VTdHlsZSwgdGhpcyk7XG5cbiAgICAgIC8vIHNldHVwIGJsZWVkIGFyZWEgYW5kIGNyb3AgbWFya3NcbiAgICAgIGNvbnN0IGV2YWx1YXRlZFBhZ2VTaXplQW5kQmxlZWQgPSBDc3NQYWdlLmV2YWx1YXRlUGFnZVNpemVBbmRCbGVlZChcbiAgICAgICAgQ3NzUGFnZS5yZXNvbHZlUGFnZVNpemVBbmRCbGVlZChjYXNjYWRlZFBhZ2VTdHlsZSBhcyBhbnkpLFxuICAgICAgICB0aGlzLFxuICAgICAgKTtcbiAgICAgIHRoaXMuc2V0UGFnZVNpemVBbmRCbGVlZChldmFsdWF0ZWRQYWdlU2l6ZUFuZEJsZWVkLCBwYWdlKTtcbiAgICAgIENzc1BhZ2UuYWRkUHJpbnRlck1hcmtzKFxuICAgICAgICBjYXNjYWRlZFBhZ2VTdHlsZSxcbiAgICAgICAgZXZhbHVhdGVkUGFnZVNpemVBbmRCbGVlZCxcbiAgICAgICAgcGFnZSxcbiAgICAgICAgdGhpcyxcbiAgICAgICk7XG4gICAgICBibGVlZEJveFBhZGRpbmdFZGdlID1cbiAgICAgICAgZXZhbHVhdGVkUGFnZVNpemVBbmRCbGVlZC5ibGVlZE9mZnNldCArIGV2YWx1YXRlZFBhZ2VTaXplQW5kQmxlZWQuYmxlZWQ7XG4gICAgfVxuXG4gICAgY29uc3Qgd3JpdGluZ01vZGUgPVxuICAgICAgKCFpc1RvY0JveCAmJiBwYWdlTWFzdGVyLmdldFByb3AodGhpcywgXCJ3cml0aW5nLW1vZGVcIikpIHx8XG4gICAgICBDc3MuaWRlbnQuaG9yaXpvbnRhbF90YjtcblxuICAgIHRoaXMucGFnZVZlcnRpY2FsID0gd3JpdGluZ01vZGUgIT0gQ3NzLmlkZW50Lmhvcml6b250YWxfdGI7XG5cbiAgICBjb25zdCBkaXJlY3Rpb24gPSBwYWdlTWFzdGVyLmdldFByb3AodGhpcywgXCJkaXJlY3Rpb25cIikgfHwgQ3NzLmlkZW50Lmx0cjtcbiAgICBjb25zdCBwYWdlRmxvYXRMYXlvdXRDb250ZXh0ID0gbmV3IFBhZ2VGbG9hdHMuUGFnZUZsb2F0TGF5b3V0Q29udGV4dChcbiAgICAgIHRoaXMucm9vdFBhZ2VGbG9hdExheW91dENvbnRleHQsXG4gICAgICBQYWdlRmxvYXRzLkZsb2F0UmVmZXJlbmNlLlBBR0UsXG4gICAgICBudWxsLFxuICAgICAgbnVsbCxcbiAgICAgIG51bGwsXG4gICAgICB3cml0aW5nTW9kZSxcbiAgICAgIGRpcmVjdGlvbixcbiAgICApO1xuICAgIGNvbnN0IGZyYW1lOiBUYXNrLkZyYW1lPFZ0cmVlLkxheW91dFBvc2l0aW9uPiA9IFRhc2submV3RnJhbWUoXG4gICAgICBcImxheW91dE5leHRQYWdlXCIsXG4gICAgKTtcbiAgICBmcmFtZVxuICAgICAgLmxvb3BXaXRoRnJhbWUoKGxvb3BGcmFtZSkgPT4ge1xuICAgICAgICAvLyB0aGlzLmxheW91dENvbnRhaW5lcihwYWdlLCBwYWdlTWFzdGVyLCBwYWdlLmJsZWVkQm94LCBibGVlZEJveFBhZGRpbmdFZGdlLCBibGVlZEJveFBhZGRpbmdFZGdlKzEsIC8vIENvbXBlbnNhdGUgJ3RvcDogLTFweCcgb24gcGFnZSBtYXN0ZXJcbiAgICAgICAgdGhpcy5sYXlvdXRDb250YWluZXIoXG4gICAgICAgICAgcGFnZSxcbiAgICAgICAgICBwYWdlTWFzdGVyLFxuICAgICAgICAgIHBhZ2UuYmxlZWRCb3gsXG4gICAgICAgICAgYmxlZWRCb3hQYWRkaW5nRWRnZSxcbiAgICAgICAgICBibGVlZEJveFBhZGRpbmdFZGdlLFxuICAgICAgICAgIFtdLFxuICAgICAgICAgIHBhZ2VGbG9hdExheW91dENvbnRleHQsXG4gICAgICAgICkudGhlbigoKSA9PiB7XG4gICAgICAgICAgaWYgKCFwYWdlRmxvYXRMYXlvdXRDb250ZXh0LmlzSW52YWxpZGF0ZWQoKSkge1xuICAgICAgICAgICAgcGFnZUZsb2F0TGF5b3V0Q29udGV4dC5maW5pc2goKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgaWYgKHBhZ2VGbG9hdExheW91dENvbnRleHQuaXNJbnZhbGlkYXRlZCgpKSB7XG4gICAgICAgICAgICB0aGlzLmN1cnJlbnRMYXlvdXRQb3NpdGlvbiA9IHRoaXMubGF5b3V0UG9zaXRpb25BdFBhZ2VTdGFydC5jbG9uZSgpO1xuICAgICAgICAgICAgcGFnZUZsb2F0TGF5b3V0Q29udGV4dC52YWxpZGF0ZSgpO1xuICAgICAgICAgICAgbG9vcEZyYW1lLmNvbnRpbnVlTG9vcCgpO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBsb29wRnJhbWUuYnJlYWtMb29wKCk7XG4gICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICAgIH0pXG4gICAgICAudGhlbigoKSA9PiB7XG4gICAgICAgIHBhZ2VNYXN0ZXIuYWRqdXN0UGFnZUxheW91dCh0aGlzLCBwYWdlLCB0aGlzLmNsaWVudExheW91dCk7XG4gICAgICAgIGlmICghaXNUb2NCb3gpIHtcbiAgICAgICAgICBjb25zdCBpc0xlZnRQYWdlID0gbmV3IEV4cHJzLk5hbWVkKFxuICAgICAgICAgICAgcGFnZU1hc3Rlci5wYWdlQm94LnNjb3BlLFxuICAgICAgICAgICAgXCJsZWZ0LXBhZ2VcIixcbiAgICAgICAgICApO1xuICAgICAgICAgIHBhZ2Uuc2lkZSA9IGlzTGVmdFBhZ2UuZXZhbHVhdGUodGhpcylcbiAgICAgICAgICAgID8gQ29uc3RhbnRzLlBhZ2VTaWRlLkxFRlRcbiAgICAgICAgICAgIDogQ29uc3RhbnRzLlBhZ2VTaWRlLlJJR0hUO1xuICAgICAgICAgIHRoaXMucHJvY2Vzc0xpbmdlcigpO1xuICAgICAgICAgIGNwID0gdGhpcy5jdXJyZW50TGF5b3V0UG9zaXRpb247XG4gICAgICAgICAgT2JqZWN0LmtleXMoY3AuZmxvd1Bvc2l0aW9ucykuZm9yRWFjaCgoZmxvd05hbWUpID0+IHtcbiAgICAgICAgICAgIGNvbnN0IGZsb3dQb3NpdGlvbiA9IGNwLmZsb3dQb3NpdGlvbnNbZmxvd05hbWVdO1xuICAgICAgICAgICAgY29uc3QgYnJlYWtBZnRlciA9IGZsb3dQb3NpdGlvbi5icmVha0FmdGVyO1xuICAgICAgICAgICAgaWYgKFxuICAgICAgICAgICAgICBicmVha0FmdGVyICYmXG4gICAgICAgICAgICAgIChicmVha0FmdGVyID09PSBcInBhZ2VcIiB8fCAhdGhpcy5tYXRjaFBhZ2VTaWRlKGJyZWFrQWZ0ZXIpKVxuICAgICAgICAgICAgKSB7XG4gICAgICAgICAgICAgIGZsb3dQb3NpdGlvbi5icmVha0FmdGVyID0gbnVsbDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLmN1cnJlbnRMYXlvdXRQb3NpdGlvbiA9IHRoaXMubGF5b3V0UG9zaXRpb25BdFBhZ2VTdGFydCA9IG51bGw7XG4gICAgICAgIGNwLmhpZ2hlc3RTZWVuT2Zmc2V0ID0gdGhpcy5zdHlsZXIuZ2V0UmVhY2hlZE9mZnNldCgpO1xuICAgICAgICBjb25zdCB0cmlnZ2VycyA9IHRoaXMuc3R5bGUuc3RvcmUuZ2V0VHJpZ2dlcnNGb3JEb2ModGhpcy54bWxkb2MpO1xuICAgICAgICBwYWdlLmZpbmlzaCh0cmlnZ2VycywgdGhpcy5jbGllbnRMYXlvdXQpO1xuICAgICAgICBpZiAodGhpcy5ub01vcmVQcmltYXJ5Rmxvd3MoY3ApKSB7XG4gICAgICAgICAgY3AgPSBudWxsO1xuICAgICAgICB9XG4gICAgICAgIGZyYW1lLmZpbmlzaChjcCk7XG4gICAgICB9KTtcbiAgICByZXR1cm4gZnJhbWUucmVzdWx0KCk7XG4gIH1cblxuICAvKipcbiAgICogU2V0IGFjdHVhbCBwYWdlIHdpZHRoLCBoZWlnaHQgYW5kIGJsZWVkIGZyb20gc3R5bGUgc3BlY2lmaWVkIGluIHBhZ2VcbiAgICogY29udGV4dC5cbiAgICovXG4gIHByaXZhdGUgc2V0UGFnZVNpemVBbmRCbGVlZChcbiAgICBldmFsdWF0ZWRQYWdlU2l6ZUFuZEJsZWVkOiBDc3NQYWdlLkV2YWx1YXRlZFBhZ2VTaXplQW5kQmxlZWQsXG4gICAgcGFnZTogVnRyZWUuUGFnZSxcbiAgKSB7XG4gICAgdGhpcy5hY3R1YWxQYWdlV2lkdGggPSBldmFsdWF0ZWRQYWdlU2l6ZUFuZEJsZWVkLnBhZ2VXaWR0aDtcbiAgICB0aGlzLmFjdHVhbFBhZ2VIZWlnaHQgPSBldmFsdWF0ZWRQYWdlU2l6ZUFuZEJsZWVkLnBhZ2VIZWlnaHQ7XG4gICAgdGhpcy5wYWdlU2hlZXRXaWR0aCA9XG4gICAgICBldmFsdWF0ZWRQYWdlU2l6ZUFuZEJsZWVkLnBhZ2VXaWR0aCArXG4gICAgICBldmFsdWF0ZWRQYWdlU2l6ZUFuZEJsZWVkLmNyb3BPZmZzZXQgKiAyO1xuICAgIHRoaXMucGFnZVNoZWV0SGVpZ2h0ID1cbiAgICAgIGV2YWx1YXRlZFBhZ2VTaXplQW5kQmxlZWQucGFnZUhlaWdodCArXG4gICAgICBldmFsdWF0ZWRQYWdlU2l6ZUFuZEJsZWVkLmNyb3BPZmZzZXQgKiAyO1xuICAgIHBhZ2UuY29udGFpbmVyLnN0eWxlLndpZHRoID0gYCR7dGhpcy5wYWdlU2hlZXRXaWR0aH1weGA7XG4gICAgcGFnZS5jb250YWluZXIuc3R5bGUuaGVpZ2h0ID0gYCR7dGhpcy5wYWdlU2hlZXRIZWlnaHR9cHhgO1xuICAgIHBhZ2UuYmxlZWRCb3guc3R5bGUubGVmdCA9IGAke2V2YWx1YXRlZFBhZ2VTaXplQW5kQmxlZWQuYmxlZWRPZmZzZXR9cHhgO1xuICAgIHBhZ2UuYmxlZWRCb3guc3R5bGUucmlnaHQgPSBgJHtldmFsdWF0ZWRQYWdlU2l6ZUFuZEJsZWVkLmJsZWVkT2Zmc2V0fXB4YDtcbiAgICBwYWdlLmJsZWVkQm94LnN0eWxlLnRvcCA9IGAke2V2YWx1YXRlZFBhZ2VTaXplQW5kQmxlZWQuYmxlZWRPZmZzZXR9cHhgO1xuICAgIHBhZ2UuYmxlZWRCb3guc3R5bGUuYm90dG9tID0gYCR7ZXZhbHVhdGVkUGFnZVNpemVBbmRCbGVlZC5ibGVlZE9mZnNldH1weGA7XG4gICAgcGFnZS5ibGVlZEJveC5zdHlsZS5wYWRkaW5nID0gYCR7ZXZhbHVhdGVkUGFnZVNpemVBbmRCbGVlZC5ibGVlZH1weGA7XG5cbiAgICAvLyBTaGlmdCAxcHggdG8gd29ya2Fyb3VuZCBDaHJvbWUgcHJpbnRpbmcgYnVnIChDYW5jZWxlZCBiZWNhdXNlIG9mIGFub3RoZXIgQ2hyb21lIHByb2JsZW0pXG4gICAgLy8gcGFnZS5ibGVlZEJveC5zdHlsZS5wYWRkaW5nVG9wID0gYCR7ZXZhbHVhdGVkUGFnZVNpemVBbmRCbGVlZC5ibGVlZCsxfXB4YDtcblxuICAgIC8vIFNoaWZ0IDAuMDFweCB0byB3b3JrYXJvdW5kIEZpcmVmb3ggcHJpbnRpbmcgcHJvYmxlbVxuICAgIC8vIChUaGlzIHNtYWxsIHZhbHVlICg8IDEvNjQgcHgpIGhhcyBubyBlZmZlY3QgdG8gQ2hyb21lKVxuICAgIHBhZ2UuYmxlZWRCb3guc3R5bGUucGFkZGluZ1RvcCA9IGAke1xuICAgICAgZXZhbHVhdGVkUGFnZVNpemVBbmRCbGVlZC5ibGVlZCArIDAuMDFcbiAgICB9cHhgO1xuICB9XG59XG5cbmV4cG9ydCBjbGFzcyBCYXNlUGFyc2VySGFuZGxlciBleHRlbmRzIENzc0Nhc2NhZGUuQ2FzY2FkZVBhcnNlckhhbmRsZXIge1xuICBpbnNpZGVSZWdpb246IGJvb2xlYW4gPSBmYWxzZTtcblxuICBjb25zdHJ1Y3RvcihcbiAgICBwdWJsaWMgbWFzdGVySGFuZGxlcjogU3R5bGVQYXJzZXJIYW5kbGVyLFxuICAgIGNvbmRpdGlvbjogRXhwcnMuVmFsLFxuICAgIHBhcmVudDogQmFzZVBhcnNlckhhbmRsZXIsXG4gICAgcmVnaW9uSWQ6IHN0cmluZyB8IG51bGwsXG4gICkge1xuICAgIHN1cGVyKFxuICAgICAgbWFzdGVySGFuZGxlci5yb290U2NvcGUsXG4gICAgICBtYXN0ZXJIYW5kbGVyLFxuICAgICAgY29uZGl0aW9uLFxuICAgICAgcGFyZW50LFxuICAgICAgcmVnaW9uSWQsXG4gICAgICBtYXN0ZXJIYW5kbGVyLnZhbGlkYXRvclNldCxcbiAgICAgICFwYXJlbnQsXG4gICAgKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBAb3ZlcnJpZGVcbiAgICovXG4gIHN0YXJ0UGFnZVRlbXBsYXRlUnVsZSgpOiB2b2lkIHt9XG5cbiAgLyoqXG4gICAqIEBvdmVycmlkZVxuICAgKi9cbiAgc3RhcnRQYWdlTWFzdGVyUnVsZShcbiAgICBuYW1lOiBzdHJpbmcgfCBudWxsLFxuICAgIHBzZXVkb05hbWU6IHN0cmluZyB8IG51bGwsXG4gICAgY2xhc3Nlczogc3RyaW5nW10sXG4gICk6IHZvaWQge1xuICAgIGNvbnN0IHBhZ2VNYXN0ZXIgPSBuZXcgUGFnZU1hc3Rlci5QYWdlTWFzdGVyKFxuICAgICAgdGhpcy5tYXN0ZXJIYW5kbGVyLnBhZ2VTY29wZSxcbiAgICAgIG5hbWUsXG4gICAgICBwc2V1ZG9OYW1lLFxuICAgICAgY2xhc3NlcyxcbiAgICAgIHRoaXMubWFzdGVySGFuZGxlci5yb290Qm94LFxuICAgICAgdGhpcy5jb25kaXRpb24sXG4gICAgICB0aGlzLm93bmVyLmdldEJhc2VTcGVjaWZpY2l0eSgpLFxuICAgICk7XG4gICAgdGhpcy5tYXN0ZXJIYW5kbGVyLnB1c2hIYW5kbGVyKFxuICAgICAgbmV3IFBhZ2VNYXN0ZXIuUGFnZU1hc3RlclBhcnNlckhhbmRsZXIoXG4gICAgICAgIHBhZ2VNYXN0ZXIuc2NvcGUsXG4gICAgICAgIHRoaXMubWFzdGVySGFuZGxlcixcbiAgICAgICAgcGFnZU1hc3RlcixcbiAgICAgICAgdGhpcy52YWxpZGF0b3JTZXQsXG4gICAgICApLFxuICAgICk7XG4gIH1cblxuICAvKipcbiAgICogQG92ZXJyaWRlXG4gICAqL1xuICBzdGFydFdoZW5SdWxlKGV4cHI6IENzcy5FeHByKTogdm9pZCB7XG4gICAgbGV0IGNvbmRpdGlvbiA9IGV4cHIuZXhwcjtcbiAgICBpZiAodGhpcy5jb25kaXRpb24gIT0gbnVsbCkge1xuICAgICAgY29uZGl0aW9uID0gRXhwcnMuYW5kKHRoaXMuc2NvcGUsIHRoaXMuY29uZGl0aW9uLCBjb25kaXRpb24pO1xuICAgIH1cbiAgICB0aGlzLm1hc3RlckhhbmRsZXIucHVzaEhhbmRsZXIoXG4gICAgICBuZXcgQmFzZVBhcnNlckhhbmRsZXIodGhpcy5tYXN0ZXJIYW5kbGVyLCBjb25kaXRpb24sIHRoaXMsIHRoaXMucmVnaW9uSWQpLFxuICAgICk7XG4gIH1cblxuICAvKipcbiAgICogQG92ZXJyaWRlXG4gICAqL1xuICBzdGFydERlZmluZVJ1bGUoKTogdm9pZCB7XG4gICAgdGhpcy5tYXN0ZXJIYW5kbGVyLnB1c2hIYW5kbGVyKFxuICAgICAgbmV3IENzc0Nhc2NhZGUuRGVmaW5lUGFyc2VySGFuZGxlcih0aGlzLnNjb3BlLCB0aGlzLm93bmVyKSxcbiAgICApO1xuICB9XG5cbiAgLyoqXG4gICAqIEBvdmVycmlkZVxuICAgKi9cbiAgc3RhcnRGb250RmFjZVJ1bGUoKTogdm9pZCB7XG4gICAgY29uc3QgcHJvcGVydGllcyA9IHt9IGFzIENzc0Nhc2NhZGUuRWxlbWVudFN0eWxlO1xuICAgIHRoaXMubWFzdGVySGFuZGxlci5mb250RmFjZXMucHVzaCh7XG4gICAgICBwcm9wZXJ0aWVzLFxuICAgICAgY29uZGl0aW9uOiB0aGlzLmNvbmRpdGlvbixcbiAgICB9KTtcbiAgICB0aGlzLm1hc3RlckhhbmRsZXIucHVzaEhhbmRsZXIoXG4gICAgICBuZXcgQ3NzQ2FzY2FkZS5Qcm9wU2V0UGFyc2VySGFuZGxlcihcbiAgICAgICAgdGhpcy5zY29wZSxcbiAgICAgICAgdGhpcy5vd25lcixcbiAgICAgICAgbnVsbCxcbiAgICAgICAgcHJvcGVydGllcyxcbiAgICAgICAgdGhpcy5tYXN0ZXJIYW5kbGVyLnZhbGlkYXRvclNldCxcbiAgICAgICksXG4gICAgKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBAb3ZlcnJpZGVcbiAgICovXG4gIHN0YXJ0Rmxvd1J1bGUoZmxvd05hbWU6IHN0cmluZyk6IHZvaWQge1xuICAgIGxldCBzdHlsZSA9IHRoaXMubWFzdGVySGFuZGxlci5mbG93UHJvcHNbZmxvd05hbWVdO1xuICAgIGlmICghc3R5bGUpIHtcbiAgICAgIHN0eWxlID0ge30gYXMgQ3NzQ2FzY2FkZS5FbGVtZW50U3R5bGU7XG4gICAgICB0aGlzLm1hc3RlckhhbmRsZXIuZmxvd1Byb3BzW2Zsb3dOYW1lXSA9IHN0eWxlO1xuICAgIH1cbiAgICB0aGlzLm1hc3RlckhhbmRsZXIucHVzaEhhbmRsZXIoXG4gICAgICBuZXcgQ3NzQ2FzY2FkZS5Qcm9wU2V0UGFyc2VySGFuZGxlcihcbiAgICAgICAgdGhpcy5zY29wZSxcbiAgICAgICAgdGhpcy5vd25lcixcbiAgICAgICAgbnVsbCxcbiAgICAgICAgc3R5bGUsXG4gICAgICAgIHRoaXMubWFzdGVySGFuZGxlci52YWxpZGF0b3JTZXQsXG4gICAgICApLFxuICAgICk7XG4gIH1cblxuICAvKipcbiAgICogQG92ZXJyaWRlXG4gICAqL1xuICBzdGFydFZpZXdwb3J0UnVsZSgpOiB2b2lkIHtcbiAgICBjb25zdCB2aWV3cG9ydFByb3BzID0ge30gYXMgQ3NzQ2FzY2FkZS5FbGVtZW50U3R5bGU7XG4gICAgdGhpcy5tYXN0ZXJIYW5kbGVyLnZpZXdwb3J0UHJvcHMucHVzaCh2aWV3cG9ydFByb3BzKTtcbiAgICB0aGlzLm1hc3RlckhhbmRsZXIucHVzaEhhbmRsZXIoXG4gICAgICBuZXcgQ3NzQ2FzY2FkZS5Qcm9wU2V0UGFyc2VySGFuZGxlcihcbiAgICAgICAgdGhpcy5zY29wZSxcbiAgICAgICAgdGhpcy5vd25lcixcbiAgICAgICAgdGhpcy5jb25kaXRpb24sXG4gICAgICAgIHZpZXdwb3J0UHJvcHMsXG4gICAgICAgIHRoaXMubWFzdGVySGFuZGxlci52YWxpZGF0b3JTZXQsXG4gICAgICApLFxuICAgICk7XG4gIH1cblxuICAvKipcbiAgICogQG92ZXJyaWRlXG4gICAqL1xuICBzdGFydEZvb3Rub3RlUnVsZShwc2V1ZG9lbGVtOiBzdHJpbmcgfCBudWxsKTogdm9pZCB7XG4gICAgbGV0IHN0eWxlID0gdGhpcy5tYXN0ZXJIYW5kbGVyLmZvb3Rub3RlUHJvcHM7XG4gICAgaWYgKHBzZXVkb2VsZW0pIHtcbiAgICAgIGNvbnN0IHBzZXVkb3MgPSBDc3NDYXNjYWRlLmdldE11dGFibGVTdHlsZU1hcChzdHlsZSwgXCJfcHNldWRvc1wiKTtcbiAgICAgIHN0eWxlID0gcHNldWRvc1twc2V1ZG9lbGVtXTtcbiAgICAgIGlmICghc3R5bGUpIHtcbiAgICAgICAgc3R5bGUgPSB7fSBhcyBDc3NDYXNjYWRlLkVsZW1lbnRTdHlsZTtcbiAgICAgICAgcHNldWRvc1twc2V1ZG9lbGVtXSA9IHN0eWxlO1xuICAgICAgfVxuICAgIH1cbiAgICB0aGlzLm1hc3RlckhhbmRsZXIucHVzaEhhbmRsZXIoXG4gICAgICBuZXcgQ3NzQ2FzY2FkZS5Qcm9wU2V0UGFyc2VySGFuZGxlcihcbiAgICAgICAgdGhpcy5zY29wZSxcbiAgICAgICAgdGhpcy5vd25lcixcbiAgICAgICAgbnVsbCxcbiAgICAgICAgc3R5bGUsXG4gICAgICAgIHRoaXMubWFzdGVySGFuZGxlci52YWxpZGF0b3JTZXQsXG4gICAgICApLFxuICAgICk7XG4gIH1cblxuICAvKipcbiAgICogQG92ZXJyaWRlXG4gICAqL1xuICBzdGFydFJlZ2lvblJ1bGUoKTogdm9pZCB7XG4gICAgdGhpcy5pbnNpZGVSZWdpb24gPSB0cnVlO1xuICAgIHRoaXMuc3RhcnRTZWxlY3RvclJ1bGUoKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBAb3ZlcnJpZGVcbiAgICovXG4gIHN0YXJ0UGFnZVJ1bGUoKTogdm9pZCB7XG4gICAgY29uc3QgcGFnZUhhbmRsZXIgPSBuZXcgQ3NzUGFnZS5QYWdlUGFyc2VySGFuZGxlcihcbiAgICAgIHRoaXMubWFzdGVySGFuZGxlci5wYWdlU2NvcGUsXG4gICAgICB0aGlzLm1hc3RlckhhbmRsZXIsXG4gICAgICB0aGlzLFxuICAgICAgdGhpcy52YWxpZGF0b3JTZXQsXG4gICAgICB0aGlzLm1hc3RlckhhbmRsZXIucGFnZVByb3BzLFxuICAgICk7XG4gICAgdGhpcy5tYXN0ZXJIYW5kbGVyLnB1c2hIYW5kbGVyKHBhZ2VIYW5kbGVyKTtcbiAgICBwYWdlSGFuZGxlci5zdGFydFBhZ2VSdWxlKCk7XG4gIH1cblxuICAvKipcbiAgICogQG92ZXJyaWRlXG4gICAqL1xuICBzdGFydFJ1bGVCb2R5KCk6IHZvaWQge1xuICAgIENzc0Nhc2NhZGUuQ2FzY2FkZVBhcnNlckhhbmRsZXIucHJvdG90eXBlLnN0YXJ0UnVsZUJvZHkuY2FsbCh0aGlzKTtcbiAgICBpZiAodGhpcy5pbnNpZGVSZWdpb24pIHtcbiAgICAgIHRoaXMuaW5zaWRlUmVnaW9uID0gZmFsc2U7XG4gICAgICBjb25zdCByZWdpb25JZCA9IGBSJHt0aGlzLm1hc3RlckhhbmRsZXIucmVnaW9uQ291bnQrK31gO1xuICAgICAgdGhpcy5zcGVjaWFsKFwicmVnaW9uLWlkXCIsIENzcy5nZXROYW1lKHJlZ2lvbklkKSk7XG4gICAgICB0aGlzLmVuZFJ1bGUoKTtcbiAgICAgIGNvbnN0IHJlZ2lvbkhhbmRsZXIgPSBuZXcgQmFzZVBhcnNlckhhbmRsZXIoXG4gICAgICAgIHRoaXMubWFzdGVySGFuZGxlcixcbiAgICAgICAgdGhpcy5jb25kaXRpb24sXG4gICAgICAgIHRoaXMsXG4gICAgICAgIHJlZ2lvbklkLFxuICAgICAgKTtcbiAgICAgIHRoaXMubWFzdGVySGFuZGxlci5wdXNoSGFuZGxlcihyZWdpb25IYW5kbGVyKTtcbiAgICAgIHJlZ2lvbkhhbmRsZXIuc3RhcnRSdWxlQm9keSgpO1xuICAgIH1cbiAgfVxufVxuXG4vLyBvdmVycmlkZSwgc28gd2UgZG9uJ3QgcmVnaXN0ZXIgYW4gZXJyb3JcbmV4cG9ydCBmdW5jdGlvbiBwcm9jZXNzVmlld3BvcnRNZXRhKG1ldGE6IEVsZW1lbnQpOiBzdHJpbmcge1xuICBsZXQgY29udGVudCA9IG1ldGEuZ2V0QXR0cmlidXRlKFwiY29udGVudFwiKTtcbiAgaWYgKCFjb250ZW50KSB7XG4gICAgcmV0dXJuIFwiXCI7XG4gIH1cbiAgY29uc3QgdmFscyA9IHt9O1xuICBsZXQgcjogUmVnRXhwTWF0Y2hBcnJheTtcbiAgd2hpbGUgKFxuICAgIChyID0gY29udGVudC5tYXRjaChcbiAgICAgIC9eLD9cXHMqKFstQS1aYS16Xy5dWy1BLVphLXpfMC05Ll0qKVxccyo9XFxzKihbLStBLVphLXpfMC05Ll0qKVxccyovLFxuICAgICkpICE9IG51bGxcbiAgKSB7XG4gICAgY29udGVudCA9IGNvbnRlbnQuc3Vic3RyKHJbMF0ubGVuZ3RoKTtcbiAgICB2YWxzW3JbMV1dID0gclsyXTtcbiAgfVxuICBjb25zdCB3aWR0aCA9IHZhbHNbXCJ3aWR0aFwiXSAtIDA7XG4gIGNvbnN0IGhlaWdodCA9IHZhbHNbXCJoZWlnaHRcIl0gLSAwO1xuICBpZiAod2lkdGggJiYgaGVpZ2h0KSB7XG4gICAgcmV0dXJuIGBALWVwdWJ4LXZpZXdwb3J0e3dpZHRoOiR7d2lkdGh9cHg7aGVpZ2h0OiR7aGVpZ2h0fXB4O31gO1xuICB9XG4gIHJldHVybiBcIlwiO1xufVxuXG5leHBvcnQgY2xhc3MgU3R5bGVQYXJzZXJIYW5kbGVyIGV4dGVuZHMgQ3NzUGFyc2VyLkRpc3BhdGNoUGFyc2VySGFuZGxlciB7XG4gIHJvb3RTY29wZTogRXhwcnMuTGV4aWNhbFNjb3BlO1xuICBwYWdlU2NvcGU6IEV4cHJzLkxleGljYWxTY29wZTtcbiAgcm9vdEJveDogUGFnZU1hc3Rlci5Sb290UGFnZUJveDtcbiAgY2FzY2FkZVBhcnNlckhhbmRsZXI6IEJhc2VQYXJzZXJIYW5kbGVyO1xuICByZWdpb25Db3VudDogbnVtYmVyID0gMDtcbiAgZm9udEZhY2VzID0gW10gYXMgRm9udEZhY2VbXTtcbiAgZm9vdG5vdGVQcm9wcyA9IHt9IGFzIENzc0Nhc2NhZGUuRWxlbWVudFN0eWxlO1xuICBmbG93UHJvcHMgPSB7fSBhcyB7IFtrZXk6IHN0cmluZ106IENzc0Nhc2NhZGUuRWxlbWVudFN0eWxlIH07XG4gIHZpZXdwb3J0UHJvcHMgPSBbXSBhcyBDc3NDYXNjYWRlLkVsZW1lbnRTdHlsZVtdO1xuICBwYWdlUHJvcHMgPSB7fSBhcyB7IFtrZXk6IHN0cmluZ106IENzc0Nhc2NhZGUuRWxlbWVudFN0eWxlIH07XG4gIHNsYXZlOiBCYXNlUGFyc2VySGFuZGxlcjtcblxuICBjb25zdHJ1Y3RvcihwdWJsaWMgcmVhZG9ubHkgdmFsaWRhdG9yU2V0OiBDc3NWYWxpZGF0b3IuVmFsaWRhdG9yU2V0KSB7XG4gICAgc3VwZXIoKTtcbiAgICB0aGlzLnJvb3RTY29wZSA9IG5ldyBFeHBycy5MZXhpY2FsU2NvcGUobnVsbCk7XG4gICAgdGhpcy5wYWdlU2NvcGUgPSBuZXcgRXhwcnMuTGV4aWNhbFNjb3BlKHRoaXMucm9vdFNjb3BlKTtcbiAgICB0aGlzLnJvb3RCb3ggPSBuZXcgUGFnZU1hc3Rlci5Sb290UGFnZUJveCh0aGlzLnJvb3RTY29wZSk7XG4gICAgdGhpcy5jYXNjYWRlUGFyc2VySGFuZGxlciA9IG5ldyBCYXNlUGFyc2VySGFuZGxlcih0aGlzLCBudWxsLCBudWxsLCBudWxsKTtcbiAgICB0aGlzLnNsYXZlID0gdGhpcy5jYXNjYWRlUGFyc2VySGFuZGxlcjtcbiAgfVxuXG4gIC8qKlxuICAgKiBAb3ZlcnJpZGVcbiAgICovXG4gIGVycm9yKG1uZW1vbmljczogc3RyaW5nLCB0b2tlbjogQ3NzVG9rZW5pemVyLlRva2VuKTogdm9pZCB7XG4gICAgTG9nZ2luZy5sb2dnZXIud2FybihcIkNTUyBwYXJzZXI6XCIsIG1uZW1vbmljcyk7XG4gIH1cbn1cblxuZXhwb3J0IHR5cGUgU3R5bGVTb3VyY2UgPSB7XG4gIHVybDogc3RyaW5nO1xuICB0ZXh0OiBzdHJpbmcgfCBudWxsO1xuICBmbGF2b3I6IENzc1BhcnNlci5TdHlsZXNoZWV0Rmxhdm9yO1xuICBjbGFzc2VzOiBzdHJpbmcgfCBudWxsO1xuICBtZWRpYTogc3RyaW5nIHwgbnVsbDtcbn07XG5cbmV4cG9ydCBmdW5jdGlvbiBwYXJzZU9QU1Jlc291cmNlKFxuICByZXNwb25zZTogTmV0LlJlc3BvbnNlLFxuICBzdG9yZTogWG1sRG9jLlhNTERvY1N0b3JlLFxuKTogVGFzay5SZXN1bHQ8WG1sRG9jLlhNTERvY0hvbGRlcj4ge1xuICByZXR1cm4gKHN0b3JlIGFzIE9QU0RvY1N0b3JlKS5wYXJzZU9QU1Jlc291cmNlKHJlc3BvbnNlKTtcbn1cblxuZXhwb3J0IGNsYXNzIE9QU0RvY1N0b3JlIGV4dGVuZHMgTmV0LlJlc291cmNlU3RvcmU8WG1sRG9jLlhNTERvY0hvbGRlcj4ge1xuICBzdHlsZUJ5S2V5OiB7IFtrZXk6IHN0cmluZ106IFN0eWxlIH0gPSB7fTtcbiAgc3R5bGVGZXRjaGVyQnlLZXk6IHsgW2tleTogc3RyaW5nXTogVGFza1V0aWwuRmV0Y2hlcjxTdHlsZT4gfSA9IHt9O1xuICBzdHlsZUJ5RG9jVVJMOiB7IFtrZXk6IHN0cmluZ106IFN0eWxlIH0gPSB7fTtcbiAgdHJpZ2dlcnNCeURvY1VSTDogeyBba2V5OiBzdHJpbmddOiBWdHJlZS5UcmlnZ2VyW10gfSA9IHt9O1xuICB2YWxpZGF0b3JTZXQ6IENzc1ZhbGlkYXRvci5WYWxpZGF0b3JTZXQgPSBudWxsO1xuICBwcml2YXRlIHN0eWxlU2hlZXRzOiBTdHlsZVNvdXJjZVtdID0gW107XG4gIHByaXZhdGUgdHJpZ2dlclNpbmdsZURvY3VtZW50UHJlcHJvY2Vzc2luZzogYm9vbGVhbiA9IGZhbHNlO1xuXG4gIGNvbnN0cnVjdG9yKFxuICAgIHB1YmxpYyBmb250RGVvYmZ1c2NhdG9yOlxuICAgICAgfCAoKHAxOiBzdHJpbmcpID0+ICgocDE6IEJsb2IpID0+IFRhc2suUmVzdWx0PEJsb2I+KSB8IG51bGwpXG4gICAgICB8IG51bGwsXG4gICkge1xuICAgIHN1cGVyKHBhcnNlT1BTUmVzb3VyY2UsIE5ldC5YTUxIdHRwUmVxdWVzdFJlc3BvbnNlVHlwZS5ET0NVTUVOVCk7XG4gIH1cblxuICBpbml0KFxuICAgIGF1dGhvclN0eWxlU2hlZXRzOiB7IHVybDogc3RyaW5nIHwgbnVsbDsgdGV4dDogc3RyaW5nIHwgbnVsbCB9W10gfCBudWxsLFxuICAgIHVzZXJTdHlsZVNoZWV0czogeyB1cmw6IHN0cmluZyB8IG51bGw7IHRleHQ6IHN0cmluZyB8IG51bGwgfVtdIHwgbnVsbCxcbiAgKTogVGFzay5SZXN1bHQ8Ym9vbGVhbj4ge1xuICAgIHRoaXMuc2V0U3R5bGVTaGVldHMoYXV0aG9yU3R5bGVTaGVldHMgYXMgYW55LCB1c2VyU3R5bGVTaGVldHMgYXMgYW55KTtcbiAgICBjb25zdCB1c2VyQWdlbnRYTUwgPSBCYXNlLnJlc29sdmVVUkwoXG4gICAgICBcInVzZXItYWdlbnQueG1sXCIsXG4gICAgICBCYXNlLnJlc291cmNlQmFzZVVSTCxcbiAgICApO1xuICAgIGNvbnN0IGZyYW1lID0gVGFzay5uZXdGcmFtZTxib29sZWFuPihcIk9QU0RvY1N0b3JlLmluaXRcIik7XG4gICAgdGhpcy52YWxpZGF0b3JTZXQgPSBDc3NWYWxpZGF0b3IuYmFzZVZhbGlkYXRvclNldCgpO1xuICAgIGxvYWRVQUJhc2UoKS50aGVuKCgpID0+IHtcbiAgICAgIHRoaXMubG9hZCh1c2VyQWdlbnRYTUwpLnRoZW4oKCkgPT4ge1xuICAgICAgICB0aGlzLnRyaWdnZXJTaW5nbGVEb2N1bWVudFByZXByb2Nlc3NpbmcgPSB0cnVlO1xuICAgICAgICBmcmFtZS5maW5pc2godHJ1ZSk7XG4gICAgICB9KTtcbiAgICB9KTtcbiAgICByZXR1cm4gZnJhbWUucmVzdWx0KCk7XG4gIH1cblxuICBnZXRTdHlsZUZvckRvYyh4bWxkb2M6IFhtbERvYy5YTUxEb2NIb2xkZXIpOiBTdHlsZSB7XG4gICAgcmV0dXJuIHRoaXMuc3R5bGVCeURvY1VSTFt4bWxkb2MudXJsXTtcbiAgfVxuXG4gIGdldFRyaWdnZXJzRm9yRG9jKHhtbGRvYzogWG1sRG9jLlhNTERvY0hvbGRlcik6IFZ0cmVlLlRyaWdnZXJbXSB7XG4gICAgcmV0dXJuIHRoaXMudHJpZ2dlcnNCeURvY1VSTFt4bWxkb2MudXJsXTtcbiAgfVxuXG4gIC8qKlxuICAgKiBTZXQgYXV0aG9yIHN0eWxlc2hlZXRzIGFuZCB1c2VyIHN0eWxlc2hlZXRzLiBFeGlzdGluZyBzdHlsZSBzaGVldHMgYXJlXG4gICAqIHJlbW92ZWQuXG4gICAqL1xuICBwcml2YXRlIHNldFN0eWxlU2hlZXRzKFxuICAgIGF1dGhvclN0eWxlU2hlZXRzOiBTdHlsZVNvdXJjZVtdIHwgbnVsbCxcbiAgICB1c2VyU3R5bGVTaGVldHM6IFN0eWxlU291cmNlW10gfCBudWxsLFxuICApIHtcbiAgICB0aGlzLmNsZWFyU3R5bGVTaGVldHMoKTtcbiAgICBpZiAoYXV0aG9yU3R5bGVTaGVldHMpIHtcbiAgICAgIGF1dGhvclN0eWxlU2hlZXRzLmZvckVhY2godGhpcy5hZGRBdXRob3JTdHlsZVNoZWV0LCB0aGlzKTtcbiAgICB9XG4gICAgaWYgKHVzZXJTdHlsZVNoZWV0cykge1xuICAgICAgdXNlclN0eWxlU2hlZXRzLmZvckVhY2godGhpcy5hZGRVc2VyU3R5bGVTaGVldCwgdGhpcyk7XG4gICAgfVxuICB9XG5cbiAgcHJpdmF0ZSBjbGVhclN0eWxlU2hlZXRzKCkge1xuICAgIHRoaXMuc3R5bGVTaGVldHMuc3BsaWNlKDApO1xuICB9XG5cbiAgcHJpdmF0ZSBhZGRBdXRob3JTdHlsZVNoZWV0KHN0eWxlc2hlZXQ6IFN0eWxlU291cmNlKSB7XG4gICAgbGV0IHVybCA9IHN0eWxlc2hlZXQudXJsO1xuICAgIGlmICh1cmwpIHtcbiAgICAgIHVybCA9IEJhc2UucmVzb2x2ZVVSTChCYXNlLmNvbnZlcnRTcGVjaWFsVVJMKHVybCksIEJhc2UuYmFzZVVSTCk7XG4gICAgfVxuICAgIHRoaXMuc3R5bGVTaGVldHMucHVzaCh7XG4gICAgICB1cmwsXG4gICAgICB0ZXh0OiBzdHlsZXNoZWV0LnRleHQsXG4gICAgICBmbGF2b3I6IENzc1BhcnNlci5TdHlsZXNoZWV0Rmxhdm9yLkFVVEhPUixcbiAgICAgIGNsYXNzZXM6IG51bGwsXG4gICAgICBtZWRpYTogbnVsbCxcbiAgICB9KTtcbiAgfVxuXG4gIHByaXZhdGUgYWRkVXNlclN0eWxlU2hlZXQoc3R5bGVzaGVldDogU3R5bGVTb3VyY2UpIHtcbiAgICBsZXQgdXJsID0gc3R5bGVzaGVldC51cmw7XG4gICAgaWYgKHVybCkge1xuICAgICAgdXJsID0gQmFzZS5yZXNvbHZlVVJMKEJhc2UuY29udmVydFNwZWNpYWxVUkwodXJsKSwgQmFzZS5iYXNlVVJMKTtcbiAgICB9XG4gICAgdGhpcy5zdHlsZVNoZWV0cy5wdXNoKHtcbiAgICAgIHVybCxcbiAgICAgIHRleHQ6IHN0eWxlc2hlZXQudGV4dCxcbiAgICAgIGZsYXZvcjogQ3NzUGFyc2VyLlN0eWxlc2hlZXRGbGF2b3IuVVNFUixcbiAgICAgIGNsYXNzZXM6IG51bGwsXG4gICAgICBtZWRpYTogbnVsbCxcbiAgICB9KTtcbiAgfVxuXG4gIHBhcnNlT1BTUmVzb3VyY2UocmVzcG9uc2U6IE5ldC5SZXNwb25zZSk6IFRhc2suUmVzdWx0PFhtbERvYy5YTUxEb2NIb2xkZXI+IHtcbiAgICBjb25zdCBmcmFtZTogVGFzay5GcmFtZTxYbWxEb2MuWE1MRG9jSG9sZGVyPiA9IFRhc2submV3RnJhbWUoXG4gICAgICBcIk9QU0RvY1N0b3JlLmxvYWRcIixcbiAgICApO1xuICAgIGNvbnN0IHVybCA9IHJlc3BvbnNlLnVybDtcblxuICAgIC8vIEhhY2sgZm9yIFRPQ1ZpZXcuc2hvd1RPQygpXG4gICAgY29uc3QgaXNUb2NCb3ggPSB1cmwuZW5kc1dpdGgoXCI/dml2LXRvYy1ib3hcIik7XG5cbiAgICBYbWxEb2MucGFyc2VYTUxSZXNvdXJjZShyZXNwb25zZSwgdGhpcykudGhlbihcbiAgICAgICh4bWxkb2M6IFhtbERvYy5YTUxEb2NIb2xkZXIpID0+IHtcbiAgICAgICAgaWYgKCF4bWxkb2MpIHtcbiAgICAgICAgICBmcmFtZS5maW5pc2gobnVsbCk7XG4gICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIGlmICh0aGlzLnRyaWdnZXJTaW5nbGVEb2N1bWVudFByZXByb2Nlc3NpbmcpIHtcbiAgICAgICAgICBjb25zdCBob29rczogUGx1Z2luLlByZVByb2Nlc3NTaW5nbGVEb2N1bWVudEhvb2tbXSA9IFBsdWdpbi5nZXRIb29rc0Zvck5hbWUoXG4gICAgICAgICAgICBQbHVnaW4uSE9PS1MuUFJFUFJPQ0VTU19TSU5HTEVfRE9DVU1FTlQsXG4gICAgICAgICAgKTtcbiAgICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IGhvb2tzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICBob29rc1tpXSh4bWxkb2MuZG9jdW1lbnQpO1xuICAgICAgICAgICAgfSBjYXRjaCAoZSkge1xuICAgICAgICAgICAgICBMb2dnaW5nLmxvZ2dlci53YXJuKFxuICAgICAgICAgICAgICAgIFwiRXJyb3IgZHVyaW5nIHNpbmdsZSBkb2N1bWVudCBwcmVwcm9jZXNzaW5nOlwiLFxuICAgICAgICAgICAgICAgIGUsXG4gICAgICAgICAgICAgICk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGNvbnN0IHRyaWdnZXJzID0gW107XG4gICAgICAgIGNvbnN0IHRyaWdnZXJMaXN0ID0geG1sZG9jLmRvY3VtZW50LmdldEVsZW1lbnRzQnlUYWdOYW1lTlMoXG4gICAgICAgICAgQmFzZS5OUy5lcHViLFxuICAgICAgICAgIFwidHJpZ2dlclwiLFxuICAgICAgICApO1xuICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IHRyaWdnZXJMaXN0Lmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgY29uc3QgdHJpZ2dlckVsZW0gPSB0cmlnZ2VyTGlzdFtpXTtcbiAgICAgICAgICBjb25zdCBvYnNlcnZlciA9IHRyaWdnZXJFbGVtLmdldEF0dHJpYnV0ZU5TKEJhc2UuTlMuRVYsIFwib2JzZXJ2ZXJcIik7XG4gICAgICAgICAgY29uc3QgZXZlbnQgPSB0cmlnZ2VyRWxlbS5nZXRBdHRyaWJ1dGVOUyhCYXNlLk5TLkVWLCBcImV2ZW50XCIpO1xuICAgICAgICAgIGNvbnN0IGFjdGlvbiA9IHRyaWdnZXJFbGVtLmdldEF0dHJpYnV0ZShcImFjdGlvblwiKTtcbiAgICAgICAgICBjb25zdCByZWYgPSB0cmlnZ2VyRWxlbS5nZXRBdHRyaWJ1dGUoXCJyZWZcIik7XG4gICAgICAgICAgaWYgKG9ic2VydmVyICYmIGV2ZW50ICYmIGFjdGlvbiAmJiByZWYpIHtcbiAgICAgICAgICAgIHRyaWdnZXJzLnB1c2goeyBvYnNlcnZlciwgZXZlbnQsIGFjdGlvbiwgcmVmIH0pO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICB0aGlzLnRyaWdnZXJzQnlEb2NVUkxbdXJsXSA9IHRyaWdnZXJzO1xuICAgICAgICBjb25zdCBzb3VyY2VzID0gW10gYXMgU3R5bGVTb3VyY2VbXTtcbiAgICAgICAgY29uc3QgdXNlckFnZW50VVJMID0gQmFzZS5yZXNvbHZlVVJMKFxuICAgICAgICAgIFwidXNlci1hZ2VudC1wYWdlLmNzc1wiLFxuICAgICAgICAgIEJhc2UucmVzb3VyY2VCYXNlVVJMLFxuICAgICAgICApO1xuICAgICAgICBzb3VyY2VzLnB1c2goe1xuICAgICAgICAgIHVybDogdXNlckFnZW50VVJMLFxuICAgICAgICAgIHRleHQ6IFVzZXJBZ2VudFBhZ2VDc3MsXG4gICAgICAgICAgZmxhdm9yOiBDc3NQYXJzZXIuU3R5bGVzaGVldEZsYXZvci5VU0VSX0FHRU5ULFxuICAgICAgICAgIGNsYXNzZXM6IG51bGwsXG4gICAgICAgICAgbWVkaWE6IG51bGwsXG4gICAgICAgIH0pO1xuICAgICAgICBpZiAoIWlzVG9jQm94KSB7XG4gICAgICAgICAgY29uc3QgZWxlbUxpc3QgPSB4bWxkb2MuZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbChcbiAgICAgICAgICAgIFwic3R5bGUsIGxpbmssIG1ldGFcIixcbiAgICAgICAgICApO1xuICAgICAgICAgIGZvciAoY29uc3QgZWxlbSBvZiBlbGVtTGlzdCkge1xuICAgICAgICAgICAgY29uc3QgbnMgPSBlbGVtLm5hbWVzcGFjZVVSSTtcbiAgICAgICAgICAgIGNvbnN0IGxvY2FsTmFtZSA9IGVsZW0ubG9jYWxOYW1lO1xuICAgICAgICAgICAgaWYgKG5zID09IEJhc2UuTlMuWEhUTUwpIHtcbiAgICAgICAgICAgICAgaWYgKGxvY2FsTmFtZSA9PSBcInN0eWxlXCIpIHtcbiAgICAgICAgICAgICAgICBjb25zdCBjbGFzc2VzID0gZWxlbS5nZXRBdHRyaWJ1dGUoXCJjbGFzc1wiKTtcbiAgICAgICAgICAgICAgICBjb25zdCBtZWRpYSA9IGVsZW0uZ2V0QXR0cmlidXRlKFwibWVkaWFcIik7XG4gICAgICAgICAgICAgICAgY29uc3QgdGl0bGUgPSBlbGVtLmdldEF0dHJpYnV0ZShcInRpdGxlXCIpO1xuICAgICAgICAgICAgICAgIHNvdXJjZXMucHVzaCh7XG4gICAgICAgICAgICAgICAgICB1cmwsXG4gICAgICAgICAgICAgICAgICB0ZXh0OiBlbGVtLnRleHRDb250ZW50LFxuICAgICAgICAgICAgICAgICAgZmxhdm9yOiBDc3NQYXJzZXIuU3R5bGVzaGVldEZsYXZvci5BVVRIT1IsXG4gICAgICAgICAgICAgICAgICBjbGFzc2VzOiB0aXRsZSA/IGNsYXNzZXMgOiBudWxsLFxuICAgICAgICAgICAgICAgICAgbWVkaWEsXG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgIH0gZWxzZSBpZiAobG9jYWxOYW1lID09IFwibGlua1wiKSB7XG4gICAgICAgICAgICAgICAgY29uc3QgcmVsID0gZWxlbS5nZXRBdHRyaWJ1dGUoXCJyZWxcIik7XG4gICAgICAgICAgICAgICAgY29uc3QgY2xhc3NlcyA9IGVsZW0uZ2V0QXR0cmlidXRlKFwiY2xhc3NcIik7XG4gICAgICAgICAgICAgICAgY29uc3QgbWVkaWEgPSBlbGVtLmdldEF0dHJpYnV0ZShcIm1lZGlhXCIpO1xuICAgICAgICAgICAgICAgIGlmIChcbiAgICAgICAgICAgICAgICAgIHJlbCA9PSBcInN0eWxlc2hlZXRcIiB8fFxuICAgICAgICAgICAgICAgICAgKHJlbCA9PSBcImFsdGVybmF0ZSBzdHlsZXNoZWV0XCIgJiYgY2xhc3NlcylcbiAgICAgICAgICAgICAgICApIHtcbiAgICAgICAgICAgICAgICAgIGxldCBzcmMgPSBlbGVtLmdldEF0dHJpYnV0ZShcImhyZWZcIik7XG4gICAgICAgICAgICAgICAgICBzcmMgPSBCYXNlLnJlc29sdmVVUkwoc3JjLCB1cmwpO1xuICAgICAgICAgICAgICAgICAgY29uc3QgdGl0bGUgPSBlbGVtLmdldEF0dHJpYnV0ZShcInRpdGxlXCIpO1xuICAgICAgICAgICAgICAgICAgc291cmNlcy5wdXNoKHtcbiAgICAgICAgICAgICAgICAgICAgdXJsOiBzcmMsXG4gICAgICAgICAgICAgICAgICAgIHRleHQ6IG51bGwsXG4gICAgICAgICAgICAgICAgICAgIGNsYXNzZXM6IHRpdGxlID8gY2xhc3NlcyA6IG51bGwsXG4gICAgICAgICAgICAgICAgICAgIG1lZGlhLFxuICAgICAgICAgICAgICAgICAgICBmbGF2b3I6IENzc1BhcnNlci5TdHlsZXNoZWV0Rmxhdm9yLkFVVEhPUixcbiAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgfSBlbHNlIGlmIChcbiAgICAgICAgICAgICAgICBsb2NhbE5hbWUgPT0gXCJtZXRhXCIgJiZcbiAgICAgICAgICAgICAgICBlbGVtLmdldEF0dHJpYnV0ZShcIm5hbWVcIikgPT0gXCJ2aWV3cG9ydFwiXG4gICAgICAgICAgICAgICkge1xuICAgICAgICAgICAgICAgIHNvdXJjZXMucHVzaCh7XG4gICAgICAgICAgICAgICAgICB1cmwsXG4gICAgICAgICAgICAgICAgICB0ZXh0OiBwcm9jZXNzVmlld3BvcnRNZXRhKGVsZW0pLFxuICAgICAgICAgICAgICAgICAgZmxhdm9yOiBDc3NQYXJzZXIuU3R5bGVzaGVldEZsYXZvci5BVVRIT1IsXG4gICAgICAgICAgICAgICAgICBjbGFzc2VzOiBudWxsLFxuICAgICAgICAgICAgICAgICAgbWVkaWE6IG51bGwsXG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCB0aGlzLnN0eWxlU2hlZXRzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICBzb3VyY2VzLnB1c2godGhpcy5zdHlsZVNoZWV0c1tpXSk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGxldCBrZXkgPSBcIlwiO1xuICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IHNvdXJjZXMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICBrZXkgKz0gc291cmNlc1tpXS51cmw7XG4gICAgICAgICAga2V5ICs9IFwiXlwiO1xuICAgICAgICAgIGlmIChzb3VyY2VzW2ldLnRleHQpIHtcbiAgICAgICAgICAgIGtleSArPSBzb3VyY2VzW2ldLnRleHQ7XG4gICAgICAgICAgfVxuICAgICAgICAgIGtleSArPSBcIl5cIjtcbiAgICAgICAgfVxuICAgICAgICBsZXQgc3R5bGUgPSB0aGlzLnN0eWxlQnlLZXlba2V5XTtcbiAgICAgICAgaWYgKHN0eWxlKSB7XG4gICAgICAgICAgdGhpcy5zdHlsZUJ5RG9jVVJMW3VybF0gPSBzdHlsZTtcbiAgICAgICAgICBmcmFtZS5maW5pc2goeG1sZG9jKTtcbiAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgbGV0IGZldGNoZXIgPSB0aGlzLnN0eWxlRmV0Y2hlckJ5S2V5W2tleV07XG4gICAgICAgIGlmICghZmV0Y2hlcikge1xuICAgICAgICAgIGZldGNoZXIgPSBuZXcgVGFza1V0aWwuRmV0Y2hlcigoKSA9PiB7XG4gICAgICAgICAgICBjb25zdCBpbm5lckZyYW1lOiBUYXNrLkZyYW1lPFN0eWxlPiA9IFRhc2submV3RnJhbWUoXG4gICAgICAgICAgICAgIFwiZmV0Y2hTdHlsZXNoZWV0XCIsXG4gICAgICAgICAgICApO1xuICAgICAgICAgICAgbGV0IGluZGV4ID0gMDtcbiAgICAgICAgICAgIGNvbnN0IHNwaCA9IG5ldyBTdHlsZVBhcnNlckhhbmRsZXIodGhpcy52YWxpZGF0b3JTZXQpO1xuICAgICAgICAgICAgaW5uZXJGcmFtZVxuICAgICAgICAgICAgICAubG9vcCgoKSA9PiB7XG4gICAgICAgICAgICAgICAgaWYgKGluZGV4IDwgc291cmNlcy5sZW5ndGgpIHtcbiAgICAgICAgICAgICAgICAgIGNvbnN0IHNvdXJjZSA9IHNvdXJjZXNbaW5kZXgrK107XG4gICAgICAgICAgICAgICAgICBzcGguc3RhcnRTdHlsZXNoZWV0KHNvdXJjZS5mbGF2b3IpO1xuICAgICAgICAgICAgICAgICAgaWYgKHNvdXJjZS50ZXh0ICE9PSBudWxsKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBDc3NQYXJzZXIucGFyc2VTdHlsZXNoZWV0RnJvbVRleHQoXG4gICAgICAgICAgICAgICAgICAgICAgc291cmNlLnRleHQsXG4gICAgICAgICAgICAgICAgICAgICAgc3BoLFxuICAgICAgICAgICAgICAgICAgICAgIHNvdXJjZS51cmwsXG4gICAgICAgICAgICAgICAgICAgICAgc291cmNlLmNsYXNzZXMsXG4gICAgICAgICAgICAgICAgICAgICAgc291cmNlLm1lZGlhLFxuICAgICAgICAgICAgICAgICAgICApLnRoZW5SZXR1cm4odHJ1ZSk7XG4gICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gQ3NzUGFyc2VyLnBhcnNlU3R5bGVzaGVldEZyb21VUkwoXG4gICAgICAgICAgICAgICAgICAgICAgc291cmNlLnVybCxcbiAgICAgICAgICAgICAgICAgICAgICBzcGgsXG4gICAgICAgICAgICAgICAgICAgICAgc291cmNlLmNsYXNzZXMsXG4gICAgICAgICAgICAgICAgICAgICAgc291cmNlLm1lZGlhLFxuICAgICAgICAgICAgICAgICAgICApO1xuICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICByZXR1cm4gVGFzay5uZXdSZXN1bHQoZmFsc2UpO1xuICAgICAgICAgICAgICB9KVxuICAgICAgICAgICAgICAudGhlbigoKSA9PiB7XG4gICAgICAgICAgICAgICAgY29uc3QgY2FzY2FkZSA9IHNwaC5jYXNjYWRlUGFyc2VySGFuZGxlci5maW5pc2goKTtcbiAgICAgICAgICAgICAgICBzdHlsZSA9IG5ldyBTdHlsZShcbiAgICAgICAgICAgICAgICAgIHRoaXMsXG4gICAgICAgICAgICAgICAgICBzcGgucm9vdFNjb3BlLFxuICAgICAgICAgICAgICAgICAgc3BoLnBhZ2VTY29wZSxcbiAgICAgICAgICAgICAgICAgIGNhc2NhZGUsXG4gICAgICAgICAgICAgICAgICBzcGgucm9vdEJveCxcbiAgICAgICAgICAgICAgICAgIHNwaC5mb250RmFjZXMsXG4gICAgICAgICAgICAgICAgICBzcGguZm9vdG5vdGVQcm9wcyxcbiAgICAgICAgICAgICAgICAgIHNwaC5mbG93UHJvcHMsXG4gICAgICAgICAgICAgICAgICBzcGgudmlld3BvcnRQcm9wcyxcbiAgICAgICAgICAgICAgICAgIHNwaC5wYWdlUHJvcHMsXG4gICAgICAgICAgICAgICAgKTtcbiAgICAgICAgICAgICAgICB0aGlzLnN0eWxlQnlLZXlba2V5XSA9IHN0eWxlO1xuICAgICAgICAgICAgICAgIGRlbGV0ZSB0aGlzLnN0eWxlRmV0Y2hlckJ5S2V5W2tleV07XG4gICAgICAgICAgICAgICAgaW5uZXJGcmFtZS5maW5pc2goc3R5bGUpO1xuICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIHJldHVybiBpbm5lckZyYW1lLnJlc3VsdCgpO1xuICAgICAgICAgIH0sIGBGZXRjaFN0eWxlc2hlZXQgJHt1cmx9YCk7XG4gICAgICAgICAgdGhpcy5zdHlsZUZldGNoZXJCeUtleVtrZXldID0gZmV0Y2hlcjtcbiAgICAgICAgICBmZXRjaGVyLnN0YXJ0KCk7XG4gICAgICAgIH1cbiAgICAgICAgZmV0Y2hlci5nZXQoKS50aGVuKChzdHlsZSkgPT4ge1xuICAgICAgICAgIHRoaXMuc3R5bGVCeURvY1VSTFt1cmxdID0gc3R5bGU7XG4gICAgICAgICAgZnJhbWUuZmluaXNoKHhtbGRvYyk7XG4gICAgICAgIH0pO1xuICAgICAgfSxcbiAgICApO1xuICAgIHJldHVybiBmcmFtZS5yZXN1bHQoKTtcbiAgfVxufVxuIiwiLyoqXG4gKiBDb3B5cmlnaHQgMjAxMyBHb29nbGUsIEluYy5cbiAqIENvcHlyaWdodCAyMDE3IFRyaW0tbWFya3MgSW5jLlxuICogQ29weXJpZ2h0IDIwMTkgVml2bGlvc3R5bGUgRm91bmRhdGlvblxuICpcbiAqIFZpdmxpb3N0eWxlLmpzIGlzIGZyZWUgc29mdHdhcmU6IHlvdSBjYW4gcmVkaXN0cmlidXRlIGl0IGFuZC9vciBtb2RpZnlcbiAqIGl0IHVuZGVyIHRoZSB0ZXJtcyBvZiB0aGUgR05VIEFmZmVybyBHZW5lcmFsIFB1YmxpYyBMaWNlbnNlIGFzIHB1Ymxpc2hlZCBieVxuICogdGhlIEZyZWUgU29mdHdhcmUgRm91bmRhdGlvbiwgZWl0aGVyIHZlcnNpb24gMyBvZiB0aGUgTGljZW5zZSwgb3JcbiAqIChhdCB5b3VyIG9wdGlvbikgYW55IGxhdGVyIHZlcnNpb24uXG4gKlxuICogVml2bGlvc3R5bGUuanMgaXMgZGlzdHJpYnV0ZWQgaW4gdGhlIGhvcGUgdGhhdCBpdCB3aWxsIGJlIHVzZWZ1bCxcbiAqIGJ1dCBXSVRIT1VUIEFOWSBXQVJSQU5UWTsgd2l0aG91dCBldmVuIHRoZSBpbXBsaWVkIHdhcnJhbnR5IG9mXG4gKiBNRVJDSEFOVEFCSUxJVFkgb3IgRklUTkVTUyBGT1IgQSBQQVJUSUNVTEFSIFBVUlBPU0UuICBTZWUgdGhlXG4gKiBHTlUgQWZmZXJvIEdlbmVyYWwgUHVibGljIExpY2Vuc2UgZm9yIG1vcmUgZGV0YWlscy5cbiAqXG4gKiBZb3Ugc2hvdWxkIGhhdmUgcmVjZWl2ZWQgYSBjb3B5IG9mIHRoZSBHTlUgQWZmZXJvIEdlbmVyYWwgUHVibGljIExpY2Vuc2VcbiAqIGFsb25nIHdpdGggVml2bGlvc3R5bGUuanMuICBJZiBub3QsIHNlZSA8aHR0cDovL3d3dy5nbnUub3JnL2xpY2Vuc2VzLz4uXG4gKlxuICogQGZpbGVvdmVydmlldyBTaGExIC0gQ2FsY3VsYXRlIFNIQTEgaGFzaCBvZiB0aGUgZ2l2ZW4gY29udGVudC5cbiAqL1xuaW1wb3J0ICogYXMgQmFzZSBmcm9tIFwiLi9iYXNlXCI7XG5cbi8qKlxuICogQHJldHVybiBiaWctZW5kaWFuIGJ5dGUgc2VxdWVuY2VcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGVuY29kZTMyKG46IG51bWJlcik6IHN0cmluZyB7XG4gIHJldHVybiBTdHJpbmcuZnJvbUNoYXJDb2RlKFxuICAgIChuID4+PiAyNCkgJiAyNTUsXG4gICAgKG4gPj4+IDE2KSAmIDI1NSxcbiAgICAobiA+Pj4gOCkgJiAyNTUsXG4gICAgbiAmIDI1NSxcbiAgKTtcbn1cblxuLyoqXG4gKiBAcGFyYW0gYnl0ZXMgYmlnLWVuZGlhbiBieXRlIHNlcXVlbmNlXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBkZWNvZGUzMihieXRlczogc3RyaW5nKTogbnVtYmVyIHtcbiAgLy8gSW1wb3J0YW50IGZhY3RzOiBcIlwiLmNoYXJDb2RlQXQoMCkgPT0gTmFOLCBOYU4gJiAweEZGID09IDBcbiAgY29uc3QgYjAgPSBieXRlcy5jaGFyQ29kZUF0KDApICYgMjU1O1xuICBjb25zdCBiMSA9IGJ5dGVzLmNoYXJDb2RlQXQoMSkgJiAyNTU7XG4gIGNvbnN0IGIyID0gYnl0ZXMuY2hhckNvZGVBdCgyKSAmIDI1NTtcbiAgY29uc3QgYjMgPSBieXRlcy5jaGFyQ29kZUF0KDMpICYgMjU1O1xuICByZXR1cm4gKGIwIDw8IDI0KSB8IChiMSA8PCAxNikgfCAoYjIgPDwgOCkgfCBiMztcbn1cblxuLyoqXG4gKiBAcGFyYW0gYnl0ZXMgY2hhcnMgd2l0aCBjb2RlcyAwIC0gMjU1IHRoYXQgcmVwcmVzZW50IG1lc3NhZ2UgYnl0ZSB2YWx1ZXNcbiAqIEByZXR1cm4gYmlnLWVuZGlhbiB1aW50MzIgbnVtYmVycyByZXByZXNlbnRpbmcgc2hhMSBoYXNoXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBieXRlc1RvU0hBMUludDMyKGJ5dGVzOiBzdHJpbmcpOiBudW1iZXJbXSB7XG4gIGNvbnN0IHNiID0gbmV3IEJhc2UuU3RyaW5nQnVmZmVyKCk7XG4gIHNiLmFwcGVuZChieXRlcyk7XG4gIGxldCBhcHBlbmRDb3VudCA9ICg1NSAtIGJ5dGVzLmxlbmd0aCkgJiA2MztcbiAgc2IuYXBwZW5kKFwiXFx1MDA4MFwiKTtcbiAgd2hpbGUgKGFwcGVuZENvdW50ID4gMCkge1xuICAgIGFwcGVuZENvdW50LS07XG4gICAgc2IuYXBwZW5kKFwiXFx4MDBcIik7XG4gIH1cbiAgc2IuYXBwZW5kKFwiXFx4MDBcXHgwMFxceDAwXFx4MDBcIik7XG4gIHNiLmFwcGVuZChlbmNvZGUzMihieXRlcy5sZW5ndGggKiA4KSk7XG4gIGJ5dGVzID0gc2IudG9TdHJpbmcoKTtcbiAgY29uc3QgaCA9IFsxNzMyNTg0MTkzLCA0MDIzMjMzNDE3LCAyNTYyMzgzMTAyLCAyNzE3MzM4NzgsIDMyODUzNzc1MjBdO1xuICBjb25zdCB3ID1cbiAgICAvKiogQHR5cGUgQXJyYXkuPG51bWJlcj4gKi9cbiAgICBbXSBhcyBudW1iZXJbXTtcbiAgbGV0IGk6IG51bWJlcjtcbiAgZm9yIChsZXQgYmkgPSAwOyBiaSA8IGJ5dGVzLmxlbmd0aDsgYmkgKz0gNjQpIHtcbiAgICBmb3IgKGkgPSAwOyBpIDwgMTY7IGkrKykge1xuICAgICAgd1tpXSA9IGRlY29kZTMyKGJ5dGVzLnN1YnN0cihiaSArIDQgKiBpLCA0KSk7XG4gICAgfVxuICAgIGZvciAoOyBpIDwgODA7IGkrKykge1xuICAgICAgY29uc3QgcSA9IHdbaSAtIDNdIF4gd1tpIC0gOF0gXiB3W2kgLSAxNF0gXiB3W2kgLSAxNl07XG4gICAgICB3W2ldID0gKHEgPDwgMSkgfCAocSA+Pj4gMzEpO1xuICAgIH1cbiAgICBsZXQgYSA9IGhbMF07XG4gICAgbGV0IGIgPSBoWzFdO1xuICAgIGxldCBjID0gaFsyXTtcbiAgICBsZXQgZCA9IGhbM107XG4gICAgbGV0IGUgPSBoWzRdO1xuICAgIGxldCBmOiBudW1iZXI7XG4gICAgZm9yIChpID0gMDsgaSA8IDgwOyBpKyspIHtcbiAgICAgIGlmIChpIDwgMjApIHtcbiAgICAgICAgZiA9ICgoYiAmIGMpIHwgKH5iICYgZCkpICsgMTUxODUwMDI0OTtcbiAgICAgIH0gZWxzZSBpZiAoaSA8IDQwKSB7XG4gICAgICAgIGYgPSAoYiBeIGMgXiBkKSArIDE4NTk3NzUzOTM7XG4gICAgICB9IGVsc2UgaWYgKGkgPCA2MCkge1xuICAgICAgICBmID0gKChiICYgYykgfCAoYiAmIGQpIHwgKGMgJiBkKSkgKyAyNDAwOTU5NzA4O1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgZiA9IChiIF4gYyBeIGQpICsgMzM5NTQ2OTc4MjtcbiAgICAgIH1cbiAgICAgIGYgKz0gKChhIDw8IDUpIHwgKGEgPj4+IDI3KSkgKyBlICsgd1tpXTtcbiAgICAgIGUgPSBkO1xuICAgICAgZCA9IGM7XG4gICAgICBjID0gKGIgPDwgMzApIHwgKGIgPj4+IDIpO1xuICAgICAgYiA9IGE7XG4gICAgICBhID0gZjtcbiAgICB9XG4gICAgaFswXSA9IChoWzBdICsgYSkgfCAwO1xuICAgIGhbMV0gPSAoaFsxXSArIGIpIHwgMDtcbiAgICBoWzJdID0gKGhbMl0gKyBjKSB8IDA7XG4gICAgaFszXSA9IChoWzNdICsgZCkgfCAwO1xuICAgIGhbNF0gPSAoaFs0XSArIGUpIHwgMDtcbiAgfVxuICByZXR1cm4gaDtcbn1cblxuLyoqXG4gKiBAcGFyYW0gYnl0ZXMgY2hhcnMgd2l0aCBjb2RlcyAwIC0gMjU1IHRoYXQgcmVwcmVzZW50IG1lc3NhZ2UgYnl0ZSB2YWx1ZXNcbiAqIEByZXR1cm4gdWludDggbnVtYmVycyByZXByZXNlbnRpbmcgc2hhMSBoYXNoXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBieXRlc1RvU0hBMUludDgoYnl0ZXM6IHN0cmluZyk6IG51bWJlcltdIHtcbiAgY29uc3QgaCA9IGJ5dGVzVG9TSEExSW50MzIoYnl0ZXMpO1xuICBjb25zdCByZXMgPSBbXTtcbiAgZm9yIChjb25zdCBuIG9mIGgpIHtcbiAgICByZXMucHVzaCgobiA+Pj4gMjQpICYgMjU1LCAobiA+Pj4gMTYpICYgMjU1LCAobiA+Pj4gOCkgJiAyNTUsIG4gJiAyNTUpO1xuICB9XG4gIHJldHVybiByZXM7XG59XG5cbi8qKlxuICogQHBhcmFtIGJ5dGVzIGNoYXJzIHdpdGggY29kZXMgMCAtIDI1NSB0aGF0IHJlcHJlc2VudCBtZXNzYWdlIGJ5dGUgdmFsdWVzXG4gKiBAcmV0dXJuIGNoYXJzIHdpdGggY29kZXMgMCAtIDI1NSBlcXVhbCB0byBTSEExIGhhc2ggb2YgdGhlIGlucHV0XG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBieXRlc1RvU0hBMUJ5dGVzKGJ5dGVzOiBzdHJpbmcpOiBzdHJpbmcge1xuICBjb25zdCBoID0gYnl0ZXNUb1NIQTFJbnQzMihieXRlcyk7XG4gIGNvbnN0IHNiID0gbmV3IEJhc2UuU3RyaW5nQnVmZmVyKCk7XG4gIGZvciAobGV0IGkgPSAwOyBpIDwgaC5sZW5ndGg7IGkrKykge1xuICAgIHNiLmFwcGVuZChlbmNvZGUzMihoW2ldKSk7XG4gIH1cbiAgcmV0dXJuIHNiLnRvU3RyaW5nKCk7XG59XG5cbi8qKlxuICogQHBhcmFtIGJ5dGVzIGNoYXJzIHdpdGggY29kZXMgMCAtIDI1NSB0aGF0IHJlcHJlc2VudCBtZXNzYWdlIGJ5dGUgdmFsdWVzXG4gKiBAcmV0dXJuIGhleC1lbmNvZGVkIFNIQTEgaGFzaFxuICovXG5leHBvcnQgZnVuY3Rpb24gYnl0ZXNUb1NIQTFIZXgoYnl0ZXM6IHN0cmluZyk6IHN0cmluZyB7XG4gIGNvbnN0IHNoYTEgPSBieXRlc1RvU0hBMUJ5dGVzKGJ5dGVzKTtcbiAgY29uc3Qgc2IgPSBuZXcgQmFzZS5TdHJpbmdCdWZmZXIoKTtcbiAgZm9yIChsZXQgaSA9IDA7IGkgPCBzaGExLmxlbmd0aDsgaSsrKSB7XG4gICAgc2IuYXBwZW5kKChzaGExLmNoYXJDb2RlQXQoaSkgfCAyNTYpLnRvU3RyaW5nKDE2KS5zdWJzdHIoMSkpO1xuICB9XG4gIHJldHVybiBzYi50b1N0cmluZygpO1xufVxuXG4vKipcbiAqIEBwYXJhbSBieXRlcyBjaGFycyB3aXRoIGNvZGVzIDAgLSAyNTUgdGhhdCByZXByZXNlbnQgbWVzc2FnZSBieXRlIHZhbHVlc1xuICogQHJldHVybiBiYXNlNjQtZW5jb2RlZCBTSEExIGhhc2ggb2YgdGhlIGlucHV0XG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBieXRlc1RvU0hBMUJhc2U2NChieXRlczogc3RyaW5nKTogc3RyaW5nIHtcbiAgY29uc3Qgc2hhMSA9IGJ5dGVzVG9TSEExQnl0ZXMoYnl0ZXMpO1xuICBjb25zdCBzYiA9IG5ldyBCYXNlLlN0cmluZ0J1ZmZlcigpO1xuICBCYXNlLmFwcGVuZEJhc2U2NChzYiwgc2hhMSk7XG4gIHJldHVybiBzYi50b1N0cmluZygpO1xufVxuIiwiLyoqXG4gKiBDb3B5cmlnaHQgMjAxMyBHb29nbGUsIEluYy5cbiAqIENvcHlyaWdodCAyMDE1IFRyaW0tbWFya3MgSW5jLlxuICogQ29weXJpZ2h0IDIwMTkgVml2bGlvc3R5bGUgRm91bmRhdGlvblxuICpcbiAqIFZpdmxpb3N0eWxlLmpzIGlzIGZyZWUgc29mdHdhcmU6IHlvdSBjYW4gcmVkaXN0cmlidXRlIGl0IGFuZC9vciBtb2RpZnlcbiAqIGl0IHVuZGVyIHRoZSB0ZXJtcyBvZiB0aGUgR05VIEFmZmVybyBHZW5lcmFsIFB1YmxpYyBMaWNlbnNlIGFzIHB1Ymxpc2hlZCBieVxuICogdGhlIEZyZWUgU29mdHdhcmUgRm91bmRhdGlvbiwgZWl0aGVyIHZlcnNpb24gMyBvZiB0aGUgTGljZW5zZSwgb3JcbiAqIChhdCB5b3VyIG9wdGlvbikgYW55IGxhdGVyIHZlcnNpb24uXG4gKlxuICogVml2bGlvc3R5bGUuanMgaXMgZGlzdHJpYnV0ZWQgaW4gdGhlIGhvcGUgdGhhdCBpdCB3aWxsIGJlIHVzZWZ1bCxcbiAqIGJ1dCBXSVRIT1VUIEFOWSBXQVJSQU5UWTsgd2l0aG91dCBldmVuIHRoZSBpbXBsaWVkIHdhcnJhbnR5IG9mXG4gKiBNRVJDSEFOVEFCSUxJVFkgb3IgRklUTkVTUyBGT1IgQSBQQVJUSUNVTEFSIFBVUlBPU0UuICBTZWUgdGhlXG4gKiBHTlUgQWZmZXJvIEdlbmVyYWwgUHVibGljIExpY2Vuc2UgZm9yIG1vcmUgZGV0YWlscy5cbiAqXG4gKiBZb3Ugc2hvdWxkIGhhdmUgcmVjZWl2ZWQgYSBjb3B5IG9mIHRoZSBHTlUgQWZmZXJvIEdlbmVyYWwgUHVibGljIExpY2Vuc2VcbiAqIGFsb25nIHdpdGggVml2bGlvc3R5bGUuanMuICBJZiBub3QsIHNlZSA8aHR0cDovL3d3dy5nbnUub3JnL2xpY2Vuc2VzLz4uXG4gKlxuICogQGZpbGVvdmVydmlldyBUb2MgLSBUYWJsZSBvZiBDb250ZW50cyB2aWV3LlxuICovXG5pbXBvcnQgKiBhcyBCYXNlIGZyb20gXCIuL2Jhc2VcIjtcbmltcG9ydCAqIGFzIENvdW50ZXJzIGZyb20gXCIuL2NvdW50ZXJzXCI7XG5pbXBvcnQgKiBhcyBDc3MgZnJvbSBcIi4vY3NzXCI7XG5pbXBvcnQgKiBhcyBFeHBycyBmcm9tIFwiLi9leHByc1wiO1xuaW1wb3J0ICogYXMgRm9udCBmcm9tIFwiLi9mb250XCI7XG5pbXBvcnQgKiBhcyBPUFMgZnJvbSBcIi4vb3BzXCI7XG5pbXBvcnQgKiBhcyBUYXNrIGZyb20gXCIuL3Rhc2tcIjtcbmltcG9ydCAqIGFzIFZnZW4gZnJvbSBcIi4vdmdlblwiO1xuaW1wb3J0ICogYXMgVnRyZWUgZnJvbSBcIi4vdnRyZWVcIjtcbmltcG9ydCAqIGFzIFhtbERvYyBmcm9tIFwiLi94bWwtZG9jXCI7XG5cbi8vIGNsb3NlZDogMjVCOFxuLy8gb3BlbjogMjVCRVxuLy8gZW1wdHk6IDI1QjlcbmV4cG9ydCBjb25zdCBidWxsZXRDbG9zZWQgPSBcIlxcdTI1YjhcIjtcblxuZXhwb3J0IGNvbnN0IGJ1bGxldE9wZW4gPSBcIlxcdTI1YmVcIjtcblxuZXhwb3J0IGNvbnN0IGJ1bGxldEVtcHR5ID0gXCJcXHUyNWI5XCI7XG5cbmV4cG9ydCB0eXBlIFRPQ0l0ZW0gPSB7XG4gIGlkOiBzdHJpbmc7XG4gIHRpdGxlOiBzdHJpbmc7XG4gIGNoaWxkcmVuOiBUT0NJdGVtW107XG59O1xuXG5leHBvcnQgY2xhc3MgVE9DVmlldyBpbXBsZW1lbnRzIFZnZW4uQ3VzdG9tUmVuZGVyZXJGYWN0b3J5IHtcbiAgcHJlZjogRXhwcnMuUHJlZmVyZW5jZXM7XG4gIHBhZ2U6IFZ0cmVlLlBhZ2UgPSBudWxsO1xuICBpbnN0YW5jZTogT1BTLlN0eWxlSW5zdGFuY2UgPSBudWxsO1xuXG4gIGNvbnN0cnVjdG9yKFxuICAgIHB1YmxpYyByZWFkb25seSBzdG9yZTogT1BTLk9QU0RvY1N0b3JlLFxuICAgIHB1YmxpYyByZWFkb25seSB1cmw6IHN0cmluZyxcbiAgICBwdWJsaWMgcmVhZG9ubHkgbGFuZzogc3RyaW5nIHwgbnVsbCxcbiAgICBwdWJsaWMgcmVhZG9ubHkgY2xpZW50TGF5b3V0OiBWdHJlZS5DbGllbnRMYXlvdXQsXG4gICAgcHVibGljIHJlYWRvbmx5IGZvbnRNYXBwZXI6IEZvbnQuTWFwcGVyLFxuICAgIHByZWY6IEV4cHJzLlByZWZlcmVuY2VzLFxuICAgIHB1YmxpYyByZWFkb25seSByZW5kZXJlckZhY3Rvcnk6IFZnZW4uQ3VzdG9tUmVuZGVyZXJGYWN0b3J5LFxuICAgIHB1YmxpYyByZWFkb25seSBmYWxsYmFja01hcDogeyBba2V5OiBzdHJpbmddOiBzdHJpbmcgfSxcbiAgICBwdWJsaWMgcmVhZG9ubHkgZG9jdW1lbnRVUkxUcmFuc2Zvcm1lcjogQmFzZS5Eb2N1bWVudFVSTFRyYW5zZm9ybWVyLFxuICAgIHB1YmxpYyByZWFkb25seSBjb3VudGVyU3RvcmU6IENvdW50ZXJzLkNvdW50ZXJTdG9yZSxcbiAgKSB7XG4gICAgdGhpcy5wcmVmID0gRXhwcnMuY2xvbmVQcmVmZXJlbmNlcyhwcmVmKTtcbiAgICB0aGlzLnByZWYuc3ByZWFkVmlldyA9IGZhbHNlOyAvLyBObyBzcHJlZCB2aWV3IGZvciBUT0MgYm94XG4gIH1cblxuICBzZXRBdXRvSGVpZ2h0KGVsZW06IEVsZW1lbnQsIGRlcHRoOiBudW1iZXIpOiB2b2lkIHtcbiAgICBpZiAoZGVwdGgtLSA9PSAwKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIGZvciAobGV0IGM6IE5vZGUgPSBlbGVtLmZpcnN0Q2hpbGQ7IGM7IGMgPSBjLm5leHRTaWJsaW5nKSB7XG4gICAgICBpZiAoYy5ub2RlVHlwZSA9PSAxKSB7XG4gICAgICAgIGNvbnN0IGUgPSBjIGFzIEVsZW1lbnQ7XG4gICAgICAgIGlmIChCYXNlLmdldENTU1Byb3BlcnR5KGUsIFwiaGVpZ2h0XCIsIFwiYXV0b1wiKSAhPSBcImF1dG9cIikge1xuICAgICAgICAgIEJhc2Uuc2V0Q1NTUHJvcGVydHkoZSwgXCJoZWlnaHRcIiwgXCJhdXRvXCIpO1xuICAgICAgICAgIHRoaXMuc2V0QXV0b0hlaWdodChlLCBkZXB0aCk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKEJhc2UuZ2V0Q1NTUHJvcGVydHkoZSwgXCJwb3NpdGlvblwiLCBcInN0YXRpY1wiKSA9PSBcImFic29sdXRlXCIpIHtcbiAgICAgICAgICBCYXNlLnNldENTU1Byb3BlcnR5KGUsIFwicG9zaXRpb25cIiwgXCJyZWxhdGl2ZVwiKTtcbiAgICAgICAgICB0aGlzLnNldEF1dG9IZWlnaHQoZSwgZGVwdGgpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgLyoqXG4gICAqIEBvdmVycmlkZVxuICAgKi9cbiAgbWFrZUN1c3RvbVJlbmRlcmVyKHhtbGRvYzogWG1sRG9jLlhNTERvY0hvbGRlcik6IFZnZW4uQ3VzdG9tUmVuZGVyZXIge1xuICAgIGNvbnN0IHJlbmRlcmVyID0gdGhpcy5yZW5kZXJlckZhY3RvcnkubWFrZUN1c3RvbVJlbmRlcmVyKHhtbGRvYyk7XG4gICAgcmV0dXJuIChcbiAgICAgIHNyY0VsZW06IEVsZW1lbnQsXG4gICAgICB2aWV3UGFyZW50OiBFbGVtZW50LFxuICAgICAgY29tcHV0ZWRTdHlsZTogeyBba2V5OiBzdHJpbmddOiBDc3MuVmFsIH0sXG4gICAgKTogVGFzay5SZXN1bHQ8RWxlbWVudD4gPT4ge1xuICAgICAgY29uc3QgYmVoYXZpb3IgPSBjb21wdXRlZFN0eWxlW1wiYmVoYXZpb3JcIl07XG4gICAgICBpZiAoYmVoYXZpb3IpIHtcbiAgICAgICAgc3dpdGNoIChiZWhhdmlvci50b1N0cmluZygpKSB7XG4gICAgICAgICAgY2FzZSBcImJvZHktY2hpbGRcIjpcbiAgICAgICAgICAgIGlmIChcbiAgICAgICAgICAgICAgc3JjRWxlbS5wYXJlbnRFbGVtZW50LmdldEF0dHJpYnV0ZShcbiAgICAgICAgICAgICAgICBcImRhdGEtdml2bGlvc3R5bGUtcHJpbWFyeS1lbnRyeVwiLFxuICAgICAgICAgICAgICApXG4gICAgICAgICAgICApIHtcbiAgICAgICAgICAgICAgaWYgKFxuICAgICAgICAgICAgICAgICFzcmNFbGVtLnF1ZXJ5U2VsZWN0b3IoXG4gICAgICAgICAgICAgICAgICBcIltyb2xlPWRvYy10b2NdLCBbcm9sZT1kaXJlY3RvcnldLCBuYXYgbGkgYSwgLnRvYywgI3RvY1wiLFxuICAgICAgICAgICAgICAgIClcbiAgICAgICAgICAgICAgKSB7XG4gICAgICAgICAgICAgICAgLy8gV2hlbiB0aGUgVE9DIGVsZW1lbnQgaXMgYSBwYXJ0IG9mIHRoZSBwcmltYXR5IGVudHJ5IChYKUhUTUwsXG4gICAgICAgICAgICAgICAgLy8gaGlkZSBlbGVtZW50cyBub3QgY29udGFpbmluZyBUT0MuXG4gICAgICAgICAgICAgICAgY29tcHV0ZWRTdHlsZVtcImRpc3BsYXlcIl0gPSBDc3MuaWRlbnQubm9uZTtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgY2FzZSBcInRvYy1ub2RlLWFuY2hvclwiOlxuICAgICAgICAgICAgY29tcHV0ZWRTdHlsZVtcImNvbG9yXCJdID0gQ3NzLmlkZW50LmluaGVyaXQ7XG4gICAgICAgICAgICBjb21wdXRlZFN0eWxlW1widGV4dC1kZWNvcmF0aW9uXCJdID0gQ3NzLmlkZW50Lm5vbmU7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgICBjYXNlIFwidG9jLW5vZGVcIjpcbiAgICAgICAgICAgIGNvbXB1dGVkU3R5bGVbXCJkaXNwbGF5XCJdID0gQ3NzLmlkZW50LmJsb2NrO1xuICAgICAgICAgICAgY29tcHV0ZWRTdHlsZVtcIm1hcmdpblwiXSA9IENzcy5udW1lcmljWmVybztcbiAgICAgICAgICAgIGNvbXB1dGVkU3R5bGVbXCJwYWRkaW5nXCJdID0gQ3NzLm51bWVyaWNaZXJvO1xuICAgICAgICAgICAgY29tcHV0ZWRTdHlsZVtcInBhZGRpbmctaW5saW5lLXN0YXJ0XCJdID0gbmV3IENzcy5OdW1lcmljKDEuMjUsIFwiZW1cIik7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgICBjYXNlIFwidG9jLW5vZGUtZmlyc3QtY2hpbGRcIjpcbiAgICAgICAgICAgIGNvbXB1dGVkU3R5bGVbXCJkaXNwbGF5XCJdID0gQ3NzLmlkZW50LmlubGluZV9ibG9jaztcbiAgICAgICAgICAgIGNvbXB1dGVkU3R5bGVbXCJtYXJnaW5cIl0gPSBuZXcgQ3NzLk51bWVyaWMoMC4yLCBcImVtXCIpO1xuICAgICAgICAgICAgY29tcHV0ZWRTdHlsZVtcInZlcnRpY2FsLWFsaWduXCJdID0gQ3NzLmlkZW50LnRvcDtcbiAgICAgICAgICAgIGNvbXB1dGVkU3R5bGVbXCJjb2xvclwiXSA9IENzcy5pZGVudC5pbmhlcml0O1xuICAgICAgICAgICAgY29tcHV0ZWRTdHlsZVtcInRleHQtZGVjb3JhdGlvblwiXSA9IENzcy5pZGVudC5ub25lO1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIGlmIChcbiAgICAgICAgIWJlaGF2aW9yIHx8XG4gICAgICAgIChiZWhhdmlvci50b1N0cmluZygpICE9IFwidG9jLW5vZGVcIiAmJlxuICAgICAgICAgIGJlaGF2aW9yLnRvU3RyaW5nKCkgIT0gXCJ0b2MtY29udGFpbmVyXCIpXG4gICAgICApIHtcbiAgICAgICAgcmV0dXJuIHJlbmRlcmVyKHNyY0VsZW0sIHZpZXdQYXJlbnQsIGNvbXB1dGVkU3R5bGUpO1xuICAgICAgfVxuICAgICAgLy8gUmVtb3ZlIHdoaXRlLXNwYWNlIHRleHRub2RlIHRoYXQgYmVjb21lcyB1bndhbnRlZCBzcGFjZSBiZXR3ZWVuIGJ1dHRvbiBhbmQgYW5jaG9yIGVsZW1lbnQuXG4gICAgICBjb25zdCBmaXJzdENoaWxkID0gc3JjRWxlbS5maXJzdENoaWxkO1xuICAgICAgaWYgKFxuICAgICAgICBmaXJzdENoaWxkICYmXG4gICAgICAgIGZpcnN0Q2hpbGQubm9kZVR5cGUgIT09IDEgJiZcbiAgICAgICAgZmlyc3RDaGlsZC50ZXh0Q29udGVudC50cmltKCkgPT09IFwiXCJcbiAgICAgICkge1xuICAgICAgICAvLyBUbyBhdm9pZCBcIkluY29uc2lzdGVudCBvZmZzZXRcIiBlcnJvciwgY3JlYXRlIGEgY29tbWVudCBub2RlIHdpdGggc2FtZSB3aGl0ZS1zcGFjZSB0ZXh0LlxuICAgICAgICBzcmNFbGVtLnJlcGxhY2VDaGlsZChcbiAgICAgICAgICBzcmNFbGVtLm93bmVyRG9jdW1lbnQuY3JlYXRlQ29tbWVudChmaXJzdENoaWxkLnRleHRDb250ZW50KSxcbiAgICAgICAgICBmaXJzdENoaWxkLFxuICAgICAgICApO1xuICAgICAgfVxuICAgICAgY29uc3QgYWRhcHRQYXJlbnRDbGFzcyA9IHZpZXdQYXJlbnQuZ2V0QXR0cmlidXRlKFwiZGF0YS1hZGFwdC1jbGFzc1wiKTtcbiAgICAgIGlmIChhZGFwdFBhcmVudENsYXNzID09IFwidG9jLW5vZGVcIikge1xuICAgICAgICBjb25zdCBidXR0b24gPSB2aWV3UGFyZW50LmZpcnN0Q2hpbGQgYXMgRWxlbWVudDtcbiAgICAgICAgaWYgKGJ1dHRvbi50ZXh0Q29udGVudCAhPSBidWxsZXRDbG9zZWQpIHtcbiAgICAgICAgICBidXR0b24udGV4dENvbnRlbnQgPSBidWxsZXRDbG9zZWQ7XG4gICAgICAgICAgQmFzZS5zZXRDU1NQcm9wZXJ0eShidXR0b24sIFwiY3Vyc29yXCIsIFwicG9pbnRlclwiKTtcbiAgICAgICAgICBidXR0b24uYWRkRXZlbnRMaXN0ZW5lcihcImNsaWNrXCIsIHRvZ2dsZU5vZGVFeHBhbnNpb24sIGZhbHNlKTtcblxuICAgICAgICAgIGJ1dHRvbi5zZXRBdHRyaWJ1dGUoXCJyb2xlXCIsIFwiYnV0dG9uXCIpO1xuICAgICAgICAgIGJ1dHRvbi5zZXRBdHRyaWJ1dGUoXCJhcmlhLWV4cGFuZGVkXCIsIFwiZmFsc2VcIik7XG4gICAgICAgICAgdmlld1BhcmVudC5zZXRBdHRyaWJ1dGUoXCJhcmlhLWV4cGFuZGVkXCIsIFwiZmFsc2VcIik7XG5cbiAgICAgICAgICAvLyBFbmFibGUgdGFiIG1vdmUgdG8gdGhlIGJ1dHRvbiB1bmxlc3MgaGlkZGVuLlxuICAgICAgICAgIGlmICgodmlld1BhcmVudCBhcyBIVE1MRWxlbWVudCkuc3R5bGUuaGVpZ2h0ICE9PSBcIjBweFwiKSB7XG4gICAgICAgICAgICAoYnV0dG9uIGFzIEhUTUxFbGVtZW50KS50YWJJbmRleCA9IDA7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG4gICAgICBjb25zdCBlbGVtZW50ID0gdmlld1BhcmVudC5vd25lckRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIik7XG4gICAgICBlbGVtZW50LnNldEF0dHJpYnV0ZShcImRhdGEtYWRhcHQtcHJvY2Vzcy1jaGlsZHJlblwiLCBcInRydWVcIik7XG4gICAgICBpZiAoYmVoYXZpb3IudG9TdHJpbmcoKSA9PSBcInRvYy1ub2RlXCIpIHtcbiAgICAgICAgY29uc3QgYnV0dG9uID0gdmlld1BhcmVudC5vd25lckRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIik7XG4gICAgICAgIGJ1dHRvbi50ZXh0Q29udGVudCA9IGJ1bGxldEVtcHR5O1xuXG4gICAgICAgIC8vIFRPRE86IGRlZmluZSBwc2V1ZG8tZWxlbWVudCBmb3IgdGhlIGJ1dHRvbj9cbiAgICAgICAgQmFzZS5zZXRDU1NQcm9wZXJ0eShidXR0b24sIFwibWFyZ2luXCIsIFwiMC4yZW0gMCAwIC0xZW1cIik7XG4gICAgICAgIEJhc2Uuc2V0Q1NTUHJvcGVydHkoYnV0dG9uLCBcIm1hcmdpbi1pbmxpbmUtc3RhcnRcIiwgXCItMWVtXCIpO1xuICAgICAgICBCYXNlLnNldENTU1Byb3BlcnR5KGJ1dHRvbiwgXCJtYXJnaW4taW5saW5lLWVuZFwiLCBcIjBcIik7XG4gICAgICAgIEJhc2Uuc2V0Q1NTUHJvcGVydHkoYnV0dG9uLCBcImRpc3BsYXlcIiwgXCJpbmxpbmUtYmxvY2tcIik7XG4gICAgICAgIEJhc2Uuc2V0Q1NTUHJvcGVydHkoYnV0dG9uLCBcIndpZHRoXCIsIFwiMWVtXCIpO1xuICAgICAgICBCYXNlLnNldENTU1Byb3BlcnR5KGJ1dHRvbiwgXCJ0ZXh0LWFsaWduXCIsIFwiY2VudGVyXCIpO1xuICAgICAgICBCYXNlLnNldENTU1Byb3BlcnR5KGJ1dHRvbiwgXCJ2ZXJ0aWNhbC1hbGlnblwiLCBcInRvcFwiKTtcbiAgICAgICAgQmFzZS5zZXRDU1NQcm9wZXJ0eShidXR0b24sIFwiY3Vyc29yXCIsIFwiZGVmYXVsdFwiKTtcbiAgICAgICAgQmFzZS5zZXRDU1NQcm9wZXJ0eShidXR0b24sIFwiZm9udC1mYW1pbHlcIiwgXCJNZW5sbyxzYW5zLXNlcmlmXCIpO1xuICAgICAgICBlbGVtZW50LmFwcGVuZENoaWxkKGJ1dHRvbik7XG4gICAgICAgIEJhc2Uuc2V0Q1NTUHJvcGVydHkoZWxlbWVudCwgXCJvdmVyZmxvd1wiLCBcImhpZGRlblwiKTtcbiAgICAgICAgZWxlbWVudC5zZXRBdHRyaWJ1dGUoXCJkYXRhLWFkYXB0LWNsYXNzXCIsIFwidG9jLW5vZGVcIik7XG4gICAgICAgIGVsZW1lbnQuc2V0QXR0cmlidXRlKFwicm9sZVwiLCBcInRyZWVpdGVtXCIpO1xuXG4gICAgICAgIGlmIChcbiAgICAgICAgICBhZGFwdFBhcmVudENsYXNzID09IFwidG9jLW5vZGVcIiB8fFxuICAgICAgICAgIGFkYXB0UGFyZW50Q2xhc3MgPT0gXCJ0b2MtY29udGFpbmVyXCJcbiAgICAgICAgKSB7XG4gICAgICAgICAgQmFzZS5zZXRDU1NQcm9wZXJ0eShlbGVtZW50LCBcImhlaWdodFwiLCBcIjBweFwiKTtcblxuICAgICAgICAgIC8vIFByZXZlbnQgdGFiIG1vdmUgdG8gaGlkZGVuIGFuY2hvci5cbiAgICAgICAgICBjb25zdCBhbmNob3JFbGVtID0gc3JjRWxlbS5maXJzdEVsZW1lbnRDaGlsZDtcbiAgICAgICAgICBpZiAoYW5jaG9yRWxlbSAmJiBhbmNob3JFbGVtLmxvY2FsTmFtZSA9PT0gXCJhXCIpIHtcbiAgICAgICAgICAgIChhbmNob3JFbGVtIGFzIEhUTUxFbGVtZW50KS50YWJJbmRleCA9IC0xO1xuICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICB2aWV3UGFyZW50LnNldEF0dHJpYnV0ZShcInJvbGVcIiwgXCJ0cmVlXCIpO1xuICAgICAgICB9XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBpZiAoYWRhcHRQYXJlbnRDbGFzcyA9PSBcInRvYy1ub2RlXCIpIHtcbiAgICAgICAgICBlbGVtZW50LnNldEF0dHJpYnV0ZShcImRhdGEtYWRhcHQtY2xhc3NcIiwgXCJ0b2MtY29udGFpbmVyXCIpO1xuICAgICAgICAgIGVsZW1lbnQuc2V0QXR0cmlidXRlKFwicm9sZVwiLCBcImdyb3VwXCIpO1xuICAgICAgICAgIGVsZW1lbnQuc2V0QXR0cmlidXRlKFwiYXJpYS1oaWRkZW5cIiwgXCJ0cnVlXCIpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICByZXR1cm4gVGFzay5uZXdSZXN1bHQoZWxlbWVudCBhcyBFbGVtZW50KTtcbiAgICB9O1xuICB9XG5cbiAgc2hvd1RPQyhcbiAgICBlbGVtOiBIVE1MRWxlbWVudCxcbiAgICB2aWV3cG9ydDogVmdlbi5WaWV3cG9ydCxcbiAgICB3aWR0aDogbnVtYmVyLFxuICAgIGhlaWdodDogbnVtYmVyLFxuICAgIGZvbnRTaXplOiBudW1iZXIsXG4gICk6IFRhc2suUmVzdWx0PFZ0cmVlLlBhZ2U+IHtcbiAgICBpZiAodGhpcy5wYWdlKSB7XG4gICAgICByZXR1cm4gVGFzay5uZXdSZXN1bHQodGhpcy5wYWdlIGFzIFZ0cmVlLlBhZ2UpO1xuICAgIH1cbiAgICBjb25zdCBmcmFtZTogVGFzay5GcmFtZTxWdHJlZS5QYWdlPiA9IFRhc2submV3RnJhbWUoXCJzaG93VE9DXCIpO1xuICAgIGNvbnN0IHBhZ2UgPSBuZXcgVnRyZWUuUGFnZShlbGVtLCBlbGVtKTtcbiAgICB0aGlzLnBhZ2UgPSBwYWdlO1xuXG4gICAgLy8gVGhlIChYKUhUTUwgZG9jIGZvciB0aGUgVE9DIGJveCBtYXkgYmUgcmV1c2VkIGZvciB0aGUgVE9DIHBhZ2UgaW4gdGhlIGJvb2ssXG4gICAgLy8gYnV0IHRoZXkgbmVlZCBkaWZmZXJlbnQgc3R5bGVzLiBTbywgYWRkIFwiP3Zpdi10b2MtYm94XCIgdG8gZGlzdGluZ3Vpc2ggd2l0aCBUT0MgcGFnZSBVUkwuXG4gICAgY29uc3QgdG9jQm94VXJsID0gdGhpcy51cmwgKyBcIj92aXYtdG9jLWJveFwiO1xuXG4gICAgdGhpcy5zdG9yZS5sb2FkKHRvY0JveFVybCkudGhlbigoeG1sZG9jKSA9PiB7XG4gICAgICAvLyBNYXJrIGlmIHRoaXMgZG9jIGlzIHRoZSBwcmltYXJ5IGVudHJ5IHBhZ2UuXG4gICAgICBjb25zdCBub25Ub2NCb3hEb2MgPSB0aGlzLnN0b3JlLnJlc291cmNlc1t0aGlzLnVybF07XG4gICAgICBpZiAoXG4gICAgICAgIG5vblRvY0JveERvYyAmJlxuICAgICAgICBub25Ub2NCb3hEb2MuYm9keSAmJlxuICAgICAgICBub25Ub2NCb3hEb2MuYm9keS5nZXRBdHRyaWJ1dGUoXCJkYXRhLXZpdmxpb3N0eWxlLXByaW1hcnktZW50cnlcIilcbiAgICAgICkge1xuICAgICAgICB4bWxkb2MuYm9keS5zZXRBdHRyaWJ1dGUoXCJkYXRhLXZpdmxpb3N0eWxlLXByaW1hcnktZW50cnlcIiwgdHJ1ZSk7XG4gICAgICB9XG5cbiAgICAgIC8vIE1ha2UgaGlkZGVuIFRPQyB2aXNpYmxlIGluIFRPQyBib3hcbiAgICAgIGZvciAoY29uc3QgZWxlbSBvZiB4bWxkb2MuZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbChcbiAgICAgICAgXCJbcm9sZT1kb2MtdG9jXSwgW3JvbGU9ZGlyZWN0b3J5XSwgbmF2LCAudG9jLCAjdG9jXCIsXG4gICAgICApKSB7XG4gICAgICAgIGlmIChlbGVtLmhhc0F0dHJpYnV0ZShcImhpZGRlblwiKSkge1xuICAgICAgICAgIGVsZW0ucmVtb3ZlQXR0cmlidXRlKFwiaGlkZGVuXCIpO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIGNvbnN0IHN0eWxlID0gdGhpcy5zdG9yZS5nZXRTdHlsZUZvckRvYyh4bWxkb2MpO1xuICAgICAgY29uc3Qgdmlld3BvcnRTaXplID0gc3R5bGUuc2l6ZVZpZXdwb3J0KHdpZHRoLCAxMDAwMDAsIGZvbnRTaXplKTtcbiAgICAgIHZpZXdwb3J0ID0gbmV3IFZnZW4uVmlld3BvcnQoXG4gICAgICAgIHZpZXdwb3J0LndpbmRvdyxcbiAgICAgICAgdmlld3BvcnRTaXplLmZvbnRTaXplLFxuICAgICAgICB2aWV3cG9ydC5yb290LFxuICAgICAgICB2aWV3cG9ydFNpemUud2lkdGgsXG4gICAgICAgIHZpZXdwb3J0U2l6ZS5oZWlnaHQsXG4gICAgICApO1xuICAgICAgY29uc3QgY3VzdG9tUmVuZGVyZXIgPSB0aGlzLm1ha2VDdXN0b21SZW5kZXJlcih4bWxkb2MpO1xuICAgICAgY29uc3QgaW5zdGFuY2UgPSBuZXcgT1BTLlN0eWxlSW5zdGFuY2UoXG4gICAgICAgIHN0eWxlLFxuICAgICAgICB4bWxkb2MsXG4gICAgICAgIHRoaXMubGFuZyxcbiAgICAgICAgdmlld3BvcnQsXG4gICAgICAgIHRoaXMuY2xpZW50TGF5b3V0LFxuICAgICAgICB0aGlzLmZvbnRNYXBwZXIsXG4gICAgICAgIGN1c3RvbVJlbmRlcmVyLFxuICAgICAgICB0aGlzLmZhbGxiYWNrTWFwLFxuICAgICAgICAwLFxuICAgICAgICB0aGlzLmRvY3VtZW50VVJMVHJhbnNmb3JtZXIsXG4gICAgICAgIHRoaXMuY291bnRlclN0b3JlLFxuICAgICAgKTtcbiAgICAgIHRoaXMuaW5zdGFuY2UgPSBpbnN0YW5jZTtcbiAgICAgIGluc3RhbmNlLnByZWYgPSB0aGlzLnByZWY7XG4gICAgICBpbnN0YW5jZS5pbml0KCkudGhlbigoKSA9PiB7XG4gICAgICAgIGluc3RhbmNlLmxheW91dE5leHRQYWdlKHBhZ2UsIG51bGwpLnRoZW4oKCkgPT4ge1xuICAgICAgICAgIEFycmF5LmZyb20oXG4gICAgICAgICAgICBwYWdlLmNvbnRhaW5lci5xdWVyeVNlbGVjdG9yQWxsKFxuICAgICAgICAgICAgICBcIltkYXRhLXZpdmxpb3N0eWxlLXRvYy1ib3hdPio+Kj4qPio+KltzdHlsZSo9J2Rpc3BsYXk6IG5vbmUnXVwiLFxuICAgICAgICAgICAgKSxcbiAgICAgICAgICApLmZvckVhY2goKGJvZHlDaGlsZEVsZW0pID0+IHtcbiAgICAgICAgICAgIGJvZHlDaGlsZEVsZW0uc2V0QXR0cmlidXRlKFwiYXJpYS1oaWRkZW5cIiwgXCJ0cnVlXCIpO1xuICAgICAgICAgICAgYm9keUNoaWxkRWxlbS5zZXRBdHRyaWJ1dGUoXCJoaWRkZW5cIiwgXCJoaWRkZW5cIik7XG4gICAgICAgICAgfSk7XG4gICAgICAgICAgdGhpcy5zZXRBdXRvSGVpZ2h0KGVsZW0sIDIpO1xuICAgICAgICAgIGZyYW1lLmZpbmlzaChwYWdlKTtcbiAgICAgICAgfSk7XG4gICAgICB9KTtcbiAgICB9KTtcbiAgICByZXR1cm4gZnJhbWUucmVzdWx0KCk7XG4gIH1cblxuICBoaWRlVE9DKCk6IHZvaWQge1xuICAgIGlmICh0aGlzLnBhZ2UpIHtcbiAgICAgIHRoaXMucGFnZS5jb250YWluZXIuc3R5bGUudmlzaWJpbGl0eSA9IFwiaGlkZGVuXCI7XG4gICAgICB0aGlzLnBhZ2UuY29udGFpbmVyLnNldEF0dHJpYnV0ZShcImFyaWEtaGlkZGVuXCIsIFwidHJ1ZVwiKTtcbiAgICB9XG4gIH1cblxuICBpc1RPQ1Zpc2libGUoKTogYm9vbGVhbiB7XG4gICAgcmV0dXJuICEhdGhpcy5wYWdlICYmIHRoaXMucGFnZS5jb250YWluZXIuc3R5bGUudmlzaWJpbGl0eSA9PT0gXCJ2aXNpYmxlXCI7XG4gIH1cblxuICBnZXRUT0MoKTogVE9DSXRlbVtdIHtcbiAgICBpZiAoIXRoaXMucGFnZSkge1xuICAgICAgcmV0dXJuIFtdO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGV4cG9ydFRyZWUodGFnKTogVE9DSXRlbVtdIHtcbiAgICAgIGlmICghdGFnKSB7XG4gICAgICAgIHJldHVybiBbXTtcbiAgICAgIH1cbiAgICAgIGNvbnN0IGxpbmtzID0gdGFnLnF1ZXJ5U2VsZWN0b3JBbGwoXCI6c2NvcGUgPiBbcm9sZT10cmVlaXRlbV0gPiBhW2hyZWZdXCIpO1xuICAgICAgcmV0dXJuIEFycmF5LmZyb20obGlua3MpLm1hcChleHBvcnRMaW5rKTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBleHBvcnRMaW5rKHRhZyk6IFRPQ0l0ZW0ge1xuICAgICAgY29uc3QgdXJsID0gbmV3IFVSTCh0YWcuaHJlZik7XG4gICAgICBjb25zdCBbLCBpZF0gPSB1cmwuaGFzaC5tYXRjaCgvXiMoLiopJC8pO1xuXG4gICAgICBjb25zdCB0aXRsZSA9IHRhZy5pbm5lclRleHQ7XG5cbiAgICAgIGNvbnN0IGNvbnRhaW5lciA9IHRhZy5wYXJlbnRFbGVtZW50LnF1ZXJ5U2VsZWN0b3IoXCJbcm9sZT1ncm91cF1cIik7XG4gICAgICBjb25zdCBjaGlsZHJlbiA9IGV4cG9ydFRyZWUoY29udGFpbmVyKTtcblxuICAgICAgcmV0dXJuIHsgaWQsIHRpdGxlLCBjaGlsZHJlbiB9O1xuICAgIH1cblxuICAgIGNvbnN0IHRvcExldmVsVHJlZSA9IHRoaXMucGFnZS5jb250YWluZXIucXVlcnlTZWxlY3RvcihcIltyb2xlPXRyZWVdXCIpO1xuICAgIHJldHVybiBleHBvcnRUcmVlKHRvcExldmVsVHJlZSk7XG4gIH1cbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHRvZ2dsZU5vZGVFeHBhbnNpb24oZXZ0OiBFdmVudCk6IHZvaWQge1xuICBjb25zdCBlbGVtID0gZXZ0LnRhcmdldCBhcyBFbGVtZW50O1xuICBjb25zdCBvcGVuID0gZWxlbS50ZXh0Q29udGVudCA9PSBidWxsZXRDbG9zZWQ7XG4gIGVsZW0udGV4dENvbnRlbnQgPSBvcGVuID8gYnVsbGV0T3BlbiA6IGJ1bGxldENsb3NlZDtcbiAgY29uc3QgdG9jTm9kZUVsZW0gPSBlbGVtLnBhcmVudE5vZGUgYXMgRWxlbWVudDtcbiAgZWxlbS5zZXRBdHRyaWJ1dGUoXCJhcmlhLWV4cGFuZGVkXCIsIG9wZW4gPyBcInRydWVcIiA6IFwiZmFsc2VcIik7XG4gIHRvY05vZGVFbGVtLnNldEF0dHJpYnV0ZShcImFyaWEtZXhwYW5kZWRcIiwgb3BlbiA/IFwidHJ1ZVwiIDogXCJmYWxzZVwiKTtcbiAgbGV0IGM6IE5vZGUgPSB0b2NOb2RlRWxlbS5maXJzdENoaWxkO1xuICB3aGlsZSAoYykge1xuICAgIGlmIChjLm5vZGVUeXBlID09PSAxKSB7XG4gICAgICBjb25zdCBjZSA9IGMgYXMgSFRNTEVsZW1lbnQ7XG4gICAgICBjb25zdCBhZGFwdENsYXNzID0gY2UuZ2V0QXR0cmlidXRlKFwiZGF0YS1hZGFwdC1jbGFzc1wiKTtcbiAgICAgIGlmIChhZGFwdENsYXNzID09PSBcInRvYy1jb250YWluZXJcIikge1xuICAgICAgICBjZS5zZXRBdHRyaWJ1dGUoXCJhcmlhLWhpZGRlblwiLCAhb3BlbiA/IFwidHJ1ZVwiIDogXCJmYWxzZVwiKTtcbiAgICAgICAgaWYgKGNlLmZpcnN0Q2hpbGQpIHtcbiAgICAgICAgICBjID0gY2UuZmlyc3RDaGlsZDtcbiAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIGlmIChhZGFwdENsYXNzID09PSBcInRvYy1ub2RlXCIpIHtcbiAgICAgICAgY2Uuc3R5bGUuaGVpZ2h0ID0gb3BlbiA/IFwiYXV0b1wiIDogXCIwcHhcIjtcblxuICAgICAgICAvLyBVcGRhdGUgZW5hYmxlL2Rpc2FibGUgdGFiIG1vdmUgdG8gdGhlIGJ1dHRvbiBhbmQgYW5jaG9yLlxuICAgICAgICBpZiAoY2UuY2hpbGRyZW4ubGVuZ3RoID49IDIpIHtcbiAgICAgICAgICAoY2UuY2hpbGRyZW5bMV0gYXMgSFRNTEVsZW1lbnQpLnRhYkluZGV4ID0gb3BlbiA/IDAgOiAtMTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoY2UuY2hpbGRyZW4ubGVuZ3RoID49IDMpIHtcbiAgICAgICAgICAoY2UuY2hpbGRyZW5bMF0gYXMgSFRNTEVsZW1lbnQpLnRhYkluZGV4ID0gb3BlbiA/IDAgOiAtMTtcbiAgICAgICAgICBpZiAoIW9wZW4pIHtcbiAgICAgICAgICAgIGNvbnN0IGVsZW0xID0gY2UuY2hpbGRyZW5bMF07XG4gICAgICAgICAgICBpZiAoZWxlbTEudGV4dENvbnRlbnQgPT0gYnVsbGV0T3Blbikge1xuICAgICAgICAgICAgICBlbGVtMS50ZXh0Q29udGVudCA9IGJ1bGxldENsb3NlZDtcbiAgICAgICAgICAgICAgZWxlbTEuc2V0QXR0cmlidXRlKFwiYXJpYS1leHBhbmRlZFwiLCBcImZhbHNlXCIpO1xuICAgICAgICAgICAgICBjZS5zZXRBdHRyaWJ1dGUoXCJhcmlhLWV4cGFuZGVkXCIsIFwiZmFsc2VcIik7XG4gICAgICAgICAgICAgIGMgPSBjZS5jaGlsZHJlblsyXTtcbiAgICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICAgIHdoaWxlICghYy5uZXh0U2libGluZyAmJiBjLnBhcmVudE5vZGUgIT09IHRvY05vZGVFbGVtKSB7XG4gICAgICBjID0gYy5wYXJlbnROb2RlO1xuICAgIH1cbiAgICBjID0gYy5uZXh0U2libGluZztcbiAgfVxuICBldnQuc3RvcFByb3BhZ2F0aW9uKCk7XG59XG4iLCIvKipcbiAqIENvcHlyaWdodCAyMDEzIEdvb2dsZSwgSW5jLlxuICogQ29weXJpZ2h0IDIwMTUgVHJpbS1tYXJrcyBJbmMuXG4gKiBDb3B5cmlnaHQgMjAxOCBWaXZsaW9zdHlsZSBGb3VuZGF0aW9uXG4gKlxuICogVml2bGlvc3R5bGUuanMgaXMgZnJlZSBzb2Z0d2FyZTogeW91IGNhbiByZWRpc3RyaWJ1dGUgaXQgYW5kL29yIG1vZGlmeVxuICogaXQgdW5kZXIgdGhlIHRlcm1zIG9mIHRoZSBHTlUgQWZmZXJvIEdlbmVyYWwgUHVibGljIExpY2Vuc2UgYXMgcHVibGlzaGVkIGJ5XG4gKiB0aGUgRnJlZSBTb2Z0d2FyZSBGb3VuZGF0aW9uLCBlaXRoZXIgdmVyc2lvbiAzIG9mIHRoZSBMaWNlbnNlLCBvclxuICogKGF0IHlvdXIgb3B0aW9uKSBhbnkgbGF0ZXIgdmVyc2lvbi5cbiAqXG4gKiBWaXZsaW9zdHlsZS5qcyBpcyBkaXN0cmlidXRlZCBpbiB0aGUgaG9wZSB0aGF0IGl0IHdpbGwgYmUgdXNlZnVsLFxuICogYnV0IFdJVEhPVVQgQU5ZIFdBUlJBTlRZOyB3aXRob3V0IGV2ZW4gdGhlIGltcGxpZWQgd2FycmFudHkgb2ZcbiAqIE1FUkNIQU5UQUJJTElUWSBvciBGSVRORVNTIEZPUiBBIFBBUlRJQ1VMQVIgUFVSUE9TRS4gIFNlZSB0aGVcbiAqIEdOVSBBZmZlcm8gR2VuZXJhbCBQdWJsaWMgTGljZW5zZSBmb3IgbW9yZSBkZXRhaWxzLlxuICpcbiAqIFlvdSBzaG91bGQgaGF2ZSByZWNlaXZlZCBhIGNvcHkgb2YgdGhlIEdOVSBBZmZlcm8gR2VuZXJhbCBQdWJsaWMgTGljZW5zZVxuICogYWxvbmcgd2l0aCBWaXZsaW9zdHlsZS5qcy4gIElmIG5vdCwgc2VlIDxodHRwOi8vd3d3LmdudS5vcmcvbGljZW5zZXMvPi5cbiAqXG4gKiBAZmlsZW92ZXJ2aWV3IEVwdWIgLSBEZWFsIHdpdGggTUVUQS1JTkYvIGFuZCAub3BmIGZpbGVzIGluIEVQVUIgY29udGFpbmVyLlxuICovXG5pbXBvcnQgKiBhcyBBc3NlcnRzIGZyb20gXCIuL2Fzc2VydHNcIjtcbmltcG9ydCAqIGFzIEJhc2UgZnJvbSBcIi4vYmFzZVwiO1xuaW1wb3J0ICogYXMgQ0ZJIGZyb20gXCIuL2NmaVwiO1xuaW1wb3J0ICogYXMgQ29uc3RhbnRzIGZyb20gXCIuL2NvbnN0YW50c1wiO1xuaW1wb3J0ICogYXMgQ291bnRlcnMgZnJvbSBcIi4vY291bnRlcnNcIjtcbmltcG9ydCAqIGFzIENzcyBmcm9tIFwiLi9jc3NcIjtcbmltcG9ydCAqIGFzIENzc0Nhc2NhZGUgZnJvbSBcIi4vY3NzLWNhc2NhZGVcIjtcbmltcG9ydCAqIGFzIENzc1BhcnNlciBmcm9tIFwiLi9jc3MtcGFyc2VyXCI7XG5pbXBvcnQgKiBhcyBDc3NUb2tlbml6ZXIgZnJvbSBcIi4vY3NzLXRva2VuaXplclwiO1xuaW1wb3J0ICogYXMgRXhwcnMgZnJvbSBcIi4vZXhwcnNcIjtcbmltcG9ydCAqIGFzIEZvbnQgZnJvbSBcIi4vZm9udFwiO1xuaW1wb3J0ICogYXMgTG9nZ2luZyBmcm9tIFwiLi9sb2dnaW5nXCI7XG5pbXBvcnQgKiBhcyBOZXQgZnJvbSBcIi4vbmV0XCI7XG5pbXBvcnQgKiBhcyBPUFMgZnJvbSBcIi4vb3BzXCI7XG5pbXBvcnQgKiBhcyBTSEExIGZyb20gXCIuL3NoYTFcIjtcbmltcG9ydCAqIGFzIFRhc2sgZnJvbSBcIi4vdGFza1wiO1xuaW1wb3J0ICogYXMgVG9jIGZyb20gXCIuL3RvY1wiO1xuaW1wb3J0ICogYXMgVmdlbiBmcm9tIFwiLi92Z2VuXCI7XG5pbXBvcnQgKiBhcyBWdHJlZSBmcm9tIFwiLi92dHJlZVwiO1xuaW1wb3J0ICogYXMgWG1sRG9jIGZyb20gXCIuL3htbC1kb2NcIjtcblxuZXhwb3J0IHR5cGUgUG9zaXRpb24gPSB7XG4gIHNwaW5lSW5kZXg6IG51bWJlcjtcbiAgcGFnZUluZGV4OiBudW1iZXI7XG4gIG9mZnNldEluSXRlbTogbnVtYmVyO1xufTtcblxuZXhwb3J0IGNsYXNzIEVQVUJEb2NTdG9yZSBleHRlbmRzIE9QUy5PUFNEb2NTdG9yZSB7XG4gIHBsYWluWE1MU3RvcmU6IFhtbERvYy5YTUxEb2NTdG9yZTtcbiAganNvblN0b3JlOiBOZXQuSlNPTlN0b3JlO1xuICBvcGZCeVVSTDogeyBba2V5OiBzdHJpbmddOiBPUEZEb2MgfSA9IHt9O1xuICBwcmltYXJ5T1BGQnlFUHViVVJMOiB7IFtrZXk6IHN0cmluZ106IE9QRkRvYyB9ID0ge307XG4gIGRlb2JmdXNjYXRvcnM6IHsgW2tleTogc3RyaW5nXTogKHAxOiBCbG9iKSA9PiBUYXNrLlJlc3VsdDxCbG9iPiB9ID0ge307XG4gIGRvY3VtZW50czogeyBba2V5OiBzdHJpbmddOiBUYXNrLlJlc3VsdDxYbWxEb2MuWE1MRG9jSG9sZGVyPiB9ID0ge307XG5cbiAgY29uc3RydWN0b3IoKSB7XG4gICAgc3VwZXIobnVsbCk7XG4gICAgdGhpcy5mb250RGVvYmZ1c2NhdG9yID0gdGhpcy5tYWtlRGVvYmZ1c2NhdG9yRmFjdG9yeSgpO1xuICAgIHRoaXMucGxhaW5YTUxTdG9yZSA9IFhtbERvYy5uZXdYTUxEb2NTdG9yZSgpO1xuICAgIHRoaXMuanNvblN0b3JlID0gTmV0Lm5ld0pTT05TdG9yZSgpO1xuICB9XG5cbiAgbWFrZURlb2JmdXNjYXRvckZhY3RvcnkoKTpcbiAgICB8ICgocDE6IHN0cmluZykgPT4gKChwMTogQmxvYikgPT4gVGFzay5SZXN1bHQ8QmxvYj4pIHwgbnVsbClcbiAgICB8IG51bGwge1xuICAgIHJldHVybiAodXJsOiBzdHJpbmcpOiAoKHAxOiBCbG9iKSA9PiBUYXNrLlJlc3VsdDxCbG9iPikgfCBudWxsID0+IHtcbiAgICAgIHJldHVybiB0aGlzLmRlb2JmdXNjYXRvcnNbdXJsXTtcbiAgICB9O1xuICB9XG5cbiAgbG9hZEFzUGxhaW5YTUwoXG4gICAgdXJsOiBzdHJpbmcsXG4gICAgb3B0X3JlcXVpcmVkPzogYm9vbGVhbixcbiAgICBvcHRfbWVzc2FnZT86IHN0cmluZyxcbiAgKTogVGFzay5SZXN1bHQ8WG1sRG9jLlhNTERvY0hvbGRlcj4ge1xuICAgIHJldHVybiB0aGlzLnBsYWluWE1MU3RvcmUubG9hZChcbiAgICAgIHVybCxcbiAgICAgIG9wdF9yZXF1aXJlZCxcbiAgICAgIG9wdF9tZXNzYWdlLFxuICAgICkgYXMgVGFzay5SZXN1bHQ8WG1sRG9jLlhNTERvY0hvbGRlcj47XG4gIH1cblxuICBzdGFydExvYWRpbmdBc1BsYWluWE1MKHVybDogc3RyaW5nKTogdm9pZCB7XG4gICAgdGhpcy5wbGFpblhNTFN0b3JlLmZldGNoKHVybCk7XG4gIH1cblxuICBsb2FkQXNKU09OKFxuICAgIHVybDogc3RyaW5nLFxuICAgIG9wdF9yZXF1aXJlZD86IGJvb2xlYW4sXG4gICAgb3B0X21lc3NhZ2U/OiBzdHJpbmcsXG4gICk6IFRhc2suUmVzdWx0PEJhc2UuSlNPTj4ge1xuICAgIHJldHVybiB0aGlzLmpzb25TdG9yZS5sb2FkKHVybCwgb3B0X3JlcXVpcmVkLCBvcHRfbWVzc2FnZSk7XG4gIH1cblxuICBzdGFydExvYWRpbmdBc0pTT04odXJsOiBzdHJpbmcpOiB2b2lkIHtcbiAgICB0aGlzLmpzb25TdG9yZS5mZXRjaCh1cmwpO1xuICB9XG5cbiAgbG9hZFB1YkRvYyh1cmw6IHN0cmluZywgaGF2ZVppcE1ldGFkYXRhOiBib29sZWFuKTogVGFzay5SZXN1bHQ8T1BGRG9jPiB7XG4gICAgY29uc3QgZnJhbWU6IFRhc2suRnJhbWU8T1BGRG9jPiA9IFRhc2submV3RnJhbWUoXCJsb2FkUHViRG9jXCIpO1xuXG4gICAgTmV0LmFqYXgodXJsLCBudWxsLCBcIkhFQURcIikudGhlbigocmVzcG9uc2UpID0+IHtcbiAgICAgIGlmIChyZXNwb25zZS5zdGF0dXMgPj0gNDAwKSB7XG4gICAgICAgIC8vIFRoaXMgdXJsIGNhbiBiZSB0aGUgcm9vdCBvZiBhbiB1bnppcHBlZCBFUFVCLlxuICAgICAgICB0aGlzLmxvYWRFUFVCRG9jKHVybCwgaGF2ZVppcE1ldGFkYXRhKS50aGVuKChvcGYpID0+IHtcbiAgICAgICAgICBpZiAob3BmKSB7XG4gICAgICAgICAgICBmcmFtZS5maW5pc2gob3BmKTtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICB9XG4gICAgICAgICAgTG9nZ2luZy5sb2dnZXIuZXJyb3IoXG4gICAgICAgICAgICBgRmFpbGVkIHRvIGZldGNoIGEgc291cmNlIGRvY3VtZW50IGZyb20gJHt1cmx9ICgke3Jlc3BvbnNlLnN0YXR1c30ke1xuICAgICAgICAgICAgICByZXNwb25zZS5zdGF0dXNUZXh0ID8gXCIgXCIgKyByZXNwb25zZS5zdGF0dXNUZXh0IDogXCJcIlxuICAgICAgICAgICAgfSlgLFxuICAgICAgICAgICk7XG4gICAgICAgICAgZnJhbWUuZmluaXNoKG51bGwpO1xuICAgICAgICB9KTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGlmIChcbiAgICAgICAgICAhcmVzcG9uc2Uuc3RhdHVzICYmXG4gICAgICAgICAgIXJlc3BvbnNlLnJlc3BvbnNlWE1MICYmXG4gICAgICAgICAgIXJlc3BvbnNlLnJlc3BvbnNlVGV4dCAmJlxuICAgICAgICAgICFyZXNwb25zZS5yZXNwb25zZUJsb2IgJiZcbiAgICAgICAgICAhcmVzcG9uc2UuY29udGVudFR5cGVcbiAgICAgICAgKSB7XG4gICAgICAgICAgLy8gRW1wdHkgcmVzcG9uc2VcbiAgICAgICAgICBpZiAoL1xcL1teLy5dKyg/OlsjP118JCkvLnRlc3QodXJsKSkge1xuICAgICAgICAgICAgLy8gQWRkaW5nIHRyYWlsaW5nIFwiL1wiIG1heSBzb2x2ZSB0aGUgcHJvYmxlbS5cbiAgICAgICAgICAgIHVybCA9IHVybC5yZXBsYWNlKC8oWyM/XXwkKS8sIFwiLyQxXCIpO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAvLyBJZ25vcmUgZW1wdHkgcmVzcG9uc2Ugb2YgSEVBRCByZXF1ZXN0LCBpdCBtYXkgYmVjb21lIE9LIHdpdGggR0VUIHJlcXVlc3QuXG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGlmIChcbiAgICAgICAgICByZXNwb25zZS5jb250ZW50VHlwZSA9PSBcImFwcGxpY2F0aW9uL29lYnBzLXBhY2thZ2UreG1sXCIgfHxcbiAgICAgICAgICAvXFwub3BmKD86WyM/XXwkKS8udGVzdCh1cmwpXG4gICAgICAgICkge1xuICAgICAgICAgIC8vIEVQVUIgT1BGXG4gICAgICAgICAgY29uc3QgWywgcHViVVJMLCByb290XSA9IHVybC5tYXRjaCgvXigoPzouKlxcLyk/KShbXi9dKikkLyk7XG4gICAgICAgICAgdGhpcy5sb2FkT1BGKHB1YlVSTCwgcm9vdCwgaGF2ZVppcE1ldGFkYXRhKS50aGVuRmluaXNoKGZyYW1lKTtcbiAgICAgICAgfSBlbHNlIGlmIChcbiAgICAgICAgICByZXNwb25zZS5jb250ZW50VHlwZSA9PSBcImFwcGxpY2F0aW9uL2xkK2pzb25cIiB8fFxuICAgICAgICAgIHJlc3BvbnNlLmNvbnRlbnRUeXBlID09IFwiYXBwbGljYXRpb24vd2VicHViK2pzb25cIiB8fFxuICAgICAgICAgIHJlc3BvbnNlLmNvbnRlbnRUeXBlID09IFwiYXBwbGljYXRpb24vYXVkaW9ib29rK2pzb25cIiB8fFxuICAgICAgICAgIHJlc3BvbnNlLmNvbnRlbnRUeXBlID09IFwiYXBwbGljYXRpb24vanNvblwiIHx8XG4gICAgICAgICAgL1xcLmpzb24oPzpsZCk/KD86WyM/XXwkKS8udGVzdCh1cmwpXG4gICAgICAgICkge1xuICAgICAgICAgIC8vIFdlYiBQdWJsaWNhdGlvbiBNYW5pZmVzdFxuICAgICAgICAgIHRoaXMubG9hZEFzSlNPTih1cmwsIHRydWUpLnRoZW4oKG1hbmlmZXN0T2JqKSA9PiB7XG4gICAgICAgICAgICBpZiAoIW1hbmlmZXN0T2JqKSB7XG4gICAgICAgICAgICAgIHRoaXMucmVwb3J0TG9hZEVycm9yKHVybCk7XG4gICAgICAgICAgICAgIGZyYW1lLmZpbmlzaChudWxsKTtcbiAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY29uc3Qgb3BmID0gbmV3IE9QRkRvYyh0aGlzLCB1cmwpO1xuICAgICAgICAgICAgb3BmLmluaXRXaXRoV2ViUHViTWFuaWZlc3QobWFuaWZlc3RPYmosIHVuZGVmaW5lZCwgdXJsKS50aGVuKCgpID0+IHtcbiAgICAgICAgICAgICAgZnJhbWUuZmluaXNoKG9wZik7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICB9KTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAvLyBXZWIgUHVibGljYXRpb24gcHJpbWFyeSBlbnRyeSAoWClIVE1MXG4gICAgICAgICAgdGhpcy5sb2FkV2ViUHViKHVybCkudGhlbigob3BmKSA9PiB7XG4gICAgICAgICAgICBpZiAob3BmKSB7XG4gICAgICAgICAgICAgIGZyYW1lLmZpbmlzaChvcGYpO1xuICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICAvLyBUaGlzIHVybCBjYW4gYmUgdGhlIHJvb3Qgb2YgYW4gdW56aXBwZWQgRVBVQi5cbiAgICAgICAgICAgIHRoaXMubG9hZEVQVUJEb2ModXJsLCBoYXZlWmlwTWV0YWRhdGEpLnRoZW4oKG9wZikgPT4ge1xuICAgICAgICAgICAgICBpZiAob3BmKSB7XG4gICAgICAgICAgICAgICAgZnJhbWUuZmluaXNoKG9wZik7XG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIExvZ2dpbmcubG9nZ2VyLmVycm9yKGBGYWlsZWQgdG8gbG9hZCAke3VybH0uYCk7XG4gICAgICAgICAgICAgIGZyYW1lLmZpbmlzaChudWxsKTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfSk7XG4gICAgcmV0dXJuIGZyYW1lLnJlc3VsdCgpO1xuICB9XG5cbiAgbG9hZEVQVUJEb2ModXJsOiBzdHJpbmcsIGhhdmVaaXBNZXRhZGF0YTogYm9vbGVhbik6IFRhc2suUmVzdWx0PE9QRkRvYz4ge1xuICAgIGNvbnN0IGZyYW1lOiBUYXNrLkZyYW1lPE9QRkRvYz4gPSBUYXNrLm5ld0ZyYW1lKFwibG9hZEVQVUJEb2NcIik7XG4gICAgaWYgKCF1cmwuZW5kc1dpdGgoXCIvXCIpKSB7XG4gICAgICB1cmwgPSB1cmwgKyBcIi9cIjtcbiAgICB9XG4gICAgaWYgKGhhdmVaaXBNZXRhZGF0YSkge1xuICAgICAgdGhpcy5zdGFydExvYWRpbmdBc0pTT04odXJsICsgXCI/cj1saXN0XCIpO1xuICAgIH1cbiAgICB0aGlzLnN0YXJ0TG9hZGluZ0FzUGxhaW5YTUwodXJsICsgXCJNRVRBLUlORi9lbmNyeXB0aW9uLnhtbFwiKTtcbiAgICBjb25zdCBjb250YWluZXJVUkwgPSB1cmwgKyBcIk1FVEEtSU5GL2NvbnRhaW5lci54bWxcIjtcbiAgICB0aGlzLmxvYWRBc1BsYWluWE1MKGNvbnRhaW5lclVSTCkudGhlbigoY29udGFpbmVyWE1MKSA9PiB7XG4gICAgICBpZiAoY29udGFpbmVyWE1MKSB7XG4gICAgICAgIGNvbnN0IHJvb3RzID0gY29udGFpbmVyWE1MXG4gICAgICAgICAgLmRvYygpXG4gICAgICAgICAgLmNoaWxkKFwiY29udGFpbmVyXCIpXG4gICAgICAgICAgLmNoaWxkKFwicm9vdGZpbGVzXCIpXG4gICAgICAgICAgLmNoaWxkKFwicm9vdGZpbGVcIilcbiAgICAgICAgICAuYXR0cmlidXRlKFwiZnVsbC1wYXRoXCIpO1xuICAgICAgICBmb3IgKGNvbnN0IHJvb3Qgb2Ygcm9vdHMpIHtcbiAgICAgICAgICBpZiAocm9vdCkge1xuICAgICAgICAgICAgdGhpcy5sb2FkT1BGKHVybCwgcm9vdCwgaGF2ZVppcE1ldGFkYXRhKS50aGVuRmluaXNoKGZyYW1lKTtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIGZyYW1lLmZpbmlzaChudWxsKTtcbiAgICB9KTtcbiAgICByZXR1cm4gZnJhbWUucmVzdWx0KCk7XG4gIH1cblxuICBsb2FkT1BGKFxuICAgIHB1YlVSTDogc3RyaW5nLFxuICAgIHJvb3Q6IHN0cmluZyxcbiAgICBoYXZlWmlwTWV0YWRhdGE6IGJvb2xlYW4sXG4gICk6IFRhc2suUmVzdWx0PE9QRkRvYz4ge1xuICAgIGNvbnN0IHVybCA9IHB1YlVSTCArIHJvb3Q7XG4gICAgbGV0IG9wZiA9IHRoaXMub3BmQnlVUkxbdXJsXTtcbiAgICBpZiAob3BmKSB7XG4gICAgICByZXR1cm4gVGFzay5uZXdSZXN1bHQob3BmKTtcbiAgICB9XG4gICAgY29uc3QgZnJhbWU6IFRhc2suRnJhbWU8T1BGRG9jPiA9IFRhc2submV3RnJhbWUoXCJsb2FkT1BGXCIpO1xuICAgIHRoaXMubG9hZEFzUGxhaW5YTUwodXJsLCB0cnVlLCBgRmFpbGVkIHRvIGZldGNoIEVQVUIgT1BGICR7dXJsfWApLnRoZW4oXG4gICAgICAob3BmWE1MKSA9PiB7XG4gICAgICAgIGlmICghb3BmWE1MKSB7XG4gICAgICAgICAgdGhpcy5yZXBvcnRMb2FkRXJyb3IodXJsKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICB0aGlzLmxvYWRBc1BsYWluWE1MKGAke3B1YlVSTH1NRVRBLUlORi9lbmNyeXB0aW9uLnhtbGApLnRoZW4oXG4gICAgICAgICAgICAoZW5jWE1MKSA9PiB7XG4gICAgICAgICAgICAgIGNvbnN0IHppcE1ldGFkYXRhUmVzdWx0ID0gaGF2ZVppcE1ldGFkYXRhXG4gICAgICAgICAgICAgICAgPyB0aGlzLmxvYWRBc0pTT04oYCR7cHViVVJMfT9yPWxpc3RgKVxuICAgICAgICAgICAgICAgIDogVGFzay5uZXdSZXN1bHQobnVsbCk7XG4gICAgICAgICAgICAgIHppcE1ldGFkYXRhUmVzdWx0LnRoZW4oKHppcE1ldGFkYXRhKSA9PiB7XG4gICAgICAgICAgICAgICAgb3BmID0gbmV3IE9QRkRvYyh0aGlzLCBwdWJVUkwpO1xuICAgICAgICAgICAgICAgIG9wZlxuICAgICAgICAgICAgICAgICAgLmluaXRXaXRoWE1MRG9jKFxuICAgICAgICAgICAgICAgICAgICBvcGZYTUwsXG4gICAgICAgICAgICAgICAgICAgIGVuY1hNTCxcbiAgICAgICAgICAgICAgICAgICAgemlwTWV0YWRhdGEsXG4gICAgICAgICAgICAgICAgICAgIGAke3B1YlVSTH0/cj1tYW5pZmVzdGAsXG4gICAgICAgICAgICAgICAgICApXG4gICAgICAgICAgICAgICAgICAudGhlbigoKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMub3BmQnlVUkxbdXJsXSA9IG9wZjtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5wcmltYXJ5T1BGQnlFUHViVVJMW3B1YlVSTF0gPSBvcGY7XG4gICAgICAgICAgICAgICAgICAgIGZyYW1lLmZpbmlzaChvcGYpO1xuICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfSxcbiAgICAgICAgICApO1xuICAgICAgICB9XG4gICAgICB9LFxuICAgICk7XG4gICAgcmV0dXJuIGZyYW1lLnJlc3VsdCgpO1xuICB9XG5cbiAgbG9hZFdlYlB1Yih1cmw6IHN0cmluZyk6IFRhc2suUmVzdWx0PE9QRkRvYz4ge1xuICAgIGNvbnN0IGZyYW1lOiBUYXNrLkZyYW1lPE9QRkRvYz4gPSBUYXNrLm5ld0ZyYW1lKFwibG9hZFdlYlB1YlwiKTtcblxuICAgIC8vIExvYWQgdGhlIHByaW1hcnkgZW50cnkgcGFnZSAoWClIVE1MXG4gICAgdGhpcy5sb2FkKHVybCkudGhlbigoeG1sZG9jKSA9PiB7XG4gICAgICBpZiAoIXhtbGRvYykge1xuICAgICAgICB0aGlzLnJlcG9ydExvYWRFcnJvcih1cmwpO1xuICAgICAgfSBlbHNlIGlmIChcbiAgICAgICAgeG1sZG9jLmRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoXG4gICAgICAgICAgXCJhW2hyZWY9J01FVEEtSU5GLyddLGFbaHJlZiQ9Jy9NRVRBLUlORi8nXVwiLFxuICAgICAgICApXG4gICAgICApIHtcbiAgICAgICAgLy8gVGhpcyBpcyBsaWtlbHkgdGhlIGRpcmVjdG9yeSBsaXN0aW5nIG9mIHVuemlwcGVkIEVQVUIgdG9wIGRpcmVjdG9yeVxuICAgICAgICBmcmFtZS5maW5pc2gobnVsbCk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBjb25zdCBkb2MgPSB4bWxkb2MuZG9jdW1lbnQ7XG4gICAgICAgIGNvbnN0IG9wZiA9IG5ldyBPUEZEb2ModGhpcywgdXJsKTtcblxuICAgICAgICBpZiAoZG9jLmJvZHkpIHtcbiAgICAgICAgICBkb2MuYm9keS5zZXRBdHRyaWJ1dGUoXCJkYXRhLXZpdmxpb3N0eWxlLXByaW1hcnktZW50cnlcIiwgdHJ1ZSk7XG4gICAgICAgIH1cbiAgICAgICAgLy8gRmluZCBtYW5pZmVzdCwgVzNDIFdlYlB1YmxpY2F0aW9uIG9yIFJlYWRpdW0gV2ViIFB1YmxpY2F0aW9uIE1hbmlmZXN0XG4gICAgICAgIGNvbnN0IG1hbmlmZXN0TGluayA9IGRvYy5xdWVyeVNlbGVjdG9yKFxuICAgICAgICAgIFwibGlua1tyZWw9J3B1YmxpY2F0aW9uJ10sbGlua1tyZWw9J21hbmlmZXN0J11bdHlwZT0nYXBwbGljYXRpb24vd2VicHViK2pzb24nXVwiLFxuICAgICAgICApO1xuICAgICAgICBpZiAobWFuaWZlc3RMaW5rKSB7XG4gICAgICAgICAgY29uc3QgaHJlZiA9IG1hbmlmZXN0TGluay5nZXRBdHRyaWJ1dGUoXCJocmVmXCIpO1xuICAgICAgICAgIGlmICgvXiMvLnRlc3QoaHJlZikpIHtcbiAgICAgICAgICAgIGNvbnN0IG1hbmlmZXN0T2JqID0gQmFzZS5zdHJpbmdUb0pTT04oXG4gICAgICAgICAgICAgIGRvYy5nZXRFbGVtZW50QnlJZChocmVmLnN1YnN0cigxKSkudGV4dENvbnRlbnQsXG4gICAgICAgICAgICApO1xuICAgICAgICAgICAgb3BmLmluaXRXaXRoV2ViUHViTWFuaWZlc3QobWFuaWZlc3RPYmosIGRvYykudGhlbigoKSA9PiB7XG4gICAgICAgICAgICAgIGZyYW1lLmZpbmlzaChvcGYpO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGNvbnN0IG1hbmlmZXN0VXJsID0gQmFzZS5yZXNvbHZlVVJMKFxuICAgICAgICAgICAgICBtYW5pZmVzdExpbmsuZ2V0QXR0cmlidXRlKFwiaHJlZlwiKSxcbiAgICAgICAgICAgICAgdXJsLFxuICAgICAgICAgICAgKTtcbiAgICAgICAgICAgIHRoaXMubG9hZEFzSlNPTihtYW5pZmVzdFVybCkudGhlbigobWFuaWZlc3RPYmopID0+IHtcbiAgICAgICAgICAgICAgb3BmXG4gICAgICAgICAgICAgICAgLmluaXRXaXRoV2ViUHViTWFuaWZlc3QobWFuaWZlc3RPYmosIGRvYywgbWFuaWZlc3RVcmwpXG4gICAgICAgICAgICAgICAgLnRoZW4oKCkgPT4ge1xuICAgICAgICAgICAgICAgICAgZnJhbWUuZmluaXNoKG9wZik7XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgLy8gTm8gbWFuaWZlc3RcbiAgICAgICAgICBvcGYuaW5pdFdpdGhXZWJQdWJNYW5pZmVzdCh7fSwgZG9jKS50aGVuKCgpID0+IHtcbiAgICAgICAgICAgIGlmIChvcGYueGh0bWxUb2MgJiYgb3BmLnhodG1sVG9jLnNyYyA9PT0geG1sZG9jLnVybCkge1xuICAgICAgICAgICAgICAvLyB4aHRtbFRvYyBpcyB0aGUgcHJpbWFyaSBlbnRyeSAoWClIVE1MXG4gICAgICAgICAgICAgIGlmIChcbiAgICAgICAgICAgICAgICAhZG9jLnF1ZXJ5U2VsZWN0b3IoXG4gICAgICAgICAgICAgICAgICBcIltyb2xlPWRvYy10b2NdLCBbcm9sZT1kaXJlY3RvcnldLCBuYXYsIC50b2MsICN0b2NcIixcbiAgICAgICAgICAgICAgICApXG4gICAgICAgICAgICAgICkge1xuICAgICAgICAgICAgICAgIC8vIFRPQyBpcyBub3QgZm91bmQgaW4gdGhlIHByaW1hcmkgZW50cnkgKFgpSFRNTFxuICAgICAgICAgICAgICAgIG9wZi54aHRtbFRvYyA9IG51bGw7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGZyYW1lLmZpbmlzaChvcGYpO1xuICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfSk7XG4gICAgcmV0dXJuIGZyYW1lLnJlc3VsdCgpO1xuICB9XG5cbiAgYWRkRG9jdW1lbnQodXJsOiBzdHJpbmcsIGRvYzogRG9jdW1lbnQpIHtcbiAgICBjb25zdCBmcmFtZSA9IFRhc2submV3RnJhbWU8WG1sRG9jLlhNTERvY0hvbGRlcj4oXCJFUFVCRG9jU3RvcmUubG9hZFwiKTtcbiAgICBjb25zdCBkb2NVUkwgPSBCYXNlLnN0cmlwRnJhZ21lbnQodXJsKTtcbiAgICBjb25zdCByID0gKHRoaXMuZG9jdW1lbnRzW2RvY1VSTF0gPSB0aGlzLnBhcnNlT1BTUmVzb3VyY2Uoe1xuICAgICAgc3RhdHVzOiAyMDAsXG4gICAgICBzdGF0dXNUZXh0OiBcIlwiLFxuICAgICAgdXJsOiBkb2NVUkwsXG4gICAgICBjb250ZW50VHlwZTogKGRvYyBhcyBhbnkpLmNvbnRlbnRUeXBlLFxuICAgICAgcmVzcG9uc2VUZXh0OiBudWxsLFxuICAgICAgcmVzcG9uc2VYTUw6IGRvYyxcbiAgICAgIHJlc3BvbnNlQmxvYjogbnVsbCxcbiAgICB9KSk7XG4gICAgci50aGVuRmluaXNoKGZyYW1lKTtcbiAgICByZXR1cm4gZnJhbWUucmVzdWx0KCk7XG4gIH1cblxuICByZXBvcnRMb2FkRXJyb3IoZG9jVVJMOiBzdHJpbmcpOiB2b2lkIHtcbiAgICBjb25zdCByZW1vdmVQYXRoID0gKHVybDogc3RyaW5nKSA9PiB7XG4gICAgICByZXR1cm4gdXJsLnJlcGxhY2UoLyhbXjovPyNdfF4pWy8/I10uKi8sIFwiJDFcIik7XG4gICAgfTtcbiAgICBjb25zdCBsaWtlbHlDb3JzUHJvYmxlbSA9ICgpID0+IHtcbiAgICAgIGNvbnN0IGRvbWFpbiA9IHJlbW92ZVBhdGgoZG9jVVJMKTtcbiAgICAgIGlmIChkb21haW4gPT09IHJlbW92ZVBhdGgoQmFzZS5iYXNlVVJMKSkge1xuICAgICAgICAvLyBzYW1lIGRvbWFpbiwgbm8gQ09SUyBwcm9ibGVtXG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgIH1cbiAgICAgIGNvbnN0IHVybHMgPSBPYmplY3Qua2V5cyh0aGlzLnJlc291cmNlcyk7XG4gICAgICBpZiAoXG4gICAgICAgIHVybHMuZmluZCgodXJsKSA9PiB0aGlzLnJlc291cmNlc1t1cmxdICYmIHJlbW92ZVBhdGgodXJsKSA9PT0gZG9tYWluKVxuICAgICAgKSB7XG4gICAgICAgIC8vIGlmIHRoZXJlIGlzIGFuIGFscmVhZHkgbG9hZGVkIHJlc291cmNlIHdpdGggdGhlIHNhbWUgZG9tYWluLCBubyBDT1JTIHByb2JsZW1cbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgfVxuICAgICAgaWYgKC9cXC4oeGh0bWx8eGh0fHhtbHxvcGYpJC9pLnRlc3QoZG9jVVJMKSkge1xuICAgICAgICAvLyBtYXliZSwgWE1MIGVycm9yXG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgIH1cbiAgICAgIC8vIGxpa2VseSwgQ09SUyBwcm9ibGVtXG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9O1xuXG4gICAgaWYgKGRvY1VSTC5zdGFydHNXaXRoKFwiZGF0YTpcIikpIHtcbiAgICAgIExvZ2dpbmcubG9nZ2VyLmVycm9yKGBGYWlsZWQgdG8gbG9hZCAke2RvY1VSTH0uIEludmFsaWQgZGF0YS5gKTtcbiAgICB9IGVsc2UgaWYgKFxuICAgICAgZG9jVVJMLnN0YXJ0c1dpdGgoXCJodHRwOlwiKSAmJlxuICAgICAgQmFzZS5iYXNlVVJMLnN0YXJ0c1dpdGgoXCJodHRwczpcIilcbiAgICApIHtcbiAgICAgIExvZ2dpbmcubG9nZ2VyLmVycm9yKFxuICAgICAgICBgRmFpbGVkIHRvIGxvYWQgJHtkb2NVUkx9LiBNaXhlZCBDb250ZW50IChcImh0dHA6XCIgY29udGVudCBvbiBcImh0dHBzOlwiIGNvbnRleHQpIGlzIG5vdCBhbGxvd2VkLmAsXG4gICAgICApO1xuICAgIH0gZWxzZSBpZiAobGlrZWx5Q29yc1Byb2JsZW0oKSkge1xuICAgICAgTG9nZ2luZy5sb2dnZXIuZXJyb3IoXG4gICAgICAgIGBGYWlsZWQgdG8gbG9hZCAke2RvY1VSTH0uIFRoaXMgbWF5IGJlIGNhdXNlZCBieSB0aGUgc2VydmVyIG5vdCBhbGxvd2luZyBjcm9zcy1vcmlnaW4gcmVzb3VyY2Ugc2hhcmluZyAoQ09SUykuYCxcbiAgICAgICk7XG4gICAgfSBlbHNlIHtcbiAgICAgIExvZ2dpbmcubG9nZ2VyLmVycm9yKFxuICAgICAgICBgRmFpbGVkIHRvIGxvYWQgJHtkb2NVUkx9LiBUaGUgdGFyZ2V0IHJlc291cmNlIGlzIGludmFsaWQuYCxcbiAgICAgICk7XG4gICAgfVxuICB9XG5cbiAgLyoqXG4gICAqIEBvdmVycmlkZVxuICAgKi9cbiAgbG9hZCh1cmw6IHN0cmluZyk6IFRhc2suUmVzdWx0PFhtbERvYy5YTUxEb2NIb2xkZXI+IHtcbiAgICBjb25zdCBkb2NVUkwgPSBCYXNlLnN0cmlwRnJhZ21lbnQodXJsKTtcbiAgICBsZXQgciA9IHRoaXMuZG9jdW1lbnRzW2RvY1VSTF07XG4gICAgaWYgKHIpIHtcbiAgICAgIHJldHVybiByLmlzUGVuZGluZygpID8gciA6IFRhc2submV3UmVzdWx0KHIuZ2V0KCkpO1xuICAgIH0gZWxzZSB7XG4gICAgICBjb25zdCBmcmFtZSA9IFRhc2submV3RnJhbWU8WG1sRG9jLlhNTERvY0hvbGRlcj4oXCJFUFVCRG9jU3RvcmUubG9hZFwiKTtcbiAgICAgIHIgPSBzdXBlci5sb2FkKFxuICAgICAgICBkb2NVUkwsXG4gICAgICAgIHRydWUsXG4gICAgICAgIGBGYWlsZWQgdG8gZmV0Y2ggYSBzb3VyY2UgZG9jdW1lbnQgZnJvbSAke2RvY1VSTH1gLFxuICAgICAgKTtcbiAgICAgIHIudGhlbigoeG1sZG9jOiBYbWxEb2MuWE1MRG9jSG9sZGVyKSA9PiB7XG4gICAgICAgIGlmICgheG1sZG9jKSB7XG4gICAgICAgICAgdGhpcy5yZXBvcnRMb2FkRXJyb3IoZG9jVVJMKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBmcmFtZS5maW5pc2goeG1sZG9jKTtcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgICByZXR1cm4gZnJhbWUucmVzdWx0KCk7XG4gICAgfVxuICB9XG59XG5cbmV4cG9ydCB0eXBlIE9QRkl0ZW1QYXJhbSA9IHtcbiAgdXJsOiBzdHJpbmc7XG4gIGluZGV4OiBudW1iZXI7XG4gIHN0YXJ0UGFnZTogbnVtYmVyIHwgbnVsbDtcbiAgc2tpcFBhZ2VzQmVmb3JlOiBudW1iZXIgfCBudWxsO1xufTtcblxuZXhwb3J0IGNsYXNzIE9QRkl0ZW0ge1xuICBpZDogc3RyaW5nIHwgbnVsbCA9IG51bGw7XG4gIHNyYzogc3RyaW5nID0gXCJcIjtcbiAgbWVkaWFUeXBlOiBzdHJpbmcgfCBudWxsID0gbnVsbDtcbiAgdGl0bGU6IHN0cmluZyB8IG51bGwgPSBudWxsO1xuICBpdGVtUmVmRWxlbWVudDogRWxlbWVudCB8IG51bGwgPSBudWxsO1xuICBzcGluZUluZGV4OiBudW1iZXIgPSAtMTtcbiAgY29tcHJlc3NlZFNpemU6IG51bWJlciA9IDA7XG4gIGNvbXByZXNzZWQ6IGJvb2xlYW4gfCBudWxsID0gbnVsbDtcbiAgZXBhZ2U6IG51bWJlciA9IDA7XG4gIGVwYWdlQ291bnQ6IG51bWJlciA9IDA7XG4gIHN0YXJ0UGFnZTogbnVtYmVyIHwgbnVsbCA9IG51bGw7XG4gIHNraXBQYWdlc0JlZm9yZTogbnVtYmVyIHwgbnVsbCA9IG51bGw7XG4gIGl0ZW1Qcm9wZXJ0aWVzOiB7IFtrZXk6IHN0cmluZ106IGJvb2xlYW4gfTtcblxuICBjb25zdHJ1Y3RvcigpIHtcbiAgICB0aGlzLml0ZW1Qcm9wZXJ0aWVzID0gQmFzZS5lbXB0eU9iajtcbiAgfVxuXG4gIGluaXRXaXRoRWxlbWVudChpdGVtRWxlbTogRWxlbWVudCwgb3BmVVJMOiBzdHJpbmcpOiB2b2lkIHtcbiAgICB0aGlzLmlkID0gaXRlbUVsZW0uZ2V0QXR0cmlidXRlKFwiaWRcIik7XG4gICAgdGhpcy5zcmMgPSBCYXNlLnJlc29sdmVVUkwoaXRlbUVsZW0uZ2V0QXR0cmlidXRlKFwiaHJlZlwiKSwgb3BmVVJMKTtcbiAgICB0aGlzLm1lZGlhVHlwZSA9IGl0ZW1FbGVtLmdldEF0dHJpYnV0ZShcIm1lZGlhLXR5cGVcIik7XG4gICAgY29uc3QgcHJvcFN0ciA9IGl0ZW1FbGVtLmdldEF0dHJpYnV0ZShcInByb3BlcnRpZXNcIik7XG4gICAgaWYgKHByb3BTdHIpIHtcbiAgICAgIHRoaXMuaXRlbVByb3BlcnRpZXMgPSBCYXNlLmFycmF5VG9TZXQocHJvcFN0ci5zcGxpdCgvXFxzKy8pKTtcbiAgICB9XG4gIH1cblxuICBpbml0V2l0aFBhcmFtKHBhcmFtOiBPUEZJdGVtUGFyYW0pIHtcbiAgICB0aGlzLnNwaW5lSW5kZXggPSBwYXJhbS5pbmRleDtcbiAgICB0aGlzLmlkID0gYGl0ZW0ke3BhcmFtLmluZGV4ICsgMX1gO1xuICAgIHRoaXMuc3JjID0gcGFyYW0udXJsO1xuICAgIHRoaXMuc3RhcnRQYWdlID0gcGFyYW0uc3RhcnRQYWdlO1xuICAgIHRoaXMuc2tpcFBhZ2VzQmVmb3JlID0gcGFyYW0uc2tpcFBhZ2VzQmVmb3JlO1xuICB9XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBnZXRPUEZJdGVtSWQoaXRlbTogT1BGSXRlbSk6IHN0cmluZyB8IG51bGwge1xuICByZXR1cm4gaXRlbS5pZDtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIG1ha2VEZW9iZnVzY2F0b3IodWlkOiBzdHJpbmcpOiAocDE6IEJsb2IpID0+IFRhc2suUmVzdWx0PEJsb2I+IHtcbiAgLy8gVE9ETzogdXNlIFVURjggb2YgdWlkXG4gIGNvbnN0IHNoYTFTdW0gPSBTSEExLmJ5dGVzVG9TSEExSW50OCh1aWQpO1xuICByZXR1cm4gKGJsb2IpID0+IHtcbiAgICBjb25zdCBmcmFtZSA9IFRhc2submV3RnJhbWUoXCJkZW9iZnVzY2F0b3JcIikgYXMgVGFzay5GcmFtZTxCbG9iPjtcbiAgICBsZXQgaGVhZDogQmxvYjtcbiAgICBsZXQgdGFpbDogQmxvYjtcbiAgICBpZiAoYmxvYi5zbGljZSkge1xuICAgICAgaGVhZCA9IGJsb2Iuc2xpY2UoMCwgMTA0MCk7XG4gICAgICB0YWlsID0gYmxvYi5zbGljZSgxMDQwLCBibG9iLnNpemUpO1xuICAgIH0gZWxzZSB7XG4gICAgICBoZWFkID0gYmxvYltcIndlYmtpdFNsaWNlXCJdKDAsIDEwNDApO1xuICAgICAgdGFpbCA9IGJsb2JbXCJ3ZWJraXRTbGljZVwiXSgxMDQwLCBibG9iLnNpemUgLSAxMDQwKTtcbiAgICB9XG4gICAgTmV0LnJlYWRCbG9iKGhlYWQpLnRoZW4oKGJ1ZikgPT4ge1xuICAgICAgY29uc3QgZGF0YVZpZXcgPSBuZXcgRGF0YVZpZXcoYnVmKTtcbiAgICAgIGZvciAobGV0IGsgPSAwOyBrIDwgZGF0YVZpZXcuYnl0ZUxlbmd0aDsgaysrKSB7XG4gICAgICAgIGxldCBiID0gZGF0YVZpZXcuZ2V0VWludDgoayk7XG4gICAgICAgIGIgXj0gc2hhMVN1bVtrICUgMjBdO1xuICAgICAgICBkYXRhVmlldy5zZXRVaW50OChrLCBiKTtcbiAgICAgIH1cbiAgICAgIGZyYW1lLmZpbmlzaChOZXQubWFrZUJsb2IoW2RhdGFWaWV3LCB0YWlsXSkpO1xuICAgIH0pO1xuICAgIHJldHVybiBmcmFtZS5yZXN1bHQoKTtcbiAgfTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIG1ha2VPYmZ1c2NhdGlvbktleSh1aWQ6IHN0cmluZyk6IHN0cmluZyB7XG4gIHJldHVybiBgMTA0MDoke1NIQTEuYnl0ZXNUb1NIQTFIZXgodWlkKX1gO1xufVxuXG50eXBlIFJhd01ldGEgPSB7XG4gIFtrZXk6IHN0cmluZ106IFJhd01ldGFJdGVtW107XG59O1xuXG50eXBlIFJhd01ldGFJdGVtID0ge1xuICBuYW1lOiBzdHJpbmc7XG4gIHZhbHVlOiBzdHJpbmc7XG4gIGlkOiBzdHJpbmcgfCBudWxsO1xuICByZWZpbmVzOiBzdHJpbmcgfCBudWxsO1xuICBzY2hlbWU6IHN0cmluZyB8IG51bGw7XG4gIGxhbmc6IHN0cmluZyB8IG51bGw7XG4gIG9yZGVyOiBudW1iZXI7XG4gIHJvbGU6IHN0cmluZyB8IG51bGw7XG59O1xuXG5leHBvcnQgaW50ZXJmYWNlIE1ldGEge1xuICBba2V5OiBzdHJpbmddOiBNZXRhSXRlbVtdO1xufVxuXG5leHBvcnQgaW50ZXJmYWNlIE1ldGFJdGVtIHtcbiAgdjogc3RyaW5nO1xuICBvPzogbnVtYmVyO1xuICBzPzogc3RyaW5nO1xuICByPzogTWV0YTtcbn1cblxuZXhwb3J0IGNvbnN0IHByZWRlZmluZWRQcmVmaXhlcyA9IHtcbiAgZGN0ZXJtczogXCJodHRwOi8vcHVybC5vcmcvZGMvdGVybXMvXCIsXG4gIG1hcmM6IFwiaHR0cDovL2lkLmxvYy5nb3Yvdm9jYWJ1bGFyeS9cIixcbiAgbWVkaWE6IFwiaHR0cDovL3d3dy5pZHBmLm9yZy9lcHViL3ZvY2FiL292ZXJsYXlzLyNcIixcbiAgcmVuZGl0aW9uOiBcImh0dHA6Ly93d3cuaWRwZi5vcmcvdm9jYWIvcmVuZGl0aW9uLyNcIixcbiAgb25peDogXCJodHRwOi8vd3d3LmVkaXRldXIub3JnL09OSVgvYm9vay9jb2RlbGlzdHMvY3VycmVudC5odG1sI1wiLFxuICB4c2Q6IFwiaHR0cDovL3d3dy53My5vcmcvMjAwMS9YTUxTY2hlbWEjXCIsXG4gIG9wZjogXCJodHRwOi8vd3d3LmlkcGYub3JnLzIwMDcvb3BmXCIsXG59O1xuXG5leHBvcnQgY29uc3QgZGVmYXVsdElSSSA9IFwiaHR0cDovL2lkcGYub3JnL2VwdWIvdm9jYWIvcGFja2FnZS9tZXRhLyNcIjtcblxuZXhwb3J0IGNvbnN0IG1ldGFUZXJtcyA9IHtcbiAgbGFuZ3VhZ2U6IGAke3ByZWRlZmluZWRQcmVmaXhlc1tcImRjdGVybXNcIl19bGFuZ3VhZ2VgLFxuICB0aXRsZTogYCR7cHJlZGVmaW5lZFByZWZpeGVzW1wiZGN0ZXJtc1wiXX10aXRsZWAsXG4gIGNyZWF0b3I6IGAke3ByZWRlZmluZWRQcmVmaXhlc1tcImRjdGVybXNcIl19Y3JlYXRvcmAsXG4gIGxheW91dDogYCR7cHJlZGVmaW5lZFByZWZpeGVzW1wicmVuZGl0aW9uXCJdfWxheW91dGAsXG4gIHRpdGxlVHlwZTogYCR7ZGVmYXVsdElSSX10aXRsZS10eXBlYCxcbiAgZGlzcGxheVNlcTogYCR7ZGVmYXVsdElSSX1kaXNwbGF5LXNlcWAsXG4gIGFsdGVybmF0ZVNjcmlwdDogYCR7ZGVmYXVsdElSSX1hbHRlcm5hdGUtc2NyaXB0YCxcbiAgcm9sZTogYCR7ZGVmYXVsdElSSX1yb2xlYCxcbn07XG5cbmV4cG9ydCBmdW5jdGlvbiBnZXRNZXRhZGF0YUNvbXBhcmF0b3IoXG4gIHRlcm06IHN0cmluZyxcbiAgbGFuZzogc3RyaW5nLFxuKTogKHAxOiBNZXRhSXRlbSwgcDI6IE1ldGFJdGVtKSA9PiBudW1iZXIge1xuICBjb25zdCBlbXB0eSA9IHt9O1xuICByZXR1cm4gKGl0ZW0xLCBpdGVtMikgPT4ge1xuICAgIGxldCBtMTogYm9vbGVhbjtcbiAgICBsZXQgbTI6IGJvb2xlYW47XG4gICAgY29uc3QgcjEgPSBpdGVtMVtcInJcIl0gfHwgZW1wdHk7XG4gICAgY29uc3QgcjIgPSBpdGVtMltcInJcIl0gfHwgZW1wdHk7XG4gICAgaWYgKHRlcm0gPT0gbWV0YVRlcm1zLnRpdGxlKSB7XG4gICAgICBtMSA9IHIxW21ldGFUZXJtcy50aXRsZVR5cGVdPy5bMF0udiA9PSBcIm1haW5cIjtcbiAgICAgIG0yID0gcjJbbWV0YVRlcm1zLnRpdGxlVHlwZV0/LlswXS52ID09IFwibWFpblwiO1xuICAgICAgaWYgKG0xICE9IG0yKSB7XG4gICAgICAgIHJldHVybiBtMSA/IC0xIDogMTtcbiAgICAgIH1cbiAgICB9XG4gICAgbGV0IGkxID0gcGFyc2VJbnQocjFbbWV0YVRlcm1zLmRpc3BsYXlTZXFdPy5bMF0udiwgMTApO1xuICAgIGlmIChpc05hTihpMSkpIHtcbiAgICAgIGkxID0gTnVtYmVyLk1BWF9WQUxVRTtcbiAgICB9XG4gICAgbGV0IGkyID0gcGFyc2VJbnQocjJbbWV0YVRlcm1zLmRpc3BsYXlTZXFdPy5bMF0udiwgMTApO1xuICAgIGlmIChpc05hTihpMikpIHtcbiAgICAgIGkyID0gTnVtYmVyLk1BWF9WQUxVRTtcbiAgICB9XG4gICAgaWYgKGkxICE9IGkyKSB7XG4gICAgICByZXR1cm4gaTEgLSBpMjtcbiAgICB9XG4gICAgaWYgKHRlcm0gIT0gbWV0YVRlcm1zLmxhbmd1YWdlICYmIGxhbmcpIHtcbiAgICAgIG0xID1cbiAgICAgICAgKHIxW21ldGFUZXJtcy5sYW5ndWFnZV0gfHwgcjFbbWV0YVRlcm1zLmFsdGVybmF0ZVNjcmlwdF0pPy5bMF0udiA9PVxuICAgICAgICBsYW5nO1xuICAgICAgbTIgPVxuICAgICAgICAocjJbbWV0YVRlcm1zLmxhbmd1YWdlXSB8fCByMlttZXRhVGVybXMuYWx0ZXJuYXRlU2NyaXB0XSk/LlswXS52ID09XG4gICAgICAgIGxhbmc7XG4gICAgICBpZiAobTEgIT0gbTIpIHtcbiAgICAgICAgcmV0dXJuIG0xID8gLTEgOiAxO1xuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gaXRlbTFbXCJvXCJdIC0gaXRlbTJbXCJvXCJdO1xuICB9O1xufVxuXG5leHBvcnQgZnVuY3Rpb24gcmVhZE1ldGFkYXRhKFxuICBtcm9vdDogWG1sRG9jLk5vZGVMaXN0LFxuICBwcmVmaXhlczogc3RyaW5nIHwgbnVsbCxcbik6IE1ldGEge1xuICAvLyBQYXJzZSBwcmVmaXggbWFwIChpZiBhbnkpXG4gIGxldCBwcmVmaXhNYXA7XG4gIGlmICghcHJlZml4ZXMpIHtcbiAgICBwcmVmaXhNYXAgPSBwcmVkZWZpbmVkUHJlZml4ZXM7XG4gIH0gZWxzZSB7XG4gICAgcHJlZml4TWFwID0ge307XG4gICAgZm9yIChjb25zdCBwbiBpbiBwcmVkZWZpbmVkUHJlZml4ZXMpIHtcbiAgICAgIHByZWZpeE1hcFtwbl0gPSBwcmVkZWZpbmVkUHJlZml4ZXNbcG5dO1xuICAgIH1cbiAgICBsZXQgcjogUmVnRXhwTWF0Y2hBcnJheTtcblxuICAgIC8vIFRoaXMgY29kZSBwZXJtaXRzIGFueSBub24tQVNDSUkgY2hhcmFjdGVycyBpbiB0aGUgbmFtZSB0byBhdm9pZCBibG9hdGluZ1xuICAgIC8vIHRoZSBwYXR0ZXJuLlxuICAgIHdoaWxlIChcbiAgICAgIChyID0gcHJlZml4ZXMubWF0Y2goXG4gICAgICAgIC9eXFxzKihbQS1aX2EtelxcdTAwN0YtXFx1RkZGRl1bLS5BLVpfYS16MC05XFx1MDA3Ri1cXHVGRkZGXSopOlxccyooXFxTKykvLFxuICAgICAgKSkgIT0gbnVsbFxuICAgICkge1xuICAgICAgcHJlZml4ZXMgPSBwcmVmaXhlcy5zdWJzdHIoclswXS5sZW5ndGgpO1xuICAgICAgcHJlZml4TWFwW3JbMV1dID0gclsyXTtcbiAgICB9XG4gIH1cbiAgY29uc3QgcmVzb2x2ZVByb3BlcnR5ID0gKHZhbDogc3RyaW5nIHwgbnVsbCk6IHN0cmluZyB8IG51bGwgPT4ge1xuICAgIGlmICh2YWwpIHtcbiAgICAgIGNvbnN0IHIgPSB2YWwubWF0Y2goL15cXHMqKChbXjpdKik6KT8oXFxTKylcXHMqJC8pO1xuICAgICAgaWYgKHIpIHtcbiAgICAgICAgY29uc3QgaXJpID0gclsyXSA/IHByZWZpeE1hcFtyWzJdXSA6IGRlZmF1bHRJUkk7XG4gICAgICAgIGlmIChpcmkpIHtcbiAgICAgICAgICByZXR1cm4gaXJpICsgclszXTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gbnVsbDtcbiAgfTtcbiAgbGV0IG9yZGVyID0gMTtcblxuICAvLyBMaXN0IG9mIG1ldGFkYXRhIGl0ZW1zLlxuICBjb25zdCByYXdJdGVtcyA9IG1yb290LmNoaWxkRWxlbWVudHMoKS5mb3JFYWNoTm9uTnVsbCgobm9kZTogRWxlbWVudCkgPT4ge1xuICAgIGlmIChub2RlLmxvY2FsTmFtZSA9PSBcIm1ldGFcIikge1xuICAgICAgY29uc3QgcCA9IHJlc29sdmVQcm9wZXJ0eShub2RlLmdldEF0dHJpYnV0ZShcInByb3BlcnR5XCIpKTtcbiAgICAgIGlmIChwKSB7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgbmFtZTogcCxcbiAgICAgICAgICB2YWx1ZTogbm9kZS50ZXh0Q29udGVudCxcbiAgICAgICAgICBpZDogbm9kZS5nZXRBdHRyaWJ1dGUoXCJpZFwiKSxcbiAgICAgICAgICBvcmRlcjogb3JkZXIrKyxcbiAgICAgICAgICByZWZpbmVzOiBub2RlLmdldEF0dHJpYnV0ZShcInJlZmluZXNcIiksXG4gICAgICAgICAgbGFuZzogbnVsbCxcbiAgICAgICAgICBzY2hlbWU6IHJlc29sdmVQcm9wZXJ0eShub2RlLmdldEF0dHJpYnV0ZShcInNjaGVtZVwiKSksXG4gICAgICAgICAgcm9sZTogbnVsbCxcbiAgICAgICAgfTtcbiAgICAgIH1cbiAgICB9IGVsc2UgaWYgKG5vZGUubmFtZXNwYWNlVVJJID09IEJhc2UuTlMuREMpIHtcbiAgICAgIHJldHVybiB7XG4gICAgICAgIG5hbWU6IHByZWRlZmluZWRQcmVmaXhlc1tcImRjdGVybXNcIl0gKyBub2RlLmxvY2FsTmFtZSxcbiAgICAgICAgb3JkZXI6IG9yZGVyKyssXG4gICAgICAgIGxhbmc6IG5vZGUuZ2V0QXR0cmlidXRlKFwieG1sOmxhbmdcIiksXG4gICAgICAgIHZhbHVlOiBub2RlLnRleHRDb250ZW50LFxuICAgICAgICBpZDogbm9kZS5nZXRBdHRyaWJ1dGUoXCJpZFwiKSxcbiAgICAgICAgcmVmaW5lczogbnVsbCxcbiAgICAgICAgc2NoZW1lOiBudWxsLFxuICAgICAgICByb2xlOiBub2RlLmdldEF0dHJpYnV0ZShcInJvbGVcIikgfHwgbm9kZS5nZXRBdHRyaWJ1dGUoXCJvcGY6cm9sZVwiKSxcbiAgICAgIH07XG4gICAgfVxuICAgIHJldHVybiBudWxsO1xuICB9KTtcblxuICAvLyBJdGVtcyBncm91cGVkIGJ5IHRoZWlyIHRhcmdldCBpZC5cbiAgY29uc3QgcmF3SXRlbXNCeVRhcmdldCA9IEJhc2UubXVsdGlJbmRleEFycmF5KFxuICAgIHJhd0l0ZW1zLFxuICAgIChyYXdJdGVtKSA9PiByYXdJdGVtLnJlZmluZXMsXG4gICk7XG4gIGNvbnN0IG1ha2VNZXRhZGF0YSA9IChtYXA6IFJhd01ldGEpOiBNZXRhID0+XG4gICAgQmFzZS5tYXBPYmoobWFwLCAocmF3SXRlbUFyciwgX2l0ZW1OYW1lKSA9PlxuICAgICAgcmF3SXRlbUFyci5tYXAoKHJhd0l0ZW0pID0+IHtcbiAgICAgICAgY29uc3QgZW50cnkgPSB7IHY6IHJhd0l0ZW0udmFsdWUsIG86IHJhd0l0ZW0ub3JkZXIgfTtcbiAgICAgICAgaWYgKHJhd0l0ZW0uc2NoZW1lKSB7XG4gICAgICAgICAgZW50cnlbXCJzXCJdID0gcmF3SXRlbS5zY2hlbWU7XG4gICAgICAgIH1cbiAgICAgICAgbGV0IHJlZnMgPSByYXdJdGVtc0J5VGFyZ2V0W2AjJHtyYXdJdGVtLmlkfWBdIHx8IFtdO1xuICAgICAgICBpZiAocmVmcy5sZW5ndGggfHwgcmF3SXRlbS5sYW5nIHx8IHJhd0l0ZW0ucm9sZSkge1xuICAgICAgICAgIGlmIChyYXdJdGVtLmxhbmcpIHtcbiAgICAgICAgICAgIC8vIFNwZWNpYWwgaGFuZGxpbmcgZm9yIHhtbDpsYW5nXG4gICAgICAgICAgICByZWZzLnB1c2goe1xuICAgICAgICAgICAgICBuYW1lOiBtZXRhVGVybXMubGFuZ3VhZ2UsXG4gICAgICAgICAgICAgIHZhbHVlOiByYXdJdGVtLmxhbmcsXG4gICAgICAgICAgICAgIGxhbmc6IG51bGwsXG4gICAgICAgICAgICAgIGlkOiBudWxsLFxuICAgICAgICAgICAgICByZWZpbmVzOiByYXdJdGVtLmlkLFxuICAgICAgICAgICAgICBzY2hlbWU6IG51bGwsXG4gICAgICAgICAgICAgIG9yZGVyOiByYXdJdGVtLm9yZGVyLFxuICAgICAgICAgICAgICByb2xlOiBudWxsLFxuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgfVxuICAgICAgICAgIGlmIChyYXdJdGVtLnJvbGUpIHtcbiAgICAgICAgICAgIC8vIFNwZWNpYWwgaGFuZGxpbmcgZm9yIG9wZjpyb2xlXG4gICAgICAgICAgICByZWZzLnB1c2goe1xuICAgICAgICAgICAgICBuYW1lOiBtZXRhVGVybXMucm9sZSxcbiAgICAgICAgICAgICAgdmFsdWU6IHJhd0l0ZW0ucm9sZSxcbiAgICAgICAgICAgICAgbGFuZzogbnVsbCxcbiAgICAgICAgICAgICAgaWQ6IG51bGwsXG4gICAgICAgICAgICAgIHJlZmluZXM6IHJhd0l0ZW0uaWQsXG4gICAgICAgICAgICAgIHNjaGVtZTogbnVsbCxcbiAgICAgICAgICAgICAgb3JkZXI6IHJhd0l0ZW0ub3JkZXIsXG4gICAgICAgICAgICAgIHJvbGU6IG51bGwsXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICB9XG4gICAgICAgICAgY29uc3QgZW50cnlNYXAgPSBCYXNlLm11bHRpSW5kZXhBcnJheShcbiAgICAgICAgICAgIHJlZnMsXG4gICAgICAgICAgICAocmF3SXRlbSkgPT4gcmF3SXRlbS5uYW1lLFxuICAgICAgICAgICk7XG4gICAgICAgICAgZW50cnlbXCJyXCJdID0gbWFrZU1ldGFkYXRhKGVudHJ5TWFwKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gZW50cnk7XG4gICAgICB9KSxcbiAgICApO1xuICBjb25zdCBtZXRhZGF0YSA9IG1ha2VNZXRhZGF0YShcbiAgICBCYXNlLm11bHRpSW5kZXhBcnJheShyYXdJdGVtcywgKHJhd0l0ZW0pID0+XG4gICAgICByYXdJdGVtLnJlZmluZXMgPyBudWxsIDogcmF3SXRlbS5uYW1lLFxuICAgICksXG4gICk7XG4gIGxldCBsYW5nOiBzdHJpbmcgfCBudWxsID0gbnVsbDtcbiAgaWYgKG1ldGFkYXRhW21ldGFUZXJtcy5sYW5ndWFnZV0pIHtcbiAgICBsYW5nID0gbWV0YWRhdGFbbWV0YVRlcm1zLmxhbmd1YWdlXVswXVtcInZcIl07XG4gIH1cbiAgY29uc3Qgc29ydE1ldGFkYXRhID0gKG1ldGFkYXRhOiBNZXRhKSA9PiB7XG4gICAgZm9yIChjb25zdCB0ZXJtIGluIG1ldGFkYXRhKSB7XG4gICAgICBjb25zdCBhcnIgPSBtZXRhZGF0YVt0ZXJtXTtcbiAgICAgIGFyci5zb3J0KGdldE1ldGFkYXRhQ29tcGFyYXRvcih0ZXJtLCBsYW5nKSk7XG4gICAgICBmb3IgKGxldCBpID0gMDsgaSA8IGFyci5sZW5ndGg7IGkrKykge1xuICAgICAgICBjb25zdCByID0gYXJyW2ldW1wiclwiXTtcbiAgICAgICAgaWYgKHIpIHtcbiAgICAgICAgICBzb3J0TWV0YWRhdGEocik7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gIH07XG4gIHNvcnRNZXRhZGF0YShtZXRhZGF0YSk7XG4gIHJldHVybiBtZXRhZGF0YTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGdldE1hdGhKYXhIdWIoKTogb2JqZWN0IHtcbiAgY29uc3QgbWF0aCA9IHdpbmRvd1tcIk1hdGhKYXhcIl07XG4gIGlmIChtYXRoKSB7XG4gICAgcmV0dXJuIG1hdGhbXCJIdWJcIl07XG4gIH1cbiAgcmV0dXJuIG51bGw7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBjaGVja01hdGhKYXgoKTogdm9pZCB7XG4gIGlmIChnZXRNYXRoSmF4SHViKCkpIHtcbiAgICBDc3NDYXNjYWRlLnN1cHBvcnRlZE5hbWVzcGFjZXNbQmFzZS5OUy5NQVRITUxdID0gdHJ1ZTtcbiAgfVxufVxuXG5leHBvcnQgY29uc3Qgc3VwcG9ydGVkTWVkaWFUeXBlcyA9IHtcbiAgXCJhcHBsaWNhdGlvbi94aHRtbCt4bWxcIjogdHJ1ZSxcbiAgXCJpbWFnZS9qcGVnXCI6IHRydWUsXG4gIFwiaW1hZ2UvcG5nXCI6IHRydWUsXG4gIFwiaW1hZ2Uvc3ZnK3htbFwiOiB0cnVlLFxuICBcImltYWdlL2dpZlwiOiB0cnVlLFxuICBcImF1ZGlvL21wM1wiOiB0cnVlLFxufTtcblxuZXhwb3J0IGNvbnN0IHRyYW5zZm9ybWVkSWRQcmVmaXggPSBcInZpdi1pZC1cIjtcblxuZXhwb3J0IGNsYXNzIE9QRkRvYyB7XG4gIG9wZlhNTDogWG1sRG9jLlhNTERvY0hvbGRlciA9IG51bGw7XG4gIGVuY1hNTDogWG1sRG9jLlhNTERvY0hvbGRlciA9IG51bGw7XG4gIGl0ZW1zOiBPUEZJdGVtW10gPSBudWxsO1xuICBzcGluZTogT1BGSXRlbVtdID0gbnVsbDtcbiAgaXRlbU1hcDogeyBba2V5OiBzdHJpbmddOiBPUEZJdGVtIH0gPSBudWxsO1xuICBpdGVtTWFwQnlQYXRoOiB7IFtrZXk6IHN0cmluZ106IE9QRkl0ZW0gfSA9IG51bGw7XG4gIHVpZDogc3RyaW5nIHwgbnVsbCA9IG51bGw7XG4gIGJpbmRpbmdzOiB7IFtrZXk6IHN0cmluZ106IHN0cmluZyB9ID0ge307XG4gIGxhbmc6IHN0cmluZyB8IG51bGwgPSBudWxsO1xuICBlcGFnZUNvdW50OiBudW1iZXIgPSAwO1xuICBwcmVQYWdpbmF0ZWQ6IGJvb2xlYW4gPSBmYWxzZTtcbiAgZXBhZ2VJc1JlbmRlcmVkUGFnZTogYm9vbGVhbiA9IHRydWU7XG4gIGVwYWdlQ291bnRDYWxsYmFjazogKHAxOiBudW1iZXIpID0+IHZvaWQgfCBudWxsID0gbnVsbDtcbiAgbWV0YWRhdGE6IE1ldGEgPSB7fTtcbiAgbmN4VG9jOiBPUEZJdGVtID0gbnVsbDtcbiAgeGh0bWxUb2M6IE9QRkl0ZW0gPSBudWxsO1xuICBjb3ZlcjogT1BGSXRlbSA9IG51bGw7XG4gIGZhbGxiYWNrTWFwOiB7IFtrZXk6IHN0cmluZ106IHN0cmluZyB9ID0ge307XG4gIHBhZ2VQcm9ncmVzc2lvbjogQ29uc3RhbnRzLlBhZ2VQcm9ncmVzc2lvbiB8IG51bGwgPSBudWxsO1xuICBkb2N1bWVudFVSTFRyYW5zZm9ybWVyOiBCYXNlLkRvY3VtZW50VVJMVHJhbnNmb3JtZXI7XG5cbiAgY29uc3RydWN0b3IoXG4gICAgcHVibGljIHJlYWRvbmx5IHN0b3JlOiBFUFVCRG9jU3RvcmUsXG4gICAgcHVibGljIHJlYWRvbmx5IHB1YlVSTDogc3RyaW5nLFxuICApIHtcbiAgICB0aGlzLmRvY3VtZW50VVJMVHJhbnNmb3JtZXIgPSB0aGlzLmNyZWF0ZURvY3VtZW50VVJMVHJhbnNmb3JtZXIoKTtcbiAgICBjaGVja01hdGhKYXgoKTtcbiAgfVxuXG4gIC8vIEZJWE1FOiBUUzQwNTVcbiAgY3JlYXRlRG9jdW1lbnRVUkxUcmFuc2Zvcm1lcigpOiBCYXNlLkRvY3VtZW50VVJMVHJhbnNmb3JtZXIge1xuICAgIGNvbnN0IHNlbGYgPSB0aGlzO1xuICAgIGNsYXNzIE9QRkRvY3VtZW50VVJMVHJhbnNmb3JtZXIgaW1wbGVtZW50cyBCYXNlLkRvY3VtZW50VVJMVHJhbnNmb3JtZXIge1xuICAgICAgLyoqXG4gICAgICAgKiBAb3ZlcnJpZGVcbiAgICAgICAqL1xuICAgICAgdHJhbnNmb3JtRnJhZ21lbnQoZnJhZ21lbnQ6IHN0cmluZywgYmFzZVVSTDogc3RyaW5nKTogc3RyaW5nIHtcbiAgICAgICAgY29uc3QgdXJsID0gYmFzZVVSTCArIChmcmFnbWVudCA/IGAjJHtmcmFnbWVudH1gIDogXCJcIik7XG4gICAgICAgIHJldHVybiB0cmFuc2Zvcm1lZElkUHJlZml4ICsgQmFzZS5lc2NhcGVOYW1lU3RyVG9IZXgodXJsLCBcIjpcIik7XG4gICAgICB9XG5cbiAgICAgIC8qKlxuICAgICAgICogQG92ZXJyaWRlXG4gICAgICAgKi9cbiAgICAgIHRyYW5zZm9ybVVSTCh1cmw6IHN0cmluZywgYmFzZVVSTDogc3RyaW5nKTogc3RyaW5nIHtcbiAgICAgICAgY29uc3QgciA9IHVybC5tYXRjaCgvXihbXiNdKikjPyguKikkLyk7XG4gICAgICAgIGlmIChyKSB7XG4gICAgICAgICAgY29uc3QgcGF0aCA9IHJbMV0gfHwgYmFzZVVSTDtcbiAgICAgICAgICBjb25zdCBmcmFnbWVudCA9IGRlY29kZVVSSUNvbXBvbmVudChyWzJdKTtcbiAgICAgICAgICBpZiAocGF0aCkge1xuICAgICAgICAgICAgaWYgKHNlbGYuaXRlbXMuc29tZSgoaXRlbSkgPT4gaXRlbS5zcmMgPT09IHBhdGgpKSB7XG4gICAgICAgICAgICAgIHJldHVybiBgIyR7dGhpcy50cmFuc2Zvcm1GcmFnbWVudChmcmFnbWVudCwgcGF0aCl9YDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHVybDtcbiAgICAgIH1cblxuICAgICAgLyoqXG4gICAgICAgKiBAb3ZlcnJpZGVcbiAgICAgICAqL1xuICAgICAgcmVzdG9yZVVSTChlbmNvZGVkOiBzdHJpbmcpOiBzdHJpbmdbXSB7XG4gICAgICAgIGlmIChlbmNvZGVkLmNoYXJBdCgwKSA9PT0gXCIjXCIpIHtcbiAgICAgICAgICBlbmNvZGVkID0gZW5jb2RlZC5zdWJzdHJpbmcoMSk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGVuY29kZWQuaW5kZXhPZih0cmFuc2Zvcm1lZElkUHJlZml4KSA9PT0gMCkge1xuICAgICAgICAgIGVuY29kZWQgPSBlbmNvZGVkLnN1YnN0cmluZyh0cmFuc2Zvcm1lZElkUHJlZml4Lmxlbmd0aCk7XG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgZGVjb2RlZCA9IEJhc2UudW5lc2NhcGVTdHJGcm9tSGV4KGVuY29kZWQsIFwiOlwiKTtcbiAgICAgICAgY29uc3QgciA9IGRlY29kZWQubWF0Y2goL14oW14jXSopIz8oLiopJC8pO1xuICAgICAgICByZXR1cm4gciA/IFtyWzFdLCByWzJdXSA6IFtdO1xuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gbmV3IE9QRkRvY3VtZW50VVJMVHJhbnNmb3JtZXIoKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBNZXRhZGF0YSBpcyBvcmdhbml6ZWQgaW4gdGhlIGZvbGxvd2luZyB3YXk6IGZ1bGx5LWV4cGFuZGVkIHByb3BlcnR5IG5hbWVzXG4gICAqICh3aXRoIElSSSBwcmVmaXhlcyBwcmVwZW5kZWQpIHBvaW50IHRvIGFuIGFycmF5IG9mIHZhbHVlcy4gQXJyYXkgY29udGFpbnNcbiAgICogYXQgbGVhc3Qgb25lIGVsZW1lbnQuIEZpcnN0IGVsZW1lbnQgaXMgcHJpbWFyeSBhbmQgc2hvdWxkIGJlIHVzZWQgYnlcbiAgICogZGVmYXVsdC4gRWxlbWVudCB2YWx1ZXMgYXJlIG9iamVjdHMgaGF2ZSB0aGUgZm9sbG93aW5nIGtleXM6XG4gICAqIC0gXCJ2XCIgLSBpdGVtIHZhbHVlIGFzIHN0cmluZyxcbiAgICogLSBcInNcIiAtIHNjaGVtZSxcbiAgICogLSBcIm9cIiAtIGluZGV4IGluIHRoZSBvcmRlciBvZiBhcHBlYXJpbmcgaW4gdGhlIHNvdXJjZSxcbiAgICogLSBcInJcIiAtIHJlZmluZW1lbnQgc3VibWV0YWRhdGEgKG9yZ2FuaXplZCBqdXN0IGxpa2UgdGhlIHRvcC1sZXZlbFxuICAgKiBtZXRhZGF0YSkuXG4gICAqL1xuICBnZXRNZXRhZGF0YSgpOiBNZXRhIHtcbiAgICByZXR1cm4gdGhpcy5tZXRhZGF0YTtcbiAgfVxuXG4gIGdldFBhdGhGcm9tVVJMKHVybDogc3RyaW5nKTogc3RyaW5nIHwgbnVsbCB7XG4gICAgaWYgKHVybC5zdGFydHNXaXRoKFwiZGF0YTpcIikpIHtcbiAgICAgIHJldHVybiB1cmwgPT09IHRoaXMucHViVVJMID8gXCJcIiA6IHVybDtcbiAgICB9XG4gICAgaWYgKHRoaXMucHViVVJMKSB7XG4gICAgICBsZXQgZXB1YkJhc2VVUkwgPSBCYXNlLnJlc29sdmVVUkwoXCJcIiwgdGhpcy5wdWJVUkwpO1xuICAgICAgaWYgKHVybCA9PT0gZXB1YkJhc2VVUkwgfHwgdXJsICsgXCIvXCIgPT09IGVwdWJCYXNlVVJMKSB7XG4gICAgICAgIHJldHVybiBcIlwiO1xuICAgICAgfVxuICAgICAgaWYgKGVwdWJCYXNlVVJMLmNoYXJBdChlcHViQmFzZVVSTC5sZW5ndGggLSAxKSAhPSBcIi9cIikge1xuICAgICAgICBlcHViQmFzZVVSTCArPSBcIi9cIjtcbiAgICAgIH1cbiAgICAgIHJldHVybiB1cmwuc3Vic3RyKDAsIGVwdWJCYXNlVVJMLmxlbmd0aCkgPT0gZXB1YkJhc2VVUkxcbiAgICAgICAgPyBkZWNvZGVVUkkodXJsLnN1YnN0cihlcHViQmFzZVVSTC5sZW5ndGgpKVxuICAgICAgICA6IG51bGw7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiB1cmw7XG4gICAgfVxuICB9XG5cbiAgaW5pdFdpdGhYTUxEb2MoXG4gICAgb3BmWE1MOiBYbWxEb2MuWE1MRG9jSG9sZGVyLFxuICAgIGVuY1hNTDogWG1sRG9jLlhNTERvY0hvbGRlcixcbiAgICB6aXBNZXRhZGF0YTogQmFzZS5KU09OLFxuICAgIG1hbmlmZXN0VVJMOiBzdHJpbmcsXG4gICk6IFRhc2suUmVzdWx0PGFueT4ge1xuICAgIHRoaXMub3BmWE1MID0gb3BmWE1MO1xuICAgIHRoaXMuZW5jWE1MID0gZW5jWE1MO1xuICAgIGNvbnN0IHBrZyA9IG9wZlhNTC5kb2MoKS5jaGlsZChcInBhY2thZ2VcIik7XG4gICAgY29uc3QgdWlkcmVmID0gcGtnLmF0dHJpYnV0ZShcInVuaXF1ZS1pZGVudGlmaWVyXCIpWzBdO1xuICAgIGlmICh1aWRyZWYpIHtcbiAgICAgIGNvbnN0IHVpZEVsZW0gPSBvcGZYTUwuZ2V0RWxlbWVudChgJHtvcGZYTUwudXJsfSMke3VpZHJlZn1gKTtcbiAgICAgIGlmICh1aWRFbGVtKSB7XG4gICAgICAgIHRoaXMudWlkID0gdWlkRWxlbS50ZXh0Q29udGVudC5yZXBsYWNlKC9bIFxcblxcclxcdF0vZywgXCJcIik7XG4gICAgICB9XG4gICAgfVxuICAgIGNvbnN0IHNyY1RvRmFsbGJhY2tJZCA9IHt9O1xuICAgIHRoaXMuaXRlbXMgPSBwa2dcbiAgICAgIC5jaGlsZChcIm1hbmlmZXN0XCIpXG4gICAgICAuY2hpbGQoXCJpdGVtXCIpXG4gICAgICAuYXNBcnJheSgpXG4gICAgICAubWFwKChub2RlKSA9PiB7XG4gICAgICAgIGNvbnN0IGl0ZW0gPSBuZXcgT1BGSXRlbSgpO1xuICAgICAgICBjb25zdCBlbGVtID0gbm9kZSBhcyBFbGVtZW50O1xuICAgICAgICBpdGVtLmluaXRXaXRoRWxlbWVudChlbGVtLCBvcGZYTUwudXJsKTtcbiAgICAgICAgY29uc3QgZmFsbGJhY2sgPSBlbGVtLmdldEF0dHJpYnV0ZShcImZhbGxiYWNrXCIpO1xuICAgICAgICBpZiAoZmFsbGJhY2sgJiYgIXN1cHBvcnRlZE1lZGlhVHlwZXNbaXRlbS5tZWRpYVR5cGVdKSB7XG4gICAgICAgICAgc3JjVG9GYWxsYmFja0lkW2l0ZW0uc3JjXSA9IGZhbGxiYWNrO1xuICAgICAgICB9XG4gICAgICAgIGlmICghdGhpcy54aHRtbFRvYyAmJiBpdGVtLml0ZW1Qcm9wZXJ0aWVzW1wibmF2XCJdKSB7XG4gICAgICAgICAgdGhpcy54aHRtbFRvYyA9IGl0ZW07XG4gICAgICAgIH1cbiAgICAgICAgaWYgKCF0aGlzLmNvdmVyICYmIGl0ZW0uaXRlbVByb3BlcnRpZXNbXCJjb3Zlci1pbWFnZVwiXSkge1xuICAgICAgICAgIHRoaXMuY292ZXIgPSBpdGVtO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBpdGVtO1xuICAgICAgfSk7XG4gICAgdGhpcy5pdGVtTWFwID0gQmFzZS5pbmRleEFycmF5KFxuICAgICAgdGhpcy5pdGVtcyxcbiAgICAgIGdldE9QRkl0ZW1JZCBhcyAocDE6IE9QRkl0ZW0pID0+IHN0cmluZyB8IG51bGwsXG4gICAgKTtcbiAgICB0aGlzLml0ZW1NYXBCeVBhdGggPSBCYXNlLmluZGV4QXJyYXkodGhpcy5pdGVtcywgKGl0ZW0pID0+XG4gICAgICB0aGlzLmdldFBhdGhGcm9tVVJMKGl0ZW0uc3JjKSxcbiAgICApO1xuICAgIGZvciAoY29uc3Qgc3JjIGluIHNyY1RvRmFsbGJhY2tJZCkge1xuICAgICAgbGV0IGZhbGxiYWNrU3JjID0gc3JjO1xuICAgICAgd2hpbGUgKHRydWUpIHtcbiAgICAgICAgY29uc3QgaXRlbSA9IHRoaXMuaXRlbU1hcFtzcmNUb0ZhbGxiYWNrSWRbZmFsbGJhY2tTcmNdXTtcbiAgICAgICAgaWYgKCFpdGVtKSB7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHN1cHBvcnRlZE1lZGlhVHlwZXNbaXRlbS5tZWRpYVR5cGVdKSB7XG4gICAgICAgICAgdGhpcy5mYWxsYmFja01hcFtzcmNdID0gaXRlbS5zcmM7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cbiAgICAgICAgZmFsbGJhY2tTcmMgPSBpdGVtLnNyYztcbiAgICAgIH1cbiAgICB9XG4gICAgdGhpcy5zcGluZSA9IHBrZ1xuICAgICAgLmNoaWxkKFwic3BpbmVcIilcbiAgICAgIC5jaGlsZChcIml0ZW1yZWZcIilcbiAgICAgIC5hc0FycmF5KClcbiAgICAgIC5tYXAoKG5vZGUsIGluZGV4KSA9PiB7XG4gICAgICAgIGNvbnN0IGVsZW0gPSBub2RlIGFzIEVsZW1lbnQ7XG4gICAgICAgIGNvbnN0IGlkID0gZWxlbS5nZXRBdHRyaWJ1dGUoXCJpZHJlZlwiKTtcbiAgICAgICAgY29uc3QgaXRlbSA9IHRoaXMuaXRlbU1hcFtpZCBhcyBzdHJpbmddO1xuICAgICAgICBpZiAoaXRlbSkge1xuICAgICAgICAgIGl0ZW0uaXRlbVJlZkVsZW1lbnQgPSBlbGVtO1xuICAgICAgICAgIGl0ZW0uc3BpbmVJbmRleCA9IGluZGV4O1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBpdGVtO1xuICAgICAgfSk7XG4gICAgY29uc3QgdG9jQXR0ciA9IHBrZy5jaGlsZChcInNwaW5lXCIpLmF0dHJpYnV0ZShcInRvY1wiKVswXTtcbiAgICBpZiAodG9jQXR0cikge1xuICAgICAgdGhpcy5uY3hUb2MgPSB0aGlzLml0ZW1NYXBbdG9jQXR0cl07XG4gICAgfVxuICAgIGNvbnN0IHBhZ2VQcm9ncmVzc2lvbkF0dHIgPSBwa2dcbiAgICAgIC5jaGlsZChcInNwaW5lXCIpXG4gICAgICAuYXR0cmlidXRlKFwicGFnZS1wcm9ncmVzc2lvbi1kaXJlY3Rpb25cIilbMF07XG4gICAgaWYgKHBhZ2VQcm9ncmVzc2lvbkF0dHIpIHtcbiAgICAgIHRoaXMucGFnZVByb2dyZXNzaW9uID0gQ29uc3RhbnRzLnBhZ2VQcm9ncmVzc2lvbk9mKHBhZ2VQcm9ncmVzc2lvbkF0dHIpO1xuICAgIH1cbiAgICBjb25zdCBpZHBmT2JmVVJMcyA9ICFlbmNYTUxcbiAgICAgID8gW11cbiAgICAgIDogZW5jWE1MXG4gICAgICAgICAgLmRvYygpXG4gICAgICAgICAgLmNoaWxkKFwiZW5jcnlwdGlvblwiKVxuICAgICAgICAgIC5jaGlsZChcIkVuY3J5cHRlZERhdGFcIilcbiAgICAgICAgICAucHJlZGljYXRlKFxuICAgICAgICAgICAgWG1sRG9jLnByZWRpY2F0ZS53aXRoQ2hpbGQoXG4gICAgICAgICAgICAgIFwiRW5jcnlwdGlvbk1ldGhvZFwiLFxuICAgICAgICAgICAgICBYbWxEb2MucHJlZGljYXRlLndpdGhBdHRyaWJ1dGUoXG4gICAgICAgICAgICAgICAgXCJBbGdvcml0aG1cIixcbiAgICAgICAgICAgICAgICBcImh0dHA6Ly93d3cuaWRwZi5vcmcvMjAwOC9lbWJlZGRpbmdcIixcbiAgICAgICAgICAgICAgKSxcbiAgICAgICAgICAgICksXG4gICAgICAgICAgKVxuICAgICAgICAgIC5jaGlsZChcIkNpcGhlckRhdGFcIilcbiAgICAgICAgICAuY2hpbGQoXCJDaXBoZXJSZWZlcmVuY2VcIilcbiAgICAgICAgICAuYXR0cmlidXRlKFwiVVJJXCIpO1xuICAgIGNvbnN0IG1lZGlhVHlwZUVsZW1zID0gcGtnXG4gICAgICAuY2hpbGQoXCJiaW5kaW5nc1wiKVxuICAgICAgLmNoaWxkKFwibWVkaWFUeXBlXCIpXG4gICAgICAuYXNBcnJheSgpIGFzIEVsZW1lbnRbXTtcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IG1lZGlhVHlwZUVsZW1zLmxlbmd0aDsgaSsrKSB7XG4gICAgICBjb25zdCBoYW5kbGVySWQgPSBtZWRpYVR5cGVFbGVtc1tpXS5nZXRBdHRyaWJ1dGUoXCJoYW5kbGVyXCIpO1xuICAgICAgY29uc3QgbWVkaWFUeXBlID0gbWVkaWFUeXBlRWxlbXNbaV0uZ2V0QXR0cmlidXRlKFwibWVkaWEtdHlwZVwiKTtcbiAgICAgIGlmIChtZWRpYVR5cGUgJiYgaGFuZGxlcklkICYmIHRoaXMuaXRlbU1hcFtoYW5kbGVySWRdKSB7XG4gICAgICAgIHRoaXMuYmluZGluZ3NbbWVkaWFUeXBlXSA9IHRoaXMuaXRlbU1hcFtoYW5kbGVySWRdLnNyYztcbiAgICAgIH1cbiAgICB9XG4gICAgdGhpcy5tZXRhZGF0YSA9IHJlYWRNZXRhZGF0YShcbiAgICAgIHBrZy5jaGlsZChcIm1ldGFkYXRhXCIpLFxuICAgICAgcGtnLmF0dHJpYnV0ZShcInByZWZpeFwiKVswXSxcbiAgICApO1xuICAgIGlmICh0aGlzLm1ldGFkYXRhW21ldGFUZXJtcy5sYW5ndWFnZV0pIHtcbiAgICAgIHRoaXMubGFuZyA9IHRoaXMubWV0YWRhdGFbbWV0YVRlcm1zLmxhbmd1YWdlXVswXVtcInZcIl07XG4gICAgfVxuICAgIGlmICh0aGlzLm1ldGFkYXRhW21ldGFUZXJtcy5sYXlvdXRdKSB7XG4gICAgICB0aGlzLnByZVBhZ2luYXRlZCA9XG4gICAgICAgIHRoaXMubWV0YWRhdGFbbWV0YVRlcm1zLmxheW91dF1bMF1bXCJ2XCJdID09PSBcInByZS1wYWdpbmF0ZWRcIjtcbiAgICB9XG5cbiAgICBpZiAoIXppcE1ldGFkYXRhKSB7XG4gICAgICBpZiAoaWRwZk9iZlVSTHMubGVuZ3RoID4gMCAmJiB0aGlzLnVpZCkge1xuICAgICAgICAvLyBIYXZlIHRvIGRlb2JmdXNjYXRlIGluIEphdmFTY3JpcHRcbiAgICAgICAgY29uc3QgZGVvYmZ1c2NhdG9yID0gbWFrZURlb2JmdXNjYXRvcih0aGlzLnVpZCk7XG4gICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgaWRwZk9iZlVSTHMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICB0aGlzLnN0b3JlLmRlb2JmdXNjYXRvcnNbdGhpcy5wdWJVUkwgKyBpZHBmT2JmVVJMc1tpXV0gPSBkZW9iZnVzY2F0b3I7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIGlmICh0aGlzLnByZVBhZ2luYXRlZCkge1xuICAgICAgICB0aGlzLmFzc2lnbkF1dG9QYWdlcygpO1xuICAgICAgfVxuICAgICAgcmV0dXJuIFRhc2submV3UmVzdWx0KHRydWUpO1xuICAgIH1cbiAgICBjb25zdCBtYW5pZmVzdFRleHQgPSBuZXcgQmFzZS5TdHJpbmdCdWZmZXIoKTtcbiAgICBjb25zdCBvYmZ1c2NhdGlvbnMgPSB7fTtcbiAgICBpZiAoaWRwZk9iZlVSTHMubGVuZ3RoID4gMCAmJiB0aGlzLnVpZCkge1xuICAgICAgLy8gRGVvYmZ1c2NhdGUgaW4gdGhlIHNlcnZlci5cbiAgICAgIGNvbnN0IG9iZnVzY2F0aW9uS2V5ID0gbWFrZU9iZnVzY2F0aW9uS2V5KHRoaXMudWlkKTtcbiAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgaWRwZk9iZlVSTHMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgb2JmdXNjYXRpb25zW2lkcGZPYmZVUkxzW2ldXSA9IG9iZnVzY2F0aW9uS2V5O1xuICAgICAgfVxuICAgIH1cbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IHppcE1ldGFkYXRhLmxlbmd0aDsgaSsrKSB7XG4gICAgICBjb25zdCBlbnRyeSA9IHppcE1ldGFkYXRhW2ldO1xuICAgICAgY29uc3QgZW5jb2RlZFBhdGggPSBlbnRyeVtcIm5cIl07XG4gICAgICBpZiAoZW5jb2RlZFBhdGgpIHtcbiAgICAgICAgY29uc3QgcGF0aCA9IGRlY29kZVVSSShlbmNvZGVkUGF0aCk7XG4gICAgICAgIGNvbnN0IGl0ZW0gPSB0aGlzLml0ZW1NYXBCeVBhdGhbcGF0aF07XG4gICAgICAgIGxldCBtZWRpYVR5cGU6IHN0cmluZyB8IG51bGwgPSBudWxsO1xuICAgICAgICBpZiAoaXRlbSkge1xuICAgICAgICAgIGl0ZW0uY29tcHJlc3NlZCA9IGVudHJ5W1wibVwiXSAhPSAwO1xuICAgICAgICAgIGl0ZW0uY29tcHJlc3NlZFNpemUgPSBlbnRyeVtcImNcIl07XG4gICAgICAgICAgaWYgKGl0ZW0ubWVkaWFUeXBlKSB7XG4gICAgICAgICAgICBtZWRpYVR5cGUgPSBpdGVtLm1lZGlhVHlwZS5yZXBsYWNlKC9cXHMrL2csIFwiXCIpO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBjb25zdCBvYmZ1c2NhdGlvbiA9IG9iZnVzY2F0aW9uc1twYXRoXTtcbiAgICAgICAgaWYgKG1lZGlhVHlwZSB8fCBvYmZ1c2NhdGlvbikge1xuICAgICAgICAgIG1hbmlmZXN0VGV4dC5hcHBlbmQoZW5jb2RlZFBhdGgpO1xuICAgICAgICAgIG1hbmlmZXN0VGV4dC5hcHBlbmQoXCIgXCIpO1xuICAgICAgICAgIG1hbmlmZXN0VGV4dC5hcHBlbmQobWVkaWFUeXBlIHx8IFwiYXBwbGljYXRpb24vb2N0ZXQtc3RyZWFtXCIpO1xuICAgICAgICAgIGlmIChvYmZ1c2NhdGlvbikge1xuICAgICAgICAgICAgbWFuaWZlc3RUZXh0LmFwcGVuZChcIiBcIik7XG4gICAgICAgICAgICBtYW5pZmVzdFRleHQuYXBwZW5kKG9iZnVzY2F0aW9uKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgbWFuaWZlc3RUZXh0LmFwcGVuZChcIlxcblwiKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgICB0aGlzLmFzc2lnbkF1dG9QYWdlcygpO1xuICAgIHJldHVybiBOZXQuYWpheChcbiAgICAgIG1hbmlmZXN0VVJMLFxuICAgICAgTmV0LlhNTEh0dHBSZXF1ZXN0UmVzcG9uc2VUeXBlLkRFRkFVTFQsXG4gICAgICBcIlBPU1RcIixcbiAgICAgIG1hbmlmZXN0VGV4dC50b1N0cmluZygpLFxuICAgICAgXCJ0ZXh0L3BsYWluXCIsXG4gICAgKTtcbiAgfVxuXG4gIGFzc2lnbkF1dG9QYWdlcygpOiB2b2lkIHtcbiAgICBsZXQgZXBhZ2UgPSAwO1xuICAgIGZvciAoY29uc3QgaXRlbSBvZiB0aGlzLnNwaW5lKSB7XG4gICAgICBjb25zdCBlcGFnZUNvdW50ID0gdGhpcy5wcmVQYWdpbmF0ZWRcbiAgICAgICAgPyAxXG4gICAgICAgIDogTWF0aC5jZWlsKGl0ZW0uY29tcHJlc3NlZFNpemUgLyAxMDI0KTtcbiAgICAgIGl0ZW0uZXBhZ2UgPSBlcGFnZTtcbiAgICAgIGl0ZW0uZXBhZ2VDb3VudCA9IGVwYWdlQ291bnQ7XG4gICAgICBlcGFnZSArPSBlcGFnZUNvdW50O1xuICAgIH1cbiAgICB0aGlzLmVwYWdlQ291bnQgPSBlcGFnZTtcblxuICAgIGlmICh0aGlzLmVwYWdlQ291bnRDYWxsYmFjaykge1xuICAgICAgdGhpcy5lcGFnZUNvdW50Q2FsbGJhY2sodGhpcy5lcGFnZUNvdW50KTtcbiAgICB9XG4gIH1cblxuICBzZXRFUGFnZUNvdW50TW9kZShlcGFnZUlzUmVuZGVyZWRQYWdlOiBib29sZWFuKSB7XG4gICAgdGhpcy5lcGFnZUlzUmVuZGVyZWRQYWdlID0gZXBhZ2VJc1JlbmRlcmVkUGFnZSB8fCB0aGlzLnByZVBhZ2luYXRlZDtcbiAgfVxuXG4gIGNvdW50RVBhZ2VzKFxuICAgIGVwYWdlQ291bnRDYWxsYmFjazogKChwMTogbnVtYmVyKSA9PiB2b2lkKSB8IG51bGwsXG4gICk6IFRhc2suUmVzdWx0PGJvb2xlYW4+IHtcbiAgICB0aGlzLmVwYWdlQ291bnRDYWxsYmFjayA9IGVwYWdlQ291bnRDYWxsYmFjaztcblxuICAgIGlmICh0aGlzLmVwYWdlSXNSZW5kZXJlZFBhZ2UpIHtcbiAgICAgIGlmICh0aGlzLnByZVBhZ2luYXRlZCAmJiB0aGlzLmVwYWdlQ291bnQgPT0gMCkge1xuICAgICAgICB0aGlzLmFzc2lnbkF1dG9QYWdlcygpO1xuICAgICAgfVxuICAgICAgcmV0dXJuIFRhc2submV3UmVzdWx0KHRydWUpO1xuICAgIH1cblxuICAgIGxldCBlcGFnZSA9IDA7XG4gICAgbGV0IGkgPSAwO1xuICAgIGNvbnN0IGZyYW1lOiBUYXNrLkZyYW1lPGJvb2xlYW4+ID0gVGFzay5uZXdGcmFtZShcImNvdW50RVBhZ2VzXCIpO1xuICAgIGZyYW1lXG4gICAgICAubG9vcFdpdGhGcmFtZSgobG9vcEZyYW1lKSA9PiB7XG4gICAgICAgIGlmIChpID09PSB0aGlzLnNwaW5lLmxlbmd0aCkge1xuICAgICAgICAgIGxvb3BGcmFtZS5icmVha0xvb3AoKTtcbiAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgaXRlbSA9IHRoaXMuc3BpbmVbaSsrXTtcbiAgICAgICAgaXRlbS5lcGFnZSA9IGVwYWdlO1xuICAgICAgICB0aGlzLnN0b3JlLmxvYWQoaXRlbS5zcmMpLnRoZW4oKHhtbGRvYykgPT4ge1xuICAgICAgICAgIC8vIEFjY29yZGluZyB0byB0aGUgb2xkIGNvbW1lbnQsXG4gICAgICAgICAgLy8gXCJFc3RpbWF0ZSB0aGF0IG9mZnNldD0yNzAwIHJvdWdobHkgY29ycmVzcG9uZHMgdG8gMTAyNCBieXRlcyBvZiBjb21wcmVzc2VkIHNpemUuXCJcbiAgICAgICAgICAvLyBIb3dldmVyLCBpdCBzaG91bGQgZGVwZW5kIG9uIHRoZSBsYW5ndWFnZS5cbiAgICAgICAgICAvLyBGdXJ0aGVyIGFkanVzdG1lbnQgbmVlZGVkLlxuXG4gICAgICAgICAgLy9sZXQgb2Zmc2V0UGVyRVBhZ2UgPSAyNzAwO1xuICAgICAgICAgIGxldCBvZmZzZXRQZXJFUGFnZSA9IDE4MDA7XG4gICAgICAgICAgY29uc3QgbGFuZyA9IHhtbGRvYy5sYW5nIHx8IHRoaXMubGFuZztcbiAgICAgICAgICBpZiAobGFuZyAmJiBsYW5nLm1hdGNoKC9eKGphfGtvfHpoKS8pKSB7XG4gICAgICAgICAgICBvZmZzZXRQZXJFUGFnZSAvPSAzO1xuICAgICAgICAgIH1cbiAgICAgICAgICBpdGVtLmVwYWdlQ291bnQgPSBNYXRoLmNlaWwoeG1sZG9jLmdldFRvdGFsT2Zmc2V0KCkgLyBvZmZzZXRQZXJFUGFnZSk7XG4gICAgICAgICAgZXBhZ2UgKz0gaXRlbS5lcGFnZUNvdW50O1xuICAgICAgICAgIHRoaXMuZXBhZ2VDb3VudCA9IGVwYWdlO1xuICAgICAgICAgIGlmICh0aGlzLmVwYWdlQ291bnRDYWxsYmFjaykge1xuICAgICAgICAgICAgdGhpcy5lcGFnZUNvdW50Q2FsbGJhY2sodGhpcy5lcGFnZUNvdW50KTtcbiAgICAgICAgICB9XG4gICAgICAgICAgbG9vcEZyYW1lLmNvbnRpbnVlTG9vcCgpO1xuICAgICAgICB9KTtcbiAgICAgIH0pXG4gICAgICAudGhlbkZpbmlzaChmcmFtZSk7XG4gICAgcmV0dXJuIGZyYW1lLnJlc3VsdCgpO1xuICB9XG5cbiAgLyoqXG4gICAqIENyZWF0ZXMgYSBmYWtlIE9QRiBcImRvY3VtZW50XCIgdGhhdCBjb250YWlucyBPUFMgY2hhcHRlcnMuXG4gICAqL1xuICBpbml0V2l0aENoYXB0ZXJzKHBhcmFtczogT1BGSXRlbVBhcmFtW10sIGRvYz86IERvY3VtZW50IHwgbnVsbCkge1xuICAgIHRoaXMuaXRlbU1hcCA9IHt9O1xuICAgIHRoaXMuaXRlbU1hcEJ5UGF0aCA9IHt9O1xuICAgIHRoaXMuaXRlbXMgPSBbXTtcbiAgICB0aGlzLnNwaW5lID0gdGhpcy5pdGVtcztcblxuICAgIC8vIGNyZWF0ZSBhIG1pbmltdW0gZmFrZSBPUEYgWE1MIGZvciBuYXZpZ2F0aW9uIHdpdGggRVBVQiBDRklcbiAgICBjb25zdCBvcGZYTUwgPSAodGhpcy5vcGZYTUwgPSBuZXcgWG1sRG9jLlhNTERvY0hvbGRlcihcbiAgICAgIG51bGwsXG4gICAgICBcIlwiLFxuICAgICAgbmV3IERPTVBhcnNlcigpLnBhcnNlRnJvbVN0cmluZyhcIjxzcGluZT48L3NwaW5lPlwiLCBcInRleHQveG1sXCIpLFxuICAgICkpO1xuICAgIHBhcmFtcy5mb3JFYWNoKChwYXJhbSkgPT4ge1xuICAgICAgY29uc3QgaXRlbSA9IG5ldyBPUEZJdGVtKCk7XG4gICAgICBpdGVtLmluaXRXaXRoUGFyYW0ocGFyYW0pO1xuICAgICAgQXNzZXJ0cy5hc3NlcnQoaXRlbS5pZCk7XG4gICAgICBjb25zdCBpdGVtcmVmID0gb3BmWE1MLmRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJpdGVtcmVmXCIpO1xuICAgICAgaXRlbXJlZi5zZXRBdHRyaWJ1dGUoXCJpZHJlZlwiLCBpdGVtLmlkKTtcbiAgICAgIG9wZlhNTC5yb290LmFwcGVuZENoaWxkKGl0ZW1yZWYpO1xuICAgICAgaXRlbS5pdGVtUmVmRWxlbWVudCA9IGl0ZW1yZWY7XG4gICAgICB0aGlzLml0ZW1NYXBbaXRlbS5pZF0gPSBpdGVtO1xuICAgICAgbGV0IHBhdGggPSB0aGlzLmdldFBhdGhGcm9tVVJMKHBhcmFtLnVybCk7XG4gICAgICBpZiAocGF0aCA9PSBudWxsKSB7XG4gICAgICAgIHBhdGggPSBwYXJhbS51cmw7XG4gICAgICB9XG4gICAgICB0aGlzLml0ZW1NYXBCeVBhdGhbcGF0aF0gPSBpdGVtO1xuICAgICAgdGhpcy5pdGVtcy5wdXNoKGl0ZW0pO1xuICAgIH0pO1xuICAgIGlmIChkb2MpIHtcbiAgICAgIHJldHVybiB0aGlzLnN0b3JlLmFkZERvY3VtZW50KHBhcmFtc1swXS51cmwsIGRvYyk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiBUYXNrLm5ld1Jlc3VsdChudWxsKTtcbiAgICB9XG4gIH1cblxuICBpbml0V2l0aFdlYlB1Yk1hbmlmZXN0KFxuICAgIG1hbmlmZXN0T2JqOiBCYXNlLkpTT04sXG4gICAgZG9jPzogRG9jdW1lbnQsXG4gICAgbWFuaWZlc3RVcmw/OiBzdHJpbmcsXG4gICk6IFRhc2suUmVzdWx0PGJvb2xlYW4+IHtcbiAgICBpZiAobWFuaWZlc3RPYmpbXCJyZWFkaW5nUHJvZ3Jlc3Npb25cIl0pIHtcbiAgICAgIHRoaXMucGFnZVByb2dyZXNzaW9uID0gbWFuaWZlc3RPYmpbXCJyZWFkaW5nUHJvZ3Jlc3Npb25cIl07XG4gICAgfVxuICAgIGlmICh0aGlzLm1ldGFkYXRhID09PSB1bmRlZmluZWQpIHtcbiAgICAgIHRoaXMubWV0YWRhdGEgPSB7fTtcbiAgICB9XG4gICAgY29uc3QgdGl0bGUgPVxuICAgICAgKGRvYyAmJiBkb2MudGl0bGUpIHx8XG4gICAgICBtYW5pZmVzdE9ialtcIm5hbWVcIl0gfHxcbiAgICAgIChtYW5pZmVzdE9ialtcIm1ldGFkYXRhXCJdICYmIG1hbmlmZXN0T2JqW1wibWV0YWRhdGFcIl1bXCJ0aXRsZVwiXSk7XG4gICAgaWYgKHRpdGxlKSB7XG4gICAgICB0aGlzLm1ldGFkYXRhW21ldGFUZXJtcy50aXRsZV0gPSBbeyB2OiB0aXRsZSB9XTtcbiAgICB9XG4gICAgLy8gVE9ETzogb3RoZXIgbWV0YWRhdGEuLi5cblxuICAgIGNvbnN0IHByaW1hcnlFbnRyeVBhdGggPSB0aGlzLmdldFBhdGhGcm9tVVJMKHRoaXMucHViVVJMKTtcbiAgICBpZiAoIW1hbmlmZXN0T2JqW1wicmVhZGluZ09yZGVyXCJdICYmIGRvYyAmJiBwcmltYXJ5RW50cnlQYXRoICE9PSBudWxsKSB7XG4gICAgICBtYW5pZmVzdE9ialtcInJlYWRpbmdPcmRlclwiXSA9IFtlbmNvZGVVUkkocHJpbWFyeUVudHJ5UGF0aCldO1xuXG4gICAgICAvLyBGaW5kIFRPQyBpbiB0aGUgcHJpbWFyeSBlbnRyeSAoWClIVE1MXG4gICAgICBjb25zdCBzZWxlY3RvciA9XG4gICAgICAgIFwiW3JvbGU9ZG9jLXRvY10gYVtocmVmXSxcIiArXG4gICAgICAgIFwiW3JvbGU9ZGlyZWN0b3J5XSBhW2hyZWZdLFwiICtcbiAgICAgICAgXCJuYXYgbGkgYVtocmVmXSxcIiArXG4gICAgICAgIFwiLnRvYyBhW2hyZWZdLFwiICtcbiAgICAgICAgXCIjdG9jIGFbaHJlZl1cIjtcbiAgICAgIGZvciAoY29uc3QgYW5jaG9yRWxlbSBvZiBkb2MucXVlcnlTZWxlY3RvckFsbChzZWxlY3RvcikpIHtcbiAgICAgICAgY29uc3QgaHJlZiA9IGFuY2hvckVsZW0uZ2V0QXR0cmlidXRlKFwiaHJlZlwiKTtcbiAgICAgICAgaWYgKC9eKGh0dHBzPzopP1xcL1xcLy8udGVzdChocmVmKSkge1xuICAgICAgICAgIC8vIEF2b2lkIGxpbmsgdG8gZXh0ZXJuYWwgcmVzb3VyY2VzXG4gICAgICAgICAgY29udGludWU7XG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgaHJlZk5vRnJhZ21lbnQgPSBCYXNlLnN0cmlwRnJhZ21lbnQoXG4gICAgICAgICAgQmFzZS5yZXNvbHZlVVJMKGhyZWYsIHRoaXMucHViVVJMKSxcbiAgICAgICAgKTtcbiAgICAgICAgY29uc3QgcGF0aCA9IHRoaXMuZ2V0UGF0aEZyb21VUkwoaHJlZk5vRnJhZ21lbnQpO1xuICAgICAgICBjb25zdCB1cmwgPSBwYXRoICE9PSBudWxsID8gZW5jb2RlVVJJKHBhdGgpIDogaHJlZk5vRnJhZ21lbnQ7XG4gICAgICAgIGlmIChtYW5pZmVzdE9ialtcInJlYWRpbmdPcmRlclwiXS5pbmRleE9mKHVybCkgPT0gLTEpIHtcbiAgICAgICAgICBtYW5pZmVzdE9ialtcInJlYWRpbmdPcmRlclwiXS5wdXNoKHVybCk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG5cbiAgICBjb25zdCBwYXJhbXMgPSBbXTtcbiAgICBsZXQgaXRlbUNvdW50ID0gMDtcbiAgICBsZXQgdG9jRm91bmQgPSAtMTtcbiAgICBbbWFuaWZlc3RPYmpbXCJyZWFkaW5nT3JkZXJcIl0sIG1hbmlmZXN0T2JqW1wicmVzb3VyY2VzXCJdXS5mb3JFYWNoKFxuICAgICAgKHJlYWRpbmdPcmRlck9yUmVzb3VyY2VzKSA9PiB7XG4gICAgICAgIGlmIChyZWFkaW5nT3JkZXJPclJlc291cmNlcyBpbnN0YW5jZW9mIEFycmF5KSB7XG4gICAgICAgICAgcmVhZGluZ09yZGVyT3JSZXNvdXJjZXMuZm9yRWFjaCgoaXRlbU9iaikgPT4ge1xuICAgICAgICAgICAgY29uc3QgaXNJblJlYWRpbmdPcmRlciA9IG1hbmlmZXN0T2JqW1wicmVhZGluZ09yZGVyXCJdLmluY2x1ZGVzKFxuICAgICAgICAgICAgICBpdGVtT2JqLFxuICAgICAgICAgICAgKTtcbiAgICAgICAgICAgIGNvbnN0IHVybCA9XG4gICAgICAgICAgICAgIHR5cGVvZiBpdGVtT2JqID09PSBcInN0cmluZ1wiXG4gICAgICAgICAgICAgICAgPyBpdGVtT2JqXG4gICAgICAgICAgICAgICAgOiBpdGVtT2JqLnVybCB8fCBpdGVtT2JqLmhyZWY7XG4gICAgICAgICAgICBjb25zdCBlbmNvZGluZ0Zvcm1hdCA9XG4gICAgICAgICAgICAgIHR5cGVvZiBpdGVtT2JqID09PSBcInN0cmluZ1wiXG4gICAgICAgICAgICAgICAgPyBcIlwiXG4gICAgICAgICAgICAgICAgOiBpdGVtT2JqLmVuY29kaW5nRm9ybWF0IHx8XG4gICAgICAgICAgICAgICAgICAoaXRlbU9iai5ocmVmICYmIGl0ZW1PYmoudHlwZSkgfHxcbiAgICAgICAgICAgICAgICAgIFwiXCI7XG4gICAgICAgICAgICBpZiAoXG4gICAgICAgICAgICAgIGlzSW5SZWFkaW5nT3JkZXIgfHxcbiAgICAgICAgICAgICAgZW5jb2RpbmdGb3JtYXQgPT09IFwidGV4dC9odG1sXCIgfHxcbiAgICAgICAgICAgICAgZW5jb2RpbmdGb3JtYXQgPT09IFwiYXBwbGljYXRpb24veGh0bWwreG1sXCIgfHxcbiAgICAgICAgICAgICAgLyhefFxcLykoW14vXStcXC4oeD9odG1sfGh0bXx4aHQpfFteLy5dKikoWyM/XXwkKS8udGVzdCh1cmwpXG4gICAgICAgICAgICApIHtcbiAgICAgICAgICAgICAgY29uc3QgcGFyYW0gPSB7XG4gICAgICAgICAgICAgICAgdXJsOiBCYXNlLnJlc29sdmVVUkwoXG4gICAgICAgICAgICAgICAgICBCYXNlLmNvbnZlcnRTcGVjaWFsVVJMKHVybCksXG4gICAgICAgICAgICAgICAgICBtYW5pZmVzdFVybCB8fCB0aGlzLnB1YlVSTCxcbiAgICAgICAgICAgICAgICApLFxuICAgICAgICAgICAgICAgIGluZGV4OiBpdGVtQ291bnQrKyxcbiAgICAgICAgICAgICAgICBzdGFydFBhZ2U6IG51bGwsXG4gICAgICAgICAgICAgICAgc2tpcFBhZ2VzQmVmb3JlOiBudWxsLFxuICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICBpZiAoaXRlbU9iai5yZWwgPT09IFwiY29udGVudHNcIiAmJiB0b2NGb3VuZCA9PT0gLTEpIHtcbiAgICAgICAgICAgICAgICB0b2NGb3VuZCA9IHBhcmFtLmluZGV4O1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIHBhcmFtcy5wdXNoKHBhcmFtKTtcblxuICAgICAgICAgICAgICAvL1RPRE86IGl0ZW1zIG5vdCBpbiByZWFkaW5nT3JkZXIgc2hvdWxkIGJlIGV4Y2x1ZGVkIGZyb20gbGluZWFyIHJlYWRpbmcgYnV0IGF2YWlsYWJsZSB3aXRoIGludGVybmFsIGxpbmsgbmF2aWdhdGlvbi5cbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgICAgfSxcbiAgICApO1xuICAgIGNvbnN0IGZyYW1lOiBUYXNrLkZyYW1lPGJvb2xlYW4+ID0gVGFzay5uZXdGcmFtZShcImluaXRXaXRoV2ViUHViTWFuaWZlc3RcIik7XG4gICAgdGhpcy5pbml0V2l0aENoYXB0ZXJzKHBhcmFtcykudGhlbigoKSA9PiB7XG4gICAgICBpZiAodG9jRm91bmQgIT09IC0xKSB7XG4gICAgICAgIHRoaXMueGh0bWxUb2MgPSB0aGlzLml0ZW1zW3RvY0ZvdW5kXTtcbiAgICAgIH1cblxuICAgICAgaWYgKCF0aGlzLnhodG1sVG9jKSB7XG4gICAgICAgIHRoaXMueGh0bWxUb2MgPSBtYW5pZmVzdFVybFxuICAgICAgICAgID8gdGhpcy5pdGVtcz8uWzBdXG4gICAgICAgICAgOiB0aGlzLml0ZW1NYXBCeVBhdGhbcHJpbWFyeUVudHJ5UGF0aF07XG4gICAgICB9XG5cbiAgICAgIGZyYW1lLmZpbmlzaCh0cnVlKTtcbiAgICB9KTtcbiAgICByZXR1cm4gZnJhbWUucmVzdWx0KCk7XG4gIH1cblxuICAvKipcbiAgICogQHJldHVybiBjZmlcbiAgICovXG4gIGdldENGSShzcGluZUluZGV4OiBudW1iZXIsIG9mZnNldEluSXRlbTogbnVtYmVyKTogVGFzay5SZXN1bHQ8c3RyaW5nIHwgbnVsbD4ge1xuICAgIGNvbnN0IGl0ZW0gPSB0aGlzLnNwaW5lW3NwaW5lSW5kZXhdO1xuICAgIGNvbnN0IGZyYW1lOiBUYXNrLkZyYW1lPHN0cmluZyB8IG51bGw+ID0gVGFzay5uZXdGcmFtZShcImdldENGSVwiKTtcbiAgICB0aGlzLnN0b3JlLmxvYWQoaXRlbS5zcmMpLnRoZW4oKHhtbGRvYzogWG1sRG9jLlhNTERvY0hvbGRlcikgPT4ge1xuICAgICAgY29uc3Qgbm9kZSA9IHhtbGRvYy5nZXROb2RlQnlPZmZzZXQob2Zmc2V0SW5JdGVtKTtcbiAgICAgIGxldCBjZmk6IHN0cmluZyB8IG51bGwgPSBudWxsO1xuICAgICAgaWYgKG5vZGUpIHtcbiAgICAgICAgY29uc3Qgc3RhcnRPZmZzZXQgPSB4bWxkb2MuZ2V0Tm9kZU9mZnNldChub2RlLCAwLCBmYWxzZSk7XG4gICAgICAgIGNvbnN0IG9mZnNldEluTm9kZSA9IG9mZnNldEluSXRlbSAtIHN0YXJ0T2Zmc2V0O1xuICAgICAgICBjb25zdCBmcmFnbWVudCA9IG5ldyBDRkkuRnJhZ21lbnQoKTtcbiAgICAgICAgZnJhZ21lbnQucHJlcGVuZFBhdGhGcm9tTm9kZShub2RlLCBvZmZzZXRJbk5vZGUsIGZhbHNlLCBudWxsKTtcbiAgICAgICAgaWYgKGl0ZW0uaXRlbVJlZkVsZW1lbnQpIHtcbiAgICAgICAgICBmcmFnbWVudC5wcmVwZW5kUGF0aEZyb21Ob2RlKGl0ZW0uaXRlbVJlZkVsZW1lbnQsIDAsIGZhbHNlLCBudWxsKTtcbiAgICAgICAgfVxuICAgICAgICBjZmkgPSBmcmFnbWVudC50b1N0cmluZygpO1xuICAgICAgfVxuICAgICAgZnJhbWUuZmluaXNoKGNmaSk7XG4gICAgfSk7XG4gICAgcmV0dXJuIGZyYW1lLnJlc3VsdCgpO1xuICB9XG5cbiAgcmVzb2x2ZUZyYWdtZW50KGZyYWdzdHI6IHN0cmluZyB8IG51bGwpOiBUYXNrLlJlc3VsdDxQb3NpdGlvbiB8IG51bGw+IHtcbiAgICByZXR1cm4gVGFzay5oYW5kbGUoXG4gICAgICBcInJlc29sdmVGcmFnbWVudFwiLFxuICAgICAgKGZyYW1lOiBUYXNrLkZyYW1lPFBvc2l0aW9uIHwgbnVsbD4pOiB2b2lkID0+IHtcbiAgICAgICAgaWYgKCFmcmFnc3RyKSB7XG4gICAgICAgICAgZnJhbWUuZmluaXNoKG51bGwpO1xuICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICBsZXQgZnJhZ21lbnQgPSBuZXcgQ0ZJLkZyYWdtZW50KCk7XG4gICAgICAgIGZyYWdtZW50LmZyb21TdHJpbmcoZnJhZ3N0cik7XG4gICAgICAgIGxldCBpdGVtOiBPUEZJdGVtO1xuICAgICAgICBpZiAodGhpcy5vcGZYTUwpIHtcbiAgICAgICAgICBjb25zdCBvcGZOYXYgPSBmcmFnbWVudC5uYXZpZ2F0ZSh0aGlzLm9wZlhNTC5kb2N1bWVudCk7XG4gICAgICAgICAgaWYgKG9wZk5hdi5ub2RlLm5vZGVUeXBlICE9IDEgfHwgb3BmTmF2LmFmdGVyIHx8ICFvcGZOYXYucmVmKSB7XG4gICAgICAgICAgICBmcmFtZS5maW5pc2gobnVsbCk7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgfVxuICAgICAgICAgIGNvbnN0IGVsZW0gPSBvcGZOYXYubm9kZSBhcyBFbGVtZW50O1xuICAgICAgICAgIGNvbnN0IGlkcmVmID0gZWxlbS5nZXRBdHRyaWJ1dGUoXCJpZHJlZlwiKTtcbiAgICAgICAgICBpZiAoZWxlbS5sb2NhbE5hbWUgIT0gXCJpdGVtcmVmXCIgfHwgIWlkcmVmIHx8ICF0aGlzLml0ZW1NYXBbaWRyZWZdKSB7XG4gICAgICAgICAgICBmcmFtZS5maW5pc2gobnVsbCk7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgfVxuICAgICAgICAgIGl0ZW0gPSB0aGlzLml0ZW1NYXBbaWRyZWZdO1xuICAgICAgICAgIGZyYWdtZW50ID0gb3BmTmF2LnJlZjtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBpdGVtID0gdGhpcy5zcGluZVswXTtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLnN0b3JlLmxvYWQoaXRlbS5zcmMpLnRoZW4oKHhtbGRvYzogWG1sRG9jLlhNTERvY0hvbGRlcikgPT4ge1xuICAgICAgICAgIGNvbnN0IG5vZGVOYXYgPSBmcmFnbWVudC5uYXZpZ2F0ZSh4bWxkb2MuZG9jdW1lbnQpO1xuICAgICAgICAgIGNvbnN0IG9mZnNldCA9IHhtbGRvYy5nZXROb2RlT2Zmc2V0KFxuICAgICAgICAgICAgbm9kZU5hdi5ub2RlLFxuICAgICAgICAgICAgbm9kZU5hdi5vZmZzZXQsXG4gICAgICAgICAgICBub2RlTmF2LmFmdGVyLFxuICAgICAgICAgICk7XG4gICAgICAgICAgZnJhbWUuZmluaXNoKHtcbiAgICAgICAgICAgIHNwaW5lSW5kZXg6IGl0ZW0uc3BpbmVJbmRleCxcbiAgICAgICAgICAgIG9mZnNldEluSXRlbTogb2Zmc2V0LFxuICAgICAgICAgICAgcGFnZUluZGV4OiAtMSxcbiAgICAgICAgICB9KTtcbiAgICAgICAgfSk7XG4gICAgICB9LFxuICAgICAgKGZyYW1lOiBUYXNrLkZyYW1lPFBvc2l0aW9uIHwgbnVsbD4sIGVycjogRXJyb3IpOiB2b2lkID0+IHtcbiAgICAgICAgTG9nZ2luZy5sb2dnZXIud2FybihlcnIsIFwiQ2Fubm90IHJlc29sdmUgZnJhZ21lbnQ6XCIsIGZyYWdzdHIpO1xuICAgICAgICBmcmFtZS5maW5pc2gobnVsbCk7XG4gICAgICB9LFxuICAgICk7XG4gIH1cblxuICByZXNvbHZlRVBhZ2UoZXBhZ2U6IG51bWJlcik6IFRhc2suUmVzdWx0PFBvc2l0aW9uIHwgbnVsbD4ge1xuICAgIHJldHVybiBUYXNrLmhhbmRsZShcbiAgICAgIFwicmVzb2x2ZUVQYWdlXCIsXG4gICAgICAoZnJhbWU6IFRhc2suRnJhbWU8UG9zaXRpb24gfCBudWxsPik6IHZvaWQgPT4ge1xuICAgICAgICBpZiAoZXBhZ2UgPD0gMCkge1xuICAgICAgICAgIGZyYW1lLmZpbmlzaCh7IHNwaW5lSW5kZXg6IDAsIG9mZnNldEluSXRlbTogMCwgcGFnZUluZGV4OiAtMSB9KTtcbiAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHRoaXMuZXBhZ2VJc1JlbmRlcmVkUGFnZSkge1xuICAgICAgICAgIGxldCBzcGluZUluZGV4ID0gdGhpcy5zcGluZS5maW5kSW5kZXgoKGl0ZW0pID0+IHtcbiAgICAgICAgICAgIHJldHVybiAoXG4gICAgICAgICAgICAgIChpdGVtLmVwYWdlID09IDAgJiYgaXRlbS5lcGFnZUNvdW50ID09IDApIHx8XG4gICAgICAgICAgICAgIChpdGVtLmVwYWdlIDw9IGVwYWdlICYmIGl0ZW0uZXBhZ2UgKyBpdGVtLmVwYWdlQ291bnQgPiBlcGFnZSlcbiAgICAgICAgICAgICk7XG4gICAgICAgICAgfSk7XG4gICAgICAgICAgaWYgKHNwaW5lSW5kZXggPT0gLTEpIHtcbiAgICAgICAgICAgIHNwaW5lSW5kZXggPSB0aGlzLnNwaW5lLmxlbmd0aCAtIDE7XG4gICAgICAgICAgfVxuICAgICAgICAgIGxldCBpdGVtID0gdGhpcy5zcGluZVtzcGluZUluZGV4XTtcbiAgICAgICAgICBpZiAoIWl0ZW0gfHwgaXRlbS5lcGFnZUNvdW50ID09IDApIHtcbiAgICAgICAgICAgIGl0ZW0gPSB0aGlzLnNwaW5lWy0tc3BpbmVJbmRleF07XG4gICAgICAgICAgfVxuICAgICAgICAgIGNvbnN0IHBhZ2VJbmRleCA9IE1hdGguZmxvb3IoZXBhZ2UgLSBpdGVtLmVwYWdlKTtcbiAgICAgICAgICBmcmFtZS5maW5pc2goeyBzcGluZUluZGV4LCBvZmZzZXRJbkl0ZW06IC0xLCBwYWdlSW5kZXg6IHBhZ2VJbmRleCB9KTtcbiAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgbGV0IHNwaW5lSW5kZXggPSBCYXNlLmJpbmFyeVNlYXJjaCh0aGlzLnNwaW5lLmxlbmd0aCwgKGluZGV4KSA9PiB7XG4gICAgICAgICAgY29uc3QgaXRlbSA9IHRoaXMuc3BpbmVbaW5kZXhdO1xuICAgICAgICAgIHJldHVybiBpdGVtLmVwYWdlICsgaXRlbS5lcGFnZUNvdW50ID4gZXBhZ2U7XG4gICAgICAgIH0pO1xuICAgICAgICBpZiAoc3BpbmVJbmRleCA9PSB0aGlzLnNwaW5lLmxlbmd0aCkge1xuICAgICAgICAgIHNwaW5lSW5kZXgtLTtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCBpdGVtID0gdGhpcy5zcGluZVtzcGluZUluZGV4XTtcbiAgICAgICAgdGhpcy5zdG9yZS5sb2FkKGl0ZW0uc3JjKS50aGVuKCh4bWxkb2M6IFhtbERvYy5YTUxEb2NIb2xkZXIpID0+IHtcbiAgICAgICAgICBlcGFnZSAtPSBpdGVtLmVwYWdlO1xuICAgICAgICAgIGlmIChlcGFnZSA+IGl0ZW0uZXBhZ2VDb3VudCkge1xuICAgICAgICAgICAgZXBhZ2UgPSBpdGVtLmVwYWdlQ291bnQ7XG4gICAgICAgICAgfVxuICAgICAgICAgIGxldCBvZmZzZXQgPSAwO1xuICAgICAgICAgIGlmIChlcGFnZSA+IDApIHtcbiAgICAgICAgICAgIGNvbnN0IHRvdGFsT2Zmc2V0ID0geG1sZG9jLmdldFRvdGFsT2Zmc2V0KCk7XG4gICAgICAgICAgICBvZmZzZXQgPSBNYXRoLnJvdW5kKCh0b3RhbE9mZnNldCAqIGVwYWdlKSAvIGl0ZW0uZXBhZ2VDb3VudCk7XG4gICAgICAgICAgICBpZiAob2Zmc2V0ID09IHRvdGFsT2Zmc2V0KSB7XG4gICAgICAgICAgICAgIG9mZnNldC0tO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgICBmcmFtZS5maW5pc2goeyBzcGluZUluZGV4LCBvZmZzZXRJbkl0ZW06IG9mZnNldCwgcGFnZUluZGV4OiAtMSB9KTtcbiAgICAgICAgfSk7XG4gICAgICB9LFxuICAgICAgKGZyYW1lOiBUYXNrLkZyYW1lPFBvc2l0aW9uIHwgbnVsbD4sIGVycjogRXJyb3IpOiB2b2lkID0+IHtcbiAgICAgICAgTG9nZ2luZy5sb2dnZXIud2FybihlcnIsIFwiQ2Fubm90IHJlc29sdmUgZXBhZ2U6XCIsIGVwYWdlKTtcbiAgICAgICAgZnJhbWUuZmluaXNoKG51bGwpO1xuICAgICAgfSxcbiAgICApO1xuICB9XG5cbiAgZ2V0RVBhZ2VGcm9tUG9zaXRpb24ocG9zaXRpb246IFBvc2l0aW9uKTogVGFzay5SZXN1bHQ8bnVtYmVyPiB7XG4gICAgY29uc3QgaXRlbSA9IHRoaXMuc3BpbmVbcG9zaXRpb24uc3BpbmVJbmRleF07XG4gICAgaWYgKHRoaXMuZXBhZ2VJc1JlbmRlcmVkUGFnZSkge1xuICAgICAgY29uc3QgZXBhZ2UgPSBpdGVtLmVwYWdlICsgcG9zaXRpb24ucGFnZUluZGV4O1xuICAgICAgcmV0dXJuIFRhc2submV3UmVzdWx0KGVwYWdlKTtcbiAgICB9XG4gICAgaWYgKHBvc2l0aW9uLm9mZnNldEluSXRlbSA8PSAwKSB7XG4gICAgICByZXR1cm4gVGFzay5uZXdSZXN1bHQoaXRlbS5lcGFnZSk7XG4gICAgfVxuICAgIGNvbnN0IGZyYW1lOiBUYXNrLkZyYW1lPG51bWJlcj4gPSBUYXNrLm5ld0ZyYW1lKFwiZ2V0RVBhZ2VcIik7XG4gICAgdGhpcy5zdG9yZS5sb2FkKGl0ZW0uc3JjKS50aGVuKCh4bWxkb2M6IFhtbERvYy5YTUxEb2NIb2xkZXIpID0+IHtcbiAgICAgIGNvbnN0IHRvdGFsT2Zmc2V0ID0geG1sZG9jLmdldFRvdGFsT2Zmc2V0KCk7XG4gICAgICBjb25zdCBvZmZzZXQgPSBNYXRoLm1pbih0b3RhbE9mZnNldCwgcG9zaXRpb24ub2Zmc2V0SW5JdGVtKTtcbiAgICAgIGZyYW1lLmZpbmlzaChpdGVtLmVwYWdlICsgKG9mZnNldCAqIGl0ZW0uZXBhZ2VDb3VudCkgLyB0b3RhbE9mZnNldCk7XG4gICAgfSk7XG4gICAgcmV0dXJuIGZyYW1lLnJlc3VsdCgpO1xuICB9XG59XG5cbmV4cG9ydCB0eXBlIFBhZ2VBbmRQb3NpdGlvbiA9IHtcbiAgcGFnZTogVnRyZWUuUGFnZTtcbiAgcG9zaXRpb246IFBvc2l0aW9uO1xufTtcblxuZXhwb3J0IGNvbnN0IG1ha2VQYWdlQW5kUG9zaXRpb24gPSAoXG4gIHBhZ2U6IFZ0cmVlLlBhZ2UsXG4gIHBhZ2VJbmRleDogbnVtYmVyLFxuKTogUGFnZUFuZFBvc2l0aW9uID0+ICh7XG4gIHBhZ2UsXG4gIHBvc2l0aW9uOiB7XG4gICAgc3BpbmVJbmRleDogcGFnZS5zcGluZUluZGV4LFxuICAgIHBhZ2VJbmRleCxcbiAgICBvZmZzZXRJbkl0ZW06IHBhZ2Uub2Zmc2V0LFxuICB9LFxufSk7XG5cbmV4cG9ydCB0eXBlIE9QRlZpZXdJdGVtID0ge1xuICBpdGVtOiBPUEZJdGVtO1xuICB4bWxkb2M6IFhtbERvYy5YTUxEb2NIb2xkZXI7XG4gIGluc3RhbmNlOiBPUFMuU3R5bGVJbnN0YW5jZTtcbiAgbGF5b3V0UG9zaXRpb25zOiBWdHJlZS5MYXlvdXRQb3NpdGlvbltdO1xuICBwYWdlczogVnRyZWUuUGFnZVtdO1xuICBjb21wbGV0ZTogYm9vbGVhbjtcbn07XG5cbmV4cG9ydCBjbGFzcyBPUEZWaWV3IGltcGxlbWVudHMgVmdlbi5DdXN0b21SZW5kZXJlckZhY3Rvcnkge1xuICBzcGluZUl0ZW1zOiBPUEZWaWV3SXRlbVtdID0gW107XG4gIHNwaW5lSXRlbUxvYWRpbmdDb250aW51YXRpb25zOiBUYXNrLkNvbnRpbnVhdGlvbjxhbnk+W11bXSA9IFtdO1xuICBwcmVmOiBFeHBycy5QcmVmZXJlbmNlcztcbiAgY2xpZW50TGF5b3V0OiBWZ2VuLkRlZmF1bHRDbGllbnRMYXlvdXQ7XG4gIGNvdW50ZXJTdG9yZTogQ291bnRlcnMuQ291bnRlclN0b3JlO1xuICB0b2NBdXRvaGlkZTogYm9vbGVhbiA9IGZhbHNlO1xuICB0b2NWaWV3PzogVG9jLlRPQ1ZpZXc7XG5cbiAgY29uc3RydWN0b3IoXG4gICAgcHVibGljIHJlYWRvbmx5IG9wZjogT1BGRG9jLFxuICAgIHB1YmxpYyByZWFkb25seSB2aWV3cG9ydDogVmdlbi5WaWV3cG9ydCxcbiAgICBwdWJsaWMgcmVhZG9ubHkgZm9udE1hcHBlcjogRm9udC5NYXBwZXIsXG4gICAgcHJlZjogRXhwcnMuUHJlZmVyZW5jZXMsXG4gICAgcHVibGljIHJlYWRvbmx5IHBhZ2VTaGVldFNpemVSZXBvcnRlcjogKFxuICAgICAgcDE6IHsgd2lkdGg6IG51bWJlcjsgaGVpZ2h0OiBudW1iZXIgfSxcbiAgICAgIHAyOiB7IFtrZXk6IHN0cmluZ106IHsgd2lkdGg6IG51bWJlcjsgaGVpZ2h0OiBudW1iZXIgfSB9LFxuICAgICAgcDM6IG51bWJlcixcbiAgICAgIHA0OiBudW1iZXIsXG4gICAgKSA9PiBhbnksXG4gICkge1xuICAgIHRoaXMucHJlZiA9IEV4cHJzLmNsb25lUHJlZmVyZW5jZXMocHJlZik7XG4gICAgdGhpcy5jbGllbnRMYXlvdXQgPSBuZXcgVmdlbi5EZWZhdWx0Q2xpZW50TGF5b3V0KHZpZXdwb3J0KTtcbiAgICB0aGlzLmNvdW50ZXJTdG9yZSA9IG5ldyBDb3VudGVycy5Db3VudGVyU3RvcmUob3BmLmRvY3VtZW50VVJMVHJhbnNmb3JtZXIpO1xuICB9XG5cbiAgcHJpdmF0ZSBnZXRQYWdlKHBvc2l0aW9uOiBQb3NpdGlvbik6IFZ0cmVlLlBhZ2Uge1xuICAgIGNvbnN0IHZpZXdJdGVtID0gdGhpcy5zcGluZUl0ZW1zW3Bvc2l0aW9uLnNwaW5lSW5kZXhdO1xuICAgIHJldHVybiB2aWV3SXRlbSA/IHZpZXdJdGVtLnBhZ2VzW3Bvc2l0aW9uLnBhZ2VJbmRleF0gOiBudWxsO1xuICB9XG5cbiAgZ2V0Q3VycmVudFBhZ2VQcm9ncmVzc2lvbihcbiAgICBwb3NpdGlvbjogUG9zaXRpb24sXG4gICk6IENvbnN0YW50cy5QYWdlUHJvZ3Jlc3Npb24gfCBudWxsIHtcbiAgICBpZiAodGhpcy5vcGYucGFnZVByb2dyZXNzaW9uKSB7XG4gICAgICByZXR1cm4gdGhpcy5vcGYucGFnZVByb2dyZXNzaW9uO1xuICAgIH0gZWxzZSB7XG4gICAgICBjb25zdCB2aWV3SXRlbSA9IHRoaXMuc3BpbmVJdGVtc1twb3NpdGlvbiA/IHBvc2l0aW9uLnNwaW5lSW5kZXggOiAwXTtcbiAgICAgIHJldHVybiB2aWV3SXRlbSA/IHZpZXdJdGVtLmluc3RhbmNlLnBhZ2VQcm9ncmVzc2lvbiA6IG51bGw7XG4gICAgfVxuICB9XG5cbiAgcHJpdmF0ZSBmaW5pc2hQYWdlQ29udGFpbmVyKFxuICAgIHZpZXdJdGVtOiBPUEZWaWV3SXRlbSxcbiAgICBwYWdlOiBWdHJlZS5QYWdlLFxuICAgIHBhZ2VJbmRleDogbnVtYmVyLFxuICApIHtcbiAgICBwYWdlLmNvbnRhaW5lci5zdHlsZS5kaXNwbGF5ID0gXCJub25lXCI7XG4gICAgcGFnZS5jb250YWluZXIuc3R5bGUudmlzaWJpbGl0eSA9IFwidmlzaWJsZVwiO1xuICAgIHBhZ2UuY29udGFpbmVyLnN0eWxlLnBvc2l0aW9uID0gXCJcIjtcbiAgICBwYWdlLmNvbnRhaW5lci5zdHlsZS50b3AgPSBcIlwiO1xuICAgIHBhZ2UuY29udGFpbmVyLnN0eWxlLmxlZnQgPSBcIlwiO1xuICAgIHBhZ2UuY29udGFpbmVyLnNldEF0dHJpYnV0ZShcbiAgICAgIFwiZGF0YS12aXZsaW9zdHlsZS1wYWdlLXNpZGVcIixcbiAgICAgIHBhZ2Uuc2lkZSBhcyBzdHJpbmcsXG4gICAgKTtcbiAgICBjb25zdCBvbGRQYWdlID0gdmlld0l0ZW0ucGFnZXNbcGFnZUluZGV4XTtcbiAgICBwYWdlLmlzRmlyc3RQYWdlID0gdmlld0l0ZW0uaXRlbS5zcGluZUluZGV4ID09IDAgJiYgcGFnZUluZGV4ID09IDA7XG4gICAgdmlld0l0ZW0ucGFnZXNbcGFnZUluZGV4XSA9IHBhZ2U7XG5cbiAgICBpZiAodGhpcy5vcGYuZXBhZ2VJc1JlbmRlcmVkUGFnZSkge1xuICAgICAgaWYgKHBhZ2VJbmRleCA9PSAwICYmIHZpZXdJdGVtLml0ZW0uc3BpbmVJbmRleCA+IDApIHtcbiAgICAgICAgY29uc3QgcHJldkl0ZW0gPSB0aGlzLm9wZi5zcGluZVt2aWV3SXRlbS5pdGVtLnNwaW5lSW5kZXggLSAxXTtcbiAgICAgICAgdmlld0l0ZW0uaXRlbS5lcGFnZSA9IHByZXZJdGVtLmVwYWdlICsgcHJldkl0ZW0uZXBhZ2VDb3VudDtcbiAgICAgIH1cbiAgICAgIHZpZXdJdGVtLml0ZW0uZXBhZ2VDb3VudCA9IHZpZXdJdGVtLnBhZ2VzLmxlbmd0aDtcbiAgICAgIHRoaXMub3BmLmVwYWdlQ291bnQgPSB0aGlzLm9wZi5zcGluZS5yZWR1Y2UoXG4gICAgICAgIChjb3VudCwgaXRlbSkgPT4gY291bnQgKyBpdGVtLmVwYWdlQ291bnQsXG4gICAgICAgIDAsXG4gICAgICApO1xuXG4gICAgICBpZiAodGhpcy5vcGYuZXBhZ2VDb3VudENhbGxiYWNrKSB7XG4gICAgICAgIHRoaXMub3BmLmVwYWdlQ291bnRDYWxsYmFjayh0aGlzLm9wZi5lcGFnZUNvdW50KTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBpZiAob2xkUGFnZSkge1xuICAgICAgdmlld0l0ZW0uaW5zdGFuY2Uudmlld3BvcnQuY29udGVudENvbnRhaW5lci5yZXBsYWNlQ2hpbGQoXG4gICAgICAgIHBhZ2UuY29udGFpbmVyLFxuICAgICAgICBvbGRQYWdlLmNvbnRhaW5lcixcbiAgICAgICk7XG4gICAgICBvbGRQYWdlLmRpc3BhdGNoRXZlbnQoe1xuICAgICAgICB0eXBlOiBcInJlcGxhY2VkXCIsXG4gICAgICAgIHRhcmdldDogbnVsbCxcbiAgICAgICAgY3VycmVudFRhcmdldDogbnVsbCxcbiAgICAgICAgcHJldmVudERlZmF1bHQ6IG51bGwsXG4gICAgICAgIG5ld1BhZ2U6IHBhZ2UsXG4gICAgICB9KTtcbiAgICB9IGVsc2Uge1xuICAgICAgLy8gRmluZCBpbnNlcnQgcG9zaXRpb24gaW4gY29udGVudENvbnRhaW5lci5cbiAgICAgIGxldCBpbnNlcnRQb3M6IEVsZW1lbnQgfCBudWxsID0gbnVsbDtcbiAgICAgIGlmIChwYWdlSW5kZXggPiAwKSB7XG4gICAgICAgIGluc2VydFBvcyA9IHZpZXdJdGVtLnBhZ2VzW3BhZ2VJbmRleCAtIDFdLmNvbnRhaW5lci5uZXh0RWxlbWVudFNpYmxpbmc7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBmb3IgKFxuICAgICAgICAgIGxldCBpID0gdmlld0l0ZW0uaXRlbS5zcGluZUluZGV4ICsgMTtcbiAgICAgICAgICBpIDwgdGhpcy5zcGluZUl0ZW1zLmxlbmd0aDtcbiAgICAgICAgICBpKytcbiAgICAgICAgKSB7XG4gICAgICAgICAgY29uc3QgaXRlbSA9IHRoaXMuc3BpbmVJdGVtc1tpXTtcbiAgICAgICAgICBpZiAoaXRlbSAmJiBpdGVtLnBhZ2VzWzBdKSB7XG4gICAgICAgICAgICBpbnNlcnRQb3MgPSBpdGVtLnBhZ2VzWzBdLmNvbnRhaW5lcjtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgdmlld0l0ZW0uaW5zdGFuY2Uudmlld3BvcnQuY29udGVudENvbnRhaW5lci5pbnNlcnRCZWZvcmUoXG4gICAgICAgIHBhZ2UuY29udGFpbmVyLFxuICAgICAgICBpbnNlcnRQb3MsXG4gICAgICApO1xuICAgIH1cbiAgICB0aGlzLnBhZ2VTaGVldFNpemVSZXBvcnRlcihcbiAgICAgIHtcbiAgICAgICAgd2lkdGg6IHZpZXdJdGVtLmluc3RhbmNlLnBhZ2VTaGVldFdpZHRoLFxuICAgICAgICBoZWlnaHQ6IHZpZXdJdGVtLmluc3RhbmNlLnBhZ2VTaGVldEhlaWdodCxcbiAgICAgIH0sXG4gICAgICB2aWV3SXRlbS5pbnN0YW5jZS5wYWdlU2hlZXRTaXplLFxuICAgICAgdmlld0l0ZW0uaXRlbS5zcGluZUluZGV4LFxuICAgICAgdmlld0l0ZW0uaW5zdGFuY2UucGFnZU51bWJlck9mZnNldCArIHBhZ2VJbmRleCxcbiAgICApO1xuICB9XG5cbiAgLyoqXG4gICAqIFJlbmRlciBhIHNpbmdsZSBwYWdlLiBJZiB0aGUgbmV3IHBhZ2UgY29udGFpbnMgZWxlbWVudHMgd2l0aCBpZHMgdGhhdCBhcmVcbiAgICogcmVmZXJlbmNlZCBmcm9tIG90aGVyIHBhZ2VzIGJ5ICd0YXJnZXQtY291bnRlcigpJywgdGhvc2UgcGFnZXMgYXJlIHJlbmRlcmVkXG4gICAqIHRvbyAoY2FsbGluZyBgcmVuZGVyU2luZ2xlUGFnZWAgcmVjdXJzaXZlbHkpLlxuICAgKi9cbiAgcHJpdmF0ZSByZW5kZXJTaW5nbGVQYWdlKFxuICAgIHZpZXdJdGVtOiBPUEZWaWV3SXRlbSxcbiAgICBwb3M6IFZ0cmVlLkxheW91dFBvc2l0aW9uLFxuICApOiBUYXNrLlJlc3VsdDxSZW5kZXJTaW5nbGVQYWdlUmVzdWx0PiB7XG4gICAgY29uc3QgZnJhbWU6IFRhc2suRnJhbWU8UmVuZGVyU2luZ2xlUGFnZVJlc3VsdD4gPSBUYXNrLm5ld0ZyYW1lKFxuICAgICAgXCJyZW5kZXJTaW5nbGVQYWdlXCIsXG4gICAgKTtcbiAgICBsZXQgcGFnZSA9IHRoaXMubWFrZVBhZ2Uodmlld0l0ZW0sIHBvcyk7XG4gICAgdmlld0l0ZW0uaW5zdGFuY2UubGF5b3V0TmV4dFBhZ2UocGFnZSwgcG9zKS50aGVuKChwb3NQYXJhbSkgPT4ge1xuICAgICAgcG9zID0gcG9zUGFyYW0gYXMgVnRyZWUuTGF5b3V0UG9zaXRpb247XG4gICAgICBjb25zdCBwYWdlSW5kZXggPSBwb3NcbiAgICAgICAgPyBwb3MucGFnZSAtIDFcbiAgICAgICAgOiB2aWV3SXRlbS5sYXlvdXRQb3NpdGlvbnMubGVuZ3RoIC0gMTtcbiAgICAgIHRoaXMuZmluaXNoUGFnZUNvbnRhaW5lcih2aWV3SXRlbSwgcGFnZSwgcGFnZUluZGV4KTtcbiAgICAgIHRoaXMuY291bnRlclN0b3JlLmZpbmlzaFBhZ2UocGFnZS5zcGluZUluZGV4LCBwYWdlSW5kZXgpO1xuXG4gICAgICAvLyBJZiB0aGUgcG9zaXRpb24gb2YgdGhlIHBhZ2UgYnJlYWsgY2hhbmdlLCB3ZSBzaG91bGQgcmUtbGF5b3V0IHRoZSBuZXh0XG4gICAgICAvLyBwYWdlIHRvby5cbiAgICAgIGxldCBjb250OiBUYXNrLlJlc3VsdDxhbnk+ID0gbnVsbDtcbiAgICAgIGlmIChwb3MpIHtcbiAgICAgICAgY29uc3QgcHJldlBvcyA9IHZpZXdJdGVtLmxheW91dFBvc2l0aW9uc1twb3MucGFnZV07XG4gICAgICAgIHZpZXdJdGVtLmxheW91dFBvc2l0aW9uc1twb3MucGFnZV0gPSBwb3M7XG4gICAgICAgIGlmIChwcmV2UG9zICYmIHZpZXdJdGVtLnBhZ2VzW3Bvcy5wYWdlXSkge1xuICAgICAgICAgIGlmICghcG9zLmlzU2FtZVBvc2l0aW9uKHByZXZQb3MpKSB7XG4gICAgICAgICAgICBjb250ID0gdGhpcy5yZW5kZXJTaW5nbGVQYWdlKHZpZXdJdGVtLCBwb3MpO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgaWYgKCFjb250KSB7XG4gICAgICAgIGNvbnQgPSBUYXNrLm5ld1Jlc3VsdCh0cnVlKTtcbiAgICAgIH1cbiAgICAgIGNvbnQudGhlbigoKSA9PiB7XG4gICAgICAgIGNvbnN0IHVucmVzb2x2ZWRSZWZzID0gdGhpcy5jb3VudGVyU3RvcmUuZ2V0VW5yZXNvbHZlZFJlZnNUb1BhZ2UocGFnZSk7XG4gICAgICAgIGxldCBpbmRleCA9IDA7XG4gICAgICAgIGZyYW1lXG4gICAgICAgICAgLmxvb3BXaXRoRnJhbWUoKGxvb3BGcmFtZSkgPT4ge1xuICAgICAgICAgICAgaW5kZXgrKztcbiAgICAgICAgICAgIGlmIChpbmRleCA+IHVucmVzb2x2ZWRSZWZzLmxlbmd0aCkge1xuICAgICAgICAgICAgICBsb29wRnJhbWUuYnJlYWtMb29wKCk7XG4gICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGNvbnN0IHJlZnMgPSB1bnJlc29sdmVkUmVmc1tpbmRleCAtIDFdO1xuICAgICAgICAgICAgcmVmcy5yZWZzID0gcmVmcy5yZWZzLmZpbHRlcigocmVmKSA9PiAhcmVmLmlzUmVzb2x2ZWQoKSk7XG4gICAgICAgICAgICBpZiAocmVmcy5yZWZzLmxlbmd0aCA9PT0gMCkge1xuICAgICAgICAgICAgICBsb29wRnJhbWUuY29udGludWVMb29wKCk7XG4gICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHRoaXMuZ2V0UGFnZVZpZXdJdGVtKHJlZnMuc3BpbmVJbmRleCkudGhlbigodmlld0l0ZW0pID0+IHtcbiAgICAgICAgICAgICAgaWYgKCF2aWV3SXRlbSkge1xuICAgICAgICAgICAgICAgIGxvb3BGcmFtZS5jb250aW51ZUxvb3AoKTtcbiAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgdGhpcy5jb3VudGVyU3RvcmUucHVzaFBhZ2VDb3VudGVycyhyZWZzLnBhZ2VDb3VudGVycyk7XG4gICAgICAgICAgICAgIHRoaXMuY291bnRlclN0b3JlLnB1c2hSZWZlcmVuY2VzVG9Tb2x2ZShyZWZzLnJlZnMpO1xuICAgICAgICAgICAgICBjb25zdCBwb3MgPSB2aWV3SXRlbS5sYXlvdXRQb3NpdGlvbnNbcmVmcy5wYWdlSW5kZXhdO1xuICAgICAgICAgICAgICB0aGlzLnJlbmRlclNpbmdsZVBhZ2Uodmlld0l0ZW0sIHBvcykudGhlbigocmVzdWx0KSA9PiB7XG4gICAgICAgICAgICAgICAgdGhpcy5jb3VudGVyU3RvcmUucG9wUGFnZUNvdW50ZXJzKCk7XG4gICAgICAgICAgICAgICAgdGhpcy5jb3VudGVyU3RvcmUucG9wUmVmZXJlbmNlc1RvU29sdmUoKTtcbiAgICAgICAgICAgICAgICBjb25zdCByZXN1bHRQb3NpdGlvbiA9IHJlc3VsdC5wYWdlQW5kUG9zaXRpb24ucG9zaXRpb247XG4gICAgICAgICAgICAgICAgaWYgKFxuICAgICAgICAgICAgICAgICAgcmVzdWx0UG9zaXRpb24uc3BpbmVJbmRleCA9PT0gcGFnZS5zcGluZUluZGV4ICYmXG4gICAgICAgICAgICAgICAgICByZXN1bHRQb3NpdGlvbi5wYWdlSW5kZXggPT09IHBhZ2VJbmRleFxuICAgICAgICAgICAgICAgICkge1xuICAgICAgICAgICAgICAgICAgcGFnZSA9IHJlc3VsdC5wYWdlQW5kUG9zaXRpb24ucGFnZTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgbG9vcEZyYW1lLmNvbnRpbnVlTG9vcCgpO1xuICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgIH0pXG4gICAgICAgICAgLnRoZW4oKCkgPT4ge1xuICAgICAgICAgICAgaWYgKCFwYWdlLmNvbnRhaW5lci5wYXJlbnRFbGVtZW50KSB7XG4gICAgICAgICAgICAgIC8vIHBhZ2UgaXMgcmVwbGFjZWRcbiAgICAgICAgICAgICAgcGFnZSA9IHZpZXdJdGVtLnBhZ2VzW3BhZ2VJbmRleF07XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBwYWdlLmlzTGFzdFBhZ2UgPVxuICAgICAgICAgICAgICAhcG9zICYmIHZpZXdJdGVtLml0ZW0uc3BpbmVJbmRleCA9PT0gdGhpcy5vcGYuc3BpbmUubGVuZ3RoIC0gMTtcbiAgICAgICAgICAgIGlmIChwYWdlLmlzTGFzdFBhZ2UpIHtcbiAgICAgICAgICAgICAgQXNzZXJ0cy5hc3NlcnQodGhpcy52aWV3cG9ydCk7XG4gICAgICAgICAgICAgIHRoaXMuY291bnRlclN0b3JlLmZpbmlzaExhc3RQYWdlKHRoaXMudmlld3BvcnQpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZnJhbWUuZmluaXNoKHtcbiAgICAgICAgICAgICAgcGFnZUFuZFBvc2l0aW9uOiBtYWtlUGFnZUFuZFBvc2l0aW9uKHBhZ2UsIHBhZ2VJbmRleCksXG4gICAgICAgICAgICAgIG5leHRMYXlvdXRQb3NpdGlvbjogcG9zLFxuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgfSk7XG4gICAgICB9KTtcbiAgICB9KTtcbiAgICByZXR1cm4gZnJhbWUucmVzdWx0KCk7XG4gIH1cblxuICBwcml2YXRlIG5vcm1hbGl6ZVNlZWtQb3NpdGlvbihcbiAgICBwb3NpdGlvbjogUG9zaXRpb24sXG4gICAgdmlld0l0ZW06IE9QRlZpZXdJdGVtLFxuICApOiBQb3NpdGlvbiB8IG51bGwge1xuICAgIGxldCBwYWdlSW5kZXggPSBwb3NpdGlvbi5wYWdlSW5kZXg7XG4gICAgbGV0IHNlZWtPZmZzZXQgPSAtMTtcbiAgICBpZiAocGFnZUluZGV4IDwgMCkge1xuICAgICAgc2Vla09mZnNldCA9IHBvc2l0aW9uLm9mZnNldEluSXRlbTtcblxuICAgICAgLy8gcGFnZSB3aXRoIG9mZnNldCBoaWdoZXIgdGhhbiBzZWVrT2Zmc2V0XG4gICAgICBjb25zdCBzZWVrT2Zmc2V0UGFnZUluZGV4ID0gQmFzZS5iaW5hcnlTZWFyY2goXG4gICAgICAgIHZpZXdJdGVtLmxheW91dFBvc2l0aW9ucy5sZW5ndGgsXG4gICAgICAgIChwYWdlSW5kZXgpID0+IHtcbiAgICAgICAgICAvLyAnbm9Mb29rQWhlYWQnIGFyZ3VtZW50IG9mIGdldFBvc2l0aW9uIG11c3QgYmUgdHJ1ZSwgc2luY2VcbiAgICAgICAgICAvLyBvdGhlcndpc2UgU3R5bGVJbnN0YW5jZS5jdXJyZW50TGF5b3V0UG9zaXRpb24gaXMgbW9kaWZpZWRcbiAgICAgICAgICAvLyB1bmludGVudGlvbmFsbHkuXG4gICAgICAgICAgY29uc3Qgb2Zmc2V0ID0gdmlld0l0ZW0uaW5zdGFuY2UuZ2V0UG9zaXRpb24oXG4gICAgICAgICAgICB2aWV3SXRlbS5sYXlvdXRQb3NpdGlvbnNbcGFnZUluZGV4XSxcbiAgICAgICAgICAgIHRydWUsXG4gICAgICAgICAgKTtcbiAgICAgICAgICByZXR1cm4gb2Zmc2V0ID4gc2Vla09mZnNldDtcbiAgICAgICAgfSxcbiAgICAgICk7XG4gICAgICBpZiAoc2Vla09mZnNldFBhZ2VJbmRleCA9PT0gdmlld0l0ZW0ubGF5b3V0UG9zaXRpb25zLmxlbmd0aCkge1xuICAgICAgICBpZiAodmlld0l0ZW0uY29tcGxldGUpIHtcbiAgICAgICAgICBwYWdlSW5kZXggPSB2aWV3SXRlbS5sYXlvdXRQb3NpdGlvbnMubGVuZ3RoIC0gMTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAvLyBuZWVkIHRvIHNlYXJjaCB0aHJvdWdoIHBhZ2VzIHRoYXQgYXJlIG5vdCB5ZXQgcHJvZHVjZWRcbiAgICAgICAgICBwYWdlSW5kZXggPSBOdW1iZXIuUE9TSVRJVkVfSU5GSU5JVFk7XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIC8vIHBhZ2UgdGhhdCBjb250YWlucyBzZWVrT2Zmc2V0XG4gICAgICAgIHBhZ2VJbmRleCA9IHNlZWtPZmZzZXRQYWdlSW5kZXggLSAxO1xuICAgICAgfVxuICAgIH0gZWxzZSBpZiAoXG4gICAgICBwYWdlSW5kZXggPT09IE51bWJlci5QT1NJVElWRV9JTkZJTklUWSAmJlxuICAgICAgcG9zaXRpb24ub2Zmc2V0SW5JdGVtICE9PSAtMVxuICAgICkge1xuICAgICAgc2Vla09mZnNldCA9IHBvc2l0aW9uLm9mZnNldEluSXRlbTtcbiAgICB9XG4gICAgcmV0dXJuIHtcbiAgICAgIHNwaW5lSW5kZXg6IHBvc2l0aW9uLnNwaW5lSW5kZXgsXG4gICAgICBwYWdlSW5kZXgsXG4gICAgICBvZmZzZXRJbkl0ZW06IHNlZWtPZmZzZXQsXG4gICAgfSBhcyBQb3NpdGlvbjtcbiAgfVxuXG4gIC8qKlxuICAgKiBGaW5kIGEgcGFnZSBjb3JyZXNwb25kaW5nIHRvIGEgc3BlY2lmaWVkIHBvc2l0aW9uIGFtb25nIGFscmVhZHkgbGFpZCBvdXRcbiAgICogcGFnZXMuXG4gICAqIEBwYXJhbSBzeW5jIElmIHRydWUsIGZpbmQgdGhlIHBhZ2Ugc3luY2hyb25vdXNseSAobm90IHdhaXRpbmcgYW5vdGhlclxuICAgKiAgICAgcmVuZGVyaW5nIHRhc2spXG4gICAqL1xuICBwcml2YXRlIGZpbmRQYWdlKFxuICAgIHBvc2l0aW9uOiBQb3NpdGlvbixcbiAgICBzeW5jOiBib29sZWFuLFxuICApOiBUYXNrLlJlc3VsdDxQYWdlQW5kUG9zaXRpb24gfCBudWxsPiB7XG4gICAgY29uc3QgZnJhbWU6IFRhc2suRnJhbWU8UGFnZUFuZFBvc2l0aW9uIHwgbnVsbD4gPSBUYXNrLm5ld0ZyYW1lKFwiZmluZFBhZ2VcIik7XG4gICAgdGhpcy5nZXRQYWdlVmlld0l0ZW0ocG9zaXRpb24uc3BpbmVJbmRleCkudGhlbigodmlld0l0ZW0pID0+IHtcbiAgICAgIGlmICghdmlld0l0ZW0pIHtcbiAgICAgICAgZnJhbWUuZmluaXNoKG51bGwpO1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG4gICAgICBsZXQgcmVzdWx0UGFnZTogVnRyZWUuUGFnZSA9IG51bGw7XG4gICAgICBsZXQgcGFnZUluZGV4OiBudW1iZXI7XG4gICAgICBmcmFtZVxuICAgICAgICAubG9vcFdpdGhGcmFtZSgobG9vcEZyYW1lKSA9PiB7XG4gICAgICAgICAgY29uc3Qgbm9ybWFsaXplZFBvc2l0aW9uID0gdGhpcy5ub3JtYWxpemVTZWVrUG9zaXRpb24oXG4gICAgICAgICAgICBwb3NpdGlvbixcbiAgICAgICAgICAgIHZpZXdJdGVtLFxuICAgICAgICAgICk7XG4gICAgICAgICAgcGFnZUluZGV4ID0gbm9ybWFsaXplZFBvc2l0aW9uLnBhZ2VJbmRleDtcbiAgICAgICAgICByZXN1bHRQYWdlID0gdmlld0l0ZW0ucGFnZXNbcGFnZUluZGV4XTtcbiAgICAgICAgICBpZiAocmVzdWx0UGFnZSkge1xuICAgICAgICAgICAgbG9vcEZyYW1lLmJyZWFrTG9vcCgpO1xuICAgICAgICAgIH0gZWxzZSBpZiAodmlld0l0ZW0uY29tcGxldGUpIHtcbiAgICAgICAgICAgIHBhZ2VJbmRleCA9IHZpZXdJdGVtLmxheW91dFBvc2l0aW9ucy5sZW5ndGggLSAxO1xuICAgICAgICAgICAgcmVzdWx0UGFnZSA9IHZpZXdJdGVtLnBhZ2VzW3BhZ2VJbmRleF07XG4gICAgICAgICAgICBsb29wRnJhbWUuYnJlYWtMb29wKCk7XG4gICAgICAgICAgfSBlbHNlIGlmIChzeW5jKSB7XG4gICAgICAgICAgICB0aGlzLnJlbmRlclBhZ2Uobm9ybWFsaXplZFBvc2l0aW9uKS50aGVuKChyZXN1bHQpID0+IHtcbiAgICAgICAgICAgICAgaWYgKHJlc3VsdCkge1xuICAgICAgICAgICAgICAgIHJlc3VsdFBhZ2UgPSByZXN1bHQucGFnZTtcbiAgICAgICAgICAgICAgICBwYWdlSW5kZXggPSByZXN1bHQucG9zaXRpb24ucGFnZUluZGV4O1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIGxvb3BGcmFtZS5icmVha0xvb3AoKTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAvLyBXYWl0IGZvciB0aGUgbGF5b3V0IHRhc2sgYW5kIHJldHJ5XG4gICAgICAgICAgICBmcmFtZS5zbGVlcCgxMDApLnRoZW4oKCkgPT4ge1xuICAgICAgICAgICAgICBsb29wRnJhbWUuY29udGludWVMb29wKCk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICB9XG4gICAgICAgIH0pXG4gICAgICAgIC50aGVuKCgpID0+IHtcbiAgICAgICAgICBBc3NlcnRzLmFzc2VydChyZXN1bHRQYWdlKTtcbiAgICAgICAgICBmcmFtZS5maW5pc2gobWFrZVBhZ2VBbmRQb3NpdGlvbihyZXN1bHRQYWdlLCBwYWdlSW5kZXgpKTtcbiAgICAgICAgfSk7XG4gICAgfSk7XG4gICAgcmV0dXJuIGZyYW1lLnJlc3VsdCgpO1xuICB9XG5cbiAgLyoqXG4gICAqIFJlbmRlcnMgYSBwYWdlIGF0IHRoZSBzcGVjaWZpZWQgcG9zaXRpb24uXG4gICAqL1xuICByZW5kZXJQYWdlKHBvc2l0aW9uOiBQb3NpdGlvbik6IFRhc2suUmVzdWx0PFBhZ2VBbmRQb3NpdGlvbiB8IG51bGw+IHtcbiAgICBjb25zdCBmcmFtZTogVGFzay5GcmFtZTxQYWdlQW5kUG9zaXRpb24gfCBudWxsPiA9IFRhc2submV3RnJhbWUoXG4gICAgICBcInJlbmRlclBhZ2VcIixcbiAgICApO1xuICAgIHRoaXMuZ2V0UGFnZVZpZXdJdGVtKHBvc2l0aW9uLnNwaW5lSW5kZXgpLnRoZW4oKHZpZXdJdGVtKSA9PiB7XG4gICAgICBpZiAoIXZpZXdJdGVtKSB7XG4gICAgICAgIGZyYW1lLmZpbmlzaChudWxsKTtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuICAgICAgY29uc3Qgbm9ybWFsaXplZFBvc2l0aW9uID0gdGhpcy5ub3JtYWxpemVTZWVrUG9zaXRpb24ocG9zaXRpb24sIHZpZXdJdGVtKTtcbiAgICAgIGxldCBwYWdlSW5kZXggPSBub3JtYWxpemVkUG9zaXRpb24ucGFnZUluZGV4O1xuICAgICAgY29uc3Qgc2Vla09mZnNldCA9IG5vcm1hbGl6ZWRQb3NpdGlvbi5vZmZzZXRJbkl0ZW07XG4gICAgICBsZXQgcmVzdWx0UGFnZSA9IHZpZXdJdGVtLnBhZ2VzW3BhZ2VJbmRleF07XG4gICAgICBpZiAocmVzdWx0UGFnZSkge1xuICAgICAgICBmcmFtZS5maW5pc2gobWFrZVBhZ2VBbmRQb3NpdGlvbihyZXN1bHRQYWdlLCBwYWdlSW5kZXgpKTtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuICAgICAgZnJhbWVcbiAgICAgICAgLmxvb3BXaXRoRnJhbWUoKGxvb3BGcmFtZSkgPT4ge1xuICAgICAgICAgIGlmIChwYWdlSW5kZXggPCB2aWV3SXRlbS5sYXlvdXRQb3NpdGlvbnMubGVuZ3RoKSB7XG4gICAgICAgICAgICBsb29wRnJhbWUuYnJlYWtMb29wKCk7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgfVxuICAgICAgICAgIGlmICh2aWV3SXRlbS5jb21wbGV0ZSkge1xuICAgICAgICAgICAgcGFnZUluZGV4ID0gdmlld0l0ZW0ubGF5b3V0UG9zaXRpb25zLmxlbmd0aCAtIDE7XG4gICAgICAgICAgICBsb29wRnJhbWUuYnJlYWtMb29wKCk7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgfVxuICAgICAgICAgIGxldCBwb3MgPVxuICAgICAgICAgICAgdmlld0l0ZW0ubGF5b3V0UG9zaXRpb25zW3ZpZXdJdGVtLmxheW91dFBvc2l0aW9ucy5sZW5ndGggLSAxXTtcbiAgICAgICAgICB0aGlzLnJlbmRlclNpbmdsZVBhZ2Uodmlld0l0ZW0sIHBvcykudGhlbigocmVzdWx0KSA9PiB7XG4gICAgICAgICAgICBjb25zdCBwYWdlID0gcmVzdWx0LnBhZ2VBbmRQb3NpdGlvbi5wYWdlO1xuICAgICAgICAgICAgcG9zID0gcmVzdWx0Lm5leHRMYXlvdXRQb3NpdGlvbjtcbiAgICAgICAgICAgIGlmIChwb3MpIHtcbiAgICAgICAgICAgICAgaWYgKHNlZWtPZmZzZXQgPj0gMCkge1xuICAgICAgICAgICAgICAgIC8vIFNlYXJjaGluZyBmb3Igb2Zmc2V0LCBkb24ndCBrbm93IHRoZSBwYWdlIG51bWJlci5cbiAgICAgICAgICAgICAgICBjb25zdCBvZmZzZXQgPSB2aWV3SXRlbS5pbnN0YW5jZS5nZXRQb3NpdGlvbihwb3MpO1xuICAgICAgICAgICAgICAgIGlmIChvZmZzZXQgPiBzZWVrT2Zmc2V0KSB7XG4gICAgICAgICAgICAgICAgICByZXN1bHRQYWdlID0gcGFnZTtcbiAgICAgICAgICAgICAgICAgIHBhZ2VJbmRleCA9IHZpZXdJdGVtLmxheW91dFBvc2l0aW9ucy5sZW5ndGggLSAyO1xuICAgICAgICAgICAgICAgICAgbG9vcEZyYW1lLmJyZWFrTG9vcCgpO1xuICAgICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICBsb29wRnJhbWUuY29udGludWVMb29wKCk7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICByZXN1bHRQYWdlID0gcGFnZTtcbiAgICAgICAgICAgICAgcGFnZUluZGV4ID0gcmVzdWx0LnBhZ2VBbmRQb3NpdGlvbi5wb3NpdGlvbi5wYWdlSW5kZXg7XG4gICAgICAgICAgICAgIHZpZXdJdGVtLmNvbXBsZXRlID0gdHJ1ZTtcbiAgICAgICAgICAgICAgbG9vcEZyYW1lLmJyZWFrTG9vcCgpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH0pO1xuICAgICAgICB9KVxuICAgICAgICAudGhlbigoKSA9PiB7XG4gICAgICAgICAgcmVzdWx0UGFnZSA9IHJlc3VsdFBhZ2UgfHwgdmlld0l0ZW0ucGFnZXNbcGFnZUluZGV4XTtcbiAgICAgICAgICBjb25zdCBwb3MgPSB2aWV3SXRlbS5sYXlvdXRQb3NpdGlvbnNbcGFnZUluZGV4XTtcbiAgICAgICAgICBpZiAocmVzdWx0UGFnZSkge1xuICAgICAgICAgICAgZnJhbWUuZmluaXNoKG1ha2VQYWdlQW5kUG9zaXRpb24ocmVzdWx0UGFnZSwgcGFnZUluZGV4KSk7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgfVxuICAgICAgICAgIHRoaXMucmVuZGVyU2luZ2xlUGFnZSh2aWV3SXRlbSwgcG9zKS50aGVuKChyZXN1bHQpID0+IHtcbiAgICAgICAgICAgIGlmICghcmVzdWx0Lm5leHRMYXlvdXRQb3NpdGlvbikge1xuICAgICAgICAgICAgICB2aWV3SXRlbS5jb21wbGV0ZSA9IHRydWU7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBmcmFtZS5maW5pc2gocmVzdWx0LnBhZ2VBbmRQb3NpdGlvbik7XG4gICAgICAgICAgfSk7XG4gICAgICAgIH0pO1xuICAgIH0pO1xuICAgIHJldHVybiBmcmFtZS5yZXN1bHQoKTtcbiAgfVxuXG4gIHJlbmRlckFsbFBhZ2VzKCk6IFRhc2suUmVzdWx0PFBhZ2VBbmRQb3NpdGlvbiB8IG51bGw+IHtcbiAgICByZXR1cm4gdGhpcy5yZW5kZXJQYWdlc1VwdG8oXG4gICAgICB7XG4gICAgICAgIHNwaW5lSW5kZXg6IHRoaXMub3BmLnNwaW5lLmxlbmd0aCAtIDEsXG4gICAgICAgIHBhZ2VJbmRleDogTnVtYmVyLlBPU0lUSVZFX0lORklOSVRZLFxuICAgICAgICBvZmZzZXRJbkl0ZW06IC0xLFxuICAgICAgfSxcbiAgICAgIGZhbHNlLFxuICAgICk7XG4gIH1cblxuICAvKipcbiAgICogUmVuZGVyIHBhZ2VzIGZyb20gKHNwaW5lSW5kZXg9MCwgcGFnZUluZGV4PTApIHRvIHRoZSBzcGVjaWZpZWQgKHNwaW5lSW5kZXgsXG4gICAqIHBhZ2VJbmRleCkuXG4gICAqIEBwYXJhbSBub3RBbGxQYWdlcyBJZiB0cnVlLCByZW5kZXIgZnJvbSBiaWdpbm5pbmcgb2Ygc3BlY2lmaWVkIHNwaW5lIGl0ZW0uXG4gICAqL1xuICByZW5kZXJQYWdlc1VwdG8oXG4gICAgcG9zaXRpb246IFBvc2l0aW9uLFxuICAgIG5vdEFsbFBhZ2VzOiBib29sZWFuLFxuICApOiBUYXNrLlJlc3VsdDxQYWdlQW5kUG9zaXRpb24gfCBudWxsPiB7XG4gICAgY29uc3QgZnJhbWU6IFRhc2suRnJhbWU8UGFnZUFuZFBvc2l0aW9uIHwgbnVsbD4gPSBUYXNrLm5ld0ZyYW1lKFxuICAgICAgXCJyZW5kZXJQYWdlc1VwdG9cIixcbiAgICApO1xuICAgIGlmICghcG9zaXRpb24pIHtcbiAgICAgIHBvc2l0aW9uID0geyBzcGluZUluZGV4OiAwLCBwYWdlSW5kZXg6IDAsIG9mZnNldEluSXRlbTogMCB9O1xuICAgIH1cbiAgICBjb25zdCBzcGluZUluZGV4ID0gcG9zaXRpb24uc3BpbmVJbmRleDtcbiAgICBjb25zdCBwYWdlSW5kZXggPSBwb3NpdGlvbi5wYWdlSW5kZXg7XG4gICAgbGV0IHMgPSAwO1xuXG4gICAgaWYgKG5vdEFsbFBhZ2VzKSB7XG4gICAgICAvLyBSZW5kZXIgcGFnZXMgZnJvbSBiaWdpbm5pbmcgb2Ygc3BlY2lmaWVkIHNwaW5lIGl0ZW0uXG4gICAgICBzID0gc3BpbmVJbmRleDtcbiAgICB9XG5cbiAgICBsZXQgbGFzdFJlc3VsdDogUGFnZUFuZFBvc2l0aW9uO1xuICAgIGZyYW1lXG4gICAgICAubG9vcFdpdGhGcmFtZSgobG9vcEZyYW1lKSA9PiB7XG4gICAgICAgIGNvbnN0IHBvcyA9IHtcbiAgICAgICAgICBzcGluZUluZGV4OiBzLFxuICAgICAgICAgIHBhZ2VJbmRleDogcyA9PT0gc3BpbmVJbmRleCA/IHBhZ2VJbmRleCA6IE51bWJlci5QT1NJVElWRV9JTkZJTklUWSxcbiAgICAgICAgICBvZmZzZXRJbkl0ZW06IHMgPT09IHNwaW5lSW5kZXggPyBwb3NpdGlvbi5vZmZzZXRJbkl0ZW0gOiAtMSxcbiAgICAgICAgfTtcbiAgICAgICAgdGhpcy5yZW5kZXJQYWdlKHBvcykudGhlbigocmVzdWx0KSA9PiB7XG4gICAgICAgICAgbGFzdFJlc3VsdCA9IHJlc3VsdDtcbiAgICAgICAgICBpZiAoKytzID4gc3BpbmVJbmRleCkge1xuICAgICAgICAgICAgbG9vcEZyYW1lLmJyZWFrTG9vcCgpO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBsb29wRnJhbWUuY29udGludWVMb29wKCk7XG4gICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICAgIH0pXG4gICAgICAudGhlbigoKSA9PiB7XG4gICAgICAgIGZyYW1lLmZpbmlzaChsYXN0UmVzdWx0KTtcbiAgICAgIH0pO1xuICAgIHJldHVybiBmcmFtZS5yZXN1bHQoKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBNb3ZlIHRvIHRoZSBmaXJzdCBwYWdlIGFuZCByZW5kZXIgaXQuXG4gICAqL1xuICBmaXJzdFBhZ2UoXG4gICAgcG9zaXRpb246IFBvc2l0aW9uLFxuICAgIHN5bmM6IGJvb2xlYW4sXG4gICk6IFRhc2suUmVzdWx0PFBhZ2VBbmRQb3NpdGlvbiB8IG51bGw+IHtcbiAgICByZXR1cm4gdGhpcy5maW5kUGFnZShcbiAgICAgIHsgc3BpbmVJbmRleDogMCwgcGFnZUluZGV4OiAwLCBvZmZzZXRJbkl0ZW06IC0xIH0sXG4gICAgICBzeW5jLFxuICAgICk7XG4gIH1cblxuICAvKipcbiAgICogTW92ZSB0byB0aGUgbGFzdCBwYWdlIGFuZCByZW5kZXIgaXQuXG4gICAqL1xuICBsYXN0UGFnZShcbiAgICBwb3NpdGlvbjogUG9zaXRpb24sXG4gICAgc3luYzogYm9vbGVhbixcbiAgKTogVGFzay5SZXN1bHQ8UGFnZUFuZFBvc2l0aW9uIHwgbnVsbD4ge1xuICAgIHJldHVybiB0aGlzLmZpbmRQYWdlKFxuICAgICAge1xuICAgICAgICBzcGluZUluZGV4OiB0aGlzLm9wZi5zcGluZS5sZW5ndGggLSAxLFxuICAgICAgICBwYWdlSW5kZXg6IE51bWJlci5QT1NJVElWRV9JTkZJTklUWSxcbiAgICAgICAgb2Zmc2V0SW5JdGVtOiAtMSxcbiAgICAgIH0sXG4gICAgICBzeW5jLFxuICAgICk7XG4gIH1cblxuICAvKipcbiAgICogTW92ZSB0byB0aGUgbmV4dCBwYWdlIHBvc2l0aW9uIGFuZCByZW5kZXIgcGFnZS5cbiAgICogQHBhcmFtIHN5bmMgSWYgdHJ1ZSwgZ2V0IHRoZSBwYWdlIHN5bmNocm9ub3VzbHkgKG5vdCB3YWl0aW5nIGFub3RoZXJcbiAgICogICAgIHJlbmRlcmluZyB0YXNrKVxuICAgKi9cbiAgbmV4dFBhZ2UoXG4gICAgcG9zaXRpb246IFBvc2l0aW9uLFxuICAgIHN5bmM6IGJvb2xlYW4sXG4gICk6IFRhc2suUmVzdWx0PFBhZ2VBbmRQb3NpdGlvbiB8IG51bGw+IHtcbiAgICBsZXQgc3BpbmVJbmRleCA9IHBvc2l0aW9uLnNwaW5lSW5kZXg7XG4gICAgbGV0IHBhZ2VJbmRleCA9IHBvc2l0aW9uLnBhZ2VJbmRleDtcbiAgICBjb25zdCBmcmFtZTogVGFzay5GcmFtZTxQYWdlQW5kUG9zaXRpb24gfCBudWxsPiA9IFRhc2submV3RnJhbWUoXCJuZXh0UGFnZVwiKTtcbiAgICB0aGlzLmdldFBhZ2VWaWV3SXRlbShzcGluZUluZGV4KS50aGVuKCh2aWV3SXRlbSkgPT4ge1xuICAgICAgaWYgKCF2aWV3SXRlbSkge1xuICAgICAgICBmcmFtZS5maW5pc2gobnVsbCk7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cbiAgICAgIGlmIChcbiAgICAgICAgdmlld0l0ZW0uY29tcGxldGUgJiZcbiAgICAgICAgcGFnZUluZGV4ID09IHZpZXdJdGVtLmxheW91dFBvc2l0aW9ucy5sZW5ndGggLSAxXG4gICAgICApIHtcbiAgICAgICAgaWYgKHNwaW5lSW5kZXggPj0gdGhpcy5vcGYuc3BpbmUubGVuZ3RoIC0gMSkge1xuICAgICAgICAgIGZyYW1lLmZpbmlzaChudWxsKTtcbiAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgc3BpbmVJbmRleCsrO1xuICAgICAgICBwYWdlSW5kZXggPSAwO1xuXG4gICAgICAgIC8vIFJlbW92ZSBuZXh0IHZpZXdJdGVtIGlmIGl0cyBmaXJzdCBwYWdlIGhhcyBzYW1lIHNpZGUgYXMgdGhlIGN1cnJlbnQgcGFnZVxuICAgICAgICAvLyB0byBhdm9pZCB1bnBhaXJlZCBwYWdlLlxuICAgICAgICBjb25zdCBuZXh0Vmlld0l0ZW0gPSB0aGlzLnNwaW5lSXRlbXNbc3BpbmVJbmRleF07XG4gICAgICAgIGNvbnN0IG5leHRQYWdlID0gbmV4dFZpZXdJdGVtICYmIG5leHRWaWV3SXRlbS5wYWdlc1swXTtcbiAgICAgICAgY29uc3QgY3VycmVudFBhZ2UgPSB2aWV3SXRlbS5wYWdlc1t2aWV3SXRlbS5wYWdlcy5sZW5ndGggLSAxXTtcbiAgICAgICAgaWYgKG5leHRQYWdlICYmIGN1cnJlbnRQYWdlICYmIG5leHRQYWdlLnNpZGUgPT0gY3VycmVudFBhZ2Uuc2lkZSkge1xuICAgICAgICAgIG5leHRWaWV3SXRlbS5wYWdlcy5mb3JFYWNoKChwYWdlKSA9PiB7XG4gICAgICAgICAgICBpZiAocGFnZS5jb250YWluZXIpIHBhZ2UuY29udGFpbmVyLnJlbW92ZSgpO1xuICAgICAgICAgIH0pO1xuICAgICAgICAgIHRoaXMuc3BpbmVJdGVtc1tzcGluZUluZGV4XSA9IG51bGw7XG4gICAgICAgICAgdGhpcy5zcGluZUl0ZW1Mb2FkaW5nQ29udGludWF0aW9uc1tzcGluZUluZGV4XSA9IG51bGw7XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHBhZ2VJbmRleCsrO1xuICAgICAgfVxuICAgICAgdGhpcy5maW5kUGFnZShcbiAgICAgICAgeyBzcGluZUluZGV4LCBwYWdlSW5kZXgsIG9mZnNldEluSXRlbTogLTEgfSxcbiAgICAgICAgc3luYyxcbiAgICAgICkudGhlbkZpbmlzaChmcmFtZSk7XG4gICAgfSk7XG4gICAgcmV0dXJuIGZyYW1lLnJlc3VsdCgpO1xuICB9XG5cbiAgLyoqXG4gICAqIE1vdmUgdG8gdGhlIHByZXZpb3VzIHBhZ2UgYW5kIHJlbmRlciBpdC5cbiAgICovXG4gIHByZXZpb3VzUGFnZShcbiAgICBwb3NpdGlvbjogUG9zaXRpb24sXG4gICAgc3luYzogYm9vbGVhbixcbiAgKTogVGFzay5SZXN1bHQ8UGFnZUFuZFBvc2l0aW9uIHwgbnVsbD4ge1xuICAgIGxldCBzcGluZUluZGV4ID0gcG9zaXRpb24uc3BpbmVJbmRleDtcbiAgICBsZXQgcGFnZUluZGV4ID0gcG9zaXRpb24ucGFnZUluZGV4O1xuICAgIGlmIChwYWdlSW5kZXggPT0gMCkge1xuICAgICAgaWYgKHNwaW5lSW5kZXggPT0gMCkge1xuICAgICAgICByZXR1cm4gVGFzay5uZXdSZXN1bHQobnVsbCBhcyBQYWdlQW5kUG9zaXRpb24gfCBudWxsKTtcbiAgICAgIH1cbiAgICAgIHNwaW5lSW5kZXgtLTtcbiAgICAgIHBhZ2VJbmRleCA9IE51bWJlci5QT1NJVElWRV9JTkZJTklUWTtcbiAgICB9IGVsc2Uge1xuICAgICAgcGFnZUluZGV4LS07XG4gICAgfVxuICAgIHJldHVybiB0aGlzLmZpbmRQYWdlKHsgc3BpbmVJbmRleCwgcGFnZUluZGV4LCBvZmZzZXRJbkl0ZW06IC0xIH0sIHN5bmMpO1xuICB9XG5cbiAgLyoqXG4gICAqIEBwYXJhbSBwYWdlIFRoaXMgcGFnZSBzaG91bGQgYmUgYSBjdXJyZW50bHkgZGlzcGxheWVkIHBhZ2UuXG4gICAqL1xuICBwcml2YXRlIGlzUmVjdG9QYWdlKHBhZ2U6IFZ0cmVlLlBhZ2UsIHBvc2l0aW9uOiBQb3NpdGlvbik6IGJvb2xlYW4ge1xuICAgIGNvbnN0IGlzTGVmdCA9IHBhZ2Uuc2lkZSA9PT0gQ29uc3RhbnRzLlBhZ2VTaWRlLkxFRlQ7XG4gICAgY29uc3QgaXNMVFIgPVxuICAgICAgdGhpcy5nZXRDdXJyZW50UGFnZVByb2dyZXNzaW9uKHBvc2l0aW9uKSA9PT1cbiAgICAgIENvbnN0YW50cy5QYWdlUHJvZ3Jlc3Npb24uTFRSO1xuICAgIHJldHVybiAoIWlzTGVmdCAmJiBpc0xUUikgfHwgKGlzTGVmdCAmJiAhaXNMVFIpO1xuICB9XG5cbiAgLyoqXG4gICAqIEdldCBhIHNwcmVhZCBjb250YWluaW5nIHRoZSBjdXJyZW50bHkgZGlzcGxheWVkIHBhZ2UuXG4gICAqIEBwYXJhbSBzeW5jIElmIHRydWUsIGdldCB0aGUgc3ByZWFkIHN5bmNocm9ub3VzbHkgKG5vdCB3YWl0aW5nIGFub3RoZXJcbiAgICogICAgIHJlbmRlcmluZyB0YXNrKVxuICAgKi9cbiAgZ2V0U3ByZWFkKHBvc2l0aW9uOiBQb3NpdGlvbiwgc3luYzogYm9vbGVhbik6IFRhc2suUmVzdWx0PFZ0cmVlLlNwcmVhZD4ge1xuICAgIGNvbnN0IGZyYW1lOiBUYXNrLkZyYW1lPFZ0cmVlLlNwcmVhZD4gPSBUYXNrLm5ld0ZyYW1lKFwiZ2V0Q3VycmVudFNwcmVhZFwiKTtcbiAgICBjb25zdCBwYWdlID0gdGhpcy5nZXRQYWdlKHBvc2l0aW9uKTtcbiAgICBpZiAoIXBhZ2UpIHtcbiAgICAgIHJldHVybiBUYXNrLm5ld1Jlc3VsdChcbiAgICAgICAgLyoqIEB0eXBlIFZ0cmVlLlNwcmVhZCAqL1xuICAgICAgICB7IGxlZnQ6IG51bGwsIHJpZ2h0OiBudWxsIH0gYXMgVnRyZWUuU3ByZWFkLFxuICAgICAgKTtcbiAgICB9XG4gICAgY29uc3QgaXNMZWZ0ID0gcGFnZS5zaWRlID09PSBDb25zdGFudHMuUGFnZVNpZGUuTEVGVDtcbiAgICBsZXQgb3RoZXI6IFRhc2suUmVzdWx0PFBhZ2VBbmRQb3NpdGlvbj47XG4gICAgaWYgKHRoaXMuaXNSZWN0b1BhZ2UocGFnZSwgcG9zaXRpb24pKSB7XG4gICAgICBvdGhlciA9IHRoaXMucHJldmlvdXNQYWdlKHBvc2l0aW9uLCBzeW5jKTtcbiAgICB9IGVsc2Uge1xuICAgICAgb3RoZXIgPSB0aGlzLm5leHRQYWdlKHBvc2l0aW9uLCBzeW5jKTtcbiAgICB9XG4gICAgb3RoZXIudGhlbigob3RoZXJQYWdlQW5kUG9zaXRpb24pID0+IHtcbiAgICAgIC8vIHRoaXMgcGFnZSBtYXkgYmUgcmVwbGFjZWQgZHVyaW5nIG5leHRQYWdlKCksIHNvIGdldCB0aGlzUGFnZSBhZ2Fpbi5cbiAgICAgIGNvbnN0IHRoaXNQYWdlID0gdGhpcy5nZXRQYWdlKHBvc2l0aW9uKTtcblxuICAgICAgbGV0IG90aGVyUGFnZSA9IG90aGVyUGFnZUFuZFBvc2l0aW9uICYmIG90aGVyUGFnZUFuZFBvc2l0aW9uLnBhZ2U7XG4gICAgICBpZiAob3RoZXJQYWdlICYmIG90aGVyUGFnZS5zaWRlID09PSB0aGlzUGFnZS5zaWRlKSB7XG4gICAgICAgIC8vIG90aGVyUGFnZSBtdXN0IG5vdCBiZSBzYW1lIHNpZGVcbiAgICAgICAgb3RoZXJQYWdlID0gbnVsbDtcbiAgICAgIH1cblxuICAgICAgaWYgKGlzTGVmdCkge1xuICAgICAgICBmcmFtZS5maW5pc2goeyBsZWZ0OiB0aGlzUGFnZSwgcmlnaHQ6IG90aGVyUGFnZSB9KTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGZyYW1lLmZpbmlzaCh7IGxlZnQ6IG90aGVyUGFnZSwgcmlnaHQ6IHRoaXNQYWdlIH0pO1xuICAgICAgfVxuICAgIH0pO1xuICAgIHJldHVybiBmcmFtZS5yZXN1bHQoKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBNb3ZlIHRvIHRoZSBuZXh0IHNwcmVhZCBhbmQgcmVuZGVyIHBhZ2VzLlxuICAgKiBAcGFyYW0gc3luYyBJZiB0cnVlLCBnZXQgdGhlIHNwcmVhZCBzeW5jaHJvbm91c2x5IChub3Qgd2FpdGluZyBhbm90aGVyXG4gICAqICAgICByZW5kZXJpbmcgdGFzaylcbiAgICogQHJldHVybnMgVGhlICd2ZXJzbycgcGFnZSBvZiB0aGUgbmV4dCBzcHJlYWQuXG4gICAqL1xuICBuZXh0U3ByZWFkKFxuICAgIHBvc2l0aW9uOiBQb3NpdGlvbixcbiAgICBzeW5jOiBib29sZWFuLFxuICApOiBUYXNrLlJlc3VsdDxQYWdlQW5kUG9zaXRpb24gfCBudWxsPiB7XG4gICAgY29uc3QgcGFnZSA9IHRoaXMuZ2V0UGFnZShwb3NpdGlvbik7XG4gICAgaWYgKCFwYWdlKSB7XG4gICAgICByZXR1cm4gVGFzay5uZXdSZXN1bHQobnVsbCBhcyBQYWdlQW5kUG9zaXRpb24gfCBudWxsKTtcbiAgICB9XG4gICAgY29uc3QgaXNSZWN0byA9IHRoaXMuaXNSZWN0b1BhZ2UocGFnZSwgcG9zaXRpb24pO1xuICAgIGNvbnN0IG5leHQgPSB0aGlzLm5leHRQYWdlKHBvc2l0aW9uLCBzeW5jKTtcbiAgICBpZiAoaXNSZWN0bykge1xuICAgICAgcmV0dXJuIG5leHQ7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiBuZXh0LnRoZW5Bc3luYygocmVzdWx0KSA9PiB7XG4gICAgICAgIGlmIChyZXN1bHQpIHtcbiAgICAgICAgICBpZiAocmVzdWx0LnBhZ2Uuc2lkZSA9PT0gcGFnZS5zaWRlKSB7XG4gICAgICAgICAgICAvLyBJZiBzYW1lIHNpZGUsIHRoaXMgaXMgdGhlIG5leHQgc3ByZWFkLlxuICAgICAgICAgICAgcmV0dXJuIG5leHQ7XG4gICAgICAgICAgfVxuICAgICAgICAgIGNvbnN0IG5leHQyID0gdGhpcy5uZXh0UGFnZShyZXN1bHQucG9zaXRpb24sIHN5bmMpO1xuICAgICAgICAgIHJldHVybiBuZXh0Mi50aGVuQXN5bmMoKHJlc3VsdDIpID0+IHtcbiAgICAgICAgICAgIGlmIChyZXN1bHQyKSB7XG4gICAgICAgICAgICAgIHJldHVybiBuZXh0MjtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgIC8vIElmIHRoaXMgaXMgdGhhIGxhc3Qgc3ByZWFkLCBtb3ZlIHRvIG5leHQgcGFnZSBpbiB0aGUgc2FtZSBzcHJlYWQuXG4gICAgICAgICAgICAgIHJldHVybiBuZXh0O1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH0pO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHJldHVybiBUYXNrLm5ld1Jlc3VsdChudWxsIGFzIFBhZ2VBbmRQb3NpdGlvbiB8IG51bGwpO1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgICB9XG4gIH1cblxuICAvKipcbiAgICogTW92ZSB0byB0aGUgcHJldmlvdXMgc3ByZWFkIGFuZCByZW5kZXIgcGFnZXMuXG4gICAqIEByZXR1cm5zIFRoZSAncmVjdG8nIHBhZ2Ugb2YgdGhlIHByZXZpb3VzIHNwcmVhZC5cbiAgICovXG4gIHByZXZpb3VzU3ByZWFkKFxuICAgIHBvc2l0aW9uOiBQb3NpdGlvbixcbiAgICBzeW5jOiBib29sZWFuLFxuICApOiBUYXNrLlJlc3VsdDxQYWdlQW5kUG9zaXRpb24gfCBudWxsPiB7XG4gICAgY29uc3QgcGFnZSA9IHRoaXMuZ2V0UGFnZShwb3NpdGlvbik7XG4gICAgaWYgKCFwYWdlKSB7XG4gICAgICByZXR1cm4gVGFzay5uZXdSZXN1bHQobnVsbCBhcyBQYWdlQW5kUG9zaXRpb24gfCBudWxsKTtcbiAgICB9XG4gICAgY29uc3QgaXNSZWN0byA9IHRoaXMuaXNSZWN0b1BhZ2UocGFnZSwgcG9zaXRpb24pO1xuICAgIGNvbnN0IHByZXYgPSB0aGlzLnByZXZpb3VzUGFnZShwb3NpdGlvbiwgc3luYyk7XG4gICAgY29uc3Qgb2xkUHJldlBhZ2VDb250ID0gcGFnZS5jb250YWluZXIucHJldmlvdXNFbGVtZW50U2libGluZztcbiAgICBpZiAoaXNSZWN0bykge1xuICAgICAgcmV0dXJuIHByZXYudGhlbkFzeW5jKChyZXN1bHQpID0+IHtcbiAgICAgICAgaWYgKHJlc3VsdCkge1xuICAgICAgICAgIGlmIChyZXN1bHQucGFnZS5zaWRlID09PSBwYWdlLnNpZGUpIHtcbiAgICAgICAgICAgIC8vIElmIHNhbWUgc2lkZSwgdGhpcyBpcyB0aGUgcHJldmlvdXMgc3ByZWFkLlxuICAgICAgICAgICAgcmV0dXJuIHByZXY7XG4gICAgICAgICAgfVxuICAgICAgICAgIGlmIChyZXN1bHQucGFnZS5jb250YWluZXIgIT09IG9sZFByZXZQYWdlQ29udCkge1xuICAgICAgICAgICAgLy8gSWYgcHJldmlvdXMgcGFnZSBpcyBjaGFuZ2VkLCByZXR1cm4gaXQuXG4gICAgICAgICAgICByZXR1cm4gcHJldjtcbiAgICAgICAgICB9XG4gICAgICAgICAgcmV0dXJuIHRoaXMucHJldmlvdXNQYWdlKHJlc3VsdC5wb3NpdGlvbiwgc3luYyk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgcmV0dXJuIFRhc2submV3UmVzdWx0KG51bGwgYXMgUGFnZUFuZFBvc2l0aW9uIHwgbnVsbCk7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gcHJldjtcbiAgICB9XG4gIH1cblxuICAvKipcbiAgICogTW92ZSB0byB0aGUgZXBhZ2Ugc3BlY2lmaWVkIGJ5IHRoZSBnaXZlbiBudW1iZXIgKHplcm8tYmFzZWQpIGFuZCByZW5kZXIgaXQuXG4gICAqL1xuICBuYXZpZ2F0ZVRvRVBhZ2UoXG4gICAgZXBhZ2U6IG51bWJlcixcbiAgICBwb3NpdGlvbjogUG9zaXRpb24sXG4gICAgc3luYzogYm9vbGVhbixcbiAgKTogVGFzay5SZXN1bHQ8UGFnZUFuZFBvc2l0aW9uIHwgbnVsbD4ge1xuICAgIGNvbnN0IGZyYW1lOiBUYXNrLkZyYW1lPFBhZ2VBbmRQb3NpdGlvbiB8IG51bGw+ID0gVGFzay5uZXdGcmFtZShcbiAgICAgIFwibmF2aWdhdGVUb0VQYWdlXCIsXG4gICAgKTtcbiAgICB0aGlzLm9wZi5yZXNvbHZlRVBhZ2UoZXBhZ2UpLnRoZW4oKHBvc2l0aW9uKSA9PiB7XG4gICAgICBpZiAocG9zaXRpb24pIHtcbiAgICAgICAgdGhpcy5maW5kUGFnZShwb3NpdGlvbiwgc3luYykudGhlbkZpbmlzaChmcmFtZSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBmcmFtZS5maW5pc2gobnVsbCk7XG4gICAgICB9XG4gICAgfSk7XG4gICAgcmV0dXJuIGZyYW1lLnJlc3VsdCgpO1xuICB9XG5cbiAgLyoqXG4gICAqIE1vdmUgdG8gdGhlIHBhZ2Ugc3BlY2lmaWVkIGJ5IHRoZSBnaXZlbiBDRkkgYW5kIHJlbmRlciBpdC5cbiAgICovXG4gIG5hdmlnYXRlVG9GcmFnbWVudChcbiAgICBmcmFnbWVudDogc3RyaW5nLFxuICAgIHBvc2l0aW9uOiBQb3NpdGlvbixcbiAgICBzeW5jOiBib29sZWFuLFxuICApOiBUYXNrLlJlc3VsdDxQYWdlQW5kUG9zaXRpb24gfCBudWxsPiB7XG4gICAgY29uc3QgZnJhbWU6IFRhc2suRnJhbWU8UGFnZUFuZFBvc2l0aW9uIHwgbnVsbD4gPSBUYXNrLm5ld0ZyYW1lKFxuICAgICAgXCJuYXZpZ2F0ZVRvQ0ZJXCIsXG4gICAgKTtcbiAgICB0aGlzLm9wZi5yZXNvbHZlRnJhZ21lbnQoZnJhZ21lbnQpLnRoZW4oKHBvc2l0aW9uKSA9PiB7XG4gICAgICBpZiAocG9zaXRpb24pIHtcbiAgICAgICAgdGhpcy5maW5kUGFnZShwb3NpdGlvbiwgc3luYykudGhlbkZpbmlzaChmcmFtZSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBmcmFtZS5maW5pc2gobnVsbCk7XG4gICAgICB9XG4gICAgfSk7XG4gICAgcmV0dXJuIGZyYW1lLnJlc3VsdCgpO1xuICB9XG5cbiAgLyoqXG4gICAqIE1vdmUgdG8gdGhlIHBhZ2Ugc3BlY2lmaWVkIGJ5IHRoZSBnaXZlbiBVUkwgYW5kIHJlbmRlciBpdC5cbiAgICovXG4gIG5hdmlnYXRlVG8oXG4gICAgaHJlZjogc3RyaW5nLFxuICAgIHBvc2l0aW9uOiBQb3NpdGlvbixcbiAgICBzeW5jOiBib29sZWFuLFxuICApOiBUYXNrLlJlc3VsdDxQYWdlQW5kUG9zaXRpb24gfCBudWxsPiB7XG4gICAgTG9nZ2luZy5sb2dnZXIuZGVidWcoXCJOYXZpZ2F0ZSB0b1wiLCBocmVmKTtcbiAgICBsZXQgcGF0aCA9IHRoaXMub3BmLmdldFBhdGhGcm9tVVJMKEJhc2Uuc3RyaXBGcmFnbWVudChocmVmKSk7XG4gICAgaWYgKCFwYXRoKSB7XG4gICAgICBpZiAodGhpcy5vcGYub3BmWE1MICYmIGhyZWYubWF0Y2goL14jZXB1YmNmaVxcKC8pKSB7XG4gICAgICAgIC8vIENGSSBmcmFnbWVudCBpcyBcInJlbGF0aXZlXCIgdG8gT1BGLlxuICAgICAgICBwYXRoID0gdGhpcy5vcGYuZ2V0UGF0aEZyb21VUkwodGhpcy5vcGYub3BmWE1MLnVybCk7XG4gICAgICB9IGVsc2UgaWYgKGhyZWYuY2hhckF0KDApID09PSBcIiNcIikge1xuICAgICAgICBjb25zdCByZXN0b3JlZCA9IHRoaXMub3BmLmRvY3VtZW50VVJMVHJhbnNmb3JtZXIucmVzdG9yZVVSTChocmVmKTtcbiAgICAgICAgaWYgKHRoaXMub3BmLm9wZlhNTCkge1xuICAgICAgICAgIHBhdGggPSB0aGlzLm9wZi5nZXRQYXRoRnJvbVVSTChyZXN0b3JlZFswXSk7XG4gICAgICAgICAgaWYgKHBhdGggPT0gbnVsbCkge1xuICAgICAgICAgICAgcGF0aCA9IHJlc3RvcmVkWzBdO1xuICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBwYXRoID0gcmVzdG9yZWRbMF07XG4gICAgICAgIH1cbiAgICAgICAgaHJlZiA9IHJlc3RvcmVkWzBdICsgKHJlc3RvcmVkWzFdID8gYCMke3Jlc3RvcmVkWzFdfWAgOiBcIlwiKTtcbiAgICAgIH1cbiAgICAgIGlmIChwYXRoID09IG51bGwpIHtcbiAgICAgICAgcmV0dXJuIFRhc2submV3UmVzdWx0KG51bGwgYXMgUGFnZUFuZFBvc2l0aW9uIHwgbnVsbCk7XG4gICAgICB9XG4gICAgfVxuICAgIGNvbnN0IGl0ZW0gPSB0aGlzLm9wZi5pdGVtTWFwQnlQYXRoW3BhdGhdO1xuICAgIGlmICghaXRlbSkge1xuICAgICAgaWYgKFxuICAgICAgICB0aGlzLm9wZi5vcGZYTUwgJiZcbiAgICAgICAgcGF0aCA9PSB0aGlzLm9wZi5nZXRQYXRoRnJvbVVSTCh0aGlzLm9wZi5vcGZYTUwudXJsKVxuICAgICAgKSB7XG4gICAgICAgIC8vIENGSSBsaW5rP1xuICAgICAgICBjb25zdCBmcmFnbWVudEluZGV4ID0gaHJlZi5pbmRleE9mKFwiI1wiKTtcbiAgICAgICAgaWYgKGZyYWdtZW50SW5kZXggPj0gMCkge1xuICAgICAgICAgIHJldHVybiB0aGlzLm5hdmlnYXRlVG9GcmFnbWVudChcbiAgICAgICAgICAgIGhyZWYuc3Vic3RyKGZyYWdtZW50SW5kZXggKyAxKSxcbiAgICAgICAgICAgIHBvc2l0aW9uLFxuICAgICAgICAgICAgc3luYyxcbiAgICAgICAgICApO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICByZXR1cm4gVGFzay5uZXdSZXN1bHQobnVsbCBhcyBQYWdlQW5kUG9zaXRpb24gfCBudWxsKTtcbiAgICB9XG4gICAgY29uc3QgZnJhbWU6IFRhc2suRnJhbWU8UGFnZUFuZFBvc2l0aW9uIHwgbnVsbD4gPSBUYXNrLm5ld0ZyYW1lKFxuICAgICAgXCJuYXZpZ2F0ZVRvXCIsXG4gICAgKTtcbiAgICB0aGlzLmdldFBhZ2VWaWV3SXRlbShpdGVtLnNwaW5lSW5kZXgpLnRoZW4oKHZpZXdJdGVtKSA9PiB7XG4gICAgICBpZiAoIXZpZXdJdGVtKSB7XG4gICAgICAgIGZyYW1lLmZpbmlzaChudWxsKTtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuICAgICAgY29uc3QgdGFyZ2V0ID0gdmlld0l0ZW0ueG1sZG9jLmdldEVsZW1lbnQoaHJlZik7XG4gICAgICBpZiAodGFyZ2V0KSB7XG4gICAgICAgIHRoaXMuZmluZFBhZ2UoXG4gICAgICAgICAge1xuICAgICAgICAgICAgc3BpbmVJbmRleDogaXRlbS5zcGluZUluZGV4LFxuICAgICAgICAgICAgcGFnZUluZGV4OiAtMSxcbiAgICAgICAgICAgIG9mZnNldEluSXRlbTogdmlld0l0ZW0ueG1sZG9jLmdldEVsZW1lbnRPZmZzZXQodGFyZ2V0KSxcbiAgICAgICAgICB9LFxuICAgICAgICAgIHN5bmMsXG4gICAgICAgICkudGhlbkZpbmlzaChmcmFtZSk7XG4gICAgICB9IGVsc2UgaWYgKHBvc2l0aW9uLnNwaW5lSW5kZXggIT09IGl0ZW0uc3BpbmVJbmRleCkge1xuICAgICAgICAvLyBubyBmcmFnbWVudCwgZGlmZmVyZW50IHNwaW5lIGl0ZW1cbiAgICAgICAgdGhpcy5maW5kUGFnZShcbiAgICAgICAgICB7XG4gICAgICAgICAgICBzcGluZUluZGV4OiBpdGVtLnNwaW5lSW5kZXgsXG4gICAgICAgICAgICBwYWdlSW5kZXg6IDAsXG4gICAgICAgICAgICBvZmZzZXRJbkl0ZW06IC0xLFxuICAgICAgICAgIH0sXG4gICAgICAgICAgc3luYyxcbiAgICAgICAgKS50aGVuRmluaXNoKGZyYW1lKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGZyYW1lLmZpbmlzaChudWxsKTtcbiAgICAgIH1cbiAgICB9KTtcbiAgICByZXR1cm4gZnJhbWUucmVzdWx0KCk7XG4gIH1cblxuICBtYWtlUGFnZSh2aWV3SXRlbTogT1BGVmlld0l0ZW0sIHBvczogVnRyZWUuTGF5b3V0UG9zaXRpb24pOiBWdHJlZS5QYWdlIHtcbiAgICBjb25zdCB2aWV3cG9ydCA9IHZpZXdJdGVtLmluc3RhbmNlLnZpZXdwb3J0O1xuICAgIGNvbnN0IHBhZ2VDb250ID0gdmlld3BvcnQuZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImRpdlwiKSBhcyBIVE1MRWxlbWVudDtcbiAgICBwYWdlQ29udC5zZXRBdHRyaWJ1dGUoXCJkYXRhLXZpdmxpb3N0eWxlLXBhZ2UtY29udGFpbmVyXCIsIFwidHJ1ZVwiKTtcbiAgICBwYWdlQ29udC5zZXRBdHRyaWJ1dGUoXCJyb2xlXCIsIFwicmVnaW9uXCIpO1xuICAgIHBhZ2VDb250LnN0eWxlLnBvc2l0aW9uID0gXCJhYnNvbHV0ZVwiO1xuICAgIHBhZ2VDb250LnN0eWxlLnRvcCA9IFwiMFwiO1xuICAgIHBhZ2VDb250LnN0eWxlLmxlZnQgPSBcIjBcIjtcbiAgICBpZiAoIUNvbnN0YW50cy5pc0RlYnVnKSB7XG4gICAgICBwYWdlQ29udC5zdHlsZS52aXNpYmlsaXR5ID0gXCJoaWRkZW5cIjtcbiAgICAgIHBhZ2VDb250LnNldEF0dHJpYnV0ZShcImFyaWEtaGlkZGVuXCIsIFwidHJ1ZVwiKTtcbiAgICB9XG4gICAgdmlld3BvcnQubGF5b3V0Qm94LmFwcGVuZENoaWxkKHBhZ2VDb250KTtcbiAgICBjb25zdCBibGVlZEJveCA9IHZpZXdwb3J0LmRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIikgYXMgSFRNTEVsZW1lbnQ7XG4gICAgYmxlZWRCb3guc2V0QXR0cmlidXRlKFwiZGF0YS12aXZsaW9zdHlsZS1ibGVlZC1ib3hcIiwgXCJ0cnVlXCIpO1xuICAgIHBhZ2VDb250LmFwcGVuZENoaWxkKGJsZWVkQm94KTtcbiAgICBjb25zdCBwYWdlID0gbmV3IFZ0cmVlLlBhZ2UocGFnZUNvbnQsIGJsZWVkQm94KTtcbiAgICBwYWdlLnNwaW5lSW5kZXggPSB2aWV3SXRlbS5pdGVtLnNwaW5lSW5kZXg7XG4gICAgcGFnZS5wb3NpdGlvbiA9IHBvcztcbiAgICBwYWdlLm9mZnNldCA9IHZpZXdJdGVtLmluc3RhbmNlLmdldFBvc2l0aW9uKHBvcyk7XG4gICAgaWYgKHBhZ2Uub2Zmc2V0ID09PSAwKSB7XG4gICAgICBjb25zdCBpZCA9IHRoaXMub3BmLmRvY3VtZW50VVJMVHJhbnNmb3JtZXIudHJhbnNmb3JtRnJhZ21lbnQoXG4gICAgICAgIFwiXCIsXG4gICAgICAgIHZpZXdJdGVtLml0ZW0uc3JjLFxuICAgICAgKTtcbiAgICAgIGJsZWVkQm94LnNldEF0dHJpYnV0ZShcImlkXCIsIGlkKTtcbiAgICAgIHBhZ2UucmVnaXN0ZXJFbGVtZW50V2l0aElkKGJsZWVkQm94LCBpZCk7XG4gICAgfVxuICAgIGlmICh2aWV3cG9ydCAhPT0gdGhpcy52aWV3cG9ydCkge1xuICAgICAgY29uc3QgbWF0cml4ID0gRXhwcnMubGV0dGVyYm94KFxuICAgICAgICB0aGlzLnZpZXdwb3J0LndpZHRoLFxuICAgICAgICB0aGlzLnZpZXdwb3J0LmhlaWdodCxcbiAgICAgICAgdmlld3BvcnQud2lkdGgsXG4gICAgICAgIHZpZXdwb3J0LmhlaWdodCxcbiAgICAgICk7XG4gICAgICBjb25zdCBjc3NNYXRyaXggPSBDc3NQYXJzZXIucGFyc2VWYWx1ZShcbiAgICAgICAgbnVsbCxcbiAgICAgICAgbmV3IENzc1Rva2VuaXplci5Ub2tlbml6ZXIobWF0cml4LCBudWxsKSxcbiAgICAgICAgXCJcIixcbiAgICAgICk7XG4gICAgICBwYWdlLmRlbGF5ZWRJdGVtcy5wdXNoKFxuICAgICAgICBuZXcgVnRyZWUuRGVsYXllZEl0ZW0ocGFnZUNvbnQsIFwidHJhbnNmb3JtXCIsIGNzc01hdHJpeCksXG4gICAgICApO1xuICAgIH1cbiAgICByZXR1cm4gcGFnZTtcbiAgfVxuXG4gIG1ha2VPYmplY3RWaWV3KFxuICAgIHhtbGRvYzogWG1sRG9jLlhNTERvY0hvbGRlcixcbiAgICBzcmNFbGVtOiBFbGVtZW50LFxuICAgIHZpZXdQYXJlbnQ6IEVsZW1lbnQsXG4gICAgY29tcHV0ZWRTdHlsZTogeyBba2V5OiBzdHJpbmddOiBDc3MuVmFsIH0sXG4gICk6IFRhc2suUmVzdWx0PEVsZW1lbnQ+IHtcbiAgICBsZXQgZGF0YSA9IHNyY0VsZW0uZ2V0QXR0cmlidXRlKFwiZGF0YVwiKTtcbiAgICBsZXQgcmVzdWx0OiBFbGVtZW50IHwgbnVsbCA9IG51bGw7XG4gICAgaWYgKGRhdGEpIHtcbiAgICAgIGRhdGEgPSBCYXNlLnJlc29sdmVVUkwoZGF0YSwgeG1sZG9jLnVybCk7XG4gICAgICBsZXQgbWVkaWFUeXBlID0gc3JjRWxlbS5nZXRBdHRyaWJ1dGUoXCJtZWRpYS10eXBlXCIpO1xuICAgICAgaWYgKCFtZWRpYVR5cGUpIHtcbiAgICAgICAgY29uc3QgcGF0aCA9IHRoaXMub3BmLmdldFBhdGhGcm9tVVJMKGRhdGEpO1xuICAgICAgICBpZiAocGF0aCkge1xuICAgICAgICAgIGNvbnN0IGl0ZW0gPSB0aGlzLm9wZi5pdGVtTWFwQnlQYXRoW3BhdGhdO1xuICAgICAgICAgIGlmIChpdGVtKSB7XG4gICAgICAgICAgICBtZWRpYVR5cGUgPSBpdGVtLm1lZGlhVHlwZTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIGlmIChtZWRpYVR5cGUpIHtcbiAgICAgICAgY29uc3QgaGFuZGxlclNyYyA9IHRoaXMub3BmLmJpbmRpbmdzW21lZGlhVHlwZV07XG4gICAgICAgIGlmIChoYW5kbGVyU3JjKSB7XG4gICAgICAgICAgcmVzdWx0ID0gdGhpcy52aWV3cG9ydC5kb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiaWZyYW1lXCIpO1xuICAgICAgICAgIChyZXN1bHQgYXMgSFRNTEVsZW1lbnQpLnN0eWxlLmJvcmRlciA9IFwibm9uZVwiO1xuICAgICAgICAgIGNvbnN0IHNyY1BhcmFtID0gQmFzZS5saWdodFVSTEVuY29kZShkYXRhKTtcbiAgICAgICAgICBjb25zdCB0eXBlUGFyYW0gPSBCYXNlLmxpZ2h0VVJMRW5jb2RlKG1lZGlhVHlwZSk7XG4gICAgICAgICAgY29uc3Qgc2IgPSBuZXcgQmFzZS5TdHJpbmdCdWZmZXIoKTtcbiAgICAgICAgICBzYi5hcHBlbmQoaGFuZGxlclNyYyk7XG4gICAgICAgICAgc2IuYXBwZW5kKFwiP3NyYz1cIik7XG4gICAgICAgICAgc2IuYXBwZW5kKHNyY1BhcmFtKTtcbiAgICAgICAgICBzYi5hcHBlbmQoXCImdHlwZT1cIik7XG4gICAgICAgICAgc2IuYXBwZW5kKHR5cGVQYXJhbSk7XG4gICAgICAgICAgZm9yIChsZXQgYzogTm9kZSA9IHNyY0VsZW0uZmlyc3RDaGlsZDsgYzsgYyA9IGMubmV4dFNpYmxpbmcpIHtcbiAgICAgICAgICAgIGlmIChjLm5vZGVUeXBlID09IDEpIHtcbiAgICAgICAgICAgICAgY29uc3QgY2UgPSBjIGFzIEVsZW1lbnQ7XG4gICAgICAgICAgICAgIGlmIChjZS5sb2NhbE5hbWUgPT0gXCJwYXJhbVwiICYmIGNlLm5hbWVzcGFjZVVSSSA9PSBCYXNlLk5TLlhIVE1MKSB7XG4gICAgICAgICAgICAgICAgY29uc3QgcG5hbWUgPSBjZS5nZXRBdHRyaWJ1dGUoXCJuYW1lXCIpO1xuICAgICAgICAgICAgICAgIGNvbnN0IHB2YWx1ZSA9IGNlLmdldEF0dHJpYnV0ZShcInZhbHVlXCIpO1xuICAgICAgICAgICAgICAgIGlmIChwbmFtZSAmJiBwdmFsdWUpIHtcbiAgICAgICAgICAgICAgICAgIHNiLmFwcGVuZChcIiZcIik7XG4gICAgICAgICAgICAgICAgICBzYi5hcHBlbmQoZW5jb2RlVVJJQ29tcG9uZW50KHBuYW1lKSk7XG4gICAgICAgICAgICAgICAgICBzYi5hcHBlbmQoXCI9XCIpO1xuICAgICAgICAgICAgICAgICAgc2IuYXBwZW5kKGVuY29kZVVSSUNvbXBvbmVudChwdmFsdWUpKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgICAgcmVzdWx0LnNldEF0dHJpYnV0ZShcInNyY1wiLCBzYi50b1N0cmluZygpKTtcbiAgICAgICAgICBjb25zdCB3aWR0aCA9IHNyY0VsZW0uZ2V0QXR0cmlidXRlKFwid2lkdGhcIik7XG4gICAgICAgICAgaWYgKHdpZHRoKSB7XG4gICAgICAgICAgICByZXN1bHQuc2V0QXR0cmlidXRlKFwid2lkdGhcIiwgd2lkdGgpO1xuICAgICAgICAgIH1cbiAgICAgICAgICBjb25zdCBoZWlnaHQgPSBzcmNFbGVtLmdldEF0dHJpYnV0ZShcImhlaWdodFwiKTtcbiAgICAgICAgICBpZiAoaGVpZ2h0KSB7XG4gICAgICAgICAgICByZXN1bHQuc2V0QXR0cmlidXRlKFwiaGVpZ2h0XCIsIGhlaWdodCk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICAgIGlmICghcmVzdWx0KSB7XG4gICAgICByZXN1bHQgPSB0aGlzLnZpZXdwb3J0LmRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJzcGFuXCIpO1xuICAgICAgcmVzdWx0LnNldEF0dHJpYnV0ZShcImRhdGEtYWRhcHQtcHJvY2Vzcy1jaGlsZHJlblwiLCBcInRydWVcIik7XG4gICAgfVxuXG4gICAgLy8gTmVlZCB0byBjYXN0IGJlY2F1c2Ugd2UgbmVlZCB7RWxlbWVudH0sIG5vdCB7IUVsZW1lbnR9XG4gICAgcmV0dXJuIFRhc2submV3UmVzdWx0KHJlc3VsdCBhcyBFbGVtZW50KTtcbiAgfVxuXG4gIG1ha2VNYXRoSmF4VmlldyhcbiAgICB4bWxkb2M6IFhtbERvYy5YTUxEb2NIb2xkZXIsXG4gICAgc3JjRWxlbTogRWxlbWVudCxcbiAgICB2aWV3UGFyZW50OiBFbGVtZW50LFxuICAgIGNvbXB1dGVkU3R5bGU6IHsgW2tleTogc3RyaW5nXTogQ3NzLlZhbCB9LFxuICApOiBUYXNrLlJlc3VsdDxFbGVtZW50PiB7XG4gICAgLy8gU2VlIGlmIE1hdGhKYXggaW5zdGFsbGVkLCB1c2UgaXQgaWYgaXQgaXMuXG4gICAgY29uc3QgaHViID0gZ2V0TWF0aEpheEh1YigpO1xuICAgIGlmIChodWIpIHtcbiAgICAgIGNvbnN0IGRvYyA9IHZpZXdQYXJlbnQub3duZXJEb2N1bWVudDtcbiAgICAgIGNvbnN0IHNwYW4gPSBkb2MuY3JlYXRlRWxlbWVudChcInNwYW5cIik7XG4gICAgICB2aWV3UGFyZW50LmFwcGVuZENoaWxkKHNwYW4pO1xuICAgICAgY29uc3QgY2xvbmVkTWF0aCA9IGRvYy5pbXBvcnROb2RlKHNyY0VsZW0sIHRydWUpO1xuICAgICAgdGhpcy5yZXNvbHZlVVJMc0luTWF0aE1MKGNsb25lZE1hdGgsIHhtbGRvYyk7XG4gICAgICBzcGFuLmFwcGVuZENoaWxkKGNsb25lZE1hdGgpO1xuICAgICAgY29uc3QgcXVldWUgPSBodWJbXCJxdWV1ZVwiXTtcbiAgICAgIHF1ZXVlW1wiUHVzaFwiXShbXCJUeXBlc2V0XCIsIGh1Yiwgc3Bhbl0pO1xuICAgICAgY29uc3QgZnJhbWU6IFRhc2suRnJhbWU8RWxlbWVudD4gPSBUYXNrLm5ld0ZyYW1lKFwibWFrZU1hdGhKYXhWaWV3XCIpO1xuICAgICAgY29uc3QgY29udGludWF0aW9uID0gZnJhbWUuc3VzcGVuZCgpO1xuICAgICAgcXVldWVbXCJQdXNoXCJdKCgpID0+IHtcbiAgICAgICAgY29udGludWF0aW9uLnNjaGVkdWxlKHNwYW4pO1xuICAgICAgfSk7XG4gICAgICByZXR1cm4gZnJhbWUucmVzdWx0KCk7XG4gICAgfVxuICAgIHJldHVybiBUYXNrLm5ld1Jlc3VsdChudWxsIGFzIEVsZW1lbnQpO1xuICB9XG5cbiAgcHJpdmF0ZSByZXNvbHZlVVJMc0luTWF0aE1MKG5vZGU6IE5vZGUsIHhtbGRvYzogWG1sRG9jLlhNTERvY0hvbGRlcikge1xuICAgIGlmIChub2RlID09IG51bGwpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgaWYgKG5vZGUubm9kZVR5cGUgPT09IDEgJiYgKG5vZGUgYXMgRWxlbWVudCkudGFnTmFtZSA9PT0gXCJtZ2x5cGhcIikge1xuICAgICAgY29uc3QgYXR0cnMgPSBBcnJheS5mcm9tKChub2RlIGFzIEVsZW1lbnQpLmF0dHJpYnV0ZXMpO1xuICAgICAgZm9yIChjb25zdCBhdHRyIG9mIGF0dHJzKSB7XG4gICAgICAgIGlmIChhdHRyLm5hbWUgIT09IFwic3JjXCIpIHtcbiAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCBuZXdVcmwgPSBCYXNlLnJlc29sdmVVUkwoYXR0ci5ub2RlVmFsdWUsIHhtbGRvYy51cmwpO1xuICAgICAgICBpZiAoYXR0ci5uYW1lc3BhY2VVUkkpIHtcbiAgICAgICAgICAobm9kZSBhcyBFbGVtZW50KS5zZXRBdHRyaWJ1dGVOUyhcbiAgICAgICAgICAgIGF0dHIubmFtZXNwYWNlVVJJLFxuICAgICAgICAgICAgYXR0ci5uYW1lLFxuICAgICAgICAgICAgbmV3VXJsLFxuICAgICAgICAgICk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgKG5vZGUgYXMgRWxlbWVudCkuc2V0QXR0cmlidXRlKGF0dHIubmFtZSwgbmV3VXJsKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgICBpZiAobm9kZS5maXJzdENoaWxkKSB7XG4gICAgICB0aGlzLnJlc29sdmVVUkxzSW5NYXRoTUwobm9kZS5maXJzdENoaWxkLCB4bWxkb2MpO1xuICAgIH1cbiAgICBpZiAobm9kZS5uZXh0U2libGluZykge1xuICAgICAgdGhpcy5yZXNvbHZlVVJMc0luTWF0aE1MKG5vZGUubmV4dFNpYmxpbmcsIHhtbGRvYyk7XG4gICAgfVxuICB9XG5cbiAgLyoqXG4gICAqIEBvdmVycmlkZVxuICAgKi9cbiAgbWFrZUN1c3RvbVJlbmRlcmVyKHhtbGRvYzogWG1sRG9jLlhNTERvY0hvbGRlcik6IFZnZW4uQ3VzdG9tUmVuZGVyZXIge1xuICAgIHJldHVybiAoXG4gICAgICBzcmNFbGVtOiBFbGVtZW50LFxuICAgICAgdmlld1BhcmVudDogRWxlbWVudCxcbiAgICAgIGNvbXB1dGVkU3R5bGU6IHsgW2tleTogc3RyaW5nXTogQ3NzLlZhbCB9LFxuICAgICk6IFRhc2suUmVzdWx0PEVsZW1lbnQ+ID0+IHtcbiAgICAgIGlmIChcbiAgICAgICAgc3JjRWxlbS5sb2NhbE5hbWUgPT0gXCJvYmplY3RcIiAmJlxuICAgICAgICBzcmNFbGVtLm5hbWVzcGFjZVVSSSA9PSBCYXNlLk5TLlhIVE1MXG4gICAgICApIHtcbiAgICAgICAgcmV0dXJuIHRoaXMubWFrZU9iamVjdFZpZXcoeG1sZG9jLCBzcmNFbGVtLCB2aWV3UGFyZW50LCBjb21wdXRlZFN0eWxlKTtcbiAgICAgIH0gZWxzZSBpZiAoc3JjRWxlbS5uYW1lc3BhY2VVUkkgPT0gQmFzZS5OUy5NQVRITUwpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMubWFrZU1hdGhKYXhWaWV3KHhtbGRvYywgc3JjRWxlbSwgdmlld1BhcmVudCwgY29tcHV0ZWRTdHlsZSk7XG4gICAgICB9IGVsc2UgaWYgKFxuICAgICAgICAoc3JjRWxlbSBhcyBIVE1MRWxlbWVudCkuZGF0YXNldCAmJlxuICAgICAgICAoc3JjRWxlbSBhcyBIVE1MRWxlbWVudCkuZGF0YXNldFtcIm1hdGhUeXBlc2V0XCJdID09IFwidHJ1ZVwiXG4gICAgICApIHtcbiAgICAgICAgcmV0dXJuIHRoaXMubWFrZU1hdGhKYXhWaWV3KHhtbGRvYywgc3JjRWxlbSwgdmlld1BhcmVudCwgY29tcHV0ZWRTdHlsZSk7XG4gICAgICB9XG4gICAgICByZXR1cm4gVGFzay5uZXdSZXN1bHQobnVsbCBhcyBFbGVtZW50KTtcbiAgICB9O1xuICB9XG5cbiAgZ2V0UGFnZVZpZXdJdGVtKHNwaW5lSW5kZXg6IG51bWJlcik6IFRhc2suUmVzdWx0PE9QRlZpZXdJdGVtPiB7XG4gICAgaWYgKHNwaW5lSW5kZXggPT09IC0xIHx8IHNwaW5lSW5kZXggPj0gdGhpcy5vcGYuc3BpbmUubGVuZ3RoKSB7XG4gICAgICByZXR1cm4gVGFzay5uZXdSZXN1bHQobnVsbCBhcyBPUEZWaWV3SXRlbSk7XG4gICAgfVxuICAgIGxldCB2aWV3SXRlbSA9IHRoaXMuc3BpbmVJdGVtc1tzcGluZUluZGV4XTtcbiAgICBpZiAodmlld0l0ZW0pIHtcbiAgICAgIHJldHVybiBUYXNrLm5ld1Jlc3VsdCh2aWV3SXRlbSk7XG4gICAgfVxuICAgIGNvbnN0IGZyYW1lOiBUYXNrLkZyYW1lPE9QRlZpZXdJdGVtPiA9IFRhc2submV3RnJhbWUoXCJnZXRQYWdlVmlld0l0ZW1cIik7XG5cbiAgICAvLyBJZiBsb2FkaW5nIGZvciB0aGUgaXRlbSBoYXMgYWxyZWFkeSBiZWVuIHN0YXJ0ZWQsIHN1c3BlbmQgYW5kIHdhaXQgZm9yXG4gICAgLy8gdGhlIHJlc3VsdC5cbiAgICBsZXQgbG9hZGluZ0NvbnRpbnVhdGlvbnMgPSB0aGlzLnNwaW5lSXRlbUxvYWRpbmdDb250aW51YXRpb25zW3NwaW5lSW5kZXhdO1xuICAgIGlmIChsb2FkaW5nQ29udGludWF0aW9ucykge1xuICAgICAgY29uc3QgY29udCA9IGZyYW1lLnN1c3BlbmQoKTtcbiAgICAgIGxvYWRpbmdDb250aW51YXRpb25zLnB1c2goY29udCk7XG4gICAgICByZXR1cm4gZnJhbWUucmVzdWx0KCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGxvYWRpbmdDb250aW51YXRpb25zID0gdGhpcy5zcGluZUl0ZW1Mb2FkaW5nQ29udGludWF0aW9uc1tcbiAgICAgICAgc3BpbmVJbmRleFxuICAgICAgXSA9IFtdO1xuICAgIH1cbiAgICBjb25zdCBpdGVtID0gdGhpcy5vcGYuc3BpbmVbc3BpbmVJbmRleF07XG4gICAgY29uc3Qgc3RvcmUgPSB0aGlzLm9wZi5zdG9yZTtcbiAgICBzdG9yZS5sb2FkKGl0ZW0uc3JjKS50aGVuKCh4bWxkb2M6IFhtbERvYy5YTUxEb2NIb2xkZXIpID0+IHtcbiAgICAgIC8vIEVQVUIgU3BpbmUgcHJvcGVydGllcyBzdXBwb3J0XG4gICAgICBjb25zdCBlcHViU3BpbmVQcm9wZXJ0aWVzID0gaXRlbS5pdGVtUmVmRWxlbWVudC5nZXRBdHRyaWJ1dGUoXG4gICAgICAgIFwicHJvcGVydGllc1wiLFxuICAgICAgKTtcbiAgICAgIGlmIChlcHViU3BpbmVQcm9wZXJ0aWVzKSB7XG4gICAgICAgIHhtbGRvYy5yb290LnNldEF0dHJpYnV0ZShcbiAgICAgICAgICBcImRhdGEtdml2bGlvc3R5bGUtZXB1Yi1zcGluZS1wcm9wZXJ0aWVzXCIsXG4gICAgICAgICAgZXB1YlNwaW5lUHJvcGVydGllcyxcbiAgICAgICAgKTtcbiAgICAgIH1cbiAgICAgIGl0ZW0udGl0bGUgPSB4bWxkb2MuZG9jdW1lbnQudGl0bGU7XG4gICAgICBjb25zdCBzdHlsZSA9IHN0b3JlLmdldFN0eWxlRm9yRG9jKHhtbGRvYyk7XG4gICAgICBjb25zdCBjdXN0b21SZW5kZXJlciA9IHRoaXMubWFrZUN1c3RvbVJlbmRlcmVyKHhtbGRvYyk7XG4gICAgICBsZXQgdmlld3BvcnQgPSB0aGlzLnZpZXdwb3J0O1xuICAgICAgY29uc3Qgdmlld3BvcnRTaXplID0gc3R5bGUuc2l6ZVZpZXdwb3J0KFxuICAgICAgICB2aWV3cG9ydC53aWR0aCxcbiAgICAgICAgdmlld3BvcnQuaGVpZ2h0LFxuICAgICAgICB2aWV3cG9ydC5mb250U2l6ZSxcbiAgICAgICAgdGhpcy5wcmVmLFxuICAgICAgKTtcbiAgICAgIGlmIChcbiAgICAgICAgdmlld3BvcnRTaXplLndpZHRoICE9IHZpZXdwb3J0LndpZHRoIHx8XG4gICAgICAgIHZpZXdwb3J0U2l6ZS5oZWlnaHQgIT0gdmlld3BvcnQuaGVpZ2h0IHx8XG4gICAgICAgIHZpZXdwb3J0U2l6ZS5mb250U2l6ZSAhPSB2aWV3cG9ydC5mb250U2l6ZVxuICAgICAgKSB7XG4gICAgICAgIHZpZXdwb3J0ID0gbmV3IFZnZW4uVmlld3BvcnQoXG4gICAgICAgICAgdmlld3BvcnQud2luZG93LFxuICAgICAgICAgIHZpZXdwb3J0U2l6ZS5mb250U2l6ZSxcbiAgICAgICAgICB2aWV3cG9ydC5yb290LFxuICAgICAgICAgIHZpZXdwb3J0U2l6ZS53aWR0aCxcbiAgICAgICAgICB2aWV3cG9ydFNpemUuaGVpZ2h0LFxuICAgICAgICApO1xuICAgICAgfVxuICAgICAgY29uc3QgaXNWZXJzb0ZpcnN0UGFnZSA9IHRoaXMuc3BpbmVJdGVtc1swXT8uaW5zdGFuY2UuaXNWZXJzb0ZpcnN0UGFnZTtcbiAgICAgIGNvbnN0IHByZXZpb3VzVmlld0l0ZW0gPSB0aGlzLnNwaW5lSXRlbXNbc3BpbmVJbmRleCAtIDFdO1xuICAgICAgbGV0IHBhZ2VOdW1iZXJPZmZzZXQ6IG51bWJlcjtcbiAgICAgIGxldCBwYWdlQ291bnRlck9mZnNldDogbnVtYmVyO1xuICAgICAgaWYgKGl0ZW0uc3RhcnRQYWdlICE9PSBudWxsKSB7XG4gICAgICAgIHBhZ2VOdW1iZXJPZmZzZXQgPSBpdGVtLnN0YXJ0UGFnZSAtIDE7XG4gICAgICAgIHBhZ2VDb3VudGVyT2Zmc2V0ID0gcGFnZU51bWJlck9mZnNldDtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGlmIChcbiAgICAgICAgICBzcGluZUluZGV4ID4gMCAmJlxuICAgICAgICAgICghcHJldmlvdXNWaWV3SXRlbSB8fCAhcHJldmlvdXNWaWV3SXRlbS5jb21wbGV0ZSlcbiAgICAgICAgKSB7XG4gICAgICAgICAgLy8gV2hlbiBuYXZpZ2F0ZSB0byBhIG5ldyBzcGluZSBpdGVtIHNraXBwaW5nIHRoZSBwcmV2aW91cyBpdGVtcyxcbiAgICAgICAgICAvLyBnaXZlIHVwIGNhbGN1bGF0ZSBwYWdlTnVtYmVyT2Zmc2V0IGFuZCB1c2UgZXBhZ2UgKG9yIHNwaW5lSW5kZXggaWYgZXBhZ2UgaXMgdW5zZXQpLlxuICAgICAgICAgIHBhZ2VOdW1iZXJPZmZzZXQgPSBpdGVtLmVwYWdlIHx8IHNwaW5lSW5kZXg7XG4gICAgICAgICAgaWYgKFxuICAgICAgICAgICAgIXRoaXMub3BmLnByZVBhZ2luYXRlZCAmJlxuICAgICAgICAgICAgcGFnZU51bWJlck9mZnNldCAlIDIgPT0gKGlzVmVyc29GaXJzdFBhZ2UgPyAxIDogMClcbiAgICAgICAgICApIHtcbiAgICAgICAgICAgIC8vIEZvcmNlIHRvIG9kZCBudW1iZXIgdG8gYXZvaWQgdW5wYWlyZWQgcGFnZS4gKFRoaXMgaXMgMCBiYXNlZCBhbmQgZXZlbiBudW1iZXIgaXMgcmVjdG8pXG4gICAgICAgICAgICAvLyAob2RkIGFuZCBldmVuIGFyZSByZXZlcnNlZCBpZiBpc1ZlcnNvRmlyc3RQYWdlIGlzIHRydWUpXG4gICAgICAgICAgICBwYWdlTnVtYmVyT2Zmc2V0Kys7XG4gICAgICAgICAgfVxuICAgICAgICAgIHBhZ2VDb3VudGVyT2Zmc2V0ID0gcGFnZU51bWJlck9mZnNldDtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBwYWdlTnVtYmVyT2Zmc2V0ID0gcHJldmlvdXNWaWV3SXRlbVxuICAgICAgICAgICAgPyBwcmV2aW91c1ZpZXdJdGVtLmluc3RhbmNlLnBhZ2VOdW1iZXJPZmZzZXQgK1xuICAgICAgICAgICAgICBwcmV2aW91c1ZpZXdJdGVtLnBhZ2VzLmxlbmd0aFxuICAgICAgICAgICAgOiAwO1xuICAgICAgICAgIGNvbnN0IGNvdW50ZXJzID0gdGhpcy5jb3VudGVyU3RvcmUuY3VycmVudFBhZ2VDb3VudGVyc1tcInBhZ2VcIl07XG4gICAgICAgICAgcGFnZUNvdW50ZXJPZmZzZXQgPVxuICAgICAgICAgICAgIWNvdW50ZXJzIHx8ICFjb3VudGVycy5sZW5ndGhcbiAgICAgICAgICAgICAgPyBwYWdlTnVtYmVyT2Zmc2V0XG4gICAgICAgICAgICAgIDogY291bnRlcnNbY291bnRlcnMubGVuZ3RoIC0gMV07XG5cbiAgICAgICAgICAvLyBOb3RlOiBUaGUgXCJwYWdlXCIgY291bnRlciB2YWx1ZSBkaWZmZXJzIHRvIHRoZSBcInBhZ2UtbnVtYmVyXCIgdmFsdWVcbiAgICAgICAgICAvLyBpZiB0aGUgXCJwYWdlXCIgY291bnRlciBoYXMgYmVlbiByZXNldCBieSBjb3VudGVyLXJlc2V0L2luY3JlbWVudC5cbiAgICAgICAgICAvLyAoRml4IGZvciBpc3N1ZSAjNzAxKVxuICAgICAgICB9XG4gICAgICAgIGlmIChpdGVtLnNraXBQYWdlc0JlZm9yZSAhPT0gbnVsbCkge1xuICAgICAgICAgIHBhZ2VOdW1iZXJPZmZzZXQgKz0gaXRlbS5za2lwUGFnZXNCZWZvcmU7XG4gICAgICAgICAgcGFnZUNvdW50ZXJPZmZzZXQgKz0gaXRlbS5za2lwUGFnZXNCZWZvcmU7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIHRoaXMuY291bnRlclN0b3JlLmZvcmNlU2V0UGFnZUNvdW50ZXIocGFnZUNvdW50ZXJPZmZzZXQpO1xuICAgICAgY29uc3QgaW5zdGFuY2UgPSBuZXcgT1BTLlN0eWxlSW5zdGFuY2UoXG4gICAgICAgIHN0eWxlLFxuICAgICAgICB4bWxkb2MsXG4gICAgICAgIHRoaXMub3BmLmxhbmcsXG4gICAgICAgIHZpZXdwb3J0LFxuICAgICAgICB0aGlzLmNsaWVudExheW91dCxcbiAgICAgICAgdGhpcy5mb250TWFwcGVyLFxuICAgICAgICBjdXN0b21SZW5kZXJlcixcbiAgICAgICAgdGhpcy5vcGYuZmFsbGJhY2tNYXAsXG4gICAgICAgIHBhZ2VOdW1iZXJPZmZzZXQsXG4gICAgICAgIHRoaXMub3BmLmRvY3VtZW50VVJMVHJhbnNmb3JtZXIsXG4gICAgICAgIHRoaXMuY291bnRlclN0b3JlLFxuICAgICAgICB0aGlzLm9wZi5wYWdlUHJvZ3Jlc3Npb24sXG4gICAgICAgIGlzVmVyc29GaXJzdFBhZ2UsXG4gICAgICApO1xuICAgICAgaW5zdGFuY2UucHJlZiA9IHRoaXMucHJlZjtcblxuICAgICAgLy8gRm9yIGVudihwdWItdGl0bGUpIGFuZCBlbnYoZG9jLXRpdGxlKVxuICAgICAgY29uc3QgcHViVGl0bGVzID0gdGhpcy5vcGYubWV0YWRhdGEgJiYgdGhpcy5vcGYubWV0YWRhdGFbbWV0YVRlcm1zLnRpdGxlXTtcbiAgICAgIGluc3RhbmNlLnB1YlRpdGxlID1cbiAgICAgICAgKHB1YlRpdGxlcyAmJiBwdWJUaXRsZXNbMF0gJiYgcHViVGl0bGVzWzBdW1widlwiXSkgfHwgXCJcIjtcbiAgICAgIGluc3RhbmNlLmRvY1RpdGxlID0gaXRlbS50aXRsZSB8fCBcIlwiO1xuXG4gICAgICBpbnN0YW5jZS5pbml0KCkudGhlbigoKSA9PiB7XG4gICAgICAgIHZpZXdJdGVtID0ge1xuICAgICAgICAgIGl0ZW0sXG4gICAgICAgICAgeG1sZG9jLFxuICAgICAgICAgIGluc3RhbmNlLFxuICAgICAgICAgIGxheW91dFBvc2l0aW9uczogW251bGxdLFxuICAgICAgICAgIHBhZ2VzOiBbXSxcbiAgICAgICAgICBjb21wbGV0ZTogZmFsc2UsXG4gICAgICAgIH07XG4gICAgICAgIHRoaXMuc3BpbmVJdGVtc1tzcGluZUluZGV4XSA9IHZpZXdJdGVtO1xuICAgICAgICBmcmFtZS5maW5pc2godmlld0l0ZW0pO1xuICAgICAgICBsb2FkaW5nQ29udGludWF0aW9ucy5mb3JFYWNoKChjKSA9PiB7XG4gICAgICAgICAgYy5zY2hlZHVsZSh2aWV3SXRlbSk7XG4gICAgICAgIH0pO1xuICAgICAgfSk7XG4gICAgfSk7XG4gICAgcmV0dXJuIGZyYW1lLnJlc3VsdCgpO1xuICB9XG5cbiAgcmVtb3ZlUmVuZGVyZWRQYWdlcygpIHtcbiAgICBjb25zdCBpdGVtcyA9IHRoaXMuc3BpbmVJdGVtcztcbiAgICBmb3IgKGNvbnN0IGl0ZW0gb2YgaXRlbXMpIHtcbiAgICAgIGlmIChpdGVtKSB7XG4gICAgICAgIGl0ZW0ucGFnZXMuc3BsaWNlKDApO1xuICAgICAgfVxuICAgIH1cbiAgICB0aGlzLnZpZXdwb3J0LmNsZWFyKCk7XG4gIH1cblxuICAvKipcbiAgICogUmV0dXJucyBpZiBhdCBsZWFzdCBvbmUgcGFnZSBoYXMgJ2F1dG8nIHNpemVcbiAgICovXG4gIGhhc0F1dG9TaXplZFBhZ2VzKCk6IGJvb2xlYW4ge1xuICAgIGNvbnN0IGl0ZW1zID0gdGhpcy5zcGluZUl0ZW1zO1xuICAgIGZvciAoY29uc3QgaXRlbSBvZiBpdGVtcykge1xuICAgICAgaWYgKGl0ZW0pIHtcbiAgICAgICAgY29uc3QgcGFnZXMgPSBpdGVtLnBhZ2VzO1xuICAgICAgICBmb3IgKGNvbnN0IHBhZ2Ugb2YgcGFnZXMpIHtcbiAgICAgICAgICBpZiAocGFnZS5pc0F1dG9QYWdlV2lkdGggJiYgcGFnZS5pc0F1dG9QYWdlSGVpZ2h0KSB7XG4gICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG5cbiAgaGFzUGFnZXMoKTogYm9vbGVhbiB7XG4gICAgcmV0dXJuIHRoaXMuc3BpbmVJdGVtcy5zb21lKChpdGVtKSA9PiBpdGVtICYmIGl0ZW0ucGFnZXMubGVuZ3RoID4gMCk7XG4gIH1cblxuICBzaG93VE9DKGF1dG9oaWRlOiBib29sZWFuKTogVGFzay5SZXN1bHQ8VnRyZWUuUGFnZT4ge1xuICAgIGNvbnN0IG9wZiA9IHRoaXMub3BmO1xuICAgIGNvbnN0IHRvYyA9IG9wZi54aHRtbFRvYyB8fCBvcGYubmN4VG9jO1xuICAgIHRoaXMudG9jQXV0b2hpZGUgPSBhdXRvaGlkZTtcbiAgICBpZiAoIXRvYykge1xuICAgICAgcmV0dXJuIFRhc2submV3UmVzdWx0KG51bGwgYXMgVnRyZWUuUGFnZSk7XG4gICAgfVxuICAgIGlmICh0aGlzLnRvY1ZpZXcgJiYgdGhpcy50b2NWaWV3LnBhZ2UpIHtcbiAgICAgIHRoaXMudG9jVmlldy5wYWdlLmNvbnRhaW5lci5zdHlsZS52aXNpYmlsaXR5ID0gXCJ2aXNpYmxlXCI7XG4gICAgICB0aGlzLnRvY1ZpZXcucGFnZS5jb250YWluZXIuc2V0QXR0cmlidXRlKFwiYXJpYS1oaWRkZW5cIiwgXCJmYWxzZVwiKTtcbiAgICAgIHJldHVybiBUYXNrLm5ld1Jlc3VsdCh0aGlzLnRvY1ZpZXcucGFnZSk7XG4gICAgfVxuICAgIGNvbnN0IGZyYW1lOiBUYXNrLkZyYW1lPFZ0cmVlLlBhZ2U+ID0gVGFzay5uZXdGcmFtZShcInNob3dUT0NcIik7XG4gICAgaWYgKCF0aGlzLnRvY1ZpZXcpIHtcbiAgICAgIHRoaXMudG9jVmlldyA9IG5ldyBUb2MuVE9DVmlldyhcbiAgICAgICAgb3BmLnN0b3JlLFxuICAgICAgICB0b2Muc3JjLFxuICAgICAgICBvcGYubGFuZyxcbiAgICAgICAgdGhpcy5jbGllbnRMYXlvdXQsXG4gICAgICAgIHRoaXMuZm9udE1hcHBlcixcbiAgICAgICAgdGhpcy5wcmVmLFxuICAgICAgICB0aGlzLFxuICAgICAgICBvcGYuZmFsbGJhY2tNYXAsXG4gICAgICAgIG9wZi5kb2N1bWVudFVSTFRyYW5zZm9ybWVyLFxuICAgICAgICB0aGlzLmNvdW50ZXJTdG9yZSxcbiAgICAgICk7XG4gICAgfVxuICAgIGNvbnN0IHZpZXdwb3J0ID0gdGhpcy52aWV3cG9ydDtcbiAgICBjb25zdCB0b2NXaWR0aCA9IE1hdGgubWluKDM1MCwgTWF0aC5yb3VuZCgwLjY3ICogdmlld3BvcnQud2lkdGgpIC0gMTYpO1xuICAgIGNvbnN0IHRvY0hlaWdodCA9IHZpZXdwb3J0LmhlaWdodCAtIDY7XG4gICAgY29uc3QgcGFnZUNvbnQgPSB2aWV3cG9ydC5kb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiZGl2XCIpIGFzIEhUTUxFbGVtZW50O1xuICAgIHZpZXdwb3J0LnJvb3QuYXBwZW5kQ2hpbGQocGFnZUNvbnQpO1xuICAgIC8vIHBhZ2VDb250LnN0eWxlLnBvc2l0aW9uID0gXCJhYnNvbHV0ZVwiO1xuICAgIHBhZ2VDb250LnN0eWxlLnZpc2liaWxpdHkgPSBcImhpZGRlblwiO1xuICAgIC8vIHBhZ2VDb250LnN0eWxlLmxlZnQgPSBcIjNweFwiO1xuICAgIC8vIHBhZ2VDb250LnN0eWxlLnRvcCA9IFwiM3B4XCI7XG4gICAgcGFnZUNvbnQuc3R5bGUud2lkdGggPSBgJHt0b2NXaWR0aCArIDEwfXB4YDtcbiAgICBwYWdlQ29udC5zdHlsZS5tYXhIZWlnaHQgPSBgJHt0b2NIZWlnaHR9cHhgO1xuICAgIC8vIHBhZ2VDb250LnN0eWxlLm92ZXJmbG93ID0gXCJzY3JvbGxcIjtcbiAgICAvLyBwYWdlQ29udC5zdHlsZS5vdmVyZmxvd1ggPSBcImhpZGRlblwiO1xuICAgIC8vIHBhZ2VDb250LnN0eWxlLmJhY2tncm91bmQgPSBcInJnYmEoMjQ4LDI0OCwyNDgsMC45KVwiO1xuICAgIC8vIHBhZ2VDb250LnN0eWxlW1wiYm9yZGVyUmFkaXVzXCJdID0gXCIycHhcIjtcbiAgICAvLyBwYWdlQ29udC5zdHlsZVtcImJveFNoYWRvd1wiXSA9IFwiMXB4IDFweCAycHggcmdiYSgwLDAsMCwwLjQpXCI7XG5cbiAgICBwYWdlQ29udC5zZXRBdHRyaWJ1dGUoXCJkYXRhLXZpdmxpb3N0eWxlLXRvYy1ib3hcIiwgXCJ0cnVlXCIpO1xuICAgIHBhZ2VDb250LnNldEF0dHJpYnV0ZShcInJvbGVcIiwgXCJuYXZpZ2F0aW9uXCIpO1xuXG4gICAgdGhpcy50b2NWaWV3XG4gICAgICAuc2hvd1RPQyhwYWdlQ29udCwgdmlld3BvcnQsIHRvY1dpZHRoLCB0b2NIZWlnaHQsIHRoaXMudmlld3BvcnQuZm9udFNpemUpXG4gICAgICAudGhlbigocGFnZSkgPT4ge1xuICAgICAgICBwYWdlQ29udC5zdHlsZS52aXNpYmlsaXR5ID0gXCJ2aXNpYmxlXCI7XG4gICAgICAgIHBhZ2VDb250LnNldEF0dHJpYnV0ZShcImFyaWEtaGlkZGVuXCIsIFwiZmFsc2VcIik7XG4gICAgICAgIGZyYW1lLmZpbmlzaChwYWdlKTtcbiAgICAgIH0pO1xuICAgIHJldHVybiBmcmFtZS5yZXN1bHQoKTtcbiAgfVxuXG4gIGhpZGVUT0MoKTogdm9pZCB7XG4gICAgaWYgKHRoaXMudG9jVmlldykge1xuICAgICAgdGhpcy50b2NWaWV3LmhpZGVUT0MoKTtcbiAgICB9XG4gIH1cblxuICBpc1RPQ1Zpc2libGUoKTogYm9vbGVhbiB7XG4gICAgcmV0dXJuICEhdGhpcy50b2NWaWV3ICYmIHRoaXMudG9jVmlldy5pc1RPQ1Zpc2libGUoKTtcbiAgfVxufVxuXG5leHBvcnQgaW50ZXJmYWNlIFJlbmRlclNpbmdsZVBhZ2VSZXN1bHQge1xuICBwYWdlQW5kUG9zaXRpb246IFBhZ2VBbmRQb3NpdGlvbjtcbiAgbmV4dExheW91dFBvc2l0aW9uOiBWdHJlZS5MYXlvdXRQb3NpdGlvbjtcbn1cbiIsIi8qKlxuICogQ29weXJpZ2h0IDIwMTMgR29vZ2xlLCBJbmMuXG4gKiBDb3B5cmlnaHQgMjAxNSBUcmltLW1hcmtzIEluYy5cbiAqIENvcHlyaWdodCAyMDE4IFZpdmxpb3N0eWxlIEZvdW5kYXRpb25cbiAqXG4gKiBWaXZsaW9zdHlsZS5qcyBpcyBmcmVlIHNvZnR3YXJlOiB5b3UgY2FuIHJlZGlzdHJpYnV0ZSBpdCBhbmQvb3IgbW9kaWZ5XG4gKiBpdCB1bmRlciB0aGUgdGVybXMgb2YgdGhlIEdOVSBBZmZlcm8gR2VuZXJhbCBQdWJsaWMgTGljZW5zZSBhcyBwdWJsaXNoZWQgYnlcbiAqIHRoZSBGcmVlIFNvZnR3YXJlIEZvdW5kYXRpb24sIGVpdGhlciB2ZXJzaW9uIDMgb2YgdGhlIExpY2Vuc2UsIG9yXG4gKiAoYXQgeW91ciBvcHRpb24pIGFueSBsYXRlciB2ZXJzaW9uLlxuICpcbiAqIFZpdmxpb3N0eWxlLmpzIGlzIGRpc3RyaWJ1dGVkIGluIHRoZSBob3BlIHRoYXQgaXQgd2lsbCBiZSB1c2VmdWwsXG4gKiBidXQgV0lUSE9VVCBBTlkgV0FSUkFOVFk7IHdpdGhvdXQgZXZlbiB0aGUgaW1wbGllZCB3YXJyYW50eSBvZlxuICogTUVSQ0hBTlRBQklMSVRZIG9yIEZJVE5FU1MgRk9SIEEgUEFSVElDVUxBUiBQVVJQT1NFLiAgU2VlIHRoZVxuICogR05VIEFmZmVybyBHZW5lcmFsIFB1YmxpYyBMaWNlbnNlIGZvciBtb3JlIGRldGFpbHMuXG4gKlxuICogWW91IHNob3VsZCBoYXZlIHJlY2VpdmVkIGEgY29weSBvZiB0aGUgR05VIEFmZmVybyBHZW5lcmFsIFB1YmxpYyBMaWNlbnNlXG4gKiBhbG9uZyB3aXRoIFZpdmxpb3N0eWxlLmpzLiAgSWYgbm90LCBzZWUgPGh0dHA6Ly93d3cuZ251Lm9yZy9saWNlbnNlcy8+LlxuICpcbiAqIEBmaWxlb3ZlcnZpZXcgQWRhcHRpdmVWaWV3ZXIgLSBWaWV3ZXIgaW1wbGVtZW50YXRpb24uXG4gKi9cbmltcG9ydCAqIGFzIEFzc2VydHMgZnJvbSBcIi4vYXNzZXJ0c1wiO1xuaW1wb3J0ICogYXMgQmFzZSBmcm9tIFwiLi9iYXNlXCI7XG5pbXBvcnQgKiBhcyBDb25zdGFudHMgZnJvbSBcIi4vY29uc3RhbnRzXCI7XG5pbXBvcnQgKiBhcyBFcHViIGZyb20gXCIuL2VwdWJcIjtcbmltcG9ydCAqIGFzIEV4cHJzIGZyb20gXCIuL2V4cHJzXCI7XG5pbXBvcnQgKiBhcyBGb250IGZyb20gXCIuL2ZvbnRcIjtcbmltcG9ydCAqIGFzIExvZ2dpbmcgZnJvbSBcIi4vbG9nZ2luZ1wiO1xuaW1wb3J0ICogYXMgUGx1Z2luIGZyb20gXCIuL3BsdWdpblwiO1xuaW1wb3J0ICogYXMgUHJvZmlsZSBmcm9tIFwiLi9wcm9maWxlXCI7XG5pbXBvcnQgKiBhcyBUYXNrIGZyb20gXCIuL3Rhc2tcIjtcbmltcG9ydCAqIGFzIFRhc2tVdGlsIGZyb20gXCIuL3Rhc2stdXRpbFwiO1xuaW1wb3J0ICogYXMgVmdlbiBmcm9tIFwiLi92Z2VuXCI7XG5pbXBvcnQgKiBhcyBWdHJlZSBmcm9tIFwiLi92dHJlZVwiO1xuXG5leHBvcnQgdHlwZSBBY3Rpb24gPSAocDE6IEJhc2UuSlNPTikgPT4gVGFzay5SZXN1bHQ8Ym9vbGVhbj47XG5cbmV4cG9ydCB0eXBlIFZpZXdwb3J0U2l6ZSA9IHtcbiAgbWFyZ2luTGVmdDogbnVtYmVyO1xuICBtYXJnaW5SaWdodDogbnVtYmVyO1xuICBtYXJnaW5Ub3A6IG51bWJlcjtcbiAgbWFyZ2luQm90dG9tOiBudW1iZXI7XG4gIHdpZHRoOiBudW1iZXI7XG4gIGhlaWdodDogbnVtYmVyO1xufTtcblxuZXhwb3J0IGNvbnN0IFZJRVdQT1JUX1NUQVRVU19BVFRSSUJVVEUgPSBcImRhdGEtdml2bGlvc3R5bGUtdmlld2VyLXN0YXR1c1wiO1xuXG5leHBvcnQgY29uc3QgVklFV1BPUlRfU1BSRUFEX1ZJRVdfQVRUUklCVVRFID0gXCJkYXRhLXZpdmxpb3N0eWxlLXNwcmVhZC12aWV3XCI7XG5cbi8qKlxuICogQGVudW0ge3N0cmluZ31cbiAqL1xuZXhwb3J0IGVudW0gUGFnZVZpZXdNb2RlIHtcbiAgU0lOR0xFX1BBR0UgPSBcInNpbmdsZVBhZ2VcIixcbiAgU1BSRUFEID0gXCJzcHJlYWRcIixcbiAgQVVUT19TUFJFQUQgPSBcImF1dG9TcHJlYWRcIixcbn1cblxuZXhwb3J0IHR5cGUgU2luZ2xlRG9jdW1lbnRQYXJhbSA9IHtcbiAgdXJsOiBzdHJpbmc7XG4gIHN0YXJ0UGFnZTogbnVtYmVyIHwgbnVsbDtcbiAgc2tpcFBhZ2VzQmVmb3JlOiBudW1iZXIgfCBudWxsO1xufTtcblxuZXhwb3J0IGNsYXNzIEFkYXB0aXZlVmlld2VyIHtcbiAgZm9udE1hcHBlcjogRm9udC5NYXBwZXI7XG4gIGtpY2s6ICgpID0+IHZvaWQ7XG4gIHNlbmRDb21tYW5kOiAocDE6IEJhc2UuSlNPTiB8IHN0cmluZykgPT4gdm9pZDtcbiAgcmVzaXplTGlzdGVuZXI6ICgpID0+IHZvaWQ7XG4gIGh5cGVybGlua0xpc3RlbmVyOiBCYXNlLkV2ZW50TGlzdGVuZXI7XG4gIHBhZ2VSdWxlU3R5bGVFbGVtZW50OiBIVE1MRWxlbWVudDtcbiAgcGFnZVNoZWV0U2l6ZUFscmVhZHlTZXQ6IGJvb2xlYW4gPSBmYWxzZTtcbiAgcmVuZGVyVGFzazogVGFzay5UYXNrIHwgbnVsbCA9IG51bGw7XG4gIGFjdGlvbnM6IHsgW2tleTogc3RyaW5nXTogQWN0aW9uIH07XG4gIHJlYWR5U3RhdGU6IENvbnN0YW50cy5SZWFkeVN0YXRlO1xuICBwYWNrYWdlVVJMOiBzdHJpbmdbXTtcbiAgb3BmOiBFcHViLk9QRkRvYztcbiAgaGF2ZVppcE1ldGFkYXRhOiBib29sZWFuO1xuICB0b3VjaEFjdGl2ZTogYm9vbGVhbjtcbiAgdG91Y2hYOiBudW1iZXI7XG4gIHRvdWNoWTogbnVtYmVyO1xuICBuZWVkUmVzaXplOiBib29sZWFuO1xuICBuZWVkUmVmcmVzaDogYm9vbGVhbjtcbiAgdmlld3BvcnRTaXplOiBWaWV3cG9ydFNpemUgfCBudWxsO1xuICBjdXJyZW50UGFnZTogVnRyZWUuUGFnZTtcbiAgY3VycmVudFNwcmVhZDogVnRyZWUuU3ByZWFkIHwgbnVsbDtcbiAgcGFnZVBvc2l0aW9uOiBFcHViLlBvc2l0aW9uIHwgbnVsbDtcbiAgZm9udFNpemU6IG51bWJlcjtcbiAgem9vbTogbnVtYmVyO1xuICBmaXRUb1NjcmVlbjogYm9vbGVhbjtcbiAgcGFnZVZpZXdNb2RlOiBQYWdlVmlld01vZGU7XG4gIHdhaXRGb3JMb2FkaW5nOiBib29sZWFuO1xuICByZW5kZXJBbGxQYWdlczogYm9vbGVhbjtcbiAgcHJlZjogRXhwcnMuUHJlZmVyZW5jZXM7XG4gIHBhZ2VTaXplczogeyB3aWR0aDogbnVtYmVyOyBoZWlnaHQ6IG51bWJlciB9W107XG5cbiAgLy8gZm9yY2UgcmVsYXlvdXRcbiAgdmlld3BvcnQ6IFZnZW4uVmlld3BvcnQgfCBudWxsO1xuICBvcGZWaWV3OiBFcHViLk9QRlZpZXc7XG5cbiAgY29uc3RydWN0b3IoXG4gICAgcHVibGljIHJlYWRvbmx5IHdpbmRvdzogV2luZG93LFxuICAgIHB1YmxpYyByZWFkb25seSB2aWV3cG9ydEVsZW1lbnQ6IEhUTUxFbGVtZW50LFxuICAgIHB1YmxpYyByZWFkb25seSBpbnN0YW5jZUlkOiBzdHJpbmcsXG4gICAgcHVibGljIHJlYWRvbmx5IGNhbGxiYWNrRm46IChwMTogQmFzZS5KU09OKSA9PiB2b2lkLFxuICApIHtcbiAgICB2aWV3cG9ydEVsZW1lbnQuc2V0QXR0cmlidXRlKFwiZGF0YS12aXZsaW9zdHlsZS12aWV3ZXItdmlld3BvcnRcIiwgdHJ1ZSk7XG4gICAgaWYgKENvbnN0YW50cy5pc0RlYnVnKSB7XG4gICAgICB2aWV3cG9ydEVsZW1lbnQuc2V0QXR0cmlidXRlKFwiZGF0YS12aXZsaW9zdHlsZS1kZWJ1Z1wiLCB0cnVlKTtcbiAgICB9XG4gICAgdmlld3BvcnRFbGVtZW50LnNldEF0dHJpYnV0ZShWSUVXUE9SVF9TVEFUVVNfQVRUUklCVVRFLCBcImxvYWRpbmdcIik7XG4gICAgY29uc3QgZG9jdW1lbnQgPSB3aW5kb3cuZG9jdW1lbnQ7XG4gICAgdGhpcy5mb250TWFwcGVyID0gbmV3IEZvbnQuTWFwcGVyKGRvY3VtZW50LmhlYWQsIHZpZXdwb3J0RWxlbWVudCk7XG4gICAgdGhpcy5pbml0KCk7XG4gICAgdGhpcy5raWNrID0gKCkgPT4ge307XG4gICAgdGhpcy5zZW5kQ29tbWFuZCA9ICgpID0+IHt9O1xuICAgIHRoaXMucmVzaXplTGlzdGVuZXIgPSAoKSA9PiB7XG4gICAgICB0aGlzLm5lZWRSZXNpemUgPSB0cnVlO1xuICAgICAgdGhpcy5raWNrKCk7XG4gICAgfTtcbiAgICB0aGlzLnBhZ2VSZXBsYWNlZExpc3RlbmVyID0gdGhpcy5wYWdlUmVwbGFjZWRMaXN0ZW5lci5iaW5kKHRoaXMpO1xuICAgIHRoaXMuaHlwZXJsaW5rTGlzdGVuZXIgPSAoZXZ0KSA9PiB7fTtcbiAgICB0aGlzLnBhZ2VSdWxlU3R5bGVFbGVtZW50ID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoXG4gICAgICBcInZpdmxpb3N0eWxlLXBhZ2UtcnVsZXNcIixcbiAgICApO1xuICAgIHRoaXMuYWN0aW9ucyA9IHtcbiAgICAgIGxvYWRQdWJsaWNhdGlvbjogdGhpcy5sb2FkUHVibGljYXRpb24sXG4gICAgICBsb2FkWE1MOiB0aGlzLmxvYWRYTUwsXG4gICAgICBjb25maWd1cmU6IHRoaXMuY29uZmlndXJlLFxuICAgICAgbW92ZVRvOiB0aGlzLm1vdmVUbyxcbiAgICAgIHRvYzogdGhpcy5zaG93VE9DLFxuICAgIH07XG4gICAgdGhpcy5hZGRMb2dMaXN0ZW5lcnMoKTtcbiAgfVxuXG4gIHByaXZhdGUgaW5pdCgpOiB2b2lkIHtcbiAgICB0aGlzLnJlYWR5U3RhdGUgPSBDb25zdGFudHMuUmVhZHlTdGF0ZS5MT0FESU5HO1xuICAgIHRoaXMucGFja2FnZVVSTCA9IFtdO1xuICAgIHRoaXMub3BmID0gbnVsbDtcbiAgICB0aGlzLmhhdmVaaXBNZXRhZGF0YSA9IGZhbHNlO1xuICAgIHRoaXMudG91Y2hBY3RpdmUgPSBmYWxzZTtcbiAgICB0aGlzLnRvdWNoWCA9IDA7XG4gICAgdGhpcy50b3VjaFkgPSAwO1xuICAgIHRoaXMubmVlZFJlc2l6ZSA9IGZhbHNlO1xuICAgIHRoaXMubmVlZFJlZnJlc2ggPSBmYWxzZTtcbiAgICB0aGlzLnZpZXdwb3J0U2l6ZSA9IG51bGw7XG4gICAgdGhpcy5jdXJyZW50UGFnZSA9IG51bGw7XG4gICAgdGhpcy5jdXJyZW50U3ByZWFkID0gbnVsbDtcbiAgICB0aGlzLnBhZ2VQb3NpdGlvbiA9IG51bGw7XG4gICAgdGhpcy5mb250U2l6ZSA9IDE2O1xuICAgIHRoaXMuem9vbSA9IDE7XG4gICAgdGhpcy5maXRUb1NjcmVlbiA9IGZhbHNlO1xuICAgIHRoaXMucGFnZVZpZXdNb2RlID0gUGFnZVZpZXdNb2RlLlNJTkdMRV9QQUdFO1xuICAgIHRoaXMud2FpdEZvckxvYWRpbmcgPSBmYWxzZTtcbiAgICB0aGlzLnJlbmRlckFsbFBhZ2VzID0gdHJ1ZTtcbiAgICB0aGlzLnByZWYgPSBFeHBycy5kZWZhdWx0UHJlZmVyZW5jZXMoKTtcbiAgICB0aGlzLnBhZ2VTaXplcyA9IFtdO1xuICB9XG5cbiAgYWRkTG9nTGlzdGVuZXJzKCkge1xuICAgIGNvbnN0IGxvZ0xldmVsID0gTG9nZ2luZy5Mb2dMZXZlbDtcbiAgICBMb2dnaW5nLmxvZ2dlci5hZGRMaXN0ZW5lcihsb2dMZXZlbC5ERUJVRywgKGluZm8pID0+IHtcbiAgICAgIHRoaXMuY2FsbGJhY2soeyB0OiBcImRlYnVnXCIsIGNvbnRlbnQ6IGluZm8gfSk7XG4gICAgfSk7XG4gICAgTG9nZ2luZy5sb2dnZXIuYWRkTGlzdGVuZXIobG9nTGV2ZWwuSU5GTywgKGluZm8pID0+IHtcbiAgICAgIHRoaXMuY2FsbGJhY2soeyB0OiBcImluZm9cIiwgY29udGVudDogaW5mbyB9KTtcbiAgICB9KTtcbiAgICBMb2dnaW5nLmxvZ2dlci5hZGRMaXN0ZW5lcihsb2dMZXZlbC5XQVJOLCAoaW5mbykgPT4ge1xuICAgICAgdGhpcy5jYWxsYmFjayh7IHQ6IFwid2FyblwiLCBjb250ZW50OiBpbmZvIH0pO1xuICAgIH0pO1xuICAgIExvZ2dpbmcubG9nZ2VyLmFkZExpc3RlbmVyKGxvZ0xldmVsLkVSUk9SLCAoaW5mbykgPT4ge1xuICAgICAgdGhpcy5jYWxsYmFjayh7IHQ6IFwiZXJyb3JcIiwgY29udGVudDogaW5mbyB9KTtcbiAgICB9KTtcbiAgfVxuXG4gIHByaXZhdGUgY2FsbGJhY2sobWVzc2FnZTogQmFzZS5KU09OKTogdm9pZCB7XG4gICAgbWVzc2FnZVtcImlcIl0gPSB0aGlzLmluc3RhbmNlSWQ7XG4gICAgdGhpcy5jYWxsYmFja0ZuKG1lc3NhZ2UpO1xuICB9XG5cbiAgLyoqXG4gICAqIFNldCByZWFkeVN0YXRlIGFuZCBub3RpZnkgdG8gbGlzdGVuZXJzXG4gICAqL1xuICBzZXRSZWFkeVN0YXRlKHJlYWR5U3RhdGU6IENvbnN0YW50cy5SZWFkeVN0YXRlKSB7XG4gICAgaWYgKHRoaXMucmVhZHlTdGF0ZSAhPT0gcmVhZHlTdGF0ZSkge1xuICAgICAgdGhpcy5yZWFkeVN0YXRlID0gcmVhZHlTdGF0ZTtcbiAgICAgIHRoaXMudmlld3BvcnRFbGVtZW50LnNldEF0dHJpYnV0ZShWSUVXUE9SVF9TVEFUVVNfQVRUUklCVVRFLCByZWFkeVN0YXRlKTtcbiAgICAgIHRoaXMuY2FsbGJhY2soeyB0OiBcInJlYWR5c3RhdGVjaGFuZ2VcIiB9KTtcbiAgICB9XG4gIH1cblxuICBsb2FkUHVibGljYXRpb24oY29tbWFuZDogQmFzZS5KU09OKTogVGFzay5SZXN1bHQ8Ym9vbGVhbj4ge1xuICAgIFByb2ZpbGUucHJvZmlsZXIucmVnaXN0ZXJTdGFydFRpbWluZyhcImJlZm9yZVJlbmRlclwiKTtcbiAgICB0aGlzLnNldFJlYWR5U3RhdGUoQ29uc3RhbnRzLlJlYWR5U3RhdGUuTE9BRElORyk7XG4gICAgY29uc3QgdXJsID0gY29tbWFuZFtcInVybFwiXSBhcyBzdHJpbmc7XG4gICAgY29uc3QgZnJhZ21lbnQgPSBjb21tYW5kW1wiZnJhZ21lbnRcIl0gYXMgc3RyaW5nIHwgbnVsbDtcbiAgICBjb25zdCBoYXZlWmlwTWV0YWRhdGEgPSAhIWNvbW1hbmRbXCJ6aXBtZXRhXCJdO1xuICAgIGNvbnN0IGF1dGhvclN0eWxlU2hlZXQgPSBjb21tYW5kW1wiYXV0aG9yU3R5bGVTaGVldFwiXSBhcyB7XG4gICAgICB1cmw6IHN0cmluZyB8IG51bGw7XG4gICAgICB0ZXh0OiBzdHJpbmcgfCBudWxsO1xuICAgIH1bXTtcbiAgICBjb25zdCB1c2VyU3R5bGVTaGVldCA9IGNvbW1hbmRbXCJ1c2VyU3R5bGVTaGVldFwiXSBhcyB7XG4gICAgICB1cmw6IHN0cmluZyB8IG51bGw7XG4gICAgICB0ZXh0OiBzdHJpbmcgfCBudWxsO1xuICAgIH1bXTtcbiAgICB0aGlzLnZpZXdwb3J0ID0gbnVsbDtcbiAgICBjb25zdCBmcmFtZTogVGFzay5GcmFtZTxib29sZWFuPiA9IFRhc2submV3RnJhbWUoXCJsb2FkUHVibGljYXRpb25cIik7XG4gICAgdGhpcy5jb25maWd1cmUoY29tbWFuZCkudGhlbigoKSA9PiB7XG4gICAgICBjb25zdCBzdG9yZSA9IG5ldyBFcHViLkVQVUJEb2NTdG9yZSgpO1xuICAgICAgc3RvcmUuaW5pdChhdXRob3JTdHlsZVNoZWV0LCB1c2VyU3R5bGVTaGVldCkudGhlbigoKSA9PiB7XG4gICAgICAgIGNvbnN0IHB1YlVSTCA9IEJhc2UucmVzb2x2ZVVSTChcbiAgICAgICAgICBCYXNlLmNvbnZlcnRTcGVjaWFsVVJMKHVybCksXG4gICAgICAgICAgdGhpcy53aW5kb3cubG9jYXRpb24uaHJlZixcbiAgICAgICAgKTtcbiAgICAgICAgdGhpcy5wYWNrYWdlVVJMID0gW3B1YlVSTF07XG4gICAgICAgIHN0b3JlLmxvYWRQdWJEb2MocHViVVJMLCBoYXZlWmlwTWV0YWRhdGEpLnRoZW4oKG9wZikgPT4ge1xuICAgICAgICAgIGlmIChvcGYpIHtcbiAgICAgICAgICAgIHRoaXMub3BmID0gb3BmO1xuICAgICAgICAgICAgdGhpcy5yZW5kZXIoZnJhZ21lbnQpLnRoZW4oKCkgPT4ge1xuICAgICAgICAgICAgICBmcmFtZS5maW5pc2godHJ1ZSk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgZnJhbWUuZmluaXNoKGZhbHNlKTtcbiAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgICAgfSk7XG4gICAgfSk7XG4gICAgcmV0dXJuIGZyYW1lLnJlc3VsdCgpO1xuICB9XG5cbiAgbG9hZFhNTChjb21tYW5kOiBCYXNlLkpTT04pOiBUYXNrLlJlc3VsdDxib29sZWFuPiB7XG4gICAgUHJvZmlsZS5wcm9maWxlci5yZWdpc3RlclN0YXJ0VGltaW5nKFwiYmVmb3JlUmVuZGVyXCIpO1xuICAgIHRoaXMuc2V0UmVhZHlTdGF0ZShDb25zdGFudHMuUmVhZHlTdGF0ZS5MT0FESU5HKTtcbiAgICBjb25zdCBwYXJhbXM6IFNpbmdsZURvY3VtZW50UGFyYW1bXSA9IGNvbW1hbmRbXCJ1cmxcIl07XG4gICAgY29uc3QgZG9jID0gY29tbWFuZFtcImRvY3VtZW50XCJdIGFzIERvY3VtZW50O1xuICAgIGNvbnN0IGZyYWdtZW50ID0gY29tbWFuZFtcImZyYWdtZW50XCJdIGFzIHN0cmluZyB8IG51bGw7XG4gICAgY29uc3QgYXV0aG9yU3R5bGVTaGVldCA9IGNvbW1hbmRbXCJhdXRob3JTdHlsZVNoZWV0XCJdIGFzIHtcbiAgICAgIHVybDogc3RyaW5nIHwgbnVsbDtcbiAgICAgIHRleHQ6IHN0cmluZyB8IG51bGw7XG4gICAgfVtdO1xuICAgIGNvbnN0IHVzZXJTdHlsZVNoZWV0ID0gY29tbWFuZFtcInVzZXJTdHlsZVNoZWV0XCJdIGFzIHtcbiAgICAgIHVybDogc3RyaW5nIHwgbnVsbDtcbiAgICAgIHRleHQ6IHN0cmluZyB8IG51bGw7XG4gICAgfVtdO1xuXG4gICAgLy8gZm9yY2UgcmVsYXlvdXRcbiAgICB0aGlzLnZpZXdwb3J0ID0gbnVsbDtcbiAgICBjb25zdCBmcmFtZTogVGFzay5GcmFtZTxib29sZWFuPiA9IFRhc2submV3RnJhbWUoXCJsb2FkWE1MXCIpO1xuICAgIHRoaXMuY29uZmlndXJlKGNvbW1hbmQpLnRoZW4oKCkgPT4ge1xuICAgICAgY29uc3Qgc3RvcmUgPSBuZXcgRXB1Yi5FUFVCRG9jU3RvcmUoKTtcbiAgICAgIHN0b3JlLmluaXQoYXV0aG9yU3R5bGVTaGVldCwgdXNlclN0eWxlU2hlZXQpLnRoZW4oKCkgPT4ge1xuICAgICAgICBjb25zdCByZXNvbHZlZFBhcmFtczogRXB1Yi5PUEZJdGVtUGFyYW1bXSA9IHBhcmFtcy5tYXAoKHAsIGluZGV4KSA9PiAoe1xuICAgICAgICAgIHVybDogQmFzZS5yZXNvbHZlVVJMKFxuICAgICAgICAgICAgQmFzZS5jb252ZXJ0U3BlY2lhbFVSTChwLnVybCksXG4gICAgICAgICAgICB0aGlzLndpbmRvdy5sb2NhdGlvbi5ocmVmLFxuICAgICAgICAgICksXG4gICAgICAgICAgaW5kZXgsXG4gICAgICAgICAgc3RhcnRQYWdlOiBwLnN0YXJ0UGFnZSxcbiAgICAgICAgICBza2lwUGFnZXNCZWZvcmU6IHAuc2tpcFBhZ2VzQmVmb3JlLFxuICAgICAgICB9KSk7XG4gICAgICAgIHRoaXMucGFja2FnZVVSTCA9IHJlc29sdmVkUGFyYW1zLm1hcCgocCkgPT4gcC51cmwpO1xuICAgICAgICB0aGlzLm9wZiA9IG5ldyBFcHViLk9QRkRvYyhzdG9yZSwgXCJcIik7XG4gICAgICAgIHRoaXMub3BmLmluaXRXaXRoQ2hhcHRlcnMocmVzb2x2ZWRQYXJhbXMsIGRvYykudGhlbigoKSA9PiB7XG4gICAgICAgICAgdGhpcy5yZW5kZXIoZnJhZ21lbnQpLnRoZW4oKCkgPT4ge1xuICAgICAgICAgICAgZnJhbWUuZmluaXNoKHRydWUpO1xuICAgICAgICAgIH0pO1xuICAgICAgICB9KTtcbiAgICAgIH0pO1xuICAgIH0pO1xuICAgIHJldHVybiBmcmFtZS5yZXN1bHQoKTtcbiAgfVxuXG4gIHByaXZhdGUgcmVuZGVyKGZyYWdtZW50Pzogc3RyaW5nIHwgbnVsbCk6IFRhc2suUmVzdWx0PGJvb2xlYW4+IHtcbiAgICB0aGlzLmNhbmNlbFJlbmRlcmluZ1Rhc2soKTtcbiAgICBsZXQgY29udDogVGFzay5SZXN1bHQ8Ym9vbGVhbj47XG4gICAgaWYgKGZyYWdtZW50KSB7XG4gICAgICBjb250ID0gdGhpcy5vcGYucmVzb2x2ZUZyYWdtZW50KGZyYWdtZW50KS50aGVuQXN5bmMoKHBvc2l0aW9uKSA9PiB7XG4gICAgICAgIHRoaXMucGFnZVBvc2l0aW9uID0gcG9zaXRpb247XG4gICAgICAgIHJldHVybiBUYXNrLm5ld1Jlc3VsdCh0cnVlKTtcbiAgICAgIH0pO1xuICAgIH0gZWxzZSB7XG4gICAgICBjb250ID0gVGFzay5uZXdSZXN1bHQodHJ1ZSk7XG4gICAgfVxuICAgIHJldHVybiBjb250LnRoZW5Bc3luYygoKSA9PiB7XG4gICAgICBQcm9maWxlLnByb2ZpbGVyLnJlZ2lzdGVyRW5kVGltaW5nKFwiYmVmb3JlUmVuZGVyXCIpO1xuICAgICAgcmV0dXJuIHRoaXMucmVzaXplKCk7XG4gICAgfSk7XG4gIH1cblxuICBwcml2YXRlIHJlc29sdmVMZW5ndGgoc3BlY2lmaWVkOiBzdHJpbmcpOiBudW1iZXIge1xuICAgIGNvbnN0IHZhbHVlID0gcGFyc2VGbG9hdChzcGVjaWZpZWQpO1xuICAgIGNvbnN0IHVuaXRQYXR0ZXJuID0gL1thLXpdKyQvO1xuICAgIGxldCBtYXRjaGVkOiBSZWdFeHBNYXRjaEFycmF5O1xuICAgIGlmIChcbiAgICAgIHR5cGVvZiBzcGVjaWZpZWQgPT09IFwic3RyaW5nXCIgJiZcbiAgICAgIChtYXRjaGVkID0gc3BlY2lmaWVkLm1hdGNoKHVuaXRQYXR0ZXJuKSlcbiAgICApIHtcbiAgICAgIGNvbnN0IHVuaXQgPSBtYXRjaGVkWzBdO1xuICAgICAgaWYgKHVuaXQgPT09IFwiZW1cIiB8fCB1bml0ID09PSBcInJlbVwiKSB7XG4gICAgICAgIHJldHVybiB2YWx1ZSAqIHRoaXMuZm9udFNpemU7XG4gICAgICB9XG4gICAgICBpZiAodW5pdCA9PT0gXCJleFwiKSB7XG4gICAgICAgIHJldHVybiAoXG4gICAgICAgICAgKHZhbHVlICogRXhwcnMuZGVmYXVsdFVuaXRTaXplc1tcImV4XCJdICogdGhpcy5mb250U2l6ZSkgL1xuICAgICAgICAgIEV4cHJzLmRlZmF1bHRVbml0U2l6ZXNbXCJlbVwiXVxuICAgICAgICApO1xuICAgICAgfVxuICAgICAgY29uc3QgdW5pdFNpemUgPSBFeHBycy5kZWZhdWx0VW5pdFNpemVzW3VuaXRdO1xuICAgICAgaWYgKHVuaXRTaXplKSB7XG4gICAgICAgIHJldHVybiB2YWx1ZSAqIHVuaXRTaXplO1xuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gdmFsdWU7XG4gIH1cblxuICBjb25maWd1cmUoY29tbWFuZDogQmFzZS5KU09OKTogVGFzay5SZXN1bHQ8Ym9vbGVhbj4ge1xuICAgIGlmICh0eXBlb2YgY29tbWFuZFtcImF1dG9yZXNpemVcIl0gPT0gXCJib29sZWFuXCIpIHtcbiAgICAgIGlmIChjb21tYW5kW1wiYXV0b3Jlc2l6ZVwiXSkge1xuICAgICAgICB0aGlzLnZpZXdwb3J0U2l6ZSA9IG51bGw7XG4gICAgICAgIHRoaXMud2luZG93LmFkZEV2ZW50TGlzdGVuZXIoXCJyZXNpemVcIiwgdGhpcy5yZXNpemVMaXN0ZW5lciwgZmFsc2UpO1xuICAgICAgICB0aGlzLm5lZWRSZXNpemUgPSB0cnVlO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdGhpcy53aW5kb3cucmVtb3ZlRXZlbnRMaXN0ZW5lcihcInJlc2l6ZVwiLCB0aGlzLnJlc2l6ZUxpc3RlbmVyLCBmYWxzZSk7XG4gICAgICB9XG4gICAgfVxuICAgIGlmICh0eXBlb2YgY29tbWFuZFtcImZvbnRTaXplXCJdID09IFwibnVtYmVyXCIpIHtcbiAgICAgIGNvbnN0IGZvbnRTaXplID0gY29tbWFuZFtcImZvbnRTaXplXCJdIGFzIG51bWJlcjtcbiAgICAgIGlmIChmb250U2l6ZSA+PSA1ICYmIGZvbnRTaXplIDw9IDcyICYmIHRoaXMuZm9udFNpemUgIT0gZm9udFNpemUpIHtcbiAgICAgICAgdGhpcy5mb250U2l6ZSA9IGZvbnRTaXplO1xuICAgICAgICB0aGlzLm5lZWRSZXNpemUgPSB0cnVlO1xuICAgICAgfVxuICAgIH1cbiAgICBpZiAodHlwZW9mIGNvbW1hbmRbXCJ2aWV3cG9ydFwiXSA9PSBcIm9iamVjdFwiICYmIGNvbW1hbmRbXCJ2aWV3cG9ydFwiXSkge1xuICAgICAgY29uc3QgdnAgPSBjb21tYW5kW1widmlld3BvcnRcIl07XG4gICAgICBjb25zdCB2aWV3cG9ydFNpemUgPSB7XG4gICAgICAgIG1hcmdpbkxlZnQ6IHRoaXMucmVzb2x2ZUxlbmd0aCh2cFtcIm1hcmdpbi1sZWZ0XCJdKSB8fCAwLFxuICAgICAgICBtYXJnaW5SaWdodDogdGhpcy5yZXNvbHZlTGVuZ3RoKHZwW1wibWFyZ2luLXJpZ2h0XCJdKSB8fCAwLFxuICAgICAgICBtYXJnaW5Ub3A6IHRoaXMucmVzb2x2ZUxlbmd0aCh2cFtcIm1hcmdpbi10b3BcIl0pIHx8IDAsXG4gICAgICAgIG1hcmdpbkJvdHRvbTogdGhpcy5yZXNvbHZlTGVuZ3RoKHZwW1wibWFyZ2luLWJvdHRvbVwiXSkgfHwgMCxcbiAgICAgICAgd2lkdGg6IHRoaXMucmVzb2x2ZUxlbmd0aCh2cFtcIndpZHRoXCJdKSB8fCAwLFxuICAgICAgICBoZWlnaHQ6IHRoaXMucmVzb2x2ZUxlbmd0aCh2cFtcImhlaWdodFwiXSkgfHwgMCxcbiAgICAgIH07XG4gICAgICBpZiAodmlld3BvcnRTaXplLndpZHRoID49IDIwMCB8fCB2aWV3cG9ydFNpemUuaGVpZ2h0ID49IDIwMCkge1xuICAgICAgICB0aGlzLndpbmRvdy5yZW1vdmVFdmVudExpc3RlbmVyKFwicmVzaXplXCIsIHRoaXMucmVzaXplTGlzdGVuZXIsIGZhbHNlKTtcbiAgICAgICAgdGhpcy52aWV3cG9ydFNpemUgPSB2aWV3cG9ydFNpemU7XG4gICAgICAgIHRoaXMubmVlZFJlc2l6ZSA9IHRydWU7XG4gICAgICB9XG4gICAgfVxuICAgIGlmICh0eXBlb2YgY29tbWFuZFtcImh5cGhlbmF0ZVwiXSA9PSBcImJvb2xlYW5cIikge1xuICAgICAgdGhpcy5wcmVmLmh5cGhlbmF0ZSA9IGNvbW1hbmRbXCJoeXBoZW5hdGVcIl07XG4gICAgICB0aGlzLm5lZWRSZXNpemUgPSB0cnVlO1xuICAgIH1cbiAgICBpZiAodHlwZW9mIGNvbW1hbmRbXCJob3Jpem9udGFsXCJdID09IFwiYm9vbGVhblwiKSB7XG4gICAgICB0aGlzLnByZWYuaG9yaXpvbnRhbCA9IGNvbW1hbmRbXCJob3Jpem9udGFsXCJdO1xuICAgICAgdGhpcy5uZWVkUmVzaXplID0gdHJ1ZTtcbiAgICB9XG4gICAgaWYgKHR5cGVvZiBjb21tYW5kW1wibmlnaHRNb2RlXCJdID09IFwiYm9vbGVhblwiKSB7XG4gICAgICB0aGlzLnByZWYubmlnaHRNb2RlID0gY29tbWFuZFtcIm5pZ2h0TW9kZVwiXTtcbiAgICAgIHRoaXMubmVlZFJlc2l6ZSA9IHRydWU7XG4gICAgfVxuICAgIGlmICh0eXBlb2YgY29tbWFuZFtcImxpbmVIZWlnaHRcIl0gPT0gXCJudW1iZXJcIikge1xuICAgICAgdGhpcy5wcmVmLmxpbmVIZWlnaHQgPSBjb21tYW5kW1wibGluZUhlaWdodFwiXTtcbiAgICAgIHRoaXMubmVlZFJlc2l6ZSA9IHRydWU7XG4gICAgfVxuICAgIGlmICh0eXBlb2YgY29tbWFuZFtcImNvbHVtbldpZHRoXCJdID09IFwibnVtYmVyXCIpIHtcbiAgICAgIHRoaXMucHJlZi5jb2x1bW5XaWR0aCA9IGNvbW1hbmRbXCJjb2x1bW5XaWR0aFwiXTtcbiAgICAgIHRoaXMubmVlZFJlc2l6ZSA9IHRydWU7XG4gICAgfVxuICAgIGlmICh0eXBlb2YgY29tbWFuZFtcImZvbnRGYW1pbHlcIl0gPT0gXCJzdHJpbmdcIikge1xuICAgICAgdGhpcy5wcmVmLmZvbnRGYW1pbHkgPSBjb21tYW5kW1wiZm9udEZhbWlseVwiXTtcbiAgICAgIHRoaXMubmVlZFJlc2l6ZSA9IHRydWU7XG4gICAgfVxuICAgIGlmICh0eXBlb2YgY29tbWFuZFtcImxvYWRcIl0gPT0gXCJib29sZWFuXCIpIHtcbiAgICAgIHRoaXMud2FpdEZvckxvYWRpbmcgPSBjb21tYW5kW1wibG9hZFwiXTsgLy8gTG9hZCBpbWFnZXMgKGFuZCBvdGhlciByZXNvdXJjZXMpIG9uIHRoZSBwYWdlLlxuICAgIH1cbiAgICBpZiAodHlwZW9mIGNvbW1hbmRbXCJyZW5kZXJBbGxQYWdlc1wiXSA9PSBcImJvb2xlYW5cIikge1xuICAgICAgdGhpcy5yZW5kZXJBbGxQYWdlcyA9IGNvbW1hbmRbXCJyZW5kZXJBbGxQYWdlc1wiXTtcbiAgICB9XG4gICAgLy8gZm9yIGJhY2t3YXJkIGNvbXBhdGliaWxpdHlcbiAgICBpZiAodHlwZW9mIGNvbW1hbmRbXCJ1c2VyQWdlbnRSb290VVJMXCJdID09IFwic3RyaW5nXCIpIHtcbiAgICAgIEJhc2Uuc2V0QmFzZVVSTChjb21tYW5kW1widXNlckFnZW50Um9vdFVSTFwiXS5yZXBsYWNlKC9yZXNvdXJjZXNcXC8/JC8sIFwiXCIpKTtcbiAgICAgIEJhc2Uuc2V0UmVzb3VyY2VCYXNlVVJMKGNvbW1hbmRbXCJ1c2VyQWdlbnRSb290VVJMXCJdKTtcbiAgICB9XG4gICAgaWYgKHR5cGVvZiBjb21tYW5kW1wicm9vdFVSTFwiXSA9PSBcInN0cmluZ1wiKSB7XG4gICAgICBCYXNlLnNldEJhc2VVUkwoY29tbWFuZFtcInJvb3RVUkxcIl0pO1xuICAgICAgQmFzZS5zZXRSZXNvdXJjZUJhc2VVUkwoYCR7QmFzZS5iYXNlVVJMfXJlc291cmNlcy9gKTtcbiAgICB9XG4gICAgaWYgKFxuICAgICAgdHlwZW9mIGNvbW1hbmRbXCJwYWdlVmlld01vZGVcIl0gPT0gXCJzdHJpbmdcIiAmJlxuICAgICAgY29tbWFuZFtcInBhZ2VWaWV3TW9kZVwiXSAhPT0gdGhpcy5wYWdlVmlld01vZGVcbiAgICApIHtcbiAgICAgIHRoaXMucGFnZVZpZXdNb2RlID0gY29tbWFuZFtcInBhZ2VWaWV3TW9kZVwiXSBhcyBQYWdlVmlld01vZGU7XG4gICAgICB0aGlzLm5lZWRSZXNpemUgPSB0cnVlO1xuICAgIH1cbiAgICBpZiAoXG4gICAgICB0eXBlb2YgY29tbWFuZFtcInBhZ2VCb3JkZXJcIl0gPT0gXCJudW1iZXJcIiAmJlxuICAgICAgY29tbWFuZFtcInBhZ2VCb3JkZXJcIl0gIT09IHRoaXMucHJlZi5wYWdlQm9yZGVyXG4gICAgKSB7XG4gICAgICAvLyBGb3JjZSByZWxheW91dFxuICAgICAgdGhpcy52aWV3cG9ydCA9IG51bGw7XG4gICAgICB0aGlzLnByZWYucGFnZUJvcmRlciA9IGNvbW1hbmRbXCJwYWdlQm9yZGVyXCJdO1xuICAgICAgdGhpcy5uZWVkUmVzaXplID0gdHJ1ZTtcbiAgICB9XG4gICAgaWYgKHR5cGVvZiBjb21tYW5kW1wiem9vbVwiXSA9PSBcIm51bWJlclwiICYmIGNvbW1hbmRbXCJ6b29tXCJdICE9PSB0aGlzLnpvb20pIHtcbiAgICAgIHRoaXMuem9vbSA9IGNvbW1hbmRbXCJ6b29tXCJdO1xuICAgICAgdGhpcy5uZWVkUmVmcmVzaCA9IHRydWU7XG4gICAgfVxuICAgIGlmIChcbiAgICAgIHR5cGVvZiBjb21tYW5kW1wiZml0VG9TY3JlZW5cIl0gPT0gXCJib29sZWFuXCIgJiZcbiAgICAgIGNvbW1hbmRbXCJmaXRUb1NjcmVlblwiXSAhPT0gdGhpcy5maXRUb1NjcmVlblxuICAgICkge1xuICAgICAgdGhpcy5maXRUb1NjcmVlbiA9IGNvbW1hbmRbXCJmaXRUb1NjcmVlblwiXTtcbiAgICAgIHRoaXMubmVlZFJlZnJlc2ggPSB0cnVlO1xuICAgIH1cbiAgICBpZiAoXG4gICAgICB0eXBlb2YgY29tbWFuZFtcImRlZmF1bHRQYXBlclNpemVcIl0gPT0gXCJvYmplY3RcIiAmJlxuICAgICAgdHlwZW9mIGNvbW1hbmRbXCJkZWZhdWx0UGFwZXJTaXplXCJdLndpZHRoID09IFwibnVtYmVyXCIgJiZcbiAgICAgIHR5cGVvZiBjb21tYW5kW1wiZGVmYXVsdFBhcGVyU2l6ZVwiXS5oZWlnaHQgPT0gXCJudW1iZXJcIlxuICAgICkge1xuICAgICAgdGhpcy52aWV3cG9ydCA9IG51bGw7XG4gICAgICB0aGlzLnByZWYuZGVmYXVsdFBhcGVyU2l6ZSA9IGNvbW1hbmRbXCJkZWZhdWx0UGFwZXJTaXplXCJdO1xuICAgICAgdGhpcy5uZWVkUmVzaXplID0gdHJ1ZTtcbiAgICB9XG4gICAgdGhpcy5jb25maWd1cmVQbHVnaW5zKGNvbW1hbmQpO1xuICAgIHJldHVybiBUYXNrLm5ld1Jlc3VsdCh0cnVlKTtcbiAgfVxuXG4gIGNvbmZpZ3VyZVBsdWdpbnMoY29tbWFuZDogQmFzZS5KU09OKSB7XG4gICAgY29uc3QgaG9va3M6IFBsdWdpbi5Db25maWd1cmF0aW9uSG9va1tdID0gUGx1Z2luLmdldEhvb2tzRm9yTmFtZShcbiAgICAgIFBsdWdpbi5IT09LUy5DT05GSUdVUkFUSU9OLFxuICAgICk7XG4gICAgaG9va3MuZm9yRWFjaCgoaG9vaykgPT4ge1xuICAgICAgY29uc3QgcmVzdWx0ID0gaG9vayhjb21tYW5kKTtcbiAgICAgIHRoaXMubmVlZFJlc2l6ZSA9IHJlc3VsdC5uZWVkUmVzaXplIHx8IHRoaXMubmVlZFJlc2l6ZTtcbiAgICAgIHRoaXMubmVlZFJlZnJlc2ggPSByZXN1bHQubmVlZFJlZnJlc2ggfHwgdGhpcy5uZWVkUmVmcmVzaDtcbiAgICB9KTtcbiAgfVxuXG4gIC8qKlxuICAgKiBSZWZyZXNoIHZpZXcgd2hlbiBhIGN1cnJlbnRseSBkaXNwbGF5ZWQgcGFnZSBpcyByZXBsYWNlZCAoYnkgcmUtbGF5b3V0XG4gICAqIGNhdXNlZCBieSBjcm9zcyByZWZlcmVuY2UgcmVzb2x1dGlvbnMpXG4gICAqL1xuICBwYWdlUmVwbGFjZWRMaXN0ZW5lcihldnQ6IEJhc2UuRXZlbnQpIHtcbiAgICBjb25zdCBjdXJyZW50UGFnZSA9IHRoaXMuY3VycmVudFBhZ2U7XG4gICAgY29uc3Qgc3ByZWFkID0gdGhpcy5jdXJyZW50U3ByZWFkO1xuICAgIGNvbnN0IHRhcmdldCA9IGV2dC50YXJnZXQ7XG4gICAgaWYgKHNwcmVhZCkge1xuICAgICAgaWYgKHNwcmVhZC5sZWZ0ID09PSB0YXJnZXQgfHwgc3ByZWFkLnJpZ2h0ID09PSB0YXJnZXQpIHtcbiAgICAgICAgdGhpcy5zaG93Q3VycmVudChldnQubmV3UGFnZSk7XG4gICAgICB9XG4gICAgfSBlbHNlIGlmIChjdXJyZW50UGFnZSA9PT0gZXZ0LnRhcmdldCkge1xuICAgICAgdGhpcy5zaG93Q3VycmVudChldnQubmV3UGFnZSk7XG4gICAgfVxuICB9XG5cbiAgLyoqXG4gICAqIEl0ZXJhdGUgdGhyb3VnaCBjdXJyZW50bHkgZGlzcGxheWVkIHBhZ2VzIGFuZCBkbyBzb21ldGhpbmdcbiAgICovXG4gIHByaXZhdGUgZm9yQ3VycmVudFBhZ2VzKGZuOiAocDE6IFZ0cmVlLlBhZ2UpID0+IGFueSkge1xuICAgIGNvbnN0IHBhZ2VzID0gW107XG4gICAgaWYgKHRoaXMuY3VycmVudFBhZ2UpIHtcbiAgICAgIHBhZ2VzLnB1c2godGhpcy5jdXJyZW50UGFnZSk7XG4gICAgfVxuICAgIGlmICh0aGlzLmN1cnJlbnRTcHJlYWQpIHtcbiAgICAgIHBhZ2VzLnB1c2godGhpcy5jdXJyZW50U3ByZWFkLmxlZnQpO1xuICAgICAgcGFnZXMucHVzaCh0aGlzLmN1cnJlbnRTcHJlYWQucmlnaHQpO1xuICAgIH1cbiAgICBwYWdlcy5mb3JFYWNoKChwYWdlKSA9PiB7XG4gICAgICBpZiAocGFnZSkge1xuICAgICAgICBmbihwYWdlKTtcbiAgICAgIH1cbiAgICB9KTtcbiAgfVxuXG4gIHByaXZhdGUgcmVtb3ZlUGFnZUxpc3RlbmVycygpIHtcbiAgICB0aGlzLmZvckN1cnJlbnRQYWdlcygocGFnZSkgPT4ge1xuICAgICAgcGFnZS5yZW1vdmVFdmVudExpc3RlbmVyKFwiaHlwZXJsaW5rXCIsIHRoaXMuaHlwZXJsaW5rTGlzdGVuZXIsIGZhbHNlKTtcbiAgICAgIHBhZ2UucmVtb3ZlRXZlbnRMaXN0ZW5lcihcInJlcGxhY2VkXCIsIHRoaXMucGFnZVJlcGxhY2VkTGlzdGVuZXIsIGZhbHNlKTtcbiAgICB9KTtcbiAgfVxuXG4gIC8qKlxuICAgKiBIaWRlIGN1cnJlbnQgcGFnZXMgKHRoaXMuY3VycmVudFBhZ2UsIHRoaXMuY3VycmVudFNwcmVhZClcbiAgICovXG4gIHByaXZhdGUgaGlkZVBhZ2VzKCkge1xuICAgIHRoaXMucmVtb3ZlUGFnZUxpc3RlbmVycygpO1xuICAgIHRoaXMuZm9yQ3VycmVudFBhZ2VzKChwYWdlKSA9PiB7XG4gICAgICBCYXNlLnNldENTU1Byb3BlcnR5KHBhZ2UuY29udGFpbmVyLCBcImRpc3BsYXlcIiwgXCJub25lXCIpO1xuICAgICAgcGFnZS5jb250YWluZXIuc2V0QXR0cmlidXRlKFwiYXJpYS1oaWRkZW5cIiwgXCJ0cnVlXCIpO1xuICAgIH0pO1xuICAgIHRoaXMuY3VycmVudFBhZ2UgPSBudWxsO1xuICAgIHRoaXMuY3VycmVudFNwcmVhZCA9IG51bGw7XG4gIH1cblxuICBwcml2YXRlIHNob3dTaW5nbGVQYWdlKHBhZ2U6IFZ0cmVlLlBhZ2UpIHtcbiAgICBwYWdlLmFkZEV2ZW50TGlzdGVuZXIoXCJoeXBlcmxpbmtcIiwgdGhpcy5oeXBlcmxpbmtMaXN0ZW5lciwgZmFsc2UpO1xuICAgIHBhZ2UuYWRkRXZlbnRMaXN0ZW5lcihcInJlcGxhY2VkXCIsIHRoaXMucGFnZVJlcGxhY2VkTGlzdGVuZXIsIGZhbHNlKTtcbiAgICBCYXNlLnNldENTU1Byb3BlcnR5KHBhZ2UuY29udGFpbmVyLCBcInZpc2liaWxpdHlcIiwgXCJ2aXNpYmxlXCIpO1xuICAgIEJhc2Uuc2V0Q1NTUHJvcGVydHkocGFnZS5jb250YWluZXIsIFwiZGlzcGxheVwiLCBcImJsb2NrXCIpO1xuICAgIHBhZ2UuY29udGFpbmVyLnNldEF0dHJpYnV0ZShcImFyaWEtaGlkZGVuXCIsIFwiZmFsc2VcIik7XG4gIH1cblxuICBwcml2YXRlIHNob3dQYWdlKHBhZ2U6IFZ0cmVlLlBhZ2UpOiB2b2lkIHtcbiAgICB0aGlzLmhpZGVQYWdlcygpO1xuICAgIHRoaXMuY3VycmVudFBhZ2UgPSBwYWdlO1xuICAgIHBhZ2UuY29udGFpbmVyLnN0eWxlLm1hcmdpbkxlZnQgPSBcIlwiO1xuICAgIHBhZ2UuY29udGFpbmVyLnN0eWxlLm1hcmdpblJpZ2h0ID0gXCJcIjtcbiAgICB0aGlzLnNob3dTaW5nbGVQYWdlKHBhZ2UpO1xuICB9XG5cbiAgcHJpdmF0ZSBzaG93U3ByZWFkKHNwcmVhZDogVnRyZWUuU3ByZWFkKSB7XG4gICAgdGhpcy5oaWRlUGFnZXMoKTtcbiAgICB0aGlzLmN1cnJlbnRTcHJlYWQgPSBzcHJlYWQ7XG4gICAgaWYgKHNwcmVhZC5sZWZ0ICYmIHNwcmVhZC5yaWdodCkge1xuICAgICAgLy8gQWRqdXN0IHNwcmVhZCBob3Jpem9udGFsIGFsaWdubWVudCB3aGVuIGxlZnQvcmlnaHQgcGFnZSB3aWR0aHMgZGlmZmVyXG4gICAgICBsZXQgbGVmdFdpZHRoID0gcGFyc2VGbG9hdChzcHJlYWQubGVmdC5jb250YWluZXIuc3R5bGUud2lkdGgpO1xuICAgICAgbGV0IHJpZ2h0V2lkdGggPSBwYXJzZUZsb2F0KHNwcmVhZC5yaWdodC5jb250YWluZXIuc3R5bGUud2lkdGgpO1xuICAgICAgaWYgKGxlZnRXaWR0aCAmJiByaWdodFdpZHRoICYmIGxlZnRXaWR0aCAhPT0gcmlnaHRXaWR0aCkge1xuICAgICAgICBpZiAobGVmdFdpZHRoIDwgcmlnaHRXaWR0aCkge1xuICAgICAgICAgIHNwcmVhZC5sZWZ0LmNvbnRhaW5lci5zdHlsZS5tYXJnaW5MZWZ0ID0gYCR7XG4gICAgICAgICAgICByaWdodFdpZHRoIC0gbGVmdFdpZHRoXG4gICAgICAgICAgfXB4YDtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBzcHJlYWQucmlnaHQuY29udGFpbmVyLnN0eWxlLm1hcmdpblJpZ2h0ID0gYCR7XG4gICAgICAgICAgICBsZWZ0V2lkdGggLSByaWdodFdpZHRoXG4gICAgICAgICAgfXB4YDtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgICBpZiAoc3ByZWFkLmxlZnQpIHtcbiAgICAgIHRoaXMuc2hvd1NpbmdsZVBhZ2Uoc3ByZWFkLmxlZnQpO1xuICAgICAgaWYgKCFzcHJlYWQucmlnaHQpIHtcbiAgICAgICAgc3ByZWFkLmxlZnQuY29udGFpbmVyLnNldEF0dHJpYnV0ZShcbiAgICAgICAgICBcImRhdGEtdml2bGlvc3R5bGUtdW5wYWlyZWQtcGFnZVwiLFxuICAgICAgICAgIHRydWUsXG4gICAgICAgICk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBzcHJlYWQubGVmdC5jb250YWluZXIucmVtb3ZlQXR0cmlidXRlKFwiZGF0YS12aXZsaW9zdHlsZS11bnBhaXJlZC1wYWdlXCIpO1xuICAgICAgfVxuICAgIH1cbiAgICBpZiAoc3ByZWFkLnJpZ2h0KSB7XG4gICAgICB0aGlzLnNob3dTaW5nbGVQYWdlKHNwcmVhZC5yaWdodCk7XG4gICAgICBpZiAoIXNwcmVhZC5sZWZ0KSB7XG4gICAgICAgIHNwcmVhZC5yaWdodC5jb250YWluZXIuc2V0QXR0cmlidXRlKFxuICAgICAgICAgIFwiZGF0YS12aXZsaW9zdHlsZS11bnBhaXJlZC1wYWdlXCIsXG4gICAgICAgICAgdHJ1ZSxcbiAgICAgICAgKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHNwcmVhZC5yaWdodC5jb250YWluZXIucmVtb3ZlQXR0cmlidXRlKFxuICAgICAgICAgIFwiZGF0YS12aXZsaW9zdHlsZS11bnBhaXJlZC1wYWdlXCIsXG4gICAgICAgICk7XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgcHJpdmF0ZSByZXBvcnRQb3NpdGlvbigpOiBUYXNrLlJlc3VsdDxib29sZWFuPiB7XG4gICAgY29uc3QgZnJhbWU6IFRhc2suRnJhbWU8Ym9vbGVhbj4gPSBUYXNrLm5ld0ZyYW1lKFwicmVwb3J0UG9zaXRpb25cIik7XG4gICAgQXNzZXJ0cy5hc3NlcnQodGhpcy5wYWdlUG9zaXRpb24pO1xuICAgIHRoaXMub3BmXG4gICAgICAuZ2V0Q0ZJKHRoaXMucGFnZVBvc2l0aW9uLnNwaW5lSW5kZXgsIHRoaXMucGFnZVBvc2l0aW9uLm9mZnNldEluSXRlbSlcbiAgICAgIC50aGVuKChjZmkpID0+IHtcbiAgICAgICAgY29uc3QgcGFnZSA9IHRoaXMuY3VycmVudFBhZ2U7XG4gICAgICAgIGNvbnN0IHIgPVxuICAgICAgICAgIHRoaXMud2FpdEZvckxvYWRpbmcgJiYgcGFnZS5mZXRjaGVycy5sZW5ndGggPiAwXG4gICAgICAgICAgICA/IFRhc2tVdGlsLndhaXRGb3JGZXRjaGVycyhwYWdlLmZldGNoZXJzKVxuICAgICAgICAgICAgOiBUYXNrLm5ld1Jlc3VsdCh0cnVlKTtcbiAgICAgICAgci50aGVuKCgpID0+IHtcbiAgICAgICAgICB0aGlzLnNlbmRMb2NhdGlvbk5vdGlmaWNhdGlvbihwYWdlLCBjZmkpLnRoZW5GaW5pc2goZnJhbWUpO1xuICAgICAgICB9KTtcbiAgICAgIH0pO1xuICAgIHJldHVybiBmcmFtZS5yZXN1bHQoKTtcbiAgfVxuXG4gIHByaXZhdGUgY3JlYXRlVmlld3BvcnQoKTogVmdlbi5WaWV3cG9ydCB7XG4gICAgY29uc3Qgdmlld3BvcnRFbGVtZW50ID0gdGhpcy52aWV3cG9ydEVsZW1lbnQ7XG4gICAgaWYgKHRoaXMudmlld3BvcnRTaXplKSB7XG4gICAgICBjb25zdCB2cyA9IHRoaXMudmlld3BvcnRTaXplO1xuICAgICAgdmlld3BvcnRFbGVtZW50LnN0eWxlLm1hcmdpbkxlZnQgPSBgJHt2cy5tYXJnaW5MZWZ0fXB4YDtcbiAgICAgIHZpZXdwb3J0RWxlbWVudC5zdHlsZS5tYXJnaW5SaWdodCA9IGAke3ZzLm1hcmdpblJpZ2h0fXB4YDtcbiAgICAgIHZpZXdwb3J0RWxlbWVudC5zdHlsZS5tYXJnaW5Ub3AgPSBgJHt2cy5tYXJnaW5Ub3B9cHhgO1xuICAgICAgdmlld3BvcnRFbGVtZW50LnN0eWxlLm1hcmdpbkJvdHRvbSA9IGAke3ZzLm1hcmdpbkJvdHRvbX1weGA7XG4gICAgICByZXR1cm4gbmV3IFZnZW4uVmlld3BvcnQoXG4gICAgICAgIHRoaXMud2luZG93LFxuICAgICAgICB0aGlzLmZvbnRTaXplLFxuICAgICAgICB2aWV3cG9ydEVsZW1lbnQsXG4gICAgICAgIHZzLndpZHRoLFxuICAgICAgICB2cy5oZWlnaHQsXG4gICAgICApO1xuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gbmV3IFZnZW4uVmlld3BvcnQodGhpcy53aW5kb3csIHRoaXMuZm9udFNpemUsIHZpZXdwb3J0RWxlbWVudCk7XG4gICAgfVxuICB9XG5cbiAgcHJpdmF0ZSByZXNvbHZlU3ByZWFkVmlldyh2aWV3cG9ydDogVmdlbi5WaWV3cG9ydCk6IGJvb2xlYW4ge1xuICAgIHN3aXRjaCAodGhpcy5wYWdlVmlld01vZGUpIHtcbiAgICAgIGNhc2UgUGFnZVZpZXdNb2RlLlNJTkdMRV9QQUdFOlxuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICBjYXNlIFBhZ2VWaWV3TW9kZS5TUFJFQUQ6XG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgY2FzZSBQYWdlVmlld01vZGUuQVVUT19TUFJFQUQ6XG4gICAgICBkZWZhdWx0OlxuICAgICAgICAvLyB3aWRlIGVub3VnaCBmb3IgYSBwYWlyIG9mIHBhZ2VzIG9mIEEvQiBwYXBlciBzaXplcywgYnV0IG5vdCB0b29cbiAgICAgICAgLy8gbmFycm93XG4gICAgICAgIHJldHVybiB2aWV3cG9ydC53aWR0aCAvIHZpZXdwb3J0LmhlaWdodCA+PSAxLjQ1ICYmIHZpZXdwb3J0LndpZHRoID4gODAwO1xuICAgIH1cbiAgfVxuXG4gIHByaXZhdGUgdXBkYXRlU3ByZWFkVmlldyhzcHJlYWRWaWV3OiBib29sZWFuKSB7XG4gICAgdGhpcy5wcmVmLnNwcmVhZFZpZXcgPSBzcHJlYWRWaWV3O1xuICAgIHRoaXMudmlld3BvcnRFbGVtZW50LnNldEF0dHJpYnV0ZShcbiAgICAgIFZJRVdQT1JUX1NQUkVBRF9WSUVXX0FUVFJJQlVURSxcbiAgICAgIHNwcmVhZFZpZXcudG9TdHJpbmcoKSxcbiAgICApO1xuICB9XG5cbiAgcHJpdmF0ZSBzaXplSXNHb29kKCk6IGJvb2xlYW4ge1xuICAgIGNvbnN0IHZpZXdwb3J0ID0gdGhpcy5jcmVhdGVWaWV3cG9ydCgpO1xuICAgIGNvbnN0IHNwcmVhZFZpZXcgPSB0aGlzLnJlc29sdmVTcHJlYWRWaWV3KHZpZXdwb3J0KTtcbiAgICBjb25zdCBzcHJlYWRWaWV3Q2hhbmdlZCA9IHRoaXMucHJlZi5zcHJlYWRWaWV3ICE9PSBzcHJlYWRWaWV3O1xuICAgIHRoaXMudXBkYXRlU3ByZWFkVmlldyhzcHJlYWRWaWV3KTtcbiAgICBpZiAoXG4gICAgICB0aGlzLnZpZXdwb3J0U2l6ZSB8fFxuICAgICAgIXRoaXMudmlld3BvcnQgfHxcbiAgICAgIHRoaXMudmlld3BvcnQuZm9udFNpemUgIT0gdGhpcy5mb250U2l6ZVxuICAgICkge1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgICBpZiAoXG4gICAgICAhc3ByZWFkVmlld0NoYW5nZWQgJiZcbiAgICAgIHZpZXdwb3J0LndpZHRoID09IHRoaXMudmlld3BvcnQud2lkdGggJiZcbiAgICAgIHZpZXdwb3J0LmhlaWdodCA9PSB0aGlzLnZpZXdwb3J0LmhlaWdodFxuICAgICkge1xuICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuXG4gICAgaWYgKFxuICAgICAgIXNwcmVhZFZpZXdDaGFuZ2VkICYmXG4gICAgICB2aWV3cG9ydC53aWR0aCA9PSB0aGlzLnZpZXdwb3J0LndpZHRoICYmXG4gICAgICB2aWV3cG9ydC5oZWlnaHQgIT0gdGhpcy52aWV3cG9ydC5oZWlnaHQgJiZcbiAgICAgIC9BbmRyb2lkfGlQaG9uZXxpUGFkfGlQb2QvLnRlc3QobmF2aWdhdG9yLnVzZXJBZ2VudClcbiAgICApIHtcbiAgICAgIC8vIE9uIG1vYmlsZSBicm93c2VycywgdGhlIHZpZXdwb3J0IGhlaWdodCBtYXkgY2hhbmdlIHVuZXhwZWN0ZWRseVxuICAgICAgLy8gd2hlbiBzb2Z0IGtleWJvYXJkIGFwcGVhcnMgb3IgdGFiL2FkZHJlc3MgYmFyIGF1dG8taGlkZSBvY2N1cnMsXG4gICAgICAvLyBzbyBpZ25vcmUgcmVzaXppbmcgaW4gdGhpcyBjb25kaXRpb24uXG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG5cbiAgICBpZiAoXG4gICAgICB0aGlzLm9wZlZpZXcgJiZcbiAgICAgIHRoaXMub3BmVmlldy5oYXNQYWdlcygpICYmXG4gICAgICAhdGhpcy5vcGZWaWV3Lmhhc0F1dG9TaXplZFBhZ2VzKClcbiAgICApIHtcbiAgICAgIHRoaXMudmlld3BvcnQud2lkdGggPSB2aWV3cG9ydC53aWR0aDtcbiAgICAgIHRoaXMudmlld3BvcnQuaGVpZ2h0ID0gdmlld3BvcnQuaGVpZ2h0O1xuICAgICAgdGhpcy5uZWVkUmVmcmVzaCA9IHRydWU7XG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG5cbiAgcHJpdmF0ZSBzZXRQYWdlU2l6ZShcbiAgICBwYWdlU2l6ZTogeyB3aWR0aDogbnVtYmVyOyBoZWlnaHQ6IG51bWJlciB9LFxuICAgIHBhZ2VTaGVldFNpemU6IHsgW2tleTogc3RyaW5nXTogeyB3aWR0aDogbnVtYmVyOyBoZWlnaHQ6IG51bWJlciB9IH0sXG4gICAgc3BpbmVJbmRleDogbnVtYmVyLFxuICAgIHBhZ2VJbmRleDogbnVtYmVyLFxuICApIHtcbiAgICB0aGlzLnBhZ2VTaXplc1twYWdlSW5kZXhdID0gcGFnZVNpemU7XG4gICAgdGhpcy5zZXRQYWdlU2l6ZVBhZ2VSdWxlcyhwYWdlU2hlZXRTaXplLCBzcGluZUluZGV4LCBwYWdlSW5kZXgpO1xuICB9XG5cbiAgcHJpdmF0ZSBzZXRQYWdlU2l6ZVBhZ2VSdWxlcyhcbiAgICBwYWdlU2hlZXRTaXplOiB7IFtrZXk6IHN0cmluZ106IHsgd2lkdGg6IG51bWJlcjsgaGVpZ2h0OiBudW1iZXIgfSB9LFxuICAgIHNwaW5lSW5kZXg6IG51bWJlcixcbiAgICBwYWdlSW5kZXg6IG51bWJlcixcbiAgKSB7XG4gICAgaWYgKCF0aGlzLnBhZ2VTaGVldFNpemVBbHJlYWR5U2V0ICYmIHRoaXMucGFnZVJ1bGVTdHlsZUVsZW1lbnQpIHtcbiAgICAgIGxldCBzdHlsZVRleHQgPSBcIlwiO1xuICAgICAgT2JqZWN0LmtleXMocGFnZVNoZWV0U2l6ZSkuZm9yRWFjaCgoc2VsZWN0b3IpID0+IHtcbiAgICAgICAgc3R5bGVUZXh0ICs9IGBAcGFnZSAke3NlbGVjdG9yfXttYXJnaW46MDtzaXplOmA7XG4gICAgICAgIGNvbnN0IHNpemUgPSBwYWdlU2hlZXRTaXplW3NlbGVjdG9yXTtcbiAgICAgICAgc3R5bGVUZXh0ICs9IGAke3NpemUud2lkdGh9cHggJHtzaXplLmhlaWdodH1weDt9YDtcbiAgICAgIH0pO1xuICAgICAgdGhpcy5wYWdlUnVsZVN0eWxlRWxlbWVudC50ZXh0Q29udGVudCA9IHN0eWxlVGV4dDtcbiAgICAgIHRoaXMucGFnZVNoZWV0U2l6ZUFscmVhZHlTZXQgPSB0cnVlO1xuICAgIH1cbiAgfVxuXG4gIHJlbW92ZVBhZ2VTaXplUGFnZVJ1bGVzKCkge1xuICAgIGlmICh0aGlzLnBhZ2VSdWxlU3R5bGVFbGVtZW50KSB7XG4gICAgICB0aGlzLnBhZ2VSdWxlU3R5bGVFbGVtZW50LnRleHRDb250ZW50ID0gXCJcIjtcbiAgICAgIHRoaXMucGFnZVNoZWV0U2l6ZUFscmVhZHlTZXQgPSBmYWxzZTtcbiAgICB9XG4gIH1cblxuICBwcml2YXRlIHJlc2V0KCk6IHZvaWQge1xuICAgIGxldCB0b2NWaXNpYmxlID0gZmFsc2U7XG4gICAgbGV0IHRvY0F1dG9oaWRlID0gZmFsc2U7XG4gICAgaWYgKHRoaXMub3BmVmlldykge1xuICAgICAgdG9jVmlzaWJsZSA9IHRoaXMub3BmVmlldy5pc1RPQ1Zpc2libGUoKTtcbiAgICAgIHRvY0F1dG9oaWRlID0gdGhpcy5vcGZWaWV3LnRvY0F1dG9oaWRlO1xuICAgICAgdGhpcy5vcGZWaWV3LmhpZGVUT0MoKTtcbiAgICAgIHRoaXMub3BmVmlldy5yZW1vdmVSZW5kZXJlZFBhZ2VzKCk7XG4gICAgfVxuICAgIHRoaXMucmVtb3ZlUGFnZVNpemVQYWdlUnVsZXMoKTtcbiAgICB0aGlzLnZpZXdwb3J0ID0gdGhpcy5jcmVhdGVWaWV3cG9ydCgpO1xuICAgIHRoaXMudmlld3BvcnQucmVzZXRab29tKCk7XG4gICAgdGhpcy5vcGZWaWV3ID0gbmV3IEVwdWIuT1BGVmlldyhcbiAgICAgIHRoaXMub3BmLFxuICAgICAgdGhpcy52aWV3cG9ydCxcbiAgICAgIHRoaXMuZm9udE1hcHBlcixcbiAgICAgIHRoaXMucHJlZixcbiAgICAgIHRoaXMuc2V0UGFnZVNpemUuYmluZCh0aGlzKSxcbiAgICApO1xuICAgIGlmICh0b2NWaXNpYmxlKSB7XG4gICAgICB0aGlzLnNlbmRDb21tYW5kKHsgYTogXCJ0b2NcIiwgdjogXCJzaG93XCIsIGF1dG9oaWRlOiB0b2NBdXRvaGlkZSB9KTtcbiAgICB9XG4gIH1cblxuICAvKipcbiAgICogU2hvdyBjdXJyZW50IHBhZ2Ugb3Igc3ByZWFkIGRlcGVuZGluZyBvbiB0aGUgc2V0dGluZ1xuICAgKiAodGhpcy5wcmVmLnNwcmVhZFZpZXcpLlxuICAgKiBAcGFyYW0gc3luYyBJZiB0cnVlLCBnZXQgdGhlIG5lY2Vzc2FyeSBwYWdlIHN5bmNocm9ub3VzbHkgKG5vdCB3YWl0aW5nXG4gICAqICAgICBhbm90aGVyIHJlbmRlcmluZyB0YXNrKVxuICAgKi9cbiAgcHJpdmF0ZSBzaG93Q3VycmVudChwYWdlOiBWdHJlZS5QYWdlLCBzeW5jPzogYm9vbGVhbik6IFRhc2suUmVzdWx0PG51bGw+IHtcbiAgICB0aGlzLm5lZWRSZWZyZXNoID0gZmFsc2U7XG4gICAgdGhpcy5yZW1vdmVQYWdlTGlzdGVuZXJzKCk7XG4gICAgaWYgKHRoaXMucHJlZi5zcHJlYWRWaWV3KSB7XG4gICAgICByZXR1cm4gdGhpcy5vcGZWaWV3XG4gICAgICAgIC5nZXRTcHJlYWQodGhpcy5wYWdlUG9zaXRpb24sIHN5bmMpXG4gICAgICAgIC50aGVuQXN5bmMoKHNwcmVhZCkgPT4ge1xuICAgICAgICAgIHRoaXMuc2hvd1NwcmVhZChzcHJlYWQpO1xuICAgICAgICAgIHRoaXMuc2V0U3ByZWFkWm9vbShzcHJlYWQpO1xuICAgICAgICAgIHRoaXMuY3VycmVudFBhZ2UgPSBwYWdlO1xuICAgICAgICAgIHJldHVybiBUYXNrLm5ld1Jlc3VsdChudWxsKTtcbiAgICAgICAgfSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHRoaXMuc2hvd1BhZ2UocGFnZSk7XG4gICAgICB0aGlzLnNldFBhZ2Vab29tKHBhZ2UpO1xuICAgICAgdGhpcy5jdXJyZW50UGFnZSA9IHBhZ2U7XG4gICAgICByZXR1cm4gVGFzay5uZXdSZXN1bHQobnVsbCk7XG4gICAgfVxuICB9XG5cbiAgc2V0UGFnZVpvb20ocGFnZTogVnRyZWUuUGFnZSkge1xuICAgIGNvbnN0IHpvb20gPSB0aGlzLmdldEFkanVzdGVkWm9vbUZhY3RvcihwYWdlLmRpbWVuc2lvbnMpO1xuICAgIHRoaXMudmlld3BvcnQuem9vbShwYWdlLmRpbWVuc2lvbnMud2lkdGgsIHBhZ2UuZGltZW5zaW9ucy5oZWlnaHQsIHpvb20pO1xuICB9XG5cbiAgc2V0U3ByZWFkWm9vbShzcHJlYWQ6IFZ0cmVlLlNwcmVhZCkge1xuICAgIGNvbnN0IGRpbSA9IHRoaXMuZ2V0U3ByZWFkRGltZW5zaW9ucyhzcHJlYWQpO1xuICAgIHRoaXMudmlld3BvcnQuem9vbShkaW0ud2lkdGgsIGRpbS5oZWlnaHQsIHRoaXMuZ2V0QWRqdXN0ZWRab29tRmFjdG9yKGRpbSkpO1xuICB9XG5cbiAgLyoqXG4gICAqIEByZXR1cm5zIGFkanVzdGVkIHpvb20gZmFjdG9yXG4gICAqL1xuICBnZXRBZGp1c3RlZFpvb21GYWN0b3IocGFnZURpbWVuc2lvbjoge1xuICAgIHdpZHRoOiBudW1iZXI7XG4gICAgaGVpZ2h0OiBudW1iZXI7XG4gIH0pOiBudW1iZXIge1xuICAgIHJldHVybiB0aGlzLmZpdFRvU2NyZWVuXG4gICAgICA/IHRoaXMuY2FsY3VsYXRlWm9vbUZhY3RvclRvRml0SW5zaWRlVmlld1BvcnQocGFnZURpbWVuc2lvbilcbiAgICAgIDogdGhpcy56b29tO1xuICB9XG5cbiAgLyoqXG4gICAqIFJldHVybnMgd2lkdGggYW5kIGhlaWdodCBvZiB0aGUgc3ByZWFkLCBpbmNsdWRpbmcgdGhlIG1hcmdpbiBiZXR3ZWVuIHBhZ2VzLlxuICAgKi9cbiAgZ2V0U3ByZWFkRGltZW5zaW9ucyhzcHJlYWQ6IFZ0cmVlLlNwcmVhZCk6IHsgd2lkdGg6IG51bWJlcjsgaGVpZ2h0OiBudW1iZXIgfSB7XG4gICAgbGV0IHdpZHRoID0gMDtcbiAgICBsZXQgaGVpZ2h0ID0gMDtcbiAgICBpZiAoc3ByZWFkLmxlZnQpIHtcbiAgICAgIHdpZHRoICs9IHNwcmVhZC5sZWZ0LmRpbWVuc2lvbnMud2lkdGg7XG4gICAgICBoZWlnaHQgPSBzcHJlYWQubGVmdC5kaW1lbnNpb25zLmhlaWdodDtcbiAgICB9XG4gICAgaWYgKHNwcmVhZC5yaWdodCkge1xuICAgICAgd2lkdGggKz0gc3ByZWFkLnJpZ2h0LmRpbWVuc2lvbnMud2lkdGg7XG4gICAgICBoZWlnaHQgPSBNYXRoLm1heChoZWlnaHQsIHNwcmVhZC5yaWdodC5kaW1lbnNpb25zLmhlaWdodCk7XG4gICAgfVxuICAgIGlmIChzcHJlYWQubGVmdCAmJiBzcHJlYWQucmlnaHQpIHtcbiAgICAgIHdpZHRoICs9IHRoaXMucHJlZi5wYWdlQm9yZGVyICogMjtcbiAgICAgIC8vIEFkanVzdCBzcHJlYWQgaG9yaXpvbnRhbCBhbGlnbm1lbnQgd2hlbiBsZWZ0L3JpZ2h0IHBhZ2Ugd2lkdGhzIGRpZmZlclxuICAgICAgd2lkdGggKz0gTWF0aC5hYnMoXG4gICAgICAgIHNwcmVhZC5sZWZ0LmRpbWVuc2lvbnMud2lkdGggLSBzcHJlYWQucmlnaHQuZGltZW5zaW9ucy53aWR0aCxcbiAgICAgICk7XG4gICAgfVxuICAgIHJldHVybiB7IHdpZHRoLCBoZWlnaHQgfTtcbiAgfVxuXG4gIC8qKlxuICAgKiBSZXR1cm5zIHpvb20gZmFjdG9yIGNvcnJlc3BvbmRpbmcgdG8gdGhlIHNwZWNpZmllZCB6b29tIHR5cGUuXG4gICAqL1xuICBxdWVyeVpvb21GYWN0b3IodHlwZTogWm9vbVR5cGUpOiBudW1iZXIge1xuICAgIGlmICghdGhpcy5jdXJyZW50UGFnZSkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKFwibm8gcGFnZSBleGlzdHMuXCIpO1xuICAgIH1cbiAgICBzd2l0Y2ggKHR5cGUpIHtcbiAgICAgIGNhc2UgWm9vbVR5cGUuRklUX0lOU0lERV9WSUVXUE9SVDoge1xuICAgICAgICBsZXQgcGFnZURpbTogeyB3aWR0aDogbnVtYmVyOyBoZWlnaHQ6IG51bWJlciB9O1xuICAgICAgICBpZiAodGhpcy5wcmVmLnNwcmVhZFZpZXcpIHtcbiAgICAgICAgICBBc3NlcnRzLmFzc2VydCh0aGlzLmN1cnJlbnRTcHJlYWQpO1xuICAgICAgICAgIHBhZ2VEaW0gPSB0aGlzLmdldFNwcmVhZERpbWVuc2lvbnModGhpcy5jdXJyZW50U3ByZWFkKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBwYWdlRGltID0gdGhpcy5jdXJyZW50UGFnZS5kaW1lbnNpb25zO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB0aGlzLmNhbGN1bGF0ZVpvb21GYWN0b3JUb0ZpdEluc2lkZVZpZXdQb3J0KHBhZ2VEaW0pO1xuICAgICAgfVxuICAgICAgZGVmYXVsdDpcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKGB1bmtub3duIHpvb20gdHlwZTogJHt0eXBlfWApO1xuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAgKiBAcmV0dXJucyB6b29tIGZhY3RvciB0byBmaXQgaW5zaWRlIHZpZXdwb3J0XG4gICAqL1xuICBjYWxjdWxhdGVab29tRmFjdG9yVG9GaXRJbnNpZGVWaWV3UG9ydChwYWdlRGltZW5zaW9uOiB7XG4gICAgd2lkdGg6IG51bWJlcjtcbiAgICBoZWlnaHQ6IG51bWJlcjtcbiAgfSk6IG51bWJlciB7XG4gICAgY29uc3Qgd2lkdGhab29tID0gdGhpcy52aWV3cG9ydC53aWR0aCAvIHBhZ2VEaW1lbnNpb24ud2lkdGg7XG4gICAgY29uc3QgaGVpZ2h0Wm9vbSA9IHRoaXMudmlld3BvcnQuaGVpZ2h0IC8gcGFnZURpbWVuc2lvbi5oZWlnaHQ7XG4gICAgcmV0dXJuIE1hdGgubWluKHdpZHRoWm9vbSwgaGVpZ2h0Wm9vbSk7XG4gIH1cblxuICBwcml2YXRlIGNhbmNlbFJlbmRlcmluZ1Rhc2soKSB7XG4gICAgaWYgKHRoaXMucmVuZGVyVGFzaykge1xuICAgICAgdGhpcy5yZW5kZXJUYXNrLmludGVycnVwdChuZXcgUmVuZGVyaW5nQ2FuY2VsZWRFcnJvcigpKTtcbiAgICB9XG4gICAgdGhpcy5yZW5kZXJUYXNrID0gbnVsbDtcbiAgfVxuXG4gIHJlc2l6ZSgpOiBUYXNrLlJlc3VsdDxib29sZWFuPiB7XG4gICAgdGhpcy5uZWVkUmVzaXplID0gZmFsc2U7XG4gICAgdGhpcy5uZWVkUmVmcmVzaCA9IGZhbHNlO1xuICAgIGlmICh0aGlzLnNpemVJc0dvb2QoKSkge1xuICAgICAgcmV0dXJuIFRhc2submV3UmVzdWx0KHRydWUpO1xuICAgIH1cbiAgICB0aGlzLnNldFJlYWR5U3RhdGUoQ29uc3RhbnRzLlJlYWR5U3RhdGUuTE9BRElORyk7XG4gICAgdGhpcy5jYW5jZWxSZW5kZXJpbmdUYXNrKCk7XG4gICAgY29uc3QgcmVzaXplVGFzayA9IFRhc2suY3VycmVudFRhc2soKVxuICAgICAgLmdldFNjaGVkdWxlcigpXG4gICAgICAucnVuKCgpID0+XG4gICAgICAgIFRhc2suaGFuZGxlKFxuICAgICAgICAgIFwicmVzaXplXCIsXG4gICAgICAgICAgKGZyYW1lKSA9PiB7XG4gICAgICAgICAgICBpZiAoIXRoaXMub3BmKSB7XG4gICAgICAgICAgICAgIGZyYW1lLmZpbmlzaChmYWxzZSk7XG4gICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHRoaXMucmVuZGVyVGFzayA9IHJlc2l6ZVRhc2s7XG4gICAgICAgICAgICBQcm9maWxlLnByb2ZpbGVyLnJlZ2lzdGVyU3RhcnRUaW1pbmcoXCJyZW5kZXIgKHJlc2l6ZSlcIik7XG4gICAgICAgICAgICB0aGlzLnJlc2V0KCk7XG4gICAgICAgICAgICBpZiAodGhpcy5wYWdlUG9zaXRpb24pIHtcbiAgICAgICAgICAgICAgLy8gV2hlbiByZXNpemluZywgZG8gbm90IHVzZSB0aGUgY3VycmVudCBwYWdlIGluZGV4LCBmb3IgYSBwYWdlXG4gICAgICAgICAgICAgIC8vIGluZGV4IGNvcnJlc3BvbmRpbmcgdG8gdGhlIGN1cnJlbnQgcG9zaXRpb24gaW4gdGhlIGRvY3VtZW50XG4gICAgICAgICAgICAgIC8vIChvZmZzZXRJbkl0ZW0pIGNhbiBjaGFuZ2UgZHVlIHRvIGRpZmZlcmVudCBsYXlvdXQgY2F1c2VkIGJ5XG4gICAgICAgICAgICAgIC8vIGRpZmZlcmVudCB2aWV3cG9ydCBzaXplLlxuXG4gICAgICAgICAgICAgIC8vIFVwZGF0ZSgyMDE5LTAzKTogdG8gYXZvaWQgdW5leHBlY3RlZCBwYWdlIG1vdmUgKGZpcnN0IHBhZ2UgdG8gbmV4dCksXG4gICAgICAgICAgICAgIC8vIGtlZXAgcGFnZUluZGV4ID09IDAgd2hlbiBvZmZzZXRJbkl0ZW0gPT0gMFxuICAgICAgICAgICAgICBpZiAoXG4gICAgICAgICAgICAgICAgIShcbiAgICAgICAgICAgICAgICAgIHRoaXMucGFnZVBvc2l0aW9uLnBhZ2VJbmRleCA9PSAwICYmXG4gICAgICAgICAgICAgICAgICB0aGlzLnBhZ2VQb3NpdGlvbi5vZmZzZXRJbkl0ZW0gPT0gMFxuICAgICAgICAgICAgICAgIClcbiAgICAgICAgICAgICAgKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5wYWdlUG9zaXRpb24ucGFnZUluZGV4ID0gLTE7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgLy8gZXBhZ2VDb3VudCBjb3VudGluZyBkZXBlbmRzIHJlbmRlckFsbFBhZ2VzIG1vZGVcbiAgICAgICAgICAgIHRoaXMub3BmLnNldEVQYWdlQ291bnRNb2RlKHRoaXMucmVuZGVyQWxsUGFnZXMpO1xuXG4gICAgICAgICAgICAvLyBXaXRoIHJlbmRlckFsbFBhZ2VzIG9wdGlvbiBzcGVjaWZpZWQsIHRoZSByZW5kZXJpbmcgaXNcbiAgICAgICAgICAgIC8vIHBlcmZvcm1lZCBhZnRlciB0aGUgaW5pdGlhbCBwYWdlIGRpc3BsYXksIG90aGVyd2lzZSB1c2VycyBhcmVcbiAgICAgICAgICAgIC8vIGZvcmNlZCB0byB3YWl0IHRoZSByZW5kZXJpbmcgZmluaXNoIGluIGZyb250IG9mIGEgYmxhbmsgcGFnZS5cbiAgICAgICAgICAgIHRoaXMub3BmVmlld1xuICAgICAgICAgICAgICAucmVuZGVyUGFnZXNVcHRvKHRoaXMucGFnZVBvc2l0aW9uLCAhdGhpcy5yZW5kZXJBbGxQYWdlcylcbiAgICAgICAgICAgICAgLnRoZW4oKHJlc3VsdCkgPT4ge1xuICAgICAgICAgICAgICAgIGlmICghcmVzdWx0KSB7XG4gICAgICAgICAgICAgICAgICBmcmFtZS5maW5pc2goZmFsc2UpO1xuICAgICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB0aGlzLnBhZ2VQb3NpdGlvbiA9IHJlc3VsdC5wb3NpdGlvbjtcbiAgICAgICAgICAgICAgICB0aGlzLnNob3dDdXJyZW50KHJlc3VsdC5wYWdlLCB0cnVlKS50aGVuKCgpID0+IHtcbiAgICAgICAgICAgICAgICAgIHRoaXMuc2V0UmVhZHlTdGF0ZShDb25zdGFudHMuUmVhZHlTdGF0ZS5JTlRFUkFDVElWRSk7XG5cbiAgICAgICAgICAgICAgICAgIHRoaXMub3BmXG4gICAgICAgICAgICAgICAgICAgIC5jb3VudEVQYWdlcygoZXBhZ2VDb3VudCkgPT4ge1xuICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IG5vdGlmaWNhdGlvbiA9IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHQ6IFwibmF2XCIsXG4gICAgICAgICAgICAgICAgICAgICAgICBlcGFnZUNvdW50OiBlcGFnZUNvdW50LFxuICAgICAgICAgICAgICAgICAgICAgICAgZmlyc3Q6IHRoaXMuY3VycmVudFBhZ2UuaXNGaXJzdFBhZ2UsXG4gICAgICAgICAgICAgICAgICAgICAgICBsYXN0OiB0aGlzLmN1cnJlbnRQYWdlLmlzTGFzdFBhZ2UsXG4gICAgICAgICAgICAgICAgICAgICAgICBtZXRhZGF0YTogdGhpcy5vcGYubWV0YWRhdGEsXG4gICAgICAgICAgICAgICAgICAgICAgICBkb2NUaXRsZTogdGhpcy5vcGYuc3BpbmVbdGhpcy5wYWdlUG9zaXRpb24uc3BpbmVJbmRleF1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgLnRpdGxlLFxuICAgICAgICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgICAgICAgICAgaWYgKFxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5jdXJyZW50UGFnZS5pc0ZpcnN0UGFnZSB8fFxuICAgICAgICAgICAgICAgICAgICAgICAgKHRoaXMucGFnZVBvc2l0aW9uLnBhZ2VJbmRleCA9PSAwICYmXG4gICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMub3BmLnNwaW5lW3RoaXMucGFnZVBvc2l0aW9uLnNwaW5lSW5kZXhdLmVwYWdlKVxuICAgICAgICAgICAgICAgICAgICAgICkge1xuICAgICAgICAgICAgICAgICAgICAgICAgbm90aWZpY2F0aW9uW1wiZXBhZ2VcIl0gPSB0aGlzLm9wZi5zcGluZVtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5wYWdlUG9zaXRpb24uc3BpbmVJbmRleFxuICAgICAgICAgICAgICAgICAgICAgICAgXS5lcGFnZTtcbiAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgdGhpcy5jYWxsYmFjayhub3RpZmljYXRpb24pO1xuICAgICAgICAgICAgICAgICAgICB9KVxuICAgICAgICAgICAgICAgICAgICAudGhlbigoKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgICAgdGhpcy5yZXBvcnRQb3NpdGlvbigpLnRoZW4oKHApID0+IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IHIgPSB0aGlzLnJlbmRlckFsbFBhZ2VzXG4gICAgICAgICAgICAgICAgICAgICAgICAgID8gdGhpcy5vcGZWaWV3LnJlbmRlckFsbFBhZ2VzKClcbiAgICAgICAgICAgICAgICAgICAgICAgICAgOiBUYXNrLm5ld1Jlc3VsdChudWxsKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHIudGhlbigoKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgIGlmICh0aGlzLnJlbmRlclRhc2sgPT09IHJlc2l6ZVRhc2spIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnJlbmRlclRhc2sgPSBudWxsO1xuICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgIFByb2ZpbGUucHJvZmlsZXIucmVnaXN0ZXJFbmRUaW1pbmcoXCJyZW5kZXIgKHJlc2l6ZSlcIik7XG4gICAgICAgICAgICAgICAgICAgICAgICAgIGlmICh0aGlzLnJlbmRlckFsbFBhZ2VzKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5zZXRSZWFkeVN0YXRlKENvbnN0YW50cy5SZWFkeVN0YXRlLkNPTVBMRVRFKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmNhbGxiYWNrKHsgdDogXCJsb2FkZWRcIiB9KTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgZnJhbWUuZmluaXNoKHApO1xuICAgICAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICB9LFxuICAgICAgICAgIChmcmFtZSwgZXJyKSA9PiB7XG4gICAgICAgICAgICBpZiAoZXJyIGluc3RhbmNlb2YgUmVuZGVyaW5nQ2FuY2VsZWRFcnJvcikge1xuICAgICAgICAgICAgICBQcm9maWxlLnByb2ZpbGVyLnJlZ2lzdGVyRW5kVGltaW5nKFwicmVuZGVyIChyZXNpemUpXCIpO1xuICAgICAgICAgICAgICBMb2dnaW5nLmxvZ2dlci5kZWJ1ZyhlcnIubWVzc2FnZSk7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICB0aHJvdyBlcnI7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSxcbiAgICAgICAgKSxcbiAgICAgICk7XG4gICAgcmV0dXJuIFRhc2submV3UmVzdWx0KHRydWUpO1xuICB9XG5cbiAgcHJpdmF0ZSBzZW5kTG9jYXRpb25Ob3RpZmljYXRpb24oXG4gICAgcGFnZTogVnRyZWUuUGFnZSxcbiAgICBjZmk6IHN0cmluZyB8IG51bGwsXG4gICk6IFRhc2suUmVzdWx0PGJvb2xlYW4+IHtcbiAgICBjb25zdCBmcmFtZTogVGFzay5GcmFtZTxib29sZWFuPiA9IFRhc2submV3RnJhbWUoXG4gICAgICBcInNlbmRMb2NhdGlvbk5vdGlmaWNhdGlvblwiLFxuICAgICk7XG4gICAgY29uc3Qgbm90aWZpY2F0aW9uID0ge1xuICAgICAgdDogXCJuYXZcIixcbiAgICAgIGZpcnN0OiBwYWdlLmlzRmlyc3RQYWdlLFxuICAgICAgbGFzdDogcGFnZS5pc0xhc3RQYWdlLFxuICAgICAgbWV0YWRhdGE6IHRoaXMub3BmLm1ldGFkYXRhLFxuICAgICAgZG9jVGl0bGU6IHRoaXMub3BmLnNwaW5lW3BhZ2Uuc3BpbmVJbmRleF0udGl0bGUsXG4gICAgfTtcbiAgICB0aGlzLm9wZlxuICAgICAgLmdldEVQYWdlRnJvbVBvc2l0aW9uKHRoaXMucGFnZVBvc2l0aW9uIGFzIEVwdWIuUG9zaXRpb24pXG4gICAgICAudGhlbigoZXBhZ2UpID0+IHtcbiAgICAgICAgbm90aWZpY2F0aW9uW1wiZXBhZ2VcIl0gPSBlcGFnZTtcbiAgICAgICAgbm90aWZpY2F0aW9uW1wiZXBhZ2VDb3VudFwiXSA9IHRoaXMub3BmLmVwYWdlQ291bnQ7XG4gICAgICAgIGlmIChjZmkpIHtcbiAgICAgICAgICBub3RpZmljYXRpb25bXCJjZmlcIl0gPSBjZmk7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5jYWxsYmFjayhub3RpZmljYXRpb24pO1xuICAgICAgICBmcmFtZS5maW5pc2godHJ1ZSk7XG4gICAgICB9KTtcbiAgICByZXR1cm4gZnJhbWUucmVzdWx0KCk7XG4gIH1cblxuICBnZXRDdXJyZW50UGFnZVByb2dyZXNzaW9uKCk6IENvbnN0YW50cy5QYWdlUHJvZ3Jlc3Npb24gfCBudWxsIHtcbiAgICByZXR1cm4gdGhpcy5vcGZWaWV3XG4gICAgICA/IHRoaXMub3BmVmlldy5nZXRDdXJyZW50UGFnZVByb2dyZXNzaW9uKHRoaXMucGFnZVBvc2l0aW9uKVxuICAgICAgOiBudWxsO1xuICB9XG5cbiAgbW92ZVRvKGNvbW1hbmQ6IEJhc2UuSlNPTik6IFRhc2suUmVzdWx0PGJvb2xlYW4+IHtcbiAgICBsZXQgbWV0aG9kOiAoKSA9PiBUYXNrLlJlc3VsdDxFcHViLlBhZ2VBbmRQb3NpdGlvbj47XG4gICAgaWYgKFxuICAgICAgdGhpcy5yZWFkeVN0YXRlICE9PSBDb25zdGFudHMuUmVhZHlTdGF0ZS5DT01QTEVURSAmJlxuICAgICAgY29tbWFuZFtcIndoZXJlXCJdICE9PSBcIm5leHRcIlxuICAgICkge1xuICAgICAgdGhpcy5zZXRSZWFkeVN0YXRlKENvbnN0YW50cy5SZWFkeVN0YXRlLkxPQURJTkcpO1xuICAgIH1cbiAgICBpZiAodHlwZW9mIGNvbW1hbmRbXCJ3aGVyZVwiXSA9PSBcInN0cmluZ1wiKSB7XG4gICAgICBsZXQgbTogKFxuICAgICAgICBwb3NpdGlvbjogRXB1Yi5Qb3NpdGlvbixcbiAgICAgICAgc3luYzogYm9vbGVhbixcbiAgICAgICkgPT4gVGFzay5SZXN1bHQ8RXB1Yi5QYWdlQW5kUG9zaXRpb24+O1xuICAgICAgc3dpdGNoIChjb21tYW5kW1wid2hlcmVcIl0pIHtcbiAgICAgICAgY2FzZSBcIm5leHRcIjpcbiAgICAgICAgICBtID0gdGhpcy5wcmVmLnNwcmVhZFZpZXdcbiAgICAgICAgICAgID8gdGhpcy5vcGZWaWV3Lm5leHRTcHJlYWRcbiAgICAgICAgICAgIDogdGhpcy5vcGZWaWV3Lm5leHRQYWdlO1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICBjYXNlIFwicHJldmlvdXNcIjpcbiAgICAgICAgICBtID0gdGhpcy5wcmVmLnNwcmVhZFZpZXdcbiAgICAgICAgICAgID8gdGhpcy5vcGZWaWV3LnByZXZpb3VzU3ByZWFkXG4gICAgICAgICAgICA6IHRoaXMub3BmVmlldy5wcmV2aW91c1BhZ2U7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIGNhc2UgXCJsYXN0XCI6XG4gICAgICAgICAgbSA9IHRoaXMub3BmVmlldy5sYXN0UGFnZTtcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgY2FzZSBcImZpcnN0XCI6XG4gICAgICAgICAgbSA9IHRoaXMub3BmVmlldy5maXJzdFBhZ2U7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgcmV0dXJuIFRhc2submV3UmVzdWx0KHRydWUpO1xuICAgICAgfVxuICAgICAgaWYgKG0pIHtcbiAgICAgICAgbWV0aG9kID0gKCkgPT5cbiAgICAgICAgICBtLmNhbGwodGhpcy5vcGZWaWV3LCB0aGlzLnBhZ2VQb3NpdGlvbiwgIXRoaXMucmVuZGVyQWxsUGFnZXMpO1xuICAgICAgfVxuICAgIH0gZWxzZSBpZiAodHlwZW9mIGNvbW1hbmRbXCJlcGFnZVwiXSA9PSBcIm51bWJlclwiKSB7XG4gICAgICBjb25zdCBlcGFnZSA9IGNvbW1hbmRbXCJlcGFnZVwiXSBhcyBudW1iZXI7XG4gICAgICBtZXRob2QgPSAoKSA9PlxuICAgICAgICB0aGlzLm9wZlZpZXcubmF2aWdhdGVUb0VQYWdlKFxuICAgICAgICAgIGVwYWdlLFxuICAgICAgICAgIHRoaXMucGFnZVBvc2l0aW9uLFxuICAgICAgICAgICF0aGlzLnJlbmRlckFsbFBhZ2VzLFxuICAgICAgICApO1xuICAgIH0gZWxzZSBpZiAodHlwZW9mIGNvbW1hbmRbXCJ1cmxcIl0gPT0gXCJzdHJpbmdcIikge1xuICAgICAgY29uc3QgdXJsID0gY29tbWFuZFtcInVybFwiXSBhcyBzdHJpbmc7XG4gICAgICBtZXRob2QgPSAoKSA9PlxuICAgICAgICB0aGlzLm9wZlZpZXcubmF2aWdhdGVUbyh1cmwsIHRoaXMucGFnZVBvc2l0aW9uLCAhdGhpcy5yZW5kZXJBbGxQYWdlcyk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiBUYXNrLm5ld1Jlc3VsdCh0cnVlKTtcbiAgICB9XG4gICAgY29uc3QgZnJhbWU6IFRhc2suRnJhbWU8Ym9vbGVhbj4gPSBUYXNrLm5ld0ZyYW1lKFwibW92ZVRvXCIpO1xuICAgIG1ldGhvZC5jYWxsKHRoaXMub3BmVmlldykudGhlbigocmVzdWx0KSA9PiB7XG4gICAgICBsZXQgY29udDogVGFzay5SZXN1bHQ8Ym9vbGVhbj47XG4gICAgICBpZiAocmVzdWx0KSB7XG4gICAgICAgIHRoaXMucGFnZVBvc2l0aW9uID0gcmVzdWx0LnBvc2l0aW9uO1xuICAgICAgICBjb25zdCBpbm5lckZyYW1lOiBUYXNrLkZyYW1lPGJvb2xlYW4+ID0gVGFzay5uZXdGcmFtZShcbiAgICAgICAgICBcIm1vdmVUby5zaG93Q3VycmVudFwiLFxuICAgICAgICApO1xuICAgICAgICBjb250ID0gaW5uZXJGcmFtZS5yZXN1bHQoKTtcbiAgICAgICAgdGhpcy5zaG93Q3VycmVudChyZXN1bHQucGFnZSwgIXRoaXMucmVuZGVyQWxsUGFnZXMpLnRoZW4oKCkgPT4ge1xuICAgICAgICAgIHRoaXMucmVwb3J0UG9zaXRpb24oKS50aGVuRmluaXNoKGlubmVyRnJhbWUpO1xuICAgICAgICB9KTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGNvbnQgPSBUYXNrLm5ld1Jlc3VsdCh0cnVlKTtcbiAgICAgIH1cbiAgICAgIGNvbnQudGhlbigocmVzKSA9PiB7XG4gICAgICAgIGlmICh0aGlzLnJlYWR5U3RhdGUgPT09IENvbnN0YW50cy5SZWFkeVN0YXRlLkxPQURJTkcpIHtcbiAgICAgICAgICB0aGlzLnNldFJlYWR5U3RhdGUoQ29uc3RhbnRzLlJlYWR5U3RhdGUuSU5URVJBQ1RJVkUpO1xuICAgICAgICB9XG4gICAgICAgIGZyYW1lLmZpbmlzaChyZXMpO1xuICAgICAgfSk7XG4gICAgfSk7XG4gICAgcmV0dXJuIGZyYW1lLnJlc3VsdCgpO1xuICB9XG5cbiAgc2hvd1RPQyhjb21tYW5kOiBCYXNlLkpTT04pOiBUYXNrLlJlc3VsdDxib29sZWFuPiB7XG4gICAgY29uc3QgYXV0b2hpZGUgPSAhIWNvbW1hbmRbXCJhdXRvaGlkZVwiXTtcbiAgICBjb25zdCB2aXNpYmlsaXR5ID0gY29tbWFuZFtcInZcIl07XG4gICAgY29uc3QgY3VycmVudFZpc2liaWxpdHkgPSB0aGlzLm9wZlZpZXcuaXNUT0NWaXNpYmxlKCk7XG4gICAgY29uc3QgY2hhbmdlQXV0b2hpZGUgPVxuICAgICAgYXV0b2hpZGUgIT0gdGhpcy5vcGZWaWV3LnRvY0F1dG9oaWRlICYmIHZpc2liaWxpdHkgIT0gXCJoaWRlXCI7XG4gICAgaWYgKGN1cnJlbnRWaXNpYmlsaXR5KSB7XG4gICAgICBpZiAodmlzaWJpbGl0eSA9PSBcInNob3dcIiAmJiAhY2hhbmdlQXV0b2hpZGUpIHtcbiAgICAgICAgcmV0dXJuIFRhc2submV3UmVzdWx0KHRydWUpO1xuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICBpZiAodmlzaWJpbGl0eSA9PSBcImhpZGVcIikge1xuICAgICAgICByZXR1cm4gVGFzay5uZXdSZXN1bHQodHJ1ZSk7XG4gICAgICB9XG4gICAgfVxuICAgIGlmIChjdXJyZW50VmlzaWJpbGl0eSAmJiB2aXNpYmlsaXR5ICE9IFwic2hvd1wiKSB7XG4gICAgICB0aGlzLm9wZlZpZXcuaGlkZVRPQygpO1xuICAgICAgcmV0dXJuIFRhc2submV3UmVzdWx0KHRydWUpO1xuICAgIH0gZWxzZSB7XG4gICAgICBjb25zdCBmcmFtZTogVGFzay5GcmFtZTxib29sZWFuPiA9IFRhc2submV3RnJhbWUoXCJzaG93VE9DXCIpO1xuICAgICAgdGhpcy5vcGZWaWV3LnNob3dUT0MoYXV0b2hpZGUpLnRoZW4oKHBhZ2UpID0+IHtcbiAgICAgICAgaWYgKHBhZ2UpIHtcbiAgICAgICAgICBpZiAoY2hhbmdlQXV0b2hpZGUpIHtcbiAgICAgICAgICAgIHBhZ2UubGlzdGVuZXJzID0ge307XG4gICAgICAgICAgfVxuICAgICAgICAgIGlmIChhdXRvaGlkZSkge1xuICAgICAgICAgICAgY29uc3QgaGlkZVRPQyA9ICgpID0+IHtcbiAgICAgICAgICAgICAgdGhpcy5vcGZWaWV3LmhpZGVUT0MoKTtcbiAgICAgICAgICAgIH07XG4gICAgICAgICAgICBwYWdlLmFkZEV2ZW50TGlzdGVuZXIoXCJoeXBlcmxpbmtcIiwgaGlkZVRPQywgZmFsc2UpO1xuICAgICAgICAgICAgLy8gcGFnZS5jb250YWluZXIuYWRkRXZlbnRMaXN0ZW5lcihcImNsaWNrXCIsIGhpZGVUT0MsIGZhbHNlKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgcGFnZS5hZGRFdmVudExpc3RlbmVyKFwiaHlwZXJsaW5rXCIsIHRoaXMuaHlwZXJsaW5rTGlzdGVuZXIsIGZhbHNlKTtcbiAgICAgICAgfVxuICAgICAgICBmcmFtZS5maW5pc2godHJ1ZSk7XG4gICAgICB9KTtcbiAgICAgIHJldHVybiBmcmFtZS5yZXN1bHQoKTtcbiAgICB9XG4gIH1cblxuICBydW5Db21tYW5kKGNvbW1hbmQ6IEJhc2UuSlNPTik6IFRhc2suUmVzdWx0PGJvb2xlYW4+IHtcbiAgICBjb25zdCBhY3Rpb25OYW1lID0gY29tbWFuZFtcImFcIl0gfHwgXCJcIjtcbiAgICByZXR1cm4gVGFzay5oYW5kbGUoXG4gICAgICBcInJ1bkNvbW1hbmRcIixcbiAgICAgIChmcmFtZSkgPT4ge1xuICAgICAgICBjb25zdCBhY3Rpb24gPSB0aGlzLmFjdGlvbnNbYWN0aW9uTmFtZV07XG4gICAgICAgIGlmIChhY3Rpb24pIHtcbiAgICAgICAgICBhY3Rpb24uY2FsbCh0aGlzLCBjb21tYW5kKS50aGVuKCgpID0+IHtcbiAgICAgICAgICAgIHRoaXMuY2FsbGJhY2soeyB0OiBcImRvbmVcIiwgYTogYWN0aW9uTmFtZSB9KTtcbiAgICAgICAgICAgIGZyYW1lLmZpbmlzaCh0cnVlKTtcbiAgICAgICAgICB9KTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBMb2dnaW5nLmxvZ2dlci5lcnJvcihcIk5vIHN1Y2ggYWN0aW9uOlwiLCBhY3Rpb25OYW1lKTtcbiAgICAgICAgICBmcmFtZS5maW5pc2godHJ1ZSk7XG4gICAgICAgIH1cbiAgICAgIH0sXG4gICAgICAoZnJhbWUsIGVycikgPT4ge1xuICAgICAgICBMb2dnaW5nLmxvZ2dlci5lcnJvcihlcnIsIFwiRXJyb3IgZHVyaW5nIGFjdGlvbjpcIiwgYWN0aW9uTmFtZSk7XG4gICAgICAgIGZyYW1lLmZpbmlzaCh0cnVlKTtcbiAgICAgIH0sXG4gICAgKTtcbiAgfVxuXG4gIGluaXRFbWJlZChjbWQ6IEJhc2UuSlNPTiB8IHN0cmluZyk6IHZvaWQge1xuICAgIGxldCBjb21tYW5kID0gbWF5YmVQYXJzZShjbWQpO1xuICAgIGxldCBjb250aW51YXRpb246IFRhc2suQ29udGludWF0aW9uPGJvb2xlYW4+IHwgbnVsbCA9IG51bGw7XG4gICAgY29uc3Qgdmlld2VyID0gdGhpcztcbiAgICBUYXNrLnN0YXJ0KCgpID0+IHtcbiAgICAgIGNvbnN0IGZyYW1lOiBUYXNrLkZyYW1lPGJvb2xlYW4+ID0gVGFzay5uZXdGcmFtZShcImNvbW1hbmRMb29wXCIpO1xuICAgICAgY29uc3Qgc2NoZWR1bGVyID0gVGFzay5jdXJyZW50VGFzaygpLmdldFNjaGVkdWxlcigpO1xuICAgICAgdmlld2VyLmh5cGVybGlua0xpc3RlbmVyID0gKGV2dCkgPT4ge1xuICAgICAgICBjb25zdCBocmVmRXZlbnQgPSBldnQgYXMgVnRyZWUuUGFnZUh5cGVybGlua0V2ZW50O1xuICAgICAgICBjb25zdCBpbnRlcm5hbCA9XG4gICAgICAgICAgaHJlZkV2ZW50LmhyZWYuY2hhckF0KDApID09PSBcIiNcIiB8fFxuICAgICAgICAgIHZpZXdlci5wYWNrYWdlVVJMLnNvbWUoXG4gICAgICAgICAgICAodXJsKSA9PiBocmVmRXZlbnQuaHJlZi5zdWJzdHIoMCwgdXJsLmxlbmd0aCkgPT0gdXJsLFxuICAgICAgICAgICk7XG4gICAgICAgIGlmIChpbnRlcm5hbCkge1xuICAgICAgICAgIGV2dC5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgICAgIGNvbnN0IG1zZyA9IHtcbiAgICAgICAgICAgIHQ6IFwiaHlwZXJsaW5rXCIsXG4gICAgICAgICAgICBocmVmOiBocmVmRXZlbnQuaHJlZixcbiAgICAgICAgICAgIGludGVybmFsOiBpbnRlcm5hbCxcbiAgICAgICAgICB9O1xuICAgICAgICAgIHNjaGVkdWxlci5ydW4oKCkgPT4ge1xuICAgICAgICAgICAgdmlld2VyLmNhbGxiYWNrKG1zZyk7XG4gICAgICAgICAgICByZXR1cm4gVGFzay5uZXdSZXN1bHQodHJ1ZSk7XG4gICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICAgIH07XG4gICAgICBmcmFtZVxuICAgICAgICAubG9vcFdpdGhGcmFtZSgobG9vcEZyYW1lKSA9PiB7XG4gICAgICAgICAgaWYgKHZpZXdlci5uZWVkUmVzaXplKSB7XG4gICAgICAgICAgICB2aWV3ZXIucmVzaXplKCkudGhlbigoKSA9PiB7XG4gICAgICAgICAgICAgIGxvb3BGcmFtZS5jb250aW51ZUxvb3AoKTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgIH0gZWxzZSBpZiAodmlld2VyLm5lZWRSZWZyZXNoKSB7XG4gICAgICAgICAgICBpZiAodmlld2VyLmN1cnJlbnRQYWdlKSB7XG4gICAgICAgICAgICAgIHZpZXdlci5zaG93Q3VycmVudCh2aWV3ZXIuY3VycmVudFBhZ2UpLnRoZW4oKCkgPT4ge1xuICAgICAgICAgICAgICAgIGxvb3BGcmFtZS5jb250aW51ZUxvb3AoKTtcbiAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSBlbHNlIGlmIChjb21tYW5kKSB7XG4gICAgICAgICAgICBjb25zdCBjbWQgPSBjb21tYW5kO1xuICAgICAgICAgICAgY29tbWFuZCA9IG51bGw7XG4gICAgICAgICAgICB2aWV3ZXIucnVuQ29tbWFuZChjbWQpLnRoZW4oKCkgPT4ge1xuICAgICAgICAgICAgICBsb29wRnJhbWUuY29udGludWVMb29wKCk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgY29uc3QgZnJhbWVJbnRlcm5hbDogVGFzay5GcmFtZTxib29sZWFuPiA9IFRhc2submV3RnJhbWUoXG4gICAgICAgICAgICAgIFwid2FpdEZvckNvbW1hbmRcIixcbiAgICAgICAgICAgICk7XG4gICAgICAgICAgICBjb250aW51YXRpb24gPSBmcmFtZUludGVybmFsLnN1c3BlbmQodGhpcyk7XG4gICAgICAgICAgICBmcmFtZUludGVybmFsLnJlc3VsdCgpLnRoZW4oKCkgPT4ge1xuICAgICAgICAgICAgICBsb29wRnJhbWUuY29udGludWVMb29wKCk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICB9XG4gICAgICAgIH0pXG4gICAgICAgIC50aGVuRmluaXNoKGZyYW1lKTtcbiAgICAgIHJldHVybiBmcmFtZS5yZXN1bHQoKTtcbiAgICB9KTtcbiAgICB2aWV3ZXIua2ljayA9ICgpID0+IHtcbiAgICAgIGNvbnN0IGNvbnQgPSBjb250aW51YXRpb247XG4gICAgICBpZiAoY29udCkge1xuICAgICAgICBjb250aW51YXRpb24gPSBudWxsO1xuICAgICAgICBjb250LnNjaGVkdWxlKHRydWUpO1xuICAgICAgfVxuICAgIH07XG4gICAgdmlld2VyLnNlbmRDb21tYW5kID0gKGNtZCkgPT4ge1xuICAgICAgaWYgKGNvbW1hbmQpIHtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgfVxuICAgICAgY29tbWFuZCA9IG1heWJlUGFyc2UoY21kKTtcbiAgICAgIHZpZXdlci5raWNrKCk7XG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9O1xuICAgIHRoaXMud2luZG93W1wiYWRhcHRfY29tbWFuZFwiXSA9IHZpZXdlci5zZW5kQ29tbWFuZDtcbiAgfVxufVxuXG4vKipcbiAqIEBlbnVtIHtzdHJpbmd9XG4gKi9cbmV4cG9ydCBlbnVtIFpvb21UeXBlIHtcbiAgRklUX0lOU0lERV9WSUVXUE9SVCA9IFwiZml0IGluc2lkZSB2aWV3cG9ydFwiLFxufVxuXG4vKipcbiAqIEVycm9yIHJlcHJlc2VudGluZyB0aGF0IHRoZSByZW5kZXJpbmcgaGFzIGJlZW4gY2FuY2VsZWQuXG4gKi9cbmNsYXNzIFJlbmRlcmluZ0NhbmNlbGVkRXJyb3IgZXh0ZW5kcyBFcnJvciB7XG4gIG5hbWU6IHN0cmluZyA9IFwiUmVuZGVyaW5nQ2FuY2VsZWRFcnJvclwiO1xuICBtZXNzYWdlOiBzdHJpbmcgPSBcIlBhZ2UgcmVuZGVyaW5nIGhhcyBiZWVuIGNhbmNlbGVkXCI7XG4gIHN0YWNrOiBzdHJpbmc7XG5cbiAgY29uc3RydWN0b3IoKSB7XG4gICAgc3VwZXIoKTtcbiAgICAvLyBTZXQgdGhlIHByb3RvdHlwZSBleHBsaWNpdGx5LlxuICAgIC8vIGh0dHBzOi8vZ2l0aHViLmNvbS9NaWNyb3NvZnQvVHlwZVNjcmlwdC93aWtpL0JyZWFraW5nLUNoYW5nZXMjZXh0ZW5kaW5nLWJ1aWx0LWlucy1saWtlLWVycm9yLWFycmF5LWFuZC1tYXAtbWF5LW5vLWxvbmdlci13b3JrXG4gICAgT2JqZWN0LnNldFByb3RvdHlwZU9mKHRoaXMsIFJlbmRlcmluZ0NhbmNlbGVkRXJyb3IucHJvdG90eXBlKTtcbiAgICB0aGlzLnN0YWNrID0gbmV3IEVycm9yKCkuc3RhY2s7XG4gIH1cbn1cblxuZXhwb3J0IGZ1bmN0aW9uIG1heWJlUGFyc2UoY21kOiBhbnkpOiBCYXNlLkpTT04ge1xuICBpZiAodHlwZW9mIGNtZCA9PSBcInN0cmluZ1wiKSB7XG4gICAgcmV0dXJuIEJhc2Uuc3RyaW5nVG9KU09OKGNtZCk7XG4gIH1cbiAgcmV0dXJuIGNtZDtcbn1cbiIsIi8qKlxuICogQ29weXJpZ2h0IDIwMTUgVHJpbS1tYXJrcyBJbmMuXG4gKiBDb3B5cmlnaHQgMjAxOCBWaXZsaW9zdHlsZSBGb3VuZGF0aW9uXG4gKlxuICogVml2bGlvc3R5bGUuanMgaXMgZnJlZSBzb2Z0d2FyZTogeW91IGNhbiByZWRpc3RyaWJ1dGUgaXQgYW5kL29yIG1vZGlmeVxuICogaXQgdW5kZXIgdGhlIHRlcm1zIG9mIHRoZSBHTlUgQWZmZXJvIEdlbmVyYWwgUHVibGljIExpY2Vuc2UgYXMgcHVibGlzaGVkIGJ5XG4gKiB0aGUgRnJlZSBTb2Z0d2FyZSBGb3VuZGF0aW9uLCBlaXRoZXIgdmVyc2lvbiAzIG9mIHRoZSBMaWNlbnNlLCBvclxuICogKGF0IHlvdXIgb3B0aW9uKSBhbnkgbGF0ZXIgdmVyc2lvbi5cbiAqXG4gKiBWaXZsaW9zdHlsZS5qcyBpcyBkaXN0cmlidXRlZCBpbiB0aGUgaG9wZSB0aGF0IGl0IHdpbGwgYmUgdXNlZnVsLFxuICogYnV0IFdJVEhPVVQgQU5ZIFdBUlJBTlRZOyB3aXRob3V0IGV2ZW4gdGhlIGltcGxpZWQgd2FycmFudHkgb2ZcbiAqIE1FUkNIQU5UQUJJTElUWSBvciBGSVRORVNTIEZPUiBBIFBBUlRJQ1VMQVIgUFVSUE9TRS4gIFNlZSB0aGVcbiAqIEdOVSBBZmZlcm8gR2VuZXJhbCBQdWJsaWMgTGljZW5zZSBmb3IgbW9yZSBkZXRhaWxzLlxuICpcbiAqIFlvdSBzaG91bGQgaGF2ZSByZWNlaXZlZCBhIGNvcHkgb2YgdGhlIEdOVSBBZmZlcm8gR2VuZXJhbCBQdWJsaWMgTGljZW5zZVxuICogYWxvbmcgd2l0aCBWaXZsaW9zdHlsZS5qcy4gIElmIG5vdCwgc2VlIDxodHRwOi8vd3d3LmdudS5vcmcvbGljZW5zZXMvPi5cbiAqXG4gKiBAZmlsZW92ZXJ2aWV3IENvcmVWaWV3ZXIgLSBWaXZsaW9zdHlsZSBDb3JlVmlld2VyIGNsYXNzXG4gKi9cbmltcG9ydCAqIGFzIEFkYXB0aXZlVmlld2VyIGZyb20gXCIuL2FkYXB0aXZlLXZpZXdlclwiO1xuaW1wb3J0ICogYXMgQmFzZSBmcm9tIFwiLi9iYXNlXCI7XG5pbXBvcnQgKiBhcyBDb25zdGFudHMgZnJvbSBcIi4vY29uc3RhbnRzXCI7XG5pbXBvcnQgKiBhcyBFcHViIGZyb20gXCIuL2VwdWJcIjtcbmltcG9ydCAqIGFzIFByb2ZpbGUgZnJvbSBcIi4vcHJvZmlsZVwiO1xuaW1wb3J0ICogYXMgVG9jIGZyb20gXCIuL3RvY1wiO1xuXG5leHBvcnQgaW50ZXJmYWNlIFBheWxvYWQge1xuICB0eXBlOiBzdHJpbmc7XG4gIGludGVybmFsOiBib29sZWFuO1xuICBocmVmOiBzdHJpbmc7XG4gIGNvbnRlbnQ6IHN0cmluZztcbiAgY2ZpOiBzdHJpbmc7XG4gIGZpcnN0OiBib29sZWFuO1xuICBsYXN0OiBib29sZWFuO1xuICBlcGFnZTogbnVtYmVyO1xuICBlcGFnZUNvdW50OiBudW1iZXI7XG4gIG1ldGFkYXRhOiB1bmtub3duO1xuICBkb2NUaXRsZTogc3RyaW5nO1xufVxuXG5jb25zdCBQYWdlUHJvZ3Jlc3Npb24gPSBDb25zdGFudHMuUGFnZVByb2dyZXNzaW9uO1xuXG4vKipcbiAqIFZpZXdlciBzZXR0aW5ncyB0aGF0IG11c3QgYmUgcGFzc2VkIHRvIFZpZXdlcidzIGNvbnN0cnVjdG9yLlxuICogLSB1c2VyQWdlbnRSb290VVJMOiBVUkwgb2YgYSBkaXJlY3RvcnkgZnJvbSB3aGljaCB2aWV3ZXIgcmVzb3VyY2UgZmlsZXNcbiAqICAgKHVuZGVyIHJlc291cmNlcy8gZGlyZWN0b3J5IGluIHRoZSBzb3VyY2UgcmVwb3NpdG9yeSkgYXJlIHNlcnZlZC5cbiAqIC0gdmlld3BvcnRFbGVtZW50OiBBbiBlbGVtZW50IHVzZWQgYXMgdGhlIHZpZXdwb3J0IG9mIHRoZSBkaXNwbGF5ZWQgY29udGVudHMuXG4gKiAtIHdpbmRvdzogV2luZG93IG9iamVjdC4gSWYgb21pdHRlZCwgY3VycmVudCBgd2luZG93YCBpcyB1c2VkLlxuICogLSBkZWJ1ZzogRGVidWcgZmxhZy5cbiAqL1xuZXhwb3J0IHR5cGUgQ29yZVZpZXdlclNldHRpbmdzID0ge1xuICB1c2VyQWdlbnRSb290VVJMPzogc3RyaW5nO1xuICB2aWV3cG9ydEVsZW1lbnQ6IEhUTUxFbGVtZW50O1xuICB3aW5kb3c/OiBXaW5kb3c7XG4gIGRlYnVnPzogYm9vbGVhbjtcbn07XG5cbi8qKlxuICogVmlld2VyIG9wdGlvbnMgdGhhdCBjYW4gYmUgc2V0IGFmdGVyIHRoZSBWaWV3ZXIgb2JqZWN0IGlzIGNvbnN0cnVjdGVkLlxuICogLSBhdXRvUmVzaXplOiBSdW4gbGF5b3V0IGFnYWluIHdoZW4gdGhlIHdpbmRvdyBpcyByZXNpemVkLiBkZWZhdWx0OiB0cnVlXG4gKiAtIGZvbnRTaXplOiBEZWZhdWx0IGZvbnQgc2l6ZSAocHgpLiBkZWZhdWx0OiAxNlxuICogLSBwYWdlQm9yZGVyV2lkdGg6IFdpZHRoIG9mIGEgYm9yZGVyIGJldHdlZW4gdHdvIHBhZ2VzIGluIGEgc2luZ2xlXG4gKiAgIHNwcmVhZCAocHgpLiBFZmZlY3RpdmUgb25seSBpbiBzcHJlYWQgdmlldyBtb2RlLiBkZWZhdWx0OiAxXG4gKiAtIHJlbmRlckFsbFBhZ2VzOiBSZW5kZXIgYWxsIHBhZ2VzIGF0IHRoZSBkb2N1bWVudCBsb2FkIHRpbWUuIGRlZmF1bHQ6IHRydWVcbiAqIC0gcGFnZVZpZXdNb2RlOiBQYWdlIHZpZXcgbW9kZSAoc2luZ2xlUGFnZSAvIHNwcmVhZCAvIGF1dG9TcHJlYWQpLlxuICogICBkZWZhdWx0OiBzaW5nbGVQYWdlXG4gKiAtIHpvb206IFpvb20gZmFjdG9yIHdpdGggd2hpY2ggcGFnZXMgYXJlIGRpc3BsYXllZC4gZGVmYXVsdDogMVxuICogLSBmaXRUb1NjcmVlbjogQXV0byBhZGp1c3Qgem9vbSBmYWN0b3IgdG8gZml0IHRoZSBzY3JlZW4uIGRlZmF1bHQ6IGZhbHNlXG4gKiAtIGRlZmF1bHRQYXBlclNpemU6IERlZmF1bHQgcGFwZXIgc2l6ZSBpbiBweC4gRWZmZWN0aXZlIHdoZW4gYEBwYWdlYCBzaXplXG4gKiAgIGlzIHNldCB0byBhdXRvLiBkZWZhdWx0OiB1bmRlZmluZWQgKG1lYW5zIHRoZSB3aW5kb3dzIHNpemUgaXMgdXNlZCBhc1xuICogICBwYXBlciBzaXplKS5cbiAqL1xuZXhwb3J0IHR5cGUgQ29yZVZpZXdlck9wdGlvbnMgPSB7XG4gIGF1dG9SZXNpemU/OiBib29sZWFuO1xuICBmb250U2l6ZT86IG51bWJlcjtcbiAgcGFnZUJvcmRlcldpZHRoPzogbnVtYmVyO1xuICByZW5kZXJBbGxQYWdlcz86IGJvb2xlYW47XG4gIHBhZ2VWaWV3TW9kZT86IEFkYXB0aXZlVmlld2VyLlBhZ2VWaWV3TW9kZTtcbiAgem9vbT86IG51bWJlcjtcbiAgZml0VG9TY3JlZW4/OiBib29sZWFuO1xuICBkZWZhdWx0UGFwZXJTaXplPzogeyB3aWR0aDogbnVtYmVyOyBoZWlnaHQ6IG51bWJlciB9O1xufTtcblxuZnVuY3Rpb24gZ2V0RGVmYXVsdFZpZXdlck9wdGlvbnMoKTogQ29yZVZpZXdlck9wdGlvbnMge1xuICByZXR1cm4ge1xuICAgIGF1dG9SZXNpemU6IHRydWUsXG4gICAgZm9udFNpemU6IDE2LFxuICAgIHBhZ2VCb3JkZXJXaWR0aDogMSxcbiAgICByZW5kZXJBbGxQYWdlczogdHJ1ZSxcbiAgICBwYWdlVmlld01vZGU6IEFkYXB0aXZlVmlld2VyLlBhZ2VWaWV3TW9kZS5BVVRPX1NQUkVBRCxcbiAgICB6b29tOiAxLFxuICAgIGZpdFRvU2NyZWVuOiBmYWxzZSxcbiAgICBkZWZhdWx0UGFwZXJTaXplOiB1bmRlZmluZWQsXG4gIH07XG59XG5cbmZ1bmN0aW9uIGNvbnZlcnRWaWV3ZXJPcHRpb25zKG9wdGlvbnM6IENvcmVWaWV3ZXJPcHRpb25zKTogb2JqZWN0IHtcbiAgY29uc3QgY29udmVydGVkID0ge307XG4gIE9iamVjdC5rZXlzKG9wdGlvbnMpLmZvckVhY2goKGtleSkgPT4ge1xuICAgIGNvbnN0IHYgPSBvcHRpb25zW2tleV07XG4gICAgc3dpdGNoIChrZXkpIHtcbiAgICAgIGNhc2UgXCJhdXRvUmVzaXplXCI6XG4gICAgICAgIGNvbnZlcnRlZFtcImF1dG9yZXNpemVcIl0gPSB2O1xuICAgICAgICBicmVhaztcbiAgICAgIGNhc2UgXCJwYWdlQm9yZGVyV2lkdGhcIjpcbiAgICAgICAgY29udmVydGVkW1wicGFnZUJvcmRlclwiXSA9IHY7XG4gICAgICAgIGJyZWFrO1xuICAgICAgZGVmYXVsdDpcbiAgICAgICAgY29udmVydGVkW2tleV0gPSB2O1xuICAgIH1cbiAgfSk7XG4gIHJldHVybiBjb252ZXJ0ZWQ7XG59XG5cbi8qKlxuICogT3B0aW9ucyBmb3IgdGhlIGRpc3BsYXllZCBkb2N1bWVudC5cbiAqIC0gZG9jdW1lbnRPYmplY3Q6IERvY3VtZW50IG9iamVjdCBmb3IgdGhlIGRvY3VtZW50LiBJZiBwcm92aWRlZCwgaXQgaXMgdXNlZFxuICogICBkaXJlY3RseSB3aXRob3V0IHBhcnNpbmcgdGhlIHNvdXJjZSBhZ2Fpbi5cbiAqIC0gZnJhZ21lbnQ6IEZyYWdtZW50YXRpb24gaWRlbnRpZmllciAoRVBVQiBDRkkpIG9mIHRoZSBsb2NhdGlvbiBpbiB0aGVcbiAqICAgZG9jdW1lbnQgd2hpY2ggaXMgdG8gYmUgZGlzcGxheWVkLlxuICogLSBhdXRob3JTdHlsZVNoZWV0OiBBbiBhcnJheSBvZiBhdXRob3Igc3R5bGUgc2hlZXRzIHRvIGJlIGluamVjdGVkIGFmdGVyIGFsbFxuICogICBhdXRob3Igc3R5bGUgc2hlZXRzIHJlZmVyZW5jZWQgZnJvbSB0aGUgZG9jdW1lbnQuIEEgc2luZ2xlIHN0eWxlc2hlZXQgbWF5XG4gKiAgIGJlIGEgVVJMIG9mIHRoZSBzdHlsZSBzaGVldCBvciBhIHRleHQgY29udGVudCBvZiB0aGUgc3R5bGUgc2hlZXQuXG4gKiAtIHVzZXJTdHlsZVNoZWV0OiBBbiBhcnJheSBvZiB1c2VyIHN0eWxlIHNoZWV0cyB0byBiZSBpbmplY3RlZC5cbiAqICAgQSBzaW5nbGUgc3R5bGVzaGVldCBtYXkgYmUgYSBVUkwgb2YgdGhlIHN0eWxlIHNoZWV0IG9yIGEgdGV4dCBjb250ZW50IG9mXG4gKiAgIHRoZSBzdHlsZSBzaGVldC5cbiAqL1xuZXhwb3J0IHR5cGUgRG9jdW1lbnRPcHRpb25zID0ge1xuICBkb2N1bWVudE9iamVjdD86IERvY3VtZW50O1xuICBmcmFnbWVudD86IHN0cmluZztcbiAgYXV0aG9yU3R5bGVTaGVldD86IHsgdXJsPzogc3RyaW5nOyB0ZXh0Pzogc3RyaW5nIH1bXTtcbiAgdXNlclN0eWxlU2hlZXQ/OiB7IHVybD86IHN0cmluZzsgdGV4dD86IHN0cmluZyB9W107XG59O1xuXG4vKipcbiAqIE9wdGlvbnMgZm9yIGEgc2luZ2xlIHNvdXJjZSBkb2N1bWVudC5cbiAqIC0gdXJsOiBVUkwgb2YgdGhlIGRvY3VtZW50LlxuICogLSBzdGFydFBhZ2U6IElmIHNwZWNpZmllZCwgdGhlIGBwYWdlYCBwYWdlLWJhc2VkIGNvdW50ZXIgaXMgc2V0IHRvIHRoZVxuICogICBzcGVjaWZpZWQgdmFsdWUgb24gdGhlIGZpcnN0IHBhZ2Ugb2YgdGhlIGRvY3VtZW50LiBJdCBpcyBlcXVpdmFsZW50IHRvXG4gKiAgIHNwZWNpZnlpbmcgYGNvdW50ZXItcmVzZXQ6IHBhZ2UgW3NwZWNpZmllZCB2YWx1ZSAtIDFdYCBvbiB0aGF0IHBhZ2UuXG4gKiAtIHNraXBQYWdlc0JlZm9yZTogSWYgc3BlY2lmaWVkLCB0aGUgYHBhZ2VgIHBhZ2UtYmFzZWQgY291bnRlciBpc1xuICogICBpbmNyZW1lbnRlZCBieSB0aGUgc3BlY2lmaWVkIHZhbHVlICpiZWZvcmUqIHVwZGF0aW5nIHBhZ2UtYmFzZWQgY291bnRlcnNcbiAqICAgb24gdGhlIGZpcnN0IHBhZ2Ugb2YgdGhlIGRvY3VtZW50LlxuICogICBUaGlzIG9wdGlvbiBpcyBpZ25vcmVkIGlmIGBzdGFydFBhZ2VOdW1iZXJgIG9wdGlvbiBpcyBhbHNvIHNwZWNpZmllZC5cbiAqL1xuZXhwb3J0IHR5cGUgU2luZ2xlRG9jdW1lbnRPcHRpb25zID1cbiAgfCBzdHJpbmdcbiAgfCB7XG4gICAgICB1cmw6IHN0cmluZztcbiAgICAgIHN0YXJ0UGFnZT86IG51bWJlcjtcbiAgICAgIHNraXBQYWdlc0JlZm9yZT86IG51bWJlcjtcbiAgICB9O1xuXG4vKipcbiAqIFZpdmxpb3N0eWxlIFZpZXdlciBjbGFzcy5cbiAqL1xuZXhwb3J0IGNsYXNzIENvcmVWaWV3ZXIge1xuICBwcml2YXRlIGluaXRpYWxpemVkOiBib29sZWFuID0gZmFsc2U7XG4gIHByaXZhdGUgYWRhcHRWaWV3ZXJfOiBBZGFwdGl2ZVZpZXdlci5BZGFwdGl2ZVZpZXdlcjtcbiAgcHJpdmF0ZSBvcHRpb25zOiBDb3JlVmlld2VyT3B0aW9ucztcbiAgcHJpdmF0ZSBldmVudFRhcmdldDogQmFzZS5TaW1wbGVFdmVudFRhcmdldDtcbiAgcmVhZHlTdGF0ZTogQ29uc3RhbnRzLlJlYWR5U3RhdGU7XG5cbiAgY29uc3RydWN0b3IoXG4gICAgcHJpdmF0ZSByZWFkb25seSBzZXR0aW5nczogQ29yZVZpZXdlclNldHRpbmdzLFxuICAgIG9wdF9vcHRpb25zPzogQ29yZVZpZXdlck9wdGlvbnMsXG4gICkge1xuICAgIENvbnN0YW50cy5zZXREZWJ1ZyhzZXR0aW5ncy5kZWJ1Zyk7XG4gICAgdGhpcy5hZGFwdFZpZXdlcl8gPSBuZXcgQWRhcHRpdmVWaWV3ZXIuQWRhcHRpdmVWaWV3ZXIoXG4gICAgICBzZXR0aW5nc1tcIndpbmRvd1wiXSB8fCB3aW5kb3csXG4gICAgICBzZXR0aW5nc1tcInZpZXdwb3J0RWxlbWVudFwiXSxcbiAgICAgIFwibWFpblwiLFxuICAgICAgdGhpcy5kaXNwYXRjaGVyLmJpbmQodGhpcyksXG4gICAgKTtcbiAgICB0aGlzLm9wdGlvbnMgPSBnZXREZWZhdWx0Vmlld2VyT3B0aW9ucygpO1xuICAgIGlmIChvcHRfb3B0aW9ucykge1xuICAgICAgdGhpcy5zZXRPcHRpb25zKG9wdF9vcHRpb25zKTtcbiAgICB9XG4gICAgdGhpcy5ldmVudFRhcmdldCA9IG5ldyBCYXNlLlNpbXBsZUV2ZW50VGFyZ2V0KCk7XG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRoaXMsIFwicmVhZHlTdGF0ZVwiLCB7XG4gICAgICBnZXQoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmFkYXB0Vmlld2VyXy5yZWFkeVN0YXRlO1xuICAgICAgfSxcbiAgICB9KTtcbiAgfVxuXG4gIC8qKlxuICAgKiBTZXQgVmlld2VyT3B0aW9ucyB0byB0aGUgdmlld2VyLlxuICAgKi9cbiAgc2V0T3B0aW9ucyhvcHRpb25zOiBDb3JlVmlld2VyT3B0aW9ucykge1xuICAgIGNvbnN0IGNvbW1hbmQgPSBPYmplY3QuYXNzaWduKFxuICAgICAgeyBhOiBcImNvbmZpZ3VyZVwiIH0sXG4gICAgICBjb252ZXJ0Vmlld2VyT3B0aW9ucyhvcHRpb25zKSxcbiAgICApO1xuICAgIHRoaXMuYWRhcHRWaWV3ZXJfLnNlbmRDb21tYW5kKGNvbW1hbmQpO1xuICAgIE9iamVjdC5hc3NpZ24odGhpcy5vcHRpb25zLCBvcHRpb25zKTtcbiAgfVxuXG4gIHByaXZhdGUgZGlzcGF0Y2hlcihtc2c6IEJhc2UuSlNPTikge1xuICAgIC8qKiBAZGljdCAqL1xuICAgIGNvbnN0IGV2ZW50ID0geyB0eXBlOiBtc2dbXCJ0XCJdIH07XG4gICAgY29uc3QgbyA9IG1zZyBhcyBvYmplY3Q7XG4gICAgT2JqZWN0LmtleXMobykuZm9yRWFjaCgoa2V5KSA9PiB7XG4gICAgICBpZiAoa2V5ICE9PSBcInRcIikge1xuICAgICAgICBldmVudFtrZXldID0gb1trZXldO1xuICAgICAgfVxuICAgIH0pO1xuICAgIHRoaXMuZXZlbnRUYXJnZXQuZGlzcGF0Y2hFdmVudChldmVudCk7XG4gIH1cblxuICAvKipcbiAgICogQWRkIGEgbGlzdGVuZXIgZnVuY3Rpb24sIHdoaWNoIGlzIGludm9rZWQgd2hlbiB0aGUgc3BlY2lmaWVkIHR5cGUgb2YgZXZlbnRcbiAgICogaXMgZGlzcGF0Y2hlZC5cbiAgICogQHBhcmFtIHR5cGUgRXZlbnQgdHlwZS5cbiAgICogQHBhcmFtIGxpc3RlbmVyIExpc3RlbmVyIGZ1bmN0aW9uLlxuICAgKi9cbiAgYWRkTGlzdGVuZXIodHlwZTogc3RyaW5nLCBsaXN0ZW5lcjogKHBheWxvYWQ6IFBheWxvYWQpID0+IHZvaWQpIHtcbiAgICB0aGlzLmV2ZW50VGFyZ2V0LmFkZEV2ZW50TGlzdGVuZXIoXG4gICAgICB0eXBlLFxuICAgICAgbGlzdGVuZXIgYXMgQmFzZS5FdmVudExpc3RlbmVyLFxuICAgICAgZmFsc2UsXG4gICAgKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBSZW1vdmUgYW4gZXZlbnQgbGlzdGVuZXIuXG4gICAqIEBwYXJhbSB0eXBlIEV2ZW50IHR5cGUuXG4gICAqIEBwYXJhbSBsaXN0ZW5lciBMaXN0ZW5lciBmdW5jdGlvbi5cbiAgICovXG4gIHJlbW92ZUxpc3RlbmVyKHR5cGU6IHN0cmluZywgbGlzdGVuZXI6IChwYXlsb2FkOiBQYXlsb2FkKSA9PiB2b2lkKSB7XG4gICAgdGhpcy5ldmVudFRhcmdldC5yZW1vdmVFdmVudExpc3RlbmVyKFxuICAgICAgdHlwZSxcbiAgICAgIGxpc3RlbmVyIGFzIEJhc2UuRXZlbnRMaXN0ZW5lcixcbiAgICAgIGZhbHNlLFxuICAgICk7XG4gIH1cblxuICAvKipcbiAgICogTG9hZCBhbiBIVE1MIG9yIFhNTCBkb2N1bWVudChzKS5cbiAgICovXG4gIGxvYWREb2N1bWVudChcbiAgICBzaW5nbGVEb2N1bWVudE9wdGlvbnM6IFNpbmdsZURvY3VtZW50T3B0aW9ucyB8IFNpbmdsZURvY3VtZW50T3B0aW9uc1tdLFxuICAgIG9wdF9kb2N1bWVudE9wdGlvbnM/OiBEb2N1bWVudE9wdGlvbnMsXG4gICAgb3B0X3ZpZXdlck9wdGlvbnM/OiBDb3JlVmlld2VyT3B0aW9ucyxcbiAgKSB7XG4gICAgaWYgKCFzaW5nbGVEb2N1bWVudE9wdGlvbnMpIHtcbiAgICAgIHRoaXMuZXZlbnRUYXJnZXQuZGlzcGF0Y2hFdmVudCh7XG4gICAgICAgIHR5cGU6IFwiZXJyb3JcIixcbiAgICAgICAgY29udGVudDogXCJObyBVUkwgc3BlY2lmaWVkXCIsXG4gICAgICB9KTtcbiAgICB9XG4gICAgdGhpcy5sb2FkRG9jdW1lbnRPclB1YmxpY2F0aW9uKFxuICAgICAgc2luZ2xlRG9jdW1lbnRPcHRpb25zLFxuICAgICAgbnVsbCxcbiAgICAgIG9wdF9kb2N1bWVudE9wdGlvbnMsXG4gICAgICBvcHRfdmlld2VyT3B0aW9ucyxcbiAgICApO1xuICB9XG5cbiAgLyoqXG4gICAqIExvYWQgYW4gRVBVQi9XZWJQdWIgcHVibGljYXRpb24uXG4gICAqL1xuICBsb2FkUHVibGljYXRpb24oXG4gICAgcHViVXJsOiBzdHJpbmcsXG4gICAgb3B0X2RvY3VtZW50T3B0aW9ucz86IERvY3VtZW50T3B0aW9ucyxcbiAgICBvcHRfdmlld2VyT3B0aW9ucz86IENvcmVWaWV3ZXJPcHRpb25zLFxuICApIHtcbiAgICBpZiAoIXB1YlVybCkge1xuICAgICAgdGhpcy5ldmVudFRhcmdldC5kaXNwYXRjaEV2ZW50KHtcbiAgICAgICAgdHlwZTogXCJlcnJvclwiLFxuICAgICAgICBjb250ZW50OiBcIk5vIFVSTCBzcGVjaWZpZWRcIixcbiAgICAgIH0pO1xuICAgIH1cbiAgICB0aGlzLmxvYWREb2N1bWVudE9yUHVibGljYXRpb24oXG4gICAgICBudWxsLFxuICAgICAgcHViVXJsLFxuICAgICAgb3B0X2RvY3VtZW50T3B0aW9ucyxcbiAgICAgIG9wdF92aWV3ZXJPcHRpb25zLFxuICAgICk7XG4gIH1cblxuICAvKipcbiAgICogTG9hZCBhbiBIVE1MIG9yIFhNTCBkb2N1bWVudCwgb3IgYW4gRVBVQi9XZWJQdWIgcHVibGljYXRpb24uXG4gICAqL1xuICBwcml2YXRlIGxvYWREb2N1bWVudE9yUHVibGljYXRpb24oXG4gICAgc2luZ2xlRG9jdW1lbnRPcHRpb25zOlxuICAgICAgfCBTaW5nbGVEb2N1bWVudE9wdGlvbnNcbiAgICAgIHwgU2luZ2xlRG9jdW1lbnRPcHRpb25zW11cbiAgICAgIHwgbnVsbCxcbiAgICBwdWJVcmw6IHN0cmluZyB8IG51bGwsXG4gICAgb3B0X2RvY3VtZW50T3B0aW9ucz86IERvY3VtZW50T3B0aW9ucyxcbiAgICBvcHRfdmlld2VyT3B0aW9ucz86IENvcmVWaWV3ZXJPcHRpb25zLFxuICApIHtcbiAgICBjb25zdCBkb2N1bWVudE9wdGlvbnMgPSBvcHRfZG9jdW1lbnRPcHRpb25zIHx8IHt9O1xuXG4gICAgZnVuY3Rpb24gY29udmVydFN0eWxlU2hlZXRBcnJheShhcnIpIHtcbiAgICAgIGlmIChhcnIpIHtcbiAgICAgICAgcmV0dXJuIGFyci5tYXAoKHMpID0+ICh7IHVybDogcy51cmwgfHwgbnVsbCwgdGV4dDogcy50ZXh0IHx8IG51bGwgfSkpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcmV0dXJuIHVuZGVmaW5lZDtcbiAgICAgIH1cbiAgICB9XG4gICAgY29uc3QgYXV0aG9yU3R5bGVTaGVldCA9IGNvbnZlcnRTdHlsZVNoZWV0QXJyYXkoXG4gICAgICBkb2N1bWVudE9wdGlvbnNbXCJhdXRob3JTdHlsZVNoZWV0XCJdLFxuICAgICk7XG4gICAgY29uc3QgdXNlclN0eWxlU2hlZXQgPSBjb252ZXJ0U3R5bGVTaGVldEFycmF5KFxuICAgICAgZG9jdW1lbnRPcHRpb25zW1widXNlclN0eWxlU2hlZXRcIl0sXG4gICAgKTtcbiAgICBpZiAob3B0X3ZpZXdlck9wdGlvbnMpIHtcbiAgICAgIE9iamVjdC5hc3NpZ24odGhpcy5vcHRpb25zLCBvcHRfdmlld2VyT3B0aW9ucyk7XG4gICAgfVxuICAgIGNvbnN0IGNvbW1hbmQgPSBPYmplY3QuYXNzaWduKFxuICAgICAge1xuICAgICAgICBhOiBzaW5nbGVEb2N1bWVudE9wdGlvbnMgPyBcImxvYWRYTUxcIiA6IFwibG9hZFB1YmxpY2F0aW9uXCIsXG4gICAgICAgIHVzZXJBZ2VudFJvb3RVUkw6IHRoaXMuc2V0dGluZ3NbXCJ1c2VyQWdlbnRSb290VVJMXCJdLFxuICAgICAgICB1cmw6IGNvbnZlcnRTaW5nbGVEb2N1bWVudE9wdGlvbnMoc2luZ2xlRG9jdW1lbnRPcHRpb25zKSB8fCBwdWJVcmwsXG4gICAgICAgIGRvY3VtZW50OiBkb2N1bWVudE9wdGlvbnNbXCJkb2N1bWVudE9iamVjdFwiXSxcbiAgICAgICAgZnJhZ21lbnQ6IGRvY3VtZW50T3B0aW9uc1tcImZyYWdtZW50XCJdLFxuICAgICAgICBhdXRob3JTdHlsZVNoZWV0OiBhdXRob3JTdHlsZVNoZWV0LFxuICAgICAgICB1c2VyU3R5bGVTaGVldDogdXNlclN0eWxlU2hlZXQsXG4gICAgICB9LFxuICAgICAgY29udmVydFZpZXdlck9wdGlvbnModGhpcy5vcHRpb25zKSxcbiAgICApO1xuICAgIGlmICh0aGlzLmluaXRpYWxpemVkKSB7XG4gICAgICB0aGlzLmFkYXB0Vmlld2VyXy5zZW5kQ29tbWFuZChjb21tYW5kKTtcbiAgICB9IGVsc2Uge1xuICAgICAgdGhpcy5pbml0aWFsaXplZCA9IHRydWU7XG4gICAgICB0aGlzLmFkYXB0Vmlld2VyXy5pbml0RW1iZWQoY29tbWFuZCk7XG4gICAgfVxuICB9XG5cbiAgLyoqXG4gICAqIFJldHVybnMgdGhlIGN1cnJlbnQgcGFnZSBwcm9ncmVzc2lvbiBvZiB0aGUgdmlld2VyLiBJZiBubyBkb2N1bWVudCBpc1xuICAgKiBsb2FkZWQsIHJldHVybnMgbnVsbC5cbiAgICovXG4gIGdldEN1cnJlbnRQYWdlUHJvZ3Jlc3Npb24oKTogQ29uc3RhbnRzLlBhZ2VQcm9ncmVzc2lvbiB8IG51bGwge1xuICAgIHJldHVybiB0aGlzLmFkYXB0Vmlld2VyXy5nZXRDdXJyZW50UGFnZVByb2dyZXNzaW9uKCk7XG4gIH1cblxuICBwcml2YXRlIHJlc29sdmVOYXZpZ2F0aW9uKG5hdjogTmF2aWdhdGlvbik6IE5hdmlnYXRpb24ge1xuICAgIHN3aXRjaCAobmF2KSB7XG4gICAgICBjYXNlIE5hdmlnYXRpb24uTEVGVDpcbiAgICAgICAgcmV0dXJuIHRoaXMuZ2V0Q3VycmVudFBhZ2VQcm9ncmVzc2lvbigpID09PSBQYWdlUHJvZ3Jlc3Npb24uTFRSXG4gICAgICAgICAgPyBOYXZpZ2F0aW9uLlBSRVZJT1VTXG4gICAgICAgICAgOiBOYXZpZ2F0aW9uLk5FWFQ7XG4gICAgICBjYXNlIE5hdmlnYXRpb24uUklHSFQ6XG4gICAgICAgIHJldHVybiB0aGlzLmdldEN1cnJlbnRQYWdlUHJvZ3Jlc3Npb24oKSA9PT0gUGFnZVByb2dyZXNzaW9uLkxUUlxuICAgICAgICAgID8gTmF2aWdhdGlvbi5ORVhUXG4gICAgICAgICAgOiBOYXZpZ2F0aW9uLlBSRVZJT1VTO1xuICAgICAgZGVmYXVsdDpcbiAgICAgICAgcmV0dXJuIG5hdjtcbiAgICB9XG4gIH1cblxuICAvKipcbiAgICogTmF2aWdhdGUgdG8gdGhlIHNwZWNpZmllZCBwYWdlLlxuICAgKi9cbiAgbmF2aWdhdGVUb1BhZ2UobmF2OiBOYXZpZ2F0aW9uLCBvcHRfZXBhZ2U/OiBudW1iZXIpIHtcbiAgICBpZiAobmF2ID09PSBOYXZpZ2F0aW9uLkVQQUdFKSB7XG4gICAgICB0aGlzLmFkYXB0Vmlld2VyXy5zZW5kQ29tbWFuZCh7XG4gICAgICAgIGE6IFwibW92ZVRvXCIsXG4gICAgICAgIGVwYWdlOiBvcHRfZXBhZ2UsXG4gICAgICB9KTtcbiAgICB9IGVsc2Uge1xuICAgICAgdGhpcy5hZGFwdFZpZXdlcl8uc2VuZENvbW1hbmQoe1xuICAgICAgICBhOiBcIm1vdmVUb1wiLFxuICAgICAgICB3aGVyZTogdGhpcy5yZXNvbHZlTmF2aWdhdGlvbihuYXYpLFxuICAgICAgfSk7XG4gICAgfVxuICB9XG5cbiAgLyoqXG4gICAqIE5hdmlnYXRlIHRvIHRoZSBzcGVjaWZpZWQgaW50ZXJuYWwgVVJMLlxuICAgKi9cbiAgbmF2aWdhdGVUb0ludGVybmFsVXJsKHVybDogc3RyaW5nKSB7XG4gICAgdGhpcy5hZGFwdFZpZXdlcl8uc2VuZENvbW1hbmQoeyBhOiBcIm1vdmVUb1wiLCB1cmw6IHVybCB9KTtcbiAgfVxuXG4gIC8qKlxuICAgKiBAcmV0dXJucyBUcnVlIGlmIFRPQyBpcyB2aXNpYmxlLCBmYWxzZSBpZiBoaWRkZW4sIG51bGwgaWYgVE9DIGlzIHVuYXZhaWxhYmxlXG4gICAqL1xuICBpc1RPQ1Zpc2libGUoKTogYm9vbGVhbiB8IG51bGwge1xuICAgIGlmIChcbiAgICAgIHRoaXMuYWRhcHRWaWV3ZXJfLm9wZlZpZXcgJiZcbiAgICAgIHRoaXMuYWRhcHRWaWV3ZXJfLm9wZlZpZXcub3BmICYmXG4gICAgICAodGhpcy5hZGFwdFZpZXdlcl8ub3BmVmlldy5vcGYueGh0bWxUb2MgfHxcbiAgICAgICAgdGhpcy5hZGFwdFZpZXdlcl8ub3BmVmlldy5vcGYubmN4VG9jKVxuICAgICkge1xuICAgICAgcmV0dXJuICEhdGhpcy5hZGFwdFZpZXdlcl8ub3BmVmlldy5pc1RPQ1Zpc2libGUoKTtcbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuIG51bGw7XG4gICAgfVxuICB9XG5cbiAgLyoqXG4gICAqIFNob3cgb3IgaGlkZSBUT0MgYm94XG4gICAqIEBwYXJhbSBvcHRfYXV0b2hpZGUgSWYgdHJ1ZSwgYXV0b21hdGljYWxseSBoaWRlIHdoZW4gY2xpY2sgVE9DIGl0ZW1cbiAgICogQHBhcmFtIG9wdF9zaG93IElmIHRydWUgc2hvdyBUT0MsIGZhbHNlIGhpZGUgVE9DLiBJZiBudWxsIG9yIHVuZGVmaW5lZCB0b2dnbGUgVE9DLlxuICAgKi9cbiAgc2hvd1RPQyhvcHRfc2hvdz86IGJvb2xlYW4gfCBudWxsLCBvcHRfYXV0b2hpZGU/OiBib29sZWFuKSB7XG4gICAgY29uc3QgdmlzaWJpbGl0eSA9IG9wdF9zaG93ID09IG51bGwgPyBcInRvZ2dsZVwiIDogb3B0X3Nob3cgPyBcInNob3dcIiA6IFwiaGlkZVwiO1xuICAgIHRoaXMuYWRhcHRWaWV3ZXJfLnNlbmRDb21tYW5kKHtcbiAgICAgIGE6IFwidG9jXCIsXG4gICAgICB2OiB2aXNpYmlsaXR5LFxuICAgICAgYXV0b2hpZGU6IG9wdF9hdXRvaGlkZSxcbiAgICB9KTtcbiAgfVxuXG4gIC8qKlxuICAgKiBSZXR1cm5zIHpvb20gZmFjdG9yIGNvcnJlc3BvbmRpbmcgdG8gdGhlIHNwZWNpZmllZCB6b29tIHR5cGUuXG4gICAqL1xuICBxdWVyeVpvb21GYWN0b3IodHlwZTogQWRhcHRpdmVWaWV3ZXIuWm9vbVR5cGUpOiBudW1iZXIge1xuICAgIHJldHVybiB0aGlzLmFkYXB0Vmlld2VyXy5xdWVyeVpvb21GYWN0b3IodHlwZSk7XG4gIH1cblxuICBnZXRQYWdlU2l6ZXMoKTogeyB3aWR0aDogbnVtYmVyOyBoZWlnaHQ6IG51bWJlciB9W10ge1xuICAgIHJldHVybiB0aGlzLmFkYXB0Vmlld2VyXy5wYWdlU2l6ZXM7XG4gIH1cblxuICAvKipcbiAgICogUmV0dXJucyB0aGUgY3VycmVudCBzdHJ1Y3R1cmUgb2YgdGhlIFRPQyBvbmNlIGl0IGhhc1xuICAgKiBiZWVuIHNob3duLCBvciB0aGUgZW1wdHkgYXJyYXkgaWYgdGhlcmUgaXMgbm8gVE9DLlxuICAgKi9cbiAgZ2V0VE9DKCk6IFRvYy5UT0NJdGVtW10ge1xuICAgIHJldHVybiB0aGlzLmFkYXB0Vmlld2VyXy5vcGZWaWV3Py50b2NWaWV3Py5nZXRUT0MoKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBSZXR1cm5zIG1ldGFkYXRhIGZvciB0aGUgcHVibGljYXRpb24uIE1ldGFkYXRhIGlzXG4gICAqIG9yZ2FuaXplZCBhcyBhbiBvYmplY3Qgb2YgZnVsbHktcXVhbGlmaWVkIElSSSBwcm9wZXJ0aWVzXG4gICAqIGNvbnRhaW5pbmcgYXJyYXlzIG9mIG1ldGFkYXRhIGVudHJpZXMuIFRoZSBmaXJzdCBlbGVtZW50XG4gICAqIGluIHRoZSBhcnJheSBpcyBwcmltYXJ5IGFuZCBzaG91bGQgYmUgdXNlZCBieSBkZWZhdWx0LiBPdGhlclxuICAgKiBlbnRyaWVzIG1heSBvdmVybG9hZCBvciByZWZpbmUgdGhhdCBtZXRhZGF0YS5cbiAgICovXG4gIGdldE1ldGFkYXRhKCk6IEVwdWIuTWV0YSB7XG4gICAgcmV0dXJuIHRoaXMuYWRhcHRWaWV3ZXJfLm9wZi5nZXRNZXRhZGF0YSgpO1xuICB9XG5cbiAgLyoqXG4gICAqIFJldHVybnMgdGhlIGNvdmVyIGZvciBhbiBFUFVCIHB1YmxpY2F0aW9uLCBpZiBzcGVjaWZpZWQuXG4gICAqL1xuICBnZXRDb3ZlcigpOiBFcHViLk9QRkl0ZW0gfCBudWxsIHtcbiAgICByZXR1cm4gdGhpcy5hZGFwdFZpZXdlcl8ub3BmLmNvdmVyO1xuICB9XG59XG5cbmZ1bmN0aW9uIGNvbnZlcnRTaW5nbGVEb2N1bWVudE9wdGlvbnMoXG4gIHNpbmdsZURvY3VtZW50T3B0aW9uczogU2luZ2xlRG9jdW1lbnRPcHRpb25zIHwgU2luZ2xlRG9jdW1lbnRPcHRpb25zW10sXG4pOiBBZGFwdGl2ZVZpZXdlci5TaW5nbGVEb2N1bWVudFBhcmFtW10gfCBudWxsIHtcbiAgZnVuY3Rpb24gdG9OdW1iZXJPck51bGwobnVtOiBhbnkpOiBudW1iZXIgfCBudWxsIHtcbiAgICByZXR1cm4gdHlwZW9mIG51bSA9PT0gXCJudW1iZXJcIiA/IG51bSA6IG51bGw7XG4gIH1cblxuICBmdW5jdGlvbiBjb252ZXJ0KG9wdCkge1xuICAgIGlmICh0eXBlb2Ygb3B0ID09PSBcInN0cmluZ1wiKSB7XG4gICAgICByZXR1cm4ge1xuICAgICAgICB1cmw6IG9wdCxcbiAgICAgICAgc3RhcnRQYWdlOiBudWxsLFxuICAgICAgICBza2lwUGFnZXNCZWZvcmU6IG51bGwsXG4gICAgICB9IGFzIEFkYXB0aXZlVmlld2VyLlNpbmdsZURvY3VtZW50UGFyYW07XG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiB7XG4gICAgICAgIHVybDogb3B0W1widXJsXCJdLFxuICAgICAgICBzdGFydFBhZ2U6IHRvTnVtYmVyT3JOdWxsKG9wdFtcInN0YXJ0UGFnZVwiXSksXG4gICAgICAgIHNraXBQYWdlc0JlZm9yZTogdG9OdW1iZXJPck51bGwob3B0W1wic2tpcFBhZ2VzQmVmb3JlXCJdKSxcbiAgICAgIH0gYXMgQWRhcHRpdmVWaWV3ZXIuU2luZ2xlRG9jdW1lbnRQYXJhbTtcbiAgICB9XG4gIH1cbiAgaWYgKEFycmF5LmlzQXJyYXkoc2luZ2xlRG9jdW1lbnRPcHRpb25zKSkge1xuICAgIHJldHVybiBzaW5nbGVEb2N1bWVudE9wdGlvbnMubWFwKGNvbnZlcnQpO1xuICB9IGVsc2UgaWYgKHNpbmdsZURvY3VtZW50T3B0aW9ucykge1xuICAgIHJldHVybiBbY29udmVydChzaW5nbGVEb2N1bWVudE9wdGlvbnMpXTtcbiAgfSBlbHNlIHtcbiAgICByZXR1cm4gbnVsbDtcbiAgfVxufVxuXG4vKipcbiAqIEBlbnVtIHtzdHJpbmd9XG4gKi9cbmV4cG9ydCBlbnVtIE5hdmlnYXRpb24ge1xuICBQUkVWSU9VUyA9IFwicHJldmlvdXNcIixcbiAgTkVYVCA9IFwibmV4dFwiLFxuICBMRUZUID0gXCJsZWZ0XCIsXG4gIFJJR0hUID0gXCJyaWdodFwiLFxuICBGSVJTVCA9IFwiZmlyc3RcIixcbiAgTEFTVCA9IFwibGFzdFwiLFxuICBFUEFHRSA9IFwiZXBhZ2VcIixcbn1cblxuZXhwb3J0IHR5cGUgWm9vbVR5cGUgPSBBZGFwdGl2ZVZpZXdlci5ab29tVHlwZTtcbmV4cG9ydCBjb25zdCBab29tVHlwZSA9IEFkYXB0aXZlVmlld2VyLlpvb21UeXBlOyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIG5vLXJlZGVjbGFyZVxuXG5leHBvcnQgdHlwZSBQYWdlVmlld01vZGUgPSBBZGFwdGl2ZVZpZXdlci5QYWdlVmlld01vZGU7XG5leHBvcnQgY29uc3QgUGFnZVZpZXdNb2RlID0gQWRhcHRpdmVWaWV3ZXIuUGFnZVZpZXdNb2RlOyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIG5vLXJlZGVjbGFyZVxuXG5Qcm9maWxlLnByb2ZpbGVyLmZvcmNlUmVnaXN0ZXJFbmRUaW1pbmcoXCJsb2FkX3Zpdmxpb3N0eWxlXCIpO1xuIiwiLy8gSm9oYW5uZXMgV2lsbVxuLy8gVml2bGlvc3R5bGUgRm91bmRhdGlvblxuXG5pbXBvcnQgeyBDb3JlVmlld2VyIH0gZnJvbSBcIi4vY29yZS12aWV3ZXJcIjtcbmltcG9ydCB7IFZpdmxpb3N0eWxlVmlld3BvcnRDc3MsIFZpdmxpb3N0eWxlVmlld3BvcnRTY3JlZW5Dc3MgfSBmcm9tIFwiLi9hc3NldHNcIjtcblxuaW50ZXJmYWNlIElGcmFtZVdpbmRvd0ZvclByaW50IHtcbiAgcHJpbnRJbnN0YW5jZT86IFZpdmxpb3N0eWxlUHJpbnQ7XG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgUHJpbnRDb25maWcge1xuICB0aXRsZTogc3RyaW5nO1xuICBwcmludENhbGxiYWNrOiAoaWZyYW1lV2luOiBXaW5kb3cpID0+IHZvaWQ7XG4gIGhpZGVJZnJhbWU6IGJvb2xlYW47XG4gIHJlbW92ZUlmcmFtZTogYm9vbGVhbjtcbn1cblxuY2xhc3MgVml2bGlvc3R5bGVQcmludCB7XG4gIGh0bWxEb2M6IHN0cmluZztcbiAgdGl0bGU6IHN0cmluZztcbiAgcHJpbnRDYWxsYmFjazogKGlmcmFtZVdpbjogV2luZG93KSA9PiB2b2lkO1xuICBoaWRlSWZyYW1lOiBib29sZWFuO1xuICByZW1vdmVJZnJhbWU6IGJvb2xlYW47XG4gIGlmcmFtZTogSFRNTElGcmFtZUVsZW1lbnQ7XG4gIGlmcmFtZVdpbjogV2luZG93O1xuICB3aW5kb3c6IFdpbmRvdyAmIHR5cGVvZiBnbG9iYWxUaGlzICYgSUZyYW1lV2luZG93Rm9yUHJpbnQ7XG5cbiAgY29uc3RydWN0b3IoXG4gICAgaHRtbERvYzogc3RyaW5nLFxuICAgIHtcbiAgICAgIHRpdGxlID0gXCJcIixcbiAgICAgIHByaW50Q2FsbGJhY2sgPSAoaWZyYW1lV2luOiBXaW5kb3cpID0+IGlmcmFtZVdpbi5wcmludCgpLFxuICAgICAgaGlkZUlmcmFtZSA9IHRydWUsXG4gICAgICByZW1vdmVJZnJhbWUgPSB0cnVlLFxuICAgIH06IFByaW50Q29uZmlnLFxuICApIHtcbiAgICB0aGlzLmh0bWxEb2MgPSBodG1sRG9jO1xuICAgIHRoaXMudGl0bGUgPSB0aXRsZTtcbiAgICB0aGlzLnByaW50Q2FsbGJhY2sgPSBwcmludENhbGxiYWNrO1xuICAgIHRoaXMuaGlkZUlmcmFtZSA9IGhpZGVJZnJhbWU7XG4gICAgdGhpcy5yZW1vdmVJZnJhbWUgPSByZW1vdmVJZnJhbWU7XG4gIH1cblxuICBpbml0KCkge1xuICAgIHRoaXMuaWZyYW1lID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImlmcmFtZVwiKTtcblxuICAgIGlmICh0aGlzLmhpZGVJZnJhbWUpIHtcbiAgICAgIHRoaXMuaWZyYW1lLnN0eWxlLndpZHRoID0gXCIwXCI7IC8vIFdlIGRvbid0IHdhbnQgdGhlIGlmcmFtZSB0byBiZSBzZWVuLCBzbyB3ZSBtYWtlIGl0IHplcm8gc2l6ZSB3aXRoIHplcm8gYm9yZGVyLlxuICAgICAgdGhpcy5pZnJhbWUuc3R5bGUuaGVpZ2h0ID0gXCIwXCI7XG4gICAgICB0aGlzLmlmcmFtZS5zdHlsZS5ib3JkZXJXaWR0aCA9IFwiMFwiO1xuICAgIH1cblxuICAgIHRoaXMud2luZG93ID0gd2luZG93O1xuICAgIHRoaXMud2luZG93LnByaW50SW5zdGFuY2UgPSB0aGlzO1xuICAgIHRoaXMuaWZyYW1lLnNyY2RvYyA9IGBcbiAgICAgIDwhRE9DVFlQRSBodG1sPlxuICAgICAgPGh0bWwgZGF0YS12aXZsaW9zdHlsZS1wYWdpbmF0ZWQ9XCJ0cnVlXCI+XG4gICAgICAgIDxoZWFkPlxuICAgICAgICAgIDxtZXRhIGNoYXJzZXQ9J3V0Zi04Jy8+XG4gICAgICAgICAgPG1ldGEgbmFtZT0ndmlld3BvcnQnIGNvbnRlbnQ9J3dpZHRoPWRldmljZS13aWR0aCwgaW5pdGlhbC1zY2FsZT0xLjAnLz5cbiAgICAgICAgICA8dGl0bGU+JHt0aGlzLnRpdGxlfTwvdGl0bGU+XG4gICAgICAgICAgPHN0eWxlPiR7Vml2bGlvc3R5bGVWaWV3cG9ydENzc308L3N0eWxlPlxuICAgICAgICAgIDxzdHlsZT4ke1Zpdmxpb3N0eWxlVmlld3BvcnRTY3JlZW5Dc3N9PC9zdHlsZT5cbiAgICAgICAgICA8c3R5bGU+XG4gICAgICAgICAgICBodG1sW2RhdGEtdml2bGlvc3R5bGUtcGFnaW5hdGVkXSB7XG4gICAgICAgICAgICAgIHdpZHRoOiAxMDAlO1xuICAgICAgICAgICAgICBoZWlnaHQ6IDEwMCU7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBodG1sW2RhdGEtdml2bGlvc3R5bGUtcGFnaW5hdGVkXSBib2R5LFxuICAgICAgICAgICAgaHRtbFtkYXRhLXZpdmxpb3N0eWxlLXBhZ2luYXRlZF0gW2RhdGEtdml2bGlvc3R5bGUtdmlld2VyLXZpZXdwb3J0XSB7XG4gICAgICAgICAgICAgIHdpZHRoOiAxMDAlICFpbXBvcnRhbnQ7XG4gICAgICAgICAgICAgIGhlaWdodDogMTAwJSAhaW1wb3J0YW50O1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaHRtbFtkYXRhLXZpdmxpb3N0eWxlLXBhZ2luYXRlZF0sXG4gICAgICAgICAgICBodG1sW2RhdGEtdml2bGlvc3R5bGUtcGFnaW5hdGVkXSBib2R5IHtcbiAgICAgICAgICAgICAgbWFyZ2luOiAwO1xuICAgICAgICAgICAgICBwYWRkaW5nOiAwO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIDwvc3R5bGU+XG4gICAgICAgICAgPHN0eWxlIGlkPSd2aXZsaW9zdHlsZS1wYWdlLXJ1bGVzJz48L3N0eWxlPlxuICAgICAgICA8L2hlYWQ+XG4gICAgICAgIDxib2R5IG9ubG9hZD0ncGFyZW50LnByaW50SW5zdGFuY2UucnVuSW5JZnJhbWUod2luZG93KSc+XG4gICAgICAgICAgPGRpdiBpZD1cInZpdmxpb3N0eWxlLXZpZXdlci12aWV3cG9ydFwiPjwvZGl2PlxuICAgICAgICA8L2JvZHk+XG4gICAgICA8L2h0bWw+YDtcblxuICAgIGRvY3VtZW50LmJvZHkuYXBwZW5kQ2hpbGQodGhpcy5pZnJhbWUpO1xuICB9XG5cbiAgcnVuSW5JZnJhbWUoaWZyYW1lV2luOiBXaW5kb3cpIHtcbiAgICB0aGlzLmlmcmFtZVdpbiA9IGlmcmFtZVdpbjtcbiAgICByZXR1cm4gdGhpcy5wcmVwYXJlUHJpbnQoKVxuICAgICAgLnRoZW4oKCkgPT4gdGhpcy5icm93c2VyUHJpbnQoKSlcbiAgICAgIC50aGVuKCgpID0+IHRoaXMuY2xlYW5VcCgpKTtcbiAgfVxuXG4gIHByZXBhcmVQcmludCgpIHtcbiAgICB0aGlzLmlmcmFtZVdpbi5kb2N1bWVudC50aXRsZSA9IHRoaXMudGl0bGU7XG4gICAgY29uc3QgZG9jQmxvYiA9IG5ldyBCbG9iKFt0aGlzLmh0bWxEb2NdLCB7XG4gICAgICAgIHR5cGU6IFwidGV4dC9odG1sXCIsXG4gICAgICB9KSxcbiAgICAgIGRvY1VSTCA9IFVSTC5jcmVhdGVPYmplY3RVUkwoZG9jQmxvYiksXG4gICAgICBWaWV3ZXIgPSBuZXcgQ29yZVZpZXdlcihcbiAgICAgICAge1xuICAgICAgICAgIHZpZXdwb3J0RWxlbWVudDogdGhpcy5pZnJhbWVXaW4uZG9jdW1lbnQuYm9keVxuICAgICAgICAgICAgLmZpcnN0RWxlbWVudENoaWxkIGFzIEhUTUxFbGVtZW50LFxuICAgICAgICAgIHdpbmRvdzogdGhpcy5pZnJhbWVXaW4sXG4gICAgICAgICAgZGVidWc6IHRydWUsXG4gICAgICAgIH0sXG4gICAgICAgIHtcbiAgICAgICAgICBkZWZhdWx0UGFwZXJTaXplOiB7XG4gICAgICAgICAgICB3aWR0aDogNzk0LCAvLyBUaGVzZSBudW1iZXJzIGdpdmUgd2VpcmQgb3V0cHV0LCBidXQgbm90IHNldHRpbmcgdGhlbSBjcmFzaGVzIHRoZSBicm93c2VyIHdoZW4gdGhlcmUgaXMgbm8gQ1NTLlxuICAgICAgICAgICAgaGVpZ2h0OiAxMTIyLFxuICAgICAgICAgIH0sXG4gICAgICAgIH0sXG4gICAgICApO1xuICAgIHJldHVybiBuZXcgUHJvbWlzZSgocmVzb2x2ZSkgPT4ge1xuICAgICAgVmlld2VyLmFkZExpc3RlbmVyKFwicmVhZHlzdGF0ZWNoYW5nZVwiLCAoKSA9PiB7XG4gICAgICAgIGlmIChWaWV3ZXIucmVhZHlTdGF0ZSA9PT0gXCJjb21wbGV0ZVwiKSB7XG4gICAgICAgICAgcmVzb2x2ZSgpO1xuICAgICAgICB9XG4gICAgICB9KTtcblxuICAgICAgVmlld2VyLmxvYWREb2N1bWVudCh7XG4gICAgICAgIHVybDogZG9jVVJMLFxuICAgICAgfSk7XG4gICAgfSk7XG4gIH1cblxuICBicm93c2VyUHJpbnQoKSB7XG4gICAgdGhpcy5wcmludENhbGxiYWNrKHRoaXMuaWZyYW1lV2luKTtcbiAgfVxuXG4gIGNsZWFuVXAoKSB7XG4gICAgZGVsZXRlIHRoaXMud2luZG93LnByaW50SW5zdGFuY2U7XG4gICAgaWYgKHRoaXMucmVtb3ZlSWZyYW1lKSB7XG4gICAgICB0aGlzLmlmcmFtZS5wYXJlbnRFbGVtZW50LnJlbW92ZUNoaWxkKHRoaXMuaWZyYW1lKTtcbiAgICB9XG4gIH1cbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHByaW50SFRNTChodG1sRG9jOiBzdHJpbmcsIGNvbmZpZzogUHJpbnRDb25maWcpIHtcbiAgY29uc3QgaW5zdGFuY2UgPSBuZXcgVml2bGlvc3R5bGVQcmludChodG1sRG9jLCBjb25maWcpO1xuICBpbnN0YW5jZS5pbml0KCk7XG59XG4iLG51bGwsbnVsbCxudWxsLG51bGwsbnVsbCxudWxsLG51bGwsbnVsbCxudWxsLG51bGwsbnVsbCxudWxsLG51bGwsbnVsbCxudWxsLG51bGwsbnVsbCxudWxsLG51bGxdLCJuYW1lcyI6WyJuIiwiQSIsInRoaXMiLCJldmFsIiwidyIsImRvY3VtZW50IiwiUiIsIm5hdmlnYXRvciIsInYiLCJqUXVlcnkiLCJIIiwiSlNPTiIsIm1vZHVsZSIsImV4cG9ydHMiLCJTIiwiVCIsIksiLCJhIiwiYyIsIlciLCJYIiwiYiIsImQiLCJzZXRUaW1lb3V0IiwiWSIsImNsZWFyVGltZW91dCIsIloiLCJwYyIsImdiIiwicWMiLCJhYSIsInMiLCJiYSIsInFkIiwiZSIsInIiLCJyYSIsIlFiIiwibWIiLCJ1YyIsIkkiLCJKIiwiZGEiLCIkYyIsIkphIiwiZ2QiLCJmIiwiZyIsInNwbGl0IiwibGVuZ3RoIiwiTCIsInZlcnNpb24iLCJvcHRpb25zIiwiZGVmZXJVcGRhdGVzIiwidXNlT25seU5hdGl2ZUV2ZW50cyIsImZvcmVhY2hIaWRlc0Rlc3Ryb3llZCIsImNhbGwiLCJfX3Byb3RvX18iLCJsIiwibWF0Y2giLCJxIiwiRCIsIk5hIiwiam9pbiIsIk9iamVjdCIsInByb3RvdHlwZSIsImhhc093blByb3BlcnR5IiwiQXJyYXkiLCJoIiwiU3ltYm9sIiwibSIsImsiLCJ0ZXN0IiwidXNlckFnZW50IiwiTW91c2VFdmVudHMiLCJ0IiwicHJvcGVydHljaGFuZ2UiLCJwIiwiY3JlYXRlRWxlbWVudCIsImdldEVsZW1lbnRzQnlUYWdOYW1lIiwiaW5uZXJIVE1MIiwiSmMiLCJpbmRleE9mIiwiTGIiLCJQYSIsInNwbGljZSIsInNoaWZ0Iiwid2MiLCJwdXNoIiwiTWIiLCJqYiIsIk5iIiwiYXBwbHkiLCJiYyIsIkJhIiwiZXh0ZW5kIiwic2V0UHJvdG90eXBlT2YiLCJBYiIsIlAiLCJHYSIsIlRiIiwiZmlyc3RDaGlsZCIsInJlbW92ZU5vZGUiLCJZYiIsImxhIiwib3duZXJEb2N1bWVudCIsImFwcGVuZENoaWxkIiwib2EiLCJDYSIsImNsb25lTm9kZSIsInZhIiwiWGMiLCJub2RlVHlwZSIsInBhcmVudE5vZGUiLCJpbnNlcnRCZWZvcmUiLCJVYSIsIm5leHRTaWJsaW5nIiwiWmMiLCJzZXRBdHRyaWJ1dGUiLCJzZWxlY3RlZCIsIkRiIiwidHJpbSIsInRvU3RyaW5nIiwicmVwbGFjZSIsIlVkIiwic3Vic3RyaW5nIiwidmQiLCJjb250YWlucyIsImNvbXBhcmVEb2N1bWVudFBvc2l0aW9uIiwiU2IiLCJkb2N1bWVudEVsZW1lbnQiLCJrZCIsInRhZ05hbWUiLCJ0b0xvd2VyQ2FzZSIsIkFjIiwib25FcnJvciIsImFyZ3VtZW50cyIsIkdjIiwiQiIsImFkZEV2ZW50TGlzdGVuZXIiLCJhdHRhY2hFdmVudCIsIkVycm9yIiwiemEiLCJkZXRhY2hFdmVudCIsIm9uIiwiRmIiLCJ0eXBlIiwiY3JlYXRlRXZlbnQiLCJkaXNwYXRjaEV2ZW50IiwiaW5pdEV2ZW50IiwiY2xpY2siLCJmaXJlRXZlbnQiLCJ0cmlnZ2VyIiwiTyIsIkViIiwiY2xhc3NMaXN0IiwiY2xhc3NOYW1lIiwiYmFzZVZhbCIsIkJiIiwiY3JlYXRlVGV4dE5vZGUiLCJkYXRhIiwiQWQiLCJZYyIsIm5hbWUiLCJjaGFyQ29kZUF0IiwibWVyZ2VBdHRyaWJ1dGVzIiwic3R5bGUiLCJ6b29tIiwid2QiLCJ3aWR0aCIsIlBkIiwiRGEiLCJaZCIsIiRkIiwiTGMiLCJjb25jYXQiLCJOZCIsInBhcnNlIiwiRnVuY3Rpb24iLCJoYyIsInN0cmluZ2lmeSIsIk9kIiwicGFyYW1zIiwiaW5jbHVkZUZpZWxkcyIsImFjdGlvbiIsInZhbHVlIiwiZGlzcGxheSIsIm1ldGhvZCIsImJvZHkiLCJzdWJtaXR0ZXIiLCJzdWJtaXQiLCJyZW1vdmVDaGlsZCIsImJpbmQiLCJzbGljZSIsIkRhdGUiLCJnZXRUaW1lIiwiZ2V0Iiwic2V0IiwiVWIiLCJjbGVhciIsImNsZWFuRXh0ZXJuYWxEYXRhIiwiY2hpbGROb2RlcyIsInliIiwidSIsIkciLCJjbGVhbkRhdGEiLCJ0aGVhZCIsInRib2R5IiwidGZvb3QiLCJ0ciIsInRkIiwidGgiLCJvcHRpb24iLCJvcHRncm91cCIsInVhIiwicGFyc2VIVE1MIiwiY2xlYW4iLCJwYXJlbnRXaW5kb3ciLCJkZWZhdWx0VmlldyIsImlubmVyU2hpdiIsImxhc3RDaGlsZCIsIk1kIiwicGFyZW50RWxlbWVudCIsImZjIiwiaHRtbCIsIlVjIiwibm9kZVZhbHVlIiwidWQiLCJLZCIsIlhiIiwiTWF0aCIsInJhbmRvbSIsImJkIiwiY2QiLCJuYSIsInNjaGVkdWxlciIsIk11dGF0aW9uT2JzZXJ2ZXIiLCJvYnNlcnZlIiwiYXR0cmlidXRlcyIsInRvZ2dsZSIsIm9ucmVhZHlzdGF0ZWNoYW5nZSIsInpiIiwiY2FuY2VsIiwicmVzZXRGb3JUZXN0aW5nIiwiU2QiLCJUYSIsInRocm90dGxlIiwidGhyb3R0bGVFdmFsdWF0aW9uIiwiJCIsInJlYWQiLCJ3cml0ZSIsInJhdGVMaW1pdCIsInRpbWVvdXQiLCJIYiIsInViIiwiZGVmZXJyZWQiLCJub3RpZnlTdWJzY3JpYmVycyIsIm5vdGlmeSIsImVxdWFsaXR5Q29tcGFyZXIiLCJ1bmRlZmluZWQiLCJudW1iZXIiLCJzdHJpbmciLCJpYyIsImxjIiwibWMiLCJJYiIsImZiIiwiSmIiLCJxYiIsIlUiLCJjaGFuZ2UiLCJzYyIsInN1YnNjcmliZSIsImhiIiwiUWEiLCJHYiIsIldhIiwiZWQiLCJ4YyIsImVuZCIsIm9iIiwiRGQiLCJuYyIsInNiIiwicmMiLCJCZCIsImZuIiwiUWMiLCJwb3AiLCJjYyIsIm9kIiwicGQiLCJmZCIsInFhIiwibyIsIlZhIiwiWWEiLCJZZCIsInRhIiwieWEiLCJ4YSIsIkYiLCJNYSIsIlphIiwiTmMiLCJIYSIsInRyYWNrQXJyYXlDaGFuZ2VzIiwicmVtb3ZlIiwicmVtb3ZlQWxsIiwiZGVzdHJveSIsIl9kZXN0cm95IiwiZGVzdHJveUFsbCIsInNvcnRlZCIsInNvcnQiLCJyZXZlcnNlZCIsInJldmVyc2UiLCJ6YyIsIlBjIiwiUGIiLCJPYiIsInNwYXJzZSIsInN0YXR1cyIsImluZGV4IiwibWluIiwibWF4IiwiS2MiLCJuYiIsImthIiwiWGEiLCJoYSIsInNhIiwicmIiLCJqYyIsIndiIiwiV2MiLCJvd25lciIsImRpc3Bvc2VXaGVuTm9kZUlzUmVtb3ZlZCIsIlNhIiwiZGlzcG9zZVdoZW4iLCJSYiIsIlYiLCJJYyIsIkMiLCJwdXJlIiwiZGVmZXJFdmFsdWF0aW9uIiwiZWEiLCJqYSIsIkthIiwiVmIiLCJMYSIsIklhIiwiSmQiLCJSZCIsIkhjIiwiemQiLCJ5ZCIsIk4iLCJPYyIsIkZkIiwieGIiLCJSZWdFeHAiLCJTdHJpbmciLCJOdW1iZXIiLCJCb29sZWFuIiwic2F2ZSIsInRvSlNPTiIsImtleXMiLCJ2YWx1ZXMiLCJhZCIsImNvbnN0cnVjdG9yIiwiV2QiLCJtYSIsIlByb21pc2UiLCJNIiwiX19rb19faGFzRG9tRGF0YU9wdGlvblZhbHVlX18iLCIkYiIsImdldEF0dHJpYnV0ZU5vZGUiLCJzcGVjaWZpZWQiLCJ0ZXh0Iiwic2VsZWN0ZWRJbmRleCIsImNiIiwic2l6ZSIsIngiLCJrZXkiLCJ1bmtub3duIiwic3Vic3RyIiwiUmEiLCJ3YSIsImFjIiwidmIiLCJnZXRCaW5kaW5nSGFuZGxlciIsInByZXByb2Nlc3MiLCJ2YWx1ZUFjY2Vzc29ycyIsImJpbmRpbmdQYXJhbXMiLCJJZCIsImViIiwiY3JlYXRlQ29tbWVudCIsInVsIiwib2wiLCJFYSIsIlZjIiwiV2IiLCJDZCIsIlZkIiwiU2MiLCJnYSIsIm5kIiwibm9kZUhhc0JpbmRpbmdzIiwiZ2V0QXR0cmlidXRlIiwiaiIsImdldENvbXBvbmVudE5hbWVGb3JOb2RlIiwiZ2V0QmluZGluZ3MiLCJnZXRCaW5kaW5nc1N0cmluZyIsInBhcnNlQmluZGluZ3NTdHJpbmciLCJ0YyIsImdldEJpbmRpbmdBY2Nlc3NvcnMiLCJtZXNzYWdlIiwiaW5zdGFuY2UiLCJ6IiwiVGMiLCJub2RlIiwieWMiLCJrYiIsIktiIiwicHJlcHJvY2Vzc05vZGUiLCJpIiwiYmluZGluZ0NvbnRleHRGb3JEZXNjZW5kYW50cyIsImhkIiwiY29udGV4dCIsIlpiIiwiaGFzIiwiRWMiLCJwYSIsIkNiIiwiY2EiLCJhZnRlciIsIk1jIiwiaW5pdCIsInVwZGF0ZSIsIiRkYXRhIiwiY29udHJvbHNEZXNjZW5kYW50QmluZGluZ3MiLCJzaG91bGRCaW5kRGVzY2VuZGFudHMiLCJmYSIsInNjcmlwdCIsInRleHRhcmVhIiwidGVtcGxhdGUiLCIkcGFyZW50cyIsIiRyb290Iiwia28iLCIkcmF3RGF0YSIsImRhdGFEZXBlbmRlbmN5IiwiZXhwb3J0RGVwZW5kZW5jaWVzIiwiY3JlYXRlQ2hpbGRDb250ZXh0IiwiYXMiLCJub0NoaWxkQ29udGV4dCIsIiRwYXJlbnRDb250ZXh0IiwiJHBhcmVudCIsInVuc2hpZnQiLCJzZCIsIkNjIiwiRmEiLCJub3RpZnlJbW1lZGlhdGVseSIsIlRkIiwiaWIiLCJsZCIsIk9hIiwidmMiLCJEYyIsInN5bmNocm9ub3VzIiwiZGVmaW5pdGlvbiIsIkdkIiwibG9hZGVycyIsInN1cHByZXNzTG9hZGVyRXhjZXB0aW9ucyIsIkJjIiwib2MiLCJ2aWV3TW9kZWwiLCJjb250ZW50IiwiRG9jdW1lbnRGcmFnbWVudCIsInJlcXVpcmUiLCJYZCIsInJlZ2lzdGVyIiwidGIiLCJ1bnJlZ2lzdGVyIiwiRmMiLCJnZXRDb25maWciLCJsb2FkQ29tcG9uZW50IiwibG9hZFRlbXBsYXRlIiwiZWxlbWVudCIsIkhUTUxFbGVtZW50IiwiZ2V0RWxlbWVudEJ5SWQiLCJsb2FkVmlld01vZGVsIiwiZGQiLCIkcmF3IiwiY29tcG9uZW50IiwiY3JlYXRlRG9jdW1lbnRGcmFnbWVudCIsImRpc3Bvc2UiLCJjcmVhdGVWaWV3TW9kZWwiLCJ0ZW1wbGF0ZU5vZGVzIiwiJGNvbXBvbmVudCIsIiRjb21wb25lbnRUZW1wbGF0ZU5vZGVzIiwia29EZXNjZW5kYW50c0NvbXBsZXRlIiwiYXR0ciIsImxvb2t1cE5hbWVzcGFjZVVSSSIsInJlbW92ZUF0dHJpYnV0ZU5TIiwicmVtb3ZlQXR0cmlidXRlIiwic2V0QXR0cmlidXRlTlMiLCJjaGVja2VkIiwidW5pcXVlTmFtZSIsImNoZWNrZWRWYWx1ZSIsIl9fa29fX2Nzc1ZhbHVlIiwiY3NzIiwiZW5hYmxlIiwiZGlzYWJsZWQiLCJkaXNhYmxlIiwiZXZlbnQiLCJwcmV2ZW50RGVmYXVsdCIsInJldHVyblZhbHVlIiwiY2FuY2VsQnViYmxlIiwic3RvcFByb3BhZ2F0aW9uIiwiZm9yZWFjaCIsIlJjIiwiaW5jbHVkZURlc3Ryb3llZCIsImFmdGVyQWRkIiwiYmVmb3JlUmVtb3ZlIiwiYWZ0ZXJSZW5kZXIiLCJiZWZvcmVNb3ZlIiwiYWZ0ZXJNb3ZlIiwidGVtcGxhdGVFbmdpbmUiLCJoYXNmb2N1cyIsIl9fa29faGFzZm9jdXNVcGRhdGluZyIsImFjdGl2ZUVsZW1lbnQiLCJfX2tvX2hhc2ZvY3VzTGFzdFZhbHVlIiwiZm9jdXMiLCJibHVyIiwiaGFzRm9jdXMiLCJsZXQiLCJRIiwibXVsdGlwbGUiLCJzY3JvbGxUb3AiLCJlYyIsImFicyIsInNlbGVjdGVkT3B0aW9ucyIsInNldFByb3BlcnR5IiwidG9VcHBlckNhc2UiLCJpc05hTiIsInBhcnNlRmxvYXQiLCJvcGVyYSIsInBhcnNlSW50IiwidGV4dElucHV0IiwieSIsInByb3BlcnR5TmFtZSIsInRleHRpbnB1dCIsInJkIiwidXNpbmciLCJhdXRvY29tcGxldGUiLCJmb3JtIiwidmlzaWJsZSIsImhpZGRlbiIsInJlbmRlclRlbXBsYXRlU291cmNlIiwiY3JlYXRlSmF2YVNjcmlwdEV2YWx1YXRvckJsb2NrIiwibWFrZVRlbXBsYXRlU291cmNlIiwiaWEiLCJyZW5kZXJUZW1wbGF0ZSIsImlzVGVtcGxhdGVSZXdyaXR0ZW4iLCJhbGxvd1RlbXBsYXRlUmV3cml0aW5nIiwicmV3cml0ZVRlbXBsYXRlIiwia2MiLCJ4ZCIsIkxkIiwibWQiLCJub2RlTmFtZSIsImFiIiwibm9kZXMiLCJsYiIsImpkIiwiYmIiLCJwcmV2aW91c1NpYmxpbmciLCJnYyIsImRjIiwiUWQiLCIkaW5kZXgiLCJpZm5vdCIsIm1vdmVkIiwiZG9udExpbWl0TW92ZXMiLCJBYSIsInBiIiwiX2NvdW50V2FpdGluZ0ZvclJlbW92ZSIsIkUiLCJFZCIsIiRhIiwiSGQiLCJ0bXBsIiwidGFnIiwib3BlbiIsImtvQmluZGluZ0NvbnRleHQiLCJ0ZW1wbGF0ZU9wdGlvbnMiLCJhcHBlbmRUbyIsImZyYWdtZW50cyIsImFkZFRlbXBsYXRlIiwia29fY29kZSIsImtvX3dpdGgiLCJjbG9zZSIsIkRJRkZfREVMRVRFIiwiZGlmZl9tYWluIiwidGV4dDEiLCJ0ZXh0MiIsImN1cnNvcl9wb3MiLCJfZml4X3VuaWNvZGUiLCJlZGl0ZGlmZiIsIm9sZFRleHQiLCJuZXdUZXh0Iiwib2xkUmFuZ2UiLCJuZXdSYW5nZSIsIm9sZExlbmd0aCIsIm5ld0xlbmd0aCIsIm9sZEN1cnNvciIsIm9sZEJlZm9yZSIsIm9sZEFmdGVyIiwibWF5YmVOZXdDdXJzb3IiLCJuZXdDdXJzb3IiLCJuZXdCZWZvcmUiLCJuZXdBZnRlciIsInByZWZpeExlbmd0aCIsIm9sZFByZWZpeCIsIm5ld1ByZWZpeCIsIm1ha2VfZWRpdF9zcGxpY2UiLCJjdXJzb3IiLCJzdWZmaXhMZW5ndGgiLCJvbGRTdWZmaXgiLCJuZXdTdWZmaXgiLCJmaW5kX2N1cnNvcl9lZGl0X2RpZmYiLCJjb21tb25sZW5ndGgiLCJkaWZmX2NvbW1vblByZWZpeCIsImNvbW1vbnByZWZpeCIsImRpZmZfY29tbW9uU3VmZml4IiwiY29tbW9uc3VmZml4IiwiZGlmZnMiLCJsb25ndGV4dCIsInNob3J0dGV4dCIsImhtIiwiZGlmZl9oYWxmTWF0Y2hJXyIsImJlc3RfbG9uZ3RleHRfYSIsImJlc3RfbG9uZ3RleHRfYiIsImJlc3Rfc2hvcnR0ZXh0X2EiLCJiZXN0X3Nob3J0dGV4dF9iIiwic2VlZCIsImZsb29yIiwiYmVzdF9jb21tb24iLCJ0ZXh0MV9hIiwidGV4dDFfYiIsInRleHQyX2EiLCJ0ZXh0Ml9iIiwiaG0xIiwiY2VpbCIsImhtMiIsIm1pZF9jb21tb24iLCJkaWZmX2hhbGZNYXRjaF8iLCJkaWZmc19hIiwiZGlmZnNfYiIsInRleHQxX2xlbmd0aCIsInRleHQyX2xlbmd0aCIsIm1heF9kIiwidl9vZmZzZXQiLCJ2X2xlbmd0aCIsInYxIiwidjIiLCJkZWx0YSIsImZyb250IiwiazFzdGFydCIsImsxZW5kIiwiazJzdGFydCIsImsyZW5kIiwiazEiLCJrMV9vZmZzZXQiLCJ5MSIsIngxIiwiY2hhckF0IiwiazJfb2Zmc2V0IiwieDIiLCJkaWZmX2Jpc2VjdFNwbGl0XyIsImsyIiwieTIiLCJkaWZmX2Jpc2VjdF8iLCJkaWZmX2NvbXB1dGVfIiwiZGlmZl9jbGVhbnVwTWVyZ2UiLCJ0ZXh0MWEiLCJ0ZXh0MmEiLCJ0ZXh0MWIiLCJ0ZXh0MmIiLCJkaWZmc2IiLCJwb2ludGVybWluIiwicG9pbnRlcm1heCIsInBvaW50ZXJtaWQiLCJwb2ludGVyc3RhcnQiLCJpc19zdXJyb2dhdGVfcGFpcl9zdGFydCIsInBvaW50ZXJlbmQiLCJpc19zdXJyb2dhdGVfcGFpcl9lbmQiLCJmaXhfdW5pY29kZSIsInBvaW50ZXIiLCJjb3VudF9kZWxldGUiLCJjb3VudF9pbnNlcnQiLCJ0ZXh0X2RlbGV0ZSIsInRleHRfaW5zZXJ0IiwicHJldmlvdXNfZXF1YWxpdHkiLCJlbmRzX3dpdGhfcGFpcl9zdGFydCIsInN0cmF5Iiwic3RhcnRzX3dpdGhfcGFpcl9lbmQiLCJjaGFuZ2VzIiwiY2hhckNvZGUiLCJzdHIiLCJiZWZvcmUiLCJvbGRNaWRkbGUiLCJuZXdNaWRkbGUiLCJ0dXBsZXMiLCJyZXQiLCJyZW1vdmVfZW1wdHlfdHVwbGVzIiwiZGlmZiIsIklOU0VSVCIsIkRFTEVURSIsIkVRVUFMIiwiTW9kZSIsIlBhZ2VTaWRlIiwiUmVhZHlTdGF0ZSIsIkxvZ0xldmVsIiwic2V0RGVidWciLCJpc0RlYnVnIiwicGFnZVByb2dyZXNzaW9uT2YiLCJQYWdlUHJvZ3Jlc3Npb24iLCJMVFIiLCJSVEwiLCJhcmd1bWVudHNUb0Vycm9ySW5mbyIsImFyZ3MiLCJmcm9tIiwiZXJyb3IiLCJtZXNzYWdlcyIsImJ1aWxkTWVzc2FnZUFuZFN0YWNrVHJhY2UiLCJzdGFjayIsImZyYW1lVHJhY2UiLCJIT09LUyIsImxvZ2dlciIsIm9wdF9jb25zb2xlIiwiY29uc29sZURlYnVnIiwibXNnIiwiZGVidWciLCJsb2ciLCJjb25zb2xlIiwiY29uc29sZUluZm8iLCJpbmZvIiwiY29uc29sZVdhcm4iLCJ3YXJuIiwiY29uc29sZUVycm9yIiwidHJpZ2dlckxpc3RlbmVycyIsImxldmVsIiwibGlzdGVuZXJzIiwiZm9yRWFjaCIsImxpc3RlbmVyIiwiYWRkTGlzdGVuZXIiLCJERUJVRyIsIklORk8iLCJXQVJOIiwiRVJST1IiLCJob29rcyIsInJlZ2lzdGVySG9vayIsImhvb2tzRm9yTmFtZSIsIkxvZ2dpbmciLCJyZW1vdmVIb29rIiwiZ2V0SG9va3NGb3JOYW1lIiwicGx1Z2luIiwiUHJvZmlsZXIiLCJwZXJmb3JtYW5jZUluc3RhbmNlIiwicmVnaXN0ZXJUaW1pbmciLCJub29wIiwicmVnaXN0ZXJTdGFydFRpbWluZyIsInJlZ2lzdGVyRW5kVGltaW5nIiwiZm9yY2VSZWdpc3RlclN0YXJ0VGltaW5nIiwidGltZXN0YW1wIiwiZm9yY2VSZWdpc3RlckVuZFRpbWluZyIsInByaW50VGltaW5ncyIsInRpbWVzdGFtcHMiLCJzdCIsInN0YW1wcyIsInN0YXJ0IiwiaXNFbmFibGVkIiwic3RhcnRFbmQiLCJub3ciLCJmYWxsYmFja1BlcmZvcm1hbmNlSW5zdGFuY2UiLCJwcm9maWxlciIsIndpbmRvdyIsInBlcmZvcm1hbmNlIiwicHJvZmlsZSIsImZpcnN0TGV0dGVyUGF0dGVybiIsImVtcHR5T2JqIiwic3RyaW5nVG9KU09OIiwic3RyaXBGcmFnbWVudCIsInVybCIsImJhc2VVUkwiLCJsb2NhdGlvbiIsImhyZWYiLCJzZXRCYXNlVVJMIiwiTlMiLCJyZXNvdXJjZUJhc2VVUkwiLCJzZXRSZXNvdXJjZUJhc2VVUkwiLCJyZXNvbHZlVVJMIiwicmVsVVJMIiwibGFzdEluZGV4T2YiLCJ1cmxPcHRpb24iLCJjb252ZXJ0U3BlY2lhbFVSTCIsImV4ZWMiLCJhc1N0cmluZyIsIlByaW9yaXR5UXVldWUiLCJxdWV1ZSIsImFkZCIsIml0ZW0iLCJwYXJlbnRJbmRleCIsInBhcmVudCIsImNvbXBhcmUiLCJwZWVrIiwicmVzdWx0IiwiY3VyciIsImNoaWxkSW5kZXgiLCJrbm93blByZWZpeGVzIiwicHJvcE5hbWVNYXAiLCJjaGVja0lmUHJvcGVydHlTdXBwb3J0ZWQiLCJwcmVmaXgiLCJwcm9wIiwicHJvYmUiLCJjc3NQcm9wTmFtZSIsInR4dCIsImdldFByZWZpeGVkUHJvcGVydHlOYW1lcyIsInByZWZpeGVkIiwic2V0Q1NTUHJvcGVydHkiLCJlbGVtIiwicHJlZml4ZWRQcm9wZXJ0eU5hbWVzIiwiZXJyIiwiZ2V0Q1NTUHJvcGVydHkiLCJvcHRfdmFsdWUiLCJwcm9wZXJ0eU5hbWVzIiwiZ2V0UHJvcGVydHlWYWx1ZSIsImdldExhbmdBdHRyaWJ1dGUiLCJsYW5nIiwiZ2V0QXR0cmlidXRlTlMiLCJYTUwiLCJuYW1lc3BhY2VVUkkiLCJYSFRNTCIsIlN0cmluZ0J1ZmZlciIsImFwcGVuZCIsImxpc3QiLCJlc2NhcGVDaGFyIiwiZXNjYXBlQ1NTSWRlbnQiLCJlc2NhcGVDU1NTdHIiLCJsaWdodFVSTEVuY29kZSIsImVuY29kZVVSSUNvbXBvbmVudCIsImlzTGV0dGVyIiwiY2giLCJlc2NhcGVOYW1lU3RyVG9IZXgiLCJlc2NhcGVSZWdFeHAiLCJiaW5hcnlTZWFyY2giLCJoaWdoIiwiZ29vZCIsIm51bWJlckNvbXBhcmUiLCJpbmRleEFycmF5IiwiYXJyIiwibWFwIiwibXVsdGlJbmRleEFycmF5IiwiU2ltcGxlRXZlbnRUYXJnZXQiLCJldnQiLCJ0YXJnZXQiLCJjdXJyZW50VGFyZ2V0IiwiY2FwdHVyZSIsInJlbW92ZUV2ZW50TGlzdGVuZXIiLCJoYXNWZXJ0aWNhbEJCb3hCdWciLCJoYXNJbmxpbmVCbG9ja0p1c3RpZmljYXRpb25CdWciLCJoYXNTb2Z0V3JhcE9wcG9ydHVuaXR5QWZ0ZXJIeXBoZW5CdWciLCJoYXNTb2Z0V3JhcE9wcG9ydHVuaXR5QnlXYnJCdWciLCJnZXRJZCIsImlkdHh0IiwiZXNjYXBlIiwidW5lc2NhcGVDaGFyIiwidW5lc2NhcGUiLCJwYXJzZUV4dFZhbCIsImV4dHN0ciIsInBhcnNlRXh0IiwiZXh0IiwiUmVmU3RlcCIsImFwcGx5VG8iLCJwb3MiLCJDaGlsZFN0ZXAiLCJpZCIsInNpZGVCaWFzIiwiY2hpbGQiLCJjaGlsZEVsZW1lbnRzIiwiY2hpbGRyZW4iLCJjaGlsZEVsZW1lbnRDb3VudCIsIm5leHQiLCJPZmZzZXRTdGVwIiwib2Zmc2V0IiwidGV4dEJlZm9yZSIsInRleHRBZnRlciIsInRleHRMZW5ndGgiLCJ0ZXh0Q29udGVudCIsIkZyYWdtZW50IiwiZnJvbVN0cmluZyIsImZyYWdzdHIiLCJkZWNvZGVVUklDb21wb25lbnQiLCJzdGVwcyIsIkJhc2UiLCJuYXZpZ2F0ZSIsImRvYyIsInJlZiIsInByZXBlbmRQYXRoRnJvbU5vZGUiLCJjbG9uZVByZWZlcmVuY2VzIiwicHJlZiIsImZvbnRGYW1pbHkiLCJsaW5lSGVpZ2h0IiwibWFyZ2luIiwiaHlwaGVuYXRlIiwiY29sdW1uV2lkdGgiLCJob3Jpem9udGFsIiwibmlnaHRNb2RlIiwic3ByZWFkVmlldyIsInBhZ2VCb3JkZXIiLCJlbmFibGVkTWVkaWFUeXBlcyIsImFzc2lnbiIsImRlZmF1bHRQYXBlclNpemUiLCJkZWZhdWx0UHJlZmVyZW5jZXNJbnN0YW5jZSIsInZpdmxpb3N0eWxlIiwicHJpbnQiLCJTcGVjaWFsIiwibGV0dGVyYm94Iiwidmlld1ciLCJ2aWV3SCIsIm9ialciLCJvYmpIIiwic2NhbGUiLCJjc3NTdHJpbmciLCJjc3NJZGVudCIsIm1ha2VRdWFsaWZpZWROYW1lIiwib2JqTmFtZSIsIm1lbWJlck5hbWUiLCJuZXh0S2V5SW5kZXgiLCJMZXhpY2FsU2NvcGUiLCJyZXNvbHZlciIsInNjb3BlS2V5IiwiemVybyIsIkNvbnN0Iiwib25lIiwiX3RydWUiLCJfZmFsc2UiLCJidWlsdElucyIsInJvdW5kIiwic3FydCIsInR5cGVvZiIsImRlZmluZUJ1aWx0SW5OYW1lIiwicGFnZVdpZHRoIiwicGFnZUhlaWdodCIsImZvbnRTaXplIiwicHViVGl0bGUiLCJkb2NUaXRsZSIsIk5hdGl2ZSIsImRlZmluZU5hbWUiLCJxdWFsaWZpZWROYW1lIiwidmFsIiwiZGVmaW5lRnVuYyIsImZ1bmNzIiwiZGVmaW5lQnVpbHRJbiIsImlzVmlld3BvcnRSZWxhdGl2ZUxlbmd0aFVuaXQiLCJ1bml0IiwiZGVmYXVsdFVuaXRTaXplcyIsInB4IiwiaW4iLCJwdCIsImNtIiwibW0iLCJlbSIsInJlbSIsImV4IiwiZHBweCIsImRwaSIsImRwY20iLCJuZWVkVW5pdENvbnZlcnNpb24iLCJDb250ZXh0Iiwicm9vdFNjb3BlIiwidmlld3BvcnRXaWR0aCIsInZpZXdwb3J0SGVpZ2h0IiwiYWN0dWFsUGFnZVdpZHRoIiwiYWN0dWFsUGFnZUhlaWdodCIsImluaXRpYWxGb250U2l6ZSIsInJvb3RGb250U2l6ZSIsImdldFNjb3BlQ29udGV4dCIsInNjb3BlIiwic2NvcGVzIiwiY2xlYXJTY29wZSIsInF1ZXJ5VW5pdFNpemUiLCJpc1Jvb3QiLCJwdnciLCJwdmgiLCJ2dyIsInBhZ2VBcmVhV2lkdGgiLCJ2aCIsInBhZ2VBcmVhSGVpZ2h0IiwicGFnZVZlcnRpY2FsIiwiZXZhbE5hbWUiLCJldmFsQ2FsbCIsIm5vQnVpbHRJbkV2YWwiLCJldmFsdWF0ZSIsImV2YWxNZWRpYU5hbWUiLCJub3QiLCJlbmFibGVkIiwiZXZhbE1lZGlhVGVzdCIsImZlYXR1cmUiLCJyZXEiLCJhY3R1YWwiLCJzY3JlZW4iLCJhdmFpbFdpZHRoIiwiYXZhaWxIZWlnaHQiLCJwaXhlbERlcHRoIiwicXVlcnlWYWwiLCJzdG9yZVZhbCIsIlZhbCIsImJ1ZiIsInByaW9yaXR5IiwiZXZhbHVhdGVDb3JlIiwiZXhwYW5kIiwiZGVwZW5kQ29yZSIsIm90aGVyIiwiZGVwZW5kZW5jeUNhY2hlIiwiZGVwZW5kT3V0ZXIiLCJjYWNoZWQiLCJkZXBlbmQiLCJpc01lZGlhTmFtZSIsIlByZWZpeCIsIl90aGlzIiwiZ2V0T3AiLCJldmFsUHJlZml4IiwiSW5maXgiLCJsaHMiLCJyaHMiLCJfdGhpczIiLCJnZXRQcmlvcml0eSIsImV2YWxJbmZpeCIsInRoaXNQcmlvcml0eSIsIkxvZ2ljYWwiLCJDb21wYXJpc29uIiwiQWRkaXRpdmUiLCJNdWx0aXBsaWNhdGl2ZSIsIk5vdCIsIk5lZ2F0ZSIsIkFuZCIsIkFuZE1lZGlhIiwiT3IiLCJPck1lZGlhIiwiTHQiLCJMZSIsIkd0IiwiR2UiLCJFcSIsIk5lIiwiQWRkIiwiU3VidHJhY3QiLCJNdWx0aXBseSIsIkRpdmlkZSIsIk1vZHVsbyIsIk51bWVyaWMiLCJudW0iLCJfdGhpczMiLCJOYW1lZCIsIl90aGlzNCIsIk1lZGlhTmFtZSIsIl90aGlzNSIsIl90aGlzNiIsIkNhbGwiLCJfdGhpczciLCJleHBhbmRlZFBhcmFtcyIsImV4cGFuZGVkIiwiQ29uZCIsImNvbmQiLCJpZlRydWUiLCJpZkZhbHNlIiwiX3RoaXM4IiwiX3RoaXM5IiwiTWVkaWFUZXN0IiwiX3RoaXMxMCIsIlBhcmFtIiwiX3RoaXMxMSIsImFuZCIsInN1YiIsIm11bCIsImRpdiIsIlZpc2l0b3IiLCJ2aXNpdFZhbHVlcyIsInZpc2l0IiwidmlzaXRFbXB0eSIsImVtcHR5IiwidmlzaXRTbGFzaCIsInNsYXNoIiwidmlzaXRTdHIiLCJ2aXNpdElkZW50IiwiaWRlbnQiLCJ2aXNpdE51bWVyaWMiLCJudW1lcmljIiwidmlzaXROdW0iLCJ2aXNpdEludCIsInZpc2l0Q29sb3IiLCJjb2xvciIsInZpc2l0VVJMIiwidmlzaXRTcGFjZUxpc3QiLCJ2aXNpdENvbW1hTGlzdCIsInZpc2l0RnVuYyIsImZ1bmMiLCJ2aXNpdEV4cHIiLCJleHByIiwiRmlsdGVyVmlzaXRvciIsIlNwYWNlTGlzdCIsIkNvbW1hTGlzdCIsIkZ1bmMiLCJzdHJpbmdWYWx1ZSIsInRvRXhwciIsImlzRXhwciIsImlzTnVtZXJpYyIsImlzTnVtIiwiaXNJZGVudCIsImlzU3BhY2VMaXN0IiwidmlzaXRvciIsIkV4cHJzIiwiRW1wdHkiLCJTbGFzaCIsIlN0ciIsIm5hbWVUYWJsZSIsIklkZW50IiwiZ2V0TmFtZSIsIk51bSIsIkludCIsIkNvbG9yIiwicmdiIiwiVVJMIiwiYXBwZW5kTGlzdCIsInNlcGFyYXRvciIsIkV4cHIiLCJ0b051bWJlciIsImNvbnZlcnROdW1lcmljVG9QeCIsImFic29sdXRlIiwiYWxsIiwiYWx3YXlzIiwiYXV0byIsImF2b2lkIiwiYmFsYW5jZSIsImJhbGFuY2VfYWxsIiwiYmxvY2siLCJibG9ja19lbmQiLCJibG9ja19zdGFydCIsImJvdGgiLCJib3R0b20iLCJib3JkZXJfYm94IiwiYnJlYWtfYWxsIiwiYnJlYWtfd29yZCIsImNyb3AiLCJjcm9zcyIsImNvbHVtbiIsImV4Y2x1c2l2ZSIsImZpeGVkIiwiZmxleCIsImZvb3Rub3RlIiwiZm9vdGVyIiwiaGVhZGVyIiwiaG9yaXpvbnRhbF90YiIsImluaGVyaXQiLCJpbmxpbmUiLCJpbmxpbmVfYmxvY2siLCJpbmxpbmVfZW5kIiwiaW5saW5lX3N0YXJ0IiwibGFuZHNjYXBlIiwibGVmdCIsImxpbmUiLCJsaXN0X2l0ZW0iLCJsdHIiLCJtYW51YWwiLCJub25lIiwibm9ybWFsIiwib2ViX3BhZ2VfZm9vdCIsIm9lYl9wYWdlX2hlYWQiLCJwYWdlIiwicmVsYXRpdmUiLCJyaWdodCIsInNhbWUiLCJzbmFwX2Jsb2NrIiwic3ByZWFkIiwiX3N0YXRpYyIsInJ0bCIsInRhYmxlIiwidGFibGVfY2FwdGlvbiIsInRhYmxlX2NlbGwiLCJ0YWJsZV9mb290ZXJfZ3JvdXAiLCJ0YWJsZV9oZWFkZXJfZ3JvdXAiLCJ0YWJsZV9yb3ciLCJ0b3AiLCJ0cmFuc3BhcmVudCIsInZlcnRpY2FsX2xyIiwidmVydGljYWxfcmwiLCJodW5kcmVkUGVyY2VudCIsImZ1bGxXaWR0aCIsImZ1bGxIZWlnaHQiLCJudW1lcmljWmVybyIsInByb2Nlc3NpbmdPcmRlciIsImZvbnQtc2l6ZSIsInByb2Nlc3NpbmdPcmRlckZuIiwibmFtZTEiLCJuYW1lMiIsIk1BWF9WQUxVRSIsIlJlY3QiLCJQb2ludCIsIkluc2V0cyIsIlNlZ21lbnQiLCJsb3ciLCJ3aW5kaW5nIiwic2hhcGVJZCIsIkJhbmQiLCJzZWdtZW50Q29tcGFyZSIsInMxIiwiczIiLCJTaGFwZSIsInBvaW50cyIsImFkZFNlZ21lbnRzIiwicHJldiIsIndpdGhPZmZzZXQiLCJvZmZzZXRYIiwib2Zmc2V0WSIsInNoYXBlRm9yRWxsaXBzZSIsImN4IiwiY3kiLCJyeCIsInJ5IiwiUEkiLCJzaW4iLCJjb3MiLCJzaGFwZUZvclJlY3QiLCJCYW5kSW50ZXJzZWN0aW9uIiwibG93T3JIaWdoIiwiaW50ZXJzZWN0WSIsImFkZEJhbmRJbnRlcnNlY3Rpb25zIiwiaW50ZXJzZWN0aW9ucyIsIncxIiwidzIiLCJtZXJnZUludGVyc2VjdGlvbnMiLCJpbmNsdWRlQ291bnQiLCJleGNsdWRlQ291bnQiLCJzaGFwZUNvdW50Iiwid2luZGluZ3MxIiwid2luZGluZ3MyIiwieHJhbmdlcyIsImluc2lkZSIsImludGVyc2VjdGlvbkNvdW50IiwiaW50ZXJzZWN0aW9uIiwic3RpbGxJbnNpZGUiLCJyb3RhdGVCb3giLCJib3giLCJ1bnJvdGF0ZUJveCIsInJvdGF0ZVNoYXBlIiwic2hhcGUiLCJwb2ludCIsIm5vcm1hbGl6ZSIsImJhbmRzIiwiY3VyckJhbmQiLCJwcmV2QmFuZCIsImZpbmRCYW5kIiwibWlkIiwiZmluZFVwcGVybW9zdEZ1bGx5T3BlblJlY3QiLCJyZWN0IiwiYmFuZCIsInRvcEVkZ2UiLCJib3R0b21FZGdlIiwiZmluZEJvdHRvbW1vc3RGdWxseU9wZW5SZWN0IiwiU2V0VmlzaXRvciIsInByb3BTZXQiLCJDc3MiLCJJbnRWaXNpdG9yIiwidG9JbnQiLCJkZWYiLCJTaGFwZVZpc2l0b3IiLCJjb2xsZWN0IiwiY29vcmRzIiwiZ2V0U2hhcGUiLCJoZWlnaHQiLCJudW1iZXJzIiwiY29vcmQiLCJHZW9tZXRyeVV0aWwiLCJ0b1NoYXBlIiwiQ291bnRlcnNWaXNpdG9yIiwicmVzZXQiLCJjb3VudGVycyIsInRvQ291bnRlcnMiLCJVcmxUcmFuc2Zvcm1WaXNpdG9yIiwiYmFzZVVybCIsInRyYW5zZm9ybWVyIiwidHJhbnNmb3JtVVJMIiwiY2xvbmVDb3VudGVyVmFsdWVzIiwiVG9rZW5UeXBlIiwiVGFyZ2V0Q291bnRlclJlZmVyZW5jZSIsInRhcmdldElkIiwicmVzb2x2ZWQiLCJlcXVhbHMiLCJzcGluZUluZGV4IiwicGFnZUluZGV4IiwiaXNSZXNvbHZlZCIsInJlc29sdmUiLCJ1bnJlc29sdmUiLCJDb3VudGVyTGlzdGVuZXIiLCJjb3VudGVyU3RvcmUiLCJjb3VudGVyc09mSWQiLCJkb2N1bWVudFVSTFRyYW5zZm9ybWVyIiwidHJhbnNmb3JtRnJhZ21lbnQiLCJjb3VudGVyc0J5SWQiLCJnZXRFeHByQ29udGVudExpc3RlbmVyIiwiQ291bnRlclJlc29sdmVyIiwicGFnZVNjb3BlIiwic2V0U3R5bGVyIiwic3R5bGVyIiwiZ2V0RnJhZ21lbnQiLCJnZXRUcmFuc2Zvcm1lZElkIiwidHJhbnNmb3JtZWRJZCIsImdldFBhZ2VDb3VudGVyVmFsIiwiZm9ybWF0IiwiY3VycmVudFBhZ2VDb3VudGVycyIsInJlZ2lzdGVyUGFnZUNvdW50ZXJFeHByIiwiZ2V0UGFnZUNvdW50ZXJzVmFsIiwiZ2V0VGFyZ2V0Q291bnRlcnMiLCJsb29rRm9yRWxlbWVudCIsInRhcmdldENvdW50ZXJzIiwic3R5bGVVbnRpbElkSXNSZWFjaGVkIiwiZ2V0VGFyZ2V0UGFnZUNvdW50ZXJzIiwiY3VycmVudFBhZ2UiLCJlbGVtZW50c0J5SWQiLCJwYWdlQ291bnRlcnNCeUlkIiwiZ2V0VGFyZ2V0Q291bnRlclZhbCIsImNvdW50ZXJzT2ZOYW1lIiwicGFnZUNvdW50ZXJzIiwicmVzb2x2ZVJlZmVyZW5jZSIsInBhZ2VDb3VudGVyc09mTmFtZSIsInNhdmVSZWZlcmVuY2VPZkN1cnJlbnRQYWdlIiwiZ2V0VGFyZ2V0Q291bnRlcnNWYWwiLCJlbGVtZW50Q291bnRlcnMiLCJnZXROYW1lZFN0cmluZ1ZhbCIsInJldHJpZXZlUG9zaXRpb24iLCJzdHJpbmdWYWx1ZXMiLCJuYW1lZFN0cmluZ1ZhbHVlcyIsIm9mZnNldHMiLCJwYWdlU3RhcnRPZmZzZXQiLCJwYWdlTGFzdE9mZnNldCIsImNvbnRhaW5lciIsInF1ZXJ5U2VsZWN0b3JBbGwiLCJmaXJzdE9mZnNldCIsInN0YXJ0T2Zmc2V0IiwibGFzdE9mZnNldCIsImZpcnN0RXhjZXB0T2Zmc2V0Iiwib2Zmc2V0UHJldiIsIm9mZnNldE5leHQiLCJlbGVtZW50QXRPZmZzZXQiLCJxdWVyeVNlbGVjdG9yIiwiZWxlbWVudEF0UGFnZVN0YXJ0T2Zmc2V0IiwiZmlyc3RFbGVtZW50Q2hpbGQiLCJmaXJzdCIsImxhc3QiLCJmaXJzdC1leGNlcHQiLCJzZXROYW1lZFN0cmluZyIsImNhc2NhZGVJbnN0YW5jZSIsImN1cnJlbnRFbGVtZW50T2Zmc2V0IiwiQ291bnRlclN0b3JlIiwiY3JlYXRlQ291bnRlckxpc3RlbmVyIiwiY3JlYXRlQ291bnRlclJlc29sdmVyIiwic2V0Q3VycmVudFBhZ2UiLCJkZWZpbmVQYWdlQ291bnRlciIsImNvdW50ZXJOYW1lIiwiZm9yY2VTZXRQYWdlQ291bnRlciIsInBhZ2VOdW1iZXIiLCJ1cGRhdGVQYWdlQ291bnRlcnMiLCJjYXNjYWRlZFBhZ2VTdHlsZSIsInJlc2V0TWFwIiwicHJldmlvdXNQYWdlQ291bnRlcnMiLCJpbmNyZW1lbnRNYXAiLCJyZXNldFZhbCIsIkNzc1Byb3AiLCJyZXNldENvdW50ZXJOYW1lIiwiaW5jcmVtZW50IiwiaW5jcmVtZW50VmFsIiwiaW5jcmVtZW50Q291bnRlck5hbWUiLCJjb3VudGVyVmFsdWVzIiwicHVzaFBhZ2VDb3VudGVycyIsImN1cnJlbnRQYWdlQ291bnRlcnNTdGFjayIsInBvcFBhZ2VDb3VudGVycyIsInVucmVzb2x2ZWRSZWZzIiwidW5yZXNvbHZlZFJlZmVyZW5jZXMiLCJyZXNvbHZlZFJlZnMiLCJyZXNvbHZlZFJlZmVyZW5jZXMiLCJwdXNoZWQiLCJyZWZlcmVuY2VzVG9Tb2x2ZSIsIm5ld1JlZmVyZW5jZXNPZkN1cnJlbnRQYWdlIiwic29tZSIsImZpbmlzaFBhZ2UiLCJpZHMiLCJvbGRQYWdlSW5kZXgiLCJwYWdlSW5kaWNlc0J5SWQiLCJwcmV2UGFnZUNvdW50ZXJzIiwiZXZlcnkiLCJnZXRVbnJlc29sdmVkUmVmc1RvUGFnZSIsInJlZnMiLCJpZFJlZnMiLCJyMSIsInIyIiwicHVzaFJlZmVyZW5jZXNUb1NvbHZlIiwicmVmZXJlbmNlc1RvU29sdmVTdGFjayIsInBvcFJlZmVyZW5jZXNUb1NvbHZlIiwicGFnZXNDb3VudGVyRXhwcnMiLCJleHByQ29udGVudExpc3RlbmVyIiwiZmluZEluZGV4IiwiUEFHRVNfQ09VTlRFUl9BVFRSIiwiZmluaXNoTGFzdFBhZ2UiLCJ2aWV3cG9ydCIsInJvb3QiLCJwYWdlcyIsIkFzc2VydHMiLCJjcmVhdGVMYXlvdXRDb25zdHJhaW50IiwiTGF5b3V0Q29uc3RyYWludCIsImFsbG93TGF5b3V0Iiwibm9kZUNvbnRleHQiLCJ2aWV3Tm9kZSIsImVzY2FwZVBhcnNlU2luZ2xlIiwiY29kZSIsImZyb21DaGFyQ29kZSIsImVzY2FwZVBhcnNlIiwiQWN0aW9uIiwiVG9rZW4iLCJFT0YiLCJtYWtlQWN0aW9ucyIsInNwZWMiLCJOYU4iLCJFTkQiLCJJTlZBTElEIiwiYWN0aW9uc05vcm1hbCIsIlNQQUNFIiwiQkFORyIsIlNUUjIiLCJIQVNIIiwiRE9MTEFSIiwiUEVSQ0VOVCIsIkFNUCIsIlNUUjEiLCJPX1BBUiIsIkNfUEFSIiwiU1RBUiIsIlBMVVMiLCJDT01NQSIsIk1JTlVTIiwiRE9UIiwiU0xBU0giLCJJTlQiLCJDT0xPTiIsIlNFTUlDT0wiLCJMVCIsIkVRIiwiR1QiLCJRTUFSSyIsIkFUIiwiSURFTlQiLCJPX0JSSyIsIkJTTEFTSCIsIkNfQlJLIiwiSEFUIiwiT19CUkMiLCJCQVIiLCJDX0JSQyIsIlRJTERFIiwiYWN0aW9uc0lkZW50IiwiRU5ESUROVCIsIkZVTkMiLCJDT05UIiwiSUROVEVTQyIsImFjdGlvbnNOdW1PckNsYXNzIiwiVE9DTEFTUyIsIlRPTlVNIiwiVE9JREVTIiwiYWN0aW9uc01pbnVzIiwiTUlOTUlOIiwiVE9JTlQiLCJUT0lERU5UIiwiYWN0aW9uc0lkZW50RXNjIiwiRU5ESURFUyIsIkNIS1BPU1MiLCJGVU5DRVMiLCJhY3Rpb25zSW50IiwiRU5ESU5UIiwiUENVTklUIiwiTlVNQkVSIiwiVU5JVCIsImFjdGlvbnNOdW1iZXIiLCJFTkROVU0iLCJGcmFtZVN0YXRlIiwiYWN0aW9uc0NoZWNrRXEiLCJFUVRBSUwiLCJhY3Rpb25zQ29sb24iLCJDT0xfQ09MIiwiYWN0aW9uc0JhciIsIkJBUl9CQVIiLCJhY3Rpb25zQW1wIiwiQU1QX0FNUCIsImFjdGlvbnNTbGFzaCIsIkNPTU1FTlQiLCJhY3Rpb25zQ29tbWVudCIsIkNPTU1TVCIsImFjdGlvbnNDb21tZW50U3RhciIsIkVORE5PVEsiLCJhY3Rpb25zTWludXNNaW51cyIsIktJTEwxIiwiYWN0aW9uc0x0IiwiTFRfQkciLCJhY3Rpb25zTHRCYW5nIiwiTFRfQkdfTSIsImFjdGlvbnNMdEJhbmdNaW51cyIsIktJTEwyIiwiYWN0aW9uc0lkZW50RXNjQ2hyIiwiSURFU0NIIiwiYWN0aW9uc1N0cjEiLCJFTkRTVFIiLCJTVFIxRVNDIiwiYWN0aW9uc1N0cjIiLCJTVFIyRVNDIiwiYWN0aW9uc1N0cjFFc2MiLCJFTkRFU1RSIiwiQ0hLUE9TTiIsImFjdGlvbnNTdHIyRXNjIiwiYWN0aW9uc1VSTCIsIlVSTDIiLCJVUkwxIiwiYWN0aW9uc1VSTEluc2lkZSIsIkVORFVSTCIsIkNIS1NQIiwiVVJMRVNDIiwiYWN0aW9uc1VSTEluc2lkZTEiLCJURVJNVVJMIiwiYWN0aW9uc1VSTEluc2lkZTIiLCJhY3Rpb25zVVJMVGFpbCIsIkZJTlVSTCIsIlRva2VuaXplciIsImlucHV0IiwiaGFuZGxlciIsImluZGV4TWFzayIsImJ1ZmZlciIsInRva2VuIiwidGFpbCIsImZpbGxCdWZmZXIiLCJudGhUb2tlbiIsImNvbnN1bWUiLCJtYXJrIiwiaGVhZCIsInVubWFyayIsImhhc01hcmsiLCJyZWFsbG9jYXRlIiwibmV3SW5kZXhNYXNrIiwibmV3QnVmZmVyIiwib2xkSW5kZXgiLCJuZXdJbmRleCIsInBvc2l0aW9uIiwibW5lbW9uaWNzIiwiYWN0aW9ucyIsInRva2VuVHlwZSIsInRva2VuUG9zaXRpb24iLCJ0b2tlblRleHQiLCJ0b2tlbk51bSIsInNlZW5TcGFjZSIsImJhY2tzbGFzaFBvcyIsIlNUUiIsIkNMQVNTIiwiQkFOR19FUSIsIk5VTSIsIk5VTUVSSUMiLCJwcmVjZWRlZEJ5U3BhY2UiLCJwcml2YXRlQ3VycmVudFRhc2siLCJwcmltYXJ5U2NoZWR1bGVyIiwiY3VycmVudFRhc2siLCJuZXdGcmFtZSIsInRhc2siLCJmcmFtZSIsIkZyYW1lIiwic3RhdGUiLCJBQ1RJVkUiLCJuZXdSZXN1bHQiLCJTeW5jUmVzdWx0SW1wbCIsImhhbmRsZSIsIm9uRXJyIiwicmFpc2UiLCJUaW1lckltcGwiLCJjdXJyZW50VGltZSIsInZhbHVlT2YiLCJkZWxheSIsIlNjaGVkdWxlciIsInRpbWVyIiwic2V0U2xpY2UiLCJpc1RpbWVTbGljZU92ZXIiLCJzbGljZU92ZXJUaW1lIiwiYXJtIiwiaW5UaW1lU2xpY2UiLCJuZXdUaW1lIiwic2NoZWR1bGVkVGltZSIsInRpbWVvdXRUb2tlbiIsIndha2V1cFRpbWUiLCJkb1RpbWVTbGljZSIsInNjaGVkdWxlIiwiY29udGludWF0aW9uIiwib3B0X2RlbGF5Iiwib3JkZXIiLCJjYW5jZWxlZCIsInJlc3VtZUludGVybmFsIiwicnVuIiwib3B0X25hbWUiLCJUYXNrIiwidGhlbiIsImRvbmUiLCJydW5uaW5nIiwiY2FsbGJhY2tzIiwiY2FsbGJhY2siLCJzYXZlZFRhc2siLCJzdXNwZW5kIiwiQ29udGludWF0aW9uIiwib3RoZXJDb21wIiwiZ2V0VGFzayIsImZpbmlzaCIsImludGVycnVwdCIsIndhaXRUYXJnZXQiLCJnZXRTY2hlZHVsZXIiLCJpc1J1bm5pbmciLCJ3aGVuRG9uZSIsInVud2luZCIsImV4Y2VwdGlvbiIsIm9wdF9mcmFtZSIsImZpbGxTdGFjayIsIm91dCIsInRoZW5Bc3luYyIsInRoZW5SZXR1cm4iLCJ0aGVuRmluaXNoIiwiaXNQZW5kaW5nIiwiUmVzdWx0SW1wbCIsInJlczEiLCJyZXMyIiwicmVzIiwiSU5JVCIsImNoZWNrRW52aXJvbm1lbnQiLCJGSU5JU0hFRCIsIkRFQUQiLCJ0aW1lU2xpY2UiLCJzbGVlcCIsImxvb3AiLCJzdGVwIiwibW9yZSIsImxvb3BXaXRoRnJhbWUiLCJMb29wQm9keUZyYW1lIiwib3B0X3dhaXRUYXJnZXQiLCJjb250aW51ZUxvb3AiLCJicmVha0xvb3AiLCJGZXRjaGVyIiwiZmV0Y2giLCJyZXNvdXJjZSIsInBpZ2dpYmFja3MiLCJwaWdneWJhY2tzIiwiYXJyaXZlZCIsInBpZ2d5YmFjayIsImhhc0Fycml2ZWQiLCJ3YWl0Rm9yRmV0Y2hlcnMiLCJmZXRjaGVycyIsImZldGNoZXIiLCJsb2FkRWxlbWVudCIsInNyYyIsImxvY2FsTmFtZSIsIlNWRyIsIlhMSU5LIiwiWE1MSHR0cFJlcXVlc3RSZXNwb25zZVR5cGUiLCJWaXZsaW9zdHlsZVZpZXdwb3J0U2NyZWVuQ3NzIiwiVml2bGlvc3R5bGVWaWV3cG9ydENzcyIsIlZhbGlkYXRpb25UeHQiLCJVc2VyQWdlbnRYbWwiLCJVc2VyQWdlbnRQYWdlQ3NzIiwiVXNlckFnZW50QmFzZUNzcyIsImFqYXgiLCJvcHRfdHlwZSIsIm9wdF9tZXRob2QiLCJvcHRfZGF0YSIsIm9wdF9jb250ZW50VHlwZSIsInJlcXVlc3QiLCJYTUxIdHRwUmVxdWVzdCIsInJlc3BvbnNlIiwic3RhdHVzVGV4dCIsImNvbnRlbnRUeXBlIiwicmVzcG9uc2VUZXh0IiwicmVzcG9uc2VYTUwiLCJyZXNwb25zZUJsb2IiLCJyZXNwb25zZVR5cGUiLCJyZWFkeVN0YXRlIiwiRE9DVU1FTlQiLCJIVE1MRG9jdW1lbnQiLCJURVhUIiwibWFrZUJsb2IiLCJjb250ZW50VHlwZUhlYWRlciIsImdldFJlc3BvbnNlSGVhZGVyIiwic2V0UmVxdWVzdEhlYWRlciIsInNlbmQiLCJvdmVycmlkZU1pbWVUeXBlIiwicGFydHMiLCJidWlsZGVyQ3RyIiwiV2ViS2l0QmxvYkJ1aWxkZXIiLCJNU0Jsb2JCdWlsZGVyIiwiYnVpbGRlciIsImdldEJsb2IiLCJCbG9iIiwiU3R5bGVzaGVldEZsYXZvciIsIlJlc291cmNlU3RvcmUiLCJwYXJzZXIiLCJsb2FkIiwib3B0X3JlcXVpcmVkIiwib3B0X21lc3NhZ2UiLCJyZXNvdXJjZXMiLCJmZXRjaElubmVyIiwiaXNUb2NCb3giLCJlbmRzV2l0aCIsInVzZXJBZ2VudFhtbFVybCIsImlzVXNlckFnZW50WG1sIiwiVGFza1V0aWwiLCJwYXJzZUpTT05SZXNvdXJjZSIsInN0b3JlIiwiY29sb3JGcm9tSGFzaCIsIlBhcnNlckhhbmRsZXIiLCJmbGF2b3IiLCJBVVRIT1IiLCJnZXRDdXJyZW50VG9rZW4iLCJnZXRTY29wZSIsInN0YXJ0U3R5bGVzaGVldCIsInRhZ1NlbGVjdG9yIiwibnMiLCJjbGFzc1NlbGVjdG9yIiwicHNldWRvY2xhc3NTZWxlY3RvciIsInBzZXVkb2VsZW1lbnRTZWxlY3RvciIsImlkU2VsZWN0b3IiLCJhdHRyaWJ1dGVTZWxlY3RvciIsIm9wIiwiZGVzY2VuZGFudFNlbGVjdG9yIiwiY2hpbGRTZWxlY3RvciIsImFkamFjZW50U2libGluZ1NlbGVjdG9yIiwiZm9sbG93aW5nU2libGluZ1NlbGVjdG9yIiwibmV4dFNlbGVjdG9yIiwic3RhcnRTZWxlY3RvclJ1bGUiLCJzdGFydEZvbnRGYWNlUnVsZSIsInN0YXJ0Rm9vdG5vdGVSdWxlIiwicHNldWRvZWxlbSIsInN0YXJ0Vmlld3BvcnRSdWxlIiwic3RhcnREZWZpbmVSdWxlIiwic3RhcnRSZWdpb25SdWxlIiwic3RhcnRQYWdlUnVsZSIsInN0YXJ0UGFnZU1hcmdpbkJveFJ1bGUiLCJzdGFydFdoZW5SdWxlIiwic3RhcnRNZWRpYVJ1bGUiLCJzdGFydEZsb3dSdWxlIiwiZmxvd05hbWUiLCJzdGFydFBhZ2VUZW1wbGF0ZVJ1bGUiLCJzdGFydFBhZ2VNYXN0ZXJSdWxlIiwicHNldWRvTmFtZSIsImNsYXNzZXMiLCJzdGFydFBhcnRpdGlvblJ1bGUiLCJzdGFydFBhcnRpdGlvbkdyb3VwUnVsZSIsInN0YXJ0UnVsZUJvZHkiLCJwcm9wZXJ0eSIsImltcG9ydGFudCIsImVuZFJ1bGUiLCJzdGFydEZ1bmNXaXRoU2VsZWN0b3IiLCJmdW5jTmFtZSIsImVuZEZ1bmNXaXRoU2VsZWN0b3IiLCJnZXRJbXBvcnRhbnRTcGVjaWZpY2l0eSIsIlVTRVJfQUdFTlQiLCJVU0VSIiwiZ2V0QmFzZVNwZWNpZmljaXR5IiwiRGlzcGF0Y2hQYXJzZXJIYW5kbGVyIiwicHVzaEhhbmRsZXIiLCJzbGF2ZSIsInBvcEhhbmRsZXIiLCJ0b2tlbml6ZXIiLCJlcnJvck1zZyIsIl9QYXJzZXJIYW5kbGVyIiwiU2tpcHBpbmdQYXJzZXJIYW5kbGVyIiwidG9wTGV2ZWwiLCJkZXB0aCIsIlNsYXZlUGFyc2VySGFuZGxlciIsInJlcG9ydCIsInJlcG9ydEFuZFNraXAiLCJhY3Rpb25zQmFzZSIsImFjdGlvbnNTdHlsZUF0dHJpYnV0ZSIsImFjdGlvbnNTZWxlY3RvciIsImFjdGlvbnNTZWxlY3RvckluRnVuYyIsImFjdGlvbnNTZWxlY3RvckNvbnQiLCJhY3Rpb25zU2VsZWN0b3JTdGFydCIsImFjdGlvbnNQcm9wVmFsIiwiYWN0aW9uc0V4cHJWYWwiLCJhY3Rpb25zRXhwck9wIiwiYWN0aW9uc0Vycm9yIiwiYWN0aW9uc0Vycm9yRGVjbCIsImFjdGlvbnNFcnJvclNlbGVjdG9yIiwiRXhwckNvbnRleHQiLCJPUF9NRURJQV9BTkQiLCJDc3NUb2tlbml6ZXIiLCJMQVNUIiwiU0VMRUNUT1JfU1RBUlQiLCJSVUxFX0VORCIsIkRPTkUiLCJQUk9QIiwiU0VMRUNUT1JfTkFNRSIsIlNFTEVDVE9SX0FOWSIsIlNFTEVDVE9SX0lEIiwiU0VMRUNUT1JfQ0xBU1MiLCJTRUxFQ1RPUl9BVFRSIiwiU0VMRUNUT1JfUFNFVURPQ0xBU1MiLCJTRUxFQ1RPUl9DSElMRCIsIlNFTEVDVE9SX1NJQkxJTkciLCJTRUxFQ1RPUl9GT0xMT1dJTkdfU0lCTElORyIsIlNFTEVDVE9SX05BTUVfMSIsIlNFTEVDVE9SX0FOWV8xIiwiU0VMRUNUT1JfSURfMSIsIlNFTEVDVE9SX0NMQVNTXzEiLCJTRUxFQ1RPUl9BVFRSXzEiLCJTRUxFQ1RPUl9CT0RZIiwiU0VMRUNUT1JfUFNFVURPQ0xBU1NfMSIsIlNFTEVDVE9SX1BTRVVET0VMRU0iLCJTRUxFQ1RPUl9ORVhUIiwiVkFMX0lERU5UIiwiVkFMX0hBU0giLCJWQUxfTlVNIiwiVkFMX0lOVCIsIlZBTF9OVU1FUklDIiwiVkFMX1NUUiIsIlZBTF9VUkwiLCJWQUxfQ09NTUEiLCJWQUxfU0xBU0giLCJWQUxfRlVOQyIsIlZBTF9DX1BBUiIsIlZBTF9FTkQiLCJWQUxfQlJDIiwiVkFMX0JBTkciLCJWQUxfUExVUyIsIlZBTF9GSU5JU0giLCJFWFBSX0lERU5UIiwiRVhQUl9OVU0iLCJFWFBSX05VTUVSSUMiLCJFWFBSX1NUUiIsIkVYUFJfT19QQVIiLCJFWFBSX0ZVTkMiLCJFWFBSX1BSRUZJWCIsIkVYUFJfUEFSQU0iLCJFWFBSX0lORklYX05BTUUiLCJFWFBSX0lORklYIiwiR1RfRVEiLCJMVF9FUSIsIkVRX0VRIiwiRVhQUl9DX1BBUiIsIkVYUFJfT19CUkMiLCJFWFBSX1NFTUlDT0wiLCJFUlJPUl9QVVNIIiwiRVJST1JfUE9QIiwiRVJST1JfU0VNSUNPTCIsIkVSUk9SX1BPUF9ERUNMIiwiUGFyc2VyIiwiZXhwckNvbnRleHQiLCJNRURJQSIsImV4dHJhY3RWYWxzIiwic2VwIiwidmFsU3RhY2siLCJ2YWxTdGFja1JlZHVjZSIsImNvdW50IiwiZXhwckVycm9yIiwicHJvcE5hbWUiLCJleHByU3RhY2tSZWR1Y2UiLCJ2YWwyIiwidG9rIiwiZTEiLCJlMiIsImVyIiwicmVhZFBzZXVkb1BhcmFtcyIsInJlYWROdGhQc2V1ZG9QYXJhbXMiLCJoYXNMZWFkaW5nUGx1cyIsImhhc01pbnVzU2lnbiIsImhhc1NpZ24iLCJtYWtlQ29uZGl0aW9uIiwiY29uZGl0aW9uIiwiaXNJbnNpZGVQcm9wZXJ0eU9ubHlSdWxlIiwicnVsZVN0YWNrIiwicnVuUGFyc2VyIiwicGFyc2luZ1ZhbHVlIiwicGFyc2luZ1N0eWxlQXR0ciIsInBhcnNpbmdNZWRpYVF1ZXJ5IiwicGFyc2luZ0Z1bmN0aW9uUGFyYW0iLCJ0b2tlbjEiLCJwYXJzZXJMb29wIiwicHJvcEltcG9ydGFudCIsIm5hbWVzcGFjZVByZWZpeFRvVVJJIiwiZGVmYXVsdE5hbWVzcGFjZVVSSSIsInBzZXVkb2NsYXNzVHlwZSIsIlBPU0lUSVZFX0lORklOSVRZIiwiVElMREVfRVEiLCJCQVJfRVEiLCJIQVRfRVEiLCJET0xMQVJfRVEiLCJTVEFSX0VRIiwicmVnaW9uUnVsZSIsInBhZ2VSdWxlIiwiSU1QT1JUIiwiV0hFTiIsImltcG9ydENvbmRpdGlvbiIsImltcG9ydFJlYWR5IiwiaW1wb3J0VVJMIiwicnVsZU5hbWUiLCJydWxlUHNldWRvTmFtZSIsImVycm9yQnJhY2tldHMiLCJFcnJvckhhbmRsZXIiLCJwYXJzZVN0eWxlc2hlZXRGcm9tVGV4dCIsIm1lZGlhIiwicmVzb2x2ZWRVUkwiLCJpbm5lckZyYW1lIiwicGFyc2VTdHlsZXNoZWV0RnJvbVVSTCIsIk5ldCIsInhociIsInBhcnNlVmFsdWUiLCJudW1Qcm9wIiwiei1pbmRleCIsImNvbHVtbi1jb3VudCIsImZsb3ctbGluZ2VyIiwib3BhY2l0eSIsImZsb3ctcHJpb3JpdHkiLCJ1dGlsaXphdGlvbiIsImV2YWx1YXRlQ1NTVG9DU1MiLCJtYXRjaEFOUGx1c0IiLCJBbnlNYXRjaGVyIiwibWF0Y2hlcnMiLCJtYXRjaGVzIiwibWF0Y2hlciIsIkFsbE1hdGNoZXIiLCJOdGhGcmFnbWVudE1hdGNoZXIiLCJlbGVtZW50T2Zmc2V0IiwicmVnaXN0ZXJGcmFnbWVudEluZGV4IiwiZnJhZ21lbnRJbmRleCIsImluZGljZXMiLCJmcmFnbWVudEluZGljZXMiLCJjbGVhckZyYWdtZW50SW5kaWNlcyIsImVudHJ5IiwiTGF5b3V0UHJvY2Vzc29yIiwiUGFnZUZsb2F0cyIsIlNlbGVjdG9ycyIsIlJlcGV0aXRpdmVFbGVtZW50IiwiVGFibGUiLCJWdHJlZSIsIk1hdGNoZXJCdWlsZGVyIiwiYnVpbGRWaWV3Q29uZGl0aW9uTWF0Y2hlciIsInZpZXdDb25kaXRpb24iLCJzdHJzIiwiYnVpbGRBbGxNYXRjaGVyIiwiYnVpbGRBbnlNYXRjaGVyIiwicmVzdG9yZU5ld1RleHQiLCJyZWR1Y2UiLCJmYXN0ZGlmZiIsInJlc29sdmVJbmRleCIsImNvZWYiLCJjdXJyZW50Iiwib2JqZWN0IiwiZm9ybWF0dGluZ0NvbnRleHRUeXBlIiwiRmxvYXRSZWZlcmVuY2UiLCJmbGFnbWVudExheW91dENvbnN0cmFpbnRUeXBlIiwiaXNJbnN0YW5jZU9mVGFibGVGb3JtYXR0aW5nQ29udGV4dCIsImlzSW5zdGFuY2VPZlRhYmxlUm93TGF5b3V0Q29uc3RyYWludCIsIldoaXRlc3BhY2UiLCJTaGFkb3dUeXBlIiwiRE9NUGFyc2VyIiwicGFyc2VGcm9tU3RyaW5nIiwiU0hBRE9XIiwicHNldWRvTmFtZXMiLCJnZXRQc2V1ZG9OYW1lIiwic2V0UHNldWRvTmFtZSIsIlBzZXVkb2VsZW1lbnRTdHlsZXIiLCJnZXRTdHlsZSIsImRlZXAiLCJDc3NDYXNjYWRlIiwibmVzdCIsInByb2Nlc3NDb250ZW50Iiwic3R5bGVzIiwiY29udGVudFByb2Nlc3NlZCIsImNvbnRlbnRWYWwiLCJkZWxheWVkUHJvcHMiLCJ0cmFuc2Zvcm0iLCJ0cmFuc2Zvcm0tb3JpZ2luIiwiZGVsYXllZFByb3BzSWZSZWxhdGl2ZVBvc2l0aW9uZWQiLCJEZWxheWVkSXRlbSIsInNob3ciLCJvYmoiLCJ2aXNpYmlsaXR5IiwiaGlkZSIsInBsYXkiLCJwYXVzZSIsInJlc3VtZSIsIm11dGUiLCJtdXRlZCIsInVubXV0ZSIsIm1ha2VMaXN0ZW5lciIsImFjdGlvbkZuIiwiUGFnZSIsImJsZWVkQm94IiwiaHJlZkhhbmRsZXIiLCJhbmNob3JFbGVtZW50Iiwic2V0QXV0b1BhZ2VXaWR0aCIsImlzQXV0byIsImlzQXV0b1BhZ2VXaWR0aCIsIkFVVE9fUEFHRV9XSURUSF9BVFRSSUJVVEUiLCJzZXRBdXRvUGFnZUhlaWdodCIsImlzQXV0b1BhZ2VIZWlnaHQiLCJBVVRPX1BBR0VfSEVJR0hUX0FUVFJJQlVURSIsInJlZ2lzdGVyRWxlbWVudFdpdGhJZCIsInRyaWdnZXJzIiwiY2xpZW50TGF5b3V0IiwiZWxlbXMiLCJkZWxheWVkSXRlbXMiLCJnZXRFbGVtZW50Q2xpZW50UmVjdCIsImRpbWVuc2lvbnMiLCJvYnNlcnZlcnMiLCJvYnNlcnZlciIsImdldFBhZ2VBcmVhRWxlbWVudCIsInBhZ2VBcmVhRWxlbWVudCIsIndoaXRlc3BhY2VGcm9tUHJvcGVydHlWYWx1ZSIsIndoaXRlc3BhY2UiLCJJR05PUkUiLCJORVdMSU5FIiwiUFJFU0VSVkUiLCJjYW5JZ25vcmUiLCJGbG93IiwicGFyZW50Rmxvd05hbWUiLCJGbG93Q2h1bmsiLCJsaW5nZXIiLCJyZXBlYXRlZCIsImJyZWFrQmVmb3JlIiwiaXNCZXR0ZXIiLCJjbGllbnRyZWN0SW5jcmVhc2luZ1RvcCIsImNsaWVudHJlY3REZWNyZWFzaW5nUmlnaHQiLCJpc1NhbWVOb2RlUG9zaXRpb25TdGVwIiwibnBzMSIsIm5wczIiLCJzaGFkb3dUeXBlIiwiaXNTYW1lU2hhZG93Q29udGV4dCIsInNoYWRvd0NvbnRleHQiLCJub2RlU2hhZG93Iiwic2hhZG93U2libGluZyIsImlzU2FtZU5vZGVQb3NpdGlvbiIsIm5wMSIsIm5wMiIsIm9mZnNldEluTm9kZSIsIm5ld05vZGVQb3NpdGlvbkZyb21Ob2RlQ29udGV4dCIsImluaXRpYWxGcmFnbWVudEluZGV4Iiwic291cmNlTm9kZSIsIk5PTkUiLCJmb3JtYXR0aW5nQ29udGV4dCIsInByZXByb2Nlc3NlZFRleHRDb250ZW50IiwibWFrZU5vZGVDb250ZXh0RnJvbU5vZGVQb3NpdGlvblN0ZXAiLCJOb2RlQ29udGV4dCIsImNvcHkiLCJTaGFkb3dDb250ZXh0IiwieG1sZG9jIiwicGFyZW50U2hhZG93Iiwic3VwZXJTaGFkb3ciLCJzdWJTaGFkb3ciLCJzYzEiLCJzYzIiLCJGaXJzdFBzZXVkbyIsIm91dGVyIiwiYm94T2Zmc2V0IiwiYnJlYWtQZW5hbHR5IiwiZmxvYXRSZWZlcmVuY2UiLCJJTkxJTkUiLCJoeXBoZW5hdGVDaGFyYWN0ZXIiLCJicmVha1dvcmQiLCJpbmhlcml0ZWRQcm9wcyIsInZlcnRpY2FsIiwiZGlyZWN0aW9uIiwiZmlyc3RQc2V1ZG8iLCJyZXNldFZpZXciLCJjbGVhclNwYWNlciIsImZsb2F0U2lkZSIsImNsZWFyU2lkZSIsImZsb2F0TWluV3JhcEJsb2NrIiwiY29sdW1uU3BhbiIsInZlcnRpY2FsQWxpZ24iLCJmbGV4Q29udGFpbmVyIiwiYnJlYWtBZnRlciIsImVzdGFibGlzaGVzQkZDIiwiY29udGFpbmluZ0Jsb2NrRm9yQWJzb2x1dGUiLCJyZXBlYXRPbkJyZWFrIiwicGx1Z2luUHJvcHMiLCJhZnRlcklmQ29udGludWVzIiwiZm9vdG5vdGVQb2xpY3kiLCJjbG9uZUl0ZW0iLCJucCIsImNhcHRpb25TaWRlIiwiaW5saW5lQm9yZGVyU3BhY2luZyIsImJsb2NrQm9yZGVyU3BhY2luZyIsIm92ZXJmbG93IiwiY3JlYXRlIiwibW9kaWZ5Iiwic2hhcmVkIiwiY2xvbmUiLCJucHAiLCJucGMiLCJ0b05vZGVQb3NpdGlvblN0ZXAiLCJ0b05vZGVQb3NpdGlvbiIsIlJPT1RMRVNTIiwiaXNJbnNpZGVCRkMiLCJnZXRDb250YWluaW5nQmxvY2tGb3JBYnNvbHV0ZSIsIndhbGtVcEJsb2NrcyIsImJlbG9uZ3NUbyIsIkNodW5rUG9zaXRpb24iLCJwcmltYXJ5IiwiZmxvYXRzIiwiaXNTYW1lUG9zaXRpb24iLCJGbG93Q2h1bmtQb3NpdGlvbiIsImNodW5rUG9zaXRpb24iLCJmbG93Q2h1bmsiLCJGbG93UG9zaXRpb24iLCJuZXdmcCIsInBvc2l0aW9ucyIsIm5ld2FyciIsInN0YXJ0U2lkZSIsImhhc0NvbnRlbnQiLCJMYXlvdXRQb3NpdGlvbiIsIm5ld2NwIiwiaGlnaGVzdFNlZW5Ob2RlIiwiaGlnaGVzdFNlZW5PZmZzZXQiLCJsb29rdXBQb3NpdGlvbk9mZnNldCIsImZsb3dzIiwiZmxvd1Bvc2l0aW9ucyIsInRoaXNGbG93TmFtZXMiLCJvdGhlckZsb3dOYW1lcyIsImZsb3dQb3MiLCJzdGFydFNpZGVPZkZsb3ciLCJmaXJzdEZsb3dDaHVua09mRmxvdyIsImZsb3dDaHVua1Bvc2l0aW9uIiwiQ29udGFpbmVyIiwiZ2V0SW5zZXRUb3AiLCJtYXJnaW5Ub3AiLCJib3JkZXJUb3AiLCJwYWRkaW5nVG9wIiwiZ2V0SW5zZXRCb3R0b20iLCJtYXJnaW5Cb3R0b20iLCJib3JkZXJCb3R0b20iLCJwYWRkaW5nQm90dG9tIiwiZ2V0SW5zZXRMZWZ0IiwibWFyZ2luTGVmdCIsImJvcmRlckxlZnQiLCJwYWRkaW5nTGVmdCIsImdldEluc2V0UmlnaHQiLCJtYXJnaW5SaWdodCIsImJvcmRlclJpZ2h0IiwicGFkZGluZ1JpZ2h0IiwiZ2V0SW5zZXRCZWZvcmUiLCJnZXRJbnNldEFmdGVyIiwiZ2V0SW5zZXRTdGFydCIsImdldEluc2V0RW5kIiwiZ2V0QmVmb3JlRWRnZSIsImdldEFmdGVyRWRnZSIsImdldFN0YXJ0RWRnZSIsImdldEVuZEVkZ2UiLCJnZXRJbmxpbmVTaXplIiwiZ2V0Qm94U2l6ZSIsImdldEJveERpciIsImdldElubGluZURpciIsImNvcHlGcm9tIiwib3JpZ2luWCIsIm9yaWdpblkiLCJpbm5lclNoYXBlIiwiZXhjbHVzaW9ucyIsImNvbXB1dGVkQmxvY2tTaXplIiwic25hcFdpZHRoIiwic25hcEhlaWdodCIsInNldFZlcnRpY2FsUG9zaXRpb24iLCJzZXRIb3Jpem9udGFsUG9zaXRpb24iLCJzZXRCbG9ja1Bvc2l0aW9uIiwiZXh0ZW50Iiwic2V0SW5saW5lUG9zaXRpb24iLCJnZXRJbm5lclNoYXBlIiwiZ2V0SW5uZXJSZWN0IiwiZ2V0UGFkZGluZ1JlY3QiLCJwYWRkaW5nWCIsInBhZGRpbmdZIiwiZ2V0T3V0ZXJTaGFwZSIsIm91dGVyU2hhcGVQcm9wIiwiZ2V0T3V0ZXJSZWN0Iiwib3V0ZXJYIiwib3V0ZXJZIiwib3V0ZXJXaWR0aCIsIm91dGVySGVpZ2h0IiwiQ29udGVudFByb3BlcnR5SGFuZGxlciIsInJvb3RDb250ZW50VmFsdWUiLCJ2aXNpdFN0cklubmVyIiwiaW1nIiwiY3JlYXRlRWxlbWVudE5TIiwiQ3NzUGFyc2VyIiwiYXNzZXJ0Iiwibm9uVHJpdmlhbENvbnRlbnQiLCJhemltdXRoIiwiYm9yZGVyLWNvbGxhcHNlIiwiYm9yZGVyLXNwYWNpbmciLCJjYXB0aW9uLXNpZGUiLCJjbGlwLXJ1bGUiLCJjb2xvci1pbnRlcnBvbGF0aW9uIiwiY29sb3ItcmVuZGVyaW5nIiwiZWxldmF0aW9uIiwiZW1wdHktY2VsbHMiLCJmaWxsIiwiZmlsbC1vcGFjaXR5IiwiZmlsbC1ydWxlIiwiZm9udC1rZXJuaW5nIiwiZm9udC1zaXplLWFkanVzdCIsImZvbnQtZmFtaWx5IiwiZm9udC1mZWF0dXJlLXNldHRpbmdzIiwiZm9udC1zdHlsZSIsImZvbnQtc3RyZXRjaCIsImZvbnQtdmFyaWFudCIsImZvbnQtd2VpZ2h0IiwiZ2x5cGgtb3JpZW50YXRpb24tdmVydGljYWwiLCJoeXBoZW5zIiwiaHlwaGVuYXRlLWNoYXJhY3RlciIsImh5cGhlbmF0ZS1saW1pdC1jaGFycyIsImh5cGhlbmF0ZS1saW1pdC1sYXN0IiwiaW1hZ2UtcmVuZGVyaW5nIiwiaW1hZ2UtcmVzb2x1dGlvbiIsImxldHRlci1zcGFjaW5nIiwibGluZS1icmVhayIsImxpbmUtaGVpZ2h0IiwibGlzdC1zdHlsZS1pbWFnZSIsImxpc3Qtc3R5bGUtcG9zaXRpb24iLCJsaXN0LXN0eWxlLXR5cGUiLCJtYXJrZXIiLCJtYXJrZXItZW5kIiwibWFya2VyLW1pZCIsIm1hcmtlci1zdGFydCIsIm9ycGhhbnMiLCJvdmVyZmxvdy13cmFwIiwicGFpbnQtb3JkZXIiLCJwb2ludGVyLWV2ZW50cyIsInBpdGNoLXJhbmdlIiwicXVvdGVzIiwicmljaG5lc3MiLCJydWJ5LWFsaWduIiwicnVieS1wb3NpdGlvbiIsInNwZWFrLWhlYWRlciIsInNwZWFrLW51bWVyYWwiLCJzcGVhay1wdW5jdHVhdGlvbiIsInNwZWVjaC1yYXRlIiwic2hhcGUtcmVuZGVyaW5nIiwic3RyZXNzIiwic3Ryb2tlIiwic3Ryb2tlLWRhc2hhcnJheSIsInN0cm9rZS1kYXNob2Zmc2V0Iiwic3Ryb2tlLWxpbmVjYXAiLCJzdHJva2UtbGluZWpvaW4iLCJzdHJva2UtbWl0ZXJsaW1pdCIsInN0cm9rZS1vcGFjaXR5Iiwic3Ryb2tlLXdpZHRoIiwidGFiLXNpemUiLCJ0ZXh0LWFsaWduIiwidGV4dC1hbGlnbi1sYXN0IiwidGV4dC1hbmNob3IiLCJ0ZXh0LWRlY29yYXRpb24tc2tpcCIsInRleHQtZW1waGFzaXMtY29sb3IiLCJ0ZXh0LWVtcGhhc2lzLXBvc2l0aW9uIiwidGV4dC1lbXBoYXNpcy1zdHlsZSIsInRleHQtY29tYmluZS11cHJpZ2h0IiwidGV4dC1pbmRlbnQiLCJ0ZXh0LWp1c3RpZnkiLCJ0ZXh0LXJlbmRlcmluZyIsInRleHQtc2l6ZS1hZGp1c3QiLCJ0ZXh0LXRyYW5zZm9ybSIsInRleHQtdW5kZXJsaW5lLXBvc2l0aW9uIiwidm9pY2UtZmFtaWx5Iiwidm9sdW1lIiwid2hpdGUtc3BhY2UiLCJ3aWRvd3MiLCJ3b3JkLWJyZWFrIiwid29yZC1zcGFjaW5nIiwid29yZC13cmFwIiwid3JpdGluZy1tb2RlIiwicG9seWZpbGxlZEluaGVyaXRlZFByb3BzIiwic3VwcG9ydGVkTmFtZXNwYWNlcyIsImh0dHA6Ly93d3cuaWRwZi5vcmcvMjAwNy9vcHMiLCJodHRwOi8vd3d3LnczLm9yZy8xOTk5L3hodG1sIiwiaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmciLCJjb3VwbGVkUGF0dGVybnMiLCJjb3VwbGVkRXh0ZW50UGF0dGVybnMiLCJnZW9tTmFtZXMiLCJzaWRlcyIsIm5hbWVzIiwibWF4LXdpZHRoIiwibWF4LWhlaWdodCIsIm1pbi13aWR0aCIsIm1pbi1oZWlnaHQiLCJidWlsZENvdXBsaW5nTWFwIiwic2lkZU1hcCIsImV4dGVudE1hcCIsInBhdHRlcm4iLCJzaWRlIiwiZXh0ZW50UGF0dGVybiIsImNvdXBsaW5nTWFwVmVydCIsImJsb2NrLXN0YXJ0IiwiYmxvY2stZW5kIiwiaW5saW5lLXN0YXJ0IiwiaW5saW5lLWVuZCIsImJsb2NrLXNpemUiLCJpbmxpbmUtc2l6ZSIsImNvdXBsaW5nTWFwSG9yIiwiY291cGxpbmdNYXBWZXJ0UnRsIiwiY291cGxpbmdNYXBIb3JSdGwiLCJDYXNjYWRlVmFsdWUiLCJnZXRCYXNlVmFsdWUiLCJmaWx0ZXJWYWx1ZSIsImluY3JlYXNlU3BlY2lmaWNpdHkiLCJzcGVjaWZpY2l0eSIsIkNvbmRpdGlvbmFsQ2FzY2FkZVZhbHVlIiwiY2FzY2FkZVZhbHVlcyIsInR2IiwiYXYiLCJTUEVDSUFMUyIsInJlZ2lvbi1pZCIsImZyYWdtZW50LXNlbGVjdG9yLWlkIiwiaXNTcGVjaWFsTmFtZSIsImlzUHJvcE5hbWUiLCJpc0luaGVyaXRlZCIsImdldFByb3AiLCJzZXRQcm9wIiwiZ2V0U3R5bGVNYXAiLCJnZXRNdXRhYmxlU3R5bGVNYXAiLCJnZXRWaWV3Q29uZGl0aW9uYWxTdHlsZU1hcCIsIl92aWV3Q29uZGl0aW9uYWxTdHlsZXMiLCJnZXRTcGVjaWFsIiwiZ2V0TXV0YWJsZVNwZWNpYWwiLCJtZXJnZUluIiwicHNldWRvZWxlbWVudCIsInJlZ2lvbklkIiwidmlld0NvbmRpdGlvbk1hdGNoZXIiLCJzdHlsZUtleSIsInN0eWxlTWFwIiwidHMiLCJjaGFpbkFjdGlvbnMiLCJjaGFpbiIsImNoYWluZWQiLCJJbmhlcml0YW5jZVZpc2l0b3IiLCJwcm9wcyIsInNldFByb3BOYW1lIiwiZ2V0Rm9udFNpemUiLCJwYXJlbnRGb250U2l6ZSIsImNvbnZlcnRGb250UmVsYXRpdmVMZW5ndGhUb1B4IiwiYmFzZUZvbnRTaXplIiwiQ2FzY2FkZUFjdGlvbiIsIm1lcmdlV2l0aCIsIkNvbXBvdW5kQWN0aW9uIiwiQ29uZGl0aW9uSXRlbUFjdGlvbiIsImNvbmRpdGlvbkl0ZW0iLCJwdXNoQ29uZGl0aW9uSXRlbSIsImZyZXNoIiwiQXBwbHlSdWxlQWN0aW9uIiwidmlld0NvbmRpdGlvbklkIiwiY3VycmVudFN0eWxlIiwiQ2hhaW5lZEFjdGlvbiIsIm1ha2VQcmltYXJ5IiwiY2FzY2FkZSIsIkNoZWNrQ2xhc3NBY3Rpb24iLCJjdXJyZW50Q2xhc3NOYW1lcyIsImluY2x1ZGVzIiwiaW5zZXJ0SW5UYWJsZSIsIkNoZWNrSWRBY3Rpb24iLCJjdXJyZW50SWQiLCJjdXJyZW50WG1sSWQiLCJDaGVja0xvY2FsTmFtZUFjdGlvbiIsImN1cnJlbnRMb2NhbE5hbWUiLCJ0YWdzIiwiQ2hlY2tOU1RhZ0FjdGlvbiIsImN1cnJlbnROYW1lc3BhY2UiLCJuc1ByZWZpeCIsIm5zQ291bnQiLCJuc3RhZ3MiLCJDaGVja1RhcmdldEVwdWJUeXBlQWN0aW9uIiwiZXB1YlR5cGVQYXR0IiwiY3VycmVudEVsZW1lbnQiLCJlcHViVHlwZSIsImVwdWIiLCJDaGVja05hbWVzcGFjZUFjdGlvbiIsIl90aGlzMTIiLCJDaGVja0F0dHJpYnV0ZVByZXNlbnRBY3Rpb24iLCJfdGhpczEzIiwiaGFzQXR0cmlidXRlTlMiLCJDaGVja0F0dHJpYnV0ZUVxQWN0aW9uIiwiX3RoaXMxNCIsImVwdWJ0eXBlcyIsIkNoZWNrTmFtZXNwYWNlU3VwcG9ydGVkQWN0aW9uIiwiX3RoaXMxNSIsIkNoZWNrQXR0cmlidXRlUmVnRXhwQWN0aW9uIiwicmVnZXhwIiwiX3RoaXMxNiIsIkNoZWNrTGFuZ0FjdGlvbiIsImxhbmdSZWdFeHAiLCJfdGhpczE3IiwiSXNGaXJzdEFjdGlvbiIsImlzRmlyc3QiLCJJc1Jvb3RBY3Rpb24iLCJJc050aEFjdGlvbiIsIl90aGlzMTgiLCJNYXRjaGVycyIsIklzTnRoU2libGluZ0FjdGlvbiIsImN1cnJlbnRTaWJsaW5nT3JkZXIiLCJJc050aFNpYmxpbmdPZlR5cGVBY3Rpb24iLCJjdXJyZW50U2libGluZ1R5cGVDb3VudHMiLCJJc050aExhc3RTaWJsaW5nQWN0aW9uIiwiY3VycmVudEZvbGxvd2luZ1NpYmxpbmdPcmRlciIsIklzTnRoTGFzdFNpYmxpbmdPZlR5cGVBY3Rpb24iLCJjb3VudHMiLCJjdXJyZW50Rm9sbG93aW5nU2libGluZ1R5cGVDb3VudHMiLCJuc0NvdW50cyIsIm5leHRFbGVtZW50U2libGluZyIsIklzRW1wdHlBY3Rpb24iLCJOb2RlIiwiRUxFTUVOVF9OT0RFIiwiVEVYVF9OT0RFIiwiSXNFbmFibGVkQWN0aW9uIiwiSXNEaXNhYmxlZEFjdGlvbiIsIklzQ2hlY2tlZEFjdGlvbiIsIkNoZWNrQ29uZGl0aW9uQWN0aW9uIiwiX3RoaXMxOSIsImNvbmRpdGlvbnMiLCJkZXBlbmRlbnRDb25kaXRpb25zIiwiQ2hlY2tBcHBsaWVkQWN0aW9uIiwiX3RoaXMyMCIsImFwcGxpZWQiLCJjbG9uZWQiLCJOZWdhdGVBY3Rpb25zU2V0IiwiX3RoaXMyMSIsImNoZWNrQXBwbGllZEFjdGlvbiIsImZpcnN0QWN0aW9uIiwiQWJzdHJhY3RDb25kaXRpb25JdGVtIiwiZGVjcmVtZW50IiwiRGVzY2VuZGFudENvbmRpdGlvbkl0ZW0iLCJDaGlsZENvbmRpdGlvbkl0ZW0iLCJBZGphY2VudFNpYmxpbmdDb25kaXRpb25JdGVtIiwiX3RoaXMyMiIsImZpcmVkIiwiRm9sbG93aW5nU2libGluZ0NvbmRpdGlvbkl0ZW0iLCJfdGhpczIzIiwiQWZ0ZXJQc2V1ZG9lbGVtZW50SXRlbSIsImFmdGVycHJvcCIsInByb2Nlc3NQc2V1ZG9lbGVtZW50UHJvcHMiLCJSZXN0b3JlTGFuZ0l0ZW0iLCJRdW90ZXNTY29wZUl0ZW0iLCJvbGRRdW90ZXMiLCJBdHRyVmFsdWVGaWx0ZXJWaXNpdG9yIiwiX3RoaXMyNCIsImNyZWF0ZVZhbHVlRnJvbVN0cmluZyIsImRlZmF1bHRWYWx1ZSIsImF0dHJpYnV0ZU5hbWUiLCJoYXNBdHRyaWJ1dGUiLCJnZXRTdHJpbmdWYWx1ZUZyb21Dc3NDb250ZW50VmFsIiwiQ29udGVudFByb3BWaXNpdG9yIiwiY291bnRlclJlc29sdmVyIiwiX3RoaXMyNSIsIm1heERlcHRoIiwicXVvdGVEZXB0aCIsInVwcGVyIiwibG93ZXIiLCJhZGRpdGl2ZU51bWJlcmluZyIsImVudHJpZXMiLCJhbHBoYWJldGljTnVtYmVyaW5nIiwiYWxwaGFiZXRTdHIiLCJhbHBoYWJldCIsImRpZ2l0IiwibnVtYmVyaW5nIiwiZGlnaXRzIiwibmVnYXRpdmUiLCJmb3JtYWwiLCJtYXJrZXJzIiwidGhvdXNhbmRzIiwiaHVuZHJlZHMiLCJ0ZW5zIiwib25lcyIsImNoaW5lc2VUcmFkSW5mb3JtYWwiLCJ2aXNpdEZ1bmNDb3VudGVyIiwibnVtdmFsIiwiX3RoaXMyNiIsInZpc2l0RnVuY0NvdW50ZXJzIiwibnVtdmFscyIsIl90aGlzMjciLCJ2aXNpdEZ1bmNUYXJnZXRDb3VudGVyIiwidGFyZ2V0VXJsU3RyIiwidGFyZ2V0VXJsIiwiX3RoaXMyOCIsInZpc2l0RnVuY1RhcmdldENvdW50ZXJzIiwiX3RoaXMyOSIsInZpc2l0RnVuY1N0cmluZyIsInZpc2l0RnVuY0NvbnRlbnQiLCJwc2V1ZG9zIiwiX3BzZXVkb3MkcHNldWRvTmFtZSIsIl9wc2V1ZG9zJHBzZXVkb05hbWUkYyIsInJvbWFuIiwiYXJtZW5pYW4iLCJnZW9yZ2lhbiIsImhlYnJldyIsImxhdGluIiwiYWxwaGEiLCJncmVlayIsInJ1c3NpYW4iLCJzcXVhcmUiLCJkaXNjIiwiY2lyY2xlIiwiY29weVRhYmxlIiwiZHN0IiwiUGFyc2VTdGF0ZSIsIkNhc2NhZGUiLCJwYWdldHlwZXMiLCJjcmVhdGVJbnN0YW5jZSIsImNvdW50ZXJMaXN0ZW5lciIsIkNhc2NhZGVJbnN0YW5jZSIsIm5leHRPcmRlciIsInNpYmxpbmdUeXBlQ291bnRzU3RhY2siLCJmb2xsb3dpbmdTaWJsaW5nT3JkZXJTdGFjayIsInZpZXdDb25kaXRpb25zIiwiZmlsdGVyIiwiZGVwZW5kZW50Q29uZGl0aW9uTWF0Y2hlcnMiLCJjb25kaXRpb25JZCIsIl90aGlzMzAiLCJhcHBseUFjdGlvbiIsInB1c2hSdWxlIiwicGFnZVR5cGUiLCJiYXNlU3R5bGUiLCJjdXJyZW50TlNUYWciLCJjdXJyZW50RXB1YlR5cGVzIiwiRU1QVFkiLCJjdXJyZW50UGFnZVR5cGUiLCJhcHBseUFjdGlvbnMiLCJkZWZpbmVDb3VudGVyIiwic2NvcGluZyIsImNvdW50ZXJTY29waW5nIiwicHVzaENvdW50ZXJzIiwiZGlzcGxheVZhbCIsInNldE1hcCIsInNldFZhbCIsIl90aGlzJGN1cnJlbnRFbGVtZW50IiwiX3RoaXMkY3VycmVudEVsZW1lbnQyIiwic2V0Q291bnRlck5hbWUiLCJsaXN0SXRlbUNvdW50cyIsInBvcENvdW50ZXJzIiwic2V0TmFtZWRTdHJpbmdzIiwic3RyaW5nU2V0IiwicHNldWRvcHJvcHMiLCJwdXNoRWxlbWVudCIsInR5cGVzIiwic2libGluZ09yZGVyU3RhY2siLCJjdXJyZW50TmFtZXNwYWNlVHlwZUNvdW50cyIsImZvbGxvd2luZ1NpYmxpbmdUeXBlQ291bnRzU3RhY2siLCJhcHBseUF0dHJGaWx0ZXIiLCJxdW90ZXNDYXNjIiwiaXRlbVRvUHVzaExhc3QiLCJxdW90ZXNWYWwiLCJfdGhpczMxIiwicHNldWRvUHJvcHMiLCJhcHBseUF0dHJGaWx0ZXJJbm5lciIsImVsZW1lbnRTdHlsZSIsInBzZXVkb01hcCIsInBvcFJ1bGUiLCJwb3BFbGVtZW50IiwidWFCYXNlQ2FzY2FkZSIsIkNhc2NhZGVQYXJzZXJIYW5kbGVyIiwidmFsaWRhdG9yU2V0IiwiX3RoaXMzMiIsIlRPUCIsImluc2VydE5vblByaW1hcnkiLCJwcm9jZXNzQ2hhaW4iLCJpc0luc2lkZVNlbGVjdG9yUnVsZSIsInBhdHQiLCJmb290bm90ZUNvbnRlbnQiLCJBY3Rpb25DbGFzcyIsIm50aFNlbGVjdG9yQWN0aW9uQ2xhc3NlcyIsImNvbmRpdGlvbkNvdW50IiwiZmluaXNoQ2hhaW4iLCJTRUxFQ1RPUiIsIl9Dc3NQYXJzZXIkU2xhdmVQYXJzZSIsImluc2lkZVNlbGVjdG9yUnVsZSIsIm1ha2VBcHBseVJ1bGVBY3Rpb24iLCJzcGVjaWFsIiwidmFsaWRhdGVQcm9wZXJ0eUFuZEhhbmRsZVNob3J0aGFuZCIsImludmFsaWRQcm9wZXJ0eVZhbHVlIiwidW5rbm93blByb3BlcnR5Iiwic2ltcGxlUHJvcGVydHkiLCJQbHVnaW4iLCJob29rIiwiY29udmVydGVkIiwiY2FzY3ZhbCIsIm5vdFBhcnNlckhhbmRsZXIiLCJOb3RQYXJhbWV0ZXJQYXJzZXJIYW5kbGVyIiwibnRoLWNoaWxkIiwibnRoLW9mLXR5cGUiLCJudGgtbGFzdC1jaGlsZCIsIm50aC1sYXN0LW9mLXR5cGUiLCJfdGhpczMzIiwicGFyZW50Q2hhaW4iLCJfQ2FzY2FkZVBhcnNlckhhbmRsZXIiLCJEZWZpbmVQYXJzZXJIYW5kbGVyIiwiZGltIiwiUHJvcFNldFBhcnNlckhhbmRsZXIiLCJfdGhpczM0IiwiUHJvcGVydHlQYXJzZXJIYW5kbGVyIiwiX3RoaXMzNSIsImZvckVhY2hWaWV3Q29uZGl0aW9uYWxTdHlsZXMiLCJ2aWV3Q29uZGl0aW9uYWxTdHlsZXMiLCJtZXJnZVZpZXdDb25kaXRpb25hbFN0eWxlcyIsImNhc2NNYXAiLCJtZXJnZVN0eWxlIiwiaXNWZXJ0aWNhbCIsImNhc2NhZGVkIiwid3JpdGluZ01vZGVDYXNjIiwid3JpdGluZ01vZGUiLCJpc1J0bCIsImRpcmVjdGlvbkNhc2MiLCJmbGF0dGVuQ2FzY2FkZWRTdHlsZSIsInJlZ2lvbklkcyIsImlzRm9vdG5vdGUiLCJmb3JFYWNoU3R5bGVzSW5SZWdpb24iLCJyZWdpb25TdHlsZSIsInJlZ2lvbnMiLCJmb290bm90ZVJlZ2lvbiIsInRvIiwibmV3VmFsIiwiY29udmVydFRvUGh5c2ljYWwiLCJkZXN0IiwiY291cGxpbmdNYXAiLCJjYXNjVmFsIiwiY291cGxlZE5hbWUiLCJ0YXJnZXROYW1lIiwiY291cGxlZENhc2NWYWwiLCJjcmVhdGVSZWdFeHBNYXAiLCJ2YWx1ZU1hcHMiLCJ0b1BoeXNpY2FsIiwicGh5c2ljYWwiLCJsb2dpY2FsIiwiY29udmVydCIsIm1hcHMiLCJtYXBzMiIsInJlcGxhY2VkIiwiU2l6ZSIsImhvcml6b250YWwtdGIiLCJ2ZXJ0aWNhbC1ybCIsInZlcnRpY2FsLWxyIiwidG9QaHlzaWNhbE1hcHMiLCJ0b0xvZ2ljYWxNYXBzIiwiZ2V0U2l6ZSIsInNpemVzIiwib3JpZ2luYWwiLCJtYXhXaWR0aCIsIm1pbldpZHRoIiwibWF4SGVpZ2h0IiwibWluSGVpZ2h0IiwiZ2V0Q29tcHV0ZWRWYWx1ZSIsImdldEVsZW1lbnRDb21wdXRlZFN0eWxlIiwid3JpdGluZ01vZGVQcm9wZXJ0eSIsIndyaXRpbmdNb2RlVmFsdWUiLCJpbmxpbmVTaXplTmFtZSIsImJsb2NrU2l6ZU5hbWUiLCJnZXRGaWxsQXZhaWxhYmxlSW5saW5lIiwiZ2V0TWF4Q29udGVudElubGluZSIsImdldE1pbkNvbnRlbnRJbmxpbmUiLCJnZXRGaXRDb250ZW50SW5saW5lIiwiZmlsbEF2YWlsYWJsZUlubGluZSIsIm1pbkNvbnRlbnRJbmxpbmUiLCJwYXJzZWRGaWxsQXZhaWxhYmxlIiwibWF4Q29udGVudElubGluZSIsImdldElkZWFsQmxvY2siLCJnZXRGaWxsQXZhaWxhYmxlQmxvY2siLCJGSUxMX0FWQUlMQUJMRV9JTkxJTkVfU0laRSIsIk1BWF9DT05URU5UX0lOTElORV9TSVpFIiwiTUlOX0NPTlRFTlRfSU5MSU5FX1NJWkUiLCJGSVRfQ09OVEVOVF9JTkxJTkVfU0laRSIsIkZJTExfQVZBSUxBQkxFX0JMT0NLX1NJWkUiLCJNQVhfQ09OVEVOVF9CTE9DS19TSVpFIiwiTUlOX0NPTlRFTlRfQkxPQ0tfU0laRSIsIkZJVF9DT05URU5UX0JMT0NLX1NJWkUiLCJGSUxMX0FWQUlMQUJMRV9XSURUSCIsIkZJTExfQVZBSUxBQkxFX0hFSUdIVCIsIk1BWF9DT05URU5UX1dJRFRIIiwiTUFYX0NPTlRFTlRfSEVJR0hUIiwiTUlOX0NPTlRFTlRfV0lEVEgiLCJNSU5fQ09OVEVOVF9IRUlHSFQiLCJGSVRfQ09OVEVOVF9XSURUSCIsIkZJVF9DT05URU5UX0hFSUdIVCIsImlzUGFnZUZsb2F0IiwiQ09MVU1OIiwiUkVHSU9OIiwiUEFHRSIsIlBhZ2VGbG9hdCIsIm5vZGVQb3NpdGlvbiIsImdldE9yZGVyIiwiaXNBbGxvd2VkT25Db250ZXh0IiwicGFnZUZsb2F0TGF5b3V0Q29udGV4dCIsImlzQW5jaG9yQWxyZWFkeUFwcGVhcmVkIiwiaXNBbGxvd2VkVG9QcmVjZWRlIiwiUGFnZUZsb2F0U3RvcmUiLCJuZXh0UGFnZUZsb2F0SW5kZXgiLCJjcmVhdGVQYWdlRmxvYXRJZCIsImFkZFBhZ2VGbG9hdCIsImZsb2F0IiwiVnRyZWVJbXBsIiwiZmluZFBhZ2VGbG9hdEJ5Tm9kZVBvc2l0aW9uIiwiZmluZFBhZ2VGbG9hdEJ5SWQiLCJQYWdlRmxvYXRGcmFnbWVudCIsImNvbnRpbnVhdGlvbnMiLCJhcmVhIiwiY29udGludWVzIiwiaGFzRmxvYXQiLCJmaW5kTm90QWxsb3dlZEZsb2F0Iiwic2hvdWxkQmVTdGFzaGVkQmVmb3JlIiwiYWRkQ29udGludWF0aW9ucyIsImdldEZsb3dOYW1lIiwiUGFnZUZsb2F0Q29udGludWF0aW9uIiwiUGFnZUZsb2F0TGF5b3V0Q29udGV4dCIsImdlbmVyYXRpbmdOb2RlUG9zaXRpb24iLCJmbG9hdFN0b3JlIiwiZ2V0UHJldmlvdXNTaWJsaW5nIiwiZmxvYXRzRGVmZXJyZWRGcm9tUHJldmlvdXMiLCJmbG9hdHNEZWZlcnJlZFRvTmV4dCIsImdldFBhcmVudCIsImdldFByZXZpb3VzU2libGluZ09mIiwiZ2V0Q29udGFpbmVyIiwic2V0Q29udGFpbmVyIiwicmVhdHRhY2hGbG9hdEZyYWdtZW50cyIsImdldFBhZ2VGbG9hdExheW91dENvbnRleHQiLCJmb3JiaWQiLCJmb3JiaWRkZW5GbG9hdHMiLCJQYWdlRmxvYXRMYXlvdXRTdHJhdGVneVJlc29sdmVyIiwiZmluZEJ5RmxvYXQiLCJpc0ZvcmJpZGRlbiIsImFkZFBhZ2VGbG9hdEZyYWdtZW50IiwiZmxvYXRGcmFnbWVudCIsImRvbnRJbnZhbGlkYXRlIiwiZmxvYXRGcmFnbWVudHMiLCJmcjEiLCJmcjIiLCJpbnZhbGlkYXRlIiwicmVtb3ZlUGFnZUZsb2F0RnJhZ21lbnQiLCJmcmFnbWVudCIsImZpbmRQYWdlRmxvYXRGcmFnbWVudCIsImhhc0Zsb2F0RnJhZ21lbnRzIiwiaGFzQ29udGludWluZ0Zsb2F0RnJhZ21lbnRzSW5GbG93IiwicmVnaXN0ZXJQYWdlRmxvYXRBbmNob3IiLCJhbmNob3JWaWV3Tm9kZSIsImZsb2F0QW5jaG9ycyIsImNvbGxlY3RQYWdlRmxvYXRBbmNob3JzIiwiYW5jaG9ycyIsImZsb2F0SWQiLCJnZXREZWZlcnJlZFBhZ2VGbG9hdENvbnRpbnVhdGlvbnMiLCJjb250IiwiZGVmZXJQYWdlRmxvYXQiLCJoYXNQcmVjZWRpbmdGbG9hdHNEZWZlcnJlZFRvTmV4dCIsImlnbm9yZVJlZmVyZW5jZSIsImdldExhc3RGb2xsb3dpbmdGbG9hdEluRnJhZ21lbnRzIiwibGFzdEZvbGxvd2luZyIsImxhc3RGb2xsb3dpbmdPZlBhcmVudCIsImMxIiwiYzIiLCJnZXRQYWdlRmxvYXRDb250aW51YXRpb25zRGVmZXJyZWRUb05leHQiLCJnZXRGbG9hdHNEZWZlcnJlZFRvTmV4dEluQ2hpbGRDb250ZXh0cyIsImNoZWNrQW5kRm9yYmlkTm90QWxsb3dlZEZsb2F0IiwiY2hlY2tBbmRGb3JiaWRGbG9hdEZvbGxvd2luZ0RlZmVycmVkRmxvYXQiLCJub3RBbGxvd2VkRmxvYXQiLCJsb2NrZWQiLCJyZW1vdmVFbmRGbG9hdEZyYWdtZW50cyIsImRlZmVycmVkRmxvYXRzIiwiZmxvYXRzSW5GcmFnbWVudHMiLCJmciIsImYxIiwiZjIiLCJoYXNTYW1lQ29udGFpbmVyQXMiLCJpbnZhbGlkYXRlZCIsImxheW91dENvbnN0cmFpbnRzIiwiZGV0YWNoQ2hpbGRyZW4iLCJhdHRhY2hDaGlsZHJlbiIsImlzSW52YWxpZGF0ZWQiLCJ2YWxpZGF0ZSIsInRvTG9naWNhbCIsImxvZ2ljYWxGbG9hdFNpZGUiLCJzdGFzaEVuZEZsb2F0RnJhZ21lbnRzIiwiZnJhZ21lbnRGbG9hdFNpZGUiLCJzdGFzaGVkRmxvYXRGcmFnbWVudHMiLCJyZXN0b3JlU3Rhc2hlZEZyYWdtZW50cyIsInN0YXNoZWQiLCJkaXNjYXJkU3Rhc2hlZEZyYWdtZW50cyIsImdldFN0YXNoZWRGbG9hdEZyYWdtZW50cyIsImdldExpbWl0VmFsdWUiLCJsYXlvdXRDb250ZXh0IiwibG9naWNhbFNpZGUiLCJwaHlzaWNhbFNpZGUiLCJsaW1pdCIsImdldExpbWl0VmFsdWVJbm5lciIsInBhcmVudExpbWl0IiwibGltaXRzIiwiZ2V0TGltaXRWYWx1ZXNJbm5lciIsInBhZGRpbmdSZWN0IiwiZmxvYXRNaW5XcmFwQmxvY2tTdGFydCIsImZsb2F0TWluV3JhcEJsb2NrRW5kIiwicmVzb2x2ZUxlbmd0aFBlcmNlbnRhZ2UiLCJjb250YWluZXJMZW5ndGgiLCJjb252ZXJ0TGVuZ3RoVG9QeCIsInJvb3RWaWV3Tm9kZXMiLCJzZXRGbG9hdEFyZWFEaW1lbnNpb25zIiwiYW5jaG9yRWRnZSIsImZvcmNlIiwiYmxvY2tTaXplIiwiaW5saW5lU2l6ZSIsIm91dGVyQmxvY2tTaXplIiwib3V0ZXJJbmxpbmVTaXplIiwiYmxvY2tTdGFydCIsImJsb2NrRW5kIiwiaW5saW5lU3RhcnQiLCJpbmxpbmVFbmQiLCJibG9ja09mZnNldCIsImlubGluZU9mZnNldCIsImxpbWl0QmxvY2tTdGFydEVuZFZhbHVlV2l0aE9wZW5SZWN0IiwiZ2V0UmVjdCIsIm9wZW5SZWN0IiwiYXZhaWxhYmxlQmxvY2tTaXplIiwiY29udGFpbmVyUmVjdCIsIlNpemluZyIsImFkanVzdENvbnRlbnRSZWxhdGl2ZVNpemUiLCJnZXRDb250ZW50SW5saW5lU2l6ZSIsImdldEZsb2F0RnJhZ21lbnRFeGNsdXNpb25zIiwiZ2V0TWF4UmVhY2hlZEFmdGVyRWRnZSIsImVkZ2UiLCJJbmZpbml0eSIsImdldEJsb2NrU3RhcnRFZGdlT2ZCbG9ja0VuZEZsb2F0cyIsImdldFBhZ2VGbG9hdENsZWFyRWRnZSIsImlzQ29udGludWF0aW9uT2ZBbHJlYWR5QXBwZWFyZWRGbG9hdCIsImlzRnJhZ21lbnRXaXRoQWxyZWFkeUFwcGVhcmVkRmxvYXQiLCJjb2x1bW5SZWN0IiwiY29sdW1uQmxvY2tFbmQiLCJibG9ja1N0YXJ0TGltaXQiLCJnZXRQYWdlRmxvYXRQbGFjZW1lbnRDb25kaXRpb24iLCJsb2dpY2FsU2lkZXMiLCJsb2dpY2FsQ2xlYXJTaWRlIiwiZmxvYXRPcmRlciIsImlzUHJlY2VkaW5nRnJhZ21lbnQiLCJoYXNQcmVjZWRpbmdGcmFnbWVudEluQ2hpbGRyZW4iLCJoYXNQcmVjZWRpbmdGcmFnbWVudEluUGFyZW50cyIsImdldExheW91dENvbnN0cmFpbnRzIiwiYWRkTGF5b3V0Q29uc3RyYWludCIsImxheW91dENvbnN0cmFpbnQiLCJpc0NvbHVtbkZ1bGxXaXRoUGFnZUZsb2F0cyIsImdldE1heEJsb2NrU2l6ZU9mUGFnZUZsb2F0cyIsImxvY2siLCJ1bmxvY2siLCJpc0xvY2tlZCIsInBhZ2VGbG9hdExheW91dFN0cmF0ZWdpZXMiLCJzdHJhdGVneSIsImZpbmRCeU5vZGVDb250ZXh0IiwiYXBwbGllc1RvTm9kZUNvbnRleHQiLCJhcHBsaWVzVG9GbG9hdCIsImNyZWF0ZVBhZ2VGbG9hdCIsInJlc29sdmVGbG9hdFJlZmVyZW5jZUZyb21Db2x1bW5TcGFuIiwiY3JlYXRlUGFnZUZsb2F0RnJhZ21lbnQiLCJmbG9hdEFyZWEiLCJhZGp1c3RQYWdlRmxvYXRBcmVhIiwiZmxvYXRDb250YWluZXIiLCJGb290bm90ZSIsIkZvb3Rub3RlRnJhZ21lbnQiLCJMaW5lRm9vdG5vdGVQb2xpY3lMYXlvdXRDb25zdHJhaW50IiwicmVnaW9uQ29udGV4dCIsImFwcGx5Rm9vdG5vdGVTdHlsZSIsImNvbnZlcnRQZXJjZW50YWdlU2l6ZXNUb1B4Iiwic2V0Q29tcHV0ZWRJbnNldHMiLCJzZXRDb21wdXRlZFdpZHRoQW5kSGVpZ2h0IiwiY29uc3RyYWludCIsImZvcmNlZEJyZWFrVmFsdWVzIiwicmVjdG8iLCJ2ZXJzbyIsInJlZ2lvbiIsImlzRm9yY2VkQnJlYWtWYWx1ZSIsInNwcmVhZEJyZWFrVmFsdWVzIiwiaXNTcHJlYWRCcmVha1ZhbHVlIiwiYXZvaWRCcmVha1ZhbHVlcyIsImF2b2lkLXBhZ2UiLCJhdm9pZC1jb2x1bW4iLCJhdm9pZC1yZWdpb24iLCJpc0F2b2lkQnJlYWtWYWx1ZSIsInJlc29sdmVFZmZlY3RpdmVCcmVha1ZhbHVlIiwic2Vjb25kIiwiZmlyc3RJc0ZvcmNlZEJyZWFrVmFsdWUiLCJzZWNvbmRJc0ZvcmNlZEJyZWFrVmFsdWUiLCJicmVha1ZhbHVlVG9TdGFydFNpZGVWYWx1ZSIsImJyZWFrVmFsdWUiLCJzdGFydFNpZGVWYWx1ZVRvQnJlYWtWYWx1ZSIsInN0YXJ0U2lkZVZhbHVlIiwiY2FsY3VsYXRlRWRnZSIsImV4dHJhT2Zmc2V0IiwiY2JveCIsInJhbmdlIiwiY3JlYXRlUmFuZ2UiLCJzZXRTdGFydCIsInNldEVuZCIsImJveGVzIiwiZ2V0UmFuZ2VDbGllbnRSZWN0cyIsImdldEJvdW5kaW5nQ2xpZW50UmVjdCIsImZ1bGxSYW5nZSIsImZ1bGxCb3hlcyIsImZ1bGxCb3giLCJtYXhTaXplIiwiYm94U2l6ZSIsImdldEVsZW1lbnRIZWlnaHQiLCJnZXRDb21wdXRlZE1hcmdpbiIsImlzT3JwaGFuIiwicmVtb3ZlRm9sbG93aW5nU2libGluZ3MiLCJpc1NwZWNpYWwiLCJpc1NwZWNpYWxOb2RlQ29udGV4dCIsIkFic3RyYWN0QnJlYWtQb3NpdGlvbiIsImNhbGN1bGF0ZU9mZnNldCIsImdldE5vZGVDb250ZXh0IiwiY29sbGVjdEVsZW1lbnRzT2Zmc2V0IiwiYnJlYWtQb3NpdGlvbkNob3NlbiIsImVsZW1lbnRzT2Zmc2V0cyIsInJlcGV0aXRpdmVFbGVtZW50IiwibWluaW11bSIsImNhbGN1bGF0ZU1pbmltdW1PZmZzZXQiLCJFZGdlQnJlYWtQb3NpdGlvbiIsImJyZWFrT25FZGdlIiwib3ZlcmZsb3dzIiwib3ZlcmZsb3dJZlJlcGV0aXRpdmVFbGVtZW50c0Ryb3BwZWQiLCJmaW5kQWNjZXB0YWJsZUJyZWFrIiwicGVuYWx0eSIsInVwZGF0ZU92ZXJmbG93cyIsImdldE1pbkJyZWFrUGVuYWx0eSIsImZpbmRFZGdlQnJlYWtQb3NpdGlvbiIsImlzRWRnZVVwZGF0ZWQiLCJwcmVmZXJEcm9wcGluZyIsImlzRmlyc3RDb250ZW50T2ZSZXBldGl0aXZlRWxlbWVudHNPd25lciIsIkJyZWFrIiwidXBkYXRlRWRnZSIsImNsb25lZFBhZGRpbmdCb3JkZXIiLCJjYWxjdWxhdGVDbG9uZWRQYWRkaW5nQm9yZGVyIiwiTGF5b3V0SGVscGVyIiwiaXNPdmVyZmxvd24iLCJpc0luc3RhbmNlT2ZSZXBldGl0aXZlRWxlbWVudHNPd25lckZvcm1hdHRpbmdDb250ZXh0IiwicmVwZXRpdGl2ZUVsZW1lbnRzIiwiZ2V0UmVwZXRpdGl2ZUVsZW1lbnRzIiwiaXNGaXJzdENvbnRlbnROb2RlIiwiYmxvY2tpZnkiLCJibG9ja2lmaWVkU3RyIiwiZGlzcGxheVN0ciIsImlzQWJzb2x1dGVseVBvc2l0aW9uZWQiLCJnZXRDb21wdXRlZERpc2xheVZhbHVlIiwiaXNCbG9jayIsImlzSW5saW5lTGV2ZWwiLCJMYXlvdXRQcm9jZXNzb3JSZXNvbHZlciIsImZpbmQiLCJSRVNPTFZFX0xBWU9VVF9QUk9DRVNTT1IiLCJwcm9jZXNzb3IiLCJCbG9ja0xheW91dFByb2Nlc3NvciIsImxheW91dCIsImxlYWRpbmdFZGdlIiwiaXNGbG9hdE5vZGVDb250ZXh0IiwibGF5b3V0RmxvYXRPckZvb3Rub3RlIiwiaXNCcmVha2FibGUiLCJsYXlvdXRCcmVha2FibGVCbG9jayIsImxheW91dFVuYnJlYWthYmxlIiwiY3JlYXRlRWRnZUJyZWFrUG9zaXRpb24iLCJjb2x1bW5CbG9ja1NpemUiLCJCcmVha1Bvc2l0aW9uIiwic3RhcnROb25JbmxpbmVFbGVtZW50Tm9kZSIsImFmdGVyTm9uSW5saW5lRWxlbWVudE5vZGUiLCJzdG9wQXRPdmVyZmxvdyIsImNsZWFyT3ZlcmZsb3duVmlld05vZGVzIiwicGFyZW50Tm9kZUNvbnRleHQiLCJyZW1vdmVTZWxmIiwiZmluaXNoQnJlYWsiLCJmb3JjZVJlbW92ZVNlbGYiLCJlbmRPZkNvbHVtbiIsImZpeEp1c3RpZmljYXRpb25JZk5lZWRlZCIsInByb2Nlc3NGcmFnbWVudGVkQmxvY2tFZGdlIiwiQmxvY2tGb3JtYXR0aW5nQ29udGV4dCIsImlzRmlyc3RUaW1lIiwiZmlyc3RUaW1lIiwic2F2ZVN0YXRlIiwicmVzdG9yZVN0YXRlIiwiYmxvY2tMYXlvdXRQcm9jZXNzb3IiLCJpc0luc3RhbmNlT2ZCbG9ja0Zvcm1hdHRpbmdDb250ZXh0IiwiUkVTT0xWRV9GT1JNQVRUSU5HX0NPTlRFWFQiLCJEaXNwbGF5IiwiQWJzdHJhY3RMYXlvdXRSZXRyeWVyIiwicHJlcGFyZUxheW91dCIsInRyeUxheW91dCIsIm1vZGUiLCJyZXNvbHZlTGF5b3V0TW9kZSIsImRvTGF5b3V0IiwicG9zaXRpb25BZnRlciIsImFjY2VwdGVkIiwiYWNjZXB0IiwicG9zdExheW91dCIsImluaXRpYWxQb3NpdGlvbiIsImNsZWFyTm9kZXMiLCJzaWJsaW5nIiwiaW5pdGlhbEJyZWFrUG9zaXRpb25zIiwiYnJlYWtQb3NpdGlvbnMiLCJpbml0aWFsRnJhZ21lbnRMYXlvdXRDb25zdHJhaW50cyIsImZyYWdtZW50TGF5b3V0Q29uc3RyYWludHMiLCJpbml0aWFsU3RhdGVPZkZvcm1hdHRpbmdDb250ZXh0IiwiTGF5b3V0SXRlcmF0b3JTdHJhdGVneSIsImluaXRpYWxTdGF0ZSIsImluaXRpYWxOb2RlQ29udGV4dCIsImF0VW5mb3JjZWRCcmVhayIsImJyZWFrIiwic3RhcnROb25EaXNwbGF5YWJsZU5vZGUiLCJhZnRlck5vbkRpc3BsYXlhYmxlTm9kZSIsInN0YXJ0SWdub3JlZFRleHROb2RlIiwiYWZ0ZXJJZ25vcmVkVGV4dE5vZGUiLCJzdGFydE5vbkVsZW1lbnROb2RlIiwiYWZ0ZXJOb25FbGVtZW50Tm9kZSIsInN0YXJ0SW5saW5lRWxlbWVudE5vZGUiLCJhZnRlcklubGluZUVsZW1lbnROb2RlIiwiTGF5b3V0SXRlcmF0b3IiLCJpdGVyYXRlIiwibG9vcEZyYW1lIiwibmV4dFJlc3VsdCIsIm5leHRJblRyZWUiLCJuZXh0Tm9kZUNvbnRleHQiLCJFZGdlU2tpcHBlciIsInN0YXJ0Tm9uSW5saW5lQm94IiwiZW5kRW1wdHlOb25JbmxpbmVCb3giLCJlbmROb25JbmxpbmVCb3giLCJicmVha0F0VGhlRWRnZSIsIm9uU3RhcnRFZGdlcyIsImxlYWRpbmdFZGdlQ29udGV4dHMiLCJsYXN0QWZ0ZXJOb2RlQ29udGV4dCIsInByb2Nlc3NGb3JjZWRCcmVhayIsIm5lZWRGb3JjZWRCcmVhayIsInBhZ2VCcmVha1R5cGUiLCJzYXZlRWRnZUFuZFByb2Nlc3NPdmVyZmxvdyIsImNoZWNrT3ZlcmZsb3dBbmRTYXZlRWRnZUFuZEJyZWFrUG9zaXRpb24iLCJwcm9jZXNzTGF5b3V0Q29uc3RyYWludCIsInZpb2xhdGVDb25zdHJhaW50IiwicmVwZXRpdGl2ZUVsZW1lbnRzQ2FjaGUiLCJBZnRlcklmQ29udGludWVzIiwidmlld1Jvb3QiLCJwc2V1ZG9Db2x1bW4iLCJQc2V1ZG9Db2x1bW4iLCJpbml0aWFsUGFnZUJyZWFrVHlwZSIsImdldENvbHVtbiIsImNyZWF0ZU5vZGVQb3NpdGlvbkZvclBzZXVkb0VsZW1lbnQiLCJwc2V1ZG9FbGVtZW50IiwiUHNldWRvRWxlbWVudCIsImNyZWF0ZVNoYWRvd0NvbnRleHQiLCJST09URUQiLCJBZnRlcklmQ29udGludWVzTGF5b3V0Q29uc3RyYWludCIsInBzZXVkb0VsZW1lbnRIZWlnaHQiLCJvdmVyZmxvd25Ob2RlQ29udGV4dCIsIm5leHRDYW5kaWRhdGUiLCJhbGxvd2VkIiwiYWZmZWN0VG8iLCJBZnRlcklmQ29udGludWVzRWxlbWVudHNPZmZzZXQiLCJlcXVhbHNUbyIsImdldFByaW9yaXR5T2ZGaW5pc2hCcmVhayIsInByb2Nlc3NBZnRlcklmQ29udGludWVzT2ZOb2RlQ29udGV4dCIsInByb2Nlc3NBZnRlcklmQ29udGludWVzIiwibWVkaWFUYWdzIiwic3ZnIiwiYXVkaW8iLCJ2aWRlbyIsIkFsbExheW91dENvbnN0cmFpbnQiLCJjb25zdHJhaW50cyIsIkJveEJyZWFrUG9zaXRpb24iLCJjaGVja1BvaW50cyIsImFscmVhZHlFdmFsdWF0ZWQiLCJicmVha05vZGVDb250ZXh0IiwiZmluZEJveEJyZWFrUG9zaXRpb24iLCJpc1NwZWNpYWxJbmxpbmVEaXNwbGF5IiwiQ29sdW1uIiwidmlld0RvY3VtZW50IiwiZ2V0VG9wRWRnZSIsInN0YXJ0RWRnZSIsImJlZm9yZUVkZ2UiLCJnZXRCb3R0b21FZGdlIiwiZW5kRWRnZSIsImFmdGVyRWRnZSIsImdldExlZnRFZGdlIiwiZ2V0UmlnaHRFZGdlIiwiaXNGbG9hdCIsInN0b3BCeU92ZXJmbG93IiwiZm9vdG5vdGVFZGdlIiwiZ2V0RXhjbHVzaW9ucyIsInBhZ2VGbG9hdEV4Y2x1c2lvbnMiLCJvcGVuQWxsVmlld3MiLCJzZXRWaWV3Um9vdCIsInN0ZXBJbmRleCIsImZsb3dSb290Rm9ybWF0dGluZ0NvbnRleHQiLCJjYWxjdWxhdGVPZmZzZXRJbk5vZGVGb3JOb2RlQ29udGV4dCIsInNldEN1cnJlbnQiLCJtYXliZVBlZWxPZmYiLCJwZWVsT2ZmIiwiYnVpbGRWaWV3VG9OZXh0QmxvY2tFZGdlIiwiYm9keUZyYW1lIiwicG9zaXRpb24xUGFyYW0iLCJwb3NpdGlvblBhcmFtIiwiYnVpbGREZWVwRWxlbWVudFZpZXciLCJwb3N0TGF5b3V0QmxvY2siLCJwb3NpdGlvbjEiLCJjcmVhdGVGbG9hdCIsImtpbGxGbG9hdHMiLCJjc3NGbG9hdCIsImNyZWF0ZUZsb2F0cyIsInBhcnNlQ29tcHV0ZWRMZW5ndGgiLCJpbnNldHMiLCJnZXRDb21wdXRlZFBhZGRpbmdCb3JkZXIiLCJib3JkZXJMZWZ0V2lkdGgiLCJib3JkZXJUb3BXaWR0aCIsImJvcmRlclJpZ2h0V2lkdGgiLCJib3JkZXJCb3R0b21XaWR0aCIsImdldENvbXB1dGVkSW5zZXRzIiwiYm94U2l6aW5nIiwibm9kZUNvbnRleHRJbiIsImxheW91dEZsb2F0Iiwibm9kZUNvbnRleHRBZnRlciIsImZsb2F0QkJveCIsImZsb2F0Qm94IiwicGFyZW50Qm94IiwiZmxvYXRCb3hNZWFzdXJlIiwiZmxvYXRIb3JCb3giLCJkaXIiLCJib3R0b21tb3N0RmxvYXRUb3AiLCJib3hFeHRlbnQiLCJmbG9hdFdpZHRoIiwiZmxvYXRIZWlnaHQiLCJmbG9hdEJvdHRvbSIsImZsb2F0Qm94RWRnZSIsImZsb2F0Qm94VG9wIiwiZmxvYXRCYW5kcyIsImxhc3RZIiwiZmxvYXRCYW5kIiwibGVmdEZsb2F0RWRnZSIsInJpZ2h0RmxvYXRFZGdlIiwidXBkYXRlTWF4UmVhY2hlZEFmdGVyRWRnZSIsInNldHVwRmxvYXRBcmVhIiwiZmxvYXRMYXlvdXRDb250ZXh0IiwiZm9yY2VOb25maXR0aW5nIiwiY29udGFpbmluZ0Jsb2NrUmVjdCIsImZpdFdpdGhpbkNvbnRhaW5lciIsImNyZWF0ZVBhZ2VGbG9hdEFyZWEiLCJmbG9hdEFyZWFFbGVtZW50IiwicGFyZW50UGFnZUZsb2F0TGF5b3V0Q29udGV4dCIsInBhcmVudENvbnRhaW5lciIsIlBhZ2VGbG9hdEFyZWEiLCJsYXlvdXRTaW5nbGVQYWdlRmxvYXRGcmFnbWVudCIsImFsbG93RnJhZ21lbnRlZCIsInBhZ2VGbG9hdEZyYWdtZW50IiwiZmlyc3RGbG9hdCIsIm5ld1Bvc2l0aW9uIiwiZmFpbGVkIiwiZmxvYXRDaHVua1Bvc2l0aW9uIiwibmV3RnJhZ21lbnQiLCJsYXlvdXRQYWdlRmxvYXRJbm5lciIsImNhbmNlbExheW91dCIsImxheW91dFN0YXNoZWRQYWdlRmxvYXRzIiwic3VjY2VzcyIsImV4Y2x1ZGVkIiwibmV3RmxvYXRBcmVhcyIsIm5ld0ZyYWdtZW50cyIsInN0YXNoZWRGcmFnbWVudCIsInNldEZsb2F0QW5jaG9yVmlld05vZGUiLCJhbmNob3IiLCJhcHBseVBzZXVkb2VsZW1lbnRTdHlsZSIsImNvbHVtbkNvbnRleHQiLCJsYXlvdXRQYWdlRmxvYXQiLCJub2RlQ29udGV4dE92ZXJmbG93aW5nRHVlVG9SZXBldGl0aXZlRWxlbWVudHMiLCJjcmVhdGVKdXN0aWZpY2F0aW9uQWRqdXN0bWVudEVsZW1lbnQiLCJpbnNlcnRpb25Qb2ludCIsInNwYW4iLCJpbm5lciIsInRleHRJbmRlbnQiLCJ0ZXh0QWxpZ24iLCJsZWZ0UG9zIiwicmlnaHRQb3MiLCJpbmxpbmVCbG9jayIsInBhZGRpbmciLCJwYWRkaW5nU3RyIiwiYWRkQW5kQWRqdXN0SnVzdGlmaWNhdGlvbkVsZW1lbnQiLCJpbnNlcnRBZnRlciIsImh5cGhlbkNoYXIiLCJyZXNvbHZlSHlwaGVuYXRlQ2hhcmFjdGVyIiwicHJldlNpYmxpbmciLCJwcmV2VGV4dCIsImNvbXBlbnNhdGVKdXN0aWZpY2F0aW9uTGluZUhlaWdodCIsImJyIiwic3BhblJlY3QiLCJiclJlY3QiLCJwcm9jZXNzTGluZVN0eWxpbmciLCJyZXNOb2RlQ29udGV4dCIsImxhc3RDaGVja1BvaW50cyIsInRvdGFsTGluZUNvdW50IiwibGluZVBvc2l0aW9ucyIsImZpbmRMaW5lUG9zaXRpb25zIiwibGluZUJyZWFrIiwiZmluZEFjY2VwdGFibGVCcmVha0luc2lkZSIsInJlc05vZGVDb250ZXh0UGFyYW0iLCJpc0xvbmVJbWFnZSIsImdldFRyYWlsaW5nTWFyZ2luRWRnZUFkanVzdG1lbnQiLCJ0cmFpbGluZ0VkZ2VDb250ZXh0cyIsIm1heFBvcyIsIm1pbk5lZyIsImNoZWNrUG9pbnRJbmRleCIsIm92ZXJmbG93biIsInNhdmVCb3hCcmVha1Bvc2l0aW9uIiwiUE9TVF9MQVlPVVRfQkxPQ0siLCJmaW5kRW5kT2ZMaW5lIiwibGluZVBvc2l0aW9uIiwiaXNVcGRhdGVNYXhSZWFjaGVkQWZ0ZXJFZGdlIiwiZWZmZWN0aXZlTGluZVBvc2l0aW9uIiwibG93Q1AiLCJsb3cxIiwiaGlnaENQIiwiaGlnaDEiLCJtaWQxIiwiZWRnZVBvc2l0aW9uIiwidGV4dE5vZGUiLCJyZXNvbHZlVGV4dE5vZGVCcmVha2VyIiwiYnJlYWtUZXh0Tm9kZSIsIlJFU09MVkVfVEVYVF9OT0RFX0JSRUFLRVIiLCJUZXh0Tm9kZUJyZWFrZXIiLCJnZXRSYW5nZUJveGVzIiwid2VudFVwIiwibGFzdEdvb2QiLCJoYXZlU3RhcnQiLCJlbmROb3RSZWFjaGVkIiwic2Vla1JhbmdlIiwic2V0U3RhcnRCZWZvcmUiLCJzZXRFbmRBZnRlciIsImJveExpc3QiLCJsaW5lQmVmb3JlIiwibGluZUFmdGVyIiwibGluZUVuZCIsImxpbmVMZW5ndGgiLCJvdmVybGFwIiwicGFkZGluZ0JvcmRlcnMiLCJnZXRPZmZzZXRCeVJlcGV0aXRpdmVFbGVtZW50cyIsImJwIiwicmVwZXRpdGl2ZUVsZW1lbnRzT2Zmc2V0IiwiZmlyc3RPdmVyZmxvd2luZyIsImZpbmRGaXJzdE92ZXJmbG93aW5nRWRnZUFuZENoZWNrUG9pbnQiLCJsaW5lSW5kZXgiLCJmb3JjZUN1dEJlZm9yZU92ZXJmbG93aW5nIiwiY2hlY2tQb2ludCIsImJsb2NrRWRnZSIsImdldEFmdGVyRWRnZU9mQmxvY2tDb250YWluZXIiLCJibG9ja1BhcmVudCIsImNwIiwiZmluZEFjY2VwdGFibGVCcmVha1Bvc2l0aW9uIiwibmV4dFBlbmFsdHkiLCJtaW5QZW5hbHR5IiwiYnJlYWtQb3NpdGlvbiIsImRvRmluaXNoQnJlYWsiLCJpbml0aWFsQ29tcHV0ZWRCbG9ja1NpemUiLCJza2lwVGFpbEVkZ2VzIiwiZmxvd1Bvc2l0aW9uIiwiemVyb0luZGVudCIsImNoZWNrT3ZlcmZsb3dBbmRTYXZlRWRnZSIsIm1hcmdpbkVkZ2UiLCJzYXZlRXZlbk92ZXJmbG93biIsInNhdmVFZGdlQnJlYWtQb3NpdGlvbiIsImFwcGx5Q2xlYXJhbmNlIiwic3BhY2VyIiwic3BhY2VyQm94IiwiY2xlYXJFZGdlIiwid0FkaiIsImhBZGoiLCJpc0JGQyIsInNraXBFZGdlcyIsImZvcmNlZEJyZWFrVmFsdWUiLCJsYXlvdXRQcm9jZXNzb3IiLCJub2RlQ29udGV4dFBhcmFtIiwibGFzdEFmdGVyUG9zaXRpb24iLCJyZXN1bHROb2RlQ29udGV4dCIsImxheW91dE5leHQiLCJpbml0R2VvbSIsImNvbHVtbkJCb3giLCJpbmNsdWRlIiwiZXhjbHVkZSIsImdyYW51bGFyaXR5Iiwic2VnbWVudCIsInNlZ21lbnRzIiwic2VnbWVudENvdW50IiwibG93ZXN0SW5jbHVkZUluZGV4Iiwic2VnbWVudEluZGV4IiwiYWN0aXZlU2VnbWVudHMiLCJ5Mm1pbiIsInluIiwiYmFuZEludGVyc2VjdGlvbnMiLCJiaTEiLCJiaTIiLCJydyIsImNodW5rUG9zaXRpb25zIiwiYnJlYWtBdEVkZ2UiLCJpc0Z1bGxXaXRoUGFnZUZsb2F0cyIsIm5leHRJblRyZWVMaXN0ZW5lciIsInJldHJ5ZXIiLCJDb2x1bW5MYXlvdXRSZXRyeWVyIiwicHNldWRvUGFyZW50IiwiZG9GaW5pc2hCcmVha09mRnJhZ21lbnRMYXlvdXRDb25zdHJhaW50cyIsInNvcnRlZEZyYWdtZW50TGF5b3V0Q29uc3RyYWludHMiLCJwZW5kaW5nIiwicmVkb0xheW91dCIsImlzUHNldWRvZWxlbWVudCIsInNhdmVEaXN0YW5jZVRvQmxvY2tFbmRGbG9hdHMiLCJibG9ja1N0YXJ0RWRnZU9mQmxvY2tFbmRGbG9hdHMiLCJpc0Zpbml0ZSIsImJsb2NrRGlzdGFuY2VUb0Jsb2NrRW5kRmxvYXRzIiwiaXNJbnN0YW5jZU9mUmVwZXRpdGl2ZUVsZW1lbnRzT3duZXJMYXlvdXRDb25zdHJhaW50IiwiaXNJbnN0YW5jZU9mQWZ0ZXJJZkNvbnRpbnVlc0xheW91dENvbnN0cmFpbnQiLCJnZXRFbGVtZW50c09mZnNldHNGb3JUYWJsZUNlbGwiLCJwYXJlbnRDbG9uZWRQYWRkaW5nQm9yZGVyIiwic3RhcnROb2RlQ29udGV4dHMiLCJhbGxvd0JyZWFrQXRTdGFydFBvc2l0aW9uIiwic3RhcnROb2RlQ29udGV4dCIsImlzU3RhcnROb2RlQ29udGV4dCIsImlzTGFzdEFmdGVyTm9kZUNvbnRleHQiLCJnZXRDb2x1bW5FbGVtZW50IiwiY2hlY2twb2ludEluZGV4Iiwidmlld0luZGV4IiwiYnJlYWtBZnRlclNvZnRIeXBoZW4iLCJicmVha0FmdGVyT3RoZXJDaGFyYWN0ZXIiLCJ1cGRhdGVOb2RlQ29udGV4dCIsInJlcGxhY2VEYXRhIiwiY2gwIiwiY2gxIiwiRGVmYXVsdExheW91dE1vZGUiLCJfTGF5b3V0UmV0cnllcnMkQWJzdHIiLCJpbml0aWFsT3ZlcmZsb3duIiwiTGF5b3V0UmV0cnllcnMiLCJoYXNOZXh0Q2FuZGlkYXRlIiwiZml4RmxvYXRTaXplQW5kUG9zaXRpb24iLCJyZWZXaWR0aCIsInJlZkhlaWdodCIsImNvbnZlcnRQZXJjZW50YWdlVG9QeCIsInJlZlZhbHVlIiwidmFsdWVTdHJpbmciLCJwZXJjZW50YWdlVmFsdWUiLCJyb290Vmlld05vZGUiLCJmbG9hdE1hcmdpbnMiLCJSZXBldGl0aXZlRWxlbWVudHNPd25lckZvcm1hdHRpbmdDb250ZXh0Iiwicm9vdFNvdXJjZU5vZGUiLCJnZXRSb290Vmlld05vZGUiLCJnZXRSb290Tm9kZUNvbnRleHQiLCJpbml0aWFsaXplUmVwZXRpdGl2ZUVsZW1lbnRzIiwiU2hhcmVkIiwiZWxlbWVudHMiLCJSZXBldGl0aXZlRWxlbWVudHMiLCJvd25lclNvdXJjZU5vZGUiLCJzZXRIZWFkZXJOb2RlQ29udGV4dCIsImhlYWRlck5vZGVQb3NpdGlvbiIsImhlYWRlclNvdXJjZU5vZGUiLCJoZWFkZXJWaWV3Tm9kZSIsInNldEZvb3Rlck5vZGVDb250ZXh0IiwiZm9vdGVyTm9kZVBvc2l0aW9uIiwiZm9vdGVyU291cmNlTm9kZSIsImZvb3RlclZpZXdOb2RlIiwidXBkYXRlSGVpZ2h0IiwiaGVhZGVySGVpZ2h0IiwiZm9vdGVySGVpZ2h0IiwicHJlcGFyZUxheW91dEZyYWdtZW50IiwiaXNTa2lwSGVhZGVyIiwiaXNTa2lwRm9vdGVyIiwiZW5hYmxlU2tpcHBpbmdGb290ZXIiLCJlbmFibGVTa2lwcGluZ0hlYWRlciIsImFwcGVuZEhlYWRlclRvRnJhZ21lbnQiLCJyb290Tm9kZUNvbnRleHQiLCJhcHBlbmRFbGVtZW50VG9GcmFnbWVudCIsImFwcGVuZEZvb3RlclRvRnJhZ21lbnQiLCJMYXlvdXQiLCJhbGxvd0luc2VydFJlcGVhdGl0aXZlRWxlbWVudHMiLCJtb3ZlQ2hpbGRyZW4iLCJpc0FmdGVyTGFzdENvbnRlbnQiLCJmaW5kUmVzdWx0RnJvbUNhY2hlIiwiYWZ0ZXJMYXN0Q29udGVudE5vZGVDYWNoZSIsImlzQWZ0ZXJOb2RlQ29udGV4dE9mIiwibGFzdENvbnRlbnRTb3VyY2VOb2RlIiwiYWZmZWN0ZWROb2RlQ2FjaGUiLCJjYWNoZSIsImNhbGN1bGF0b3IiLCJjYWNoZUVudHJ5IiwiaW5jbHVkZUNoaWxkcmVuIiwicGFyZW50c09mTm9kZSIsImN1cnJlbnRQYXJlbnQiLCJwcmV2aW91c0VsZW1lbnRTaWJsaW5nIiwiZmlyc3RDb250ZW50U291cmNlTm9kZSIsImlzRW5hYmxlVG9VcGRhdGVTdGF0ZSIsInVwZGF0ZVN0YXRlIiwicHJldmVudFNraXBwaW5nSGVhZGVyIiwicHJldmVudFNraXBwaW5nRm9vdGVyIiwiaXNIZWFkZXJSZWdpc3RlcmVkIiwiaXNGb290ZXJSZWdpc3RlcmVkIiwiaXNIZWFkZXJTb3VyY2VOb2RlIiwiaXNGb290ZXJTb3VyY2VOb2RlIiwiTGF5b3V0RW50aXJlQmxvY2siLCJkb25lSW5pdGlhbExheW91dCIsIkxheW91dEZyYWdtZW50ZWRCbG9jayIsIkxheW91dEVudGlyZU93bmVyQmxvY2siLCJkb0luaXRpYWxMYXlvdXQiLCJMYXlvdXRGcmFnbWVudGVkT3duZXJCbG9jayIsIlJlcGV0aXRpdmVFbGVtZW50c093bmVyTGF5b3V0Q29uc3RyYWludCIsIlJlcGV0aXRpdmVFbGVtZW50c093bmVyTGF5b3V0UmV0cnllciIsIkVudGlyZUJsb2NrTGF5b3V0U3RyYXRlZ3kiLCJMYXlvdXRVdGlsIiwiYXBwZW5kSGVhZGVyVG9BbmNlc3RvcnMiLCJyZXBldGl0aXZlTGF5b3V0UHJvY2Vzc29yIiwibGF5b3V0RW50aXJlQmxvY2siLCJUYWJsZVJvdyIsInJvd0luZGV4IiwiYWRkQ2VsbCIsImNlbGwiLCJjZWxscyIsImdldE1pbmltdW1IZWlnaHQiLCJUYWJsZUNlbGwiLCJjb2x1bW5JbmRleCIsInZpZXdFbGVtZW50IiwiY29sU3BhbiIsInJvd1NwYW4iLCJzZXRIZWlnaHQiLCJzZXRBbmNob3JTbG90Iiwic2xvdCIsImFuY2hvclNsb3QiLCJUYWJsZVNsb3QiLCJUYWJsZUNlbGxGcmFnbWVudCIsInBzZXVkb0NvbHVtbkNvbnRhaW5lciIsImNlbGxOb2RlQ29udGV4dCIsIlRhYmxlQ2FwdGlvblZpZXciLCJCZXR3ZWVuVGFibGVSb3dCcmVha1Bvc2l0aW9uIiwiZ2V0QWNjZXB0YWJsZUNlbGxCcmVha1Bvc2l0aW9ucyIsImFjY2VwdGFibGVDZWxsQnJlYWtQb3NpdGlvbnMiLCJjZWxsRnJhZ21lbnRzIiwiZ2V0Q2VsbEZyYWdtZW50cyIsImNlbGxGcmFnbWVudCIsImdldFJvd0luZGV4IiwiZmluZFJvd0luZGV4QnlTb3VyY2VOb2RlIiwiZ2V0Um93U3Bhbm5pbmdDZWxsc092ZXJmbG93aW5nVGhlUm93IiwiZ2V0Q2VsbEZyYWdtZW50T2ZDZWxsIiwiSW5zaWRlVGFibGVSb3dCcmVha1Bvc2l0aW9uIiwiYmVmb3JlTm9kZUNvbnRleHQiLCJhbGxDZWxsc0JyZWFrYWJsZSIsInJvdyIsImdldFJvd0J5SW5kZXgiLCJpc0ZyZWVseUZyYWdtZW50YWJsZVJvdyIsImdldENlbGxzRmFsbGluZ09uUm93IiwiVGFibGVGb3JtYXR0aW5nQ29udGV4dCIsInRhYmxlU291cmNlTm9kZSIsImNlbGxCcmVha1Bvc2l0aW9ucyIsImNlbGxOb2RlUG9zaXRpb24iLCJmaW5pc2hGcmFnbWVudCIsImFkZFJvdyIsInJvd3MiLCJnZXRSb3dTbG90cyIsInJvd1Nsb3RzIiwic2xvdHMiLCJyb3dVcHBlciIsInN0YXJ0Q29sSW5kZXgiLCJhZGRDZWxsRnJhZ21lbnQiLCJ1bmlxdWVDZWxscyIsInRhYmxlV2lkdGgiLCJnZXRDb2x1bW5Db3VudCIsImNvbHVtbkNvdW50Iiwic3VtIiwidXBkYXRlQ2VsbFNpemVzIiwiZmluZENlbGxGcm9tQ29sdW1uIiwidGFibGVDZWxsIiwiY29sIiwiY29sbGVjdEVsZW1lbnRzT2Zmc2V0T2ZVcHBlckNlbGxzIiwiY29sbGVjdGVkIiwiY29sbGVjdEVsZW1lbnRzT2Zmc2V0RnJvbUNvbHVtbiIsImNvbGxlY3RFbGVtZW50c09mZnNldE9mSGlnaGVzdENvbHVtbiIsImVsZW1lbnRzSW5Db2x1bW4iLCJFbGVtZW50c09mZnNldE9mVGFibGVDZWxsIiwiUmVwZXRpdGl2ZUVsZW1lbnRJbXBsIiwicmVwZWF0aXRpdmVFbGVtZW50c0luQ29sdW1ucyIsImNhbGN1bGF0ZU1heE9mZnNldE9mQ29sdW1uIiwibWF4T2Zmc2V0IiwiaXNWYWxpZFBhcmVudE9mVGFibGVSb3ciLCJza2lwTmVzdGVkVGFibGUiLCJwYXJlbnREaXNwbGF5IiwiaXNOZXN0ZWRJbmxpbmVUYWJsZSIsIkVudGlyZVRhYmxlTGF5b3V0U3RyYXRlZ3kiLCJwb3N0TGF5b3V0QmxvY2tDb250ZW50cyIsImNhcHRpb25WaWV3IiwiY2FwdGlvbnMiLCJpbkhlYWRlck9yRm9vdGVyIiwiaW5Sb3ciLCJjb21wdXRlZFN0eWxlIiwibGFzdFJvd1ZpZXdOb2RlIiwicmVnaXN0ZXJDaGVja1BvaW50IiwiVGFibGVMYXlvdXRTdHJhdGVneSIsIm9yaWdpbmFsU3RvcEF0T3ZlcmZsb3ciLCJyZXNldENvbHVtbiIsImdldENvbFNwYW5uaW5nQ2VsbFdpZHRoIiwiY29sV2lkdGhzIiwibGF5b3V0Q2VsbCIsInN0YXJ0Q2h1bmtQb3NpdGlvbiIsImNlbGxWaWV3Tm9kZSIsImhhc0Jyb2tlbkNlbGxBdFNsb3QiLCJzbG90SW5kZXgiLCJjZWxsQnJlYWtQb3NpdGlvbiIsImV4dHJhY3RSb3dTcGFubmluZ0NlbGxCcmVha1Bvc2l0aW9ucyIsInJvd1NwYW5uaW5nQ2VsbEJyZWFrUG9zaXRpb25zIiwiY3VycmVudFJvd0luZGV4IiwibGF5b3V0Um93U3Bhbm5pbmdDZWxsc0Zyb21QcmV2aW91c0ZyYWdtZW50Iiwicm93Q291bnQiLCJjdXJyZW50Um93Iiwic3Bhbm5pbmdDZWxsUm93SW5kZXgiLCJvY2N1cGllZFNsb3RJbmRpY2VzIiwicm93Q2VsbEJyZWFrUG9zaXRpb25zIiwicm93Tm9kZUNvbnRleHQiLCJjb250MSIsImFkZER1bW15Q2VsbFVudGlsIiwidXBwZXJDb2x1bW5JbmRleCIsImR1bW15IiwiYnJlYWtDaHVua1Bvc2l0aW9uIiwic3RhcnRUYWJsZVJvdyIsImluSGVhZGVyIiwiaW5Gb290ZXIiLCJjdXJyZW50Q29sdW1uSW5kZXgiLCJyZWdpc3RlckNlbGxGcmFnbWVudEluZGV4IiwidGROb2RlU3RlcCIsImdldEVsZW1lbnRPZmZzZXQiLCJzdGFydFRhYmxlQ2VsbCIsImFmdGVyTm9kZUNvbnRleHQiLCJzdGFydE5vZGVQb3NpdGlvbiIsImlnbm9yZUxpc3QiLCJ0YWJsZS1jYXB0aW9uIiwidGFibGUtY29sdW1uLWdyb3VwIiwidGFibGUtY29sdW1uIiwidGFibGVMYXlvdXRPcHRpb25DYWNoZSIsIlRhYmxlTGF5b3V0UHJvY2Vzc29yIiwibGF5b3V0RW50aXJlVGFibGUiLCJnZXRDb2x1bW5XaWR0aHMiLCJsYXN0Um93IiwiZHVtbXlSb3ciLCJkdW1teUNlbGxzIiwiZ2V0Q29sR3JvdXBFbGVtZW50cyIsInRhYmxlRWxlbWVudCIsImNvbEdyb3VwcyIsIm5vcm1hbGl6ZUFuZEdldENvbEVsZW1lbnRzIiwiY29scyIsImNvbEdyb3VwIiwiYWRkTWlzc2luZ0NvbEVsZW1lbnRzIiwibm9ybWFsaXplQ29sR3JvdXBzIiwidGFibGVSb290U291cmNlTm9kZSIsInBhaXIiLCJ0YWJsZUxheW91dE9wdGlvbiIsInRhYmxlQkJveCIsImNhbGN1bGF0ZUJyZWFrUG9zaXRpb25zSW5zaWRlIiwiRW50aXJlVGFibGVCcmVha1Bvc2l0aW9uIiwiYWRkQ2FwdGlvbnMiLCJjYXB0aW9uIiwiYWRkQ29sR3JvdXBzIiwicmVtb3ZlQ29sR3JvdXBzIiwiaXRlcmF0b3IiLCJMYXlvdXRSZXRyeWVyIiwiY2VsbENvbnRlbnRFbGVtZW50IiwiY2VsbEVsZW1lbnQiLCJjZWxsRWxlbWVudFJlY3QiLCJ0YWJsZUZvcm1hdHRpbmdDb250ZXh0IiwiTGF5b3V0RnJhZ21lbnRlZFRhYmxlIiwiTGF5b3V0RW50aXJlVGFibGUiLCJ0YWJsZU5vZGVDb250ZXh0IiwiRW50aXJlVGFibGVMYXlvdXRDb25zdHJhaW50IiwidGFibGVSb290Tm9kZSIsIlRhYmxlUm93TGF5b3V0Q29uc3RyYWludCIsImNvbGxlY3RDZWxsRnJhZ21lbnRMYXlvdXRDb25zdHJhaW50cyIsImNlbGxGcmFnbWVudExheW91dENvbnN0cmFpbnRzIiwicmVtb3ZlRHVtbXlSb3dOb2RlcyIsIl9SZXBldGl0aXZlRWxlbWVudEltcDQiLCJhcnJheSIsImR1bW15Tm9kZSIsImdldENlbGxGcmFnZW1udHMiLCJ0YWJsZUxheW91dFByb2Nlc3NvciIsIm1lYW4iLCJDb2x1bW5CYWxhbmNpbmdUcmlhbFJlc3VsdCIsImxheW91dFJlc3VsdCIsImdldEJsb2NrU2l6ZSIsInNldEJsb2NrU2l6ZSIsIkNvbHVtbkJhbGFuY2VyIiwibGF5b3V0Q29udGFpbmVyIiwiY29sdW1uR2VuZXJhdG9yIiwicmVnaW9uUGFnZUZsb2F0TGF5b3V0Q29udGV4dCIsIm9yaWdpbmFsQ29udGFpbmVyQmxvY2tTaXplIiwiYmFsYW5jZUNvbHVtbnMiLCJwcmVCYWxhbmNlIiwic2F2ZVBhZ2VGbG9hdExheW91dENvbnRleHRzIiwiY2FuZGlkYXRlcyIsImNyZWF0ZVRyaWFsUmVzdWx0IiwidXBkYXRlQ29uZGl0aW9uIiwicmVzdG9yZUNvbnRlbnRzIiwicG9zdEJhbGFuY2UiLCJjYWxjdWxhdGVQZW5hbHR5IiwiY29sdW1uUGFnZUZsb2F0TGF5b3V0Q29udGV4dHMiLCJuZXdMYXlvdXRSZXN1bHQiLCJjb2x1bW5zIiwiY2FuUmVkdWNlQ29udGFpbmVyU2l6ZSIsImxhc3RDYW5kaWRhdGUiLCJzZWNvbmRMYXN0Q2FuZGlkYXRlIiwicmVkdWNlQ29udGFpbmVyU2l6ZSIsIm5ld0VkZ2UiLCJCYWxhbmNlTGFzdENvbHVtbkJhbGFuY2VyIiwidG90YWxCbG9ja1NpemUiLCJvcmlnaW5hbFBvc2l0aW9uIiwiY2hlY2tQb3NpdGlvbiIsImlzTGFzdENvbHVtbkxvbmdlclRoYW5BbnlPdGhlckNvbHVtbiIsImZvdW5kVXBwZXJCb3VuZCIsImxhc3RDb2x1bW5CbG9ja1NpemUiLCJCYWxhbmNlTm9uTGFzdENvbHVtbkJhbGFuY2VyIiwibWVhblZhbHVlIiwiY29tcHV0ZWRCbG9ja1NpemVzIiwiU2xpcFJhbmdlIiwiZW5kU3R1Y2tGaXhlZCIsImVuZEZpeGVkIiwiZW5kU2xpcHBlZCIsIlNsaXBNYXAiLCJnZXRNYXhGaXhlZCIsImdldE1heFNsaXBwZWQiLCJhZGRTdHVja1JhbmdlIiwiYWRkU2xpcHBlZFJhbmdlIiwic2xpcHBlZEJ5Rml4ZWQiLCJmaXhlZEJ5U2xpcHBlZCIsInNsaXBwZWQiLCJCb3giLCJhdEJsb2NrU3RhcnQiLCJhdEZsb3dTdGFydCIsImlzUGFyZW50Qm94RGlzcGxheWVkIiwiaGFzQm94IiwiX3BzZXVkb3MiLCJiZWZvcmVCb3giLCJzdHlsZVZhbHVlIiwiZ2V0QnJlYWtWYWx1ZSIsImJ1aWxkQWZ0ZXJQc2V1ZG9FbGVtZW50Qm94IiwiYWZ0ZXJCb3giLCJzdHlsZVZhbHVlcyIsImN2IiwiZGlzcGxheVZhbHVlIiwiaXNCbG9ja1ZhbHVlIiwiaGFzQm94VmFsdWUiLCJCb3hTdGFjayIsImxhc3RCb3giLCJsYXN0Rmxvd05hbWUiLCJpc0N1cnJlbnRCb3hEaXNwbGF5ZWQiLCJuZXdGbG93Q2h1bmsiLCJhdFN0YXJ0U3RhY2siLCJpc0F0Rmxvd1N0YXJ0IiwiZW5jb3VudGVyZWRUZXh0Tm9kZSIsImF0U3RhcnQiLCJuZWFyZXN0QmxvY2tTdGFydE9mZnNldCIsIlN0eWxlciIsInByaW1hcnlGbG93cyIsImNhc2NhZGVIb2xkZXIiLCJvZmZzZXRNYXAiLCJyb290T2Zmc2V0IiwiYm94U3RhY2siLCJnZXRBdHRyU3R5bGUiLCJwb3N0cHJvY2Vzc1RvcFN0eWxlIiwiYm9keVJlYWNoZWQiLCJwcmltYXJ5U3RhY2siLCJyZXBsYXlGbG93RWxlbWVudHNGcm9tT2Zmc2V0IiwiaGFzUHJvcCIsInRyYW5zZmVyUHJvcHNUb1Jvb3QiLCJzcmNTdHlsZSIsInBuYW1lIiwicm9vdFN0eWxlIiwiZWxlbVN0eWxlIiwiaXNCb2R5Iiwicm9vdEJhY2tncm91bmRBc3NpZ25lZCIsImJhY2tncm91bmRDb2xvciIsImJhY2tncm91bmRQcm9wcyIsImJhY2tncm91bmRJbWFnZSIsInJvb3RMYXlvdXRBc3NpZ25lZCIsImNvbHVtblByb3BzIiwibGF5b3V0UHJvcHMiLCJ1bml0U2l6ZSIsImdldFRvcENvbnRhaW5lclN0eWxlIiwic3R5bGVVbnRpbCIsIkNTU1N0eWxlRGVjbGFyYXRpb24iLCJzdHlsZUF0dHJWYWx1ZSIsImdldFJlYWNoZWRPZmZzZXQiLCJmbG93TmFtZVN0ciIsImVuY291bnRlcmVkRmxvd0VsZW1lbnQiLCJnZXROb2RlQnlPZmZzZXQiLCJub2RlT2Zmc2V0IiwiZ2V0Tm9kZU9mZnNldCIsInJlc2V0Rmxvd0NodW5rU3RyZWFtIiwiZmxvd0xpc3RlbmVyIiwiZmxvd0NodW5rcyIsImVuY291bnRlcmVkRmxvd0NodW5rIiwic3R5bGVVbnRpbEZsb3dJc1JlYWNoZWQiLCJmbG93VG9SZWFjaCIsImlkVG9SZWFjaCIsIm9wdGlvbnNDViIsInN0YXRpYyIsImxpbmdlckNWIiwicHJpb3JpdHlDViIsImJyZWFrQmVmb3JlVmFsdWVzIiwiZmxvdyIsInJlZ2lzdGVyRm9yY2VkQnJlYWtPZmZzZXQiLCJmb3JjZWRCcmVha09mZnNldHMiLCJsb29rdXAiLCJ0YXJnZXRTbGlwcGVkT2Zmc2V0IiwiYWZ0ZXJQc2V1ZG9CcmVha0JlZm9yZSIsImJsb2NrU3RhcnRPZmZzZXQiLCJiZWZvcmVQc2V1ZG9CcmVha0FmdGVyIiwidmFsaWRhdG9yIiwibWFya0FzU3RhcnRHcm91cCIsImlzU3RhcnRHcm91cCIsIm1hcmtBc0VuZEdyb3VwIiwiaXNFbmRHcm91cCIsIm1hcmtBc1N0YXJ0QWx0ZXJuYXRlIiwiaXNTdGFydEFsdGVybmF0ZSIsIm1hcmtBc0VuZEFsdGVybmF0ZSIsImlzRW5kQWx0ZXJuYXRlIiwiZ2V0QWx0ZXJuYXRlIiwiQ29ubmVjdGlvbiIsIndoZXJlIiwiVmFsaWRhdGluZ0dyb3VwIiwiY29ubmVjdCIsIm5vZGVJbmRleCIsImNvbm5lY3Rpb25zIiwid2hhdCIsImdyb3VwIiwiY2xvbmVkTm9kZSIsImNvbm5lY3Rpb24iLCJncm91cENvbm5lY3Rpb24iLCJub21hdGNoIiwiYWRkU3BlY2lhbFRvQXJyIiwiY2xhdXNlIiwiQUxXQVlTX0ZBSUwiLCJmYWlsdXJlIiwiZW5kU3BlY2lhbEdyb3VwIiwiYXJycyIsInN0YXJ0U3BlY2lhbEdyb3VwIiwiZW5kQ2xhdXNlIiwic3RhcnRDbGF1c2UiLCJhZGRQcmltaXRpdmUiLCJlbXB0eUhlYWQiLCJpc1NpbXBsZSIsImlzUHJpbWl0aXZlIiwiUHJpbWl0aXZlVmFsaWRhdG9yIiwiYWRkR3JvdXAiLCJob3ciLCJBTFRFUk5BVEUiLCJjb21iaW5lIiwiY29ubmVjdGlvbkluZGV4IiwiUkVQRUFURUQiLCJPUFRJT05BTCIsInN1Y2Nlc3NUZXJtaW5hbCIsImZhaWxUZXJtaW5hbCIsIlByb3BlcnR5VmFsaWRhdG9yIiwidmFsaWRhdGVGb3JTaG9ydGhhbmQiLCJydmFsIiwiaWRlbnRzIiwidW5pdHMiLCJOT19JREVOVFMiLCJMaXN0VmFsaWRhdG9yIiwiZmFpbHVyZVRlcm1pbmFsIiwidmFsaWRhdGVMaXN0Iiwic3RhcnRJbmRleCIsImFsdGVybmF0aXZlU3RhY2siLCJhbHRlcm5hdGl2ZXMiLCJpbnZhbCIsIm91dHZhbCIsIlNwYWNlTGlzdFZhbGlkYXRvciIsIkNvbW1hTGlzdFZhbGlkYXRvciIsInZhbGlkYXRlU2luZ2xlIiwiaGFzQ29tbWFMaXN0VmFsaWRhdG9yIiwiRnVuY1ZhbGlkYXRvciIsIlNob3J0aGFuZFN5bnRheE5vZGUiLCJ0cnlQYXJzZSIsInNob3J0aGFuZFZhbGlkYXRvciIsIlNob3J0aGFuZFN5bnRheFByb3BlcnR5IiwidmFsaWRhdG9ycyIsInJ2YWxzIiwibGVuIiwiU2hvcnRoYW5kU3ludGF4UHJvcGVydHlOIiwiU2hvcnRoYW5kU3ludGF4Q29tcG91bmQiLCJpbmRleDAiLCJTaG9ydGhhbmRWYWxpZGF0b3IiLCJzZXRPd25lciIsInN5bnRheE5vZGVGb3JQcm9wZXJ0eSIsInN5bnRheCIsInByb3BMaXN0IiwicmVjZWl2ZXIiLCJkZWZhdWx0VmFsdWVzIiwicHJvcGFnYXRlSW5oZXJpdCIsIlNpbXBsZVNob3J0aGFuZFZhbGlkYXRvciIsIkluc2V0c1Nob3J0aGFuZFZhbGlkYXRvciIsImNyZWF0ZVN5bnRheE5vZGUiLCJzaG9ydGhhbmRWYWxpZGF0b3JzIiwiU0lNUExFIiwiSU5TRVRTIiwiSU5TRVRTX1NMQVNIIiwic2xhc2hJbmRleCIsImluZGV4MSIsImFjYyIsIkZPTlQiLCJfU2ltcGxlU2hvcnRoYW5kVmFsaWQyIiwiZmFtaWx5TGlzdCIsImZhbWlseSIsInN5c3RlbUZvbnRzIiwiVmFsaWRhdG9yU2V0IiwiYWRkUmVwbGFjZW1lbnQiLCJjc3N2YWwiLCJuZXdHcm91cCIsInZhbHMiLCJzdWJncm91cCIsIkZPTExPVyIsImFkZENvdW50cyIsInByaW1pdGl2ZSIsIm5ld0Z1bmMiLCJpbml0QnVpbHRJblZhbGlkYXRvcnMiLCJuYW1lZFZhbGlkYXRvcnMiLCJIQVNIQ09MT1IiLCJQT1NfSU5UIiwiUE9TX05VTSIsIlBPU19QRVJDRU5UQUdFIiwiJSIsIk5FR0FUSVZFIiwiWkVSTyIsIlpFUk9fUEVSQ0VOVEFHRSIsIlBPU19MRU5HVEgiLCJ2aSIsInZtaW4iLCJ2bWF4IiwicHZpIiwicHZiIiwicHZtaW4iLCJwdm1heCIsIlBPU19BTkdMRSIsImRlZyIsImdyYWQiLCJyYWQiLCJ0dXJuIiwiUE9TX1RJTUUiLCJtcyIsIkZSRVFVRU5DWSIsIkh6Iiwia0h6IiwiUkVTT0xVVElPTiIsIlVSSSIsIlNUUklORyIsInN0ZGZvbnQiLCJpY29uIiwibWVudSIsImlzQnVpbHRJbiIsInJlYWROYW1lQW5kUHJlZml4ZXMiLCJzZWN0aW9uIiwicnVsZVByZWZpeGVzIiwicHJlZml4ZXMiLCJwYXJzZVZhbGlkYXRvcnMiLCJleHBlY3R2YWwiLCJzZXRvcCIsImN1cnJvcCIsImJ1aWx0SW4iLCJwYXJzZURlZmF1bHRzIiwicGFyc2VTaG9ydGhhbmRzIiwic2hvcnRoYW5kcyIsImluc2V0U2hvcnRoYW5kIiwiY29tcG91bmQiLCJtYWtlUHJvcFNldCIsInNob3J0aGFuZCIsInB2YWwiLCJvcmlnTmFtZSIsInJ2YWx1ZSIsImJhc2VWYWxpZGF0b3JTZXQiLCJ0cmFpdFByb3BzIiwiYm9ndXNGb250RGF0YSIsImJvZ3VzRm9udENvdW50ZXIiLCJwcmVwYXJlUHJvcGVydGllcyIsInByb3BlcnRpZXMiLCJGYWNlIiwiZm9udFRyYWl0S2V5IiwidHJhaXRzRXF1YWwiLCJtYWtlQXRSdWxlIiwiZm9udEJ5dGVzIiwiYmxvYlVSTCIsIndlYmtpdFVSTCIsImNyZWF0ZU9iamVjdFVSTCIsImJsb2JVUkxzIiwiYmxvYnMiLCJEb2N1bWVudEZhY2VzIiwiZGVvYmZ1c2NhdG9yIiwicmVnaXN0ZXJGYW1pbHkiLCJzcmNGYWNlIiwidmlld0ZhY2UiLCJzcmNGYW1pbHkiLCJ2aWV3RmFtaWx5RnJvbVNyYyIsImZhbWlseU1hcCIsInZpZXdGYW1pbHlGcm9tVmlldyIsImZpbHRlckZvbnRGYW1pbHkiLCJuZXdWYWx1ZXMiLCJyZiIsIk1hcHBlciIsIm9wdF9mYW1pbHlQcmVmaXgiLCJmYW1pbHlQcmVmaXgiLCJnZXRWaWV3Rm9udEZhbWlseSIsImRvY3VtZW50RmFjZXMiLCJ2aWV3RmFtaWx5IiwiZmFtaWx5Q291bnRlciIsImluaXRGb250Iiwidmlld0ZvbnRGYWNlIiwia2lsbFRpbWUiLCJib2d1c0RhdGEiLCJwcm9iZUNvbnQiLCJpbml0V2lkdGgiLCJpbml0SGVpZ2h0IiwibG9hZGVkIiwibG9hZEZvbnQiLCJzcmNVUkxNYXAiLCJ2aWV3RmFjZVBhcmFtIiwiQkxPQiIsImZpbmRPckxvYWRGb250cyIsInNyY0ZhY2VzIiwia2V5Q291bnQiLCJQYWdlQm94IiwiX3Njb3BlIiwicGFyZW50SW5zdGFuY2UiLCJwYXJhbSIsImNvcHlTcGVjaWZpZWQiLCJkZXN0U3BlY2lmaWVkIiwiY2xvbmVDaGlsZHJlbiIsIlJvb3RQYWdlQm94IiwiUGFnZU1hc3RlclNjb3BlIiwicGFnZU1hc3RlciIsImlzRnVuYyIsInNlbGYiLCJrZXlNYXAiLCJib3hJbnN0YW5jZSIsImxvb2t1cEluc3RhbmNlIiwicmVzb2x2ZUZ1bmMiLCJyZXNvbHZlTmFtZSIsIlBhZ2VNYXN0ZXIiLCJQYWdlTWFzdGVySW5zdGFuY2UiLCJyZXNldFNjb3BlIiwiUGFydGl0aW9uR3JvdXAiLCJQYXJ0aXRpb25Hcm91cEluc3RhbmNlIiwiUGFydGl0aW9uIiwiUGFydGl0aW9uSW5zdGFuY2UiLCJ0b0V4cHJBdXRvIiwidG9FeHByWmVybyIsInRvRXhwclplcm9BdXRvIiwidG9FeHByWmVyb0JvcmRlciIsInN0eWxlVmFsIiwidG9FeHByQm9vbCIsIlBhZ2VCb3hJbnN0YW5jZSIsInBhZ2VCb3giLCJjYWxjdWxhdGVkV2lkdGgiLCJjYWxjdWxhdGVkSGVpZ2h0IiwiYWRkTmFtZWRWYWx1ZXMiLCJuYW1lZFZhbHVlcyIsImFsdE5hbWUiLCJuYW1lZEZ1bmNzIiwiY29sdW1uR2FwIiwiaW5pdEVuYWJsZWQiLCJtaW5QYWdlV2lkdGgiLCJtaW5QYWdlSGVpZ2h0IiwiYm94U3BlY2lmaWNFbmFibGVkIiwiaW5pdEhvcml6b250YWwiLCJwYXJlbnRXaWR0aCIsImxlZnRCUCIsInJpZ2h0QlAiLCJleHRyYSIsImF1dG9XaWR0aCIsImlzQXV0b1dpZHRoIiwicmVtYWlucyIsImluaXRWZXJ0aWNhbCIsInBhcmVudEhlaWdodCIsInRvcEJQIiwiYm90dG9tQlAiLCJhdXRvSGVpZ2h0IiwiaXNBdXRvSGVpZ2h0IiwiaW5pdENvbHVtbnMiLCJkZXBlbmRzIiwicmVnaXN0ZXJJbnN0YW5jZSIsImdldEFjdGl2ZVJlZ2lvbnMiLCJnZXRQcm9wQXNOdW1iZXIiLCJwcm9wYWdhdGVQcm9wZXJ0eSIsImRvY0ZhY2VzIiwicHJvcGFnYXRlUHJvcGVydHlUb0VsZW1lbnQiLCJwcm9wYWdhdGVEZWxheWVkUHJvcGVydHkiLCJhc3NpZ25MZWZ0UG9zaXRpb24iLCJhc3NpZ25SaWdodFBvc2l0aW9uIiwieHBvcyIsInNuYXBPZmZzZXRYIiwiYXNzaWduVG9wUG9zaXRpb24iLCJ5cG9zIiwic25hcE9mZnNldFkiLCJhc3NpZ25Cb3R0b21Qb3NpdGlvbiIsImFzc2lnbkJlZm9yZVBvc2l0aW9uIiwiYXNzaWduQWZ0ZXJQb3NpdGlvbiIsImFzc2lnblN0YXJ0RW5kUG9zaXRpb24iLCJzaXplV2l0aE1heEhlaWdodCIsImlzVG9wRGVwZW5kZW50T25BdXRvSGVpZ2h0Iiwic2l6ZVdpdGhNYXhXaWR0aCIsImlzUmlnaHREZXBlbmRlbnRPbkF1dG9XaWR0aCIsInByZXBhcmVDb250YWluZXIiLCJwYXNzUHJlUHJvcGVydGllcyIsInRyYW5zZmVyQ29udGVudFByb3BzIiwicGFzc0NvbnRlbnRQcm9wZXJ0aWVzIiwidHJhbnNmZXJTaW5nbFVyaUNvbnRlbnRQcm9wcyIsInBhc3NTaW5nbGVVcmlDb250ZW50UHJvcGVydGllcyIsImZpbmlzaENvbnRhaW5lciIsInJlYWRIZWlnaHQiLCJyZWFkV2lkdGgiLCJiYm94IiwicnVsZVdpZHRoIiwicnVsZVN0eWxlIiwicnVsZUNvbG9yIiwiY29udGFpbmVyU2l6ZSIsImJvcmRlciIsInJ1bGUiLCJwYXNzUG9zdFByb3BlcnRpZXMiLCJkZWxheWVkUHJvcGVydGllcyIsImFwcGx5Q2FzY2FkZUFuZEluaXQiLCJkb2NFbGVtZW50U3R5bGUiLCJ1c2VyQWdlbnRQYWdlTWFzdGVyUHNldWRvIiwicmVzb2x2ZUF1dG9TaXppbmciLCJSb290UGFnZUJveEluc3RhbmNlIiwiX1BhZ2VCb3hJbnN0YW5jZSIsInBhZ2VNYXN0ZXJJbnN0YW5jZSIsImFkanVzdFBhZ2VMYXlvdXQiLCJwcm9jZXNzUGFydGl0aW9uTGlzdCIsImxpc3RWYWwiLCJjb25mbGljdGluZyIsInFuYW1lIiwidGVybSIsInJlcXVpcmVkIiwicG1FbmFibGVkVmFsIiwicG1FbmFibGVkIiwiX1BhZ2VCb3hJbnN0YW5jZTQiLCJQYWdlQm94UGFyc2VySGFuZGxlciIsIlBhcnRpdGlvblBhcnNlckhhbmRsZXIiLCJQYXJ0aXRpb25Hcm91cFBhcnNlckhhbmRsZXIiLCJwYXJ0aXRpb24iLCJwYXJ0aXRpb25Hcm91cCIsIlBhZ2VNYXN0ZXJQYXJzZXJIYW5kbGVyIiwicmVzb2x2ZVBhZ2VQcm9ncmVzc2lvbiIsIkNvbnN0YW50cyIsIkNvcm5lck1hcmtQb3NpdGlvbiIsIkNyb3NzTWFya1Bvc2l0aW9uIiwicGFnZVNpemVzIiwiYTUiLCJhNCIsImEzIiwiYjUiLCJiNCIsImppcy1iNSIsImppcy1iNCIsImxldHRlciIsImxlZ2FsIiwibGVkZ2VyIiwiZGVmYXVsdFByaW50ZXJNYXJrTGluZVdpZHRoIiwiZGVmYXVsdFByaW50ZXJNYXJrT2Zmc2V0IiwiZGVmYXVsdFByaW50ZXJNYXJrTGluZUxlbmd0aCIsImRlZmF1bHRCbGVlZE9mZnNldCIsInJlc29sdmVQYWdlU2l6ZUFuZEJsZWVkIiwicGFnZVNpemVBbmRCbGVlZCIsImJsZWVkIiwiYmxlZWRPZmZzZXQiLCJ2YWwxIiwibWFya3MiLCJldmFsdWF0ZVBhZ2VTaXplQW5kQmxlZWQiLCJldmFsdWF0ZWQiLCJjcm9wT2Zmc2V0IiwiY3JlYXRlUHJpbnRlck1hcmtTdmciLCJjcmVhdGVQcmludGVyTWFya0VsZW1lbnQiLCJsaW5lV2lkdGgiLCJlbGVtZW50VHlwZSIsIk1hcmdpbkJveFBvc2l0aW9uQWxvbmdWYXJpYWJsZURpbWVuc2lvbiIsInByb3BlcnRpZXNBcHBsaWVkVG9QYXJ0aXRpb24iLCJvdXRsaW5lIiwib3V0bGluZS13aWR0aCIsIm91dGxpbmUtc3R5bGUiLCJvdXRsaW5lLWNvbG9yIiwicGFnZU1hcmdpbkJveGVzIiwidG9wLWxlZnQtY29ybmVyIiwiaXNJblRvcFJvdyIsImlzSW5Cb3R0b21Sb3ciLCJpc0luTGVmdENvbHVtbiIsImlzSW5SaWdodENvbHVtbiIsInBvc2l0aW9uQWxvbmdWYXJpYWJsZURpbWVuc2lvbiIsInRvcC1sZWZ0IiwiU1RBUlQiLCJ0b3AtY2VudGVyIiwiQ0VOVEVSIiwidG9wLXJpZ2h0IiwidG9wLXJpZ2h0LWNvcm5lciIsInJpZ2h0LXRvcCIsInJpZ2h0LW1pZGRsZSIsInJpZ2h0LWJvdHRvbSIsImJvdHRvbS1yaWdodC1jb3JuZXIiLCJib3R0b20tcmlnaHQiLCJib3R0b20tY2VudGVyIiwiYm90dG9tLWxlZnQiLCJib3R0b20tbGVmdC1jb3JuZXIiLCJsZWZ0LWJvdHRvbSIsImxlZnQtbWlkZGxlIiwibGVmdC10b3AiLCJwYWdlTWFyZ2luQm94TmFtZXMiLCJQYWdlUnVsZU1hc3RlciIsInBhZ2VTaXplIiwiUGFnZVJ1bGVQYXJ0aXRpb24iLCJib2R5UGFydGl0aW9uS2V5IiwiY3JlYXRlUGFnZU1hcmdpbkJveGVzIiwiYXBwbHlTcGVjaWZpZWQiLCJtYXJnaW5Cb3hlc01hcCIsIl9tYXJnaW5Cb3hlcyIsIlBhZ2VNYXJnaW5Cb3hQYXJ0aXRpb24iLCJQYWdlUnVsZU1hc3Rlckluc3RhbmNlIiwiUGFnZVJ1bGVQYXJ0aXRpb25JbnN0YW5jZSIsIm1hcmdpbkJveE5hbWUiLCJvd25TdHlsZSIsIm93blZhbCIsIlBhZ2VNYXJnaW5Cb3hQYXJ0aXRpb25JbnN0YW5jZSIsInBhZ2VSdWxlTWFzdGVyIiwiX1BhZ2VNYXN0ZXIkUGFnZU1hc3RlMiIsInNldFBhZ2VBcmVhRGltZW5zaW9uIiwicGFnZUFyZWFEaW1lbnNpb24iLCJib3JkZXJCb3hXaWR0aCIsImJvcmRlckJveEhlaWdodCIsIm1hcmdpbkJveENvbnRhaW5lcnMiLCJtYXJnaW5Cb3hlcyIsImhvcml6b250YWxEaW1lbnNpb25zIiwidmVydGljYWxEaW1lbnNpb25zIiwic2l6ZU1hcmdpbkJveGVzQWxvbmdWYXJpYWJsZURpbWVuc2lvbiIsImlzSG9yaXpvbnRhbCIsImNvbnRhaW5lcnMiLCJib3hJbnN0YW5jZXMiLCJib3hQYXJhbXMiLCJib3hJbmZvIiwicGFnZU1hcmdpbkJveEluc3RhbmNlcyIsImJveFBhcmFtIiwiU2luZ2xlQm94TWFyZ2luQm94U2l6aW5nUGFyYW0iLCJldmFsdWF0ZWREaW0iLCJnZXRTaXplc09mTWFyZ2luQm94ZXNBbG9uZ1ZhcmlhYmxlRGltZW5zaW9uIiwibmVlZFJlY2FsY3VsYXRlIiwibWF4T3V0ZXJTaXplcyIsImV2YWx1YXRlZE1heFNpemUiLCJGaXhlZFNpemVNYXJnaW5Cb3hTaXppbmdQYXJhbSIsImdldE91dGVyU2l6ZSIsIm1pbk91dGVyU2l6ZXMiLCJtaW5TaXplIiwiZXZhbHVhdGVkTWluU2l6ZSIsInN0YXJ0RW5kU3VtIiwib3V0ZXJTaXplIiwiYXZhaWxhYmxlU2l6ZSIsInN0YXJ0Qm94UGFyYW0iLCJjZW50ZXJCb3hQYXJhbSIsImVuZEJveFBhcmFtIiwic3RhcnRFbmRCb3hQYXJhbSIsIk11bHRpcGxlQm94ZXNNYXJnaW5Cb3hTaXppbmdQYXJhbSIsImNlbnRlclNpemVzIiwiZGlzdHJpYnV0ZUF1dG9NYXJnaW5Cb3hTaXplcyIsInhTaXplIiwic3RhcnRFbmRBdXRvU2l6ZSIsImhhc0F1dG9TaXplIiwic3RhcnRFbmRTaXplcyIsInlTaXplIiwieE91dGVyTWF4Q29udGVudFNpemUiLCJnZXRPdXRlck1heENvbnRlbnRTaXplIiwieU91dGVyTWF4Q29udGVudFNpemUiLCJtYXhDb250ZW50U2l6ZVN1bSIsInhPdXRlck1pbkNvbnRlbnRTaXplIiwiZ2V0T3V0ZXJNaW5Db250ZW50U2l6ZSIsIm1pbkNvbnRlbnRTaXplU3VtIiwiaGFzQXV0b1NpemVfIiwiZml4ZWRTaXplIiwicGFnZVJ1bGVQYXJ0aXRpb24iLCJfUGFnZU1hc3RlciRQYXJ0aXRpb24zIiwicmVzb2x2ZVBhZ2VCb3hEaW1lbnNpb25zIiwiYm9yZGVyQm94RXh0ZW50IiwibWFyZ2luU3RhcnQiLCJtYXJnaW5FbmQiLCJlbmRTaWRlIiwiZXh0ZW50TmFtZSIsInBhZ2VFeHRlbnQiLCJwYWRkaW5nU3RhcnQiLCJwYWRkaW5nRW5kIiwiYm9yZGVyU3RhcnRXaWR0aCIsImJvcmRlckVuZFdpZHRoIiwicGFnZU1hcmdpbkJveFBhcnRpdGlvbiIsImFwcGx5VmVydGljYWxBbGlnbiIsIl9QYWdlTWFzdGVyJFBhcnRpdGlvbjQiLCJmbGV4QWxpZ24iLCJhdmFpbGFibGVFeHRlbnQiLCJvdXRlckV4dGVudCIsInBvc2l0aW9uQW5kU2l6ZUFsb25nRml4ZWREaW1lbnNpb24iLCJpbnNpZGVOYW1lIiwib3V0c2lkZU5hbWUiLCJvdXRzaWRlIiwicGFnZU1hcmdpbiIsIm1hcmdpbkluc2lkZSIsIm1hcmdpbk91dHNpZGUiLCJwYWRkaW5nSW5zaWRlIiwicGFkZGluZ091dHNpZGUiLCJib3JkZXJJbnNpZGVXaWR0aCIsImJvcmRlck91dHNpZGVXaWR0aCIsImdldENvbXB1dGVkVmFsdWVzIiwicGFnZU1hcmdpblZhbHVlIiwiYm9yZGVyQW5kUGFkZGluZyIsIlBhZ2VNYW5hZ2VyIiwicm9vdFBhZ2VCb3hJbnN0YW5jZSIsImRlZmluZVBhZ2VQcm9ncmVzc2lvbiIsInN0eWxlSW5zdGFuY2UiLCJpc1ZlcnNvRmlyc3RQYWdlIiwiaXNWZXJzb1BhZ2UiLCJwYWdlUHJvZ3Jlc3Npb24iLCJnZXRDYXNjYWRlZFBhZ2VTdHlsZSIsImdldFBhZ2VSdWxlUGFnZU1hc3RlciIsIm1ha2VDYWNoZUtleSIsInBhZ2VNYXN0ZXJDYWNoZSIsImdlbmVyYXRlUGFnZVJ1bGVNYXN0ZXIiLCJnZW5lcmF0ZUNhc2NhZGVkUGFnZU1hc3RlciIsInByb3BzU3RyIiwibWFrZUNhc2NhZGVWYWx1ZU9iamVjdEtleSIsIm5ld1BhZ2VNYXN0ZXIiLCJwYWdlTWFzdGVyU3R5bGUiLCJDaGVja1BhZ2VUeXBlQWN0aW9uIiwiSXNGaXJzdFBhZ2VBY3Rpb24iLCJJc0xlZnRQYWdlQWN0aW9uIiwiSXNSaWdodFBhZ2VBY3Rpb24iLCJJc1JlY3RvUGFnZUFjdGlvbiIsIklzVmVyc29QYWdlQWN0aW9uIiwiSXNOdGhQYWdlQWN0aW9uIiwibGF5b3V0UG9zaXRpb25BdFBhZ2VTdGFydCIsImJsYW5rUGFnZUF0U3RhcnQiLCJBcHBseVBhZ2VSdWxlQWN0aW9uIiwidGFyZ2V0TWFwIiwiYm94TmFtZSIsInRhcmdldEJveCIsIlBhZ2VQYXJzZXJIYW5kbGVyIiwicGFnZVByb3BzIiwiY3VycmVudE5hbWVkUGFnZVNlbGVjdG9yIiwiY3VycmVudFBzZXVkb1BhZ2VDbGFzc1NlbGVjdG9ycyIsImZpbmlzaFNlbGVjdG9yIiwic2VsZWN0b3JzIiwiY3VycmVudFBhZ2VTZWxlY3RvcnMiLCJfQ3NzQ2FzY2FkZSRDYXNjYWRlUGEiLCJzZWxlY3RvciIsIm5vUGFnZVNlbGVjdG9yUHJvcHMiLCJwcmV2Q2FzY1ZhbCIsIm1hcmdpbkJveE1hcCIsImJveFN0eWxlIiwiUGFnZU1hcmdpbkJveFBhcnNlckhhbmRsZXIiLCJ0cmFuc2Zvcm1VUklzIiwiYXR0cmlidXRlVmFsdWUiLCJtMSIsIm5hbWVzcGFjZVByZWZpeE1hcCIsImZyb250RWRnZUJsYWNrTGlzdEhvciIsIm1hcmdpbi10b3AiLCJwYWRkaW5nLXRvcCIsImJvcmRlci10b3Atd2lkdGgiLCJib3JkZXItdG9wLXN0eWxlIiwiYm9yZGVyLXRvcC1jb2xvciIsImJvcmRlci10b3AtbGVmdC1yYWRpdXMiLCJib3JkZXItdG9wLXJpZ2h0LXJhZGl1cyIsImZyb250RWRnZUJsYWNrTGlzdFZlcnQiLCJtYXJnaW4tcmlnaHQiLCJwYWRkaW5nLXJpZ2h0IiwiYm9yZGVyLXJpZ2h0LXdpZHRoIiwiYm9yZGVyLXJpZ2h0LXN0eWxlIiwiYm9yZGVyLXJpZ2h0LWNvbG9yIiwiYm9yZGVyLWJvdHRvbS1yaWdodC1yYWRpdXMiLCJmcm9udEVkZ2VVbmZvcmNlZEJyZWFrQmxhY2tMaXN0SG9yIiwiZnJvbnRFZGdlVW5mb3JjZWRCcmVha0JsYWNrTGlzdFZlcnQiLCJWaWV3RmFjdG9yeSIsImZvb3Rub3RlU3R5bGUiLCJzdHlsZXJQcm9kdWNlciIsImN1c3RvbVJlbmRlcmVyIiwiZmFsbGJhY2tNYXAiLCJjcmVhdGVQc2V1ZG9lbGVtZW50U2hhZG93IiwiY2FzY1N0eWxlIiwiZ2V0UHNldWRvTWFwIiwiYWRkZWROYW1lcyIsImF0dCIsInNoYWRvd1N0eWxlciIsImNvbXB1dGVkUHNldWRvU3R5bGVNYXAiLCJjb21wdXRlZFBzZXVkb1N0eWxlIiwiY3JlYXRlUmVmU2hhZG93IiwicmVmRG9jUGFyYW0iLCJyZWZEb2MiLCJyZWZFbGVtZW50IiwiZ2V0RWxlbWVudCIsInJlZlN0eWxlciIsImdldFN0eWxlckZvckRvYyIsImNyZWF0ZVNoYWRvd3MiLCJ0ZW1wbGF0ZVVSTFZhbCIsInNoYWRvdyIsImNvbnQyIiwiY29tcHV0ZVN0eWxlIiwiZGlzcGxheVZhbHVlcyIsImluaGVyaXRGcm9tU291cmNlUGFyZW50Iiwic2hhZG93Um9vdCIsIm5vZGVTdHlsZSIsImluaGVyaXRhbmNlVmlzaXRvciIsInNuYW1lIiwiaW5oZXJpdExhbmdBdHRyaWJ1dGUiLCJ0cmFuc2ZlclBvbHlmaWxsZWRJbmhlcml0ZWRQcm9wcyIsIlBPTFlGSUxMRURfSU5IRVJJVEVEX1BST1BTIiwibnVtZXJpY1ZhbCIsInJlc29sdmVGb3JtYXR0aW5nQ29udGV4dCIsImNyZWF0ZUVsZW1lbnRWaWV3IiwibmVlZFRvUHJvY2Vzc0NoaWxkcmVuIiwiaW5oZXJpdGVkVmFsdWVzIiwic2hhZG93UGFyYW0iLCJwYXJlbnRXcml0aW5nTW9kZSIsImlzRmxvd1Jvb3QiLCJmbG9hdGluZyIsImxpc3RJdGVtIiwiYm9yZGVyQ29sbGFwc2UiLCJib3JkZXJTcGFjaW5nIiwicHJvY2Vzc0FmdGVySWZjb250aW51ZXMiLCJ3aGl0ZXNwYWNlVmFsdWUiLCJwcm9jZXNzUmVwZWF0T25CcmVhayIsImZpbmRBbmRQcm9jZXNzUmVwZWF0aW5nRWxlbWVudHMiLCJjdXN0b20iLCJOQ1giLCJuYXZQYXJlbnQiLCJocCIsImJlaGF2aW9yIiwiZGF0YXNldCIsImlmcmFtZSIsImNvbnRlbnRXaW5kb3ciLCJlcHViUmVhZGluZ1N5c3RlbSIsImxheW91dFN0eWxlIiwiaGFzRmVhdHVyZSIsImltYWdlUmVzb2x1dGlvbiIsImltYWdlcyIsImNzc1dpZHRoIiwiY3NzSGVpZ2h0IiwiYXR0cldpZHRoIiwiYXR0ckhlaWdodCIsImhhc0F1dG9XaWR0aCIsImhhc0F1dG9IZWlnaHQiLCJhdHRyaWJ1dGVDb3VudCIsImRlbGF5ZWRTcmMiLCJhdHRyaWJ1dGUiLCJhdHRyaWJ1dGVOUyIsImltYWdlIiwiSW1hZ2UiLCJpc1NWR1VybEF0dHJpYnV0ZSIsIlVybHMiLCJhdHRyaWJ1dGVQcmVmaXgiLCJpbWFnZUZldGNoZXIiLCJsaXN0U3R5bGVJbWFnZSIsImxpc3RTdHlsZVVSTCIsInByZXByb2Nlc3NFbGVtZW50U3R5bGUiLCJhcHBseUNvbXB1dGVkU3R5bGVzIiwiYmxhY2tMaXN0IiwiaXNBdEZvcmNlZEJyZWFrIiwibW9kaWZ5RWxlbURpbWVuc2lvbldpdGhJbWFnZVJlc29sdXRpb24iLCJTVkdfVVJMX0FUVFJJQlVURVMiLCJzY2FsZWRXaWR0aCIsInNjYWxlZEhlaWdodCIsIm51bWVyaWNNYXhIZWlnaHQiLCJudW1lcmljTWluV2lkdGgiLCJudW1lcmljTWluSGVpZ2h0IiwiUFJFUFJPQ0VTU19FTEVNRU5UX1NUWUxFIiwiY3JlYXRlVGV4dE5vZGVWaWV3IiwicHJlcHJvY2Vzc1RleHRDb250ZW50IiwiRGlmZiIsIm9yaWdpbmwiLCJQUkVQUk9DRVNTX1RFWFRfQ09OVEVOVCIsInByb2Nlc3NlZFRleHQiLCJjcmVhdGVOb2RlVmlldyIsInByb2Nlc3NDaGlsZHJlbiIsInByb2Nlc3NTaGFkb3dDb250ZW50IiwiY29udGVudE5vZGUiLCJjb250ZW50U2hhZG93VHlwZSIsImNvbnRlbnRTaGFkb3ciLCJuZXh0UG9zaXRpb25JblRyZWUiLCJzaGFkb3dOb2RlIiwic3IiLCJpc1RyYW5zY2x1c2lvbiIsInRyYW5zY2x1c2lvblR5cGUiLCJwcm9jIiwiYWRkSW1hZ2VGZXRjaGVycyIsImJnIiwiaXNSZWxhdGl2ZVBvc2l0aW9uZWQiLCJwcm9wZXJ0aWVzTm90UGFzc2VkVG9ET00iLCJwbiIsImNoaWxkQ29tcHV0ZWRTdHlsZSIsImJveERlY29yYXRpb25CcmVhayIsInN0ZXAxIiwic3RlcDIiLCJlbGVtMiIsIm5vZGVQb3NpdGlvbjEiLCJub2RlUG9zaXRpb24yIiwiRE9NUGFyc2VyU3VwcG9ydGVkVHlwZSIsImJveC1kZWNvcmF0aW9uLWJyZWFrIiwiZmxvYXQtbWluLXdyYXAtYmxvY2siLCJmbG9hdC1yZWZlcmVuY2UiLCJmbG93LWludG8iLCJmbG93LW9wdGlvbnMiLCJmb290bm90ZS1wb2xpY3kiLCJEZWZhdWx0Q2xpZW50TGF5b3V0IiwibGF5b3V0Qm94Iiwic3VidHJhY3RPZmZzZXRzIiwib3JpZ2luUmVjdCIsInZpZXdwb3J0TGVmdCIsInZpZXdwb3J0VG9wIiwicmVjdHMiLCJnZXRDbGllbnRSZWN0cyIsImxheW91dEJveFJlY3QiLCJnZXRDb21wdXRlZFN0eWxlIiwiVmlld3BvcnQiLCJvcHRfcm9vdCIsIm9wdF93aWR0aCIsIm9wdF9oZWlnaHQiLCJvdXRlclpvb21Cb3giLCJjb250ZW50Q29udGFpbmVyIiwiaW5uZXJXaWR0aCIsImlubmVySGVpZ2h0IiwicmVzZXRab29tIiwiWE1MRG9jSG9sZGVyIiwiTm9kZUxpc3QiLCJvZmZzZXRTdHIiLCJzcmNOb2RlIiwiZ2V0VG90YWxPZmZzZXQiLCJ0b3RhbE9mZnNldCIsImJ1aWxkSWRNYXAiLCJpZE1hcCIsInhtbGlkIiwiZ2V0RWxlbWVudHNCeU5hbWUiLCJwYXJzZUFuZFJldHVybk51bGxJZkVycm9yIiwib3B0X3BhcnNlciIsImRvY0VsZW1lbnQiLCJwYXJzZVhNTFJlc291cmNlIiwic3VwcG9ydGVkS2V5cyIsIkFQUExJQ0FUSU9OX1hNTCIsIlRFWFRfSFRNTCIsIkFQUExJQ0FUSU9OX1hIVE1MX1hNTCIsIklNQUdFX1NWR19YTUwiLCJwcmVkaWNhdGUiLCJjaGVjayIsIndpdGhBdHRyaWJ1dGUiLCJQcmVkaWNhdGUiLCJ3aXRoQ2hpbGQiLCJvcHRfY2hpbGRQcmVkaWNhdGUiLCJhc0FycmF5IiwicHIiLCJmb3JFYWNoTm9kZSIsImZvckVhY2hOb25OdWxsIiwidWFTdHlsZXNoZWV0QmFzZUZldGNoZXIiLCJDc3NWYWxpZGF0b3IiLCJTdHlsZSIsInJvb3RCb3giLCJmb250RmFjZXMiLCJmb290bm90ZVByb3BzIiwiZmxvd1Byb3BzIiwidmlld3BvcnRQcm9wcyIsImZvbnREZW9iZnVzY2F0b3IiLCJjdXJyZW50TGF5b3V0UG9zaXRpb24iLCJtYXRjaFBhZ2VTaWRlIiwibG9va3VwT2Zmc2V0IiwiZmxvd0NodW5rSXNBZnRlclBhcmVudEZsb3dGb3JjZWRCcmVhayIsInBhZ2VOdW1iZXJPZmZzZXQiLCJzaXplVmlld3BvcnQiLCJ0ZXh0Wm9vbSIsInNjYWxlRmFjdG9yIiwiZGVmYXVsdEZvbnRTaXplIiwid2lkdGhWYWwiLCJoZWlnaHRWYWwiLCJTdHlsZUluc3RhbmNlIiwiZGVmYXVsdExhbmciLCJmb250TWFwcGVyIiwiZmFjZXMiLCJGb250Iiwicm9vdFBhZ2VGbG9hdExheW91dENvbnRleHQiLCJDc3NTdHlsZXIiLCJzdHlsZXJNYXAiLCJDc3NQYWdlIiwibWF0Y2hTdGFydFBhZ2VTaWRlIiwicGFnZU1hbmFnZXIiLCJmb250RmFjZSIsInBhZ2VTaGVldFNpemUiLCJpc1JlY3RvU3RhcnQiLCJpc0xUUiIsImdldFN0eWxlRm9yRG9jIiwicGFnZUJveEluc3RhbmNlcyIsImdldENvbnN1bWVkT2Zmc2V0IiwiY2h1bmtPZmZzZXQiLCJnZXRQb3NpdGlvbiIsImxheW91dFBvc2l0aW9uIiwibm9Mb29rQWhlYWQiLCJjdXJyZW50UG9zaXRpb24iLCJjb25zdW1lZE9mZnNldCIsImR1bXBMb2NhdGlvbiIsInVwZGF0ZVN0YXJ0U2lkZSIsImZsb3dDaHVua0JyZWFrQmVmb3JlIiwiZmxvd0JyZWFrQWZ0ZXIiLCJzZWxlY3RQYWdlTWFzdGVyIiwicGFnZU1hc3RlcnMiLCJjb2VmZiIsInBhZ2VBcmVhIiwiaW5pdExpbmdlcmluZyIsImJyZWFrT2Zmc2V0QmVmb3JlU3RhcnRJbmRleCIsImJyZWFrT2Zmc2V0QmVmb3JlU3RhcnQiLCJwYXJlbnRGbG93UG9zaXRpb24iLCJwYXJlbnRTdGFydE9mZnNldCIsInNldEZvcm1hdHRpbmdDb250ZXh0VG9Db2x1bW4iLCJsYXlvdXREZWZlcnJlZFBhZ2VGbG9hdHMiLCJkZWZlcnJlZEZsb2F0Tm9kZSIsImRlZmVycmVkRmxvYXRPZmZzZXQiLCJwYWdlU3RhcnRQb3MiLCJwYXJlbnRJbnZhbGlkYXRlZCIsImdldExhc3RBZnRlclBvc2l0aW9uSWZEZWZlcnJlZEZsb2F0c0V4aXN0cyIsImxheW91dENvbHVtbiIsInJlcGVhdGVkSW5kaWNlcyIsInJlbW92ZWRJbmRpY2VzIiwiYWx0IiwiY291bnRlckNvbnN0cmFpbnQiLCJjcmVhdGVBbmRMYXlvdXRDb2x1bW4iLCJmb3JjZU5vbkZpdHRpbmciLCJkb250QXBwbHlFeGNsdXNpb25zIiwiYm94Q29udGFpbmVyIiwiY29sdW1uUGFnZUZsb2F0TGF5b3V0Q29udGV4dCIsInBvc2l0aW9uQXRDb2x1bW5TdGFydCIsImNvbHVtbkNvbnRhaW5lciIsImNvbHVtblkiLCJjb2x1bW5YIiwic2V0UGFnZVBhZ2VGbG9hdExheW91dENvbnRleHRDb250YWluZXIiLCJwYWdlUGFnZUZsb2F0TGF5b3V0Q29udGV4dCIsImdldFJlZ2lvblBhZ2VGbG9hdExheW91dENvbnRleHQiLCJsYXlvdXRGbG93Q29sdW1uc1dpdGhCYWxhbmNpbmciLCJwb3NpdGlvbkF0Q29udGFpbmVyU3RhcnQiLCJsYXlvdXRDb2x1bW5zIiwibGF5b3V0Rmxvd0NvbHVtbnMiLCJnZW5lcmF0b3JSZXN1bHQiLCJjb2x1bW5GaWxsIiwiY29sdW1uQmFsYW5jZXIiLCJsYXN0Q29sdW1uIiwiVmdlbiIsInBhZ2VCcmVha3MiLCJkb250RXhjbHVkZSIsImZvcndhcmRPcmRlckluTGF5b3V0IiwicmVtb3ZlZCIsImlubmVyQ29udGFpbmVyVGFnIiwiaW5uZXJDb250YWluZXIiLCJzdXBwcmVzc0VtcHR5Qm94R2VuZXJhdGlvbiIsIm91dGVyU2hhcGUiLCJwcm9jZXNzTGluZ2VyIiwic3RhcnRQYWdlIiwibm9Nb3JlUHJpbWFyeUZsb3dzIiwibGF5b3V0TmV4dFBhZ2UiLCJibGVlZEJveFBhZGRpbmdFZGdlIiwiZXZhbHVhdGVkUGFnZVNpemVBbmRCbGVlZCIsInNldFBhZ2VTaXplQW5kQmxlZWQiLCJwcmludGVyTWFya09mZnNldCIsImJnY29sb3IiLCJjcm9wTWFya0xpbmVMZW5ndGgiLCJibGVlZE1hcmtMaW5lTGVuZ3RoIiwibWF4TGluZUxlbmd0aCIsInN2Z1dpZHRoIiwicG9pbnRzMSIsInBvaW50czIiLCJUT1BfUklHSFQiLCJCT1RUT01fUklHSFQiLCJCT1RUT01fTEVGVCIsImxpbmUxIiwibGluZTIiLCJsb25nTGluZUxlbmd0aCIsIkJPVFRPTSIsImhvcml6b250YWxMaW5lIiwidmVydGljYWxMaW5lIiwib3Bwb3NpdGUiLCJMRUZUIiwiUklHSFQiLCJpc0xlZnRQYWdlIiwiZ2V0VHJpZ2dlcnNGb3JEb2MiLCJwYWdlU2hlZXRXaWR0aCIsInBhZ2VTaGVldEhlaWdodCIsIkJhc2VQYXJzZXJIYW5kbGVyIiwibWFzdGVySGFuZGxlciIsImluc2lkZVJlZ2lvbiIsInBhZ2VIYW5kbGVyIiwicmVnaW9uQ291bnQiLCJyZWdpb25IYW5kbGVyIiwicHJvY2Vzc1ZpZXdwb3J0TWV0YSIsIm1ldGEiLCJTdHlsZVBhcnNlckhhbmRsZXIiLCJjYXNjYWRlUGFyc2VySGFuZGxlciIsInBhcnNlT1BTUmVzb3VyY2UiLCJPUFNEb2NTdG9yZSIsImF1dGhvclN0eWxlU2hlZXRzIiwidXNlclN0eWxlU2hlZXRzIiwic2V0U3R5bGVTaGVldHMiLCJ1c2VyQWdlbnRYTUwiLCJ0cmlnZ2VyU2luZ2xlRG9jdW1lbnRQcmVwcm9jZXNzaW5nIiwic3R5bGVCeURvY1VSTCIsInRyaWdnZXJzQnlEb2NVUkwiLCJjbGVhclN0eWxlU2hlZXRzIiwiYWRkQXV0aG9yU3R5bGVTaGVldCIsImFkZFVzZXJTdHlsZVNoZWV0Iiwic3R5bGVTaGVldHMiLCJzdHlsZXNoZWV0IiwiWG1sRG9jIiwiUFJFUFJPQ0VTU19TSU5HTEVfRE9DVU1FTlQiLCJ0cmlnZ2VyTGlzdCIsImdldEVsZW1lbnRzQnlUYWdOYW1lTlMiLCJ0cmlnZ2VyRWxlbSIsIkVWIiwic291cmNlcyIsInVzZXJBZ2VudFVSTCIsInRpdGxlIiwicmVsIiwic3R5bGVCeUtleSIsInN0eWxlRmV0Y2hlckJ5S2V5Iiwic3BoIiwic291cmNlIiwiZW5jb2RlMzIiLCJkZWNvZGUzMiIsImJ5dGVzIiwiYnl0ZXNUb1NIQTFJbnQzMiIsImFwcGVuZENvdW50IiwiYmkiLCJUT0NWaWV3IiwicmVuZGVyZXJGYWN0b3J5Iiwic2V0QXV0b0hlaWdodCIsIm1ha2VDdXN0b21SZW5kZXJlciIsInJlbmRlcmVyIiwic3JjRWxlbSIsInZpZXdQYXJlbnQiLCJyZXBsYWNlQ2hpbGQiLCJhZGFwdFBhcmVudENsYXNzIiwiYnV0dG9uIiwidG9nZ2xlTm9kZUV4cGFuc2lvbiIsInRhYkluZGV4IiwiYW5jaG9yRWxlbSIsInNob3dUT0MiLCJub25Ub2NCb3hEb2MiLCJ2aWV3cG9ydFNpemUiLCJPUFMiLCJib2R5Q2hpbGRFbGVtIiwiaGlkZVRPQyIsImlzVE9DVmlzaWJsZSIsImdldFRPQyIsImV4cG9ydFRyZWUiLCJsaW5rcyIsImV4cG9ydExpbmsiLCJoYXNoIiwiaW5uZXJUZXh0IiwidG9jTm9kZUVsZW0iLCJjZSIsImFkYXB0Q2xhc3MiLCJlbGVtMSIsIkVQVUJEb2NTdG9yZSIsIm1ha2VEZW9iZnVzY2F0b3JGYWN0b3J5IiwicGxhaW5YTUxTdG9yZSIsImpzb25TdG9yZSIsImRlb2JmdXNjYXRvcnMiLCJsb2FkQXNQbGFpblhNTCIsInN0YXJ0TG9hZGluZ0FzUGxhaW5YTUwiLCJsb2FkQXNKU09OIiwic3RhcnRMb2FkaW5nQXNKU09OIiwibG9hZFB1YkRvYyIsImhhdmVaaXBNZXRhZGF0YSIsImxvYWRFUFVCRG9jIiwib3BmIiwibG9hZE9QRiIsIm1hbmlmZXN0T2JqIiwicmVwb3J0TG9hZEVycm9yIiwiT1BGRG9jIiwiaW5pdFdpdGhXZWJQdWJNYW5pZmVzdCIsImxvYWRXZWJQdWIiLCJjb250YWluZXJYTUwiLCJwdWJVUkwiLCJvcGZCeVVSTCIsIm9wZlhNTCIsImVuY1hNTCIsInppcE1ldGFkYXRhIiwiaW5pdFdpdGhYTUxEb2MiLCJwcmltYXJ5T1BGQnlFUHViVVJMIiwibWFuaWZlc3RMaW5rIiwibWFuaWZlc3RVcmwiLCJ4aHRtbFRvYyIsImFkZERvY3VtZW50IiwiZG9jVVJMIiwiZG9jdW1lbnRzIiwiZG9tYWluIiwicmVtb3ZlUGF0aCIsInN0YXJ0c1dpdGgiLCJPUEZJdGVtIiwiaXRlbVByb3BlcnRpZXMiLCJpbml0V2l0aEVsZW1lbnQiLCJpdGVtRWxlbSIsIm9wZlVSTCIsIm1lZGlhVHlwZSIsInByb3BTdHIiLCJpbml0V2l0aFBhcmFtIiwic2tpcFBhZ2VzQmVmb3JlIiwiZ2V0T1BGSXRlbUlkIiwicHJlZGVmaW5lZFByZWZpeGVzIiwiZGN0ZXJtcyIsIm1hcmMiLCJyZW5kaXRpb24iLCJvbml4IiwieHNkIiwiZGVmYXVsdElSSSIsIm1ldGFUZXJtcyIsImxhbmd1YWdlIiwiY3JlYXRvciIsInRpdGxlVHlwZSIsImRpc3BsYXlTZXEiLCJhbHRlcm5hdGVTY3JpcHQiLCJyb2xlIiwiZ2V0TWV0YWRhdGFDb21wYXJhdG9yIiwiaXRlbTEiLCJpdGVtMiIsImkxIiwiX3IxJG1ldGFUZXJtcyRkaXNwbGF5IiwiaTIiLCJfcjIkbWV0YVRlcm1zJGRpc3BsYXkiLCJnZXRNYXRoSmF4SHViIiwibWF0aCIsIk1hdGhKYXgiLCJIdWIiLCJQYWdlVmlld01vZGUiLCJzdXBwb3J0ZWRNZWRpYVR5cGVzIiwiYXBwbGljYXRpb24veGh0bWwreG1sIiwiaW1hZ2UvanBlZyIsImltYWdlL3BuZyIsImltYWdlL3N2Zyt4bWwiLCJpbWFnZS9naWYiLCJhdWRpby9tcDMiLCJjcmVhdGVEb2N1bWVudFVSTFRyYW5zZm9ybWVyIiwiTUFUSE1MIiwicGF0aCIsIml0ZW1zIiwicmVzdG9yZVVSTCIsImVuY29kZWQiLCJnZXRNZXRhZGF0YSIsIm1ldGFkYXRhIiwiZ2V0UGF0aEZyb21VUkwiLCJlcHViQmFzZVVSTCIsImRlY29kZVVSSSIsIm1hbmlmZXN0VVJMIiwicGtnIiwidWlkcmVmIiwidWlkRWxlbSIsInVpZCIsInNyY1RvRmFsbGJhY2tJZCIsImZhbGxiYWNrIiwibmF2IiwiY292ZXIiLCJpdGVtTWFwIiwiaXRlbU1hcEJ5UGF0aCIsImZhbGxiYWNrU3JjIiwic3BpbmUiLCJpdGVtUmVmRWxlbWVudCIsInRvY0F0dHIiLCJuY3hUb2MiLCJwYWdlUHJvZ3Jlc3Npb25BdHRyIiwiaWRwZk9iZlVSTHMiLCJtZWRpYVR5cGVFbGVtcyIsImhhbmRsZXJJZCIsImJpbmRpbmdzIiwibXJvb3QiLCJwcmVmaXhNYXAiLCJyZXNvbHZlUHJvcGVydHkiLCJpcmkiLCJyYXdJdGVtcyIsInJlZmluZXMiLCJzY2hlbWUiLCJEQyIsInJhd0l0ZW1zQnlUYXJnZXQiLCJyYXdJdGVtIiwibWFrZU1ldGFkYXRhIiwiZW50cnlNYXAiLCJzb3J0TWV0YWRhdGEiLCJwcmVQYWdpbmF0ZWQiLCJzaGExU3VtIiwiYmxvYiIsIndlYmtpdFNsaWNlIiwiZmlsZVJlYWRlciIsIkZpbGVSZWFkZXIiLCJyZWFkQXNBcnJheUJ1ZmZlciIsImRhdGFWaWV3IiwiRGF0YVZpZXciLCJieXRlTGVuZ3RoIiwiZ2V0VWludDgiLCJzZXRVaW50OCIsImFzc2lnbkF1dG9QYWdlcyIsIm1hbmlmZXN0VGV4dCIsIm9iZnVzY2F0aW9ucyIsIm9iZnVzY2F0aW9uS2V5Iiwic2hhMSIsImVuY29kZWRQYXRoIiwiY29tcHJlc3NlZCIsImNvbXByZXNzZWRTaXplIiwib2JmdXNjYXRpb24iLCJERUZBVUxUIiwiZXBhZ2UiLCJlcGFnZUNvdW50IiwiZXBhZ2VDb3VudENhbGxiYWNrIiwic2V0RVBhZ2VDb3VudE1vZGUiLCJlcGFnZUlzUmVuZGVyZWRQYWdlIiwiY291bnRFUGFnZXMiLCJvZmZzZXRQZXJFUGFnZSIsImluaXRXaXRoQ2hhcHRlcnMiLCJpdGVtcmVmIiwicmVhZGluZ1Byb2dyZXNzaW9uIiwicHJpbWFyeUVudHJ5UGF0aCIsInJlYWRpbmdPcmRlciIsImVuY29kZVVSSSIsImhyZWZOb0ZyYWdtZW50IiwiaXRlbUNvdW50IiwidG9jRm91bmQiLCJyZWFkaW5nT3JkZXJPclJlc291cmNlcyIsIml0ZW1PYmoiLCJpc0luUmVhZGluZ09yZGVyIiwiZW5jb2RpbmdGb3JtYXQiLCJfdGhpczEyJGl0ZW1zIiwiZ2V0Q0ZJIiwib2Zmc2V0SW5JdGVtIiwiY2ZpIiwiQ0ZJIiwicmVzb2x2ZUZyYWdtZW50Iiwib3BmTmF2IiwiaWRyZWYiLCJub2RlTmF2IiwicmVzb2x2ZUVQYWdlIiwiZ2V0RVBhZ2VGcm9tUG9zaXRpb24iLCJtYWtlUGFnZUFuZFBvc2l0aW9uIiwiT1BGVmlldyIsInBhZ2VTaGVldFNpemVSZXBvcnRlciIsIkNvdW50ZXJzIiwiZ2V0UGFnZSIsInZpZXdJdGVtIiwic3BpbmVJdGVtcyIsImdldEN1cnJlbnRQYWdlUHJvZ3Jlc3Npb24iLCJmaW5pc2hQYWdlQ29udGFpbmVyIiwib2xkUGFnZSIsImlzRmlyc3RQYWdlIiwicHJldkl0ZW0iLCJuZXdQYWdlIiwiaW5zZXJ0UG9zIiwicmVuZGVyU2luZ2xlUGFnZSIsIm1ha2VQYWdlIiwicG9zUGFyYW0iLCJsYXlvdXRQb3NpdGlvbnMiLCJwcmV2UG9zIiwiZ2V0UGFnZVZpZXdJdGVtIiwicmVzdWx0UG9zaXRpb24iLCJwYWdlQW5kUG9zaXRpb24iLCJpc0xhc3RQYWdlIiwibmV4dExheW91dFBvc2l0aW9uIiwibm9ybWFsaXplU2Vla1Bvc2l0aW9uIiwic2Vla09mZnNldCIsInNlZWtPZmZzZXRQYWdlSW5kZXgiLCJjb21wbGV0ZSIsImZpbmRQYWdlIiwic3luYyIsInJlc3VsdFBhZ2UiLCJub3JtYWxpemVkUG9zaXRpb24iLCJyZW5kZXJQYWdlIiwicmVuZGVyQWxsUGFnZXMiLCJyZW5kZXJQYWdlc1VwdG8iLCJub3RBbGxQYWdlcyIsImxhc3RSZXN1bHQiLCJmaXJzdFBhZ2UiLCJsYXN0UGFnZSIsIm5leHRQYWdlIiwibmV4dFZpZXdJdGVtIiwic3BpbmVJdGVtTG9hZGluZ0NvbnRpbnVhdGlvbnMiLCJwcmV2aW91c1BhZ2UiLCJpc1JlY3RvUGFnZSIsImlzTGVmdCIsImdldFNwcmVhZCIsIm90aGVyUGFnZUFuZFBvc2l0aW9uIiwidGhpc1BhZ2UiLCJvdGhlclBhZ2UiLCJuZXh0U3ByZWFkIiwiaXNSZWN0byIsIm5leHQyIiwicmVzdWx0MiIsInByZXZpb3VzU3ByZWFkIiwib2xkUHJldlBhZ2VDb250IiwibmF2aWdhdGVUb0VQYWdlIiwibmF2aWdhdGVUb0ZyYWdtZW50IiwibmF2aWdhdGVUbyIsInJlc3RvcmVkIiwicGFnZUNvbnQiLCJtYXRyaXgiLCJjc3NNYXRyaXgiLCJtYWtlT2JqZWN0VmlldyIsImhhbmRsZXJTcmMiLCJzcmNQYXJhbSIsInR5cGVQYXJhbSIsInB2YWx1ZSIsIm1ha2VNYXRoSmF4VmlldyIsImh1YiIsImNsb25lZE1hdGgiLCJpbXBvcnROb2RlIiwicmVzb2x2ZVVSTHNJbk1hdGhNTCIsIlB1c2giLCJuZXdVcmwiLCJtYXRoVHlwZXNldCIsImxvYWRpbmdDb250aW51YXRpb25zIiwiZXB1YlNwaW5lUHJvcGVydGllcyIsInBhZ2VDb3VudGVyT2Zmc2V0IiwiX3RoaXMyNyRzcGluZUl0ZW1zJCIsInByZXZpb3VzVmlld0l0ZW0iLCJwdWJUaXRsZXMiLCJyZW1vdmVSZW5kZXJlZFBhZ2VzIiwiaGFzQXV0b1NpemVkUGFnZXMiLCJoYXNQYWdlcyIsImF1dG9oaWRlIiwidG9jIiwidG9jQXV0b2hpZGUiLCJ0b2NWaWV3IiwiVG9jIiwidG9jV2lkdGgiLCJ0b2NIZWlnaHQiLCJab29tVHlwZSIsIkFkYXB0aXZlVmlld2VyIiwidmlld3BvcnRFbGVtZW50IiwiaW5zdGFuY2VJZCIsImNhbGxiYWNrRm4iLCJraWNrIiwic2VuZENvbW1hbmQiLCJyZXNpemVMaXN0ZW5lciIsIm5lZWRSZXNpemUiLCJwYWdlUmVwbGFjZWRMaXN0ZW5lciIsImh5cGVybGlua0xpc3RlbmVyIiwicGFnZVJ1bGVTdHlsZUVsZW1lbnQiLCJsb2FkUHVibGljYXRpb24iLCJsb2FkWE1MIiwiY29uZmlndXJlIiwibW92ZVRvIiwiYWRkTG9nTGlzdGVuZXJzIiwiTE9BRElORyIsInBhY2thZ2VVUkwiLCJ0b3VjaEFjdGl2ZSIsInRvdWNoWCIsInRvdWNoWSIsIm5lZWRSZWZyZXNoIiwiY3VycmVudFNwcmVhZCIsInBhZ2VQb3NpdGlvbiIsImZpdFRvU2NyZWVuIiwicGFnZVZpZXdNb2RlIiwiU0lOR0xFX1BBR0UiLCJ3YWl0Rm9yTG9hZGluZyIsImxvZ0xldmVsIiwic2V0UmVhZHlTdGF0ZSIsImNvbW1hbmQiLCJQcm9maWxlIiwiemlwbWV0YSIsImF1dGhvclN0eWxlU2hlZXQiLCJ1c2VyU3R5bGVTaGVldCIsIkVwdWIiLCJyZW5kZXIiLCJyZXNvbHZlZFBhcmFtcyIsImNhbmNlbFJlbmRlcmluZ1Rhc2siLCJyZXNpemUiLCJyZXNvbHZlTGVuZ3RoIiwibWF0Y2hlZCIsImF1dG9yZXNpemUiLCJ2cCIsInVzZXJBZ2VudFJvb3RVUkwiLCJyb290VVJMIiwiY29uZmlndXJlUGx1Z2lucyIsIkNPTkZJR1VSQVRJT04iLCJzaG93Q3VycmVudCIsImZvckN1cnJlbnRQYWdlcyIsInJlbW92ZVBhZ2VMaXN0ZW5lcnMiLCJoaWRlUGFnZXMiLCJzaG93U2luZ2xlUGFnZSIsInNob3dQYWdlIiwic2hvd1NwcmVhZCIsImxlZnRXaWR0aCIsInJpZ2h0V2lkdGgiLCJyZXBvcnRQb3NpdGlvbiIsInNlbmRMb2NhdGlvbk5vdGlmaWNhdGlvbiIsImNyZWF0ZVZpZXdwb3J0IiwidnMiLCJyZXNvbHZlU3ByZWFkVmlldyIsIlNQUkVBRCIsIkFVVE9fU1BSRUFEIiwidXBkYXRlU3ByZWFkVmlldyIsInNpemVJc0dvb2QiLCJzcHJlYWRWaWV3Q2hhbmdlZCIsIm9wZlZpZXciLCJzZXRQYWdlU2l6ZSIsInNldFBhZ2VTaXplUGFnZVJ1bGVzIiwicGFnZVNoZWV0U2l6ZUFscmVhZHlTZXQiLCJzdHlsZVRleHQiLCJyZW1vdmVQYWdlU2l6ZVBhZ2VSdWxlcyIsInRvY1Zpc2libGUiLCJzZXRTcHJlYWRab29tIiwic2V0UGFnZVpvb20iLCJnZXRBZGp1c3RlZFpvb21GYWN0b3IiLCJnZXRTcHJlYWREaW1lbnNpb25zIiwicGFnZURpbWVuc2lvbiIsImNhbGN1bGF0ZVpvb21GYWN0b3JUb0ZpdEluc2lkZVZpZXdQb3J0IiwicXVlcnlab29tRmFjdG9yIiwiRklUX0lOU0lERV9WSUVXUE9SVCIsInBhZ2VEaW0iLCJyZW5kZXJUYXNrIiwiUmVuZGVyaW5nQ2FuY2VsZWRFcnJvciIsInJlc2l6ZVRhc2siLCJJTlRFUkFDVElWRSIsIm5vdGlmaWNhdGlvbiIsIkNPTVBMRVRFIiwiY3VycmVudFZpc2liaWxpdHkiLCJjaGFuZ2VBdXRvaGlkZSIsInJ1bkNvbW1hbmQiLCJhY3Rpb25OYW1lIiwiaW5pdEVtYmVkIiwiY21kIiwibWF5YmVQYXJzZSIsInZpZXdlciIsImhyZWZFdmVudCIsImludGVybmFsIiwiZnJhbWVJbnRlcm5hbCIsImFkYXB0X2NvbW1hbmQiLCJjb252ZXJ0Vmlld2VyT3B0aW9ucyIsIk5hdmlnYXRpb24iLCJDb3JlVmlld2VyIiwic2V0dGluZ3MiLCJvcHRfb3B0aW9ucyIsImFkYXB0Vmlld2VyXyIsImRpc3BhdGNoZXIiLCJhdXRvUmVzaXplIiwicGFnZUJvcmRlcldpZHRoIiwic2V0T3B0aW9ucyIsImV2ZW50VGFyZ2V0IiwiZGVmaW5lUHJvcGVydHkiLCJyZW1vdmVMaXN0ZW5lciIsImxvYWREb2N1bWVudCIsInNpbmdsZURvY3VtZW50T3B0aW9ucyIsIm9wdF9kb2N1bWVudE9wdGlvbnMiLCJvcHRfdmlld2VyT3B0aW9ucyIsImxvYWREb2N1bWVudE9yUHVibGljYXRpb24iLCJwdWJVcmwiLCJkb2N1bWVudE9wdGlvbnMiLCJjb252ZXJ0U3R5bGVTaGVldEFycmF5IiwiY29udmVydFNpbmdsZURvY3VtZW50T3B0aW9ucyIsImRvY3VtZW50T2JqZWN0IiwiaW5pdGlhbGl6ZWQiLCJyZXNvbHZlTmF2aWdhdGlvbiIsIlBSRVZJT1VTIiwiTkVYVCIsIm5hdmlnYXRlVG9QYWdlIiwib3B0X2VwYWdlIiwiRVBBR0UiLCJuYXZpZ2F0ZVRvSW50ZXJuYWxVcmwiLCJvcHRfc2hvdyIsIm9wdF9hdXRvaGlkZSIsImdldFBhZ2VTaXplcyIsIl90aGlzJGFkYXB0Vmlld2VyXyRvcCIsIl90aGlzJGFkYXB0Vmlld2VyXyRvcDIiLCJnZXRDb3ZlciIsInRvTnVtYmVyT3JOdWxsIiwib3B0IiwiaXNBcnJheSIsIlZpdmxpb3N0eWxlUHJpbnQiLCJodG1sRG9jIiwicHJpbnRDYWxsYmFjayIsImlmcmFtZVdpbiIsImhpZGVJZnJhbWUiLCJyZW1vdmVJZnJhbWUiLCJib3JkZXJXaWR0aCIsInByaW50SW5zdGFuY2UiLCJzcmNkb2MiLCJydW5JbklmcmFtZSIsInByZXBhcmVQcmludCIsImJyb3dzZXJQcmludCIsImNsZWFuVXAiLCJkb2NCbG9iIiwiVmlld2VyIiwiY29uZmlnIiwiUFJFU0VUX1NJWkUiLCJkZXNjcmlwdGlvbiIsIkNPTlNUQU5UUyIsImN1c3RvbVdpZHRoIiwiY3VzdG9tSGVpZ2h0IiwiY3VzdG9tTWFyZ2luIiwiYmFzZUxpbmVIZWlnaHQiLCJiYXNlRm9udEZhbWlseSIsInZpZXdlckZvbnRTaXplIiwiUGFnZVN0eWxlIiwiW29iamVjdCBPYmplY3RdIiwicGFnZVN0eWxlIiwiUHJlc2V0U2l6ZSIsInBhZ2VTaXplTW9kZSIsIm9ic2VydmFibGUiLCJEZWZhdWx0IiwicHJlc2V0U2l6ZSIsImlzTGFuZHNjYXBlIiwicGFnZVNpemVJbXBvcnRhbnQiLCJwYWdlTWFyZ2luTW9kZSIsInBhZ2VNYXJnaW5JbXBvcnRhbnQiLCJmaXJzdFBhZ2VNYXJnaW5aZXJvIiwiZmlyc3RQYWdlTWFyZ2luWmVyb0ltcG9ydGFudCIsImZvcmNlSHRtbEJvZHlNYXJnaW5aZXJvIiwid2lkb3dzT3JwaGFucyIsIndpZG93c09ycGhhbnNJbXBvcnRhbnQiLCJpbWFnZU1heFNpemVUb0ZpdFBhZ2UiLCJpbWFnZU1heFNpemVUb0ZpdFBhZ2VJbXBvcnRhbnQiLCJpbWFnZUtlZXBBc3BlY3RSYXRpbyIsImltYWdlS2VlcEFzcGVjdFJhdGlvSW1wb3J0YW50IiwiYmFzZUZvbnRTaXplU3BlY2lmaWVkIiwiYmFzZUZvbnRTaXplSW1wb3J0YW50IiwiYmFzZUxpbmVIZWlnaHRTcGVjaWZpZWQiLCJiYXNlTGluZUhlaWdodEltcG9ydGFudCIsImJhc2VGb250RmFtaWx5U3BlY2lmaWVkIiwiYmFzZUZvbnRGYW1pbHlJbXBvcnRhbnQiLCJhbGxJbXBvcnRhbnQiLCJwYWdlT3RoZXJTdHlsZSIsImZpcnN0UGFnZU90aGVyU3R5bGUiLCJyb290T3RoZXJTdHlsZSIsImJlZm9yZU90aGVyU3R5bGUiLCJhZnRlck90aGVyU3R5bGUiLCJzZXRWaWV3ZXJGb250U2l6ZU9ic2VydmFibGUiLCJ2aWV3ZXJGb250U2l6ZU9ic2VydmFibGUiLCJmb250U2l6ZVB4VG9QZXJjZW50Iiwidmlld2VyRm9udFNpemVQZXJjZW50IiwicHVyZUNvbXB1dGVkIiwicGVyY2VudCIsImZvbnRTaXplUGVyY2VudFRvUHgiLCJjc3NUZXh0IiwidG9DU1NUZXh0IiwiZnJvbUNTU1RleHQiLCJwYWdlU3R5bGVSZWdFeHAiLCJjZW50IiwicHJlY2lzaW9uIiwidG9QcmVjaXNpb24iLCJzaXplV18iLCJzaXplSF8iLCJzaXplSW1wb3J0YW50IiwicGFnZU90aGVyU3R5bGVfIiwiZmlyc3RQYWdlT3RoZXJTdHlsZV8iLCJiYXNlRm9udFNpemVfIiwiYmFzZUZvbnRGYW1pbHlfIiwicm9vdE90aGVyU3R5bGVfIiwiYWZ0ZXJPdGhlclN0eWxlXyIsInNpemVXIiwic2l6ZUgiLCJjb3VudEltcG9ydGFudCIsImNvdW50Tm90SW1wb3J0YW50IiwiQXV0byIsIlByZXNldCIsIkN1c3RvbSIsIlplcm8iLCJpbXAiLCJlc2NhcGVVbmljb2RlQ2hhciIsInBlcmNlbnRFbmNvZGVBbXBlcnNhbmRBbmRVbmVuY29kZWRQZXJjZW50IiwicGVyY2VudEVuY29kZUFtcGVyc2FuZEFuZFBlcmNlbnQiLCJwZXJjZW50RGVjb2RlQW1wZXJzYW5kQW5kUGVyY2VudCIsInBlcmNlbnRFbmNvZGVGb3JEYXRhVVJJIiwiZ2V0UmVnRXhwRm9yUGFyYW1ldGVyIiwic3RyaW5nVXRpbCIsImVzY2FwZVVuaWNvZGVTdHJpbmciLCJoaXN0b3J5Iiwic3RvcmVkVXJsIiwicmVzdWx0cyIsInVwZGF0ZWQiLCJyZXBsYWNlU3RhdGUiLCJrZWVwRmlyc3QiLCJsYXN0SW5kZXgiLCJEb2N1bWVudE9wdGlvbnMiLCJkZWZhdWx0Qm9va01vZGUiLCJ1cmxPcHRpb25zIiwic3JjVXJscyIsInVybFBhcmFtZXRlcnMiLCJnZXRQYXJhbWV0ZXIiLCJiVXJscyIsInhVcmxzIiwiYm9va01vZGUiLCJ1c2VyU3R5bGUiLCJnZXREb2N1bWVudE9wdGlvbnNGcm9tVVJMIiwiZGF0YVVzZXJTdHlsZUluZGV4IiwicmVtb3ZlUGFyYW1ldGVyIiwic2V0UGFyYW1ldGVyIiwidXBkYXRlVXNlclN0eWxlU2hlZXRGcm9tQ1NTVGV4dCIsInVzZXJTdHlsZVNoZWV0QXJyYXkiLCJkYXRhVXNlclN0eWxlIiwiUGFnZVZpZXdNb2RlSW5zdGFuY2UiLCJDb3JlUGFnZVZpZXdNb2RlIiwiWm9vbU9wdGlvbnMiLCJfdmlld2VyIiwiRml4ZWRab29tRmFjdG9yIiwiZ2V0Q3VycmVudFpvb21GYWN0b3IiLCJGaXRUb1NjcmVlbiIsInN1cGVyIiwiZ2V0RGVmYXVsdFZhbHVlcyIsImRlZmF1bHRNb2RlIiwiY3JlYXRlRGVmYXVsdE9wdGlvbnMiLCJWaWV3ZXJPcHRpb25zIiwiYXJnIiwiZGVmYXVsdFJlbmRlckFsbFBhZ2VzIiwiZm9udFNpemVTdHIiLCJkZW5vbSIsImhhc1BhcmFtZXRlciIsImZyb21TcHJlYWRWaWV3U3RyaW5nIiwiZ2V0Vmlld2VyT3B0aW9uc0Zyb21VUkwiLCJ0b1NwcmVhZFZpZXdTdHJpbmciLCJvYnNlcnZhYmxlQXJyYXkiLCJMb2dnZXIiLCJEZWJ1ZyIsIm1lc3NhZ2VRdWV1ZSIsIkluZm8iLCJXYXJuIiwidXRpbCIsIm9icyIsImdldHRlciIsInZpZXdlclNldHRpbmdzIiwidmlld2VyT3B0aW9ucyIsInZpZXdlck9wdGlvbnNfIiwiZG9jdW1lbnRPcHRpb25zXyIsImNvcmVWaWV3ZXJfIiwidG9PYmplY3QiLCJzdGF0ZV8iLCJyZWFkb25seU9ic2VydmFibGUiLCJuYXZpZ2F0YWJsZSIsInRvY1Bpbm5lZCIsImlucHV0VXJsIiwic2V0dXBWaWV3ZXJFdmVudEhhbmRsZXIiLCJzZXR1cFZpZXdlck9wdGlvblN1YnNjcmlwdGlvbnMiLCJnZXRMb2dnZXIiLCJwYXlsb2FkIiwidG9jVmlzaWJsZU9sZCIsInRvY1Zpc2libGVOZXciLCJjb21wdXRlZCIsIkZJUlNUIiwic2hvd24iLCJhdXRvSGlkZSIsIktleXMiLCJVbmlkZW50aWZpZWQiLCJBcnJvd0Rvd24iLCJBcnJvd0xlZnQiLCJBcnJvd1JpZ2h0IiwiQXJyb3dVcCIsIkhvbWUiLCJFbmQiLCJQYWdlRG93biIsIlBhZ2VVcCIsIkVzY2FwZSIsIkVudGVyIiwiU3BhY2UiLCJpZGVudGlmeUtleUZyb21FdmVudCIsImtleUlkZW50aWZpZXIiLCJtZXRhS2V5IiwiS2V5Ym9hcmRFdmVudCIsIkRPTV9LRVlfTE9DQVRJT05fTlVNUEFEIiwia2V5VXRpbCIsInNldHRpbmdzUGFuZWwiLCJuYXZpZ2F0aW9uT3B0aW9ucyIsInZpZXdlcl8iLCJzZXR0aW5nc1BhbmVsXyIsImp1c3RDbGlja2VkIiwiaXNEaXNhYmxlZCIsIm9wZW5lZCIsInBpbm5lZCIsIm5hdmlnYXRpb25EaXNhYmxlZCIsImRpc2FibGVQYWdlTmF2aWdhdGlvbiIsInBhZ2VOdW1iZXJFbGVtIiwiaXNQYWdlTnVtYmVyRGlzYWJsZWQiLCJpc1BhZ2VTbGlkZXJEaXNhYmxlZCIsImRpc2FibGVQYWdlU2xpZGVyIiwidG90YWxQYWdlcyIsImlzTmF2aWdhdGVUb1ByZXZpb3VzRGlzYWJsZWQiLCJpc05hdmlnYXRlVG9OZXh0RGlzYWJsZWQiLCJpc05hdmlnYXRlVG9MZWZ0RGlzYWJsZWQiLCJpc05hdmlnYXRlVG9SaWdodERpc2FibGVkIiwiaXNOYXZpZ2F0ZVRvRmlyc3REaXNhYmxlZCIsImlzTmF2aWdhdGVUb0xhc3REaXNhYmxlZCIsImhpZGVQYWdlTmF2aWdhdGlvbiIsInpvb21EaXNhYmxlZCIsImRpc2FibGVab29tIiwiaXNab29tT3V0RGlzYWJsZWQiLCJpc1pvb21JbkRpc2FibGVkIiwiaXNab29tVG9BY3R1YWxTaXplRGlzYWJsZWQiLCJpc1RvZ2dsZUZpdFRvU2NyZWVuRGlzYWJsZWQiLCJoaWRlWm9vbSIsImZvbnRTaXplQ2hhbmdlRGlzYWJsZWQiLCJkaXNhYmxlRm9udFNpemVDaGFuZ2UiLCJpc0luY3JlYXNlRm9udFNpemVEaXNhYmxlZCIsImlzRGVjcmVhc2VGb250U2l6ZURpc2FibGVkIiwiaXNEZWZhdWx0Rm9udFNpemVEaXNhYmxlZCIsImhpZGVGb250U2l6ZUNoYW5nZSIsImlzVE9DVG9nZ2xlRGlzYWJsZWQiLCJkaXNhYmxlVE9DTmF2aWdhdGlvbiIsImhpZGVUT0NOYXZpZ2F0aW9uIiwiaGlkZVBhZ2VTbGlkZXIiLCJlcGFnZVRvUGFnZU51bWJlciIsInBhZ2VOdW1iZXJUZXh0IiwiZXBhZ2VPbGQiLCJwYWdlTnVtYmVyT2xkIiwiZXBhZ2VOYXYiLCJlcGFnZUZyb21QYWdlTnVtYmVyIiwicGFnZVNsaWRlciIsInBhZ2VTbGlkZXJNYXgiLCJtZXRob2ROYW1lIiwibmF2aWdhdGVUb1ByZXZpb3VzIiwibmF2aWdhdGVUb05leHQiLCJuYXZpZ2F0ZVRvTGVmdCIsIm5hdmlnYXRlVG9SaWdodCIsIm5hdmlnYXRlVG9GaXJzdCIsIm5hdmlnYXRlVG9MYXN0Iiwiem9vbUluIiwiem9vbU91dCIsInpvb21Ub0FjdHVhbFNpemUiLCJ0b2dnbGVGaXRUb1NjcmVlbiIsInVwZGF0ZUZvbnRTaXplU2V0dGluZ3MiLCJpbnB1dEVsZW0iLCJzZXRTZWxlY3Rpb25SYW5nZSIsImRlbHRhTW9kZSIsImRlbHRhWCIsImRlbHRhWSIsInNjcm9sbFdpZHRoIiwiY2xpZW50V2lkdGgiLCJzY3JvbGxIZWlnaHQiLCJjbGllbnRIZWlnaHQiLCJvbndoZWVsUGFnZVNsaWRlciIsInRvY0JveCIsInRvZ2dsZVRPQyIsImludGVydmFsSUQiLCJjbGVhckludGVydmFsIiwic2V0SW50ZXJ2YWwiLCJpc0J1dHRvbiIsImlzRXhwYW5kZWQiLCJzZXR0aW5nc1RvZ2dsZSIsImhvcml6b250YWxTY3JvbGxhYmxlIiwidmVydGljYWxTY3JvbGxhYmxlIiwiaXNQYWdlTnVtYmVySW5wdXQiLCJpc1RPQ0FjdGl2ZSIsImluY3JlYXNlRm9udFNpemUiLCJkZWNyZWFzZUZvbnRTaXplIiwibmF2aWdhdGVUT0MiLCJTZXR0aW5nc1BhbmVsIiwibWVzc2FnZURpYWxvZyIsInNldHRpbmdzUGFuZWxPcHRpb25zIiwiaXNQYWdlU3R5bGVDaGFuZ2VEaXNhYmxlZCIsImRpc2FibGVQYWdlU3R5bGVDaGFuZ2UiLCJpc092ZXJyaWRlRG9jdW1lbnRTdHlsZVNoZWV0RGlzYWJsZWQiLCJpc1BhZ2VWaWV3TW9kZUNoYW5nZURpc2FibGVkIiwiZGlzYWJsZVBhZ2VWaWV3TW9kZUNoYW5nZSIsImlzQm9va01vZGVDaGFuZ2VEaXNhYmxlZCIsImRpc2FibGVCb29rTW9kZUNoYW5nZSIsImlzUmVuZGVyQWxsUGFnZXNDaGFuZ2VEaXNhYmxlZCIsImRpc2FibGVSZW5kZXJBbGxQYWdlc0NoYW5nZSIsIm9mIiwiZGVmYXVsdFBhZ2VTdHlsZSIsImZvY3VzVG9GaXJzdEl0ZW0iLCJvdXRlckVsZW1QYXJhbSIsIm91dGVyRWxlbSIsImlzU2V0dGluZ3NBY3RpdmUiLCJpc0luSW5wdXQiLCJpc0luVGV4dEFyZWEiLCJpc0hvdEtleUVuYWJsZWQiLCJNZXNzYWdlRGlhbG9nIiwiZXJyb3JJbmZvIiwiVmlld2VyQXBwIiwiZmxhZ3MiLCJkaXNhYmxlU2V0dGluZ3MiLCJkaXNhYmxlQ29udGV4dE1lbnUiLCJkaXNhYmxlUHJpbnQiLCJ3ZWxjb21lIiwibWVudURldGFpbCIsIm1lbnVEZXRhaWxNYWluIiwib25jb250ZXh0bWVudSIsInByaW50U3R5bGUiLCJWaXZsaW9zdHlsZSIsImdldEJhc2VVUkwiLCJwdXNoU3RhdGUiLCJuYXZpZ2F0aW9uIiwib25oYXNoY2hhbmdlIiwicmVsb2FkIiwia2V5Q29kZSIsImN0cmxLZXkiLCJhbHRLZXkiLCJzaGlmdEtleSIsImhhbmRsZUtleSIsInN1cHBvcnRUb3VjaEV2ZW50cyIsImJpbmRpbmdIYW5kbGVycyIsIm1lbnVCdXR0b24iLCJ2YWx1ZUFjY2Vzc29yIiwidW53cmFwIiwidXRpbHMiLCJ0b2dnbGVEb21Ob2RlQ3NzQ2xhc3MiLCJnZXRTZWxlY3Rpb24iLCJyZW1vdmVBbGxSYW5nZXMiLCJ4U3RhcnQiLCJ5U3RhcnQiLCJhcnJvd0J1dHRvbiIsInN3aXBlUGFnZXMiLCJ0b3VjaGVzIiwidmlzdWFsVmlld3BvcnQiLCJjbGllbnRYIiwiY2xpZW50WSIsInhEaWZmIiwieURpZmYiLCJzdGFydFZpZXdlciIsImFwcGx5QmluZGluZ3MiLCJvbmxvYWQiXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7O1VBTXVCQSxPQUFPQyxFQUFFQyxPQUFNLEVBQUdDLE1BQU0sUUFBUUMsRUFBRUgsRUFBRUksU0FBU0MsRUFBRUwsRUFBRU0sVUFBVUMsRUFBRVAsRUFBRVEsT0FBT0MsRUFBRVQsRUFBRVUsS0FBS0gsR0FBRyxvQkFBcUJDLFNBQVNELEVBQUVDLGlCQUFrQlQsR0FBOEhBLEVBQUVZLEVBQU9DLFNBQVNBLEtBQXNCLFNBQVNDLEVBQUVDLFlBQVlDLEVBQUVDLEVBQUVDLFVBQVUsT0FBT0QsVUFBVUEsS0FBS0UsSUFBRUYsSUFBSUMsV0FBY0UsRUFBRUMsRUFBRUgsT0FBT0ksU0FBUyxXQUFXQSxJQUFJQSxFQUFFTCxFQUFFQSxFQUFFTSxZQUFXLFdBQVdELEVBQUV0QixFQUFFcUIsTUFBS0gsY0FBY00sRUFBRUgsRUFBRUgsT0FBT0ksU0FBUyxXQUFXRyxhQUFhSCxHQUNsaEJBLEVBQUVMLEVBQUVBLEVBQUVNLFdBQVdGLEVBQUVILGFBQWFRLEVBQUVULEVBQUVDLEdBQUdBLEdBQUcsV0FBV0EsRUFBRSxpQkFBaUJBLEVBQUVoQixLQUFLeUIsR0FBR1YsR0FBR2YsS0FBSzBCLEdBQUdYLEVBQUVDLEdBQUdoQixLQUFLMkIsR0FBR1osWUFBWWEsRUFBR2IsRUFBRUMsVUFBVUEsR0FBR0EsRUFBRWEsR0FBR2IsRUFBRWEsYUFBYUMsRUFBR2YsRUFBRUMsT0FBT0ksRUFBRXBCLEtBQUsrQixHQUFHQyxFQUFFWixFQUFFYSxHQUFHRCxFQUFFRSxLQUFLbEMsS0FBS21DLElBQUluQyxL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QyxHQUFPNEMsS0FDUDVDLEdBQU8yQyxRQUNQM0MsR0FBTzJDLFFBQ1AzQyxHQUFPMkMsUUFDUDNDLEdBQU8yQyxRQUNQM0MsR0FBTzZDLEtBQ1A3QyxHQUFPMkMsUUFDUDNDLEdBQU8yQyxRQUNQM0MsR0FBTzZDLEtBQ1A3QyxHQUFPNkMsS0FDUDdDLEdBQU82QyxLQUNQN0MsR0FBTzZDLEtBQ1A3QyxHQUFPNkMsS0FDUDdDLEdBQU82QyxLQUNQN0MsR0FBTzZDLEtBQ1A3QyxHQUFPNkMsS0FDUDdDLEdBQU82QyxLQUNQN0MsR0FBTzZDLEtBQ1A3QyxHQUFPMkMsUUFDUDNDLEdBQU8yQyxRQUNQM0MsR0FBTzJDLFFBQ1AzQyxHQUFPMkMsUUFDUDNDLEdBQU8yQyxRQUNQM0MsR0FBTzJDLFFBQ1AzQyxHQUFPMkMsUUFDUDNDLEdBQU82QyxLQUNQN0MsR0FBTzZDLEtBQ1A3QyxHQUFPNkMsS0FDUDdDLEdBQU82QyxLQUNQN0MsR0FBTzZDLEtBQ1A3QyxHQUFPNkMsS0FDUDdDLEdBQU82QyxLQUNQN0MsR0FBTzZDLEtBQ1A3QyxHQUFPNkMsS0FDUDdDLEdBQU82QyxLQUNQN0MsR0FBTzZDLEtBQ1A3QyxHQUFPNkMsS0FDUDdDLEdBQU82QyxLQUNQN0MsR0FBTzZDLEtBQ1A3QyxHQUFPNkMsS0FDUDdDLEdBQU82QyxLQUNQN0MsR0FBTzZDLEtBQ1A3QyxHQUFPNkMsS0FDUDdDLEdBQU82QyxLQUNQN0MsR0FBTzZDLEtBQ1A3QyxHQUFPNkMsS0FDUDdDLEdBQU82QyxLQUNQN0MsR0FBTzZDLEtBQ1A3QyxHQUFPNkMsS0FDUDdDLEdBQU82QyxLQUNQN0MsR0FBTzZDLEtBQ1A3QyxHQUFPMkMsUUFDUDNDLEdBQU84QyxRQUNQOUMsR0FBTzJDLFFBQ1AzQyxHQUFPMkMsUUFDUDNDLEdBQU82QyxLQUNQN0MsR0FBTzJDLFFBQ1AzQyxHQUFPNkMsS0FDUDdDLEdBQU82QyxLQUNQN0MsR0FBTzZDLEtBQ1A3QyxHQUFPNkMsS0FDUDdDLEdBQU82QyxLQUNQN0MsR0FBTzZDLEtBQ1A3QyxHQUFPNkMsS0FDUDdDLEdBQU82QyxLQUNQN0MsR0FBTzZDLEtBQ1A3QyxHQUFPNkMsS0FDUDdDLEdBQU82QyxLQUNQN0MsR0FBTzZDLEtBQ1A3QyxHQUFPNkMsS0FDUDdDLEdBQU82QyxLQUNQN0MsR0FBTzZDLEtBQ1A3QyxHQUFPNkMsS0FDUDdDLEdBQU82QyxLQUNQN0MsR0FBTzZDLEtBQ1A3QyxHQUFPNkMsS0FDUDdDLEdBQU82QyxLQUNQN0MsR0FBTzZDLEtBQ1A3QyxHQUFPNkMsS0FDUDdDLEdBQU82QyxLQUNQN0MsR0FBTzZDLEtBQ1A3QyxHQUFPNkMsS0FDUDdDLEdBQU82QyxLQUNQN0MsR0FBTzJDLFFBQ1AzQyxHQUFPMkMsUUFDUDNDLEdBQU8yQyxRQUNQM0MsR0FBTzJDLFFBQ1AzQyxHQUFPMkMsU0FHVEQsR0FBWXJDLElBQVFMLEdBQU8yQyxRQUszQixJQUFhSSxHQUE4QixDQUN6Qy9DLEdBQU9PLFFBQ1BQLEdBQU9PLFFBQ1BQLEdBQU9PLFFBQ1BQLEdBQU9PLFFBQ1BQLEdBQU9PLFFBQ1BQLEdBQU9PLFFBQ1BQLEdBQU9PLFFBQ1BQLEdBQU9PLFFBQ1BQLEdBQU9PLFFBQ1BQLEdBQU9PLFFBQ1BQLEdBQU9PLFFBQ1BQLEdBQU9PLFFBQ1BQLEdBQU9PLFFBQ1BQLEdBQU9PLFFBQ1BQLEdBQU9PLFFBQ1BQLEdBQU9PLFFBQ1BQLEdBQU9PLFFBQ1BQLEdBQU9PLFFBQ1BQLEdBQU9PLFFBQ1BQLEdBQU9PLFFBQ1BQLEdBQU9PLFFBQ1BQLEdBQU9PLFFBQ1BQLEdBQU9PLFFBQ1BQLEdBQU9PLFFBQ1BQLEdBQU9PLFFBQ1BQLEdBQU9PLFFBQ1BQLEdBQU9PLFFBQ1BQLEdBQU9PLFFBQ1BQLEdBQU9PLFFBQ1BQLEdBQU9PLFFBQ1BQLEdBQU9PLFFBQ1BQLEdBQU9PLFFBQ1BQLEdBQU9PLFFBQ1BQLEdBQU9PLFFBQ1BQLEdBQU9PLFFBQ1BQLEdBQU9PLFFBQ1BQLEdBQU9PLFFBQ1BQLEdBQU9PLFFBQ1BQLEdBQU9PLFFBQ1BQLEdBQU9PLFFBQ1BQLEdBQU9PLFFBQ1BQLEdBQU9PLFFBQ1BQLEdBQU9PLFFBQ1BQLEdBQU9PLFFBQ1BQLEdBQU9PLFFBQ1BQLEdBQU9nRCxRQUNQaEQsR0FBT2lELE1BQ1BqRCxHQUFPTyxRQUNQUCxHQUFPaUQsTUFDUGpELEdBQU9pRCxNQUNQakQsR0FBT2lELE1BQ1BqRCxHQUFPaUQsTUFDUGpELEdBQU9pRCxNQUNQakQsR0FBT2lELE1BQ1BqRCxHQUFPaUQsTUFDUGpELEdBQU9pRCxNQUNQakQsR0FBT2lELE1BQ1BqRCxHQUFPaUQsTUFDUGpELEdBQU9PLFFBQ1BQLEdBQU9PLFFBQ1BQLEdBQU9PLFFBQ1BQLEdBQU9PLFFBQ1BQLEdBQU9PLFFBQ1BQLEdBQU9PLFFBQ1BQLEdBQU9PLFFBQ1BQLEdBQU9nRCxRQUNQaEQsR0FBT2dELFFBQ1BoRCxHQUFPZ0QsUUFDUGhELEdBQU9nRCxRQUNQaEQsR0FBT2dELFFBQ1BoRCxHQUFPZ0QsUUFDUGhELEdBQU9nRCxRQUNQaEQsR0FBT2dELFFBQ1BoRCxHQUFPZ0QsUUFDUGhELEdBQU9nRCxRQUNQaEQsR0FBT2dELFFBQ1BoRCxHQUFPZ0QsUUFDUGhELEdBQU9nRCxRQUNQaEQsR0FBT2dELFFBQ1BoRCxHQUFPZ0QsUUFDUGhELEdBQU9nRCxRQUNQaEQsR0FBT2dELFFBQ1BoRCxHQUFPZ0QsUUFDUGhELEdBQU9nRCxRQUNQaEQsR0FBT2dELFFBQ1BoRCxHQUFPZ0QsUUFDUGhELEdBQU9nRCxRQUNQaEQsR0FBT2dELFFBQ1BoRCxHQUFPZ0QsUUFDUGhELEdBQU9nRCxRQUNQaEQsR0FBT2dELFFBQ1BoRCxHQUFPTyxRQUNQUCxHQUFPa0QsT0FDUGxELEdBQU9PLFFBQ1BQLEdBQU9PLFFBQ1BQLEdBQU9nRCxRQUNQaEQsR0FBT08sUUFDUFAsR0FBT2dELFFBQ1BoRCxHQUFPZ0QsUUFDUGhELEdBQU9nRCxRQUNQaEQsR0FBT2dELFFBQ1BoRCxHQUFPZ0QsUUFDUGhELEdBQU9nRCxRQUNQaEQsR0FBT2dELFFBQ1BoRCxHQUFPZ0QsUUFDUGhELEdBQU9nRCxRQUNQaEQsR0FBT2dELFFBQ1BoRCxHQUFPZ0QsUUFDUGhELEdBQU9nRCxRQUNQaEQsR0FBT2dELFFBQ1BoRCxHQUFPZ0QsUUFDUGhELEdBQU9nRCxRQUNQaEQsR0FBT2dELFFBQ1BoRCxHQUFPZ0QsUUFDUGhELEdBQU9nRCxRQUNQaEQsR0FBT2dELFFBQ1BoRCxHQUFPZ0QsUUFDUGhELEdBQU9nRCxRQUNQaEQsR0FBT2dELFFBQ1BoRCxHQUFPZ0QsUUFDUGhELEdBQU9nRCxRQUNQaEQsR0FBT2dELFFBQ1BoRCxHQUFPZ0QsUUFDUGhELEdBQU9PLFFBQ1BQLEdBQU9PLFFBQ1BQLEdBQU9PLFFBQ1BQLEdBQU9PLFFBQ1BQLEdBQU9PLFNBR1RtQyxHQUFZckMsSUFBUUwsR0FBTzJDLFlBS2RRLEdBQXlCLENBQ3BDbkQsR0FBT00sSUFDUE4sR0FBT00sSUFDUE4sR0FBT00sSUFDUE4sR0FBT00sSUFDUE4sR0FBT00sSUFDUE4sR0FBT00sSUFDUE4sR0FBT00sSUFDUE4sR0FBT00sSUFDUE4sR0FBT00sSUFDUE4sR0FBT00sSUFDUE4sR0FBT00sSUFDUE4sR0FBT00sSUFDUE4sR0FBT00sSUFDUE4sR0FBT00sSUFDUE4sR0FBT00sSUFDUE4sR0FBT00sSUFDUE4sR0FBT00sSUFDUE4sR0FBT00sSUFDUE4sR0FBT00sSUFDUE4sR0FBT00sSUFDUE4sR0FBT00sSUFDUE4sR0FBT00sSUFDUE4sR0FBT00sSUFDUE4sR0FBT00sSUFDUE4sR0FBT00sSUFDUE4sR0FBT00sSUFDUE4sR0FBT00sSUFDUE4sR0FBT00sSUFDUE4sR0FBT00sSUFDUE4sR0FBT00sSUFDUE4sR0FBT00sSUFDUE4sR0FBT00sSUFDUE4sR0FBT00sSUFDUE4sR0FBT00sSUFDUE4sR0FBT00sSUFDUE4sR0FBT00sSUFDUE4sR0FBT00sSUFDUE4sR0FBT00sSUFDUE4sR0FBT00sSUFDUE4sR0FBT00sSUFDUE4sR0FBT00sSUFDUE4sR0FBT00sSUFDUE4sR0FBT00sSUFDUE4sR0FBT00sSUFDUE4sR0FBT00sSUFDUE4sR0FBT29ELE9BQ1BwRCxHQUFPaUQsTUFDUGpELEdBQU9NLElBQ1BOLEdBQU9xRCxNQUNQckQsR0FBT3FELE1BQ1ByRCxHQUFPcUQsTUFDUHJELEdBQU9xRCxNQUNQckQsR0FBT3FELE1BQ1ByRCxHQUFPcUQsTUFDUHJELEdBQU9xRCxNQUNQckQsR0FBT3FELE1BQ1ByRCxHQUFPcUQsTUFDUHJELEdBQU9xRCxNQUNQckQsR0FBT00sSUFDUE4sR0FBT00sSUFDUE4sR0FBT00sSUFDUE4sR0FBT00sSUFDUE4sR0FBT00sSUFDUE4sR0FBT00sSUFDUE4sR0FBT00sSUFDUE4sR0FBT3NELFFBQ1B0RCxHQUFPc0QsUUFDUHRELEdBQU9zRCxRQUNQdEQsR0FBT3NELFFBQ1B0RCxHQUFPc0QsUUFDUHRELEdBQU9zRCxRQUNQdEQsR0FBT3NELFFBQ1B0RCxHQUFPc0QsUUFDUHRELEdBQU9zRCxRQUNQdEQsR0FBT3NELFFBQ1B0RCxHQUFPc0QsUUFDUHRELEdBQU9zRCxRQUNQdEQsR0FBT3NELFFBQ1B0RCxHQUFPc0QsUUFDUHRELEdBQU9zRCxRQUNQdEQsR0FBT3NELFFBQ1B0RCxHQUFPc0QsUUFDUHRELEdBQU9zRCxRQUNQdEQsR0FBT3NELFFBQ1B0RCxHQUFPc0QsUUFDUHRELEdBQU9zRCxRQUNQdEQsR0FBT3NELFFBQ1B0RCxHQUFPc0QsUUFDUHRELEdBQU9zRCxRQUNQdEQsR0FBT3NELFFBQ1B0RCxHQUFPc0QsUUFDUHRELEdBQU9NLElBQ1BOLEdBQU9rRCxPQUNQbEQsR0FBT00sSUFDUE4sR0FBT00sSUFDUE4sR0FBT3NELFFBQ1B0RCxHQUFPTSxJQUNQTixHQUFPc0QsUUFDUHRELEdBQU9zRCxRQUNQdEQsR0FBT3NELFFBQ1B0RCxHQUFPc0QsUUFDUHRELEdBQU9zRCxRQUNQdEQsR0FBT3NELFFBQ1B0RCxHQUFPc0QsUUFDUHRELEdBQU9zRCxRQUNQdEQsR0FBT3NELFFBQ1B0RCxHQUFPc0QsUUFDUHRELEdBQU9zRCxRQUNQdEQsR0FBT3NELFFBQ1B0RCxHQUFPc0QsUUFDUHRELEdBQU9zRCxRQUNQdEQsR0FBT3NELFFBQ1B0RCxHQUFPc0QsUUFDUHRELEdBQU9zRCxRQUNQdEQsR0FBT3NELFFBQ1B0RCxHQUFPc0QsUUFDUHRELEdBQU9zRCxRQUNQdEQsR0FBT3NELFFBQ1B0RCxHQUFPc0QsUUFDUHRELEdBQU9zRCxRQUNQdEQsR0FBT3NELFFBQ1B0RCxHQUFPc0QsUUFDUHRELEdBQU9zRCxRQUNQdEQsR0FBT00sSUFDUE4sR0FBT00sSUFDUE4sR0FBT00sSUFDUE4sR0FBT00sSUFDUE4sR0FBT00sS0FHVDZDLEdBQVk5QyxJQUFRTCxHQUFPTSxJQUszQixJQUFhaUQsR0FBNEIsQ0FDdkN2RCxHQUFPd0QsUUFDUHhELEdBQU93RCxRQUNQeEQsR0FBT3dELFFBQ1B4RCxHQUFPd0QsUUFDUHhELEdBQU93RCxRQUNQeEQsR0FBT3dELFFBQ1B4RCxHQUFPd0QsUUFDUHhELEdBQU93RCxRQUNQeEQsR0FBT3dELFFBQ1B4RCxHQUFPeUQsUUFDUHpELEdBQU93RCxRQUNQeEQsR0FBT3dELFFBQ1B4RCxHQUFPd0QsUUFDUHhELEdBQU93RCxRQUNQeEQsR0FBT3dELFFBQ1B4RCxHQUFPd0QsUUFDUHhELEdBQU93RCxRQUNQeEQsR0FBT3dELFFBQ1B4RCxHQUFPd0QsUUFDUHhELEdBQU93RCxRQUNQeEQsR0FBT3dELFFBQ1B4RCxHQUFPd0QsUUFDUHhELEdBQU93RCxRQUNQeEQsR0FBT3dELFFBQ1B4RCxHQUFPd0QsUUFDUHhELEdBQU93RCxRQUNQeEQsR0FBT3dELFFBQ1B4RCxHQUFPd0QsUUFDUHhELEdBQU93RCxRQUNQeEQsR0FBT3dELFFBQ1B4RCxHQUFPd0QsUUFDUHhELEdBQU93RCxRQUNQeEQsR0FBT3lELFFBQ1B6RCxHQUFPd0QsUUFDUHhELEdBQU93RCxRQUNQeEQsR0FBT3dELFFBQ1B4RCxHQUFPd0QsUUFDUHhELEdBQU93RCxRQUNQeEQsR0FBT3dELFFBQ1B4RCxHQUFPd0QsUUFDUHhELEdBQU8wRCxPQUNQMUQsR0FBT3dELFFBQ1B4RCxHQUFPd0QsUUFDUHhELEdBQU93RCxRQUNQeEQsR0FBT3dELFFBQ1B4RCxHQUFPd0QsUUFDUHhELEdBQU93RCxRQUNQeEQsR0FBT3dELFFBQ1B4RCxHQUFPNkMsS0FDUDdDLEdBQU82QyxLQUNQN0MsR0FBTzZDLEtBQ1A3QyxHQUFPNkMsS0FDUDdDLEdBQU82QyxLQUNQN0MsR0FBTzZDLEtBQ1A3QyxHQUFPNkMsS0FDUDdDLEdBQU82QyxLQUNQN0MsR0FBTzZDLEtBQ1A3QyxHQUFPNkMsS0FDUDdDLEdBQU93RCxRQUNQeEQsR0FBT3dELFFBQ1B4RCxHQUFPd0QsUUFDUHhELEdBQU93RCxRQUNQeEQsR0FBT3dELFFBQ1B4RCxHQUFPd0QsUUFDUHhELEdBQU93RCxRQUNQeEQsR0FBTzZDLEtBQ1A3QyxHQUFPNkMsS0FDUDdDLEdBQU82QyxLQUNQN0MsR0FBTzZDLEtBQ1A3QyxHQUFPNkMsS0FDUDdDLEdBQU82QyxLQUNQN0MsR0FBTzZDLEtBQ1A3QyxHQUFPNkMsS0FDUDdDLEdBQU82QyxLQUNQN0MsR0FBTzZDLEtBQ1A3QyxHQUFPNkMsS0FDUDdDLEdBQU82QyxLQUNQN0MsR0FBTzZDLEtBQ1A3QyxHQUFPNkMsS0FDUDdDLEdBQU82QyxLQUNQN0MsR0FBTzZDLEtBQ1A3QyxHQUFPNkMsS0FDUDdDLEdBQU82QyxLQUNQN0MsR0FBTzZDLEtBQ1A3QyxHQUFPNkMsS0FDUDdDLEdBQU82QyxLQUNQN0MsR0FBTzZDLEtBQ1A3QyxHQUFPNkMsS0FDUDdDLEdBQU82QyxLQUNQN0MsR0FBTzZDLEtBQ1A3QyxHQUFPNkMsS0FDUDdDLEdBQU93RCxRQUNQeEQsR0FBTzhDLFFBQ1A5QyxHQUFPd0QsUUFDUHhELEdBQU93RCxRQUNQeEQsR0FBTzZDLEtBQ1A3QyxHQUFPd0QsUUFDUHhELEdBQU82QyxLQUNQN0MsR0FBTzZDLEtBQ1A3QyxHQUFPNkMsS0FDUDdDLEdBQU82QyxLQUNQN0MsR0FBTzZDLEtBQ1A3QyxHQUFPNkMsS0FDUDdDLEdBQU82QyxLQUNQN0MsR0FBTzZDLEtBQ1A3QyxHQUFPNkMsS0FDUDdDLEdBQU82QyxLQUNQN0MsR0FBTzZDLEtBQ1A3QyxHQUFPNkMsS0FDUDdDLEdBQU82QyxLQUNQN0MsR0FBTzZDLEtBQ1A3QyxHQUFPNkMsS0FDUDdDLEdBQU82QyxLQUNQN0MsR0FBTzZDLEtBQ1A3QyxHQUFPNkMsS0FDUDdDLEdBQU82QyxLQUNQN0MsR0FBTzZDLEtBQ1A3QyxHQUFPNkMsS0FDUDdDLEdBQU82QyxLQUNQN0MsR0FBTzZDLEtBQ1A3QyxHQUFPNkMsS0FDUDdDLEdBQU82QyxLQUNQN0MsR0FBTzZDLEtBQ1A3QyxHQUFPd0QsUUFDUHhELEdBQU93RCxRQUNQeEQsR0FBT3dELFFBQ1B4RCxHQUFPd0QsUUFDUHhELEdBQU93RCxTQUdURCxHQUFlbEQsSUFBUUwsR0FBT3dELFlBS2pCRyxHQUF1QixDQUNsQzNELEdBQU80RCxPQUNQNUQsR0FBTzRELE9BQ1A1RCxHQUFPNEQsT0FDUDVELEdBQU80RCxPQUNQNUQsR0FBTzRELE9BQ1A1RCxHQUFPNEQsT0FDUDVELEdBQU80RCxPQUNQNUQsR0FBTzRELE9BQ1A1RCxHQUFPNEQsT0FDUDVELEdBQU80RCxPQUNQNUQsR0FBTzRELE9BQ1A1RCxHQUFPNEQsT0FDUDVELEdBQU80RCxPQUNQNUQsR0FBTzRELE9BQ1A1RCxHQUFPNEQsT0FDUDVELEdBQU80RCxPQUNQNUQsR0FBTzRELE9BQ1A1RCxHQUFPNEQsT0FDUDVELEdBQU80RCxPQUNQNUQsR0FBTzRELE9BQ1A1RCxHQUFPNEQsT0FDUDVELEdBQU80RCxPQUNQNUQsR0FBTzRELE9BQ1A1RCxHQUFPNEQsT0FDUDVELEdBQU80RCxPQUNQNUQsR0FBTzRELE9BQ1A1RCxHQUFPNEQsT0FDUDVELEdBQU80RCxPQUNQNUQsR0FBTzRELE9BQ1A1RCxHQUFPNEQsT0FDUDVELEdBQU80RCxPQUNQNUQsR0FBTzRELE9BQ1A1RCxHQUFPNEQsT0FDUDVELEdBQU80RCxPQUNQNUQsR0FBTzRELE9BQ1A1RCxHQUFPNEQsT0FDUDVELEdBQU80RCxPQUNQNUQsR0FBTzZELE9BQ1A3RCxHQUFPNEQsT0FDUDVELEdBQU80RCxPQUNQNUQsR0FBTzRELE9BQ1A1RCxHQUFPNEQsT0FDUDVELEdBQU80RCxPQUNQNUQsR0FBTzRELE9BQ1A1RCxHQUFPNEQsT0FDUDVELEdBQU80RCxPQUNQNUQsR0FBTzhELE9BQ1A5RCxHQUFPNEQsT0FDUDVELEdBQU82QyxLQUNQN0MsR0FBTzZDLEtBQ1A3QyxHQUFPNkMsS0FDUDdDLEdBQU82QyxLQUNQN0MsR0FBTzZDLEtBQ1A3QyxHQUFPNkMsS0FDUDdDLEdBQU82QyxLQUNQN0MsR0FBTzZDLEtBQ1A3QyxHQUFPNkMsS0FDUDdDLEdBQU82QyxLQUNQN0MsR0FBTzRELE9BQ1A1RCxHQUFPNEQsT0FDUDVELEdBQU80RCxPQUNQNUQsR0FBTzRELE9BQ1A1RCxHQUFPNEQsT0FDUDVELEdBQU80RCxPQUNQNUQsR0FBTzRELE9BQ1A1RCxHQUFPK0QsS0FDUC9ELEdBQU8rRCxLQUNQL0QsR0FBTytELEtBQ1AvRCxHQUFPK0QsS0FDUC9ELEdBQU8rRCxLQUNQL0QsR0FBTytELEtBQ1AvRCxHQUFPK0QsS0FDUC9ELEdBQU8rRCxLQUNQL0QsR0FBTytELEtBQ1AvRCxHQUFPK0QsS0FDUC9ELEdBQU8rRCxLQUNQL0QsR0FBTytELEtBQ1AvRCxHQUFPK0QsS0FDUC9ELEdBQU8rRCxLQUNQL0QsR0FBTytELEtBQ1AvRCxHQUFPK0QsS0FDUC9ELEdBQU8rRCxLQUNQL0QsR0FBTytELEtBQ1AvRCxHQUFPK0QsS0FDUC9ELEdBQU8rRCxLQUNQL0QsR0FBTytELEtBQ1AvRCxHQUFPK0QsS0FDUC9ELEdBQU8rRCxLQUNQL0QsR0FBTytELEtBQ1AvRCxHQUFPK0QsS0FDUC9ELEdBQU8rRCxLQUNQL0QsR0FBTzRELE9BQ1A1RCxHQUFPNEQsT0FDUDVELEdBQU80RCxPQUNQNUQsR0FBTzRELE9BQ1A1RCxHQUFPK0QsS0FDUC9ELEdBQU80RCxPQUNQNUQsR0FBTytELEtBQ1AvRCxHQUFPK0QsS0FDUC9ELEdBQU8rRCxLQUNQL0QsR0FBTytELEtBQ1AvRCxHQUFPK0QsS0FDUC9ELEdBQU8rRCxLQUNQL0QsR0FBTytELEtBQ1AvRCxHQUFPK0QsS0FDUC9ELEdBQU8rRCxLQUNQL0QsR0FBTytELEtBQ1AvRCxHQUFPK0QsS0FDUC9ELEdBQU8rRCxLQUNQL0QsR0FBTytELEtBQ1AvRCxHQUFPK0QsS0FDUC9ELEdBQU8rRCxLQUNQL0QsR0FBTytELEtBQ1AvRCxHQUFPK0QsS0FDUC9ELEdBQU8rRCxLQUNQL0QsR0FBTytELEtBQ1AvRCxHQUFPK0QsS0FDUC9ELEdBQU8rRCxLQUNQL0QsR0FBTytELEtBQ1AvRCxHQUFPK0QsS0FDUC9ELEdBQU8rRCxLQUNQL0QsR0FBTytELEtBQ1AvRCxHQUFPK0QsS0FDUC9ELEdBQU80RCxPQUNQNUQsR0FBTzRELE9BQ1A1RCxHQUFPNEQsT0FDUDVELEdBQU80RCxPQUNQNUQsR0FBTzRELFFBR1RELEdBQVV0RCxJQUFRTCxHQUFPNEQsT0FLekIsSUFBYUksR0FBMEIsQ0FDckNoRSxHQUFPaUUsT0FDUGpFLEdBQU9pRSxPQUNQakUsR0FBT2lFLE9BQ1BqRSxHQUFPaUUsT0FDUGpFLEdBQU9pRSxPQUNQakUsR0FBT2lFLE9BQ1BqRSxHQUFPaUUsT0FDUGpFLEdBQU9pRSxPQUNQakUsR0FBT2lFLE9BQ1BqRSxHQUFPaUUsT0FDUGpFLEdBQU9pRSxPQUNQakUsR0FBT2lFLE9BQ1BqRSxHQUFPaUUsT0FDUGpFLEdBQU9pRSxPQUNQakUsR0FBT2lFLE9BQ1BqRSxHQUFPaUUsT0FDUGpFLEdBQU9pRSxPQUNQakUsR0FBT2lFLE9BQ1BqRSxHQUFPaUUsT0FDUGpFLEdBQU9pRSxPQUNQakUsR0FBT2lFLE9BQ1BqRSxHQUFPaUUsT0FDUGpFLEdBQU9pRSxPQUNQakUsR0FBT2lFLE9BQ1BqRSxHQUFPaUUsT0FDUGpFLEdBQU9pRSxPQUNQakUsR0FBT2lFLE9BQ1BqRSxHQUFPaUUsT0FDUGpFLEdBQU9pRSxPQUNQakUsR0FBT2lFLE9BQ1BqRSxHQUFPaUUsT0FDUGpFLEdBQU9pRSxPQUNQakUsR0FBT2lFLE9BQ1BqRSxHQUFPaUUsT0FDUGpFLEdBQU9pRSxPQUNQakUsR0FBT2lFLE9BQ1BqRSxHQUFPaUUsT0FDUGpFLEdBQU82RCxPQUNQN0QsR0FBT2lFLE9BQ1BqRSxHQUFPaUUsT0FDUGpFLEdBQU9pRSxPQUNQakUsR0FBT2lFLE9BQ1BqRSxHQUFPaUUsT0FDUGpFLEdBQU9pRSxPQUNQakUsR0FBT2lFLE9BQ1BqRSxHQUFPaUUsT0FDUGpFLEdBQU9pRSxPQUNQakUsR0FBT2lFLE9BQ1BqRSxHQUFPNkMsS0FDUDdDLEdBQU82QyxLQUNQN0MsR0FBTzZDLEtBQ1A3QyxHQUFPNkMsS0FDUDdDLEdBQU82QyxLQUNQN0MsR0FBTzZDLEtBQ1A3QyxHQUFPNkMsS0FDUDdDLEdBQU82QyxLQUNQN0MsR0FBTzZDLEtBQ1A3QyxHQUFPNkMsS0FDUDdDLEdBQU9pRSxPQUNQakUsR0FBT2lFLE9BQ1BqRSxHQUFPaUUsT0FDUGpFLEdBQU9pRSxPQUNQakUsR0FBT2lFLE9BQ1BqRSxHQUFPaUUsT0FDUGpFLEdBQU9pRSxPQUNQakUsR0FBTytELEtBQ1AvRCxHQUFPK0QsS0FDUC9ELEdBQU8rRCxLQUNQL0QsR0FBTytELEtBQ1AvRCxHQUFPK0QsS0FDUC9ELEdBQU8rRCxLQUNQL0QsR0FBTytELEtBQ1AvRCxHQUFPK0QsS0FDUC9ELEdBQU8rRCxLQUNQL0QsR0FBTytELEtBQ1AvRCxHQUFPK0QsS0FDUC9ELEdBQU8rRCxLQUNQL0QsR0FBTytELEtBQ1AvRCxHQUFPK0QsS0FDUC9ELEdBQU8rRCxLQUNQL0QsR0FBTytELEtBQ1AvRCxHQUFPK0QsS0FDUC9ELEdBQU8rRCxLQUNQL0QsR0FBTytELEtBQ1AvRCxHQUFPK0QsS0FDUC9ELEdBQU8rRCxLQUNQL0QsR0FBTytELEtBQ1AvRCxHQUFPK0QsS0FDUC9ELEdBQU8rRCxLQUNQL0QsR0FBTytELEtBQ1AvRCxHQUFPK0QsS0FDUC9ELEdBQU9pRSxPQUNQakUsR0FBT2lFLE9BQ1BqRSxHQUFPaUUsT0FDUGpFLEdBQU9pRSxPQUNQakUsR0FBTytELEtBQ1AvRCxHQUFPaUUsT0FDUGpFLEdBQU8rRCxLQUNQL0QsR0FBTytELEtBQ1AvRCxHQUFPK0QsS0FDUC9ELEdBQU8rRCxLQUNQL0QsR0FBTytELEtBQ1AvRCxHQUFPK0QsS0FDUC9ELEdBQU8rRCxLQUNQL0QsR0FBTytELEtBQ1AvRCxHQUFPK0QsS0FDUC9ELEdBQU8rRCxLQUNQL0QsR0FBTytELEtBQ1AvRCxHQUFPK0QsS0FDUC9ELEdB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R0FDQSxLQUNBLEdBQ0EsSUFDQSxFQUNBLEtBQ0EsRUFDQSxJQUNBLEVBQ0EsS0FDQSxFQUNBLEtBRUZDLFNBQVUsQ0FDUixLQUNBLElBQ0EsSUFDQSxJQUNBLElBQ0EsSUFDQSxJQUNBLElBQ0EsSUFDQSxJQUNBLElBQ0EsSUFDQSxJQUNBLElBQ0EsSUFDQSxJQUNBLElBQ0EsSUFDQSxJQUNBLElBQ0EsSUFDQSxJQUNBLElBQ0EsSUFDQSxJQUNBLElBQ0EsSUFDQSxJQUNBLElBQ0EsSUFDQSxJQUNBLElBQ0EsSUFDQSxJQUNBLElBQ0EsSUFDQSxJQUNBLEdBQ0EsSUFDQSxHQUNBLElBQ0EsR0FDQSxJQUNBLEdBQ0EsSUFDQSxHQUNBLElBQ0EsR0FDQSxJQUNBLEdBQ0EsSUFDQSxHQUNBLElBQ0EsR0FDQSxJQUNBLEVBQ0EsSUFDQSxFQUNBLElBQ0EsRUFDQSxJQUNBLEVBQ0EsSUFDQSxFQUNBLElBQ0EsRUFDQSxJQUNBLEVBQ0EsSUFDQSxFQUNBLElBQ0EsRUFDQSxLQUVGQyxTQUFVLENBQ1IsTUFDQSxJQUNBLElBQ0EsSUFDQSxJQUNBLElBQ0EsSUFDQSxJQUNBLElBQ0EsSUFDQSxJQUNBLElBQ0EsSUFDQSxJQUNBLElBQ0EsSUFDQSxJQUNBLElBQ0EsSUFDQSxJQUNBLElBQ0EsSUFDQSxJQUNBLElBQ0EsSUFDQSxJQUNBLElBQ0EsSUFDQSxJQUNBLElBQ0EsSUFDQSxJQUNBLElBQ0EsSUFDQSxJQUNBLElBQ0EsSUFDQSxJQUNBLElBQ0EsR0FDQSxJQUNBLEdBQ0EsSUFDQSxHQUNBLElBQ0EsR0FDQSxJQUNBLEdBQ0EsSUFDQSxHQUNBLElBQ0EsR0FDQSxJQUNBLEdBQ0EsSUFDQSxHQUNBLElBQ0EsRUFDQSxJQUNBLEVBQ0EsSUFDQSxFQUNBLElBQ0EsRUFDQSxJQUNBLEVBQ0EsSUFDQSxFQUNBLElBQ0EsRUFDQSxJQUNBLEVBQ0EsSUFDQSxFQUNBLEtBRUZDLE9BQVEsQ0FDTixJQUNBLElBQ0EsSUFDQSxJQUNBLElBQ0EsSUFDQSxJQUNBLElBQ0EsSUFDQSxHQUNBLElBQ0EsR0FDQSxJQUNBLEdB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
